#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Вызывается из УчетНДСУПВызовСервера.УстановитьЗаголовокСостоянияОплатыНДСПоСчетуФактуре
// Обновляет заголовок команды просмотра состояния оплаты НДС по документу при возникновении 
// события ИзменениеСостоянияОплатыНДСПоСчетуФактуре.
// 
// Параметры:
// 	СчетФактура - ОпределяемыйТип.СчетФактура - Документ, требующий оплаты НДС.
// 	КомандаСостояния - КнопкаФормы - Элемент кманды просмотра состояния.
Процедура УстановитьЗаголовокСостоянияОплатыНДСПоСчетуФактуре(СчетФактура, КомандаСостояния) Экспорт

	Если Не ЗначениеЗаполнено(СчетФактура) Тогда
		Возврат;
	КонецЕсли;
	
	КомандаСостояния.Заголовок = ТекстСостояниеОплатыНДСВБюджет(СчетФактура);

КонецПроцедуры

// Вызывается из УчетНДСУПВызовСервера.ТекстСостояниеОплатыНДСВБюджет
// Получает текст состояния оплаты НДС по документу
// 
// Параметры:
// 	СчетФактура - ОпределяемыйТип.СчетФактура - Документ, требующий оплаты НДС.
Функция ТекстСостояниеОплатыНДСВБюджет(СчетФактура) Экспорт
	
	Если Не ЗначениеЗаполнено(СчетФактура) Тогда
		Возврат НСтр("ru = 'Ожидает оплаты НДС в бюджет'");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ТекущееСостояние = Перечисления.СостоянияОплатыНДСВБюджет.ПустаяСсылка();
	
	// к оплате
	Набор = СоздатьНаборЗаписей();
	Набор.Отбор.СчетФактура.Установить(СчетФактура);
	Набор.Отбор.Состояние.Установить(Перечисления.СостоянияОплатыНДСВБюджет.ОжидаетОплаты);
	Набор.Прочитать();
	КОплате = Набор.Итог("Сумма");
	Если КОплате > 0 Тогда 
		ТекущееСостояние = Перечисления.СостоянияОплатыНДСВБюджет.ОжидаетОплаты;
	КонецЕсли;
	
	// оплачено
	Набор.Отбор.Состояние.Установить(Перечисления.СостоянияОплатыНДСВБюджет.Оплачено);
	Набор.Прочитать();
	ТаблицаОплат = Набор.Выгрузить();
	ТаблицаОплат.Сортировать("ДатаПодтвержденияОплаты Убыв");
	Если ТаблицаОплат.Количество() > 0 Тогда 
		ТекущееСостояние        = Перечисления.СостоянияОплатыНДСВБюджет.Оплачено;
		ДатаПодтвержденияОплаты = Формат(ТаблицаОплат[0].ДатаПодтвержденияОплаты, "ДЛФ=D");
		Если ТаблицаОплат.Количество() > 1 Тогда
			СтрокаПлатежноРасчетныеДокументы = НСтр("ru = '<несколько платежей>'");
		Иначе
			СтрокаПлатежноРасчетныеДокументы = НСтр("ru = '№ '") + ТаблицаОплат[0].СтрокаПлатежноРасчетныеДокументы;
		КонецЕсли;
	КонецЕсли;
	
	// получено подтверждение
	Если ТипЗнч(СчетФактура) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") Тогда
		Набор.Отбор.Состояние.Установить(Перечисления.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение);
		Набор.Прочитать();
		Если Набор.Количество() Тогда
			ТекущееСостояние         = Перечисления.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение;
			НомерОтметкиОРегистрации = Набор[0].НомерОтметкиОРегистрации;
			ДатаПодтвержденияОплаты  = Формат(Набор[0].ДатаПодтвержденияОплаты, "ДЛФ=D");
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущееСостояние = Перечисления.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение Тогда
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Оплата подтверждена %1 г. Отметка № %2'"),
			ДатаПодтвержденияОплаты,
			НомерОтметкиОРегистрации);
	ИначеЕсли ТекущееСостояние = Перечисления.СостоянияОплатыНДСВБюджет.Оплачено Тогда
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'НДС оплачен %1 (%2)'"),
			ДатаПодтвержденияОплаты,
			СтрокаПлатежноРасчетныеДокументы);
	ИначеЕсли ТекущееСостояние = Перечисления.СостоянияОплатыНДСВБюджет.ОжидаетОплаты Тогда
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Укажите реквизиты документов оплаты НДС. Всего к оплате (руб.): %1.'"),
			Формат(КОплате, "ЧДЦ=2; ЧГ=0"));
	Иначе
		Возврат НСтр("ru = 'Ожидает оплаты НДС в бюджет'");
	КонецЕсли;
	
КонецФункции

// Вызывается из УчетНДСУП.ЗарегистрироватьСчетаФактурыОжидаетОплатыНДС
// Регистрирует документы начисления НДС к оплате.
// При этом формируются записи регистра ПодтверждениеОплатыНДСВБюджет с состоянием ОжидаетОплаты.
// Параметры:
// 	СчетаФактуры - ТаблицаЗначений - Таблица сумм НДС к оплате по счетам-фактурам.	
// 	Колонки таблицы:
//			* СчетФактура - Документ, требующий оплаты НДС
//			* СуммаОплаты - Сумма НДС к оплате
//			* ВидАгентскогоДоговора - ПеречислениеСсылка.ВидыАгентскихДоговоров - для счетов-фактур налогового агента 
// 	ДокументРегистратор - ДокументСсылка - Документ-регистратор операции.
// 	Проведен - Булево - Признак проведения документа-регистратора.
Процедура ЗарегистрироватьСчетаФактурыОжидаетОплатыНДС(СчетаФактуры, ДокументРегистратор, Проведен) Экспорт

	Если Не ЗначениеЗаполнено(ДокументРегистратор) Тогда
		Возврат;
	КонецЕсли;
	
	СчетаФактуры.Свернуть("СчетФактура,ВидАгентскогоДоговора","СуммаОплаты");
	
	// По указанному регистратору, если проведен:
	// 1. удаляем ранее сделанные записи ОжидаетОплаты
	// 2. Добавляем новые записи ОжидаетОплаты
	// 3. Сравниваем ОжидаетОплаты и Оплачено по каждому счету-фактуре
	// 3.1 Если Оплачено >= ОжидаетОплаты, то регистрируем событие ОплатаПодверждена по самой последней оплате
	//	для всех документов кроме Заявлений о ввозе
	// 3.2 Если Оплачено < ОжидаетОплаты, есть событие ОплатаПодтверждена и это не Заявление о ввозе, то удаляем подтверждение.

	УстановитьПривилегированныйРежим(Истина);
	
	Если Проведен Тогда
		// регистрируем новые записи ОжидаетОплаты
		Набор = РегистрыСведений.ПодтверждениеОплатыНДСВБюджет.СоздатьНаборЗаписей();
		Набор.Отбор.Состояние.Установить(Перечисления.СостоянияОплатыНДСВБюджет.ОжидаетОплаты);
		Набор.Отбор.ДокументРегистратор.Установить(ДокументРегистратор);
		Для Каждого СтрокаТЗ Из СчетаФактуры Цикл
			Запись = Набор.Добавить();
			Запись.Состояние             = Перечисления.СостоянияОплатыНДСВБюджет.ОжидаетОплаты;
			Запись.ДокументРегистратор   = ДокументРегистратор;
			Запись.СчетФактура           = СтрокаТЗ.СчетФактура;
			Запись.ВидАгентскогоДоговора = СтрокаТЗ.ВидАгентскогоДоговора;
			Запись.Сумма                 = СтрокаТЗ.СуммаОплаты;
		КонецЦикла;
		Набор.Записать();
	КонецЕсли;
	
	// По указанному регистратору, если не проведен:
	// 1. удаляем ранее сделанные записи ОжидаетОплаты
	// 2. Если есть состояние ОплатаПодтверждена и это не Заявление о ввозе, то удаляем подтверждение.
	
	Если Не Проведен Тогда
		// удаляем записи ОжидаетОплаты
		Набор = РегистрыСведений.ПодтверждениеОплатыНДСВБюджет.СоздатьНаборЗаписей();
		Набор.Отбор.Состояние.Установить(Перечисления.СостоянияОплатыНДСВБюджет.ОжидаетОплаты);
		Набор.Отбор.ДокументРегистратор.Установить(ДокументРегистратор);
		Набор.Записать();
	КонецЕсли;

	ОбновитьСостояниеПодтвержденияОплаты(СчетаФактуры, Проведен);

КонецПроцедуры

// Вызывается из УчетНДСУП.ЗарегистрироватьОжиданиеОплатыНДСПоСчетамФактурам
// Регистрирует запланированную оплату НДС по документам.
// При этом в записи регистра ПодтверждениеОплатыНДСВБюджет с состоянием КОплате добавляется ссылка на заявку.
// Параметры:
// 	СчетаФактуры - ТаблицаЗначений - Таблица сумм НДС к оплате по счетам-фактурам.	
// 	Колонки таблицы:
//			* СчетФактура - Документ, требующий оплаты НДС
//			* СуммаОплаты - Сумма НДС к оплате
// 	ТипНалога - ПеречислениеСсылка.ТипыНалогов - тип уплачиваемого налога (налоговый агент, ввоз из ЕАЭС и т.п.)
// 	ДокументРегистратор - ДокументСсылка - Документ-регистратор операции.
// 	Проведен - Булево - Признак проведения документа-регистратора.
Процедура ЗарегистрироватьПланированиеОплатыНДСПоСчетамФактурам(СчетаФактуры, ТипНалога, ДокументРегистратор, Проведен) Экспорт

	Если Не ЗначениеЗаполнено(ДокументРегистратор) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СчетаФактуры = ПреобразоватьТаблицуСчетовФактур(СчетаФактуры, ТипНалога);
	
	// По указанному регистратору, если проведен:
	// 1. ищем ранее сделанные записи ОжидаетОплаты по счетам-фактурам и указываем в них ДокументРегистратор как заявку 
	Если Проведен Тогда
		
		// регистрируем новые записи ОжидаетОплаты
		Набор = РегистрыСведений.ПодтверждениеОплатыНДСВБюджет.СоздатьНаборЗаписей();
		Набор.Отбор.Состояние.Установить(Перечисления.СостоянияОплатыНДСВБюджет.ОжидаетОплаты);
		Для Каждого СтрокаТЗ Из СчетаФактуры Цикл
			Набор.Отбор.СчетФактура.Установить(СтрокаТЗ.СчетФактура);
			Набор.Прочитать();
			Для Каждого Запись Из Набор Цикл
				Запись.ЗаявкаНаРасходованиеДенежныхСредств = ДокументРегистратор;
			КонецЦикла;
			Набор.Записать();
		КонецЦикла;
		
	КонецЕсли;

	// По указанному регистратору, если не проведен:
	// 1. ищем ранее сделанные записи ОжидаетОплаты по счетам-фактурам с заявкой = ДокументРегистратор и очищаем ссылку 
	Если Не Проведен Тогда
		
		// регистрируем новые записи ОжидаетОплаты
		Набор = РегистрыСведений.ПодтверждениеОплатыНДСВБюджет.СоздатьНаборЗаписей();
		Набор.Отбор.Состояние.Установить(Перечисления.СостоянияОплатыНДСВБюджет.ОжидаетОплаты);
		Для Каждого СтрокаТЗ Из СчетаФактуры Цикл
			Набор.Отбор.СчетФактура.Установить(СтрокаТЗ.СчетФактура);
			Набор.Прочитать();
			Для Каждого Запись Из Набор Цикл
				Если Запись.ЗаявкаНаРасходованиеДенежныхСредств = ДокументРегистратор Тогда 
					Запись.ЗаявкаНаРасходованиеДенежныхСредств = Неопределено;
				КонецЕсли;
			КонецЦикла;
			Набор.Записать();
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

// Вызывается из УчетНДСУП.ЗарегистрироватьОплатуНДСПоСчетамФактурам
// Регистрирует фактическую оплату НДС по документам.
// При этом формируются записи регистра ПодтверждениеОплатыНДСВБюджет с состояние Оплачено.
// Параметры:
// 	СчетаФактуры - ТаблицаЗначений - Таблица сумм НДС к оплате по счетам-фактурам.	
// 	Колонки таблицы:
//			* СчетФактура - Документ, требующий оплаты НДС
//			* СуммаОплаты - Сумма НДС к оплате
// 	ДокументРегистратор - ДокументСсылка - Документ-регистратор операции.
// 	РеквизитыДокументаОплаты - Структура - Структура реквизитов документа оплаты 
// 	Состав полей:
// 			* ДатаПеречисленияВБюджет - Дата - дата фактического перечисления НДС в бюджет.
// 			* ТипНалога - ПеречислениеСсылка.ТипыНалогов - тип уплачиваемого налога (налоговый агент, ввоз из ЕАЭС и т.п.)
//			* НомерДокумента - Строка - номер документа перечисления налога
//			* ДатаДокумента - Дата - дата документа перечисления налога
// 	Проведен - Булево - Признак проведения документа-регистратора.
Процедура ЗарегистрироватьОплатуНДСПоСчетамФактурам(СчетаФактуры, ДокументРегистратор, РеквизитыДокументаОплаты, Проведен) Экспорт

	Если Не ЗначениеЗаполнено(ДокументРегистратор) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СчетаФактуры = ПреобразоватьТаблицуСчетовФактур(СчетаФактуры, РеквизитыДокументаОплаты.ТипНалога);
	
	// По указанному регистратору, если проведен:
	// 1. удаляем ранее сделанные записи Оплачено
	// 2. Добавляем новые записи Оплачено
 	// 3. Сравниваем КОплате и ОжидаетОплаты по каждому счету-фактуре
	// 3.1 Если Оплачено>=КОплате, то регистрируем состояние ОплатаПодверждена по самой последней оплате
	//	для всех документов кроме Заявлений о ввозе
	// 3.2 Если Оплачено < КОплате, есть событие ОплатаПодтверждена и это не Заявление о ввозе, то удаляем подтверждение.
	
	Если Проведен Тогда
		// регистрируем новые записи Оплачено
		Набор = РегистрыСведений.ПодтверждениеОплатыНДСВБюджет.СоздатьНаборЗаписей();
		Набор.Отбор.Состояние.Установить(Перечисления.СостоянияОплатыНДСВБюджет.Оплачено);
		Набор.Отбор.ДокументРегистратор.Установить(ДокументРегистратор);
		Для Каждого СтрокаТЗ Из СчетаФактуры Цикл
			Запись = Набор.Добавить();
			Запись.Состояние             = Перечисления.СостоянияОплатыНДСВБюджет.Оплачено;
			Запись.ДокументРегистратор   = ДокументРегистратор;
			Запись.СчетФактура           = СтрокаТЗ.СчетФактура;
			Запись.Сумма                 = СтрокаТЗ.СуммаОплаты;
			Запись.ДатаПодтвержденияОплаты          = РеквизитыДокументаОплаты.ДатаПеречисленияВБюджет;
			Запись.НомерДокументаПеречисленияНалога = РеквизитыДокументаОплаты.НомерДокумента;
			Запись.ДатаДокументаПеречисленияНалога  = РеквизитыДокументаОплаты.ДатаДокумента;
		КонецЦикла;
		Набор.Записать();
	КонецЕсли;

	// По указанному регистратору, если не проведен:
	// 1. удаляем ранее сделанные записи Оплачено
	// 2. Если есть состояние ОплатаПодтверждена и Оплачено < КОплате и это не Заявление о ввозе, то удаляем подтверждение.

	Если Не Проведен Тогда
		// удаляем записи Оплачено
		Набор = РегистрыСведений.ПодтверждениеОплатыНДСВБюджет.СоздатьНаборЗаписей();
		Набор.Отбор.Состояние.Установить(Перечисления.СостоянияОплатыНДСВБюджет.Оплачено);
		Набор.Отбор.ДокументРегистратор.Установить(ДокументРегистратор);
		Набор.Записать();
	КонецЕсли;

	ОбновитьСостояниеПодтвержденияОплаты(СчетаФактуры, Проведен);

КонецПроцедуры

#Область ФормаДокументыОплаты

Функция ПолучитьСуммуНДСКОплатеВБюджет(СчетФактура) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если ТипЗнч(СчетФактура) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") 
		ИЛИ ТипЗнч(СчетФактура) = Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт") Тогда
		Возврат СчетФактура.Товары.Итог("СуммаНДС");
	ИначеЕсли ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураНалоговыйАгент") Тогда
		Возврат СчетФактура.РасшифровкаСуммы.Итог("СуммаНДС");
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДанныеОтметкиНалоговогоОргана(СчетФактура) Экспорт
	
	СтруктураОтметки = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	Если ТипЗнч(СчетФактура) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") И Не СчетФактура.Пустая() Тогда
		Набор = СоздатьНаборЗаписей();
		Набор.Отбор.СчетФактура.Установить(СчетФактура);
		Набор.Отбор.Состояние.Установить(Перечисления.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение);
		Набор.Прочитать();
		Если Набор.Количество() = 1 Тогда
			СтруктураОтметки = Новый Структура("НомерОтметкиОРегистрации,ДатаПодтвержденияОплаты");
			ЗаполнитьЗначенияСвойств(СтруктураОтметки, Набор[0]);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураОтметки;
	
КонецФункции

Функция ПолучитьДанныеОплат(СчетФактура) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Набор = СоздатьНаборЗаписей();
	Набор.Отбор.СчетФактура.Установить(СчетФактура);
	Набор.Отбор.Состояние.Установить(Перечисления.СостоянияОплатыНДСВБюджет.Оплачено);
	Набор.Прочитать();
	
	Возврат Набор.Выгрузить();
	
КонецФункции

// Возвращает таблицу документов оплаты счета-фактуры
//
// Параметры:
// 	СчетФактура - ДокументСсылка.ЗаявлениеОВвозеТоваров, ДокументСсылка.ТаможеннаяДекларацияИмпорт, 
// 						 ДокументСсылка.СчетФактураНалоговыйАгент -  Документ учета НДС.
//
// Возвращаемое значение:
// 	ДокументыОплаты - ТаблицаЗначений - Таблица оплаты НДС в бюджет.
//
Функция СформироватьТаблицуОплатНДСВБюджет(СчетФактура, РучныеКорректировки = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВременныеТаблицы = Новый МенеджерВременныхТаблиц;
	СформироватьДанныеСчетовФактур(СчетФактура, ВременныеТаблицы);
	СформироватьДанныеОплаты(ВременныеТаблицы);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	Если ТипЗнч(СчетФактура) = Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт") Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РучныеКорректировки.РучнаяКорректировка КАК РучнаяКорректировка,
		|	РучныеКорректировки.Сумма КАК Сумма,
		|	РучныеКорректировки.Номер КАК Номер,
		|	РучныеКорректировки.Дата КАК Дата
		|ПОМЕСТИТЬ ВтРучныеКорректировки
		|ИЗ
		|	&РучныеКорректировки КАК РучныеКорректировки
		|ГДЕ
		|	РучныеКорректировки.РучнаяКорректировка = ИСТИНА
		|ИНДЕКСИРОВАТЬ ПО
		|	Номер,
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЛОЖЬ КАК РучнаяКорректировка,
		|	Оплаты.Номер КАК Номер,
		|	Оплаты.Дата КАК Дата,
		|	Оплаты.Сумма КАК Сумма
		|ИЗ
		|	ВтОплаты КАК Оплаты
		|ГДЕ
		|	НЕ (Оплаты.Номер, Оплаты.Дата) В
		|				(ВЫБРАТЬ
		|					ВтРучныеКорректировки.Номер КАК Номер,
		|					ВтРучныеКорректировки.Дата КАК Дата
		|				ИЗ
		|					ВтРучныеКорректировки КАК ВтРучныеКорректировки)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВтРучныеКорректировки.РучнаяКорректировка,
		|	ВтРучныеКорректировки.Номер,
		|	ВтРучныеКорректировки.Дата,
		|	ВтРучныеКорректировки.Сумма
		|ИЗ
		|	ВтРучныеКорректировки КАК ВтРучныеКорректировки";	
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РучныеКорректировки.РучнаяКорректировка КАК РучнаяКорректировка,
		|	РучныеКорректировки.Сумма КАК Сумма,
		|	РучныеКорректировки.Номер КАК Номер,
		|	РучныеКорректировки.Дата КАК Дата,
		|	РучныеКорректировки.ДатаПеречисленияНалога КАК ДатаПеречисленияНалога
		|ПОМЕСТИТЬ ВтРучныеКорректировки
		|ИЗ
		|	&РучныеКорректировки КАК РучныеКорректировки
		|ГДЕ
		|	РучныеКорректировки.РучнаяКорректировка = ИСТИНА
		|ИНДЕКСИРОВАТЬ ПО
		|	Номер,
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЛОЖЬ КАК РучнаяКорректировка,
		|	Оплаты.Номер КАК Номер,
		|	Оплаты.Дата КАК Дата,
		|	Оплаты.Сумма КАК Сумма,
		|	Оплаты.ДатаПеречисленияНалога КАК ДатаПеречисленияНалога
		|ИЗ
		|	ВтОплаты КАК Оплаты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВтРучныеКорректировки.РучнаяКорректировка,
		|	ВтРучныеКорректировки.Номер,
		|	ВтРучныеКорректировки.Дата,
		|	ВтРучныеКорректировки.Сумма,
		|	ВтРучныеКорректировки.ДатаПеречисленияНалога
		|ИЗ
		|	ВтРучныеКорректировки КАК ВтРучныеКорректировки";
		
		Запрос.УстановитьПараметр("Дата", СчетФактура.Дата);
	КонецЕсли;
	
	Если РучныеКорректировки = Неопределено Тогда
		РучныеКорректировки = Новый ТаблицаЗначений;
		РучныеКорректировки.Колонки.Добавить("Сумма",                  ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
		РучныеКорректировки.Колонки.Добавить("Номер",                  ОбщегоНазначения.ОписаниеТипаСтрока(15));
		РучныеКорректировки.Колонки.Добавить("Дата",                   ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
		РучныеКорректировки.Колонки.Добавить("ДатаПеречисленияНалога", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
		РучныеКорректировки.Колонки.Добавить("РучнаяКорректировка",    Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	Запрос.УстановитьПараметр("РучныеКорректировки", РучныеКорректировки);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Записывает данные об оплате НДС в бюджет по документу, уменьшает регистрацию к оплате.
//
// Параметры:
// 	СчетФактура - ДокументСсылка.ЗаявлениеОВвозеТоваров, ДокументСсылка.ТаможеннаяДекларацияИмпорт, 
// 						 ДокументСсылка.СчетФактураНалоговыйАгент -  Документ учета НДС
//  ТаблицаОплат - ТаблицаЗначений - данные об оплатах.
//
Процедура ЗаписатьДанныеОплаты(СчетФактура, ТаблицаОплат) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Набор = СоздатьНаборЗаписей();
	Набор.Отбор.СчетФактура.Установить(СчетФактура);
	Набор.Отбор.Состояние.Установить(Перечисления.СостоянияОплатыНДСВБюджет.Оплачено);
	ТаблицаОплат.Свернуть("Дата,Номер,ДатаПеречисленияНалога,РучнаяКорректировка","Сумма");
	Для Каждого СтрокаТаблицыОплат Из ТаблицаОплат Цикл
		СтрокаОплаты = Набор.Добавить();
		СтрокаОплаты.СчетФактура 						= СчетФактура;
		СтрокаОплаты.Состояние 							= Перечисления.СостоянияОплатыНДСВБюджет.Оплачено;
		СтрокаОплаты.Сумма 								= СтрокаТаблицыОплат.Сумма;
		СтрокаОплаты.ДатаДокументаПеречисленияНалога 	= СтрокаТаблицыОплат.Дата;
		СтрокаОплаты.НомерДокументаПеречисленияНалога 	= СтрокаТаблицыОплат.Номер;
		СтрокаОплаты.ДатаПодтвержденияОплаты 			= СтрокаТаблицыОплат.ДатаПеречисленияНалога;
		СтрокаОплаты.РучнаяКорректировка 				= СтрокаТаблицыОплат.РучнаяКорректировка;
	КонецЦикла;
	Набор.Записать();
	
	Если НЕ ТипЗнч(СчетФактура) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") Тогда
		Набор.Очистить();
		Набор.Отбор.Состояние.Установить(Перечисления.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение);
		КОплате = ПолучитьСуммуНДСКОплатеВБюджет(СчетФактура);
		Оплачено = ТаблицаОплат.Итог("Сумма");
		Если КОплате <= Оплачено Тогда
			СтрокаПодтверждения = Набор.Добавить();
			СтрокаПодтверждения.СчетФактура = СчетФактура;
			СтрокаПодтверждения.Состояние   = Перечисления.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение;
			Если ТаблицаОплат.Количество() > 0 Тогда
				ТаблицаОплат.Сортировать("ДатаПеречисленияНалога Убыв");
				Если Не ЗначениеЗаполнено(ТаблицаОплат[0].ДатаПеречисленияНалога) Тогда
					ТаблицаОплат.Сортировать("Дата Убыв");
					СтрокаПодтверждения.ДатаПодтвержденияОплаты = ТаблицаОплат[0].Дата;
				Иначе
					СтрокаПодтверждения.ДатаПодтвержденияОплаты = ТаблицаОплат[0].ДатаПеречисленияНалога;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Набор.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Записывает данные о подтверждении уплаты НДС в бюджет налоговым органом
//
// Параметры:
// 	СчетФактура - ДокументСсылка.ЗаявлениеОВвозеТоваров -  Документ учета НДС
//  ОплатаПодтверждена - Булево - подтверждение получено, если Ложь, то запись о подтверждении оплаты удаляется из регистра
//  НомерОтметкиОРегистрации - Строка - номер отметки налогового органа
//  ДатаПодтвержденияОплаты - Дата - дата подтверждения оплаты.
//
Процедура ЗаписатьПодтверждениеОплаты(СчетФактура, ОплатаПодтверждена, НомерОтметкиОРегистрации, ДатаПодтвержденияОплаты) Экспорт
	
	Если ТипЗнч(СчетФактура) <> Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Набор = СоздатьНаборЗаписей();
	Набор.Отбор.СчетФактура.Установить(СчетФактура);
	Набор.Отбор.Состояние.Установить(Перечисления.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение);
	Если ОплатаПодтверждена Тогда
		СтрокаПодтверждения = Набор.Добавить();
		СтрокаПодтверждения.СчетФактура 				= СчетФактура;
		СтрокаПодтверждения.Состояние 					= Перечисления.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение;
		СтрокаПодтверждения.ДатаПодтвержденияОплаты 	= ДатаПодтвержденияОплаты;
		СтрокаПодтверждения.НомерОтметкиОРегистрации 	= НомерОтметкиОРегистрации;
	КонецЕсли;
	Набор.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК Т
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК Т1 
	|	ПО Т.СчетФактура = Т1.Ссылка
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Т1.Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область Прочее

Процедура СформироватьДанныеСчетовФактур(СчетаФактуры, ВременныеТаблицы) 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	Запрос.Текст = "
	// ВтСчетаФактуры
	|ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваров.Ссылка КАК Документ,
	|	ЗаявлениеОВвозеТоваров.Ссылка.Дата КАК Дата,
	|	ЗаявлениеОВвозеТоваров.Ссылка.Организация КАК Организация,
	|	СУММА(ЗаявлениеОВвозеТоваров.СуммаНДС) КАК СуммаНДС,
	|	ЗаявлениеОВвозеТоваров.Ссылка.Договор КАК Договор,
	|	NULL КАК ДокументОснование,
	|	NULL КАК ВидАгентскогоДоговора
	|ПОМЕСТИТЬ ВтСчетаФактуры
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваров
	|ГДЕ
	|	ЗаявлениеОВвозеТоваров.Ссылка В(&СчетаФактуры)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаявлениеОВвозеТоваров.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактураНалоговыйАгент.Ссылка,
	|	СчетФактураНалоговыйАгент.Ссылка.Дата,
	|	СчетФактураНалоговыйАгент.Ссылка.Организация,
	|	СУММА(СчетФактураНалоговыйАгент.СуммаНДС),
	|	СчетФактураНалоговыйАгент.Ссылка.Договор,
	|	СчетФактураНалоговыйАгент.Ссылка.ДокументОснование,
	|	СчетФактураНалоговыйАгент.Ссылка.ВидАгентскогоДоговора
	|ИЗ
	|	Документ.СчетФактураНалоговыйАгент.РасшифровкаСуммы КАК СчетФактураНалоговыйАгент
	|ГДЕ
	|	СчетФактураНалоговыйАгент.Ссылка В(&СчетаФактуры)
	|	ИЛИ СчетФактураНалоговыйАгент.Ссылка.ДокументОснование В(&СчетаФактуры)
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетФактураНалоговыйАгент.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаможеннаяДекларацияИмпорт.Ссылка,
	|	ТаможеннаяДекларацияИмпорт.Ссылка.Дата,
	|	ТаможеннаяДекларацияИмпорт.Ссылка.Организация,
	|	СУММА(ТаможеннаяДекларацияИмпорт.СуммаНДС),
	|	ТаможеннаяДекларацияИмпорт.Ссылка.Договор,
	|	NULL КАК ДокументОснование,
	|	NULL КАК ВидАгентскогоДоговора
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТаможеннаяДекларацияИмпорт
	|ГДЕ
	|	ТаможеннаяДекларацияИмпорт.Ссылка В(&СчетаФактуры)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаможеннаяДекларацияИмпорт.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ,
	|	ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(НАЧАЛОПЕРИОДА(ВтСчетаФактуры.Дата,ДЕНЬ)) КАК Дата
	|ПОМЕСТИТЬ ВтНачалоРасчета
	|ИЗ
	|	ВтСчетаФактуры КАК ВтСчетаФактуры
	|;
	|";	
	
	Запрос.УстановитьПараметр("СчетаФактуры", СчетаФактуры);
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СформироватьДанныеОплаты(ВременныеТаблицы) 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	Запрос.УстановитьПараметр("НоваяАрхитектураВзаиморасчетов",ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов"));
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СчетаФактуры.Документ КАК СчетФактура,
	|	Расчеты.РасчетныйДокумент КАК ДокументОплаты,
	|	Расчеты.ПредоплатаРегл КАК Сумма,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация КАК Организация
	|ПОМЕСТИТЬ ВтРасчеты
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНачалоРасчета КАК НачалоРасчета
	|		ПО Расчеты.Период >= НачалоРасчета.Дата
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСчетаФактуры КАК СчетаФактуры
	|		ПО Расчеты.Регистратор = СчетаФактуры.Документ
	|ГДЕ
	|	Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И Расчеты.Активность
	|	И НЕ &НоваяАрхитектураВзаиморасчетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетаФактуры.Документ КАК СчетФактура,
	|	Расчеты.Регистратор,
	|	ВЫБОР
	|		КОГДА Расчеты.РасчетныйДокумент = Расчеты.Регистратор
	|			ТОГДА Расчеты.ПредоплатаРегл
	|		ИНАЧЕ Расчеты.ДолгРегл
	|	КОНЕЦ,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНачалоРасчета КАК НачалоРасчета
	|		ПО Расчеты.Период >= НачалоРасчета.Дата
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСчетаФактуры КАК СчетаФактуры
	|		ПО Расчеты.ЗаказПоставщику = СчетаФактуры.Документ
	|ГДЕ
	|	Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И Расчеты.Активность
	|	И НЕ &НоваяАрхитектураВзаиморасчетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетаФактуры.Документ КАК СчетФактура,
	|	Расчеты.Регистратор,
	|	Расчеты.ДолгРегл,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНачалоРасчета КАК НачалоРасчета
	|		ПО Расчеты.Период >= НачалоРасчета.Дата
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСчетаФактуры КАК СчетаФактуры
	|		ПО Расчеты.РасчетныйДокумент = СчетаФактуры.Документ
	|ГДЕ
	|	Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И Расчеты.Активность
	|	И Расчеты.РасчетныйДокумент <> Расчеты.ЗаказПоставщику
	|	И Расчеты.РасчетныйДокумент <> Расчеты.Регистратор
	|	И НЕ &НоваяАрхитектураВзаиморасчетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетаФактуры.Документ КАК СчетФактура,
	|	Расчеты.РасчетныйДокумент КАК ДокументОплаты,
	|	Расчеты.ПредоплатаРегл КАК Сумма,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация КАК Организация
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНачалоРасчета КАК НачалоРасчета
	|		ПО Расчеты.Период >= НачалоРасчета.Дата
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСчетаФактуры КАК СчетаФактуры
	|		ПО Расчеты.ДокументРегистратор = СчетаФактуры.Документ
	|ГДЕ
	|	Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И &НоваяАрхитектураВзаиморасчетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетаФактуры.Документ КАК СчетФактура,
	|	Расчеты.ДокументРегистратор,
	|	ВЫБОР
	|		КОГДА Расчеты.РасчетныйДокумент = Расчеты.ДокументРегистратор
	|			ТОГДА Расчеты.ПредоплатаРегл
	|		КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И Расчеты.ДолгРегл > 0
	|			ТОГДА Расчеты.ДолгРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНачалоРасчета КАК НачалоРасчета
	|		ПО Расчеты.Период >= НачалоРасчета.Дата
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСчетаФактуры КАК СчетаФактуры
	|		ПО Расчеты.ОбъектРасчетов = СчетаФактуры.Документ
	|ГДЕ
	|	ВЫБОР
	|		КОГДА Расчеты.РасчетныйДокумент = Расчеты.ДокументРегистратор
	|			ТОГДА Расчеты.ПредоплатаРегл
	|		КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И Расчеты.ДолгРегл > 0
	|			ТОГДА Расчеты.ДолгРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ > 0
	|	И &НоваяАрхитектураВзаиморасчетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетаФактуры.Документ КАК СчетФактура,
	|	Расчеты.ДокументРегистратор,
	|	Расчеты.ДолгРегл,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНачалоРасчета КАК НачалоРасчета
	|		ПО Расчеты.Период >= НачалоРасчета.Дата
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСчетаФактуры КАК СчетаФактуры
	|		ПО Расчеты.РасчетныйДокумент = СчетаФактуры.Документ
	|ГДЕ
	|	Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И Расчеты.РасчетныйДокумент <> Расчеты.ОбъектРасчетов
	|	И Расчеты.РасчетныйДокумент <> Расчеты.ДокументРегистратор
	|	И &НоваяАрхитектураВзаиморасчетов
	|;
	|
	// ВтОплаты
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Оплаты.СчетФактура КАК СчетФактура,
	|	Оплаты.ДокументРегистратор КАК ДокументОплаты,
	|	Оплаты.Сумма КАК Сумма,
	|	Оплаты.НомерДокументаПеречисленияНалога КАК Номер,
	|	Оплаты.ДатаДокументаПеречисленияНалога КАК Дата,
	|	Оплаты.ДатаПодтвержденияОплаты КАК ДатаПеречисленияНалога
	|ПОМЕСТИТЬ ВтОплаты
	|ИЗ
	|	РегистрСведений.ПодтверждениеОплатыНДСВБюджет КАК Оплаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСчетаФактуры КАК СчетаФактуры
	|		ПО Оплаты.СчетФактура = СчетаФактуры.Документ
	|ГДЕ
	|	Оплаты.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОплатыНДСВБюджет.Оплачено)
	|	И НЕ Оплаты.РучнаяКорректировка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Расчеты.СчетФактура,
	|	Расчеты.ДокументОплаты,
	|	СУММА(Расчеты.Сумма),
	|	ДанныеПервичныхДокументов.Номер,
	|	ДанныеПервичныхДокументов.Дата,
	|	NULL
	|ИЗ
	|	ВтРасчеты КАК Расчеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО Расчеты.ДокументОплаты = ДанныеПервичныхДокументов.Документ
	|			И Расчеты.Организация = ДанныеПервичныхДокументов.Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.СчетФактура,
	|	Расчеты.ДокументОплаты,
	|	ДанныеПервичныхДокументов.Номер,
	|	ДанныеПервичныхДокументов.Дата
	|
	|ИМЕЮЩИЕ
	|	СУММА(Расчеты.Сумма) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номер,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтРасчеты
	|;
	|";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ПреобразоватьТаблицуСчетовФактур(СчетаФактуры, ТипНалога)

	Если ТипНалога = Перечисления.ТипыНалогов.НДС_НалоговыйАгент Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СчетаФактуры", СчетаФактуры);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СчетаФактуры.СчетФактура КАК СчетФактура,
		|	СчетаФактуры.СуммаОплаты
		|ПОМЕСТИТЬ СчетаФактуры
		|ИЗ
		|	&СчетаФактуры КАК СчетаФактуры
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетФактура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетФактураНалоговыйАгент.Ссылка КАК СчетФактура,
		|	СУММА(СчетаФактуры.СуммаОплаты) КАК СуммаОплаты
		|ИЗ
		|	СчетаФактуры КАК СчетаФактуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураНалоговыйАгент КАК СчетФактураНалоговыйАгент
		|		ПО СчетаФактуры.СчетФактура = СчетФактураНалоговыйАгент.ДокументОснование
		|СГРУППИРОВАТЬ ПО
		|	СчетФактураНалоговыйАгент.Ссылка";
	
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			СчетаФактуры.Очистить();
		Иначе
			СчетаФактуры = Результат.Выгрузить();
		КонецЕсли;
	Иначе
		МассивПустыхСтрок = Новый Массив;
		ТипыСчетовФактур = Метаданные.РегистрыСведений.ПодтверждениеОплатыНДСВБюджет.Измерения.СчетФактура.Тип;
		Для Каждого СтрокаСчетаФактуры Из СчетаФактуры Цикл
			Если Не ЗначениеЗаполнено(СтрокаСчетаФактуры.СчетФактура)
			 Или Не ТипыСчетовФактур.СодержитТип(ТипЗнч(СтрокаСчетаФактуры.СчетФактура)) Тогда
			 	МассивПустыхСтрок.Добавить(СтрокаСчетаФактуры);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ПустаяСтрока Из МассивПустыхСтрок Цикл
			СчетаФактуры.Удалить(ПустаяСтрока);
		КонецЦикла;
		СчетаФактуры.Свернуть("СчетФактура","СуммаОплаты");
	КонецЕсли;

	Возврат СчетаФактуры;
	
КонецФункции

Процедура ОбновитьСостояниеПодтвержденияОплаты(СчетаФактуры, Проведен)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетаФактуры", СчетаФактуры);

	Если Проведен Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СчетаФактуры.СчетФактура КАК СчетФактура,
		|	СчетаФактуры.СуммаОплаты
		|ПОМЕСТИТЬ СчетаФактуры
		|ИЗ
		|	&СчетаФактуры КАК СчетаФактуры
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетФактура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПодтверждениеОплатыНДСВБюджет.СчетФактура КАК СчетФактура,
		|	СУММА(ПодтверждениеОплатыНДСВБюджет.Сумма) КАК Сумма,
		|	МАКСИМУМ(ПодтверждениеОплатыНДСВБюджет.ДатаПодтвержденияОплаты) КАК ДатаПодтвержденияОплаты
		|ПОМЕСТИТЬ Оплачено
		|ИЗ
		|	РегистрСведений.ПодтверждениеОплатыНДСВБюджет КАК ПодтверждениеОплатыНДСВБюджет
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаФактуры КАК СчетаФактуры
		|		ПО ПодтверждениеОплатыНДСВБюджет.СчетФактура = СчетаФактуры.СчетФактура
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(ПодтверждениеОплатыНДСВБюджет.СчетФактура) <> ТИП(Документ.ЗаявлениеОВвозеТоваров)
		|	И ПодтверждениеОплатыНДСВБюджет.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОплатыНДСВБюджет.Оплачено)
		|СГРУППИРОВАТЬ ПО
		|	ПодтверждениеОплатыНДСВБюджет.СчетФактура
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетФактура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетаФактуры.СчетФактура,
		|	ВЫБОР
		|		КОГДА СчетаФактуры.СуммаОплаты > ЕСТЬNULL(Оплачено.Сумма, 0)
		|			ТОГДА 0
		|		ИНАЧЕ Оплачено.Сумма
		|	КОНЕЦ КАК Сумма,
		|	ЕСТЬNULL(Оплачено.ДатаПодтвержденияОплаты, ДАТАВРЕМЯ(1,1,1)) КАК ДатаПодтвержденияОплаты
		|ИЗ
		|	СчетаФактуры КАК СчетаФактуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ Оплачено КАК Оплачено
		|		ПО Оплачено.СчетФактура = СчетаФактуры.СчетФактура
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(СчетаФактуры.СчетФактура) <> ТИП(Документ.ЗаявлениеОВвозеТоваров)
		|";

		Выборка = Запрос.Выполнить().Выбрать();
		Набор = РегистрыСведений.ПодтверждениеОплатыНДСВБюджет.СоздатьНаборЗаписей();
		Набор.Отбор.Состояние.Установить(Перечисления.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение);
		Пока Выборка.Следующий() Цикл
			Набор.Отбор.СчетФактура.Установить(Выборка.СчетФактура);
			Если Выборка.Сумма = 0 Тогда
				Набор.Записать();
			Иначе
				Запись = Набор.Добавить();
				Запись.Состояние               = Перечисления.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение;
				Запись.СчетФактура             = Выборка.СчетФактура;
				Запись.ДатаПодтвержденияОплаты = Выборка.ДатаПодтвержденияОплаты;
				Запись.Сумма                   = Выборка.Сумма;
				Набор.Записать();
				Набор.Очистить();
			КонецЕсли;
		КонецЦикла;
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СчетаФактуры.СчетФактура КАК СчетФактура,
		|	СчетаФактуры.СуммаОплаты
		|ПОМЕСТИТЬ СчетаФактуры
		|ИЗ
		|	&СчетаФактуры КАК СчетаФактуры
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетФактура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПодтверждениеОплатыНДСВБюджет.СчетФактура КАК СчетФактура
		|ИЗ
		|	РегистрСведений.ПодтверждениеОплатыНДСВБюджет КАК ПодтверждениеОплатыНДСВБюджет
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаФактуры КАК СчетаФактуры
		|		ПО ПодтверждениеОплатыНДСВБюджет.СчетФактура = СчетаФактуры.СчетФактура
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(ПодтверждениеОплатыНДСВБюджет.СчетФактура) <> ТИП(Документ.ЗаявлениеОВвозеТоваров)
		|	И ПодтверждениеОплатыНДСВБюджет.Состояние = ЗНАЧЕНИЕ(перечисление.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение)";

		Выборка = Запрос.Выполнить().Выбрать();
		Набор = РегистрыСведений.ПодтверждениеОплатыНДСВБюджет.СоздатьНаборЗаписей();
		Набор.Отбор.Состояние.Установить(Перечисления.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение);
		Пока Выборка.Следующий() Цикл
			Набор.Отбор.СчетФактура.Установить(Выборка.СчетФактура);
			Набор.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Обработчики_11_4_2

// Регистрирует данные для обработчика обновления УТ 11.4.2
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаявлениеОВвозеТоваров.Ссылка КАК СчетФактура
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодтверждениеОплатыНДСВБюджет КАК ПодтверждениеОплатыНДСВБюджет
	|		ПО (ПодтверждениеОплатыНДСВБюджет.СчетФактура = ЗаявлениеОВвозеТоваров.Ссылка)
	|ГДЕ
	|	ЗаявлениеОВвозеТоваров.Ссылка.Проведен
	|	И ПодтверждениеОплатыНДСВБюджет.СчетФактура ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураНалоговыйАгент.Ссылка
	|ИЗ
	|	Документ.СчетФактураНалоговыйАгент.РасшифровкаСуммы КАК СчетФактураНалоговыйАгент
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодтверждениеОплатыНДСВБюджет КАК ПодтверждениеОплатыНДСВБюджет
	|		ПО (ПодтверждениеОплатыНДСВБюджет.СчетФактура = СчетФактураНалоговыйАгент.Ссылка)
	|ГДЕ
	|	СчетФактураНалоговыйАгент.Ссылка.Проведен
	|	И ПодтверждениеОплатыНДСВБюджет.СчетФактура ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаможеннаяДекларацияИмпорт.Ссылка
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТаможеннаяДекларацияИмпорт
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодтверждениеОплатыНДСВБюджет КАК ПодтверждениеОплатыНДСВБюджет
	|		ПО (ПодтверждениеОплатыНДСВБюджет.СчетФактура = ТаможеннаяДекларацияИмпорт.Ссылка)
	|ГДЕ
	|	ТаможеннаяДекларацияИмпорт.Ссылка.Проведен
	|	И ПодтверждениеОплатыНДСВБюджет.СчетФактура ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПодтверждениеОплатыНДСВБюджет.СчетФактура КАК СчетФактура
	|ИЗ
	|	РегистрСведений.ПодтверждениеОплатыНДСВБюджет КАК ПодтверждениеОплатыНДСВБюджет
	|ГДЕ
	|	ПодтверждениеОплатыНДСВБюджет.ДокументРегистратор = НЕОПРЕДЕЛЕНО
	|	И ПодтверждениеОплатыНДСВБюджет.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОплатыНДСВБюджет.ОжидаетОплаты)";
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрСведений.ПодтверждениеОплатыНДСВБюджет";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить(), ДополнительныеПараметры);
	
КонецПроцедуры

// Заполняет регистр по данным шапок и табличных частей документов НДС
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрСведений.ПодтверждениеОплатыНДСВБюджет";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДополнительныеПараметрыВыборкиДанных = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметрыВыборкиДанных.ИмяВременнойТаблицы = "втДокументыКОбработкеПредварительная";
	ПолныеИменаОбъектов = "Документ.ЗаявлениеОВвозеТоваров,Документ.ТаможеннаяДекларацияИмпорт,Документ.СчетФактураНалоговыйАгент";
	РезультатЗаблокированныеОбъекты =
		ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияСсылок(Параметры.Очередь,ПолныеИменаОбъектов,МенеджерВременныхТаблиц);
	РезультатДляОбработки = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуИзмеренийНезависимогоРегистраСведенийДляОбработки(Параметры.Очередь,
		ПолноеИмяРегистра,
		МенеджерВременныхТаблиц,
		ДополнительныеПараметрыВыборкиДанных);
		
	Если РезультатДляОбработки.ЕстьЗаписиВоВременнойТаблице Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыКОбработке.СчетФактура КАК СчетФактура
		|ПОМЕСТИТЬ втДокументыКОбработке
		|ИЗ
		|	втДокументыКОбработкеПредварительная КАК ДокументыКОбработке
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЗаблокированныеОбъекты КАК ЗаблокированныеОбъекты
		|		ПО ДокументыКОбработке.СчетФактура = ЗаблокированныеОбъекты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодтверждениеОплатыНДСВБюджет КАК ПодтверждениеОплатыНДСВБюджет
		|		ПО ДокументыКОбработке.СчетФактура = ПодтверждениеОплатыНДСВБюджет.СчетФактура
		|ГДЕ
		|	ЗаблокированныеОбъекты.Ссылка ЕСТЬ NULL И ПодтверждениеОплатыНДСВБюджет.СчетФактура ЕСТЬ NULL
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетФактура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаявлениеОВвозеТоваров.Ссылка КАК Ссылка,
		|	ЗаявлениеОВвозеТоваров.Ссылка.ВерсияДанных КАК ВерсияДанных,
		|	ЗаявлениеОВвозеТоваров.Ссылка.УдалитьДатаДокументаПеречисленияНалога КАК УдалитьДатаДокументаПеречисленияНалога,
		|	ЗаявлениеОВвозеТоваров.Ссылка.УдалитьНомерДокументаПеречисленияНалога КАК УдалитьНомерДокументаПеречисленияНалога,
		|	ЗаявлениеОВвозеТоваров.Ссылка.УдалитьОплатаПодтверждена КАК УдалитьОплатаПодтверждена,
		|	ЗаявлениеОВвозеТоваров.Ссылка.УдалитьДатаПодтвержденияОплаты КАК УдалитьДатаПодтвержденияОплаты,
		|	ЗаявлениеОВвозеТоваров.Ссылка.УдалитьНомерОтметкиОРегистрации КАК УдалитьНомерОтметкиОРегистрации,
		|	СУММА(ЗаявлениеОВвозеТоваров.СуммаНДС) КАК СуммаНДС
		|ИЗ
		|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДокументыКОбработке КАК ДокументыКОбработке
		|		ПО ЗаявлениеОВвозеТоваров.Ссылка = ДокументыКОбработке.СчетФактура
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаявлениеОВвозеТоваров.Ссылка,
		|	ЗаявлениеОВвозеТоваров.Ссылка.ВерсияДанных,
		|	ЗаявлениеОВвозеТоваров.Ссылка.УдалитьДатаДокументаПеречисленияНалога,
		|	ЗаявлениеОВвозеТоваров.Ссылка.УдалитьНомерДокументаПеречисленияНалога,
		|	ЗаявлениеОВвозеТоваров.Ссылка.УдалитьОплатаПодтверждена,
		|	ЗаявлениеОВвозеТоваров.Ссылка.УдалитьДатаПодтвержденияОплаты,
		|	ЗаявлениеОВвозеТоваров.Ссылка.УдалитьНомерОтметкиОРегистрации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаможеннаяДекларацияИмпорт.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ТаможеннаяДекларацияИмпорт КАК ТаможеннаяДекларацияИмпорт
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДокументыКОбработке КАК ДокументыКОбработке
		|		ПО ТаможеннаяДекларацияИмпорт.Ссылка = ДокументыКОбработке.СчетФактура
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаможеннаяДекларацияИмпорт.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетФактураНалоговыйАгент.Ссылка КАК Ссылка,
		|	СчетФактураНалоговыйАгент.ВерсияДанных КАК ВерсияДанных,
		|	СчетФактураНалоговыйАгент.УдалитьДатаДокументаПеречисленияНалога КАК УдалитьДатаДокументаПеречисленияНалога,
		|	СчетФактураНалоговыйАгент.УдалитьНомерДокументаПеречисленияНалога КАК УдалитьНомерДокументаПеречисленияНалога,
		|	СчетФактураНалоговыйАгент.УдалитьНалогПеречислен КАК УдалитьНалогПеречислен,
		|	СчетФактураНалоговыйАгент.УдалитьДатаПеречисленияНалога КАК УдалитьДатаПеречисленияНалога,
		|	СчетФактураНалоговыйАгент.СуммаНДС КАК СуммаНДС
		|ИЗ
		|	Документ.СчетФактураНалоговыйАгент КАК СчетФактураНалоговыйАгент
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДокументыКОбработке КАК ДокументыКОбработке
		|		ПО СчетФактураНалоговыйАгент.Ссылка = ДокументыКОбработке.СчетФактура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыКОбработке.СчетФактура КАК Ссылка
		|ИЗ
		|	втДокументыКОбработкеПредварительная КАК ДокументыКОбработке
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЗаблокированныеОбъекты КАК ЗаблокированныеОбъекты
		|		ПО ДокументыКОбработке.СчетФактура = ЗаблокированныеОбъекты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодтверждениеОплатыНДСВБюджет КАК ПодтверждениеОплатыНДСВБюджет
		|		ПО ДокументыКОбработке.СчетФактура = ПодтверждениеОплатыНДСВБюджет.СчетФактура
		|ГДЕ
		|	ЗаблокированныеОбъекты.Ссылка ЕСТЬ NULL И НЕ ПодтверждениеОплатыНДСВБюджет.СчетФактура ЕСТЬ NULL
		|";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"втЗаблокированныеОбъекты",РезультатЗаблокированныеОбъекты.ИмяВременнойТаблицы);
		
		Результат = Запрос.ВыполнитьПакет();
	
		ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
		ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
		ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрСведений.ПодтверждениеОплатыНДСВБюджет";
		ТаблицаДанных = Новый ТаблицаЗначений;
		ТаблицаДанных.Колонки.Добавить("СчетФактура");
		ТаблицаДанных.Добавить(); // 1 строка
		
#Область ЗаявленияОВвозе
		
		Выборка = Результат[1].Выбрать(); 
		Пока Выборка.Следующий() Цикл
			
			НачатьТранзакцию();
			
			Попытка
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра);
				ЭлементБлокировки.УстановитьЗначение("СчетФактура", Выборка.Ссылка);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки = Блокировка.Добавить("Документ.ЗаявлениеОВвозеТоваров");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
				Блокировка.Заблокировать();
			Исключение
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойБлокировке(Выборка.Ссылка);
				Продолжить;
			КонецПопытки;
		
			Набор = СоздатьНаборЗаписей();
			Набор.Отбор.СчетФактура.Установить(Выборка.Ссылка);
			ЗаполнитьЗаписиПоДаннымЗаявленияОВвозе(Набор, Выборка);
			
			Попытка
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
				Версия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Ссылка,"ВерсияДанных");
				Если Версия = Выборка.ВерсияДанных Тогда
					ТаблицаДанных[0].СчетФактура = Выборка.Ссылка;
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ТаблицаДанных,ДополнительныеПараметры,Параметры.Очередь);
					ЗафиксироватьТранзакцию();
				Иначе
					ОтменитьТранзакцию();
				КонецЕсли;	
			Исключение
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
				Продолжить;
			КонецПопытки;
		КонецЦикла;
		
#КонецОбласти
		
#Область СчетаФактурыНалоговыйАгент
		Выборка = Результат[3].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НачатьТранзакцию();
			
			Попытка
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра);
				ЭлементБлокировки.УстановитьЗначение("СчетФактура", Выборка.Ссылка);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки = Блокировка.Добавить("Документ.СчетФактураНалоговыйАгент");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
				Блокировка.Заблокировать();
			Исключение
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойБлокировке(Выборка.Ссылка);
				Продолжить;
			КонецПопытки;
		
			Набор = СоздатьНаборЗаписей();
			Набор.Отбор.СчетФактура.Установить(Выборка.Ссылка);
			ЗаполнитьЗаписиПоДаннымСчетаФактурыНалоговогоАгента(Набор, Выборка);
			
			Попытка
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
				Версия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Ссылка,"ВерсияДанных");
				Если Версия = Выборка.ВерсияДанных Тогда
					ТаблицаДанных[0].СчетФактура = Выборка.Ссылка;
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ТаблицаДанных,ДополнительныеПараметры,Параметры.Очередь);
					ЗафиксироватьТранзакцию();
				Иначе
					ОтменитьТранзакцию();
				КонецЕсли;	
			Исключение
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
				Продолжить;
			КонецПопытки;
		КонецЦикла;
#КонецОбласти
		
#Область ТаможенныеДекларацииИмпорт
		Если Не Результат[2].Пустой() Тогда
			ТаблицаДанных.Очистить();
			НачатьТранзакцию();
			
			Попытка
				Блокировка = Новый БлокировкаДанных;
				
				ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра);
				ЭлементБлокировки.ИсточникДанных = Результат[2];
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СчетФактура","Ссылка");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				
				ЭлементБлокировки = Блокировка.Добавить("Документ.ТаможеннаяДекларацияИмпорт");
				ЭлементБлокировки.ИсточникДанных = Результат[2];
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка","Ссылка");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
				Блокировка.Заблокировать();
			Исключение
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойБлокировке(Выборка.Ссылка);
				ВызватьИсключение;
			КонецПопытки;
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДокументыКОбработке.СчетФактура КАК Ссылка,
			|	ТаможеннаяДекларацияИмпорт.Ссылка.Дата КАК Дата,
			|	СУММА(ЕСТЬNULL(ТаможеннаяДекларацияИмпорт.СуммаНДС,0)) КАК СуммаНДС
			|ПОМЕСТИТЬ ТаможенныеДекларации
			|ИЗ
			|	втДокументыКОбработке КАК ДокументыКОбработке
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТаможеннаяДекларацияИмпорт
			|		ПО ТаможеннаяДекларацияИмпорт.Ссылка = ДокументыКОбработке.СчетФактура
			|
			|СГРУППИРОВАТЬ ПО
			|	ДокументыКОбработке.СчетФактура,
			|	ТаможеннаяДекларацияИмпорт.Ссылка.Дата
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаможенныеДекларации.Ссылка КАК Ссылка,
			|	ТаможенныеДекларации.СуммаНДС КАК СуммаНДС,
			|	ЕСТЬNULL(ДокументыОплатыНалога.НомерДокумента, """") КАК Номер,
			|	ЕСТЬNULL(ДокументыОплатыНалога.ДатаДокумента, ДАТАВРЕМЯ(1,1,1)) КАК Дата,
			|	МАКСИМУМ(ИСТИНА) КАК РучнаяКорректировка,
			|	МАКСИМУМ(1) КАК Сумма
			|ИЗ
			|	ТаможенныеДекларации КАК ТаможенныеДекларации
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТаможеннаяДекларацияИмпорт.УдалитьДокументыОплатыНалога КАК ДокументыОплатыНалога
			|		ПО ТаможенныеДекларации.Ссылка = ДокументыОплатыНалога.Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаможенныеДекларации.Ссылка,
			|	ЕСТЬNULL(ДокументыОплатыНалога.НомерДокумента, """"),
			|	ЕСТЬNULL(ДокументыОплатыНалога.ДатаДокумента, ДАТАВРЕМЯ(1,1,1)),
			|	ТаможенныеДекларации.СуммаНДС
			|ИТОГИ
			|	МАКСИМУМ(СуммаНДС)
			|ПО
			|	Ссылка";	
			
			ВыборкаПоДокументам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоДокументам.Следующий() Цикл
				Если ВыборкаПоДокументам.СуммаНДС <> 0 Тогда
					Набор = СоздатьНаборЗаписей();
					Набор.Отбор.СчетФактура.Установить(ВыборкаПоДокументам.Ссылка);
					ЗаполнитьЗаписиПоДаннымТаможеннойДекларации(Набор, ВыборкаПоДокументам);
					Попытка
						ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
						ТаблицаДанных.Добавить().СчетФактура = ВыборкаПоДокументам.Ссылка;
					Исключение
						ОтменитьТранзакцию();
						ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ВыборкаПоДокументам.Ссылка);
						ВызватьИсключение;
					КонецПопытки;
				Иначе
					ТаблицаДанных.Добавить().СчетФактура = ВыборкаПоДокументам.Ссылка;
				КонецЕсли;
			КонецЦикла;
			Попытка
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ТаблицаДанных,ДополнительныеПараметры,Параметры.Очередь);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Документы.ТаможеннаяДекларацияИмпорт.ПустаяСсылка());
				ВызватьИсключение;
			КонецПопытки;
		КонецЕсли;
#КонецОбласти

#Область ЗаполнениеДокументаРегистратора
		Если Не Результат[4].Пустой() Тогда
			ТаблицаДанных.Очистить();
			НачатьТранзакцию();
			
			Попытка
				Блокировка = Новый БлокировкаДанных;
				
				ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра);
				ЭлементБлокировки.ИсточникДанных = Результат[2];
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СчетФактура","Ссылка");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				
				Блокировка.Заблокировать();
			Исключение
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойБлокировке(Выборка.Ссылка);
				ВызватьИсключение;
			КонецПопытки;
			
			ВыборкаПоДокументам = Результат[4].Выбрать();
			Пока ВыборкаПоДокументам.Следующий() Цикл
				Набор = СоздатьНаборЗаписей();
				Набор.Отбор.СчетФактура.Установить(ВыборкаПоДокументам.Ссылка);
				Набор.Прочитать();
				Для Каждого Запись Из Набор Цикл
					Если Запись.Состояние = Перечисления.СостоянияОплатыНДСВБюджет.ОжидаетОплаты Тогда
						Если Запись.ЗаявкаНаРасходованиеДенежныхСредств.Пустая() Тогда
							Запись.ДокументРегистратор = Запись.СчетФактура;
						Иначе
							Запись.ДокументРегистратор = Запись.ЗаявкаНаРасходованиеДенежныхСредств;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				Попытка
					ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
					ТаблицаДанных.Добавить().СчетФактура = ВыборкаПоДокументам.Ссылка;
				Исключение
					ОтменитьТранзакцию();
					ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ВыборкаПоДокументам.Ссылка);
					ВызватьИсключение;
				КонецПопытки;
			КонецЦикла;
			Попытка
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ТаблицаДанных,ДополнительныеПараметры,Параметры.Очередь);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Документы.ТаможеннаяДекларацияИмпорт.ПустаяСсылка());
				ВызватьИсключение;
			КонецПопытки;
		КонецЕсли;
#КонецОбласти

	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ЗаполнитьЗаписиПоДаннымСчетаФактурыНалоговогоАгента(Набор, СчетФактура)
	
	Если Не СчетФактура.УдалитьНалогПеречислен Тогда // строка ОжидаетОплаты
		СтрокаКОплате = Набор.Добавить();
		СтрокаКОплате.СчетФактура = СчетФактура.Ссылка;
		СтрокаКОплате.ДокументРегистратор = СчетФактура.Ссылка;
		СтрокаКОплате.Состояние = Перечисления.СостоянияОплатыНДСВБюджет.ОжидаетОплаты;
		СтрокаКОплате.Сумма = СчетФактура.СуммаНДС;
	Иначе // считаем, что оплачено полностью
		// оплата только одна, закрепляем ручной корректировкой
		СтрокаОплаты = Набор.Добавить();
		СтрокаОплаты.СчетФактура = СчетФактура.Ссылка;
		СтрокаОплаты.ДокументРегистратор = СчетФактура.Ссылка;
		СтрокаОплаты.Состояние = Перечисления.СостоянияОплатыНДСВБюджет.Оплачено;
		СтрокаОплаты.Сумма = СчетФактура.СуммаНДС;
		СтрокаОплаты.ДатаДокументаПеречисленияНалога = СчетФактура.УдалитьДатаДокументаПеречисленияНалога;
		СтрокаОплаты.НомерДокументаПеречисленияНалога = СчетФактура.УдалитьНомерДокументаПеречисленияНалога;
		Если ЗначениеЗаполнено(СтрокаОплаты.ДатаДокументаПеречисленияНалога) Тогда
			СтрокаОплаты.СтрокаПлатежноРасчетныеДокументы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 от %2'"),
				СтрокаОплаты.НомерДокументаПеречисленияНалога,
				Формат(СтрокаОплаты.ДатаДокументаПеречисленияНалога, "ДЛФ=D"));
		КонецЕсли;
		СтрокаОплаты.РучнаяКорректировка = Истина;
		// сохраняем дату перечисления налога
		СтрокаПодтверждения = Набор.Добавить();
		СтрокаПодтверждения.СчетФактура = СчетФактура.Ссылка;
		СтрокаПодтверждения.ДокументРегистратор = СчетФактура.Ссылка;
		СтрокаПодтверждения.Состояние = Перечисления.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение;
		СтрокаПодтверждения.ДатаПодтвержденияОплаты = СчетФактура.УдалитьДатаПеречисленияНалога;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗаписиПоДаннымЗаявленияОВвозе(Набор, СчетФактура)
	
	Если Не СчетФактура.УдалитьОплатаПодтверждена Тогда //строка ОжидаетОплаты
		СтрокаКОплате = Набор.Добавить();
		СтрокаКОплате.СчетФактура = СчетФактура.Ссылка;
		СтрокаКОплате.ДокументРегистратор = СчетФактура.Ссылка;
		СтрокаКОплате.Состояние = Перечисления.СостоянияОплатыНДСВБюджет.ОжидаетОплаты;
		СтрокаКОплате.Сумма = СчетФактура.СуммаНДС;
	Иначе // считаем, что оплачено полностью
		
		// оплата только одна, закрепляем ручной корректировкой
		СтрокаОплаты = Набор.Добавить();
		СтрокаОплаты.СчетФактура = СчетФактура.Ссылка;
		СтрокаОплаты.ДокументРегистратор = СчетФактура.Ссылка;
		СтрокаОплаты.Состояние = Перечисления.СостоянияОплатыНДСВБюджет.Оплачено;
		СтрокаОплаты.Сумма = СчетФактура.СуммаНДС;
		СтрокаОплаты.ДатаДокументаПеречисленияНалога = СчетФактура.УдалитьДатаДокументаПеречисленияНалога;
		СтрокаОплаты.НомерДокументаПеречисленияНалога = СчетФактура.УдалитьНомерДокументаПеречисленияНалога;
		Если ЗначениеЗаполнено(СтрокаОплаты.ДатаДокументаПеречисленияНалога) Тогда
			СтрокаОплаты.СтрокаПлатежноРасчетныеДокументы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 от %2'"),
				СтрокаОплаты.НомерДокументаПеречисленияНалога,
				Формат(СтрокаОплаты.ДатаДокументаПеречисленияНалога, "ДЛФ=D"));
		КонецЕсли;
		СтрокаОплаты.РучнаяКорректировка = Истина;
		
		// подтверждение оплаты
		Если ЗначениеЗаполнено(СчетФактура.УдалитьНомерОтметкиОРегистрации) ИЛИ ЗначениеЗаполнено(СчетФактура.УдалитьДатаПодтвержденияОплаты) Тогда
			СтрокаПодтверждения = Набор.Добавить();
			СтрокаПодтверждения.СчетФактура = СчетФактура.Ссылка;
			СтрокаПодтверждения.ДокументРегистратор = СчетФактура.Ссылка;
			СтрокаПодтверждения.Состояние = Перечисления.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение;
			СтрокаПодтверждения.ДатаПодтвержденияОплаты = СчетФактура.УдалитьДатаПодтвержденияОплаты;
			СтрокаПодтверждения.НомерОтметкиОРегистрации = СчетФактура.УдалитьНомерОтметкиОРегистрации;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗаписиПоДаннымТаможеннойДекларации(Набор, ВыборкаПоДокументам)
	
	Выборка = ВыборкаПоДокументам.Выбрать();
	СуммаНДС = 0;
	ДатаПодтвержденияОплаты = '0001-01-01';
	Пока Выборка.Следующий() Цикл
		СтрокаОплаты = Набор.Добавить();
		СтрокаОплаты.СчетФактура = Выборка.Ссылка;
		СтрокаОплаты.ДокументРегистратор = Выборка.Ссылка;
		СтрокаОплаты.Состояние = Перечисления.СостоянияОплатыНДСВБюджет.Оплачено;
		СтрокаОплаты.Сумма = Выборка.Сумма;
		СтрокаОплаты.ДатаДокументаПеречисленияНалога = Выборка.Дата;
		СтрокаОплаты.НомерДокументаПеречисленияНалога = Выборка.Номер;
		Если ЗначениеЗаполнено(СтрокаОплаты.ДатаДокументаПеречисленияНалога) Тогда
			СтрокаОплаты.СтрокаПлатежноРасчетныеДокументы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 от %2'"),
				СтрокаОплаты.НомерДокументаПеречисленияНалога,
				Формат(СтрокаОплаты.ДатаДокументаПеречисленияНалога, "ДЛФ=D"));
		КонецЕсли;
		СтрокаОплаты.РучнаяКорректировка = Выборка.РучнаяКорректировка;
		СуммаНДС = Выборка.СуммаНДС;
		ДатаПодтвержденияОплаты = Макс(Выборка.Дата, ДатаПодтвержденияОплаты);
	КонецЦикла;

	Если СуммаНДС <> 0 Тогда
		МассивСтарыхСумм = Набор.ВыгрузитьКолонку("Сумма");
		МассивНовыхСумм = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(СуммаНДС, МассивСтарыхСумм);
		Набор.ЗагрузитьКолонку(МассивНовыхСумм, "Сумма");
	КонецЕсли;
	
	// подтверждение оплаты
	СтрокаПодтверждения = Набор.Добавить();
	СтрокаПодтверждения.СчетФактура = ВыборкаПоДокументам.Ссылка;
	СтрокаПодтверждения.ДокументРегистратор = ВыборкаПоДокументам.Ссылка;
	СтрокаПодтверждения.Состояние = Перечисления.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение;
	СтрокаПодтверждения.Сумма = СуммаНДС;
	СтрокаПодтверждения.ДатаПодтвержденияОплаты = ДатаПодтвержденияОплаты;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли