Перем мДокументУАТ Экспорт; //Документ УАТ

Перем мТиповойДокумент Экспорт; //Типовой документ. Если это значение не заполнено, то документ создается здесь.
//Если значение заполнено, то этот документ дозаполняется

Перем РезультатЗапросаПоДокументамУАТ Экспорт; //Выборка табличной части или таблица значений

Перем мМетаданныеТиповогоДокумента;
Перем мМетаданныеДокументаУАТ;

Перем мСтруктураПараметров;

//Перем ВалютаУправленческогоУчета;
Перем ВалютаРегламентированногоУчета;

Перем ВсеОК;

Перем тблСозданныеДокументы Экспорт; //временная таблица созданных документов
Перем мИспользоватьДатуВыпискиПЛ Экспорт; //признак использования даты выписки (а не даты закрытия)
Перем мОтборОрганизация Экспорт; //значение отбора по Организации в обработке Формирование типовых документов


// Процедура помечает на удаление типовой документ и удаляет
// 
Процедура УдалитьТиповойДокумент() Экспорт
	
	Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(мДокументУАТ) Тогда
		Возврат;
	КонецЕсли;	
	
	МенеджерЗаписи = РегистрыСведений.уатТиповыеДокументы.СоздатьМенеджерЗаписи();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатТиповыеДокументы.ТиповойДокумент,
	|	уатТиповыеДокументы.ДокументУАТ
	|ИЗ
	|	РегистрСведений.уатТиповыеДокументы КАК уатТиповыеДокументы
	|ГДЕ
	|	уатТиповыеДокументы.ДокументУАТ = &ДокументУАТ");
	Запрос.УстановитьПараметр("ДокументУАТ", мДокументУАТ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.ТиповойДокумент.ПометкаУдаления Тогда
			Попытка
				Выборка.ТиповойДокумент.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		
		МенеджерЗаписи.ДокументУАТ = Выборка.ДокументУАТ;
		МенеджерЗаписи.ТиповойДокумент = Выборка.ТиповойДокумент;
		Попытка
			МенеджерЗаписи.Удалить();
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецПопытки;
	КонецЦикла;
	
	МенеджерЗаписи = Неопределено;
	
КонецПроцедуры

// Процедура помечает на удаление типовые документы и удаляет соотв. записи регистра
// 
Процедура УдалитьТиповыеДокументы(мсвДокументы, ЭлементПрогрессБар = Неопределено) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.уатТиповыеДокументы.СоздатьМенеджерЗаписи();
	
	СписокДокументов = Новый СписокЗначений;
	СписокДокументов.ЗагрузитьЗначения(мсвДокументы);
	
	Если ЭлементПрогрессБар = Неопределено Тогда
		ЭлементПрогрессБар = Новый Структура("Значение, МаксимальноеЗначение", 0, 0);
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатТиповыеДокументы.ТиповойДокумент,
	|	уатТиповыеДокументы.ДокументУАТ
	|ИЗ
	|	РегистрСведений.уатТиповыеДокументы КАК уатТиповыеДокументы
	|ГДЕ
	|	уатТиповыеДокументы.ДокументУАТ В(&мсвДокументыУАТ)
	|
	|СГРУППИРОВАТЬ ПО
	|	уатТиповыеДокументы.ТиповойДокумент,
	|	уатТиповыеДокументы.ДокументУАТ");
	Запрос.УстановитьПараметр("мсвДокументыУАТ", СписокДокументов);
	
	ДеревоДокументов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	Для Каждого ТекСтрокаТиповойДокумент Из ДеревоДокументов Цикл
		ТекТиповойДокумент = ТекСтрокаТиповойДокумент.ТиповойДокумент;
		Если НЕ ТекТиповойДокумент.ПометкаУдаления Тогда
			Попытка
				ТекТиповойДокументОбъект = ТекТиповойДокумент.ПолучитьОбъект();
				ТекТиповойДокументОбъект.УстановитьПометкуУдаления(Истина);
			Исключение
				ТекстОшибки = "Документ <" + ТекТиповойДокументОбъект + ">: не удалось установить пометку удаления! " + ИнформацияОбОшибке().Описание;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		
		Для Каждого ТекСтрокаДокументУАТ Из ТекСтрокаДокументУАТ.Строки Цикл
			ТекДокументУАТ = ТекСтрокаДокументУАТ.ДокументУАТ;
			МенеджерЗаписи.ДокументУАТ = ТекДокументУАТ;
			МенеджерЗаписи.ТиповойДокумент = ТекТиповойДокумент;
			Попытка
				МенеджерЗаписи.Удалить();
			Исключение
				ТекстОшибки = "Не удалось удалить запись регистра <" + ТекДокументУАТ + ">, <" + ТекТиповойДокумент + ">: " + ИнформацияОбОшибке().Описание;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			КонецПопытки;
			
			ЭлементПрогрессБар.Значение = ЭлементПрогрессБар.Значение + 1;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОбщиеРеквизиты(ПризнакФормированияОбщегоТиповогоДокумента = Ложь)
	
	мМетаданныеТиповогоДокумента 	= мТиповойДокумент.Метаданные();
	мМетаданныеДокументаУАТ 		= мДокументУАТ.Метаданные();
	
	//вынесено из условия ниже
	уатОбщегоНазначенияТиповые.ЗаполнитьШапкуДокумента(мТиповойДокумент.ЭтотОбъект, ПользователиКлиентСервер.ТекущийПользователь());
	
	Если Не ПризнакФормированияОбщегоТиповогоДокумента Тогда
		Если мМетаданныеДокументаУАТ.Имя = "уатПутевойЛист" Тогда
			Если мИспользоватьДатуВыпискиПЛ = Истина Тогда
				мТиповойДокумент.Дата = мДокументУАТ.Дата;
			Иначе
				мТиповойДокумент.Дата = мДокументУАТ.ДатаЗакрытия;
			КонецЕсли;
		Иначе
			мТиповойДокумент.Дата = мДокументУАТ.Дата;
		КонецЕсли;
		
		//уатОбщегоНазначенияТиповые.ЗаполнитьШапкуДокумента(мТиповойДокумент.ЭтотОбъект, ПользователиКлиентСервер.ТекущийПользователь());
		
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Организация", мМетаданныеТиповогоДокумента) 
			И уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Организация", мМетаданныеДокументаУАТ) Тогда
			мТиповойДокумент.Организация 		= мДокументУАТ.Организация;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПризнакФормированияОбщегоТиповогоДокумента И ЗначениеЗаполнено(мОтборОрганизация)
		И уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Организация", мМетаданныеТиповогоДокумента) 
		И уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Организация", мМетаданныеДокументаУАТ) Тогда
		мТиповойДокумент.Организация = мОтборОрганизация;
	КонецЕсли;
	
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Подразделение", мМетаданныеТиповогоДокумента) Тогда
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Подразделение", мМетаданныеДокументаУАТ) Тогда
			мТиповойДокумент.Подразделение 		= мДокументУАТ.Подразделение;
		ИначеЕсли уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ПодразделениеОрганизации", мМетаданныеДокументаУАТ) Тогда
			мТиповойДокумент.Подразделение 		= мДокументУАТ.ПодразделениеОрганизации;
		КонецЕсли;
	КонецЕсли;	
	
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ПодразделениеОрганизации", мМетаданныеТиповогоДокумента) 
		И уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ПодразделениеОрганизации", мМетаданныеДокументаУАТ) Тогда
		мТиповойДокумент.ПодразделениеОрганизации 	= мДокументУАТ.ПодразделениеОрганизации;
	КонецЕсли;	
	
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("СуммаВключаетНДС", мМетаданныеТиповогоДокумента) 
		И уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("СуммаВключаетНДС", мМетаданныеДокументаУАТ) Тогда
		мТиповойДокумент.СуммаВключаетНДС 	= мДокументУАТ.СуммаВключаетНДС;
	КонецЕсли;
	
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ЦенаВключаетНДС", мМетаданныеТиповогоДокумента) 
		И уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("СуммаВключаетНДС", мМетаданныеДокументаУАТ) Тогда
		мТиповойДокумент.ЦенаВключаетНДС 	= мДокументУАТ.СуммаВключаетНДС;
	КонецЕсли;
	
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Контрагент", мМетаданныеТиповогоДокумента)
		И уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Контрагент", мМетаданныеДокументаУАТ) Тогда
		мТиповойДокумент.Контрагент = мДокументУАТ.Контрагент;
	КонецЕсли;
	
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Договор", мМетаданныеТиповогоДокумента) Тогда
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ДоговорКонтрагента", мМетаданныеДокументаУАТ) Тогда
			мТиповойДокумент.Договор = мДокументУАТ.ДоговорКонтрагента;
		ИначеЕсли уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Договор", мМетаданныеДокументаУАТ) Тогда
			мТиповойДокумент.Договор = мДокументУАТ.Договор;
		КонецЕсли;
	КонецЕсли;
	
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Партнер", мМетаданныеТиповогоДокумента)
		И уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Контрагент", мМетаданныеДокументаУАТ)
		И уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("Партнер", мДокументУАТ.Контрагент) Тогда
		мТиповойДокумент.Партнер = мДокументУАТ.Контрагент.Партнер;
	КонецЕсли;
	
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Соглашение", мМетаданныеТиповогоДокумента)
		И уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Соглашение", мМетаданныеДокументаУАТ) Тогда
		мТиповойДокумент.Соглашение = мДокументУАТ.Соглашение;
	КонецЕсли;
	
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ВалютаДокумента", мМетаданныеТиповогоДокумента) 
		И уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ДоговорКонтрагента", мМетаданныеТиповогоДокумента) Тогда
		мТиповойДокумент.ДоговорКонтрагента = мДокументУАТ.ДоговорКонтрагента;
		мТиповойДокумент.ВалютаДокумента    = мТиповойДокумент.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		СтруктураКурсаДокумента = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(мТиповойДокумент.ВалютаДокумента, мТиповойДокумент.Дата);
		
		// В некоторых документах курс и кратность документа отсутствуют.
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("КурсДокумента", мМетаданныеТиповогоДокумента) Тогда
			мТиповойДокумент.КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КонецЕсли;
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("КратностьДокумента", мМетаданныеТиповогоДокумента) Тогда
			мТиповойДокумент.КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		КонецЕсли;
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("КурсВзаиморасчетов", мМетаданныеТиповогоДокумента) Тогда
			мТиповойДокумент.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		КонецЕсли;
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("КратностьВзаиморасчетов", мМетаданныеТиповогоДокумента)Тогда
			мТиповойДокумент.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
		КонецЕсли;
	КонецЕсли;
	
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Валюта", мМетаданныеТиповогоДокумента) 
		И уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ВалютаДокумента", мМетаданныеДокументаУАТ) Тогда
		
		мТиповойДокумент.Валюта = мДокументУАТ.ВалютаДокумента;
	КонецЕсли;
	
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ВалютаВзаиморасчетов", мМетаданныеТиповогоДокумента) Тогда
		мТиповойДокумент.ВалютаВзаиморасчетов = мДокументУАТ.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	КонецЕсли;
	
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("НалогообложениеНДС", мМетаданныеТиповогоДокумента)
		И уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("УчитыватьНДС", мМетаданныеДокументаУАТ) Тогда
		
		Если мДокументУАТ.УчитыватьНДС Тогда
			мТиповойДокумент.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
		Иначе
			мТиповойДокумент.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
		КонецЕсли;
	КонецЕсли;
	
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ЗакупкаПодДеятельность", мМетаданныеТиповогоДокумента)
		И уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("УчитыватьНДС", мМетаданныеДокументаУАТ) Тогда
		
		Если мДокументУАТ.УчитыватьНДС Тогда
			мТиповойДокумент.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
		Иначе
			мТиповойДокумент.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
		КонецЕсли;
	КонецЕсли;
	
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Склад", мМетаданныеТиповогоДокумента) 
		И уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Склад", мМетаданныеДокументаУАТ) Тогда
		мТиповойДокумент.Склад 				= мДокументУАТ.Склад;
	КонецЕсли;
	
	//в некоторых документах УПП вместо реквизита "Склад" - реквизит "СкладОрдер" составного типа
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("СкладОрдер", мМетаданныеТиповогоДокумента)
		И уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Склад", мМетаданныеДокументаУАТ) Тогда
		мТиповойДокумент.ВидПоступления				= Перечисления.ВидыПоступленияТоваров.НаСклад;
		мТиповойДокумент.СкладОрдер 				= мДокументУАТ.Склад;
	КонецЕсли;
	
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Комментарий", мМетаданныеТиповогоДокумента) 
		И уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Комментарий", мМетаданныеДокументаУАТ) Тогда
		мТиповойДокумент.Комментарий = мДокументУАТ.Комментарий;
	КонецЕсли;
	
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Ответственный", мМетаданныеТиповогоДокумента) 
		И уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Ответственный", мМетаданныеДокументаУАТ) Тогда
		мТиповойДокумент.Ответственный = мДокументУАТ.Ответственный;
	КонецЕсли;
	
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("НомерВходящегоДокумента", мМетаданныеТиповогоДокумента) 
		И уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("НомерВходящегоДокумента", мМетаданныеДокументаУАТ) Тогда
		мТиповойДокумент.НомерВходящегоДокумента = мДокументУАТ.НомерВходящегоДокумента;
	КонецЕсли;
	
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ДатаВходящегоДокумента", мМетаданныеТиповогоДокумента) 
		И уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ДатаВходящегоДокумента", мМетаданныеДокументаУАТ) Тогда
		мТиповойДокумент.ДатаВходящегоДокумента = мДокументУАТ.ДатаВходящегоДокумента;
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработки заправочных ведомостей
// 
Процедура ОбработкаЗаправокГСМ()
	
	Если (мДокументУАТ.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаСклад)
		ИЛИ (мДокументУАТ.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаТалоны)
		ИЛИ (мДокументУАТ.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад)
		Тогда
		мТиповойДокумент 			     	= Документы.ПеремещениеТоваров.СоздатьДокумент();
		
		ЗаполнитьОбщиеРеквизиты();
		
		мТиповойДокумент.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным;
		мТиповойДокумент.СкладОтправитель	= мДокументУАТ.АЗС.Контрагент_Склад;
		
		СтруктураОбъектовНастроек = Новый Структура;
		СтруктураОбъектовНастроек.Вставить("Организация", мДокументУАТ.Организация);
		СтруктураОбъектовНастроек.Вставить("Подразделение", мДокументУАТ.ПодразделениеОрганизации);
		мТиповойДокумент.СкладПолучатель	= уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.СкладДляПеремещенияГСМ);
		
		// Для Бухгалтерии КОРП
		Если Метаданные.Документы.Найти("АвизоМПЗВходящее") <> Неопределено Тогда
			мТиповойДокумент.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
			мТиповойДокумент.ПодразделениеОтправитель = мТиповойДокумент.СкладОтправитель.ПодразделениеОрганизации;
			мТиповойДокумент.ПодразделениеПолучатель = мТиповойДокумент.СкладПолучатель.ПодразделениеОрганизации;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		
		ТекстЗапроса=
		"ВЫБРАТЬ
		|	уатЗаправкаГСМЗаправки.ГСМ КАК ГСМ,
		|	ВЫБОР
		|		КОГДА уатНоменклатураГСМ.ГруппаГСМ = &ГруппаГСМТалоны
		|				ИЛИ уатЗаправкаГСМЗаправки.Плотность = 0
		|			ТОГДА уатЗаправкаГСМЗаправки.Количество
		|		ИНАЧЕ уатЗаправкаГСМЗаправки.Количество * уатЗаправкаГСМЗаправки.Плотность
		|	КОНЕЦ КАК Количество
		|ИЗ
		|	Документ.уатЗаправкаГСМ.Заправки КАК уатЗаправкаГСМЗаправки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
		|		ПО уатЗаправкаГСМЗаправки.ГСМ = уатНоменклатураГСМ.Номенклатура
		|ГДЕ
		|	уатЗаправкаГСМЗаправки.Ссылка = &Ссылка";
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Ссылка", мДокументУАТ.Ссылка);
		Запрос.УстановитьПараметр("ГруппаГСМТалоны", Перечисления.уатГруппыГСМ.Талон);
		
		тзЗаправки 	= Запрос.Выполнить().Выгрузить();
		тзЗаправки.Свернуть("ГСМ", "Количество");
		
		Для Каждого ТекСтрока из тзЗаправки Цикл
			НоваяСтрока 			 = мТиповойДокумент.Товары.Добавить();
			НоваяСтрока.Номенклатура = ТекСтрока.ГСМ;
			НоваяСтрока.Упаковка = ТекСтрока.ГСМ.ЕдиницаИзмерения;
			НоваяСтрока.КоличествоУпаковок = ТекСтрока.Количество;
			НоваяСтрока.Количество = ТекСтрока.Количество;
		КонецЦикла;
		
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Статус", мМетаданныеТиповогоДокумента) Тогда
			мТиповойДокумент.Статус = Перечисления.СтатусыПеремещенийТоваров.Принято;
		КонецЕсли;
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ХозяйственнаяОперация", мМетаданныеТиповогоДокумента) Тогда
			мТиповойДокумент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
		КонецЕсли;
		
		мТиповойДокумент.Записать();
		
		ДобавитьНовуюЗапись();
		
	ИначеЕсли мДокументУАТ.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаНаличные Тогда	
		//авансовые отчеты
		тзЗаправки = мДокументУАТ.Заправки.Выгрузить();
		тзЗаправки.Свернуть("Водитель, Валюта");
		
		Для Каждого ТекСтрока1 из тзЗаправки Цикл
			//выбрали строки с заправками данного водителя
			мМассивЗаправок = мДокументУАТ.Заправки.НайтиСтроки(Новый Структура("Водитель, Валюта", ТекСтрока1.Водитель, ТекСтрока1.Валюта)); 
			мТиповойДокумент = Документы.АвансовыйОтчет.СоздатьДокумент();
			
			ЗаполнитьОбщиеРеквизиты();
			
			мТиповойДокумент.ПодотчетноеЛицо = ТекСтрока1.Водитель.ФизическоеЛицо;
			мТиповойДокумент.НазначениеАванса	= "Заправка автомобиля ГСМ";
			
			СтруктураОбъектовНастроек = Новый Структура;
			СтруктураОбъектовНастроек.Вставить("Организация", мДокументУАТ.Организация);
			СтруктураОбъектовНастроек.Вставить("Подразделение", мДокументУАТ.ПодразделениеОрганизации);
		
			Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Склад", мМетаданныеТиповогоДокумента) Тогда
				мТиповойДокумент.Склад          =  уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.СкладДляПеремещенияГСМ);
			ИначеЕсли уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("СкладОрдер", мМетаданныеТиповогоДокумента) Тогда	
				мТиповойДокумент.СкладОрдер     =  уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.СкладДляПеремещенияГСМ);
			КонецЕсли;
			Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ВидПоступления", мМетаданныеТиповогоДокумента) Тогда
				мТиповойДокумент.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
			КонецЕсли;
			
			Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("СуммаВключаетНДС", мМетаданныеТиповогоДокумента) Тогда
				мТиповойДокумент.СуммаВключаетНДС = Истина;
			КонецЕсли;
			
			Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ВалютаДокумента", мМетаданныеТиповогоДокумента) Тогда
				мТиповойДокумент.ВалютаДокумента    = ТекСтрока1.Валюта;
				СтруктураКурсаДокумента = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(мТиповойДокумент.ВалютаДокумента, мТиповойДокумент.Дата);
				
				// В некоторых документах курс и кратность документа отсутствуют.
				Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("КурсДокумента", мМетаданныеТиповогоДокумента) Тогда
					мТиповойДокумент.КурсДокумента = СтруктураКурсаДокумента.Курс;
				КонецЕсли;
				Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("КратностьДокумента", мМетаданныеТиповогоДокумента) Тогда
					мТиповойДокумент.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
				КонецЕсли;
			КонецЕсли;
			
			//создается доп. документ ПриобретениеТоваров и помещается в ТЧ Закупки
			мТиповойДокументВрем = мТиповойДокумент;
			мТиповойДокумент = Документы.ПриобретениеТоваровУслуг.СоздатьДокумент();;
			
			ЗаполнитьОбщиеРеквизиты();
			
			мТиповойДокумент.Контрагент 		= мДокументУАТ.АЗС.Контрагент_Склад;
			мТиповойДокумент.Партнер            = мТиповойДокумент.Контрагент.Партнер;
			мТиповойДокумент.ДатаПлатежа = мТиповойДокумент.Дата;
			мТиповойДокумент.ПодотчетноеЛицо = ТекСтрока1.Водитель.ФизическоеЛицо;
			
			СтруктураОбъектовНастроек = Новый Структура;
			СтруктураОбъектовНастроек.Вставить("Организация", мДокументУАТ.Организация);
			СтруктураОбъектовНастроек.Вставить("Подразделение", мДокументУАТ.ПодразделениеОрганизации);
			
			мТиповойДокумент.Склад          =  уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.СкладДляПеремещенияГСМ);
			
			мТиповойДокумент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
			
			ВалютаДок = Неопределено;
			
			Для сч = 0 По мМассивЗаправок.Количество() - 1 Цикл
				НоваяСтрока 					= мТиповойДокумент.Товары.Добавить();
				НоваяСтрока.Номенклатура		= мМассивЗаправок[сч].ГСМ;
				НоваяСтрока.Количество = мМассивЗаправок[сч].Количество;
				НоваяСтрока.КоличествоУпаковок = мМассивЗаправок[сч].Количество;
				НоваяСтрока.Сумма					= мМассивЗаправок[сч].Сумма;
				НоваяСтрока.СтавкаНДС				= мМассивЗаправок[сч].СтавкаНДС;
				НоваяСтрока.СуммаНДС				= мМассивЗаправок[сч].СуммаНДС;
				НоваяСтрока.Цена = ?(НоваяСтрока.КоличествоУпаковок = 0, 0, НоваяСтрока.Сумма / НоваяСтрока.КоличествоУпаковок);
				НоваяСтрока.СуммаСНДС = мМассивЗаправок[сч].Сумма + ?(мТиповойДокумент.ЦенаВключаетНДС, 0, мМассивЗаправок[сч].СуммаНДС);
				НоваяСтрока.Склад = мТиповойДокумент.Склад;
				НоваяСтрока.ВидЦеныПоставщика = мМассивЗаправок[сч].ВидЦеныПоставщика;
				
				ВалютаДок = ?(ЗначениеЗаполнено(ВалютаДок), ВалютаДок, мМассивЗаправок[сч].Валюта);
				
				//уатОбщегоНазначенияТиповыеСервер.уатРассчитатьСуммуНДСТабЧасти(НоваяСтрока, мТиповойДокумент);
				
			КонецЦикла;
			
			//валюту документа заполняем по первой заправке
			Если ЗначениеЗаполнено(ВалютаДок) Тогда
				мТиповойДокумент.Валюта = ВалютаДок;
			КонецЕсли;
			
			мТиповойДокумент.Записать();
			
			ДобавитьНовуюЗапись();
			
			ДокПриобретение = мТиповойДокумент;
			мТиповойДокумент = мТиповойДокументВрем;
			
			//валюту документа заполняем по первой заправке
			Если ЗначениеЗаполнено(ВалютаДок) Тогда
				мТиповойДокумент.Валюта = ВалютаДок;
			КонецЕсли;
			
			НоваяСтрокаОплаты = мТиповойДокумент.ОплатаПоставщикам.Добавить();
			НоваяСтрокаОплаты.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщику;
			НоваяСтрокаОплаты.Поставщик = ДокПриобретение.Партнер;
			НоваяСтрокаОплаты.Контрагент = ДокПриобретение.Контрагент;
			НоваяСтрокаОплаты.Заказ = ДокПриобретение.Ссылка;
			НоваяСтрокаОплаты.Сумма = ДокПриобретение.СуммаДокумента;
			НоваяСтрокаОплаты.ВалютаВзаиморасчетов = ДокПриобретение.ВалютаВзаиморасчетов;
			НоваяСтрокаОплаты.СуммаВзаиморасчетов = ДокПриобретение.СуммаВзаиморасчетов;
			
			// Заполняем реквизиты табличной части.
			
			мТиповойДокумент.Записать();
			
			ДобавитьНовуюЗапись();
		КонецЦикла;
		
	ИначеЕсли мДокументУАТ.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПоставщик Или 
		мДокументУАТ.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта Тогда	
		//по карте
		
		мТиповойДокумент = Документы.ПриобретениеТоваровУслуг.СоздатьДокумент();
		
		ЗаполнитьОбщиеРеквизиты();
		
		мТиповойДокумент.Контрагент = мДокументУАТ.АЗС.Контрагент_Склад;
		мТиповойДокумент.Партнер = мТиповойДокумент.Контрагент.Партнер;
		мТиповойДокумент.ДатаПлатежа = мТиповойДокумент.Дата;
		
		СтруктураОбъектовНастроек = Новый Структура;
		СтруктураОбъектовНастроек.Вставить("Организация", мДокументУАТ.Организация);
		СтруктураОбъектовНастроек.Вставить("Подразделение", мДокументУАТ.ПодразделениеОрганизации);
		
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Склад", мМетаданныеТиповогоДокумента) Тогда
			мТиповойДокумент.Склад          =  уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.СкладДляПеремещенияГСМ);
		ИначеЕсли уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("СкладОрдер", мМетаданныеТиповогоДокумента) Тогда	
			мТиповойДокумент.СкладОрдер     =  уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.СкладДляПеремещенияГСМ);
		КонецЕсли;
		
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ВидОперации", мМетаданныеТиповогоДокумента) Тогда
			мТиповойДокумент.ВидОперации    =  Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары;
		ИначеЕсли уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ХозяйственнаяОперация", мМетаданныеТиповогоДокумента) Тогда
			мТиповойДокумент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
		КонецЕсли;
		
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ВидПоступления", мМетаданныеТиповогоДокумента) Тогда
			мТиповойДокумент.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
		КонецЕсли;
		
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("СпособЗачетаАвансов", мМетаданныеТиповогоДокумента) Тогда
			мТиповойДокумент.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		КонецЕсли;
		
		Попытка
			СчетаУчета = Вычислить("БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(мТиповойДокумент.Организация, мТиповойДокумент.Контрагент, мТиповойДокумент.ДоговорКонтрагента)");
			
			Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("ТипДоговора", "ДоговорыКонтрагентов") И
				мТиповойДокумент.Договор.ТипДоговора = Перечисления.ТипыДоговоров.СКомиссионером
				ИЛИ НЕ уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("ТипДоговора", "ДоговорыКонтрагентов") И
				мТиповойДокумент.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером	Тогда
				
				мТиповойДокумент.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
				мТиповойДокумент.СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			Иначе
				мТиповойДокумент.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
				мТиповойДокумент.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("ТипЦен", "ДоговорыКонтрагентов") Тогда
			мТиповойДокумент.ТипЦен = мТиповойДокумент.ДоговорКонтрагента.ТипЦен;
		КонецЕсли;
		
		тзЗаправки = мДокументУАТ.Заправки.Выгрузить();
		тзЗаправки.Свернуть("ГСМ, Валюта, СтавкаНДС, ВидЦеныПоставщика", "СуммаНДС, Сумма, Количество");
		
		ВалютаДок = Неопределено;
		
		Для Каждого ТекСтрока из тзЗаправки Цикл
			
			НоваяСтрока 					= мТиповойДокумент.Товары.Добавить();
			НоваяСтрока.Номенклатура		= ТекСтрока.ГСМ;
			НоваяСтрока.Количество		   = ТекСтрока.Количество;
			НоваяСтрока.КоличествоУпаковок = ТекСтрока.Количество;
			
			Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ВалютаДокумента", мТиповойДокумент.Метаданные()) Тогда
				Если Не ЗначениеЗаполнено(мТиповойДокумент.ВалютаДокумента) Тогда
					НоваяСтрока.Сумма 	= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма, ТекСтрока.Валюта, ВалютаРегламентированногоУчета, мТиповойДокумент.Дата, мТиповойДокумент.Дата);
					НоваяСтрока.Цена 	= ?(ТекСтрока.Количество = 0, 0, НоваяСтрока.Сумма / ТекСтрока.Количество);
				Иначе
					НоваяСтрока.Сумма 	= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма, ТекСтрока.Валюта, мТиповойДокумент.ВалютаДокумента, мТиповойДокумент.Дата, мТиповойДокумент.Дата);
					НоваяСтрока.Цена 	= ?(ТекСтрока.Количество = 0, 0, НоваяСтрока.Сумма / ТекСтрока.Количество);
				КонецЕсли;
				
			ИначеЕсли уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Валюта", мТиповойДокумент.Метаданные()) Тогда
				Если Не ЗначениеЗаполнено(мТиповойДокумент.Валюта) Тогда
					НоваяСтрока.Сумма 	= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма, ТекСтрока.Валюта, ВалютаРегламентированногоУчета, мТиповойДокумент.Дата, мТиповойДокумент.Дата);
					НоваяСтрока.Цена 	= ?(ТекСтрока.Количество = 0, 0, НоваяСтрока.Сумма / ТекСтрока.Количество);
				Иначе
					НоваяСтрока.Сумма 	= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма, ТекСтрока.Валюта, мТиповойДокумент.Валюта, мТиповойДокумент.Дата, мТиповойДокумент.Дата);
					НоваяСтрока.Цена 	= ?(ТекСтрока.Количество = 0, 0, НоваяСтрока.Сумма / ТекСтрока.Количество);
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока.СтавкаНДС 	= ТекСтрока.СтавкаНДС;
			НоваяСтрока.СуммаНДС 	= ТекСтрока.СуммаНДС;
			НоваяСтрока.СуммаСНДС = ТекСтрока.Сумма + ?(мТиповойДокумент.ЦенаВключаетНДС, 0, ТекСтрока.СуммаНДС);
			НоваяСтрока.ВидЦеныПоставщика = ТекСтрока.ВидЦеныПоставщика;
			
			ВалютаДок = ?(ЗначениеЗаполнено(ВалютаДок), ВалютаДок, ТекСтрока.Валюта);
			
		КонецЦикла;
		
		//валюту документа заполняем по первой заправке
		Если ЗначениеЗаполнено(ВалютаДок) Тогда
			мТиповойДокумент.Валюта = ВалютаДок;
		КонецЕсли;
		
		// Заполняем реквизиты табличной части.
		
		мТиповойДокумент.Товары.Свернуть("Номенклатура, Цена, СтавкаНДС", "Количество, КоличествоУпаковок, Сумма, СуммаНДС, СуммаСНДС");
		
		мТиповойДокумент.Записать();
		
		ДобавитьНовуюЗапись();
		
	КонецЕсли;	
	
КонецПроцедуры

// Процедура обработки ТТД
// 
Процедура ОбработкаТТД(ПризнакФормированияОбщегоТиповогоДокумента)
	
	Если мСтруктураПараметров.ФормироватьРеализацию Тогда
		
		Если Не ПризнакФормированияОбщегоТиповогоДокумента Тогда
			мТиповойДокумент = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		КонецЕсли;
		
		мМетаданныеТиповогоДокумента 	= мТиповойДокумент.Метаданные();
		мМетаданныеДокументаУАТ 		= мДокументУАТ.Метаданные();
		
		ЗаполнитьОбщиеРеквизиты(ПризнакФормированияОбщегоТиповогоДокумента);
		
		Если Не ПризнакФормированияОбщегоТиповогоДокумента Тогда
			мТиповойДокумент.Дата = мДокументУАТ.Дата;
			
			Попытка
				Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Организация", мМетаданныеТиповогоДокумента) Тогда
					мТиповойДокумент.Организация = мДокументУАТ.Организация;
				КонецЕсли;
			Исключение
			КонецПопытки; 
			
		КонецЕсли;
		
		мТиповойДокумент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Статус", мМетаданныеТиповогоДокумента) Тогда
			мТиповойДокумент.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
		КонецЕсли;
		
		мТиповойДокумент.Контрагент 	= мДокументУАТ.Контрагент;
		мТиповойДокумент.АдресДоставки 	= мДокументУАТ.АдресДоставки;
		мТиповойДокумент.Грузополучатель= мДокументУАТ.Грузополучатель;
		
		ЗаполнитьОбщиеРеквизиты(ПризнакФормированияОбщегоТиповогоДокумента);
		
		Для Каждого ТекСтрока Из мДокументУАТ.Стоимость Цикл
			НоваяСтрока = мТиповойДокумент.Товары.Добавить();
			НоваяСтрока.Номенклатура = ТекСтрока.НоменклатураУслуги;
			НоваяСтрока.Количество   = ТекСтрока.Количество;
			НоваяСтрока.СтавкаНДС    = ТекСтрока.СтавкаНДС;
			НоваяСтрока.СуммаНДС     = ТекСтрока.СуммаНДС;
			
			НоваяСтрока.КоличествоУпаковок = ТекСтрока.Количество;
			
			Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ВалютаДокумента", мМетаданныеТиповогоДокумента) Тогда
				Если ЗначениеЗаполнено(мТиповойДокумент.ВалютаДокумента) Тогда
					НоваяСтрока.Цена 		= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Цена, мДокументУАТ.ВалютаДокумента, мТиповойДокумент.ВалютаДокумента, мТиповойДокумент.Дата, мТиповойДокумент.Дата);
					НоваяСтрока.Сумма 		= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма, мДокументУАТ.ВалютаДокумента, мТиповойДокумент.ВалютаДокумента, мТиповойДокумент.Дата, мТиповойДокумент.Дата);
				Иначе
					НоваяСтрока.Цена 		= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Цена, мДокументУАТ.ВалютаДокумента, ВалютаРегламентированногоУчета, мТиповойДокумент.Дата, мТиповойДокумент.Дата);
					НоваяСтрока.Сумма 		= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма, мДокументУАТ.ВалютаДокумента, ВалютаРегламентированногоУчета, мТиповойДокумент.Дата, мТиповойДокумент.Дата);
				КонецЕсли;
				
			ИначеЕсли уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Валюта", мМетаданныеТиповогоДокумента) Тогда
				Если ЗначениеЗаполнено(мТиповойДокумент.Валюта) Тогда
					НоваяСтрока.Цена 		= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Цена, мДокументУАТ.ВалютаДокумента, мТиповойДокумент.Валюта, мТиповойДокумент.Дата, мТиповойДокумент.Дата);
					НоваяСтрока.Сумма 		= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма, мДокументУАТ.ВалютаДокумента, мТиповойДокумент.Валюта, мТиповойДокумент.Дата, мТиповойДокумент.Дата);
				Иначе
					НоваяСтрока.Цена 		= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Цена, мДокументУАТ.ВалютаДокумента, ВалютаРегламентированногоУчета, мТиповойДокумент.Дата, мТиповойДокумент.Дата);
					НоваяСтрока.Сумма 		= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма, мДокументУАТ.ВалютаДокумента, ВалютаРегламентированногоУчета, мТиповойДокумент.Дата, мТиповойДокумент.Дата);
				КонецЕсли;
			КонецЕсли;
			
			уатОбщегоНазначенияТиповыеСервер.уатРассчитатьСуммуНДСТабЧасти(НоваяСтрока, мТиповойДокумент);
		КонецЦикла;
		
		мТиповойДокумент.Товары.Свернуть("Номенклатура, Характеристика, Упаковка, Цена, СтавкаНДС", "Количество, КоличествоУпаковок, Сумма, СуммаНДС, СуммаСНДС");
		
		мТиповойДокумент.Записать();
		
		ДобавитьНовуюЗапись();
	КонецЕсли;
	
	Если мСтруктураПараметров.ФормироватьСчетНаОплату Тогда
		Если Не ПризнакФормированияОбщегоТиповогоДокумента Тогда
			мТиповойДокумент = Документы.СчетНаОплатуКлиенту.СоздатьДокумент();
		КонецЕсли;
		
		мМетаданныеТиповогоДокумента 	= мТиповойДокумент.Метаданные();
		мМетаданныеДокументаУАТ 		= мДокументУАТ.Метаданные();
		
		ЗаполнитьОбщиеРеквизиты(ПризнакФормированияОбщегоТиповогоДокумента);
		
		Если Не ПризнакФормированияОбщегоТиповогоДокумента Тогда
			мТиповойДокумент.Дата = мДокументУАТ.Дата;
			
			Попытка
				Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Организация", мМетаданныеТиповогоДокумента) Тогда
					мТиповойДокумент.Организация = мДокументУАТ.Организация;
				КонецЕсли;
			Исключение
			КонецПопытки; 
			
		КонецЕсли;
		
		//мТиповойДокумент.ДокументОснование = мДокументУАТ;
		мТиповойДокумент.ДокументОснование = мДокументУАТ.ДоговорКонтрагента;
		
		//мТиповойДокумент.Контрагент 	= мДокументУАТ.Контрагент;
		//мТиповойДокумент.Партнер 	= мДокументУАТ.Контрагент.Партнер;
		//мТиповойДокумент.Договор = мДокументУАТ.ДоговорКонтрагента;
		
		ЗаполнитьОбщиеРеквизиты(ПризнакФормированияОбщегоТиповогоДокумента);
		
		НоваяСтрока = мТиповойДокумент.ЭтапыГрафикаОплаты.Добавить();
		НоваяСтрока.СуммаПлатежа = мДокументУАТ.Стоимость.Итог("Сумма");
		НоваяСтрока.ПроцентПлатежа = 100;
		НоваяСтрока.ДатаПлатежа = мДокументУАТ.Дата;
		
		мТиповойДокумент.Записать();
		
		ДобавитьНовуюЗапись();
	КонецЕсли;
		
КонецПроцедуры

// Процедура обработки Заказов грузоотправителя
// 
Процедура ОбработкаЗаказовТС(ПризнакФормированияОбщегоТиповогоДокумента)
	
	Если мСтруктураПараметров.ФормироватьРеализацию
		И ТипЗнч(мДокументУАТ.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Если Не ПризнакФормированияОбщегоТиповогоДокумента Тогда
			мТиповойДокумент = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		КонецЕсли;
		
		мМетаданныеТиповогоДокумента 	= мТиповойДокумент.Метаданные();
		мМетаданныеДокументаУАТ 		= мДокументУАТ.Метаданные();
		
		ЗаполнитьОбщиеРеквизиты(ПризнакФормированияОбщегоТиповогоДокумента);
		
		мТиповойДокумент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Статус", мМетаданныеТиповогоДокумента) Тогда
			мТиповойДокумент.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
		КонецЕсли;
		
		Если Не ПризнакФормированияОбщегоТиповогоДокумента Тогда
			мТиповойДокумент.Дата = мДокументУАТ.Дата;
			
			Попытка
				Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Организация", мМетаданныеТиповогоДокумента) Тогда
					мТиповойДокумент.Организация = мДокументУАТ.Организация;
				КонецЕсли;
			Исключение
			КонецПопытки; 
			
		КонецЕсли;
		
		Для Каждого ТекСтрока Из мДокументУАТ.Услуги Цикл
			НоваяСтрока = мТиповойДокумент.Товары.Добавить();
			НоваяСтрока.Номенклатура 	= ТекСтрока.Номенклатура;
			НоваяСтрока.Количество 		= ТекСтрока.Количество;
			НоваяСтрока.СтавкаНДС 	= ТекСтрока.СтавкаНДС;
			НоваяСтрока.СуммаНДС 		= ТекСтрока.СуммаНДС;
			
			НоваяСтрока.КоличествоУпаковок = ТекСтрока.Количество;
			//НоваяСтрока.Упаковка = ТекСтрока.ЕдиницаИзмерения;
			
			Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Валюта", мМетаданныеТиповогоДокумента) Тогда
				Если ЗначениеЗаполнено(мТиповойДокумент.Валюта) Тогда
					НоваяСтрока.Цена 		= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Цена, мДокументУАТ.ВалютаДокумента,
						мТиповойДокумент.Валюта, мТиповойДокумент.Дата, мТиповойДокумент.Дата);
					НоваяСтрока.Сумма 		= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма, мДокументУАТ.ВалютаДокумента,
						мТиповойДокумент.Валюта, мТиповойДокумент.Дата, мТиповойДокумент.Дата);
				Иначе
					НоваяСтрока.Цена 		= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Цена, мДокументУАТ.ВалютаДокумента,
						ВалютаРегламентированногоУчета, мТиповойДокумент.Дата, мТиповойДокумент.Дата);
					НоваяСтрока.Сумма 		= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма, мДокументУАТ.ВалютаДокумента,
						ВалютаРегламентированногоУчета, мТиповойДокумент.Дата, мТиповойДокумент.Дата);
				КонецЕсли;
			КонецЕсли;
			
			уатОбщегоНазначенияТиповыеСервер.уатРассчитатьСуммуНДСТабЧасти(НоваяСтрока, мТиповойДокумент);
		КонецЦикла;
		
		мТиповойДокумент.Товары.Свернуть("Номенклатура, Характеристика, Упаковка, Цена, СтавкаНДС", "Количество, КоличествоУпаковок, Сумма, СуммаНДС, СуммаСНДС");
		
		мТиповойДокумент.Записать();
		
		ДобавитьНовуюЗапись();
	КонецЕсли;
	
	Если мСтруктураПараметров.ФормироватьСчетНаОплату
		И ТипЗнч(мДокументУАТ.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Если Не ПризнакФормированияОбщегоТиповогоДокумента Тогда
			мТиповойДокумент = Документы.СчетНаОплатуКлиенту.СоздатьДокумент();
		КонецЕсли;
		
		мМетаданныеТиповогоДокумента 	= мТиповойДокумент.Метаданные();
		мМетаданныеДокументаУАТ 		= мДокументУАТ.Метаданные();
		
		ЗаполнитьОбщиеРеквизиты(ПризнакФормированияОбщегоТиповогоДокумента);
		
		Если Не ПризнакФормированияОбщегоТиповогоДокумента Тогда
			мТиповойДокумент.Дата = мДокументУАТ.Дата;
			мТиповойДокумент.Организация = мДокументУАТ.Организация;
		КонецЕсли;
		
		мТиповойДокумент.ДокументОснование = мДокументУАТ.ДоговорКонтрагента;
		
		НоваяСтрока = мТиповойДокумент.ЭтапыГрафикаОплаты.Добавить();
		НоваяСтрока.СуммаПлатежа = мДокументУАТ.СуммаДокумента;
		НоваяСтрока.ПроцентПлатежа = 100;
		НоваяСтрока.ДатаПлатежа = мДокументУАТ.Дата;
		
		мТиповойДокумент.Записать();
		
		ДобавитьНовуюЗапись();
	КонецЕсли;
		
КонецПроцедуры

// Процедура обработки путевых листов
// 
Процедура ОбработкаПЛ(ПризнакФормированияОбщегоТиповогоДокумента)
	
	Если мСтруктураПараметров.ФормироватьТребНакл Тогда
		Если Не ПризнакФормированияОбщегоТиповогоДокумента Тогда
			мТиповойДокумент = Документы.ВнутреннееПотреблениеТоваров.СоздатьДокумент();
		КонецЕсли;
		
		ЗаполнитьОбщиеРеквизиты(ПризнакФормированияОбщегоТиповогоДокумента);
		
		СтруктураОбъектовНастроек = Новый Структура;
		СтруктураОбъектовНастроек.Вставить("Организация", мДокументУАТ.Организация);
		СтруктураОбъектовНастроек.Вставить("Подразделение", мДокументУАТ.Подразделение);
		мТиповойДокумент.Склад = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек,
			ПланыВидовХарактеристик.уатПраваИНастройки.СкладДляПеремещенияГСМ);
		
		мТиповойДокумент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Статус", мМетаданныеТиповогоДокумента) Тогда
			мТиповойДокумент.Статус = Перечисления.СтатусыВнутреннихПотребленийТоваров.Отгружено;
		КонецЕсли;
		
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("НДСвСтоимостиТоваров", мМетаданныеТиповогоДокумента)
			И Метаданные.Перечисления.Найти("ДействиеНДСВСтоимостиТоваров") <> Неопределено Тогда
			мТиповойДокумент.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
		КонецЕсли;
		
		Попытка
			мТиповойДокумент.ПодразделениеОрганизации = мДокументУАТ.Подразделение;
		Исключение
		КонецПопытки;
		
		мТиповойДокумент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
		
		СтруктураОбъектовНастроек = Новый Структура;
		СтруктураОбъектовНастроек.Вставить("Организация", мДокументУАТ.Организация);
		СтруктураОбъектовНастроек.Вставить("Подразделение", мДокументУАТ.Подразделение);
		СтатьяРасходов = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек,
			ПланыВидовХарактеристик.уатПраваИНастройки.СтатьяРасходовПЛВнутрПотребление);
		
		Для Каждого ТекСтрока Из мДокументУАТ.РасходГСМ Цикл
			Если НЕ ТекСтрока.Активен Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекСтрока.РасходПоФакту <> 0 Тогда
				НоваяСтрока					= мТиповойДокумент.Товары.Добавить();
				НоваяСтрока.Номенклатура	= ТекСтрока.ГСМ;
				НоваяСтрока.Количество		= ТекСтрока.РасходПоФакту;
				НоваяСтрока.КоличествоУпаковок = ТекСтрока.РасходПоФакту;
				НоваяСтрока.СтатьяРасходов = СтатьяРасходов;
			КонецЕсли;
		КонецЦикла;
		
		Попытка
			мТиповойДокумент.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрока, "Материалы", Истина, Истина); //мДокументУАТ.ОтражатьВНалоговомУчете);
		Исключение
			Попытка
				мТиповойДокумент.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Материалы", Истина, Истина); //мДокументУАТ.ОтражатьВНалоговомУчете);
			Исключение
			КонецПопытки;
		КонецПопытки;
		
		Если (уатОбщегоНазначенияТиповые.ЕстьТабЧастьДокумента("Материалы", мТиповойДокумент.Метаданные())
			И мТиповойДокумент.Материалы.Количество() > 0)
			Или (уатОбщегоНазначенияТиповые.ЕстьТабЧастьДокумента("Товары", мТиповойДокумент.Метаданные())
			И мТиповойДокумент.Товары.Количество() > 0) Тогда
				мТиповойДокумент.Записать();
				ДобавитьНовуюЗапись();
		КонецЕсли;
	КонецЕсли;
	
	Если мСтруктураПараметров.ФормироватьСписание Тогда
		Если Не ПризнакФормированияОбщегоТиповогоДокумента Тогда
			мТиповойДокумент = Документы.СписаниеНедостачТоваров.СоздатьДокумент();
		КонецЕсли;
		
		ЗаполнитьОбщиеРеквизиты(ПризнакФормированияОбщегоТиповогоДокумента);
		
		СтруктураОбъектовНастроек = Новый Структура;
		СтруктураОбъектовНастроек.Вставить("Организация", мДокументУАТ.Организация);
		СтруктураОбъектовНастроек.Вставить("Подразделение", мДокументУАТ.Подразделение);
		
		мТиповойДокумент.Склад = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.СкладДляПеремещенияГСМ);
		мТиповойДокумент.ИсточникИнформацииОЦенахДляПечати = мТиповойДокумент.Склад.ИсточникИнформацииОЦенахДляПечати;
		
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("НДСвСтоимостиТоваров", мМетаданныеТиповогоДокумента)
			И Метаданные.Перечисления.Найти("ДействиеНДСВСтоимостиТоваров") <> Неопределено Тогда
			мТиповойДокумент.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
		КонецЕсли;
		
		СтруктураОбъектовНастроек = Новый Структура;
		СтруктураОбъектовНастроек.Вставить("Организация", мДокументУАТ.Организация);
		СтруктураОбъектовНастроек.Вставить("Подразделение", мДокументУАТ.Подразделение);
		мТиповойДокумент.СтатьяРасходов = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек,
			ПланыВидовХарактеристик.уатПраваИНастройки.СтатьяРасходовПЛСписаниеНедостачТоваров);
		
		Для Каждого ТекСтрока Из мДокументУАТ.РасходГСМ Цикл
			Если НЕ ТекСтрока.Активен Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекСтрока.РасходПоФакту <> 0 Тогда
				НоваяСтрока					= мТиповойДокумент.Товары.Добавить();
				НоваяСтрока.Номенклатура	= ТекСтрока.ГСМ;
				НоваяСтрока.Количество		= ТекСтрока.РасходПоФакту;
				
				Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ЕдиницаИзмерения", мТиповойДокумент.Метаданные()) Тогда 
					НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаИзмерения;
				КонецЕсли;
				Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Коэффициент", мТиповойДокумент.Метаданные()) Тогда 
					НоваяСтрока.Коэффициент = 1;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Попытка
			мТиповойДокумент.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрока, "Товары", Истина, Истина); //мДокументУАТ.ОтражатьВНалоговомУчете);
		Исключение
			Попытка
				мТиповойДокумент.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары", Истина, Истина); //мДокументУАТ.ОтражатьВНалоговомУчете);
			Исключение
			КонецПопытки;	
		КонецПопытки;	
		
		Если мТиповойДокумент.Товары.Количество() > 0 Тогда
			//Если НЕ ПризнакФормированияОбщегоТиповогоДокумента Тогда
			мТиповойДокумент.Записать();
			//КонецЕсли;
			ДобавитьНовуюЗапись();
		КонецЕсли;
	КонецЕсли;
	
	Если мСтруктураПараметров.ФормироватьВырабСотр Тогда
		Если Не ПризнакФормированияОбщегоТиповогоДокумента Тогда
			мТиповойДокумент = Документы.ВыработкаСотрудников.СоздатьДокумент();
		КонецЕсли;
		
		СтруктураОбъектовНастроек = Новый Структура;
		СтруктураОбъектовНастроек.Вставить("Организация", мДокументУАТ.Организация);
		СтруктураОбъектовНастроек.Вставить("Подразделение", мДокументУАТ.Подразделение);
		СтатьяКалькуляцииПЛВыработкаСотрудников = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек,
			ПланыВидовХарактеристик.уатПраваИНастройки.СтатьяКалькуляцииПЛВыработкаСотрудников);
			
		ВидРаботПЛВыработкаСотрудников = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек,
			ПланыВидовХарактеристик.уатПраваИНастройки.ВидРаботПЛВыработкаСотрудников);
		
		ЗаполнитьОбщиеРеквизиты(ПризнакФормированияОбщегоТиповогоДокумента);
		
		мТиповойДокумент.Бригада = мДокументУАТ.Бригада;
		мТиповойДокумент.ВидНаряда = Перечисления.ВидыБригадныхНарядов.ПрочиеРаботы;
		
		тблЗарплата = мДокументУАТ.Зарплата.Выгрузить();
		тблЗарплата.Свернуть("Сотрудник", "Сумма");
		
		Для Каждого ТекСтрока Из тблЗарплата Цикл
			Если ТекСтрока.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = мТиповойДокумент.ВидыРабот.Добавить();
			НоваяСтрока.Работник = ТекСтрока.Сотрудник.ФизическоеЛицо;
			НоваяСтрока.ВидРабот = ВидРаботПЛВыработкаСотрудников;
			НоваяСтрока.Количество = 1;
			НоваяСтрока.Сумма = ТекСтрока.Сумма;
			НоваяСтрока.Расценка = НоваяСтрока.Сумма;
			НоваяСтрока.СтатьяКалькуляции = СтатьяКалькуляцииПЛВыработкаСотрудников;
			
			НоваяСтрокаСотр = мТиповойДокумент.Работники.Добавить();
			НоваяСтрокаСотр.Работник = ТекСтрока.Сотрудник.ФизическоеЛицо;
			НоваяСтрокаСотр.Сумма = ТекСтрока.Сумма;
		КонецЦикла;
		
		Если мТиповойДокумент.ВидыРабот.Количество() > 0 Тогда
			мТиповойДокумент.Записать();
			ДобавитьНовуюЗапись();
		КонецЕсли;
	КонецЕсли;
	
	Если мСтруктураПараметров.ФормироватьПрочиеДоходыРасходы Тогда
		Если Не ПризнакФормированияОбщегоТиповогоДокумента Тогда
			мТиповойДокумент = Документы.ПрочиеДоходыРасходы.СоздатьДокумент();
		КонецЕсли;
		
		ЗаполнитьОбщиеРеквизиты(ПризнакФормированияОбщегоТиповогоДокумента);
		
		мТиповойДокумент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходы;
		мТиповойДокумент.Валюта = ВалютаРегламентированногоУчета;
		
		тблЗатратыТС = мДокументУАТ.ЗатратыТС.Выгрузить();
		тблЗатратыТС.Свернуть("СтатьяЗатрат", "Сумма");
		
		Для Каждого ТекСтрока Из тблЗатратыТС Цикл
			Если ТекСтрока.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = мТиповойДокумент.ПрочиеРасходы.Добавить();
			
			НоваяСтрока.Подразделение  = мДокументУАТ.Подразделение;
			НоваяСтрока.СтатьяРасходов = ТекСтрока.СтатьяЗатрат;
			НоваяСтрока.Сумма          = ТекСтрока.Сумма;
			НоваяСтрока.ДатаОтражения  = мТиповойДокумент.Дата;
		КонецЦикла;
		
		Если мТиповойДокумент.ПрочиеРасходы.Количество() > 0 Тогда
			мТиповойДокумент.Записать();
			ДобавитьНовуюЗапись();
		КонецЕсли;
	КонецЕсли;
	
	Если мСтруктураПараметров.ФормироватьРегистрацияНаработок Тогда
		Если Не ПризнакФормированияОбщегоТиповогоДокумента Тогда
			мТиповойДокумент = Документы.РегистрацияНаработок.СоздатьДокумент();
		КонецЕсли;
		
		ЗаполнитьОбщиеРеквизиты(ПризнакФормированияОбщегоТиповогоДокумента);
		
		ПериодОборотаВыработки = Новый Граница(мДокументУАТ.ДатаЗакрытия, ВидГраницы.Включая);
		
		мЗапросВыработка = Новый Запрос();
		мЗапросВыработка.УстановитьПараметр("ПутевойЛист",          мДокументУАТ.Ссылка);
		мЗапросВыработка.УстановитьПараметр("КонецПериода",         ПериодОборотаВыработки);
		мЗапросВыработка.УстановитьПараметр("ТранспортноеСредство", мДокументУАТ.Ссылка.ТранспортноеСредство);
		
		мЗапросВыработка.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	уатПутевойЛистВыработкаТС.ТС КАК ТС,
		|	уатПутевойЛистВыработкаТС.ПараметрВыработки КАК ПараметрВыработки
		|ПОМЕСТИТЬ ВТ_Док
		|ИЗ
		|	Документ.уатПутевойЛист.ВыработкаТС КАК уатПутевойЛистВыработкаТС
		|ГДЕ
		|	НЕ уатПутевойЛистВыработкаТС.ТС.уатОбъектЭксплуатации = ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка)
		|	И НЕ уатПутевойЛистВыработкаТС.ПараметрВыработки.ПоказательНаработки = ЗНАЧЕНИЕ(Справочник.ПоказателиНаработки.ПустаяСсылка)
		|	И уатПутевойЛистВыработкаТС.Ссылка = &ПутевойЛист
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Док.ТС.уатОбъектЭксплуатации КАК ОбъектЭксплуатации,
		|	ВТ_Док.ПараметрВыработки.ПоказательНаработки КАК ПоказательНаработки,
		|	ВЫБОР
		|		КОГДА ВТ_Док.ТС.уатНачальнаяНаработка = 0
		|			ТОГДА ВТ_Док.ТС.уатНачальныйПробег
		|		ИНАЧЕ ВТ_Док.ТС.уатНачальнаяНаработка
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ВТ_Док.ПараметрВыработки.Временный
		|			ТОГДА ЕСТЬNULL(уатВыработкаТСОбороты.КоличествоОборот / 3600, 0)
		|		ИНАЧЕ ЕСТЬNULL(уатВыработкаТСОбороты.КоличествоОборот, 0)
		|	КОНЕЦ КАК Количество
		|ИЗ
		|	ВТ_Док КАК ВТ_Док
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатВыработкаТС.Обороты(
		|				,
		|				&КонецПериода,
		|				,
		|				(ТС, ПараметрВыработки) В
		|					(ВЫБРАТЬ
		|						ВТ.ТС,
		|						ВТ.ПараметрВыработки
		|					ИЗ
		|						ВТ_Док КАК ВТ)) КАК уатВыработкаТСОбороты
		|		ПО ВТ_Док.ТС = уатВыработкаТСОбороты.ТС
		|			И ВТ_Док.ПараметрВыработки = уатВыработкаТСОбороты.ПараметрВыработки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	уатУстановленныеАгрегатыСрезПоследних.УзелОбъектаЭксплуатации КАК УзелОбъектаЭксплуатации,
		|	КлассыОбъектовЭксплуатацииРемонтныйЦикл.ПоказательНаработки КАК ПоказательНаработки
		|ИЗ
		|	РегистрСведений.уатУстановленныеАгрегаты.СрезПоследних(
		|			&КонецПериода,
		|			ТранспортноеСредство = &ТранспортноеСредство
		|				И (СостояниеАгрегата = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.УстановленоВРаботе)
		|					ИЛИ СостояниеАгрегата = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.УстановленоВЗапас))) КАК уатУстановленныеАгрегатыСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УзлыОбъектовЭксплуатации КАК УзлыОбъектовЭксплуатации
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассыОбъектовЭксплуатации.РемонтныйЦикл КАК КлассыОбъектовЭксплуатацииРемонтныйЦикл
		|			ПО УзлыОбъектовЭксплуатации.Класс = КлассыОбъектовЭксплуатацииРемонтныйЦикл.Ссылка
		|		ПО уатУстановленныеАгрегатыСрезПоследних.УзелОбъектаЭксплуатации = УзлыОбъектовЭксплуатации.Ссылка";
		
		РезЗапроса = мЗапросВыработка.ВыполнитьПакет();
		ТаблАгрегатов = РезЗапроса[2].Выгрузить();
		мВыборкаВыработка = РезЗапроса[1].Выбрать();
		Пока мВыборкаВыработка.Следующий() Цикл 
			НайдСтроки = мТиповойДокумент.Наработки.НайтиСтроки(
				Новый Структура("ОбъектЭксплуатации, ПоказательНаработки", 
					мВыборкаВыработка.ОбъектЭксплуатации, 
					мВыборкаВыработка.ПоказательНаработки
				)
			);
			
			Если НайдСтроки.Количество() Тогда 
				НоваяСтрока = НайдСтроки[0];
			Иначе 
				НоваяСтрока = мТиповойДокумент.Наработки.Добавить();
				НоваяСтрока.ОбъектЭксплуатации  = мВыборкаВыработка.ОбъектЭксплуатации;
				НоваяСтрока.ПоказательНаработки = мВыборкаВыработка.ПоказательНаработки;
			КонецЕсли;
			
			Если мВыборкаВыработка.Количество > НоваяСтрока.Значение Тогда 
				НоваяСтрока.Значение = мВыборкаВыработка.Количество;
			КонецЕсли;
			
			Для Каждого ТекАгрегат Из ТаблАгрегатов Цикл 
				Если Не ТекАгрегат.ПоказательНаработки = мВыборкаВыработка.ПоказательНаработки Тогда 
					Продолжить;
				КонецЕсли;
				
				НайдСтроки = мТиповойДокумент.Наработки.НайтиСтроки(
					Новый Структура("ОбъектЭксплуатации, ПоказательНаработки", 
						ТекАгрегат.УзелОбъектаЭксплуатации, 
						ТекАгрегат.ПоказательНаработки
					)
				);
				
				Если НайдСтроки.Количество() Тогда 
					НоваяСтрока = НайдСтроки[0];
				Иначе 
					НоваяСтрока = мТиповойДокумент.Наработки.Добавить();
					НоваяСтрока.ОбъектЭксплуатации  = ТекАгрегат.УзелОбъектаЭксплуатации;
					НоваяСтрока.ПоказательНаработки = ТекАгрегат.ПоказательНаработки;
				КонецЕсли;
				
				Если мВыборкаВыработка.Количество > НоваяСтрока.Значение Тогда 
					НоваяСтрока.Значение = мВыборкаВыработка.Количество;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если мТиповойДокумент.Наработки.Количество() > 0 Тогда
			мТиповойДокумент.Записать();
			ДобавитьНовуюЗапись();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработки Сливов ГСМ
// 
Процедура ОбработкаСливыГСМ()
	
	//Выгрузка СливГСМ на склад -> ПеремещениеТоваров / Оприходование
	Если мДокументУАТ.ВидОперации = Перечисления.уатВидыОперацийСливГСМ.НаСклад Тогда
		Если мСтруктураПараметров.ФормироватьОприход Тогда 
			мТиповойДокумент = Документы.ОприходованиеИзлишковТоваров.СоздатьДокумент();
			
			ЗаполнитьОбщиеРеквизиты();
			
			мТиповойДокумент.Склад = мДокументУАТ.АЗС.Контрагент_Склад;
			мТиповойДокумент.ВидЦены = Справочники.Склады.УчетныйВидЦены(мТиповойДокумент.Склад);
			мТиповойДокумент.Валюта = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета(
				Справочники.ВидыЦен.ПолучитьРеквизитыВидаЦены(мТиповойДокумент.ВидЦены).ВалютаЦены);
			
			СтруктураОбъектовНастроек = Новый Структура;
			СтруктураОбъектовНастроек.Вставить("Организация", мДокументУАТ.Организация);
			СтруктураОбъектовНастроек.Вставить("Подразделение", мДокументУАТ.Подразделение);
			мТиповойДокумент.СтатьяДоходов = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек,
				ПланыВидовХарактеристик.уатПраваИНастройки.СтатьяДоходовСливТЖОприходТоваров);
			
			НоваяСтрока = мТиповойДокумент.Товары.Добавить();
			НоваяСтрока.Номенклатура       = мДокументУАТ.ГСМ;
			НоваяСтрока.Количество         = мДокументУАТ.Количество;
			
			Попытка
				ЗаполнитьЦеныПоВидуЦенСервер(мТиповойДокумент);
			Исключение
			КонецПопытки;
						
			Попытка
				мТиповойДокумент.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрока, "Товары", Истина, Истина); //мДокументУАТ.ОтражатьВНалоговомУчете);
			Исключение
				Попытка
					мТиповойДокумент.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары", Истина, Истина); //мДокументУАТ.ОтражатьВНалоговомУчете);
				Исключение
				КонецПопытки;
			КонецПопытки;
			
		ИначеЕсли мСтруктураПараметров.ФормироватьПеремещение Тогда
			мТиповойДокумент = Документы.ПеремещениеТоваров.СоздатьДокумент();
			
			ЗаполнитьОбщиеРеквизиты();
			
			мТиповойДокумент.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным;
			
			СтруктураОбъектовНастроек = Новый Структура;
			СтруктураОбъектовНастроек.Вставить("Организация", мДокументУАТ.Организация);
			СтруктураОбъектовНастроек.Вставить("Подразделение", мДокументУАТ.Подразделение);
			мТиповойДокумент.СкладОтправитель = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.СкладДляПеремещенияГСМ);
			
			мТиповойДокумент.СкладПолучатель = мДокументУАТ.АЗС.Контрагент_Склад;
			
			НоваяСтрока = мТиповойДокумент.Товары.Добавить();
			НоваяСтрока.Номенклатура       = мДокументУАТ.ГСМ;
			НоваяСтрока.Упаковка           = мДокументУАТ.ГСМ.ЕдиницаИзмерения;
			НоваяСтрока.КоличествоУпаковок = мДокументУАТ.Количество;
			НоваяСтрока.Количество         = мДокументУАТ.Количество;
			
			Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Статус", мМетаданныеТиповогоДокумента) Тогда
				мТиповойДокумент.Статус = Перечисления.СтатусыПеремещенийТоваров.Принято;
			КонецЕсли;
			Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ХозяйственнаяОперация", мМетаданныеТиповогоДокумента) Тогда
				мТиповойДокумент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
			КонецЕсли;
			Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("СпособДоставки", мМетаданныеТиповогоДокумента) Тогда
				мТиповойДокумент.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
			КонецЕсли;
			
		Иначе
			Возврат;
			
		КонецЕсли;
		
	Иначе //Выгрузка СливГСМ на АЗС -> Возврат поставщику
		
		Если Не мСтруктураПараметров.ФормироватьВозвратПоставщику Тогда
			Возврат;
		КонецЕсли;	
		
		мТиповойДокумент = Документы.ВозвратТоваровПоставщику.СоздатьДокумент();
		
		ЗаполнитьОбщиеРеквизиты();
		
		мТиповойДокумент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровПоставщику;
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Статус", мМетаданныеТиповогоДокумента) Тогда
			мТиповойДокумент.Статус = Перечисления.СтатусыВозвратовТоваровПоставщикам.Отгружено;
		КонецЕсли;
		
		мТиповойДокумент.Контрагент = мДокументУАТ.АЗС.Контрагент_Склад;
		мТиповойДокумент.Партнер = мТиповойДокумент.Контрагент.Партнер;
		мТиповойДокумент.СпособКомпенсации = Перечисления.СпособыКомпенсацииВозвратовТоваров.ВернутьДенежныеСредства;
		
		мТиповойДокумент.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
		мТиповойДокумент.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
		
		мТиповойДокумент.ЗаполнитьУсловияЗакупокПоУмолчанию();
		
		мТиповойДокумент.Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(мТиповойДокумент, Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
		мТиповойДокумент.Валюта = мТиповойДокумент.Договор.ВалютаВзаиморасчетов;
		
		СтруктураОбъектовНастроек = Новый Структура;
		СтруктураОбъектовНастроек.Вставить("Организация", мДокументУАТ.Организация);
		мТиповойДокумент.Склад = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.СкладДляПеремещенияГСМ);
		
		Если Не ЗначениеЗаполнено(мТиповойДокумент.НалогообложениеНДС) Тогда
			мТиповойДокумент.НалогообложениеНДС = ЗначениеНастроекПовтИсп.НалогообложениеНДС(мТиповойДокумент.Организация, мТиповойДокумент.Склад, мТиповойДокумент.Договор, , мТиповойДокумент.Дата);
		КонецЕсли;
	
		НоваяСтрока = мТиповойДокумент.Товары.Добавить();
		НоваяСтрока.Номенклатура = мДокументУАТ.ГСМ;
		НоваяСтрока.Количество = мДокументУАТ.Количество;
		НоваяСтрока.КоличествоУпаковок = мДокументУАТ.Количество;
		//НоваяСтрока.Упаковка = мДокументУАТ.ЕдиницаИзмерения;
		
		СливГСМ_ВозвратТоваров_ЗаполнитьПоступленияИЦены(мТиповойДокумент);
		
		#Если Сервер Тогда
			СтруктураПересчетаСуммы = Новый Структура("ЦенаВключаетНДС", мТиповойДокумент.ЦенаВключаетНДС);
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", мТиповойДокумент.НалогообложениеНДС);
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			КэшированныеЗначения = Неопределено;
			уатИнтерфейсВзаимодействияСERPСервер.уатОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		#КонецЕсли
		
	КонецЕсли;
	
	мТиповойДокумент.Записать();
	ДобавитьНовуюЗапись();
	
КонецПроцедуры

Процедура СливГСМ_ВозвратТоваров_ЗаполнитьПоступленияИЦены(ВозвратТоваров)
	
	ТаблицаПроверяемыхТоваров = ВозвратТоваров.Товары.Выгрузить();
	ТабличнаяЧастьВозврата = ВозвратТоваров.Товары;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВозвратТоваровПоставщикуТовары.Номенклатура,
	|	ВозвратТоваровПоставщикуТовары.Характеристика,
	|	ВозвратТоваровПоставщикуТовары.Серия,
	|	ВозвратТоваровПоставщикуТовары.КоличествоУпаковок,
	|	ВозвратТоваровПоставщикуТовары.Упаковка,
	|	ВозвратТоваровПоставщикуТовары.Количество
	|ПОМЕСТИТЬ ЗаполняемыеТовары
	|ИЗ
	|	&ТаблицаТовары КАК ВозвратТоваровПоставщикуТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВозвратТоваровПоставщикуТовары.Номенклатура,
	|	ВозвратТоваровПоставщикуТовары.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПриобретениеТоваровУслугТовары.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ДокументыПоступления
	|ИЗ
	|	ЗаполняемыеТовары КАК ЗаполняемыеТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
	|		ПО ЗаполняемыеТовары.Номенклатура = ПриобретениеТоваровУслугТовары.Номенклатура
	|			И ЗаполняемыеТовары.Характеристика = ПриобретениеТоваровУслугТовары.Характеристика
	|ГДЕ
	|	ПриобретениеТоваровУслугТовары.Ссылка.Проведен
	|	И ПриобретениеТоваровУслугТовары.Ссылка.Контрагент = &Контрагент
	|	И ПриобретениеТоваровУслугТовары.Ссылка.Организация = &Организация
	|	И ПриобретениеТоваровУслугТовары.Ссылка.Соглашение = &Соглашение
	|	И ПриобретениеТоваровУслугТовары.Ссылка.НалогообложениеНДС = &НалогообложениеНДС
	|	И ПриобретениеТоваровУслугТовары.Ссылка.Партнер = &Партнер
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(КорректировкаПоступления.Дата) КАК Дата,
	|	ДокументыПоступления.Ссылка КАК СсылкаПоступления
	|ПОМЕСТИТЬ ДанныеКорректировки
	|ИЗ
	|	ДокументыПоступления КАК ДокументыПоступления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаПриобретения КАК КорректировкаПоступления
	|		ПО (КорректировкаПоступления.ДокументОснование = ДокументыПоступления.Ссылка)
	|ГДЕ
	|	КорректировкаПоступления.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыПоступления.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СсылкаПоступления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(КорректировкаПоступления.Ссылка) КАК Ссылка,
	|	МАКСИМУМ(КорректировкаПоступления.Ссылка.Дата) КАК Дата,
	|	КорректировкаПоступления.Ссылка.ДокументОснование КАК СсылкаПоступления
	|ПОМЕСТИТЬ ДанныеПоследнейКорректировки
	|ИЗ
	|	Документ.КорректировкаПриобретения КАК КорректировкаПоступления
	|ГДЕ
	|	(КорректировкаПоступления.Ссылка.ДокументОснование, КорректировкаПоступления.Ссылка.Дата) В
	|			(ВЫБРАТЬ
	|				ДанныеКорректировки.СсылкаПоступления КАК СсылкаПоступления,
	|				ДанныеКорректировки.Дата КАК Дата
	|			ИЗ
	|				ДанныеКорректировки)
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаПоступления.Ссылка.ДокументОснование
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	СсылкаПоступления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА ДанныеПоследнейКорректировки.Ссылка ЕСТЬ NULL 
	|			ТОГДА ДокументыПоступления.Ссылка
	|		ИНАЧЕ ДанныеПоследнейКорректировки.Ссылка
	|	КОНЕЦ КАК Ссылка
	|ПОМЕСТИТЬ СсылкиНаПоступления
	|ИЗ
	|	ДокументыПоступления КАК ДокументыПоступления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПоследнейКорректировки КАК ДанныеПоследнейКорректировки
	|		ПО ДокументыПоступления.Ссылка = ДанныеПоследнейКорректировки.СсылкаПоступления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КорректировкаПоступленияТовары.Номенклатура КАК Номенклатура,
	|	КорректировкаПоступленияТовары.Характеристика КАК Характеристика,
	|	КорректировкаПоступленияТовары.Серия КАК Серия,
	|	КорректировкаПоступленияТовары.КоличествоУпаковок,
	|	КорректировкаПоступленияТовары.Количество,
	|	КорректировкаПоступленияТовары.Цена,
	|	КорректировкаПоступленияТовары.Сумма,
	|	КорректировкаПоступленияТовары.Упаковка,
	|	0 КАК СуммаРучнойСкидки,
	|	КорректировкаПоступленияТовары.Ссылка.ДокументОснование КАК ДокументПоступления
	|ПОМЕСТИТЬ ДанныеПоступления
	|ИЗ
	|	СсылкиНаПоступления КАК СсылкиНаПоступления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаПриобретения.Товары КАК КорректировкаПоступленияТовары
	|		ПО (КорректировкаПоступленияТовары.Ссылка = СсылкиНаПоступления.Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриобретениеТоваровУслугТовары.Номенклатура,
	|	ПриобретениеТоваровУслугТовары.Характеристика,
	|	ПриобретениеТоваровУслугТовары.Серия,
	|	ПриобретениеТоваровУслугТовары.КоличествоУпаковок,
	|	ПриобретениеТоваровУслугТовары.Количество,
	|	ВЫБОР
	|		КОГДА ПриобретениеТоваровУслугТовары.СуммаРучнойСкидки = 0
	|				ИЛИ ПриобретениеТоваровУслугТовары.КоличествоУпаковок = 0
	|			ТОГДА ПриобретениеТоваровУслугТовары.Цена
	|		ИНАЧЕ ПриобретениеТоваровУслугТовары.Сумма / ПриобретениеТоваровУслугТовары.КоличествоУпаковок
	|	КОНЕЦ,
	|	ПриобретениеТоваровУслугТовары.Сумма,
	|	ПриобретениеТоваровУслугТовары.Упаковка,
	|	ПриобретениеТоваровУслугТовары.СуммаРучнойСкидки,
	|	ПриобретениеТоваровУслугТовары.Ссылка
	|ИЗ
	|	СсылкиНаПоступления КАК СсылкиНаПоступления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
	|		ПО (ПриобретениеТоваровУслугТовары.Ссылка = СсылкиНаПоступления.Ссылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Серия,
	|	ДокументПоступления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаПроверяемыеТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаПроверяемыеТовары.Характеристика КАК Характеристика,
	|	ТаблицаПроверяемыеТовары.Серия КАК Серия,
	|	СУММА(ТаблицаПроверяемыеТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(ТаблицаПроверяемыеТовары.Количество) КАК Количество,
	|	ТаблицаПроверяемыеТовары.ДокументПоступления КАК ДокументПоступления
	|ПОМЕСТИТЬ ДанныеДокументовВозврата
	|ИЗ
	|	ДокументыПоступления КАК ДокументыПоступления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику.Товары КАК ТаблицаПроверяемыеТовары
	|		ПО (ТаблицаПроверяемыеТовары.ДокументПоступления = ДокументыПоступления.Ссылка)
	|ГДЕ
	|	ТаблицаПроверяемыеТовары.Ссылка.Проведен
	|	И ТаблицаПроверяемыеТовары.Ссылка <> &ДокументВозврата
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПроверяемыеТовары.Номенклатура,
	|	ТаблицаПроверяемыеТовары.Характеристика,
	|	ТаблицаПроверяемыеТовары.Серия,
	|	ТаблицаПроверяемыеТовары.ДокументПоступления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Серия,
	|	ДокументПоступления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДанныеПоступления.Номенклатура,
	|	ДанныеПоступления.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0) КАК Количество,
	|	ДанныеПоступления.Характеристика,
	|	ДанныеПоступления.Серия,
	|	ВЫБОР
	|		КОГДА ДанныеПоступления.Упаковка = ЗаполняемыеТовары.Упаковка
	|			ТОГДА ВЫБОР
	|					КОГДА ДанныеПоступления.Упаковка ЕСТЬ NULL 
	|							ИЛИ ДанныеПоступления.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|						ТОГДА ДанныеПоступления.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0)
	|					ИНАЧЕ (ДанныеПоступления.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0))
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЗаполняемыеТовары.Упаковка ЕСТЬ NULL 
	|						ИЛИ ЗаполняемыеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|					ТОГДА ДанныеПоступления.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0)
	|				ИНАЧЕ (ДанныеПоступления.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0))
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА ДанныеПоступления.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0) = 0
	|			ТОГДА ДанныеПоступления.Цена
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ДанныеПоступления.Упаковка = ЗаполняемыеТовары.Упаковка
	|					ТОГДА ВЫБОР
	|							КОГДА ДанныеПоступления.Упаковка ЕСТЬ NULL 
	|									ИЛИ ДанныеПоступления.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|								ТОГДА ДанныеПоступления.Сумма / ДанныеПоступления.Количество
	|							ИНАЧЕ ДанныеПоступления.Сумма / (ДанныеПоступления.Количество)
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЗаполняемыеТовары.Упаковка ЕСТЬ NULL 
	|								ИЛИ ЗаполняемыеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|							ТОГДА ДанныеПоступления.Сумма / ДанныеПоступления.Количество
	|						ИНАЧЕ ДанныеПоступления.Сумма / (ДанныеПоступления.Количество)
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК Цена,
	|	ДанныеПоступления.ДокументПоступления
	|ИЗ
	|	ЗаполняемыеТовары КАК ЗаполняемыеТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПоступления КАК ДанныеПоступления
	|			ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокументовВозврата КАК ДанныеДокументовВозврата
	|			ПО ДанныеПоступления.ДокументПоступления = ДанныеДокументовВозврата.ДокументПоступления
	|				И ДанныеПоступления.Номенклатура = ДанныеДокументовВозврата.Номенклатура
	|				И ДанныеПоступления.Характеристика = ДанныеДокументовВозврата.Характеристика
	|				И ДанныеПоступления.Серия = ДанныеДокументовВозврата.Серия
	|		ПО ЗаполняемыеТовары.Номенклатура = ДанныеПоступления.Номенклатура
	|			И ДанныеПоступления.Характеристика = ЗаполняемыеТовары.Характеристика
	|			И ДанныеПоступления.Серия = ЗаполняемыеТовары.Серия
	|ГДЕ
	|	ДанныеПоступления.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0) > 0
	|	И ДанныеПоступления.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеПоступления.ДокументПоступления.Дата УБЫВ");
	
	Запрос.УстановитьПараметр("Партнер", ВозвратТоваров.Партнер);
	Запрос.УстановитьПараметр("Контрагент", ВозвратТоваров.Контрагент);
	Запрос.УстановитьПараметр("Организация", ВозвратТоваров.Организация);
	Запрос.УстановитьПараметр("Соглашение", ВозвратТоваров.Соглашение);
	Запрос.УстановитьПараметр("НалогообложениеНДС", ВозвратТоваров.НалогообложениеНДС);
	Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаПроверяемыхТоваров);
	Запрос.УстановитьПараметр("ДокументВозврата", ВозвратТоваров.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТовары Из ТабличнаяЧастьВозврата Цикл
		НайденныеСтроки = РезультатЗапроса.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, Серия",
														СтрокаТовары.Номенклатура, СтрокаТовары.Характеристика, СтрокаТовары.Серия));
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если СтрокаТовары.Количество <= НайденнаяСтрока.Количество Тогда
				СтрокаТовары.ДокументПоступления = НайденнаяСтрока.ДокументПоступления;
				СтрокаТовары.Цена = НайденнаяСтрока.Цена;
				НайденнаяСтрока.КоличествоУпаковок = НайденнаяСтрока.КоличествоУпаковок - СтрокаТовары.КоличествоУпаковок;
				НайденнаяСтрока.Количество = НайденнаяСтрока.Количество - СтрокаТовары.Количество;
				Если НайденнаяСтрока.Количество = 0 Тогда
					РезультатЗапроса.Удалить(НайденнаяСтрока);
				КонецЕсли;
			Иначе
				СтрокаТовары.ДокументПоступления = НайденнаяСтрока.ДокументПоступления;
				СтрокаТовары.Цена = НайденнаяСтрока.Цена;
				ДобавленнаяСтрока = ТабличнаяЧастьВозврата.Добавить();
				ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, СтрокаТовары);
				ДобавленнаяСтрока.КоличествоУпаковок = СтрокаТовары.КоличествоУпаковок -  НайденнаяСтрока.КоличествоУпаковок;
				ДобавленнаяСтрока.Количество = СтрокаТовары.Количество - НайденнаяСтрока.Количество;
				СтрокаТовары.КоличествоУпаковок = НайденнаяСтрока.КоличествоУпаковок;
				СтрокаТовары.Количество = НайденнаяСтрока.Количество;
				РезультатЗапроса.Удалить(НайденнаяСтрока);
			КонецЕсли;
			Прервать;
		КонецЦикла;
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТовары.ДокументПоступления = Документы.ПриобретениеТоваровУслуг.ПустаяСсылка();
			СтрокаТовары.Цена = 0;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПересчетаСуммы = уатИнтерфейсВзаимодействияСERPКлиентСервер.уатПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ВозвратТоваров);
	СтруктураПересчетаСуммы.Вставить("НДСпоСтавкам4и2", ВозвратТоваров.Контрагент.НДСпоСтавкам4и2);
	
	#Если Сервер Тогда
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСумму");
		уатИнтерфейсВзаимодействияСERPСервер.уатОбработатьТЧ(ТабличнаяЧастьВозврата, СтруктураДействий, Неопределено);
	#КонецЕсли
	
КонецПроцедуры

//Процедура СливГСМ_Оприходование_ЗаполнитьЦеныПоСебестоимостиСервер(Оприходование)
//	
//	СтруктураДействий = Новый Структура;
//	СтруктураДействий.Вставить("ПересчитатьСумму", "Количество");
//	
//	//ЗапросПредварительныхДанных = Новый Запрос;
//	//ЗапросПредварительныхДанных.Текст =  
//	//"ВЫБРАТЬ
//	//|	КОЛИЧЕСТВО(РасчетСебестоимостиТоваровОрганизации.Ссылка) КАК Количество
//	//|ИЗ
//	//|	Документ.РасчетСебестоимостиТоваров.Организации КАК РасчетСебестоимостиТоваровОрганизации
//	//|ГДЕ
//	//|	РасчетСебестоимостиТоваровОрганизации.Ссылка.Проведен
//	//|	И РасчетСебестоимостиТоваровОрганизации.Организация = &Организация";
//	//
//	//ЗапросПредварительныхДанных.УстановитьПараметр("Организация", Оприходование.Организация);
//	//ПредварительныеДанные = ЗапросПредварительныхДанных.Выполнить().Выбрать();
//	//
//	//Пока ПредварительныеДанные.Следующий() Цикл
//	//	Если ПредварительныеДанные.Количество = 0 Тогда
//	//		//ТекстСообщения = НСтр("ru = 'Не было произведено ни одного расчета себестоимости товаров по организации ""%Организация%"".'");
//	//		//ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%", Оприходование.Организация);
//	//		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
//	//		Возврат;
//	//	КонецЕсли;
//	//КонецЦикла;

//	#Если Сервер Тогда
//		уатИнтерфейсВзаимодействияСERPСервер.уатЗаполнитьЦеныПоСебестоимости(
//		Оприходование.Товары, // Табличная часть
//		, // Выделенные строки (заполнять во всех строках)
//		Новый Структура( // Параметры заполнения
//			"Дата, Организация, Склад, Валюта, ДругиеИменаКолонок",
//			Оприходование.Дата,
//			Оприходование.Организация,
//			Оприходование.Склад,
//			Оприходование.Валюта,
//			Новый Структура("Номенклатура, Характеристика", "Номенклатура", "Характеристика")
//		),
//		СтруктураДействий);
//	#КонецЕсли
//КонецПроцедуры

Функция ЗаполнитьЦеныПоВидуЦенСервер(Оприходование)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму", "Количество");
	
	КолонкиПоЗначению = Новый Структура("Упаковка", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	
	ПараметрыЗаполнения = Новый Структура;
	
	ПараметрыЗаполнения.Вставить("Дата", Оприходование.Дата);
	ПараметрыЗаполнения.Вставить("Валюта", Оприходование.Валюта);
	ПараметрыЗаполнения.Вставить("ВидЦены", Оприходование.ВидЦены);
	ПараметрыЗаполнения.Вставить("КолонкиПоЗначению", КолонкиПоЗначению);
	
	Возврат ПродажиСервер.ЗаполнитьЦены(
		Оприходование.Товары, // Табличная часть
		 , // Выделенные строки (заполнять во всех строках)
		ПараметрыЗаполнения,
		СтруктураДействий);
	
КонецФункции
	
// Процедура обработки Операций с ТЖ
// 
Процедура ОбработкаОперацииСТЖ()
	
	//Выгрузка СливТЖ -> ОприходованиеТоваров
	Если мДокументУАТ.ВидОперации = Перечисления.уатВидыОперацийСТехническимиЖидкостями.Слив Тогда
		Если Не мСтруктураПараметров.ФормироватьОприход Тогда
			Возврат;
		КонецЕсли;
		
		мТиповойДокумент = Документы.ОприходованиеИзлишковТоваров.СоздатьДокумент();
		
		ЗаполнитьОбщиеРеквизиты();
		
		мТиповойДокумент.Склад = мДокументУАТ.Склад;
		
		СтруктураОбъектовНастроек = Новый Структура;
		СтруктураОбъектовНастроек.Вставить("Организация", мДокументУАТ.Организация);
		СтруктураОбъектовНастроек.Вставить("Подразделение", мДокументУАТ.Подразделение);
		мТиповойДокумент.СтатьяДоходов = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек,
			ПланыВидовХарактеристик.уатПраваИНастройки.СтатьяДоходовСливТЖОприходТоваров);
			
		Для Каждого ТекСтрока Из мДокументУАТ.ТехническиеЖидкости Цикл
			НоваяСтрока = мТиповойДокумент.Товары.Добавить();
			НоваяСтрока.Номенклатура = ТекСтрока.Номенклатура;
			НоваяСтрока.Количество = ТекСтрока.Количество;
			
			// Заполняем реквизиты табличной части.
			Попытка
				мТиповойДокумент.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрока, "Товары", Истина, Истина); //мДокументУАТ.ОтражатьВНалоговомУчете);
			Исключение
				Попытка
					мТиповойДокумент.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары", Истина, Истина); //мДокументУАТ.ОтражатьВНалоговомУчете);
				Исключение
				КонецПопытки;
			КонецПопытки;
			
		КонецЦикла;
		
		//мТиповойДокумент.Товары.Свернуть("Номенклатура, Цена, СтавкаНДСВРознице", "Количество, Сумма, СтавкаНДСВРознице");
		
	Иначе //Выгрузка Долив по акту, Долив по ТО, Долив прочий -> Требование-накладная
		
		Если Не мСтруктураПараметров.ФормироватьТребНакл Тогда
			Возврат;
		КонецЕсли;	
		
		мТиповойДокумент = Документы.ВнутреннееПотреблениеТоваров.СоздатьДокумент();
		
		ЗаполнитьОбщиеРеквизиты();
		
		мТиповойДокумент.Склад = мДокументУАТ.Склад;
		
		мТиповойДокумент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Статус", мМетаданныеТиповогоДокумента) Тогда
			мТиповойДокумент.Статус = Перечисления.СтатусыВнутреннихПотребленийТоваров.Отгружено;
		КонецЕсли;
		
		СтруктураОбъектовНастроек = Новый Структура;
		СтруктураОбъектовНастроек.Вставить("Организация", мДокументУАТ.Организация);
		СтруктураОбъектовНастроек.Вставить("Подразделение", мДокументУАТ.Подразделение);
		СтатьяРасходов = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек,
			ПланыВидовХарактеристик.уатПраваИНастройки.СтатьяРасходовДоливТЖВнутрПотребление);
			
		Для Каждого ТекСтрока Из мДокументУАТ.ТехническиеЖидкости Цикл
			НоваяСтрока = мТиповойДокумент.Товары.Добавить();
			НоваяСтрока.Номенклатура       = ТекСтрока.Номенклатура;
			НоваяСтрока.КоличествоУпаковок = ТекСтрока.Количество;
			НоваяСтрока.Упаковка           = ТекСтрока.ЕдиницаИзмерения;
			НоваяСтрока.СтатьяРасходов     = СтатьяРасходов;
			
			#Если Сервер Тогда
				Попытка
					МодульОбработкиТЧ = ОбщегоНазначения.ОбщийМодуль("ОбработкаТабличнойЧастиСервер");
					МодульОбработкиТЧ.ОбработатьСтрокуТЧ(НоваяСтрока, Новый Структура("ПересчитатьКоличествоЕдиниц"), Неопределено);
				Исключение
				КонецПопытки;
			#КонецЕсли
		
		КонецЦикла;
	КонецЕсли;
	
	мТиповойДокумент.Записать();
	ДобавитьНовуюЗапись();
	
КонецПроцедуры

// Формирует движения по регистру 
//
// Параметры:
//  СтруктураПараметров - Структура передаваемых параметров
//
// Возвращаемое значение: 
//  Истина       - Выполнение функции завершено успешно 
//  Ложь         - при выполнении функции возникли ошибки
//
Функция ФормированиеТД(СтруктураПараметров) Экспорт
	
	Перем мФормироватьОбщийТД;
	
	тблСозданныеДокументы = Новый ТаблицаЗначений;
	тблСозданныеДокументы.Колонки.Добавить("ДокументУАТ");
	тблСозданныеДокументы.Колонки.Добавить("ТиповойДокумент");
	
	ВсеОК=Истина;
	мСтруктураПараметров = СтруктураПараметров;
	
	Если Не СтруктураПараметров.Свойство("ФормироватьОбщийТД", мФормироватьОбщийТД) Тогда
		мФормироватьОбщийТД = Ложь;
	КонецЕсли;	
	
	Если СтруктураПараметров.ФормироватьТолькоНовые И Не мФормироватьОбщийТД Тогда
		
		//ранее сформированные типовые документы удаляем только тогда, когда формируем ТД для все документов УАТ,
		//т.е. могут быть ранее сформированные.
		//Флаг "мФормироватьОбщийТД" означает, что ТД должны были быть все предварительно удалены перед вызовом этого режима.
		УдалитьТиповойДокумент();
		
	КонецЕсли;
	
	Если СтруктураПараметров.ДокументУАТ  = Документы.уатЗаправкаГСМ Тогда
		
		ОбработкаЗаправокГСМ();
		
	ИначеЕсли СтруктураПараметров.ДокументУАТ  = Документы.уатПутевойЛист Тогда
		
		ОбработкаПЛ(СтруктураПараметров.ФормироватьОбщийТД);
		
	ИначеЕсли СтруктураПараметров.ДокументУАТ  = Документы.уатТТД Тогда
		
		ОбработкаТТД(СтруктураПараметров.ФормироватьОбщийТД);
		
	ИначеЕсли СтруктураПараметров.ДокументУАТ  = Документы.уатЗаказГрузоотправителя Тогда
		
		ОбработкаЗаказовТС(СтруктураПараметров.ФормироватьОбщийТД);
		
	ИначеЕсли СтруктураПараметров.ДокументУАТ  = Документы.уатСливГСМ Тогда
		
		ОбработкаСливыГСМ();
		
	ИначеЕсли СтруктураПараметров.ДокументУАТ  = Документы.уатОперацииСТехническимиЖидкостями Тогда
		
		ОбработкаОперацииСТЖ();
		
	КонецЕсли;
	
	ОбновитьРегистрТиповыеДокументы();
	
	Возврат ВсеОК;
КонецФункции


//Добавляет новую запись в таблицу со значениями измерений мТиповойДокумент и мДокументУАТ
Процедура ДобавитьНовуюЗапись()
	НоваяСтрока = тблСозданныеДокументы.Добавить();
	НоваяСтрока.ДокументУАТ = мДокументУАТ;
	НоваяСтрока.ТиповойДокумент = мТиповойДокумент.Ссылка;
КонецПроцедуры

Процедура ОбновитьРегистрТиповыеДокументы()
	// запись движений
	Для Каждого ТекСтрока Из тблСозданныеДокументы Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ТиповойДокумент) И ЗначениеЗаполнено(ТекСтрока.ДокументУАТ) Тогда
			мМенеджерЗаписи = РегистрыСведений.уатТиповыеДокументы.СоздатьМенеджерЗаписи();
			мМенеджерЗаписи.ТиповойДокумент = ТекСтрока.ТиповойДокумент;
			мМенеджерЗаписи.ДокументУАТ = ТекСтрока.ДокументУАТ;
			Попытка
				мМенеджерЗаписи.Записать();
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


//ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
