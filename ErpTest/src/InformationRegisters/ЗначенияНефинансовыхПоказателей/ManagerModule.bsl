#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура формирования движений по регистру "Обороты бюджетов".
//
Процедура ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаЗначенияНефинансовыхПоказателей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗначенияНефинансовыхПоказателей;
	
	Если Отказ ИЛИ ТаблицаЗначенияНефинансовыхПоказателей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЛимитыРасходаДенежныхСредств = Движения.ЗначенияНефинансовыхПоказателей;
	ДвиженияЛимитыРасходаДенежныхСредств.Записывать = Истина;
	ДвиженияЛимитыРасходаДенежныхСредств.Загрузить(ТаблицаЗначенияНефинансовыхПоказателей);
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	( Сценарий = Значение(Справочник.Сценарии.ПустаяСсылка)
	|	ИЛИ ЗначениеРазрешено(Сценарий)
	|	) И ( Организация = Значение(Справочник.Организации.ПустаяСсылка)
	|	ИЛИ ЗначениеРазрешено(Организация)
	|	) И ( Подразделение = Значение(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	ИЛИ ЗначениеРазрешено(Подразделение)
	|	) И ЗначениеРазрешено(НефинансовыйПоказатель)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти 

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = Метаданные.РегистрыСведений.ЗначенияНефинансовыхПоказателей.ПолноеИмя();
	
	ПустыеЗначенияДляОбработки = БюджетированиеВызовСервера.ЗаменяемыеПустыеЗначенияАналитики();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
		|	Таблица.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.ЗначенияНефинансовыхПоказателей КАК Таблица
		|ГДЕ
		|	(Таблица.Аналитика1 В (&ПустыеЗначенияДляОбработки)
		|			ИЛИ Таблица.Аналитика2 В (&ПустыеЗначенияДляОбработки)
		|			ИЛИ Таблица.Аналитика3 В (&ПустыеЗначенияДляОбработки)
		|			ИЛИ Таблица.Аналитика4 В (&ПустыеЗначенияДляОбработки)
		|			ИЛИ Таблица.Аналитика5 В (&ПустыеЗначенияДляОбработки)
		|			ИЛИ Таблица.Аналитика6 В (&ПустыеЗначенияДляОбработки))";
	
	Запрос.УстановитьПараметр("ПустыеЗначенияДляОбработки", ПустыеЗначенияДляОбработки);
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.ЗначенияНефинансовыхПоказателей;
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	
	ПустыеЗначенияДляОбработки = БюджетированиеВызовСервера.ЗаменяемыеПустыеЗначенияАналитики();
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	ЗначениеЗамены = БюджетированиеКлиентСервер.ПустоеЗначениеАналитики();
	
	РеквизитыПоиска = Новый Массив;
	Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
		РеквизитыПоиска.Добавить("Аналитика" + Сч);
	КонецЦикла;
	
	ТипыДокументовКОбработке = ТипыДокументовКОбработке();
	
	Для Каждого ТипДокумента Из ТипыДокументовКОбработке Цикл
		
		ИмяДокумента = ТипДокумента.Значение;
		ПолноеИмяДокумента = "Документ." + ИмяДокумента;
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ДополнительныеПараметрыИсточникиДанных = Неопределено;
		
		Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуРегистраторовРегистраДляОбработки(Параметры.Очередь,
						ПолноеИмяДокумента,
						ПолноеИмяРегистра,
						МенеджерВременныхТаблиц,
						ДополнительныеПараметрыИсточникиДанных);
		
		Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗначенияНефинансовыхПоказателей.Регистратор КАК Регистратор
			|ИЗ
			|	&ВТДляОбработки КАК ЗначенияНефинансовыхПоказателей";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВТДляОбработки", Результат.ИмяВременнойТаблицы);
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			МетаданныеДокумента = Выборка.Регистратор.Метаданные();
			
			НачатьТранзакцию();
			
			Попытка
			
				Блокировка = Новый БлокировкаДанных;
				
				ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
				ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Регистратор);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				
				Блокировка.Заблокировать();
				
				НаборЗаписей = РегистрыСведений.ЗначенияНефинансовыхПоказателей.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
				НаборЗаписей.Прочитать();
				
				ОбъектИзменен = Ложь;
				
				Для каждого Запись Из НаборЗаписей Цикл
					
					БюджетированиеВызовСервера.ВыполнитьЗаменыЗначенийВОбъекте(Запись,
					                                                           РеквизитыПоиска,
					                                                           ПустыеЗначенияДляОбработки,
					                                                           ЗначениеЗамены,
					                                                           ОбъектИзменен);
					
				КонецЦикла; 
				
				Если ОбъектИзменен Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Регистратор, ДополнительныеПараметры);
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Ссылка% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Регистратор);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Предупреждение,
					МетаданныеРегистра,
					Выборка.Регистратор,
					ТекстСообщения);
				ВызватьИсключение;
			КонецПопытки;
		КонецЦикла;
		
		МенеджерВременныхТаблиц = Неопределено;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

Функция ТипыДокументовКОбработке()
	
	СписокТипов = Новый СписокЗначений;
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.ЗначенияНефинансовыхПоказателей;
	ТипыРегистраторов = МетаданныеРегистра.СтандартныеРеквизиты.Регистратор.Тип.Типы();
	
	Для каждого ТипРегистратора Из ТипыРегистраторов Цикл
		
		МетаданныеРегистратора = Метаданные.НайтиПоТипу(ТипРегистратора);
		СписокТипов.Добавить(МетаданныеРегистратора.Имя);
		
	КонецЦикла;
	
	Возврат СписокТипов;
	
КонецФункции

#КонецОбласти

#КонецЕсли
