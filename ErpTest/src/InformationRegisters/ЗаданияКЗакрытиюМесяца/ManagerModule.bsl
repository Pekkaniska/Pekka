#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает имя константы, хранящей номер задания для данного регистра.
//
// Возвращаемое значение:
//	Строка - Строковое предствление имени константы НомерЗаданияКЗакрытиюМесяца.
//
Функция ИмяКонстантыНомераЗадания() Экспорт
	
	Возврат Метаданные.Константы.НомерЗаданияКЗакрытиюМесяца.Имя;
	
КонецФункции

// Увеличивает номер задания в константе.
//
// Возвращаемое значение:
//	Число - Предыдущий номер задания из константы "Номер задания к закрытию месяца".
//
Функция УвеличитьНомерЗадания() Экспорт
	
	Возврат ЗакрытиеМесяцаСервер.УвеличитьНомерЗадания(ИмяКонстантыНомераЗадания());
	
КонецФункции

// Возвращает номер задания из константы.
//
// Возвращаемое значение:
//	Число - Номер текущего задания из константы "Номер задания к закрытию месяца".
//
Функция ПолучитьНомерЗадания() Экспорт
	
	Возврат ЗакрытиеМесяцаСервер.ТекущийНомерЗадания(ИмяКонстантыНомераЗадания());
	
КонецФункции

// Метод создает запись регистра с заданными параметрами.
//
// Параметры:
//	ПериодЗадания   - Дата - Начало периода, для которого необходимо зарегистрировать задание к расчету
//	ДокументЗадания - ДокументСсылка - документ регистратор создавший движение в зависимых регистрах
//	Организация - СправочникСсылка.Организации - организация, по которой необходим перерасчет
//  Операция - Перечисление.ОперацииЗакрытияМесяца - регламентная операция 
//  НомерЗадания - Число - номер задания; если не задано, то будет установлено значение из соответствующей константы.
//
Процедура СоздатьЗаписьРегистра(ПериодЗадания, ДокументЗадания = Неопределено, Организация = Неопределено,
				Операция = Неопределено, НомерЗадания = Неопределено) Экспорт
				
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(ДокументЗадания) И НЕ ЗначениеЗаполнено(Организация) Тогда
		
		// Создаем задание для каждой организации ИБ
		МассивОрганизаций = Справочники.Организации.ДоступныеОрганизации();
		
	Иначе
		
		МассивОрганизаций = Новый Массив;
		
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			// Попытаемся определить организацию по умолчанию.
			// Если не удастся, то будет вызвано платформенное исключение при записи.
			МассивОрганизаций.Добавить(Справочники.Организации.ОрганизацияПоУмолчанию());
		Иначе
			МассивОрганизаций.Добавить(Организация);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Операция) Тогда
		
		// Создадим задание для каждой возможной операции
		МассивОпераций = Новый Массив;
	
		Для ИндексОперации = 0 По Перечисления.ОперацииЗакрытияМесяца.Количество() - 1 Цикл
			МассивОпераций.Добавить(Перечисления.ОперацииЗакрытияМесяца.Получить(ИндексОперации));
		КонецЦикла;
		
	Иначе
		
		МассивОпераций = ОбщегоНазначенияУТКлиентСервер.Массив(Операция)
		
	КонецЕсли;
	
	// Запишем задания.
	НачатьТранзакцию();
	
	Попытка
		
		Если НомерЗадания = Неопределено Тогда
			НомерЗадания = ПолучитьНомерЗадания();
		КонецЕсли;
		
		Для Каждого ТекущаяОрганизация Из МассивОрганизаций Цикл
			
			Для Каждого ТекущаяОперация Из МассивОпераций Цикл
				
				Месяц = НачалоМесяца(ПериодЗадания);
				
				//++ НЕ УТ
				Если ТекущаяОперация = Перечисления.ОперацииЗакрытияМесяца.РасчетНалогаНаИмущество 
						И НЕ РасчетИмущественныхНалогов.УплачиваютсяАвансыПоНалогуНаИмущество(ТекущаяОрганизация, Месяц)
					
					ИЛИ ТекущаяОперация = Перечисления.ОперацииЗакрытияМесяца.РасчетЗемельногоНалога 
						И НЕ РасчетИмущественныхНалогов.УплачиваютсяАвансыПоЗемельномуНалогу(ТекущаяОрганизация, Месяц)
						
					ИЛИ ТекущаяОперация = Перечисления.ОперацииЗакрытияМесяца.РасчетТранспортногоНалога 
						И НЕ РасчетИмущественныхНалогов.УплачиваютсяАвансыПоТранспортномуНалогу(ТекущаяОрганизация, Месяц) Тогда
					
					Месяц = НачалоМесяца(КонецГода(ПериодЗадания));
				КонецЕсли;
				//-- НЕ УТ
				
				УчетНДСУП.ПередЗаписьюЗаданийКЗакрытиюМесяца(Месяц, ТекущаяОперация, ТекущаяОрганизация, ДокументЗадания);
				
				НаборЗаписей = РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьМенеджерЗаписи();
				НаборЗаписей.Месяц        = Месяц;
				НаборЗаписей.Операция     = ТекущаяОперация;
				НаборЗаписей.Организация  = ТекущаяОрганизация;
				НаборЗаписей.Документ     = ДокументЗадания;
				НаборЗаписей.НомерЗадания = НомерЗадания;
				НаборЗаписей.Записать(Истина);
				
			КонецЦикла;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
КонецПроцедуры

// Метод создает записи регистра с параметрами, полученными запросом.
//
// Параметры:
//	Выборка - ВыборкаИзРезультатаЗапроса - выборка, содержащая данные для формирования записей.
//  НомерЗадания - Число - номер задания; если не задано, то будет установлено значение из соответствующей константы.
//
Процедура СоздатьЗаписиРегистраПоДаннымВыборки(Выборка, НомерЗадания = Неопределено) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// В РИБ данный регистр обрабатывается только в главном узле.
		Возврат;
	КонецЕсли;
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		СтруктураПолей = Новый Структура("Месяц, Организация, Операция, Документ");
		
		Если НомерЗадания = Неопределено Тогда
			НомерЗадания = ПолучитьНомерЗадания();
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПолей, Выборка);
			
			СоздатьЗаписьРегистра(СтруктураПолей.Месяц, СтруктураПолей.Документ, СтруктураПолей.Организация, СтруктураПолей.Операция, НомерЗадания);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки    = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось сформировать задание к закрытию месяца за %1 в организации %2 по причине: %3'"),
			Выборка.Месяц,
			Выборка.Организация,
			ТекстОшибки);
			
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Закрытие месяца'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры

// В РИБ закрытие месяца выполняется только в главном узле, при этом из подчиненных узлов
// записи регистра отправляются в главный узел. При получении в ГУ записей от ПУ,
// они регистрируются с текущим номером задания ГУ. Когда в ПУ приходит квитанция о получении
// данных в ГУ, в ПУ записи регистра снимаются с регистрации к обмену и удаляются, т.к. штатными
// средствами (после закрытия месяца, либо при получении удаления от ГУ) в ПУ они не могут быть удалены.
//
Процедура УдалитьЗаписиВПодчиненномУзлеРИБ() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаданияКЗакрытиюМесяца.Месяц КАК Месяц,
		|	ЗаданияКЗакрытиюМесяца.Операция КАК Операция,
		|	ЗаданияКЗакрытиюМесяца.Организация КАК Организация,
		|	ЗаданияКЗакрытиюМесяца.Документ КАК Документ,
		|	ЗаданияКЗакрытиюМесяца.НомерЗадания КАК НомерЗадания
		|ИЗ
		|	РегистрСведений.ЗаданияКЗакрытиюМесяца КАК ЗаданияКЗакрытиюМесяца
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКЗакрытиюМесяца.Изменения КАК ЗаданияКЗакрытиюМесяцаИзменения
		|		ПО ЗаданияКЗакрытиюМесяца.Месяц = ЗаданияКЗакрытиюМесяцаИзменения.Месяц
		|			И ЗаданияКЗакрытиюМесяца.Организация = ЗаданияКЗакрытиюМесяцаИзменения.Организация
		|			И ЗаданияКЗакрытиюМесяца.Операция = ЗаданияКЗакрытиюМесяцаИзменения.Операция
		|			И ЗаданияКЗакрытиюМесяца.Документ = ЗаданияКЗакрытиюМесяцаИзменения.Документ
		|			И ЗаданияКЗакрытиюМесяца.НомерЗадания = ЗаданияКЗакрытиюМесяцаИзменения.НомерЗадания
		|ГДЕ
		|	ЗаданияКЗакрытиюМесяцаИзменения.Месяц ЕСТЬ NULL";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаЗаписей = РезультатЗапроса.Выгрузить();
	Для Сч = 1-ТаблицаЗаписей.Количество() По 0 Цикл
		Выборка = ТаблицаЗаписей[-Сч];
		НаборЗаписей = РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Месяц.Установить(Выборка.Месяц);
		НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
		НаборЗаписей.Отбор.Операция.Установить(Выборка.Операция);
		НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ);
		НаборЗаписей.Отбор.НомерЗадания.Установить(Выборка.НомерЗадания);
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Формирует задания на следующий период.
//
// Параметры:
//  ВременныеТаблицы	- МенеджерВременныхТаблиц - Содержит таблицу КэшГраниц.
//  СледующийМесяц		- Дата - Дата, начиная с которой нужно сформировать задания.
//
Процедура СформироватьЗаданияНаСледующийПериод(ВременныеТаблицы, СледующийМесяц) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Задания.Операция,
	|	Задания.Организация,
	|	МАКСИМУМ(Задания.НомерЗадания) КАК НомерЗадания
	|ИЗ
	|	КэшГраниц КАК Задания
	|
	|СГРУППИРОВАТЬ ПО
	|	Задания.Операция,
	|	Задания.Организация";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		СледующийПериод = СледующийМесяц;
		
		//++ НЕ УТ
		
		Если Выборка.Операция = Перечисления.ОперацииЗакрытияМесяца.РасчетНалогаНаИмущество Тогда
			
			СледующийПериод = ВнеоборотныеАктивы.ПериодРасчетаНалогаНаИмущество(Выборка.Организация, СледующийМесяц);
			
		ИначеЕсли Выборка.Операция = Перечисления.ОперацииЗакрытияМесяца.РасчетЗемельногоНалога Тогда
			
			СледующийПериод = ВнеоборотныеАктивы.ПериодРасчетаЗемельногоНалога(Выборка.Организация, СледующийМесяц);
			
		ИначеЕсли Выборка.Операция = Перечисления.ОперацииЗакрытияМесяца.РасчетТранспортногоНалога Тогда
			
			СледующийПериод = ВнеоборотныеАктивы.ПериодРасчетаТранспортногоНалога(Выборка.Организация, СледующийМесяц);
			
		ИначеЕсли Выборка.Операция = Перечисления.ОперацииЗакрытияМесяца.ПризнаниеВНалоговомУчетеЛизинговыхПлатежей Тогда
			
			СледующийПериод = ВнеоборотныеАктивы.ПериодПризнанияВНУЛизинговыхПлатежей(Выборка.Организация, СледующийМесяц);
			
		ИначеЕсли Выборка.Операция = Перечисления.ОперацииЗакрытияМесяца.ФормированиеФинансовогоРезультата Тогда
			
			СледующийПериод = НачалоМесяца(КонецГода(СледующийМесяц));
			
		КонецЕсли;
		
		//-- НЕ УТ
		
		Если ЗначениеЗаполнено(СледующийПериод) Тогда
			НоваяЗапись = РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			НоваяЗапись.Месяц = СледующийПериод;
			НоваяЗапись.Записать(Истина);
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет описания регистров для их подключения к механизму дат запрета изменения.
//
// Параметры:
//  Данные - ТаблицаЗначений - см. описание в механизме БСП.
//
Процедура ОписаниеРегистровДляКонтроляДатЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ДвиженияДенежныеСредстваДоходыРасходы", "Период", "РегламентныеОперации", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ДвиженияДоходыРасходыПрочиеАктивыПассивы", "Период", "РегламентныеОперации", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ДенежныеСредстваБезналичные", "Период", "РегламентныеОперации", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ДенежныеСредстваВКассахККМ", "Период", "РегламентныеОперации", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ДенежныеСредстваВПути", "Период", "РегламентныеОперации", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ДенежныеСредстваНаличные", "Период", "РегламентныеОперации", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц", "Период", "РегламентныеОперации", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ПартииПрочихРасходов", "Период", "РегламентныеОперации", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.РасчетыПоФинансовымИнструментам", "Период", "РегламентныеОперации");
	
	//++ НЕ УТ
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ВыпускПродукции", "Период", "РегламентныеОперации", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ДенежныеДокументы", "Период", "РегламентныеОперации", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.КнигаУчетаДоходовИРасходов", "Период", "РегламентныеОперации", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.РасходыПриУСН", "Период", "РегламентныеОперации", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.РасходыПриУСНМатериалы", "Период", "РегламентныеОперации", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.РасходыПриУСНОСиНМА", "Период", "РегламентныеОперации", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.РасходыПриУСНТовары", "Период", "РегламентныеОперации", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.СостоянияНМАОрганизаций", "Период", "РегламентныеОперации", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.СостоянияОСОрганизаций", "Период", "РегламентныеОперации", "Организация");
	//-- НЕ УТ
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	//++ НЕ УТ
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗаданияКЗакрытиюМесяца.Месяц КАК Месяц,
	|	ЗаданияКЗакрытиюМесяца.Операция КАК Операция,
	|	ЗаданияКЗакрытиюМесяца.Организация КАК Организация,
	|	ЗаданияКЗакрытиюМесяца.НомерЗадания КАК НомерЗадания,
	|	ЗаданияКЗакрытиюМесяца.Документ КАК Документ
	|ИЗ
	|	РегистрСведений.ЗаданияКЗакрытиюМесяца КАК ЗаданияКЗакрытиюМесяца
	|ГДЕ
	|	ЗаданияКЗакрытиюМесяца.Операция В (
	|		ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.НачислениеАмортизацииОС),
	|		ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.УдалитьАмортизацияОС),
	|		ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.НачислениеАмортизацииНМА))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ДополнительныеПараметрыОтметкиОбработки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметрыОтметкиОбработки.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметрыОтметкиОбработки.ПолноеИмяРегистра = "РегистрСведений.ЗаданияКЗакрытиюМесяца";
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Результат, ДополнительныеПараметрыОтметкиОбработки);
	//-- НЕ УТ
	
	// В УТ пустой обработчик
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "РегистрСведений.ЗаданияКЗакрытиюМесяца";
	
	//++ НЕ УТ
	ДополнительныеПараметрыОтметкиОбработки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметрыОтметкиОбработки.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметрыОтметкиОбработки.ПолноеИмяРегистра = "РегистрСведений.ЗаданияКЗакрытиюМесяца";
	
	ВыборкаПоИзмерениям = ОбновлениеИнформационнойБазы.ВыбратьИзмеренияНезависимогоРегистраСведенийДляОбработки(
							Параметры.Очередь, "РегистрСведений.ЗаданияКЗакрытиюМесяца");
							
	Пока ВыборкаПоИзмерениям.Следующий() Цикл
		
		НачатьТранзакцию();
		
 		Попытка
			
 			Блокировка = Новый БлокировкаДанных;
 			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗаданияКЗакрытиюМесяца");
 			ЭлементБлокировки.УстановитьЗначение("Месяц", ВыборкаПоИзмерениям.Месяц);
 			ЭлементБлокировки.УстановитьЗначение("Операция", ВыборкаПоИзмерениям.Операция);
 			ЭлементБлокировки.УстановитьЗначение("Организация", ВыборкаПоИзмерениям.Организация);
 			ЭлементБлокировки.УстановитьЗначение("НомерЗадания", ВыборкаПоИзмерениям.НомерЗадания);
 			ЭлементБлокировки.УстановитьЗначение("Документ", ВыборкаПоИзмерениям.Документ);
 			Блокировка.Заблокировать();
			
			РегистрИсточник = РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьНаборЗаписей();
			РегистрИсточник.Отбор.Месяц.Установить(ВыборкаПоИзмерениям.Месяц); 
			РегистрИсточник.Отбор.Операция.Установить(ВыборкаПоИзмерениям.Операция); 
			РегистрИсточник.Отбор.Организация.Установить(ВыборкаПоИзмерениям.Организация); 
			РегистрИсточник.Отбор.НомерЗадания.Установить(ВыборкаПоИзмерениям.НомерЗадания); 
			РегистрИсточник.Отбор.Документ.Установить(ВыборкаПоИзмерениям.Документ); 
			РегистрИсточник.Прочитать();
			
			Если РегистрИсточник.Количество() <> 0
				И (ВыборкаПоИзмерениям.Операция = Перечисления.ОперацииЗакрытияМесяца.НачислениеАмортизацииОС
				ИЛИ ВыборкаПоИзмерениям.Операция = Перечисления.ОперацииЗакрытияМесяца.УдалитьАмортизацияОС
				ИЛИ ВыборкаПоИзмерениям.Операция = Перечисления.ОперацииЗакрытияМесяца.НачислениеАмортизацииНМА) Тогда
				
				// Перенос данных в новые регистры.
				Если ВыборкаПоИзмерениям.Операция = Перечисления.ОперацииЗакрытияМесяца.НачислениеАмортизацииНМА Тогда
					МетаданныеПриемника = Метаданные.РегистрыСведений.ЗаданияКРасчетуАмортизацииНМА;
				Иначе
					МетаданныеПриемника = Метаданные.РегистрыСведений.ЗаданияКРасчетуАмортизацииОС;
				КонецЕсли; 
				
				ДокументПрименика = МетаданныеПриемника.Измерения.Документ.Тип.ПривестиЗначение(ВыборкаПоИзмерениям.Документ);
				РегистрПриемник   = РегистрыСведений[МетаданныеПриемника.Имя].СоздатьНаборЗаписей();
				
				РегистрПриемник.Отбор.Месяц.Установить(ВыборкаПоИзмерениям.Месяц); 
				РегистрПриемник.Отбор.Организация.Установить(ВыборкаПоИзмерениям.Организация); 
				РегистрПриемник.Отбор.НомерПакета.Установить(0); 
				РегистрПриемник.Отбор.НомерЗадания.Установить(ВыборкаПоИзмерениям.НомерЗадания); 
				РегистрПриемник.Отбор.Документ.Установить(ДокументПрименика); 
				
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РегистрИсточник, РегистрПриемник);
				
	 			ОбновлениеИнформационнойБазы.ЗаписатьДанные(РегистрПриемник);
				
				// Удаление данных из старого регистра.
				РегистрИсточник.Очистить();
	 			ОбновлениеИнформационнойБазы.ЗаписатьДанные(РегистрИсточник);
				
			ИначеЕсли РегистрИсточник.Количество() = 0
				И (ВыборкаПоИзмерениям.Операция = Перечисления.ОперацииЗакрытияМесяца.ФормированиеРезервовПоСомнительнымДолгам
				ИЛИ ВыборкаПоИзмерениям.Операция = Перечисления.ОперацииЗакрытияМесяца.ФормированиеФинансовогоРезультата) Тогда
				
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(РегистрИсточник);
				
			Иначе	
				
				ТаблицаРегистра = РегистрИсточник.ВыгрузитьКолонки();
				ЗаполнитьЗначенияСвойств(ТаблицаРегистра.Добавить(), ВыборкаПоИзмерениям);
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ТаблицаРегистра, ДополнительныеПараметрыОтметкиОбработки);
				
			КонецЕсли;
	
			ЗафиксироватьТранзакцию();
			
 		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать регистр ЗаданияКЗакрытиюМесяца по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									Метаданные.РегистрыСведений.ЗаданияКЗакрытиюМесяца,,
									ТекстСообщения);
									
 		КонецПопытки;
	
	КонецЦикла;
	
	//-- НЕ УТ
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
