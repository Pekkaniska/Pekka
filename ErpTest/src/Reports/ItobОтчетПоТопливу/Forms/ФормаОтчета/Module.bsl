
#Область ПроцедурыИФункцииОбщегоНазначения

// Процедура формирует отчет.
//
&НаСервере
Процедура СформироватьОтчет()
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");	
	
	Если ОтчетОбъект.ПроверитьЗаполнение() Тогда
		
		Результат.Очистить();
		ОтчетОбъект.СкомпоноватьРезультат(Результат);
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ОтчетОбъект, "Отчет");
	
	Результат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	Результат.АвтоМасштаб = Истина;
	Результат.ИмяПараметровПечати = "Отчет_ItobОтчетПоТопливу_ИмяПараметровПечати";
	
КонецПроцедуры // СформироватьОтчет()

// Функция возвращает калибровочный график, соответствующий объекту
//
&НаСервере
Функция ПолучитьКалибровочныйГрафикОбъекта()
	
	ОтчетПоТопливу = РеквизитФормыВЗначение("Отчет");
	ПараметрыДатчикаТоплива = РеквизитФормыВЗначение("Отчет").ПолучитьПараметрыДатчикаТоплива
	                                    (ОтчетПоТопливу.Объект, ОтчетПоТопливу.ДатчикТоплива);
	Возврат ПараметрыДатчикаТоплива.КалибровочныйГрафик;

КонецФункции // ПолучитьКалибровочныйГрафикОбъект()

#КонецОбласти 

#Область ОбработчикиСобытийФормы

// Обработчик события "при создании на сервере" формы
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	СписокПараметров = Неопределено;
	
	Если Параметры.Свойство("СписокПараметров", СписокПараметров) Тогда
		
		
		СписокПараметров = Параметры.СписокПараметров;
		
		ОтчетПоТопливу = РеквизитФормыВЗначение("Отчет");	
		Для каждого ЭлСписка Из СписокПараметров Цикл
			
			ОтчетПоТопливу[ЭлСписка.Представление] = ЭлСписка.Значение; 
		
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(ОтчетПоТопливу, "Отчет");
		
		ЗаполнитьСписокДатчиков();
     		
		СформироватьОтчет();
		
	КонецЕсли; 	
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события "ПриОткрытии" формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Отчет.НачПериода) И НЕ ЗначениеЗаполнено(Отчет.КонПериода) Тогда
		
		Отчет.НачПериода = ItobОбщегоНазначенияСервер.ПолучитьДатуВремяНачалаОтчетов();
		Отчет.КонПериода = Отчет.НачПериода + 24*3600;
		
	КонецЕсли;
	
	Отчет.Метод = "Пробег";			
		
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик команды "УстановитьИнтервал".
//
&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	ItobОбщегоНазначенияКлиент.УстановитьИнтервал(Отчет, Отчет.НачПериода, Отчет.КонПериода)
КонецПроцедуры // УстановитьИнтервал()

// Процедура - обработчик команды "Сформировать".
//
&НаКлиенте
Процедура Сформировать(Команда)
	
	СформироватьОтчет();
		
КонецПроцедуры

// Процедура - обработчик команды "ОткрытьКалибровочныйГрафик".
//
&НаКлиенте
Процедура ОткрытьКалибровочныйГрафик(Команда)
	
	Если ЗначениеЗаполнено(Отчет.Объект) 
		И ЗначениеЗаполнено(Отчет.ДатчикТоплива) Тогда
		
		КалибровочныйГрафик = ПолучитьКалибровочныйГрафикОбъекта();
		Если ЗначениеЗаполнено(КалибровочныйГрафик) Тогда
			ПараметрыОткрытия = Новый Структура("Ключ", КалибровочныйГрафик);
			ОткрытьФорму("Справочник.ItobКалибровочныеГрафики.Форма.ФормаЭлемента", ПараметрыОткрытия,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		КонецЕсли;
	
	КонецЕсли;	
	
КонецПроцедуры

// Процедура - обработчик события "Регулирование" поля "НачПериода" таблицы.
//
&НаКлиенте
Процедура НачПериодаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	Отчет.НачПериода = Отчет.НачПериода + Направление*24*3600;	
	
КонецПроцедуры // НачПериодаРегулирование()

// Процедура - обработчик события "Регулирование" поля "КонПериода" таблицы.
//
&НаКлиенте
Процедура КонПериодаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Отчет.КонПериода = Отчет.КонПериода + Направление*24*3600;
		
КонецПроцедуры // КонПериодаРегулирование()

// Процедура - обработчик события "ОбработкаВыбора" поля "КонПериода" таблицы.
//
&НаКлиенте
Процедура КонПериодаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВыбранноеЗначение = КонецДня(ВыбранноеЗначение);
	Отчет.КонПериода = ВыбранноеЗначение;
	
	Элемент.УстановитьГраницыВыделения(1,СтрДлина(Элемент.ТекстРедактирования));
	Элемент.ВыделенныйТекст = Строка(ВыбранноеЗначение);
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // КонПериодаОбработкаВыбора()

//
//
&НаКлиенте
Процедура ДатчикТопливаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Отчет.Объект = Неопределено 
		ИЛИ Отчет.Объект.Пустая() Тогда
		
	    Возврат;
	
	КонецЕсли;	
	
	
	Если Элемент.СписокВыбора.Количество() = 0 И (НЕ Терминал.Пустая()) Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Нет доступных датчиков топлива'"),ПолучитьНавигационнуюСсылку(Терминал),
			НСтр("ru = 'Для терминала объекта'")+" """+Отчет.Объект+""" "+НСтр("ru = 'не определен датчик топлива!'"));
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийТабличногоДокумента

// Обработчик события ОбработкаРасшифровки элемента ПолеТабличногоДокумента.
//
&НаКлиенте
Процедура ПолеТабличногоДокументаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
	
		СтандартнаяОбработка = Ложь;
		
		Действие = Неопределено;
		Если Расшифровка.Свойство("Действие", Действие) Тогда
			Если Действие = "ОткрытьМастерНастройкиCsmSvc" Тогда
				
				ОткрытьФорму("Обработка.ItobМастерНастройкиСервисаCsmSvc.Форма");
				Возврат;
			
			КонецЕсли;			
		
		КонецЕсли;		
	
		Оповестить("РежимЗаправокСливов", Расшифровка);
	    				
	КонецЕсли;
	
КонецПроцедуры // ПолеТабличногоДокументаОбработкаРасшифровки()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбъектПриИзменении(Элемент)
	
	// Заполним список датчиков	
	ЗаполнитьСписокДатчиков();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДатчиков()
	
	Элементы.ДатчикТоплива.СписокВыбора.Очистить();
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	
	ТекущийОбъект = ОтчетОбъект.Объект;
	Терминал = ItobОперативныйМониторинг.ПолучитьПривязанныйТерминал(ТекущийОбъект,НачалоДня(ОтчетОбъект.НачПериода)-1);
	
	Если НЕ ЗначениеЗаполнено(Терминал) Тогда
		Возврат;
	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Терминал", Терминал);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ItobТерминалыДатчики.Назначение,
	               |	ItobТерминалыДатчики.Назначение.Представление,
	               |	NULL КАК Ссылка
	               |ИЗ
	               |	Справочник.ItobТерминалы.Датчики КАК ItobТерминалыДатчики
	               |ГДЕ
	               |	ItobТерминалыДатчики.Ссылка = &Терминал
	               |	И ItobТерминалыДатчики.Назначение = ЗНАЧЕНИЕ(Справочник.ItobНазначенияДатчиков.Топливо)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ItobТерминалыДатчики.Назначение,
	               |	ItobТерминалыДатчики.Назначение.Представление
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ItobТерминалыДатчики.Назначение,
	               |	ItobТерминалыДатчики.Назначение.Представление,
	               |	NULL
	               |ИЗ
	               |	Справочник.ItobТерминалы.Датчики КАК ItobТерминалыДатчики
	               |ГДЕ
	               |	ItobТерминалыДатчики.Ссылка = &Терминал
	               |	И ItobТерминалыДатчики.Назначение.ДатчикТоплива
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ItobТерминалыДатчики.Назначение,
	               |	ItobТерминалыДатчики.Назначение.Представление";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Элементы.ДатчикТоплива.СписокВыбора.Добавить(Выборка.Назначение, Выборка.НазначениеПредставление);
		
	КонецЦикла;
	
	Если Элементы.ДатчикТоплива.СписокВыбора.Количество() > 0 Тогда
		Если Элементы.ДатчикТоплива.СписокВыбора.Количество() > 1 Тогда
		  Элементы.ДатчикТоплива.СписокВыбора.Добавить("ПоВсем", НСтр("ru = 'По всем'"));			
		КонецЕсли;
		ОтчетОбъект.ДатчикТоплива = Элементы.ДатчикТоплива.СписокВыбора[0].Значение;	
		ЗначениеВРеквизитФормы(ОтчетОбъект, "Отчет");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 
