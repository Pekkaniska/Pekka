
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура строит диаграмму ганта. Используется и для построения на форме и для вывода на печать     
&НаСервере
Процедура ПостроитьДиаграммуГанта(ДеревоРезультата, Диаграмма)
	
	Для Каждого ТекСостояние Из ДеревоРезультата.Строки Цикл 
		СерияСостояние = Диаграмма.УстановитьСерию(ТекСостояние.Состояние);
		СерияСостояние.Расшифровка = ТекСостояние.Состояние;
		Для Каждого ТекТС Из ТекСостояние.Строки Цикл 
			ТочкаТС = Диаграмма.УстановитьТочку(ТекТС.ТС);
			ТочкаТС.Текст	= уатОбщегоНазначения.уатПредставлениеТС(ТекТС.ТС, уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.ТекущийПользователь(), "ОсновнаяОрганизация"));
			ТочкаТС.Расшифровка = ТекТС.ТС;
			Для Каждого ТекПериод Из ТекТС.Строки Цикл 
				ЗначениеПериод       = Диаграмма.ПолучитьЗначение(ТочкаТС, СерияСостояние);
				Интервал             = ЗначениеПериод.Добавить();
				Интервал.Начало      = ТекПериод.ПериодНачало;
				Интервал.Конец       = ТекПериод.ПериодОкончание;
				Интервал.Текст       = "" + ТекПериод.ПериодНачало + " - " + ТекПериод.ПериодОкончание;
				Интервал.Расшифровка = ТекПериод.Основание;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Диаграмма.ПоказатьУровеньТочек(1);
	ДиаграммаГанта.ОбластьПостроения.Заголовок = "ТС";
	
КонецПроцедуры

&НаСервере
Процедура ПечатьНаСервере(ДокументВыводаДиаграммы)  
	
	ДокументВыводаДиаграммы = Новый ТабличныйДокумент(); 
	ОблДиаграммы = Отчеты.уатДиаграммаСостояниеТС.ПолучитьМакет("ДиаграммаГанта").ПолучитьОбласть("ОбластьДиаграммыГанта");
	
	Результат = СформироватьКоллекцию();
	
	мДатаКон = ?(ДатаКон = '00010101', '39991231', КонецДня(ДатаКон));
	
	// Устанавливаем заголовок диаграммы
	ОблДиаграммы.Область(1,2,1,2).Текст = "Состояние ТС за период " + ПредставлениеПериода(ДатаНач, мДатаКон);
	ДокументВыводаДиаграммы.Вывести(ОблДиаграммы);
	
	ДиаграммаПечати = ДокументВыводаДиаграммы.Рисунки.ДиаграммаГанта.Объект;
	
	// Копируем свойства диаграммы
	ЗаполнитьЗначенияСвойств(ДиаграммаПечати, ДиаграммаГанта, , "Обновление");
	ДиаграммаПечати.ОтображатьЗаголовок = Ложь;
	
	// Установим полный интервал
	Если НЕ ДиаграммаПечати.АвтоОпределениеПолногоИнтервала Тогда
		ДиаграммаПечати.УстановитьПолныйИнтервал(ДиаграммаГанта.НачалоПолногоИнтервала, ДиаграммаГанта.КонецПолногоИнтервала);
	КонецЕсли;
	ПостроитьДиаграммуГанта(Результат, ДиаграммаПечати);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНаСервере()
	
	Диаграмма = ЭтаФорма.ДиаграммаГанта;
	Диаграмма.Очистить();
	Диаграмма.АвтоОпределениеПолногоИнтервала = Истина;
	
	Результат = СформироватьКоллекцию();
	
	Если Результат.Строки.Количество() = 0 Тогда
		Диаграмма.АвтоОпределениеПолногоИнтервала = Ложь;
		Диаграмма.УстановитьПолныйИнтервал(ТекущаяДата(), ТекущаяДата());
		Возврат;
	КонецЕсли;
	
	ПостроитьДиаграммуГанта(Результат, Диаграмма);
	
КонецПроцедуры

&НаСервере
Функция СформироватьКоллекцию()
	
	РезультатПроверки = Новый ДеревоЗначений;
	
	Настройки = НастройкиКомпоновки.ПолучитьНастройки();
	
	Для Каждого ТекПараметр Из Настройки.ПараметрыДанных.Элементы Цикл 
		Если ТекПараметр.Параметр = Новый ПараметрКомпоновкиДанных("ДатаНач") Тогда 
			ТекПараметр.Значение = ДатаНач;
			ТекПараметр.Использование = Истина;
		КонецЕсли;
		Если ТекПараметр.Параметр = Новый ПараметрКомпоновкиДанных("ДатаКон") Тогда 
			ТекПараметр.Значение = ?(ДатаКон = '00010101', '39991231', КонецДня(ДатаКон));
			ТекПараметр.Использование = Истина;
		КонецЕсли;
		Если ТекПараметр.Параметр = Новый ПараметрКомпоновкиДанных("ОтображатьВсеВидыТС") Тогда 
			ТекПараметр.Значение = Булево(ПереключательОтображатьПрицепы);
			ТекПараметр.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	
	СхемаКомпоновкиДанных = Отчеты.уатДиаграммаСостояниеТС.ПолучитьМакет("ИсточникНастроекОтбораКомпоновщика");
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных();
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
	ПроцессорВывода.УстановитьОбъект(РезультатПроверки);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ПолучитьУстановитьНастройки();
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаСервере
Процедура ПолучитьУстановитьНастройки()
	
	МакетКомпоновки  = Отчеты.уатДиаграммаСостояниеТС.ПолучитьМакет("ИсточникНастроекОтбораКомпоновщика");
	URLСхемы         = ПоместитьВоВременноеХранилище(МакетКомпоновки, УникальныйИдентификатор);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	
	СтарыеНастройки = НастройкиКомпоновки.ПолучитьНастройки();
	
	НастройкиКомпоновки.Инициализировать(ИсточникНастроек);
	
	НастройкиКомпоновки.ЗагрузитьНастройки(СтарыеНастройки);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройки()
	
	Дата         = ТекущаяДата();
	ДатаНач      = НачалоМесяца(Дата);
	ДатаКон      = КонецМесяца(Дата);
	МасштабГанта = 1;
	
	МакетКомпоновки  = Отчеты.уатДиаграммаСостояниеТС.ПолучитьМакет("ИсточникНастроекОтбораКомпоновщика");
	URLСхемы         = ПоместитьВоВременноеХранилище(МакетКомпоновки, УникальныйИдентификатор);
	
	НастройкиКомпоновки.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
	
	НастройкиКомпоновки.ЗагрузитьНастройки(МакетКомпоновки.НастройкиПоУмолчанию);
	
	ХранимыеНастройки = ХранилищеНастроекДанныхФорм.Загрузить("Отчет.уатДиаграммаСостояниеТС.Форма.ОсновнаяФорма", "НастройкиКомпоновщика"); 
	
	Если Не ХранимыеНастройки = Неопределено Тогда 
		ХранимыеНастройки = ХранимыеНастройки.Получить();
		Для Каждого ТекОтбор Из ХранимыеНастройки.Элементы Цикл 
			НастройкаОтбора = НастройкиКомпоновки.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НастройкаОтбора, ТекОтбор);
		КонецЦикла;
		ПолучитьУстановитьНастройки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	УстановитьПривилегированныйРежим(Истина);
	ХранилищеНастроекДанныхФорм.Сохранить("Отчет.уатДиаграммаСостояниеТС.Форма.ОсновнаяФорма", "НастройкиКомпоновщика", Новый ХранилищеЗначения(НастройкиКомпоновки.Настройки.Отбор));
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеРеквизитов()
	
	// Варианты кодов: 0 - ошибок нет, 1 - ошибка дат, 2 - диаграмма не сформирована
	КодВозврата = 0;
	
	Если ДатаНач > ?(ДатаКон = '00010101', '39991231', КонецДня(ДатаКон)) Тогда 
		КодВозврата = 1;
	ИначеЕсли ДиаграммаГанта.Серии.Количество() = 0 Тогда 
		КодВозврата = 2;
	КонецЕсли;
	
	Возврат КодВозврата;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ  

// Управляет масштабом диаграммы Ганта
&НаКлиенте
Процедура МасштабГантаПриИзменении(Элемент)
	Если МасштабГанта = 0 Тогда
		ДиаграммаГанта.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.Авто;
	ИначеЕсли МасштабГанта = 1 Тогда
		ДиаграммаГанта.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.ВсеДанные;
	ИначеЕсли МасштабГанта = 2 Тогда
		ДиаграммаГанта.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.Период;
		ДиаграммаГанта.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Год;
	ИначеЕсли МасштабГанта = 3 Тогда
		ДиаграммаГанта.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.Период;
		ДиаграммаГанта.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Квартал;
	ИначеЕсли МасштабГанта = 4 Тогда
		ДиаграммаГанта.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.Период;
		ДиаграммаГанта.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Месяц;
	ИначеЕсли МасштабГанта = 5 Тогда
		ДиаграммаГанта.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.Период;
		ДиаграммаГанта.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Неделя;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	
	КодВозврата = ПроверитьЗаполнениеРеквизитов();
	Если КодВозврата = 1 Тогда 
		ТекстОшибки = "Период начала отчета не может быть больше периода окончания.";
		Сообщить(ТекстОшибки, СтатусСообщения.Важное);
	Иначе 
		СформироватьНаСервере();
		Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.ГруппаСтраниц.ПодчиненныеЭлементы.СтраницаДиаграмма;
		МасштабГантаПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	КодВозврата = ПроверитьЗаполнениеРеквизитов();
	Если КодВозврата = 0 Тогда 
		ДокументВыводаДиаграммы = Новый ТабличныйДокумент();
		ПечатьНаСервере(ДокументВыводаДиаграммы);
		// выведем на печать
		ДокументВыводаДиаграммы.ОтображатьСетку     = Ложь;
		ДокументВыводаДиаграммы.ОтображатьЗаголовки = Истина;
		ДокументВыводаДиаграммы.ТолькоПросмотр      = Истина;
		ДокументВыводаДиаграммы.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
		ДокументВыводаДиаграммы.Показать();
	Иначе 
		Если КодВозврата = 1 Тогда 
			ТекстОшибки = "Период начала отчета не может быть больше периода окончания.";
		Иначе
			ТекстОшибки = "Отсутствуют данные для печати." + Символы.ПС 
				+ "Возможно отчет еще не сформирован.";
		КонецЕсли;
		Сообщить(ТекстОшибки, СтатусСообщения.Важное);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаНастройкаПериода(Команда)
	
	ДиалогПериода = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогПериода.Период.ДатаНачала = ДатаНач;
	ДиалогПериода.Период.ДатаОкончания = ДатаКон;
	ДиалогПериода.Показать(Новый ОписаниеОповещения("КнопкаНастройкаПериодаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаНастройкаПериодаЗавершение(Период, ДополнительныеПараметры) Экспорт
	
	Если Не Период = Неопределено Тогда
		ДатаНач = Период.ДатаНачала;
		ДатаКон = Период.ДатаОкончания;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗагрузитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СохранитьНастройки();
КонецПроцедуры


