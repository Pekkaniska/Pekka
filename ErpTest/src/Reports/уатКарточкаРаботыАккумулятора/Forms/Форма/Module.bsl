
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДатаНач = НачалоМесяца(ТекущаяДата());
	ДатаКон = ТекущаяДата();
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Организация = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			ПользователиКлиентСервер.ТекущийПользователь(), 
			"ОсновнаяОрганизация"
		);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура АккумуляторНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("ТипАгрегата, РежимВыбора", "Аккумулятор", Истина);
	ОткрытьФорму("РегистрСведений.уатАгрегатыТС.ФормаСписка", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АккумуляторОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("РегистрСведенийКлючЗаписи.уатАгрегатыТС") Тогда
		СтандартнаяОбработка = Ложь;
		Аккумулятор = ВыбАгрегатСервер(ВыбранноеЗначение);
		ПриИзмененииАккСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АккумуляторПриИзменении(Элемент)
	
	ПриИзмененииАккСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НомерТСПриИзменении(Элемент)
	
	уатИнтерфейсВводаТС.НомерТСПриИзменении(НомерТС, ТС, Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("уатОрганизация", Организация);
	КонецЕсли;
	уатИнтерфейсВводаТС.НомерТСНачалоВыбора(Элемент, ТС, СтруктураОтбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерТСОчистка(Элемент, СтандартнаяОбработка)
	
	уатИнтерфейсВводаТС.НомерТСОчистка(ТС);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерТСОткрытие(Элемент, СтандартнаяОбработка)
	
	уатИнтерфейсВводаТС.НомерТСОткрытие(ТС, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерТСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	уатИнтерфейсВводаТС.НомерТСОбработкаВыбора(НомерТС, ТС, ВыбранноеЗначение, СтандартнаяОбработка, Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	уатИнтерфейсВводаТС.НомерТСАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	уатИнтерфейсВводаТС.НомерТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, Организация);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сформировать(Команда)
	
	ТекстСообщения = "";
	Если ДатаНач > ДатаКон И ДатаКон <> '00010101' Тогда
		ТекстСообщения = ТекстСообщения + " - Дата начала периода не может быть больше даты конца периода" + Символы.ПС;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Аккумулятор) Тогда
		ТекстСообщения = ТекстСообщения + "- Не указан аккумулятор!" + Символы.ПС;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТС) тогда
		ТекстСообщения = ТекстСообщения + " - Не указано ТС" + Символы.ПС;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекстСообщения) тогда
		ПоказатьПредупреждение(, "Невозможно сформировать отчет: " + Символы.ПС + ТекстСообщения, 10);
		Возврат;
	КонецЕсли;
	
	ТабДок = СформироватьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериод(Команда)
	
	ДиалогПериода = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогПериода.Период.ДатаНачала = ДатаНач;
	ДиалогПериода.Период.ДатаОкончания = ДатаКон;
	ДиалогПериода.Показать(Новый ОписаниеОповещения("УстановитьПериодЗавершение", ЭтотОбъект, Новый Структура("ДиалогПериода", ДиалогПериода)));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом
//
&НаСервере
Функция СформироватьОтчет() Экспорт
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МИНИМУМ(УстановленоНаТС.Период) КАК ДатаУстановкиАКБНаТС,
	|	УстановленоНаТС.УзелОбъектаЭксплуатации КАК АКБ,
	|	МИНИМУМ(СнятоСТС.Период) КАК ДатаСнятияАКБСТС,
	|	УстановленоНаТС.ТранспортноеСредство.уатМодель КАК МодельТС,
	|	УстановленоНаТС.ТранспортноеСредство.уатГаражныйНомер КАК ИнвНомерТС,
	|	УстановленоНаТС.ТранспортноеСредство.Код КАК ГосНомерТС,
	|	УстановленоНаТС.ТранспортноеСредство.Ссылка КАК ТС,
	|	РАЗНОСТЬДАТ(УстановленоНаТС.Период, ЕСТЬNULL(СнятоСТС.Период, &ДатаКон), МЕСЯЦ) КАК КоличествоМесяцев
	|ПОМЕСТИТЬ АКБДвижения
	|ИЗ
	|	РегистрСведений.уатУстановленныеАгрегаты КАК УстановленоНаТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатУстановленныеАгрегаты.СрезПоследних(&ДатаКон, ТранспортноеСредство = &ТС) КАК СнятоСТС
	|		ПО УстановленоНаТС.УзелОбъектаЭксплуатации = СнятоСТС.УзелОбъектаЭксплуатации
	|			И УстановленоНаТС.ТранспортноеСредство = СнятоСТС.ТранспортноеСредство
	|			И (СнятоСТС.СостояниеАгрегата = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.Снято))
	|ГДЕ
	|	УстановленоНаТС.УзелОбъектаЭксплуатации = &АКБ
	|	И УстановленоНаТС.СостояниеАгрегата = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.УстановленоВРаботе)
	|	И УстановленоНаТС.ТранспортноеСредство = &ТС
	|
	|СГРУППИРОВАТЬ ПО
	|	УстановленоНаТС.УзелОбъектаЭксплуатации,
	|	УстановленоНаТС.ТранспортноеСредство.уатМодель,
	|	УстановленоНаТС.ТранспортноеСредство.уатГаражныйНомер,
	|	УстановленоНаТС.ТранспортноеСредство.Код,
	|	УстановленоНаТС.ТранспортноеСредство.Ссылка,
	|	РАЗНОСТЬДАТ(УстановленоНаТС.Период, ЕСТЬNULL(СнятоСТС.Период, &ДатаКон), МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(уатВыработкаОбороты.КоличествоОборот) КАК Пробег,
	|	уатВыработкаОбороты.ТС КАК ТС
	|ПОМЕСТИТЬ ПробегТСОбщий
	|ИЗ
	|	РегистрНакопления.уатВыработкаТС.Обороты(
	|			,
	|			&ДатаКон,
	|			,
	|			ТС В
	|					(ВЫБРАТЬ
	|						АКБДвижения.ТС
	|					ИЗ
	|						АКБДвижения КАК АКБДвижения)
	|				И Организация = &Организация
	|				И ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПробегОбщий)) КАК уатВыработкаОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	уатВыработкаОбороты.ТС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АКБДвижения.ДатаСнятияАКБСТС,
	|	АКБДвижения.ДатаУстановкиАКБНаТС,
	|	АКБДвижения.ГосНомерТС,
	|	АКБДвижения.ИнвНомерТС,
	|	ПробегТСОбщий.Пробег КАК ПробегОбщий,
	|	АКБДвижения.МодельТС,
	|	АКБДвижения.КоличествоМесяцев
	|ИЗ
	|	АКБДвижения КАК АКБДвижения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПробегТСОбщий КАК ПробегТСОбщий
	|		ПО АКБДвижения.ТС = ПробегТСОбщий.ТС");
	
	Макет = РеквизитФормыВЗначение("Отчет").ПолучитьМакет("Макет");
	
	Шапка = Макет.ПолучитьОбласть("Заголовок");

	НазваниеОрганизации = Организация.НаименованиеПолное;
	Если ПустаяСтрока(НазваниеОрганизации) Тогда
		НазваниеОрганизации = Организация;
	КонецЕсли;
	
	Шапка.Параметры.НазваниеОрганизации	= уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(Организация, ДатаКон),
		"ПолноеНаименование, ЮридическийАдрес, Телефоны");
		
	МодельАкк = РегистрыСведений.уатАгрегатыТС.ПрочитатьРеквизитыАгрегата(Аккумулятор).МодельАгрегата;
	
    Шапка.Параметры.ГаражНомер			= ТС.уатГаражныйНомер;
	Шапка.Параметры.НомерКолонны		= уатОбщегоНазначения.МестонахождениеТС(ТС).Колонна;
	Шапка.Параметры.МаркаАКБ			= МодельАкк;
	Шапка.Параметры.ТС		= ТС;	

	ДокументРезультат.Вывести(Шапка);
	
	Запрос.Параметры.Вставить("ДатаНач", НачалоДня(ДатаНач));
	
	Если ДатаКон <> '00010101' Тогда
		Запрос.Параметры.Вставить("ДатаКон", КонецДня(ДатаКон));
	Иначе
		Запрос.Параметры.Вставить("ДатаКон", ДатаКон);
	КонецЕсли;
	
	Запрос.Параметры.Вставить("АКБ"         , Аккумулятор);
	Запрос.Параметры.Вставить("Организация", Организация);
	Запрос.Параметры.Вставить("ТС"         , ТС);
	РезультатЗапроса = Запрос.Выполнить();
	
	ЗаголовокОтчета = Макет.ПолучитьОбласть("ЗаголовокОтчета");
	
	ДокументРезультат.Вывести(ЗаголовокОтчета);
    Выборка = РезультатЗапроса.Выбрать();
	
	Строка = Макет.ПолучитьОбласть("Строка");
	
	Пока Выборка.Следующий() Цикл
		Строка.Параметры.Заполнить(Выборка);
		Строка.Параметры.ТС = ТС.Код;
		ДокументРезультат.Вывести(Строка);
	КонецЦикла;
	
	Подвал = Макет.ПолучитьОбласть("Подвал");
	ДокументРезультат.Вывести(Подвал);
	
	// Ориентация страницы
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ДокументРезультат.ПолеСлева = 0;
	ДокументРезультат.ПолеСправа = 0;
	
	// Присвоим имя для сохранения параметров печати табличного документа
	ДокументРезультат.ИмяПараметровПечати = "Карточка работы шины";
	
	Возврат ДокументРезультат;
	
КонецФункции // СформироватьОтчет()

&НаКлиенте
Процедура УстановитьПериодЗавершение(Период, ДополнительныеПараметры) Экспорт
	
	Если Период = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДатаНач = Период.ДатаНачала;
	ДатаКон = Период.ДатаОкончания;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыбАгрегатСервер(КлючЗаписи)
	
	Возврат КлючЗаписи.УзелОбъектаЭксплуатации;
	
КонецФункции

&НаСервере
Процедура ПриИзмененииАккСервер()
	
	НаименованиеАккумулятора = РегистрыСведений.уатАгрегатыТС.ПрочитатьРеквизитыАгрегата(Аккумулятор).Наименование;
	
КонецПроцедуры

#КонецОбласти
