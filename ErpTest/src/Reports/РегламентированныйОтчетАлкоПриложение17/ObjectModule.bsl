#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных


Перем мПолноеИмяФайлаВнешнейОбработки Экспорт; // для варианта внешнего отчета
Перем мВерсияОтчета Экспорт; // для варианта внешнего отчета


Перем СтруктураРеквизитовФормы; // структура реквизитов формы отчета

Перем ДокументСсылкаАлкоОтчет; // Документ.РегламентированныйОтчет к которому привязан отчет.

// Структура получаемая функцией ПолучитьСтруктуруСервисРегистров()
// модуля формы отчета.
Перем СтруктураСервисРегистров; 

Перем ОбъектЭтогоОтчета; // объект метаданных отчета

// Переменные, полученные из реквизитов формы отчета.
Перем СтруктураДанныхТитульный, мДеревоВыбранныхСтраниц, ДополнительныеДанные, 
	  НомерКорректировки, ДатаПодписи;

// Переменные, используемые при проверке и выгрузке отчета.
Перем ДеревоВыгрузки, ПараметрыВыгрузки, СтатусПроверки;

// Переменные, полученные из реквизитов формы отчета.
Перем ТаблицаСтраницыЛицензии, ТаблицаСтраницыДекларация;

// Вспомогательные таблицы значений, отражающие состав ресурсов регистров сведений
// по группам.
Перем ТабП0000000002, ТабП0000100003;

// Таблица значений, в которую записываются найденные при проверке выгрузки ошибки.
Перем ТаблицаСообщений; 

// Таблица значений, в который записываются информационные сообщения при проверке выгрузки ошибки.
Перем ТаблицаСообщенийДляСведения;

// Предельное количество ошибок, по достижении которого дальнейшая проверка прекращается.
Перем МаксимальноеКоличествоОшибок;

// Данные обособленных подразделений Раздела 1.
Перем ДанныеОП_Декларация;

// Данные производителей-импортеров и счетчик, который присваивается как ИД производителя-импортера.
Перем ДанныеПроизводителей, СчетчикИДПроизвИмп;

// Данные поставщиков и счетчик, который присваивается как ИД поставщика.
Перем ДанныеПоставщиков, СчетчикИдПоставщиков;

// Данные лицензий поставщиков и счетчик, который присваивается как ИД лицензии.
Перем ДанныеЛицензий, СчетчикИдЛицензий;

// Данные движений продукции с привязкой к производителю-импортеру.
Перем ДанныеДвижений;

// Вспомогательные переменные.
Перем ВсегоСтрокПоДекларации, НужноОбработатьСтрок, ОбработаноСтрок, КолСтрокПриПроверкеЗаполнения;

// Содержит процент выполнения процесса проверки или выгрузки, который соответсвует проверке заполнения разделов.
// Для процесса проверки с ошибками - 100%, проверка без ошибок - 90%, при выгрузке без ошибок - 84%.
Перем ПроцентБезЗавершающейПроверкиДанных, ПроцентБезКонвертацииАрхивации;

// Адрес временного хранилища для обмена вспомогательной информацией (процент выполнения, этап).
Перем ВспомогательныйАдрес;
// Содержит шаг информирования о проценте выполнения процесса.
Перем ШагИнформирования;

// Признак отсутствия ошибок при проверке
Перем НетОшибокПроверки;

// Версия БСП.
Перем ВерсияБСПЧислом;


#КонецОбласти


#Область ПрограммныйИнтерфейс


#Область ОбработкаПриЗаписиИзФормЗаписиРегистров

// В зависимости от имени регистра обрабатывает поля ресурсов записи и 
// вычисляет значения реквизитов при необходимости.
//
// Параметры:
//
//	 	ИмяРегистра 				- Строка - Имя регистра, запись которого обрабатывается.
// 		Запись 						- Запись регистра сведений	- Запись, которая обрабатывается.
//
Процедура ОбработкаЗаписи(ИмяРегистра, Запись, ВышеБРО_1_1_11_0 = Неопределено) Экспорт
	
	Если ВышеБРО_1_1_11_0 = Неопределено Тогда
	    ВышеБРО_1_1_11_0 = РегламентированнаяОтчетностьАЛКОВызовСервера.СравнениеВерсииПодсистемы(
													"РегламентированнаяОтчетность", "1.1.11.0");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запись.Документ) И ВышеБРО_1_1_11_0 Тогда	
		Запись.Организация = Запись.Документ.Организация;	
	КонецЕсли; 
	
	Если ИмяРегистра = "СведенияРеглОтчетАлкоПрил17Декларация" Тогда
		
		Запись.П000010000301 = ?(ЗначениеЗаполнено(Запись.П000010000301), 
								СокрЛП(Запись.П000010000301), "Фармацевтическая субстанция спирта этилового (этанол)");		
		Запись.П000010000302 = ?(ЗначениеЗаполнено(Запись.П000010000302), 
								СокрЛП(Запись.П000010000302), "101");
		
		КодПродукции = Запись.П000010000302;
		
		// Гарантируем отсутствие значения Неопределено для числовых ресурсов.
		Для Счетчик = 3 По 8 Цикл
			
			Колонка = Формат(Счетчик, "ЧЦ=2; ЧН=; ЧГ=0; ЧВН=");
		   	ЗначениеПоКолонке = Запись["П0000100003" + Колонка];
			Запись["П0000100003" + Колонка] = ?(ЗначениеЗаполнено(ЗначениеПоКолонке), ЗначениеПоКолонке, 0);
		
		КонецЦикла; 
		
		ПроцентСпирта = Запись.П000010000303;
		
		ХешИдКодПродПроцСпирта = РегламентированнаяОтчетностьАЛКО.ХешИдКодПродПроцСпирта(КодПродукции, ПроцентСпирта);
		
		Запись.ХешИдКодПродПроцСпирта = ХешИдКодПродПроцСпирта;
		
	КонецЕсли;
		
	Если ИмяРегистра = "СведенияРеглОтчетАлкоЛицензии" Тогда
		
	    Запись.П000000000201 = СокрЛП(Запись.П000000000201);
		Запись.П000000000202 = СокрЛП(Запись.П000000000202);
	    Запись.П000000000203 = СокрЛП(Запись.П000000000203);
		Запись.П000000000204 = СокрЛП(Запись.П000000000204);
		Запись.П000000000205 = СокрЛП(Запись.П000000000205);
		Запись.П000000000206 = СокрЛП(Запись.П000000000206);
		Запись.П000000000207 = СокрЛП(Запись.П000000000207);
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти


#Область Расчет

// Производит расчет "по строке" полей ресурсов Записи. 
//
// Параметры:
//
//	 	ИдГруппы 				- Строка - Имя табличной группы, к которой относится регистр сведений.
// 		Запись 					- Запись регистра сведений	- Запись, которая обрабатывается.
//
Процедура Расчет(ИдГруппы, Запись) Экспорт

	Если ИдГруппы = "П0000100003" Тогда
		РасчетДекларация(Запись);
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти 


#КонецОбласти


#Область СлужебныеПроцедурыИФункции


#Область Служебные

Функция ПолучитьМакетИзОбъекта(ИмяФормыОбъекта, ИмяМакета)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ПолучитьМакетИзОбъектаАЛКО(ИмяМакета, ИмяФормыОбъекта, ОбъектЭтогоОтчета);
	
КонецФункции

Функция ПолучитьНазваниеОтчетаАЛКО(ИмяФормы, ОбъектЭтогоОтч = Неопределено)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ПолучитьНазваниеОтчетаАЛКО(ИмяФормы, ОбъектЭтогоОтч);
	
КонецФункции

Процедура СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках,	СтатусПроверкиОтчета = Ложь, СтруктураОшибки)
	
	РегламентированнаяОтчетностьАЛКО.СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, 
																		СтатусПроверкиОтчета, СтруктураОшибки);
			
КонецПроцедуры

Функция ПолучитьИмяРегистраСведений(ИдГруппы)
	
	Возврат РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(ИдГруппы, СтруктураРеквизитовФормы);
	
КонецФункции

Функция ПолучитьКоличествоСтрокПоГруппе(ИдГруппы, ИсключаяУдаленные = Истина)
	
	КолСтрокПоГруппе = 0;
	ИмяРегистраСведений = ПолучитьИмяРегистраСведений(ИдГруппы);
	СервисРегистровГруппы = СтруктураСервисРегистров[ИмяРегистраСведений];			
	
	КолСтраницПоГруппе = СервисРегистровГруппы.Количество();
	
	Для Инд = 0 По КолСтраницПоГруппе - 1 Цикл
	    		
		КоличествоСтрокНастранице = СервисРегистровГруппы[Инд].КоличествоСтрок;
		
		КолСтрокПоГруппе = КолСтрокПоГруппе + КоличествоСтрокНастранице;
		
	КонецЦикла;
	
	Если ИсключаяУдаленные Тогда
		
		Для Инд = 0 По КолСтраницПоГруппе - 1 Цикл
		    		
			КоличествоСтрокНастраницеУд = СервисРегистровГруппы[Инд].КолвоСтрокПомНаУдаление;
						
			КолСтрокПоГруппе = КолСтрокПоГруппе - КоличествоСтрокНастраницеУд;
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	Возврат КолСтрокПоГруппе;
	
КонецФункции

Функция ИзвлечьСтруктуруXML(ИмяФормыОбъекта)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ИзвлечьСтруктуруXMLАЛКО(
				СтруктураРеквизитовФормы.мВерсияФормата, ИмяФормыОбъекта, ОбъектЭтогоОтчета);
		
КонецФункции

#КонецОбласти 


#Область ОбработкаПриЗаполнении

Процедура ОбработкаСтрокиТаблицыСтарогоФормата(ИмяРегистра, СтрокаТЗ, ВышеБРО_1_1_11_0 = Неопределено) Экспорт
	
	ОбработкаЗаписи(ИмяРегистра, СтрокаТЗ, ВышеБРО_1_1_11_0);

КонецПроцедуры

#КонецОбласти


#Область СлужебныеРасчет

Процедура РасчетДекларация(Запись)
	
	Запись.П000010000305 = ?(Запись.П000010000305 = Неопределено, 0, Запись.П000010000305);
	Запись.П000010000306 = ?(Запись.П000010000306 = Неопределено, 0, Запись.П000010000306);
	Запись.П000010000307 = ?(Запись.П000010000307 = Неопределено, 0, Запись.П000010000307);
		
	Запись.П000010000304 = Запись.П000010000305 + Запись.П000010000306;
	
	Запись.П000010000308 = Запись.П000010000304 + Запись.П000010000307;
	
КонецПроцедуры
	
#КонецОбласти 


#Область ПроверитьВыгрузку 

Функция ПроверитьЗаполнениеТитульный(СтатусПроверки)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ПроверитьЗаполнениеТитульный(
							ДокументСсылкаАлкоОтчет, ТаблицаСообщений, 
							СтатусПроверки, ПараметрыВыгрузки, Ложь);
		
КонецФункции

Функция ПроверитьЗаполнениеОП(ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки, 
							СтруктураСведенийПроверки, СведенияОбОП = Неопределено)
							
	Возврат РегламентированнаяОтчетностьАЛКО.ПроверитьЗаполнениеОП_АЛКО(
							ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки, 
							СтруктураСведенийПроверки, СведенияОбОП);

КонецФункции

Процедура ПроверитьЗаполнениеДекларация(СтатусПроверки)
	
	КПП_НеОбязателен = (Число(Лев(СтруктураРеквизитовФормы.мВерсияФормата, 3)) >= 431);
	ИмяРаздела = "Декларация";
	СтрВКакомРазделе = "В разделе Декларация";
	ПроверятьНаПустоту = Истина;
	ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы12;
		
	ДанныеДвижений = Новый Структура;
	// Инициация структуры ОП.				
	ДанныеОП_Декларация = Новый Структура;
	
	ДанныеРаздела = ТаблицаСтраницыДекларация;
	
	ИмяРегистраСведений = ПолучитьИмяРегистраСведений(ИдГруппы);
	СервисРегистров = СтруктураСервисРегистров[ИмяРегистраСведений];
		
	ЕстьЗаполненныйЛистРаздела = Ложь;
	НомерЛиста = 0;
	Для Каждого ЛистРаздела Из ДанныеРаздела Цикл
		
		НомерЛиста = НомерЛиста + 1;
		НомерЛистаСтроковый = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаЧГ0(НомерЛиста);
		
		ДанныеЛиста = ЛистРаздела.Данные[0].Значение;
		
		ДанныеОП   = ДанныеЛиста.ОбособленноеПодразделение;
		
		СтруктураСведенийПроверки = Новый Структура;						
		СтруктураСведенийПроверки.Вставить("ПараметрыВыгрузки", 	ПараметрыВыгрузки);
		СтруктураСведенийПроверки.Вставить("ИмяРаздела", 			ИмяРаздела);
		СтруктураСведенийПроверки.Вставить("СтрВКакомРазделе", 		СтрВКакомРазделе);
		СтруктураСведенийПроверки.Вставить("НомерЛиста", 			НомерЛиста);
		СтруктураСведенийПроверки.Вставить("ЛистРаздела", 			ЛистРаздела);
		СтруктураСведенийПроверки.Вставить("КПП_НеОбязателен", 		КПП_НеОбязателен);	
		СтруктураСведенийПроверки.Вставить("ПроверятьНаПустоту", 	ПроверятьНаПустоту);
		СведенияОбОП = Неопределено;
		
		ПроверитьЗаполнениеОП(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, 
								СтруктураСведенийПроверки, СведенияОбОП);
				
		
		Если НЕ ПустаяСтрока(ДанныеОП) и (НЕ СокрЛП(ДанныеОП) = "Заполнить") Тогда
			ЕстьЗаполненныйЛистРаздела = Истина;
		КонецЕсли;
		
		ИндексСтраницыРегистраДекларация = СервисРегистров[НомерЛиста - 1].ИндексСтраницыРегистра;
		
		ИдОП = "";
		Если ТипЗнч(ЛистРаздела.ДополнительныеДанные[0].Значение) = Тип("Структура") 
			И ЛистРаздела.ДополнительныеДанные[0].Значение.Свойство("СведенияОбОП", СведенияОбОП) Тогда
						
			Если ЗначениеЗаполнено(СведенияОбОП.КПП) или ЗначениеЗаполнено(СведенияОбОП.Наименование) Тогда
									
				Наименование_ОП = СведенияОбОП.Наименование;
				КПП_ОП = СведенияОбОП.КПП;
				ИдОП = ИдентификаторОП(СведенияОбОП);
				
				// Контроль записей на уникальность в Разделе("КПП ОП" + "Наименование ОП").
				Если ДанныеОП_Декларация.Свойство(ИдОП) Тогда
					
				    // Такое ОП уже есть.
					ЛистПовтора = ДанныеОП_Декларация[ИдОП].НомерЛистаДекларация;
					ЛистПовтораСтроковый = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаЧГ0(ЛистПовтора);
					ТекстОписанияОшибки = СтрВКакомРазделе + " страницы №№ " + ЛистПовтораСтроковый + ", " 
										+ НомерЛистаСтроковый + "  заполнены по одному и тому же обособленному подразделению: " 
										+ Наименование_ОП + ?(НЕ ПустаяСтрока(КПП_ОП), ", (КПП " + КПП_ОП + ")", "");
							
					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", "Декларация");
					СтруктураОшибки.Вставить("Показатель", "ОбособленноеПодразделение");
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "ПовторОП");
					
					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
                						
				Иначе
					
					ДанныеОП_Декларация.Вставить(ИдОП, Новый Структура);
					
					КопияСведенияОбОП = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(СведенияОбОП);
					
					ДанныеОП_Декларация[ИдОП].Вставить("ОП", КопияСведенияОбОП);
					
					ДанныеОП_Декларация[ИдОП].Вставить("НомерЛистаДекларация", НомерЛиста);
					
					ДанныеОП_Декларация[ИдОП].Вставить("ИндексСтраницыРегистраДекларация", ИндексСтраницыРегистраДекларация);
					
					ДанныеОП_Декларация[ИдОП].Вставить("КолСтрокПоДекларации", 0);
					
					ДанныеДвижений.Вставить(ИдОП, Новый Структура);
										
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		// Проверка заполнения таблиц декларации.
		ДопДанные = Неопределено;		
		Если ТипЗнч(ЛистРаздела.ДополнительныеДанные[0].Значение) = Тип("Структура") Тогда
			ЛистРаздела.ДополнительныеДанные[0].Значение.Свойство(ИдГруппы, ДопДанные);
		КонецЕсли;
		
		ПроверитьЗаполнениеТаблицыДекларация(СтатусПроверки, ИдГруппы, ДопДанные, 
													НомерЛиста, ИдОП, ЕстьЗаполненныйЛистРаздела);
		
		КолТабСообщений = ТаблицаСообщений.Количество();
			
		Если НетОшибокПроверки и (КолТабСообщений > 0)  Тогда
			
			НетОшибокПроверки = Ложь;
		    ПроцентБезЗавершающейПроверкиДанных = 100;
			НужноОбработатьСтрок = НужноОбработатьСтрок / 2;
			
		КонецЕсли; 
		
		Если КолТабСообщений >  МаксимальноеКоличествоОшибок Тогда
			
			ОбработаноСтрок = НужноОбработатьСтрок;
			ТекстОписанияОшибки = "Найдено " + МаксимальноеКоличествоОшибок + " и более ошибок. Дальнейшая проверка прекращена!";
					
			СтруктураОшибки = Новый Структура;
			СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
			СтруктураОшибки.Вставить("Раздел", "Декларация");
			СтруктураОшибки.Вставить("Показатель", Неопределено);
			СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
			СтруктураОшибки.Вставить("ТипОшибки", "МногоОшибок");
			
			СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
            
		    Возврат;
		КонецЕсли;
							
	КонецЦикла;
		
	Если НЕ ЕстьЗаполненныйЛистРаздела Тогда
		
		ТекстОписанияОшибки = СтрВКакомРазделе + " не заполнен ни один лист!";
				
		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
		СтруктураОшибки.Вставить("Раздел", "Декларация");
		СтруктураОшибки.Вставить("Показатель", "ОбособленноеПодразделение");
		СтруктураОшибки.Вставить("ЛистРаздела", 1);
		СтруктураОшибки.Вставить("ТипОшибки", "НетДанныхДекларация");
		
		СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
        
	КонецЕсли;
	
	Если ТаблицаСообщений.Количество() = 0 Тогда
	
		ПроверитьКонтрольныеСоотношения(ДокументСсылкаАлкоОтчет, ТаблицаСообщенийДляСведения, ИдГруппы, СтрВКакомРазделе, 
										ТаблицаСтраницыДекларация, СтруктураСервисРегистров);
		
	Иначе
		
		ТекстОписанияОшибки = "Проверка контрольных соотношений будет проведена после исправления всех найденных ошибок," 
							+ " поскольку только в этом случае ее можно провести корректно.";
					
		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
		СтруктураОшибки.Вставить("Раздел", "Декларация");
		СтруктураОшибки.Вставить("Показатель", Неопределено);
		СтруктураОшибки.Вставить("ЛистРаздела", 1);
		СтруктураОшибки.Вставить("ТипОшибки", "ПроверкаКонтрольныхСоотношенийПозже");
		
		СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
	
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьКонтрольныеСоотношения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, ИдГруппы, СтрВКакомРазделе, ТаблицаСтраницыДекларация, СтруктураСервисРегистров)

	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ИдГруппы", 						ИдГруппы);
	СтруктураПараметров.Вставить("СтрВКакомРазделе", 				СтрВКакомРазделе);
	СтруктураПараметров.Вставить("НомерДекларации", 				17);	
	СтруктураПараметров.Вставить("НомерСверяемойДекларации", 		16);
	СтруктураПараметров.Вставить("НомерКолонкиДекларации", 			8);
	СтруктураПараметров.Вставить("НомерКолонкиСверяемойДекларации", 19);
	СтруктураПараметров.Вставить("ТипОшибкиНеверногоСоотношения", 	"НетСоответствияГрафа19Графа8");
	
	СтруктураПараметров.Вставить("ТаблицаСтраницыДекларация", 		ТаблицаСтраницыДекларация);
	СтруктураПараметров.Вставить("СтруктураСервисРегистров", 		СтруктураСервисРегистров);
	
	РегламентированнаяОтчетностьАЛКО.ПроверитьКонтрольныеСоотношенияФармацевтическихДеклараций(
										ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтруктураПараметров);
	

КонецПроцедуры


Процедура ПроверитьЗаполнениеТаблицыДекларация(СтатусПроверки, ИдГруппы, ДополнительныеДанные, 
											НомерЛиста, ИдОП = "", ЕстьЗаполненныйЛистРаздела = Ложь)
	
	СтрВКакомРазделе = "В разделе Декларация";
	
	НомерЛистаСтроковый = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаЧГ0(НомерЛиста);
	
	ИндексСтраницы = НомерЛиста - 1;
	
	ПрефиксИмени = ИдГруппы;
	
	ИмяТаблицы = Неопределено;
	
	ЕстьИдОП = НЕ ПустаяСтрока(СтрЗаменить(ИдОП, "\", ""));
		
	// Опеределим регистр сведений
	ИмяРегистраСведений = ПолучитьИмяРегистраСведений(ИдГруппы);
	
	СервисРегистров = СтруктураСервисРегистров[ИмяРегистраСведений];
	ИндексСтраницыРегистра = СервисРегистров[ИндексСтраницы].ИндексСтраницыРегистра;
	ИДДокИндСтраницы = РегламентированнаяОтчетностьАЛКО.ПолучитьИдДокИндСтраницы(ДокументСсылкаАлкоОтчет, ИндексСтраницыРегистра);
	
	ДанныеДвиженийПоОП = Неопределено;
	Если ЕстьИдОП Тогда	
		ДанныеДвиженийПоОП = ДанныеДвижений[ИдОП];
		ДанныеОП_Декларация[ИдОП].Вставить("ИДДокИндСтраницыДекларация", ИДДокИндСтраницы);
	КонецЕсли;
	
	ТекущийИндексСтроки = 0;
	КолСтрокДекларация = 0;
	
	// Зафиксируем имена ключевых полей.
	ИмяКодаВидаПродукции 	= ПрефиксИмени + "02";
	ИмяПроцентСпирта 		= ПрефиксИмени + "03";
		
	Пока Истина Цикл
	 
		СтруктураНастроек = Новый Структура;
		СтруктураНастроек.Вставить("КоличествоПервых", 1000);
		СтруктураНастроек.Вставить("ТекущийИндексСтроки", ТекущийИндексСтроки);
		
		РезЗапросаДанных = РегламентированнаяОтчетностьАЛКО.ЗаполнитьПоСтраницеРазделаАЛКО(
									ИдГруппы, ИндексСтраницы, 
								   	СтруктураРеквизитовФормы, , ИДДокИндСтраницы,
								   	Ложь, СтруктураНастроек);
		
		Если РезЗапросаДанных.Количество() = 0 Тогда		
			Прервать;				
		КонецЕсли; 
		
		Для каждого СтрокаДекларации Из РезЗапросаДанных Цикл
					
			НомерСтроки = СтрокаДекларации.ИндексСтроки;
			ТекущийИндексСтроки = СтрокаДекларации.ИндексСтроки;
			КолСтрокДекларация = КолСтрокДекларация + 1;
			
			НомерСтрокиСтроковый = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаЧГ0(НомерСтроки);
			
			ЧислаВСтрокеЗаполнены = ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "04"])
					              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "05"])
					              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "06"])
					              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "07"])
					              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "08"]);
						  
			СтрокаЗаполнена = ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "02"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "03"])
			              ИЛИ ЧислаВСтрокеЗаполнены;
						  
			Если НЕ СтрокаЗаполнена Тогда						  
				
				ТекстОписанияОшибки = СтрВКакомРазделе + ", на листе " + НомерЛистаСтроковый + ", в строке " + НомерСтрокиСтроковый  + ", не заполнено ни одно поле!";
				
				ИмяПоказателя = ПрефиксИмени + "02_" + НомерСтрокиСтроковый;
				
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", "Декларация");
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "ПустаяСтрока");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
                
				Продолжить;
				
			КонецЕсли;
			
			ОбработаноСтрок = ОбработаноСтрок + 1;
					
			ЕстьЗаполненныйЛистРаздела = Истина;
			
			ИмяПоказателя = ИмяКодаВидаПродукции + "_" + НомерСтрокиСтроковый;
			КодВидаПродукции = СокрЛП(СтрокаДекларации[ИмяКодаВидаПродукции]);
						
			Если ПустаяСтрока(КодВидаПродукции) Тогда
				
				ТекстОписанияОшибки = СтрВКакомРазделе + ", на листе " + НомерЛистаСтроковый + ", в строке " + НомерСтрокиСтроковый  + ", не задан код вида продукции!";
						
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", "Декларация");
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НетКодаПродукции");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
         
			ИначеЕсли СтрДлина(КодВидаПродукции) <> 3 Тогда
				
				ТекстОписанияОшибки = СтрВКакомРазделе + ", на листе " + НомерЛистаСтроковый + ", в строке " + НомерСтрокиСтроковый  + ", неверно задан код вида продукции!";
						
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", "Декларация");
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "КодПродукцииНе3");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
				
			КонецЕсли;
			
			ИмяПоказателя = ИмяПроцентСпирта + "_" + НомерСтрокиСтроковый;
			ПроцентСпирта = СтрокаДекларации[ИмяПроцентСпирта];
			
			Если НЕ ЗначениеЗаполнено(ПроцентСпирта) Тогда
				
				ТекстОписанияОшибки = СтрВКакомРазделе + ", на листе " + НомерЛистаСтроковый + ", в строке " + НомерСтрокиСтроковый  + ", не задано содержание этилового спирта в объеме готовой продукции!";
						
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", "Декларация");
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НетПроцентаСпирта");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
				
			ИначеЕсли ПроцентСпирта > 100 Тогда
				
				ТекстОписанияОшибки = СтрВКакомРазделе + ", на листе " + НомерЛистаСтроковый + ", в строке " + НомерСтрокиСтроковый  + ", задано содержание этилового спирта в объеме готовой продукции более 100!";
						
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", "Декларация");
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "БольшойПроцентаСпирта");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
         			
			КонецЕсли;
			
			// Заполнение числовых полей.
			Если НЕ ЧислаВСтрокеЗаполнены Тогда						  
				
				ТекстОписанияОшибки = СтрВКакомРазделе + ", на листе " + НомерЛистаСтроковый + ", в строке " + НомерСтрокиСтроковый  + ", не заполнены числовые данные!";
				
				ИмяПоказателя = ПрефиксИмени + "05_" + НомерСтрокиСтроковый;
				
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", "Декларация");
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "ПустаяСтрока");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
                
			КонецЕсли;
			
					
			// Заполняем движения.
			Если ЕстьИдОП Тогда
							    
				ИдКодПродПроцСпирта	= "Х" + СтрокаДекларации.ХешИдКодПродПроцСпирта;
				
				Если НЕ ДанныеДвиженийПоОП.Свойство(ИдКодПродПроцСпирта) Тогда
						
					ДанныеДвиженийПоОП.Вставить(ИдКодПродПроцСпирта, Новый Структура);
					ДанныеДвиженийПоОП[ИдКодПродПроцСпирта].Вставить("НомерСтрокиДекларация", НомерСтроки);
					
					// Нет смысла собирать данные по Движениям, если есть ошибки заполнения.
					Если ТаблицаСообщений.Количество() = 0 Тогда
												
						Для Счетчик = 2 По 8 Цикл
			
							Колонка = Формат(Счетчик, "ЧЦ=2; ЧН=; ЧГ=0; ЧВН="); // 02, 03..08.
						   	ЗначениеПоКолонке = СтрокаДекларации[ПрефиксИмени + Колонка];
							
							КолонкаДвижения = "П0000000000" + Формат(Счетчик + 1, "ЧЦ=2; ЧН=; ЧГ=0; ЧВН=");
							
							ДанныеДвиженийПоОП[ИдКодПродПроцСпирта].Вставить(КолонкаДвижения, ЗначениеПоКолонке);
						
						КонецЦикла;
							
					КонецЕсли;
					
				Иначе
					
					// Дублирование сочетания кода продукции и процента спирта.
					
				    СтрокаПовтора = ДанныеДвиженийПоОП[ИдКодПродПроцСпирта].НомерСтрокиДекларация;
					СтрокаПовтораСтроковый = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаЧГ0(СтрокаПовтора);
					
					АдресДубликата = ИмяКодаВидаПродукции + "_" + НомерСтрокиСтроковый;
					
					ТекстОписанияОшибки = СтрВКакомРазделе + ", на листе " + НомерЛистаСтроковый  
									+ ", повторяются сочетания кода вида продукции и содержания этилового спирта в объеме готовой продукции в строках " 
									+ СтрокаПовтораСтроковый + " и " + НомерСтрокиСтроковый + "!";
							
					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", "Декларация");
					СтруктураОшибки.Вставить("Показатель", АдресДубликата);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "ПовторСочетанияКодПроцентСпирта");
					
					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
					
				КонецЕсли;
					
			КонецЕсли;
			 
					
			КолТабСообщений = ТаблицаСообщений.Количество();
			
			Если НетОшибокПроверки и (КолТабСообщений > 0)  Тогда
				НетОшибокПроверки = Ложь;
			    ПроцентБезЗавершающейПроверкиДанных = 100;
				НужноОбработатьСтрок = НужноОбработатьСтрок / 2;
			КонецЕсли; 
			
			Если КолТабСообщений >  МаксимальноеКоличествоОшибок Тогда
				ОбработаноСтрок = НужноОбработатьСтрок;
			    Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
		// Информируем о ходе выполнения.
		Если НужноОбработатьСтрок > 0 Тогда
			
			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка заполнения раздела Декларация.", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных);
			
		КонецЕсли;
					
	КонецЦикла; 
	
	Если ЕстьИдОП Тогда			
		ДанныеОП_Декларация[ИдОП].Вставить("КолСтрокПоДекларации", КолСтрокДекларация);
	КонецЕсли;
		
КонецПроцедуры

Функция ОтчетЗаполненКорректно()
	
	СтатусПроверки = Истина;
	
	МаксимальноеКоличествоОшибок = 1000;
	
	ПроверитьЗаполнениеТитульный(СтатусПроверки);

	Если ТаблицаСообщений.Количество() <=  МаксимальноеКоличествоОшибок Тогда
				
		// информируем о ходе выполнения				
		Если НужноОбработатьСтрок > 0 Тогда
			
			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка заполнения раздела Декларация.", ОбработаноСтрок, 
										НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных);
			
		КонецЕсли;
		
		ПроверитьЗаполнениеДекларация(СтатусПроверки);
		
	КонецЕсли;
		
	КолСтрокПриПроверкеЗаполнения = ОбработаноСтрок;
		
	Возврат СтатусПроверки;
	
КонецФункции


Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	РегламентированнаяОтчетностьАЛКО.ОтсечьНезаполненныеНеобязательныеУзлыАЛКО(Узел);
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	РегламентированнаяОтчетностьАЛКО.ОбработатьУсловныеЭлементыАЛКО(ПараметрыВыгрузки, Узел, 
						ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, ВерсияБСПЧислом);
	
КонецПроцедуры

Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ПолучитьПодчиненныйЭлементАЛКО(Узел, КодЭлемента);
	
КонецФункции 

Функция НовыйУзелИзПрототипа(ПрототипУзла)
	
	Возврат РегламентированнаяОтчетностьАЛКО.НовыйУзелИзПрототипаАЛКО(ПрототипУзла);
	
КонецФункции

Процедура УстановитьЗначениеЭлемента(УзелРодитель, ИмяЭлемента, ЗначениеЭлемента)
	
	РегламентированнаяОтчетностьАЛКО.УстановитьЗначениеЭлементаАЛКО(УзелРодитель, ИмяЭлемента, ЗначениеЭлемента);
	
КонецПроцедуры

Функция ИдентификаторОП(СведенияОП)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ИдентификаторОП_АЛКО(СведенияОП);
	
КонецФункции

Процедура ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	РегламентированнаяОтчетностьАЛКО.ВывестиПоказательВXML_АЛКО(Узел, ЗначениеПоказателя);
	
КонецПроцедуры

Функция ПроверитьДанные(Узел)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ПроверитьДанныеАЛКО(Узел, 
							ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки);
		
КонецФункции


Процедура ЗаполнитьСведенияДекларации(НовыйУзелОбъемОборота, ИдОП, НаличиеОборота)
		
	ОбразецУзлаОборот = ПолучитьПодчиненныйЭлемент(НовыйУзелОбъемОборота, "Испол");
	
	ДанныеДвиженийПоОП = ДанныеДвижений[ИдОП];
	
	НомерПП = 0;
	
	Для Каждого ЭлементДвиженияПоОП Из ДанныеДвиженийПоОП Цикл
		
		НаличиеОборота = Истина;
		Движение = ЭлементДвиженияПоОП.Значение;
		
	    НовыйУзелОборот = НовыйУзелИзПрототипа(ОбразецУзлаОборот);
		
		НомерПП = НомерПП + 1;
		
		УстановитьЗначениеЭлемента(НовыйУзелОборот, "ПN", НомерПП);
		
		Для Счетчик = 2 По 8 Цикл
			
			Колонка = Формат(Счетчик, "ЧЦ=2; ЧН=; ЧГ=0; ЧВН="); // 02, 03..08.
			КолонкаДвижения = "П0000000000" + Формат(Счетчик + 1, "ЧЦ=2; ЧН=; ЧГ=0; ЧВН=");
			
			ЗначениеПоКолонке = Неопределено;			
			Движение.Свойство(КолонкаДвижения, ЗначениеПоКолонке);
			
			УстановитьЗначениеЭлемента(НовыйУзелОборот, КолонкаДвижения, ЗначениеПоКолонке);
		
		КонецЦикла;
		
		ОбработаноСтрок = ОбработаноСтрок + 1;
		
		// информируем о ходе выполнения				
		Если НужноОбработатьСтрок > 0 Тогда
			
			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", ОбработаноСтрок, 
										НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных);
			
		КонецЕсли;
	
	КонецЦикла; 
			
	РегламентированнаяОтчетность.УдалитьУзел(ОбразецУзлаОборот);
				
КонецПроцедуры

Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель, КорневойУзел, ПараметрыВыгрузки)
		
	Узел_Документ = УзелРодитель;
	
	Узел_Организация = ПолучитьПодчиненныйЭлемент(Узел_Документ, "Организация");
				
	ПрототипУзла_ОбъемОборота = ПолучитьПодчиненныйЭлемент(Узел_Документ, "ОбъемИспол");
			
	Для Каждого ЭлементОП Из ДанныеОП_Декларация Цикл
	
		ИдОП		= ЭлементОП.Ключ;
		СтруктураОП = ЭлементОП.Значение;
		
		СведенияОбОП = СтруктураОП.ОП;
				
		// заполняем сведения по ОП
		НазваниеОрганизации = СведенияОбОП.Наименование;
		КПП = СведенияОбОП.КПП;
		
		Если ПустаяСтрока(НазваниеОрганизации) И ПустаяСтрока(КПП) Тогда
			Продолжить;
		КонецЕсли;
		
		Узел_ОбъемОборота = НовыйУзелИзПрототипа(ПрототипУзла_ОбъемОборота);
		
		УстановитьЗначениеЭлемента(Узел_ОбъемОборота, "Наим", НазваниеОрганизации);			
		
		Если НЕ ПустаяСтрока(КПП) Тогда
		    УстановитьЗначениеЭлемента(Узел_ОбъемОборота, "КППЮЛ", КПП);		
		КонецЕсли;		
				
		Узел_АдрОрг = ПолучитьПодчиненныйЭлемент(Узел_ОбъемОборота, "АдрОрг");
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "КодСтраны",  "643");
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Индекс",     СведенияОбОП.Индекс);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "КодРегион",  СведенияОбОП.КодРегиона);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Район",      СведенияОбОП.Район);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Город",      СведенияОбОП.Город);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "НаселПункт", СведенияОбОП.НаселенныйПункт);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Улица",      СведенияОбОП.Улица);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Дом",        СведенияОбОП.Дом);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Корпус",     СведенияОбОП.Корпус);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Литера",     СведенияОбОП.Литера);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Кварт",      СведенияОбОП.Квартира);
		
		НаличиеОборота = Ложь;
		ЗаполнитьСведенияДекларации(Узел_ОбъемОборота, ИдОП, НаличиеОборота);
				
		УстановитьЗначениеЭлемента(Узел_ОбъемОборота, "НаличиеИспол", ?(НаличиеОборота, "true", "false"));
				
	КонецЦикла;
	
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_ОбъемОборота);
	
	 
	
	КолСтрокЗаполнено = ОбработаноСтрок - КолСтрокПриПроверкеЗаполнения;
	
	Если КолСтрокЗаполнено <> КолСтрокПриПроверкеЗаполнения Тогда
		
	    // выгружено не то количество, что есть по данным заполнения отчета
		ТекстОписанияОшибки = "В выгрузку попало меньшее количество строк, чем заполнено по разделу Декларация!
							|Немедленно свяжитесь с техподдержкой, желательно выслать выгрузку 
							|Вашей информационной базы в виде файла .dt";
				
		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
		СтруктураОшибки.Вставить("Раздел", "Титульный");
		СтруктураОшибки.Вставить("Показатель", Неопределено);
		СтруктураОшибки.Вставить("ЛистРаздела", Неопределено);
		СтруктураОшибки.Вставить("ТипОшибки", "НеВсяИнформацияПопалаВВыгрузку");
		
		СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
								
	КонецЕсли; 
		
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если ПараметрыВыгрузки.Свойство("ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
				ЗаполнитьСодержательнуюЧасть(Стр, Узел, ПараметрыВыгрузки);
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) И ПараметрыВыгрузки.Свойство(Стр.Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Стр.Ключ]);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если ПараметрыВыгрузки.Свойство(Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Ключ]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанными()
	
	Если НужноОбработатьСтрок > 0 Тогда
	 	
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", ОбработаноСтрок, 
										НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных);
		
	КонецЕсли; 
	
		
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки); // заполняем дерево данными
	
	Если НужноОбработатьСтрок > 0 Тогда
	 
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", ОбработаноСтрок, 
										НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных);
	
	КонецЕсли;
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
	Если НужноОбработатьСтрок > 0 Тогда
	    		
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", ПроцентБезЗавершающейПроверкиДанных, 100);
	
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьВыгрузку(ПараметрыДокумента, ЭтоВыгрузка = Ложь) Экспорт
	
	ВерсияБСПЧислом = РегламентированнаяОтчетностьАлко.ПолучитьВерсиюБСПЧислом();
	
	ДокументСсылкаАлкоОтчет		= ПараметрыДокумента.ДокументСсылка;

	ИмяФормыОбъекта				= ПараметрыДокумента.ИмяФормыОбъекта;
	ВспомогательныйАдрес		= ПараметрыДокумента.ВспомогательныйАдрес;
	ПараметрыФормы				= ПараметрыДокумента.ПараметрыФормы;
	ПараметрыВыгрузки			= ПараметрыДокумента.ПараметрыВыгрузки;	
		
	
	// Таблица результата
	ТаблицаСообщений = РегламентированнаяОтчетностьАлко.СоздатьТаблицуСообщенийОбОшибках();
	ТаблицаСообщенийДляСведения = РегламентированнаяОтчетностьАлко.СоздатьТаблицуСообщенийОбОшибках();
	
	ТаблицаСтраницыЛицензии = ПараметрыФормы.ТаблицаСтраницыЛицензии;
	ТаблицаСтраницыДекларация  = ПараметрыФормы.ТаблицаСтраницыДекларация;
		
	ТабП0000000002 = ПараметрыФормы.ТабП0000000002;
	ТабП0000100003 = ПараметрыФормы.ТабП0000100003;
	
	СтруктураРеквизитовФормы = ПараметрыФормы.СтруктураРеквизитовФормы;
	СтруктураСервисРегистров = ПараметрыФормы.СтруктураСервисРегистров;
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML(ИмяФормыОбъекта);
	
	ВсегоСтрокПоДекларации = ПолучитьКоличествоСтрокПоГруппе(СтруктураРеквизитовФормы.мИдГруппы12, Истина);
	
	// один проход при проверке заполнения,
	// второй - при заполнении выгрузки - все вместе 90%
	// на завершающую проверку данных отводим 10%
	НужноОбработатьСтрок = 2 * ВсегоСтрокПоДекларации;
	// при выгрузке проверка заполнения строк и заполнение дерева выгрузки составляет примерно 84%
	// при проверке выгрузки - примерно 90% от общего времени выполнения.
	ПроцентБезЗавершающейПроверкиДанных = ?(ЭтоВыгрузка, 84, 90);
	ОбработаноСтрок = 0;
	ШагИнформирования = 3000;
	НетОшибокПроверки = Истина;
	
	Если НЕ ОтчетЗаполненКорректно() Тогда
		
		Результат = Новый Структура;
		Результат.Вставить("ТаблицаСообщений", ТаблицаСообщений);
		Результат.Вставить("ТаблицаСообщенийДляСведения", ТаблицаСообщенийДляСведения);
		Возврат Результат;
		
	КонецЕсли;

	// информируем о ходе выполнения				
	Если НужноОбработатьСтрок > 0 Тогда
		
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", ОбработаноСтрок, 
										НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных);
		
	КонецЕсли;
	
	ЗаполнитьДанными();
	
	Если ТаблицаСообщений.Количество() > 0 Тогда
	    
		Результат = Новый Структура;
		Результат.Вставить("ТаблицаСообщений", ТаблицаСообщений);
		Результат.Вставить("ТаблицаСообщенийДляСведения", ТаблицаСообщенийДляСведения);
		Возврат Результат;
			
	КонецЕсли; 
	
	// информируем о ходе выполнения				
	Если НужноОбработатьСтрок > 0 Тогда
		
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка данных по схеме выгрузки.", ПроцентБезЗавершающейПроверкиДанных, 
										100);
										
	КонецЕсли;
		
	
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		// информируем о ходе выполнения
		Если НужноОбработатьСтрок > 0 Тогда
			
			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("", 100, 100);										 
			
		КонецЕсли;
				
		Результат = Новый Структура;
		Результат.Вставить("ТаблицаСообщений", ТаблицаСообщений);
		Результат.Вставить("ТаблицаСообщенийДляСведения", ТаблицаСообщенийДляСведения);
		Возврат Результат;
		
	КонецЕсли;
	
	// информируем о ходе выполнения				
	Если НужноОбработатьСтрок > 0 Тогда
				
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(?(ЭтоВыгрузка, "Запись выгрузки в XML.", ""), ?(ЭтоВыгрузка, 93, 100), 100);
		
	КонецЕсли;
		
	Результат = Новый Структура;
	Результат.Вставить("ТаблицаСообщений", ТаблицаСообщений);
	Результат.Вставить("ТаблицаСообщенийДляСведения", ТаблицаСообщенийДляСведения);
	Возврат Результат;
	
КонецФункции

Функция СформироватьПредставлениеОшибок(ТаблСообщений, ИмяФормыОбъекта, ТолькоДляСведения = Ложь) Экспорт
	
	
	МакетОформления = ПолучитьМакетИзОбъекта(ИмяФормыОбъекта, "ШаблоныСообщенийОбОшибках2018Кв1");
	
	НаименованиеДекларации = ПолучитьНазваниеОтчетаАЛКО(ИмяФормыОбъекта);
	
	Секция_ВерхнийОтступ   = МакетОформления.ПолучитьОбласть("ВерхнийОтступ");
	Секция_ЗаголовокОтчета = МакетОформления.ПолучитьОбласть("ЗаголовокОтчета");
	Секция_РазрывСекций    = МакетОформления.ПолучитьОбласть("РазрывСекций");
	Секция_ОтступПередОшибками = МакетОформления.ПолучитьОбласть("ОтступПередОшибками");
	
	ПредставлениеОшибок = Новый ТабличныйДокумент;
	ПредставлениеОшибок.Вывести(Секция_ВерхнийОтступ);
	
	Секция_ЗаголовокОтчета.Параметры.НаименованиеДекларации = НаименованиеДекларации;
	ПредставлениеОшибок.Вывести(Секция_ЗаголовокОтчета);
	ПредставлениеОшибок.Вывести(Секция_РазрывСекций);
	
	КоличествоОшибок = ТаблСообщений.Количество();
	
	Если КоличествоОшибок = 0 Тогда
		
		Секция_БезОшибок = МакетОформления.ПолучитьОбласть("БезОшибок");
		ПредставлениеОшибок.Вывести(Секция_БезОшибок);
		
	Иначе
		
		// Если есть ошибки разработки - их в первую очередь.
		
		ТипОшибки = "НеВсяИнформацияПопалаВВыгрузку";
		ОшибкиРазработки = ТаблСообщений.НайтиСтроки(Новый Структура("ТипОшибки", ТипОшибки));
		Если ОшибкиРазработки.Количество() > 0 Тогда
			
		    // Такая ошибка может быть только одна.
			Секция_ЗаголовокОшибки = МакетОформления.ПолучитьОбласть("Заголовок" + ТипОшибки);
			ПредставлениеОшибок.Вывести(Секция_ЗаголовокОшибки);
			// Ничего не сворачиваем, выдаем сразу.
			Секция_ИсправлениеОшибки = МакетОформления.ПолучитьОбласть("Исправление" + ТипОшибки);
		    ПредставлениеОшибок.Вывести(Секция_ИсправлениеОшибки);
			
			ПредставлениеОшибок.Вывести(Секция_РазрывСекций);
			
			ТаблСообщений.Удалить(ОшибкиРазработки[0]);
			
		КонецЕсли; 
		
		ТипОшибки = "НеУдалосьВычислить";
		ОшибкиРазработки = ТаблСообщений.НайтиСтроки(Новый Структура("ТипОшибки", ТипОшибки));
		Если ОшибкиРазработки.Количество() > 0 Тогда
					    
			Секция_ЗаголовокОшибки = МакетОформления.ПолучитьОбласть("Заголовок" + ТипОшибки);
			ПредставлениеОшибок.Вывести(Секция_ЗаголовокОшибки);
						
			Секция_ИсправлениеОшибки = МакетОформления.ПолучитьОбласть("Исправление" + ТипОшибки);
		    ПредставлениеОшибок.Вывести(Секция_ИсправлениеОшибки);
			
			ПредставлениеОшибок.НачатьГруппуСтрок();			
			ПредставлениеОшибок.Вывести(Секция_ОтступПередОшибками);
			
			Секция_СтандартнаяОшибка = МакетОформления.ПолучитьОбласть("СтандартнаяОшибка");
			
			Для каждого Ошибка Из ОшибкиРазработки Цикл
			
				ПозицияПерехода = Новый Структура;
				ПозицияПерехода.Вставить("Раздел", Ошибка.Раздел);
				ПозицияПерехода.Вставить("Показатель", Ошибка.ИмяЯчейки);
				ПозицияПерехода.Вставить("Страница", Ошибка.Страница);
				
				Секция_СтандартнаяОшибка.Параметры.ПредставлениеОшибки = Ошибка.Описание;
				Секция_СтандартнаяОшибка.Параметры.ПозицияПерехода     = ПозицияПерехода;
				ПредставлениеОшибок.Вывести(Секция_СтандартнаяОшибка);
				
				ТаблСообщений.Удалить(Ошибка);
				
			КонецЦикла; 
			
			ПредставлениеОшибок.ЗакончитьГруппуСтрок();
			ПредставлениеОшибок.Вывести(Секция_РазрывСекций);
		
		КонецЕсли;
		
		ТипОшибки = "ОшибкаФорматаXML";
		ОшибкиРазработки = ТаблСообщений.НайтиСтроки(Новый Структура("ТипОшибки", ТипОшибки));
		Если ОшибкиРазработки.Количество() > 0 Тогда
					    
			Секция_ЗаголовокОшибки = МакетОформления.ПолучитьОбласть("Заголовок" + ТипОшибки);
			ПредставлениеОшибок.Вывести(Секция_ЗаголовокОшибки);
						
			Секция_ИсправлениеОшибки = МакетОформления.ПолучитьОбласть("Исправление" + ТипОшибки);
		    ПредставлениеОшибок.Вывести(Секция_ИсправлениеОшибки);
			
			ПредставлениеОшибок.НачатьГруппуСтрок();			
			ПредставлениеОшибок.Вывести(Секция_ОтступПередОшибками);
			
			Секция_СтандартнаяОшибка = МакетОформления.ПолучитьОбласть("СтандартнаяОшибка");
			
			Для каждого Ошибка Из ОшибкиРазработки Цикл
			
				ПозицияПерехода = Новый Структура;
				ПозицияПерехода.Вставить("Раздел", Ошибка.Раздел);
				ПозицияПерехода.Вставить("Показатель", Ошибка.ИмяЯчейки);
				ПозицияПерехода.Вставить("Страница", Ошибка.Страница);
				
				Секция_СтандартнаяОшибка.Параметры.ПредставлениеОшибки = Ошибка.Описание;
				Секция_СтандартнаяОшибка.Параметры.ПозицияПерехода     = ПозицияПерехода;
				ПредставлениеОшибок.Вывести(Секция_СтандартнаяОшибка);
				
				ТаблСообщений.Удалить(Ошибка);
				
			КонецЦикла; 
			
			ПредставлениеОшибок.ЗакончитьГруппуСтрок();
			ПредставлениеОшибок.Вывести(Секция_РазрывСекций);
		
		КонецЕсли;
		
		// Отдельно - слишком много ошибок
		ТипОшибки = "МногоОшибок";
		ОшибкиРазработки = ТаблСообщений.НайтиСтроки(Новый Структура("ТипОшибки", ТипОшибки));
		Если ОшибкиРазработки.Количество() > 0 Тогда
			
		    // Такая ошибка может быть только одна.
			Секция_ЗаголовокОшибки = МакетОформления.ПолучитьОбласть("Заголовок" + ТипОшибки);
			ПредставлениеОшибок.Вывести(Секция_ЗаголовокОшибки);
			// Ничего не сворачиваем, выдаем сразу.
			Секция_ИсправлениеОшибки = МакетОформления.ПолучитьОбласть("Исправление" + ТипОшибки);
		    ПредставлениеОшибок.Вывести(Секция_ИсправлениеОшибки);
			
			ПредставлениеОшибок.Вывести(Секция_РазрывСекций);
			
			ТаблСообщений.Удалить(ОшибкиРазработки[0]);
			
		КонецЕсли;
		
		// Ошибки заполнения Титульного листа.
		РазделОшибок = "Титульный";
		ОшибкиТитульного = ТаблСообщений.НайтиСтроки(Новый Структура("Раздел", РазделОшибок));
		ОшибкиТитульного = ТаблСообщений.Скопировать(ОшибкиТитульного);
		
		Если ОшибкиТитульного.Количество() > 0 Тогда
		
			// Выводим общий заголовок.
			Если НЕ ТолькоДляСведения Тогда
			
				Секция_ЗаголовокОшибкиТитульногоЛиста = МакетОформления.ПолучитьОбласть("ЗаголовокОшибкиТитульногоЛиста");
				ПредставлениеОшибок.Вывести(Секция_ЗаголовокОшибкиТитульногоЛиста);
				
				ПредставлениеОшибок.НачатьГруппуСтрок();			
				ПредставлениеОшибок.Вывести(Секция_ОтступПередОшибками);
				
				Секция_ИсправлениеОшибкиТитульногоЛиста = МакетОформления.ПолучитьОбласть("ИсправлениеОшибкиТитульногоЛиста");
			    ПредставлениеОшибок.Вывести(Секция_ИсправлениеОшибкиТитульногоЛиста);	
			
			КонецЕсли; 
						
			ВывестиОшибки(ОшибкиТитульного, МакетОформления, ПредставлениеОшибок);
			
			Если НЕ ТолькоДляСведения Тогда
				ПредставлениеОшибок.ЗакончитьГруппуСтрок();
			КонецЕсли;
			
			ПредставлениеОшибок.Вывести(Секция_РазрывСекций);
			
		КонецЕсли; 
		
		// Ошибки заполнения Лицензии.
		РазделОшибок = "Лицензии";
		ОшибкиЛицензии = ТаблСообщений.НайтиСтроки(Новый Структура("Раздел", РазделОшибок));
		ОшибкиЛицензии = ТаблСообщений.Скопировать(ОшибкиЛицензии);
		
		Если ОшибкиЛицензии.Количество() > 0 Тогда
		
			// Выводим общий заголовок.
			Если НЕ ТолькоДляСведения Тогда
				
				Секция_ЗаголовокОшибкиЛицензии = МакетОформления.ПолучитьОбласть("ЗаголовокОшибкиЛицензии");
				ПредставлениеОшибок.Вывести(Секция_ЗаголовокОшибкиЛицензии);
				
				ПредставлениеОшибок.НачатьГруппуСтрок();			
				ПредставлениеОшибок.Вывести(Секция_ОтступПередОшибками);
				
				Секция_ИсправлениеОшибкиЛицензии = МакетОформления.ПолучитьОбласть("ИсправлениеОшибкиЛицензии");
			    ПредставлениеОшибок.Вывести(Секция_ИсправлениеОшибкиЛицензии);
			КонецЕсли;
			
			ВывестиОшибки(ОшибкиЛицензии, МакетОформления, ПредставлениеОшибок);
			
			Если НЕ ТолькоДляСведения Тогда
				ПредставлениеОшибок.ЗакончитьГруппуСтрок();
			КонецЕсли;
			
			ПредставлениеОшибок.Вывести(Секция_РазрывСекций);
			
		КонецЕсли;
		
		// Ошибки заполнения Раздел 1.
		РазделОшибок = "Декларация";
		ОшибкиРаздела = ТаблСообщений.НайтиСтроки(Новый Структура("Раздел", РазделОшибок));
		ОшибкиРаздела = ТаблСообщений.Скопировать(ОшибкиРаздела);
		
		Если ОшибкиРаздела.Количество() > 0 Тогда
		
			// Выводим общий заголовок.
			Если НЕ ТолькоДляСведения Тогда
				
				Секция_ЗаголовокОшибки = МакетОформления.ПолучитьОбласть("ЗаголовокОшибкиДекларация");
				ПредставлениеОшибок.Вывести(Секция_ЗаголовокОшибки);
				
				ПредставлениеОшибок.НачатьГруппуСтрок();			
				ПредставлениеОшибок.Вывести(Секция_ОтступПередОшибками);
				
				Секция_ИсправлениеОшибки = МакетОформления.ПолучитьОбласть("ИсправлениеОшибкиДекларация");
			    ПредставлениеОшибок.Вывести(Секция_ИсправлениеОшибки);
				
			КонецЕсли;
			
			ВывестиОшибки(ОшибкиРаздела, МакетОформления, ПредставлениеОшибок);
			
			Если НЕ ТолькоДляСведения Тогда
				ПредставлениеОшибок.ЗакончитьГруппуСтрок();
			КонецЕсли;
			
			ПредставлениеОшибок.Вывести(Секция_РазрывСекций);
			
		КонецЕсли;
				
	КонецЕсли;
	
	Возврат ПредставлениеОшибок;
	
КонецФункции

Процедура ВывестиОшибки(ТаблОшибок, МакетОформления, ПредставлениеОшибок)

	Секция_СтандартнаяОшибка = МакетОформления.ПолучитьОбласть("СтандартнаяОшибка");
	Секция_РазрывСекций    = МакетОформления.ПолучитьОбласть("РазрывСекций");
	Секция_ОтступПередОшибками = МакетОформления.ПолучитьОбласть("ОтступПередОшибками");
	
	Пока ТаблОшибок.Количество() > 0 Цикл
	    		
		ТипОшибки = ТаблОшибок[0].ТипОшибки;
		
		ОшибкиПоТипу = ТаблОшибок.НайтиСтроки(Новый Структура("ТипОшибки", ТипОшибки));
		
		Секция_ЗаголовокОшибки = МакетОформления.ПолучитьОбласть("Заголовок" + ТипОшибки);
		ПредставлениеОшибок.Вывести(Секция_ЗаголовокОшибки);
		
		ПредставлениеОшибок.НачатьГруппуСтрок(); // описание исправления ошибки сворачивается вместе с контрагентами
		
		Секция_ИсправлениеОшибки = МакетОформления.ПолучитьОбласть("Исправление" + ТипОшибки);
		ПредставлениеОшибок.Вывести(Секция_ИсправлениеОшибки);
		
		ПредставлениеОшибок.Вывести(Секция_ОтступПередОшибками);
		
		Для каждого Ошибка Из ОшибкиПоТипу Цикл
		
			ПозицияПерехода = Новый Структура;
			ПозицияПерехода.Вставить("Раздел", Ошибка.Раздел);
			ПозицияПерехода.Вставить("Показатель", Ошибка.ИмяЯчейки);
			ПозицияПерехода.Вставить("Страница", Ошибка.Страница);
			
			Секция_СтандартнаяОшибка.Параметры.ПредставлениеОшибки = Ошибка.Описание;
			Секция_СтандартнаяОшибка.Параметры.ПозицияПерехода     = ПозицияПерехода;
			ПредставлениеОшибок.Вывести(Секция_СтандартнаяОшибка);
			
			ТаблОшибок.Удалить(Ошибка);
		
		КонецЦикла; 
		
		ПредставлениеОшибок.ЗакончитьГруппуСтрок();
		ПредставлениеОшибок.Вывести(Секция_РазрывСекций);
		
	КонецЦикла; 

КонецПроцедуры

#КонецОбласти


#Область Выгрузка

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки, ИмяФайлаXML = Неопределено)
	
	Кодировка = "windows-1251";
		
    // пишем в строку или в файл, если передано имя файла XML
	ПотокXML = РегламентированнаяОтчетностьАЛКО.СоздатьНовыйПотокXML(Кодировка, ИмяФайлаXML);
		
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	
	СтрокаИмениФайла = Символы.ПС + "<!-- ИдФайл=""" + ПараметрыВыгрузки.ИдФайл + """ -->";
	ПотокXML.ЗаписатьБезОбработки(СтрокаИмениФайла);
		
	// Получаем текст XML или закрываем файл.
	// В случае записи в файл возвращается пустая строка.
	ТекстДляЗаписи = ПотокXML.Закрыть();
	
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) 
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция ВыгрузитьОтчет(ПараметрыДокумента) Экспорт

	ЭтоВыгрузка = Истина;
	
	Результат = ПроверитьВыгрузку(ПараметрыДокумента, ЭтоВыгрузка);
	
	Если Результат.ТаблицаСообщений.Количество() > 0 Тогда
		
	    // Есть сообщения о ошибках
		Возврат Результат;
	
	КонецЕсли; 
	
	// Все хорошо, проверка прошла успешно
	// Если объеданных большой - пишем XML в файл, иначе в строку
	ИмяФайлаXML = Неопределено;
	ВсегоСтрокВОтчете = ВсегоСтрокПоДекларации;
	
	// расширение по умолчанию - .tmp
	ИмяФайлаXML = ПолучитьИмяВременногоФайла();	
	
	Текст = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки, ИмяФайлаXML);
	
	// информируем о ходе выполнения				
	Если НужноОбработатьСтрок > 0 Тогда
		
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("", 100, 100);
		
	КонецЕсли;
	
	Результат.Вставить("ИмяФайлаXML", ИмяФайлаXML);
	
	Возврат Результат;
		
КонецФункции
 
#КонецОбласти 


#Область Печать

Функция ПечататьРаздел(СтрокаРаздела, ЧтоИскать = Неопределено)
	Перем КлючФизЛица;
	
	Если ЧтоИскать <> Неопределено Тогда
		Возврат 1;
	КонецЕсли;
	
	// Если в настройках взведен флаг печати, то добавляем раздел в список печатаемых и выходим.
	Если СтрокаРаздела.ВыводНаПечать <> 0 Тогда
		СтруктураРеквизитовФормы.мПечатаемыеРазделы.Добавить(СтрокаРаздела.ИмяСтраницы);
		Возврат 1;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

Функция ПечатьОтчета(ПараметрыДокумента)  Экспорт
	
	ДокументСсылкаАлкоОтчет		= ПараметрыДокумента.ДокументСсылка;

	ИмяФормыОбъекта				= ПараметрыДокумента.ИмяФормыОбъекта;
	ВспомогательныйАдрес		= ПараметрыДокумента.ВспомогательныйАдрес;
	ПараметрыФормы				= ПараметрыДокумента.ПараметрыФормы;
	
	ВидПечати					= ПараметрыДокумента.ВидПечати;
	
	ТаблицаСтраницыЛицензии = ПараметрыФормы.ТаблицаСтраницыЛицензии;
	ТаблицаСтраницыДекларация  = ПараметрыФормы.ТаблицаСтраницыДекларация;
		
	ТабП0000000002 				= ПараметрыФормы.ТабП0000000002;
	ТабП0000100003 				= ПараметрыФормы.ТабП0000100003;
	
	СтруктураСервисРегистров 	= ПараметрыФормы.СтруктураСервисРегистров;
	
	СтруктураРеквизитовФормы = ПараметрыФормы.СтруктураРеквизитовФормы;
	
	ВсегоСтрокПоЛицензиям = ПолучитьКоличествоСтрокПоГруппе(СтруктураРеквизитовФормы.мИдГруппы01, Истина);
	ВсегоСтрокПоДекларации = ПолучитьКоличествоСтрокПоГруппе(СтруктураРеквизитовФормы.мИдГруппы12, Истина);
	
	
	// Один проход при выводе в целом по организации,
	// второй - при выводе по ОП
	// Лицензии выводятся один раз.
	// Все это в 2 кратном размере, поскольку сначала вся информация отбирается в запросе.
	НужноОбработатьСтрок = (2*ВсегоСтрокПоДекларации + ВсегоСтрокПоЛицензиям)*2;
	
	ОбработаноСтрок = 0;
	
	Если ВидПечати = "ПечатьФайлZIP" Тогда
		
	    ТипЭкспорта = СтруктураРеквизитовФормы.ТипЭкспорта;
		
		Если ТипЭкспорта = ТипФайлаТабличногоДокумента.PDF Тогда
		    ПроцентБезКонвертацииАрхивации = 14;
		ИначеЕсли ТипЭкспорта = ТипФайлаТабличногоДокумента.XLSX Тогда
			ПроцентБезКонвертацииАрхивации = 55;
		ИначеЕсли ТипЭкспорта = ТипФайлаТабличногоДокумента.MXL Тогда
			// Только сжать.
			ПроцентБезКонвертацииАрхивации = 95;
		ИначеЕсли ТипЭкспорта = ТипФайлаТабличногоДокумента.HTML Тогда
			ПроцентБезКонвертацииАрхивации = 20;
		КонецЕсли; 
		
	Иначе
		ПроцентБезКонвертацииАрхивации = 100;
	КонецЕсли; 
	
	СтруктураДанныхТитульный = ПараметрыФормы.СтруктураДанныхТитульный;
	мДеревоВыбранныхСтраниц  = ПараметрыФормы.мДеревоВыбранныхСтраниц;
	НомерКорректировки		 = ПараметрыФормы.НомерКорректировки;
	ДополнительныеДанные	 = ПараметрыФормы.ДополнительныеДанные;
	ДатаПодписи				 = ПараметрыФормы.ДатаПодписи;
	
	СтруктураПараметров = Новый Структура;
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		
		Пометка = ПечататьРаздел(СтрокаУровня1);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если Пометка = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяСтраницы",        ИмяСтраницыПанели);
		СтруктураПараметров.Вставить("ИмяРаздела",        ИмяСтраницыПанели);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ИмяФормыОбъекта",    ИмяФормыОбъекта);

		
		Если ИмяСтраницыПанели = "Титульный" Тогда
			
			ВывестиНаПечатьТитульный(СтруктураПараметров);	
			
		ИначеЕсли ИмяСтраницыПанели = "Декларация" Тогда
			
			ВывестиНаПечатьДекларация(СтруктураПараметров);
							
		ИначеЕсли ИмяСтраницыПанели = "Лицензии" Тогда
			
			ВывестиНаПечатьРазделЛицензии(СтруктураПараметров);
		
		КонецЕсли;
		
	КонецЦикла;
	
	// Информируем о ходе выполнения.				
	Если НужноОбработатьСтрок > 0 Тогда
				
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(
		?(ВидПечати = "ПечатьФайлZIP" , "Конвертация в выбранный формат и архивация.", ""), 
		НужноОбработатьСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации);
		
	КонецЕсли;
	
	Возврат СтруктураРеквизитовФормы;
	
КонецФункции

Процедура ВывестиНаПечатьТитульный(СтруктураПараметровСтраницы)
	
	НастройкиСтраницы = Новый Структура;
		
	НастройкиСтраницы.Вставить("ОтображатьЗаголовки", 	Ложь);
	НастройкиСтраницы.Вставить("ОтображатьСетку", 		Ложь);
	НастройкиСтраницы.Вставить("ЧерноБелыйПросмотр", 	Истина);
	НастройкиСтраницы.Вставить("ЧерноБелаяПечать", 		Истина);
	НастройкиСтраницы.Вставить("Автомасштаб", 			Истина);
	НастройкиСтраницы.Вставить("ОриентацияСтраницы", 	ОриентацияСтраницы.Портрет);
	НастройкиСтраницы.Вставить("ПолеСверху", 			5);
	НастройкиСтраницы.Вставить("ПолеСнизу", 			5);
	НастройкиСтраницы.Вставить("ПолеСлева", 			5);
	НастройкиСтраницы.Вставить("ПолеСправа", 			5);
	
	СтруктураПараметровСтраницы.Вставить("НастройкиСтраницы", 			НастройкиСтраницы);
	СтруктураПараметровСтраницы.Вставить("СтруктураДанныхТитульный", 	СтруктураДанныхТитульный);
	СтруктураПараметровСтраницы.Вставить("ВерсияМакетаПечати", 			"");
	
	РегламентированнаяОтчетностьАЛКО.ВывестиНаПечатьТитульный(	
		СтруктураПараметровСтраницы, СтруктураРеквизитовФормы, ОбъектЭтогоОтчета);
								
КонецПроцедуры

Процедура ВывестиНаПечатьРазделЛицензии(СтруктураПараметровСтраницы)
	
	НастройкиСтраницы = Новый Структура;
		
	НастройкиСтраницы.Вставить("ОтображатьЗаголовки", 	Ложь);
	НастройкиСтраницы.Вставить("ОтображатьСетку", 		Ложь);
	НастройкиСтраницы.Вставить("ЧерноБелыйПросмотр", 	Истина);
	НастройкиСтраницы.Вставить("ЧерноБелаяПечать", 		Истина);
	НастройкиСтраницы.Вставить("Автомасштаб", 			Истина);
	НастройкиСтраницы.Вставить("ОриентацияСтраницы", 	ОриентацияСтраницы.Портрет);
	НастройкиСтраницы.Вставить("ПолеСверху", 			10);
	НастройкиСтраницы.Вставить("ПолеСнизу", 			5);
	НастройкиСтраницы.Вставить("ПолеСлева", 			5);
	НастройкиСтраницы.Вставить("ПолеСправа", 			5);
	
	СтруктураПараметровСтраницы.Вставить("НастройкиСтраницы", 				НастройкиСтраницы);
	СтруктураПараметровСтраницы.Вставить("СтруктураДанныхТитульный", 		СтруктураДанныхТитульный);
	СтруктураПараметровСтраницы.Вставить("СтруктураСервисРегистров", 		СтруктураСервисРегистров);
	СтруктураПараметровСтраницы.Вставить("ТаблицаСтраницыЛицензии", 		ТаблицаСтраницыЛицензии);
	СтруктураПараметровСтраницы.Вставить("НужноОбработатьСтрок", 			НужноОбработатьСтрок);
	СтруктураПараметровСтраницы.Вставить("ПроцентБезКонвертацииАрхивации", 	ПроцентБезКонвертацииАрхивации);	
	СтруктураПараметровСтраницы.Вставить("ВерсияМакетаПечати", 				"");
		
	РегламентированнаяОтчетностьАЛКО.ВывестиНаПечатьРазделЛицензии(
		СтруктураПараметровСтраницы, СтруктураРеквизитовФормы,
		ОбработаноСтрок, ОбъектЭтогоОтчета);
				
КонецПроцедуры

Процедура ВывестиНаПечатьДекларация(СтруктураПараметровСтраницы)
	
	// В структуре СтруктураПараметровСтраницы уже установлены свойства 
	// ИмяФормыОбъекта, ИмяРаздела, НаименованиеЛиста - в процедуре ПечатьОтчета().
	
	СтруктураПараметровСтраницы.Вставить("ВерсияМакетаПечати", 			"");
	СтруктураПараметровСтраницы.Вставить("СтруктураДанныхТитульный", 	СтруктураДанныхТитульный);
	СтруктураПараметровСтраницы.Вставить("СтруктураСервисРегистров", 	СтруктураСервисРегистров);
	СтруктураПараметровСтраницы.Вставить("ДополнительныеДанные", 		ДополнительныеДанные);
	СтруктураПараметровСтраницы.Вставить("ТаблицаСтраницыРаздела", 		ТаблицаСтраницыДекларация);
	
	// Настройки листа.
	НастройкиСтраницы = Новый Структура;		
	НастройкиСтраницы.Вставить("ОтображатьЗаголовки", 	Ложь);
	НастройкиСтраницы.Вставить("ОтображатьСетку", 		Ложь);
	НастройкиСтраницы.Вставить("ЧерноБелыйПросмотр", 	Истина);
	НастройкиСтраницы.Вставить("ЧерноБелаяПечать", 		Истина);
	НастройкиСтраницы.Вставить("Автомасштаб", 			Истина);
	НастройкиСтраницы.Вставить("ОриентацияСтраницы", 	ОриентацияСтраницы.Портрет);
	НастройкиСтраницы.Вставить("ПолеСверху", 			10);
	НастройкиСтраницы.Вставить("ПолеСнизу", 			5);
	НастройкиСтраницы.Вставить("ПолеСлева", 			5);
	НастройкиСтраницы.Вставить("ПолеСправа", 			5);
		
	СтруктураПараметровСтраницы.Вставить("НастройкиСтраницы", НастройкиСтраницы);
	
	// Высоты в стандартных строках с установленным свойством "Автовысота" (11,25).
	// Вычисляются методом пробной печати заведомо большого количества строк.
	// Например ВысотаСтраницыВСтроках = 120 и строк в отчете 200, значения короткие чтобы в одну строку 
	// помещались в поле.
	// После печати считается сколько поместилось на странице, с учетом что некоторые строки высотой в 2-3
	// "стандартных" - это и есть правильная ВысотаСтраницыВСтроках. 
	// Лучше ставить с небольшим запасом, в меньшую сторону. Если строк на листе вышло 100, лучше поставить 95.
	// Остальные высоты считаются по макету - сколько стандартных строк по высоте занимают.
	СтруктураВысот = Новый Структура;
	СтруктураВысот.Вставить("ВысотаСтраницыВСтроках", 			80);
	СтруктураВысот.Вставить("Высота_НомерСтраницыВСтроках", 	1);
	СтруктураВысот.Вставить("Высота_ЗаголовокЛистаВСтроках", 	3);
	СтруктураВысот.Вставить("Высота_ПустаяСтрокаВСтроках", 		1);
	СтруктураВысот.Вставить("Высота_ЗаголовокТаблицыВСтроках", 	11);
	СтруктураВысот.Вставить("Высота_СтрокаОПВСтроках", 			2);
	СтруктураВысот.Вставить("Высота_ПодвалВСтроках", 			0);
	
	СтруктураПараметровСтраницы.Вставить("СтруктураВысот", СтруктураВысот);
	
	
		
	НастройкиАлгоритмаПечати = Новый Структура;
	
	/////////////////////////////////////////////////////////////
	// Общие настройки печати по разделу.
	/////////////////////////////////////////////////////////////
	
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиПустаяСтрока", 			"ПустаяСтрока");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиПодвал", 					"");
	
    Если СтруктураДанныхТитульный.ЭтоПБОЮЛ Тогда
		
	    НастройкиАлгоритмаПечати.Вставить("ИмяОбластиОргДиректор", 				"ИндивидуальныйПредприниматель");
		НастройкиАлгоритмаПечати.Вставить("ИмяОбластиОргБухгалтер", 			"");
		
	Иначе
				
	    НастройкиАлгоритмаПечати.Вставить("ИмяОбластиОргДиректор", 				"ОргДиректор");	
	    НастройкиАлгоритмаПечати.Вставить("ИмяОбластиОргБухгалтер", 			"ОргБухгалтер");
		
	КонецЕсли;
	
	НастройкиАлгоритмаПечати.Вставить("ВыводитьСводнуюТаблицуПоОрганизацииВЦелом", 	Истина);
	НастройкиАлгоритмаПечати.Вставить("ВыводитьВозвратыЗаДекларацией", 				Ложь);
	// Описание заголовка и шапки таблицы.
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиНомерСтраницы", 			"НомерСтраницы");	
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиЗаголовокЛиста", 			"ЗаголовокЛиста");	
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиЗаголовокТаблицы", 		"ЗаголовокТаблицы");
	
	// СписокПереносимыхПолей - список, значения которого - количество стандартных символов, помещающихся в 
	// в одну строчку по длине поля ,при шрифте и величине шрифта, установленных для поля в макете в области
	// "СтрокаТаблицы" или аналогичном.	
	// В представлении элементов списка хранится имена ИмяПоляПереносимойСтроки, т.е поля,
	// в котором слова могут переносится на следующую строку, если не хватает длины.
	// Строка "СтрокаТаблицы" или аналогичная должна иметь настройку АвтовысотаСтроки = Истина.
	//
	// В списке указываются поля с привязкой к ИДгруппы таблицы раздела (ресурсов в регистре).
	// Действуют и на общую часть по организации и на часть по ОП.
	СписокПереносимыхПолей = Новый СписокЗначений;
	СписокПереносимыхПолей.Добавить(28, "П000010000301");
	
	
	НастройкиАлгоритмаПечати.Вставить("СписокПереносимыхПолей", 			СписокПереносимыхПолей);
		
	// Описание областей макета, выводящих строки общей информации по ОП и организации.
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиСтрокаОП", 				"СтрокаОП");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиСтрокаОрг",				"СтрокаОП");
	
	// Описание областей макета, выводящих строки общей информации по ОП и организации. 
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиЗаголовокРеквизитовОП", 	"ЗаголовокРеквизитов");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиЗаголовокРеквизитовОрг", 	"ЗаголовокРеквизитов");
	
	// Текст пояснения к общим сведениям по ОП и организации.
	НастройкиАлгоритмаПечати.Вставить("ЗаголовокРеквизитовОП", 
										"Сведения по организации/обособленному подразделению
										|(с указанием ИНН, КПП и адреса)");
	НастройкиАлгоритмаПечати.Вставить("ЗаголовокРеквизитовОрг", 
										"Сведения по организации/обособленному подразделению
										|(с указанием ИНН, КПП и адреса)");
	
	// Имя области в которой выводится общая информация по ОП и Организации.
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиРеквизитовОП", 			"ОП");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиРеквизитовОрг", 			"ОП");
		
	// Информация по колонкам группировки, суммирования и запрету вывода.
	// Используется при выводе строк по организации - выводить "как есть" или сворачивать
	// по определенным полям.
	//
	// Пустая строка колонок группировки и суммирования означает автоопределение 
	// - все что не числа - колонки группировки.
	// - все что числа - колонки суммирования.
	//
	// Значение "Не сворачивать" или "НеСворачивать" в колонках группировки вместо списка колонок
	// предотвращает сворачивание, независимо от значения колонок суммирования.
	
	НастройкиАлгоритмаПечати.Вставить("КолонкиГруппировокОрг", "01,02,03");	 
	НастройкиАлгоритмаПечати.Вставить("КолонкиСуммированияОрг", "04,05,06,07,08");	
	НастройкиАлгоритмаПечати.Вставить("КолонкиНеВыводитьОрг", "");
	
	/////////////////////////////////////////////////////////////
	// Алгоритм печати строк ОП.
	/////////////////////////////////////////////////////////////
	
	НастройкиАлгоритмаПечатиСтрокОП = Новый Структура;
	НастройкиАлгоритмаПечатиСтрокОП.Вставить("ИдГруппыОбластиСтрокаМакета", "П0000100003");
	НастройкиАлгоритмаПечатиСтрокОП.Вставить("ИмяОбластиНомера", "П000010000300");				
	НастройкиАлгоритмаПечатиСтрокОП.Вставить("ИмяОбластиСтрокаТаблицы", "СтрокаТаблицы");
	
	СписокСтруктурИнформацииИтогов = Новый СписокЗначений;
		
	СтруктураИнформацииИтога2 = Новый Структура;
	СтруктураИнформацииИтога2.Вставить("ИдГруппыОбластейМакетаИтоги", "П0000100004");
	СтруктураИнформацииИтога2.Вставить("ИмяОбластиСтрокаИтогов", "СтрокаИтого");
	СтруктураИнформацииИтога2.Вставить("ИмяОбластиРазмещенияПояснения", "ОписаниеИтого");
	СтруктураИнформацииИтога2.Вставить("ТекстПояснения", "ИТОГО");
	СтруктураИнформацииИтога2.Вставить("КолонкиГруппировок", "");
	СтруктураИнформацииИтога2.Вставить("КолонкиСуммирования", "04,05,06,07,08");
	
	СписокСтруктурИнформацииИтогов.Добавить(СтруктураИнформацииИтога2, "1");
	
	НастройкиАлгоритмаПечатиСтрокОП.Вставить("СписокСтруктурИнформацииИтогов", СписокСтруктурИнформацииИтогов);
	
	НастройкиАлгоритмаПечати.Вставить("НастройкиАлгоритмаПечатиСтрокОП", НастройкиАлгоритмаПечатиСтрокОП);
	
	/////////////////////////////////////////////////////////////
	// Алгоритм печати строк Организации.
	/////////////////////////////////////////////////////////////
	
	НастройкиАлгоритмаПечатиСтрокОрг = Новый Структура;
	НастройкиАлгоритмаПечатиСтрокОрг.Вставить("ИдГруппыОбластиСтрокаМакета", "П0000100003");
	НастройкиАлгоритмаПечатиСтрокОрг.Вставить("ИмяОбластиНомера", "П000010000300");				
	НастройкиАлгоритмаПечатиСтрокОрг.Вставить("ИмяОбластиСтрокаТаблицы", "СтрокаТаблицы");
	
	СписокСтруктурИнформацииИтоговОрг = Новый СписокЗначений;
	
	СтруктураИнформацииИтога2 = Новый Структура;
	СтруктураИнформацииИтога2.Вставить("ИдГруппыОбластейМакетаИтоги", "П0000100004");
	СтруктураИнформацииИтога2.Вставить("ИмяОбластиСтрокаИтогов", "СтрокаИтого");
	СтруктураИнформацииИтога2.Вставить("ИмяОбластиРазмещенияПояснения", "ОписаниеИтого");
	СтруктураИнформацииИтога2.Вставить("ТекстПояснения", "ИТОГО");
	СтруктураИнформацииИтога2.Вставить("КолонкиГруппировок", "");
	СтруктураИнформацииИтога2.Вставить("КолонкиСуммирования", "04,05,06,07,08");
	
	СписокСтруктурИнформацииИтоговОрг.Добавить(СтруктураИнформацииИтога2, "1");
	
	НастройкиАлгоритмаПечатиСтрокОрг.Вставить("СписокСтруктурИнформацииИтогов", СписокСтруктурИнформацииИтоговОрг);
	
	НастройкиАлгоритмаПечати.Вставить("НастройкиАлгоритмаПечатиСтрокОрг", НастройкиАлгоритмаПечатиСтрокОрг);
	
	/////////////////////////////////////////////////////////////
	// Конец настроек алгоритма печати
	/////////////////////////////////////////////////////////////
	
	СтруктураПараметровСтраницы.Вставить("НастройкиАлгоритмаПечати", НастройкиАлгоритмаПечати);
	
	// Заполнение данных для показа шкалы прогресса.
	СтруктураПараметровСтраницы.Вставить("НужноОбработатьСтрок", НужноОбработатьСтрок);
	СтруктураПараметровСтраницы.Вставить("ПроцентБезКонвертацииАрхивации", ПроцентБезКонвертацииАрхивации);
	
	
	РегламентированнаяОтчетностьАЛКО.ВывестиНаПечатьРазделДекларации(СтруктураПараметровСтраницы, СтруктураРеквизитовФормы,
																	ОбработаноСтрок, ОбъектЭтогоОтчета);
	
КонецПроцедуры

#КонецОбласти 


#Область ВнешнийОтчет

// Процедуры и функции этой области используются только в случае
// публикации в виде внешнего отчета.

#Область ПрограммныйИнтерфейсВнешнийОтчет

Функция ВерсияФорматаВыгрузки(Знач НаДату = Неопределено, ВыбраннаяФорма = Неопределено) Экспорт
	
	Если НаДату = Неопределено Тогда
		НаДату = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Возврат Перечисления.ВерсииФорматовВыгрузки.Версия401алко;
		
КонецФункции

Функция ТаблицаФормОтчета() Экспорт
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0));
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Дата"));
	ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);
	
	ТаблицаФормОтчета = Новый ТаблицаЗначений;
	ТаблицаФормОтчета.Колонки.Добавить("ФормаОтчета",        ОписаниеТиповСтрока);
	ТаблицаФормОтчета.Колонки.Добавить("ОписаниеОтчета",     ОписаниеТиповСтрока, "Утверждена",  20);
	ТаблицаФормОтчета.Колонки.Добавить("ДатаНачалоДействия", ОписаниеТиповДата,   "Действует с", 5);
	ТаблицаФормОтчета.Колонки.Добавить("ДатаКонецДействия",  ОписаниеТиповДата,   "         по", 5);
	ТаблицаФормОтчета.Колонки.Добавить("РедакцияФормы",      ОписаниеТиповСтрока, "Редакция формы", 20);
	
	НоваяФорма = ТаблицаФормОтчета.Добавить();
	НоваяФорма.ФормаОтчета        = "ФормаОтчета2018Кв1";
	НоваяФорма.ОписаниеОтчета     = "Приложение № 2 к Правилам представления деклараций об объеме производства, поставки и (или)" 
									+ " использования для собственных нужд фармацевтической субстанции спирта этилового (этанола)"
 									+ " (Утверждено ПП РФ от 29.12.2017 № 1694).";
	НоваяФорма.РедакцияФормы	  = "от 29.12.2017 № 1694.";
	НоваяФорма.ДатаНачалоДействия = '20171229';
	НоваяФорма.ДатаКонецДействия  = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"));
	
	Возврат ТаблицаФормОтчета;
	
КонецФункции

Функция ДанныеРеглОтчета(ЭкземплярРеглОтчета) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

Функция ДеревоФормИФорматов() Экспорт
	
	ФормыИФорматы = Новый ДеревоЗначений;
	ФормыИФорматы.Колонки.Добавить("Код");
	ФормыИФорматы.Колонки.Добавить("ДатаПриказа");
	ФормыИФорматы.Колонки.Добавить("НомерПриказа");
	ФормыИФорматы.Колонки.Добавить("ДатаНачалаДействия");
	ФормыИФорматы.Колонки.Добавить("ДатаОкончанияДействия");
	ФормыИФорматы.Колонки.Добавить("ИмяОбъекта");
	ФормыИФорматы.Колонки.Добавить("Описание");
	
	Форма20180101 = ОпределитьФормуВДеревеФормИФорматов(ФормыИФорматы, "1152035", '2017-12-29', "1694", "ФормаОтчета2018Кв1");	
	ОпределитьФорматВДеревеФормИФорматов(Форма20180101, "4.33", , , '2017-12-29');
	
	Возврат ФормыИФорматы;
	
КонецФункции
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункцииВнешнийОтчет

Функция ОпределитьФормуВДеревеФормИФорматов(ДеревоФормИФорматов, Код, ДатаПриказа = '00010101', НомерПриказа = "", ИмяОбъекта = "",
			ДатаНачалаДействия = '00010101', ДатаОкончанияДействия = '00010101', Описание = "")
	
	НовСтр = ДеревоФормИФорматов.Строки.Добавить();
	НовСтр.Код = СокрЛП(Код);
	НовСтр.ДатаПриказа = ДатаПриказа;
	НовСтр.НомерПриказа = СокрЛП(НомерПриказа);
	НовСтр.ДатаНачалаДействия = ДатаНачалаДействия;
	НовСтр.ДатаОкончанияДействия = ДатаОкончанияДействия;
	НовСтр.ИмяОбъекта = СокрЛП(ИмяОбъекта);
	НовСтр.Описание = СокрЛП(Описание);
	Возврат НовСтр;
	
КонецФункции

Функция ОпределитьФорматВДеревеФормИФорматов(Форма, Версия, ДатаПриказа = '00010101', НомерПриказа = "",
			ДатаНачалаДействия = Неопределено, ДатаОкончанияДействия = Неопределено, ИмяОбъекта = "", Описание = "")
	
	НовСтр = Форма.Строки.Добавить();
	НовСтр.Код = СокрЛП(Версия);
	НовСтр.ДатаПриказа = ДатаПриказа;
	НовСтр.НомерПриказа = СокрЛП(НомерПриказа);
	НовСтр.ДатаНачалаДействия = ?(ДатаНачалаДействия = Неопределено, Форма.ДатаНачалаДействия, ДатаНачалаДействия);
	НовСтр.ДатаОкончанияДействия = ?(ДатаОкончанияДействия = Неопределено, Форма.ДатаОкончанияДействия, ДатаОкончанияДействия);
	НовСтр.ИмяОбъекта = СокрЛП(ИмяОбъекта);
	НовСтр.Описание = СокрЛП(Описание);
	Возврат НовСтр;
	
КонецФункции

#КонецОбласти

 мВерсияОтчета = "БПКОРП 3.0.42.54.4";
 
#КонецОбласти 


#КонецОбласти

#КонецЕсли






 