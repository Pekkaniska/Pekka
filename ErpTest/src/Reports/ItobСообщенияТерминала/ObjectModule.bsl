
#Область ПрограммныйИнтерфейс

// Функция выполняет формирование табличного документа отчета.
//
Функция СформироватьОтчетСообщенияОтТерминала(НачПериода, КонПериода, Терминал)
			
	ТабДок = Новый ТабличныйДокумент;
			
	Макет = ПолучитьМакет("Макет");
	
	ОбластьШапка         = Макет.ПолучитьОбласть("Шапка|База");
	ОбластьДетали        = Макет.ПолучитьОбласть("Детали|База");
	ОбластьШапкаДатчик = Макет.ПолучитьОбласть("Шапка|Датчик");
	ОбластьДеталиДатчик = Макет.ПолучитьОбласть("Детали|Датчик");
		
	ОбластьШапка.Параметры.ЗаголовокОтчета = НСтр("ru = 'Сообщения от терминала за'")+" "+ПредставлениеПериода(НачПериода, КонПериода);
	ОбластьШапка.Параметры.Объект = "Терминал: "+Терминал;	
	ТабДок.Вывести(ОбластьШапка);
	
	ШиринаТаб0 = ТабДок.ШиринаТаблицы;
	
	ПараметрыСдвигаВремени = ItobОперативныйМониторингКлиентСервер.ПолучитьПараметрыСдвигаВремени();
	
	ЗапросБазовыеДанные = Новый Запрос;
	ЗапросБазовыеДанные.УстановитьПараметр("Терминал", Терминал);
	ЗапросБазовыеДанные.УстановитьПараметр("КодТерминала", Терминал.Код);
	ЗапросБазовыеДанные.УстановитьПараметр("НачДата", ItobОперативныйМониторингКлиентСервер.ПривестиКДатеВремениПоГринвичу(НачПериода));
	ЗапросБазовыеДанные.УстановитьПараметр("КонДата", ItobОперативныйМониторингКлиентСервер.ПривестиКДатеВремениПоГринвичу(КонПериода));
	
	Если ItobВызовСервераПовтИсп.ДанныеТерминаловБратьИзБазыIMCS() Тогда
		ЗапросБазовыеДанные.Текст = "ВЫБРАТЬ
		                            |	ДанныеТерминалов.Период,
		                            |	ДанныеТерминалов.Широта,
		                            |	ДанныеТерминалов.Долгота,
		                            |	ДанныеТерминалов.Скорость,
		                            |	ДанныеТерминалов.Направление,
		                            |	ДанныеТерминалов.ЧислоСпутников,
		                            |	ВЫБОР
		                            |		КОГДА ДанныеТерминалов.ЧислоСпутников < 3
		                            |			ТОГДА ИСТИНА
		                            |		ИНАЧЕ ЛОЖЬ
		                            |	КОНЕЦ КАК НевалидныеДанные,
		                            |	ДанныеТерминалов.ДанныеДатчиков
		                            |ИЗ
		                            |	ВнешнийИсточникДанных.ItobДанныеСервераСбораДанных.Таблица.ItobДанныеТерминаловIMCS КАК ДанныеТерминалов
		                            |ГДЕ
		                            |	ДанныеТерминалов.Период МЕЖДУ &НачДата И &КонДата
		                            |	И ДанныеТерминалов.КодТерминала = &КодТерминала";
		ВнешниеИсточникиДанных.ItobДанныеСервераСбораДанных.НачатьТранзакцию(,УровеньИзоляцииТранзакций.ЧтениеНезафиксированных);
		РезультатБазовогоЗапроса = ЗапросБазовыеДанные.Выполнить();
		// Без метода отмены транзакции, так как используется только чтение данных из внешнего источника данных.
		ВнешниеИсточникиДанных.ItobДанныеСервераСбораДанных.ЗафиксироватьТранзакцию();
	Иначе
		ЗапросБазовыеДанные.Текст = "ВЫБРАТЬ
		                            |	ДанныеТерминалов.Период,
		                            |	ДанныеТерминалов.Широта,
		                            |	ДанныеТерминалов.Долгота,
		                            |	ДанныеТерминалов.Скорость,
		                            |	ДанныеТерминалов.Направление,
		                            |	ДанныеТерминалов.ЧислоСпутников,
		                            |	ДанныеТерминалов.НевалидныеДанные,
		                            |	ДанныеТерминалов.ДанныеДатчиков
		                            |ИЗ
		                            |	РегистрСведений.ItobДанныеТерминалов КАК ДанныеТерминалов
		                            |ГДЕ
		                            |	ДанныеТерминалов.Период МЕЖДУ &НачДата И &КонДата
		                            |	И ДанныеТерминалов.Терминал = &Терминал";
		РезультатБазовогоЗапроса = ЗапросБазовыеДанные.Выполнить();	
	КонецЕсли;					   
	
	ТаблицаБазовыхДанных = РезультатБазовогоЗапроса.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СдвигВремени", ПараметрыСдвигаВремени.СдвигВремени);
	Запрос.УстановитьПараметр("ВариантПереводаНаЛетнееВремя", ПараметрыСдвигаВремени.ВариантПереводаВремени);
	Запрос.УстановитьПараметр("СдвигЛетнееВремя", ПараметрыСдвигаВремени.СдвигЛетнееВремя);
	Запрос.УстановитьПараметр("ТаблицаБазовыхДанных", ТаблицаБазовыхДанных);
	Запрос.УстановитьПараметр("Терминал", Терминал);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаБазовыхДанных.Период КАК ПериодUTC0,
	               |	ТаблицаБазовыхДанных.Широта,
	               |	ТаблицаБазовыхДанных.Долгота,
	               |	ТаблицаБазовыхДанных.Скорость,
	               |	ТаблицаБазовыхДанных.Направление,
	               |	ТаблицаБазовыхДанных.ЧислоСпутников,
	               |	ТаблицаБазовыхДанных.НевалидныеДанные,
	               |	ТаблицаБазовыхДанных.ДанныеДатчиков
	               |ПОМЕСТИТЬ ДанныеТерминалов
	               |ИЗ
	               |	&ТаблицаБазовыхДанных КАК ТаблицаБазовыхДанных
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДанныеТерминалов.ПериодUTC0, СЕКУНДА, &СдвигВремени), СЕКУНДА, ВЫБОР
	               |			КОГДА &ВариантПереводаНаЛетнееВремя = ЗНАЧЕНИЕ(Перечисление.ItobВариантыПереводаВремени.Европейский)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ДанныеТерминалов.ПериодUTC0 МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДанныеТерминалов.ПериодUTC0, ГОД), МЕСЯЦ, 3), НЕДЕЛЯ), НЕДЕЛЯ, -1), ДЕНЬ), ЧАС, 2) И ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДанныеТерминалов.ПериодUTC0, ГОД), МЕСЯЦ, 10), НЕДЕЛЯ), НЕДЕЛЯ, -1), ДЕНЬ), ЧАС, 2)
	               |							ТОГДА &СдвигЛетнееВремя
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |			КОГДА &ВариантПереводаНаЛетнееВремя = ЗНАЧЕНИЕ(Перечисление.ItobВариантыПереводаВремени.Американский)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ДанныеТерминалов.ПериодUTC0 МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДанныеТерминалов.ПериодUTC0, ГОД), МЕСЯЦ, 2), НЕДЕЛЯ), НЕДЕЛЯ, 1), ДЕНЬ), ЧАС, 2) И ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДанныеТерминалов.ПериодUTC0, ГОД), МЕСЯЦ, 10), НЕДЕЛЯ), НЕДЕЛЯ, 0), ДЕНЬ), ЧАС, 2)
	               |							ТОГДА &СдвигЛетнееВремя
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК Период,
	               |	ДанныеТерминалов.Широта КАК Широта,
	               |	ДанныеТерминалов.Долгота КАК Долгота,
	               |	ДанныеТерминалов.Скорость КАК Скорость,
	               |	ДанныеТерминалов.Направление КАК Направление,
	               |	ДанныеТерминалов.ЧислоСпутников КАК ЧислоСпутников,
	               |	ДанныеТерминалов.НевалидныеДанные КАК НевалидныеДанные,
	               |	ДанныеТерминалов.ДанныеДатчиков,
	               |	ЕСТЬNULL(ДанныеТерминаловДополнения.ДанныеВиртуальныхДатчиков, """") КАК ДанныеВиртуальныхДатчиков,
	               |	ДанныеТерминалов.ПериодUTC0 КАК ПериодUTC0
	               |ИЗ
	               |	ДанныеТерминалов КАК ДанныеТерминалов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ItobДанныеТерминаловДополнения КАК ДанныеТерминаловДополнения
	               |		ПО (ДанныеТерминаловДополнения.ДатаВремя = ДанныеТерминалов.ПериодUTC0)
	               |			И (ДанныеТерминаловДополнения.Терминал = &Терминал)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПериодUTC0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ДанныеТерминалов";	
				   
	ТабДанных = Запрос.Выполнить().Выгрузить();
	
	ТабДатчиков = Новый ТаблицаЗначений;
	ТабДатчиков.Колонки.Добавить("ДатчикПредставление");
	ТабДатчиков.Колонки.Добавить("КодДатчика");
	ТабДатчиков.Колонки.Добавить("ИмяКолонкиТабДанных");
	
	МодельТерминала = Терминал.Модель;
	
	Для каждого СтрокаДанных Из ТабДанных Цикл
		СтруктураДанныеДатчиков = ItobОбщегоНазначенияКлиентСервер.ПреобразоватьСтрокуВДанныеДатчиков(СтрокаДанных.ДанныеДатчиков);
		
		Если НЕ ПустаяСтрока(СтрокаДанных.ДанныеВиртуальныхДатчиков) Тогда
			СтруктураДанныеВиртуальныхДатчиков = ItobОбщегоНазначенияКлиентСервер.ПреобразоватьСтрокуВДанныеДатчиков(СтрокаДанных.ДанныеВиртуальныхДатчиков);
			Для каждого ЭлемВиртуальныхДатчиков Из СтруктураДанныеВиртуальныхДатчиков Цикл
				СтруктураДанныеДатчиков.Вставить(ЭлемВиртуальныхДатчиков.Ключ, ЭлемВиртуальныхДатчиков.Значение);
			КонецЦикла;		
		КонецЕсли;		
		
		Для каждого ЭлементСтруктуры Из СтруктураДанныеДатчиков Цикл
			ИмяКолонки = "Датчик"+Формат(ЭлементСтруктуры.Ключ,"ЧН=0; ЧГ=0");
			Если ТабДанных.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
				ТабДанных.Колонки.Добавить(ИмяКолонки);
				
				НовСтрокаДатчиков = ТабДатчиков.Добавить();
				Датчик = Справочники.ItobДатчики.НайтиПоКоду(ЭлементСтруктуры.Ключ, Ложь,, МодельТерминала);
				Если Датчик.Пустая() Тогда
					НовСтрокаДатчиков.ДатчикПредставление = "#"+Формат(ЭлементСтруктуры.Ключ,"ЧН=0; ЧГ=0");
				Иначе
					НовСтрокаДатчиков.ДатчикПредставление = СокрЛП(Датчик);
				КонецЕсли;
				НовСтрокаДатчиков.КодДатчика = ЭлементСтруктуры.Ключ;
				НовСтрокаДатчиков.ИмяКолонкиТабДанных = ИмяКолонки;
				
			КонецЕсли;
			
			СтрокаДанных[ИмяКолонки] = ЭлементСтруктуры.Значение;
		
		КонецЦикла;		
	
	КонецЦикла;
	
	ТабДатчиков.Сортировать("КодДатчика Возр");	
	
	Для каждого СтрДатчиков Из ТабДатчиков Цикл
		ОбластьШапкаДатчик.Параметры.Датчик = СтрДатчиков.ДатчикПредставление;
		ТабДок.Присоединить(ОбластьШапкаДатчик);		
	
	КонецЦикла;
	
	Если ТабДатчиков.Количество() > 0 Тогда
		
		ОблЗаголовокДатчики = ТабДок.Область(ТабДок.ВысотаТаблицы-1, ШиринаТаб0+1, ТабДок.ВысотаТаблицы-1, ТабДок.ШиринаТаблицы);
		ОблЗаголовокДатчики.Объединить();
		ОблЗаголовокДатчики.Текст = "Датчики";	
		
	КонецЕсли;
	
	НомерПП = 1;
	Для каждого СтрокаДанных Из ТабДанных Цикл
		ОбластьДетали.Параметры.Заполнить(СтрокаДанных);	
		ОбластьДетали.Параметры.НомерПП = НомерПП;
		ТабДок.Вывести(ОбластьДетали);	
		
		Для каждого СтрДатчиков Из ТабДатчиков Цикл
			ТекЗначение = СтрокаДанных[СтрДатчиков.ИмяКолонкиТабДанных];
			ОбластьДеталиДатчик.Параметры.Значение = ?(ТекЗначение=Неопределено,"-",ТекЗначение);
			ТабДок.Присоединить(ОбластьДеталиДатчик);				
		
		КонецЦикла;
		
		НомерПП = НомерПП+1;	
	
	КонецЦикла;				   
				
	Возврат ТабДок;
	
	Выборка = РегистрыСведений.ItobАктуальностьДанныхТерминалов.Выбрать();
	Если ItobОбщегоНазначенияСервер.ВыборкаСледующий(Выборка) Тогда
	
		
	
	КонецЕсли; 
	
	
КонецФункции // СформироватьОтчетСообщенияОтТерминала()
	
#КонецОбласти

#Область ОбработчикиСобытий
  
// Процедура обработчик события "ПриКомпоновкеРезультата" объекта
//
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	
	ДокументРезультат.Вывести(СформироватьОтчетСообщенияОтТерминала(
		НачПериода,
		КонПериода,
		Терминал));
				
КонецПроцедуры // ПриКомпоновкеРезультата()
 
// Процедура - обработчик события "ОбработкаПроверкиЗаполнения".
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НачПериода > КонПериода Тогда
		ТекстОшибки = НСтр("ru='Начало периода не может быть больше даты конца периода'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			Неопределено, // ОбъектИлиСсылка
			"ItobСообщенияТерминала",
			"Отчет", // ПутьКДанным
			Отказ);
	КонецЕсли;
		
КонецПроцедуры // ОбработкаПроверкиЗаполнения()
	
#КонецОбласти
