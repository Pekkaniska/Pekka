#Область Переменные

Перем мТЗ_КэшПараметровВыработки;

#КонецОбласти 

#Область Процедуры
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ
//

// Процедура обработчик события "ПриКомпоновкеРезультата" объекта
//
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СКД = ЭтотОбъект.СхемаКомпоновкиДанных;
	
	КоллекцияЭлементовПользовательскихНастроек = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	Для Каждого ЭлементНастроек Из КоллекцияЭлементовПользовательскихНастроек Цикл
		Если ТипЗнч(ЭлементНастроек) = Тип("ОтборКомпоновкиДанных") Тогда
			КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
			Для Каждого Элемент Из ЭлементНастроек.Элементы Цикл
				Если Элемент.Использование Тогда
					НовыйЭлемент =  КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(ТипЗнч(Элемент));
					ЗаполнитьЗначенияСвойств(НовыйЭлемент,Элемент);
				КонецЕсли; 
			КонецЦикла;
		ИначеЕсли ТипЗнч(ЭлементНастроек) = Тип("ВыбранныеПоляКомпоновкиДанных") Тогда
			КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
			Для Каждого Элемент Из ЭлементНастроек.Элементы Цикл 
				Если Элемент.Использование Тогда
					НовыйЭлемент =  КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(ТипЗнч(Элемент));
					ЗаполнитьЗначенияСвойств(НовыйЭлемент,Элемент);
				КонецЕсли; 
			КонецЦикла;
		ИначеЕсли ТипЗнч(ЭлементНастроек) = Тип("ПорядокКомпоновкиДанных") Тогда
			КомпоновщикНастроек.Настройки.Порядок.Элементы.Очистить();
			Для Каждого Элемент Из ЭлементНастроек.Элементы Цикл 
				Если Элемент.Использование Тогда
					НовыйЭлемент =  КомпоновщикНастроек.Настройки.Порядок.Элементы.Добавить(ТипЗнч(Элемент));
					ЗаполнитьЗначенияСвойств(НовыйЭлемент,Элемент);
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;	
		
	КонецЦикла; 
	
	Настройки = КомпоновщикНастроек.Настройки;
	ПоляОтбора = Настройки.Отбор.Элементы;
	
	ОписаниеТиповОбъект = Метаданные.РегистрыСведений.ItobПривязкиТерминалов.Измерения.Объект.Тип;
	
	Для Каждого Элем Из ПоляОтбора Цикл
		Если Элем.ЛевоеЗначение = КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.Элементы[5].Поле Тогда 
			Продолжить;
		Иначе 
			Элем.Использование = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	МакетКомпоновки =  КомпоновщикМакета.Выполнить(СКД,Настройки,,,
	   Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Объект");
	ТЗ.Колонки.Добавить("ВремяКон");
	ТЗ.Колонки.Добавить("ВремяНач");
	ТЗ.Колонки.Добавить("Длительность");
	ТЗ.Колонки.Добавить("ДлительностьПредставление");
	ТЗ.Колонки.Добавить("МаксимальнаяСкорость");
	ТЗ.Колонки.Добавить("МестоСтоянки");
	ТЗ.Колонки.Добавить("Пробег");
	ТЗ.Колонки.Добавить("Состояние");
	ТЗ.Колонки.Добавить("СостояниеСтрока");
	ТЗ.Колонки.Добавить("СредняяСкорость");
	ТЗ.Колонки.Добавить("РасходТоплива");
			
	ВнешниеНаборыДанных = Новый Структура("ТаблицаИнтервалов",ТЗ);
	
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,ВнешниеНаборыДанных);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТабОбъектов = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ПараметрыПолученияИнтерваловДвижения = Новый Структура(
		"ИспользоватьДанныеРегистраИнтервалыДвижения,ИспользоватьПоправочныйКоэффициент,ВключатьДанныеТерминала,РассчитыватьДанныеВыработки");
	ПараметрыПолученияИнтерваловДвижения.ИспользоватьДанныеРегистраИнтервалыДвижения = Истина;
	ПараметрыПолученияИнтерваловДвижения.ИспользоватьПоправочныйКоэффициент = Истина;
	ПараметрыПолученияИнтерваловДвижения.ВключатьДанныеТерминала = Ложь;
	ПараметрыПолученияИнтерваловДвижения.РассчитыватьДанныеВыработки = Истина;	
	
	МассивОбъектов = ТабОбъектов.ВыгрузитьКолонку("Объект");
	Если МассивОбъектов.Количество()>0 Тогда
		Для Каждого Элем Из МассивОбъектов Цикл
			Попытка
				Если Элем = Неопределено  Тогда
					Продолжить;				 
				ИначеЕсли Элем.ЭтоГруппа Тогда 			
					Продолжить;
				Иначе
					Авто = Элем.Ссылка;
				КонецЕсли;			
			Исключение
				Продолжить;			
			КонецПопытки;
			
			ТекПериодДень = НачалоДня(НачПериода);
			
			Пока ТекПериодДень <= КонПериода Цикл
				ТекНачалоПериода = МАКС(НачалоДня(ТекПериодДень), НачПериода);
				ТекКонецПериода = КонецДня(ТекПериодДень)+1;
				Если ТекКонецПериода > КонПериода Тогда
					Если КонПериода = КонецДня(КонПериода) Тогда
						ТекКонецПериода = КонПериода+1;
					Иначе
						ТекКонецПериода = КонПериода;					
					КонецЕсли;				
				КонецЕсли;
								
				ТаблицаИнтервалов = ItobОперативныйМониторингКлиентСервер.ПолучитьИнтервалыДвижения(Авто, ТекНачалоПериода, 
				                           ТекКонецПериода, Истина, Неопределено, ПараметрыПолученияИнтерваловДвижения);
				Если ТаблицаИнтервалов.Количество() > 0 Тогда
					КрайняяСтрокаИнтервалов = ТаблицаИнтервалов[ТаблицаИнтервалов.Количество()-1];
					Если КрайняяСтрокаИнтервалов.ВремяКон = КонецДня(ТекПериодДень)+1 Тогда
						// Для комфортного восприятия информации
						КрайняяСтрокаИнтервалов.ВремяКон = КонецДня(ТекПериодДень);
					КонецЕсли;
				КонецЕсли;
				
				ТаблицаИнтервалов.Колонки.Вставить(0,"Объект",,"Объект");
				ТекНормаРег = РегистрыСведений.ItobКоэффициентыРасходаТоплива.ПолучитьПоследнее(ТекКонецПериода, Новый Структура("ТранспортноеСредство",Авто));
				ТекКоэффициентРасхода = ТекНормаРег.Коэффициент;
				
				Для Каждого Строка Из ТаблицаИнтервалов Цикл 
					
					Если НЕ Строка.Длительность > 0 Тогда 
						Продолжить;
					КонецЕсли;
					
					Строка.Объект = Авто;
					Строка.Пробег = Окр(Строка.Пробег,2);					
					
					ДобСтрока = ТЗ.Добавить();
					ЗаполнитьЗначенияСвойств(ДобСтрока,Строка);
										
					ДобСтрока.РасходТоплива = Окр(ТекКоэффициентРасхода * Строка.Пробег/100,1);
					ДобСтрока.ДлительностьПредставление = ItobОперативныйМониторингКлиентСервер.ПредставлениеВремени(Строка.Длительность);
					
				КонецЦикла;
				
				ТекПериодДень = ТекПериодДень + 24*3600;
				
			КонецЦикла;				
			
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Элем Из ПоляОтбора Цикл
		Элем.Использование = Истина;
	КонецЦикла;
	
	НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить( Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлементОтбора.ЛевоеЗначение = КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.Элементы[1].Поле;
	НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	НовыйЭлементОтбора.ПравоеЗначение = 0;
	
	
	ВнешниеНаборыДанных = Новый Структура("ТаблицаИнтервалов",ТЗ);
	МакетКомпоновки =  КомпоновщикМакета.Выполнить(СКД,Настройки,ДанныеРасшифровки,,
	                    Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,ВнешниеНаборыДанных,ДанныеРасшифровки);	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	 
	Таб = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	ТабДанных.Очистить();
	Для Каждого Стр Из Таб Цикл
		НовСтрока = ТабДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока,Стр);
	КонецЦикла;
	
	
	МакетКомпоновки =  КомпоновщикМакета.Выполнить(СКД,Настройки,ДанныеРасшифровки);
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,ВнешниеНаборыДанных,ДанныеРасшифровки);		
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры // ПриКомпоновкеРезультата()

// Процедура - обработчик события "ОбработкаПроверкиЗаполнения".
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НачПериода > КонПериода Тогда
		ТекстОшибки = НСтр("ru='Начало периода не может быть больше даты конца периода'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			Неопределено, // ОбъектИлиСсылка
			"ItobДвиженияИСтоянки",
			"Отчет", // ПутьКДанным
			Отказ);
	КонецЕсли;
		
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

мТЗ_КэшПараметровВыработки = Новый ТаблицаЗначений;
мТЗ_КэшПараметровВыработки.Колонки.Добавить("Код");
мТЗ_КэшПараметровВыработки.Колонки.Добавить("Наименование");
мТЗ_КэшПараметровВыработки.Колонки.Добавить("Ссылка");
мТЗ_КэшПараметровВыработки.Колонки.Добавить("СсылкаПустая");
мТЗ_КэшПараметровВыработки.Колонки.Добавить("ИмяНужнойКолонки");

#КонецОбласти 
    