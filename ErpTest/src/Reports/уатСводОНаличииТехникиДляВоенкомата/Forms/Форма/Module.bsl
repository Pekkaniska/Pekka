////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 

// Выводит заголовок отчета
//
// Параметры:
//	Нет.
//
&НаСервере
Функция СформироватьЗаголовок(Макет) Экспорт
	
	// Вывод заголовка, описателя периода и фильтров и заголовка
	ОписаниеПериода = "данные на " + Строка(Формат(ДатаКон, "ДФ=dd.MM.yyyy"));
	
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");
	
	НазваниеОрганизации = Организация.НаименованиеПолное;
	Если ПустаяСтрока(НазваниеОрганизации) Тогда
		НазваниеОрганизации = Организация;
	КонецЕсли;
	
	Если Не ПустаяСтрока(НазваниеОрганизации) Тогда
		НазваниеОрганизации = " в " + НазваниеОрганизации;
	КонецЕсли;
	
	ЗаголовокОтчета.Параметры.ОписаниеПериода = ОписаниеПериода;
	
	ЗаголовокОтчета.Параметры.Заголовок = ЗаголовокОтчета() + НазваниеОрганизации;
	
	Возврат(ЗаголовокОтчета);
	
КонецФункции // СформироватьЗаголовок()

// Функция возвращает текст заголовка отчета
//
&НаСервере
Функция ЗаголовокОтчета()
	Возврат "Свод о наличии техники для военкомата";
КонецФункции // ЗаголовокОтчета()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом
//
&НаСервере
Функция СформироватьОтчет() Экспорт
	ДокументРезультат = Новый ТабличныйДокумент;
	
	Запрос = Новый Запрос(	
	"ВЫБРАТЬ
	|	1 КАК КоличествоТС,
	|	СправочникТранспортныеСредства.уатОбъектЭксплуатации КАК ОбъектЭксплуатации,
	|	уатМестонахождениеТССрезПоследних.Колонна,
	|	уатМестонахождениеТССрезПоследних.Организация,
	|	""Исправен"" КАК ТехническоеСостояние,
	|	СправочникТранспортныеСредства.Ссылка,
	|	СправочникТранспортныеСредства.Код КАК ГосударственныйНомер,
	|	СправочникТранспортныеСредства.уатГаражныйНомер КАК ГаражныйНомер,
	|	СправочникТранспортныеСредства.уатМодель.ОбъемБака КАК ОбъемБака,
	|	СправочникТранспортныеСредства.уатГодВыпуска КАК ГодВыпуска,
	|	СправочникТранспортныеСредства.уатМодель КАК Модель,
	|	СправочникТранспортныеСредства.Тип КАК ТипТС,
	|	СправочникТранспортныеСредства.Тип.уатВидТС КАК ТипТСУкрупненный,
	|	СправочникТранспортныеСредства.уатМодель.ОсновноеТопливо КАК ОсновноеТопливо,
	|	СправочникТранспортныеСредства.уатСобственныйВес КАК МассаБезНагрузки,
	|	СправочникТранспортныеСредства.уатСобственныйВес + СправочникТранспортныеСредства.ГрузоподъемностьВТоннах КАК МассаПолная,
	|	СправочникТранспортныеСредства.уатМодель.Код КАК КодМарки,
	|	уатВыработкаТСОбороты.КоличествоОборот,
	|	ВЫБОР
	|		КОГДА СправочникТранспортныеСредства.уатМодель.НаличиеСпидометра
	|			ТОГДА уатВыработкаТСОбороты.КоличествоОборот + СправочникТранспортныеСредства.уатНачальныйПробег
	|		ИНАЧЕ уатВыработкаТСОбороты.КоличествоОборот / 3600 + СправочникТранспортныеСредства.уатНачальныйПробег
	|	КОНЕЦ КАК Пробег,
	|	СправочникТранспортныеСредства.уатДатаПостановкиНаУчетГИБДД КАК ДатаПостановкиНаУчетГИБДД
	|ИЗ
	|	Справочник.ТранспортныеСредства КАК СправочникТранспортныеСредства
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних(&ДатаКон, ) КАК уатМестонахождениеТССрезПоследних
	|		ПО (уатМестонахождениеТССрезПоследних.ТС = СправочникТранспортныеСредства.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатВыработкаТС.Обороты(
	|				,
	|				&ДатаКон,
	|				,
	|				(НЕ ТС.уатМодель.НаличиеСпидометра) И ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ВремяВРаботе)
	|					ИЛИ ТС.уатМодель.НаличиеСпидометра И ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПробегОбщий)) КАК уатВыработкаТСОбороты
	|		ПО (уатВыработкаТСОбороты.ТС = СправочникТранспортныеСредства.Ссылка)
	|ГДЕ
	|	уатМестонахождениеТССрезПоследних.Организация = &Организация
	|	И СправочникТранспортныеСредства.уатДатаВыбытия = &ПустаяДата
	|	И (&ОтображатьВсеВидыТС И (СправочникТранспортныеСредства.уатМодель.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Автотранспорт) ИЛИ СправочникТранспортныеСредства.уатМодель.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Прицеп))
	|		ИЛИ СправочникТранспортныеСредства.уатМодель.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Автотранспорт))");
	
	Запрос.Параметры.Вставить("ДатаКон", КонецДня(ДатаКон));
	Запрос.Параметры.Вставить("Организация", Организация);
	Запрос.Параметры.Вставить("ПустаяДата" , Дата('00010101'));
	Запрос.Параметры.Вставить("ОтображатьВсеВидыТС", РежимОтображения = 1);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
		
	Макет = РеквизитФормыВЗначение("Отчет").ПолучитьМакет("Макет");
	
	Если ВыводитьЗаголовок Тогда
		Шапка = Макет.ПолучитьОбласть("Заголовок");
		//Шапка.Параметры.НазваниеОрганизации	= уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(Организация, ДатаКон),
		//"ПолноеНаименование, ЮридическийАдрес, Телефоны");
		
		// Вывод заголовка отчета
		ОбластьЗаголовка = СформироватьЗаголовок(Макет);
		ВысотаЗаголовка  = ОбластьЗаголовка.ВысотаТаблицы;
		
		ДокументРезультат.Вывести(ОбластьЗаголовка, 1);
	КонецЕсли;
	
	МассивГруппировок = Новый Массив;
	
	//Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1  Цикл
	//	МассивГруппировок.Добавить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя);
	//КонецЦикла;
	
	МассивПоказателей = Новый Массив;
	
	МассивПоказателей.Добавить("Колонна");
	МассивПоказателей.Добавить("ГаражныйНомер");
	МассивПоказателей.Добавить("ДатаПостановкиНаУчетГИБДД");
	МассивПоказателей.Добавить("КодМарки");
	МассивПоказателей.Добавить("ТипТС");
	МассивПоказателей.Добавить("Модель");
	МассивПоказателей.Добавить("ГодВыпуска");
	МассивПоказателей.Добавить("ГосударственныйНомер");
	МассивПоказателей.Добавить("Пробег");
	МассивПоказателей.Добавить("ОсновноеТопливо");
	МассивПоказателей.Добавить("ОбъемБака");
	МассивПоказателей.Добавить("МассаПолная");
	МассивПоказателей.Добавить("МассаБезНагрузки");
	МассивПоказателей.Добавить("ТехническоеСостояние");
	
	// Формат показателей
	ФорматПоказателей = Новый Структура;
	
	Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
		Если ИмяПоказателя = "ГодВыпуска" Тогда
			ФорматПоказателей.Вставить(ИмяПоказателя ,"ЧДЦ=0; ЧГ=0; ДФ=dd.MM.yyyy");
		Иначе
			ФорматПоказателей.Вставить(ИмяПоказателя ,"ЧЦ=15; ЧДЦ=2; ДФ=dd.MM.yyyy");
		КонецЕсли;
	КонецЦикла;
	
	// Сдвиг уровня выводимой группировки отчета относительно группировки запроса
	СдвигУровня = 0;
	
	// Флаг сброса сдвига уровня при выводе группировки по счету
	СброситьСдвигУровня = Истина;
	
	ОбластьСтрока					= Макет.ПолучитьОбласть("Строка");
	ОбластьИтогиТипТС				= Макет.ПолучитьОбласть("ИтогиТипТС");
	ОбластьИтогиТипТСУкрупненный	= Макет.ПолучитьОбласть("ИтогиТипТСУкрупненный");
	ОбластьПустаяСтрока				= Макет.ПолучитьОбласть("ПустаяСтрока");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОбластьСтрока",					ОбластьСтрока);
	СтруктураПараметров.Вставить("ОбластьИтогиТипТС",				ОбластьИтогиТипТС);
	СтруктураПараметров.Вставить("ОбластьИтогиТипТСУкрупненный",	ОбластьИтогиТипТСУкрупненный);
	СтруктураПараметров.Вставить("ОбластьПустаяСтрока",				ОбластьПустаяСтрока);
	СтруктураПараметров.Вставить("ДокументРезультат",				ДокументРезультат);
	СтруктураПараметров.Вставить("ФорматПоказателей",				ФорматПоказателей);
	СтруктураПараметров.Вставить("МассивПоказателей",				МассивПоказателей);
	
	ЗаголовокОтчета = Макет.ПолучитьОбласть("ЗаголовокОтчета");
	ДокументРезультат.Вывести(ЗаголовокОтчета, 1);
	
	ДокументРезультат.НачатьАвтогруппировкуСтрок();
	
	ВывестиСтроки(РезультатЗапроса, СтруктураПараметров);
	
	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
		
	// Заполним общую расшифровку:
	СтруктураНастроекОтчета = Новый Структура;
	
	СтруктураНастроекОтчета.Вставить("ДатаОтчета", ДатаКон);
	СтруктураНастроекОтчета.Вставить("ПоказыватьЗаголовок", ВыводитьЗаголовок);
	
	ДокументРезультат.Область(1,1).Расшифровка = СтруктураНастроекОтчета;
	
	// Зафиксируем заголовок отчета
	Если ВыводитьЗаголовок Тогда
		ДокументРезультат.ФиксацияСверху = 5;
	Иначе
		ДокументРезультат.ФиксацияСверху = 1;
	КонецЕсли;
	
	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы,ДокументРезультат.ШиринаТаблицы);
	
	// Ориентация страницы
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ДокументРезультат.ПолеСлева = 0;
	ДокументРезультат.ПолеСправа = 0;
		
	// Присвоим имя для сохранения параметров печати табличного документа
	ДокументРезультат.ИмяПараметровПечати = "СписокТехникиВРазрезеМоделейИТипов_Вар1";

	Возврат ДокументРезультат;
КонецФункции // СформироватьОтчет()

// Выводит показатели группировки
//
// Параметры:
//	Выборка - выборка
//	ЭтоПерваяСтрока - признак вывода отступов перед субконто
//
&НаСервере
Процедура ВывестиПоказатели(Выборка, СтруктураПараметров)
	
	ДокументРезультат = СтруктураПараметров.ДокументРезультат;
	
	Если Выборка.Группировка() = "ТипТСУкрупненный" Тогда
		Область = СтруктураПараметров.ОбластьИтогиТипТСУкрупненный;
		Область.Параметры.ТипТСУкрупненный	= ВРег(Выборка.ТипТСУкрупненный);
		Область.Параметры.КоличествоТС		= Выборка.КоличествоТС;
		
	ИначеЕсли Выборка.Группировка() = "ТипТС" Тогда
		Область = СтруктураПараметров.ОбластьИтогиТипТС;
		Область.Параметры.ТипТС			= Выборка.ТипТС;
		Область.Параметры.КоличествоТС	= Выборка.КоличествоТС;
		
	Иначе
		Область = СтруктураПараметров.ОбластьСтрока;
		Область.Параметры.РасшифровкаТС = Выборка.Ссылка;

		Для Каждого ИмяПоказателя Из СтруктураПараметров.МассивПоказателей Цикл
			ФорматПоказателя = "";
			СтруктураПараметров.ФорматПоказателей.Свойство(ИмяПоказателя, ФорматПоказателя);
			Область.Параметры[ИмяПоказателя]  = СокрЛП(Формат(Выборка[ИмяПоказателя], ФорматПоказателя));
		КонецЦикла;

		ЗапросПТС = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	уатДокументыТС.Серия КАК Серия,
		|	уатДокументыТС.Номер КАК Номер
		|ИЗ
		|	РегистрСведений.уатДокументыТС КАК уатДокументыТС
		|ГДЕ
		|	уатДокументыТС.ТС = &ТС
		|	И уатДокументыТС.ВидДокумента = ЗНАЧЕНИЕ(Справочник.уатВидыДокументов.ПТС)
		|	И (НЕ уатДокументыТС.Архив)
		|УПОРЯДОЧИТЬ ПО
		|	уатДокументыТС.ДатаВыдачи УБЫВ, уатДокументыТС.ДатаОкончания УБЫВ");
		ЗапросПТС.УстановитьПараметр("ТС", Выборка.Ссылка);
		ВыборкаПТС = ЗапросПТС.Выполнить().Выбрать();
		Если ВыборкаПТС.Следующий() Тогда
			Область.Параметры.ПТССерия = ВыборкаПТС.Серия;
			Область.Параметры.ПТСНомер = ВыборкаПТС.Номер;
		Иначе
			Область.Параметры.ПТССерия = Неопределено;
			Область.Параметры.ПТСНомер = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Область.Область("R1C2").Отступ = Макс(Выборка.Уровень() - 1, 0);
	
	ДокументРезультат.Вывести(Область, Выборка.Уровень());
	
КонецПроцедуры // ВывестиПоказатели()

// Выводит строки
//
// Параметры:
//	Выборка - выборка
//
&НаСервере
Процедура ВывестиСтроки(Выборка, СтруктураПараметров)
	
	ДокументРезультат = СтруктураПараметров.ДокументРезультат;
	Область = СтруктураПараметров.ОбластьСтрока;
	
	Пока Выборка.Следующий() Цикл
		ВывестиПоказатели(Выборка, СтруктураПараметров); 	
	КонецЦикла;
	
КонецПроцедуры // ВывестиПоказатели()



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Заголовок(Команда)
	ВыводитьЗаголовок = НЕ ВыводитьЗаголовок;
	Элементы.ФормаЗаголовок.Пометка = ВыводитьЗаголовок;
	Сформировать(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	ТабДок = СформироватьОтчет();
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ДатаКон = НачалоМесяца(ТекущаяДата())-1;
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			ПользователиКлиентСервер.ТекущийПользователь(), "ОсновнаяОрганизация");
	КонецЕсли;	
КонецПроцедуры
