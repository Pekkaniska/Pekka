#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных


Перем мПолноеИмяФайлаВнешнейОбработки Экспорт; // для варианта внешнего отчета
Перем мВерсияОтчета Экспорт; // для варианта внешнего отчета


Перем СтруктураРеквизитовФормы; // структура реквизитов формы отчета

Перем ДокументСсылкаАлкоОтчет; // Документ.РегламентированныйОтчет к которому привязан отчет.

// Структура получаемая функцией ПолучитьСтруктуруСервисРегистров()
// модуля формы отчета.
Перем СтруктураСервисРегистров; 

Перем ОбъектЭтогоОтчета; // объект метаданных отчета

// Переменные, полученные из реквизитов формы отчета.
Перем СтруктураДанныхТитульный, мДеревоВыбранныхСтраниц, ДополнительныеДанные, 
	  НомерКорректировки, ДатаПодписи;

// Переменные, используемые при проверке и выгрузке отчета.
Перем ДеревоВыгрузки, ПараметрыВыгрузки, СтатусПроверки;

// Переменные, полученные из реквизитов формы отчета.
Перем ТаблицаСтраницыЛицензии, ТаблицаСтраницыРаздел1, ТаблицаСтраницыРаздел2;

// Вспомогательные таблицы значений, отражающие состав ресурсов регистров сведений
// по группам.
Перем ТабП0000000002, ТабП0000100003, ТабП0000200003;

// Таблица значений, в которую записываются найденные при проверке выгрузки ошибки.
Перем ТаблицаСообщений; 

// Таблица значений, в который записываются информационные сообщения при проверке выгрузки ошибки.
Перем ТаблицаСообщенийДляСведения;

// Предельное количество ошибок, по достижении которого дальнейшая проверка прекращается.
Перем МаксимальноеКоличествоОшибок;

// Данные обособленных подразделений Раздела 1.
Перем ДанныеОП_Раздел1;

// Данные производителей-импортеров и счетчик, который присваивается как ИД производителя-импортера.
Перем ДанныеПроизводителей, СчетчикИДПроизвИмп;

// Данные поставщиков и счетчик, который присваивается как ИД поставщика.
Перем ДанныеПоставщиков, СчетчикИдПоставщиков;

// Данные лицензий поставщиков и счетчик, который присваивается как ИД лицензии.
Перем ДанныеЛицензий, СчетчикИдЛицензий;

// Данные движений продукции с привязкой к производителю-импортеру.
Перем ДанныеДвижений;

// Вспомогательные переменные.
Перем ВсегоСтрокПоРазделу1, ВсегоСтрокПоРазделу2, НужноОбработатьСтрок, ОбработаноСтрок, КолСтрокПриПроверкеЗаполнения;

// Содержит процент выполнения процесса проверки или выгрузки, который соответсвует проверке заполнения разделов.
// Для процесса проверки с ошибками - 100%, проверка без ошибок - 90%, при выгрузке без ошибок - 84%.
Перем ПроцентБезЗавершающейПроверкиДанных, ПроцентБезКонвертацииАрхивации;

// Адрес временного хранилища для обмена вспомогательной информацией (процент выполнения, этап).
Перем ВспомогательныйАдрес;
// Содержит шаг информирования о проценте выполнения процесса.
Перем ШагИнформирования;

// Признак отсутствия ошибок при проверке
Перем НетОшибокПроверки;

// Версия БСП.
Перем ВерсияБСПЧислом;


#КонецОбласти


#Область ПрограммныйИнтерфейс


#Область ОбработкаПриЗаписиИзФормЗаписиРегистров

// В зависимости от имени регистра обрабатывает поля ресурсов записи и 
// вычисляет значения реквизитов при необходимости.
//
// Параметры:
//
//	 	ИмяРегистра 				- Строка - Имя регистра, запись которого обрабатывается.
// 		Запись 						- Запись регистра сведений	- Запись, которая обрабатывается.
//
Процедура ОбработкаЗаписи(ИмяРегистра, Запись, ВышеБРО_1_1_11_0 = Неопределено) Экспорт
	
	Если ВышеБРО_1_1_11_0 = Неопределено Тогда
	    ВышеБРО_1_1_11_0 = РегламентированнаяОтчетностьАЛКОВызовСервера.СравнениеВерсииПодсистемы(
													"РегламентированнаяОтчетность", "1.1.11.0");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запись.Документ) И ВышеБРО_1_1_11_0 Тогда	
		Запись.Организация = Запись.Документ.Организация;	
	КонецЕсли; 
		
	Если ИмяРегистра = "СведенияРеглОтчетАлкоПрил11Раздел1" Тогда
		
		// Производитель
		Запись.П000010000302 = СокрЛП(Запись.П000010000302);
		КодПродукции = Запись.П000010000302;
		
		Запись.П000010000303 = СокрЛП(Запись.П000010000303);
		Наименование = Запись.П000010000303;
		
		Запись.П000010000304 = СтрЗаменить(Запись.П000010000304, " ", "");
		ИНН = Запись.П000010000304;
		
		Запись.П000010000305 = СтрЗаменить(Запись.П000010000305, " ", "");
		КПП = Запись.П000010000305;
		
		Если НЕ ЗначениеЗаполнено(Запись.ПроизводительИмпортер) Тогда		
			Запись.ПроизводительИмпортер = ОпределитьПроизводителяИмпортера(ИНН, КПП, Наименование, КодПродукции);
			Запись.П000010000303 = Наименование;
			Запись.П000010000305 = КПП;
		КонецЕсли;
		
		СтруктураХешИдПроизводителя = РегламентированнаяОтчетностьАЛКО.ПолучитьВсеИдПроизводителя(КодПродукции, Наименование, 
																								ИНН, КПП);
		ЗаполнитьЗначенияСвойств(Запись, СтруктураХешИдПроизводителя);
		
	КонецЕсли;
	
	Если ИмяРегистра = "СведенияРеглОтчетАлкоПрил11Раздел2" Тогда
		
		// Производитель
		Запись.П000020000302 = СокрЛП(Запись.П000020000302);
		КодПродукции = Запись.П000020000302;
		
		Запись.П000020000303 = СокрЛП(Запись.П000020000303);
		Наименование = Запись.П000020000303;
		
		Запись.П000020000304 = СтрЗаменить(Запись.П000020000304, " ", "");
		ИНН = Запись.П000020000304;
		
		Запись.П000020000305 = СтрЗаменить(Запись.П000020000305, " ", "");
		КПП = Запись.П000020000305;
				
		Если НЕ ЗначениеЗаполнено(Запись.ПроизводительИмпортер) Тогда		
			Запись.ПроизводительИмпортер = ОпределитьПроизводителяИмпортера(ИНН, КПП, Наименование, КодПродукции);
			Запись.П000020000303 = Наименование;
			Запись.П000020000305 = КПП;
		КонецЕсли;
		
		СтруктураХешИдПроизводителя = РегламентированнаяОтчетностьАЛКО.ПолучитьВсеИдПроизводителя(КодПродукции, Наименование, 
																								ИНН, КПП);
		ЗаполнитьЗначенияСвойств(Запись, СтруктураХешИдПроизводителя);		
		
		// Поставщик
		Запись.П000020000306 = СокрЛП(Запись.П000020000306);
		Наименование = Запись.П000020000306;
		
		Запись.П000020000307 = СтрЗаменить(Запись.П000020000307, " ", "");
		ИНН = Запись.П000020000307;
		
		Запись.П000020000308 = СтрЗаменить(Запись.П000020000308, " ", "");
		КПП = Запись.П000020000308;
		
		Если НЕ ЗначениеЗаполнено(Запись.Поставщик) Тогда		
			Запись.Поставщик = ОпределитьПоставщика(ИНН, КПП, Наименование);
			Запись.П000020000306 = Наименование;
			Запись.П000020000308 = КПП;
		КонецЕсли;
		
		// Лицензия
		Запись.П000020000391 = СокрЛП(Запись.П000020000391);
		Серия 			= Запись.П000020000391;
		
		Запись.П000020000392 = СокрЛП(Запись.П000020000392);
		Номер 			= Запись.П000020000392;
		
		ДатаВыдачи 		= Запись.П000020000310;
		ДатаОкончания 	= Запись.П000020000311;
		
		Запись.П000020000312 = СокрЛП(Запись.П000020000312);
		КемВыдана 		= Запись.П000020000312;
		
		СтруктураСведений = Новый Структура;
		
		СтруктураСведений.Вставить("Наименование", 			Наименование);
		СтруктураСведений.Вставить("ИНН", 					ИНН);
		СтруктураСведений.Вставить("КПП", 					КПП);
		СтруктураСведений.Вставить("ПредставлениеАдреса", 	Неопределено);
		СтруктураСведений.Вставить("Номер", 				Номер);
		СтруктураСведений.Вставить("Серия", 				Серия);
		СтруктураСведений.Вставить("ДатаВыдачи", 			ДатаВыдачи);
		СтруктураСведений.Вставить("ДатаОкончания", 		ДатаОкончания);
		СтруктураСведений.Вставить("КемВыдана", 			КемВыдана);
		
		СтруктураХешИдПоставщика = РегламентированнаяОтчетностьАЛКО.ПолучитьВсеИдПоставщика(СтруктураСведений);
		
		ЗаполнитьЗначенияСвойств(Запись, СтруктураХешИдПоставщика);
		
	КонецЕсли;
	
	Если ИмяРегистра = "СведенияРеглОтчетАлкоЛицензии" Тогда
		
	    Запись.П000000000201 = СокрЛП(Запись.П000000000201);
		Запись.П000000000202 = СокрЛП(Запись.П000000000202);
	    Запись.П000000000203 = СокрЛП(Запись.П000000000203);
		Запись.П000000000204 = СокрЛП(Запись.П000000000204);
		Запись.П000000000205 = СокрЛП(Запись.П000000000205);
		Запись.П000000000206 = СокрЛП(Запись.П000000000206);
		Запись.П000000000207 = СокрЛП(Запись.П000000000207);
		
	КонецЕсли; 
	
КонецПроцедуры

Функция ОпределитьПроизводителяИмпортера(ИНН, КПП, ПолноеНаименование, КодПродукции) Экспорт

	Возврат  РегламентированнаяОтчетностьАЛКО.ОпределитьПроизводителяИмпортераАЛКО(
														ИНН, КПП, ПолноеНаименование, КодПродукции, "НеПиво");	
КонецФункции

Функция ОпределитьПоставщика(ИНН, КПП, ПолноеНаименование) Экспорт
	
	Возврат  РегламентированнаяОтчетностьАЛКО.ОпределитьКонтрагентаИзЛицензийПоставщиковАЛКО(
														ИНН, КПП, ПолноеНаименование, "НеПиво");	
КонецФункции

#КонецОбласти


#Область Расчет

// Производит расчет "по строке" полей ресурсов Записи. 
//
// Параметры:
//
//	 	ИдГруппы 				- Строка - Имя табличной группы, к которой относится регистр сведений.
// 		Запись 					- Запись регистра сведений	- Запись, которая обрабатывается.
//
Процедура Расчет(ИдГруппы, Запись) Экспорт

	Если ИдГруппы = "П0000100003" Тогда
		РасчетРаздел1(Запись);
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти 


#КонецОбласти


#Область СлужебныеПроцедурыИФункции


#Область Служебные

Функция ПолучитьМакетИзОбъекта(ИмяФормыОбъекта, ИмяМакета)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ПолучитьМакетИзОбъектаАЛКО(ИмяМакета, ИмяФормыОбъекта, ОбъектЭтогоОтчета);
	
КонецФункции

Функция ПолучитьНазваниеОтчетаАЛКО(ИмяФормы, ОбъектЭтогоОтч = Неопределено)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ПолучитьНазваниеОтчетаАЛКО(ИмяФормы, ОбъектЭтогоОтч);
	
КонецФункции

Процедура СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках,	СтатусПроверкиОтчета = Ложь, СтруктураОшибки)
	
	РегламентированнаяОтчетностьАЛКО.СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, 
																		СтатусПроверкиОтчета, СтруктураОшибки);
			
КонецПроцедуры

Функция ПолучитьИмяРегистраСведений(ИдГруппы)
	
	Возврат РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(ИдГруппы, СтруктураРеквизитовФормы);
	
КонецФункции

Функция ПолучитьКоличествоСтрокПоСтраницеГруппы(ИдГруппы, ИндексСтраницы, БезПомеченныхНаУдаление = Истина)
	
	КоличествоСтрокНаСтранице = 0;
	
	ИмяРегистраСведений = ПолучитьИмяРегистраСведений(ИдГруппы);
	СервисРегистровГруппы = СтруктураСервисРегистров[ИмяРегистраСведений];
	
	Если БезПомеченныхНаУдаление Тогда	
		Возврат СервисРегистровГруппы[ИндексСтраницы].КоличествоСтрок - СервисРегистровГруппы[ИндексСтраницы].КолвоСтрокПомНаУдаление;
	Иначе
		Возврат СервисРегистровГруппы[ИндексСтраницы].КоличествоСтрок;	
	КонецЕсли; 
	
КонецФункции

Функция ПолучитьКоличествоСтрокПоГруппе(ИдГруппы, ИсключаяУдаленные = Истина)
	
	КолСтрокПоГруппе = 0;
	ИмяРегистраСведений = ПолучитьИмяРегистраСведений(ИдГруппы);
	СервисРегистровГруппы = СтруктураСервисРегистров[ИмяРегистраСведений];			
	
	КолСтраницПоГруппе = СервисРегистровГруппы.Количество();
	
	Для Инд = 0 По КолСтраницПоГруппе - 1 Цикл
	    		
		КоличествоСтрокНастранице = СервисРегистровГруппы[Инд].КоличествоСтрок;
		
		КолСтрокПоГруппе = КолСтрокПоГруппе + КоличествоСтрокНастранице;
		
	КонецЦикла;
	
	Если ИсключаяУдаленные Тогда
		
		Для Инд = 0 По КолСтраницПоГруппе - 1 Цикл
		    		
			КоличествоСтрокНастраницеУд = СервисРегистровГруппы[Инд].КолвоСтрокПомНаУдаление;
						
			КолСтрокПоГруппе = КолСтрокПоГруппе - КоличествоСтрокНастраницеУд;
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	Возврат КолСтрокПоГруппе;
	
КонецФункции

Функция ЗначениеПоКлючуСтруктуры(Ключ, Структура)
	
	Возврат РегламентированнаяОтчетностьАЛКОКлиентСервер.ЗначениеПоКлючуСтруктуры(Ключ, Структура);
	
КонецФункции

Функция СтрЗначениеПоКлючуСтруктуры(Ключ, Структура)
	
	Возврат РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры(Ключ, Структура);
	
КонецФункции

Функция ИзвлечьСтруктуруXML(ИмяФормыОбъекта)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ИзвлечьСтруктуруXMLАЛКО(
				СтруктураРеквизитовФормы.мВерсияФормата, ИмяФормыОбъекта, ОбъектЭтогоОтчета);
		
КонецФункции

#КонецОбласти 


#Область ОбработкаПриЗаполнении

Процедура ОбработкаСтрокиТаблицыСтарогоФормата(ИмяРегистра, СтрокаТЗ, ВышеБРО_1_1_11_0 = Неопределено) Экспорт
	
	ОбработкаЗаписи(ИмяРегистра, СтрокаТЗ, ВышеБРО_1_1_11_0);

КонецПроцедуры

#КонецОбласти


#Область СлужебныеРасчет

Процедура РасчетРаздел1(Запись)
	
	Запись.П000010000306 = ?(Запись.П000010000306 = Неопределено, 0, Запись.П000010000306);
	
	Запись.П000010000307 = ?(Запись.П000010000307 = Неопределено, 0, Запись.П000010000307);
	Запись.П000010000308 = ?(Запись.П000010000308 = Неопределено, 0, Запись.П000010000308);
	Запись.П000010000309 = ?(Запись.П000010000309 = Неопределено, 0, Запись.П000010000309);
	
	Запись.П000010000311 = ?(Запись.П000010000311 = Неопределено, 0, Запись.П000010000311);
	Запись.П000010000312 = ?(Запись.П000010000312 = Неопределено, 0, Запись.П000010000312);
	Запись.П000010000313 = ?(Запись.П000010000313 = Неопределено, 0, Запись.П000010000313);
	
	Запись.П000010000315 = ?(Запись.П000010000315 = Неопределено, 0, Запись.П000010000315);
	Запись.П000010000316 = ?(Запись.П000010000316 = Неопределено, 0, Запись.П000010000316);
	Запись.П000010000317 = ?(Запись.П000010000317 = Неопределено, 0, Запись.П000010000317);
	Запись.П000010000318 = ?(Запись.П000010000318 = Неопределено, 0, Запись.П000010000318);
	
	Запись.П000010000310 = Запись.П000010000307 + Запись.П000010000308
											+ Запись.П000010000309;
	
	Запись.П000010000314 = Запись.П000010000310 + Запись.П000010000311
							+ Запись.П000010000312 + Запись.П000010000313;
	
	Запись.П000010000319 = Запись.П000010000315 + Запись.П000010000316
							+ Запись.П000010000317 + Запись.П000010000318;	
	
	Запись.П000010000320 = Запись.П000010000306 + Запись.П000010000314
											- Запись.П000010000319;

КонецПроцедуры
	
#КонецОбласти 


#Область ПроверитьВыгрузку 

Функция ПроверитьЗаполнениеТитульный(СтатусПроверки)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ПроверитьЗаполнениеТитульный(
							ДокументСсылкаАлкоОтчет, ТаблицаСообщений, 
							СтатусПроверки, ПараметрыВыгрузки, Ложь);
		
КонецФункции

Функция ЛицензируемаяДеятельность()
	
	КодЗаведомоНелицензионный = 100;
	ГраницаОпределенияЛицензионности = 8;
	
	Если ТаблицаСтраницыЛицензии.Количество() < 1
		Или ТаблицаСтраницыЛицензии[0].Данные.Количество() < 1
		Или ТаблицаСтраницыЛицензии[0].ДополнительныеДанные.Количество() < 1 Тогда
		// По умолчанию считаем нелицензируемой.
		Возврат Ложь;
	КонецЕсли;
	
	// Если деятельность нелицензируемая, то все страницы могут содержать в поле
	// П000000000105 только строку, 
	// соответствующую в макете Списки в области Виды Деятельности коду 12.
	
	// Код вида деятельности сохраняется в Дополнительных Данных
	// в структуре с ключем П000000000105
	
	// Фактически при реализации в виде многострочной страницы на обычных формах
	// это означает одну единственную страницу с индексом 0.
	
	СтруктураДополнительныеДанные = ТаблицаСтраницыЛицензии[0].ДополнительныеДанные[0].Значение;
		
	ИмяПоля = "П000000000105";
	
	КодВидДеятельности = Неопределено;
	
	// КодВидДеятельности в структуре имеет тип строка 2 символа.
	КодВидДеятельности = СтрЗначениеПоКлючуСтруктуры(ИмяПоля, СтруктураДополнительныеДанные);
	
	// По умолчанию считаем нелицензируемой.
	ЧислоВыбранныйКод = ?(ЗначениеЗаполнено(КодВидДеятельности), Число(КодВидДеятельности), КодЗаведомоНелицензионный);
	
	// НЕ нелицензируемые виды деятельности начинаются от значения кода 08.
	Возврат ЧислоВыбранныйКод < ГраницаОпределенияЛицензионности;
			
КонецФункции

Функция УказанаЛицензия(ДанныеЛиста)
	
	ЕстьСведения = ЗначениеЗаполнено(СтрЗначениеПоКлючуСтруктуры("П000000000101",ДанныеЛиста))
	           ИЛИ ЗначениеЗаполнено(СтрЗначениеПоКлючуСтруктуры("П000000000102",ДанныеЛиста))
	           ИЛИ ЗначениеЗаполнено(СтрЗначениеПоКлючуСтруктуры("П000000000103",ДанныеЛиста))
	           ИЛИ ЗначениеЗаполнено(СтрЗначениеПоКлючуСтруктуры("П000000000104",ДанныеЛиста))
	           ИЛИ ЗначениеЗаполнено(СтрЗначениеПоКлючуСтруктуры("П000000000105",ДанныеЛиста));
	
	Возврат ЕстьСведения;
	
КонецФункции

Процедура ПроверитьЗаполнениеЛицензии(СтатусПроверки)
	
	ДанныеРаздела = ТаблицаСтраницыЛицензии;
	
	ЕстьЗаполненныйЛистРаздела = Ложь;
	
	ЭтоЛицензируемаяДеятельность = ЛицензируемаяДеятельность();
	
	НомерЛиста = 0;
	Для Каждого ЛистРаздела Из ДанныеРаздела Цикл
		
		НомерЛиста = НомерЛиста + 1;
		
		ДанныеЛиста = ЛистРаздела.Данные[0].Значение;
		ДополнительныеДанныеРаздела = ЛистРаздела.ДополнительныеДанные[0].Значение;
		
		Если НЕ УказанаЛицензия(ДанныеЛиста) Тогда			
			Продолжить;
		КонецЕсли;
		
		ЕстьЗаполненныйЛистРаздела = Истина;
				
		НомерЛистаСтроковый = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаЧГ0(НомерЛиста);
		
		ВидДеятельности = СтрЗначениеПоКлючуСтруктуры("П000000000105", ДанныеЛиста);
		КодВидаДеятельности = СтрЗначениеПоКлючуСтруктуры("П000000000105",ДополнительныеДанныеРаздела);
		Если ЗначениеЗаполнено(ВидДеятельности) И НЕ ЗначениеЗаполнено(КодВидаДеятельности) Тогда
			ТекстОписанияОшибки = "Нарушена внутренняя структура данных вида деятельности по лицензии на листе " + НомерЛистаСтроковый + " раздела лицензий. Требуется повторный выбор значения из списка!";
					
			СтруктураОшибки = Новый Структура;
			СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
			СтруктураОшибки.Вставить("Раздел", "Лицензии");
			СтруктураОшибки.Вставить("Показатель", "П000000000105");
			СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
			СтруктураОшибки.Вставить("ТипОшибки", "НарушенаСтруктураВидаДеятельностиЛицензии");
			
			СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
    
		ИначеЕсли НЕ ЗначениеЗаполнено(ВидДеятельности) Тогда
			ТекстОписанияОшибки = "Не указан вид деятельности по лицензии на листе " + НомерЛистаСтроковый + " раздела лицензий!";
					
			СтруктураОшибки = Новый Структура;
			СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
			СтруктураОшибки.Вставить("Раздел", "Лицензии");
			СтруктураОшибки.Вставить("Показатель", "П000000000105");
			СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
			СтруктураОшибки.Вставить("ТипОшибки", "НетВидаДеятельностиЛицензии");
			
			СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
     
		КонецЕсли;
		
		Если ЭтоЛицензируемаяДеятельность Или СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '20131101' Тогда
						
			ТекстОписанияОшибки = "Не указан номер лицензии на листе " + НомерЛистаСтроковый + " раздела лицензий!";
			
			Если НЕ ЗначениеЗаполнено(СтрЗначениеПоКлючуСтруктуры("П000000000102", ДанныеЛиста)) Тогда
								
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", "Лицензии");
				СтруктураОшибки.Вставить("Показатель", "П000000000102");
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НетНомераЛицензии");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
		 
			КонецЕсли;
			
			ДатаНачала = Неопределено;
			ТекстОписанияОшибки = "Не указана дата начала действия лицензии на листе " + НомерЛистаСтроковый + " раздела лицензий!";
			Если НЕ ЗначениеЗаполнено(ЗначениеПоКлючуСтруктуры("П000000000103", ДанныеЛиста)) Тогда
								
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", "Лицензии");
				СтруктураОшибки.Вставить("Показатель", "П000000000103");
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НетДатыНачалаЛицензии");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
		 
			Иначе
				ДатаНачала = ДанныеЛиста.П000000000103;
			КонецЕсли;
			
			ДатаОкончания = Неопределено;
			ТекстОписанияОшибки = "Не указана дата окончания действия лицензии на листе " + НомерЛистаСтроковый + " раздела лицензий!";
			Если НЕ ЗначениеЗаполнено(ЗначениеПоКлючуСтруктуры("П000000000104", ДанныеЛиста)) Тогда
								
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", "Лицензии");
				СтруктураОшибки.Вставить("Показатель", "П000000000104");
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НетДатыКонцаЛицензии");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
		  
			Иначе
				ДатаОкончания = ДанныеЛиста.П000000000104;	
			КонецЕсли;
			
			Если (ДатаНачала <> Неопределено) И (ДатаОкончания <> Неопределено) Тогда
				ТекстОписанияОшибки = "На листе " + НомерЛистаСтроковый + " раздела лицензий указана дата окончания действия лицензии предшествующая дате начала действия лицензии!";
				Если ДатаНачала > ДатаОкончания Тогда
									
					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", "Лицензии");
					СтруктураОшибки.Вставить("Показатель", "П000000000104");
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "ДатаНачалаБольшеДатыКонцаЛицензии");
					
					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
		   
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
						
	КонецЦикла;
	
	ТекстОписанияОшибки = "Не введено ни одной лицензии!";
	Если НЕ ЕстьЗаполненныйЛистРаздела Тогда
				
		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
		СтруктураОшибки.Вставить("Раздел", "Лицензии");
		СтруктураОшибки.Вставить("Показатель", "П000000000105");
		СтруктураОшибки.Вставить("ЛистРаздела", 1);
		СтруктураОшибки.Вставить("ТипОшибки", "НетДанныхЛицензии");
		
		СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
      
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьЗаполнениеОП(ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки, 
							СтруктураСведенийПроверки, СведенияОбОП = Неопределено)
							
	Возврат РегламентированнаяОтчетностьАЛКО.ПроверитьЗаполнениеОП_АЛКО(
							ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки, 
							СтруктураСведенийПроверки, СведенияОбОП);

КонецФункции

Функция ПроверкаЗаполненияЛицензийВСтрокахТаблиц(ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки,
									 	НетПроблемИННКПП, СтруктураСведенийЛицензий, РоссийскийКонтрагент)

	Возврат РегламентированнаяОтчетностьАЛКО.ПроверкаЗаполненияЛицензийВСтрокахТаблицАЛКО(ДокументСсылка, 
										ТаблицаСообщенийОбОшибках, СтатусПроверки,
									 	НетПроблемИННКПП, СтруктураСведенийЛицензий, РоссийскийКонтрагент)

КонецФункции 								

Функция ПроверкаИННКППвСтрокахТаблиц(ДокументСсылка, ТаблицаСообщенийОбОшибках,
									СтатусПроверки, СтруктураСведенийИННКПП, РоссийскийКонтрагент)
									
		
	// В графе ИНН помимо собственно ИНН РФ (10 или 12 цифр) может указываться
	// Белоруссия - УНП - 9 цифр
	// Казахстан  - РНН или БИН или ИИН - все коды 12 цифр
	// Кыргызстан - ИНН - 14 цифр
	// Армения    - УНН - 8 цифр.
		
	Возврат РегламентированнаяОтчетностьАЛКО.ПроверкаИННКППвСтрокахТаблицАЛКО(ДокументСсылка,  
									ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураСведенийИННКПП, РоссийскийКонтрагент);
	    
КонецФункции

Процедура ПроверитьЗаполнениеРаздел1(СтатусПроверки)
	
	КПП_НеОбязателен = (Число(Лев(СтруктураРеквизитовФормы.мВерсияФормата, 3)) >= 431);
	ИмяРаздела = "Раздел1";
	СтрВКакомРазделе = "В Разделе 1";
	ПроверятьНаПустоту = Истина;
	ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы12;
	
	// Инициация структуры Производителей.
	ДанныеПроизводителей = Новый Структура;
	СчетчикИДПроизвИмп = 0;
	// Инициация структуры Производителей из Раздела 1.
	ДанныеДвижений = Новый Структура;
	// Инициация структуры ОП.				
	ДанныеОП_Раздел1 = Новый Структура;
	
	ДанныеРаздела = ТаблицаСтраницыРаздел1;
	
	СервисРегистров = СтруктураСервисРегистров["СведенияРеглОтчетАлкоПрил11Раздел1"];
		
	ЕстьЗаполненныйЛистРаздела = Ложь;
	НомерЛиста = 0;
	Для Каждого ЛистРаздела Из ДанныеРаздела Цикл
		
		НомерЛиста = НомерЛиста + 1;
		НомерЛистаСтроковый = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаЧГ0(НомерЛиста);
		
		ДанныеЛиста = ЛистРаздела.Данные[0].Значение;
		
		ДанныеОП   = ДанныеЛиста.ОбособленноеПодразделение;
		
		СтруктураСведенийПроверки = Новый Структура;						
		СтруктураСведенийПроверки.Вставить("ПараметрыВыгрузки", 	ПараметрыВыгрузки);
		СтруктураСведенийПроверки.Вставить("ИмяРаздела", 			ИмяРаздела);
		СтруктураСведенийПроверки.Вставить("СтрВКакомРазделе", 		СтрВКакомРазделе);
		СтруктураСведенийПроверки.Вставить("НомерЛиста", 			НомерЛиста);
		СтруктураСведенийПроверки.Вставить("ЛистРаздела", 			ЛистРаздела);
		СтруктураСведенийПроверки.Вставить("КПП_НеОбязателен", 		КПП_НеОбязателен);	
		СтруктураСведенийПроверки.Вставить("ПроверятьНаПустоту", 	ПроверятьНаПустоту);
		СведенияОбОП = Неопределено;
		
		ПроверитьЗаполнениеОП(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, 
								СтруктураСведенийПроверки, СведенияОбОП);
				
		
		Если НЕ ПустаяСтрока(ДанныеОП) и (НЕ СокрЛП(ДанныеОП) = "Заполнить") Тогда
			ЕстьЗаполненныйЛистРаздела = Истина;
		КонецЕсли;
		
		ИндексСтраницыРегистраРаздел1 = СервисРегистров[НомерЛиста - 1].ИндексСтраницыРегистра;
		
		ИдОП = "";
		Если ТипЗнч(ЛистРаздела.ДополнительныеДанные[0].Значение) = Тип("Структура") 
			И ЛистРаздела.ДополнительныеДанные[0].Значение.Свойство("СведенияОбОП", СведенияОбОП) Тогда
						
			Если ЗначениеЗаполнено(СведенияОбОП.КПП) или ЗначениеЗаполнено(СведенияОбОП.Наименование) Тогда
									
				Наименование_ОП = СведенияОбОП.Наименование;
				КПП_ОП = СведенияОбОП.КПП;
				ИдОП = ИдентификаторОП(СведенияОбОП);
				
				// Контроль записей на уникальность в Разделе("КПП ОП" + "Наименование ОП").
				Если ДанныеОП_Раздел1.Свойство(ИдОП) Тогда
					
				    // Такое ОП уже есть.
					ЛистПовтора = ДанныеОП_Раздел1[ИдОП].НомерЛистаРаздел1;
					ЛистПовтораСтроковый = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаЧГ0(ЛистПовтора);
					ТекстОписанияОшибки = "В Разделе 1 декларации страницы №№ " + ЛистПовтораСтроковый + ", " 
										+ НомерЛистаСтроковый + "  заполнены по одному и тому же обособленному подразделению: " 
										+ Наименование_ОП + ?(НЕ ПустаяСтрока(КПП_ОП), ", (КПП " + КПП_ОП + ")", "");
							
					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", "Раздел1");
					СтруктураОшибки.Вставить("Показатель", "ОбособленноеПодразделение");
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "ПовторОП");
					
					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
                						
				Иначе
					
					ДанныеОП_Раздел1.Вставить(ИдОП, Новый Структура);
					
					КопияСведенияОбОП = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(СведенияОбОП);
					
					ДанныеОП_Раздел1[ИдОП].Вставить("ОП", КопияСведенияОбОП);
					
					ДанныеОП_Раздел1[ИдОП].Вставить("НомерЛистаРаздел1", НомерЛиста);
					
					ДанныеОП_Раздел1[ИдОП].Вставить("ИндексСтраницыРегистраРаздел1", ИндексСтраницыРегистраРаздел1);
					
					ДанныеОП_Раздел1[ИдОП].Вставить("КолСтрокПоРазделу1", 0);
					ДанныеОП_Раздел1[ИдОП].Вставить("КолСтрокПоРазделу2", 0);
					
					ДанныеДвижений.Вставить(ИдОП, Новый Структура);
										
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		// Проверка заполнения таблиц декларации.
		ДопДанные = Неопределено;		
		Если ТипЗнч(ЛистРаздела.ДополнительныеДанные[0].Значение) = Тип("Структура") Тогда
			ДопДанные = ЗначениеПоКлючуСтруктуры(ИдГруппы, ЛистРаздела.ДополнительныеДанные[0].Значение);			
		КонецЕсли;
		
		ПроверитьЗаполнениеТаблицыРаздел1(СтатусПроверки, ИдГруппы, ДопДанные, 
													НомерЛиста, ИдОП, ЕстьЗаполненныйЛистРаздела);
		
		КолТабСообщений = ТаблицаСообщений.Количество();
			
		Если НетОшибокПроверки и (КолТабСообщений > 0)  Тогда
			
			НетОшибокПроверки = Ложь;
		    ПроцентБезЗавершающейПроверкиДанных = 100;
			НужноОбработатьСтрок = НужноОбработатьСтрок / 2;
			
		КонецЕсли; 
		
		Если КолТабСообщений >  МаксимальноеКоличествоОшибок Тогда
			
			ОбработаноСтрок = НужноОбработатьСтрок;
			ТекстОписанияОшибки = "Найдено " + МаксимальноеКоличествоОшибок + " и более ошибок. Дальнейшая проверка прекращена!";
					
			СтруктураОшибки = Новый Структура;
			СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
			СтруктураОшибки.Вставить("Раздел", "Раздел1");
			СтруктураОшибки.Вставить("Показатель", Неопределено);
			СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
			СтруктураОшибки.Вставить("ТипОшибки", "МногоОшибок");
			
			СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
            
		    Возврат;
		КонецЕсли;
							
	КонецЦикла;
		
	Если НЕ ЕстьЗаполненныйЛистРаздела Тогда
		
		ТекстОписанияОшибки = "Не заполнен ни один лист декларации в Разделе 1!";
				
		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
		СтруктураОшибки.Вставить("Раздел", "Раздел1");
		СтруктураОшибки.Вставить("Показатель", "ОбособленноеПодразделение");
		СтруктураОшибки.Вставить("ЛистРаздела", 1);
		СтруктураОшибки.Вставить("ТипОшибки", "НетДанныхРаздел1");
		
		СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
        
	КонецЕсли;
		
КонецПроцедуры

Функция ЭтоТочноРоссийскийКонтрагент(Контрагент, ЕстьСтранаРегистрацииВКонфигурации = Неопределено, 
									СтранаРоссия = Неопределено, ИНН, КПП)
	Возврат РегламентированнаяОтчетностьАЛКО.ЭтоТочноРоссийскийКонтрагент(
								Контрагент, ЕстьСтранаРегистрацииВКонфигурации, СтранаРоссия, ИНН, КПП);								
									
КонецФункции
								
Процедура ПроверитьЗаполнениеТаблицыРаздел1(СтатусПроверки, ИдГруппы, ДополнительныеДанные, 
											НомерЛиста, ИдОП = "", ЕстьЗаполненныйЛистРаздела = Ложь)
	
	НомерЛистаСтроковый = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаЧГ0(НомерЛиста);
	
	ИндексСтраницы = НомерЛиста - 1;
	
	ПрефиксИмени = ИдГруппы;
	
	ИмяТаблицы = Неопределено;
	
	МетаданныеКонтрагенты = Метаданные.Справочники.Контрагенты;
	ЕстьСтранаРегистрации = ОбщегоНазначения.ЕстьРеквизитОбъекта("СтранаРегистрации", МетаданныеКонтрагенты);
	
	СтранаРоссия = Неопределено;
	Если ЕстьСтранаРегистрации Тогда
	    СтранаРоссия = ПредопределенноеЗначение("Справочник.СтраныМира.Россия");		
	КонецЕсли; 
		
	ЕстьИдОП = НЕ ПустаяСтрока(СтрЗаменить(ИдОП, "\", ""));
	
	// Опеределим регистр сведений.
	ИмяРегистраСведений = ПолучитьИмяРегистраСведений(ИдГруппы);
	
	СервисРегистров = СтруктураСервисРегистров[ИмяРегистраСведений];
	ИндексСтраницыРегистра = СервисРегистров[ИндексСтраницы].ИндексСтраницыРегистра;
	ИДДокИндСтраницы = РегламентированнаяОтчетностьАЛКО.ПолучитьИдДокИндСтраницы(ДокументСсылкаАлкоОтчет, ИндексСтраницыРегистра);
		
	ДанныеДвиженийПоОП = Неопределено;
	Если ЕстьИдОП Тогда	
		ДанныеДвиженийПоОП = ДанныеДвижений[ИдОП];
		ДанныеОП_Раздел1[ИдОП].Вставить("ИДДокИндСтраницыРаздел1", ИДДокИндСтраницы);
	КонецЕсли;
		
	ТекущийИндексСтроки = 0;
	КолСтрокРаздел1 = 0;
	
	// Зафиксируем имена ключевых полей.
	ИмяКодаВидаПродукции = ПрефиксИмени + "02";
	ИмяНаименованияПроизводителя  = ПрефиксИмени + "03";
	ИмяИННПроизводителя = ПрефиксИмени + "04";
	ИмяКПППроизводителя = ПрефиксИмени + "05";
	
	Пока Истина Цикл
	 
		СтруктураНастроек = Новый Структура;
		СтруктураНастроек.Вставить("КоличествоПервых", 1000);
		СтруктураНастроек.Вставить("ТекущийИндексСтроки", ТекущийИндексСтроки);
		
		РезЗапросаДанных = РегламентированнаяОтчетностьАЛКО.ЗаполнитьПоСтраницеРазделаАЛКО(
									ИдГруппы, ИндексСтраницы, 
								   	СтруктураРеквизитовФормы, , ИДДокИндСтраницы,
								   	Ложь, СтруктураНастроек);
		
		Если РезЗапросаДанных.Количество() = 0 Тогда		
			Прервать;				
		КонецЕсли; 
		
		Для каждого СтрокаДекларации Из РезЗапросаДанных Цикл
					
			НомерСтроки = СтрокаДекларации.ИндексСтроки;
			ТекущийИндексСтроки = СтрокаДекларации.ИндексСтроки;
			КолСтрокРаздел1 = КолСтрокРаздел1 + 1;
			
			НомерСтрокиСтроковый = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаЧГ0(НомерСтроки);
			
			СтрокаЗаполнена = ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "02"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "03"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "04"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "05"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "06"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "07"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "08"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "09"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "10"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "11"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "12"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "13"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "14"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "15"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "16"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "17"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "18"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "19"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "20"])
						  ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "21"]);
			Если НЕ СтрокаЗаполнена Тогда
				
				ТекстОписанияОшибки = "В Разделе 1 декларации, на листе " + НомерЛистаСтроковый + ", в строке " + НомерСтрокиСтроковый  + ", не заполнено ни одно поле!";
				
				ИмяПоказателя = ПрефиксИмени + "02_" + НомерСтрокиСтроковый;
				
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", "Раздел1");
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "ПустаяСтрока");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
                
				Продолжить;
			КонецЕсли;
			
			ОбработаноСтрок = ОбработаноСтрок + 1;
					
			ЕстьЗаполненныйЛистРаздела = Истина;
			
			ИмяГрафы = ПрефиксИмени + "02";
			ИмяПоказателя = ПрефиксИмени + "02_" + НомерСтрокиСтроковый;
			ЗначениеГрафы = СокрЛП(СтрокаДекларации[ИмяГрафы]);
			КодВидаПродукции = ЗначениеГрафы;
			Если ПустаяСтрока(ЗначениеГрафы) Тогда
				ТекстОписанияОшибки = "В Разделе 1 декларации, на листе " + НомерЛистаСтроковый + ", в строке " + НомерСтрокиСтроковый  + ", не задан код вида продукции!";
						
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", "Раздел1");
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НетКодаПродукции");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
         
			ИначеЕсли СтрДлина(ЗначениеГрафы) <> 3 Тогда
				ТекстОписанияОшибки = "В Разделе 1 декларации, на листе " + НомерЛистаСтроковый + ", в строке " + НомерСтрокиСтроковый  + ", неверно задан код вида продукции!";
						
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", "Раздел1");
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "КодПродукцииНе3");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
				
			КонецЕсли;
			
			ИмяПоказателяНаименования = ИмяНаименованияПроизводителя + "_" + НомерСтрокиСтроковый;
			ЗначениеГрафы = СтрокаДекларации[ИмяНаименованияПроизводителя];
			НаименованиеПроизводителя = ЗначениеГрафы;
			Если НЕ ЗначениеЗаполнено(ЗначениеГрафы) Тогда
				ТекстОписанияОшибки = "В Разделе 1 декларации, на листе " + НомерЛистаСтроковый + ", в строке " + НомерСтрокиСтроковый  + ", не указано наименование производителя/импортера!";
						
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", "Раздел1");
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателяНаименования);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НетНаименованияПроизводителя");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
				
			КонецЕсли;
			
			////////////////////////////////////////////////////////////////////////////////
			// Контроль ИНН-КПП.
			
			ИмяГрафыИНН = ПрефиксИмени + "04";
			ИмяПоказателяИНН = ПрефиксИмени + "04_" + НомерСтрокиСтроковый;
			ИННПроизводителя = СтрокаДекларации[ИмяГрафыИНН];
			ИНН = СокрЛП(ИННПроизводителя);
			ИННПроизводителя = ИНН;
			ДлинаИНН = СтрДлина(ИНН);
			
			ИмяГрафыКПП = ПрефиксИмени + "05";
			ИмяПоказателяКПП = ПрефиксИмени + "05_" + НомерСтрокиСтроковый;
			КПППроизводителя = СтрокаДекларации[ИмяГрафыКПП];
			КПП = СокрЛП(КПППроизводителя);
			КПППроизводителя = КПП;
			
			ИмяРаздела = "Раздел1";
			СтрВКакомРазделе = "В Разделе 1";
			РодПадежЧейИННКПП = "производителя/импортера";
						
			РоссийскийКонтрагент = ЭтоТочноРоссийскийКонтрагент(СтрокаДекларации.ПроизводительИмпортер, 
											ЕстьСтранаРегистрации, СтранаРоссия, ИНН, КПП); 
			
			МожетБытьПустойИНН = Ложь;
			МожетБытьПустойКПП = Истина;
			
			СтруктураСведенийИННКПП = Новый Структура;
			
			СтруктураСведенийИННКПП.Вставить("ИмяРаздела", 				ИмяРаздела);
			СтруктураСведенийИННКПП.Вставить("СтрВКакомРазделе", 		СтрВКакомРазделе);
			СтруктураСведенийИННКПП.Вставить("НомерЛиста", 				НомерЛиста);
			СтруктураСведенийИННКПП.Вставить("НомерСтрокиСтроковый", 	НомерСтрокиСтроковый);
			СтруктураСведенийИННКПП.Вставить("ИмяТаблицы", 				ИмяТаблицы);
			
			СтруктураСведенийИННКПП.Вставить("ИмяПоказателяНаименования", 		ИмяПоказателяНаименования);
			СтруктураСведенийИННКПП.Вставить("Наименование", 					НаименованиеПроизводителя);
						
			СтруктураСведенийИННКПП.Вставить("ИмяПоказателяИНН", 		ИмяПоказателяИНН);
			СтруктураСведенийИННКПП.Вставить("ИНН", 					ИНН);
			СтруктураСведенийИННКПП.Вставить("ИмяПоказателяКПП", 		ИмяПоказателяКПП);
			СтруктураСведенийИННКПП.Вставить("КПП", 					КПП);
			СтруктураСведенийИННКПП.Вставить("РодПадежЧейИННКПП", 		РодПадежЧейИННКПП);
				
			СтруктураСведенийИННКПП.Вставить("МожетБытьПустойИНН", 		МожетБытьПустойИНН);	
			СтруктураСведенийИННКПП.Вставить("МожетБытьПустойКПП", 		МожетБытьПустойКПП);
			
	
			ПроверкаИННКППвСтрокахТаблиц(ДокументСсылкаАлкоОтчет,  
										ТаблицаСообщений, СтатусПроверки, СтруктураСведенийИННКПП, РоссийскийКонтрагент);
						
			Если РоссийскийКонтрагент = Неопределено Тогда		
				РоссийскийКонтрагент = (ДлинаИНН = 12) или (ДлинаИНН = 10);			
			КонецЕсли;
			//
			////////////////////////////////////////////////////////////////////////////////
					
			// Заполняем Таблицу Производителей раздела 1.
			Если ЕстьИдОП Тогда
							    
				ИдКодПродПроизв 	= "Х" + СтрокаДекларации.ХешИдКодПродПроизв;				
				ИдПроизв 			= "Х" + СтрокаДекларации.ХешИдПроизводителя;
				
				Если НЕ ПустаяСтрока(КодВидаПродукции) Тогда
					
					// Вначале заполняем справочник Производителей.
					Если НЕ ДанныеПроизводителей.Свойство(ИдПроизв) Тогда
						
						СчетчикИДПроизвИмп = СчетчикИДПроизвИмп + 1;
						ДанныеПроизводителей.Вставить(ИдПроизв, Новый Структура);
						ДанныеПроизводителей[ИдПроизв].Вставить("ИДПроизвИмп", 		СчетчикИДПроизвИмп);
						ДанныеПроизводителей[ИдПроизв].Вставить("П000000000004", 	НаименованиеПроизводителя);
						ДанныеПроизводителей[ИдПроизв].Вставить("П000000000005", 	ИННПроизводителя);
						ДанныеПроизводителей[ИдПроизв].Вставить("П000000000006", 	КПППроизводителя);
						
					КонецЕсли;
					
					// Ведущие нули в строке вызывают ошибку при попытке назначения ключем.
					КодВидаПродукцииКлюч = "Х" + КодВидаПродукции;
					
					Если НЕ ДанныеДвиженийПоОП.Свойство(КодВидаПродукцииКлюч) Тогда
						
						ДанныеДвиженийПоОП.Вставить(КодВидаПродукцииКлюч, Новый Структура);
						ДанныеДвиженийПоОП[КодВидаПродукцииКлюч].Вставить("КоличествоСтрокРаздел2ПоКоду", 0);
						ДанныеДвиженийПоОП[КодВидаПродукцииКлюч].Вставить("КодПродПроизв", Новый Структура);
						
					КонецЕсли;
					ДанныеДвижений_ПоОП_ПоКоду = ДанныеДвиженийПоОП[КодВидаПродукцииКлюч].КодПродПроизв;
					
					Если ДанныеДвижений_ПоОП_ПоКоду.Свойство(ИдКодПродПроизв) Тогда
						
						// Проверка на дублирование.
					    СтрокаПовтора = ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].НомерСтрокиРаздел1;
						СтрокаПовтораСтроковый = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаЧГ0(СтрокаПовтора);
						
						АдресДубликата = ИмяКодаВидаПродукции + "_" + НомерСтрокиСтроковый;
						
						ТекстОписанияОшибки = "В Разделе 1 декларации, на листе " + НомерЛистаСтроковый  
										+ ", повторяются сочетания кода вида продукции и реквизитов производителя/импортера в строках " 
										+ СтрокаПовтораСтроковый + " и " + НомерСтрокиСтроковый + "!";
								
						СтруктураОшибки = Новый Структура;
						СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
						СтруктураОшибки.Вставить("Раздел", "Раздел1");
						СтруктураОшибки.Вставить("Показатель", АдресДубликата);
						СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
						СтруктураОшибки.Вставить("ТипОшибки", "ПовторСочетанияКодПроизводительРаздел1");
						
						СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
				 
					Иначе
						
						ДанныеДвижений_ПоОП_ПоКоду.Вставить(ИдКодПродПроизв, Новый Структура);
						// Заполняем Движения.
						ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("НомерСтрокиРаздел1", 	НомерСтроки);						
						ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("ИдПроизв", 			ИдПроизв);
						ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("КоличествоСтрокРаздел2ПоКодПродПроизв", 0);
						ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("Поставщики", 			Новый Структура);
						
						// Нет смысла собирать данные по Движениям, если есть ошибки заполнения.
						Если ТаблицаСообщений.Количество() = 0 Тогда
														
							// ИДПроизвИмп.
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("ИДПроизвИмп", 		 ДанныеПроизводителей[ИдПроизв].ИДПроизвИмп);
							// Остаток на начало.
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000006",		 СтрокаДекларации[ПрефиксИмени + "06"]);
							// Поступление (закупки) от организаций- производителей.
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000007",		 СтрокаДекларации[ПрефиксИмени + "07"]);
							// Поступление (закупки) от организаций оптовой торговли.
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000008",		 СтрокаДекларации[ПрефиксИмени + "08"]);
							// Поступление (закупки) по импорту.
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000009",		 СтрокаДекларации[ПрефиксИмени + "09"]);
							// Поступление (закупки) итого.
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000010",		 СтрокаДекларации[ПрефиксИмени + "10"]);
							// Поступление (возврат от покупателей).
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000011",		 СтрокаДекларации[ПрефиксИмени + "11"]);
							// Прочие поступления.
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000012",		 СтрокаДекларации[ПрефиксИмени + "12"]);
							// Поступление (перемещение внутри одной организации).
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000013",		 СтрокаДекларации[ПрефиксИмени + "13"]);
							// Поступление всего.
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000014",		 СтрокаДекларации[ПрефиксИмени + "14"]);
							// Расход (объем розничной продажи).
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000015",		 СтрокаДекларации[ПрефиксИмени + "15"]);
							// Прочий расход.
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000016",		 СтрокаДекларации[ПрефиксИмени + "16"]);
							// Возврат поставщику.
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000017",		 СтрокаДекларации[ПрефиксИмени + "17"]);
							// Расход (перемещение внутри одной организации).
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000018",		 СтрокаДекларации[ПрефиксИмени + "18"]);
							// Расход всего.
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000019",		 СтрокаДекларации[ПрефиксИмени + "19"]);
							// Остаток продукции на конец отчетного периода - всего.
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000020",		 СтрокаДекларации[ПрефиксИмени + "20"]);
							// В том числе остаток продукции, маркированной федеральными специальными 
							// и (или) акцизными марками, требования к которым утрачивают силу.
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000021",		 СтрокаДекларации[ПрефиксИмени + "21"]);
													
						КонецЕсли; 
						
					КонецЕсли;
					
				КонецЕсли;
				 
			    
			КонецЕсли;
			
			КолТабСообщений = ТаблицаСообщений.Количество();
			
			Если НетОшибокПроверки и (КолТабСообщений > 0)  Тогда
				НетОшибокПроверки = Ложь;
			    ПроцентБезЗавершающейПроверкиДанных = 100;
				НужноОбработатьСтрок = НужноОбработатьСтрок / 2;
			КонецЕсли; 
			
			Если КолТабСообщений >  МаксимальноеКоличествоОшибок Тогда
				ОбработаноСтрок = НужноОбработатьСтрок;
			    Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
		// Информируем о ходе выполнения.
		Если НужноОбработатьСтрок > 0 Тогда
			
			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка заполнения Раздел 1.", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных);
			
		КонецЕсли;
					
	КонецЦикла; 
	
	Если ЕстьИдОП Тогда			
		ДанныеОП_Раздел1[ИдОП].Вставить("КолСтрокПоРазделу1", КолСтрокРаздел1);
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьЗаполнениеРаздел2(СтатусПроверки)
	
	КПП_НеОбязателен = (Число(Лев(СтруктураРеквизитовФормы.мВерсияФормата, 3)) >= 431);
	ИмяРаздела = "Раздел2";
	СтрВКакомРазделе = "В Разделе 2";
	ПроверятьНаПустоту = Ложь; // Раздел 2 может не заполняться
	ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы22;
	
	ДанныеРаздела = ТаблицаСтраницыРаздел2;
	
	// Данные обособленных подразделений по Разделу 2.
	ДанныеОП_Раздел2 = Новый Структура;
	
	ДанныеПоставщиков = Новый Структура;
	СчетчикИдПоставщиков = 0;
	
	ДанныеЛицензий = Новый Структура;
	СчетчикИдЛицензий = 0;
	
	СервисРегистров = СтруктураСервисРегистров["СведенияРеглОтчетАлкоПрил11Раздел2"];
			
	НомерЛиста = 0;
	Для Каждого ЛистРаздела Из ДанныеРаздела Цикл
		
		НомерЛиста = НомерЛиста + 1;
		НомерЛистаСтроковый = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаЧГ0(НомерЛиста);
		
		ДанныеЛиста = ЛистРаздела.Данные[0].Значение;
		
		ДанныеОП   = ДанныеЛиста.ОбособленноеПодразделение;
		
		ЗаполненоОП = НЕ ПустаяСтрока(ДанныеОП) и (НЕ СокрЛП(ДанныеОП) = "Заполнить");
		ЕстьЗаполненныеСтроки = Ложь;
				
		СведенияОбОП = Неопределено;
		
		КолАктивныхСтрокНаСтранице = ПолучитьКоличествоСтрокПоСтраницеГруппы(ИдГруппы, НомерЛиста - 1, Истина);
		ПроверятьНаПустоту = (КолАктивныхСтрокНаСтранице > 0);
		
		СтруктураСведенийПроверки = Новый Структура;						
		СтруктураСведенийПроверки.Вставить("ПараметрыВыгрузки", 	ПараметрыВыгрузки);
		СтруктураСведенийПроверки.Вставить("ИмяРаздела", 			ИмяРаздела);
		СтруктураСведенийПроверки.Вставить("СтрВКакомРазделе", 		СтрВКакомРазделе);
		СтруктураСведенийПроверки.Вставить("НомерЛиста", 			НомерЛиста);
		СтруктураСведенийПроверки.Вставить("ЛистРаздела", 			ЛистРаздела);
		СтруктураСведенийПроверки.Вставить("КПП_НеОбязателен", 		КПП_НеОбязателен);	
		СтруктураСведенийПроверки.Вставить("ПроверятьНаПустоту", 	ПроверятьНаПустоту);
				
		ПроверитьЗаполнениеОП(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, 
								СтруктураСведенийПроверки, СведенияОбОП);
		
							
		ИндексСтраницыРегистраРаздел2 = СервисРегистров[НомерЛиста - 1].ИндексСтраницыРегистра;
		
		ИдОП = "";
		НужноПерекрестноПроверятьПроизводителей = Истина;
		
		Если ТипЗнч(ЛистРаздела.ДополнительныеДанные[0].Значение) = Тип("Структура") 
			И ЛистРаздела.ДополнительныеДанные[0].Значение.Свойство("СведенияОбОП", СведенияОбОП) Тогда
						
			Если ЗначениеЗаполнено(СведенияОбОП.КПП) или ЗначениеЗаполнено(СведенияОбОП.Наименование) Тогда
									
				Наименование_ОП = СведенияОбОП.Наименование;
				КПП_ОП = СведенияОбОП.КПП;
				ИдОП = ИдентификаторОП(СведенияОбОП);
				
				// Контроль записей на уникальность в Разделе("КПП ОП" + "Наименование ОП").
				Если ДанныеОП_Раздел2.Свойство(ИдОП) Тогда
					
				    // Такое ОП уже есть.
					ЛистПовтора = ДанныеОП_Раздел2[ИдОП];
					ЛистПовтораСтроковый = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаЧГ0(ЛистПовтора);
					ТекстОписанияОшибки = "В Разделе 2 декларации страницы №№ " + ЛистПовтораСтроковый + ", " 
										+ НомерЛистаСтроковый + "  заполнены по одному и тому же обособленному подразделению: " 
										+ Наименование_ОП + ?(НЕ ПустаяСтрока(КПП_ОП), ", (КПП " + КПП_ОП + ")", "");
							
					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", "Раздел2");
					СтруктураОшибки.Вставить("Показатель", "ОбособленноеПодразделение");
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "ПовторОП");
					
					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
				  
				Иначе
				    ДанныеОП_Раздел2.Вставить(ИдОП, НомерЛиста);					
				КонецЕсли;
				
				// Контроль на наличие в Разделе 1 всех ОП из Раздела 2.
				Если НЕ ДанныеОП_Раздел1.Свойство(ИдОП) Тогда
				    // Такого ОП нет в Разделе 1.
					
					ТекстОписанияОшибки = "В Разделе 2 декларации, на странице № " + НомерЛистаСтроковый 
										+ ", заполнены данные по обособленному подразделению " + Наименование_ОП 
										+ "," + ?(НЕ ПустаяСтрока(КПП_ОП), ", (КПП " + КПП_ОП + ")", "") 
										+ " но это обособленное подразделение не найдено в Разделе 1!";
							
					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", "Раздел2");
					СтруктураОшибки.Вставить("Показатель", "ОбособленноеПодразделение");
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "НеНайденОП");
					
					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
				   
					// ОП не найдено в Разделе 1 - непонятно со страницей какого ОП Раздела 1 сверять.
					НужноПерекрестноПроверятьПроизводителей = Ложь;
				Иначе
					ДанныеОП_Раздел1[ИдОП].Вставить("НомерЛистаРаздел2", НомерЛиста);
					ДанныеОП_Раздел1[ИдОП].Вставить("ИндексСтраницыРегистраРаздел2", ИндексСтраницыРегистраРаздел2);
				КонецЕсли;
			Иначе
				// ОП не заполнено - непонятно со страницей какого ОП Раздела 1 сверять.
				НужноПерекрестноПроверятьПроизводителей = Ложь;
			КонецЕсли;
		Иначе
			// ОП не заполнено - непонятно со страницей какого ОП Раздела 1 сверять.
			НужноПерекрестноПроверятьПроизводителей = Ложь;
		КонецЕсли;
		
		// Проверка заполнения таблиц декларации.
		ДопДанные = Неопределено;
		Если ТипЗнч(ЛистРаздела.ДополнительныеДанные[0].Значение) = Тип("Структура") Тогда
			ДопДанные = ЗначениеПоКлючуСтруктуры(ИдГруппы, ЛистРаздела.ДополнительныеДанные[0].Значение);			
		КонецЕсли;
		
		ПроверитьЗаполнениеТаблицыРаздел2(СтатусПроверки, ИдГруппы, ДопДанные, НомерЛиста, 
											ИдОП, ЕстьЗаполненныеСтроки, НужноПерекрестноПроверятьПроизводителей);
		
		// Раздел 2 не обязателен к заполнению, но если есть заполненные строки при незаполненном ОП - нужно выдать ошибку.
		Если ЕстьЗаполненныеСтроки и (НЕ ЗаполненоОП)  Тогда
		    ТекстОписанияОшибки = "В Разделе 2 декларации, на листе " + НомерЛистаСтроковый + ", не указаны реквизиты обособленного подразделения!";
					
			СтруктураОшибки = Новый Структура;
			СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
			СтруктураОшибки.Вставить("Раздел", "Раздел2");
			СтруктураОшибки.Вставить("Показатель", "ОбособленноеПодразделение");
			СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
			СтруктураОшибки.Вставить("ТипОшибки", "НетДанныхОП");
			
			СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
			
		КонецЕсли; 
		
		КолТабСообщений = ТаблицаСообщений.Количество();
		
		Если НетОшибокПроверки и (КолТабСообщений > 0)  Тогда
			
			НетОшибокПроверки = Ложь;
		    ПроцентБезЗавершающейПроверкиДанных = 100;
			НужноОбработатьСтрок = НужноОбработатьСтрок / 2;
			
		КонецЕсли; 
		
		Если КолТабСообщений >  МаксимальноеКоличествоОшибок Тогда
			
			ОбработаноСтрок = НужноОбработатьСтрок;
			ТекстОписанияОшибки = "Найдено " + МаксимальноеКоличествоОшибок + " и более ошибок. Дальнейшая проверка прекращена!";
					
			СтруктураОшибки = Новый Структура;
			СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
			СтруктураОшибки.Вставить("Раздел", "Раздел2");
			СтруктураОшибки.Вставить("Показатель", Неопределено);
			СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
			СтруктураОшибки.Вставить("ТипОшибки", "МногоОшибок");
			
			СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
			
		    Возврат;
			
		КонецЕсли;
								
	КонецЦикла;
	
		
КонецПроцедуры

Процедура ПроверитьЗаполнениеТаблицыРаздел2(СтатусПроверки, ИдГруппы, ДополнительныеДанные, НомерЛиста, ИдОП = "", 
									ЕстьЗаполненныйЛистРаздела = Ложь, НужноПерекрестноПроверятьПроизводителей = Истина)
	
	НомерЛистаСтроковый = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаЧГ0(НомерЛиста);
	
	ИндексСтраницы = НомерЛиста - 1;
	
	ПрефиксИмени = ИдГруппы;
	
	ИмяТаблицы = Неопределено;
	
	МетаданныеКонтрагенты = Метаданные.Справочники.Контрагенты;
	ЕстьСтранаРегистрации = ОбщегоНазначения.ЕстьРеквизитОбъекта("СтранаРегистрации", МетаданныеКонтрагенты);
	
	СтранаРоссия = Неопределено;
	Если ЕстьСтранаРегистрации Тогда
	    СтранаРоссия = ПредопределенноеЗначение("Справочник.СтраныМира.Россия");		
	КонецЕсли;
	
	ЕстьИдОП = НЕ ПустаяСтрока(СтрЗаменить(ИдОП, "\", ""));
	
	// Опеределим регистр сведений.
	ИмяРегистраСведений = ПолучитьИмяРегистраСведений(ИдГруппы);
	
	СервисРегистров = СтруктураСервисРегистров[ИмяРегистраСведений];
	ИндексСтраницыРегистра = СервисРегистров[ИндексСтраницы].ИндексСтраницыРегистра;
	ИДДокИндСтраницы = РегламентированнаяОтчетностьАЛКО.ПолучитьИдДокИндСтраницы(ДокументСсылкаАлкоОтчет, ИндексСтраницыРегистра);
	
	ДанныеДвиженийПоОП = Неопределено;
	Если НужноПерекрестноПроверятьПроизводителей Тогда	
		ДанныеДвиженийПоОП = ДанныеДвижений[ИдОП];
		ДанныеОП_Раздел1[ИдОП].Вставить("ИДДокИндСтраницыРаздел2", ИДДокИндСтраницы);
	КонецЕсли;
	
	ТекущийИндексСтроки = 0;
	КолСтрокРаздел2 = 0;
	
	Пока Истина Цикл
	
		СтруктураНастроек = Новый Структура;
		СтруктураНастроек.Вставить("КоличествоПервых", 1000);
		СтруктураНастроек.Вставить("ТекущийИндексСтроки", ТекущийИндексСтроки);
		
		РезЗапросаДанных = РегламентированнаяОтчетностьАЛКО.ЗаполнитьПоСтраницеРазделаАЛКО(
									ИдГруппы, ИндексСтраницы, 
								   	СтруктураРеквизитовФормы, , ИДДокИндСтраницы,
								   	Ложь, СтруктураНастроек);
		
		Если РезЗапросаДанных.Количество() = 0 Тогда		
			Прервать;				
		КонецЕсли; 
		
		Для каждого СтрокаДекларации Из РезЗапросаДанных Цикл
						
			НомерСтроки = СтрокаДекларации.ИндексСтроки;
			ТекущийИндексСтроки = СтрокаДекларации.ИндексСтроки;
			КолСтрокРаздел2 = КолСтрокРаздел2 + 1;
			
			НомерСтрокиСтроковый = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаЧГ0(НомерСтроки);
			
			СтрокаЗаполнена = ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "02"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "03"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "04"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "05"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "06"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "07"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "08"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "91"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "92"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "10"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "11"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "12"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "13"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "14"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "15"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "16"]);
			Если НЕ СтрокаЗаполнена Тогда			
				
				ТекстОписанияОшибки = "В Разделе 2 декларации, на листе " + НомерЛистаСтроковый + ", в строке " + НомерСтрокиСтроковый  + ", не заполнено ни одно поле!";
				
				ИмяПоказателя = ПрефиксИмени + "02_" + НомерСтрокиСтроковый;
				
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", "Раздел2");
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "ПустаяСтрока");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
                
				Продолжить;
			КонецЕсли;
			
			ОбработаноСтрок = ОбработаноСтрок + 1;
					
			ЕстьЗаполненныйЛистРаздела = Истина;
			
			ИмяГрафы = ПрефиксИмени + "02";
			ИмяПоказателя = ПрефиксИмени + "02_" + НомерСтрокиСтроковый;
			КодВидаПродукции = СокрЛП(СтрокаДекларации[ИмяГрафы]);
			
			Если ПустаяСтрока(КодВидаПродукции) Тогда
				ТекстОписанияОшибки = "В Разделе 2 декларации, на листе " + НомерЛистаСтроковый + ", в строке " + НомерСтрокиСтроковый  + ", не задан код вида продукции!";
						
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", "Раздел2");
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НетКодаПродукции");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
			 
			ИначеЕсли СтрДлина(КодВидаПродукции) <> 3 Тогда
				ТекстОписанияОшибки = "В Разделе 2 декларации, на листе " + НомерЛистаСтроковый + ", в строке " + НомерСтрокиСтроковый  + ", неверно задан код вида продукции!";
						
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", "Раздел2");
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "КодПродукцииНе3");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
			  
			КонецЕсли;
			
			ИмяГрафы = ПрефиксИмени + "03";
			ИмяПоказателя = ПрефиксИмени + "03_" + НомерСтрокиСтроковый;
			ЗначениеГрафы = СтрокаДекларации[ИмяГрафы];
			НаименованиеПроизводителя = СокрЛП(ЗначениеГрафы);
			ИмяНаименованиеПроизводителя = ИмяПоказателя;
	        Если НЕ ЗначениеЗаполнено(ЗначениеГрафы) Тогда
				ТекстОписанияОшибки = "В Разделе 2 декларации, на листе " + НомерЛистаСтроковый + ", в строке " + НомерСтрокиСтроковый  + ", не указано наименование производителя/импортера!";
						
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", "Раздел2");
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НетНаименованияПроизводителя");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
			   
			КонецЕсли;
			
			////////////////////////////////////////////////////////////////////////////////
			// Контроль ИНН-КПП.
			
			ИмяГрафыИНН = ПрефиксИмени + "04";
			ИмяПоказателяИНН = ПрефиксИмени + "04_" + НомерСтрокиСтроковый;
			ИНН = СокрЛП(СтрокаДекларации[ИмяГрафыИНН]);
			ИННПроизводителя = ИНН;
			ДлинаИНН = СтрДлина(ИНН);
			
			ИмяГрафыКПП = ПрефиксИмени + "05";
			ИмяПоказателяКПП = ПрефиксИмени + "05_" + НомерСтрокиСтроковый;
			КПП = СокрЛП(СтрокаДекларации[ИмяГрафыКПП]);
			КПППроизводителя = КПП;
							
			ИмяРаздела = "Раздел2";
			СтрВКакомРазделе = "В Разделе 2";
			РодПадежЧейИННКПП = "производителя/импортера";
			
			РоссийскийКонтрагент = ЭтоТочноРоссийскийКонтрагент(СтрокаДекларации.ПроизводительИмпортер, 
											ЕстьСтранаРегистрации, СтранаРоссия, ИНН, КПП);			
						
			МожетБытьПустойИНН = Ложь;
			МожетБытьПустойКПП = Истина;
			
			СтруктураСведенийИННКПП = Новый Структура;
			
			СтруктураСведенийИННКПП.Вставить("ИмяРаздела", 				ИмяРаздела);
			СтруктураСведенийИННКПП.Вставить("СтрВКакомРазделе", 		СтрВКакомРазделе);
			СтруктураСведенийИННКПП.Вставить("НомерЛиста", 				НомерЛиста);
			СтруктураСведенийИННКПП.Вставить("НомерСтрокиСтроковый", 	НомерСтрокиСтроковый);
			СтруктураСведенийИННКПП.Вставить("ИмяТаблицы", 				ИмяТаблицы);
			
			СтруктураСведенийИННКПП.Вставить("ИмяПоказателяНаименования", 		ИмяНаименованиеПроизводителя);
			СтруктураСведенийИННКПП.Вставить("Наименование", 					НаименованиеПроизводителя);
			
			СтруктураСведенийИННКПП.Вставить("ИмяПоказателяИНН", 		ИмяПоказателяИНН);
			СтруктураСведенийИННКПП.Вставить("ИНН", 					ИНН);
			СтруктураСведенийИННКПП.Вставить("ИмяПоказателяКПП", 		ИмяПоказателяКПП);
			СтруктураСведенийИННКПП.Вставить("КПП", 					КПП);
			СтруктураСведенийИННКПП.Вставить("РодПадежЧейИННКПП", 		РодПадежЧейИННКПП);
				
			СтруктураСведенийИННКПП.Вставить("МожетБытьПустойИНН", 		МожетБытьПустойИНН);	
			СтруктураСведенийИННКПП.Вставить("МожетБытьПустойКПП", 		МожетБытьПустойКПП);
			
	
			ПроверкаИННКППвСтрокахТаблиц(ДокументСсылкаАлкоОтчет,  
										ТаблицаСообщений, СтатусПроверки, СтруктураСведенийИННКПП, РоссийскийКонтрагент);
						
			Если РоссийскийКонтрагент = Неопределено Тогда		
				РоссийскийКонтрагент = (ДлинаИНН = 12) или (ДлинаИНН = 10);			
			КонецЕсли;
			
			//
			////////////////////////////////////////////////////////////////////////////////
	       
			// Контроль по наличию Производителей/Импортеров из Раздела 2 в Разделе 1.
			НетОшибкиПоКодуПродукцииПроизводителю = Истина;
			
			Если НужноПерекрестноПроверятьПроизводителей Тогда
								
				ИдКодПродПроизв = "Х" + СтрокаДекларации.ХешИдКодПродПроизв;
				
				Если НЕ ПустаяСтрока(КодВидаПродукции) Тогда
					
					// Ведущие нули в строке вызывают ошибку при попытке назначения ключем.
					КодВидаПродукцииКлюч = "Х" + КодВидаПродукции;
					
					Если НЕ ДанныеДвиженийПоОП.Свойство(КодВидаПродукцииКлюч) Тогда						
						НетОшибкиПоКодуПродукцииПроизводителю = Ложь;
					Иначе
						ДанныеДвиженийПоОП[КодВидаПродукцииКлюч].КоличествоСтрокРаздел2ПоКоду = ДанныеДвиженийПоОП[КодВидаПродукцииКлюч].КоличествоСтрокРаздел2ПоКоду + 1;
						ДанныеДвижений_ПоОП_ПоКоду = ДанныеДвиженийПоОП[КодВидаПродукцииКлюч].КодПродПроизв;
					КонецЕсли;
					
					Если НетОшибкиПоКодуПродукцииПроизводителю Тогда
					    Если НЕ ДанныеДвижений_ПоОП_ПоКоду.Свойство(ИдКодПродПроизв) Тогда
						    НетОшибкиПоКодуПродукцииПроизводителю = Ложь;
						Иначе
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].КоличествоСтрокРаздел2ПоКодПродПроизв = ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].КоличествоСтрокРаздел2ПоКодПродПроизв + 1;
					    КонецЕсли;
					КонецЕсли; 
					
					Если НЕ НетОшибкиПоКодуПродукцииПроизводителю Тогда
					
						// Нет по текущему коду продукции такого производителя в Разделе 1 по тому же ОП.
						ТекстОписанияОшибки = "В Разделе 2 декларации, на листе " + НомерЛистаСтроковый + ", в строке " + НомерСтрокиСтроковый  + ", " 
												+ "указан Производитель/Импортер " + НаименованиеПроизводителя + " (" 
												+ ?(ПустаяСтрока(ИННПроизводителя),"ИНН незаполнен" ,"ИНН "+ ИННПроизводителя)
												+ ?(ПустаяСтрока(КПППроизводителя), "", ", КПП " + КПППроизводителя) 
												+ "), которого нет по тому же обособленному подразделению в Разделе 1 для кода продукции " 
												+ КодВидаПродукции + ".";
								
						СтруктураОшибки = Новый Структура;
						СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
						СтруктураОшибки.Вставить("Раздел", "Раздел2");
						СтруктураОшибки.Вставить("Показатель", ИмяНаименованиеПроизводителя);
						СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
						СтруктураОшибки.Вставить("ТипОшибки", "НетСочетанияКодПроизводительРаздел2");
						
						СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
			    					
					КонецЕсли; 
																	
				КонецЕсли;
				
			КонецЕсли;
			
			ИмяГрафы = ПрефиксИмени + "06";
			ИмяПоказателя = ПрефиксИмени + "06_" + НомерСтрокиСтроковый;
			ЗначениеГрафы = СокрЛП(СтрокаДекларации[ИмяГрафы]);
			ИмяНаименованиеПоставщика = ИмяПоказателя;
			НаименованиеПоставщика = ЗначениеГрафы;
			Если НЕ ЗначениеЗаполнено(ЗначениеГрафы) Тогда
				
				ТекстОписанияОшибки = "В Разделе 2 декларации, на листе " + НомерЛистаСтроковый + ", в строке " + НомерСтрокиСтроковый  + ", не указано наименование поставщика!";
						
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", "Раздел2");
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НетНаименованияПоставщика");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
			    
			КонецЕсли;
			
			
			////////////////////////////////////////////////////////////////////////////////
			// Контроль ИНН-КПП
			
			ИмяГрафыИНН = ПрефиксИмени + "07";
			ИмяПоказателяИНН = ПрефиксИмени + "07_" + НомерСтрокиСтроковый;
			ИНН = СокрЛП(СтрокаДекларации[ИмяГрафыИНН]);
			ИННПоставщика = ИНН;
			ДлинаИНН = СтрДлина(ИНН);
			
			ИмяГрафыКПП = ПрефиксИмени + "08";
			ИмяПоказателяКПП = ПрефиксИмени + "08_" + НомерСтрокиСтроковый;
			КПП = СокрЛП(СтрокаДекларации[ИмяГрафыКПП]);
			КПППоставщика = КПП;
			
			ИмяРаздела = "Раздел2";
			СтрВКакомРазделе = "В Разделе 2";
			РодПадежЧейИННКПП = "поставщика";
			
			РоссийскийКонтрагент = ЭтоТочноРоссийскийКонтрагент(СтрокаДекларации.Поставщик, 
											ЕстьСтранаРегистрации, СтранаРоссия, ИНН, КПП);
											
			// По схеме выгрузки предполагается ЮЛ или ФЛ РФ, но пока оставим
			// возможность заполнения поставщиками из ТС - не резидентами РФ.			
			МожетБытьПустойИНН = Ложь;
			МожетБытьПустойКПП = Истина;
			
			СтруктураСведенийИННКПП = Новый Структура;
			
			СтруктураСведенийИННКПП.Вставить("ИмяРаздела", 				ИмяРаздела);
			СтруктураСведенийИННКПП.Вставить("СтрВКакомРазделе", 		СтрВКакомРазделе);
			СтруктураСведенийИННКПП.Вставить("НомерЛиста", 				НомерЛиста);
			СтруктураСведенийИННКПП.Вставить("НомерСтрокиСтроковый", 	НомерСтрокиСтроковый);
			СтруктураСведенийИННКПП.Вставить("ИмяТаблицы", 				ИмяТаблицы);
			
			СтруктураСведенийИННКПП.Вставить("ИмяПоказателяНаименования", 		ИмяНаименованиеПоставщика);
			СтруктураСведенийИННКПП.Вставить("Наименование", 					НаименованиеПоставщика);
						
			СтруктураСведенийИННКПП.Вставить("ИмяПоказателяИНН", 		ИмяПоказателяИНН);
			СтруктураСведенийИННКПП.Вставить("ИНН", 					ИНН);
			СтруктураСведенийИННКПП.Вставить("ИмяПоказателяКПП", 		ИмяПоказателяКПП);
			СтруктураСведенийИННКПП.Вставить("КПП", 					КПП);
			СтруктураСведенийИННКПП.Вставить("РодПадежЧейИННКПП", 		РодПадежЧейИННКПП);
				
			СтруктураСведенийИННКПП.Вставить("МожетБытьПустойИНН", 		МожетБытьПустойИНН);	
			СтруктураСведенийИННКПП.Вставить("МожетБытьПустойКПП", 		МожетБытьПустойКПП);
			
	
			НетПроблемИННКПП = ПроверкаИННКППвСтрокахТаблиц(ДокументСсылкаАлкоОтчет, 
								ТаблицаСообщений, СтатусПроверки, СтруктураСведенийИННКПП, РоссийскийКонтрагент);
						
			Если РоссийскийКонтрагент = Неопределено Тогда		
				РоссийскийКонтрагент = (ДлинаИНН = 12) или (ДлинаИНН = 10);			
			КонецЕсли;
			ПоставщикРоссийский = РоссийскийКонтрагент;
			
			//
			////////////////////////////////////////////////////////////////////////////////
			
			// Лицензии.
			ЛицензияЗаполнена = Ложь;
			// Если есть ошибки по ИНН/КПП нет смысла проверять лицензию, 
			// корректность ее заполнения зависит от корректности данных ИНН/КПП.
			Если НетПроблемИННКПП Тогда
				
				// Поля лицензии не обязательны по схеме выгрузки,
				// но если заполнено хоть одно поле лицензии - должны быть заполнены все остальные.
				
				ИмяСерияЛицензии = ПрефиксИмени + "91";
				ИмяНомерЛицензии = ПрефиксИмени + "92";
				ИмяДатаВыдачиЛицензии = ПрефиксИмени + "10";
				ИмяДатаОкончанияЛицензии = ПрефиксИмени + "11";
				ИмяКемВыданаЛицензия = ПрефиксИмени + "12";
				
				ЗначениеГрафыСерияЛиц = СокрЛП(СтрокаДекларации[ИмяСерияЛицензии]);				
				ЗначениеГрафыНомерЛиц = СокрЛП(СтрокаДекларации[ИмяНомерЛицензии]);				
		        ЗначениеГрафыДатаВыдачиЛиц = СтрокаДекларации[ИмяДатаВыдачиЛицензии];				
				ЗначениеГрафыДатаОкончанияЛиц = СтрокаДекларации[ИмяДатаОкончанияЛицензии];				
		        ЗначениеГрафыКемВыданаЛиц = СокрЛП(СтрокаДекларации[ИмяКемВыданаЛицензия]);
					
				
				РодительскийПадежЧьяЛицензия = "поставщика";
				
				СтруктураСведенийЛицензий = Новый Структура;
				
				СтруктураСведенийЛицензий.Вставить("ИмяРаздела", 			ИмяРаздела);	
				СтруктураСведенийЛицензий.Вставить("СтрВКакомРазделе", 		СтрВКакомРазделе);
				СтруктураСведенийЛицензий.Вставить("НомерЛиста", 			НомерЛиста);
				СтруктураСведенийЛицензий.Вставить("НомерСтрокиСтроковый", 	НомерСтрокиСтроковый);
				
				СтруктураСведенийЛицензий.Вставить("ИмяСерияЛицензии", 		ИмяСерияЛицензии);
				СтруктураСведенийЛицензий.Вставить("СерияЛицензии", 		ЗначениеГрафыСерияЛиц);
				СтруктураСведенийЛицензий.Вставить("ИмяНомерЛицензии", 		ИмяНомерЛицензии);
				СтруктураСведенийЛицензий.Вставить("НомерЛицензии", 		ЗначениеГрафыНомерЛиц);
				
				СтруктураСведенийЛицензий.Вставить("ИмяДатаВыдачиЛицензии", 	ИмяДатаВыдачиЛицензии);
				СтруктураСведенийЛицензий.Вставить("ДатаВыдачиЛицензии", 		ЗначениеГрафыДатаВыдачиЛиц);
				СтруктураСведенийЛицензий.Вставить("ИмяДатаОкончанияЛицензии", 	ИмяДатаОкончанияЛицензии);
				СтруктураСведенийЛицензий.Вставить("ДатаОкончанияЛицензии", 	ЗначениеГрафыДатаОкончанияЛиц);
				
				СтруктураСведенийЛицензий.Вставить("ИмяКемВыданаЛицензия", 	ИмяКемВыданаЛицензия);
				СтруктураСведенийЛицензий.Вставить("КемВыданаЛицензия", 	ЗначениеГрафыКемВыданаЛиц);
				
				СтруктураСведенийЛицензий.Вставить("РодительскийПадежЧьяЛицензия", 	РодительскийПадежЧьяЛицензия);
				
				ЛицензияЗаполнена = ПроверкаЗаполненияЛицензийВСтрокахТаблиц(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки,
									 НетПроблемИННКПП, СтруктураСведенийЛицензий, ПоставщикРоссийский);
				
			КонецЕсли;
			
					
			ИмяГрафы = ПрефиксИмени + "13";
			ИмяПоказателя = ПрефиксИмени + "13_" + НомерСтрокиСтроковый;
			ЗначениеГрафы = СтрокаДекларации[ИмяГрафы];
			Если НЕ ЗначениеЗаполнено(ЗначениеГрафы) Тогда
				ТекстОписанияОшибки = "В Разделе 2 декларации, на листе " + НомерЛистаСтроковый + ", в строке " + НомерСтрокиСтроковый  + ", не указана дата закупки!";
						
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", "Раздел2");
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НетДатыЗакупки");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
			    
			КонецЕсли;
			
			ИмяГрафы = ПрефиксИмени + "14";
			ИмяПоказателя = ПрефиксИмени + "14_" + НомерСтрокиСтроковый;
			ЗначениеГрафы = СокрЛП(СтрокаДекларации[ИмяГрафы]);
			Если ПустаяСтрока(ЗначениеГрафы) Тогда
				ТекстОписанияОшибки = "В Разделе 2 декларации, на листе " + НомерЛистаСтроковый + ", в строке " + НомерСтрокиСтроковый  + ", не указан номер товарно-транспортной накладной!";
						
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", "Раздел2");
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НетТТН");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
			    
			КонецЕсли;
			
			// Номер ГТД (15) всегда выгружается, но не всегда заполняется.
			// Не контролируем.
			
			ИмяГрафы = ПрефиксИмени + "16";
			ИмяПоказателя = ПрефиксИмени + "16_" + НомерСтрокиСтроковый;
			ЗначениеГрафы = СтрокаДекларации[ИмяГрафы];
			Если НЕ ЗначениеЗаполнено(ЗначениеГрафы) Тогда
				ТекстОписанияОшибки = "В Разделе 2 декларации, на листе " + НомерЛистаСтроковый + ", в строке " + НомерСтрокиСтроковый  + ", не указан объем закупленной продукции!";
						
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", "Раздел2");
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НетОбъемаЗакупки");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
			    
			КонецЕсли;
			
		    // Заполняем справочники Поставщиков и Лицензий поставщиков.
			Если НужноПерекрестноПроверятьПроизводителей и (ТаблицаСообщений.Количество() = 0) Тогда
			 
				ИдПоставщика = "Х" + СтрокаДекларации.ХешИдПоставщика;
			
			    Если НЕ ДанныеПоставщиков.Свойство(ИдПоставщика) Тогда
					
					СчетчикИдПоставщиков = СчетчикИдПоставщиков + 1;
					
					ДанныеПоставщиков.Вставить(ИдПоставщика, Новый Структура);
					
					ДанныеПоставщиков[ИдПоставщика].Вставить("ИдПостав", 		СчетчикИдПоставщиков);
					ДанныеПоставщиков[ИдПоставщика].Вставить("П000000000007", 	НаименованиеПоставщика);
				    ДанныеПоставщиков[ИдПоставщика].Вставить("П000000000009", 	ИННПоставщика);
					ДанныеПоставщиков[ИдПоставщика].Вставить("П000000000010", 	КПППоставщика);
					ДанныеПоставщиков[ИдПоставщика].Вставить("Лицензии", 		Новый Структура);
					
				КонецЕсли;
				
				
				
				ТекущийПоставщик = ДанныеПоставщиков[ИдПоставщика];
				
				ИдЛиц = "Х" + СтрокаДекларации.ХешИдЛицензии;
				ИдЛицензии = "";
								
				Если ЛицензияЗаполнена Тогда
					
					Если НЕ ДанныеЛицензий.Свойство(ИдЛиц) Тогда
						
						СчетчикИдЛицензий = СчетчикИдЛицензий + 1;
						
						ДанныеЛицензий.Вставить(ИдЛиц, Новый Структура);
						
						ДанныеЛицензий[ИдЛиц].Вставить("ИдЛицензии", 			СчетчикИдЛицензий);
						ДанныеЛицензий[ИдЛиц].Вставить("П000000000011Серия", 	ЗначениеГрафыСерияЛиц);
					    ДанныеЛицензий[ИдЛиц].Вставить("П000000000011Номер", 	ЗначениеГрафыНомерЛиц);
						ДанныеЛицензий[ИдЛиц].Вставить("П000000000012", 		ЗначениеГрафыДатаВыдачиЛиц);
						ДанныеЛицензий[ИдЛиц].Вставить("П000000000013", 		ЗначениеГрафыДатаОкончанияЛиц);
						ДанныеЛицензий[ИдЛиц].Вставить("П000000000014", 		ЗначениеГрафыКемВыданаЛиц);
						
						// Вставим в список лицензий Поставщика
						// по ключу структуры Лицензии ИдЛиц всегда ее сможем получить из ДанныеЛицензий.
						ТекущийПоставщик.Лицензии.Вставить(ИдЛиц, "");
						
					КонецЕсли;
					// Если данный ИдЛиц уже есть в ДанныеЛицензий - эта лицензия уже есть в Лицензиях Поставщика,
					// поскольку при расчете ИдЛиц учитывается ИНН Поставщика, что означает что не могут быть
					// одинаковые хеши у лицензий по разным Поставщикам.
					ИдЛицензии = ДанныеЛицензий[ИдЛиц].ИдЛицензии;
					
				КонецЕсли;
				
				ИдПоставщикаЛиц = ИдЛиц;
				
				Если НЕ ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Поставщики.Свойство(ИдПоставщикаЛиц) Тогда
					
					ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Поставщики.Вставить(ИдПоставщикаЛиц, Новый Структура);
					
					СтруктураПоставщика = ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Поставщики[ИдПоставщикаЛиц];
					
					СтруктураПоставщика.Вставить("ХешИдЛицензии", 	СтрокаДекларации.ХешИдЛицензии);
					СтруктураПоставщика.Вставить("ИдПоставщика", 	ТекущийПоставщик.ИдПостав);					
					СтруктураПоставщика.Вставить("ИдЛицензии", 		ИдЛицензии);
					
				КонецЕсли;	
				
			КонецЕсли;
			
			
			КолТабСообщений = ТаблицаСообщений.Количество();
			
			Если НетОшибокПроверки и (КолТабСообщений > 0)  Тогда
				НетОшибокПроверки = Ложь;
			    ПроцентБезЗавершающейПроверкиДанных = 100;
				НужноОбработатьСтрок = НужноОбработатьСтрок / 2;
			КонецЕсли; 
			
			Если КолТабСообщений >  МаксимальноеКоличествоОшибок Тогда
				ОбработаноСтрок = НужноОбработатьСтрок;
			    Возврат;
			КонецЕсли;
			
		КонецЦикла;
				
		// Информируем о ходе выполнения.
		Если НужноОбработатьСтрок > 0 Тогда
			
			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка заполнения Раздел 2.", ОбработаноСтрок, 
										НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных);
			
		КонецЕсли;
				
	КонецЦикла;
	
	Если НужноПерекрестноПроверятьПроизводителей Тогда			
		ДанныеОП_Раздел1[ИдОП].Вставить("КолСтрокПоРазделу2", КолСтрокРаздел2);
	КонецЕсли;
		
КонецПроцедуры

Функция ОтчетЗаполненКорректно()
	
	СтатусПроверки = Истина;
	
	МаксимальноеКоличествоОшибок = 1000;
	
	ПроверитьЗаполнениеТитульный(СтатусПроверки);
	
	ПроверитьЗаполнениеЛицензии(СтатусПроверки);
	
	Если ТаблицаСообщений.Количество() <=  МаксимальноеКоличествоОшибок Тогда
				
		// информируем о ходе выполнения				
		Если НужноОбработатьСтрок > 0 Тогда
			
			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка заполнения Раздел 1.", ОбработаноСтрок, 
										НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных);
			
		КонецЕсли;
		
		ПроверитьЗаполнениеРаздел1(СтатусПроверки);
		
	КонецЕсли;
	
		
	Если ТаблицаСообщений.Количество() <=  МаксимальноеКоличествоОшибок Тогда
		
		// информируем о ходе выполнения				
		Если НужноОбработатьСтрок > 0 Тогда
			
			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка заполнения Раздел 2.", ОбработаноСтрок, 
										НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных);
			
		КонецЕсли;
		ПроверитьЗаполнениеРаздел2(СтатусПроверки);

	КонецЕсли;
		
	КолСтрокПриПроверкеЗаполнения = ОбработаноСтрок;
		
	Возврат СтатусПроверки;
	
КонецФункции


Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	РегламентированнаяОтчетностьАЛКО.ОтсечьНезаполненныеНеобязательныеУзлыАЛКО(Узел);
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	РегламентированнаяОтчетностьАЛКО.ОбработатьУсловныеЭлементыАЛКО(ПараметрыВыгрузки, Узел, 
						ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, ВерсияБСПЧислом);
	
КонецПроцедуры

Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ПолучитьПодчиненныйЭлементАЛКО(Узел, КодЭлемента);
	
КонецФункции 

Функция НовыйУзелИзПрототипа(ПрототипУзла)
	
	Возврат РегламентированнаяОтчетностьАЛКО.НовыйУзелИзПрототипаАЛКО(ПрототипУзла);
	
КонецФункции

Процедура УстановитьЗначениеЭлемента(УзелРодитель, ИмяЭлемента, ЗначениеЭлемента)
	
	РегламентированнаяОтчетностьАЛКО.УстановитьЗначениеЭлементаАЛКО(УзелРодитель, ИмяЭлемента, ЗначениеЭлемента);
	
КонецПроцедуры

Функция ИдентификаторОП(СведенияОП)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ИдентификаторОП_АЛКО(СведенияОП);
	
КонецФункции

Процедура ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	РегламентированнаяОтчетностьАЛКО.ВывестиПоказательВXML_АЛКО(Узел, ЗначениеПоказателя);
	
КонецПроцедуры

Функция ПроверитьДанные(Узел)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ПроверитьДанныеАЛКО(Узел, 
							ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки);
		
КонецФункции


Процедура ЗаполнитьСправочникиДекларации(УзелСправочники)
	
	ОбразецУзлаПроизводителиИмпортеры = ПолучитьПодчиненныйЭлемент(УзелСправочники, "ПроизводителиИмпортеры");
	
	Для Каждого ЭлементДанныеПроизводителей Из ДанныеПроизводителей Цикл
		
		СтрокаПроизводителяИмпортера = ЭлементДанныеПроизводителей.Значение;
		
		НовыйУзелПроизводителиИмпортеры = НовыйУзелИзПрототипа(ОбразецУзлаПроизводителиИмпортеры);
		
		УстановитьЗначениеЭлемента(НовыйУзелПроизводителиИмпортеры, "ИДПроизвИмп", СтрокаПроизводителяИмпортера.ИДПроизвИмп);
		УстановитьЗначениеЭлемента(НовыйУзелПроизводителиИмпортеры, "П000000000004", СтрокаПроизводителяИмпортера.П000000000004);
		УстановитьЗначениеЭлемента(НовыйУзелПроизводителиИмпортеры, "П000000000005", СтрокаПроизводителяИмпортера.П000000000005);
		УстановитьЗначениеЭлемента(НовыйУзелПроизводителиИмпортеры, "П000000000006", СтрокаПроизводителяИмпортера.П000000000006);
		
		ДанныеПроизводителей.Удалить(ЭлементДанныеПроизводителей.Ключ);
		
	КонецЦикла;
	
	РегламентированнаяОтчетность.УдалитьУзел(ОбразецУзлаПроизводителиИмпортеры);
	
	ПрототипУзла_Поставщики = ПолучитьПодчиненныйЭлемент(УзелСправочники, "Поставщики");
	
	Для Каждого ЭлементДанныеПоставщиков Из ДанныеПоставщиков Цикл
		
		СтрокаПоставщика = ЭлементДанныеПоставщиков.Значение;
		
		Узел_Поставщики = НовыйУзелИзПрототипа(ПрототипУзла_Поставщики);
		
		УстановитьЗначениеЭлемента(Узел_Поставщики, "ИдПостав", СтрокаПоставщика.ИдПостав);
		УстановитьЗначениеЭлемента(Узел_Поставщики, "П000000000007", СтрокаПоставщика.П000000000007);
		
		УказанИНН = НЕ ПустаяСтрока(СтрокаПоставщика.П000000000009);
		УказанКПП = НЕ ПустаяСтрока(СтрокаПоставщика.П000000000010);
		
		ПрототипУзла_Лицензии = ПолучитьПодчиненныйЭлемент(Узел_Поставщики, "Лицензии");
				
		СтрокиЛицензий = СтрокаПоставщика.Лицензии;
		Для Каждого ЭлементСтрокиЛицензий Из СтрокиЛицензий Цикл
			
			ИдЛиц = ЭлементСтрокиЛицензий.Ключ;
						
			СтрокаЛицензии = ДанныеЛицензий[ИдЛиц];
			
			Узел_Лицензии = НовыйУзелИзПрототипа(ПрототипУзла_Лицензии);
			Узел_Лицензия = ПолучитьПодчиненныйЭлемент(Узел_Лицензии, "Лицензия");
						
			СерияНомерЛицензии = СтрокаЛицензии.П000000000011Серия 
								+ ?(  ЗначениеЗаполнено(СтрокаЛицензии.П000000000011Серия) 
								 	и ЗначениеЗаполнено(СтрокаЛицензии.П000000000011Номер), ",", "") 
								+ СтрокаЛицензии.П000000000011Номер;
								
			УстановитьЗначениеЭлемента(Узел_Лицензия, "ИдЛицензии", СтрокаЛицензии.ИдЛицензии);
			УстановитьЗначениеЭлемента(Узел_Лицензия, "П000000000011", СерияНомерЛицензии);
			УстановитьЗначениеЭлемента(Узел_Лицензия, "П000000000012", СтрокаЛицензии.П000000000012);
			УстановитьЗначениеЭлемента(Узел_Лицензия, "П000000000013", СтрокаЛицензии.П000000000013);
			УстановитьЗначениеЭлемента(Узел_Лицензия, "П000000000014", СтрокаЛицензии.П000000000014);
						
		КонецЦикла;
		РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_Лицензии);
		СтрокаПоставщика.Удалить("Лицензии");
		
		Узел_ЮЛ = ПолучитьПодчиненныйЭлемент(Узел_Поставщики, "ЮЛ");
		Узел_ФЛ = ПолучитьПодчиненныйЭлемент(Узел_Поставщики, "ФЛ");
		Если УказанКПП Тогда
			УстановитьЗначениеЭлемента(Узел_ЮЛ, "П000000000009", СтрокаПоставщика.П000000000009);
			УстановитьЗначениеЭлемента(Узел_ЮЛ, "П000000000010", СтрокаПоставщика.П000000000010);
			РегламентированнаяОтчетность.УдалитьУзел(Узел_ФЛ);
		Иначе
			РегламентированнаяОтчетность.УдалитьУзел(Узел_ЮЛ);
			УстановитьЗначениеЭлемента(Узел_ФЛ, "П000000000009", СтрокаПоставщика.П000000000009);
		КонецЕсли;
		
		ДанныеПоставщиков.Удалить(ЭлементДанныеПоставщиков.Ключ);
		
	КонецЦикла;
	
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_Поставщики);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияДекларации(НовыйУзелОбъемОборота, ИдОП, ИДДокИндСтраницыРаздел2)
	
		
	ДокОтчета = СтруктураРеквизитовФормы.мСохраненныйДок;
	ТекстЗапросаРаздел2 = "ВЫБРАТЬ
	                      |	РегистрСведенийАлкоПрил11Раздел2.Документ,
	                      |	РегистрСведенийАлкоПрил11Раздел2.ИндексСтроки,
	                      |	РегистрСведенийАлкоПрил11Раздел2.ИДДокИндСтраницы,
	                      |	РегистрСведенийАлкоПрил11Раздел2.П000020000301,
	                      |	РегистрСведенийАлкоПрил11Раздел2.П000020000302,
	                      |	РегистрСведенийАлкоПрил11Раздел2.П000020000303,
	                      |	РегистрСведенийАлкоПрил11Раздел2.П000020000304,
	                      |	РегистрСведенийАлкоПрил11Раздел2.П000020000305,
	                      |	РегистрСведенийАлкоПрил11Раздел2.П000020000306,
	                      |	РегистрСведенийАлкоПрил11Раздел2.П000020000307,
	                      |	РегистрСведенийАлкоПрил11Раздел2.П000020000308,
	                      |	РегистрСведенийАлкоПрил11Раздел2.П000020000391,
	                      |	РегистрСведенийАлкоПрил11Раздел2.П000020000392,
	                      |	РегистрСведенийАлкоПрил11Раздел2.П000020000310,
	                      |	РегистрСведенийАлкоПрил11Раздел2.П000020000311,
	                      |	РегистрСведенийАлкоПрил11Раздел2.П000020000312,
	                      |	РегистрСведенийАлкоПрил11Раздел2.П000020000313,
	                      |	РегистрСведенийАлкоПрил11Раздел2.П000020000314,
	                      |	РегистрСведенийАлкоПрил11Раздел2.П000020000315,
	                      |	РегистрСведенийАлкоПрил11Раздел2.П000020000316,
	                      |	РегистрСведенийАлкоПрил11Раздел2.Активно,
	                      |	РегистрСведенийАлкоПрил11Раздел2.ХешИдКодПродПроизв КАК ХешИдКодПродПроизв,
	                      |	РегистрСведенийАлкоПрил11Раздел2.ХешИдПоставщика,
	                      |	РегистрСведенийАлкоПрил11Раздел2.ХешИдЛицензии КАК ХешИдЛицензии
	                      |ИЗ
	                      |	РегистрСведений.СведенияРеглОтчетАлкоПрил11Раздел2 КАК РегистрСведенийАлкоПрил11Раздел2
	                      |ГДЕ
	                      |	РегистрСведенийАлкоПрил11Раздел2.ИДДокИндСтраницы = &ИДДокИндСтраницы
	                      |	И РегистрСведенийАлкоПрил11Раздел2.Активно = ИСТИНА
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ХешИдКодПродПроизв,
	                      |	ХешИдЛицензии";
								  
	ТекстЗапросаРаздел2_КодПрод = "ВЫБРАТЬ
	                              |	РегистрСведенийАлкоПрил11Раздел2.Документ,
	                              |	РегистрСведенийАлкоПрил11Раздел2.ИндексСтроки,
	                              |	РегистрСведенийАлкоПрил11Раздел2.ИДДокИндСтраницы,
	                              |	РегистрСведенийАлкоПрил11Раздел2.П000020000301,
	                              |	РегистрСведенийАлкоПрил11Раздел2.П000020000302,
	                              |	РегистрСведенийАлкоПрил11Раздел2.П000020000303,
	                              |	РегистрСведенийАлкоПрил11Раздел2.П000020000304,
	                              |	РегистрСведенийАлкоПрил11Раздел2.П000020000305,
	                              |	РегистрСведенийАлкоПрил11Раздел2.П000020000306,
	                              |	РегистрСведенийАлкоПрил11Раздел2.П000020000307,
	                              |	РегистрСведенийАлкоПрил11Раздел2.П000020000308,
	                              |	РегистрСведенийАлкоПрил11Раздел2.П000020000391,
	                              |	РегистрСведенийАлкоПрил11Раздел2.П000020000392,
	                              |	РегистрСведенийАлкоПрил11Раздел2.П000020000310,
	                              |	РегистрСведенийАлкоПрил11Раздел2.П000020000311,
	                              |	РегистрСведенийАлкоПрил11Раздел2.П000020000312,
	                              |	РегистрСведенийАлкоПрил11Раздел2.П000020000313,
	                              |	РегистрСведенийАлкоПрил11Раздел2.П000020000314,
	                              |	РегистрСведенийАлкоПрил11Раздел2.П000020000315,
	                              |	РегистрСведенийАлкоПрил11Раздел2.П000020000316,
	                              |	РегистрСведенийАлкоПрил11Раздел2.Активно,
	                              |	РегистрСведенийАлкоПрил11Раздел2.ХешИдКодПродПроизв КАК ХешИдКодПродПроизв,
	                              |	РегистрСведенийАлкоПрил11Раздел2.ХешИдПоставщика,
	                              |	РегистрСведенийАлкоПрил11Раздел2.ХешИдЛицензии КАК ХешИдЛицензии
	                              |ИЗ
	                              |	РегистрСведений.СведенияРеглОтчетАлкоПрил11Раздел2 КАК РегистрСведенийАлкоПрил11Раздел2
	                              |ГДЕ
	                              |	РегистрСведенийАлкоПрил11Раздел2.ИДДокИндСтраницы = &ИДДокИндСтраницы
								  |	И РегистрСведенийАлкоПрил11Раздел2.П000020000302 = &КодПродукции
								  |	И РегистрСведенийАлкоПрил11Раздел2.Активно = ИСТИНА
	                              |
	                              |УПОРЯДОЧИТЬ ПО
	                              |	ХешИдКодПродПроизв,
	                              |	ХешИдЛицензии";
	
	ТекстЗапросаРаздел2_КодПрод_Произв = "ВЫБРАТЬ
	                                     |	РегистрСведенийАлкоПрил11Раздел2.Документ,
	                                     |	РегистрСведенийАлкоПрил11Раздел2.ИндексСтроки,
	                                     |	РегистрСведенийАлкоПрил11Раздел2.ИДДокИндСтраницы,
	                                     |	РегистрСведенийАлкоПрил11Раздел2.П000020000301,
	                                     |	РегистрСведенийАлкоПрил11Раздел2.П000020000302,
	                                     |	РегистрСведенийАлкоПрил11Раздел2.П000020000303,
	                                     |	РегистрСведенийАлкоПрил11Раздел2.П000020000304,
	                                     |	РегистрСведенийАлкоПрил11Раздел2.П000020000305,
	                                     |	РегистрСведенийАлкоПрил11Раздел2.П000020000306,
	                                     |	РегистрСведенийАлкоПрил11Раздел2.П000020000307,
	                                     |	РегистрСведенийАлкоПрил11Раздел2.П000020000308,
	                                     |	РегистрСведенийАлкоПрил11Раздел2.П000020000391,
	                                     |	РегистрСведенийАлкоПрил11Раздел2.П000020000392,
	                                     |	РегистрСведенийАлкоПрил11Раздел2.П000020000310,
	                                     |	РегистрСведенийАлкоПрил11Раздел2.П000020000311,
	                                     |	РегистрСведенийАлкоПрил11Раздел2.П000020000312,
	                                     |	РегистрСведенийАлкоПрил11Раздел2.П000020000313,
	                                     |	РегистрСведенийАлкоПрил11Раздел2.П000020000314,
	                                     |	РегистрСведенийАлкоПрил11Раздел2.П000020000315,
	                                     |	РегистрСведенийАлкоПрил11Раздел2.П000020000316,
	                                     |	РегистрСведенийАлкоПрил11Раздел2.Активно,
	                                     |	РегистрСведенийАлкоПрил11Раздел2.ХешИдКодПродПроизв,
	                                     |	РегистрСведенийАлкоПрил11Раздел2.ХешИдПоставщика,
	                                     |	РегистрСведенийАлкоПрил11Раздел2.ХешИдЛицензии КАК ХешИдЛицензии
	                                     |ИЗ
	                                     |	РегистрСведений.СведенияРеглОтчетАлкоПрил11Раздел2 КАК РегистрСведенийАлкоПрил11Раздел2
	                                     |ГДЕ
	                                     |	РегистрСведенийАлкоПрил11Раздел2.ИДДокИндСтраницы = &ИДДокИндСтраницы
										 |	И РегистрСведенийАлкоПрил11Раздел2.ХешИдКодПродПроизв = &ХешИдКодПродПроизв
										 |	И РегистрСведенийАлкоПрил11Раздел2.Активно = ИСТИНА
	                                     |
	                                     |УПОРЯДОЧИТЬ ПО
	                                     |	ХешИдЛицензии";
	
	ТекстЗапросаРаздел2_КодПрод_Произв_ИдЛицензии = "ВЫБРАТЬ
	                                                |	РегистрСведенийАлкоПрил11Раздел2.*
	                                                |ИЗ
	                                                |	РегистрСведений.СведенияРеглОтчетАлкоПрил11Раздел2 КАК РегистрСведенийАлкоПрил11Раздел2
	                                                |ГДЕ
	                                                |	РегистрСведенийАлкоПрил11Раздел2.ИДДокИндСтраницы = &ИДДокИндСтраницы
													|	И РегистрСведенийАлкоПрил11Раздел2.ХешИдКодПродПроизв = &ХешИдКодПродПроизв
	                                                |	И РегистрСведенийАлкоПрил11Раздел2.ХешИдЛицензии = &ХешИдЛицензии
													|	И РегистрСведенийАлкоПрил11Раздел2.Активно = ИСТИНА";
	
	ЗапросРаздел2 = Новый Запрос;
		
	КолСтрокПоРазделу2 = ДанныеОП_Раздел1[ИдОП].КолСтрокПоРазделу2;
	
	ЗапросПоРазделу2НеВыполнен = Истина;
	Если (ВсегоСтрокПоРазделу1 + КолСтрокПоРазделу2 <= 60000) или (КолСтрокПоРазделу2 <= 30000) Тогда
	
		// Есть смысл сразу рассчитать.
		ЗапросРаздел2.Текст = ТекстЗапросаРаздел2;
		ЗапросРаздел2.Параметры.Вставить("ИДДокИндСтраницы", 	ИДДокИндСтраницыРаздел2);
	    
		ТаблицаЗапроса = ЗапросРаздел2.Выполнить().Выгрузить();
		// Очищаем.
		ЗапросРаздел2 = Новый Запрос;
		// Выставляем признак.
		ЗапросПоРазделу2НеВыполнен = Ложь;
	
	КонецЕсли; 
		
	ОбразецУзлаОборот = ПолучитьПодчиненныйЭлемент(НовыйУзелОбъемОборота, "Оборот");
	
	ДанныеДвиженийПоОП = ДанныеДвижений[ИдОП];
	
	НомерППКодаВидаПродукции = 0;
	
	Для Каждого ЭлементДвиженияПоОП Из ДанныеДвиженийПоОП Цикл
	
		КодВидаПродукцииКлюч = ЭлементДвиженияПоОП.Ключ;
		КодВидаПродукции = Сред(КодВидаПродукцииКлюч, 2);
		
	    НовыйУзелОборот = НовыйУзелИзПрототипа(ОбразецУзлаОборот);
		
		НомерППКодаВидаПродукции = НомерППКодаВидаПродукции + 1;
		
		УстановитьЗначениеЭлемента(НовыйУзелОборот, "ПN", НомерППКодаВидаПродукции);
		УстановитьЗначениеЭлемента(НовыйУзелОборот, "П000000000003", КодВидаПродукции);
		
		ОбразецУзлаСведПроизвИмпорт = ПолучитьПодчиненныйЭлемент(НовыйУзелОборот, "СведПроизвИмпорт");
		
		КоличествоСтрокРаздел2ПоКоду = ЭлементДвиженияПоОП.Значение.КоличествоСтрокРаздел2ПоКоду;
		
		ЗапросПоКодуНеВыполнен = Истина;
		
		Если ЗапросПоРазделу2НеВыполнен 
			и ((ВсегоСтрокПоРазделу1 + КоличествоСтрокРаздел2ПоКоду <= 60000) или (КоличествоСтрокРаздел2ПоКоду <= 30000)) Тогда
			
		    // Есть смысл сразу рассчитать.
			ЗапросРаздел2.Текст = ТекстЗапросаРаздел2_КодПрод;
			ЗапросРаздел2.Параметры.Вставить("ИДДокИндСтраницы", 	ИДДокИндСтраницыРаздел2);
		    ЗапросРаздел2.Параметры.Вставить("КодПродукции", 		КодВидаПродукции);
			ТаблицаЗапроса = ЗапросРаздел2.Выполнить().Выгрузить();
			// Очищаем.
			ЗапросРаздел2 = Новый Запрос;
			// Выставляем признак.
			ЗапросПоКодуНеВыполнен = Ложь;
			
		КонецЕсли; 
		
		ДанныеДвижений_ПоОП_ПоКоду = ЭлементДвиженияПоОП.Значение.КодПродПроизв;
		
		НомерППСведенийОПроизводителеИмпортере = 0;
		
		Для Каждого Элемент_ДанныеДвижений_ПоОП_ПоКоду Из ДанныеДвижений_ПоОП_ПоКоду Цикл
			
			ИдКодПродПроизв		= Элемент_ДанныеДвижений_ПоОП_ПоКоду.Ключ;
			ХешИдКодПродПроизв 	= Сред(ИдКодПродПроизв, 2);
			
			СтрокаСведенийОПроизводителеИмпортере 	= Элемент_ДанныеДвижений_ПоОП_ПоКоду.Значение;
			
			КоличествоСтрокРаздел2ПоКодПродПроизв = СтрокаСведенийОПроизводителеИмпортере.КоличествоСтрокРаздел2ПоКодПродПроизв;
			
			ЗапросПоКодуПроизводителюНеВыполнен = Истина;
			Если ЗапросПоРазделу2НеВыполнен и ЗапросПоКодуНеВыполнен
				и ((ВсегоСтрокПоРазделу1 + КоличествоСтрокРаздел2ПоКодПродПроизв <= 60000) 
					или (КоличествоСтрокРаздел2ПоКодПродПроизв <= 30000)) Тогда
			     				    
				ЗапросРаздел2.Текст = ТекстЗапросаРаздел2_КодПрод_Произв;
				ЗапросРаздел2.Параметры.Вставить("ИДДокИндСтраницы", 	ИДДокИндСтраницыРаздел2);
			    ЗапросРаздел2.Параметры.Вставить("ХешИдКодПродПроизв", 	ХешИдКодПродПроизв);
				ТаблицаЗапроса = ЗапросРаздел2.Выполнить().Выгрузить();
				// Очищаем.
				ЗапросРаздел2 = Новый Запрос;
				// Выставляем признак.
				ЗапросПоКодуПроизводителюНеВыполнен = Ложь;
				
			КонецЕсли;
			
			НовыйУзелСведПроизвИмпорт = НовыйУзелИзПрототипа(ОбразецУзлаСведПроизвИмпорт);
			
			НомерППСведенийОПроизводителеИмпортере = НомерППСведенийОПроизводителеИмпортере + 1;
			
			ИдПроизвИмп = СтрокаСведенийОПроизводителеИмпортере.ИдПроизвИмп;
			
			УстановитьЗначениеЭлемента(НовыйУзелСведПроизвИмпорт, "ПN", НомерППСведенийОПроизводителеИмпортере);
			УстановитьЗначениеЭлемента(НовыйУзелСведПроизвИмпорт, "ИдПроизвИмп", ИдПроизвИмп);
			
			// Сведения о поставщиках.
			ОбразецУзлаПоставщик = ПолучитьПодчиненныйЭлемент(НовыйУзелСведПроизвИмпорт, "Поставщик");
			
			Поставщики = СтрокаСведенийОПроизводителеИмпортере.Поставщики;
			НомерПППоставщика = 0;
			
			Для Каждого ЭлементПоставщика Из Поставщики Цикл
			
				НовыйУзелПоставщик = НовыйУзелИзПрототипа(ОбразецУзлаПоставщик);
				
				НомерПППоставщика = НомерПППоставщика + 1;
				
				СтруктураПоставщика = ЭлементПоставщика.Значение;
								
				ИдПоставщика			= СтруктураПоставщика.ИдПоставщика;
								
				ХешИдЛицензии 	= СтруктураПоставщика.ХешИдЛицензии;
				ИдЛицензии		= СтруктураПоставщика.ИдЛицензии;
				
				УстановитьЗначениеЭлемента(НовыйУзелПоставщик, "ПN", НомерПППоставщика);
				УстановитьЗначениеЭлемента(НовыйУзелПоставщик, "ИдПоставщика", ИдПоставщика);
				УстановитьЗначениеЭлемента(НовыйУзелПоставщик, "ИдЛицензии", ИдЛицензии);
				
				// Сведения о поставках продукции.
				ОбразецУзлаПродукция = ПолучитьПодчиненныйЭлемент(НовыйУзелПоставщик, "Продукция");
				
				Если ЗапросПоРазделу2НеВыполнен и ЗапросПоКодуНеВыполнен и ЗапросПоКодуПроизводителюНеВыполнен Тогда
				
					// Выполняем запрос	по поставщику - лицензии				.
					ЗапросРаздел2.Текст = ТекстЗапросаРаздел2_КодПрод_Произв_ИдЛицензии;
					ЗапросРаздел2.Параметры.Вставить("ИДДокИндСтраницы", 	ИДДокИндСтраницыРаздел2);
				    ЗапросРаздел2.Параметры.Вставить("ХешИдКодПродПроизв", 	ХешИдКодПродПроизв);
					ЗапросРаздел2.Параметры.Вставить("ХешИдЛицензии", 		ХешИдЛицензии);
					ТаблицаЗапроса = ЗапросРаздел2.Выполнить().Выгрузить();
					НайденныеСтроки = ТаблицаЗапроса;
					// Очищаем.
					ЗапросРаздел2 = Новый Запрос;
					
				ИначеЕсли НЕ ЗапросПоКодуПроизводителюНеВыполнен Тогда
					
					// отбираем строки по ИдЛицензии - она связана с поставщиком, поэтому
					// отберется только один Поставщик
					УсловияОтбора = Новый Структура;
					УсловияОтбора.Вставить("ХешИдЛицензии", ХешИдЛицензии);
					НайденныеСтроки = ТаблицаЗапроса.НайтиСтроки(УсловияОтбора);
					
				Иначе
					
					// Был запрос по Разделу2 по данному ОП или запрос по коду продукции из Раздела2 по данному ОП
					// отбор для этих запросов одинаковый, поскольку ХешИдКодПродПроизв включает пару Код-Производитель
					// и отдельно отбирать по коду не надо.
					// Отбираем строки связанному ИдКодПродПроизводителя и ИдЛицензии.
				    УсловияОтбора = Новый Структура;
					УсловияОтбора.Вставить("ХешИдКодПродПроизв", 	ХешИдКодПродПроизв);
					УсловияОтбора.Вставить("ХешИдЛицензии", 		ХешИдЛицензии);
					НайденныеСтроки = ТаблицаЗапроса.НайтиСтроки(УсловияОтбора);
									
				КонецЕсли; 
				
				Для Каждого СтрокаПродукции Из НайденныеСтроки Цикл
				
					НовыйУзелПродукция = НовыйУзелИзПрототипа(ОбразецУзлаПродукция);
					
					УстановитьЗначениеЭлемента(НовыйУзелПродукция, "П200000000013", СтрокаПродукции.П000020000313);
					УстановитьЗначениеЭлемента(НовыйУзелПродукция, "П200000000014", СтрокаПродукции.П000020000314);
					УстановитьЗначениеЭлемента(НовыйУзелПродукция, "П200000000015", СтрокаПродукции.П000020000315);
					УстановитьЗначениеЭлемента(НовыйУзелПродукция, "П200000000016", СтрокаПродукции.П000020000316);
					// Удалим отработанные.
					ТаблицаЗапроса.Удалить(СтрокаПродукции);
					
					ОбработаноСтрок = ОбработаноСтрок + 1;
					
				КонецЦикла; 
			 					
				НайденныеСтроки = Неопределено;				
				РегламентированнаяОтчетность.УдалитьУзел(ОбразецУзлаПродукция);
				
				Поставщики.Удалить(ЭлементПоставщика.Ключ);
			
			КонецЦикла;
			
			РегламентированнаяОтчетность.УдалитьУзел(ОбразецУзлаПоставщик);
			СтрокаСведенийОПроизводителеИмпортере.Удалить("Поставщики");
			
			// Сведения о движениях.
			ОбразецУзлаДвижение = ПолучитьПодчиненныйЭлемент(НовыйУзелСведПроизвИмпорт, "Движение");
			
			// Движение по связке Код продукции - производитель/импортер может быть только одно.
			НомерППДвижения = 1;
			НовыйУзелДвижение = НовыйУзелИзПрототипа(ОбразецУзлаДвижение);
		    УстановитьЗначениеЭлемента(НовыйУзелДвижение, "ПN", НомерППДвижения);
			
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000006", СтрокаСведенийОПроизводителеИмпортере.П100000000006);
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000007", СтрокаСведенийОПроизводителеИмпортере.П100000000007);
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000008", СтрокаСведенийОПроизводителеИмпортере.П100000000008);
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000009", СтрокаСведенийОПроизводителеИмпортере.П100000000009);
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000010", СтрокаСведенийОПроизводителеИмпортере.П100000000010);
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000011", СтрокаСведенийОПроизводителеИмпортере.П100000000011);
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000012", СтрокаСведенийОПроизводителеИмпортере.П100000000012);
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000013", СтрокаСведенийОПроизводителеИмпортере.П100000000013);
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000014", СтрокаСведенийОПроизводителеИмпортере.П100000000014);
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000015", СтрокаСведенийОПроизводителеИмпортере.П100000000015);
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000016", СтрокаСведенийОПроизводителеИмпортере.П100000000016);
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000017", СтрокаСведенийОПроизводителеИмпортере.П100000000017);
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000018", СтрокаСведенийОПроизводителеИмпортере.П100000000018);
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000019", СтрокаСведенийОПроизводителеИмпортере.П100000000019);
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000020", СтрокаСведенийОПроизводителеИмпортере.П100000000020);
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000021", СтрокаСведенийОПроизводителеИмпортере.П100000000021);
			
			ОбработаноСтрок = ОбработаноСтрок + 1;
			
			РегламентированнаяОтчетность.УдалитьУзел(ОбразецУзлаДвижение);
			
			ДанныеДвижений_ПоОП_ПоКоду.Удалить(ИдКодПродПроизв);
			
		КонецЦикла;
				
		РегламентированнаяОтчетность.УдалитьУзел(ОбразецУзлаСведПроизвИмпорт);
		ДанныеДвиженийПоОП.Удалить(КодВидаПродукцииКлюч);
		
		// Информируем о ходе выполнения.
		Если НужноОбработатьСтрок > 0 Тогда
			
			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", ОбработаноСтрок, 
										НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных);
			
		КонецЕсли;
	
	КонецЦикла; 
	
	РегламентированнаяОтчетность.УдалитьУзел(ОбразецУзлаОборот);
		
КонецПроцедуры

Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель, КорневойУзел, ПараметрыВыгрузки)
		
	УзелСправочники = ПолучитьПодчиненныйЭлемент(КорневойУзел, "Справочники");
	Узел_Документ = УзелРодитель;
	
	Узел_Организация = ПолучитьПодчиненныйЭлемент(Узел_Документ, "Организация");
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '20131101' Тогда
		// Формат Выгрузки 4.20.
		Узел_Лицензии = ПолучитьПодчиненныйЭлемент(Узел_Организация, "Лицензии");
		
		ПрототипУзла_Лицензия = ПолучитьПодчиненныйЭлемент(Узел_Лицензии, "Лицензия");
		Для Каждого Страница Из ТаблицаСтраницыЛицензии Цикл
			ДанныеСтраницы = Страница.Данные[0].Значение;
			ДополнительныеДанныеСтраницы = Страница.ДополнительныеДанные[0].Значение;
			Узел_Лицензия = НовыйУзелИзПрототипа(ПрототипУзла_Лицензия);
			УстановитьЗначениеЭлемента(Узел_Лицензия, "ВидДеят", 	 ЗначениеПоКлючуСтруктуры("П000000000105", ДополнительныеДанныеСтраницы));
			УстановитьЗначениеЭлемента(Узел_Лицензия, "СерЛиц",      ДанныеСтраницы.П000000000101);
			УстановитьЗначениеЭлемента(Узел_Лицензия, "НомерЛиц",    ДанныеСтраницы.П000000000102);
			УстановитьЗначениеЭлемента(Узел_Лицензия, "ДатаНачЛиц",  ?(ЗначениеЗаполнено(ДанныеСтраницы.П000000000103), ДанныеСтраницы.П000000000103, ""));
			УстановитьЗначениеЭлемента(Узел_Лицензия, "ДатаОконЛиц", ?(ЗначениеЗаполнено(ДанныеСтраницы.П000000000104), ДанныеСтраницы.П000000000104, ""));
		КонецЦикла;
		РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_Лицензия);
	Иначе
		// Формат Выгрузки 4.30
		Узел_Деятельность = ПолучитьПодчиненныйЭлемент(Узел_Организация, "Деятельность");
		Узел_Лицензируемая = ПолучитьПодчиненныйЭлемент(Узел_Деятельность, "Лицензируемая");
		Узел_Нелицензируемая = ПолучитьПодчиненныйЭлемент(Узел_Деятельность, "Нелицензируемая");
		
		ДанныеОтчетаЛицензии = ТаблицаСтраницыЛицензии;
		ДопДанные = ДанныеОтчетаЛицензии[0].ДополнительныеДанные[0].Значение;
		Если ЛицензируемаяДеятельность() Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел_Нелицензируемая);
			ПрототипУзла_Лицензия = ПолучитьПодчиненныйЭлемент(Узел_Лицензируемая, "Лицензия");
			Для Каждого Страница Из ДанныеОтчетаЛицензии Цикл
				ДанныеСтраницы = Страница.Данные[0].Значение;
				Если Не УказанаЛицензия(ДанныеСтраницы) Тогда
					Продолжить;
				КонецЕсли;
				ДополнительныеДанныеСтраницы = Страница.ДополнительныеДанные[0].Значение;
				Узел_Лицензия = НовыйУзелИзПрототипа(ПрототипУзла_Лицензия);
				УстановитьЗначениеЭлемента(Узел_Лицензия, "ВидДеят", 	 ЗначениеПоКлючуСтруктуры("П000000000105", ДополнительныеДанныеСтраницы));
				УстановитьЗначениеЭлемента(Узел_Лицензия, "СерНомЛиц", 	 ДанныеСтраницы.П000000000101 + " " + ДанныеСтраницы.П000000000102);
				УстановитьЗначениеЭлемента(Узел_Лицензия, "ДатаНачЛиц",  ?(ЗначениеЗаполнено(ДанныеСтраницы.П000000000103), ДанныеСтраницы.П000000000103, ""));
				УстановитьЗначениеЭлемента(Узел_Лицензия, "ДатаОконЛиц", ?(ЗначениеЗаполнено(ДанныеСтраницы.П000000000104), ДанныеСтраницы.П000000000104, ""));
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_Лицензия);
		Иначе
			РегламентированнаяОтчетность.УдалитьУзел(Узел_Лицензируемая);
			УстановитьЗначениеЭлемента(Узел_Нелицензируемая, "ВидДеят", ЗначениеПоКлючуСтруктуры("П000000000105", ДопДанные));
		КонецЕсли;
	КонецЕсли;
			
	ПрототипУзла_ОбъемОборота = ПолучитьПодчиненныйЭлемент(Узел_Документ, "ОбъемОборота");
			
	Для Каждого ЭлементОП Из ДанныеОП_Раздел1 Цикл
	
		ИдОП		= ЭлементОП.Ключ;
		СтруктураОП = ЭлементОП.Значение;
		
		СведенияОбОП = СтруктураОП.ОП;
		
		ИндексСтраницыРегистраРаздел1 = СтруктураОП.ИндексСтраницыРегистраРаздел1;
				
		ИДДокИндСтраницыРаздел2 = СтрЗначениеПоКлючуСтруктуры("ИДДокИндСтраницыРаздел2", СтруктураОП);
		
		// Заполняем сведения по ОП.
		НазваниеОрганизации = СведенияОбОП.Наименование;
		КПП = СведенияОбОП.КПП;
		
		Если ПустаяСтрока(НазваниеОрганизации) И ПустаяСтрока(КПП) Тогда
			Продолжить;
		КонецЕсли;
		
		Узел_ОбъемОборота = НовыйУзелИзПрототипа(ПрототипУзла_ОбъемОборота);
		
		Если СтруктураРеквизитовФормы.мВерсияФормата = "431" Тогда		
			// формат 4.31.
			УстановитьЗначениеЭлемента(Узел_ОбъемОборота, "Наим", НазваниеОрганизации);			
		Иначе			
			// формат 4.30.
			УстановитьЗначениеЭлемента(Узел_ОбъемОборота, "НаимЮЛ", НазваниеОрганизации);		
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(КПП) Тогда
		    УстановитьЗначениеЭлемента(Узел_ОбъемОборота, "КППЮЛ", КПП);		
		КонецЕсли;		
				
		Узел_АдрОрг = ПолучитьПодчиненныйЭлемент(Узел_ОбъемОборота, "АдрОрг");
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "КодСтраны",  "643");
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Индекс",     СведенияОбОП.Индекс);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "КодРегион",  СведенияОбОП.КодРегиона);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Район",      СведенияОбОП.Район);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Город",      СведенияОбОП.Город);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "НаселПункт", СведенияОбОП.НаселенныйПункт);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Улица",      СведенияОбОП.Улица);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Дом",        СведенияОбОП.Дом);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Корпус",     СведенияОбОП.Корпус);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Литера",     СведенияОбОП.Литера);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Кварт",      СведенияОбОП.Квартира);
		
	    ЗаполнитьСведенияДекларации(Узел_ОбъемОборота, ИдОП, ИДДокИндСтраницыРаздел2);
		
		Узел_Оборот = ПолучитьПодчиненныйЭлемент(Узел_ОбъемОборота, "Оборот");
		ЕстьОборот = (Узел_Оборот <> Неопределено);
		УстановитьЗначениеЭлемента(Узел_ОбъемОборота, "НаличиеОборота", ?(ЕстьОборот, "true", "false"));
		
	КонецЦикла;
	
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_ОбъемОборота);
	
	ЗаполнитьСправочникиДекларации(УзелСправочники); 
	
	КолСтрокЗаполнено = ОбработаноСтрок - КолСтрокПриПроверкеЗаполнения;
	
	Если КолСтрокЗаполнено <> КолСтрокПриПроверкеЗаполнения Тогда
		
	    // Выгружено не то количество, что есть по данным заполнения отчета.
		ТекстОписанияОшибки = "В выгрузку попало меньшее количество строк, чем заполнено по разделам Раздел 1 и Раздел 2!
							|Немедленно свяжитесь с техподдержкой, желательно выслать выгрузку 
							|Вашей информационной базы в виде файла .dt";
				
		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
		СтруктураОшибки.Вставить("Раздел", "Титульный");
		СтруктураОшибки.Вставить("Показатель", Неопределено);
		СтруктураОшибки.Вставить("ЛистРаздела", Неопределено);
		СтруктураОшибки.Вставить("ТипОшибки", "НеВсяИнформацияПопалаВВыгрузку");
		
		СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
								
	КонецЕсли; 
		
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если ПараметрыВыгрузки.Свойство("ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
				ЗаполнитьСодержательнуюЧасть(Стр, Узел, ПараметрыВыгрузки);
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) И ПараметрыВыгрузки.Свойство(Стр.Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Стр.Ключ]);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если ПараметрыВыгрузки.Свойство(Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Ключ]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанными()
	
	Если НужноОбработатьСтрок > 0 Тогда
	 	
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", ОбработаноСтрок, 
										НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных);
		
	КонецЕсли; 
	
		
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки); // заполняем дерево данными
	
	Если НужноОбработатьСтрок > 0 Тогда
	 
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", ОбработаноСтрок, 
										НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных);
	
	КонецЕсли;
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
	Если НужноОбработатьСтрок > 0 Тогда
	    		
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", ПроцентБезЗавершающейПроверкиДанных, 100);
	
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьВыгрузку(ПараметрыДокумента, ЭтоВыгрузка = Ложь) Экспорт
	
	ВерсияБСПЧислом = РегламентированнаяОтчетностьАлко.ПолучитьВерсиюБСПЧислом();
	
	ДокументСсылкаАлкоОтчет		= ПараметрыДокумента.ДокументСсылка;

	ИмяФормыОбъекта				= ПараметрыДокумента.ИмяФормыОбъекта;
	ВспомогательныйАдрес		= ПараметрыДокумента.ВспомогательныйАдрес;
	ПараметрыФормы				= ПараметрыДокумента.ПараметрыФормы;
	ПараметрыВыгрузки			= ПараметрыДокумента.ПараметрыВыгрузки;	
		
	
	// Таблица результата.
	ТаблицаСообщений = РегламентированнаяОтчетностьАлко.СоздатьТаблицуСообщенийОбОшибках();
	ТаблицаСообщенийДляСведения = РегламентированнаяОтчетностьАлко.СоздатьТаблицуСообщенийОбОшибках();
	
	ТаблицаСтраницыЛицензии = ПараметрыФормы.ТаблицаСтраницыЛицензии;
	ТаблицаСтраницыРаздел1  = ПараметрыФормы.ТаблицаСтраницыРаздел1;
	ТаблицаСтраницыРаздел2  = ПараметрыФормы.ТаблицаСтраницыРаздел2;
	
	ТабП0000000002 = ПараметрыФормы.ТабП0000000002;
	ТабП0000100003 = ПараметрыФормы.ТабП0000100003;
	ТабП0000200003 = ПараметрыФормы.ТабП0000200003;
	
	СтруктураРеквизитовФормы = ПараметрыФормы.СтруктураРеквизитовФормы;
	СтруктураСервисРегистров = ПараметрыФормы.СтруктураСервисРегистров;
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML(ИмяФормыОбъекта);
	
	ВсегоСтрокПоРазделу1 = ПолучитьКоличествоСтрокПоГруппе(СтруктураРеквизитовФормы.мИдГруппы12, Истина);
	ВсегоСтрокПоРазделу2 = ПолучитьКоличествоСтрокПоГруппе(СтруктураРеквизитовФормы.мИдГруппы22, Истина);
	
	// Один проход при проверке заполнения,
	// второй - при заполнении выгрузки - все вместе 90%
	// на завершающую проверку данных отводим 10%.
	НужноОбработатьСтрок = 2*(ВсегоСтрокПоРазделу1 + ВсегоСтрокПоРазделу2);
	// При выгрузке проверка заполнения строк и заполнение дерева выгрузки составляет примерно 84%.
	// При проверке выгрузки - примерно 90% от общего времени выполнения.
	ПроцентБезЗавершающейПроверкиДанных = ?(ЭтоВыгрузка, 84, 90);
	ОбработаноСтрок = 0;
	ШагИнформирования = 3000;
	НетОшибокПроверки = Истина;
	
	Если НЕ ОтчетЗаполненКорректно() Тогда
		
		Результат = Новый Структура;
		Результат.Вставить("ТаблицаСообщений", ТаблицаСообщений);
		Результат.Вставить("ТаблицаСообщенийДляСведения", ТаблицаСообщенийДляСведения);
		Возврат Результат;
		
	КонецЕсли;

	// Информируем о ходе выполнения.
	Если НужноОбработатьСтрок > 0 Тогда
		
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", ОбработаноСтрок, 
										НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных);
		
	КонецЕсли;
	
	ЗаполнитьДанными();
	
	Если ТаблицаСообщений.Количество() > 0 Тогда
	    
		Результат = Новый Структура;
		Результат.Вставить("ТаблицаСообщений", ТаблицаСообщений);
		Результат.Вставить("ТаблицаСообщенийДляСведения", ТаблицаСообщенийДляСведения);
		Возврат Результат;
			
	КонецЕсли; 
	
	// Информируем о ходе выполнения.				
	Если НужноОбработатьСтрок > 0 Тогда
		
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка данных по схеме выгрузки.", ПроцентБезЗавершающейПроверкиДанных, 
										100);
										
	КонецЕсли;
		
	
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		// Информируем о ходе выполнения.
		Если НужноОбработатьСтрок > 0 Тогда
			
			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("", 100, 100);										 
			
		КонецЕсли;
				
		Результат = Новый Структура;
		Результат.Вставить("ТаблицаСообщений", ТаблицаСообщений);
		Результат.Вставить("ТаблицаСообщенийДляСведения", ТаблицаСообщенийДляСведения);
		Возврат Результат;
		
	КонецЕсли;
	
	// Информируем о ходе выполнения.				
	Если НужноОбработатьСтрок > 0 Тогда
				
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(?(ЭтоВыгрузка, "Запись выгрузки в XML.", ""), ?(ЭтоВыгрузка, 93, 100), 100);
		
	КонецЕсли;
		
	Результат = Новый Структура;
	Результат.Вставить("ТаблицаСообщений", ТаблицаСообщений);
	Результат.Вставить("ТаблицаСообщенийДляСведения", ТаблицаСообщенийДляСведения);
	Возврат Результат;
	
КонецФункции

Функция СформироватьПредставлениеОшибок(ТаблСообщений, ИмяФормыОбъекта, ТолькоДляСведения = Ложь) Экспорт
		
	МакетОформления = ПолучитьМакетИзОбъекта(ИмяФормыОбъекта, "ШаблоныСообщенийОбОшибках2014Кв1");
	
	НаименованиеДекларации = ПолучитьНазваниеОтчетаАЛКО(ИмяФормыОбъекта);
	
	Секция_ВерхнийОтступ   = МакетОформления.ПолучитьОбласть("ВерхнийОтступ");
	Секция_ЗаголовокОтчета = МакетОформления.ПолучитьОбласть("ЗаголовокОтчета");
	Секция_РазрывСекций    = МакетОформления.ПолучитьОбласть("РазрывСекций");
	Секция_ОтступПередОшибками = МакетОформления.ПолучитьОбласть("ОтступПередОшибками");
	
	ПредставлениеОшибок = Новый ТабличныйДокумент;
	ПредставлениеОшибок.Вывести(Секция_ВерхнийОтступ);
	
	Секция_ЗаголовокОтчета.Параметры.НаименованиеДекларации = НаименованиеДекларации;
	ПредставлениеОшибок.Вывести(Секция_ЗаголовокОтчета);
	ПредставлениеОшибок.Вывести(Секция_РазрывСекций);
		
	КоличествоОшибок = ТаблСообщений.Количество();
	
	Если КоличествоОшибок = 0 Тогда
		
		Секция_БезОшибок = МакетОформления.ПолучитьОбласть("БезОшибок");
		ПредставлениеОшибок.Вывести(Секция_БезОшибок);
		
	Иначе
		
		// Если есть ошибки разработки - их в первую очередь.
		
		ТипОшибки = "НеВсяИнформацияПопалаВВыгрузку";
		ОшибкиРазработки = ТаблСообщений.НайтиСтроки(Новый Структура("ТипОшибки", ТипОшибки));
		Если ОшибкиРазработки.Количество() > 0 Тогда
			
		    // Такая ошибка может быть только одна.
			Секция_ЗаголовокОшибки = МакетОформления.ПолучитьОбласть("Заголовок" + ТипОшибки);
			ПредставлениеОшибок.Вывести(Секция_ЗаголовокОшибки);
			// Ничего не сворачиваем, выдаем сразу.
			Секция_ИсправлениеОшибки = МакетОформления.ПолучитьОбласть("Исправление" + ТипОшибки);
		    ПредставлениеОшибок.Вывести(Секция_ИсправлениеОшибки);
			
			ПредставлениеОшибок.Вывести(Секция_РазрывСекций);
			
			ТаблСообщений.Удалить(ОшибкиРазработки[0]);
			
		КонецЕсли; 
		
		ТипОшибки = "НеУдалосьВычислить";
		ОшибкиРазработки = ТаблСообщений.НайтиСтроки(Новый Структура("ТипОшибки", ТипОшибки));
		Если ОшибкиРазработки.Количество() > 0 Тогда
					    
			Секция_ЗаголовокОшибки = МакетОформления.ПолучитьОбласть("Заголовок" + ТипОшибки);
			ПредставлениеОшибок.Вывести(Секция_ЗаголовокОшибки);
						
			Секция_ИсправлениеОшибки = МакетОформления.ПолучитьОбласть("Исправление" + ТипОшибки);
		    ПредставлениеОшибок.Вывести(Секция_ИсправлениеОшибки);
			
			ПредставлениеОшибок.НачатьГруппуСтрок();			
			ПредставлениеОшибок.Вывести(Секция_ОтступПередОшибками);
			
			Секция_СтандартнаяОшибка = МакетОформления.ПолучитьОбласть("СтандартнаяОшибка");
			
			Для каждого Ошибка Из ОшибкиРазработки Цикл
			
				ПозицияПерехода = Новый Структура;
				ПозицияПерехода.Вставить("Раздел", Ошибка.Раздел);
				ПозицияПерехода.Вставить("Показатель", Ошибка.ИмяЯчейки);
				ПозицияПерехода.Вставить("Страница", Ошибка.Страница);
				
				Секция_СтандартнаяОшибка.Параметры.ПредставлениеОшибки = Ошибка.Описание;
				Секция_СтандартнаяОшибка.Параметры.ПозицияПерехода     = ПозицияПерехода;
				ПредставлениеОшибок.Вывести(Секция_СтандартнаяОшибка);
				
				ТаблСообщений.Удалить(Ошибка);
				
			КонецЦикла; 
			
			ПредставлениеОшибок.ЗакончитьГруппуСтрок();
			ПредставлениеОшибок.Вывести(Секция_РазрывСекций);
		
		КонецЕсли;
		
		ТипОшибки = "ОшибкаФорматаXML";
		ОшибкиРазработки = ТаблСообщений.НайтиСтроки(Новый Структура("ТипОшибки", ТипОшибки));
		Если ОшибкиРазработки.Количество() > 0 Тогда
					    
			Секция_ЗаголовокОшибки = МакетОформления.ПолучитьОбласть("Заголовок" + ТипОшибки);
			ПредставлениеОшибок.Вывести(Секция_ЗаголовокОшибки);
						
			Секция_ИсправлениеОшибки = МакетОформления.ПолучитьОбласть("Исправление" + ТипОшибки);
		    ПредставлениеОшибок.Вывести(Секция_ИсправлениеОшибки);
			
			ПредставлениеОшибок.НачатьГруппуСтрок();			
			ПредставлениеОшибок.Вывести(Секция_ОтступПередОшибками);
			
			Секция_СтандартнаяОшибка = МакетОформления.ПолучитьОбласть("СтандартнаяОшибка");
			
			Для каждого Ошибка Из ОшибкиРазработки Цикл
			
				ПозицияПерехода = Новый Структура;
				ПозицияПерехода.Вставить("Раздел", Ошибка.Раздел);
				ПозицияПерехода.Вставить("Показатель", Ошибка.ИмяЯчейки);
				ПозицияПерехода.Вставить("Страница", Ошибка.Страница);
				
				Секция_СтандартнаяОшибка.Параметры.ПредставлениеОшибки = Ошибка.Описание;
				Секция_СтандартнаяОшибка.Параметры.ПозицияПерехода     = ПозицияПерехода;
				ПредставлениеОшибок.Вывести(Секция_СтандартнаяОшибка);
				
				ТаблСообщений.Удалить(Ошибка);
				
			КонецЦикла; 
			
			ПредставлениеОшибок.ЗакончитьГруппуСтрок();
			ПредставлениеОшибок.Вывести(Секция_РазрывСекций);
		
		КонецЕсли;
		
		// Отдельно - слишком много ошибок.
		ТипОшибки = "МногоОшибок";
		ОшибкиРазработки = ТаблСообщений.НайтиСтроки(Новый Структура("ТипОшибки", ТипОшибки));
		Если ОшибкиРазработки.Количество() > 0 Тогда
			
		    // Такая ошибка может быть только одна.
			Секция_ЗаголовокОшибки = МакетОформления.ПолучитьОбласть("Заголовок" + ТипОшибки);
			ПредставлениеОшибок.Вывести(Секция_ЗаголовокОшибки);
			// Ничего не сворачиваем, выдаем сразу.
			Секция_ИсправлениеОшибки = МакетОформления.ПолучитьОбласть("Исправление" + ТипОшибки);
		    ПредставлениеОшибок.Вывести(Секция_ИсправлениеОшибки);
			
			ПредставлениеОшибок.Вывести(Секция_РазрывСекций);
			
			ТаблСообщений.Удалить(ОшибкиРазработки[0]);
			
		КонецЕсли;
		
		// Ошибки заполнения Титульного листа.
		РазделОшибок = "Титульный";
		ОшибкиТитульного = ТаблСообщений.НайтиСтроки(Новый Структура("Раздел", РазделОшибок));
		ОшибкиТитульного = ТаблСообщений.Скопировать(ОшибкиТитульного);
		
		Если ОшибкиТитульного.Количество() > 0 Тогда
		
			// Выводим общий заголовок.
			Если НЕ ТолькоДляСведения Тогда
			
				Секция_ЗаголовокОшибкиТитульногоЛиста = МакетОформления.ПолучитьОбласть("ЗаголовокОшибкиТитульногоЛиста");
				ПредставлениеОшибок.Вывести(Секция_ЗаголовокОшибкиТитульногоЛиста);
				
				ПредставлениеОшибок.НачатьГруппуСтрок();			
				ПредставлениеОшибок.Вывести(Секция_ОтступПередОшибками);
				
				Секция_ИсправлениеОшибкиТитульногоЛиста = МакетОформления.ПолучитьОбласть("ИсправлениеОшибкиТитульногоЛиста");
			    ПредставлениеОшибок.Вывести(Секция_ИсправлениеОшибкиТитульногоЛиста);	
			
			КонецЕсли; 
						
			ВывестиОшибки(ОшибкиТитульного, МакетОформления, ПредставлениеОшибок);
			
			Если НЕ ТолькоДляСведения Тогда
				ПредставлениеОшибок.ЗакончитьГруппуСтрок();
			КонецЕсли;
			
			ПредставлениеОшибок.Вывести(Секция_РазрывСекций);
			
		КонецЕсли; 
		
		// Ошибки заполнения Лицензии.
		РазделОшибок = "Лицензии";
		ОшибкиЛицензии = ТаблСообщений.НайтиСтроки(Новый Структура("Раздел", РазделОшибок));
		ОшибкиЛицензии = ТаблСообщений.Скопировать(ОшибкиЛицензии);
		
		Если ОшибкиЛицензии.Количество() > 0 Тогда
		
			// Выводим общий заголовок.
			Если НЕ ТолькоДляСведения Тогда
				
				Секция_ЗаголовокОшибкиЛицензии = МакетОформления.ПолучитьОбласть("ЗаголовокОшибкиЛицензии");
				ПредставлениеОшибок.Вывести(Секция_ЗаголовокОшибкиЛицензии);
				
				ПредставлениеОшибок.НачатьГруппуСтрок();			
				ПредставлениеОшибок.Вывести(Секция_ОтступПередОшибками);
				
				Секция_ИсправлениеОшибкиЛицензии = МакетОформления.ПолучитьОбласть("ИсправлениеОшибкиЛицензии");
			    ПредставлениеОшибок.Вывести(Секция_ИсправлениеОшибкиЛицензии);
			КонецЕсли;
			
			ВывестиОшибки(ОшибкиЛицензии, МакетОформления, ПредставлениеОшибок);
			
			Если НЕ ТолькоДляСведения Тогда
				ПредставлениеОшибок.ЗакончитьГруппуСтрок();
			КонецЕсли;
			
			ПредставлениеОшибок.Вывести(Секция_РазрывСекций);
			
		КонецЕсли;
		
		// Ошибки заполнения Раздел 1.
		РазделОшибок = "Раздел1";
		ОшибкиРаздела = ТаблСообщений.НайтиСтроки(Новый Структура("Раздел", РазделОшибок));
		ОшибкиРаздела = ТаблСообщений.Скопировать(ОшибкиРаздела);
		
		Если ОшибкиРаздела.Количество() > 0 Тогда
		
			// Выводим общий заголовок.
			Если НЕ ТолькоДляСведения Тогда
				
				Секция_ЗаголовокОшибки = МакетОформления.ПолучитьОбласть("ЗаголовокОшибкиРаздел1");
				ПредставлениеОшибок.Вывести(Секция_ЗаголовокОшибки);
				
				ПредставлениеОшибок.НачатьГруппуСтрок();			
				ПредставлениеОшибок.Вывести(Секция_ОтступПередОшибками);
				
				Секция_ИсправлениеОшибки = МакетОформления.ПолучитьОбласть("ИсправлениеОшибкиРаздел1");
			    ПредставлениеОшибок.Вывести(Секция_ИсправлениеОшибки);
				
			КонецЕсли;
			
			ВывестиОшибки(ОшибкиРаздела, МакетОформления, ПредставлениеОшибок);
			
			Если НЕ ТолькоДляСведения Тогда
				ПредставлениеОшибок.ЗакончитьГруппуСтрок();
			КонецЕсли;
			
			ПредставлениеОшибок.Вывести(Секция_РазрывСекций);
			
		КонецЕсли;
		
		// Ошибки заполнения Раздел 2.
		РазделОшибок = "Раздел2";
		ОшибкиРаздела = ТаблСообщений.НайтиСтроки(Новый Структура("Раздел", РазделОшибок));
		ОшибкиРаздела = ТаблСообщений.Скопировать(ОшибкиРаздела);
		
		Если ОшибкиРаздела.Количество() > 0 Тогда
		
			// Выводим общий заголовок.
			Если НЕ ТолькоДляСведения Тогда
				
				Секция_ЗаголовокОшибки = МакетОформления.ПолучитьОбласть("ЗаголовокОшибкиРаздел2");
				ПредставлениеОшибок.Вывести(Секция_ЗаголовокОшибки);
				
				ПредставлениеОшибок.НачатьГруппуСтрок();			
				ПредставлениеОшибок.Вывести(Секция_ОтступПередОшибками);
				
				Секция_ИсправлениеОшибки = МакетОформления.ПолучитьОбласть("ИсправлениеОшибкиРаздел2");
			    ПредставлениеОшибок.Вывести(Секция_ИсправлениеОшибки);
				
			КонецЕсли;
			
			ВывестиОшибки(ОшибкиРаздела, МакетОформления, ПредставлениеОшибок);
			
			Если НЕ ТолькоДляСведения Тогда
				ПредставлениеОшибок.ЗакончитьГруппуСтрок();
			КонецЕсли;
			
			ПредставлениеОшибок.Вывести(Секция_РазрывСекций);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПредставлениеОшибок;
	
КонецФункции

Процедура ВывестиОшибки(ТаблОшибок, МакетОформления, ПредставлениеОшибок)

	Секция_СтандартнаяОшибка = МакетОформления.ПолучитьОбласть("СтандартнаяОшибка");
	Секция_РазрывСекций    = МакетОформления.ПолучитьОбласть("РазрывСекций");
	Секция_ОтступПередОшибками = МакетОформления.ПолучитьОбласть("ОтступПередОшибками");
	
	Пока ТаблОшибок.Количество() > 0 Цикл
	    		
		ТипОшибки = ТаблОшибок[0].ТипОшибки;
		
		ОшибкиПоТипу = ТаблОшибок.НайтиСтроки(Новый Структура("ТипОшибки", ТипОшибки));
		
		Секция_ЗаголовокОшибки = МакетОформления.ПолучитьОбласть("Заголовок" + ТипОшибки);
		ПредставлениеОшибок.Вывести(Секция_ЗаголовокОшибки);
		
		ПредставлениеОшибок.НачатьГруппуСтрок(); // описание исправления ошибки сворачивается вместе с контрагентами
		
		Секция_ИсправлениеОшибки = МакетОформления.ПолучитьОбласть("Исправление" + ТипОшибки);
		ПредставлениеОшибок.Вывести(Секция_ИсправлениеОшибки);
		
		ПредставлениеОшибок.Вывести(Секция_ОтступПередОшибками);
		
		Для каждого Ошибка Из ОшибкиПоТипу Цикл
		
			ПозицияПерехода = Новый Структура;
			ПозицияПерехода.Вставить("Раздел", Ошибка.Раздел);
			ПозицияПерехода.Вставить("Показатель", Ошибка.ИмяЯчейки);
			ПозицияПерехода.Вставить("Страница", Ошибка.Страница);
			
			Секция_СтандартнаяОшибка.Параметры.ПредставлениеОшибки = Ошибка.Описание;
			Секция_СтандартнаяОшибка.Параметры.ПозицияПерехода     = ПозицияПерехода;
			ПредставлениеОшибок.Вывести(Секция_СтандартнаяОшибка);
			
			ТаблОшибок.Удалить(Ошибка);
		
		КонецЦикла; 
		
		ПредставлениеОшибок.ЗакончитьГруппуСтрок();
		ПредставлениеОшибок.Вывести(Секция_РазрывСекций);
		
	КонецЦикла; 

КонецПроцедуры

#КонецОбласти


#Область Выгрузка

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки, ИмяФайлаXML = Неопределено)
	
	Кодировка = "windows-1251";
		
    // пишем в строку или в файл, если передано имя файла XML
	ПотокXML = РегламентированнаяОтчетностьАЛКО.СоздатьНовыйПотокXML(Кодировка, ИмяФайлаXML);
		
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	
	СтрокаИмениФайла = Символы.ПС + "<!-- ИдФайл=""" + ПараметрыВыгрузки.ИдФайл + """ -->";
	ПотокXML.ЗаписатьБезОбработки(СтрокаИмениФайла);
		
	// Получаем текст XML или закрываем файл.
	// В случае записи в файл возвращается пустая строка.
	ТекстДляЗаписи = ПотокXML.Закрыть();
	
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) 
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция ВыгрузитьОтчет(ПараметрыДокумента) Экспорт

	ЭтоВыгрузка = Истина;
	
	Результат = ПроверитьВыгрузку(ПараметрыДокумента, ЭтоВыгрузка);
	
	Если Результат.ТаблицаСообщений.Количество() > 0 Тогда
		
	    // Есть сообщения о ошибках
		Возврат Результат;
	
	КонецЕсли; 
	
	// Все хорошо, проверка прошла успешно
	// Если объеданных большой - пишем XML в файл, иначе в строку
	ИмяФайлаXML = Неопределено;
	ВсегоСтрокВОтчете = ВсегоСтрокПоРазделу1 + ВсегоСтрокПоРазделу2;
	
	// расширение по умолчанию - .tmp
	ИмяФайлаXML = ПолучитьИмяВременногоФайла();	
	
	Текст = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки, ИмяФайлаXML);
	
	// информируем о ходе выполнения				
	Если НужноОбработатьСтрок > 0 Тогда
		
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("", 100, 100);
		
	КонецЕсли;
	
	Результат.Вставить("ИмяФайлаXML", ИмяФайлаXML);
	
	Возврат Результат;
		
КонецФункции
 
#КонецОбласти 


#Область Печать

Функция ПечататьРаздел(СтрокаРаздела, ЧтоИскать = Неопределено)
	Перем КлючФизЛица;
	
	Если ЧтоИскать <> Неопределено Тогда
		Возврат 1;
	КонецЕсли;
	
	// Если в настройках взведен флаг печати, то добавляем раздел в список печатаемых и выходим.
	Если СтрокаРаздела.ВыводНаПечать <> 0 Тогда
		СтруктураРеквизитовФормы.мПечатаемыеРазделы.Добавить(СтрокаРаздела.ИмяСтраницы);
		Возврат 1;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

Функция ПечатьОтчета(ПараметрыДокумента)  Экспорт
	
	ДокументСсылкаАлкоОтчет		= ПараметрыДокумента.ДокументСсылка;

	ИмяФормыОбъекта				= ПараметрыДокумента.ИмяФормыОбъекта;
	ВспомогательныйАдрес		= ПараметрыДокумента.ВспомогательныйАдрес;
	ПараметрыФормы				= ПараметрыДокумента.ПараметрыФормы;
	
	ВидПечати					= ПараметрыДокумента.ВидПечати;
	
	ТаблицаСтраницыЛицензии = ПараметрыФормы.ТаблицаСтраницыЛицензии;
	ТаблицаСтраницыРаздел1  = ПараметрыФормы.ТаблицаСтраницыРаздел1;
	ТаблицаСтраницыРаздел2  = ПараметрыФормы.ТаблицаСтраницыРаздел2;
	
	ТабП0000000002 				= ПараметрыФормы.ТабП0000000002;
	ТабП0000100003 				= ПараметрыФормы.ТабП0000100003;
	ТабП0000200003 				= ПараметрыФормы.ТабП0000200003;
	СтруктураСервисРегистров 	= ПараметрыФормы.СтруктураСервисРегистров;
	
	СтруктураРеквизитовФормы = ПараметрыФормы.СтруктураРеквизитовФормы;
	
	ВсегоСтрокПоЛицензиям = ПолучитьКоличествоСтрокПоГруппе(СтруктураРеквизитовФормы.мИдГруппы01, Истина);
	ВсегоСтрокПоРазделу1 = ПолучитьКоличествоСтрокПоГруппе(СтруктураРеквизитовФормы.мИдГруппы12, Истина);
	ВсегоСтрокПоРазделу2 = ПолучитьКоличествоСтрокПоГруппе(СтруктураРеквизитовФормы.мИдГруппы22, Истина);
	
	// Один проход при выводе в целом по организации,
	// второй - при выводе по ОП
	// Лицензии выводятся один раз.
	// Все это в 2 кратном размере, поскольку сначала вся информация отбирается в запросе.
	НужноОбработатьСтрок = (2*(ВсегоСтрокПоРазделу1 + ВсегоСтрокПоРазделу2) + ВсегоСтрокПоЛицензиям)*2;
	
	ОбработаноСтрок = 0;
	
	Если ВидПечати = "ПечатьФайлZIP" Тогда
		
	    ТипЭкспорта = СтруктураРеквизитовФормы.ТипЭкспорта;
		
		Если ТипЭкспорта = ТипФайлаТабличногоДокумента.PDF Тогда
		    ПроцентБезКонвертацииАрхивации = 14;
		ИначеЕсли ТипЭкспорта = ТипФайлаТабличногоДокумента.XLSX Тогда
			ПроцентБезКонвертацииАрхивации = 55;
		ИначеЕсли ТипЭкспорта = ТипФайлаТабличногоДокумента.MXL Тогда
			// Только сжать.
			ПроцентБезКонвертацииАрхивации = 95;
		ИначеЕсли ТипЭкспорта = ТипФайлаТабличногоДокумента.HTML Тогда
			ПроцентБезКонвертацииАрхивации = 20;
		КонецЕсли; 
		
	Иначе
		ПроцентБезКонвертацииАрхивации = 100;
	КонецЕсли; 
		
	СтруктураДанныхТитульный = ПараметрыФормы.СтруктураДанныхТитульный;
	мДеревоВыбранныхСтраниц  = ПараметрыФормы.мДеревоВыбранныхСтраниц;
	НомерКорректировки		 = ПараметрыФормы.НомерКорректировки;
	ДополнительныеДанные	 = ПараметрыФормы.ДополнительныеДанные;
	ДатаПодписи				 = ПараметрыФормы.ДатаПодписи;
	
	СтруктураПараметров = Новый Структура;
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		
		Пометка = ПечататьРаздел(СтрокаУровня1);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если Пометка = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяСтраницы",        ИмяСтраницыПанели);
		СтруктураПараметров.Вставить("ИмяРаздела",         ИмяСтраницыПанели);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ИмяФормыОбъекта",    ИмяФормыОбъекта);

		
		Если ИмяСтраницыПанели = "Титульный" Тогда
			
			ВывестиНаПечатьТитульный(СтруктураПараметров);	
			
		ИначеЕсли ИмяСтраницыПанели = "Раздел1" Тогда
			
			ВывестиНаПечатьРаздел1(СтруктураПараметров);
			
		ИначеЕсли ИмяСтраницыПанели = "Раздел2" Тогда
			
			ВывестиНаПечатьРаздел2(СтруктураПараметров);
			
		ИначеЕсли ИмяСтраницыПанели = "Лицензии" Тогда
			
			ВывестиНаПечатьРазделЛицензии(СтруктураПараметров);
		
		КонецЕсли;
		
	КонецЦикла;
	
	// Информируем о ходе выполнения.				
	Если НужноОбработатьСтрок > 0 Тогда
				
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(
		?(ВидПечати = "ПечатьФайлZIP" , "Конвертация в выбранный формат и архивация.", ""), 
		НужноОбработатьСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации);
		
	КонецЕсли;
	
	Возврат СтруктураРеквизитовФормы;
	
КонецФункции

Процедура ВывестиНаПечатьТитульный(СтруктураПараметровСтраницы)
	
	НастройкиСтраницы = Новый Структура;
		
	НастройкиСтраницы.Вставить("ОтображатьЗаголовки", 	Ложь);
	НастройкиСтраницы.Вставить("ОтображатьСетку", 		Ложь);
	НастройкиСтраницы.Вставить("ЧерноБелыйПросмотр", 	Истина);
	НастройкиСтраницы.Вставить("ЧерноБелаяПечать", 		Истина);
	НастройкиСтраницы.Вставить("Автомасштаб", 			Истина);
	НастройкиСтраницы.Вставить("ОриентацияСтраницы", 	ОриентацияСтраницы.Портрет);
	НастройкиСтраницы.Вставить("ПолеСверху", 			5);
	НастройкиСтраницы.Вставить("ПолеСнизу", 			5);
	НастройкиСтраницы.Вставить("ПолеСлева", 			5);
	НастройкиСтраницы.Вставить("ПолеСправа", 			5);
	
	СтруктураПараметровСтраницы.Вставить("НастройкиСтраницы", 			НастройкиСтраницы);
	СтруктураПараметровСтраницы.Вставить("СтруктураДанныхТитульный", 	СтруктураДанныхТитульный);
	СтруктураПараметровСтраницы.Вставить("ВерсияМакетаПечати", 			"");
	
	РегламентированнаяОтчетностьАЛКО.ВывестиНаПечатьТитульный(	
		СтруктураПараметровСтраницы, СтруктураРеквизитовФормы, ОбъектЭтогоОтчета);
		
КонецПроцедуры

Процедура ВывестиНаПечатьРазделЛицензии(СтруктураПараметровСтраницы)
	
	НастройкиСтраницы = Новый Структура;
		
	НастройкиСтраницы.Вставить("ОтображатьЗаголовки", 	Ложь);
	НастройкиСтраницы.Вставить("ОтображатьСетку", 		Ложь);
	НастройкиСтраницы.Вставить("ЧерноБелыйПросмотр", 	Истина);
	НастройкиСтраницы.Вставить("ЧерноБелаяПечать", 		Истина);
	НастройкиСтраницы.Вставить("Автомасштаб", 			Истина);
	НастройкиСтраницы.Вставить("ОриентацияСтраницы", 	ОриентацияСтраницы.Портрет);
	НастройкиСтраницы.Вставить("ПолеСверху", 			10);
	НастройкиСтраницы.Вставить("ПолеСнизу", 			5);
	НастройкиСтраницы.Вставить("ПолеСлева", 			5);
	НастройкиСтраницы.Вставить("ПолеСправа", 			5);
	
	СтруктураПараметровСтраницы.Вставить("НастройкиСтраницы", 				НастройкиСтраницы);
	СтруктураПараметровСтраницы.Вставить("СтруктураДанныхТитульный", 		СтруктураДанныхТитульный);
	СтруктураПараметровСтраницы.Вставить("СтруктураСервисРегистров", 		СтруктураСервисРегистров);
	СтруктураПараметровСтраницы.Вставить("ТаблицаСтраницыЛицензии", 		ТаблицаСтраницыЛицензии);
	СтруктураПараметровСтраницы.Вставить("НужноОбработатьСтрок", 			НужноОбработатьСтрок);
	СтруктураПараметровСтраницы.Вставить("ПроцентБезКонвертацииАрхивации", 	ПроцентБезКонвертацииАрхивации);	
	СтруктураПараметровСтраницы.Вставить("ВерсияМакетаПечати", 				"");
		
	РегламентированнаяОтчетностьАЛКО.ВывестиНаПечатьРазделЛицензии(
		СтруктураПараметровСтраницы, СтруктураРеквизитовФормы,
		ОбработаноСтрок, ОбъектЭтогоОтчета);
				
КонецПроцедуры

Процедура ВывестиНаПечатьРаздел1(СтруктураПараметровСтраницы)
	
	// В структуре СтруктураПараметровСтраницы уже установлены свойства 
	// ИмяФормыОбъекта, ИмяРаздела, НаименованиеЛиста - в процедуре ПечатьОтчета().
	
	СтруктураПараметровСтраницы.Вставить("ВерсияМакетаПечати", 			"");
	СтруктураПараметровСтраницы.Вставить("СтруктураДанныхТитульный", 	СтруктураДанныхТитульный);
	СтруктураПараметровСтраницы.Вставить("СтруктураСервисРегистров", 	СтруктураСервисРегистров);
	СтруктураПараметровСтраницы.Вставить("ДополнительныеДанные", 		ДополнительныеДанные);
	СтруктураПараметровСтраницы.Вставить("ТаблицаСтраницыРаздела", 		ТаблицаСтраницыРаздел1);
	
	// Настройки листа.
	НастройкиСтраницы = Новый Структура;		
	НастройкиСтраницы.Вставить("ОтображатьЗаголовки", 	Ложь);
	НастройкиСтраницы.Вставить("ОтображатьСетку", 		Ложь);
	НастройкиСтраницы.Вставить("ЧерноБелыйПросмотр", 	Истина);
	НастройкиСтраницы.Вставить("ЧерноБелаяПечать", 		Истина);
	НастройкиСтраницы.Вставить("Автомасштаб", 			Истина);
	НастройкиСтраницы.Вставить("ОриентацияСтраницы", 	ОриентацияСтраницы.Ландшафт);
	НастройкиСтраницы.Вставить("ПолеСверху", 			10);
	НастройкиСтраницы.Вставить("ПолеСнизу", 			5);
	НастройкиСтраницы.Вставить("ПолеСлева", 			5);
	НастройкиСтраницы.Вставить("ПолеСправа", 			5);
		
	СтруктураПараметровСтраницы.Вставить("НастройкиСтраницы", НастройкиСтраницы);
	
	// Высоты в стандартных строках с установленным свойством "Автовысота" (11,25).
	// Вычисляются методом пробной печати заведомо большого количества строк.
	// Например ВысотаСтраницыВСтроках = 120 и строк в отчете 200, значения короткие чтобы в одну строку 
	// помещались в поле.
	// После печати считается сколько поместилось на странице, с учетом что некоторые строки высотой в 2-3
	// "стандартных" - это и есть правильная ВысотаСтраницыВСтроках. 
	// Лучше ставить с небольшим запасом, в меньшую сторону. Если строк на листе вышло 100, лучше поставить 95.
	// Остальные высоты считаются по макету - сколько стандартных строк по высоте занимают.
	СтруктураВысот = Новый Структура;
	СтруктураВысот.Вставить("ВысотаСтраницыВСтроках", 			85);
	СтруктураВысот.Вставить("Высота_НомерСтраницыВСтроках", 	1);
	СтруктураВысот.Вставить("Высота_ЗаголовокЛистаВСтроках", 	6);
	СтруктураВысот.Вставить("Высота_ПустаяСтрокаВСтроках", 		1);
	СтруктураВысот.Вставить("Высота_ЗаголовокТаблицыВСтроках", 	16);
	СтруктураВысот.Вставить("Высота_СтрокаОПВСтроках", 			2);
	СтруктураВысот.Вставить("Высота_ПодвалВСтроках", 			6);
	
	СтруктураПараметровСтраницы.Вставить("СтруктураВысот", СтруктураВысот);
	
	
		
	НастройкиАлгоритмаПечати = Новый Структура;
	
	/////////////////////////////////////////////////////////////
	// Общие настройки печати по разделу.
	/////////////////////////////////////////////////////////////
	
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиПустаяСтрока", 			"ПустаяСтрока");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиПодвал", 					"Подвал");
    НастройкиАлгоритмаПечати.Вставить("ИмяОбластиОргДиректор", 				"ОргДиректор");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиОргБухгалтер", 			"ОргБухгалтер");
	НастройкиАлгоритмаПечати.Вставить("ВыводитьСводнуюТаблицуПоОрганизацииВЦелом", 	Истина);
	НастройкиАлгоритмаПечати.Вставить("ВыводитьВозвратыЗаДекларацией", 				Ложь);
	// Описание заголовка и шапки таблицы.
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиНомерСтраницы", 			"НомерСтраницы");	
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиЗаголовокЛиста", 			"ЗаголовокЛиста");	
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиЗаголовокТаблицы", 		"ЗаголовокТаблицы");
	
	// СписокПереносимыхПолей - список, значения которого - количество стандартных символов, помещающихся в 
	// в одну строчку по длине поля ,при шрифте и величине шрифта, установленных для поля в макете в области
	// "СтрокаТаблицы" или аналогичном.	
	// В представлении элементов списка хранится имена ИмяПоляПереносимойСтроки, т.е поля,
	// в котором слова могут переносится на следующую строку, если не хватает длины.
	// Строка "СтрокаТаблицы" или аналогичная должна иметь настройку АвтовысотаСтроки = Истина.
	//
	// В списке указываются поля с привязкой к ИДгруппы таблицы раздела (ресурсов в регистре).
	// Действуют и на общую часть по организации и на часть по ОП.
	СписокПереносимыхПолей = Новый СписокЗначений;
	СписокПереносимыхПолей.Добавить(27, "П000010000301");
	СписокПереносимыхПолей.Добавить(27, "П000010000303");
	
	НастройкиАлгоритмаПечати.Вставить("СписокПереносимыхПолей", 			СписокПереносимыхПолей);
		
	// Описание областей макета, выводящих строки общей информации по ОП и организации.
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиСтрокаОП", 				"СтрокаОП");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиСтрокаОрг",				"СтрокаОП");
	
	// Описание областей макета, выводящих строки общей информации по ОП и организации. 
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиЗаголовокРеквизитовОП", 	"ЗаголовокРеквизитов");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиЗаголовокРеквизитовОрг", 	"ЗаголовокРеквизитов");
	
	// Текст пояснения к общим сведениям по ОП и организации.
	НастройкиАлгоритмаПечати.Вставить("ЗаголовокРеквизитовОП", 
		"Сведения по обособленному подразделению (с указанием ИНН, КПП и адреса)/объекту торговли сельскохозяйственного товаропроизводителя (с указанием ИНН, КПП и адреса)");
	НастройкиАлгоритмаПечати.Вставить("ЗаголовокРеквизитовОрг", 
		"Сведения по организации/индивидуальному предпринимателю/сельскохозяйственному товаропроизводителю");
	
	// Имя области в которой выводится общая информация по ОП и Организации.
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиРеквизитовОП", 			"ОП");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиРеквизитовОрг", 			"ОП");
		
	// Информация по колонкам группировки, суммирования и запрету вывода.
	// Используется при выводе строк по организации - выводить "как есть" или сворачивать
	// по определенным полям.
	//
	// Пустая строка колонок группировки и суммирования означает автоопределение 
	// - все что не числа - колонки группировки.
	// - все что числа - колонки суммирования.
	//
	// Значение "Не сворачивать" или "НеСворачивать" в колонках группировки вместо списка колонок
	// предотвращает сворачивание, независимо от значения колонок суммирования.
	
	НастройкиАлгоритмаПечати.Вставить("КолонкиГруппировокОрг", "01,02,03,04,05");	 
	НастройкиАлгоритмаПечати.Вставить("КолонкиСуммированияОрг", "06,07,08,09,10,11,12,14,15,16,17,19,20,21");	
	НастройкиАлгоритмаПечати.Вставить("КолонкиНеВыводитьОрг", "13,18");
	
	/////////////////////////////////////////////////////////////
	// Алгоритм печати строк ОП.
	/////////////////////////////////////////////////////////////
	
	НастройкиАлгоритмаПечатиСтрокОП = Новый Структура;
	НастройкиАлгоритмаПечатиСтрокОП.Вставить("ИдГруппыОбластиСтрокаМакета", "П0000100003");
	НастройкиАлгоритмаПечатиСтрокОП.Вставить("ИмяОбластиНомера", "П000010000300");				
	НастройкиАлгоритмаПечатиСтрокОП.Вставить("ИмяОбластиСтрокаТаблицы", "СтрокаТаблицыОП");
	
	СписокСтруктурИнформацииИтогов = Новый СписокЗначений;
	
	СтруктураИнформацииИтога = Новый Структура;
	СтруктураИнформацииИтога.Вставить("ИдГруппыОбластейМакетаИтоги", "П0000100004");
	СтруктураИнформацииИтога.Вставить("ИмяОбластиСтрокаИтогов", "СтрокаИтогоОП");
	СтруктураИнформацииИтога.Вставить("ИмяОбластиРазмещенияПояснения", "ОписаниеИтогоОП");
	СтруктураИнформацииИтога.Вставить("ТекстПояснения", "Итого по коду %#02#%");
	СтруктураИнформацииИтога.Вставить("КолонкиГруппировок", "02");
	СтруктураИнформацииИтога.Вставить("КолонкиСуммирования", "06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21");
	
	СписокСтруктурИнформацииИтогов.Добавить(СтруктураИнформацииИтога, "1");
	
	СтруктураИнформацииИтога2 = Новый Структура;
	СтруктураИнформацииИтога2.Вставить("ИдГруппыОбластейМакетаИтоги", "П0000100004");
	СтруктураИнформацииИтога2.Вставить("ИмяОбластиСтрокаИтогов", "СтрокаИтогоОП");
	СтруктураИнформацииИтога2.Вставить("ИмяОбластиРазмещенияПояснения", "ОписаниеИтогоОП");
	СтруктураИнформацииИтога2.Вставить("ТекстПояснения", "ИТОГО");
	СтруктураИнформацииИтога2.Вставить("КолонкиГруппировок", "");
	СтруктураИнформацииИтога2.Вставить("КолонкиСуммирования", "06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21");
	
	СписокСтруктурИнформацииИтогов.Добавить(СтруктураИнформацииИтога2, "2");
	
	НастройкиАлгоритмаПечатиСтрокОП.Вставить("СписокСтруктурИнформацииИтогов", СписокСтруктурИнформацииИтогов);
	
	НастройкиАлгоритмаПечати.Вставить("НастройкиАлгоритмаПечатиСтрокОП", НастройкиАлгоритмаПечатиСтрокОП);
	
	/////////////////////////////////////////////////////////////
	// Алгоритм печати строк Организации.
	/////////////////////////////////////////////////////////////
	
	НастройкиАлгоритмаПечатиСтрокОрг = Новый Структура;
	НастройкиАлгоритмаПечатиСтрокОрг.Вставить("ИдГруппыОбластиСтрокаМакета", "П0000100001");
	НастройкиАлгоритмаПечатиСтрокОрг.Вставить("ИмяОбластиНомера", "П000010000100");				
	НастройкиАлгоритмаПечатиСтрокОрг.Вставить("ИмяОбластиСтрокаТаблицы", "СтрокаТаблицыОрг");
	
	СписокСтруктурИнформацииИтоговОрг = Новый СписокЗначений;
	
	СтруктураИнформацииИтога = Новый Структура;
	СтруктураИнформацииИтога.Вставить("ИдГруппыОбластейМакетаИтоги", "П0000100002");
	СтруктураИнформацииИтога.Вставить("ИмяОбластиСтрокаИтогов", "СтрокаИтогоОрг");
	СтруктураИнформацииИтога.Вставить("ИмяОбластиРазмещенияПояснения", "ОписаниеИтогоОрг");
	СтруктураИнформацииИтога.Вставить("ТекстПояснения", "Итого по коду %#02#%");
	СтруктураИнформацииИтога.Вставить("КолонкиГруппировок", "02");
	СтруктураИнформацииИтога.Вставить("КолонкиСуммирования", "06,07,08,09,10,11,12,14,15,16,17,19,20,21");
	
	СписокСтруктурИнформацииИтоговОрг.Добавить(СтруктураИнформацииИтога, "1");
	
	СтруктураИнформацииИтога2 = Новый Структура;
	СтруктураИнформацииИтога2.Вставить("ИдГруппыОбластейМакетаИтоги", "П0000100002");
	СтруктураИнформацииИтога2.Вставить("ИмяОбластиСтрокаИтогов", "СтрокаИтогоОрг");
	СтруктураИнформацииИтога2.Вставить("ИмяОбластиРазмещенияПояснения", "ОписаниеИтогоОрг");
	СтруктураИнформацииИтога2.Вставить("ТекстПояснения", "ИТОГО");
	СтруктураИнформацииИтога2.Вставить("КолонкиГруппировок", "");
	СтруктураИнформацииИтога2.Вставить("КолонкиСуммирования", "06,07,08,09,10,11,12,14,15,16,17,19,20,21");
	
	СписокСтруктурИнформацииИтоговОрг.Добавить(СтруктураИнформацииИтога2, "2");
	
	НастройкиАлгоритмаПечатиСтрокОрг.Вставить("СписокСтруктурИнформацииИтогов", СписокСтруктурИнформацииИтоговОрг);
	
	НастройкиАлгоритмаПечати.Вставить("НастройкиАлгоритмаПечатиСтрокОрг", НастройкиАлгоритмаПечатиСтрокОрг);
	
	/////////////////////////////////////////////////////////////
	// Конец настроек алгоритма печати
	/////////////////////////////////////////////////////////////
	
	СтруктураПараметровСтраницы.Вставить("НастройкиАлгоритмаПечати", НастройкиАлгоритмаПечати);
	
	// Заполнение данных для показа шкалы прогресса.
	СтруктураПараметровСтраницы.Вставить("НужноОбработатьСтрок", НужноОбработатьСтрок);
	СтруктураПараметровСтраницы.Вставить("ПроцентБезКонвертацииАрхивации", ПроцентБезКонвертацииАрхивации);
	
	
	РегламентированнаяОтчетностьАЛКО.ВывестиНаПечатьРазделДекларации(СтруктураПараметровСтраницы, СтруктураРеквизитовФормы,
																	ОбработаноСтрок, ОбъектЭтогоОтчета);
	
КонецПроцедуры

Процедура ВывестиНаПечатьРаздел2(СтруктураПараметровСтраницы)
	
	// В структуре СтруктураПараметровСтраницы уже установлены свойства 
	// ИмяФормыОбъекта, ИмяРаздела, НаименованиеЛиста - в процедуре ПечатьОтчета().
	
	СтруктураПараметровСтраницы.Вставить("ВерсияМакетаПечати", 			"");
	СтруктураПараметровСтраницы.Вставить("СтруктураДанныхТитульный", 	СтруктураДанныхТитульный);
	СтруктураПараметровСтраницы.Вставить("СтруктураСервисРегистров", 	СтруктураСервисРегистров);
	СтруктураПараметровСтраницы.Вставить("ДополнительныеДанные", 		ДополнительныеДанные);
	СтруктураПараметровСтраницы.Вставить("ТаблицаСтраницыРаздела", 		ТаблицаСтраницыРаздел2);
	
	// Настройки листа.
	НастройкиСтраницы = Новый Структура;		
	НастройкиСтраницы.Вставить("ОтображатьЗаголовки", 	Ложь);
	НастройкиСтраницы.Вставить("ОтображатьСетку", 		Ложь);
	НастройкиСтраницы.Вставить("ЧерноБелыйПросмотр", 	Истина);
	НастройкиСтраницы.Вставить("ЧерноБелаяПечать", 		Истина);
	НастройкиСтраницы.Вставить("Автомасштаб", 			Истина);
	НастройкиСтраницы.Вставить("ОриентацияСтраницы", 	ОриентацияСтраницы.Ландшафт);
	НастройкиСтраницы.Вставить("ПолеСверху", 			10);
	НастройкиСтраницы.Вставить("ПолеСнизу", 			5);
	НастройкиСтраницы.Вставить("ПолеСлева", 			5);
	НастройкиСтраницы.Вставить("ПолеСправа", 			5);
		
	СтруктураПараметровСтраницы.Вставить("НастройкиСтраницы", НастройкиСтраницы);
	
	// Высоты в стандартных строках с установленным свойством "Автовысота" (11,25).
	// Вычисляются методом пробной печати заведомо большого количества строк.
	// Например ВысотаСтраницыВСтроках = 120 и строк в отчете 200, значения короткие чтобы в одну строку 
	// помещались в поле.
	// После печати считается сколько поместилось на странице, с учетом что некоторые строки высотой в 2-3
	// "стандартных" - это и есть правильная ВысотаСтраницыВСтроках. 
	// Лучше ставить с небольшим запасом, в меньшую сторону. Если строк на листе вышло 100, лучше поставить 95.
	// Остальные высоты считаются по макету - сколько стандартных строк по высоте занимают.
	СтруктураВысот = Новый Структура;
	СтруктураВысот.Вставить("ВысотаСтраницыВСтроках", 			75);
	СтруктураВысот.Вставить("Высота_НомерСтраницыВСтроках", 	1);
	СтруктураВысот.Вставить("Высота_ЗаголовокЛистаВСтроках", 	2);
	СтруктураВысот.Вставить("Высота_ПустаяСтрокаВСтроках", 		1);
	СтруктураВысот.Вставить("Высота_ЗаголовокТаблицыВСтроках", 	7);
	СтруктураВысот.Вставить("Высота_СтрокаОПВСтроках", 			2);
	СтруктураВысот.Вставить("Высота_ПодвалВСтроках", 			6);
	
	СтруктураПараметровСтраницы.Вставить("СтруктураВысот", СтруктураВысот);
	
	
		
	НастройкиАлгоритмаПечати = Новый Структура;
	
	/////////////////////////////////////////////////////////////
	// Общие настройки печати по разделу.
	/////////////////////////////////////////////////////////////
	
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиПустаяСтрока", 			"ПустаяСтрока");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиПодвал", 					"Подвал");
    НастройкиАлгоритмаПечати.Вставить("ИмяОбластиОргДиректор", 				"ОргДиректор");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиОргБухгалтер", 			"ОргБухгалтер");
	НастройкиАлгоритмаПечати.Вставить("ВыводитьСводнуюТаблицуПоОрганизацииВЦелом", 	Истина);
	НастройкиАлгоритмаПечати.Вставить("ВыводитьВозвратыЗаДекларацией", 				Ложь);
	// Описание заголовка и шапки таблицы.
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиНомерСтраницы", 			"НомерСтраницы");	
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиЗаголовокЛиста", 			"ЗаголовокЛиста");	
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиЗаголовокТаблицы", 		"ЗаголовокТаблицы");
	
	// СписокПереносимыхПолей - список, значения которого - количество стандартных символов, помещающихся в 
	// в одну строчку по длине поля ,при шрифте и величине шрифта, установленных для поля в макете в области
	// "СтрокаТаблицы" или аналогичном.	
	// В представлении элементов списка хранится имена ИмяПоляПереносимойСтроки, т.е поля,
	// в котором слова могут переносится на следующую строку, если не хватает длины.
	// Строка "СтрокаТаблицы" или аналогичная должна иметь настройку АвтовысотаСтроки = Истина.
	//
	// В списке указываются поля с привязкой к ИДгруппы таблицы раздела (ресурсов в регистре).
	// Действуют и на общую часть по организации и на часть по ОП.
	СписокПереносимыхПолей = Новый СписокЗначений;
	СписокПереносимыхПолей.Добавить(27, "П000020000301");
	СписокПереносимыхПолей.Добавить(27, "П000020000303");
	СписокПереносимыхПолей.Добавить(27, "П000020000306");
	СписокПереносимыхПолей.Добавить(27, "П000020000312");
	СписокПереносимыхПолей.Добавить(27, "П000020000314");
	СписокПереносимыхПолей.Добавить(27, "П000020000315");
	
	НастройкиАлгоритмаПечати.Вставить("СписокПереносимыхПолей", 			СписокПереносимыхПолей);
		
	// Описание областей макета, выводящих строки общей информации по ОП и организации.
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиСтрокаОП", 				"СтрокаОП");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиСтрокаОрг",				"СтрокаОП");
	
	// Описание областей макета, выводящих строки общей информации по ОП и организации. 
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиЗаголовокРеквизитовОП", 	"ЗаголовокРеквизитов");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиЗаголовокРеквизитовОрг", 	"ЗаголовокРеквизитов");
	
	// Текст пояснения к общим сведениям по ОП и организации.
	НастройкиАлгоритмаПечати.Вставить("ЗаголовокРеквизитовОП", 
		"Сведения по обособленному подразделению (с указанием ИНН, КПП и адреса)/объекту торговли сельскохозяйственного товаропроизводителя (с указанием ИНН, КПП и адреса)");
	НастройкиАлгоритмаПечати.Вставить("ЗаголовокРеквизитовОрг", 
		"Сведения по организации/индивидуальному предпринимателю/сельскохозяйственному товаропроизводителю");
	
	// Имя области в которой выводится общая информация по ОП и Организации.
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиРеквизитовОП", 			"ОП");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиРеквизитовОрг", 			"ОП");
		
	// Информация по колонкам группировки, суммирования и запрету вывода.
	// Используется при выводе строк по организации - выводить "как есть" или сворачивать
	// по определенным полям.
	//
	// Пустая строка колонок группировки и суммирования означает автоопределение 
	// - все что не числа - колонки группировки.
	// - все что числа - колонки суммирования.
	//
	// Значение "Не сворачивать" или "НеСворачивать" в колонках группировки вместо списка колонок
	// предотвращает сворачивание, независимо от значения колонок суммирования.
	
	НастройкиАлгоритмаПечати.Вставить("КолонкиГруппировокОрг", "");	 
	НастройкиАлгоритмаПечати.Вставить("КолонкиСуммированияОрг", "");	
	НастройкиАлгоритмаПечати.Вставить("КолонкиНеВыводитьОрг", "");
	
	/////////////////////////////////////////////////////////////
	// Алгоритм печати строк ОП.
	/////////////////////////////////////////////////////////////
	
	НастройкиАлгоритмаПечатиСтрокОП = Новый Структура;
	НастройкиАлгоритмаПечатиСтрокОП.Вставить("ИдГруппыОбластиСтрокаМакета", "П0000200003");
	НастройкиАлгоритмаПечатиСтрокОП.Вставить("ИмяОбластиНомера", "П000020000300");				
	НастройкиАлгоритмаПечатиСтрокОП.Вставить("ИмяОбластиСтрокаТаблицы", "СтрокаТаблицы");
	
	СписокСтруктурИнформацииИтогов = Новый СписокЗначений;
	
	СтруктураИнформацииИтога = Новый Структура;
	СтруктураИнформацииИтога.Вставить("ИдГруппыОбластейМакетаИтоги", "П0000200004");
	СтруктураИнформацииИтога.Вставить("ИмяОбластиСтрокаИтогов", "СтрокаИтого");
	СтруктураИнформацииИтога.Вставить("ИмяОбластиРазмещенияПояснения", "ОписаниеИтого");
	СтруктураИнформацииИтога.Вставить("ТекстПояснения", "Итого по коду %#02#%");
	СтруктураИнформацииИтога.Вставить("КолонкиГруппировок", "02");
	СтруктураИнформацииИтога.Вставить("КолонкиСуммирования", "16");
	
	СписокСтруктурИнформацииИтогов.Добавить(СтруктураИнформацииИтога, "1");
	
	СтруктураИнформацииИтога2 = Новый Структура;
	СтруктураИнформацииИтога2.Вставить("ИдГруппыОбластейМакетаИтоги", "П0000200004");
	СтруктураИнформацииИтога2.Вставить("ИмяОбластиСтрокаИтогов", "СтрокаИтого");
	СтруктураИнформацииИтога2.Вставить("ИмяОбластиРазмещенияПояснения", "ОписаниеИтого");
	СтруктураИнформацииИтога2.Вставить("ТекстПояснения", "ИТОГО");
	СтруктураИнформацииИтога2.Вставить("КолонкиГруппировок", "");
	СтруктураИнформацииИтога2.Вставить("КолонкиСуммирования", "16");
	
	СписокСтруктурИнформацииИтогов.Добавить(СтруктураИнформацииИтога2, "2");
	
	НастройкиАлгоритмаПечатиСтрокОП.Вставить("СписокСтруктурИнформацииИтогов", СписокСтруктурИнформацииИтогов);
	
	НастройкиАлгоритмаПечати.Вставить("НастройкиАлгоритмаПечатиСтрокОП", НастройкиАлгоритмаПечатиСтрокОП);
	
	/////////////////////////////////////////////////////////////
	// Алгоритм печати строк Организации.
	/////////////////////////////////////////////////////////////
	
	НастройкиАлгоритмаПечатиСтрокОрг = Новый Структура;
	НастройкиАлгоритмаПечатиСтрокОрг.Вставить("ИдГруппыОбластиСтрокаМакета", "П0000200003");
	НастройкиАлгоритмаПечатиСтрокОрг.Вставить("ИмяОбластиНомера", "П000020000300");				
	НастройкиАлгоритмаПечатиСтрокОрг.Вставить("ИмяОбластиСтрокаТаблицы", "СтрокаТаблицы");
	
	СписокСтруктурИнформацииИтоговОрг = Новый СписокЗначений;
	
	СтруктураИнформацииИтога = Новый Структура;
	СтруктураИнформацииИтога.Вставить("ИдГруппыОбластейМакетаИтоги", "П0000200004");
	СтруктураИнформацииИтога.Вставить("ИмяОбластиСтрокаИтогов", "СтрокаИтого");
	СтруктураИнформацииИтога.Вставить("ИмяОбластиРазмещенияПояснения", "ОписаниеИтого");
	СтруктураИнформацииИтога.Вставить("ТекстПояснения", "Итого по коду %#02#%");
	СтруктураИнформацииИтога.Вставить("КолонкиГруппировок", "02");
	СтруктураИнформацииИтога.Вставить("КолонкиСуммирования", "16");
	
	СписокСтруктурИнформацииИтоговОрг.Добавить(СтруктураИнформацииИтога, "1");
	
	СтруктураИнформацииИтога2 = Новый Структура;
	СтруктураИнформацииИтога2.Вставить("ИдГруппыОбластейМакетаИтоги", "П0000200004");
	СтруктураИнформацииИтога2.Вставить("ИмяОбластиСтрокаИтогов", "СтрокаИтого");
	СтруктураИнформацииИтога2.Вставить("ИмяОбластиРазмещенияПояснения", "ОписаниеИтого");
	СтруктураИнформацииИтога2.Вставить("ТекстПояснения", "ИТОГО");
	СтруктураИнформацииИтога2.Вставить("КолонкиГруппировок", "");
	СтруктураИнформацииИтога2.Вставить("КолонкиСуммирования", "16");
	
	СписокСтруктурИнформацииИтоговОрг.Добавить(СтруктураИнформацииИтога2, "2");
	
	НастройкиАлгоритмаПечатиСтрокОрг.Вставить("СписокСтруктурИнформацииИтогов", СписокСтруктурИнформацииИтоговОрг);
	
	НастройкиАлгоритмаПечати.Вставить("НастройкиАлгоритмаПечатиСтрокОрг", НастройкиАлгоритмаПечатиСтрокОрг);
	
	/////////////////////////////////////////////////////////////
	// Конец настроек алгоритма печати
	/////////////////////////////////////////////////////////////
	
	СтруктураПараметровСтраницы.Вставить("НастройкиАлгоритмаПечати", НастройкиАлгоритмаПечати);
	
	// Заполнение данных для показа шкалы прогресса.
	СтруктураПараметровСтраницы.Вставить("НужноОбработатьСтрок", НужноОбработатьСтрок);
	СтруктураПараметровСтраницы.Вставить("ПроцентБезКонвертацииАрхивации", ПроцентБезКонвертацииАрхивации);
	
	
	РегламентированнаяОтчетностьАЛКО.ВывестиНаПечатьРазделДекларации(СтруктураПараметровСтраницы, СтруктураРеквизитовФормы,
																	ОбработаноСтрок, ОбъектЭтогоОтчета);
	
КонецПроцедуры

#КонецОбласти 


#Область ВнешнийОтчет

// Процедуры и функции этой области используются только в случае
// публикации в виде внешнего отчета.

#Область ПрограммныйИнтерфейсВнешнийОтчет

Функция ВерсияФорматаВыгрузки(Знач НаДату = Неопределено, ВыбраннаяФорма = Неопределено) Экспорт
	
	Если НаДату = Неопределено Тогда
		НаДату = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Возврат Перечисления.ВерсииФорматовВыгрузки.Версия401алко;
		
КонецФункции

Функция ТаблицаФормОтчета() Экспорт
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0));
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Дата"));
	ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);
	
	ТаблицаФормОтчета = Новый ТаблицаЗначений;
	ТаблицаФормОтчета.Колонки.Добавить("ФормаОтчета",        ОписаниеТиповСтрока);
	ТаблицаФормОтчета.Колонки.Добавить("ОписаниеОтчета",     ОписаниеТиповСтрока, "Утверждена",  20);
	ТаблицаФормОтчета.Колонки.Добавить("ДатаНачалоДействия", ОписаниеТиповДата,   "Действует с", 5);
	ТаблицаФормОтчета.Колонки.Добавить("ДатаКонецДействия",  ОписаниеТиповДата,   "         по", 5);
	ТаблицаФормОтчета.Колонки.Добавить("РедакцияФормы",      ОписаниеТиповСтрока, "Редакция формы", 20);
	
	НоваяФорма = ТаблицаФормОтчета.Добавить();
	НоваяФорма.ФормаОтчета        = "ФормаОтчета2012Кв3";
	НоваяФорма.ОписаниеОтчета     = "Приложение № 11 к Правилам представления деклараций об объеме производства, оборота и (или) использования этилового спирта, алкогольной и спиртосодержащей продукции, об использовании производственных мощностей (Утверждено ПП РФ от 09.08.2012 № 815).";
	НоваяФорма.РедакцияФормы	  = "от 09.08.2012 № 815.";
	НоваяФорма.ДатаНачалоДействия = '20120101';
	НоваяФорма.ДатаКонецДействия  = '20131231';
		
	НоваяФорма = ТаблицаФормОтчета.Добавить();
	НоваяФорма.ФормаОтчета        = "ФормаОтчета2014Кв1";
	НоваяФорма.ОписаниеОтчета     = "Приложение № 11 к Правилам представления деклараций об объеме производства, оборота и (или) использования этилового спирта, алкогольной и спиртосодержащей продукции, об использовании производственных мощностей (Изменения согласно приказу Федеральной службы по регулированию алкогольного рынка от 08.04.2014 № 92).";
	НоваяФорма.РедакцияФормы	  = "от 08.04.2014 № 92.";
	НоваяФорма.ДатаНачалоДействия = '20140101';
	НоваяФорма.ДатаКонецДействия  = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"));
	
	
	Возврат ТаблицаФормОтчета;
	
КонецФункции

Функция ДанныеРеглОтчета(ЭкземплярРеглОтчета) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

Функция ДеревоФормИФорматов() Экспорт
	
	ФормыИФорматы = Новый ДеревоЗначений;
	ФормыИФорматы.Колонки.Добавить("Код");
	ФормыИФорматы.Колонки.Добавить("ДатаПриказа");
	ФормыИФорматы.Колонки.Добавить("НомерПриказа");
	ФормыИФорматы.Колонки.Добавить("ДатаНачалаДействия");
	ФормыИФорматы.Колонки.Добавить("ДатаОкончанияДействия");
	ФормыИФорматы.Колонки.Добавить("ИмяОбъекта");
	ФормыИФорматы.Колонки.Добавить("Описание");
	
	Форма20120701 = ОпределитьФормуВДеревеФормИФорматов(ФормыИФорматы, "1152029", '2012-08-09', "815", "ФормаОтчета2012Кв3");
	ОпределитьФорматВДеревеФормИФорматов(Форма20120701, "4.20", , , '2012-01-01');
	
	Форма20140408 = ОпределитьФормуВДеревеФормИФорматов(ФормыИФорматы, "1152029", '2014-04-08', "92", "ФормаОтчета2014Кв1");
	ОпределитьФорматВДеревеФормИФорматов(Форма20140408, "4.30", , , '2014-01-01', '2015-08-31');
	ОпределитьФорматВДеревеФормИФорматов(Форма20140408, "4.31", , , '2015-09-01');
	
	
	Возврат ФормыИФорматы;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииВнешнийОтчет

Функция ОпределитьФормуВДеревеФормИФорматов(ДеревоФормИФорматов, Код, ДатаПриказа = '00010101', НомерПриказа = "", ИмяОбъекта = "",
			ДатаНачалаДействия = '00010101', ДатаОкончанияДействия = '00010101', Описание = "")
	
	НовСтр = ДеревоФормИФорматов.Строки.Добавить();
	НовСтр.Код = СокрЛП(Код);
	НовСтр.ДатаПриказа = ДатаПриказа;
	НовСтр.НомерПриказа = СокрЛП(НомерПриказа);
	НовСтр.ДатаНачалаДействия = ДатаНачалаДействия;
	НовСтр.ДатаОкончанияДействия = ДатаОкончанияДействия;
	НовСтр.ИмяОбъекта = СокрЛП(ИмяОбъекта);
	НовСтр.Описание = СокрЛП(Описание);
	Возврат НовСтр;
	
КонецФункции

Функция ОпределитьФорматВДеревеФормИФорматов(Форма, Версия, ДатаПриказа = '00010101', НомерПриказа = "",
			ДатаНачалаДействия = Неопределено, ДатаОкончанияДействия = Неопределено, ИмяОбъекта = "", Описание = "")
	
	НовСтр = Форма.Строки.Добавить();
	НовСтр.Код = СокрЛП(Версия);
	НовСтр.ДатаПриказа = ДатаПриказа;
	НовСтр.НомерПриказа = СокрЛП(НомерПриказа);
	НовСтр.ДатаНачалаДействия = ?(ДатаНачалаДействия = Неопределено, Форма.ДатаНачалаДействия, ДатаНачалаДействия);
	НовСтр.ДатаОкончанияДействия = ?(ДатаОкончанияДействия = Неопределено, Форма.ДатаОкончанияДействия, ДатаОкончанияДействия);
	НовСтр.ИмяОбъекта = СокрЛП(ИмяОбъекта);
	НовСтр.Описание = СокрЛП(Описание);
	Возврат НовСтр;
	
КонецФункции

#КонецОбласти

 мВерсияОтчета = "БПКОРП 3.0.42.54.4";
 
#КонецОбласти 


#КонецОбласти

#КонецЕсли






 