#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает количество дней в работе указанного ТС
//
// Параметры:
//  ТС		 - Справочник.уатТС - транспортное средство
//  ДатаНач	 - Дата - начало периода
//  ДатаКон	 - Дата - конец периода
// 
// Возвращаемое значение:
//  Количество дней в работе - Число 
//
Функция АвтоДнейВРаботе(ТС, ДатаНач, ДатаКон) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТС",      ТС);
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатПутевойЛист.Ссылка,
	|	уатПутевойЛист.ДатаВыезда,
	|	уатПутевойЛист.ДатаВозвращения
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|ГДЕ
	|	уатПутевойЛист.Проведен
	|	И уатПутевойЛист.ДатаВозвращения >= &ДатаНач
	|	И (&ДатаКон = ДАТАВРЕМЯ(1,1,1) ИЛИ уатПутевойЛист.ДатаВыезда <= КОНЕЦПЕРИОДА(&ДатаКон, ДЕНЬ))
	|	И уатПутевойЛист.ТранспортноеСредство = &ТС";
	
	ВыборкаПЛ = Запрос.Выполнить().Выбрать();
	
	мсвДат = Новый Массив();
	Пока ВыборкаПЛ.Следующий() Цикл
		ДатаНач_ = Макс(ДатаНач, ВыборкаПЛ.ДатаВыезда);
		ДатаКон_ = ?(ДатаКон = '00010101', ВыборкаПЛ.ДатаВозвращения, Мин(КонецДня(ДатаКон), ВыборкаПЛ.ДатаВозвращения));
		
		ТекДата_ = НачалоДня(ДатаНач_);
		Пока ТекДата_ <= НачалоДня(ДатаКон_) Цикл
			Если мсвДат.Найти(ТекДата_) = Неопределено Тогда
				мсвДат.Добавить(ТекДата_);
			КонецЕсли;
			
			ТекДата_ = ТекДата_ + 3600*24;
		КонецЦикла;
	КонецЦикла;
	АвтоДни_ = мсвДат.Количество();
	
	Возврат АвтоДни_;
	
КонецФункции

// Возвращает количество дней в хозяйстве указанного ТС
//
// Параметры:
//  ТС		 - Справочник.уатТС - транспортное средство
//  ДатаНач	 - Дата - начало периода
//  ДатаКон	 - Дата - конец периода
// 
// Возвращаемое значение:
//  Количество дней в хозяйстве - Число 
//
Функция АвтоДнейВХозяйстве(ТС, ДатаНач, ДатаКон) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТС", ТС);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатМестонахождениеТССрезПервых.Период КАК ДатаВвода,
	|	NULL КАК ДатаВыбытия
	|ИЗ
	|	РегистрСведений.уатМестонахождениеТС.СрезПервых(
	|			,
	|			ТС = &ТС
	|				И (Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ИЛИ НЕ(Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|							ИЛИ Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|							ИЛИ Подразделение = НЕОПРЕДЕЛЕНО)
	|					ИЛИ Колонна <> ЗНАЧЕНИЕ(Справочник.уатКолонны.ПустаяСсылка))) КАК уатМестонахождениеТССрезПервых
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	уатМестонахождениеТССрезПоследних.Период
	|ИЗ
	|	РегистрСведений.уатМестонахождениеТС.СрезПоследних(
	|			,
	|			ТС = &ТС
	|				И Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				И (Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|					ИЛИ Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|					ИЛИ Подразделение = НЕОПРЕДЕЛЕНО)
	|				И Колонна = ЗНАЧЕНИЕ(Справочник.уатКолонны.ПустаяСсылка)) КАК уатМестонахождениеТССрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		ДатаВвода   = Выборка.ДатаВвода;
		ДатаВыбытия = Выборка.ДатаВыбытия;
	Иначе 
		// ТС не было введено в эксплуатацию
		Возврат 0;
	КонецЕсли;
	
	Если ДатаВвода = Null Тогда 
		// ТС не было введено в эксплуатацию
		Возврат 0;
	КонецЕсли;
	
	мсвДат = Новый Массив();
	
	ДатаНач_ = Макс(ДатаНач, ДатаВвода);
	
	Если ДатаВыбытия = Null Тогда 
		ДатаКон_ = КонецДня(ДатаКон);
	Иначе 
		ДатаКон_ = Мин(КонецДня(ДатаКон), ДатаВыбытия);
	КонецЕсли;
	
	ТекДата_ = НачалоДня(ДатаНач_);
	Пока ТекДата_ <= НачалоДня(ДатаКон_) Цикл
		Если мсвДат.Найти(ТекДата_) = Неопределено Тогда
			мсвДат.Добавить(ТекДата_);
		КонецЕсли;
		
		ТекДата_ = ТекДата_ + 3600*24;
	КонецЦикла;
	
	АвтоДни_ = мсвДат.Количество();
	
	Возврат АвтоДни_;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатОтчетОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Настройки размещения в панели отчетов.
//
// Параметры:
//   Настройки – Коллекция – Используется для описания настроек отчетов и вариантов
//       см. описание к ВариантыОтчетов.ДеревоНастроекВариантовОтчетовКонфигурации().
//   НастройкиОтчета – СтрокаДереваЗначений – Настройки размещения всех вариантов отчета.
//       См. "Реквизиты для изменения" функции ВариантыОтчетов.ДеревоНастроекВариантовОтчетовКонфигурации().
//
// Описание:
//   См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//
// Вспомогательные методы:
//   НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "<ИмяВарианта>");
//   ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, НастройкиОтчета, Истина/Ложь); // Отчет
//   поддерживает только этот режим.
//
Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "Ведомость ТЭП");
	НастройкиВарианта.Описание = НСтр("ru = 'Отчет позволяет получить информацию о технико-эксплуатационных показателях.'");
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли