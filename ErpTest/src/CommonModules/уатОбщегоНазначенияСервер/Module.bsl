// Процедура определяет ситуацию, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в это м случае
// присваивает документу новый уникальный номер.
//
// Параметры:
//  ДокументСсылка - ссылка на документ,из которого вызвана процедура 
//  НоваяДатаДокумента - новая дата документа 
//  НачальнаяДатаДокумента - начальная дата документа 
//
// Возвращаемое значение:
//  Число - разность дат.
//
Функция ПроверитьНомерДокумента(ДокументСсылка, НоваяДатаДокумента, НачальнаяДатаДокумента) Экспорт
	
	// Определяем назначенную для данного вида документов периодичность смены номера
	ПериодСменыНомера = ДокументСсылка.Метаданные().ПериодичностьНомера;
	
	//В зависимости от установленной периодичности смены номеров,
	//определяем разность старой и новой датами документа.
	Если ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
		РазностьДат = НачалоГода(НачальнаяДатаДокумента) - НачалоГода(НоваяДатаДокумента);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
		РазностьДат = НачалоКвартала(НачальнаяДатаДокумента) - НачалоКвартала(НоваяДатаДокумента);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
		РазностьДат = НачалоМесяца(НачальнаяДатаДокумента) - НачалоМесяца(НоваяДатаДокумента);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
		РазностьДат = НачальнаяДатаДокумента - НоваяДатаДокумента;
	Иначе
		Возврат 0;
	КонецЕсли;
	
	Возврат РазностьДат;
	
КонецФункции // ПроверитьНомерДокумента()

// Процедура предназначена для заполнения общих реквизитов документов,
// вызывается в обработчиках событий "ПриСозданииНаСервере" в модулях форм всех документов.
//
// Параметры:
//  ДокументОбъект                 - объект редактируемого документа,
//  ВидОперации                    - необязаетельный, строка вида операции ("Покупка" или "Продажа"),
//                                   если не передан, то реквизиты, зависящие от вида операции, не заполняются
//  ПараметрОбъектКопирования 	   - указывает что документ создан копированием
//  ПараметрОснование 			   - ссылка на документ основание
Процедура ЗаполнитьШапкуДокумента(Объект,
	ВидОперации = "",
	ПараметрЗначениеКопирования = Неопределено,
	ПараметрОснование = Неопределено,
	СостояниеДокумента,
	КартинкаСостоянияДокумента,
	РазрешеноПроведение,
	ЗначенияЗаполнения = Неопределено) Экспорт
	
	Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	МетаданныеДокумента = Объект.Ссылка.Метаданные();
	
	Если МетаданныеДокумента.Имя = "ЧекККМ"
	 ИЛИ МетаданныеДокумента.Имя = "ЧекККМВозврат" Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если (НЕ ЗначениеЗаполнено(ПараметрЗначениеКопирования)) Тогда
			
			Если ЕстьРеквизитДокумента("Склад", МетаданныеДокумента)
				И (НЕ ЗначениеЗаполнено(Объект.Склад)) Тогда
				Объект.Склад = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнойСклад");
			КонецЕсли;
			
			Если ЕстьРеквизитДокумента("СкладОрдер", МетаданныеДокумента)
				И (НЕ ЗначениеЗаполнено(Объект.СкладОрдер)) Тогда
				Объект.СкладОрдер = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнойСклад");
			КонецЕсли;
			
			Если ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) 
				И НЕ (ЗначенияЗаполнения <> Неопределено И ЗначенияЗаполнения.Свойство("ВалютаДокумента") 
				И ЗначениеЗаполнено(ЗначенияЗаполнения.ВалютаДокумента))
				И НЕ (ЗначениеЗаполнено(ПараметрОснование)
				И ЗначениеЗаполнено(Объект.ВалютаДокумента)) Тогда
				
				ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
				Если ЗначениеЗаполнено(ВалютаДокумента) И Объект.ВалютаДокумента <> ВалютаДокумента Тогда
					Объект.ВалютаДокумента = ВалютаДокумента;
				КонецЕсли;
			КонецЕсли;
			
			Если ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) 
				И НЕ (ЗначенияЗаполнения <> Неопределено И ЗначенияЗаполнения.Свойство("Организация") 
				И ЗначениеЗаполнено(ЗначенияЗаполнения.Организация))
				И НЕ (ЗначениеЗаполнено(ПараметрОснование)
				И ЗначениеЗаполнено(Объект.Организация)) Тогда
				ЗначениеНастройки = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, 
					"ОсновнаяОрганизация");
				Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
					Если Объект.Организация <> ЗначениеНастройки Тогда
						Объект.Организация = ЗначениеНастройки;
					КонецЕсли;
				Иначе
					Объект.Организация = Справочники.Организации.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
			
			Если ЕстьРеквизитДокумента("ПодразделениеОрганизации", МетаданныеДокумента) И (НЕ ЗначениеЗаполнено(Объект.ПодразделениеОрганизации)) Тогда
				Объект.ПодразделениеОрганизации = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновноеПодразделениеОрганизации");
			ИначеЕсли ЕстьРеквизитДокумента("Подразделение", МетаданныеДокумента) И (НЕ ЗначениеЗаполнено(Объект.Подразделение)) Тогда
				Объект.Подразделение = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновноеПодразделениеОрганизации");
			КонецЕсли;
			
			Если ЕстьРеквизитДокумента("Ответственный", МетаданныеДокумента)
				И НЕ (ЗначенияЗаполнения <> Неопределено И ЗначенияЗаполнения.Свойство("Ответственный") 
				И ЗначениеЗаполнено(ЗначенияЗаполнения.Ответственный))
				И НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
				Объект.Ответственный = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь,
					"ОсновнойОтветственный");
			КонецЕсли;
			
			Если ЕстьРеквизитДокумента("ВидЦен", МетаданныеДокумента)
			   И ЗначениеЗаполнено(Объект.ВидЦен) 
			   И НЕ ЗначениеЗаполнено(ПараметрОснование) Тогда
				Если ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) Тогда
					Объект.СуммаВключаетНДС = Объект.ВидЦен.ЦенаВключаетНДС;
				КонецЕсли;
			КонецЕсли;
						
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьШапкуДокумента()

// Позволяет определить есть ли среди реквизитов шапки документа
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента)

	Возврат НЕ (МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

КонецФункции // ЕстьРеквизитДокумента()

Функция ПолучитьПараметрыОткрытияОтчетыВзаиморасчеты(Ссылка) Экспорт
	СхемаКомпоновкиДанных = Отчеты.уатДокументыПоПЛИРазнарядкам.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");

    КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
    КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	НастройкиКомпоновки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	Для Каждого ТекЭлем Из НастройкиКомпоновки.Отбор.Элементы Цикл
		Если Строка(ТекЭлем.ЛевоеЗначение) = "Документ" Тогда
			ТекЭлем.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ТекЭлем.ПравоеЗначение = Ссылка;
			ТекЭлем.Использование = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЭтоПЛ = (ТипЗнч(Ссылка) = Тип("ДокументСсылка.уатПутевойЛист"));
	
	Для Каждого ТекЭлем Из НастройкиКомпоновки.ПараметрыДанных.Элементы Цикл
		Если ЭтоПЛ Тогда
			Если Строка(ТекЭлем.Параметр) = "ДатаНачала" Тогда
				ТекЭлем.Значение = Ссылка.ДатаВыезда;
			ИначеЕсли Строка(ТекЭлем.Параметр) = "ДатаКонца" ИЛИ Строка(ТекЭлем.Параметр) = "ДатаКонца1" Тогда
				ТекЭлем.Значение = Ссылка.ДатаВозвращения;
			КонецЕсли;
		Иначе
			Если Строка(ТекЭлем.Параметр) = "ДатаНачала" Тогда
				ТекЭлем.Значение = Ссылка.Дата;
			ИначеЕсли Строка(ТекЭлем.Параметр) = "ДатаКонца" ИЛИ Строка(ТекЭлем.Параметр) = "ДатаКонца1" Тогда
				тчРазнарядка = Ссылка.Разнарядка.Выгрузить();
				тчРазнарядка.Сортировать("ДатаВозвращения Убыв");
				Если тчРазнарядка.Количество() = 0 Или Не ЗначениеЗаполнено(тчРазнарядка[0].ДатаВозвращения) Тогда
					ТекЭлем.Значение = КонецМесяца(ТекущаяДата());
				Иначе
					ТекЭлем.Значение = тчРазнарядка[0].ДатаВозвращения;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(НастройкиКомпоновки);
 
    сткПараметры = Новый Структура("СформироватьПриОткрытии, ПользовательскиеНастройки", Истина, КомпоновщикНастроекКомпоновкиДанных.ПользовательскиеНастройки);
	
	Возврат сткПараметры;
КонецФункции

// Предназначена для получения пустого значения заданного типа:
//	примитивного, или ссылочного. Используется
//
// Параметры:
//	ЗаданныйТип   - тип, пустое значение которого нужно получить
//
Функция ПустоеЗначениеТипа(ЗаданныйТип) Экспорт

	Если ЗаданныйТип = Тип("Число") Тогда
		Возврат 0;

	ИначеЕсли ЗаданныйТип = Тип("Строка") Тогда
		Возврат "";

	ИначеЕсли ЗаданныйТип = Тип("Дата") Тогда
		Возврат '00010101000000';

	ИначеЕсли ЗаданныйТип = Тип("Булево") Тогда
		Возврат Ложь;

	Иначе
		Возврат Новый (ЗаданныйТип);

	КонецЕсли;

КонецФункции // ПустоеЗначениеТипа();

// Преобразует входную таблицу значений в массив строк для передачи на контекст Клиента
//Возвращаемое значение:
//	МассивЗначений, тип значения - Структура (ключ - имя колонки таблицы, значение - значение ячейки таблицы)
//
Функция ПреобразоватьТаблицувМассивСтрок(тбл) Экспорт
	мсвРез = Новый Массив;
	
	Для Каждого ТекСтрока Из тбл Цикл
		СтруктураСтроки = Новый Структура;
		Для Каждого ТекКолонка Из тбл.Колонки Цикл
			СтруктураСтроки.Вставить(ТекКолонка.Имя, ТекСтрока[ТекКолонка.Имя]);
		КонецЦикла;
		
		мсвРез.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат мсвРез;
КонецФункции

// Для проводящихся документов проверяет право на печать, если документ не проведен
//
Функция РазрешениеПечатиНепроведенногоДокумента(МассивОбъектов) Экспорт
	Рез = Истина;
	
	Если уатПраваИНастройки.уатПраво("ПечатьНепроведенных") = ЛОЖЬ Тогда
		флПроведен = Ложь;
		Для Каждого ТекДок Из МассивОбъектов Цикл
			флПроведен = флПроведен ИЛИ уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекДок, "Проведен");
		КонецЦикла;
		Если НЕ флПроведен Тогда
			Сообщить("Недостаточно полномочий для печати непроведенного документа", СтатусСообщения.Внимание);
			Рез = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

	
///////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДСИСТЕМЫ ЦЕНООБРАЗОВАНИЕ

// Возвращает курсы валют на дату.
//
// Параметры:
//  Валюта       - СправочникСсылка.Валюты - Валюта (элемент справочника "Валюты")
//  ДатаКурса    - Дата - дата, на которую следует получить курс.
//
// Возвращаемое значение: 
//  Структура, содержащая:
//   Курс        - Число - курс валюты,
//   Кратность   - Число - кратность валюты.
//
Функция ПолучитьКурсыВалют(ВалютаНач, ВалютаКон, ДатаКурса) Экспорт
	
	СтруктураНач = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", ВалютаНач));
	СтруктураКон = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", ВалютаКон));
	
	СтруктураКон.Курс = ?(
		СтруктураКон.Курс = 0,
		1,
		СтруктураКон.Курс
	);
	СтруктураКон.Кратность = ?(
		СтруктураКон.Кратность = 0,
		1,
		СтруктураКон.Кратность
	);
	СтруктураКон.Вставить("КурсНач", ?(СтруктураНач.Курс      = 0, 1, СтруктураНач.Курс));
	СтруктураКон.Вставить("КратностьНач", ?(СтруктураНач.Кратность = 0, 1, СтруктураНач.Кратность));
	
	Возврат СтруктураКон;
	
КонецФункции // ПолучитьКурсыВалют()

// Функция пересчитывает сумму из одной валюты в другую
//
// Параметры:      
//	Сумма         - Число - сумма, которую следует пересчитать.
// 	КурсНач       - Число - курс из которого надо пересчитать.
// 	КурсКон       - Число - курс в который надо пересчитать.
// 	КратностьНач  - Число - кратность из которого надо пересчитать 
//                  (по умолчанию = 1).
// 	КратностьКон  - Число - кратность в который надо пересчитать 
//                  (по умолчанию = 1).
//
// Возвращаемое значение: 
//  Число - сумма, пересчитанная в другую валюту.
//
Функция ПересчитатьИзВалютыВВалюту(Сумма, КурсНач, КурсКон,	КратностьНач = 1, КратностьКон = 1) Экспорт
	
	Если (КурсНач = КурсКон) И (КратностьНач = КратностьКон) Тогда
		Возврат Сумма;
	КонецЕсли;
	
	Если КурсНач = 0 ИЛИ КурсКон = 0 ИЛИ КратностьНач = 0 ИЛИ КратностьКон = 0 Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Обнаружен нулевой курс валюты. Пересчет не выполнен.'");
		Сообщение.Сообщить();
		Возврат Сумма;
	КонецЕсли;
	
	СуммаПересчитанная = Окр((Сумма * КурсНач * КратностьКон) / (КурсКон * КратностьНач), 2);
	
	Возврат СуммаПересчитанная;
	
КонецФункции // ПересчитатьИзВалютыВВалюту()

// Рассчитывает сумму НДС исходя из суммы и флагов налогообложения.
//
// Параметры:
//  Сумма        - Число - сумма НДС
//  СуммаВключаетНДС - Булево - признак включения НДС в сумму
//  СтавкаНДС    - СправочникСсылка.СтавкиНДС - ссылка на ставку НДС.
//
// Возвращаемое значение:
//  Число        - пересчитанная сумма НДС.
//
Функция ПересчитатьСуммуПриИзмененииФлаговНДС(Сумма, СуммаВключаетНДС, СтавкаНДС) Экспорт
	
	Ставка = СтавкаНДС.Ставка;
	
	Если СуммаВключаетНДС Тогда
		
		Сумма = (Сумма * (100 + Ставка)) / 100;
		
	Иначе
		
		Сумма = (Сумма * 100) / (100 + Ставка);
		
	КонецЕсли;
	
	Возврат Сумма;
	
КонецФункции // ПересчитатьСуммуПриИзмененииФлаговНДС()

// Выполняет пересчет документа после изменений в форме "Цены и валюта".
//
// Возвращаемое значение:
//  Число        - Полученная цена номенклатуры по прайсу.
//
Функция ПолучитьЦенуНоменклатурыПоВидуЦенКонтрагента(СтруктураДанных) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.ВидЦенКонтрагента.ВалютаЦены КАК ЦеныНоменклатурыВалюта,
	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.ВидЦенКонтрагента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЕСТЬNULL(ЦеныНоменклатурыКонтрагентовСрезПоследних.Цена * КурсВалютыВидЦен.Курс * КурсВалютыДокумента.Кратность /
	|		(КурсВалютыДокумента.Курс * КурсВалютыВидЦен.Кратность) * ЕСТЬNULL(&Коэффициент, 1) / 
	|		ЕСТЬNULL(ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения.Коэффициент, 1), 0) КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(
	|			&ДатаОбработки,
	|			Номенклатура = &Номенклатура
	|				И Характеристика = &Характеристика
	|				И ВидЦенКонтрагента = &ВидЦенКонтрагента) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, ) КАК КурсВалютыВидЦен
	|		ПО ЦеныНоменклатурыКонтрагентовСрезПоследних.ВидЦенКонтрагента.ВалютаЦены = КурсВалютыВидЦен.Валюта,
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента
	|ГДЕ
	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Актуальность";
	
	Запрос.УстановитьПараметр("ДатаОбработки",	 	СтруктураДанных.ДатаОбработки);
	Запрос.УстановитьПараметр("Номенклатура",	 	СтруктураДанных.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",  	СтруктураДанных.Характеристика);
	Запрос.УстановитьПараметр("Коэффициент",	 	СтруктураДанных.Коэффициент);
	Запрос.УстановитьПараметр("ВалютаДокумента", 	СтруктураДанных.ВалютаДокумента);
	Запрос.УстановитьПараметр("ВидЦенКонтрагента",	СтруктураДанных.ВидЦенКонтрагента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Цена = 0;
	Пока Выборка.Следующий() Цикл
		
		Цена = Выборка.Цена;
		
		// Учитываем: сумма включает НДС.
		Если (СтруктураДанных.СуммаВключаетНДС И НЕ Выборка.ЦенаВключаетНДС)
		 ИЛИ (НЕ СтруктураДанных.СуммаВключаетНДС И Выборка.ЦенаВключаетНДС) Тогда
			Цена = ПересчитатьСуммуПриИзмененииФлаговНДС(Цена, СтруктураДанных.СуммаВключаетНДС, СтруктураДанных.СтавкаНДС);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Цена;
	
КонецФункции // ПолучитьЦенуНоменклатурыПоВидуЦен()

// Процедура удаляет проверяемый реквизит из массива проверяемых реквизитов.
Процедура УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, ПроверяемыйРеквизит) Экспорт
	
	НайденныйРеквизит = ПроверяемыеРеквизиты.Найти(ПроверяемыйРеквизит);
	Если ЗначениеЗаполнено(НайденныйРеквизит) Тогда
		ПроверяемыеРеквизиты.Удалить(НайденныйРеквизит);
	КонецЕсли;
	
КонецПроцедуры // УдалитьПроверяемыйРеквизит()

// Выводит сообщение об ошибке заполнения поля.
//
Процедура СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения, ИмяТабличнойЧасти = Неопределено, НомерСтроки = Неопределено, 
		Поле = Неопределено, Отказ = Ложь) Экспорт
		
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = ТекстСообщения;

	Если ИмяТабличнойЧасти <> Неопределено Тогда
		Сообщение.Поле = ИмяТабличнойЧасти + "[" + (НомерСтроки - 1) + "]." + Поле;
	ИначеЕсли ЗначениеЗаполнено(Поле) Тогда
		Сообщение.Поле = Поле;
	КонецЕсли;

	Сообщение.УстановитьДанные(ЭтотОбъект);
	Сообщение.Сообщить();

	Отказ = Истина;
	
КонецПроцедуры // СообщитьОбОшибке()


///////////////////////////////////////////////////////////////////////////////////////////////////
// КОНТРАГЕНТЫ И ДОГОВОРЫ

// Функция формирует структуру для заполнения документа при изменении контрагента
//
// Параметры
//  ДанныеДляЗаполнения                      – данные для заполнения документа 
//  СтруктураПараметровДляПолученияДоговора  – структура параметров для получения договора контрагента
//
// Возвращаемое значение:
//   Структура                               – значения для заполнения документа
//
Функция ПриИзмененииЗначенияКонтрагента(ДанныеДляЗаполнения, СтруктураПараметровДляПолученияДоговора) Экспорт
	ЗначенияДляЗаполнения = Новый Структура();
	ДоговорКонтрагента = уатОбщегоНазначенияТиповыеСервер.уатПолучитьДоговорПоОрганизацииИКонтрагенту(
		ДанныеДляЗаполнения.Организация, ДанныеДляЗаполнения.Контрагент, СтруктураПараметровДляПолученияДоговора);
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ЗначенияДляЗаполнения.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	Иначе
		ЗначенияДляЗаполнения.Вставить("ДоговорКонтрагента", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	КонецЕсли;
	Возврат ЗначенияДляЗаполнения;
КонецФункции // ПриИзмененииЗначенияКонтрагента()


///////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЧЕЕ

// проверка того что БД "файловая"
//
// Параметры:
//  СтрокаСоединенияСБД - строка адреса расположения БД
//
// Возвращаемое значение:
//  Булево - признак файловой БД
Функция ОпределитьЭтаИнформационнаяБазаФайловая(СтрокаСоединенияСБД = "") Экспорт
			
	СтрокаСоединенияСБД = ?(ПустаяСтрока(СтрокаСоединенияСБД), СтрокаСоединенияИнформационнойБазы(), СтрокаСоединенияСБД);
	
	// в зависимости от того файловый это вариант БД или нет немного по-разному путь в БД формируется
	ПозицияПоиска = Найти(Врег(СтрокаСоединенияСБД), "FILE=");
	
	Возврат ПозицияПоиска = 1;	
	
КонецФункции

// Возвращает список всех возможных упаковок номенклатуры
//
Функция ПолучитьУпаковкиНоменклатуры(Номенклатура) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НаборУпаковок", Номенклатура.НаборУпаковок);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ссылка
	|ИЗ
	|(ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|ГДЕ
	|	УпаковкиНоменклатуры.Владелец = &НаборУпаковок
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|ГДЕ
	|	УпаковкиНоменклатуры.Владелец = &Номенклатура
	|) КАК тбл";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

// Функция возвращает значение константы уатИспользоватьУчетБилетовИВыручки
Функция уатИспользоватьУчетБилетовИВыручки() Экспорт
	
	Возврат Константы.уатИспользоватьУчетБилетовИВыручки.Получить();
	
КонецФункции // уатИспользоватьУчетБилетовИВыручки()


///////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ НАСТРОЙКИ ПОЛЕЙ ВВОДА, ИМЕЮЩИХ СОСТАВНОЙ ТИП
//Добавлены для корректной работы в спарках с типовыми конфигурациями

// Процедура ограничивает тип ввода контактных лиц
//
Процедура НастроитьПолеКонтактноеЛицо(ЭлементФормы) Экспорт
	ЭлементФормы.ОграничениеТипа = Новый ОписаниеТипов("Строка, СправочникСсылка.КонтактныеЛицаПартнеров");
КонецПроцедуры

// Процедура ограничивает тип ввода подразделений и добавляет
//связь по владельцу-организации, если она указана
//
Процедура НастроитьПолеПодразделение(ЭлементПодразделение, ПутьКДаннымОрганизация = "", ОписаниеТиповПодразделения = Неопределено) Экспорт
	//ограничение ввода по типу
	Если ОписаниеТиповПодразделения = Неопределено Тогда
		ЭлементПодразделение.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
	Иначе
		мсвТипов = ОписаниеТиповПодразделения.Типы();
		ИндексНенужногоТипа = мсвТипов.Найти(Тип("СправочникСсылка.ПодразделенияОрганизаций"));
		мсвТипов.Удалить(ИндексНенужногоТипа);
		ЭлементПодразделение.ОграничениеТипа = Новый ОписаниеТипов(мсвТипов);
	КонецЕсли;
КонецПроцедуры

// Процедура ограничивает тип ввода договора контрагента
//и добавляет отбор по организации и контрагенту
//
Процедура НастроитьПолеДоговорКонтрагента(ЭлементДоговор, ПутьКДаннымОрганизация, ПутьКДаннымКонтрагент, ВидДоговора = Неопределено) Экспорт
	//фильтруем программно по виду договора - сделано для корректной отработки фильтра в объед. конф. с БП и УТ
	Если ЗначениеЗаполнено(ВидДоговора) Тогда
		мсвПараметрыВыбора = Новый Массив;
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("ТипДоговора", "ДоговорыКонтрагентов") Тогда
			мсвПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ТипДоговора", ПредопределенноеЗначение("Перечисление.ТипыДоговоров." + ВидДоговора)));
		Иначе
			мсвПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов." + ВидДоговора)));
		КонецЕсли;
		ЭлементДоговор.ПараметрыВыбора = Новый ФиксированныйМассив(мсвПараметрыВыбора);
	КонецЕсли;
	
	Отбор = Новый Массив;
	Отбор.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", ПутьКДаннымОрганизация, РежимИзмененияСвязанногоЗначения.Очищать));
	Отбор.Добавить(Новый СвязьПараметраВыбора("Отбор.Контрагент", ПутьКДаннымКонтрагент, РежимИзмененияСвязанногоЗначения.Очищать));
	ЭлементДоговор.СвязиПараметровВыбора = Новый ФиксированныйМассив(Отбор);
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ПЕЧАТНЫХ ФОРМ

// Функция формирует сведения об указанном ЮрФизЛице. К сведениям относятся -
// наименование, адрес, номер телефона, банковские реквизиты.
//
// Параметры: 
//  ЮридическоеФизическоеЛицо    - организация или физическое лицо, о котором собираются
//                 сведения
//  ДатаПериода  - дата, на которую выбираются сведения о ЮрФизЛице
//  ДляФизЛицаТолькоИнициалы - Для физ. лица выводить только инициалы имени и
//                 отчества.
//
// Возвращаемое значение:
//  Сведения - собранные сведения.
//
Функция СведенияОЮрФизЛице(ЮридическоеФизическоеЛицо, ДатаПериода, ДляФизЛицаТолькоИнициалы = Истина, 
		БанковскийСчет = Неопределено) Экспорт

	Сведения = Новый Структура("Представление, ПолноеНаименование, КодПоОКПО, ИНН, КПП, Телефоны, ЮридическийАдрес, 
								|Банк, БИК, КоррСчет, НомерСчета, АдресБанка");
	Запрос   = Новый Запрос;
	Данные   = Неопределено;

	Если НЕ ЗначениеЗаполнено(ЮридическоеФизическоеЛицо) Тогда
		Возврат Сведения;
	ИначеЕсли ТипЗнч(ЮридическоеФизическоеЛицо) = Тип("Строка") Тогда
		Сведения.Вставить("Представление",      ЮридическоеФизическоеЛицо);
		Сведения.Вставить("полноеНаименование", ЮридическоеФизическоеЛицо);
		Возврат Сведения;
	КонецЕсли;

	Если БанковскийСчет = Неопределено ИЛИ Не ЗначениеЗаполнено(БанковскийСчет) Тогда
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("ОсновнойБанковскийСчет", ЮридическоеФизическоеЛицо) Тогда
			ТекБанковскийСчет = ЮридическоеФизическоеЛицо.ОсновнойБанковскийСчет;
		Иначе
			ТекБанковскийСчет = Неопределено;
		КонецЕсли;
	Иначе
		ТекБанковскийСчет = БанковскийСчет;
	КонецЕсли;

	// Выберем основные сведения о контрагенте и банковском счете
	Если ТекБанковскийСчет = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ТекБанковскийСчет.БанкДляРасчетов) Тогда
		ИмяРеквизитаБанка = "Банк";
	Иначе
		ИмяРеквизитаБанка = "БанкДляРасчетов";
	КонецЕсли;

	Если ТипЗнч(ЮридическоеФизическоеЛицо) = Тип("СправочникСсылка.Организации") Тогда
		ИмяСправочника = "Организации";
	ИначеЕсли ТипЗнч(ЮридическоеФизическоеЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
		ИмяСправочника = "Контрагенты";
	Иначе
		Возврат Сведения;
	КонецЕсли;

	Запрос.УстановитьПараметр("ПарЮридическоеФизическоеЛицо", ЮридическоеФизическоеЛицо);
	Запрос.УстановитьПараметр("ПарБанковскийСчет", ТекБанковскийСчет);

	Если НЕ ЗначениеЗаполнено(ТекБанковскийСчет) Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Представление      КАК Наименование,
		|	Организации.НаименованиеПолное КАК ПолноеНаименование,
		|	Организации.ИНН                КАК ИНН,
		|	Организации.КПП                КАК КПП,
		|	Организации.КодПоОКПО          КАК КодПоОКПО,";
		Если ИмяСправочника = "Организации" Тогда
			Запрос.Текст = Запрос.Текст + "
			|	Организации.ОГРН           КАК ОГРН,";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|	""""                           КАК НомерСчета,
		|	""""                           КАК Банк,
		|	""""                           КАК БИК,
		|	""""                           КАК КоррСчет,
		|	""""                           КАК АдресБанка
		|ИЗ
		|	Справочник."+ИмяСправочника+" КАК Организации
		|
		|ГДЕ
		|	Организации.Ссылка = &ПарЮридическоеФизическоеЛицо";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Представление                      КАК Наименование,
		|	Организации.НаименованиеПолное                 КАК ПолноеНаименование,
		|	Организации.ИНН                                КАК ИНН,
		|	Организации.КПП                                КАК КПП,
		|	Организации.КодПоОКПО                          КАК КодПоОКПО,";
		Если ИмяСправочника = "Организации" Тогда
			Запрос.Текст = Запрос.Текст + "
			|	Организации.ОГРН                           КАК ОГРН,";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|	БанковскиеСчета.НомерСчета                     КАК НомерСчета,
		|	БанковскиеСчета."+ИмяРеквизитаБанка+"          КАК Банк,
		|	БанковскиеСчета."+ИмяРеквизитаБанка+".Код      КАК БИК,
		|	БанковскиеСчета."+ИмяРеквизитаБанка+".КоррСчет КАК КоррСчет,
		|	БанковскиеСчета."+ИмяРеквизитаБанка+".Адрес    КАК АдресБанка
		|ИЗ
		|	Справочник."+ИмяСправочника+" КАК Организации,
		|	Справочник.БанковскиеСчета    КАК БанковскиеСчета
		|
		|ГДЕ
		|	Организации.Ссылка       = &ПарЮридическоеФизическоеЛицо
		|	И БанковскиеСчета.Ссылка = &ПарБанковскийСчет";
	КонецЕсли;

	Данные = Запрос.Выполнить().Выбрать();
	Данные.Следующий();

	Если ЮридическоеФизическоеЛицо.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		Сведения.Вставить("КодПоОКПО", Данные.КодПоОКПО);
		Сведения.Вставить("КПП",       Данные.КПП);
	Иначе
		Сведения.Вставить("КодПоОКПО", "");
		Сведения.Вставить("КПП",       "");
	КонецЕсли;

	Сведения.Вставить("ПолноеНаименование", Данные.ПолноеНаименование);

	Если Данные <> Неопределено Тогда
		Если ТипЗнч(ЮридическоеФизическоеЛицо) = Тип("СправочникСсылка.Организации") Тогда
			
			Телефон = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
			ЮрАдрес = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
			ФактАдрес = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
			
		ИначеЕсли ТипЗнч(ЮридическоеФизическоеЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			
			Телефон = Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица;
			ЮрАдрес = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
			ФактАдрес = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
			
		ИначеЕсли ТипЗнч(ЮридическоеФизическоеЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
			
			Телефон = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
			ЮрАдрес = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
			ФактАдрес = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
			
			ПчАдрес = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
			Сведения.Вставить("ПочтовыйАдрес", ПолучитьКонтактнуюИнформацию(ЮридическоеФизическоеЛицо, ПчАдрес));
			
		Иначе
			
			Телефон = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
			ЮрАдрес = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
			ФактАдрес = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
			
		КонецЕсли;
		
		Сведения.Вставить("Представление",    Данные.Наименование);
		Сведения.Вставить("ИНН",              Данные.ИНН);
		Сведения.Вставить("Телефоны",         ПолучитьКонтактнуюИнформацию(ЮридическоеФизическоеЛицо, Телефон));
		Сведения.Вставить("НомерСчета",       Данные.НомерСчета);
		Сведения.Вставить("Банк",             Данные.Банк);
		Сведения.Вставить("БИК",              Данные.БИК);
		Сведения.Вставить("АдресБанка",       Данные.АдресБанка);
		Сведения.Вставить("КоррСчет",         Данные.КоррСчет);
		Сведения.Вставить("ЮридическийАдрес", ПолучитьКонтактнуюИнформацию(ЮридическоеФизическоеЛицо, ЮрАдрес));
		Сведения.Вставить("ФактическийАдрес", ПолучитьКонтактнуюИнформацию(ЮридическоеФизическоеЛицо, ФактАдрес));
		Если ИмяСправочника = "Организации" Тогда
			Сведения.Вставить("ОГРН",             СокрЛП(Данные.ОГРН));
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(Сведения.ПолноеНаименование) Тогда
			Сведения.ПолноеНаименование = Сведения.Представление;
		КонецЕсли;
	КонецЕсли;

	Возврат Сведения;

КонецФункции // СведенияОЮрФизЛице()

// Функция находит актуальное значение адреса в контакной информации.
//
// Параметры:
//  Объект       - СправочникСсылка, объект контактной информации
//  ТипАдреса    - тип контактной информации.
//
// Возвращаемое значение
//  Строка - представление найденного адреса.
//                                          
Функция ПолучитьКонтактнуюИнформацию(ОбъектКонтактнойИнформации, ВидИнформации) Экспорт
    
	Если ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.Организации") Тогда 		
		ТаблицаИсточник = "Организации";		
	ИначеЕсли ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.ФизическиеЛица") Тогда		
		ТаблицаИсточник = "ФизическиеЛица";
	ИначеЕсли ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.Контрагенты") Тогда		
		ТаблицаИсточник = "Контрагенты";
	Иначе 
		Возврат "";	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Объект", ОбъектКонтактнойИнформации);
	Запрос.УстановитьПараметр("Вид"   , ВидИнформации);
	
	Запрос.Текст = "ВЫБРАТЬ 
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	Справочник." + ТаблицаИсточник + ".КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Вид = &Вид
	|	И КонтактнаяИнформация.Ссылка = &Объект";

	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	Иначе
		Возврат РезультатЗапроса.Выгрузить()[0].Представление;
	КонецЕсли;

	
КонецФункции // ПолучитьАдресИзКонтактнойИнформации()

// Процедура устанавливает свойства Защита и ТолькоПросмотр для табл. документов
//согласно настройкам пользователя УАТ
//
Процедура УстановитьРедактированиеПечатныхФормДокумента(КоллекцияПечатныхФорм) Экспорт
	
	// не используется в новой редакции
	
	Заглушка = Истина;
	
КонецПроцедуры

//Функция возвращает наименование услуги для печати
//		Параметры: 
// Номенклатура - СправочникСсылка.Номенклатура
// Содержание - Строка.
//	 	Возвращаемое значение:
// Строка - наименование услуги.
Функция ПолучитьНаименованиеУслугиДляПечати(Номенклатура,Содержание) Экспорт
	Если ЗначениеЗаполнено(Содержание) Тогда
		Возврат Содержание;
	ИначеЕсли ЗначениеЗаполнено(Номенклатура.НаименованиеПолное) Тогда
		Возврат Номенклатура.НаименованиеПолное;
	Иначе
		Возврат Номенклатура.Наименование;
	КонецЕсли;
КонецФункции



/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ПРАВАМИ

// Процедура выполняет проверку прав пользователя перед записью элемента 
// справочника
//
// Параметры:
//  Объект       - записываемый объект
//  Отказ        - признак отказа записи объекта
//  ЭтаФорма     - 
//  ЗначениеПрав - КЭШ содержащий права текущего пользователя
Процедура ПроверкаПравПередЗаписьюВСправочниках(Объект, Отказ) Экспорт
	// Проверка доступа документа по текущему пользователю
	//++ Рарус Лимаренко 27.06.2018
	//	Если уатПраваИНастройки.уатПраво("ПроверкаДоступаКСправочникамИДокументам") Тогда	
	//	уатПраваИНастройки.уатПроверкаПраваДоступаКСправочникам(Объект, Отказ);
	//КонецЕсли;				
	//Если НЕ (Объект.ПометкаУдаления = Объект.Ссылка.ПометкаУдаления) Тогда
	//	Если НЕ уатПраваИНастройки.уатПраво("УдалениеЧерезПометку") Тогда
	//		Сообщить("У Вас нет прав на изменение пометки удаления!", СтатусСообщения.Важное); 
	//		Отказ = Истина;
	//	КонецЕсли;
	//КонецЕсли;
	//-- Рарус Лимаренко 27.06.2018

КонецПроцедуры

// Процедура выполняет проверку прав пользователя перед записью документа 
// справочника
//
// Параметры:
//  Объект       - записываемый объект
//  Отказ        - признак отказа записи объекта
//  ЭтаФорма     - 
//  ЗначениеПрав - КЭШ содержащий права текущего пользователя
Процедура ПроверкаПравПередЗаписьюВДокументах(Объект, Отказ) Экспорт
	// можно ли изменять уже проведенные документы
	//++ Рарус Лимаренко 27.06.2018	
	//Если Объект.Проведен Тогда
	//	Если НЕ уатПраваИНастройки.уатПраво("РедактированиеПроведенныхДокументов") Тогда
	//		Сообщить("У Вас нет прав изменять проведенные документы!", СтатусСообщения.Важное);
	//		Отказ = Истина;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//// Проверка доступа документа по текущему пользователю
	//Если уатПраваИНастройки.уатПраво("ПроверкаДоступаКСправочникамИДокументам") Тогда
	//	уатПраваИНастройки.уатПроверкаПраваДоступаКДокументам(Объект, Отказ);
	//КонецЕсли;		

//	Если НЕ (Объект.ПометкаУдаления = Объект.Ссылка.ПометкаУдаления) Тогда
//		Если НЕ уатПраваИНастройки.уатПраво("УдалениеЧерезПометку") Тогда
//			Сообщить("У Вас нет прав на изменение пометки удаления!", СтатусСообщения.Важное); 
//			Отказ = Истина;
//		КонецЕсли;
//	КонецЕсли;
	//-- Рарус Лимаренко 27.06.2018
КонецПроцедуры
