////////////////////////////////////////////////////////////////////////////////
// Оперативный мониторинг (сервер)
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

#Область ФункцииОбщегоНазначения

// Вычисляет промежуточную точку по правилам простых пропорций
//
Функция ПолучитьТочкуНаДату(Точка1,Точка2,НаДату)
	
	Результат = Новый Структура();
	Результат.Вставить("Период",НаДату);
	Результат.Вставить("Широта",0);
	Результат.Вставить("Долгота",0);
	Результат.Вставить("Скорость",0);
	Результат.Вставить("Направление",0);
		
	Если НЕ (Точка1.Период < НаДату И НаДату < Точка2.Период) Тогда	
		Возврат Результат;
		
	КонецЕсли;
	
	x1 = Точка1.Долгота;
	y1 = Точка1.Широта;
	x2 = Точка2.Долгота;
	y2 = Точка2.Широта;
	
	t1 = Точка1.Период;
	t2 = Точка2.Период;
	
	dT = t2 - t1;
	dT3 = НаДату - t1;
		
	Результат.Широта = (y2-y1)*dT3/dT + y1;
	Результат.Долгота = (x2-x1)*dT3/dT + x1;
	Результат.Скорость = (Точка1.Скорость + Точка2.Скорость)/2;
	
	Возврат Результат;	

КонецФункции // ПолучитьТочкуНаДату()

Функция УсловиеНазначеннойКомандыВыполняется(ДанныеОбъекта, Показатель, ВидСравнения, Значение)
	
	ЛевоеЗначение = Неопределено;
	
	Если Показатель = "Состояние"
		ИЛИ Показатель = "Скорость"
		ИЛИ Показатель = "Направление" 
		ИЛИ Показатель = "ОтсутствуютДанныеМинуты" 
		ИЛИ Показатель = "ОтсутствуютДанныеЧасы" Тогда
		
		ЛевоеЗначение = ДанныеОбъекта[Показатель];		
		
	ИначеЕсли ТипЗнч(Показатель) = Тип("СправочникСсылка.ItobНазначенияДатчиков") Тогда
		
		КодДатчика = ДанныеОбъекта["КодДатчикаНазначение"+СокрЛП(Показатель.Код)];
		СтруктураДанныеДатчиков = ItobОбщегоНазначенияКлиентСервер.ПреобразоватьСтрокуВДанныеДатчиков(ДанныеОбъекта.ДанныеДатчиков);
		ЛевоеЗначение = СтруктураДанныеДатчиков[КодДатчика];
		
	КонецЕсли;
	
	Попытка
		
		Если ВидСравнения = ПредопределенноеЗначение("Перечисление.ItobВидыСравнения.НеРавно") Тогда
			
			Результат = Вычислить("НЕ (ЛевоеЗначение = Значение)");
			
		Иначе
			Результат = Вычислить("ЛевоеЗначение "+Строка(ВидСравнения)+" Значение");
			
		КонецЕсли;	
		
	Исключение
		Результат = Ложь;
	
	КонецПопытки;
	
	Возврат Результат;	

КонецФункции // УсловиеНазначеннойКомандыВыполняется()

// Процедура добавляет колонки со значениями датчиков 
//
Процедура ДобавитьКолонкиДатчиков(Источник, Приемник)
	
	Для Счетчик = 0 По Источник.Колонки.Количество()-1 Цикл
		
		Если Найти(Источник.Колонки[Счетчик].Имя, "ЗначениеДатчика") > 0 Тогда
			
			Если Приемник.Колонки.Найти(Источник.Колонки[Счетчик].Имя) = Неопределено Тогда
				Приемник.Колонки.Добавить(Источник.Колонки[Счетчик].Имя, Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(20,0)));				
			
			КонецЕсли;			
		
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

Функция СформироватьПараметрыОбработкиДанных(МинимальнаяСкоростьДвижения,МинимальноеВремяСтоянки,МинимальныйИнтервалОтправкиДанных,
			ПрофильЗаписиДанныхДатчиков,ОтключитьНормализациюТочекДвижения,ДопустимыйРадиусСтоянки,МаксимальнаяВалиднаяСкоростьДвижения)
	Результат = Новый Структура();
	Результат.Вставить("МинимальнаяСкоростьДвижения", МинимальнаяСкоростьДвижения);
	Результат.Вставить("МинимальноеВремяСтоянки", МинимальноеВремяСтоянки);
	Результат.Вставить("МинимальныйИнтервалОтправкиДанных", МинимальныйИнтервалОтправкиДанных);
	Результат.Вставить("ПрофильЗаписиДанныхДатчиков", ПрофильЗаписиДанныхДатчиков);
	Результат.Вставить("ОтключитьНормализациюТочекДвижения", ОтключитьНормализациюТочекДвижения);
	Результат.Вставить("ДопустимыйРадиусСтоянки", ДопустимыйРадиусСтоянки);
	Результат.Вставить("МаксимальнаяВалиднаяСкоростьДвижения", МаксимальнаяВалиднаяСкоростьДвижения);
	
	Возврат Результат;
КонецФункции // СформироватьПараметрыОбработкиДанных()

#КонецОбласти

#Область ФункцииРаботыССервисомCsmCvs

// Возвращает версию сервиса CsmSvc
//
Функция ПолучитьВерсиюCsmSvc()
		
	Сервер = ПараметрыСеанса.ItobАдресCsmSvc.Получить("СерверАдрес");
	Порт   = ПараметрыСеанса.ItobАдресCsmSvc.Получить("СерверПорт");
	
	ИмяВременногоФайла = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор()) + ".html";
	
	Результат = "";
	
	HTTP = Новый HTTPСоединение(Сервер,Порт);
	Попытка
		HTTP.Получить("Version",  ИмяВременногоФайла);
		
		ТекстДок = Новый ТекстовыйДокумент;
		ТекстДок.Прочитать(ИмяВременногоФайла);
		
		Результат = ТекстДок.ПолучитьСтроку(1);
		
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'CsmSvc'","ru"),УровеньЖурналаРегистрации.Ошибка,,,НСтр("ru = 'Ошибка обращения к странице /Version'"));
	КонецПопытки;
	
	УдалитьФайлы(ИмяВременногоФайла);	
	
	Возврат Результат;

КонецФункции // ПолучитьВерсиюCsmSvc()

#КонецОбласти

#Область ФункцииВзаимодействияСКартой

// Возвращает ссылку на html страницу карты
//
Функция ПолучитьСсылкуНаСтраницуКарты(СодержаниеСтраницы)
	
	ИмяВременногоФайла = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор()) + ".html";
	ИмяФайлаОтвета = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор()) + ".txt";
	
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.УстановитьТекст(СодержаниеСтраницы);
	ТекстДок.Записать(ИмяВременногоФайла);		
		
	Сервер = ПараметрыСеанса.ItobАдресCsmSvc.Получить("СерверАдрес");
	Порт   = ПараметрыСеанса.ItobАдресCsmSvc.Получить("СерверПорт");
	
	СсылкаБазы = ПолучитьНавигационнуюСсылкуИнформационнойБазы();
	Если НРег(Лев(СсылкаБазы,5)) = "https" Тогда
		Протокол = "https";
	Иначе
		Протокол = "http";
	КонецЕсли;
	
	АдресСервераОбращениеКлиента = ПараметрыСеанса.ItobАдресCsmSvc.Получить("КлиентАдрес") + ":"
			+ Формат(ПараметрыСеанса.ItobАдресCsmSvc.Получить("КлиентПорт"),"ЧГ=0");
	
	Результат = Протокол+"://" + АдресСервераОбращениеКлиента + "/map/map.html";
	
	HTTP = Новый HTTPСоединение(Сервер,Порт);
	Попытка
		HTTP.ОтправитьДляОбработки(ИмяВременногоФайла, "/SetMapData", ИмяФайлаОтвета);
		
		ТекстДок2 = Новый ТекстовыйДокумент;
		ТекстДок2.Прочитать(ИмяФайлаОтвета);
		
		Результат = Протокол+"://" + АдресСервераОбращениеКлиента + ТекстДок2.ПолучитьСтроку(1);
				
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка установки карты:'")+" "+ОписаниеОшибки());
	КонецПопытки;
	
	ТекстДок = Неопределено;
	ТекстДок2 = Неопределено;
	
	УдалитьФайлы(ИмяВременногоФайла);
	УдалитьФайлы(ИмяФайлаОтвета);
	
	Возврат Результат;	

КонецФункции // ПолучитьСсылкуНаСтраницуКарты()

// Возвращает контент HTML страницы карты
//
Функция ПолучитьКонтентКарты()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ItobГеографическиеКарты.Наименование КАК Наименование,
	               |	ItobГеографическиеКарты.Сервер,
	               |	ItobГеографическиеКарты.Правообладатель,
	               |	ItobГеографическиеКарты.СайтПравообладателя,
	               |	ItobГеографическиеКарты.Атрибуты,
	               |	ItobГеографическиеКарты.СлойПодложки,
	               |	ItobГеографическиеКарты.Идентификатор,
	               |	ItobГеографическиеКарты.СекцияHEAD,
	               |	ItobГеографическиеКарты.НестандартнаяПроекция,
	               |	ItobГеографическиеКарты.СлойПодложки.Атрибуты КАК СлойПодложкиАтрибуты,
	               |	ItobГеографическиеКарты.СлойПодложки.НестандартнаяПроекция КАК СлойПодложкиНестандартнаяПроекция,
	               |	ItobГеографическиеКарты.СлойПодложки.Сервер КАК СлойПодложкиСервер
	               |ИЗ
	               |	Справочник.ItobГеографическиеКарты КАК ItobГеографическиеКарты
	               |ГДЕ
	               |	(НЕ ItobГеографическиеКарты.ПометкаУдаления)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ItobГеографическиеКарты.Сортировка,
	               |	Наименование";
				   
	Результат = "";
	ТекстHEAD = "";
	
	ИспользоватьIHTS = ХранилищеОбщихНастроек.Загрузить("НастройкиКарты", "ИспользоватьIHTS");
	АдресIHTS        = ХранилищеОбщихНастроек.Загрузить("НастройкиКарты", "АдресIHTS");
	Если ПустаяСтрока(АдресIHTS) И (ИспользоватьIHTS = Истина) Тогда
		ИспользоватьIHTS = Ложь;		
	
	КонецЕсли;
	
	Если ИспользоватьIHTS <> Истина Тогда
		ИспользоватьIHTS = Константы.ItobИспользоватьДляВсехIHTS.Получить();
		АдресIHTS        = Константы.ItobАдресIHTS.Получить();	
		Если ПустаяСтрока(АдресIHTS) И (ИспользоватьIHTS = Истина) Тогда
			ИспользоватьIHTS = Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
	СсылкаБазы = ПолучитьНавигационнуюСсылкуИнформационнойБазы();
	Если НРег(Лев(СсылкаБазы,5)) = "https" Тогда
		Протокол = "https";
	Иначе
		Протокол = "http";
	КонецЕсли;
		
	Счетчик = 1;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		АтрибутыКарты = Выборка.Атрибуты;
		Если ИспользоватьIHTS = Истина Тогда
			АтрибутыКарты = СтрЗаменить(АтрибутыКарты, "getTileAddress", "getTileAddressCustom");
			АтрибутыКарты = 
				АтрибутыКарты+",
			    |getTileAddress: function(bounds,x,y,z) {
				|    return """+Протокол+"://"+АдресIHTS+"/TileProxy?itob_host="" + this.getTileAddressCustom(bounds,x,y,z).replace(new RegExp(""&"",'g'),""%26"") + ""&itob_map_id="+Выборка.Идентификатор+"&itob_x="" + x + ""&itob_y="" + y + ""&itob_z="" + z; 
				|}";
		
		КонецЕсли;
		
		Если НЕ Выборка.СлойПодложки.Пустая() Тогда
			
			АтрибутыПодложки = Выборка.СлойПодложкиАтрибуты;
			Если ИспользоватьIHTS = Истина Тогда
				АтрибутыПодложки = СтрЗаменить(АтрибутыПодложки, "getTileAddress", "getTileAddressCustom");
				АтрибутыПодложки = 
					АтрибутыПодложки+",
				    |getTileAddress: function(bounds,x,y,z) {
					|    return """+Протокол+"://"+АдресIHTS+"/TileProxy?itob_host="" + this.getTileAddressCustom(bounds,x,y,z).replace(new RegExp(""&"",'g'),""%26"") + ""&itob_map_id="+Выборка.СлойПодложки.Идентификатор+"&itob_x="" + x + ""&itob_y="" + y + ""&itob_z="" + z; 
					|}";				
			
			КонецЕсли;			
			
			ИмяСлоя = "Layer"+Формат(Счетчик,"ЧГ=0");
			
			Если Выборка.СлойПодложкиНестандартнаяПроекция Тогда
				ТекАтрибуты = СокрЛП(Выборка.СлойПодложкиАтрибуты);
				Если Прав(ТекАтрибуты,1) = ")" Тогда
					ТекАтрибуты = СокрЛП(Лев(ТекАтрибуты,СтрДлина(ТекАтрибуты)-1));
					Если Прав(ТекАтрибуты,1) = "}" Тогда
						ТекАтрибуты = СокрЛП(Лев(ТекАтрибуты,СтрДлина(ТекАтрибуты)-1));
						ТекАтрибуты = ТекАтрибуты+Символы.ПС+",top_layer: "+ИмяСлоя+"})"					
					КонецЕсли;				
				КонецЕсли;
				СтрСкриптКартыПодложка = ТекАтрибуты+";";
			Иначе
				СтрСкриптКартыПодложка = 
					"new OpenLayers.Layer.MapEPSG_900913('"+СтрЗаменить(Выборка.Наименование,"'","''")+"',
					|	'"+СтрЗаменить(Выборка.СлойПодложкиСервер,"'","''")+"',
					|	{ 
					|		attribution: '<a href="""+Выборка.СайтПравообладателя+""">"+Выборка.Правообладатель+"</a>',
					|		top_layer: "+ИмяСлоя+"
					|		"+?(ПустаяСтрока(АтрибутыПодложки),"",",")+АтрибутыПодложки+"					
					|	});";
					
			КонецЕсли;				
				
			Если Выборка.НестандартнаяПроекция Тогда
				ТекАтрибуты = СокрЛП(Выборка.Атрибуты);
				Если Прав(ТекАтрибуты,1) = ")" Тогда
					ТекАтрибуты = СокрЛП(Лев(ТекАтрибуты,СтрДлина(ТекАтрибуты)-1));
					Если Прав(ТекАтрибуты,1) = "}" Тогда
						ТекАтрибуты = СокрЛП(Лев(ТекАтрибуты,СтрДлина(ТекАтрибуты)-1));
						ТекАтрибуты = ТекАтрибуты+Символы.ПС+",isBaseLayer:false, visibility:false, displayInLayerSwitcher:false })"
					КонецЕсли;				
				КонецЕсли;				
				СтрСкриптКарты = ТекАтрибуты+";";
			Иначе
				СтрСкриптКарты = 
					"new OpenLayers.Layer.MapEPSG_900913('"+ИмяСлоя+"',
					|	'"+СтрЗаменить(Выборка.Сервер,"'","''")+"',
					|	{ 
					|		attribution: '<a href="""+Выборка.СайтПравообладателя+""">"+Выборка.Правообладатель+"</a>'
					|		,isBaseLayer:false, visibility:false, displayInLayerSwitcher:false
					|		"+?(ПустаяСтрока(АтрибутыКарты),"",",")+АтрибутыКарты+"					
					|	});";
					
			КонецЕсли;
			
			
			Результат = Результат + "	
			    |var "+ИмяСлоя+" = "+СтрСкриптКарты+"
				|layers.push("+ИмяСлоя+");
				|				
				|var Base"+ИмяСлоя+" = "+СтрСкриптКартыПодложка+"				
				|Base"+ИмяСлоя+".setName('"+СтрЗаменить(Выборка.Наименование,"'","''")+"');
				|
				|LayersWithBackingLayers.push(Base"+ИмяСлоя+");
				|layers.push(Base"+ИмяСлоя+");";
			
				
			Счетчик = Счетчик+1;
			
		Иначе
			
			Если Выборка.НестандартнаяПроекция Тогда
				СтрСкриптКарты = Выборка.Атрибуты;				
			Иначе				
				СтрСкриптКарты = 
					"new OpenLayers.Layer.MapEPSG_900913('"+СтрЗаменить(Выборка.Наименование,"'","''")+"',
					|	'"+СтрЗаменить(Выборка.Сервер,"'","''")+"',
					|	{ 
					|		attribution: '<a href="""+Выборка.СайтПравообладателя+""">"+Выборка.Правообладатель+"</a>'
					|		"+?(ПустаяСтрока(АтрибутыКарты),"",",")+АтрибутыКарты+"					
					|	})";
				
			КонецЕсли;
			
			Результат = Результат + "	
				|layers.push("+СтрСкриптКарты+"				
				|);";
	
				
		КонецЕсли;
			
		Если НЕ ПустаяСтрока(Выборка.СекцияHEAD) Тогда
			ТекстHEAD = ?(ТекстHEAD="","",ТекстHEAD+Символы.ПС) + СокрЛП(Выборка.СекцияHEAD);				
			
		КонецЕсли;
	
	КонецЦикла;
		
	Если ПустаяСтрока(Результат) Тогда
		Результат = 
			"layers.push(new OpenLayers.Layer.MapEPSG_900913(""OSM (Mapnik)"",
	        |        	""http://tile.openstreetmap.org/"",
			|			{ 
			|				attribution: '<a href=""http://www.openstreetmap.org/"">OpenStreetMap</a>',
			|				getTileAddress: function(bounds,x,y,z) {
			|					var subs = [ 'a', 'b', 'c' ];	
			|					return ""http://"" + subs[(x+y)%3] + "".tile.openstreetmap.org/"" + z + ""/"" + x + ""/"" + y + "".png"";
			|				}					
	        |           })				
			|		);";	
	
	КонецЕсли;
		
	Результат = 
		"try {
		|"+Результат+"
		|} catch(err) {}";	
		
	Возврат Новый Структура("КонтентMAPS,КонтентHEAD", Результат, ТекстHEAD);

КонецФункции // ПолучитьКонтентКарты()

#КонецОбласти

#Область ФункцииОбработкиДанныхТрекеров

// Возвращает данные датчика по терминалу
//
Функция ПолучитьДанныеДатчикаПоТерминалу(НачДата, КонДата, Терминал, Датчик, РасширитьГраницыКоличествоЗаписей=0)

	ПараметрыСдвигаВремени = ПолучитьПараметрыСдвигаВремени();
	
	Если ТипЗнч(Датчик) = Тип("Массив") Тогда
		МассивДатчиков = Датчик;
		
	Иначе
		МассивДатчиков = Новый Массив;
		МассивДатчиков.Добавить(Датчик);
	
	КонецЕсли;
		
	Если ItobВызовСервераПовтИсп.ДанныеТерминаловБратьИзБазыIMCS() Тогда
		ШаблонБазовыйЗапрос =  "ВЫБРАТЬ #УсловиеПервые#
			                   |	ДанныеТерминалов.Период,
			                   |	ЕСТЬNULL(ДанныеТерминалов.Широта,0) КАК Широта,
			                   |	ЕСТЬNULL(ДанныеТерминалов.Долгота,0) КАК Долгота,
			                   |	ЕСТЬNULL(ДанныеТерминалов.Скорость,0) КАК Скорость,
			                   |	ЕСТЬNULL(ДанныеТерминалов.Направление,0) КАК Направление,
			                   |	ДанныеТерминалов.ЧислоСпутников,
			                   |	ВЫБОР
			                   |		КОГДА ДанныеТерминалов.ЧислоСпутников < 3
			                   |			ТОГДА ИСТИНА
			                   |		ИНАЧЕ ЛОЖЬ
			                   |	КОНЕЦ КАК НевалидныеДанные,
			                   |	ДанныеТерминалов.ДанныеДатчиков		                   
			                   |ИЗ
			                   |	ВнешнийИсточникДанных.ItobДанныеСервераСбораДанных.Таблица.ItobДанныеТерминаловIMCS КАК ДанныеТерминалов
			                   |ГДЕ
			                   |	#УсловиеПоДате#
			                   |	И ДанныеТерминалов.КодТерминала = &КодТерминала
							   |#Сортировка#";
		
	Иначе
		ШаблонБазовыйЗапрос =  "ВЫБРАТЬ #УсловиеПервые#
			                   |	ДанныеТерминалов.Период,
			                   |	ЕСТЬNULL(ДанныеТерминалов.Широта,0) КАК Широта,
			                   |	ЕСТЬNULL(ДанныеТерминалов.Долгота,0) КАК Долгота,
			                   |	ЕСТЬNULL(ДанныеТерминалов.Скорость,0) КАК Скорость,
			                   |	ЕСТЬNULL(ДанныеТерминалов.Направление,0) КАК Направление,
			                   |	ДанныеТерминалов.ЧислоСпутников,
			                   |	ДанныеТерминалов.НевалидныеДанные,
			                   |	ДанныеТерминалов.ДанныеДатчиков
			                   |ИЗ
			                   |	РегистрСведений.ItobДанныеТерминалов КАК ДанныеТерминалов
			                   |ГДЕ
			                   |	#УсловиеПоДате#
			                   |	И ДанныеТерминалов.Терминал = &Терминал
							   |#Сортировка#";
	
	КонецЕсли;
	
	Если РасширитьГраницыКоличествоЗаписей > 0 Тогда
		ТекстЗапроса1 = 
			"ВЫБРАТЬ
			|	* 
			|ИЗ 
			|	("+ШаблонБазовыйЗапрос+") КАК ВложенныйЗапросНачалоИнтервала";
		ТекстЗапроса1 = СтрЗаменить(ТекстЗапроса1,"#УсловиеПервые#","ПЕРВЫЕ "+Формат(РасширитьГраницыКоличествоЗаписей,"ЧГ=0"));
		ТекстЗапроса1 = СтрЗаменить(ТекстЗапроса1,"#УсловиеПоДате#","ДанныеТерминалов.Период < &НачДата");
		ТекстЗапроса1 = СтрЗаменить(ТекстЗапроса1,"#Сортировка#","УПОРЯДОЧИТЬ ПО Период УБЫВ");
		
		ТекстЗапроса2 = ШаблонБазовыйЗапрос;
		ТекстЗапроса2 = СтрЗаменить(ТекстЗапроса2,"#УсловиеПервые#","");
		ТекстЗапроса2 = СтрЗаменить(ТекстЗапроса2,"#УсловиеПоДате#","ДанныеТерминалов.Период МЕЖДУ &НачДата И &КонДата");
		ТекстЗапроса2 = СтрЗаменить(ТекстЗапроса2,"#Сортировка#","");
		
		ТекстЗапроса3 = 
			"ВЫБРАТЬ
			|	* 
			|ИЗ 
			|	("+ШаблонБазовыйЗапрос+") КАК ВложенныйЗапросКонецИнтервала";
		ТекстЗапроса3 = СтрЗаменить(ТекстЗапроса3,"#УсловиеПервые#","ПЕРВЫЕ "+Формат(РасширитьГраницыКоличествоЗаписей,"ЧГ=0"));
		ТекстЗапроса3 = СтрЗаменить(ТекстЗапроса3,"#УсловиеПоДате#","ДанныеТерминалов.Период > &КонДата");
		ТекстЗапроса3 = СтрЗаменить(ТекстЗапроса3,"#Сортировка#","УПОРЯДОЧИТЬ ПО Период ВОЗР");
		
		ТекстЗапроса = 
			""+ТекстЗапроса1+"
			|ОБЪЕДИНИТЬ ВСЕ
			|"+ТекстЗапроса2+"
			|ОБЪЕДИНИТЬ ВСЕ
			|"+ТекстЗапроса3;
		
	Иначе
		ТекстЗапроса = ШаблонБазовыйЗапрос;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"#УсловиеПервые#","");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"#УсловиеПоДате#","ДанныеТерминалов.Период МЕЖДУ &НачДата И &КонДата");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"#Сортировка#","");	
		
	КонецЕсли;
	
	ЗапросБазовыеДанные = Новый Запрос(ТекстЗапроса);
	ЗапросБазовыеДанные.УстановитьПараметр("Терминал", Терминал);
	ЗапросБазовыеДанные.УстановитьПараметр("КодТерминала", Терминал.Код);
	ЗапросБазовыеДанные.УстановитьПараметр("НачДата", ПривестиКДатеВремениПоГринвичу(НачДата));
	ЗапросБазовыеДанные.УстановитьПараметр("КонДата", ПривестиКДатеВремениПоГринвичу(КонДата));
	
	Если ItobВызовСервераПовтИсп.ДанныеТерминаловБратьИзБазыIMCS() Тогда
		ВнешниеИсточникиДанных.ItobДанныеСервераСбораДанных.НачатьТранзакцию(,УровеньИзоляцииТранзакций.ЧтениеНезафиксированных);
		РезультатБазовогоЗапроса = ЗапросБазовыеДанные.Выполнить();
		// Без метода отмены транзакции, так как используется только чтение данных из внешнего источника данных.
		ВнешниеИсточникиДанных.ItobДанныеСервераСбораДанных.ЗафиксироватьТранзакцию();
	Иначе
		РезультатБазовогоЗапроса = ЗапросБазовыеДанные.Выполнить();
	КонецЕсли;	
	
	ТаблицаБазовыхДанных =РезультатБазовогоЗапроса.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаБазовыхДанных", ТаблицаБазовыхДанных);
	Запрос.УстановитьПараметр("Терминал", Терминал);
	// Для совместимости указываем первый датчик 
	Запрос.УстановитьПараметр("Датчик", МассивДатчиков[0]); 
	Запрос.УстановитьПараметр("СдвигВремени", ПараметрыСдвигаВремени.СдвигВремени);
	Запрос.УстановитьПараметр("ВариантПереводаНаЛетнееВремя", ПараметрыСдвигаВремени.ВариантПереводаВремени);
	Запрос.УстановитьПараметр("СдвигЛетнееВремя", ПараметрыСдвигаВремени.СдвигЛетнееВремя);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаБазовыхДанных.Период,
	               |	ТаблицаБазовыхДанных.Широта,
	               |	ТаблицаБазовыхДанных.Долгота,
	               |	ТаблицаБазовыхДанных.Скорость,
	               |	ТаблицаБазовыхДанных.Направление,
	               |	ТаблицаБазовыхДанных.ЧислоСпутников,
	               |	ТаблицаБазовыхДанных.НевалидныеДанные,
	               |	ТаблицаБазовыхДанных.ДанныеДатчиков
	               |ПОМЕСТИТЬ ДанныеТерминалов
	               |ИЗ
	               |	&ТаблицаБазовыхДанных КАК ТаблицаБазовыхДанных
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	&Терминал КАК Терминал,
	               |	&Датчик КАК Датчик,
	               |	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДанныеТерминалов.Период, СЕКУНДА, &СдвигВремени), СЕКУНДА, ВЫБОР
	               |			КОГДА &ВариантПереводаНаЛетнееВремя = ЗНАЧЕНИЕ(Перечисление.ItobВариантыПереводаВремени.Европейский)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ДанныеТерминалов.Период МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДанныеТерминалов.Период, ГОД), МЕСЯЦ, 3), НЕДЕЛЯ), НЕДЕЛЯ, -1), ДЕНЬ), ЧАС, 2) И ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДанныеТерминалов.Период, ГОД), МЕСЯЦ, 10), НЕДЕЛЯ), НЕДЕЛЯ, -1), ДЕНЬ), ЧАС, 2)
	               |							ТОГДА &СдвигЛетнееВремя
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |			КОГДА &ВариантПереводаНаЛетнееВремя = ЗНАЧЕНИЕ(Перечисление.ItobВариантыПереводаВремени.Американский)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ДанныеТерминалов.Период МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДанныеТерминалов.Период, ГОД), МЕСЯЦ, 2), НЕДЕЛЯ), НЕДЕЛЯ, 1), ДЕНЬ), ЧАС, 2) И ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДанныеТерминалов.Период, ГОД), МЕСЯЦ, 10), НЕДЕЛЯ), НЕДЕЛЯ, 0), ДЕНЬ), ЧАС, 2)
	               |							ТОГДА &СдвигЛетнееВремя
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК Период,	              
	               |	ДанныеТерминалов.Широта,
	               |	ДанныеТерминалов.Долгота,
	               |	ДанныеТерминалов.Скорость,
	               |	ДанныеТерминалов.Направление,
				   |	ДанныеТерминалов.НевалидныеДанные,
				   |	ДанныеТерминалов.ДанныеДатчиков,
				   |	ЕСТЬNULL(ДанныеТерминаловДополнения.ДанныеВиртуальныхДатчиков, """") КАК ДанныеВиртуальныхДатчиков,
				   |	ДанныеТерминалов.Период КАК ПериодUTC0
	               |ИЗ
	               |	ДанныеТерминалов КАК ДанныеТерминалов				   
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ItobДанныеТерминаловДополнения КАК ДанныеТерминаловДополнения
	               |		ПО ДанныеТерминалов.Период = ДанныеТерминаловДополнения.ДатаВремя
	               |			И (ДанныеТерминаловДополнения.Терминал = &Терминал)
	               
				   |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПериодUTC0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ДанныеТерминалов";
				   
	ТабДанных = Запрос.Выполнить().Выгрузить();
	ТабДанных.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,0)));
	ТабДанных.Колонки.Добавить("Расшифровка", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки()));
	
	МассивКодыДатчиков = Новый Массив;
	Для каждого ТекущийДатчик Из МассивДатчиков Цикл
		КодДатчикаСтр = Формат(ТекущийДатчик.Код, "ЧН=0; ЧГ=0");
		ТабДанных.Колонки.Добавить("Значение"+КодДатчикаСтр, Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,0)));	
		МассивКодыДатчиков.Добавить(ТекущийДатчик.Код);
	КонецЦикла;
	
	ПервыйДатчик = МассивДатчиков[0];
	КодДатчика = ПервыйДатчик.Код;
	ТипДатчикаДискретный = ПервыйДатчик.ТипДатчика = ПредопределенноеЗначение("Перечисление.ItobТипыДатчиков.Дискретный");
	СоответствиеРасшифровки = Новый Соответствие;
	Если ТипДатчикаДискретный Тогда
		НайденнаяСтрокаДатчики = Терминал.Датчики.Найти(ПервыйДатчик, "Датчик");
		Если НайденнаяСтрокаДатчики <> Неопределено Тогда
			Назначение = НайденнаяСтрокаДатчики.Назначение;
			Если Не Назначение.Пустая() Тогда
				Для каждого СтрРасшифровкаПоказаний Из Назначение.РасшифровкаПоказаний Цикл
					СоответствиеРасшифровки.Вставить(СтрРасшифровкаПоказаний.Показание, СтрРасшифровкаПоказаний.Расшифровка);						
				
				КонецЦикла;			
			КонецЕсли;		
		КонецЕсли;	
	КонецЕсли;
	
	МассивСтрокНаУдаление = Новый Массив;
	Если ItobВызовСервераПовтИсп.ИспользованиеCsmHandlerВключено() И ТабДанных.Количество() > 0 Тогда
		// Быстрый расчет через CsmHandler
		МассивДанныеДатчиков    = ТабДанных.ВыгрузитьКолонку("ДанныеДатчиков");
		МассивДанныеДатчиковДоп = ТабДанных.ВыгрузитьКолонку("ДанныеВиртуальныхДатчиков");
				
		SafeArrayДанныеДатчиков    = Новый COMSafeArray(МассивДанныеДатчиков, "VT_VARIANT");
		SafeArrayДанныеДатчиковДоп = Новый COMSafeArray(МассивДанныеДатчиковДоп, "VT_VARIANT");
		SafeArrayКодыДатчиков      = Новый COMSafeArray(МассивКодыДатчиков, "VT_VARIANT");
		
		ОбъектCsmHandler = ItobВызовСервераПовтИсп.ПолучитьОбъектCsmHandler();
		SafeArrayРезультат = ОбъектCsmHandler.StringsTwiceToSensorDataArray(SafeArrayДанныеДатчиков, SafeArrayДанныеДатчиковДоп, МассивКодыДатчиков);
		МассивРезультат = SafeArrayРезультат.Выгрузить();
		
		ТабДанных.ЗагрузитьКолонку(МассивРезультат[0],"Значение");
		Для ИндексМассиваДатчики=0 По МассивКодыДатчиков.Количество()-1 Цикл
			КодДатчикаСтрока = Формат(МассивКодыДатчиков[ИндексМассиваДатчики],"ЧН=0; ЧГ=0");
			ТабДанных.ЗагрузитьКолонку(МассивРезультат[ИндексМассиваДатчики], "Значение"+КодДатчикаСтрока);			
		КонецЦикла;
		
		ДанныеДатчиковОпределены = Истина;
		
		Для каждого СтрокаДанных Из ТабДанных Цикл
			ЗначениеДатчика = СтрокаДанных.Значение;
			Если СтрокаДанных.Значение = Неопределено Тогда
				// Вынуждены удалить эту строку			
				МассивСтрокНаУдаление.Добавить(СтрокаДанных);				
			ИначеЕсли ТипДатчикаДискретный Тогда
				СтрокаДанных.Расшифровка = ?(СоответствиеРасшифровки[ЗначениеДатчика]=Неопределено,"",СоответствиеРасшифровки[ЗначениеДатчика]);				
			КонецЕсли;	
		КонецЦикла;
		
	Иначе
		// Построчный расчет данных датчиков
		Для каждого СтрокаДанных Из ТабДанных Цикл
		
			СтруктураДанныеДатчиков = ItobОбщегоНазначенияКлиентСервер.ПреобразоватьСтрокуВДанныеДатчиков(СтрокаДанных.ДанныеДатчиков);
			Если НЕ ПустаяСтрока(СтрокаДанных.ДанныеВиртуальныхДатчиков) Тогда
				СтруктураДанныеДатчиковДоп = ItobОбщегоНазначенияКлиентСервер.ПреобразоватьСтрокуВДанныеДатчиков(СтрокаДанных.ДанныеВиртуальныхДатчиков);
				Для каждого ЭлементСтруктурыДоп Из СтруктураДанныеДатчиковДоп Цикл
					СтруктураДанныеДатчиков.Вставить(ЭлементСтруктурыДоп.Ключ, ЭлементСтруктурыДоп.Значение);
				КонецЦикла;			
			КонецЕсли;
			ЗначениеДатчика = СтруктураДанныеДатчиков[КодДатчика];
			СтрокаДанных["Значение"+Строка(КодДатчика)] = ЗначениеДатчика;
			
			Если ЗначениеДатчика=Неопределено Тогда
				// Вынуждены удалить эту строку			
				МассивСтрокНаУдаление.Добавить(СтрокаДанных);				
			Иначе
				СтрокаДанных.Значение = ЗначениеДатчика;
				Если ТипДатчикаДискретный Тогда
					СтрокаДанных.Расшифровка = ?(СоответствиеРасшифровки[ЗначениеДатчика]=Неопределено,"",СоответствиеРасшифровки[ЗначениеДатчика]);		
				КонецЕсли;				
				Для Счетчик=1 По МассивДатчиков.Количество()-1 Цикл
					ТекущийКод = МассивДатчиков[Счетчик].Код;
					СтрокаДанных["Значение"+Строка(ТекущийКод)] = СтруктураДанныеДатчиков[ТекущийКод];		
				КонецЦикла;				
			КонецЕсли;			
		КонецЦикла;
		
	КонецЕсли;	
	
	Для каждого СтрУдаления Из МассивСтрокНаУдаление Цикл
		ТабДанных.Удалить(СтрУдаления);		
	
	КонецЦикла;
	
	Возврат ТабДанных;

КонецФункции // ПолучитьДанныеДатчикаПоТерминалу()

// Раскладывает маршрут объекта по состояниям - Движение/Стоянка
//
Функция ОбработатьМаршрутОбъекта(ТаблицаТочекМаршрута, ПараметрыОбработкиДанных)
			
	КоличествоТочек = ТаблицаТочекМаршрута.Количество();
	МИНИМАЛЬНЫЙ_ИНТЕВАЛ_ОТПРАВКИ = ПараметрыОбработкиДанных.МинимальныйИнтервалОтправкиДанных;
	Если МИНИМАЛЬНЫЙ_ИНТЕВАЛ_ОТПРАВКИ > 0 Тогда
	
		Счетчик = 1;
		Пока Счетчик <= КоличествоТочек-1 Цикл
			Если ТаблицаТочекМаршрута[Счетчик-1].Состояние <> Перечисления.ItobСостоянияТерминалов.НетДанных				
				И ТаблицаТочекМаршрута[Счетчик].Период-ТаблицаТочекМаршрута[Счетчик-1].Период > МИНИМАЛЬНЫЙ_ИНТЕВАЛ_ОТПРАВКИ Тогда
				
				Строка1 = ТаблицаТочекМаршрута[Счетчик-1];
				Строка2 = ТаблицаТочекМаршрута[Счетчик];
												
				НовСтрока = ТаблицаТочекМаршрута.Вставить(Счетчик);
				НовСтрока.Период = ТаблицаТочекМаршрута[Счетчик-1].Период+МИНИМАЛЬНЫЙ_ИНТЕВАЛ_ОТПРАВКИ;
				НовСтрока.Состояние = Перечисления.ItobСостоянияТерминалов.НетДанных;
				
				пСчетчик = Счетчик+1;
				
			КонецЕсли;
			
			Счетчик = Счетчик+1;
		
		КонецЦикла;
		
	КонецЕсли;	
			
	МинимальноеВремяСтоянкиСек = ПараметрыОбработкиДанных.МинимальноеВремяСтоянки-'00010101';
	НачалоСтоянки = Неопределено;
	
	МассивСтрокТекСтоянка = Новый Массив;
	
	СостоянияТерминаловСтоянка = Перечисления.ItobСостоянияТерминалов.Стоянка;	
	СостоянияТерминаловДвижение = Перечисления.ItobСостоянияТерминалов.Движение;	
	
	Для Счетчик = 0 По КоличествоТочек-1 Цикл
		
		СтрокаТаб = ТаблицаТочекМаршрута[Счетчик];
		
		Если СтрокаТаб.Состояние = СостоянияТерминаловСтоянка Тогда
			
			МассивСтрокТекСтоянка.Добавить(СтрокаТаб);
			
			Если Счетчик = КоличествоТочек-1
				ИЛИ ТаблицаТочекМаршрута[Счетчик+1].Состояние <> СостоянияТерминаловСтоянка Тогда
									
				ПродолжительностьСтоянки = 
					МассивСтрокТекСтоянка[МассивСтрокТекСтоянка.Количество()-1].Период - МассивСтрокТекСтоянка[0].Период;
					
				Если ПродолжительностьСтоянки >= МинимальноеВремяСтоянкиСек Тогда
					// это стоянка
					
					ПроверитьИНормализоватьСтоянку(МассивСтрокТекСтоянка, ПараметрыОбработкиДанных);
															
				Иначе
					// по продолжительности это не стоянка
					Для СчетчикР = 0 По МассивСтрокТекСтоянка.Количество()-1 Цикл
						МассивСтрокТекСтоянка[СчетчикР].Состояние = СостоянияТерминаловДвижение;	
						
					КонецЦикла;
				
				КонецЕсли;				
				
				МассивСтрокТекСтоянка.Очистить();
			
			КонецЕсли;
		
		КонецЕсли;		
	
	КонецЦикла;
		
	// обработаем движение
	
	Если НЕ ПараметрыОбработкиДанных.ОтключитьНормализациюТочекДвижения Тогда
		МассивСтрокДвижения = Новый Массив;
		Счетчик = 0;
		Пока Счетчик <= КоличествоТочек-1 Цикл	
			
			Если ТаблицаТочекМаршрута[Счетчик].Состояние = СостоянияТерминаловДвижение Тогда
				МассивСтрокДвижения.Добавить(ТаблицаТочекМаршрута[Счетчик]);
			
			КонецЕсли;
			
			Если (ТаблицаТочекМаршрута[Счетчик].Состояние = СостоянияТерминаловСтоянка ИЛИ Счетчик = КоличествоТочек-1)
				И МассивСтрокДвижения.Количество() > 0 Тогда
				
				// смотрим продолжительность движения
				ПродолжительностьДвижения = МассивСтрокДвижения[МассивСтрокДвижения.Количество()-1].Период - МассивСтрокДвижения[0].Период;
				Если ПродолжительностьДвижения < 60 Тогда
					
					// подсчет примерного пройденного расстояния
					ПройденноеРасстояние = 0;
					Для СчетчикМ = 1 По МассивСтрокДвижения.Количество()-1 Цикл
						ПройденноеРасстояние = ПройденноеРасстояние
							+73000*Pow(Pow(МассивСтрокДвижения[СчетчикМ].Широта-МассивСтрокДвижения[СчетчикМ-1].Широта,2)
							+Pow(МассивСтрокДвижения[СчетчикМ].Долгота-МассивСтрокДвижения[СчетчикМ-1].Долгота,2),0.5);
					
					КонецЦикла;
						
					Если ПройденноеРасстояние < 50 Тогда
						// Считаем данные точки - стоянкой					
						
						ЕстьСтоянкаДо = ТаблицаТочекМаршрута.Индекс(МассивСтрокДвижения[0]) > 0;
						ЕстьСтоянкаПосле = ТаблицаТочекМаршрута.Индекс(МассивСтрокДвижения[МассивСтрокДвижения.Количество()-1]) < КоличествоТочек-1;
						СтрокаСтоянкиДо = ?(ЕстьСтоянкаДо,ТаблицаТочекМаршрута[ТаблицаТочекМаршрута.Индекс(МассивСтрокДвижения[0])-1],Неопределено);
						СтрокаСтоянкиПосле = ?(ЕстьСтоянкаПосле,ТаблицаТочекМаршрута[ТаблицаТочекМаршрута.Индекс(МассивСтрокДвижения[МассивСтрокДвижения.Количество()-1])+1],Неопределено);
						
						ЕстьСтоянкаДо = ?(ЕстьСтоянкаДо, СтрокаСтоянкиДо.Состояние=СостоянияТерминаловСтоянка, ЕстьСтоянкаДо);
						ЕстьСтоянкаПосле = ?(ЕстьСтоянкаПосле, СтрокаСтоянкиПосле.Состояние=СостоянияТерминаловСтоянка, ЕстьСтоянкаПосле);
						
						Если ЕстьСтоянкаДо И ЕстьСтоянкаПосле Тогда
							СтрокаСтоянкиДо.Широта = (СтрокаСтоянкиДо.Широта + СтрокаСтоянкиПосле.Широта)/2;
							СтрокаСтоянкиДо.Долгота = (СтрокаСтоянкиДо.Долгота + СтрокаСтоянкиПосле.Долгота)/2;
							
							Для каждого СтрокаДвижения Из МассивСтрокДвижения Цикл
								СтрокаДвижения.Состояние = СостоянияТерминаловСтоянка;
							КонецЦикла;
							
							Счетчик = Счетчик - 1 - МассивСтрокДвижения.Количество();
							
						ИначеЕсли ЕстьСтоянкаДо Тогда
													
							Для каждого СтрокаДвижения Из МассивСтрокДвижения Цикл
								СтрокаДвижения.Состояние = СостоянияТерминаловСтоянка;
							КонецЦикла;
							
							Счетчик = Счетчик - МассивСтрокДвижения.Количество();
							
						ИначеЕсли ЕстьСтоянкаПосле Тогда
							СтрокаСтоянкиПосле.Период = МассивСтрокДвижения[0].Период;
													
							Для каждого СтрокаДвижения Из МассивСтрокДвижения Цикл
								СтрокаДвижения.Состояние = СостоянияТерминаловСтоянка;
							КонецЦикла;
							
							Счетчик = Счетчик - МассивСтрокДвижения.Количество();
						
						КонецЕсли;					
					
					КонецЕсли;	
				
				КонецЕсли;
				
				МассивСтрокДвижения.Очистить();
				
			КонецЕсли;
			
			Если НЕ ТаблицаТочекМаршрута[Счетчик].Состояние = СостоянияТерминаловДвижение Тогда
				МассивСтрокДвижения.Очистить();			
			КонецЕсли;
			
			Счетчик = Счетчик + 1;
			
		КонецЦикла;	
	
	КонецЕсли;
		
	Возврат ТаблицаТочекМаршрута;
	
КонецФункции

#КонецОбласти

#Область ФункцииПолученияСводнойИнформации

Функция ПолучитьИнтервалыПоДаннымТерминала(Объект, НачДата, КонДата, ГеокодироватьАдреса=Ложь, 
	Знач ВключатьДанныеДатчиков=Неопределено, РассчитыватьДанныеВыработки=Ложь)

	ТаблицаИнтервалов = Новый ТаблицаЗначений;
	ТаблицаИнтервалов.Колонки.Добавить("ВремяНач",        Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаИнтервалов.Колонки.Добавить("ВремяКон",        Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаИнтервалов.Колонки.Добавить("Состояние",       Новый ОписаниеТипов("ПеречислениеСсылка.ItobСостоянияТерминалов"));
	ТаблицаИнтервалов.Колонки.Добавить("СостояниеСтрока", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
	ТаблицаИнтервалов.Колонки.Добавить("Длительность",    Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,0)));
	ТаблицаИнтервалов.Колонки.Добавить("СредняяСкорость", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,2)));
	ТаблицаИнтервалов.Колонки.Добавить("МаксимальнаяСкорость", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,2)));
	ТаблицаИнтервалов.Колонки.Добавить("Пробег",          Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,7)));
	ТаблицаИнтервалов.Колонки.Добавить("МестоСтоянки",    Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(500)));
	ТаблицаИнтервалов.Колонки.Добавить("ДанныеТерминала");
	ТаблицаИнтервалов.Колонки.Добавить("ДанныеВыработки", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(1000)));
			
	Маршрут = СформироватьМаршрутОбъектаМониторинга(Объект, НачДата, КонДата, ВключатьДанныеДатчиков);
	
	МаршрутКоличество = Маршрут.Количество();
	Если Маршрут = Неопределено ИЛИ МаршрутКоличество=0 Тогда
		Возврат ТаблицаИнтервалов;
	ИначеЕсли МаршрутКоличество = 1
		И (Маршрут[0].Состояние = Перечисления.ItobСостоянияТерминалов.НетДанных
		ИЛИ Маршрут[0].Период < НачДата) Тогда
		
		Возврат ТаблицаИнтервалов;	
	КонецЕсли;
		
	ШаблонДанныеТерминала = Маршрут.СкопироватьКолонки();
	
	МассивСтрокСостояния = Новый Массив;
	МассивСтрокСостояния.Добавить(Маршрут[0]);
	
	ТекущееСостояние = Маршрут[0].Состояние;
	ТекущийПробег = 0;
	ТекущаяМаксСкорость = 0;
	
	СостоянияТерминаловДвижение = Перечисления.ItobСостоянияТерминалов.Движение;
	СостоянияТерминаловСтоянка = Перечисления.ItobСостоянияТерминалов.Стоянка;
	
	Для НомерСтроки = 0 По МаршрутКоличество-1 Цикл
		
		Если ТекущееСостояние <> Маршрут[НомерСтроки].Состояние
			ИЛИ НомерСтроки = МаршрутКоличество-1 Тогда
			
			Если НомерСтроки = МаршрутКоличество-1 Тогда
				МассивСтрокСостояния.Добавить(Маршрут[НомерСтроки]);				
			
			КонецЕсли;
			
			НовСтрокаТаб = ТаблицаИнтервалов.Добавить();
			НовСтрокаТаб.ВремяНач = МассивСтрокСостояния[0].Период;
			НовСтрокаТаб.ВремяКон = МассивСтрокСостояния[МассивСтрокСостояния.Количество()-1].Период;
			НовСтрокаТаб.Состояние = ТекущееСостояние;
			НовСтрокаТаб.СостояниеСтрока = Строка(ТекущееСостояние);
			НовСтрокаТаб.МаксимальнаяСкорость = ТекущаяМаксСкорость;
			НовСтрокаТаб.Пробег = ТекущийПробег/1000;
			НовСтрокаТаб.МестоСтоянки = "";
			
			НеобходимоОпределитьМестоСтоянки = ГеокодироватьАдреса 
				И ТекущееСостояние=СостоянияТерминаловСтоянка
				И МассивСтрокСостояния.Количество() > 0;
				
			СредняяШирота = 0;
			СредняяДолгота = 0;
				
			НовСтрокаТаб.ДанныеТерминала = ШаблонДанныеТерминала.Скопировать();
			Для каждого СтрокаМассива Из МассивСтрокСостояния Цикл
				ЗаполнитьЗначенияСвойств(НовСтрокаТаб.ДанныеТерминала.Добавить(), СтрокаМассива);			
				
				Если НеобходимоОпределитьМестоСтоянки Тогда
					СредняяШирота = СредняяШирота   + СтрокаМассива.Широта;
					СредняяДолгота = СредняяДолгота + СтрокаМассива.Долгота;					
				
				КонецЕсли;
				
			КонецЦикла;
			
			Если НеобходимоОпределитьМестоСтоянки Тогда
				СредняяШирота  = СредняяШирота/МассивСтрокСостояния.Количество();
				СредняяДолгота = СредняяДолгота/МассивСтрокСостояния.Количество();
				
				НовСтрокаТаб.МестоСтоянки = НайтиБлижайшийАдрес(СредняяШирота, СредняяДолгота);			
			
			КонецЕсли;
			
			МассивСтрокСостояния.Очистить();
			ТекущееСостояние = Маршрут[НомерСтроки].Состояние;
			ТекущийПробег = 0;
			ТекущаяМаксСкорость = 0;
		
		КонецЕсли;
		
		Если НомерСтроки > 0 Тогда
			МассивСтрокСостояния.Добавить(Маршрут[НомерСтроки]);			
		
		КонецЕсли;
						
		Если Маршрут[НомерСтроки].Состояние = СостоянияТерминаловДвижение Тогда			
			ТекущийПробег = ТекущийПробег + Маршрут[НомерСтроки].Пробег;
			ТекущаяМаксСкорость = МАКС(ТекущаяМаксСкорость, Маршрут[НомерСтроки].Скорость);
		
		КонецЕсли;
		
	КонецЦикла;
	
	// Нормализация времени в таблице
	ТаблицаИнтерваловКоличество = ТаблицаИнтервалов.Количество();
	Для Счетчик = 0 По ТаблицаИнтерваловКоличество-1 Цикл
		ТекСтрока = ТаблицаИнтервалов[Счетчик];
		
		Если Счетчик < ТаблицаИнтерваловКоличество-1 Тогда
			ТекСтрока.ВремяКон = ТаблицаИнтервалов[Счетчик+1].ВремяНач-1;
					
		КонецЕсли;		
		
		ТекСтрока.Длительность = ТекСтрока.ВремяКон-ТекСтрока.ВремяНач+?(Счетчик=ТаблицаИнтерваловКоличество-1,0,1);
		Если ТекСтрока.Состояние = Перечисления.ItobСостоянияТерминалов.Движение Тогда
			ТекСтрока.СредняяСкорость = ?(ТекСтрока.Длительность=0,0,Окр(ТекСтрока.Пробег/ТекСтрока.Длительность*3600,1));	
			
		Иначе
			ТекСтрока.СредняяСкорость = 0;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат ТаблицаИнтервалов;	

КонецФункции // ПолучитьИнтервалыПоДаннымТерминала()

// Проверяет стоянку на соответствие настройкам
//
Процедура ПроверитьИНормализоватьСтоянку(МассивСтрокСтоянка, ПараметрыОбработкиДанных)

	КоличествоСтрок = МассивСтрокСтоянка.Количество();	
	Если КоличествоСтрок=0 Тогда
		Возврат;
	КонецЕсли;
	
	ИтогоШирота = 0;
	ИтогоДолгота = 0;					
	
	Для Счетчик = 0 По КоличествоСтрок-1 Цикл
		ИтогоШирота = ИтогоШирота + МассивСтрокСтоянка[Счетчик].Широта;
		ИтогоДолгота = ИтогоДолгота + МассивСтрокСтоянка[Счетчик].Долгота;	
	КонецЦикла;
	
	ШиротаСтоянки = ИтогоШирота/КоличествоСтрок;
	ДолготаСтоянки = ИтогоДолгота/КоличествоСтрок;
	
	Если ПараметрыОбработкиДанных.ДопустимыйРадиусСтоянки > 0 Тогда
		
		НайденыВыбивающиесяТочки = Ложь;
		
		// Расстояние одной точки стоянки от другой
		Для Счетчик = 0 По КоличествоСтрок-2 Цикл
			
			Если ПолучитьРасстояниеМеждуТочками(
				МассивСтрокСтоянка[Счетчик].Широта,МассивСтрокСтоянка[Счетчик].Долгота,
				МассивСтрокСтоянка[Счетчик+1].Широта,МассивСтрокСтоянка[Счетчик+1].Долгота) > ПараметрыОбработкиДанных.ДопустимыйРадиусСтоянки Тогда
				
				// Точка выбивается из радиуса стоянки, исключаем ее из стоянки
				МассивСтрокСтоянка[Счетчик].Состояние = Перечисления.ItobСостоянияТерминалов.Движение;
				НайденыВыбивающиесяТочки = Истина;
			
			КонецЕсли;			
		КонецЦикла;
		
		Если НЕ НайденыВыбивающиесяТочки Тогда
			// Расстояние точек стоянки от средней точки стоянки
			Для Счетчик = 0 По КоличествоСтрок-1 Цикл
			
				Если ПолучитьРасстояниеМеждуТочками(ШиротаСтоянки,ДолготаСтоянки,
					МассивСтрокСтоянка[Счетчик].Широта,МассивСтрокСтоянка[Счетчик].Долгота) > ПараметрыОбработкиДанных.ДопустимыйРадиусСтоянки Тогда
					
					// Точка выбивается из радиуса стоянки, исключаем ее из стоянки
					МассивСтрокСтоянка[Счетчик].Состояние = Перечисления.ItobСостоянияТерминалов.Движение;
					НайденыВыбивающиесяТочки = Истина;
				
				КонецЕсли;			
			КонецЦикла;				
		
		КонецЕсли;		
		
		Если НайденыВыбивающиесяТочки Тогда
			
			ТекСтрокиСтоянка = Новый Массив;
			
			Для Счетчик=0 По КоличествоСтрок-1 Цикл
				
				Если (Счетчик = КоличествоСтрок-1 ИЛИ МассивСтрокСтоянка[Счетчик].Состояние = Перечисления.ItobСостоянияТерминалов.Движение)
					И ТекСтрокиСтоянка.Количество() > 0 Тогда
					
					ПроверитьИНормализоватьСтоянку(ТекСтрокиСтоянка, ПараметрыОбработкиДанных);					
					ТекСтрокиСтоянка.Очистить();
				
				КонецЕсли;
				
				Если МассивСтрокСтоянка[Счетчик].Состояние = Перечисления.ItobСостоянияТерминалов.Стоянка Тогда
					ТекСтрокиСтоянка.Добавить(МассивСтрокСтоянка[Счетчик]);						
				
				КонецЕсли;				
			
			КонецЦикла;
			
		Иначе
			
			Для Счетчик = 0 По КоличествоСтрок-1 Цикл		
				МассивСтрокСтоянка[Счетчик].Широта = ШиротаСтоянки;
				МассивСтрокСтоянка[Счетчик].Долгота = ДолготаСтоянки;
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		Для Счетчик = 0 По КоличествоСтрок-1 Цикл		
			МассивСтрокСтоянка[Счетчик].Широта = ШиротаСтоянки;
			МассивСтрокСтоянка[Счетчик].Долгота = ДолготаСтоянки;
			
		КонецЦикла;		
		
	КонецЕсли;		

КонецПроцедуры

#КонецОбласти


Процедура ПередНачаломРаботыСистемы(ДанныеОПодключении, ЗапретВхода, ПричинаЗапрета) Экспорт

	Если ItobОбщегоНазначенияВызовСервера.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.События") Тогда
		МодульОбработкаСобытийВызовСервера = ОбщегоНазначения.ОбщийМодуль("ItobОбработкаСобытийВызовСервера");
		МодульОбработкаСобытийВызовСервера.УстановитьДатуНачалаВыборкиСобытий();
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьАдресCsmSvc(СтрокаСоединенияКлиента) Экспорт 
	
	ТекСтрокаСоединенияКлиента = НРег(СтрокаСоединенияКлиента);
	
	СерверАдрес = "127.0.0.1";
	СерверПорт = 8091;
	КлиентАдрес = СерверАдрес;
	КлиентПорт = СерверПорт;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ItobСервисыCsmSvc.ВидОбращения,
	               |	ItobСервисыCsmSvc.СерверОбращения,
	               |	ItobСервисыCsmSvc.АдресCsmService,
	               |	ItobСервисыCsmSvc.ПортCsmService
	               |ИЗ
	               |	РегистрСведений.ItobСервисыCsmSvc КАК ItobСервисыCsmSvc";
				   
	Таб = Запрос.Выполнить().Выгрузить();
	Таб.Колонки.Добавить("Приоритет");
	
	КоличествоЗаписей = Таб.Количество();
	
	МассивУдаления = Новый Массив;
	
	Для каждого СтрТаб Из Таб Цикл
		Если СтрТаб.ВидОбращения = Перечисления.ItobВидыОбращенияCsmSvc.Клиент Тогда
			Если ПустаяСтрока(СтрТаб.СерверОбращения) Тогда
				СтрТаб.Приоритет = 10;
				
			ИначеЕсли Найти(ТекСтрокаСоединенияКлиента,НРег(СтрТаб.СерверОбращения)) > 0 Тогда
				СтрТаб.Приоритет = 0;
				
			Иначе
				МассивУдаления.Добавить(СтрТаб);				
			
			КонецЕсли;
			
		Иначе
			СтрТаб.Приоритет = 0;			
		
		КонецЕсли;	
	КонецЦикла;	
	
	Для каждого СтрУдаления Из МассивУдаления Цикл
		Таб.Удалить(СтрУдаления);	
	
	КонецЦикла;
	
	Таб.Сортировать("Приоритет Возр");
	НайденнаяСтрока = Таб.Найти(Перечисления.ItobВидыОбращенияCsmSvc.Сервер, "ВидОбращения");
	Если НайденнаяСтрока <> Неопределено Тогда
		СерверАдрес = НайденнаяСтрока.АдресCsmService;
		СерверПорт = НайденнаяСтрока.ПортCsmService;				
	
	КонецЕсли;
	
	НайденнаяСтрока = Таб.Найти(Перечисления.ItobВидыОбращенияCsmSvc.Клиент, "ВидОбращения");
	Если НайденнаяСтрока <> Неопределено Тогда
		КлиентАдрес = НайденнаяСтрока.АдресCsmService;
		КлиентПорт = НайденнаяСтрока.ПортCsmService;				
		
	Иначе
		КлиентАдрес = СерверАдрес;
		КлиентПорт = СерверПорт;	
	
	КонецЕсли;
			
	СоотвАдрес = Новый Соответствие;
	СоотвАдрес.Вставить("СерверАдрес", СерверАдрес);
	СоотвАдрес.Вставить("СерверПорт" , СерверПорт);
	СоотвАдрес.Вставить("КлиентАдрес", КлиентАдрес);
	СоотвАдрес.Вставить("КлиентПорт" , КлиентПорт);
	СоотвАдрес.Вставить("НастройкиОпределены", КоличествоЗаписей > 0);	
	
	ПараметрыСеанса.ItobАдресCsmSvc = Новый ФиксированноеСоответствие(СоотвАдрес);

КонецФункции // ОпределитьАдресCsmSvc()

#Область ФункцииОбщегоНазначения

// Функция возвращает модель терминала для переданного объекта
//
Функция ПолучитьМодельТерминалаПоОбъекту(ТекущийОбъект, НаДату=Неопределено) Экспорт

	Результат = Справочники.ItobМоделиТерминалов.ПустаяСсылка();
	
	Терминал = ПолучитьПривязанныйТерминал(ТекущийОбъект, НаДату);
	
	Если ЗначениеЗаполнено(Терминал) Тогда
		Результат = Терминал.Модель;			
	
	КонецЕсли;
	
	Возврат Результат;	

КонецФункции // ПолучитьМодельТерминалаПоОбъекту()

// Функция возвращает терминал, привязанный к переданному объекту
//
Функция ПолучитьПривязанныйТерминал(ТекущийОбъект, НаДату=Неопределено) Экспорт

	Результат = Справочники.ItobТерминалы.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(ТекущийОбъект) Тогда
				
		СрезНаНачало = РегистрыСведений.ItobПривязкиТерминалов.ПолучитьПоследнее(
			?(НаДату=Неопределено,ТекущаяДатаСеанса(),НаДату), Новый Структура("Объект", ТекущийОбъект));
		Если ЗначениеЗаполнено(СрезНаНачало.Терминал) Тогда
			Результат = СрезНаНачало.Терминал;
						
		КонецЕсли;	
	
	КонецЕсли;
	
	Возврат Результат;			

КонецФункции // ПолучитьПривязанныйТерминал()

// Рассчитывает пробег по переданному массиву точек
//
Функция ПолучитьПробег(МассивТочек) Экспорт
	
	ОбщееРасстояние = 0;
	Для Счетчик = 1 По МассивТочек.Количество()/2-1 Цикл		
		
		НачШирота = МассивТочек[Счетчик*2-2];
		НачДолгота = МассивТочек[Счетчик*2-1];
		КонШирота = МассивТочек[Счетчик*2];
		КонДолгота = МассивТочек[Счетчик*2+1];
		
		ОбщееРасстояние = ОбщееРасстояние+ПолучитьРасстояниеМеждуТочками(НачШирота, НачДолгота, КонШирота, КонДолгота);
	
	КонецЦикла;	
	
	Возврат ОбщееРасстояние;

КонецФункции // ПолучитьПробег()

// Вычисление поправочного коэффициента на пробег ТС
//
Функция ПолучитьПоправочныйКоэффициентПробега(МаркаТС, ТС) Экспорт
	
	МассивМаркаТС = Новый Массив();
	МассивТС      = Новый Массив();
	
	МассивМаркаТС.Добавить(Вычислить("Справочники."+ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("МаркиТранспорта")+".ПустаяСсылка()"));
	МассивТС.Добавить(Вычислить("Справочники."+ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("ТранспортныеСредства")+".ПустаяСсылка()"));
	
	Если ЗначениеЗаполнено(МаркаТС) Тогда
		МассивМаркаТС.Добавить(МаркаТС);	
	
	КонецЕсли;
	
	МассивТС.Добавить(ТС);
	СписокГрупп = ItobОбщегоНазначенияСервер.ПолучитьВышеСтоящиеГруппы(ТС);
	Для каждого Элемент Из СписокГрупп Цикл
		МассивТС.Добавить(Элемент);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МаркаТранспорта", МассивМаркаТС);
	Запрос.УстановитьПараметр("ТранспортноеСредство", МассивТС);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ItobПоправочныеКоэффициентыПробега.МаркаТранспорта,
	               |	ItobПоправочныеКоэффициентыПробега.ТранспортноеСредство,
	               |	ItobПоправочныеКоэффициентыПробега.Коэффициент
	               |ИЗ
	               |	РегистрСведений.ItobПоправочныеКоэффициентыПробега КАК ItobПоправочныеКоэффициентыПробега
	               |ГДЕ
	               |	ItobПоправочныеКоэффициентыПробега.МаркаТранспорта В(&МаркаТранспорта)
	               |	И ItobПоправочныеКоэффициентыПробега.ТранспортноеСредство В(&ТранспортноеСредство)";
				   
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	ТаблицаЗапроса.Колонки.Добавить("Глубина");
	Для Каждого Строка Из ТаблицаЗапроса Цикл
		Если Строка.ТранспортноеСредство = Вычислить("Справочники."+ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("ТранспортныеСредства")+".ПустаяСсылка()") Тогда
			Строка.Глубина = 0;
		Иначе
			Строка.Глубина = Строка.ТранспортноеСредство.Уровень()+1;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаЗапроса.Сортировать("Глубина Убыв, МаркаТранспорта Убыв");
	
	Если ТаблицаЗапроса.Количество() > 0 Тогда
		Результат = ТаблицаЗапроса[0].Коэффициент;
		
	Иначе
		Результат = 1;
		
	КонецЕсли;
	
	Возврат Результат;	

КонецФункции // ПолучитьПоправочныйКоэффициентПробега()

// Функция Возвращает ближайший адрес, найденный на карте.
//
// Параметры
//  Широта  - географическая широта координаты точки.
//  Долгота - географическая долгота координаты точки.
//
// Возвращаемое значение:
//  Строка   - строковое представление адреса.
//
Функция НайтиБлижайшийАдрес(Широта, Долгота) Экспорт
		
	Возврат ItobРаботаСКартой.ОпределитьБлижайшийОбъектНаКарте(Широта, Долгота);
	
КонецФункции // НайтиБлижайшийАдрес()

// Возвращает расстояние между точками.
// Параметры:
//  StartLat    - Начальная широта
//  StartLong 	- Начальная долгота
//  EndLat 	 	- Конечная широта
//  EndLong 	- Конечная долгота
//
Функция ПолучитьРасстояниеМеждуТочками(StartLat, StartLong, EndLat, EndLong) Экспорт
	
	Если StartLat = EndLat И StartLong = EndLong Тогда
		Возврат 0;
	
	КонецЕсли;
	
	Если ItobВызовСервераПовтИсп.ИспользованиеCsmHandlerВключено() Тогда
		
		ОбъектCsmHandler = ItobВызовСервераПовтИсп.ПолучитьОбъектCsmHandler();		
		Попытка
			Distance = ОбъектCsmHandler.GetDistance(StartLat, StartLong, EndLat, EndLong);
			Возврат Distance;
		Исключение			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Преобразования'","ru"), УровеньЖурналаРегистрации.Ошибка,,,НСтр("ru = 'Ошибка вычисления GetDistance:'")+" "+ОписаниеОшибки());
		КонецПопытки;
			
	КонецЕсли;
	
	// Константы, используемые для вычисления смещения и расстояния
	Pi=3.1415926535897932;
	D2R = Pi/180; // Константа для преобразования градусов в радианы
	R2D = 180/Pi; // Константа для преобразования радиан в градусы
	pa = 6378137.0; // Основные полуоси
	pb = 6356752.314245; // Неосновные полуоси
	e2 = 0.006739496742337; // Квадрат эксцентричности эллипсоида
	pf = 0.003352810664747; // Выравнивание эллипсоида
	
	// Вычисляем разницу между двумя долготами и широтами и получаем среднюю широту
	fdLambda = (StartLong - EndLong) * D2R;
	fdPhi = (StartLat - EndLat) * D2R;
	fPhimean = ((StartLat + EndLat) / 2.0) * D2R;
	
	// Вычисляем меридианные и поперечные радиусы кривизны средней широты
	fTemp = 1 - e2 * (Pow(Sin(fPhimean), 2));
	fRho = (pa * (1 - e2)) / Pow(fTemp, 1.5);
	fNu = pa / (Sqrt(fTemp));
	
	// Вычисляем угловое расстояние
	fz = Sqrt(Pow(Sin(fdPhi / 2.0), 2) + Cos(EndLat * D2R) * Cos(StartLat * D2R) * Pow(Sin(fdLambda / 2.0), 2));
	
	fz = 2 * ASin(fz);
	
	// Вычисляем смещение
	fAlpha = Окр(Cos(EndLat * D2R) * Sin(fdLambda) / Sin(fz),12);
	fAlpha = ?(fAlpha < 1,fAlpha,1);
	fAlpha = ASin(?(fAlpha > -1, fAlpha, -1));
	
	// Вычисляем радиус Земли
	fR = (fRho * fNu) / ((fRho * Pow(Sin(fAlpha), 2)) + (fNu * Pow(Cos(fAlpha), 2)));
	
	// Получаем смещение и расстояние
	Distance = (fz * fR);
		
	Возврат Distance;
					
КонецФункции // ПолучитьРасстояниеМеждуТочками()

// Возвращает параметры стоянок для заданного терминала
//
Функция ПолучитьПараметрыОбработкиДанных(Терминал) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Терминал", Терминал);
	Запрос.Текст = "ВЫБРАТЬ
	               |	0 КАК Приоритет,
	               |	ItobПараметрыСтоянок.МинимальнаяСкоростьДвижения,
	               |	ItobПараметрыСтоянок.МинимальноеВремяСтоянки,
	               |	ItobПараметрыСтоянок.МинимальныйИнтервалОтправкиДанных,
	               |	ItobПараметрыСтоянок.ПрофильЗаписиДанныхДатчиков,
	               |	ItobПараметрыСтоянок.ОтключитьНормализациюТочекДвижения,
				   |	ItobПараметрыСтоянок.ДопустимыйРадиусСтоянки,
				   |	ItobПараметрыСтоянок.МаксимальнаяВалиднаяСкоростьДвижения
	               |ИЗ
	               |	РегистрСведений.ItobПараметрыОбработкиДанныхТрекеров КАК ItobПараметрыСтоянок
	               |ГДЕ
	               |	ItobПараметрыСтоянок.Терминал = &Терминал
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	1,
	               |	ItobПараметрыСтоянок.МинимальнаяСкоростьДвижения,
	               |	ItobПараметрыСтоянок.МинимальноеВремяСтоянки,
	               |	ItobПараметрыСтоянок.МинимальныйИнтервалОтправкиДанных,
	               |	ItobПараметрыСтоянок.ПрофильЗаписиДанныхДатчиков,
	               |	ItobПараметрыСтоянок.ОтключитьНормализациюТочекДвижения,
				   |	ItobПараметрыСтоянок.ДопустимыйРадиусСтоянки,
				   |	ItobПараметрыСтоянок.МаксимальнаяВалиднаяСкоростьДвижения
	               |ИЗ
	               |	РегистрСведений.ItobПараметрыОбработкиДанныхТрекеров КАК ItobПараметрыСтоянок
	               |ГДЕ
	               |	ItobПараметрыСтоянок.Терминал = ЗНАЧЕНИЕ(Справочник.ItobТерминалы.ПустаяСсылка)
	               |	И ItobПараметрыСтоянок.МодельТерминала В
	               |			(ВЫБРАТЬ
	               |				Справочник.ItobТерминалы.Модель
	               |			ИЗ
	               |				Справочник.ItobТерминалы
	               |			ГДЕ
	               |				Справочник.ItobТерминалы.Ссылка = &Терминал)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	2,
	               |	ItobПараметрыСтоянок.МинимальнаяСкоростьДвижения,
	               |	ItobПараметрыСтоянок.МинимальноеВремяСтоянки,
	               |	ItobПараметрыСтоянок.МинимальныйИнтервалОтправкиДанных,
	               |	ItobПараметрыСтоянок.ПрофильЗаписиДанныхДатчиков,
	               |	ItobПараметрыСтоянок.ОтключитьНормализациюТочекДвижения,
				   |	ItobПараметрыСтоянок.ДопустимыйРадиусСтоянки,
				   |	ItobПараметрыСтоянок.МаксимальнаяВалиднаяСкоростьДвижения
	               |ИЗ
	               |	РегистрСведений.ItobПараметрыОбработкиДанныхТрекеров КАК ItobПараметрыСтоянок
	               |ГДЕ
	               |	ItobПараметрыСтоянок.Терминал = ЗНАЧЕНИЕ(Справочник.ItobТерминалы.ПустаяСсылка)
	               |	И ItobПараметрыСтоянок.МодельТерминала = ЗНАЧЕНИЕ(Справочник.ItobМоделиТерминалов.ПустаяСсылка)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	3,
	               |	Константы.ItobМинимальнаяСкоростьДвижения,
	               |	Константы.ItobМинимальноеВремяСтоянки,
	               |	3600,
	               |	ЗНАЧЕНИЕ(Справочник.ItobПрофилиЗаписиДанныхДатчиков.ПустаяСсылка),
	               |	ЛОЖЬ,
				   |	Константы.ItobДопустимыйРадиусСтоянки,
				   |	250
	               |ИЗ
	               |	Константы КАК Константы
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Приоритет";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		
		Результат = СформироватьПараметрыОбработкиДанных(Выборка.МинимальнаяСкоростьДвижения, Выборка.МинимальноеВремяСтоянки,
			Выборка.МинимальныйИнтервалОтправкиДанных, Выборка.ПрофильЗаписиДанныхДатчиков, 
			Выборка.ОтключитьНормализациюТочекДвижения, Выборка.ДопустимыйРадиусСтоянки, Выборка.МаксимальнаяВалиднаяСкоростьДвижения);
		
	Иначе
		Результат = СформироватьПараметрыОбработкиДанных(10, '00010101001000', 3600, Справочники.ItobПрофилиЗаписиДанныхДатчиков.ПустаяСсылка(),Ложь,0,250);
	
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ПолучитьПараметрыОбработкиДанных()

// Процедура - обработчик регламентного задания "ItobВыполнениеНазначеннойКоманды"
//
Процедура РегламентноеЗаданиеВыполнениеКоманды(НазначеннаяКоманда) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	Если НЕ ЗначениеЗаполнено(НазначеннаяКоманда) Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'НазначеннаяКоманда'","ru"),УровеньЖурналаРегистрации.Ошибка,,,НСтр("ru = 'РегламентноеЗаданиеВыполнениеКоманды, не указана команда'"));
		Возврат;
		
	КонецЕсли;	
	
	// Формируем запрос к БД
	
	Запрос = Новый Запрос;
	
	СтрокаВыборкаЗапроса = "";
	СтрокаСоединенияЗапроса = "";
	
	ЗапросПоказатели = Новый Запрос;
	ЗапросПоказатели.УстановитьПараметр("НазначеннаяКоманда", НазначеннаяКоманда);
	ЗапросПоказатели.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                         |	ItobНазначенныеКомандыУсловияОтбора.Показатель.Ссылка КАК Ссылка,
	                         |	ItobНазначенныеКомандыУсловияОтбора.Показатель.Код КАК Код
	                         |ИЗ
	                         |	Справочник.ItobНазначенныеКоманды.УсловияОтбора КАК ItobНазначенныеКомандыУсловияОтбора
	                         |ГДЕ
	                         |	ItobНазначенныеКомандыУсловияОтбора.Показатель ССЫЛКА Справочник.ItobНазначенияДатчиков
	                         |	И ItobНазначенныеКомандыУсловияОтбора.Ссылка = &НазначеннаяКоманда";
							 
	ВыборкаПоказатели = ЗапросПоказатели.Выполнить().Выбрать();
	Пока ВыборкаПоказатели.Следующий() Цикл
		
		ТекущийКод = СокрЛП(ВыборкаПоказатели.Код);
		
		СтрокаВыборкаЗапроса = СтрокаВыборкаЗапроса + "
			|	ItobТерминалыДатчики"+ТекущийКод+".Датчик.Код КАК КодДатчикаНазначение"+ТекущийКод+",";
		
		СтрокаСоединенияЗапроса = СтрокаСоединенияЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ItobТерминалы.Датчики КАК ItobТерминалыДатчики"+ТекущийКод+"
			|ПО (ItobАктуальностьДанныхТерминалов.Терминал = ItobТерминалыДатчики"+ТекущийКод+".Ссылка)
			|	И (ItobТерминалыДатчики"+ТекущийКод+".Назначение = &Назначение"+ТекущийКод+")";			
		
		Запрос.УстановитьПараметр("Назначение"+ТекущийКод, ВыборкаПоказатели.Ссылка);	
			
	КонецЦикла;
	
	// Учет условий
	
	ЗапросУсловия = Новый Запрос;
	ЗапросУсловия.УстановитьПараметр("НазначеннаяКоманда", НазначеннаяКоманда);
	ЗапросУсловия.Текст = "ВЫБРАТЬ
						  |	ItobНазначенныеКомандыУсловияОтбора.Показатель,
						  |	ItobНазначенныеКомандыУсловияОтбора.ВидСравнения,
						  |	ItobНазначенныеКомандыУсловияОтбора.Значение
						  |ИЗ
						  |	Справочник.ItobНазначенныеКоманды.УсловияОтбора КАК ItobНазначенныеКомандыУсловияОтбора
						  |ГДЕ
						  |	ItobНазначенныеКомандыУсловияОтбора.Ссылка = &НазначеннаяКоманда";
	ТаблицаУсловийКоманды = ЗапросУсловия.Выполнить().Выгрузить(); 					  
		
	ПараметрыСдвигаВремени = ПолучитьПараметрыСдвигаВремени();
	
	Запрос.УстановитьПараметр("СдвигВремени", ПараметрыСдвигаВремени.СдвигВремени);
	Запрос.УстановитьПараметр("ВариантПереводаНаЛетнееВремя", ПараметрыСдвигаВремени.ВариантПереводаВремени);
	Запрос.УстановитьПараметр("СдвигЛетнееВремя", ПараметрыСдвигаВремени.СдвигЛетнееВремя);	
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ПериодUTC0", ТекущаяУниверсальнаяДата());	
	Запрос.УстановитьПараметр("МинимальнаяСкоростьДвижения", Константы.ItobМинимальнаяСкоростьДвижения.Получить());
	Запрос.УстановитьПараметр("НазначеннаяКоманда", НазначеннаяКоманда);
	Запрос.УстановитьПараметр("ВыполнитьКоманду", НазначеннаяКоманда.ВыполнитьКоманду);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ItobПривязкиТерминаловСрезПоследних.Объект КАК Объект,
	               |	ItobПривязкиТерминаловСрезПоследних.Терминал КАК Терминал,
				   |	ЕСТЬNULL(ItobАктуальностьДанныхТерминалов.Широта, 0) КАК Широта,
	               |	ЕСТЬNULL(ItobАктуальностьДанныхТерминалов.Долгота, 0) КАК Долгота,
	               |	ЕСТЬNULL(ItobАктуальностьДанныхТерминалов.Скорость, 0) КАК Скорость,
	               |	ЕСТЬNULL(ItobАктуальностьДанныхТерминалов.Направление, 0) КАК Направление,
				   |	ВЫБОР КОГДА ЕСТЬNULL(ItobАктуальностьДанныхТерминалов.Скорость, 0) >= &МинимальнаяСкоростьДвижения
				   |		ТОГДА ЗНАЧЕНИЕ(Перечисление.ItobСостоянияТерминалов.Движение) 
			       |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ItobСостоянияТерминалов.Стоянка) 
				   |	КОНЕЦ КАК Состояние,
				   |	РАЗНОСТЬДАТ(ItobАктуальностьДанныхТерминалов.ДатаВремя,&ПериодUTC0,МИНУТА) КАК ОтсутствуютДанныеМинуты,
				   |	РАЗНОСТЬДАТ(ItobАктуальностьДанныхТерминалов.ДатаВремя,&ПериодUTC0,ЧАС) КАК ОтсутствуютДанныеЧасы,
	               |	ItobАктуальностьДанныхТерминалов.ДатаВремя КАК ПериодUTC0,
				   |	ItobПараметрыКомандДляТерминалов.Содержание КАК СодержаниеКоманды,
				   |	"+СтрокаВыборкаЗапроса+"
				   |	ItobАктуальностьДанныхТерминалов.ДанныеДатчиков КАК ДанныеДатчиков
	               |ИЗ
	               |	РегистрСведений.ItobПривязкиТерминалов.СрезПоследних(&Период, ТерминалУстановлен) КАК ItobПривязкиТерминаловСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ItobАктуальностьДанныхТерминалов КАК ItobАктуальностьДанныхТерминалов
	               |		ПО ItobПривязкиТерминаловСрезПоследних.Терминал = ItobАктуальностьДанныхТерминалов.Терминал
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ItobПараметрыКомандДляТерминалов КАК ItobПараметрыКомандДляТерминалов
				   |		ПО ItobПараметрыКомандДляТерминалов.МодельТерминала = ItobПривязкиТерминаловСрезПоследних.Терминал.Модель
				   |			И ItobПараметрыКомандДляТерминалов.Команда = &ВыполнитьКоманду
				   |		"+СтрокаСоединенияЗапроса+"
	               |ГДЕ (НЕ ItobПараметрыКомандДляТерминалов.Содержание ЕСТЬ NULL) "+?(НазначеннаяКоманда.ОтборПоТрекерам," И ItobПривязкиТерминаловСрезПоследних.Терминал В (ВЫБРАТЬ Терминал ИЗ Справочник.ItobНазначенныеКоманды.Трекеры ГДЕ Ссылка = &НазначеннаяКоманда)","");
			
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОтборКомандыВыполняется = Истина;
		Для каждого СтрУсловие Из ТаблицаУсловийКоманды Цикл
			
			ОтборКомандыВыполняется = УсловиеНазначеннойКомандыВыполняется(Выборка, СтрУсловие.Показатель, 
						СтрУсловие.ВидСравнения, СтрУсловие.Значение);
			
			Если НЕ ОтборКомандыВыполняется Тогда
		
				Прервать;
		
			КонецЕсли;						
		
		КонецЦикла;
		
		Если НЕ ОтборКомандыВыполняется Тогда
			Продолжить;		
		КонецЕсли;		
		
		ТекстОшибки = "";
		
		// Подсистема ItobЦентрСпутниковогоМониторинга.КомандыДляТрекеров
		ВыполнитьКомандуНаСервере(Выборка.Терминал, Выборка.СодержаниеКоманды, ТекстОшибки);		
	
	КонецЦикла;

КонецПроцедуры

// Возвращает настройки отображения терминала, в виде структуры
//
Функция ПолучитьНастройкиОтображенияТерминала(Терминал) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Терминал", Терминал);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(ЕСТЬNULL(ItobНастройкиОтображенияОбъектовУточненный.ДлинаШлейфаOnlineСлежение, ItobНастройкиОтображенияОбъектовОбщий.ДлинаШлейфаOnlineСлежение), 3) КАК ДлинаШлейфаOnlineСлежение
	               |ИЗ
	               |	РегистрСведений.ItobПривязкиТерминалов.СрезПоследних(, ТерминалУстановлен) КАК ItobПривязкиТерминаловСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ItobНастройкиОтображенияОбъектов КАК ItobНастройкиОтображенияОбъектовУточненный
	               |		ПО ItobПривязкиТерминаловСрезПоследних.Объект = ItobНастройкиОтображенияОбъектовУточненный.Объект
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ItobНастройкиОтображенияОбъектов КАК ItobНастройкиОтображенияОбъектовОбщий
	               |		ПО (ItobНастройкиОтображенияОбъектовОбщий.Объект В (НЕОПРЕДЕЛЕНО, ItobНастройкиОтображенияОбъектовОбщий.Объект = ЗНАЧЕНИЕ(Справочник.ItobТранспортныеСредства.ПустаяСсылка), ItobНастройкиОтображенияОбъектовОбщий.Объект = ЗНАЧЕНИЕ(Справочник.ItobВодители.ПустаяСсылка)))
	               |ГДЕ
	               |	ItobПривязкиТерминаловСрезПоследних.Терминал = &Терминал";
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"ItobТранспортныеСредства", ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("ТранспортныеСредства"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"ItobВодители", ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("Водители"));
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		ДлинаШлейфаOnlineСлежение = МИН(Выборка.ДлинаШлейфаOnlineСлежение,25);
	Иначе
		ДлинаШлейфаOnlineСлежение = 3;	
	КонецЕсли;
	
	Возврат Новый Структура("ДлинаШлейфаOnlineСлежение", ДлинаШлейфаOnlineСлежение);

КонецФункции // ПолучитьНастройкиОтображенияТерминала()

#КонецОбласти 

#Область ФункцииРаботыССервисомCsmCvs

// Возвращает адрес сервиса CsmSvc
//
Функция ПолучитьАдресСервисаCsmSvcКлиент() Экспорт

	Возврат ПараметрыСеанса.ItobАдресCsmSvc.Получить("КлиентАдрес")+":"+Формат(ПараметрыСеанса.ItobАдресCsmSvc.Получить("КлиентПорт"),"ЧГ=0");	

КонецФункции // ПолучитьАдресСервисаCsmSvcКлиент()

Функция ПолучитьАдресСервисаCsmSvcСервер() Экспорт

	Возврат ПараметрыСеанса.ItobАдресCsmSvc.Получить("СерверАдрес")+":"+Формат(ПараметрыСеанса.ItobАдресCsmSvc.Получить("СерверПорт"),"ЧГ=0");	

КонецФункции // ПолучитьАдресСервисаCsmSvcСервер()

// Проверка доступности сервера CsmSvc
// При этом запрашивается тестовая страница по протоколу HTTP.
//
// Параметры
//  АдресСервера  - Адрес сервера в формате <IP>:<Порт>, или <DNS имя>:<Порт>.
//
// Возвращаемое значение:
//  Булево   - Истина если доступен, Ложь если не доступен.
//
Функция ПроверитьДоступностьСервисаCsmSvc(АдресСервера, ПортСервера=Неопределено) Экспорт
	
	Если АдресСервера = Неопределено Тогда
	 	АдресСервера = ПолучитьАдресСервисаCsmSvcСервер();
	КонецЕсли; 
	
	ПозицияДвиженияТч = Найти(АдресСервера,":"); 
	Если ПозицияДвиженияТч > 0 Тогда
		ИмяСервера = Лев(АдресСервера, ПозицияДвиженияТч-1);
		Порт = Число(Сред(АдресСервера, ПозицияДвиженияТч+1));
		
	Иначе
		ИмяСервера = АдресСервера;
		Порт = ?(ПортСервера=Неопределено, 80, ПортСервера);
	
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(ИмяСервера,Порт);
	
	Попытка
		Соединение.Получить("/index.html", КаталогВременныхФайлов()+"TestRequest.html");		
		Возврат Истина;
		
	Исключение
		Возврат Ложь;
	
	КонецПопытки;	

КонецФункции // ПроверитьДоступностьСервисаCsmSvc()

#КонецОбласти 

#Область ФункцииВзаимодействияСКартой

// Возвращает адрес карты
//
Функция ПолучитьАдресКарты(АтрибутыКарты="") Экспорт

	Если НЕ ПараметрыСеанса.ItobАдресCsmSvc.Получить("НастройкиОпределены") Тогда
		Результат = "<html>
					|<head>
					|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
					|<title>Ошибка отображения карты</title>
					|</head>
					|<body>
					|<div style=""left:0;right:0;top:0;bottom:0;text-align:center;"">
					|<div style=""width:300px;height:100px;text-align:center;border-color:#F00;border-style:solid;border-width:2px;"">
					|<font style=""font:'Courier New', Courier, monospace;font-size:13px;"">Ошибка отображения карты!<br>
  					|В настройках системы не указан<br>
  					|адрес сервера CsmSvc!</font>
					|</div></div></body></html>";
					
		Возврат Результат;
			
	КонецЕсли;
	
	ВерсияCsmSvc = ПолучитьВерсиюCsmSvc();
	ПолныйНомерВерсииЧисло = 0;
	
	Если НЕ ПустаяСтрока(ВерсияCsmSvc) Тогда
		
		Стр2 = СтрЗаменить(ВерсияCsmSvc,".",Символы.ПС);
		
		Редакция = СтрПолучитьСтроку(Стр2,1);
		Подредакция  = СтрПолучитьСтроку(Стр2,2);
		Релиз = СтрПолучитьСтроку(Стр2,3);
		
		ПолныйНомерВерсииЧисло = Редакция*10000 + Подредакция*100 + Релиз;
		
	КонецЕсли;
	
	АдресСервераОбращениеКлиента = ПараметрыСеанса.ItobАдресCsmSvc.Получить("КлиентАдрес") + ":"
			+ Формат(ПараметрыСеанса.ItobАдресCsmSvc.Получить("КлиентПорт"),"ЧГ=0");
	
	Если ПустаяСтрока(ВерсияCsmSvc) Тогда
		
		Результат = "<html>
					|<head>
					|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
					|<title>Ошибка отображения карты</title>
					|</head>
					|<body>
					|<div style=""left:0;right:0;top:0;bottom:0;text-align:center;"">
					|<div style=""width:300px;height:100px;text-align:center;border-color:#F00;border-style:solid;border-width:2px;"">
					|<font style=""font:'Courier New', Courier, monospace;font-size:13px;"">Ошибка отображения карты!<br>
  					|Не удается запросить номер версии карты,<br /> 
					|проверьте влияние прокси-сервера при обращении к адресу 
					|"+АдресСервераОбращениеКлиента+"/map/map.html</font>
					|</div></div></body></html>";
					
		Возврат Результат;
		
	ИначеЕсли ПолныйНомерВерсииЧисло < 10106 Тогда
		
		СсылкаНаМастер = "<a href=""v8config://Обработка.ItobМастерНастройкиСервисаCsmSvc.Форма"">Открыть мастер настройки CsmSvc</a>";
				
		Результат = "<html>
					|<head>
					|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
					|<title>Ошибка отображения карты</title>
					|</head>
					|<body>
					|<div style=""left:0;right:0;top:0;bottom:0;text-align:center;"">
					|<div style=""width:300px;height:100px;text-align:center;border-color:#F00;border-style:solid;border-width:2px;"">
					|<font style=""font:'Courier New', Courier, monospace;font-size:13px;"">Ошибка отображения карты!<br>
  					|Требуется версия CsmSvc не ниже 1.1.5<br>"+СсылкаНаМастер+"					
					|</font>
					|</div></div></body></html>";
					
		Возврат Результат;			
	
	КонецЕсли;
							
	ТекстHTML = ПолучитьОбщийМакет("ItobКарта").ПолучитьТекст();
	
	КонтентКарты = ПолучитьКонтентКарты();
	
	ТекстHTML = СтрЗаменить(ТекстHTML, "// $MAPS", "// $MAPS" + Символы.ПС + КонтентКарты.КонтентMAPS);
	ТекстHTML = СтрЗаменить(ТекстHTML, "// $ATTRIBUTES", "// $ATTRIBUTES" + Символы.ПС + АтрибутыКарты);
	ТекстHTML = СтрЗаменить(ТекстHTML, "<!-- // $HEAD -->", "<!-- // $HEAD -->" + Символы.ПС + КонтентКарты.КонтентHEAD);
	
	СисИнфо = Новый СистемнаяИнформация;
	Если ПустаяСтрока(СисИнфо.ИнформацияПрограммыПросмотра) Тогда
		// Толстый, или тонкий клиент
		// В качестве результата выдаем ссылку
		
		ТекстHTML = СтрЗаменить(ТекстHTML,"$MapServerName","/map");
		Результат = ПолучитьСсылкуНаСтраницуКарты(ТекстHTML);
		
	Иначе
		
		СсылкаБазы = ПолучитьНавигационнуюСсылкуИнформационнойБазы();
		Если НРег(Лев(СсылкаБазы,5)) = "https" Тогда
			Протокол = "https";
		Иначе
			Протокол = "http";
		КонецЕсли;		
		
		// Веб клиент, в качестве результата - контент страницы
		ТекстHTML = СтрЗаменить(ТекстHTML,"$MapServerName",Протокол+"://"+АдресСервераОбращениеКлиента+"/map");
		Результат = ТекстHTML;
		
	КонецЕсли;					
	
	Возврат Результат;

КонецФункции // ПолучитьАдресСервераCsmSvc()

#КонецОбласти 

#Область ФункцииРаботыСВременем

// Возвращает параметры сдвига времени.
//
Функция ПолучитьПараметрыСдвигаВремени(УниверсальноеВремя = Неопределено) Экспорт
	УниверсальноеВремя = ?(УниверсальноеВремя = Неопределено ИЛИ НЕ ТипЗнч(УниверсальноеВремя) = Тип("Дата"), ТекущаяУниверсальнаяДата(), УниверсальноеВремя); 
	ЧасовойПоясСеанса = ЧасовойПоясСеанса();
	
	СдвигВремени = СмещениеСтандартногоВремени(ЧасовойПоясСеанса, УниверсальноеВремя);
	СдвигЛетнееВремя = СмещениеЛетнегоВремени(ЧасовойПоясСеанса, УниверсальноеВремя);
	Если СдвигЛетнееВремя > 0 Тогда
		ВариантПереводаВремени = Перечисления.ItobВариантыПереводаВремени.Европейский;		
	Иначе
		ВариантПереводаВремени = Неопределено;	
	КонецЕсли;
	
	Возврат Новый Структура("СдвигВремени,СдвигЛетнееВремя,ВариантПереводаВремени", СдвигВремени, СдвигЛетнееВремя, ВариантПереводаВремени);

КонецФункции // ПолучитьПараметрыСдвигаВремени()

// Приводит переданную дату к универсальному времени
// (Стандартная функция некорректно работает с летним временем)
//
Функция ПривестиКДатеВремениПоГринвичу(ДатаВремя) Экспорт
						
	Рез = ДатаВремя;
	
	ПараметрыСдвигаВремени = ПолучитьПараметрыСдвигаВремени();
					
	ВариантПереводаВремени = ПараметрыСдвигаВремени.ВариантПереводаВремени;
	
	Если ВариантПереводаВремени = Перечисления.ItobВариантыПереводаВремени.Европейский Тогда
		
		// Перевод вперед в крайнее воскресенье марта в 2 часа
		НачалоИнтервала = НачалоДня(КонецНедели(Дата(Год(ДатаВремя),4,1,0,0,0))-7*24*3600)+3*3600;
		// перевод назад в крайнее воскресенье октября в 3 часа
		КонецИнтервала = НачалоДня(КонецНедели(Дата(Год(ДатаВремя),11,1,0,0,0))-7*24*3600)+3*3600;
		
		Если НачалоИнтервала <= ДатаВремя И ДатаВремя <= КонецИнтервала Тогда
			
			Рез = ДатаВремя - 60*60; 	
			
		КонецЕсли;
		
	ИначеЕсли ВариантПереводаВремени = Перечисления.ItobВариантыПереводаВремени.Американский Тогда
		
		// Перевод вперед во второе воскресенье марта в 2:00
		НачалоИнтервала = НачалоДня(КонецНедели(Дата(Год(ДатаВремя),3,1,0,0,0))+7*24*3600)+3*3600;
		// Перевод назад в первое воскресенье ноября в 3:00
		КонецИнтервала = НачалоДня(КонецНедели(Дата(Год(ДатаВремя),11,1,0,0,0)))+3*3600;
		
		Если НачалоИнтервала <= ДатаВремя И ДатаВремя <= КонецИнтервала Тогда
			
			Рез = ДатаВремя - 60*60; 	
			
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат УниверсальноеВремя(Рез, ЧасовойПоясСеанса());	

КонецФункции // ПривестиКДатеВремениПоГринвичу()

// Производит установку часового пояса текущего сеанса
//
Процедура УстановкаЧасовогоПоясаСеанса(МестныйЧасовойПояс) Экспорт
	
	УстановитьЧасовойПоясСеанса(МестныйЧасовойПояс);
	
КонецПроцедуры

#КонецОбласти 

#Область ФункцииОбработкиДанныхТрекеров

// Возвращает данные датчика объекта мониторинга
//
Функция ПолучитьДанныеДатчикаОбъекта(Объект, НачДата, КонДата, Датчик, РасширитьГраницыКоличествоЗаписей=0) Экспорт
	
	ОбщаяТаблицаДанных = Новый ТаблицаЗначений;
	ОбщаяТаблицаДанных.Колонки.Добавить("Терминал", Новый ОписаниеТипов("СправочникСсылка.ItobТерминалы"));
	ОбщаяТаблицаДанных.Колонки.Добавить("Датчик", Новый ОписаниеТипов("СправочникСсылка.ItobДатчики"));
	ОбщаяТаблицаДанных.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ОбщаяТаблицаДанных.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,0)));
	ОбщаяТаблицаДанных.Колонки.Добавить("Широта", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,7)));
	ОбщаяТаблицаДанных.Колонки.Добавить("Долгота", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,7)));	
	ОбщаяТаблицаДанных.Колонки.Добавить("Скорость", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(3,0)));
	ОбщаяТаблицаДанных.Колонки.Добавить("Направление", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(3,0)));
	ОбщаяТаблицаДанных.Колонки.Добавить("Расшифровка", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки()));
	
	// В качестве датчика может передаваться массив
	Если ТипЗнч(Датчик) = Тип("Массив") Тогда
		МассивДатчиков = Датчик;
		
	Иначе
		МассивДатчиков = Новый Массив;
		МассивДатчиков.Добавить(Датчик);
	
	КонецЕсли;
	
	Для каждого ТекущийДатчик Из МассивДатчиков Цикл
		КодДатчикаСтр = Формат(ТекущийДатчик.Код, "ЧН=0; ЧГ=0");
		ИмяКолонки = "Значение"+КодДатчикаСтр;
		Если ОбщаяТаблицаДанных.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
			ОбщаяТаблицаДанных.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,0)));
		КонецЕсли;
	КонецЦикла;
	
	// Срез первых
	СрезНаНачало = РегистрыСведений.ItobПривязкиТерминалов.ПолучитьПоследнее(НачалоДня(НачДата)-1, Новый Структура("Объект", Объект));
	
	ТекущаяСтруктураПривязки = Новый Структура("Период,Терминал,ТерминалУстановлен");
	ЗаполнитьЗначенияСвойств(ТекущаяСтруктураПривязки, СрезНаНачало);	
	ТекущаяСтруктураПривязки.Период = НачДата;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата", НачДата);
	Запрос.УстановитьПараметр("КонДата", КонДата);
	Запрос.УстановитьПараметр("Объект", Объект);	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ItobПривязкиТерминалов.Период КАК Период,
	               |	ItobПривязкиТерминалов.Терминал,
	               |	ItobПривязкиТерминалов.ТерминалУстановлен
	               |ИЗ
	               |	РегистрСведений.ItobПривязкиТерминалов КАК ItobПривязкиТерминалов
	               |ГДЕ
	               |	ItobПривязкиТерминалов.Период МЕЖДУ НАЧАЛОПЕРИОДА(&НачДата, ДЕНЬ) И &КонДата
	               |	И ItobПривязкиТерминалов.Объект = &Объект
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ТекущаяСтруктураПривязки.Период = Выборка.Период Тогда
			ЗаполнитьЗначенияСвойств(ТекущаяСтруктураПривязки, Выборка);
			Продолжить;
		
		КонецЕсли;
				
		Если ТекущаяСтруктураПривязки.ТерминалУстановлен = Истина Тогда
			
			ТабДанных = ПолучитьДанныеДатчикаПоТерминалу(ТекущаяСтруктураПривязки.Период, НачалоДня(Выборка.Период)-1, ТекущаяСтруктураПривязки.Терминал, Датчик, РасширитьГраницыКоличествоЗаписей);
			Если ТабДанных <> Неопределено Тогда
				Для Каждого ТекСтрокаДанных Из ТабДанных Цикл
					ЗаполнитьЗначенияСвойств(ОбщаяТаблицаДанных.Добавить(), ТекСтрокаДанных);				
				КонецЦикла;
			
			КонецЕсли;
		
		КонецЕсли;		
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтруктураПривязки, Выборка);
	
	КонецЦикла;
	
	Если ТекущаяСтруктураПривязки.ТерминалУстановлен = Истина Тогда
		
		ТабДанных = ПолучитьДанныеДатчикаПоТерминалу(ТекущаяСтруктураПривязки.Период, КонДата, ТекущаяСтруктураПривязки.Терминал, Датчик, РасширитьГраницыКоличествоЗаписей);
		Если ТабДанных <> Неопределено Тогда
			Для Каждого ТекСтрокаДанных Из ТабДанных Цикл
				ЗаполнитьЗначенияСвойств(ОбщаяТаблицаДанных.Добавить(), ТекСтрокаДанных);
			КонецЦикла;			
		
		КонецЕсли;
	
	КонецЕсли;	
		
	Возврат ОбщаяТаблицаДанных;	

КонецФункции // ПолучитьДанныеДатчикаОбъекта()

// Формирует маршрут терминала по координатам трека
//
Функция СформироватьМаршрутПоТерминалу(ТерминалСсылка, НачДата, КонДата, Маршрут, ВыводитьСообщения=Истина, ВключатьДанныеДатчиков=Неопределено) Экспорт
		
	ПараметрыСдвигаВремени = ПолучитьПараметрыСдвигаВремени();
	ПараметрыОбработкиДанныхТерминала = ПолучитьПараметрыОбработкиДанных(ТерминалСсылка);
	
	ЗапросБазовыеДанные = Новый Запрос;
	ЗапросБазовыеДанные.УстановитьПараметр("Терминал", ТерминалСсылка);
	ЗапросБазовыеДанные.УстановитьПараметр("КодТерминала", ТерминалСсылка.Код);
	ЗапросБазовыеДанные.УстановитьПараметр("НачДата", ПривестиКДатеВремениПоГринвичу(НачДата));
	ЗапросБазовыеДанные.УстановитьПараметр("КонДата", ПривестиКДатеВремениПоГринвичу(КонДата));
	
	Если ItobВызовСервераПовтИсп.ДанныеТерминаловБратьИзБазыIMCS() Тогда
		ЗапросБазовыеДанные.Текст = "ВЫБРАТЬ
		                            |	ЗапросПерваяТочка.Период,
		                            |	ЗапросПерваяТочка.Широта,
		                            |	ЗапросПерваяТочка.Долгота,
		                            |	ЗапросПерваяТочка.Скорость,
		                            |	ЗапросПерваяТочка.Направление,
		                            |	ЗапросПерваяТочка.ЧислоСпутников,
		                            |	ЗапросПерваяТочка.НевалидныеДанные,
		                            |	ЗапросПерваяТочка.ДанныеДатчиков
		                            |ИЗ
		                            |	(ВЫБРАТЬ ПЕРВЫЕ 1
		                            |		ДанныеТерминалов.Период КАК Период,
		                            |		ДанныеТерминалов.Широта КАК Широта,
		                            |		ДанныеТерминалов.Долгота КАК Долгота,
		                            |		ДанныеТерминалов.Скорость КАК Скорость,
		                            |		ДанныеТерминалов.Направление КАК Направление,
		                            |		ДанныеТерминалов.ЧислоСпутников КАК ЧислоСпутников,
		                            |		ЛОЖЬ КАК НевалидныеДанные,
		                            |		ДанныеТерминалов.ДанныеДатчиков КАК ДанныеДатчиков
		                            |	ИЗ
		                            |		ВнешнийИсточникДанных.ItobДанныеСервераСбораДанных.Таблица.ItobДанныеТерминаловIMCS КАК ДанныеТерминалов
		                            |	ГДЕ
		                            |		ДанныеТерминалов.Период <= &НачДата
		                            |		И ДанныеТерминалов.КодТерминала = &КодТерминала
		                            |		И ДанныеТерминалов.Широта <> 0
		                            |		И ДанныеТерминалов.Долгота <> 0
		                            |		И ДанныеТерминалов.ЧислоСпутников >= 3
		                            |	
		                            |	УПОРЯДОЧИТЬ ПО
		                            |		ДанныеТерминалов.Период УБЫВ) КАК ЗапросПерваяТочка
		                            |
		                            |ОБЪЕДИНИТЬ ВСЕ
		                            |
		                            |ВЫБРАТЬ
		                            |	ДанныеТерминалов.Период,
		                            |	ДанныеТерминалов.Широта,
		                            |	ДанныеТерминалов.Долгота,
		                            |	ДанныеТерминалов.Скорость,
		                            |	ДанныеТерминалов.Направление,
		                            |	ДанныеТерминалов.ЧислоСпутников,
		                            |	ЛОЖЬ,
		                            |	ДанныеТерминалов.ДанныеДатчиков
		                            |ИЗ
		                            |	ВнешнийИсточникДанных.ItobДанныеСервераСбораДанных.Таблица.ItobДанныеТерминаловIMCS КАК ДанныеТерминалов
		                            |ГДЕ
		                            |	ДанныеТерминалов.Период > &НачДата
		                            |	И ДанныеТерминалов.Период < &КонДата
		                            |	И ДанныеТерминалов.КодТерминала = &КодТерминала
		                            |	И ДанныеТерминалов.Широта <> 0
		                            |	И ДанныеТерминалов.Долгота <> 0
		                            |	И ДанныеТерминалов.ЧислоСпутников >= 3
		                            |
		                            |ОБЪЕДИНИТЬ ВСЕ
		                            |
		                            |ВЫБРАТЬ
		                            |	ЗапросКрайняяТочка.Период,
		                            |	ЗапросКрайняяТочка.Широта,
		                            |	ЗапросКрайняяТочка.Долгота,
		                            |	ЗапросКрайняяТочка.Скорость,
		                            |	ЗапросКрайняяТочка.Направление,
		                            |	ЗапросКрайняяТочка.ЧислоСпутников,
		                            |	ЗапросКрайняяТочка.НевалидныеДанные,
		                            |	ЗапросКрайняяТочка.ДанныеДатчиков
		                            |ИЗ
		                            |	(ВЫБРАТЬ ПЕРВЫЕ 1
		                            |		ДанныеТерминалов.Период КАК Период,
		                            |		ДанныеТерминалов.Широта КАК Широта,
		                            |		ДанныеТерминалов.Долгота КАК Долгота,
		                            |		ДанныеТерминалов.Скорость КАК Скорость,
		                            |		ДанныеТерминалов.Направление КАК Направление,
		                            |		ДанныеТерминалов.ЧислоСпутников КАК ЧислоСпутников,
		                            |		ЛОЖЬ КАК НевалидныеДанные,
		                            |		ДанныеТерминалов.ДанныеДатчиков КАК ДанныеДатчиков
		                            |	ИЗ
		                            |		ВнешнийИсточникДанных.ItobДанныеСервераСбораДанных.Таблица.ItobДанныеТерминаловIMCS КАК ДанныеТерминалов
		                            |	ГДЕ
		                            |		ДанныеТерминалов.Период >= &КонДата
		                            |		И ДанныеТерминалов.КодТерминала = &КодТерминала
		                            |		И ДанныеТерминалов.Широта <> 0
		                            |		И ДанныеТерминалов.Долгота <> 0
		                            |		И ДанныеТерминалов.ЧислоСпутников >= 3
		                            |	
		                            |	УПОРЯДОЧИТЬ ПО
		                            |		ДанныеТерминалов.Период) КАК ЗапросКрайняяТочка";
		ВнешниеИсточникиДанных.ItobДанныеСервераСбораДанных.НачатьТранзакцию(,УровеньИзоляцииТранзакций.ЧтениеНезафиксированных);
		РезультатБазовогоЗапроса = ЗапросБазовыеДанные.Выполнить();
		// Без метода отмены транзакции, так как используется только чтение данных из внешнего источника данных.
		ВнешниеИсточникиДанных.ItobДанныеСервераСбораДанных.ЗафиксироватьТранзакцию();
			
	Иначе
		ЗапросБазовыеДанные.Текст = "ВЫБРАТЬ
		                            |	ЗапросПерваяТочка.Период,
		                            |	ЗапросПерваяТочка.Широта,
		                            |	ЗапросПерваяТочка.Долгота,
		                            |	ЗапросПерваяТочка.Скорость,
		                            |	ЗапросПерваяТочка.Направление,
		                            |	ЗапросПерваяТочка.ЧислоСпутников,
		                            |	ЗапросПерваяТочка.НевалидныеДанные,
		                            |	ЗапросПерваяТочка.ДанныеДатчиков
		                            |ИЗ
		                            |	(ВЫБРАТЬ ПЕРВЫЕ 1
		                            |		ДанныеТерминалов.Период КАК Период,
		                            |		ДанныеТерминалов.Широта КАК Широта,
		                            |		ДанныеТерминалов.Долгота КАК Долгота,
		                            |		ДанныеТерминалов.Скорость КАК Скорость,
		                            |		ДанныеТерминалов.Направление КАК Направление,
		                            |		ДанныеТерминалов.ЧислоСпутников КАК ЧислоСпутников,
		                            |		ДанныеТерминалов.НевалидныеДанные КАК НевалидныеДанные,
		                            |		ДанныеТерминалов.ДанныеДатчиков КАК ДанныеДатчиков
		                            |	ИЗ
		                            |		РегистрСведений.ItobДанныеТерминалов КАК ДанныеТерминалов
		                            |	ГДЕ
		                            |		ДанныеТерминалов.Период <= &НачДата
		                            |		И ДанныеТерминалов.Терминал = &Терминал
		                            |		И ДанныеТерминалов.Широта <> 0
		                            |		И ДанныеТерминалов.Долгота <> 0
		                            |		И НЕ ДанныеТерминалов.НевалидныеДанные
		                            |	
		                            |	УПОРЯДОЧИТЬ ПО
		                            |		ДанныеТерминалов.Период УБЫВ) КАК ЗапросПерваяТочка
		                            |
		                            |ОБЪЕДИНИТЬ ВСЕ
		                            |
		                            |ВЫБРАТЬ
		                            |	ДанныеТерминалов.Период,
		                            |	ДанныеТерминалов.Широта,
		                            |	ДанныеТерминалов.Долгота,
		                            |	ДанныеТерминалов.Скорость,
		                            |	ДанныеТерминалов.Направление,
		                            |	ДанныеТерминалов.ЧислоСпутников,
		                            |	ДанныеТерминалов.НевалидныеДанные,
		                            |	ДанныеТерминалов.ДанныеДатчиков
		                            |ИЗ
		                            |	РегистрСведений.ItobДанныеТерминалов КАК ДанныеТерминалов
		                            |ГДЕ
		                            |	ДанныеТерминалов.Период > &НачДата
		                            |	И ДанныеТерминалов.Период < &КонДата
		                            |	И ДанныеТерминалов.Терминал = &Терминал
		                            |	И ДанныеТерминалов.Широта <> 0
		                            |	И ДанныеТерминалов.Долгота <> 0
		                            |	И НЕ ДанныеТерминалов.НевалидныеДанные
		                            |
		                            |ОБЪЕДИНИТЬ ВСЕ
		                            |
		                            |ВЫБРАТЬ
		                            |	ЗапросКрайняяТочка.Период,
		                            |	ЗапросКрайняяТочка.Широта,
		                            |	ЗапросКрайняяТочка.Долгота,
		                            |	ЗапросКрайняяТочка.Скорость,
		                            |	ЗапросКрайняяТочка.Направление,
		                            |	ЗапросКрайняяТочка.ЧислоСпутников,
		                            |	ЗапросКрайняяТочка.НевалидныеДанные,
		                            |	ЗапросКрайняяТочка.ДанныеДатчиков
		                            |ИЗ
		                            |	(ВЫБРАТЬ ПЕРВЫЕ 1
		                            |		ДанныеТерминалов.Период КАК Период,
		                            |		ДанныеТерминалов.Широта КАК Широта,
		                            |		ДанныеТерминалов.Долгота КАК Долгота,
		                            |		ДанныеТерминалов.Скорость КАК Скорость,
		                            |		ДанныеТерминалов.Направление КАК Направление,
		                            |		ДанныеТерминалов.ЧислоСпутников КАК ЧислоСпутников,
		                            |		ДанныеТерминалов.НевалидныеДанные КАК НевалидныеДанные,
		                            |		ДанныеТерминалов.ДанныеДатчиков КАК ДанныеДатчиков
		                            |	ИЗ
		                            |		РегистрСведений.ItobДанныеТерминалов КАК ДанныеТерминалов
		                            |	ГДЕ
		                            |		ДанныеТерминалов.Период >= &КонДата
		                            |		И ДанныеТерминалов.Терминал = &Терминал
		                            |		И ДанныеТерминалов.Широта <> 0
		                            |		И ДанныеТерминалов.Долгота <> 0
		                            |		И НЕ ДанныеТерминалов.НевалидныеДанные
		                            |	
		                            |	УПОРЯДОЧИТЬ ПО
		                            |		ДанныеТерминалов.Период) КАК ЗапросКрайняяТочка";
		РезультатБазовогоЗапроса = ЗапросБазовыеДанные.Выполнить();	
	КонецЕсли;
	
	ТаблицаБазовыхДанных = РезультатБазовогоЗапроса.Выгрузить();
	
	Запрос = Новый Запрос;				
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Терминал", ТерминалСсылка);
	Запрос.УстановитьПараметр("МинимальнаяСкоростьДвижения", ПараметрыОбработкиДанныхТерминала.МинимальнаяСкоростьДвижения);	
	Запрос.УстановитьПараметр("СдвигВремени", ПараметрыСдвигаВремени.СдвигВремени);
	Запрос.УстановитьПараметр("ВариантПереводаНаЛетнееВремя", ПараметрыСдвигаВремени.ВариантПереводаВремени);
	Запрос.УстановитьПараметр("СдвигЛетнееВремя", ПараметрыСдвигаВремени.СдвигЛетнееВремя);	
	Запрос.УстановитьПараметр("ТаблицаБазовыхДанных", ТаблицаБазовыхДанных);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаБазовыхДанных.Период,
	               |	ТаблицаБазовыхДанных.Широта,
	               |	ТаблицаБазовыхДанных.Долгота,
	               |	ТаблицаБазовыхДанных.Скорость,
	               |	ТаблицаБазовыхДанных.Направление,
	               |	ТаблицаБазовыхДанных.ЧислоСпутников,
	               |	ТаблицаБазовыхДанных.НевалидныеДанные,
	               |	ТаблицаБазовыхДанных.ДанныеДатчиков
	               |ПОМЕСТИТЬ ДанныеТерминалов
	               |ИЗ
	               |	&ТаблицаБазовыхДанных КАК ТаблицаБазовыхДанных
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДанныеТерминалов.Период, СЕКУНДА, &СдвигВремени), СЕКУНДА, ВЫБОР
	               |			КОГДА &ВариантПереводаНаЛетнееВремя = ЗНАЧЕНИЕ(Перечисление.ItobВариантыПереводаВремени.Европейский)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ДанныеТерминалов.Период МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДанныеТерминалов.Период, ГОД), МЕСЯЦ, 3), НЕДЕЛЯ), НЕДЕЛЯ, -1), ДЕНЬ), ЧАС, 2) И ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДанныеТерминалов.Период, ГОД), МЕСЯЦ, 10), НЕДЕЛЯ), НЕДЕЛЯ, -1), ДЕНЬ), ЧАС, 2)
	               |							ТОГДА &СдвигЛетнееВремя
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |			КОГДА &ВариантПереводаНаЛетнееВремя = ЗНАЧЕНИЕ(Перечисление.ItobВариантыПереводаВремени.Американский)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ДанныеТерминалов.Период МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДанныеТерминалов.Период, ГОД), МЕСЯЦ, 2), НЕДЕЛЯ), НЕДЕЛЯ, 1), ДЕНЬ), ЧАС, 2) И ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДанныеТерминалов.Период, ГОД), МЕСЯЦ, 10), НЕДЕЛЯ), НЕДЕЛЯ, 0), ДЕНЬ), ЧАС, 2)
	               |							ТОГДА &СдвигЛетнееВремя
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК Период,
	               |	ДанныеТерминалов.Широта,
	               |	ДанныеТерминалов.Долгота,
	               |	ДанныеТерминалов.Скорость,
	               |	ДанныеТерминалов.Направление,
	               |	&Терминал КАК Терминал,
	               |	ВЫБОР
	               |		КОГДА ДанныеТерминалов.Скорость > &МинимальнаяСкоростьДвижения
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ItobСостоянияТерминалов.Движение)
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ItobСостоянияТерминалов.Стоянка)
	               |	КОНЕЦ КАК Состояние,
	               |	ДанныеТерминалов.Период КАК ПериодUTC0,
	               |	ДанныеТерминалов.НевалидныеДанные КАК НевалидныеДанные,
				   |	ЕСТЬNULL(ДанныеТерминаловДополнения.ДанныеВиртуальныхДатчиков, """") КАК ДанныеВиртуальныхДатчиков,
	               |	ДанныеТерминалов.ДанныеДатчиков КАК ДанныеДатчиков
	               |ИЗ
	               |	ДанныеТерминалов КАК ДанныеТерминалов
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ItobДанныеТерминаловДополнения КАК ДанныеТерминаловДополнения
	               |		ПО ДанныеТерминалов.Период = ДанныеТерминаловДополнения.ДатаВремя
	               |			И (ДанныеТерминаловДополнения.Терминал = &Терминал)
				   |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПериодUTC0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ДанныеТерминалов";
				   
	ТаблицаТочекМаршрута = Запрос.Выполнить().Выгрузить();
	КоличествоТочек = ТаблицаТочекМаршрута.Количество();
	
	Если КоличествоТочек = 0 Тогда
		Возврат Ложь;		
	ИначеЕсли КоличествоТочек = 1
		И (ТаблицаТочекМаршрута[0].Период < НачДата
		ИЛИ ТаблицаТочекМаршрута[0].Период > КонДата) Тогда
		// Данная точка не относится к запрашиваемому периоду
		Возврат Ложь;		
	ИначеЕсли КоличествоТочек = 2
		И ТаблицаТочекМаршрута[0].Период < НачДата
		И ТаблицаТочекМаршрута[1].Период > КонДата Тогда
		// Данные точки не относятся к запрашиваемому периоду
		Возврат Ложь;	
	КонецЕсли;
	
	Если ТипЗнч(ВключатьДанныеДатчиков) = Тип("Массив") И ВключатьДанныеДатчиков.Количество() > 0 Тогда
		
		СоотвДатчики = Новый Соответствие;
		МассивКодыДатчиков = Новый Массив;
		
		Для каждого Датчик Из ВключатьДанныеДатчиков Цикл
			КодДатчика = Формат(Датчик.Код,"ЧН=0; ЧГ=0");
			ТаблицаТочекМаршрута.Колонки.Добавить("ЗначениеДатчика"+КодДатчика, Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,0)));			
			СоотвДатчики.Вставить(Датчик.Код, "ЗначениеДатчика"+КодДатчика);
			МассивКодыДатчиков.Добавить(Датчик.Код);
		КонецЦикла;
		
		Если ItobВызовСервераПовтИсп.ИспользованиеCsmHandlerВключено() Тогда
			МассивДанныеДатчиков = ТаблицаТочекМаршрута.ВыгрузитьКолонку("ДанныеДатчиков");	
			МассивДанныеДатчиковДоп = ТаблицаТочекМаршрута.ВыгрузитьКолонку("ДанныеВиртуальныхДатчиков");
						
			SafeArrayДанныеДатчиков    = Новый COMSafeArray(МассивДанныеДатчиков, "VT_VARIANT");
			SafeArrayДанныеДатчиковДоп = Новый COMSafeArray(МассивДанныеДатчиковДоп, "VT_VARIANT");
			SafeArrayКодыДатчиков      = Новый COMSafeArray(МассивКодыДатчиков, "VT_VARIANT");
			
			ОбъектCsmHandler = ItobВызовСервераПовтИсп.ПолучитьОбъектCsmHandler();
			SafeArrayРезультат = ОбъектCsmHandler.StringsTwiceToSensorDataArray(SafeArrayДанныеДатчиков, SafeArrayДанныеДатчиковДоп, МассивКодыДатчиков);
			МассивРезультат = SafeArrayРезультат.Выгрузить();
			
			Для ИндексМассиваДатчики=0 По МассивКодыДатчиков.Количество()-1 Цикл
				КодДатчикаСтрока = Формат(МассивКодыДатчиков[ИндексМассиваДатчики],"ЧН=0; ЧГ=0");
				ТаблицаТочекМаршрута.ЗагрузитьКолонку(МассивРезультат[ИндексМассиваДатчики], "ЗначениеДатчика"+КодДатчикаСтрока);			
			КонецЦикла;
			
		Иначе
			
			Для каждого СтрТаблицыТочек Из ТаблицаТочекМаршрута Цикл				
				СтруктураДанныеДатчиков = ItobОбщегоНазначенияКлиентСервер.ПреобразоватьСтрокуВДанныеДатчиков(СтрТаблицыТочек.ДанныеДатчиков);
				Если НЕ ПустаяСтрока(СтрТаблицыТочек.ДанныеВиртуальныхДатчиков) Тогда
					СтруктураДанныеДатчиковДоп = ItobОбщегоНазначенияКлиентСервер.ПреобразоватьСтрокуВДанныеДатчиков(СтрТаблицыТочек.ДанныеВиртуальныхДатчиков);
					Для каждого ЭлементСтруктурыДоп Из СтруктураДанныеДатчиковДоп Цикл
						СтруктураДанныеДатчиков.Вставить(ЭлементСтруктурыДоп.Ключ, ЭлементСтруктурыДоп.Значение);
					КонецЦикла;			
				КонецЕсли;				
				
				Для каждого ЭлементСоответствия Из СоотвДатчики Цикл
					ЗначениеДатчика = СтруктураДанныеДатчиков[ЭлементСоответствия.Ключ];				
					СтрТаблицыТочек[ЭлементСоответствия.Значение] = ?(ЗначениеДатчика=Неопределено, NULL, ЗначениеДатчика);
				КонецЦикла;		
			КонецЦикла;
			
		КонецЕсли;		
		
	КонецЕсли;
	
	// Обработаем крайние точки
	Если КоличествоТочек >= 2 И ТаблицаТочекМаршрута[0].Период < НачДата
		И ТаблицаТочекМаршрута[1].Период > НачДата Тогда
		
		Если НачДата - ТаблицаТочекМаршрута[0].Период > ПараметрыОбработкиДанныхТерминала.МинимальныйИнтервалОтправкиДанных Тогда			
			ТаблицаТочекМаршрута[0].Период = НачДата;
			ТаблицаТочекМаршрута[0].Состояние = Перечисления.ItobСостоянияТерминалов.НетДанных;
			
		Иначе
			ПараметрыТочки = ПолучитьТочкуНаДату(ТаблицаТочекМаршрута[0],
			ТаблицаТочекМаршрута[1],НачДата);
			Если ПараметрыТочки.Широта <> 0 ИЛИ ПараметрыТочки.Долгота <> 0 Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаТочекМаршрута[0],ПараметрыТочки);		
			КонецЕсли;			
		
		КонецЕсли;
	
	КонецЕсли;
	
	Если КоличествоТочек >= 2 И ТаблицаТочекМаршрута[КоличествоТочек-1].Период > КонДата
		И ТаблицаТочекМаршрута[КоличествоТочек-2].Период < КонДата Тогда
		
		Если КонДата - ТаблицаТочекМаршрута[КоличествоТочек-2].
			Период > ПараметрыОбработкиДанныхТерминала.МинимальныйИнтервалОтправкиДанных Тогда
		
			ТаблицаТочекМаршрута[КоличествоТочек-1].Период = КонДата;
			ТаблицаТочекМаршрута[КоличествоТочек-1].Состояние = Перечисления.ItobСостоянияТерминалов.НетДанных;
			
		Иначе
			
			ПараметрыТочки = ПолучитьТочкуНаДату(ТаблицаТочекМаршрута[КоличествоТочек-2],
			ТаблицаТочекМаршрута[КоличествоТочек-1],КонДата);
			Если ПараметрыТочки.Широта <> 0 ИЛИ ПараметрыТочки.Долгота <> 0 Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаТочекМаршрута[КоличествоТочек-1],ПараметрыТочки);
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
		
	Маршрут = ОбработатьМаршрутОбъекта(ТаблицаТочекМаршрута, ПараметрыОбработкиДанныхТерминала);
	
	// Калькуляция пробега	
	Маршрут.Колонки.Добавить("Пробег", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,7)));
			
	ПробегРассчитан = Ложь;
	Если ItobВызовСервераПовтИсп.ИспользованиеCsmHandlerВключено() Тогда
		МассивШирота  = Маршрут.ВыгрузитьКолонку("Широта");
		МассивДолгота = Маршрут.ВыгрузитьКолонку("Долгота");
		SafeArrayШирота  = Новый COMSafeArray(МассивШирота, "VT_VARIANT");
		SafeArrayДолгота = Новый COMSafeArray(МассивДолгота, "VT_VARIANT");
		
		ОбъектCsmHandler   = ItobВызовСервераПовтИсп.ПолучитьОбъектCsmHandler();
		SafeArrayРезультат = ОбъектCsmHandler.GetDistanceArray(SafeArrayШирота, SafeArrayДолгота);
	    МассивРезультат    = SafeArrayРезультат.Выгрузить();		
		
		Маршрут.ЗагрузитьКолонку(МассивРезультат, "Пробег");
		ПробегРассчитан = Истина;
	
	КонецЕсли;
	
	СостоянияТерминаловДвижение = Перечисления.ItobСостоянияТерминалов.Движение;
	СостоянияТерминаловНетДанных = Перечисления.ItobСостоянияТерминалов.НетДанных;
	СостоянияТерминаловСтоянка = Перечисления.ItobСостоянияТерминалов.Стоянка;
	
	Для Счетчик = 0 По Маршрут.Количество()-2 Цикл
		
		Если Маршрут[Счетчик].Состояние = СостоянияТерминаловДвижение
			И Маршрут[Счетчик+1].Состояние <> СостоянияТерминаловНетДанных Тогда
			
			Если НЕ ПробегРассчитан Тогда
			
				Маршрут[Счетчик].Пробег = Маршрут[Счетчик].Пробег + ПолучитьРасстояниеМеждуТочками(
					Маршрут[Счетчик].Широта,Маршрут[Счетчик].Долгота,Маршрут[Счетчик+1].Широта,Маршрут[Счетчик+1].Долгота);	
			
			КонецЕсли;
			
				
		ИначеЕсли (Маршрут[Счетчик].Состояние = СостоянияТерминаловСтоянка) 
			И (Маршрут[Счетчик+1].Состояние = СостоянияТерминаловДвижение) Тогда
			
			Если НЕ ПробегРассчитан Тогда
			
				Маршрут[Счетчик+1].Пробег = ПолучитьРасстояниеМеждуТочками(
					Маршрут[Счетчик].Широта,Маршрут[Счетчик].Долгота,Маршрут[Счетчик+1].Широта,Маршрут[Счетчик+1].Долгота);
					
			Иначе
				Маршрут[Счетчик+1].Пробег = Маршрут[Счетчик+1].Пробег + Маршрут[Счетчик].Пробег;
				Маршрут[Счетчик].Пробег = 0;
				
			КонецЕсли;
				
		Иначе
			Маршрут[Счетчик].Пробег = 0;
		КонецЕсли;		
						
	КонецЦикла;	
	
	Возврат Истина;
		
КонецФункции

Функция СоздатьТаблицуЗначенийМаршрутОбъектаМониторинга() Экспорт
	ОбщийМаршрут = Новый ТаблицаЗначений;
	ОбщийМаршрут.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ОбщийМаршрут.Колонки.Добавить("Широта", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,7)));
	ОбщийМаршрут.Колонки.Добавить("Долгота", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,7)));
	ОбщийМаршрут.Колонки.Добавить("Скорость", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(3,0)));
	ОбщийМаршрут.Колонки.Добавить("Направление", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(3,0)));
	ОбщийМаршрут.Колонки.Добавить("Состояние", Новый ОписаниеТипов("ПеречислениеСсылка.ItobСостоянияТерминалов"));	
	ОбщийМаршрут.Колонки.Добавить("Терминал", Новый ОписаниеТипов("СправочникСсылка.ItobТерминалы"));
	ОбщийМаршрут.Колонки.Добавить("ПериодUTC0", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ОбщийМаршрут.Колонки.Добавить("Пробег", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,7)));
	ОбщийМаршрут.Колонки.Добавить("НаселенныйПункт", Новый ОписаниеТипов("СправочникСсылка.ItobКлассификаторНаселенныхПунктов"));
	ОбщийМаршрут.Колонки.Добавить("Расстояние", Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(5)) );
	ОбщийМаршрут.Колонки.Добавить("Вектор", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(1,0)));
	ОбщийМаршрут.Колонки.Добавить("ПриближениеУдаление", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(1,0)));
	Возврат ОбщийМаршрут;
КонецФункции // ()
 
// Формирует таблицу маршрута для заданного объекта мониторинга
//
Функция СформироватьМаршрутОбъектаМониторинга(Объект, НачДата, КонДата, ВключатьДанныеДатчиков=Неопределено) Экспорт
	
	ОбщийМаршрут = СоздатьТаблицуЗначенийМаршрутОбъектаМониторинга();
	
	// Срез первых
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", НачалоДня(НачДата)-1);
	Запрос.УстановитьПараметр("Объект", Объект);	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ItobПривязкиТерминаловСрезПоследних.Период КАК Период,
	               |	ItobПривязкиТерминаловСрезПоследних.Терминал,
	               |	ItobПривязкиТерминаловСрезПоследних.ТерминалУстановлен
	               |ИЗ
	               |	РегистрСведений.ItobПривязкиТерминалов.СрезПоследних(&Период, Объект = &Объект) КАК ItobПривязкиТерминаловСрезПоследних";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекущаяСтруктураПривязки = Новый Структура("Период,Терминал,ТерминалУстановлен");		
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ТекущаяСтруктураПривязки, Выборка);
	Иначе
		ТекущаяСтруктураПривязки.ТерминалУстановлен = Ложь;	
	КонецЕсли;
	ТекущаяСтруктураПривязки.Период = НачДата;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата", НачДата);
	Запрос.УстановитьПараметр("КонДата", КонДата);
	Запрос.УстановитьПараметр("Объект", Объект);	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ItobПривязкиТерминалов.Период КАК Период,
	               |	ItobПривязкиТерминалов.Терминал,
	               |	ItobПривязкиТерминалов.ТерминалУстановлен
	               |ИЗ
	               |	РегистрСведений.ItobПривязкиТерминалов КАК ItobПривязкиТерминалов
	               |ГДЕ
	               |	ItobПривязкиТерминалов.Период МЕЖДУ НАЧАЛОПЕРИОДА(&НачДата, ДЕНЬ) И &КонДата
	               |	И ItobПривязкиТерминалов.Объект = &Объект
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ТекущаяСтруктураПривязки.Период = Выборка.Период Тогда
			ЗаполнитьЗначенияСвойств(ТекущаяСтруктураПривязки, Выборка);
			Продолжить;
		
		КонецЕсли;
		
		ФлагНетДанных = Ложь;		
		Если ТекущаяСтруктураПривязки.ТерминалУстановлен = Истина Тогда
			
			ТекущийМаршрут = Неопределено;
			Рез = СформироватьМаршрутПоТерминалу(ТекущаяСтруктураПривязки.Терминал, ТекущаяСтруктураПривязки.Период, НачалоДня(Выборка.Период)-1, ТекущийМаршрут, Истина, ВключатьДанныеДатчиков);
			Если Рез Тогда
				ДобавитьКолонкиДатчиков(ТекущийМаршрут, ОбщийМаршрут);
				Для Каждого ТекСтрокаМаршрута Из ТекущийМаршрут Цикл
					ЗаполнитьЗначенияСвойств(ОбщийМаршрут.Добавить(), ТекСтрокаМаршрута);				
				КонецЦикла;
				
			Иначе
				ФлагНетДанных = Истина;
			
			КонецЕсли;
			
		Иначе
			ФлагНетДанных = Истина;
		
		КонецЕсли;
		
		Если ФлагНетДанных Тогда
			НовСтрока = ОбщийМаршрут.Добавить();
			НовСтрока.Период = ТекущаяСтруктураПривязки.Период;
			НовСтрока.Состояние = Перечисления.ItobСостоянияТерминалов.НетДанных;
		
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтруктураПривязки, Выборка);
	
	КонецЦикла;
	
	ФлагНетДанных = Ложь;
	Если ТекущаяСтруктураПривязки.ТерминалУстановлен = Истина Тогда
		
		ТекущийМаршрут = Неопределено;
		Рез = СформироватьМаршрутПоТерминалу(ТекущаяСтруктураПривязки.Терминал, ТекущаяСтруктураПривязки.Период, КонДата, ТекущийМаршрут, Истина, ВключатьДанныеДатчиков);
		Если Рез Тогда
			ДобавитьКолонкиДатчиков(ТекущийМаршрут, ОбщийМаршрут);
			Для Каждого ТекСтрокаМаршрута Из ТекущийМаршрут Цикл
				ЗаполнитьЗначенияСвойств(ОбщийМаршрут.Добавить(), ТекСтрокаМаршрута);				
			КонецЦикла;
			
		Иначе
			ФлагНетДанных = Истина;			
		КонецЕсли;
		
	Иначе
		ФлагНетДанных = Истина;		
	КонецЕсли;
	
	Если ФлагНетДанных Тогда
		НовСтрока = ОбщийМаршрут.Добавить();
		НовСтрока.Период = ТекущаяСтруктураПривязки.Период;
		НовСтрока.Состояние = Перечисления.ItobСостоянияТерминалов.НетДанных;		
	КонецЕсли;
	
	Возврат ОбщийМаршрут;

КонецФункции // СформироватьМаршрутОбъектаМониторинга()

#КонецОбласти 

#Область ФункцииПолученияСводнойИнформации

// Формирует таблицу интервалов движения для заданного объекта мониторинга
// 
// Параметры: 
// Объект			- 			-
// НачДата			- Дата		-
// КонДата			- Дата		-
// ПараметрыБулево	- Структура	- ИспользоватьДанныеРегистраИнтервалыДвижения=Истина,
//								  ИспользоватьПоправочныйКоэффициент=Истина,
// 								  ВключатьДанныеТерминала=Истина,
//								  РассчитыватьДанныеВыработки=Ложь
//	
Функция ПолучитьИнтервалыДвижения(Объект, НачДата, КонДата, ГеокодироватьАдреса=Ложь, ВключатьДанныеДатчиков=Неопределено, ПараметрыБулево = Неопределено) Экспорт
	
	Если ТипЗнч(ПараметрыБулево) = Тип("Структура") Тогда
		ИспользоватьДанныеРегистраИнтервалыДвижения = ?(ПараметрыБулево.Свойство("ИспользоватьДанныеРегистраИнтервалыДвижения"), ПараметрыБулево.ИспользоватьДанныеРегистраИнтервалыДвижения, 	Истина);
		ИспользоватьПоправочныйКоэффициент 			= ?(ПараметрыБулево.Свойство("ИспользоватьПоправочныйКоэффициент"), 		 ПараметрыБулево.ИспользоватьПоправочныйКоэффициент, 			Истина);
		ВключатьДанныеТерминала 					= ?(ПараметрыБулево.Свойство("ВключатьДанныеТерминала"), 					 ПараметрыБулево.ВключатьДанныеТерминала, 						Истина);
		РассчитыватьДанныеВыработки 				= ?(ПараметрыБулево.Свойство("РассчитыватьДанныеВыработки"), 				 ПараметрыБулево.РассчитыватьДанныеВыработки, 					Ложь);
	Иначе
		ИспользоватьДанныеРегистраИнтервалыДвижения	= Истина;
		ИспользоватьПоправочныйКоэффициент			= Истина;
		ВключатьДанныеТерминала						= Истина;
		РассчитыватьДанныеВыработки					= Ложь;
	КонецЕсли; 	
	
	ТаблицаИнтервалов = Неопределено;	
		
	Если ТаблицаИнтервалов = Неопределено Тогда
		ТаблицаИнтервалов = ПолучитьИнтервалыПоДаннымТерминала(Объект, НачДата, КонДата, ГеокодироватьАдреса,
			ВключатьДанныеДатчиков, РассчитыватьДанныеВыработки);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект) И Объект.Метаданные().Имя = "ItobТранспортныеСредства" И ИспользоватьПоправочныйКоэффициент Тогда
		Если Метаданные.Справочники.ItobТранспортныеСредства.Реквизиты.Найти("Марка")<> Неопределено Тогда
			ИмяРеквизита = "Марка";
		ИначеЕсли  Метаданные.Справочники.ItobТранспортныеСредства.Реквизиты.Найти("Модель")<> Неопределено Тогда
			ИмяРеквизита = "Модель";
		КонецЕсли; 
		ПоправочныйКоэффициентНаПробег = ПолучитьПоправочныйКоэффициентПробега(Объект[ИмяРеквизита], Объект);
		
	Иначе
		ПоправочныйКоэффициентНаПробег = 1;
	
	КонецЕсли;
	
	Если НЕ ПоправочныйКоэффициентНаПробег = 1 Тогда
		Для каждого Стр Из ТаблицаИнтервалов Цикл
			Стр.Пробег = Стр.Пробег*ПоправочныйКоэффициентНаПробег;		
		КонецЦикла;		
	
	КонецЕсли;
	
	Возврат ТаблицаИнтервалов;

КонецФункции // ПолучитьИнтервалыДвижения()

Функция ПолучитьПробегОбъекта(ТекущийОбъект, НачДата, КонДата) Экспорт
	
	Если КонДата <= НачДата Тогда
		Возврат 0;	
	КонецЕсли;
	
	ТаблицаИнтервалыДвижения = ПолучитьИнтервалыДвижения(ТекущийОбъект, НачДата, КонДата);
	ПробегИтог = ТаблицаИнтервалыДвижения.Итог("Пробег");
	
	Возврат ПробегИтог;	

КонецФункции // ПолучитьПробегОбъекта()

#КонецОбласти 
	
#КонецОбласти

#Область ПодсистемаItobЦентрСпутниковогоМониторингаКомандыДляТрекеров

// Процедура отправляет команду на трекер
//
Функция ВыполнитьКомандуНаСервере(Терминал, Команда, ТекстОшибки)
	Если ItobОбщегоНазначенияВызовСервера.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.КомандыДляТрекеров") Тогда
		ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("ItobКомандыДляТрекеров");
		ОбщийМодуль.ВыполнитьКомандуНаСервере(Терминал, Команда, ТекстОшибки, Истина);
	КонецЕсли; 
КонецФункции

#КонецОбласти 
