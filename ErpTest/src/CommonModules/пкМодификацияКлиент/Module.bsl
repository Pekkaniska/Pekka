
Процедура ВыполнитьПереопределяемуюКоманду(Форма, Команда, ДополнительныеПараметры) Экспорт
    Если ТипЗнч(Команда) = Тип("КомандаФормы") Тогда
 	   //++ Рарус IA 06.10.2016
		Если Форма.ИмяФормы = "Документ.ОтборРазмещениеТоваров.Форма.ФормаДокумента" Тогда
			Если Команда.Имя = "пкКомандаТоварыПодобратьЯчейкиРазмещения" Тогда
				ОтборРазмещение_пкКомандаТоварыПодобратьЯчейкиРазмещения(Форма, Команда);	
			КонецЕсли;	
		ИначеЕсли Команда.Имя = "пкКомандаУбратьОтборЯчейкиСписка" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "Ссылка", , ,, Ложь);
		//-- Рарус IA 06.10.2016
        ИначеЕсли Команда.Имя = "пкЗаполнитьПоЗаявке" Тогда
            ЗаполнитьПоЗаявке(Форма, Истина, Ложь);
        ИначеЕсли Команда.Имя = "пкДобавитьПоЗаявке" Тогда
            ЗаполнитьПоЗаявке(Форма, Ложь, Ложь);
        ИначеЕсли Команда.Имя = "пкЗаполнитьПоЗаявкеОстатки" Тогда
            ЗаполнитьПоЗаявке(Форма);
        ИначеЕсли Команда.Имя = "пкДобавитьПоЗаявкеОстатки" Тогда
            ЗаполнитьПоЗаявке(Форма, Ложь);
		ИначеЕсли Команда.Имя = "пкЗаполнитьПоПрайсЛисту" Тогда
            ЗаполнитьПоПрайсЛисту(Форма); 
        ИначеЕсли Команда.Имя = "пкЗаполнитьПоСчету" Тогда
            ЗаполнитьПоСчету(Форма, Истина, Ложь);
        ИначеЕсли Команда.Имя = "пкДобавитьПоСчету" Тогда
            ЗаполнитьПоСчету(Форма, Ложь, Ложь);
        ИначеЕсли Команда.Имя = "пкЗаполнитьПоСчетуОстатки" Тогда
            ЗаполнитьПоСчету(Форма);
        ИначеЕсли Команда.Имя = "пкДобавитьПоСчетуОстатки" Тогда
            ЗаполнитьПоСчету(Форма, Ложь);
		ИначеЕсли Команда.Имя = "пкЗаполнитьТарифыПоПрайсЛисту" Тогда
            ЗаполнитьТарифыПоПрайсЛисту(Форма); 
		ИначеЕсли Команда.Имя = "ЗаполнитьТранспортировкуПоПрайсЛисту" Тогда
            ЗаполнитьТранспортировкуПоПрайсЛисту(Форма); 
		ИначеЕсли Команда.Имя = "ЗаполнитьУслугиРемонтаПоПрайсЛисту" Тогда
            ЗаполнитьУслугиРемонтаПоПрайсЛисту(Форма); 
        ИначеЕсли Команда.Имя = "пкПринятьКУчету" Тогда
            ПринятьКУчету(Форма);
		//+++DubI Рарус-СПб 31.10.2016
		//по задаче приостановлено выполнение
		//ИначеЕсли Форма.ИмяФормы = "Обработка.ПлатежныйКалендарь.Форма.Форма" Тогда
		//	Если Команда.Имя = "пкДополнительныеФильтрыВходящиеИсходящие" Тогда
		//		ПлатежныйКалендарьОткрытьФормуНастройкиДополнительныхФильтров("ВходящиеИсходящие", Форма, "Выберите вид документов", "пкСЗфильтрВходящиеИсходящие");
		//	ИначеЕсли Команда.Имя = "пкДополнительныеФильтрыСтатьяДДС" Тогда
		//		ПлатежныйКалендарьОткрытьФормуНастройкиДополнительныхФильтров("СтатьиДДС", Форма, "Выберите статью ДДС", "пкСЗфильтрСтатьяДДС");
		//	ИначеЕсли Команда.Имя = "пкДополнительныеФильтрыКонтрагенты" Тогда
		//		ПлатежныйКалендарьОткрытьФормуНастройкиДополнительныхФильтров("Контрагенты", Форма, "Выберите контрагента", "пкСЗфильтрКонтрагенты");
		//	КонецЕсли;
		//---DubI Рарус-СПб
		//+++rarus-spb_pavelk 15.11.2016
		ИначеЕсли Команда.Имя = "пкЗаполнитьТСпоКартам" Тогда
            уатОтчетПоставщикаПЦЗаполнитьТСпоКартам(Форма);
		//---rarus-spb_pavelk
        ИначеЕсли Команда.Имя = "пкИзменитьКурс" Тогда  
            ЗаявкаНаРасходованиеДенежныхСредствИзменитьКурсПриИзменении(Форма);	
//Рарус Владимир Подрезов 15.03.2017
        ИначеЕсли Команда.Имя = "пкДобавитьДоговор" Тогда  
            пкДобавитьДоговор(Форма); 
//Рарус Владимир Подрезов Конец
//Рарус Владимир Подрезов 13.09.2017
        ИначеЕсли Команда.Имя = "пкСкопироватьДоговор" Тогда  
            пкСкопироватьДоговор(Форма); 
//Рарус Владимир Подрезов Конец
//Рарус Владимир Подрезов 16.03.2017
        ИначеЕсли Команда.Имя = "пкИзменитьКурсСписаниеДС" Тогда  
            СписаниеБезналичныхДенежныхСредствИзменитьКурсПриИзменении(Форма);
        ИначеЕсли Команда.Имя = "пкУдержанияЗаполнитьПодразделения" Тогда  
            ОтражениеЗарплатыВФинансовомУчетеУдержанияЗаполнитьПодразделения(Форма);
//Рарус Владимир Подрезов Конец
//Рарус Владимир Подрезов 22.03.2017
        ИначеЕсли Команда.Имя = "пкЗаполнитьСодержания" Тогда  
            РеализацияУслугПрочихАктивовЗаполнитьСодержания(Форма);
//Рарус Владимир Подрезов Конец
//++ Рарус Лимаренко 24.05.2018 Заявка №11918
			ИначеЕсли Команда.Имя = "пкЗакрытьДоговор" Тогда
				ДоговорыКонтрагентовпкЗакрытьДоговор(Форма);
//-- Рарус Лимаренко 24.05.2018 Заявка №11918 2.4
        КонецЕсли;    
    ИначеЕсли ТипЗнч(Команда) = Тип("ПолеФормы") ИЛИ ТипЗнч(Команда) = Тип("ТаблицаФормы") Тогда
        Если Форма.ИмяФормы = "Справочник.ВидыНоменклатуры.Форма.ФормаЭлемента" Тогда
            Если Команда.Имя = "пкЭтоУслугаПоДоговору" Тогда
				ВидыНоменклатурыЭтоУслугаПоДоговоруПриИзменении(Форма);	
            ИначеЕсли Команда.Имя = "пкЭтоУслугаТранспортировки" Тогда
				ВидыНоменклатурыЭтоУслугаТранспортировкиПриИзменении(Форма);	
            КонецЕсли;    
        ИначеЕсли Форма.ИмяФормы = "Справочник.ДоговорыКонтрагентов.Форма.ФормаЭлемента" Тогда
            Если Команда.Имя = "пкВидДоговора" Тогда
				ДоговорыКонтрагентовВидДоговораПриИзменении(Форма);	
			ИначеЕсли Команда.Имя = "пкВидЦеныУслуг" Тогда
				ДоговорыКонтрагентовВидЦеныПриИзменении(Форма);
            ИначеЕсли Команда.Имя = "пкОтборДопСолгашение" ИЛИ Команда.Имя = "пкОтборМодель" Тогда
                ДоговорыКонтрагентовОтборыПриИзменении(Форма);
            ИначеЕсли Команда.Имя = "пкТарифыДопСоглашение" Тогда
                ДоговорыКонтрагентовТарифыДопСоглашениеПриИзменении(Форма); 
			ИначеЕсли Команда.Имя = "пкТарифыМодель" Тогда
                ДоговорыКонтрагентовМодельПриИзменении(Форма); 
            ИначеЕсли Команда.Имя = "пкТарифыОбъектСтроительства" Тогда
                ДоговорыКонтрагентовОбъектСтроительстваНачалоВыбора(Форма);  
			ИначеЕсли Команда.Имя = "пкТехникаСумма" ИЛИ Команда.Имя = "пкТехникаСтавкаНДС" Тогда
                ДоговорыКонтрагентовСуммаСтавкаНДСПриИзменении(Форма);
            ИначеЕсли Команда.Имя = "пкТранспортировкаДопСоглашение" Тогда
                ДоговорыКонтрагентовТранспортировкаДопСоглашениеПриИзменении(Форма); 
            ИначеЕсли Команда.Имя = "пкТранспортировкаОбъектСтроительства" Тогда
                ДоговорыКонтрагентовОбъектСтроительстваТранспортировкаНачалоВыбора(Форма); 
            ИначеЕсли Команда.Имя = "пкТранспортировкаУслуга" Тогда
                ДоговорыКонтрагентовТранспортировкаУслугаПриИзменении(Форма); 
			ИначеЕсли Команда.Имя = "пкУслугиРемонтаУслуга" Тогда
				ДоговорыКонтрагентовУслугаПриИзменении(Форма);	
//Рарус Владимир Подрезов 07.12.2016
			ИначеЕсли Команда.Имя = "ТипДоговора" Тогда
				ДоговорыКонтрагентовТипДоговораПриИзменении(Форма);	
			ИначеЕсли Команда.Имя = "пкЕстьОсновнойДоговорСПоставщиком" Тогда
				ДоговорыКонтрагентовпкЕстьОсновнойДоговорСПоставщикомПриИзменении(Форма);	
//++ Рарус Лимаренко 21.05.2018 Заявка №11946 2.4
			ИначеЕсли Команда.Имя = "пкЯвляетсяДопСоглашениемКДоговору" Тогда
				ДоговорыКонтрагентовпкЯвляетсяДопСоглашениемКДоговоруПриИзменении(Форма);
//-- Рарус Лимаренко 21.05.2018 Заявка №11946
			ИначеЕсли Команда.Имя = "пкОсновнойДоговорСПоставщиком" Тогда
				ДоговорыКонтрагентовпкОсновнойДоговорСПоставщикомПриИзменении(Форма);	
			ИначеЕсли Команда.Имя = "пкНеТребуетсяСогласование" Тогда
				ДоговорыКонтрагентовпкНеТребуетсяСогласованиеПриИзменении(Форма);	
//Рарус Владимир Подрезов Конец
            КонецЕсли;	
//++ Рарус Лимаренко 20.02.2018
		ИначеЕсли Форма.ИмяФормы = "Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбора" Тогда
				Если Команда.Имя = "пкГод" Тогда
                	ДоговорыКонтрагентовГодПриИзменении(Форма);
				ИначеЕсли Команда.Имя = "ЕстьОсновнойДоговорСПоставщиком" Тогда
					ДоговорыКонтрагентовСписокпкЕстьОсновнойДоговорСПоставщикомПриИзменении(Форма);		
				КонецЕсли;
//-- Рарус Лимаренко 20.02.208
		ИначеЕсли Форма.ИмяФормы = "Справочник.Партнеры.Форма.ФормаЭлементаРеквизитыКонтрагента" Тогда
            Если Команда.Имя = "пкМенеджерыМенеджер" Тогда
                ПартнерыМенеджерПриИзменении(Форма);  
            ИначеЕсли Команда.Имя = "ОбъектыСтроительстваОбъектСтроительства" Тогда
                ПартнерыОбъектСтроительстваНачалоВыбора(Форма);
            КонецЕсли;
        ИначеЕсли Форма.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаЭлемента" Тогда
			Если Команда.Имя = "пкЭтоТехника" Тогда
				НоменклатураЭтоТехникаПриИзменении(Форма);	
			//++ Рарус IA 06.10.2016
			ИначеЕсли Команда.Имя = "Аналог" Тогда
				АналогПриИзменении(Форма);	
			//-- Рарус IA 06.10.2016	
			КонецЕсли;
 	   		//++ Рарус IA 06.10.2016
       ИначеЕсли Форма.ИмяФормы = "Документ.ОтборРазмещениеТоваров.Форма.ФормаДокумента" Тогда
			Если Команда.Имя = "ТоварыРазмещениеНоменклатура" Тогда
				ОтборРазмещениеТоваровТоварыРазмещениеНоменклатура(Форма, Команда);	
			КонецЕсли;
			//-- Рарус IA 06.10.2016	
        ИначеЕсли Форма.ИмяФормы = "Справочник.ОбъектыЭксплуатации.Форма.ФормаЭлемента" Тогда
            Если Команда.Имя = "ДатаВыпуска" Тогда
                ДатаВыпускаОбъектыЭксплуатацииПриИзменении(Форма);
            ИначеЕсли Команда.Имя = "ЗаводскойНомер" Тогда
                ЗаводскойНомерОбъектыЭксплуатацииПриИзменении(Форма);
            ИначеЕсли Команда.Имя = "Класс" Тогда
                КлассОбъектыЭксплуатацииПриИзменении(Форма);
            ИначеЕсли Команда.Имя = "Код" Тогда
                КодОбъектыЭксплуатацииПриИзменении(Форма);
            ИначеЕсли Команда.Имя = "пкМодель" Тогда
                МодельОбъектыЭксплуатацииПриИзменении(Форма);    
			ИначеЕсли Команда.Имя = "пкЭтоТехника" Тогда
				ОбъектЭксплуатацииЭтоТехникаПриИзменении(Форма);	
            КонецЕсли;    
        ИначеЕсли Форма.ИмяФормы = "Документ.ЗаказКлиента.Форма.ФормаДокумента" Тогда
            Если Команда.Имя = "Подразделение" Тогда
                ЗаказКлиентаПодразделениеПриИзменении(Форма);   
            ИначеЕсли Команда.Имя = "пкТоварыТехника" Тогда
                ЗаказКлиентаТоварыТехникаПриИзменении(Форма);   
            ИначеЕсли Команда.Имя = "пкТоварыДатаНачалаАренды" ИЛИ Команда.Имя = "пкТоварыДатаОкончанияАренды" Тогда
                ЗаказКлиентаДатаАрендыПриИзменении(Форма);   
            ИначеЕсли Команда.Имя = "пкТоварыВидТарифа" Тогда
                ЗаказКлиентаВидТарифаПриИзменении(Форма); 
            ИначеЕсли Команда.Имя = "ТоварыСуммаНДС" Тогда
                ЗаказКлиентаТоварыСуммаНДСПриИзменении(Форма); 
            ИначеЕсли Команда.Имя = "пкОбъектСтроительства" Тогда
                ЗаказКлиентаОбъектСтроительстваНачалоВыбора(Форма);
            ИначеЕсли Команда.Имя = "пкКорректировкиТоваровНоменклатура" Тогда
                ЗаказКлиентаКорректировкиТоваровНоменклатураПриИзменении(Форма);   
            ИначеЕсли Команда.Имя = "пкКорректировкиТоваровпкТехника" Тогда
                ЗаказКлиентаКорректировкиТоваровпкТехникаПриИзменении(Форма);
            ИначеЕсли Команда.Имя = "пкКорректировкиТоваровпкДатаНачалаАренды" ИЛИ Команда.Имя = "пкКорректировкиТоваровпкДатаОкончанияАренды" Тогда
                ЗаказКлиентаКорректировкиТоваровДатаАрендыПриИзменении(Форма);   
            ИначеЕсли Команда.Имя = "пкКорректировкиТоваровКоличествоУпаковок" Тогда
                ЗаказКлиентаКорректировкиТоваровКоличествоУпаковокПриИзменении(Форма); 
            ИначеЕсли Команда.Имя = "пкКорректировкиТоваровУпаковка" Тогда
                ЗаказКлиентаКорректировкиТоваровУпаковкаПриИзменении(Форма); 
            ИначеЕсли Команда.Имя = "пкКорректировкиТоваровпкВидТарифа" Тогда
                ЗаказКлиентаКорректировкиТоваровВидТарифаПриИзменении(Форма); 
            ИначеЕсли Команда.Имя = "пкКорректировкиТоваровЦена" Тогда
                ЗаказКлиентаКорректировкиТоваровЦенаПриИзменении(Форма); 
            ИначеЕсли Команда.Имя = "пкКорректировкиТоваровСумма" Тогда
                ЗаказКлиентаКорректировкиТоваровСуммаПриИзменении(Форма); 
            ИначеЕсли Команда.Имя = "пкКорректировкиТоваровСтавкаНДС" Тогда
                ЗаказКлиентаКорректировкиТоваровСтавкаНДСПриИзменении(Форма); 
//Рарус Владимир Подрезов 15.08.2017 RS00-0000000000000005314
            ИначеЕсли Команда.Имя = "пкКорректировкиТоваровСуммаНДС" Тогда
                ЗаказКлиентаКорректировкиТоваровСуммаНДСПриИзменении(Форма); 
//Рарус Владимир Подрезов Конец
            КонецЕсли;
        ИначеЕсли Форма.ИмяФормы = "Документ.ЗаявкаНаРасходованиеДенежныхСредств.Форма.ФормаДокумента" Тогда
            Если Команда.Имя = "пкКурсДокумента" ИЛИ Команда.Имя = "РасшифровкаБезРазбиенияСуммаВзаиморасчетов"  Тогда
                ЗаявкаНаРасходованиеДенежныхСредствКурсДокументаПриИзменении(Форма);   
            ИначеЕсли Команда.Имя = "пкДатаКурса" Тогда  
                ЗаявкаНаРасходованиеДенежныхСредствДатаКурсаПриИзменении(Форма); 
//Рарус Владимир Подрезов 07.12.2016
//Рарус Владимир Подрезов 25.10.2017 4668
//Закомментированно по запросу - перешли на типовой функционал
//            ИначеЕсли Команда.Имя = "пкСтавкаНДС" Тогда  
//                ЗаявкаНаРасходованиеДенежныхСредствпкСтавкаНДСПриИзменении(Форма); 
//Рарус Владимир Подрезов Конец
            ИначеЕсли Команда.Имя = "СуммаДокумента" Тогда  
                ЗаявкаНаРасходованиеДенежныхСредствСуммаДокументаПриИзменении(Форма); 
//Рарус Владимир Подрезов Конец
//++ Рарус Лимаренко 16.02.2018 Задача 9741		
			ИначеЕсли Команда.Имя = "РасшифровкаПлатежаСуммаВзаиморасчетов" Тогда
				 ЗРДСРасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Форма); 
			ИначеЕсли Команда.Имя = "пкКурсДокументаСписок" Тогда
				ЗРДСпкКурсДокументаСписокПриИзменении(Форма);
			ИначеЕсли Команда.Имя = "пкДатаКурсаСписок" Тогда
				ЗРДСпкДатаКурсаСписокПриИзменении(Форма);
//-- Рарус Лимаренко 16.02.2018	 Задача 9741	
			КонецЕсли;
        ИначеЕсли Форма.ИмяФормы = "Документ.ПриобретениеТоваровУслуг.Форма.ФормаДокумента" Тогда
            Если Команда.Имя = "пкДатаКурса" Тогда  
                ПоступлениеТоваровУслугДатаКурсаПриИзменении(Форма);  
            КонецЕсли;
        ИначеЕсли Форма.ИмяФормы = "Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента" Тогда
            Если Команда.Имя = "пкОбъектСтроительства" Тогда
                РеализацияТоваровУслугОбъектСтроительстваНачалоВыбора(Форма);
            ИначеЕсли Команда.Имя = "пкТоварыДатаНачалаАренды" ИЛИ Команда.Имя = "пкТоварыДатаОкончанияАренды" Тогда
                РеализацияТоваровУслугДатаАрендыПриИзменении(Форма);  
            ИначеЕсли Команда.Имя = "пкТоварыТехника" Тогда
                РеализацияТоваровУслугТехникаПриИзменении(Форма); 
            ИначеЕсли Команда.Имя = "пкТоварыВидТарифа" Тогда
                РеализацияТоваровУслугВидТарифаПриИзменении(Форма);
            ИначеЕсли Команда.Имя = "ТоварыСуммаНДС" Тогда
                РеализацияТоваровУслугТоварыСуммаНДСПриИзменении(Форма); 
            КонецЕсли;
        ИначеЕсли Форма.ИмяФормы = "Документ.СписаниеБезналичныхДенежныхСредств.Форма.ФормаДокумента" Тогда
            Если Команда.Имя = "пкКурсДокумента" ИЛИ Команда.Имя = "РасшифровкаБезРазбиенияСуммаВзаиморасчетов" Тогда
                СписаниеБезналичныхДенежныхСредствКурсДокументаПриИзменении(Форма);   
            ИначеЕсли Команда.Имя = "пкДатаКурса" Тогда  
                СписаниеБезналичныхДенежныхСредствДатаКурсаПриИзменении(Форма);  
            КонецЕсли;
//Рарус Владимир Подрезов 09.03.2017
        ИначеЕсли Форма.ИмяФормы = "Документ.АвансовыйОтчет.Форма.ФормаДокумента" Тогда
            Если Команда.Имя = "пкКоличество" Тогда  
                АвансовыйОтчетпкКоличествоПриИзменении(Форма); 
            ИначеЕсли Команда.Имя = "пкЦена" Тогда  
                АвансовыйОтчетпкЦенаПриИзменении(Форма); 
            КонецЕсли;
//Рарус Владимир Подрезов Конец
//Рарус Владимир Подрезов 26.07.2017
        ИначеЕсли Форма.ИмяФормы = "Документ.ВнутреннееПотреблениеТоваров.Форма.ФормаДокумента" Тогда
            Если Команда.Имя = "пкУчитыватьВРасходахЛогистики" Тогда  
                ВнутреннееПотребление_пкУчитыватьВРасходахЛогистикиПриИзменении(Форма); 
            КонецЕсли;
//Рарус Владимир Подрезов Конец
        КонецЕсли;    
    КонецЕсли;    	
КонецПроцедуры

Процедура ПослеЗаписи(Форма, ПараметрыЗаписи)Экспорт
	
КонецПроцедуры

#Область Номенклатура

Процедура НоменклатураЭтоТехникаПриИзменении(Форма)
	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
	
	Элементы.пкСтраницаПараметрыТехники.Видимость = Объект.пкЭтоТехника;
КонецПроцедуры 

//++ PSA IA 06.10.2016
Процедура АналогПриИзменении(Форма)
	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
	МассивАналогов=Новый Массив;
	Для каждого СтрокаДанных Из Форма.пкАналогиНоменклатуры Цикл
		МассивАналогов.Добавить(СтрокаДанных.Аналог);
	КонецЦикла;   
    МассивНовыхАналогов=пкМодификацияСервер.ДобавитьВсеАналоги(МассивАналогов,Элементы.пкАналогиНоменклатуры.ТекущиеДанные.Аналог,Объект);
	
	Для каждого ЭлементНовыйАналог Из МассивНовыхАналогов Цикл
		НоваяСтрока=Форма.пкАналогиНоменклатуры.Добавить();	
		НоваяСтрока.Аналог=ЭлементНовыйАналог;
	КонецЦикла; 
КонецПроцедуры 

Процедура ОтборРазмещениеТоваровТоварыРазмещениеНоменклатура(Форма,Команда)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	КэшированныеЗначения = Неопределено;
	ЭтаФорма = Форма;
	ПараметрыУказанияСерий=Форма.ПараметрыУказанияСерий;
	
	//Перем ТекущаяСтрока;
	//Перем СтруктураДействий;
	
	ТекущаяСтрока = Элементы.ТоварыРазмещение.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины", Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
	СтруктураДействий.Вставить("ЗаполнитьВесУпаковки",Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
	СтруктураДействий.Вставить("ЗаполнитьОбъемУпаковки",Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
	СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмеренияВеса",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияВеса"));
	СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияОбъема"));
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками") Тогда
		Суффикс = "Размещено";
	Иначе
		Суффикс = "";
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьВесОбъем", Суффикс);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
 	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс","Размещено");
	СтруктураДействий.Вставить("ПроверитьЗаполнитьНазначение");
	
 	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", Объект.Склад, ПараметрыУказанияСерий.Размещение));

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "ТоварыРазмещение"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Ячейка=пкОбщийМодульСервер.ОбработатьСтрокуРазмещенияНаЯчейку(ТекущаяСтрока.Номенклатура, Объект.Склад);
	Если ЗначениеЗаполнено(Ячейка) Тогда
		ТекущаяСтрока.Ячейка=Ячейка;	
	КонецЕсли; 
	
КонецПроцедуры
 
Процедура ОтборРазмещение_пкКомандаТоварыПодобратьЯчейкиРазмещения(Форма,Команда)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	КэшированныеЗначения = Неопределено;
	ЭтаФорма = Форма;
	ПараметрыУказанияСерий=Форма.ПараметрыУказанияСерий;
	
	
	ОчиститьСообщения();
	
	Если Объект.ТоварыРазмещение.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Укажите товары к размещению.'");
		ПоказатьПредупреждение(Неопределено, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Объект.Проведен Тогда
		ТекстСообщения = НСтр("ru = 'Заполнение возможно только в непроведенном документе, сначала отмените проведение!'");
		ПоказатьПредупреждение(Неопределено, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Форма.ТоварыПодобратьЯчейкиРазмещенияЗавершение(КодВозвратаДиалога.Да, Неопределено);
	
	Для Каждого СтрокаТЧ Из Объект.ТоварыРазмещение Цикл
		Ячейка=пкМодификацияСервер.ОбработатьСтрокуРазмещенияНаЯчейкуСУчетомПодобраннойЯчейки(СтрокаТЧ.Ячейка, СтрокаТЧ.Номенклатура, Объект.Склад);
		Если ЗначениеЗаполнено(Ячейка) Тогда
			СтрокаТЧ.Ячейка=Ячейка;	
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры
//-- PSA IA 06.10.2016

#КонецОбласти

#Область ОбъектыЭксплуатации

Процедура ДатаВыпускаОбъектыЭксплуатацииПриИзменении(Форма)
    
    Объект = Форма.Объект;
    
    пкУправлениеТехникойСервер.СформироватьПолноеНаименованиеТехники(Объект);
    
    КопироватьДанныеФормы(Объект, Форма.Объект); 
        
КонецПроцедуры  

Процедура ЗаводскойНомерОбъектыЭксплуатацииПриИзменении(Форма)
    
    Объект = Форма.Объект;
    
    пкУправлениеТехникойСервер.СформироватьПолноеНаименованиеТехники(Объект);
    
    КопироватьДанныеФормы(Объект, Форма.Объект); 
    
КонецПроцедуры    

Процедура КлассОбъектыЭксплуатацииПриИзменении(Форма)
    
	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    Элементы.СтраницаРабочиеЦентры.Видимость = НЕ Объект.пкЭтоТехника;
    
КонецПроцедуры    

Процедура КодОбъектыЭксплуатацииПриИзменении(Форма)
    
    Объект = Форма.Объект;
    
    пкМодификацияСервер.СформироватьНаименованиеОбъектаЭксплуатацииНаСервере(Объект);
    пкУправлениеТехникойСервер.СформироватьПолноеНаименованиеТехники(Объект);
    
    КопироватьДанныеФормы(Объект, Форма.Объект); 
        
КонецПроцедуры 

Процедура МодельОбъектыЭксплуатацииПриИзменении(Форма)
    
    Объект = Форма.Объект;
    
    пкМодификацияСервер.СформироватьНаименованиеОбъектаЭксплуатацииНаСервере(Объект);
    пкУправлениеТехникойСервер.СформироватьПолноеНаименованиеТехники(Объект);
    
    КопироватьДанныеФормы(Объект, Форма.Объект); 
    
КонецПроцедуры  

Процедура ОбъектЭксплуатацииЭтоТехникаПриИзменении(Форма)
    
	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
	
	Элементы.Расположение.Видимость						= НЕ Объект.пкЭтоТехника;
	Элементы.Модель.Видимость							= НЕ Объект.пкЭтоТехника;
	Элементы.ЭксплуатирующееПодразделение.Видимость		= НЕ Объект.пкЭтоТехника;
	Элементы.РемонтирующееПодразделение.Видимость		= НЕ Объект.пкЭтоТехника;
	Элементы.СтраницаПараметрыУчетаНаработок.Видимость	= НЕ Объект.пкЭтоТехника;
	Элементы.СтраницаРабочиеЦентры.Видимость			= НЕ Объект.пкЭтоТехника;
    Элементы.Изготовитель.Видимость						= НЕ Объект.пкЭтоТехника; 
    Элементы.НомерПаспорта.Видимость					= НЕ Объект.пкЭтоТехника; 
    
	Элементы.пкГруппаТекущееСостояние.Видимость			= Объект.пкЭтоТехника;
    Элементы.пкМодель.Видимость							= Объект.пкЭтоТехника;
    Элементы.пкМодель.АвтоОтметкаНезаполненного			= Объект.пкЭтоТехника;
    Элементы.пкСтраницаИмеющиесяДефекты.Видимость		= Объект.пкЭтоТехника;
    Элементы.пкСтраницаСервис.Видимость					= Объект.пкЭтоТехника;
//Рарус Владимир Подрезов 31.08.2017
    Элементы.пкЗапретАренды.Видимость					= Объект.пкЭтоТехника;
//Рарус Владимир Подрезов Конец
	
    Если Объект.пкЭтоТехника Тогда
        Элементы.Код.Заголовок	= "Инв. номер";
    Иначе
        Элементы.Код.Заголовок 	= "Код";
    КонецЕсли;   
    
КонецПроцедуры 

Процедура ПринятьКУчету(Форма)
    
    Объект = Форма.Объект;
    
    Если ЗначениеЗаполнено(Форма.пкДокументПринятияКУчету) Тогда
        ПараметрыОткрытия = Новый Структура("Ключ", Форма.пкДокументПринятияКУчету);
        
		ОткрытьФорму("Документ.пкОперацииСТехникой.Форма.ФормаДокумента", ПараметрыОткрытия, Объект,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстСообщения = "Для выполнения данной операции необходимо записать элемент.";
        
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
    Иначе
        ПараметрыОткрытия = Новый Структура("Техника", Объект.Ссылка);
        
        ОткрытьФорму("Документ.пкОперацииСТехникой.Форма.ФормаДокумента", ПараметрыОткрытия, Объект,,,, 
            Новый ОписаниеОповещения("ПринятьКУчетуЗавершение", пкМодификацияКлиент, Новый Структура("Форма, Объект", Форма, Объект)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
    КонецЕсли; 
	
КонецПроцедуры

Процедура ПринятьКУчетуЗавершение(ВыбранноеЗначение, ДопПараметры) Экспорт
    
    //КопироватьДанныеФормы(пкМодификацияСервер.ПолучитьДокуметПринятияКУчетуНаСервере(ДопПараметры.Объект.Ссылка), ДопПараметры.Форма.пкДокументПринятияКУчету); 
        
КонецПроцедуры    

#КонецОбласти

#Область ВидыНоменклатуры

Процедура ВидыНоменклатурыЭтоУслугаПоДоговоруПриИзменении(Форма)
    
    Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    Элементы.пкЭтоУслугаТранспортировки.Доступность = НЕ Объект.пкЭтоУслугаПоДоговору;
    
    Если Объект.пкЭтоУслугаПоДоговору Тогда 
        Объект.пкЭтоУслугаТранспортировки = Ложь;
    КонецЕсли;
    
КонецПроцедуры 

Процедура ВидыНоменклатурыЭтоУслугаТранспортировкиПриИзменении(Форма)
    
    Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    Элементы.пкЭтоУслугаПоДоговору.Доступность = НЕ Объект.пкЭтоУслугаТранспортировки;
    
    Если Объект.пкЭтоУслугаТранспортировки Тогда 
        Объект.пкЭтоУслугаПоДоговору = Ложь;
    КонецЕсли;
    
КонецПроцедуры    

#КонецОбласти

#Область ДоговорыКонтрагентов

Процедура ДоговорыКонтрагентовВидДоговораПриИзменении(Форма)
    Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    Элементы.пкСтраницаТарифы.Видимость  = Объект.пкВидДоговора <> ПредопределенноеЗначение("Перечисление.пкВидыДоговоров.ПоставкаТехники");
    Элементы.пкСтраницаТехника.Видимость = Объект.пкВидДоговора = ПредопределенноеЗначение("Перечисление.пкВидыДоговоров.ПоставкаТехники");
	
//++Рарус Лимаренко 26.10.17

	Элементы.пкГруппаСервис.Видимость = Объект.пкВидДоговора = ПредопределенноеЗначение("Перечисление.пкВидыДоговоров.Сервис");

//--Рарус Лимаренко 26.10.17
	
КонецПроцедуры    

Процедура ДоговорыКонтрагентовВидЦеныПриИзменении(Форма)
    Объект = Форма.Объект;
    
    Объект = пкМодификацияСервер.ДоговорыКонтрагентовВидЦеныПриИзмененииНаСервере(Объект); 
    
    КопироватьДанныеФормы(Объект, Форма.Объект); 
КонецПроцедуры    

Процедура ДоговорыКонтрагентовУслугаПриИзменении(Форма)
    
    Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    ТекущиеДанные = Элементы.пкУслугиРемонта.ТекущиеДанные;
    
    ТекущиеДанные.НаименованиеДляПечати = пкОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Услуга, "НаименованиеПолное");
    
    ТекущаяСтрока = Элементы.пкУслугиРемонта.ТекущаяСтрока;
    
    пкМодификацияСервер.ЗаполнитьУслугуРемонтаВСтрокеПоПрайсЛистуНаСервере(Объект, ТекущаяСтрока);
    
    КопироватьДанныеФормы(Объект, Форма.Объект); 
    
КонецПроцедуры 

//Рарус Владимир Подрезов 07.12.2016
Процедура ДоговорыКонтрагентовТипДоговораПриИзменении(Форма)
	
	Элементы	= Форма.Элементы;
	Объект		= Форма.Объект;
	
	Форма.ТипДоговораПриИзмененииСервер();
    
	Элементы.пкГруппаНаличиеДокументов.Видимость		= (Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПокупателем"));
	Элементы.пкСтраницаТарифы.Видимость					= (Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПокупателем"));
	Элементы.пкГруппаОтборы.Видимость					= (Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПокупателем"));
	Элементы.пкГруппаЗаполнитьПоПрайсЛисту.Видимость	= (Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПокупателем"));
	Элементы.пкГруппаТранспортировка.Видимость			= (Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПокупателем"));
	Элементы.пкСтраницаТехника.Видимость				= (Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПокупателем"));
	Элементы.пкСтраницаУслугиРемонта.Видимость			= (Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПокупателем"));
	
//++ Рарус Лимаренко 24.05.2018 Заявка №11918 2.4                          
	Элементы.пкЗакрытьДоговор.Видимость					=  (пкМодификацияСервер.ПроверитьВхождениеПользователяВГруппупкЗакрытиеДоговоровИзФормыРарус() И Объект.ТипДоговора =ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПоставщиком"));
//-- Рарус Лимаренко 24.05.2018 Заявка №11918 2.4
			
//++ Рарус Лимаренко 03.09.2018
	Элементы.Статус.ТолькоПросмотр = (Не пкМодификацияСервер.ПроверитьВхождениеПользователяВГруппупкУправлениеСогласованиемДоговоровСПоставщикамиРарус() И Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПоставщиком"));	
//-- Рарус Лимаренко 03.09.2018
	
КонецПроцедуры 

Процедура ДоговорыКонтрагентовпкЕстьОсновнойДоговорСПоставщикомПриИзменении(Форма)
	
	Элементы	= Форма.Элементы;
	Объект		= Форма.Объект;
	
	Элементы.пкОсновнойДоговорСПоставщиком.Доступность	= (Объект.пкЕстьОсновнойДоговорСПоставщиком);
	Объект.пкОсновнойДоговорСПоставщиком = "";
	
//++ Рарус Лимаренко 30.07.2018 Задача №12609		
	Форма.Модифицированность = Истина;
//-- Рарус Лимаренко 30.07.2018
	
КонецПроцедуры 

Процедура ДоговорыКонтрагентовпкОсновнойДоговорСПоставщикомПриИзменении(Форма)
	
	Элементы	= Форма.Элементы;
	Объект		= Форма.Объект;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) И Объект.Ссылка = Объект.пкОсновнойДоговорСПоставщиком Тогда
		тСообщение = новый СообщениеПользователю;
		тСообщение.Текст = НСтр("ru='Нельзя выбирать самого себя в качестве договора основания!'");
		тСообщение.Сообщить();
		Объект.пкОсновнойДоговорСПоставщиком = "";
	КонецЕсли;
	
КонецПроцедуры 

Процедура ДоговорыКонтрагентовпкНеТребуетсяСогласованиеПриИзменении(Форма)
	
	Элементы	= Форма.Элементы;
	Объект		= Форма.Объект;
	
	Если Объект.пкНеТребуетсяСогласование Тогда
		Если Не Объект.Согласован Тогда
			Объект.Согласован	= Истина;
		КонецЕсли;
		
		Если Не Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДоговоровКонтрагентов.Действует") Тогда
			Объект.Статус		= ПредопределенноеЗначение("Перечисление.СтатусыДоговоровКонтрагентов.Действует");
		КонецЕсли;
	Иначе
		//Если Объект.Согласован Тогда
		//	Объект.Согласован	= Ложь;
		//КонецЕсли;
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДоговоровКонтрагентов.Действует") Тогда
			Объект.Статус		= ПредопределенноеЗначение("Перечисление.СтатусыДоговоровКонтрагентов.НеСогласован");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

//Рарус Владимир Подрезов Конец

Процедура ДоговорыКонтрагентовТарифыДопСоглашениеПриИзменении(Форма)
    
    Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    ТекущиеДанные = Элементы.пкТарифы.ТекущиеДанные;
    
    Если ЗначениеЗаполнено(ТекущиеДанные.ДополнительноеСоглашение) Тогда
        ТекущиеДанные.Дата = пкОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ДополнительноеСоглашение, "ДатаОкончанияДействия");
        ТекущиеДанные.ОбъектСтроительства = пкОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ДополнительноеСоглашение, "ОбъектСтроительства");
    Иначе
        ТекущиеДанные.Дата = Объект.ДатаОкончанияДействия;
    КонецЕсли; 
    
КонецПроцедуры    
    
Процедура ДоговорыКонтрагентовМодельПриИзменении(Форма)
    
    Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    ТекущаяСтрока = Элементы.пкТарифы.ТекущаяСтрока;
    
    пкМодификацияСервер.ЗаполнитьТарифВСтрокеПоПрайсЛистуНаСервере(Объект, ТекущаяСтрока);

    КопироватьДанныеФормы(Объект, Форма.Объект); 
    
    ТекущиеДанные = Элементы.пкТарифы.ТекущиеДанные;
    
    ТекущиеДанные.ЕдиницаИзмеренияКраткосрочнойЦены = пкОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Модель, "ЕдиницаИзмерения");
    ТекущиеДанные.ЕдиницаИзмеренияДолгосрочнойЦены  = пкУправлениеТехникойСервер.ПолучитьУпаковкуНабора(пкОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Модель, "НаборУпаковок"));
    
    Если ЗначениеЗаполнено(ТекущиеДанные.ДополнительноеСоглашение) Тогда
        ТекущиеДанные.Дата = пкОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ДополнительноеСоглашение, "ДатаОкончанияДействия");
    Иначе
        ТекущиеДанные.Дата = Объект.ДатаОкончанияДействия;
    КонецЕсли;    
    
КонецПроцедуры 

Процедура ДоговорыКонтрагентовОбъектСтроительстваНачалоВыбора(Форма)
    
    Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    ТекущиеДанные = Элементы.пкТарифы.ТекущиеДанные;
    
    ОбъектыСтроительства = пкОбщегоНазначенияСервер.ПолучитьОбъектыСтроительстваКлиента(Объект.Партнер);
    
    Отбор = Новый Структура("Ссылка", ОбъектыСтроительства);
    
    ПараметрыФормы = Новый Структура("Отбор", Отбор);
    
    ПараметрыОповещения = Новый Структура("ТекущиеДанные", ТекущиеДанные);
    
    ОткрытьФорму("Справочник.СМ_ОбъектыСтроительства.Форма.ФормаВыбора", ПараметрыФормы, Элементы.пкТарифыОбъектСтроительства, , , , 
        Новый ОписаниеОповещения("ДоговорыКонтрагентовОбъектСтроительстваНачалоВыбораЗавершение", пкМодификацияКлиент, ПараметрыОповещения));
    
КонецПроцедуры 

Процедура ДоговорыКонтрагентовОбъектСтроительстваНачалоВыбораЗавершение(ВыбранноеЗначение, ДопПараметры) Экспорт 
    
    Если ВыбранноеЗначение <> Неопределено Тогда
        ДопПараметры.ТекущиеДанные.ОбъектСтроительства = ВыбранноеЗначение;
    КонецЕсли;    
    
КонецПроцедуры    

Процедура ДоговорыКонтрагентовТранспортировкаДопСоглашениеПриИзменении(Форма)
    
    Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    ТекущиеДанные = Элементы.пкТранспортировка.ТекущиеДанные;
    
    Если ЗначениеЗаполнено(ТекущиеДанные.ДополнительноеСоглашение) Тогда
        ТекущиеДанные.ОбъектСтроительства = пкОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ДополнительноеСоглашение, "ОбъектСтроительства");
    КонецЕсли; 
    
КонецПроцедуры    

Процедура ДоговорыКонтрагентовОбъектСтроительстваТранспортировкаНачалоВыбора(Форма)
    
    Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    ТекущиеДанные = Элементы.пкТранспортировка.ТекущиеДанные;
    
    ОбъектыСтроительства = пкОбщегоНазначенияСервер.ПолучитьОбъектыСтроительстваКлиента(Объект.Партнер);
    
    Отбор = Новый Структура("Ссылка", ОбъектыСтроительства);
    
    ПараметрыФормы = Новый Структура("Отбор", Отбор);
    
    ПараметрыОповещения = Новый Структура("ТекущиеДанные", ТекущиеДанные);
    
    ОткрытьФорму("Справочник.СМ_ОбъектыСтроительства.Форма.ФормаВыбора", ПараметрыФормы, Элементы.пкТранспортировкаОбъектСтроительства, , , , 
        Новый ОписаниеОповещения("ДоговорыКонтрагентовОбъектСтроительстваНачалоВыбораТранспортировкаЗавершение", пкМодификацияКлиент, ПараметрыОповещения));
    
КонецПроцедуры 

Процедура ДоговорыКонтрагентовТранспортировкаУслугаПриИзменении(Форма)
    
    Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    ТекущаяСтрока = Элементы.пкТранспортировка.ТекущаяСтрока;
    
    пкМодификацияСервер.ЗаполнитьТранспортировкуВСтрокеПоПрайсЛистуНаСервере(Объект, ТекущаяСтрока);
    
    КопироватьДанныеФормы(Объект, Форма.Объект); 
    
КонецПроцедуры    

Процедура ДоговорыКонтрагентовОбъектСтроительстваНачалоВыбораТранспортировкаЗавершение(ВыбранноеЗначение, ДопПараметры) Экспорт 
    
    Если ВыбранноеЗначение <> Неопределено Тогда
        ДопПараметры.ТекущиеДанные.ОбъектСтроительства = ВыбранноеЗначение;
    КонецЕсли;    
    
КонецПроцедуры    

Процедура ДоговорыКонтрагентовСуммаСтавкаНДСПриИзменении(Форма)
    Элементы = Форма.Элементы;
    
    ТекущаяСтрока = Элементы.пкТехника.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.СтавкаНДС) Тогда
	
		Возврат;	
	
	КонецЕсли;
                                                                                                          
    ТекПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ТекущаяСтрока.СтавкаНДС);
    
    ТекущаяСтрока.СуммаНДС  = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(ТекущаяСтрока.Сумма, ТекПроцентНДС, Ложь);
    ТекущаяСтрока.СуммаСНДС = ТекущаяСтрока.Сумма + ТекущаяСтрока.СуммаНДС;
КонецПроцедуры    

Процедура ДоговорыКонтрагентовОтборыПриИзменении(Форма)
    
    Элементы = Форма.Элементы;
    Объект = Форма.Объект;
    
    Отбор = Новый Структура();
    
    Если ЗначениеЗаполнено(Форма.пкОтборДопСолгашение) Тогда
        Отбор.Вставить("ДополнительноеСоглашение", Форма.пкОтборДопСолгашение);    
    КонецЕсли;
    
    Если ЗначениеЗаполнено(Форма.пкОтборМодель) Тогда
        Отбор.Вставить("Модель", Форма.пкОтборМодель);    
    КонецЕсли;
    
    Элементы.пкТарифы.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
    
КонецПроцедуры 

//++ Рарус Лимаренко 20.02.2018
Процедура ДоговорыКонтрагентовГодПриИзменении(Форма)
	
	ПолеДата =  Новый ПолеКомпоновкиДанных("Дата");
	
	Для каждого Элемент Из Форма.Список.Отбор.Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Форма.Список.Отбор.Элементы.Удалить(Элемент);
		КонецЕсли;
	КонецЦикла;	
	
	ОтборПоДате = Форма.Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборПоДате.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	Отбор = ОтборПоДате.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение =  ПолеДата;
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	Отбор.Использование = ?(Форма.пкГод = Дата('00010101'),Ложь,Истина);
	Отбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Отбор.ПравоеЗначение = НачалоГода(Форма.пкГод);
	
    Отбор = ОтборПоДате.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = ПолеДата;
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	Отбор.Использование = ?(Форма.пкГод = Дата('00010101'),Ложь,Истина);
	Отбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Отбор.ПравоеЗначение = КонецГода(Форма.пкГод); 
	
КонецПроцедуры

Процедура ДоговорыКонтрагентовСписокпкЕстьОсновнойДоговорСПоставщикомПриИзменении(Форма)
	
	Для каждого Элемент Из Форма.Список.Отбор.Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ЭлементОтбораКомпоновкиДанных") И  
			Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДополнительныеРеквизиты.Значение") Тогда
			Форма.Список.Отбор.Элементы.Удалить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Если Форма.ЕстьОсновнойДоговорСПоставщиком = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДополнительныеРеквизиты.Значение");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование = Истина;
	Отбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Отбор.ПравоеЗначение = Форма.ЕстьОсновнойДоговорСПоставщиком; 

КонецПроцедуры

//-- Рарус Лимаренко 20.02.2018

Процедура ЗаполнитьПоПрайсЛисту(Форма)
    
    Элементы = Форма.Элементы;
    Объект = Форма.Объект;
    
    Если НЕ ЗначениеЗаполнено(Объект.пкПрайсЛист) Тогда
        Сообщить("Укажите прайс-лист"); 
        Возврат;
    КонецЕсли;    
    
    пкМодификацияСервер.ЗаполнитьПоПрайсЛистуНаСервере(Объект);
    
    КопироватьДанныеФормы(Объект, Форма.Объект); 
    
КонецПроцедуры  

Процедура ЗаполнитьТарифыПоПрайсЛисту(Форма)
    
    Элементы = Форма.Элементы;
    Объект = Форма.Объект;
    
    Если НЕ ЗначениеЗаполнено(Объект.пкПрайсЛист) Тогда
        Сообщить("Укажите прайс-лист"); 
        Возврат;
    КонецЕсли;    
    
    пкМодификацияСервер.ЗаполнитьТарифыПоПрайсЛистуНаСервере(Объект);
    
    КопироватьДанныеФормы(Объект, Форма.Объект); 
    
КонецПроцедуры  

Процедура ЗаполнитьТранспортировкуПоПрайсЛисту(Форма)
    
    Элементы = Форма.Элементы;
    Объект = Форма.Объект;
    
    Если НЕ ЗначениеЗаполнено(Объект.пкПрайсЛист) Тогда
        Сообщить("Укажите прайс-лист"); 
        Возврат;
    КонецЕсли;    
    
    пкМодификацияСервер.ЗаполнитьТранспортировкуПоПрайсЛистуНаСервере(Объект);
    
    КопироватьДанныеФормы(Объект, Форма.Объект); 
    
КонецПроцедуры  

Процедура ЗаполнитьУслугиРемонтаПоПрайсЛисту(Форма)
    
    Элементы = Форма.Элементы;
    Объект = Форма.Объект;
    
    Если НЕ ЗначениеЗаполнено(Объект.пкПрайсЛист) Тогда
        Сообщить("Укажите прайс-лист"); 
        Возврат;
    КонецЕсли;    
    
    пкМодификацияСервер.ЗаполнитьУслугиРемонтаПоПрайсЛистуНаСервере(Объект);
    
    КопироватьДанныеФормы(Объект, Форма.Объект); 
    
КонецПроцедуры  

//++ Рарус Лимаренко 21.05.2018 Заявка №11946 2.4
Процедура ДоговорыКонтрагентовпкЯвляетсяДопСоглашениемКДоговоруПриИзменении(Форма)
	
	Элементы = Форма.Элементы;
    Объект = Форма.Объект;
	Элементы.пкДопСоглашениеКДоговору.Видимость = Объект.пкЯвляетсяДопСоглашениемКДоговору;
	Если НЕ Объект.пкЯвляетсяДопСоглашениемКДоговору Тогда	
		Объект.пкДопСоглашениеКДоговору = Неопределено; 	
	КонецЕсли;
	
КонецПроцедуры
//-- Рарус Лимаренко 21.05.2018 Заявка №11946

//++ Рарус Лимаренко 24.05.2018 Заявка №11918
Процедура ДоговорыКонтрагентовпкЗакрытьДоговор(Форма)
	Объект = Форма.Объект;
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДоговоровКонтрагентов.Закрыт") Тогда
		ПоказатьПредупреждение(,"Договор уже находится в статусе закрыт!");
		Возврат;
	КонецЕсли;
	Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДоговоровКонтрагентов.Закрыт");
	Объект.пкДопСоглашениеКДоговору = Неопределено;
	Форма.Элементы.пкЯвляетсяДопСоглашениемКДоговору.Доступность = Ложь;
	Форма.Элементы.пкДопСоглашениеКДоговору.Доступность 		 = Ложь;		
	Форма.Модифицированность = Истина;
КонецПроцедуры
//-- Рарус Лимаренко 24.05.2018 Заявка №11918 2.4

&НаКлиенте	
Процедура пкОсновнойДоговорСПоставщикомНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Сообщить(СтандартнаяОбработка);
	//ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора");
	//
	//  
	//Отбор = Новый Структура("Партнер", ОбъектыСтроительства);
	//
	//ПараметрыФормы = Новый Структура("Отбор", Отбор);
	//
	//ПараметрыОповещения = Новый Структура("ТекущиеДанные", ТекущиеДанные);
	//
	//ОткрытьФорму("Справочник.СМ_ОбъектыСтроительства.Форма.ФормаВыбора", ПараметрыФормы, Элементы.пкТарифыОбъектСтроительства, , , , 
	//    Новый ОписаниеОповещения("ДоговорыКонтрагентовОбъектСтроительстваНачалоВыбораЗавершение", пкМодификацияКлиент, ПараметрыОповещения));
	//Возврат;

	
КонецПроцедуры

#КонецОбласти

#Область Партнеры

Процедура ПартнерыМенеджерПриИзменении(Форма)
    
    Элементы = Форма.Элементы;
    
    ТекущиеДанные = Элементы.пкМенеджеры.ТекущиеДанные;
    
    ТекущиеДанные.Подразделение = пкОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Менеджер, "Подразделение");
    
КонецПроцедуры    

Процедура ПартнерыОбъектСтроительстваНачалоВыбора(Форма)
    
    Элементы = Форма.Элементы;
    Объект = Форма.Объект;
        
    Отбор = Новый Структура("БезОтборов", Истина);
    
    ПараметрыФормы = Новый Структура("Отбор", Отбор);
    
    ПараметрыОповещения = Новый Структура("Форма", Форма);
    
    ОткрытьФорму("Справочник.СМ_ОбъектыСтроительства.Форма.ФормаВыбора", ПараметрыФормы, , , , , 
        Новый ОписаниеОповещения("ПартнерыОбъектСтроительстваНачалоВыбораЗавершение", пкМодификацияКлиент, ПараметрыОповещения));
    
КонецПроцедуры   
    
Процедура ПартнерыОбъектСтроительстваНачалоВыбораЗавершение(ВыбранноеЗначение, ДопПараметры) Экспорт
    
    Элементы      = ДопПараметры.Форма.Элементы;
    ТекущиеДанные = Элементы.пкОбъектыСтроительства.ТекущиеДанные;
    
    ТекущиеДанные.ОбъектСтроительства = ВыбранноеЗначение; 
        
КонецПроцедуры   

#КонецОбласти

#Область ЗаказКлиента

Процедура ЗаказКлиентаПодразделениеПриИзменении(Форма)
    
 	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
        
    Объект.Склад = пкОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Подразделение, "пкСкладТехники");
    
КонецПроцедуры    

Процедура ЗаказКлиентаДатаАрендыПриИзменении(Форма)
    
 	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
    
    Если ЗначениеЗаполнено(ТекущаяСтрока.пкДатаНачалаАренды) И ЗначениеЗаполнено(ТекущаяСтрока.пкДатаОкончанияАренды) Тогда
        ТекущаяСтрока.КоличествоУпаковок = (КонецДня(ТекущаяСтрока.пкДатаОкончанияАренды) + 1 - НачалоДня(ТекущаяСтрока.пкДатаНачалаАренды)) / (3600 * 24);
        
	    СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
        
        СтруктураДействий = Новый Структура;
	    СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	    СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
    	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
    	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
    	СтруктураДействий.Вставить("ПересчитатьСумму");
    	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
    	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
        СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыЗаказа());
        
        ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
        
        РассчитатьИтоговыеПоказателиЗаказа(Форма);
    КонецЕсли;    

КонецПроцедуры  

Процедура ЗаказКлиентаДоговорПриИзменении(Форма) Экспорт
    
 	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    ЭтоАренда = пкОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Договор, "пкВидДоговора") = ПредопределенноеЗначение("Перечисление.пкВидыДоговоров.АрендаТехники");
    
    Элементы.пкОбъектСтроительства.Видимость         = ЭтоАренда;
    Элементы.пкТоварыГруппаАренда.Видимость          = ЭтоАренда;
    Элементы.пкТоварыТехника.Видимость               = ЭтоАренда;
    Элементы.пкТоварыПримечаниеДляПечати.Видимость   = ЭтоАренда;
    Элементы.пкТоварыЗаявкаНаАрендуТехники.Видимость = ЭтоАренда;
    Элементы.пкТоварыВидТарифа.Видимость             = ЭтоАренда;
    Элементы.ТоварыХарактеристика.Видимость          = НЕ ЭтоАренда;
    Элементы.ТоварыСодержание.Видимость              = НЕ ЭтоАренда;
    Элементы.СтраницаДоставка.Видимость              = НЕ ЭтоАренда;
    
    Объект.Менеджер = пкОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Договор, "Менеджер");
    
КонецПроцедуры

Процедура ЗаказКлиентаВидТарифаПриИзменении(Форма)
    
 	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
    СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыЗаказа());
    
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
    
    РассчитатьИтоговыеПоказателиЗаказа(Форма);
        
КонецПроцедуры    

Процедура ЗаказКлиентаТоварыСуммаНДСПриИзменении(Форма)
    
 	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
    СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыЗаказа());
    
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
    
    РассчитатьИтоговыеПоказателиЗаказа(Форма);
    
КонецПроцедуры    

Процедура ЗаказКлиентаОбъектСтроительстваНачалоВыбора(Форма)
    
    Элементы = Форма.Элементы;
    Объект = Форма.Объект;
    
    ОбъектыСтроительства = пкОбщегоНазначенияСервер.ПолучитьОбъектыСтроительстваКлиента(Объект.Партнер);
    
    Отбор = Новый Структура("Ссылка", ОбъектыСтроительства);
    
    ПараметрыФормы = Новый Структура("Отбор", Отбор);
    
    ПараметрыОповещения = Новый Структура("Объект", Объект);
    
    ОткрытьФорму("Справочник.СМ_ОбъектыСтроительства.Форма.ФормаВыбора", ПараметрыФормы, Элементы.пкОбъектСтроительства, , , , 
        Новый ОписаниеОповещения("ЗаказКлиентаОбъектСтроительстваНачалоВыбораЗавершение", пкМодификацияКлиент, ПараметрыОповещения));
    
КонецПроцедуры 

Процедура ЗаказКлиентаОбъектСтроительстваНачалоВыбораЗавершение(ВыбранноеЗначение, ДопПараметры) Экспорт 
    
    Если ВыбранноеЗначение <> Неопределено Тогда
        ДопПараметры.Объект.пкОбъектСтроительства = ВыбранноеЗначение;
        
        СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ДопПараметры.Объект);
        
        СтруктураДействий = Новый Структура;
	    СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(ДопПараметры.Объект));
    	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
    	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
    	СтруктураДействий.Вставить("ПересчитатьСумму");
    	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
    	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
        СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыЗаказа());
        
        Для Каждого Строка ИЗ ДопПараметры.Объект.Товары Цикл
            ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, Неопределено);
        КонецЦикла; 
        
    КонецЕсли;    
    
КонецПроцедуры    

Процедура ЗаказКлиентаТоварыТехникаПриИзменении(Форма)
    
 	Элементы = Форма.Элементы;
    
    ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
    
    ТекущаяСтрока.пкПримечаниеДляПечати = пкУправлениеТехникойСервер.СформироватьПримечаниеДляПечатиПоТехнике(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.пкТехника);
    
КонецПроцедуры 

Процедура ЗаполнитьПоЗаявке(Форма, Заполнить = Истина, Остатки = Истина)
    
    Объект = Форма.Объект;
        
    Если Заполнить И Объект.Товары.Количество() > 0 Тогда
        ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоЗаявкеВопросЗавершение", пкМодификацияКлиент, Новый Структура("Форма, Заполнить, Остатки", Форма, Заполнить, Остатки)), 
            "Перед заполнением табличная часть будет очищена, продолжить?", РежимДиалогаВопрос.ДаНет);
    Иначе
        СтруктураОтбора = Новый Структура();
        
        Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
            СтруктураОтбора.Вставить("Подразделение", Объект.Подразделение);    
        КонецЕсли;  
        
        Если ЗначениеЗаполнено(Объект.Партнер) Тогда
            СтруктураОтбора.Вставить("Партнер", Объект.Партнер);    
        КонецЕсли;  
        
        Если ЗначениеЗаполнено(Объект.Договор) Тогда
            СтруктураОтбора.Вставить("Договор", Объект.Договор);    
        КонецЕсли;  
        
        Если ЗначениеЗаполнено(Объект.пкОбъектСтроительства) Тогда
            СтруктураОтбора.Вставить("ОбъектСтроительства", Объект.пкОбъектСтроительства);    
        КонецЕсли; 
        
        ПараметрыОткрытия = Новый Структура("Отбор", СтруктураОтбора);
        
        ОткрытьФорму("Документ.пкЗаявкаНаАрендуТехники.ФормаВыбора", ПараметрыОткрытия, , , , , Новый ОписаниеОповещения("ЗаполнитьПоЗаявкеЗавершение", 
            пкМодификацияКлиент, Новый Структура("Форма, Заполнить, Остатки", Форма, Заполнить, Остатки)));
    КонецЕсли;
        
КонецПроцедуры 

Процедура ЗаполнитьПоЗаявкеВопросЗавершение(Результат, ДопПараметры) Экспорт
    
    Если Результат = КодВозвратаДиалога.Да Тогда
        Объект = ДопПараметры.Форма.Объект; 
        
        СтруктураОтбора = Новый Структура();
        
        Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
            СтруктураОтбора.Вставить("Подразделение", Объект.Подразделение);    
        КонецЕсли;  
        
        Если ЗначениеЗаполнено(Объект.Партнер) Тогда
            СтруктураОтбора.Вставить("Партнер", Объект.Партнер);    
        КонецЕсли;  
        
        Если ЗначениеЗаполнено(Объект.Договор) Тогда
            СтруктураОтбора.Вставить("Договор", Объект.Договор);    
        КонецЕсли;  
        
        Если ЗначениеЗаполнено(Объект.пкОбъектСтроительства) Тогда
            СтруктураОтбора.Вставить("ОбъектСтроительства", Объект.пкОбъектСтроительства);    
        КонецЕсли; 
        
        ПараметрыОткрытия = Новый Структура("Отбор", СтруктураОтбора);
        
        ОткрытьФорму("Документ.пкЗаявкаНаАрендуТехники.ФормаВыбора", ПараметрыОткрытия, , , , , Новый ОписаниеОповещения("ЗаполнитьПоЗаявкеЗавершение", 
            пкМодификацияКлиент, Новый Структура("Форма, Заполнить, Остатки", ДопПараметры.Форма, ДопПараметры.Заполнить, ДопПараметры.Остатки)));
    КонецЕсли;    
        
КонецПроцедуры    
    
Процедура ЗаполнитьПоЗаявкеЗавершение(ВыбранноеЗначение, ДопПараметры) Экспорт
    
    Если ВыбранноеЗначение <> Неопределено Тогда
        Форма  = ДопПараметры.Форма;
        Объект = Форма.Объект; 
        
        Если ДопПараметры.Заполнить Тогда
            Объект.Товары.Очистить();    
        КонецЕсли;
        
        Если ДопПараметры.Остатки Тогда
            пкПодпискиНаСобытия.ЗаполнитьПоЗаявкеОстатки(Объект, ВыбранноеЗначение, Ложь);
        Иначе
            пкПодпискиНаСобытия.ЗаполнитьПоЗаявке(Объект, ВыбранноеЗначение, Ложь);
        КонецЕсли;    
        
        КопироватьДанныеФормы(Объект, Форма.Объект);
    КонецЕсли;    
    
КонецПроцедуры    

Процедура ЗаказКлиентаКорректировкиТоваровНоменклатураПриИзменении(Форма)
    
 	Элементы = Форма.Элементы;
    Объект   = Форма.Объект; 
        
	ТекущаяСтрока = Элементы.пкКорректировкиТоваров.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
    
    Номенклатура    = ТекущаяСтрока.Номенклатура;
    ВидНоменклатуры = пкОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидНоменклатуры");
    
    Если пкОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Номенклатура, "пкЭтоТехника")
      ИЛИ пкОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "пкЭтоУслугаТранспортировки") Тогда
    	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
    КонецЕсли;
        
    СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, Объект.Дата));
    СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
    СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
    СтруктураДействий.Вставить("ПересчитатьСумму");
	
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		Форма.ИмяФормы, "пкКорректировкиТоваров"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
    РассчитатьИтоговыеПоказателиЗаказа(Форма);
	
    ТекущаяСтрока.пкПримечаниеДляПечати = пкУправлениеТехникойСервер.СформироватьПримечаниеДляПечатиПоТехнике(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.пкТехника);
    
КонецПроцедуры

Процедура ЗаказКлиентаКорректировкиТоваровпкТехникаПриИзменении(Форма)
    
 	Элементы = Форма.Элементы;
        
	ТекущаяСтрока = Элементы.пкКорректировкиТоваров.ТекущиеДанные;
		
    ТекущаяСтрока.пкПримечаниеДляПечати = пкУправлениеТехникойСервер.СформироватьПримечаниеДляПечатиПоТехнике(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.пкТехника);
    
КонецПроцедуры

Процедура ЗаказКлиентаКорректировкиТоваровДатаАрендыПриИзменении(Форма)
    
 	Элементы = Форма.Элементы;
    Объект   = Форма.Объект; 
        
	ТекущаяСтрока = Элементы.пкКорректировкиТоваров.ТекущиеДанные;
	
    Если ЗначениеЗаполнено(ТекущаяСтрока.пкДатаНачалаАренды) И ЗначениеЗаполнено(ТекущаяСтрока.пкДатаОкончанияАренды) Тогда
        ТекущаяСтрока.КоличествоУпаковок = (КонецДня(ТекущаяСтрока.пкДатаОкончанияАренды) + 1 - НачалоДня(ТекущаяСтрока.пкДатаНачалаАренды)) / (3600 * 24);
        
	    СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
        
        СтруктураДействий = Новый Структура;
	    СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
        
        Номенклатура    = ТекущаяСтрока.Номенклатура;
        ВидНоменклатуры = пкОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидНоменклатуры");
        
        Если пкОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Номенклатура, "пкЭтоТехника")
          ИЛИ пкОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "пкЭтоУслугаТранспортировки") Тогда
        	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
        КонецЕсли;
        
        СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
        СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
        СтруктураДействий.Вставить("ПересчитатьСумму");
        
        ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
        
        РассчитатьИтоговыеПоказателиЗаказа(Форма);
    КонецЕсли;    
    
КонецПроцедуры

Процедура ЗаказКлиентаКорректировкиТоваровКоличествоУпаковокПриИзменении(Форма)
    
 	Элементы = Форма.Элементы;
    Объект   = Форма.Объект; 
        
	ТекущаяСтрока = Элементы.пкКорректировкиТоваров.ТекущиеДанные;
    
    СтруктураДействий = Новый Структура;
    
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
    
    СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
    СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
    СтруктураДействий.Вставить("ПересчитатьСумму");
    
    Номенклатура    = ТекущаяСтрока.Номенклатура;
    ВидНоменклатуры = пкОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидНоменклатуры");
    
    Если пкОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Номенклатура, "пкЭтоТехника")
      ИЛИ пкОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "пкЭтоУслугаТранспортировки") Тогда        
        Если пкОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Договор, "пкВидДоговора") = ПредопределенноеЗначение("Перечисление.пкВидыДоговоров.АрендаТехники") Тогда
    	    СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
        КонецЕсли;  
    КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
    РассчитатьИтоговыеПоказателиЗаказа(Форма);
	
    Если ЗначениеЗаполнено(ТекущаяСтрока.пкДатаНачалаАренды) И НЕ ЗначениеЗаполнено(ТекущаяСтрока.пкДатаОкончанияАренды) Тогда
        ТекущаяСтрока.пкДатаОкончанияАренды = пкУправлениеТехникойСервер.ПолучитьДатуОкончанияАрендыПоСрокуАренды(ТекущаяСтрока.КоличествоУпаковок, ТекущаяСтрока.пкДатаНачалаАренды, 
            ТекущаяСтрока.Номенклатура, ?(ЗначениеЗаполнено(ТекущаяСтрока.Упаковка), ТекущаяСтрока.Упаковка, пкОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Номенклатура, "ЕдиницаИзмерения")));    
    КонецЕсли;    

КонецПроцедуры

Процедура ЗаказКлиентаКорректировкиТоваровУпаковкаПриИзменении(Форма)
    
 	Элементы = Форма.Элементы;
    Объект   = Форма.Объект; 
        
	ТекущаяСтрока = Элементы.пкКорректировкиТоваров.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
    
    Номенклатура    = ТекущаяСтрока.Номенклатура;
    ВидНоменклатуры = пкОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидНоменклатуры");
    
    Если пкОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Номенклатура, "пкЭтоТехника")
      ИЛИ пкОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "пкЭтоУслугаТранспортировки") Тогда
    	Если ТекущаяСтрока.Количество > 0 Тогда
    		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
    	Иначе
    		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
    	КонецЕсли;
    КонецЕсли;
    
    СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
    СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
    СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
    РассчитатьИтоговыеПоказателиЗаказа(Форма);
	    
КонецПроцедуры

Процедура ЗаказКлиентаКорректировкиТоваровВидТарифаПриИзменении(Форма)
    
 	Элементы = Форма.Элементы;
    Объект   = Форма.Объект; 
        
	ТекущаяСтрока = Элементы.пкКорректировкиТоваров.ТекущиеДанные;
    
    Номенклатура    = ТекущаяСтрока.Номенклатура;
    ВидНоменклатуры = пкОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидНоменклатуры");
    
    Если пкОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Номенклатура, "пкЭтоТехника")
      ИЛИ пкОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "пкЭтоУслугаТранспортировки") Тогда
    	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
    	
    	СтруктураДействий = Новый Структура;
    	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
    	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
    	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
    	СтруктураДействий.Вставить("ПересчитатьСумму");
    	
    	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
        
        РассчитатьИтоговыеПоказателиЗаказа(Форма);
    КонецЕсли;
    
КонецПроцедуры

Процедура ЗаказКлиентаКорректировкиТоваровЦенаПриИзменении(Форма)
    
 	Элементы = Форма.Элементы;
    Объект   = Форма.Объект; 
        
	ТекущаяСтрока = Элементы.пкКорректировкиТоваров.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
    РассчитатьИтоговыеПоказателиЗаказа(Форма);
    
КонецПроцедуры

Процедура ЗаказКлиентаКорректировкиТоваровСуммаПриИзменении(Форма)
    
 	Элементы = Форма.Элементы;
    Объект   = Форма.Объект; 
        
	ТекущаяСтрока = Элементы.пкКорректировкиТоваров.ТекущиеДанные;
	
	СтруктураПересчетаЦены  = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаЦеныСкидкиВПродажахВТЧ(Объект, 
		Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию"));
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах", СтруктураПересчетаЦены);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
    РассчитатьИтоговыеПоказателиЗаказа(Форма);
    
КонецПроцедуры

Процедура ЗаказКлиентаКорректировкиТоваровСтавкаНДСПриИзменении(Форма)
    
 	Элементы = Форма.Элементы;
    Объект   = Форма.Объект; 
        
	ТекущаяСтрока = Элементы.пкКорректировкиТоваров.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
    РассчитатьИтоговыеПоказателиЗаказа(Форма);
    
КонецПроцедуры

//Рарус Владимир Подрезов 15.08.2017 RS00-0000000000000005314
Процедура ЗаказКлиентаКорректировкиТоваровСуммаНДСПриИзменении(Форма)
    
 	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    ТекущаяСтрока = Элементы.пкКорректировкиТоваров.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
    
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
    
    РассчитатьИтоговыеПоказателиЗаказа(Форма);
    
КонецПроцедуры    
//Рарус Владимир Подрезов Конец

Процедура РассчитатьИтоговыеПоказателиЗаказа(Форма)
	
	// Заполнение итогов по таблице "Товары"
	
	КоллекцияТовары = Форма.Объект.Товары;
            
	КоллекцияКорректировкиТоваров = Форма.Объект.пкКорректировкиТоваров;
    
    Форма.СуммаЗаказаноСЗалоговойТарой = ?(Форма.Объект.ТребуетсяЗалогЗаТару,
    	КоллекцияКорректировкиТоваров.Итог("СуммаСНДС") + КоллекцияТовары.Итог("СуммаСНДС") - КоллекцияТовары.Итог("СуммаСНДСОтменено"),
    	КоллекцияКорректировкиТоваров.Итог("СуммаСНДС") + КоллекцияТовары.Итог("СуммаСНДСБезВозвратнойТары") - КоллекцияТовары.Итог("СуммаСНДСОтмененоБезВозвратнойТары"));
    Форма.СуммаЗаказано     = КоллекцияКорректировкиТоваров.Итог("СуммаСНДС") + КоллекцияТовары.Итог("СуммаСНДСБезВозвратнойТары") - КоллекцияТовары.Итог("СуммаСНДСОтмененоБезВозвратнойТары");
    Форма.СуммаЗалогаЗаТару = ?(Форма.Объект.ТребуетсяЗалогЗаТару,(КоллекцияТовары.Итог("СуммаСНДС") - КоллекцияТовары.Итог("СуммаСНДСОтменено"))
    		- (КоллекцияТовары.Итог("СуммаСНДСБезВозвратнойТары") - КоллекцияТовары.Итог("СуммаСНДСОтмененоБезВозвратнойТары")),0);
    Форма.СуммаНДСЗаказано  = ?(Форма.Объект.ТребуетсяЗалогЗаТару,
    	КоллекцияКорректировкиТоваров.Итог("СуммаНДС") + КоллекцияТовары.Итог("СуммаНДС") - КоллекцияТовары.Итог("СуммаНДСОтменено"),
    	КоллекцияКорректировкиТоваров.Итог("СуммаНДС") + КоллекцияТовары.Итог("СуммаНДСБезВозвратнойТары") - КоллекцияТовары.Итог("СуммаНДСОтмененоБезВозвратнойТары"));
                
	Форма.СуммаАвтоСкидки   = ?(Форма.Объект.ТребуетсяЗалогЗаТару,
		КоллекцияТовары.Итог("СуммаАвтоматическойСкидки") - КоллекцияТовары.Итог("СуммаАвтоматическойСкидкиОтменено"),
		КоллекцияТовары.Итог("СуммаАвтоматическойСкидкиБезВозвратнойТары") - КоллекцияТовары.Итог("СуммаАвтоматическойСкидкиОтмененоБезВозвратнойТары"));
	Форма.СуммаРучнойСкидки = ?(Форма.Объект.ТребуетсяЗалогЗаТару,
		КоллекцияТовары.Итог("СуммаРучнойСкидки") - КоллекцияТовары.Итог("СуммаРучнойСкидкиОтменено"),
		КоллекцияТовары.Итог("СуммаРучнойСкидкиБезВозвратнойТары") - КоллекцияТовары.Итог("СуммаРучнойСкидкиОтмененоБезВозвратнойТары"));
	Форма.СуммаСкидки       = Форма.СуммаАвтоСкидки + Форма.СуммаРучнойСкидки;
	Форма.СуммаОтменено     = ?(Форма.Объект.ТребуетсяЗалогЗаТару,
		КоллекцияТовары.Итог("СуммаСНДСОтменено"),
		КоллекцияТовары.Итог("СуммаСНДСОтмененоБезВозвратнойТары"));
	
	Если КоллекцияТовары.Итог("СуммаСНДСОтменено") = КоллекцияТовары.Итог("СуммаСНДС") Тогда
		Форма.ВсеСтрокиОтменены = Истина;
	Иначе
		Форма.ВсеСтрокиОтменены = Ложь;
	КонецЕсли;
	
	СуммаЗаказано = ?(Форма.Объект.ТребуетсяЗалогЗаТару,
		КоллекцияТовары.Итог("Сумма") - КоллекцияТовары.Итог("СуммаОтменено"),
		КоллекцияТовары.Итог("СуммаБезВозвратнойТары") - КоллекцияТовары.Итог("СуммаОтмененоБезВозвратнойТары"));
	
	Если СуммаЗаказано > 0 
		И (СуммаЗаказано + Форма.СуммаСкидки) <> 0 Тогда
		Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / (СуммаЗаказано + Форма.СуммаСкидки);
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / (СуммаЗаказано + Форма.СуммаСкидки);
		Форма.ПроцентСкидки       = Форма.ПроцентАвтоСкидки + Форма.ПроцентРучнойСкидки;
	ИначеЕсли Форма.СуммаСкидки > 0 Тогда
		Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / Форма.СуммаСкидки;
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / Форма.СуммаСкидки;
		Форма.ПроцентСкидки       = 100;
	Иначе
		Форма.ПроцентАвтоСкидки   = 0;
		Форма.ПроцентРучнойСкидки = 0;
		Форма.ПроцентСкидки       = 0;
	КонецЕсли;
	
	// Заполнение итогов по этапам оплаты
	
	Форма.СуммаАвансаДоОбеспечения = 0;
	Форма.СуммаПредоплатыДоОтгрузки = 0;
	Форма.СуммаКредитаПослеОтгрузки = 0;
	Форма.ПроцентАвансаДоОбеспечения = 0;
	Форма.ПроцентПредоплатыДоОтгрузки = 0;
	Форма.ПроцентКредитаПослеОтгрузки = 0;
	
	СоответствиеВариантовОплаты = Новый Соответствие;
	СоответствиеВариантовОплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.АвансДоОбеспечения"),
		Новый Структура("Сумма, Проценты", "СуммаАвансаДоОбеспечения", "ПроцентАвансаДоОбеспечения"));
	СоответствиеВариантовОплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки"),
		Новый Структура("Сумма, Проценты", "СуммаПредоплатыДоОтгрузки", "ПроцентПредоплатыДоОтгрузки"));
	СоответствиеВариантовОплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки"),
		Новый Структура("Сумма, Проценты", "СуммаКредитаПослеОтгрузки", "ПроцентКредитаПослеОтгрузки"));
	
	Для Каждого ТекСтрока Из Форма.Объект.ЭтапыГрафикаОплаты Цикл
		ИменаЭлементов = СоответствиеВариантовОплаты[ТекСтрока.ВариантОплаты];
		Если ИменаЭлементов <> Неопределено Тогда
			Форма[ИменаЭлементов.Сумма] = Форма[ИменаЭлементов.Сумма] + ТекСтрока.СуммаПлатежа
				+ ?(Форма.Объект.ТребуетсяЗалогЗаТару, ТекСтрока.СуммаЗалогаЗаТару, 0);
		КонецЕсли;
	КонецЦикла;
	
	СуммаВсегоПоЭтапам = Форма.СуммаАвансаДоОбеспечения + Форма.СуммаПредоплатыДоОтгрузки + Форма.СуммаКредитаПослеОтгрузки;
	Если СуммаВсегоПоЭтапам <> 0 Тогда
		Форма.ПроцентАвансаДоОбеспечения  = (Форма.СуммаАвансаДоОбеспечения/СуммаВсегоПоЭтапам)*100;
		Форма.ПроцентПредоплатыДоОтгрузки = (Форма.СуммаПредоплатыДоОтгрузки/СуммаВсегоПоЭтапам)*100;;
		Форма.ПроцентКредитаПослеОтгрузки = (Форма.СуммаКредитаПослеОтгрузки/СуммаВсегоПоЭтапам)*100;
	КонецЕсли;
	
	// Выбор странцицы отображения НДС
	
	Если Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС")
		ИЛИ Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД") Тогда
		
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоБезНДС;
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаБезНДС;
	Иначе
		
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоСНДС;
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаСНДС;
    КонецЕсли;
    	
КонецПроцедуры

Функция ЗависимыеРеквизитыЗаказа()
	
	Возврат Новый Структура(
		"БезВозвратнойТары,ОтмененоБезВозвратнойТары,Отменено",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки");
	
КонецФункции

#КонецОбласти

#Область ЗаявкаНаРасходованиеДенежныхСредств

Процедура ЗаявкаНаРасходованиеДенежныхСредствКурсДокументаПриИзменении(Форма)
    
 	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
    
    Если ТекущиеДанные <> Неопределено Тогда
        
		//пкМодификацияСервер.ЗаявкаНаРасходованиеДенежныхСредствКурсДокументаПриИзмененииНаСервере(Объект, ТекущиеДанные.СуммаВзаиморасчетов);
			
		ТекущиеДанные.Сумма = ТекущиеДанные.СуммаВзаиморасчетов * ?(Объект.пкКурсДокумента = 0,1,Объект.пкКурсДокумента);
	
		СтруктураПересчетаСуммы = Новый Структура;
		СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
	
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, Неопределено);
	
		Объект.СуммаДокумента 	= Объект.РасшифровкаПлатежа.Итог("Сумма");
		Объект.пкСуммаБезНДС	= Объект.РасшифровкаПлатежа.Итог("Сумма") - Объект.РасшифровкаПлатежа.Итог("СуммаНДС");	
        КопироватьДанныеФормы(Объект, Форма.Объект); 
	КонецЕсли;
	
	//СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	//СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	//
	//СтруктураПересчетаСуммы = Новый Структура;
	//СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
	//СтруктураДействий = Новый Структура;
	//СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	//ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
	//
	//СформироватьНадписьГиперссылкиРеквизитыОбъектаРасчетов();
    
КонецПроцедуры 

Процедура ЗаявкаНаРасходованиеДенежныхСредствДатаКурсаПриИзменении(Форма)
    
 	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
    
    Если ТекущиеДанные <> Неопределено Тогда
        пкМодификацияСервер.ЗаявкаНаРасходованиеДенежныхСредствДатаКурсаПриИзмененииНаСервере(Объект, ТекущиеДанные.ВалютаВзаиморасчетов, ТекущиеДанные.СуммаВзаиморасчетов);
        
        КопироватьДанныеФормы(Объект, Форма.Объект); 
    КонецЕсли;
        
КонецПроцедуры   

//++RARUS_IUC
Процедура ЗаявкаНаРасходованиеДенежныхСредствИзменитьКурсПриИзменении(Форма)
    
 	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    ПараметрыОткрытия = Новый Структура();
    ПараметрыОткрытия.Вставить("КурсДокумента", Объект.пкКурсДокумента);
    ПараметрыОткрытия.Вставить("ДатаКурса",     Объект.пкДатаКурса);
    
    Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
        ПараметрыОткрытия.Вставить("ВалютаВзаиморасчетов", Объект.РасшифровкаПлатежа[0].ВалютаВзаиморасчетов);
    КонецЕсли;
    
    ПараметрыОповещения = Новый Структура();
    ПараметрыОповещения.Вставить("Объект", Объект);
    
    ОткрытьФорму("Документ.ЗаявкаНаРасходованиеДенежныхСредств.Форма.пкИзменениеКурса", ПараметрыОткрытия, , , , , 
        Новый ОписаниеОповещения("ЗаявкаНаРасходованиеДенежныхСредствИзменитьКурсПриИзмененииЗавершение", пкМодификацияКлиент, ПараметрыОповещения));
    
КонецПроцедуры  
//--RARUS_IUC

Процедура ЗаявкаНаРасходованиеДенежныхСредствИзменитьКурсПриИзмененииЗавершение(Результат, ДопПараметры) Экспорт
    
    Если ТипЗнч(Результат) = Тип("Структура") Тогда
        Объект = ДопПараметры.Объект;
        
        ДопПараметры.Объект.пкКурсДокумента = Результат.КурсДокумента;
        ДопПараметры.Объект.пкДатаКурса     = Результат.ДатаКурса;
        
		Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
			
			СуммаВзаиморасчетов = Объект.РасшифровкаПлатежа[0].СуммаВзаиморасчетов;
			
		    Объект.СуммаДокумента = СуммаВзаиморасчетов * Объект.пкКурсДокумента; 
		    
			Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
				
				СтрокаТаблицы = Объект.РасшифровкаПлатежа[0];
				СтрокаТаблицы.Сумма = Объект.СуммаДокумента;
				СтрокаТаблицы.СуммаВзаиморасчетов = СуммаВзаиморасчетов;
				
			ИначеЕсли Объект.РасшифровкаПлатежа.Количество() = 0 И Объект.СуммаДокумента > 0 Тогда
				
				СтрокаТаблицы = Объект.РасшифровкаПлатежа.Добавить();
				СтрокаТаблицы.Сумма = Объект.СуммаДокумента;		
		ИначеЕсли Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
			
		Для каждого Расшифровка Из Объект.РасшифровкаПлатежа Цикл
			
			Расшифровка.Сумма = Расшифровка.СуммаВзаиморасчетов * Объект.пкКурсДокумента;
			Расшифровка.СуммаВзаиморасчетов = Расшифровка.СуммаВзаиморасчетов  * Объект.пкКурсДокумента;
			
		КонецЦикла;
			
		ИначеЕсли Объект.РасшифровкаПлатежа.Итог("Сумма") > Объект.СуммаДокумента Тогда
				
				СуммаРазницы = Объект.РасшифровкаПлатежа.Итог("Сумма") - Объект.СуммаДокумента;
				НомерСтроки = Объект.РасшифровкаПлатежа.Количество() - 1;
				Пока НомерСтроки <> 0 Цикл
					СтрокаРасшифровки = Объект.РасшифровкаПлатежа[НомерСтроки];
					Если СтрокаРасшифровки.Сумма = СуммаРазницы Тогда
						Объект.РасшифровкаПлатежа.Удалить(НомерСтроки);
					ИначеЕсли СтрокаРасшифровки.Сумма > СуммаРазницы Тогда
						СтрокаРасшифровки.Сумма = СтрокаРасшифровки.Сумма - СуммаРазницы;
						СтрокаРасшифровки.СуммаВзаиморасчетов = 0;
					ИначеЕсли СтрокаРасшифровки.Сумма < СуммаРазницы Тогда
						СуммаРазницы = СуммаРазницы - СтрокаРасшифровки.Сумма;
						Объект.РасшифровкаПлатежа.Удалить(НомерСтроки);
					КонецЕсли;
					НомерСтроки = НомерСтроки - 1 ;
		        КонецЦикла;
		        
		    КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;    
    
КонецПроцедуры  


//Рарус Владимир Подрезов 16.03.2017
Процедура СписаниеБезналичныхДенежныхСредствИзменитьКурсПриИзменении(Форма)
    
 	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    ПараметрыОткрытия = Новый Структура();
    ПараметрыОткрытия.Вставить("КурсДокумента", Объект.пкКурсДокумента);
    ПараметрыОткрытия.Вставить("ДатаКурса",     Объект.пкДатаКурса);
    
    Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
        ПараметрыОткрытия.Вставить("ВалютаВзаиморасчетов", Объект.РасшифровкаПлатежа[0].ВалютаВзаиморасчетов);
    КонецЕсли;
    
    ПараметрыОповещения = Новый Структура();
    ПараметрыОповещения.Вставить("Объект", Объект);
    
    ОткрытьФорму("Документ.СписаниеБезналичныхДенежныхСредств.Форма.пкИзменениеКурса", ПараметрыОткрытия, , , , , 
        Новый ОписаниеОповещения("СписаниеБезналичныхДенежныхСредствИзменитьКурсПриИзмененииЗавершение", пкМодификацияКлиент, ПараметрыОповещения));
    
КонецПроцедуры  

Процедура СписаниеБезналичныхДенежныхСредствИзменитьКурсПриИзмененииЗавершение(Результат, ДопПараметры) Экспорт
    
    Если ТипЗнч(Результат) = Тип("Структура") Тогда
        Объект = ДопПараметры.Объект;
        
        ДопПараметры.Объект.пкКурсДокумента = Результат.КурсДокумента;
        ДопПараметры.Объект.пкДатаКурса     = Результат.ДатаКурса;
        
        Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
            СуммаВзаиморасчетов = Объект.РасшифровкаПлатежа[0].СуммаВзаиморасчетов;
            
            Объект.СуммаДокумента = СуммаВзаиморасчетов * Объект.пкКурсДокумента; 
            
        	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
        		
        		СтрокаТаблицы = Объект.РасшифровкаПлатежа[0];
        		СтрокаТаблицы.Сумма = Объект.СуммаДокумента;
        		СтрокаТаблицы.СуммаВзаиморасчетов = СуммаВзаиморасчетов;
        		
        	ИначеЕсли Объект.РасшифровкаПлатежа.Количество() = 0 И Объект.СуммаДокумента > 0 Тогда
        		
        		СтрокаТаблицы = Объект.РасшифровкаПлатежа.Добавить();
        		СтрокаТаблицы.Сумма = Объект.СуммаДокумента;
        		
        	ИначеЕсли Объект.РасшифровкаПлатежа.Итог("Сумма") > Объект.СуммаДокумента Тогда
        		
        		СуммаРазницы = Объект.РасшифровкаПлатежа.Итог("Сумма") - Объект.СуммаДокумента;
        		НомерСтроки = Объект.РасшифровкаПлатежа.Количество() - 1;
        		Пока НомерСтроки <> 0 Цикл
        			СтрокаРасшифровки = Объект.РасшифровкаПлатежа[НомерСтроки];
        			Если СтрокаРасшифровки.Сумма = СуммаРазницы Тогда
        				Объект.РасшифровкаПлатежа.Удалить(НомерСтроки);
        			ИначеЕсли СтрокаРасшифровки.Сумма > СуммаРазницы Тогда
        				СтрокаРасшифровки.Сумма = СтрокаРасшифровки.Сумма - СуммаРазницы;
        				СтрокаРасшифровки.СуммаВзаиморасчетов = 0;
        			ИначеЕсли СтрокаРасшифровки.Сумма < СуммаРазницы Тогда
        				СуммаРазницы = СуммаРазницы - СтрокаРасшифровки.Сумма;
        				Объект.РасшифровкаПлатежа.Удалить(НомерСтроки);
        			КонецЕсли;
        			НомерСтроки = НомерСтроки - 1 ;
                КонецЦикла;
                
            КонецЕсли;
        КонецЕсли;
    КонецЕсли;    
    
КонецПроцедуры  

Процедура ОтражениеЗарплатыВФинансовомУчетеУдержанияЗаполнитьПодразделения(Форма)
    
 	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    пкМодификацияСервер.ОтражениеЗарплатыВФинансовомУчетеУдержанияЗаполнитьПодразделенияНаСервере(Объект);
    КопироватьДанныеФормы(Объект, Форма.Объект); 
    
КонецПроцедуры  
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 22.03.2017
Процедура РеализацияУслугПрочихАктивовЗаполнитьСодержания(Форма)
    
 	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    пкМодификацияСервер.РеализацияУслугПрочихАктивовЗаполнитьСодержанияНаСервере(Объект);
    КопироватьДанныеФормы(Объект, Форма.Объект); 
    
КонецПроцедуры  
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 15.03.2017
Процедура пкДобавитьДоговор(Форма)
    
 	Элементы = Форма.Элементы;
    Список   = Форма.Список;
    
    ПараметрыОткрытия = Новый Структура();
	Для Каждого текПараметр Из Список.Параметры.Элементы Цикл
		Если СокрЛП(текПараметр.Параметр) = "Контрагент" Тогда
        	ПараметрыОткрытия.Вставить("Контрагент", текПараметр.Значение);
		ИначеЕсли СокрЛП(текПараметр.Параметр) = "Партнер" Тогда
        	ПараметрыОткрытия.Вставить("Партнер", текПараметр.Значение);
		КонецЕсли;
	КонецЦикла;
    
    ПараметрыОповещения = Новый Структура();
    ПараметрыОповещения.Вставить("Список", Элементы.Список);
    
    ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаЭлемента", Новый Структура("Основание", ПараметрыОткрытия), , , , , 
        Новый ОписаниеОповещения("пкДобавитьДоговорЗавершение", пкМодификацияКлиент, ПараметрыОповещения));
    
КонецПроцедуры  

Процедура пкДобавитьДоговорЗавершение(Результат, ДопПараметры) Экспорт
    
	Список = ДопПараметры.Список;
	Список.Обновить();
        
КонецПроцедуры  
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 13.09.2017
Процедура пкСкопироватьДоговор(Форма)
    
 	Элементы = Форма.Элементы;
    Список   = Форма.Список;
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Элементы.Список.ТекущиеДанные.Ссылка) <> Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Возврат;
	КонецЕсли;
	
    ПараметрыОповещения = Новый Структура();
    ПараметрыОповещения.Вставить("Список", Элементы.Список);
    
    ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаЭлемента", Новый Структура("ЗначениеКопирования", Элементы.Список.ТекущиеДанные.Ссылка), , , , , 
        Новый ОписаниеОповещения("пкСкопироватьДоговорЗавершение", пкМодификацияКлиент, ПараметрыОповещения));
    
КонецПроцедуры  

Процедура пкСкопироватьДоговорЗавершение(Результат, ДопПараметры) Экспорт
    
	Список = ДопПараметры.Список;
	Список.Обновить();
        
КонецПроцедуры  
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 09.02.2017
//Рарус Владимир Подрезов 25.10.2017 4668
//Закомментированно по запросу - перешли на типовой функционал
//Процедура ЗаявкаНаРасходованиеДенежныхСредствпкСтавкаНДСПриИзменении(Форма)
//	
//	Объект				= Форма.Объект;
//	
//	пкМодификацияСервер.ЗаявкаНаРасходованиеДенежныхСредствпкСтавкаНДСПриИзмененииСервер(Объект);
//	
//	КопироватьДанныеФормы(Объект, Форма.Объект); 
//    
//КонецПроцедуры 
//Рарус Владимир Подрезов Конец

Процедура ЗаявкаНаРасходованиеДенежныхСредствСуммаДокументаПриИзменении(Форма)
	
	Объект				= Форма.Объект;
	
	ФинансыКлиентСервер.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.СуммаДокумента);
	пкМодификацияСервер.ЗаявкаНаРасходованиеДенежныхСредствСуммаДокументаПриИзмененииСервер(Объект, Форма.Партнер, Форма.ДоговорКонтрагента);
	
	КопироватьДанныеФормы(Объект, Форма.Объект); 
	
КонецПроцедуры 
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 09.03.2017
Процедура АвансовыйОтчетпкКоличествоПриИзменении(Форма)
	
 	Элементы = Форма.Элементы;
	Объект				= Форма.Объект;	
	//ТекущаяСтрока = Элементы.ПрочиеРасходы.ТекущиеДанные;
	//
	//ТекущаяСтрока.Сумма = ТекущаяСтрока.пкКоличество * ТекущаяСтрока.пкЦена;
	//
	//СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	//СтруктураПересчетаСуммы.Вставить("НДСпоСтавкам4и2", Форма.НДСпоСтавкам4и2);
	//СтруктураДействий = Новый Структура;
	//СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	//СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	//
	//ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
	ТекущиеДанные = Элементы.ПрочиеРасходы.ТекущиеДанные;
	Сумма = ТекущиеДанные.пкЦена*ТекущиеДанные.пкКоличество;
	ТекущаяСтрока = Новый Структура;
	ТекущаяСтрока.Вставить("Сумма",               	Сумма);

	//ТекущаяСтрока.Вставить("Цена",                ТекущиеДанные.пкЦена);
	//ТекущаяСтрока.Вставить("КоличествоУпаковок",  ТекущиеДанные.пкКоличество);

	ТекущаяСтрока.Вставить("СтавкаНДС",           ТекущиеДанные.СтавкаНДС);
	ТекущаяСтрока.Вставить("СуммаНДС",            ТекущиеДанные.СуммаНДС);
	ТекущаяСтрока.Вставить("СуммаСНДС",           ТекущиеДанные.СуммаСНДС);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	//СтруктураДействий.Вставить("ПересчитатьСумму"		, СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС"	, СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС"	, СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ТекущаяСтрока);
	ТекущиеДанные.Сумма = ТекущиеДанные.пкЦена*ТекущиеДанные.пкКоличество;
	КопироватьДанныеФормы(Объект, Форма.Объект); 
КонецПроцедуры 

Процедура АвансовыйОтчетпкЦенаПриИзменении(Форма)
	
  	Элементы = Форма.Элементы;
	Объект				= Форма.Объект;
		
	ТекущиеДанные = Элементы.ПрочиеРасходы.ТекущиеДанные;
	Сумма = ТекущиеДанные.пкЦена*ТекущиеДанные.пкКоличество;
	ТекущаяСтрока = Новый Структура;
	ТекущаяСтрока.Вставить("Сумма",               	Сумма);
	//ТекущаяСтрока.Вставить("Цена",                ТекущиеДанные.пкЦена);
	//ТекущаяСтрока.Вставить("КоличествоУпаковок",  ТекущиеДанные.пкКоличество);

	ТекущаяСтрока.Вставить("СтавкаНДС",           ТекущиеДанные.СтавкаНДС);
	ТекущаяСтрока.Вставить("СуммаНДС",            ТекущиеДанные.СуммаНДС);
	ТекущаяСтрока.Вставить("СуммаСНДС",           ТекущиеДанные.СуммаСНДС);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	//СтруктураДействий.Вставить("ПересчитатьСумму"		, СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС"	, СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС"	, СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ТекущаяСтрока);
	
	КопироватьДанныеФормы(Объект, Форма.Объект); 
КонецПроцедуры 
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 26.07.2017
Процедура ВнутреннееПотребление_пкУчитыватьВРасходахЛогистикиПриИзменении(Форма)
	
 	Элементы = Форма.Элементы;
	Объект				= Форма.Объект;
	
	Элементы.пкТранспортноеСредство.Видимость   = Объект.пкУчитыватьВРасходахЛогистики;
	
КонецПроцедуры 
//Рарус Владимир Подрезов Конец

//++ Рарус Лимаренко 16.02.2018 Задача 9741		
Процедура ЗРДСпкКурсДокументаСписокПриИзменении(Форма)
			 
	Объект = Форма.Объект;
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Расшифровка Из Объект.РасшифровкаПлатежа Цикл
	    Если Расшифровка.СуммаВзаиморасчетов = 0 Тогда
		 	Продолжить;
		КонецЕсли;
		Расшифровка.Сумма = Расшифровка.СуммаВзаиморасчетов * ?(Объект.пкКурсДокумента = 0,1,Объект.пкКурсДокумента);	
		
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(Расшифровка, СтруктураДействий, Неопределено);
	КонецЦикла;
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("Сумма");

	КопироватьДанныеФормы(Объект, Форма.Объект);	
КонецПроцедуры 			  

Процедура ЗРДСРасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Форма)
			 
	Элементы = Форма.Элементы;
	Объект				= Форма.Объект;
	
    ТекущаяСтрока = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ТекущаяСтрока.Сумма = ТекущаяСтрока.СуммаВзаиморасчетов * ?(Объект.пкКурсДокумента = 0,1,Объект.пкКурсДокумента);
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
	Объект.СуммаДокумента	= Объект.РасшифровкаПлатежа.Итог("Сумма");
	Объект.пкСуммаБезНДС	= Объект.РасшифровкаПлатежа.Итог("Сумма") - Объект.РасшифровкаПлатежа.Итог("СуммаНДС");
	
	КопироватьДанныеФормы(Объект, Форма.Объект);
			 
КонецПроцедуры // ЗРДСРасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Форма)()

Процедура ЗРДСпкДатаКурсаСписокПриИзменении(Форма)
	
	Объект = Форма.Объект;
	
	СтарыйКурс = Объект.пкКурсДокумента;
	Объект.пкКурсДокумента = пкМодификацияСервер.ЗРДСпкДатаКурсаПриИзмененииНаСервере(Объект);
		
	ЗРДСпкКурсДокументаСписокПриИзменении(Форма);
	
КонецПроцедуры // ЗРДСпкДатаКурсаСписокПриИзменении()

//-- Рарус Лимаренко 16.02.2018	 Задача 9741

#КонецОбласти

#Область ПоступлениеТоваровУслуг

Процедура ПоступлениеТоваровУслугДатаКурсаПриИзменении(Форма)
    
 	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
        
    пкМодификацияСервер.ПоступлениеТоваровУслугПриИзмененииНаСервере(Объект, Объект.ВалютаВзаиморасчетов);
    
    КопироватьДанныеФормы(Объект, Форма.Объект); 
    
КонецПроцедуры   

#КонецОбласти

#Область РеализацияТоваровУслуг

Процедура РеализацияТоваровУслугДоговорПриИзменении(Форма) Экспорт
    
 	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    ЭтоАренда = пкОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Договор, "пкВидДоговора") = ПредопределенноеЗначение("Перечисление.пкВидыДоговоров.АрендаТехники");
    
    Элементы.пкОбъектСтроительства.Видимость         = ЭтоАренда;
    Элементы.пкТоварыГруппаАренда.Видимость          = ЭтоАренда;
    Элементы.пкТоварыТехника.Видимость               = ЭтоАренда;
    Элементы.пкТоварыПримечаниеДляПечати.Видимость   = ЭтоАренда;
    Элементы.пкТоварыЗаявкаНаАрендуТехники.Видимость = ЭтоАренда;
    Элементы.ТоварыХарактеристика.Видимость          = НЕ ЭтоАренда;
    Элементы.СтраницаДоставка.Видимость              = НЕ ЭтоАренда;
    
    Объект.Менеджер = пкОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Договор, "Менеджер");
    
КонецПроцедуры  

Процедура РеализацияТоваровУслугДатаАрендыПриИзменении(Форма)
    
 	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
    
    Если ЗначениеЗаполнено(ТекущаяСтрока.пкДатаНачалаАренды) И ЗначениеЗаполнено(ТекущаяСтрока.пкДатаОкончанияАренды) Тогда
        ТекущаяСтрока.КоличествоУпаковок = (КонецДня(ТекущаяСтрока.пкДатаОкончанияАренды) + 1 - НачалоДня(ТекущаяСтрока.пкДатаНачалаАренды)) / (3600 * 24);
        
        СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
        
        СтруктураДействий = Новый Структура;
	    СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	    СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
    	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
    	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
    	СтруктураДействий.Вставить("ПересчитатьСумму");
        СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
    	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
    	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
        СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыРеализации());
        
        ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
                
        ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(Форма);
    КонецЕсли;  
    
КонецПроцедуры    

Процедура РеализацияТоваровУслугВидТарифаПриИзменении(Форма)
    
 	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");  
    СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
    СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыРеализации());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
            
    ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(Форма);

КонецПроцедуры    

Процедура РеализацияТоваровУслугТоварыСуммаНДСПриИзменении(Форма)
    
 	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
    СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
    СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыРеализации());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
            
    ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(Форма);
    
КонецПроцедуры    

Процедура РеализацияТоваровУслугОбъектСтроительстваНачалоВыбора(Форма)
    
    Элементы = Форма.Элементы;
    Объект = Форма.Объект;
    
    ОбъектыСтроительства = пкОбщегоНазначенияСервер.ПолучитьОбъектыСтроительстваКлиента(Объект.Партнер);
    
    Отбор = Новый Структура("Ссылка", ОбъектыСтроительства);
    
    ПараметрыФормы = Новый Структура("Отбор", Отбор);
    
    ПараметрыОповещения = Новый Структура("Объект", Объект);
    
    ОткрытьФорму("Справочник.СМ_ОбъектыСтроительства.Форма.ФормаВыбора", ПараметрыФормы, Элементы.пкОбъектСтроительства, , , , 
        Новый ОписаниеОповещения("РеализацияТоваровУслугОбъектСтроительстваНачалоВыбораЗавершение", пкМодификацияКлиент, ПараметрыОповещения));
    
КонецПроцедуры 

Процедура РеализацияТоваровУслугОбъектСтроительстваНачалоВыбораЗавершение(ВыбранноеЗначение, ДопПараметры) Экспорт 
    
    Если ВыбранноеЗначение <> Неопределено Тогда
        ДопПараметры.Объект.пкОбъектСтроительства = ВыбранноеЗначение;
        
        СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ДопПараметры.Объект);
        
        СтруктураДействий = Новый Структура;
	    СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(ДопПараметры.Объект));
    	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
    	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
    	СтруктураДействий.Вставить("ПересчитатьСумму");
    	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
    	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
        
        Для Каждого Строка ИЗ ДопПараметры.Объект.Товары Цикл
            ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, Неопределено);
        КонецЦикла; 
    КонецЕсли;    
    
КонецПроцедуры    

Процедура РеализацияТоваровУслугТехникаПриИзменении(Форма)
    
 	Элементы = Форма.Элементы;
    
    ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
    
    ТекущаяСтрока.пкПримечаниеДляПечати = пкУправлениеТехникойСервер.СформироватьПримечаниеДляПечатиПоТехнике(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.пкТехника);
    
КонецПроцедуры 

Процедура ЗаполнитьПоСчету(Форма, Заполнить = Истина, Остатки = Истина)
    
    Объект = Форма.Объект;
        
    Если Заполнить И Объект.Товары.Количество() > 0 Тогда
        ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоСчетуВопросЗавершение", пкМодификацияКлиент, Новый Структура("Форма, Заполнить, Остатки", Форма, Заполнить, Остатки)), 
            "Перед заполнением табличная часть будет очищена, продолжить?", РежимДиалогаВопрос.ДаНет);
    Иначе
        СтруктураОтбора = Новый Структура();
        
        Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
            СтруктураОтбора.Вставить("Подразделение", Объект.Подразделение);    
        КонецЕсли;  
        
        Если ЗначениеЗаполнено(Объект.Партнер) Тогда
            СтруктураОтбора.Вставить("Партнер", Объект.Партнер);    
        КонецЕсли;  
        
        Если ЗначениеЗаполнено(Объект.Договор) Тогда
            СтруктураОтбора.Вставить("Договор", Объект.Договор);    
        КонецЕсли;  
        
        Если ЗначениеЗаполнено(Объект.пкОбъектСтроительства) Тогда
            СтруктураОтбора.Вставить("пкОбъектСтроительства", Объект.пкОбъектСтроительства);    
        КонецЕсли; 
        
        ПараметрыОткрытия = Новый Структура("Отбор", СтруктураОтбора);
        
        ОткрытьФорму("Документ.ЗаказКлиента.ФормаВыбора", ПараметрыОткрытия, , , , , Новый ОписаниеОповещения("ЗаполнитьПоСчетуЗавершение", 
            пкМодификацияКлиент, Новый Структура("Форма, Заполнить, Остатки", Форма, Заполнить, Остатки)));
    КонецЕсли;
        
КонецПроцедуры 

Процедура ЗаполнитьПоСчетуВопросЗавершение(Результат, ДопПараметры) Экспорт
    
    Если Результат = КодВозвратаДиалога.Да Тогда
        Объект = ДопПараметры.Форма.Объект; 
        
        СтруктураОтбора = Новый Структура();
        
        Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
            СтруктураОтбора.Вставить("Подразделение", Объект.Подразделение);    
        КонецЕсли;  
        
        Если ЗначениеЗаполнено(Объект.Партнер) Тогда
            СтруктураОтбора.Вставить("Партнер", Объект.Партнер);    
        КонецЕсли;  
        
        Если ЗначениеЗаполнено(Объект.Договор) Тогда
            СтруктураОтбора.Вставить("Договор", Объект.Договор);    
        КонецЕсли;  
        
        Если ЗначениеЗаполнено(Объект.пкОбъектСтроительства) Тогда
            СтруктураОтбора.Вставить("ОбъектСтроительства", Объект.пкОбъектСтроительства);    
        КонецЕсли; 
        
        ПараметрыОткрытия = Новый Структура("Отбор", СтруктураОтбора);
        
        ОткрытьФорму("Документ.ЗаказКлиента.ФормаВыбора", ПараметрыОткрытия, , , , , Новый ОписаниеОповещения("ЗаполнитьПоСчетуЗавершение", 
            пкМодификацияКлиент, Новый Структура("Форма, Заполнить, Остатки", ДопПараметры.Форма, ДопПараметры.Заполнить, ДопПараметры.Остатки)));
    КонецЕсли;    
        
КонецПроцедуры    
    
Процедура ЗаполнитьПоСчетуЗавершение(ВыбранноеЗначение, ДопПараметры) Экспорт
    
    Если ВыбранноеЗначение <> Неопределено Тогда
        Форма  = ДопПараметры.Форма;
        Объект = Форма.Объект; 
        
        Если ДопПараметры.Заполнить Тогда
            Объект.Товары.Очистить();    
        КонецЕсли;
        
        Если ДопПараметры.Остатки Тогда
            пкПодпискиНаСобытия.ЗаполнитьПоСчетуОстатки(Объект, ВыбранноеЗначение);
        Иначе
            пкПодпискиНаСобытия.ЗаполнитьПоСчету(Объект, ВыбранноеЗначение);
        КонецЕсли;    
		Объект.ЭтапыГрафикаОплаты.Очистить();

		КопироватьДанныеФормы(Объект, Форма.Объект);
		ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(Форма);	
		Форма.НадписьЭтапыОплаты = ЭтапыОплатыКлиентСервер.НадписьЭтапыОплаты(Форма);
		Форма.Модифицированность = Истина;
		КопироватьДанныеФормы(Объект, Форма.Объект);
    КонецЕсли;    
    
КонецПроцедуры    

Функция ЗависимыеРеквизитыРеализации()
	
	Возврат Новый Структура(
		"БезВозвратнойТары",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки");
	
КонецФункции

#КонецОбласти

#Область СписаниеБезналичныхДенежныхСредств

Процедура СписаниеБезналичныхДенежныхСредствКурсДокументаПриИзменении(Форма)
    
 	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
    
    Если ТекущиеДанные <> Неопределено Тогда
        
        пкМодификацияСервер.СписаниеБезналичныхДенежныхСредствКурсДокументаПриИзмененииНаСервере(Объект, ТекущиеДанные.СуммаВзаиморасчетов);
        
        КопироватьДанныеФормы(Объект, Форма.Объект); 
    КонецЕсли;
    
КонецПроцедуры 

Процедура СписаниеБезналичныхДенежныхСредствДатаКурсаПриИзменении(Форма)
    
 	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
    
    Если ТекущиеДанные <> Неопределено Тогда
        пкМодификацияСервер.СписаниеБезналичныхДенежныхСредствДатаКурсаПриИзмененииНаСервере(Объект, ТекущиеДанные.ВалютаВзаиморасчетов, ТекущиеДанные.СуммаВзаиморасчетов);
        
        КопироватьДанныеФормы(Объект, Форма.Объект); 
    КонецЕсли;
        
КонецПроцедуры   

#КонецОбласти

//+++rarus-spb_pavelk 15.11.2016
Процедура уатОтчетПоставщикаПЦЗаполнитьТСпоКартам(Форма)
	
	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
		
	КолСтрок = Объект.Заправки.Количество();
	Инд = 0;
	ПредИндикатор = Неопределено;
	
	Для Каждого ТекСтрока Из Объект.Заправки Цикл
		ОбработкаПрерыванияПользователя();
		
		Инд = Инд + 1;
		ТекИндикатор = Цел(Инд / КолСтрок * 100 / 5);
		
		ТекСтрока.ТС = пкМодификацияСервер.ВладелецПластиковойКарты(ТекСтрока.ПластиковаяКарта, ТекСтрока.Дата);
				
		Если ТекИндикатор <> ПредИндикатор Тогда //отображаем обновление состояния каждые 5% для ускорения вывода
			Состояние("Идентификация ТС по пластиковым картам ...", ТекИндикатор*5, "");
			ПредИндикатор = ТекИндикатор;
		КонецЕсли;
		
		ТекСтрока.НомерТС = уатОбщегоНазначения.уатПредставлениеТС(ТекСтрока.ТС, Объект.Организация);
		
	КонецЦикла;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры
//---rarus-spb_pavelk

//+++DubI Рарус-СПб 01.11.2016
//по задаче приостановлено выполнение
//#Область ПлатежныйКалендарь

//Процедура ПлатежныйКалендарьОткрытьФормуНастройкиДополнительныхФильтров(ВидФильтра, Форма, ЗаголовокОткрываемойФормы, РеквизитСпискаВыбранныхЗначений)
//	
//	Если Не ЗначениеЗаполнено(ВидФильтра) Тогда
//	    Возврат;
//	КонецЕсли; 
//	
// 	Элементы = Форма.Элементы;
//    Объект   = Форма.Объект;
//    
//	ПараметрыФормыФильтров = Новый Структура;
//	ПараметрыФормыФильтров.Вставить("Заголовок", ЗаголовокОткрываемойФормы);
//	ПараметрыФормыФильтров.Вставить("СписокВыбранныхЗначений", Форма[РеквизитСпискаВыбранныхЗначений]);
//	ПараметрыФормыФильтров.Вставить("ВидФильтра", ВидФильтра);
//	ПараметрыФормыФильтров.Вставить("РеквизитСпискаВыбранныхЗначений", РеквизитСпискаВыбранныхЗначений);
//	
//	ОбработкаОповещения = Новый ОписаниеОповещения("пкУстановкаНовыхФильтров", Форма);
//	
//	ОткрытьФорму("Обработка.ПлатежныйКалендарь.Форма.пкДополнительныеФильтры", ПараметрыФормыФильтров,
//						,,,, ОбработкаОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
//	
//КонецПроцедуры

//Процедура ПлатежныйКалендарьУстановкаНовыхФильтров(Форма, Объект, Результат, ДополнительныеПараметры) Экспорт

//	Форма[Результат.РеквизитСпискаВыбранныхЗначений] = Результат.СписокВыбранныхЗначений;
//	
//КонецПроцедуры

//#КонецОбласти
