////////////////////////////////////////////////////////////////////////////////
// Обработка данных топливо (вызов сервера)
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

#Область УсреднениеДанныхПоНесколькимДатчикам
	
// Усредняем данные для графика по всем графикам
//
Процедура УсреднитьДанныеКалибровочногоГрафика(ТекКалибровочныйГрафик, ТабДатчиков)
	AbsЭлементов = ПолучитьAbsЭлементовСтруктуры(ТабДатчиков);	
	Для Каждого Элемент Из AbsЭлементов Цикл
		ТекКалибровочныйГрафик[Элемент.Ключ] = AbsЭлементов[Элемент.Ключ];		
	КонецЦикла;
КонецПроцедуры

// Скопирует реквизиты калибровочного графика в структуру
//
Функция ПолучитьЧисловуюСтруктуруКалибровочногоГрафика()
	ТекКалибровочныйГрафик = Новый Структура();
	Для Каждого ТекРеквизит Из Метаданные.Справочники.ItobКалибровочныеГрафики.Реквизиты Цикл
		Если Строка(ТекРеквизит.Тип) = "Число" Тогда
			ТекКалибровочныйГрафик.Вставить(ТекРеквизит.Имя, 0);		
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТекКалибровочныйГрафик;
КонецФункции // ПолучитьСтруктуруКалибровочногоГрафика()

// Суммирует данные в массиве структур
//
Функция ПолучитьСуммуЭлементовСтруктуры(ТабДатчиков)
	СтруктураГрафик = ПолучитьЧисловуюСтруктуруКалибровочногоГрафика();
	Для Каждого Датчик Из ТабДатчиков Цикл
		КалибровочныйГрафик =Датчик.КалибровочныйГрафик;
		Для Каждого Элемент Из СтруктураГрафик Цикл
			СтруктураГрафик[Элемент.Ключ] = СтруктураГрафик[Элемент.Ключ]+КалибровочныйГрафик[Элемент.Ключ];		
		КонецЦикла;
	КонецЦикла;
	
	Возврат СтруктураГрафик;
КонецФункции // ()
 
// Суммирует данные в массиве структур
//
Функция ПолучитьAbsЭлементовСтруктуры(ТабДатчиков)
	СуммаЭлементов = ПолучитьСуммуЭлементовСтруктуры(ТабДатчиков);
	Количество = ТабДатчиков.Количество();
	Для Каждого Элемент Из СуммаЭлементов Цикл
		СуммаЭлементов[Элемент.Ключ] = СуммаЭлементов[Элемент.Ключ]/Количество;		
	КонецЦикла;
		
	Возврат СуммаЭлементов;
КонецФункции // ()
 
#КонецОбласти

// Функция возвращает отсортированный массив.
//
// Параметры
//  arTemp  - Массив - Набор данных для сортировки.
//
// Возвращаемое значение:
//  Массив  - Отсортированный массив.
//
Функция СортироватьМассив(arTemp)
    
	ВремТЗ = Новый ТаблицаЗначений;
	ВремТЗ.Колонки.Добавить("Значение");
	Для Счетчик = 0 По arTemp.Количество()-1 Цикл
		ВремТЗ.Добавить();		
	КонецЦикла;
	ВремТЗ.ЗагрузитьКолонку(arTemp, "Значение");
	ВремТЗ.Сортировать("Значение");
	
	Возврат	ВремТЗ.ВыгрузитьКолонку("Значение");

КонецФункции // СортироватьМассив()

// Функция вычисляет стандартное отклонение разницы данных двух массивов.
//
// Параметры
//  arToSpline1,arToSpline2  - Массив - Массивы данных.
//
// Возвращаемое значение:
//  Число   - Стандартное отклонение.
//
Функция ПолучитьСтандартноеОтклонение(arToSpline1, arToSpline2)
    		
	Результат = 0;
	Если arToSpline1.Количество() <> arToSpline2.Количество()
		ИЛИ arToSpline1.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	rDelta = 0;
	
	Для Счетчик = 0 По arToSpline1.Количество()-1 Цикл
		rDelta = rDelta  + ItobОбщегоНазначенияКлиентСервер.Abs(arToSpline1[Счетчик] - arToSpline2[Счетчик]);
		
	КонецЦикла;
	
	rDelta = rDelta / arToSpline1.Количество();
	
	Результат = Окр(rDelta,3);
	
	Возврат ?(Результат=0,1,Результат);

КонецФункции // ПолучитьСтандартноеОтклонение()

// Функция преобразовывает исходное значение по калибровочному графику.
//
// Параметры
//  Значение 		- Число 			- Исходное значение.
//  ТабКалибровки 	- ТаблицаЗначений 	- Таблица калибровки с колонками Вход, Выход.
//
// Возвращаемое значение:
//   Число   		- преобразованное по калибровочному графику значение.
//
Функция ПреобразоватьПоТаблицеКалибровки(Значение, ТабКалибровки,УсреднятьДанные = Ложь,КоличествоДатчиков = 1)
	
	Для Счетчик = 0 По ТабКалибровки.Количество()-2 Цикл
		Если ТабКалибровки[Счетчик].Вход <= Значение И Значение <= ТабКалибровки[Счетчик+1].Вход Тогда
			
			СтрКалибровки1 = ТабКалибровки[Счетчик];
			СтрКалибровки2 = ТабКалибровки[Счетчик+1];
			
			Преобразование = (СтрКалибровки1.Выход-СтрКалибровки2.Выход)/(СтрКалибровки1.Вход-СтрКалибровки2.Вход)*Значение
							+ (СтрКалибровки1.Вход*СтрКалибровки2.Выход-СтрКалибровки2.Вход*СтрКалибровки1.Выход)/(СтрКалибровки1.Вход-СтрКалибровки2.Вход);
							
			Возврат Окр(Преобразование,2);				
		
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат 0;

КонецФункции // ПреобразоватьПоТаблицеКалибровки()

// Функция вычисляет заправки и сливы по набору данных датчика топлива.
//
// Параметры
//  fiVolts     - Массив - Набор сырых показаний датчика топлива.
//  arSplineRes - Массив - Набор сглаженных показаний датчика топлива.
//  fiWindow    - Число  - Размер окна сглаживания.
//  fiStDev     - Число  - Стандартное отклонение.
//  frCoefShift - Число  - Множитель - превышение стандартного отклонения.
//  ТаблицаДанных - ТаблицаЗначений - Таблица с данными датчика топлива.
//  ТабКалибровки - ТаблицаЗначений - Калибровочный график - таблица с колонками Вход, Выход.
//  ПорогЗаправки - Число - Минимальное значение заправки.
//  ПорогСлива    - Число - Минимальное значение слива.
//
// Возвращаемое значение:
//  Булево   - результат операции, Истина при успешном выполнении.
//
Функция ПолучитьЗаправкиИСливы(fiParameters, ТаблицаДанных, ТабКалибровки,
	ПорогЗаправки, ПорогСлива, ОкноГраницыЗаправкиСлива, РасчетЗаправкиСливаТолькоСглаженныеДанные)

	Перем iRes;	
		
	fiVolts 	= fiParameters.fiVolts;
	arSplineRes = fiParameters.arSplineRes;
	fiWindow 	= fiParameters.fiWindow;
	fiStDev 	= fiParameters.fiStDev;
	frCoefShift = fiParameters.frCoefShift;
	
	ТаблицаЗаправкиСливы = Новый ТаблицаЗначений;
	ТаблицаЗаправкиСливы.Колонки.Добавить("Период");
	ТаблицаЗаправкиСливы.Колонки.Добавить("ПериодКон");
	ТаблицаЗаправкиСливы.Колонки.Добавить("ТопливоНачало");
	ТаблицаЗаправкиСливы.Колонки.Добавить("ТопливоИзменение");
	ТаблицаЗаправкиСливы.Колонки.Добавить("ТопливоКонец");
	ТаблицаЗаправкиСливы.Колонки.Добавить("Широта");
	ТаблицаЗаправкиСливы.Колонки.Добавить("Долгота");
	ТаблицаЗаправкиСливы.Колонки.Добавить("МассивЗначенийТопливоНачало");
	ТаблицаЗаправкиСливы.Колонки.Добавить("МассивЗначенийТопливоКонец");
		
	ТочекНазадКрайнееПревышениеСтандартногоОтклонения = 1000;
	КоличествоЭлементовДанных = fiVolts.Количество();
	
	ЧислоТочекИдентификации = ОкноГраницыЗаправкиСлива-1;
	
	Для Счетчик = fiWindow По arSplineRes.Количество()-fiWindow-2 Цикл
		iDelta = arSplineRes[Счетчик + 1] - arSplineRes[Счетчик];
		
		Если ItobОбщегоНазначенияКлиентСервер.Abs(iDelta) > fiStDev * frCoefShift 
			И (Счетчик - ОкноГраницыЗаправкиСлива > ЧислоТочекИдентификации)
			И (Счетчик+ОкноГраницыЗаправкиСлива+ЧислоТочекИдентификации < КоличествоЭлементовДанных) Тогда
			
			Попытка
				iL  = ПолучитьМедиану(ВыделитьЧастьМассива(fiVolts    , Счетчик - ОкноГраницыЗаправкиСлива, ЧислоТочекИдентификации, iRes));
				iL1 = ПолучитьМедиану(ВыделитьЧастьМассива(arSplineRes, Счетчик - ОкноГраницыЗаправкиСлива, ЧислоТочекИдентификации, iRes));
				iR  = ПолучитьМедиану(ВыделитьЧастьМассива(fiVolts    , Счетчик + ОкноГраницыЗаправкиСлива, ЧислоТочекИдентификации, iRes));
				iR1 = ПолучитьМедиану(ВыделитьЧастьМассива(arSplineRes, Счетчик + ОкноГраницыЗаправкиСлива, ЧислоТочекИдентификации, iRes));
			
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				Продолжить;
			
			КонецПопытки;			
			
			iDelta  = iR  - iL;
			iDelta1 = iR1 - iL1;
			
			Если (ItobОбщегоНазначенияКлиентСервер.Abs(iDelta) < ItobОбщегоНазначенияКлиентСервер.Abs(iDelta1))
				ИЛИ РасчетЗаправкиСливаТолькоСглаженныеДанные Тогда
				
				iDelta = iDelta1;
				ТопливоНачало = ПреобразоватьПоТаблицеКалибровки(iL1, ТабКалибровки);
				ТопливоКонец  = ПреобразоватьПоТаблицеКалибровки(iR1, ТабКалибровки);				
				
			Иначе
				
				ТопливоНачало = ПреобразоватьПоТаблицеКалибровки(iL, ТабКалибровки);
				ТопливоКонец  = ПреобразоватьПоТаблицеКалибровки(iR, ТабКалибровки);				
				
			КонецЕсли;
			
			Если ТочекНазадКрайнееПревышениеСтандартногоОтклонения <=10 Тогда 
				
				НовСтрокаТЗС = ТаблицаЗаправкиСливы[ТаблицаЗаправкиСливы.Количество()-1];
				НовСтрокаТЗС.ТопливоНачало = Мин(НовСтрокаТЗС.ТопливоНачало, ТопливоНачало);
				НовСтрокаТЗС.ТопливоКонец  = МАКС(НовСтрокаТЗС.ТопливоКонец, ТопливоКонец);
				НовСтрокаТЗС.ПериодКон  = ТаблицаДанных[Счетчик].Период;
				
			Иначе
				
				НовСтрокаТЗС = ТаблицаЗаправкиСливы.Добавить();
				
				НовСтрокаТЗС.МассивЗначенийТопливоНачало = Новый Массив;			
				НовСтрокаТЗС.МассивЗначенийТопливоКонец  = Новый Массив;
				
				НовСтрокаТЗС.ТопливоНачало = ТопливоНачало;
				НовСтрокаТЗС.ТопливоКонец = ТопливоКонец;
				
				НовСтрокаТЗС.Период  = ТаблицаДанных[Счетчик].Период;
				НовСтрокаТЗС.Широта  = ТаблицаДанных[Счетчик].Широта;
				НовСтрокаТЗС.Долгота = ТаблицаДанных[Счетчик].Долгота;
				НовСтрокаТЗС.ПериодКон  = ТаблицаДанных[Счетчик].Период;
				
			КонецЕсли;						
							
			НовСтрокаТЗС.ТопливоИзменение = НовСтрокаТЗС.ТопливоКонец-НовСтрокаТЗС.ТопливоНачало;
			
			НовСтрокаТЗС.МассивЗначенийТопливоНачало.Добавить(ТопливоНачало);
			НовСтрокаТЗС.МассивЗначенийТопливоКонец.Добавить(ТопливоКонец);
			
			ТочекНазадКрайнееПревышениеСтандартногоОтклонения = 0;
			
		Иначе
			
			ТочекНазадКрайнееПревышениеСтандартногоОтклонения = ТочекНазадКрайнееПревышениеСтандартногоОтклонения+1;
		
		КонецЕсли;
	
	КонецЦикла;
			
	// Объединение сходных строк - 10 минут
	
	Счетчик = 1;
	Пока Счетчик <= ТаблицаЗаправкиСливы.Количество()-1 Цикл
		
		Если ТаблицаЗаправкиСливы[Счетчик].Период-ТаблицаЗаправкиСливы[Счетчик-1].Период < 30*60 Тогда
			ТаблицаЗаправкиСливы[Счетчик-1].ТопливоКонец = ТаблицаЗаправкиСливы[Счетчик].ТопливоКонец;
			ТаблицаЗаправкиСливы[Счетчик-1].ТопливоИзменение = ТаблицаЗаправкиСливы[Счетчик-1].ТопливоКонец-ТаблицаЗаправкиСливы[Счетчик-1].ТопливоНачало;			
			ТаблицаЗаправкиСливы[Счетчик-1].Период = ТаблицаЗаправкиСливы[Счетчик-1].Период+Цел((ТаблицаЗаправкиСливы[Счетчик].Период-ТаблицаЗаправкиСливы[Счетчик-1].Период)/2);
			ТаблицаЗаправкиСливы[Счетчик-1].Широта = ((ТаблицаЗаправкиСливы[Счетчик].Широта+ТаблицаЗаправкиСливы[Счетчик-1].Широта)/2);
			ТаблицаЗаправкиСливы[Счетчик-1].Долгота = ((ТаблицаЗаправкиСливы[Счетчик].Долгота+ТаблицаЗаправкиСливы[Счетчик-1].Долгота)/2);
			
			ТаблицаЗаправкиСливы.Удалить(ТаблицаЗаправкиСливы[Счетчик]);
			
		Иначе			
			Счетчик = Счетчик+1;			
		
		КонецЕсли;		
	
	КонецЦикла;
			
	МассивУдаления = Новый Массив;
	Для Каждого СтрТаб Из ТаблицаЗаправкиСливы Цикл
		Если СтрТаб.ТопливоИзменение < 0 И СтрТаб.ТопливоИзменение > -1*ПорогСлива Тогда // -5
			МассивУдаления.Добавить(СтрТаб);
			
		КонецЕсли;
		
		Если СтрТаб.ТопливоИзменение >= 0 И СтрТаб.ТопливоИзменение < ПорогЗаправки Тогда   // 5
			МассивУдаления.Добавить(СтрТаб);
			
		КонецЕсли;
							
	КонецЦикла;
	
	Для Каждого СтрокаУдаления Из МассивУдаления Цикл
		ТаблицаЗаправкиСливы.Удалить(СтрокаУдаления);	
	КонецЦикла;
	
	Возврат ТаблицаЗаправкиСливы;

КонецФункции

// Функция обрабатывает данные топлива.
//
// Параметры
//  ТЗ     				- Массив - Набор сырых показаний датчика топлива.
//  КалибровочныйГрафик - Ссылка на справочник ItobКалибровочныйГрафики.
//  ТЗЗаправок 			- ТаблицаЗначений - заполняется данными по заправкам.
//
// Возвращаемое значение:
//  Булево   			- Результат операции, Истина при успешном выполнении.
//
Функция ОбработатьДанныеТопливо(ТЗ, КалибровочныйГрафик, ТЗЗаправок)
			
	ТЗЗаправок = Неопределено;
	
	fiVolts = ТЗ.ВыгрузитьКолонку("Значение");
	
	fiWindow = Цел(?(КалибровочныйГрафик.ДлинаБуфераСглаживания=0,40,КалибровочныйГрафик.ДлинаБуфераСглаживания)/2)+1;// 20;
	frCoefShift = 2;
	
	ТабКалибровки = КалибровочныйГрафик.Показатели.Выгрузить();
	ТабКалибровки.Сортировать("Вход");
	
	Если ТабКалибровки.Количество() < 2 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнен калибровочный график'"));
		Возврат Ложь;
	
	КонецЕсли;
		
	arSplineRes = Новый Массив;
	Для Каждого ЭлементМассива Из fiVolts Цикл
		arSplineRes.Добавить(ЭлементМассива);	
	КонецЦикла;
	
	ТаблицаИнтервала = Новый ТаблицаЗначений;
	ТаблицаИнтервала.Колонки.Добавить("Значение");
			
	iLen = 2 * fiWindow + 1;
	iIndex = fiWindow;
	
	Если fiVolts.Количество() <= 2 * fiWindow Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Недостаточно данных для анализа! Выберите больший период!'"));
		Возврат Ложь;
	
	КонецЕсли;	
	
	Для Счетчик = 0 По iLen-1 Цикл
		НовСтрокаТаб = ТаблицаИнтервала.Добавить();
		НовСтрокаТаб.Значение = fiVolts[iIndex - fiWindow + Счетчик];	
	КонецЦикла;
	
	Для Счетчик = fiWindow По fiVolts.Количество()-fiWindow-1 Цикл
		
		Если Счетчик > fiWindow Тогда
			ТаблицаИнтервала.Удалить(0);	
			НовСтрТИ = ТаблицаИнтервала.Добавить();			
			НовСтрТИ.Значение = fiVolts[Счетчик - fiWindow + iLen-1];
		
		КонецЕсли;
		
		ВремТЗ = ТаблицаИнтервала.Скопировать();
		
		ВремТЗ.Сортировать("Значение");
		
		arSplineRes[Счетчик] = ВремТЗ[Цел(ВремТЗ.Количество()/2)].Значение;
						
	КонецЦикла;
	
	Если КалибровочныйГрафик.СтандартноеОтклонение=0 Тогда
		fiStDev = ПолучитьСтандартноеОтклонение(fiVolts, arSplineRes);
		
	Иначе
		fiStDev = КалибровочныйГрафик.СтандартноеОтклонение;
	
	КонецЕсли;
	
	Если fiStDev = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка обработки данных: стандартное отклонение равно нулю'"));		
		Возврат Ложь;
	
	КонецЕсли;
	
	Если КалибровочныйГрафик.ВыводСлужебнойИнформации Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Стандартное отклонение:'")+" "+Окр(fiStDev,2));
	
	КонецЕсли;
				
	ПорогЗаправки = ?(КалибровочныйГрафик.ПорогЗаправки=0,5,КалибровочныйГрафик.ПорогЗаправки);
	ПорогСлива = ?(КалибровочныйГрафик.ПорогСлива=0,5,КалибровочныйГрафик.ПорогСлива);
	ОкноГраницыЗаправкиСлива = ?(КалибровочныйГрафик.ОкноГраницыЗаправкиСлива=0,3,
	КалибровочныйГрафик.ОкноГраницыЗаправкиСлива);
	РасчетЗаправкиСливаТолькоСглаженныеДанные = КалибровочныйГрафик.РасчетЗаправкиСливаТолькоСглаженныеДанные;
	
	fiParameters = Новый Структура;
	fiParameters.Вставить("fiVolts", 	 fiVolts);
	fiParameters.Вставить("arSplineRes", arSplineRes);
	fiParameters.Вставить("fiWindow", 	 fiWindow);
	fiParameters.Вставить("fiStDev", 	 fiStDev);
	fiParameters.Вставить("frCoefShift", frCoefShift);
	ТЗЗаправок = ПолучитьЗаправкиИСливы(fiParameters, ТЗ, ТабКалибровки,
		ПорогЗаправки, ПорогСлива, ОкноГраницыЗаправкиСлива, РасчетЗаправкиСливаТолькоСглаженныеДанные);
	
	ТЗ.Колонки.Добавить("ЗначениеСглаженное");
	Для Счетчик = 0 По ТЗ.Количество()-1 Цикл
		ТЗ[Счетчик].ЗначениеСглаженное = arSplineRes[Счетчик];	
	КонецЦикла;
	
	Возврат Истина;

КонецФункции

Функция УбратьСтрокиТаблицыЗначенийСНевалиднымиПоказаниями(ТЗ, ТабДатчиков)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СтрУсловияЗапроса = "";
	Для Каждого СтрТабДатчиков Из ТабДатчиков Цикл
		КодДатчика = Формат(СтрТабДатчиков.Датчик.Код,"ЧН=0; ЧГ=0");
		
		Если СтрТабДатчиков.ТабКалибровки.Количество() < 2 Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнен калибровочный график'")+" """+СтрТабДатчиков.КалибровочныйГрафик+"""";
			Возврат Неопределено;
			
		КонецЕсли;
		
		НижняяГраница  = СтрТабДатчиков.ТабКалибровки[0].Вход;
		ВерхняяГраница = СтрТабДатчиков.ТабКалибровки[СтрТабДатчиков.ТабКалибровки.Количество()-1].Вход;
		
		СтрУсловияЗапроса = ?(СтрУсловияЗапроса="","",СтрУсловияЗапроса+Символы.ПС+"	И ")
			+"ТабДанных."+СтрТабДатчиков.ИмяКолонкиЗначение+" МЕЖДУ &НижняяГраница"+КодДатчика+" И &ВерхняяГраница"+КодДатчика;
			
		Запрос.УстановитьПараметр("НижняяГраница"+КодДатчика, НижняяГраница);
		Запрос.УстановитьПараметр("ВерхняяГраница"+КодДатчика, ВерхняяГраница);
	
	КонецЦикла;
		
	Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ ТЗ ИЗ &ТЗ КАК ТЗ";
	Запрос.УстановитьПараметр("ТЗ", ТЗ);
    Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ
				   |	*
	               |ИЗ
	               |	ТЗ КАК ТабДанных	               
	               |ГДЕ
				   |	ТабДанных.Широта <> 0
				   |	И ТабДанных.Долгота <> 0
	               |	И &УсловияЗапроса
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период";	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловияЗапроса", СтрУсловияЗапроса);	
	Возврат Запрос.Выполнить().Выгрузить();	

КонецФункции // УбратьСтрокиТаблицыЗначенийСНевалиднымиПоказаниями()

Процедура ТабДатчиковДобавитьСтрокуДатчикаТоплива(ТабДатчиков, Датчик, КалибровочныйГрафик)

	НовСтрокаДатчиков = ТабДатчиков.Добавить();
	НовСтрокаДатчиков.Датчик = Датчик; 
	НовСтрокаДатчиков.КалибровочныйГрафик = КалибровочныйГрафик; 
	НовСтрокаДатчиков.ИмяКолонкиЗначение = "Значение"+Формат(Датчик.Код,"ЧН=0; ЧГ=0"); 
	НовСтрокаДатчиков.ТабКалибровки = КалибровочныйГрафик.Показатели.Выгрузить();
	НовСтрокаДатчиков.ТабКалибровки.Сортировать("Вход");	

КонецПроцедуры

Функция РассчитатьСтандартноеОтклонениеПоНесколькимДатчикам(ТабДатчиков)

	Результат = 0;
	
	Для каждого СтрДатчиков Из ТабДатчиков Цикл
		Если СтрДатчиков.КалибровочныйГрафик.СтандартноеОтклонение=0 Тогда
			Продолжить;		
		КонецЕсли;
		
		ТекМаксВход = 0;
		ТекМаксВыход = 0;
		Для каждого СтрПоказатели Из СтрДатчиков.КалибровочныйГрафик.Показатели Цикл
			ТекМаксВход  = МАКС(ТекМаксВход, СтрПоказатели.Вход);
			ТекМаксВыход = МАКС(ТекМаксВыход, СтрПоказатели.Выход);		
		КонецЦикла;
		
		Если ТекМаксВход=0 Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = Результат + СтрДатчиков.КалибровочныйГрафик.СтандартноеОтклонение;
	
	КонецЦикла;
	
	Возврат Окр(Результат,4);

КонецФункции // РассчитатьСтандартноеОтклонениеПоНесколькимДатчикам()

// Функция выделяет подмассив из массива.
//
// Параметры
//  arToSpline  - Массив - Набор данных из которых требуется выделить подмассив.
//  iIndex      - Число  - индекс начала выделения массива.
//  iWindow     - Число  - окно - размер подмассива.
//  iRes        - Число -  результат операции, 0 при успехе.
//
// Возвращаемое значение:
//   Массив   - подмассив массива.
//
Функция ВыделитьЧастьМассива(arToSpline, iIndex, iWindow, iRes) Экспорт
		
	iRes = -10001;
	
	Если (iIndex + iWindow >= arToSpline.Количество()) ИЛИ (iIndex - iWindow < 0) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Неверные граничные условия при выделении подмассива'"));
		Возврат Неопределено;
	КонецЕсли;	
		
	iLen = 2 * iWindow + 1;	
	Результат = Новый Массив(iLen);
	
	Для iC = 0 По iLen-1 Цикл
		Результат[iC] = arToSpline[iIndex - iWindow + iC];	
	КонецЦикла;	
	
	iRes = 0;
	
	Возврат Результат;

КонецФункции // ВыделитьЧастьМассива()

// Функция возвращает медиану переданного массива.
//
// Параметры
//  arData  - Массив - Набор данных для получения медианы.
//
// Возвращаемое значение:
//  Число   - Значение медианы массива.
//
Функция ПолучитьМедиану(arData) Экспорт
    		
	arData = СортироватьМассив(arData);
	Возврат arData[Цел(arData.Количество()/2)];	

КонецФункции // ПолучитьМедиану()

// Функция производит обработку данных топливного датчика.
//
// Параметры
//  НачПериода  	- Дата 					- начало интервала.
//  КонПериода  	- Дата 					- конец интервала.
//  Объект      	- Ссылка на справочник  - объект мониторинга.
//  Метод       	- Строка 				- "Моточасы" или "Пробег".
//  ТаблицаДанные   - ТаблицаЗначений 		- заполняется данными датчика.
//  ТаблицаЗаправки - ТаблицаЗначений 		- заполняется данными по заправкам и сливам.
//  ТекстОшибки     - Строка 				- В случае ошибки переменная содержит текст ошибки.
//
// Возвращаемое значение:
//  Булево   		- Результат операции, Истина при успешном выполнении.
//
Функция ПолучитьДанныеТопливо(пПараметры, ТаблицаДанные, ТаблицаЗаправки, ТекстОшибки, Назначение=Неопределено, Датчик = Неопределено) Экспорт
	
	НачПериода  = пПараметры.НачПериода;
	КонПериода  = пПараметры.КонПериода;
	Объект 		= пПараметры.Объект;
	Метод 		= пПараметры.Метод;
	
	РасчетПоОдномуДатчику = ?(Датчик = Неопределено,Ложь,Истина);
	
	ТекстОшибки = "";
	
	СрезНаНачало = РегистрыСведений.ItobПривязкиТерминалов.ПолучитьПоследнее(НачалоДня(НачПериода)-1, Новый Структура("Объект", Объект));
	Если НЕ ЗначениеЗаполнено(СрезНаНачало.Терминал) Тогда
		ТекстОшибки = НСтр("ru = 'К объекту не привязан терминал!'");
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Назначение = Неопределено Тогда
		ТекущееНазначение = Справочники.ItobНазначенияДатчиков.Топливо;
		
	Иначе
		ТекущееНазначение = Назначение;
		
	КонецЕсли;
	
	Терминал = СрезНаНачало.Терминал;
	УсреднятьДанныеПоНесколькимДатчикам = Терминал.УсреднятьЗначениеПоТопливу;
	
	Если Датчик = Неопределено Тогда 
		Если Назначение = "ПоВсем" Тогда
			СтрокаДатчики = Неопределено;
			Для Каждого ТекСтрокаДатчики Из Терминал.Датчики Цикл
				Если ТекСтрокаДатчики.Назначение.ДатчикТоплива Тогда
					СтрокаДатчики = ТекСтрокаДатчики;
					Прервать;
				КонецЕсли; 
			КонецЦикла;
		Иначе
			СтрокаДатчики = Терминал.Датчики.Найти(ТекущееНазначение,"Назначение");
		КонецЕсли;
	Иначе
		СтрокаДатчики = Терминал.Датчики.Найти(Датчик,"Датчик");
	КонецЕсли;
	Если СтрокаДатчики = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Для терминала объекта не указан датчик с назначением'")+" """+Строка(ТекущееНазначение)+"""!";
		Возврат Ложь;	
		
	КонецЕсли;
	
	Датчик = СтрокаДатчики.Датчик;
	
	КалибровочныйГрафик = СтрокаДатчики.КалибровочныйГрафик;
	Если НЕ ЗначениеЗаполнено(КалибровочныйГрафик) Тогда
		ТекстОшибки = НСтр("ru = 'Для терминала объекта не указан калибровочный график!'");
		Возврат Ложь;	
		
	КонецЕсли;
	
	ТабДатчиков = Новый ТаблицаЗначений;
	ТабДатчиков.Колонки.Добавить("Датчик");
	ТабДатчиков.Колонки.Добавить("КалибровочныйГрафик");
	ТабДатчиков.Колонки.Добавить("ИмяКолонкиЗначение");
	ТабДатчиков.Колонки.Добавить("ТабКалибровки");
	
	Если РасчетПоОдномуДатчику Тогда 
		ТабДатчиковДобавитьСтрокуДатчикаТоплива(ТабДатчиков, Датчик, КалибровочныйГрафик);
	Иначе 		
		Для Каждого ТекСтрокаДатчики Из Терминал.Датчики Цикл
			Если  Назначение <> "ПоВсем" И ТекСтрокаДатчики.Назначение = ТекущееНазначение  Тогда 	
				ТабДатчиковДобавитьСтрокуДатчикаТоплива(ТабДатчиков, ТекСтрокаДатчики.Датчик, ТекСтрокаДатчики.КалибровочныйГрафик);
			ИначеЕсли Назначение = "ПоВсем" И  ТекСтрокаДатчики.Назначение.ДатчикТоплива Тогда 
				ТабДатчиковДобавитьСтрокуДатчикаТоплива(ТабДатчиков, ТекСтрокаДатчики.Датчик, ТекСтрокаДатчики.КалибровочныйГрафик);
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
	
	ДатчикЗажигания = Неопределено;
	ИмяКолонкиЗначениеЗажигания = "";
	ДанныеТолькоПриВключенномЗажигании = КалибровочныйГрафик.ДанныеТолькоПриВключенномЗажигании;
	МассивДатчиков = ТабДатчиков.ВыгрузитьКолонку("Датчик");
	
	Если Метод = "Моточасы" ИЛИ ДанныеТолькоПриВключенномЗажигании Тогда
		СтрокаДатчики = Терминал.Датчики.Найти(Справочники.ItobНазначенияДатчиков.Зажигание,"Назначение");
		Если СтрокаДатчики = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для терминала объекта не указан датчик зажигания!'"));
			Возврат Ложь;	
			
		КонецЕсли;
		ДатчикЗажигания = СтрокаДатчики.Датчик;
		МассивДатчиков.Добавить(ДатчикЗажигания);
		ИмяКолонкиЗначениеЗажигания = "Значение"+ДатчикЗажигания.Код;
	
	КонецЕсли;	
	
	РасширениеГраницыЗапроса = ?(КалибровочныйГрафик.ДлинаБуфераСглаживания=0,40,КалибровочныйГрафик.ДлинаБуфераСглаживания)*4;
	Если КалибровочныйГрафик.ДанныеТолькоПриВключенномЗажигании Тогда
		// Непонятно сколько точек брать, по хорошему надо ставить фильтр
		РасширениеГраницыЗапроса = МАКС(РасширениеГраницыЗапроса,1500);	
	КонецЕсли;
	
	ТЗ = ItobОперативныйМониторинг.ПолучитьДанныеДатчикаОбъекта(Объект, НачПериода, КонПериода, МассивДатчиков, РасширениеГраницыЗапроса);
	
	Если ТЗ.Количество() <= 10 Тогда
		ТекстОшибки = НСтр("ru = 'За выбранный период данных по топливу не обнаружено!'");
		Возврат Ложь;	
	КонецЕсли;
	
	ТЗ.Колонки.Добавить("Пробег", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,4)));
	
	Если Метод = "Моточасы" Тогда
	 										
		// Считаем моточасы
		Моточасы = 0;
		
		Для Счетчик = 0 По ТЗ.Количество()-1 Цикл
			Если Счетчик > 0 И ТЗ[Счетчик-1][ИмяКолонкиЗначениеЗажигания] = 1 И ТЗ[Счетчик-1].Период > НачПериода Тогда
				Моточасы = Моточасы + (ТЗ[Счетчик].Период - ТЗ[Счетчик-1].Период); 
			КонецЕсли;
			
			ТЗ[Счетчик].Пробег = Моточасы/3600;
		
		КонецЦикла;
		
	Иначе
		// Подсчет пробега
		Если ItobВызовСервераПовтИсп.ИспользованиеCsmHandlerВключено() Тогда
			МассивШирота  = ТЗ.ВыгрузитьКолонку("Широта");
			МассивДолгота = ТЗ.ВыгрузитьКолонку("Долгота");
			SafeArrayШирота  = Новый COMSafeArray(МассивШирота, "VT_VARIANT");
			SafeArrayДолгота = Новый COMSafeArray(МассивДолгота, "VT_VARIANT");
			
			ОбъектCsmHandler   = ItobВызовСервераПовтИсп.ПолучитьОбъектCsmHandler();
			SafeArrayРезультат = ОбъектCsmHandler.GetDistanceArray(SafeArrayШирота, SafeArrayДолгота);
		    МассивРезультат    = SafeArrayРезультат.Выгрузить();
			
			ОбщийПробег = 0;
			Для Счетчик = 0 По МИН(МассивРезультат.Количество(),ТЗ.Количество())-1 Цикл
				ТЗ[Счетчик].Пробег = ОбщийПробег/1000;
				ОбщийПробег = ОбщийПробег + МассивРезультат[Счетчик];
			КонецЦикла;
			
		Иначе
			ОбщийПробег = 0;
			ПредШирота = 0;
			ПредДолгота = 0;
			Сч = 0;			
			Для Каждого стрТаблицыЗапроса Из ТЗ Цикл				
				Если Сч > 0 Тогда
					ОбщийПробег = ОбщийПробег + ItobОперативныйМониторинг.ПолучитьРасстояниеМеждуТочками(
						ПредШирота,ПредДолгота,стрТаблицыЗапроса.Широта,стрТаблицыЗапроса.Долгота)/1000;
				КонецЕсли;				
				стрТаблицыЗапроса.Пробег = ОбщийПробег;				
				
				ПредШирота  = стрТаблицыЗапроса.Широта;
				ПредДолгота = стрТаблицыЗапроса.Долгота;				
				Сч = Сч+1;
			КонецЦикла;		
		КонецЕсли;		
		
	КонецЕсли;
	
	Если ДанныеТолькоПриВключенномЗажигании Тогда
	
		МассивУдаления = Новый Массив;
		Для Счетчик = 0 По ТЗ.Количество()-1 Цикл
			Если НЕ ТЗ[Счетчик][ИмяКолонкиЗначениеЗажигания] = 1 Тогда
				МассивУдаления.Добавить(ТЗ[Счетчик]);
				Продолжить;
			КонецЕсли;			
		
		КонецЦикла;	
		Для Каждого СтрУдаления Из МассивУдаления Цикл
			ТЗ.Удалить(СтрУдаления);	
		КонецЦикла;	
	
	КонецЕсли;
	
	ТаблицаДанные = УбратьСтрокиТаблицыЗначенийСНевалиднымиПоказаниями(ТЗ, ТабДатчиков);
	Если ТаблицаДанные.Количество() <= 10 Тогда
		ТекстОшибки = НСтр("ru = 'За выбранный период данных по топливу не обнаружено!'");
		Возврат Ложь;
		
	КонецЕсли;	
	
	Для Каждого СтрДанные Из ТаблицаДанные Цикл		
		ПреобразованноеПоказание = 0;
		Для Каждого СтрДатчики Из ТабДатчиков Цикл
			ПреобразованноеПоказание = ПреобразованноеПоказание
				+ПреобразоватьПоТаблицеКалибровки(СтрДанные[СтрДатчики.ИмяКолонкиЗначение], СтрДатчики.ТабКалибровки);				
			
		КонецЦикла;
		
		СтрДанные.Значение = Окр(ПреобразованноеПоказание /?(УсреднятьДанныеПоНесколькимДатчикам,ТабДатчиков.Количество(),1),2);			
		
	КонецЦикла;
	
	ТекКалибровочныйГрафик = Новый Структура;
	ТекКалибровочныйГрафик.Вставить("Ссылка", КалибровочныйГрафик.Ссылка);
	Для Каждого ТекРеквизит Из Метаданные.Справочники.ItobКалибровочныеГрафики.Реквизиты Цикл
		ТекКалибровочныйГрафик.Вставить(ТекРеквизит.Имя, КалибровочныйГрафик[ТекРеквизит.Имя]);		
	КонецЦикла;
	
	// Усредняем для графика по всем графикам
	Если Назначение = "ПоВсем" Тогда
		УсреднитьДанныеКалибровочногоГрафика(ТекКалибровочныйГрафик, ТабДатчиков);
	КонецЕсли; 
	
	КалибрГрафикМаксВход = 0;
	КалибрГрафикМаксВыход = 0;		
	ТекКалибровочныйГрафик.СтандартноеОтклонение = РассчитатьСтандартноеОтклонениеПоНесколькимДатчикам(ТабДатчиков);
	
	ТекКалибровочныйГрафик.Вставить("Показатели", КалибровочныйГрафик.ПолучитьОбъект().Скопировать().Показатели);
	ТекКалибровочныйГрафик.Показатели.Очистить();
					
	НовСтрокаПоказатели = ТекКалибровочныйГрафик.Показатели.Добавить();
	НовСтрокаПоказатели.Вход  = 0;
	НовСтрокаПоказатели.Выход = 0;		

	НовСтрокаПоказатели = ТекКалибровочныйГрафик.Показатели.Добавить();
	НовСтрокаПоказатели.Вход  = 100000;
	НовСтрокаПоказатели.Выход = 100000;
	
		
	ТаблицаЗаправки = Неопределено;
	
	Если НЕ ОбработатьДанныеТопливо(ТаблицаДанные, ТекКалибровочныйГрафик, ТаблицаЗаправки)  Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка обработки данных топлива!'");
		Возврат Ложь;
	
	КонецЕсли;
	
	Если ТаблицаДанные.Количество() <= 10 Тогда
		ТекстОшибки = НСтр("ru = 'За выбранный период данных по топливу не обнаружено!'");
		Возврат Ложь;
	
	КонецЕсли;
			
	// Удалим данные, которые не попали в интервал
	Пока ТаблицаДанные.Количество() > 0 И ТаблицаДанные[0].Период < НачПериода Цикл
		ТаблицаДанные.Удалить(ТаблицаДанные[0]);	
	КонецЦикла;	
	Пока ТаблицаДанные.Количество() > 0 И ТаблицаДанные[ТаблицаДанные.Количество()-1].Период > КонПериода Цикл
		ТаблицаДанные.Удалить(ТаблицаДанные[ТаблицаДанные.Количество()-1]);	
	КонецЦикла;	
	
	Если ТаблицаДанные.Количество() <= 10 Тогда
		ТекстОшибки = НСтр("ru = 'За выбранный период данных по топливу не обнаружено!'");
		Возврат Ложь;
	
	КонецЕсли;
	
	// Удаляем заправки, которые выходят за пределы запрашиваемого периода
	Пока ТаблицаЗаправки.Количество()>0 И ТаблицаЗаправки[0].Период < НачПериода Цикл
		ТаблицаЗаправки.Удалить(ТаблицаЗаправки[0]);	
	КонецЦикла;	
	Пока ТаблицаЗаправки.Количество()>0 И ТаблицаЗаправки[ТаблицаЗаправки.Количество()-1].Период > КонПериода Цикл
		ТаблицаЗаправки.Удалить(ТаблицаЗаправки[ТаблицаЗаправки.Количество()-1]);	
	КонецЦикла;	
	
	Возврат Истина;			

КонецФункции // ОбработатьДанныеТопливо()

#КонецОбласти
