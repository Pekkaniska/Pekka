////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы конфигурации "Управление автотранспортом".
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = "МодульУправлениеАвтотранспортомДля1СERP";
	Описание.Версия = "2.0.9.1";
	
	// Требуется библиотека стандартных подсистем.
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Монопольно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	#Область Обработчики_выполняемые_при_каждом_обновлении_ИБ
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьИдентификаторыОбъектовМетаданных";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьНаборыДопРеквизитовИСведений";
	
	#КонецОбласти
	
	#Область Обработчики_выполняемые_при_заполнении_пустой_ИБ
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ПервоначальноеЗаполнениеИБ";
	
	#КонецОбласти
	
	#Область Обработчики_выполняемые_при_обновлении_на_версию_2_0_2
	
	ВариантыОтчетов.ДобавитьОбработчикиПолногоОбновления(Обработчики, "2.0.2.2");
	
	#КонецОбласти
	
	#Область Обработчики_выполняемые_при_обновлении_на_версию_2_0_3
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.3.1";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьПараметрыВыработки_2_0_3_1";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.3.1";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьЗначенияНастройкиРасчетФактРасходаГСМ_2_0_3_1";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.3.1";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ПеренестиЗанчениеРеквизитаРасчетФактРасходаВПЛ_2_0_3_1";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.3.1";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ПеренестиЗанчениеРеквизитаКрайнийСрокОтработкиВЗаказахГрузоотправителей_2_0_3_1";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.3.3";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ПеренестиГаражиВСправочникПунктыНазначения_2_0_3_3";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	
	#КонецОбласти
	
	#Область Обработчики_выполняемые_при_обновлении_на_версию_2_0_5
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.5.2";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьСпецРаботы_ПЛТТДНормыГСМ";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	
	#КонецОбласти
	
	#Область Обработчики_выполняемые_при_обновлении_на_версию_2_0_6
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.6.2";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ПеренестиФайлВОИзКартинкиИФайлыВСправочникАЗС";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	
	#КонецОбласти
	
	#Область Обработчики_выполняемые_при_обновлении_на_версию_2_0_7
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.7.3";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновлениеПараметрыВыработкиСпособРасчетаПоНомеруЭтапа_2_0_7_3";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.7.4";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновлениеПунктовНазначения_2_0_7_4";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.7.5";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьИспользуемыйПортOmnicomm_2_0_7_5";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	
	#КонецОбласти
	
	#Область Обработчики_выполняемые_при_обновлении_на_версию_2_0_8
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.8.2";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьОбластьДействияТарифыЗП_2_0_8_2";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	
	#КонецОбласти
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - если установить Истина, то будет выведена форма
//                                с описанием обновлений. По умолчанию, Истина.
//                                Возвращаемое значение.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
	стрСведенияОбОбновлении = Новый Структура("ПредыдущаяВерсия,
											  |ТекущаяВерсия,
											  |ВыводитьОписание", 
											  ПредыдущаяВерсия,
											  ТекущаяВерсия,
											  ВыводитьОписаниеОбновлений);
	
	Попытка
		Константы.уатСведенияОбОбновленииИБ.Установить(Новый ХранилищеЗначения(стрСведенияОбОбновлении, Новый СжатиеДанных(9)));
	Исключение
		ВызватьИсключение "Ошибка при установке значения константы ""уатСведенияОбОбновленииИБ""";
	КонецПопытки;
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
	Попытка
		ХранилищеСведенийОбОбновлении = Константы.уатСведенияОбОбновленииИБ.Получить();
		Если ХранилищеСведенийОбОбновлении = Неопределено Тогда 
			ВызватьИсключение "Хранилище сведений не доступно";
		КонецЕсли;
		
		стрСведенияОбОбновлении = ХранилищеСведенийОбОбновлении.Получить();
		Если стрСведенияОбОбновлении = Неопределено 
			Или Не ТипЗнч(стрСведенияОбОбновлении) = Тип("Структура") Тогда 
				ВызватьИсключение "Хранилище сведений не заполнено";
		КонецЕсли;
	Исключение
		стрСведенияОбОбновлении = Новый Структура("ПредыдущаяВерсия,
												  |ТекущаяВерсия,
												  |ВыводитьОписание", 
												  "0.0.0.0",
												  "0.0.0.0",
												  Ложь);
	КонецПопытки;
	
	Если стрСведенияОбОбновлении.ВыводитьОписание Тогда 
		МакетОписаниеОбновлений = ПолучитьОбщийМакет("уатОписаниеИзмененийСистемы");
		
		Для Каждого ТекОбл Из Макет.ВыделенныеОбласти Цикл 
			Если Не Найти(ТекОбл.Текст, "Конфигурация успешно обновлена на версию") = 0 Тогда 
				Макет.Очистить();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Макет.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Заголовок"));
		
		весПредыдущаяВерсия = ВесВерсии(стрСведенияОбОбновлении.ПредыдущаяВерсия, ".");
		весТекущаяВерсия    = ВесВерсии(стрСведенияОбОбновлении.ТекущаяВерсия, ".");
		
		списОписанияВерсий = Новый СписокЗначений;
		
		Для Каждого ТекОписаниеВерсии Из МакетОписаниеОбновлений.Области Цикл 
			ИмяОбласти = СокрЛП(ВРег(ТекОписаниеВерсии.Имя));
			Если Лев(ИмяОбласти, 6) = "ВЕРСИЯ" Тогда 
				ВерсияОписания = Прав(ИмяОбласти, СтрДлина(ИмяОбласти)-6);
				весТекОписания = ВесВерсии(ВерсияОписания, "_");
				Если весТекОписания > весПредыдущаяВерсия И весТекОписания <= весТекущаяВерсия Тогда 
					списОписанияВерсий.Добавить(весТекОписания, ВерсияОписания);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		списОписанияВерсий.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		
		Для Каждого ТекВерсия Из списОписанияВерсий Цикл 
			Макет.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Шапка" + ТекВерсия.Представление));
			Макет.НачатьГруппуСтрок("Версия" + ТекВерсия.Представление);
			Макет.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Версия" + ТекВерсия.Представление));
			Макет.ЗакончитьГруппуСтрок();
			Макет.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	Заглушка = Истина;
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
	Заглушка = Истина;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Служебные процедуры и функции подсистемы УАТ

// Проверить необходимость обновления информационной базы при смене версии конфигурации.
//
Функция НеобходимоОбновлениеИнформационнойБазыУАТ() Экспорт
	
	// структура описания подсистемы УАТ
	ОписаниеУАТ = Новый Структура("Имя, Версия, ТребуемыеПодсистемы", "", "", Новый Массив);
	
	// заполение данных по подсистеме УАТ
	ПриДобавленииПодсистемы(ОписаниеУАТ);
	
	Если ОбновлениеИнформационнойБазыСлужебный.НеобходимоВыполнитьОбновление(
			ОписаниеУАТ.Версия, ОбновлениеИнформационнойБазыСлужебный.ВерсияИБ(ОписаниеУАТ.Имя)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает числовой вес версии для сравнения версий между собой
//
// Параметры:
//  Версия - Строка - Версия в строковом формате
//
// Возвращаемое значение:
//  Число - вес версии
//
Функция ВесВерсии(Знач Версия, Знач Разделитель) Экспорт 
	
	Если Версия = "" Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат ВесВерсииИзМассиваСтрок(СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Версия, Разделитель));
	
КонецФункции

Функция ВесВерсииИзМассиваСтрок(РазрядыВерсииСтроками)
	
	Возврат 0
		+ Число(РазрядыВерсииСтроками[0]) * 1000000000
		+ Число(РазрядыВерсииСтроками[1]) * 1000000
		+ Число(РазрядыВерсииСтроками[2]) * 1000
		+ Число(РазрядыВерсииСтроками[3]);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Первоначальное_заполнение

// Процедура актуализирует данные в справочнике
//
Процедура ОбновитьИдентификаторыОбъектовМетаданных() Экспорт
	
	Справочники.ИдентификаторыОбъектовМетаданных.ОбновитьДанныеСправочника(Истина, Ложь, Ложь);
	
КонецПроцедуры

// Процедура актуализирует данные в справочнике
//
Процедура ОбновитьНаборыДопРеквизитовИСведений() Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("Используется", "НаборыДополнительныхРеквизитовИСведений") Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитовИСведений.Ссылка
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
	|ГДЕ
	|	НЕ НаборыДополнительныхРеквизитовИСведений.Используется
	|	И НЕ НаборыДополнительныхРеквизитовИСведений.ЭтоГруппа";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаборОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НаборОбъект.Используется = Истина;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборОбъект);
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет первоначальное заполнение
//
Процедура ПервоначальноеЗаполнениеИБ() Экспорт
	
	// Обязательное начальное заполнение информационной базы.
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Количество() тогда
		Организация = Справочники.Организации.СоздатьЭлемент();
		Организация.Наименование = "Наша организация";
		Организация.Записать();
		Организация = Организация.Ссылка;
		уатОбщегоНазначенияПовтИсп.УстановитьЗначениеПоУмолчанию("ОсновнаяОрганизация", Организация, ПользователиКлиентСервер.ТекущийПользователь());
	Иначе
		Выборка.Следующий();
		Организация = Выборка.Ссылка;
	КонецЕсли;
	
	// пропишем эту организацию текущему пользователю, если для него уже не установлена другая
	уатОбщегоНазначенияПовтИсп.УстановитьЗначениеПоУмолчанию("ОсновнаяОрганизация", Организация, ПользователиКлиентСервер.ТекущийПользователь());
	
	НастроитьСправочникПараметрыВыработки();
	
	//заполнение прав и настроек УАТ
	уатЗащищенныеФункцииСервер.ИнициализироватьПраваИНастройки();
	
	//бюджетирование
	ЗаполнитьБюджетированиеПервыйЗапуск();
	
КонецПроцедуры

Процедура ЗаполнитьБюджетированиеПервыйЗапуск()
	Если Метаданные.ПланыВидовХарактеристик.Найти("АналитикиСтатейБюджетов") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//обновление представления типа в аналитиках статей бюджетов
	СтруктураТипыУАТ = Новый Структура("АЗС, Билет, ВидБилета, МодельТС, ОбъектСтроительства, ТипТС, ТранспортноеСредство");
	Для Каждого ТекАналитика Из СтруктураТипыУАТ Цикл
		ПВХОбъект = ПланыВидовХарактеристик.АналитикиСтатейБюджетов[ТекАналитика.Ключ].ПолучитьОбъект();
		ПВХОбъект.ПредставлениеТипаЗначения = Строка(ПВХОбъект.ТипЗначения);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПВХОбъект);
	КонецЦикла;
	
	//обновление хоз. операций
	мсвХОбюджетированиеУАТ = Новый Массив;
	мсвХОбюджетированиеУАТ.Добавить(Справочники.НастройкиХозяйственныхОпераций.ЗаправкаГСМ);
	мсвХОбюджетированиеУАТ.Добавить(Справочники.НастройкиХозяйственныхОпераций.РеализацияТранспортныхУслуг);
	
	Для Каждого ТекСсылка Из мсвХОбюджетированиеУАТ Цикл
		Если ПустаяСтрока(ТекСсылка.ИсточникДанных) Тогда
			Продолжить;
		КонецЕсли;
		
		Объект = ТекСсылка.ПолучитьОбъект();
		
		//{УП}
		Попытка
			ПоказателиРегистра = Вычислить("МеждународныйУчетСерверПовтИсп.Показатели(Объект.ИсточникДанных)");
		Исключение
			Возврат;
		КонецПопытки;
		
		Если ПоказателиРегистра <> Неопределено Тогда
			Объект.ПоказателиРегистра.Очистить();
			Для каждого Показатель Из ПоказателиРегистра Цикл
				НоваяСтрока = Объект.ПоказателиРегистра.Добавить();
				НоваяСтрока.Показатель = Показатель.Ключ;
				НоваяСтрока.Использование = Истина;
			КонецЦикла;
		КонецЕсли;
		
		Объект.ПоказателиРегистра.Сортировать("Показатель");
		//{/УП}
		
		Объект.Записать();
	КонецЦикла;
КонецПроцедуры

// Процедура устанавливает реквизиты предопределенных элементов
// справочника "Параметры выработки"
Процедура НастроитьСправочникПараметрыВыработки()
	
	спрПараметрыВыработки = Справочники.уатПараметрыВыработки;
	
	Выборка = спрПараметрыВыработки.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъектСправочник = Выборка.ПолучитьОбъект();
		ОбъектСправочник.ДействуетНаТС = Истина;
		
		Если Не Выборка.Ссылка = Справочники.уатПараметрыВыработки.ВремяВПростоеСВклДвигателем
			И НЕ Выборка.Ссылка = Справочники.уатПараметрыВыработки.ПробегОбщийПоДаннымGPS Тогда
			ОбъектСправочник.ДействуетНаСотрудников = Истина;
		КонецЕсли;
		
		Если (Выборка.Ссылка = Справочники.уатПараметрыВыработки.ПробегОбщий) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.ПробегСГрузом) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.ПробегПорожний) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.ВремяВРаботе) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.КоличествоЕздок) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.ВесГруза) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.Объем) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.ТнКм) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.ОбъемКм) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.ПогрузочноРазгрузочныеРаботы) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.ПростойПодПогрузкой) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.ПростойПодРазгрузкой) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.Подача) Тогда
			
			ОбъектСправочник.ИспользоватьВТарифахНаУслуги = Истина;
		КонецЕсли;
		
		Если (Выборка.Ссылка = Справочники.уатПараметрыВыработки.ВремяВРаботе) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.ВремяВНаряде) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.ВремяВПростое) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.ВремяВПростоеСВклДвигателем) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.ВремяВРемонте) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.ВремяНочное) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.ВремяПраздничное) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.ВремяСпециальнойРаботы) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.ПростойПодПогрузкой) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.ПростойПодРазгрузкой) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.Подача) Тогда
			
			ОбъектСправочник.Временный = Истина;
		КонецЕсли;
		
		Если ОбъектСправочник.Модифицированность() Тогда
			ОбъектСправочник.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_на_версию_2_0_3

// Процедура выполняет первоначальное заполнение предопределенного элемента
// "ВремяВРаботеПоДаннымGPS" справочника "уатПараметрыВыработки".
//
Процедура ОбновитьПараметрыВыработки_2_0_3_1() Экспорт 
	
	мЗапрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатПараметрыВыработки.Ссылка
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|ГДЕ
	|	уатПараметрыВыработки.ИмяПредопределенныхДанных = ""ВремяВРаботеПоДаннымGPS""");
	мВыборка = мЗапрос.Выполнить().Выбрать();
	Если мВыборка.Следующий() Тогда
		СпрОб = мВыборка.Ссылка.ПолучитьОбъект();
		СпрОб.ДействуетНаТС                = Истина;
		СпрОб.ИспользоватьВТарифахНаУслуги = Истина;
		СпрОб.Временный                    = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	КонецЕсли;
	
	мЗапрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатПараметрыВыработки.Ссылка
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|ГДЕ
	|	уатПараметрыВыработки.ИмяПредопределенныхДанных = ""ВремяДневное""");
	мВыборка = мЗапрос.Выполнить().Выбрать();
	Если мВыборка.Следующий() Тогда
		СпрОб = мВыборка.Ссылка.ПолучитьОбъект();
		СпрОб.ДействуетНаСотрудников = Истина;
		СпрОб.Временный              = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет обновление настроек "РасчетФактРасходаГСМ" в регистре "уатПраваИНастройки".
//
Процедура ОбновитьЗначенияНастройкиРасчетФактРасходаГСМ_2_0_3_1() Экспорт 
	
	мЗапрос = Новый Запрос();
	мЗапрос.Текст =
	"ВЫБРАТЬ
	|	уатПраваИНастройки.Объект,
	|	уатПраваИНастройки.ПравоНастройка,
	|	уатПраваИНастройки.Значение
	|ИЗ
	|	РегистрСведений.уатПраваИНастройки КАК уатПраваИНастройки
	|ГДЕ
	|	уатПраваИНастройки.ПравоНастройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.уатПраваИНастройки.РасчетФактРасходаГСМ)
	|	И ТИПЗНАЧЕНИЯ(уатПраваИНастройки.Значение) = ТИП(БУЛЕВО)";
	
	мВыборка = мЗапрос.Выполнить().Выбрать();
	
	Пока мВыборка.Следующий() Цикл 
		НаборЗаписей = РегистрыСведений.уатПраваИНастройки.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(мВыборка.Объект);
		НаборЗаписей.Отбор.ПравоНастройка.Установить(мВыборка.ПравоНастройка);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() Тогда 
			Если мВыборка.Значение = Истина Тогда 
				НаборЗаписей[0].Значение = Перечисления.уатВидыРасчетаРасходаГСМ.ПоНорме;
			Иначе 
				НаборЗаписей[0].Значение = Перечисления.уатВидыРасчетаРасходаГСМ.НеРассчитывать;
			КонецЕсли;
			НаборЗаписей.Записать(Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет перенос данных из помеченного реквизита "УдалитьРасчетФактРасходаГСМПоНормативному" документа
// "уатПутевойЛист" в новый реквизит "РасчетФактРасходаГСМ".
//
Процедура ПеренестиЗанчениеРеквизитаРасчетФактРасходаВПЛ_2_0_3_1() Экспорт 
	
	мЗапрос = Новый Запрос();
	мЗапрос.Текст =
	"ВЫБРАТЬ
	|	уатПутевойЛист.Ссылка,
	|	уатПутевойЛист.УдалитьРасчетФактРасходаГСМПоНормативному
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|ГДЕ
	|	уатПутевойЛист.РасчетФактРасходаГСМ = ЗНАЧЕНИЕ(Перечисление.уатВидыРасчетаРасходаГСМ.ПустаяСсылка)";
	
	мВыборка = мЗапрос.Выполнить().Выбрать();
	
	Пока мВыборка.Следующий() Цикл 
		ДокОб = мВыборка.Ссылка.ПолучитьОбъект();
		Если мВыборка.УдалитьРасчетФактРасходаГСМПоНормативному = Истина Тогда 
			ДокОб.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоНорме;
		Иначе 
			ДокОб.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.НеРассчитывать;
		КонецЕсли;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокОб);
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет перенос даты из реквизита "УдалитьКрайнийСрокОтработки" в реквизиты "ОтправлениеС", "ОтправлениеПо", 
// "ДоставкаС", "ДоставкаПо".
//
Процедура ПеренестиЗанчениеРеквизитаКрайнийСрокОтработкиВЗаказахГрузоотправителей_2_0_3_1() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатЗаказГрузоотправителя.Ссылка,
	|	уатЗаказГрузоотправителя.УдалитьКрайнийСрокОтработки КАК ДатаОтправления,
	|	уатЗаказГрузоотправителя.УдалитьКрайнийСрокОтработки КАК ДатаВыполнения,
	|	уатЗаказГрузоотправителя.ОтправлениеС,
	|	уатЗаказГрузоотправителя.ОтправлениеПо,
	|	уатЗаказГрузоотправителя.ДоставкаС,
	|	уатЗаказГрузоотправителя.ДоставкаПо
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	НЕ уатЗаказГрузоотправителя.УдалитьКрайнийСрокОтработки = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		ДокОб = Выборка.Ссылка.ПолучитьОбъект();
		ДокОб.ОтправлениеС  = Выборка.ДатаОтправления + (Выборка.ОтправлениеС - '00010101');
		ДокОб.ОтправлениеПо = Выборка.ДатаОтправления + (Выборка.ОтправлениеПо - '00010101');
		ДокОб.ДоставкаС     = Выборка.ДатаВыполнения + (Выборка.ДоставкаС - '00010101');
		ДокОб.ДоставкаПо    = Выборка.ДатаВыполнения + (Выборка.ДоставкаПо - '00010101');
		ДокОб.УдалитьКрайнийСрокОтработки = '00010101000000';
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокОб);
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет перенос данных из справочника "Удалить_уатГаражи" в справочник "уатПунктыНазначения".
//
Процедура ПеренестиГаражиВСправочникПунктыНазначения_2_0_3_3() Экспорт 
	
	Если Метаданные.Справочники.Найти("Удалить_уатГаражи") = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Удалить_уатГаражи.Ссылка
	|ИЗ
	|	Справочник.Удалить_уатГаражи КАК Удалить_уатГаражи
	|ГДЕ
	|	Удалить_уатГаражи.СоответствиеПункта = ЗНАЧЕНИЕ(Справочник.уатПунктыНазначения.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		СпрОб = Выборка.Ссылка.ПолучитьОбъект();
		
		СоответствиеПунктаОб = Справочники.уатПунктыНазначения.СоздатьЭлемент();
		СоответствиеПунктаОб.Наименование = СпрОб.Наименование;
		СоответствиеПунктаОб.Гараж        = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СоответствиеПунктаОб);
		
		СпрОб.СоответствиеПункта = СоответствиеПунктаОб.Ссылка;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	КонецЦикла;
	
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	ТранспортныеСредства.Ссылка
	//|ИЗ
	//|	Справочник.ТранспортныеСредства КАК ТранспортныеСредства
	//|ГДЕ
	//|	НЕ ТранспортныеСредства.Удалить_уатГараж = ЗНАЧЕНИЕ(Справочник.Удалить_уатГаражи.ПустаяСсылка)
	//|	И ТранспортныеСредства.уатГараж = ЗНАЧЕНИЕ(Справочник.уатПунктыНазначения.ПустаяСсылка)";
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл 
	//	СпрОб = Выборка.Ссылка.ПолучитьОбъект();
	//	СпрОб.уатГараж = СпрОб.Удалить_уатГараж.СоответствиеПункта;
	//	СпрОб.Удалить_уатГараж = Неопределено;
	//	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	//КонецЦикла;
	//
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	уатДиспозицияТС.Ссылка
	//|ИЗ
	//|	Документ.уатДиспозицияТС КАК уатДиспозицияТС
	//|ГДЕ
	//|	НЕ(уатДиспозицияТС.Удалить_Местоположение ЕСТЬ NULL 
	//|				ИЛИ уатДиспозицияТС.Удалить_Местоположение = НЕОПРЕДЕЛЕНО
	//|				ИЛИ уатДиспозицияТС.Удалить_Местоположение = ЗНАЧЕНИЕ(Справочник.Удалить_уатГаражи.ПустаяСсылка)
	//|				ИЛИ уатДиспозицияТС.Удалить_Местоположение = ЗНАЧЕНИЕ(Справочник.уатПунктыНазначения.ПустаяСсылка)
	//|				ИЛИ уатДиспозицияТС.Удалить_Местоположение = """")
	//|	И (уатДиспозицияТС.Местоположение ЕСТЬ NULL 
	//|			ИЛИ уатДиспозицияТС.Местоположение = НЕОПРЕДЕЛЕНО
	//|			ИЛИ уатДиспозицияТС.Местоположение = ЗНАЧЕНИЕ(Справочник.уатПунктыНазначения.ПустаяСсылка)
	//|			ИЛИ уатДиспозицияТС.Местоположение = """")";
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл 
	//	ДокОб = Выборка.Ссылка.ПолучитьОбъект();
	//	Если ТипЗнч(ДокОб.Удалить_Местоположение) = Тип("СправочникСсылка.Удалить_уатГаражи") Тогда 
	//		ДокОб.Местоположение = ДокОб.Удалить_Местоположение.СоответствиеПункта;
	//	Иначе 
	//		ДокОб.Местоположение = ДокОб.Удалить_Местоположение;
	//	КонецЕсли;
	//	ДокОб.Удалить_Местоположение = Неопределено;
	//	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокОб);
	//КонецЦикла;
	//
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	уатПутевойЛист.Ссылка
	//|ИЗ
	//|	Документ.уатПутевойЛист КАК уатПутевойЛист
	//|ГДЕ
	//|	НЕ уатПутевойЛист.Удалить_Гараж = ЗНАЧЕНИЕ(Справочник.Удалить_уатГаражи.ПустаяСсылка)
	//|	И уатПутевойЛист.Гараж = ЗНАЧЕНИЕ(Справочник.уатПунктыНазначения.ПустаяСсылка)";
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл 
	//	ДокОб = Выборка.Ссылка.ПолучитьОбъект();
	//	ДокОб.Гараж = ДокОб.Удалить_Гараж.СоответствиеПункта;
	//	ДокОб.Удалить_Гараж = Неопределено;
	//	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокОб);
	//КонецЦикла;
	//
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	уатСостояниеТС.Регистратор
	//|ИЗ
	//|	РегистрСведений.уатСостояниеТС КАК уатСостояниеТС
	//|ГДЕ
	//|	НЕ(уатСостояниеТС.Удалить_Местоположение ЕСТЬ NULL 
	//|				ИЛИ уатСостояниеТС.Удалить_Местоположение = НЕОПРЕДЕЛЕНО
	//|				ИЛИ уатСостояниеТС.Удалить_Местоположение = ЗНАЧЕНИЕ(Справочник.Удалить_уатГаражи.ПустаяСсылка)
	//|				ИЛИ уатСостояниеТС.Удалить_Местоположение = ЗНАЧЕНИЕ(Справочник.уатПунктыНазначения.ПустаяСсылка)
	//|				ИЛИ уатСостояниеТС.Удалить_Местоположение = """")
	//|	И (уатСостояниеТС.Местоположение ЕСТЬ NULL 
	//|			ИЛИ уатСостояниеТС.Местоположение = НЕОПРЕДЕЛЕНО
	//|			ИЛИ уатСостояниеТС.Местоположение = ЗНАЧЕНИЕ(Справочник.уатПунктыНазначения.ПустаяСсылка)
	//|			ИЛИ уатСостояниеТС.Местоположение = """")";
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл 
	//	НаборЗаписей = РегистрыСведений.уатСостояниеТС.СоздатьНаборЗаписей();
	//	НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
	//	НаборЗаписей.Прочитать();
	//	
	//	Если ТипЗнч(НаборЗаписей[0].Удалить_Местоположение) = Тип("СправочникСсылка.Удалить_уатГаражи") Тогда 
	//		НаборЗаписей[0].Местоположение = НаборЗаписей[0].Удалить_Местоположение.СоответствиеПункта;
	//	Иначе 
	//		НаборЗаписей[0].Местоположение = НаборЗаписей[0].Удалить_Местоположение;
	//	КонецЕсли;
	//	НаборЗаписей[0].Удалить_Местоположение = Неопределено;
	//	
	//	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина);
	//КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_на_версию_2_0_5

// Заполняет реквизиты "спец. работа 1" - "спец. работа 5" в документах "уатПутевойЛист", "уатТТД"
// и регистре "уатНормыРасходаГСМ".
//
Процедура ЗаполнитьСпецРаботы_ПЛТТДНормыГСМ() Экспорт
	
	Запрос = Новый Запрос();
	
	// РС "уатНормыРасходаГСМ"
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатНормыРасходаГСМ.Период,
	|	уатНормыРасходаГСМ.ГСМ,
	|	уатНормыРасходаГСМ.МодельТС,
	|	уатНормыРасходаГСМ.Организация
	|ИЗ
	|	РегистрСведений.уатНормыРасходаГСМ КАК уатНормыРасходаГСМ
	|ГДЕ
	|	(уатНормыРасходаГСМ.СпециальнаяРабота1 = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПустаяСсылка)
	|				И НЕ уатНормыРасходаГСМ.НормаНаСпециальнуюРаботу1 = 0
	|			ИЛИ уатНормыРасходаГСМ.СпециальнаяРабота2 = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПустаяСсылка)
	|				И НЕ уатНормыРасходаГСМ.НормаНаСпециальнуюРаботу2 = 0
	|			ИЛИ уатНормыРасходаГСМ.СпециальнаяРабота3 = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПустаяСсылка)
	|				И НЕ уатНормыРасходаГСМ.НормаНаСпециальнуюРаботу3 = 0
	|			ИЛИ уатНормыРасходаГСМ.СпециальнаяРабота4 = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПустаяСсылка)
	|				И НЕ уатНормыРасходаГСМ.НормаНаСпециальнуюРаботу4 = 0
	|			ИЛИ уатНормыРасходаГСМ.СпециальнаяРабота5 = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПустаяСсылка)
	|				И НЕ уатНормыРасходаГСМ.НормаНаСпециальнуюРаботу5 = 0)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		НаборЗаписей = РегистрыСведений.уатНормыРасходаГСМ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		НаборЗаписей.Отбор.ГСМ.Установить(Выборка.ГСМ);
		НаборЗаписей.Отбор.МодельТС.Установить(Выборка.МодельТС);
		НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
		
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл 
			Если Не ЗначениеЗаполнено(Запись.СпециальнаяРабота1) И Не Запись.НормаНаСпециальнуюРаботу1 = 0 Тогда 
				Запись.СпециальнаяРабота1 = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Запись.СпециальнаяРабота2) И Не Запись.НормаНаСпециальнуюРаботу2 = 0 Тогда 
				Запись.СпециальнаяРабота2 = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы2;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Запись.СпециальнаяРабота3) И Не Запись.НормаНаСпециальнуюРаботу3 = 0 Тогда 
				Запись.СпециальнаяРабота3 = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы3;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Запись.СпециальнаяРабота4) И Не Запись.НормаНаСпециальнуюРаботу4 = 0 Тогда 
				Запись.СпециальнаяРабота4 = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы4;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Запись.СпециальнаяРабота5) И Не Запись.НормаНаСпециальнуюРаботу5 = 0 Тогда 
				Запись.СпециальнаяРабота5 = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы5;
			КонецЕсли;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина);
	КонецЦикла;
	
	// док. "уатПутевойЛист"
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатПутевойЛистЗадание.Ссылка
	|ИЗ
	|	Документ.уатПутевойЛист.Задание КАК уатПутевойЛистЗадание
	|ГДЕ
	|	(уатПутевойЛистЗадание.СпецРабота1 = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПустаяСсылка)
	|				И НЕ уатПутевойЛистЗадание.КоличествоСпецРаботы1 = 0
	|			ИЛИ уатПутевойЛистЗадание.СпецРабота2 = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПустаяСсылка)
	|				И НЕ уатПутевойЛистЗадание.КоличествоСпецРаботы2 = 0
	|			ИЛИ уатПутевойЛистЗадание.СпецРабота3 = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПустаяСсылка)
	|				И НЕ уатПутевойЛистЗадание.КоличествоСпецРаботы3 = 0
	|			ИЛИ уатПутевойЛистЗадание.СпецРабота4 = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПустаяСсылка)
	|				И НЕ уатПутевойЛистЗадание.КоличествоСпецРаботы4 = 0
	|			ИЛИ уатПутевойЛистЗадание.СпецРабота5 = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПустаяСсылка)
	|				И НЕ уатПутевойЛистЗадание.КоличествоСпецРаботы5 = 0)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		ДокОб = Выборка.Ссылка.ПолучитьОбъект();
		
		Для Каждого ТекСтрока Из ДокОб.Задание Цикл 
			Если Не ЗначениеЗаполнено(ТекСтрока.СпецРабота1) И Не ТекСтрока.КоличествоСпецРаботы1 = 0 Тогда 
				ТекСтрока.СпецРабота1 = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ТекСтрока.СпецРабота2) И Не ТекСтрока.КоличествоСпецРаботы2 = 0 Тогда 
				ТекСтрока.СпецРабота2 = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы2;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ТекСтрока.СпецРабота3) И Не ТекСтрока.КоличествоСпецРаботы3 = 0 Тогда 
				ТекСтрока.СпецРабота3 = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы3;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ТекСтрока.СпецРабота4) И Не ТекСтрока.КоличествоСпецРаботы4 = 0 Тогда 
				ТекСтрока.СпецРабота4 = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы4;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ТекСтрока.СпецРабота5) И Не ТекСтрока.КоличествоСпецРаботы5 = 0 Тогда 
				ТекСтрока.СпецРабота5 = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы5;
			КонецЕсли;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокОб);
	КонецЦикла;
	
	// док. "уатТТД"
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатТТДВыработка.Ссылка
	|ИЗ
	|	Документ.уатТТД.Выработка КАК уатТТДВыработка
	|ГДЕ
	|	(уатТТДВыработка.СпецРабота1 = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПустаяСсылка)
	|				И НЕ уатТТДВыработка.КоличествоСпецРаботы1 = 0
	|			ИЛИ уатТТДВыработка.СпецРабота2 = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПустаяСсылка)
	|				И НЕ уатТТДВыработка.КоличествоСпецРаботы2 = 0
	|			ИЛИ уатТТДВыработка.СпецРабота3 = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПустаяСсылка)
	|				И НЕ уатТТДВыработка.КоличествоСпецРаботы3 = 0
	|			ИЛИ уатТТДВыработка.СпецРабота4 = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПустаяСсылка)
	|				И НЕ уатТТДВыработка.КоличествоСпецРаботы4 = 0
	|			ИЛИ уатТТДВыработка.СпецРабота5 = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПустаяСсылка)
	|				И НЕ уатТТДВыработка.КоличествоСпецРаботы5 = 0)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		ДокОб = Выборка.Ссылка.ПолучитьОбъект();
		
		Для Каждого ТекСтрока Из ДокОб.Выработка Цикл 
			Если Не ЗначениеЗаполнено(ТекСтрока.СпецРабота1) И Не ТекСтрока.КоличествоСпецРаботы1 = 0 Тогда 
				ТекСтрока.СпецРабота1 = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ТекСтрока.СпецРабота2) И Не ТекСтрока.КоличествоСпецРаботы2 = 0 Тогда 
				ТекСтрока.СпецРабота2 = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы2;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ТекСтрока.СпецРабота3) И Не ТекСтрока.КоличествоСпецРаботы3 = 0 Тогда 
				ТекСтрока.СпецРабота3 = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы3;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ТекСтрока.СпецРабота4) И Не ТекСтрока.КоличествоСпецРаботы4 = 0 Тогда 
				ТекСтрока.СпецРабота4 = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы4;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ТекСтрока.СпецРабота5) И Не ТекСтрока.КоличествоСпецРаботы5 = 0 Тогда 
				ТекСтрока.СпецРабота5 = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы5;
			КонецЕсли;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокОб);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_на_версию_2_0_6

// Процедура выполняет перенос файла внешней обработки из регистра сведений "УдалитьУатКартинкиИФайлы" в справочник "уатАЗС".
//
Процедура ПеренестиФайлВОИзКартинкиИФайлыВСправочникАЗС() Экспорт 
	
	Если Метаданные.РегистрыСведений.Найти("УдалитьУатКартинкиИФайлы") = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КартинкиИФайлы.Объект КАК Объект,
	|	КартинкиИФайлы.Идентификатор КАК Идентификатор,
	|	КартинкиИФайлы.Данные КАК Данные,
	|	КартинкиИФайлы.ФлагПереноса КАК ФлагПереноса
	|ИЗ
	|	РегистрСведений.УдалитьУатКартинкиИФайлы КАК КартинкиИФайлы
	|ГДЕ
	|	КартинкиИФайлы.Идентификатор = &Идентификатор
	|	И КартинкиИФайлы.ФлагПереноса = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Идентификатор", "Обработка загрузки данных");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл 
			
			ТекДанные = Выборка.Данные.Получить();
			СпрОб = Выборка.Объект.ПолучитьОбъект();
			СпрОб.ФайлВнешнейОбработки = Новый ХранилищеЗначения(ТекДанные, Новый СжатиеДанных(9));
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
			
			НаборЗаписей = РегистрыСведений.УдалитьУатКартинкиИФайлы.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(Выборка.Объект);
			НаборЗаписей.Отбор.Идентификатор.Установить(Выборка.Идентификатор);
			
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() Тогда
				НаборЗаписей[0].ФлагПереноса = Истина;
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_на_версию_2_0_7

// Заполняет реквизит СпособРасчетаПоНомеруЭтапа справочника уатПараметрыВыработки
//Только для предопр. элементов ВесГруза и Объем
Процедура ОбновлениеПараметрыВыработкиСпособРасчетаПоНомеруЭтапа_2_0_7_3() Экспорт
	ПараметрВыработкиВесГруза = Справочники.уатПараметрыВыработки.ВесГруза.ПолучитьОбъект();
	ПараметрВыработкиВесГруза.СпособРасчетаПоНомеруЭтапа = 1;
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПараметрВыработкиВесГруза);
	
	ПараметрВыработкиОбъем = Справочники.уатПараметрыВыработки.Объем.ПолучитьОбъект();
	ПараметрВыработкиОбъем.СпособРасчетаПоНомеруЭтапа = 1;
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПараметрВыработкиОбъем);
КонецПроцедуры

// Процедура предназначена для обновления данных в справочнике "уатПунктыНазначения" 
// при переходе на новый релиз.
//
Процедура ОбновлениеПунктовНазначения_2_0_7_4() Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатПунктыНазначения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатПунктыНазначения КАК уатПунктыНазначения
	|ГДЕ
	|	НЕ уатПунктыНазначения.УдалитьТипПункта = ЗНАЧЕНИЕ(Перечисление.УдалитьУатТипыПунктовНазначения.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		СпрОб = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Не ЗначениеЗаполнено(СпрОб.ТипПункта) Тогда 
			СпрОб.ТипПункта = ПолучитьТипПунктаДляПодстановки(СпрОб.УдалитьТипПункта);
		КонецЕсли;
		
		Если СпрОб.УдалитьТипПункта = Перечисления.УдалитьУатТипыПунктовНазначения.Гараж Тогда 
			СпрОб.Гараж = Истина;
			
		ИначеЕсли СпрОб.УдалитьТипПункта = Перечисления.УдалитьУатТипыПунктовНазначения.АвтобуснаяСтанция Тогда 
			СпрОб.Автостанция = Истина;
		КонецЕсли;
		
		СпрОб.УдалитьТипПункта = Неопределено;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТипПунктаДляПодстановки(УдалитьТипПункта)
	
	НаименованиеТипа = Строка(УдалитьТипПункта);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Наименование", НаименованиеТипа);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатТипыПунктов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатТипыПунктов КАК уатТипыПунктов
	|ГДЕ
	|	уатТипыПунктов.Наименование = &Наименование
	|	И НЕ уатТипыПунктов.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
		
	Иначе 
		СпрОб = Справочники.уатТипыПунктов.СоздатьЭлемент();
		СпрОб.Наименование = НаименованиеТипа;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
		
		Возврат СпрОб.Ссылка;
	КонецЕсли;
	
КонецФункции // ПолучитьТипПунктаДляПодстановки()

// Процедура выполняет замену порта сервера Omnicomm с 8000 на 8001.
//
Процедура ОбновитьИспользуемыйПортOmnicomm_2_0_7_5() Экспорт
	
	Если Не Константы.уатИспользоватьМониторинг.Получить() Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не Константы.уатИспользоватьOmnicomm.Получить() Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не Константы.уатСпособРаботыСOmnicomm.Получить() = Перечисления.уатСпособРаботыСOmnicomm.ВебСервис Тогда
		Возврат;
	КонецЕсли;
	
	АдресСервера = Константы.уатАдресСервисаOmnicomm.Получить();
	Если СтрНайти(АдресСервера, ":8000") <> 0 Тогда 
		АдресСервера = СтрЗаменить(АдресСервера, ":8000", ":8001");
		Константы.уатАдресСервисаOmnicomm.Установить(АдресСервера);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_на_версию_2_0_8

// Процедура обновляет ТЧ ОбластьДействия в спр. Тарифы ЗП
//
Процедура ОбновитьОбластьДействияТарифыЗП_2_0_8_2() Экспорт
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатТарифыЗП.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатТарифыЗП КАК уатТарифыЗП
	|ГДЕ
	|	НЕ уатТарифыЗП.ЭтоГруппа
	|
	|СГРУППИРОВАТЬ ПО
	|	уатТарифыЗП.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(уатТарифыЗП.ОбластиДействия.УдалитьОбластьДействия) > 0");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СпрОб = Выборка.Ссылка.ПолучитьОбъект();
		Для Каждого ТекОбласть Из СпрОб.ОбластиДействия Цикл
			ТекОбласть.ЗначениеОбластиДействия = ТекОбласть.УдалитьОбластьДействия;
			Если ТипЗнч(ТекОбласть.УдалитьОбластьДействия) = Тип("СправочникСсылка.ТранспортныеСредства") Тогда
				ТекОбласть.ВидОбластиДействия = Перечисления.уатВидыОбластейДействияТарифовТС.Тягач;
			ИначеЕсли ТипЗнч(ТекОбласть.УдалитьОбластьДействия) = Тип("СправочникСсылка.уатМоделиТС") Тогда
				ТекОбласть.ВидОбластиДействия = Перечисления.уатВидыОбластейДействияТарифовТС.МодельТягача;
			ИначеЕсли ТипЗнч(ТекОбласть.УдалитьОбластьДействия) = Тип("СправочникСсылка.ТипыТранспортныхСредств") Тогда
				ТекОбласть.ВидОбластиДействия = Перечисления.уатВидыОбластейДействияТарифовТС.ТипТягача;
			ИначеЕсли ТипЗнч(ТекОбласть.УдалитьОбластьДействия) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
				ТекОбласть.ВидОбластиДействия = Перечисления.уатВидыОбластейДействияТарифовТС.Подразделение;
			ИначеЕсли ТипЗнч(ТекОбласть.УдалитьОбластьДействия) = Тип("СправочникСсылка.Контрагенты") Тогда
				ТекОбласть.ВидОбластиДействия = Перечисления.уатВидыОбластейДействияТарифовТС.Контрагент;
			ИначеЕсли ТипЗнч(ТекОбласть.УдалитьОбластьДействия) = Тип("СправочникСсылка.уатМаршруты") Тогда
				ТекОбласть.ВидОбластиДействия = Перечисления.уатВидыОбластейДействияТарифовТС.Маршрут;
			ИначеЕсли ТипЗнч(ТекОбласть.УдалитьОбластьДействия) = Тип("СправочникСсылка.СМ_ОбъектыСтроительства") Тогда
				ТекОбласть.ВидОбластиДействия = Перечисления.уатВидыОбластейДействияТарифовТС.ОбъектСтроительства;
			ИначеЕсли ТипЗнч(ТекОбласть.УдалитьОбластьДействия) = Тип("СправочникСсылка.уатВидыПеревозок") Тогда
				ТекОбласть.ВидОбластиДействия = Перечисления.уатВидыОбластейДействияТарифовТС.ВидПеревозки;
			КонецЕсли;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#КонецОбласти
