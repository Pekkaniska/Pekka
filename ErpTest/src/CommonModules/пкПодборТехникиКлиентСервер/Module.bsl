
#Область Прочее

// Возвращает структуру строки номенклатуры. Структура используется
// для кэширования текущих данных из строки динамического списка номенклатуры.
//
// Возвращаемое значение:
//	Структура. Структура для хранения сведений об активизированной строке номенклатуры.
//
Функция СтруктураСтрокиНоменклатуры() Экспорт
	
	СтруктураСтроки = Новый Структура();
	
	СтруктураСтроки.Вставить("Ссылка");
	СтруктураСтроки.Вставить("Родитель");
	СтруктураСтроки.Вставить("ВидНоменклатуры");
	СтруктураСтроки.Вставить("ТипНоменклатуры");
	СтруктураСтроки.Вставить("Упаковка");
	СтруктураСтроки.Вставить("ЕдиницаИзмерения");
	СтруктураСтроки.Вставить("Номенклатура");
	СтруктураСтроки.Вставить("ЭтоГруппа", Ложь);
	СтруктураСтроки.Вставить("ВНаличииОстаток", 0);
	
	Возврат СтруктураСтроки;
	
КонецФункции

// Возвращает структуру строки номенклатуры. Структура используется
// для кэширования текущих данных из строки динамического списка номенклатуры.
//
// Возвращаемое значение:
//	Структура. Структура для хранения сведений об активизированной строке номенклатуры.
//
Функция СтруктураСтрокиТехники() Экспорт
	
	СтруктураСтроки = Новый Структура();
	
	СтруктураСтроки.Вставить("Ссылка");
	СтруктураСтроки.Вставить("Родитель");
	СтруктураСтроки.Вставить("Модель");
	СтруктураСтроки.Вставить("ЭтоГруппа", Ложь);
	
	Возврат СтруктураСтроки;
	
КонецФункции

// Возвращает структуру необходимую для передачи данных о товаре в
// процедуры добавления товара в корзину.
//
// Параметры:
//	Номенклатура - СправочникСсылка.Номенклатура - номенклатура.
//
// Возвращаемое значение:
//	Структура - структура параметров товара.
//
Функция ПараметрыТовара(Номенклатура = Неопределено) Экспорт
	
	ПараметрыТовара = Новый Структура();
	ПараметрыТовара.Вставить("Номенклатура");
    ПараметрыТовара.Вставить("Техника");
    
	ПараметрыТовара.Вставить("ДатаНачалаАренды");
	ПараметрыТовара.Вставить("ДатаОкончанияАренды");
    
	ПараметрыТовара.Вставить("Упаковка", ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка"));

	ПараметрыТовара.Вставить("КоличествоУпаковок",0);
	ПараметрыТовара.Вставить("КоличествоПоМодели",0);

	ПараметрыТовара.Вставить("Доступно", 0);
	ПараметрыТовара.Вставить("ВНаличии", 0);
	ПараметрыТовара.Вставить("Погрешность", 0);
	
	Если Номенклатура <> Неопределено Тогда
		ПараметрыТовара.Упаковка = пкПодборТехникиВызовСервера.ПолучитьУпаковкуХранения(Номенклатура);
	КонецЕсли; 
	
	Возврат ПараметрыТовара;
	
КонецФункции

// Устанавливает текст информационной надписи о количестве и сумме
// товаров подобранных в корзину на форме подбора.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Процедура УстановитьТекстИнформационнойНадписи(Форма) Экспорт
	
	Корзина = Форма.Объект.Корзина;
	
	Количество = НРег(ЧислоПрописью(Корзина.Количество(), "Л = ru_RU; ДП = Ложь; НП = Истина; НД = Ложь;", НСтр("ru = 'позиция,позиции,позиций,ж,,,,,0'")));
		
	СкрытьПоказать = "";
	
	ИнформационнаяНадпись = НСтр("ru = 'Всего подобрано [Количество] техники [СкрытьПоказать]'");
	
	СкрытьПоказать = ?(Форма.ПоказыватьПодобранныеТовары, НСтр("ru = '(скрыть)'"), НСтр("ru = '(показать)'"));
	
	ВставляемыеЗначения = Новый Структура("Количество, СкрытьПоказать", Количество, СкрытьПоказать);
	
	ИнформационнаяНадпись = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ИнформационнаяНадпись, ВставляемыеЗначения);
	
	Форма.ИнформационнаяНадпись = ИнформационнаяНадпись;
	
КонецПроцедуры

Процедура УстановитьТекстИнформационнойНадписиТехника(Форма) Экспорт
	
	СкрытьПоказать = "";
	
	ИнформационнаяНадпись = НСтр("ru = 'Техника [СкрытьПоказать]'");
	
	СкрытьПоказать = ?(Форма.ПоказыватьТехнику, НСтр("ru = '(скрыть)'"), НСтр("ru = '(показать)'"));
	
	ВставляемыеЗначения = Новый Структура("СкрытьПоказать", СкрытьПоказать);
	
	ИнформационнаяНадпись = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ИнформационнаяНадпись, ВставляемыеЗначения);
	
	Форма.ИнформационнаяНадписьТехника = ИнформационнаяНадпись;
	
КонецПроцедуры

Процедура УстановитьТекстИнформационнойНадписиНастройкаОтборов(Форма) Экспорт
	
	СкрытьПоказать = "";
	
	ИнформационнаяНадпись = НСтр("ru = 'Настройка отборов [СкрытьПоказать]'");
	
	СкрытьПоказать = ?(Форма.ПоказыватьНастройкуОтборов, НСтр("ru = '(скрыть)'"), НСтр("ru = '(показать)'"));
	
	ВставляемыеЗначения = Новый Структура("СкрытьПоказать", СкрытьПоказать);
	
	ИнформационнаяНадпись = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ИнформационнаяНадпись, ВставляемыеЗначения);
	
	Форма.ИнформационнаяНадписьНастройкаОтборов = ИнформационнаяНадпись;
	
КонецПроцедуры

Процедура УстановитьТекстИнформационнойНадписиМодели(Форма) Экспорт
	
	СкрытьПоказать = "";
	
	ИнформационнаяНадпись = НСтр("ru = 'Модели [СкрытьПоказать]'");
	
	СкрытьПоказать = ?(Форма.ПоказыватьМодели, НСтр("ru = '(скрыть)'"), НСтр("ru = '(показать)'"));
	
	ВставляемыеЗначения = Новый Структура("СкрытьПоказать", СкрытьПоказать);
	
	ИнформационнаяНадпись = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ИнформационнаяНадпись, ВставляемыеЗначения);
	
	Форма.ИнформационнаяНадписьМодели = ИнформационнаяНадпись;
	
КонецПроцедуры

// Формирует текст информационной надписи о количестве и сумме подобранных товаров.
//
// Параметры:
//	ИнформационнаяНадпись - Строка- реквизит, в который будет помещена информационная надпись,
//	КоличествоТоваров - Число - количество товаров,
//	СуммаТоваров - Число - сумма товаров,
//	Валюта - СправочникСсылка.Валюты - валюта, в которой осуществляется подбор товаров.
//
Процедура СформироватьИнформационнуюНадписьПодобранныхТоваров(ИнформационнаяНадпись, КоличествоТоваров, СуммаТоваров, Валюта) Экспорт
	
	ИнформационнаяНадпись = НСтр("ru = 'Всего подобрано техники [КоличествоТоваров]'");
	
	ВставляемыеЗначения = Новый Структура("КоличествоТоваров");
	
	ВставляемыеЗначения.КоличествоТоваров = Формат(КоличествоТоваров, "ЧН=0");
	
	ИнформационнаяНадпись = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ИнформационнаяНадпись, ВставляемыеЗначения);
	
КонецПроцедуры

// Формирует заголовок формы подбора, состоящий из заголовка формы и представления документа.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора товаров.
//
Процедура УстановитьЗаголовокФормыПодбора(Форма) Экспорт
	
	Документ = Форма.Параметры.Документ;
	
	Если Документ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Документ) Тогда
		Форма.Заголовок = Форма.Заголовок + ": " + Документ;
	Иначе
		ТекстДокумент = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 (новый)'"), Документ.Метаданные().Синоним);
		
		Форма.Заголовок = Форма.Заголовок + ": " + ТекстДокумент;
	КонецЕсли;
	
КонецПроцедуры

// Формирует заголовок формы подбора, состоящий из заголовка формы и представления документа.
//
// Параметры:
//	Заголовок - Строка - заголовок формы,
//	Документ - ДокументСсылка - ссылка на документ, из которого открывается подбор.
//
// Возвращаемое значение:
//	Строка, заголовок формы подбора.
//
Функция СформироватьЗаголовокФормыПодбора(Заголовок, Документ) Экспорт
	
	Если Документ = Неопределено Тогда
		Возврат Заголовок;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Документ) Тогда
		
		Заголовок = Заголовок + ": " + Документ;
		
	Иначе
		
		ТекстДокумент = НСтр("ru='%1 (новый)'");
		ТекстДокумент = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДокумент, Документ.Метаданные().Синоним);
		
		Заголовок = Заголовок + ": " + ТекстДокумент;
		
	КонецЕсли;
	
	Возврат Заголовок;
	
КонецФункции

// Устанавливает значение параметра динамического списка, или отключает его использование в зависимости от признака.
//
// Параметры:
//	Список - ДинамическийСписок - список,
//	ИмяПараметра - Строка - имя параметра,
//	Значение - Произвольный - значение параметра,
//	Использование - Булево - признак использования параметра.
//
Процедура УстановитьПараметрДинамическогоСписка(Список, ИмяПараметра, Значение, Использование = Истина) Экспорт
	
	ЗначениеПараметра = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	
	Если ЗначениеПараметра <> Неопределено Тогда
		Если Использование Тогда
			Список.Параметры.УстановитьЗначениеПараметра(ИмяПараметра, Значение);
		Иначе
			ЗначениеПараметра.Значение = Значение;
			ЗначениеПараметра.Использование = Ложь;
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает значения доступности элементов фильтров в зависимости от значения
// флажка использования фильтров.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьДоступностьЭлементовФильтров(Форма) Экспорт
			
    Форма.Элементы.ИерархияНоменклатуры.Доступность = Форма.ИспользоватьФильтры;
    Форма.Элементы.ВидыНоменклатуры.Доступность = Форма.ИспользоватьФильтры;
    Форма.Элементы.ВидНоменклатуры.Доступность = Форма.ИспользоватьФильтры;
    Форма.Элементы.ДеревоОтборов.Доступность = Форма.ИспользоватьФильтры;
    Форма.Элементы.КоманднаяПанельВариантНавигации.Доступность = Форма.ИспользоватьФильтры;
    
    Если Форма.ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам")
        Или Форма.ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам")
        Или Форма.ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоВидам") Тогда
        Форма.Элементы.НадписьВариантНавигации.Доступность = Форма.ИспользоватьФильтры;
    КонецЕсли;
				
КонецПроцедуры

#КонецОбласти

#Область ФункцииДляРаботыМеханизмаПоиска

// Устанавливает отбор по строке поиска у динамического списка.
//
// Параметры:
//	ЭлементыОтбора - Коллекция - коллекция элементов отбора,
//	ЗначениеОтбора - Массив - массив значений отбора,
//	ИспользованиеОтбора - Булево - флаг использования отбора.
//
Процедура УстановитьОтборСпискаПоСтрокеПоиска(ЭлементыОтбора, ЗначениеОтбора = Неопределено, ИспользованиеОтбора = Истина) Экспорт
	
	ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ЭлементыОтбора, "ПоискПоПодстроке", 
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "Ссылка", ЗначениеОтбора, 
		ВидСравненияКомпоновкиДанных.ВСписке, "ПоискПоПодстроке", ИспользованиеОтбора);
	
КонецПроцедуры

// Сбрасывает установленный отбор по строке поиска у списка номенклатуры.
//
// Параметры:
//	Форма -УправляемаяФорма - форма подбора, форма списка.
//
Процедура СнятьОтборПоСтрокеПоискаНоменклатуры(Форма) Экспорт
	
	Форма.КодОшибкиПоиска = "";
	Форма.ЕстьФильтрПоПоискуНоменклатуры = Ложь;
	Форма.ПоискНоменклатурыНеУдачный = Ложь;
	
	УстановитьОтборСпискаПоСтрокеПоиска(
		ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура).Элементы,, Ложь);
		
КонецПроцедуры

#КонецОбласти

#Область ФункцииУстановкиИСбросаОтборов

// Устанавливает отбор по группе номенклатыр в списке номенклатуры.
// Если на форме используется вариант навигации отличный от навигации по иерархии,
// то отбор не устанавливается.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьОтборПоИерархииНоменклатуры(Форма) Экспорт
	
	Если Не Форма.ИспользоватьФильтры Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоИерархии") Тогда
		Возврат;
	КонецЕсли;
	
	ОтборПоИерархииНоменклатуры = Форма.ТекущаяИерархияНоменклатуры;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.СписокНоменклатура,
																			"Родитель",
																			ОтборПоИерархииНоменклатуры,
																			ВидСравненияКомпоновкиДанных.Равно,
																			"Родитель",
																			Истина);
	
                                                                        КонецПроцедуры
                                                                        
// Отключает установленный отбор по группе номенклатуры у списка номенклатуры
// на форме подбора.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УдалитьОтборПоИерархииНоменклатуры(Форма) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.СписокНоменклатура, "Родитель",,,,Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОпределениеИменСписковНаФормеВЗависимостиОтВариантаПоиска

// Возвращает имя списка номенклатуры по варианту поиска.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма выбора, форма подбора.
//
// Возвращаемое значение:
//	Строка - имя списка номенклатуры.
//
Функция ИмяСпискаНоменклатурыПоВариантуПоиска(Форма) Экспорт
	
	ВариантПоискаТоваров = ДействующийВариантПоиска(Форма);
	ИмяСписка = ?(ВариантПоискаТоваров = "Расширенный", "СписокРасширенныйПоискНоменклатура", "СписокСтандартныйПоискНоменклатура");
	
	Возврат ИмяСписка;
	
КонецФункции

// Возвращает имя текущей страницы номенклатуры по варианту поиска.
//
// Параметры:
//	Форма - УправляемаяФорма - форма ывбора. списка, подбора.
//
// Возвращаемое значение:
//	Строка - имя страницы номенклатуры.
//
Функция ИмяСтраницыНоменклатурыПоВариантуПоиска(Форма) Экспорт
	
	ВариантПоискаТоваров = ДействующийВариантПоиска(Форма);
	ИмяСтраницы = ?(ВариантПоискаТоваров = "Расширенный", "СтраницаРасширенныйПоискНоменклатура", "СтраницаСтандартныйПоискНоменклатура");
	
	Возврат ИмяСтраницы;
	
КонецФункции

// Возвращает имя страницы списка страниц на форме подбора, которую надо сделать текущей
// в зависимости от включенного типа поиска.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма подбора.
//
// Возвращаемое значение:
//	Строка - имя страницы.
//
Функция ИмяТекущейСтраницыПоВариантуПоиска(Форма) Экспорт
	
	ИмяСтраницыСписка = "";
		
	ВариантПоискаТоваров = ДействующийВариантПоиска(Форма);
	
	ИмяСтраницыСписка = "СтраницаСтандартныйПоискНоменклатура";
	
	Если ВариантПоискаТоваров = "Расширенный" Тогда
		ИмяСтраницыСписка = "СтраницаРасширенныйПоискНоменклатура";
	КонецЕсли;
	
	Возврат ИмяСтраницыСписка;
	
КонецФункции

// Возвращает идентфикатор действующего варианта поиска.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма выбора, форма подбора.
//
// Возвращаемое значение:
//	Строка - идентификатор варианта поиска.
//
Функция ДействующийВариантПоиска(Форма) Экспорт
	
	Если Форма.ВариантПоискаТоваров = "ПоУмолчанию" Тогда
		Если Форма.ИспользоватьСтандартныйПоискПриПодбореТоваров Тогда
			Возврат "Стандартный";
		Иначе
			Возврат "Расширенный";
		КонецЕсли;
	Иначе
		Возврат Форма.ВариантПоискаТоваров;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область НастройкаОтображенияФормыПоВариантуПоиска

// Устанавлиает кнопку выбора по умолчанию в форме выбора номенклатуры в зависимости от варианта поиска.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры, форма выбора, форма подбора.
//
Процедура НазначитьКнопкуВыбораПоУмолчанию(Форма) Экспорт
	
	ВариантПоиска = ДействующийВариантПоиска(Форма);
	
	Если ВариантПоиска = "Расширенный" Тогда
		
		Форма.Элементы.СписокСтандартныйПоискНоменклатураВыбратьЗначениеНоменклатуры.КнопкаПоУмолчанию = Ложь;
		Форма.Элементы.СписокРасширенныйПоискНоменклатураВыбратьЗначениеНоменклатуры.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли ВариантПоиска = "Стандартный" Тогда
		
		Форма.Элементы.СписокСтандартныйПоискНоменклатураВыбратьЗначениеНоменклатуры.КнопкаПоУмолчанию = Истина;
		Форма.Элементы.СписокРасширенныйПоискНоменклатураВыбратьЗначениеНоменклатуры.КнопкаПоУмолчанию = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает значения текущих страниц на формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры, форма выбора, форма подбора.
//
Процедура УстановитьТекущиеСтраницыПоВариантуПоиска(Форма) Экспорт
	
	Если ДействующийВариантПоиска(Форма) = "Стандартный" Тогда
		СнятьОтборПоСтрокеПоискаНоменклатуры(Форма);
		Форма.СтрокаПоискаНоменклатура = "";
	КонецЕсли;
		
    Форма.Элементы.СтраницыСписков.ТекущаяСтраница = Форма.Элементы[ИмяТекущейСтраницыПоВариантуПоиска(Форма)];
    
    НазначитьСочетанияКлавишКомандФормыПоВариантуПоиска(Форма);
    
КонецПроцедуры

// Назначает нужные сочетания для клавиш команд формы в зависимости от варианта поиска.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры, форма выбора, форма подбора.
//
Процедура НазначитьСочетанияКлавишКомандФормыПоВариантуПоиска(Форма)
	
	ВариантПоиска = ДействующийВариантПоиска(Форма);
	
	Если ВариантПоиска = "Расширенный" Тогда
		ОсновнаяКоманда = Форма.Элементы.ПерейтиКСпискуНоменклатурыРасширенныйПоиск;
		ДополнительнаяКоманда = Форма.Элементы.ПерейтиКСпискуНоменклатурыСтандартныйПоиск;
	Иначе
		ОсновнаяКоманда = Форма.Элементы.ПерейтиКСпискуНоменклатурыСтандартныйПоиск;
		ДополнительнаяКоманда = Форма.Элементы.ПерейтиКСпискуНоменклатурыРасширенныйПоиск;
	КонецЕсли;
	
	ОсновнаяКоманда.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.BackSpace);
	ДополнительнаяКоманда.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.Нет);
	
КонецПроцедуры

#КонецОбласти

