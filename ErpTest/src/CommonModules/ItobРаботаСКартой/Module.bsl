////////////////////////////////////////////////////////////////////////////////
// Работа с картой (сервер)
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает ближайший заданным координатам объект из классификатора карты
//
Функция ОпределитьБлижайшийОбъектНаКарте(Широта, Долгота) Экспорт
	
	ТочностьОкругленияКоординат = 4;
	МаксимальноеРасстояниеДоТочки = 100; // В метрах
	
	// Поиск вхождения в географические зоны
	ГеографическаяЗона = ОпределениеВхожденияВГеографическойЗоны(Широта, Долгота);
	Если НЕ ГеографическаяЗона = Неопределено Тогда
		Возврат ГеографическаяЗона
	КонецЕсли;
	
	// Поиск в кэше
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Широта", Окр(Широта, ТочностьОкругленияКоординат));
	Запрос.УстановитьПараметр("Долгота", Окр(Долгота, ТочностьОкругленияКоординат));
	Запрос.Текст = "ВЫБРАТЬ
	               |	ItobГеографическийКлассификатор.Представление
	               |ИЗ
	               |	РегистрСведений.ItobКэшГеокодера КАК ItobКэшГеокодера
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ItobГеографическийКлассификатор КАК ItobГеографическийКлассификатор
	               |		ПО (ItobКэшГеокодера.ГеоКладрШирота = ItobГеографическийКлассификатор.Широта
	               |				И ItobКэшГеокодера.ГеоКладрДолгота = ItobГеографическийКлассификатор.Долгота
	               |				И ItobКэшГеокодера.ГеоКладрТочность = ItobГеографическийКлассификатор.Точность)
	               |ГДЕ
	               |	ItobКэшГеокодера.Широта = &Широта
	               |	И ItobКэшГеокодера.Долгота = &Долгота";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		Возврат	Выборка.Представление;	
	
	КонецЕсли;
	
	// Поиск в гео классификаторе	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Широта", Окр(Широта, ТочностьОкругленияКоординат));
	Запрос.УстановитьПараметр("Долгота", Окр(Долгота, ТочностьОкругленияКоординат));	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВложенныйЗапрос.Точность КАК Точность,
	               |	ВложенныйЗапрос.Широта,
	               |	ВложенныйЗапрос.Долгота,
	               |	ВложенныйЗапрос.Представление,
	               |	ВложенныйЗапрос.Расстояние
	               |ИЗ
	               |	(ВЫБРАТЬ ПЕРВЫЕ 100
	               |		ItobГеографическийКлассификатор.Точность КАК Точность,
	               |		ItobГеографическийКлассификатор.Широта КАК Широта,
	               |		ItobГеографическийКлассификатор.Долгота КАК Долгота,
	               |		ItobГеографическийКлассификатор.Представление КАК Представление,
	               |		(ItobГеографическийКлассификатор.Широта - &Широта) * (ItobГеографическийКлассификатор.Широта - &Широта) + (ItobГеографическийКлассификатор.Долгота - &Долгота) * (ItobГеографическийКлассификатор.Долгота - &Долгота) КАК Расстояние
	               |	ИЗ
	               |		РегистрСведений.ItobГеографическийКлассификатор КАК ItobГеографическийКлассификатор
	               |	
	               |	УПОРЯДОЧИТЬ ПО
	               |		Расстояние) КАК ВложенныйЗапрос
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Точность УБЫВ
	               |ИТОГИ ПО
	               |	Точность";
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		
		ВыборкаДетали = Выборка.Выбрать();
		Если ВыборкаДетали.Количество() > 0 Тогда
			ВыборкаДетали.Следующий();
			
			Если Окр(ВыборкаДетали.Расстояние,6) = 0 Тогда
				Возврат	ВыборкаДетали.Представление;
				
			КонецЕсли;
			
			Расстояние = ItobОперативныйМониторинг.ПолучитьРасстояниеМеждуТочками(Широта,Долгота,ВыборкаДетали.Широта,ВыборкаДетали.Долгота);
			
			Если Расстояние <= МаксимальноеРасстояниеДоТочки Тогда
				Возврат	ВыборкаДетали.Представление;
				
			КонецЕсли;
			
			Если Константы.ItobСервисОбратногоГеокодирования.Получить() = ПредопределенноеЗначение("Перечисление.ItobСервисыГеокодирования.Локальный") Тогда
				Если Расстояние <= 25000 Тогда
					Возврат ""+Окр(Расстояние/1000,1)+НСтр("ru = 'км от'")+" "+ВыборкаДетали.Представление;			
					
				КонецЕсли;			
				
			КонецЕсли;			
		
		КонецЕсли;		
	
	КонецЦикла;	
	
	Если Константы.ItobСервисОбратногоГеокодирования.Получить() = Перечисления.ItobСервисыГеокодирования.Локальный Тогда
		Возврат "";						
				
	КонецЕсли;
	
	// Адрес в кэше не найден, обращаемся к геокодеру
	СервисОбратногоГеокодирования = Константы.ItobСервисОбратногоГеокодирования.Получить();
	
	// Адрес в кэше не найден, обращаемся к геокодеру
	Если СервисОбратногоГеокодирования = Перечисления.ItobСервисыГеокодирования.NominatimMapquest Тогда
		КлючMapquest = Константы.ItobКлючMapquest.Получить();
		Если ПустаяСтрока(КлючMapquest) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В настройках ЦСМ не задан ключ карт Mapquest'"));
			Возврат "";		
		КонецЕсли;
		Возврат ОбратноеГеокодированиеNominatim(Широта,Долгота,"http://open.mapquestapi.com/nominatim/v1/",КлючMapquest);
				
	Иначе
		Возврат ОбратноеГеокодированиеNominatim(Широта,Долгота,"http://nominatim.openstreetmap.org/","");	
		
	КонецЕсли;
	
КонецФункции // ОпределитьБлижайшийОбъектНаКарте()

Функция НайтиБлижайшийНаселенныйПункт(Широта, Долгота, ПутевойУгол, Скорость) Экспорт
	
	Результат = Новый Структура("Ссылка,НаселенныйПункт,Широта,Долгота,УголОтПункта,ПриближениеУдаление");
	
	МАКС_ОТКЛОНЕНИЕ_ОТ_СТВОРА = 30;
	
	ТабБлижайшихНаселенныхПунктов = ПолучитьБлижайшиеНаселенныеПункты(Широта, Долгота, 0.5);
	Если ТабБлижайшихНаселенныхПунктов.Количество()=0 Тогда
		ТабБлижайшихНаселенныхПунктов = ПолучитьБлижайшиеНаселенныеПункты(Широта, Долгота, 1);
		Если ТабБлижайшихНаселенныхПунктов.Количество()=0 Тогда
			ТабБлижайшихНаселенныхПунктов = ПолучитьБлижайшиеНаселенныеПункты(Широта, Долгота, 10);	
			Если ТабБлижайшихНаселенныхПунктов.Количество()=0 Тогда
				ТабБлижайшихНаселенныхПунктов = ПолучитьБлижайшиеНаселенныеПункты(Широта, Долгота, 90);	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	Если ТабБлижайшихНаселенныхПунктов.Количество()=0 Тогда
		Возврат Неопределено;
	
	КонецЕсли;	
	
	Для каждого СтрПунктов Из ТабБлижайшихНаселенныхПунктов Цикл
		УголОтПункта = ВычислитьПутевойУголПоДвумТочкам(Широта, Долгота, СтрПунктов.Широта, СтрПунктов.Долгота);
		ПриближениеУдаление = ОбъектПриближаетсяУдаляется(ПутевойУгол, УголОтПункта, МАКС_ОТКЛОНЕНИЕ_ОТ_СТВОРА);
		 		
		Если ПриближениеУдаление > 0 ИЛИ Результат.НаселенныйПункт = Неопределено ИЛИ Скорость=0 Тогда
			ЗаполнитьЗначенияСвойств(Результат, СтрПунктов);
			Результат.УголОтПункта = УголОтПункта;
			Результат.ПриближениеУдаление = ПриближениеУдаление;
			
			Если ПриближениеУдаление > 0 ИЛИ Скорость=0 Тогда
				Прервать;			
			КонецЕсли;
		
		КонецЕсли;		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции // НайтиБлижайшийНаселенныйПункт()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обратное геокодирование с помощью web-сервиса Nominatim.
//
// Параметры
//  Широта,Долгота  - Географические координаты объекта.
//  АдресСервера 	- Ссылка на адрес сервиса.
//
// Возвращаемое значение:
//  Строка   		- Представление адреса.
//
Функция ОбратноеГеокодированиеNominatim(Широта,Долгота,АдресСервера,Ключ)

	ОбработчикДанных = Обработки.ItobРаботаССервисомNominatim.Создать();
	ОбработчикДанных.АдресСервера = АдресСервера;
	ОбработчикДанных.Ключ         = Ключ;
	Страница = ОбработчикДанных.ОбратноеГеокодированиеПолучитьАдресСтраницы(Широта, Долгота);
	
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	
	ПараметрыПолучения = Новый Структура;
	ПараметрыПолучения.Вставить("ПутьДляСохранения", ИмяФайла);
	
	РезультатСкачивания = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(Страница, ПараметрыПолучения);
	Если НЕ РезультатСкачивания.Статус Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка получения файла на сервере'")+" "+Страница);
		Возврат "";	
	
	КонецЕсли;
			
	Попытка
		ТаблицаРезультат = ОбработчикДанных.ОбратноеГеокодированиеРазобратьФайлОтвета(ИмяФайла);		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка обработки файла ответа геокодера:'")+" "+ОписаниеОшибки());
		Возврат "";
	
	КонецПопытки;	
	
	УдалитьФайлы(ИмяФайла);
	
	Если ТаблицаРезультат = Неопределено Тогда
		Возврат "";	
	КонецЕсли;
			
	Для каждого СтрокаРезультат Из ТаблицаРезультат Цикл
		
		Если СтрокаРезультат.Широта = 0 ИЛИ СтрокаРезультат.Долгота = 0 Тогда
			Продолжить;
		
		КонецЕсли;
		
		СтруктураАдреса = Новый Структура;
		СтруктураАдреса.Вставить("Страна", СтрокаРезультат.Страна);		
		СтруктураАдреса.Вставить("Индекс", СтрокаРезультат.Индекс);		
		СтруктураАдреса.Вставить("Регион", СтрокаРезультат.Регион);
		СтруктураАдреса.Вставить("Район",  СтрокаРезультат.Район);
		СтруктураАдреса.Вставить("Город",  СтрокаРезультат.Город);
		СтруктураАдреса.Вставить("НаселенныйПункт", СтрокаРезультат.НаселенныйПункт);
		СтруктураАдреса.Вставить("Улица",  СтрокаРезультат.Улица);
		СтруктураАдреса.Вставить("Дом",    СтрокаРезультат.Дом);
		СтруктураАдреса.Вставить("Корпус", СтрокаРезультат.Корпус);
		СтруктураАдреса.Вставить("Квартира","");		
		
		НовЗапись = РегистрыСведений.ItobГеографическийКлассификатор.СоздатьМенеджерЗаписи();
		НовЗапись.Широта   = СтрокаРезультат.Широта;
		НовЗапись.Долгота  = СтрокаРезультат.Долгота;
		НовЗапись.Точность = СтрокаРезультат.Точность;
		НовЗапись.Представление = СтрокаРезультат.Представление;		
		НовЗапись.ГеоРамкаСевер  = СтрокаРезультат.ГеоРамкаСевер;
		НовЗапись.ГеоРамкаЮг     = СтрокаРезультат.ГеоРамкаЮг;
		НовЗапись.ГеоРамкаЗапад  = СтрокаРезультат.ГеоРамкаЗапад;
		НовЗапись.ГеоРамкаВосток = СтрокаРезультат.ГеоРамкаВосток;
				
		НовЗапись.Записать();		
	
	КонецЦикла;
	
	ТаблицаРезультат.Сортировать("Точность Убыв");	
	Если ТаблицаРезультат.Количество() > 0 Тогда
		
		НовЗапись = РегистрыСведений.ItobКэшГеокодера.СоздатьМенеджерЗаписи();
		НовЗапись.Широта           = Широта;
		НовЗапись.Долгота          = Долгота;		
		НовЗапись.ГеоКладрШирота   = ТаблицаРезультат[0].Широта;
		НовЗапись.ГеоКладрДолгота  = ТаблицаРезультат[0].Долгота;
		НовЗапись.ГеоКладрТочность = ТаблицаРезультат[0].Точность;
		НовЗапись.Записать();
		
		Возврат ТаблицаРезультат[0].Представление;
		
	Иначе
		Возврат "";	
	
	КонецЕсли;	

КонецФункции // ОбратноеГеокодированиеNominatim()

// Функция ОбъектПриближаетсяУдаляется 
// Возвращает 0 - вблизи, 1 - приближается, 2 - удаляется
//
Функция ОбъектПриближаетсяУдаляется(ПутевойУгол, УголОтПункта, МаксОтклонениеОтСтвора)
	
	РазностьУглов = ?(УголОтПункта>=ПутевойУгол,1,-1)*(УголОтПункта-ПутевойУгол);
	РазностьУглов = ?(РазностьУглов > 180, РазностьУглов-360, РазностьУглов);
	РазностьУглов = ?(РазностьУглов>=0,1,-1)*РазностьУглов;
		
	Если РазностьУглов <= МаксОтклонениеОтСтвора Тогда
		// Приближается к точке
		Результат = 1;
		
	ИначеЕсли РазностьУглов >= 180-МаксОтклонениеОтСтвора Тогда
		// Отдаляется от точки
		Результат = 2;
		
	Иначе
		// Вблизи точки
		Результат = 0;
		
	КонецЕсли;
	
	Возврат Результат; 

КонецФункции // ОбъектПриближаетсяУдаляется()

Функция ВычислитьПутевойУголПоДвумТочкам(Широта0, Долгота0, Широта1, Долгота1)
	
	Pi = 3.1415926535897932;
	МаксОтклонениеОтНаправления = 30;
	
	УголПункт = 0; // относительно меридиана (север - 0, восток - 90 и т.п.)
	Если Долгота0 = Долгота1 Тогда
		УголПункт = ?(Широта1>=Широта0, 0, 180);	    	
	ИначеЕсли Долгота1 > Долгота0 Тогда
		УголПункт = 90-Цел(180*ATan((Широта1 - Широта0)/(Долгота1 - Долгота0))/Pi);
	Иначе
		УголПункт = 270-Цел(180*ATan((Широта1 - Широта0)/(Долгота1 - Долгота0))/Pi);
	КонецЕсли;
	
	Возврат УголПункт;

КонецФункции // ВычислитьПутевойУголПоДвумТочкам()

Функция ПолучитьБлижайшиеНаселенныеПункты(Широта, Долгота, Дельта)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Широта", Широта);
	Запрос.УстановитьПараметр("Долгота", Долгота);
	Запрос.УстановитьПараметр("Дельта", Дельта);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 10
	               |	ВложенныйЗапрос.Ссылка,
	               |	ВложенныйЗапрос.Широта,
	               |	ВложенныйЗапрос.Долгота,
	               |	ВложенныйЗапрос.НаселенныйПункт,
	               |	ВложенныйЗапрос.Расстояние
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		КлассификаторНаселенныхПунктов.Ссылка КАК Ссылка,
	               |		КлассификаторНаселенныхПунктов.Широта КАК Широта,
	               |		КлассификаторНаселенныхПунктов.Долгота КАК Долгота,
	               |		КлассификаторНаселенныхПунктов.Представление КАК НаселенныйПункт,
	               |		(КлассификаторНаселенныхПунктов.Широта - &Широта) * (КлассификаторНаселенныхПунктов.Широта - &Широта) + (КлассификаторНаселенныхПунктов.Долгота - &Долгота) * (КлассификаторНаселенныхПунктов.Долгота - &Долгота) КАК Расстояние
	               |	ИЗ
	               |		Справочник.ItobКлассификаторНаселенныхПунктов КАК КлассификаторНаселенныхПунктов
	               |	ГДЕ
	               |		КлассификаторНаселенныхПунктов.Широта >= &Широта - &Дельта
	               |		И КлассификаторНаселенныхПунктов.Широта <= &Широта + &Дельта
	               |		И КлассификаторНаселенныхПунктов.Долгота >= &Долгота - &Дельта
	               |		И КлассификаторНаселенныхПунктов.Долгота <= &Долгота + &Дельта) КАК ВложенныйЗапрос
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВложенныйЗапрос.Расстояние";
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьБлижайшиеНаселенныеПункты()


#Область ПодсистемаItobЦентрСпутниковогоМониторингаГеографическиеЗоны
	
// Определяет вхождение точки в географическую зону
//
Функция ОпределениеВхожденияВГеографическойЗоны(Широта, Долгота)
	Результат = Неопределено;
	
	// Подсистема ItobЦентрСпутниковогоМониторинга.ГеографическиеЗоны 
	Если ItobОбщегоНазначенияСервер.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.ГеографическиеЗоны") Тогда
		МодульГеографическиеЗоныСервер = ОбщегоНазначения.ОбщийМодуль("ItobГеографическиеЗоны");
		Результат = МодульГеографическиеЗоныСервер.ОпределениеВхожденияВГеографическиеЗоны(Широта, Долгота);
	КонецЕсли;

	Возврат Результат;	
КонецФункции

#КонецОбласти 

#КонецОбласти


