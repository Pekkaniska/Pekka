// ЕСЛИ ИСПОЛЬЗОВАТЬ - ПОТРЕБУЕТСЯ ВВОД АДРЕСА ПОЧТЫ //
Функция пкИспользоватьДвухФакторнуюАвторизацию () Экспорт
	Возврат ЛОЖЬ;
КонецФункции      

// МОЖЕТ ЛИ ПОЛЬЗОВАТЕЛЬ ЗАРЕГИСТРИРОВАТЬСЯ ЧЕРЕЗ МОБИЛЬНОЕ УСТРОЙСТВО //
Функция пкДоступнаРегистрацияПользователей () Экспорт
	Возврат ЛОЖЬ;
КонецФункции	

// ПОД КАЖДУЮ КОНФИГУРАЦИЮ КОД МОЖЕТ БЫТЬ РАЗНЫМ //
Функция пкНайтиПользователя(СтрАвторизации,Ответ) Экспорт 
	
	Если ЗначениеЗаполнено(СтрАвторизации.КодСотрудника) Тогда 
		// АВТОРЕГИСТРАЦИЯ //
		Если пкДоступнаРегистрацияПользователей() И СтрАвторизации.КодСотрудника = "AUTO" Тогда
			УстановитьПривилегированныйРежим(Истина);
			мГруппа          = Константы.пкГруппаПользователейАвторегистрация.Получить();
			СЧ               = мГруппа.Пользователи.Количество() + 1;
			Спр              = Справочники.Пользователи.СоздатьЭлемент();
			Спр.Наименование = "ТП " + Формат(СЧ,"ЧЦ=5; ЧВН=; ЧГ=");
			//Спр.Служебный    = Истина;
			Спр.пкИдентификаторДляМобильногоУстройства = "AUTO" + Формат(СЧ,"ЧЦ=5; ЧВН=; ЧГ=");
			
			Описание = Пользователи.НовоеОписаниеПользователяИБ();
			Описание.Вставить("Имя",                       Спр.Наименование);
			Описание.Вставить("ПолноеИмя",                 Спр.Наименование);
			Описание.Вставить("АутентификацияOpenID",      Ложь);
			Описание.Вставить("АутентификацияСтандартная", Истина);
			Описание.Вставить("ПоказыватьВСпискеВыбора",   Ложь);
			Описание.Вставить("СтарыйПароль",              Неопределено);
			Описание.Вставить("Пароль",                    "");
			Описание.Вставить("СохраняемоеЗначениеПароля", Неопределено);
			Описание.Вставить("ПарольУстановлен",          Истина);
			Описание.Вставить("ЗапрещеноИзменятьПароль",   Ложь);
			Описание.Вставить("АутентификацияОС",          Ложь);
			Описание.Вставить("ПользовательОС",            "");
			Описание.Вставить("ВходВПрограммуРазрешен"     , Истина);
			Описание.Вставить("РежимЗапуска",              "Авто");
			Роли = Новый Массив;
			Роли.Добавить("пкДоступКМобильнойПодсистеме");
			Описание.Вставить("Роли",Роли);
			
			Описание.Вставить("Действие","Записать");
			
			Спр.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ",Описание);
			Спр.Записать();
			мГруппаОбъект            = мГруппа.ПолучитьОбъект();
			НоваяСтрока              = мГруппаОбъект.Пользователи.Добавить();
			НоваяСтрока.Пользователь = Спр.Ссылка;
			мГруппаОбъект.Записать();
			УстановитьПривилегированныйРежим(ЛОЖЬ);
			Возврат Спр.Ссылка;
		// АВТОРЕГИСТРАЦИЯ //
		ИначеЕсли пкИспользоватьДвухФакторнуюАвторизацию() ТОГДА	
			#Область ПоискФизлицаПоКонтактам 
			Запрос = Новый Запрос; 
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КонтактнаяИнформация.Ссылка
			|ИЗ
			|	Справочник.Пользователи.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Представление ПОДОБНО &Почта
			|	И КонтактнаяИнформация.Ссылка.ИдентификаторПользователяИБ = &ИдентификаторДляМобильногоУстройства"; 
			Запрос.УстановитьПараметр("ИдентификаторДляМобильногоУстройства",СокрЛП(СтрАвторизации.КодСотрудника)); 
			Запрос.УстановитьПараметр("Почта"                                  ,СокрЛП(СтрАвторизации.Почта)); 
			РезультатЗапроса = Запрос.Выполнить().Выгрузить(); 
			//Если нашли одного, то все отлично 
			Если РезультатЗапроса.Количество() = 1 Тогда 
				Возврат РезультатЗапроса[0].Ссылка; 
			Иначе //Если ни одного, или более одного - выдаем ошибку 
				Если РезультатЗапроса.Количество() = 0 Тогда 
					пкОбщийМодульСервер.пкЗаписатьОшибку(Ответ, "Не найдено ни одного сотрудника. (Код 2-4)"); 
				Иначе 
					пкОбщийМодульСервер.пкЗаписатьОшибку(Ответ, "Ошибка поиска сотрудника. (Код 2-5)"); 
				КонецЕсли; 
			КонецЕсли;
		// ПРОСТО ПОИСК ПОЛЬЗОВАТЕЛЯ ПО КОДУ //	
		Иначе
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(СтрАвторизации.КодСотрудника);
			Если ПользовательИБ = Неопределено ТОГДА
				пкОбщийМодульСервер.пкЗаписатьОшибку(Ответ, "Не найдено ни одного сотрудника. (Код 2-4)"); 
			Иначе
				УИД = ПользовательИБ.УникальныйИдентификатор;
			КонецЕсли;	
			Запрос = Новый Запрос; 
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	пкПользователиМП.Ссылка
			|ИЗ
			|	Справочник.пкПользователиМП КАК пкПользователиМП
			|ГДЕ
			|	пкПользователиМП.ИдентификаторПользователяИБ = &УИД"; 
			Запрос.УстановитьПараметр("УИД",УИД); 
			РезультатЗапроса = Запрос.Выполнить().Выгрузить(); 
			//Если нашли одного, то все отлично 
			Если РезультатЗапроса.Количество() >= 1 Тогда 
				Возврат РезультатЗапроса[0].Ссылка; 
			Иначе
				пкОбщийМодульСервер.пкЗаписатьОшибку(Ответ, "Ошибка поиска сотрудника. (Код 2-5)"); 
			КонецЕсли;	
		КонецЕсли; 	
		#КонецОбласти 
	Иначе 
		пкОбщийМодульСервер.пкЗаписатьОшибку(Ответ, "Сотрудник по коду не найден. (Код 2-6)"); 
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли; 
	
КонецФункции

// ПОД КАЖДУЮ КОНФИГУРАЦИЮ КОД МОЖЕТ БЫТЬ РАЗНЫМ //
Функция пкНайтиПочтуПользователя(Пользователь, Ответ) Экспорт
	//так как это двухфакторная авторизация, то мы должны брать адрес отправки из нашей базы, а не тот, 
	//который указывает пользователь, иначе это нифига не двухфакторная. Тоже самое касается и телефона 
	Запрос = Новый Запрос("ВЫБРАТЬ КИ.Представление ИЗ Справочник.Пользователи.КонтактнаяИнформация КАК КИ ГДЕ КИ.Ссылка = &Объект И КИ.Тип = &Тип"); 
	Запрос.УстановитьПараметр("Объект", Пользователь); 
	Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты); 
	РезультатЗапроса = Запрос.Выполнить().Выгрузить(); 
	Если РезультатЗапроса.Количество() = 1 Тогда 
		Возврат РезультатЗапроса[0].Представление; 
	Иначе //Если ни одного, или более одного - выдаем ошибку 
		Если РезультатЗапроса.Количество() = 0 Тогда 
			//Этот же кусок кода можно переписать и прописать создание пользователя с нуля. 
			пкОбщийМодульСервер.пкЗаписатьОшибку(Ответ, "Не найденно ни одного адреса почты. (Код 2-9)"); 
		Иначе 
			//Ну тут на самом деле можно и одну любую взять, или уточнить условие запроса. 
			пкОбщийМодульСервер.пкЗаписатьОшибку(Ответ, "Ошибка поиска почты. (Код 2-10)"); 
		КонецЕсли; 
	КонецЕсли; 
КонецФункции

// ПРИ ЗАГРУЗКЕ ДОКУМЕНТА //
Процедура пкПриЗагрузкеДокумента (СтрокаТЧ, НовыйЭл, УзелОбмена)  Экспорт
	Если УзелОбмена <> Неопределено Тогда
		НовыйЭл.ОбменДанными.Отправитель = УзелОбмена;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	пкМобильныеКонфигурации.Пользователь
		|ИЗ
		|	РегистрСведений.пкМобильныеКонфигурации КАК пкМобильныеКонфигурации
		|ГДЕ
		|	пкМобильныеКонфигурации.Узел = &Узел";   
		Запрос.УстановитьПараметр("Узел",УзелОбмена);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			мПользователь = Выборка.Пользователь;
		Иначе
			мПользователь = Справочники.пкПользователиМП.ПустаяСсылка();
		КонецЕсли;
	Иначе	
		мПользователь = Справочники.пкПользователиМП.ПустаяСсылка();
	КонецЕсли;		
	
	Если ТипЗнч(НовыйЭл) = Тип ("ДокументОбъект.пкЗаявкаНаАрендуТехники") И НовыйЭл.ЭтоНовый() Тогда
		пкЗаявкаНаАрендуТехники_ПриЗагрузке (СтрокаТЧ, НовыйЭл, УзелОбмена, мПользователь);
	ИначеЕсли ТипЗнч(НовыйЭл) = Тип ("ДокументОбъект.пкЗаданиеНаРемонт") Тогда
		пкЗаданиеНаРемонт_ПриЗагрузке(СтрокаТЧ,НовыйЭл,УзелОбмена,мПользователь);	
	ИначеЕсли ТипЗнч(НовыйЭл) = Тип ("ДокументОбъект.пкЗаказНаряд") Тогда
		пкЗаказНаряд_ПриЗагрузке(СтрокаТЧ,НовыйЭл,УзелОбмена,мПользователь);	
	ИначеЕсли ТипЗнч(НовыйЭл) = Тип ("ДокументОбъект.пкКоммерческоеПредложениеНаАрендуТехники") Тогда
		пкКоммерческоеПредложениеНаАрендуТехники_ПриЗагрузке (СтрокаТЧ, НовыйЭл, УзелОбмена, мПользователь);
	ИначеЕсли ТипЗнч(НовыйЭл) = Тип ("ДокументОбъект.пкПогрузкаВыгрузкаПоДоставке") И НовыйЭл.ЭтоНовый() Тогда
		пкПогрузкаВыгрузкаПоДоставке_ПриЗагрузке (СтрокаТЧ, НовыйЭл, УзелОбмена, мПользователь);
	ИначеЕсли ТипЗнч(НовыйЭл) = Тип ("ДокументОбъект.пкЗаданиеНаПеревозку") Тогда
		пкЗаданиеНаПеревозку_ПриЗагрузке(СтрокаТЧ, НовыйЭл, УзелОбмена, мПользователь);
	КонецЕсли;	
	
КонецПроцедуры

Процедура пкЗаданиеНаПеревозку_ПриЗагрузке (СтрокаТЧ, НовыйЭл, УзелОбмена, мПользователь)
	Если НовыйЭл.ЭтоНовый() Тогда
		Если ЗначениеЗаполнено(НовыйЭл.ЗаявкаНаАрендуТехники) Тогда
			НовыйЭл.Подразделение = НовыйЭл.ЗаявкаНаАрендуТехники.Подразделение;
		КонецЕсли;
	//	Если Не ЗначениеЗаполнено(НовыйЭл.Менеджер) Тогда
	//		НовыйЭл.Менеджер = мПользователь.Пользователь;
	//	КонецЕсли;		
	//	мДанныеТехники = ПолучитьКлиентаОбъектСтроительстваПоТехнике(НовыйЭл.ОбъектЭксплуатации,НовыйЭл.Дата);
	//	Если мДанныеТехники <> Неопределено Тогда
	//		ЗаполнитьЗначенияСвойств(НовыйЭл,мДанныеТехники);
	//	КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры


Процедура пкЗаданиеНаРемонт_ПриЗагрузке (СтрокаТЧ, НовыйЭл, УзелОбмена, мПользователь)
	Если НовыйЭл.ЭтоНовый() Тогда
		Если Не ЗначениеЗаполнено(НовыйЭл.Организация) Тогда
			НовыйЭл.Организация = мПользователь.Организация;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НовыйЭл.Менеджер) Тогда
			НовыйЭл.Менеджер = мПользователь.Пользователь;
		КонецЕсли;		
		мДанныеТехники = ПолучитьКлиентаОбъектСтроительстваПоТехнике(НовыйЭл.ОбъектЭксплуатации,НовыйЭл.Дата);
		Если мДанныеТехники <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(НовыйЭл,мДанныеТехники);
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

Процедура пкЗаказНаряд_ПриЗагрузке (СтрокаТЧ, НовыйЭл, УзелОбмена, мПользователь)
	
	Если НовыйЭл.ЭтоНовый() Тогда
		Если Не ЗначениеЗаполнено(НовыйЭл.Организация) Тогда
			НовыйЭл.Организация = мПользователь.Организация;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НовыйЭл.Ответственный) Тогда
			НовыйЭл.Ответственный = мПользователь.Пользователь;
		КонецЕсли;
	КонецЕсли;
	
	ТабРаботы       = СтрокаТЧ.Работы.Скопировать();
	ТабРаботы.Колонки.Добавить("Обработан",Новый ОписаниеТипов("Булево"));
	Запрос          = Новый Запрос;
	Запрос.Текст    = "ВЫБРАТЬ *,ЛОЖЬ КАК Обработан ИЗ Документ.пкЗаказНаряд.Работы ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка",СтрокаТЧ.Ссылка);
	ТабРаботыСтарые = Запрос.Выполнить().Выгрузить(); 
	НовыйЭл.Работы.Очистить();
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаРабот Из ТабРаботыСтарые Цикл
		ИскомыеСтроки = ТабРаботы.НайтиСтроки(Новый Структура("Номенклатура,Обработан",СтрокаРабот.Номенклатура,ЛОЖЬ));
		Если ИскомыеСтроки.Количество() = 0 Тогда
			СтрокиКУдалению.Добавить(СтрокаРабот);
		Иначе
			ИскомаяСтрока = ИскомыеСтроки[0];
			НоваяСтрока   = НовыйЭл.Работы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаРабот);
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ИскомаяСтрока);
			ИскомаяСтрока.Обработан = Истина;
			СтрокаРабот.Обработан   = Истина;
		КонецЕсли;	
	КонецЦикла;
	Для Каждого ИскомаяСтрока Из ТабРаботы.НайтиСтроки(Новый Структура("Обработан",ЛОЖЬ)) Цикл
		НоваяСтрока            = НовыйЭл.Работы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ИскомаяСтрока);
		НоваяСтрока.ВидРемонта = НовыйЭл.ВидРемонта;
	КонецЦикла;
	
	Если НовыйЭл.ЭтоНовый() Тогда
		мДанныеТехники = ПолучитьКлиентаОбъектСтроительстваПоТехнике(НовыйЭл.Техника,НовыйЭл.Дата);
		Если мДанныеТехники <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(НовыйЭл,мДанныеТехники);
		КонецЕсли;	
		НовыйЭл.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
		
		// Rarus-spb byse {
		// Запрос 4289 
		Если НовыйЭл.ПлатныйРемонт Тогда
			НовыйЭл.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
		КонецЕсли;	
		// Rarus-spb byse }
		
		// Rarus-spb byse {
		// Запрос 9778 
		Если НовыйЭл.ПлатныйРемонт Тогда
			НовыйЭл.СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.НайтиПоКоду("00-000128"); // Запчасти для платного ремонта (договоры аренды)
			Если Не ЗначениеЗаполнено(НовыйЭл.СтатьяРасходов) Тогда
				НовыйЭл.СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.НайтиПоНаименованию("Запчасти для платного ремонта (договоры аренды)"); // Запчасти для платного ремонта (договоры аренды)
			КонецЕсли;
		Иначе 
			НовыйЭл.СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.НайтиПоКоду("00-000132"); // Запчасти для ремонта подъемников на базе
			Если Не ЗначениеЗаполнено(НовыйЭл.СтатьяРасходов) Тогда
				НовыйЭл.СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.НайтиПоНаименованию("Запчасти для ремонта подъемников на базе"); // Запчасти для ремонта подъемников на базе
			КонецЕсли;
		КонецЕсли;	
		// Rarus-spb byse }
		
	КонецЕсли;	
	
	
	
КонецПроцедуры	

Процедура пкЗаявкаНаАрендуТехники_ПриЗагрузке (СтрокаТЧ, НовыйЭл, УзелОбмена, мПользователь)
	Если Не ЗначениеЗаполнено(НовыйЭл.Менеджер) Тогда
		НовыйЭл.Менеджер  = НовыйЭл.Партнер.ОсновнойМенеджер;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(НовыйЭл.Автор) Тогда
		НовыйЭл.Автор     = НовыйЭл.ПользовательМП.Пользователь;
	КонецЕсли;
	Для Каждого СтрокаТаб Из НовыйЭл.Товары Цикл
		СтрокаТаб.ДатаОтгрузки = СтрокаТаб.ДатаНачалаАренды;
		СтрокаТаб.ДатаВозврата = СтрокаТаб.ДатаОкончанияАренды;
		СтрокаТаб.Упаковка     = СтрокаТаб.Номенклатура.ЕдиницаИзмерения;	
		СтрокаТаб.Количество   = СтрокаТаб.КоличествоУпаковок;
	КонецЦикла;	
	ДокСсылка = Документы.пкЗаявкаНаАрендуТехники.НайтиПоНомеру(НовыйЭл.Номер,НовыйЭл.Дата);
	Если ЗначениеЗаполнено(ДокСсылка) И ДокСсылка <> СтрокаТЧ.Ссылка Тогда
		НовыйЭл.УстановитьНовыйНомер();
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена,СтрокаТЧ.Ссылка);
	КонецЕсли;	
	//НовыйЭл.Проведен  = ЛОЖЬ;
	//СтрокаТЧ.Проведен = ЛОЖЬ;
КонецПроцедуры

Процедура пкКоммерческоеПредложениеНаАрендуТехники_ПриЗагрузке (СтрокаТЧ, НовыйЭл, УзелОбмена, мПользователь)
	НовыйЭл.ТипыТехники.Очистить();
	Для Каждого СтрокаТовары Из НовыйЭл.Товары Цикл 
		мТипТехники = СтрокаТовары.Номенклатура.пкТипТехники;
		Если НовыйЭл.ТипыТехники.Найти(мТипТехники) = Неопределено Тогда
			НоваяСтрока = НовыйЭл.ТипыТехники.Добавить();
			НоваяСтрока.ТипТехники = мТипТехники;
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

Процедура пкПогрузкаВыгрузкаПоДоставке_ПриЗагрузке (СтрокаТЧ, НовыйЭл, УзелОбмена, мПользователь)
		НовыйЭл.Автор         = НовыйЭл.ПользовательМП.Пользователь;
		НовыйЭл.Ответственный = НовыйЭл.ПользовательМП.Пользователь;
		ДокСсылка = Документы.пкПогрузкаВыгрузкаПоДоставке.НайтиПоНомеру(НовыйЭл.Номер,НовыйЭл.Дата);
		Если ЗначениеЗаполнено(ДокСсылка) И ДокСсылка <> СтрокаТЧ.Ссылка Тогда
			НовыйЭл.УстановитьНовыйНомер();
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена,СтрокаТЧ.Ссылка);
		КонецЕсли;
КонецПроцедуры
	
Функция ПолучитьКлиентаОбъектСтроительстваПоТехнике (Техника, Период)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	пкСостояниеТехникиСрезПоследних.Значение КАК ОбъектСтроительства,
	|	ВЫБОР
	|		КОГДА пкСостояниеТехникиСрезПоследних.Регистратор ССЫЛКА Документ.пкПогрузкаВыгрузкаПоДоставке
	|			ТОГДА пкСостояниеТехникиСрезПоследних.Регистратор.ЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники.Партнер
	|		ИНАЧЕ пкСостояниеТехникиСрезПоследних.Значение.Заказчик.Партнер
	|	КОНЕЦ КАК Клиент
	|ИЗ
	|	РегистрСведений.пкСостояниеТехники.СрезПоследних(
	|			&Дата,
	|			Техника = &Техника
	|				И Показатель = ЗНАЧЕНИЕ(ПланВидовХарактеристик.пкПоказателиСостоянияТехники.Местонахождения)) КАК пкСостояниеТехникиСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.пкСтатусыТехники.СрезПоследних(&Дата, Техника = &Техника) КАК пкСтатусыТехникиСрезПоследних
	|		ПО пкСостояниеТехникиСрезПоследних.Техника = пкСтатусыТехникиСрезПоследних.Техника
	|ГДЕ
	|	пкСтатусыТехникиСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.пкСтатусыТехники.ВАренде)";
	Запрос.УстановитьПараметр("Дата", Период);
	Запрос.УстановитьПараметр("Техника", Техника);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда 
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		СтруктураВозврата = Новый Структура("Клиент,ОбъектСтроительства");
		ЗаполнитьЗначенияСвойств(СтруктураВозврата,Выборка);
		Возврат СтруктураВозврата;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции	