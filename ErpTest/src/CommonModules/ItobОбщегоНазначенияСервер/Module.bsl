
#Область СлужебныеПроцедурыИФункции

// Функция получения последних привязок терминалов
//
Функция РегистрыСведенийItobПривязкиТерминаловПолучитьПоследнее(пТекущаяДата, пСтруктура)
	Возврат РегистрыСведений.ItobПривязкиТерминалов.ПолучитьПоследнее(пТекущаяДата, пСтруктура);
КонецФункции


// Функция возвращает массив вышестоящих групп указанного элемента.
// 
// Параметры:
//  Элемент      - Элемент справочника, для которого ищется родитель.
//
// Возвращаемое значение
//  Массив вышестоящих групп.
//
Функция ПолучитьВышеСтоящиеГруппы(ЭлементСправочника) Экспорт
	
	Результат = Новый Массив;		
	
	Если НЕ ЗначениеЗаполнено(ЭлементСправочника) Тогда
		Возврат Результат;
	КонецЕсли;
	
	МетаданныеСправочника = ЭлементСправочника.Метаданные();
	Если НЕ МетаданныеСправочника.Иерархический Тогда
		Возврат Результат;
	КонецЕсли;
	ИмяСправочника = МетаданныеСправочника.Имя;	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Справочник1.Родитель КАК Родитель1,
	|	Справочник2.Родитель КАК Родитель2,
	|	Справочник3.Родитель КАК Родитель3,
	|	Справочник4.Родитель КАК Родитель4,
	|	Справочник5.Родитель КАК Родитель5
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК Справочник1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник2
	|		ПО (Справочник2.Ссылка = Справочник1.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник3
	|		ПО (Справочник3.Ссылка = Справочник2.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник4
	|		ПО (Справочник4.Ссылка = Справочник3.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник5
	|		ПО (Справочник5.Ссылка = Справочник4.Родитель)
	|ГДЕ
	|	Справочник1.Ссылка = &Ссылка";
	
	ТекущийЭлемент = ЭлементСправочника;
	
	Пока ЗначениеЗаполнено(ТекущийЭлемент) Цикл		
		Запрос.УстановитьПараметр("Ссылка", ТекущийЭлемент);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() > 0 Тогда
			Выборка.Следующий();
			Для Индекс = 1 По 5 Цикл
				ТекущийЭлемент = Выборка["Родитель" + Индекс];
				Если ЗначениеЗаполнено(ТекущийЭлемент) Тогда
					Результат.Добавить(ТекущийЭлемент);
				Иначе
					Прервать;
				КонецЕсли;				
			КонецЦикла;
		Иначе
			ТекущийЭлемент = Неопределено;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции
 
// Процедура "ОбработчикПриСозданииНаСервереСправочниковВодителиТС".
// При создании на сервере элементов справочников:
// - Водители;
// - Транспортные средства.
//
Процедура ОбработчикПриСозданииНаСервереСправочниковВодителиТС(Отказ, СтандартнаяОбработка, пЭтотОбъект) Экспорт
	
	ЭтаФорма = пЭтотОбъект.ЭтаФорма;
	
	Попытка
		Объект = пЭтотОбъект.Объект;
		
		ОбъектВыборка = ПолучитьНастройкиОтображенияОбъектов(Объект.Ссылка);
			
		пЭтотОбъект.ЦветМаршрутаНаКарте = ОбъектВыборка.ЦветМаршрутаНаКарте;
		пЭтотОбъект.ЦветНадписиНаКарте 	= ОбъектВыборка.ЦветНадписиНаКарте;
		пЭтотОбъект.ИконкаНаКарте 		= ОбъектВыборка.ИконкаНаКарте;
		
		СтруктураПривязки = РегистрыСведенийItobПривязкиТерминаловПолучитьПоследнее(ТекущаяДатаСеанса(), 
			Новый Структура("Объект", Объект.Ссылка ));
		Если СтруктураПривязки.ТерминалУстановлен = Истина Тогда
			ЭтаФорма.Терминал = СтруктураПривязки.Терминал;	
			
		КонецЕсли;
			
	Исключение
		Объект = пЭтотОбъект.Запись;
		
		пЭтотОбъект.ЦветМаршрутаНаКарте = Объект.ЦветМаршрутаНаКарте;
		пЭтотОбъект.ЦветНадписиНаКарте 	= Объект.ЦветНадписиНаКарте;
		пЭтотОбъект.ИконкаНаКарте 		= Объект.ИконкаНаКарте;
	КонецПопытки; 
	
	ЗаполнитьПолеВыбораИконки(ЭтаФорма.Элементы.ПолеВыбораИконки);

КонецПроцедуры

// Процедура заполняет поле выбора иконки.
//
Процедура ЗаполнитьПолеВыбораИконки(ПолеВыбораИконки) Экспорт
	СписокВыбора = ПолеВыбораИконки.СписокВыбора;
	СписокВыбора.Добавить("ItobИконкаАвтомобильЛегковой"   	, НСтр("ru = 'Автомобиль легковой'"));
	СписокВыбора.Добавить("ItobИконкаАвтомобильЗеленый"    	, НСтр("ru = 'Автомобиль зеленый'"));
	СписокВыбора.Добавить("ItobИконкаАвтомобильСпортивный" 	, НСтр("ru = 'Автомобиль спортивный'"));
	СписокВыбора.Добавить("ItobИконкаВертолет"             	, НСтр("ru = 'Вертолет'"));
	СписокВыбора.Добавить("ItobИконкаВрач"           		, НСтр("ru = 'Врач'"));
	СписокВыбора.Добавить("ItobИконкаГрузовик"       		, НСтр("ru = 'Грузовик'"));
	СписокВыбора.Добавить("ItobИконкаГрузовикЖелтый" 		, НСтр("ru = 'Грузовик желтый'"));
	СписокВыбора.Добавить("ItobИконкаКабриолет"      		, НСтр("ru = 'Кабриолет'"));
	СписокВыбора.Добавить("ItobИконкаКорабль"        		, НСтр("ru = 'Корабль'"));
	СписокВыбора.Добавить("ItobИконкаМикроавтобус"   		, НСтр("ru = 'Микроавтобус'"));
	СписокВыбора.Добавить("ItobИконкаМилиционер"     		, НСтр("ru = 'Милиционер'"));
	СписокВыбора.Добавить("ItobИконкаМилиция"        		, НСтр("ru = 'Милиция'"));
	СписокВыбора.Добавить("ItobИконкаПожарнаяМашина" 		, НСтр("ru = 'Пожарная машина'"));
	СписокВыбора.Добавить("ItobИконкаСкораяПомощь"   		, НСтр("ru = 'Скорая помощь'"));
	СписокВыбора.Добавить("ItobИконкаЧеловек"        		, НСтр("ru = 'Человек'"));
КонецПроцедуры
	
// Процедура заполняет поле выбора иконки пунктами назначения.
//
Процедура ЗаполнитьПолеВыбораИконкиПунктовНазначения(ПолеВыбораИконки) Экспорт
	СписокВыбора = ПолеВыбораИконки.СписокВыбора;
	СписокВыбора.Добавить("ItobИконкаКругКрасный"    , НСтр("ru = 'Круг красный'"));
	СписокВыбора.Добавить("ItobИконкаКругЖелтый"     , НСтр("ru = 'Круг желтый'"));
	СписокВыбора.Добавить("ItobИконкаКругЗеленый"    , НСтр("ru = 'Круг зеленый'"));
	СписокВыбора.Добавить("ItobИконкаЗеленаяГалочка" , НСтр("ru = 'Зеленая галочка'"));
	СписокВыбора.Добавить("ItobИконкаДорожныйКонус"  , НСтр("ru = 'Дорожный конус'"));	
	СписокВыбора.Добавить("ItobИконкаВидеокамера"  	 , НСтр("ru = 'Видеокамера'"));	
	СписокВыбора.Добавить("ItobИконкаФотоаппарат"  	 , НСтр("ru = 'Фотоаппарат'"));
КонецПроцедуры

// Процедура "ОбработчикПриЗаписиНаСервереСправочниковВодителиТС".
// При записи на сервере элементов справочников:
// - Водители;
// - Транспортные средства.
//
Процедура ОбработчикПриЗаписиНаСервереСправочниковВодителиТС(пЭтотОбъект, Ссылка) Экспорт
	Выборка = РегистрыСведений.ItobНастройкиОтображенияОбъектов.Выбрать(Новый Структура("Объект", Ссылка));
	Пока Выборка.Следующий() Цикл
		Запись = Выборка.ПолучитьМенеджерЗаписи();
	КонецЦикла;
	Запись = ?(Запись = Неопределено, РегистрыСведений.ItobНастройкиОтображенияОбъектов.СоздатьМенеджерЗаписи(), Запись); 
	Запись.Объект	 		   = Ссылка;
	Запись.ЦветМаршрутаНаКарте = пЭтотОбъект.ЦветМаршрутаНаКарте;
	Запись.ЦветНадписиНаКарте  = пЭтотОбъект.ЦветНадписиНаКарте;
	Запись.ИконкаНаКарте 	   = пЭтотОбъект.ИконкаНаКарте;
	Запись.Записать(Истина);
КонецПроцедуры

// Функция возвращает адрес инсталлятора во временном хранилище.
// - Устаревшая функция
//
Функция ПоместитьИнсталляторВХранилище() Экспорт
	
	Возврат ПоместитьВХранилище("ItobCsmSvcSetup", "ItobCsmSvcSetup.exe");	
	
КонецФункции // ПоместитьИнсталляторВХранилище()

// Процедура очистки регистров сведений ItobГеографическийКлассификатор и ItobКэшГеокодера.
//
Процедура ОчиститьЗаписиРегистров() Экспорт
	
	НаборЗаписей1 = РегистрыСведений.ItobГеографическийКлассификатор.СоздатьНаборЗаписей();
	НаборЗаписей1.Записать();	
	
	НаборЗаписей2 = РегистрыСведений.ItobКэшГеокодера.СоздатьНаборЗаписей();
	НаборЗаписей2.Записать();	
	
КонецПроцедуры

// Функция возвращает адрес файла во временном хранилище
//
Функция ПоместитьВХранилище(МакетНаименование, ФайлНаименование) Экспорт

	Макет = ПолучитьОбщийМакет(МакетНаименование);
	
	ИмяФайла = КаталогВременныхФайлов() + ФайлНаименование;
	
	Макет.Записать(ИмяФайла);
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	
	Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор());	
	
КонецФункции // ПоместитьВХранилище()

// Чтение настроек пользователя
//
Функция ПрочитатьНастройкуПользователя(Раздел, Настройка) Экспорт

	Возврат ХранилищеОбщихНастроек.Загрузить(Раздел, Настройка);	

КонецФункции // ПрочитатьНастройкуПользователя()

// Процедура показывает панель географической карты,
// выполняя при этом необходимые проверки доступности сервиса CsmSvc
//
Процедура ПоказатьГеографическуюКарту(ЭтаФорма, ТекстДопСкрипта) Экспорт
	
	Элементы 		= ЭтаФорма.Элементы;
	КартаДоступна 	= ЭтаФорма.КартаДоступна;
	ВебСсылкаСервер = ЭтаФорма.ВебСсылкаСервер;
	ТекущийМасштаб 	= ЭтаФорма.ТекущийМасштаб;
	ПолеHTML 		= ЭтаФорма.ПолеHTML;
	ТекущийМасштаб 	= ЭтаФорма.ТекущийМасштаб;
	ТекущаяШирота 	= ЭтаФорма.ТекущаяШирота;
	ТекущаяДолгота 	= ЭтаФорма.ТекущаяДолгота;
	
	ОшибкаДоступаНаСервер = Ложь;
	ОписаниеОшибки = "";
			
	Если НЕ ПараметрыСеанса.ItobАдресCsmSvc.Получить("НастройкиОпределены") Тогда
		ОшибкаДоступаНаСервер = Истина;
		ОписаниеОшибки = НСтр("ru = 'Ошибка отображения карты!
						 |В настройках системы не указан адрес сервиса CsmSvc!
						 |Воспользуйтесь мастером настройки службы CsmSvc.'");
		
	ИначеЕсли НЕ ItobОперативныйМониторинг.ПроверитьДоступностьСервисаCsmSvc(
		 ПараметрыСеанса.ItobАдресCsmSvc.Получить("СерверАдрес"), ПараметрыСеанса.ItobАдресCsmSvc.Получить("СерверПорт")) Тогда
		 
		ОшибкаДоступаНаСервер = Истина;
		ОписаниеОшибки = НСтр("ru = 'Ошибка отображения карты!
						 |Сервис CsmSvc не доступен!
						 |Воспользуйтесь мастером настройки службы CsmSvc.'");
						 
	КонецЕсли;
					 
	Если ОшибкаДоступаНаСервер Тогда
		Элементы.НадписьОшибкаОтображенияКарты.Заголовок = ОписаниеОшибки;
		Элементы.ГруппаГеоданные.ТекущаяСтраница = Элементы.ГруппаГеоданные.ПодчиненныеЭлементы["СтраницаОшибкиОтображенияКарты"];
		КартаДоступна = Ложь;
		
	Иначе
		
		СсылкаБазы   = ПолучитьНавигационнуюСсылкуИнформационнойБазы();
		
		// Адреса CsmSvc с клиентской стороны
		АдресСервера = ПараметрыСеанса.ItobАдресCsmSvc.Получить("КлиентАдрес");
		ПортСервера  = Формат(ПараметрыСеанса.ItobАдресCsmSvc.Получить("КлиентПорт"),"ЧГ=0");
		
		Если НРег(Лев(СсылкаБазы,5)) = "https" Тогда
			ВебСсылкаСервер = "https://"+АдресСервера+":"+ПортСервера+"/map/";
		Иначе
			ВебСсылкаСервер = "http://"+АдресСервера+":"+ПортСервера+"/map/";		
		КонецЕсли;		
		
		АтрибутыКарты = "";
		// Необходимо установить координаты по умолчанию
		Если ТекущийМасштаб <> 0 И ТекущаяШирота <> 0 И ТекущаяДолгота <> 0 Тогда
			
			АтрибутыКарты = 
				"firstZoom = "+Формат(ТекущийМасштаб,"ЧГ=0")+";
				|firstLat = "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТекущаяШирота)+";
				|firstLon = "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТекущаяДолгота)+";";			
			
		КонецЕсли;
			
		ИмяСлояПоУмолчанию = ПрочитатьНастройкуПользователя("НастройкиКарты", "КартаПоУмолчанию");
		Если ЗначениеЗаполнено(ИмяСлояПоУмолчанию) Тогда
			АтрибутыКарты = АтрибутыКарты + "
				|firstLayerName = """+ИмяСлояПоУмолчанию+""";";
		
		КонецЕсли;
		
		ПолеHTML = ItobОперативныйМониторинг.ПолучитьАдресКарты(АтрибутыКарты+Символы.ПС+ТекстДопСкрипта);
		
		Элементы.ГруппаГеоданные.ТекущаяСтраница = Элементы.ГруппаГеоданные.ПодчиненныеЭлементы["ГруппаКарта"];
		КартаДоступна = Истина;
	
	КонецЕсли;
	
	ЭтаФорма.КартаДоступна 		= КартаДоступна;
	ЭтаФорма.ВебСсылкаСервер 	= ВебСсылкаСервер;
	ЭтаФорма.ТекущийМасштаб 	= ТекущийМасштаб;
	ЭтаФорма.ПолеHTML 			= ПолеHTML;
	ЭтаФорма.ТекущийМасштаб 	= ТекущийМасштаб;
	ЭтаФорма.ТекущаяШирота 		= ТекущаяШирота;
	ЭтаФорма.ТекущаяДолгота 	= ТекущаяДолгота;
	
КонецПроцедуры

// Функция возвращает значение функции "ТекущаяДатаСеанса()"
//
Функция ПолучитьТекущуюДату() Экспорт
	Возврат ТекущаяДатаСеанса();
КонецФункции // ПолучитьТекущуюДату()

// Функция возвращает дату начала отчетов
//
Функция ПолучитьДатуВремяНачалаОтчетов() Экспорт
	
	Результат = НачалоДня(ТекущаяДатаСеанса());
	
	ВремяНачалаОтчетов = ХранилищеОбщихНастроек.Загрузить("НастройкиЦСМ",   "ВремяНачалаОтчетов");
	Если ЗначениеЗаполнено(ВремяНачалаОтчетов) Тогда
		Результат = Результат + (ВремяНачалаОтчетов - '00010101000000');	
	КонецЕсли;
	
	Если ТекущаяДатаСеанса() < Результат Тогда
		Результат = Результат - 24*3600;	
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции // ПолучитьДатуВремяНачалаОтчетов()

// Процедура запускает процедуру ЗаписьЖурналаРегистрации.
//
// Параметры:
//  ИмяСобытия  			- Строка
//  Комментарий 			- Строка 
//
Процедура ЗаписьЖурналаРегистрацииОшибка(ИмяСобытия, Комментарий) Экспорт
	ЗаписьЖурналаРегистрации(ИмяСобытия,УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
КонецПроцедуры // ЗаписьЖурналаРегистрацииОбщее()

// Функция возвращает данные из регистра сведений "ItobНастройкиОтображенияОбъектов".
//
// Параметры:
//  ИмяСобытия  			- Строка
//  Комментарий 			- Строка 
//
Функция ПолучитьНастройкиОтображенияОбъектов(Ссылка) Экспорт
	ОбъектВыборка = РегистрыСведений.ItobНастройкиОтображенияОбъектов.Выбрать(Новый Структура("Объект", Ссылка));
	Пока ОбъектВыборка.Следующий() Цикл
		Возврат Новый Структура("ЦветМаршрутаНаКарте,ЦветНадписиНаКарте,ИконкаНаКарте",
			 						 ОбъектВыборка.ЦветМаршрутаНаКарте,
									 ОбъектВыборка.ЦветНадписиНаКарте,
									 ?(ОбъектВыборка.ИконкаНаКарте = "", "ItobИконкаЧеловек", ОбъектВыборка.ИконкаНаКарте));
	КонецЦикла;
	Возврат Новый Структура("ЦветМаршрутаНаКарте,ЦветНадписиНаКарте,ИконкаНаКарте",
	 						 0,
							 255,
							 "ItobИконкаЧеловек");
КонецФункции

// Функция возвращает параметры сеанса в виде структуры.
//
Функция ПолучитьItobАдресCsmSvc() Экспорт
	ПараметрыСтруктура = Новый Структура;
	ПараметрыСтруктура.Вставить("НастройкиОпределены", ПараметрыСеанса.ItobАдресCsmSvc.Получить("НастройкиОпределены"));
	ПараметрыСтруктура.Вставить("СерверАдрес", ПараметрыСеанса.ItobАдресCsmSvc.Получить("СерверАдрес"));
	ПараметрыСтруктура.Вставить("СерверПорт", ПараметрыСеанса.ItobАдресCsmSvc.Получить("СерверПорт"));
	ПараметрыСтруктура.Вставить("КлиентАдрес", ПараметрыСеанса.ItobАдресCsmSvc.Получить("КлиентАдрес"));
	ПараметрыСтруктура.Вставить("КлиентПорт", ПараметрыСеанса.ItobАдресCsmSvc.Получить("КлиентПорт"));
	Возврат ПараметрыСтруктура;
КонецФункции

// Процедура записывает параметры сеанса.
//
Процедура УстановитьПараметрыСеанса(ПараметрыСеансаНовые) Экспорт
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("НастройкиОпределены", ПараметрыСеансаНовые.НастройкиОпределены);
	Соответствие.Вставить("СерверАдрес", 		 ПараметрыСеансаНовые.СерверАдрес);
	Соответствие.Вставить("СерверПорт", 		 ПараметрыСеансаНовые.СерверПорт);
	Соответствие.Вставить("КлиентАдрес", 		 ПараметрыСеансаНовые.КлиентАдрес);
	Соответствие.Вставить("КлиентПорт", 		 ПараметрыСеансаНовые.КлиентПорт);
	ItobАдресCsmSvc = Новый ФиксированноеСоответствие(Соответствие);
	ПараметрыСеанса.ItobАдресCsmSvc = ItobАдресCsmSvc;	
КонецПроцедуры

// Функция возвращает общий макет.
// Параметры:
//  ИмяМакета  - Тип строка - имя получаемого макета.
//
// Возвращаемое значение:
//  Табличный документ   - общий макет.
//
Функция ПолучитьМакет(ИмяМакета) Экспорт
	
	Возврат ПолучитьОбщийМакет(ИмяМакета);	
	
КонецФункции // ПолучитьМакет(ИмяМакета)()

#Область ДобавлениеОбъектовНаФорму
	
// Добавляет кнопку на форму
//
Функция ДобавитьКнопкуНаФорму(Форма, Имя, Действие, Родитель = Неопределено, Заголовок = "") Экспорт
	Команда = ДобавитьКомандуНаФорму(Форма, Имя, Действие, Заголовок);
	Элемент = ДобавитьЭлементНаФорму(Форма, Имя, Тип("КнопкаФормы"), Родитель, Команда.Имя, Заголовок);	
	
	Возврат Элемент;
КонецФункции // ДобавитьКнопкуНаФорму()

// Добавляет элемент на форму
//
Функция ДобавитьЭлементНаФорму(Форма, Имя, ТипЭлемента, Родитель, ИмяКоманды = "", Заголовок = "", Картинка = Неопределено) Экспорт
	Элемент = Форма.Элементы.Добавить(Имя, ТипЭлемента, ?(Родитель = Неопределено, Форма, Родитель));
	Элемент.ИмяКоманды = ИмяКоманды;
	Элемент.Заголовок  = Заголовок;
	Элемент.Картинка   = ?(Картинка = Неопределено, Элемент.Картинка, Картинка);

	Возврат Элемент;
КонецФункции // ДобавитьЭлементНаФорму()

// Добавляет группу на форму
//
Функция ДобавитьГруппуНаФорму(Форма, Имя, Родитель = Неопределено, Заголовок = "", Картинка = Неопределено) Экспорт
	Элемент = Форма.Элементы.Добавить(Имя, Тип("ГруппаФормы"), ?(Родитель = Неопределено, Форма, Родитель));
	Элемент.Заголовок  = Заголовок;
	Элемент.Картинка   = ?(Картинка = Неопределено, Элемент.Картинка, Картинка);

	Возврат Элемент;
КонецФункции // ДобавитьЭлементНаФорму()

// Добавляет команду на форму
//
Функция ДобавитьКомандуНаФорму(Форма, Имя, Действие, Заголовок = "") Экспорт
	Команда = Форма.Команды.Добавить(Имя);
	Команда.Действие = Действие;
	Команда.Заголовок = Заголовок;
	
	Возврат Команда;
КонецФункции // ДобавитьКомандуНаФорму()

// Добавляет реквизит на форму
//
Функция ДобавитьРеквизитНаФорму(Форма, Имя, Тип, Путь = "", Заголовок = "", СохраняемыеДанные = Ложь) Экспорт
	НовыеРеквизиты = Новый Массив();
	НовыйРеквизит = Новый РеквизитФормы(Имя, Новый ОписаниеТипов(Тип), Путь, Заголовок, СохраняемыеДанные);
	НовыеРеквизиты.Добавить(НовыйРеквизит);
	Форма.ИзменитьРеквизиты(НовыеРеквизиты);
	
	Возврат НовыйРеквизит;
КонецФункции // ДобавитьКомандуНаФорму()

#КонецОбласти

// Возвращает Истина, если "функциональная" подсистема существует в конфигурации.
// Предназначена для реализации вызова необязательной подсистемы (условного вызова).
//
// У "функциональной" подсистемы снят флажок "Включать в командный интерфейс".
//
// Параметры:
//  ПолноеИмяПодсистемы - Строка - полное имя объекта метаданных подсистема
//                        без слов "Подсистема." и с учетом регистра символов.
//                        Например: "СтандартныеПодсистемы.ВариантыОтчетов".
//
// Пример:
//
//  Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВариантыОтчетов") Тогда
//  	МодульВариантыОтчетов = ОбщегоНазначения.ОбщийМодуль("ВариантыОтчетов");
//  	МодульВариантыОтчетов.<Имя метода>();
//  КонецЕсли;
//
// Возвращаемое значение:
//  Булево.
//
Функция ПодсистемаСуществует(ПолноеИмяПодсистемы) Экспорт
	
	ИменаПодсистем = ItobВызовСервераПовтИсп.ИменаПодсистем();
	Возврат ИменаПодсистем.Получить(ПолноеИмяПодсистемы) <> Неопределено;
	
КонецФункции // ПодсистемаСуществует()
 
Функция ПолучитьКартинкуИзБиблиотеки(Картинка) Экспорт
	Результат = Неопределено;
		
	Попытка
		Результат = БиблиотекаКартинок[Картинка];
	Исключение
		Результат = БиблиотекаКартинок.Остановить;
	КонецПопытки;  
	
	Возврат Результат;
КонецФункции // ПолучитьКартинкуИзБиблиотеки()

Функция ВыборкаСледующий(Знач Выборка) Экспорт
	Пока Выборка.Следующий() Цикл
		Возврат Истина;
	КонецЦикла;	
	Возврат Ложь;
КонецФункции // ЕслиВыборкаПустая()

#КонецОбласти
