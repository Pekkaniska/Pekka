////////////////////////////////////////////////////////////////////////////////
// Управление автотранспортом.
// 
// Процедуры и функции общего назначения.
////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ РАБОТЫ С ВРЕМЕНЕМ

//Функция преобразует тип Дата в тип Число в формате ЧЧ.ММ
//
Функция уатВремяВЧЧ_ММ(Время) Экспорт
	
	Часы = Цел(Время / 3600);
	//Минуты = Цел((Время - (Часы * 3600))/60)/100;
	Минуты = Окр((Время - (Часы * 3600))/60)/100;
	Результат = Часы + Минуты;
	Возврат Результат;
	
КонецФункции

//Функция преобразует тип Число в формате ЧЧ.ММ в количество секунд
//
Функция уатВремяВСекунды(Время) Экспорт
	Часы = Цел(Время);
	Минуты = (Время - Часы) * 100;
	Результат = Часы * 3600 + Минуты * 60;
	Возврат Результат;
КонецФункции	

//Функция преобразует тип Число в формате ЧЧ.ДЕСЯТЫЕ ДОЛИ ЧАСА в количество секунд
//
Функция уатПоказанияСчетчикаВСекунды(Время) Экспорт
	
	Часы = Цел(Время);
	Минуты = (Время - Часы) * 60;
	Результат = Часы * 3600 + Минуты * 60;
	Возврат Результат;
КонецФункции	

// Преобразует время из представления в виде строки в число
//
// Параметры:
//  Время        - Строка - Строковое представление времени
//
// Возвращаемое значение:
//  Время - Число 5.2 - Время в виде числа
Функция уатВремяСтрокаВЧисло(Время) Экспорт
	
	Поз = Найти(Время,":");
	Если НЕ Поз тогда
		Возврат 0;
	КонецЕсли;
	ЦелЧасть = Число(Лев(Время,Поз-1));
	ДробЧасть = Число(Сред(Время,Поз+1,6)) / 60;
	Возврат ЦелЧасть + ДробЧасть; 	
	
КонецФункции

// Преобразует время из числового представления в строковое
//
// Параметры:
//  Время        - Число - числовое представление времени
//
// Возвращаемое значение
//  Время - Строка - Время в виде строки
Функция уатВремяЧислоВСтрока(Время) Экспорт
	
	ЦелЧасть = Цел(Время);
	ДробЧасть = (Время - ЦелЧасть) * 60;
	Возврат Строка(ЦелЧасть) + ":" + Строка(Окр(ДробЧасть,0));
	
КонецФункции

// Форматирует выводимое время в отчетах.
//Переводит время в сотых долях часа во время в формате Часы:Минуты
// Параметры:
//  ДатаВремяЧисло - Число - время в часах и сотых долях часа
// Возвращаемое значение:
//	В зависимости от настроек УАТ - Время в часах и минутах (ЧЧ:мм) или время во входящем формате (не изменяется)
//
Функция уатФорматироватьВремяВОтчетах(ДатаВремяЧисло, ФорматПоУмолчанию = Неопределено, Права = Неопределено) Экспорт
	Если НЕ уатПраваИНастройки.уатПраво("ФорматироватьВремяВОтчетах", Права) Тогда
		Если ФорматПоУмолчанию <> Неопределено Тогда
			Возврат Формат(ДатаВремяЧисло, ФорматПоУмолчанию);
		КонецЕсли;
		
		Возврат ДатаВремяЧисло;
	КонецЕсли;
	
	Если ДатаВремяЧисло = 0 ИЛИ ДатаВремяЧисло = Null Тогда
		СтрокаЧМ = 0;
	Иначе
		СтрокаЧМ = "" + Цел(ДатаВремяЧисло) + ":" + 
			Прав(Формат(Окр((ДатаВремяЧисло - Цел(ДатаВремяЧисло))/10*6, 2), "ЧДЦ=2; ЧН=00"), 2);
	КонецЕсли;
	
	Возврат СтрокаЧМ;
КонецФункции

// Функция удаляет секунды из даты
//
Функция уатДатаБезСекунд(ДатаИВремя) Экспорт
	Рез = НачалоДня(ДатаИВремя) + Час(ДатаИВремя)*3600 + Минута(ДатаИВремя)*60;
	Возврат Рез;
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ПРЕДСТАВЛЕНИЯ СПРАВОЧНИКОВ

// Получает представление для транспортного средства в зависимости от его параметров
//
// Параметры:
//  ТС - Транспортное средство для которого необходиом получить представление
//  УчетнаяПолитика - учетная политика
//
// Возвращаемое значение:
//  Результат - Строка - Представление ТС
Функция уатПредставлениеТС(ТС, Организация = Неопределено) Экспорт
	Если ТипЗнч(Организация) = Тип("Структура") Тогда
		мОрг = Организация.Организация;
	Иначе
	    мОрг = Организация;
	КонецЕсли;
		
	Если ТипЗнч(ТС) = Тип("СправочникСсылка.ТранспортныеСредства") Тогда
		Если ТС.уатВидМоделиТС = Перечисления.уатВидыМоделейТС.Автотранспорт
			ИЛИ ТС.уатВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
			
			Если мОрг = Неопределено ИЛИ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(мОрг,
					ПланыВидовХарактеристик.уатПраваИНастройки.ПредставлениеТСКакГосНомер) Тогда
				Результат = ТС.Код;
			Иначе
				Результат = ТС.уатГаражныйНомер;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Результат) Тогда
				Результат = ТС.Наименование;
			КонецЕсли;
		Иначе
			Результат = ТС.Наименование;
		КонецЕсли;
	ИначеЕсли (ТС <> Неопределено) и (ТС <> NULL) Тогда      
		результат = СокрЛП(ТС.Наименование);
		рсТС = ТС;
	Иначе
		результат = "";
	КонецЕсли;
	
	Возврат результат; 
КонецФункции

// Получает представление модели для переданного объекта.
//
// Параметры:
//  ТС           - Справочник.ТранспортныеСредства,
//               Справочник.уатОборудованиеТС, Справочник.уатМоделиТС - 
//               Объект, представление модели которого, необходиом получить.
//
// Возвращаемое значение:
//  Результат - Строка - Представление ТС
Функция уатПредставлениеМоделиТС(ТС) Экспорт
	Если НЕ ЗначениеЗаполнено(ТС) Тогда
		Результат = "";
	ИначеЕсли ТипЗнч(ТС) = Тип("СправочникСсылка.ТранспортныеСредства") Тогда
		Если ЗначениеЗаполнено(ТС.уатМодель) Тогда
			Результат = ТС.уатМодель.Наименование;
		Иначе   
			Результат = "";
		КонецЕсли;
	ИначеЕсли ТипЗнч(ТС) = Тип("СправочникСсылка.уатМоделиТС") Тогда
		Результат = ТС.Наименование;
	Иначе 
		Результат = "";
		сообщить("В процедуру <уатПредставлениеМоделиТС> передано неправильное значение!");
	КонецЕсли;
	Возврат результат;
КонецФункции

// Функция выполняет проверку, является ли переданное ТС автотранспортом.
//
// Параметры:
//  ТС           - Проверяемое транспортное средство
//
// Возвращаемое значение:
//  Результат - Булево - Результат проверки
Функция уатЭтоТС(ТС) Экспорт
	Если ТС = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ТС) тогда
		Возврат ЛожЬ;
	КонецЕсли;
	Если ТС.уатВидМоделиТС = Перечисления.уатВидыМоделейТС.Автотранспорт ИЛИ 
			ТС.уатВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
		результат = Истина; 
	Иначе	 
		результат = Ложь;
	КонецЕсли;
	Возврат результат;
КонецФункции	


////////////////////////////////////////////////////////////////////////////////
// ШИНЫ, АККУМУЛЯТОРЫ И ПРОЧИЕ АГРЕГАТЫ

//Возвращает таблицу установленных шин
//
Функция уатШиныТС(ТС, Дата = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТС",          ТС);
	Запрос.УстановитьПараметр("ТипАгрегата", Справочники.уатТипыАгрегатов.Шина);
	Запрос.УстановитьПараметр("Дата",        ?(Дата = Неопределено, ТекущаяДата(), Дата));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатУстановленныеАгрегатыСрезПоследних.Период КАК ДатаУстановки,
	|	уатУстановленныеАгрегатыСрезПоследних.СостояниеАгрегата КАК Состояние,
	|	уатУстановленныеАгрегатыСрезПоследних.ТранспортноеСредство КАК ТС,
	|	уатУстановленныеАгрегатыСрезПоследних.УзелОбъектаЭксплуатации КАК УзелОбъектаЭксплуатации,
	|	уатУстановленныеАгрегатыСрезПоследних.УзелОбъектаЭксплуатации.СерийныйНомер КАК СерийныйНомер,
	|	уатУстановленныеАгрегатыСрезПоследних.МестоУстановки КАК МестоУстановки,
	|	ЕСТЬNULL(уатАгрегатыТС.МодельАгрегата, ЗНАЧЕНИЕ(Справочник.уатМоделиАгрегатов.ПустаяСсылка)) КАК Модель,
	|	ЕСТЬNULL(уатАгрегатыТС.МодельАгрегата.Производитель, """") КАК Производитель,
	|	ЕСТЬNULL(уатАгрегатыТС.МодельАгрегата.Наименование, """") КАК Характеристики,
	|	ЕСТЬNULL(уатАгрегатыТС.ПервоначальнаяСтоимость, 0) КАК ПервоначальнаяСтоимость
	|ИЗ
	|	РегистрСведений.уатУстановленныеАгрегаты.СрезПоследних(&Дата, ) КАК уатУстановленныеАгрегатыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатАгрегатыТС КАК уатАгрегатыТС
	|		ПО уатУстановленныеАгрегатыСрезПоследних.УзелОбъектаЭксплуатации = уатАгрегатыТС.УзелОбъектаЭксплуатации
	|			И уатУстановленныеАгрегатыСрезПоследних.ТипАгрегата = уатАгрегатыТС.ТипАгрегата
	|ГДЕ
	|	уатУстановленныеАгрегатыСрезПоследних.ТранспортноеСредство В(&ТС)
	|	И уатУстановленныеАгрегатыСрезПоследних.ТипАгрегата = &ТипАгрегата";
	
	РезультатТаблица = Запрос.Выполнить().Выгрузить();
	
	//удалим из таблицы результата снятые агрегаты
	СписокСостоянийАгрегата = Новый СписокЗначений();
	СписокСостоянийАгрегата.Добавить(Перечисления.уатСостоянияАгрегатов.УстановленоВЗапас);
	СписокСостоянийАгрегата.Добавить(Перечисления.уатСостоянияАгрегатов.УстановленоВРаботе);
	Сч = РезультатТаблица.Количество()-1;
	Пока Сч >= 0 Цикл
		Если СписокСостоянийАгрегата.НайтиПоЗначению(РезультатТаблица[Сч].Состояние) = Неопределено Тогда
			РезультатТаблица.Удалить(Сч);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
	Возврат РезультатТаблица;
	
КонецФункции // уатШиныТС

//Процедура возвращает состояние шины
//
Функция уатСостояниеШины(УзелОбъектаЭксплуатации, мДата) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаУстановки",           мДата);
	Запрос.УстановитьПараметр("УзелОбъектаЭксплуатации", УзелОбъектаЭксплуатации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	уатУстановленныеАгрегатыСрезПоследних.СостояниеАгрегата,
	|	уатУстановленныеАгрегатыСрезПоследних.ТранспортноеСредство КАК ТС,
	|	уатУстановленныеАгрегатыСрезПоследних.УзелОбъектаЭксплуатации
	|ИЗ
	|	РегистрСведений.уатУстановленныеАгрегаты.СрезПоследних(
	|		&ДатаУстановки,
	|		УзелОбъектаЭксплуатации = &УзелОбъектаЭксплуатации) КАК уатУстановленныеАгрегатыСрезПоследних";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Количество() > 0 Тогда
		РезультатЗапроса.Следующий();
		Результат = РезультатЗапроса.СостояниеАгрегата;
	Иначе
		Результат = Перечисления.уатСостоянияАгрегатов.Снято;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Возвращает таблицу установленных аккумуляторов
//
Функция уатАккумуляторыТС(ТС, Дата = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТС",          ТС);
	Запрос.УстановитьПараметр("ТипАгрегата", Справочники.уатТипыАгрегатов.Аккумулятор);
	Запрос.УстановитьПараметр("Дата",        ?(Дата = Неопределено, ТекущаяДата(), Дата));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатУстановленныеАгрегатыСрезПоследних.Период КАК ДатаУстановки,
	|	уатУстановленныеАгрегатыСрезПоследних.СостояниеАгрегата КАК Состояние,
	|	уатУстановленныеАгрегатыСрезПоследних.ТранспортноеСредство КАК ТС,
	|	уатУстановленныеАгрегатыСрезПоследних.УзелОбъектаЭксплуатации КАК УзелОбъектаЭксплуатации,
	|	уатУстановленныеАгрегатыСрезПоследних.УзелОбъектаЭксплуатации.СерийныйНомер КАК СерийныйНомер,
	|	уатУстановленныеАгрегатыСрезПоследних.МестоУстановки КАК МестоУстановки,
	|	уатАгрегатыТС.МодельАгрегата КАК Модель,
	|	уатАгрегатыТС.МодельАгрегата.Емкость КАК Емкость
	|ИЗ
	|	РегистрСведений.уатУстановленныеАгрегаты.СрезПоследних(&Дата, ) КАК уатУстановленныеАгрегатыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатАгрегатыТС КАК уатАгрегатыТС
	|		ПО уатУстановленныеАгрегатыСрезПоследних.УзелОбъектаЭксплуатации = уатАгрегатыТС.УзелОбъектаЭксплуатации
	|			И уатУстановленныеАгрегатыСрезПоследних.ТипАгрегата = уатАгрегатыТС.ТипАгрегата
	|ГДЕ
	|	уатУстановленныеАгрегатыСрезПоследних.ТранспортноеСредство В(&ТС)
	|	И уатУстановленныеАгрегатыСрезПоследних.ТипАгрегата = &ТипАгрегата";
	
	РезультатТаблица = Запрос.Выполнить().Выгрузить();
	
	//удалим из таблицы результата снятые агрегаты
	СписокСостоянийАгрегата = Новый СписокЗначений();
	СписокСостоянийАгрегата.Добавить(Перечисления.уатСостоянияАгрегатов.УстановленоВЗапас);
	СписокСостоянийАгрегата.Добавить(Перечисления.уатСостоянияАгрегатов.УстановленоВРаботе);
	Сч = РезультатТаблица.Количество()-1;
	Пока Сч >= 0 Цикл
		Если СписокСостоянийАгрегата.НайтиПоЗначению(РезультатТаблица[Сч].Состояние) = Неопределено Тогда
			РезультатТаблица.Удалить(Сч);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
	Возврат РезультатТаблица;
	
КонецФункции // уатАккумуляторыТС

//Процедура возвращает состояние шины
//
Функция уатСостояниеАккумулятора(УзелОбъектаЭксплуатации, мДата) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаУстановки",           мДата);
	Запрос.УстановитьПараметр("УзелОбъектаЭксплуатации", УзелОбъектаЭксплуатации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	уатУстановленныеАгрегатыСрезПоследних.СостояниеАгрегата,
	|	уатУстановленныеАгрегатыСрезПоследних.ТранспортноеСредство КАК ТС
	|ИЗ
	|	РегистрСведений.уатУстановленныеАгрегаты.СрезПоследних(&ДатаУстановки, УзелОбъектаЭксплуатации = &УзелОбъектаЭксплуатации) КАК уатУстановленныеАгрегатыСрезПоследних";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Количество() > 0 Тогда
		РезультатЗапроса.Следующий();
		Результат = РезультатЗапроса.СостояниеАгрегата;
	Иначе
		Результат = Перечисления.уатСостоянияАгрегатов.Снято;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Возвращает таблицу установленных прочих агрегатов
//
Функция уатПрочиеАгрегатыТС(ТС, Дата = Неопределено) Экспорт
	
	СписокСостоянийАгрегата = Новый СписокЗначений();
	СписокСостоянийАгрегата.Добавить(Перечисления.уатСостоянияАгрегатов.УстановленоВЗапас);
	СписокСостоянийАгрегата.Добавить(Перечисления.уатСостоянияАгрегатов.УстановленоВРаботе);
	
	СписокТиповАгрегата = Новый СписокЗначений();
	СписокТиповАгрегата.Добавить(Справочники.уатТипыАгрегатов.Шина);
	СписокТиповАгрегата.Добавить(Справочники.уатТипыАгрегатов.Аккумулятор);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТС",                              ТС);
	Запрос.УстановитьПараметр("СостояниеАгрегата",               СписокСостоянийАгрегата);
	Запрос.УстановитьПараметр("ТипыАгрегатовШинаИлиАккумулятор", СписокТиповАгрегата);
	Запрос.УстановитьПараметр("Дата",                            ?(Дата = Неопределено, ТекущаяДата(), Дата));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатУстановленныеАгрегатыСрезПоследних.Период КАК ДатаУстановки,
	|	уатУстановленныеАгрегатыСрезПоследних.СостояниеАгрегата КАК Состояние,
	|	уатУстановленныеАгрегатыСрезПоследних.ТранспортноеСредство КАК ТС,
	|	уатУстановленныеАгрегатыСрезПоследних.УзелОбъектаЭксплуатации КАК УзелОбъектаЭксплуатации,
	|	уатУстановленныеАгрегатыСрезПоследних.УзелОбъектаЭксплуатации.СерийныйНомер КАК СерийныйНомер,
	|	уатУстановленныеАгрегатыСрезПоследних.МестоУстановки КАК МестоУстановки,
	|	уатАгрегатыТС.МодельАгрегата КАК Модель
	|ИЗ
	|	РегистрСведений.уатУстановленныеАгрегаты.СрезПоследних(&Дата, ) КАК уатУстановленныеАгрегатыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатАгрегатыТС КАК уатАгрегатыТС
	|		ПО уатУстановленныеАгрегатыСрезПоследних.УзелОбъектаЭксплуатации = уатАгрегатыТС.УзелОбъектаЭксплуатации
	|ГДЕ
	|	уатУстановленныеАгрегатыСрезПоследних.СостояниеАгрегата В(&СостояниеАгрегата)
	|	И уатУстановленныеАгрегатыСрезПоследних.ТранспортноеСредство В(&ТС)
	|	И НЕ уатУстановленныеАгрегатыСрезПоследних.ТипАгрегата В (&ТипыАгрегатовШинаИлиАккумулятор)";
	
	РезультатТаблица = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатТаблица;
	
КонецФункции // уатПрочиеАгрегатыТС

// Возвращает список ссылок на элементы справочника Серийные номера по переданному списку с/н
// 
// Параметры:
//  СписокСерийныхНомеров - список серийных номеров
//
// Возвращаемое значение:
//  Список ссылок на элементы справочинка
Функция ПолучитьСписокАгрегатовПоСерийнымНомерам(СписокСерийныхНомеров) Экспорт
	
	мЗапрос = новый Запрос;
	мЗапрос.Текст = 
	"ВЫБРАТЬ
	|	СерииНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ
	|	СерииНоменклатуры.Номер В (&СерийныйНомер)";
	мЗапрос.УстановитьПараметр("СерийныйНомер",СписокСерийныхНомеров);
	СписокСсылок = новый СписокЗначений;
	СписокСсылок.ЗагрузитьЗначения(мЗапрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	Возврат СписокСсылок;
КонецФункции

// Функция предназначена для формирования наименования агрегата 
// с учетом настройки формирования наименования агрегатов.
//
Функция СформироватьНаименованиеАгрегата(Знач УзелЭксплуатации) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("УзелОбъектаЭксплуатации", УзелЭксплуатации);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	уатАгрегатыТС.ТипАгрегата КАК ТипАгрегата,
	|	уатАгрегатыТС.МодельАгрегата КАК МодельАгрегата,
	|	УзлыОбъектовЭксплуатации.СерийныйНомер КАК СерийныйНомер,
	|	уатАгрегатыТС.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	|	уатАгрегатыТС.Валюта КАК Валюта,
	|	уатАгрегатыТС.НачалоЭксплуатации КАК НачалоЭксплуатации,
	|	уатАгрегатыТС.ГоденДо КАК ГоденДо,
	|	уатАгрегатыТС.ПараметрВыработки КАК ПараметрВыработки,
	|	уатАгрегатыТС.ДатаПроизводстваШины КАК ДатаПроизводстваШины,
	|	уатАгрегатыТС.СрокСлужбыШины КАК СрокСлужбыШины
	|ИЗ
	|	РегистрСведений.уатАгрегатыТС КАК уатАгрегатыТС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УзлыОбъектовЭксплуатации КАК УзлыОбъектовЭксплуатации
	|		ПО (уатАгрегатыТС.УзелОбъектаЭксплуатации = &УзелОбъектаЭксплуатации)
	|			И уатАгрегатыТС.УзелОбъектаЭксплуатации = УзлыОбъектовЭксплуатации.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		СтруктураАгрегата = Новый Структура();
		СтруктураАгрегата.Вставить("ТипАгрегата",             Выборка.ТипАгрегата);
		СтруктураАгрегата.Вставить("Модель",                  Выборка.МодельАгрегата);
		СтруктураАгрегата.Вставить("СерийныйНомер",           Выборка.СерийныйНомер);
		СтруктураАгрегата.Вставить("ПервоначальнаяСтоимость", Выборка.ПервоначальнаяСтоимость);
		СтруктураАгрегата.Вставить("Валюта",                  Выборка.Валюта);
		СтруктураАгрегата.Вставить("НачалоЭксплуатации",      Выборка.НачалоЭксплуатации);
		СтруктураАгрегата.Вставить("ГоденДо",                 Выборка.ГоденДо);
		СтруктураАгрегата.Вставить("ПараметрВыработки",       Выборка.ПараметрВыработки);
		СтруктураАгрегата.Вставить("ДатаПроизводстваШины",    Выборка.ДатаПроизводстваШины);
		СтруктураАгрегата.Вставить("СрокСлужбыШины",          Выборка.СрокСлужбыШины);
		
		Возврат РегистрыСведений.уатАгрегатыТС.СформироватьНаименованиеАгрегата(СтруктураАгрегата);
		
	Иначе 
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Функция предназначена для получения наименования модели агрегата.
//
Функция СформироватьНаименованиеМоделиАгрегата(Знач УзелЭксплуатации) Экспорт 
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("УзелОбъектаЭксплуатации", УзелЭксплуатации);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	уатМоделиАгрегатов.Наименование КАК НаименованиеМоделиАгрегата
	|ИЗ
	|	РегистрСведений.уатАгрегатыТС КАК уатАгрегатыТС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатМоделиАгрегатов КАК уатМоделиАгрегатов
	|		ПО (уатАгрегатыТС.УзелОбъектаЭксплуатации = &УзелОбъектаЭксплуатации)
	|			И уатАгрегатыТС.МодельАгрегата = уатМоделиАгрегатов.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.НаименованиеМоделиАгрегата;
		
	Иначе 
		Возврат "";
	КонецЕсли;
	
КонецФункции // СформироватьНаименованиеМоделиАгрегата()


////////////////////////////////////////////////////////////////////////////////
// ТРАНСПОРТНЫЕ СРЕДСТВА И МОДЕЛИ

// Функция вычисляет разность показаний счетчика транспортного средства
//
// Параметры:
//  СчетчикВыезда - значение счетчика перед выездом
//  СчетчикВозвращения - значение счетчика по возвращению
//
// Возвращаемое значение
//  Результат - число - разность показаний
Функция уатРазностьПоказанийСчетчика(СчетчикВыезда, СчетчикВозвращения) ЭКСПОРТ
	Перем чРазностьПоказаний;
	Перем чИнд;
	Перем чМаксСчетчик;
	Перем чКоличЗнаков;
	
	чРазностьПоказаний = СчетчикВозвращения - СчетчикВыезда;
	
	Если чРазностьПоказаний < 0 Тогда
		чКоличЗнаков = СтрДлина(Формат(Цел(СчетчикВыезда), "ЧГ="));
		Если чКоличЗнаков > 0 Тогда
			Результат = Pow(10, чКоличЗнаков)  + чРазностьПоказаний;
		Иначе
			Результат = 0;
		КонецЕсли;	
	Иначе
		Результат = чРазностьПоказаний;	
	КонецЕсли;
	
	Возврат Результат;
КонецФункции // глПробегПоСпидометру       

//Функция возвращает список значений, заполненный номенклатурой топлива
//
Функция уатПолучитьНормыРасходаГСМ(МодельТС, ЗаданнаяДата, ГСМ) ЭКСПОРТ
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НормыРасходаГСМ.*
	|ИЗ
	|	РегистрСведений.уатНормыРасходаГСМ.СрезПоследних(
	|		&Период,
	|		МодельТС = &МодельТС
	|		    И ГСМ В (&СписокГСМ)) КАК НормыРасходаГСМ";
	
	ТаблицаГСМ 			= уатПолучитьАналогиГСМ(ГСМ, Перечисления.уатГруппыГСМ.Топливо);
	
	СписокГСМ = Новый СписокЗначений;
	СписокГСМ.Добавить(ГСМ);
	
	////добавление норм на аналоги
	//Для Каждого ТекСтрока Из ТаблицаГСМ Цикл
	//	СписокГСМ.Добавить(ТекСтрока.Аналог);
	//КонецЦикла;
	
	Запрос.УстановитьПараметр("МодельТС", МодельТС);
	Запрос.УстановитьПараметр("СписокГСМ", СписокГСМ);
	Запрос.УстановитьПараметр("Период", ЗаданнаяДата);
	
	РезЗапроса = Запрос.Выполнить();
	Выборка = РезЗапроса.Выбрать();
	НормаРасхода = Новый Структура;
	
	Выборка.Следующий();
	Для каждого ТекКолонка ИЗ РезЗапроса.Колонки Цикл
		Если ТекКолонка.Имя = "ГСМ" И НЕ ЗначениеЗаполнено(Выборка["ГСМ"]) тогда
			НормаРасхода.Вставить( "ГСМ", Справочники.Номенклатура.ПустаяСсылка());	
			Продолжить;
		КонецЕсли;
		Если НЕ МодельТС.НаличиеСпидометра И ТекКолонка.Имя = "ЛинейнаяНорма" И 
				НЕ ЗначениеЗаполнено(Выборка["ЛинейнаяНорма"]) тогда
			НормаРасхода.Вставить("ЛинейнаяНорма", 0.0001);	
			Продолжить;
		КонецЕсли;
		НормаРасхода.Вставить( ТекКолонка.Имя, ?(ЗначениеЗаполнено(Выборка[ТекКолонка.Имя]),Выборка[ТекКолонка.Имя],0));
	КонецЦикла;
	
	Возврат НормаРасхода;
		
КонецФункции // уатПолучитьНормыРасходаГСМ       

//Возвращает показания спидометра
// Параметры: 	ТС - ссылка на справочник ОС
//				ИмяРеквизита - строка
//					ГаражныйНомер
//					ГосударственныйНомер
//					Модель
//					VIN
//					МодельДвигателя
//					МощностьДвигателяЛС
//					МощностьДвигателяКВт
//					НомерДвигателя
//					НомерКузова
//					НомерШасси
//					ЦветКузова
//					СобственныйВес
//					ОсновноеУсловиеРаботы
//					ОсновнойРежимРаботы
//					ГабаритныйРазмерДлина
//					ГабаритныйРазмерВысота
//					ГабаритныйРазмерШирина
// Возвращаемое значение: ЗначениеРеквизита
Функция уатТекущийСпидометр(ТС, ТекДата) ЭКСПОРТ
	Возврат РегистрыСведений.уатСчетчикиТС.ПолучитьСчетчик(ТекДата, ТС, Перечисления.уатТипыСчетчиковТС.Спидометр);
КонецФункции // уатТекущийСпидометр       

//Возвращает показания счетчика моточасов
// Параметры: 	ТС - ссылка на справочник ОС
//				ИмяРеквизита - строка
//					ГаражныйНомер
//					ГосударственныйНомер
//					Модель
//					VIN
//					МодельДвигателя
//					МощностьДвигателяЛС
//					МощностьДвигателяКВт
//					НомерДвигателя
//					НомерКузова
//					НомерШасси
//					ЦветКузова
//					СобственныйВес
//					ОсновноеУсловиеРаботы
//					ОсновнойРежимРаботы
//					ГабаритныйРазмерДлина
//					ГабаритныйРазмерВысота
//					ГабаритныйРазмерШирина
// Возвращаемое значение: ЗначениеРеквизита
Функция уатТекущийСчетчикМЧ(ТС, ТекДата) ЭКСПОРТ
	Возврат РегистрыСведений.уатСчетчикиТС.ПолучитьСчетчик(ТекДата, ТС, Перечисления.уатТипыСчетчиковТС.СчетчикМЧ);
КонецФункции // уатТекущийСпидометр       

// Функция возвращает список (массив) основных средств и оборудования входящего в состав
// транспортного средства.
//
// Параметры:
//  ТС - транспортное средство для которого необходимо получить состав
//
// Возвращаемое значение:
//  мсвСостав - массив, содержащий состав ТС
Функция уатСоставТС(ТС, мсвСостав = Неопределено, знач ТСнач = Неопределено) ЭКСПОРТ
	//запоминаем главное ТС
	Если ТСнач = Неопределено Тогда
		ТСнач = ТС;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоставТС.ТС КАК ТС
	|ИЗ
	|	РегистрСведений.уатСоставТС КАК СоставТС
	|
	|ГДЕ
	|	СоставТС.ВСоставе = &ТС";
	
	Запрос.УстановитьПараметр("ТС", ТС);
	РезультатСостав = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ТС");
	
	Если мсвСостав = Неопределено Тогда
		мсвСостав = РезультатСостав;
	Иначе	
		Для Каждого ТекТС Из РезультатСостав Цикл
			//делаем проверку на бесконечную рекурсию, когда в регистре состав ТС указаны ТС1 в составе ТС2 и ТС2 в составе ТС1
			Если ТекТС = ТСнач Тогда
				Продолжить;
			КонецЕсли;
			
			мсвСостав.Добавить(ТекТС);
		КонецЦикла;	
	КонецЕсли;	
	Для Каждого ТекТС Из РезультатСостав Цикл
		//делаем проверку на бесконечную рекурсию, когда в регистре состав ТС указаны ТС1 в составе ТС2 и ТС2 в составе ТС1
		Если ТекТС = ТСнач Тогда
			Продолжить;
		КонецЕсли;
			
		уатСоставТС(ТекТС, мсвСостав, ТСнач);
	КонецЦикла;
	
	Возврат мсвСостав;
КонецФункции // уатСоставТС       

// Функция проверяет действительность документов на ТС
//
Функция уатПросроченныеДокументыТС(вхДата, вхДопускДней, вхТС, выхТаблицаДокументов = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =	"ВЫБРАТЬ
	|	уатДокументыТС.ВидДокумента,
	|	уатДокументыТС.Номер,
	|	уатДокументыТС.ДатаВыдачи,
	|	уатДокументыТС.ДатаОкончания,
	|	уатДокументыТС.Архив
	|ИЗ
	|	РегистрСведений.уатДокументыТС КАК уатДокументыТС
	|ГДЕ
	|	уатДокументыТС.ДатаОкончания <= &ДатаОкончания
	|	И уатДокументыТС.ТС = &ТС
	|	И уатДокументыТС.Архив = &Архив
	|	И уатДокументыТС.ДатаОкончания <> &ПустаяДата";
	
	Запрос.УстановитьПараметр("ДатаОкончания", вхДата + вхДопускДней * 24 * 60 * 60);		
	Запрос.УстановитьПараметр("ПустаяДата", Дата("00010101000000"));		
	Запрос.УстановитьПараметр("ТС", вхТС);		
	Запрос.УстановитьПараметр("Архив", Ложь);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() > 0 Тогда
		Результат = Истина;
		выхТаблицаДокументов = РезультатЗапроса;
	Иначе	
		Результат = Ложь;
	КонецЕсли;
	Возврат Результат;
КонецФункции // уатПросроченныеДокументыТС()

// Возвращает таблицу пут. листов
//
Функция уатПутевыеЛисты(ТС, ДатаНач, ДатаКон, НомерПЛ = Неопределено, Рассчитан = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("ТС", ТС);
	
	//Запрос.Текст = "ВЫБРАТЬ
	//|	уатПутевойЛист.Ссылка
	//|ИЗ
	//|	Документ.уатПутевойЛист КАК уатПутевойЛист
	//|ГДЕ
	//|	(НЕ уатПутевойЛист.ПометкаУдаления)
	//|	И (уатПутевойЛист.ДатаВозвращения МЕЖДУ &ДатаНач И &ДатаКон
	//|			ИЛИ уатПутевойЛист.ДатаВыезда МЕЖДУ &ДатаНач И &ДатаКон)
	//|	И (уатПутевойЛист.ТранспортноеСредство = &ТС
	//|	ИЛИ уатПутевойЛист.Прицепы.ТС.уатМодель.НаличиеТопливногоБака И уатПутевойЛист.Прицепы.ТС = &ТС
	//|	ИЛИ уатПутевойЛист.Задание.Прицеп1.уатМодель.НаличиеТопливногоБака И уатПутевойЛист.Задание.Прицеп1 = &ТС
	//|	ИЛИ уатПутевойЛист.Задание.Прицеп2.уатМодель.НаличиеТопливногоБака И уатПутевойЛист.Задание.Прицеп2 = &ТС)";
	//
	//Если НомерПЛ <> Неопределено Тогда
	//	Запрос.Текст = СокрЛП(Запрос.Текст)	+ " И
	//	|	уатПутевойЛист.Номер = &НомерПЛ";
	//КонецЕсли;
	//
	//Если Рассчитан <> Неопределено Тогда
	//	Запрос.Текст = СокрЛП(Запрос.Текст)	+ " И
	//	|	уатПутевойЛист.Рассчитан = &Рассчитан";
	//	Запрос.УстановитьПараметр("Рассчитан", Рассчитан);
	//КонецЕсли;
	//
	//Запрос.Текст = СокрЛП(Запрос.Текст)	+ "
	//|УПОРЯДОЧИТЬ ПО
	//|	уатПутевойЛист.ДатаВыезда";
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПутевойЛист.Ссылка КАК Ссылка,
	|	уатПутевойЛист.ДатаВыезда КАК ДатаВыезда,
	|	уатПутевойЛист.Рассчитан КАК Рассчитан,
	|	уатПутевойЛист.Номер КАК Номер
	|ПОМЕСТИТЬ ВТПутевыеЛисты
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|ГДЕ
	|	НЕ уатПутевойЛист.ПометкаУдаления
	|	И уатПутевойЛист.ТранспортноеСредство = &ТС
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	уатПутевойЛистПрицепы.Ссылка,
	|	уатПутевойЛистПрицепы.Ссылка.ДатаВыезда,
	|	уатПутевойЛистПрицепы.Ссылка.Рассчитан,
	|	уатПутевойЛистПрицепы.Ссылка.Номер
	|ИЗ
	|	Документ.уатПутевойЛист.Прицепы КАК уатПутевойЛистПрицепы
	|ГДЕ
	|	НЕ уатПутевойЛистПрицепы.Ссылка.ПометкаУдаления
	|	И уатПутевойЛистПрицепы.ТС = &ТС
	|	И уатПутевойЛистПрицепы.ТС.уатМодель.НаличиеТопливногоБака
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	уатПутевойЛистЗадание.Ссылка,
	|	уатПутевойЛистЗадание.Ссылка.ДатаВыезда,
	|	уатПутевойЛистЗадание.Ссылка.Рассчитан,
	|	уатПутевойЛистЗадание.Ссылка.Номер
	|ИЗ
	|	Документ.уатПутевойЛист.Задание КАК уатПутевойЛистЗадание
	|ГДЕ
	|	НЕ уатПутевойЛистЗадание.Ссылка.ПометкаУдаления
	|	И (уатПутевойЛистЗадание.Прицеп1.уатМодель.НаличиеТопливногоБака
	|				И уатПутевойЛистЗадание.Прицеп1 = &ТС
	|			ИЛИ уатПутевойЛистЗадание.Прицеп2.уатМодель.НаличиеТопливногоБака
	|				И уатПутевойЛистЗадание.Прицеп2 = &ТС)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПутевыеЛисты.Ссылка КАК Ссылка
	|ИЗ
	|	ВТПутевыеЛисты КАК ВТПутевыеЛисты
	|ГДЕ
	|	ИСТИНА";
	
	Если НомерПЛ <> Неопределено Тогда
		Запрос.Текст = СокрЛП(Запрос.Текст)	+ "
		|	И ВТПутевыеЛисты.Номер = &НомерПЛ";
		Запрос.УстановитьПараметр("НомерПЛ", НомерПЛ);
	КонецЕсли;
	
	Если Рассчитан <> Неопределено Тогда
		Запрос.Текст = СокрЛП(Запрос.Текст)	+ "
		|	И ВТПутевыеЛисты.Рассчитан = &Рассчитан";
		Запрос.УстановитьПараметр("Рассчитан", Рассчитан);
	КонецЕсли;
	
	Запрос.Текст = СокрЛП(Запрос.Текст)	+ "
	|УПОРЯДОЧИТЬ ПО
	|	ВТПутевыеЛисты.ДатаВыезда";
		
	РезультатТаблица = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатТаблица;
КонецФункции // глСпидометр       

// Возвращает таблицу пут. листов
//
Функция уатПутевыеЛистыВыездВозврат(ТС, Дата, ВремяВыезд, ВремяВозврат, НомерПЛ = Неопределено, Рассчитан = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата",    Дата);
	Запрос.УстановитьПараметр("ДатаНач", ВремяВыезд);
	Запрос.УстановитьПараметр("ДатаКон", ВремяВозврат);
	Запрос.УстановитьПараметр("ТС", ТС);
	Запрос.УстановитьПараметр("ПометкаУдаления", Истина);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатПутевойЛист.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.уатПутевойЛист КАК уатПутевойЛист
	               |ГДЕ
	               |	НЕ уатПутевойЛист.ПометкаУдаления
	               |	И &Дата МЕЖДУ ДОБАВИТЬКДАТЕ(уатПутевойЛист.ДатаВыезда, ЧАС, -&ДатаНач) И ДОБАВИТЬКДАТЕ(уатПутевойЛист.ДатаВозвращения, ЧАС, &ДатаКон)";
	
	Если НомерПЛ <> Неопределено Тогда
		Запрос.Текст = СокрЛП(Запрос.Текст)	+ " И
		|	уатПутевойЛист.Номер = &НомерПЛ";
	КонецЕсли;
	
	Если Рассчитан <> Неопределено Тогда
		Запрос.Текст = СокрЛП(Запрос.Текст)	+ " И
		|	уатПутевойЛист.Рассчитан = &Рассчитан";
		Запрос.УстановитьПараметр("Рассчитан", Рассчитан);
	КонецЕсли;
	
	Если Метаданные.Документы.уатПутевойЛист.ТабличныеЧасти.Задание.Реквизиты.Найти("Прицеп1") <> Неопределено Тогда 
		Запрос.Текст = Запрос.Текст + "
		|	И (уатПутевойЛист.ТранспортноеСредство = &ТС
		|	ИЛИ уатПутевойЛист.Прицепы.ТС.уатМодель.НаличиеТопливногоБака И уатПутевойЛист.Прицепы.ТС = &ТС
		|	ИЛИ уатПутевойЛист.Задание.Прицеп1.уатМодель.НаличиеТопливногоБака И уатПутевойЛист.Задание.Прицеп1 = &ТС
		|	ИЛИ уатПутевойЛист.Задание.Прицеп2.уатМодель.НаличиеТопливногоБака И уатПутевойЛист.Задание.Прицеп2 = &ТС)";
	КонецЕсли;
	
	Запрос.Текст = СокрЛП(Запрос.Текст)	+ "
	|УПОРЯДОЧИТЬ ПО
	|	уатПутевойЛист.ДатаВыезда";
	
	РезультатТаблица = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатТаблица;
КонецФункции // глСпидометр       


// Функция выполняет поиск предыдущего ПЛ по указанному ТС и дате выезда по текущему ПЛ.
// Если ПЛ найден и он не рассчитан, то возвращается Истина, иначе Ложь.
// Возвращаются также номер и дата найденного предыдущего ПЛ
//
Функция ПредыдущийПЛНеРассчитан(ТС, ДатаВыезда, ПредПЛ_номер, ПредПЛ_дата, ЭтотПЛ) Экспорт
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатПутевойЛист.Рассчитан,
	|	уатПутевойЛист.Номер,
	|	уатПутевойЛист.Дата
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|ГДЕ
	|	уатПутевойЛист.Ссылка <> &ЭтотПЛ
	|	И уатПутевойЛист.ДатаВозвращения <= &ДатаКонтроль
	|	И НЕ уатПутевойЛист.ПометкаУдаления
	|	И уатПутевойЛист.ТранспортноеСредство = &ТС
	|
	|УПОРЯДОЧИТЬ ПО
	|	уатПутевойЛист.ДатаВозвращения УБЫВ");
	Запрос.УстановитьПараметр("ТС", ТС);
	Запрос.УстановитьПараметр("ДатаКонтроль", ДатаВыезда);
	Запрос.УстановитьПараметр("ЭтотПЛ", ЭтотПЛ);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Рез = НЕ Выборка.Рассчитан;
		ПредПЛ_номер = Выборка.Номер;
		ПредПЛ_дата = Выборка.Дата;
	Иначе
		Рез = Ложь;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

// Функция возвращает текущее состояние
//
// Параметры:
//  ТС           - ссылка справочника ОС
//  ПутевойЛист  - ссылка документа пут. лист
//
Функция уатСостояниеТС(ТС,Дата) ЭКСПОРТ
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	уатСостояниеТССрезПоследних.ТС,
	|	уатСостояниеТССрезПоследних.Состояние,
	|	уатСостояниеТССрезПоследних.ДатаОкончания,
	|	уатСостояниеТССрезПоследних.Контрагент,
	|	уатСостояниеТССрезПоследних.Заказ,
	|	уатСостояниеТССрезПоследних.Регистратор КАК Документ
	|ИЗ
	|	РегистрСведений.уатСостояниеТС.СрезПоследних(&Период, ТС = &ТС) КАК уатСостояниеТССрезПоследних";
	
	Запрос.УстановитьПараметр("ТС", ТС);
	Запрос.УстановитьПараметр("Период", Дата);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	РезультатЗапроса.Следующий();
	
	Возврат РезультатЗапроса;
КонецФункции // уатСостояниеТС       

// Функция возвращает текущее состояние
//
// Параметры:
//  ТС           - ссылка справочника ОС
//  ПутевойЛист  - ссылка документа пут. лист
//
Функция МестонахождениеТС(ТС, Знач Дата = Неопределено) ЭКСПОРТ
	Рез = Новый Структура;
	Рез.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	Рез.Вставить("Колонна", Справочники.уатКолонны.ПустаяСсылка());
	Рез.Вставить("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	
	Если НЕ ЗначениеЗаполнено(ТС) Тогда
		Возврат Рез;
	КонецЕсли;
	
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	уатМестонахождениеТССрезПоследних.Организация КАК Организация,
	|	уатМестонахождениеТССрезПоследних.Колонна КАК Колонна,
	|	уатМестонахождениеТССрезПоследних.Подразделение КАК Подразделение
	|ИЗ
	|	РегистрСведений.уатМестонахождениеТС.СрезПоследних(&Дата, ТС = &ТС) КАК уатМестонахождениеТССрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ТС", ТС);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		СообщениеОшибка = НСтр("ru='Местонахождение ТС/оборудования """ + ТС + """ не определено на дату " + Формат(Дата, "ДФ=dd.MM.yyyy") + "';en='NTRS'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОшибка);
	Иначе
		ВыборкаДетали = Результат.Выбрать();
		ВыборкаДетали.Следующий();
		Рез.Организация = ВыборкаДетали.Организация;
		Рез.Подразделение = ВыборкаДетали.Подразделение;
		Рез.Колонна = ВыборкаДетали.Колонна;
	КонецЕсли;
		
	Возврат Рез;
КонецФункции // МестонахождениеТС       

// Функция возвращает Истину если ТС свободен для выезда и Ложь если нет
//
// Параметры:
//  ТС           - ссылка справочника ОС
//  ПутевойЛист  - ссылка документа пут. лист
Функция уатТССвободенДляВыезда(ТС,Дата) ЭКСПОРТ
	Если уатСостояниеТС(ТС,Дата) = Справочники.уатСостояниеТС.НаКонсервацииИсправен Или
		уатСостояниеТС(ТС,Дата) = Справочники.уатСостояниеТС.Выбыло Или
		уатСостояниеТС(ТС,Дата) = Справочники.уатСостояниеТС.НаКонсервацииНеИсправен Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	уатПутевойЛист.Ссылка
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|
	|ГДЕ
	|	(уатПутевойЛист.ТранспортноеСредство = &ТС ИЛИ уатПутевойЛист.Прицепы.ТС = &ТС) И
	|	уатПутевойЛист.ДатаВыезда <= &Дата И
	|	(уатПутевойЛист.ДатаВозвращения >= &Дата ИЛИ (уатПутевойЛист.ДатаВозвращения) ЕСТЬ NULL ) И
	|	уатПутевойЛист.ПометкаУдаления = &ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ТС", ТС);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Результат = Истина ;		//нет выписанных путевых листов на эту дату
	Иначе	
		Результат = Ложь;
	КонецЕсли;	
	
	Возврат Результат;
КонецФункции // уатТССвободенДляВыезда       

// Функция возвращает Истину если ТС занесено в пут. листе и Ложь если нет
//
// Параметры:
//  ТС           - ссылка справочника ОС
//  ПутевойЛист  - ссылка документа пут. лист
//
Функция уатТСВПутевомЛисте(ТС,ПутевойЛист) ЭКСПОРТ
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	уатПутевойЛист.ТранспортноеСредство,
	|	уатПутевойЛист.Прицепы.(
	|		ТС
	|	)
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|
	|ГДЕ
	|	(уатПутевойЛист.ТранспортноеСредство = &ТС ИЛИ уатПутевойЛист.Прицепы.ТС = &ТС) И
	|	уатПутевойЛист.Ссылка = &ПутевойЛист";
	
	Запрос.УстановитьПараметр("ТС", ТС);
	Запрос.УстановитьПараметр("ПутевойЛист", ПутевойЛист);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Результат = Ложь;
	Иначе	
		Результат = Истина;
	КонецЕсли;	
	
	Возврат Результат;
КонецФункции // утПроверкаКорректностиПЛ       

// Процедура ищет единственное ТС среди всех ТС по началу его номера
//
// Параметры:
//  Текст        - строка - начало номера
//
// Возвращаемое значение
//  строка - номер найденного ТС, если он единственный
//
Функция уатПодобратьНомерТС(Организация, Знач Текст) Экспорт
	
	ТекстАвтоПодбора = "";
	Запрос = Новый Запрос;
	
	Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, 
			ПланыВидовХарактеристик.уатПраваИНастройки.ПредставлениеТСКакГосНомер) Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
		|	СправочникТранспортныеСредства.Код КАК Номер
		|ИЗ
		|   Справочник.ТранспортныеСредства КАК СправочникТранспортныеСредства
		|ГДЕ
		|   СправочникТранспортныеСредства.Код ПОДОБНО &парамТекст
		|СПЕЦСИМВОЛ ""~""";
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
		|   СправочникТранспортныеСредства.уатГаражныйНомер КАК Номер
		|ИЗ
		|   Справочник.ТранспортныеСредства КАК СправочникТранспортныеСредства
		|ГДЕ
		|   СправочникТранспортныеСредства.уатГаражныйНомер ПОДОБНО &парамТекст
		|СПЕЦСИМВОЛ ""~""";
	КонецЕсли;                                 
		
	Запрос.Текст = ТекстЗапроса;
	
	// заменим спецсимволы
	Текст = СтрЗаменить(Текст, "~", "~~");
	Текст = СтрЗаменить(Текст, "%", "~%");
	Текст = СтрЗаменить(Текст, "_", "~_");
	Текст = СтрЗаменить(Текст, "[", "~[");
	Текст = СтрЗаменить(Текст, "-", "~-");
	Текст = "%"+сокрЛП(Текст)+"%";
	
	Запрос.УстановитьПараметр("парамТекст", Текст);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		ТекстАвтоПодбора = Выборка.Номер;
	КонецЕсли;
	
	Возврат ТекстАвтоПодбора
	
КонецФункции // уатПодобратьНомерТС()

// Процедура ищет ТС по началу его номера
//
// Параметры:
//  Текст        - строка - начало гос. или гар. номера
//  НачальноеЗначение - СправочникСсылка.ТранспортныеСредства - значение по умолчанию
//
// Возвращаемое значение:
//  СправочникСсылка.ТранспортныеСредства - возвращается значение первого попавшегося ТС,
//		номер которого начинается на указанный параметр
//  Неопределено - ни одно ТС не найдено
//
Функция уатНайтиТСПоНомеру(Организация, Знач Номер) Экспорт
	Если ПустаяСтрока(Номер) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, 
			ПланыВидовХарактеристик.уатПраваИНастройки.ПредставлениеТСКакГосНомер) Тогда
		ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
		|       СправочникТранспортныеСредства.Ссылка КАК ТС
		|ИЗ
		|       Справочник.ТранспортныеСредства КАК СправочникТранспортныеСредства
		|
		|ГДЕ
		|       СправочникТранспортныеСредства.Код = &Номер";
	Иначе   
		ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
		|       СправочникТранспортныеСредства.Ссылка КАК ТС
		|ИЗ
		|       Справочник.ТранспортныеСредства КАК СправочникТранспортныеСредства
		|
		|ГДЕ
		|       СправочникТранспортныеСредства.уатГаражныйНомер = &Номер";
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Номер", Номер);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() тогда
		Возврат Выборка.ТС;
	КонецЕсли;
	
	//ТС не найден, может это оборудование?
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СправочникТранспортныеСредства.Ссылка
	|ИЗ
	|	Справочник.ТранспортныеСредства КАК СправочникТранспортныеСредства
	|ГДЕ
	|	СправочникТранспортныеСредства.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Наименование", Номер);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции //уатНайтиТСПоНомеру

// Функция возвращает ссылку на элемент справочника "Сотрудники" по переданному GUID.
//
Функция СформироватьСсылкуНаСотрудникаПоGUID(GUIDСотрудника) Экспорт
	
	Попытка
		Возврат Справочники.Сотрудники.ПолучитьСсылку(GUIDСотрудника);
	Исключение
		Возврат Справочники.Сотрудники.ПустаяСсылка();
	КонецПопытки;
	
КонецФункции // СформироватьСсылкуНаСотрудникаПоGUID()

// Процедура устанавливает занятость ТС (флаг и текст сообщения HTML) в ТЧ в документе Разнарядка и обработке Пакетная выписка
//
Процедура ОбновитьСтатусыЗанятости(ТабЧасть, Дата, Организация, ТекСтрокаНомер = Неопределено) Экспорт
	
	мсвТС = Новый Массив;
	мсвВодители = Новый Массив;
	
	Для Каждого ТекСтрока Из ТабЧасть Цикл
		Если ТекСтрокаНомер <> Неопределено И ТекСтрока.НомерСтроки <> ТекСтрокаНомер Тогда
			Продолжить;
		КонецЕсли;
		
		Если мсвТС.Найти(ТекСтрока.ТС) = Неопределено Тогда
			мсвТС.Добавить(ТекСтрока.ТС);
		КонецЕсли;
		Если мсвВодители.Найти(ТекСтрока.Водитель) = Неопределено Тогда
			мсвВодители.Добавить(ТекСтрока.Водитель);
		КонецЕсли;
		Если мсвВодители.Найти(ТекСтрока.Водитель2) = Неопределено Тогда
			мсвВодители.Добавить(ТекСтрока.Водитель2);
		КонецЕсли;
	КонецЦикла;
	
	ДниДоОкончанияДействияДокументовТС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.ДниДоОкончанияДействияДокументовТС);
	ДниДоОкончанияДействияДокументовВодителей = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.ДниДоОкончанияДействияДокументовВодителей);
	ДниДоОкончанияДействияТК = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.ДниДоОкончанияДействияТопливныхКарт);
		
	тблЗанятостьТС = уатОбщегоНазначения.ЗанятостьТС(мсвТС, Дата, ДниДоОкончанияДействияДокументовТС, ДниДоОкончанияДействияТК);
	тблЗанятостьВодителей = уатОбщегоНазначения.ЗанятостьВодителей(мсвВодители, Дата, ДниДоОкончанияДействияДокументовВодителей, ДниДоОкончанияДействияТК);
		
	Для Каждого ТекСтрока Из ТабЧасть Цикл
		Если ТекСтрокаНомер <> Неопределено И ТекСтрока.НомерСтроки <> ТекСтрокаНомер Тогда
			Продолжить;
		КонецЕсли;
					
		СтрокаЗанятостиТС = тблЗанятостьТС.Найти(ТекСтрока.ТС, "ТС");
		Если СтрокаЗанятостиТС = Неопределено Тогда
			ДанныеСтрокаЗанятостьТС = "";
			ДанныеЗанятостьТС = Ложь;
			ДанныеДокументыТС = "";
			ДанныеПросроченныеТК = "";
		Иначе
			ДанныеСтрокаЗанятостьТС = СтрокаЗанятостиТС.СтрокаЗанятость;
			ДанныеЗанятостьТС = СтрокаЗанятостиТС.Занятость;
			ДанныеДокументыТС = СтрокаЗанятостиТС.СтрокаДокументыТС;
			ДанныеПросроченныеТК = СтрокаЗанятостиТС.СтрокаПросроченныеТК;
		КонецЕсли;
		
		СтрокаЗанятостиВодитель1 = тблЗанятостьВодителей.Найти(ТекСтрока.Водитель, "Водитель");
		Если СтрокаЗанятостиВодитель1 = Неопределено Тогда
			ДокументыВодитель1 = "";
			ДокументыТКВодитель1 = "";
			ДанныеЗанятостьВодитель1 = Ложь;
		Иначе
			ДокументыВодитель1 = СтрокаЗанятостиВодитель1.ПросроченныеДокументы;
			ДокументыТКВодитель1 = СтрокаЗанятостиВодитель1.ПросроченныеДокументыТК;
			ДанныеЗанятостьВодитель1 = Истина;
		КонецЕсли;
		СтрокаЗанятостиВодитель2 = тблЗанятостьВодителей.Найти(ТекСтрока.Водитель2, "Водитель");
		Если СтрокаЗанятостиВодитель2 = Неопределено Тогда
			ДокументыВодитель2 = "";
			ДокументыТКВодитель2 = "";
			ДанныеЗанятостьВодитель2 = Ложь;
		Иначе
			ДокументыВодитель2 = СтрокаЗанятостиВодитель2.ПросроченныеДокументы;
			ДокументыТКВодитель2 = СтрокаЗанятостиВодитель2.ПросроченныеДокументыТК;
			ДанныеЗанятостьВодитель2 = Истина;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ДокументыВодитель1) Тогда
			ДанныеСтрокаЗанятостьТС = СтрЗаменить(ДанныеСтрокаЗанятостьТС, "_%Строка2%_", "_%Строка2%_"
				+ ?(ПустаяСтрока(ДанныеДокументыТС), "", ". ") + ДокументыВодитель1);
			ДанныеСтрокаЗанятостьТС = СтрЗаменить(ДанныеСтрокаЗанятостьТС, "_%Строка3%_", "_%Строка3%_"
				+ ?(ПустаяСтрока(ДанныеПросроченныеТК), "", ". ") + ДокументыТКВодитель1);
		КонецЕсли;
		Если НЕ ПустаяСтрока(ДокументыВодитель2) Тогда
			ДанныеСтрокаЗанятостьТС = СтрЗаменить(ДанныеСтрокаЗанятостьТС, "_%Строка2%_", "_%Строка2%_"
				+ ?(ПустаяСтрока(ДанныеДокументыТС) И ПустаяСтрока(ДокументыВодитель1), "", ". ") + ДокументыВодитель2);
			ДанныеСтрокаЗанятостьТС = СтрЗаменить(ДанныеСтрокаЗанятостьТС, "_%Строка3%_", "_%Строка3%_"
				+ ?(ПустаяСтрока(ДанныеПросроченныеТК) И ПустаяСтрока(ДокументыТКВодитель1), "", ". ") + ДокументыТКВодитель2);
		КонецЕсли;
		
		Если ПустаяСтрока(ДанныеДокументыТС + ДокументыВодитель1 + ДокументыВодитель2) Тогда
			ДанныеСтрокаЗанятостьТС = СтрЗаменить(ДанныеСтрокаЗанятостьТС, "_%Строка2%_", НСтр("en='Alert on validity of documents no';ru='Предупреждений по сроку действия документов нет'"));
		Иначе
			ДанныеСтрокаЗанятостьТС = СтрЗаменить(ДанныеСтрокаЗанятостьТС, "_%Строка2%_", "");
		КонецЕсли;
		Если ПустаяСтрока(ДанныеПросроченныеТК + ДокументыТКВодитель1 + ДокументыТКВодитель2) Тогда
			ДанныеСтрокаЗанятостьТС = СтрЗаменить(ДанныеСтрокаЗанятостьТС, "_%Строка3%_", НСтр("en='Warnings on duration of fuel cards no';ru='Предупреждений по сроку действия топливных карт нет'"));
		Иначе
			ДанныеСтрокаЗанятостьТС = СтрЗаменить(ДанныеСтрокаЗанятостьТС, "_%Строка3%_", "");
		КонецЕсли;
				
		ТекСтрока.ЗанятостьТС = ДанныеЗанятостьТС ИЛИ ДанныеЗанятостьВодитель1 ИЛИ ДанныеЗанятостьВодитель2;
		ТекСтрока.ПанельДопИнформации = ДанныеСтрокаЗанятостьТС;
	КонецЦикла;
КонецПроцедуры

// Процедура устанавливает текст дополнительной информации по ТС
//
Функция ЗанятостьТС(мсвТС, Дата, ДопускДней, ДниДоОкончанияДействияТК, ДопПараметры=Неопределено) Экспорт
	
	//право просмотра отчетов
	Просмотр_уатПробегТС = ПравоДоступа("Просмотр", Метаданные.Отчеты.уатПробегТС);
	Просмотр_уатНаработкаОборудованияВМоточасах = ПравоДоступа("Просмотр", Метаданные.Отчеты.уатНаработкаОборудованияВМоточасах);
	
	//проверка занятости выполняется в привилегированном режиме
	//важно выполнить проверку по всем документам, не только по тем, которые доступны пользователю
	УстановитьПривилегированныйРежим(Истина);
	
	ОрганизацияПользователя = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяОрганизация");
	
	Рез = Новый ТаблицаЗначений;
	Рез.Колонки.Добавить("ТС");
	Рез.Колонки.Добавить("ВыработкаОбщая");
	Рез.Колонки.Добавить("ВыработкаПослеТО");
	Рез.Колонки.Добавить("ДатаТО");
	Рез.Колонки.Добавить("ВСоставеТС");
	Рез.Колонки.Добавить("СтрокаПЛ");
	Рез.Колонки.Добавить("СтрокаРЛ");
	Рез.Колонки.Добавить("СтрокаПробег");
	Рез.Колонки.Добавить("СтрокаТО");
	Рез.Колонки.Добавить("СтрокаСоставТС");
	Рез.Колонки.Добавить("СтрокаДокументыТС");
	Рез.Колонки.Добавить("СтрокаПросроченныеТК");
	Рез.Колонки.Добавить("Занятость");
	Рез.Колонки.Добавить("СтрокаЗанятость");
	Рез.Индексы.Добавить("ТС");
		
	Если ДопПараметры = Неопределено Тогда 
		ДопПараметры = Новый Структура();
	КонецЕсли;
	
	//Запрос общей выработки
	ЗапросВыработка = Новый Запрос();
	ЗапросВыработка.УстановитьПараметр("мсвТС", мсвТС);
	ЗапросВыработка.Текст =
	"ВЫБРАТЬ
	|	уатВыработкаТСОбороты.ТС КАК ТС,
	|	ВЫБОР
	|		КОГДА уатВыработкаТСОбороты.ПараметрВыработки.Временный
	|			ТОГДА СУММА(уатВыработкаТСОбороты.КоличествоОборот) / 3600
	|		ИНАЧЕ СУММА(уатВыработкаТСОбороты.КоличествоОборот)
	|	КОНЕЦ + уатВыработкаТСОбороты.ТС.уатНачальныйПробег КАК Значение
	|ИЗ
	|	РегистрНакопления.уатВыработкаТС.Обороты(
	|			,
	|			,
	|			,
	|			ТС В (&мсвТС)
	|				И (ТС.уатМодель.НаличиеСпидометра
	|						И ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПробегОбщий)
	|					ИЛИ НЕ ТС.уатМодель.НаличиеСпидометра
	|						И ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ВремяВРаботе))) КАК уатВыработкаТСОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	уатВыработкаТСОбороты.ТС,
	|	уатВыработкаТСОбороты.ПараметрВыработки.Временный";
	//	ПоказанияСчетчикаТекущие = Выборка.Значение;
	тблВыработкаТС = ЗапросВыработка.Выполнить().Выгрузить();
	Для Каждого ТекСтрока Из тблВыработкаТС Цикл
		НоваяСтрока = ЗанятостьТС_НайтиДобавитьСтрокуЗанятости(Рез, ТекСтрока.ТС);
		НоваяСтрока.ВыработкаОбщая = ТекСтрока.Значение;
	КонецЦикла;
		
	//ПоказанияСчетчикаТекущие = ПоказанияСчетчикаТекущие + ТС.НачальныйПробег;
	
	//Запрос ТС, в составе которых находятся входящие ТС
	ЗапросСоставТС = Новый Запрос();
	ЗапросСоставТС.УстановитьПараметр("мсвТС", мсвТС);
	ЗапросСоставТС.Текст =
	"ВЫБРАТЬ
	|	уатСоставТС.ТС КАК ТС,
	|	уатСоставТС.ВСоставе КАК ВСоставе
	|ИЗ
	|	РегистрСведений.уатСоставТС КАК уатСоставТС
	|ГДЕ
	|	уатСоставТС.ТС В (&мсвТС)";
	тблВСоставеТС = ЗапросСоставТС.Выполнить().Выгрузить();
	Для Каждого ТекСтрока Из тблВСоставеТС Цикл
		НоваяСтрока = ЗанятостьТС_НайтиДобавитьСтрокуЗанятости(Рез, ТекСтрока.ТС);
		НоваяСтрока.ВСоставеТС = ТекСтрока.ВСоставе;
		НоваяСтрока.СтрокаСоставТС = ?(ЗначениеЗаполнено(ТекСтрока.ВСоставе), ". " + НСтр("en='Vehicle consist:';ru='В составе ТС:'")
		+ " <A href=""" + ПолучитьНавигационнуюСсылку(ТекСтрока.ВСоставе) + """>" + уатОбщегоНазначения.уатПредставлениеТС(ТекСтрока.ВСоставе, ОрганизацияПользователя) + "</A>", "");
	КонецЦикла;
	
	// Запрос корректности ПЛ: не закрыт какой-то из путевых листов (нарушается цепочка остатков топлива)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	уатПутевойЛист.ТранспортноеСредство КАК ТС,
	|	уатПутевойЛист.Ссылка КАК Ссылка,
	|	уатПутевойЛист.Дата КАК Дата,
	|	уатПутевойЛист.Номер КАК Номер
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|ГДЕ
	|	НЕ уатПутевойЛист.ПометкаУдаления
	|	И НЕ уатПутевойЛист.Рассчитан
	|	И НАЧАЛОПЕРИОДА(уатПутевойЛист.ДатаВыезда, ДЕНЬ) <= &ТекДата
	|	И (уатПутевойЛист.ДатаВозвращения = ДАТАВРЕМЯ(1,1,1) ИЛИ НАЧАЛОПЕРИОДА(уатПутевойЛист.ДатаВозвращения, ДЕНЬ) >= &ТекДата)
	|	И уатПутевойЛист.ТранспортноеСредство В(&мсвТС)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТС,
	|	ВЫБОР
	|		КОГДА уатПутевойЛист.ДатаВозвращения = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА &ТекДата
	|		ИНАЧЕ уатПутевойЛист.ДатаВозвращения
	|	КОНЕЦ УБЫВ,
	|	Дата УБЫВ
	|ИТОГИ ПО
	|	ТС";
	Запрос.УстановитьПараметр("ТекДата", НачалоДня(Дата));
	Запрос.УстановитьПараметр("мсвТС", мсвТС);
	
	ВыборкаТС = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТС.Следующий() Цикл
		ВыборкаПЛ = ВыборкаТС.Выбрать();
		
		Если ВыборкаПЛ.Количество() > 1 Тогда
			ВыборкаПЛ.Следующий();
			
			НоваяСтрока = ЗанятостьТС_НайтиДобавитьСтрокуЗанятости(Рез, ВыборкаТС.ТС);
			НоваяСтрока.Занятость = Истина;
			НоваяСтрока.СтрокаПЛ = ". " + НСтр("en='Not closed waybill:';ru='Не закрыт путевой лист:'") + " <A href="""
			+ ПолучитьНавигационнуюСсылку(ВыборкаПЛ.Ссылка) + """>" + Строка(ВыборкаПЛ.Номер) + " "
			+ НСтр("en='from';ru='от'") + " " + Формат(ВыборкаПЛ.Дата, "ДЛФ = D") + "</A>";
		КонецЕсли;
	КонецЦикла;
		
	// Запрос подошедших по сроку ТО
	ВыборкаТС = уатСписокТСДляТО(мсвТС).Выбрать();
	Пока ВыборкаТС.Следующий() Цикл
		НоваяСтрока = ЗанятостьТС_НайтиДобавитьСтрокуЗанятости(Рез, ВыборкаТС.ТС);
		НоваяСтрока.Занятость = Истина;
		НоваяСтрока.СтрокаТО = ". " + НСтр("en=""It's time for MO:"";ru='Подошел срок ТО:'") + " <A href=""ПриближениеСроковТО"">" + Строка(ВыборкаТС.ВидРемонта) + "</A>";
	КонецЦикла;
	
	// Есть просроченные документы на ТС
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатДокументыТС.ВидДокумента,
	|	уатДокументыТС.Номер,
	|	уатДокументыТС.ДатаВыдачи,
	|	уатДокументыТС.ТС,
	|	уатДокументыТС.ДатаОкончания,
	|	уатДокументыТС.Архив
	|ИЗ
	|	РегистрСведений.уатДокументыТС КАК уатДокументыТС
	|ГДЕ
	|	НЕ уатДокументыТС.Архив
	|	И уатДокументыТС.ДатаОкончания <> ДАТАВРЕМЯ(1,1,1)
	|	И уатДокументыТС.ДатаОкончания <= &ДатаОкончания
	|	И уатДокументыТС.ТС В (&мсвТС)
	|ИТОГИ ПО
	|	ТС";
	
	Запрос.УстановитьПараметр("ДатаОкончания", НачалоДня(Дата) + ДопускДней * 24 * 60 * 60);
	Запрос.УстановитьПараметр("мсвТС", мсвТС);		
	Запрос.УстановитьПараметр("Архив", Ложь);
	
	ВыборкаТС = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТС.Следующий() Цикл
		ВыборкаДокументы = ВыборкаТС.Выбрать();
		
		СтрокаВидыДокументов = "";
		Пока ВыборкаДокументы.Следующий() Цикл
			СтрокаВидыДокументов = СтрокаВидыДокументов + Строка(ВыборкаДокументы.ВидДокумента) + ", ";
		КонецЦикла;
		СтрокаВидыДокументов = Лев(СтрокаВидыДокументов, СтрДлина(СтрокаВидыДокументов) - 2);
		
		НоваяСтрока = ЗанятостьТС_НайтиДобавитьСтрокуЗанятости(Рез, ВыборкаТС.ТС);
		НоваяСтрока.Занятость = Истина;
		НоваяСтрока.СтрокаДокументыТС = ?(ЗначениеЗаполнено(НоваяСтрока.СтрокаДокументыТС), ". ", "") + 
			НСтр("en='Vehicle document has expired:';ru='Истек срок действия документов на ТС:'")
			+ " <A href=""СписокДокументовТС"">" + СтрокаВидыДокументов + "</A>";
	КонецЦикла;
	
	// Есть просроченные ТК (топливные карты)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатПластиковыеКарты.КомуВыдана КАК ТС
	|ИЗ
	|	Справочник.уатТопливныеКарты КАК уатПластиковыеКарты
	|ГДЕ
	|	НЕ уатПластиковыеКарты.ПометкаУдаления
	|	И уатПластиковыеКарты.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	|	И уатПластиковыеКарты.ДатаОкончания <= &ДатаОкончания
	|	И (уатПластиковыеКарты.Статус = ЗНАЧЕНИЕ(Перечисление.уатСтатусыКарт.Действует)
	|		ИЛИ уатПластиковыеКарты.Статус = ЗНАЧЕНИЕ(Перечисление.уатСтатусыКарт.ПустаяСсылка))
	|	И уатПластиковыеКарты.КомуВыдана В (&мсвТС)
	|");
	Запрос.УстановитьПараметр("ДатаОкончания", НачалоДня(Дата) + ДопускДней * 24 * 60 * 60);
	Запрос.УстановитьПараметр("мсвТС", мсвТС);
	
	ВыборкаТС = Запрос.Выполнить().Выбрать();
	Пока ВыборкаТС.Следующий() Цикл
		НоваяСтрока = ЗанятостьТС_НайтиДобавитьСтрокуЗанятости(Рез, ВыборкаТС.ТС);
		НоваяСтрока.Занятость = Истина;
		НоваяСтрока.СтрокаПросроченныеТК = ?(ЗначениеЗаполнено(НоваяСтрока.СтрокаПросроченныеТК), ". ", "") + 
			НСтр("en='Has expired';ru='Истек срок действия'") + " <A href=""СписокТК"">" + НСтр("en='fuel cards vehicle';ru='топливной карты ТС'") + "</A>";
	КонецЦикла;
	
	//доп. запрос по наличию спидометра
	ЗапросСпидометр = Новый Запрос(
	"ВЫБРАТЬ
	|	уатТС.Ссылка КАК Ссылка,
	|	уатТС.уатМодель.НаличиеСпидометра КАК НаличиеСпидометра
	|ИЗ
	|	Справочник.ТранспортныеСредства КАК уатТС
	|ГДЕ
	|	уатТС.Ссылка В(&мсвТС)");
	ЗапросСпидометр.УстановитьПараметр("мсвТС", мсвТС);
	тблНаличиеСпидометра = ЗапросСпидометр.Выполнить().Выгрузить();
	СтруктураНаличиеСпидометра = Новый Соответствие;
	Для Каждого ТекСтрока Из тблНаличиеСпидометра Цикл
		СтруктураНаличиеСпидометра.Вставить(ТекСтрока.Ссылка, ТекСтрока.НаличиеСпидометра);
	КонецЦикла;
	
	//формирование текста
	Для Каждого ТекТС Из мсвТС Цикл
		СтрокаЗанятостьТС = ЗанятостьТС_НайтиДобавитьСтрокуЗанятости(Рез, ТекТС);
		
		ВыработкаОбщая = СтрокаЗанятостьТС.ВыработкаОбщая;
		ДатаПоследнегоТО = СтрокаЗанятостьТС.ДатаТО;
		ВыработкаПослеТО = СтрокаЗанятостьТС.ВыработкаПослеТО;
		СтрокаТО = СтрокаЗанятостьТС.СтрокаТО;
		СтрокаСоставТС = СтрокаЗанятостьТС.СтрокаСоставТС;
		СтрокаПЛ = СтрокаЗанятостьТС.СтрокаПЛ;
		СтрокаРЛ = СтрокаЗанятостьТС.СтрокаРЛ;
		СтрокаПросроченныеДокументы = СтрокаЗанятостьТС.СтрокаДокументыТС;
		СтрокаПросроченныеТК = СтрокаЗанятостьТС.СтрокаПросроченныеТК;
		
		ТекТСНаличиеСпидометра = ?(ЗначениеЗаполнено(СтруктураНаличиеСпидометра.Получить(ТекТС)), СтруктураНаличиеСпидометра.Получить(ТекТС), Ложь);
		
		СтрокаПробег = ?(ТекТСНаличиеСпидометра, НСтр("en='Mileage:';ru='Пробег:'") + " ", НСтр("en='Operation time:';ru='Наработка:'") + " ");
		Если (ТекТСНаличиеСпидометра И Просмотр_уатПробегТС) 
			ИЛИ (НЕ ТекТСНаличиеСпидометра И Просмотр_уатНаработкаОборудованияВМоточасах) Тогда
			СтрокаПробег = СтрокаПробег + "<A href=""" + ?(ТекТСНаличиеСпидометра, "ОтчетПробег", "ОтчетНаработка") + """>"
				+ ?(ЗначениеЗаполнено(ВыработкаОбщая), ВыработкаОбщая, 0) + "</A>";
		Иначе
			СтрокаПробег = СтрокаПробег + ?(ЗначениеЗаполнено(ВыработкаОбщая), ВыработкаОбщая, 0);
		КонецЕсли;
				
		СтрокаПробег = СтрокаПробег + ?(ДатаПоследнегоТО = '00010101', "", ". "
			+ ?(ТекТСНаличиеСпидометра, НСтр("en='Mileage';ru='Пробег'"), НСтр("en='Time';ru='Наработка'")) + " " + НСтр("en='after MO:';ru='после ТО:'")+" "); 
			
		СтрокаПробег = СтрокаПробег + ?(ДатаПоследнегоТО = '00010101', "", "" + ВыработкаПослеТО);
		
		Если СтрокаТО = "" Тогда
			СтрокаТО = ". " + НСтр("en='There are no warnings of planned MO';ru='Предупреждений по плановому ТО нет'");
		КонецЕсли;
		
		ТекстВедущегоБлока = "";
		Если ДопПараметры.Свойство("ОсновныеДанныеТС") Тогда 
			ТекстВедущегоБлока = ДопПараметры.ОсновныеДанныеТС;
		КонецЕсли;
		
		ТекстПробегССМ = "";
		Если ДопПараметры.Свойство("ПробегССМ") Тогда 
			ТекстПробегССМ = ДопПараметры.ПробегССМ;
		КонецЕсли;
		
		стрШаблон = 
		"<!DOCTYPE html>
		|<html>
		|<head>
		|<style>
		|body{
		|	margin: 0px; 
		|	padding: 0;
		|}
		|</style>
		|</head>
		|<body>
		|<table border=""0"" width=""100%"" cellspacing=""0"">
		|<tbody>"+?(ТекстВедущегоБлока = "", "", "
		|<tr>
		|<td valign=""top""><span style=""font-size: 12px; font-family: 'MS Sans Serif';"">_%Строка0%_</span></td>
		|</tr>")+?(ТекстПробегССМ = "", "", "
		|<tr>
		|<td valign=""top""><span style=""font-size: 12px; font-family: 'MS Sans Serif';"">_%СтрокаССМ%_</span></td>
		|</tr>")+"
		|<tr>
		|<td valign=""top""><span style=""font-size: 12px; font-family: 'MS Sans Serif';"">_%Строка1%_</span></td>
		|</tr>
		|<tr>
		|<td valign=""top""><span style=""font-size: 12px; font-family: 'MS Sans Serif';"">_%Строка2%_</span></td>
		|</tr>
		|<tr>
		|<td valign=""top""><span style=""font-size: 12px; font-family: 'MS Sans Serif';"">_%Строка3%_</span></td>
		|</tr>
		|</tbody>
		|</table>
		|</body>
		|</html>";
		
		стрРезультат = СтрЗаменить(стрШаблон, "_%Строка0%_", ТекстВедущегоБлока);
		стрРезультат = СтрЗаменить(стрРезультат, "_%СтрокаССМ%_", ТекстПробегССМ);
		стрРезультат = СтрЗаменить(стрРезультат, "_%Строка1%_", СтрокаПробег + СтрокаТО + СтрокаСоставТС);
		стрРезультат = СтрЗаменить(стрРезультат, "_%Строка2%_", СтрокаПросроченныеДокументы + "_%Строка2%_" + СтрокаПЛ + СтрокаРЛ); //оставляем маркер для добавления данных по водителям
		стрРезультат = СтрЗаменить(стрРезультат, "_%Строка3%_", СтрокаПросроченныеТК + "_%Строка3%_"); //оставляем маркер для добавления данных по водителям
		
		СтрокаЗанятостьТС.СтрокаЗанятость = стрРезультат;
		
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции // ЗанятостьТС()

Функция ЗанятостьТС_НайтиДобавитьСтрокуЗанятости(тблЗанятости, ТС)
	СтрокаПоиска = тблЗанятости.Найти(ТС, "ТС");
	Если СтрокаПоиска = Неопределено Тогда
		СтрокаПоиска = тблЗанятости.Добавить();
		СтрокаПоиска.ТС = ТС;
		СтрокаПоиска.ВыработкаОбщая = 0;
		СтрокаПоиска.ВыработкаПослеТО = 0;
		СтрокаПоиска.ДатаТО = '00010101';
		СтрокаПоиска.ВСоставеТС = Неопределено;
		СтрокаПоиска.СтрокаПЛ = "";
		СтрокаПоиска.СтрокаРЛ = "";
		СтрокаПоиска.СтрокаПробег = "";
		СтрокаПоиска.СтрокаТО = "";
		СтрокаПоиска.СтрокаСоставТС = "";
		СтрокаПоиска.СтрокаДокументыТС = "";
		СтрокаПоиска.СтрокаПросроченныеТК = "";
		СтрокаПоиска.Занятость = Ложь;
		СтрокаПоиска.СтрокаЗанятость = "";
	КонецЕсли;
	
	Возврат СтрокаПоиска;
КонецФункции

// Просроченные документы Водителей
//
Функция ЗанятостьВодителей(мсвВодители, Дата, ДопускДней, ДниДоОкончанияДействияТК) Экспорт
	Рез = Новый ТаблицаЗначений;
	Рез.Колонки.Добавить("Водитель");
	Рез.Колонки.Добавить("ПросроченныеДокументы");
	Рез.Колонки.Добавить("ПросроченныеДокументыТК");
	
	//уатПросроченныеДокументыВодителяСписок
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатДокументыВодителей.Сотрудник,
	|	уатДокументыВодителей.ВидДокумента,
	|	уатДокументыВодителей.Номер,
	|	уатДокументыВодителей.ДатаВыдачи,
	|	уатДокументыВодителей.ДатаОкончания,
	|	уатДокументыВодителей.Архив
	|ИЗ
	|	РегистрСведений.уатДокументыВодителей КАК уатДокументыВодителей
	|ГДЕ
	|	(НЕ уатДокументыВодителей.Архив)
	|	И уатДокументыВодителей.ДатаОкончания <> ДАТАВРЕМЯ(1,1,1)
	|	И уатДокументыВодителей.ДатаОкончания <= &ДатаОкончания
	|	И уатДокументыВодителей.Сотрудник В (&мсвВодители)
	|ИТОГИ ПО
	|	Сотрудник");
	Запрос.УстановитьПараметр("ДатаОкончания", НачалоДня(Дата) + ДопускДней * 24 * 60 * 60);		
	Запрос.УстановитьПараметр("мсвВодители", мсвВодители);		
	
	ВыборкаСотрудник = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСотрудник.Следующий() Цикл
		ВыборкаДокументы = ВыборкаСотрудник.Выбрать();
		
		НоваяСтрока = Рез.Добавить();
		НоваяСтрока.Водитель = ВыборкаСотрудник.Сотрудник;
		
	    СтрокаДокументы = "";
		Пока ВыборкаДокументы.Следующий() Цикл
			СтрокаДокументы = СтрокаДокументы + Строка(ВыборкаДокументы.ВидДокумента) + ", ";
		КонецЦикла;
		СтрокаДокументы = Лев(СтрокаДокументы, СтрДлина(СтрокаДокументы) - 2);
				
		НоваяСтрока.ПросроченныеДокументы = НСтр("en='At';ru='У'") +" " + уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ВыборкаСотрудник.Сотрудник) + 
			" " + НСтр("en='expired validity of the document:';ru='истек срок действия документов:'")
			+ " <A href=""ДокументыВодителя:"+ВыборкаСотрудник.Сотрудник.УникальныйИдентификатор()+""">" + СтрокаДокументы + "</A>";;
		НоваяСтрока.ПросроченныеДокументыТК = "";
	КонецЦикла;
		
	// Просроченные топливные карты.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатПластиковыеКарты.КомуВыдана КАК Сотрудник
	|ИЗ
	|	Справочник.уатТопливныеКарты КАК уатПластиковыеКарты
	|ГДЕ
	|	НЕ уатПластиковыеКарты.ПометкаУдаления
	|	И (уатПластиковыеКарты.Статус = ЗНАЧЕНИЕ(Перечисление.уатСтатусыКарт.Действует)
	|		ИЛИ уатПластиковыеКарты.Статус = ЗНАЧЕНИЕ(Перечисление.уатСтатусыКарт.ПустаяСсылка))
	|	И уатПластиковыеКарты.ДатаОкончания <> ДАТАВРЕМЯ(1,1,1)
	|	И уатПластиковыеКарты.ДатаОкончания <= &ДатаОкончания
	|	И уатПластиковыеКарты.КомуВыдана В (&мсвВодители)");
	Запрос.УстановитьПараметр("ДатаОкончания", НачалоДня(Дата) + ДопускДней * 24 * 60 * 60);
	Запрос.УстановитьПараметр("мсвВодители", мсвВодители);
	
	ВыборкаСотрудник = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаСотрудник.Следующий() Цикл
		НоваяСтрока = Рез.Найти(ВыборкаСотрудник.Сотрудник, "Водитель");
		Если НоваяСтрока = Неопределено Тогда
			НоваяСтрока = Рез.Добавить();
			НоваяСтрока.Водитель = ВыборкаСотрудник.Сотрудник;
			НоваяСтрока.ПросроченныеДокументы = "";
			НоваяСтрока.ПросроченныеДокументыТК = "";
		КонецЕсли;
				
		НоваяСтрока.ПросроченныеДокументыТК = НСтр("en='At';ru='У'") +" " + уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ВыборкаСотрудник.Сотрудник) + 
			" " + НСтр("en='expired';ru='истек срок действия'")
			+ " <A href=""ТКВодителя:"+Строка(ВыборкаСотрудник.Сотрудник.УникальныйИдентификатор())+""">" + НСтр("en='fuel cards';ru='топливной карты'")+ "</A>";
		
	КонецЦикла;
		
	Возврат Рез;
КонецФункции

// Формирует текст HTML доп. информации для отображения в динамических списках ТС
//
Функция СформироватьТекстДопИнформацииПоТС(ТС, ДопПараметры = Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(ТС) ИЛИ ТС.ЭтоГруппа Тогда
		Возврат "";
	КонецЕсли;
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
		
	мсвТС = Новый Массив;
	мсвТС.Добавить(ТС);
	
	ДниДоОкончанияДействияДокументовТС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТС.уатОрганизация,
		ПланыВидовХарактеристик.уатПраваИНастройки.ДниДоОкончанияДействияДокументовТС);
	ДниДоОкончанияДействияТК = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТС.уатОрганизация,
		ПланыВидовХарактеристик.уатПраваИНастройки.ДниДоОкончанияДействияТопливныхКарт);
		
	тблЗанятостьТС = уатОбщегоНазначения.ЗанятостьТС(мсвТС, ТекущаяДата(), ДниДоОкончанияДействияДокументовТС, ДниДоОкончанияДействияТК, ДопПараметры);
	
	СтрокаЗанятостиТС = тблЗанятостьТС.Найти(ТС, "ТС");
	Если СтрокаЗанятостиТС = Неопределено Тогда
		ДанныеСтрокаЗанятостьТС = "";
		ДанныеЗанятостьТС = Ложь;
		ДанныеДокументыТС = "";
		ДанныеПросроченныеТК = "";
	Иначе
		ДанныеСтрокаЗанятостьТС = СтрокаЗанятостиТС.СтрокаЗанятость;
		ДанныеЗанятостьТС = СтрокаЗанятостиТС.Занятость;
		ДанныеДокументыТС = СтрокаЗанятостиТС.СтрокаДокументыТС;
		ДанныеПросроченныеТК = СтрокаЗанятостиТС.СтрокаПросроченныеТК;
	КонецЕсли;
	
	ДокументыВодитель = "";
	ДокументыТКВодитель = "";
	Если ДопПараметры.Свойство("Водитель") Тогда
		мсвВодители = Новый Массив;
		мсвВодители.Добавить(ДопПараметры.Водитель);
		
		ДниДоОкончанияДействияДокументовВодителей = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТС.уатОрганизация,
			ПланыВидовХарактеристик.уатПраваИНастройки.ДниДоОкончанияДействияДокументовВодителей);
		
		тблЗанятостьВодителей = уатОбщегоНазначения.ЗанятостьВодителей(мсвВодители, ТекущаяДата(), ДниДоОкончанияДействияДокументовВодителей, ДниДоОкончанияДействияТК);
	
		СтрокаЗанятостиВодитель = тблЗанятостьВодителей.Найти(ДопПараметры.Водитель, "Водитель");
		Если СтрокаЗанятостиВодитель = Неопределено Тогда
			ДокументыВодитель = "";
			ДокументыТКВодитель = "";
			ДанныеЗанятостьВодитель = Ложь;
		Иначе
			ДокументыВодитель = СтрокаЗанятостиВодитель.ПросроченныеДокументы;
			ДокументыТКВодитель = СтрокаЗанятостиВодитель.ПросроченныеДокументыТК;
			ДанныеЗанятостьВодитель = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ДокументыВодитель) Тогда
		ДанныеСтрокаЗанятостьТС = СтрЗаменить(ДанныеСтрокаЗанятостьТС, "_%Строка2%_", "_%Строка2%_"
			+ ?(ПустаяСтрока(ДанныеДокументыТС), "", ". ") + ДокументыВодитель);
		ДанныеСтрокаЗанятостьТС = СтрЗаменить(ДанныеСтрокаЗанятостьТС, "_%Строка3%_", "_%Строка3%_"
			+ ?(ПустаяСтрока(ДанныеПросроченныеТК), "", ". ") + ДокументыТКВодитель);
	КонецЕсли;
			
	Если ПустаяСтрока(ДанныеДокументыТС + ДокументыВодитель) Тогда
		ДанныеСтрокаЗанятостьТС = СтрЗаменить(ДанныеСтрокаЗанятостьТС, "_%Строка2%_", НСтр("en='Alert on validity of documents no';ru='Предупреждений по сроку действия документов нет'"));
	Иначе
		ДанныеСтрокаЗанятостьТС = СтрЗаменить(ДанныеСтрокаЗанятостьТС, "_%Строка2%_", "");
	КонецЕсли;
	Если ПустаяСтрока(ДанныеПросроченныеТК + ДокументыТКВодитель) Тогда
		ДанныеСтрокаЗанятостьТС = СтрЗаменить(ДанныеСтрокаЗанятостьТС, "_%Строка3%_", НСтр("en='Warnings on duration of fuel cards no';ru='Предупреждений по сроку действия топливных карт нет'"));
	Иначе
		ДанныеСтрокаЗанятостьТС = СтрЗаменить(ДанныеСтрокаЗанятостьТС, "_%Строка3%_", "");
	КонецЕсли;
	
	Возврат ДанныеСтрокаЗанятостьТС;
КонецФункции

//Функция возвращает список видов ТС - прицепы\
//
Функция уатСписокВидовТСПрицепов()ЭКСПОРТ
	
	СписокПрицепов = Новый СписокЗначений;
	СписокПрицепов.Добавить(Перечисления.уатВидыТС.Полуприцеп);
	СписокПрицепов.Добавить(Перечисления.уатВидыТС.Прицеп);
	СписокПрицепов.Добавить(Перечисления.уатВидыТС.ПрицепСамосвал);
	СписокПрицепов.Добавить(Перечисления.уатВидыТС.ПрицепЦистерна);
	Возврат СписокПрицепов;
	
КонецФункции    

// Функция получает значения грузоподъемности и объема кузова для ТС
//  
// Параметры:
//  ТС           - транспортное средство параметры которого необходимо получить
//
// Возвращаемое значение:
//  Параметры - Структура - Структура, содержащая характеристики ТС
//
Функция уатПолучитьГрузоподъемностьИОбъемТС(ТС) Экспорт
	Параметры = Новый Структура("Грузоподъемность, ОбъемКузова");
	Если ТипЗнч(ТС) = Тип("СправочникСсылка.ТранспортныеСредства") И ЗначениеЗаполнено(ТС) тогда
		Параметры.Грузоподъемность = ТС.ГрузоподъемностьВТоннах;
		Параметры.ОбъемКузова      = ТС.ВместимостьВКубическихМетрах;
	Иначе 
		Параметры.Грузоподъемность = 0;
		Параметры.ОбъемКузова = 0;
	КОнецЕсли;
	Возврат Параметры;
КОнецФункции

// Функция возвращает место установки оборудования
//
Функция уатМестоУстановкиОборудования(вхОборудование) Экспорт
	
	Если ТипЗнч(вхОборудование) = Тип("Тип") ИЛИ вхОборудование = Неопределено ИЛИ вхОборудование = NULL Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =	"ВЫБРАТЬ
	|	уатСоставТС.ВСоставе
	|ИЗ
	|	РегистрСведений.уатСоставТС КАК уатСоставТС
	|ГДЕ
	|	уатСоставТС.ТС = &Оборудование";
	
	Запрос.УстановитьПараметр("Оборудование", вхОборудование);		
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаЗапроса.Следующий() Тогда
		Результат = ВыборкаЗапроса.ВСоставе;
	Иначе	
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // уатМестоУстановкиОборудования()

// Список ТС у которых подошел срок ТО
// 
// Параметры
//  ДатаТО - Дата, на которую нужно осуществлять проверку  
//  ТС -  ТС, для которого нужно проверить.
//  ВидТО - Вид проходимого ТО (например, ТО1)
// 
//
// Возвращаемое значение:
// РезультатЗапроса 
//
//
Функция уатСписокТСДляТО(ТС = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТС", ТС);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатПланированиеРемонтныхРабот.ТС,
	|	уатПланированиеРемонтныхРабот.ВидРемонта,
	|	уатПланированиеРемонтныхРабот.ДатаРемонта
	|ИЗ
	|	РегистрСведений.уатПланированиеРемонтныхРабот КАК уатПланированиеРемонтныхРабот
	|ГДЕ
	|	&УсловияЗапроса";
	
	Если ТС = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловияЗапроса", "ИСТИНА");
	ИначеЕсли ТипЗнч(ТС) = Тип("Массив") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловияЗапроса", "уатПланированиеРемонтныхРабот.ТС В (&ТС)");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловияЗапроса", "уатПланированиеРемонтныхРабот.ТС = &ТС");
	КонецЕСли;
	
	Возврат Запрос.Выполнить();
	
КонецФункции // уатСписокТСДляТО()


////////////////////////////////////////////////////////////////////////////////
// ВОДИТЕЛИ

// Функция - проверяет действительность документов на водителя
//
Функция уатПросроченныеДокументыВодителя(вхДата, вхДопускДней, вхВодитель, выхТаблицаДокументов = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =	"ВЫБРАТЬ
	|	уатДокументыВодителей.ВидДокумента,
	|	уатДокументыВодителей.Номер,
	|	уатДокументыВодителей.ДатаВыдачи,
	|	уатДокументыВодителей.ДатаОкончания,
	|	уатДокументыВодителей.Архив
	|ИЗ
	|	РегистрСведений.уатДокументыВодителей КАК уатДокументыВодителей
	|ГДЕ
	|	уатДокументыВодителей.ДатаОкончания <= &ДатаОкончания
	|	И уатДокументыВодителей.Сотрудник = &Сотрудник
	|	И уатДокументыВодителей.Архив = &Архив
	|	И уатДокументыВодителей.ДатаОкончания <> &ПустаяДата";
	
	Запрос.УстановитьПараметр("ДатаОкончания", вхДата + вхДопускДней * 24 * 60 * 60);		
	Запрос.УстановитьПараметр("ПустаяДата", Дата("00010101000000"));		
	Запрос.УстановитьПараметр("Сотрудник", вхВодитель);		
	Запрос.УстановитьПараметр("Архив", Ложь);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() > 0 Тогда
		Результат = Истина;
		выхТаблицаДокументов = РезультатЗапроса;
	Иначе	
		Результат = Ложь;
	КонецЕсли;
	Возврат Результат;
КонецФункции // уатПросроченныеДокументыВодителя()

// Функция - возвращает реквизиты водителя
//
Функция уатПрочитатьРеквизитыВодителя(вхВодитель, вхДата, ЕстьРегистрТиповойКонфигурации = Неопределено, вхОрганизация = Неопределено) Экспорт
	Результат = Новый Структура(
		"ТабельныйНомер, Наименование, Организация, ПодразделениеОрганизации, Должность, Класс, Позывной, НачислятьЗПВПЛ", "", "",,,, "", "", Ложь);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КадроваяИсторияСотрудниковСрезПоследних.Должность,
	|	КадроваяИсторияСотрудниковСрезПоследних.Организация,
	|	КадроваяИсторияСотрудниковСрезПоследних.Подразделение,
	|	КадроваяИсторияСотрудниковСрезПоследних.Сотрудник.Наименование КАК Наименование,
	|	КадроваяИсторияСотрудниковСрезПоследних.Сотрудник.Код КАК ТабельныйНомер,
	|	"" КАК Класс,
	|		"" КАК Позывной,
	|	ИСТИНА КАК НачислятьЗПВПЛ
	|ИЗ
	|	РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(
	|			&Дата,
	|			Сотрудник = &Сотрудник
	|				И ГоловнаяОрганизация = &ГоловнаяОрганизация
	|				И ФизическоеЛицо = &ФизическоеЛицо) КАК КадроваяИсторияСотрудниковСрезПоследних");
	Запрос.УстановитьПараметр("Дата", вхДата);
	Запрос.УстановитьПараметр("Сотрудник", вхВодитель);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", вхВодитель.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ФизическоеЛицо", вхВодитель.ФизическоеЛицо);
	Если ЗначениеЗаполнено(вхОрганизация) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Сотрудник = &Сотрудник", "Сотрудник = &Сотрудник
			|	И Организация = &Организация");
		Запрос.УстановитьПараметр("Организация", вхОрганизация);
	КонецЕсли;
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, ВыборкаРезультатаЗапроса);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции // уатПрочитатьРеквизитыВодителя

// Функция получает удостоверение водителя.
//
//Параметры:
//	ФизЛицо - водитель, входящий параметр
//	ДокументСерия - серия документа, исходящий параметр
//	ДокументНомер - номер документа, исходящий параметр
//	ДокументКатегория - категория документа, исходящий параметр
//
//Возвращаемое значение:
//	Булево. Истина, если документ найден.
//
Функция уатУдостоверениеВодителя(Сотрудник, ДокументСерия, ДокументНомер, ДокументКатегория) Экспорт
	
	ДокументСерия = "";
	ДокументНомер = "";
	ДокументКатегория = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатДокументыВодителей.Сотрудник,
	|	уатДокументыВодителей.ВидДокумента,
	|	уатДокументыВодителей.Серия,
	|	уатДокументыВодителей.Номер,
	|	уатДокументыВодителей.ДатаВыдачи КАК ДатаВыдачи,
	|	уатДокументыВодителей.ДатаОкончания,
	|	уатДокументыВодителей.КемВыдан,
	|	уатДокументыВодителей.Категория
	|ИЗ
	|	РегистрСведений.уатДокументыВодителей КАК уатДокументыВодителей
	|
	|ГДЕ
	|	уатДокументыВодителей.Сотрудник = &Сотрудник И
	|	уатДокументыВодителей.ВидДокумента = &ВидДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаВыдачи УБЫВ";
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ВидДокумента", Справочники.уатВидыДокументов.УдостоверениеВодителя);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокументыФизическихЛицСрезПоследних.Физлицо,
		|	ДокументыФизическихЛицСрезПоследних.ВидДокумента,
		|	ДокументыФизическихЛицСрезПоследних.Серия,
		|	ДокументыФизическихЛицСрезПоследних.Номер,
		|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи КАК ДатаВыдачи,
		|	ДокументыФизическихЛицСрезПоследних.СрокДействия,
		|	ДокументыФизическихЛицСрезПоследних.КемВыдан
		|ИЗ
		|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
		|			,
		|			Физлицо = &ФизЛицо
		|				И ВидДокумента = &ВидДокумента) КАК ДокументыФизическихЛицСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаВыдачи УБЫВ";
		Запрос.УстановитьПараметр("Физлицо", Сотрудник.ФизическоеЛицо);
		Запрос.УстановитьПараметр("ВидДокумента", Справочники.ВидыДокументовФизическихЛиц.ВодительскоеУдостоверение);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Результат = Ложь;
		Иначе
			РезультатВыборки = РезультатЗапроса.Выбрать();
			РезультатВыборки.Следующий();
			ДокументСерия = РезультатВыборки.Серия;
			ДокументНомер = РезультатВыборки.Номер;
			Результат = Истина;
		КонецЕсли;
	Иначе	
		РезультатВыборки = РезультатЗапроса.Выбрать();
		РезультатВыборки.Следующий();
		ДокументСерия = РезультатВыборки.Серия;
		ДокументНомер = РезультатВыборки.Номер;
		ДокументКатегория = РезультатВыборки.Категория;
		Результат = Истина;
	КонецЕсли;	
	Возврат Результат;
КонецФункции      

// Функция возвращает таблицу значений параметров выработки водителей 
//
// Параметры: 	
//  ТС           - ссылка на справочник ОС
//
// Возвращаемое значение: 
//  Список значений
//
Функция уатПараметрыВыработкиВодителей() ЭКСПОРТ
	
	//спПараметрыВыработки = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатПараметрыВыработки.Ссылка КАК ПараметрВыработки
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|ГДЕ
	|	уатПараметрыВыработки.ПометкаУдаления = &ПометкаУдаления
	|	И уатПараметрыВыработки.ДействуетНаСотрудников = &ДействуетНаСотрудников
	|
	|УПОРЯДОЧИТЬ ПО
	|	уатПараметрыВыработки.Ссылка.Наименование";
	
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	Запрос.УстановитьПараметр("ДействуетНаСотрудников", Истина);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//	спПараметрыВыработки.Добавить(Выборка.ПараметрВыработки);
	//КонецЦикла;
	//
	//Возврат спПараметрыВыработки;
	
КонецФункции // уатПараметрыВыработкиВодителей

// Возвращает таблицу пут. листов водителя
//
// Параметры:
//  Водитель     - водитель, путевые листы которого возвращаются
//  ДатаНач      - начало периода выборки путевых листов
//  ДатаКон      - конец периода выборки путевых листов
//  НомерПЛ      - номер путевого листа который необходимо выбрать
//  СтатусПЛ     - статус путевых листов, которые должны попасть в выборку
//  ПроведенПЛ   - признак того, что в выборку должны попасть только проведенные
//                 или непроведенные документы
//
// Возвращаемое значение:
//  Результат   - таблица значений
//
Функция уатПутевыеЛистыВодителя(Водитель, ДатаНач, ДатаКон, НомерПЛ = Неопределено, СтатусПЛ = Неопределено,
		ПроведенПЛ = Неопределено) ЭКСПОРТ
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	уатПутевойЛист.Ссылка
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|ГДЕ
	|	(уатПутевойЛист.Водитель1 = &Водитель
	|			ИЛИ уатПутевойЛист.Водитель2 = &Водитель
	|			ИЛИ уатПутевойЛист.Сотрудник1 = &Водитель
	|			ИЛИ уатПутевойЛист.Сотрудник2 = &Водитель)
	|	И уатПутевойЛист.ПометкаУдаления <> &ПометкаУдаления
	|	И уатПутевойЛист.ДатаВыезда >= &ДатаВыезда
	|	И уатПутевойЛист.ДатаВозвращения <= &ДатаВозвращения";
	
	Запрос.УстановитьПараметр("ДатаВыезда", ДатаНач);
	Запрос.УстановитьПараметр("ДатаВозвращения", ДатаКон);
	Запрос.УстановитьПараметр("Водитель", Водитель);
	Запрос.УстановитьПараметр("ПометкаУдаления", Истина);
	
	Если НомерПЛ <> Неопределено Тогда
		Запрос.Текст = СокрЛП(Запрос.Текст)	+ " И
		|	уатПутевойЛист.Номер = &НомерПЛ";
	КонецЕсли;
	
	Если СтатусПЛ <> Неопределено Тогда
		Запрос.Текст = СокрЛП(Запрос.Текст)	+ " И
		|	уатПутевойЛист.Рассчитан = &СтатусПЛ";
		Запрос.УстановитьПараметр("Рассчитан", СтатусПЛ);
	КонецЕсли;
	
	Если ПроведенПЛ <> Неопределено Тогда
		Запрос.Текст = СокрЛП(Запрос.Текст)	+ " И
		|	уатПутевойЛист.Проведен = &Проведен";
		Запрос.УстановитьПараметр("Проведен", ПроведенПЛ);
	КонецЕсли;
	
	Запрос.Текст = СокрЛП(Запрос.Текст)	+ "
	|УПОРЯДОЧИТЬ ПО
	|	уатПутевойЛист.ДатаВыезда УБЫВ";
	
	РезультатТаблица = Запрос.Выполнить().Выгрузить();
	Возврат РезультатТаблица;
КонецФункции // уатПутевыеЛистыВодителя       

// Возвращает признак того, что сотрудник на указанную дату
//работает по своему графику.
//
Функция СотрудникРаботаетПоГрафику(вхДата, вхСотрудник, вхОрганизация, флГрафикНайден = ЛОЖЬ) Экспорт
	ТекущийГрафикРаботы = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	КадровыеДанныеСотрудника = уатИнтерфейсВзаимодействияСERPСервер.уатКадровыеДанныеСотрудников(Истина, вхСотрудник, "ГрафикРаботы", вхДата);
	Если КадровыеДанныеСотрудника.Количество() > 0 Тогда
		ТекущийГрафикРаботы = КадровыеДанныеСотрудника[0].ГрафикРаботы;
	КонецЕсли; 
	УстановитьПривилегированныйРежим(Ложь);
	
	флГрафикНайден = ЗначениеЗаполнено(ТекущийГрафикРаботы);
	Если НЕ флГрафикНайден Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Запрос1 = Новый Запрос;
	Запрос1.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
	|	ГрафикиРаботыПоВидамВремени.Дата,
	|	ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение,
	|	ГрафикиРаботыПоВидамВремени.ВидУчетаВремени
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &ГрафикРаботы
	|	И ГрафикиРаботыПоВидамВремени.Дата = &ДатаНач
	|	И (НЕ ГрафикиРаботыПоВидамВремени.ОсновноеЗначение = 0)
	|	И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя)
	|	ИЛИ ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.Явка))";
	Запрос1.УстановитьПараметр("ГрафикРаботы"   , ТекущийГрафикРаботы);
	Запрос1.УстановитьПараметр("ДатаНач"        , НачалоДня(вхДата));
	Запрос1.УстановитьПараметр("ДатаКон"        , КонецДня(вхДата));
	
	Результат1 = Запрос1.Выполнить();
	
	Возврат (НЕ Результат1.Пустой());
КонецФункции

// Функция возвращает ФИО физ. лица или юридического лица организации
//Параметры:
//	ФизЛицо  физ. лицо или организация
//Возвращаемое значение:
//	Структура - ключи Фамилия, Имя, Отчество,
//	если инициалы не найдены, то возвращается Неопределено
//
Функция уатФИОФизЛица(ФизЛицо, Знач ТекДата = Неопределено) Экспорт
	Если НЕ уатРаботаСМетаданными.уатЕстьРегистрСведений("ФИОФизическихЛиц") Тогда
		Если уатРаботаСМетаданными.ЕстьСправочник("ФизическиеЛица")
			И (ТипЗнч(ФизЛицо) = Тип("СправочникСсылка.ФизическиеЛица") ИЛИ ТипЗнч(ФизЛицо) = Тип("СправочникОбъект.ФизическиеЛица"))
			И уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("ФИО", "ФизическиеЛица") Тогда
			Возврат ФизЛицо.ФИО;
			
		ИначеЕсли уатРаботаСМетаданными.ЕстьСправочник("Организации")
			И (ТипЗнч(ФизЛицо) = Тип("СправочникСсылка.Организации") ИЛИ ТипЗнч(ФизЛицо) = Тип("СправочникОбъект.Организации")) Тогда
			Возврат ФизЛицо.Наименование;
			
		КонецЕсли;
		
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТекДата = Неопределено Тогда
		ТекДата = ТекущаяДата();
	КонецЕсли;
		
	Табл = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(ТекДата, Новый Структура("ФизическоеЛицо", ФизЛицо));
	Если Табл.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		//Возврат Табл[0].Фамилия + " " + Табл[0].Имя + " " + Табл[0].Отчество;
		Возврат Новый Структура("Фамилия, Имя, Отчество", Табл[0].Фамилия, Табл[0].Имя, Табл[0].Отчество);
	КонецЕсли;
КонецФункции

// Функция возвращает полное ФИО физ. лица или юридического лица организации
//Параметры:
//	ФизЛицо  физ. лицо или организация,
//	ТекДата - дата текущего ФИО
//	флПодставлятьИнициалыФизЛицаЕслиНетФИО - флаг подстановки инициалов, если ФИО не обнаружено
//Возвращаемое значение:
//	Строка - представление ФИО физ. лица
//
Функция уатФИОСотрудникаПолноеСтрокой(Знач ФизЛицо, Знач ТекДата = Неопределено, 
	флПодставлятьИнициалыФизЛицаЕслиНетФИО = Истина) Экспорт
	
	Если ТипЗнч(ФизЛицо) = Тип("СправочникСсылка.Сотрудники") ИЛИ 
		ТипЗнч(ФизЛицо) = Тип("СправочникОбъект.Сотрудники") Тогда
		Если ЗначениеЗаполнено(ФизЛицо.ФизическоеЛицо) Тогда
			ФизЛицо = ФизЛицо.ФизическоеЛицо;
		Иначе
			Возврат уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ФизЛицо);
		КонецЕсли;
	КонецЕсли;
	
	ФИО = уатФИОФизЛица(ФизЛицо, ТекДата);
	Если ФИО = Неопределено Тогда //возвращаем инициалы физ. лица
		Если флПодставлятьИнициалыФизЛицаЕслиНетФИО Тогда
			Возврат уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ФизЛицо);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе //возвращаем полное ФИО
		Если ТипЗнч(ФИО) = Тип("Структура") Тогда
			Возврат ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество;
		Иначе
			Возврат ФИО;
		КонецЕсли;
	КонецЕсли;
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРЕЙСКУРАНТЫ НА УСЛУГИ

// Функция получает список (массив) всех родителей для указанного элемента/группы справочника
//
Функция СписокРодителейЭлементаСправочника(СпрСсылка)
	мсвРез = Новый Массив;
	
	ТекРодитель = СпрСсылка.Родитель;
	Пока ЗначениеЗаполнено(ТекРодитель) Цикл
		мсвРез.Добавить(ТекРодитель);
		ТекРодитель = ТекРодитель.Родитель;
	КонецЦикла;
		
	Возврат мсвРез;
КонецФункции

// Функция возвращает ссылку на справочник прейскурантов
//
// Параметры:
//  СписокФильтров:  Структура фильтров
//	ПолучатьТолькоОдинТарифПоПараметрамВыработки
//
// Алгоритм поиска прейскуранта: ищется последний по дате и больший по номеру прейскурант,
//	удовлетворяющий наибольшему количеству фильтров
//
Функция уатНайтиПрейскурант(Знач СписокФильтров, Знач Организация = Неопределено, Знач Дата = Неопределено, 
		ПолучатьТолькоОдинТарифПоПараметрамВыработки = Ложь) ЭКСПОРТ
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.ТекущийПользователь(),
			"ОсновнаяОрганизация");
	КонецЕсли;
	
	//разбираем входной фильтр
	Если ТипЗнч(СписокФильтров) <> Тип("Структура") Тогда
		СписокФильтров = Новый Структура;
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("Тягач") Тогда
		СписокФильтров.Вставить("Тягач", Справочники.ТранспортныеСредства.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("МодельТягача") Тогда
		СписокФильтров.Вставить("МодельТягача", Справочники.уатМоделиТС.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("ТипТягача") Тогда
		СписокФильтров.Вставить("ТипТягача", Справочники.ТипыТранспортныхСредств.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("Прицеп") Тогда
		СписокФильтров.Вставить("Прицеп", Справочники.ТранспортныеСредства.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("МодельПрицепа") Тогда
		СписокФильтров.Вставить("МодельПрицепа", Справочники.уатМоделиТС.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("ТипПрицепа") Тогда
		СписокФильтров.Вставить("ТипПрицепа", Справочники.ТипыТранспортныхСредств.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("Контрагент") Тогда
		СписокФильтров.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("ДоговорКонтрагента") Тогда
		СписокФильтров.Вставить("ДоговорКонтрагента", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("Маршрут") Тогда
		СписокФильтров.Вставить("Маршрут", Справочники.уатМаршруты.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("Номенклатура") Тогда
		СписокФильтров.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("ОбъектСтроительства") Тогда
		СписокФильтров.Вставить("ОбъектСтроительства", Справочники.СМ_ОбъектыСтроительства.ПустаяСсылка());
	КонецЕсли;
	
	//вводим структуру видов областей действия тарифа, ключи - это возможные имена областей,
	//значения - поля компоновки (добавлены для сравнения с настройками отборов тарифа)
	СтруктураВидовОбластейТарифа = Новый Структура;
	СтруктураВидовОбластейТарифа.Вставить("Тягач", Новый ПолеКомпоновкиДанных("Тягач"));
	СтруктураВидовОбластейТарифа.Вставить("МодельТягача", Новый ПолеКомпоновкиДанных("МодельТягача"));
	СтруктураВидовОбластейТарифа.Вставить("ТипТягача", Новый ПолеКомпоновкиДанных("ТипТягача"));
	СтруктураВидовОбластейТарифа.Вставить("Прицеп", Новый ПолеКомпоновкиДанных("Прицеп"));
	СтруктураВидовОбластейТарифа.Вставить("МодельПрицепа", Новый ПолеКомпоновкиДанных("МодельПрицепа"));
	СтруктураВидовОбластейТарифа.Вставить("ТипПрицепа", Новый ПолеКомпоновкиДанных("ТипПрицепа"));
	СтруктураВидовОбластейТарифа.Вставить("Контрагент", Новый ПолеКомпоновкиДанных("Контрагент"));
	СтруктураВидовОбластейТарифа.Вставить("ДоговорКонтрагента", Новый ПолеКомпоновкиДанных("ДоговорКонтрагента"));
	СтруктураВидовОбластейТарифа.Вставить("Маршрут", Новый ПолеКомпоновкиДанных("Маршрут"));
	СтруктураВидовОбластейТарифа.Вставить("Номенклатура", Новый ПолеКомпоновкиДанных("Номенклатура"));
	
	Запрос = Новый Запрос;
	Запрос.Текст =  
	"ВЫБРАТЬ
	|	уатПрейскурантыТС.Прейскурант КАК Прейскурант,
	|	ТарифыТС.Ссылка КАК Тариф,
	|	0 КАК СтепеньСовпаденияФильтров,
	|	ТарифыТС.ПараметрВыработки КАК ПараметрВыработки,
	|	уатПрейскурантыТС.ДатаНачала
	|ИЗ
	|	Справочник.уатТарифыТС КАК ТарифыТС
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	РегистрСведений.уатПрейскурантыТС КАК уатПрейскурантыТС
	|ПО ТарифыТС.Владелец = уатПрейскурантыТС.Прейскурант
	|ГДЕ
	|	ТарифыТС.Владелец.Организация = &Организация
	|	И уатПрейскурантыТС.ДатаНачала <= &Дата
	|	И (уатПрейскурантыТС.ДатаОкончания >= &Дата
	|			ИЛИ уатПрейскурантыТС.ДатаОкончания = &ПустаяДата)
	|	И (НЕ ТарифыТС.ПометкаУдаления)
	|	И (НЕ ТарифыТС.ЭтоГруппа)
	|
	|СГРУППИРОВАТЬ ПО
	|	уатПрейскурантыТС.Прейскурант,
	|	уатПрейскурантыТС.ДатаНачала,
	|	ТарифыТС.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	уатПрейскурантыТС.ДатаНачала УБЫВ,
	|	ТарифыТС.Владелец.Код УБЫВ";
		
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", НачалоДня(Дата));
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	
	тблТарифы = Запрос.Выполнить().Выгрузить();
	мсвСтрокУдаления = Новый Массив;
	
	СхемаКомпоновкиДанных = Справочники.уатТарифыТС.ПолучитьМакет("КомпоновкаДанныхОбластьДействия");
	
	//учтем пустые справочники
	КоличествоЗаполненныхСправочников = СтруктураВидовОбластейТарифа.Количество();
	СпрСписок = Новый Структура("ТранспортныеСредства, Контрагенты, ДоговорыКонтрагентов, Номенклатура, уатМаршруты");
	Для Каждого ТекСпр Из СпрСписок Цикл
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Ссылка
		|ИЗ
		|	Справочник." + ТекСпр.Ключ + " КАК Спр");
		РезПустой = Запрос.Выполнить().Пустой();
		Если РезПустой Тогда
			КоличествоЗаполненныхСправочников = КоличествоЗаполненныхСправочников - ?(ТекСпр.Ключ = "ТранспортныеСредства", 6, 1);
		КонецЕсли;
	КонецЦикла;
		
	Для Каждого ТекСтрокаТариф Из тблТарифы Цикл
		//получаем структуру области действия тарифа из хранилища значений
		ОблДействияТарифа = ТекСтрокаТариф.Тариф.ОбластьДействия.Получить(); 
		
		//оставляем "общий" тариф - тариф с незаполненной областью действия
		Если ТипЗнч(ОблДействияТарифа) <> Тип("НастройкиКомпоновкиДанных") ИЛИ ОблДействияТарифа.Отбор.Элементы.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекСтрока Из ОблДействияТарифа.Отбор.Элементы Цикл
			Если ТекСтрока.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("") Тогда 
				ТекСтрока.Использование = Ложь;
			КонецЕсли;
		КонецЦикла;

		
		КоличОбщихФильтров = 0;
		
		//удаляем тариф, у которого область содержит непустое значение, а во входном фильтре - пустое
		//а также считаем количество "общих" фильтров (во входном фильтре значение заполнено, а в области действия - нет)
		флТарифНеПодходит = Ложь;
		Для Каждого ТекВидОбластиДействия Из СтруктураВидовОбластейТарифа Цикл
			ИмяВидаОбластиДействия = ТекВидОбластиДействия.Ключ;
			
			ОбластьЕстьВТарифе = Ложь;
			Для Каждого ТекОбластьДействия Из ОблДействияТарифа.Отбор.Элементы Цикл
				Если ТекОбластьДействия.ЛевоеЗначение = ТекВидОбластиДействия.Значение И ТекОбластьДействия.Использование Тогда
					ОбластьЕстьВТарифе = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			ЗначениеФильтраЗаполнено = Ложь;
			Если ТипЗнч(СписокФильтров[ИмяВидаОбластиДействия]) = Тип("СписокЗначений") Тогда
				ЗначениеФильтраЗаполнено = (СписокФильтров[ИмяВидаОбластиДействия].Количество() > 0);
				Если ЗначениеФильтраЗаполнено Тогда
					Для Каждого ТекФильтр Из СписокФильтров[ИмяВидаОбластиДействия] Цикл
						Если НЕ ЗначениеЗаполнено(ТекФильтр.Значение) Тогда
							ЗначениеФильтраЗаполнено = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			Иначе
				ЗначениеФильтраЗаполнено = ЗначениеЗаполнено(СписокФильтров[ИмяВидаОбластиДействия]);
			КонецЕсли;
			
			Если (НЕ ОбластьЕстьВТарифе) И ЗначениеФильтраЗаполнено Тогда
				КоличОбщихФильтров = КоличОбщихФильтров + 1;
			КонецЕсли;
			
			Если ОбластьЕстьВТарифе И НЕ ЗначениеФильтраЗаполнено Тогда
				флТарифНеПодходит = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если флТарифНеПодходит Тогда
			мсвСтрокУдаления.Добавить(ТекСтрокаТариф);
			Продолжить;
		КонецЕсли;
		
		//ниже обрабатыватся тарифы, у которых либо одна из областей действия отсутствует (общий случай совпадений, не увеличивает степень совпадения фильтра),
		//либо заполнены и область действия тарифа, и входящий фильтр, соотв. этой области действия (частный случай совпадения, увеличивает степень совпадения фильтра)
		
		//по каждому виду области действия добавляем соотв. входной фильтр
		Для Каждого ТекВидОбластиДействия Из СтруктураВидовОбластейТарифа Цикл
			ИмяВидаОбластиДействия = ТекВидОбластиДействия.Ключ;
			
			//добавляем отбор из входного фильтра
			ТекВхЗначение = СписокФильтров[ИмяВидаОбластиДействия];
			Если ТипЗнч(ТекВхЗначение) <> Тип("СписокЗначений") Тогда
				ТекВхЗначение = Новый СписокЗначений;
				ТекВхЗначение.Добавить(СписокФильтров[ИмяВидаОбластиДействия]);
			КонецЕсли;
			
			//незаполненные входные фильтры здесь игнорируем, мы их учли уже выше
			//(для пустых фильтров:
			//	- если соотв. область действия есть, то тариф не подходит,
			//	- если соотв. области действия нет, тариф учитывается, и доп отбор можно не ставить)
			ЗначениеФильтраЗаполнено = (ТекВхЗначение.Количество() > 0);
			Если ЗначениеФильтраЗаполнено Тогда
				Для Каждого ТекФильтр Из ТекВхЗначение Цикл
					Если НЕ ЗначениеЗаполнено(ТекФильтр.Значение) Тогда
						ЗначениеФильтраЗаполнено = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если НЕ ЗначениеФильтраЗаполнено Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйОтборПоФильтру = ОблДействияТарифа.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтборПоФильтру.Использование = Истина;
			НовыйОтборПоФильтру.ЛевоеЗначение = ТекВидОбластиДействия.Значение;
			НовыйОтборПоФильтру.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			НовыйОтборПоФильтру.ПравоеЗначение = ТекВхЗначение;
		КонецЦикла;
		
		// Выводим результат компоновки в таблицу значений
		// Для этого к пустым настройкам (в них есть только отбор) добавляем группировку
		Группировка = ОблДействияТарифа.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Группировка.Использование = Истина;
		// и выбранные поля
		ПолеВыбора = ОблДействияТарифа.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
		ПолеВыбора.Использование = Истина;
		ПолеВыбора = ОблДействияТарифа.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("Раздел");
		ПолеВыбора.Использование = Истина;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, ОблДействияТарифа,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		//Создадим и инициализируем процессор компоновки
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
		
		//Создадим и инициализируем процессор вывода результата и выводим в таблицу
		тблРез = Новый ТаблицаЗначений;
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(тблРез);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		
		Если КоличествоЗаполненныхСправочников > тблРез.Количество() Тогда //тариф не подходит
			мсвСтрокУдаления.Добавить(ТекСтрокаТариф);
			Продолжить;
		КонецЕсли;
		
		ТекСтрокаТариф.СтепеньСовпаденияФильтров = КоличествоЗаполненныхСправочников - КоличОбщихФильтров;
	КонецЦикла;
	
	//удаляем неподходящие тарифы
	Для Каждого ТекСтрокаУдаления Из мсвСтрокУдаления Цикл
		тблТарифы.Удалить(ТекСтрокаУдаления);
	КонецЦикла;
		
	КоличТарифов = тблТарифы.Количество();
	
	Если КоличТарифов > 0 Тогда
		мсвПараметрыВыработки = Новый Массив;
		
		//нужно оставить только строки для последнего по порядку прейскуранта (актуального)
		АктуальныйПрейскурант = тблТарифы[0].Прейскурант;
		мсвСтрокУдаления = Новый Массив;
		Для Каждого ТекСтрока Из тблТарифы Цикл
			Если ТекСтрока.Прейскурант <> АктуальныйПрейскурант Тогда
				мсвСтрокУдаления.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ТекСтрока Из мсвСтрокУдаления Цикл
			тблТарифы.Удалить(ТекСтрока);
		КонецЦикла;
		
		//оставим только тарифы с максимальной степенью совпадения фильтров
		мсвСтрокУдаления = Новый Массив;
		тблТарифы.Сортировать("СтепеньСовпаденияФильтров УБЫВ");
		тблПараметрыВыработки = тблТарифы.Скопировать();
		тблПараметрыВыработки.Свернуть("ПараметрВыработки");
		Для Каждого ТекПараметрВыработки Из тблПараметрыВыработки Цикл
			МаксСтепеньСовпадения = 0;
			СчТариф = 0;
			Для Каждого ТекСтрока Из тблТарифы Цикл
				Если ТекПараметрВыработки.ПараметрВыработки <> ТекСтрока.ПараметрВыработки Тогда
					Продолжить;
				КонецЕсли;
				СчТариф = СчТариф + 1;
				
				МаксСтепеньСовпадения = Макс(ТекСтрока.СтепеньСовпаденияФильтров, МаксСтепеньСовпадения);
				
				Если ПолучатьТолькоОдинТарифПоПараметрамВыработки И СчТариф > 1 Тогда
					мсвСтрокУдаления.Добавить(ТекСтрока);
				ИначеЕсли ТекСтрока.СтепеньСовпаденияФильтров < МаксСтепеньСовпадения Тогда
					мсвСтрокУдаления.Добавить(ТекСтрока);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Для Каждого ТекСтрока Из мсвСтрокУдаления Цикл
			тблТарифы.Удалить(ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
	Возврат тблТарифы;
КонецФункции // уатНайтиПрейскуранты       

// Функция проверяет пересечение периодов и возвращает количество секунд пересечения
//
// Параметры:
//  ВремяНачало, ВремяКонец       - тип время
//  УслугаНачало, УслугаКонец       - тип дата
//
// Возвращаемое значение:
//  Длительность в секундах пересечения интервалов
//
Функция уатПересечениеПериодовВремени(ВремяНачало, ВремяКонец, УслугаНачало, УслугаКонец) Экспорт
	
	ВремяПересечения = 0;

	Если ВремяНачало > ВремяКонец тогда //переходящий через сутки тариф
		
		ВремяПересечения = уатПересечениеПериодовВремени(ВремяНачало, Дата('00010101235959'), УслугаНачало, УслугаКонец);
		ВремяПересечения = ВремяПересечения + уатПересечениеПериодовВремени(Дата('00010101000000'), ВремяКонец, 
			УслугаНачало, УслугаКонец);
		
	ИначеЕсли НачалоДня(УслугаНачало) <> НачалоДня(УслугаКонец) тогда
		
		ТабИнтервалов = Новый ТаблицаЗначений;
		ТабИнтервалов.Колонки.Добавить("Начало");
		ТабИнтервалов.Колонки.Добавить("Конец");
		РабДата = НачалоДня(УслугаНачало);
		Пока НачалоДня(РабДата) < НачалоДня(УслугаКонец) цикл
			НовСтрока = ТабИнтервалов.Добавить();
			Если рабДата = НачалоДня(УслугаНачало) тогда
				НовСтрока.Начало = Дата(1,1,1,Час(УслугаНачало),Минута(УслугаНачало),Секунда(УслугаНачало));
				НовСтрока.Конец  = Дата('00010101235959');
			Иначе
				НовСтрока.Начало = Дата('00010101000000');
				НовСтрока.Конец  = Дата('00010101235959');
			КонецЕсли;
			РабДата = РабДата + 86400;
		КонецЦикла;
		НовСтрока = ТабИнтервалов.Добавить();
		НовСтрока.Начало = Дата('00010101000000');
		НовСтрока.Конец  = Дата(1,1,1,Час(УслугаКонец),Минута(УслугаКонец),Секунда(УслугаКонец));
		
		Для каждого ТекСтрока ИЗ ТабИнтервалов Цикл
			ВремяПересечения = ВремяПересечения + уатПересечениеПериодовВремени(ВремяНачало, ВремяКонец,
				ТекСтрока.Начало, ТекСтрока.Конец);
		КонецЦикла;
		
	Иначе
		
		ТабИнтервалов = Новый ТаблицаЗначений;
		ТабИнтервалов.Колонки.Добавить("Начало");
		ТабИнтервалов.Колонки.Добавить("Конец");
		НовСтрока = ТабИнтервалов.Добавить();
		НовСтрока.Начало = Дата(1,1,1,Час(ВремяНачало),Минута(ВремяНачало),Секунда(ВремяНачало));
		НовСтрока.Конец  = Дата(1,1,1,Час(ВремяКонец),Минута(ВремяКонец),Секунда(ВремяКонец));
		НовСтрока = ТабИнтервалов.Добавить();
		НовСтрока.Начало = Дата(1,1,1,Час(УслугаНачало),Минута(УслугаНачало),Секунда(УслугаНачало));
		НовСтрока.Конец  = Дата(1,1,1,Час(УслугаКонец ),Минута(УслугаКонец ),Секунда(УслугаКонец ));

		ТабИнтервалов.Сортировать("Начало");
		Если ТабИнтервалов[1].Начало > ТабИнтервалов[0].Конец тогда
			ВремяПересечения  = 0;
		Иначе
			мНач = Макс(ТабИнтервалов[0].Начало,ТабИнтервалов[1].Начало);
			мКон = Мин(ТабИнтервалов[0].Конец,ТабИнтервалов[1].Конец);
			ВремяПересечения  = мКон - мНач;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВремяПересечения;
	
КонецФункции

// уатПарсерУсловия()
// Параметры: Значение1 - число, Значение2 - число, Знак - перечисление "ЗнакСравнения"
// Возвращаемое значение: Истина, Ложь
// Описание: Проверка простого условия по перечислению "ЗнакиСравнения"
Функция  уатПарсерУсловия(Значение1,Значение2,Знак)
	
	Значение1 = Число(Значение1);
	Значение2 = Число(Значение2);
	
	Результат = Ложь;
	
	Если Не ЗначениеЗаполнено(Знак) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Знак = Перечисления.уатЗнакиСравнения.Больше Тогда
		Если Значение1 > Значение2 Тогда
			Результат = Истина;
		КонецЕсли;
		
	ИначеЕсли Знак = Перечисления.уатЗнакиСравнения.БольшеИлиРавно Тогда
		Если Значение1 >= Значение2 Тогда
			Результат = Истина;
		КонецЕсли;
		
	ИначеЕсли Знак = Перечисления.уатЗнакиСравнения.Меньше Тогда
		Если Значение1 < Значение2 Тогда
			Результат = Истина;
		КонецЕсли;
		
	ИначеЕсли Знак = Перечисления.уатЗнакиСравнения.МеньшеИлиРавно Тогда
		Если Значение1 <= Значение2 Тогда
			Результат = Истина;
		КонецЕсли;
		
	ИначеЕсли Знак = Перечисления.уатЗнакиСравнения.Равно Тогда
		Если Значение1 = Значение2 Тогда
			Результат = Истина;
		КонецЕсли;
		
	ИначеЕсли Знак = Перечисления.уатЗнакиСравнения.НеРавно Тогда
		Если Значение1 <> Значение2 Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //  глУсловие

// Функция проверяет соответствие условию строки тарифа
// Параметры:
//		НомерГруппировки       - номер условия
//		СтрокаТарифа       - строка табл. части прейскуранта
//
Функция уатПроверкаУсловияТарифа(Тариф, НомерГруппировки, СтрокаТаблицыРасчетаТарифа, Расстояние, ВремяРаботы, 
		Грузоподъемность, КлассГруза)
	//Перем Условие; // тип условия - перечисление "РеквизитыТарифов"
	//Перем ЗначениеУсловия;
	//Перем ЗнакУсловия; // знак условия группировки тарифа
	//Перем ЗначениеГруппировки; // значение условия группировки тарифа
	
	Если НомерГруппировки = 1 Тогда
		Условие = Тариф.ГруппировкаТарифа1;
		ЗнакУсловия = СтрокаТаблицыРасчетаТарифа.ЗнакГруппировки1;
		ЗначениеГруппировки = СтрокаТаблицыРасчетаТарифа.ЗначениеГруппировки1;
		
	ИначеЕсли НомерГруппировки = 2 Тогда
		Условие = Тариф.ГруппировкаТарифа2;
		ЗнакУсловия = СтрокаТаблицыРасчетаТарифа.ЗнакГруппировки2;
		ЗначениеГруппировки = СтрокаТаблицыРасчетаТарифа.ЗначениеГруппировки2;
		
	ИначеЕсли НомерГруппировки = 3 Тогда
		Условие = Тариф.ГруппировкаТарифа3;
		ЗнакУсловия = СтрокаТаблицыРасчетаТарифа.ЗнакГруппировки3;
		ЗначениеГруппировки = СтрокаТаблицыРасчетаТарифа.ЗначениеГруппировки3;
	Иначе	
		Возврат Ложь;
	КонецЕсли;
	
	// если в тарифе знак или значение группировки не указаны, то условие верно
	Если Не (ЗначениеЗаполнено(ЗнакУсловия) И ЗначениеЗаполнено(ЗначениеГруппировки)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Условие = Перечисления.уатГруппировкиТарифов.Грузоподъемность Тогда
		ЗначениеУсловия = Грузоподъемность;
	ИначеЕсли Условие = Перечисления.уатГруппировкиТарифов.Расстояние Тогда
		ЗначениеУсловия = Расстояние;
	ИначеЕсли Условие = Перечисления.уатГруппировкиТарифов.ВремяРаботы Тогда
		ЗначениеУсловия = ВремяРаботы;
	ИначеЕсли Условие = Перечисления.уатГруппировкиТарифов.КлассГруза Тогда
		ЗначениеУсловия = КлассГруза;
	КонецЕсли;
	
	Результат = уатПарсерУсловия(ЗначениеУсловия, ЗначениеГруппировки, ЗнакУсловия);
	
	Возврат Результат;
КонецФункции // уатПроверкаУсловияТарифа       

// Функция возвращает значение тарифа
//
// Параметры:
//  Прейскурант - ссылка справочника Прейскуранты
//  Расстояние - значение расстояние перевозки
//  ВремяРаботы - значение времени работы
//  Грузоподъемность - грузоподъемность трансп. средств
//  КлассГруза - значение класса груза
//
Функция уатНайтиТариф(Тариф, Расстояние, ВремяРаботы, Грузоподъемность, КлассГруза) ЭКСПОРТ
	Если Не Тариф.СложныйТариф Тогда
		Возврат Тариф.Тариф;
	КонецЕсли;              
	
	Результат = 0;
	Для Каждого ТекСтрока Из Тариф.Тарифы Цикл
		Если ЗначениеЗаполнено(Тариф.ГруппировкаТарифа1) Тогда
			Если Не уатПроверкаУсловияТарифа(Тариф, 1, ТекСтрока, Расстояние, ВремяРаботы, Грузоподъемность, КлассГруза) Тогда
				Продолжить;
			КонецЕсли;              
		КонецЕсли;              
		Если ЗначениеЗаполнено(Тариф.ГруппировкаТарифа2) Тогда
			Если Не уатПроверкаУсловияТарифа(Тариф, 2, ТекСтрока, Расстояние, ВремяРаботы, Грузоподъемность, КлассГруза) Тогда
				Продолжить;
			КонецЕсли;              
		КонецЕсли;              
		Если ЗначениеЗаполнено(Тариф.ГруппировкаТарифа3) Тогда
			Если Не уатПроверкаУсловияТарифа(Тариф, 3, ТекСтрока, Расстояние, ВремяРаботы, Грузоподъемность, КлассГруза) Тогда
				Продолжить;
			КонецЕсли;              
		КонецЕсли;              
		Результат = ТекСтрока.Тариф;
		Прервать;
	КонецЦикла;	
	
	Возврат Результат;
КонецФункции // уатНайтиПрейскурант       

// Функция возвращает количество выработки
//Параметры: Количество - время в секундах
//Если параметр выработки - время, то производится пересчет в ЧЧ.Десятые доли.
//
Функция уатКоличествоВыработкиДляРасчетаСтоимости(ПараметрВыработки, Количество)	Экспорт
	Если ПараметрВыработки.Временный Тогда
		мКоличество = Количество / 3600;
	Иначе
		мКоличество = Количество;
	КонецЕсли;	
	
	Возврат мКоличество;
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////
// ТАРИФЫ ЗАРПЛАТЫ

// Функция определяет находится ли тариф зарплаты в области действия
//
// Параметры:
//  ТарифЗП - ссылка справочника ТарифыЗП
//  Организация - входящая организация документа, по которому используем тариф
//	СтруктураОбластьДействия - структура области действия с ключами [ТС, МодельТС, Маршрут, Контрагент, ВидРемонта].
//		В качестве значений структуры могут выступать как ссылки, так и списки ссылок
//  ВесСовпаденияФильтров - если общий тариф, то 0. Если область действия содержит например модель,
//		указанную в фильтре, то вес будет 1. Если таких совпадений n то вес = n.
//	Если имеется несовпадение по типу области значения области со значением фильтра,
//		то вес устанавливаем -1 (такой тариф не подходит вообще).
//
// Алгоритм поиска:
//Случай, когда в табличной части «Фильтр» заполнены несколько строк с одинаковым типом (например Модели ТС).
//	Для путевого листа данный тариф будет применяться только в том случае, если модель тягача в путевом листе совпадет
//	с одним из значений строк фильтра. 
//Случай, когда в табличной части «Фильтр» заполнены несколько строк с разными типами (например Модели ТС и Маршруты).
//	Для путевого листа данный тариф будет применяться только в том случае, когда одновременно будут выполнены
//	два условия:
//		1. Если модель тягача в путевом листе совпадет с одним из значений строк фильтра с типом Модель ТС;
//		2. В табличной части путевого листа  "Задание" есть хоть одна строка, в которой реквизит "Маршрут" совпадет
//			с одним из значений строк фильтра с типом Маршруты.
//
Функция уатТарифЗПВОбластиДействия(ТарифЗП, Организация, СтруктураОбластьДействия, ВесСовпаденияФильтров = 0) ЭКСПОРТ
	//дозаполним структуру для корректной работы функции
	Если НЕ СтруктураОбластьДействия.Свойство("ТС") Тогда
		СтруктураОбластьДействия.Вставить("ТС", Неопределено);
	КонецЕсли;
	Если НЕ СтруктураОбластьДействия.Свойство("МодельТС") Тогда
		СтруктураОбластьДействия.Вставить("МодельТС", Неопределено);
	КонецЕсли;
	Если НЕ СтруктураОбластьДействия.Свойство("ТипТС") Тогда
		СтруктураОбластьДействия.Вставить("ТипТС", Неопределено);
	КонецЕсли;
	Если НЕ СтруктураОбластьДействия.Свойство("Маршрут") Тогда
		СтруктураОбластьДействия.Вставить("Маршрут", Неопределено);
	КонецЕсли;
	Если НЕ СтруктураОбластьДействия.Свойство("Контрагент") Тогда
		СтруктураОбластьДействия.Вставить("Контрагент", Неопределено);
	КонецЕсли;
	Если НЕ СтруктураОбластьДействия.Свойство("Подразделение") Тогда
		СтруктураОбластьДействия.Вставить("Подразделение", Неопределено);
	КонецЕсли;
	Если НЕ СтруктураОбластьДействия.Свойство("ВидРемонта") Тогда
		СтруктураОбластьДействия.Вставить("ВидРемонта", Неопределено);
	КонецЕсли;
	Если НЕ СтруктураОбластьДействия.Свойство("Прицепы") Тогда
		СтруктураОбластьДействия.Вставить("Прицепы", Новый Массив);
	КонецЕсли;
	Если НЕ СтруктураОбластьДействия.Свойство("ОбъектСтроительства") Тогда
		СтруктураОбластьДействия.Вставить("ОбъектСтроительства", Неопределено);
	КонецЕсли;
	Если НЕ СтруктураОбластьДействия.Свойство("ВидПеревозки") Тогда
		СтруктураОбластьДействия.Вставить("ВидПеревозки", Неопределено);
	КонецЕсли;
	Если НЕ СтруктураОбластьДействия.Свойство("ПунктОтправления") Тогда
		СтруктураОбластьДействия.Вставить("ПунктОтправления", Неопределено);
	КонецЕсли;
	Если НЕ СтруктураОбластьДействия.Свойство("ПунктНазначения") Тогда
		СтруктураОбластьДействия.Вставить("ПунктНазначения", Неопределено);
	КонецЕсли;
	Если НЕ СтруктураОбластьДействия.Свойство("Номенклатура") Тогда
		СтруктураОбластьДействия.Вставить("Номенклатура", Неопределено);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураОбластьДействия.ТС) И НЕ ЗначениеЗаполнено(СтруктураОбластьДействия.МодельТС) Тогда
		СтруктураОбластьДействия.Вставить("МодельТС", СтруктураОбластьДействия.ТС.уатМодель);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураОбластьДействия.ТС) И НЕ ЗначениеЗаполнено(СтруктураОбластьДействия.ТипТС) Тогда
		СтруктураОбластьДействия.Вставить("ТипТС", СтруктураОбластьДействия.ТС.Тип);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураОбластьДействия.МодельТС) И НЕ ЗначениеЗаполнено(СтруктураОбластьДействия.ТипТС) Тогда
		СтруктураОбластьДействия.Вставить("ТипТС", СтруктураОбластьДействия.МодельТС.ТипТС);
	КонецЕсли;
	
	// нет никаких ограничений по области действия тарифов
	Если (ТарифЗП.ОбластиДействия.Количество() = 0) И (ТарифЗП.Организации.Количество() = 0) Тогда
		Возврат Истина;
	КонецЕсли;	
	
	// проверка по организации
	РезультатОрганизация = Ложь;
	Если ТарифЗП.Организации.Количество() = 0 Тогда
		РезультатОрганизация = Истина;
	Иначе
		Для Каждого ТекСтрока Из ТарифЗП.Организации Цикл
			Если ТекСтрока.Организация = Организация Тогда
				РезультатОрганизация = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;	
	Если НЕ РезультатОрганизация Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РезультатОбласть = Истина;
	
	Если ТарифЗП.ОбластиДействия.Количество() = 0 Тогда
		РезультатОбласть = Истина;
	Иначе
		РезультатОбластьТС = Неопределено;
		РезультатОбластьМодельТС = Неопределено;
		РезультатОбластьТипТС = Неопределено;
		РезультатОбластьМаршрут = Неопределено;
		РезультатОбластьКонтрагент = Неопределено;
		РезультатОбластьПодразделение = Неопределено;
		РезультатОбластьВидРемонта = Неопределено;
		РезультатОбластьОбъектСтроительства = Неопределено;
		РезультатОбластьВидПеревозки = Неопределено;
		РезультатОбластьПунктОтправления = Неопределено;
		РезультатОбластьПунктНазначения = Неопределено;
		РезультатОбластьНоменклатура = Неопределено;
		
		ВесСовпаденияФильтров = 0;
		
		Для Каждого ТекСтрока Из ТарифЗП.ОбластиДействия Цикл
			Если ТекСтрока.ВидОбластиДействия = Перечисления.уатВидыОбластейДействияТарифовТС.Тягач Тогда
				Если ТекСтрока.ЗначениеОбластиДействия = СтруктураОбластьДействия.ТС
					ИЛИ СписокРодителейЭлементаСправочника(СтруктураОбластьДействия.ТС).Найти(ТекСтрока.ЗначениеОбластиДействия) <> Неопределено Тогда
					РезультатОбластьТС	= Истина;
					ВесСовпаденияФильтров = ВесСовпаденияФильтров + 1;
				Иначе
					Если СтруктураОбластьДействия.Прицепы.Количество() > 0 Тогда
						флПрицепНайден = Ложь;
						Для Каждого ТекПрицеп Из СтруктураОбластьДействия.Прицепы Цикл
							Если ТекСтрока.ЗначениеОбластиДействия = ТекПрицеп
								ИЛИ СписокРодителейЭлементаСправочника(ТекПрицеп).Найти(ТекСтрока.ЗначениеОбластиДействия) <> Неопределено Тогда
								РезультатОбластьТС	= Истина;
								ВесСовпаденияФильтров = ВесСовпаденияФильтров + 1;
								флПрицепНайден = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если НЕ флПрицепНайден Тогда
							РезультатОбластьТС = ?(РезультатОбластьТС = Неопределено, Ложь, РезультатОбластьТС);
						КонецЕсли;
					Иначе
						РезультатОбластьТС = ?(РезультатОбластьТС = Неопределено, Ложь, РезультатОбластьТС);
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ТекСтрока.ВидОбластиДействия = Перечисления.уатВидыОбластейДействияТарифовТС.МодельТягача Тогда
				Если ТекСтрока.ЗначениеОбластиДействия = СтруктураОбластьДействия.МодельТС
					ИЛИ СписокРодителейЭлементаСправочника(СтруктураОбластьДействия.МодельТС).Найти(ТекСтрока.ЗначениеОбластиДействия) <> Неопределено Тогда
					РезультатОбластьМодельТС = Истина;
					ВесСовпаденияФильтров = ВесСовпаденияФильтров + 1;
				Иначе 	
					Если СтруктураОбластьДействия.Прицепы.Количество() > 0 Тогда
						флМодельПрицепНайден = Ложь;
						Для Каждого ТекПрицеп Из СтруктураОбластьДействия.Прицепы Цикл
							Если ТекСтрока.ЗначениеОбластиДействия = ТекПрицеп.Модель
								ИЛИ СписокРодителейЭлементаСправочника(ТекПрицеп.Модель).Найти(ТекСтрока.ЗначениеОбластиДействия) <> Неопределено Тогда
								РезультатОбластьМодельТС = Истина;
								ВесСовпаденияФильтров = ВесСовпаденияФильтров + 1;
								флМодельПрицепНайден = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если НЕ флМодельПрицепНайден Тогда
							РезультатОбластьМодельТС = ?(РезультатОбластьМодельТС = Неопределено, Ложь, РезультатОбластьМодельТС);
						КонецЕсли;
					Иначе
						РезультатОбластьМодельТС = ?(РезультатОбластьМодельТС = Неопределено, Ложь, РезультатОбластьМодельТС);
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ТекСтрока.ВидОбластиДействия = Перечисления.уатВидыОбластейДействияТарифовТС.ТипТягача Тогда
				Если ТекСтрока.ЗначениеОбластиДействия = СтруктураОбластьДействия.ТипТС
					ИЛИ СписокРодителейЭлементаСправочника(СтруктураОбластьДействия.ТипТС).Найти(ТекСтрока.ЗначениеОбластиДействия) <> Неопределено Тогда
					РезультатОбластьТипТС = Истина;
					ВесСовпаденияФильтров = ВесСовпаденияФильтров + 1;
				Иначе 	
					Если СтруктураОбластьДействия.Прицепы.Количество() > 0 Тогда
						флТипПрицепНайден = Ложь;
						Для Каждого ТекПрицеп Из СтруктураОбластьДействия.Прицепы Цикл
							Если ТекСтрока.ЗначениеОбластиДействия = ТекПрицеп.Модель.ТипТС
								ИЛИ СписокРодителейЭлементаСправочника(ТекПрицеп.Модель.ТипТС).Найти(ТекСтрока.ЗначениеОбластиДействия) <> Неопределено Тогда
								РезультатОбластьМодельТС = Истина;
								ВесСовпаденияФильтров = ВесСовпаденияФильтров + 1;
								флТипПрицепНайден = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если НЕ флТипПрицепНайден Тогда
							РезультатОбластьТипТС = ?(РезультатОбластьТипТС = Неопределено, Ложь, РезультатОбластьТипТС);
						КонецЕсли;
					Иначе
						РезультатОбластьТипТС = ?(РезультатОбластьТипТС = Неопределено, Ложь, РезультатОбластьТипТС);
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ТекСтрока.ВидОбластиДействия = Перечисления.уатВидыОбластейДействияТарифовТС.Маршрут Тогда
				Если ТипЗнч(СтруктураОбластьДействия.Маршрут) = Тип("СписокЗначений") 
					И СтруктураОбластьДействия.Маршрут.НайтиПоЗначению(ТекСтрока.ЗначениеОбластиДействия) <> Неопределено
					ИЛИ ТипЗнч(СтруктураОбластьДействия.Маршрут) = Тип("СправочникСсылка.уатМаршруты") 
					И (ТекСтрока.ЗначениеОбластиДействия = СтруктураОбластьДействия.Маршрут
					ИЛИ СписокРодителейЭлементаСправочника(СтруктураОбластьДействия.Маршрут).Найти(ТекСтрока.ЗначениеОбластиДействия)<>
					Неопределено) Тогда
					
					РезультатОбластьМаршрут	= Истина;
					ВесСовпаденияФильтров = ВесСовпаденияФильтров + 1;
				Иначе 	
					РезультатОбластьМаршрут	= ?(РезультатОбластьМаршрут	= Неопределено, Ложь, РезультатОбластьМаршрут);
				КонецЕсли;	
				
			ИначеЕсли ТекСтрока.ВидОбластиДействия = Перечисления.уатВидыОбластейДействияТарифовТС.Контрагент Тогда
				Если ТипЗнч(СтруктураОбластьДействия.Контрагент) = Тип("СписокЗначений") 
					И СтруктураОбластьДействия.Контрагент.НайтиПоЗначению(ТекСтрока.ЗначениеОбластиДействия) <> Неопределено
					ИЛИ ТипЗнч(СтруктураОбластьДействия.Контрагент) = Тип("СправочникСсылка.Контрагенты") 
					И (ТекСтрока.ЗначениеОбластиДействия = СтруктураОбластьДействия.Контрагент
					ИЛИ СписокРодителейЭлементаСправочника(СтруктураОбластьДействия.Контрагент).Найти(ТекСтрока.ЗначениеОбластиДействия)<>
					Неопределено) Тогда
					
					РезультатОбластьКонтрагент	= Истина;
					ВесСовпаденияФильтров = ВесСовпаденияФильтров + 1;
				Иначе	
					РезультатОбластьКонтрагент = ?(РезультатОбластьКонтрагент = Неопределено, Ложь, РезультатОбластьКонтрагент);
				КонецЕсли;	
				
			ИначеЕсли ТекСтрока.ВидОбластиДействия = Перечисления.уатВидыОбластейДействияТарифовТС.Подразделение Тогда
				Если ТипЗнч(СтруктураОбластьДействия.Подразделение) = Тип("СписокЗначений") 
					И СтруктураОбластьДействия.Подразделение.НайтиПоЗначению(ТекСтрока.ЗначениеОбластиДействия) <> Неопределено
					ИЛИ (ТипЗнч(СтруктураОбластьДействия.Подразделение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") 
					ИЛИ ТипЗнч(СтруктураОбластьДействия.Подразделение) = Тип("СправочникСсылка.СтруктураПредприятия"))
					И (ТекСтрока.ЗначениеОбластиДействия = СтруктураОбластьДействия.Подразделение
					ИЛИ СписокРодителейЭлементаСправочника(СтруктураОбластьДействия.Подразделение).Найти(ТекСтрока.ЗначениеОбластиДействия)<>
					Неопределено) Тогда
					
					РезультатОбластьПодразделение = Истина;
					ВесСовпаденияФильтров = ВесСовпаденияФильтров + 1;
				Иначе	
					РезультатОбластьПодразделение = ?(РезультатОбластьПодразделение = Неопределено, Ложь, 
						РезультатОбластьПодразделение);
				КонецЕсли;	
				
			ИначеЕсли ТекСтрока.ВидОбластиДействия = Перечисления.уатВидыОбластейДействияТарифовТС.ОбъектСтроительства Тогда
				Если (ТекСтрока.ЗначениеОбластиДействия = СтруктураОбластьДействия.ОбъектСтроительства
					ИЛИ СписокРодителейЭлементаСправочника(СтруктураОбластьДействия.ОбъектСтроительства).Найти(ТекСтрока.ЗначениеОбластиДействия)<>Неопределено) Тогда
					РезультатОбластьОбъектСтроительства	= Истина;
					ВесСовпаденияФильтров = ВесСовпаденияФильтров + 1;
				Иначе 	
					РезультатОбластьОбъектСтроительства	= ?(РезультатОбластьОбъектСтроительства	= Неопределено, Ложь, РезультатОбластьОбъектСтроительства);
				КонецЕсли;
							
			ИначеЕсли ТекСтрока.ВидОбластиДействия = Перечисления.уатВидыОбластейДействияТарифовТС.ПунктОтправления Тогда
				Если ТипЗнч(СтруктураОбластьДействия.ПунктОтправления) = Тип("СписокЗначений") 
					И СтруктураОбластьДействия.ПунктОтправления.НайтиПоЗначению(ТекСтрока.ЗначениеОбластиДействия) <> Неопределено
					ИЛИ ТипЗнч(СтруктураОбластьДействия.ПунктОтправления) = Тип("СправочникСсылка.уатПунктыНазначения") 
					И (ТекСтрока.ЗначениеОбластиДействия = СтруктураОбластьДействия.ПунктОтправления
					ИЛИ СписокРодителейЭлементаСправочника(СтруктураОбластьДействия.ПунктОтправления).Найти(ТекСтрока.ЗначениеОбластиДействия) <> Неопределено) Тогда
					
					РезультатОбластьПунктОтправления = Истина;
					ВесСовпаденияФильтров = ВесСовпаденияФильтров + 1;
				Иначе	
					РезультатОбластьПунктОтправления = ?(РезультатОбластьПунктОтправления = Неопределено, Ложь, РезультатОбластьПунктОтправления);
				КонецЕсли;
				
			ИначеЕсли ТекСтрока.ВидОбластиДействия = Перечисления.уатВидыОбластейДействияТарифовТС.ПунктНазначения Тогда
				Если ТипЗнч(СтруктураОбластьДействия.ПунктНазначения) = Тип("СписокЗначений") 
					И СтруктураОбластьДействия.ПунктНазначения.НайтиПоЗначению(ТекСтрока.ЗначениеОбластиДействия) <> Неопределено
					ИЛИ ТипЗнч(СтруктураОбластьДействия.ПунктНазначения) = Тип("СправочникСсылка.уатПунктыНазначения") 
					И (ТекСтрока.ЗначениеОбластиДействия = СтруктураОбластьДействия.ПунктНазначения
					ИЛИ СписокРодителейЭлементаСправочника(СтруктураОбластьДействия.ПунктНазначения).Найти(ТекСтрока.ЗначениеОбластиДействия) <> Неопределено) Тогда
					
					РезультатОбластьПунктНазначения	= Истина;
					ВесСовпаденияФильтров = ВесСовпаденияФильтров + 1;
				Иначе	
					РезультатОбластьПунктНазначения = ?(РезультатОбластьПунктНазначения = Неопределено, Ложь, РезультатОбластьПунктНазначения);
				КонецЕсли;
				
			ИначеЕсли ТекСтрока.ВидОбластиДействия = Перечисления.уатВидыОбластейДействияТарифовТС.ВидПеревозки Тогда
				Если ТипЗнч(СтруктураОбластьДействия.ВидПеревозки) = Тип("СписокЗначений") 
					И СтруктураОбластьДействия.ВидПеревозки.НайтиПоЗначению(ТекСтрока.ЗначениеОбластиДействия) <> Неопределено
					ИЛИ ТипЗнч(СтруктураОбластьДействия.ВидПеревозки) = Тип("СправочникСсылка.уатВидыПеревозок") 
					И (ТекСтрока.ЗначениеОбластиДействия = СтруктураОбластьДействия.ВидПеревозки
					ИЛИ СписокРодителейЭлементаСправочника(СтруктураОбластьДействия.ВидПеревозки).Найти(ТекСтрока.ЗначениеОбластиДействия) <> Неопределено) Тогда
					
					РезультатОбластьВидПеревозки	= Истина;
					ВесСовпаденияФильтров = ВесСовпаденияФильтров + 1;
				Иначе	
					РезультатОбластьВидПеревозки = ?(РезультатОбластьВидПеревозки = Неопределено, Ложь, РезультатОбластьВидПеревозки);
				КонецЕсли;
				
			ИначеЕсли ТекСтрока.ВидОбластиДействия = Перечисления.уатВидыОбластейДействияТарифовТС.Номенклатура Тогда
				Если ТипЗнч(СтруктураОбластьДействия.Номенклатура) = Тип("СписокЗначений") 
					И СтруктураОбластьДействия.Номенклатура.НайтиПоЗначению(ТекСтрока.ЗначениеОбластиДействия) <> Неопределено
					ИЛИ ТипЗнч(СтруктураОбластьДействия.Номенклатура) = Тип("СправочникСсылка.Номенклатура") 
					И (ТекСтрока.ЗначениеОбластиДействия = СтруктураОбластьДействия.Номенклатура
					ИЛИ СписокРодителейЭлементаСправочника(СтруктураОбластьДействия.Номенклатура).Найти(ТекСтрока.ЗначениеОбластиДействия) <> Неопределено) Тогда
					
					РезультатОбластьНоменклатура	= Истина;
					ВесСовпаденияФильтров = ВесСовпаденияФильтров + 1;
				Иначе	
					РезультатОбластьНоменклатура = ?(РезультатОбластьНоменклатура = Неопределено, Ложь, РезультатОбластьНоменклатура);
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЦикла;
		
		//если ТС в фильтре не указано, то тариф используется для всех ТС
		РезультатОбластьТС                  = ?(РезультатОбластьТС = Неопределено, Истина, РезультатОбластьТС); 
		РезультатОбластьМодельТС            = ?(РезультатОбластьМодельТС = Неопределено, Истина, РезультатОбластьМодельТС);
		РезультатОбластьТипТС	            = ?(РезультатОбластьТипТС = Неопределено, Истина, РезультатОбластьТипТС);
		РезультатОбластьМаршрут             = ?(РезультатОбластьМаршрут = Неопределено, Истина, РезультатОбластьМаршрут);
		РезультатОбластьКонтрагент          = ?(РезультатОбластьКонтрагент = Неопределено, Истина, РезультатОбластьКонтрагент);
		РезультатОбластьПодразделение       = ?(РезультатОбластьПодразделение = Неопределено, Истина, РезультатОбластьПодразделение);
		РезультатОбластьВидРемонта	        = ?(РезультатОбластьВидРемонта = Неопределено, Истина, РезультатОбластьВидРемонта);
		РезультатОбластьОбъектСтроительства	= ?(РезультатОбластьОбъектСтроительства = Неопределено, Истина, РезультатОбластьОбъектСтроительства);
		РезультатОбластьВидПеревозки        = ?(РезультатОбластьВидПеревозки = Неопределено, Истина, РезультатОбластьВидПеревозки);
		РезультатОбластьПунктОтправления    = ?(РезультатОбластьПунктОтправления = Неопределено, Истина, РезультатОбластьПунктОтправления);
		РезультатОбластьПунктНазначения     = ?(РезультатОбластьПунктНазначения = Неопределено, Истина, РезультатОбластьПунктНазначения);
		РезультатОбластьНоменклатура        = ?(РезультатОбластьНоменклатура = Неопределено, Истина, РезультатОбластьНоменклатура);
		
		РезультатОбласть = РезультатОбластьТС И РезультатОбластьМодельТС И РезультатОбластьТипТС И РезультатОбластьМаршрут 
			        И РезультатОбластьКонтрагент И РезультатОбластьПодразделение И РезультатОбластьВидРемонта
					И РезультатОбластьОбъектСтроительства И РезультатОбластьВидПеревозки
					И РезультатОбластьПунктОтправления И РезультатОбластьПунктНазначения И РезультатОбластьНоменклатура;
	КонецЕсли;	
	
	Возврат РезультатОбласть;
КонецФункции // уатТарифЗПВОбластиДействия       

// Функция возвращает результат таблицу значений действующих тарифов з/п
//
// Параметры:
//  вхСотрудник - СправочникСсылка.Сотрудники - сотрудник, по которому ищется тариф з/п
//  вхДата - Дата - Дата поиска тарифов
//  СписокФильтров - Структура - структура фильтров с ключами, соответствующими типам области данных тарифов з/п
//
Функция уатНайтиТарифыЗП(вхСотрудник, вхДата) ЭКСПОРТ
	
	Запрос = Новый Запрос;
	
	РезультатТаблица = Новый ТаблицаЗначений;
	//РезультатТаблица.Колонки.Добавить("Период");
	РезультатТаблица.Колонки.Добавить("ТарифЗП");
	РезультатТаблица.Колонки.Добавить("ВидНачисления");
	РезультатТаблица.Колонки.Добавить("СпособРасчетаОплатыТруда");
	РезультатТаблица.Колонки.Добавить("ПараметрВыработки");
	
	// Выбираем тарифы и тарифные планы водителя
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	уатТарифыСотрудников.ТарифЗП,
	|	уатТарифыСотрудников.ТарифЗП.ВидНачисления КАК ВидНачисления,
	|	уатТарифыСотрудников.ТарифЗП.СпособРасчетаОплатыТруда КАК СпособРасчетаОплатыТруда,
	|	уатТарифыСотрудников.ТарифЗП.ПараметрВыработки КАК ПараметрВыработки
	|ИЗ
	|	РегистрСведений.уатТарифыСотрудников.СрезПоследних(
	|			&Дата,
	|			Сотрудник = &Сотрудник
	|				И ВЫБОР
	|					КОГДА ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	|						ТОГДА ДатаОкончания >= &Дата
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ) КАК уатТарифыСотрудников
	|
	|УПОРЯДОЧИТЬ ПО
	|	уатТарифыСотрудников.Период УБЫВ";
	
	Запрос.УстановитьПараметр("Сотрудник", вхСотрудник);
	Запрос.УстановитьПараметр("Дата", вхДата);
	
	//теперь для тарифных планов выбираем тарифы
	Запрос1 = Новый Запрос;
	Запрос1.Текст = 
	
	"ВЫБРАТЬ
	|	ТарифыТарифногоПлана.Тариф КАК ТарифЗП,
	|	ТарифыТарифногоПлана.Тариф.ВидНачисления КАК ВидНачисления,
	|	ТарифыТарифногоПлана.Тариф.СпособРасчетаОплатыТруда КАК СпособРасчетаОплатыТруда,
	|	ТарифыТарифногоПлана.Тариф.ПараметрВыработки КАК ПараметрВыработки
	|ИЗ
	|	Справочник.уатТарифныеПланыЗП.Тарифы КАК ТарифыТарифногоПлана
	|ГДЕ
	|	ТарифыТарифногоПлана.Ссылка = &ТарифныйПлан";
	
	тблРезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого РезультатЗапроса Из тблРезультатЗапроса Цикл
		Если ТипЗнч(РезультатЗапроса.ТарифЗП) = Тип("СправочникСсылка.уатТарифыЗП") Тогда
			НоваяСтрока 							= РезультатТаблица.Добавить();
			НоваяСтрока.ТарифЗП 					= РезультатЗапроса.ТарифЗП;
			НоваяСтрока.ВидНачисления 				= РезультатЗапроса.ВидНачисления;
			НоваяСтрока.СпособРасчетаОплатыТруда 	= РезультатЗапроса.СпособРасчетаОплатыТруда;
			НоваяСтрока.ПараметрВыработки 			= РезультатЗапроса.ПараметрВыработки;
		Иначе	
			Запрос1.УстановитьПараметр("ТарифныйПлан", РезультатЗапроса.ТарифЗП);
			РезультатЗапроса1 = Запрос1.Выполнить().Выбрать();
			Пока РезультатЗапроса1.Следующий() Цикл
				НоваяСтрока 							= РезультатТаблица.Добавить();
				НоваяСтрока.ТарифЗП						= РезультатЗапроса1.ТарифЗП;
				НоваяСтрока.ВидНачисления 				= РезультатЗапроса1.ВидНачисления;
				НоваяСтрока.СпособРасчетаОплатыТруда 	= РезультатЗапроса1.СпособРасчетаОплатыТруда;
				НоваяСтрока.ПараметрВыработки 			= РезультатЗапроса1.ПараметрВыработки;
			КонецЦикла;
		КонецЕсли;	
	КонецЦикла;
	
	#Если Клиент Тогда
		Если РезультатТаблица.Количество() = 0 Тогда
			Сообщить("Не найдены тарифы зарплаты для сотрудника """ + 
				уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(вхСотрудник.ФизическоеЛицо) + 
				"""", СтатусСообщения.Внимание);
		КонецЕсли;	
	#КонецЕсли
	
	Возврат РезультатТаблица;
КонецФункции // уатНайтиТарифыЗП       

// Функция возвращает значение тарифа
//
// Параметры:
//  Прейскурант - ссылка справочника Прейскуранты
//  Расстояние - значение расстояние перевозки
//  ВремяРаботы - значение времени работы
//  Грузоподъемность - грузоподъемность трансп. средств
//  КлассГруза - значение класса груза
//
Функция уатРасчетСдельногоТарифаЗП(ТарифЗП, Расстояние, ВремяРаботы, Грузоподъемность, КлассГруза) ЭКСПОРТ
	Результат = 0;
	
	Если НЕ ТарифЗП.СложныйТариф Тогда
		Возврат ТарифЗП.Тариф;
	КонецЕсли;              
	
	Для Каждого ТекСтрока Из ТарифЗП.ТаблицаРасчета Цикл
		Если ЗначениеЗаполнено(ТарифЗП.ГруппировкаТарифа1) Тогда
			Если Не уатПроверкаУсловияТарифа(ТарифЗП, 1, ТекСтрока, Расстояние, ВремяРаботы, Грузоподъемность, КлассГруза) Тогда
				Продолжить;
			КонецЕсли;              
		КонецЕсли;              
		Если ЗначениеЗаполнено(ТарифЗП.ГруппировкаТарифа2) Тогда
			Если Не уатПроверкаУсловияТарифа(ТарифЗП, 2, ТекСтрока, Расстояние, ВремяРаботы, Грузоподъемность, КлассГруза) Тогда
				Продолжить;
			КонецЕсли;              
		КонецЕсли;              
		Если ЗначениеЗаполнено(ТарифЗП.ГруппировкаТарифа3) Тогда
			Если Не уатПроверкаУсловияТарифа(ТарифЗП, 3, ТекСтрока, Расстояние, ВремяРаботы, Грузоподъемность, КлассГруза) Тогда
				Продолжить;
			КонецЕсли;              
		КонецЕсли;              
		Результат = ТекСтрока.Тариф;
		Прервать;
	КонецЦикла;	
	
	Возврат Результат;
КонецФункции // уатРасчетСдельногоТарифаЗП       


////////////////////////////////////////////////////////////////////////////////
// ПУТЕВЫЕ ЛИСТЫ

//Функция возвращает таблицу значений параметров выработки ТС 
// Параметры: 	ТС - ссылка на справочник ОС
// Возвращаемое значение: Список значений
Функция уатПараметрыВыработкиТС() ЭКСПОРТ
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатПараметрыВыработки.Ссылка КАК ПараметрВыработки
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|
	|ГДЕ
	|	уатПараметрыВыработки.ПометкаУдаления = &ПометкаУдаления И
	|	уатПараметрыВыработки.ДействуетНаТС = &ДействуетНаТС
	|
	|УПОРЯДОЧИТЬ ПО
	|	уатПараметрыВыработки.Ссылка.Наименование";
	
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	Запрос.УстановитьПараметр("ДействуетНаТС", Истина);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // уатПараметрыВыработкиТС

// Процедура выполняет проверку корректности заполнения путевого листа
//
// Параметры:
//  Организация - Организация
//  ПутевойЛист - проверяемый путевой лист
//  Отказ       - отказ
Процедура уатПроверкаКорректностиПЛ(Организация, ПутевойЛист, Отказ) ЭКСПОРТ
	
	Если ПутевойЛист.ДатаВозвращения < ПутевойЛист.ДатаВыезда Тогда
		ТекстСообщения = "Дата возвращения не может быть раньше даты выезда!";
		Сообщить(ТекстСообщения, СтатусСообщения.Важное);
		Отказ = Истина;
	КонецЕсли;	
	
	//проверка на максимальный суточный пробег по учетной политике
	Если ПутевойЛист.ДатаВозвращения >= ПутевойЛист.ДатаВыезда Тогда
		флАвтоСоСпидометром = (НЕ ЗначениеЗаполнено(ПутевойЛист.ТранспортноеСредство)) 
			ИЛИ ПутевойЛист.ТранспортноеСредство.уатМодель.НаличиеСпидометра;
		мДни = (НачалоДня(ПутевойЛист.ДатаВозвращения) - НачалоДня(ПутевойЛист.ДатаВыезда))/24/3600 + 1;
		мСуточныйПробег = уатРазностьПоказанийСчетчика(ПутевойЛист.СпидометрВыезда, ПутевойЛист.СпидометрВозвращения) / мДни;
		мМаксимальныйСуточныйПробег = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ПутевойЛист.Организация, 
			ПланыВидовХарактеристик.уатПраваИНастройки.МаксимальныйСуточныйПробег);
		мМаксимальнаяСуточнаяНаработкаМоточасов = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
			ПутевойЛист.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.МаксимальнаяСуточнаяНаработкаМоточасов);
		Если мМаксимальныйСуточныйПробег > 0 И флАвтоСоСпидометром И мСуточныйПробег > мМаксимальныйСуточныйПробег Тогда
			ТекстСообщения = "Суточный пробег по путевому листу (" + мСуточныйПробег + 
				") превышает максимальный разрешенный (" + мМаксимальныйСуточныйПробег + ")!";
			Сообщить(ТекстСообщения, СтатусСообщения.Важное);
			Отказ = Истина;
		ИначеЕсли мМаксимальнаяСуточнаяНаработкаМоточасов > 0 И (НЕ флАвтоСоСпидометром) 
				И мСуточныйПробег > мМаксимальнаяСуточнаяНаработкаМоточасов Тогда
			ТекстСообщения = "Суточная наработка в моточасах по путевому листу (" + мСуточныйПробег
			+ ") превышает максимально разрешенную (" + мМаксимальнаяСуточнаяНаработкаМоточасов + ")!";
			Сообщить(ТекстСообщения, СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	//проверка на максимальную продолжительность путевого листа
	мМаксимальнаяПродолжительностьПутЛиста = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
		ПутевойЛист.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.МаксимальнаяПродолжительностьПутЛиста);
	Если мМаксимальнаяПродолжительностьПутЛиста > 0 Тогда
		мДниПЛ = (НачалоДня(ПутевойЛист.ДатаВозвращения) - НачалоДня(ПутевойЛист.ДатаВыезда))/24/3600 + 1;
		Если мДниПЛ > мМаксимальнаяПродолжительностьПутЛиста Тогда
			ТекстСообщения = "Продолжительность по путевому листу (" + мДниПЛ
				+ " дн.) превышает максимально разрешенную (" + мМаксимальнаяПродолжительностьПутЛиста + " дн.)!";
			Сообщить(ТекстСообщения, СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;	
	
	мПробег = уатРазностьПоказанийСчетчика(ПутевойЛист.СпидометрВыезда, ПутевойЛист.СпидометрВозвращения);
	Если мПробег < (ПутевойЛист.НулевойПробегВыезда + ПутевойЛист.НулевойПробегВозвращения) Тогда
		ТекстСообщения = "Нулевой пробег по путевому листу превышает общий пробег!";
		Сообщить(ТекстСообщения, СтатусСообщения.Важное);
		Отказ = Истина;
	КонецЕсли;
	
	Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ПутевойЛист.Организация, 
			ПланыВидовХарактеристик.уатПраваИНастройки.КонтрольКорректностиЗаданияПЛ) Тогда
		Для Каждого ТекСтрока Из ПутевойЛист.Задание Цикл
			Если ТекСтрока.Выполнено Тогда
				
				Если Не (ЗначениеЗаполнено(ТекСтрока.ВремяПрибытия) И ЗначениеЗаполнено(ТекСтрока.ВремяПрибытия)) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТекСтрока.ВремяПрибытия < ПутевойЛист.ДатаВыезда Тогда
					ТекстСообщения = "Время прибытия в строке №"+ТекСтрока.НомерСтроки+
					" закладки ""Задание"" меньше времени выезда";
					Сообщить(ТекстСообщения, СтатусСообщения.Важное);
					Отказ = Истина;
				КонецЕсли;
				
				Если ТекСтрока.ВремяПрибытия > ПутевойЛист.ДатаВозвращения Тогда
					ТекстСообщения = "Время прибытия в строке №"+ТекСтрока.НомерСтроки+
					" закладки ""Задание"" больше времени возвращения";
					Сообщить(ТекстСообщения, СтатусСообщения.Важное);
					Отказ = Истина;
				КонецЕсли;
				
				Если ТекСтрока.ВремяПрибытия > ТекСтрока.ВремяУбытия Тогда
					ТекстСообщения = "Время прибытия в строке №"+ТекСтрока.НомерСтроки+
					" закладки ""Задание"" больше времени убытия";
					Сообщить(ТекстСообщения, СтатусСообщения.Важное);
					Отказ = Истина;
				КонецЕсли;
				
				Если ТекСтрока.ВремяУбытия > ПутевойЛист.ДатаВозвращения Тогда
					ТекстСообщения = "Время убытия в строке №"+ТекСтрока.НомерСтроки+
					" закладки ""Задание"" больше времени возвращения";
					Сообщить(ТекстСообщения, СтатусСообщения.Важное);
					Отказ = Истина;
				КонецЕсли;
				
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
	//чПробегПоЗаданию = 0;
	//Если (ТекСтрока.СпидометрПрибытия <> 0) и (ТекСтрока.СпидометрПрибытия < докПЛ.СпидометрВыезда) Тогда
	//	СписокОшибок.Добавить(,"Ошибка спидометра в строке №"+ТекСтрока.НомерСтроки+
	//	" закладки ""Выполнение задания""");
	//	СписокОшибок.Добавить(,"         Спидометр прибытия по заданию меньше спидометра выезда по п/л.");
	//ИначеЕсли ТекСтрока.СпидометрУбытия > докПЛ.СпидометрВозвращения Тогда
	//	СписокОшибок.Добавить(,"Ошибка спидометра в строке №"+ТекСтрока.НомерСтроки+
	//	" закладки ""Выполнение задания""");
	//	СписокОшибок.Добавить(,"         Спидометр убытия по заданию больше спидометра возвращения по п/л.");
	//КонецЕсли;	
	//чПробегПоЗаданию = чПробегПоЗаданию + уатРазностьПоказанийСчетчика(ТекСтрока.СпидометрПрибытия,
	//	ТекСтрока.СпидометрУбытия);
	//Если чПробегПоЗаданию > чПробегПоПЛ Тогда
	//	СписокОшибок.Добавить(,"Пробег по заданию больше общего пробега по пут. листу");
	//КонецЕсли;	
	
КонецПроцедуры // утПроверкаКорректностиПЛ       

//Функция возвращает грузоподъемность ТС, работающих по пут. листу
//
// Параметры:
//  ПутевойЛист - ссылка документа пут. лист
//
Функция уатГрузоподъемностьПоПЛ(ПутевойЛист) Экспорт
	
	Если ПутевойЛист.ТранспортноеСредство.уатМодель = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	Результат = ПутевойЛист.ТранспортноеСредство.ГрузоподъемностьВТоннах;
	
	Для Каждого ТекСтр из ПутевойЛист.Прицепы Цикл
		Результат = Результат + ТекСтр.ТС.ГрузоподъемностьВТоннах;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции //уатГрузоподъемностьПоПЛ

// Функция возвращает таблицу ТТД для заданного пут. листа
//
// Параметры:
//  ПутевойЛист - ссылка документа пут. лист
//
Функция уатТТДДляПЛ(ПутевойЛист) ЭКСПОРТ
	Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ПутевойЛист) Тогда
		мПустаяТаблица = Новый ТаблицаЗначений;
		мПустаяТаблица.Колонки.Добавить("Проведен");
		мПустаяТаблица.Колонки.Добавить("Номер");
		мПустаяТаблица.Колонки.Добавить("Дата");
		мПустаяТаблица.Колонки.Добавить("Контрагент");
		мПустаяТаблица.Колонки.Добавить("ТТД");
		Возврат мПустаяТаблица;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	уатТТД.Проведен,
	|	уатТТД.Номер,
	|	уатТТД.Дата,
	|	уатТТД.Контрагент,
	|	уатТТД.Ссылка КАК ТТД
	|ИЗ
	|	Документ.уатТТД КАК уатТТД
	|ГДЕ
	|	уатТТД.Выработка.ПутЛист = &ПутЛист И
	|	(НЕ уатТТД.ПометкаУдаления)";
	Запрос.УстановитьПараметр("ПутЛист", ПутевойЛист);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // уатНайтиТТДДляПЛ       

// Функция возвращает список видов пут. листов
//
// Параметры:
//  ПутевойЛист - ссылка документа пут. лист
//
Функция уатВидыПЛ() ЭКСПОРТ
	
	мСписокВидовПЛ = Новый СписокЗначений;
	мСписокВидовПЛ.Добавить(Перечисления.уатВидыПЛ._3,"3 (легковой)");
	мСписокВидовПЛ.Добавить(Перечисления.уатВидыПЛ._3спец,"3С (спец. автомобиля)");
	мСписокВидовПЛ.Добавить(Перечисления.уатВидыПЛ._4М,"4М (междугородний)");
	мСписокВидовПЛ.Добавить(Перечисления.уатВидыПЛ._4П,"4П (повременный)");
	мСписокВидовПЛ.Добавить(Перечисления.уатВидыПЛ._4С,"4С (сдельный)");
	мСписокВидовПЛ.Добавить(Перечисления.уатВидыПЛ._6С,"6С (автобус необщего пользования)");
	мСписокВидовПЛ.Добавить(Перечисления.уатВидыПЛ._ЭСМ2,"ЭСМ2 (строительный)");
	мСписокВидовПЛ.Добавить(Перечисления.уатВидыПЛ._ПЛ1,"ПЛ1 (легковой ЧП)");
	мСписокВидовПЛ.Добавить(Перечисления.уатВидыПЛ._ПГ1,"ПГ1 (грузовой ЧП)");
	мСписокВидовПЛ.Добавить(Перечисления.уатВидыПЛ._ПА1,"ПА1 (автобус ЧП)");
	
	Попытка
		Выполнить("уатЗащищенныеФункцииСервер_проф.ДобавитьВидыПЛСТ(мСписокВидовПЛ)");
	Исключение
	КонецПопытки;	
	
	Попытка
		Выполнить("уатЗащищенныеФункцииСервер_проф.ДобавитьВидыПЛПП(мСписокВидовПЛ)");
	Исключение
	КонецПопытки;	
	
	мСписокВидовПЛ.СортироватьПоПредставлению();
	
	Возврат мСписокВидовПЛ;
	
КонецФункции // уатВидыПЛ       

// Процедура получает коэффициент изменения нормы расхода ГСМ в зависимости от 
// температуры.
//
// Параметры:
//  Температура  - температура для которой необходимо получить коэффициент
Функция уатПолучитьКоэффициентИзмененияНормыДляТемпературы(Температура) ЭКСПОРТ
	// Параметры: Температура
	// Возвращаемое значение: процент изменения нормы расхода топлива
	Результат = 0;
	спрТемпературы = Справочники.уатТемпературныеКоэффициентыГСМ;
	ВыборкаТемпературы = спрТемпературы.Выбрать(,,,"ТемператураМеньше Возр");
	Пока ВыборкаТемпературы.Следующий() Цикл
		Если Температура < ВыборкаТемпературы.ТемператураМеньше Тогда
			Результат = ВыборкаТемпературы.Процент;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	Возврат Результат;
КонецФункции // уатСписокМаселАС       


/////////////////////////////////////////////////////////////////////////////////////
// ГСМ

//Возвращает значение реквизитов ГСМ из регистра сведений
// Параметры: 	ТС - ссылка на справочник ОС
//				ИмяРеквизита - строка
//					ГаражныйНомер
//					ГосударственныйНомер
//					Модель
//					VIN
//					МодельДвигателя
//					МощностьДвигателяЛС
//					МощностьДвигателяКВт
//					НомерДвигателя
//					НомерКузова
//					НомерШасси
//					ЦветКузова
//					СобственныйВес
//					ОсновноеУсловиеРаботы
//					ОсновнойРежимРаботы
//					ГабаритныйРазмерДлина
//					ГабаритныйРазмерВысота
//					ГабаритныйРазмерШирина
// Возвращаемое значение: ЗначениеРеквизита
Функция уатПрочитатьРеквизитГСМ(ГСМ, ИмяРеквизита="") ЭКСПОРТ
	Перем ЗначениеРеквизита;
	
	ВыборкаЗаписей = РегистрыСведений.уатНоменклатураГСМ.Получить(Новый Структура("Номенклатура",ГСМ));
	
	Если Не ЗначениеЗаполнено(ИмяРеквизита) Тогда
		Возврат ВыборкаЗаписей;
	Иначе	
		ВыборкаЗаписей.Свойство(ИмяРеквизита, ЗначениеРеквизита);
		Возврат ЗначениеРеквизита;
	КонецЕсли;	
КонецФункции // уатПрочитатьРеквизитГСМ()

//Возвращает количество литров по талону ГСМ
//					
// Возвращаемое значение: ЗначениеРеквизита
Функция уатКоличествоЛитровТалонаГСМ(Дата, СтруктураОтбора, КоличествоТалонов) ЭКСПОРТ
	
	//Метод отличается от УАТ Проф структурой параметров, при объединении не затягивать
	//
	
	Если ТипЗнч(СтруктураОтбора.ГСМ) = Тип("СправочникСсылка.Номенклатура") Тогда
		ВыборкаЗаписей = РегистрыСведений.уатНоменклатураГСМ.Получить(Новый Структура("Номенклатура", СтруктураОтбора.ГСМ));
	ИначеЕсли ТипЗнч(СтруктураОтбора.ГСМ) = Тип("Структура") Тогда
		ВыборкаЗаписей = СтруктураОтбора.ГСМ;
	КонецЕсли;
	
	Если ВыборкаЗаписей <> Неопределено Тогда
		Если ВыборкаЗаписей.ЛитровыйТалон Тогда
			Результат = ВыборкаЗаписей.НоминалТалона * КоличествоТалонов;
		Иначе
			//определим последнюю цену ГСМ
			Партнер = Неопределено;
			Если СтруктураОтбора.Свойство("Контрагент") Тогда
				Если ТипЗнч(СтруктураОтбора.Контрагент) = Тип("СправочникСсылка.уатАЗС") 
					И ТипЗнч(СтруктураОтбора.Контрагент.Контрагент_Склад) = Тип("СправочникСсылка.Контрагенты") Тогда
					
					Партнер = СтруктураОтбора.Контрагент.Контрагент_Склад.Партнер;
				КонецЕсли;
			Иначе
				Партнер = СтруктураОтбора.Контрагент.Партнер;
			КонецЕсли;
						
			Соглашение = СтруктураОтбора.Свойство("Соглашение");
			мЦена = уатНайтиЦенуНоменклатуры(Дата, ВыборкаЗаписей.ГСМТалона, СтруктураОтбора.ВидЦеныПоставщика, Партнер, Соглашение).Цена;
			Результат = ?(мЦена=0, 0, окр(ВыборкаЗаписей.НоминалТалона * КоличествоТалонов / мЦена, 3));
		КонецЕсли;
	Иначе
		Результат = 0;
	КонецЕсли;	
	
	Возврат Результат;
КонецФункции // уатКоличествоЛитровТалонаГСМ()

//Возвращает таблицу аналогов ГСМ
// Параметры: 	ТС - ссылка на справочник ОС
//				ИмяРеквизита - строка
//					ГаражныйНомер
//					ГосударственныйНомер
//					Модель
//					VIN
//					МодельДвигателя
//					МощностьДвигателяЛС
//					МощностьДвигателяКВт
//					НомерДвигателя
//					НомерКузова
//					НомерШасси
//					ЦветКузова
//					СобственныйВес
//					ОсновноеУсловиеРаботы
//					ОсновнойРежимРаботы
//					ГабаритныйРазмерДлина
//					ГабаритныйРазмерВысота
//					ГабаритныйРазмерШирина
// Возвращаемое значение: ЗначениеРеквизита
Функция уатПолучитьАналогиГСМ(ГСМ, ГруппаГСМ=Неопределено) ЭКСПОРТ
	
	Если Тип("ТаблицаЗначений") <> ТипЗнч(ГСМ) Тогда
		ТабГСМ = Новый ТаблицаЗначений;
		ТабГСМ.Колонки.Добавить("ГСМ");
		НоваяСтрока 	= ТабГСМ.Добавить();
		НоваяСтрока.ГСМ = ГСМ;
	Иначе
		ТабГСМ = ГСМ;
	КонецЕсли;	
	
	ТаблицаАналоги = Новый ТаблицаЗначений;
	ТаблицаАналоги.Колонки.Добавить("ГСМ");
	ТаблицаАналоги.Колонки.Добавить("Аналог");
	Если ГруппаГСМ = Перечисления.уатГруппыГСМ.Талон Тогда
		ТаблицаАналоги.Колонки.Добавить("АналогТоплива");
		ТаблицаАналоги.Колонки.Добавить("Литровый");
		ТаблицаАналоги.Колонки.Добавить("Номинал");
	КонецЕсли;	
	
	Для Каждого Строка Из ТабГСМ Цикл
		
		Если ГруппаГСМ = Перечисления.уатГруппыГСМ.Талон Тогда
			ТекстЗапроса = "ВЫБРАТЬ
			|	уатНоменклатураГСМ.Номенклатура КАК Аналог,
			|	уатАналогиГСМ.Аналог КАК АналогТоплива,
			|	уатАналогиГСМ.ГСМ КАК ГСМ,
			|	уатНоменклатураГСМ.ЛитровыйТалон КАК Литровый,
			|	уатНоменклатураГСМ.НоминалТалона КАК Номинал
			|ИЗ
			|	РегистрСведений.уатАналогиГСМ КАК уатАналогиГСМ
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
			|		ПО уатАналогиГСМ.Аналог = уатНоменклатураГСМ.ГСМТалона
			|
			|ГДЕ
			|	уатАналогиГСМ.ГСМ = &ГСМ";
			
			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("ГСМ", Строка.ГСМТалона);
			
			ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
			
			Для Каждого СтрокаЗапроса Из ТаблицаЗапроса Цикл
				
				НоваяСтрока = ТаблицаАналоги.Добавить();
				НоваяСтрока.ГСМ 			= СтрокаЗапроса.ГСМ;
				НоваяСтрока.Аналог 			= СтрокаЗапроса.Аналог;
				НоваяСтрока.АналогТоплива 	= СтрокаЗапроса.АналогТоплива;
				НоваяСтрока.Литровый 		= СтрокаЗапроса.Литровый;
				НоваяСтрока.Номинал 		= СтрокаЗапроса.Номинал;
				
			КонецЦикла;
		Иначе
			ТекстЗапроса = "ВЫБРАТЬ
			|	АналогиГСМ.Аналог,
			|	АналогиГСМ.ГСМ КАК ГСМ
			|ИЗ
			|	РегистрСведений.уатАналогиГСМ КАК АналогиГСМ
			|
			|ГДЕ
			|	АналогиГСМ.ГСМ = &ГСМ";
			
			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("ГСМ", Строка.ГСМ);
			
			ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
			
			Для Каждого СтрокаЗапроса Из ТаблицаЗапроса Цикл
				
				НоваяСтрока = ТаблицаАналоги.Добавить();
				НоваяСтрока.ГСМ 			= СтрокаЗапроса.ГСМ;
				НоваяСтрока.Аналог 			= СтрокаЗапроса.Аналог;
				
			КонецЦикла;
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат ТаблицаАналоги;
	
КонецФункции // уатПолучитьАналогиГСМ()

//Возвращает таблицу заправок по пут. листу
// Параметры: 	ТС - ссылка на справочник ОС
//				ИмяРеквизита - строка
//					ГаражныйНомер
//					ГосударственныйНомер
//					Модель
//					VIN
//					МодельДвигателя
//					МощностьДвигателяЛС
//					МощностьДвигателяКВт
//					НомерДвигателя
//					НомерКузова
//					НомерШасси
//					ЦветКузова
//					СобственныйВес
//					ОсновноеУсловиеРаботы
//					ОсновнойРежимРаботы
//					ГабаритныйРазмерДлина
//					ГабаритныйРазмерВысота
//					ГабаритныйРазмерШирина
// Возвращаемое значение: ЗначениеРеквизита
Функция уатПолучитьЗаправкиДляПЛ(ПутевойЛист) ЭКСПОРТ
	
	Запрос=Новый Запрос();
	ТекстЗапроса=
	
	"ВЫБРАТЬ
	|	уатЗаправкаГСМЗаправки.Ссылка.Дата КАК Дата,
	|	уатЗаправкаГСМЗаправки.Ссылка.Номер КАК Номер,
	|	уатЗаправкаГСМЗаправки.Ссылка.ВидДвиженияГСМ КАК ВидДвиженияГСМ,
	|	уатЗаправкаГСМЗаправки.Ссылка.АЗС КАК АЗС,
	|	уатЗаправкаГСМЗаправки.Ссылка.Страна КАК Страна,
	|	уатЗаправкаГСМЗаправки.Дата КАК ДатаЗаправки,
	|	уатЗаправкаГСМЗаправки.ТС КАК ТС,
	|	уатЗаправкаГСМЗаправки.ГСМ КАК ГСМ,
	|	уатЗаправкаГСМЗаправки.Цена КАК Цена,
	|	уатЗаправкаГСМЗаправки.Количество КАК Количество,
	|	уатЗаправкаГСМЗаправки.Водитель КАК Водитель,
	|	уатЗаправкаГСМЗаправки.ПластиковаяКарта КАК ПластиковаяКарта,
	|	уатЗаправкаГСМЗаправки.Сумма КАК Сумма,
	|	уатЗаправкаГСМЗаправки.Валюта КАК Валюта,
	|	уатЗаправкаГСМЗаправки.СтавкаНДС КАК СтавкаНДС,
	|	уатЗаправкаГСМЗаправки.СуммаНДС КАК СуммаНДС,
	|	уатЗаправкаГСМЗаправки.ПутевойЛист КАК ПутевойЛист,
	|	уатЗаправкаГСМЗаправки.Ссылка КАК Ссылка,
	|	уатЗаправкаГСМЗаправки.НомерСтроки КАК НомерСтроки,
	|	уатЗаправкаГСМЗаправки.НомераТалонов КАК НомераТалонов,
	|	уатЗаправкаГСМЗаправки.Ссылка.Соглашение КАК Соглашение,
	|	уатЗаправкаГСМЗаправки.ВидЦеныПоставщика КАК ВидЦеныПоставщика,
	|	уатЗаправкаГСМЗаправки.Ссылка.УчитыватьНДС КАК УчитыватьНДС,
	|	уатЗаправкаГСМЗаправки.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.уатЗаправкаГСМ.Заправки КАК уатЗаправкаГСМЗаправки
	|ГДЕ
	|	уатЗаправкаГСМЗаправки.ПутевойЛист = &ПутевойЛист
	|	И уатЗаправкаГСМЗаправки.ПутевойЛист <> &ПустойПутевойЛист";
	
	Запрос.Текст=ТекстЗапроса;
	Запрос.УстановитьПараметр("ПутевойЛист",ПутевойЛист);
	Запрос.УстановитьПараметр("ПустойПутевойЛист",Документы.уатПутевойЛист.ПустаяСсылка());
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // уатПолучитьЗаправкиДляПЛ

//Функция возвращает остаток ГСМ на автомобиле
// Параметры: МоментВремени - время на которое определяется остаток
// ТС
// ГСМ
// ПутевойЛист - параметр нужно передавать только в случае, если нужен остаток на выезд по путевому листу.
//               Если этот параметр передан, то производится контроль заправок  
Функция уатОстатокГСМнаТС(МоментВремени, ТС, ГСМ, ПутевойЛист = Неопределено) ЭКСПОРТ
	
	Запрос=Новый Запрос();
	Запрос.Текст=
	
	"ВЫБРАТЬ
	|	ВЫБОР КОГДА (ОстаткиГСМ.КоличествоОстаток) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ОстаткиГСМ.КоличествоОстаток КОНЕЦ КАК Количество
	|ИЗ
	|	РегистрНакопления.уатОстаткиГСМнаТС.Остатки(&Момент, ГСМ В (&ГСМ) И ТС = &ТС) КАК ОстаткиГСМ
	|";
	
	//получаем аналоги
	тзАналогиГСМ = уатПолучитьАналогиГСМ(ГСМ);
	
	//добавляем к аналогам основное ГСМ
	НоваяСтрока = тзАналогиГСМ.Добавить();
	НоваяСтрока.ГСМ 			= ГСМ;
	НоваяСтрока.Аналог 			= ГСМ;
	
	Запрос.УстановитьПараметр("Момент",МоментВремени);
	Запрос.УстановитьПараметр("ГСМ",тзАналогиГСМ.ВыгрузитьКолонку("Аналог"));
	Запрос.УстановитьПараметр("ТС",ТС);
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	ВыборкаЗапроса.Следующий();
	Результат = ВыборкаЗапроса.Количество;
	
	Возврат Результат;
	
КонецФункции // уатОстатокГСМнаТС       

// Функция возвращает список видов заправок ГСМ
//
// Параметры:
//  ПутевойЛист - ссылка документа пут. лист
//
Функция СписокВидовЗаправок() ЭКСПОРТ
	
	мСписокЗаправок = Новый СписокЗначений;
	мСписокЗаправок.Добавить(Перечисления.уатВидыДвиженияГСМ.ЗаправкаНаличные);
	мСписокЗаправок.Добавить(Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта);
	мСписокЗаправок.Добавить(Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад);
	мСписокЗаправок.Добавить(Перечисления.уатВидыДвиженияГСМ.ЗаправкаПоставщик);
	мСписокЗаправок.Добавить(Перечисления.уатВидыДвиженияГСМ.ЗаправкаСклад);
	мСписокЗаправок.Добавить(Перечисления.уатВидыДвиженияГСМ.ЗаправкаТалоны);
	
	Возврат мСписокЗаправок;
	
КонецФункции // СписокВидовЗаправок       

//Возвращает таблицу сливов по ПЛ
// Параметры: 	ПутевойЛист - ссылка на документ
// Возвращаемое значение: таблица документов Слив ГСМ
//
Функция уатПолучитьСливыДляПЛ(ПутевойЛист) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ПутевойЛист", ПутевойЛист);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСливГСМ.Дата КАК Дата,
	|	уатСливГСМ.Номер КАК Номер,
	|	уатСливГСМ.ВидОперации КАК ВидОперации,
	|	уатСливГСМ.АЗС КАК АЗС,
	|	уатСливГСМ.ТС КАК ТС,
	|	уатСливГСМ.ГСМ КАК ГСМ,
	|	уатСливГСМ.Количество КАК Количество,
	|	уатСливГСМ.ПутевойЛист КАК ПутевойЛист,
	|	уатСливГСМ.ПутевойЛистПриемник КАК ПутевойЛистПриемник,
	|	уатСливГСМ.Ссылка КАК Ссылка,
	|	уатСливГСМ.Проведен КАК Проведен,
	|	уатСливГСМ.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Документ.уатСливГСМ КАК уатСливГСМ
	|ГДЕ
	|	уатСливГСМ.ПутевойЛист = &ПутевойЛист
	|	И уатСливГСМ.ПутевойЛист <> ЗНАЧЕНИЕ(Документ.уатПутевойЛист.ПустаяСсылка)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает таблицу сливов по ПЛ на ТС
// Параметры: 	ПутевойЛист - ссылка на документ
// Возвращаемое значение: таблица документов Слив ГСМ
//
Функция уатПолучитьСливыНаТСДляПЛ(ПутевойЛист) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ПутевойЛист", ПутевойЛист);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСливГСМ.Дата КАК Дата,
	|	уатСливГСМ.Номер КАК Номер,
	|	уатСливГСМ.ВидОперации КАК ВидОперации,
	|	уатСливГСМ.АЗС КАК АЗС,
	|	уатСливГСМ.ТС КАК ТС,
	|	уатСливГСМ.ГСМ КАК ГСМ,
	|	уатСливГСМ.Количество КАК Количество,
	|	уатСливГСМ.ПутевойЛист КАК ПутевойЛист,
	|	уатСливГСМ.ПутевойЛистПриемник КАК ПутевойЛистПриемник,
	|	уатСливГСМ.Ссылка КАК Ссылка,
	|	уатСливГСМ.Проведен КАК Проведен,
	|	уатСливГСМ.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Документ.уатСливГСМ КАК уатСливГСМ
	|ГДЕ
	|	уатСливГСМ.ПутевойЛистПриемник = &ПутевойЛист
	|	И уатСливГСМ.ПутевойЛистПриемник <> ЗНАЧЕНИЕ(Документ.уатПутевойЛист.ПустаяСсылка)
	|	И уатСливГСМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.уатВидыОперацийСливГСМ.НаТС)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает результат запроса по остаткам ГСМ по партиям
//
Функция уатПолучитьОстаткиПартийГСМ(МоментВремени, СпособОценкиМПЗ, ТС, ГСМ)
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОстаткиГСМ.Партия КАК Партия,
	|	ОстаткиГСМ.ТС КАК ТС,
	|	ОстаткиГСМ.ГСМ КАК ГСМ,
	|	ЕСТЬNULL(ОстаткиГСМ.КоличествоОстаток, 0) КАК Количество,
	|	ОстаткиГСМ.СтоимостьОстаток КАК Стоимость,
	|	ОстаткиГСМ.СтоимостьУпрОстаток КАК СтоимостьУпр
	|ИЗ
	|	РегистрНакопления.уатОстаткиГСМнаТС.Остатки(
	|		&Момент,
	|		ГСМ В (&ГСМ) И ТС = &ТС) КАК ОстаткиГСМ
	|ГДЕ
	|	ОстаткиГСМ.КоличествоОстаток > 0
	|";
	
	Если СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО Тогда
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО	ОстаткиГСМ.Партия.Дата ВОЗР";
	ИначеЕсли СпособОценкиМПЗ = Перечисления.СпособыОценки.ЛИФО Тогда
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО	ОстаткиГСМ.Партия.Дата УБЫВ";
	КонецЕсли;
	
	//получаем аналоги
	тзАналогиГСМ = уатПолучитьАналогиГСМ(ГСМ);
	
	//добавляем к аналогам основное ГСМ
	НоваяСтрока = тзАналогиГСМ.Добавить();
	НоваяСтрока.ГСМ = ГСМ;
	НоваяСтрока.Аналог = ГСМ;
	
	Запрос.УстановитьПараметр("Момент", МоментВремени);
	Запрос.УстановитьПараметр("ГСМ", тзАналогиГСМ.ВыгрузитьКолонку("Аналог"));
	Запрос.УстановитьПараметр("ТС", ТС);
	
	Возврат Запрос.Выполнить();
КонецФункции

//Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоГСМ - результат запроса по табличной части "Материалы",
//  ТаблицаДляСписанияГСМ - Сформированная таблица значений,
//  ПоДокументу - булево, Истина - берем данные из документа и рассчитываем стоимость. Ложь - читаем данные из регистра
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция уатПодготовитьТаблицуСписанияГСМ(ДокументОбъект, ТаблицаДляСписанияГСМ, ПоДокументу, вхСредняяЦена = 0,
		СтрокаОшибки = "") Экспорт
	
	Перем мСписаноКоличество;
	Перем мСписаноСтоимость;
	
	ВсеОК = Истина;
	мСписаноКоличество = 0;
	мСписаноСтоимость  = 0;
	
	ТаблицаДляСписанияГСМ = Новый ТаблицаЗначений;
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Партия");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Дата");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Склад");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("ГСМ");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Номенклатура");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("ТС");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Количество");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Коэффициент");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Сумма");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("СтоимостьУпр");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Стоимость");
	
	Если ПоДокументу Тогда
		//заполняем таблицу по данным документа. Рассчитываем стоимость ГСМ
		// получим результат запроса по таблице ГСМ в пут. листе
		РезультатЗапросаПоГСМ = Новый Запрос();
		
		МоментВремениОстПартий = ДокументОбъект.МоментВремени();
		
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
			
			РезультатЗапросаПоГСМ.Текст	=
			"ВЫБРАТЬ
			|	уатПутевойЛистРасходГСМ.ГСМ,
			|	уатПутевойЛистРасходГСМ.РасходПоФакту КАК СписываемоеКоличество,
			|	уатПутевойЛистРасходГСМ.ТС,
			|	уатПутевойЛистРасходГСМ.Ссылка.ДатаЗакрытия КАК Дата
			|ИЗ
			|	Документ.уатПутевойЛист.РасходГСМ КАК уатПутевойЛистРасходГСМ
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
			|		ПО уатПутевойЛистРасходГСМ.ГСМ = уатНоменклатураГСМ.Номенклатура
			|			И (уатНоменклатураГСМ.ГруппаГСМ = &ГруппаГСМ)
			|ГДЕ
			|	уатПутевойЛистРасходГСМ.Ссылка = &Ссылка
			|	И уатПутевойЛистРасходГСМ.Активен = &Активен";
			РезультатЗапросаПоГСМ.УстановитьПараметр("Активен",Истина);
			РезультатЗапросаПоГСМ.УстановитьПараметр("Ссылка",ДокументОбъект.Ссылка);
			РезультатЗапросаПоГСМ.УстановитьПараметр("ГруппаГСМ", Перечисления.уатГруппыГСМ.Топливо);
			тблВыборкаЗапросаПоГСМ = РезультатЗапросаПоГСМ.Выполнить().Выгрузить();
			
			Если ЗначениеЗаполнено(ДокументОбъект.ДатаЗакрытия) Тогда
				МоментВремениОстПартий = Новый Граница(ДокументОбъект.ДатаЗакрытия, ВидГраницы.Исключая);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатПутевойЛист") Тогда
			
			тблВыборкаЗапросаПоГСМ = ДокументОбъект.РасходГСМ.Выгрузить();
			тблВыборкаЗапросаПоГСМ.Колонки.Добавить("Дата");
			тблВыборкаЗапросаПоГСМ.Колонки.РасходПоФакту.Имя = "СписываемоеКоличество";
			тблВыборкаЗапросаПоГСМ.ЗаполнитьЗначения(ДокументОбъект.ДатаЗакрытия, "Дата");
			
			Если ЗначениеЗаполнено(ДокументОбъект.ДатаЗакрытия) Тогда
				МоментВремениОстПартий = Новый Граница(ДокументОбъект.ДатаЗакрытия, ВидГраницы.Исключая);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатСливГСМ") ИЛИ 
				ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.уатСливГСМ") Тогда
			РезультатЗапросаПоГСМ.Текст	=
			"ВЫБРАТЬ
			|	уатСливГСМ.ТС,
			|	уатСливГСМ.ГСМ,
			|	уатСливГСМ.АЗС.Контрагент_Склад КАК Склад,
			|	уатСливГСМ.Количество КАК СписываемоеКоличество,
			|	уатСливГСМ.Количество КАК Количество,
			|	&Коэффициент КАК Коэффициент,
			|	уатСливГСМ.Дата
			|ИЗ
			|	Документ.уатСливГСМ КАК уатСливГСМ
			|
			|ГДЕ
			|	уатСливГСМ.Ссылка = &Ссылка";
			РезультатЗапросаПоГСМ.УстановитьПараметр("Коэффициент",1);
			РезультатЗапросаПоГСМ.УстановитьПараметр("Ссылка",ДокументОбъект.Ссылка);
			тблВыборкаЗапросаПоГСМ = РезультатЗапросаПоГСМ.Выполнить().Выгрузить();
			
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатОперацииСТехническимиЖидкостями") ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.уатОперацииСТехническимиЖидкостями") Тогда
			РезультатЗапросаПоГСМ.Текст	=
			"ВЫБРАТЬ
			|	уатОперацииСТехническимиЖидкостями.ТС,
			|	уатОперацииСТехническимиЖидкостями.Номенклатура КАК ГСМ,
			|	уатОперацииСТехническимиЖидкостями.Ссылка.Склад КАК Склад,
			|	уатОперацииСТехническимиЖидкостями.Количество КАК СписываемоеКоличество,
			|	уатОперацииСТехническимиЖидкостями.Количество КАК Количество,
			|	&Коэффициент КАК Коэффициент,
			|	уатОперацииСТехническимиЖидкостями.Ссылка.Дата,
			|	уатМестонахождениеТС.Колонна
			|ИЗ
			|	Документ.уатОперацииСТехническимиЖидкостями.ТехническиеЖидкости КАК уатОперацииСТехническимиЖидкостями
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
			|		ПО уатОперацииСТехническимиЖидкостями.Номенклатура = уатНоменклатураГСМ.Номенклатура
			|			И (уатНоменклатураГСМ.ВестиУчетОстатковТЖ)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних(&Дата, ) КАК уатМестонахождениеТС
			|		ПО уатОперацииСТехническимиЖидкостями.ТС = уатМестонахождениеТС.ТС
			|ГДЕ
			|	уатОперацииСТехническимиЖидкостями.Ссылка = &Ссылка";
			РезультатЗапросаПоГСМ.УстановитьПараметр("Коэффициент", 1);
			РезультатЗапросаПоГСМ.УстановитьПараметр("Дата", ДокументОбъект.МоментВремени());
			РезультатЗапросаПоГСМ.УстановитьПараметр("Ссылка",ДокументОбъект.Ссылка);
			тблВыборкаЗапросаПоГСМ = РезультатЗапросаПоГСМ.Выполнить().Выгрузить();
			
		КонецЕсли;
			
		СпособОценкиМПЗ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументОбъект.Организация, 
			ПланыВидовХарактеристик.уатПраваИНастройки.СпособОценкиМПЗ);
		
		//Перебираем строки ГСМ, который надо списать
		Для Каждого ВыборкаЗапросаПоГСМ Из тблВыборкаЗапросаПоГСМ Цикл
			НадоСписатьКоличество = ВыборкаЗапросаПоГСМ.СписываемоеКоличество;
			
			//Получение остатков ГСМ по партиям
			РезультатЗапросаПартииГСМ = уатПолучитьОстаткиПартийГСМ(МоментВремениОстПартий, СпособОценкиМПЗ, 
				ВыборкаЗапросаПоГСМ.ТС, ВыборкаЗапросаПоГСМ.ГСМ);
			ВыборкаЗапросаПартииГСМ = РезультатЗапросаПартииГСМ.Выбрать();
			
			//КоличествоОстаток = уатОстатокГСМнаТС(ДокументОбъект.МоментВремени(), ВыборкаЗапросаПоГСМ.ТС, 
			//	ВыборкаЗапросаПоГСМ.ГСМ);
			//Если НадоСписатьКоличество > КоличествоОстаток Тогда
			//	//Расход по ТС превышает остаток
			//	ВсеОК=Ложь;
			//	СтрокаОшибки = СтрокаОшибки + Символы.ПС + "Надо списать: " + НадоСписатьКоличество + ", остаток: " + 
			//		КоличествоОстаток;
			//КонецЕсли; 
			
			Если ВсеОК Тогда
				
				НадоСписатьСумму = 0;
				НадоСписатьСуммуУпр = 0;
				
				Если СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней Тогда
					Попытка
						мТаблицаДляСуммы	= РезультатЗапросаПартииГСМ.Выгрузить();
						НадоСписатьСумму = мТаблицаДляСуммы.Итог("Стоимость") / мТаблицаДляСуммы.Итог("Количество") *
							НадоСписатьКоличество;
						НадоСписатьСуммуУпр = мТаблицаДляСуммы.Итог("СтоимостьУпр") / мТаблицаДляСуммы.Итог("Количество") *
							НадоСписатьКоличество;
					Исключение
					КонецПопытки;	
				КонецЕсли;
				
				Пока НадоСписатьКоличество > 0 Цикл
					Если ВыборкаЗапросаПартииГСМ.Следующий() Тогда
						мКоличество = Мин(НадоСписатьКоличество, ВыборкаЗапросаПартииГСМ.Количество);
						мКоличество = ?(мКоличество < 0, 0, мКоличество);
						
						Если СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней Тогда
							мСтоимость = Мин(НадоСписатьСумму, ВыборкаЗапросаПартииГСМ.Стоимость);
							мСтоимостьУпр = Мин(НадоСписатьСуммуУпр, ВыборкаЗапросаПартииГСМ.СтоимостьУпр);
						Иначе
							
							Если ВыборкаЗапросаПартииГСМ.Количество = 0 
								Или ВыборкаЗапросаПартииГСМ.Количество < НадоСписатьКоличество Тогда
								мСтоимость = ВыборкаЗапросаПартииГСМ.Стоимость;
								мСтоимостьУпр = ВыборкаЗапросаПартииГСМ.СтоимостьУпр;
							Иначе	
								мСтоимость = НадоСписатьКоличество * ВыборкаЗапросаПартииГСМ.Стоимость / 
									ВыборкаЗапросаПартииГСМ.Количество;
								мСтоимостьУпр = НадоСписатьКоличество * ВыборкаЗапросаПартииГСМ.СтоимостьУпр / 
									ВыборкаЗапросаПартииГСМ.Количество;
								//мСтоимостьУпр = мСтоимость;
							КонецЕсли;
							
						КонецЕсли;      
						
						Если мКоличество > 0 Тогда
							НоваяСтрока = ТаблицаДляСписанияГСМ.Добавить();
							НоваяСтрока.ТС = ВыборкаЗапросаПоГСМ.ТС;
							НоваяСтрока.Дата = ВыборкаЗапросаПоГСМ.Дата;
							НоваяСтрока.Партия = ВыборкаЗапросаПартииГСМ.Партия;
							НоваяСтрока.ГСМ = ВыборкаЗапросаПартииГСМ.ГСМ;
							НоваяСтрока.Количество = мКоличество;
							НоваяСтрока.Стоимость = мСтоимость;	
							НоваяСтрока.СтоимостьУпр = мСтоимостьУпр;
							
							Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатСливГСМ") ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.уатСливГСМ")
								ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатОперацииСТехническимиЖидкостями")
								ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.уатОперацииСТехническимиЖидкостями") Тогда
								
								НоваяСтрока.Склад		= ВыборкаЗапросаПоГСМ.Склад;
								НоваяСтрока.Номенклатура= ВыборкаЗапросаПартииГСМ.ГСМ;
								НоваяСтрока.Сумма		= мСтоимость;
								НоваяСтрока.Коэффициент	= ВыборкаЗапросаПоГСМ.Коэффициент;
								
							КонецЕсли;	
							
							мСписаноКоличество 		= мСписаноКоличество + НоваяСтрока.Количество;
							мСписаноСтоимость 		= мСписаноСтоимость + НоваяСтрока.Стоимость;
						КонецЕсли;
						
						НадоСписатьКоличество = НадоСписатьКоличество - мКоличество;
						НадоСписатьСумму = НадоСписатьСумму - мСтоимость;
						НадоСписатьСуммуУпр = НадоСписатьСуммуУпр - мСтоимостьУпр;
						
					Иначе
						НоваяСтрока = ТаблицаДляСписанияГСМ.Добавить();
						НоваяСтрока.ТС = ВыборкаЗапросаПоГСМ.ТС;
						НоваяСтрока.Дата = ВыборкаЗапросаПоГСМ.Дата;
						НоваяСтрока.Партия = Неопределено;
						НоваяСтрока.ГСМ = ВыборкаЗапросаПоГСМ.ГСМ;
						НоваяСтрока.Количество = НадоСписатьКоличество;
						НоваяСтрока.Стоимость = НадоСписатьСумму;	
						НоваяСтрока.СтоимостьУпр = НадоСписатьСуммуУпр;
						
						НадоСписатьКоличество = 0;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
		вхСредняяЦена = ?(мСписаноКоличество=0, 0,окр(мСписаноСтоимость / мСписаноКоличество,2));
		
	Иначе
		
		//заполняем таблицу по движениям регистра документа. Стоимость ГСМ берем из регистра
		
		РезультатЗапросаПоГСМ 		= Новый Запрос();
		РезультатЗапросаПоГСМ.Текст	=
		"ВЫБРАТЬ
		|	уатОстаткиГСМнаТС.ТС,
		|	уатОстаткиГСМнаТС.ГСМ,
		|	уатОстаткиГСМнаТС.Количество,
		|	уатОстаткиГСМнаТС.Стоимость,
		|	уатОстаткиГСМнаТС.СтоимостьУпр
		|ИЗ
		|	РегистрНакопления.уатОстаткиГСМнаТС КАК уатОстаткиГСМнаТС
		|ГДЕ
		|	уатОстаткиГСМнаТС.Регистратор = &Ссылка";
		РезультатЗапросаПоГСМ.УстановитьПараметр("Ссылка",ДокументОбъект.Ссылка);
		
		ВыборкаЗапросаПоГСМ = РезультатЗапросаПоГСМ.Выполнить().Выбрать();
		
		//Перебираем строки ГСМ, который надо списать
		Пока ВыборкаЗапросаПоГСМ.Следующий() Цикл
			НоваяСтрока = ТаблицаДляСписанияГСМ.Добавить();
			НоваяСтрока.ТС = ВыборкаЗапросаПоГСМ.ТС;
			НоваяСтрока.ГСМ = ВыборкаЗапросаПоГСМ.ГСМ;
			НоваяСтрока.Количество = ВыборкаЗапросаПоГСМ.Количество;
			НоваяСтрока.Стоимость = ВыборкаЗапросаПоГСМ.Стоимость;
			НоваяСтрока.СтоимостьУпр = ВыборкаЗапросаПоГСМ.СтоимостьУпр;
		КонецЦикла; 
		
	КонецЕсли;
	
	мТочностьОстатковГСМ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументОбъект.Организация, 
		ПланыВидовХарактеристик.уатПраваИНастройки.ТочностьОстатковТоплива);
	Для Каждого ТекСтрока Из ТаблицаДляСписанияГСМ Цикл
		ТекСтрока.Количество = Окр(ТекСтрока.Количество, мТочностьОстатковГСМ);
	КонецЦикла;
	
	Возврат ВсеОК;
	
КонецФункции // ПодготовитьТаблицуСписанияГСМ()


/////////////////////////////////////////////////////////////////////////////////////
// ПЛАСТИКОВЫЕ КАРТы

//Возвращает пластиковую карту, закрепленную за ТС или водителем
// Возвращаемое значение: Пластиковая карта
Функция уатПластиковаяКартаТСВодителя(ТС, Водитель) ЭКСПОРТ
	
	Запрос = Новый Запрос();
	ТекстЗапроса =
	
	"ВЫБРАТЬ
	|	уатТопливныеКарты.Ссылка КАК ПластиковаяКарта,
	|	уатТопливныеКарты.Основная
	|ИЗ
	|	Справочник.уатТопливныеКарты КАК уатТопливныеКарты
	|ГДЕ
	|	(уатТопливныеКарты.КомуВыдана = &ТС
	|			ИЛИ уатТопливныеКарты.КомуВыдана = &Водитель)
	|	И НЕ уатТопливныеКарты.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	уатТопливныеКарты.КомуВыдана.Ссылка УБЫВ,
	|	уатТопливныеКарты.КомуВыдана.Ссылка УБЫВ,
	|	уатТопливныеКарты.Основная УБЫВ";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТС",ТС);
	Запрос.УстановитьПараметр("Водитель",Водитель);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() Тогда
		
		Результат = РезультатЗапроса[0].ПластиковаяКарта;
		
	Иначе
		
		Результат = Справочники.уатТопливныеКарты.ПустаяСсылка();
		
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции // уатПластиковаяКартаТСВодителя

//Возвращает ТС или водителя, за которыми закреплена пластиковая карта
// Возвращаемое значение: ТС или водитель
Функция уатВладелецПластиковойКарты(ПластиковаяКарта) ЭКСПОРТ
	
	Запрос=Новый Запрос();
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатТопливныеКарты.КомуВыдана
	|ИЗ
	|	Справочник.уатТопливныеКарты КАК уатТопливныеКарты
	|ГДЕ
	|	уатТопливныеКарты.Ссылка = &ПластиковаяКарта";
	
	Запрос.Текст=ТекстЗапроса;
	Запрос.УстановитьПараметр("ПластиковаяКарта",ПластиковаяКарта);
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаЗапроса.Следующий() Тогда
		
		Результат = ВыборкаЗапроса.КомуВыдана;
		
	Иначе
		
		Результат = Неопределено;
		
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции // уатВладелецПластиковойКарты


/////////////////////////////////////////////////////////////////////////////////////
// ЗАТРАТЫ

// Функция находит план затрат
//
// Параметры:
//  Организация - ссылка справочника Организации
//  Подразделение - ссылка справочника ПодразделениеОрганизации
//  ТС     - автомобиль
//  Колонна - ссылка справочника уатКолонна
//
// Возвращаемое значение: - ссылка справочника уатПланыПримененияЗатрат если найден,
//							Неопределено - если не найден.
//
//Алгоритм поиска:
// 1. Ищем записи для указанных Организации и Подразделения. Если найдена - работаем с этой записью. Если нет,
//    то ищем записи для Организации. Если найдена - работаем с этой записью. Если нет,  то ищем записи для 
//    пустой Организации. Если не найдено - возвращаем Неопределено.
// 2. Среди набора записей ищем первую у которой в фильтрах указаны и колонна и ТС. Если найдена, и фильтр
//    удовлетворяет условию то переходим к пункту 6.
// 3. Среди набора записей ищем первую у которой в фильтрах указано ТС. Если найдена, и фильтр
//    удовлетворяет условию то переходим к пункту 6.
// 4. Среди набора записей ищем первую у которой в фильтрах указана Колонна. Если найдена, и фильтр
//    удовлетворяет условию то переходим к пункту 6.
// 5. Среди набора записей ищем первую у которой пустой фильтр. Если найдена то переходим к пункту 6.
// 6. Возвращаем ссылку.
//
Функция уатНайтиПланЗатрат(ПланЗатрат, Организация, ТС, Колонна = Неопределено) ЭКСПОРТ
	
	ПланЗатрат = Справочники.уатПланыПримененияЗатрат.ПустаяСсылка();
	
	Если НЕ ЗначениеЗаполнено(ТС) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Результат = Ложь;
	
	Если Колонна = Неопределено И ЗначениеЗаполнено(ТС) Тогда
		Колонна = МестонахождениеТС(ТС).Колонна;
	КонецЕсли;
	
	ЗапросПланЗатрат = Новый Запрос;
	ЗапросПланЗатрат.Текст = 
	"ВЫБРАТЬ
	|	уатПланыПримененияЗатрат.Ссылка,
	|	уатПланыПримененияЗатрат.Фильтры.(
	|		Ссылка,
	|		НомерСтроки,
	|		Фильтр
	|	)
	|ИЗ
	|	Справочник.уатПланыПримененияЗатрат КАК уатПланыПримененияЗатрат
	|ГДЕ
	|	уатПланыПримененияЗатрат.Организация = &Организация";
	
	ЗапросПланЗатрат.УстановитьПараметр("Организация", Организация);
	мРезультатЗапроса = ЗапросПланЗатрат.Выполнить();
	
	Если мРезультатЗапроса.Пустой() Тогда
		
		ЗапросПланЗатрат.Текст = 
		
		"ВЫБРАТЬ
		|	уатПланыПримененияЗатрат.Ссылка,
		|	уатПланыПримененияЗатрат.Фильтры.(
		|		Ссылка,
		|		НомерСтроки,
		|		Фильтр
		|	)
		|ИЗ
		|	Справочник.уатПланыПримененияЗатрат КАК уатПланыПримененияЗатрат
		|ГДЕ
		|	уатПланыПримененияЗатрат.Организация = &Организация";
		
		ЗапросПланЗатрат.УстановитьПараметр("Организация", Справочники.Организации.ПустаяСсылка());
		мРезультатЗапроса = ЗапросПланЗатрат.Выполнить();
		
		Если мРезультатЗапроса.Пустой() Тогда
			
			Возврат Результат;
			
		КонецЕсли;
	КонецЕсли;
	
	РезультатФильтр 		= Ложь;
	РезультатФильтрТС 		= Ложь;
	РезультатФильтрКолонна 	= Ложь;
	
	мВыборкаЗапроса = мРезультатЗапроса.Выбрать();
	
	//первый проход, ищем фильтр по ТС и по Колонне
	Пока мВыборкаЗапроса.Следующий() Цикл
		
		мВыборкаЗапросаФильтры	= мВыборкаЗапроса.Фильтры.Выбрать();
		Пока мВыборкаЗапросаФильтры.Следующий() Цикл
			
			Если мВыборкаЗапросаФильтры.Фильтр = Колонна Тогда
				РезультатФильтрКолонна = Истина;
			ИначеЕсли мВыборкаЗапросаФильтры.Фильтр = ТС Тогда
				РезультатФильтрТС = Истина;
			КонецЕсли;	
			
		КонецЦикла;
		
		Если РезультатФильтрКолонна и РезультатФильтрТС Тогда
			
			Результат	= Истина;
			ПланЗатрат = мВыборкаЗапроса.Ссылка;
			Возврат Результат;
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Если Не (РезультатФильтрТС и РезультатФильтрКолонна) Тогда
		//второй проход, ищем фильтр по ТС
		мВыборкаЗапроса.Сбросить();
		Пока мВыборкаЗапроса.Следующий() Цикл
			
			мВыборкаЗапросаФильтры	= мВыборкаЗапроса.Фильтры.Выбрать();
			Пока мВыборкаЗапросаФильтры.Следующий() Цикл
				Если мВыборкаЗапросаФильтры.Фильтр = ТС Тогда
					
					Результат	= Истина;
					ПланЗатрат = мВыборкаЗапроса.Ссылка;
					Возврат Результат;
					
				КонецЕсли;	
			КонецЦикла;
			
		КонецЦикла;
		
		//третий проход, ищем фильтр по Колонне
		мВыборкаЗапроса.Сбросить();
		Пока мВыборкаЗапроса.Следующий() Цикл
			
			мВыборкаЗапросаФильтры	= мВыборкаЗапроса.Фильтры.Выбрать();
			Пока мВыборкаЗапросаФильтры.Следующий() Цикл
				Если мВыборкаЗапросаФильтры.Фильтр = Колонна Тогда
					
					Результат	= Истина;
					ПланЗатрат = мВыборкаЗапроса.Ссылка;
					Возврат Результат;
					
				КонецЕсли;	
			КонецЦикла;
			
		КонецЦикла;
		
		//четвертый проход, ищем записи с пустым фильтром
		мВыборкаЗапроса.Сбросить();
		Пока мВыборкаЗапроса.Следующий() Цикл
			
			мВыборкаЗапросаФильтры	= мВыборкаЗапроса.Фильтры.Выбрать();
			// нет никаких фильтров
			Если мВыборкаЗапросаФильтры.Количество() = 0 Тогда
				
				Результат	= Истина;
				ПланЗатрат = мВыборкаЗапроса.Ссылка;
				Возврат Результат;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции // уатНайтиПланЗатрат       

// Функция находит цену
//
// Параметры:
//
Функция уатНайтиЦенуНоменклатуры(Дата, Номенклатура, ВидЦен = Неопределено, Контрагент = Неопределено, Соглашение = Неопределено, флСообщатьОшибки = Истина) ЭКСПОРТ
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыПоставщиков.Период,
	|	ЦеныНоменклатурыПоставщиков.Партнер,
	|	ЦеныНоменклатурыПоставщиков.Номенклатура,
	|	ЦеныНоменклатурыПоставщиков.Валюта,
	|	ЦеныНоменклатурыПоставщиков.Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(
	|			&Дата,
	|			Номенклатура = &Номенклатура
	|			//ВИДЦЕН
	|			//ПАРТНЕР
	|) КАК ЦеныНоменклатурыПоставщиков
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	Запрос.УстановитьПараметр("Дата", Дата);		
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ВидЦен", ВидЦен);
	
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ВИДЦЕН", "И ВидЦеныПоставщика = &ВидЦен");
		Запрос.УстановитьПараметр("ВидЦен", ВидЦен);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.уатАЗС") Тогда 
			Если ТипЗнч(Контрагент.Контрагент_Склад) = Тип("СправочникСсылка.Контрагенты") Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ПАРТНЕР", "И Партнер = &Партнер");
				Запрос.УстановитьПараметр("Партнер", Контрагент.Контрагент_Склад.Партнер);
			КонецЕсли;
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ПАРТНЕР", "И Партнер = &Партнер");
			Запрос.УстановитьПараметр("Партнер", Контрагент.Партнер);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Соглашение) 
		И НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Если ТипЗнч(Соглашение) = Тип("СправочникСсылка.СоглашенияСПоставщиками") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ПАРТНЕР", "И Партнер = &Партнер");
		Запрос.УстановитьПараметр("Партнер", Соглашение.Партнер);
		КонецЕсли;
	КонецЕсли;
	
	//Запрос.Текст = СтрЗаменить(Запрос.Текст, "//СОГЛАШЕНИЕ", "И (Соглашение = &Соглашение ИЛИ Соглашение = ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка))");
	//Запрос.УстановитьПараметр("Соглашение", ?(ЗначениеЗаполнено(Соглашение), Соглашение, Справочники.СоглашенияСПоставщиками.ПустаяСсылка()));
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		Результат = Новый Структура("Цена, Валюта", ВыборкаРезультатаЗапроса.Цена, ВыборкаРезультатаЗапроса.Валюта);
		флЗаписьНайдена = Истина;
	Иначе
		Если флСообщатьОшибки = Истина Тогда
			Сообщить("Не указана цена номенклатуры """ + Номенклатура + """, контрагента/АЗС """ + Контрагент +
				""", на дату " + Дата, СтатусСообщения.Внимание);
		КонецЕсли;
		Результат = Новый Структура("Цена, Валюта", 0, Неопределено);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // уатНайтиЦенуНоменклатуры       

//Возвращает значение реквизитов Груза из регистра сведений
// Параметры:
//	Груз - СправочникСсылка.Номенклатура - ссылка на элемент номенклатуры
//	ЕдиницаИзмерения - СправочникСсылка.УпаковкиЕдиницыИзмерения - ссылка на элемент единиц измерения
//	ИмяРеквизита - строка
//					ГаражныйНомер
//					ГосударственныйНомер
//					Модель
//					VIN
//					МодельДвигателя
//					МощностьДвигателяЛС
//					МощностьДвигателяКВт
//					НомерДвигателя
//					НомерКузова
//					НомерШасси
//					ЦветКузова
//					СобственныйВес
//					ОсновноеУсловиеРаботы
//					ОсновнойРежимРаботы
//					ГабаритныйРазмерДлина
//					ГабаритныйРазмерВысота
//					ГабаритныйРазмерШирина
//					Класс
// Возвращаемое значение: ЗначениеРеквизита
Функция уатПрочитатьРеквизитыГруза(Груз, ЕдиницаИзмерения, ИмяРеквизита="") ЭКСПОРТ
	Перем ЗначениеРеквизита;
	
	ВыборкаЗаписей = РегистрыСведений.уатНоменклатураГрузов.Получить(Новый Структура("Номенклатура, ЕдиницаИзмерения",
		Груз, ЕдиницаИзмерения));
	
	Если Не ЗначениеЗаполнено(ИмяРеквизита) Тогда
		Возврат ВыборкаЗаписей;
	Иначе	
		ВыборкаЗаписей.Свойство(ИмяРеквизита, ЗначениеРеквизита);
		Возврат ЗначениеРеквизита;
	КонецЕсли;	
КонецФункции // уатПрочитатьРеквизитГруза()

// Процедура выполняет проверку переданного значения на заполненность
//
// Параметры:
//  Значение     - проверяемое значение
//
// Возвращаемое значение:
//  Результат проверки
Функция уатЗначениеНеЗаполнено(Значение) Экспорт
	Попытка
		Возврат НЕ ЗначениеЗаполнено(Значение);
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

// Функция возвращает форму выбора груза
//
// Параметры:
//  ВладелецФормы- элемент владелец открываемой формы
//  ТекНоменклатура - текущее значение номенклатуры. на этом значении будет 
//                 спозиционирован список после открытия.
Функция уатПолучитьФормуВыбораГруза(ВладелецФормы,ТекНоменклатура = неопределено) Экспорт
	Форма = РегистрыСведений.уатНоменклатураГрузов.ПолучитьФорму("ФормаВыбора",ВладелецФормы);
	Если НЕ ТекНоменклатура = Неопределено  тогда
		Форма.Номенклатура = ТекНоменклатура;
	КонецЕсли;
	Форма.ЗакрыватьПриВыборе = Истина;
	Возврат Форма;
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С НОМЕНКЛАТУРОЙ

// Функция возвращает истина, если входящая номенклатура является услугой
//
Функция ВидНоменклатурыУслуга(Номенклатура) Экспорт
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("Услуга", "Номенклатура") Тогда
		
		Возврат Номенклатура.Услуга;
		
	ИначеЕсли уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("ТипНоменклатуры", "Номенклатура")
		И Метаданные.Перечисления.Найти("ТипыНоменклатуры") <> Неопределено Тогда
		
		Возврат Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;
		
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ ДОКУМЕНТОВ

// Функция получает описание значений свойств
//
// Параметры:
//  ФормаОбъекта - форма объекта, в котором необходимо обновить кнопку
//  ОписаниеЗначенийСвойств - текстовое описание значений свойств
//
Процедура уатИзменитьПредставлениеКнопкиВыбораСвойств(ФормаОбъекта, ОписаниеЗначенийСвойств) Экспорт 
	
	Если ПустаяСтрока(ОписаниеЗначенийСвойств) ИЛИ ОписаниеЗначенийСвойств = "Дополнительные реквизиты" Тогда
		КартинкаКнопки = БиблиотекаКартинок.уатДополнительныеРеквизитыНеУстановлены;
	Иначе
		КартинкаКнопки = БиблиотекаКартинок.уатДополнительныеРеквизитыУстановлены;
	КонецЕсли;
	
	Для Каждого ЭлементФормы Из ФормаОбъекта.ЭлементыФормы Цикл
		Если ТипЗнч(ЭлементФормы) = Тип("КоманднаяПанель") Тогда 
			Кнопка = ЭлементФормы.Кнопки.Найти("ДействиеСвойства");
			Если Кнопка <> Неопределено Тогда
				Кнопка.Подсказка = ОписаниеЗначенийСвойств;
				Кнопка.Картинка  = КартинкаКнопки;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура оформления строки ТС (первоначальные сведения о ТС, различные АРМы, другие списки ТС)
Процедура уатОформитьСтрокуТС(ТС, ЭлементФормы_СписокТС, ОформлениеСтроки, КешПоДок, КешПоТО) Экспорт
	Если НЕ КешПоДок.Найти(ТС) = Неопределено Тогда
		ОформлениеСтроки.Ячейки.ПросроченныеДокументы.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.ПросроченныеДокументы.ИндексКартинки = 0;
	Иначе
		ОформлениеСтроки.Ячейки.ПросроченныеДокументы.ОтображатьКартинку = Истина;
	КонецЕсли;	
	ОформлениеСтроки.Ячейки.ПросроченныеДокументы.ОтображатьТекст  = Ложь;
	Если НЕ КешПоТО.Найти(ТС) = Неопределено Тогда
		ОформлениеСтроки.Ячейки.ТО.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.ТО.ИндексКартинки = 0;
	Иначе
		ОформлениеСтроки.Ячейки.ТО.ОтображатьКартинку = Истина;
	КонецЕсли;	
	ОформлениеСтроки.Ячейки.ТО.ОтображатьТекст  = Ложь;
	
	Местонахождение_ = Неопределено;
	КолонкаКолонна_ = ЭлементФормы_СписокТС.Колонки.Найти("Колонна");
	КолонкаОрганизация_ = ЭлементФормы_СписокТС.Колонки.Найти("Организация");
	КолонкаПодразделение_ = ЭлементФормы_СписокТС.Колонки.Найти("Подразделение");
	флКолонкаКолонна_ = (КолонкаКолонна_ <> Неопределено И КолонкаКолонна_.Видимость);
	флКолонкаОрганизация_ = (КолонкаОрганизация_ <> Неопределено И КолонкаОрганизация_.Видимость);
	флКолонкаПодразделение_ = (КолонкаПодразделение_ <> Неопределено И КолонкаПодразделение_.Видимость);
	Если флКолонкаКолонна_ ИЛИ флКолонкаОрганизация_ ИЛИ флКолонкаПодразделение_ Тогда
		Местонахождение_ = МестонахождениеТС(ТС);
	КонецЕсли;	
	Если флКолонкаКолонна_ Тогда
		ОформлениеСтроки.Ячейки.Колонна.УстановитьТекст(Местонахождение_.Колонна);
	КонецЕсли;
	Если флКолонкаОрганизация_ Тогда
		ОформлениеСтроки.Ячейки.Организация.УстановитьТекст(Местонахождение_.Организация);
	КонецЕсли;
	Если флКолонкаПодразделение_ Тогда
		ОформлениеСтроки.Ячейки.Подразделение.УстановитьТекст(Местонахождение_.Подразделение);
	КонецЕсли;
КонецПроцедуры

// Процедура очищает поля, связанные со справочником Сотрудники и задает ограничение типа,
//поскольку в текущей версии решения используется составной тип
//
Процедура УстановитьОграничениеТипаСотрудников(ДокОбъект) Экспорт
	Если ТипЗнч(ДокОбъект) = Тип("ДокументОбъект.уатПутевойЛист") Тогда
		Если ДокОбъект.Водитель1 = Неопределено Тогда
			ДокОбъект.Водитель1 = Справочники.Сотрудники.ПустаяСсылка();
		КонецЕсли;
		Если ДокОбъект.Водитель2 = Неопределено Тогда
			ДокОбъект.Водитель2 = Справочники.Сотрудники.ПустаяСсылка();
		КонецЕсли;
		Если ДокОбъект.Сотрудник1 = Неопределено Тогда
			ДокОбъект.Сотрудник1 = Справочники.Сотрудники.ПустаяСсылка();
		КонецЕсли;
		Если ДокОбъект.Сотрудник2 = Неопределено Тогда
			ДокОбъект.Сотрудник2 = Справочники.Сотрудники.ПустаяСсылка();
		КонецЕсли;
		Если ДокОбъект.ОсмотрелВрач = Неопределено Тогда
			ДокОбъект.ОсмотрелВрач = Справочники.Сотрудники.ПустаяСсылка();
		КонецЕсли;
		Если ДокОбъект.ВыдалДиспетчер = Неопределено Тогда
			ДокОбъект.ВыдалДиспетчер = Справочники.Сотрудники.ПустаяСсылка();
		КонецЕсли;
		Если ДокОбъект.ВыпустилМеханик = Неопределено Тогда
			ДокОбъект.ВыпустилМеханик = Справочники.Сотрудники.ПустаяСсылка();
		КонецЕсли;
		Если ДокОбъект.ПринялДиспетчер = Неопределено Тогда
			ДокОбъект.ПринялДиспетчер = Справочники.Сотрудники.ПустаяСсылка();
		КонецЕсли;
		Если ДокОбъект.ПринялМеханик = Неопределено Тогда
			ДокОбъект.ПринялМеханик = Справочники.Сотрудники.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//Функция возвращает строку поля для получения кода ЕИ по ОКЕИ
//для вставки в запрос
//
Функция ПолеЗапросаКодЕИпоОКЕИ() Экспорт
	Возврат "ЕдиницаИзмерения.Код";
КонецФункции

//Функция возвращает пробег ТС 
//
Функция уатПробегТС(ДатаКонец, ТС,ДатаНачала = Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(ТС) Тогда
		Возврат 0;
	КонецЕсли;
	
	НаличиеСпидометра = ТС.уатМодель.НаличиеСпидометра;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(уатВыработкаТСОбороты.КоличествоОборот, 0) КАК Пробег
	|ПОМЕСТИТЬ Выработка
	|ИЗ
	|	РегистрНакопления.уатВыработкаТС.Обороты(
	|			&ДатаНачала,
	|			&МоментВремени,
	|			Регистратор,
	|			ПараметрВыработки = &ПараметрВыработки
	|				И ТС = &ТС) КАК уатВыработкаТСОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СправочникТранспортныеСредства.уатНачальныйПробег, 0)"+?(НаличиеСпидометра, "", " * 3600")+"
	|ИЗ
	|	Справочник.ТранспортныеСредства КАК СправочникТранспортныеСредства
	|ГДЕ
	|	СправочникТранспортныеСредства.уатНачальныйПробег > 0
	|	И СправочникТранспортныеСредства.Ссылка = &ТС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(Выработка.Пробег, 0)) КАК Пробег
	|ИЗ
	|	Выработка КАК Выработка";
	Запрос.УстановитьПараметр("МоментВремени",ДатаКонец);
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		Запрос.УстановитьПараметр("ДатаНачала",ДатаНачала);
	Иначе
		Запрос.УстановитьПараметр("ДатаНачала",Дата(1,1,1));
	КонецЕсли;
	Если НаличиеСпидометра Тогда
		Запрос.УстановитьПараметр("ПараметрВыработки",Справочники.уатПараметрыВыработки.ПробегОбщий);
	Иначе
		Запрос.УстановитьПараметр("Параметрвыработки",Справочники.уатПараметрыВыработки.ВремяВРаботе);
	Конецесли;
	Запрос.УстановитьПараметр("ТС",ТС);
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	ВыборкаЗапроса.Следующий();
	Если ЗначениеЗаполнено(ВыборкаЗапроса.Пробег) Тогда
		Если НаличиеСпидометра Тогда
			Результат = ВыборкаЗапроса.Пробег;
		Иначе
			Результат = ВыборкаЗапроса.Пробег/3600;
		КонецЕсли;
	Иначе
		Результат = 0;
	КонецЕсли;
	Возврат Результат;
КонецФункции

//Возвращает общий модуль для передачи на клиентскую часть
//
Функция ПолучитьОбщийМодуль(ИмяМодуля) Экспорт
	Возврат Метаданные.ОбщиеМодули[ИмяМодуля];
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ GPS

// Открывает отчет дополнительные сведения по  Omnicomm в зависимости от используемой системы GPS
//
Процедура УатПолныйОтчетДополнительныеСведенияПоOmnicomm() Экспорт
	Если Константы.уатИспользоватьOmnicomm.Получить() Тогда
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.уатДополнительныеСведенияПоGPS) Тогда
			Форма = Отчеты.уатДополнительныеСведенияПоGPS.ПолучитьФорму();
			Форма.Открыть();
		Иначе
			#Если Клиент Тогда
				ПоказатьПредупреждение(Неопределено, "Нарушение прав доступа!");
			#КонецЕсли
		КонецЕсли;
	Иначе
		Сообщить("Открытие возможно только тогда, когда включено использование системы GPS - Omnicomm.", СтатусСообщения.Важное);
	КонецЕсли;
КонецПроцедуры

// Открывает отчет сравнение заправок ГСМ и Omnicomm в зависимости от используемой системы GPS
//
Процедура УатПолныйОтчетСравнениеЗаправокГСМиOmnicomm() Экспорт
	Если Константы.уатИспользоватьOmnicomm.Получить() Тогда
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.уатСравнениеЗаправокГСМиOmnicomm) Тогда
			Форма = Отчеты.уатСравнениеЗаправокГСМиOmnicomm.ПолучитьФорму();
			Форма.Открыть();
		Иначе
			#Если Клиент Тогда
				ПоказатьПредупреждение(Неопределено, "Нарушение прав доступа!");
			#КонецЕсли
		КонецЕсли;
	Иначе
		Сообщить("Открытие возможно только тогда, когда включено использование системы GPS - Omnicomm.", СтатусСообщения.Важное);		
	КонецЕсли;
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ

// Выполняет установку параметра сеанса "Подсистема УАТ инициализирована"
//
&НаСервере
Процедура УстановитьПодсистемаУАТинициализирована() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыСеанса.уатПодсистемаУАТинициализирована = Истина;
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

// Проверяет наличие у пользователя минимально необходимого набора ролей для запуска системы
//
&НаСервере
Функция КонтрольМинимальногоНабораРолейДляЗапускаСистемы() Экспорт
	Возврат РольДоступна("ПолныеПрава") ИЛИ РольДоступна("БазовыеПраваБСП");
КонецФункции

// Инициализация параметров сеанса
//
&НаСервере
Процедура УстановкаПараметровСеансаУАТ(ТребуемыеПараметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерОборудованияВызовСервера.УстановитьПараметрыСеансаПодключаемогоОборудования("РабочееМестоКлиента", Новый Структура);
	ПараметрыСеанса.уатПодсистемаУАТинициализирована = Ложь;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

//Функция возвращает список пластиковых карт водителя или автомобиля
// Параметры: КомуВыдана - ссылка на справочник ФизЛица или ОС
Функция уатСписокПластиковыхКарт(КомуВыдана) ЭКСПОРТ
	спПластиковыхКарт = Новый СписокЗначений;
	
	спрПластиковыеКарты = Справочники.уатТопливныеКарты;
	ОтборКомуВыдана = Новый Структура("КомуВыдана");
	ОтборКомуВыдана.КомуВыдана = КомуВыдана;
	ВыборкаПластиковыеКарты = спрПластиковыеКарты.Выбрать(,,ОтборКомуВыдана);
	Пока ВыборкаПластиковыеКарты.Следующий() Цикл
		спПластиковыхКарт.Добавить(ВыборкаПластиковыеКарты.Ссылка, ВыборкаПластиковыеКарты.Код);
	КонецЦикла;	
	Возврат спПластиковыхКарт;
	
КонецФункции // СписокПластиковыхКарт       

// процедура выполняет чтение данных из хранилища для заданного объекта
//
// Параметры
//  Объект - Объект для которого необходимо получить картинки и/или файлы
Функция уатПрочитатьЗначениеИзХранилища(Объект) ЭКСПОРТ
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	уатКартинкиИФайлы.Данные
	|ИЗ
	|	РегистрСведений.уатКартинкиИФайлы КАК уатКартинкиИФайлы
	|ГДЕ
	|	уатКартинкиИФайлы.Объект = &Объект";
	
	Запрос.УстановитьПараметр("Объект", Объект);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		Возврат РезультатЗапроса; 
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции // уатПрочитатьЗначениеИзХранилища

// Функция получает класс номенклатуры грузов
//
Функция уатКлассГруза(Номенклатура) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатНоменклатураГрузов.Класс
	|ИЗ
	|	РегистрСведений.уатНоменклатураГрузов КАК уатНоменклатураГрузов
	|ГДЕ
	|	уатНоменклатураГрузов.Номенклатура = &Номенклатура";
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() тогда
		Возврат Выборка.Класс;
	КонецЕсли;
	
	Возврат 0;
КонецФункции

// Функция выполняет получение веса и объема для заданной номенклатуры и единицы
// измерения. 
//
// Параметры:
//  Номенклатура - номенклатура для которой необходимо получить параметры
//  ЕдиницаИзмерения - единица измерения номенклатуры, для которой необходимо получить параметры
//
// Возвращаемое значение:
//  Результат - Структура - содержащая значения веса и объема
Функция ПолучитьВесОбъемНоменклатуры(Номенклатура, ЕдиницаИзмерения) Экспорт
	
	Результат = Новый Структура("Вес, Объем, КоличествоМест", 0, 0, 0);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Номенклатура",     Номенклатура);
	Запрос.УстановитьПараметр("ЕдиницаИзмерения", ЕдиницаИзмерения);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	1 * &ТекстЗапросаВесУпаковки КАК Вес,
	|	1 * &ТекстЗапросаОбъемУпаковки КАК Объем,
	|	ЕСТЬNULL(уатНоменклатураГрузов.КоличествоМест, 0) КАК КоличествоМест
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|		ПО (УпаковкиЕдиницыИзмерения.Ссылка = &ЕдиницаИзмерения)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГрузов КАК уатНоменклатураГрузов
	|		ПО (уатНоменклатураГрузов.Номенклатура = &Номенклатура)
	|			И (уатНоменклатураГрузов.ЕдиницаИзмерения = &ЕдиницаИзмерения)
	|ГДЕ
	|	СправочникНоменклатура.Ссылка = &Номенклатура";
	
	Если Номенклатура.ИспользоватьУпаковки Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаВесУпаковки", Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("УпаковкиЕдиницыИзмерения", "СправочникНоменклатура"));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаОбъемУпаковки", Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("УпаковкиЕдиницыИзмерения", "СправочникНоменклатура"));
	Иначе 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаВесУпаковки", Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("СправочникНоменклатура.ЕдиницаИзмерения", "СправочникНоменклатура"));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаОбъемУпаковки", Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("СправочникНоменклатура.ЕдиницаИзмерения", "СправочникНоменклатура"));
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Результат.Вес            = Выборка.Вес;
		Результат.Объем          = Выборка.Объем;
		Результат.КоличествоМест = Выборка.КоличествоМест;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьУпаковкуНоменклатурыПоУмолчанию(Номенклатура, Упаковка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Номенклатура) ИЛИ НЕ Номенклатура.ИспользоватьУпаковки Тогда
		Упаковка = Неопределено;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СпрУпаковки.Ссылка КАК Упаковка
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК СпрУпаковки
	|ГДЕ
	|	СпрУпаковки.Владелец = &Номенклатура
	|	И НЕ СпрУпаковки.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Упаковка = Выборка.Упаковка;
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработчик поля Водитель
//Заменяет стандартную обработку на выбор значения из регистра Водители
Функция уатВодительАвтоподборТекста(ЭтаФорма, Знач Текст, ТекстАвтоПодбора, СтандартнаяОбработка, 
		Знач Организация_ = Неопределено) Экспорт
	СтандартнаяОбработка = Ложь;
	
	Если Организация_ <> Неопределено И НЕ ЗначениеЗаполнено(Организация_) Тогда
		Организация_ = Неопределено;
	КонецЕсли;
	
	ТекстАвтоПодбора = "";
	Запрос = Новый Запрос;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ	
	|	Сотрудники.Ссылка КАК Водитель
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.ДатаУвольнения = &ПустаяДата
	|	И (НЕ Сотрудники.ПометкаУдаления)
	|	И Сотрудники.Наименование ПОДОБНО &парамТекст";
	
	Если Организация_ <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|   И Сотрудники.Организация = &Организация";
		Запрос.УстановитьПараметр("Организация", Организация_);
	КонецЕсли;
		
	Запрос.Текст = ТекстЗапроса;
	
	// заменим спецсимволы
	Текст = СтрЗаменить(Текст, "~", "~~");
	Текст = СтрЗаменить(Текст, "%", "~%");
	Текст = СтрЗаменить(Текст, "_", "~_");
	Текст = СтрЗаменить(Текст, "[", "~[");
	Текст = СтрЗаменить(Текст, "-", "~-");
	Текст = СокрЛП(Текст) + "%";
	
	Запрос.УстановитьПараметр("парамТекст", Текст);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		ТекстАвтоПодбора = Выборка.Водитель.Наименование;
	КонецЕсли;
КонецФункции

// Возвращает ссылку на общий модуль по имени.
//
// Параметры:
//  Имя          - Строка - имя общего модуля, например:
//                 "ОбщегоНазначения",
//                 "ОбщегоНазначенияКлиент".
//
// Возвращаемое значение:
//  ОбщийМодуль - общий модуль.
//
Функция уатОбщийМодуль(Имя) Экспорт
	
	Если Метаданные.ОбщиеМодули.Найти(Имя) <> Неопределено Тогда
		Модуль = Вычислить(Имя); // ВычислитьВБезопасномРежиме не требуется, т.к. проверка надежная.
	ИначеЕсли СтрЧислоВхождений(Имя, ".") = 1 Тогда
		Возврат уатСерверныйМодульМенеджера(Имя);
	Иначе
		Модуль = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Общий модуль ""%1"" не найден.'"), Имя);
	КонецЕсли;
	
	Возврат Модуль;
	
КонецФункции

// Возвращает серверный модуль менеджера по имени объекта.
Функция уатСерверныйМодульМенеджера(Имя)
	ОбъектНайден = Ложь;
	
	ЧастиИмени = СтрРазделить(Имя, ".");
	Если ЧастиИмени.Количество() = 2 Тогда
		
		ИмяВида = ВРег(ЧастиИмени[0]);
		ИмяОбъекта = ЧастиИмени[1];
		
		Если ИмяВида = ВРег("Константы") Тогда
			Если Метаданные.Константы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыСведений") Тогда
			Если Метаданные.РегистрыСведений.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыНакопления") Тогда
			Если Метаданные.РегистрыНакопления.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыБухгалтерии") Тогда
			Если Метаданные.РегистрыБухгалтерии.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыРасчета") Тогда
			Если Метаданные.РегистрыРасчета.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Справочники") Тогда
			Если Метаданные.Справочники.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Документы") Тогда
			Если Метаданные.Документы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Отчеты") Тогда
			Если Метаданные.Отчеты.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Обработки") Тогда
			Если Метаданные.Обработки.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("БизнесПроцессы") Тогда
			Если Метаданные.БизнесПроцессы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ЖурналыДокументов") Тогда
			Если Метаданные.ЖурналыДокументов.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Задачи") Тогда
			Если Метаданные.Задачи.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыСчетов") Тогда
			Если Метаданные.ПланыСчетов.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыОбмена") Тогда
			Если Метаданные.ПланыОбмена.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыВидовХарактеристик") Тогда
			Если Метаданные.ПланыВидовХарактеристик.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыВидовРасчета") Тогда
			Если Метаданные.ПланыВидовРасчета.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ОбъектНайден Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Объект метаданных ""%1"" не найден,
			|либо для него не поддерживается получение модуля менеджера.'"), Имя);
	КонецЕсли;
	
	Модуль = Вычислить(Имя); // ВычислитьВБезопасномРежиме не требуется, т.к. проверка надежная.
	
	Возврат Модуль;
КонецФункции
