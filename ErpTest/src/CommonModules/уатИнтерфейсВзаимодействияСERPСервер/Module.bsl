
////////////////////////////////////////////////////////////////////////////////
// Интерфейс взаимодействия с общими модулями конфигурации ERP.
//
// Серверные методы.
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

Функция уатКадровыеДанныеСотрудников(ТолькоРазрешенные, СписокСотрудников, КадровыеДанные, ДатаПолученияДанных = '00010101',
		ПоляОтбораПериодическихДанных = Неопределено, ФормироватьСПериодичностьДень = Истина) Экспорт
	
	Попытка
		МодульКадровыйУчет = ОбщегоНазначения.ОбщийМодуль("КадровыйУчет");
	Исключение
		МодульКадровыйУчет = Неопределено;
	КонецПопытки;
	
	Если МодульКадровыйУчет = Неопределено Тогда
		Возврат Новый ТаблицаЗначений;
	Иначе 
		Возврат МодульКадровыйУчет.КадровыеДанныеСотрудников(ТолькоРазрешенные, СписокСотрудников, КадровыеДанные, ДатаПолученияДанных,
			ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень);
	КонецЕсли;
	
КонецФункции

Процедура уатОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Попытка
		МодульОбработкаТабличнойЧастиСервер = ОбщегоНазначения.ОбщийМодуль("ОбработкаТабличнойЧастиСервер");
	Исключение
		МодульОбработкаТабличнойЧастиСервер = Неопределено;
	КонецПопытки;
	
	Если Не МодульОбработкаТабличнойЧастиСервер = Неопределено Тогда
		МодульОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

Процедура уатОбработатьТЧ(ТЧ, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Попытка
		МодульОбработкаТабличнойЧастиСервер = ОбщегоНазначения.ОбщийМодуль("ОбработкаТабличнойЧастиСервер");
	Исключение
		МодульОбработкаТабличнойЧастиСервер = Неопределено;
	КонецПопытки;
	
	Если МодульОбработкаТабличнойЧастиСервер <> Неопределено Тогда
		МодульОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ТЧ, СтруктураДействий, КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

Функция уатПолучитьОтветственныеЛицаОрганизации(Организация, Дата = Неопределено) Экспорт
	
	Попытка
		МодульОтветственныеЛицаСервер = ОбщегоНазначения.ОбщийМодуль("ОтветственныеЛицаСервер");
	Исключение
		МодульОтветственныеЛицаСервер = Неопределено;
	КонецПопытки;
	
	Если МодульОтветственныеЛицаСервер = Неопределено Тогда
		Возврат Новый Структура;
	Иначе 
		Возврат МодульОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(Организация, Дата);
	КонецЕсли;
	
КонецФункции

Функция уатПолучитьКоэффициентыПересчетаВалюты(ВалютаДокумента, ВалютаВзаиморасчетов, Период) Экспорт
	
	Попытка
		МодульРаботаСКурсамивалютУТ = ОбщегоНазначения.ОбщийМодуль("РаботаСКурсамивалютУТ");
	Исключение
		МодульРаботаСКурсамивалютУТ = Неопределено;
	КонецПопытки;
	
	Если МодульРаботаСКурсамивалютУТ = Неопределено Тогда
		Возврат Новый Структура;
	Иначе 
		Возврат МодульРаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(ВалютаДокумента, ВалютаВзаиморасчетов, Период);
	КонецЕсли;
	
КонецФункции

Функция уатЗаполнитьЦеныПоСебестоимости(ТабличнаяЧасть, ВыделенныеСтроки = Неопределено, ПараметрыЗаполнения, СтруктураДействий = Неопределено, КэшированныеЗначения = Неопределено) Экспорт
	
	Попытка
		МодульПродажиСервер = ОбщегоНазначения.ОбщийМодуль("ПродажиСервер");
	Исключение
		МодульПродажиСервер = Неопределено;
	КонецПопытки;
	
	Если МодульПродажиСервер = Неопределено Тогда
		Возврат Ложь;
	Иначе 
		Возврат МодульПродажиСервер.ЗаполнитьЦеныПоСебестоимости(ТабличнаяЧасть, ВыделенныеСтроки, ПараметрыЗаполнения, СтруктураДействий, КэшированныеЗначения);
	КонецЕсли;
	
КонецФункции

// Процедура заполняет цену и стоимость в переданной таблице.
Процедура уатЗаполнитьЦеныНоменклатуры(ДокОбъект, ИмяТЧ, Склад) Экспорт
	Если Метаданные.Документы.Найти("РасчетСебестоимостиТоваров") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму", "Количество");
	
	ЗапросПредварительныхДанных = Новый Запрос;
	ЗапросПредварительныхДанных.Текст =  
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РасчетСебестоимостиТоваровОрганизации.Ссылка) КАК Количество
	|ИЗ
	|	Документ.РасчетСебестоимостиТоваров.Организации КАК РасчетСебестоимостиТоваровОрганизации
	|ГДЕ
	|	РасчетСебестоимостиТоваровОрганизации.Ссылка.Проведен
	|	И РасчетСебестоимостиТоваровОрганизации.Организация = &Организация";
	
	ЗапросПредварительныхДанных.УстановитьПараметр("Организация", ДокОбъект.Организация);
	ПредварительныеДанные = ЗапросПредварительныхДанных.Выполнить().Выбрать();
	
	Пока ПредварительныеДанные.Следующий() Цикл
		Если ПредварительныеДанные.Количество = 0 Тогда
			//ТекстСообщения = НСтр("ru = 'Не было произведено ни одного расчета себестоимости товаров по организации ""%Организация%"".'");
			//ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%", Оприходование.Организация);
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	//ПродажиСервер.ЗаполнитьЦеныПоСебестоимости(
	//	ДокОбъект[ИмяТЧ], // Табличная часть
	//	, // Выделенные строки (заполнять во всех строках)
	//	Новый Структура( // Параметры заполнения
	//		"Дата, Организация, Склад, ДругиеИменаКолонок",
	//		ДокОбъект.Дата,
	//		ДокОбъект.Организация,
	//		Склад,
	//		Новый Структура("Номенклатура", "Номенклатура")
	//	),
	//	СтруктураДействий);
	
	КэшированныеЗначения = Неопределено;
	ЦеныЗаполнены = Ложь;
	ПараметрыЗаполнения = Новый Структура(
			"Дата, Организация, Склад, ДругиеИменаКолонок",
			ДокОбъект.Дата,
			ДокОбъект.Организация,
			Склад,
			Новый Структура("Номенклатура", "Номенклатура"));
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Параметры заполнения не указаны'");
		Возврат;
	КонецЕсли;
	
	// Получение структуры параметров по умолчанию
	Параметры = Новый Структура(
		"ПоляЗаполнения,  ДругиеИменаКолонок",
		"Цена", Новый Структура);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Параметры, ПараметрыЗаполнения, Истина);
	
	// Проверки входящих данных
	Если Не Параметры.Свойство("Дата") 
		Или Не Параметры.Свойство("Организация") 
		Или Не Параметры.Свойство("Склад")  Тогда
		
		ВызватьИсключение НСтр("ru='В параметрах заполнения должны быть указаны ""Дата"", ""Организация"", ""Склад""'");
		Возврат;
		
	КонецЕсли;
	
	// Получение выгрузки по табличной части
	ТабличнаяЧасть = ДокОбъект[ИмяТЧ];
	Таблица = ТабличнаяЧасть.Выгрузить();
	Таблица.Колонки.ГСМ.Имя = "Номенклатура";
	
	// Получение запроса
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Параметры.Дата), Параметры.Дата, ТекущаяДата()));
	Запрос.УстановитьПараметр("Таблица", Таблица);
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	Запрос.УстановитьПараметр("Склад", Параметры.Склад);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ втТаблицаТоварыСписания
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТоваров.НомерСтроки,
	|	ВременнаяТаблицаТоваров.Номенклатура,
	|	СправочникКлючейАналитики.Ссылка КАК КлючАналитикиУчетаНоменклатуры 
	| ПОМЕСТИТЬ ТаблицаТоваровСКлючамиАналитики
	|ИЗ 
	|	втТаблицаТоварыСписания КАК ВременнаяТаблицаТоваров
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК СправочникКлючейАналитики
	|		ПО (СправочникКлючейАналитики.Номенклатура = ВременнаяТаблицаТоваров.Номенклатура)
	|			И (СправочникКлючейАналитики.Склад = &Склад);
	|
	|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|		ТаблицаТоваровСКлючамиАналитики.НомерСтроки КАК НомерСтроки,
	|		СРЕДНЕЕ(ЕСТЬNULL(ЦеныНоменклатуры.Стоимость, 0)) КАК Цена
	|ПОМЕСТИТЬ втТаблицаСебестоимости
	|	ИЗ
	|		ТаблицаТоваровСКлючамиАналитики КАК ТаблицаТоваровСКлючамиАналитики
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтоимостьТоваров.СрезПоследних(
	|					КОНЕЦПЕРИОДА(&Дата, ДЕНЬ),
	|					(АналитикаУчетаНоменклатуры, Организация) В
	|						(ВЫБРАТЬ
	|							Таблица.КлючАналитикиУчетаНоменклатуры,
	|							&Организация				
	|						ИЗ
	|							ТаблицаТоваровСКлючамиАналитики КАК Таблица)) КАК ЦеныНоменклатуры
	|		ПО ТаблицаТоваровСКлючамиАналитики.КлючАналитикиУчетаНоменклатуры = ЦеныНоменклатуры.АналитикаУчетаНоменклатуры
	|			И (ЦеныНоменклатуры.Организация = &Организация)
	|			
	|СГРУППИРОВАТЬ ПО 
	|ТаблицаТоваровСКлючамиАналитики.НомерСтроки; 
	|
	|ВЫБРАТЬ
	|	втТаблицаТоварыСписания.НомерСтроки КАК НомерСтроки,
	|	втТаблицаСебестоимости.Цена КАК Цена
	|ИЗ
	|	втТаблицаТоварыСписания КАК втТаблицаТоварыСписания
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаСебестоимости КАК втТаблицаСебестоимости
	|		ПО (втТаблицаСебестоимости.НомерСтроки = втТаблицаТоварыСписания.НомерСтроки)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЗаполнения = Новый Структура(Параметры.ПоляЗаполнения);
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, Выборка);
		СтрокаТЧ = ТабличнаяЧасть[Выборка.НомерСтроки - 1];
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураЗаполнения);
		Если СтруктураДействий <> Неопределено Тогда
			уатИнтерфейсВзаимодействияСERPСервер.уатОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Вычисляет текущий долг контрагента в валюте взаиморасчетов 
// по данному договору
//
// Параметры: 
//  Договор - ссылка на элемент справочника, определяет договор контрагента, по которому надо получить долг, 
//  Сделка  - ссылка на документ, определяет сделку (заказ, накладную, платежный документ) 
//                 по которому надо получить долг.
//  СсылкаДокумент           - ссылка на документ, для которого рассчитывается долг.
//
// Возвращаемое значение:
//  Число -  текущий размер долга, если удалось вычислить текущий долг, иначе - 0.
//
Функция ТекущийДолг(Контрагент, Организация, ВалютаВзаиморасчетов, Дата) Экспорт

	ТекущийДолг = 0;
	
	Если Метаданные.РегистрыНакопления.Найти("РасчетыСКлиентами") = Неопределено Тогда
		Возврат ТекущийДолг;
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСКлиентами) Тогда 
		Возврат ТекущийДолг;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РасчетыСКлиентамиОстатки.Валюта КАК ВалютаВзаиморасчетов,
	|	РасчетыСКлиентамиОстатки.СуммаОстаток КАК СуммаВзаиморасчетов
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(&Граница,
	|		АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				РегистрАналитикаУчетаПоПартнерам.КлючАналитики КАК АналитикаУчетаПоПартнерам
	|			ИЗ
	|				РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|			ГДЕ
	|				РегистрАналитикаУчетаПоПартнерам.Организация = &Организация
	|				И РегистрАналитикаУчетаПоПартнерам.Контрагент = &Контрагент
	|			)
	|		) КАК РасчетыСКлиентамиОстатки");
	
	МоментВремени = КонецДня(Дата);
	Граница = Новый Граница(МоментВремени, ВидГраницы.Включая);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Граница", Граница);
	
	СоответствиеВалютаКурс = Новый Соответствие;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(ВалютаВзаиморасчетов) И ВалютаВзаиморасчетов <> Выборка.ВалютаВзаиморасчетов Тогда
			Коэффициенты = СоответствиеВалютаКурс.Получить(Выборка.ВалютаВзаиморасчетов);
			Если Коэффициенты = Неопределено Тогда
				Коэффициенты = уатИнтерфейсВзаимодействияСERPСервер.уатПолучитьКоэффициентыПересчетаВалюты(ВалютаВзаиморасчетов, Выборка.ВалютаВзаиморасчетов, МоментВремени);
				СоответствиеВалютаКурс.Вставить(Выборка.ВалютаВзаиморасчетов, Коэффициенты);
			КонецЕсли;
			Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, Выборка.СуммаВзаиморасчетов / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
		Иначе
			Сумма = Выборка.СуммаВзаиморасчетов;
		КонецЕсли;
		
		ТекущийДолг = ТекущийДолг + Сумма;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТекущийДолг;

КонецФункции // ТекущийДолг()

// Возвращает бригаду по переданному сотруднику. Поиск ведется по данным документов
// "ФормированиеСоставаБригады"
//
Функция ПолучитьБригадуСотрудника(Сотрудник, Дата) Экспорт
	Если Метаданные.Документы.Найти("ФормированиеСоставаБригады") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
    УстановитьПривилегированныйРежим(Истина);	
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФормированиеСоставаБригады.Бригада
	|ИЗ
	|	Документ.ФормированиеСоставаБригады КАК ФормированиеСоставаБригады
	|ГДЕ
	|	ФормированиеСоставаБригады.Сотрудники.Сотрудник = &Сотрудник
	|	И ФормированиеСоставаБригады.НачалоПериода <= &Дата
	|	И НЕ ФормированиеСоставаБригады.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФормированиеСоставаБригады.НачалоПериода УБЫВ");
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	ВыборкаБригады = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаБригады.Следующий() Тогда
		Возврат ВыборкаБригады.Бригада;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
    УстановитьПривилегированныйРежим(Ложь);	
	
КонецФункции

// Получает список серий по указанной номенклатуре
//
Функция ПолучитьСписокСерий(Номенклатура) Экспорт
	Если Метаданные.РегистрыНакопления.Найти("ДвиженияСерийТоваров") = Неопределено Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СерииНоменклатуры.Ссылка
		|ИЗ
		|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
		|ГДЕ
		|	НЕ СерииНоменклатуры.ПометкаУдаления");
		
		мсвРез = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ДвиженияСерийТоваров.Серия
		|ИЗ
		|	РегистрНакопления.ДвиженияСерийТоваров КАК ДвиженияСерийТоваров
		|ГДЕ
		|	ДвиженияСерийТоваров.Номенклатура = &Номенклатура");
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		
		//мсвРез = Новый СписокЗначений;
		//мсвРез.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Серия"));
		
		мсвРез = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Серия");
		
	КонецЕсли;
	
	Возврат мсвРез;
КонецФункции

#КонецОбласти
