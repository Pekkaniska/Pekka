////////////////////////////////////////////////////////////////////////////////
// Процедуры подсистемы учета ОС и НМА.
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует параметры для подбора элементов на основании параметров указанных для элемента формы.
// Используется для подбора в формах выбора с такими же параметрами выбора, как и при выборе.
//
// Параметры:
//  ЭлементФормы - ЭлементФормы - Элемент формы в котором указаны параметры подбора.
//  Форма		 - УправляемаяФорма - Форма на которой расположен элемент. Используется для получения параметров.
// 
// Возвращаемое значение:
//  Структура - параметры подбора.
//
Функция ПараметрыПодбора(ЭлементФормы, Форма) Экспорт

	ВложенныеПараметры = Новый Соответствие;
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыПодбора.Вставить("МножественныйВыбор", Истина);
	
	Для каждого ЭлементКоллекции Из ЭлементФормы.ПараметрыВыбора Цикл
		ИмяПараметра = СтрРазделить(ЭлементКоллекции.Имя, ".");
		Если ИмяПараметра.Количество() > 1 Тогда
			ВложенныйПараметр = ВложенныеПараметры.Получить(ИмяПараметра[0]);
			Если ВложенныйПараметр = Неопределено Тогда
				ВложенныйПараметр = Новый Структура;
			КонецЕсли; 
			ВложенныйПараметр.Вставить(ИмяПараметра[1], ЭлементКоллекции.Значение);
			ВложенныеПараметры.Вставить(ИмяПараметра[0], ВложенныйПараметр);
		Иначе
			ПараметрыПодбора.Вставить(ИмяПараметра[0], ЭлементКоллекции.Значение);
		КонецЕсли; 
	КонецЦикла; 
	
	Для каждого ЭлементКоллекции Из ЭлементФормы.СвязиПараметровВыбора Цикл
		ЗначениеПараметра = СтрРазделить(ЭлементКоллекции.ПутьКДанным, ".");
		Если ЗначениеПараметра.Количество() > 1 Тогда
			ЗначениеПараметра = Форма[ЗначениеПараметра[0]][ЗначениеПараметра[1]];
		Иначе
			ЗначениеПараметра = Форма[ЗначениеПараметра[0]];
		КонецЕсли;		
		ИмяПараметра = СтрРазделить(ЭлементКоллекции.Имя, ".");
		Если ИмяПараметра.Количество() > 1 Тогда
			ВложенныйПараметр = ВложенныеПараметры.Получить(ИмяПараметра[0]);
			Если ВложенныйПараметр = Неопределено Тогда
				ВложенныйПараметр = Новый Структура;
			КонецЕсли; 
			ВложенныйПараметр.Вставить(ИмяПараметра[1], ЗначениеПараметра);
			ВложенныеПараметры.Вставить(ИмяПараметра[0], ВложенныйПараметр);
		Иначе
			ПараметрыПодбора.Вставить(ИмяПараметра[0], ЗначениеПараметра);
		КонецЕсли; 
	КонецЦикла; 
	
	Для каждого ВложенныйПараметр Из ВложенныеПараметры Цикл
		ПараметрыПодбора.Вставить(ВложенныйПараметр.Ключ, ВложенныйПараметр.Значение);
	КонецЦикла; 
	
	Возврат ПараметрыПодбора;

КонецФункции

// Выполняет проведение документов с помощью фонового задания.
//
// Параметры:
//  Список	 - ДинамическийСписок	 - Список документов.
//  ИмяФормы - Строка				 - Форма в которой реализовано фоновое проведение документов.
//
Процедура ПровестиДокументыВФономЗадании(Список, ИмяФормы) Экспорт

	ОчиститьСообщения();
	ВыделенныеСтроки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Список);
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылок = ОбщегоНазначенияУТВызовСервера.СсылкиДокументовДинамическогоСписка(ВыделенныеСтроки);
	
	ЕстьПомеченныеНаУдаление = Ложь;
	МожноПровести = ВнеоборотныеАктивыВызовСервера.ПроверитьВозможностьПроведения(МассивСсылок, ЕстьПомеченныеНаУдаление);
	Если ЕстьПомеченныеНаУдаление И МассивСсылок.Количество() = 1 Тогда
		ТекстСообщения = НСтр("ru = 'Помеченный на удаление документ не может быть проведен'");
		ПоказатьПредупреждение(,ТекстСообщения);
	ИначеЕсли МожноПровести Тогда
		ПараметрыФормы = Новый Структура("СписокДокументов", МассивСсылок);
		ОткрытьФорму(ИмяФормы, ПараметрыФормы);
	КонецЕсли; 
	
КонецПроцедуры

//++ НЕ УТКА

// Открывает форму проводок международного учета.
//
// Параметры:
//  Ссылка	 - ДокументСсылка - Документ международного учета.
//
Процедура ПроводкиМеждународногоУчета(Ссылка) Экспорт

	ПараметрыОтбора = Новый Структура("Регистратор", Ссылка);
	ПараметрыФормы = Новый Структура("Отбор", ПараметрыОтбора);
	ОткрытьФорму("РегистрБухгалтерии.Международный.Форма.ПроводкиМеждународногоУчета", ПараметрыФормы,, Ссылка);

КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПриИзмененииПорядкаУчетаБУ_ОС(Объект, ПрименяетсяУСНДоходыМинусРасходы = Ложь) Экспорт

	ИзмененныеРеквизиты = "ПорядокУчетаБУ";
	
	Если Объект.ПорядокУчетаБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации") Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.МетодНачисленияАмортизацииБУ) Тогда
			Объект.МетодНачисленияАмортизацииБУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.Линейный");
			ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",МетодНачисленияАмортизацииБУ";
		КонецЕсли; 
		
		Объект.ПорядокУчетаНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации");
		ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",ПорядокУчетаНУ";
		
	ИначеЕсли Объект.ПорядокУчетаБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается") Тогда
		
		Объект.ПорядокУчетаНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы");
		ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",ПорядокУчетаНУ";
		
	ИначеЕсли Объект.ПорядокУчетаБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.АмортизацияНачислена") Тогда
		
		Если ПрименяетсяУСНДоходыМинусРасходы Тогда
			Объект.ПорядокУчетаНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключитьВСоставАмортизируемогоИмущества");
		Иначе
			Объект.ПорядокУчетаНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.АмортизацияНачислена");
		КонецЕсли; 
		ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",ПорядокУчетаНУ";
		
	ИначеЕсли Объект.ПорядокУчетаБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ") Тогда
		
		Объект.ПорядокУчетаНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы");
		Объект.ПрименениеЦелевогоФинансирования = Ложь;
		ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",ПорядокУчетаНУ,ПрименениеЦелевогоФинансирования";
		
	ИначеЕсли Объект.ПорядокУчетаБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислитьАмортизациюПриПринятииКУчету") Тогда
		
		Если Объект.ПорядокУчетаНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.АмортизацияНачислена") Тогда
			Объект.ПорядокУчетаНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации");
			ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",ПорядокУчетаНУ";
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если Объект.ПорядокУчетаБУ <> ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.АмортизацияНачислена") 
		И Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.АмортизацияНачислена") Тогда
			
		Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию");
		ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",ПорядокУчетаУУ";
	КонецЕсли;
	
	Возврат ИзмененныеРеквизиты;
	
КонецФункции

Функция ПриИзмененииПорядкаУчетаУУ_ОС(Объект, ПрименяетсяУСНДоходыМинусРасходы = Ложь) Экспорт

	ИзмененныеРеквизиты = "ПорядокУчетаУУ";
	
	Если Объект.ПорядокУчетаУУ <> ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.АмортизацияНачислена") 
		И Объект.ПорядокУчетаБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.АмортизацияНачислена") Тогда
			
		Объект.ПорядокУчетаБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации");
		ИзмененныеРеквизиты = ПриИзмененииПорядкаУчетаБУ_ОС(Объект, ПрименяетсяУСНДоходыМинусРасходы) + "," + ИзмененныеРеквизиты;
		
	ИначеЕсли Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.АмортизацияНачислена") 
		И Объект.ПорядокУчетаБУ <> ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.АмортизацияНачислена") Тогда
			
		Объект.ПорядокУчетаБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.АмортизацияНачислена");
		ИзмененныеРеквизиты = ПриИзмененииПорядкаУчетаБУ_ОС(Объект, ПрименяетсяУСНДоходыМинусРасходы) + "," + ИзмененныеРеквизиты;
		
	КонецЕсли;
	
	Возврат ИзмененныеРеквизиты;
	
КонецФункции

Процедура ОповеститьОРасчетеАмортизации(ВыполненоСОшибками, Период = Неопределено) Экспорт
	
	Если ВыполненоСОшибками = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыполненоСОшибками Тогда
		ТекстПояснения = НСтр("ru = 'При расчете возникли ошибки'");
		КартинкаОповещения = БиблиотекаКартинок.АмортизацияСОшибкой;
	Иначе
		ТекстПояснения = НСтр("ru = 'Амортизация рассчитана'");
		КартинкаОповещения = БиблиотекаКартинок.АмортизацияРассчитана;
	КонецЕсли; 
	
	ПоказатьОповещениеПользователя(,, ТекстПояснения, КартинкаОповещения);
	
КонецПроцедуры
 
#КонецОбласти
