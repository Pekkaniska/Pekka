
#Область ПрограммныйИнтерфейс

// Контроль лимитов при проведении заявки на расходование ДС
// 
// Параметры:
//	ЗаявкаОбъект - ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств - проверяемый документ
//	Отказ - Булево - признак отказа в проведении документа.
//
Процедура ВыполнитьКонтрольРезультатовПроведения(ЗаявкаОбъект, Отказ) Экспорт
	Перем Ошибки;
	
	СверхЛимита              = ЗаявкаОбъект.СверхЛимита;
	КонтролироватьПревышение = ПолучитьФункциональнуюОпцию("КонтролироватьПревышениеЛимитовРасходаДенежныхСредств");
	
	Если СверхЛимита Или Не КонтролироватьПревышение Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаЗаявку         = ЗаявкаОбъект.Ссылка;
	ДополнительныеСвойства = ЗаявкаОбъект.ДополнительныеСвойства;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СообщенияПользователю = Новый Массив;
	
	Если ЗаявкаОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена Тогда
		Возврат;
	КонецЕсли;
	
	НарушеныТолькоИнформационныеЛимиты = Ложь;
	ИспользоватьБюджетирование = Ложь;
	//++НЕ УТ
	ИспользоватьБюджетирование = ПолучитьФункциональнуюОпцию("ИспользоватьБюджетирование");
	
	Если ИспользоватьБюджетирование Тогда
		ЗаявкаПроходитПоЛимитамБюджетирования(ЗаявкаОбъект, Ошибки, НарушеныТолькоИнформационныеЛимиты);
						
	Иначе
	//--НЕ УТ
	
		ЗаявкаПроходитПоОперативнымЛимитам(СсылкаНаЗаявку, Ошибки, ДополнительныеСвойства);
		
	//++НЕ УТ
	КонецЕсли;
	//--НЕ УТ
	
	Если КонтролироватьПревышение И Не СверхЛимита Тогда
		Если ИспользоватьБюджетирование И НарушеныТолькоИнформационныеЛимиты Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

//++НЕ УТ

// Вызывается из Отчет.ЛимитыРасходаДенежныхСредствПоДаннымБюджетирования.МодульОбъекта
// Плановое и фактическое состояние по лимитам на расходование ДС.
// 
// Параметры:
//	ДатаПроверки - Дата - дата, на которую проверяется состояние лимитов.
//	Документ (опционально) - ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств - документ, для которого формируются временные движения по регистрам ДС.
//	ВалютаЗаявки (опционально) - СправочникСсылка.Валюты - валюта, в которой нужно получить план-факт.
//
// Возвращаемое значение:
//	ТаблицаЗначений - данные о плановом и фактическом состоянии лимитов на расходование ДС.
// 
Функция ПланФактЛимитов(ДатаПроверки, Знач Документ = Неопределено, Знач ВалютаЗаявки = Неопределено, Знач ПланПриОтсутствииФакта = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РазрешающийЛимитНайден = Ложь;
	ПродолжитьРасчет = Истина;
	
	КоличествоФормальноДействующихЛимитов = 0;
	КоличествоСработавшихЛимитов = 0;
	
	#Область ПараметрыЗаявки
	
	РеквизитыЗаявки = Новый Структура;
	РеквизитыЗаявки.Вставить("ДатаПроверки", ДатаПроверки);
	РеквизитыЗаявки.Вставить("СсылкаНаЗаявку", Документ);
	РеквизитыЗаявки.Вставить("ВалютаЗаявки", ВалютаЗаявки);
	
	ВозможенКонтрольПоДокументу = Не Документ = Неопределено И Документ.Проведен;
	
	#КонецОбласти 
	
	#Область Этап1_ОпределениеРегистровСДвижениями
	
	Если ВозможенКонтрольПоДокументу Тогда
		ЗаявкаОбъект = Документ.ПолучитьОбъект();
		СсылкаНаЗаявку = ЗаявкаОбъект.Ссылка;
		ВалютаЗаявки = ЗаявкаОбъект.Валюта;
		
		ИменаРегистровНепустыхНаборов = ИменаРегистровНепустыхНаборов(ЗаявкаОбъект.Движения, Истина);
		
		// Уточним регистры, в которых есть движения
		ИсточникиСДвижениями = Новый Массив;
		Для Каждого ИмяРегистра Из ИменаРегистровНепустыхНаборов Цикл 
			Если ЕстьДвиженияПоРегистру(СсылкаНаЗаявку, ИмяРегистра) Тогда
				ИсточникиСДвижениями.Добавить(ИмяРегистра);
			КонецЕсли;
		КонецЦикла;
		
		Если ИменаРегистровНепустыхНаборов.Количество() = 0 Тогда
			ПродолжитьРасчет = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти 
	
	#Область Этап2_ОпределениеФормальноДействующихЛимитов
	
	Если ПродолжитьРасчет Тогда
		ДействующиеЛимиты = ДействующиеЛимиты(РеквизитыЗаявки.ДатаПроверки);
		ДействующиеЛимиты.СсылкаНаЗаявку = РеквизитыЗаявки.СсылкаНаЗаявку; 
		ДействующиеЛимиты.ОтборИсточниковПоИменамРегистров = ИменаРегистровНепустыхНаборов;
		
		Если ДействующиеЛимиты.ЛимитыДействующиеНаДату.Количество() = 0 Тогда
			ПродолжитьРасчет = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти 
	
	#Область Этап3_ОпределениеПотенциальноПодходящихЛимитов
	
	Если ПродолжитьРасчет Тогда
		УточнитьСоставЛимитовПоИменамРегистров(ДействующиеЛимиты);
		
		КоличествоФормальноДействующихЛимитов = ДействующиеЛимиты.ЛимитыДействующиеНаДату.Количество();
		Если КоличествоФормальноДействующихЛимитов = 0 Тогда
			ПродолжитьРасчет = Ложь;
		КонецЕсли;
	КонецЕсли;
		
	#КонецОбласти 
	
	#Область Этап4_ОпределениеЛимитовСработавшихПоДокументу
	Если ПродолжитьРасчет Тогда
		Если ВозможенКонтрольПоДокументу Тогда
			ПараметрыПолученияФактаДляКонтроляЛимитов = ПараметрыПолученияФактаДляКонтроляЛимитов(РеквизитыЗаявки, ДействующиеЛимиты, Истина);
			
			ФактПоЗаявке = БюджетированиеСервер.ФактПоВидуБюджета(
				ПараметрыПолученияФактаДляКонтроляЛимитов.ПараметрыПолученияФакта,
				ПараметрыПолученияФактаДляКонтроляЛимитов.ИсточникиДанных,
				РеквизитыЗаявки.ВалютаЗаявки,
				Перечисления.РежимПолученияДанныхБюджетирования.Все);
			
			Если ФактПоЗаявке.Количество() = 0 Тогда
				ПродолжитьРасчет = Ложь;
			КонецЕсли;
			
			Если ПродолжитьРасчет Тогда
				СработавшиеЛимиты = ДействующиеЛимиты(РеквизитыЗаявки.ДатаПроверки, ФактПоЗаявке.ВыгрузитьКолонку("СтатьяБюджетов"));
				СработавшиеЛимиты.СсылкаНаЗаявку = РеквизитыЗаявки.СсылкаНаЗаявку; 
				
				КоличествоСработавшихЛимитов = СработавшиеЛимиты.ЛимитыДействующиеНаДату.Количество();
				Если КоличествоСработавшихЛимитов = 0 Тогда
					ПродолжитьРасчет = Ложь;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СработавшиеЛимиты = ДействующиеЛимиты;
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти 
	
	#Область Этап5_ПолучениеФактПоСработавшимЛимитам
	Если ПродолжитьРасчет Тогда
		ПараметрыПолученияФактаДляКонтроляЛимитов = ПараметрыПолученияФактаДляКонтроляЛимитов(РеквизитыЗаявки, СработавшиеЛимиты, Ложь);
		
		ФактПоЗаявке = БюджетированиеСервер.ФактПоВидуБюджета(
			ПараметрыПолученияФактаДляКонтроляЛимитов.ПараметрыПолученияФакта,
			ПараметрыПолученияФактаДляКонтроляЛимитов.ИсточникиДанных,
			РеквизитыЗаявки.ВалютаЗаявки,
			Перечисления.РежимПолученияДанныхБюджетирования.Все);
	КонецЕсли;
	#КонецОбласти 
	
	#Область Этап6_ПланФактныйАнализСработавшихЛимитов
	
	ПланФактПоПравилам = Новый ТаблицаЗначений;
	Если ПродолжитьРасчет Тогда
		ФактПоЗаявке.Колонки.СуммаВалПриход.Имя = "СуммаФакт";
		
		НоваяКолонка = ФактПоЗаявке.Колонки.Добавить("ДополняющиеДанные");
		ФактПоЗаявке.ЗаполнитьЗначения(Ложь, НоваяКолонка.Имя);
		
		Если ПланПриОтсутствииФакта И КоличествоФормальноДействующихЛимитов <> КоличествоСработавшихЛимитов Тогда
			НеСработавшиеЛимиты = ДействующиеЛимиты(
				РеквизитыЗаявки.ДатаПроверки, 
				ФактПоЗаявке.ВыгрузитьКолонку("СтатьяБюджетов"),
				Истина);
			
			ЗначенияПоУмолчанию = Новый Структура("ДополняющиеДанные", Истина); 
			ОбщегоНазначенияУТКлиентСервер.ДополнитьТаблицу(
				НеСработавшиеЛимиты.ЛимитыДействующиеНаДату,
				ФактПоЗаявке,
				ЗначенияПоУмолчанию, Истина);
		КонецЕсли;
		
		// Сбор запроса для план-факт анализа
	 	ПланФактПоПравилам = ПланФактПоПравиламЛимитов(ПараметрыПолученияФактаДляКонтроляЛимитов, ФактПоЗаявке, СработавшиеЛимиты);
		
	КонецЕсли;
	
	#КонецОбласти 
	
	Возврат ПланФактПоПравилам;
	
КонецФункции

//--НЕ УТ

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КонтрольОперативныхЛимитов

Процедура СообщитьОбОшибкахПроведенияПоРегиструЛимитыРасходаДенежныхСредств(Ошибки, РезультатЗапроса)
	
	ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Превышен лимит расхода по статье %1 на сумму %2 %3'"),
				Строка(Выборка.СтатьяДвиженияДенежныхСредств),
				Строка(Выборка.ПревышениеЛимита),
				Строка(ВалютаУправленческогоУчета));
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "", ТекстСообщения, "");
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаявкаПроходитПоОперативнымЛимитам(СсылкаНаЗаявку, Ошибки, ДополнительныеСвойства)
	Перем ЕстьИзменения;
	
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	ЕстьИзменения = СтруктураВременныеТаблицы.Свойство("ДвиженияЛимитыРасходаДенежныхСредствИзменение", ЕстьИзменения) И ЕстьИзменения;
	Если Не ЕстьИзменения Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЛимитыРасхода.Ссылка.МоментВремени КАК МоментВремени,
	|	ЛимитыРасхода.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ЛимитыРасхода.ЕстьЛимит КАК ЕстьЛимит
	|ПОМЕСТИТЬ ВременнаяТаблицаСтатьиДДС
	|ИЗ
	|	Документ.ЛимитыРасходаДенежныхСредств.Лимиты КАК ЛимитыРасхода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДвиженияЛимитыРасходаДенежныхСредствИзменение КАК Таблица
	|		ПО (ЛимитыРасхода.Ссылка.Организация = Таблица.Организация
	|				ИЛИ НЕ &ЛимитыПоОрганизациям)
	|			И (ЛимитыРасхода.Ссылка.Подразделение = Таблица.Подразделение
	|				ИЛИ НЕ &ЛимитыПоПодразделениям)
	|			И ЛимитыРасхода.СтатьяДвиженияДенежныхСредств = Таблица.СтатьяДвиженияДенежныхСредств
	|ГДЕ
	|	&КонтролироватьПревышениеЛимитовРасходаДенежныхСредств
	|	И НЕ Таблица.СтатьяДвиженияДенежныхСредств ЕСТЬ NULL
	|	И ЛимитыРасхода.Ссылка.Период МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	|	И ЛимитыРасхода.Ссылка.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаСтатьиДДС.СтатьяДвиженияДенежныхСредств
	|ПОМЕСТИТЬ ВременнаяТаблицаСтатьиДДСЛимитНеОграничен
	|ИЗ
	|	ВременнаяТаблицаСтатьиДДС КАК ВременнаяТаблицаСтатьиДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСтатьиДДС КАК Отбор
	|		ПО ВременнаяТаблицаСтатьиДДС.СтатьяДвиженияДенежныхСредств = Отбор.СтатьяДвиженияДенежныхСредств
	|			И ВременнаяТаблицаСтатьиДДС.МоментВремени < Отбор.МоментВремени
	|ГДЕ
	|	Отбор.МоментВремени ЕСТЬ NULL
	|	И НЕ ВременнаяТаблицаСтатьиДДС.ЕстьЛимит
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.СтатьяДвиженияДенежныхСредств,
	|	Таблица.Организация,
	|	Таблица.Подразделение
	|ПОМЕСТИТЬ ИзмененияЛимитов
	|ИЗ
	|	ДвиженияЛимитыРасходаДенежныхСредствИзменение КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСтатьиДДСЛимитНеОграничен КАК СтатьиДДСЛимитНеОграничен
	|		ПО Таблица.СтатьяДвиженияДенежныхСредств = СтатьиДДСЛимитНеОграничен.СтатьяДвиженияДенежныхСредств
	|ГДЕ
	|	СтатьиДДСЛимитНеОграничен.СтатьяДвиженияДенежныхСредств ЕСТЬ NULL
	|	И Таблица.СтатьяДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаОборотов.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ТаблицаОборотов.Организация КАК Организация,
	|	ТаблицаОборотов.Подразделение КАК Подразделение,
	|	ТаблицаОборотов.РасходВПределахЛимитаОборот - ТаблицаОборотов.ЛимитОборот КАК ПревышениеЛимита
	|ИЗ
	|	РегистрНакопления.ЛимитыРасходаДенежныхСредств.Обороты(
	|			НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ),
	|			КОНЕЦПЕРИОДА(&Период, МЕСЯЦ),
	|			,
	|			(СтатьяДвиженияДенежныхСредств, Организация, Подразделение) В
	|				(ВЫБРАТЬ
	|					ИзмененияЛимитов.СтатьяДвиженияДенежныхСредств,
	|					ИзмененияЛимитов.Организация,
	|					ИзмененияЛимитов.Подразделение
	|				ИЗ
	|					ИзмененияЛимитов)) КАК ТаблицаОборотов
	|ГДЕ
	|	&КонтролироватьПревышениеЛимитовРасходаДенежныхСредств
	|	И ТаблицаОборотов.РасходВПределахЛимитаОборот - ТаблицаОборотов.ЛимитОборот > 0";
	
	
	РеквизитыЗаявки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЗаявку, "ДатаПлатежа, ЖелательнаяДатаПлатежа, Дата");
	Если ЗначениеЗаполнено(РеквизитыЗаявки.ДатаПлатежа) Тогда
		Период = РеквизитыЗаявки.ДатаПлатежа;
	ИначеЕсли ЗначениеЗаполнено(РеквизитыЗаявки.ЖелательнаяДатаПлатежа) Тогда
		Период = РеквизитыЗаявки.ЖелательнаяДатаПлатежа;
	Иначе
		Период = РеквизитыЗаявки.Дата;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ЛимитыПоОрганизациям",
		ПолучитьФункциональнуюОпцию("ИспользоватьЛимитыРасходаДенежныхСредствПоОрганизациям"));
	Запрос.УстановитьПараметр("ЛимитыПоПодразделениям",
		ПолучитьФункциональнуюОпцию("ИспользоватьЛимитыРасходаДенежныхСредствПоПодразделениям"));
	Запрос.УстановитьПараметр("КонтролироватьПревышениеЛимитовРасходаДенежныхСредств",
		ПолучитьФункциональнуюОпцию("КонтролироватьПревышениеЛимитовРасходаДенежныхСредств"));
	
	СообщитьОбОшибкахПроведенияПоРегиструЛимитыРасходаДенежныхСредств(Ошибки, Запрос.Выполнить());
	
КонецПроцедуры

#КонецОбласти

//++НЕ УТ

#Область КонтрольЛимитовПоДаннымБюджетирования

Процедура ЗаявкаПроходитПоЛимитамБюджетирования(ЗаявкаОбъект, Ошибки, НарушеныТолькоИнформационныеЛимиты)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РазрешающийЛимитНайден = Ложь;
	ПродолжитьРасчет = Истина;
	
	#Область ПараметрыЗаявки
	
	РеквизитыЗаявки = Новый Структура;
	РеквизитыЗаявки.Вставить("ДатаПроверки", ЗаявкаОбъект.ЖелательнаяДатаПлатежа);
	РеквизитыЗаявки.Вставить("СсылкаНаЗаявку", ЗаявкаОбъект.Ссылка);
	РеквизитыЗаявки.Вставить("ВалютаЗаявки", ЗаявкаОбъект.Валюта);
	
	#КонецОбласти 
	
	#Область Этап1_ОпределениеРегистровСДвижениями
	
	ИменаРегистровНепустыхНаборов = ИменаРегистровНепустыхНаборов(ЗаявкаОбъект.Движения);
	Если ИменаРегистровНепустыхНаборов.Количество() = 0 Тогда
		ПродолжитьРасчет = Ложь;
	КонецЕсли;
	
	#КонецОбласти 
	
	#Область Этап2_ОпределениеФормальноДействующихЛимитов
	
	Если ПродолжитьРасчет Тогда
		ДействующиеЛимиты = ДействующиеЛимиты(РеквизитыЗаявки.ДатаПроверки);
		ДействующиеЛимиты.СсылкаНаЗаявку = РеквизитыЗаявки.СсылкаНаЗаявку; 
		ДействующиеЛимиты.ОтборИсточниковПоИменамРегистров = ИменаРегистровНепустыхНаборов;
		
		Если ДействующиеЛимиты.ЛимитыДействующиеНаДату.Количество() = 0 Тогда
			ПродолжитьРасчет = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти 
	
	#Область Этап3_ОпределениеПотенциальноПодходящихЛимитов
	
	Если ПродолжитьРасчет Тогда
		УточнитьСоставЛимитовПоИменамРегистров(ДействующиеЛимиты);
		
		Если ДействующиеЛимиты.ЛимитыДействующиеНаДату.Количество() = 0 Тогда
			ПродолжитьРасчет = Ложь;
		КонецЕсли;
	КонецЕсли;
		
	#КонецОбласти 
	
	#Область Этап4_ОпределениеЛимитовСработавшихПоДокументу
	Если ПродолжитьРасчет Тогда
		ПараметрыПолученияФактаДляКонтроляЛимитов = ПараметрыПолученияФактаДляКонтроляЛимитов(РеквизитыЗаявки, ДействующиеЛимиты, Истина);
		
		ФактПоЗаявке = БюджетированиеСервер.ФактПоВидуБюджета(
			ПараметрыПолученияФактаДляКонтроляЛимитов.ПараметрыПолученияФакта,
			ПараметрыПолученияФактаДляКонтроляЛимитов.ИсточникиДанных,
			РеквизитыЗаявки.ВалютаЗаявки,
			Перечисления.РежимПолученияДанныхБюджетирования.Все);
		
		Если ФактПоЗаявке.Количество() = 0 Тогда
			ПродолжитьРасчет = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПродолжитьРасчет Тогда
		СработавшиеЛимиты = ДействующиеЛимиты(РеквизитыЗаявки.ДатаПроверки, ФактПоЗаявке.ВыгрузитьКолонку("СтатьяБюджетов"));
		СработавшиеЛимиты.СсылкаНаЗаявку = РеквизитыЗаявки.СсылкаНаЗаявку; 
		
		Если СработавшиеЛимиты.ЛимитыДействующиеНаДату.Количество() = 0 Тогда
			ПродолжитьРасчет = Ложь;
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти 
	
	#Область Этап5_ПолучениеФактПоСработавшимЛимитам
	Если ПродолжитьРасчет Тогда
		ПараметрыПолученияФактаДляКонтроляЛимитов = ПараметрыПолученияФактаДляКонтроляЛимитов(РеквизитыЗаявки, СработавшиеЛимиты, Ложь);
		
		ФактПоЗаявке = БюджетированиеСервер.ФактПоВидуБюджета(
			ПараметрыПолученияФактаДляКонтроляЛимитов.ПараметрыПолученияФакта,
			ПараметрыПолученияФактаДляКонтроляЛимитов.ИсточникиДанных,
			РеквизитыЗаявки.ВалютаЗаявки,
			Перечисления.РежимПолученияДанныхБюджетирования.Все);
		
		ФактПоЗаявке.Колонки.СуммаВалПриход.Имя = "СуммаФакт";
		
		Если ФактПоЗаявке.Количество() = 0 Тогда
			ПродолжитьРасчет = Ложь;
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти 
	
	#Область Этап6_ПланФактныйАнализСработавшихЛимитов
	ПланФактПоПравилам = Новый ТаблицаЗначений;
	Если ПродолжитьРасчет Тогда
		
		НоваяКолонка = ФактПоЗаявке.Колонки.Добавить("ДополняющиеДанные");
		ФактПоЗаявке.ЗаполнитьЗначения(Ложь, НоваяКолонка.Имя);
		
		// Сбор запроса для план-факт анализа
	 	ПланФактПоПравилам = ПланФактПоПравиламЛимитов(ПараметрыПолученияФактаДляКонтроляЛимитов, ФактПоЗаявке, СработавшиеЛимиты);
		
		НарушеныТолькоИнформационныеЛимиты = Истина;
		
		// План-факт анализ
		Для Каждого СтрокаПланФакта Из ПланФактПоПравилам Цикл
			Если СтрокаПланФакта.СуммаПревышения = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстСообщения = ТекстСообщенияПроверкиПревышенияЛимитовПоДаннымБюджетирования(
				ПланФактПоПравилам.Колонки, 
				СтрокаПланФакта, 
				РеквизитыЗаявки.ДатаПроверки);
				
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "", ТекстСообщения, "");
			
			Если СтрокаПланФакта.ТипЛимита <> Перечисления.ТипыЛимитовРасходованияДС.Информационный Тогда
				НарушеныТолькоИнформационныеЛимиты = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	#КонецОбласти 
	
	Если ПродолжитьРасчет 
		И Не ПланФактПоПравилам.Найти(Перечисления.ТипыЛимитовРасходованияДС.РазрешающийВПределахЛимита, "ТипЛимита") = Неопределено Тогда
		РазрешающийЛимитНайден = Истина;
	КонецЕсли;
	
	// Анализ, что заявка попала в один из "разрешающих лимитов"
	Если Не РазрешающийЛимитНайден Тогда
		НарушеныТолькоИнформационныеЛимиты = Ложь;
		ТекстСообщения = НСтр("ru = 'Заявка не попадает ни в одно ""Разрешающее"" правило лимитирования. 
									|Заявка может быть только сверх-лимитной.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "",ТекстСообщения, "");
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстСообщенияПроверкиПревышенияЛимитовПоДаннымБюджетирования(КолонкиТаблицыПланФакта, СтрокаПланФакта, ДатаПроверки)
	
	ПрименяемоеПравилоЛимита = СтрокаПланФакта.Правило;
	
	ПравоИспользованияОтчета = ПравоДоступа("Использование", Метаданные.Отчеты.ЛимитыРасходаДенежныхСредствПоДаннымБюджетирования);
	
	ПредставлениеАналитикЛимита = ПредставлениеЛимита(КолонкиТаблицыПланФакта, СтрокаПланФакта);
	
	ПериодПравила = ФинансоваяОтчетностьСервер.ПредставлениеИнтервала(ДатаПроверки, ПрименяемоеПравилоЛимита.Периодичность);
		
	ЧастиПредставленияЛимита = Новый Массив;
	ЧастиПредставленияЛимита.Добавить(ПрименяемоеПравилоЛимита.Наименование);
	Если ЗначениеЗаполнено(ПредставлениеАналитикЛимита) Тогда
		ЧастиПредставленияЛимита.Добавить(НСтр("ru= 'по'") );
		ЧастиПредставленияЛимита.Добавить(ПредставлениеАналитикЛимита);
	КонецЕсли;
	
	Если ПравоИспользованияОтчета Тогда
		ТекстСообщения = НСтр("ru = 'Общее превышение на %1 %3 лимита ""%4"".'")
			+ Символы.ПС
			+ НСтр("ru = 'Всего лимит в периоде %5 - %2 %3.'");
	Иначе
		ТекстСообщения = НСтр("ru = 'Общее превышение лимита ""%4"" за период %5.'");
	КонецЕсли;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
		СтрокаПланФакта.СуммаПревышения,
		СтрокаПланФакта.СуммаПланПоУсловиямКонтроля,
		СтрокаПланФакта.Валюта,
		СтрСоединить(ЧастиПредставленияЛимита, Символы.НПП),
		ПериодПравила);
		
	Возврат ТекстСообщения;

КонецФункции

Функция ЕстьДвиженияПоРегистру(Регистратор, ИмяРегистра)
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Регистр.Регистратор
		|ИЗ
		|	&ТекстЗапросаИмяТаблицы КАК Регистр
		|ГДЕ
		|	Регистр.Регистратор = &Регистратор
		|	И Регистр.Активность");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаИмяТаблицы", ИмяРегистра);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
КонецФункции

Функция ИменаРегистровНепустыхНаборов(Знач ДвиженияДокумента, ПроверятьТолькоНаличиеВКоллекции = Ложь)
	
	Перем ОтборИсточниковПоИменамРегистров, МетаданныеРегистра, НаборЗаписейДокумента;
	
	ОтборИсточниковПоИменамРегистров = Новый Массив;
	Для Каждого НаборЗаписейДокумента Из ДвиженияДокумента Цикл
		Если НаборЗаписейДокумента.Количество() > 0 
			Или ПроверятьТолькоНаличиеВКоллекции Тогда
			
			МетаданныеРегистра = НаборЗаписейДокумента.Метаданные();
			ИмяРегистра = МетаданныеРегистра.Имя;
			
			Если ОбщегоНазначения.ЭтоРегистрНакопления(МетаданныеРегистра) Тогда
				ОтборИсточниковПоИменамРегистров.Добавить("РегистрНакопления." + ИмяРегистра);
			ИначеЕсли ОбщегоНазначения.ЭтоРегистрБухгалтерии(МетаданныеРегистра) Тогда
				ОтборИсточниковПоИменамРегистров.Добавить("РегистрБухгалтерии." + ИмяРегистра);
			ИначеЕсли ОбщегоНазначения.ЭтоРегистрРасчета(МетаданныеРегистра) Тогда
				ОтборИсточниковПоИменамРегистров.Добавить("РегистрРасчета." + ИмяРегистра);
			ИначеЕсли ОбщегоНазначения.ЭтоРегистрСведений(МетаданныеРегистра) Тогда
				ОтборИсточниковПоИменамРегистров.Добавить("РегистрСведений." + ИмяРегистра);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОтборИсточниковПоИменамРегистров;

КонецФункции

Функция ПредставлениеЛимита(ПоляТаблицы, НайденнаяСтрока)
	
	ЧастиПредставлениеЛимита = Новый Массив;
	
	// По измерениям
	ПоддерживаемыеИзмерения = Новый Массив;
	ПоддерживаемыеИзмерения.Добавить("Организация");
	ПоддерживаемыеИзмерения.Добавить("Подразделение");
	Для Каждого ПоддерживаемоеИзмерение Из ПоддерживаемыеИзмерения Цикл 
		Если ПоляТаблицы.Найти(ПоддерживаемоеИзмерение) <> Неопределено Тогда 
			ЗначениеИзмерения = НайденнаяСтрока[ПоддерживаемоеИзмерение];
			
			Если ЗначениеЗаполнено(ЗначениеИзмерения) Тогда
				ЧастиПредставлениеЛимита.Добавить(Строка(ЗначениеИзмерения));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// По аналитикам
	Для НомерАналитики = 1 По 6 Цикл 
		ИмяПоляНумерованнойАналитики = "Аналитика" + НомерАналитики;
		Если ПоляТаблицы.Найти(ИмяПоляНумерованнойАналитики) <> Неопределено Тогда 
			ЗначениеНумерованнойАналитики = НайденнаяСтрока[ИмяПоляНумерованнойАналитики];
			
			Если ЗначениеЗаполнено(ЗначениеНумерованнойАналитики) Тогда
				ЧастиПредставлениеЛимита.Добавить(Строка(ЗначениеНумерованнойАналитики));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрСоединить(ЧастиПредставлениеЛимита, "// "); //! 
	
КонецФункции

Функция ПрименятьПравило(РеквизитыПравилаПолученияФакта, ОтборИсточниковПоИменамРегистров, КэшПримененияПравил)
	
	Если ОтборИсточниковПоИменамРегистров = Неопределено Тогда
		ПрименятьПравило = Истина;
	Иначе
		НайденнаяСтрока = КэшПримененияПравил.Найти(РеквизитыПравилаПолученияФакта.Правило, "Правило");
	
		Если НайденнаяСтрока = Неопределено Тогда
			ПрименятьПравило = ПрименятьПравилоСтатьи(РеквизитыПравилаПолученияФакта, ОтборИсточниковПоИменамРегистров);
			
			НоваяСтрокаТаблицыКэша = КэшПримененияПравил.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицыКэша, РеквизитыПравилаПолученияФакта);
			НоваяСтрокаТаблицыКэша.ПрименятьВЗаявках = ПрименятьПравило;
		Иначе
			ПрименятьПравило = НайденнаяСтрока.ПрименятьВЗаявках;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПрименятьПравило;
	
КонецФункции

Функция ПланФактПоПравиламЛимитов(ПараметрыПолученияФакта, ФактическиеДанные, ПравилаЛимитов)
	
	ПланФактПоПравиламЛимитов = Новый ТаблицаЗначений;
	
	ВалютаЗаявки = ПараметрыПолученияФакта.ПараметрыПолученияФакта.ВалютаСценария;
	ДатаПроверки = ПараметрыПолученияФакта.ПараметрыПолученияФакта.ДатаАктуальности;
	
	ПравилаЛимитовСДопДанными = ДанныеДополнительныхПолей(ПараметрыПолученияФакта, ПравилаЛимитов);
	Если Не ПараметрыПолученияФакта.ПараметрыПолученияФакта.ПоОрганизациям 
		И ФактическиеДанные.Колонки.Найти("Организация") = Неопределено Тогда
		ФактическиеДанные.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КонецЕсли;
	Если Не ПараметрыПолученияФакта.ПараметрыПолученияФакта.ПоПодразделениям 
		И ФактическиеДанные.Колонки.Найти("Подразделение") = Неопределено Тогда
		ФактическиеДанные.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	КонецЕсли;
		
	СхемаПланФакта      = Справочники.ПравилаЛимитовПоДаннымБюджетирования.ПолучитьМакет("ПланФактныйАнализЛимитов");
	КомпоновщикНастроек = БюджетированиеСервер.ИнициализированныйКомпоновщикПоУмолчанию(СхемаПланФакта);
	
	КолонкиПересчетаПлана = Новый Массив;
	КолонкиПересчетаПлана.Добавить("СуммаПлан");
	КолонкиПересчетаПлана.Добавить("СуммаПланПоКонтрольнойАналитике");
	КолонкиПересчетаПлана.Добавить("СуммаПланПоПрочейАналитике");
	
	ИспользоватьНесколькоВалют = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	
	Если ИспользоватьНесколькоВалют Тогда
		ПараметрыПересчетаПлана = БюджетированиеСервер.ШаблонПараметровПересчетаВВалюту();
		ПараметрыПересчетаПлана.ИмяНабораДанныхИсточника = "План";
		ПараметрыПересчетаПлана.ИсходнаяВалюта = "ВалютаПлан";
		ПараметрыПересчетаПлана.КолонкиПересчета = КолонкиПересчетаПлана;
		ПараметрыПересчетаПлана.ПериодКурса = ДатаПроверки;
		ПараметрыПересчетаПлана.ЦелеваяВалюта = ВалютаЗаявки;
		
		БюджетированиеСервер.ДобавитьПересчетДанныхВВалюту(СхемаПланФакта, КомпоновщикНастроек, ПараметрыПересчетаПлана);
		
		ПараметрыПересчетаФакта = БюджетированиеСервер.ШаблонПараметровПересчетаВВалюту();
		ПараметрыПересчетаФакта.ИмяНабораДанныхИсточника = "Факт";
		ПараметрыПересчетаФакта.ИсходнаяВалюта = "ВалютаФакт";
		ПараметрыПересчетаФакта.КолонкиПересчета = "СуммаФакт";
		ПараметрыПересчетаФакта.ПериодКурса = ДатаПроверки;
		ПараметрыПересчетаФакта.ЦелеваяВалюта = ВалютаЗаявки;
		
		БюджетированиеСервер.ДобавитьПересчетДанныхВВалюту(СхемаПланФакта, КомпоновщикНастроек, ПараметрыПересчетаФакта);
		
		ПолеРасчетнойВалюты = СхемаПланФакта.ВычисляемыеПоля.Найти("Валюта");
		// Набор для конвертации всегда один в данном случае
		ПолеРасчетнойВалюты.Выражение = СтрЗаменить(ПолеРасчетнойВалюты.Выражение, "ВалютаПлан", "&ЦелеваяВалютаПлан1");
		ПолеРасчетнойВалюты.Выражение = СтрЗаменить(ПолеРасчетнойВалюты.Выражение, "ВалютаФакт", "&ЦелеваяВалютаФакт1");
	КонецЕсли;

	ПоляФакта          = СхемаПланФакта.НаборыДанных.Факт.Поля;
	УдаляемыеПоляФакта = Новый Массив;
	КолонкиФакта       = ФактическиеДанные.Колонки;
	ПоляПлана          = СхемаПланФакта.НаборыДанных.План.Поля;
	УдаляемыеПоляПлана = Новый Массив;
	СвязиНаборов       = СхемаПланФакта.СвязиНаборовДанных;
	ВыраженияИсточникиКУдалению = Новый Массив;
	СвязиКУдалению     = Новый Массив;
	ВычисляемыеПоля          = СхемаПланФакта.ВычисляемыеПоля;
	ВычисляемыеПоляКУдалению = Новый Массив;
	
	Для Каждого ПолеФакта Из ПоляФакта Цикл
		ИмяКолонкиФакта = СтрЗаменить(ПолеФакта.ПутьКДанным, "Факт", "");
		
		Если ИмяКолонкиФакта = "Сумма" Тогда
			Продолжить;
		КонецЕсли;
		
		Если КолонкиФакта.Найти(ИмяКолонкиФакта) = Неопределено Тогда
			УдаляемыеПоляФакта.Добавить(ПолеФакта);
			
			ВыраженияИсточникиКУдалению.Добавить(ИмяКолонкиФакта);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдаляемоеПолеФакта Из УдаляемыеПоляФакта Цикл 
		ПоляФакта.Удалить(УдаляемоеПолеФакта);
	КонецЦикла;
	
	Для Каждого ПолеПлана Из ПоляПлана Цикл
		ИмяКолонкиПлана = СтрЗаменить(ПолеПлана.ПутьКДанным, "План", "");
		
		Если КолонкиФакта.Найти(ИмяКолонкиПлана) = Неопределено Тогда
			УдаляемыеПоляПлана.Добавить(ПолеПлана);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдаляемоеПолеПлана Из УдаляемыеПоляПлана Цикл 
		ПоляПлана.Удалить(УдаляемоеПолеПлана);
	КонецЦикла;
	
	Для Каждого СвязьНаборов Из СвязиНаборов Цикл 
		Если Не ВыраженияИсточникиКУдалению.Найти(СвязьНаборов.ВыражениеИсточник) = Неопределено Тогда
			СвязиКУдалению.Добавить(СвязьНаборов);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СвязьКУдалению Из СвязиКУдалению Цикл 
		СвязиНаборов.Удалить(СвязьКУдалению);
	КонецЦикла;
	
	Для Каждого ВычисляемоеПоле Из ВычисляемыеПоля Цикл 
		Если Не ВыраженияИсточникиКУдалению.Найти(ВычисляемоеПоле.ПутьКДанным) = Неопределено Тогда
			ВычисляемыеПоляКУдалению.Добавить(ВычисляемоеПоле);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ВычисляемоеПолеКУдалению Из ВычисляемыеПоляКУдалению Цикл 
		ВычисляемыеПоля.Удалить(ВычисляемоеПолеКУдалению);
	КонецЦикла;
	
	КомпоновкаДанныхКлиентСервер.ОтключитьВыводОбщихИтогов(КомпоновщикНастроек);
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ФактическиеДанные", ФактическиеДанные);
	ВнешниеНаборыДанных.Вставить("ПравилаЛимитовСДопДанными", ПравилаЛимитовСДопДанными);
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаПланФакта));
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
	
	ПланФактПоПравиламЛимитов = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаПланФакта, КомпоновщикНастроек, ВнешниеНаборыДанных);
	
	Если Не ИспользоватьНесколькоВалют Тогда
		Если ПланФактПоПравиламЛимитов.Колонки.Найти("Валюта") = Неопределено Тогда
			ПланФактПоПравиламЛимитов.Колонки.Добавить("Валюта");
		КонецЕсли;
		ПланФактПоПравиламЛимитов.ЗаполнитьЗначения(Константы.ВалютаУправленческогоУчета.Получить(), "Валюта");
	КонецЕсли;
	
	Возврат ПланФактПоПравиламЛимитов;

КонецФункции

Функция ПрименятьПравилоСтатьи(ПравилоФакта, ОтборИсточниковПоИменамРегистров)
	
	СКД = ИсточникиДанныхСервер.СхемаКомпоновкиДанныхПравила(ПравилоФакта);
	
	Возврат КомпоновкаДанныхСервер.НаборыДанныхСсылаютсяВЗапросахНаТаблицы(СКД.НаборыДанных, ОтборИсточниковПоИменамРегистров);
	
КонецФункции

Функция ДанныеДополнительныхПолей(ПараметрыПолученияФакта, ВспомогательныеДанные)
	
	ДанныеДополнительныхПолей = Новый ТаблицаЗначений;
	ДанныеДополнительныхПолей.Колонки.Добавить("Правило");
	ДанныеДополнительныхПолей.Колонки.Добавить("ТипЛимита");
	ДанныеДополнительныхПолей.Колонки.Добавить("СтатьяБюджетов");
	ДанныеДополнительныхПолей.Колонки.Добавить("ПоОрганизациям");
	ДанныеДополнительныхПолей.Колонки.Добавить("ПоПодразделениям");
	ДанныеДополнительныхПолей.Колонки.Добавить("ПоСценариям");
	ДанныеДополнительныхПолей.Колонки.Добавить("Сценарий");
		
	ВидыАналитикПравила = Новый Структура; 
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	ДатаПроверки = ПараметрыПолученияФакта.ПараметрыПолученияФакта.ДатаАктуальности;
	ПравилаЛимитов = ВспомогательныеДанные.ЛимитыДействующиеНаДату;
	
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ДанныеДополнительныхПолей.Колонки.Добавить("ВидАналитики" + НомерАналитики);
		
		ВидыАналитикПравила.Вставить("ВидАналитики" + НомерАналитики);
	КонецЦикла;
	
	Для Каждого ПравилоЛимита Из ПравилаЛимитов Цикл
		// Периоды с одинаковой периодичностью будут свернуты до получения факта
		ПериодПравила = Новый СтандартныйПериод(
			БюджетированиеКлиентСервер.ДатаНачалаПериода(ДатаПроверки, ПравилоЛимита.Периодичность),
			БюджетированиеКлиентСервер.ДатаКонцаПериода(ДатаПроверки,  ПравилоЛимита.Периодичность));
			
		#Область КэшированиеНастроекПравила
		НайденныеСтроки = ПравилоЛимита.ИспользуемыеАналитики.НайтиСтроки(Новый Структура("ПравилоЛимитовИмяИзмерения", "Организация"));
		ПоОрганизациям = НайденныеСтроки.Количество() > 0;
		
		НайденныеСтроки = ПравилоЛимита.ИспользуемыеАналитики.НайтиСтроки(Новый Структура("ПравилоЛимитовИмяИзмерения", "Подразделение"));
		ПоПодразделениям = НайденныеСтроки.Количество() > 0;
		
		ПоСценариям = ЗначениеЗаполнено(ПравилоЛимита.Сценарий);
		
		Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
			ВидАналитики = ПравилоЛимита.СтатьяБюджетов["ВидАналитики" + НомерАналитики];
			НайденныеСтроки = ПравилоЛимита.ИспользуемыеАналитики.НайтиСтроки(Новый Структура("ПравилоЛимитовВидАналитики", ВидАналитики));
			Если НайденныеСтроки.Количество() > 0 Тогда
				ВидыАналитикПравила["ВидАналитики" + НомерАналитики] = ВидАналитики;
			Иначе
				ВидыАналитикПравила["ВидАналитики" + НомерАналитики] = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
		#КонецОбласти 
			
		СтрокаДопДанных = ДанныеДополнительныхПолей.Добавить();
		
		СтрокаДопДанных.Правило                = ПравилоЛимита.ПравилоЛимитов;
		СтрокаДопДанных.ТипЛимита              = ПравилоЛимита.ТипЛимита;
		СтрокаДопДанных.СтатьяБюджетов         = ПравилоЛимита.СтатьяБюджетов;
		СтрокаДопДанных.ПоОрганизациям         = ПоОрганизациям;
		СтрокаДопДанных.ПоПодразделениям       = ПоПодразделениям;
		СтрокаДопДанных.ПоСценариям            = ПоСценариям;
		СтрокаДопДанных.Сценарий               = ПравилоЛимита.Сценарий;
		
		ЗаполнитьЗначенияСвойств(СтрокаДопДанных, ВидыАналитикПравила);
	КонецЦикла;
	
	Возврат ДанныеДополнительныхПолей;
КонецФункции

// Возвращает параметры получения факта для проверки документа на соответствие лимитам бюджетирования.
//
// Параметры:
// 	ПараметрыПроверки - Структура - см. ДействующиеЛимиты().
//
// Возвращаемое значение:
//	Структура - Параметры получения факта по статьям и показателя бюджетов. См. ИсточникиДанныхСервер.ШаблонПараметровПолученияФакта().
//
Функция ПараметрыПолученияФактаДляКонтроляЛимитов(РеквизитыЗаявки, ДействующиеЛимиты, ОтборПоЗаявке)
	
	ЛимитыДействующиеНаДату              = ДействующиеЛимиты.ЛимитыДействующиеНаДату;
	ПризнакиУникальностиИсточниковДанных = ДействующиеЛимиты.ПризнакиУникальностиИсточниковДанных;
	
	// Инициализируем параметры получения факта
	РезультатФункции = Новый Структура("ПараметрыПолученияФакта, ИсточникиДанных");
	// Общие параметры получения фактических данных
	ПараметрыПолученияФакта = Новый Структура;
	ПараметрыПолученияФакта.Вставить("ВалютаСценария",    РеквизитыЗаявки.ВалютаЗаявки);
	ПараметрыПолученияФакта.Вставить("ВариантСумм",       Перечисления.ВариантыВыводаСуммВБюджетныхОтчетах.ВВалютеСценария);
	ПараметрыПолученияФакта.Вставить("ГраницаФактДанных", РеквизитыЗаявки.ДатаПроверки);
	ПараметрыПолученияФакта.Вставить("ДатаАктуальности",  РеквизитыЗаявки.ДатаПроверки);
	ПараметрыПолученияФакта.Вставить("НачалоПериода",     РеквизитыЗаявки.ДатаПроверки); // Уточняется выражениями источников данных
	ПараметрыПолученияФакта.Вставить("КонецПериода",      РеквизитыЗаявки.ДатаПроверки); // Уточняется выражениями источников данных
	ПараметрыПолученияФакта.Вставить("Сценарий",          Справочники.Сценарии.ИсполнениеБюджета);
	ПараметрыПолученияФакта.Вставить("Период",            Новый СтандартныйПериод(РеквизитыЗаявки.ДатаПроверки, РеквизитыЗаявки.ДатаПроверки));
	ПараметрыПолученияФакта.Вставить("ДополнительныеФильтрыПоАналитикам", Новый Структура);
	
	Показатели = Новый Структура("Сумма");
	ПараметрыПолученияФакта.Вставить("Показатели", Показатели);
	
	КолонкиТаблицыДанных = Новый Структура("Периодичности, Измерения, ВидыАналитик");
	КолонкиТаблицыДанных.Периодичности = ДействующиеЛимиты.Периодичности.ВыгрузитьКолонку("Периодичность");
	КолонкиТаблицыДанных.Измерения     = ДействующиеЛимиты.Измерения.ВыгрузитьКолонку("ИмяИзмерения");
	КолонкиТаблицыДанных.ВидыАналитик  = ДействующиеЛимиты.ВидыАналитик.ВыгрузитьКолонку("ВидАналитики");
	ПараметрыПолученияФакта.Вставить("КолонкиТаблицыДанных", КолонкиТаблицыДанных);
	
	Если КолонкиТаблицыДанных.Измерения.Найти("Организация") <> Неопределено Тогда
		ПоОрганизациям = Истина;
	Иначе
		ПоОрганизациям = Ложь;
	КонецЕсли;
	ПараметрыПолученияФакта.Вставить("ПоОрганизациям", ПоОрганизациям);
	
	Если КолонкиТаблицыДанных.Измерения.Найти("Подразделение") <> Неопределено Тогда
		ПоПодразделениям = Истина;
	Иначе
		ПоПодразделениям = Ложь;
	КонецЕсли;
	ПараметрыПолученияФакта.Вставить("ПоПодразделениям", ПоПодразделениям);
	
	НастройкиСоставаПолей = Новый Структура;
	НастройкиСоставаПолей.Вставить("ТребуетсяКоличество", Ложь);
	НастройкиСоставаПолей.Вставить("ТребуетсяСумма", Истина);
	НастройкиСоставаПолей.Вставить("ТребуетсяСуммаНачальныйОстаток", Ложь);
	НастройкиСоставаПолей.Вставить("ТребуетсяСуммаПриход", Истина);
	НастройкиСоставаПолей.Вставить("ТребуетсяСуммаРасход", Ложь);
	
	ПараметрыПолученияФакта.Вставить("НастройкиСоставаПолей", НастройкиСоставаПолей);
	
	РезультатФункции.ПараметрыПолученияФакта = ПараметрыПолученияФакта;
	
	// Общие параметры источников данных
	ИсточникиДанных = Новый Массив;
	
	ОбщиеПараметрыИсточникаДанных = Новый Структура;
	ОбщиеПараметрыИсточникаДанных.Вставить("ТипИсточника", Перечисления.ТипыИсточниковДанныхБюджетирования.Обороты);
	ОбщиеПараметрыИсточникаДанных.Вставить("ПериодСмещения", Неопределено);
	ОбщиеПараметрыИсточникаДанных.Вставить("ПериодичностьСмещения", Перечисления.Периодичность.Год);
	ОбщиеПараметрыИсточникаДанных.Вставить("ПривилегированныйРежим", Истина);
	ОбщиеПараметрыИсточникаДанных.Вставить("ПредполагаетФактическиеДанные", "НеПредполагается");
	ОбщиеПараметрыИсточникаДанных.Вставить("ПредполагаетИсполнениеБюджета", "Предполагается");
	ОбщиеПараметрыИсточникаДанных.Вставить("ЕстьОнЛайновыеПравила", Истина);
	ОбщиеПараметрыИсточникаДанных.Вставить("ЕстьЦелевыеПоказатели", Ложь);
	
	ОбщиеПараметрыИсточникаДанных.Вставить("ДополнительныйОтбор", Новый НастройкиКомпоновкиДанных);
	Если ОтборПоЗаявке Тогда
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
			ОбщиеПараметрыИсточникаДанных.ДополнительныйОтбор,
			"Регистратор",
			РеквизитыЗаявки.СсылкаНаЗаявку);
	КонецЕсли;
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
		ОбщиеПараметрыИсточникаДанных.ДополнительныйОтбор,
		"Сценарий",
		Справочники.Сценарии.ИсполнениеБюджета);
	
	// Уникальные параметры источников данных
	Для Каждого ПризнакУникальности Из ПризнакиУникальностиИсточниковДанных Цикл 
		УникальныеПараметрыИсточникаДанных = Новый Структура("Идентификатор, Сценарий, Периодичность, Объекты,
			|ВыражениеПериодаГруппировки, ВыражениеНачалоПериода, ВыражениеКонецПериода");
		
		ЗаполнитьЗначенияСвойств(УникальныеПараметрыИсточникаДанных, ПризнакУникальности);
		УникальныеПараметрыИсточникаДанных.Идентификатор = "ИД_" + ИсточникиДанных.Количество();
		
		ИмяПериодичности = ОбщегоНазначения.ИмяЗначенияПеречисления(ПризнакУникальности.Периодичность);
		УникальныеПараметрыИсточникаДанных.ВыражениеПериодаГруппировки = СтрШаблон("НАЧАЛОПЕРИОДА(&НачалоПериода, %1)", ИмяПериодичности);
		УникальныеПараметрыИсточникаДанных.ВыражениеНачалоПериода      = СтрШаблон("НАЧАЛОПЕРИОДА(&НачалоПериода, %1)", ИмяПериодичности);
		УникальныеПараметрыИсточникаДанных.ВыражениеКонецПериода       = СтрШаблон("КОНЕЦПЕРИОДА(&КонецПериода, %1)", ИмяПериодичности);
		
		Если ПризнакиУникальностиИсточниковДанных.Количество() = 1 Тогда
			УникальныеПараметрыИсточникаДанных.Объекты = ЛимитыДействующиеНаДату.ВыгрузитьКолонку("СтатьяБюджетов");
		Иначе
			ОтборПравилЛимитов = Новый Структура("Сценарий, Периодичность");
			ЗаполнитьЗначенияСвойств(ОтборПравилЛимитов, ПризнакУникальности);
			
			УникальныеПараметрыИсточникаДанных.Объекты = ЛимитыДействующиеНаДату.Скопировать(ОтборПравилЛимитов, "СтатьяБюджетов").ВыгрузитьКолонку("СтатьяБюджетов");
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(УникальныеПараметрыИсточникаДанных.Объекты);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(УникальныеПараметрыИсточникаДанных, ОбщиеПараметрыИсточникаДанных, Ложь);
		
		ИсточникиДанных.Добавить(УникальныеПараметрыИсточникаДанных);
	КонецЦикла;
	
	РезультатФункции.ИсточникиДанных = ИсточникиДанных;
	
	Возврат РезультатФункции;
	
КонецФункции

/// Возвращает действующие на указанную дату правила лимитов по данным бюджетирования.
// 
// Параметры:
//	Дата - Дата - дата, на которую проверяется состояние лимитов.
//	ОтборПоСтатямБюджетов - Массив, СправочникСсылка.СтатьиБюджетов - ограничение использования правил лимитов по бюджетам.
//  ИнвертироватьОтбор - Булево - признак применения отбора по условию Не.
//
// Возвращаемое значение:
//	ПравилаЛимитовНаДату - Структура
//		* ПравилаЛимитов        - ТаблицаЗначений - таблица лимитов в разрезе сценария, статьи, периодичности, типа лимита и используемых аналитик.
//		* ПравилаПолученияФакта - ТаблицаЗначений - таблица правил получения факта в разрезе статей бюджетов.
// 
Функция ПравилаЛимитовНаДату(ДатаЛимитов, ОтборПоСтатямБюджетов = Неопределено, ИнвертироватьОтбор = Ложь) Экспорт
	
	ПравилаЛимитовНаДату = Новый Структура("ПравилаЛимитов, ПравилаПолученияФакта, ПризнакиУникальностиИсточниковДанных, ВидыАналитик, Измерения, Периодичности");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МоделиБюджетирования.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ МоделиБюджетирования
	|ИЗ
	|	Справочник.МоделиБюджетирования КАК МоделиБюджетирования
	|ГДЕ
	|	МоделиБюджетирования.НачалоДействия <= &ДатаЛимитов
	|	И (&ДатаЛимитов <= МоделиБюджетирования.КонецДействия
	|			ИЛИ МоделиБюджетирования.КонецДействия = ДАТАВРЕМЯ(1, 1, 1))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПравилаПолученияФактаПоСтатьямБюджетов.СтатьяБюджетов КАК СтатьяБюджетов
	|ПОМЕСТИТЬ СтатьиСДействующимиПравиламиПолученияФакта
	|ИЗ
	|	Справочник.ПравилаПолученияФактаПоСтатьямБюджетов КАК ПравилаПолученияФактаПоСтатьямБюджетов
	|ГДЕ
	|	ПравилаПолученияФактаПоСтатьямБюджетов.ТипПравила В (ЗНАЧЕНИЕ(Перечисление.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджетаИФактическиеДанные), ЗНАЧЕНИЕ(Перечисление.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджета))
	|	И ПравилаПолученияФактаПоСтатьямБюджетов.ДействуетС <= &ДатаЛимитов
	|	И (&ДатаЛимитов <= ПравилаПолученияФактаПоСтатьямБюджетов.ДействуетПо
	|			ИЛИ ПравилаПолученияФактаПоСтатьямБюджетов.ДействуетПо = ДАТАВРЕМЯ(1, 1, 1))
	|	И &ОтборПоСтатьям
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаЛимитовПоДаннымБюджетирования.Ссылка КАК ПравилоЛимитов,
	|	ПравилаЛимитовПоДаннымБюджетирования.Наименование КАК Наименование,
	|	ПравилаЛимитовПоДаннымБюджетирования.СтатьяБюджета КАК СтатьяБюджетов,
	|	ПравилаЛимитовПоДаннымБюджетирования.Сценарий КАК Сценарий,
	|	ПравилаЛимитовПоДаннымБюджетирования.Периодичность КАК Периодичность,
	|	ПравилаЛимитовПоДаннымБюджетирования.ТипЛимита КАК ТипЛимита,
	|	ИСТИНА КАК ПрочиеЗначенияАналитик
	|ПОМЕСТИТЬ ДействующиеПравилаЛимитов
	|ИЗ
	|	Справочник.ПравилаЛимитовПоДаннымБюджетирования КАК ПравилаЛимитовПоДаннымБюджетирования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МоделиБюджетирования КАК МоделиБюджетирования
	|		ПО ПравилаЛимитовПоДаннымБюджетирования.Владелец = МоделиБюджетирования.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиСДействующимиПравиламиПолученияФакта КАК СтатьиСДействующимиПравиламиПолученияФакта
	|		ПО ПравилаЛимитовПоДаннымБюджетирования.СтатьяБюджета = СтатьиСДействующимиПравиламиПолученияФакта.СтатьяБюджетов
	|ГДЕ
	|	НЕ ПравилаЛимитовПоДаннымБюджетирования.ЭтоГруппа
	|	И НЕ ПравилаЛимитовПоДаннымБюджетирования.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДействующиеПравилаЛимитов.Периодичность КАК Периодичность,
	|	ДействующиеПравилаЛимитов.Сценарий КАК Сценарий
	|ИЗ
	|	ДействующиеПравилаЛимитов КАК ДействующиеПравилаЛимитов
	|
	|СГРУППИРОВАТЬ ПО
	|	ДействующиеПравилаЛимитов.Сценарий,
	|	ДействующиеПравилаЛимитов.Периодичность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДействующиеПравилаЛимитов.ПравилоЛимитов КАК ПравилоЛимитов,
	|	ДействующиеПравилаЛимитов.Наименование КАК Наименование,
	|	ДействующиеПравилаЛимитов.СтатьяБюджетов КАК СтатьяБюджетов,
	|	ДействующиеПравилаЛимитов.Сценарий КАК Сценарий,
	|	ДействующиеПравилаЛимитов.Периодичность КАК Периодичность,
	|	ДействующиеПравилаЛимитов.ТипЛимита КАК ТипЛимита,
	|	ДействующиеПравилаЛимитов.ПрочиеЗначенияАналитик КАК ПрочиеЗначенияАналитик,
	|	ДействующиеПравилаЛимитов.ПравилоЛимитов.ИспользуемыеАналитики.(
	|		Ссылка КАК ПравилоЛимитовСсылка,
	|		НомерСтроки КАК ПравилоЛимитовНомерСтроки,
	|		ВидАналитики КАК ПравилоЛимитовВидАналитики,
	|		ИмяИзмерения КАК ПравилоЛимитовИмяИзмерения
	|	) КАК ИспользуемыеАналитики
	|ИЗ
	|	ДействующиеПравилаЛимитов КАК ДействующиеПравилаЛимитов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаЛимитовПоДаннымБюджетированияИспользуемыеАналитики.ВидАналитики КАК ВидАналитики
	|ИЗ
	|	ДействующиеПравилаЛимитов КАК ДействующиеПравилаЛимитов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаЛимитовПоДаннымБюджетирования.ИспользуемыеАналитики КАК ПравилаЛимитовПоДаннымБюджетированияИспользуемыеАналитики
	|		ПО ДействующиеПравилаЛимитов.ПравилоЛимитов = ПравилаЛимитовПоДаннымБюджетированияИспользуемыеАналитики.Ссылка
	|			И (ПравилаЛимитовПоДаннымБюджетированияИспользуемыеАналитики.ВидАналитики <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.АналитикиСтатейБюджетов.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПравилаЛимитовПоДаннымБюджетированияИспользуемыеАналитики.ВидАналитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаЛимитовПоДаннымБюджетированияИспользуемыеАналитики.ИмяИзмерения КАК ИмяИзмерения
	|ИЗ
	|	ДействующиеПравилаЛимитов КАК ДействующиеПравилаЛимитов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаЛимитовПоДаннымБюджетирования.ИспользуемыеАналитики КАК ПравилаЛимитовПоДаннымБюджетированияИспользуемыеАналитики
	|		ПО ДействующиеПравилаЛимитов.ПравилоЛимитов = ПравилаЛимитовПоДаннымБюджетированияИспользуемыеАналитики.Ссылка
	|			И (ПравилаЛимитовПоДаннымБюджетированияИспользуемыеАналитики.ИмяИзмерения <> """")
	|
	|СГРУППИРОВАТЬ ПО
	|	ПравилаЛимитовПоДаннымБюджетированияИспользуемыеАналитики.ИмяИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаПолученияФактаПоСтатьямБюджетов.Ссылка КАК Правило,
	|	СтатьиСДействующимиПравиламиПолученияФакта.СтатьяБюджетов КАК СтатьяБюджетов,
	|	ПравилаПолученияФактаПоСтатьямБюджетов.РазделИсточникаДанных КАК РазделИсточникаДанных,
	|	ПравилаПолученияФактаПоСтатьямБюджетов.ИсточникДанных КАК ИсточникДанных,
	|	ПравилаПолученияФактаПоСтатьямБюджетов.ХешСхемыКомпоновкиДанных КАК ХешСхемыКомпоновкиДанных
	|ИЗ
	|	Справочник.ПравилаПолученияФактаПоСтатьямБюджетов КАК ПравилаПолученияФактаПоСтатьямБюджетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиСДействующимиПравиламиПолученияФакта КАК СтатьиСДействующимиПравиламиПолученияФакта
	|		ПО ПравилаПолученияФактаПоСтатьямБюджетов.СтатьяБюджетов = СтатьиСДействующимиПравиламиПолученияФакта.СтатьяБюджетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДействующиеПравилаЛимитов.Периодичность КАК Периодичность
	|ИЗ
	|	ДействующиеПравилаЛимитов КАК ДействующиеПравилаЛимитов
	|
	|СГРУППИРОВАТЬ ПО
	|	ДействующиеПравилаЛимитов.Периодичность";
	
	Запрос.УстановитьПараметр("ДатаЛимитов", ДатаЛимитов);
	
	Если ЗначениеЗаполнено(ОтборПоСтатямБюджетов) Тогда
		Если ТипЗнч(ОтборПоСтатямБюджетов) = Тип("СправочникСсылка.СтатьиБюджетов") Тогда
			МассивСтатей = Новый Массив;
			МассивСтатей.Добавить(ОтборПоСтатямБюджетов);
		ИначеЕсли ТипЗнч(ОтборПоСтатямБюджетов) = Тип("Массив") Тогда 
			МассивСтатей = ОтборПоСтатямБюджетов;
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоСтатьям", 
			СтрШаблон("ПравилаПолученияФактаПоСтатьямБюджетов.СтатьяБюджетов %1 В (&ОтборПоСтатьям)", ?(ИнвертироватьОтбор, "НЕ", "")));
		Запрос.УстановитьПараметр("ОтборПоСтатьям", МассивСтатей);
	Иначе
		Запрос.УстановитьПараметр("ОтборПоСтатьям", Истина);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ПравилаЛимитовНаДату.ПравилаПолученияФакта                = РезультатЗапроса[7].Выгрузить();
	ПравилаЛимитовНаДату.ПравилаЛимитов                       = РезультатЗапроса[4].Выгрузить();
	ПравилаЛимитовНаДату.ПризнакиУникальностиИсточниковДанных = РезультатЗапроса[3].Выгрузить();
	ПравилаЛимитовНаДату.ВидыАналитик                         = РезультатЗапроса[5].Выгрузить();
	ПравилаЛимитовНаДату.Измерения                            = РезультатЗапроса[6].Выгрузить();
	ПравилаЛимитовНаДату.Периодичности                        = РезультатЗапроса[8].Выгрузить();
	
	// Уточнение данных
	ПравилаЛимитовНаДату.ПравилаПолученияФакта.Колонки.Добавить("ТипОбъектаИсточникаДанных");
	ПравилаЛимитовНаДату.ПравилаПолученияФакта.ЗаполнитьЗначения(Тип("СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов"), "ТипОбъектаИсточникаДанных");
	
	Возврат ПравилаЛимитовНаДату;
	
КонецФункции

// Обновляет состав лимитов с учетом имен регистров.
//
Процедура УточнитьСоставЛимитовПоИменамРегистров(ДействующиеЛимиты)
	
	СсылкаНаЗаявку					= ДействующиеЛимиты.СсылкаНаЗаявку;
	ДатаПроверки 					= ДействующиеЛимиты.ДатаПроверки;
	ОтборИсточниковПоИменамРегистров= ДействующиеЛимиты.ОтборИсточниковПоИменамРегистров;
	
	ЛимитыДействующиеНаДату 		= ДействующиеЛимиты.ЛимитыДействующиеНаДату;
	ТаблицаПравилСтатей 			= ДействующиеЛимиты.ТаблицаПравилСтатей;
	КэшПримененияПравил		 		= ДействующиеЛимиты.КэшПримененияПравил;
	
	СтрокиНеприменяемыхПравил  = Новый Массив;
	СтрокиНеприменяемыхЛимитов = Новый Массив;
	СтатьиБюджетовНеприменяемыхПравил = Новый Соответствие;
	
	Для Каждого ДействующийЛимит Из ЛимитыДействующиеНаДату Цикл
		СтрокиПравилПолученияФакта = ТаблицаПравилСтатей.НайтиСтроки(Новый Структура("СтатьяБюджетов", ДействующийЛимит.СтатьяБюджетов));
		
		Если Не СтатьиБюджетовНеприменяемыхПравил.Получить(ДействующийЛимит.СтатьяБюджетов) = Неопределено Тогда
			СтрокиНеприменяемыхЛимитов.Добавить(ДействующийЛимит); // Удалим лимиты, которые заявка не затрагивает движениями
			
			Продолжить;
		КонецЕсли;
		
		// Заполним параметры получения по периодам в разрезе правил
		КоличествоПрименяемыхПравилПоСтатье = 0;
		
		Для Каждого СтрокаПравилаПолученияФакта Из СтрокиПравилПолученияФакта Цикл
			// Проверим, что правило получения факта обращается хотя бы к одному регистру движений заявки.
			Если Не ПрименятьПравило(СтрокаПравилаПолученияФакта, ОтборИсточниковПоИменамРегистров, КэшПримененияПравил) Тогда
				Если СтрокиНеприменяемыхПравил.Найти(СтрокаПравилаПолученияФакта) = Неопределено Тогда
					СтрокиНеприменяемыхПравил.Добавить(СтрокаПравилаПолученияФакта);
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
			КоличествоПрименяемыхПравилПоСтатье = КоличествоПрименяемыхПравилПоСтатье + 1;
		КонецЦикла;
		
		Если КоличествоПрименяемыхПравилПоСтатье = 0 Тогда
			СтатьиБюджетовНеприменяемыхПравил.Вставить(ДействующийЛимит.СтатьяБюджетов, Истина);
			
			СтрокиНеприменяемыхЛимитов.Добавить(ДействующийЛимит); // Удалим лимиты, которые заявка не затрагивает движениями
		КонецЕсли;
		
	КонецЦикла;
	
	// Обновим содержание таблиц, отключив предварительно индексы
	ИсточникиДанныхСервер.УстановитьИндексыИзМассива(ЛимитыДействующиеНаДату);
	Для Каждого СтрокаНеприменяемогоЛимита Из СтрокиНеприменяемыхЛимитов Цикл
		ЛимитыДействующиеНаДату.Удалить(СтрокаНеприменяемогоЛимита);
	КонецЦикла;
	ИндексыТаблицы = ДействующиеЛимиты.ИндексыТаблиц.Получить("ЛимитыДействующиеНаДату");
	ИсточникиДанныхСервер.УстановитьИндексыИзМассива(ЛимитыДействующиеНаДату, ИндексыТаблицы);
	
	ИсточникиДанныхСервер.УстановитьИндексыИзМассива(ТаблицаПравилСтатей);
	Для Каждого СтрокаНеприменяемогоПравила Из СтрокиНеприменяемыхПравил Цикл
		ТаблицаПравилСтатей.Удалить(СтрокаНеприменяемогоПравила);
	КонецЦикла;
	ИндексыТаблицы = ДействующиеЛимиты.ИндексыТаблиц.Получить("ТаблицаПравилСтатей");
	ИсточникиДанныхСервер.УстановитьИндексыИзМассива(ТаблицаПравилСтатей, ИндексыТаблицы);
	
КонецПроцедуры

// Возвращает условия проверки заявки на соответствие лимитам бюджетирования.
//
// Параметры:
//	Дата - Дата - дата, на которую проверяется состояние лимитов.
//	ОтборПоПравиламЛимитирования - Массив, СправочникСсылка.ПравилаЛимитовПоДаннымБюджетирования - ограничение использования правил лимитов по бюджетам.
//  ИнвертироватьОтбор - Булево - признак применения отбора по условию Не.
//
// Возвращаемое значение:
//	Структура - параметры проверки заявки на соответствие лимитам бюджетирования
//		* Дата                             - Дата - дата, на которую проверяется состояние лимитов.
//		* СсылкаНаЗаявку                   - ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств - проверяемый документ. 
//			Значение по умолчанию - пустая ссылка.
//		* ОтборИсточниковПоИменамРегистров - Массив - имена таблиц источников данных, которые требуется использовать. 
//			Значение по умолчанию - Неопределено, значит использовать все источники данных.
//		* ЛимитыДействующиеНаДату          - ТаблицаЗначений - см. подробнее ПравилаЛимитовНаДату()
//		* ТаблицаПравилСтатей              - ТаблицаЗначений - правила получения факта и колонки с реквизитами. По умолчанию пустая таблица.
//			Состав колонок см. в Справочники.ПравилаПолученияФактаПоСтатьямБюджетов.Макеты.ПравилаПолученияФакта
//		* КэшПримененияПравил              - ТаблицаЗначений - кэшированный признак применения правила.
//		* ИндексыТаблиц                    - Соответствие - имена таблиц значений параметров получения факта и массивы включенных в них индексах. См. ИсточникиДанныхСервер.ИменаТаблицИИндексы()
//			** Ключ - Строка - имя таблицы в параметрах получения факта.
//			** Значение - Массив - массив строк, описывающих примененные индексы.
//
Функция ДействующиеЛимиты(Дата, ОтборПоСтатьяБюджетов = Неопределено, ИнвертироватьОтбор = Ложь)
	
	ДействующиеЛимиты = Новый Структура("
		|ДатаПроверки, СсылкаНаЗаявку, 
		|ЛимитыДействующиеНаДату,
		|ТаблицаПравилСтатей,
		|ПризнакиУникальностиИсточниковДанных,
		|ВидыАналитик, Измерения, Периодичности,
		|ОтборИсточниковПоИменамРегистров, КэшПримененияПравил, ИндексыТаблиц");
	
	#Область ДанныеЗаявки
		
	ДействующиеЛимиты.ДатаПроверки = Дата;
	ДействующиеЛимиты.СсылкаНаЗаявку = Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка(); 
	
	#КонецОбласти 
	
	ПравилаЛимитовНаДату = ПравилаЛимитовНаДату(Дата, ОтборПоСтатьяБюджетов, ИнвертироватьОтбор);
	
	#Область ЛимитыДействующиеНаДату
		
	ЛимитыДействующиеНаДату = ПравилаЛимитовНаДату.ПравилаЛимитов;
	ЛимитыДействующиеНаДату.Колонки.Добавить("НачалоПериода");
	ЛимитыДействующиеНаДату.Колонки.Добавить("КонецПериода");
	Для Каждого ДействующийЛимит Из ЛимитыДействующиеНаДату Цикл 
		ДействующийЛимит.НачалоПериода = БюджетированиеКлиентСервер.ДатаНачалаПериода(Дата, ДействующийЛимит.Периодичность);
		ДействующийЛимит.КонецПериода = БюджетированиеКлиентСервер.ДатаКонцаПериода(Дата, ДействующийЛимит.Периодичность);
	КонецЦикла;
	
	ЛимитыДействующиеНаДату.Индексы.Добавить("ПравилоЛимитов"); // Ссылка на СправочникСсылка.ПравилаЛимитовПоДаннымБюджетирования
	ЛимитыДействующиеНаДату.Индексы.Добавить("Сценарий");
	ЛимитыДействующиеНаДату.Индексы.Добавить("Периодичность");
	
	ДействующиеЛимиты.ЛимитыДействующиеНаДату = ЛимитыДействующиеНаДату;
	
	#КонецОбласти 
	
	#Область ПравилаИСрезы
		
	ДействующиеЛимиты.ТаблицаПравилСтатей = ПравилаЛимитовНаДату.ПравилаПолученияФакта;
	ДействующиеЛимиты.ВидыАналитик = ПравилаЛимитовНаДату.ВидыАналитик;
	ДействующиеЛимиты.Измерения = ПравилаЛимитовНаДату.Измерения;
	ДействующиеЛимиты.Периодичности = ПравилаЛимитовНаДату.Периодичности;
	
	#КонецОбласти 
	
	#Область ПризнакиУникальностиИсточниковДанных
		
	ДействующиеЛимиты.ПризнакиУникальностиИсточниковДанных = ПравилаЛимитовНаДату.ПризнакиУникальностиИсточниковДанных;
	
	#КонецОбласти 
	
	#Область КэшИИндексы
		
	КэшПримененияПравил = Новый ТаблицаЗначений;
	КэшПримененияПравил.Колонки.Добавить("Правило");
	КэшПримененияПравил.Колонки.Добавить("ПрименятьВЗаявках");
	
	ДействующиеЛимиты.КэшПримененияПравил = КэшПримененияПравил;
	
	ИндексируемыеТаблицы = Новый Соответствие; // Ключ - название таблицы, значение - массив строк индексов
	ИндексируемыеТаблицы.Вставить("ЛимитыДействующиеНаДату",              ДействующиеЛимиты.ЛимитыДействующиеНаДату);
	ИндексируемыеТаблицы.Вставить("ТаблицаПравилСтатей",                  ДействующиеЛимиты.ТаблицаПравилСтатей);
	ИндексируемыеТаблицы.Вставить("КэшПримененияПравил",                  ДействующиеЛимиты.КэшПримененияПравил);
	ИндексируемыеТаблицы.Вставить("ПризнакиУникальностиИсточниковДанных", ДействующиеЛимиты.ПризнакиУникальностиИсточниковДанных);
	
	ДействующиеЛимиты.ИндексыТаблиц = ИсточникиДанныхСервер.ИменаТаблицИИндексы(ИндексируемыеТаблицы);
	
	#КонецОбласти 
	
	Возврат ДействующиеЛимиты;
	
КонецФункции

#КонецОбласти

//--НЕ УТ

#КонецОбласти 


