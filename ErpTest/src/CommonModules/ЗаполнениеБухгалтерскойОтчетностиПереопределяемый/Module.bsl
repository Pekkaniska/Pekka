////////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ БУХГАЛТЕРСКОЙ ОТЧЕТНОСТИ.
// Модуль содержит переопределяемые процедуры и функции.
// Предназначен для заполнения регламентированного отчета
// "Бухгалтерская отчетность организаций" и финансовой отчетности в банки.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ЗаполнениеБухгалтерскойОтчетностиПоказатели

// Возвращает признак учета расходов по элементам затрат организацией в течении указанного периода.
//
// Параметры:
//   НачалоПериодаОтчета - Дата - дата начала периода, за который проводится проверка вида учета расходов;
//   КонецПериодаОтчета - Дата - дата конца периода, за который проводится проверка вида учета расходов;
//   Организация - СправочникСсылка.Организация - организация, для которой нужно получить признак.
//
// Возвращаемое значение:
//   Булево - Истина, если в течении проверяемого периода организация вела учет расходов
//     по элементам затрат.
//
// Пример реализации:
//   Возврат ЭлементыЗатратНастройкаПараметровУчета.РасходыУчитываютсяПоЭлементамЗатрат(
//     НачалоПериодаОтчета, КонецПериодаОтчета, Организация);
//
Функция РасходыУчитываютсяПоЭлементамЗатрат(НачалоПериодаОтчета, КонецПериодаОтчета, Организация) Экспорт
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти
////////////////////////////////////////////////////////////////////////////////
// Модуль содержит переопределяемые процедуры и функции.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Счета

// Переопределяет идентичную функцию в общем модуле "ЗаполнениеБухгалтерскойОтчетностиИтоги":
//	описывает счета, отсутствующие в ней, однако использующуюся в текущей конфигурации.
//
//	Параметры:
//		УсловныйКодСчета - Строка - код счета, как правило соответствуют коду счета из плана счетов для соответствующего счета.
//
//	Возвращаемое значение:
//		ПланСчетовСсылка.Хозрасчетный - ссылка на счет бухгалтерского учета, соотвутствующий переданному условному коду.
//			В случае отсутствия соответствия - возвращает пустую ссылку.
//
Функция Счет(УсловныйКодСчета) Экспорт
	
	ПС = ПланыСчетов.Хозрасчетный;
	Результат = ПС.ПустаяСсылка();

	Если УсловныйКодСчета = "01.ЦФ" Тогда
		Результат = ПС.ОСвОрганизации_ЦФ;
	ИначеЕсли УсловныйКодСчета = "02.ЦФ" Тогда
		Результат = ПС.АмортизацияОС_01_ЦФ;
	ИначеЕсли УсловныйКодСчета = "10.11.3" Тогда
		Результат = ПС.ИнвентарьВЭксплуатации;
	ИначеЕсли УсловныйКодСчета = "10.ДР" Тогда
		Результат = ПС.ДопРасходыМатериалы;
	ИначеЕсли УсловныйКодСчета = "19.11" Тогда
		Результат = ПС.НДСУплачиваемыйНалоговымАгентом;
	ИначеЕсли УсловныйКодСчета = "20" Тогда
		Результат = ПС.ОсновноеПроизводство;
	ИначеЕсли УсловныйКодСчета = "41.ДР" Тогда
		Результат = ПС.ДопРасходыТовары;
	ИначеЕсли УсловныйКодСчета = "60.НП" Тогда
		Результат = ПС.ОбязательстваПоНеотфактурованнымПоставкам;
	ИначеЕсли УсловныйКодСчета = "76.07.3" Тогда
		Результат = ПС.АвансыПоАренде;
	ИначеЕсли УсловныйКодСчета = "76.07.4" Тогда
		Результат = ПС.ВыкупЛизинговогоИмущества;
	ИначеЕсли УсловныйКодСчета = "76.ОК" Тогда
		Результат = ПС.ТоварыКОформлениюОтчетовКомитенту;
	ИначеЕсли УсловныйКодСчета = "97.11" Тогда
		Результат = ПС.УбыткиПрошлыхЛет;
	ИначеЕсли УсловныйКодСчета = "98.05" Тогда
		Результат = ПС.ДоходыБудущихПериодовОтЦелевогоФинансированияОС;
	ИначеЕсли УсловныйКодСчета = "98.06" Тогда
		Результат = ПС.ДоходыБудущихПериодовОтЦелевогоФинансированияНМА;
	ИначеЕсли УсловныйКодСчета = "002.01" Тогда
		Результат = ПС.ТМЦнаскладах;
	ИначеЕсли УсловныйКодСчета = "002.02" Тогда
		Результат = ПС.ТМЦВПроизводстве;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Дополняет строку условных кодов счетов счетами, используемыми только в текущей конфигурации по переданным ключам.
//
// Параметры:
//	СчетаСтрокой - Строка - перечисление условных кодов счетов, разделанных запятой (например: "60.01, 60.02");
//	КлючиСчетов - Строка - перечисление ключей счетов (разделенные запятыми), по которым будут добавлены дополнительные счета в первый параметр.
//		(например: "АвансыВыданные, НеотфактурованныеПоставки").
//
Процедура ДобавитьСчета(СчетаСтрокой, КлючиСчетов) Экспорт
	
	МассивКлючейСчетов = СтрРазделить(КлючиСчетов, ", ", Ложь);
	МассивСчетов = СтрРазделить(СчетаСтрокой, ", ");
	
	Если МассивКлючейСчетов.Найти("АвансыВыданные") <> Неопределено Тогда
		МассивСчетов.Добавить("76.07.3");
	КонецЕсли;
	Если МассивКлючейСчетов.Найти("Лизинг") <> Неопределено Тогда
		МассивСчетов.Добавить("76.07.4");
	КонецЕсли;
	Если МассивКлючейСчетов.Найти("НеотфактурованныеПоставки") <> Неопределено Тогда
		МассивСчетов.Добавить("60.НП");
	КонецЕсли;
	Если МассивКлючейСчетов.Найти("ОС") <> Неопределено Тогда
		МассивСчетов.Добавить("01.ЦФ");
	КонецЕсли;
	Если МассивКлючейСчетов.Найти("АмортизацияОС") <> Неопределено Тогда
		МассивСчетов.Добавить("02.ЦФ");
	КонецЕсли;
	Если МассивКлючейСчетов.Найти("НалоговыйАгент") <> Неопределено Тогда
		МассивСчетов.Добавить("19.11");
	КонецЕсли;
	
	СчетаСтрокой = СтрСоединить(МассивСчетов, ", ");
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыЗаполнения

// Инициализация переопределяемых параметров заполнения, на основании которых будут переопределяться значения показателей и расшифровки отчетов.
//
//	Параметры:
//		КонтектВыполнения - Структура - структура параметров, использующаяся при составлении бух. отчетности. Обязательно должна содержать следующие свойства:
//			* НачалоПериодаОтчета - Дата - начало периода, по данным которого заполняется отчет;
//			* КонецПериодаОтчета - Дата - конец периода, по данным которого заполняется отчет;
//			* Организация - СправочникСсылка.Организации - организация, по данным которой заполяется отчет;
//			* ТаблицаРасшифровки - ТаблицаЗначений - таблица расшифровки значений.
//		ИмяРаздела - Строка - имя раздела, для которого переопределяются параметры;
//		НомерРаздела - Строка - номер раздела, для которого переопределяются параметры;
//		ЭтоИП - Булево - признак того, что организация, для которой происходит заполнение, является индивидуальным предпринимателем.
//
//	Возвращаемое значение:
//		Структура - структура со следующими свойствами:
//			* Показатели - Соответствие - в данном свойстве хранятся значения переопределяемых показателей отчета;
//			* ОбщиеПараметрыРасшифровки - Структура, использующаяся при получении настройки расшифровки переопределяемых показателей, содержит следующие свойства:
//				** Организация - СправочникСсылка.Организации - организация, по данным которой заполяется отчет;
//				** НачалоПериода - Дата - начало периода, по данным которого заполняется отчет;
//				** КонецПериода - Дата - конец периода, по данным которого заполняется отчет;
//			* ТаблицаРасшифровки - ТаблицаЗначений - получается из параметра "КонтекстВыполнения";
//			* ДанныеДляЗаполнения - Структура - содержит расчитанные данные для заполнения отчета, заполняется из параметра "КонтекстВыполнения";
//			* ИмяРаздела - Строка - параметр "ИмяРаздела";
//			* ПараметрыПереопределенияСчетов - Структура - содержит данные, необходимые для переопределения счетов, содержит следующие свойства:
//				** НачалоПериода - Дата - начало периода, по данным которого заполняется отчет;
//				** КонецПериода - Дата - конец периода, по данным которого заполняется отчет;
//				** НомерРаздела - Строка - параметр "НомерРаздела";
//				** ЭтоИП - Булево - параметр "ЭтоИП".
//
Функция ИнициализироватьПереопределяемыеПараметрыЗаполнения(КонтекстВыполнения, ИмяРаздела, НомерРаздела, ЭтоИП = Неопределено) Экспорт
	
	НачалоПериода = ?(КонтекстВыполнения.Свойство("КонтекстОтчета"), КонтекстВыполнения.КонтекстОтчета.НачалоПериодаОтчета, КонтекстВыполнения.НачалоПериодаОтчета);
	КонецПериода = ?(КонтекстВыполнения.Свойство("КонтекстОтчета"), КонтекстВыполнения.КонтекстОтчета.КонецПериодаОтчета, КонтекстВыполнения.КонецПериодаОтчета);
	
	ОбщиеПараметрыРасшифровки = Новый Структура;
	ОбщиеПараметрыРасшифровки.Вставить("Организация",   КонтекстВыполнения.Организация);
	ОбщиеПараметрыРасшифровки.Вставить("НачалоПериода", НачалоПериода);
	ОбщиеПараметрыРасшифровки.Вставить("КонецПериода",  КонецПериода);
	
	ПараметрыПереопределенияСчетов = Новый Структура;
	ПараметрыПереопределенияСчетов.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыПереопределенияСчетов.Вставить("КонецПериода",  КонецПериода);
	ПараметрыПереопределенияСчетов.Вставить("НомерРаздела",  НомерРаздела);
	Если ЭтоИП <> Неопределено Тогда
		ПараметрыПереопределенияСчетов.Вставить("ЭтоИП", ЭтоИП);
	КонецЕсли;
	ДанныеДляЗаполнения = ?(КонтекстВыполнения.Свойство("РассчитанныеПараметры"), КонтекстВыполнения.РассчитанныеПараметры, Новый Структура);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Показатели", Новый Соответствие);
	СтруктураПараметров.Вставить("ОбщиеПараметрыРасшифровки", ОбщиеПараметрыРасшифровки);
	СтруктураПараметров.Вставить("ТаблицаРасшифровки", КонтекстВыполнения.ТаблицаРасшифровки);
	СтруктураПараметров.Вставить("ДанныеДляЗаполнения", ДанныеДляЗаполнения);
	СтруктураПараметров.Вставить("ИмяРаздела", ИмяРаздела);
	СтруктураПараметров.Вставить("ПараметрыПереопределенияСчетов", ПараметрыПереопределенияСчетов);	
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Дополняет значение показателя отчета переопределяемыми параметрами: когда значение показателя необходимо дополнить данными счетов, используемых только в текущей конфигурации.
//	На основании параметра "НаименованиеСтроки" и свойства "ПараметрыПереопределенияСчетов" параметра "ПараметрыЗаполнения" определяются какими значениями будет дополняться,
//	и если значение ранее еще не было подсчитано оно расчитывается, после чего значение показателя дополняется полученным значением.
//
//	Параметры:
//		ПараметрыЗаполнения - Структура - см. метод "ИнициализироватьПереопределяемыеПараметрыЗаполнения";
//		ЗначениеПоказателя - Число - значение, которое будет дополнено переопределяемыми знвачениями;
//		НаименованиеСтроки - Строка - строка, для которой заполняется значение показателя, на основании переданного значения определяется
//			какими переопределяемыми параметрами будет дополняться значение показателя.
//
Процедура ДополнитьЗначениеПоказателяПереопределяемымиПараметрами(ПараметрыЗаполнения, ЗначениеПоказателя, НаименованиеСтроки) Экспорт
	
	ПараметрыОбработки = ПараметрыОбработкиПереопределяемыхСчетовПоНаименованиюСтроки(НаименованиеСтроки, ПараметрыЗаполнения.ПараметрыПереопределенияСчетов);	
	
	Для каждого Параметр из ПараметрыОбработки Цикл
		ИдентификаторЗаполнения = Параметр.Имя + "_" + Параметр.ФункцияПолученияДанных;
		ЗначениеПоказателяСчета = ПараметрыЗаполнения.Показатели.Получить(ИдентификаторЗаполнения);
		Если ЗначениеПоказателяСчета = Неопределено Тогда
			ЗначениеПоказателяСчета = ЗначениеПоказателяСчетаПоПараметрамОбработки(Параметр, ПараметрыЗаполнения.ДанныеДляЗаполнения);
			ПараметрыЗаполнения.Показатели.Вставить(ИдентификаторЗаполнения, ЗначениеПоказателяСчета);
		КонецЕсли;
		
		ЗначениеПоказателя = ЗначениеПоказателя + Параметр.Знак * ЗначениеПоказателяСчета;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет строку расшифровки переопределяемого параметра. Вызывает для каждого переопредяемого значения метод "ДобавитьСтрокуРасшифровки"
//	общего модуля "ЗаполнениеРасшифровкаРегламентированнойОтчетности", перед этим получая все необходимые данные для переопределяемого значения.
//
//	Параметры:
//		ПараметрыЗаполнения - Структура - см. метод "ИнициализироватьПереопределяемыеПараметрыЗаполнения";
//		НаименованиеСтроки - Строка - строка, для которой заполняется значение показателя, на основании переданного значения определяется
//			какими переопределяемыми параметрами будет дополняться значение показателя;
//		ИмяОбластиПоказателя - Строка - имя параметра в макете, по которому будет заполняться расшифровка;
//		НаименованиеПоказателя - Строка - если требуется переопределить наименование.
//
Процедура ДобавитьСтрокуРасшифровкиПереопределяемогоПараметра(ПараметрыЗаполнения, НаименованиеСтроки, ИмяОбластиПоказателя, НаименованиеПоказателя = "") Экспорт
	
	ПараметрыОбработки = ПараметрыОбработкиПереопределяемыхСчетовПоНаименованиюСтроки(НаименованиеСтроки, ПараметрыЗаполнения.ПараметрыПереопределенияСчетов);
	
	Для каждого Параметр из ПараметрыОбработки Цикл
		
		ЗначениеПоказателяСчета = ПараметрыЗаполнения.Показатели.Получить(Параметр.Имя);
		Если ЗначениеПоказателяСчета = Неопределено Тогда
			ЗначениеПоказателяСчета = ЗначениеПоказателяСчетаПоПараметрамОбработки(Параметр, ПараметрыЗаполнения.ДанныеДляЗаполнения);
			ПараметрыЗаполнения.Показатели.Вставить(Параметр.Имя, ЗначениеПоказателяСчета);
		КонецЕсли;
		
		Если Параметр.ИмяИсходныхДанных = "СальдоИОборотыПоСчетам" Тогда
			Настройки = ЗаполнениеБухгалтерскойОтчетности.НастройкиОСВПоСчету(ПараметрыЗаполнения.ОбщиеПараметрыРасшифровки, Счет(Параметр.Счет));
			НаименованиеСлагаемого = "!" + Параметр.ФункцияПолученияДанных + " " + Счет(Параметр.Счет).Код;
		ИначеЕсли Параметр.ИмяИсходныхДанных = "ОборотыМеждуСчетами" Тогда
			Настройки = ЗаполнениеБухгалтерскойОтчетности.НастройкиАнализаСчета(ПараметрыЗаполнения.ОбщиеПараметрыРасшифровки, Параметр.Счет, Параметр.КорСчет);
			НаименованиеСлагаемого = "!" + Параметр.ФункцияПолученияДанных + " " + Счет(Параметр.Счет).Код + " " + Счет(Параметр.КорСчет).Код;
		ИначеЕсли Параметр.ИмяИсходныхДанных = "Обороты91ПоПереоценкеВнеоборотныхАктивов" Тогда
			ИмяВПДР = "ПереоценкаВнеоборотныхАктивов";
			Настройки = ЗаполнениеБухгалтерскойОтчетности.НастройкиАнализаСчетаВПДР(ПараметрыЗаполнения.ОбщиеПараметрыРасшифровки, Параметр.Счет, Параметр.КорСчет, ИмяВПДР);
			ШаблонСлогаемого = "Оборот по дебету счета %1 %2 в корреспонденции со счетом %3";
			ОписаниеОбъектовВПДР = ЗаполнениеБухгалтерскойОтчетности.ОписаниеОбъектовВПДР(ИмяВПДР);
			НаименованиеСлагаемого = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСлогаемого, Параметр.Счет, ОписаниеОбъектовВПДР, Параметр.КорСчет);
		Иначе
			ШаблонСлогаемого = "%1 на конец периода по %2 счета %3, развернутое по субконто %4";
			ВидСчетаФункции = ?(Параметр.ФункцияПолученияДанных = "СКК" Или Параметр.ФункцияПолученияДанных = "СККР", ВидДвиженияБухгалтерии.Кредит, ВидДвиженияБухгалтерии.Дебет);
			Если Параметр.ВидСчета = ВидСчета.Пассивный Тогда
				ВидСчетаСтрокой = НСтр("ru = 'кредиту'");
				ВидСальдоСтрокой = ?(ВидСчетаФункции = ВидДвиженияБухгалтерии.Дебет, НСтр("ru = 'Отрицательное сальдо'"), НСтр("ru = 'Положительное сальдо'"));
			ИначеЕсли Параметр.ВидСчета = ВидСчета.Активный Тогда
				ВидСчетаСтрокой = НСтр("ru = 'дебету'");
				ВидСальдоСтрокой = ?(ВидСчетаФункции = ВидДвиженияБухгалтерии.Дебет, НСтр("ru = 'Положительное сальдо'"), НСтр("ru = 'Отрицательное сальдо'"));
			Иначе
				ВидСчетаСтрокой = ?(ВидСчетаФункции = ВидДвиженияБухгалтерии.Дебет, НСтр("ru = 'дебету'"), НСтр("ru = 'кредиту'"));
				ВидСальдоСтрокой = НСтр("ru = 'Сальдо'");
			КонецЕсли; 
			ВидСубконтоСтрокой = "";
			Настройки = Неопределено;
			Если Параметр.ИмяИсходныхДанных = "СиО_КонтрагентыДоговоры" Тогда
				Настройки = ЗаполнениеБухгалтерскойОтчетности.НастройкиОСВПоСчетуКонтрагентыДоговорыРазвернуто(ПараметрыЗаполнения.ОбщиеПараметрыРасшифровки, Счет(Параметр.Счет));
				ВидСубконтоСтрокой = """Контрагенты"", ""Договоры""";
			ИначеЕсли Параметр.ИмяИсходныхДанных = "СиО_ВидыПлатежей" Тогда
				Настройки = ЗаполнениеБухгалтерскойОтчетности.НастройкиОСВПоСчетуВидыПлатежейРазвернуто(ПараметрыЗаполнения.ОбщиеПараметрыРасшифровки, Счет(Параметр.Счет));
				ВидСубконтоСтрокой = """Виды платежей в бюджет (фонды)""";
			ИначеЕсли Параметр.ИмяИсходныхДанных = "СиО_Работники" Тогда
				Настройки = ЗаполнениеБухгалтерскойОтчетности.НастройкиОСВПоСчетуРаботникиРазвернуто(ПараметрыЗаполнения.ОбщиеПараметрыРасшифровки, Счет(Параметр.Счет));
				ВидСубконтоСтрокой = """Работники организации"""; 
			КонецЕсли;
			НаименованиеСлагаемого = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСлогаемого,
				ВидСальдоСтрокой, ВидСчетаСтрокой, Параметр.Счет, ВидСубконтоСтрокой);
			Если Не Параметр.ВидСчета = ВидСчета.АктивноПассивный Тогда
				НаименованиеСлагаемого = СтрЗаменить(НаименованиеСлагаемого, "развернутое ", "");
			КонецЕсли;
		КонецЕсли;
		
		НаименованиеПоказателя = ?(Параметр.ВыводитьНаименование И ЗначениеЗаполнено(НаименованиеПоказателя), НаименованиеПоказателя, "");
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
			ПараметрыЗаполнения.ТаблицаРасшифровки,
			ИмяОбластиПоказателя,
			НаименованиеПоказателя,
			?(Параметр.Знак = 1, "+", "-"),
			НаименованиеСлагаемого,
			Параметр.Знак * ЗначениеПоказателяСчета,
			ПараметрыЗаполнения.ИмяРаздела,
			Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Возвращает счета расходов, используемые в текущей конфигурации.
//
//	Возвращаемое значение:
//		Массив - предопределенные значения счетов расходов (ПланСчетовСсылка.Хозрасчетный).
//
Функция ПредопределенныеСчетаРасходов() Экспорт
	
	СчетаРасходов = Новый Массив;
	СчетаРасходов.Добавить(ПланыСчетов.Хозрасчетный.СебестоимостьПродаж);
	СчетаРасходов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажу);
	СчетаРасходов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходы);
	
	Возврат Новый ФиксированныйМассив(СчетаРасходов);
	
КонецФункции

// Переопределяет текст запроса с учетом особенностей текущей конфигурации.
//
//	Параметры:
//		ИсходныйЗапрос - Запрос;
//
Процедура УстановитьПолныйТекстЗапроса(ИсходныйЗапрос) Экспорт
	
	ПереопределитьИсточникиДанных(ИсходныйЗапрос.Текст);
	
	МассивТекстовЗапроса = Новый Массив;
	
	Если ИсходныйЗапрос.МенеджерВременныхТаблиц = Неопределено Тогда
		ИсходныйЗапрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Если ИсходныйЗапрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТ_ПрочиеДоходыИРасходыПереопределяемый") = Неопределено
		И СтрНайти(ИсходныйЗапрос.Текст, "ВТ_ПрочиеДоходыИРасходыПереопределяемый") <> 0 Тогда
		МассивТекстовЗапроса.Добавить(ТекстЗапросаВТ_ПрочиеДоходыИРасходы());
	КонецЕсли;
	
	Если ИсходныйЗапрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТ_РасходыБудущихПериодовПереопределяемый") = Неопределено
		И СтрНайти(ИсходныйЗапрос.Текст, "ВТ_РасходыБудущихПериодовПереопределяемый") <> 0 Тогда
		МассивТекстовЗапроса.Добавить(ТекстЗапросаВТ_РасходыБудущихПериодов());
	КонецЕсли;
	
	Если ИсходныйЗапрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТ_ДоговорыКонтрагентовПереопределяемый") = Неопределено
		И СтрНайти(ИсходныйЗапрос.Текст, "ВТ_ДоговорыКонтрагентовПереопределяемый") <> 0 Тогда
		МассивТекстовЗапроса.Добавить(ТекстЗапросаВТ_ДоговорыКонтрагентов());
	КонецЕсли;
	
	Если ИсходныйЗапрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТ_ДоговорыКредитовДепозитовПереопределяемый") = Неопределено
		И СтрНайти(ИсходныйЗапрос.Текст, "ВТ_ДоговорыКредитовДепозитовПереопределяемый") <> 0 Тогда
		МассивТекстовЗапроса.Добавить(ТекстЗапросаВТ_ДоговорыКредитовДепозитов());
	КонецЕсли;
	
	Если ИсходныйЗапрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТ_ПереводыВКраткосрочныеПереопределяемый") = Неопределено
		И СтрНайти(ИсходныйЗапрос.Текст, "ВТ_ПереводыВКраткосрочныеПереопределяемый") <> 0 Тогда
		МассивТекстовЗапроса.Добавить(ТекстЗапросаВТ_ПереводыВКраткосрочные());
	КонецЕсли;
	
	Если ИсходныйЗапрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТ_ВсеСФПолученныеПереопределяемый") = Неопределено
		И СтрНайти(ИсходныйЗапрос.Текст, "ВТ_ВсеСФПолученныеПереопределяемый") <> 0 Тогда
		МассивТекстовЗапроса.Добавить(ТекстЗапросаВТ_ВсеСФПолученные(ИсходныйЗапрос));
	КонецЕсли;
	
	Если ИсходныйЗапрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТ_ВсеСФВыданныеПереопределяемый") = Неопределено
		И СтрНайти(ИсходныйЗапрос.Текст, "ВТ_ВсеСФВыданныеПереопределяемый") <> 0 Тогда
		МассивТекстовЗапроса.Добавить(ТекстЗапросаВТ_ВсеСФВыданные(ИсходныйЗапрос));
	КонецЕсли;
	
	Если ИсходныйЗапрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТ_БанковскиеСчетаПереопределяемый") = Неопределено
		И СтрНайти(ИсходныйЗапрос.Текст, "ВТ_БанковскиеСчетаПереопределяемый") <> 0 Тогда
		МассивТекстовЗапроса.Добавить(ТекстЗапросаВТ_БанковскиеСчета());
	КонецЕсли;
	
	Если ИсходныйЗапрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТ_ДокументыПоСчету") = Неопределено
		И СтрНайти(ИсходныйЗапрос.Текст, "ВТ_ДокументыПоСчету") <> 0 Тогда
		МассивТекстовЗапроса.Добавить(ТекстЗапросаВТ_ДокументыПоСчету());
	КонецЕсли;
	
	Если ИсходныйЗапрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТ_ДанныеКонтрагентов") = Неопределено
		И СтрНайти(ИсходныйЗапрос.Текст, "ВТ_ДанныеКонтрагентов") <> 0 Тогда
		МассивТекстовЗапроса.Добавить(ТекстЗапросаВТ_ДанныеКонтрагентов());
	КонецЕсли;
	
	Если ИсходныйЗапрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТ_СрокиОплатыДокументовПереопределяемый") = Неопределено
		И СтрНайти(ИсходныйЗапрос.Текст, "ВТ_СрокиОплатыДокументовПереопределяемый") <> 0 Тогда
		МассивТекстовЗапроса.Добавить(ТекстЗапросаВТ_СрокиОплатыДокументов());
	КонецЕсли;
	
	Если ИсходныйЗапрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТ_ДокументыМодернизацииПереопределяемый") = Неопределено
		И СтрНайти(ИсходныйЗапрос.Текст, "ВТ_ДокументыМодернизацииПереопределяемый") <> 0 Тогда
		МассивТекстовЗапроса.Добавить(ТекстЗапросаВТ_ДокументыМодернизации());
	КонецЕсли;
	
	Если МассивТекстовЗапроса.Количество() Тогда
		ТекстИсходногоЗапроса = ИсходныйЗапрос.Текст;
		ИсходныйЗапрос.Текст = СтрСоединить(МассивТекстовЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
		ИсходныйЗапрос.Выполнить();
		ИсходныйЗапрос.Текст = ТекстИсходногоЗапроса;
	КонецЕсли;
	
КонецПроцедуры

// Получение предопределенного элемента. Требует переопределения, так как некоторые предопределенные элементы могут быть недоступны в текущей конфигурации.
//
//	Параметры:
//		ИмяПредопределенногоЭлемента - Строка - Имя предопределенного элемента, используемое в функции ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент().
//	
//	Возвращаемое значение:
//		ЛюбаСсылка, Булево, Массив.
//
Функция ПредопределенныйЭлемент(ИмяПредопределенногоЭлемента) Экспорт
	
	Если ИмяПредопределенногоЭлемента = "Справочник.ПрочиеДоходыИРасходы.КурсовыеРазницы" Тогда
		МассивВозврата = Новый Массив;
		МассивВозврата.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("ПланВидовХарактеристик.СтатьиДоходов.КурсовыеРазницы"));
		МассивВозврата.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("ПланВидовХарактеристик.СтатьиРасходов.КурсовыеРазницы"));
		Возврат МассивВозврата;
	КонецЕсли;
	
	Если ИмяПредопределенногоЭлемента = "Справочник.ПрочиеДоходыИРасходы.ДоходыРасходыПриПродажеПокупкеВалюты" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ИмяПредопределенногоЭлемента = "Перечисление.ЭлементыЗатрат" Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ИмяПредопределенногоЭлемента, "Перечисление.ЭлементыЗатрат") Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Если ИмяПредопределенногоЭлемента = "ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ЭлементыЗатрат" Тогда
		Возврат ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка();
	КонецЕсли;
	
	Если ИмяПредопределенногоЭлемента = "ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НазначениеЦелевыхСредств" Тогда
		Возврат ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ЦелевыеСредства;
	КонецЕсли;
	
	Если ИмяПредопределенногоЭлемента = "ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Учредители" Тогда
		Возврат ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент(ИмяПредопределенногоЭлемента);
		
КонецФункции

// Переопределения получения таблицы графика платежей кредитов и депозитов.
//
//	Параметры:
//		ДоговорКредитаДепозита - СправочникСсылка.ДоговорыКредитовИДепозитов - договор кредитов и депозитов, для которого необходимо получить график платежей.
//
//	Возвращаемое значение:
//		ТаблицаЗначений - таблица, содержащая график платежей с колонками:
//			* ДатаПлатежа - Дата - дата платежа по графику;
//			* СуммаПлатежа - Число - сумма платежа по графику.
//
Функция ГрафикПлатежейКредитовДепозитов(ДоговорКредитаДепозита) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГрафикОплатКредитовИДепозитов.Период КАК ДатаПлатежа,
	|	ГрафикОплатКредитовИДепозитов.Сумма + ГрафикОплатКредитовИДепозитов.Проценты + ГрафикОплатКредитовИДепозитов.Комиссия КАК СуммаПлатежа
	|ИЗ
	|	РегистрСведений.ГрафикОплатКредитовИДепозитов КАК ГрафикОплатКредитовИДепозитов
	|ГДЕ
	|	ГрафикОплатКредитовИДепозитов.ВариантГрафика.Владелец = &Договор";
	Запрос.УстановитьПараметр("Договор", ДоговорКредитаДепозита);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Переопределения получения данных оборотно-сальдовой ведомости по договорам лизинга.
//
//	Параметры:
//		ПараметрыОСВ - Структура - параметры получения оборотно-сальдовой ведомости, со следующими свойствами:
//			* Организация - СправочникСсылка.Организации - организация по которой получаются данные;
//			* НачалоПериодаОтчета - Дата - дата начала периода, по данным которого получаются данные;
//			* КонецПериодаОтчета - Дата - конец периода, по данным которого получаются данные.
//
//	Возвращаемое значение:
//		ТаблицаЗначений - таблица данных оборотно-сальдовой ведомости со следующими колонками:
//			* Договор - СправочникСсылка.ДоговорыЛизинга - договор лизинга;
//			* ДоговорПредставление - Строка - строковое представление договора лизинга (соответствует реквизиту "Наименование" справочника договоры лизинга);
//			* ДоговорНомер - Строка - номер договора лизинга (соответствует реквизиту "Номер" справочника договоры лизинга);
//			* ДоговорДата - Дата - дата договора лизинга (соответствует реквизиту "Дата" справочника договоры лизинга);
//			* Валюта - СправочникСсылка.Валюты - валюта договора лизинга (соответствует реквизиту "ВалютаВзаиморасчетов" справочника договоры лизинга);
//			* Контрагент - СправочникСсылка.Контрагенты - контрагент договора лизинга (соответствует реквизиту "Контрагент" справочника договоры лизинга);
//			* КонтрагентНаименование - Строка - строковое представление контрагента договора лизинга (соответствует реквизиту "Наименование" справочника Контрагенты);
//			* КонтрагентИНН - Строка - ИНН контрагента договора лизинга (соответствует реквизиту "ИНН" справочника Контрагенты);
//			* КонтрагентКПП - Строка - КПП контрагента договора лизинга (соответствует реквизиту "КПП" справочника Контрагенты);
//			* Продукт - Строка - если в договоре указан выкуп предмета лизинга, принимает значение "Финансовый лизинг", в противном случае "Операционный лизинг";
//			* УчетОбязательства - Строка - если в договоре указан вариант учета имущества за балансом, принимает значение "Забаланс",
//				если указан вариант учета имущества на балансе, принимает значение "Баланс", в противном случае "";
//			* СуммаПоДоговору - Число - сумма кредитовых оборотов по арендным обязательствам договора лизинга;
//			* ОсталосьОплатить - Число - сумма кредитовых оборотов по арендным обязательствам договора лизинга за вычетом: дебетовых оборотов по арендным обязательствам,
//				разницы дебетовых и кредитовых оборотов по обеспечительному платежу, разницы дебетовых и кредитовых оборотов по услугам лизинга и разницы по дебетовым и кредитовым оборотам по выкупу;
//			* ОплаченоВТеченииГода - Число - сумма дебетовых оборотов по выкупу предмета лизинга, дебетовых оборотов по обеспечительному платежу, дебетовых оборотов по арендным обязательствам, за вычетом кредитовых оборотов по обеспечительному платежу и услуг по лизингу;
//			* ПроцентнаяСтавка - Число - процентная ставка по договору лизинга;
//			* ДатаПоследнегоПлатежа - Дата - дата последнего платежа по договору лизинга;
//
Функция ОСВ_ПоЛизингу(ПараметрыОСВ) Экспорт
	
	Организация         = ПараметрыОСВ.Организация;
	НачалоПериодаОтчета = НачалоМесяца(ПараметрыОСВ.НачалоПериодаОтчета);
	КонецПериодаОтчета  = КонецМесяца(ПараметрыОСВ.КонецПериодаОтчета);
	НачалоОтсчетаГода   = НачалоМесяца(ДобавитьМесяц(ПараметрыОСВ.НачалоПериодаОтчета, -12));
	
	Запрос = Новый Запрос;
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДоговорыЛизинга.Ссылка КАК Ссылка,
	|	ДоговорыЛизинга.Наименование КАК ДоговорПредставление,
	|	ДоговорыЛизинга.Номер КАК ДоговорНомер,
	|	ДоговорыЛизинга.Дата КАК ДоговорДата,
	|	ДоговорыЛизинга.ВалютаВзаиморасчетов КАК Валюта,
	|	ДоговорыЛизинга.Контрагент КАК Контрагент,
	|	ДоговорыЛизинга.ВариантУчетаИмущества КАК ВариантУчетаИмущества,
	|	ДоговорыЛизинга.ЕстьОбеспечительныйПлатеж КАК ЕстьОбеспечительныйПлатеж,
	|	ДоговорыЛизинга.ЕстьВыкупПредметаЛизинга КАК ЕстьВыкупПредметаЛизинга,
	|	ЕСТЬNULL(ПорядокОтражения.СчетУчетаРасчетовСЛизингодателемВыкупПредметаЛизинга, ДоговорыЛизинга.ГруппаФинансовогоУчета.СчетУчетаРасчетовСЛизингодателемВыкупПредметаЛизинга) КАК СчетУчетаВыкупПредметаЛизинга,
	|	ЕСТЬNULL(ПорядокОтражения.СчетУчетаРасчетовСЛизингодателемАрендныеОбязательства, ДоговорыЛизинга.ГруппаФинансовогоУчета.СчетУчетаРасчетовСЛизингодателемАрендныеОбязательства) КАК СчетУчетаАрендныеОбязательства,
	|	ЕСТЬNULL(ПорядокОтражения.СчетУчетаРасчетовСЛизингодателемОбеспечительныйПлатеж, ДоговорыЛизинга.ГруппаФинансовогоУчета.СчетУчетаРасчетовСЛизингодателемОбеспечительныйПлатеж) КАК СчетУчетаОбеспечительныйПлатеж,
	|	ЕСТЬNULL(ПорядокОтражения.СчетУчетаРасчетовСЛизингодателемЛизинговыеУслуги, ДоговорыЛизинга.ГруппаФинансовогоУчета.СчетУчетаРасчетовСЛизингодателемЛизинговыеУслуги) КАК СчетУчетаУслугиПоЛизингу
	|ПОМЕСТИТЬ ДоговорыЛизинга
	|ИЗ
	|	Справочник.ДоговорыЛизинга КАК ДоговорыЛизинга
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ПорядокОтраженияРасчетовСПартнерами КАК ПорядокОтражения
	|	ПО
	|		ПорядокОтражения.Организация = ДоговорыЛизинга.Организация
	|		И ПорядокОтражения.ГруппаФинансовогоУчета = ДоговорыЛизинга.ГруппаФинансовогоУчета
	|ГДЕ
	|	НЕ ДоговорыЛизинга.ПометкаУдаления
	|	И ДоговорыЛизинга.Организация = &Организация
	|	И (ДоговорыЛизинга.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|			ИЛИ ДоговорыЛизинга.ДатаОкончанияДействия >= &НачалоПериода)
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговорыЛизинга.СчетУчетаВыкупПредметаЛизинга КАК СчетУчета
	|ПОМЕСТИТЬ СчетаЛизинга
	|ИЗ
	|	ДоговорыЛизинга КАК ДоговорыЛизинга
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыЛизинга.СчетУчетаАрендныеОбязательства
	|ИЗ
	|	ДоговорыЛизинга КАК ДоговорыЛизинга
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыЛизинга.СчетУчетаОбеспечительныйПлатеж
	|ИЗ
	|	ДоговорыЛизинга КАК ДоговорыЛизинга
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыЛизинга.СчетУчетаУслугиПоЛизингу
	|ИЗ
	|	ДоговорыЛизинга КАК ДоговорыЛизинга
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет КАК СчетУчета,
	|	ХозрасчетныйОбороты.Субконто2 КАК Договор,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотДт) КАК СуммаОборотДт,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК СуммаОборотКт,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Период >= &НачалоОтсчетаГода
	|				ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаОборотДтГод,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Период >= &НачалоОтсчетаГода
	|				ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаОборотКтГод
	|ПОМЕСТИТЬ ОборотыРасчеты
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			,
	|			&КонецПериода,
	|			Месяц,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаЛизинга.СчетУчета
	|				ИЗ
	|					СчетаЛизинга КАК СчетаЛизинга),
	|			&Субконто,
	|			Организация = &Организация
	|				И (Субконто1, Субконто2) В
	|					(ВЫБРАТЬ
	|						ДоговорыЛизинга.Контрагент,
	|						ДоговорыЛизинга.Ссылка
	|					ИЗ
	|						ДоговорыЛизинга КАК ДоговорыЛизинга),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.Субконто2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговорыЛизинга.Ссылка КАК Договор,
	|	ДоговорыЛизинга.ДоговорПредставление КАК ДоговорПредставление,
	|	ДоговорыЛизинга.ДоговорНомер КАК ДоговорНомер,
	|	ДоговорыЛизинга.ДоговорДата КАК ДоговорДата,
	|	ДоговорыЛизинга.Валюта КАК Валюта,
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.Наименование КАК КонтрагентНаименование,
	|	Контрагенты.ИНН КАК КонтрагентИНН,
	|	Контрагенты.КПП КАК КонтрагентКПП,
	|	ВЫБОР
	|		КОГДА ДоговорыЛизинга.ЕстьВыкупПредметаЛизинга
	|			ТОГДА &ТекстФинансовыйЛизинг
	|		ИНАЧЕ &ТекстОперационныйЛизинг
	|	КОНЕЦ КАК Продукт,
	|	ВЫБОР
	|		КОГДА ДоговорыЛизинга.ВариантУчетаИмущества = ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаИмуществаПриЛизинге.ЗаБалансом)
	|			ТОГДА &ТекстЗабаланс
	|		КОГДА ДоговорыЛизинга.ВариантУчетаИмущества = ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаИмуществаПриЛизинге.НаБалансе)
	|			ТОГДА &ТекстБаланс
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК УчетОбязательства,
	|	ЕСТЬNULL(РасчетыАрендныеОбязательства.СуммаОборотКт, 0) КАК СуммаПоДоговору,
	|	ЕСТЬNULL(РасчетыАрендныеОбязательства.СуммаОборотКт, 0) - ЕСТЬNULL(РасчетыАрендныеОбязательства.СуммаОборотДт, 0) - (ЕСТЬNULL(РасчетыОбеспечительныйПлатеж.СуммаОборотДт, 0) - ЕСТЬNULL(РасчетыОбеспечительныйПлатеж.СуммаОборотКт, 0)) - (ЕСТЬNULL(РасчетыУслугиПоЛизингу.СуммаОборотДт, 0) - ЕСТЬNULL(РасчетыУслугиПоЛизингу.СуммаОборотКт, 0)) - (ЕСТЬNULL(РасчетыВыкупПредметаЛизинга.СуммаОборотДт, 0) - ЕСТЬNULL(РасчетыВыкупПредметаЛизинга.СуммаОборотКт, 0)) КАК ОсталосьОплатить,
	|	ЕСТЬNULL(РасчетыВыкупПредметаЛизинга.СуммаОборотДтГод, 0) + ЕСТЬNULL(РасчетыОбеспечительныйПлатеж.СуммаОборотДтГод, 0) + ЕСТЬNULL(РасчетыАрендныеОбязательства.СуммаОборотДтГод, 0) - ЕСТЬNULL(РасчетыОбеспечительныйПлатеж.СуммаОборотКтГод, 0) + ЕСТЬNULL(РасчетыУслугиПоЛизингу.СуммаОборотДтГод, 0) КАК ОплаченоВТеченииГода,
	|	ЕСТЬNULL(Ставки.Процент, 0) КАК ПроцентнаяСтавка,
	|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоследнегоПлатежа
	|ИЗ
	|	ДоговорыЛизинга КАК ДоговорыЛизинга
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ДоговорыЛизинга.Контрагент = Контрагенты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОборотыРасчеты КАК РасчетыВыкупПредметаЛизинга
	|		ПО ДоговорыЛизинга.Ссылка = РасчетыВыкупПредметаЛизинга.Договор
	|			И (ДоговорыЛизинга.ЕстьВыкупПредметаЛизинга)
	|			И ДоговорыЛизинга.СчетУчетаВыкупПредметаЛизинга = РасчетыВыкупПредметаЛизинга.СчетУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОборотыРасчеты КАК РасчетыОбеспечительныйПлатеж
	|		ПО ДоговорыЛизинга.Ссылка = РасчетыОбеспечительныйПлатеж.Договор
	|			И (ДоговорыЛизинга.ЕстьОбеспечительныйПлатеж)
	|			И ДоговорыЛизинга.СчетУчетаОбеспечительныйПлатеж = РасчетыОбеспечительныйПлатеж.СчетУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОборотыРасчеты КАК РасчетыАрендныеОбязательства
	|		ПО ДоговорыЛизинга.Ссылка = РасчетыАрендныеОбязательства.Договор
	|			И (ДоговорыЛизинга.ВариантУчетаИмущества = ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаИмуществаПриЛизинге.НаБалансе))
	|			И ДоговорыЛизинга.СчетУчетаАрендныеОбязательства = РасчетыАрендныеОбязательства.СчетУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОборотыРасчеты КАК РасчетыУслугиПоЛизингу
	|		ПО ДоговорыЛизинга.Ссылка = РасчетыУслугиПоЛизингу.Договор
	|			И ДоговорыЛизинга.СчетУчетаУслугиПоЛизингу = РасчетыУслугиПоЛизингу.СчетУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцентныеСтавкиФинансовыхИнструментов КАК Ставки
	|		ПО ДоговорыЛизинга.Ссылка = Ставки.Договор";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериодаОтчета);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериодаОтчета);
	Запрос.УстановитьПараметр("НачалоОтсчетаГода", НачалоОтсчетаГода);
	Запрос.УстановитьПараметр("ТекстФинансовыйЛизинг", НСтр("ru = 'Финансовый лизинг'"));
	Запрос.УстановитьПараметр("ТекстОперационныйЛизинг", НСтр("ru = 'Операционный лизинг'"));
	Запрос.УстановитьПараметр("ТекстЗабаланс", НСтр("ru = 'Забаланс'"));
	Запрос.УстановитьПараметр("ТекстБаланс", НСтр("ru = 'Баланс'"));
	
	Субконто = Новый Массив;
	Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("Субконто", Субконто);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СписокДоступныхОрганизаций(Организация) Экспорт
	
	СписокДоступныхОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
	
	Если ЗначениеЗаполнено(Организация) И СписокДоступныхОрганизаций.Найти(Организация) <> Неопределено Тогда
		СписокОрганизаций = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация);
	ИначеЕсли СписокДоступныхОрганизаций.Количество() <> 0 Тогда
		СписокОрганизаций = СписокДоступныхОрганизаций;
	Иначе
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	Возврат СписокОрганизаций;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыERP

Процедура ПереопределитьИсточникиДанных(ТекстЗапроса)
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаДоговорыКонтрагентовПереопределяемый", "ВТ_ДоговорыКонтрагентовПереопределяемый");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаРасходыБудущихПериодовПереопределяемый", "ВТ_РасходыБудущихПериодовПереопределяемый");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаПрочиеДоходыИРасходыПереопределяемый", "ВТ_ПрочиеДоходыИРасходыПереопределяемый");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаБанковскиеСчетаПереопределяемый", "ВТ_БанковскиеСчетаПереопределяемый");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаСрокиОплатыДокументовПереопределяемый", "ВТ_СрокиОплатыДокументовПереопределяемый");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаДокументыМодернизацииПереопределяемый", "ВТ_ДокументыМодернизацииПереопределяемый");
	
КонецПроцедуры

Функция ПараметрыОбработкиПереопределяемыхСчетовПоНаименованиюСтроки(НаименованиеСтроки, Параметры)
	
	Результат = Новый Массив;
	
	Если НаименованиеСтроки = "Кредиторская задолженность" Тогда
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("76.07.4", "СиО_КонтрагентыДоговоры", "СККР");
		Результат.Добавить(ПараметрыПоказателя);
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("60.НП", "СиО_КонтрагентыДоговоры", "СККР");
		Результат.Добавить(ПараметрыПоказателя);
	КонецЕсли;
	
	Если НаименованиеСтроки = "Дебиторская задолженность" Или НаименованиеСтроки = "П00001000051230" Или НаименованиеСтроки = "П00001000041230" Тогда
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("76.07.4", "СиО_КонтрагентыДоговоры", "СКДР");
		Результат.Добавить(ПараметрыПоказателя);
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("76.07.3", "СальдоИОборотыПоСчетам", "СКД");
		Результат.Добавить(ПараметрыПоказателя);
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("60.НП", "СиО_КонтрагентыДоговоры", "СКДР");
		Результат.Добавить(ПараметрыПоказателя);
	КонецЕсли;
	
	Если НаименованиеСтроки = "Расчеты с разными дебиторами и кредиторами" Тогда
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("76.07.4", "СиО_КонтрагентыДоговоры", ?(Параметры.НомерРаздела = "Раздел2", "СКДР", "СККР"));
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("60.НП", "СиО_КонтрагентыДоговоры", ?(Параметры.НомерРаздела = "Раздел2", "СКДР", "СККР"));
		Результат.Добавить(ПараметрыПоказателя);
	КонецЕсли;
	
	Если НаименованиеСтроки = "12301" Тогда
		
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("76.07.3", "СальдоИОборотыПоСчетам", "СКД");
		Результат.Добавить(ПараметрыПоказателя);
		
	КонецЕсли;
	
	Если Параметры.КонецПериода >= '2012-01-01' И НаименованиеСтроки = "Основные средства" Тогда
		
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("02.ЦФ", "СальдоИОборотыПоСчетам", "СКК", -1);
		Результат.Добавить(ПараметрыПоказателя);
		
	ИначеЕсли НаименованиеСтроки = "Основные средства в организации" ИЛИ НаименованиеСтроки = "Материальные внеоборотные активы" Тогда
		
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("01.ЦФ", "СальдоИОборотыПоСчетам", "СКД");
		Результат.Добавить(ПараметрыПоказателя);
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("02.ЦФ", "СальдоИОборотыПоСчетам", "СКК", -1);
		Результат.Добавить(ПараметрыПоказателя);
		
	ИначеЕсли НаименованиеСтроки = "П000100520004" ИЛИ НаименованиеСтроки = "П000100521004" Тогда
		
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("01.ЦФ", "СальдоИОборотыПоСчетам", "СНД");
		Результат.Добавить(ПараметрыПоказателя);
		
	ИначеЕсли НаименованиеСтроки = "П000100520005" ИЛИ НаименованиеСтроки = "П000100521005" Тогда
		
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("02.ЦФ", "СальдоИОборотыПоСчетам", "СНК");
		Результат.Добавить(ПараметрыПоказателя);
		
	ИначеЕсли НаименованиеСтроки = "П000100520006" ИЛИ НаименованиеСтроки = "П000100521006" Тогда
		
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("01.ЦФ", "ОборотыМеждуСчетами", "ОБ", 1, "08");
		Результат.Добавить(ПараметрыПоказателя);
		
	ИначеЕсли НаименованиеСтроки = "П000100520007" ИЛИ НаименованиеСтроки = "П000100521007" Тогда
		
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("01.09", "ОборотыМеждуСчетами", "ОБ", 1, "01.ЦФ");
		Результат.Добавить(ПараметрыПоказателя);
		
	ИначеЕсли НаименованиеСтроки = "П000100520008" ИЛИ НаименованиеСтроки = "П000100521008" Тогда
		
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("02.ЦФ", "ОборотыМеждуСчетами", "ОБ", 1, "01.09");
		Результат.Добавить(ПараметрыПоказателя);
		
	ИначеЕсли НаименованиеСтроки = "П000100520009" ИЛИ НаименованиеСтроки = "П000100521009" Тогда
		
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("02.ЦФ", "СальдоИОборотыПоСчетам", "КО");
		Результат.Добавить(ПараметрыПоказателя);
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("02.ЦФ", "ОборотыМеждуСчетами", "ОБ", -1, "02");
		Результат.Добавить(ПараметрыПоказателя);
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("83.01.1", "ОборотыМеждуСчетами", "ОБ", -1, "02.ЦФ");
		Результат.Добавить(ПараметрыПоказателя);
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("02.ЦФ", "ОборотыМеждуСчетами", "ОБ", 1, "83.01.1");
		Результат.Добавить(ПараметрыПоказателя);
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("91.02", "Обороты91ПоПереоценкеВнеоборотныхАктивов", "ОБ", -1, "02.ЦФ");
		Результат.Добавить(ПараметрыПоказателя);
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("02.ЦФ", "Обороты91ПоПереоценкеВнеоборотныхАктивов", "ОБ", 1, "91.01");
		Результат.Добавить(ПараметрыПоказателя);
		
	ИначеЕсли НаименованиеСтроки = "П000100520010" ИЛИ НаименованиеСтроки = "П000100521010" Тогда
		
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("01.ЦФ", "ОборотыМеждуСчетами", "ОБ", 1, "83.01.1");
		Результат.Добавить(ПараметрыПоказателя);
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("83.01.1", "ОборотыМеждуСчетами", "ОБ", -1, "01.ЦФ");
		Результат.Добавить(ПараметрыПоказателя);
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("91.02", "Обороты91ПоПереоценкеВнеоборотныхАктивов", "ОБ", -1, "01.ЦФ");
		Результат.Добавить(ПараметрыПоказателя);
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("01.ЦФ", "Обороты91ПоПереоценкеВнеоборотныхАктивов", "ОБ", 1, "91.01");
		Результат.Добавить(ПараметрыПоказателя);
		
	ИначеЕсли НаименованиеСтроки = "П000100520011" ИЛИ НаименованиеСтроки = "П000100521011" Тогда
		
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("83.01.1", "ОборотыМеждуСчетами", "ОБ", 1, "02.ЦФ", Истина);
		Результат.Добавить(ПараметрыПоказателя);
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("02.ЦФ", "ОборотыМеждуСчетами", "ОБ", -1, "83.01.1");
		Результат.Добавить(ПараметрыПоказателя);
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("91.02", "Обороты91ПоПереоценкеВнеоборотныхАктивов", "ОБ", 1, "02.ЦФ");
		Результат.Добавить(ПараметрыПоказателя);
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("02.ЦФ", "Обороты91ПоПереоценкеВнеоборотныхАктивов", "ОБ", -1, "91.01");
		Результат.Добавить(ПараметрыПоказателя);
		
	ИначеЕсли НаименованиеСтроки = "П000100520012" ИЛИ НаименованиеСтроки = "П000100521012" Тогда
		
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("01.ЦФ", "СальдоИОборотыПоСчетам", "СКД");
		Результат.Добавить(ПараметрыПоказателя);
		
	ИначеЕсли НаименованиеСтроки = "П000100520013" ИЛИ НаименованиеСтроки = "П000100521013" Тогда
		
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("02.ЦФ", "СальдоИОборотыПоСчетам", "СКК");
		Результат.Добавить(ПараметрыПоказателя);
		
	ИначеЕсли НаименованиеСтроки = "Налог на добавленную стоимость по приобретенным ценностям" Или НаименованиеСтроки = "П00001000051220" Тогда
		
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("19.11", "СальдоИОборотыПоСчетам", "СКД", -1);
		Результат.Добавить(ПараметрыПоказателя);
		
	ИначеЕсли НаименованиеСтроки = "Прочие оборотные активы" Или НаименованиеСтроки = "П00001000051260" Тогда
		
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("19.11", "СальдоИОборотыПоСчетам", "СКД");
		Результат.Добавить(ПараметрыПоказателя);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаВТ_ПрочиеДоходыИРасходы()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Доходы.Ссылка КАК Ссылка,
	|	Доходы.ВидПрочихДоходов КАК ВидПрочихДоходовИРасходов
	|ПОМЕСТИТЬ ВТ_ПрочиеДоходыИРасходыПереопределяемый
	|ИЗ ПланВидовХарактеристик.СтатьиДоходов КАК Доходы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Расходы.Ссылка КАК Ссылка,
	|	Расходы.ВидПрочихРасходов
	|ИЗ ПланВидовХарактеристик.СтатьиРасходов КАК Расходы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТ_ДоговорыКонтрагентов()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Договоры.Ссылка КАК Ссылка,
	|	Договоры.Контрагент КАК Владелец,
	|	Договоры.ПорядокОплаты = ЗНАЧЕНИЕ(Перечисление.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВРублях) КАК РасчетыВУсловныхЕдиницах,
	|	Договоры.УстановленСрокОплаты КАК УстановленСрокОплаты,
	|	Договоры.СрокОплаты КАК СрокОплаты,
	|	Договоры.Наименование КАК Наименование,
	|	Договоры.Номер КАК Номер,
	|	Договоры.Дата КАК Дата,
	|	Договоры.ДатаОкончанияДействия КАК СрокДействия
	|ПОМЕСТИТЬ ВТ_ДоговорыКонтрагентовПереопределяемый
	|ИЗ Справочник.ДоговорыКонтрагентов КАК Договоры
	|ГДЕ
	|	НЕ Договоры.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Договоры.Ссылка КАК Ссылка,
	|	Договоры.ОрганизацияПолучатель КАК Владелец,
	|	Договоры.ПорядокОплаты = ЗНАЧЕНИЕ(Перечисление.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВРублях) КАК РасчетыВУсловныхЕдиницах,
	|	Договоры.УстановленСрокОплаты КАК УстановленСрокОплаты,
	|	Договоры.СрокОплаты КАК СрокОплаты,
	|	Договоры.Наименование КАК Наименование,
	|	Договоры.Номер КАК Номер,
	|	Договоры.Дата КАК Дата,
	|	Договоры.ДатаОкончанияДействия КАК СрокДействия
	|ИЗ Справочник.ДоговорыМеждуОрганизациями КАК Договоры
	|ГДЕ
	|	НЕ Договоры.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Договоры.Ссылка КАК Ссылка,
	|	Договоры.Контрагент КАК Владелец,
	|	Договоры.ПорядокОплаты = ЗНАЧЕНИЕ(Перечисление.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВРублях) КАК РасчетыВУсловныхЕдиницах,
	|	ИСТИНА КАК УстановленСрокОплаты,
	|	ВЫБОР КОГДА Договоры.СрокДней = 0 И Договоры.ТипСрочности = ЗНАЧЕНИЕ(Перечисление.ТипыСрочностиКредитовИДепозитов.Краткосрочный) ТОГДА 100
	|	КОГДА Договоры.СрокДней = 0 И Договоры.ТипСрочности = ЗНАЧЕНИЕ(Перечисление.ТипыСрочностиКредитовИДепозитов.Долгосрочный) ТОГДА 400
	|	ИНАЧЕ Договоры.СрокДней КОНЕЦ КАК СрокОплаты,
	|	Договоры.Наименование КАК Наименование,
	|	Договоры.Номер КАК Номер,
	|	Договоры.Дата КАК Дата,
	|	Договоры.ДатаПоследнегоПлатежа КАК СрокДействия
	|ИЗ Справочник.ДоговорыКредитовИДепозитов КАК Договоры
	|ГДЕ
	|	НЕ Договоры.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Договоры.Ссылка КАК Ссылка,
	|	Договоры.Контрагент КАК Владелец,
	|	Договоры.ПорядокОплаты = ЗНАЧЕНИЕ(Перечисление.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВРублях) КАК РасчетыВУсловныхЕдиницах,
	|	ИСТИНА КАК УстановленСрокОплаты,
	|	400 КАК СрокОплаты,
	|	Договоры.Наименование КАК Наименование,
	|	Договоры.Номер КАК Номер,
	|	Договоры.Дата КАК Дата,
	|	Договоры.ДатаОкончанияДействия КАК СрокДействия
	|ИЗ Справочник.ДоговорыЛизинга КАК Договоры
	|ГДЕ
	|	НЕ Договоры.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТ_ДоговорыКредитовДепозитов()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДоговорыКредитовДепозитов.Ссылка КАК Договор,
	|	ВЫБОР
	|		КОГДА ДоговорыКредитовДепозитов.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.КредитВБанке) ТОГДА ""Кредит""
	|		КОГДА ДоговорыКредитовДепозитов.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.ВнешнийЗайм) ТОГДА ""Займ""
	|	ИНАЧЕ """" КОНЕЦ КАК Продукт,
	|	ДоговорыКредитовДепозитов.СуммаТраншей КАК СуммаТраншей,
	|	ДоговорыКредитовДепозитов.ВалютаВзаиморасчетов КАК Валюта,
	|	ЕСТЬNULL(Ставки.Процент, 0) КАК Процент
	|ПОМЕСТИТЬ ВТ_ДоговорыКредитовДепозитовПереопределяемый
	|ИЗ
	|	Справочник.ДоговорыКредитовИДепозитов КАК ДоговорыКредитовДепозитов
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцентныеСтавкиФинансовыхИнструментов КАК Ставки
	|	ПО Ставки.Договор = ДоговорыКредитовДепозитов.Ссылка
	|ГДЕ
	|	НЕ ДоговорыКредитовДепозитов.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Договор";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТ_ПереводыВКраткосрочные()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК Счет,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.ЦенныеБумаги.ПустаяСсылка) КАК ЦенныеБумаги
	|ПОМЕСТИТЬ ВТ_ПереводыВКраткосрочныеПереопределяемый
	|ГДЕ
	|	ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	Контрагент";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТ_ВсеСФПолученные(ИсходныйЗапрос)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК СФПолученный,
	|	КлючиРеестраДокументов.Ключ КАК Контрагент,
	|	ДанныеРеестра.Договор
	|ПОМЕСТИТЬ ВТ_ВсеСФПолученныеПереопределяемый
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , Счет В (&СчетаПоНДСАвансов), &СубконтоКонтрагентыСФПолученные, Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК ДанныеРеестра
	|		ПО ХозрасчетныйОстаткиИОбороты.Организация = ДанныеРеестра.Организация
	|			И ХозрасчетныйОстаткиИОбороты.Субконто2 = ДанныеРеестра.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиРеестраДокументов КАК КлючиРеестраДокументов
	|		ПО ДанныеРеестра.Организация = КлючиРеестраДокументов.Организация
	|			И ДанныеРеестра.Контрагент = КлючиРеестраДокументов.Ссылка
	|ГДЕ
	|	КлючиРеестраДокументов.Ключ ССЫЛКА Справочник.Организации ИЛИ КлючиРеестраДокументов.Ключ ССЫЛКА Справочник.Контрагенты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	Договор";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТ_ВсеСФВыданные(ИсходныйЗапрос)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК СФВыданный,
	|	КлючиРеестраДокументов.Ключ КАК Контрагент,
	|	ДанныеРеестра.Договор
	|ПОМЕСТИТЬ ВТ_ВсеСФВыданныеПереопределяемый
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , Счет В (&СчетаПоНДСАвансов), &СубконтоКонтрагентыСФВыданные, Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК ДанныеРеестра
	|		ПО ХозрасчетныйОстаткиИОбороты.Организация = ДанныеРеестра.Организация
	|			И ХозрасчетныйОстаткиИОбороты.Субконто2 = ДанныеРеестра.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиРеестраДокументов КАК КлючиРеестраДокументов
	|		ПО ДанныеРеестра.Организация = КлючиРеестраДокументов.Организация
	|			И ДанныеРеестра.Контрагент = КлючиРеестраДокументов.Ссылка
	|ГДЕ
	|	КлючиРеестраДокументов.Ключ ССЫЛКА Справочник.Организации ИЛИ КлючиРеестраДокументов.Ключ ССЫЛКА Справочник.Контрагенты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	Договор";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТ_РасходыБудущихПериодов()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СтатьиРасходов.Ссылка КАК Ссылка,
	|	СтатьиРасходов.ВидАктива КАК ВидАктива
	|ПОМЕСТИТЬ ВТ_РасходыБудущихПериодовПереопределяемый
	|ИЗ ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|ГДЕ
	|	СтатьиРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТ_БанковскиеСчета()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	БанковскиеСчетаКонтрагентов.Ссылка КАК Счет,
	|	БанковскиеСчетаКонтрагентов.НомерСчета КАК НомерСчета,
	|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|		И БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств <> Константы.ВалютаРегламентированногоУчета КАК Валютный,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанка ТОГДА
	|		БанковскиеСчетаКонтрагентов.БИКБанка
	|	ИНАЧЕ ЕСТЬNULL(БанковскиеСчетаКонтрагентов.Банк.Код,"""") КОНЕЦ КАК БИКБанка,
	|	ПРЕДСТАВЛЕНИЕ(БанковскиеСчетаКонтрагентов.Банк) КАК НаименованиеБанка,
	|	Валюты.Код КАК КодВалюты
	|ПОМЕСТИТЬ ВТ_БанковскиеСчетаПереопределяемый
	|ИЗ
	|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константы КАК Константы
	|		ПО (ИСТИНА)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	|		ПО БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств = Валюты.Ссылка
	|ГДЕ
	|	НЕ БанковскиеСчетаКонтрагентов.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БанковскиеСчетаОрганизаций.Ссылка КАК Счет,
	|	БанковскиеСчетаОрганизаций.НомерСчета КАК НомерСчета,
	|	БанковскиеСчетаОрганизаций.ВалютаДенежныхСредств <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|		И БанковскиеСчетаОрганизаций.ВалютаДенежныхСредств <> Константы.ВалютаРегламентированногоУчета КАК Валютный,
	|	ВЫБОР КОГДА БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанка ТОГДА
	|		БанковскиеСчетаОрганизаций.БИКБанка
	|	ИНАЧЕ ЕСТЬNULL(БанковскиеСчетаОрганизаций.Банк.Код,"""") КОНЕЦ КАК БИКБанка,
	|	ПРЕДСТАВЛЕНИЕ(БанковскиеСчетаОрганизаций.Банк) КАК НаименованиеБанка,
	|	Валюты.Код КАК КодВалюты
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константы КАК Константы
	|		ПО (ИСТИНА)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	|		ПО БанковскиеСчетаОрганизаций.ВалютаДенежныхСредств = Валюты.Ссылка
	|ГДЕ
	|	НЕ БанковскиеСчетаОрганизаций.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТ_ДокументыПоСчету()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДенежныеСредстваБезналичные.Регистратор КАК Ссылка,
	|	РеестрДокументов.НомерПервичногоДокумента КАК НомерВходящегоДокумента,
	|	РеестрДокументов.ДатаПервичногоДокумента КАК ДатаВходящегоДокумента,
	|	ДенежныеСредстваБезналичные.ХозяйственнаяОперация КАК ВидОперации
	|ПОМЕСТИТЬ ВТ_ДокументыПоСчету
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваБезналичные КАК ДенежныеСредстваБезналичные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|		ПО ДенежныеСредстваБезналичные.Регистратор = РеестрДокументов.Ссылка
	|			И ДенежныеСредстваБезналичные.ХозяйственнаяОперация = РеестрДокументов.ХозяйственнаяОперация
	|ГДЕ
	|	ДенежныеСредстваБезналичные.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ДенежныеСредстваБезналичные.Организация = &Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТ_ДанныеКонтрагентов()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеКонтрагентов.Ссылка КАК Ссылка,
	|	ДанныеКонтрагентов.ИНН КАК ИНН,
	|	ДанныеКонтрагентов.КПП КАК КПП
	|ПОМЕСТИТЬ ВТ_ДанныеКонтрагентов
	|ИЗ
	|	Справочник.Контрагенты КАК ДанныеКонтрагентов
	|ГДЕ
	|	НЕ ДанныеКонтрагентов.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеКонтрагентов.Ссылка,
	|	ДанныеКонтрагентов.ИНН,
	|	ДанныеКонтрагентов.КПП
	|ИЗ
	|	Справочник.Организации КАК ДанныеКонтрагентов
	|ГДЕ
	|	НЕ ДанныеКонтрагентов.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеКонтрагентов.Ссылка,
	|	ДанныеКонтрагентов.ИНН,
	|	""""
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ДанныеКонтрагентов
	|ГДЕ
	|	НЕ ДанныеКонтрагентов.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТ_СрокиОплатыДокументов()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаОстатков.РасчетныйДокумент КАК Документ,
	|	ТаблицаОстатков.ДатаПлатежа КАК СрокОплаты,
	|	ТаблицаОстатков.ДолгОстаток КАК Долг
	|ПОМЕСТИТЬ ВТ_СрокиОплатыДокументовПереопределяемый
	|ИЗ
	|	ТаблицаОстатковКлиентов КАК ТаблицаОстатков
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаОстатков.РасчетныйДокумент КАК Документ,
	|	ТаблицаОстатков.ДатаПлатежа КАК СрокОплаты,
	|	ТаблицаОстатков.ДолгОстаток КАК Долг
	|ИЗ
	|	ТаблицаОстатковПоставщиков КАК ТаблицаОстатков";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТ_ДокументыМодернизации()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МодернизацияОС.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ДокументыМодернизацииПереопределяемый
	|ИЗ
	|	Документ.МодернизацияОС КАК МодернизацияОС
	|ГДЕ
	|	МодернизацияОС.СобытиеОС.ВидСобытияОС = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Модернизация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МодернизацияОС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.МодернизацияОС2_4 КАК МодернизацияОС";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ПереопределитьЗапросСтруктураНДСвДДС(Запрос) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеРегистра.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств КАК ВидДДС,
	
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ДанныеРегистра.ДенежныеСредства) = ТИП(Справочник.Кассы) ТОГДА
	|			ВЫРАЗИТЬ(ДанныеРегистра.ДенежныеСредства КАК Справочник.Кассы).СчетУчета
	|		КОГДА ТИПЗНАЧЕНИЯ(ДанныеРегистра.ДенежныеСредства) = ТИП(Справочник.БанковскиеСчетаОрганизаций) ТОГДА
	|			ВЫРАЗИТЬ(ДанныеРегистра.ДенежныеСредства КАК Справочник.БанковскиеСчетаОрганизаций).СчетУчета
	|		КОГДА ТИПЗНАЧЕНИЯ(ДанныеРегистра.ДенежныеСредства) = ТИП(Справочник.ЭквайринговыеТерминалы) ТОГДА
	|			ВЫРАЗИТЬ(ДанныеРегистра.ДенежныеСредства КАК Справочник.ЭквайринговыеТерминалы).БанковскийСчет.СчетУчета
	|		КОГДА ТИПЗНАЧЕНИЯ(ДанныеРегистра.ДенежныеСредства) = ТИП(Справочник.КассыККМ) ТОГДА
	|			ВЫБОР КОГДА ДанныеРегистра.ВалютаПлатежа = &ВалютаРегУчета ТОГДА
	|				ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КассаОрганизации)
	|			ИНАЧЕ
	|				ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КассаОрганизацииВал)
	|			КОНЕЦ
	|	КОНЕЦ КАК СчетДДС,
	
	|	0 КАК ДО,
	|	ВЫБОР КОГДА ДанныеРегистра.ХозяйственнаяОперация В (&ОперацииПоступления) ТОГДА
	|		ДанныеРегистра.СуммаНДСРеглОборот
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК ДО_НДС,
	
	|	0 КАК КО,
	|	ВЫБОР КОГДА ДанныеРегистра.ХозяйственнаяОперация В (&ОперацииСписания) ТОГДА
	|		ДанныеРегистра.СуммаНДСРеглОборот
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК КО_НДС
	|	
	|ПОМЕСТИТЬ ОборотыНДС
	|
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент.Обороты(&НачПериода, &КонПериода, , Организация = &Организация) КАК ДанныеРегистра
	|	
	|ГДЕ
	|	НЕ ДанныеРегистра.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств ЕСТЬ NULL
	|	И ДанныеРегистра.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеРегистра.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств КАК ВидДДС,
	
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ДанныеРегистра.ДенежныеСредства) = ТИП(Справочник.Кассы) ТОГДА
	|			ВЫРАЗИТЬ(ДанныеРегистра.ДенежныеСредства КАК Справочник.Кассы).СчетУчета
	|		КОГДА ТИПЗНАЧЕНИЯ(ДанныеРегистра.ДенежныеСредства) = ТИП(Справочник.БанковскиеСчетаОрганизаций) ТОГДА
	|			ВЫРАЗИТЬ(ДанныеРегистра.ДенежныеСредства КАК Справочник.БанковскиеСчетаОрганизаций).СчетУчета
	|		КОГДА ТИПЗНАЧЕНИЯ(ДанныеРегистра.ДенежныеСредства) = ТИП(Справочник.ЭквайринговыеТерминалы) ТОГДА
	|			ВЫРАЗИТЬ(ДанныеРегистра.ДенежныеСредства КАК Справочник.ЭквайринговыеТерминалы).БанковскийСчет.СчетУчета
	|	КОНЕЦ КАК СчетДДС,
	
	|	0 КАК ДО,
	|	ВЫБОР КОГДА ДанныеРегистра.ХозяйственнаяОперация В (&ОперацииПоступления) ТОГДА
	|		ДанныеРегистра.СуммаНДСРеглОборот
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК ДО_НДС,
	
	|	0 КАК КО,
	|	ВЫБОР КОГДА ДанныеРегистра.ХозяйственнаяОперация В (&ОперацииСписания) ТОГДА
	|		ДанныеРегистра.СуммаНДСРеглОборот
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК КО_НДС
	|
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваДоходыРасходы.Обороты(&НачПериода, &КонПериода, , Организация = &Организация) КАК ДанныеРегистра
	|	
	|ГДЕ
	|	НЕ ДанныеРегистра.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств ЕСТЬ NULL
	|	И ДанныеРегистра.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.ПустаяСсылка)
	|;
	|
	|ВЫБРАТЬ
	|	ОборотыНДС.ВидДДС          КАК ВидДДС,
	|	ОборотыНДС.СчетДДС         КАК СчетДДС,
	|	СУММА(ОборотыНДС.ДО)       КАК ДО,
	|	СУММА(ОборотыНДС.ДО_НДС)   КАК ДО_НДС,
	|	СУММА(ОборотыНДС.КО)       КАК КО,
	|	СУММА(ОборотыНДС.КО_НДС)   КАК КО_НДС
	|
	|ИЗ
	|	ОборотыНДС КАК ОборотыНДС
	|	
	|ГДЕ
	|	ОборотыНДС.СчетДДС В (&СчетаДДС)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОборотыНДС.ВидДДС,
	|	ОборотыНДС.СчетДДС
	|";
	
	ОперацииПоступления = Новый Массив;
	ОперацииПоступления.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
	ОперацииПоступления.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
	ОперацииПоступления.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации);
	ОперацииПоступления.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации);
	ОперацииПоступления.Добавить(Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств);
	
	ОперацииСписания = Новый Массив;
	ОперацииСписания.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	ОперацииСписания.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	ОперацииСписания.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
	ОперацииСписания.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
	ОперацииСписания.Добавить(Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
	ОперацииСписания.Добавить(Перечисления.ХозяйственныеОперации.ОплатаЛизингодателю);
	
	Запрос.УстановитьПараметр("ОперацииПоступления", ОперацииПоступления);
	Запрос.УстановитьПараметр("ОперацииСписания", ОперацииСписания);
	
	Запрос.Текст = ТекстЗапроса;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыБухгалтерии



#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗначениеПоказателяСчетаПоПараметрамОбработки(Параметры, ДанныеДляЗаполнения)
	
	Данные = ДанныеДляЗаполнения[Параметры.ИмяИсходныхДанных];
	Если Параметры.ФункцияПолученияДанных = "СКК" Тогда
		Возврат ЗаполнениеБухгалтерскойОтчетностиИтоги.СКК(Параметры.Счет, Данные);
	ИначеЕсли Параметры.ФункцияПолученияДанных = "СКД" Тогда
		Возврат ЗаполнениеБухгалтерскойОтчетностиИтоги.СКД(Параметры.Счет, Данные);
	ИначеЕсли Параметры.ФункцияПолученияДанных = "СКДР" Тогда
		Возврат ЗаполнениеБухгалтерскойОтчетностиИтоги.СКДР(Параметры.Счет, Данные);
	ИначеЕсли Параметры.ФункцияПолученияДанных = "СККР" Тогда
		Возврат ЗаполнениеБухгалтерскойОтчетностиИтоги.СККР(Параметры.Счет, Данные);
	ИначеЕсли Параметры.ФункцияПолученияДанных = "СНД" Тогда
		Возврат ЗаполнениеБухгалтерскойОтчетностиИтоги.СНД(Параметры.Счет, Данные);
	ИначеЕсли Параметры.ФункцияПолученияДанных = "СНК" Тогда
		Возврат ЗаполнениеБухгалтерскойОтчетностиИтоги.СНК(Параметры.Счет, Данные);
	ИначеЕсли Параметры.ФункцияПолученияДанных = "ОБ" Тогда
		Возврат ЗаполнениеБухгалтерскойОтчетностиИтоги.ОБ(Параметры.Счет, Параметры.КорСчет, Данные);
	ИначеЕсли Параметры.ФункцияПолученияДанных = "ДО" Тогда
		Возврат ЗаполнениеБухгалтерскойОтчетностиИтоги.ДО(Параметры.Счет, Данные);
	ИначеЕсли Параметры.ФункцияПолученияДанных = "КО" Тогда
		Возврат ЗаполнениеБухгалтерскойОтчетностиИтоги.КО(Параметры.Счет, Данные);
	Иначе
		Возврат 0;
	КонецЕсли;	
	
КонецФункции

Функция ИнициализироватьПараметрыПоказателя(Счет, ИмяДанных, ИмяВызываемойФункции, Знак = 1, КорСчет = "", ВыводитьНаименование = Ложь)
	
	СтруктураВозврата = Новый Структура;
	ИмяПоказателя = ИмяВызываемойФункции + "_" + СтрЗаменить(Счет, ".", "_") + ?(КорСчет = "", "", "__"+СтрЗаменить(КорСчет, ".", "_"));
	Если СтрНачинаетсяС(ИмяДанных, "СиО") Или СтрНачинаетсяС(ИмяДанных, "Обороты91") Тогда
		ИмяПоказателя = ИмяПоказателя + СтрЗаменить(СтрЗаменить(ИмяДанных, "СиО", ""), "Обороты91", "_");
	КонецЕсли;
	СтруктураВозврата.Вставить("Имя", ?(ЗначениеЗаполнено(КорСчет), Счет + "_" + КорСчет, Счет));
	СтруктураВозврата.Вставить("Счет", Счет);
	СтруктураВозврата.Вставить("ВидСчета", ПланыСчетов.Хозрасчетный.НайтиПоКоду(Счет).Вид);
	СтруктураВозврата.Вставить("ИмяИсходныхДанных", ИмяДанных);
	СтруктураВозврата.Вставить("ФункцияПолученияДанных", ИмяВызываемойФункции);
	СтруктураВозврата.Вставить("Знак", Знак);
	СтруктураВозврата.Вставить("КорСчет", КорСчет);
	СтруктураВозврата.Вставить("ВыводитьНаименование", ВыводитьНаименование);
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти