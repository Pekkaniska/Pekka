
//////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ТАБЛИЦ ДАННЫХ ДЛЯ ВЫПОЛНЕНИЯ ДВИЖЕНЕЙ

// Функция выполняет формирование таблицы партий для списания билетов
//
// Параметры:
//  ТаблицаБилетов - таблица билетов для которой необходимо получить списываемые партии
//                 должно содержать 3 колонки: билет, списываемое количество, склад с которого выполняется
//                 списание
// СпособСписанияПартий - способ списания партий: фило, либо, по средней - значение перечисления
// МоментВремени        - Момент времени на который получаются остатки партий
//
// Возвращаемое значение:
//  Таблица списываемых партий в формате: билет, склад, партия,  количество
//
Функция ПолучитьТаблицуПартийБилетовДляСписания(ТаблицаБилетов, СпособСписанияПартий, МоментВремени = Неопределено) Экспорт
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = 
	"ВЫБРАТЬ
	|	ВремТаб.Билет,
	|	ВремТаб.Количество,
	|	ВремТаб.Склад
	|ПОМЕСТИТЬ ТаблицаБилетов
	|ИЗ
	|	&ТаблицаПараметр КАК ВремТаб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаБилетов.Билет,
	|	ТаблицаБилетов.Склад,
	|	СУММА(ТаблицаБилетов.Количество) КАК Количество
	|ПОМЕСТИТЬ ТаблицаБилетовГруппировка
	|ИЗ
	|	ТаблицаБилетов КАК ТаблицаБилетов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаБилетов.Билет,
	|	ТаблицаБилетов.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	мЗапрос.УстановитьПараметр("ТаблицаПараметр", ТаблицаБилетов);
	Если МоментВремени = Неопределено тогда 
		мЗапрос.УстановитьПараметр("МоментВремени", Дата('00010101'));
	Иначе
		мЗапрос.УстановитьПараметр("МоментВремени", МоментВремени);
	КонецЕсли;
		
	Если СпособСписанияПартий = Перечисления.СпособыОценки.ПоСредней тогда
		мЗапрос.Текст = мЗапрос.Текст + "
		|ВЫБРАТЬ
		|	Билеты.Билет,
		|	Билеты.Количество,
		|	Билеты.Склад
		|ИЗ
		|	ТаблицаБилетовГруппировка КАК Билеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатБилетыНаСкладах.Остатки(
		|				&МоментВремени,
		|				Склад В (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							мТаб.Склад
		|						ИЗ
		|							ТаблицаБилетов КАК мТаб)
		|					И Билет В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							мТаб.Билет
		|						ИЗ
		|							ТаблицаБилетов КАК мТаб
		|						)) КАК уатБилетыНаСкладахОстатки
		|		ПО Билеты.Склад = уатБилетыНаСкладахОстатки.Склад
		|			И Билеты.Билет = уатБилетыНаСкладахОстатки.Билет
		|;";
		МассивРезультатов = мЗапрос.ВыполнитьПакет();
		тблПартий = МассивРезультатов[2].Выгрузить();
		тблПартий.Колонки.Добавить("Партия", Метаданные.РегистрыНакопления.уатБилетыНаСкладах.Измерения.Партия.Тип);
		
		Возврат тблПартий;
		
	Иначе
		мЗапрос.Текст = мЗапрос.Текст + 
		"ВЫБРАТЬ
		|	Билеты.Билет,
		|	Билеты.Склад,
		|	Билеты.Количество,
		|	уатБилетыНаСкладахОстатки.Партия КАК Партия,
		|	ЕСТЬNULL(уатБилетыНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоПартия,
		|	ЕСТЬNULL(уатБилетыНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоОсталось
		|ИЗ
		|	ТаблицаБилетовГруппировка КАК Билеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатБилетыНаСкладах.Остатки(
		|				&МоментВремени,
		|				Склад В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							мТаб.Склад
		|						ИЗ
		|							ТаблицаБилетов КАК мТаб)
		|					И Билет В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							мТаб.Билет
		|						ИЗ
		|							ТаблицаБилетов КАК мТаб)) КАК уатБилетыНаСкладахОстатки
		|		ПО Билеты.Билет = уатБилетыНаСкладахОстатки.Билет
		|			И Билеты.Склад = уатБилетыНаСкладахОстатки.Склад
		|
		|УПОРЯДОЧИТЬ ПО
		|	уатБилетыНаСкладахОстатки.Партия.МоментВремени";

		Если СпособСписанияПартий = Перечисления.СпособыОценки.ЛИФО Тогда
			мЗапрос.Текст = СтрЗаменить(мЗапрос.Текст, "уатБилетыНаСкладахОстатки.Партия.МоментВремени",
				"уатБилетыНаСкладахОстатки.Партия.МоментВремени Убыв");
		КонецЕсли;
		
        МассивРезультатов = мЗапрос.ВыполнитьПакет();
		
		ТаблицаОстатковПартий = МассивРезультатов[2].Выгрузить();
		ТаблицаПартий = Новый ТаблицаЗначений();
		ТаблицаПартий.Колонки.Добавить("Склад"       , Новый ОписаниеТипов("СправочникСсылка.Склады"));
		ТаблицаПартий.Колонки.Добавить("Билет", Новый ОписаниеТипов("СправочникСсылка.уатБилеты"));
		ТаблицаПартий.Колонки.Добавить("Партия"      , Метаданные.РегистрыНакопления.уатБилетыНаСкладах.Измерения.Партия.Тип);
		ТаблицаПартий.Колонки.Добавить("Количество"  , Новый ОписаниеТипов("Число"),Новый КвалификаторыЧисла(15,2));
				
		Для каждого ТекСтрокаТабБилетов ИЗ ТаблицаБилетов Цикл
			ОсталосьСписать = ТекСтрокаТабБилетов.Количество;	
			Для каждого ТекСтрокаОстатковПартий ИЗ ТаблицаОстатковПартий Цикл
				Если ОсталосьСписать = 0 ТОгда
					Прервать;
				КонецЕсли;
				Если ТекСтрокаТабБилетов.Склад = ТекСтрокаОстатковПартий.Склад 
				   И ТекСтрокаТабБилетов.Билет = ТекСтрокаОстатковПартий.Билет
				   И ТекСтрокаОстатковПартий.КоличествоОсталось > 0 тогда
					СписатьКоличество = Мин(ТекСтрокаОстатковПартий.КоличествоОсталось, ОсталосьСписать);
					Если СписатьКоличество = 0 тогда 
						Продолжить;
					КонецЕсли;
					НовСтрока = ТаблицаПартий.Добавить();
					НовСтрока.Склад        = ТекСтрокаОстатковПартий.Склад;
					НовСтрока.Билет = ТекСтрокаОстатковПартий.Билет;
					НовСтрока.Партия       = ТекСтрокаОстатковПартий.Партия;
					НовСтрока.Количество   = СписатьКоличество;
					
					ОсталосьСписать = ОсталосьСписать - СписатьКоличество;
					ТекСтрокаОстатковПартий.КоличествоОсталось  = ТекСтрокаОстатковПартий.КоличествоОсталось - СписатьКоличество;
				Иначе
					Продолжить;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ОсталосьСписать > 0 тогда
				НовСтрока = ТаблицаПартий.Добавить();
				НовСтрока.Склад      = ТекСтрокаТабБилетов.Склад;
				НовСтрока.Билет      = ТекСтрокаТабБилетов.Билет;
				НовСтрока.Партия     = Неопределено;
				НовСтрока.Количество = ОсталосьСписать;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат ТаблицаПартий;
	КонецЕсли;

КонецФункции


//////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ РЕГИСТРОВ

// Выполняет движения регистра сведений Местонахождение ТС
//
Процедура ОтразитьМестонахождениеТС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаМестонахожденияТС = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаМестонахожденияТС;
	
	Если Отказ ИЛИ ТаблицаМестонахожденияТС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияСостояние = Движения.уатМестонахождениеТС;
	ДвиженияСостояние.Записывать = Истина;
	ДвиженияСостояние.Загрузить(ТаблицаМестонахожденияТС);

КонецПроцедуры

// Выполняет движения регистра сведений Прейскуранты ТС
//
Процедура ОтразитьПрейскурантыТС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаПрейскурантыТС = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПрейскурантыТС;
	
	Если Отказ ИЛИ ТаблицаПрейскурантыТС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияСостояние = Движения.уатПрейскурантыТС;
	ДвиженияСостояние.Записывать = Истина;
	ДвиженияСостояние.Загрузить(ТаблицаПрейскурантыТС);

КонецПроцедуры

// Выполняет движения регистра сведений Тарифы ЗП сотрудников
//
Процедура ОтразитьТарифыЗП(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаТарифыЗП = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТарифыЗП;
	
	Если Отказ ИЛИ ТаблицаТарифыЗП.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияСостояние = Движения.уатТарифыСотрудников;
	ДвиженияСостояние.Записывать = Истина;
	ДвиженияСостояние.Загрузить(ТаблицаТарифыЗП);

КонецПроцедуры

// Выполняет движения регистра сведений План работы ТС
//
Процедура ОтразитьПланРаботыТС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаПланаРаботыТС = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПланаРаботыТС;
	
	Если Отказ ИЛИ ТаблицаПланаРаботыТС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияОборотыПоЗаправкамГСМ = Движения.уатПланРаботыТС;
	ДвиженияОборотыПоЗаправкамГСМ.Записывать = Истина;
	ДвиженияОборотыПоЗаправкамГСМ.Загрузить(ТаблицаПланаРаботыТС);

КонецПроцедуры

// Выполняет движения регистра сведений зависимости оборотов по затратам по видам перевозок
//
Процедура ОтразитьЗатратыТС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	мТаблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗатратыТС;
	
	Если Отказ ИЛИ мТаблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияВыработка = Движения.уатЗатратыТС;
	ДвиженияВыработка.Записывать = Истина;
	ДвиженияВыработка.Загрузить(мТаблица);

КонецПроцедуры

// Выполняет движения регистра накопления Выручка
//
Процедура ОтразитьВыручку(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	мТаблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаВыручка;
	
	Если Отказ ИЛИ мТаблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияВыработка = Движения.уатВыручка;
	ДвиженияВыработка.Записывать = Истина;
	ДвиженияВыработка.Загрузить(мТаблица);

КонецПроцедуры

// Выполняет движения регистра накопления Билеты на складах
//
Процедура ОтразитьБилетыНаСкладах(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	мТаблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаБилетыНаСкладах;
	
	Если Отказ ИЛИ мТаблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияВыработка = Движения.уатБилетыНаСкладах;
	ДвиженияВыработка.Записывать = Истина;
	ДвиженияВыработка.Загрузить(мТаблица);

КонецПроцедуры
