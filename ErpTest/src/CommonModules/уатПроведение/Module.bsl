////////////////////////////////////////////////////////////////////////////////
// УПРАВЛЕНИЕ ПРОВЕДЕНИЕМ
//

// Выполняет инициализацию дополнительных свойств для проведения документа.
//
Процедура ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	// В структуре "ДополнительныеСвойства" создаются свойства с ключами "ТаблицыДляДвижений", "ДляПроведения", "УчетнаяПолитика".
	
	// "ТаблицыДляДвижений" - структура, которая будет содержать таблицы значений с данными для выполнения движений.
	СтруктураДополнительныеСвойства.Вставить("ТаблицыДляДвижений", Новый Структура);
	
	// "ДляПроведения" - структура, содержащая свойства и реквизиты документа, необходимые для проведения.
	СтруктураДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
	
	// Структура, содержащая ключ с именем "МенеджерВременныхТаблиц", в значении которого хранится менеджер временных таблиц.
	// Содержит для каждой временной таблицы ключ (имя временной таблицы) и значение (признак наличия записей во временной таблице).
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы", 
		Новый Структура("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц));
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("МетаданныеДокумента", ДокументСсылка.Метаданные());
	
	// "УчетнаяПолитика" - структура, содержащая значения всех параметров учетной политики на момент времени документа
	// и по выбранной в документе организации или по компании (в случае ведения учета по компании).
	СтруктураДополнительныеСвойства.Вставить("УчетнаяПолитика"   , Новый Структура);
	
	// Запрос, получающий данные документа.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	_Документ_.Ссылка КАК Ссылка,
	|	_Документ_.Номер КАК Номер,
	|	_Документ_.Дата КАК Дата,
	|   " + ?(СтруктураДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Реквизиты.Найти("Организация") <> 
		Неопределено, "_Документ_.Организация КАК Организация," , "") + "
	|	_Документ_.МоментВремени КАК МоментВремени,
	|	_Документ_.Представление КАК Представление
	|ИЗ
	|	Документ." + СтруктураДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Имя + " КАК _Документ_
	|ГДЕ
	|	_Документ_.Ссылка = &ДокументСсылка");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Формирование ключей, содержащих данные документа.
	Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
		
		СтруктураДополнительныеСвойства.ДляПроведения.Вставить(Колонка.Имя);
		
	КонецЦикла;
	
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаИзРезультатаЗапроса.Следующий();
	
	// Заполнение значений для ключей, содержащих данные документа.
	ЗаполнитьЗначенияСвойств(СтруктураДополнительныеСвойства.ДляПроведения, ВыборкаИзРезультатаЗапроса);
	
	// Определение и установка значения момента, на который должен быть выполнен контроль документа.
	//СтруктураДополнительныеСвойства.ДляПроведения.Вставить("МоментКонтроля", Дата('00010101'));
	мГраницаКонтроля = Новый Граница(ДокументСсылка.МоментВремени(), ВидГраницы.Включая);
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("МоментКонтроля", мГраницаКонтроля);
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("ПериодКонтроля", Дата("39991231"));
		
	СтруктураКурсаРегл = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(
		Константы.ВалютаРегламентированногоУчета.Получить(),ДокументСсылка.Дата);
	СтруктураДополнительныеСвойства.Вставить("ВалютаРеглУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	СтруктураДополнительныеСвойства.Вставить("КурсРегл"       , СтруктураКурсаРегл.Курс);
	СтруктураДополнительныеСвойства.Вставить("КратностьРегл"  , СтруктураКурсаРегл.Кратность);
	Если уатРаботаСМетаданными.уатЕстьКонстанта("ВалютаУправленческогоУчета") тогда
		СтруктураКурсаУпр = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(Константы.ВалютаУправленческогоУчета.Получить(),
			ДокументСсылка.Дата);
		СтруктураДополнительныеСвойства.Вставить("ВалютаУпрУчета", Константы.ВалютаУправленческогоУчета.Получить());
		СтруктураДополнительныеСвойства.Вставить("КурсУпр"       , СтруктураКурсаУпр.Курс);
		СтруктураДополнительныеСвойства.Вставить("КратностьУпр"  , СтруктураКурсаУпр.Кратность);
	Иначе
		СтруктураДополнительныеСвойства.Вставить("ВалютаУпрУчета", Константы.ВалютаРегламентированногоУчета.Получить());
		СтруктураДополнительныеСвойства.Вставить("КурсУпр"       , СтруктураКурсаРегл.Курс);
		СтруктураДополнительныеСвойства.Вставить("КратностьУпр"  , СтруктураКурсаРегл.Кратность);
	КонецЕсли;
	

КонецПроцедуры // ИнициализироватьДополнительныеСвойстваДляПроведения()

// Формирует массив имен регистров, по которым есть движения документа.
//
Функция ПолучитьМассивИменИспользуемыхРегистров(Регистратор, МетаданныеДокумента)
	
	МассивРегистров = Новый Массив;
	ТекстЗапроса = "";
	СчетчикТаблиц = 0;
	СчетчикЦикла = 0;
	ВсегоРегистров = МетаданныеДокумента.Движения.Количество();
	
	Для каждого Движение из МетаданныеДокумента.Движения Цикл
		
		Если СчетчикТаблиц > 0 Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|";
			
		КонецЕсли;
		
		СчетчикТаблиц = СчетчикТаблиц + 1;
		СчетчикЦикла = СчетчикЦикла + 1;
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|""" + Движение.Имя + """ КАК ИмяРегистра
		|
		|ИЗ " + Движение.ПолноеИмя() + "
		|
		|ГДЕ Регистратор = &Регистратор
		|";
		
		Если СчетчикТаблиц = 256 ИЛИ СчетчикЦикла = ВсегоРегистров Тогда
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Регистратор", Регистратор);
			
			ТекстЗапроса  = "";
			СчетчикТаблиц = 0;
			
			Если МассивРегистров.Количество() = 0 Тогда
				
				МассивРегистров = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРегистра");
				
			Иначе
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					МассивРегистров.Добавить(Выборка.ИмяРегистра);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивРегистров;
	
КонецФункции // ПолучитьМассивИменИспользуемыхРегистров()

// Выполняет подготовку наборов записей документа.
//
Процедура ПодготовитьНаборыЗаписейКРегистрацииДвижений(СтруктураОбъект) Экспорт
	
	Для каждого НаборЗаписей из СтруктураОбъект.Движения Цикл
		
		Если ТипЗнч(НаборЗаписей) = Тип("КлючИЗначение") Тогда
			
			НаборЗаписей = НаборЗаписей.Значение;
			
		КонецЕсли;
		
		Если НаборЗаписей.Количество() > 0 Тогда
			
			НаборЗаписей.Очистить();
			
		КонецЕсли;
		
	КонецЦикла;
	
	МассивИменРегистров = ПолучитьМассивИменИспользуемыхРегистров(СтруктураОбъект.Ссылка, 
		СтруктураОбъект.ДополнительныеСвойства.ДляПроведения.МетаданныеДокумента);
	
	Для каждого ИмяРегистра из МассивИменРегистров Цикл
		
		СтруктураОбъект.Движения[ИмяРегистра].Записывать = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

// Записывает наборы записей документа.
//
Процедура ЗаписатьНаборыЗаписей(СтруктураОбъект) Экспорт
	
	Для каждого НаборЗаписей из СтруктураОбъект.Движения Цикл
		
		Если ТипЗнч(НаборЗаписей) = Тип("КлючИЗначение") Тогда
			
			НаборЗаписей = НаборЗаписей.Значение;
			
		КонецЕсли;
		
		Если НаборЗаписей.Записывать Тогда
			
			Если НЕ НаборЗаписей.ДополнительныеСвойства.Свойство("ДляПроведения") Тогда
				
				НаборЗаписей.ДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
				
			КонецЕсли;
			
			Если НЕ НаборЗаписей.ДополнительныеСвойства.ДляПроведения.Свойство("СтруктураВременныеТаблицы") Тогда
				
				НаборЗаписей.ДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы", 
					СтруктураОбъект.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы);
				
			КонецЕсли;
			
			НаборЗаписей.Записать();
			НаборЗаписей.Записывать = Ложь;
			
		Иначе
				
			Если Метаданные.РегистрыНакопления.Содержит(НаборЗаписей.Метаданные()) Тогда
				
				Попытка
					РегистрыНакопления[НаборЗаписей.Метаданные().Имя].СоздатьПустуюВременнуюТаблицуИзменение(
						СтруктураОбъект.ДополнительныеСвойства);
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ РЕГИСТРОВ

// Выполняет движения регистра накопления уатОстаткиГСМнаТС.
//
Процедура ОтразитьОстаткиГСМНаТС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаГСМ = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаГСМ;
	
	Если Отказ ИЛИ ТаблицаГСМ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЗапасы = Движения.уатОстаткиГСМнаТС;
	ДвиженияЗапасы.Записывать = Истина;
	ДвиженияЗапасы.Загрузить(ТаблицаГСМ);
	
КонецПроцедуры

// Выполняет движения регистра накопления уатРасходГСМнаТС.
//
Процедура ОтразитьРасходГСМНаТС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаГСМ = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасходГСМ;
	
	Если Отказ ИЛИ ТаблицаГСМ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЗапасы = Движения.уатРасходГСМнаТС;
	ДвиженияЗапасы.Записывать = Истина;
	ДвиженияЗапасы.Загрузить(ТаблицаГСМ);
	
КонецПроцедуры

// Выполняет движения регистра сведений Счетчики ТС
//
Процедура ОтразитьСчетчикиТС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаСчетчиковТС = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСчетчиковТС;
	
	Если Отказ ИЛИ ТаблицаСчетчиковТС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияСчетчикиТС = Движения.уатСчетчикиТС;
	ДвиженияСчетчикиТС.Записывать = Истина;
	ДвиженияСчетчикиТС.Загрузить(ТаблицаСчетчиковТС);

КонецПроцедуры

// Выполняет движения регистра сведений Состояние ТС
//
Процедура ОтразитьСостояниеТС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаСостоянийТС = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСостоянийТС;
	
	Если Отказ ИЛИ ТаблицаСостоянийТС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияСостояние = Движения.уатСостояниеТС;
	ДвиженияСостояние.Записывать = Истина;
	ДвиженияСостояние.Загрузить(ТаблицаСостоянийТС);

КонецПроцедуры

// Выполняет движения регистра сведений Планирование работы ТС
//
Процедура ОтразитьПланированиеРаботыТС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаПланированияРаботыТС = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПланированияРаботыТС;
	
	Если Отказ ИЛИ ТаблицаПланированияРаботыТС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияНоменклатураТС = Движения.уатПланированиеРаботыТС;
	ДвиженияНоменклатураТС.Записывать = Истина;
	ДвиженияНоменклатураТС.Загрузить(ТаблицаПланированияРаботыТС);

КонецПроцедуры

// Выполняет движения регистра накопления Износ/пробег шин
//
Процедура ОтразитьИзносПробегШин(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаИзносаПробегаШин = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаИзносаПробегаШин;
	
	Если Отказ ИЛИ ТаблицаИзносаПробегаШин.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияИзносаПробегаШин = Движения.уатИзносПробегШин;
	ДвиженияИзносаПробегаШин.Записывать = Истина;
	ДвиженияИзносаПробегаШин.Загрузить(ТаблицаИзносаПробегаШин);

КонецПроцедуры

// Выполняет движения регистра накопления Обороты по отчетам поставщиков ПЦ
//
Процедура ОтразитьОборотыПоОтчетамПоставщиковПЦ(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаОборотыПоОтчетамПоставщиковПЦ = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОборотыПоОтчетамПоставщиковПЦ;
	
	Если Отказ ИЛИ ТаблицаОборотыПоОтчетамПоставщиковПЦ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияОборотыПоОтчетамПоставщиковПЦ = Движения.уатОборотыПоОтчетамПоставщиковПЦ;
	ДвиженияОборотыПоОтчетамПоставщиковПЦ.Записывать = Истина;
	ДвиженияОборотыПоОтчетамПоставщиковПЦ.Загрузить(ТаблицаОборотыПоОтчетамПоставщиковПЦ);

КонецПроцедуры

// Выполняет движения регистра накопления Обороты по заправкам ГСМ
//
Процедура ОтразитьОборотыПоЗаправкамГСМ(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаОборотыПоЗаправкамГСМ = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОборотыПоЗаправкамГСМ;
	
	Если Отказ ИЛИ ТаблицаОборотыПоЗаправкамГСМ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияОборотыПоЗаправкамГСМ = Движения.уатОборотыПоЗаправкамГСМ;
	ДвиженияОборотыПоЗаправкамГСМ.Записывать = Истина;
	ДвиженияОборотыПоЗаправкамГСМ.Загрузить(ТаблицаОборотыПоЗаправкамГСМ);

КонецПроцедуры

// Выполняет движения регистра накопления Выработка по стоимости
//
Процедура ОтразитьВыработкуПоСтоимости(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаВыработкиПоСтоимости = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаВыработкиПоСтоимости;
	
	Если Отказ ИЛИ ТаблицаВыработкиПоСтоимости.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияВыработкаПоСтоимости = Движения.уатВыработкаПоСтоимости;
	ДвиженияВыработкаПоСтоимости.Записывать = Истина;
	ДвиженияВыработкаПоСтоимости.Загрузить(ТаблицаВыработкиПоСтоимости);

КонецПроцедуры

// Выполняет движения регистра сведений Причины закрытия заказов
//
Процедура ОтразитьПричиныЗакрытияЗаказов(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаПричинЗакрытия = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПричинЗакрытия;
	
	Если Отказ ИЛИ ТаблицаПричинЗакрытия.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияУслуги = Движения.уатПричиныОтклоненияЗаказов;
	ДвиженияУслуги.Записывать = Истина;
	ДвиженияУслуги.Загрузить(ТаблицаПричинЗакрытия);
	
КонецПроцедуры

// Выполняет движения регистра накопления Выработка ТС
//
Процедура ОтразитьВыработкуТС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	ТаблицаВыработки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаВыработкиТС;
	
	Если Отказ ИЛИ ТаблицаВыработки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияВыработка = Движения.уатВыработкаТС;
	ДвиженияВыработка.Записывать = Истина;
	ДвиженияВыработка.Загрузить(ТаблицаВыработки);
КонецПроцедуры

// Выполняет движения регистра накопления Выработка сотрудников
//
Процедура ОтразитьВыработкуСотрудников(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаВыработки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаВыработкиСотрудников;
	
	Если Отказ ИЛИ ТаблицаВыработки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияВыработка = Движения.уатВыработкаСотрудников;
	ДвиженияВыработка.Записывать = Истина;
	ДвиженияВыработка.Загрузить(ТаблицаВыработки);

КонецПроцедуры

// Выполняет движения регистра накопления Простои
//
Процедура ОтразитьПростои(ДополнительныеСвойства, Движения, Отказ) Экспорт
	ТаблицаПростои = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПростои;
	
	Если Отказ ИЛИ ТаблицаПростои.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПростои = Движения.уатПростои;
	ДвиженияПростои.Записывать = Истина;
	ДвиженияПростои.Загрузить(ТаблицаПростои);
КонецПроцедуры

// Выполняет движения регистра накопления РасходТехническихЖидкостей.
//
Процедура ОтразитьРасходТЖ(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаРасходТЖ = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасходТЖ;
	
	Если Отказ ИЛИ ТаблицаРасходТЖ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЗапасы = Движения.уатРасходТехническихЖидкостей;
	ДвиженияЗапасы.Записывать = Истина;
	ДвиженияЗапасы.Загрузить(ТаблицаРасходТЖ);
	
КонецПроцедуры

// Выполняет движения регистра накопления Заявки на ремонт
//
Процедура ОтразитьЗаказыГрузоотправителей(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДвижений = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗаказовГрузоотправителя;
	
	Если Отказ ИЛИ ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЗаявки = Движения.уатЗаказыГрузоотправителей;
	ДвиженияЗаявки.Записывать = Истина;
	ДвиженияЗаявки.Загрузить(ТаблицаДвижений);

КонецПроцедуры

// Выполняет движения регистра накопления Запасы.
//
Процедура ОтразитьПартииТЖ(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаПартииТЖ = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПартииТЖ;
	
	Если Отказ
	 ИЛИ ТаблицаПартииТЖ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЗапасы = Движения.уатОстаткиТЖнаТС;
	ДвиженияЗапасы.Записывать = Истина;
	ДвиженияЗапасы.Загрузить(ТаблицаПартииТЖ);
	
КонецПроцедуры

// Выполняет движения регистра накопления Рабочее время сотрудников
//
Процедура ОтразитьРабочееВремяРаботниковОрганизаций(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаРабочегоВремени = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРабочегоВремени;
	
	Если Отказ ИЛИ ТаблицаРабочегоВремени.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияРабочееВремя = Движения.уатРабочееВремяСотрудников;
	ДвиженияРабочееВремя.Записывать = Истина;
	ДвиженияРабочееВремя.Загрузить(ТаблицаРабочегоВремени);

КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ТАБЛИЦ ДАННЫХ ДЛЯ ВЫПОЛНЕНИЯ ДВИЖЕНЕЙ

// Выполняет движения регистра накопления выработка агрегатов
//
Процедура ОтразитьВыработкуАгрегатов(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаВыработкиАгрегатов = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПараметровВыработкиАгрегатов;
	
	Если Отказ ИЛИ ТаблицаВыработкиАгрегатов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияВыработкиАгрегатов = Движения.уатВыработкаАгрегатов;
	ДвиженияВыработкиАгрегатов.Записывать = Истина;
	ДвиженияВыработкиАгрегатов.Загрузить(ТаблицаВыработкиАгрегатов);

КонецПроцедуры
