//==================================================================================
// НАЧАЛО ВЫБОРА

// Процедура выполняет стандартные действия при начале выбора договора контрагента в формах документов.
//
// Параметры:
//  ДокументОбъект - объект редактируемого документа;
//  ФормаДокумента - форма редактируемого документа;
//  ЭлементФормы - элемент формы документа, который надо заполнить; 
//  Контрагент  - ссылка на справочник, определяет контрагента по договору;
//  ДоговорКонтрагента - ссылка на справочник, определяет договор контрагента;
//  ВидДоговораВзаиморасчетов - вид договора взаиморасчетов для отбора, значение 
//                перечисления ВидыДоговоровКонтрагентов;
//  СтандартнаяОбработка - булево, признак выполнения стандартной (системной) обработки события,
//  СтруктураДополнительныхПараметров - структура, содержит дополнительные значения отбора, необязательный,
//                ключ - имя отбора, значение - структура, определяющая отбор с ключами:
//                ЗначениеОтбора (если не задан, то отбор не устанавливается), 
//                ВидСравненияОтбора (если не задан, то ВидСравнения.Равно), 
//                ДоступностьОтбора (если не задан, то Ложь).
//
Процедура уатНачалоВыбораЗначенияДоговораКонтрагента(ДокументОбъект, ФормаДокумента, ЭлементФормы, Контрагент, ДоговорКонтрагента,
	ВидыДоговораВзаиморасчетов, СтандартнаяОбработка,
	СтруктураДополнительныхПараметров = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
	// значение было присвоено стандартно.
	ПараметрыФормы = Новый Структура("ТекущаяСтрока", ДоговорКонтрагента);
	
	ФормаВыбора = ПолучитьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора",ПараметрыФормы, ЭлементФормы);
	
	ЭлементОтбора                  = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Контрагент");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = Контрагент;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	
	Если ВидыДоговораВзаиморасчетов<>Неопределено Тогда
		
		// Оставим в выборе только "правильные" договоры
		ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("ТипДоговора", "ДоговорыКонтрагентов") Тогда
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипДоговора");
		Иначе
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидДоговора");
		КонецЕсли;
		
		Если ТипЗнч(ВидыДоговораВзаиморасчетов) = Тип("СписокЗначений") Тогда
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		Иначе
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		ЭлементОтбора.ПравоеЗначение   = ВидыДоговораВзаиморасчетов;
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементОтбора.Использование    = Истина;
		
	КонецЕсли;
	
	// Еще надо фильтровать по организации, если она заполнена
	Если уатОбщегоНазначенияТиповыеСервер.уатЕстьРеквизитДокумента("Организация", ДокументОбъект) И ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		ЗначениеОрганизации = ДокументОбъект.Организация;
		
		// Для Бухгалтерии КОРП
		Если уатОбщегоНазначенияТиповыеСервер.ЕстьДокументАвизоМПЗВходящее() И ЗначениеЗаполнено(ДокументОбъект.Организация.ГоловнаяОрганизация) Тогда
			ЗначениеОрганизации = ДокументОбъект.Организация.ГоловнаяОрганизация;
		КонецЕсли;
		
		ЭлементОтбора                  = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Организация");
		ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение   = ЗначениеОрганизации;
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементОтбора.Использование    = Истина;
		
	КонецЕсли;
	
	// Добавим фильтры по дополнительным параметрам отбора
	Если ТипЗнч(СтруктураДополнительныхПараметров) = Тип("Структура") Тогда
		Для каждого ЭлементСтруктуры Из СтруктураДополнительныхПараметров Цикл
			
			СтруктураОтбора = ЭлементСтруктуры.Значение;
			
			ЗначениеОтбора     = Неопределено;
			ВидСравненияОтбора = Неопределено;
			ДоступностьОтбора  = Неопределено;
			
			Если СтруктураОтбора.Свойство("ЗначениеОтбора", ЗначениеОтбора) Тогда
				
				ЭлементОтбора               = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЭлементСтруктуры.Ключ);
				
				Если СтруктураОтбора.Свойство("ВидСравненияОтбора", ВидСравненияОтбора) Тогда
					ЭлементОтбора.ВидСравнения = ВидСравненияОтбора;
				Иначе
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
				
				ЭлементОтбора.ПравоеЗначение = ЗначениеОтбора;
				ЭлементОтбора.Использование  = Истина;
				
				Если СтруктураОтбора.Свойство("ДоступностьОтбора", ДоступностьОтбора) Тогда
					ЭлементОтбора.РежимОтображения = ДоступностьОтбора;
				Иначе
					ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры // НачалоВыбораЗначенияДоговораКонтрагента()

// Процедура выполняет общие действия при изменении даты документа
//
// Параметры:
//  ДокументОбъект                 - объект редактируемого документа
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  ФлагИзмененияКурса             - валюта регламентированного учета
//
Процедура уатПриИзмененииЗначенияДатыДокумента(ДокументОбъект, ВалютаРегламентированногоУчета, ФлагИзмененияКурса = Неопределено, Форма, ИмяОбработчикаОповещения) Экспорт
	
	ЕстьВалютаДокумента            = уатОбщегоНазначенияТиповыеСервер.уатЕстьРеквизитДокумента("ВалютаДокумента",    ДокументОбъект);
	ЕстьДоговорКонтрагента         = уатОбщегоНазначенияТиповыеСервер.уатЕстьРеквизитДокумента("ДоговорКонтрагента", ДокументОбъект);
	ПроверкаПоВалютеВзаиморасчетов = Ложь;
	ФлагИзмененияКурса             = Ложь;
	
	// В некоторых документах нет валюты документа и договора.
	Если ЕстьВалютаДокумента Тогда
		Если ЕстьДоговорКонтрагента Тогда
			Договор = ДокументОбъект.ДоговорКонтрагента;
			
			Если НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(Договор) Тогда
				Валюта = уатОбщегоНазначенияТиповыеСервер.ПолучитьВалютуВзаиморасчетовИзДоговора(Договор);
				ПроверкаПоВалютеВзаиморасчетов = Истина;
			Иначе
				Возврат;
			КонецЕсли;
		Иначе
			Валюта = ДокументОбъект.ВалютаДокумента;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	СтруктураНовогоКурсаВалюты  = уатОбщегоНазначенияТиповыеСервер.ПолучитьКурсВалюты(Валюта, ДокументОбъект.Дата);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("НовыйКурс", СтруктураНовогоКурсаВалюты.Курс);
	ДопПараметры.Вставить("НоваяКратность", СтруктураНовогоКурсаВалюты.Кратность);
	ДопПараметры.Вставить("ЕстьКурсДокумента", уатОбщегоНазначенияТиповыеСервер.уатЕстьРеквизитДокумента("КурсДокумента", ДокументОбъект));
	ДопПараметры.Вставить("ЕстьКратностьДокумента", уатОбщегоНазначенияТиповыеСервер.уатЕстьРеквизитДокумента("КратностьДокумента", ДокументОбъект));
	ДопПараметры.Вставить("ЕстьКурсВзаиморасчетов", уатОбщегоНазначенияТиповыеСервер.уатЕстьРеквизитДокумента("КурсВзаиморасчетов", ДокументОбъект));
	ДопПараметры.Вставить("ЕстьКратностьВзаиморасчетов", уатОбщегоНазначенияТиповыеСервер.уатЕстьРеквизитДокумента("КратностьВзаиморасчетов", ДокументОбъект));
	
	// В некоторых документах курс и кратность документа отсутствуют
	Если ПроверкаПоВалютеВзаиморасчетов И ДопПараметры.ЕстьКурсВзаиморасчетов И ДопПараметры.ЕстьКратностьВзаиморасчетов Тогда
		ДопПараметры.Вставить("СтарыйКурс", ДокументОбъект.КурсВзаиморасчетов);
		ДопПараметры.Вставить("СтараяКратность", ДокументОбъект.КратностьВзаиморасчетов);
		
	ИначеЕсли НЕ ПроверкаПоВалютеВзаиморасчетов И ДопПараметры.ЕстьКурсДокумента И ДопПараметры.ЕстьКратностьДокумента Тогда
		ДопПараметры.Вставить("СтарыйКурс", ДокументОбъект.КурсДокумента);
		ДопПараметры.Вставить("СтараяКратность", ДокументОбъект.КратностьДокумента);
		
	Иначе
		Возврат;
		
	КонецЕсли;
	
	// Если курс и кратность не изменились, то выход.
	Если ДопПараметры.НовыйКурс = ДопПараметры.СтарыйКурс И ДопПараметры.НоваяКратность = ДопПараметры.СтараяКратность Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВалюты     = ?(ПроверкаПоВалютеВзаиморасчетов, "взаиморасчетов ", "документа ");
	ТекстНовыйКурс  = СокрЛП(уатОбщегоНазначенияТиповые.ПолучитьИнформациюКурсаВалютыСтрокой(Валюта, ДопПараметры.НовыйКурс,  ДопПараметры.НоваяКратность,  ВалютаРегламентированногоУчета, Истина));
	ТекстСтарыйКурс = СокрЛП(уатОбщегоНазначенияТиповые.ПолучитьИнформациюКурсаВалютыСтрокой(Валюта, ДопПараметры.СтарыйКурс, ДопПараметры.СтараяКратность, ВалютаРегламентированногоУчета, Истина));
	ТекстВопроса    = "На дату документа у валюты "  + ТекстВалюты+ ТекстСтарыйКурс + " был задан другой курс."
		+ Символы.ПС + "Установить курс " + ТекстВалюты+ ТекстНовыйКурс + " в соответствии с курсом валюты?";
	
	ОписОповещения = Новый ОписаниеОповещения(ИмяОбработчикаОповещения, Форма, ДопПараметры);
	ПоказатьВопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	
КонецПроцедуры

// Обработчик события НачалоВыбора поля формы контактной информации.
// Вызывается из подключаемых действий при внедрении подсистемы "Контактная информация"
//
// Параметры:
//     Форма                - УправляемаяФорма - Форма владельца контактной информации
//     Элемент              - ПолеФормы        - Элемент формы, содержащий представление контактной информации
//     Модифицированность   - Булево           - Устанавливаемый флаг модифицированности формы
//     СтандартнаяОбработка - Булево           - Устанавливаемый флаг стандартной обработки события формы
//
// Возвращаемое значение:
//     Неопределено
//
Процедура ПредставлениеНачалоВыбораПунктаНазначения(Форма, Элемент, Модифицированность = Истина, СтандартнаяОбработка = Ложь) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяРеквизита", Элемент.Имя);
	
	ЭтоТабличнаяЧасть = Ложь;
	
	Если ЭтоТабличнаяЧасть Тогда
		ДанныеЗаполнения = Форма.Элементы[Форма.ТекущийЭлемент.Имя].ТекущиеДанные;
		Если ДанныеЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ДанныеЗаполнения = Форма.Объект;
	КонецЕсли;
	
	ДанныеСтроки = Новый Структура;
	
	ДанныеСтроки.Вставить("Вид",ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента"));
	ДанныеСтроки.Вставить("ЗначенияПолей",Форма.ЗначенияПолей);
	ДанныеСтроки.Вставить("Комментарий","");
	ДанныеСтроки.Вставить("Представление",элемент.ТекстРедактирования);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", ДанныеСтроки.Вид);
	ПараметрыОткрытия.Вставить("ЗначенияПолей", ДанныеСтроки.ЗначенияПолей);
	ПараметрыОткрытия.Вставить("Представление", Элемент.ТекстРедактирования);
	
	Если Не ЭтоТабличнаяЧасть Тогда
		ПараметрыОткрытия.Вставить("Комментарий", ДанныеСтроки.Комментарий);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПредставлениеНачалоВыбораЗавершениеПунктаНазначения", ЭтотОбъект, Новый Структура);
	Оповещение.ДополнительныеПараметры.Вставить("ДанныеЗаполнения",  ДанныеЗаполнения);
	Оповещение.ДополнительныеПараметры.Вставить("ЭтоТабличнаяЧасть", ЭтоТабличнаяЧасть);
	Оповещение.ДополнительныеПараметры.Вставить("ДанныеСтроки",      ДанныеСтроки);
	Оповещение.ДополнительныеПараметры.Вставить("Элемент",           Элемент);
	Оповещение.ДополнительныеПараметры.Вставить("Результат",         Результат);
	Оповещение.ДополнительныеПараметры.Вставить("Форма",             Форма);
	
	Если уатОбщегоНазначенияТиповыеСервер.ПолучитьВерсиюБСП() = "2.2.3.38" Тогда 
		УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, , , , Оповещение);
	Иначе 
		УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, , Оповещение);
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

// Завершение немодальных диалогов
Процедура ПредставлениеНачалоВыбораЗавершениеПунктаНазначения(Знач РезультатЗакрытия, Знач ДополнительныеПараметры) Экспорт
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = ДополнительныеПараметры.ДанныеЗаполнения;
	ДанныеСтроки     = ДополнительныеПараметры.ДанныеСтроки;
	Результат        = ДополнительныеПараметры.Результат;
	Элемент          = ДополнительныеПараметры.Элемент;
	Форма            = ДополнительныеПараметры.Форма;
	
	ТекстПредставления = РезультатЗакрытия.Представление;
	
	Если ДополнительныеПараметры.ЭтоТабличнаяЧасть Тогда
		ДанныеЗаполнения[Элемент.Имя + "ЗначенияПолей"] = РезультатЗакрытия.КонтактнаяИнформация;
		
	Иначе
		Если ПустаяСтрока(ДанныеСтроки.Комментарий) И Не ПустаяСтрока(РезультатЗакрытия.Комментарий) Тогда
			Результат.Вставить("ЭтоДобавлениеКомментария", Истина);
			
		ИначеЕсли Не ПустаяСтрока(ДанныеСтроки.Комментарий) И ПустаяСтрока(РезультатЗакрытия.Комментарий) Тогда
			Результат.Вставить("ЭтоДобавлениеКомментария", Ложь);
			
		Иначе
			Если Не ПустаяСтрока(ДанныеСтроки.Комментарий) Тогда
				Форма.Элементы["Комментарий" + Элемент.Имя].Заголовок = РезультатЗакрытия.Комментарий;
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеСтроки.Представление = ТекстПредставления;
		ДанныеСтроки.ЗначенияПолей = РезультатЗакрытия.КонтактнаяИнформация;
		ДанныеСтроки.Комментарий   = РезультатЗакрытия.Комментарий;
	КонецЕсли;
	
	ДанныеЗаполнения[Элемент.Имя] = ТекстПредставления;
	Форма.ЗначенияПолей = РезультатЗакрытия.КонтактнаяИнформация;
	Форма.Модифицированность = Истина;
КонецПроцедуры


//==================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ОФОРМЛЕНИЯ ФОРМЫ

// Формирует и устанавливает текст заголовка формы документа
//
// Параметры:
//  СтрокаВидаОперации - строка вида операции документа, 
//  ДокументОбъект     - объект документа, 
//  ФормаДокумента     - форма документа.
//
Процедура уатУстановитьЗаголовокФормыДокумента(СтрокаВидаОперации = "", ДокументОбъект, ФормаДокумента) Экспорт
	
	ФормаДокумента.АвтоЗаголовок = Ложь; // заголовок будем писать сами
	
	Если ПустаяСтрока(СтрокаВидаОперации) Тогда
		Заголовок = уатОбщегоНазначенияТиповыеСервер.МетаданныеОбъекта(ДокументОбъект, "Синоним") + ": ";
	Иначе
		Заголовок = уатОбщегоНазначенияТиповыеСервер.МетаданныеОбъекта(ДокументОбъект, "Синоним") + ": " + СтрокаВидаОперации + ". ";
	КонецЕсли;
	
	Если уатОбщегоНазначенияТиповыеСервер.ЭтоНовыйДокумент(ДокументОбъект) Тогда  
		Заголовок = Заголовок + "Новый";
	Иначе
		Если уатОбщегоНазначенияТиповыеСервер.ДокументПроведен(ДокументОбъект) Тогда
			Заголовок = Заголовок + "Проведен";
		ИначеЕсли уатОбщегоНазначенияТиповыеСервер.РазрешеноПроведениеДокумента(ДокументОбъект) Тогда
			Заголовок = Заголовок + "Не проведен";
		Иначе
			Заголовок = Заголовок + "Записан";
		КонецЕсли;
	КонецЕсли;
	
	ФормаДокумента.Заголовок = Заголовок;
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

//==================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ПЕЧАТИ

// Выводит на печать подготовленный макет 
//
// Параметры:
//  ПечДокумент           - ТабличныйДокумент, макет на печать,
//  КоличествоЭкземпляров - Число, количество экземпляров на печать,
//  НаПринтер             - Булево, Если истина, то выводим сразу на принтер.
//  Заголовок             - Заголовок окна табличного документа
//
Процедура уатНапечататьДокумент(ПечДокумент, КоличествоЭкземпляров = 1, НаПринтер = Ложь, Заголовок = "", Права = Неопределено) Экспорт
	
	Если ПечДокумент = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	// Получить необходимое количество копий
	Если КоличествоЭкземпляров < 1 Тогда
		ПечДокумент.КоличествоЭкземпляров = 1;
	Иначе
		ПечДокумент.КоличествоЭкземпляров = КоличествоЭкземпляров;
	КонецЕсли;
	
	Если НЕ ПечДокумент.АвтоМасштаб
		И уатОбщегоНазначения.уатЗначениеНеЗаполнено(ПечДокумент.ИмяПринтера) Тогда
		ПечДокумент.АвтоМасштаб = Истина;
	КонецЕсли;
	
	Если НаПринтер Тогда
		
		ПечДокумент.Напечатать();
		
	Иначе
		
		// Отобразить печатный документ на экране
		ПечДокумент.ОтображатьЗаголовки = Ложь;
		ПечДокумент.ОтображатьСетку     = Ложь;
		ПечДокумент.Показать(Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // НапечататьДокумент()

// Функция по виду сравнения возвращает текстовый параметр для запроса.
// 
// Параметры
//  ВидСравнения - Вид сравнения, для которого получается представление
// 
// Печатает документ полученный по нажатию кнопки в форме списка
//
// Параметры
//  Документ - документ,который нужно отпечатать
//
Процедура уатНапечататьДокументИзФормыСписка(Документ, КоличествоЭкземпляров = 1) Экспорт
	
	Если Документ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		СоответствиеМакетов = Документ.ПолучитьСписокПечатныхФорм();
	Исключение
		ПоказатьПредупреждение(Неопределено, "Документ не имеет печатных форм!");
		Возврат;
	КонецПопытки;
	
	НазваниеМакета = уатПолучитьПечатнуюФормуПоУмолчанию(уатОбщегоНазначенияТиповыеСервер.МетаданныеОбъекта(Документ, "Имя"), СоответствиеМакетов);
	Попытка
		Документ.Печать(НазваниеМакета, КоличествоЭкземпляров);
	Исключение
		Документ.Печать(НазваниеМакета);
	КонецПопытки ;
КонецПроцедуры // НапечататьДокументИзФормыСписка()

// Получает из текущих настроек пользователя имя кнопки печати,
// которая определяет макет печатной формы по умолчанию.
// Если не найдено, то берется первый макет в структуре макетов печатных форм,
// и сохраняется в настройках пользователя.
//
// Параметры: 
//  ИмяОбъекта          - строка, содержащая имя объекта, для которого ищется макет печатной формы
//  СоответствиеМакетов - соответствие, содержащее названия (ключ) и имена (значение) 
//                        макетов печатных форм документа
//
Функция уатПолучитьПечатнуюФормуПоУмолчанию(ИмяОбъекта, СписокМакетов) Экспорт
	
	Перем НазваниеМакета;
	
	МакетПоУмолчанию = уатОбщегоНазначенияТиповыеСервер.ПолучитьМакетПоУмолчанию(ИмяОбъекта);
	                       
	Если ТипЗнч(СписокМакетов) = Тип("Соответствие") Тогда
		
		// Пытаемся найти форму в соответствии
		ИмяМакета = СписокМакетов[МакетПоУмолчанию];
		
		Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ИмяМакета) Тогда
			
			// Текущая печатная форма еще не найдена
			// Установим по умолчанию первую из списка
			Для Каждого Элемент Из СписокМакетов Цикл
				МакетПоУмолчанию = Элемент.Ключ;
				Прервать;
			КонецЦикла; 
			уатСохранитьТекущуюКнопкуПечати(ИмяОбъекта, МакетПоУмолчанию);
		КонецЕсли;
	ИначеЕсли ТипЗнч(СписокМакетов) = Тип("СписокЗначений") Тогда
		
		Если ТипЗнч(МакетПоУмолчанию) = Тип("Строка") Тогда
			СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
			Для Каждого СтрокаМакетаВСписке Из СписокМакетов Цикл
				Если СтрокаМакетаВСписке.Представление = МакетПоУмолчанию Тогда
					СтруктураМакета.Макет               = СтрокаМакетаВСписке.Значение;
					СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли МакетПоУмолчанию = Неопределено Тогда
			СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
		Иначе
			СтруктураМакета = МакетПоУмолчанию;
		КонецЕсли;
		
		Если СтруктураМакета.Макет = Неопределено Тогда
			Если СписокМакетов.Количество() <> 0 Тогда
				СтрокаМакетаВСписке = СписокМакетов[0];
				СтруктураМакета.Макет = СтрокаМакетаВСписке.Значение;
				СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		МакетПоУмолчанию = СтруктураМакета.Макет;
		уатСохранитьТекущуюКнопкуПечати(ИмяОбъекта, СтруктураМакета);
		
	КонецЕсли;
	
	Возврат МакетПоУмолчанию;
	
	
КонецФункции // ПолучитьПечатнуюФормуПоУмолчанию()

// В зависимости от настроек текущего пользователя выводит для ДокументаОбъекта 
// печатную форму по умолчанию на экран или на принтер.
//
// Параметры:
//  ДокументОбъект - печатаемый документ.
//  НазваниеМакета - строка, определяет название текущего макета печатной формы,
//                   которое совпадает с текстом на кнопке печати в диалоге.
//  ФормаДокумента - форма печатаемого документа.
//
Функция уатНапечататьДокументПоУмолчанию(ДокументОбъект, Пользователь = Неопределено, НазваниеМакета = "", ФормаДокумента = Неопределено, НаПринтер = Ложь) Экспорт
	
	Попытка
		СоответствиеМакетов = ДокументОбъект.ПолучитьСписокПечатныхФорм();
	Исключение
		//Предупреждение("Документ не имеет печатных форм!");
		Возврат Ложь;
	КонецПопытки;
	
	ЭтоДокумент = уатОбщегоНазначенияТиповыеСервер.ЭтоДокумент(ДокументОбъект);

	Если ЭтоДокумент И уатОбщегоНазначенияТиповыеСервер.РазрешеноПроведениеДокумента(ДокументОбъект)
		И (НЕ уатПраваИНастройки.уатПраво("ПечатьНепроведенных")) Тогда
		
		Сообщить("Недостаточно полномочий для печати непроведенного документа!"); 
		Возврат Ложь;
	КонецЕсли;
			
	Если НазваниеМакета = "" Тогда
		НазваниеМакета = уатПолучитьПечатнуюФормуПоУмолчанию(уатОбщегоНазначенияТиповыеСервер.МетаданныеОбъекта(ДокументОбъект, "Имя"), СоответствиеМакетов);
	КонецЕсли;
	
	Если Пользователь = Неопределено Тогда
		//griale ждем правку общего модуля
		//Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	Если ФормаДокумента = Неопределено Тогда
		Если уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ПечатьДокументовБезПредварительногоПросмотра") Тогда
			ДокументОбъект.Печать(НазваниеМакета, , Истина);
		Иначе
			ДокументОбъект.Печать(НазваниеМакета);
		КонецЕсли;
	Иначе
		Если уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ПечатьДокументовБезПредварительногоПросмотра") Тогда
			ДокументОбъект.Печать(НазваниеМакета, , Истина, ФормаДокумента);
		Иначе
			ДокументОбъект.Печать(НазваниеМакета, , , ФормаДокумента);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции // НапечататьДокументПоУмолчанию()

// Сохраняет в настройках пользователя имя кнопки печати,
// которая определяет макет печатной формы по умолчанию.
//
// Параметры:
//  ИмяОбъекта     - строка, содержащая имя объекта, для которого ищется макет печатной формы
//  НазваниеМакета - строка, определяет название текущего макета печатной формы,
//                   которое совпадает с текстом на кнопке печати в диалоге.
//
Процедура уатСохранитьТекущуюКнопкуПечати(ИмяОбъекта, НазваниеМакета) Экспорт
	
	уатОбщегоНазначенияТиповыеСервер.СохранитьТекущуюКнопкуПечатиНаСервере(ИмяОбъекта, НазваниеМакета);
	
КонецПроцедуры // СохранитьТекущуюКнопкуПечати()

// Функция возвращает признак защищать таблицу от редактирования или нет.
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  Истина - если таблицу необходимо защитить от редактирования, иначе Ложь.
//
Функция уатЗащитаТаблиц() Экспорт
	Возврат Ложь;
КонецФункции // ЗащитаТаблиц()


//==================================================================================
// ПРОЦЕДУРЫ и ФУНКЦИИ ИНФОРМИРОВАНИЯ ПОЛЬЗОВАТЕЛЯ

// Проверяет модифицированность документа перед печатью, и если необходимо 
// записывает его
// 
// Параметры
//  Документ - (ДокументОбъект.*) - проверяемый документ
//
Функция ПроверитьМодифицированность(Документ) Экспорт

	Результат = Ложь;

	Если уатОбщегоНазначенияТиповыеСервер.ДокументМодифицирован(Документ) Тогда

		Проведен    = уатОбщегоНазначенияТиповыеСервер.ЭтоДокумент(Документ) И 
		              уатОбщегоНазначенияТиповыеСервер.ДокументПроведен(Документ);
		СтрПроведен = ?(Проведен, " и провести","");
		Ответ = Истина;
		//Ответ = Вопрос("Документ изменен. Для печати его необходимо записать"+ СтрПроведен +".
		//               |Записать" + СтрПроведен + "?",
		//               РежимДиалогаВопрос.ОКОтмена, , 
		//               КодВозвратаДиалога.Отмена,
		//               "Документ изменен");

		Если Ответ Тогда

			Если Проведен Тогда

				ДатаДока = НачалоДня(Документ.Дата);
				ДатаДня  = НачалоДня(ТекущаяДата());

				Попытка
					
					Если ДатаДока = ДатаДня И уатОбщегоНазначенияТиповыеСервер.РазрешеноОперативноеПроведениеДокумента(Документ) Тогда
						уатОбщегоНазначенияТиповыеСервер.ЗаписатьДокумент(Документ, РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
					Иначе
						уатОбщегоНазначенияТиповыеСервер.ЗаписатьДокумент(Документ, РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
					КонецЕсли;

				Исключение

					//Предупреждение("Операция не выполнена!");
					Возврат Результат = Истина;

				КонецПопытки;

			Иначе
				уатОбщегоНазначенияТиповыеСервер.ЗаписатьДокумент(Документ);
			КонецЕсли;

			Результат = Истина;

		КонецЕсли;

	Иначе
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПроверитьМодифицированность()

//==================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБРАБОТКИ ПОДБОРА

// Универсальная процедура, которая инициирует механизм подбора
// номенклатуры в документы (открывает основную форму обработки подбор).
//
// Параметры:
//  ФормаДокумента - форма документа, в который осуществляется подбор,
//  СтруктураПараметров - параметры, которые передаются в форму подбора.
//
Процедура уатОткрытьПодборНоменклатуры(ФормаДокумента, СтруктураПараметров, УникальныйИдентификатор) Экспорт
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументЗакупки.Форма.Форма", СтруктураПараметров, ФормаДокумента, УникальныйИдентификатор);
	
КонецПроцедуры // уатОткрытьПодборНоменклатуры()

// Универсальная процедура, которая инициирует механизм подбора
// агрегатов в документы (открывает основную форму обработки подбор).
//
// Параметры:
//  ФормаДокумента - форма документа, в который осуществляется подбор,
//  СтруктураПараметров - параметры, которые передаются в форму подбора.
//
Процедура уатОткрытьПодборАгрегатов(ФормаДокумента, СтруктураПараметров, ФормаПодбора = Неопределено) Экспорт
	
	
		СтруктураПараметров.Вставить("ЗакрыватьПриВыборе", Ложь);
	
		
		
		ОткрытьФорму("ОбщаяФорма.уатФормаПодбораАгрегатов", СтруктураПараметров, ФормаДокумента,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
		
КонецПроцедуры // ОбработкаТабличныхЧастей.ОткрытьПодборАгрегатов()


// Процедура, которая обновляет параметры подбора номенклатуры и
// инициирует обновление формы подбора, если она открыта
//
// Параметры:
//  ДокументОбъект           - объект документа, в котором производится подбор.
//  ФормаПодбораНоменклатуры - форма подбора номенклатуры,
//  ПолноеИмяРеквизита       - полное имя реквизита, который изменился.
//
Процедура уатОбновитьПараметрыИФормуПодбора(ДокументОбъект, ФормаПодбораНоменклатуры, ПолноеИмяРеквизита) Экспорт
	
	Если ФормаПодбораНоменклатуры.Открыта() Тогда
		
		ИмяРеквизита = СтрЗаменить(ПолноеИмяРеквизита, "ДокументОбъект.", "");
		
		Если ФормаПодбораНоменклатуры.ОбработкаОбъект.СтруктураИсходныхПараметров.Свойство(ИмяРеквизита) Тогда
			
			ФормаПодбораНоменклатуры.ОбработкаОбъект.СтруктураИсходныхПараметров.Вставить(ИмяРеквизита, ДокументОбъект[ИмяРеквизита]);
			
			Родитель = ФормаПодбораНоменклатуры.ЭлементыФормы.ДеревоНоменклатуры.ТекущаяСтрока;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // уатОбновитьПараметрыИФормуПодбора

//==================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Заполняет список пунктов подменю выбора печатных форм значениями переданного соответствия.
// Всем кнопкам назначается одно переданное действие.
//
// Параметры:
//  ЭлементМеню            - кнопка командной панели формы, соответствующая подменю выбора печатных форм, 
//                           которое надо заполнить, 
//  СоответствиеМакетов    - соответствие, содержащее список макетов печатных форм 
//                           объекта для заполнения пунктов подменю, 
//  ОбъектОбработкиВыбора  - действие, которое надо выполнить при выборе любого пункта подменю.
//
Процедура уатУстановитьПодменюВыбораПечатнойФормы(ЭлементМеню, СписокМакетов, ОбъектОбработкиВыбора) Экспорт
	//griale ненашел использования
	//Если ТипЗнч(СписокМакетов) = Тип("Соответствие") Тогда
	//	Для Каждого ЭлементЗаполнения Из СписокМакетов Цикл
	//		ЭлементМеню.Кнопки.Добавить(ЭлементЗаполнения.Значение, ТипКнопкиКоманднойПанели.Действие, 
	//		ЭлементЗаполнения.Ключ, ОбъектОбработкиВыбора);
	//	КонецЦикла;
	//ИначеЕсли ТипЗнч(СписокМакетов) = Тип("СписокЗначений") Тогда
	//	Для Каждого СтрокаМакетаВСписке Из СписокМакетов Цикл
	//		Если СтрокаМакетаВСписке.Значение = Неопределено Тогда
	//			ЭлементМеню.Кнопки.Добавить(, ТипКнопкиКоманднойПанели.Разделитель);
	//		Иначе
	//			Если ТипЗнч(СтрокаМакетаВСписке.Значение) = Тип("Строка") Тогда
	//				ЭлементМеню.Кнопки.Добавить(СтрокаМакетаВСписке.Значение, ТипКнопкиКоманднойПанели.Действие, 
	//				СтрокаМакетаВСписке.Представление, ОбъектОбработкиВыбора); 
	//			Иначе
	//				ЭлементМеню.Кнопки.Добавить(СтрЗаменить(СтрокаМакетаВСписке.Значение.УникальныйИдентификатор(), "-", "_"), ТипКнопкиКоманднойПанели.Действие, 
	//				СтрокаМакетаВСписке.Представление, ОбъектОбработкиВыбора); 
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	
КонецПроцедуры // уатУстановитьПодменюВыбораПечатнойФормы()

// Получает из текущих настроек пользователя имя кнопки печати,
// которая определяет макет печатной формы по умолчанию.
// Если не найдено, то берется первый макет в структуре макетов печатных форм,
// и сохраняется в настройках пользователя.
//
// Параметры: 
//  ИмяОбъекта          - строка, содержащая имя объекта, для которого ищется макет печатной формы
//  ФормаДиалога        - форма редактируемого объекта,
//  СоответствиеМакетов - соответствие, содержащее названия (ключ) и имена (значение) 
//                        макетов печатных форм документа
//
Процедура уатУстановитьКнопкуПечати(ИмяОбъекта, ФормаДиалога, СписокМакетов, МакетФормыПоУмолчанию = Неопределено) Экспорт
	//griale ненашел использования
	//Перем НазваниеМакета;
	//
	//МакетПоУмолчанию = ВосстановитьЗначение(ИмяОбъекта + "МакетПечати");
	//
	//Если ТипЗнч(СписокМакетов) = Тип("Соответствие") Тогда
	//	// Пытаемся найти форму в соответствии
	//	ИмяМакета = СписокМакетов[МакетПоУмолчанию];
	//	
	//	Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ИмяМакета) Тогда
	//		
	//		// Текущая печатная форма еще не найдена
	//		// Установим по умолчанию первую из списка
	//		Для Каждого Элемент Из СписокМакетов Цикл
	//			МакетПоУмолчанию = Элемент.Ключ;
	//			Прервать;
	//		КонецЦикла; 
	//		уатСохранитьТекущуюКнопкуПечати(ИмяОбъекта, МакетПоУмолчанию);
	//	КонецЕсли;
	//ИначеЕсли ТипЗнч(СписокМакетов) = Тип("СписокЗначений") Тогда
	//	
	//	Если ТипЗнч(МакетПоУмолчанию) = Тип("Строка") Тогда
	//		СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
	//		Для Каждого СтрокаМакетаВСписке Из СписокМакетов Цикл
	//			Если СтрокаМакетаВСписке.Представление = МакетПоУмолчанию Тогда
	//				СтруктураМакета.Макет               =  СтрокаМакетаВСписке.Значение;
	//				СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;
	//				Прервать;
	//			КонецЕсли;
	//		КонецЦикла;
	//	ИначеЕсли ТипЗнч(МакетПоУмолчанию) = Тип("Структура") Тогда
	//		ЕстьВСписке = СписокМакетов.НайтиПоЗначению(МакетПоУмолчанию.Макет)<>Неопределено;
	//		Если ЕстьВСписке Тогда
	//			СтруктураМакета = МакетПоУмолчанию;
	//		Иначе
	//			СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
	//		КонецЕсли;
	//	Иначе
	//		СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
	//	КонецЕсли;
	//	
	//	Если СтруктураМакета.Макет = Неопределено И СписокМакетов.Количество() > 0 Тогда			
	//		СтрокаМакетаВСписке = СписокМакетов[0];
	//		СтруктураМакета.Макет = СтрокаМакетаВСписке.Значение;
	//		СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;
	//	КонецЕсли;
	//	
	//	уатСохранитьТекущуюКнопкуПечати(ИмяОбъекта, СтруктураМакета);
	//	МакетПоУмолчанию = СтруктураМакета.ПредставлениеМакета;
	//	
	//	МакетФормыПоУмолчанию = СтруктураМакета.Макет;
	//	
	//КонецЕсли;
	//
	//// Изменим название кнопки печати
	//ФормаДиалога.ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеПечать.Текст = МакетПоУмолчанию;
	
КонецПроцедуры // УстановитьКнопкуПечати()

// Возвращает картинку, соответствующую представлению типу, переданному 
// в функцию
// 
// Параметры:
//  Тип - строка, представление типа
//
// Возвращаемое значение:
//  Картинка, соответствующая переданному типу
//
Функция уатВернутьСтандартнуюКартинку(Тип) Экспорт
	
	Если Тип = "Справочник" Тогда
		Возврат БиблиотекаКартинок.СправочникОбъект;
	ИначеЕсли Тип = "Справочники" ИЛИ Тип="СправочникОбъект" Тогда
		Возврат БиблиотекаКартинок.Справочник;
	ИначеЕсли Тип = "Документ" ИЛИ Тип="ДокументОбъект" Тогда
		Возврат БиблиотекаКартинок.ДокументОбъект;
	ИначеЕсли Тип = "Документы" Тогда
		Возврат БиблиотекаКартинок.Документ;
	ИначеЕсли Тип = "ЖурналыДокументов" Или Тип = "ЖурналДокументов" Тогда
		Возврат БиблиотекаКартинок.ЖурналДокументов;
	ИначеЕсли Тип = "Отчеты" Или Тип = "Отчет" Тогда
		Возврат БиблиотекаКартинок.Отчет;
	ИначеЕсли Тип = "Обработки" Или Тип = "Обработка" Тогда
		Возврат БиблиотекаКартинок.Обработка;
	ИначеЕсли Тип = "ПланыВидовХарактеристик" Тогда
		Возврат БиблиотекаКартинок.ПланВидовХарактеристик;
	ИначеЕсли Тип = "ПланВидовХарактеристик" Тогда
		Возврат БиблиотекаКартинок.ПланВидовХарактеристикОбъект;
	ИначеЕсли Тип = "ПланыОбмена" Тогда
		Возврат БиблиотекаКартинок.ПланОбмена;
	ИначеЕсли Тип = "ПланОбмена" Тогда
		Возврат БиблиотекаКартинок.ПланОбменаОбъект;
	ИначеЕсли Тип = "ПланыСчетов" Тогда
		Возврат БиблиотекаКартинок.ПланСчетов;
	ИначеЕсли Тип = "ПланСчетов" Тогда
		Возврат БиблиотекаКартинок.ПланСчетовОбъект;
	ИначеЕсли Тип = "ПланыВидовРасчета" Тогда
		Возврат БиблиотекаКартинок.ПланВидовРасчета;
	ИначеЕсли Тип = "ПланВидовРасчета" Тогда
		Возврат БиблиотекаКартинок.ПланВидовРасчетаОбъект;
	ИначеЕсли Тип = "РегистрыСведений" Тогда
		Возврат БиблиотекаКартинок.РегистрСведений;
	ИначеЕсли Тип = "РегистрСведений" Тогда
		Возврат БиблиотекаКартинок.РегистрСведенийЗапись;
	ИначеЕсли Тип = "РегистрыНакопления" Или Тип = "РегистрНакопления" Тогда
		Возврат БиблиотекаКартинок.РегистрНакопления;
	ИначеЕсли Тип = "РегистрыБухгалтерии" Или Тип = "РегистрБухгалтерии " Тогда
		Возврат БиблиотекаКартинок.РегистрБухгалтерии;
	ИначеЕсли Тип = "РегистрыРасчета" Или Тип = "РегистрРасчета" Тогда
		Возврат БиблиотекаКартинок.РегистрРасчета;
	ИначеЕсли Тип = "БизнесПроцессы" Тогда
		Возврат БиблиотекаКартинок.БизнесПроцесс;
	ИначеЕсли Тип = "БизнесПроцесс" Или Тип = "Бизнес-процесс" Тогда
		Возврат БиблиотекаКартинок.БизнесПроцессОбъект;
	ИначеЕсли Тип = "Константы" ИЛИ Тип = "Константа" Тогда
		Возврат БиблиотекаКартинок.Константа;
	ИначеЕсли Тип = "Задачи" Тогда
		Возврат БиблиотекаКартинок.Задача;
	ИначеЕсли Тип = "Задача" Тогда
		Возврат БиблиотекаКартинок.ЗадачаОбъект;
	ИначеЕсли Тип = "Папка" Тогда
		Возврат БиблиотекаКартинок.уатПапка;
	ИначеЕсли Тип = "Избранное" Тогда
		Возврат БиблиотекаКартинок.уатИзбранное;
	ИначеЕсли Тип = "ТабличныйДокумент" Тогда
		Возврат БиблиотекаКартинок.ПиктограммаФайла_MXL;
	Иначе
		Возврат БиблиотекаКартинок.уатПредупреждение;
	КонецЕсли;
	
КонецФункции // обВернутьСтандартнуюКартинку()

// Процедура вызывается для вывода сообщений пользователю
//
// Параметры:
//  СсылкаСправочника - ссылка на справочник, объект которого проверяется;
//  ИмяРеквизита - строка, имя реквизита, который не заполнен.
//
Процедура уатСообщитьПользователюНеЗаполненРеквизит(СсылкаСправочника, ИмяРеквизита) Экспорт
	
	ТекстСообщения = "Перед записью в элементе справочника """ + уатОбщегоНазначенияТиповыеСервер.МетаданныеОбъекта(СсылкаСправочника, "Синоним") + """ необходимо заполнить """ + ИмяРеквизита + """!";
	Сообщить(ТекстСообщения, СтатусСообщения.Важное);

КонецПроцедуры // уатСообщитьПользователюНеЗаполненРеквизит()

//==================================================================================
//ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ НУМЕРАЦИЕЙ И ПРЕФИКСАЦИЕЙ ОБЪЕКТОВ

// Процедура программно добавляет в меню "Действия" кнопку редактирования номера документа
//
// Параметры:
//	ПодменюДействия - ссылка на элемент формы , меню в которое добавляется кнопка
//
Процедура уатДобавитьВМенюДействияКнопкуРедактированияНомера(ПодменюДействия) Экспорт
	
	уатДобавитьВМенюДействияКнопкуПоТипуОбъекта(ПодменюДействия, "номер");
	
КонецПроцедуры

// Процедура программно добавляет в меню "Действия" кнопку редактирования кода объекта
//
// Параметры:
//	ПодменюДействия - ссылка на элемент формы , меню в которое добавляется кнопка
//
Процедура уатДобавитьВМенюДействияКнопкуРедактированияКода(ПодменюДействия) Экспорт
	
	уатДобавитьВМенюДействияКнопкуПоТипуОбъекта(ПодменюДействия, "код");
	
КонецПроцедуры

// Процедура добавляет кнопку редактирования кода/номера на форму
// Параметры:
//  ПодменюДействия - подменю формы куда будет производиться добавление
//  КодНомер     - текст 
Процедура уатДобавитьВМенюДействияКнопкуПоТипуОбъекта(ПодменюДействия, КодНомер)
	
	Обработчик = Новый Действие("ДействияФормыРедактировать" + КодНомер);
	Если ПодменюДействия.Кнопки.Найти("РазделительРедактированияКодаНомера") = Неопределено Тогда
		ПодменюДействия.Кнопки.Добавить("РазделительРедактированияКодаНомера", ТипКнопкиКоманднойПанели.Разделитель);
	КонецЕсли;
	Если ПодменюДействия.Кнопки.Найти("РедактироватьКодНомер") = Неопределено Тогда
		Кнопка = ПодменюДействия.Кнопки.Добавить("РедактироватьКодНомер", ТипКнопкиКоманднойПанели.Действие, "Редактировать " + КодНомер, Обработчик);
		//Кнопка.ИзменяетДанные = Истина;
	КонецЕсли;	
	
КонецПроцедуры


//==================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЕСПЕЧЕНИЯ ТАЙПИНГА В ПОЛЕ ВВОДА

// Процедура обслуживает событие ОбновлениеОтображения в форме, где расположен ЭУ тайпинга.
//
// Параметры
//  ЭтаФорма - Форма записи регистра сведений КонтактнаяИнформация
//  Элемент - элемент управления в котором производится тайпинг
//
Процедура уатОбновлениеОтображенияВФормеПриТайпинге(ЭтаФорма, Элемент, ОбработкаТайпинга, ТекстТайпинга) Экспорт
	
	Если ОбработкаТайпинга Тогда
		ЭтаФорма.ТекущийЭлемент = Элемент;
		Элемент.ВыделенныйТекст = ТекстТайпинга;
		ОбработкаТайпинга       = Ложь;
		ТекстТайпинга           = "";
	КонецЕсли; 
	
КонецПроцедуры

// Процедура обслуживает событие ОкончаниеВводаТекста элемента управления Вид в форме записи регистра
// сведений Контактная информация.
//
// Параметры
//  Элемент - поле ввода
//  Текст - текст введенный в поле ввода Вид
//  Значение - данные элемента управления поле ввода
//  СтандартнаяОбработка - булево, флаг стандартной обработки события автоподбора
//  СтруктураПараметров - Структура параметров запроса, ключ - имя параметра, значение - значение параметра.
//  ЭтаФорма - форма записи регистра сведений контактная информация
//  ТипСправочника - Тип, тип справочника автоподбора текста
//
Процедура уатОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, СтруктураПараметров, ЭтаФорма, ТипСправочника, ОбработкаТайпинга = Неопределено, ТекстТайпинга = Неопределено, ПоследнееЗначениеЭлементаТайпинга = Неопределено, ПриОтсутствииЗначенияОставлятьТекст = Истина) Экспорт
	
	//griale ненашел использования
	//Если ПустаяСтрока(Текст) Тогда
	//	Значение = Новый(ТипСправочника);
	//	СтандартнаяОбработка = Ложь;
	//	Возврат;
	//КонецЕсли; 
	//
	//РезультатЗапроса = уатПолучитьРезультатЗапросаАвтоподбора(Текст, СтруктураПараметров, ТипСправочника, 51);
	//
	//Если РезультатЗапроса = Неопределено Тогда
	//	Возврат;
	//КонецЕсли; 
	//
	//СтандартнаяОбработка = Ложь;
	//
	//Если РезультатЗапроса.Пустой() И ПриОтсутствииЗначенияОставлятьТекст Тогда
	//	ОтветНаВопрос = Вопрос(("В элемент управления введены некорректные данные." + Символы.ПС + "Продолжить?"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	//	Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
	//		ОбработкаТайпинга = Истина;
	//		ТекстТайпинга = Текст;
	//	Иначе
	//		Значение = Текст;
	//	КонецЕсли;
	//Иначе
	//	Выборка = РезультатЗапроса.Выбрать();
	//	Если Выборка.Количество() = 1 Тогда
	//		Выборка.Следующий();
	//		Значение = Выборка.Ссылка;
	//	ИначеЕсли Выборка.Количество() > 50 Тогда
	//		Предупреждение("Найдено более 50-ти значений, удовлетворяющих условиям выбора.
	//		|Задайте более длинную строку или воспользуйтесь командой выбора (F4).");
	//		Если ПоследнееЗначениеЭлементаТайпинга = Неопределено Тогда
	//			Значение = Текст;
	//		Иначе
	//			Значение = ПоследнееЗначениеЭлементаТайпинга;
	//		КонецЕсли; 
	//	Иначе
	//		Если Выборка.Количество() = 0 Тогда
	//			ВыбранныйЭлемент = Неопределено;
	//		Иначе
	//			СписокВыбора = уатСформироватьСписокВыбораЗначенийТайпинга(РезультатЗапроса, Текст, ТипСправочника);
	//			ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокВыбора, Элемент);
	//		КонецЕсли; 
	//		Если ВыбранныйЭлемент = Неопределено Тогда
	//			ОтветНаВопрос = Вопрос(("В элемент управления введены некорректные данные." + Символы.ПС + "Продолжить?"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	//			Если ПоследнееЗначениеЭлементаТайпинга = Неопределено Тогда
	//				Значение = Текст;
	//			Иначе
	//				Значение = ПоследнееЗначениеЭлементаТайпинга;
	//			КонецЕсли; 
	//			Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
	//				ОбработкаТайпинга = Истина;
	//				ТекстТайпинга = Текст;
	//			КонецЕсли;
	//		Иначе
	//			Значение = ВыбранныйЭлемент.Значение;
	//		КонецЕсли; 
	//	КонецЕсли; 
	//КонецЕсли;
	
КонецПроцедуры

// Процедура обслуживает событие ОбновлениеОтображения в форме, где расположен ЭУ тайпинга.
//
// Параметры
//  ЭтаФорма - Форма записи регистра сведений КонтактнаяИнформация
//  Элемент - элемент управления в котором производится тайпинг
//
Процедура уатОбновлениеОтображенияВФормеПриТайпингеДляДокумента(ЭтаФорма, Элемент, ОбработкаТайпинга, ТекстТайпинга) Экспорт
	
	Если ОбработкаТайпинга Тогда
		ЭтаФорма.ТекущийЭлемент = Элемент;
		Элемент.ВыделенныйТекст = ТекстТайпинга;
		ОбработкаТайпинга       = Ложь;
		ТекстТайпинга           = "";
	КонецЕсли; 
	
КонецПроцедуры

// Процедура обслуживает событие ОкончаниеВводаТекста элемента управления Вид в форме записи регистра
// сведений Контактная информация.
//
// Параметры
//  Элемент - поле ввода
//  Текст - текст введенный в поле ввода Вид
//  Значение - данные элемента управления поле ввода
//  СтандартнаяОбработка - булево, флаг стандартной обработки события автоподбора
//  СтруктураПараметров - Структура параметров запроса, ключ - имя параметра, значение - значение параметра.
//  ЭтаФорма - форма записи регистра сведений контактная информация
//  ТипСправочника - Тип, тип справочника автоподбора текста
//
Процедура уатОкончаниеВводаТекстаВЭлементеУправленияДляДокумента(Элемент, Текст, Значение, СтандартнаяОбработка, СтруктураПараметров, ЭтаФорма,  ТипДокумента, ОбработкаТайпинга = Неопределено, ТекстТайпинга = Неопределено, ПоследнееЗначениеЭлементаТайпинга = Неопределено, ПриОтсутствииЗначенияОставлятьТекст = Истина) Экспорт
	
	//griale ненашел использования
	//Если ПустаяСтрока(Текст) Тогда
	//	Значение = Новый( ТипДокумента);
	//	СтандартнаяОбработка = Ложь;
	//	Возврат;
	//КонецЕсли; 
	//
	//РезультатЗапроса = уатПолучитьРезультатЗапросаАвтоподбораДляДокумента(Текст, СтруктураПараметров,  ТипДокумента, 51);
	//
	//Если РезультатЗапроса = Неопределено Тогда
	//	Возврат;
	//КонецЕсли; 
	//
	//СтандартнаяОбработка = Ложь;
	//
	//Если РезультатЗапроса.Пустой() И ПриОтсутствииЗначенияОставлятьТекст Тогда
	//	ОтветНаВопрос = Вопрос(("В элемент управления введены некорректные данные." + Символы.ПС + "Продолжить?"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	//	Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
	//		ОбработкаТайпинга = Истина;
	//		ТекстТайпинга = Текст;
	//	Иначе
	//		Значение = Текст;
	//	КонецЕсли;
	//Иначе
	//	Выборка = РезультатЗапроса.Выбрать();
	//	Если Выборка.Количество() = 1 Тогда
	//		Выборка.Следующий();
	//		Значение = Выборка.Ссылка;
	//	ИначеЕсли Выборка.Количество() > 50 Тогда
	//		Предупреждение("Найдено более 50-ти значений, удовлетворяющих условиям выбора.
	//		|Задайте более длинную строку или воспользуйтесь командой выбора (F4).");
	//		Если ПоследнееЗначениеЭлементаТайпинга = Неопределено Тогда
	//			Значение = Текст;
	//		Иначе
	//			Значение = ПоследнееЗначениеЭлементаТайпинга;
	//		КонецЕсли; 
	//	Иначе
	//		Если Выборка.Количество() = 0 Тогда
	//			ВыбранныйЭлемент = Неопределено;
	//		Иначе
	//			СписокВыбора = уатСформироватьСписокВыбораЗначенийТайпингаДляДокумента(РезультатЗапроса, Текст,  ТипДокумента);
	//			ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокВыбора, Элемент);
	//		КонецЕсли; 
	//		Если ВыбранныйЭлемент = Неопределено Тогда
	//			ОтветНаВопрос = Вопрос(("В элемент управления введены некорректные данные." + Символы.ПС + "Продолжить?"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	//			Если ПоследнееЗначениеЭлементаТайпинга = Неопределено Тогда
	//				Значение = Текст;
	//			Иначе
	//				Значение = ПоследнееЗначениеЭлементаТайпинга;
	//			КонецЕсли; 
	//			Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
	//				ОбработкаТайпинга = Истина;
	//				ТекстТайпинга = Текст;
	//			КонецЕсли;
	//		Иначе
	//			Значение = ВыбранныйЭлемент.Значение;
	//		КонецЕсли; 
	//	КонецЕсли; 
	//КонецЕсли;
	
КонецПроцедуры

// Заполняет список пунктов подменю выбора вида операции значениями переданной коллекции объектов метаданных,
// соответствующей перечислению видов операций для данного документа.
// Всем кнопкам назначается одно переданное действие.
// Обычно используется для заполнения пунктов подменю "ПодменюВидаОперации" командной панели
// формы документа значениями перечисления "Вид операции" для данного вида документа
//
// Параметры:
//  ЭлементМеню                   - кнопка командной панели формы, соответствующая подменю, которое надо заполнить, 
//  ОбъектЗаполнения              - коллекция для заполнения пунктов подменю, 
//  ОбъектОбработкиВыбораОперации - действие, которое надо выполнить при выборе любого пункта подменю.
//
Процедура уатУстановитьПодменюВыбораВидаОперации(ЭлементМеню, ОбъектЗаполнения, ОбъектОбработкиВыбораОперации) Экспорт

	Для Каждого ЭлементЗаполнения Из ОбъектЗаполнения Цикл
		ПунктМеню = ЭлементМеню.Кнопки.Добавить(ЭлементЗаполнения.Имя, ТипКнопкиКоманднойПанели.Действие, 
												ЭлементЗаполнения.Синоним, ОбъектОбработкиВыбораОперации);
		ПунктМеню.ИзменяетДанные = Истина;
	КонецЦикла;
	
КонецПроцедуры // уатУстановитьПодменюВыбораВидаОперации()

//==================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ УправлениеОтношениямиСПоставщикамиИПокупателями   

// Процедура перехватывает событие начала выбора прочего контактного лица
//
// Параметры
//  Элемент - элемент управления, выбора контактного лица контрагента
//  СтандартнаяОбработка - булево
//  СтандартнаяОбработка - булево
//  Контрагент - СправочникСсылка.Контрагенты, ,контрагент контактного лица
//
Процедура уатНачалоВыбораПрочегоКонтактногоЛица(Элемент, СтандартнаяОбработка, Пользователь = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = ПолучитьФорму("Справочник.КонтактныеЛица.ФормаВыбора",,Элемент);
	Если ФормаВыбора.Открыта() Тогда
		ФормаВыбора.Список.Отбор.Элементы.Очистить();
	КонецЕсли; 
	
	ЭлементОтбора                  = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ВидКонтактногоЛица");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = ПредопределенноеЗначение("Перечисление.ВидыКонтактныхЛиц.ПрочееКонтактноеЛицо");
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") И НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(Пользователь) Тогда
		ЭлементОтбора                  = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ОбъектВладелец");
		ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение   = Пользователь;
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементОтбора.Использование    = Истина;
	КонецЕсли;
	
	ФормаВыбора.Элементы.ВидКонтактногоЛица.Видимость = Ложь;
	ФормаВыбора.Элементы.ОбъектВладелец.Заголовок     = "Ответственный";
	
	ФормаВыбора.Заголовок     = "Справочник Прочие контактные лица";
	ФормаВыбора.Автозаголовок = Ложь;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

// Процедура перехватывает событие начала выбора прочего контактного лица
//
// Параметры
//  Элемент - элемент управления, выбора контактного лица контрагента
//  СтандартнаяОбработка - булево
//  СтандартнаяОбработка - булево
//  Контрагент - СправочникСсылка.Контрагенты, ,контрагент контактного лица
//
Процедура уатНачалоВыбораЛичныхКонтактов(Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = ПолучитьФорму("Справочник.КонтактныеЛица.ФормаВыбора",,Элемент);
	Если ФормаВыбора.Открыта() Тогда
		ФормаВыбора.Список.Отбор.Элементы.Очистить();
	КонецЕсли; 
	
	ЭлементОтбора                  = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ВидКонтактногоЛица");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = ПредопределенноеЗначение("Перечисление.ВидыКонтактныхЛиц.ЛичныйКонтакт");
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ФормаВыбора.Элементы.ВидКонтактногоЛица.Видимость = Ложь;
	ФормаВыбора.Элементы.ОбъектВладелец.Заголовок     = "Ответственный";
	ФормаВыбора.Элементы.ОбъектВладелец.Видимость     = Ложь;
	
	ФормаВыбора.Заголовок     = "Справочник Личные контакты";
	ФормаВыбора.Автозаголовок = Ложь;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

// Процедура перехватывает событие начала выбора контактного лица контрагента
//
// Параметры
//  Элемент - элемент управления, выбора контактного лица контрагента
//  СтандартнаяОбработка - булево
//  СтандартнаяОбработка - булево
//  Контрагент - СправочникСсылка.Контрагенты, ,контрагент контактного лица
//
Процедура уатНачалоВыбораКонтактногоЛицаКонтрагента(Элемент, СтандартнаяОбработка, Контрагент = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	
	Если Не Контрагент = Неопределено Тогда 
		Партнер = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Контрагент, "Партнер");
		Если ЗначениеЗаполнено(Партнер) Тогда 
			ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", Партнер));
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

// Процедура обрабатывает событие ПередНачаломДобавления в форме списка
// справочника КонтактныеЛица
//
Процедура уатПередНачаломДобавленияКонтактногоЛица(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, СправочникСписок, ЭтаФорма) Экспорт
	
	//griale ненашел использования
	
	//Если уатОбщегоНазначения.уатДоступностьКомпоненты("УАТСТАНДАРТ") Тогда
	//	Если НЕ ЭтоГруппа
	//		И НЕ Копирование
	//		И ((СправочникСписок.Отбор.ОбъектВладелец.Использование И СправочникСписок.Отбор.ОбъектВладелец.ВидСравнения = ВидСравнения.Равно)
	//		ИЛИ (СправочникСписок.Отбор.ВидКонтактногоЛица.Использование И СправочникСписок.Отбор.ВидКонтактногоЛица.ВидСравнения = ВидСравнения.Равно)) Тогда
	//		
	//		Отказ = Истина;
	//		
	//		НовыйОбъект = Справочники.КонтактныеЛица.СоздатьЭлемент();
	//		Если СправочникСписок.Отбор.ОбъектВладелец.Использование Тогда
	//			НовыйОбъект.ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента;
	//			НовыйОбъект.ОбъектВладелец     = СправочникСписок.Отбор.ОбъектВладелец.Значение;
	//		Иначе
	//			НовыйОбъект.ВидКонтактногоЛица = СправочникСписок.Отбор.ВидКонтактногоЛица.Значение;
	//		КонецЕсли; 
	//		
	//		НовыйОбъект.ПолучитьФорму(, ЭтаФорма).Открыть();
	//		
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры


//==================================================================================
// РАБОТА С ДИАЛОГАМИ

// Проверяет модифицированность документа перед печатью, и если необходимо 
// записывает его
// 
// Параметры
//  Документ - (ДокументОбъект.*) - проверяемый документ
//  Форма    - форма проверяемого документа
//
Функция ПроверитьМодифицированностьВФорме(Документ, Форма) Экспорт
	
	Результат = Ложь;
	
	Если Форма.Модифицированность Тогда
		
		Проведен = ?(уатОбщегоНазначенияТиповыеСервер.ДокументПроведен(Документ), " и провести","");
		Ответ = Истина;
		//Ответ = Вопрос("Документ изменен. Для печати его необходимо записать "+ Проведен +".
		//|Записать" + Проведен + "?",
		//РежимДиалогаВопрос.ОКОтмена, , 
		//КодВозвратаДиалога.Отмена,
		//"Документ изменен");
		
		Если Ответ Тогда
			Попытка
				ПараметрыЗаписи = Новый Структура;
				Если уатОбщегоНазначенияТиповыеСервер.ДокументПроведен(Документ) Тогда
					ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
				Иначе 
					ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
				КонецЕсли;
				Форма.Записать(ПараметрыЗаписи);    
			Исключение
				//Предупреждение("Операция не выполнена!");
				Возврат Результат = Истина;
			КонецПопытки;
			
			Результат = Истина;
		КонецЕсли;
		
	Иначе
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПроверитьМодифицированность()

//==================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ДОГОВОРАМИ КОНТРАГЕНТОВ ПРИ ОБЪЕДИНЕНИИ С ТЛЭ

// Процедура выполняет стандартные действия при начале выбора сделки в формах документов.
//
// Параметры:
//  Документ              - редактируемый документ;
//  ФормаДокумента        - форма редактируемого документа;
//  ЭлементФормы          - элемент формы документа, который надо заполнить; 
//  ДоговорКонтрагента - ссылка на справочник, определяет договор контрагента по сделке;
//  Сделка                - ссылка на документ, определяет собственно сделку;
//  СтандартнаяОбработка, - булево, признак выполнения стандартной (системной) обработки события 
//                          начала выбора для данного элемента формы документа;
//  СтрокаТипаЗаказа      - строка, содержащая тип заказа (поставщику или покупателя).
//  СтруктураОтбора       - структура отбора, которая будет передана в открываемую форму выбора.
//
Процедура НачалоВыбораЗначенияСделки(Документ, ФормаДокумента, ЭлементФормы, ДоговорКонтрагента, Сделка,
	                          СтандартнаяОбработка, Знач СтрокаТипаЗаказа = "",СтруктураОтбора = Неопределено) Экспорт
	
	
	ЭлементФормыКонтрагент = ФормаДокумента.Элементы.Найти("Контрагент");
	// Тип выбираемого значения зависит от договора.
	Если Не ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(Новый ОписаниеОповещения("НачалоВыбораЗначенияСделкиЗавершение", ЭтотОбъект, Новый Структура("ФормаДокумента, ЭлементФормыКонтрагент", ФормаДокумента, ЭлементФормыКонтрагент)), "Не выбран договор контрагента!");
		Возврат;
	КонецЕсли;
	
	// Тип выбираемого значения зависит от договора.
	Если НЕ уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("ТипДоговора", "ДоговорыКонтрагентов") Тогда
		ВидДоговораКонтрагента = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(ДоговорКонтрагента, "ВидДоговора");
		Если ВидДоговораКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее") Тогда
			СтандартнаяОбработка = Ложь;
			ПоказатьПредупреждение(Новый ОписаниеОповещения("НачалоВыбораЗначенияСделкиЗавершениеПрочее", ЭтотОбъект, Новый Структура("ФормаДокумента, ЭлементФормыКонтрагент", ФормаДокумента, ЭлементФормыКонтрагент)), "По договорам с видом ""Прочее"" не ведутся взаиморасчеты по сделкам!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если (СтрокаТипаЗаказа = "уатЗаказПеревозчику_уэ") Или (СтрокаТипаЗаказа = "уатЗаказГрузоотправителя_уэ") Тогда
		
		ТипДокументаСделки = СтрокаТипаЗаказа;
		ТипДокументаСчет = ?(СтрокаТипаЗаказа = "уатЗаказПеревозчику_уэ","уатСчетНаОплатуПоставщика","уатСчетНаОплатуПокупателю");
		
		Если уатОбщегоНазначенияТиповыеСервер.уатЕстьРеквизитДокумента("Сделка", Документ) Тогда 
			ЕстьТипСчет = уатОбщегоНазначенияТиповыеСервер.ЕстьВхождениеТипаСделкиВДокумент(Документ, ТипДокументаСчет);
		Иначе 
			ЕстьТипСчет = Истина;
		КонецЕсли;
		
		Если ЕстьТипСчет Тогда
			мВедениеВзаиморасчетов = Неопределено;
			Выполнить("мВедениеВзаиморасчетов = уатОбщегоНазначения_уэ.ПолучитьВедениеВзаиморасчетовУЭ(ДоговорКонтрагента)");
			Если мВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.уатВедениеВзаиморасчетовПоДоговорам_уэ.ПоСчетам") Тогда
				
				ТипДокументаСделки = ТипДокументаСчет;
				
			ИначеЕсли мВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.уатВедениеВзаиморасчетовПоДоговорам_уэ.ПоЗаказам")
				Или мВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.уатВедениеВзаиморасчетовПоДоговорам_уэ.ПоДоговоруВЦелом") Тогда
				
					ТипДокументаСделки = СтрокаТипаЗаказа;
					
			КонецЕсли; 
			
			Если Не ЗначениеЗаполнено(Сделка) Или ТипЗнч(Сделка) <> Тип("ДокументСсылка." + СтрокаТипаЗаказа) Тогда
				Сделка = ПредопределенноеЗначение("Документ."+ТипДокументаСделки+".ПустаяСсылка");
			КонецЕсли;
		КонецЕсли;
	Иначе // сделка может быть только заказом (поставщику или покупателя)
		Если ТипЗнч(Сделка) <> Тип("ДокументСсылка." + СтрокаТипаЗаказа) Тогда
			Сделка = ПредопределенноеЗначение("Документ."+СтрокаТипаЗаказа+".ПустаяСсылка");
		КонецЕсли;
		
		ТипДокументаСделки = СтрокаТипаЗаказа;
	КонецЕсли; 
	
	// В качестве владельца формы выбора устанавливаем данный элемент,
	// чтобы выбранное значение было присвоено стандартно.
	ПараметрыФормы = Новый Структура;
	
	СделкаДоговорКонтрагента = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Сделка, "ДоговорКонтрагента");
	Если ЗначениеЗаполнено(Сделка) И СделкаДоговорКонтрагента = ДоговорКонтрагента Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", Сделка);
	КонецЕсли;
	
	ФормаВыбора = ПолучитьФорму("Документ."+ТипДокументаСделки+".ФормаВыбора", ПараметрыФормы, ЭлементФормы);
	
	// Отфильруем список документов по договору.
	ЭлементОтбора                  = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("уатДокументыПоДоговоруКонтрагента_уэ");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = ДоговорКонтрагента;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	// Отфильруем список документов.
	Если Не СтруктураОтбора = Неопределено И ТипЗнч(СтруктураОтбора) = Тип("Структура") Тогда
		
		Для Каждого ЭлементСтруктуры Из СтруктураОтбора Цикл
			
			СтруктураОтбора = ЭлементСтруктуры.Значение;
			
			ЗначениеОтбора     = Неопределено;
			ВидСравненияОтбора = Неопределено;
			ДоступностьОтбора  = Неопределено;
			
			Если СтруктураОтбора.Свойство("ЗначениеОтбора", ЗначениеОтбора) Тогда
				
				ЭлементОтбора               = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЭлементСтруктуры.Ключ);
				
				Если СтруктураОтбора.Свойство("ВидСравненияОтбора", ВидСравненияОтбора) Тогда
					ЭлементОтбора.ВидСравнения = ВидСравненияОтбора;
				Иначе
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
				
				ЭлементОтбора.ПравоеЗначение = ЗначениеОтбора;
				ЭлементОтбора.Использование  = Истина;
				
				Если СтруктураОтбора.Свойство("ДоступностьОтбора", ДоступностьОтбора) Тогда
					ЭлементОтбора.РежимОтображения = ДоступностьОтбора;
				Иначе
					ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура НачалоВыбораЗначенияСделкиЗавершениеПрочее(ДополнительныеПараметры) Экспорт
    
    ФормаДокумента = ДополнительныеПараметры.ФормаДокумента;
    ЭлементФормыКонтрагент = ДополнительныеПараметры.ЭлементФормыКонтрагент;
    
    
    Если Не ЭлементФормыКонтрагент = Неопределено Тогда
        ФормаДокумента.ТекущийЭлемент = ЭлементФормыКонтрагент;
    КонецЕсли;

КонецПроцедуры

Процедура НачалоВыбораЗначенияСделкиЗавершение(ДополнительныеПараметры) Экспорт
    
    ФормаДокумента = ДополнительныеПараметры.ФормаДокумента;
    ЭлементФормыКонтрагент = ДополнительныеПараметры.ЭлементФормыКонтрагент;
    
    
    Если ЭлементФормыКонтрагент<>неопределено Тогда
        ФормаДокумента.ТекущийЭлемент = ЭлементФормыКонтрагент;
    КонецЕсли;
    
КонецПроцедуры
 // НачалоВыбораЗначенияСделки()
