
Функция ИспользованиеЦСМ() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Возврат (Константы.уатИспользоватьЦСМ.Получить() = Истина);
КонецФункции

// Функция предназначена для определения необходимости отрыть форму обработки "уатТерминалПриемаИВыдачиПутевыхЛистов"
// при старте системы.
//
// Возвращаемое значение:
//   Булево   - признак необходимости открытия обработки "уатТерминалПриемаИВыдачиПутевыхЛистов".
//
Функция НеобходимоОткрытиеТерминалаПЛприСтарте() Экспорт
	
	Если ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.уатТерминалПутевыхЛистов)
			И Не ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.ПолныеПрава)
			И Константы.уатИспользоватьТерминалПриемаВыдачиПутевыхЛистов.Получить() Тогда 
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // НеобходимоОткрытиеТерминалаПЛприСтарте()


/////////////////////////////////////////////////////////////////////////////////////
//        ФУНКЦИИ ДЛЯ СПИСАНИЯ ГСМ

// Возвращает результат запроса по остаткам ГСМ по партиям
//
//
Функция уатПолучитьОстаткиПартийГСМ(МоментВремени, СпособОценкиМПЗ, ТС, ГСМ, Колонна = Неопределено)
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОстаткиГСМ.Партия КАК Партия,
	|	ОстаткиГСМ.ТС КАК ТС,
	|	ОстаткиГСМ.ГСМ КАК ГСМ,
	|	ОстаткиГСМ.Колонна КАК Колонна,
	|	ЕСТЬNULL(ОстаткиГСМ.КоличествоОстаток, 0) КАК Количество,
	|	ОстаткиГСМ.СтоимостьОстаток КАК Стоимость,
	|	ОстаткиГСМ.СтоимостьУпрОстаток КАК СтоимостьУпр
	|ИЗ
	|	РегистрНакопления.уатОстаткиГСМнаТС.Остатки(
	|		&Момент,
	|		ГСМ В (&ГСМ) И ТС = &ТС) КАК ОстаткиГСМ
	|ГДЕ
	|	ОстаткиГСМ.КоличествоОстаток > 0
	|";
	
	Если СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО Тогда
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО	ОстаткиГСМ.Партия.Дата ВОЗР";
	ИначеЕсли СпособОценкиМПЗ = Перечисления.СпособыОценки.ЛИФО Тогда
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО	ОстаткиГСМ.Партия.Дата УБЫВ";
	КонецЕсли;
	
	//получаем аналоги
	тзАналогиГСМ = уатОбщегоНазначения.уатПолучитьАналогиГСМ(ГСМ);
	
	//добавляем к аналогам основное ГСМ
	НоваяСтрока = тзАналогиГСМ.Добавить();
	НоваяСтрока.ГСМ = ГСМ;
	НоваяСтрока.Аналог = ГСМ;
	
	////колонны ТС (для УАТ ПРОФ)
	//ТекКолонна = Колонна;
	//Если Колонна = Неопределено Тогда
	//	СтруктураМестонахождение = уатОбщегоНазначения.МестонахождениеТС(ТС, МоментВремени);
	//	ТекКолонна = СтруктураМестонахождение.Колонна;
	//КонецЕсли;
	//Запрос.УстановитьПараметр("Колонна", ТекКолонна);
	//
	Запрос.УстановитьПараметр("Момент", МоментВремени);
	Запрос.УстановитьПараметр("ГСМ", тзАналогиГСМ.ВыгрузитьКолонку("Аналог"));
	Запрос.УстановитьПараметр("ТС", ТС);
	
	Возврат Запрос.Выполнить();
КонецФункции

//Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоГСМ - результат запроса по табличной части "Материалы",
//  ТаблицаДляСписанияГСМ - Сформированная таблица значений,
//  ПоДокументу - булево, Истина - берем данные из документа и рассчитываем стоимость. Ложь - читаем данные из регистра
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция уатПодготовитьТаблицуСписанияГСМ(ДокументОбъект, ТаблицаДляСписанияГСМ, ПоДокументу, вхСредняяЦена = 0, СтрокаОшибки = "") Экспорт
	
	Перем мСписаноКоличество;
	Перем мСписаноСтоимость;
	
	ВсеОК = Истина;
	мСписаноКоличество = 0;
	мСписаноСтоимость  = 0;
	
	ТаблицаДляСписанияГСМ = Новый ТаблицаЗначений;
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Партия");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Дата");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Склад");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("ГСМ");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Номенклатура");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("ТС");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Колонна");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Количество");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Коэффициент");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Сумма");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("СтоимостьУпр");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Стоимость");
	
	Если ПоДокументу Тогда
		//заполняем таблицу по данным документа. Рассчитываем стоимость ГСМ
		// получим результат запроса по таблице ГСМ в пут. листе
		РезультатЗапросаПоГСМ = Новый Запрос();
		
		МоментВремениОстПартий = ДокументОбъект.МоментВремени();
		
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
			
			РезультатЗапросаПоГСМ.Текст	=
			"ВЫБРАТЬ
			|	уатПутевойЛистРасходГСМ.ГСМ,
			|	уатПутевойЛистРасходГСМ.РасходПоФакту КАК СписываемоеКоличество,
			|	уатПутевойЛистРасходГСМ.ТС,
			|	уатПутевойЛистРасходГСМ.Ссылка.ДатаЗакрытия КАК Дата,
			|	уатМестонахождениеТС.Колонна
			|ИЗ
			|	Документ.уатПутевойЛист.РасходГСМ КАК уатПутевойЛистРасходГСМ
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
			|		ПО уатПутевойЛистРасходГСМ.ГСМ = уатНоменклатураГСМ.Номенклатура
			|			И (уатНоменклатураГСМ.ГруппаГСМ = &ГруппаГСМ)
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.уатМестонахождениеТС.СрезПоследних(&Дата) КАК уатМестонахождениеТС
			|	ПО уатПутевойЛистРасходГСМ.ТС = уатМестонахождениеТС.ТС
			|ГДЕ
			|	уатПутевойЛистРасходГСМ.Ссылка = &Ссылка
			|	И уатПутевойЛистРасходГСМ.Активен = &Активен";
			РезультатЗапросаПоГСМ.УстановитьПараметр("Активен", Истина);
			РезультатЗапросаПоГСМ.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
			РезультатЗапросаПоГСМ.УстановитьПараметр("ГруппаГСМ", Перечисления.уатГруппыГСМ.Топливо);
			РезультатЗапросаПоГСМ.УстановитьПараметр("Дата", ДокументОбъект.МоментВремени());
			тблВыборкаЗапросаПоГСМ = РезультатЗапросаПоГСМ.Выполнить().Выгрузить();
			
			Если ЗначениеЗаполнено(ДокументОбъект.ДатаЗакрытия) Тогда
				МоментВремениОстПартий = Новый Граница(ДокументОбъект.ДатаЗакрытия, ВидГраницы.Исключая);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатПутевойЛист") Тогда
			
			тблВыборкаЗапросаПоГСМ = ДокументОбъект.РасходГСМ.Выгрузить();
			тблВыборкаЗапросаПоГСМ.Колонки.Добавить("Дата");
			тблВыборкаЗапросаПоГСМ.Колонки.РасходПоФакту.Имя = "СписываемоеКоличество";
			тблВыборкаЗапросаПоГСМ.ЗаполнитьЗначения(ДокументОбъект.ДатаЗакрытия, "Дата");
			//добавление колонны
			тблВыборкаЗапросаПоГСМ.Колонки.Добавить("Колонна");
			Для Каждого ТекСтрока Из тблВыборкаЗапросаПоГСМ Цикл
				ТекСтрока.Колонна = уатОбщегоНазначения.МестонахождениеТС(ТекСтрока.ТС, ДокументОбъект.МоментВремени()).Колонна;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ДокументОбъект.ДатаЗакрытия) Тогда
				МоментВремениОстПартий = Новый Граница(ДокументОбъект.ДатаЗакрытия, ВидГраницы.Исключая);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатСливГСМ") ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.уатСливГСМ") Тогда
			РезультатЗапросаПоГСМ.Текст	=
			"ВЫБРАТЬ
			|	уатСливГСМ.ТС,
			|	уатСливГСМ.ГСМ,
			|	уатСливГСМ.АЗС.Контрагент_Склад КАК Склад,
			|	уатСливГСМ.Количество КАК СписываемоеКоличество,
			|	уатСливГСМ.Количество КАК Количество,
			|	&Коэффициент КАК Коэффициент,
			|	уатСливГСМ.Дата,
			|	уатМестонахождениеТС.Колонна
			|ИЗ
			|	Документ.уатСливГСМ КАК уатСливГСМ
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.уатМестонахождениеТС.СрезПоследних(&Дата) КАК уатМестонахождениеТС
			|	ПО уатСливГСМ.ТС = уатМестонахождениеТС.ТС
			|
			|ГДЕ
			|	уатСливГСМ.Ссылка = &Ссылка";
			РезультатЗапросаПоГСМ.УстановитьПараметр("Коэффициент", 1);
			РезультатЗапросаПоГСМ.УстановитьПараметр("Дата", ДокументОбъект.МоментВремени());
			РезультатЗапросаПоГСМ.УстановитьПараметр("Ссылка",ДокументОбъект.Ссылка);
			тблВыборкаЗапросаПоГСМ = РезультатЗапросаПоГСМ.Выполнить().Выгрузить();
			
		КонецЕсли;	
		
		СпособОценкиМПЗ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументОбъект.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.СпособОценкиМПЗ);
		
		//Перебираем строки ГСМ, который надо списать
		Для Каждого ВыборкаЗапросаПоГСМ Из тблВыборкаЗапросаПоГСМ Цикл
			НадоСписатьКоличество = ВыборкаЗапросаПоГСМ.СписываемоеКоличество;
			
			//Получение остатков ГСМ по партиям
			РезультатЗапросаПартииГСМ = уатПолучитьОстаткиПартийГСМ(МоментВремениОстПартий, СпособОценкиМПЗ, ВыборкаЗапросаПоГСМ.ТС, ВыборкаЗапросаПоГСМ.ГСМ, ВыборкаЗапросаПоГСМ.Колонна);
			ВыборкаЗапросаПартииГСМ		= РезультатЗапросаПартииГСМ.Выбрать();
			
			//КоличествоОстаток = уатОстатокГСМнаТС(ДокументОбъект.МоментВремени(),
			//	ВыборкаЗапросаПоГСМ.ТС, ВыборкаЗапросаПоГСМ.ГСМ);
			//Если НадоСписатьКоличество > КоличествоОстаток Тогда
			//	//Расход по ТС превышает остаток
			//	ВсеОК=Ложь;
			//	СтрокаОшибки = СтрокаОшибки + Символы.ПС + "Надо списать: " + НадоСписатьКоличество
			//		+ ", остаток: " + КоличествоОстаток;
			//КонецЕсли; 
			
			Если ВсеОК Тогда
				
				НадоСписатьСумму = 0;
				НадоСписатьСуммуУпр = 0;
				Если СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней Тогда
					Попытка
						мТаблицаДляСуммы	= РезультатЗапросаПартииГСМ.Выгрузить();
						НадоСписатьСумму = мТаблицаДляСуммы.Итог("Стоимость") / мТаблицаДляСуммы.Итог("Количество") * НадоСписатьКоличество;
						НадоСписатьСуммуУпр = мТаблицаДляСуммы.Итог("СтоимостьУпр") / мТаблицаДляСуммы.Итог("Количество") * НадоСписатьКоличество;
					Исключение
					КонецПопытки;	
				КонецЕсли;
				
				Пока НадоСписатьКоличество > 0 Цикл
					Если ВыборкаЗапросаПартииГСМ.Следующий() Тогда
						мКоличество = Мин(НадоСписатьКоличество, ВыборкаЗапросаПартииГСМ.Количество);
						мКоличество = ?(мКоличество < 0, 0, мКоличество);
						
						Если СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней Тогда
							мСтоимость = Мин(НадоСписатьСумму, ВыборкаЗапросаПартииГСМ.Стоимость);
							мСтоимостьУпр = Мин(НадоСписатьСуммуУпр, ВыборкаЗапросаПартииГСМ.СтоимостьУпр);
						Иначе
							Если ВыборкаЗапросаПартииГСМ.Количество = 0 Или ВыборкаЗапросаПартииГСМ.Количество < НадоСписатьКоличество Тогда
								мСтоимость = ВыборкаЗапросаПартииГСМ.Стоимость;
								мСтоимостьУпр = ВыборкаЗапросаПартииГСМ.СтоимостьУпр;
							Иначе	
								мСтоимость = НадоСписатьКоличество * ВыборкаЗапросаПартииГСМ.Стоимость / ВыборкаЗапросаПартииГСМ.Количество;
								мСтоимостьУпр = НадоСписатьКоличество * ВыборкаЗапросаПартииГСМ.СтоимостьУпр / ВыборкаЗапросаПартииГСМ.Количество;
								//мСтоимостьУпр = мСтоимость;
							КонецЕсли;
							
						КонецЕсли;      
						
						Если мКоличество > 0 Тогда
							НоваяСтрока = ТаблицаДляСписанияГСМ.Добавить();
							НоваяСтрока.ТС = ВыборкаЗапросаПоГСМ.ТС;
							НоваяСтрока.Дата = ВыборкаЗапросаПоГСМ.Дата;
							НоваяСтрока.Партия = ВыборкаЗапросаПартииГСМ.Партия;
							НоваяСтрока.ГСМ = ВыборкаЗапросаПартииГСМ.ГСМ;
							НоваяСтрока.Колонна = ВыборкаЗапросаПартииГСМ.Колонна;
							НоваяСтрока.Количество = мКоличество;
							НоваяСтрока.Стоимость = мСтоимость;	
							НоваяСтрока.СтоимостьУпр = мСтоимостьУпр;
							
							Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатСливГСМ") Тогда
								
								НоваяСтрока.Склад		= ВыборкаЗапросаПоГСМ.Склад;
								НоваяСтрока.Номенклатура= ВыборкаЗапросаПартииГСМ.ГСМ;
								НоваяСтрока.Сумма		= мСтоимость;
								НоваяСтрока.Коэффициент	= ВыборкаЗапросаПоГСМ.Коэффициент;
								
							КонецЕсли;	
							
							мСписаноКоличество 		= мСписаноКоличество + НоваяСтрока.Количество;
							мСписаноСтоимость 		= мСписаноСтоимость + НоваяСтрока.Стоимость;
						КонецЕсли;
						
						НадоСписатьКоличество = НадоСписатьКоличество - мКоличество;
						НадоСписатьСумму = НадоСписатьСумму - мСтоимость;
						НадоСписатьСуммуУпр = НадоСписатьСуммуУпр - мСтоимостьУпр;
						
					Иначе
						НоваяСтрока = ТаблицаДляСписанияГСМ.Добавить();
						НоваяСтрока.ТС = ВыборкаЗапросаПоГСМ.ТС;
						НоваяСтрока.Дата = ВыборкаЗапросаПоГСМ.Дата;
						НоваяСтрока.Партия = Неопределено;
						НоваяСтрока.ГСМ = ВыборкаЗапросаПоГСМ.ГСМ;
						НоваяСтрока.Колонна = ВыборкаЗапросаПоГСМ.Колонна;
						НоваяСтрока.Количество = НадоСписатьКоличество;
						НоваяСтрока.Стоимость = НадоСписатьСумму;	
						НоваяСтрока.СтоимостьУпр = НадоСписатьСуммуУпр;
						
						НадоСписатьКоличество = 0;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
		вхСредняяЦена = ?(мСписаноКоличество=0, 0,окр(мСписаноСтоимость / мСписаноКоличество,2));
		
	Иначе
		
		//заполняем таблицу по движениям регистра документа. Стоимость ГСМ берем из регистра
		
		РезультатЗапросаПоГСМ 		= Новый Запрос();
		РезультатЗапросаПоГСМ.Текст	=
		"ВЫБРАТЬ
		|	уатОстаткиГСМнаТС.ТС,
		|	уатОстаткиГСМнаТС.ГСМ,
		|	уатОстаткиГСМнаТС.Колонна,
		|	уатОстаткиГСМнаТС.Количество,
		|	уатОстаткиГСМнаТС.Стоимость,
		|	уатОстаткиГСМнаТС.СтоимостьУпр
		|ИЗ
		|	РегистрНакопления.уатОстаткиГСМнаТС КАК уатОстаткиГСМнаТС
		|ГДЕ
		|	уатОстаткиГСМнаТС.Регистратор = &Ссылка";
		РезультатЗапросаПоГСМ.УстановитьПараметр("Ссылка",ДокументОбъект.Ссылка);
		
		ВыборкаЗапросаПоГСМ = РезультатЗапросаПоГСМ.Выполнить().Выбрать();
		
		//Перебираем строки ГСМ, который надо списать
		Пока ВыборкаЗапросаПоГСМ.Следующий() Цикл
			НоваяСтрока = ТаблицаДляСписанияГСМ.Добавить();
			НоваяСтрока.ТС = ВыборкаЗапросаПоГСМ.ТС;
			НоваяСтрока.ГСМ = ВыборкаЗапросаПоГСМ.ГСМ;
			НоваяСтрока.Колонна = ВыборкаЗапросаПоГСМ.Колонна;
			НоваяСтрока.Количество = ВыборкаЗапросаПоГСМ.Количество;
			НоваяСтрока.Стоимость = ВыборкаЗапросаПоГСМ.Стоимость;
			НоваяСтрока.СтоимостьУпр = ВыборкаЗапросаПоГСМ.СтоимостьУпр;
		КонецЦикла; 
		
	КонецЕсли;
	
	//округляем до точности хранения остатков ГСМ в ТС
	мТочностьОстатковГСМ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументОбъект.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ТочностьОстатковТоплива);
	Для Каждого ТекСтрока Из ТаблицаДляСписанияГСМ Цикл
		ТекСтрока.Количество = Окр(ТекСтрока.Количество, мТочностьОстатковГСМ);
	КонецЦикла;
	
	Возврат ВсеОК;
	
КонецФункции // ПодготовитьТаблицуСписанияГСМ()

//Функция возвращает выборку результата запроса со структурой норм расхода ГСМ
// на указанную дату среза
//
Функция ПолучитьНормыРасходаГСМ(ТС, ЗаданнаяДата, ГСМ, Организация = Неопределено) ЭКСПОРТ
	
	//список ГСМ с учетом аналогов
	СписокГСМ = Новый СписокЗначений;
	СписокГСМ.Добавить(ГСМ);
	
	ТаблицаГСМ = уатОбщегоНазначения.уатПолучитьАналогиГСМ(ГСМ, Перечисления.уатГруппыГСМ.Топливо);
	
	Для Каждого ТекСтрока Из ТаблицаГСМ Цикл
		СписокГСМ.Добавить(ТекСтрока.Аналог);
	КонецЦикла;	
	
	//запрос по ТС
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НормыРасходаГСМ.*
	|ИЗ
	|	РегистрСведений.уатНормыРасходаГСМ.СрезПоследних(
	|		&Период,
	|		МодельТС = &ТС
	|		    И ГСМ В (&СписокГСМ)) КАК НормыРасходаГСМ";
	Запрос.УстановитьПараметр("СписокГСМ", СписокГСМ);
	Запрос.УстановитьПараметр("Период", ЗаданнаяДата);
	Запрос.УстановитьПараметр("ТС", ТС);
	тблНормыТС = Запрос.Выполнить().Выгрузить();
	
	//отбор по организации - чистим лишние строки
	Сч = тблНормыТС.Количество();
	Пока Сч >= 1 Цикл
		Сч = Сч - 1;
		
		ТекСтрока = тблНормыТС[сч];
		Если НЕ ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(ТекСтрока.Организация) Тогда
			тблНормыТС.Удалить(ТекСтрока);
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(ТекСтрока.Организация) И Организация <> ТекСтрока.Организация Тогда
			тблНормыТС.Удалить(ТекСтрока);
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(Организация) И НЕ ЗначениеЗаполнено(ТекСтрока.Организация) Тогда
			СтрокаПоискаДоп = тблНормыТС.Найти(Организация, "Организация");
			Если СтрокаПоискаДоп <> Неопределено И СтрокаПоискаДоп <> ТекСтрока Тогда
				тблНормыТС.Удалить(ТекСтрока);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//если по конкретному ТС не найдены нормы ГСМ, то ищем нормы по модели ТС
	Если тблНормыТС.Количество() = 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НормыРасходаГСМ.*
		|ИЗ
		|	РегистрСведений.уатНормыРасходаГСМ.СрезПоследних(
		|		&Период,
		|		МодельТС = &МодельТС
		|		    И ГСМ В (&СписокГСМ)) КАК НормыРасходаГСМ";
		Запрос.УстановитьПараметр("СписокГСМ", СписокГСМ);
		Запрос.УстановитьПараметр("Период", ЗаданнаяДата);
		Запрос.УстановитьПараметр("МодельТС", ТС.уатМодель);
		тблНормыТС = Запрос.Выполнить().Выгрузить();
	
		//отбор по организации - чистим лишние строки
		Сч = тблНормыТС.Количество();
		Пока Сч >= 1 Цикл
			Сч = Сч - 1;
			
			ТекСтрока = тблНормыТС[сч];
			Если НЕ ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(ТекСтрока.Организация) Тогда
				тблНормыТС.Удалить(ТекСтрока);
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(ТекСтрока.Организация) И Организация <> ТекСтрока.Организация Тогда
				тблНормыТС.Удалить(ТекСтрока);
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(Организация) И НЕ ЗначениеЗаполнено(ТекСтрока.Организация) Тогда
				СтрокаПоискаДоп = тблНормыТС.Найти(Организация, "Организация");
				Если СтрокаПоискаДоп <> Неопределено И СтрокаПоискаДоп <> ТекСтрока Тогда
					тблНормыТС.Удалить(ТекСтрока);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	КоличНорм = тблНормыТС.Количество();
	
	НормаРасхода = Новый Структура;
	
	Для каждого ТекКолонка ИЗ тблНормыТС.Колонки Цикл
		Если КоличНорм = 0 Тогда
			Если ТекКолонка.Имя = "ГСМ" Тогда
				НормаРасхода.Вставить("ГСМ", Справочники.Номенклатура.ПустаяСсылка());	
			ИначеЕсли ТекКолонка.Имя = "МодельТС" Тогда
				НормаРасхода.Вставить("МодельТС", Неопределено);	
			ИначеЕсли ТекКолонка.Имя = "Организация" Тогда
				НормаРасхода.Вставить("Организация", Справочники.Организации.ПустаяСсылка());	
			//ИначеЕсли ТекКолонка.Имя = "ЛинейнаяНорма"  Тогда
			//	НормаРасхода.Вставить("ЛинейнаяНорма", 0.0001);	
			Иначе
				НормаРасхода.Вставить(ТекКолонка.Имя, 0);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		//Если ТекКолонка.Имя = "ЛинейнаяНорма" И (НЕ ЗначениеЗаполнено(тблНормыТС[0].ЛинейнаяНорма)) тогда
		//	НормаРасхода.Вставить("ЛинейнаяНорма", 0.0001);	
		//	Продолжить;
		//КонецЕсли;
		
		НормаРасхода.Вставить(ТекКолонка.Имя, ?(ЗначениеЗаполнено(тблНормыТС[0][ТекКолонка.Имя]), тблНормыТС[0][ТекКолонка.Имя], 0));
	КонецЦикла;
	
	Возврат НормаРасхода;
КонецФункции // уатПолучитьНормыРасходаГСМ

//Функция возвращает таблицу норм расхода ТЖ на указанную дату среза.
//	Сначала ищет нормы на ТС, если не находит, то продолжает искать по модели ТС.
//
Функция ПолучитьНормыРасходаТЖ(ТС, ЗаданнаяДата, ТЖ = Неопределено) ЭКСПОРТ
	мсвТС = Новый Массив;
	Если ТипЗнч(ТС) = Тип("Массив") Тогда
		Для Каждого ТекТС Из ТС Цикл
			мсвТС.Добавить(ТекТС);
			мсвТС.Добавить(ТекТС.уатМодель);
		КонецЦикла;
	Иначе
		мсвТС.Добавить(ТС);
		мсвТС.Добавить(ТС.уатМодель);
	КонецЕсли;
	
	//запрос по ТС
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НормыРасходаТехническихЖидкостей.Период КАК Период,
	|	ВЫБОР
	|		КОГДА НормыРасходаТехническихЖидкостей.МодельТС ССЫЛКА Справочник.уатМоделиТС
	|			ТОГДА НормыРасходаТехническихЖидкостей.МодельТС
	|		ИНАЧЕ НормыРасходаТехническихЖидкостей.МодельТС.уатМодель
	|	КОНЕЦ КАК МодельТС,
	|	ВЫБОР
	|		КОГДА НормыРасходаТехническихЖидкостей.МодельТС ССЫЛКА Справочник.ТранспортныеСредства
	|			ТОГДА НормыРасходаТехническихЖидкостей.МодельТС
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ТС,
	|	НормыРасходаТехническихЖидкостей.ГСМ,
	|	НормыРасходаТехническихЖидкостей.Норма,
	|	НормыРасходаТехническихЖидкостей.НормаНаМоточас,
	|	НормыРасходаТехническихЖидкостей.ЛинейнаяНорма,
	|	ВЫБОР
	|		КОГДА НормыРасходаТехническихЖидкостей.Норма = 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НормаНаОснТопливо,
	|	ВЫБОР
	|		КОГДА НормыРасходаТехническихЖидкостей.МодельТС ССЫЛКА Справочник.ТранспортныеСредства
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	РегистрСведений.уатНормыРасходаТехническихЖидкостей.СрезПоследних(
	|			&Период,
	|			МодельТС В (&ТСМодели)
	|			//УСЛОВИЕ ТЖ
	|			) КАК НормыРасходаТехническихЖидкостей
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	Запрос.УстановитьПараметр("Период", ЗаданнаяДата);
	Запрос.УстановитьПараметр("ТСМодели", мсвТС);
	Если ЗначениеЗаполнено(ТЖ) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//УСЛОВИЕ ТЖ", " И ГСМ = &ТЖ");
		Запрос.УстановитьПараметр("ТЖ", ТЖ);
	КонецЕсли;
	
	Рез = Запрос.Выполнить().Выгрузить();
	
	//удаляем лишние строки, поскольку приоритет норм для ТС выше, чем для моделей
	мсвСтрокУдалить = Новый Массив;
	Если Рез.Количество() > 1 Тогда
		Для Каждого ТекСтрокаНормы Из Рез Цикл
			//строки с приоритетом = 2 (это модели)
			Если ТекСтрокаНормы.Приоритет = 2 Тогда
				Продолжить;
			КонецЕсли;
			
			мсвСтрокиПоиска = Рез.НайтиСтроки(Новый Структура("МодельТС, ГСМ, Приоритет", ТекСтрокаНормы.МодельТС, ТекСтрокаНормы.ГСМ, 2));
			Для Каждого ТекСтрокаЛишняя Из мсвСтрокиПоиска Цикл //нашли лишние строки по модели
				мсвСтрокУдалить.Добавить(ТекСтрокаЛишняя);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	Для Каждого ТекСтрокаДляУдаления Из мсвСтрокУдалить Цикл
		Рез.Удалить(ТекСтрокаДляУдаления);
	КонецЦикла;
	
	Возврат Рез;
КонецФункции // уатПолучитьНормыРасходаТЖ

функция уатПолучитьНормыРасходаГСМ(ТС, ЗаданнаяДата, ГСМ, Организация = Неопределено) Экспорт 
	Возврат ПолучитьНормыРасходаГСМ(ТС, ЗаданнаяДата, ГСМ, Организация);
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ РАБОТЫ С ОТЧЕТАМИ

// Функция возвращает строку для подстановки в условие запроса и от вида сравнения 
// заполняет структуру параметров.
// Если не задан параметр ПутьКДанным, то надо заменить "#" на имя поля,
//
// Параметры:
//	СтрокаОтбора - ЭлементОтбора - текущая строка отбора
//	Параметры	 - Структура	 - Структура параметров запроса или построителя запроса
//	ПутьКДанным	 - Строка		 - Путь к полю в запросе (ИмяТаблицы.Номенклатура.Код)
//
// Возвращаемое значение:
//	Строка - Строка подстановки в условие запроса
//
Функция СформироватьСтрокуОтбора(СтрокаОтбора, Параметры=Неопределено, ПутьКДанным="#") Экспорт
	
	СтрокаУсловия="";
	Попытка
		ИмяПараметра	= СтрЗаменить(СтрокаОтбора.ПутьКДанным,".", "");
		ВидСравн		= СтрокаОтбора.ВидСравнения;
	Исключение
		Возврат СтрокаУсловия;
	КонецПопытки;
	
	Если ТипЗнч(Параметры)<>Тип("Структура") Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	Если ТипЗнч(ПутьКДанным)<>Тип("Строка") Тогда
		ПутьКДанным = "#";
	КонецЕсли;
	
	ТипПараметра = 1;
	Если ВидСравн = ВидСравнения.Равно Тогда
		СтрокаУсловия = ПутьКДанным+" = &"+ИмяПараметра;
	ИначеЕсли ВидСравн= ВидСравнения.НеРавно Тогда
		СтрокаУсловия = ПутьКДанным+" <> &"+ИмяПараметра;
	ИначеЕсли ВидСравн= ВидСравнения.ВСписке Тогда
		СтрокаУсловия = ПутьКДанным+" В (&"+ИмяПараметра+")";
	ИначеЕсли ВидСравн= ВидСравнения.ВСпискеПоИерархии Тогда
		СтрокаУсловия = ПутьКДанным+" В ИЕРАРХИИ (&"+ИмяПараметра+")";
	ИначеЕсли ВидСравн= ВидСравнения.ВИерархии Тогда
		СтрокаУсловия = ПутьКДанным+" В ИЕРАРХИИ (&"+ИмяПараметра+")";	
	ИначеЕсли ВидСравн= ВидСравнения.НеВСписке Тогда
		СтрокаУсловия = "(НЕ "+ПутьКДанным+" В (&"+ИмяПараметра+"))";
	ИначеЕсли ВидСравн= ВидСравнения.НеВСпискеПоИерархии Тогда
		СтрокаУсловия = "(НЕ "+ПутьКДанным+" В ИЕРАРХИИ (&"+ИмяПараметра+"))";
	ИначеЕсли ВидСравн= ВидСравнения.НеВИерархии Тогда
		СтрокаУсловия = "(НЕ "+ПутьКДанным+" В ИЕРАРХИИ (&"+ИмяПараметра+"))";
	ИначеЕсли ВидСравн= ВидСравнения.Больше Тогда
		СтрокаУсловия = ПутьКДанным+">&"+ИмяПараметра;
	ИначеЕсли ВидСравн= ВидСравнения.БольшеИлиРавно Тогда
		СтрокаУсловия = ПутьКДанным+">=&"+ИмяПараметра;
	ИначеЕсли ВидСравн= ВидСравнения.Меньше Тогда
		СтрокаУсловия = ПутьКДанным+"<&"+ИмяПараметра;
	ИначеЕсли ВидСравн= ВидСравнения.МеньшеИлиРавно Тогда
		СтрокаУсловия = ПутьКДанным+"<=&"+ИмяПараметра;
	ИначеЕсли ВидСравн= ВидСравнения.Содержит Тогда
		СтрокаУсловия = ПутьКДанным+" ПОДОБНО &"+ИмяПараметра;
		ТипПараметра  = 2;
	ИначеЕсли ВидСравн= ВидСравнения.НеСодержит Тогда
		СтрокаУсловия = "(НЕ "+ПутьКДанным+" ПОДОБНО &"+ИмяПараметра+")";
		ТипПараметра  = 2;
	ИначеЕсли ВидСравн= ВидСравнения.Интервал Тогда
		СтрокаУсловия = ПутьКДанным+" > &"+ИмяПараметра+"С
		|	И "+ПутьКДанным+" < &"+ИмяПараметра+"По";
		ТипПараметра  = 3;
	ИначеЕсли ВидСравн= ВидСравнения.ИнтервалВключаяГраницы Тогда
		СтрокаУсловия = ПутьКДанным+" >= &"+ИмяПараметра+"С
		|	И "+ПутьКДанным+" <= &"+ИмяПараметра+"По";
		ТипПараметра  = 3;
	ИначеЕсли ВидСравн= ВидСравнения.ИнтервалВключаяНачало Тогда
		СтрокаУсловия = ПутьКДанным+" >= &"+ИмяПараметра+"С
		|	И "+ПутьКДанным+" < &"+ИмяПараметра+"По";
		ТипПараметра  = 3;
	ИначеЕсли ВидСравн= ВидСравнения.ИнтервалВключаяОкончание Тогда
		СтрокаУсловия = ПутьКДанным+" > &"+ИмяПараметра+"С
		|	И "+ПутьКДанным+" <= &"+ИмяПараметра+"По";
		ТипПараметра  = 3;
	КонецЕсли;
	
	Если ТипПараметра=1 Тогда
		Параметры.Вставить(ИмяПараметра, СтрокаОтбора.Значение);
	ИначеЕсли ТипПараметра=2 Тогда
		Параметры.Вставить(ИмяПараметра, "%"+СтрокаОтбора.Значение+"%");
	ИначеЕсли ТипПараметра=3 Тогда
		Параметры.Вставить(ИмяПараметра+"С", СтрокаОтбора.ЗначениеС);
		Параметры.Вставить(ИмяПараметра+"По", СтрокаОтбора.ЗначениеПо);
	КонецЕсли;
	
	Возврат СтрокаУсловия;
	
КонецФункции // отСформироватьСтрокуОтбора()


/////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ДЛЯ РАБОТЫ С ПУТ. ЛИСТАМИ

// Процедура выполняет проверку корректности заполнения путевого листа
//
// Параметры:
//  УчетнаяПолитика - учетная политика
//  ПутевойЛист  - проверяемый путевой лист
//  Отказ        - отказ
Процедура уатПроверкаКорректностиПЛ(Организация, ПутевойЛист, Отказ) ЭКСПОРТ
	уатОбщегоНазначения.уатПроверкаКорректностиПЛ(Организация, ПутевойЛист, Отказ);
	
	Если ПутевойЛист.ТранспортноеСредство.уатДатаВводаВЭксплуатацию = '00010101'
		ИЛИ ПутевойЛист.ТранспортноеСредство.уатДатаВводаВЭксплуатацию > ПутевойЛист.ДатаВыезда Тогда
		ТекстСообщения = "Транспортное средство """ + уатОбщегоНазначения.уатПредставлениеТС(ПутевойЛист.ТранспортноеСредство)
		+ """ не введено в эксплуатацию на дату выезда!";
		Сообщить(ТекстСообщения, СтатусСообщения.Важное);
		Отказ = Истина;
	КонецЕсли;
	Если ПутевойЛист.ТранспортноеСредство.уатДатаВыбытия <> '00010101'
		И ПутевойЛист.ТранспортноеСредство.уатДатаВыбытия < ПутевойЛист.ДатаВозвращения Тогда
		ТекстСообщения = "Транспортное средство """ + уатОбщегоНазначения.уатПредставлениеТС(ПутевойЛист.ТранспортноеСредство)
		+ """ выведено из эксплуатации до даты возвращения!";
		Сообщить(ТекстСообщения, СтатусСообщения.Важное);
		Отказ = Истина;
	КонецЕсли;
	
	Для Каждого ТекСтрокаПрицеп Из ПутевойЛист.Прицепы Цикл
		Для Каждого ТекСтрока Из ПутевойЛист.Задание Цикл
			Если ТекСтрокаПрицеп.ТС = ТекСтрока.Прицеп1 ИЛИ ТекСтрокаПрицеп.ТС = ТекСтрока.Прицеп2 Тогда
				ТекстСообщения = "Прицеп/оборудование """ + уатОбщегоНазначения.уатПредставлениеТС(ТекСтрокаПрицеп.ТС)
				+ """ не должно одновременно находиться и в табличной части ""Прицепы"", и в табличной части ""Задание""!";
				Сообщить(ТекстСообщения, СтатусСообщения.Важное);
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры // утПроверкаКорректностиПЛ       

// Функция возвращает Истина в случае использования ТС какой-либо системы GPS
//
// Параметры:
//  ТС - Ссылка на транспортное средство
Функция уатПроверитьИспользованиеGPS(ТС) ЭКСПОРТ
	
	флИспользование = Ложь;
	
	Если Константы.уатИспользоватьЦСМ.Получить() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ItobПривязкиТерминаловСрезПоследних.Объект
		|ИЗ
		|	РегистрСведений.ItobПривязкиТерминалов.СрезПоследних КАК ItobПривязкиТерминаловСрезПоследних
		|ГДЕ
		|	ItobПривязкиТерминаловСрезПоследних.ТерминалУстановлен
		|	И ItobПривязкиТерминаловСрезПоследних.Объект = &ТС";
		Запрос.УстановитьПараметр("ТС", ТС);                                               
		Результат = Запрос.Выполнить().Выгрузить();
		
		флИспользование = (Результат.Количество() > 0);
	КонецЕсли;
	
	Если НЕ флИспользование Тогда
		Если Константы.уатИспользоватьDynafleet.Получить() 
			ИЛИ Константы.уатИспользоватьOmnicomm.Получить()
			ИЛИ Константы.уатИспользоватьPositionReport.Получить()
			ИЛИ Константы.уатИспользоватьАвтотрекер.Получить()
			ИЛИ Константы.уатИспользоватьСКАУТ.Получить()
			ИЛИ Константы.уатИспользоватьWialon.Получить()
			ИЛИ Константы.уатИспользоватьАвтоГРАФ.Получить() Тогда
			
			флИспользование = ЗначениеЗаполнено(ТС.уатИДвСистемеНавигации);
		КонецЕсли;
	КонецЕсли;
	
	Возврат флИспользование;
	
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ РАБОТЫ С БИЗНЕС-ПРОЦЕССАМИ

// Функция возвращает флаг согласования документа
//
Функция ДокументСогласован(ДокументСсылка) Экспорт
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатСогласование.Ссылка
	|ИЗ
	|	БизнесПроцесс.уатСогласование КАК уатСогласование
	|ГДЕ
	|	уатСогласование.Предмет = &ДокументСсылка
	|	И уатСогласование.Завершен
	|	И (уатСогласование.РезультатСогласования = ЗНАЧЕНИЕ(Перечисление.уатРезультатыСогласования.Согласовано)
	|			ИЛИ уатСогласование.РезультатСогласования = ЗНАЧЕНИЕ(Перечисление.уатРезультатыСогласования.СогласованоСЗамечаниями))
	|	И НЕ уатСогласование.ПометкаУдаления");
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	РезЗапроса = Запрос.Выполнить();
	
	Возврат (НЕ РезЗапроса.Пустой());
КонецФункции

// Функция возвращает статус согласования документа
//Возвращаемое значение:
//	Структура с ключами
//		- Код - код статуса
//		- Статус - строковое представление статуса
//		- Ссылка - ссылка на бизнес-процесс согласования
//
Функция СтатусСогласования(ДокументСсылка) Экспорт
	Рез = Новый Структура("Код, Статус, Ссылка");
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатСогласование.Ссылка,
	|	уатСогласование.Стартован,
	|	уатСогласование.Завершен
	|ИЗ
	|	БизнесПроцесс.уатСогласование КАК уатСогласование
	|ГДЕ
	|	уатСогласование.Предмет = &ДокументСсылка
	|	И НЕ уатСогласование.ПометкаУдаления");
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	РезЗапроса = Запрос.Выполнить();
	
	Если РезЗапроса.Пустой() Тогда
		Рез.Код = 0;
		Рез.Статус = "Не согласован";
	Иначе
		Выборка = РезЗапроса.Выбрать();
		Выборка.Следующий();
		Если НЕ Выборка.Стартован Тогда
			Рез.Код = 1;
			Рез.Статус = "Не согласован";
			Рез.Ссылка = Выборка.Ссылка;
		ИначеЕсли Выборка.Завершен Тогда
			Рез.Код = 3;
			Рез.Статус = "Согласован";
			Рез.Ссылка = Выборка.Ссылка;
		Иначе
			Рез.Код = 2;
			Рез.Статус = "На согласовании";
			Рез.Ссылка = Выборка.Ссылка;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

// Функция создает новый бизнес-процесс
//
Процедура СоздатьБизнесПроцессСогласования(ДокументСсылка,Настройка) Экспорт
	
	СпрСсылка = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация,Настройка);
	Если СпрСсылка.Пользователи.Количество() = 0 Тогда
		Сообщить("Для данных документов в обработке ""Установка прав и настроек"" 
			|не выбрана ""Группа исполнителей согласования"".
			|Согласование не было создано!", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
				
	НовыйБП = БизнесПроцессы.уатСогласование.СоздатьБизнесПроцесс();
	НовыйБП.Дата = ТекущаяДата();
	НовыйБП.УстановитьНовыйНомер();
	НовыйБП.Заполнить(ДокументСсылка);
	
	Для Каждого ТекСтрока Из СпрСсылка.Пользователи Цикл
		НоваяСтрока = НовыйБП.Исполнители.Добавить();
		НоваяСтрока.Исполнитель = ТекСтрока.Пользователь;
	КонецЦикла;
	
	Попытка
		НовыйБП.Записать();
		НовыйБП.Старт();
		Сообщить("Для документа было создано согласование """ + НовыйБП.Ссылка + """");
	Исключение
		Сообщить("Для документа не удалось создать согласование!", СтатусСообщения.Внимание);
	КонецПопытки;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С РЕГЛАМЕНТНЫМИ ЗАДАНИЯМИ ЗАГРУЗКИ GSM

// Процедура выполняет регламентное задание ЗагрузкаДанныхDynafleet
//
Процедура ЗагрузкаДанныхDynafleet() Экспорт
	ЗаписьЖурналаРегистрации("Загрузка данных Dynafleet", УровеньЖурналаРегистрации.Информация,,, "Начало сеанса загрузки");
	
	ВсеОК = Истина;
	
	Период = Константы.уатИнтервалДетализацииDynafleet.Получить();
	Логин  = Константы.уатЛогинВСистемеDynafleet.Получить();
	Пароль = Константы.уатПарольВСистемеDynafleet.Получить();
	
	СтруктураДопПараметры = Константы.уатПараметрыРеглЗаданияЗагрузкаДанныхDynafleet.Получить().Получить();
	
	Если ТипЗнч(СтруктураДопПараметры) <> Тип("Структура") Тогда
		СтруктураДопПараметры = Новый Структура;
	КонецЕсли;
	Если (НЕ СтруктураДопПараметры.Свойство("РежимЗагрузки")) Тогда
		СтруктураДопПараметры.Вставить("РежимЗагрузки", 0);
	КонецЕсли;
	Если (НЕ СтруктураДопПараметры.Свойство("ФайлЗагрузки")) Тогда
		СтруктураДопПараметры.Вставить("ФайлЗагрузки", "");
	КонецЕсли;
	
	Если СтруктураДопПараметры.РежимЗагрузки = 2 И (НЕ ЗначениеЗаполнено(СтруктураДопПараметры.ФайлЗагрузки)) Тогда 
		Сообщить("Не указан файл загрузки Dynafleet!", СтатусСообщения.Внимание);
		ЗаписьЖурналаРегистрации("Загрузка данных Dynafleet", УровеньЖурналаРегистрации.Ошибка,,, "Не указан файл загрузки");
		ВсеОК = Ложь;
	КонецЕсли;
	
	Если ВсеОК Тогда
		ТекстОшибки = "";
		Если СтруктураДопПараметры.РежимЗагрузки = 0 Тогда
			КодВозврата = уатЗащищенныеФункцииСервер_проф.ЗагрузитьМестоположениеТСDynafleet(Логин, Пароль, Период, ТекстОшибки);
		Иначе
			КодВозврата = уатЗащищенныеФункцииСервер_проф.ЗагрузитьМестоположениеТСизФайла(Период, СтруктураДопПараметры.ФайлЗагрузки, ТекстОшибки);
		КонецЕсли;
		
		Если КодВозврата Тогда
			Сообщить(ТекстОшибки, СтатусСообщения.Внимание);
			ЗаписьЖурналаРегистрации("Загрузка данных Dynafleet", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("Загрузка данных Dynafleet", УровеньЖурналаРегистрации.Информация,,, "Окончание сеанса загрузки");
КонецПроцедуры

// Процедура выполняет регламентное задание ЗагрузкаДанныхOmnicomm
//
Процедура ЗагрузкаДанныхOmnicomm() Экспорт
	ЗаписьЖурналаРегистрации("Загрузка данных Omnicomm", УровеньЖурналаРегистрации.Информация,,, "Начало сеанса загрузки");
	
	ВсеОК = Истина;
	
	СтруктураДопПараметры = Константы.уатПараметрыРеглЗаданияЗагрузкаДанныхOmnicomm.Получить().Получить();
	Если ТипЗнч(СтруктураДопПараметры) <> Тип("Структура") Тогда
		СтруктураДопПараметры = Новый Структура;
	КонецЕсли;
	Если (НЕ СтруктураДопПараметры.Свойство("ЗагрузитьПробегИРасходГСМ")) Тогда
		СтруктураДопПараметры.Вставить("ЗагрузитьПробегИРасходГСМ", Ложь);
	КонецЕсли;
	Если (НЕ СтруктураДопПараметры.Свойство("ЗагрузитьДополнительныеСведения")) Тогда
		СтруктураДопПараметры.Вставить("ЗагрузитьДополнительныеСведения", Ложь);
	КонецЕсли;
	Если (НЕ СтруктураДопПараметры.Свойство("СписокТС")) Тогда
		СтруктураДопПараметры.Вставить("СписокТС", Новый Массив);
	КонецЕсли;
	Если (НЕ СтруктураДопПараметры.Свойство("ИнтервалЗагрузки")) Тогда
		СтруктураДопПараметры.Вставить("ИнтервалЗагрузки", "День");
	КонецЕсли;
	
	Если СтруктураДопПараметры.СписокТС.Количество() = 0 Тогда
		Сообщить("Не выбрано ни одно ТС", СтатусСообщения.Внимание);
		ЗаписьЖурналаРегистрации("Загрузка данных Omnicomm", УровеньЖурналаРегистрации.Ошибка,,, "Не выбрано ни одно ТС");
		ВсеОК = Ложь;
	КонецЕсли;
	
	Если (НЕ СтруктураДопПараметры.ЗагрузитьПробегИРасходГСМ) И (НЕ СтруктураДопПараметры.ЗагрузитьДополнительныеСведения) Тогда
		Сообщить("Не указаны параметры: ""Загрузить пробег и расход ГСМ"", ""Загрузить доп. сведения""", СтатусСообщения.Внимание);
		ЗаписьЖурналаРегистрации("Загрузка данных Omnicomm", УровеньЖурналаРегистрации.Ошибка,,, "Не указаны параметры: ""Загрузить пробег и расход ГСМ"", ""Загрузить доп. сведения""");
		ВсеОК = Ложь;
	КонецЕсли;
	
	//расчет интервала по параметрам задания
	Если ВсеОК Тогда
		ДатаПо = ТекущаяДата();
		Если СтруктураДопПараметры.ИнтервалЗагрузки = "Год" Тогда
			ДатаС = ДобавитьМесяц(ДатаПо, -12);
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Полугодие" Тогда
			ДатаС = ДобавитьМесяц(ДатаПо, -6);
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Квартал" Тогда
			ДатаС = ДобавитьМесяц(ДатаПо, -3);
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Месяц" Тогда
			ДатаС = ДобавитьМесяц(ДатаПо, -1);
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Неделя" Тогда
			ДатаС = ДатаПо - 7*24*3600;
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Сутки" Тогда
			ДатаС = ДатаПо - 24*3600;
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "12часов" Тогда
			ДатаС = ДатаПо - 12*3600;
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Час" Тогда
			ДатаС = ДатаПо - 3600;
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Полчаса" Тогда
			ДатаС = ДатаПо - 1800;
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "10минут" Тогда
			ДатаС = ДатаПо - 600;
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Минута" Тогда
			ДатаС = ДатаПо - 60;
		Иначе //если не указан, считаем что сутки
			ДатаС = ДатаПо - 24*3600;
		КонецЕсли;
	КонецЕсли;
	
	Если ВсеОК Тогда
		таблТС = Новый ТаблицаЗначений;
		таблТС.Колонки.Добавить("Ссылка");
		таблТС.Колонки.Добавить("ИДвСистемеНавигации");
		Для Каждого ТекТС Из СтруктураДопПараметры.СписокТС Цикл
			НоваяСтрока = таблТС.Добавить();
			НоваяСтрока.Ссылка = ТекТС;
			НоваяСтрока.ИДвСистемеНавигации = ТекТС.уатИДвСистемеНавигации;
		КонецЦикла;
		
		ТекстОшибки = "";
		
		Если СтруктураДопПараметры.ЗагрузитьДополнительныеСведения Тогда // загружаем дополнительные сведения
			КодВозврата = уатЗащищенныеФункцииСервер_проф.ЗагрузитьДополнительныеСведенияТСOmnicommВРегистр(ДатаС, ДатаПо, таблТС, ТекстОшибки);
		КонецЕсли;
		Если КодВозврата = 0 И СтруктураДопПараметры.ЗагрузитьПробегИРасходГСМ Тогда // загружаем пробег и расход ГСМ
			КодВозврата = уатЗащищенныеФункцииСервер_проф.ЗагрузитьМестоположениеТСOmnicommВРегистр(ДатаС, ДатаПо, таблТС, ТекстОшибки);
		КонецЕсли;
		
		Если КодВозврата Тогда
			Сообщить(ТекстОшибки, СтатусСообщения.Внимание);
			ЗаписьЖурналаРегистрации("Загрузка данных Omnicomm", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("Загрузка данных Omnicomm", УровеньЖурналаРегистрации.Информация,,, "Окончание сеанса загрузки");
КонецПроцедуры

Процедура ЗагрузкаДанныхСКАУТ() Экспорт 
	
	ЗаписьЖурналаРегистрации("Загрузка данных СКАУТ", УровеньЖурналаРегистрации.Информация,,, "Начало сеанса загрузки");
	
	ВсеОК = Истина;
	
	СтруктураДопПараметры = Константы.уатПараметрыРеглЗаданияЗагрузкаДанныхСКАУТ.Получить().Получить();
	Если Не ТипЗнч(СтруктураДопПараметры) = Тип("Структура") Тогда
		СтруктураДопПараметры = Новый Структура;
	КонецЕсли;
	Если Не СтруктураДопПараметры.Свойство("ЗагрузитьПробегРасход") Тогда
		СтруктураДопПараметры.Вставить("ЗагрузитьПробегРасход", Ложь);
	КонецЕсли;
	Если Не СтруктураДопПараметры.Свойство("ЗагрузитьДопСведения") Тогда
		СтруктураДопПараметры.Вставить("ЗагрузитьДопСведения", Ложь);
	КонецЕсли;
	Если Не СтруктураДопПараметры.Свойство("МассивТС") Тогда
		СтруктураДопПараметры.Вставить("МассивТС", Новый Массив);
	КонецЕсли;
	Если Не СтруктураДопПараметры.Свойство("ИнтервалЗагрузки") Тогда
		СтруктураДопПараметры.Вставить("ИнтервалЗагрузки", "День");
	КонецЕсли;
	
	Если СтруктураДопПараметры.МассивТС.Количество() = 0 Тогда
		ЗаписьЖурналаРегистрации("Загрузка данных СКАУТ", УровеньЖурналаРегистрации.Ошибка,,, "Не выбрано ни одно ТС");
		ВсеОК = Ложь;
	КонецЕсли;
	
	Если (Не СтруктураДопПараметры.ЗагрузитьПробегРасход) И (Не СтруктураДопПараметры.ЗагрузитьДопСведения) Тогда
		ЗаписьЖурналаРегистрации("Загрузка данных СКАУТ", УровеньЖурналаРегистрации.Ошибка,,, "Не указаны параметры: ""Загрузить пробег и расход ГСМ"", ""Загрузить доп. сведения""");
		ВсеОК = Ложь;
	КонецЕсли;
	
	//расчет интервала по параметрам задания
	Если ВсеОК Тогда
		ДатаПо = ТекущаяДата();
		Если СтруктураДопПараметры.ИнтервалЗагрузки = "Год" Тогда
			ДатаС = ДобавитьМесяц(ДатаПо, -12);
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Полугодие" Тогда
			ДатаС = ДобавитьМесяц(ДатаПо, -6);
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Квартал" Тогда
			ДатаС = ДобавитьМесяц(ДатаПо, -3);
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Месяц" Тогда
			ДатаС = ДобавитьМесяц(ДатаПо, -1);
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Неделя" Тогда
			ДатаС = ДатаПо - 7*24*3600;
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Сутки" Тогда
			ДатаС = ДатаПо - 24*3600;
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "12часов" Тогда
			ДатаС = ДатаПо - 12*3600;
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Час" Тогда
			ДатаС = ДатаПо - 3600;
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Полчаса" Тогда
			ДатаС = ДатаПо - 1800;
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "10минут" Тогда
			ДатаС = ДатаПо - 600;
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Минута" Тогда
			ДатаС = ДатаПо - 60;
		Иначе //если не указан, считаем что сутки
			ДатаС = ДатаПо - 24*3600;
		КонецЕсли;
	КонецЕсли;
	
	Если ВсеОК Тогда
		ТекстОшибки = "";
		КодВозврата = 0;
		
		Если СтруктураДопПараметры.ЗагрузитьПробегРасход Тогда // загружаем пробег и расход ГСМ
			КодВозврата = уатЗащищенныеФункцииСервер_проф.ЗагрузитьМестоположениеПоТССКАУТ(ДатаС, ДатаПо, СтруктураДопПараметры.МассивТС, ТекстОшибки);
		КонецЕсли;
		
		Если КодВозврата=0 И СтруктураДопПараметры.ЗагрузитьДопСведения Тогда // загружаем дополнительные сведения
			КодВозврата = уатЗащищенныеФункцииСервер_проф.ЗагрузитьДополнительныеСведенияПоТССКАУТ(ДатаС, ДатаПо, СтруктураДопПараметры.МассивТС, ТекстОшибки);
		КонецЕсли;
		
		Если КодВозврата Тогда
			ЗаписьЖурналаРегистрации("Загрузка данных СКАУТ", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("Загрузка данных СКАУТ", УровеньЖурналаРегистрации.Информация,,, "Окончание сеанса загрузки");
	
КонецПроцедуры

Процедура ЗагрузкаДанныхWialon() Экспорт 
	
	ЗаписьЖурналаРегистрации("Загрузка данных Wialon", УровеньЖурналаРегистрации.Информация,,, "Начало сеанса загрузки");
	
	ВсеОК = Истина;
	
	СтруктураДопПараметры = Константы.уатПараметрыРеглЗаданияЗагрузкаДанныхWialon.Получить().Получить();
	Если Не ТипЗнч(СтруктураДопПараметры) = Тип("Структура") Тогда
		СтруктураДопПараметры = Новый Структура;
	КонецЕсли;
	Если Не СтруктураДопПараметры.Свойство("ЗагрузитьПробегРасход") Тогда
		СтруктураДопПараметры.Вставить("ЗагрузитьПробегРасход", Ложь);
	КонецЕсли;
	Если Не СтруктураДопПараметры.Свойство("ЗагрузитьДопСведения") Тогда
		СтруктураДопПараметры.Вставить("ЗагрузитьДопСведения", Ложь);
	КонецЕсли;
	Если Не СтруктураДопПараметры.Свойство("МассивТС") Тогда
		СтруктураДопПараметры.Вставить("МассивТС", Новый Массив);
	КонецЕсли;
	Если Не СтруктураДопПараметры.Свойство("ИнтервалЗагрузки") Тогда
		СтруктураДопПараметры.Вставить("ИнтервалЗагрузки", "День");
	КонецЕсли;
	
	Если СтруктураДопПараметры.МассивТС.Количество() = 0 Тогда
		ЗаписьЖурналаРегистрации("Загрузка данных Wialon", УровеньЖурналаРегистрации.Ошибка,,, "Не выбрано ни одно ТС");
		ВсеОК = Ложь;
	КонецЕсли;
	
	Если (Не СтруктураДопПараметры.ЗагрузитьПробегРасход) И (Не СтруктураДопПараметры.ЗагрузитьДопСведения) Тогда
		ЗаписьЖурналаРегистрации("Загрузка данных Wialon", УровеньЖурналаРегистрации.Ошибка,,, "Не указаны параметры: ""Загрузить пробег и расход ГСМ"", ""Загрузить доп. сведения""");
		ВсеОК = Ложь;
	КонецЕсли;
	
	//расчет интервала по параметрам задания
	Если ВсеОК Тогда
		ДатаПо = ТекущаяДата();
		Если СтруктураДопПараметры.ИнтервалЗагрузки = "Год" Тогда
			ДатаС = ДобавитьМесяц(ДатаПо, -12);
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Полугодие" Тогда
			ДатаС = ДобавитьМесяц(ДатаПо, -6);
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Квартал" Тогда
			ДатаС = ДобавитьМесяц(ДатаПо, -3);
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Месяц" Тогда
			ДатаС = ДобавитьМесяц(ДатаПо, -1);
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Неделя" Тогда
			ДатаС = ДатаПо - 7*24*3600;
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Сутки" Тогда
			ДатаС = ДатаПо - 24*3600;
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "12часов" Тогда
			ДатаС = ДатаПо - 12*3600;
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Час" Тогда
			ДатаС = ДатаПо - 3600;
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Полчаса" Тогда
			ДатаС = ДатаПо - 1800;
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "10минут" Тогда
			ДатаС = ДатаПо - 600;
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Минута" Тогда
			ДатаС = ДатаПо - 60;
		Иначе //если не указан, считаем что сутки
			ДатаС = ДатаПо - 24*3600;
		КонецЕсли;
	КонецЕсли;
	
	Если ВсеОК Тогда
		ТекстОшибки = "";
		КодВозврата = 0;
		
		Если СтруктураДопПараметры.ЗагрузитьПробегРасход Тогда // загружаем пробег и расход ГСМ
			КодВозврата = уатЗащищенныеФункцииСервер_проф.ЗагрузитьМестоположениеПоТСWialon(ДатаС, ДатаПо, СтруктураДопПараметры.МассивТС, ТекстОшибки);
		КонецЕсли;
		
		Если КодВозврата=0 И СтруктураДопПараметры.ЗагрузитьДопСведения Тогда // загружаем дополнительные сведения
			КодВозврата = уатЗащищенныеФункцииСервер_проф.ЗагрузитьДополнительныеСведенияПоТСWialon(ДатаС, ДатаПо, СтруктураДопПараметры.МассивТС, ТекстОшибки);
		КонецЕсли;
		
		Если КодВозврата Тогда
			ЗаписьЖурналаРегистрации("Загрузка данных Wialon", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("Загрузка данных Wialon", УровеньЖурналаРегистрации.Информация,,, "Окончание сеанса загрузки");
	
КонецПроцедуры

Процедура ЗагрузкаДанныхАвтоГРАФ() Экспорт 
	
	ЗаписьЖурналаРегистрации("Загрузка данных АвтоГРАФ", УровеньЖурналаРегистрации.Информация,,, "Начало сеанса загрузки");
	
	ВсеОК = Истина;
	
	СтруктураДопПараметры = Константы.уатПараметрыРеглЗаданияЗагрузкаДанныхАвтоГРАФ.Получить().Получить();
	Если Не ТипЗнч(СтруктураДопПараметры) = Тип("Структура") Тогда
		СтруктураДопПараметры = Новый Структура;
	КонецЕсли;
	Если Не СтруктураДопПараметры.Свойство("ЗагрузитьПробегРасход") Тогда
		СтруктураДопПараметры.Вставить("ЗагрузитьПробегРасход", Ложь);
	КонецЕсли;
	Если Не СтруктураДопПараметры.Свойство("ЗагрузитьДопСведения") Тогда
		СтруктураДопПараметры.Вставить("ЗагрузитьДопСведения", Ложь);
	КонецЕсли;
	Если Не СтруктураДопПараметры.Свойство("МассивТС") Тогда
		СтруктураДопПараметры.Вставить("МассивТС", Новый Массив);
	КонецЕсли;
	Если Не СтруктураДопПараметры.Свойство("ИнтервалЗагрузки") Тогда
		СтруктураДопПараметры.Вставить("ИнтервалЗагрузки", "День");
	КонецЕсли;
	
	Если СтруктураДопПараметры.МассивТС.Количество() = 0 Тогда
		ЗаписьЖурналаРегистрации("Загрузка данных АвтоГРАФ", УровеньЖурналаРегистрации.Ошибка,,, "Не выбрано ни одно ТС");
		ВсеОК = Ложь;
	КонецЕсли;
	
	Если (Не СтруктураДопПараметры.ЗагрузитьПробегРасход) И (Не СтруктураДопПараметры.ЗагрузитьДопСведения) Тогда
		ЗаписьЖурналаРегистрации("Загрузка данных АвтоГРАФ", УровеньЖурналаРегистрации.Ошибка,,, "Не указаны параметры: ""Загрузить пробег и расход ГСМ"", ""Загрузить доп. сведения""");
		ВсеОК = Ложь;
	КонецЕсли;
	
	//расчет интервала по параметрам задания
	Если ВсеОК Тогда
		ДатаПо = ТекущаяДата();
		Если СтруктураДопПараметры.ИнтервалЗагрузки = "Год" Тогда
			ДатаС = ДобавитьМесяц(ДатаПо, -12);
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Полугодие" Тогда
			ДатаС = ДобавитьМесяц(ДатаПо, -6);
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Квартал" Тогда
			ДатаС = ДобавитьМесяц(ДатаПо, -3);
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Месяц" Тогда
			ДатаС = ДобавитьМесяц(ДатаПо, -1);
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Неделя" Тогда
			ДатаС = ДатаПо - 7*24*3600;
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Сутки" Тогда
			ДатаС = ДатаПо - 24*3600;
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "12часов" Тогда
			ДатаС = ДатаПо - 12*3600;
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Час" Тогда
			ДатаС = ДатаПо - 3600;
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Полчаса" Тогда
			ДатаС = ДатаПо - 1800;
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "10минут" Тогда
			ДатаС = ДатаПо - 600;
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Минута" Тогда
			ДатаС = ДатаПо - 60;
		Иначе //если не указан, считаем что сутки
			ДатаС = ДатаПо - 24*3600;
		КонецЕсли;
	КонецЕсли;
	
	Если ВсеОК Тогда
		ТекстОшибки = "";
		КодВозврата = 0;
		
		Если СтруктураДопПараметры.ЗагрузитьПробегРасход Тогда // загружаем пробег и расход ГСМ
			КодВозврата = уатЗащищенныеФункцииСервер_проф.ЗагрузитьМестоположениеПоТСАвтоГРАФ(ДатаС, ДатаПо, СтруктураДопПараметры.МассивТС, ТекстОшибки);
		КонецЕсли;
		
		Если КодВозврата=0 И СтруктураДопПараметры.ЗагрузитьДопСведения Тогда // загружаем дополнительные сведения
			КодВозврата = уатЗащищенныеФункцииСервер_проф.ЗагрузитьДополнительныеСведенияПоТСАвтоГРАФ(ДатаС, ДатаПо, СтруктураДопПараметры.МассивТС, ТекстОшибки);
		КонецЕсли;
		
		Если КодВозврата Тогда
			ЗаписьЖурналаРегистрации("Загрузка данных АвтоГРАФ", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("Загрузка данных АвтоГРАФ", УровеньЖурналаРегистрации.Информация,,, "Окончание сеанса загрузки");
	
КонецПроцедуры

Процедура ЗагрузкаДанныхАвтотрекер() Экспорт
	
	ЗаписьЖурналаРегистрации("Загрузка данных Автотрекер", УровеньЖурналаРегистрации.Информация,,, "Начало сеанса загрузки");
	
	ВсеОК = Истина;
	
	СтруктураДопПараметры = Константы.уатПараметрыРеглЗаданияЗагрузкаДанныхАвтотрекер.Получить().Получить();
	Если Не ТипЗнч(СтруктураДопПараметры) = Тип("Структура") Тогда
		СтруктураДопПараметры = Новый Структура;
	КонецЕсли;
	Если Не СтруктураДопПараметры.Свойство("ЗагрузитьПробегРасход") Тогда
		СтруктураДопПараметры.Вставить("ЗагрузитьПробегРасход", Ложь);
	КонецЕсли;
	Если Не СтруктураДопПараметры.Свойство("ЗагрузитьДопСведения") Тогда
		СтруктураДопПараметры.Вставить("ЗагрузитьДопСведения", Ложь);
	КонецЕсли;
	Если Не СтруктураДопПараметры.Свойство("МассивТС") Тогда
		СтруктураДопПараметры.Вставить("МассивТС", Новый Массив);
	КонецЕсли;
	Если Не СтруктураДопПараметры.Свойство("ИнтервалЗагрузки") Тогда
		СтруктураДопПараметры.Вставить("ИнтервалЗагрузки", "День");
	КонецЕсли;
	
	Если СтруктураДопПараметры.МассивТС.Количество() = 0 Тогда
		ЗаписьЖурналаРегистрации("Загрузка данных Автотрекер", УровеньЖурналаРегистрации.Ошибка,,, "Не выбрано ни одно ТС");
		ВсеОК = Ложь;
	КонецЕсли;
	
	Если (Не СтруктураДопПараметры.ЗагрузитьПробегРасход) И (Не СтруктураДопПараметры.ЗагрузитьДопСведения) Тогда
		ЗаписьЖурналаРегистрации("Загрузка данных Автотрекер", УровеньЖурналаРегистрации.Ошибка,,, "Не указаны параметры: ""Загрузить пробег и расход ГСМ"", ""Загрузить доп. сведения""");
		ВсеОК = Ложь;
	КонецЕсли;
	
	//расчет интервала по параметрам задания
	Если ВсеОК Тогда
		ДатаПо = ТекущаяДата();
		Если СтруктураДопПараметры.ИнтервалЗагрузки = "Год" Тогда
			ДатаС = ДобавитьМесяц(ДатаПо, -12);
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Полугодие" Тогда
			ДатаС = ДобавитьМесяц(ДатаПо, -6);
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Квартал" Тогда
			ДатаС = ДобавитьМесяц(ДатаПо, -3);
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Месяц" Тогда
			ДатаС = ДобавитьМесяц(ДатаПо, -1);
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Неделя" Тогда
			ДатаС = ДатаПо - 7*24*3600;
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Сутки" Тогда
			ДатаС = ДатаПо - 24*3600;
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "12часов" Тогда
			ДатаС = ДатаПо - 12*3600;
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Час" Тогда
			ДатаС = ДатаПо - 3600;
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Полчаса" Тогда
			ДатаС = ДатаПо - 1800;
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "10минут" Тогда
			ДатаС = ДатаПо - 600;
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Минута" Тогда
			ДатаС = ДатаПо - 60;
		Иначе //если не указан, считаем что сутки
			ДатаС = ДатаПо - 24*3600;
		КонецЕсли;
	КонецЕсли;
	
	Если ВсеОК Тогда
		ТекстОшибки = "";
		КодВозврата = 0;
		
		Если СтруктураДопПараметры.ЗагрузитьПробегРасход Тогда // загружаем пробег и расход ГСМ
			КодВозврата = уатЗащищенныеФункцииСервер_проф.ЗагрузитьМестоположениеПоТСАвтотрекер(ДатаС, ДатаПо, СтруктураДопПараметры.МассивТС, ТекстОшибки);
		КонецЕсли;
		
		Если КодВозврата=0 И СтруктураДопПараметры.ЗагрузитьДопСведения Тогда // загружаем дополнительные сведения
			КодВозврата = уатЗащищенныеФункцииСервер_проф.ЗагрузитьДополнительныеСведенияПоТСАвтотрекер(ДатаС, ДатаПо, СтруктураДопПараметры.МассивТС, ТекстОшибки);
		КонецЕсли;
		
		Если КодВозврата Тогда
			ЗаписьЖурналаРегистрации("Загрузка данных Автотрекер", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("Загрузка данных Автотрекер", УровеньЖурналаРегистрации.Информация,,, "Окончание сеанса загрузки");
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////
// РЕМОНТЫ

Процедура уатОбновлениеПланаРемонтныхРабот() Экспорт
	
	ЗаписьЖурналаРегистрации("Обновление плана ремонтных работ", УровеньЖурналаРегистрации.Информация,,, "Начало процедуры обновления данных");
	
	ОбновитьПланыРемонтныхРабот();
	
	ЗаписьЖурналаРегистрации("Обновление плана ремонтных работ", УровеньЖурналаРегистрации.Информация,,, "Обновление данных завершено");
	
КонецПроцедуры

Процедура ОбновитьПланыРемонтныхРабот() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Метаданные.Обработки.Найти("ПланированиеРемонтныхРабот") = Неопределено Тогда 
		ЗаписьЖурналаРегистрации("Обновление плана ремонтных работ", УровеньЖурналаРегистрации.Ошибка,,, "Отсутствует обработка ""ПланированиеРемонтныхРабот"".");
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТранспортныеСредства.Ссылка КАК ТС,
	|	ТранспортныеСредства.уатОбъектЭксплуатации КАК ОбъектЭксплуатации
	|ИЗ
	|	Справочник.ТранспортныеСредства КАК ТранспортныеСредства
	|ГДЕ
	|	НЕ ТранспортныеСредства.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатУстановленныеАгрегатыСрезПоследних.ТранспортноеСредство,
	|	уатУстановленныеАгрегатыСрезПоследних.УзелОбъектаЭксплуатации
	|ИЗ
	|	РегистрСведений.уатУстановленныеАгрегаты.СрезПоследних(
	|			,
	|			СостояниеАгрегата = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.УстановленоВРаботе)
	|								ИЛИ СостояниеАгрегата = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.УстановленоВЗапас)) КАК уатУстановленныеАгрегатыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбщиеВидыРемонтов.Ссылка КАК ОбщийВидРемонта
	|ИЗ
	|	Справочник.ОбщиеВидыРемонтов КАК ОбщиеВидыРемонтов
	|ГДЕ
	|	НЕ ОбщиеВидыРемонтов.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧастотаПланированияРемонтов.Ссылка КАК ЧастотаПланирования
	|ИЗ
	|	Перечисление.ЧастотаПланированияРемонтов КАК ЧастотаПланированияРемонтов";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ОбработкаПланирования = Обработки["ПланированиеРемонтныхРабот"].Создать();
	
	ВыборкаТС = РезультатЗапроса[0].Выбрать();
	
	СоответствиеТСобъектам = Новый Соответствие();
	
	Пока ВыборкаТС.Следующий() Цикл 
		НоваяСтрока = ОбработкаПланирования.ОбъектыРемонтаКПланированию.Добавить();
		НоваяСтрока.ОбъектЭксплуатации = ВыборкаТС.ОбъектЭксплуатации;
		
		СоответствиеТСобъектам.Вставить(ВыборкаТС.ОбъектЭксплуатации, ВыборкаТС.ТС);
	КонецЦикла;
	
	ОбработкаПланирования.ОбщиеВидыРемонтовКПланированию.Загрузить(РезультатЗапроса[1].Выгрузить());
	ОбработкаПланирования.ЧастотыКПланированию.Загрузить(РезультатЗапроса[2].Выгрузить());
	
	ОбработкаПланирования.РассчитатьПланРемонтныхРабот();
	
	// Очистка регистра перед добавлением актуальных записей.
	НаборЗаписей = РегистрыСведений.уатПланированиеРемонтныхРабот.СоздатьНаборЗаписей();
	НаборЗаписей.Записать(Истина);
	
	Для Каждого ТекСтрокаПлана Из ОбработкаПланирования.Ремонты Цикл 
		ТекТС = СоответствиеТСобъектам.Получить(ТекСтрокаПлана.ОбъектЭксплуатации);
		Если ТекТС = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.уатПланированиеРемонтныхРабот.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ТС.Установить(ТекТС);
		НаборЗаписей.Отбор.ВидРемонта.Установить(ТекСтрокаПлана.ВидРемонта);
		
		Запись = НаборЗаписей.Добавить();
		Запись.ТС          = ТекТС;
		Запись.ВидРемонта  = ТекСтрокаПлана.ВидРемонта;
		Запись.ДатаРемонта = ТекСтрокаПлана.ДатаНачала;
		
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	
	Константы.уатДатаАктуальностиПланаРемонтныхРабот.Установить(ТекущаяДата());
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////
// ПОДКЛЮЧАЕМОЕ ОБОРУДОВАНИЕ

// Настраивает подключаемое оборудование в форме,
// устанавливает флаг ИспользоватьПодключаемоеОборудование в форме
// Параметры:
//   Форма - Форма, в которой необходимо настроить подключаемое оборудование
//
Процедура НастроитьПодключаемоеОборудование(Форма) Экспорт
	
	ТипыПодключенногоОборудования = уатОбщегоНазначенияПовтИсп_проф.ТипыПодключенногоОборудования();
	
	Форма.ИспользоватьПодключаемоеОборудование = ИспользоватьПодключаемоеОборудование(ТипыПодключенногоОборудования);
	
	//ЕстьТСД  =
	//	ТипыПодключенногоОборудования <> Неопределено
	//	И ТипыПодключенногоОборудования.Найти(Перечисления.ТипыПодключаемогоОборудования.ТерминалСбораДанных) <> Неопределено;
	//ЕстьВесы =
	//	ТипыПодключенногоОборудования <> Неопределено
	//	И ТипыПодключенногоОборудования.Найти(Перечисления.ТипыПодключаемогоОборудования.ЭлектронныеВесы) <> Неопределено;
	//
	//ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
	//	Форма.Элементы,
	//	"ТоварыЗагрузитьДанныеИзТСД",
	//	"Видимость",
	//	Форма.ИспользоватьПодключаемоеОборудование И ЕстьТСД);
	//
	//ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
	//	Форма.Элементы,
	//	"ВыгрузитьДанныеВТСД",
	//	"Видимость",
	//	Форма.ИспользоватьПодключаемоеОборудование И ЕстьТСД);
	//
	//ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
	//	Форма.Элементы,
	//	"ТоварыПолучитьВес",
	//	"Видимость",
	//	Форма.ИспользоватьПодключаемоеОборудование И ЕстьВесы);
	
КонецПроцедуры

// Проверяет, что включена ф.о "Использовать подключаемое оборудование",
// настроено ли оборудование и авторизовался пользователь,
// а не внешний пользователь.
Функция ИспользоватьПодключаемоеОборудование(ТипыПодключенногоОборудования = Неопределено) Экспорт
	
	ИспользоватьПодключаемоеОборудование = ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование");
	ПользовательАвторизовался 			 = ТипЗнч(Пользователи.АвторизованныйПользователь()) = Тип("СправочникСсылка.Пользователи");
	
	Если ТипыПодключенногоОборудования = Неопределено Тогда
		ТипыПодключенногоОборудования = уатОбщегоНазначенияПовтИсп_проф.ТипыПодключенногоОборудования();
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		Если НЕ РольДоступна("ПолныеПрава") И НЕ РольДоступна("ИспользованиеПодключаемогоОборудования") Тогда
			Сообщить("Для использования подключаемого оборудования необходимо включить роль ""Использование подключаемого оборудования""!");
			ИспользоватьПодключаемоеОборудование = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат
		ИспользоватьПодключаемоеОборудование
		И ПользовательАвторизовался
		И ТипыПодключенногоОборудования <> Неопределено
		И ТипыПодключенногоОборудования.Количество() > 0;
												 
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////
// ПЕЧАТЬ

// Формирует структуру, содержащую значения реквизитов шапки документа.
//
// Параметры: 
//  ДокументОбъект - объект документа для формирования структуры шапки, 
//
// Возвращаемое значение:
//  Сформированная структура.
//
Функция СформироватьСтруктуруШапкиДокумента(ДокСсылка) Экспорт
	
	СтруктураШапкиДокумента = Новый Структура;
	СтруктураШапкиДокумента.Вставить("Ссылка", ДокСсылка);
	СтруктураШапкиДокумента.Вставить("Дата", ДокСсылка.Дата);
	Для каждого Реквизит Из ДокСсылка.Метаданные().Реквизиты Цикл
		СтруктураШапкиДокумента.Вставить(Реквизит.Имя, ДокСсылка[Реквизит.Имя]);
	КонецЦикла;
	
	Возврат СтруктураШапкиДокумента;
	
КонецФункции // СформироватьСтруктуруШапкиДокумента()
