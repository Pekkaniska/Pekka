// Получает значение константы по имени //
Функция пкПолучитьЗначениеКонстанты (ИмяКонстанты) Экспорт
	Возврат Константы[ИмяКонстанты].Получить();
КонецФункции	

// Преобразует объект (хранилище значения) в XML //
Функция пкСериализовать_ (ОбъектСериализации) Экспорт
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(Запись,ОбъектСериализации);
	Рез = Запись.Закрыть();
	Возврат Рез;
КонецФункции	

// Преобразует XML в объект (хранилище значения) //
Функция пкДесериализовать_ (СериализованнаяСтруктураДанных) Экспорт
	ЧтениеДанных = Новый ЧтениеXML;
	ЧтениеДанных.УстановитьСтроку(СериализованнаяСтруктураДанных);
	СтруктураДанных = СериализаторXDTO.ПрочитатьXML(ЧтениеДанных);
	ЧтениеДанных.Закрыть();
	Возврат СтруктураДанных;
КонецФункции

// Записывает XML в файл //
Функция пкЗаписатьОбъектВXML (Объект) Экспорт
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку("UTF-8");
	ЗаписатьXML(Запись,Объект);
	Возврат Запись.Закрыть();
КонецФункции	

// Читает XML из файла //
Функция пкПрочитатьОбъектИзXML (СтрокаОбъект) Экспорт
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(СокрЛП(СтрокаОбъект));
	Рез = ПрочитатьXML(Чтение);
	Возврат Рез;
КонецФункции	

// Хеширует пароль //
Функция пкХэшировать(Пароль) Экспорт
	Хэш         = Новый ХешированиеДанных(ХешФункция.SHA1);
	Хэш.Добавить(Пароль);
	ХэшПароля   = СтрЗаменить(Строка(Хэш.ХешСумма)," ","");
	Возврат ХэшПароля;
КонецФункции	

// Функция создает объект ИнтернетПочтовыйПрофиль и настраивает его
//
// Параметры
//  УчетнаяЗапись - СправочникСсылка, СправочникОбъект УчетныеЗаписиЭлектроннойПочты
//
// Возвращаемое значение:
//   ИнтернетПочтовыйПрофиль
//
Функция пкПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись) Экспорт

	Профиль = РаботаСПочтовымиСообщениямиСлужебный.ИнтернетПочтовыйПрофиль(УчетнаяЗапись,ЛОЖЬ);	
	Возврат Профиль;

КонецФункции // ПолучитьИнтернетПочтовоеПодключение()

// Записывает ошибку //
Процедура пкЗаписатьОшибку(Ответ, Текст, ОписаниеОшибки = "", ВерхняяОшибка = Ложь) Экспорт
	
	//Нас интересуют ошибки более глубокого уровня. 
	//Т.е. если у нас есть ошибка в дочерней функции, которая вызывает ошибку в родительской, 
	//То нас интересует - что случилось в дочерней. 
	Если ВерхняяОшибка И НЕ Ответ.Ошибка.ЕстьОшибка Тогда 
		Ответ.Ошибка.ЕстьОшибка = Истина; 
		Ответ.Ошибка.ТекстОшибки = Текст + Символы.ПС + "При сообщении ошибки администратору - назовите код ошибки!"; 
		ЗаписьЖурналаРегистрации("Регистрация мобильного устройства",УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки); 
	КонецЕсли; 
	
	Если Ответ.Ошибка.ЕстьОшибка Тогда 
		Возврат 
	КонецЕсли; 
	
	Ответ.Ошибка.ЕстьОшибка = Истина; 
	Ответ.Ошибка.ТекстОшибки = Текст + Символы.ПС + "При сообщении ошибки администратору - назовите код ошибки!"; 
	ЗаписьЖурналаРегистрации("Регистрация мобильного устройства", УровеньЖурналаРегистрации.Ошибка,,,?(ЗначениеЗаполнено(ОписаниеОшибки),ОписаниеОшибки, Текст)); 
	
	Если НЕ ВерхняяОшибка Тогда 
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
КонецПроцедуры

Процедура пкУстановитьНомерПринятогоСообщения(СтрокаXML) Экспорт	
	//	<v8msg:Message xmlns:v8msg="http://v8.1c.ru/messages">
	//	<v8msg:Header>
	//		<v8msg:ExchangePlan>ОС_ОбменСМобильнымиУстройствами</v8msg:ExchangePlan>
	//		<v8msg:To>ЦБ</v8msg:To>
	//		<v8msg:From>0026</v8msg:From>
	//		<v8msg:MessageNo>129</v8msg:MessageNo>
	//		<v8msg:ReceivedNo>127</v8msg:ReceivedNo>
	//	</v8msg:Header>
	//	<v8msg:Body/>
	//</v8msg:Message>
	
	КодУзла = "";
	НомерПринятого = "";
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(СтрокаXML);
	Пока Чтение.Прочитать() Цикл
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда 
			Если Чтение.Имя = "v8msg:From" Тогда
				Чтение.Прочитать();
				КодУзла = Чтение.Значение;
			КонецЕсли;	
			Если Чтение.Имя = "v8msg:MessageNo" Тогда
				Чтение.Прочитать();
				НомерПринятого = Чтение.Значение;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
	
	Если ЗначениеЗаполнено(КодУзла) И ЗначениеЗаполнено(НомерПринятого) Тогда
		Узел = ПланыОбмена.пкОбменСМобильнымиУстройствами.НайтиПоКоду(КодУзла);
		Эл                = Узел.ПолучитьОбъект();
		Эл.НомерПринятого = Число(НомерПринятого) - 1;
		Эл.Записать();
	КонецЕсли;	
КонецПроцедуры	

/////////////////////////////////////////////////////////////////////////////////////

//Рарус Владимир Подрезов 15.08.2016
//Универсальная обработка Обновления, вызываемая при стандартном обновлении

#Область ПервоначальноеЗаполнениеИОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
//Рарус Владимир Подрезов Миграция БУ 15.08.2016
	//Обработчик = Обработчики.Добавить();
	////Если установлена версия (например 1.1.1.2) тогад вызывется только для перехода на указанную версию, 
	////а если установлено "*", то вызывается при любом обновлении
	//Обработчик.Версия				= "0.0.0.1"; 
	//Обработчик.Процедура			= "пкОбщийМодульСервер.пкПроверитьДобавитьДополнительныеСчетаХозрасчетный";
	//Обработчик.Опциональный			= Ложь;
//Рарус Владимир Подрезов Конец
	
КонецПроцедуры	

Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = "УправлениеАрендойТехники";
	Описание.Версия = "0.0.0.1";
	Описание.ОсновнойСерверныйМодуль = "пкОбщийМодульСервер";
	
	// Требуется библиотека стандартных подсистем.
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	//ЗарегистрироватьОбработчикиОбновления(Обработчики);
	//ВариантыОтчетов.ДобавитьОбработчикиПолногоОбновления(Обработчики, "0.0.0.1");
	
КонецПроцедуры

Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////

//Рарус Владимир Подрезов Миграция БУ 15.08.2016
Процедура пкПроверитьДобавитьДополнительныеСчетаХозрасчетный() Экспорт
	
	// 60.21 - СчетГруппа
	Счет = ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиВал;
	Если НЕ Счет.ЗапретитьИспользоватьВПроводках Тогда
		Попытка
			СчетОбъект = Счет.ПолучитьОбъект();
			
			СчетОбъект.ЗапретитьИспользоватьВПроводках = Истина;
			СчетОбъект.Наименование = "Группа " + СчетОбъект.Наименование;
			СчетОбъект.Записать();
			
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось создать счет %1.'"), Счет);
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка
				,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
	СчетГруппа = Счет;
	
	// 60.21.1 Копия счета 60.21
	Счет = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.21.1");
	Если Счет = Неопределено ИЛИ Счет.Пустая() Тогда
		СчетОбъект = СчетГруппа.Скопировать();
	Иначе
		СчетОбъект = Счет.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(СчетОбъект, Счет);
	КонецЕсли;
	
	СчетОбъект.Родитель							= СчетГруппа;
	СчетОбъект.Код								= "60.21.1";
	СчетОбъект.КодБыстрогоВыбора				= "60211";
	СчетОбъект.ЗапретитьИспользоватьВПроводках	= Ложь;
	СчетОбъект.Наименование						= Прав(СчетГруппа.Наименование, СтрДлина(СчетГруппа.Наименование)-7);
	СчетОбъект.Вид								= СчетГруппа.Вид;
	СчетОбъект.Количественный					= Ложь;
	СчетОбъект.Валютный							= Истина;
	СчетОбъект.УчетПоПодразделениям				= Истина;
	СчетОбъект.НалоговыйУчет					= Истина;
	
	СчетОбъект.ВидыСубконто.Очистить();
	Для Каждого текВидСубконто Из СчетГруппа.ВидыСубконто Цикл
		НоваяСтрокаСубконто = СчетОбъект.ВидыСубконто.Добавить();
		НоваяСтрокаСубконто.ВидСубконто		= текВидСубконто.ВидСубконто;
		НоваяСтрокаСубконто.Суммовой		= текВидСубконто.Суммовой;
		НоваяСтрокаСубконто.Количественный	= текВидСубконто.Количественный;
		НоваяСтрокаСубконто.Валютный	 	= текВидСубконто.Валютный;
		НоваяСтрокаСубконто.ТолькоОбороты	= текВидСубконто.ТолькоОбороты;
	КонецЦикла;
	
	Попытка
		СчетОбъект.Записать();
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось создать счет %1.'"), Счет);
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка
			,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	// 60.21.2 «Векселя выданные (в валюте)» (Субконто 1 – Контрагенты, Субконто 2 – Договоры контрагентов, Субконто 3 – Ценные бумаги, валютный учет)
	Счет = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.21.2");
	Если Счет = Неопределено ИЛИ Счет.Пустая() Тогда
		СчетОбъект = ПланыСчетов.Хозрасчетный.СоздатьСчет();
	Иначе
		СчетОбъект = Счет.ПолучитьОбъект();
	КонецЕсли;
	
	СчетОбъект.Родитель							= СчетГруппа;
	СчетОбъект.Код								= "60.21.2";
	СчетОбъект.КодБыстрогоВыбора				= "60212";
	СчетОбъект.ЗапретитьИспользоватьВПроводках	= Ложь;
	СчетОбъект.Наименование						= "Векселя выданные (в валюте)";
	СчетОбъект.Вид								= СчетГруппа.Вид;
	СчетОбъект.Количественный					= Ложь;
	СчетОбъект.Валютный							= Истина;
	СчетОбъект.УчетПоПодразделениям				= Истина;
	СчетОбъект.НалоговыйУчет					= Истина;
	
	СчетОбъект.ВидыСубконто.Очистить();
	
	НоваяСтрокаСубконто = СчетОбъект.ВидыСубконто.Добавить();
	НоваяСтрокаСубконто.ВидСубконто		= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	НоваяСтрокаСубконто.Суммовой		= Истина;
	НоваяСтрокаСубконто.Количественный	= Ложь;
	НоваяСтрокаСубконто.Валютный	 	= Истина;
	
	НоваяСтрокаСубконто = СчетОбъект.ВидыСубконто.Добавить();
	НоваяСтрокаСубконто.ВидСубконто		= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;
	НоваяСтрокаСубконто.Суммовой 		= Истина;
	НоваяСтрокаСубконто.Количественный	= Ложь;
	НоваяСтрокаСубконто.Валютный	 	= Истина;
	
	НоваяСтрокаСубконто = СчетОбъект.ВидыСубконто.Добавить();
	НоваяСтрокаСубконто.ВидСубконто		= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ЦенныеБумаги;
	НоваяСтрокаСубконто.Суммовой 		= Истина;
	НоваяСтрокаСубконто.Количественный	= Ложь;
	НоваяСтрокаСубконто.Валютный	 	= Истина;
	
	Попытка
		СчетОбъект.Записать();
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось создать счет %1.'"), Счет);
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка
			,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	// 76.35 в счет 76.35.1
	Счет = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиУЕ;
	Если НЕ Счет.ЗапретитьИспользоватьВПроводках Тогда
		Попытка
			СчетОбъект = Счет.ПолучитьОбъект();
			
			СчетОбъект.ЗапретитьИспользоватьВПроводках = Истина;
			СчетОбъект.Наименование = "Группа " + СчетОбъект.Наименование;
			СчетОбъект.Записать();
			
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось создать счет %1.'"), Счет);
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка
				,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
	СчетГруппа = Счет;
	
	// 76.35.1 Расчеты с прочими поставщиками и подрядчиками (в у.е.)
	Счет = ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.35.1");
	Если Счет = Неопределено ИЛИ Счет.Пустая() Тогда
		СчетОбъект = СчетГруппа.Скопировать();
	Иначе
		СчетОбъект = Счет.ПолучитьОбъект();
	КонецЕсли;
	
	СчетОбъект.Родитель							= СчетГруппа;
	СчетОбъект.Код								= "76.35.1";
	СчетОбъект.КодБыстрогоВыбора				= "76351";
	СчетОбъект.ЗапретитьИспользоватьВПроводках	= Ложь;
	СчетОбъект.Наименование						= Прав(СчетГруппа.Наименование, СтрДлина(СчетГруппа.Наименование)-7);
	СчетОбъект.Вид								= СчетГруппа.Вид;
	СчетОбъект.Количественный					= Ложь;
	СчетОбъект.Валютный							= Истина;
	СчетОбъект.УчетПоПодразделениям				= Истина;
	СчетОбъект.НалоговыйУчет					= Истина;
	
	СчетОбъект.ВидыСубконто.Очистить();
	Для Каждого текВидСубконто Из СчетГруппа.ВидыСубконто Цикл
		НоваяСтрокаСубконто = СчетОбъект.ВидыСубконто.Добавить();
		НоваяСтрокаСубконто.ВидСубконто		= текВидСубконто.ВидСубконто;
		НоваяСтрокаСубконто.Суммовой		= текВидСубконто.Суммовой;
		НоваяСтрокаСубконто.Количественный	= текВидСубконто.Количественный;
		НоваяСтрокаСубконто.Валютный	 	= текВидСубконто.Валютный;
		НоваяСтрокаСубконто.ТолькоОбороты	= текВидСубконто.ТолькоОбороты;
	КонецЦикла;
	
	Попытка
		СчетОбъект.Записать();
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось создать счет %1.'"), Счет);
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка
			,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	// 76.35.2 Учет арендных обязательств (в у.е.),
	Счет = ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.35.2");
	Если Счет = Неопределено ИЛИ Счет.Пустая() Тогда
		СчетОбъект = ПланыСчетов.Хозрасчетный.СоздатьСчет();
	Иначе
		СчетОбъект = Счет.ПолучитьОбъект();
	КонецЕсли;
	
	СчетОбъект.Родитель							= СчетГруппа;
	СчетОбъект.Код								= "76.35.2";
	СчетОбъект.КодБыстрогоВыбора				= "76352";
	СчетОбъект.ЗапретитьИспользоватьВПроводках	= Ложь;
	СчетОбъект.Наименование						= "Учет арендных обязательств (в у.е.)";
	СчетОбъект.Вид								= СчетГруппа.Вид;
	СчетОбъект.Количественный					= Ложь;
	СчетОбъект.Валютный							= Истина;
	СчетОбъект.УчетПоПодразделениям				= Истина;
	СчетОбъект.НалоговыйУчет					= Истина;
	
	СчетОбъект.ВидыСубконто.Очистить();
	
	НоваяСтрокаСубконто = СчетОбъект.ВидыСубконто.Добавить();
	НоваяСтрокаСубконто.ВидСубконто		= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	НоваяСтрокаСубконто.Суммовой		= Истина;
	НоваяСтрокаСубконто.Количественный	= Ложь;
	НоваяСтрокаСубконто.Валютный	 	= Истина;
	
	НоваяСтрокаСубконто = СчетОбъект.ВидыСубконто.Добавить();
	НоваяСтрокаСубконто.ВидСубконто		= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;
	НоваяСтрокаСубконто.Суммовой 		= Истина;
	НоваяСтрокаСубконто.Количественный	= Ложь;
	НоваяСтрокаСубконто.Валютный	 	= Истина;
	
	Попытка
		СчетОбъект.Записать();
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось создать счет %1.'"), Счет);
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка
			,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	// 76.35.3 Лизинговые платежи (в у.е.),
	Счет = ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.35.3");
	Если Счет = Неопределено ИЛИ Счет.Пустая() Тогда
		СчетОбъект = ПланыСчетов.Хозрасчетный.СоздатьСчет();
	Иначе
		СчетОбъект = Счет.ПолучитьОбъект();
	КонецЕсли;
	
	СчетОбъект.Родитель							= СчетГруппа;
	СчетОбъект.Код								= "76.35.3";
	СчетОбъект.КодБыстрогоВыбора				= "76353";
	СчетОбъект.ЗапретитьИспользоватьВПроводках	= Ложь;
	СчетОбъект.Наименование						= "Лизинговые платежи (в у.е.)";
	СчетОбъект.Вид								= СчетГруппа.Вид;
	СчетОбъект.Количественный					= Ложь;
	СчетОбъект.Валютный							= Истина;
	СчетОбъект.УчетПоПодразделениям				= Истина;
	СчетОбъект.НалоговыйУчет					= Истина;
	
	СчетОбъект.ВидыСубконто.Очистить();
	
	НоваяСтрокаСубконто = СчетОбъект.ВидыСубконто.Добавить();
	НоваяСтрокаСубконто.ВидСубконто		= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	НоваяСтрокаСубконто.Суммовой		= Истина;
	НоваяСтрокаСубконто.Количественный	= Ложь;
	НоваяСтрокаСубконто.Валютный	 	= Истина;
	
	НоваяСтрокаСубконто = СчетОбъект.ВидыСубконто.Добавить();
	НоваяСтрокаСубконто.ВидСубконто		= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;
	НоваяСтрокаСубконто.Суммовой 		= Истина;
	НоваяСтрокаСубконто.Количественный	= Ложь;
	НоваяСтрокаСубконто.Валютный	 	= Истина;
	
	Попытка
		СчетОбъект.Записать();
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось создать счет %1.'"), Счет);
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка
			,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	// 76.35.4 Авансы по договорам лизинга (в у.е.),
	Счет = ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.35.4");
	Если Счет = Неопределено ИЛИ Счет.Пустая() Тогда
		СчетОбъект = ПланыСчетов.Хозрасчетный.СоздатьСчет();
	Иначе
		СчетОбъект = Счет.ПолучитьОбъект();
	КонецЕсли;
	
	СчетОбъект.Родитель							= СчетГруппа;
	СчетОбъект.Код								= "76.35.4";
	СчетОбъект.КодБыстрогоВыбора				= "76354";
	СчетОбъект.ЗапретитьИспользоватьВПроводках	= Ложь;
	СчетОбъект.Наименование						= "Авансы по договорам лизинга (в у.е.)";
	СчетОбъект.Вид								= СчетГруппа.Вид;
	СчетОбъект.Количественный					= Ложь;
	СчетОбъект.Валютный							= Истина;
	СчетОбъект.УчетПоПодразделениям				= Истина;
	СчетОбъект.НалоговыйУчет					= Истина;
	
	СчетОбъект.ВидыСубконто.Очистить();
	
	НоваяСтрокаСубконто = СчетОбъект.ВидыСубконто.Добавить();
	НоваяСтрокаСубконто.ВидСубконто		= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	НоваяСтрокаСубконто.Суммовой		= Истина;
	НоваяСтрокаСубконто.Количественный	= Ложь;
	НоваяСтрокаСубконто.Валютный	 	= Истина;
	
	НоваяСтрокаСубконто = СчетОбъект.ВидыСубконто.Добавить();
	НоваяСтрокаСубконто.ВидСубконто		= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;
	НоваяСтрокаСубконто.Суммовой 		= Истина;
	НоваяСтрокаСубконто.Количественный	= Ложь;
	НоваяСтрокаСубконто.Валютный	 	= Истина;
	
	Попытка
		СчетОбъект.Записать();
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось создать счет %1.'"), Счет);
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка
			,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	// 76.35.5 Выкуп лизингового имущества (в у.е.).
	Счет = ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.35.5");
	Если Счет = Неопределено ИЛИ Счет.Пустая() Тогда
		СчетОбъект = ПланыСчетов.Хозрасчетный.СоздатьСчет();
	Иначе
		СчетОбъект = Счет.ПолучитьОбъект();
	КонецЕсли;
	
	СчетОбъект.Родитель							= СчетГруппа;
	СчетОбъект.Код								= "76.35.5";
	СчетОбъект.КодБыстрогоВыбора				= "76355";
	СчетОбъект.ЗапретитьИспользоватьВПроводках	= Ложь;
	СчетОбъект.Наименование						= "Выкуп лизингового имущества (в у.е.)";
	СчетОбъект.Вид								= СчетГруппа.Вид;
	СчетОбъект.Количественный					= Ложь;
	СчетОбъект.Валютный							= Истина;
	СчетОбъект.УчетПоПодразделениям				= Истина;
	СчетОбъект.НалоговыйУчет					= Истина;
	
	СчетОбъект.ВидыСубконто.Очистить();
	
	НоваяСтрокаСубконто = СчетОбъект.ВидыСубконто.Добавить();
	НоваяСтрокаСубконто.ВидСубконто		= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	НоваяСтрокаСубконто.Суммовой		= Истина;
	НоваяСтрокаСубконто.Количественный	= Ложь;
	НоваяСтрокаСубконто.Валютный	 	= Истина;
	
	НоваяСтрокаСубконто = СчетОбъект.ВидыСубконто.Добавить();
	НоваяСтрокаСубконто.ВидСубконто		= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;
	НоваяСтрокаСубконто.Суммовой 		= Истина;
	НоваяСтрокаСубконто.Количественный	= Ложь;
	НоваяСтрокаСубконто.Валютный	 	= Истина;
	
	Попытка
		СчетОбъект.Записать();
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось создать счет %1.'"), Счет);
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка
			,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	//012 НМА полученные в пользование, Субконто 1 – Нематериальные активы, Субконто 2 – Контрагенты;
	Счет = ПланыСчетов.Хозрасчетный.НайтиПоКоду("012");
	Если Счет = Неопределено ИЛИ Счет.Пустая() Тогда
		СчетОбъект = ПланыСчетов.Хозрасчетный.СоздатьСчет();
	Иначе
		СчетОбъект = Счет.ПолучитьОбъект();
	КонецЕсли;
	
	СчетОбъект.Забалансовый						= Истина;
	СчетОбъект.Код								= "012";
	СчетОбъект.КодБыстрогоВыбора				= "012";
	СчетОбъект.ЗапретитьИспользоватьВПроводках	= Ложь;
	СчетОбъект.Наименование						= "НМА полученные в пользование";
	СчетОбъект.Вид								= ВидСчета.АктивноПассивный;
	СчетОбъект.Количественный					= Ложь;
	СчетОбъект.Валютный							= Ложь;
	СчетОбъект.УчетПоПодразделениям				= Истина;
	СчетОбъект.НалоговыйУчет					= Ложь;
	
	СчетОбъект.ВидыСубконто.Очистить();
	
	НоваяСтрокаСубконто = СчетОбъект.ВидыСубконто.Добавить();
	НоваяСтрокаСубконто.ВидСубконто		= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы;
	НоваяСтрокаСубконто.Суммовой		= Истина;
	НоваяСтрокаСубконто.Количественный	= Ложь;
	НоваяСтрокаСубконто.Валютный	 	= Ложь;
	
	НоваяСтрокаСубконто = СчетОбъект.ВидыСубконто.Добавить();
	НоваяСтрокаСубконто.ВидСубконто		= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	НоваяСтрокаСубконто.Суммовой 		= Истина;
	НоваяСтрокаСубконто.Количественный	= Ложь;
	НоваяСтрокаСубконто.Валютный	 	= Ложь;
	
	Попытка
		СчетОбъект.Записать();
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось создать счет %1.'"), Счет);
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка
			,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	//013 Материальные активы на забалансе, Субконто 1 – Номенклатура, Субконто 2 – Подразделения.
	Счет = ПланыСчетов.Хозрасчетный.НайтиПоКоду("013");
	Если Счет = Неопределено ИЛИ Счет.Пустая() Тогда
		СчетОбъект = ПланыСчетов.Хозрасчетный.СоздатьСчет();
	Иначе
		СчетОбъект = Счет.ПолучитьОбъект();
	КонецЕсли;
	
	СчетОбъект.Забалансовый						= Истина;
	СчетОбъект.Код								= "013";
	СчетОбъект.КодБыстрогоВыбора				= "013";
	СчетОбъект.ЗапретитьИспользоватьВПроводках	= Ложь;
	СчетОбъект.Наименование						= "Материальные активы на забалансе";
	СчетОбъект.Вид								= ВидСчета.АктивноПассивный;
	СчетОбъект.Количественный					= Истина;
	СчетОбъект.Валютный							= Ложь;
	СчетОбъект.УчетПоПодразделениям				= Истина;
	СчетОбъект.НалоговыйУчет					= Ложь;
	
	СчетОбъект.ВидыСубконто.Очистить();
	
	НоваяСтрокаСубконто = СчетОбъект.ВидыСубконто.Добавить();
	НоваяСтрокаСубконто.ВидСубконто		= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	НоваяСтрокаСубконто.Суммовой		= Истина;
	НоваяСтрокаСубконто.Количественный	= Истина;
	НоваяСтрокаСубконто.Валютный	 	= Ложь;
	
	НоваяСтрокаСубконто = СчетОбъект.ВидыСубконто.Добавить();
	НоваяСтрокаСубконто.ВидСубконто		= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций;
	НоваяСтрокаСубконто.Суммовой		= Истина;
	НоваяСтрокаСубконто.Количественный	= Истина;
	НоваяСтрокаСубконто.Валютный	 	= Ложь;
	
	Попытка
		СчетОбъект.Записать();
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось создать счет %1.'"), Счет);
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка
			,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры
//Рарус Владимир Подрезов Конец

#КонецОбласти
//Рарус Владимир Подрезов Конец

/////////////////////////////////////////////////////////////////////////////////////

//++ PSA IA 31.10.2016
Функция ОбработатьСтрокуРазмещенияНаЯчейку(Номенклатура, Склад) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НоменклатурапкСкладскиеЯчейки.Ячейка как Ячейка,
	               |	СУММА(ЕСТЬNULL(ТоварыОрганизацийОстатки.КоличествоОстаток, 0)) КАК КоличествоНаСкладе
	               |ИЗ
	               |	Справочник.Номенклатура.пкСкладскиеЯчейки КАК НоменклатурапкСкладскиеЯчейки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизаций.Остатки(
	               |				,
	               |				АналитикаУчетаНоменклатуры.Номенклатура = &Номенклатура
	               |					И АналитикаУчетаНоменклатуры.Склад = &Склад) КАК ТоварыОрганизацийОстатки
	               |		ПО НоменклатурапкСкладскиеЯчейки.Ссылка = ТоварыОрганизацийОстатки.АналитикаУчетаНоменклатуры.Номенклатура
	               |			И НоменклатурапкСкладскиеЯчейки.Ячейка.Владелец = ТоварыОрганизацийОстатки.АналитикаУчетаНоменклатуры.Склад
	               |ГДЕ
	               |	НоменклатурапкСкладскиеЯчейки.Ссылка = &Номенклатура
	               |	И НоменклатурапкСкладскиеЯчейки.Ячейка.Владелец = &Склад
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НоменклатурапкСкладскиеЯчейки.Ячейка";
				   
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);			   
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.КоличествоНаСкладе=0 Тогда
			Возврат Выборка.Ячейка;
		Иначе	
			Возврат Неопределено;	
		КонецЕсли; 	
	Иначе	
		Возврат Неопределено;	
	КонецЕсли; 
	
КонецФункции // ()
//-- PSA IA 31.10.2016

//rarus+ saveld 06.11.2016
Функция ПолучитьВидРемонтаТО() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОбщиеВидыРемонтов.Ссылка
		|ПОМЕСТИТЬ ВТ_ОбщиеВиды
		|ИЗ
		|	Справочник.ОбщиеВидыРемонтов КАК ОбщиеВидыРемонтов
		|ГДЕ
		|	ОбщиеВидыРемонтов.пкТипРемонта = &ТипРемонта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВидыРемонтов.Ссылка
		|ИЗ
		|	ВТ_ОбщиеВиды КАК ВТ_ОбщиеВиды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыРемонтов КАК ВидыРемонтов
		|		ПО ВТ_ОбщиеВиды.Ссылка = ВидыРемонтов.ОбщийВидРемонта";
	
	Запрос.УстановитьПараметр("ТипРемонта", Перечисления.пкТипыРемонтов.ТО);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции	

Функция ПолучитьВидРемонтаПТО() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОбщиеВидыРемонтов.Ссылка
		|ПОМЕСТИТЬ ВТ_ОбщиеВиды
		|ИЗ
		|	Справочник.ОбщиеВидыРемонтов КАК ОбщиеВидыРемонтов
		|ГДЕ
		|	ОбщиеВидыРемонтов.пкТипРемонта = &ТипРемонта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВидыРемонтов.Ссылка
		|ИЗ
		|	ВТ_ОбщиеВиды КАК ВТ_ОбщиеВиды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыРемонтов КАК ВидыРемонтов
		|		ПО ВТ_ОбщиеВиды.Ссылка = ВидыРемонтов.ОбщийВидРемонта";
	
	Запрос.УстановитьПараметр("ТипРемонта", Перечисления.пкТипыРемонтов.ПТО);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

	
КонецФункции	

Функция ПолучитьВидРемонтаЧТО() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОбщиеВидыРемонтов.Ссылка
		|ПОМЕСТИТЬ ВТ_ОбщиеВиды
		|ИЗ
		|	Справочник.ОбщиеВидыРемонтов КАК ОбщиеВидыРемонтов
		|ГДЕ
		|	ОбщиеВидыРемонтов.пкТипРемонта = &ТипРемонта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВидыРемонтов.Ссылка
		|ИЗ
		|	ВТ_ОбщиеВиды КАК ВТ_ОбщиеВиды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыРемонтов КАК ВидыРемонтов
		|		ПО ВТ_ОбщиеВиды.Ссылка = ВидыРемонтов.ОбщийВидРемонта";
	
	Запрос.УстановитьПараметр("ТипРемонта", Перечисления.пкТипыРемонтов.ЧТО);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции	

Функция ПолучитьШтрихкодEAN13(ДокСсылка, НаименованиеПФ) Экспорт
	
	ТипыДокументов = Метаданные.ОпределяемыеТипы.пкТипыДокументовПФEAN13.Тип;
	
	Если ТипыДокументов.СодержитТип(ТипЗнч(ДокСсылка)) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	пкПечатныеФормыEAN13.Наименование КАК НаименованиеПФ
			|ПОМЕСТИТЬ ВТ
			|ИЗ
			|	Справочник.пкПечатныеФормыEAN13 КАК пкПечатныеФормыEAN13
			|ГДЕ
			|	пкПечатныеФормыEAN13.ПометкаУдаления = ЛОЖЬ
			|	И пкПечатныеФормыEAN13.ИспользоватьEAN13 = ИСТИНА
			|	И пкПечатныеФормыEAN13.НаименованиеТипаДокумента = &НаименованиеТипаДокумента
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	пкШтрихкодыПечатныхФормEAN13.НаименованиеПФ,
			|	пкШтрихкодыПечатныхФормEAN13.ШтрихкодEAN13
			|ПОМЕСТИТЬ ВТ1
			|ИЗ
			|	РегистрСведений.пкШтрихкодыПечатныхФормEAN13 КАК пкШтрихкодыПечатныхФормEAN13
			|ГДЕ
			|	пкШтрихкодыПечатныхФормEAN13.ДокументВладелец = &ДокументВладелец
			|	И пкШтрихкодыПечатныхФормEAN13.НаименованиеПФ = &НаименованиеПФ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ.НаименованиеПФ,
			|	ЕСТЬNULL(ВТ1.ШтрихкодEAN13, """") КАК ШтрихкодEAN13
			|ИЗ
			|	ВТ КАК ВТ
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ1 КАК ВТ1
			|		ПО ВТ.НаименованиеПФ = ВТ1.НаименованиеПФ";
	
		Запрос.УстановитьПараметр("НаименованиеТипаДокумента", Строка(ТипЗнч(ДокСсылка)));
		Запрос.УстановитьПараметр("ДокументВладелец", ДокСсылка);
		Запрос.УстановитьПараметр("НаименованиеПФ", НаименованиеПФ);
	                  
		РезультатЗапроса = Запрос.Выполнить();
	
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			
			Возврат ВыборкаДетальныеЗаписи.ШтрихкодEAN13;
			
		Иначе
			
			Возврат Неопределено;
			
		КонецЕсли;	
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
КонецФункции

//rarus- saveld 06.11.2016

//Рарус Владимир Подрезов 15.03.2017
Функция пкПолучитьПараметрыПользователяДО(тПользователь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяПользователяДО			= "";
	ПарольПользователяДО		= "";
	ПарольСохранен				= Ложь;
	
	Если Не ЗначениеЗаполнено(тПользователь) Тогда
		тПользователь = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(тПользователь) Тогда
		ЗапросП = Новый Запрос;
		ЗапросП.Текст = 
		"ВЫБРАТЬ
		|	пкПользователиДО.Пользователь,
		|	пкПользователиДО.ПользовательДО,
		|	пкПользователиДО.ПарольДО
		|ИЗ
		|	РегистрСведений.пкПользователиДО КАК пкПользователиДО
		|ГДЕ
		|	пкПользователиДО.Пользователь = &Пользователь";
		ЗапросП.УстановитьПараметр("Пользователь", тПользователь);
		
		РезЗапроса = ЗапросП.Выполнить().Выбрать();
		Если РезЗапроса.Следующий() Тогда
			ИмяПользователяДО			= РезЗапроса.ПользовательДО;
			ПарольПользователяДО		= РезЗапроса.ПарольДО;
			ПарольСохранен				= Истина;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Новый Структура("Пользователь, ПользовательДО, ПарольДО, ПарольСохранен", тПользователь, ИмяПользователяДО, ПарольПользователяДО, ПарольСохранен);
	
КонецФункции

Процедура пкПроверитьЗаписатьПараметрыПользователяДО(тПользователь, тПользовательДО, тПарольДО) Экспорт
	
	Если Не ЗначениеЗаполнено(тПользователь) Тогда
		тПользователь = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(тПользователь) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(тПользовательДО) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.пкПользователиДО.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(тПользователь, Истина);
	НаборЗаписей.Прочитать();
	НужноСохранять = (НаборЗаписей.Количество() = 0 
						ИЛИ НаборЗаписей[0].ПользовательДО <> тПользовательДО
						ИЛИ НаборЗаписей[0].ПарольДО <> тПарольДО);
	
	Если НужноСохранять Тогда
		Если НаборЗаписей.Количество() = 0 Тогда
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Пользователь	= тПользователь;
		Иначе
			НоваяЗапись = НаборЗаписей[0];
		КонецЕсли;
		
		НоваяЗапись.ПользовательДО	= тПользовательДО;
		НоваяЗапись.ПарольДО		= тПарольДО;
		
		Попытка
			НаборЗаписей.Записать(Истина);
		Исключение
			//тСообщение = Новый СообщениеПользователю;
			//тСообщение.Текст =  НСтр("ru='Не удалось Зарегестрировать пользователя ДО!:'") + ОписаниеОшибки();
			//тСообщение.Сообщить();
		КонецПопытки;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры
//Рарус Владимир Подрезов Конец

#ОБЛАСТЬ ДОПОЛНИТЕЛЬНЫЕНАСТРОЙКИ

//Функция получает значение настройки по имени     
Функция пкПолучитьДополнительнуюНастройку(Настройка, СообщатьОНезаполненных = Истина) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	// Если имя настройки не заполнено возвращаем НЕОПРЕДЕЛЕНО.
	Если НЕ ЗначениеЗаполнено(Настройка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗначениеНастройки = Неопределено;
	
	мНастройка = Неопределено;
	Попытка
		мНастройка = ПланыВидовХарактеристик.пкДополнительныеНастройки[Настройка];
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не найдена настройка:" + Настройка);	
		Возврат Неопределено;
	КонецПопытки;	
	
	Если ЗначениеЗаполнено(мНастройка) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	пкДополнительныеНастройкиPekkaniska.Значение
		|ИЗ
		|	РегистрСведений.пкДополнительныеНастройкиPekkaniska КАК пкДополнительныеНастройкиPekkaniska
		|ГДЕ
		|	пкДополнительныеНастройкиPekkaniska.Настройка = &Настройка";
		Запрос.УстановитьПараметр("Настройка",мНастройка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Значение;
		Иначе
			Если мНастройка.ТипЗначения = Новый ОписаниеТипов("Булево") Тогда
				Возврат Ложь;
			КонецЕсли;
			Если СообщатьОНезаполненных Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена дополнительная настройка программы: " + мНастройка);
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
КонецФункции

Функция пкПолучитьСвойствоОбъектаПоДополнительнойНастройке (Знач Объект, Знач Настройка) Экспорт
	Если ТипЗнч(Настройка) = Тип ("Строка") Тогда
		Настройка = пкПолучитьДополнительнуюНастройку(Настройка);	
	КонецЕсли;	
	
	мЗначение = Неопределено;
	
	Если Объект.Метаданные().ТабличныеЧасти.Найти("ДополнительныеРеквизиты") <> Неопределено Тогда
		ИскомаяСтрока = Объект.ДополнительныеРеквизиты.Найти(Настройка);
		Если ИскомаяСтрока <> Неопределено Тогда 
			Возврат ИскомаяСтрока.Значение;
		КонецЕсли;	
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополнительныеСведения.Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Объект = &Объект
	|	И ДополнительныеСведения.Свойство = &Свойство";
	Запрос.УстановитьПараметр("Объект"  ,Объект);
	Запрос.УстановитьПараметр("Свойство",Настройка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Значение;
	КонецЕсли;	
	
	Возврат мЗначение;
КонецФункции	

#КОНЕЦОБЛАСТИ