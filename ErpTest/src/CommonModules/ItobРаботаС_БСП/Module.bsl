////////////////////////////////////////////////////////////////////////////////
// Работа с БСП (сервер)
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

// Функция возвращает установленную версию Библиотеки стандартных подсистем
//
Функция ВерсияБСП()
	Возврат ItobРаботаС_БСП_ВызовСервераПовтИсп.ВерсияБСП();
КонецФункции

#Область ПодсистемаБазоваяФункциональность

// Предназначена для вставки в начало обработчика ПриСозданииНаСервере управляемых форм, которые размещаются на рабочем
// столе.
//
// Предотвращает открытие формы в ряде особых случаев:
//  - если рабочий стол открывается до завершения обновления данных ИБ
//   (исключается возможность заведомо ошибочного обращения к еще необновленным данным);
//  - если в разделенную ИБ выполняется вход в сеансе с неустановленным значением разделителя
//  ОбластьДанныхОсновныеДанные
//   (исключается возможность заведомо ошибочного обращения к разделенным данным из неразделенного сеанса);
//
// Не следует использовать в формах, которые используются перед началом работы системы,
// а также в формах, предназначенных для работы в неразделенном сеансе.
//
// Параметры:
//  Форма - УправляемаяФорма - ссылка на форму, которая создается.
//  Отказ - Булево - параметр переданный в обработчик формы ПриСозданииНаСервере.
//  СтандартнаяОбработка - Булево - параметр переданный в обработчик формы ПриСозданииНаСервере.
//
// Возвращаемое значение:
//  Булево - если Ложь, значит установлен отказ создания формы.
//
Функция ОбщегоНазначенияПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	Результат = Истина;
	
	Если ВерсияБСП() >= 22500 Тогда
		// Подсистема СтандартныеПодсистемы.БазоваяФункциональность 
		Если ItobОбщегоНазначенияСервер.ПодсистемаСуществует("СтандартныеПодсистемы.БазоваяФункциональность") Тогда
			ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("ОбщегоНазначения");
			Результат = ОбщийМодуль.ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Определяет режим эксплуатации информационной базы файловый (Истина) или серверный (Ложь).
// При проверке используется СтрокаСоединенияИнформационнойБазы, которую можно указать явно.
//
// Параметры:
//  СтрокаСоединенияИнформационнойБазы - Строка - параметр используется, если
//                 нужно проверить строку соединения не текущей информационной базы.
//
// Возвращаемое значение:
//  Булево.
//
Функция ИнформационнаяБазаФайловая(Знач СтрокаСоединенияИнформационнойБазы = "") Экспорт
	Результат = Истина;
	
	ВерсияБСП = ВерсияБСП();
	Если ВерсияБСП >= 22500 Тогда
		// Подсистема СтандартныеПодсистемы.БазоваяФункциональность 
		Если ItobОбщегоНазначенияСервер.ПодсистемаСуществует("СтандартныеПодсистемы.БазоваяФункциональность") Тогда
			ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("ОбщегоНазначения");
			Результат = ОбщийМодуль.ИнформационнаяБазаФайловая(СтрокаСоединенияИнформационнойБазы);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Получает имя значения перечисления как объекта метаданных.
//
// Параметры:
//  Значение - значение перечисления для которого необходимо получить имя перечисления.
//
// Возвращаемое значение:
//  Строка - имя значения перечисления как объекта метаданных.
//
Функция ИмяЗначенияПеречисления(Значение) Экспорт
	Результат = Неопределено;
	
	Если ВерсияБСП() >= 22500 Тогда
		// Подсистема СтандартныеПодсистемы.БазоваяФункциональность 
		Если ItobОбщегоНазначенияСервер.ПодсистемаСуществует("СтандартныеПодсистемы.БазоваяФункциональность") Тогда
			ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("ОбщегоНазначения");
			Результат = ОбщийМодуль.ИмяЗначенияПеречисления(Значение);
		КонецЕсли;
	КонецЕсли;
	
    Возврат Результат;
КонецФункции 

// Прочитать настройку подтверждения завершения работы программы
// для текущего пользователя.
// 
// Возвращаемое значение:
//   Булево   - значение настройки.
// 
Функция ЗапрашиватьПодтверждениеПриЗавершенииПрограммы() Экспорт
	Результат = Неопределено;
	
	Если ВерсияБСП() >= 22500 Тогда
		// Подсистема СтандартныеПодсистемы.БазоваяФункциональность 
		Если ItobОбщегоНазначенияСервер.ПодсистемаСуществует("СтандартныеПодсистемы.БазоваяФункциональность") Тогда
			ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("СтандартныеПодсистемыСервер");
			Результат = ОбщийМодуль.ЗапрашиватьПодтверждениеПриЗавершенииПрограммы();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти 

#Область ПодсистемаПользователи
	
Функция ТекущийПользователь() Экспорт
	Результат = Неопределено;
	
	Если ВерсияБСП() >= 22500 Тогда
		// Подсистема СтандартныеПодсистемы.Пользователи 
		Если ItobОбщегоНазначенияСервер.ПодсистемаСуществует("СтандартныеПодсистемы.Пользователи") Тогда
			ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("Пользователи");
			Результат = ОбщийМодуль.ТекущийПользователь();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает текущего пользователя или текущего внешнего пользователя,
// в зависимости от того, кто выполнил вход в сеанс.
//  Рекомендуется использовать в коде, который поддерживает работу в обоих случаях.
//
// Возвращаемое значение:
//  - СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи -.
// 
Функция АвторизованныйПользователь() Экспорт
	Результат = Неопределено;
	
	Если ВерсияБСП() >= 22500 Тогда
		// Подсистема СтандартныеПодсистемы.Пользователи 
		Если ItobОбщегоНазначенияСервер.ПодсистемаСуществует("СтандартныеПодсистемы.Пользователи") Тогда
			ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("Пользователи");
			Результат = ОбщийМодуль.АвторизованныйПользователь();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает доступность хотя бы одной из указанных ролей или полноправность
// пользователя (текущего или указанного).
//
// Параметры:
//  ИменаРолей   - Строка - имена ролей, разделенные запятыми, доступность которых проверяется.
//
//  Пользователь - Неопределено - проверяется текущий пользователь ИБ.
//               - СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи - осуществляется
//                    поиск пользователя ИБ по уникальному идентификатору, заданному в реквизите.
//                    ИдентификаторПользователяИБ. Если пользователь ИБ не найден, возвращается Ложь.
//               - ПользовательИнформационнойБазы - проверяется указанный пользователь ИБ.
//
//  УчитыватьПривилегированныйРежим - Булево - если задано Истина, тогда для текущего пользователя
//                 функция возвращает Истина, когда установлен привилегированный режим.
//
// Возвращаемое значение:
//  Булево - Истина, если хотя бы одна из указанных ролей доступна,
//           или функция ЭтоПолноправныйПользователь(Пользователь) возвращает Истина.
//
Функция РолиДоступны(ИменаРолей, Пользователь = Неопределено, УчитыватьПривилегированныйРежим = Истина) Экспорт
	Результат = Неопределено;
	
	Если ВерсияБСП() >= 22500 Тогда
		// Подсистема СтандартныеПодсистемы.Пользователи 
		Если ItobОбщегоНазначенияСервер.ПодсистемаСуществует("СтандартныеПодсистемы.Пользователи") Тогда
			ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("Пользователи");
			Результат = ОбщийМодуль.РолиДоступны(ИменаРолей, Пользователь, УчитыватьПривилегированныйРежим);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти 

#Область ПодсистемаПолучениеФайловИзИнтернета

// Возвращает настройку прокси сервера для доступа в Интернет со стороны
// клиента для текущего пользователя.
//
// Возвращаемое значение:
//   Соответствие - свойства:
//		ИспользоватьПрокси - использовать ли прокси-сервер.
//		НеИспользоватьПроксиДляЛокальныхАдресов - использовать ли прокси-сервер для локальных адресов.
//		ИспользоватьСистемныеНастройки - использовать ли системные настройки прокси-сервера.
//		Сервер       - адрес прокси-сервера.
//		Порт         - порт прокси-сервера.
//		Пользователь - имя пользователя для авторизации на прокси-сервере.
//		Пароль       - пароль пользователя.
//
Функция НастройкиПроксиНаКлиенте() Экспорт
	Результат = Неопределено;
	
	Если ВерсияБСП() >= 22500 Тогда
		// Подсистема СтандартныеПодсистемы.ПолучениеФайловИзИнтернета 
		Если ItobОбщегоНазначенияСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
			ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
			Результат = ОбщийМодуль.НастройкиПроксиНаКлиенте();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает параметры настройки прокси-сервера на стороне сервера 1С:Предприятие.
//
// Возвращаемое значение:
//   Соответствие - свойства:
//		ИспользоватьПрокси - использовать ли прокси-сервер.
//		НеИспользоватьПроксиДляЛокальныхАдресов - использовать ли прокси-сервер для локальных адресов.
//		ИспользоватьСистемныеНастройки - использовать ли системные настройки прокси-сервера.
//		Сервер       - адрес прокси-сервера.
//		Порт         - порт прокси-сервера.
//		Пользователь - имя пользователя для авторизации на прокси-сервере.
//		Пароль       - пароль пользователя.
//
Функция НастройкиПроксиНаСервере() Экспорт
	Результат = Неопределено;
	
	Если ВерсияБСП() >= 22500 Тогда
		// Подсистема СтандартныеПодсистемы.ПолучениеФайловИзИнтернета 
		Если ItobОбщегоНазначенияСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
			ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
			Результат = ОбщийМодуль.НастройкиПроксиНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти 

#Область ПодсистемаКонтактнаяИнформация

Функция УправлениеКонтактнойИнформациейПриСозданииНаСервере(ЭтаФорма, Объект, ГруппаКонтактнаяИнформация) Экспорт
	Результат = Неопределено;
	
	Если ВерсияБСП() >= 22500 Тогда
		// Подсистема СтандартныеПодсистемы.КонтактнаяИнформация 
		Если ItobОбщегоНазначенияСервер.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
			ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
			Результат = ОбщийМодуль.ПриСозданииНаСервере(ЭтаФорма, Объект, ГруппаКонтактнаяИнформация);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура УправлениеКонтактнойИнформациейПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, Отказ) Экспорт 
	Если ВерсияБСП() >= 22500 Тогда
		// Подсистема СтандартныеПодсистемы.КонтактнаяИнформация 
		Если ItobОбщегоНазначенияСервер.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
			ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
			ОбщийМодуль.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, Отказ);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, Отказ)()

#КонецОбласти 

#Область ПодсистемаПечать 
	
// Возвращает макет печатной формы по полному пути к макету.
//
// Параметры:
//  ПолныйПутьКМакету - Строка - полный путь к макету в формате:
//								"Документ.<ИмяДокумента>.<ИмяМакета>"
//								"Обработка.<ИмяОбработки>.<ИмяМакета>"
//								"ОбщийМакет.<ИмяМакета>".
// Возвращаемое значение:
//   ТабличныйДокумент - для макета типа MXL.
//	 ДвоичныеДанные    - для макетов DOC и ODT.
//
Функция ПолучитьМакет(ПолныйПутьКМакету) Экспорт
	Результат = Неопределено;
	
	Если ВерсияБСП() >= 22500 Тогда
		// Подсистема СтандартныеПодсистемы.Печать 
		Если ItobОбщегоНазначенияСервер.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
			ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
			Результат = ОбщийМодуль.МакетПечатнойФормы(ПолныйПутьКМакету);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти 
	
#Область ПодсистемаОтправкаSMS 
	
// Отправляет SMS через настроенного поставщика услуги, возвращает идентификатор сообщения.
//
// Параметры:
//  НомераПолучателей  - Массив - массив строк номеров получателей в формате +7ХХХХХХХХХХ;
//  Текст              - Строка - текст сообщения, максимальная длина у операторов может быть разной;
//  ИмяОтправителя     - Строка - имя отправителя, которое будет отображаться вместо номера у получателей.
//  ПеревестиВТранслит - Булево - Истина, если требуется переводить текст сообщения в транслит перед отправкой.
//
// Возвращаемое значение:
//  Структура:
//    * ОтправленныеСообщения - Массив - массив структур:
//      ** НомерПолучателя - Строка.
//      ** ИдентификаторСообщения - Строка.
//    * ОписаниеОшибки - Строка - пользовательское представление ошибки, если пустая строка,
//                                то ошибки нет.
Функция ОтправитьSMS(НомераПолучателей, Знач Текст, ИмяОтправителя = "", ПеревестиВТранслит = Ложь) Экспорт
	Результат = Неопределено;
	
	Если ВерсияБСП() >= 22500 Тогда
		// Подсистема СтандартныеПодсистемы.ОтправкаSMS 
		Если ItobОбщегоНазначенияСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ОтправкаSMS") Тогда
			ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("ОтправкаSMS");
			Результат = ОбщийМодуль.ОтправитьSMS(НомераПолучателей, Текст, ИмяОтправителя, ПеревестиВТранслит);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти 
	
#Область ПодсистемаРаботаСПочтовымиСообщениями 
	
// Функция для отправки сообщений. Проверяет корректность заполнения учетной
// записи и вызывает функцию, реализующую механику отправки.
//
// См. параметры функции ОтправитьСообщение.
// 
// Примечание: параметр ПараметрыПисьма.Вложения может содержать вместо двоичных данных адреса во
//   временном хранилище, по которым хранятся эти данные.
//
Функция ОтправитьПочтовоеСообщение(Знач УчетнаяЗапись,Знач ПараметрыПисьма, Знач Соединение = Неопределено) Экспорт
	Результат = Неопределено;
	
	Если ВерсияБСП() >= 22500 Тогда
		// Подсистема СтандартныеПодсистемы.ОтправкаSMS 
		Если ItobОбщегоНазначенияСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
			ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("РаботаСПочтовымиСообщениями");
			Результат = ОбщийМодуль.ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыПисьма, Соединение);
		КонецЕсли;
	КонецЕсли;	
	
	Возврат Результат;
КонецФункции

#КонецОбласти 
	
#КонецОбласти


