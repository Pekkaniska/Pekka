
//Функция возвращает остаток ТЖ на ТС
// Параметры: МоментВремени - время на которое определяется остаток
// ТС
// ТЖ
//
Функция ОстатокТЖнаТС(ТС, ТЖ, МоментВремени) Экспорт
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР КОГДА (уатОстаткиТЖнаТС.КоличествоОстаток) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ уатОстаткиТЖнаТС.КоличествоОстаток КОНЕЦ КАК Количество
	|ИЗ
	|	РегистрНакопления.уатОстаткиТЖнаТС.Остатки(&Момент, ТЖ = &ТЖ И ТС = &ТС) КАК уатОстаткиТЖнаТС
	|
	|";
	
	Запрос.УстановитьПараметр("Момент", МоментВремени);
	Запрос.УстановитьПараметр("ТЖ", ТЖ);
	Запрос.УстановитьПараметр("ТС", ТС);
	
	//управляемая блокировка
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатОстаткиТЖнаТС");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ТЖ", ТЖ);
	ЭлементБлокировки.УстановитьЗначение("ТС", ТС);
	Блокировка.Заблокировать();
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаЗапроса.Следующий() Тогда
		Результат = ВыборкаЗапроса.Количество;
	Иначе
		Результат = 0;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

//Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТЖ - результат запроса по табличной части "Материалы",
//  ТаблицаДляСписанияТЖ - Сформированная таблица значений,
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуСписанияТЖ(ДокументОбъект, ТаблицаДляСписанияТЖ, СтрокаОшибки = "") Экспорт
	
	Перем мСписаноКоличество;
	Перем мСписаноСтоимость;
	
	ВсеОК = Истина;
	мСписаноКоличество = 0;
	мСписаноСтоимость  = 0;
	
	ТаблицаДляСписанияТЖ = Новый ТаблицаЗначений;
	ТаблицаДляСписанияТЖ.Колонки.Добавить("Партия");
	ТаблицаДляСписанияТЖ.Колонки.Добавить("Дата");
	ТаблицаДляСписанияТЖ.Колонки.Добавить("Склад");
	ТаблицаДляСписанияТЖ.Колонки.Добавить("ТЖ");
	ТаблицаДляСписанияТЖ.Колонки.Добавить("Номенклатура");
	ТаблицаДляСписанияТЖ.Колонки.Добавить("ТС");
	ТаблицаДляСписанияТЖ.Колонки.Добавить("Количество");
	ТаблицаДляСписанияТЖ.Колонки.Добавить("Коэффициент");
	ТаблицаДляСписанияТЖ.Колонки.Добавить("Сумма");
	ТаблицаДляСписанияТЖ.Колонки.Добавить("СтоимостьУпр");
	ТаблицаДляСписанияТЖ.Колонки.Добавить("Стоимость");
	
	МоментВремениОстПартий = ДокументОбъект.МоментВремени();
	
	//заполняем таблицу по данным документа. Рассчитываем стоимость ТЖ
	// получим результат запроса по таблице ТЖ в пут. листе
	РезультатЗапросаПоТЖ = Новый Запрос();
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.уатПутевойЛист") ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатПутевойЛист") Тогда
		РезультатЗапросаПоТЖ.Текст	=
		"ВЫБРАТЬ
		|	РасходГСМ.ТС,
		|	РасходГСМ.ГСМ КАК ТЖ,
		|	РасходГСМ.РасходПоФакту КАК СписываемоеКоличество,
		|	РасходГСМ.РасходПоФакту КАК Количество,
		|	&Коэффициент КАК Коэффициент,
		|	РасходГСМ.Ссылка.Дата
		|ИЗ
		|	Документ.уатПутевойЛист.РасходГСМ КАК РасходГСМ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
		|		ПО РасходГСМ.ГСМ = уатНоменклатураГСМ.Номенклатура
		|			И (уатНоменклатураГСМ.ВестиУчетОстатковТЖ)
		|ГДЕ
		|	РасходГСМ.Ссылка = &Ссылка";
		РезультатЗапросаПоТЖ.УстановитьПараметр("Коэффициент", 1);
		РезультатЗапросаПоТЖ.УстановитьПараметр("Дата", ДокументОбъект.МоментВремени());
		РезультатЗапросаПоТЖ.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
		
		Если ЗначениеЗаполнено(ДокументОбъект.ДатаЗакрытия) Тогда
			МоментВремениОстПартий = Новый Граница(ДокументОбъект.ДатаЗакрытия, ВидГраницы.Исключая);
		КонецЕсли;
		
	Иначе //Документ.уатОперацииСТехническимиЖидкостями
		РезультатЗапросаПоТЖ.Текст	=
		"ВЫБРАТЬ
		|	уатОперацииСТехническимиЖидкостями.ТС,
		|	уатОперацииСТехническимиЖидкостями.Номенклатура КАК ТЖ,
		|	уатОперацииСТехническимиЖидкостями.Ссылка.Склад КАК Склад,
		|	уатОперацииСТехническимиЖидкостями.Количество КАК СписываемоеКоличество,
		|	уатОперацииСТехническимиЖидкостями.Количество КАК Количество,
		|	&Коэффициент КАК Коэффициент,
		|	уатОперацииСТехническимиЖидкостями.Ссылка.Дата
		|ИЗ
		|	Документ.уатОперацииСТехническимиЖидкостями.ТехническиеЖидкости КАК уатОперацииСТехническимиЖидкостями
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
		|		ПО уатОперацииСТехническимиЖидкостями.Номенклатура = уатНоменклатураГСМ.Номенклатура
		|			И (уатНоменклатураГСМ.ВестиУчетОстатковТЖ)
		|ГДЕ
		|	уатОперацииСТехническимиЖидкостями.Ссылка = &Ссылка";
		РезультатЗапросаПоТЖ.УстановитьПараметр("Коэффициент", 1);
		РезультатЗапросаПоТЖ.УстановитьПараметр("Дата", ДокументОбъект.МоментВремени());
		РезультатЗапросаПоТЖ.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
		
	КонецЕсли;
		
	ВыборкаЗапросаПоТЖ = РезультатЗапросаПоТЖ.Выполнить().Выбрать();
		
	СпособОценкиМПЗ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументОбъект.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.СпособОценкиМПЗ);
	
	//Перебираем строки ГСМ, который надо списать
	Пока ВыборкаЗапросаПоТЖ.Следующий() Цикл
		НадоСписатьКоличество = ВыборкаЗапросаПоТЖ.СписываемоеКоличество;
		
		//Получение остатков ГСМ по партиям
		РезультатЗапросаПартииТЖ = ПолучитьОстаткиПартийТЖ(МоментВремениОстПартий, СпособОценкиМПЗ, ВыборкаЗапросаПоТЖ.ТС, ВыборкаЗапросаПоТЖ.ТЖ);
		ВыборкаЗапросаПартииТЖ	 = РезультатЗапросаПартииТЖ.Выбрать();
		
		//КоличествоОстаток = ОстатокТЖнаТС(ДокументОбъект.МоментВремени(),
		//	ВыборкаЗапросаПоТЖ.ТС, ВыборкаЗапросаПоТЖ.ТЖ);
		//Если НадоСписатьКоличество > КоличествоОстаток Тогда
		//	//Расход по ТС превышает остаток
		//	ВсеОК=Ложь;
		//	СтрокаОшибки = СтрокаОшибки + Символы.ПС + "Надо списать: " + НадоСписатьКоличество
		//		+ ", остаток: " + КоличествоОстаток;
		//КонецЕсли; 
		
		Если ВсеОК Тогда
			
			НадоСписатьСумму = 0;
			НадоСписатьСуммуУпр = 0;
			Если СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней Тогда
				Попытка
					мТаблицаДляСуммы	= РезультатЗапросаПартииТЖ.Выгрузить();
					НадоСписатьСумму = мТаблицаДляСуммы.Итог("Стоимость") / мТаблицаДляСуммы.Итог("Количество") * НадоСписатьКоличество;
					НадоСписатьСуммуУпр = мТаблицаДляСуммы.Итог("СтоимостьУпр") / мТаблицаДляСуммы.Итог("Количество") * НадоСписатьКоличество;
				Исключение
				КонецПопытки;	
			КонецЕсли;
			
			Пока НадоСписатьКоличество > 0 Цикл
				Если ВыборкаЗапросаПартииТЖ.Следующий() Тогда
					мКоличество = Мин(НадоСписатьКоличество, ВыборкаЗапросаПартииТЖ.Количество);
					мКоличество = ?(мКоличество < 0, 0, мКоличество);
					
					Если СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней Тогда
						мСтоимость = Мин(НадоСписатьСумму, ВыборкаЗапросаПартииТЖ.Стоимость);
						мСтоимостьУпр = Мин(НадоСписатьСуммуУпр, ВыборкаЗапросаПартииТЖ.СтоимостьУпр);
					Иначе
						Если ВыборкаЗапросаПартииТЖ.Количество = 0 Или ВыборкаЗапросаПартииТЖ.Количество < НадоСписатьКоличество Тогда
							мСтоимость = ВыборкаЗапросаПартииТЖ.Стоимость;
							мСтоимостьУпр = ВыборкаЗапросаПартииТЖ.СтоимостьУпр;
						Иначе	
							мСтоимость = НадоСписатьКоличество * ВыборкаЗапросаПартииТЖ.Стоимость / ВыборкаЗапросаПартииТЖ.Количество;
							мСтоимостьУпр = НадоСписатьКоличество * ВыборкаЗапросаПартииТЖ.СтоимостьУпр / ВыборкаЗапросаПартииТЖ.Количество;
							//мСтоимостьУпр = мСтоимость;
						КонецЕсли;
						
					КонецЕсли;      
					
					Если мКоличество > 0 Тогда
						НоваяСтрока = ТаблицаДляСписанияТЖ.Добавить();
						НоваяСтрока.ТС = ВыборкаЗапросаПоТЖ.ТС;
						НоваяСтрока.Дата = ВыборкаЗапросаПоТЖ.Дата;
						НоваяСтрока.Партия = ВыборкаЗапросаПартииТЖ.Партия;
						НоваяСтрока.ТЖ = ВыборкаЗапросаПартииТЖ.ТЖ;
						НоваяСтрока.Количество = мКоличество;
						НоваяСтрока.Стоимость = мСтоимость;	
						НоваяСтрока.СтоимостьУпр = мСтоимостьУпр;
						
						Если НЕ ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.уатПутевойЛист") И НЕ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатПутевойЛист") Тогда 
							НоваяСтрока.Номенклатура = ВыборкаЗапросаПартииТЖ.ТЖ;
							НоваяСтрока.Склад		= ДокументОбъект.Склад;
							НоваяСтрока.Сумма		= мСтоимость;
						КонецЕсли;
						
						мСписаноКоличество 		= мСписаноКоличество + НоваяСтрока.Количество;
						мСписаноСтоимость 		= мСписаноСтоимость + НоваяСтрока.Стоимость;
					КонецЕсли;
					
					НадоСписатьКоличество = НадоСписатьКоличество - мКоличество;
					НадоСписатьСумму = НадоСписатьСумму - мСтоимость;
					НадоСписатьСуммуУпр = НадоСписатьСуммуУпр - мСтоимостьУпр;
					
				Иначе
					НоваяСтрока = ТаблицаДляСписанияТЖ.Добавить();
					НоваяСтрока.ТС = ВыборкаЗапросаПоТЖ.ТС;
					НоваяСтрока.Дата = ВыборкаЗапросаПоТЖ.Дата;
					НоваяСтрока.Партия = Неопределено;
					НоваяСтрока.ТЖ = ВыборкаЗапросаПоТЖ.ТЖ;
					НоваяСтрока.Количество = НадоСписатьКоличество;
					НоваяСтрока.Стоимость = НадоСписатьСумму;	
					НоваяСтрока.СтоимостьУпр = НадоСписатьСуммуУпр;
					
					НадоСписатьКоличество = 0;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	вхСредняяЦена = ?(мСписаноКоличество=0, 0,окр(мСписаноСтоимость / мСписаноКоличество,2));
	
	//округляем до точности хранения остатков ТЖ в ТС
	мТочностьОстатковТЖ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументОбъект.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ТочностьОстатковТоплива);
	Для Каждого ТекСтрока Из ТаблицаДляСписанияТЖ Цикл
		ТекСтрока.Количество = Окр(ТекСтрока.Количество, мТочностьОстатковТЖ);
	КонецЦикла;
	
	Возврат ВсеОК;
	
КонецФункции // ПодготовитьТаблицуСписанияГСМ()

// Возвращает результат запроса по остаткам ТЖ по партиям
//
//
Функция ПолучитьОстаткиПартийТЖ(МоментВремени, СпособОценкиМПЗ, ТС, ТЖ)
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатОстаткиТЖнаТС.Партия КАК Партия,
	|	уатОстаткиТЖнаТС.ТС КАК ТС,
	|	уатОстаткиТЖнаТС.ТЖ КАК ТЖ,
	|	ЕСТЬNULL(уатОстаткиТЖнаТС.КоличествоОстаток, 0) КАК Количество,
	|	уатОстаткиТЖнаТС.СтоимостьОстаток КАК Стоимость,
	|	уатОстаткиТЖнаТС.СтоимостьУпрОстаток КАК СтоимостьУпр
	|ИЗ
	|	РегистрНакопления.уатОстаткиТЖнаТС.Остатки(
	|		&Момент,
	|		ТЖ = &ТЖ И ТС = &ТС) КАК уатОстаткиТЖнаТС
	|ГДЕ
	|	уатОстаткиТЖнаТС.КоличествоОстаток > 0
	|
	|";
	
	Если СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО Тогда
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО	уатОстаткиТЖнаТС.Партия.Дата ВОЗР";
	ИначеЕсли СпособОценкиМПЗ = Перечисления.СпособыОценки.ЛИФО Тогда
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО	уатОстаткиТЖнаТС.Партия.Дата УБЫВ";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Момент", МоментВремени);
	Запрос.УстановитьПараметр("ТЖ", ТЖ);
	Запрос.УстановитьПараметр("ТС", ТС);
	
	//управляемая блокировка
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатОстаткиТЖнаТС");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ТЖ", ТЖ);
	ЭлементБлокировки.УстановитьЗначение("ТС", ТС);
	Блокировка.Заблокировать();
	
	Возврат Запрос.Выполнить();
КонецФункции

//Функция возвращает флаг учета остатков по ТЖ на ТС
//
Функция УчитыватьОстаткиТЖ(ТЖ) Экспорт
	Рез = Ложь;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатНоменклатураГСМ.ВестиУчетОстатковТЖ
	|ИЗ
	|	РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
	|ГДЕ
	|	уатНоменклатураГСМ.Номенклатура = &ТЖ");
	Запрос.УстановитьПараметр("ТЖ", ТЖ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Рез = (Выборка.ВестиУчетОстатковТЖ = Истина);
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

//Функция возвращает истина если номенклатура является ТЖ
//
Функция ЭтоТехническаяЖидкость(Номенклатура) Экспорт
	Рез = Ложь;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатНоменклатураГСМ.ВестиУчетОстатковТЖ
	|ИЗ
	|	РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
	|ГДЕ
	|	уатНоменклатураГСМ.Номенклатура = &Номенклатура
	|	И (уатНоменклатураГСМ.ГруппаГСМ = ЗНАЧЕНИЕ(Перечисление.уатГруппыГСМ.ПрисадкиИТехническиеЖидкости)
	|	ИЛИ уатНоменклатураГСМ.ГруппаГСМ = ЗНАЧЕНИЕ(Перечисление.уатГруппыГСМ.Масло))");
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ГруппаГСМ", Перечисления.уатГруппыГСМ.ПрисадкиИТехническиеЖидкости);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Следующий();
КонецФункции

// Процедура создает пакет документов Слив ГСМ по инвентаризациям
//
Процедура ПакетныйВводСливовГСМ(мсвДокументыИнвентаризации) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("мсвДокументыИнвентаризации", мсвДокументыИнвентаризации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	уатИнвентаризацияГСМвТСГСМвТС.Ссылка,
	|	уатИнвентаризацияГСМвТСГСМвТС.ГСМ,
	|	уатИнвентаризацияГСМвТСГСМвТС.ТС,
	|	СУММА(уатИнвентаризацияГСМвТСГСМвТС.КоличествоУчет - уатИнвентаризацияГСМвТСГСМвТС.Количество) КАК КоличествоОтклонениеИнвентаризации,
	|	уатИнвентаризацияГСМвТС.АЗС,
	|	уатИнвентаризацияГСМвТСГСМвТС.НомерСтроки,
	|	уатИнвентаризацияГСМвТС.Организация,
	|	уатИнвентаризацияГСМвТС.Ответственный,
	|	уатИнвентаризацияГСМвТС.Дата
	|ПОМЕСТИТЬ ДокИнвентаризации
	|ИЗ
	|	Документ.уатИнвентаризацияГСМвТС.ГСМвТС КАК уатИнвентаризацияГСМвТСГСМвТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатИнвентаризацияГСМвТС КАК уатИнвентаризацияГСМвТС
	|		ПО уатИнвентаризацияГСМвТСГСМвТС.Ссылка = уатИнвентаризацияГСМвТС.Ссылка
	|ГДЕ
	|	уатИнвентаризацияГСМвТСГСМвТС.Ссылка В(&мсвДокументыИнвентаризации)
	|	И уатИнвентаризацияГСМвТСГСМвТС.КоличествоУчет - уатИнвентаризацияГСМвТСГСМвТС.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	уатИнвентаризацияГСМвТСГСМвТС.Ссылка,
	|	уатИнвентаризацияГСМвТСГСМвТС.ГСМ,
	|	уатИнвентаризацияГСМвТСГСМвТС.ТС,
	|	уатИнвентаризацияГСМвТС.АЗС,
	|	уатИнвентаризацияГСМвТСГСМвТС.НомерСтроки,
	|	уатИнвентаризацияГСМвТС.Организация,
	|	уатИнвентаризацияГСМвТС.Ответственный,
	|	уатИнвентаризацияГСМвТС.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокИнвентаризации.Ссылка КАК Ссылка,
	|	ДокИнвентаризации.ГСМ,
	|	ДокИнвентаризации.ТС,
	|	МАКСИМУМ(ДокИнвентаризации.КоличествоОтклонениеИнвентаризации) КАК КоличествоОтклонениеИнвентаризации,
	|	ДокИнвентаризации.АЗС,
	|	СУММА(ВЫБОР
	|			КОГДА уатСливГСМ.Количество ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ уатСливГСМ.Количество
	|		КОНЕЦ) КАК КоличествоСписанное,
	|	ДокИнвентаризации.Организация,
	|	ДокИнвентаризации.Ответственный,
	|	ДокИнвентаризации.Дата
	|ИЗ
	|	ДокИнвентаризации КАК ДокИнвентаризации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатСливГСМ КАК уатСливГСМ
	|		ПО ДокИнвентаризации.Ссылка = уатСливГСМ.ДокументОснование
	|			И ДокИнвентаризации.ГСМ = уатСливГСМ.ГСМ
	|			И ДокИнвентаризации.ТС = уатСливГСМ.ТС
	|			И (уатСливГСМ.ДокументОснование В
	|				(ВЫБРАТЬ
	|					ДокИнвентаризации.Ссылка
	|				ИЗ
	|					ДокИнвентаризации КАК ДокИнвентаризации))
	|			И (уатСливГСМ.Проведен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокИнвентаризации.Ссылка,
	|	ДокИнвентаризации.ГСМ,
	|	ДокИнвентаризации.ТС,
	|	ДокИнвентаризации.АЗС,
	|	ДокИнвентаризации.НомерСтроки,
	|	ДокИнвентаризации.Организация,
	|	ДокИнвентаризации.Ответственный,
	|	ДокИнвентаризации.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ДокИнвентаризации.НомерСтроки";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		ТекстСообщения = НСтр("ru = 'В выбранных документах отсутствуют ТС с ГСМ, учетное количество которого превышает фактическое.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	флЕстьСозданныеДокументы = Ложь;
	
	Пока Выборка.Следующий() Цикл 
		КоличествоСписать = Выборка.КоличествоОтклонениеИнвентаризации - Выборка.КоличествоСписанное;
		
		Если КоличествоСписать <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не флЕстьСозданныеДокументы Тогда 
			флЕстьСозданныеДокументы = Истина;
		КонецЕсли;
		
		Попытка
			НовДокСписание = Документы.уатСливГСМ.СоздатьДокумент();
		Исключение
			ТекстСообщения = "Ошибка при создании документа." + Символы.ПС + ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;
		
		уатОбщегоНазначенияТиповые.ЗаполнитьШапкуДокумента(НовДокСписание, ПользователиКлиентСервер.ТекущийПользователь());
		
		НовДокСписание.АЗС               = Выборка.АЗС;
		НовДокСписание.ВидОперации       = Перечисления.уатВидыОперацийСливГСМ.НаСклад;
		НовДокСписание.ГСМ               = Выборка.ГСМ;
		НовДокСписание.ДокументОснование = Выборка.Ссылка;
		НовДокСписание.Количество        = КоличествоСписать;
		НовДокСписание.Организация       = Выборка.Организация;
		НовДокСписание.Ответственный     = Выборка.Ответственный;
		НовДокСписание.ТС                = Выборка.ТС;
		НовДокСписание.Дата              = Выборка.Дата;
		
		Попытка
			НовДокСписание.Записать(РежимЗаписиДокумента.Проведение);
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Создан и проведен документ ""%1 № %2"" для списания ГСМ ""%3"" с ТС ""%4"".'"), 
				НовДокСписание.Ссылка.Метаданные().Представление(),
				НовДокСписание.Ссылка.Номер,
				НовДокСписание.ГСМ,
				НовДокСписание.ТС);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Исключение
			Попытка
				НовДокСписание.Записать(РежимЗаписиДокумента.Запись);
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Создан документ ""%1 № %2"" для списания ГСМ ""%3"" с ТС ""%4"". Документ необходимо провести.'"), 
					НовДокСписание.Ссылка.Метаданные().Представление(),
					НовДокСписание.Ссылка.Номер,
					НовДокСписание.ГСМ,
					НовДокСписание.ТС);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Исключение
				ТекстСообщения = "Ошибка при создании документов """ + НовДокСписание.Ссылка.Метаданные().Представление() + """";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Возврат;
			КонецПопытки;
		КонецПопытки;
	КонецЦикла;
	
	Если Не флЕстьСозданныеДокументы Тогда 
		ТекстСообщения = НСтр("ru = 'В выбранных документах отсутствуют ТС с ГСМ, учетное количество которого превышает фактическое.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

//Функция возвращает список ГСМ по группе ГСМ
//
Функция ПолучитьСписокГСМПоГруппе(ГруппаГСМ) Экспорт 
	СписокГСМ = Новый  СписокЗначений;
	 Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатНоменклатураГСМ.Номенклатура
	|ИЗ
	|	РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
	|ГДЕ
	|	уатНоменклатураГСМ.ГруппаГСМ В(&ГруппаГСМ)
	|	И НЕ уатНоменклатураГСМ.Номенклатура.ПометкаУдаления");
	Запрос.УстановитьПараметр("ГруппаГСМ",ГруппаГСМ);
	ВыборкаНом = Запрос.Выполнить().Выбрать();
	Пока ВыборкаНом.Следующий() Цикл
		СписокГСМ.Добавить(ВыборкаНом.Номенклатура);
	КонецЦикла;
	Возврат СписокГСМ;
КонецФункции

//Функция возвращает список ГСМ при автоподборе текста в поле ввода ГСМ
// СтрокаПоиска - подстрока введенного текста
// списокГруппыГСМ - отбор-список групп ГСМ
//
Функция ПолучитьСписокАвтоподбораПоляГСМ(Знач СтрокаПоиска, списокГруппыГСМ = Неопределено, Знач ДопПараметры = Неопределено) Экспорт
	
	ДанныеВыбора = Новый СписокЗначений();
	
	Если СтрокаПоиска = "" Тогда
		Возврат ДанныеВыбора;
	КонецЕсли;
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	Если НЕ ДопПараметры.Свойство("Организация") Тогда
		ДопПараметры.Вставить("Организация");
	КонецЕсли;
	Если НЕ ДопПараметры.Свойство("БезАналогов") Тогда
		ДопПараметры.Вставить("БезАналогов", Ложь);
	КонецЕсли;
	Если НЕ ДопПараметры.Свойство("УчитыватьТЖ") Тогда
		ДопПараметры.Вставить("УчитыватьТЖ", Ложь);
	КонецЕсли;
	
	//если указано ТС, то отбираем ГСМ только для этого ТС
	Если ДопПараметры.Свойство("ТС") Тогда
		тблВыборка = Новый ТаблицаЗначений;
		тблВыборка.Колонки.Добавить("Номенклатура");
		тблВыборка.Колонки.Добавить("Наименование");
		
		Для Каждого ТекГруппаГСМ Из списокГруппыГСМ Цикл
			ТекмсвГСМ = уатЗащищенныеФункцииСервер.СписокГСМдляТССервер(ДопПараметры.Организация, ДопПараметры.ТС, ТекГруппаГСМ, ДопПараметры.БезАналогов);
			Для Каждого ТекГСМ Из ТекмсвГСМ Цикл
				НоваяСтрока = тблВыборка.Добавить();
				НоваяСтрока.Номенклатура = ТекГСМ.ГСМ;
				НоваяСтрока.Наименование = НоваяСтрока.Номенклатура.Наименование;
			КонецЦикла;
		КонецЦикла;
		
		мсвСтрокУдалить = Новый Массив;
		Для Каждого ТекСтрока Из тблВыборка Цикл
			Если ВРег(Лев(ТекСтрока.Номенклатура.Наименование, СтрДлина(СтрокаПоиска))) <> ВРег(СтрокаПоиска) Тогда
				мсвСтрокУдалить.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ТекСтрокаУдалить Из мсвСтрокУдалить Цикл
			тблВыборка.Удалить(ТекСтрокаУдалить);
		КонецЦикла;
		
	Иначе //выбираем все ГСМ
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	уатНоменклатураГСМ.Номенклатура,
		|	спрНоменклатура.Наименование
		|ИЗ
		|	РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спрНоменклатура
		|		ПО уатНоменклатураГСМ.Номенклатура = спрНоменклатура.Ссылка
		|ГДЕ
		|	НЕ уатНоменклатураГСМ.Номенклатура.ПометкаУдаления
		|	И спрНоменклатура.Наименование ПОДОБНО &СтрокаПодбора");
		Если списокГруппыГСМ <> Неопределено Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И уатНоменклатураГСМ.ГруппаГСМ В(&списокГруппыГСМ)";
			Запрос.УстановитьПараметр("списокГруппыГСМ", списокГруппыГСМ);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("СтрокаПодбора", "" + СтрокаПоиска + "%");
		тблВыборка = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	//добавляем ТЖ
	Если ДопПараметры.УчитыватьТЖ Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	уатНоменклатураГСМ.Номенклатура
		|ИЗ
		|	РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
		|ГДЕ
		|	уатНоменклатураГСМ.ВестиУчетОстатковТЖ
		|	И уатНоменклатураГСМ.Номенклатура.Наименование ПОДОБНО &СтрокаПодбора");
		Запрос.УстановитьПараметр("СтрокаПодбора", "" + СтрокаПоиска + "%");
		тблТЖ = Запрос.Выполнить().Выгрузить();
		Для Каждого ТекСтрока Из тблТЖ Цикл
			Если тблВыборка.Найти(ТекСтрока.Номенклатура, "Номенклатура") = Неопределено Тогда
				НоваяСтрока = тблВыборка.Добавить();
				НоваяСтрока.Номенклатура = ТекСтрока.Номенклатура;
				НоваяСтрока.Наименование = ТекСтрока.Номенклатура.Наименование;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из тблВыборка Цикл 
		врПозицияОтсечения = СтрДлина(СтрокаПоиска);
		тПредставление = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(Лев(ТекСтрока.Наименование, врПозицияОтсечения),, WebЦвета.Красный), 
			Новый ФорматированнаяСтрока(Прав(ТекСтрока.Наименование, СтрДлина(ТекСтрока.Наименование)-врПозицияОтсечения)));
		ДанныеВыбора.Добавить(ТекСтрока.Номенклатура, тПредставление);
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции // ПолучитьСписокАвтоподбораПоляГСМ()
