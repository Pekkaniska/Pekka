
#Область ПрограммныйИнтерфейс

// Возвращает объекты прикладных метаданных, в которых возможна
//  интеграция с ВетИС (в формах объектов)
// Возвращаемое значение:
//  Массив - объекты прикладных метаданных
//
Функция ОбъектыМетаданныхИнтеграции() Экспорт
	
	Результат = Новый Массив;
	//++ НЕ ГОСИС
	Результат.Добавить(Метаданные.Документы.ВнутреннееПотреблениеТоваров);
	//++ НЕ УТКА
	Результат.Добавить(Метаданные.Документы.ВозвратСырьяДавальцу);
	//-- НЕ УТКА
	//++ НЕ УТ
	Результат.Добавить(Метаданные.Документы.ВозвратСырьяОтПереработчика);
	//-- НЕ УТ
	Результат.Добавить(Метаданные.Документы.ВозвратТоваровМеждуОрганизациями);
	Результат.Добавить(Метаданные.Документы.ВозвратТоваровОтКлиента);
	Результат.Добавить(Метаданные.Документы.ВозвратТоваровПоставщику);
	//++ НЕ УТ
	Результат.Добавить(Метаданные.Документы.ВыкупПринятыхНаХранениеТоваров);
	Результат.Добавить(Метаданные.Документы.ДвижениеПродукцииИМатериалов);
	//-- НЕ УТ
	Результат.Добавить(Метаданные.Документы.ОприходованиеИзлишковТоваров);
	//++ НЕ УТ
	Результат.Добавить(Метаданные.Документы.ОтгрузкаТоваровСХранения);
	//-- НЕ УТ
	//++ НЕ УТКА
	Результат.Добавить(Метаданные.Документы.ПередачаДавальцу);
	//-- НЕ УТКА
	//++ НЕ УТ
	Результат.Добавить(Метаданные.Документы.ПередачаСырьяПереработчику);
	//-- НЕ УТ
	Результат.Добавить(Метаданные.Документы.ПередачаТоваровМеждуОрганизациями);
	Результат.Добавить(Метаданные.Документы.ПеремещениеТоваров);
	Результат.Добавить(Метаданные.Документы.ПересортицаТоваров);
	Результат.Добавить(Метаданные.Документы.ПорчаТоваров);
	//++ НЕ УТ
	Результат.Добавить(Метаданные.Документы.ПоступлениеОтПереработчика);
	//-- НЕ УТ
	//++ НЕ УТКА
	Результат.Добавить(Метаданные.Документы.ПоступлениеСырьяОтДавальца);
	//-- НЕ УТКА
	//++ НЕ УТ
	Результат.Добавить(Метаданные.Документы.ПриемкаТоваровНаХранение);
	//-- НЕ УТ
	Результат.Добавить(Метаданные.Документы.ПриобретениеТоваровУслуг);
	//++ НЕ УТ
	Результат.Добавить(Метаданные.Документы.ПроизводствоБезЗаказа);
	//-- НЕ УТ
	Результат.Добавить(Метаданные.Документы.ПрочееОприходованиеТоваров);
	Результат.Добавить(Метаданные.Документы.РеализацияТоваровУслуг);
	Результат.Добавить(Метаданные.Документы.СборкаТоваров);
	Результат.Добавить(Метаданные.Документы.СписаниеНедостачТоваров);
	//++ НЕ УТКА
	Результат.Добавить(Метаданные.Документы.ЭтапПроизводства2_2);
	//-- НЕ УТКА
	//-- НЕ ГОСИС
	Возврат Результат;
	
КонецФункции

// Настраивает подключаемое оборудование в форме,
// устанавливает флаг ИспользоватьПодключаемоеОборудование в форме.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой необходимо настроить подключаемое оборудование,
//  ПрефиксыЭлементовФормы - Строка - строка имен табличных частей, разделенных запятыми, в которых нужно настроить видимость команд.
//
Процедура НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы = "Товары") Экспорт
	
	//++ НЕ ГОСИС
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы);
	
	Если ЗначениеЗаполнено(ПрефиксыЭлементовФормы) Тогда
		МассивПрефиксыЭлементовФормы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПрефиксыЭлементовФормы, ",");
	Иначе
		МассивПрефиксыЭлементовФормы = Новый Массив;
		МассивПрефиксыЭлементовФормы.Добавить(ПрефиксыЭлементовФормы);
	КонецЕсли;
	
	Для Каждого Префикс Из МассивПрефиксыЭлементовФормы Цикл
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			Префикс + "ВыгрузитьДанныеВТСД",
			"Видимость",
			Ложь);
	КонецЦикла;
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Заполняет реквизит 'ЕдиницаИзмерения' справочника 'ЕдиницыИзмеренияВЕТИС' по ОКЕИ.
//
// Параметры:
//	СправочникОбъект - СправочникОбъект.ЕдиницыИзмеренияВЕТИС - Единица измерения ВЕТИС.
//
Процедура ЗаполнитьЕдиницуИзмеренияПоКлассификаторам(СправочникОбъект) Экспорт
	
	//++ НЕ ГОСИС
	Если СправочникОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаКлассификатораВЕТИС = ИнтеграцияВЕТИСПовтИсп.ДанныеСтрокиКлассификатораЕдиницИзмеренияВЕТИС(СправочникОбъект.Идентификатор);
	
	Если СтрокаКлассификатораВЕТИС <> Неопределено
		И ЗначениеЗаполнено(СтрокаКлассификатораВЕТИС.КодОКЕИ) Тогда
		
		КодОКЕИ = СтрокаКлассификатораВЕТИС.КодОКЕИ;
		ЕдиницаИзмерения = ИнтеграцияВЕТИСУТ.ЕдиницаИзмеренияОКЕИ(КодОКЕИ);
		
		Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			СправочникОбъект.ЕдиницаИзмерения = ЕдиницаИзмерения;
		Иначе
			СправочникОбъект.ЕдиницаИзмерения = ИнтеграцияВЕТИСУТ.СоздатьЕдиницуИзмеренияПоКлассификаторуОКЕИ(КодОКЕИ);
		КонецЕсли;
		
	КонецЕсли;
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

#Область ОбработчикиСобытийДокументов

// Вызывается при вводе документа на основании, при выполнении метода Заполнить или при интерактивном вводе нового.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - заполняемый документ,
//  ДанныеЗаполнения - Произвольный - значение, которое используется как основание для заполнения,
//  ТекстЗаполнения - Строка, Неопределено - текст, используемый для заполнения документа,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполненияДокумента(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	//++ НЕ ГОСИС
	ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ИнвентаризацияПродукцииВЕТИС") Тогда
		ОбработкаЗаполненияИнвентаризацииПродукцииВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ИсходящаяТранспортнаяОперацияВЕТИС") Тогда
		ОбработкаЗаполненияДокументаИсходящаяТранспортнаяОперацияВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВходящаяТранспортнаяОперацияВЕТИС") Тогда
		ОбработкаЗаполненияДокументаВходящаяТранспортнаяОперацияВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПроизводственнаяОперацияВЕТИС") Тогда
		ОбработкаЗаполненияПроизводственнаяОперацияВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияИнвентаризацииПродукцииВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	//++ НЕ ГОСИС
	ИнтеграцияВЕТИСУТ.ОбработкаЗаполненияДокументаИнвентаризацияПродукцииВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	//-- НЕ ГОСИС
	
КонецПроцедуры

Процедура ОбработкаЗаполненияДокументаИсходящаяТранспортнаяОперацияВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	//++ НЕ ГОСИС
	ИнтеграцияВЕТИСУТ.ОбработкаЗаполненияДокументаИсходящаяТранспортнаяОперацияВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	//-- НЕ ГОСИС
	
КонецПроцедуры

Процедура ОбработкаЗаполненияДокументаВходящаяТранспортнаяОперацияВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	//++ НЕ ГОСИС

	
	//-- НЕ ГОСИС
	
КонецПроцедуры

Процедура ОбработкаЗаполненияПроизводственнаяОперацияВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	//++ НЕ ГОСИС
	ИнтеграцияВЕТИСУТ.ОбработкаЗаполненияДокументаПроизводственнаяОперацияВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Вызывается расширением формы при необходимости проверки заполнения реквизитов при записи или при проведении документа в форме,
// а также при выполнении метода ПроверитьЗаполнение.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - проверяемый документ,
//  Отказ - Булево - признак отказа от проведения документа,
//  ПроверяемыеРеквизиты - Массив - массив путей к реквизитам, для которых будет выполнена проверка заполнения,
//  МассивНепроверяемыхРеквизитов - Массив - массив путей к реквизитам, для которых не будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	//++ НЕ ГОСИС
	Если ТипЗнч(ДокументОбъект) = Тип("УправляемаяФорма") И ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументОбъект.ВходящаяТранспортнаяОперацияВЕТИС") Тогда
		
		ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
		ПараметрыПроверки.Вставить("ПутьКДаннымТаблицыФормы", "");
		ПараметрыПроверки.Вставить("ИмяТЧ", "ТоварыУточнение");
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
		
		ПараметрыУказанияСерий = ДокументОбъект.ПараметрыУказанияСерий;		
		НоменклатураСервер.ПроверитьЗаполнениеСерий(ДокументОбъект, ПараметрыУказанияСерий, Отказ, МассивНепроверяемыхРеквизитов);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВходящаяТранспортнаяОперацияВЕТИС") Тогда
		
		ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
		ПараметрыПроверки.ВыдаватьСообщения = ДокументОбъект.Товары.Количество() > 1;
		ПараметрыПроверки.ОтборПроверяемыхСтрок.Вставить("ЕстьУточнения", Ложь);
		ХарактеристикиНеЗаполнены = Ложь;
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, ХарактеристикиНеЗаполнены, ПараметрыПроверки);
		Если ХарактеристикиНеЗаполнены Тогда
			Отказ = Истина;
			Если ДокументОбъект.Товары.Количество() = 1 Тогда
				ТекстОшибки = НСтр("ru = 'Не заполнена характеристика.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "ПредставлениеХарактеристика",, Отказ);
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.ВходящаяТранспортнаяОперацияВЕТИС);
		ПараметрыУказанияСерий.Товары.ОтборПроверяемыхСтрок = Новый Структура("ЕстьУточнения", Ложь);
		
		НоменклатураСервер.ПроверитьЗаполнениеСерий(ДокументОбъект, ПараметрыУказанияСерий.Товары, Отказ, МассивНепроверяемыхРеквизитов);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗапросСкладскогоЖурналаВЕТИС") Тогда
		
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.ЗапросСкладскогоЖурналаВЕТИС);
		НоменклатураСервер.ПроверитьЗаполнениеСерий(ДокументОбъект, ПараметрыУказанияСерий, Отказ, МассивНепроверяемыхРеквизитов);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ИнвентаризацияПродукцииВЕТИС") Тогда
		
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ);
		
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.ИнвентаризацияПродукцииВЕТИС);
		
		НоменклатураСервер.ПроверитьЗаполнениеСерий(ДокументОбъект, ПараметрыУказанияСерий, Отказ, МассивНепроверяемыхРеквизитов);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ИсходящаяТранспортнаяОперацияВЕТИС") Тогда
		
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ);
		
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.ИсходящаяТранспортнаяОперацияВЕТИС);
		
		НоменклатураСервер.ПроверитьЗаполнениеСерий(ДокументОбъект, ПараметрыУказанияСерий, Отказ, МассивНепроверяемыхРеквизитов);
		
		ИнтеграцияВЕТИС.ПроверитьЗаполнениеКоличества(ДокументОбъект, Отказ, МассивНепроверяемыхРеквизитов);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОбъединениеЗаписейСкладскогоЖурналаВЕТИС") Тогда
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПроизводственнаяОперацияВЕТИС") Тогда
		
		ИнтеграцияВЕТИСУТ.ПроверитьЗаполнениеИдентификатораПартии(ДокументОбъект, Отказ, МассивНепроверяемыхРеквизитов);
		
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ);
		
		ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
		ПараметрыПроверки.ИмяТЧ = "Сырье";
		
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
		
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.ПроизводственнаяОперацияВЕТИС);
		
		НоменклатураСервер.ПроверитьЗаполнениеСерий(ДокументОбъект, ПараметрыУказанияСерий.Товары, Отказ, МассивНепроверяемыхРеквизитов);
		НоменклатураСервер.ПроверитьЗаполнениеСерий(ДокументОбъект, ПараметрыУказанияСерий.Сырье, Отказ, МассивНепроверяемыхРеквизитов);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("УправляемаяФорма")
		И ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ВходящаяТранспортнаяОперацияВЕТИС") Тогда
		
		ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
		ПараметрыПроверки.ИмяТЧ = "ТоварыУточнение";
		
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
		
	КонецЕсли;
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Вызывается при проведении документа. Выполняется в транзакции записи.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - проводимый документ,
//  Отказ - Булево - признак отказа от проведения документа,
//  РежимПроведения - РежимПроведенияДокумента - текущий режим проведения.
//
Процедура ОбработкаПроведения(ДокументОбъект, Отказ, РежимПроведения) Экспорт
	
	//++ НЕ ГОСИС
	ДокументОбъект.ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Новый Массив);
	
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ДокументОбъект, Отказ);
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Возникает перед выполнением записи документа. Вызывается после начала транзакции записи, но до начала записи документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - записываемый документ,
//  Отказ - Булево - признак отказа от записи,
//  РежимЗаписи - РежимЗаписиДокумента - текущий режим записи документа,
//  РежимПроведения - РежимПроведенияДокумента - текущий режим проведения документа.
//
Процедура ПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
// 	Форма - форма, из обработчика события которой происходит вызов процедуры.
//	см. справочную информацию по событиям управляемой формы.
//
Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи)Экспорт
	
	//++ НЕ ГОСИС
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи);
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Создает временную таблицу "ДокументыИнформационнойБазы", для дальнейшего использования в методе
//	ЗаполнениеДокументовВЕТИС.ДокументОснованиеПоДаннымСвязанныхДокументов.
//	Содержит колонки:
//		* ТипДокумента - ПеречислениеСсылка.ТипыДокументовВЕТИС - тип документа ВЕТИС, служит для определения типа связи со связанными документами;
//		* ПоказательУпорядочивания - ПроизвольныйТип - при определении документа основания, служит для определения приоритета найденных документов;
//		* Документ - ДокументСсылка - документ, который будет определяться как документ-основание;
//		* Дата - Дата - дата входящего документа, по которой будут сопоставляться данные документов ИБ и данные связанных документов;
//		* Номер - Строка - номер входящего документа, по которому будут сопоставляться данные документов ИБ и данные связанных документов;
//	Параметры:
//		ВременныеТаблицы - МенеджерВременныхТаблиц - менеджер временных таблиц запроса, в который будет добавлена создаваемая временная таблица.
//
Процедура ЗаполнитьВременнуюТаблицуСвязанныхДокументовИнформационнойБазы(ВременныеТаблицы) Экспорт
	
	//++ НЕ ГОСИС
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	
	МассивТекстовЗапросаДокументыПоЗаказу = Новый Массив;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК Заказ,
	|	НЕОПРЕДЕЛЕНО КАК Ссылка,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК Дата
	|ПОМЕСТИТЬ ДокументыПоЗаказу
	|ГДЕ
	|	ЛОЖЬ";
	
	МассивТекстовЗапросаДокументыПоЗаказу.Добавить(ТекстЗапроса);
	
	МассивТекстовЗапросаДокументыИнформационнойБазы = Новый Массив;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДокументовВЕТИС.ПустаяСсылка) КАК ТипДокумента,
	|	НЕОПРЕДЕЛЕНО КАК ПоказательУпорядочивания,
	|	НЕОПРЕДЕЛЕНО КАК Документ,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК Дата,
	|	"""" КАК Номер
	|ПОМЕСТИТЬ ДокументыИнформационнойБазы
	|ГДЕ
	|	ЛОЖЬ";
	МассивТекстовЗапросаДокументыИнформационнойБазы.Добавить(ТекстЗапроса);
	
	
	АнализируемыеТипыСсылок = Новый Массив;
	Если ПравоДоступа("Чтение", Метаданные.Документы.ПриобретениеТоваровУслуг) Тогда
		АнализируемыеТипыСсылок.Добавить(Тип("ДокументСсылка.ПриобретениеТоваровУслуг"));
	КонецЕсли;
	Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаказПоставщику) Тогда
		АнализируемыеТипыСсылок.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
	КонецЕсли;
	Если ПравоДоступа("Чтение", Метаданные.Документы.ВозвратТоваровОтКлиента) Тогда
		АнализируемыеТипыСсылок.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтКлиента"));
	КонецЕсли;
	Если ПравоДоступа("Чтение", Метаданные.Документы.РеализацияТоваровУслуг) Тогда
		АнализируемыеТипыСсылок.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	КонецЕсли;
	Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаказКлиента) Тогда
		АнализируемыеТипыСсылок.Добавить(Тип("ДокументСсылка.ЗаказКлиента"));
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.РеестрДокументов) И АнализируемыеТипыСсылок.Количество() Тогда
			
		Если ПравоДоступа("Чтение", Метаданные.Документы.ПриобретениеТоваровУслуг) Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДокументыПоЗаказу.ЗаказПоставщику КАК Заказ,
			|	ДокументыПоЗаказу.Ссылка КАК Ссылка,
			|	ДокументыПоЗаказу.Дата КАК Дата
			|ИЗ
			|	Документ.ПриобретениеТоваровУслуг КАК ДокументыПоЗаказу
			|ГДЕ
			|	ДокументыПоЗаказу.Проведен";
			
			МассивТекстовЗапросаДокументыПоЗаказу.Добавить(ТекстЗапроса);
			
		КонецЕсли;
		
		Если ПравоДоступа("Чтение", Метаданные.Документы.РеализацияТоваровУслуг) Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДокументыПоЗаказу.ЗаказКлиента КАК Заказ,
			|	ДокументыПоЗаказу.Ссылка КАК Ссылка,
			|	ДокументыПоЗаказу.Дата КАК Дата
			|ИЗ
			|	Документ.РеализацияТоваровУслуг КАК ДокументыПоЗаказу
			|ГДЕ
			|	ДокументыПоЗаказу.Проведен";
			
			МассивТекстовЗапросаДокументыПоЗаказу.Добавить(ТекстЗапроса);
			
		КонецЕсли;
				
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(РеестрДокументов.Ссылка) В (ТИП(Документ.ЗаказПоставщику), ТИП(Документ.ЗаказКлиента))
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыДокументовВЕТИС.Заказ)
		|		КОГДА ТИПЗНАЧЕНИЯ(РеестрДокументов.Ссылка) В (ТИП(Документ.ПриобретениеТоваровУслуг), ТИП(Документ.ВозвратТоваровОтКлиента), ТИП(Документ.РеализацияТоваровУслуг))
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыДокументовВЕТИС.Торг12)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыДокументовВЕТИС.ПустаяСсылка)
		|	КОНЕЦ КАК ТипДокумента,
		|	ЕСТЬNULL(ДокументыПоЗаказу.Дата, РеестрДокументов.ДатаДокументаИБ) КАК ПоказательУпорядочивания,
		|	ЕСТЬNULL(ДокументыПоЗаказу.Ссылка, РеестрДокументов.Ссылка) КАК Документ,
		|	ВЫБОР
		|		КОГДА РеестрДокументов.ДатаПервичногоДокумента = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА РеестрДокументов.ДатаДокументаИБ
		|		ИНАЧЕ РеестрДокументов.ДатаПервичногоДокумента
		|	КОНЕЦ КАК Дата,
		|	ВЫБОР
		|		КОГДА РеестрДокументов.НомерПервичногоДокумента = """"
		|			ТОГДА РеестрДокументов.НомерДокументаИБ
		|		ИНАЧЕ РеестрДокументов.НомерПервичногоДокумента
		|	КОНЕЦ КАК Номер
		|ИЗ
		|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументыПоЗаказу КАК ДокументыПоЗаказу
		|		ПО РеестрДокументов.Ссылка = ДокументыПоЗаказу.Заказ
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(РеестрДокументов.Ссылка) В (&АнализируемыеТипыСсылок)";
		
		МассивТекстовЗапросаДокументыИнформационнойБазы.Добавить(ТекстЗапроса);	
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("АнализируемыеТипыСсылок", АнализируемыеТипыСсылок);
	
	ТекстЗапросаДокументыПоЗаказу = СтрСоединить(МассивТекстовЗапросаДокументыПоЗаказу,
		ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	ТекстЗапросаДокументыПоЗаказу = ТекстЗапросаДокументыПоЗаказу + Символы.ПС +
	"
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ";
	
	ТекстЗапросаДокументыИнформационнойБазы = СтрСоединить(МассивТекстовЗапросаДокументыИнформационнойБазы,
		ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	ТекстЗапросаДокументыИнформационнойБазы = ТекстЗапросаДокументыИнформационнойБазы + Символы.ПС +
	"
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТипДокумента,
	|	Дата,
	|	Номер";
	
	
	МассивТекстовЗапроса = Новый Массив;
	МассивТекстовЗапроса.Добавить(ТекстЗапросаДокументыПоЗаказу);
	МассивТекстовЗапроса.Добавить(ТекстЗапросаДокументыИнформационнойБазы);
	МассивТекстовЗапроса.Добавить("УНИЧТОЖИТЬ ДокументыПоЗаказу");
	Запрос.Текст = СтрСоединить(МассивТекстовЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.Выполнить();
	
	//-- НЕ ГОСИС
	
КонецПроцедуры

#КонецОбласти

#Область ОрганизацииИКонтрагенты

// В функции нужно реализовать поиск организации предприятия по ИНН и/или КПП.
//
// Параметры:
//  ИНН - Строка - ИНН искомой организации,
//  КПП - Строка - КПП искомой организации.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ОрганизацияКонтрагентВЕТИС - найденная организация,
//  Неопределено - организация не найдена.
//
Функция ОрганизацияПоИННКПП(ИНН, КПП) Экспорт
	
	//++ НЕ ГОСИС
	ВозвращаемоеЗначение = Неопределено;
	
	ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП("Организации", ИНН, КПП, ВозвращаемоеЗначение);
	
	Возврат ВозвращаемоеЗначение;
	//-- НЕ ГОСИС
	
	Возврат Неопределено;
	
КонецФункции

// В функции нужно реализовать поиск контрагента по ИНН и/или КПП.
//
// Параметры:
//  ИНН - Строка - ИНН искомого контрагента,
//  КПП - Строка - КПП искомого контрагента.
// 
// Возвращаемое значение:
//  СправочникСсылка.Контрагенты - структура со свойствами:
//   * Контрагент - ОпределяемыйТип.ОрганизацияКонтрагентВЕТИС - найденный контрагент,
//   * ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - найденный торговый объект контрагента (партнер).
//  Неопределено - контрагент не найден.
//
Функция КонтрагентПоИННКПП(ИНН, КПП) Экспорт
	
	//++ НЕ ГОСИС
	Если ПустаяСтрока(ИНН) 
		И ПустаяСтрока(КПП) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатПоиска = ПартнерыИКонтрагенты.ИННКППУжеИспользуетсяВИнформационнойБазе(ИНН, КПП);
	
	Если ЗначениеЗаполнено(РезультатПоиска) Тогда
		
		Возврат РезультатПоиска.Ссылка;
		
	КонецЕсли;
	
	//-- НЕ ГОСИС
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает ИНН и КПП объекта, сопоставленного хозяйствующему субъекту по данным ИБ.
//
// Параметры:
//  ХозяйствующийСубъект - ОпределяемыйТип.ОрганизацияКонтрагентВЕТИС - ссылка на хозяйствующий субъект, реквизиты которой нужно определить,
// 
// Возвращаемое значение:
//  Структура - структура со свойствами:
//   * КПП - Строка - КПП организации,
//   * ИНН - Строка - ИНН организации.
//
Функция ИННКППСопоставленногоХозяйствующегоСубъекта(ХозяйствующийСубъект) Экспорт
	
	//++ НЕ ГОСИС
	ВозвращаемоеЗначение = Неопределено;
	
	Если Не ЗначениеЗаполнено(ХозяйствующийСубъект) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(ХозяйствующийСубъект) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Запрос.Текст ="
		|ВЫБРАТЬ 
		|	Контрагенты.ИНН    КАК ИНН,
		|	Контрагенты.КПП    КАК КПП
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка = &ХозяйствующийСубъект";
		
	Иначе
		
		Запрос.Текст ="
		|ВЫБРАТЬ
		|	Организации.ИНН КАК ИНН,
		|	Организации.КПП КАК КПП
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &ХозяйствующийСубъект";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ХозяйствующийСубъект"   , ХозяйствующийСубъект);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("ИНН", Выборка.ИНН);
		ВозвращаемоеЗначение.Вставить("КПП", Выборка.КПП);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	//-- НЕ ГОСИС
	
	Возврат Неопределено;
	
КонецФункции

// Определяет заданы ли настройки подключения к сервису интернет поддержки пользователей.
//
Функция НастройкиПодключенияКСервисуИППЗаданы() Экспорт

	//++ НЕ ГОСИС
	Возврат ПартнерыИКонтрагенты.НастройкиПодключенияКСервисуИППЗаданы();
	//-- НЕ ГОСИС
	
	Возврат Ложь;

КонецФункции

Функция ДанныеКонтрагентаДляПоискаХозяйствующегоСубъекта(Контрагент) Экспорт
	
	ДанныеКонтрагента = Новый Структура;
	ДанныеКонтрагента.Вставить("ИНН", "");
	ДанныеКонтрагента.Вставить("КПП", "");
	ДанныеКонтрагента.Вставить("ОГРН", "");
	ДанныеКонтрагента.Вставить("Наименование", "");
	ДанныеКонтрагента.Вставить("НаименованиеПолное", "");
	ДанныеКонтрагента.Вставить("Тип", Перечисления.ТипыХозяйствующихСубъектовВЕТИС.ПустаяСсылка());

	//++ НЕ ГОСИС
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Контрагенты.ИНН          КАК ИНН,
		|	Контрагенты.КПП          КАК КПП,
		|	""""                     КАК ОГРН,
		|	Контрагенты.Наименование КАК Наименование,
		|	""""                     КАК НаименованиеПолное,
		|	ВЫБОР
		|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
		|			ИЛИ  Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыХозяйствующихСубъектовВЕТИС.ЮридическоеЛицо)
		|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыХозяйствующихСубъектовВЕТИС.ИндивидуальныйПредприниматель)
		|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыХозяйствующихСубъектовВЕТИС.ФизическоеЛицо)
		|	КОНЕЦ КАК Тип
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка = &Контрагент";
	
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Организации.ИНН          КАК ИНН,
		|	Организации.КПП          КАК КПП,
		|	""""                     КАК ОГРН,
		|	Организации.Наименование КАК Наименование,
		|	""""                     КАК НаименованиеПолное,
		|	ВЫБОР
		|		КОГДА Организации.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
		|			ИЛИ  Организации.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыХозяйствующихСубъектовВЕТИС.ЮридическоеЛицо)
		|		КОГДА Организации.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыХозяйствующихСубъектовВЕТИС.ИндивидуальныйПредприниматель)
		|		КОГДА Организации.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыХозяйствующихСубъектовВЕТИС.ФизическоеЛицо)
		|	КОНЕЦ КАК Тип
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &Контрагент";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеКонтрагента, Выборка);
	КонецЕсли;
	
	//-- НЕ ГОСИС
	
	Возврат ДанныеКонтрагента;
	
КонецФункции

#КонецОбласти

#Область ФизическиеЛица

Функция ДанныеФизическогоЛица(ФизическоеЛицо) Экспорт
	
	ДанныеФизЛица = Новый Структура();
	ДанныеФизЛица.Вставить("Фамилия");
	ДанныеФизЛица.Вставить("Имя");
	ДанныеФизЛица.Вставить("Отчество");
	ДанныеФизЛица.Вставить("ДатаРождения");
	ДанныеФизЛица.Вставить("ДокументВид");
	ДанныеФизЛица.Вставить("ДокументТип");
	ДанныеФизЛица.Вставить("ДокументСерия");
	ДанныеФизЛица.Вставить("ДокументНомер");
	ДанныеФизЛица.Вставить("ГражданствоСтрана");
	
	//++ НЕ ГОСИС
	
	ДанныеФизЛица.Вставить("ГражданствоСтрана", Справочники.СтраныМира.Россия);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	//++ НЕ УТ
	|	ВЫБОР
	|		КОГДА ФИОФизическихЛицСрезПоследних.ФизическоеЛицо ЕСТЬ NULL
	|			ТОГДА ФизическиеЛица.Фамилия
	|		ИНАЧЕ
	//-- НЕ УТ
	|	ФИОФизическихЛицСрезПоследних.Фамилия
	//++ НЕ УТ
	|	КОНЕЦ
	//-- НЕ УТ
	|		КАК Фамилия,
	//++ НЕ УТ
	|	ВЫБОР
	|		КОГДА ФИОФизическихЛицСрезПоследних.ФизическоеЛицо ЕСТЬ NULL
	|			ТОГДА ФизическиеЛица.Имя
	|		ИНАЧЕ
	//-- НЕ УТ
	|	ФИОФизическихЛицСрезПоследних.Имя
	//++ НЕ УТ
	|	КОНЕЦ
	//-- НЕ УТ
	|		КАК Имя,
	//++ НЕ УТ
	|	ВЫБОР
	|		КОГДА ФИОФизическихЛицСрезПоследних.ФизическоеЛицо ЕСТЬ NULL
	|			ТОГДА ФизическиеЛица.Отчество
	|		ИНАЧЕ
	//-- НЕ УТ
	|	ФИОФизическихЛицСрезПоследних.Отчество
	//++ НЕ УТ
	|	КОНЕЦ
	//-- НЕ УТ
	|		КАК Отчество,
	|	ФизическиеЛица.ДатаРождения                      КАК ДатаРождения,
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента КАК ДокументВид,
	|	ДокументыФизическихЛицСрезПоследних.Серия        КАК ДокументСерия,
	|	ДокументыФизическихЛицСрезПоследних.Номер        КАК ДокументНомер
	//++ НЕ УТ
	|	,
	|	ГражданствоФизическихЛицСрезПоследних.Страна     КАК ГражданствоСтрана
	//-- НЕ УТ
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних КАК ФИОФизическихЛицСрезПоследних
	|		ПО ФИОФизическихЛицСрезПоследних.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц.СрезПоследних КАК ДокументыФизическихЛицСрезПоследних
	|		ПО ДокументыФизическихЛицСрезПоследних.Физлицо = ФизическиеЛица.Ссылка
	|		 И ДокументыФизическихЛицСрезПоследних.ЯвляетсяДокументомУдостоверяющимЛичность
	//++ НЕ УТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизическихЛиц.СрезПоследних КАК ГражданствоФизическихЛицСрезПоследних
	|		ПО ГражданствоФизическихЛицСрезПоследних.ФизическоеЛицо = ФизическиеЛица.Ссылка
	//-- НЕ УТ
	|ГДЕ
	|	ФизическиеЛица.Ссылка = &ФизическоеЛицо
	|";
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеФизЛица, Выборка);
	КонецЕсли;
	
	Если ДанныеФизЛица.ДокументВид = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ Тогда
		ДанныеФизЛица.ДокументТип = Перечисления.ТипыДокументовВЕТИС.ПаспортГражданинаРФ;
	КонецЕсли;
	
	//-- НЕ ГОСИС
	
	Возврат ДанныеФизЛица;
	
КонецФункции

#КонецОбласти

// Процедура вызывается при изменении статуса обработки документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - ссылка на документ,
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработки* - предыдущий статус обработки,
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработки* - новый статус обработки.
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса = Неопределено) Экспорт
	
	Возврат;
	
КонецПроцедуры

// В процедуре необходимо определить значения по умолчанию, которые будут подставляться в
// реквизиты не сопоставленных элементов справочника.
//
// Параметры:
//  СобственнаяОрганизация - ОпределяемыйТип.ОрганизацияКонтрагентВЕТИС - значение по умолчанию для собственной организации,
//  СторонняяОрганизация - ОпределяемыйТип.ОрганизацияКонтрагентВЕТИС - значение по умолчанию для сторонней организации.
//
Процедура ЗначенияПоУмолчаниюНеСопоставленныхОбъектов(СобственнаяОрганизация,
		                                              СобственныйТорговыйОбъект,
		                                              СобственныйПроизводственныйОбъект,
		                                              СторонняяОрганизация,
		                                              СтороннийТорговыйОбъект) Экспорт
	
	//++ НЕ ГОСИС
	СобственнаяОрганизация            = Справочники.Организации.ПустаяСсылка();
	СобственныйТорговыйОбъект         = Справочники.Склады.ПустаяСсылка();
	СобственныйПроизводственныйОбъект = Справочники.СтруктураПредприятия.ПустаяСсылка();
	СторонняяОрганизация              = Справочники.Контрагенты.ПустаяСсылка();
	СтороннийТорговыйОбъект           = Справочники.Партнеры.ПустаяСсылка();
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Процедура формирования движений по регистру "Движения серий товаров".
//
// Параметры:
//	ДополнительныеСвойства - Структура - дополнительные свойства для записи движений 
//	Движения - КоллекцияДвижений - движения по которым двигается документ
//	Отказ - Булево - признак отказа от проведения документа
//
Процедура ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	
	СкладыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Получает данные транспортной накладной для входящей или исходящей транспортной операции по документу-основанию.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Ссылка на документ-основание транспортной операции.
// 
// Возвращаемое значение:
//  Структура - структура с данными транспортной накладной с полями:
//  * Номер - Строка, Неопределено - номер транспортной накладной. Неопределено, если транспортная накладная не найдена.
//  * Дата - Дата, Неопределено - дата транспортной накладной. Неопределено, если транспортная накладная не найдена.
//
Функция ДанныеТТНДляТранспортнойОперацииПоДокументуОснованию(ДокументОснование) Экспорт
	
	ДанныеТТН = Новый Структура("Номер, Дата");
	
	//++ НЕ ГОСИС
	
	ПараметрыТТН = ПродажиВызовСервера.ПроверитьИспользованиеИДоступТТН();
	
	Если ПараметрыТТН.ИспользоватьТТН И ПараметрыТТН.Просмотр Тогда 
		ДанныеТранспортныхНакладных = ПродажиВызовСервера.ПолучитьДанныеТранспортныхНакладныхНаСервере(ДокументОснование);
		Если ЗначениеЗаполнено(ДанныеТранспортныхНакладных.ТранспортнаяНакладная) Тогда
			ЗаполнитьЗначенияСвойств(
				ДанныеТТН, 
				ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					ДанныеТранспортныхНакладных.ТранспортнаяНакладная,
					"Номер, Дата"));
		КонецЕсли;
	КонецЕсли;
	
	//-- НЕ ГОСИС
	
	Возврат ДанныеТТН;
	
КонецФункции

#Область Отчеты

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов.
//
Процедура ДобавитьКомандуАнализРасхожденийПриПоступленииПродукцииВЕТИС(КомандыОтчетов) Экспорт
	
	//++ НЕ ГОСИС
	КомандаОтчет = Отчеты.АнализРасхожденийПриПоступленииПродукцииВЕТИС.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.ВидимостьВФормах = "ФормаДокумента";
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов.
//
Процедура ДобавитьКомандуАнализРасхожденийПриИнвентаризацииПродукцииВЕТИС(КомандыОтчетов) Экспорт
	
	//++ НЕ ГОСИС
	КомандаОтчет = Отчеты.АнализРасхожденийПриИнвентаризацииПродукцииВЕТИС.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.ВидимостьВФормах = "ФормаДокумента";
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ТабличнаяЧастьТовары

// Получить представление номенклатуры.
//
// Параметры:
//	Номенклатура				- ОпределяемыйТип.Номенклатура					- Ссылка на номенклатуру
//	ХарактеристикаНоменклатуры	- ОпределяемыйТип.ХарактеристикаНоменклатуры	- Ссылка на характеристику номенклатуры.
//	Упаковка					- ОпределяемыйТип.Упаковка						- Ссылка на упаковку.
//
// Возвращаемое значение:
//	Строка - Представление номенклатуры.
//
Функция ПредставлениеНоменклатуры(Номенклатура, ХарактеристикаНоменклатуры, Упаковка) Экспорт
	
	//++ НЕ ГОСИС
	ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(Строка(Номенклатура),
																							Строка(ХарактеристикаНоменклатуры),
																							Упаковка);
	
	Возврат ПредставлениеНоменклатуры;
	//-- НЕ ГОСИС
	
	Возврат "";
	
КонецФункции

// Устанавливает параметры выбора номенклатуры.
//
// Параметры:
//	Форма			- УправляемаяФорма	- Форма, в которой нужно установить параметры выбора.
//	ИмяПоляВвода	- Строка			- Имя поля ввода номенклатуры.
//
Процедура УстановитьПараметрыВыбораНоменклатуры(Форма, ИмяПоляВвода = "ТоварыНоменклатура") Экспорт
	
	//++ НЕ ГОСИС
	ПараметрыВыбора = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Форма.Элементы[ИмяПоляВвода].ПараметрыВыбора);
	
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар));
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ОсобенностьУчета",
													Перечисления.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС));
	
	Форма.Элементы[ИмяПоляВвода].ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Заполняет количество номенклатуры по количеству ВЕТИС.
//
// Параметры:
//	ТекущаяСтрока	- ДанныеФормыЭлементКоллекции	- Строка табличной части объекта.
//	Суффикс			- Строка						- Окончание наименования колонки, содержащей количество по данным ВЕТИС.
//
Процедура ЗаполнитьКоличествоНоменклатурыПоКоличествуВЕТИС(ТекущаяСтрока, Суффикс = "") Экспорт
	
	//++ НЕ ГОСИС
	ПересчитатьКоличествоЕдиницПоВЕТИС = Новый Структура("ЕдиницаИзмеренияВЕТИС, Суффикс");
	ЗаполнитьЗначенияСвойств(ПересчитатьКоличествоЕдиницПоВЕТИС, ТекущаяСтрока);
	ПересчитатьКоличествоЕдиницПоВЕТИС.Суффикс = Суффикс;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницПоВЕТИС", ПересчитатьКоличествоЕдиницПоВЕТИС);
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Заполняет статус указания серий и проверяет серию в строке табличной части объекта.
//
// Параметры:
//	ДокументОбъект	- ДокументОбъект - Документ, для которого необходимо заполнить статус указания серии.
//	ТекущаяСтрока	- ДанныеФормыЭлементКоллекции - Строка табличной части объекта.
//
Процедура ПроверитьСериюРассчитатьСтатус(ДокументОбъект, ТекущаяСтрока) Экспорт
	
	//++ НЕ ГОСИС
	ПараметрыУказанияСерий = ГосударственныеИнформационныеСистемыПереопределяемый.ПараметрыУказанияСерийФормыОбъекта(ДокументОбъект,
								ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ДокументОбъект.Метаданные().ПолноеИмя()));
	
	Если ПараметрыУказанияСерий.Свойство("Товары") Тогда
		ПроверитьСериюРассчитатьСтатус = Новый Структура("ПараметрыУказанияСерий, Склад", ПараметрыУказанияСерий.Товары, Неопределено);
	Иначе
		ПроверитьСериюРассчитатьСтатус = Новый Структура("ПараметрыУказанияСерий, Склад", ПараметрыУказанияСерий, Неопределено);
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПроверитьСериюРассчитатьСтатус);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Заполняет идентификатор партии по данным серии в строке табличной части объекта.
//
// Параметры:
//	ТекущаяСтрока - ДанныеФормыЭлементКоллекции - Строка табличной части объекта.
//	Серия - СправочникСсылка - Ссылка на справочник серий, в которой определен реквизит ИдентификаторПартииВЕТИС
//
Процедура ЗаполнитьИдентификаторПартии(ТекущаяСтрока, Серия) Экспорт
	
	//++ НЕ ГОСИС
	Если Не ЗначениеЗаполнено(Серия) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока.ИдентификаторПартии = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Серия,
		"ИдентификаторПартииВЕТИС");
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Устанавливает служебный признак необходимости заполнения идентификатора партии в строке табличной части объекта.
//
// Параметры:
// - ТабличнаяЧастьТовары - ДанныеФормыКоллекция - Товарная табличная часть объекта.
//
Процедура ЗаполнитьИспользованиеИдентификаторовПартий(ТабличнаяЧастьТовары) Экспорт
	
	//++ НЕ ГОСИС
	ИнтеграцияВЕТИСУТ.ЗаполнитьИспользованиеИдентификаторовПартий(ТабличнаяЧастьТовары);
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Серии

// Возвращает текст запроса для движений по регистру накопления СерииНоменклатуры.
//
// Возвращаемое значение:
//	Строка - текст запроса.
//
Функция ТекстЗапросаДвижениеСерийТоваров(ИмяДокумента) Экспорт
	
	ТекстЗапроса = "";
	
	//++ НЕ ГОСИС
	
	Если ИмяДокумента = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС.Имя Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ТаблицаСерииУточнение.Номенклатура, ТаблицаСерии.Номенклатура) КАК Номенклатура,
		|	ЕСТЬNULL(ТаблицаСерииУточнение.Характеристика, ТаблицаСерии.Характеристика) КАК Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
		|	ЕСТЬNULL(ТаблицаСерииУточнение.Серия, ТаблицаСерии.Серия) КАК Серия,
		|	ЕСТЬNULL(ТаблицаСерииУточнение.Количество, ТаблицаСерии.Количество) КАК Количество,
		|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ВзаимодействиеСВЕТИС) КАК СкладскаяОперация,
		|	&Ссылка КАК Документ,
		|	&Период КАК Период,
		|	&Ссылка КАК Регистратор,
		|	ЛОЖЬ КАК ЭтоСкладскоеДвижение
		|ИЗ
		|	Документ.ВходящаяТранспортнаяОперацияВЕТИС.Товары КАК ТаблицаСерии
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВходящаяТранспортнаяОперацияВЕТИС.ТоварыУточнение КАК ТаблицаСерииУточнение
		|		ПО ТаблицаСерии.ИдентификаторСтроки = ТаблицаСерииУточнение.ИдентификаторСтроки
		|ГДЕ
		|	ТаблицаСерии.Ссылка = &Ссылка
		|	И ТаблицаСерии.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
		
	ИначеЕсли ИмяДокумента = Метаданные.Документы.ПроизводственнаяОперацияВЕТИС.Имя Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаСерии.Номенклатура КАК Номенклатура,
		|	ТаблицаСерии.Характеристика КАК Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
		|	ТаблицаСерии.Серия КАК Серия,
		|	ТаблицаСерии.Количество КАК Количество,
		|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ВзаимодействиеСВЕТИС) КАК СкладскаяОперация,
		|	&Ссылка КАК Документ,
		|	&Период КАК Период,
		|	&Ссылка КАК Регистратор,
		|	ЛОЖЬ КАК ЭтоСкладскоеДвижение
		|ИЗ
		|	Документ.ПроизводственнаяОперацияВЕТИС.Товары КАК ТаблицаСерии
		|ГДЕ
		|	ТаблицаСерии.Ссылка = &Ссылка
		|	И ТаблицаСерии.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСерии.Номенклатура,
		|	ТаблицаСерии.Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка),
		|	ТаблицаСерии.Серия,
		|	ТаблицаСерии.Количество,
		|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ВзаимодействиеСВЕТИС),
		|	&Ссылка,
		|	&Период,
		|	&Ссылка,
		|	ЛОЖЬ
		|ИЗ
		|	Документ.ПроизводственнаяОперацияВЕТИС.Сырье КАК ТаблицаСерии
		|ГДЕ
		|	ТаблицаСерии.Ссылка = &Ссылка
		|	И ТаблицаСерии.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
		
	ИначеЕсли ИмяДокумента = Метаданные.Документы.ИнвентаризацияПродукцииВЕТИС.Имя Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаСерии.Номенклатура КАК Номенклатура,
		|	ТаблицаСерии.Характеристика КАК Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
		|	ТаблицаСерии.Серия КАК Серия,
		|	ВЫБОР
		|		КОГДА ТаблицаСерии.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииИнвентаризацииПродукцииВЕТИС.Добавление) ТОГДА
		|			ТаблицаСерии.КоличествоИзменение
		|		КОГДА ТаблицаСерии.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииИнвентаризацииПродукцииВЕТИС.Изменение) ТОГДА
		|			ТаблицаСерии.КоличествоИзменение
		|		КОГДА ТаблицаСерии.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииИнвентаризацииПродукцииВЕТИС.Удаление) ТОГДА
		|			ТаблицаСерии.КоличествоИзменение
		|		ИНАЧЕ
		|			0
		|	КОНЕЦ КАК Количество,
		|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ВзаимодействиеСВЕТИС) КАК СкладскаяОперация,
		|	&Ссылка КАК Документ,
		|	&Период КАК Период,
		|	&Ссылка КАК Регистратор,
		|	ЛОЖЬ КАК ЭтоСкладскоеДвижение
		|ИЗ
		|	Документ.ИнвентаризацияПродукцииВЕТИС.Товары КАК ТаблицаСерии
		|ГДЕ
		|	ТаблицаСерии.Ссылка = &Ссылка
		|	И ТаблицаСерии.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|";
		
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаСерии.Номенклатура КАК Номенклатура,
		|	ТаблицаСерии.Характеристика КАК Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
		|	ТаблицаСерии.Серия КАК Серия,
		|	ТаблицаСерии.Количество КАК Количество,
		|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ВзаимодействиеСВЕТИС) КАК СкладскаяОперация,
		|	&Ссылка КАК Документ,
		|	&Период КАК Период,
		|	&Ссылка КАК Регистратор,
		|	ЛОЖЬ КАК ЭтоСкладскоеДвижение
		|ИЗ
		|	Документ.%ИмяДокумента%.Товары КАК ТаблицаСерии
		|ГДЕ
		|	ТаблицаСерии.Ссылка = &Ссылка
		|	И ТаблицаСерии.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяДокумента%", ИмяДокумента);
	
	//-- НЕ ГОСИС
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает структуру параметров заполнения серий.
//
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//		* ПараметрыУказанияСерий	- Структура				- Состав полей определен в функции 
//																НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//		* Склад						- ОпределяемыйТип.Склад	- Склад, на котором осуществляется серийный учет.
//
Функция ПараметрыЗаполненияСерий() Экспорт
	
	//++ НЕ ГОСИС
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("ПараметрыУказанияСерий",	Неопределено);
	ПараметрыЗаполнения.Вставить("Склад",					Неопределено);
	
	Возврат ПараметрыЗаполнения;
	//-- НЕ ГОСИС
	
	Возврат Новый Структура;
	
КонецФункции

// Заполняет свойство "Склад" в структуре параметров заполнения серий.
//
// Параметры:
//	Объект				- ДокументОбъект, ДанныеФормыКоллекция	- Объект, хранящий значение склада.
//	ПараметрыЗаполнения	- Структура								- Параметры заполнения серий.
//
Процедура ЗаполнитьПараметрЗаполненияСклад(Объект, ПараметрыЗаполнения) Экспорт

	//++ НЕ ГОСИС
	ПараметрыУказанияСерий = ПараметрыЗаполнения.ПараметрыУказанияСерий;
	
	Если ПараметрыУказанияСерий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыУказанияСерий.ИмяПоляСклад)
		И ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Объект, ПараметрыУказанияСерий.ИмяПоляСклад) Тогда
		
		ПараметрыЗаполнения.Склад = Объект[ПараметрыУказанияСерий.ИмяПоляСклад];
		
	КонецЕсли;
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Заполняет реквизит "Серия" в товарной табличной части.
//
// Параметры:
//	ТабличнаяЧасть		- ДанныеФормыКоллекция, ТабличнаяЧасть - Товарная табличная часть объекта.
//	ВыделенныеСтроки	- Массив	- Обрабатываемые строки таблицы.
//	ПараметрыЗаполнения	- Структура	- Состав полей определен в функции 
//										ИнтеграцияВЕТИСПереопределяемый.ПараметрыЗаполненияСерий.
//
// Возвращаемое значение:
//	Структура - Результат генерации серий, состав полей которого определен в функции 
//				ИнтеграцияВЕТИСУТ.ЗаполнитьСгенерироватьСерии.
//
Функция ЗаполнитьСгенерироватьСерии(ТабличнаяЧастьТовары,
									ВыделенныеСтрокиТоваров,
									ПараметрыЗаполнения,
									ТабличнаяЧастьУточнения) Экспорт
	
	//++ НЕ ГОСИС
	Результат = ИнтеграцияВЕТИСУТ.ЗаполнитьСгенерироватьСерии(ТабличнаяЧастьТовары,
									ВыделенныеСтрокиТоваров,
									ПараметрыЗаполнения,
									ТабличнаяЧастьУточнения);
	
	Возврат Результат;
	//-- НЕ ГОСИС
	
	Результат = Новый Структура("ЗаполнениеЗавершено, СписокОшибок", Ложь, Неопределено);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДокументОснованиеПроизводственнойОперации

Функция ПолучитьИдентификаторПроизводственнойТранзакцииПоДокументуОснования(ДокументОснования) Экспорт
	
	Результат = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ИдентификаторПроизводственнойТранзакцииВЕТИС");
	
	//++ НЕ ГОСИС
	
	//++ НЕ УТКА
	Если ТипЗнч(ДокументОснования) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
		Данные = Документы.ЭтапПроизводства2_2.ДанныеПартииПроизводстваВЕТИС(ДокументОснования);
		Результат = Данные.ИдентификаторПроизводственнойТранзакции;
	КонецЕсли;
	//-- НЕ УТКА
	
	//-- НЕ ГОСИС
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеПартииПроизводстваПоДокументуОснования(ДокументОснования) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторПроизводственнойТранзакции", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ИдентификаторПроизводственнойТранзакцииВЕТИС"));
	Результат.Вставить("ЗавершениеПроизводственнойТранзакции", Ложь);
	
	//++ НЕ ГОСИС
	
	//++ НЕ УТКА
	Если ТипЗнч(ДокументОснования) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
		Данные = Документы.ЭтапПроизводства2_2.ДанныеПартииПроизводстваВЕТИС(ДокументОснования);
		ЗаполнитьЗначенияСвойств(Результат, Данные);
	КонецЕсли;
	//-- НЕ УТКА
	
	//-- НЕ ГОСИС
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

// Функция определяет признак использования комиссии при закупках или производства из давальческого сырья.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево - Признак использования комиссии при закупках или производства из давальческого сырья.
//
Функция ИспользуетсяКомиссияПриЗакупкахИлиПереработкаДавальческогоСырья() Экспорт
	
	ЕстьКомиссияПереработка = Ложь;
	
	//++ НЕ ГОСИС
	
	ЕстьКомиссияПереработка = ЕстьКомиссияПереработка ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриЗакупках");
	
	//++ НЕ УТКА
	ЕстьКомиссияПереработка = ЕстьКомиссияПереработка ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоИзДавальческогоСырья");
	//-- НЕ УТКА
	
	//-- НЕ ГОСИС
	
	Возврат ЕстьКомиссияПереработка;
	
КонецФункции

// Функция определяет признак использования производства на стороне.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево - Признак использования производства на стороне.
//
Функция ИспользуетсяПереработкаНаСтороне() Экспорт
	
	ЕстьПереработкаНаСтороне = Ложь;
	
	//++ НЕ ГОСИС
	
	//++ НЕ УТКА
	ЕстьПереработкаНаСтороне = ЕстьПереработкаНаСтороне ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоНаСтороне");
	//-- НЕ УТКА
	
	//-- НЕ ГОСИС
	
	Возврат ЕстьПереработкаНаСтороне;
	
КонецФункции

// Функция определяет использование идентификатора партии в сериях номенклатуры.
//
// Параметры:
//	Номенклатура - СправочникСсылка.Номенклатура - элемент номенклатуры.
//
// Возвращаемое значение:
//	Булево - Признак использования идентификатора партии в сериях номенклатуры.
//
Функция ТребуетсяУказаниеИдентификатораПартии(Номенклатура) Экспорт
	
	//++ НЕ ГОСИС
	ИспользоватьИдентификаторПартии = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидНоменклатуры.ИспользоватьИдентификаторПартииВЕТИССерии");
	
	Если ИспользоватьИдентификаторПартии = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли ИспользоватьИдентификаторПартии = NULL Тогда
		Возврат Ложь;
	Иначе
		Возврат ИспользоватьИдентификаторПартии;
	КонецЕсли;
	//-- НЕ ГОСИС
	
	Возврат Ложь;
	
КонецФункции

Функция УказываетсяТранспортноеСредство() Экспорт
	Возврат Истина;
КонецФункции

Функция РеквизитыТранспортногоСредства(ТранспортноеСредство) Экспорт
	
	Результат = Новый Структура("НомерТранспортногоСредства, НомерАвтомобильногоПрицепа", "", "");
	
	//++ НЕ ГОСИС
	Если ЗначениеЗаполнено(ТранспортноеСредство) Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТранспортноеСредство, "Код, ГосударственныйНомерПрицепа");
		Результат.НомерТранспортногоСредства = ЗначенияРеквизитов.Код;
		Результат.НомерАвтомобильногоПрицепа = ЗначенияРеквизитов.ГосударственныйНомерПрицепа;
		
	КонецЕсли;
	//-- НЕ ГОСИС
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
