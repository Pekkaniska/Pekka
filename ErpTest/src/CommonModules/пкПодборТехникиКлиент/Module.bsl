#Область РаботаСКорзиной

// Вызывается перед закрытием формы подбора товаров. Если не установлен
// признак переноса товаров в корзину, а в корзине есть подобранные товары,
// то выдается вопрос.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора товаров,
//	Объект - ОбработкаОбъект - обработка подбора товаров,
//	Отказ - Булево - переменная в которую записывается флаг отказа.
//
Процедура ПередЗакрытиемФормыПодбораТоваров(Форма, Объект, Отказ) Экспорт
	
	Если Форма.ПеренестиВДокумент ИЛИ Форма.ВыполняетсяЗакрытие Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Корзина.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ПередЗакрытиемФормыПодбораТоваровЗавершение", ЭтотОбъект, 
			Новый Структура("Форма", Форма)), 
		НСтр("ru = 'Подобранная техника не перенесена в документ. Перенести?'"), 
		РежимДиалогаВопрос.ДаНетОтмена);
		
КонецПроцедуры

Процедура ПередЗакрытиемФормыПодбораТоваровЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	
	Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Форма.ПеренестиВДокумент = Истина;
		Форма.ВыполняетсяЗакрытие = Истина;
		Форма.Закрыть(КодВозвратаДиалога.OK);
		Форма.ВыполняетсяЗакрытие = Ложь;
		Возврат;
	КонецЕсли;
	
	Форма.ВыполняетсяЗакрытие = Истина;
	Форма.Закрыть();
	Форма.ВыполняетсяЗакрытие = Ложь;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

// Процедура вызывается при активизации строки списка иерархии номенклатуры.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма подборов.
//
Процедура ПриАктивизацииСтрокиИерархииНоменклатуры(Форма) Экспорт
	
	Если Не Форма.ИспользоватьФильтры Тогда
		Возврат;
	КонецЕсли;
	
	Если Не (Форма.ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоИерархии")) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ПодключитьОбработчикОжидания("ИерархияНоменклатурыПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

// Процедура вызывается при активизации строки списка иерархии номенклатуры.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма подборов.
//
Процедура ОбработчикАктивизацииСтрокиИерархииНоменклатуры(Форма) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"ОбщийМодуль.пкПодборТехникиКлиент.ОбработчикАктивизацииСтрокиИерархииНоменклатуры");
	
	Если Форма.ТекущаяИерархияНоменклатуры = Форма.Элементы.ИерархияНоменклатуры.ТекущаяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ТекущаяИерархияНоменклатуры = Форма.Элементы.ИерархияНоменклатуры.ТекущаяСтрока;
	
	пкПодборТехникиКлиентСервер.УстановитьОтборПоИерархииНоменклатуры(Форма);
	
КонецПроцедуры

// Процедура вызывается при активизации строки списка видов номенклатуры.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма подборов.
//
Процедура ПриАктивизацииСтрокиСпискаВидыНоменклатуры(Форма) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"ОбщийМодуль.пкПодборТехникиКлиент.ПриАктивизацииСтрокиСпискаВидыНоменклатуры");
	
	Если Не (Форма.ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам")
		Или Форма.ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам")
		Или Форма.ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоВидам")) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Форма.Элементы.ВидыНоменклатуры.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено
		Или Форма.ВидНоменклатуры = ТекущиеДанные.Ссылка Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ВидНоменклатуры = ТекущиеДанные.Ссылка;

	Если Не Форма.ИспользоватьФильтры Тогда
		Возврат;
	КонецЕсли;
		
	Форма.ПодключитьОбработчикОжидания("ВидыНоменклатурыПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
КонецПроцедуры

// Процедура вызывается при активизации строки списка иерархии номенклатуры поставщика.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма подборов.
//
Процедура ПриАктивизацииСтрокиИерархииНоменклатурыПоставщика(Форма) Экспорт
	
	Если Не Форма.ИспользоватьФильтрНоменклатураПоставщика Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ПодключитьОбработчикОжидания("ИерархияНоменклатурыПоставщикаПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

// Процедура вызывается при активизации строки списка номенклатуры.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка.
//
Процедура ПриАктивизацииСтрокиСпискаНоменклатуры(Форма) Экспорт
	
	Форма.ПодключитьОбработчикОжидания("СписокПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

// Процедура вызывается при активизации строки таблицы номенклатуры на формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора товаров,
//	Элемент - Таблица - список номенклатуры.
//
Процедура ПриАктивизацииСтрокиТаблицыНоменклатуры(Форма, Элемент) Экспорт
	
	ИмяСпискаНоменклатуры = пкПодборТехникиКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма);
	
	Если Элемент.Имя <> ИмяСпискаНоменклатуры Тогда
		Возврат;
	КонецЕсли;
		
	СтрокаТаблицыНоменклатуры = Элемент.ТекущиеДанные;
	
	Если СтрокаТаблицыНоменклатуры = Неопределено Тогда
		
		Форма.ТекущаяСтрокаНоменклатуры = пкПодборТехникиКлиентСервер.СтруктураСтрокиНоменклатуры();
		
	Иначе
		
		Если Форма.ТекущаяСтрокаНоменклатуры <> Неопределено Тогда
			
			Если (Форма.ТекущаяСтрокаНоменклатуры.Номенклатура = СтрокаТаблицыНоменклатуры.Номенклатура) Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		Форма.ТекущаяСтрокаНоменклатуры = пкПодборТехникиКлиентСервер.СтруктураСтрокиНоменклатуры();
		ЗаполнитьЗначенияСвойств(Форма.ТекущаяСтрокаНоменклатуры, СтрокаТаблицыНоменклатуры);
		
		УстановитьТекущуюСтрокуИерархииНоменклатуры(Форма);
		                
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.СписокТехники, "Модель", Форма.ТекущаяСтрокаНоменклатуры.Номенклатура);
        		
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при активизации строки таблицы номенклатуры на формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора товаров,
//	Элемент - Таблица - список номенклатуры.
//
Процедура ПриАктивизацииСтрокиТаблицыТехники(Форма, Элемент) Экспорт
			
	СтрокаТаблицыТехники = Элемент.ТекущиеДанные;
	
	Если СтрокаТаблицыТехники = Неопределено Тогда
		
		Форма.ТекущаяСтрокаТехники = пкПодборТехникиКлиентСервер.СтруктураСтрокиТехники();
		
	Иначе
		
		Если Форма.ТекущаяСтрокаТехники <> Неопределено Тогда
			
			Если (Форма.ТекущаяСтрокаТехники.Ссылка = СтрокаТаблицыТехники.Ссылка) Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		Форма.ТекущаяСтрокаТехники = пкПодборТехникиКлиентСервер.СтруктураСтрокиТехники();
		ЗаполнитьЗначенияСвойств(Форма.ТекущаяСтрокаТехники, СтрокаТаблицыТехники);
				                		
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при выборе строки таблицы номенклатуры в формах
// подборов. В процедуре выполняется проверка на допустимость выбора строки.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора,
//	ОповещениеУспешногоВыбора - ОписаниеОповещения - Описание оповещения успешного выбора
//
Процедура ПриВыбореСтрокиТаблицыНоменклатуры(Форма, ОповещениеУспешногоВыбора) Экспорт
	
	СтрокаТаблицыНоменклатуры = Форма.Элементы[пкПодборТехникиКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма)].ТекущиеДанные;
	Если СтрокаТаблицыНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если СтрокаТаблицыНоменклатуры.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТаблицыНоменклатуры.ПометкаУдаления Тогда
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ПриВыбореСтрокиТаблицыНоменклатурыЗавершение", ЭтотОбъект, 
				Новый Структура("ОповещениеУспешногоВыбора", ОповещениеУспешногоВыбора)), 
			НСтр("ru = 'Выбранные данные помечены на удаление.
			|Выполнить выбор этих данных?'"), 
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеУспешногоВыбора);
	
КонецПроцедуры

// Процедура вызывается при выборе строки таблицы номенклатуры в формах
// подборов. В процедуре выполняется проверка на допустимость выбора строки.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора,
//	ОповещениеУспешногоВыбора - ОписаниеОповещения - Описание оповещения успешного выбора
//
Процедура ПриВыбореСтрокиТаблицыТехники(Форма, ОповещениеУспешногоВыбора) Экспорт
	
	СтрокаТаблицыТехники = Форма.Элементы.СписокТехники.ТекущиеДанные;
	Если СтрокаТаблицыТехники = Неопределено Тогда
		Возврат;
	КонецЕсли;
    
    Если Форма.КодФормы = "Отгрузка" ИЛИ Форма.КодФормы = "Возврат" Тогда
        Если Форма.Объект.Корзина.Количество() = Форма.КоличествоПоМодели Тогда
            ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Дальнейший подбор техники не требуется");
            Возврат;
        КонецЕсли;
    ИначеЕсли Форма.КодФормы = "СостояниеТехники" Тогда
        Возврат;    
    КонецЕсли;    
		
	ВыполнитьОбработкуОповещения(ОповещениеУспешногоВыбора);
	
КонецПроцедуры

// Служебная процедура.
Процедура ПриВыбореСтрокиТаблицыНоменклатурыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОповещениеУспешногоВыбора = ДополнительныеПараметры.ОповещениеУспешногоВыбора;
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеУспешногоВыбора);

КонецПроцедуры

// Вызывается при переключении страницы номенклатуры в форме подбора товаров
// в документы закупки. Возникает при переключении на страницу с номенклатурой поставщика и обратно.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора товаров в документы закупки.
//
Процедура СтраницыПриСменеСтраницыНоменклатуры(Форма) Экспорт
	
	Элементы = Форма.Элементы;
		
	Элементы.КоманднаяПанельСоздатьНоменклатуру.Доступность   = (Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНоменклатура);
		
	ПриАктивизацииСтрокиТаблицыНоменклатуры(Форма, Элементы[пкПодборТехникиКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма)]);
	
КонецПроцедуры

Процедура ОтображениеОтгрузкиПриИзменении(Форма) Экспорт
    
    Если Форма.ОтображениеОтгрузки = 0 Тогда
        пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.ПланированиеПоМоделям, "ВсеЗаявки", Истина);
        пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.ПланированиеПоМоделям, "ПодтвержденныеЗаявки", Ложь);
    ИначеЕсли Форма.ОтображениеОтгрузки = 1 Тогда
        пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.ПланированиеПоМоделям, "ВсеЗаявки", Ложь);
        пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.ПланированиеПоМоделям, "ПодтвержденныеЗаявки", Истина);
    Иначе
        пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.ПланированиеПоМоделям, "ВсеЗаявки", Ложь);
        пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.ПланированиеПоМоделям, "ПодтвержденныеЗаявки", Ложь);
    КонецЕсли;
    
    //Элементы = Форма.Элементы;
    //
    //Элементы.ПланированиеПоМоделям.Обновить();

КонецПроцедуры    

#КонецОбласти

#Область ПроцедурыНавигации

// Устанавливает текущую строку иерархии номенклатуры в формах списков номенклатуры и подборов.
//
//	Форма - УправляемаяФорма - форма списка, форма подбора.
//
Процедура УстановитьТекущуюСтрокуИерархииНоменклатуры(Форма) Экспорт
	
	Если Форма.ИспользоватьФильтры
		И Не (Форма.ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам")
		Или Форма.ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам")
		Или Форма.ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоВидам") 
		Или Форма.ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоИерархии")) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСпискаНоменклатуры = пкПодборТехникиКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма);
	
	ТекущаяСтрока = Форма.Элементы[ИмяСпискаНоменклатуры].ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
		
	ТекущиеДанные = Форма.Элементы[ИмяСпискаНоменклатуры].ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоИерархии") Тогда
		
		Если Форма.Элементы.ИерархияНоменклатуры.ТекущаяСтрока = ТекущиеДанные.Родитель Тогда
			Возврат;
		КонецЕсли;
		
		Форма.Элементы.ИерархияНоменклатуры.ТекущаяСтрока = ТекущиеДанные.Родитель;
		Форма.ТекущаяИерархияНоменклатуры                 = ТекущиеДанные.Родитель;
	Иначе
		
		Если Форма.Элементы.ВидыНоменклатуры.ТекущаяСтрока = ТекущиеДанные.ВидНоменклатуры Тогда
			Возврат;
		КонецЕсли;
		
		Форма.Элементы.ВидыНоменклатуры.ТекущаяСтрока = ТекущиеДанные.ВидНоменклатуры;
		Форма.ВидНоменклатуры = ТекущиеДанные.ВидНоменклатуры; 
		  
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает текущей страницу со списком номенклатуры.
// Используется в формах подборов (в документ продажи, закупки).
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Процедура ПерейтиКСпискуНоменклатуры(Форма) Экспорт
			
	Форма.Элементы.СтраницыСписков.ТекущаяСтраница = Форма.Элементы[пкПодборТехникиКлиентСервер.ИмяТекущейСтраницыПоВариантуПоиска(Форма)];
	
	пкПодборТехникиКлиентСервер.УстановитьДоступностьЭлементовФильтров(Форма);
	
	Если ЗначениеЗаполнено(Форма.СтрокаПоискаНоменклатура) Тогда
		Форма.ТекущийЭлемент = Форма.Элементы.СтрокаПоискаНоменклатура;
	Иначе
		Форма.ТекущийЭлемент = Форма.Элементы[пкПодборТехникиКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма)];
	КонецЕсли;
	
	Форма.Элементы.СтраницыСоздать.ТекущаяСтраница = Форма.Элементы.СтраницаСоздатьНоменклатуру;
		
КонецПроцедуры

Процедура ИзменитьВариантНавигации(Форма) Экспорт
	
	СписокВыбораВариантовНавигации = Новый СписокЗначений;
	СписокВыбораВариантовНавигации.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам"),
											НСтр("ru = 'Навигация по видам и свойствам'"));
	СписокВыбораВариантовНавигации.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоИерархии"),
											НСтр("ru = 'Навигация по иерархии'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьВариантНавигацииЗавершение", Форма);
	
	Форма.ПоказатьВыборИзМеню(ОписаниеОповещения,
								СписокВыбораВариантовНавигации,
								Форма.Элементы.КоманднаяПанельВариантНавигации);
		
КонецПроцедуры

#КонецОбласти

#Область РаботаСДеревомСвойствВидаНоменклатуры

// Процедура вызывается при выборе "фиксированного" значения в дереве отборов.
//
// Параметры:
//  Форма					 - УправляемаяФорма	 - форма списка номенклатуры или форма подбора.
//  ОповещениеПослеОбработки - ОписаниеОповещения - описание оповещения после обработки
//
Процедура ДеревоОтборовВыбор(Форма, ОповещениеПослеОбработки = Неопределено) Экспорт
	
	Если Не Форма.ИспользоватьФильтры Тогда
		Если ОповещениеПослеОбработки <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПослеОбработки, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	ВариантДействий = ВариантДействийПриВыбореЗначенияДереваОтборов(Форма);
	
	Если ВариантДействий = 1 Тогда // нажали на гиперссылку с "фиксированным" значением
		УстановитьФиксированныйОтбор(Форма, ОповещениеПослеОбработки);
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при изменении значения в дереве отборов по свойствам вида
//  номенклатуры на формах списков и формах подборов.
//
// Параметры:
//  Форма					 - УправляемаяФорма	 - форма списка номенклатуры или форма подбора.
//  ОповещениеПослеОбработки - ОписаниеОповещения - описание оповещения после обработки
//
Процедура ДеревоОтборовОтборПриИзменении(Форма, ОповещениеПослеОбработки = Неопределено) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"ОбщийМодуль.пкПодборТехникиКлиент.ДеревоОтборовОтборПриИзменении");
	
	Если Не Форма.ИспользоватьФильтры Тогда
		Если ОповещениеПослеОбработки <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПослеОбработки, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	ВариантДействий = ВариантДействийПриИзмененииОтбораДереваОтборов(Форма);
	
	Если ВариантДействий = 3 Тогда // установили флажок на строке с незаполненным "фиксированным" значением
		УстановитьФиксированныйОтбор(Форма, ОповещениеПослеОбработки);
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеПослеОбработки, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДеревомСвойствВидаНоменклатуры

// Возвращает признак небходимости установки отбора  динамического списка номенклатуры
//  на формах отбора, по значениям дерева отборов. Вызывается при нажатии на поле выбора
//  фиксированного значения в строке дерева отборов.
//  Возвращает в оповещении: Истина - значение в дереве отоборов изменено и нужно применить значение отбора
//  к списку номенклатуры, или Ложь - значение отбора не изменено.
//
// Параметры:
//  Форма					 - УправляемаяФорма	 - форма списка или форма подбора.
//  ОповещениеПослеОбработки - ОписаниеОповещения - описание оповещения после обработки
//
Процедура УстановитьФиксированныйОтбор(Форма, ОповещениеПослеОбработки = Неопределено)
	
	ТекущиеДанные = Форма.Элементы.ДеревоОтборов.ТекущиеДанные;
	
	Если Не ТекущиеДанные.ФиксированноеЗначение Тогда
		Если ОповещениеПослеОбработки <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПослеОбработки, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	ВидНоменклатуры = Форма.ВидНоменклатуры;
	
	ТипЗначенияОтбора = ТипЗнч(ТекущиеДанные.ЗначениеОтбора);
	
	Если ТипЗначенияОтбора = Тип("СписокЗначений") Тогда
		
		// Тип значения - строка. В этом случае открывается форма установки значения и список выбора
		// поля выбора значения заполняется доступными значениями.
		
		ПоНоменклатуре = Истина;
				
		ЗначениеОтбора = СокрЛП(ТекущиеДанные.ЗначениеОтбора);
		
		СтруктураПараметров = Новый Структура("ИмяРеквизита, ЗначениеОтбора, ЭтоДопРеквизит, ОтборПоНоменклатуре, ВидНоменклатуры", 
			ТекущиеДанные.Представление, ТекущиеДанные.ЗначениеОтбора, ТекущиеДанные.ЭтоДопРеквизит, ПоНоменклатуре, ВидНоменклатуры);
			
	ИначеЕсли ТипЗначенияОтбора = Тип("Строка") Тогда
		
		// Тип значения - строка. В этом случае открывается форма установки значения и список выбора
		// поля выбора значения заполняется доступными значениями.
		
		ПоНоменклатуре = Истина;
				
		ЗначениеОтбора = СокрЛП(ТекущиеДанные.ЗначениеОтбора);
		
		СписокЗначенийРеквизита = пкПодборТехникиВызовСервера.СписокЗначенийРеквизита(
			ВидНоменклатуры, 
			ТекущиеДанные.ИмяРеквизита, 
			ТекущиеДанные.ЭтоДопРеквизит, 
			ПоНоменклатуре);
		
		СтруктураПараметров = Новый Структура("ИмяРеквизита, СписокСтрокОтбора, ЗначениеОтбора, ТипЗначения", 
			ТекущиеДанные.Представление, СписокЗначенийРеквизита, ТекущиеДанные.ЗначениеОтбора, ТипЗначенияОтбора);
	Иначе
		
		// Тип значения - число или дата, в этом случае открывается форма установки интервала.
		
		СтруктураПараметров = Новый Структура("ИмяРеквизита, ЗначениеОт, ЗначениеДо, ТипЗначения", 
			ТекущиеДанные.Представление, ТекущиеДанные.ИнтервалОт, ТекущиеДанные.ИнтервалДо, ТипЗнч(ТекущиеДанные.ЗначениеОтбора));
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ОповещениеПослеОбработки, ТекущиеДанные", ОповещениеПослеОбработки, ТекущиеДанные);
	Если ТипЗначенияОтбора = Тип("СписокЗначений") Тогда
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаУстановкиЗначенийОтбора", 
			СтруктураПараметров, 
			Форма,
			,
			,
			,
			Новый ОписаниеОповещения("УстановитьФиксированныйОтборЗавершение", ЭтотОбъект, ДополнительныеПараметры), 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаУстановкиИнтервала", 
			СтруктураПараметров, 
			Форма,
			,
			,
			,
			Новый ОписаниеОповещения("УстановитьФиксированныйОтборЗавершение", ЭтотОбъект, ДополнительныеПараметры), 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
		
КонецПроцедуры

// Служебная процедура.
Процедура УстановитьФиксированныйОтборЗавершение(ЗначениеВыбора, ДополнительныеПараметры) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"ОбщийМодуль.пкПодборТехникиКлиент.УстановитьФиксированныйОтборЗавершение");
	
	ОповещениеПослеОбработки = ДополнительныеПараметры.ОповещениеПослеОбработки;
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
	Если ЗначениеВыбора = Неопределено Тогда 
		ТекущиеДанные.Отбор = ЗначениеЗаполнено(ТекущиеДанные.ЗначениеОтбора);
		ТекущиеДанные.ОтборУстановлен = ТекущиеДанные.Отбор;
		Возврат;
	КонецЕсли;
	
	УстанавливатьОтборСписка = Ложь;
	
	ТипЗначенияОтбора = ТипЗнч(ТекущиеДанные.ЗначениеОтбора);
	
	Если ТипЗначенияОтбора = Тип("Строка") Тогда
		
		Если ЗначениеВыбора <> Неопределено Тогда
			
			ЗначениеОтбора = ЗначениеВыбора.ЗначениеОтбора;
			
			ТекущиеДанные.Отбор               = ЗначениеЗаполнено(ЗначениеОтбора);
			ТекущиеДанные.ОтборУстановлен     = ТекущиеДанные.Отбор;
			ТекущиеДанные.ЗначениеОтбора      = ЗначениеОтбора;
			ТекущиеДанные.ПредставлениеОтбора = ?(ЗначениеЗаполнено(ЗначениеОтбора), ЗначениеОтбора, НСтр("ru = '<не задано>'"));
			
			УстанавливатьОтборСписка = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗначенияОтбора = Тип("СписокЗначений") Тогда
		
		Если ЗначениеВыбора <> Неопределено Тогда
			
			ЗначениеОтбора = ЗначениеВыбора.ЗначениеОтбора;
			
			ТекущиеДанные.Отбор               = ЗначениеЗаполнено(ЗначениеОтбора);
			ТекущиеДанные.ОтборУстановлен     = ТекущиеДанные.Отбор;
			ТекущиеДанные.ЗначениеОтбора      = ЗначениеОтбора;
			ТекущиеДанные.ПредставлениеОтбора = ?(ЗначениеЗаполнено(ЗначениеОтбора), ЗначениеОтбора, НСтр("ru = '<не задано>'"));
			
			УстанавливатьОтборСписка = Истина;
			
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеВыбора <> Неопределено Тогда
			
			Если ЗначениеВыбора.ИнтервалОт <> ТекущиеДанные.ИнтервалОт 
				Или ЗначениеВыбора.ИнтервалДо <> ТекущиеДанные.ИнтервалДо Тогда
				
				ТекущиеДанные.ИнтервалОт = ЗначениеВыбора.ИнтервалОт;
				ТекущиеДанные.ИнтервалДо = ЗначениеВыбора.ИнтервалДо;
				ТекущиеДанные.ПредставлениеОтбора = ПредставлениеИнтервалаОтбора(ЗначениеВыбора.ИнтервалОт, ЗначениеВыбора.ИнтервалДо);
				
				УстанавливатьОтборСписка = Истина;
				
			КонецЕсли;
			
			ТекущиеДанные.Отбор = ЗначениеЗаполнено(ЗначениеВыбора.ИнтервалОт) Или ЗначениеЗаполнено(ЗначениеВыбора.ИнтервалДо);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОповещениеПослеОбработки <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПослеОбработки, УстанавливатьОтборСписка);
	КонецЕсли;

КонецПроцедуры

// Возвращает строковое представление интервала отбора.
//
// Параметры:
//	ИнтервалОт - Число, Строка, Дата - начальное значение интервала,
//	ИнтервалДо - Число, Строка, Дата - конечное значение интервала.
//
// Возвращаемое значение:
//	Строка - представление - интервала.
//
Функция ПредставлениеИнтервалаОтбора(ИнтервалОт, ИнтервалДо)
	
	СтрокаИнтервалОт = ?(ЗначениеЗаполнено(ИнтервалОт), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'от %1'"), ИнтервалОт), "");
	СтрокаИнтервалДо = ?(ЗначениеЗаполнено(ИнтервалДо), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = ' до %1'"), ИнтервалДо), "");
	
	ПредставлениеОтбора = СтрокаИнтервалОт + СтрокаИнтервалДо;
	ПредставлениеОтбора = ?(ЗначениеЗаполнено(ПредставлениеОтбора), ПредставлениеОтбора, НСтр("ru = '<не задано>'"));
	
	Возврат ПредставлениеОтбора;
	
КонецФункции

// Возвращает число - код варианта действия которое было выполнено с деревом отборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка справочника номенклатуры или форма подбора.
//
// Возвращаемое значение:
//	Число.
//	0 - никакого изменения значений в дереве отборов не произошло;
//	1 - был установлен/снят флажок у строки (или родительской строки) значений, например:
//	    был установлен/снят флажок у строки с качеством "Новый" или у строки "Качество";
//	2 - был установлен/снят фладок на строке с "фиксированным значением", причем фиксированное
//	    значение уже было указано, например: в строке дерева отборов было указано конкретное значение диаметра
//	    кабеля и у него установили/сняли флажок;
//	3 - был УСТАНОВЛЕН флажок на строке с "фиксированным значением", причем фиксированное значение
//	    в строке еще не указано, например: в строке дерева отборов не было указано конкретное значение
//	    диаметра кабеля и у строки установили флажок. Такой вариант действия приводит к тому что открывается
//	    дополнительная форма установки значений (или интервала) фиксированного значения.
//	
Функция ВариантДействийПриИзмененииОтбораДереваОтборов(Форма)
	
	ВариантДействий = 0;
	
	ТекущиеДанные = Форма.Элементы.ДеревоОтборов.ТекущиеДанные;
	
	Если ТекущиеДанные.ФиксированноеЗначение Тогда
		
		// Фиксированное значение - например, введен артикул, или указано,
		// какое-то конкретное числовое, строковое значение, или интервал дат.
		
		ВариантДействий = 2; // установили/сняли флажок на поле фиксированного значения
		
		Если ТекущиеДанные.Отбор Тогда
			
			ТипЗначенияОтбора = ТипЗнч(ТекущиеДанные.ЗначениеОтбора);
			
			Если Не (
				     (ТипЗначенияОтбора = Тип("Строка") И ЗначениеЗаполнено(ТекущиеДанные.ЗначениеОтбора)) 
				 Или ТипЗначенияОтбора <> Тип("Строка") И (ЗначениеЗаполнено(ТекущиеДанные.ИнтервалОт) Или ЗначениеЗаполнено(ТекущиеДанные.ИнтервалДо))
				    ) Тогда
				
				ВариантДействий = 3; // УСТАНОВИЛИ флажок на незаполненном значением поле фиксированного значения
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ВариантДействий = 1; // установили/сняли флажок на строке конкретного значения или группы значений
		
		Родитель = ТекущиеДанные.ПолучитьРодителя();
		
		Если Родитель = Неопределено Тогда // выбрана строка-родитель
			
			// Установить/снять значение флажка отбора для всех подчиненных строк.
			
			ПодчиненныеЭлементыДерева = ТекущиеДанные.ПолучитьЭлементы();
			
			Для Каждого ЭлементДерева Из ПодчиненныеЭлементыДерева Цикл
				ЭлементДерева.Отбор = ТекущиеДанные.Отбор;
			КонецЦикла;
			
		Иначе
			
			// Выбрана подчиненная строка.
			
			Родитель.Отбор = Ложь;
			
			ПодчиненныеЭлементыДерева = Родитель.ПолучитьЭлементы();
			
			// Пройти по всем подчиненным строкам родителя выбранной строки, и если
			// хотя бы для одной строки установлен флажок отбора, то включить флажок отбора
			// и родительской строки.
			
			Для Каждого ЭлементДерева Из ПодчиненныеЭлементыДерева Цикл
				
				Если ЭлементДерева.Отбор Тогда
					Родитель.Отбор = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВариантДействий;
	
КонецФункции

// Возвращает число - код варианта действий которое было выполнено с деревом отборов
// при событии выбора значения в дереве отборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка справочника номенклатуры или форма подбора.
//
// Возвращаемое значение:
//	Число.
//	0 - никакого изменения значений в дереве отборов не произошло,
//	1 - было выбрано значение в строке с "фиксированным" значением,
//	в этом случае необходимо открыть форму установки "фиксированного" значения.
//
Функция ВариантДействийПриВыбореЗначенияДереваОтборов(Форма)
	
	ДеревоОтборов   = Форма.Элементы.ДеревоОтборов;
	ТекущийЭлемент  = Форма.Элементы.ДеревоОтборов.ТекущийЭлемент;
	ТекущаяСтрока   = Форма.Элементы.ДеревоОтборов.ТекущаяСтрока;
	ТекущиеДанные   = Форма.Элементы.ДеревоОтборов.ТекущиеДанные;
	
	ВариантДействий = 0;
	
	Если ТекущийЭлемент = Форма.Элементы.ДеревоОтборовПредставлениеОтбора Тогда
		
		Если ТекущиеДанные.ФиксированноеЗначение Тогда
			
			ВариантДействий = 1;
			
		КонецЕсли;
		
	ИначеЕсли ТекущийЭлемент = Форма.Элементы.ДеревоОтборовПредставление Тогда
		
		Если ТекущиеДанные.ФиксированноеЗначение Тогда
			
			ВариантДействий = 1;
			
		ИначеЕсли Не ТекущиеДанные.ОтборДоступен Тогда
			
			// Если был щелчок по родительской строке, то свернуть/развернуть узел.
			
			Если ДеревоОтборов.Развернут(ТекущаяСтрока) Тогда
				ДеревоОтборов.Свернуть(ТекущаяСтрока);
			Иначе
				ДеревоОтборов.Развернуть(ТекущаяСтрока);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВариантДействий;
	
КонецФункции

// Возвращает строковое описание доступного количества. Используется при выводе
// строк в таблицу остатков в формах подбора товаров в документ продажи, документ
// закупки.
//
// Параметры
//  КоличествоДоступно (Число) - количество товаров,
//	НаименованиеУпаковкиЕдиницыИзмерения (Строка) - наименование упаковки, единицы измерения,
//	ХарактеристикиИспользуются (Булево) - признак ведения учета по характеристикам у товара,
//	НавигацияПоХарактеристикам (Булево) - признак навигации по характеристикам на форме подбора.
//
// Возвращаемое значение:
//	Строка. Описание доступного количества товаров для текущей строки в форме подбора.
//
Функция ОписаниеДоступногоКоличества(КоличествоДоступно, НаименованиеУпаковкиЕдиницыИзмерения, 
	ХарактеристикиИспользуются, НавигацияПоХарактеристикам)
	
	ДоступноОписание = "";
	
	Если ЗначениеЗаполнено(КоличествоДоступно) Тогда
			ДоступноОписание = Формат(КоличествоДоступно,"ЧДЦ=3") + " " + НаименованиеУпаковкиЕдиницыИзмерения;
	КонецЕсли;
	
	Возврат ДоступноОписание;
	
КонецФункции

// Возвращает текст предупреждения по коду ошибки расширенного поиска.
//
// Параметры:
//	КодОшибки - Строка - код ошибки расширенного поиска.
//
// Возвращаемое значение:
//	Строка - текст предупреждения ошибки расширеннго поиска.
//
Функция ТекстПредупрежденияОшибкиРасширенногоПоиска(КодОшибки)
	
	Если КодОшибки = "НичегоНеНайдено" Тогда
		ТекстПредупреждения = НСтр("ru = 'Ничего не найдено, уточните запрос.'");
	ИначеЕсли КодОшибки = "СлишкомМногоРезультатов" Тогда
		ТекстПредупреждения = НСтр("ru = 'Слишком много результатов поиска, уточните запрос.'");
	ИначеЕсли КодОшибки = "ОшибкаПоиска" Тогда
		ТекстПредупреждения = НСтр("ru = 'При выполнении поиска произошла ошибка, попробуйте изменить выражение поиска.'");
	Иначе
		ТекстПредупреждения = "";
	КонецЕсли;
	
	Возврат ТекстПредупреждения;
	
КонецФункции

#КонецОбласти

#Область Прочие

// Процедура открывает форму карточки номенклатуры. Используется в формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Процедура ОткрытьКарточкуТовара(Форма) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"ОбщийМодуль.пкПодборТехникиКлиент.ОткрытьКарточкуТовара");
	
	ТекущаяСтрока = Форма.Элементы[пкПодборТехникиКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма)].ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ", ТекущаяСтрока);
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаЭлемента", ПараметрыФормы);
	
КонецПроцедуры

// Процедура открывает форму карточки номенклатуры. Используется в формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Процедура ОткрытьКарточкуТехники(Форма) Экспорт
    
    Элементы = Форма.Элементы;
		
	ТекущаяСтрока = Элементы.СписокТехники.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ", ТекущаяСтрока.Ссылка);
	ОткрытьФорму("Справочник.ОбъектыЭксплуатации.Форма.ФормаЭлемента", ПараметрыФормы);
	
КонецПроцедуры

// Процедура открывает форму карточки номенклатуры. Используется в формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Процедура ОткрытьКарточкуМодели(Модель) Экспорт
		
	ПараметрыФормы = Новый Структура("Ключ", Модель);
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаЭлемента", ПараметрыФормы);
	
КонецПроцедуры

Процедура ОткрытьКарточкуКлиента(Клиент) Экспорт
		
	ПараметрыФормы = Новый Структура("Ключ", Клиент);
	ОткрытьФорму("Справочник.Партнеры.Форма.ФормаЭлемента", ПараметрыФормы);
	
КонецПроцедуры

Процедура ОткрытьКарточкуОбъектаСтроительства(ОбъектСтроительства) Экспорт
		
	ПараметрыФормы = Новый Структура("Ключ", ОбъектСтроительства);
	ОткрытьФорму("Справочник.СМ_ОбъектыСтроительства.Форма.ФормаЭлемента", ПараметрыФормы);
	
КонецПроцедуры

// Процедура вызывается при нажатии на информационную надпись - строку с информацией 
// о количестве и сумме подобранных товаров на формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора,
//	Объект (ОбработкаОбъект, ДокументОбъект) - объект подбора.
//
Процедура ПриНажатииНаИнформационнуюНадпись(Форма, Объект) Экспорт
	
	Форма.ПоказыватьПодобранныеТовары = Не Форма.ПоказыватьПодобранныеТовары;
	Форма.Элементы.ОбластьПодобранныеТовары.Видимость = Форма.ПоказыватьПодобранныеТовары;
	
	пкПодборТехникиКлиентСервер.УстановитьТекстИнформационнойНадписи(Форма);
    
КонецПроцедуры

// Процедура вызывается при нажатии на информационную надпись - строку с информацией 
// о количестве и сумме подобранных товаров на формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора,
//	Объект (ОбработкаОбъект, ДокументОбъект) - объект подбора.
//
Процедура ПриНажатииНаИнформационнуюНадписьТехника(Форма, Объект) Экспорт
	
	Форма.ПоказыватьТехнику = Не Форма.ПоказыватьТехнику;
    //Форма.Элементы.ГруппаОтборПоСтатусам.Видимость = Форма.ПоказыватьТехнику;
    //Форма.Элементы.ГруппаСписокТехники.Видимость   = Форма.ПоказыватьТехнику;
    
    Форма.Элементы.СтраницыТехникаМодели.Видимость = Форма.ПоказыватьТехнику;
	
	пкПодборТехникиКлиентСервер.УстановитьТекстИнформационнойНадписиТехника(Форма);
    
КонецПроцедуры

Процедура ПриНажатииНаИнформационнуюНадписьНастройкаОтборов(Форма, Объект) Экспорт
	
	Форма.ПоказыватьНастройкуОтборов = Не Форма.ПоказыватьНастройкуОтборов;
    
    Форма.Элементы.ГруппаОтборы.Видимость = Форма.ПоказыватьНастройкуОтборов;
	
	пкПодборТехникиКлиентСервер.УстановитьТекстИнформационнойНадписиНастройкаОтборов(Форма);
    
КонецПроцедуры

// Процедура вызывается при нажатии на информационную надпись - строку с информацией 
// о количестве и сумме подобранных товаров на формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора,
//	Объект (ОбработкаОбъект, ДокументОбъект) - объект подбора.
//
Процедура ПриНажатииНаИнформационнуюНадписьМодель(Форма, Объект) Экспорт
	
	Форма.ПоказыватьМодели = Не Форма.ПоказыватьМодели;
	Форма.Элементы.ГруппаСписокНоменклатурыНавигация.Видимость = Форма.ПоказыватьМодели;
	
	пкПодборТехникиКлиентСервер.УстановитьТекстИнформационнойНадписиМодели(Форма);
    
КонецПроцедуры

// Открывает форму настройки поиска - расширенный или платформенный.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма подбора.
//
Процедура НастроитьПоиск(Форма) Экспорт
	
	СтруктураПараметров = Неопределено;

	
	ОткрытьФорму("Справочник.Номенклатура.Форма.НастройкаВариантаПоиска", 
		Новый Структура("ВариантПоискаТоваров", Форма.ВариантПоискаТоваров),,,,, Новый ОписаниеОповещения("НастроитьПоискЗавершение", ЭтотОбъект, Новый Структура("Форма", Форма)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

Процедура НастроитьПоискЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Форма = ДополнительныеПараметры.Форма;
    
    
    СтруктураПараметров = Результат;
    
    Если СтруктураПараметров <> Неопределено Тогда
        
        Если Форма.ВариантПоискаТоваров <> СтруктураПараметров.ВариантПоискаТоваров Тогда
            
            Форма.ВариантПоискаТоваров = СтруктураПараметров.ВариантПоискаТоваров;
            пкПодборТехникиКлиентСервер.УстановитьТекущиеСтраницыПоВариантуПоиска(Форма);
            
        КонецЕсли;
        
    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ГорячиеКлавиши

// Процедура устанавливает текущим элементом нужную панель отборов в зависимости
// от установленного варианта навигации.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Процедура УстановитьТекущийЭлементНавигация(Форма) Экспорт
	
	ВариантНавигации = Форма.ВариантНавигации;
	
	Если ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоИерархии") Тогда
		
		Форма.ТекущийЭлемент = Форма.Элементы.ИерархияНоменклатуры;
		
	ИначеЕсли ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам")
			Или ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам")
			Или ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоВидам") Тогда
		
		Форма.ТекущийЭлемент = Форма.Элементы.ДеревоОтборов;
				
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает текущим элементом - список номенклатуры.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Процедура УстановитьТекущийЭлементСписокТоваров(Форма) Экспорт
	
	Форма.ТекущийЭлемент = Форма.Элементы[пкПодборТехникиКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма)];
	
КонецПроцедуры

// Процедура устанавливает текущим элементом - список подобранных товаров - корзину.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Процедура УстановитьТекущийЭлементКорзина(Форма) Экспорт
	
	Форма.ТекущийЭлемент = Форма.Элементы.Корзина;
	
КонецПроцедуры

// Возвращает имя текущего элемента - строки поиска на форме подбора.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Функция ИмяТекущегоЭлементаСтрокиПоиска(Форма) Экспорт
		
	ИмяТекущегоЭлемента = "СтрокаПоискаНоменклатура";
		
	Возврат ИмяТекущегоЭлемента;

КонецФункции

// Процедура устанавливает текущим элементом строку поиска на форме.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Процедура УстановитьТекущийЭлементСтрокаПоиска(Форма) Экспорт
	
	ВариантПоиска = пкПодборТехникиКлиентСервер.ДействующийВариантПоиска(Форма);
	Если Не ВариантПоиска = "Расширенный" Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекущегоЭлемента = ИмяТекущегоЭлементаСтрокиПоиска(Форма);
	
	Форма.ТекущийЭлемент = Форма.Элементы[ИмяТекущегоЭлемента];
	
КонецПроцедуры

#КонецОбласти

#Область ПоискНаФормахПодбора

// Если используется полнотекстовый поиск, то функция проверяет актуальность индекса.
// Если индекс не актуален, то отображается диалог с предложением обновить индекс
// полнотекстового поиска. Если пользователь отказывается от обновления индекса,
// то все равно разрешается выполнить расширенный поиск, т.к. допускается что сведения
// касающие товаров часто не меняются.
//
// Параметры:
//	Форма - УправляемаяФорма - форма из которой выполняется вызов функции поиска.
//
// Возвращаемое значение:
//	Булево. Истина - выполнение поиска товаров возможно, Ложь - нет.
//
Процедура ВыполнениеРасширенногоПоискаВозможно(Форма, ОповещениеПослеПроверки) Экспорт
	
	// При включении флажка "Поиск по точному соответствию", выполняется неполнотекстовый поиск, 
	// соответственно, не нужно проверять актуальность индекса полнотекстового поиска.
	Если Форма.НайтиНоменклатуруПоТочномуСоответствию Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПослеПроверки);
		Возврат;
	КонецЕсли;
	
	// Проверка необходима только при использовании полнотекстового поиска.
	Если Не Форма.ИспользоватьПолнотекстовыйПоиск Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПослеПроверки);
		Возврат;
	КонецЕсли;
	
	Если Форма.ИнформационнаяБазаФайловая И Не Форма.ИндексПолнотекстовогоПоискаАктуален Тогда
		Результат = Неопределено;

		ПоказатьВопрос(
			Новый ОписаниеОповещения("ВыполнениеРасширенногоПоискаВозможноЗавершение", 
				ЭтотОбъект, 
				Новый Структура("ОповещениеПослеПроверки, Форма", ОповещениеПослеПроверки, Форма)), 
			НСтр("ru = 'Индекс полнотекстового поиска неактуален. Обновить индекс?'"), 
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеПослеПроверки);
	
КонецПроцедуры

// Служебная процедура.
Процедура ВыполнениеРасширенногоПоискаВозможноЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОповещениеПослеПроверки = ДополнительныеПараметры.ОповещениеПослеПроверки;
	Форма = ДополнительныеПараметры.Форма;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОбновитьИндексПолнотекстовогоПоиска();
		Форма.ИндексПолнотекстовогоПоискаАктуален = Истина;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеПослеПроверки);

КонецПроцедуры

// Обрабатывает флаг возврата функции выполнения поиска номенклатуры.
// Если поиск не был выполнен, то выводится предупреждение.
//
// Параметры:
//	Форма - УправляемаяФорма - форма из которой вызывалась функция поиска товаров по строке,
//	ОтображатьПредупреждение - Булево - флаг отображения предупреждения, при неудачном поиске.
//
Процедура ПослеВыполненияПоискаНоменклатуры(Форма, ОтображатьПредупреждение = Истина) Экспорт
	
	ПоискВыполнен = Не Форма.ПоискНоменклатурыНеУдачный;
	КодОшибки = Форма.КодОшибкиПоиска;
	
	СтрокаПоиска = Форма.СтрокаПоискаНоменклатура;
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Если Не ПоискВыполнен И ОтображатьПредупреждение Тогда
			ПоказатьПредупреждение(,ТекстПредупрежденияОшибкиРасширенногоПоиска(КодОшибки), 120, "Поиск");
		КонецЕсли;
		СпискиВыбораКлиентСервер.ОбновитьСписокВыбора(Форма.Элементы.СтрокаПоискаНоменклатура.СписокВыбора, СтрокаПоиска, 21);
	КонецЕсли;
	
	ТекущийЭлемент = Форма.Элементы["СписокРасширенныйПоискНоменклатура"];
	
	Если Не ПоискВыполнен Тогда
		ТекущийЭлемент = Форма.Элементы.СтрокаПоискаНоменклатура;
	КонецЕсли;
	
	Форма.ТекущийЭлемент = ТекущийЭлемент;
	
КонецПроцедуры

// Вызывает функцию обновления индекса полнотекстового поиска на сервере.
//
Процедура ОбновитьИндексПолнотекстовогоПоиска() Экспорт
	
	Состояние(НСтр("ru = 'Идет обновление индекса полнотекстового поиска ...'"));
	
	пкПодборТехникиВызовСервера.ОбновитьИндексПолнотекстовогоПоиска();
	
	Состояние(НСтр("ru = 'Обновление индекса полнотекстового поиска завершено.'"));
	
КонецПроцедуры

#КонецОбласти




