////////////////////////////////////////////////////////////////////////////////
// Заполнение путевых листов (вызов сервера)
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции 
	
// Возвращает параметры заполнения путевого листа из внешней базы
//
Функция ПолучитьДанныеПоТС_ИзВнешнейБазы(Параметры, ТекстОшибки, ПараметрыЗаполненияПЛ)
	АдресВебСервиса    = СокрЛП(ПараметрыЗаполненияПЛ.АдресИБ.АдресWebСервиса);
	ИмяПользователя    = ПараметрыЗаполненияПЛ.АдресИБ.Логин;
	ПарольПользователя = ПараметрыЗаполненияПЛ.АдресИБ.Пароль;		
	#Если НаКлиенте Тогда
		НастройкаПроксиСервера = ItobРаботаС_БСП.НастройкиПроксиНаКлиенте();
	#Иначе
		НастройкаПроксиСервера = ItobРаботаС_БСП.НастройкиПроксиНаСервере();
	#КонецЕсли
	Таймаут = 20;
	Если Лев(Нрег(АдресВебСервиса),5) = "https" Тогда
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL();
	Иначе
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	Определение = Новый WSОпределения(АдресВебСервиса+"?WSDL",ИмяПользователя,ПарольПользователя,НастройкаПроксиСервера,Таймаут,ЗащищенноеСоединение);
	Прокси = Новый WSПрокси(Определение, "http://www.itob.ru/csm/gpsdata", "ItobWSДанныеТрекеров", "ItobWSДанныеТрекеровSoap",
		НастройкаПроксиСервера,Таймаут,ЗащищенноеСоединение);
	Прокси.Пользователь = ИмяПользователя;
	Прокси.Пароль = ПарольПользователя;
	
	ГосНомер = СокрЛП(Параметры.ТранспортноеСредство.ГосНомер);
	
	ДанныеПоТС = Прокси.ПолучитьДанныеПоТС(Параметры.ДатаВыезда, Параметры.ДатаВозвращения, "ГосНомер", ГосНомер);
	
	Результат = Новый Структура("ПробегGPS,ПробегCAN,СпидометрВыездаCAN,СпидометрВозвращенияCAN,ВремяРаботыДвигателя,УровеньТопливаНачало,УровеньТопливаКонец,РасходТоплива,ОбъемЗаправок");
	ЗаполнитьЗначенияСвойств(Результат, ДанныеПоТС);
	
	Возврат Результат;
КонецФункции

// Возвращает параметры заполнения путевого листа по данным GPS трекеров
//
Функция ПолучитьПараметрыЗаполненияПЛПоДаннымGPS(Организация, ТС)
	
	ПустойРезультат = Новый Структура("ЗаполнятьОдометрПоПробегуGPS,ЗаполнятьУровеньБака,АдресИБ", Ложь, Ложь, Неопределено);
	
	ИмяСправочникаТС       = ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("ТранспортныеСредства");
	ИмяСправочникаМоделиТС = ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("МаркиТранспорта");
	
	Если ПустаяСтрока(ИмяСправочникаТС) ИЛИ ПустаяСтрока(ИмяСправочникаМоделиТС) Тогда
		Возврат ПустойРезультат;
	
	КонецЕсли;
	
	// Определим модель ТС
	Выборка = РегистрыСведений.ItobСвойстваТранспортныхСредств.Выбрать(Новый Структура("ТранспортноеСредство", ТС));
	
    МодельТС = Справочники[ИмяСправочникаМоделиТС].ПустаяСсылка();
	Если ItobОбщегоНазначенияСервер.ВыборкаСледующий(Выборка) Тогда
        МодельТС = Выборка.МодельТС;
	Иначе
		МодельТС = Справочники[ИмяСправочникаМоделиТС].ПустаяСсылка();
	КонецЕсли;	
	
	НаборПустыхЗначенийМодельТС = Новый Массив;
	НаборПустыхЗначенийМодельТС.Добавить(Справочники[ИмяСправочникаТС].ПустаяСсылка());
	НаборПустыхЗначенийМодельТС.Добавить(Справочники[ИмяСправочникаМоделиТС].ПустаяСсылка());
	НаборПустыхЗначенийМодельТС.Добавить(Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТС", ТС);
	Запрос.УстановитьПараметр("МодельТС", МодельТС);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПустаяМодельТС", НаборПустыхЗначенийМодельТС);
	Запрос.Текст = "ВЫБРАТЬ
	               |	0 КАК Приоритет,
	               |	ПараметрыЗаполненияПЛ.ЗаполнятьОдометрПоПробегуGPS,
				   |	ПараметрыЗаполненияПЛ.ЗаполнятьУровеньБака,
				   |	ПараметрыЗаполненияПЛ.АдресИБ
	               |ИЗ
	               |	РегистрСведений.ItobПараметрыЗаполненияПЛ_ПоДаннымGPS КАК ПараметрыЗаполненияПЛ
	               |ГДЕ
	               |	ПараметрыЗаполненияПЛ.МодельТС = &ТС
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	1,
	               |	ПараметрыЗаполненияПЛ.ЗаполнятьОдометрПоПробегуGPS,
				   |	ПараметрыЗаполненияПЛ.ЗаполнятьУровеньБака,
				   |	ПараметрыЗаполненияПЛ.АдресИБ
	               |ИЗ
	               |	РегистрСведений.ItobПараметрыЗаполненияПЛ_ПоДаннымGPS КАК ПараметрыЗаполненияПЛ
	               |ГДЕ
	               |	ПараметрыЗаполненияПЛ.МодельТС = &МодельТС
	               |	И ПараметрыЗаполненияПЛ.Организация = &Организация
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	2,
	               |	ПараметрыЗаполненияПЛ.ЗаполнятьОдометрПоПробегуGPS,
				   |	ПараметрыЗаполненияПЛ.ЗаполнятьУровеньБака,
				   |	ПараметрыЗаполненияПЛ.АдресИБ
	               |ИЗ
	               |	РегистрСведений.ItobПараметрыЗаполненияПЛ_ПоДаннымGPS КАК ПараметрыЗаполненияПЛ
	               |ГДЕ
	               |	ПараметрыЗаполненияПЛ.МодельТС В(&ПустаяМодельТС)
	               |	И ПараметрыЗаполненияПЛ.Организация = &Организация
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	3,
	               |	ПараметрыЗаполненияПЛ.ЗаполнятьОдометрПоПробегуGPS,
				   |	ПараметрыЗаполненияПЛ.ЗаполнятьУровеньБака,
				   |	ПараметрыЗаполненияПЛ.АдресИБ
	               |ИЗ
	               |	РегистрСведений.ItobПараметрыЗаполненияПЛ_ПоДаннымGPS КАК ПараметрыЗаполненияПЛ
	               |ГДЕ
	               |	ПараметрыЗаполненияПЛ.МодельТС В(&ПустаяМодельТС)
	               |	И ПараметрыЗаполненияПЛ.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Приоритет";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Если ItobОбщегоНазначенияСервер.ВыборкаСледующий(Выборка) Тогда		
		Возврат Новый Структура("ЗаполнятьОдометрПоПробегуGPS,ЗаполнятьУровеньБака,АдресИБ", 
			Выборка.ЗаполнятьОдометрПоПробегуGPS, Выборка.ЗаполнятьУровеньБака, Выборка.АдресИБ);
		
	КонецЕсли;
	
	Возврат ПустойРезультат;
	
КонецФункции // ПолучитьПараметрыЗаполненияПЛПоДаннымGPS()

Функция ПолучитьДанныеПоТопливуЦСМ(ДатаВыезда, ДатаВозвращения, ТранспортноеСредство, ТекстОшибки, ТребуетсяУровень=Ложь, Терминал=Неопределено)
	
	Результат = Новый Структура();
	Результат.Вставить("УровеньТопливаНачало",Неопределено);
	Результат.Вставить("УровеньТопливаКонец",Неопределено);
	Результат.Вставить("РасходТоплива",Неопределено);
	Результат.Вставить("ОбъемЗаправок",0);
		
	// Определяем привязанный терминал
	Если Терминал=Неопределено Тогда
		ПривязанныйТерминал = ItobОперативныйМониторинг.ПолучитьПривязанныйТерминал(ТранспортноеСредство, ДатаВозвращения);
		Если НЕ ЗначениеЗаполнено(ПривязанныйТерминал) Тогда
			ТекстОшибки = НСтр("ru = 'К транспортному средству не привязан терминал'");
			Возврат Ложь;			
		КонецЕсли;		
	Иначе
		ПривязанныйТерминал = Терминал;	
	КонецЕсли;	
	
	// Если идут данные по расходу топлива - используем их
	НайденнаяСтрокаДатчиковРасходТопливаCAN = ПривязанныйТерминал.Датчики.Найти(Справочники.ItobНазначенияДатчиков.РасходТопливаCAN, "Назначение");
	НайденнаяСтрокаДатчиковРасходТопливаИмпульсный = ПривязанныйТерминал.Датчики.Найти(Справочники.ItobНазначенияДатчиков.РасходТопливаИмпульсный, "Назначение");
	НайденнаяСтрокаДатчиковУровеньТоплива = ПривязанныйТерминал.Датчики.Найти(Справочники.ItobНазначенияДатчиков.Топливо, "Назначение");
	
	ФактРасходТоплива = 0;
	СтрокаДатчикРасходаТоплива = Неопределено;
	
	Если НЕ НайденнаяСтрокаДатчиковРасходТопливаCAN = Неопределено Тогда
		СтрокаДатчикРасходаТоплива = НайденнаяСтрокаДатчиковРасходТопливаCAN;				
	ИначеЕсли НЕ НайденнаяСтрокаДатчиковРасходТопливаИмпульсный = Неопределено Тогда
		СтрокаДатчикРасходаТоплива = НайденнаяСтрокаДатчиковРасходТопливаИмпульсный;		
	КонецЕсли;
	
	Если НЕ СтрокаДатчикРасходаТоплива = Неопределено Тогда
		
		Результат.РасходТоплива = ВычислитьИзменениеЗначенияДатчика(
			ДатаВыезда, ДатаВозвращения, ПривязанныйТерминал, СтрокаДатчикРасходаТоплива.Датчик, 
			СтрокаДатчикРасходаТоплива.КалибровочныйГрафик, СтрокаДатчикРасходаТоплива.Назначение);
			
	КонецЕсли;
	
	Если НЕ НайденнаяСтрокаДатчиковУровеньТоплива = Неопределено И (ТребуетсяУровень ИЛИ Результат.РасходТоплива = Неопределено) Тогда
		ТаблицаДанные = Неопределено;
		ТаблицаЗаправки = Неопределено;
		ТекстОшибкиПолучитьДанныеТопливо = "";
		
		ПараметрыРасчетаТоплива = Новый Структура();
		ПараметрыРасчетаТоплива.Вставить("НачПериода", ДатаВыезда);
		ПараметрыРасчетаТоплива.Вставить("КонПериода", ДатаВозвращения);
		ПараметрыРасчетаТоплива.Вставить("Объект", ТранспортноеСредство);
		ПараметрыРасчетаТоплива.Вставить("Метод", "Пробег");
		
		Если НЕ ItobОбработкаДанныхТопливоВызовСервера.ПолучитьДанныеТопливо(ПараметрыРасчетаТоплива, ТаблицаДанные, ТаблицаЗаправки, 
			ТекстОшибкиПолучитьДанныеТопливо, Справочники.ItobНазначенияДатчиков.Топливо) Тогда
			
			ТекстОшибки = НСтр("ru = 'Ошибка обработки данных по топливу:'")+" "+ТекстОшибкиПолучитьДанныеТопливо;
			Возврат Ложь;
			
		КонецЕсли;
		
		СглаженноеЗначениеНачало = Неопределено;
		СглаженноеЗначениеКонец  = Неопределено;
		
		// Поиск крайних значений
		Для Счетчик = 1 По ТаблицаДанные.Количество()-1 Цикл
			Если ТаблицаДанные[Счетчик].Период > ДатаВыезда Тогда
				СглаженноеЗначениеНачало = ТаблицаДанные[Счетчик-1].ЗначениеСглаженное;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Счетчик = ТаблицаДанные.Количество()-2;
		Пока Счетчик > 0 Цикл
			Если ТаблицаДанные[Счетчик].Период < ДатаВозвращения Тогда
				СглаженноеЗначениеКонец = ТаблицаДанные[Счетчик+1].ЗначениеСглаженное;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если (НЕ СглаженноеЗначениеНачало=Неопределено) И (НЕ СглаженноеЗначениеКонец=Неопределено) Тогда
						
			Результат.УровеньТопливаНачало = СглаженноеЗначениеНачало;			
			Результат.УровеньТопливаКонец = СглаженноеЗначениеКонец;
			
			Если Результат.РасходТоплива = Неопределено Тогда
				
				Результат.РасходТоплива = Результат.УровеньТопливаНачало-Результат.УровеньТопливаКонец;
				Для каждого СтрЗаправкиСливы Из ТаблицаЗаправки Цикл
					Если СтрЗаправкиСливы.Период >= ДатаВыезда И СтрЗаправкиСливы.Период <= ДатаВозвращения Тогда
						Результат.РасходТоплива = Результат.РасходТоплива + СтрЗаправкиСливы.ТопливоИзменение;
						Результат.ОбъемЗаправок = Результат.ОбъемЗаправок + СтрЗаправкиСливы.ТопливоИзменение;
						
					КонецЕсли;
					
				КонецЦикла;
			
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьДанныеПоТопливуЦСМ()

Функция ПолучитьДанныеПоТС(Параметры, ТекстОшибки) Экспорт
	ПараметрыЗаполненияПЛ = ПолучитьПараметрыЗаполненияПЛПоДаннымGPS(Параметры.Организация, Параметры.ТранспортноеСредство);
	
	Если НЕ ПараметрыЗаполненияПЛ.АдресИБ = Неопределено 
		 И НЕ ПараметрыЗаполненияПЛ.АдресИБ.Пустая()
		 И НЕ ПараметрыЗаполненияПЛ.АдресИБ = ПланыОбмена.ItobОбменЦентрСпутниковогоМониторинга.ЭтотУзел() Тогда
		 
		Возврат ПолучитьДанныеПоТС_ИзВнешнейБазы(Параметры, ТекстОшибки, ПараметрыЗаполненияПЛ);
	Иначе
		Возврат ПолучитьДанныеПоТС_Локально(Параметры, ТекстОшибки, ПараметрыЗаполненияПЛ);
	КонецЕсли;
КонецФункции // ПолучитьДанныеПоТС()

Функция ПолучитьДанныеПоТС_Локально(Параметры, ТекстОшибки, ПараметрыЗаполненияПЛ = Неопределено) Экспорт
	
	Результат = Новый Структура("ПробегGPS,ПробегCAN,СпидометрВыездаCAN,СпидометрВозвращенияCAN,ВремяРаботыДвигателя,УровеньТопливаНачало,УровеньТопливаКонец,РасходТоплива,ОбъемЗаправок");
	
	ПривязанныйТерминал = ItobОперативныйМониторинг.ПолучитьПривязанныйТерминал(Параметры.ТранспортноеСредство, Параметры.ДатаВозвращения);
	Если НЕ ЗначениеЗаполнено(ПривязанныйТерминал) Тогда
		ТекстОшибки = НСтр("ru = 'К транспортному средству не привязан терминал'");
		Возврат Ложь;		
	КонецЕсли;
	
	Если ПараметрыЗаполненияПЛ = Неопределено Тогда
		ПараметрыЗаполненияПЛ = ПолучитьПараметрыЗаполненияПЛПоДаннымGPS(Параметры.Организация, Параметры.ТранспортноеСредство);
	КонецЕсли;
	
	// Есть ли датчик пробег CAN ?
	ВключатьДанныеДатчиков = Неопределено;	
	ДатчикПробегCAN = Ложь;	
	НайденнаяСтрокаДатчиков = ПривязанныйТерминал.Датчики.Найти(Справочники.ItobНазначенияДатчиков.ПробегCAN, "Назначение");
	Если НЕ НайденнаяСтрокаДатчиков = Неопределено Тогда
		ДатчикПробегCAN = Истина;
		ВключатьДанныеДатчиков = Новый Массив;
		ВключатьДанныеДатчиков.Добавить(НайденнаяСтрокаДатчиков.Датчик);
	КонецЕсли;	
	
	// Пробег
	ИнтервалыДвижения = ItobОперативныйМониторинг.ПолучитьИнтервалыДвижения(Параметры.ТранспортноеСредство, Параметры.ДатаВыезда, Параметры.ДатаВозвращения, Ложь, ВключатьДанныеДатчиков);
	Если ИнтервалыДвижения.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Нет соответствующих данных'");
		Возврат Ложь;
	Иначе
		Результат.ПробегGPS = Окр(ИнтервалыДвижения.Итог("Пробег"),1);
	КонецЕсли;
	
	// Пробег CAN
	Если ДатчикПробегCAN Тогда
		КалибровочныйГрафик = НайденнаяСтрокаДатчиков.КалибровочныйГрафик;
		
		ДанныеПробегCanНачало = Неопределено;
		ДанныеПробегCanКонец = Неопределено;
		ИмяКолонкиЗначениеДатчикаПробегCan = "ЗначениеДатчика" + НайденнаяСтрокаДатчиков.Датчик.Код;
		
		// Поиск значения пробега на начало
		Для ИндексСтрокиИД = 0 По ИнтервалыДвижения.Количество()-1 Цикл
			ТЗДанныеТерминала = ИнтервалыДвижения[ИндексСтрокиИД].ДанныеТерминала;
			Для ИндексСтрокиДанныеТерминала=0 По ТЗДанныеТерминала.Количество()-1 Цикл
				ЗначДатчикаПробегCan =  ТЗДанныеТерминала[ИндексСтрокиДанныеТерминала][ИмяКолонкиЗначениеДатчикаПробегCan];
				Если НЕ ЗначДатчикаПробегCan = Неопределено	И ЗначДатчикаПробегCan > 0 Тогда				
					ДанныеПробегCanНачало = ЗначДатчикаПробегCan;
					Прервать;				
				КонецЕсли;
			КонецЦикла;
			Если НЕ ДанныеПробегCanНачало = Неопределено Тогда
				Прервать;			
			КонецЕсли;		
		КонецЦикла;
		
		Если НЕ ДанныеПробегCanНачало = Неопределено Тогда
			
			// Поиск значения пробега на конец
			ИндексСтрокиИД = ИнтервалыДвижения.Количество()-1;
			Пока ИндексСтрокиИД >= 0 Цикл
				ТЗДанныеТерминала = ИнтервалыДвижения[ИндексСтрокиИД].ДанныеТерминала;
				ИндексСтрокиДанныеТерминала = ТЗДанныеТерминала.Количество()-1;
				Пока ИндексСтрокиДанныеТерминала >= 0 Цикл
					ЗначДатчикаПробегCan =  ТЗДанныеТерминала[ИндексСтрокиДанныеТерминала][ИмяКолонкиЗначениеДатчикаПробегCan];
					Если НЕ ЗначДатчикаПробегCan = Неопределено	И ЗначДатчикаПробегCan > 0 Тогда				
						ДанныеПробегCanКонец = ЗначДатчикаПробегCan;
						Прервать;				
					КонецЕсли;
					ИндексСтрокиДанныеТерминала = ИндексСтрокиДанныеТерминала-1;
				КонецЦикла;
				Если НЕ ДанныеПробегCanКонец = Неопределено Тогда
					Прервать;			
				КонецЕсли;
				ИндексСтрокиИД = ИндексСтрокиИД-1;
			КонецЦикла;
			
			Если НЕ ДанныеПробегCanКонец = Неопределено Тогда				
				Результат.СпидометрВыездаCAN     = ItobКалькуляцияПараметровВыработки.ПреобразоватьЗначениеПоКалибровочномуГрафику(
							ДанныеПробегCanНачало, КалибровочныйГрафик);
				Результат.СпидометрВозвращенияCAN = ItobКалькуляцияПараметровВыработки.ПреобразоватьЗначениеПоКалибровочномуГрафику(
							ДанныеПробегCanКонец, КалибровочныйГрафик);
			    Результат.ПробегCAN = Результат.СпидометрВозвращенияCAN - Результат.СпидометрВыездаCAN;
			КонецЕсли;			
		
		КонецЕсли;
			
	КонецЕсли;
	
	Если ПараметрыЗаполненияПЛ.ЗаполнятьУровеньБака Тогда
		ТекстОшибкиТопливо = "";
		ДанныеПоТопливу = ПолучитьДанныеПоТопливуЦСМ(Параметры.ДатаВыезда, Параметры.ДатаВозвращения, Параметры.ТранспортноеСредство, ТекстОшибкиТопливо, Истина, ПривязанныйТерминал);
		Если ТипЗнч(ДанныеПоТопливу) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(Результат, ДанныеПоТопливу);		
		КонецЕсли;		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ПолучитьДанныеПоТС()

Функция ВычислитьИзменениеЗначенияДатчика(НачДата, КонДата, Терминал, Датчик, КалибровочныйГрафик, НазначениеДатчика) Экспорт
	
	Если (НЕ НазначениеДатчика = Справочники.ItobНазначенияДатчиков.РасходТопливаCAN)
		И (НЕ НазначениеДатчика = Справочники.ItobНазначенияДатчиков.РасходТопливаИмпульсный) Тогда
	
		Возврат 0;
	
	КонецЕсли;
	
	МассивДатчиков = Новый Массив;
	МассивДатчиков.Добавить(Датчик);
	
	Маршрут = Неопределено;
	Если НЕ ItobОперативныйМониторинг.СформироватьМаршрутПоТерминалу(Терминал, НачДата, КонДата, Маршрут, Ложь, МассивДатчиков) Тогда
		Возврат 0;
	
	КонецЕсли;
	
	КодДатчика          = Формат(Датчик.Код, "ЧН=0; ЧГ=0");
			
	ДопускатьЗначенияВнеВходногоДиапазона = Истина;
	ДопустимоеЗначениеНачало = 0;
	ДопустимоеЗначениеКонец  = 0;
	
	Результат = 0;
	
	Если НЕ КалибровочныйГрафик.Пустая() Тогда
		ДопускатьЗначенияВнеВходногоДиапазона = КалибровочныйГрафик.ДопускатьЗначенияВнеВходногоДиапазона;
		Если НЕ ДопускатьЗначенияВнеВходногоДиапазона Тогда
			Показатели = КалибровочныйГрафик.Показатели.Выгрузить();
			Показатели.Сортировать("Вход Возр");
			
			Если Показатели.Количество() > 1 Тогда
				ДопустимоеЗначениеНачало = Показатели[0].Вход;	
				ДопустимоеЗначениеКонец  = Показатели[Показатели.Количество()-1].Вход;
				
			КонецЕсли;
			
		КонецЕсли;				
		
	КонецЕсли;
	
	Если НазначениеДатчика = Справочники.ItobНазначенияДатчиков.РасходТопливаCAN Тогда		
		Результат = ItobКалькуляцияПараметровВыработки.ПолучитьЗначениеПараметраПоИзменениюЗначенияДатчика(
			Маршрут, Терминал, НазначениеДатчика, Датчик, КалибровочныйГрафик, НачДата);	
		
	ИначеЕсли НазначениеДатчика = Справочники.ItobНазначенияДатчиков.РасходТопливаИмпульсный Тогда		
		Результат = ItobКалькуляцияПараметровВыработки.ПолучитьЗначениеПараметраПодсчетИмпульсов(
			Маршрут, Терминал, НазначениеДатчика, Датчик, КалибровочныйГрафик);		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ВычислитьИзменениеЗначенияДатчика()

// Функция возвращает структуру части параметров путевых листов
//
Функция ПолучитьПараметрыДляПутевыхЛистов(ДатаВыезда, ДатаВозвращения, ТранспортноеСредство = Неопределено, Организация = Неопределено) Экспорт
	ДатаВыезда = ?(ДатаВыезда = Неопределено, '00010101', ДатаВыезда);
	ДатаВозвращения = ?(ДатаВозвращения = Неопределено, '00010101', ДатаВозвращения);
	
	Результат = Новый Структура();
	Результат.Вставить("ДатаВыезда", ДатаВыезда);
	Результат.Вставить("ДатаВозвращения", ДатаВозвращения);
	Результат.Вставить("ТранспортноеСредство", ТранспортноеСредство);
	Результат.Вставить("Организация", Организация);
	
	Возврат Результат;
КонецФункции // ПолучитьПараметрыДляПутевыхЛистов()

#КонецОбласти
