
#Область ОбщиеОбработчикиСобытийФорм

// Вызывается из обработчика события "ПриСозданииНаСервере" форм списков.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, формы выбора.
//
Процедура ПриСозданииНаСервере(Форма) Экспорт
	
	Форма.ЕстьПравоНастройкиВидовНоменклатуры = ПравоДоступа("Изменение", Метаданные.Справочники.ВидыНоменклатуры);
	Форма.ЦветТекстаФормы = ЦветаСтиля.ЦветТекстаФормы;	
    	
	УстановитьЗначенияПоНастройкамФормы(Форма);
	
	Форма.ИспользоватьСтандартныйПоискПриПодбореТоваров = Константы.ИспользоватьСтандартныйПоискПриПодбореТоваров.Получить();
	
	Если пкПодборТехникиКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма) Тогда 
		Для Каждого Элемент Из Форма.Параметры.Отбор Цикл
			
			Если Элемент.Ключ = "ТипНоменклатуры" Тогда
				УстановитьОтборПоТипуНоменклатурыПоПараметрам(Форма);
				Продолжить;
			КонецЕсли;
			
			Если Элемент.Ключ = "ВидНоменклатуры" Тогда
				УстановитьОтборПоВидНоменклатурыПоПараметрам(Форма);
				Продолжить;
			КонецЕсли;
			
			Если Элемент.Ключ = "Владелец" Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(Элемент.Значение) = Тип("ФиксированныйМассив") Тогда
				ДобавитьЭлементОтбора(ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура), 
				Элемент.Ключ, Элемент.Значение, ВидСравненияКомпоновкиДанных.ВСписке, "ОтборПоУмолчанию");
			Иначе
				ДобавитьЭлементОтбора(ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура), 
				Элемент.Ключ, Элемент.Значение, ВидСравненияКомпоновкиДанных.Равно, "ОтборПоУмолчанию");
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	пкПодборТехникиКлиентСервер.УстановитьТекущиеСтраницыПоВариантуПоиска(Форма);
		
	ОбщегоНазначенияУТ.ИнициализироватьРеквизитыФормыДляПолнотекстовогоПоиска(Форма, "ИспользоватьПолнотекстовыйПоискПриПодбореТоваров");
	
КонецПроцедуры

// Вызывается из обработчика события "ПриСозданииНаСервере" форм подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Процедура ПриСозданииФормыПодбораНаСервере(Форма) Экспорт
	
	Параметры = Форма.Параметры;
	Элементы = Форма.Элементы;
    
    Форма.ИзменениеСтроки = Параметры.ИзменениеСтроки;
    Форма.КодФормы        = Параметры.КодФормы;  
    
    Если Форма.КодФормы = "СостояниеТехники" Тогда
        Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.Независимый;    
		
		//++ Рарус Лимаренко 17.10.2018
		//ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Форма.СписокТехники.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.ДоступныеПоляОтбора,"ГодВыпуска","Год выпуска");
		//ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Форма.СписокТехники.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора,"ГодВыпуска","Год выпуска");
		//ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Форма.СписокТехники,"ДатаНачалаАренды","Дата начала аренды"); 
		//ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Форма.СписокТехники,"ГодВыпуска","Год выпуска");
		//-- Рарус Лимаренко 17.10.2018                                                            
		//ГодВыпуска = Форма.СписокТехники.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.ДоступныеПоляОтбора.Элементы.Найти("ГодВыпуска");
		//Форма.СписокТехники.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.ДоступныеПоляОтбора     .Элементы.Удалить(ГодВыпуска);                                                    
	КонецЕсли;    
                                             
    Форма.ЗапрашиватьКоличество = Истина; 
	
#Область ПолучитьЗначенияФункциональныхОпций
	
	Форма.ИспользоватьСтандартныйПоискПриПодбореТоваров = Константы.ИспользоватьСтандартныйПоискПриПодбореТоваров.Получить();
	
#КонецОбласти	
							
#Область УстановитьСвойстваФормыПодбораВДокументыПродажиПоПараметрам
        
    Элементы.ГруппаПодобранныеТовары.Видимость  = НЕ Форма.ИзменениеСтроки;
    Элементы.КоманднаяПанельПеренести.Видимость = НЕ Форма.ИзменениеСтроки;
    
    Форма.ПоказыватьТехнику = Истина;
	пкПодборТехникиКлиентСервер.УстановитьТекстИнформационнойНадписиТехника(Форма);
    
	пкПодборТехникиКлиентСервер.УстановитьТекстИнформационнойНадписиНастройкаОтборов(Форма);
    
    Форма.ПоказыватьМодели = Истина;
	пкПодборТехникиКлиентСервер.УстановитьТекстИнформационнойНадписиМодели(Форма);
    
    ПодборТехники = ЗначениеЗаполнено(Параметры.Модель);
    
//Рарус Владимир Подрезов 07.09.2017
	Если ПодборТехники 
		И Форма.КодФормы <> "Возврат" 
		И Форма.КодФормы <> "Заказ-наряд"
	Тогда
		Форма.ОтборЗапретАренды	 = 1;
	    ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    Форма.СписокТехники, "ЗапретАренды", Ложь, , "ЗапретАренды", Истина);
	Иначе
		Форма.ОтборЗапретАренды	 = 0;
	    ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    Форма.СписокТехники, "ЗапретАренды", Истина, , "ЗапретАренды", Ложь);
	КонецЕсли;
//Рарус Владимир Подрезов Конец

	Если ПодборТехники Тогда
        Форма.Модель              = Параметры.Модель;
        Форма.Клиент              = Параметры.Клиент;
        Форма.ОбъектСтроительства = Параметры.ОбъектСтроительства;
        Форма.КоличествоПоМодели  = Параметры.КоличествоПоМодели;
        
        Элементы.ГруппаПодборПоМодели.Видимость   = Истина;
        Элементы.ГруппаИнформацияМодели.Видимость = Ложь;

        Элементы.ДекорацияМодель.Заголовок              = Параметры.Модель;
        Элементы.ДекорацияКоличество.Заголовок          = Строка(Параметры.КоличествоПоМодели) + " шт.";
        
        Элементы.ДекорацияКлиент.Заголовок              = Параметры.Клиент;
        Элементы.ДекорацияОбъектСтроительства.Заголовок = Параметры.ОбъектСтроительства;
        
        Если Форма.КодФормы = "Возврат" Тогда
            Элементы.ОтборЗаявкаНаАрендуТехники.Видимость = Истина;
            
            Если Параметры.Свойство("ЗаявкаНаАрендуТехники") Тогда
                Форма.ОтборЗаявкаНаАрендуТехники = Параметры.ЗаявкаНаАрендуТехники;    
            КонецЕсли;    
            
            Если НЕ ЗначениеЗаполнено(Форма.ОтборЗаявкаНаАрендуТехники) Тогда
                 ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
        		    Форма.СписокТехники, "ЗаявкаНаАрендуТехники", , , , Ложь);
            Иначе
                ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
        		    Форма.СписокТехники, "ЗаявкаНаАрендуТехники", Форма.ОтборЗаявкаНаАрендуТехники, , , Истина);
            КонецЕсли;

        КонецЕсли;    
    ИначеЕсли Форма.КодФормы <> "СостояниеТехники" И Форма.КодФормы <> "Заказ-наряд" Тогда
        Форма.ПоказыватьТехнику                        = Ложь;
        Форма.Элементы.СтраницыТехникаМодели.Видимость = Ложь;
        
	    пкПодборТехникиКлиентСервер.УстановитьТекстИнформационнойНадписиТехника(Форма);
    КонецЕсли;
        
    Пользователь = Пользователи.ТекущийПользователь(); 
    
    Форма.ОтборПодразделение = Пользователь.Подразделение;
    
    Если Форма.КодФормы = "Отгрузка" И Параметры.Свойство("Документ") Тогда
        Форма.ОтборПодразделение = Параметры.Документ.ПодразделениеОтгрузки;
    КонецЕсли;    
    
    Если Форма.КодФормы = "ЗаявкаНаАрендуТехники" ИЛИ Форма.КодФормы = "Заказ-наряд" Тогда    
        СписокНоменклатура = Форма.СписокНоменклатура;
        пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "Подразделение", Форма.ОтборПодразделение);
        пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "Местонахождения", 
            ?(ЗначениеЗаполнено(Форма.ОтборПодразделение), Форма.ОтборПодразделение.пкСкладТехники, Неопределено));
            
        Дата       = ТекущаяДата();
        ПервыйДень = НачалоДня(Дата);
            
        пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "Дата",          Дата);            
        пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "ПервыйДень",    ПервыйДень);
        пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "ПоследнийДень", ПервыйДень + 3600 * 24 * 5);
    КонецЕсли;    
    
    Если ЗначениеЗаполнено(Форма.ОтборПодразделение) Тогда
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    Форма.СписокТехники, "Подразделение", Форма.ОтборПодразделение, , , Истина);
    КонецЕсли;    
    
    Элементы.Навигация.Видимость                      = НЕ ПодборТехники;
    Элементы.ГруппаСписокНоменклатуры.Видимость       = НЕ ПодборТехники;
    Элементы.КорзинаКоличественныеПараметры.Видимость = НЕ ПодборТехники;
    
    Элементы.КорзинаТехника.Видимость = ПодборТехники;
    
    Если Форма.КодФормы = "СостояниеТехники" Тогда
        Элементы.ГруппаПодобранныеТовары.Видимость    = Ложь;
        Элементы.ГруппаКоманднаяПанельФормы.Видимость = Ложь;
        
        Форма.ОтборНаБазе       = Истина;
        Форма.ОтборВАренде      = Истина;
        Форма.ОтборВРезерве     = Истина;
        Форма.ОтборНеВРемонте   = Истина;
        Форма.ОтборВРемонте     = Истина;
        
        Форма.ПоказыватьМодели                               = Ложь;
        Элементы.ГруппаИнформацияМодели.Видимость            = Ложь;
        Элементы.ГруппаСписокНоменклатурыНавигация.Видимость = Ложь;
        Элементы.ГруппаИнформацияТехника.Видимость           = Ложь;
        
        Элементы.СтраницаПланированиеПоМоделям.Видимость = Истина;
                
    ИначеЕсли Форма.КодФормы = "Возврат"  Тогда
        Форма.ОтборВАренде    = Истина;
        Форма.ОтборВРемонте   = Истина;
        Форма.ОтборНеВРемонте = Истина;
        Форма.ОтборВРезерве   = Истина;
        
        Если ЗначениеЗаполнено(Форма.Клиент) Тогда
            Форма.ОтборКлиент = Форма.Клиент; 
            ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
                Форма.СписокТехники, "Клиент", Форма.ОтборКлиент, , , Истина);
        КонецЕсли;  
        
        Если ЗначениеЗаполнено(Форма.ОбъектСтроительства) Тогда
            Форма.ОтборМестонахождения = Форма.ОбъектСтроительства; 
            ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
                Форма.СписокТехники, "Местонахождения", Форма.ОтборМестонахождения, , , Истина);
        КонецЕсли;  
        
    Иначе    
        Форма.ОтборНаБазе     = Истина;
        Форма.ОтборНеВРемонте = Истина;
        Форма.ОтборВРемонте   = Истина;
    КонецЕсли;  
    
    Если Параметры.Свойство("Местонахождения") Тогда
        Если ЗначениеЗаполнено(Параметры.Местонахождения) Тогда
            Форма.ОтборМестонахождения = Параметры.Местонахождения;  
        
            ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
    		    Форма.СписокТехники, "Местонахождения", Форма.ОтборМестонахождения, , , Истина);
        КонецЕсли;
    КонецЕсли;    
        
    Форма.Дата = Параметры.Дата;
    
    Если ЗначениеЗаполнено(Параметры.Заголовок) Тогда
        Форма.АвтоЗаголовок = Ложь;
        Форма.Заголовок = Параметры.Заголовок;
    КонецЕсли;
    
    Если ЗначениеЗаполнено(Параметры.ЗаголовокКнопкиПеренести) Тогда
        Форма.Команды["ПеренестиВДокумент"].Заголовок = Параметры.ЗаголовокКнопкиПеренести;
        Форма.Команды["ПеренестиВДокумент"].Подсказка = Параметры.ЗаголовокКнопкиПеренести;
    КонецЕсли;
    
    Если Параметры.ЗапрашиватьКоличество <> Неопределено Тогда
        Форма.ЗапрашиватьКоличество = Параметры.ЗапрашиватьКоличество;
    КонецЕсли;
        
    Форма.ВидНоменклатурыДоИзменения = Форма.ВидНоменклатуры;
    
    Элементы.СтраницаСоздатьНоменклатуру.Видимость = ПравоДоступа("Добавление", Метаданные.Справочники.Номенклатура);
    
#КонецОбласти
			
	УстановитьЗначенияПоНастройкамФормы(Форма);
	
#Область УстановитьЗначенияПоНастройкамФормыПодбора
	
	Форма.ТолькоВНаличии = Ложь;
	
	Форма.ЗапрашиватьКоличество = Истина;
    
    Форма.УчитыватьПлановуюДатуОкончанияРемонта = Истина;
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(Форма.КодФормы,  "");
	
	Если Не (Настройки = Неопределено) Тогда
		
		Если Настройки.Свойство("ТолькоВНаличии") Тогда
			
			Форма.ТолькоВНаличии = Настройки.ТолькоВНаличии;
			Форма.ТолькоВНаличииИзПараметров = Настройки.ТолькоВНаличии;
			
		КонецЕсли;
						
		Если Настройки.Свойство("ПоказыватьПодобранныеТовары") Тогда
			Форма.ПоказыватьПодобранныеТовары = Настройки.ПоказыватьПодобранныеТовары;
			Элементы.ОбластьПодобранныеТовары.Видимость = Форма.ПоказыватьПодобранныеТовары;
		КонецЕсли;
		
		Если Настройки.Свойство("ЗапрашиватьКоличество") Тогда
			Форма.ЗапрашиватьКоличество = Настройки.ЗапрашиватьКоличество;
		КонецЕсли;
		
    КонецЕсли;
    	
	Элементы.ЗапрашиватьКоличествоЦену.Пометка = Форма.ЗапрашиватьКоличество;
	
#КонецОбласти	

	УстановитьОтборПоТипуНоменклатурыПоПараметрам(Форма);

#Область УстановитьОтборОсобенностьУчета

	Если Параметры.Свойство("ОсобенностьУчета") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    Форма.СписокНоменклатура, "Ссылка.ОсобенностьУчета", Параметры.ОсобенностьУчета, 
			ВидСравненияКомпоновкиДанных.Равно, "ОтборОсобенностьУчета",ЗначениеЗаполнено(Параметры.ОсобенностьУчета));
	КонецЕсли;

#КонецОбласти

	Форма.ТекущаяСтрокаНоменклатуры = пкПодборТехникиКлиентСервер.СтруктураСтрокиНоменклатуры();
	Форма.ТекущаяСтрокаТехники      = пкПодборТехникиКлиентСервер.СтруктураСтрокиТехники();
	
	ОбщегоНазначенияУТ.ИнициализироватьРеквизитыФормыДляПолнотекстовогоПоиска(Форма, "ИспользоватьПолнотекстовыйПоискПриПодбореТоваров");
	    
#Область УстановитьПараметрыСписковФормыПодбора
	
    пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.СписокТехники, "Дата", ТекущаяДата());
	
	//+++pavelk
	Если Форма.КодФормы = "Заказ-наряд" Тогда
		ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Форма.СписокНоменклатура.Отбор.Элементы, "ГруппаИЛИ", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ГруппаОтбора, "Ссылка.пкЭтоТехника", Истина, ВидСравненияКомпоновкиДанных.Равно,,Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ГруппаОтбора, "Ссылка.пкЭтоСервиснаяТехника", Истина, ВидСравненияКомпоновкиДанных.Равно,,Истина);	
	Иначе	
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.СписокНоменклатура, "Ссылка.пкЭтоТехника", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.СписокТехники, "Ссылка.пкЭтоТехника", Истина);
	КонецЕсли;
	//---pavelk	
        
    Если ПодборТехники Тогда
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    Форма.СписокТехники, "Модель", Форма.Модель);
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    Форма.СписокТехники, "Ссылка", Параметры.ИсключаемаяТехника, ВидСравненияКомпоновкиДанных.НеВСписке);
    КонецЕсли;
        
    УстановитьОтборПоСтатусамТехникиНаСервере(Форма);

#КонецОбласти

	пкПодборТехникиКлиентСервер.УстановитьТекущиеСтраницыПоВариантуПоиска(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииСохраненияИВосстановленияНастроек

// Сохраняет значения реквизитов на форме в хранилище общих настроек.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма выбора.
//
Процедура СохранитьНастройкиФормы(Форма) Экспорт
	
	НастройкиФормы = НастройкиФормы(Форма);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(Форма.КодФормы, "", НастройкиФормы);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ВариантПоискаТоваров", "", Форма.ВариантПоискаТоваров);
	СохранитьСпискиВыбора(Форма);
	
КонецПроцедуры

// Сохраняет значения реквизитов на форме подбора в хранилище общих настроек.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Процедура СохранитьНастройкиФормыПодбора(Форма) Экспорт
	
	НастройкиФормыПодбора = НастройкиФормыПодбора(Форма);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(Форма.КодФормы, "", НастройкиФормыПодбора);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ВариантПоискаТоваров", "", Форма.ВариантПоискаТоваров);
	
КонецПроцедуры

// Восстанавливает значение реквизитов на форме из хранилища общих настроек.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма выбора.
//
Процедура УстановитьЗначенияПоНастройкамФормы(Форма)
		
	// Установить значения по умолчанию.
	Форма.ИспользоватьФильтры = Истина;
	Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам;
	
	Форма.ВидНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка();
	Форма.ТекущаяИерархияНоменклатуры = Справочники.Номенклатура.ПустаяСсылка();
	
	// Получить настройку вариант поиска товаров.
	НастройкиВариантПоискаТоваров = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ВариантПоискаТоваров",  "");
	
	Если НастройкиВариантПоискаТоваров = Неопределено Тогда
		Форма.ВариантПоискаТоваров = "ПоУмолчанию";
	Иначе
		Форма.ВариантПоискаТоваров = НастройкиВариантПоискаТоваров;
	КонецЕсли;
	
	// Если есть сохраненные настройки, то установить значения по настройкам.
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(Форма.КодФормы,  "");
	
	Если Настройки <> Неопределено Тогда
		
		Если Настройки.Свойство("ИспользоватьФильтры") Тогда
			Форма.ИспользоватьФильтры = Настройки.ИспользоватьФильтры;
		КонецЕсли;
				
		Если Настройки.Свойство("ВариантНавигации")
			И ЗначениеЗаполнено(Настройки.ВариантНавигации) Тогда
			       
			ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры." + Настройки.ВариантНавигации);
			
			Если Не (ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоТоварамДругогоКачества
				Или ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСовместноПродаваемымТоварам
				Или ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоИерархииПоставщика) Тогда
				Форма.ВариантНавигации = ВариантНавигации;
			КонецЕсли;
					КонецЕсли;
		
		Если Настройки.Свойство("ТаблицаПараметровОтбора") Тогда
			Если ЗначениеЗаполнено(Настройки.ТаблицаПараметровОтбора) Тогда
				Форма.ТаблицаПараметровОтбора.Загрузить(Настройки.ТаблицаПараметровОтбора);
			КонецЕсли;
		КонецЕсли;
		
		Если Настройки.Свойство("ВидНоменклатуры") Тогда
			
			Если ЗначениеЗаполнено(Настройки.ВидНоменклатуры) Тогда
				
				// Проверить, что ссылка указывает на существующий объект.
				Если Настройки.ВидНоменклатуры.ПолучитьОбъект() <> Неопределено Тогда
					
					Форма.ВидНоменклатуры = Настройки.ВидНоменклатуры;
					
					Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоИерархии Тогда
						
						ЗаполнитьДеревоОтборовНоменклатуры(Форма);
						
						ЗаполнитьДеревоОтбораИзСохраненныхПараметров(Форма);
						
					КонецЕсли;
					
					Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоТоварамДругогоКачества Тогда
						
						ЗаполнитьДеревоОтборовНоменклатуры(Форма);
						
						ЗаполнитьДеревоОтбораИзСохраненныхПараметров(Форма);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Настройки.Свойство("ТекущаяИерархияНоменклатуры") Тогда
			Если ЗначениеЗаполнено(Настройки.ТекущаяИерархияНоменклатуры) Тогда
				// Проверить, что ссылка указывает на существующий объект.
				Если Не (Настройки.ТекущаяИерархияНоменклатуры.ПолучитьОбъект() = Неопределено) Тогда
					Форма.Элементы.ИерархияНоменклатуры.ТекущаяСтрока = Настройки.ТекущаяИерархияНоменклатуры;
					Форма.ТекущаяИерархияНоменклатуры = Настройки.ТекущаяИерархияНоменклатуры;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Настройки.Свойство("ТекущаяИерархияНоменклатурыПоставщика") Тогда
			Если ЗначениеЗаполнено(Настройки.ТекущаяИерархияНоменклатурыПоставщика) Тогда
				// Проверить, что ссылка указывает на существующий объект.
				Если Не (Настройки.ТекущаяИерархияНоменклатурыПоставщика.ПолучитьОбъект() = Неопределено) Тогда
					Форма.Элементы.ИерархияНоменклатурыПоставщика.ТекущаяСтрока = Настройки.ТекущаяИерархияНоменклатурыПоставщика;
					Форма.ТекущаяИерархияНоменклатурыПоставщика = Настройки.ТекущаяИерархияНоменклатурыПоставщика;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Настройки.Свойство("НоменклатураИсходногоКачества") Тогда
			Если ЗначениеЗаполнено(Настройки.НоменклатураИсходногоКачества) Тогда
				Если Не (Настройки.НоменклатураИсходногоКачества.ПолучитьОбъект() = Неопределено) Тогда
					Форма.НоменклатураИсходногоКачества = Настройки.НоменклатураИсходногоКачества;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Установить страницу варианта навигации по списку номенклатуры.
	УстановитьСтраницуВариантаНавигации(Форма);
	
	ПриИзмененииИспользованияФильтров(Форма);
	
	СпискиВыбораКлиентСервер.Загрузить("ИсторияПоискаНоменклатуры", Форма.Элементы.СтрокаПоискаНоменклатура.СписокВыбора);
		
	Если Не ПравоДоступа("Изменение", Метаданные.Справочники.ВидыНоменклатуры) Тогда
		Форма.Элементы.ВидыНоменклатурыГруппаСоздать.Видимость = Ложь;
		Форма.Элементы.ВидыНоменклатурыИзменить.Видимость = Ложь;
		//Форма.Элементы.ВидыНоменклатурыСкопировать.Видимость = Ложь;
		//Форма.Элементы.ВидыНоменклатурыУстановитьПометкуУдаления.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииСохраненияИВосстановленияНастроек

// Возвращает структуру - значения настроек формы списка, формы выбора товаров.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма выбора.
//
// Возвращаемое значение:
//	Структура. Значения настроек формы списка, формы выбора.
//
Функция НастройкиФормы(Форма)
	
	НастройкиФормы = Новый Структура;
	
	НастройкиФормы.Вставить("ИспользоватьФильтры", Форма.ИспользоватьФильтры);
	Если Не (Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоТоварамДругогоКачества
		Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСовместноПродаваемымТоварам
		Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоИерархииПоставщика) Тогда
		
		НастройкиФормы.Вставить("ВариантНавигации", ОбщегоНазначения.ИмяЗначенияПеречисления(Форма.ВариантНавигации));
	Иначе
		НастройкиФормы.Вставить("ВариантНавигации", "");
	КонецЕсли;
	НастройкиФормы.Вставить("ВидНоменклатуры", Форма.ВидНоменклатуры);
	НастройкиФормы.Вставить("ТекущаяИерархияНоменклатуры", Форма.ТекущаяИерархияНоменклатуры);
			
	Возврат НастройкиФормы;
	
КонецФункции

// Возвращает структуру - значения настроек формы подбора товаров.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
// Возвращаемое значение:
//	Структура. Значения настроек формы подбора.
//
Функция НастройкиФормыПодбора(Форма)
	
	НастройкиФормыПодбора = НастройкиФормы(Форма);
	
	НастройкиФормыПодбора.Вставить("ЗапрашиватьКоличество", Форма.ЗапрашиватьКоличество);
	НастройкиФормыПодбора.Вставить("ПоказыватьПодобранныеТовары", Форма.ПоказыватьПодобранныеТовары);
	
	НастройкиФормыПодбора.Вставить("ТолькоВНаличии", Форма.ТолькоВНаличииИзПараметров);
		
    СохранитьПараметрыДереваОтбора(Форма, Истина);
    
    НастройкиФормыПодбора.Вставить("ТаблицаПараметровОтбора", Форма.ТаблицаПараметровОтбора.Выгрузить());
	
	Возврат НастройкиФормыПодбора;
	
КонецФункции

// Сохраняет значения списков выбора на формах списков, формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма подбора.
//
Процедура СохранитьСпискиВыбора(Форма)
	
	СпискиВыбораКлиентСервер.Сохранить("ИсторияПоискаНоменклатуры", Форма.Элементы.СтрокаПоискаНоменклатура.СписокВыбора);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДеревомОтбораПоСвойствамВидаНоменклатуры

Процедура НадписьВариантНавигацииНавигационнойСсылки(Форма, НавигационнаяСсылка, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылка = "СброситьФильтрПоСвойствам" Тогда
		СброситьОтборыПоСвойствам(Форма);
	Иначе
		ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры." + НавигационнаяСсылка);
		Форма.ВариантНавигации = ВариантНавигации;
		ПриИзмененииВариантаНавигации(Форма);
	КонецЕсли;	
	
КонецПроцедуры

// Заполняет дерево отборов по свойствам вида номенклатуры выбранного на форме.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура ЗаполнитьДеревоОтборовНоменклатуры(Форма) Экспорт
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	ДеревоОтборов.Строки.Очистить();
	
	ЗаполнитьДеревоЗначенийОтборов(Форма, ДеревоОтборов);
		
	Форма.ЗначениеВРеквизитФормы(ДеревоОтборов, "ДеревоОтборов");
	
КонецПроцедуры

// Заполняет дерево значений отборов формы (списка, подбора) значениями
// отбора для номенклатуры.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма подбора.
//	ДеревоОтборов (ДеревоЗначений) - дерево значений отборов свойств.
//
Процедура ЗаполнитьДеревоЗначенийОтборов(Форма, ДеревоОтборов)
		
    Запрос = Новый Запрос;
    Запрос.Текст =
    "ВЫБРАТЬ
    |	РеквизитыБыстрогоОтбораНоменклатуры.НомерСтроки КАК НомерСтроки,
    |	РеквизитыБыстрогоОтбораНоменклатуры.Свойство КАК Свойство,
    |	РеквизитыБыстрогоОтбораНоменклатуры.ИмяРеквизита КАК ИмяРеквизита,
    |	ВЫБОР
    |		КОГДА РеквизитыБыстрогоОтбораНоменклатуры.ЭтоДопРеквизит
    |			ТОГДА ПРЕДСТАВЛЕНИЕ(РеквизитыБыстрогоОтбораНоменклатуры.Свойство)
    |		ИНАЧЕ РеквизитыБыстрогоОтбораНоменклатуры.ПредставлениеРеквизита
    |	КОНЕЦ КАК ПредставлениеРеквизита,
    |	РеквизитыБыстрогоОтбораНоменклатуры.ЭтоДопРеквизит КАК ЭтоДопРеквизит,
    |	ВЫБОР
    |		КОГДА НЕ РеквизитыБыстрогоОтбораНоменклатуры.Свойство ЕСТЬ NULL 
    |			ТОГДА РеквизитыБыстрогоОтбораНоменклатуры.Свойство.ТипЗначения
    |	КОНЕЦ КАК ОписаниеТипаЗначения,
    |	РеквизитыБыстрогоОтбораНоменклатуры.Свойство.Заголовок КАК Заголовок
    |ИЗ
    |	Справочник.ВидыНоменклатуры.РеквизитыБыстрогоОтбораНоменклатуры КАК РеквизитыБыстрогоОтбораНоменклатуры
    |ГДЕ
    |	РеквизитыБыстрогоОтбораНоменклатуры.Ссылка = &ВидНоменклатуры
    |
    |УПОРЯДОЧИТЬ ПО
    |	НомерСтроки";
    
    Запрос.УстановитьПараметр("ВидНоменклатуры", Форма.ВидНоменклатуры);
		
	РеквизитыБыстрогоОтбора = Запрос.Выполнить().Выгрузить();
	СтрокаРеквизита = Неопределено;
	МаксимальноеКоличествоЗначенийВДереве = Константы.МаксимальноеКоличествоЭлементовВДеревеОтборовНоменклатуры.Получить();
	
	СтрокаРеквизита = Неопределено;
	
	Для Каждого Реквизит из РеквизитыБыстрогоОтбора Цикл
		
		Если Реквизит.ЭтоДопРеквизит Тогда
			ТипРеквизита = Реквизит.ОписаниеТипаЗначения;
			РеквизитНоменклатуры = Неопределено;
		Иначе
			РеквизитНоменклатуры = Метаданные.Справочники.Номенклатура.Реквизиты[Реквизит.ИмяРеквизита];
			ТипРеквизита = РеквизитНоменклатуры.Тип;
		КонецЕсли;
		
		Если СтрокаРеквизита <> Неопределено
			И СтрокаРеквизита.Строки.Количество() > 0 Тогда
			СтрокаРеквизита.Строки.Сортировать("Представление");
		КонецЕсли;
		
		СтрокаРеквизита = ДеревоОтборов.Строки.Добавить();
		
		СтрокаРеквизита.ИмяРеквизита          = Реквизит.ИмяРеквизита;
		Если Реквизит.ЭтоДопРеквизит Тогда
			СтрокаРеквизита.ИмяРеквизита          = Реквизит.ПредставлениеРеквизита;
		КонецЕсли;
		СтрокаРеквизита.ЭтоДопРеквизит        = Реквизит.ЭтоДопРеквизит;
		СтрокаРеквизита.Представление         = Реквизит.ПредставлениеРеквизита;
		Если ЗначениеЗаполнено(Реквизит.Заголовок) Тогда
			СтрокаРеквизита.Представление = Реквизит.Заголовок;
		КонецЕсли;
	
		Если ТипРеквизита.СодержитТип(Тип("Дата")) Тогда
			
			СтрокаРеквизита.ИнтервалОт            = Дата('00010101');
			СтрокаРеквизита.ИнтервалДо            = Дата('00010101');
			СтрокаРеквизита.ФиксированноеЗначение = Истина;
			СтрокаРеквизита.ЗначениеОтбора        = Дата('00010101');
			СтрокаРеквизита.ПредставлениеОтбора   = НСтр("ru = '<не задано>'");
			СтрокаРеквизита.ОтборДоступен         = Истина;
			
		ИначеЕсли ТипРеквизита.СодержитТип(Тип("Число"))Тогда
			
			СтрокаРеквизита.ИнтервалОт            = 0;
			СтрокаРеквизита.ИнтервалДо            = 0;
			СтрокаРеквизита.ФиксированноеЗначение = Истина;
			СтрокаРеквизита.ЗначениеОтбора        = 0;
			СтрокаРеквизита.ПредставлениеОтбора   = НСтр("ru = '<не задано>'");
			СтрокаРеквизита.ОтборДоступен         = Истина;
			
		ИначеЕсли ТипРеквизита.СодержитТип(Тип("Булево")) Тогда
			
			СтрокаРеквизита.ЗначениеОтбора = Истина;
			СтрокаРеквизита.ОтборДоступен         = Истина;
			
		ИначеЕсли ТипРеквизита.СодержитТип(Тип("Строка")) Тогда
			
			СтрокаРеквизита.ЗначениеОтбора        = "";
			СтрокаРеквизита.ФиксированноеЗначение = Истина;
			СтрокаРеквизита.ПредставлениеОтбора   = НСтр("ru = '<не задано>'");
			СтрокаРеквизита.ОтборДоступен         = Истина;
			
		Иначе
			МетаданныеТипа = Метаданные.НайтиПоТипу(ТипРеквизита.Типы()[0]);
			
			Если Не ПравоДоступа("Чтение", МетаданныеТипа) Тогда
				ДеревоОтборов.Строки.Удалить(СтрокаРеквизита);
				СтрокаРеквизита = Неопределено;
				Продолжить;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			
			Если Реквизит.ЭтоДопРеквизит Тогда
				  
				ТекстЗапроса = 	
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ   " + Строка(МаксимальноеКоличествоЗначенийВДереве + 1) + "
				|	ДополнительныеРеквизиты.Значение КАК ЗначениеОтбора
				|ИЗ
				|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
				|ГДЕ
				|	ДополнительныеРеквизиты.Ссылка.ВидНоменклатуры = &ВидНоменклатуры
				|	И ДополнительныеРеквизиты.Свойство = &Свойство";
				
			Иначе
				
				ТекстЗапроса =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ " + Строка(МаксимальноеКоличествоЗначенийВДереве + 1) + "
				|	ТаблицаСправочника." + Реквизит.ИмяРеквизита + " КАК ЗначениеОтбора
				|ИЗ
				|	Справочник.Номенклатура КАК ТаблицаСправочника
				|ГДЕ
				|	ТаблицаСправочника.ВидНоменклатуры = &ВидНоменклатуры";
								
			КонецЕсли;
			
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("Свойство", Реквизит.Свойство);
			Запрос.УстановитьПараметр("ВидНоменклатуры", Форма.ВидНоменклатуры);
			
			//На большой базе запрос в цикле работает быстрее, чем один запрос с группировкам.
			//При этом быстрее, как если группировать по Свойство-Значение, так и если объединять запросы
			//с группировками по каждому свойству в отдельности
			ВыборкаЗначений = Запрос.Выполнить().Выбрать();
			
			Если ВыборкаЗначений.Количество() = 0 Тогда
				ДеревоОтборов.Строки.Удалить(СтрокаРеквизита);
				СтрокаРеквизита = Неопределено;
				
			ИначеЕсли ВыборкаЗначений.Количество() > МаксимальноеКоличествоЗначенийВДереве Тогда 	
				СтрокаРеквизита.ЗначениеОтбора        = Новый СписокЗначений;
				СтрокаРеквизита.ФиксированноеЗначение = Истина;
				СтрокаРеквизита.ПредставлениеОтбора   = НСтр("ru = '<не задано>'");
				СтрокаРеквизита.ОтборДоступен         = Истина;
			Иначе
				
				Пока ВыборкаЗначений.Следующий() Цикл
					
					СтрокаЗначения = СтрокаРеквизита.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаЗначения, СтрокаРеквизита);
					
					СтрокаЗначения.ЗначениеОтбора = ВыборкаЗначений.ЗначениеОтбора;
					
					//Получение представления построчно для 50 значений работает быстрее, выборка его сразу в запросе,
					//формирующем ВыборкаЗначений, т.к. там есть группировка
					//Так же это работает быстрее, чем запрос представления (фукнция ПРЕДСТАВЛЕНИЕ языка запросов),
					//сделанный сразу для 50 значений.
					СтрокаЗначения.Представление  = Строка(ВыборкаЗначений.ЗначениеОтбора);
					СтрокаЗначения.ОтборДоступен  = Истина;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокаРеквизита <> Неопределено
		И СтрокаРеквизита.Строки.Количество() > 0 Тогда
		СтрокаРеквизита.Строки.Сортировать("Представление");
	КонецЕсли;
	
КонецПроцедуры

// Очищает дерево свойств для отбора по свойствам вида номенклатуры.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура ОчиститьДеревоОтборов(Форма)
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	ДеревоОтборов.Строки.Очистить();
	
	Форма.ЗначениеВРеквизитФормы(ДеревоОтборов, "ДеревоОтборов");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовНаФормахПодборов

// Вызывается из форм подборов при изменении флажка использования фильтров.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура ПриИзмененииИспользованияФильтров(Форма) Экспорт
			
    Если (Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам
        Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам
        Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам) Тогда
        
        Форма.ВидНоменклатурыДоИзменения = Неопределено;
        ПриИзмененииВидаНоменклатуры(Форма);
        
    Иначе
        
        Если Форма.ИспользоватьФильтры Тогда
            
            Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоИерархии Тогда
                
                УстановитьТекущуюСтрокуИерархииНоменклатуры(Форма);
                пкПодборТехникиКлиентСервер.УстановитьОтборПоИерархииНоменклатуры(Форма);
                
            КонецЕсли;
            
        Иначе
            
            пкПодборТехникиКлиентСервер.УдалитьОтборПоИерархииНоменклатуры(Форма);
            УдалитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
                                    
        КонецЕсли;
    КонецЕсли;
    	
	пкПодборТехникиКлиентСервер.УстановитьДоступностьЭлементовФильтров(Форма);
	
КонецПроцедуры

// Вызывается из форм подборов при изменении варианта навигации.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура ПриИзмененииВариантаНавигации(Форма) Экспорт
		
	УстановитьСтраницуВариантаНавигации(Форма);
	пкПодборТехникиКлиентСервер.УдалитьОтборПоИерархииНоменклатуры(Форма);
	УдалитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
	
	Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоИерархии Тогда
		
		пкПодборТехникиКлиентСервер.УстановитьОтборПоИерархииНоменклатуры(Форма);
		
	ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам 
			Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам
			Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам Тогда
		
		УстановитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
		
	КонецЕсли;
		
КонецПроцедуры

// Вызывается из форм подбороа при изменении вида номенклатуры.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора, форма списка, форма выбора.
//
Процедура ПриИзмененииВидаНоменклатуры(Форма) Экспорт
	
	Если Форма.ВидНоменклатуры = Форма.ВидНоменклатурыДоИзменения Тогда
		Возврат;
	КонецЕсли;
    	
	Форма.ВидНоменклатурыДоИзменения = Форма.ВидНоменклатуры;
	
	УдалитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
	
	Если Не ЗначениеЗаполнено(Форма.ВидНоменклатуры)
		Или Не Форма.ИспользоватьФильтры Тогда
		
		СохранитьПараметрыДереваОтбора(Форма, Ложь);
		ОчиститьДеревоОтборов(Форма);
		Если Форма.ИспользоватьФильтры Тогда
			УстановитьОтборПоВидуНоменклатуры(Форма);
		КонецЕсли;
		
	Иначе
		
			
        СохранитьПараметрыДереваОтбора(Форма, Ложь);
        ЗаполнитьДеревоОтборовНоменклатуры(Форма);
        ЗаполнитьДеревоОтбораИзСохраненныхПараметров(Форма);
		
		УстановитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
		
	КонецЕсли;
		
КонецПроцедуры

// Для сброса флажков для свойств номенклатуры в контекстном меню списка номенклатуры в формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура СброситьОтборыПоСвойствам(Форма) Экспорт
	
	Для Каждого ОтборПервыйУровень Из Форма.ДеревоОтборов.ПолучитьЭлементы() Цикл
		
		Если ОтборПервыйУровень.Отбор Тогда
			
			ОтборПервыйУровень.Отбор = Ложь;
			
			Для Каждого ОтборВторойУровень Из ОтборПервыйУровень.ПолучитьЭлементы() Цикл
				ОтборВторойУровень.Отбор = Ложь;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьОтборПоСвойствамВидаНоменклатуры(Форма);
	
КонецПроцедуры

// Вызывается при выполнени команды отображения товаров с аналогичными свойствами
// в контекстном меню списка номенклатуры в формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура ПриИзмененииОтображенияНоменклатураСАналогичнымиСвойствами(Форма) Экспорт
	
	ТекущаяСтрока = Форма.Элементы[пкПодборТехникиКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма)].ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтфильтроватьПоАналогичнымСвойствам(Форма, ТекущаяСтрока.Ссылка);
		
КонецПроцедуры

#КонецОбласти

#Область УправлениеВидимостьюСтраницСПараметрамиНавигации

// Устанавливает страницу варианта навигации на форме подбора.
//
// Параметры:
//  Форма						 - УправляемаяФорма	 - форма списка номенклатуры или форма подбора.  
//  ВариантНавигацииДоИзменения	 - ПеречислениеСсылка.ВариантыНавигацииВФормахНоменклатуры - вариант навигации, который был в форме до выбора нового варианта.
//									Параметр передается для реализации возможности возврата к предыдущему варианту навигации и актуален для
//									вариантов "ПоТоварамДругогоКачеста" и "ПоСовместнымПродажам"
//
Процедура УстановитьСтраницуВариантаНавигации(Форма, ВариантНавигацииДоИзменения = Неопределено) Экспорт
	
	Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоИерархии Тогда
		СтраницаВариантаНавигации = Форма.Элементы.НавигацияИерархияНоменклатуры;
		Форма.Элементы.СброситьОтборыПоСвойствам.Видимость = Ложь;
	ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоИерархииПоставщика Тогда
		СтраницаВариантаНавигации = Форма.Элементы.НавигацияИерархияНоменклатурыПоставщика;
		Форма.Элементы.СброситьОтборыПоСвойствам.Видимость = Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(Форма.ВариантНавигации) Тогда
		СтраницаВариантаНавигации = Форма.Элементы.НавигацияИерархияНоменклатуры;
		Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоИерархии;
		Форма.Элементы.СброситьОтборыПоСвойствам.Видимость = Ложь;
	ИначеЕсли (Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам
		Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам
		Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам) Тогда
		СтраницаВариантаНавигации = Форма.Элементы.НавигацияВидыНоменклатуры;
		Форма.Элементы.СброситьОтборыПоСвойствам.Видимость = Истина;
		
		Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам Тогда
			Форма.Элементы.ДеревоОтборов.Видимость    = Истина;
			Форма.Элементы.ВидНоменклатуры.Видимость  = Ложь;
			Форма.Элементы.СброситьОтборыПоСвойствам.Доступность = Истина;
		ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам Тогда
			Форма.Элементы.ДеревоОтборов.Видимость    = Ложь;
			Форма.Элементы.ВидНоменклатуры.Видимость  = Ложь;
			Форма.Элементы.СброситьОтборыПоСвойствам.Доступность = Ложь;
		ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам Тогда
			Форма.Элементы.ДеревоОтборов.Видимость    = Истина;
			Форма.Элементы.ВидНоменклатуры.Видимость  = Истина;
			Форма.Элементы.СброситьОтборыПоСвойствам.Доступность = Истина;
		КонецЕсли;
		
        
        Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам Тогда
            Форма.Элементы.ВидыНоменклатуры.Видимость = Истина;
        ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам Тогда
            Форма.Элементы.ВидыНоменклатуры.Видимость = Истина;
        ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам Тогда
            Форма.Элементы.ВидыНоменклатуры.Видимость = Ложь;
        КонецЕсли;
	
	ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСовместноПродаваемымТоварам Тогда
		СтраницаВариантаНавигации = Форма.Элементы.СтраницаПодобранныеТовары;
		Форма.Элементы.СброситьОтборыПоСвойствам.Видимость = Ложь;
	ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоТоварамДругогоКачества Тогда
		Если пкПодборТехникиКлиентСервер.ЭтоФормаПодобныеТоварыНоменклатуры(Форма) Тогда
			СтраницаВариантаНавигации = Форма.Элементы.НавигацияИерархияНоменклатуры;
		Иначе
			СтраницаВариантаНавигации = Форма.Элементы.СтраницаТоварыДругогоКачества;
		КонецЕсли;
		Форма.Элементы.СброситьОтборыПоСвойствам.Видимость = Ложь;
	ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоНоменклатуре Тогда
		Форма.Элементы.ВидНоменклатуры.Видимость  = Ложь;
		Форма.Элементы.СброситьОтборыПоСвойствам.Доступность = Ложь;
		СтраницаВариантаНавигации = Форма.Элементы.НавигацияНоменклатура;
	ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоНоменклатуреПоставщика Тогда
		Форма.Элементы.ВидНоменклатуры.Видимость  = Ложь;
		Форма.Элементы.СброситьОтборыПоСвойствам.Доступность = Ложь;
		СтраницаВариантаНавигации = Форма.Элементы.НавигацияНоменклатураПоставщика;
	КонецЕсли;
	
	ВозвратКФильтрам = Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоТоварамДругогоКачества
	Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСовместноПродаваемымТоварам;
    
    Форма.Элементы.ИспользоватьФильтры.Доступность = Не ВозвратКФильтрам;
    Форма.Элементы.СтандартныйПоискКомандаяПанельУстановитьФильтр.Доступность = Не ВозвратКФильтрам;
    Форма.Элементы.РасширенныйПоискКомандаяПанельУстановитьФильтр.Доступность = Не ВозвратКФильтрам;
    Форма.Элементы.СписокРасширенныйПоискНоменклатураКонтекстноеМенюНоменклатураСАналогичнымиСвойствами.Доступность = Не ВозвратКФильтрам;
    Форма.Элементы.СписокСтандартныйПоискНоменклатураКонтекстноеМенюНоменклатураСАналогичнымиСвойствами.Доступность = Не ВозвратКФильтрам;
    СформироватьНадписьВариантНавигации(Форма, ВариантНавигацииДоИзменения);

	Форма.Элементы.ВариантыНавигации.ТекущаяСтраница = СтраницаВариантаНавигации;
	
КонецПроцедуры

// Формирует представление варианта навигации
//
// Параметры:
//  Форма						 - УправляемаяФорма - форма списка номенклатуры или форма подбора 
//  ВариантНавигацииДоИзменения	 - ПеречислениеСсылка.ВариантыНавигацииВФормахНоменклатуры - вариант навигации, который был в форме до выбора нового варианта.
//									Параметр передается для реализации возможности возврата к предыдущему варианту навигации и актуален для
//									вариантов "ПоТоварамДругогоКачеста" и "ПоСовместнымПродажам"
//
Процедура СформироватьНадписьВариантНавигации(Форма, ВариантНавигацииДоИзменения = Неопределено)
	МассивСтрокНадписи = Новый Массив();
		
	Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоИерархии Тогда
		МассивСтрокНадписи.Добавить(НСтр("ru = 'Иерархия номенклатуры'"));
	ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоТоварамДругогоКачества Тогда
		МассивСтрокНадписи.Добавить(НСтр("ru = 'Товары другого качества'"));
		МассивСтрокНадписи.Добавить("  ");
		МассивСтрокНадписи.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Назад'"),
		,
		,
		,
		ОбщегоНазначения.ИмяЗначенияПеречисления(ВариантНавигацииДоИзменения)));
	ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСовместноПродаваемымТоварам 
		И ЗначениеЗаполнено(ВариантНавигацииДоИзменения) Тогда
		МассивСтрокНадписи.Добавить(НСтр("ru = 'Совместные продажи'"));
		МассивСтрокНадписи.Добавить("  ");
		МассивСтрокНадписи.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Назад'"),
		,
		,
		,
		ОбщегоНазначения.ИмяЗначенияПеречисления(ВариантНавигацииДоИзменения)));
	ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам 
		Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам 
		Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам Тогда
		
		Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам Тогда 
			МассивСтрокНадписи.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Виды и свойства'"),
			Новый Шрифт(,,Истина),
			Форма.ЦветТекстаФормы,
			,));
		Иначе
			МассивСтрокНадписи.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Виды и свойства'"),
			,
			,
			,
			ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам)));
		КонецЕсли;
		
		МассивСтрокНадписи.Добавить("  ");
		
		
		Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам Тогда
			МассивСтрокНадписи.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Виды'"),
			Новый Шрифт(,,Истина),
			Форма.ЦветТекстаФормы,
			,));
		Иначе
			МассивСтрокНадписи.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Виды'"),
			,
			,
			,
			ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам)));
		КонецЕсли;
		
		МассивСтрокНадписи.Добавить("  ");
		
		Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам Тогда
			МассивСтрокНадписи.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Свойства'"),
			Новый Шрифт(,,Истина),
			Форма.ЦветТекстаФормы,
			,));
		Иначе
			МассивСтрокНадписи.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Свойства'"),
			,
			,
			,
			ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам)));
		КонецЕсли;
	Иначе
		МассивСтрокНадписи = Новый Массив();
	КонецЕсли;
	
	Если МассивСтрокНадписи.Количество() > 0 Тогда
		Форма.НадписьВариантНавигации = Новый ФорматированнаяСтрока(МассивСтрокНадписи);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовНаФормахПодборов

// Сохраняет флаги для дерева отбора на формах подбора.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//	Закрыть - Булево - признак показывыющий что форма закрывается, тогда нужно сохранять
//	все настройки отборов, а не только Качество в случае изменения вида номенклатуры.
//
Процедура СохранитьПараметрыДереваОтбора(Форма, Закрыть) Экспорт
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	ТаблицаПараметровОтбора = Форма.ТаблицаПараметровОтбора.Выгрузить();
	
	Если Закрыть Тогда
		
		ТаблицаПараметровОтбора.Очистить(); 
		
		Для Каждого ПервыйУровень Из ДеревоОтборов.Строки Цикл
			
			Если ПервыйУровень.Отбор Тогда
				
				Если ПервыйУровень.ФиксированноеЗначение Тогда
					
					НоваяСтрока = ТаблицаПараметровОтбора.Добавить();
					НоваяСтрока.ИмяРеквизита = ПервыйУровень.Представление;
					НоваяСтрока.Представление = ПервыйУровень.Представление;
					НоваяСтрока.ЗначениеОтбора = ПервыйУровень.ЗначениеОтбора;
					НоваяСтрока.ПредставлениеОтбора = ПервыйУровень.ПредставлениеОтбора;
					НоваяСтрока.ФиксированноеЗначение = Истина;
					НоваяСтрока.Отбор = Истина;
					
					Если ПервыйУровень.ИнтервалОт<>Неопределено Или ПервыйУровень.ИнтервалДо<>Неопределено Тогда
						
						Если ТипЗнч(ПервыйУровень.ИнтервалОт) = Тип("Дата") Или ТипЗнч(ПервыйУровень.ИнтервалДо) = Тип("Дата") Тогда
							
							НоваяСтрока.ИнтервалДаты = Истина;
							НоваяСтрока.ИнтервалДатыОт = ПервыйУровень.ИнтервалОт;
							НоваяСтрока.ИнтервалДатыДо = ПервыйУровень.ИнтервалДо;
							НоваяСтрока.Отбор = Истина;
							
						Иначе
							
							НоваяСтрока.ИнтервалЧисла = Истина;
							НоваяСтрока.ИнтервалЧислаОт = ПервыйУровень.ИнтервалОт;
							НоваяСтрока.ИнтервалЧислаДо = ПервыйУровень.ИнтервалДо;
							НоваяСтрока.Отбор = Истина;
							
						КонецЕсли;
						
					КонецЕсли;
					
				ИначеЕсли ТипЗнч(ПервыйУровень.ЗначениеОтбора) = Тип("Булево") Тогда
					
					НоваяСтрока = ТаблицаПараметровОтбора.Добавить();
					НоваяСтрока.ИмяРеквизита = ПервыйУровень.Представление;
					НоваяСтрока.Представление = ПервыйУровень.Представление;
					НоваяСтрока.ЗначениеОтбора = ПервыйУровень.ЗначениеОтбора;
					НоваяСтрока.Отбор = Истина;
						
				Иначе
					
					ИмяРеквизита = ПервыйУровень.Представление;
					
					Для Каждого ВторойУровень Из ПервыйУровень.Строки Цикл
						
						Если ВторойУровень.Отбор Тогда
							
							НоваяСтрока = ТаблицаПараметровОтбора.Добавить();
							НоваяСтрока.ИмяРеквизита = ИмяРеквизита;
							НоваяСтрока.Представление = ВторойУровень.Представление;
							НоваяСтрока.ЗначениеОтбора = ВторойУровень.ЗначениеОтбора;
							НоваяСтрока.Отбор = Истина;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого ПервыйУровень Из ДеревоОтборов.Строки Цикл
			
			Если ПервыйУровень.Представление="Качество" Тогда
				
				Для Каждого ВторойУровень Из ПервыйУровень.Строки Цикл
					
					Отбор = Новый Структура();
					Отбор.Вставить("Представление",ВторойУровень.Представление);
					ОтобранныеСтроки = ТаблицаПараметровОтбора.НайтиСтроки(Отбор);
					
					Если ЗначениеЗаполнено(ОтобранныеСтроки) Тогда
						ОтобранныеСтроки[0].Отбор = ВторойУровень.Отбор; 
					Иначе
						
						НоваяСтрока = ТаблицаПараметровОтбора.Добавить();
						НоваяСтрока.ИмяРеквизита = "Качество";
						НоваяСтрока.Представление = ВторойУровень.Представление;
						НоваяСтрока.ЗначениеОтбора = ВторойУровень.ЗначениеОтбора;
						Если НоваяСтрока.Представление = "Новый" Тогда 
							НоваяСтрока.Отбор = Истина;
						Иначе
							НоваяСтрока.Отбор = Ложь;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Форма.ТаблицаПараметровОтбора.Загрузить(ТаблицаПараметровОтбора);
	
КонецПроцедуры

// Расставляет флаги для дерева отбора на формах подбора.
//
Процедура ЗаполнитьДеревоОтбораИзСохраненныхПараметров(Форма) Экспорт
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	
	ТаблицаПараметровОтбора = Форма.ТаблицаПараметровОтбора.Выгрузить();
	
	ТекущиеИмяРеквизита = "";
	
	Отбор = Новый Структура();
	Отбор.Вставить("Отбор",Истина);
	ОтобранныеСтроки = ТаблицаПараметровОтбора.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаТаблицы Из ОтобранныеСтроки Цикл
		
		Если СтрокаТаблицы.ИмяРеквизита <> ТекущиеИмяРеквизита Тогда
			
			ТекущиеИмяРеквизита = СтрокаТаблицы.ИмяРеквизита;
			
			ЕстьПометкаНаВторомУровне = Ложь;
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Представление", ТекущиеИмяРеквизита);
			СтрокаДереваПервогоУровня = ДеревоОтборов.Строки.НайтиСтроки(ПараметрыОтбора, Ложь);
			
			Если СтрокаДереваПервогоУровня.Количество()>0 Тогда
				
				Если СтрокаДереваПервогоУровня[0].ФиксированноеЗначение <> СтрокаТаблицы.ФиксированноеЗначение Тогда
					СтрокаНайдена = Ложь;
					Продолжить;
				КонецЕсли;
				
				Если СтрокаТаблицы.ФиксированноеЗначение Тогда
					
					СтрокаДереваПервогоУровня[0].ФиксированноеЗначение = Истина;
					СтрокаДереваПервогоУровня[0].ЗначениеОтбора = СтрокаТаблицы.ЗначениеОтбора;
					СтрокаДереваПервогоУровня[0].ПредставлениеОтбора = СтрокаТаблицы.ПредставлениеОтбора;
					СтрокаДереваПервогоУровня[0].Отбор = Истина;
					
					Если СтрокаТаблицы.ИнтервалДаты Тогда
						
						СтрокаДереваПервогоУровня[0].ФиксированноеЗначение = Истина;
						СтрокаДереваПервогоУровня[0].ЗначениеОтбора = СтрокаТаблицы.ЗначениеОтбора;
						СтрокаДереваПервогоУровня[0].ПредставлениеОтбора = СтрокаТаблицы.ПредставлениеОтбора;
						СтрокаДереваПервогоУровня[0].ИнтервалОт = СтрокаТаблицы.ИнтервалДатыОт;
						СтрокаДереваПервогоУровня[0].ИнтервалДо = СтрокаТаблицы.ИнтервалДатыДо;
						
						Продолжить;
						
					ИначеЕсли СтрокаТаблицы.ИнтервалЧисла Тогда
						
						СтрокаДереваПервогоУровня[0].ФиксированноеЗначение = Истина;
						СтрокаДереваПервогоУровня[0].ЗначениеОтбора = СтрокаТаблицы.ЗначениеОтбора;
						СтрокаДереваПервогоУровня[0].ПредставлениеОтбора = СтрокаТаблицы.ПредставлениеОтбора;
						СтрокаДереваПервогоУровня[0].ИнтервалОт = СтрокаТаблицы.ИнтервалЧислаОт;
						СтрокаДереваПервогоУровня[0].ИнтервалДо = СтрокаТаблицы.ИнтервалЧислаДо;
						
						Продолжить;
						
					КонецЕсли;
					
					Продолжить;
					
				ИначеЕсли ТипЗнч(СтрокаТаблицы.ЗначениеОтбора) = Тип("Булево") Тогда
					
					СтрокаДереваПервогоУровня[0].ЗначениеОтбора = СтрокаТаблицы.ЗначениеОтбора;
					СтрокаДереваПервогоУровня[0].Отбор = Истина;
					
				КонецЕсли;
				
				СтрокиДереваВторогоУровня = СтрокаДереваПервогоУровня[0].Строки;
				СтрокаНайдена= Истина;
				
			Иначе
				
				СтрокаНайдена = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаНайдена Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Представление", СтрокаТаблицы.Представление);
			СтрокаПоиска = СтрокиДереваВторогоУровня.НайтиСтроки(ПараметрыОтбора, Ложь);
			
			Если СтрокаПоиска.Количество() > 0 Тогда
				
				СтрокаПоиска[0].Отбор = Истина;
				СтрокаДереваПервогоУровня[0].Отбор = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.ЗначениеВРеквизитФормы(ДеревоОтборов, "ДеревоОтборов");
	
КонецПроцедуры

Процедура УстановитьОтборПоСтатусамТехникиНаСервере(Форма) Экспорт
    
    СписокСтатусовТехники = Новый СписокЗначений();
    СписокСтатусовРемонта = Новый СписокЗначений();
	        
    Если Форма.ОтборВАренде Тогда
        СписокСтатусовТехники.Добавить(Перечисления.пкСтатусыТехники.ВАренде); 
        СписокСтатусовТехники.Добавить(Перечисления.пкСтатусыТехники.ВПути); 
        СписокСтатусовТехники.Добавить(Перечисления.пкСтатусыТехники.КВозврату); 
    КонецЕсли;
                    
    Если Форма.ОтборНаБазе Тогда
        СписокСтатусовТехники.Добавить(Перечисления.пкСтатусыТехники.НаБазе); 
        СписокСтатусовТехники.Добавить(Перечисления.пкСтатусыТехники.КОтгрузке); 
    КонецЕсли;
    
    Если Форма.ОтборНеВРемонте Тогда
        СписокСтатусовРемонта.Добавить(Перечисления.пкСтатусыРемонтаТехники.ПустаяСсылка()); 
        СписокСтатусовРемонта.Добавить(Неопределено);
    КонецЕсли;

    Если Форма.ОтборВРемонте Тогда
        СписокСтатусовРемонта.Добавить(Перечисления.пкСтатусыРемонтаТехники.ВРемонте); 
        СписокСтатусовРемонта.Добавить(Перечисления.пкСтатусыРемонтаТехники.КРемонту); 
    КонецЕсли;
                        
    КомпоновщикНастроек = Форма.СписокТехники.КомпоновщикНастроек;
    
    ОтборКомпоновщикаНастроек = КомпоновщикНастроек.ФиксированныеНастройки.Отбор;
        
    ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ОтборКомпоновщикаНастроек.Элементы, "ГруппаСтатусов", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
    
    Для Каждого Элемент ИЗ ОтборКомпоновщикаНастроек.Элементы Цикл
        Если Элемент.Представление = "ГруппаСтатусов" Тогда
            ЭлементГруппы = Элемент;  
            Прервать;
        КонецЕсли;    
    КонецЦикла; 
    
    ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
        ЭлементГруппы, "Статус", ВидСравненияКомпоновкиДанных.ВСписке, СписокСтатусовТехники, "Статус");
            
    ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
    	ЭлементГруппы, "СтатусРемонта", ВидСравненияКомпоновкиДанных.ВСписке, СписокСтатусовРемонта, "СтатусРемонта"); 
        
    Если Форма.ОтборВРезерве Тогда
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
    	    Форма.СписокТехники, "ЕстьРезерв", , , "ЕстьРезерв", Ложь); 
    Иначе    
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
    	    Форма.СписокТехники, "ЕстьРезерв", Ложь, , "ЕстьРезерв", Истина); 
    КонецЕсли;
//Рарус Владимир Подрезов 31.08.2017
	Если Форма.ОтборЗапретАренды = 1 Тогда //Только доступные
	    ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    Форма.СписокТехники, "ЗапретАренды", Ложь, , "ЗапретАренды", Истина);
	ИначеЕсли Форма.ОтборЗапретАренды = 2 Тогда //Только НЕ доступные
	    ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    Форма.СписокТехники, "ЗапретАренды", Истина, , "ЗапретАренды", Истина);
	Иначе //Все, фильтр отключаем
	    ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    Форма.СписокТехники, "ЗапретАренды", Истина, , "ЗапретАренды", Ложь);
	КонецЕсли;
//Рарус Владимир Подрезов Конец
        
КонецПроцедуры

Процедура ОбновитьКоличествоПодъемников(Форма) Экспорт
    
    Элементы = Форма.Элементы;
    
    СхемаКомпоновкиДанных = Элементы.СписокТехники.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
    НастройкиКомпоновкиДанных = Элементы.СписокТехники.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
    
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных
                                                  ,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
    
    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
    
    ТаблицаЗначений = Новый ТаблицаЗначений;
    
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
    ПроцессорВывода.Вывести(ПроцессорКомпоновки);
    
    Элементы.ДекорацияКоличествоПодъемников.Заголовок = "Количество: " + Строка(ТаблицаЗначений.Количество()) + " шт.";
    
КонецПроцедуры    

Процедура ОбновитьСписокТехники(Форма) Экспорт
    
    УстановитьОтборПоСтатусамТехникиНаСервере(Форма);
    ОбновитьКоличествоПодъемников(Форма);
    пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.СписокТехники, "Дата", ТекущаяДата());
    
    Если НЕ ЗначениеЗаполнено(Форма.ОтборПодразделение) Тогда
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
            Форма.СписокТехники, "Подразделение", , , , Ложь);
    Иначе
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
            Форма.СписокТехники, "Подразделение", Форма.ОтборПодразделение, , , Истина);
    КонецЕсли;
    
КонецПроцедуры   

Процедура ОбновитьПланированиеПоМоделямНаСервере(Форма) Экспорт
    
    Элементы = Форма.Элементы;
    
    пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.ПланированиеПоМоделям, "Дата", ТекущаяДата());
    пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.ПланированиеПоМоделям, "УчитыватьПлановуюДатуОкончанияРемонта", Форма.УчитыватьПлановуюДатуОкончанияРемонта);
    
    ПервыйДень    = НачалоДня(ТекущаяДата());
    ВторойДень    = ПервыйДень + 3600 * 24;
    ТретийДень    = ВторойДень + 3600 * 24;
    ЧетвертыйДень = ТретийДень + 3600 * 24;
    ПятыйДень     = ЧетвертыйДень + 3600 * 24;
    
    Элементы.ПланированиеПоМоделямГруппаПервыйДень.Заголовок	= Строка(Формат(ПервыйДень, "ДФ=dd.MM.yyyy"));
    Элементы.ПланированиеПоМоделямГруппаВторойДень.Заголовок	= Строка(Формат(ВторойДень, "ДФ=dd.MM.yyyy"));
    Элементы.ПланированиеПоМоделямГруппаТретийДень.Заголовок	= Строка(Формат(ТретийДень, "ДФ=dd.MM.yyyy"));
    Элементы.ПланированиеПоМоделямГруппаЧетвертыйДень.Заголовок	= Строка(Формат(ЧетвертыйДень, "ДФ=dd.MM.yyyy"));
    Элементы.ПланированиеПоМоделямГруппаПятыйДень.Заголовок		= Строка(Формат(ПятыйДень, "ДФ=dd.MM.yyyy"));
    Элементы.ПланированиеПоМоделямГруппаКонец.Заголовок			= "После " + Строка(Формат(ПятыйДень, "ДФ=dd.MM.yyyy"));
    
    пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.ПланированиеПоМоделям, "ПервыйДень", ПервыйДень);
    пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.ПланированиеПоМоделям, "КонецПервогоДня", КонецДня(ПервыйДень));
    пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.ПланированиеПоМоделям, "ВторойДень", ВторойДень);
    пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.ПланированиеПоМоделям, "КонецВторогоДня", КонецДня(ВторойДень));
    пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.ПланированиеПоМоделям, "ТретийДень", ТретийДень);
    пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.ПланированиеПоМоделям, "КонецТретьегоДня", КонецДня(ТретийДень));
    пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.ПланированиеПоМоделям, "ЧетвертыйДень", ЧетвертыйДень);
    пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.ПланированиеПоМоделям, "КонецЧетвертогоДня", КонецДня(ЧетвертыйДень));
    пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.ПланированиеПоМоделям, "ПятыйДень", ПятыйДень);
    пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.ПланированиеПоМоделям, "КонецПятогоДня", КонецДня(ПятыйДень));
//Рарус Владимир Подрезов 31.08.2017
	Если Форма.ОтборЗапретАренды = 1 Тогда //Только доступные
	    пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.ПланированиеПоМоделям, "НеУчитыватьЗапрет", Ложь);
	    пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.ПланированиеПоМоделям, "ОтборЗапрет", Ложь);
	ИначеЕсли Форма.ОтборЗапретАренды = 2 Тогда //Только не доступные
	    пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.ПланированиеПоМоделям, "НеУчитыватьЗапрет", Ложь);
	    пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.ПланированиеПоМоделям, "ОтборЗапрет", Истина);
	Иначе // Все
	    пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.ПланированиеПоМоделям, "НеУчитыватьЗапрет", Истина);
	    пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.ПланированиеПоМоделям, "ОтборЗапрет", Истина);
	КонецЕсли;
//Рарус Владимир Подрезов Конец
    
    Если Форма.ОтображениеОтгрузки = 0 Тогда
        пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.ПланированиеПоМоделям, "ВсеЗаявки", Истина);
        пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.ПланированиеПоМоделям, "ПодтвержденныеЗаявки", Ложь);
    ИначеЕсли Форма.ОтображениеОтгрузки = 1 Тогда
        пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.ПланированиеПоМоделям, "ВсеЗаявки", Ложь);
        пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.ПланированиеПоМоделям, "ПодтвержденныеЗаявки", Истина);
    Иначе
        пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.ПланированиеПоМоделям, "ВсеЗаявки", Ложь);
        пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.ПланированиеПоМоделям, "ПодтвержденныеЗаявки", Ложь);
    КонецЕсли;
    
    пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.ПланированиеПоМоделям, "Подразделение", Форма.ОтборПодразделение);
    пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.ПланированиеПоМоделям, "Местонахождения", 
        ?(ЗначениеЗаполнено(Форма.ОтборПодразделение), Форма.ОтборПодразделение.пкСкладТехники, Неопределено));
    
КонецПроцедуры    

#КонецОбласти

#Область РаботаСДеревомОтбораПоСвойствамВидаНоменклатуры

// Вызывается при изменении значения в дереве отбора по свойствам вида номенклатуры.
// Т.е. клиентсике функции обрабатывают обработку значений на элементе формы (устанавливают
// значения флажков на строках, подчиненных строках, открывают форму установки интервала значений
// и т.п.), затем управление передается на сервер и сначала отключаются все установленные отборы
// по дереву свойств, затем включается отбор только по значениям строк с установленными флажками отбора.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура ДеревоОтборовОтборПриИзменении(Форма) Экспорт
	
	Если Не Форма.ИспользоватьФильтры Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьОтборПоСвойствамВидаНоменклатуры(Форма);
	УстановитьОтборПоСвойствамВидаНоменклатуры(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаИУдалениеОтборов

// Устанавливает отбор по родителю текущей строки списка номенклатуры
// в формах подборов товаров.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьТекущуюСтрокуИерархииНоменклатуры(Форма)
	
	ТекущаяСтрока = Форма.Элементы[пкПодборТехникиКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма)].ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Родитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока, "Родитель");
	
	Форма.Элементы.ИерархияНоменклатуры.ТекущаяСтрока = Родитель;
	Форма.ТекущаяИерархияНоменклатуры = Родитель; 
	
КонецПроцедуры

// Устанавливает отборпо виду номенклатуры и свойствам вида номенклатуры
// у списка номенклатуры в формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма)
	
	УстановитьОтборПоВидуНоменклатуры(Форма);
	Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам
		Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам Тогда
		УстановитьОтборПоСвойствамВидаНоменклатуры(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает отбор по виду номенклатуры у списка номенклатуры на формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьОтборПоВидуНоменклатуры(Форма)
	
	ВидНоменклатуры = Форма.ВидНоменклатуры;
	ЭлементыОтбора = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура);
	
	// Установить отбор по виду номенклатуры.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементыОтбора,
		"ВидНоменклатуры",
		ВидНоменклатуры,
		ВидСравненияКомпоновкиДанных.Равно, 
		"ОтборПоВидуНоменклатуры",
		Истина);
	
КонецПроцедуры

// Устанавливает отбор по списку значений из строк дерева отборов.
//
// Параметры:
//	ИмяЭлементаОтбора - Строка - имя элемента отбора,
//	Отбор - ОтборКомпоновкиДанных - коллекция элементов отбора списка номенклатуры,
//	СтрокиДереваОтборов - Массив - массив строк дерева отборов.
//
Процедура УстановитьОтборПоСтрокамДереваОтборов(ИмяЭлементаОтбора, Отбор, СтрокиДереваОтборов)
	
	ЗначенияОтборов = Новый Массив;
	Для Каждого Строка Из СтрокиДереваОтборов Цикл
		ЗначенияОтборов.Добавить(Строка.ЗначениеОтбора);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Отбор, ИмяЭлементаОтбора, ЗначенияОтборов, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
	
КонецПроцедуры

// Устанавливает отбор по свойствам вида номенклатуры у списка номенклатуры на форме подбора.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма подбора, форма выбора.
//
Процедура УстановитьОтборПоСвойствамВидаНоменклатуры(Форма)
		
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	ПараметрыОтбора = Новый Структура("Отбор", Истина);
			
	ОтборСпискаНоменклатуры = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура);
				
	ИмяСсылки = "Ссылка.[";
	
	Для каждого СтрокаДереваОтборов Из ДеревоОтборов.Строки Цикл
		
		Если СтрокаДереваОтборов.ОтборДоступен Тогда
			
			Если Не СтрокаДереваОтборов.Отбор Тогда
				Продолжить;
			КонецЕсли;
			
			// Сформировать имя элемента отбора.
			ИмяЭлементаОтбора = СтрокаДереваОтборов.ИмяРеквизита;
			Если СтрокаДереваОтборов.ЭтоДопРеквизит Тогда
				ИмяЭлементаОтбора = ИмяСсылки + СтрокаДереваОтборов.ИмяРеквизита + "]";
			КонецЕсли;
			
			// В зависимости от типа установить значение элемента отбора.
			Если ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Булево") Тогда
				
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаНоменклатуры, ИмяЭлементаОтбора, Истина, 
					ВидСравненияКомпоновкиДанных.Равно,,Истина);
				
			ИначеЕсли ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Дата") 
				Или ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Число") Тогда
				
				Если ЗначениеЗаполнено(СтрокаДереваОтборов.ИнтервалОт) Тогда
					
					ДобавитьЭлементОтбора(ОтборСпискаНоменклатуры, ИмяЭлементаОтбора, СтрокаДереваОтборов.ИнтервалОт, 
						ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДереваОтборов.ИнтервалДо) Тогда
					
					ДобавитьЭлементОтбора(ОтборСпискаНоменклатуры, ИмяЭлементаОтбора, СтрокаДереваОтборов.ИнтервалДо, 
						ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
                        
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Строка") Тогда
				
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаНоменклатуры, ИмяЭлементаОтбора, 
					СтрокаДереваОтборов.ЗначениеОтбора, ВидСравненияКомпоновкиДанных.Равно,,Истина);
				
			ИначеЕсли ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("СписокЗначений") Тогда
				
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаНоменклатуры, ИмяЭлементаОтбора, 
					СтрокаДереваОтборов.ЗначениеОтбора, ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
                    
			КонецЕсли;
			
		Иначе
			
			// Отбор не доступен - это строка отбора, имеющая подчиненные строки.
			МассивСтрок = СтрокаДереваОтборов.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
			Если МассивСтрок.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаОтбора = МассивСтрок[0];
			
			// Сформировать имя элемента отбора.
			ИмяЭлементаОтбора = СтрокаОтбора.ИмяРеквизита;
			Если СтрокаОтбора.ЭтоДопРеквизит Тогда
				ИмяЭлементаОтбора = ИмяСсылки + СтрокаОтбора.ИмяРеквизита + "]";
			КонецЕсли;
			
			УстановитьОтборПоСтрокамДереваОтборов(ИмяЭлементаОтбора, ОтборСпискаНоменклатуры, МассивСтрок);
            
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Отключает установленные отборы по виду номенклатуры и по свойствам выбранного
// вида номенклатуры на форме подбора.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма подбора, форма выбора.
//
Процедура УдалитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма)
	
	УдалитьОтборПоВидуНоменклатуры(Форма);
	УдалитьОтборПоСвойствамВидаНоменклатуры(Форма);
	
КонецПроцедуры

// Удаляет отбор по виду номенклатуры у списка номенклатуры на формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УдалитьОтборПоВидуНоменклатуры(Форма)
	
	ВидНоменклатуры = Форма.ВидНоменклатуры;
	ЭлементыОтбора = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементыОтбора,
		"ВидНоменклатуры",
		ВидНоменклатуры,
		ВидСравненияКомпоновкиДанных.Равно, 
		"ОтборПоВидуНоменклатуры",
		Ложь);
	
КонецПроцедуры

// Удаляет установленные отборы по свойствам вида номенклатуры.
// Точнее удаляются все установленные отборы на списке за исключением тех
// которые не относятся к отборам дерева свойств.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УдалитьОтборПоСвойствамВидаНоменклатуры(Форма)
    	
	// Некоторые элементы отбора не должны удаляться - они не относятся
	// к отбору по свойствам вида номенклатуры.
	НеУдаляемыеЭлементы = НеУдаляемыеЭлементыОтборов();
	
		
    ОтборСпискаНоменклатуры = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура).Элементы;
    ВГраница = ОтборСпискаНоменклатуры.Количество() - 1;
    
    Для ОбрИндекс = 0 По ВГраница Цикл
        
        ЭлементОтбора = ОтборСпискаНоменклатуры[ВГраница - ОбрИндекс];
        
        Если НеУдаляемыеЭлементы.Найти(ЭлементОтбора.Представление) = Неопределено Тогда
            ОтборСпискаНоменклатуры.Удалить(ЭлементОтбора);
        КонецЕсли;
        
    КонецЦикла;
			
КонецПроцедуры

// Возвращает массив имен элементов отбора которые не следует удалять.
//
// Возвращаемое значение:
//
//	Массив.
//		Массив имен отборов которые не следует удалять - они не относятся 
//		к отбору по свойствам вида номенклатуры.
//
Функция НеУдаляемыеЭлементыОтборов() 
	
	НеУдаляемыеЭлементы = Новый Массив;
	
	НеУдаляемыеЭлементы.Добавить("ПоискПоПодстроке");

	НеУдаляемыеЭлементы.Добавить("ГруппаТолькоВНаличии");
	НеУдаляемыеЭлементы.Добавить("ОтборПоТипуНоменклатуры");
	НеУдаляемыеЭлементы.Добавить("ОтборПоУмолчанию");
	
	Возврат НеУдаляемыеЭлементы
	
КонецФункции

// Добавляет отбор в указанную коллекцию области отбора.
//
// Параметры:
//	ОбластьОтбора - ОтборКомпоновкиДанных - отбор динамического списка,
//	ЛевоеЗначение - Строка - путь к данным поля отбора,
//	ПравоеЗначение - Произвольный - значение отбора,
//	ВидОтбора - ВидСравненияКомпоновкиДанных - вид сравнения,
//	Представление - Строка - представление элемента отбора.
//
Процедура ДобавитьЭлементОтбора(ОбластьОтбора, ЛевоеЗначение, ПравоеЗначение, ВидОтбора, Представление = "") Экспорт
	
	ЭлементОтбора                   = ОбластьОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение     = Новый ПолеКомпоновкиДанных(ЛевоеЗначение);
	ЭлементОтбора.ПравоеЗначение    = ПравоеЗначение;
	ЭлементОтбора.РежимОтображения  = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.ВидСравнения      = ВидОтбора;
	
	Если ЗначениеЗаполнено(Представление) Тогда
		ЭлементОтбора.Представление = Представление;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтборыВспомогательные

// Возвращает массив свойств по которым устанавливается отбор при отображении
// списка товаров с аналогичными свойствами в формах подборов.
//
// Параметры:
//	Номенклатура (СправочникСсылка.Номенклатура) - номенклатура для которой формируется массив свойств.
//
// Возвращаемое значение:
//	Массив. Массив свойств и значений свойств элемента номенклатуры по которым нужно
//	будет отобрать товары.
//
Функция СвойстваДляПодбораТоваровСАналогичнымиСвойствами(Номенклатура) Экспорт
	
	ДополнительныеРеквизиты = Новый Массив;
	Свойства = Новый Массив;
	
	// Получить имена и значения реквизитов которые используются для отбора.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РеквизитыБыстрогоОтбораНоменклатуры.ИмяРеквизита   КАК ИмяРеквизита,
	|	РеквизитыБыстрогоОтбораНоменклатуры.Свойство       КАК Свойство,
	|	РеквизитыБыстрогоОтбораНоменклатуры.ЭтоДопРеквизит КАК ЭтоДопРеквизит
	|ИЗ
	|	Справочник.ВидыНоменклатуры.РеквизитыБыстрогоОтбораНоменклатуры КАК РеквизитыБыстрогоОтбораНоменклатуры
	|ГДЕ
	|	РеквизитыБыстрогоОтбораНоменклатуры.Ссылка = &ВидНоменклатуры");
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", Номенклатура.ВидНоменклатуры);
	
	КоличествоПолей = 0;
	
	ТекстЗапроса = "ВЫБРАТЬ";
	
	РеквизитыБыстрогоОтбораНоменклатуры = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ Из РеквизитыБыстрогоОтбораНоменклатуры Цикл
		
		Если СтрокаТЧ.ЭтоДопРеквизит Тогда
			ДополнительныеРеквизиты.Добавить(СтрокаТЧ.Свойство);
		Иначе
			
			КоличествоПолей = КоличествоПолей + 1;
			
			Если КоличествоПолей = 1 Тогда
				ТекстЗапроса = ТекстЗапроса + " " + "Т." + СтрокаТЧ.ИмяРеквизита + " " + "КАК " + СтрокаТЧ.ИмяРеквизита;
			Иначе
				ТекстЗапроса = ТекстЗапроса + ", " + "Т." + СтрокаТЧ.ИмяРеквизита + " " + "КАК " + СтрокаТЧ.ИмяРеквизита;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоПолей > 0 Тогда
		
		ТекстЗапроса = ТекстЗапроса +" " + "Из Справочник.Номенклатура КАК Т ГДЕ Т.Ссылка = &Номенклатура";
		
		Запрос = Новый Запрос(
		ТекстЗапроса +
		";
		|ВЫБРАТЬ
		|	НоменклатураДополнительныеРеквизиты.Свойство КАК Свойство,
		|	НоменклатураДополнительныеРеквизиты.Значение КАК Значение
		|ИЗ
		|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|ГДЕ
		|	НоменклатураДополнительныеРеквизиты.Ссылка = &Номенклатура
		|	И НоменклатураДополнительныеРеквизиты.Свойство В (&ДополнительныеРеквизиты)");
		
		Запрос.УстановитьПараметр("Номенклатура",            Номенклатура);
		Запрос.УстановитьПараметр("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
		
		Результат = Запрос.ВыполнитьПакет();
		
		Выборка = Результат[0].Выбрать(); // обход реквизитов номенклатуры
		
		Пока Выборка.Следующий() Цикл
			
			Для Каждого Колонка Из Результат[0].Колонки Цикл
				
				НоваяСтрока = Новый Структура("ИмяРеквизита, Значение, Представление");
				
				НоваяСтрока.ИмяРеквизита = Колонка.Имя;
				НоваяСтрока.Значение     = Выборка[Колонка.Имя];
				
				Реквизит = Метаданные.Справочники.Номенклатура.Реквизиты.Найти(Колонка.Имя);
				
				НоваяСтрока.Представление = Реквизит.Синоним;
				
				Свойства.Добавить(НоваяСтрока); // в выходной массив добавляется имя и значение реквизита элемента номенклатуры
				
			КонецЦикла;
			
		КонецЦикла;
		
		Выборка = Результат[1].Выбрать(); // обход дополнительных реквизитов номенклатуры
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = Новый Структура("Свойство, Значение, Представление");
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			НоваяСтрока.Представление = Строка(Выборка.Свойство);
			
			Свойства.Добавить(НоваяСтрока); // в выходной массив добавляется имя и значение доп.реквизита вида номенклатуры
			
		КонецЦикла;
		
	Иначе
		
		// В том случае, если реквизиты вида номенклатуры не включены в панель быстрого отбора,
		// то в выходной массив добавляются только значения доп.реквизитов вида номенклатуры.
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НоменклатураДополнительныеРеквизиты.Свойство        КАК Свойство,
		|	НоменклатураДополнительныеРеквизиты.Значение        КАК Значение
		|ИЗ
		|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|ГДЕ
		|	НоменклатураДополнительныеРеквизиты.Ссылка = &Номенклатура
		|	И НоменклатураДополнительныеРеквизиты.Свойство В (&ДополнительныеРеквизиты)");
		
		Запрос.УстановитьПараметр("Номенклатура",            Номенклатура);
		Запрос.УстановитьПараметр("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = Новый Структура("Свойство, Значение, Представление");
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			НоваяСтрока.Представление = Строка(Выборка.Свойство);
			
			Свойства.Добавить(НоваяСтрока);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Свойства;
	
КонецФункции

// Устанавливает отбор на список номенклатуры по аналогичным свойствам вида номенклатуры переданного товара.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора,
//	Номенклатура - СправочникСсылка.Номенклатура - товар по значениям свойств которого необходимо установить отбор списка номенклатуры.
//
Процедура ОтфильтроватьПоАналогичнымСвойствам(Форма, Номенклатура) Экспорт
	
	// Включить использование фильтров.
	Форма.ИспользоватьФильтры = Истина;
	пкПодборТехникиКлиентСервер.УстановитьДоступностьЭлементовФильтров(Форма);
	
	// Установить вариант навигации - "по свойствам".
	Если Не (Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам
		Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам
		Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам) Тогда
		Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам;
	КонецЕсли;
	
	УстановитьСтраницуВариантаНавигации(Форма);
	
	// Установить вид номенклатуры и заполнить дерево отборов.
	Форма.ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидНоменклатуры");
	УстановитьОтборПоВидуНоменклатуры(Форма);
	ЗаполнитьДеревоОтборовНоменклатуры(Форма);
	
	// Получить список свойств и значений вида номенклатуры текущего товара..
	СвойстваДляПодбораТоваровСАналогичнымиСвойствами = СвойстваДляПодбораТоваровСАналогичнымиСвойствами(Номенклатура);
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	
	// Пройти по полученному списку свойств, проставить флажки использования.
	Для Каждого ДополнительноеСвойство Из СвойстваДляПодбораТоваровСАналогичнымиСвойствами Цикл
		
		Для Каждого Свойство Из ДеревоОтборов.Строки Цикл
			
				Для Каждого ЗначениеСвойства Из Свойство.Строки Цикл
				
				Если Не (ДополнительноеСвойство.Представление = Свойство.Представление) Тогда
					Продолжить;
				КонецЕсли;
				
				// Включить использование свойства в отборе, если значение дерева отбора аналогично 
				// значению списка свойств вида текущей номенклатуры.
				ЗначениеСвойства.Отбор = (ЗначениеСвойства.ЗначениеОтбора = ДополнительноеСвойство.Значение);
				
				Если ЗначениеСвойства.Отбор Тогда
					Свойство.Отбор = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Форма.ЗначениеВРеквизитФормы(ДеревоОтборов, "ДеревоОтборов");
	
	// Флажки расставлены, теперь применить отборы к списку номенклатуры.
	УстановитьОтборПоСвойствамВидаНоменклатуры(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Возвращает структуру параметров для создания новой номенклатуры из форм подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Функция ПараметрыСозданияНовойНоменклатуры(Форма) Экспорт
	
	ПараметрыФормы = Новый Структура("Родитель, ВидНоменклатуры, АдресТаблицыПараметров, АдресТаблицыСопоставления");
	
	Если Форма.ИспользоватьФильтры Тогда
		
		Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоИерархии Тогда
			
			ПараметрыФормы.Родитель = ?(ЗначениеЗаполнено(Форма.ТекущаяИерархияНоменклатуры), Форма.ТекущаяИерархияНоменклатуры, Справочники.Номенклатура.ПустаяСсылка());
			
		ИначеЕсли (Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам
					Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам)Тогда
			
			Если ЗначениеЗаполнено(Форма.ВидНоменклатуры) Тогда
				ПараметрыФормы.ВидНоменклатуры = Форма.ВидНоменклатуры;
				ПараметрыФормы.АдресТаблицыПараметров = АдресТаблицыПараметровДереваОтборов(Форма);
				ПараметрыФормы.АдресТаблицыСопоставления = АдресТаблицыСопоставленияДереваОтборов(Форма)
			КонецЕсли;
			
		ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам Тогда
			Если ЗначениеЗаполнено(Форма.ВидНоменклатуры) Тогда
				ПараметрыФормы.ВидНоменклатуры = Форма.ВидНоменклатуры;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Устанавливает активным элементом на форме список номенклатуры
// или список характеристик. Используется в случае изменения значений фильтров.
// В этом случае теряется фокус, установленный на списке, и при попытке выбора
// товара активизируется другой элемент.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Процедура УстановитьАктивныйСписокНаФорме(Форма)
	
	ИмяСпискаНоменклатуры = пкПодборТехникиКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма);
	
	ТекущийЭлемент = Форма.Элементы[ИмяСпискаНоменклатуры];
	
	Форма.ТекущийЭлемент = ТекущийЭлемент;
	
КонецПроцедуры

// Устанавливает градации качества в списке
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Процедура УстановитьУсловноеОформлениеДинамическихСписков(Форма, ЭтоФормаПодбораВДокументыЗакупки = Ложь) Экспорт
	
	ЭтоПартнер = ПраваПользователяПовтИсп.ЭтоПартнер();
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;	
	
	Если Не ЭтоПартнер Тогда
	
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискНоменклатураВНаличииОстаток.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискНоменклатураВНаличииОстаток.Имя);
				
		ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		                  
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатура.ВНаличииОстаток");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 0;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатура.ТипНоменклатуры");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Работа);
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Набор);
		ОтборЭлемента.ПравоеЗначение = СписокЗначений;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<нет>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	КонецЕсли;
	
	//
	
	//Если Не ЭтоПартнер Тогда
	//
	//	Элемент = УсловноеОформление.Элементы.Добавить();
	//	
	//	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	//	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискНоменклатураДоступно.Имя);
	//	
	//	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	//	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискНоменклатураДоступно.Имя);
	//			
	//	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	//	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	//	                  
	//	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатура.Доступно");
	//	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//	ОтборЭлемента.ПравоеЗначение = 0;
	//	
	//	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатура.ТипНоменклатуры");
	//	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	//	СписокЗначений = Новый СписокЗначений;
	//	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	//	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
	//	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Набор);
	//	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	//	
	//	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<нет>'"));
	//	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	//
	//КонецЕсли;
	//
	////
	//
	//Если Не ЭтоПартнер Тогда
	//
	//	Элемент = УсловноеОформление.Элементы.Добавить();
	//	
	//	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	//	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискНоменклатураВНаличииОстаток.Имя);
	//	
	//	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	//	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискНоменклатураВНаличииОстаток.Имя);
	//	
	//	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	//	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискНоменклатураДоступно.Имя);
	//	
	//	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	//	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискНоменклатураДоступно.Имя);
	//
	//	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ЧДЦ=3");
	//	Элемент.Оформление.УстановитьЗначениеПараметра("ВыделятьОтрицательные", Истина);
	//
	//КонецЕсли;
		
КонецПроцедуры	

#КонецОбласти

#Область ПроцедурыИФункцииЗаполненияФормПоПараметрам

// Обрабатывает переданное в параметрах формы значение для отбора списка номенклатуры по типу номенклатуры.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Процедура УстановитьОтборПоТипуНоменклатурыПоПараметрам(Форма)
				
    Если Форма.Параметры.ОтборПоТипуНоменклатуры = Неопределено Тогда
        Возврат;
    Иначе
        ОтборПоТипуНоменклатурыИзПараметров = Форма.Параметры.ОтборПоТипуНоменклатуры;
    КонецЕсли;
			
	ОтборПоТипуНоменклатуры = Форма.ОтборПоТипуНоменклатуры;
		
	// Параметр <ОтборПоТипуНоменклатуры> произвольного типа. Может быть передан как отдельный тип
	// номенклатуры, так и массив типов.
	Если ТипЗнч(ОтборПоТипуНоменклатурыИзПараметров) = Тип("ПеречислениеСсылка.ТипыНоменклатуры") Тогда
		
		ОтборПоТипуНоменклатуры.Добавить(ОтборПоТипуНоменклатурыИзПараметров);
		
	ИначеЕсли ТипЗнч(ОтборПоТипуНоменклатурыИзПараметров) = Тип("ФиксированныйМассив") Тогда
		
		Для Каждого Значение Из ОтборПоТипуНоменклатурыИзПараметров Цикл
			ОтборПоТипуНоменклатуры.Добавить(Значение);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ОтборПоТипуНоменклатурыИзПараметров) = Тип("Массив") Тогда
		
		ОтборПоТипуНоменклатуры.ЗагрузитьЗначения(ОтборПоТипуНоменклатурыИзПараметров);
		
	ИначеЕсли ТипЗнч(ОтборПоТипуНоменклатурыИзПараметров) = Тип("СписокЗначений") Тогда
		
		ОтборПоТипуНоменклатуры.ЗагрузитьЗначения(ОтборПоТипуНоменклатурыИзПараметров.ВыгрузитьЗначения());
		
	Иначе
		Возврат;
	КонецЕсли;
		
    // Установить отбор по типам номенклатуры для списка номенклатуры.
    ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
    Форма.СписокНоменклатура, "ТипНоменклатуры", ОтборПоТипуНоменклатуры, 
    ВидСравненияКомпоновкиДанных.ВСписке, "ОтборПоТипуНоменклатуры", (ОтборПоТипуНоменклатуры.Количество() > 0));
		
КонецПроцедуры

// Обрабатывает переданное в параметрах формы значение для отбора списка номенклатуры по виду номенклатуры.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Процедура УстановитьОтборПоВидНоменклатурыПоПараметрам(Форма) Экспорт

	ОтборПоВидуНоменклатуры = Неопределено;
	Форма.Параметры.Отбор.Свойство("ВидНоменклатуры", ОтборПоВидуНоменклатуры);
	Форма.Параметры.Отбор.Удалить("ВидНоменклатуры");
	
	Если ОтборПоВидуНоменклатуры = Неопределено Или Не ЗначениеЗаполнено(ОтборПоВидуНоменклатуры) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ИспользоватьФильтры = Истина; 
	Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам;
	Форма.ВидНоменклатуры = ОтборПоВидуНоменклатуры;

	ЗаполнитьДеревоОтборовНоменклатуры(Форма);
	ЗаполнитьДеревоОтбораИзСохраненныхПараметров(Форма);
	УстановитьСтраницуВариантаНавигации(Форма);
	ПриИзмененииИспользованияФильтров(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеИнформацииОЦенеОстаткахТоваровИзФормПодборов

// Переносит данные установленных значений отборов из дерева отборов по
// свойствам вида номенклатуры в таблицу значений и помещает ее во временное
// хранилище.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
// Возвращаемое значение:
//	Строка. Адрес таблицы значений во временном хранилище.
//
Функция АдресТаблицыПараметровДереваОтборов(Форма) Экспорт
	
	УникальныйИдентификаторФормы = Форма.УникальныйИдентификатор;
	ДеревоЗначенийОтборов        = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	
	АдресТаблицы = Неопределено;
	
	ТаблицаПараметров = Новый ТаблицаЗначений;
	
	ТаблицаПараметров.Колонки.Добавить("ИмяРеквизита");
	ТаблицаПараметров.Колонки.Добавить("ЗначениеОтбора");
	ТаблицаПараметров.Колонки.Добавить("ЭтоДопРеквизит");
	
	ПараметрыОтбора = Новый Структура("Отбор", Истина);
	
	СтрокиДереваОтборов = ДеревоЗначенийОтборов.Строки;
	
	НайденныеСтроки = СтрокиДереваОтборов.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаДереваОтборов Из НайденныеСтроки Цикл
		
		Если ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Строка")
			Или ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Булево") Тогда
			
			СтрокаТаблицы = ТаблицаПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДереваОтборов);
			
		ИначеЕсли Не СтрокаДереваОтборов.ОтборДоступен Тогда
			
			ПодчиненныеСтроки = СтрокаДереваОтборов.Строки.НайтиСтроки(ПараметрыОтбора);
			
			Если ПодчиненныеСтроки.Количество() = 1 Тогда
				
				СтрокаЗначенияОтбора = ПодчиненныеСтроки[0];
				СтрокаТаблицы = ТаблицаПараметров.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаЗначенияОтбора);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаПараметров.Количество() > 0 Тогда
		АдресТаблицы = ПоместитьВоВременноеХранилище(ТаблицаПараметров, УникальныйИдентификаторФормы);
	КонецЕсли;
	
	Возврат АдресТаблицы;
	
КонецФункции

// Переносит данные установленных значений отборов из дерева отборов по
// свойствам вида номенклатуры в таблицу значений и помещает ее во временное хранилище.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
// Возвращаемое значение:
//	Строка. Адрес таблицы значений во временном хранилище.
//
Функция АдресТаблицыСопоставленияДереваОтборов(Форма) Экспорт
	
	УникальныйИдентификаторФормы = Форма.УникальныйИдентификатор;
	ДеревоЗначенийОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	
	АдресТаблицы = Неопределено;
	
	ТаблицаПараметров = Новый ТаблицаЗначений;
	
	ТаблицаПараметров.Колонки.Добавить("ИмяРеквизита");
	ТаблицаПараметров.Колонки.Добавить("ЗначениеОтбора");
	ТаблицаПараметров.Колонки.Добавить("ЭтоДопРеквизит");
	ТаблицаПараметров.Колонки.Добавить("ИнтервалОт");
	ТаблицаПараметров.Колонки.Добавить("ИнтервалДо");
	ТаблицаПараметров.Колонки.Добавить("Интервал");
	
	ПараметрыОтбора = Новый Структура("Отбор", Истина);
	
	СтрокиДереваОтборов = ДеревоЗначенийОтборов.Строки;
	
	НайденныеСтроки = СтрокиДереваОтборов.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаДереваОтборов Из НайденныеСтроки Цикл
		
		Если СтрокаДереваОтборов.ФиксированноеЗначение Тогда
			
			СтрокаТаблицы = ТаблицаПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДереваОтборов);
			
			Если СтрокаДереваОтборов.ИнтервалОт <> Неопределено Тогда
				СтрокаТаблицы.Интервал = Истина;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Строка")
			Или ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Булево") Тогда
			
			СтрокаТаблицы = ТаблицаПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДереваОтборов);
			
			СтрокаТаблицы.Интервал = Ложь;
			
		ИначеЕсли Не СтрокаДереваОтборов.ОтборДоступен Тогда
			
			ПодчиненныеСтроки = СтрокаДереваОтборов.Строки.НайтиСтроки(ПараметрыОтбора);
			
			Для Каждого СтрокаЗначенияОтбора Из ПодчиненныеСтроки Цикл
				
				СтрокаТаблицы = ТаблицаПараметров.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаЗначенияОтбора);
				
				СтрокаТаблицы.Интервал = Ложь;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаПараметров.Количество() > 0 Тогда
		АдресТаблицы = ПоместитьВоВременноеХранилище(ТаблицаПараметров, УникальныйИдентификаторФормы);
	КонецЕсли;
	
	Возврат АдресТаблицы;
	
КонецФункции

#КонецОбласти

#Область ПоискНаФормахПодборов

// Выполняет поиск номенклатуры по строке поиска.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма выбора, форма подбора.
//
// Возвращаемое значение:
//	Булево, Истина - удалось выполнить поиск, элементы найдены, Ложь - не удалось выполнить поиск.
//
Функция ВыполнитьПоискНоменклатуры(Форма) Экспорт
	
	ПоискВыполнен = Ложь;
	
	РезультатПоиска = СтруктураРезультатовПоиска();
	СтрокаПоиска = Форма.СтрокаПоискаНоменклатура;
	
	Форма.ПоискНоменклатурыНеУдачный = Ложь;
	Форма.КодОшибкиПоиска = "";
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Если Не Форма.ИспользоватьПолнотекстовыйПоиск Или Форма.НайтиНоменклатуруПоТочномуСоответствию Тогда
			ВыполнитьНеПолнотекстовыйПоискНоменклатуры(Форма, РезультатПоиска);
		Иначе
			ВыполнитьПолнотекстовыйПоискНоменклатуры(Форма, РезультатПоиска);
		КонецЕсли;
		ПоискВыполнен = Истина;
	КонецЕсли;
	
	Форма.ПоискНоменклатурыНеУдачный = (ПоискВыполнен И ЗначениеЗаполнено(РезультатПоиска.КодОшибки));
	Форма.КодОшибкиПоиска = РезультатПоиска.КодОшибки;
	
	ПодборТоваровКлиентСервер.УстановитьОтборСпискаПоСтрокеПоиска(
		ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура).Элементы,
		РезультатПоиска.Номенклатура, 
		ПоискВыполнен);
		
	Форма.ЕстьФильтрПоПоискуНоменклатуры = ПоискВыполнен;
	
	Если Не ПодборТоваровКлиентСервер.ЭтоФормаПодбораТоваровПоКатегориям(Форма) Тогда
		ПодборТоваровКлиентСервер.УстановитьОтборПоДиапазонуЦен(Форма);
	КонецЕсли;
	
	Возврат ПоискВыполнен;
	
КонецФункции

// Выполняет полнотекстовый поиск номенклатуры по строке поиска введенной в форме.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма выбора. форма подбора,
//	РезультатПоиска - Неопределено - переменная, в которую записывается результат поиска.
//
Процедура ВыполнитьПолнотекстовыйПоискНоменклатуры(Форма, РезультатПоиска)
	
	СтрокаПоиска = Форма.СтрокаПоискаНоменклатура;
	РезультатПоиска = СтруктураРезультатовПоиска();
	МаксимальноеКоличествоЭлементовПоиска = МаксимальноеКоличествоЭлементовПоиска();
	
	// Создать список поиска.
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(СтрокаПоиска);
	СписокПоиска.ПолучатьОписание = Ложь;
	СписокПоиска.ОбластьПоиска = ОбластиПоискаНоменклатуры(Форма);
	
	Попытка
		СписокПоиска.ПерваяЧасть();
	Исключение
		РезультатПоиска.КодОшибки = "ОшибкаПоиска";
		Возврат;
	КонецПопытки;
	
	Если СписокПоиска.СлишкомМногоРезультатов() Тогда
		РезультатПоиска.КодОшибки = "СлишкомМногоРезультатов";
		Возврат;
	КонецЕсли;
	
	КоличествоРезультатов = СписокПоиска.ПолноеКоличество();
	
	Если КоличествоРезультатов = 0 Тогда
		РезультатПоиска.КодОшибки = "НичегоНеНайдено";
		Возврат;
	КонецЕсли;
	
	Если КоличествоРезультатов > МаксимальноеКоличествоЭлементовПоиска Тогда
		РезультатПоиска.КодОшибки = "СлишкомМногоРезультатов";
		Возврат;
	КонецЕсли;
	
	// Пройти по списку поиска.
	РазмерПорции = 20;
	НачальнаяПозиция = 0;
	ВГраница = ?(КоличествоРезультатов > РазмерПорции, РазмерПорции, КоличествоРезультатов) - 1;
	
	ЕстьСледующаяПорция = Истина;
	
	Пока ЕстьСледующаяПорция Цикл
		Для А = 0 По ВГраница Цикл
			ЭлементСписка = СписокПоиска.Получить(А);
			ОбработатьЭлементСпискаПоиска(ЭлементСписка, РезультатПоиска);
		КонецЦикла;
		
		НачальнаяПозиция = НачальнаяПозиция + РазмерПорции;
		ЕстьСледующаяПорция = (НачальнаяПозиция < КоличествоРезультатов - 1);
		
		Если ЕстьСледующаяПорция Тогда
			ВГраница = ?(КоличествоРезультатов > (НачальнаяПозиция + РазмерПорции), РазмерПорции, КоличествоРезультатов - НачальнаяПозиция) - 1;
			СписокПоиска.СледующаяЧасть();
		КонецЕсли;
	КонецЦикла;
	
	ДополнитьРезультатыПоискаНоменклатуры(РезультатПоиска);
	
КонецПроцедуры

// Выполняет неполнотекстовый поиск номенклатуры по строке поиска.
//
// Параметры:
//	Форма - УправляемаяФорма - форма из которой была вызвана функция поиска,
//	РезультатПоиска - Неопределено - переменная, в которую записывается структура, результат поиска.
//
Процедура ВыполнитьНеПолнотекстовыйПоискНоменклатуры(Форма, РезультатПоиска)
	
	РезультатПоиска = СтруктураРезультатовПоиска();
	СписокПоиска = РезультатПоискаНоменклатуры(Форма);
	УстановитьКодОшибкиРасширенногоПоиска(СписокПоиска, РезультатПоиска);
	ОбработатьСписокПоиска(СписокПоиска, РезультатПоиска);
	ДополнитьРезультатыПоискаНоменклатуры(РезультатПоиска);
	
КонецПроцедуры

// Проверяет принадлежность элемента списка поиска, в зависиимости
// от принадлежности элемента к типу метаданных, включает значение элемента
// в нужный раздел результата поиска.
//
// Параметры:
//	ЭлементСписка - ЭлементСпискаЗначений - элемент списка поиска,
//	РезультатПоиска - Структура - структура результатов поиска.
//
Процедура ОбработатьЭлементСпискаПоиска(ЭлементСписка, РезультатПоиска)
	
	МетаданныеЭлемента = ЭлементСписка.Метаданные;
	ЗначениеЭлемента = ЭлементСписка.Значение;
	
	Если ТипЗнч(МетаданныеЭлемента) = Тип("ОбъектМетаданных") Тогда
		
		Если МетаданныеЭлемента = Метаданные.Справочники.Номенклатура Тогда
			РезультатПоиска.Номенклатура.Добавить(ЗначениеЭлемента);
		ИначеЕсли МетаданныеЭлемента = Метаданные.Справочники.ХарактеристикиНоменклатуры Тогда
			РезультатПоиска.ХарактеристикиНоменклатуры.Добавить(ЗначениеЭлемента);
		ИначеЕсли МетаданныеЭлемента = Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры Тогда
			РезультатПоиска.ШтрихкодыНоменклатуры.Добавить(ЗначениеЭлемента.Штрихкод);
		ИначеЕсли МетаданныеЭлемента = Метаданные.Справочники.НоменклатураПоставщиков Тогда
			РезультатПоиска.НоменклатураПоставщиков.Добавить(ЗначениеЭлемента);
		ИначеЕсли МетаданныеЭлемента = Метаданные.Справочники.ОбщероссийскийКлассификаторПродукции Тогда
			РезультатПоиска.ОКП.Добавить(ЗначениеЭлемента);
		Иначе
			ВызватьИсключение НСтр("ru = 'Неизвестная ошибка'");
		КонецЕсли;
		
	Иначе
		
		Если МетаданныеЭлемента = "Номенклатура" Тогда
			РезультатПоиска.Номенклатура.Добавить(ЗначениеЭлемента);
		ИначеЕсли МетаданныеЭлемента = "ХарактеристикиНоменклатуры" Тогда
			РезультатПоиска.ХарактеристикиНоменклатуры.Добавить(ЗначениеЭлемента);
		ИначеЕсли МетаданныеЭлемента = "ШтрихкодыНоменклатуры" Тогда
			РезультатПоиска.ШтрихкодыНоменклатуры.Добавить(ЗначениеЭлемента);
		ИначеЕсли МетаданныеЭлемента = "НоменклатураПоставщиков" Тогда
			РезультатПоиска.НоменклатураПоставщиков.Добавить(ЗначениеЭлемента);
		ИначеЕсли МетаданныеЭлемента = "ОбщероссийскийКлассификаторПродукции" Тогда
			РезультатПоиска.ОКП.Добавить(ЗначениеЭлемента);
		Иначе
			ВызватьИсключение НСтр("ru = 'Неизвестная ошибка'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает результат поиска номенклатуры.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора, форма списка.
//
// Возвращаемое значение:
//	Структура - результат поиска товаров.
//
Функция РезультатПоискаНоменклатуры(Форма)
	
	ТочноеСоответствие = Форма.НайтиНоменклатуруПоТочномуСоответствию;
	
	СтрокаПоиска = ФорматироватьСтрокуПоиска(Форма.СтрокаПоискаНоменклатура, ТочноеСоответствие);
	ОбластиПоиска = ОбластиПоискаНоменклатуры(Форма);
	МаксимальноеКоличествоЭлементовПоиска = МаксимальноеКоличествоЭлементовПоиска();
	РезультатПоиска = СтруктураРезультатаПоиска();
	
	// Сформировать текст запроса по областям поиска.
	Запрос = Новый Запрос;
	
	РазделительВТекстеЗапросов = "
	|;
	|";
	
	Для каждого ОбластьПоиска Из ОбластиПоиска Цикл
		ТекстЗапросаПоискаПоОбласти = ТекстЗапросаПоискаПоОбласти(ОбластьПоиска, ТочноеСоответствие);
		
		Запрос.Текст = Запрос.Текст + ?(ЗначениеЗаполнено(Запрос.Текст), РазделительВТекстеЗапросов, "") + ТекстЗапросаПоискаПоОбласти;
		
		Если ОбластьПоиска = Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры Тогда
			Запрос.УстановитьПараметр("СтрокаПоискаПоШтрихкоду", ИсходнаяСтрокаПоиска(СтрокаПоиска, ТочноеСоответствие));
		КонецЕсли;
		
		Если ОбластьПоиска = Метаданные.Справочники.НоменклатураПоставщиков Тогда
			Запрос.УстановитьПараметр("Партнер", Форма.ПоставщикПартнер);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("СтрокаПоиска", СтрокаПоиска);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	// Добавить найденные элементы в список поиска. Как только количество элементов в списке
	// превысит максимальное количество найденных элементов, прервать цикл обхода.
	Для каждого РезультатЗапроса Из РезультатыЗапроса Цикл
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЭлементПоиска = Новый Структура("Значение, Метаданные");
			ЗаполнитьЗначенияСвойств(ЭлементПоиска, Выборка);
			
			РезультатПоиска.Элементы.Добавить(ЭлементПоиска);
			
			Если РезультатПоиска.Элементы.Количество() > МаксимальноеКоличествоЭлементовПоиска Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если РезультатПоиска.Элементы.Количество() > МаксимальноеКоличествоЭлементовПоиска Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	РезультатПоиска.ПолноеКоличество = РезультатПоиска.Элементы.Количество();
	РезультатПоиска.СлишкомМногоРезультатов = (РезультатПоиска.ПолноеКоличество > МаксимальноеКоличествоЭлементовПоиска);
	
	Возврат РезультатПоиска;
	
КонецФункции

// Возвращает массив областей поиска товаров.
//
// Параметры:
//	Форма - УправляемаяФорма - форма из которой была вызвана функция поиска.
//
// Возвращаемое значение:
//	Массив. Массив метаданных, областей поиска товаров.
//
Функция ОбластиПоискаНоменклатуры(Форма)
	
	// В зависимости от того, из какой формы выполняется вызов функции поиска,
	// список областей поиска будет различаться.
	ОбластиПоиска = Новый Массив;
	
	ОбластиПоиска.Добавить(Метаданные.Справочники.Номенклатура);
	ОбластиПоиска.Добавить(Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры);
		
	Если ПолучитьФункциональнуюОпцию("ИспользованиеКлассификаторовНоменклатуры") Тогда
		ОбластиПоиска.Добавить(Метаданные.Справочники.ОбщероссийскийКлассификаторПродукции);
	КонецЕсли;
	
	Возврат ОбластиПоиска;
	
КонецФункции

// Возвращает структуру результатов поиска.
// Используется при неполнотекстовом поиске товаров.
//
Функция СтруктураРезультатовПоиска()
	
	РезультатПоиска = Новый Структура();
	
	РезультатПоиска.Вставить("КодОшибки", "");
	РезультатПоиска.Вставить("Номенклатура", Новый Массив);
	РезультатПоиска.Вставить("ХарактеристикиНоменклатуры", Новый Массив);
	РезультатПоиска.Вставить("ШтрихкодыНоменклатуры", Новый Массив);
	РезультатПоиска.Вставить("НоменклатураПоставщиков", Новый Массив);
	РезультатПоиска.Вставить("ОКП", Новый Массив);
	
	Возврат РезультатПоиска;
	
КонецФункции

// Возвращает структуру списка поиска.
// Используется при неполнотекстовом поиске товаров.
//
Функция СтруктураРезультатаПоиска()
	
	СписокПоиска = Новый Структура;
	
	СписокПоиска.Вставить("Элементы", Новый Массив);
	СписокПоиска.Вставить("ПолноеКоличество", 0);
	СписокПоиска.Вставить("СлишкомМногоРезультатов", Ложь);
	
	Возврат СписокПоиска;
	
КонецФункции

// Возвращает максимальное количество элементов которое может быть обработано
// при выполнении полнотекстового или неполнотекствого поиска. Если количество найденных
// элементов превышает возвращаемое этой функцией значение, то считается что условие поиска задано
// размыто и предлагается уточнить его.
//
Функция МаксимальноеКоличествоЭлементовПоиска()
	
	Возврат 500;
	
КонецФункции

// Выполняет дополнительную обработку результатов поиска:
// если выполнялся поиск по характеристикам, штрихкодам или номенклатуре
// поставщиков, то процедура выполняет дополнительный запроса для поиска
// номенклатуры - владельцев найденных элементов. Найденная номенклатура
// включается в результат поиска в раздел "Номенклатура".
//
// Параметры:
//	РезультатПоиска - Структура - структура результатов поиска.
//
Процедура ДополнитьРезультатыПоискаНоменклатуры(РезультатПоиска)
	
	// Если найдены характеристики номенклатуры, номенклатура поставщиков или штрихкоды номенклатуры,
	// то для них нужно найти владельцев и добавить их в список номенклатуры.
	Запрос = Новый Запрос;
	Запрос.Текст = "";
	
	Если РезультатПоиска.ХарактеристикиНоменклатуры.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + ?(ЗначениеЗаполнено(Запрос.Текст), " ОБЪЕДИНИТЬ ВСЕ ", "") + 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО (ВЫБОР
		|				КОГДА Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|					ТОГДА Номенклатура.Ссылка
		|				КОГДА Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
		|					ТОГДА Номенклатура.ВладелецХарактеристик
		|				КОГДА Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|					ТОГДА Номенклатура.ВидНоменклатуры
		|				ИНАЧЕ НЕОПРЕДЕЛЕНО
		|			КОНЕЦ = ХарактеристикиНоменклатуры.Владелец)
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Ссылка В(&СписокХарактеристики)";
		
		Запрос.УстановитьПараметр("СписокХарактеристики", РезультатПоиска.ХарактеристикиНоменклатуры);
	КонецЕсли;
	
	Если РезультатПоиска.ШтрихкодыНоменклатуры.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + ?(ЗначениеЗаполнено(Запрос.Текст), " ОБЪЕДИНИТЬ ВСЕ ", "") + 
		"ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Штрихкод В(&СписокШтрихкодов)";
		
		Запрос.УстановитьПараметр("СписокШтрихкодов", РезультатПоиска.ШтрихкодыНоменклатуры);
	КонецЕсли;
	
	Если РезультатПоиска.НоменклатураПоставщиков.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + ?(ЗначениеЗаполнено(Запрос.Текст), " ОБЪЕДИНИТЬ ВСЕ ", "") + 
		"ВЫБРАТЬ
		|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура
		|ИЗ
		|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|ГДЕ
		|	НоменклатураПоставщиков.Ссылка В(&СписокНоменклатурыПоставщиков)";
		
		Запрос.УстановитьПараметр("СписокНоменклатурыПоставщиков", РезультатПоиска.НоменклатураПоставщиков);
	КонецЕсли;
	
	Если РезультатПоиска.ОКП.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + ?(ЗначениеЗаполнено(Запрос.Текст), " ОБЪЕДИНИТЬ ВСЕ ", "") + 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбщероссийскийКлассификаторПродукции КАК ОбщероссийскийКлассификаторПродукции
		|		ПО Номенклатура.КодОКП = ОбщероссийскийКлассификаторПродукции.Ссылка
		|ГДЕ
		|	ОбщероссийскийКлассификаторПродукции.Ссылка В(&СписокКодовОКП)";
		
		Запрос.УстановитьПараметр("СписокКодовОКП", РезультатПоиска.ОКП);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запрос.Текст) Тогда
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				РезультатПоиска.Номенклатура.Добавить(Выборка.Номенклатура);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текст запроса необходимый для выполнения поиска по области.
//
// Параметры:
//	ОбластьПоиска      - ОбъектМетаданных - идентификатор области поиска,
//	ТочноеСоответствие - Булево           - признак выполнения поиска по точному соответствию.
//
Функция ТекстЗапросаПоискаПоОбласти(ОбластьПоиска, ТочноеСоответствие)
	
	МаксКоличество = МаксимальноеКоличествоЭлементовПоиска() + 1;
	ТекстЗапроса = "";
	
	Если ОбластьПоиска = Метаданные.Справочники.Номенклатура Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ %МаксКоличество%
		|	СправочникНоменклатура.Ссылка КАК Значение,
		|	""Номенклатура"" КАК Метаданные
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|ГДЕ
		|	НЕ СправочникНоменклатура.ЭтоГруппа И
		|	(СправочникНоменклатура.Наименование %ВидСравнения% &СтрокаПоиска
		|			Или СправочникНоменклатура.НаименованиеПолное %ВидСравнения% &СтрокаПоиска
		|			Или СправочникНоменклатура.КодДляПоиска %ВидСравнения% &СтрокаПоиска
		|			Или СправочникНоменклатура.Артикул %ВидСравнения% &СтрокаПоиска)";
		
	КонецЕсли;
	
	Если ОбластьПоиска = Метаданные.Справочники.НоменклатураПоставщиков Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ %МаксКоличество%
		|	НоменклатураПоставщиков.Ссылка КАК Значение,
		|	""НоменклатураПоставщиков"" КАК Метаданные
		|ИЗ
		|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|ГДЕ
		|	НЕ НоменклатураПоставщиков.ЭтоГруппа И
		|	(НоменклатураПоставщиков.Артикул %ВидСравнения% &СтрокаПоиска
		|		Или НоменклатураПоставщиков.Наименование %ВидСравнения% &СтрокаПоиска)
		|	И НоменклатураПоставщиков.Владелец = &Партнер";
		
	КонецЕсли;
	
	Если ОбластьПоиска = Метаданные.Справочники.ХарактеристикиНоменклатуры Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ %МаксКоличество%
		|	ХарактеристикиНоменклатуры.Ссылка КАК Значение,
		|	""ХарактеристикиНоменклатуры"" КАК Метаданные
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Наименование %ВидСравнения% &СтрокаПоиска
		|	Или ХарактеристикиНоменклатуры.НаименованиеПолное %ВидСравнения% &СтрокаПоиска";
		
	КонецЕсли;
	
	Если ОбластьПоиска = Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ %МаксКоличество%
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Значение,
		|	""ШтрихкодыНоменклатуры"" КАК Метаданные
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Штрихкод = &СтрокаПоискаПоШтрихкоду";
		
	КонецЕсли;
	
	Если ОбластьПоиска = Метаданные.Справочники.ОбщероссийскийКлассификаторПродукции Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ %МаксКоличество%
		|	ОбщероссийскийКлассификаторПродукции.Ссылка КАК Значение,
		|	""ОбщероссийскийКлассификаторПродукции"" КАК Метаданные
		|ИЗ
		|	Справочник.ОбщероссийскийКлассификаторПродукции КАК ОбщероссийскийКлассификаторПродукции
		|ГДЕ
		|	ОбщероссийскийКлассификаторПродукции.Код %ВидСравнения% &СтрокаПоиска";
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%МаксКоличество%", Формат(МаксКоличество, "ЧЦ=10; ЧГ=0"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВидСравнения%", ?(ТочноеСоответствие, "=", "ПОДОБНО"));
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает исходную строку поиска - которая была введена на форме поиска.
// Используется при неполнотекстовом поиске.
//
// Параметры:
//	СтрокаПоиска - Строка - строка поиска,
//	ТочноеСоответствие - Булево - признак поиска по точному соответствию.
//
// Возвращаемое значение:
//	Строка. Исходная строка поиска.
//
Функция ИсходнаяСтрокаПоиска(Знач СтрокаПоиска, ТочноеСоответствие)
	
	Если ТочноеСоответствие Тогда
		Возврат СтрокаПоиска;
	КонецЕсли;
	
	Возврат Сред(СтрокаПоиска, 2, СтрДлина(СтрокаПоиска) - 2);
	
КонецФункции

// Возвращает фоматированную строку поиска - строку с добавлением
// служебных символов. Используется при неполнотекстовом поиске.
//
// Параметры:
//	СтрокаПоиска - Строка - строка поиска,
//	ТочноеСоответствие - Булево - признак поиска по точному соответствию.
//
// Возвращаемое значение:
//	Строка. Форматированная строка поиска.
//
Функция ФорматироватьСтрокуПоиска(Знач СтрокаПоиска, ТочноеСоответствие)
	
	Если Не ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Возврат СтрокаПоиска;
	КонецЕсли;
	
	Если ТочноеСоответствие Тогда
		Возврат СтрокаПоиска;
	КонецЕсли;
	
	Если Лев(СтрокаПоиска, 1) <> "%" Тогда
		СтрокаПоиска = "%" + СтрокаПоиска;
	КонецЕсли;
	
	Если Прав(СтрокаПоиска, 1) <> "%" Тогда
		СтрокаПоиска = СтрокаПоиска + "%";
	КонецЕсли;
	
	Возврат СтрокаПоиска;
	
КонецФункции

// Устанавливает код ошибки расширенного поиска в структуре результата поиска.
//
// Параметры:
//	СписокПоиска - СписокЗначений - список найденных элементов,
//	РезультатПоиска - Структура - структура результата поиска.
//
Функция УстановитьКодОшибкиРасширенногоПоиска(СписокПоиска, РезультатПоиска)
	
	Если СписокПоиска.СлишкомМногоРезультатов Тогда
		РезультатПоиска.КодОшибки = "СлишкомМногоРезультатов";
	ИначеЕсли СписокПоиска.ПолноеКоличество = 0 Тогда
		РезультатПоиска.КодОшибки = "НичегоНеНайдено";
	ИначеЕсли СписокПоиска.ПолноеКоличество > МаксимальноеКоличествоЭлементовПоиска() Тогда
		РезультатПоиска.КодОшибки = "СлишкомМногоРезультатов";
	Иначе
		РезультатПоиска.КодОшибки = "";
	КонецЕсли;
	
КонецФункции

// Выполняет обрабтку списка результатов поиска. Вызывается функция определения принадлежности
// найденного элемента к разделу метаданных.
//
// Параметры:
//	СписокПоиска - СписокЗначений - список найденных элементов,
//	РезультатПоиска - Структура - структура результата поиска.
//
Процедура ОбработатьСписокПоиска(СписокПоиска, РезультатПоиска)
	
	// Если количество найденных элементов не превышает заданного ограничения,
	// то включить элементы из списка поиска в результаты поиска.
	ВГраница = СписокПоиска.Элементы.ВГраница();
	
	Для А = 0 По ВГраница Цикл
		ЭлементСписка = СписокПоиска.Элементы[А];
		ОбработатьЭлементСпискаПоиска(ЭлементСписка, РезультатПоиска);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти








