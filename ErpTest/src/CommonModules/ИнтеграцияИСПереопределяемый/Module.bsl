// Универсальные механизмы интеграции ИС (ЕГАИС, ГИСМ, ВЕТИС, ...)

#Область ПрограммныйИнтерфейс

// Настраивает подключаемое оборудование в форме,
// устанавливает флаг ИспользоватьПодключаемоеОборудование в форме.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой необходимо настроить подключаемое оборудование,
//  ПрефиксыЭлементовФормы - Строка - строка имен табличных частей, разделенных запятыми, в которых нужно настроить видимость команд.
//
Процедура НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы = "Товары") Экспорт
	
	//++ НЕ ГОСИС
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы);
	
	Если ЗначениеЗаполнено(ПрефиксыЭлементовФормы) Тогда
		МассивПрефиксыЭлементовФормы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПрефиксыЭлементовФормы, ",");
	Иначе
		МассивПрефиксыЭлементовФормы = Новый Массив;
		МассивПрефиксыЭлементовФормы.Добавить(ПрефиксыЭлементовФормы);
	КонецЕсли;
	
	Для Каждого Префикс Из МассивПрефиксыЭлементовФормы Цикл
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			Префикс + "ВыгрузитьДанныеВТСД",
			"Видимость",
			Ложь);
	КонецЦикла;
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

#Область ФормыДокументовОснований

// Получает параметры интеграции с библиотеками ГосИС по входящему объекту
//
Функция ПараметрыИнтеграцииВФормеПоОбъекту(Объект) Экспорт
	
	Результат = ИнтеграцияИС.ПараметрыИнтеграцииВФорме();
	//++ НЕ ГОСИС
	Результат.ИмяЭлементаДляРазмещения = ИнтеграцияИС.ИмяЭлементаДляРазмещения();
	ОбъектМетаданных = Объект.Ссылка.Метаданные();
	// Объекты с гиперссылками на ВетИС
	ОбъектыМетаданныхИнтеграцииВЕТИС = ИнтеграцияВЕТИСПереопределяемый.ОбъектыМетаданныхИнтеграции();
	Если ОбъектыМетаданныхИнтеграцииВЕТИС.Найти(ОбъектМетаданных) <> Неопределено Тогда
		Результат.ИменаПодсистем = ИнтеграцияВЕТИСКлиентСервер.ИмяПодсистемы();
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат Результат;
	
КонецФункции

// Вызывается при формировании текста гиперссылки ГОСИС в форме документа-основания.
// В данной процедуре можно переопределить текст гиперссылки ГОСИС (например ВетИС), формируемый механикой подсистемы.
// Для переопределения текста гиперссылки необходимо поместить этот текст в параметр ТекстНадписи.
//
Процедура ПриОбновленииПоляИнтеграцииВФормеДокументаОснования(Форма, Объект, ТекстНадписи) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ФормированиеПечатныхФорм

// Заполняет структуру параметров возможных получателей печатных форм при отправке по электронной почте.
//
// Параметры:
// 		ПараметрыОтправки - Структура - содержит параметры отправки сформированных печатных форм
// 		ДанныеОбъектовПечати - Массив,Соответствие - данные о печатаемых объектах
// 		КоллекцияПечатныхФорм - ТаблицаЗначений - содержит информацию о формируемых печатных формах.
//
Процедура ЗаполнитьПараметрыОтправки(ПараметрыОтправки, ДанныеОбъектовПечати, КоллекцияПечатныхФорм)  Экспорт
	
	//++НЕ ГОСИС
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыОтправки, ДанныеОбъектовПечати, КоллекцияПечатныхФорм);
	//--НЕ ГОСИС
	
КонецПроцедуры

#КонецОбласти

#Область ОбщегоНазначенияУТ

// см ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании.
//
Процедура ПроверитьВозможностьВводаНаОсновании(Документ,
	                                           Статус = Неопределено,
	                                           ЕстьОшибкиПроведен = Ложь,
	                                           ЕстьОшибкиСтатус = Ложь,
	                                           МассивДопустимыхСтатусов = Неопределено,
	                                           СоглашениеДоступноВнешнемуПользователю = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		Документ,
		Статус,
		ЕстьОшибкиПроведен,
		ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов,
		СоглашениеДоступноВнешнемуПользователю);
	//-- НЕ ГОСИС
	
КонецПроцедуры

#КонецОбласти

#Область ПраваДоступа

// Проверяет наличие права создания контрагента у текущего пользователя.
//
// Возвращаемое значение:
//  Булево - Истина, если есть право создания контрагента, Ложь в обратном случае.
//
Функция ЕстьПравоСозданияКонтрагента() Экспорт
	
	//++ НЕ ГОСИС
	Результат = Ложь;
	
	ОписаниеТипов = Метаданные.ОпределяемыеТипы.КонтрагентГИСМ.Тип;
	Если ОписаниеТипов.Типы().Количество() = 1 Тогда
		МетаданныеТипа = Метаданные.НайтиПоТипу(ОписаниеТипов.Типы()[0]);
		Если МетаданныеТипа <> Неопределено Тогда
			Результат = ПравоДоступа("Добавление", МетаданныеТипа);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	//-- НЕ ГОСИС
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ВызовыИзБСП

// См. ОбщийМодуль.ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту()
//
Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	//++ НЕ ГОСИС
	Если НастройкиФормы.ИмяФормы = "Обработка.ГенерацияШтрихкодовУпаковок.Форма.Форма" Тогда
		Обработки.ГенерацияШтрихкодовУпаковок.ПриОпределенииКомандПодключенныхКОбъекту(Команды);
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
