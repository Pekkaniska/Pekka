///////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ПОДПИСОК НА СОБЫТИЯ
///////////////////////////////////////////////////////////////////////////////////////

// Процедура вызывает обработчик, устанавливающий префикс номера документа 
// в зависимости от организации
//  Парам.
//  СтандартнаяОбработка - использование стандартной обработки
//  Источник - источник события
//  Префикс - префикс организации
Процедура уатПриУстановкеНовогоНомераДокументаПриУстановкеНовогоНомера(Источник, СтандартнаяОбработка, Префикс) Экспорт
	уатОбщегоНазначенияТиповые.уатДобавитьПрефиксОрганизации(Источник, Префикс);
	уатОбщегоНазначенияТиповые.уатДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

// Процедура вызывает обработчик, устанавливающий префикс кода справочника
//  Парам.
//  СтандартнаяОбработка - использование стандартной обработки
//  Источник - источник события
//  Префикс - префикс организации  
Процедура уатПриУстановкеНовогоКодаСправочникаПриУстановкеНовогоКода(Источник, СтандартнаяОбработка, Префикс) Экспорт
	
	уатОбщегоНазначенияТиповые.уатДобавитьПрефиксУзла(Префикс);
	
КонецПроцедуры

// Проверка возможности изменения записей регистров накопления (дата запрета изменения данных)
//
Процедура уатПередЗаписьюРегистраНакопленийПроверкаДоступностиПериода(Источник, Отказ, Замещение) Экспорт
	ИдетЗагрузкаДанных = Ложь;
	Попытка	ИдетЗагрузкаДанных = Источник.ОбменДанными.Загрузка;
	Исключение КонецПопытки; 
	Если ИдетЗагрузкаДанных Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Сообщить("Редактирование данных этого периода запрещено. Изменения не могут быть записаны...", СтатусСообщения.Важное);
	КонецЕсли;
	
КонецПроцедуры // уатПередЗаписьюРегистраНакопленийПроверкаДоступностиПериода

// Проверка возможности изменения записей регистров сведений (дата запрета изменения данных)
//
Процедура уатПередЗаписьюРегистраСведенийПроверкаДоступностиПериода(Источник, Отказ, Замещение) Экспорт
	ИдетЗагрузкаДанных = Ложь;
	Попытка	ИдетЗагрузкаДанных = Источник.ОбменДанными.Загрузка;
	Исключение КонецПопытки; 
	Если ИдетЗагрузкаДанных Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Сообщить("Редактирование данных этого периода запрещено. Изменения не могут быть записаны...", СтатусСообщения.Важное);
	КонецЕсли;
	
КонецПроцедуры // уатПередЗаписьюРегистраСведенийПроверкаДоступностиПериода

// Проверка возможности записи данных документа с учетом даты запрета изменения данных (даты запрета редактирования)
//
Процедура уатПередЗаписьюДокументаПроверкаДоступностиПериода(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	ИдетЗагрузкаДанных = Ложь;
	Попытка	ИдетЗагрузкаДанных = Источник.ОбменДанными.Загрузка;
	Исключение КонецПопытки; 
	Если ИдетЗагрузкаДанных ИЛИ Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Сообщить("Редактирование данных этого периода запрещено. Изменения не могут быть записаны...", СтатусСообщения.Важное);
	КонецЕсли;
	
КонецПроцедуры // уатПередЗаписьюДокументаПроверкаДоступностиПериода

// Проверка прав перед записью документа УАТ
//
Процедура ПередЗаписьюДокументаПроверкаПрав(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	ИдетЗагрузкаДанных = Ложь;
	Попытка	ИдетЗагрузкаДанных = Источник.ОбменДанными.Загрузка;
	Исключение КонецПопытки; 
	Если ИдетЗагрузкаДанных ИЛИ Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//Если РежимПроведения = Неопределено Тогда
	//	РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	//КонецЕсли;
	
	//проверка прав
	уатОбщегоНазначенияСервер.ПроверкаПравПередЗаписьюВДокументах(Источник, Отказ);
КонецПроцедуры

// Проверка прав перед записью справочника УАТ
//
Процедура ПередЗаписьюСправочникаПроверкаПрав(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	ИдетЗагрузкаДанных = Ложь;
	Попытка	ИдетЗагрузкаДанных = Источник.ОбменДанными.Загрузка;
	Исключение КонецПопытки; 
	Если ИдетЗагрузкаДанных ИЛИ Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//проверка прав
	уатОбщегоНазначенияСервер.ПроверкаПравПередЗаписьюВСправочниках(Источник, Отказ);
КонецПроцедуры

// В зависимости от настроек учетной политики процедура регистрирует основания 
// на основании которых в дальнейшем могут быть сформированы документы
// Заказ на ТС.
//
// Параметры:
//  Источник     	 - документ объект 
//  Отказ       	 - признак отказа от записи
//  РежимПроведения	 - режим проведения документа
// 
Процедура уатПриПроведенииОснованияЗаказаНаТСОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	ЗарегистрироватьОснованиеДляЗаказаНаТС(Источник, Отказ, РежимПроведения);	
КонецПроцедуры

// Вызов данное процедуры происходит перед записью элемента типовых справочников
// Когда необходимо выполнить какие-либо проверки на возможность записи.
//
// Параметры:
//  Источник     - справочник объект - записываемый договор
//  Отказ        - признак отказа от записи.
//
Процедура уатПередЗаписьюЭлементаТиповыхСправочников(Источник,Отказ) Экспорт
	ИдетЗагрузкаДанных = Ложь;
	Попытка	ИдетЗагрузкаДанных = Источник.ОбменДанными.Загрузка;
	Исключение КонецПопытки; 
	Если ИдетЗагрузкаДанных Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.Пользователи") тогда
		Источник.ДополнительныеСвойства.Вставить("мЭтоНовый",Источник.ЭтоНовый());
	КонецЕсли;
КонецПроцедуры

// Проверяет корректность префикса номера документа по организации
// Источником подписки должен быть документ, в котором есть реквизит Организация
//
Процедура ПроверитьПрефиксОбъектаПоОрганизации(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	ИначеЕсли Источник.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Источник.Ссылка.Организация.Префикс <> Источник.Организация.Префикс Тогда
		
		Источник.Номер = "";
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет автоматическое создание напоминаний пользователю при создании задач по бизнес-процессу "уатСогласование"
//
Процедура уатСозданиеНапоминанийПоСогласованиямПриЗаписи(Источник, Отказ) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.НапоминанияПользователя") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не Константы.ИспользоватьНапоминанияПользователя.Получить() Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ТипЗнч(Источник.БизнесПроцесс) = Тип("БизнесПроцессСсылка.уатСогласование") Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	мЗапрос = Новый Запрос;
	мЗапрос.УстановитьПараметр("Источник", Источник.Ссылка);
	
	мЗапрос.Текст =
	"ВЫБРАТЬ
	|	НапоминанияПользователя.Источник
	|ИЗ
	|	РегистрСведений.НапоминанияПользователя КАК НапоминанияПользователя
	|ГДЕ
	|	НапоминанияПользователя.Источник = &Источник";
	
	Если мЗапрос.Выполнить().Пустой() Тогда 
		МенЗап = РегистрыСведений.НапоминанияПользователя.СоздатьМенеджерЗаписи();
		МенЗап.Пользователь    						= Источник.Исполнитель;
		МенЗап.ВремяСобытия    						= Источник.СрокИсполнения;
		МенЗап.Источник        						= Источник.Ссылка;
		МенЗап.СрокНапоминания 						= ТекущаяДата();
		МенЗап.Описание        						= Источник.Наименование;
		МенЗап.ИнтервалВремениНапоминания			= 0;
		МенЗап.СпособУстановкиВремениНапоминания 	= Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя;
		МенЗап.ВремяСобытия 						= МенЗап.СрокНапоминания ;
		МенЗап.ПредставлениеИсточника            	= ОбщегоНазначения.ПредметСтрокой(Источник.Ссылка);
		МенЗап.Записать(Истина);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Процедура обработчик подписки на событие "уатПриИзмененииИспользованияБизнесПроцессовИЗадач".
//
Процедура уатПриИзмененииИспользованияБизнесПроцессовИЗадач(Источник, Отказ) Экспорт
	
	Если Не Источник.Значение Тогда 
		Константы.уатИспользоватьСогласованиеДокументов.Установить(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработчик подписки на событие "уатОбновлениеУстановкиАгрегатаПриЗаписиУзлаОбъектаЭксплуатации".
//
Процедура уатОбновлениеУстановкиАгрегатаПриЗаписиУзлаОбъектаЭксплуатации(Источник, Отказ) Экспорт
	
	Если Источник.ПометкаУдаления Или Источник.ЭтоГруппа Или Источник.ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("уатФормированиеУзловОбъектовЭксплуатации") Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("УзелОбъектаЭксплуатации", Источник.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ТранспортныеСредства.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьТС,
	|	ВЫБОР
	|		КОГДА уатАгрегатыТС.ТипАгрегата ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьЗаписьРС
	|ИЗ
	|	Справочник.УзлыОбъектовЭксплуатации КАК УзлыОбъектовЭксплуатации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТранспортныеСредства КАК ТранспортныеСредства
	|		ПО УзлыОбъектовЭксплуатации.Владелец = ТранспортныеСредства.уатОбъектЭксплуатации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатАгрегатыТС КАК уатАгрегатыТС
	|		ПО (уатАгрегатыТС.УзелОбъектаЭксплуатации = УзлыОбъектовЭксплуатации.Ссылка)
	|ГДЕ
	|	УзлыОбъектовЭксплуатации.Ссылка = &УзелОбъектаЭксплуатации";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Если Выборка.ЕстьТС И Не Выборка.ЕстьЗаписьРС Тогда 
			НаборЗаписей = РегистрыСведений.уатАгрегатыТС.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.УзелОбъектаЭксплуатации.Установить(Источник.Ссылка);
			
			Запись = НаборЗаписей.Добавить();
			Запись.УзелОбъектаЭксплуатации = Источник.Ссылка;
			
			НаборЗаписей.Записать(Истина);
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ОбъектЭксплуатации", Источник.Владелец);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТранспортныеСредства.Ссылка КАК ТС,
	|	ТранспортныеСредства.уатОбъектЭксплуатации КАК ОбъектЭксплуатации
	|ИЗ
	|	Справочник.ТранспортныеСредства КАК ТранспортныеСредства
	|ГДЕ
	|	ТранспортныеСредства.уатОбъектЭксплуатации = &ОбъектЭксплуатации
	|ИТОГИ
	|	КОЛИЧЕСТВО(ТС)
	|ПО
	|	ОбъектЭксплуатации";
	
	ВыборкаГруппировка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ВыборкаГруппировка.Следующий() Тогда 
		Если ВыборкаГруппировка.ТС > 1 Тогда 
			СтрокаТС = "";
			
			ВыборкаТС = ВыборкаГруппировка.Выбрать();
			Пока ВыборкаТС.Следующий() Цикл 
				СтрокаТС = СтрокаТС + ?(СтрокаТС = "", "", ", ") + ВыборкаТС.ТС;
			КонецЦикла;
			
			ТекстОшибки = НСтр("ru = 'К объекту эксплуатации'") + " " + Источник.Владелец + " " 
				+ НСтр("ru = 'относится несколько транспортных средств'") + ": " + СтрокаТС
				+ ". " + НСтр("ru = 'Обновление статуса установки агрегатов не выполнено.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			
		Иначе 
			ВыборкаТС = ВыборкаГруппировка.Выбрать();
			ВыборкаТС.Следующий();
			
			ТекТС = ВыборкаТС.ТС;
			
			Запрос.УстановитьПараметр("УзелОбъектаЭксплуатации", Источник.Ссылка);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	уатАгрегатыТС.ТипАгрегата КАК ТипАгрегата
			|ИЗ
			|	РегистрСведений.уатАгрегатыТС КАК уатАгрегатыТС
			|ГДЕ
			|	уатАгрегатыТС.УзелОбъектаЭксплуатации = &УзелОбъектаЭксплуатации
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	уатУстановленныеАгрегатыСрезПоследних.ТипАгрегата КАК ТипАгрегата,
			|	уатУстановленныеАгрегатыСрезПоследних.ТранспортноеСредство КАК ТранспортноеСредство,
			|	уатУстановленныеАгрегатыСрезПоследних.СостояниеАгрегата КАК СостояниеАгрегата
			|ИЗ
			|	РегистрСведений.уатУстановленныеАгрегаты.СрезПоследних(, УзелОбъектаЭксплуатации = &УзелОбъектаЭксплуатации) КАК уатУстановленныеАгрегатыСрезПоследних
			|ГДЕ
			|	(уатУстановленныеАгрегатыСрезПоследних.СостояниеАгрегата = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.УстановленоВРаботе)
			|			ИЛИ уатУстановленныеАгрегатыСрезПоследних.СостояниеАгрегата = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.УстановленоВЗапас))";
			
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			
			ТекТипАгрегата = Справочники.уатТипыАгрегатов.ПустаяСсылка();
			ВыборкаТип = РезультатЗапроса[0].Выбрать();
			Если ВыборкаТип.Следующий() Тогда 
				ТекТипАгрегата = ВыборкаТип.ТипАгрегата;
			КонецЕсли;
			
			Если РезультатЗапроса[1].Пустой() Тогда 
				НаборЗаписей = РегистрыСведений.уатУстановленныеАгрегаты.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Период.Установить(НачалоДня(ТекущаяДата()));
				НаборЗаписей.Отбор.УзелОбъектаЭксплуатации.Установить(Источник.Ссылка);
				НаборЗаписей.Отбор.ТипАгрегата.Установить(ТекТипАгрегата);
				НаборЗаписей.Отбор.ТранспортноеСредство.Установить(ТекТС);
				
				Запись = НаборЗаписей.Добавить();
				Запись.Период                  = НачалоДня(ТекущаяДата());
				Запись.УзелОбъектаЭксплуатации = Источник.Ссылка;
				Запись.ТипАгрегата             = ТекТипАгрегата;
				Запись.ТранспортноеСредство    = ТекТС;
				Запись.СостояниеАгрегата       = Перечисления.уатСостоянияАгрегатов.УстановленоВРаботе;
				
				НаборЗаписей.Записать(Истина);
				
			Иначе 
				флУстановленоНаТекТС = Ложь;
				
				Выборка = РезультатЗапроса[1].Выбрать(); 
				Пока Выборка.Следующий() Цикл 
					Если Выборка.ТранспортноеСредство = ТекТС Тогда 
						флУстановленоНаТекТС = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если Не флУстановленоНаТекТС Тогда 
					Выборка.Сбросить();
					Пока Выборка.Следующий() Цикл 
						НаборЗаписей = РегистрыСведений.уатУстановленныеАгрегаты.СоздатьНаборЗаписей();
						НаборЗаписей.Отбор.Период.Установить(НачалоДня(ТекущаяДата()));
						НаборЗаписей.Отбор.УзелОбъектаЭксплуатации.Установить(Источник.Ссылка);
						НаборЗаписей.Отбор.ТипАгрегата.Установить(Выборка.ТипАгрегата);
						НаборЗаписей.Отбор.ТранспортноеСредство.Установить(Выборка.ТранспортноеСредство);
						
						Запись = НаборЗаписей.Добавить();
						Запись.Период                  = НачалоДня(ТекущаяДата());
						Запись.УзелОбъектаЭксплуатации = Источник.Ссылка;
						Запись.ТипАгрегата             = Выборка.ТипАгрегата;
						Запись.ТранспортноеСредство    = Выборка.ТранспортноеСредство;
						Запись.СостояниеАгрегата       = Перечисления.уатСостоянияАгрегатов.Снято;
						
						НаборЗаписей.Записать(Истина);
					КонецЦикла;
					
					НаборЗаписей = РегистрыСведений.уатУстановленныеАгрегаты.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Период.Установить(НачалоДня(ТекущаяДата()));
					НаборЗаписей.Отбор.УзелОбъектаЭксплуатации.Установить(Источник.Ссылка);
					НаборЗаписей.Отбор.ТипАгрегата.Установить(ТекТипАгрегата);
					НаборЗаписей.Отбор.ТранспортноеСредство.Установить(ТекТС);
					
					Запись = НаборЗаписей.Добавить();
					Запись.Период                  = НачалоДня(ТекущаяДата());
					Запись.УзелОбъектаЭксплуатации = Источник.Ссылка;
					Запись.ТипАгрегата             = ТекТипАгрегата;
					Запись.ТранспортноеСредство    = ТекТС;
					Запись.СостояниеАгрегата       = Перечисления.уатСостоянияАгрегатов.УстановленоВРаботе;
					
					НаборЗаписей.Записать(Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработчик подписки на событие "уатОбновлениеУстановкиАгрегатаПриЗаписиУзлаОбъектаЭксплуатации".
//
Процедура уатЗаписатьВерсиюДокументаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ВерсионированиеОбъектовСобытия.ЗаписатьВерсиюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

// Процедура обработчик подписки на событие "уатЗаписатьВерсиюОбъектаПередЗаписью".
//
Процедура уатЗаписатьВерсиюОбъектаПередЗаписью(Источник, Отказ) Экспорт
	
	ВерсионированиеОбъектовСобытия.ЗаписатьВерсиюОбъекта(Источник, Отказ);
	
КонецПроцедуры

// Процедура обработчик подписки на событие "уатПроверитьДатуЗапретаИзмененияПередЗаписьюДокументаПередЗаписью".
//
Процедура уатПроверитьДатуЗапретаИзмененияПередЗаписьюДокументаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

// Процедура обработчик подписки на событие "уатПроверитьДатуЗапретаИзмененияПередЗаписьюНабораЗаписейПередЗаписью".
//
Процедура уатПроверитьДатуЗапретаИзмененияПередЗаписьюНабораЗаписейПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюНабораЗаписей(Источник, Отказ, Замещение);
	
КонецПроцедуры

// Процедура обработчик подписки на событие "уатПроверитьДатуЗапретаПередУдалениемПередУдалением".
//
Процедура уатПроверитьДатуЗапретаПередУдалениемПередУдалением(Источник, Отказ) Экспорт
	
	ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередУдалением(Источник, Отказ);
	
КонецПроцедуры

// Процедура обработчик подписки на событие "уатУстановитьПометкуУдаленияФайловПередЗаписью".
//
Процедура уатУстановитьПометкуУдаленияФайловПередЗаписью(Источник, Отказ) Экспорт
	
	РаботаСФайлами.УстановитьПометкуУдаленияФайловПередЗаписью(Источник, Отказ);
	
КонецПроцедуры

// Процедура обработчик подписки на событие "уатУстановитьПометкуУдаленияФайловДокументовПередЗаписью".
//
Процедура уатУстановитьПометкуУдаленияФайловДокументовПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
			
//++ Рарус Лимаренко 06.12.2018 В УАТ нету присоединенных файлов
	МетаданныеИсточника = Источник.Метаданные();
	НаличиеМетаданных = Метаданные.НайтиПоПолномуИмени(МетаданныеИсточника.Имя+"ПрисоединенныеФайлы");	
	Если НаличиеМетаданных = Неопределено Тогда	
		Возврат;		
	КонецЕсли;
//-- Рарус Лимаренко 06.12.2018
		
	РаботаСФайлами.УстановитьПометкуУдаленияФайловДокументовПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ
///////////////////////////////////////////////////////////////////////////////////////

// Процедура, в зависимости от настроек учетной политики, выполняет регистрацию
// оснований для последующего формирования документов "Заказ на ТС". Процедура 
// вызывается при проведении документов "Заказ покупателя" и "Реализация товаров 
// и услуг" конфигураций бухгалтерия предприятия и Управление торговлей. 
//
// Параметры:
//  Источник     - документ объект, проведение которого инициировало вызов данной
//                 процедуры
//  Отказ        - признак проведения документа
//  РежимПроведения - режим проведения документа
//
Процедура ЗарегистрироватьОснованиеДляЗаказаНаТС(Источник, Отказ, РежимПроведения)
	ПараметрРегистрации = Неопределено;
	ПараметрРегистрации = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Источник.Организация, 
		ПланыВидовХарактеристик.уатПраваИНастройки.РегистрироватьЗаявкиНаЗаказыНаТС);
	
	Если ПараметрРегистрации = Неопределено ИЛИ 
				ПараметрРегистрации = Перечисления.уатРегистрироватьЗаявкиНаЗаказыГрузоотправителей.НеРегистрировать Тогда
		Возврат;
	ИначеЕсли ПараметрРегистрации = 
			Перечисления.уатРегистрироватьЗаявкиНаЗаказыГрузоотправителей.РегистрироватьНаОснованииРеализацииТоваровИУслуг И 
			ТипЗнч(Источник) <> Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		Возврат;
	ИначеЕсли Метаданные.Перечисления.Найти(
			"уатРегистрироватьЗаявкиНаЗаказыГрузоотправителей.РегистрироватьНаОснованииЗаказовПокупателей") <> 
				Неопределено Тогда
	Если ПараметрРегистрации = 
				Перечисления.уатРегистрироватьЗаявкиНаЗаказыГрузоотправителей.РегистрироватьНаОснованииЗаказовПокупателей И 
				уатОбщегоНазначенияТиповые.уатЕстьДокумент("ЗаказПокупателя") И 
				ТипЗнч(Источник) <> Тип("ДокументОбъект.ЗаказПокупателя") Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.уатРегистрацияОснованийДляЗаказовНаТС.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Источник.Ссылка);
	НаборЗаписей.Прочитать();
	Если НЕ НаборЗаписей.Количество() тогда
		НовЗапись = НаборЗаписей.Добавить();    
		НовЗапись.Период    = Источник.Дата;
		НовЗапись.Документ  = Источник.Ссылка;
		НовЗапись.Статус    = Перечисления.уатСтатусыЗаявокЗаказГрузоотправителя.Открыта;
		НаборЗаписей.Записать(Истина);		
	ИначеЕсли НаборЗаписей.Количество() = 1 тогда
		НовЗапись = НаборЗаписей[0];
		НовЗапись.Период    = Источник.Дата;
		НовЗапись.Документ  = Источник.Ссылка;
		НовЗапись.Статус    = Перечисления.уатСтатусыЗаявокЗаказГрузоотправителя.Открыта;
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
КонецПроцедуры
