
#Область ПроцедурыРегламентныхЗаданий

//////////////////////////////////////////////////////////////////////
Процедура пкОповещениеОтветственнымПоТС_О_ТО() Экспорт
	
	ЗапросТСдляТО = Новый Запрос;
	ЗапросТСдляТО.Текст = 
	"ВЫБРАТЬ
	|	ТСПоПользователям.ТС КАК ТС,
	|	ТСПоПользователям.Пользователь КАК Пользователь
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТранспортныеСредства.Ссылка КАК ТС,
	|		Пользователи.Ссылка КАК Пользователь
	|	ИЗ
	|		Справочник.ТранспортныеСредства КАК ТранспортныеСредства
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатМоделиТС.НормативыОбслуживания КАК уатМоделиТСНормативыОбслуживания
	|			ПО ТранспортныеСредства.уатМодель = уатМоделиТСНормативыОбслуживания.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкПробегТСпоТО.СрезПоследних(&Период, ) КАК пкПробегТСпоТОСрезПоследних
	|			ПО (пкПробегТСпоТОСрезПоследних.ТС = ТранспортныеСредства.Ссылка)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних(&Период, ) КАК уатМестонахождениеТССрезПоследних
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|				ПО уатМестонахождениеТССрезПоследних.Подразделение = Пользователи.Подразделение
	|			ПО (уатМестонахождениеТССрезПоследних.ТС = ТранспортныеСредства.Ссылка)
	|	ГДЕ
	|		ЕСТЬNULL(уатМестонахождениеТССрезПоследних.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) ССЫЛКА Справочник.СтруктураПредприятия
	|		И ЕСТЬNULL(уатМестонахождениеТССрезПоследних.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|		И (НЕ уатМоделиТСНормативыОбслуживания.Ссылка ЕСТЬ NULL 
	|					И ЕСТЬNULL(уатМоделиТСНормативыОбслуживания.ЗначениеПараметраВыработки, 0) - ЕСТЬNULL(пкПробегТСпоТОСрезПоследних.СчетчикПробегаТСпоТО, 0) <= ЕСТЬNULL(уатМоделиТСНормативыОбслуживания.пкОповещение, 0)
	|					И ЕСТЬNULL(уатМоделиТСНормативыОбслуживания.пкОповещение, 0) > 0
	|				ИЛИ ЕСТЬNULL(пкПробегТСпоТОСрезПоследних.ДатаПоследнегоТО, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) > ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					И РАЗНОСТЬДАТ(ЕСТЬNULL(пкПробегТСпоТОСрезПоследних.ДатаПоследнегоТО, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)), &Период, ДЕНЬ) >= 365)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТранспортныеСредства.Ссылка,
	|		Пользователи.Ссылка) КАК ТСПоПользователям
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НапоминанияПользователя КАК НапоминанияПользователя
	|		ПО ТСПоПользователям.ТС = НапоминанияПользователя.Источник
	|			И ТСПоПользователям.Пользователь = НапоминанияПользователя.Пользователь
	|ГДЕ
	|	НапоминанияПользователя.ВремяСобытия ЕСТЬ NULL ";
	ЗапросТСдляТО.УстановитьПараметр("Период", ТекущаяДата());
	
	ТСДляТОПоПольователям = ЗапросТСдляТО.Выполнить().Выгрузить();
	Для Каждого текСтрока Из ТСДляТОПоПольователям Цикл
		Если Пользователи.РолиДоступны("пкОповещениеОПриближенииТО", текСтрока.Пользователь) Тогда
			ПодключитьНапоминаниеПользователюВУказанноеВремя(текСтрока.Пользователь, НСтр("ru = 'Необходимо запланировать техническое обслуживание транспортного средства: '") + текСтрока.ТС, ТекущаяДата(), текСтрока.ТС);
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////
Процедура СформироватьОперациюСписанияПросроченнойЗадолженности() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОстатки.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОстатки.Субконто3 КАК Субконто3,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток,
	|	ХозрасчетныйОстатки.Субконто3.Организация КАК Организация
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет = &Счет,
	|			,
	//|			Субконто3 ССЫЛКА Документ.СписаниеЗадолженности И
	|				Субконто3.Дата <= ДОБАВИТЬКДАТЕ(&Период, ГОД, -5)) КАК ХозрасчетныйОстатки
	|ИТОГИ
	|	СУММА(СуммаОстаток)
	|ПО
	|	Организация");
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("Счет", ПланыСчетов.Хозрасчетный.СписаннаяВУбытокЗадолженностьДебиторов);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда 
		
		ВыборкаПоГруппам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоГруппам.Следующий() Цикл
			
			НовДокумент = Документы.ОперацияБух.СоздатьДокумент();
			НовДокумент.Дата = ТекущаяДата();
			НовДокумент.УстановитьНовыйНомер();
			НовДокумент.Организация = ВыборкаПоГруппам.Организация;
			НовДокумент.СуммаОперации = ВыборкаПоГруппам.СуммаОстаток;
			
			НовДокумент.Записать(РежимЗаписиДокумента.Проведение);
			
			ДвиженияХозрасчетный = НовДокумент.Движения.Хозрасчетный;
			СуммаВсего = 0;
			Выборка = ВыборкаПоГруппам.Выбрать();
			Пока Выборка.Следующий() Цикл
				НовДвижение = ДвиженияХозрасчетный.Добавить();
				НовДвижение.Активность = Истина;
				НовДвижение.СчетКт = ПланыСчетов.Хозрасчетный.СписаннаяВУбытокЗадолженностьДебиторов;
				НовДвижение.СубконтоКт.Контрагенты = Выборка.Субконто1;
				НовДвижение.СубконтоКт.Договоры = Выборка.Субконто2;
				НовДвижение.СубконтоКт.ДокументыРасчетовСКонтрагентами = Выборка.Субконто3;
				НовДвижение.Сумма = Выборка.СуммаОстаток;
				НовДвижение.Регистратор = НовДокумент.Ссылка;
				НовДвижение.Период = НовДокумент.Дата;
				СуммаВсего = СуммаВсего + НовДвижение.Сумма;
			КонецЦикла;	
			ДвиженияХозрасчетный.Записывать = Истина;
			ДвиженияХозрасчетный.Записать();
			
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////
Процедура ВыгрузитьУтилизациюТехникиВТаблицуSQL() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	//Константы.пкСтрокаПодключенияДляВыгрузкиУтилизации.Установить("Provider=SQLOLEDB;Password=user1C;Persist Security Info=True;User ID= user1C;Initial Catalog=AA_reports;Data Source=serverSQL");
	СтрокаСоединения = Константы.пкСтрокаПодключенияДляВыгрузкиУтилизации.Получить();
	Подключение = Новый ComObject("ADODB.Connection");
	Подключение.ConnectionString=СтрокаСоединения;
	Попытка
		Подключение.Open(СтрокаСоединения);
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Не удалось подключиться к базе SQL для выгрузки таблицы утилизации техники: '") + ОписаниеОшибки();
		тСообщение = Новый СообщениеПользователю;
		тСообщение.Текст = ТекстСообщения;
		тСообщение.Сообщить();
		
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка
			,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат;
	КонецПопытки;
	
	ДатаОбмена       = ТекущаяДата();
    НачалоДня        = НачалоДня(ДатаОбмена);
	ДатаОбменаГод    = Год(ДатаОбмена);
	ДатаОбменаНеделя = НеделяГода(ДатаОбмена);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
                          | пкУтилизацияТехникиСрезПоследних.Период,
                          | пкУтилизацияТехникиСрезПоследних.Техника,
                          | пкУтилизацияТехникиСрезПоследних.RegNumber,
                          | пкУтилизацияТехникиСрезПоследних.Description,
                          | пкУтилизацияТехникиСрезПоследних.ModelId,
                          | пкУтилизацияТехникиСрезПоследних.ProductGroup,
                          | пкУтилизацияТехникиСрезПоследних.SubproductGroup,
                          | пкУтилизацияТехникиСрезПоследних.Status,
                          | пкУтилизацияТехникиСрезПоследних.OnRental,
                          | пкУтилизацияТехникиСрезПоследних.ResponsibilityArea,
                          | пкУтилизацияТехникиСрезПоследних.Depot,
                          | пкУтилизацияТехникиСрезПоследних.SiteName,
                          | пкУтилизацияТехникиСрезПоследних.Street,
                          | пкУтилизацияТехникиСрезПоследних.Zipcode,
                          | пкУтилизацияТехникиСрезПоследних.City,
                          | пкУтилизацияТехникиСрезПоследних.RentalContractId,
                          | пкУтилизацияТехникиСрезПоследних.OrderId,
                          | пкУтилизацияТехникиСрезПоследних.CustomerId,
                          | пкУтилизацияТехникиСрезПоследних.CustomerName,
                          | пкУтилизацияТехникиСрезПоследних.SalespersonId,
                          | пкУтилизацияТехникиСрезПоследних.RentalStartdate,
//Рарус Владимир Подрезов 23.05.2017
                          | пкУтилизацияТехникиСрезПоследних.RentalEnddate,
//Рарус Владимир Подрезов Конец
                          | пкУтилизацияТехникиСрезПоследних.DaysOnRent,
                          | пкУтилизацияТехникиСрезПоследних.Price,
                          | пкУтилизацияТехникиСрезПоследних.Cost,
                          | пкУтилизацияТехникиСрезПоследних.PricingType,
                          | пкУтилизацияТехникиСрезПоследних.SaleOffice
                          |ИЗ
                          | РегистрСведений.пкУтилизацияТехники.СрезПоследних(&Период, ) КАК пкУтилизацияТехникиСрезПоследних
                          |ГДЕ
                          | пкУтилизацияТехникиСрезПоследних.Период > ДОБАВИТЬКДАТЕ(&Период, ЧАС, -1)");
	Запрос.УстановитьПараметр("Период",    ДатаОбмена);
    Запрос.УстановитьПараметр("НачалоДня", НачалоДня);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		ТекстСообщения = НСтр("ru = 'Не сформированы данные утилизации для выгрузки в базу SQL'");
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,,);
		Возврат;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	
	Попытка
		
		Подключение.BeginTrans();
		
		СтрокаОчиститьТаблицу = "
		|DELETE FROM [dbo].[latest_snapshot]";
		Подключение.Execute(СтрокаОчиститьТаблицу,,128);
		
		СоединениеSQL                  = Новый COMObject("ADODB.Command");
		СоединениеSQL.ActiveConnection = Подключение;
		СоединениеSQL.NamedParameters  = ИСТИНА;
		СоединениеSQL.Prepared  = ИСТИНА;
		СоединениеSQL.CommandType      = 1;
		СоединениеSQL.CommandTimeout   = 1000;
		//СоединениеSQL.CommandText 
		ТекстЗапросаSQLОбщий = "
		|INSERT INTO [dbo].[latest_snapshot]
		|(
		|reg_number,
		|description,
		|model_id,
		|main_product_group,
		|sub_product_group,
		|status,
		|on_rental,
		|responsibility_center,
		|depot,
		|site_name,
		|street,
		|zip_code,
		|city,
		|order_id,
		|customer_id,
		|customer_name,
		|salesperson_name,
		|salesperson_office,
		|rental_start_date,
//Рарус Владимир Подрезов 23.05.2017
		|rental_end_date,
//Рарус Владимир Подрезов Конец
		|days_on_rent,
		|day_price,
		|day_cost,
		|pricing_type,
		|recording_date,
		|recording_year,
		|recording_week
		|)
		|VALUES
		|(
		|@reg_number,
		|@description,
		|@model_id,
		|@main_product_group,
		|@sub_product_group,
		|@status,
		|CONVERT(bit,@on_rental),
		|@rensponsibility_center,
		|@depot,
		|@site_name,
		|@street,
		|@zip_code,
		|@city,
		|@order_id,
		|@customer_id,
		|@customer_name,
		|@salesperson_code,
		|@salesperson_office,
		|CONVERT(Date,@rental_start_date),
//Рарус Владимир Подрезов 23.05.2017
		|CONVERT(Date,@rental_end_date),
//Рарус Владимир Подрезов Конец
		|CONVERT(int,@days_on_rent),
		|CONVERT(money,@day_price),
		|CONVERT(money,@day_cost),
		|@pricing_type,
		|CONVERT(DateTime,@recording_date),
		|DATEPART(yy,@recording_date),
		|DATEPART(ww,@recording_date)
		|)";
		
		Пока Выборка.Следующий() Цикл
			ТекстЗапросаSQL = ТекстЗапросаSQLОбщий;
			ТекстЗапросаSQL = СтрЗаменить(ТекстЗапросаSQL,"@reg_number","'" + Выборка.RegNumber + "'");
			ТекстЗапросаSQL = СтрЗаменить(ТекстЗапросаSQL,"@description","'" + Выборка.Description + "'");                                   
			ТекстЗапросаSQL = СтрЗаменить(ТекстЗапросаSQL,"@model_id","'" + Выборка.ModelId + "'");
			ТекстЗапросаSQL = СтрЗаменить(ТекстЗапросаSQL,"@main_product_group" ,"'" + Выборка.ProductGroup + "'");
			ТекстЗапросаSQL = СтрЗаменить(ТекстЗапросаSQL,"@sub_product_group","'" + Выборка.SubproductGroup + "'");
			ТекстЗапросаSQL = СтрЗаменить(ТекстЗапросаSQL,"@status","'" + Выборка.Status + "'");
			ТекстЗапросаSQL = СтрЗаменить(ТекстЗапросаSQL,"@on_rental","'" + ?(Выборка.OnRental = 1,"1","0") + "'");
			ТекстЗапросаSQL = СтрЗаменить(ТекстЗапросаSQL,"@rensponsibility_center","'" + Выборка.ResponsibilityArea + "'");
			ТекстЗапросаSQL = СтрЗаменить(ТекстЗапросаSQL,"@depot","'" + Выборка.Depot + "'");
			ТекстЗапросаSQL = СтрЗаменить(ТекстЗапросаSQL,"@site_name","'" + СтрЗаменить(Выборка.SiteName, "'", "''") + "'");
			ТекстЗапросаSQL = СтрЗаменить(ТекстЗапросаSQL,"@street","'" + СтрЗаменить(Выборка.Street, "'", "''") + "'");
			ТекстЗапросаSQL = СтрЗаменить(ТекстЗапросаSQL,"@zip_code","'" + Выборка.Zipcode + "'");
			ТекстЗапросаSQL = СтрЗаменить(ТекстЗапросаSQL,"@city","'" + Выборка.City + "'");
			ТекстЗапросаSQL = СтрЗаменить(ТекстЗапросаSQL,"@order_id","'" + Выборка.OrderId + "'");
			ТекстЗапросаSQL = СтрЗаменить(ТекстЗапросаSQL,"@customer_id","'" + Выборка.CustomerId + "'");
			ТекстЗапросаSQL = СтрЗаменить(ТекстЗапросаSQL,"@customer_name","'" + Выборка.CustomerName + "'");
			ТекстЗапросаSQL = СтрЗаменить(ТекстЗапросаSQL,"@salesperson_code","'" + Выборка.SalespersonId + "'");
			ТекстЗапросаSQL = СтрЗаменить(ТекстЗапросаSQL,"@salesperson_office","'" + Выборка.SaleOffice + "'");
			Если ЗначениеЗаполнено(Выборка.RentalStartdate) Тогда
				ТекстЗапросаSQL = СтрЗаменить(ТекстЗапросаSQL,"@rental_start_date","'" + Формат(Выборка.RentalStartdate,"ДФ=yyyy-MM-dd") + "'");
			Иначе
				ТекстЗапросаSQL = СтрЗаменить(ТекстЗапросаSQL,"@rental_start_date","NULL");
			КонецЕсли;	
//Рарус Владимир Подрезов 23.05.2017
			Если ЗначениеЗаполнено(Выборка.RentalEnddate) Тогда
				ТекстЗапросаSQL = СтрЗаменить(ТекстЗапросаSQL,"@rental_end_date","'" + Формат(Выборка.RentalEnddate,"ДФ=yyyy-MM-dd") + "'");
			Иначе
				ТекстЗапросаSQL = СтрЗаменить(ТекстЗапросаSQL,"@rental_end_date","NULL");
			КонецЕсли;	
//Рарус Владимир Подрезов Конец
			Если ЗначениеЗаполнено(Выборка.DaysOnRent) Тогда
				ТекстЗапросаSQL = СтрЗаменить(ТекстЗапросаSQL,"@days_on_rent","'" + Формат(Выборка.DaysOnRent,"ЧДЦ=; ЧГ=") + "'");
			Иначе
				ТекстЗапросаSQL = СтрЗаменить(ТекстЗапросаSQL,"@days_on_rent","NULL");
			КонецЕсли;	
			Если ЗначениеЗаполнено(Выборка.Price) Тогда
				ТекстЗапросаSQL = СтрЗаменить(ТекстЗапросаSQL,"@day_price","'" + Формат(Выборка.Price,"ЧДЦ=2; ЧРД=.; ЧГ=") + "'");
			Иначе
				ТекстЗапросаSQL = СтрЗаменить(ТекстЗапросаSQL,"@day_price","NULL");
			КонецЕсли;	
			Если ЗначениеЗаполнено(Выборка.Cost) Тогда
				ТекстЗапросаSQL = СтрЗаменить(ТекстЗапросаSQL,"@day_cost","'" + Формат(Выборка.Cost,"ЧДЦ=2; ЧРД=.; ЧГ=") + "'");
			Иначе
				ТекстЗапросаSQL = СтрЗаменить(ТекстЗапросаSQL,"@day_cost","NULL");
			КонецЕсли;	
			Если ЗначениеЗаполнено(Выборка.PricingType) Тогда 
				ТекстЗапросаSQL = СтрЗаменить(ТекстЗапросаSQL,"@pricing_type","'" + Выборка.PricingType + "'");
			Иначе
				ТекстЗапросаSQL = СтрЗаменить(ТекстЗапросаSQL,"@pricing_type","NULL");
			КонецЕсли;	
			ТекстЗапросаSQL = СтрЗаменить(ТекстЗапросаSQL,"@recording_date","'" + Формат(ДатаОбмена,"ДФ=yyyy-MM-dd") + "'");
			//ТекстЗапросаSQL = СтрЗаменить(ТекстЗапросаSQL,"@recording_year","'" + Формат(ДатаОбменаГод,"ЧДЦ=; ЧГ=") + "'");
			//ТекстЗапросаSQL = СтрЗаменить(ТекстЗапросаSQL,"@recording_week","'" + Формат(ДатаОбменаНеделя,"ЧДЦ=; ЧГ=") + "'");
			
			СоединениеSQL.CommandText = ТекстЗапросаSQL;
			СоединениеSQL.Execute();
		КонецЦикла;	
		
		Подключение.CommitTrans();
		
	Исключение
		Подключение.RollbackTrans();
		
		ТекстСообщения = НСтр("ru = 'Не выгрузить данные утилизации в базу SQL:'") + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка
			,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;	
	
	Подключение.Close();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////
Процедура ВыгрузкаReceivables() Экспорт
    
    НаборЗаписей = РегистрыСведений.пкReceivables.СоздатьНаборЗаписей();
    НаборЗаписей.Очистить();
    НаборЗаписей.Записать(); 
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |	РасчетыСКлиентамиОбороты.ЗаказКлиента КАК СчетНаОплату,
    |	ВЫБОР
    |		КОГДА РасчетыСКлиентамиОбороты.КОплатеРасход > 0
    |			ТОГДА РасчетыСКлиентамиОбороты.Период
    |		ИНАЧЕ """"
    |	КОНЕЦ КАК ДатаОплаты,
    |	МАКСИМУМ(РасчетыСКлиентамиОбороты.ЗаказКлиента.СуммаДокумента - ВЫБОР
    |			КОГДА ЗаказКлиентаТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
    |				ТОГДА 0
    |			ИНАЧЕ РасчетыСКлиентамиОбороты.ЗаказКлиента.СуммаДокумента / 118 * 18
    |		КОНЕЦ) КАК СуммаПоСчету,
    |	СУММА(РасчетыСКлиентамиОбороты.КОплатеРасход - ВЫБОР
    |			КОГДА ЗаказКлиентаТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
    |				ТОГДА 0
    |			ИНАЧЕ РасчетыСКлиентамиОбороты.КОплатеРасход / 118 * 18
    |		КОНЕЦ) КАК СуммаОплаты,
    |	МАКСИМУМ(ВЫБОР
    |			КОГДА ЗаказКлиентаТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
    |				ТОГДА 0
    |			ИНАЧЕ РасчетыСКлиентамиОбороты.ЗаказКлиента.СуммаДокумента / 118 * 18
    |		КОНЕЦ) КАК СуммаНДССчета,
    |	СУММА(ВЫБОР
    |			КОГДА ЗаказКлиентаТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
    |				ТОГДА 0
    |			ИНАЧЕ РасчетыСКлиентамиОбороты.КОплатеРасход / 118 * 18
    |		КОНЕЦ) КАК СуммаНДСОплаты,
    |	СУММА(РасчетыСКлиентамиОбороты.КОплатеПриход) КАК КОплатеПриход
    |ИЗ
    |	РегистрНакопления.РасчетыСКлиентами.Обороты(, , Регистратор, ЗаказКлиента ССЫЛКА Документ.ЗаказКлиента) КАК РасчетыСКлиентамиОбороты
    |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
    |		ПО РасчетыСКлиентамиОбороты.ЗаказКлиента = ЗаказКлиентаТовары.Ссылка
    |			И (ЗаказКлиентаТовары.НомерСтроки = 1)
    |
    |СГРУППИРОВАТЬ ПО
    |	РасчетыСКлиентамиОбороты.ЗаказКлиента,
    |	ВЫБОР
    |		КОГДА РасчетыСКлиентамиОбороты.КОплатеРасход > 0
    |			ТОГДА РасчетыСКлиентамиОбороты.Период
    |		ИНАЧЕ """"
    |	КОНЕЦ
    |ИТОГИ
    |	МАКСИМУМ(СуммаПоСчету),
    |	МАКСИМУМ(СуммаНДССчета),
    |	МАКСИМУМ(КОплатеПриход)
    |ПО
    |	СчетНаОплату";
    
    Результат = Запрос.Выполнить();
    ВыборкаПоСчетам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
    
    Пока ВыборкаПоСчетам.Следующий() Цикл
        МенеджерЗаписи = РегистрыСведений.пкReceivables.СоздатьМенеджерЗаписи();
        
        СчетНаОплату = ВыборкаПоСчетам.СчетНаОплату;
        
        МенеджерЗаписи.СчетНаОплату        = СчетНаОплату;
        МенеджерЗаписи.НаДату              = ТекущаяДата();
        МенеджерЗаписи.ДатаСчета           = СчетНаОплату.Дата;
        МенеджерЗаписи.Подразделение       = СчетНаОплату.Подразделение.Наименование;
        МенеджерЗаписи.Менеджер            = СчетНаОплату.Менеджер.Наименование;
        МенеджерЗаписи.Клиент              = СчетНаОплату.Партнер.Наименование;
        МенеджерЗаписи.ТипСчета            = ?(СчетНаОплату.Договор.пкВидДоговора = Перечисления.пкВидыДоговоров.ПоставкаТехники, "equipment sales", 
            ?(СчетНаОплату.пкЭтоСчетСервиса, "remont", "platform rental"));
        МенеджерЗаписи.НомерДоговора       = СчетНаОплату.Договор.Номер;
        МенеджерЗаписи.ДатаНачалаАренды    = СчетНаОплату.пкДатаНачалаАренды;
        МенеджерЗаписи.ДатаОкончанияАренды = СчетНаОплату.пкДатаОкончанияАренды;
        МенеджерЗаписи.НомерСчета          = СчетНаОплату.Номер;
        МенеджерЗаписи.СуммаСчета          = ВыборкаПоСчетам.СуммаПоСчету;
        МенеджерЗаписи.СуммаНДССчета       = ВыборкаПоСчетам.СуммаНДССчета;
        
        Выборка = ВыборкаПоСчетам.Выбрать();
        
        ДатыОплат = "";
        СуммаОплаты = 0;
        СуммаНДСОплаты = 0;
		
        Пока Выборка.Следующий() Цикл
            Если Выборка.ДатаОплаты <> "" Тогда
            	ДатыОплат = ДатыОплат + ?(ДатыОплат = "", "", "; ") + Строка(Формат(Выборка.ДатаОплаты, "ДФ=dd.MM.yyyy"));
            КонецЕсли;    
            
            СуммаОплаты    = СуммаОплаты + Выборка.СуммаОплаты;
			СуммаНДСОплаты = СуммаНДСОплаты + Выборка.СуммаНДСОплаты;
        КонецЦикла; 
        
        МенеджерЗаписи.ДатыОплат = ДатыОплат;
		
		Если СчетНаОплату.пкЗакрыт Тогда
	        МенеджерЗаписи.СуммаОплаты    = ВыборкаПоСчетам.СуммаПоСчету;
	        МенеджерЗаписи.СуммаНДСОплаты = ВыборкаПоСчетам.СуммаНДССчета;
		Иначе
	        МенеджерЗаписи.СуммаОплаты    = СуммаОплаты;
	        МенеджерЗаписи.СуммаНДСОплаты = СуммаНДСОплаты;
		КонецЕсли;
        
        МенеджерЗаписи.Записать();
    КонецЦикла;
    
КонецПроцедуры

//////////////////////////////////////////////////////////////////////
Процедура УстановкаПравильныхЗаявокВЗаданияхНаПеревозку() Экспорт
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   пкЗаданиеНаПеревозку.Ссылка КАК Ссылка,
    |   МАКСИМУМ(пкРезервТехники1.ЗаявкаНаАрендуТехники) КАК ЗаявкаНаАрендуТехникиДляЗамены,
    |   ИСТИНА КАК ЗаменаЗаявки
    |ИЗ
    |   Документ.пкЗаданиеНаПеревозку КАК пкЗаданиеНаПеревозку
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкРезервТехники КАК пкРезервТехники
    |       ПО пкЗаданиеНаПеревозку.Техника = пкРезервТехники.Техника
    |           И пкЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники = пкРезервТехники.ЗаявкаНаАрендуТехники
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкРезервТехники КАК пкРезервТехники1
    |       ПО пкЗаданиеНаПеревозку.Техника = пкРезервТехники1.Техника
    |           И пкЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники.Партнер = пкРезервТехники1.ЗаявкаНаАрендуТехники.Партнер
    |           И пкЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники.ОбъектСтроительства = пкРезервТехники1.ЗаявкаНаАрендуТехники.ОбъектСтроительства
    |           И пкЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники.Договор = пкРезервТехники1.ЗаявкаНаАрендуТехники.Договор
    |ГДЕ
    |   пкРезервТехники.Техника ЕСТЬ NULL
    |   И пкЗаданиеНаПеревозку.Техника <> ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка)
    |   И пкЗаданиеНаПеревозку.Проведен
    |   И пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
    |
    |СГРУППИРОВАТЬ ПО
    |   пкЗаданиеНаПеревозку.Ссылка
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |   пкЗаданиеНаПеревозку.Ссылка,
    |   ЗНАЧЕНИЕ(Документ.пкЗаявкаНаАрендуТехники.ПустаяСсылка),
    |   ЛОЖЬ
    |ИЗ
    |   Документ.пкЗаданиеНаПеревозку КАК пкЗаданиеНаПеревозку
    |ГДЕ
    |   пкЗаданиеНаПеревозку.Проведен
    |   И пкЗаданиеНаПеревозку.КПроверке";
        
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Пока Выборка.Следующий() Цикл
        Если Выборка.ЗаменаЗаявки И ЗначениеЗаполнено(Выборка.ЗаявкаНаАрендуТехникиДляЗамены) Тогда
            ИсправитьНаСервере(Выборка.Ссылка, Выборка.ЗаявкаНаАрендуТехникиДляЗамены);
        ИначеЕсли НЕ Выборка.ЗаменаЗаявки Тогда
            ПровестиЗаданиеНаСервере(Выборка.Ссылка);
        КонецЕсли;
    КонецЦикла;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   пкЗаданиеНаПеревозку.Ссылка КАК Ссылка,
    |   МАКСИМУМ(пкРезервТехники1.ЗаявкаНаАрендуТехники) КАК ЗаявкаНаАрендуТехникиДляЗамены,
    |   ИСТИНА КАК ЗаменаЗаявки
    |ИЗ
    |   Документ.пкЗаданиеНаПеревозку КАК пкЗаданиеНаПеревозку
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкРезервТехники КАК пкРезервТехники
    |       ПО пкЗаданиеНаПеревозку.Техника = пкРезервТехники.Техника
    |           И пкЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники = пкРезервТехники.ЗаявкаНаАрендуТехники
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкРезервТехники КАК пкРезервТехники1
    |       ПО пкЗаданиеНаПеревозку.Техника = пкРезервТехники1.Техника
    |           И пкЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники.Партнер = пкРезервТехники1.ЗаявкаНаАрендуТехники.Партнер
    |           И пкЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники.ОбъектСтроительства = пкРезервТехники1.ЗаявкаНаАрендуТехники.ОбъектСтроительства
    |           И пкЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники.Договор = пкРезервТехники1.ЗаявкаНаАрендуТехники.Договор
    |ГДЕ
    |   пкРезервТехники.Техника ЕСТЬ NULL
    |   И пкЗаданиеНаПеревозку.Техника <> ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка)
    |   И пкЗаданиеНаПеревозку.Проведен
    |   И пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
    |
    |СГРУППИРОВАТЬ ПО
    |   пкЗаданиеНаПеревозку.Ссылка
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |   пкЗаданиеНаПеревозку.Ссылка,
    |   ЗНАЧЕНИЕ(Документ.пкЗаявкаНаАрендуТехники.ПустаяСсылка),
    |   ЛОЖЬ
    |ИЗ
    |   Документ.пкЗаданиеНаПеревозку КАК пкЗаданиеНаПеревозку
    |ГДЕ
    |   пкЗаданиеНаПеревозку.Проведен
    |   И пкЗаданиеНаПеревозку.КПроверке";
        
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Пока Выборка.Следующий() Цикл
        Если Выборка.ЗаменаЗаявки И ЗначениеЗаполнено(Выборка.ЗаявкаНаАрендуТехникиДляЗамены) Тогда
            ИсправитьНаСервере(Выборка.Ссылка, Выборка.ЗаявкаНаАрендуТехникиДляЗамены);
        ИначеЕсли НЕ Выборка.ЗаменаЗаявки Тогда
            ПровестиЗаданиеНаСервере(Выборка.Ссылка);
        КонецЕсли;
    КонецЦикла;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка
    |ИЗ
    |   Документ.пкАктПриемкиВозврата.ЗаданияНаПеревозку КАК пкАктПриемкиВозвратаЗаданияНаПеревозку
    |ГДЕ
    |   пкАктПриемкиВозвратаЗаданияНаПеревозку.ЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники <> пкАктПриемкиВозвратаЗаданияНаПеревозку.ЗаявкаНаАрендуТехники
    |   И НЕ пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка.ПометкаУдаления
    |
    |СГРУППИРОВАТЬ ПО
    |   пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка";
    
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Пока Выборка.Следующий() Цикл
        Акт = Выборка.Ссылка.ПолучитьОбъект(); 
        
        Для Каждого Строка ИЗ Акт.ЗаданияНаПеревозку Цикл
            Строка.ЗаявкаНаАрендуТехники = Строка.ЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники;    
        КонецЦикла; 
        
        Попытка
            Акт.Записать();
        Исключение
        КонецПопытки;
    КонецЦикла;
	
//Рарус Владимир Подрезов 16.06.2017
	ВыполнитьКорректировкуЗаписейМоделейКДоставке();
//Рарус Владимир Подрезов Конец
	
КонецПроцедуры

Процедура ИсправитьНаСервере(ЗаданиеНаПеревозку, ЗаявкаНаАрендуТехники)
    
    ЗаданиеНаПеревозкуОбъект = ЗаданиеНаПеревозку.ПолучитьОбъект();
    ЗаданиеНаПеревозкуОбъект.ЗаявкаНаАрендуТехники = ЗаявкаНаАрендуТехники;
    
    Попытка
        ЗаданиеНаПеревозкуОбъект.Записать(РежимЗаписиДокумента.Проведение);
    Исключение
        ЗаданиеНаПеревозкуОбъект.КПроверке = Истина;
        ЗаданиеНаПеревозкуОбъект.Записать(РежимЗаписиДокумента.Проведение);
    КонецПопытки;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |	пкПогрузкаВыгрузкаПоДоставке.Ссылка
    |ИЗ
    |	Документ.пкПогрузкаВыгрузкаПоДоставке КАК пкПогрузкаВыгрузкаПоДоставке
    |ГДЕ
    |	пкПогрузкаВыгрузкаПоДоставке.Проведен
    |	И пкПогрузкаВыгрузкаПоДоставке.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозку";
    
    Запрос.УстановитьПараметр("ЗаданиеНаПеревозку", ЗаданиеНаПеревозку);
    
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Пока Выборка.Следующий() Цикл
        ПогрузкаВыгрузкаПоДоставке = Выборка.Ссылка.ПолучитьОбъект();
        
        Попытка
        	ПогрузкаВыгрузкаПоДоставке.Записать(РежимЗаписиДокумента.Проведение);
        Исключение
        КонецПопытки;
    КонецЦикла;
        
КонецПроцедуры

Процедура ПровестиЗаданиеНаСервере(ЗаданиеНаПеревозку)
    
    ЗаданиеНаПеревозкуОбъект = ЗаданиеНаПеревозку.ПолучитьОбъект();
    
    Попытка
        ЗаданиеНаПеревозкуОбъект.Записать(РежимЗаписиДокумента.Проведение);
    Исключение
    КонецПопытки;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |	пкПогрузкаВыгрузкаПоДоставке.Ссылка
    |ИЗ
    |	Документ.пкПогрузкаВыгрузкаПоДоставке КАК пкПогрузкаВыгрузкаПоДоставке
    |ГДЕ
    |	пкПогрузкаВыгрузкаПоДоставке.Проведен
    |	И пкПогрузкаВыгрузкаПоДоставке.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозку";
    
    Запрос.УстановитьПараметр("ЗаданиеНаПеревозку", ЗаданиеНаПеревозку);
    
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Пока Выборка.Следующий() Цикл
        ПогрузкаВыгрузкаПоДоставке = Выборка.Ссылка.ПолучитьОбъект();
        
        Попытка
        	ПогрузкаВыгрузкаПоДоставке.Записать(РежимЗаписиДокумента.Проведение);
        Исключение
        КонецПопытки;
    КонецЦикла;
        
КонецПроцедуры    

//Рарус Владимир Подрезов 16.06.2017
Процедура ВыполнитьКорректировкуЗаписейМоделейКДоставке()
	
	НачатьТранзакцию();
	Отказ = Ложь;
	
	ЗапросДоставки = Новый Запрос;
	ЗапросДоставки.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	пкМоделиКДоставкеПоЗаявкамНаАрендуТехники.Регистратор КАК Доставка
	|ИЗ
	|	РегистрНакопления.пкМоделиКДоставкеПоЗаявкамНаАрендуТехники КАК пкМоделиКДоставкеПоЗаявкамНаАрендуТехники
	|ГДЕ
	|	пкМоделиКДоставкеПоЗаявкамНаАрендуТехники.ЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники <> пкМоделиКДоставкеПоЗаявкамНаАрендуТехники.ЗаявкаНаАрендуТехники
	|	И пкМоделиКДоставкеПоЗаявкамНаАрендуТехники.Регистратор ССЫЛКА Документ.пкДоставка";
	
	РезЗапроса = ЗапросДоставки.Выполнить().Выбрать();
	Пока РезЗапроса.Следующий() Цикл
		
		Изменяли = Ложь;
		
		тОбъект = РезЗапроса.Доставка.ПолучитьОбъект();
		
		НаборДвижений = тОбъект.Движения.пкМоделиКДоставкеПоЗаявкамНаАрендуТехники;
		НаборДвижений.Записывать = Истина;
		
		НаборДвижений.Прочитать();
		
		Для Каждого текЗапись Из НаборДвижений Цикл
			Если НЕ ЗначениеЗаполнено(текЗапись.ЗаданиеНаПеревозку) Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(текЗапись.ЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники) Тогда
				Продолжить;
			КонецЕсли;
			Если текЗапись.ЗаявкаНаАрендуТехники <> текЗапись.ЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники Тогда
				текЗапись.ЗаявкаНаАрендуТехники = текЗапись.ЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники;
				Изменяли = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если Изменяли Тогда
			тОбъект.ОбменДанными.Загрузка = Истина;
			Попытка
				тОбъект.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
			Исключение
				Отказ = Истина;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если Не Отказ Тогда 
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры
//Рарус Владимир Подрезов Конец

//////////////////////////////////////////////////////////////////////
Процедура ВыгрузкаСостоянияТехники() Экспорт
    
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   ОбъектыЭксплуатации.Ссылка КАК Техника,
    |   ЕСТЬNULL(пкСтатусыТехникиСрезПоследних.Статус, НЕОПРЕДЕЛЕНО) КАК Статус,
    |   МестонахожденияТехники.Значение КАК Местонахождения,
//Рарус Владимир Подрезов 17.07.2017
    |   ПодразделениеТехники.Значение КАК ЗакрепленаЗа,
//Рарус Владимир Подрезов КОНЕЦ	
//Рарус Владимир Подрезов 28.09.2017
    |   ОбъектыЭксплуатации.пкМодель КАК Модель,
    |   пкОформлениеАрендыТехникиСрезПоследних.Период КАК СчетПо,
    |   ВЫБОР
    |       КОГДА ЕСТЬNULL(РасчетыСКлиентамиОбороты.СуммаРасход, 0) > 0
    |           ТОГДА ИСТИНА
    |       ИНАЧЕ ЛОЖЬ
    |   КОНЕЦ КАК Оплачено,
//Рарус Владимир Подрезов КОНЕЦ	
    |   ВЫБОР
    |       КОГДА НЕ ЕСТЬNULL(пкРезервТехникиСрезПоследних.Резерв, ЛОЖЬ)
    |           ТОГДА """"
    |       ИНАЧЕ ""Резерв""
    |   КОНЕЦ КАК НадписьЕстьРезерв,
    |   ЕСТЬNULL(пкСтатусыРемонтаТехникиСрезПоследних.Статус, ЗНАЧЕНИЕ(Перечисление.пкСтатусыРемонтаТехники.ПустаяСсылка)) КАК СтатусРемонта,
    |   ВЫБОР
    |       КОГДА пкСтатусыРемонтаТехникиСрезПоследних.Регистратор ССЫЛКА Документ.пкЗаказНаряд
    |           ТОГДА ВЫБОР
    |                   КОГДА пкСтатусыРемонтаТехникиСрезПоследних.Статус <> ЗНАЧЕНИЕ(Перечисление.пкСтатусыРемонтаТехники.ПустаяСсылка)
    |                       ТОГДА пкСтатусыРемонтаТехникиСрезПоследних.Регистратор
    |                   ИНАЧЕ """"
    |               КОНЕЦ
    |       ИНАЧЕ """"
    |   КОНЕЦ КАК ЗаказНаряд,
    |   ВЫБОР
    |       КОГДА пкСтатусыРемонтаТехникиСрезПоследних.Статус <> ЗНАЧЕНИЕ(Перечисление.пкСтатусыРемонтаТехники.ПустаяСсылка)
    |           ТОГДА пкСтатусыРемонтаТехникиСрезПоследних.ПланируемаяДатаЗавершения
    |       ИНАЧЕ """"
    |   КОНЕЦ КАК ДатаЗавершенияРемонта,
    |   ПостановкаНаУчетВРостехнадзоре.ПостановкаНаУчет КАК ПостановкаНаУчет,
    |   ВЫРАЗИТЬ(ПостановкаНаУчетВРостехнадзоре.РегистрационныйНомер КАК СТРОКА(25)) КАК РегистрационныйНомер,
    |   ВЫБОР
    |       КОГДА пкСтатусыТехникиСрезПоследних.Статус <> ЗНАЧЕНИЕ(Перечисление.пкСтатусыТехники.НаБазе)
    |           ТОГДА пкДатыАрендыСрезПоследних.ДатаНачалаАренды
    |       ИНАЧЕ НЕОПРЕДЕЛЕНО
    |   КОНЕЦ КАК ДатаНачалаАренды,
    |   ВЫБОР
    |       КОГДА пкСтатусыТехникиСрезПоследних.Статус <> ЗНАЧЕНИЕ(Перечисление.пкСтатусыТехники.НаБазе)
    |           ТОГДА пкДатыАрендыСрезПоследних.ДатаОтгрузки
    |       ИНАЧЕ НЕОПРЕДЕЛЕНО
    |   КОНЕЦ КАК ДатаДоставки,
    |   ВЫБОР
    |       КОГДА пкСтатусыТехникиСрезПоследних.Статус <> ЗНАЧЕНИЕ(Перечисление.пкСтатусыТехники.НаБазе)
    |           ТОГДА пкДатыАрендыСрезПоследних.ДатаВозврата
    |       ИНАЧЕ НЕОПРЕДЕЛЕНО
    |   КОНЕЦ КАК ПланВозврата,
    |   ВЫБОР
    |       КОГДА пкСтатусыТехникиСрезПоследних.Статус <> ЗНАЧЕНИЕ(Перечисление.пкСтатусыТехники.НаБазе)
    |           ТОГДА пкСтатусыТехникиСрезПоследних.ЗаявкаНаАрендуТехники
    |       ИНАЧЕ ВЫБОР
    |               КОГДА НЕ ЕСТЬNULL(пкРезервТехникиСрезПоследних.Резерв, ЛОЖЬ)
    |                   ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
    |               ИНАЧЕ пкРезервТехникиСрезПоследних.ЗаявкаНаАрендуТехники
    |           КОНЕЦ
    |   КОНЕЦ КАК ЗаявкаНаАрендуТехники,
//Рарус Владимир Подрезов 15.06.2017	
    |   ВЫБОР
    |       КОГДА пкСтатусыТехникиСрезПоследних.Статус <> ЗНАЧЕНИЕ(Перечисление.пкСтатусыТехники.НаБазе)
    |           ТОГДА пкЗаявкаНаАрендуТехникиТовары.ЗамененнаяМодель
    |       ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
    |   КОНЕЦ КАК ЗамененнаяМодель,
//Рарус Владимир Подрезов КОНЕЦ	
    |   пкКомментарииПоЗаявке.Комментарий КАК Комментарий,
    |   пкКомментарииПоЗаявке.Примечание КАК Примечание,
//Рарус Владимир Подрезов 28.09.2017
    |   пкКомментарииПоЗаявке.Паспорт КАК Паспорт,
    |   пкКомментарииПоЗаявке.ВахтенныйЖурнал КАК ВахтенныйЖурнал,
//Рарус Владимир Подрезов КОНЕЦ	
    |   ВЫБОР
    |       КОГДА пкСтатусыТехникиСрезПоследних.Статус <> ЗНАЧЕНИЕ(Перечисление.пкСтатусыТехники.НаБазе)
    |           ТОГДА пкДатыАрендыСрезПоследних.ДатаОкончанияАренды
    |       ИНАЧЕ НЕОПРЕДЕЛЕНО
    |   КОНЕЦ КАК ПоследнийДень,
    |   ВЫБОР
    |       КОГДА пкСтатусыТехникиСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.пкСтатусыТехники.ВАренде)
    |           ТОГДА пкСтатусыТехникиСрезПоследних.Период
    |   КОНЕЦ КАК ВремяДоставки,
    |   ВЫБОР
    |       КОГДА пкСтатусыТехникиСрезПоследних.Статус <> ЗНАЧЕНИЕ(Перечисление.пкСтатусыТехники.НаБазе)
    |           ТОГДА пкСтатусыТехникиСрезПоследних.ЗаданиеНаПеревозку.СпособДоставки
    |       ИНАЧЕ ВЫБОР
    |               КОГДА ЕСТЬNULL(пкРезервТехникиСрезПоследних.Резерв, ЛОЖЬ)
    |                   ТОГДА пкРезервТехникиСрезПоследних.Регистратор.СпособДоставки
    |           КОНЕЦ
    |   КОНЕЦ КАК СпособДоставки,
    |   ЕСТЬNULL(пкРезервТехникиСрезПоследних.Резерв, ЛОЖЬ) КАК ЕстьРезерв,
//++ Рарус Лимаренко 15.01.2018
	|	пкДополнительнаяИнформацияТехникаСрезПоследних.ДопИнформацияПоТехнике,
	|	пкДополнительнаяИнформацияТехникаСрезПоследних.БлокGSM,
	|	пкДополнительнаяИнформацияТехникаСрезПоследних.Заблокирован,
	|	пкДополнительнаяИнформацияТехникаСрезПоследних.ДатаБлокировки	
//-- Рарус Лимаренко 15.01.2018	
    |ИЗ
    |   Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкСтатусыТехники.СрезПоследних(&Дата, ) КАК пкСтатусыТехникиСрезПоследних
    |           ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкДатыАренды.СрезПоследних(&Дата, ) КАК пкДатыАрендыСрезПоследних
    |           ПО пкСтатусыТехникиСрезПоследних.Техника = пкДатыАрендыСрезПоследних.Техника
    |               И пкСтатусыТехникиСрезПоследних.ЗаявкаНаАрендуТехники = пкДатыАрендыСрезПоследних.ЗаявкаНаАрендуТехники
//Рарус Владимир Подрезов 15.06.2017	
    |           ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкЗаявкаНаАрендуТехники.Товары КАК пкЗаявкаНаАрендуТехникиТовары
    |           ПО пкСтатусыТехникиСрезПоследних.Техника.пкМодель = пкЗаявкаНаАрендуТехникиТовары.Номенклатура
    |               И пкСтатусыТехникиСрезПоследних.ЗаявкаНаАрендуТехники = пкЗаявкаНаАрендуТехникиТовары.Ссылка
//Рарус Владимир Подрезов КОНЕЦ	
//Рарус Владимир Подрезов 14.08.2017
	//|           ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//|               пкПостановкаНаУчетВРостехнадзореСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	//|               МАКСИМУМ(пкПостановкаНаУчетВРостехнадзореСрезПоследних.ПостановкаНаУчет) КАК ПостановкаНаУчет,
	//|               МАКСИМУМ(пкПостановкаНаУчетВРостехнадзореСрезПоследних.РегистрационныйНомер) КАК РегистрационныйНомер
	//|           ИЗ
	//|               РегистрСведений.пкПостановкаНаУчетВРостехнадзоре.СрезПоследних КАК пкПостановкаНаУчетВРостехнадзореСрезПоследних
	//|           
	//|           СГРУППИРОВАТЬ ПО
	//|               пкПостановкаНаУчетВРостехнадзореСрезПоследних.ОсновноеСредство) КАК ПостановкаНаУчетВРостехнадзоре
	//|           ПО пкСтатусыТехникиСрезПоследних.Техника = ПостановкаНаУчетВРостехнадзоре.ОсновноеСредство
	|           ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
    |               пкПостановкаНаУчетВРостехнадзореСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
    |               МАКСИМУМ(пкПостановкаНаУчетВРостехнадзоре.ПостановкаНаУчет) КАК ПостановкаНаУчет,
    |               МАКСИМУМ(ВЫБОР КОГДА пкПостановкаНаУчетВРостехнадзоре.ПостановкаНаУчет ТОГДА пкПостановкаНаУчетВРостехнадзоре.РегистрационныйНомер ИНАЧЕ """" КОНЕЦ) КАК РегистрационныйНомер
    |           ИЗ
    |               (ВЫБРАТЬ
    |               		пкПостановкаНаУчетВРостехнадзореСрезПоследнихПериод.ОсновноеСредство КАК ОсновноеСредство,
    |               		МАКСИМУМ(пкПостановкаНаУчетВРостехнадзореСрезПоследнихПериод.Период) КАК Период
    |   	        	ИЗ
    |	            	  	РегистрСведений.пкПостановкаНаУчетВРостехнадзоре.СрезПоследних КАК пкПостановкаНаУчетВРостехнадзореСрезПоследнихПериод
	|					СГРУППИРОВАТЬ ПО
    |   	            	пкПостановкаНаУчетВРостехнадзореСрезПоследнихПериод.ОсновноеСредство) КАК пкПостановкаНаУчетВРостехнадзореСрезПоследних
    |               ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.пкПостановкаНаУчетВРостехнадзоре КАК пкПостановкаНаУчетВРостехнадзоре
    |		          	ПО пкПостановкаНаУчетВРостехнадзореСрезПоследних.ОсновноеСредство = пкПостановкаНаУчетВРостехнадзоре.ОсновноеСредство
    |       	    		И пкПостановкаНаУчетВРостехнадзореСрезПоследних.Период = пкПостановкаНаУчетВРостехнадзоре.Период
    |           СГРУППИРОВАТЬ ПО
    |               пкПостановкаНаУчетВРостехнадзореСрезПоследних.ОсновноеСредство) КАК ПостановкаНаУчетВРостехнадзоре
    |           ПО пкСтатусыТехникиСрезПоследних.Техника = ПостановкаНаУчетВРостехнадзоре.ОсновноеСредство
//Рарус Владимир Подрезов КОНЕЦ	
//Рарус Владимир Подрезов 28.09.2017
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкОформлениеАрендыТехники.СрезПоследних(
	|								,
	|								ЭтоОкончаниеАренды
	|								И ТипДокумента = ЗНАЧЕНИЕ(Перечисление.пкТипыДокументовДляСроковАренды.ЗаказКлиента)) КАК пкОформлениеАрендыТехникиСрезПоследних
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Обороты КАК РасчетыСКлиентамиОбороты
	|					ПО пкОформлениеАрендыТехникиСрезПоследних.ЗаказКлиента = РасчетыСКлиентамиОбороты.ЗаказКлиента
	|				ПО пкСтатусыТехникиСрезПоследних.ЗаявкаНаАрендуТехники = пкОформлениеАрендыТехникиСрезПоследних.ЗаявкаНаАрендуТехники
	|					И пкСтатусыТехникиСрезПоследних.Техника = пкОформлениеАрендыТехникиСрезПоследних.Техника
//Рарус Владимир Подрезов КОНЕЦ	
    |       ПО ОбъектыЭксплуатации.Ссылка = пкСтатусыТехникиСрезПоследних.Техника
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкСостояниеТехники.СрезПоследних(&Дата, Показатель = ЗНАЧЕНИЕ(ПланВидовХарактеристик.пкПоказателиСостоянияТехники.Местонахождения)) КАК МестонахожденияТехники
    |       ПО ОбъектыЭксплуатации.Ссылка = МестонахожденияТехники.Техника
//Рарус Владимир Подрезов 17.07.2017
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкСостояниеТехники.СрезПоследних(&Дата, Показатель = ЗНАЧЕНИЕ(ПланВидовХарактеристик.пкПоказателиСостоянияТехники.Подразделение)) КАК ПодразделениеТехники
    |       ПО ОбъектыЭксплуатации.Ссылка = ПодразделениеТехники.Техника
//Рарус Владимир Подрезов КОНЕЦ	
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкРезервТехники.СрезПоследних(, ) КАК пкРезервТехникиСрезПоследних
    |       ПО ОбъектыЭксплуатации.Ссылка = пкРезервТехникиСрезПоследних.Техника
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкСтатусыРемонтаТехники.СрезПоследних(&Дата, ) КАК пкСтатусыРемонтаТехникиСрезПоследних
    |       ПО ОбъектыЭксплуатации.Ссылка = пкСтатусыРемонтаТехникиСрезПоследних.Техника
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкКомментарииПоЗаявке КАК пкКомментарииПоЗаявке
    |       ПО ОбъектыЭксплуатации.Ссылка = пкКомментарииПоЗаявке.Техника
    |           И (ВЫБОР
    |               КОГДА пкСтатусыТехникиСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.пкСтатусыТехники.ВАренде)
    |                   ТОГДА пкСтатусыТехникиСрезПоследних.ЗаявкаНаАрендуТехники = пкКомментарииПоЗаявке.ЗаявкаНаАрендуТехники
    |               ИНАЧЕ ВЫБОР
    |                       КОГДА НЕ ЕСТЬNULL(пкРезервТехникиСрезПоследних.Резерв, ЛОЖЬ)
    |                           ТОГДА ЛОЖЬ
    |                       ИНАЧЕ пкРезервТехникиСрезПоследних.ЗаявкаНаАрендуТехники = пкКомментарииПоЗаявке.ЗаявкаНаАрендуТехники
    |                   КОНЕЦ
    |           КОНЕЦ)
	//++ Рарус Лимаренко 15.01.2018
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкДополнительнаяИнформацияТехника.СрезПоследних(&Дата, ) КАК пкДополнительнаяИнформацияТехникаСрезПоследних
    |		ПО пкДополнительнаяИнформацияТехникаСрезПоследних.Техника = ОбъектыЭксплуатации.Ссылка
	//-- Рарус Лимаренко 15.01.2018	
    |ГДЕ
    |   НЕ ОбъектыЭксплуатации.ЭтоГруппа
    |   И НЕ пкСтатусыТехникиСрезПоследних.Техника ЕСТЬ NULL
    |   И пкСтатусыТехникиСрезПоследних.Статус <> ЗНАЧЕНИЕ(Перечисление.пкСтатусыТехники.Недоступен)";
    
    Запрос.УстановитьПараметр("Дата", ТекущаяДата());
    НаборЗаписей = РегистрыСведений.пкВыгрузкаСостоянияТехники.СоздатьНаборЗаписей();
    
    НаборЗаписей.Очистить();
    НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
    НаборЗаписей.Записать();
    
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

//Рарус Владимир Подрезов 19.09.2017
//////////////////////////////////////////////////////////////////////
Процедура пкФормированиеПисемПоПродлениямТехники() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ Константы.пкОтправлятьПродления.Получить() Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
	КонецЕсли;
	
	тАдрес = Константы.пкАдресаОтправкиПродления.Получить();
	тДопустимоеЧислоДнейНеПродления = Константы.пкДопустимоеЧислоДнейНеПродления.Получить();
	
	Если тАдрес = "" Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
	КонецЕсли;
	
    Запрос = Новый Запрос;
    Запрос.Текст =
    "ВЫБРАТЬ
    |	пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаявкаНаАрендуТехники.Дата КАК Дата,
    |	пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаявкаНаАрендуТехники.Номер КАК НомерЗаявки,
    |	пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаявкаНаАрендуТехники КАК ЗаявкаНаАрендуТехники,
    |	пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.Модель КАК Модель,
    |	СУММА(пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.КВозвратуОстаток) КАК Заказано,
    |	СУММА(ВЫБОР
    |			КОГДА пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаданиеНаПеревозку <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |				ТОГДА ВЫБОР
    |						КОГДА пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаданиеНаПеревозку.Техника <> ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка)
    |							ТОГДА 1
    |						ИНАЧЕ 0
    |					КОНЕЦ
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК Подобрано,
    |	пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаявкаНаАрендуТехники.Партнер КАК Клиент,
    |	пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаявкаНаАрендуТехники.КонтактноеЛицо КАК КонтактноеЛицо,
    |	МАКСИМУМ(КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефона) КАК ТелефонКонтактногоЛица,
    |	пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаявкаНаАрендуТехники.ОбъектСтроительства КАК ОбъектСтроительства,
    |	ВЫБОР
    |		КОГДА пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаданиеНаПеревозку = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |			ТОГДА пкЗаявкаНаАрендуТехникиТовары.ДатаВозврата
    |		ИНАЧЕ пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаданиеНаПеревозку.ДатаОтгрузки
    |	КОНЕЦ КАК ДатаВозврата,
    |	ВЫБОР
    |		КОГДА пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаданиеНаПеревозку = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |			ТОГДА пкЗаявкаНаАрендуТехникиТовары.ДатаОкончанияАренды
    |		ИНАЧЕ пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаданиеНаПеревозку.ДатаАренды
    |	КОНЕЦ КАК ПоследнийДеньАренды,
    |	пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаявкаНаАрендуТехники.Менеджер КАК Менеджер,
    |	пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаявкаНаАрендуТехники.ПодразделениеОтгрузки КАК Регион
    |ИЗ
    |	РегистрНакопления.пкМоделиКДоставкеПоЗаявкамНаАрендуТехники.Остатки(&Дата, ) КАК пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки
    |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкЗаявкаНаАрендуТехники.Товары КАК пкЗаявкаНаАрендуТехникиТовары
    |		ПО пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаявкаНаАрендуТехники = пкЗаявкаНаАрендуТехникиТовары.Ссылка
    |			И пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.Модель = пкЗаявкаНаАрендуТехникиТовары.Номенклатура
    |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
    |		ПО пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаявкаНаАрендуТехники.КонтактноеЛицо = КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка
    |			И (КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица))
    |
    |СГРУППИРОВАТЬ ПО
    |	пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаявкаНаАрендуТехники.Дата,
    |	пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаявкаНаАрендуТехники.Номер,
    |	пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаявкаНаАрендуТехники,
    |	пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.Модель,
    |	пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаявкаНаАрендуТехники.Партнер,
    |	пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаявкаНаАрендуТехники.КонтактноеЛицо,
    |	пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаявкаНаАрендуТехники.ОбъектСтроительства,
    |	ВЫБОР
    |		КОГДА пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаданиеНаПеревозку = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |			ТОГДА пкЗаявкаНаАрендуТехникиТовары.ДатаВозврата
    |		ИНАЧЕ пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаданиеНаПеревозку.ДатаОтгрузки
    |	КОНЕЦ,
    |	ВЫБОР
    |		КОГДА пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаданиеНаПеревозку = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |			ТОГДА пкЗаявкаНаАрендуТехникиТовары.ДатаОкончанияАренды
    |		ИНАЧЕ пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаданиеНаПеревозку.ДатаАренды
    |	КОНЕЦ,
    |	пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаявкаНаАрендуТехники.Менеджер
    |
    |ИМЕЮЩИЕ
    |	СУММА(пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.КВозвратуОстаток) > 0
    |
    |УПОРЯДОЧИТЬ ПО
    |	Менеджер,
    |	Регион,
    |	ДатаВозврата,
    |	пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.Модель";
    Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДата()) - 1 - тДопустимоеЧислоДнейНеПродления * 24*60*60);
    СписокКВозврату = Запрос.Выполнить().Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	Макет = ПолучитьОбщийМакет("пкПисьмоПродлениеТехники");
	
	ОбластьЗаголовок	= Макет.ПолучитьОбласть("Заголовок");
	ОбластьСтрока		= Макет.ПолучитьОбласть("Строка");
	
	ОбластьЗаголовок.Параметры.ДатаФормирования = Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy");
	ТабДокумент.Вывести(ОбластьЗаголовок);
	
	Для Каждого Строка ИЗ СписокКВозврату Цикл
		ОбластьСтрока.Параметры.Заполнить(Строка);
		ТабДокумент.Вывести(ОбластьСтрока);
    КонецЦикла;    
	
	ИмяФайла = КаталогВременныхФайлов() + "temp.html";
	ТабДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.HTML5);
	тФайл = Новый ТекстовыйДокумент;
	тФайл.Прочитать(ИмяФайла);
	
	ТекстHTML = тФайл.ПолучитьТекст();
	
	УдалитьФайлы(ИмяФайла);
	
	пкОбщегоНазначенияСервер.СоздатьПисьмоHTML(тАдрес, "Не продленная техника", ТекстHTML);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////
Процедура пкФормированиеПисемПоСостояниюТехники() Экспорт
	
	ЗапросП = Новый Запрос;
	ЗапросП.Текст = 
	"ВЫБРАТЬ
	|	СтруктураПредприятия.Ссылка
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|ГДЕ
	|	СтруктураПредприятия.пкОтправлятьСостояниеТехники";
	РезЗапроса = ЗапросП.Выполнить().Выбрать();
	Пока РезЗапроса.Следующий() Цикл
		пкСоздатьПисьмоПоСостояниюТехники(РезЗапроса.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

Процедура пкСоздатьПисьмоПоСостояниюТехники(тПодразделение)
	
	
	Если НЕ ЗначениеЗаполнено(тПодразделение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	тАдрес = тПодразделение.пкАдресаОтправкиСостоянияТехники;
	
	Если тАдрес = "" Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСостоянияТехники = Новый Запрос;
	ЗапросСостоянияТехники.Текст = 
	"ВЫБРАТЬ
	|	пкВыгрузкаСостоянияТехники.Техника.Код КАК ИнвентарныйНомер,
	|	пкВыгрузкаСостоянияТехники.Техника КАК Ссылка,
	|	пкВыгрузкаСостоянияТехники.Техника.пкМодель КАК Модель,
	|	пкВыгрузкаСостоянияТехники.ЗамененнаяМодель КАК ЗамененнаяМодель,
	|	пкВыгрузкаСостоянияТехники.Статус КАК Статус,
	|	пкВыгрузкаСостоянияТехники.Техника.ЗаводскойНомер КАК ЗаводскойНомер,
	|	пкВыгрузкаСостоянияТехники.Техника.ДатаВыпуска КАК ГодВыпуска,
	|	пкВыгрузкаСостоянияТехники.Техника.СерийныйНомер КАК СерийныйНомер,
	|	пкВыгрузкаСостоянияТехники.Местонахождения КАК Местонахождения,
	|	пкВыгрузкаСостоянияТехники.ЗакрепленаЗа КАК ЗакрепленаЗа,
	|	ВЫБОР
	|		КОГДА пкВыгрузкаСостоянияТехники.Местонахождения ССЫЛКА Справочник.Склады
	|			ТОГДА пкВыгрузкаСостоянияТехники.Местонахождения.Подразделение
	|		ИНАЧЕ пкВыгрузкаСостоянияТехники.Местонахождения.пкПодразделение
	|	КОНЕЦ КАК Подразделение,
	|	пкВыгрузкаСостоянияТехники.ЗаявкаНаАрендуТехники.Номер КАК ДокументАренды,
	|	пкВыгрузкаСостоянияТехники.СтатусРемонта КАК СтатусРемонта,
	|	пкВыгрузкаСостоянияТехники.ЗаказНаряд.Номер КАК ДокументРемонта,
	|	пкВыгрузкаСостоянияТехники.ДатаЗавершенияРемонта КАК ДатаЗавершенияРемонта,
	|	пкВыгрузкаСостоянияТехники.ЗаявкаНаАрендуТехники.Партнер КАК Клиент,
	|	пкВыгрузкаСостоянияТехники.ЗаказНаряд.Статус КАК СтатусЗаказНаряда,
	|	пкВыгрузкаСостоянияТехники.ПостановкаНаУчет КАК ПостановкаНаУчет,
	|	пкВыгрузкаСостоянияТехники.РегистрационныйНомер КАК РегистрационныйНомер,
	|	пкВыгрузкаСостоянияТехники.ЗаявкаНаАрендуТехники.Договор КАК Договор,
	|	пкВыгрузкаСостоянияТехники.ЗаявкаНаАрендуТехники.Менеджер КАК Менеджер,
	|	пкВыгрузкаСостоянияТехники.ДатаНачалаАренды КАК ДатаНачалаАренды,
	|	пкВыгрузкаСостоянияТехники.ДатаДоставки КАК ДатаДоставки,
	|	пкВыгрузкаСостоянияТехники.ПланВозврата КАК ПланВозврата,
	|	пкВыгрузкаСостоянияТехники.ЗаявкаНаАрендуТехники КАК ЗаявкаНаАрендуТехники,
	|	пкВыгрузкаСостоянияТехники.ЗаявкаНаАрендуТехники.ДополнительнаяИнформацияПоДоставке КАК ДополнительнаяИнформацияПоДоставке,
	|	пкВыгрузкаСостоянияТехники.Комментарий КАК Комментарий,
	|	пкВыгрузкаСостоянияТехники.Примечание КАК Примечание,
	|	пкВыгрузкаСостоянияТехники.ПоследнийДень КАК ПоследнийДень,
	|	пкВыгрузкаСостоянияТехники.ЗаявкаНаАрендуТехники.КонтактноеЛицо КАК КонтактноеЛицо,
	|	пкВыгрузкаСостоянияТехники.ЗаказНаряд.ВидРемонта КАК ВидРемонта,
	|	пкВыгрузкаСостоянияТехники.ЗаявкаНаАрендуТехники.Подразделение КАК ПодразделениеПродажи,
	|	пкВыгрузкаСостоянияТехники.ВремяДоставки КАК ВремяДоставки,
	|	пкВыгрузкаСостоянияТехники.СпособДоставки КАК СпособДоставки,
	|	пкВыгрузкаСостоянияТехники.НадписьЕстьРезерв,
	|	пкВыгрузкаСостоянияТехники.ЗаявкаНаАрендуТехники.ПодразделениеОтгрузки КАК ПодразделениеОтгрузки,
	|	пкВыгрузкаСостоянияТехники.ЕстьРезерв,
	|	пкВыгрузкаСостоянияТехники.Техника.пкЗапретАренды КАК ЗапретАренды,
	|	пкВыгрузкаСостоянияТехники.СчетПо,
	|	пкВыгрузкаСостоянияТехники.Оплачено,
	|	пкВыгрузкаСостоянияТехники.Паспорт,
	|	пкВыгрузкаСостоянияТехники.ВахтенныйЖурнал
	|ИЗ
	|	РегистрСведений.пкВыгрузкаСостоянияТехники КАК пкВыгрузкаСостоянияТехники
	|ГДЕ
	|	ВЫБОР
	|			КОГДА пкВыгрузкаСостоянияТехники.Местонахождения ССЫЛКА Справочник.Склады
	|				ТОГДА пкВыгрузкаСостоянияТехники.Местонахождения.Подразделение
	|			ИНАЧЕ пкВыгрузкаСостоянияТехники.Местонахождения.пкПодразделение
	|		КОНЕЦ = &Подразделение
	|
	|УПОРЯДОЧИТЬ ПО
	|	Клиент,
	|	Местонахождения,
	|	Модель";
	ЗапросСостоянияТехники.УстановитьПараметр("Подразделение", тПодразделение);
	
    СостояниеТехники = ЗапросСостоянияТехники.Выполнить().Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	Макет = ПолучитьОбщийМакет("пкПисьмоСостояниеТехники");
	
	ОбластьЗаголовок	= Макет.ПолучитьОбласть("Заголовок");
	ОбластьСтрока		= Макет.ПолучитьОбласть("Строка");
	
	ОбластьЗаголовок.Параметры.ДатаФормирования	= Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy");
	ОбластьЗаголовок.Параметры.РегионРаботы		= тПодразделение;
	ОбластьЗаголовок.Параметры.ВсегоТехники		= СостояниеТехники.Количество();
	ТабДокумент.Вывести(ОбластьЗаголовок);
	
	Для Каждого Строка ИЗ СостояниеТехники Цикл
		ОбластьСтрока.Параметры.Заполнить(Строка);
		ТабДокумент.Вывести(ОбластьСтрока);
    КонецЦикла;    
	
	ИмяФайла = КаталогВременныхФайлов() + "Техника " + СокрЛП(тПодразделение) + " " + Формат(ТекущаяДата(), "ДФ=dd_MM_yyyy");
	ТабДокумент.Записать(ИмяФайла + ".html", ТипФайлаТабличногоДокумента.HTML5);
	ТабДокумент.Записать(ИмяФайла + ".xlsx", ТипФайлаТабличногоДокумента.XLSX);
	тФайл = Новый ТекстовыйДокумент;
	тФайл.Прочитать(ИмяФайла + ".html");
	
	ТекстHTML = тФайл.ПолучитьТекст();
	
	пкОбщегоНазначенияСервер.СоздатьПисьмоHTML(тАдрес, "Состояние техники по региону " + тПодразделение + " на " + Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy"), ТекстHTML, ИмяФайла + ".xlsx");
	
	УдалитьФайлы(ИмяФайла + ".html");
	УдалитьФайлы(ИмяФайла + ".xlsx");
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 16.10.2017 5390
Процедура пкУдалениеЛишнихЗаданийПоЗаявкам() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросЛишнее = Новый Запрос;
	ЗапросЛишнее.Текст = 
	"ВЫБРАТЬ
	|	пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаявкаНаАрендуТехники КАК ЗаявкаНаАрендуТехники,
	|	пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.Модель КАК Модель,
	|	-пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.КОтгрузкеОстаток КАК КОтгрузкеОстаток,
	|	-пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.КВозвратуОстаток КАК КВозвратуОстаток
	|ИЗ
	|	РегистрНакопления.пкМоделиКДоставкеПоЗаявкамНаАрендуТехники.Остатки(, ЗаданиеНаПеревозку = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) КАК пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки
	|ГДЕ
	|	(пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.КОтгрузкеОстаток < 0
	|			ИЛИ пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.КВозвратуОстаток < 0)
	|	И пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаявкаНаАрендуТехники <> ЗНАЧЕНИЕ(Документ.пкЗаявкаНаАрендуТехники.ПустаяСсылка)
	//|	И НЕ пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаявкаНаАрендуТехники.Отменена
	//|	И пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаявкаНаАрендуТехники.Подтверждена
	|";
	РезЗапроса = ЗапросЛишнее.Выполнить().Выбрать();
	Пока РезЗапроса.Следующий() Цикл
		
		текНомер = 0;
		Пока текНомер < РезЗапроса.КОтгрузкеОстаток Цикл
			текНомер = текНомер + 1;
			УдалитьЗаданиеПоЗаявке(РезЗапроса.ЗаявкаНаАрендуТехники, РезЗапроса.Модель, Перечисления.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту);
		КонецЦикла;
		
		текНомер = 0;
		Пока текНомер < РезЗапроса.КВозвратуОстаток Цикл
			текНомер = текНомер + 1;
			УдалитьЗаданиеПоЗаявке(РезЗапроса.ЗаявкаНаАрендуТехники, РезЗапроса.Модель, Перечисления.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента);
		КонецЦикла;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура УдалитьЗаданиеПоЗаявке(тЗаявкаНаАрендуТехники, тМодель, тВидОперации)
	
	Если Не ЗначениеЗаполнено(тЗаявкаНаАрендуТехники) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(тМодель) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(тВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросЗ = Новый Запрос;
	ЗапросЗ.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	пкЗаданиеНаПеревозку.Ссылка,
	|	ВЫБОР
	|		КОГДА пкЗаданиеНаПеревозку.Статус = ЗНАЧЕНИЕ(Перечисление.пкСтатусыЗаданийНаПеревозку.Запланировано)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Порядок
	|ИЗ
	|	Документ.пкЗаданиеНаПеревозку КАК пкЗаданиеНаПеревозку
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкПогрузкаВыгрузкаПоДоставке КАК пкПогрузкаВыгрузкаПоДоставке
	|		ПО пкЗаданиеНаПеревозку.Ссылка = пкПогрузкаВыгрузкаПоДоставке.ЗаданиеНаПеревозку
	|			И (пкПогрузкаВыгрузкаПоДоставке.Проведен)
	|			И (НЕ пкПогрузкаВыгрузкаПоДоставке.ПометкаУдаления)
	|ГДЕ
	|	пкЗаданиеНаПеревозку.ВидОперации = &ВидОперации
	|	И пкЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники = &ЗаявкаНаАрендуТехники
	|	И пкЗаданиеНаПеревозку.Модель = &Модель
	|	И НЕ пкЗаданиеНаПеревозку.ПометкаУдаления
	|	И пкЗаданиеНаПеревозку.Проведен
	|	И пкПогрузкаВыгрузкаПоДоставке.Ссылка ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	ЗапросЗ.УстановитьПараметр("ВидОперации", тВидОперации);
	ЗапросЗ.УстановитьПараметр("ЗаявкаНаАрендуТехники", тЗаявкаНаАрендуТехники);
	ЗапросЗ.УстановитьПараметр("Модель", тМодель);
	
	тДокумент = ЗапросЗ.Выполнить().Выбрать();
	Если тДокумент.Следующий() Тогда
		тОбъект = тДокумент.Ссылка.ПолучитьОбъект();
		Попытка
			тОбъект.УстановитьПометкуУдаления(Истина);
		Исключение
			ТекстСообщения		= НСтр("ru = 'Ошибка регламентной пометки удаления задания на перевозку: '") + ОписаниеОшибки();
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка
				,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
	Иначе
		ТекстСообщения		= НСтр("ru = 'Ошибка регламентной пометки удаления задания на перевозку для заявки: '") + СокрЛП(тЗаявкаНаАрендуТехники) + 
			НСтр("ru = ' нет лишнего задания без операций погрузки/выгрузки для модели '") + СокрЛП(тМодель);
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка
			,,, ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 18.10.2017 4436
Процедура пкФормированиеДатЭксплуатацииТехники() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |	&Период,
    |	пкДатыЭксплуатации.reg_number,
    |	МИНИМУМ(пкДатыЭксплуатации.date_added) КАК date_added,
    |	МИНИМУМ(пкДатыЭксплуатации.ДокументНачала) КАК ДокументНачала,
    |	МАКСИМУМ(пкДатыЭксплуатации.date_removed) КАК date_removed,
    |	МАКСИМУМ(пкДатыЭксплуатации.ДокументЗавершения) КАК ДокументЗавершения
    |ПОМЕСТИТЬ втДатыЭксплуатацииТехники
    |ИЗ
    |	(ВЫБРАТЬ
    |		пкТехника.Код КАК reg_number,
    |		СостоянияОСОрганизацийНачало.ДатаСостояния КАК date_added,
    |		СостоянияОСОрганизацийНачало.Регистратор КАК ДокументНачала,
    |		СостоянияОСОрганизацийЗавершение.ДатаСостояния КАК date_removed,
    |		СостоянияОСОрганизацийЗавершение.Регистратор КАК ДокументЗавершения
    |	ИЗ
    |		Справочник.ОбъектыЭксплуатации КАК пкТехника
    |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизацийНачало
    |			ПО (СостоянияОСОрганизацийНачало.ОсновноеСредство = пкТехника.Ссылка)
    |				И (СостоянияОСОрганизацийНачало.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету))
    |				И (НЕ СостоянияОСОрганизацийНачало.Регистратор ССЫЛКА Документ.ВводОстатковВнеоборотныхАктивов)
    |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизацийЗавершение
    |			ПО пкТехника.Ссылка = СостоянияОСОрганизацийЗавершение.ОсновноеСредство
    |				И (СостоянияОСОрганизацийЗавершение.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета))
    |	ГДЕ
    |		пкТехника.пкЭтоТехника
    |		И (НЕ СостоянияОСОрганизацийНачало.ДатаСостояния ЕСТЬ NULL
    |				ИЛИ НЕ СостоянияОСОрганизацийЗавершение.ДатаСостояния ЕСТЬ NULL)
    |	
    |	ОБЪЕДИНИТЬ ВСЕ
    |	
    |	ВЫБРАТЬ
    |		пкДатыЭксплуатацииТехникиНаНачало.reg_number,
    |		пкДатыЭксплуатацииТехникиНаНачало.date_added,
    |		пкДатыЭксплуатацииТехникиНаНачало.ДокументНачала,
    |		пкДатыЭксплуатацииТехникиНаНачало.date_removed,
    |		пкДатыЭксплуатацииТехникиНаНачало.ДокументЗавершения
    |	ИЗ
    |		РегистрСведений.пкДатыЭксплуатацииТехники.СрезПоследних(&ПериодНачала, ) КАК пкДатыЭксплуатацииТехникиНаНачало) КАК пкДатыЭксплуатации
    |
    |СГРУППИРОВАТЬ ПО
    |	пкДатыЭксплуатации.reg_number
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	втДатыЭксплуатацииТехники.Период КАК Период,
    |	втДатыЭксплуатацииТехники.reg_number КАК reg_number,
    |	втДатыЭксплуатацииТехники.date_added КАК date_added,
    |	втДатыЭксплуатацииТехники.ДокументНачала КАК ДокументНачала,
    |	втДатыЭксплуатацииТехники.date_removed КАК date_removed,
    |	втДатыЭксплуатацииТехники.ДокументЗавершения КАК ДокументЗавершения
    |ИЗ
    |	втДатыЭксплуатацииТехники КАК втДатыЭксплуатацииТехники
    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкДатыЭксплуатацииТехники.СрезПоследних(&Период, ) КАК пкДатыЭксплуатацииТехникиПоследние
    |		ПО втДатыЭксплуатацииТехники.reg_number = пкДатыЭксплуатацииТехникиПоследние.reg_number
    |
    |ГДЕ
    |	(НАЧАЛОПЕРИОДА(ЕСТЬNULL(втДатыЭксплуатацииТехники.date_added, ДАТАВРЕМЯ(1, 1, 1)), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ЕСТЬNULL(пкДатыЭксплуатацииТехникиПоследние.date_added, ДАТАВРЕМЯ(1, 1, 1)), ДЕНЬ)
    |		ИЛИ НАЧАЛОПЕРИОДА(ЕСТЬNULL(втДатыЭксплуатацииТехники.date_removed, ДАТАВРЕМЯ(1, 1, 1)), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ЕСТЬNULL(пкДатыЭксплуатацииТехникиПоследние.date_removed, ДАТАВРЕМЯ(1, 1, 1)), ДЕНЬ))";
    
    Запрос.УстановитьПараметр("Период",			ТекущаяДата());
    Запрос.УстановитьПараметр("ПериодНачала",	Константы.пкДатаЗапускаСистемы.Получить() + 1);
       
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
	Пока Выборка.Следующий() Цикл
		
        МенеджерЗаписи = РегистрыСведений.пкДатыЭксплуатацииТехники.СоздатьМенеджерЗаписи();
        МенеджерЗаписи.Период		= Выборка.Период;
        МенеджерЗаписи.reg_number	= Выборка.reg_number;
        МенеджерЗаписи.Прочитать();
		
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
        МенеджерЗаписи.reg_number	= Выборка.reg_number;
		
		МенеджерЗаписи.Записать();
		
    КонецЦикла;
    
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура пкВыгрузкаДатЭксплуатацииТехникиВSQL() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	тИмяТаблицы	= "inventory_dates";
	тДатаОбмена	= ТекущаяДата();
	
	СтрокаСоединения	= Константы.пкСтрокаПодключенияДляВыгрузкиУтилизации.Получить();
	Подключение			= Новый ComObject("ADODB.Connection");
	Подключение.ConnectionString=СтрокаСоединения;
	Попытка
		Подключение.Open(СтрокаСоединения);
	Исключение
		
		ТекстСообщения		= НСтр("ru = 'Не удалось подключиться к базе SQL для выгрузки таблицы утилизации техники: '") + ОписаниеОшибки();
		тСообщение			= Новый СообщениеПользователю;
		тСообщение.Текст	= ТекстСообщения;
		тСообщение.Сообщить();
		
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка
			,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат;
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	пкДатыЭксплуатацииТехникиСрезПоследних.Период,
	|	пкДатыЭксплуатацииТехникиСрезПоследних.reg_number,
	|	пкДатыЭксплуатацииТехникиСрезПоследних.date_added,
	|	пкДатыЭксплуатацииТехникиСрезПоследних.date_removed
	|ИЗ
	|	РегистрСведений.пкДатыЭксплуатацииТехники.СрезПоследних(&Период, ) КАК пкДатыЭксплуатацииТехникиСрезПоследних
	//|ГДЕ
	//|	пкДатыЭксплуатацииТехникиСрезПоследних.Период > ДОБАВИТЬКДАТЕ(&Период, ЧАС, -1)
	|";
	Запрос.УстановитьПараметр("Период",    тДатаОбмена);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		ТекстСообщения = НСтр("ru = 'Не сформированы данные дат эксплуатации техники для выгрузки в базу SQL'");
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,,);
		Возврат;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	
	Попытка
		
		Подключение.BeginTrans();
		
		СтрокаОчиститьТаблицу = "
		|DELETE FROM [dbo].[" + тИмяТаблицы + "]";
		Подключение.Execute(СтрокаОчиститьТаблицу, , 128);
		
		СоединениеSQL					= Новый COMObject("ADODB.Command");
		СоединениеSQL.ActiveConnection	= Подключение;
		СоединениеSQL.NamedParameters	= ИСТИНА;
		СоединениеSQL.Prepared			= ИСТИНА;
		СоединениеSQL.CommandType		= 1;
		СоединениеSQL.CommandTimeout	= 1000;
		ТекстЗапросаSQLОбщий	= "
		|INSERT INTO [dbo].[" + тИмяТаблицы + "]
		|(
		|reg_number,
		|date_added,
		|date_removed_bookkeeping,
		|recording_date
		|)
		|VALUES
		|(
		|@reg_number,
		|CONVERT(Date,@date_added),
		|CONVERT(Date,@date_removed),
		|CONVERT(DateTime,@recording_date)
		|)";
		
		Пока Выборка.Следующий() Цикл
			ТекстЗапросаSQL = ТекстЗапросаSQLОбщий;
			ТекстЗапросаSQL = СтрЗаменить(ТекстЗапросаSQL, "@reg_number", "'" + СокрЛП(Выборка.reg_number) + "'");
			Если ЗначениеЗаполнено(Выборка.date_added) Тогда
				ТекстЗапросаSQL = СтрЗаменить(ТекстЗапросаSQL, "@date_added", "'" + Формат(Выборка.date_added,"ДФ=yyyy-MM-dd") + "'");
			Иначе
				ТекстЗапросаSQL = СтрЗаменить(ТекстЗапросаSQL, "@date_added", "NULL");
			КонецЕсли;	
			Если ЗначениеЗаполнено(Выборка.date_removed) Тогда
				ТекстЗапросаSQL = СтрЗаменить(ТекстЗапросаSQL, "@date_removed", "'" + Формат(Выборка.date_removed, "ДФ=yyyy-MM-dd") + "'");
			Иначе
				ТекстЗапросаSQL = СтрЗаменить(ТекстЗапросаSQL, "@date_removed", "NULL");
			КонецЕсли;	
			ТекстЗапросаSQL = СтрЗаменить(ТекстЗапросаSQL, "@recording_date", "'" + Формат(тДатаОбмена, "ДФ=yyyy-MM-dd") + "'");
			
			СоединениеSQL.CommandText = ТекстЗапросаSQL;
			СоединениеSQL.Execute();
		КонецЦикла;	
		
		Подключение.CommitTrans();
		
	Исключение
		
		Подключение.RollbackTrans();
		
		ТекстСообщения = НСтр("ru = 'Не удалось выгрузить данные дат эксплуатации техники в базу SQL:'") + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка
			,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
	КонецПопытки;	
	
	Подключение.Close();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 23.10.2017 
Процедура пкОтложенноеПроведениеЗаявокПоЛогистике() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросЗаявки = Новый Запрос;
	ЗапросЗаявки.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.пкРасходыПоЛогистике КАК пкРасходыПоЛогистике
	|		ПО ЗаявкаНаРасходованиеДенежныхСредств.Ссылка = пкРасходыПоЛогистике.Регистратор
	|ГДЕ
	|	ЗаявкаНаРасходованиеДенежныхСредств.Проведен
	|	И НЕ ЗаявкаНаРасходованиеДенежныхСредств.ПометкаУдаления
	|	И ЗаявкаНаРасходованиеДенежныхСредств.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате)
	|	И ЗаявкаНаРасходованиеДенежныхСредств.пкСтатьяРасходовПоЛогистике <> ЗНАЧЕНИЕ(Справочник.пкСтатьиДоходовРасходовЛогистика.ПустаяСсылка)
	|	И ЗаявкаНаРасходованиеДенежныхСредств.Подразделение.пкОтражатьРасходыПоЛогистике
	|	И пкРасходыПоЛогистике.Регистратор ЕСТЬ NULL";
	
	РезЗапроса = ЗапросЗаявки.Выполнить().Выбрать();
	
	Пока РезЗапроса.Следующий() Цикл
		
		тОбъект = РезЗапроса.Ссылка.ПолучитьОбъект();
		Попытка
			тОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		Исключение
			ТекстСообщения = НСтр("ru = 'Ошибка регламента отложенного проведения Заявки по Логистике:'") + ОписаниеОшибки();
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка
				,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 23.11.2017 7753
Процедура пкОчисткаОчередиСообщенийДокументооборота() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОчередьСообщенийВ1СДокументооборот.МоментВремени КАК МоментВремени,
		|	ОчередьСообщенийВ1СДокументооборот.Данные КАК Данные,
		|	ОчередьСообщенийВ1СДокументооборот.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.ОчередьСообщенийВ1СДокументооборот КАК ОчередьСообщенийВ1СДокументооборот
		|
		|УПОРЯДОЧИТЬ ПО
		|	МоментВремени");
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ОчередьСообщенийВ1СДокументооборот.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		Попытка
			МенеджерЗаписи.Удалить();
		Исключение
			ТекстСообщения = НСтр("ru = 'Ошибка Очистки очереди сообщений документооборота:'") + ОписаниеОшибки();
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка
				,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
		
КонецПроцедуры
//Рарус Владимир Подрезов Конец

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//////////////////////////////////////////////////////////////////////
// Создает новое напоминание на указанное время.
Функция ПодключитьНапоминаниеПользователюВУказанноеВремя(Пользователь, Текст, Время, Предмет = Неопределено) Экспорт
	
	ПараметрыНапоминания = Новый Структура;
	ПараметрыНапоминания.Вставить("Пользователь", Пользователь);
	ПараметрыНапоминания.Вставить("Описание", Текст);
	ПараметрыНапоминания.Вставить("ВремяСобытия", Время);
	ПараметрыНапоминания.Вставить("Источник", Предмет);
	
	Напоминание = СоздатьНапоминание(ПараметрыНапоминания);
	НапоминанияПользователяСлужебный.ПодключитьНапоминание(Напоминание);
	
	Возврат Напоминание;
	
КонецФункции

// Возвращает структуру нового напоминания для последующего подключения.
Функция СоздатьНапоминание(ПараметрыНапоминания)
	
	Напоминание = НапоминанияПользователяКлиентСервер.ПолучитьСтруктуруНапоминания(ПараметрыНапоминания, Истина);
	
	Если Не ЗначениеЗаполнено(Напоминание.Пользователь) Тогда
		Напоминание.Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Напоминание.СпособУстановкиВремениНапоминания) Тогда
		Если ЗначениеЗаполнено(Напоминание.Источник) И Не ПустаяСтрока(Напоминание.ИмяРеквизитаИсточника) Тогда
			Напоминание.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета;
		Иначе
			Напоминание.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя;
		КонецЕсли;
	КонецЕсли;
	
	Если Напоминание.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета Тогда
		Напоминание.ВремяСобытия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Напоминание.Источник, Напоминание.ИмяРеквизитаИсточника);
		Напоминание.СрокНапоминания = Напоминание.ВремяСобытия - ?(ЗначениеЗаполнено(Напоминание.ВремяСобытия), Напоминание.ИнтервалВремениНапоминания, 0);
	ИначеЕсли Напоминание.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ОтносительноТекущегоВремени Тогда
		Напоминание.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя;
		Напоминание.ВремяСобытия = ТекущаяДатаСеанса() + Напоминание.ИнтервалВремениНапоминания;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Напоминание.СрокНапоминания) Тогда
		Напоминание.СрокНапоминания = Напоминание.ВремяСобытия;
	КонецЕсли;
	
	Возврат Напоминание;
	
КонецФункции

#КонецОбласти

