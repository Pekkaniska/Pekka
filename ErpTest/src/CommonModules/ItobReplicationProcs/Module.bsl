////////////////////////////////////////////////////////////////////////////////
// Replication procs:
// Модуль предназначен для обращения из внешней компоненты
// Менять что либо не рекомендуется
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

#Область ИспользованиеИВнешнееСоединение
	
// Получает таблицу актуальности терминалов
//
Функция GetTableOfActualTerminalData() Экспорт
	
	Запрос = Новый Запрос;	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ItobТерминалы.Код КАК КодТерминала,
	               |	ЕСТЬNULL(ItobКрайниеДанныеТерминалов.Счетчик, 0) КАК СчетчикАктуальности
	               |ИЗ
	               |	Справочник.ItobТерминалы КАК ItobТерминалы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ItobКрайниеДанныеТерминалов КАК ItobКрайниеДанныеТерминалов
	               |		ПО (ItobКрайниеДанныеТерминалов.Терминал = ItobТерминалы.Ссылка)
	               |ГДЕ
	               |	(НЕ ItobТерминалы.ПометкаУдаления)
	               |	И ItobТерминалы.Код <> 0";
				   
	Рез = "";			   
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл		
		Рез = ?(Рез = "", "", Рез + Символы.ПС) + Формат(Выборка.КодТерминала,"ЧН=0; ЧГ=0") + Символы.ПС 
			+ Формат(Выборка.СчетчикАктуальности, "ЧН=0; ЧГ=0");
	
	КонецЦикла;
				   
	Возврат Рез;

КонецФункции //

// Получает шаблон таблицы данных
//
Функция GetTemplateOfDataTable() Экспорт
	
	ТипДатаВремя = Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("КодТерминала");
	ТаблицаДанных.Колонки.Добавить("Период", ТипДатаВремя);
	ТаблицаДанных.Колонки.Добавить("Широта");
	ТаблицаДанных.Колонки.Добавить("Долгота");
	ТаблицаДанных.Колонки.Добавить("Скорость");
	ТаблицаДанных.Колонки.Добавить("Направление");
	ТаблицаДанных.Колонки.Добавить("Счетчик");
	
	ТаблицаДанных.Индексы.Добавить("КодТерминала,Счетчик");
	
	Возврат ТаблицаДанных;

КонецФункции // 

// Записывает в базу данные от терминалов
//
Процедура WriteTerminalData(ТаблицаДанных, ИмяПотока="Основной", ВерсияФорматаТаблицыДанных=0) Экспорт
	
	лТекущаяДата = ItobОбщегоНазначенияСервер.ПолучитьТекущуюДату();	
	
	ТаблицаБД = ТаблицаДанных.Скопировать();
	ТаблицаБД.Очистить();
	ТаблицаБД.Колонки.Добавить("ЗначенияДатчиков");
	
	ШаблонТаблицыДатчиков = Новый ТаблицаЗначений;
	ШаблонТаблицыДатчиков.Колонки.Добавить("Датчик");
	ШаблонТаблицыДатчиков.Колонки.Добавить("Значение");	
	
	ТабКодов = ТаблицаДанных.Скопировать();
	ТабКодов.Свернуть("КодТерминала",);
	
	ТабПериодыДанных = Новый ТаблицаЗначений;
	ТабПериодыДанных.Колонки.Добавить("Терминал");
	ТабПериодыДанных.Колонки.Добавить("ПериодДата");
		
	ТЗПодписок = ПолучитьАктивныеПодписки(ТабКодов.ВыгрузитьКолонку("КодТерминала"));
	ТЗПрофилейЗаписи = ПолучитьПрофилиЗаписиДанныхДатчиков();
	
	НачатьТранзакцию();
		   	
	ТаблицаДанных.Сортировать("КодТерминала Возр, Счетчик Возр");
	
	ДанныеМаксимальныйПериод = Новый Структура("Период,Терминал,Широта,Долгота,Скорость,Направление,Счетчик,ДанныеДатчиков");
			
	ТЗРазрешенныеДатчикиТерминала = Новый ТаблицаЗначений;
	ТЗРазрешенныеДатчикиТерминала.Колонки.Добавить("Терминал");	
	ТЗРазрешенныеДатчикиТерминала.Колонки.Добавить("РазрешенныеДатчики");
	ТЗРазрешенныеДатчикиТерминала.Колонки.Добавить("МаксимальнаяВалиднаяСкоростьДвижения");
	ТЗРазрешенныеДатчикиТерминала.Колонки.Добавить("НастройкиОтображения");
	ТЗРазрешенныеДатчикиТерминала.Индексы.Добавить("Терминал");
	
	ТЗКешДатчиков = Новый ТаблицаЗначений;
	ТЗКешДатчиков.Колонки.Добавить("КодДатчика");
	ТЗКешДатчиков.Колонки.Добавить("МодельТерминала");
	ТЗКешДатчиков.Колонки.Добавить("Датчик");
	ТЗКешДатчиков.Индексы.Добавить("КодДатчика,МодельТерминала");
	
	ТЗХвостТерминала = Новый ТаблицаЗначений;
	ТЗХвостТерминала.Колонки.Добавить("Период");	
	ТЗХвостТерминала.Колонки.Добавить("Широта");	
	ТЗХвостТерминала.Колонки.Добавить("Долгота");
	ТЗХвостТерминала.Колонки.Добавить("Скорость");
	ТЗХвостТерминала.Колонки.Добавить("Направление");
	
	ДанныеПредыдущейТочки = Неопределено;
	
	СоответствиеКодовТерминалов = Новый Соответствие;
	
	Для Счетчик = 0 По ТаблицаДанных.Количество()-1 Цикл
		ТекущаяСтрока = ТаблицаДанных[Счетчик];
				
		НайденноеСоответствиеТерминал = СоответствиеКодовТерминалов[ТекущаяСтрока.КодТерминала];
		Если НайденноеСоответствиеТерминал = Неопределено Тогда
			НайденноеСоответствиеТерминал = Справочники.ItobТерминалы.НайтиПоКоду(ТекущаяСтрока.КодТерминала);
			СоответствиеКодовТерминалов[ТекущаяСтрока.КодТерминала] = НайденноеСоответствиеТерминал;		
		КонецЕсли;
		
		ТекущийТерминал = НайденноеСоответствиеТерминал;
		Если ТекущийТерминал.Пустая() Тогда
			Продолжить;
		
		КонецЕсли;
		
		Если Год(ТекущаяСтрока.Период) > Год(лТекущаяДата)+1 Тогда
			Продолжить;		
		КонецЕсли;
		
		// Добавим запись в таблицу периодов
		НовСтрокаПериодыДанных = ТабПериодыДанных.Добавить();
		НовСтрокаПериодыДанных.Терминал = ТекущийТерминал;
		НовСтрокаПериодыДанных.ПериодДата = НачалоДня(МестноеВремя(ТекущаяСтрока.Период));
		
		ТекущиеДанныеДатчиков = Новый Соответствие;
		ТекущиеДанныеВиртуальныхДатчиков = Новый Соответствие;
		
		НовСтрокаБД = ТаблицаБД.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрокаБД, ТекущаяСтрока);		
		НовСтрокаБД.ЗначенияДатчиков = ШаблонТаблицыДатчиков.Скопировать();
		
		НайденнаяСтрокаТЗ_РДТ = ТЗРазрешенныеДатчикиТерминала.Найти(ТекущийТерминал,"Терминал");
		Если НайденнаяСтрокаТЗ_РДТ = Неопределено Тогда			
			ПараметрыОбработкиДанных = ItobОперативныйМониторинг.ПолучитьПараметрыОбработкиДанных(ТекущийТерминал);
			НовСтрока_РДТ = ТЗРазрешенныеДатчикиТерминала.Добавить();
			НовСтрока_РДТ.Терминал = ТекущийТерминал;
			НовСтрока_РДТ.МаксимальнаяВалиднаяСкоростьДвижения = ПараметрыОбработкиДанных.МаксимальнаяВалиднаяСкоростьДвижения;
			Если ПараметрыОбработкиДанных.ПрофильЗаписиДанныхДатчиков.Пустая() Тогда
				НовСтрока_РДТ.РазрешенныеДатчики = Неопределено;
			Иначе				
				СтрокаТЗПрофилей = ТЗПрофилейЗаписи.Найти(ПараметрыОбработкиДанных.ПрофильЗаписиДанныхДатчиков, "ПрофильЗаписи");
				Если СтрокаТЗПрофилей = Неопределено Тогда
					НовСтрока_РДТ.РазрешенныеДатчики = Неопределено;
				Иначе
					НовСтрока_РДТ.РазрешенныеДатчики = СтрокаТЗПрофилей.Датчики.Скопировать();	
				КонецЕсли;
			
			КонецЕсли;
			
			НовСтрока_РДТ.НастройкиОтображения = ItobОперативныйМониторинг.ПолучитьНастройкиОтображенияТерминала(ТекущийТерминал);
					
			ТекущиеРазрешенныеДатчики   = НовСтрока_РДТ.РазрешенныеДатчики;
			ТекущиеНастройкиОтображения = НовСтрока_РДТ.НастройкиОтображения;
			МаксимальнаяВалиднаяСкоростьДвижения = НовСтрока_РДТ.МаксимальнаяВалиднаяСкоростьДвижения;
		Иначе
					
		    ТекущиеРазрешенныеДатчики   = НайденнаяСтрокаТЗ_РДТ.РазрешенныеДатчики;
			ТекущиеНастройкиОтображения = НайденнаяСтрокаТЗ_РДТ.НастройкиОтображения;
			МаксимальнаяВалиднаяСкоростьДвижения = НайденнаяСтрокаТЗ_РДТ.МаксимальнаяВалиднаяСкоростьДвижения;
		КонецЕсли;
		
		ТаблицаДанныеДатчиковПолная = ШаблонТаблицыДатчиков.Скопировать();
		СоотвДанныеДатчиковПолная = Новый Соответствие;
		
		// Датчики
		Сдвиг = ВерсияФорматаТаблицыДанных;
		КоличествоДатчиков = Цел((ТаблицаДанных.Колонки.Количество() - (7+Сдвиг))/2);
		Для НомерДатчика = 0 По КоличествоДатчиков-1 Цикл
			КодДатчика = ТаблицаДанных[Счетчик][7+Сдвиг+НомерДатчика*2];
			ДанныеДатчика = ТаблицаДанных[Счетчик][8+Сдвиг+НомерДатчика*2];
			
			Если ЗначениеЗаполнено(КодДатчика) Тогда
				
				НайденныеСтрокиКеш = ТЗКешДатчиков.НайтиСтроки(Новый Структура("КодДатчика,МодельТерминала", КодДатчика, ТекущийТерминал.Модель));
				Если НайденныеСтрокиКеш.Количество() > 0 Тогда
					Датчик = НайденныеСтрокиКеш[0].Датчик;
				Иначе
					Датчик = Справочники.ItobДатчики.НайтиПоКоду(КодДатчика,Ложь,,ТекущийТерминал.Модель);
					Если Датчик.Пустая() Тогда
						НовДатчик = Справочники.ItobДатчики.СоздатьЭлемент();
						НовДатчик.Владелец = ТекущийТерминал.Модель;
						НовДатчик.Код = КодДатчика;
						НовДатчик.Наименование = "#"+КодДатчика;
						НовДатчик.Записать();
						
						Датчик = НовДатчик.Ссылка;
						
					КонецЕсли;		
					
					НовСтрокаКеш = ТЗКешДатчиков.Добавить();
					НовСтрокаКеш.КодДатчика = КодДатчика;
					НовСтрокаКеш.МодельТерминала = ТекущийТерминал.Модель;
					НовСтрокаКеш.Датчик = Датчик;					
					
				КонецЕсли;
				
				Если ТекущиеРазрешенныеДатчики = Неопределено
					ИЛИ ТекущиеРазрешенныеДатчики.Найти(КодДатчика,"КодДатчика") <> Неопределено Тогда
										
					ТекущиеДанныеДатчиков.Вставить(КодДатчика, ДанныеДатчика);
 
					ЗаписьДатчикиБД = НовСтрокаБД.ЗначенияДатчиков.Добавить();
					ЗаписьДатчикиБД.Датчик = Датчик;
					ЗаписьДатчикиБД.Значение = ДанныеДатчика;
				
				КонецЕсли;
				
				// Полную таблицу датчиков заполняем
				НовСтрокаТабДатчиковПолн = ТаблицаДанныеДатчиковПолная.Добавить();
				НовСтрокаТабДатчиковПолн.Датчик = Датчик;
				НовСтрокаТабДатчиковПолн.Значение = ДанныеДатчика;								
				
				СоотвДанныеДатчиковПолная.Вставить(КодДатчика, ДанныеДатчика);				
								
			КонецЕсли;
		
		КонецЦикла;
		
		// Данные предыдущей точки - действительно таковые ?
		Если НЕ ДанныеПредыдущейТочки = Неопределено Тогда
			Если (НЕ ДанныеПредыдущейТочки.КодТерминала = ТекущаяСтрока.КодТерминала)
				ИЛИ (ДанныеПредыдущейТочки.Период >= ТекущаяСтрока.Период) Тогда
				
				ДанныеПредыдущейТочки = Неопределено;
			
			КонецЕсли;			
		
		КонецЕсли;		
		
		СтруктураЗаписиДанныеТерминала = Новый Структура("Период,Терминал,Широта,Долгота,Скорость,Направление,ЧислоСпутников,НевалидныеДанные,ДанныеДатчиков");
		СтруктураЗаписиДанныеТерминала.Терминал    = ТекущийТерминал;
		ЗаполнитьЗначенияСвойств(СтруктураЗаписиДанныеТерминала, ТекущаяСтрока);
		Если ВерсияФорматаТаблицыДанных > 0 Тогда
			СтруктураЗаписиДанныеТерминала.НевалидныеДанные = ТекущаяСтрока.ЧислоСпутников < 3;		
		КонецЕсли;
		Если МаксимальнаяВалиднаяСкоростьДвижения > 0 И СтруктураЗаписиДанныеТерминала.Скорость > МаксимальнаяВалиднаяСкоростьДвижения Тогда
		 	СтруктураЗаписиДанныеТерминала.НевалидныеДанные = Истина;			
		КонецЕсли;
		СтруктураЗаписиДанныеТерминала.ДанныеДатчиков = ItobОбщегоНазначенияКлиентСервер.ПреобразоватьДанныеДатчиковВСтроку(ТекущиеДанныеДатчиков);
		        		
		Если НЕ ItobВызовСервераПовтИсп.ДанныеТерминаловБратьИзБазыIMCS() Тогда
			НовЗапись = РегистрыСведений.ItobДанныеТерминалов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НовЗапись, СтруктураЗаписиДанныеТерминала);			
			НовЗапись.Записать();
		КонецЕсли;
		
		Если ItobВызовСервераПовтИсп.ОпределятьАдресаДляКаждойТочки()
			ИЛИ (ItobВызовСервераПовтИсп.ДанныеТерминаловБратьИзБазыIMCS() И ТекущиеДанныеВиртуальныхДатчиков.Количество() > 0) Тогда
			
			// Заполняем запись регистра ItobДанныеТерминаловДополнения
			НовЗаписьДополнения = РегистрыСведений.ItobДанныеТерминаловДополнения.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НовЗаписьДополнения, СтруктураЗаписиДанныеТерминала);	
			НовЗаписьДополнения.ДатаВремя = СтруктураЗаписиДанныеТерминала.Период;
			
			Если ItobВызовСервераПовтИсп.ОпределятьАдресаДляКаждойТочки() Тогда
				// Пишем населенный пункт
				СтруктураБлижайшийНаселенныйПункт = ItobРаботаСКартой.НайтиБлижайшийНаселенныйПункт(
					СтруктураЗаписиДанныеТерминала.Широта, СтруктураЗаписиДанныеТерминала.Долгота, 
					СтруктураЗаписиДанныеТерминала.Направление, СтруктураЗаписиДанныеТерминала.Скорость);				
				Если НЕ СтруктураБлижайшийНаселенныйПункт=Неопределено Тогда			
					НовЗаписьДополнения.НаселенныйПункт = СтруктураБлижайшийНаселенныйПункт.Ссылка;
					НовЗаписьДополнения.Расстояние = Формат(ItobОперативныйМониторинг.ПолучитьРасстояниеМеждуТочками(
						СтруктураЗаписиДанныеТерминала.Широта,СтруктураЗаписиДанныеТерминала.Долгота,
						СтруктураБлижайшийНаселенныйПункт.Широта,СтруктураБлижайшийНаселенныйПункт.Долгота)/1000,"ЧЦ=4; ЧДЦ=1; ЧН=0; ЧГ=0");
					ТекВектор = Окр(СтруктураБлижайшийНаселенныйПункт.УголОтПункта/45,0);
					ТекВектор = ?(ТекВектор=8,0,ТекВектор);
					НовЗаписьДополнения.Вектор = ТекВектор;
					НовЗаписьДополнения.ПриближениеУдаление = СтруктураБлижайшийНаселенныйПункт.ПриближениеУдаление;				
					
				КонецЕсли;				
			
			КонецЕсли;
			
			Если ItobВызовСервераПовтИсп.ДанныеТерминаловБратьИзБазыIMCS() 
				И ТекущиеДанныеВиртуальныхДатчиков.Количество() > 0 Тогда
			
				НовЗаписьДополнения.ДанныеВиртуальныхДатчиков = ItobОбщегоНазначенияКлиентСервер.ПреобразоватьДанныеДатчиковВСтроку(ТекущиеДанныеВиртуальныхДатчиков);
			
			КонецЕсли;
			
			НовЗаписьДополнения.Записать(Истина);
		
		КонецЕсли;
		
		// Кэшируем данные точки
		ДанныеПредыдущейТочки = Новый Структура("КодТерминала,Период,Широта,Долгота,Скорость,Направление,ДанныеДатчиков");
		ЗаполнитьЗначенияСвойств(ДанныеПредыдущейТочки, ТекущаяСтрока);
		ДанныеПредыдущейТочки.ДанныеДатчиков = ItobОбщегоНазначенияКлиентСервер.ПреобразоватьСтрокуВДанныеДатчиков(
			СтруктураЗаписиДанныеТерминала.ДанныеДатчиков);
						
		// Контролируем запись с максимальным периодом - для поддержания корректной актуальности.
		Если (НЕ ЗначениеЗаполнено(ДанныеМаксимальныйПериод.Период))
			ИЛИ ДанныеМаксимальныйПериод.Терминал <> ТекущийТерминал
			ИЛИ СтруктураЗаписиДанныеТерминала.Период > ДанныеМаксимальныйПериод.Период Тогда
			
			ЗаполнитьЗначенияСвойств(ДанныеМаксимальныйПериод, СтруктураЗаписиДанныеТерминала);
			ДанныеМаксимальныйПериод.Счетчик = ТекущаяСтрока.Счетчик;
		
		КонецЕсли;
		
		Если Счетчик = ТаблицаДанных.Количество()-1 ИЛИ ТекущаяСтрока.КодТерминала <> ТаблицаДанных[Счетчик+1].КодТерминала Тогда
			// Обновим таблицу актуальности
			
			СтруктураОтбора = Новый Структура("Терминал", ТекущийТерминал);
			Выборка = РегистрыСведений.ItobКрайниеДанныеТерминалов.Выбрать(СтруктураОтбора);
			ВыборкаПустая = Истина;
			Пока Выборка.Следующий() Цикл
				ЗаписьРегистра = Выборка.ПолучитьМенеджерЗаписи();
				
				ВыборкаПустая = Ложь;
				Прервать;
			КонецЦикла;
			Если ВыборкаПустая Тогда
			    ЗаписьРегистра = РегистрыСведений.ItobКрайниеДанныеТерминалов.СоздатьМенеджерЗаписи();
				ЗаписьРегистра.Терминал = ТекущийТерминал;
			КонецЕсли;
			
			ЗаписьРегистра.ДатаВремя = СтруктураЗаписиДанныеТерминала.Период;
			ЗаполнитьЗначенияСвойств(ЗаписьРегистра, СтруктураЗаписиДанныеТерминала);
			ЗаписьРегистра.Счетчик = ТекущаяСтрока.Счетчик;
			ЗаписьРегистра.Записать(Истина);
						
			// При необходимости обновим актуальность данных терминалов
			ВыборкаАктуальность = РегистрыСведений.ItobАктуальностьДанныхТерминалов.Выбрать(СтруктураОтбора);
			ВыборкаПустая = Истина;
			Пока ВыборкаАктуальность.Следующий() Цикл
				ЗаписьРегистраАктуальность = ВыборкаАктуальность.ПолучитьМенеджерЗаписи();

				ВыборкаПустая = Ложь;
				Прервать;
			КонецЦикла;
			Если ВыборкаПустая Тогда
				ЗаписьРегистраАктуальность = РегистрыСведений.ItobАктуальностьДанныхТерминалов.СоздатьМенеджерЗаписи();
				ЗаписьРегистраАктуальность.Терминал = ТекущийТерминал;
			КонецЕсли;
			
			Если ДанныеМаксимальныйПериод.Период > ЗаписьРегистраАктуальность.ДатаВремя Тогда
				
				ЗаполнитьЗначенияСвойств(ЗаписьРегистраАктуальность, ДанныеМаксимальныйПериод);
				ЗаписьРегистраАктуальность.ДатаВремя = ДанныеМаксимальныйПериод.Период;				
				
				// Пишем шлейф
				КопияДанныеТерминала = ТаблицаБД.Скопировать();
				Если НЕ ПустаяСтрока(ЗаписьРегистраАктуальность.КрайниеТочки) Тогда
					ДанныеКрайниеТочки = ItobОбщегоНазначенияКлиентСервер.ПреобразоватьСтрокуВДанныеКрайниеТочки(ЗаписьРегистраАктуальность.КрайниеТочки);
					Для каждого СтрТекущийХвост Из ДанныеКрайниеТочки Цикл
						ЗаполнитьЗначенияСвойств(КопияДанныеТерминала.Добавить(), СтрТекущийХвост);					
					КонецЦикла;
				КонецЕсли;
				
				КопияДанныеТерминала.Сортировать("Период Убыв");
					
				ТабНовыйХвост = ТЗХвостТерминала.Скопировать();
				Для СчетчикХ = 1 По МИН(ТекущиеНастройкиОтображения.ДлинаШлейфаOnlineСлежение,КопияДанныеТерминала.Количество()-1) Цикл
					ЗаполнитьЗначенияСвойств(ТабНовыйХвост.Добавить(), КопияДанныеТерминала[СчетчикХ]);
				КонецЦикла;
				
				ЗаписьРегистраАктуальность.КрайниеТочки = ItobОбщегоНазначенияКлиентСервер.ПреобразоватьДанныеКрайниеТочкиВСтроку(ТабНовыйХвост);
				
				ЗаписьРегистраАктуальность.Записать(Истина);
			
			КонецЕсли;
			
			// Обнулим данные макс. актуальности
			ДанныеМаксимальныйПериод.Период = Неопределено;
									
			ТаблицаБД.Очистить();			
		
		КонецЕсли;		
	
	КонецЦикла;
			
	// Запись статистики
	
	СтруктураОтбора = Новый Структура("Поток", ИмяПотока);
	Выборка = РегистрыСведений.ItobСтатистикаРепликации.Выбрать(СтруктураОтбора);
	ВыборкаПустая = Истина;
	Пока Выборка.Следующий() Цикл
	    ЗаписьРегистра = Выборка.ПолучитьМенеджерЗаписи();
		
		Если НачалоМесяца(ЗаписьРегистра.ПериодКрайнейРепликации) < НачалоМесяца(лТекущаяДата) Тогда
			ЗаписьРегистра.ЗаписейЗаМесяц = 0;
		КонецЕсли;
		
		Если НачалоДня(ЗаписьРегистра.ПериодКрайнейРепликации) < НачалоДня(лТекущаяДата) Тогда
			ЗаписьРегистра.ЗаписейЗаСутки = 0;
		КонецЕсли;
		
		Если НачалоЧаса(ЗаписьРегистра.ПериодКрайнейРепликации) < НачалоЧаса(лТекущаяДата) Тогда
			ЗаписьРегистра.ЗаписейЗаЧас = 0;
		КонецЕсли;
		
		ВыборкаПустая = Ложь;
		Прервать;
	КонецЦикла;
	Если ВыборкаПустая Тогда
	    ЗаписьРегистра = РегистрыСведений.ItobСтатистикаРепликации.СоздатьМенеджерЗаписи();
		ЗаписьРегистра.Поток = ИмяПотока;
	КонецЕсли;
	
	ЗаписьРегистра.ПериодКрайнейРепликации = лТекущаяДата;
	ЗаписьРегистра.ЗаписейВсего    = ЗаписьРегистра.ЗаписейВсего     + ТаблицаДанных.Количество();
	ЗаписьРегистра.ЗаписейЗаМесяц  = ЗаписьРегистра.ЗаписейЗаМесяц   + ТаблицаДанных.Количество();
	ЗаписьРегистра.ЗаписейЗаСутки  = ЗаписьРегистра.ЗаписейЗаСутки   + ТаблицаДанных.Количество();
	ЗаписьРегистра.ЗаписейЗаЧас    = ЗаписьРегистра.ЗаписейЗаЧас     + ТаблицаДанных.Количество();
	
	ЗаписьРегистра.Записать(Истина);
	
	Попытка
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Репликация'","ru"), УровеньЖурналаРегистрации.Ошибка,,,НСтр("ru = 'Ошибка репликации:'")+" "+ОписаниеОшибки());
		Возврат;
	КонецПопытки; 
			
КонецПроцедуры // WriteTerminalData()

#КонецОбласти

Функция ПолучитьПрофилиЗаписиДанныхДатчиков()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ItobПрофилиЗаписиДанныхДатчиков.Ссылка КАК ПрофильЗаписи,
	               |	ItobПрофилиЗаписиДанныхДатчиков.Датчики.(
	               |		НомерСтроки,
	               |		Датчик,
	               |		Датчик.Код КАК КодДатчика
	               |	)
	               |ИЗ
	               |	Справочник.ItobПрофилиЗаписиДанныхДатчиков КАК ItobПрофилиЗаписиДанныхДатчиков";
				   
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьПрофилиЗаписиДанныхДатчиков()

// Формирует XML для запроса данных по репликации
//
Функция СформироватьXMLЗапросаРепликации(Логин, Пароль)
	
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");	
	
	Запрос = Новый Запрос;	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ItobТерминалы.Код КАК КодТерминала,
	               |	ЕСТЬNULL(ItobКрайниеДанныеТерминалов.Счетчик, 0) КАК СчетчикАктуальности
	               |ИЗ
	               |	Справочник.ItobТерминалы КАК ItobТерминалы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ItobКрайниеДанныеТерминалов КАК ItobКрайниеДанныеТерминалов
	               |		ПО (ItobКрайниеДанныеТерминалов.Терминал = ItobТерминалы.Ссылка)
	               |ГДЕ
	               |	(НЕ ItobТерминалы.ПометкаУдаления)
	               |	И ItobТерминалы.Код <> 0";	
	Выборка = Запрос.Выполнить().Выбрать();
	
	pXML = Новый ЗаписьXML();	
	pXML.ОткрытьФайл(ИмяФайла);
	pXML.ЗаписатьНачалоЭлемента("PeplicationParams");
	// Атрибуты работы
	pXML.ЗаписатьАтрибут("Login", Логин);	
	pXML.ЗаписатьАтрибут("Pwd", Пароль);	
	pXML.ЗаписатьАтрибут("QueryMethod", "1");	
	pXML.ЗаписатьАтрибут("Output", "xml");	
	pXML.ЗаписатьАтрибут("Pack", "2");	
	Количество = 0;
	// Список терминалов
	Пока Выборка.Следующий() Цикл
		pXML.ЗаписатьНачалоЭлемента("DEVICE");				
		// Код и счетчик
		pXML.ЗаписатьАтрибут("code",    Формат(Выборка.КодТерминала,"ЧН=0; ЧГ=0"));	
		pXML.ЗаписатьАтрибут("counter", Формат(Выборка.СчетчикАктуальности, "ЧН=0; ЧГ=0"));
		pXML.ЗаписатьКонецЭлемента(); // POINTS
	КонецЦикла;	
    pXML.ЗаписатьКонецЭлемента(); // PeplicationParams
	pXML.Закрыть();
	
	Возврат ИмяФайла;
	
КонецФункции

// Разбор XML файла данных от трекеров
//
Процедура ОбработатьДанныеРепликации(ИмяФайла, ИмяПотока)
	
	ЧтениеXML = Новый ЧтениеXML;
			
	ТабДанных = Новый ТаблицаЗначений;
	ТабДанных.Колонки.Добавить("КодТерминала");
	ТабДанных.Колонки.Добавить("Период");
	ТабДанных.Колонки.Добавить("Широта");
	ТабДанных.Колонки.Добавить("Долгота");
	ТабДанных.Колонки.Добавить("Высота");
	ТабДанных.Колонки.Добавить("Направление");
	ТабДанных.Колонки.Добавить("Скорость");
	ТабДанных.Колонки.Добавить("ЧислоСпутников");
	ТабДанных.Колонки.Добавить("Счетчик");
	ТабДанных.Колонки.Добавить("ДанныеДатчиков");

	
	ТабДанных.Индексы.Добавить("КодТерминала,Счетчик");
	
	ТабДатчиков = Новый ТаблицаЗначений;
	ТабДатчиков.Колонки.Добавить("Код");
	ТабДатчиков.Колонки.Добавить("Данные");
	
	ВерсияСервера = "";
	ВерсияФормата = "";
	
	Попытка		
		
		ЧтениеXML.ОткрытьФайл(ИмяФайла);	
		
		Пока ЧтениеXML.Прочитать() Цикл
			
			Если ЧтениеXML.Имя="imcs" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				
				ВерсияСервера = ЧтениеXML.ПолучитьАтрибут("version");
				ВерсияФормата = ЧтениеXML.ПолучитьАтрибут("format_version");	
				
			КонецЕсли;
			
			Если ЧтениеXML.Имя="p" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				
				СтрДанных = ТабДанных.Добавить();
				
				Попытка
				
					СтрДанных.КодТерминала   = Число(ЧтениеXML.ПолучитьАтрибут("code"));
					СтрДанных.Период         = Дата(ЧтениеXML.ПолучитьАтрибут("period"));
					СтрДанных.Широта         = Число(ЧтениеXML.ПолучитьАтрибут("lat"));
					СтрДанных.Долгота        = Число(ЧтениеXML.ПолучитьАтрибут("lon"));
					СтрДанных.Высота         = Число(ЧтениеXML.ПолучитьАтрибут("altitude"));
					СтрДанных.Направление    = Число(ЧтениеXML.ПолучитьАтрибут("angle"));
					СтрДанных.Скорость       = Число(ЧтениеXML.ПолучитьАтрибут("speed"));
					СтрДанных.ЧислоСпутников = Число(ЧтениеXML.ПолучитьАтрибут("vsat"));
					СтрДанных.Счетчик        = Число(ЧтениеXML.ПолучитьАтрибут("counter"));	
				
				Исключение
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Репликация'","ru"),УровеньЖурналаРегистрации.Ошибка,,,НСтр("ru = 'Разбор XML, ошибка преобразования:'")+" "+ОписаниеОшибки());
					ТабДанных.Удалить(СтрДанных);
					Продолжить;
					
				КонецПопытки;				
				
				СтрДанных.ДанныеДатчиков = ТабДатчиков.Скопировать();
				
				РезультатЧтения = Истина;
				Пока РезультатЧтения И НЕ (ЧтениеXML.Имя = "p" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
					
					Если ЧтениеXML.Имя="sensor" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						НовСтрокаДатчиков = СтрДанных.ДанныеДатчиков.Добавить();
						
						Попытка						
							НовСтрокаДатчиков.Код = Число(ЧтениеXML.ПолучитьАтрибут("code"));
							НовСтрокаДатчиков.Данные = Число(ЧтениеXML.ПолучитьАтрибут("data"));
							
						Исключение
							ЗаписьЖурналаРегистрации(НСтр("ru = 'Репликация'","ru"),УровеньЖурналаРегистрации.Ошибка,,,НСтр("ru = 'Разбор XML, ошибка преобразования данных датчиков:'")+" "+ОписаниеОшибки());
							СтрДанных.ДанныеДатчиков.Удалить(НовСтрокаДатчиков);
														
						КонецПопытки;
						
					КонецЕсли;	
					
					РезультатЧтения = ЧтениеXML.Прочитать();	
				КонецЦикла;
				
			КонецЕсли;
						
		КонецЦикла;	
		
		ЧтениеXML.Закрыть();
		
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Репликация'","ru"),УровеньЖурналаРегистрации.Ошибка,,,НСтр("ru = 'Ошибка разбора XML файла :'")+" "+ОписаниеОшибки());
		КопироватьФайл(ИмяФайла, ИмяФайла+".error")
	КонецПопытки;
	
	ТабДанных.Сортировать("КодТерминала Возр, Счетчик Возр");
	
	// Получаем таблицу "старого" формата
	
	ТабДанныхСтарыйФормат = GetTemplateOfDataTable();
	ТабДанныхСтарыйФормат.Колонки.Добавить("ЧислоСпутников");
	Для каждого СтрДанных Из ТабДанных Цикл
		
		НовСтрокаСтарыйФормат = ТабДанныхСтарыйФормат.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрокаСтарыйФормат, СтрДанных);
		
		Для Счетчик = 0 По СтрДанных.ДанныеДатчиков.Количество()-1 Цикл
		
			Если ТабДанныхСтарыйФормат.Колонки.Количество() < 10+2*Счетчик  Тогда
				ТабДанныхСтарыйФормат.Колонки.Добавить();
				ТабДанныхСтарыйФормат.Колонки.Добавить();			
			КонецЕсли;
			
			НовСтрокаСтарыйФормат.Установить(8+2*Счетчик, СтрДанных.ДанныеДатчиков[Счетчик].Код);
			НовСтрокаСтарыйФормат.Установить(9+2*Счетчик, СтрДанных.ДанныеДатчиков[Счетчик].Данные);	
		
		КонецЦикла;
		
		Если ТабДанныхСтарыйФормат.Количество() >= 200 Тогда
			WriteTerminalData(ТабДанныхСтарыйФормат, ИмяПотока, 1);			
			ТабДанныхСтарыйФормат.Очистить();
		
		КонецЕсли;
	
	КонецЦикла;
	
	WriteTerminalData(ТабДанныхСтарыйФормат, ИмяПотока, 1);
	
КонецПроцедуры
	
#Область ПодсистемаItobЦентрСпутниковогоМониторингаСобытия
	
// Возвращает таблицу активных подписок на события
//
Функция ПолучитьАктивныеПодписки(МассивКодыТерминалов)
	Если ItobОбщегоНазначенияВызовСервера.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.События") Тогда
		МодульОбработкаСобытийСервер = ОбщегоНазначения.ОбщийМодуль("ItobОбработкаСобытий");
		Возврат МодульОбработкаСобытийСервер.ПолучитьАктивныеПодписки(МассивКодыТерминалов);
	КонецЕсли;
	
	Возврат Неопределено;			   
КонецФункции // ПолучитьТаблицуПодписок()

#КонецОбласти 

// Тестирование соединения с сервером
//
Функция ТестСоединенияССервером(Сервер, Порт, Логин, Пароль, ТекстОшибки) Экспорт
	
	ЗащищенноеСоединениеПорт = ?(Число(Порт) = 443, "s", "");
	
	АдресСтраницы = "http"+ЗащищенноеСоединениеПорт+"://"+СокрЛП(Сервер)+":"+Формат(Порт, "ЧН=0; ЧГ=0")+"/TestConnection?login="+Логин+"&pwd="+Пароль;
	
	ИмяФайла = КаталогВременныхФайлов()+"replic-result-"+Строка(Новый УникальныйИдентификатор())+".html";
		
	ПараметрыПолучения = Новый Структура;
	ПараметрыПолучения.Вставить("ПутьДляСохранения", ИмяФайла);
	
	РезультатСкачивания = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(АдресСтраницы,ПараметрыПолучения);
	Если НЕ РезультатСкачивания.Статус Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка соединения с сервером репликации:'")+" "+РезультатСкачивания.СообщениеОбОшибке;
		Возврат Ложь;
	КонецЕсли;
	
	ТекстовыйДок = Новый ТекстовыйДокумент;
	ТекстовыйДок.Прочитать(ИмяФайла);
	
	Если ТекстовыйДок.КоличествоСтрок()=1 И ТекстовыйДок.ПолучитьСтроку(1) = "OK" Тогда
		Возврат Истина;
		
	Иначе
		ТекстОшибки = НСтр("ru = 'Ответ сервера:'")+" "+ТекстовыйДок.ПолучитьТекст();
		Возврат Ложь;		
	
	КонецЕсли;	

КонецФункции // ТестСоединенияССервером()

// Процедура вызова регламентного задания
//
Процедура РепликацияРегламентноеЗадание(ИмяПотока="Основной") Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	// Список объектов
	
	Логин = "";
	Пароль = "";
	
	Если ИмяПотока = "Резервный" Тогда
		СтруктураПараметрыРепликации = Константы.ItobПараметрыРепликацииРезервныйСервер.Получить().Получить();
		
		Если ТипЗнч(СтруктураПараметрыРепликации) = Тип("Структура") Тогда
			СтруктураПараметрыРепликации.Свойство("Логин" , Логин);
			СтруктураПараметрыРепликации.Свойство("Пароль", Пароль);	
		КонецЕсли;	
		
	Иначе
		СтруктураПараметрыРепликации = Константы.ItobПараметрыРепликации.Получить().Получить();	
		
		Логин = Константы.ItobЛогинРепликации.Получить();
		Пароль = Константы.ItobПарольРепликации.Получить();
	
	КонецЕсли;	
	
	Если ТипЗнч(СтруктураПараметрыРепликации) <> Тип("Структура") Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Репликация'","ru"),УровеньЖурналаРегистрации.Ошибка,,,
			НСтр("ru = 'Ошибка репликации, поток'")+" "+ИмяПотока
				+НСтр("ru = ': не указаны параметры'"));
		Возврат;		
			
	КонецЕсли;
	
	ИспользоватьРепликацию = Ложь;
	Сервер = "";
	Порт = 0;
		
	СтруктураПараметрыРепликации.Свойство("ИспользоватьРепликацию", ИспользоватьРепликацию);
	СтруктураПараметрыРепликации.Свойство("Сервер"                , Сервер);
	СтруктураПараметрыРепликации.Свойство("Порт"                  , Порт);
		
	Если (НЕ ИспользоватьРепликацию) ИЛИ Сервер="" ИЛИ Порт=0 ИЛИ Логин="" Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Репликация'","ru"),УровеньЖурналаРегистрации.Примечание,,,
			НСтр("ru = 'Репликация не выполнена, поток'")+" "+ИмяПотока
				+НСтр("ru = ', поскольку не все параметры указаны'"));
		Возврат;
	
	КонецЕсли;
	
	ИмяФайлаЗапросаРепликации = СформироватьXMLЗапросаРепликации(Логин,Пароль);
			
	ИмяФайлаZIP = ПолучитьИмяВременногоФайла("zip");
	КаталогИзвлечения = Лев(ИмяФайлаZIP, СтрДлина(ИмяФайлаZIP)-4);
		
#Если НаКлиенте Тогда
	НастройкаПроксиСервера = ItobРаботаС_БСП.НастройкиПроксиНаКлиенте();
#Иначе
	НастройкаПроксиСервера = ItobРаботаС_БСП.НастройкиПроксиНаСервере();
#КонецЕсли

	Если НастройкаПроксиСервера <> Неопределено
	   И НастройкаПроксиСервера["ИспользоватьПрокси"] = Ложь Тогда
		НастройкаПроксиСервера = Неопределено;
	КонецЕсли;
	
	Если НастройкаПроксиСервера=Неопределено Тогда
		Прокси = Неопределено;
	Иначе
		Прокси = Новый ИнтернетПрокси;
		Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкаПроксиСервера["НеИспользоватьПроксиДляЛокальныхАдресов"];
		Прокси.Установить("https", НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"]);
		Прокси.Пользователь = НастройкаПроксиСервера["Пользователь"];
		Прокси.Пароль       = НастройкаПроксиСервера["Пароль"];
	КонецЕсли;
	
	Таймаут = 60; // 60 секунд - таймаут соединения
	
	HTTP = Новый HTTPСоединение(Сервер, Порт, Неопределено, Неопределено, Прокси, Таймаут, ?(Порт = 443, Новый ЗащищенноеСоединениеOpenSSL, Неопределено));
	Попытка
		HTTP.ОтправитьДляОбработки(ИмяФайлаЗапросаРепликации, "/GetTerminalData", ИмяФайлаZIP);		
		РезультатСкачивания = Истина;
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Репликация'","ru"),УровеньЖурналаРегистрации.Ошибка,,,
			НСтр("ru = 'Ошибка репликации, поток'")+" "+ИмяПотока
				+НСтр("ru = ': Ошибка получения файла /GetTerminalData'"));		
		РезультатСкачивания = Ложь;
	КонецПопытки;
	
	Если РезультатСкачивания Тогда
	
		ЧтениеZIP = Новый ЧтениеZipФайла();		
		Попытка			
			ЧтениеZIP.Открыть(ИмяФайлаZIP);
			ЧтениеZIP.ИзвлечьВсе(КаталогИзвлечения);
			
			НайденныеФайлы = НайтиФайлы(КаталогИзвлечения,"*.*");
			Для каждого НайденныйФайл Из НайденныеФайлы Цикл
				ОбработатьДанныеРепликации(НайденныйФайл.ПолноеИмя, ИмяПотока);
						
			КонецЦикла;
			
			ЧтениеZIP.Закрыть();
					
			Для каждого НайденныйФайл Из НайденныеФайлы Цикл
				УдалитьФайлы(НайденныйФайл.ПолноеИмя);									
			КонецЦикла;
			
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Репликация'","ru"),УровеньЖурналаРегистрации.Ошибка,,,
				НСтр("ru = 'Ошибка обработки данных репликации, поток'")+" "+ИмяПотока+": "+ОписаниеОшибки());
			УдалитьФайлы(ИмяФайлаZIP);
			Возврат;		
		КонецПопытки;
	
	КонецЕсли;
	
	УдалитьФайлы(КаталогИзвлечения);
	УдалитьФайлы(ИмяФайлаZIP);
	УдалитьФайлы(ИмяФайлаЗапросаРепликации);

КонецПроцедуры

Функция ПолучитьДанныеПредыдущейТочкиБезФильтров(Период, Терминал) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Терминал", Терминал);
	Запрос.УстановитьПараметр("КодТерминала", Терминал.Код);
	Запрос.УстановитьПараметр("Период", Период);
	
	Если ItobВызовСервераПовтИсп.ДанныеТерминаловБратьИзБазыIMCS() Тогда
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ДанныеТерминалов.Период,
		               |	ДанныеТерминалов.КодТерминала КАК КодТерминала,
		               |	ДанныеТерминалов.Широта,
		               |	ДанныеТерминалов.Долгота,
		               |	ДанныеТерминалов.Скорость,
		               |	ДанныеТерминалов.Направление,
		               |	ДанныеТерминалов.ДанныеДатчиков
		               |ИЗ
		               |	ВнешнийИсточникДанных.ItobДанныеСервераСбораДанных.Таблица.ItobДанныеТерминаловIMCS КАК ДанныеТерминалов
		               |ГДЕ
		               |	ДанныеТерминалов.Период < &Период
		               |	И ДанныеТерминалов.КодТерминала = &КодТерминала
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ДанныеТерминалов.Период УБЫВ";
					   
		ВнешниеИсточникиДанных.ItobДанныеСервераСбораДанных.НачатьТранзакцию(,УровеньИзоляцииТранзакций.ЧтениеНезафиксированных);
		РезультатБазовогоЗапроса = Запрос.Выполнить();
		// Без метода отмены транзакции, так как используется только чтение данных из внешнего источника данных.
		ВнешниеИсточникиДанных.ItobДанныеСервераСбораДанных.ЗафиксироватьТранзакцию();
		
	Иначе
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ДанныеТерминалов.Период,
		               |	ДанныеТерминалов.Терминал.Код КАК КодТерминала,
		               |	ДанныеТерминалов.Широта,
		               |	ДанныеТерминалов.Долгота,
		               |	ДанныеТерминалов.Скорость,
		               |	ДанныеТерминалов.Направление,
		               |	ДанныеТерминалов.ДанныеДатчиков
		               |ИЗ
		               |	РегистрСведений.ItobДанныеТерминалов КАК ДанныеТерминалов
		               |ГДЕ
		               |	ДанныеТерминалов.Период < &Период
		               |	И ДанныеТерминалов.Терминал = &Терминал
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ДанныеТерминалов.Период УБЫВ";
		РезультатБазовогоЗапроса = Запрос.Выполнить();
		
	КонецЕсли;	
	
	Результат = Неопределено;
	
	Выборка = РезультатБазовогоЗапроса.Выбрать();
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		
		Результат = Новый Структура("КодТерминала,Период,Широта,Долгота,Скорость,Направление,ДанныеДатчиков");
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		Результат.ДанныеДатчиков = ItobОбщегоНазначенияКлиентСервер.ПреобразоватьСтрокуВДанныеДатчиков(Выборка.ДанныеДатчиков);
		
		Если ItobВызовСервераПовтИсп.ДанныеТерминаловБратьИзБазыIMCS() Тогда
			
			// Возможно, присутствуют виртуальные датчики
			ЗапросДоп = Новый Запрос("ВЫБРАТЬ
			                         |	ДанныеТерминаловДополнения.ДанныеВиртуальныхДатчиков
			                         |ИЗ
			                         |	РегистрСведений.ItobДанныеТерминаловДополнения КАК ДанныеТерминаловДополнения
			                         |ГДЕ
			                         |	ДанныеТерминаловДополнения.ДатаВремя = &Период
			                         |	И ДанныеТерминаловДополнения.Терминал = &Терминал"); 
			ЗапросДоп.УстановитьПараметр("Период", Период);
			ЗапросДоп.УстановитьПараметр("Терминал", Терминал);
			ВыборкаДоп = ЗапросДоп.Выполнить().Выбрать();
			Если ВыборкаДоп.Количество() > 0 Тогда
				ВыборкаДоп.Следующий();
				Если НЕ ПустаяСтрока(ВыборкаДоп.ДанныеВиртуальныхДатчиков) Тогда
					СоотвДанныеВиртуальныхДатчиков = ItobОбщегоНазначенияКлиентСервер.ПреобразоватьСтрокуВДанныеДатчиков(ВыборкаДоп.ДанныеВиртуальныхДатчиков);
					Для каждого ЭлемВиртуальныхДатчиков Из СоотвДанныеВиртуальныхДатчиков Цикл
						Результат.ДанныеДатчиков.Вставить(ЭлемВиртуальныхДатчиков.Ключ, ЭлемВиртуальныхДатчиков.Значение);					
					КонецЦикла;
					
				КонецЕсли;				
			КонецЕсли;	
		
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции // ПолучитьДанныеПредыдущейТочкиБезФильтров(ТекущаяСтрока.Период, ТекущийТерминал);()

#КонецОбласти

