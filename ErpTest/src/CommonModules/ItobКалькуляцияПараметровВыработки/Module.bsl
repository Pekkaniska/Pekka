////////////////////////////////////////////////////////////////////////////////
// Калькуляция параметров выработки
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьВалидноеЗначениеДатчика(Терминал, Датчик, Период, НачЗначение, КонЗначение)
	
	КонПериода = ItobОперативныйМониторинг.ПривестиКДатеВремениПоГринвичу(Период)-1;
	НачПериода = КонПериода-3600*24*5;
	КодДатчика = Датчик.Код;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачПериода", НачПериода);
	Запрос.УстановитьПараметр("КонПериода", КонПериода);
	Запрос.УстановитьПараметр("Терминал", Терминал);
	Запрос.УстановитьПараметр("КодТерминала", Терминал.Код);
	
	Если ItobВызовСервераПовтИсп.ДанныеТерминаловБратьИзБазыIMCS() Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	ДанныеТерминалов.Период,
		               |	ДанныеТерминалов.ДанныеДатчиков
		               |ИЗ
		               |	ВнешнийИсточникДанных.ItobДанныеСервераСбораДанных.Таблица.ItobДанныеТерминаловIMCS КАК ДанныеТерминалов
		               |ГДЕ
		               |	ДанныеТерминалов.Период МЕЖДУ &НачПериода И &КонПериода
		               |	И ДанныеТерминалов.КодТерминала = &КодТерминала
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ДанныеТерминалов.Период УБЫВ";
		ВнешниеИсточникиДанных.ItobДанныеСервераСбораДанных.НачатьТранзакцию(,УровеньИзоляцииТранзакций.ЧтениеНезафиксированных);
		РезультатБазовогоЗапроса = Запрос.Выполнить();
		// Без метода отмены транзакции, так как используется только чтение данных из внешнего источника данных.
		ВнешниеИсточникиДанных.ItobДанныеСервераСбораДанных.ЗафиксироватьТранзакцию();
			
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		               |	ДанныеТерминалов.Период,
		               |	ДанныеТерминалов.ДанныеДатчиков
		               |ИЗ
		               |	РегистрСведений.ItobДанныеТерминалов КАК ДанныеТерминалов
		               |ГДЕ
		               |	ДанныеТерминалов.Период МЕЖДУ &НачПериода И &КонПериода
		               |	И ДанныеТерминалов.Терминал = &Терминал
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ДанныеТерминалов.Период УБЫВ";
		РезультатБазовогоЗапроса = Запрос.Выполнить();			   
	
	КонецЕсли;
	
	Выборка = РезультатБазовогоЗапроса.Выбрать();			   
	
	Пока Выборка.Следующий() Цикл
		ДанныеДатчиков = ItobОбщегоНазначенияКлиентСервер.ПреобразоватьСтрокуВДанныеДатчиков(Выборка.ДанныеДатчиков);
		ЗначениеДатчика = ДанныеДатчиков[КодДатчика];
		Если ЗначениеДатчика <> Неопределено Тогда
			Если ЗначениеДатчика >= НачЗначение
				И ЗначениеДатчика <= КонЗначение Тогда
				
				Возврат ЗначениеДатчика;
			
			КонецЕсли;			
		
		КонецЕсли;		
	
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьВалидноеЗначение()

// Функция преобразовывает переданное значение в соответствии с калибровочным графиком.
//
Функция ПреобразоватьЗначениеПоКалибровочномуГрафику(Значение, КалибровочныйГрафик) Экспорт
	
	Результат = 0;
	
	Для Счетчик = 0 По КалибровочныйГрафик.Показатели.Количество()-2 Цикл
		Если Значение >= КалибровочныйГрафик.Показатели[Счетчик].Вход
			И Значение <= КалибровочныйГрафик.Показатели[Счетчик+1].Вход Тогда
			
			СтрКалибровки1 = КалибровочныйГрафик.Показатели[Счетчик];
			СтрКалибровки2 = КалибровочныйГрафик.Показатели[Счетчик+1];
			
			Результат = (СтрКалибровки1.Выход-СтрКалибровки2.Выход)/(СтрКалибровки1.Вход-СтрКалибровки2.Вход)*Значение
				+ (СтрКалибровки1.Вход*СтрКалибровки2.Выход-СтрКалибровки2.Вход*СтрКалибровки1.Выход)/(СтрКалибровки1.Вход-СтрКалибровки2.Вход);
				
			Прервать;			
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции // ПреобразоватьПоКалибровочномуГрафику()

Функция ПолучитьЗначениеПараметраПоИзменениюЗначенияДатчика(
		Маршрут, Терминал, НазначениеДатчика, Датчик, КалибровочныйГрафик, НачДата, УчитыватьКрайнююТочку=Ложь) Экспорт

	// Обработка изменения значения датчиков
	
	Если НазначениеДатчика.Пустая() Тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	КодДатчика = Формат(Датчик.Код, "ЧН=0; ЧГ=0");
	
	ДопускатьЗначенияВнеВходногоДиапазона = Истина;
	ДопустимоеЗначениеНачало = 0;
	ДопустимоеЗначениеКонец  = 0;
	
	Если НЕ КалибровочныйГрафик.Пустая() Тогда
		ДопускатьЗначенияВнеВходногоДиапазона = КалибровочныйГрафик.ДопускатьЗначенияВнеВходногоДиапазона;
		Если НЕ ДопускатьЗначенияВнеВходногоДиапазона Тогда
			Показатели = КалибровочныйГрафик.Показатели.Выгрузить();
			Показатели.Сортировать("Вход Возр");
			
			Если Показатели.Количество() > 1 Тогда
				ДопустимоеЗначениеНачало = Показатели[0].Вход;	
				ДопустимоеЗначениеКонец  = Показатели[Показатели.Количество()-1].Вход;
				
			КонецЕсли;
			
		КонецЕсли;				
		
	КонецЕсли;			
	
	Значение = 0;
	
	МинЧислоТочек = ?(УчитыватьКрайнююТочку, 2, 3);
	ИндексКрайнейТочки = ?(УчитыватьКрайнююТочку, Маршрут.Количество()-1, Маршрут.Количество()-2);
	
	Если Маршрут.Количество() >= МинЧислоТочек Тогда
		
		ДанныеНаНачало = Маршрут[0]["ЗначениеДатчика"+КодДатчика];
		ДанныеНаКонец = Маршрут[ИндексКрайнейТочки]["ЗначениеДатчика"+КодДатчика];
		
		// Валидны ли данные на начало ?
		
		Если ДанныеНаНачало=NULL ИЛИ ДанныеНаНачало=Неопределено 
			ИЛИ ((НЕ ДопускатьЗначенияВнеВходногоДиапазона) И (ДанныеНаНачало < ДопустимоеЗначениеНачало ИЛИ ДанныеНаНачало > ДопустимоеЗначениеКонец)) Тогда
			
			// Точка невалидна, надо смотреть предыдущие данные
			ДанныеНаНачало = ПолучитьВалидноеЗначениеДатчика(Терминал, Датчик, НачДата, ДопустимоеЗначениеНачало, ДопустимоеЗначениеКонец);
			Если ДанныеНаНачало = Неопределено Тогда
				
				// В предыдущие дни валидного значения нет, ищем в текущем дне
				Для НомерСтроки = 1 По Маршрут.Количество()-2 Цикл
					
					Если Маршрут[НомерСтроки]["ЗначениеДатчика"+КодДатчика]=NULL
						ИЛИ Маршрут[НомерСтроки]["ЗначениеДатчика"+КодДатчика]=Неопределено Тогда
						Продолжить;								
					КонецЕсли;
					
					Если Маршрут[НомерСтроки]["ЗначениеДатчика"+КодДатчика] >= ДопустимоеЗначениеНачало
						И Маршрут[НомерСтроки]["ЗначениеДатчика"+КодДатчика] <= ДопустимоеЗначениеКонец Тогда
						
						ДанныеНаНачало = Маршрут[НомерСтроки]["ЗначениеДатчика"+КодДатчика];
						Прервать;								
						
					КонецЕсли;								
					
				КонецЦикла;
				
			КонецЕсли;						
			
		КонецЕсли;
		
		Если ДанныеНаКонец=NULL ИЛИ ДанныеНаКонец=Неопределено
			ИЛИ ((НЕ ДопускатьЗначенияВнеВходногоДиапазона) И (ДанныеНаКонец < ДопустимоеЗначениеНачало ИЛИ ДанныеНаКонец > ДопустимоеЗначениеКонец)) Тогда
			
			ДанныеНаКонец = Неопределено;
			
			// Точка на конец невалидна, надо смотреть предыдущие данные
			НомерСтроки = ИндексКрайнейТочки-1;
			Пока НомерСтроки >= 0 Цикл
				
				Если Маршрут[НомерСтроки]["ЗначениеДатчика"+КодДатчика]=NULL
					ИЛИ Маршрут[НомерСтроки]["ЗначениеДатчика"+КодДатчика]=Неопределено Тогда
					НомерСтроки = НомерСтроки-1;
					Продолжить;								
				КонецЕсли;
				
				Если Маршрут[НомерСтроки]["ЗначениеДатчика"+КодДатчика] >= ДопустимоеЗначениеНачало
					И Маршрут[НомерСтроки]["ЗначениеДатчика"+КодДатчика] <= ДопустимоеЗначениеКонец Тогда
					
					ДанныеНаКонец = Маршрут[НомерСтроки]["ЗначениеДатчика"+КодДатчика];
					Прервать;								
					
				КонецЕсли;
				
				НомерСтроки = НомерСтроки-1;
				
			КонецЦикла;						
			
		КонецЕсли;
		
		Если ДанныеНаНачало <> Неопределено И ДанныеНаНачало <> NULL И ДанныеНаКонец <> Неопределено И ДанныеНаКонец <> NULL Тогда
			
			Если НЕ КалибровочныйГрафик.Пустая() Тогда
				
				ДанныеНаНачало = ПреобразоватьЗначениеПоКалибровочномуГрафику(ДанныеНаНачало, КалибровочныйГрафик);
				ДанныеНаКонец = ПреобразоватьЗначениеПоКалибровочномуГрафику(ДанныеНаКонец, КалибровочныйГрафик);				
				
			КонецЕсли;
			
			Значение = МАКС(ДанныеНаКонец-ДанныеНаНачало,0);
			
		КонецЕсли;				
		
		
	КонецЕсли;	
	
	Возврат Значение;

КонецФункции // ПолучитьЗначениеПараметраПоИзменениюЗначенияДатчика()

Функция ПолучитьЗначениеПараметраПодсчетИмпульсов(
	Маршрут, Терминал, НазначениеДатчика, Датчик, КалибровочныйГрафик, УчитыватьКрайнююТочку=Ложь) Экспорт
	
	// Обработка изменения значения датчиков
	
	Если НазначениеДатчика.Пустая() Тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	КодДатчика = Формат(Датчик.Код, "ЧН=0; ЧГ=0");
	
	ДопускатьЗначенияВнеВходногоДиапазона = Истина;
	ДопустимоеЗначениеНачало = 0;
	ДопустимоеЗначениеКонец  = 0;
	
	Если НЕ КалибровочныйГрафик.Пустая() Тогда
		ДопускатьЗначенияВнеВходногоДиапазона = КалибровочныйГрафик.ДопускатьЗначенияВнеВходногоДиапазона;
		Если НЕ ДопускатьЗначенияВнеВходногоДиапазона Тогда
			Показатели = КалибровочныйГрафик.Показатели.Выгрузить();
			Показатели.Сортировать("Вход Возр");
			
			Если Показатели.Количество() > 1 Тогда
				ДопустимоеЗначениеНачало = Показатели[0].Вход;	
				ДопустимоеЗначениеКонец  = Показатели[Показатели.Количество()-1].Вход;
				
			КонецЕсли;
			
		КонецЕсли;				
		
	КонецЕсли;
	
	ИндексКрайнейТочки = ?(УчитыватьКрайнююТочку, Маршрут.Количество()-1, Маршрут.Количество()-2);
	
	СыроеЗначение = 0;
	ИмяКолДатчик = "ЗначениеДатчика"+КодДатчика;
	ПредыдущееЗначениеДатчика = Неопределено;
	
	Если Маршрут.Количество()>0 И НЕ ДопускатьЗначенияВнеВходногоДиапазона Тогда
		ТекущееЗначениеДатчика = Маршрут[0][ИмяКолДатчик];
		
		НужноИскатьВалиднуюПервуюТочку = Ложь;
		
		Если ТекущееЗначениеДатчика = Неопределено
			ИЛИ ТекущееЗначениеДатчика = NULL Тогда
			НужноИскатьВалиднуюПервуюТочку = Истина;			
		КонецЕсли;					
		
		Если (ТекущееЗначениеДатчика < ДопустимоеЗначениеНачало
			ИЛИ ТекущееЗначениеДатчика > ДопустимоеЗначениеКонец) Тогда			
			НужноИскатьВалиднуюПервуюТочку = Истина;			
		КонецЕсли;
		
		Если НужноИскатьВалиднуюПервуюТочку Тогда
			ТекущееЗначениеДатчика = ПолучитьВалидноеЗначениеДатчика(Терминал, Датчик, Маршрут[0].Период, ДопустимоеЗначениеНачало, ДопустимоеЗначениеКонец);		
			ПредыдущееЗначениеДатчика = ТекущееЗначениеДатчика;
		КонецЕсли;
	
	КонецЕсли;
		
	Для Счетчик = 0 По ИндексКрайнейТочки Цикл
		ТекущееЗначениеДатчика = Маршрут[Счетчик][ИмяКолДатчик];
		
		Если ТекущееЗначениеДатчика = Неопределено
			ИЛИ ТекущееЗначениеДатчика = NULL Тогда
			Продолжить;
			
		КонецЕсли;					
		
		Если НЕ ДопускатьЗначенияВнеВходногоДиапазона
			И (ТекущееЗначениеДатчика < ДопустимоеЗначениеНачало
			ИЛИ ТекущееЗначениеДатчика > ДопустимоеЗначениеКонец) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ПредыдущееЗначениеДатчика = Неопределено Тогда
			ПредыдущееЗначениеДатчика = ТекущееЗначениеДатчика;
			Продолжить;
			
		КонецЕсли;
		
		Если ТекущееЗначениеДатчика >= ПредыдущееЗначениеДатчика Тогда
			СыроеЗначение = СыроеЗначение+ТекущееЗначениеДатчика-ПредыдущееЗначениеДатчика;
		Иначе
			СыроеЗначение = СыроеЗначение+ТекущееЗначениеДатчика-ПредыдущееЗначениеДатчика+65535;
		КонецЕсли;
		
		ПредыдущееЗначениеДатчика = ТекущееЗначениеДатчика;
		
	КонецЦикла;
	
	Значение = ПреобразоватьЗначениеПоКалибровочномуГрафику(СыроеЗначение, КалибровочныйГрафик);
	
	Возврат Значение;

КонецФункции // ПолучитьЗначениеПараметраПоИзменениюЗначенияДатчика()

#КонецОбласти
