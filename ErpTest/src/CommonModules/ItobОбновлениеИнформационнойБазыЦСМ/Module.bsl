////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы конфигурации 1С:Центр спутникового мониторинга ГЛОНАСС/GPS.
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение пустой ИБ

// Демонстрирует процедуру-обработчик обновления и первоначального заполнения
// данных ИБ, которая выполняется однократно при переходе на версию 1.0.0.0.
//
Процедура ПервыйЗапуск() Экспорт
	
	НачатьТранзакцию();
	
	ОбновлениеТиповДанныхЦСМ();
	
	Константы.ItobАдресСервисаCsmSvc.Установить("localhost:8091");
	
	Константы.ItobМинимальнаяСкоростьДвижения.Установить(10);
	Константы.ItobМинимальноеВремяСтоянки.Установить('00010101001000');
	
	// Пользователь ReplicationBot для репликации
	Если ПользователиИнформационнойБазы.НайтиПоИмени("ReplicationBot") = Неопределено Тогда
		
		Если ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() = 0 Тогда
			
			НовПользователь = ПользователиИнформационнойБазы.СоздатьПользователя();
			НовПользователь.АутентификацияОС = Ложь;
			НовПользователь.АутентификацияСтандартная = Истина;
			НовПользователь.ЗапрещеноИзменятьПароль = Ложь;
			НовПользователь.Имя = "Пользователь";
			НовПользователь.Пароль = "";
			НовПользователь.ПоказыватьВСпискеВыбора = Истина;
			НовПользователь.ПолноеИмя = НСтр("ru = 'Пользователь");
			НовПользователь.Роли.Добавить(Метаданные.Роли.ПолныеПрава);
			НовПользователь.Роли.Добавить(Метаданные.Роли.АдминистраторСистемы);
			НовПользователь.Записать();
			
		КонецЕсли;
		
		НовПользователь = ПользователиИнформационнойБазы.СоздатьПользователя();
		НовПользователь.АутентификацияОС = Ложь;
		НовПользователь.АутентификацияСтандартная = Истина;
		НовПользователь.ЗапрещеноИзменятьПароль = Истина;
		НовПользователь.Имя = "ReplicationBot";
		НовПользователь.Пароль = "ole123";
		НовПользователь.ПоказыватьВСпискеВыбора = Ложь;
		НовПользователь.ПолноеИмя = "Replication Bot User";
		НовПользователь.Роли.Добавить(Метаданные.Роли.ПолныеПрава);
		НовПользователь.Роли.Добавить(Метаданные.Роли.АдминистраторСистемы);
		НовПользователь.Записать();			
		
	КонецЕсли;
	
	// Модели терминалов
	// Терминал - Teltonika FM
	НовМодельТерминалов = Справочники.ItobМоделиТерминалов.СоздатьЭлемент();
	НовМодельТерминалов.Наименование = "Teltonika FM";
	НовМодельТерминалов.Записать();
	
	// Датчики
	ТаблицаДатчиков = 
		НСтр("ru = '1	Цифровой вход 1	Дискретный
		|2	Цифровой вход 2	Дискретный
		|3	Цифровой вход 3	Дискретный
		|4	Цифровой вход 4	Дискретный
		|9	Аналоговый вход 1	Аналоговый
		|10	Аналоговый вход 2	Аналоговый
		|11	Аналоговый вход 3	Аналоговый
		|19	Аналоговый вход 4	Аналоговый
		|21	GSM сигнал	Дискретный
		|22	Текущий профиль	Дискретный
		|66	Напряжение питания	Аналоговый
		|67	Напряжение резервного аккумулятора	Аналоговый
		|68	Сила тока резервного аккумулятора	Аналоговый
		|69	Состояние GPS	Дискретный
		|70	Температура блока	Аналоговый
		|72	Датчик температуры	Аналоговый
		|76	Счетчик топлива	Аналоговый
		|78	Вход iButton	Аналоговый
		|145	CAN 01	Аналоговый
		|146	CAN 02	Аналоговый
		|147	CAN 03	Аналоговый
		|148	CAN 04	Аналоговый
		|149	CAN 05	Аналоговый
		|150	CAN 06	Аналоговый
		|151	CAN 07	Аналоговый
		|152	CAN 08	Аналоговый
		|153	CAN 09	Аналоговый
		|154	CAN 10	Аналоговый'");
	
	Для Счетчик = 1 По СтрЧислоСтрок(ТаблицаДатчиков) Цикл
		ТекСтрока = СтрПолучитьСтроку(ТаблицаДатчиков, Счетчик);
		ТекСтрока = СтрЗаменить(ТекСтрока, "	", Символы.ПС);
		
		НовДатчик = Справочники.ItobДатчики.СоздатьЭлемент();
		НовДатчик.Владелец = НовМодельТерминалов.Ссылка;
		НовДатчик.Код = СтрПолучитьСтроку(ТекСтрока,1);
		НовДатчик.Наименование = СтрПолучитьСтроку(ТекСтрока,2);
		Если СтрПолучитьСтроку(ТекСтрока,3) = "Дискретный" Тогда
			НовДатчик.ТипДатчика = Перечисления.ItobТипыДатчиков.Дискретный;
		Иначе
			НовДатчик.ТипДатчика = Перечисления.ItobТипыДатчиков.Аналоговый;
		КонецЕсли;
		НовДатчик.Записать();
		
	КонецЦикла;		
	
	// Терминал - Naviset GT30
	НовМодельТерминалов = Справочники.ItobМоделиТерминалов.СоздатьЭлемент();
	НовМодельТерминалов.Наименование = "Naviset GT30/GT100";
	НовМодельТерминалов.Записать();
	
	ТаблицаДатчиков = 
		НСтр("ru = '1	Кнопка SOS	Дискретный
		|2	Кнопка B	Дискретный
		|3	Кнопка C	Дискретный
		|16	Низкий заряд батареи	Дискретный
		|17	Превышение скорости	Дискретный
		|18	Выход из географической зоны	Дискретный
		|20	Перезагрузка или включение питания	Дискретный
		|21	Отсутствует GPS сигнал	Дискретный
		|22	Возобновление GPS сигнала	Дискретный'");
	
	Для Счетчик = 1 По СтрЧислоСтрок(ТаблицаДатчиков) Цикл
		ТекСтрока = СтрПолучитьСтроку(ТаблицаДатчиков, Счетчик);
		ТекСтрока = СтрЗаменить(ТекСтрока, "	", Символы.ПС);
		
		КодДатчика = Число(СтрПолучитьСтроку(ТекСтрока,1));
		НаименованиеДатчика = СтрПолучитьСтроку(ТекСтрока,2);
		ТипДатчика = Перечисления.ItobТипыДатчиков[?(СтрПолучитьСтроку(ТекСтрока,3) = "Дискретный", "Дискретный", "Аналоговый")];
		
		НайденныйДатчик = Справочники.ItobДатчики.НайтиПоКоду(КодДатчика,,,НовМодельТерминалов.Ссылка);
		Если НЕ НайденныйДатчик.Пустая() Тогда
			НовДатчик = НайденныйДатчик.ПолучитьОбъект();
			
		Иначе
			НовДатчик = Справочники.ItobДатчики.СоздатьЭлемент();	
			
		КонецЕсли;			
		
		НовДатчик.Владелец = НовМодельТерминалов.Ссылка;
		НовДатчик.Код = КодДатчика;
		НовДатчик.Наименование = НаименованиеДатчика;
		НовДатчик.ТипДатчика = ТипДатчика;
		НовДатчик.Записать();
		
	КонецЦикла;
	
	// Терминал - Portman GT2000
	НовМодельТерминалов = Справочники.ItobМоделиТерминалов.СоздатьЭлемент();
	НовМодельТерминалов.Наименование = "Portman GT2000";
	НовМодельТерминалов.Записать();	
	
	// Назначения датчиков
	НазначениеДатчиковОбъект = Справочники.ItobНазначенияДатчиков.Зажигание.ПолучитьОбъект();
	НовСтрока = НазначениеДатчиковОбъект.РасшифровкаПоказаний.Добавить();
	НовСтрока.Показание = 0;
	НовСтрока.Расшифровка = НСтр("ru = 'Зажигание выключено'");
	НовСтрока = НазначениеДатчиковОбъект.РасшифровкаПоказаний.Добавить();
	НовСтрока.Показание = 1;
	НовСтрока.Расшифровка = НСтр("ru = 'Зажигание включено'");
	НазначениеДатчиковОбъект.Записать();
	
	НазначениеДатчиковОбъект = Справочники.ItobНазначенияДатчиков.ТревожнаяКнопка.ПолучитьОбъект();
	НовСтрока = НазначениеДатчиковОбъект.РасшифровкаПоказаний.Добавить();
	НовСтрока.Показание = 0;
	НовСтрока.Расшифровка = НСтр("ru = 'Кнопка выключена'");
	НовСтрока = НазначениеДатчиковОбъект.РасшифровкаПоказаний.Добавить();
	НовСтрока.Показание = 1;
	НовСтрока.Расшифровка = НСтр("ru = 'Кнопка включена'");
	НазначениеДатчиковОбъект.Записать();
		
	Попытка
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'","ru"), УровеньЖурналаРегистрации.Ошибка,,,НСтр("ru = 'Ошибка обновления информационной базы:'")+" "+ОписаниеОшибки());
		Возврат;
	КонецПопытки; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление ИБ

// Процедура выполняется каждый раз при смене версии конфигурации.
//
Процедура ВыполнятьВсегдаПриСменеВерсии(Параметры = Неопределено) Экспорт
	
	// Проверка необходимости обновления критичных общих данных.
	ТребуетсяОбновитьКритичныеОбщиеДанные = Ложь;
	// Конец Проверка необходимости обновления критичных общих данных.
	Если ТребуетсяОбновитьКритичныеОбщиеДанные Тогда
		Если Параметры <> Неопределено И НЕ Параметры.МонопольныйРежим Тогда
			Параметры.МонопольныйРежим = Истина;
			Возврат;
		КонецЕсли;
		// Код обновления критичных общих данных.
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ЗаполнитьГеографическиеКарты() Экспорт
	
	// Очистка справочника
	Выборка = Справочники.ItobГеографическиеКарты.Выбрать();
	Если Выборка.Следующий() Тогда
		// Справочник не пустой - обновление не проводится
		Возврат;
	
	КонецЕсли;
	
	// Заполним справочник "Географические карты"
	НовыйОбъект = Справочники.ItobГеографическиеКарты.СоздатьЭлемент();
	НовыйОбъект.Код = "00001";
	НовыйОбъект.Наименование = "OSM (Mapnik)";
	НовыйОбъект.Сортировка = 10;
	НовыйОбъект.Идентификатор = "osm_mapnik";
	НовыйОбъект.Сервер = "http://tile.openstreetmap.org/";
	НовыйОбъект.Правообладатель = "OpenStreetMap";
	НовыйОбъект.СайтПравообладателя = "http://www.openstreetmap.org/";
	НовыйОбъект.Атрибуты = "getTileAddress: function(bounds,x,y,z) {
	|   var subs = [ 'a', 'b', 'c' ];   
	|   return ""http://"" + subs[(x+y)%3] + "".tile.openstreetmap.org/"" + z + ""/"" + x + ""/"" + y + "".png"";
	|}";	
	НовыйОбъект.Записать();
	
	НовыйОбъект = Справочники.ItobГеографическиеКарты.СоздатьЭлемент();
	НовыйОбъект.Код = "00002";
	НовыйОбъект.Наименование = "OSM (Mapquest)";
	НовыйОбъект.Сортировка = 20;
	НовыйОбъект.Идентификатор = "osm_mapquest";
	НовыйОбъект.Сервер = "http://otile.mqcdn.com/tiles";
	НовыйОбъект.Правообладатель = "OpenStreetMap";
	НовыйОбъект.СайтПравообладателя = "http://www.openstreetmap.org/";
	НовыйОбъект.Атрибуты = "getTileAddress: function(bounds,x,y,z) {
	|   var subs = [ '1', '2', '3', '4' ];   
	|   return ""http://otile"" + subs[(x+y)%4] + "".mqcdn.com/tiles/1.0.0/osm/"" + z + ""/"" + x + ""/"" + y + "".png"";
	|}";	
	НовыйОбъект.Записать();
	
	НовыйОбъект = Справочники.ItobГеографическиеКарты.СоздатьЭлемент();
	НовыйОбъект.Код = "00003";
	НовыйОбъект.Наименование = "OSM (OPNV-Karte)";
	НовыйОбъект.Сортировка = 30;
	НовыйОбъект.Идентификатор = "osm_opnvkart";
	НовыйОбъект.Сервер = "http://tile.xn--pnvkarte-m4a.de/tilegen";
	НовыйОбъект.Правообладатель = "OpenStreetMap";
	НовыйОбъект.СайтПравообладателя = "http://www.openstreetmap.org/";
	НовыйОбъект.Атрибуты = "getTileAddress: function(bounds,x,y,z) {
	|   return ""http://tile.xn--pnvkarte-m4a.de/tilegen/"" + z + ""/"" + x + ""/"" + y + "".png"";
	|}";	
	НовыйОбъект.Записать();
	
	// Установка сервиса геокодирования	
	Константы.ItobСервисОбратногоГеокодирования.Установить(Перечисления.ItobСервисыГеокодирования.NominatimOSM);
	
КонецПроцедуры
	
Процедура УстановитьДатчикиТоплива() Экспорт
	
	// Для назначения "Топливо" установим флаг "ДатчикТоплива"	
	НазначениеОбъект = Справочники.ItobНазначенияДатчиков.Топливо.ПолучитьОбъект();
	НазначениеОбъект.ДатчикТоплива = Истина;
	НазначениеОбъект.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьКрайниеДанныеТерминалов() Экспорт
	
	// Заполним регистр "Крайние данные терминалы"	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	*
	               |ИЗ
	               |	РегистрСведений.ItobАктуальностьДанныхТерминалов КАК ItobАктуальностьДанныхТерминалов";
				   
	НаборЗаписей = РегистрыСведений.ItobКрайниеДанныеТерминалов.СоздатьНаборЗаписей();			   
				   
	Выборка = Запрос.Выполнить().Выбрать();			   
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);		
	
	КонецЦикла;
	
	НаборЗаписей.Записать();	
	
КонецПроцедуры

Процедура УстановитьПараметрыСглаживанияКалибровочныхГрафиков() Экспорт
	
	// Установка оптимальных параметров сглаживания в калибровочных графиках
	Выборка = Справочники.ItobКалибровочныеГрафики.Выбрать();
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если СправочникОбъект.ДлинаБуфераСглаживания = 0 Тогда
			СправочникОбъект.ДлинаБуфераСглаживания = 40;
			СправочникОбъект.ПорогЗаправки = 10;
			СправочникОбъект.ПорогСлива = 10;
			СправочникОбъект.ОкноГраницыЗаправкиСлива = 3;
			СправочникОбъект.Записать();			
		
		КонецЕсли;		
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНовыеПоляАктуальностьДанныхТерминалов() Экспорт
	
	// Заполним новые поля в регистре сведений ItobАктуальностьДанныхТерминалов
	
	Выборка = РегистрыСведений.ItobАктуальностьДанныхТерминалов.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НастройкиОтображения = ItobОперативныйМониторинг.ПолучитьНастройкиОтображенияТерминала(Выборка.Терминал);
		
		Если ItobВызовСервераПовтИсп.ДанныеТерминаловБратьИзБазыIMCS() Тогда
			СтрБазовыйЗапрос = "ВЫБРАТЬ ПЕРВЫЕ "+Формат(НастройкиОтображения.ДлинаШлейфаOnlineСлежение+1,"ЧН=0")+"
			                   |	ДанныеТерминалов.Период,
			                   |	ДанныеТерминалов.Широта,
			                   |	ДанныеТерминалов.Долгота,
			                   |	ДанныеТерминалов.Направление,
			                   |	ДанныеТерминалов.ДанныеДатчиков		                   
			                   |ИЗ
			                   |	ВнешнийИсточникДанных.ItobДанныеСервераСбораДанных.Таблица.ItobДанныеТерминаловIMCS КАК ДанныеТерминалов
			                   |ГДЕ
							   |	ДанныеТерминалов.КодТерминала = &КодТерминала
							   |	И ДанныеТерминалов.Период <= &Период
			                   |	И ДанныеТерминалов.ЧислоСпутников >= 3
							   |
							   |УПОРЯДОЧИТЬ ПО
							   |	Период УБЫВ";
			
		Иначе
			СтрБазовыйЗапрос = "ВЫБРАТЬ ПЕРВЫЕ "+Формат(НастройкиОтображения.ДлинаШлейфаOnlineСлежение+1,"ЧН=0")+"
			                   |	ДанныеТерминалов.Период,
			                   |	ДанныеТерминалов.Широта,
			                   |	ДанныеТерминалов.Долгота,
			                   |	ДанныеТерминалов.Направление,
			                   |	ДанныеТерминалов.ДанныеДатчиков
			                   |ИЗ
			                   |	РегистрСведений.ItobДанныеТерминалов КАК ДанныеТерминалов
			                   |ГДЕ
							   |	ДанныеТерминалов.Терминал = &Терминал
							   |	И ДанныеТерминалов.Период <= &Период
			                   |	И (НЕ ДанныеТерминалов.НевалидныеДанные)
							   |
							   |УПОРЯДОЧИТЬ ПО
							   |	Период УБЫВ";
		
		КонецЕсли;		
		
		Запрос = Новый Запрос(СтрБазовыйЗапрос);
		Запрос.УстановитьПараметр("Терминал", Выборка.Терминал);
		Запрос.УстановитьПараметр("КодТерминала", Выборка.Терминал.Код);
		Запрос.УстановитьПараметр("Период", Выборка.ДатаВремя);
		ТЗ = Запрос.Выполнить().Выгрузить();
		
		Если ТЗ.Количество() > 0 Тогда
			
			Запись = Выборка.ПолучитьМенеджерЗаписи();
		
			Запись.ДанныеДатчиков = ТЗ[0].ДанныеДатчиков;
			ТЗ.Удалить(ТЗ[0]);
			
			Запись.КрайниеТочки = ItobОбщегоНазначенияКлиентСервер.ПреобразоватьДанныеКрайниеТочкиВСтроку(ТЗ);
			Запись.Записать();			
		
		КонецЕсли;				
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновлениеНастроекОтображенияОбъектовИПереименованиеОбъектов() Экспорт
	
	ОбновлениеТиповДанныхЦСМ();
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ItobВодители.Ссылка,
		|	ItobВодители.УдалитьЦветМаршрутаНаКарте,
		|	ItobВодители.УдалитьЦветНадписиНаКарте,
		|	ItobВодители.УдалитьИконкаНаКарте
		|ПОМЕСТИТЬ втДанные
		|ИЗ
		|	Справочник.ItobВодители КАК ItobВодители
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ItobТранспортныеСредства.Ссылка,
		|	ItobТранспортныеСредства.УдалитьЦветМаршрутаНаКарте,
		|	ItobТранспортныеСредства.УдалитьЦветНадписиНаКарте,
		|	ItobТранспортныеСредства.УдалитьИконкаНаКарте
		|ИЗ
		|	Справочник.ItobТранспортныеСредства КАК ItobТранспортныеСредства
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ItobНастройкиОтображенияОбъектов.Объект, втДанные.Ссылка) КАК Объект,
		|	ЕСТЬNULL(ItobНастройкиОтображенияОбъектов.ДлинаШлейфаOnlineСлежение, 3) КАК ДлинаШлейфаOnlineСлежение,
		|	ЕСТЬNULL(ItobНастройкиОтображенияОбъектов.НеПоказыватьСтрелкуНаправленияДвижения, ЛОЖЬ) КАК НеПоказыватьСтрелкуНаправленияДвижения,
		|	втДанные.УдалитьЦветМаршрутаНаКарте КАК ЦветМаршрутаНаКарте,
		|	втДанные.УдалитьЦветНадписиНаКарте КАК ЦветНадписиНаКарте,
		|	втДанные.УдалитьИконкаНаКарте КАК ИконкаНаКарте
		|ИЗ
		|	втДанные КАК втДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ItobНастройкиОтображенияОбъектов КАК ItobНастройкиОтображенияОбъектов
		|		ПО ItobНастройкиОтображенияОбъектов.Объект = втДанные.Ссылка";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"ItobВодители", ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("Водители"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"ItobТранспортныеСредства", ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("ТранспортныеСредства"));
	Попытка
		РезультатЗапроса = Запрос.Выполнить();	
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		НаборЗаписей = РегистрыСведений.ItobНастройкиОтображенияОбъектов.СоздатьНаборЗаписей();
		НаборЗаписей.Записывать = Истина;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Запись = НаборЗаписей.Добавить();
			Запись.Объект 								  = ВыборкаДетальныеЗаписи.Объект;
			Запись.ДлинаШлейфаOnlineСлежение 			  = ВыборкаДетальныеЗаписи.ДлинаШлейфаOnlineСлежение;
			Запись.НеПоказыватьСтрелкуНаправленияДвижения = ВыборкаДетальныеЗаписи.НеПоказыватьСтрелкуНаправленияДвижения;
			Запись.ЦветМаршрутаНаКарте 					  = ВыборкаДетальныеЗаписи.ЦветМаршрутаНаКарте;
			Запись.ЦветНадписиНаКарте 					  = ВыборкаДетальныеЗаписи.ЦветНадписиНаКарте;
			Запись.ИконкаНаКарте 						  = ВыборкаДетальныеЗаписи.ИконкаНаКарте;
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление конфигурации до версии 1.1.8.13'","ru"),
									 УровеньЖурналаРегистрации.Ошибка,,,
									 НСтр("ru = 'Реквизиты водителей и транспортных средств исходной конфигурации не соответствуют обновленной'"));
	КонецПопытки; 
КонецПроцедуры

Процедура ОбновлениеТиповДанныхЦСМ() Экспорт

	тзСоотвествияИмен = Новый ТаблицаЗначений;
	тзСоотвествияИмен.Колонки.Добавить("ПолноеИмя", Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(100)));
	тзСоотвествияИмен.Колонки.Добавить("ИмяЦСМ", Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(100)));
	
	// Типовой код изменен для возможности работы в случае объединения с типовой конфигурацией.
	ЗаполнитьЗначенияСвойств(тзСоотвествияИмен.Добавить(), Новый Структура("ПолноеИмя,ИмяЦСМ","Справочник.Сотрудники",            "Водители"));
	ЗаполнитьЗначенияСвойств(тзСоотвествияИмен.Добавить(), Новый Структура("ПолноеИмя,ИмяЦСМ","Справочник.ТранспортныеСредства",  "ТранспортныеСредства"));
	ЗаполнитьЗначенияСвойств(тзСоотвествияИмен.Добавить(), Новый Структура("ПолноеИмя,ИмяЦСМ","Справочник.уатМоделиТС",           "МаркиТранспорта"));
	ЗаполнитьЗначенияСвойств(тзСоотвествияИмен.Добавить(), Новый Структура("ПолноеИмя,ИмяЦСМ","Справочник.уатПунктыНазначения",   "ПунктыНазначения"));
	ЗаполнитьЗначенияСвойств(тзСоотвествияИмен.Добавить(), Новый Структура("ПолноеИмя,ИмяЦСМ","Справочник.уатПараметрыВыработки", "ПараметрыВыработки"));
	
	Если тзСоотвествияИмен.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ТабСоотвествияИмен", тзСоотвествияИмен);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТабСоотвествияИмен.ПолноеИмя,
		               |	ТабСоотвествияИмен.ИмяЦСМ
		               |ПОМЕСТИТЬ СоотвествияИмен
		               |ИЗ
		               |	&ТабСоотвествияИмен КАК ТабСоотвествияИмен
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ИдентификаторыОбъектовМетаданных.Ссылка,
		               |	СоотвествияИмен.ИмяЦСМ
		               |ИЗ
		               |	СоотвествияИмен КАК СоотвествияИмен
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
		               |		ПО СоотвествияИмен.ПолноеИмя = ИдентификаторыОбъектовМетаданных.ПолноеИмя
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ СоотвествияИмен";
		
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл			
			Запись = РегистрыСведений.ItobСоответствияОбъектов.СоздатьМенеджерЗаписи();
			Запись.ОбъектЦСМ = Перечисления.ItobОбъектыСоответствия[ВыборкаДетальныеЗаписи.ИмяЦСМ];
			Запись.ИдентификаторМетаданных = ВыборкаДетальныеЗаписи.Ссылка;
			Запись.Записать(Истина);
		КонецЦикла;
						
	КонецЕсли;

КонецПроцедуры

Процедура ОбновлениеРегистраСвойстваТС() Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТранспортныеСредства.Ссылка
	                      |ИЗ
	                      |	Справочник.ItobТранспортныеСредства КАК ТранспортныеСредства");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ItobТранспортныеСредства", ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("ТранспортныеСредства"));
	Выборка = Запрос.Выполнить().Выбрать();
	
	Отказ = Ложь;
	Пока Выборка.Следующий() Цикл
		Выборка.Ссылка.ПолучитьОбъект().Записать();
	КонецЦикла;

КонецПроцедуры

// Процедура производит запись в регистр сведений "ItobСервисыCsmSvc"
//
Процедура ЗаполнитьАдресCSMSVC() Экспорт 
	АдресCSMSVC = Константы.ItobАдресСервисаCsmSvc.Получить();
	Если АдресCSMSVC <> "" Тогда
		СтрокиАдреса = ItobРаботаС_БСП_КлиентСервер.РазложитьСтрокуВМассивПодстрок(АдресCSMSVC,":");
		АдресCsmService  = СтрокиАдреса[0];
		
		Если СтрокиАдреса.Количество() >= 1 Тогда
			ПортCsmService = СтрокиАдреса[1];
		Иначе
			ПортCsmService = "";
		КонецЕсли; 
	Иначе Возврат;	
		
	КонецЕсли; 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ItobСервисыCsmSvc.ВидОбращения,
		|	ItobСервисыCsmSvc.СерверОбращения,
		|	ItobСервисыCsmSvc.АдресCsmService,
		|	ItobСервисыCsmSvc.ПортCsmService
		|ИЗ
		|	РегистрСведений.ItobСервисыCsmSvc КАК ItobСервисыCsmSvc";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой()  Тогда
		// Повторно заполним регистр ItobСервисыCsmSvc
		НаборЗаписей = РегистрыСведений.ItobСервисыCsmSvc.СоздатьНаборЗаписей();
		
		НовЗапись = НаборЗаписей.Добавить();
		НовЗапись.ВидОбращения = Перечисления.ItobВидыОбращенияCsmSvc.Сервер;
		НовЗапись.АдресCsmService = АдресCsmService;
		НовЗапись.ПортCsmService = ПортCsmService;
		
		НовЗапись = НаборЗаписей.Добавить();
		НовЗапись.ВидОбращения = Перечисления.ItobВидыОбращенияCsmSvc.Клиент;
		НовЗапись.АдресCsmService = АдресCsmService;
		НовЗапись.ПортCsmService = ПортCsmService;
		
		НаборЗаписей.Записать(Истина);	
	КонецЕсли; 
КонецПроцедуры // ЗаполнитьАдресCSMSVC()

// Процедура производит перенос данных из регистра сведений "ItobДанныеДатчиков" в регистр "ItobДанныеТерминалов".
//
Процедура ПеренестиДанныеДатчиковВ_ДанныеТерминалов(Параметры = Неопределено) Экспорт 
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли; 
	Параметры.Вставить("ОбработкаЗавершена",Ложь);
	НачальныйПериод = Неопределено;
	ТекущийПериод = Неопределено;
	Если Не Параметры.Свойство("НачальныйПериод",НачальныйПериод) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ItobДанныеДатчиковСрезПервых.Период КАК Период,
		|	ItobДанныеДатчиковСрезПервых.Терминал,
		|	ItobДанныеДатчиковСрезПервых.Датчик,
		|	ItobДанныеДатчиковСрезПервых.Значение
		|ИЗ
		|	РегистрСведений.ItobДанныеДатчиков.СрезПервых КАК ItobДанныеДатчиковСрезПервых
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ItobОбщегоНазначенияСервер.ВыборкаСледующий(ВыборкаДетальныеЗаписи) Тогда
			НачальныйПериод = НачалоДня(ВыборкаДетальныеЗаписи.Период);
			Параметры.Вставить("НачальныйПериод",НачальныйПериод);
		Иначе
			Параметры.Вставить("ОбработкаЗавершена",Истина);
			Возврат; //Нет записей
		КонецЕсли;
		
		
	КонецЕсли; 
	Если Не Параметры.Свойство("ТекущийПериод",ТекущийПериод) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ItobДанныеДатчиковСрезПоследних.Период КАК Период,
		|	ItobДанныеДатчиковСрезПоследних.Терминал,
		|	ItobДанныеДатчиковСрезПоследних.Датчик,
		|	ItobДанныеДатчиковСрезПоследних.Значение
		|ИЗ
		|	РегистрСведений.ItobДанныеДатчиков.СрезПоследних КАК ItobДанныеДатчиковСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ItobОбщегоНазначенияСервер.ВыборкаСледующий(ВыборкаДетальныеЗаписи) Тогда
			ТекущийПериод = НачалоДня(ВыборкаДетальныеЗаписи.Период);
			Параметры.Вставить("ТекущийПериод",ТекущийПериод);
		Иначе
			Параметры.Вставить("ОбработкаЗавершена",Истина);
			Возврат; //Нет записей
		КонецЕсли;
	КонецЕсли;
	НачатьТранзакцию();
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ItobДанныеДатчиков.Период КАК Период,
		|	ItobДанныеДатчиков.Терминал КАК Терминал,
		|	ItobДанныеДатчиков.Датчик,
		|	ItobДанныеДатчиков.Значение,
		|	ItobДанныеДатчиков.Датчик.Код КАК КодДатчика
		|ИЗ
		|	РегистрСведений.ItobДанныеДатчиков КАК ItobДанныеДатчиков
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ItobДанныеДатчиков.Период, ДЕНЬ) = &Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	Терминал,
		|	Период
		|ИТОГИ ПО
		|	Терминал,
		|	Период";
		
		Запрос.УстановитьПараметр("Период", ТекущийПериод);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаТерминал = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаТерминал.Следующий() Цикл
			
			ВыборкаПериод = ВыборкаТерминал.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПериод.Следующий() Цикл
				МенеджерЗаписи = РегистрыСведений.ItobДанныеТерминалов.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи,ВыборкаПериод);
				МенеджерЗаписи.Прочитать();
				Если МенеджерЗаписи.Выбран() Тогда
					ДанныеДатчиков = Новый Соответствие;
					Выборка = ВыборкаПериод.Выбрать();
					
					Пока Выборка.Следующий() Цикл
						ДанныеДатчиков.Вставить(Выборка.КодДатчика,Выборка.Значение);
					КонецЦикла;
					МенеджерЗаписи.ДанныеДатчиков = ItobОбщегоНазначенияКлиентСервер.ПреобразоватьДанныеДатчиковВСтроку(ДанныеДатчиков);
					МенеджерЗаписи.Записать();
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		ТекущийПериод = ТекущийПериод - 24*60*60;
		Если ТекущийПериод < НачальныйПериод Тогда
			ОбработкаЗавершена = Истина;
		Иначе
			ОбработкаЗавершена = Ложь;
		КонецЕсли;
		Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
		Параметры.ТекущийПериод = ТекущийПериод;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры // ПеренестиДанныеДатчиковВ_ДанныеТерминалов()

#Область ПодсистемаItobЦентрСпутниковогоМониторингаСобытия
	
Процедура ГеографическиеЗоныПриДобавленииОбработчиковОбновления(Обработчики)
	Если ItobОбщегоНазначенияВызовСервера.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.ГеографическиеЗоны") Тогда
		МодульГеографическиеЗоныОбновлениеИБ = ОбщегоНазначения.ОбщийМодуль("ItobГеографическиеЗоныОбновлениеИБ");
		МодульГеографическиеЗоныОбновлениеИБ.ПриДобавленииОбработчиковОбновления(Обработчики);
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти
	
#Область ПодсистемаItobЦентрСпутниковогоМониторингаГеографическиеЗоны
	
Процедура СобытияПриДобавленииОбработчиковОбновления(Обработчики)
	Если ItobОбщегоНазначенияВызовСервера.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.События") Тогда
		МодульОбработкаСобытийОбновлениеИБ = ОбщегоНазначения.ОбщийМодуль("ItobОбработкаСобытийОбновлениеИБ");
		МодульОбработкаСобытийОбновлениеИБ.ПриДобавленииОбработчиковОбновления(Обработчики);
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя = "ЦентрСпутниковогоМониторинга";
	Описание.Версия = "1.1.8.68";
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре.
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Монопольно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Обработчики, выполняемые при каждом обновлении ИБ.
	//
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.УправлениеОбработчиками = Истина;
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.ВыполнятьВсегдаПриСменеВерсии";
	
		
	// Обработчики, выполняемые при заполнении пустой ИБ.
	//
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.ПервыйЗапуск";
	
	// Обработчики, выполняемые при заполнении пустой ИБ и при переходе на новую версию.
	//
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.3.2";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.ЗаполнитьГеографическиеКарты";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.7.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.УстановитьДатчикиТоплива";	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.8.13";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.ОбновлениеНастроекОтображенияОбъектовИПереименованиеОбъектов";
	
	// Обработчики, выполняемые при переходе на новую версию.
	//
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.2.4";
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.ЗаполнитьКрайниеДанныеТерминалов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.4.2";
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.УстановитьПараметрыСглаживанияКалибровочныхГрафиков";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.8.1";
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.ЗаполнитьНовыеПоляАктуальностьДанныхТерминалов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.8.32";
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.ОбновлениеТиповДанныхЦСМ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.8.33";
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.ОбновлениеРегистраСвойстваТС";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.8.52";
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.ЗаполнитьАдресCSMSVC";
	
	Если Не ItobРаботаС_БСП.ИнформационнаяБазаФайловая() Тогда 
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "1.1.8.52";
		Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.ПеренестиДанныеДатчиковВ_ДанныеТерминалов";
		Обработчик.РежимВыполнения = "Отложенно";
		Обработчик.Комментарий = НСтр("ru = 'Переносятся данные в регистр сведений ""ItobДанныеТерминалов"" из регистра сведений ""ItobДанныеДатчиков"". Без выполнения обработчика не будут корректно отображаться данные датчиков.'");
	КонецЕсли;
	
	
	// Подсистема ItobЦентрСпутниковогоМониторинга.ГеографическиеЗоны
	ГеографическиеЗоныПриДобавленииОбработчиковОбновления(Обработчики);
	
	// Подсистема ItobЦентрСпутниковогоМониторинга.События
	СобытияПриДобавленииОбработчиковОбновления(Обработчики);
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - если установить Истина, то будет выведена форма
//                                с описанием обновлений. По умолчанию, Истина.
//                                Возвращаемое значение.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Макет) Экспорт
	
	//Макет = ПолучитьОбщийМакет("ItobОписаниеИзмененийСистемы");
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы
//                                           ПредыдущееИмяКонфигурации.
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
			
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
		
КонецПроцедуры

#КонецОбласти
