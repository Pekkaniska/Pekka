/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция пересчитывает сумму из одной валюты в другую
//
// Параметры:      
//	Сумма         - Число - сумма, которую следует пересчитать.
// 	КурсНач       - Число - курс из которого надо пересчитать.
// 	КурсКон       - Число - курс в который надо пересчитать.
// 	КратностьНач  - Число - кратность из которого надо пересчитать 
//                  (по умолчанию = 1).
// 	КратностьКон  - Число - кратность в который надо пересчитать 
//                  (по умолчанию = 1).
//
// Возвращаемое значение: 
//  Число - сумма, пересчитанная в другую валюту.
//
Функция ПересчитатьИзВалютыВВалюту(Сумма, КурсНач, КурсКон,	КратностьНач = 1, КратностьКон = 1) Экспорт
	
	Если (КурсНач = КурсКон) И (КратностьНач = КратностьКон) Тогда
		Возврат Сумма;
	КонецЕсли;
	
	Если КурсНач = 0 ИЛИ КурсКон = 0 ИЛИ КратностьНач = 0 ИЛИ КратностьКон = 0 Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Обнаружен нулевой курс валюты. Пересчет не выполнен.'");
		Сообщение.Сообщить();
		Возврат Сумма;
	КонецЕсли;
	
	СуммаПересчитанная = Окр((Сумма * КурсНач * КратностьКон) / (КурсКон * КратностьНач), 2);
	
	Возврат СуммаПересчитанная;
	
КонецФункции // ПересчитатьИзВалютыВВалюту()

// Процедура устанавливает отбор у списка
//
Процедура УстановитьОтборУСписка(ОтборСКД, Знач ЛевоеЗначение, Знач ПравоеЗначение, Знач ВидСравнения = Неопределено, Знач Использование = Истина) Экспорт      
	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	Если ТипЗнч(ЛевоеЗначение) = Тип("Строка") Тогда
		ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЛевоеЗначение);
	КонецЕсли;
	
	ЭлементыОтбора = ОтборСКД.Элементы;
	ЭлементОтбораДанных = Неопределено;
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ЭлементОтбора.ЛевоеЗначение = ЛевоеЗначение Тогда
			Если ЭлементОтбораДанных = Неопределено Тогда
				ЭлементОтбораДанных = ЭлементОтбора;
			Иначе
				ЭлементОтбора.Использование = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементОтбораДанных = Неопределено Тогда
		ЭлементОтбораДанных = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение = ЛевоеЗначение;
	КонецЕсли;
	
	ЭлементОтбораДанных.ВидСравнения   = ВидСравнения;
	ЭлементОтбораДанных.ПравоеЗначение = ПравоеЗначение;
	ЭлементОтбораДанных.Использование  = Использование;      
КонецПроцедуры

// Процдура проверяет возможность записи объекта, если он новый
//
// Параметры
//  ФормаОбъекта - Форма объекта, из которой пытаются произвести действия
//
// Возвращаемое значение:
//   Булево - Объект записан или нет
//
Процедура ПроверитьЗаписьНовогоОбъектаВФорме(Форма, Ссылка, СтрокаТипОбъекта = Неопределено, флЗаписыватьВсегда = Ложь, флОтказ = Ложь) Экспорт
	
	Если Ссылка.Пустая() ИЛИ флЗаписыватьВсегда Тогда
		флОтказ = Истина;
		
		ТекстВопроса = "Для выполнения данной операции необходимо записать";
		Если СтрокаТипОбъекта = "документ" Тогда
			ТекстВопроса = ТекстВопроса + " документ!";
		Иначе
			ТекстВопроса = ТекстВопроса + " элемент!";
		КонецЕсли;
		
		ПоказатьПредупреждение(Неопределено, ТекстВопроса);
	КонецЕсли; 
	
КонецПроцедуры // ЗаписатьНовыйОбъектВФорме()

// Процедура обновляет состояние документа.
//
Процедура ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента,
		РазрешеноПроведение) Экспорт
	
	Если Объект.Проведен Тогда
		СостояниеДокумента = "Проведен";
		КартинкаСостоянияДокумента = 1;
	ИначеЕсли РазрешеноПроведение Тогда
		СостояниеДокумента = "Не проведен";
		КартинкаСостоянияДокумента = 0;
	Иначе
		СостояниеДокумента = "Записан";
		КартинкаСостоянияДокумента = 3;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьСостояниеДокумента()

// Процедура открывает форму отчета по документам ТС и водителей с отбором по переданному параметру - документу
//
&НаКлиенте
Процедура ОткрытьОтчетПоДокументамТСиВодителей(Ссылка) Экспорт
	сткПараметры = уатОбщегоНазначенияСервер.ПолучитьПараметрыОткрытияОтчетыВзаиморасчеты(Ссылка);
	ОткрытьФорму("Отчет.уатДокументыПоПЛИРазнарядкам.Форма", сткПараметры);
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДСИСТЕМЫ ЦЕНООБРАЗОВАНИЕ

// Процедура рассчитывает сумму строки табличной части при заполнение по "Цены и валюта".
//
Процедура РассчитатьСуммуСтрокиТабличнойЧасти(ФормаДокумента, СтрокаТабЧасти)
	
	Если СтрокаТабЧасти.Свойство("Количество") И СтрокаТабЧасти.Свойство("Цена") Тогда
		СтрокаТабЧасти.Сумма = СтрокаТабЧасти.Количество * СтрокаТабЧасти.Цена;
	КонецЕсли;
	
	Если СтрокаТабЧасти.Свойство("ПроцентСкидкиНаценки") Тогда
		Если СтрокаТабЧасти.ПроцентСкидкиНаценки = 100 Тогда
			СтрокаТабЧасти.Сумма = 0;
		ИначеЕсли СтрокаТабЧасти.ПроцентСкидкиНаценки <> 0 И СтрокаТабЧасти.Количество <> 0 Тогда
			СтрокаТабЧасти.Сумма = СтрокаТабЧасти.Сумма * (1 - СтрокаТабЧасти.ПроцентСкидкиНаценки / 100);
		КонецЕсли;
	КонецЕсли;	
	Если СтрокаТабЧасти.Свойство("СтавкаНДС") Тогда
		СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабЧасти.СтавкаНДС);
		
		Если ФормаДокумента.Объект.Свойство("СуммаВключаетНДС") Тогда
			СтрокаТабЧасти.СуммаНДС = ?(
			ФормаДокумента.Объект.СуммаВключаетНДС, 
			СтрокаТабЧасти.Сумма - (СтрокаТабЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
			СтрокаТабЧасти.Сумма * СтавкаНДС / 100
			);
		Иначе
			СтрокаТабЧасти.СуммаНДС = СтрокаТабЧасти.Сумма * СтавкаНДС / 100;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуСтрокиТабличнойЧасти()	

// Выполняем пересчет цены по валюте табличной части документа после изменений в форме 
// "Цены и валюта".
//
// Параметры:
//  ПредыдущаяВалюта - СправочникСсылка.Валюты, содержит ссылку на предыдущую
//                 валюту.
//
Процедура ПересчитатьЦеныТабличнойЧастиПоВалюте(ФормаДокумента, ПредыдущаяВалюта, ИмяТабличнойЧасти) Экспорт
	
	СтруктураКурсы = уатОбщегоНазначенияСервер.ПолучитьКурсыВалют(ПредыдущаяВалюта, 
		ФормаДокумента.Объект.ВалютаДокумента, ФормаДокумента.Объект.Дата);
	   
	Для каждого СтрокаТабличнойЧасти Из ФормаДокумента.Объект[ИмяТабличнойЧасти] Цикл
		
		// Цена.
		Если СтрокаТабличнойЧасти.Свойство("Цена") Тогда
			
			СтрокаТабличнойЧасти.Цена = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, 
																	СтруктураКурсы.КурсНач, 
																	СтруктураКурсы.Курс, 
																	СтруктураКурсы.КратностьНач, 
																	СтруктураКурсы.Кратность);
																	
			РассчитатьСуммуСтрокиТабличнойЧасти(ФормаДокумента, СтрокаТабличнойЧасти);
			
		// Сумма.	
		ИначеЕсли СтрокаТабличнойЧасти.Свойство("Сумма") Тогда
			
			СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, 
																	СтруктураКурсы.КурсНач, 
																	СтруктураКурсы.Курс, 
																	СтруктураКурсы.КратностьНач, 
																	СтруктураКурсы.Кратность);
					
			Если СтрокаТабличнойЧасти.Свойство("ПроцентСкидкиНаценки") Тогда
				
				// Скидки.
				Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
					СтрокаТабличнойЧасти.Сумма = 0;
				ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки <> 0 И СтрокаТабличнойЧасти.Количество <> 0 Тогда
					СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма * 
						(1 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
				КонецЕсли;
								
			КонецЕсли;														
			
			СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			
	        СтрокаТабличнойЧасти.СуммаНДС = ?(ФормаДокумента.Объект.СуммаВключаетНДС, 
								  				СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / 
												((СтавкаНДС + 100) / 100),
								  				СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
					        			
		КонецЕсли;
        		        
	КонецЦикла; 

КонецПроцедуры // ПересчитатьЦеныТабличнойЧастиПоВалюте()

// Выполняем пересчет цены по флагу СуммаВключаетНДС табличной части документа после изменений в форме 
// "Цены и валюта".
//
// Параметры:
//  ПредыдущаяВалюта - СправочникСсылка.Валюты, содержит ссылку на предыдущую
//                 валюту.
//
Процедура ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ФормаДокумента, ИмяТабличнойЧасти) Экспорт
	
	Для каждого СтрокаТабличнойЧасти Из ФормаДокумента.Объект[ИмяТабличнойЧасти] Цикл
		
		СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		
		Если СтрокаТабличнойЧасти.Свойство("Цена") Тогда
			Если ФормаДокумента.Объект.СуммаВключаетНДС Тогда
				СтрокаТабличнойЧасти.Цена = (СтрокаТабличнойЧасти.Цена * (100 + СтавкаНДС)) / 100;
			Иначе
				СтрокаТабличнойЧасти.Цена = (СтрокаТабличнойЧасти.Цена * 100) / (100 + СтавкаНДС);
			КонецЕсли;
		КонецЕсли;
		
		РассчитатьСуммуСтрокиТабличнойЧасти(ФормаДокумента, СтрокаТабличнойЧасти);
		
	КонецЦикла;
	
КонецПроцедуры // ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС()

// Обработчик события НачалоВыбора элементов формы связанных с пунктами назначения
//
Процедура ПунктНачалоВыбора(Элемент, СтандартнаяОбработка, ПутьКДанным) Экспорт
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТекущаяСтрока", ПутьКДанным);
	
	ОткрытьФорму("Справочник.уатПунктыНазначения.ФормаВыбора", ПараметрыОткрытия, Элемент);
КонецПроцедуры

// Обработчик события ОбработкаВыбора элементов формы связанных с пунктами назначения
//
Процедура ПунктОбработкаВыбора(ПутьКДанным, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	СтандартнаяОбработка = Ложь;
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) тогда
		Возврат;
	КонецЕсли;
	ПутьКДанным = ВыбранноеЗначение;
	
КонецПроцедуры

//Выполняет заполненение недостающих параметров в объединенном решении
//
Процедура ЗаполнитьСтруктуруЦеныИВалютыДляБП3(СтруктураЦеныИВалюта,ВалютаДокумента,ВалютаРасчетовПередИзменением ,УчитыватьНДС = Неопределено,СуммаВключаетНДС=Неопределено) Экспорт
	Если СтруктураЦеныИВалюта.Свойство("ДокументБезНДС") Тогда
		Если Не СтруктураЦеныИВалюта.Свойство("НалогообложениеНДС")И УчитыватьНДС <> Неопределено  Тогда
			СтруктураЦеныИВалюта.Вставить("НалогообложениеНДС",Не СтруктураЦеныИВалюта.ДокументБезНДС)
		КонецЕсли;
	КонецЕсли;
	Если Не СтруктураЦеныИВалюта.Свойство("ПредНалогообложениеНДС") И УчитыватьНДС <> Неопределено Тогда
		СтруктураЦеныИВалюта.Вставить("ПредНалогообложениеНДС",УчитыватьНДС);
	КонецЕсли;
	Если Не СтруктураЦеныИВалюта.Свойство("ПересчитатьЦены") Тогда
		ПересчтитатьЦены = ?(ВалютаДокумента = ВалютаРасчетовПередИзменением,Ложь,Истина);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьЦены",ПересчтитатьЦены);
	КонецЕсли;
	
	Если Не СтруктураЦеныИВалюта.Свойство("ПредСуммаВключаетНДС") И СуммаВключаетНДС <> Неопределено Тогда
		ПредСуммаВключаетНДС = СуммаВключаетНДС;
		СтруктураЦеныИВалюта.Вставить("ПредСуммаВключаетНДС",ПредСуммаВключаетНДС);
	КонецЕсли;

КонецПроцедуры


// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ НА КЛИЕНТЕ

// Выполняется при печати Бланков ТТН из документа ТТД
//
Функция ПечатьБланкиТТН(ПараметрыПечати) Экспорт
	Если ПараметрыПечати.ОбъектыПечати.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДокТТД = ПараметрыПечати.ОбъектыПечати[0];
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Документ", ДокТТД);
	ПараметрыОткрытия.Вставить("ПунктРазгрузки", уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ДокТТД, "АдресДоставки"));
	
	Если уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ДокТТД, "Дата") < Дата('20120313') Тогда
		ОткрытьФорму("Обработка.уатПечатьТТН.Форма", ПараметрыОткрытия);
	Иначе
		ОткрытьФорму("Обработка.уатПечатьТТН1208.Форма", ПараметрыОткрытия);
	КонецЕсли;
КонецФункции


// ОБРАБОТЧИКИ СОБЫТИЙ

// Обработчик события ПередУстановкойПометкиУдаления элемента формы
//
Процедура СписокДокументовПередУстановкойПометкиУдаления(ЭлементСписок, Отказ) Экспорт
	Ссылка = ЭлементСписок.ТекущиеДанные;
	Если (НЕ ЗначениеЗаполнено(Ссылка)) ИЛИ Ссылка.ПометкаУдаления Тогда
		// не должно такой ситуации возникнуть когда неопределенная или, но на всякий случай...
		// зато если уже помечен на удаление то отмечать его обратно можно без проверок-вопросов
	Иначе
		// проверяем только есть ли документы типовой конфигурации
		мсвТД = Неопределено;
		Если уатТиповыеДокументы.НайтиТиповойДокументДляДокументаУАТ(Ссылка, мсвТД) Тогда
			ТекстПредупр = "Для данного документа сформированы документы типовой конфигурации:";
			Для Каждого ТекТД Из мсвТД Цикл
				ТекстПредупр = ТекстПредупр + "
					|	" + ТекТД;
			КонецЦикла;
			ТекстПредупр = ТекстПредупр + "
				|Пометка на удаление запрещена!";
			Отказ = Истина;
			ПоказатьПредупреждение(Неопределено, ТекстПредупр, 10);
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

// Устанавливает отбор на выбор значения элемента формы Соглашение по указанному контрагенту
//
Процедура УстановитьОтборСоглашенияСКлиентом(ЭлементСоглашение, Контрагент) Экспорт
	мсвПараметрыВыбора = Новый Массив;
	мсвПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Партнер", уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Контрагент, "Партнер")));
	мсвПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Контрагент", Контрагент));
	ЭлементСоглашение.ПараметрыВыбора = Новый ФиксированныйМассив(мсвПараметрыВыбора);
КонецПроцедуры

// Процедура обработки нажатия гиперссылки в поле панели информации по ТС.
//
Процедура ПанельДопИнформацииПоТСПриНажатии(Форма, Элемент, ДанныеСобытия, СтандартнаяОбработка, ТС) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ТС) Тогда 
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(ДанныеСобытия.href, "ПриближениеСроковТО") > 0 Тогда 
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Отбор",                   Новый Структура("ТС", ТС));
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		ОткрытьФорму("Отчет.уатПланированиеРемонтныхРаботТС.Форма", ПараметрыФормы, Форма);
		
	ИначеЕсли СтрНайти(ДанныеСобытия.href, "СписокДокументовТС") > 0 Тогда 
		ПараметрыФормы = Новый Структура;
		Отбор = Новый Структура;
		Отбор.Вставить("ТС", ТС);
		ПараметрыФормы.Вставить("Отбор", Отбор);
		
		ОткрытьФорму("РегистрСведений.уатДокументыТС.ФормаСписка", ПараметрыФормы, Элемент);
		
	ИначеЕсли СтрНайти(ДанныеСобытия.href, "СписокТК") > 0 Тогда
		
		фиксНастройки = Новый НастройкиКомпоновкиДанных;
		эОтбор = фиксНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		эОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КомуВыдана");
		эОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		эОтбор.ПравоеЗначение = ТС;
		эОтбор.Использование = Истина;
		эОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		эОтбор = фиксНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		эОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
		эОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		эОтбор.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.уатСтатусыКарт.Аннулирована");
		эОтбор.Использование = Истина;
		эОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		эОтбор = фиксНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		эОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТКПросрочена");
		эОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		эОтбор.ПравоеЗначение = Истина;
		эОтбор.Использование  = Истина;
		эОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ФиксированныеНастройки", фиксНастройки);
		ПараметрыФормы.Вставить("ОтображатьНеАктуальные", Истина);
		
		ОткрытьФорму("Справочник.уатТопливныеКарты.ФормаСписка", ПараметрыФормы, Элемент);
		
	ИначеЕсли СтрНайти(ДанныеСобытия.href, "ДокументыВодителя:") > 0 Тогда 
		Попытка
			стрGUID = Новый УникальныйИдентификатор(Прав(ДанныеСобытия.href, 36));
		Исключение
			Возврат;
		КонецПопытки;
		
		Водитель = уатОбщегоНазначения.СформироватьСсылкуНаСотрудникаПоGUID(стрGUID);
		Если Не ЗначениеЗаполнено(Водитель) Тогда 
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Сотрудник", Водитель));
		ОткрытьФорму("РегистрСведений.уатДокументыВодителей.ФормаСписка", ПараметрыФормы, Элемент);
		
	ИначеЕсли СтрНайти(ДанныеСобытия.href, "ТКВодителя:") > 0 Тогда 
		Попытка
			стрGUID = Новый УникальныйИдентификатор(Прав(ДанныеСобытия.href, 36));
		Исключение
			Возврат;
		КонецПопытки;
		
		Водитель = уатОбщегоНазначения.СформироватьСсылкуНаСотрудникаПоGUID(стрGUID);
		Если Не ЗначениеЗаполнено(Водитель) Тогда 
			Возврат;
		КонецЕсли;
		
		фиксНастройки = Новый НастройкиКомпоновкиДанных;
		эОтбор = фиксНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		эОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КомуВыдана");
		эОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		эОтбор.ПравоеЗначение = Водитель;
		эОтбор.Использование = Истина;
		эОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		эОтбор = фиксНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		эОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
		эОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		эОтбор.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.уатСтатусыКарт.Аннулирована");
		эОтбор.Использование = Истина;
		эОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;

		эОтбор = фиксНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		эОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТКПросрочена");
		эОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		эОтбор.ПравоеЗначение = Истина;
		эОтбор.Использование  = Истина;
		эОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ФиксированныеНастройки", фиксНастройки);
		ПараметрыФормы.Вставить("ОтображатьНеАктуальные", Истина);
		
		ОткрытьФорму("Справочник.уатТопливныеКарты.ФормаСписка", ПараметрыФормы, Элемент);
		
	ИначеЕсли СтрНайти(ДанныеСобытия.href, "ОтчетПробег") > 0 Тогда 
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Отбор",                   Новый Структура("ТС", ТС));
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		ОткрытьФорму("Отчет.уатПробегТС.Форма", ПараметрыФормы, Форма);
		
	ИначеЕсли СтрНайти(ДанныеСобытия.href, "ОтчетНаработка") > 0 Тогда 
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Отбор",                   Новый Структура("ТС", ТС));
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		ОткрытьФорму("Отчет.уатНаработкаОборудованияВМоточасах.Форма", ПараметрыФормы, Форма);
		
	Иначе 
		Попытка
			ПерейтиПоНавигационнойСсылке(ДанныеСобытия.href);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ СЕАНСА

// Конечная (клиентская) стадия инициализации подсистемы УАТ - клиентские предупреждения, сообщения
//
Процедура уатИнициализацияСеансаКлиент(ДопПараметры = Неопределено) ЭКСПОРТ

	Если ТипЗнч(ДопПараметры) <> Тип("Структура") Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	Если НЕ ДопПараметры.ПодсистемаУАТинициализирована Тогда
	
		// Проверка необходимости обновления информационной базы
		Если ДопПараметры.НеобходимоВыполнитьОбновление Тогда 
			ДопПараметры.Вставить("Отказ",Истина);
			ОткрытьФорму("Обработка.уатПомощникОбновленияИБ.Форма",,,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			Возврат;
		КонецЕсли;
		
		// Проверка разрешение работы пользователя в "правах и настройках"
		Если НЕ ДопПараметры.РазрешитьРаботуСПрограммой Тогда
			Описание = "Текущему пользователю <" + ПользователиКлиентСервер.ТекущийПользователь() + "> запрещено работать с подсистемой ""Управление автотранспортом""!
				|Обратитесь к администратору базы данных для установки прав и настроек.";
			ДопПараметры.Вставить("Отказ",Истина);
			ПараметрыФормы = Новый Структура("Описание", Описание);
			ОписаниеОповещения = Новый ОписаниеОповещения("НастройкиСистемыЗащитыОбработкаРезультата", ЭтотОбъект, ДопПараметры);
			ОткрытьФорму("ОбщаяФорма.уатПредупреждение", ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка системы защиты
	Если ДопПараметры.ОшибкаСистемыЗащиты Тогда
		ДопПараметры.Вставить("Отказ",Истина);
		ПараметрыФормы = Новый Структура;
		Описание =  "Менеджер лицензий подсистемы ""Управление автотранспортом"" (серия ключей 7662) не подключен или параметры подключения указаны не верно!";
		Если ДопПараметры.ДоступнаРольСЛК Тогда 
			ПараметрыФормы.Вставить("МенеджерЛицензийСЛК");          
		Иначе
			Описание = Описание + "
			|Для настройки требуется роль ""Администратор"" подсистемы ""Управление автотранспортом"" или роль ""Управление менеджером лицензий СЛК"".";
		КонецЕсли;
		ПараметрыФормы.Вставить("Описание",Описание);
		ПараметрыФормы.Вставить("Заголовок", "Ошибка системы защиты");
		ОписаниеОповещения = Новый ОписаниеОповещения("НастройкиСистемыЗащитыОбработкаРезультата", ЭтотОбъект, ДопПараметры);
		ОткрытьФорму("ОбщаяФорма.уатПредупреждение", ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		Возврат;
	КонецЕсли;
	
	Если НЕ ДопПараметры.ПодсистемаУАТинициализирована Тогда

		// Установка расширения браузера для веб-клиента
		#Если ВебКлиент Тогда
			Оповещение =  Новый ОписаниеОповещения("НачатьПодключениеРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, Новый Структура("ПовторноеПодключение", Ложь));
			НачатьПодключениеРасширенияРаботыСФайлами(Оповещение); 
		#КонецЕсли
		
		// Установка признака успешной инициализации подсистемы УАТ
		уатОбщегоНазначения.УстановитьПодсистемаУАТинициализирована();
		ДопПараметры.ПодсистемаУАТинициализирована = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при получении результата работы подчиненной формы.
//
// Параметры:
//  РезультатЗакрытия  - Произвольный - Результат выполнения операции в подчиненной форме.
//  ПараметрОповещения - Произвольный - Дополнительные параметры вызова обработчика.
//
Процедура НастройкиСистемыЗащитыОбработкаРезультата(РезультатЗакрытия, Параметры=Неопределено) Экспорт
	
	Зарезервировано = Истина;
	
КонецПроцедуры // НастройкиСистемыЗащитыОбработкаРезультата()

Процедура НачатьПодключениеРасширенияРаботыСФайламиЗавершение(Подключено, ДополнительныеПараметры) Экспорт 
	
	Если Не ДополнительныеПараметры.ПовторноеПодключение И Не Подключено Тогда
		Оповещение = Новый ОписаниеОповещения("НачатьУстановкуРасширенияРаботыСФайламиЗавершение", ЭтотОбъект);
		НачатьУстановкуРасширенияРаботыСФайлами(Оповещение);
		
	ИначеЕсли ДополнительныеПараметры.ПовторноеПодключение И Не Подключено Тогда 
		ТекстОшибки = "Не удалось подключить расширение работы с файлами.";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьУстановкуРасширенияРаботыСФайламиЗавершение(ДополнительныеПараметры) Экспорт 
	
	Оповещение = Новый ОписаниеОповещения("НачатьПодключениеРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, Новый Структура("ПовторноеПодключение", Ложь));
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	
КонецПроцедуры

Процедура УстановитьРежимОсновногоОкнаДляТерминалаПЛ() Экспорт
	Если уатОбщегоНазначения_проф.НеобходимоОткрытиеТерминалаПЛприСтарте() Тогда
		КлиентскоеПриложение.УстановитьРежимОсновногоОкна(РежимОсновногоОкнаКлиентскогоПриложения.ПолноэкранноеРабочееМесто);
	КонецЕсли;
КонецПроцедуры

Процедура ОткрытьТерминалПЛПриНачалеРаботыСистемы() Экспорт
	Если уатОбщегоНазначения_проф.НеобходимоОткрытиеТерминалаПЛприСтарте() Тогда
		ДопПараметры = Неопределено;
		уатЗащищенныеФункцииСервер.уатИнициализацияСеансаСервер(ДопПараметры);
		уатОбщегоНазначенияКлиент.уатИнициализацияСеансаКлиент(ДопПараметры);
		
		Если ДопПараметры.ПодсистемаУАТинициализирована Тогда
			ОткрытьФорму("Обработка.уатТерминалПриемаИВыдачиПутевыхЛистов.Форма",,,, ВариантОткрытияОкна.ОтдельноеОкно);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПОДКЛЮЧАЕМОЕ ОБОРУДОВАНИЕ

// Обработка внешнего события в формах
//
Процедура ОбработкаВнешнегоСобытия(Источник, Событие, Данные) Экспорт
		
	// ПодключаемоеОборудование
	// Подготовить данные
	
		ОписаниеСобытия = Новый Структура();
		ОписаниеОшибки  = "";
		
		ОписаниеСобытия.Вставить("Источник", Источник);
		ОписаниеСобытия.Вставить("Событие",  Событие);
		ОписаниеСобытия.Вставить("Данные",   Данные);
		
		// Передать на обработку данные.
		Результат = МенеджерОборудованияКлиент.ОбработатьСобытиеОтУстройства(ОписаниеСобытия, ОписаниеОшибки);
		Если Не Результат Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='При обработке внешнего события от устройства произошла ошибка.'")
			+ Символы.ПС + ОписаниеОшибки);
		КонецЕсли;
	
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

Процедура ПолучитьОбработчикДрайвера(ОбработчикДрайвера, ОбщийМодуль) Экспорт
	// Сканеры штрихкода
	Если ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1ССканерыШтрихкода") Тогда
		ОбщийМодуль = ПодключаемоеОборудование1ССканерыШтрихкодаКлиент;
	ИначеЕсли ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканкодСканерыШтрихкода") Тогда
		ОбщийМодуль = ПодключаемоеОборудованиеСканкодСканерыШтрихкодаКлиент;
	ИначеЕсли ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолСканерыШтрихкода") Тогда
		ОбщийМодуль = ПодключаемоеОборудованиеАтолСканерыШтрихкодаКлиент;
	КонецЕсли;
	// Конец Сканеры штрихкода
	
	// Считыватели магнитных карт
	Если ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1ССчитывателиМагнитныхКарт") Тогда
		ОбщийМодуль = ПодключаемоеОборудование1ССчитывателиМагнитныхКартКлиент;
	ИначеЕсли ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолСчитывателиМагнитныхКарт") Тогда
		ОбщийМодуль = ПодключаемоеОборудованиеАтолСчитывателиМагнитныхКартКлиент;
	КонецЕсли;
	// Конец Считыватели магнитных карт.
КонецПроцедуры

Процедура ОбработатьСобытиеПодключаемогоОборудования(ИмяСобытия, Параметр, Источник, ЭтоКартаДоступа = Ложь) Экспорт
	Если ИмяСобытия = "ScanData" Тогда
		ДанныеШтрихкодов = Новый Массив();
		Если Параметр[1] = Неопределено Тогда
			ДанныеШтрихкодов.Добавить(Новый Структура("Штрихкод, Количество", Параметр[0], 1));
		Иначе
			ДанныеШтрихкодов.Добавить(Новый Структура("Штрихкод, Количество", Параметр[1][1], 1));
		КонецЕсли;
		
		//проверки и получение значения штрихкода
		Штрихкод = "";
		Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") И ДанныеШтрихкодов.Количество() > 0 Тогда
			СтруктураШтрихкод = ДанныеШтрихкодов[0];
			Если ТипЗнч(СтруктураШтрихкод) = Тип("Структура") И СтруктураШтрихкод.Свойство("Штрихкод") Тогда
				Штрихкод = СтруктураШтрихкод.Штрихкод;
			КонецЕсли;
		КонецЕсли;
		
		Если Штрихкод <> "" Тогда
			ТекОбъект = уатЗащищенныеФункцииСервер_проф.ПолучитьОбъектПоШтрихкоду(Штрихкод, ЭтоКартаДоступа);
			Если ТекОбъект <> Неопределено Тогда
				ПоказатьЗначение(Неопределено, ТекОбъект);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Процедура НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, ТипыОборудования) Экспорт
	Если глПодключаемоеОборудование = Неопределено Тогда
		МенеджерОборудованияКлиент.ПриНачалеРаботыСистемы();
	КонецЕсли;
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, ТипыОборудования);
КонецПроцедуры
