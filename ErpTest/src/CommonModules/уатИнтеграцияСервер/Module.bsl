////////////////////////////////////////////////////////////////////////////////
// Переопределяемые процедуры, вызываемые из обработчиков типовых форм.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
// 	Форма - форма, из обработчика события которой происходит вызов процедуры.
//	см. справочную информацию по событиям управляемой формы.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если Форма.ИмяФормы = "Справочник.ТипыТранспортныхСредств.Форма.ФормаЭлемента" Тогда 
		ТипыТСФормаЭлементаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Справочник.ТранспортныеСредства.Форма.ФормаЭлемента" Тогда
		ТранспортныеСредстваФормаЭлементаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Справочник.ТранспортныеСредства.Форма.ФормаВыбора" Тогда
		ТранспортныеСредстваФормаВыбораПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Справочник.УзлыОбъектовЭксплуатации.Форма.ФормаЭлемента" Тогда
		УзлыОбъектовЭксплуатацииФормаЭлементаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет в ТЧ документа "Табель учета рабочего времени" данные отработанного сотрудниками времени по Путевым листам
Процедура ЗаполнитьТабельПоДаннымПЛ(ЭтаФорма, ОчищатьПерезЗаполнением = Ложь) Экспорт
	Объект = ЭтаФорма.Объект;
		
	ОМ_УчетРабочегоВремениРасширенный = ОбщегоНазначения.ОбщийМодуль("УчетРабочегоВремениРасширенный");
	ОМ_УчетРабочегоВремениРасширенныйКлиентСервер = ОбщегоНазначения.ОбщийМодуль("УчетРабочегоВремениРасширенныйКлиентСервер");
	ОМ_УчетРабочегоВремениРасширенныйФормы = ОбщегоНазначения.ОбщийМодуль("УчетРабочегоВремениРасширенныйФормы");
	
	КодыВидовВремени = ОМ_УчетРабочегоВремениРасширенный.КодыВидовВремени(Объект.ПериодРегистрации);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатРабочееВремяСотрудниковОбороты.Сотрудник КАК Сотрудник,
	|	1 КАК Дни,
	|	уатРабочееВремяСотрудниковОбороты.ВремяОборот / 3600 КАК Часы,
	|	уатРабочееВремяСотрудниковОбороты.ДатаРаботы КАК Дата,
	|	уатРабочееВремяСотрудниковОбороты.ВидИспользованияРабочегоВремени КАК ВидУчетаВремени,
	|	ВЫБОР
	|		КОГДА уатРабочееВремяСотрудниковОбороты.ВидИспользованияРабочегоВремени = &Явка
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	РегистрНакопления.уатРабочееВремяСотрудников.Обороты(&Начало, &Конец, , Организация = &Организация) КАК уатРабочееВремяСотрудниковОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	Дата,
	|	Приоритет");
	Запрос.УстановитьПараметр("Начало", Объект.ДатаНачалаПериода);
	Запрос.УстановитьПараметр("Конец", Объект.ДатаОкончанияПериода);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Явка", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Явка"));
	
	ВыборкаДанныхОВремени = Запрос.Выполнить().Выбрать();
	
	ТекущийСотрудник = Неопределено;
	ДанныеОВремениПоСотруднику = Новый Массив;
	
	НомерСтрокиСотрудник = 1;
	Для Каждого ТекСтрока Из Объект.ДанныеОВремени Цикл
		НомерСтрокиСотрудник = Макс(НомерСтрокиСотрудник, ТекСтрока.НомерСтрокиСотрудник+1);
	КонецЦикла;
	
	Если ОчищатьПерезЗаполнением Тогда
		Пока ВыборкаДанныхОВремени.СледующийПоЗначениюПоля("Сотрудник") Цикл
			мсвСтрокиУдалить = Объект.ДанныеОВремени.НайтиСтроки(Новый Структура("Сотрудник", ВыборкаДанныхОВремени.Сотрудник));
			Для Каждого ТекСтрокаУдалить Из мсвСтрокиУдалить Цикл
				Объект.ДанныеОВремени.Удалить(ТекСтрокаУдалить);
			КонецЦикла;
		КонецЦикла;
		ВыборкаДанныхОВремени.Сбросить();
	КонецЕсли;
		
	ДанныеОВремениПоСотруднику = Новый ТаблицаЗначений;
	ДанныеОВремениПоСотруднику.Колонки.Добавить("Сотрудник");
	ДанныеОВремениПоСотруднику.Колонки.Добавить("ВидУчетаВремени");
	ДанныеОВремениПоСотруднику.Колонки.Добавить("Дата");
	ДанныеОВремениПоСотруднику.Колонки.Добавить("Дни");
	ДанныеОВремениПоСотруднику.Колонки.Добавить("Часы");
	ДанныеОВремениПоСотруднику.Колонки.Добавить("НормаЧасов");
	
	Пока ВыборкаДанныхОВремени.СледующийПоЗначениюПоля("Сотрудник") Цикл
		ДанныеОВремениПоСотруднику.Очистить();
		Пока ВыборкаДанныхОВремени.Следующий() Цикл
			СтрокаТаблицыДанныхОВремени = ДанныеОВремениПоСотруднику.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыДанныхОВремени, ВыборкаДанныхОВремени);
		КонецЦикла;
		МассивСтрокПоСотруднику = Объект.ДанныеОВремени.НайтиСтроки(Новый Структура("Сотрудник", ВыборкаДанныхОВремени.Сотрудник));
		Если МассивСтрокПоСотруднику.Количество() = 0 Тогда
			МассивСтрокПоСотруднику = ТабельНоваяСтрокаДанныхОВремени(Объект.ДанныеОВремени,
				ВыборкаДанныхОВремени.Сотрудник, НомерСтрокиСотрудник, ЭтаФорма.УстанавливаемаяВысотаСтроки);
			НомерСтрокиСотрудник = НомерСтрокиСотрудник + 1;
		КонецЕсли;
		
		ТабельЗаполнитьСтрокиПоСотруднику(Объект, ДанныеОВремениПоСотруднику, МассивСтрокПоСотруднику, КодыВидовВремени, ЭтаФорма.ОписаниеВидовВремени, ЭтаФорма.УстанавливаемаяВысотаСтроки);
	КонецЦикла;
	
	ОМ_УчетРабочегоВремениРасширенныйФормы.ТабельУстановитьВысотуСтрокПоСотрудникам(ЭтаФорма, ЭтаФорма.УстанавливаемаяВысотаСтроки);
	
	ОбозначенияВидовВремени = ОМ_УчетРабочегоВремениРасширенныйКлиентСервер.ТабельОбозначенияВидовВремени(ЭтаФорма.ОписаниеВидовВремени);
	СтрокиПоСотруднику = Новый Массив;                                                                                                                        
	ТекущийСотрудник = Неопределено;
	Для Каждого СтрокаДанныхОВремени Из Объект.ДанныеОВремени Цикл
		Если СтрокаДанныхОВремени.Сотрудник <> ТекущийСотрудник
			И СтрокиПоСотруднику.Количество() > 0 Тогда
			ОМ_УчетРабочегоВремениРасширенныйКлиентСервер.ТабельЗаполнитьИтогиПоСотруднику(СтрокиПоСотруднику, ОбозначенияВидовВремени);
			СтрокиПоСотруднику = Новый Массив;
			СтрокиПоСотруднику.Добавить(СтрокаДанныхОВремени);
			ТекущийСотрудник = СтрокаДанныхОВремени.Сотрудник;
		Иначе
			СтрокиПоСотруднику.Добавить(СтрокаДанныхОВремени);
			ТекущийСотрудник = СтрокаДанныхОВремени.Сотрудник;
		КонецЕсли;
	КонецЦикла;
	Если СтрокиПоСотруднику.Количество() > 0 Тогда
		ОМ_УчетРабочегоВремениРасширенныйКлиентСервер.ТабельЗаполнитьИтогиПоСотруднику(СтрокиПоСотруднику, ОбозначенияВидовВремени);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ТипыТСФормаЭлементаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка)
	
	// Вывод на форму реквизита "уатВидТС".
	ЭлементУатВидТС = Форма.Элементы.Добавить("_уатВидТС", Тип("ПолеФормы"), Форма);
	ЭлементУатВидТС.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементУатВидТС.ПутьКДанным = "Объект.уатВидТС";
	
КонецПроцедуры

Процедура ТранспортныеСредстваФормаЭлементаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка)
	
	УстановитьПривилегированныйРежим(Истина);
	Если Не Метаданные.Константы.Найти("ИспользоватьУправлениеДоставкой") = Неопределено Тогда 
		Если Не Константы.ИспользоватьУправлениеДоставкой.Получить() Тогда 
			Отказ = Истина;
			ТекстОшибки = "Для использования справочника ""Транспортные средства"" необходимо включить использование подсистемы ""Управление доставкой"" в панели ""Администрирование"", раздел ""Склад и доставка"".";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			УстановитьПривилегированныйРежим(Ложь);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	// Вывод на форму гиперссылки для перехода к форме реквизитов модуля УАТ.
	ЭлементГСФормаУАТТС = Форма.Элементы.Добавить("_уатФормаДопСвойствТС", Тип("ДекорацияФормы"), Форма);
	ЭлементГСФормаУАТТС.Заголовок   = "Дополнительные реквизиты модуля ""Управление автотранспортом""";
	ЭлементГСФормаУАТТС.Вид         = ВидДекорацииФормы.Надпись;
	ЭлементГСФормаУАТТС.Гиперссылка = Истина;
	ЭлементГСФормаУАТТС.Подсказка   	= "Открыть форму дополнительных реквизитов модуля ""Управление автотранспортом"".";
	ЭлементГСФормаУАТТС.УстановитьДействие("Нажатие", "Подключаемый_ВыполнитьПереопределяемуюКоманду");
	ЭлементГСФормаУАТТС.АвтоМаксимальнаяШирина = Ложь;
	
	// Определение поведения элемента при копировании.
	Если Форма.Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Форма.Параметры.ЗначениеКопирования) Тогда 
		Форма.Объект.Код                                      = "";
		Форма.Объект.Наименование                             = "";
		Форма.Объект.уатМодель                                = Неопределено;
		Форма.Объект.уатВидМоделиТС                           = Неопределено;
		Форма.Объект.уатДатаВводаВЭксплуатацию                = '00010101';
		Форма.Объект.уатДатаВыбытия                           = '00010101';
		Форма.Объект.уатОрганизация                           = Неопределено;
		Форма.Объект.уатПодразделение                         = Неопределено;
		Форма.Объект.уатКолонна                               = Неопределено;
		Форма.Объект.ЛицензионнаяКарточкаВид                  = Неопределено;
		Форма.Объект.ЛицензионнаяКарточкаНомер                = Неопределено;
		Форма.Объект.ЛицензионнаяКарточкаРегистрационныйНомер = Неопределено;
		Форма.Объект.ЛицензионнаяКарточкаСерия                = Неопределено;
		Форма.Объект.уатVIN                                   = "";
		Форма.Объект.уатНомерДвигателя                        = "";
		Форма.Объект.уатНомерКузова                           = "";
		Форма.Объект.уатНомерШасси                            = "";
		Форма.Объект.уатНомерКПП                              = "";
		Форма.Объект.уатОбъектЭксплуатации                    = Неопределено;
		Форма.Объект.уатКодПоКлассификатору                   = Неопределено;
		Форма.Объект.уатБалансоваяСтоимость                   = 0;
		Форма.Объект.уатСрокИспользования                     = 0;
		Форма.Объект.уатИДвСистемеНавигации                   = "";
		Форма.Объект.уатИспользуемаяСистемаGPS                = Перечисления.уатСистемаGPS.ПустаяСсылка();
		Форма.Объект.уатКоэффициентИзмененияНормТоплива       = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТранспортныеСредстваФормаВыбораПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка)
	
	ГруппаРазмещения = Форма.Элементы.Найти("Список");
	Если ГруппаРазмещения = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЭлементГосНомер = Форма.Элементы.Добавить("Код", Тип("ПолеФормы"), ГруппаРазмещения);
	ЭлементГосНомер.Вид         = ВидПоляФормы.ПолеНадписи;
	ЭлементГосНомер.ПутьКДанным = "Список.Код";
	ЭлементГосНомер.Заголовок   = "Гос. номер";
	
	ЭлементГаражныйНомер = Форма.Элементы.Добавить("уатГаражныйНомер", Тип("ПолеФормы"), ГруппаРазмещения);
	ЭлементГаражныйНомер.Вид         = ВидПоляФормы.ПолеНадписи;
	ЭлементГаражныйНомер.ПутьКДанным = "Список.уатГаражныйНомер";
	
	ЭлементОрганизация = Форма.Элементы.Добавить("уатОрганизация", Тип("ПолеФормы"), ГруппаРазмещения);
	ЭлементОрганизация.Вид         = ВидПоляФормы.ПолеНадписи;
	ЭлементОрганизация.ПутьКДанным = "Список.уатОрганизация";
	
	ЭлементКолонна = Форма.Элементы.Добавить("уатКолонна", Тип("ПолеФормы"), ГруппаРазмещения);
	ЭлементКолонна.Вид         = ВидПоляФормы.ПолеНадписи;
	ЭлементКолонна.ПутьКДанным = "Список.уатКолонна";
	
	ЭлементПодразделение = Форма.Элементы.Добавить("уатПодразделение", Тип("ПолеФормы"), ГруппаРазмещения);
	ЭлементПодразделение.Вид         = ВидПоляФормы.ПолеНадписи;
	ЭлементПодразделение.ПутьКДанным = "Список.уатПодразделение";
	
	ЭлементМодель = Форма.Элементы.Добавить("уатМодель", Тип("ПолеФормы"), ГруппаРазмещения);
	ЭлементМодель.Вид         = ВидПоляФормы.ПолеНадписи;
	ЭлементМодель.ПутьКДанным = "Список.уатМодель";
	
	ЭлементТип = Форма.Элементы.Добавить("Тип", Тип("ПолеФормы"), ГруппаРазмещения);
	ЭлементТип.Вид         = ВидПоляФормы.ПолеНадписи;
	ЭлементТип.ПутьКДанным = "Список.Тип";
	
КонецПроцедуры

Процедура УзлыОбъектовЭксплуатацииФормаЭлементаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка)
	
	// Вывод на форму гиперссылки для перехода к форме реквизитов модуля УАТ.
	ЭлементГСФормаУАТТС = Форма.Элементы.Добавить("_уатФормаДопСвойствУзловОбъектовЭксплуатации", Тип("ДекорацияФормы"), Форма);
	ЭлементГСФормаУАТТС.Заголовок   = "Дополнительные реквизиты модуля ""Управление автотранспортом""";
	ЭлементГСФормаУАТТС.Вид         = ВидДекорацииФормы.Надпись;
	ЭлементГСФормаУАТТС.Гиперссылка = Истина;
	ЭлементГСФормаУАТТС.Подсказка   = "Открыть форму дополнительных реквизитов модуля ""Управление автотранспортом"".";
	ЭлементГСФормаУАТТС.УстановитьДействие("Нажатие", "Подключаемый_ВыполнитьПереопределяемуюКоманду");
	ЭлементГСФормаУАТТС.АвтоМаксимальнаяШирина = Ложь;
	
	// Если объект доступен для редактирования.
	Если Не Форма.ВладелецЛиквидирован И Форма.Редактируется И Не Форма.ТолькоПросмотр Тогда 
		// Добавление кнопки для заполнения наименования по данным УАТ.
		гГруппаНаименование = Форма.Элементы.Добавить("_ГруппаНаименованиеУАТ", Тип("ГруппаФормы"), Форма.Элементы.ГруппаРеквизитыШапкиЛево);
		гГруппаНаименование.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		гГруппаНаименование.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		гГруппаНаименование.Отображение         = ОтображениеОбычнойГруппы.Нет;
		гГруппаНаименование.ОтображатьЗаголовок = Ложь;
		
		Форма.Элементы.Переместить(Форма.Элементы.Наименование, гГруппаНаименование);
		
		кЗаполнитьНаименование = Форма.Команды.Добавить("_уатУзелОбъектовЭксплуатацииЗаполнитьНаименованиеПоДаннымУАТ");
		кЗаполнитьНаименование.Заголовок                 = "Заполнить по данным УАТ";
		кЗаполнитьНаименование.Действие                  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
		кЗаполнитьНаименование.ИзменяетСохраняемыеДанные = Истина;
		кЗаполнитьНаименование.Картинка                  = БиблиотекаКартинок.ПереместитьВлево;
		кЗаполнитьНаименование.Подсказка                 = "Заполнить наименование по данным УАТ";
		кЗаполнитьНаименование.Отображение               = ОтображениеКнопки.Картинка;
		
		ЭлементКнЗаполнитьНаименование = Форма.Элементы.Добавить("_уатУзелОбъектовЭксплуатацииЗаполнитьНаименованиеПоДаннымУАТ", Тип("КнопкаФормы"), гГруппаНаименование);
		ЭлементКнЗаполнитьНаименование.ИмяКоманды  = "_уатУзелОбъектовЭксплуатацииЗаполнитьНаименованиеПоДаннымУАТ";
		
		Форма.Элементы.Переместить(гГруппаНаименование, Форма.Элементы.ГруппаРеквизитыШапкиЛево, Форма.Элементы.НаименованиеПолное);
		
		// Добавление кнопки для заполнения модели по данным УАТ.
		гГруппаМодель = Форма.Элементы.Добавить("_ГруппаМодельУАТ", Тип("ГруппаФормы"), Форма.Элементы.ГруппаОсновныеРеквизиты);
		гГруппаМодель.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		гГруппаМодель.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		гГруппаМодель.Отображение         = ОтображениеОбычнойГруппы.Нет;
		гГруппаМодель.ОтображатьЗаголовок = Ложь;
		
		Форма.Элементы.Переместить(Форма.Элементы.Модель, гГруппаМодель);
		
		кЗаполнитьМодель = Форма.Команды.Добавить("_уатУзелОбъектовЭксплуатацииЗаполнитьМодельПоДаннымУАТ");
		кЗаполнитьМодель.Заголовок                 = "Заполнить по данным УАТ";
		кЗаполнитьМодель.Действие                  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
		кЗаполнитьМодель.ИзменяетСохраняемыеДанные = Истина;
		кЗаполнитьМодель.Картинка                  = БиблиотекаКартинок.ПереместитьВлево;
		кЗаполнитьМодель.Подсказка                 = "Заполнить модель по данным УАТ";
		кЗаполнитьМодель.Отображение               = ОтображениеКнопки.Картинка;
		
		ЭлементКнЗаполнитьМодель = Форма.Элементы.Добавить("_уатУзелОбъектовЭксплуатацииЗаполнитьМодельПоДаннымУАТ", Тип("КнопкаФормы"), гГруппаМодель);
		ЭлементКнЗаполнитьМодель.ИмяКоманды  = "_уатУзелОбъектовЭксплуатацииЗаполнитьМодельПоДаннымУАТ";
		
		Форма.Элементы.Переместить(гГруппаМодель, Форма.Элементы.ГруппаОсновныеРеквизиты, Форма.Элементы.СерийныйНомер);
	КонецЕсли;
	
КонецПроцедуры

#Область ЗаполнениеТабеляПоДаннымПЛ

Функция ТабельНоваяСтрокаДанныхОВремени(ДанныеОВремени, Сотрудник, НомерСтрокиСотрудник, ВысотаСтроки)
	СтрокиПоСотруднику = Новый Массив;
	
	НоваяСтрока = ДанныеОВремени.Добавить();
	НоваяСтрока.Сотрудник = Сотрудник;
	НоваяСтрока.НомерСтрокиСотрудник = НомерСтрокиСотрудник;
	НоваяСтрока.ЭтоПерваяСтрокаПоСотруднику = Истина;
	НоваяСтрока.ЧетнаяСтрока = (НомерСтрокиСотрудник % 2 = 0); 
	НоваяСтрока.ПустаяСтрока = Истина;
	
	СтрокиПоСотруднику.Добавить(НоваяСтрока);
	
	Для Сч = 2 По ВысотаСтроки Цикл
		НоваяСтрока = ДанныеОВремени.Добавить();
		НоваяСтрока.Сотрудник = Сотрудник;
		НоваяСтрока.НомерСтрокиСотрудник = НомерСтрокиСотрудник;
		НоваяСтрока.ЭтоПерваяСтрокаПоСотруднику = Ложь;
		НоваяСтрока.ЧетнаяСтрока = (НомерСтрокиСотрудник % 2 = 0); 
		НоваяСтрока.ПустаяСтрока = Истина;
		
		СтрокиПоСотруднику.Добавить(НоваяСтрока);
	КонецЦикла;	
	
	Возврат СтрокиПоСотруднику;
КонецФункции

Процедура ТабельЗаполнитьСтрокиПоСотруднику(Объект, ДанныеОВремениПоСотруднику, МассивСтрокПоСотруднику, КодыВидовВремени, ОписаниеВидовВремени, ВысотаСтроки)
	
	ВидВремениРабочееВремя = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");
	
	ОбрабатываемаяДата = '00010101';	

	ОМ_УчетРабочегоВремениРасширенныйКлиентСервер = ОбщегоНазначения.ОбщийМодуль("УчетРабочегоВремениРасширенныйКлиентСервер");
	
	НормаЧасов = 0;
	МаксимальноеКоличествоВидовВремени = 0;
	МаксимальноеКоличествоЧасовНаДату = -1;
	ВидВремениПоУмолчанию = Неопределено;
	Для Каждого СтрокаДанныхОВремени Из ДанныеОВремениПоСотруднику Цикл
		Если СтрокаДанныхОВремени.ВидУчетаВремени = ВидВремениРабочееВремя Тогда
			Продолжить;
		КонецЕсли;	
		
		Если СтрокаДанныхОВремени.Дата <> ОбрабатываемаяДата Тогда 
			НомерДня = День(СтрокаДанныхОВремени.Дата);	
			НомерВидаВремениНаДату = 1;
			
			Если ВидВремениПоУмолчанию <> Неопределено Тогда
				МассивСтрокПоСотруднику[0]["ВидВремениПоУмолчаниюОбозначение" + День(ОбрабатываемаяДата)] = КодыВидовВремени.Получить(ВидВремениПоУмолчанию);	
			КонецЕсли;	
		Иначе
			НомерВидаВремениНаДату = НомерВидаВремениНаДату + 1;
		КонецЕсли;
		
		Если НомерВидаВремениНаДату > МассивСтрокПоСотруднику.Количество() Тогда
			СтрокаТабеля = ОМ_УчетРабочегоВремениРасширенныйКлиентСервер.ТабельНоваяСтрокаПоСотруднику(Объект.ДанныеОВремени, МассивСтрокПоСотруднику[0]);	
			МассивСтрокПоСотруднику.Добавить(СтрокаТабеля);
		Иначе
			СтрокаТабеля = МассивСтрокПоСотруднику[НомерВидаВремениНаДату - 1];		
		КонецЕсли;	
		
		СтрокаТабеля["ВидВремени" + НомерДня] = СтрокаДанныхОВремени.ВидУчетаВремени;
		СтрокаТабеля["Часов" + НомерДня] = СтрокаТабеля["Часов" + НомерДня] + СтрокаДанныхОВремени.Часы;
		
		Если НомерВидаВремениНаДату = 1 Тогда
			СтрокаТабеля["ЧасовНорма" + НомерДня] = СтрокаДанныхОВремени.НормаЧасов;
		КонецЕсли;	
				
		БуквенноеОбозначение = КодыВидовВремени.Получить(СтрокаДанныхОВремени.ВидУчетаВремени);
		
		СтрокаТабеля["Время" + НомерДня + "Представление"] = ОМ_УчетРабочегоВремениРасширенныйКлиентСервер.ТабельПредставлениеВремениПоВиду(БуквенноеОбозначение, СтрокаТабеля["Часов" + НомерДня]);  
		СтрокаТабеля.ПустаяСтрока = Ложь;
		
		ОбрабатываемаяДата = СтрокаДанныхОВремени.Дата;
		МаксимальноеКоличествоВидовВремени = Макс(МаксимальноеКоличествоВидовВремени, НомерВидаВремениНаДату);
		
		Если СтрокаДанныхОВремени.Часы > МаксимальноеКоличествоЧасовНаДату Тогда
			ВидВремениПоУмолчанию = СтрокаДанныхОВремени.ВидУчетаВремени;	
		КонецЕсли;	
	КонецЦикла;	
	
	Если ВидВремениПоУмолчанию <> Неопределено И ОбрабатываемаяДата <> '00010101' Тогда
		МассивСтрокПоСотруднику[0]["ВидВремениПоУмолчаниюОбозначение" + День(ОбрабатываемаяДата)] = КодыВидовВремени.Получить(ВидВремениПоУмолчанию);	
	КонецЕсли;	
	
	КоличествоСтрокПоСотруднику = МассивСтрокПоСотруднику.Количество();
	
	Сотрудник = МассивСтрокПоСотруднику[0].Сотрудник;
	
	Для Каждого СтрокаПоСотруднику Из МассивСтрокПоСотруднику Цикл
		СтрокаПоСотруднику.Сотрудник = Сотрудник;		
	КонецЦикла;	
		
	ВысотаСтроки = Макс(ВысотаСтроки, МаксимальноеКоличествоВидовВремени);
	
	ОбозначенияВидовВремени = ОМ_УчетРабочегоВремениРасширенныйКлиентСервер.ТабельОбозначенияВидовВремени(ОписаниеВидовВремени);

КонецПроцедуры

#КонецОбласти

#КонецОбласти
