////////////////////////////////////////////////////////////////////////////////
// Общего назначения (вызов сервера)
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

// Функция возвращает имя СУБД для параметра подключения.
// 
// Параметры:
//  Значение      - Значение перечисления "Типы СУБД" 
//
// Возвращаемое значение
//  Строка
//
Функция ПолучитьСУБДИзПеречисления(Значение)
	Если Значение = Перечисления.itobТипыСУБД.MS_SQL_Server Тогда
		Возврат "MSSQLServer";
	ИначеЕсли Значение = Перечисления.itobТипыСУБД.PostgreSQL Тогда
		Возврат "PostgreSQL";
	КонецЕсли; 
КонецФункции

// Функция возвращает строку соединения с СУБД
// 
// Параметры:
//  СтруктураСтрокаСоединения      - Константа ItobСтрокаСоединенияБазаIMCS  
//
// Возвращаемое значение
//  Строка
//
Функция ПолучитьСтрокуСоединения(СтруктураСтрокаСоединения)
	Если СтруктураСтрокаСоединения.ТипСУБД = Перечисления.itobТипыСУБД.MS_SQL_Server Тогда
		Возврат СтруктураСтрокаСоединения.СтрокаСоединения+";"
				+"SERVER="+СтруктураСтрокаСоединения.Сервер+";"
				+"DATABASE="+СтруктураСтрокаСоединения.ИмяБазы+";"
				+"UID="+СтруктураСтрокаСоединения.ИмяПользователя+";"
				+"PWD="+СтруктураСтрокаСоединения.Пароль+";"
				+"LANGUAGE=Русский";
	ИначеЕсли СтруктураСтрокаСоединения.ТипСУБД = Перечисления.itobТипыСУБД.PostgreSQL Тогда
		Возврат СтруктураСтрокаСоединения.СтрокаСоединения+";"
				+"SERVER="+СтруктураСтрокаСоединения.Сервер+";"
				+"PORT="+СтруктураСтрокаСоединения.Порт+";"
				+"DATABASE="+СтруктураСтрокаСоединения.ИмяБазы+";"
				+"UID="+СтруктураСтрокаСоединения.ИмяПользователя+";"
				+"PWD="+СтруктураСтрокаСоединения.Пароль;
	КонецЕсли; 
КонецФункции

// Получение интервала времени согласно персональных настроек пользователя
//
Процедура ПолучитьИнтервалСогласноПерсональнымНастройкам(ДатаНачала, НачалоПериода, КонецПериода) Экспорт
	ВремяНачалаОтчетов = ХранилищеОбщихНастроек.Загрузить("НастройкиЦСМ", "ВремяНачалаОтчетов");
	ВремяНачалаОтчетовЧисло = ?(ВремяНачалаОтчетов = Неопределено, 0, ВремяНачалаОтчетов-'00010101');
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	ТекущаяДатаСеансаНачалоДня = НачалоДня(ТекущаяДатаСеанса);
	ПрибавитьКДате = 0;
	Если (ТекущаяДатаСеанса-ТекущаяДатаСеансаНачалоДня) < ВремяНачалаОтчетовЧисло Тогда
		ПрибавитьКДате = -86400;
	КонецЕсли; 
	НачалоПериода = ТекущаяДатаСеансаНачалоДня+ПрибавитьКДате+ВремяНачалаОтчетовЧисло;
	КонецПериода  = ДатаНачала+86399;
КонецПроцедуры // ПолучитьИнтервалСогласноПерсональнымНастройкам()

// Возвращает Истина, если "функциональная" подсистема существует в конфигурации.
// Предназначена для реализации вызова необязательной подсистемы (условного вызова).
//
// У "функциональной" подсистемы снят флажок "Включать в командный интерфейс".
//
// Параметры:
//  ПолноеИмяПодсистемы - Строка - полное имя объекта метаданных подсистема
//                        без слов "Подсистема." и с учетом регистра символов.
//                        Например: "СтандартныеПодсистемы.ВариантыОтчетов".
//
// Пример:
//
//  Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВариантыОтчетов") Тогда
//  	МодульВариантыОтчетов = ОбщегоНазначения.ОбщийМодуль("ВариантыОтчетов");
//  	МодульВариантыОтчетов.<Имя метода>();
//  КонецЕсли;
//
// Возвращаемое значение:
//  Булево.
//
Функция ПодсистемаСуществует(ПолноеИмяПодсистемы) Экспорт
	
	Возврат ItobОбщегоНазначенияСервер.ПодсистемаСуществует(ПолноеИмяПодсистемы);
	
КонецФункции // ПодсистемаСуществует()
 
// Процедура - обработчик соединения с внешним источником данных
// 
Процедура УстановитьСоединениеСВнешнимиИсточникамиДанных() Экспорт
	
	СтруктураСтрокаСоединенияБазаIMCS = Константы.ItobСтрокаСоединенияБазаIMCS.Получить().Получить();
	Если ТипЗнч(СтруктураСтрокаСоединенияБазаIMCS) = Тип("Структура") Тогда
			
		Параметры = ВнешниеИсточникиДанных.ItobДанныеСервераСбораДанных.ПолучитьОбщиеПараметрыСоединения();
		
		Параметры.АутентификацияОС = СтруктураСтрокаСоединенияБазаIMCS.АутентификацияОперационнойСистемы;
		Параметры.АутентификацияСтандартная = СтруктураСтрокаСоединенияБазаIMCS.АутентификацияСтандартная;
		Параметры.СУБД = ПолучитьСУБДИзПеречисления(СтруктураСтрокаСоединенияБазаIMCS.ТипСУБД);
		Параметры.СтрокаСоединения = ПолучитьСтрокуСоединения(СтруктураСтрокаСоединенияБазаIMCS);
		Параметры.ИмяПользователя = СтруктураСтрокаСоединенияБазаIMCS.ИмяПользователя;
		Параметры.Пароль = СтруктураСтрокаСоединенияБазаIMCS.Пароль;
		
		Если ItobРаботаС_БСП.РолиДоступны("ПолныеПрава") Тогда
			ВнешниеИсточникиДанных.ItobДанныеСервераСбораДанных.УстановитьОбщиеПараметрыСоединения(Параметры);		
			ВнешниеИсточникиДанных.ItobДанныеСервераСбораДанных.УстановитьПараметрыСоединенияПользователя(ИмяПользователя(), Параметры);
			ВнешниеИсточникиДанных.ItobДанныеСервераСбораДанных.УстановитьПараметрыСоединенияСеанса(Параметры);
		КонецЕсли;		
		
		Попытка
			ВнешниеИсточникиДанных.ItobДанныеСервераСбораДанных.УстановитьСоединение();		
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			
		КонецПопытки;
		
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не определена строка соединения с базой IMCS!'"));
	
	КонецЕсли;	

КонецПроцедуры

// Функция получения абсолютного цвета из цвета стиля.
//
Функция ПолучитьАбсолютныйЦвет(Цвет) Экспорт
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Область("R1C1").ЦветФона = Цвет;
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ТабДок.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.MXL7);
	ТабДок.Прочитать(ИмяВременногоФайла);
	УдалитьФайлы(ИмяВременногоФайла);
	Цвет = ТабДок.Область("R1C1").ЦветФона;
	Возврат Цвет;
КонецФункции	

Функция ПолучитьКартинкуИзБиблиотеки(Картинка) Экспорт
	Возврат ItobОбщегоНазначенияСервер.ПолучитьКартинкуИзБиблиотеки(Картинка);
КонецФункции // ПолучитьКартинкуИзБиблиотеки()

#КонецОбласти
