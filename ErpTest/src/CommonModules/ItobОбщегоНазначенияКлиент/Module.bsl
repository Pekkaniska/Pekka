////////////////////////////////////////////////////////////////////////////////
// Общего назначения (клиент)
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

// Процедура "УстановитьКартинку"
//
Процедура УстановитьКартинку(пЭтотОбъект, НоваяКартинка = "")
	Если ПустаяСтрока(НоваяКартинка) Тогда
		Результат = ?(пЭтотОбъект.ИконкаНаКарте = "", "ItobИконкаЧеловек", пЭтотОбъект.ИконкаНаКарте);		
	Иначе
		Результат = НоваяКартинка;		
	КонецЕсли; 

	пЭтотОбъект.ЭтаФорма.Элементы.ДекорацияИконкаНаКарте.Картинка = ItobОбщегоНазначенияКлиентСервер.ПолучитьКартинкуИзБиблиотеки(Результат);
КонецПроцедуры

// Процедура "УстановитьЦветМаршрутаНаКарте"
//
Процедура УстановитьЦветМаршрутаНаКарте(Объект, НовыйЦвет, ИмяРеквизита)
	
	Если НовыйЦвет.Вид = ВидЦвета.Абсолютный Тогда
		Объект[ИмяРеквизита] = ItobОбщегоНазначенияКлиентСервер.ПолучитьЗначениеХраненияЦвета(
		НовыйЦвет.Красный, НовыйЦвет.Зеленый, НовыйЦвет.Синий);
	ИначеЕсли НовыйЦвет.Вид = ВидЦвета.WebЦвет Тогда
		
		Макет = ItobОбщегоНазначенияСервер.ПолучитьМакет("ItobWebЦвета");
		Для НомерСтроки = 1 По Макет.ВысотаТаблицы Цикл
			Если НовыйЦвет = WebЦвета[Макет.Область(НомерСтроки,1).Текст] Тогда
				Объект[ИмяРеквизита] = ItobОбщегоНазначенияКлиентСервер.ПолучитьЗначениеХраненияЦвета(
				Макет.Область(НомерСтроки,2).Текст, 
				Макет.Область(НомерСтроки,3).Текст, 
				Макет.Область(НомерСтроки,4).Текст );
	
			КонецЕсли;			
			
		КонецЦикла;		
	КонецЕсли;
	
КонецПроцедуры

#Если НЕ ВебКлиент Тогда
 
// Функция получения абсолютного цвета из цвета стиля.
//
Функция ПолучитьАбсолютныйЦветОбычноеПриложение(Цвет)
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Область("R1C1").ЦветФона = Цвет;
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ТабДок.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.MXL7);
	ТабДок.Прочитать(ИмяВременногоФайла);
	НачатьУдалениеФайлов(,ИмяВременногоФайла);
	Цвет = ТабДок.Область("R1C1").ЦветФона;
	Возврат Цвет;
КонецФункции

#КонецЕсли

#Область ОбработчикиОписанийОповещений
	
// Процедура - обработка события "ООПустая".
//
// Параметры:
//  Результат  				- Произвольный - Результат выполнения процедуры.
//  ДополнительныеПараметры - Произвольный - Содержит дополнительные параметры. 
//							При вызове передается в указанную процедуру последним параметром.
//
Процедура ООПустая(Результат, ДополнительныеПараметры) Экспорт
	// Пустая обработка оповещения.
КонецПроцедуры // ООПустая() 

// Процедура - обработчик события "ООВыбратьЦвет"
//
Процедура ООВыбратьЦвет(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ Результат = Неопределено Тогда
		пЭтотОбъект         = ДополнительныеПараметры.ЭтотОбъект;
		Попытка
		    Объект 			= пЭтотОбъект.Объект;
			Ссылка 			= Объект.Ссылка;
		Исключение
		    Объект 			= пЭтотОбъект.Запись.Объект;
			Ссылка			= Объект;
		КонецПопытки; 
		ЭтаФорма 			= пЭтотОбъект.ЭтаФорма;
		ПодчиненныйОбъект 	= ДополнительныеПараметры.ПодчиненныйОбъект;
		
		Результат = ПолучитьАбсолютныйЦвет(Результат);
        
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ItobСтатусыОбъектов") Тогда
			УстановитьЦветМаршрутаНаКарте(Объект,Результат, ПодчиненныйОбъект);
			УстановитьВидимостьСтатусыОбъектов(пЭтотОбъект)
		Иначе
			УстановитьЦветМаршрутаНаКарте(пЭтотОбъект, Результат, ПодчиненныйОбъект);
			УстановитьВидимостьСправочниковВодителиТС(пЭтотОбъект)
		КонецЕсли; 
		ЭтаФорма.Модифицированность = Истина;	
	КонецЕсли; 
КонецПроцедуры

// Процедура - обработчик события "ООВыбратьЦветНадписиПунктаНазначения"
//
Процедура ООВыбратьЦветНадписиПунктаНазначения(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ Результат = Неопределено Тогда
		НовыйЦвет = ПолучитьАбсолютныйЦвет(Результат);
		Если НовыйЦвет.Вид = ВидЦвета.Абсолютный Тогда
			ДополнительныеПараметры.ЭтотОбъект[ДополнительныеПараметры.ПодчиненныйОбъект] = ItobОбщегоНазначенияКлиентСервер.ПолучитьЗначениеХраненияЦвета(
				НовыйЦвет.Красный, НовыйЦвет.Зеленый, НовыйЦвет.Синий);
			Оповестить("УстановитьВидимость");		
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбораРасписания"
//
Процедура ОбработкаВыбораРасписания(Результат, ДополнительныеПараметры) Экспорт

	Если НЕ Результат = Неопределено Тогда
		ЭтаФорма = ДополнительныеПараметры.ЭтаФорма;
		
		ЭтаФорма.Расписание = Результат;
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;	

КонецПроцедуры

// Процедура - обработчик события "ОтветНаВопросСортировка"
//
Процедура ОтветНаВопросСортировка(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Элементы = ДополнительныеПараметры.ЭтаФорма.Элементы;
		Объект = ДополнительныеПараметры.Объект;
		
		Объект.Показатели.Сортировать("Вход");	
		Элементы.Показатели.Обновить();
		
		ДополнительныеПараметры.ЭтаФорма.ПроверитьСортировку = Ложь;
		ДополнительныеПараметры.ЭтаФорма.Записать();
	КонецЕсли;
	Если ДополнительныеПараметры.ЭтаФорма.ЗакрываемФорму Тогда
	    ДополнительныеПараметры.ЭтаФорма.Закрыть();
	КонецЕсли; 
КонецПроцедуры

// Процедура - обработчик события "ООДиалогОткрытияФайла"
//
Процедура ООДиалогОткрытияФайла(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ Результат = Неопределено Тогда
		ИзменяемоеПоле = ДополнительныеПараметры.ИзменяемоеПоле;
		Объект = ДополнительныеПараметры.Объект;
		
		Объект[ИзменяемоеПоле] = Результат[0];
	КонецЕсли; 
КонецПроцедуры // ООДиалогОткрытияФайла()

// Процедура - обработчик события "ООФайлПоказать"
//
Процедура ООФайлПоказать(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ Результат = Неопределено Тогда
		
	    Адрес = ItobОбщегоНазначенияСервер.ПоместитьИнсталляторВХранилище();	
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);	
		
		ДвоичныеДанные.Записать(Результат[0]);
		
		ПоказатьПредупреждение(,НСтр("ru = 'Дистрибутив CsmSvc успешно сохранен, путь к файлу:'")+" "+Результат[0]);
	КонецЕсли;
КонецПроцедуры // ООФайлПоказать()

// Процедура - обработчик события "ОписаниеОповещенияОчиститьКешГеокодераВопрос"
//
Процедура ОписаниеОповещенияОчиститьКешГеокодераВопрос(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЭтаФорма = ДополнительныеПараметры.ЭтаФорма;
		
		ItobОбщегоНазначенияСервер.ОчиститьЗаписиРегистров();
		ПоказатьПредупреждение(,НСтр("ru = 'Содержимое регистров удалено!'")); 
		ЭтаФорма.Закрыть();
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ООФормаОпределенияПоложенияКнопкаОК"
//
Процедура ООФормаОпределенияПоложенияКнопкаОК(Результат, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.КодВозвратаДиалога = КодВозвратаДиалога.ОК Тогда
			Объект 	 = ДополнительныеПараметры.Объект;
			Элементы = ДополнительныеПараметры.Элементы;
			
			Объект.Масштаб = Результат.Масштаб;
			Объект.Широта  = Результат.Широта;
			Объект.Долгота = Результат.Долгота;
			Элементы.НадписьМасштаб.Заголовок = НСтр("ru = 'Первоначальный масштаб :'")+" "+Результат.Масштаб;
			Элементы.НадписьШирота.Заголовок  = НСтр("ru = 'Широта центра карты  :'")+" "+Формат(Результат.Широта,"ЧЦ=10; ЧДЦ=5");
			Элементы.НадписьДолгота.Заголовок = НСтр("ru = 'Долгота центра карты :'")+" "+Формат(Результат.Долгота,"ЧЦ=10; ЧДЦ=5");
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры // ООФормаОпределенияПоложенияКнопкаОК()

// Процедура - обработчик события "ООЗапуститьМастерНастройкиСлужбыCsmSvc"
//
Процедура ООЗапуститьМастерНастройкиСлужбыCsmSvc(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Истина Тогда
		ПоказатьГеографическуюКарту(ДополнительныеПараметры.ЭтаФорма);
	КонецЕсли;	
КонецПроцедуры // ООЗапуститьМастерНастройкиСлужбыCsmSvc()

// Процедура - обработчик события "ОбработкаЗакрытияНайтиАдрес"
//
Процедура ОбработкаЗакрытияНайтиАдрес(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено Тогда
		
		ТекстСкрипта =
			"var Features = new Array;	
			|var pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(Результат.Долгота)
				+", "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(Результат.Широта)+");
			|pt.transform(m_map.displayProjection, m_map.getProjectionObject());			
			|var pointFeature = new OpenLayers.Feature.Vector(new OpenLayers.Geometry.Point(pt.lon, pt.lat),null,{
			|					 graphicWidth: 21,
			|                    graphicHeight: 25,
			|                    graphicXOffset: -10,
			|                    graphicYOffset: -25,
			|                    externalGraphic: """+ДополнительныеПараметры.ВебСсылкаСервер+"img/marker-green.png"",
			|                    graphicOpacity: 1			
			|});			
			|Features.push(pointFeature);
			|geometryLayer.addFeatures(Features);
			|m_map.setCenter(pt, 15);";
		
		ItobОперативныйМониторингКлиент.ВыполнитьСкриптНаПолеHTML(ДополнительныеПараметры.Элементы.ПолеHTML, ТекстСкрипта);
		
	КонецЕсли;	

КонецПроцедуры

// Процедура - обработчик события "УстановитьИнтервалДиалогПоказан"
//
Процедура УстановитьИнтервалДиалогПоказан(Результат, ДополнительныеПараметры) Экспорт

	Если НЕ Результат = Неопределено Тогда
		Объект = ДополнительныеПараметры.Объект;
		
		Попытка
			Объект.ДатаНачала 	 = Результат.ДатаНачала;
			Объект.ДатаОкончания = Результат.ДатаОкончания;
		Исключение
		    Объект.НачПериода 	 = Результат.ДатаНачала;
			Объект.КонПериода 	 = Результат.ДатаОкончания;
		КонецПопытки; 
	КонецЕсли;	

КонецПроцедуры

// Процедура - обработчик события "ОбновитьНастройкиФильтровПунктовНазначения"
//
Процедура ОбновитьНастройкиФильтровПунктовНазначения(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Истина Тогда
		Оповестить("ОбновитьНастройкиФильтровПунктовНазначения");
	КонецЕсли; 
КонецПроцедуры 

// Процедура - обработчик события "ПутевойЛистОбработатьВопросЗаполнитьПоМаршруту"
//
Процедура ПутевойЛистОбработатьВопросЗаполнитьПоМаршруту(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Оповестить("Документ_ПутевойЛист_ЗаполнитьПоМаршруту");
	КонецЕсли; 
КонецПроцедуры 

// Процедура - обработчик события "ПутевойЛистОбработатьФормуЗакрытияЗаполнитьПоМаршруту"
//
Процедура ПутевойЛистОбработатьФормуЗакрытияЗаполнитьПоМаршруту(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ Результат = Неопределено Тогда
		ДополнительныеПараметры.Объект.Маршрут = Результат;
		Если НЕ Результат.Пустая() Тогда
			Оповестить("Документ_ПутевойЛист_ЗаполнитьПоМаршруту");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры 

// Процедура - обработчик события "СостоянияМаршрутныхЗаданийВыбратьЦвет"
//
Процедура СостоянияМаршрутныхЗаданийВыбратьЦвет(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ Результат = Неопределено Тогда
		Результат = ПолучитьАбсолютныйЦвет(Результат);
        Оповестить("СостоянияМаршрутныхЗаданийВыбратьЦвет", Результат);
	КонецЕсли;
КонецПроцедуры 

// Процедура - обработчик события "ВыборМестоположенияНаКартеОбработкаВыбораАдреса"
//
Процедура ВыборМестоположенияНаКартеОбработкаВыбораАдреса(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ Результат = Неопределено Тогда
		Оповестить("ВыборМестоположенияНаКартеОбработкаВыбораАдреса", Результат);
	КонецЕсли;
КонецПроцедуры 

// Процедура - обработчик события "ОбновитьГруппаРасширениеРаботыСФайламиНеУстановлено"
//
Процедура ОбновитьГруппаРасширениеРаботыСФайламиНеУстановлено(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ Результат = Неопределено Тогда
		Оповестить("ОбновитьГруппаРасширениеРаботыСФайламиНеУстановлено", Результат);
	КонецЕсли;
КонецПроцедуры 

#КонецОбласти

// Процедура - обработчик команды "УстановитьИнтервал"
//
Процедура УстановитьИнтервал(Объект, НачПериода, КонПериода) Экспорт
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	
	Диалог.Период.ДатаНачала = НачПериода;
	Диалог.Период.ДатаОкончания = КонПериода;
	
	Диалог.Показать(Новый ОписаниеОповещения("УстановитьИнтервалДиалогПоказан", ItobОбщегоНазначенияКлиент, Новый Структура("Объект", Объект)));
	
КонецПроцедуры // УстановитьИнтервал()

// Процедура "УстановитьВидимостьСправочниковВодителиТС"
//
Процедура УстановитьВидимостьСправочниковВодителиТС(пЭтотОбъект, НоваяКартинка = "") Экспорт

	Элементы = пЭтотОбъект.ЭтаФорма.Элементы;
	ТекущийЦвет = ItobОбщегоНазначенияКлиентСервер.ПолучитьЦветПоЗначениюХранения(
		пЭтотОбъект.ЦветМаршрутаНаКарте);
	
	Элементы.КнопкаВыбратьЦвет.ЦветФона = ТекущийЦвет;
	Элементы.КнопкаВыбратьЦвет.ЦветТекста = Новый Цвет(
		255-ТекущийЦвет.Красный, 255-ТекущийЦвет.Зеленый, 255-ТекущийЦвет.Синий);
		
	ТекущийЦветН = ItobОбщегоНазначенияКлиентСервер.ПолучитьЦветПоЗначениюХранения(
		пЭтотОбъект.ЦветНадписиНаКарте);
	
	Элементы.ВыбратьЦветНадписи.ЦветФона = ТекущийЦветН;
	Элементы.ВыбратьЦветНадписи.ЦветТекста = Новый Цвет(
		255-ТекущийЦветН.Красный, 255-ТекущийЦветН.Зеленый, 255-ТекущийЦветН.Синий);	
	
	УстановитьКартинку(пЭтотОбъект, НоваяКартинка);

КонецПроцедуры

// Процедура "УстановитьВидимостьСтатусыОбъектов"
//
Процедура УстановитьВидимостьСтатусыОбъектов(пЭтотОбъект) Экспорт
    		
	Объект = пЭтотОбъект.Объект;
	
	Элементы = пЭтотОбъект.ЭтаФорма.Элементы;
	
	ТекущийЦветФона = ItobОбщегоНазначенияКлиентСервер.ПолучитьЦветПоЗначениюХранения(Объект.ЦветФона);
	
	Элементы.ВыбратьЦветФона.ЦветФона = ТекущийЦветФона;
	Элементы.ВыбратьЦветФона.ЦветТекста = Новый Цвет(
		255-ТекущийЦветФона.Красный, 255-ТекущийЦветФона.Зеленый, 255-ТекущийЦветФона.Синий);
		
		
	ТекущийЦветНадписи = ItobОбщегоНазначенияКлиентСервер.ПолучитьЦветПоЗначениюХранения(Объект.ЦветНадписи);
	
	Элементы.ВыбратьЦветНадписи.ЦветФона = ТекущийЦветНадписи;
	Элементы.ВыбратьЦветНадписи.ЦветТекста = Новый Цвет(
		255-ТекущийЦветНадписи.Красный, 255-ТекущийЦветНадписи.Зеленый, 255-ТекущийЦветНадписи.Синий);	

КонецПроцедуры

// Процедура показывает панель географической карты,
// выполняя при этом необходимые проверки доступности сервиса CsmSvc
//
Процедура ПоказатьГеографическуюКарту(ЭтаФорма) Экспорт
	
	ПараметрыСеансаItobАдресCsmSvc = ItobОбщегоНазначенияСервер.ПолучитьItobАдресCsmSvc();
	
	Элементы 		= ЭтаФорма.Элементы;
	КартаДоступна 	= ЭтаФорма.КартаДоступна;
	ВебСсылкаСервер = ЭтаФорма.ВебСсылкаСервер;
	ПолеHTML 		= ЭтаФорма.ПолеHTML;
	ТекущийМасштаб 	= ЭтаФорма.ТекущийМасштаб;
	ТекущаяШирота 	= ЭтаФорма.ТекущаяШирота;
	ТекущаяДолгота 	= ЭтаФорма.ТекущаяДолгота;
	
	ОшибкаДоступаНаСервер = Ложь;
	ОписаниеОшибки = "";
			
	Если НЕ ПараметрыСеансаItobАдресCsmSvc.НастройкиОпределены = Истина Тогда
		ОшибкаДоступаНаСервер = Истина;
		ОписаниеОшибки = НСтр("ru = 'Ошибка отображения карты!
						 |В настройках системы не указан адрес сервиса CsmSvc!
						 |Воспользуйтесь мастером настройки службы CsmSvc.'");
		
	ИначеЕсли НЕ ItobОперативныйМониторингКлиентСервер.ПроверитьДоступностьСервисаCsmSvc(
		ПараметрыСеансаItobАдресCsmSvc.СерверАдрес, ПараметрыСеансаItobАдресCsmSvc.СерверПорт) Тогда
		 
		ОшибкаДоступаНаСервер = Истина;
		ОписаниеОшибки = НСтр("ru = 'Ошибка отображения карты!
						 |Сервис CsmSvc не доступен!
						 |Воспользуйтесь мастером настройки службы CsmSvc.'");
						 
	КонецЕсли;
					 
	Если ОшибкаДоступаНаСервер Тогда
		Элементы.НадписьОшибкаОтображенияКарты.Заголовок = ОписаниеОшибки;
		Элементы.ГруппаГеоданные.ТекущаяСтраница = Элементы.ГруппаГеоданные.ПодчиненныеЭлементы["СтраницаОшибкиОтображенияКарты"];
		КартаДоступна = Ложь;
		
	Иначе
		
		СсылкаБазы   = ПолучитьНавигационнуюСсылкуИнформационнойБазы();
		
		// Адреса CsmSvc с клиентской стороны
		АдресСервера = ПараметрыСеансаItobАдресCsmSvc.КлиентАдрес;
		ПортСервера  = Формат(ПараметрыСеансаItobАдресCsmSvc.КлиентПорт,"ЧГ=0");
		
		Если НРег(Лев(СсылкаБазы,5)) = "https" Тогда
			ВебСсылкаСервер = "https://"+АдресСервера+":"+ПортСервера+"/map/";
		Иначе
			ВебСсылкаСервер = "http://"+АдресСервера+":"+ПортСервера+"/map/";		
		КонецЕсли;		
		
		АтрибутыКарты = "";
		// Необходимо установить координаты по умолчанию
		Если ТекущийМасштаб <> 0 И ТекущаяШирота <> 0 И ТекущаяДолгота <> 0 Тогда
			
			АтрибутыКарты = 
				"firstZoom = "+Формат(ТекущийМасштаб,"ЧГ=0")+";
				|firstLat = "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТекущаяШирота)+";
				|firstLon = "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТекущаяДолгота)+";";			
			
		КонецЕсли;
			
		ИмяСлояПоУмолчанию = ItobОбщегоНазначенияСервер.ПрочитатьНастройкуПользователя("НастройкиКарты", "КартаПоУмолчанию");
		Если ЗначениеЗаполнено(ИмяСлояПоУмолчанию) Тогда
			АтрибутыКарты = АтрибутыКарты + "
				|firstLayerName = """+ИмяСлояПоУмолчанию+""";";
		
		КонецЕсли;
		
		ПолеHTML = ItobОперативныйМониторингКлиентСервер.ПолучитьАдресКарты(АтрибутыКарты);
		
		Элементы.ГруппаГеоданные.ТекущаяСтраница = Элементы.ГруппаГеоданные.ПодчиненныеЭлементы["ГруппаКарта"];
		КартаДоступна = Истина;
	
	КонецЕсли;
	
	ЭтаФорма.КартаДоступна 		= КартаДоступна;
	ЭтаФорма.ВебСсылкаСервер 	= ВебСсылкаСервер;
	ЭтаФорма.ПолеHTML 			= ПолеHTML;
	ЭтаФорма.ТекущийМасштаб 	= ТекущийМасштаб;
	ЭтаФорма.ТекущаяШирота 		= ТекущаяШирота;
	ЭтаФорма.ТекущаяДолгота 	= ТекущаяДолгота;

	
КонецПроцедуры

// Процедура для открытия формы настройки карт из интерфейса при работе в режиме обычного приложения
// (Интеграция ITOB+++).
//
Процедура ОткрытьФормуНастройкиКарт() Экспорт 
 	
	ОткрытьФорму("Обработка.ItobПанельАдминистрированияЦСМ.Форма.РазделНастройкиКарты");

КонецПроцедуры // ОткрытьФормуНастройкиКарт()

// Функция получения абсолютного цвета из цвета стиля
//
Функция ПолучитьАбсолютныйЦвет(Цвет) Экспорт
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Возврат ПолучитьАбсолютныйЦветОбычноеПриложение(Цвет);
	#Иначе 	
		Возврат ItobОбщегоНазначенияВызовСервера.ПолучитьАбсолютныйЦвет(Цвет);
	#КонецЕсли
КонецФункции

// Копирует поля отбора.
//
// Параметры:
//  Отбор  		- ОтборКомпоновкиДанных - Источник.
//  НовыйОтбор  - ОтборКомпоновкиДанных - Приемник.
//
Процедура УстановитьОтбор(Отбор, НовыйОтбор) Экспорт
	Если НЕ Отбор = Неопределено Тогда
		Для Каждого Элемент Из Отбор.Элементы Цикл
			ТипЗначенияЭлемента = ТипЗнч(Элемент);
			ЭлементКомпоновкиДанных = НовыйОтбор.Элементы.Добавить(ТипЗначенияЭлемента);
			ЗаполнитьЗначенияСвойств(ЭлементКомпоновкиДанных, Элемент);
			Если ТипЗначенияЭлемента = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				УстановитьОтбор(Элемент,ЭлементКомпоновкиДанных);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
КонецПроцедуры // УстановитьОтбор()

// Функция возвращает список параметров отчета.
//
Функция СобратьДанныеДляПостроенияОтчета(ЭтотОбъект) Экспорт
	
	Объект = ЭтотОбъект.Объект;
	Элементы = ЭтотОбъект.Элементы;
	ТекущийРежим = ЭтотОбъект.ТекущийРежим;
	
	НачалоОтчета = Объект.ДатаНачала;
	КонецОтчета  = Объект.ДатаОкончания;
	
	Если ТекущийРежим = 0 Тогда
		ИмяЭлемента  = "ДеревоОбъектовМониторинга";
		ItobОбщегоНазначенияВызовСервера.ПолучитьИнтервалСогласноПерсональнымНастройкам(Объект.ДатаНачала, НачалоОтчета, КонецОтчета);
	Иначе
		ИмяЭлемента  = "ДеревоОбъектовМаршруты";
	КонецЕсли;
	
	Если Элементы[ИмяЭлемента].ВыделенныеСтроки.Количество() > 1 Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Для просмотра отчета выберите в списке только один объект.'"));
		Возврат Неопределено;
	КонецЕсли;
		
	ТекущиеДанные = Элементы[ИмяЭлемента].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Невозможно открыть отчет для выбранного объекта.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	ТекущийОбъект  = ТекущиеДанные.Объект;
	
	СписокПараметров = Новый СписокЗначений;
	СписокПараметров.Добавить(НачалоОтчета,"НачПериода");
	СписокПараметров.Добавить(КонецОтчета,"КонПериода");
	СписокПараметров.Добавить(ТекущийОбъект,"Объект");
			
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
	ПараметрыОтчета.Вставить("Терминал", ТекущиеДанные.Терминал);
	ПараметрыОтчета.Вставить("Объект", ТекущийОбъект);
	
	Возврат ПараметрыОтчета;

КонецФункции // СобратьДанныеДляПостроенияОтчета()

// Функция возвращает признак загрузки HTML документа.
//
Функция КартаЗагружена(ПолеHTML) Экспорт
	
	ТекстСкрипта = 
		"try {
		|	document.form.result.value = mapLoaded;
		|}
		|catch(err) {}";
		
	Результат = Ложь;
	Попытка
		ItobОперативныйМониторингКлиент.ВыполнитьСкриптНаПолеHTML(ПолеHTML, ТекстСкрипта);
		Если НЕ ПолеHTML.Документ.forms.length = 0 Тогда
			Результат = НРег(ПолеHTML.Документ.form.result.value) = "true";	
		КонецЕсли; 
	Исключение
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;

КонецФункции // КартаЗагружена()

#КонецОбласти
