
#Область ПриСозданииНаСервере

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
    
    Если Форма.ИмяФормы = "Справочник.ВидыНоменклатуры.Форма.ФормаЭлемента"  Тогда 
        ПриСозданииНаСервере_Справочник_ВидыНоменклатуры_ФормаЭлемента(Форма, Отказ, СтандартнаяОбработка);
//Рарус Владимир Подрезов 07.12.2016
    ИначеЕсли Форма.ИмяФормы = "Справочник.ДоговорыКонтрагентов.Форма.ФормаСпискаЗакупки" Тогда
        ПриСозданииНаСервере_Справочник_ДоговорыКонтрагентов_ФормаСпискаЗакупки(Форма, Отказ, СтандартнаяОбработка);	
//++ Рарус Лимаренко 15.03.2018 Заявка №10462
	ИначеЕсли Форма.ИмяФормы = "Справочник.ДоговорыКонтрагентов.Форма.ФормаСпискаПродажи" Тогда
		ПриСозданииНаСервере_Справочник_ДоговорыКонтрагентов_ФормаСпискаПродажи(Форма, Отказ, СтандартнаяОбработка);	
	ИначеЕсли Форма.ИмяФормы = "Справочник.ДоговорыКонтрагентов.Форма.ФормаСписка" Тогда
		ПриСозданииНаСервере_Справочник_ДоговорыКонтрагентов_ФормаСписка(Форма, Отказ, СтандартнаяОбработка);	
//-- Рарус Лимаренко 15.03.2018 Заявка №10462
//Рарус Владимир Подрезов Конец
//++ Рарус Лимаренко 20.02.2018
	ИначеЕсли Форма.ИмяФормы = "Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбора" Тогда
	    ПриСозданииНаСервере_Справочник_ДоговорыКонтрагентов_ФормаВыбора(Форма, Отказ, СтандартнаяОбработка);
//-- Рарус Лимаренко 20.02.2018	
    ИначеЕсли Форма.ИмяФормы = "Справочник.ДоговорыКонтрагентов.Форма.ФормаЭлемента" Тогда
        ПриСозданииНаСервере_Справочник_ДоговорыКонтрагентов_ФормаЭлемента(Форма, Отказ, СтандартнаяОбработка);
    ИначеЕсли Форма.ИмяФормы = "Справочник.Должности.Форма.ФормаЭлемента" Тогда
        ПриСозданииНаСервере_Справочник_Должности_ФормаЭлемента(Форма, Отказ, СтандартнаяОбработка);
    ИначеЕсли Форма.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаЭлемента" Тогда
        ПриСозданииНаСервере_Справочник_Номенклатура_ФормаЭлемента(Форма, Отказ, СтандартнаяОбработка);
// Rarus-spb byse {
// Необходимо сделать реквизит "Это техника" доступным для группы номенклатуры. 
//Иначе на мобильном приложении в справочнике не будет иерархии
    ИначеЕсли Форма.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаГруппы" Тогда
        ПриСозданииНаСервере_Справочник_Номенклатура_ФормаГруппы(Форма, Отказ, СтандартнаяОбработка);
// Rarus-spb byse }
    ИначеЕсли Форма.ИмяФормы = "Справочник.ОбъектыЭксплуатации.Форма.ФормаВыбора" Тогда
        ПриСозданииНаСервере_Справочник_ОбъектыЭксплуатации_ФормаВыбора(Форма, Отказ, СтандартнаяОбработка);
	ИначеЕсли Форма.ИмяФормы = "Справочник.ОбъектыЭксплуатации.Форма.ФормаЭлемента" Тогда
        ПриСозданииНаСервере_Справочник_ОбъектыЭксплуатации_ФормаЭлемента(Форма, Отказ, СтандартнаяОбработка);
	ИначеЕсли Форма.ИмяФормы = "Справочник.ОбъектыЭксплуатации.Форма.ФормаГруппы" Тогда
        ПриСозданииНаСервере_Справочник_ОбъектыЭксплуатации_ФормаГруппа(Форма, Отказ, СтандартнаяОбработка);
	ИначеЕсли Форма.ИмяФормы = "Справочник.Склады.Форма.ФормаЭлемента" Тогда
        ПриСозданииНаСервере_Справочник_Склады_ФормаЭлемента(Форма, Отказ, СтандартнаяОбработка);
    ИначеЕсли Форма.ИмяФормы = "Справочник.СМ_ОбъектыСтроительства.Форма.ФормаВыбора" Тогда
        ПриСозданииНаСервере_Справочник_СМ_ОбъектыСтроительства_ФормаВыбора(Форма, Отказ, СтандартнаяОбработка);
    ИначеЕсли Форма.ИмяФормы = "Справочник.СМ_ОбъектыСтроительства.Форма.ФормаСписка" Тогда
        ПриСозданииНаСервере_Справочник_СМ_ОбъектыСтроительства_ФормаСписка(Форма, Отказ, СтандартнаяОбработка);
    ИначеЕсли Форма.ИмяФормы = "Справочник.СМ_ОбъектыСтроительства.Форма.ФормаЭлемента" Тогда
        ПриСозданииНаСервере_Справочник_СМ_ОбъектыСтроительства_ФормаЭлемента(Форма, Отказ, СтандартнаяОбработка);
    ИначеЕсли Форма.ИмяФормы = "Справочник.СтруктураПредприятия.Форма.ФормаЭлемента" Тогда
        ПриСозданииНаСервере_Справочник_СтруктураПредприятия_ФормаЭлемента(Форма, Отказ, СтандартнаяОбработка);   
//Рарус Владимир Подрезов 07.12.2016
    ИначеЕсли Форма.ИмяФормы = "Справочник.СтруктураПредприятия.Форма.ФормаСписка" Тогда
        ПриСозданииНаСервере_Справочник_СтруктураПредприятия_ФормаСписка(Форма, Отказ, СтандартнаяОбработка);   
//Рарус Владимир Подрезов Конец
    ИначеЕсли Форма.ИмяФормы = "Справочник.ФизическиеЛица.Форма.ФормаЭлементаУП" Тогда
        ПриСозданииНаСервере_Справочник_ФизическиеЛица_ФормаЭлементаУП(Форма, Отказ, СтандартнаяОбработка);  
    ИначеЕсли Форма.ИмяФормы = "Справочник.ХарактеристикиНоменклатуры.Форма.ФормаЭлемента" Тогда
        ПриСозданииНаСервере_Справочник_ХарактеристикиНоменклатуры_ФормаЭлемента(Форма, Отказ, СтандартнаяОбработка);  
	ИначеЕсли Форма.ИмяФормы = "Справочник.ХарактеристикиНоменклатуры.Форма.ПомощникНового" Тогда
        ПриСозданииНаСервере_Справочник_ХарактеристикиНоменклатуры_ФормаЭлемента(Форма, Отказ, СтандартнаяОбработка);	
	ИначеЕсли Форма.ИмяФормы = "Документ.ВыбытиеДенежныхДокументов.Форма.ФормаДокумента" Тогда
        ПриСозданииНаСервере_Документ_ВыбытиеДенежныхДокументова_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка); 
    ИначеЕсли Форма.ИмяФормы = "Документ.Встреча.Форма.ФормаДокумента" Тогда
        ПриСозданииНаСервере_Документ_Встреча_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка); 
    ИначеЕсли Форма.ИмяФормы = "Документ.ЗаказКлиента.Форма.ФормаДокумента" Тогда
        ПриСозданииНаСервере_Документ_ЗаказКлиента_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка); 
    ИначеЕсли Форма.ИмяФормы = "Документ.ЗаказКлиента.Форма.ФормаСпискаДокументов" Тогда
        ПриСозданииНаСервере_Документ_ЗаказКлиента_ФормаСпискаДокументов(Форма, Отказ, СтандартнаяОбработка); 
    ИначеЕсли Форма.ИмяФормы = "Документ.ПоступлениеБезналичныхДенежныхСредств.Форма.ФормаДокумента" Тогда
        ПриСозданииНаСервере_Документ_ПоступлениеБезналичныхДенежныхСредств_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка); 
    ИначеЕсли Форма.ИмяФормы = "Документ.ПоступлениеДенежныхДокументов.Форма.ФормаДокумента" Тогда
        ПриСозданииНаСервере_Документ_ПоступлениеДенежныхДокументов_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка); 
    ИначеЕсли Форма.ИмяФормы = "Документ.ПриобретениеТоваровУслуг.Форма.ФормаДокумента" Тогда
        ПриСозданииНаСервере_Документ_ПоступлениеТоваровУслуг_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка); 
    ИначеЕсли Форма.ИмяФормы = "Документ.ПринятиеКУчетуОС.Форма.ФормаДокумента" Тогда
        ПриСозданииНаСервере_Документ_ПринятиеКУчетуОС_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка); 
    ИначеЕсли Форма.ИмяФормы = "Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента" Тогда
        ПриСозданииНаСервере_Документ_РеализацияТоваровУслуг_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка); 
    ИначеЕсли Форма.ИмяФормы = "Документ.СчетФактураВыданный.Форма.ФормаДокумента" Тогда
        ПриСозданииНаСервере_Документ_СчетФактураВыданный_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка); 
    ИначеЕсли Форма.ИмяФормы = "Документ.СписаниеБезналичныхДенежныхСредств.Форма.ФормаДокумента" Тогда
        ПриСозданииНаСервере_Документ_СписаниеБезналичныхДенежныхСредств_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка); 
    ИначеЕсли Форма.ИмяФормы = "Документ.ТабельУчетаРабочегоВремени.Форма.ФормаДокумента" Тогда
        ПриСозданииНаСервере_Документ_ТабельУчетаРабочегоВремени_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка); 
//Рарус Владимир Подрезов Доставка 2.2.2. 12.07.2016
	ИначеЕсли Форма.ИмяФормы = "Справочник.ТранспортныеСредства.Форма.ФормаЭлемента" Тогда
        ПриСозданииНаСервере_Справочник_ТранспортныеСредства_ФормаЭлемента(Форма, Отказ, СтандартнаяОбработка); 
	ИначеЕсли Форма.ИмяФормы = "Справочник.Партнеры.Форма.ФормаЭлемента" Тогда
        ПриСозданииНаСервере_Справочник_Партнеры_ФормаЭлемента(Форма, Отказ, СтандартнаяОбработка); 
	ИначеЕсли Форма.ИмяФормы = "Справочник.Партнеры.Форма.ФормаЭлементаРеквизитыКонтрагента" Тогда
        ПриСозданииНаСервере_Справочник_Партнеры_ФормаЭлементаРеквизитыКонтрагента(Форма, Отказ, СтандартнаяОбработка); 
//Рарус Владимир Подрезов Конец
//Рарус Владимир Подрезов УАТ 3.1.1 04.08.2016
	ИначеЕсли Форма.ИмяФормы = "Справочник.уатМоделиТС.Форма.ФормаЭлемента" Тогда
        ПриСозданииНаСервере_Справочник_уатМоделиТС_ФормаЭлемента(Форма, Отказ, СтандартнаяОбработка); 
//Рарус Владимир Подрезов Конец
//Рарус Владимир Подрезов УАТ 3.5.1 09.08.2016
	ИначеЕсли Форма.ИмяФормы = "Документ.уатВводВЭксплуатациюТСиОборудования.Форма.ФормаДокумента" Тогда
        ПриСозданииНаСервере_Документ_уатВводВЭксплуатациюТСиОборудования_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка); 
//Рарус Владимир Подрезов Конец
//Рарус Владимир Подрезов УАТ 3.3.2 09.08.2016
	ИначеЕсли Форма.ИмяФормы = "Документ.уатЗаправкаГСМ.Форма.ФормаДокумента" Тогда
        ПриСозданииНаСервере_Документ_уатЗаправкаГСМ_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка); 
//Рарус Владимир Подрезов Конец
//Рарус Владимир Подрезов Закупки 2.6.1 11.08.2016
	ИначеЕсли Форма.ИмяФормы = "Документ.ЗаказПоставщику.Форма.ФормаДокумента" Тогда
        ПриСозданииНаСервере_Документ_ЗаказПоставщику_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка); 
//Рарус Владимир Подрезов Конец
//Рарус Владимир Подрезов Закупки 2.6.2 11.08.2016
	ИначеЕсли Форма.ИмяФормы = "Документ.ЗаказНаПеремещение.Форма.ФормаДокумента" Тогда
        ПриСозданииНаСервере_Документ_ЗаказНаПеремещение_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка); 
//Рарус Владимир Подрезов Конец
//Рарус Владимир Подрезов Закупки 2.6.3 12.08.2016
	ИначеЕсли Форма.ИмяФормы = "Документ.ЗаказНаВнутреннееПотребление.Форма.ФормаДокумента" Тогда
        ПриСозданииНаСервере_Документ_ЗаказНаВнутреннееПотребление_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка); 
//Рарус Владимир Подрезов Конец
//Рарус Владимир Подрезов 07.12.2016
	ИначеЕсли Форма.ИмяФормы = "Документ.ЗаказНаВнутреннееПотребление.Форма.ФормаСписка" Тогда
        ПриСозданииНаСервере_Документ_ЗаказНаВнутреннееПотребление_ФормаСписка(Форма, Отказ, СтандартнаяОбработка); 
//Рарус Владимир Подрезов Конец
//Рарус Владимир Подрезов УАТ 3.1.2 24.08.2016
	ИначеЕсли Форма.ИмяФормы = "РегистрСведений.уатДокументыТС.Форма.ФормаЗаписи" Тогда
        ПриСозданииНаСервере_РегистрСведений_уатДокументыТС_ФормаЗаписи(Форма, Отказ, СтандартнаяОбработка); 
//Рарус Владимир Подрезов Конец
//+++Рарус Павел Князьков 15.09.2016		
	ИначеЕсли Форма.ИмяФормы = "Справочник.Контрагенты.Форма.ФормаЭлемента" Тогда
        ПриСозданииНаСервере_Справочник_Контрагенты_ФормаЭлемента(Форма, Отказ, СтандартнаяОбработка);
	ИначеЕсли Форма.ИмяФормы = "Справочник.СтатьиДвиженияДенежныхСредств.Форма.ФормаЭлемента" Тогда
        ПриСозданииНаСервере_Справочник_СтатьиДвиженияДенежныхСредств_ФормаЭлемента(Форма, Отказ, СтандартнаяОбработка);	
//---Рарус Павел Князьков 15.09.2016
	ИначеЕсли Форма.ИмяФормы = "Справочник.ОбщиеВидыРемонтов.Форма.ФормаЭлемента" Тогда
        ПриСозданииНаСервере_Справочник_ОбщиеВидыРемонтов_ФормаЭлемента(Форма, Отказ, СтандартнаяОбработка);	
//+++Рарус Павел Князьков 30.09.2016		
	ИначеЕсли Форма.ИмяФормы = "Документ.РасходныйОрдерНаТовары.Форма.ФормаДокумента" Тогда
        ПриСозданииНаСервере_Документ_РасходныйОрдерНаТовары_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка);
//---Рарус Павел Князьков		
	//++ Рарус IA 02.10.2016	
	ИначеЕсли Форма.ИмяФормы = "Документ.Встреча.Форма.ФормаДокумента" Тогда
        ПриСозданииНаСервере_Документ_Встреча_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка);
	ИначеЕсли Форма.ИмяФормы = "Документ.ТелефонныйЗвонок.Форма.ФормаДокумента" Тогда
        ПриСозданииНаСервере_Документ_ТелефонныйЗвонок_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка);
	ИначеЕсли Форма.ИмяФормы = "Документ.ВнутреннееПотреблениеТоваров.Форма.ФормаДокумента" Тогда
        ПриСозданииНаСервере_Документ_ВнутреннееПотреблениеТоваров_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка);
	ИначеЕсли Форма.ИмяФормы = "Справочник.СкладскиеЯчейки.Форма.ФормаВыбора" Тогда
        ПриСозданииНаСервере_Справочник_СкладскиеЯчейки_ФормаВыбора(Форма, Отказ, СтандартнаяОбработка);
	ИначеЕсли Форма.ИмяФормы = "Документ.ОтборРазмещениеТоваров.Форма.ФормаДокумента" Тогда	
        ПриСозданииНаСервере_Документ_ОтборРазмещениеТоваров_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка);
	ИначеЕсли Форма.ИмяФормы = "Справочник.ВидыЦен.Форма.ФормаВыбора" Тогда
        ПриСозданииНаСервере_Справочник_ВидыЦен_ФормаВыбора(Форма, Отказ, СтандартнаяОбработка);
	ИначеЕсли Форма.ИмяФормы = "Справочник.ВидыЦен.Форма.ФормаЭлемента" Тогда
        ПриСозданииНаСервере_Справочник_ВидыЦен_ФормаЭлемента(Форма, Отказ, СтандартнаяОбработка);
	ИначеЕсли Форма.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
        ПриСозданииНаСервере_Обработка_ПодборТоваровВДокументПродажи_Форма(Форма, Отказ, СтандартнаяОбработка);
	//-- Рарус IA 02.10.2016	                    
//Рарус Владимир Подрезов Доставка 10.10.2016
	ИначеЕсли Форма.ИмяФормы = "Справочник.ФизическиеЛица.Форма.ФормаЭлемента" Тогда
        ПриСозданииНаСервере_Справочник_ФизическиеЛица_ФормаЭлемента(Форма, Отказ, СтандартнаяОбработка); 
	ИначеЕсли Форма.ИмяФормы = "Справочник.ФизическиеЛица.Форма.ФормаНового" Тогда
        ПриСозданииНаСервере_Справочник_ФизическиеЛица_ФормаНового(Форма, Отказ, СтандартнаяОбработка); 
//Рарус Владимир Подрезов Конец
	//+++DubI Рарус-СПб 31.10.2016
	//по задаче приостановлено выполнение
	//ИначеЕсли Форма.ИмяФормы = "Обработка.ПлатежныйКалендарь.Форма.Форма" Тогда
	//    ПриСозданииНаСервере_Обработка_ПлатежныйКалендарь_Форма(Форма, Отказ, СтандартнаяОбработка); 
	//---DubI Рарус-СПб
//Рарус Владимир Подрезов Доставка 10.11.2016
	ИначеЕсли Форма.ИмяФормы = "Документ.ЗаявкаНаРасходованиеДенежныхСредств.Форма.ФормаДокумента" Тогда	
        ПриСозданииНаСервере_Документ_ЗаявкаНаРасходованиеДенежныхСредств_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка);
//Рарус Владимир Подрезов Доставка Конец
//Рарус Владимир Подрезов 22.01.2017
	ИначеЕсли Форма.ИмяФормы = "Документ.ЗаявкаНаРасходованиеДенежныхСредств.Форма.ФормаСписка" Тогда	
        ПриСозданииНаСервере_Документ_ЗаявкаНаРасходованиеДенежныхСредств_ФормаСписка(Форма, Отказ, СтандартнаяОбработка);
	ИначеЕсли Форма.ИмяФормы = "Документ.ЗаявкаНаРасходованиеДенежныхСредств.Форма.ФормаСпискаДокументов" Тогда	
        ПриСозданииНаСервере_Документ_ЗаявкаНаРасходованиеДенежныхСредств_ФормаСпискаДокументов(Форма, Отказ, СтандартнаяОбработка);
//Рарус Владимир Подрезов Конец
//+++rarus-spb_pavelk
	ИначеЕсли Форма.ИмяФормы = "Документ.уатОтчетПоставщикаПЦ.Форма.ФормаДокумента" Тогда	
        ПриСозданииНаСервере_Документ_уатОтчетПоставщикаПЦ_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка);
//---rarus-spb_pavelk
//Рарус Владимир Подрезов УАТ Протокол 30.11.2016
	ИначеЕсли Форма.ИмяФормы = "Документ.уатВводНачальныхПоказаний.Форма.ФормаДокумента" Тогда
        ПриСозданииНаСервере_Документ_уатВводНачальныхПоказаний_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка); 
	ИначеЕсли Форма.ИмяФормы = "Документ.уатВводНачальныхПоказаний.Форма.ФормаСписка" Тогда
        ПриСозданииНаСервере_Документ_уатВводНачальныхПоказаний_ФормаСписка(Форма, Отказ, СтандартнаяОбработка); 
	ИначеЕсли Форма.ИмяФормы = "Документ.уатВводНачальныхПоказаний.Форма.ФормаВыбора" Тогда
        ПриСозданииНаСервере_Документ_уатВводНачальныхПоказаний_ФормаВыбора(Форма, Отказ, СтандартнаяОбработка); 
	ИначеЕсли Форма.ИмяФормы = "Документ.уатВводОстатковГСМ.Форма.ФормаДокумента" Тогда
        ПриСозданииНаСервере_Документ_уатВводОстатковГСМ_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка); 
	ИначеЕсли Форма.ИмяФормы = "Документ.уатВводОстатковГСМ.Форма.ФормаСписка" Тогда
        ПриСозданииНаСервере_Документ_уатВводОстатковГСМ_ФормаСписка(Форма, Отказ, СтандартнаяОбработка); 
	ИначеЕсли Форма.ИмяФормы = "Документ.уатВводОстатковГСМ.Форма.ФормаВыбора" Тогда
        ПриСозданииНаСервере_Документ_уатВводОстатковГСМ_ФормаВыбора(Форма, Отказ, СтандартнаяОбработка); 
//Рарус Владимир Подрезов Конец
//+++DubI Рарус-СПб 17.01.2017
	ИначеЕсли Форма.ИмяФормы = "Справочник.Пользователи.Форма.ФормаЭлемента" Тогда
        ПриСозданииНаСервере_Справочник_Пользователи_ФормаЭлемента(Форма, Отказ, СтандартнаяОбработка); 
//---DubI Рарус-СПб
//Рарус Владимир Подрезов 18.01.2017
	ИначеЕсли Форма.ИмяФормы = "Справочник.Организации.Форма.ФормаЭлемента" Тогда
		ПриСозданииНаСервере_Справочник_Организации_ФормаЭлемента(Форма, Отказ, СтандартнаяОбработка);
//Рарус Владимир Подрезов Конец
//Рарус Владимир Подрезов 09.03.2017
	ИначеЕсли Форма.ИмяФормы = "Документ.АвансовыйОтчет.Форма.ФормаДокумента" Тогда
        ПриСозданииНаСервере_Документ_АвансовыйОтчет_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка); 
//Рарус Владимир Подрезов Конец
//Рарус Владимир Подрезов 15.03.2017
	ИначеЕсли Форма.ИмяФормы = "ОбщаяФорма.ВыборДокументаРасчетов" Тогда
        ПриСозданииНаСервере_ОбщаяФорма_ВыборДокументаРасчетов(Форма, Отказ, СтандартнаяОбработка); 
//Рарус Владимир Подрезов 16.03.2017
	ИначеЕсли Форма.ИмяФормы = "Документ.ОтражениеЗарплатыВФинансовомУчете.Форма.ФормаДокумента" Тогда
        ПриСозданииНаСервере_Документ_ОтражениеЗарплатыВФинансовомУчете_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка); 
//Рарус Владимир Подрезов Конец
//Рарус Владимир Подрезов 20.03.2017
    ИначеЕсли Форма.ИмяФормы = "Документ.ПоступлениеПредметовЛизинга.Форма.ФормаДокумента" Тогда
        ПриСозданииНаСервере_Документ_ПоступлениеПредметовЛизинга_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка); 
//Рарус Владимир Подрезов Конец
//Рарус Владимир Подрезов 22.03.2017
    ИначеЕсли Форма.ИмяФормы = "Документ.РеализацияУслугПрочихАктивов.Форма.ФормаДокумента" Тогда
        ПриСозданииНаСервере_Документ_РеализацияУслугПрочихАктивов_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка); 
//Рарус Владимир Подрезов Конец
//Рарус Владимир Подрезов 22.03.2017
    ИначеЕсли Форма.ИмяФормы = "ЖурналДокументов.РеестрТорговыхДокументов.Форма.ФормаСписка" Тогда
        ПриСозданииНаСервере_ЖурналДокументов_РеестрТорговыхДокументов_ФормаСписка(Форма, Отказ, СтандартнаяОбработка); 
//Рарус Владимир Подрезов Конец
//+++DubI Рарус-СПб 24.03.2017
    ИначеЕсли Форма.ИмяФормы = "Документ.СверкаВзаиморасчетов.Форма.ФормаДокумента" Тогда
        ПриСозданииНаСервере_Документ_СверкаВзаиморасчетов_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка); 
//---DubI Рарус-СПб
//++ Рарус Лимаренко 12.02.2018
	 ИначеЕсли Форма.ИмяФормы = "Документ.ПеремещениеТоваров.Форма.ФормаДокумента" Тогда
		 ПриСозданииНаСервере_Документ_ПеремещениеТоваров_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка);
//-- Рарус Лимаренко 12.02.2018		
	ИначеЕсли Форма.ИмяФормы = "Документ.ПодготовкаКПередачеОС.Форма.ФормаСписка" Тогда	 
		 ПриСозданииНаСервере_ПодготовкаКПередачеОС_ФормаСписка(Форма, Отказ, СтандартнаяОбработка);
	ИначеЕсли Форма.ИмяФормы = "Документ.ПодготовкаКПередачеОС.Форма.ФормаДокумента" Тогда	 
		 ПриСозданииНаСервере_ПодготовкаКПередачеОС_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка);	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриСозданииНаСервере_Справочник_ВидыНоменклатуры_ФормаЭлемента(Форма, Отказ, СтандартнаяОбработка)
    
    Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    НоваяГруппа             = Элементы.Вставить("пкГруппаТипНоменклатурыУслугаПоДоговору", Тип("ГруппаФормы"), Элементы.СтраницаОсновное, Элементы.ТипНоменклатуры); 
	НоваяГруппа.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	НоваяГруппа.ОтображатьЗаголовок = Ложь;
    
    Элементы.Переместить(Элементы.ТипНоменклатуры, Элементы.пкГруппаТипНоменклатурыУслугаПоДоговору);
    
    Элементы.ТипНоменклатуры.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    
    НовоеПоле             = Элементы.Добавить("пкЭтоУслугаПоДоговору", Тип("ПолеФормы"), Элементы.пкГруппаТипНоменклатурыУслугаПоДоговору);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеФлажка;
    НовоеПоле.ПутьКДанным = "Объект.пкЭтоУслугаПоДоговору";
    НовоеПоле.Заголовок   = "Услуга по договору (ремонт)";
    НовоеПоле.Видимость   = Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;
    НовоеПоле.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    НовоеПоле.Доступность = НЕ Объект.пкЭтоУслугаТранспортировки;
    
//Рарус Владимир Подрезов 10.11.2016
	НовоеПоле             = Элементы.Добавить("пкЭтоУслугаТранспортировки", Тип("ПолеФормы"), Элементы.пкГруппаТипНоменклатурыУслугаПоДоговору);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеФлажка;
    НовоеПоле.ПутьКДанным = "Объект.пкЭтоУслугаТранспортировки";
    НовоеПоле.Заголовок   = "Услуга по транспортировке";
    НовоеПоле.Видимость   = Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;
    НовоеПоле.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    НовоеПоле.Доступность = НЕ Объект.пкЭтоУслугаПоДоговору;
//Рарус Владимир Подрезов Конец
    
    НовоеПоле             = Элементы.Вставить("пкКод", Тип("ПолеФормы"), Элементы.СтраницаОсновное, Элементы.пкГруппаТипНоменклатурыУслугаПоДоговору);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкКод";
    
КонецПроцедуры

//Рарус Владимир Подрезов 07.12.2016
Процедура ПриСозданииНаСервере_Справочник_ДоговорыКонтрагентов_ФормаСпискаЗакупки(Форма, Отказ, СтандартнаяОбработка)
    
    Элементы = Форма.Элементы;
    
	НоваяКолонкаДинамическогоСписка         	    = Элементы.Добавить("пкЕстьОсновнойДоговорСПоставщиком", Тип("ПолеФормы"), Элементы.Список);
    НоваяКолонкаДинамическогоСписка.Вид 	        = ВидПоляФормы.ПолеФлажка;   
    НоваяКолонкаДинамическогоСписка.ПутьКДанным		= "Список.Ссылка.пкЕстьОсновнойДоговорСПоставщиком";
	
	НоваяКолонкаДинамическогоСписка         	    = Элементы.Добавить("пкОсновнойДоговорСПоставщиком", Тип("ПолеФормы"), Элементы.Список);
    НоваяКолонкаДинамическогоСписка.Вид 	        = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаДинамическогоСписка.ПутьКДанным		= "Список.Ссылка.пкОсновнойДоговорСПоставщиком";
	
	НоваяКолонкаДинамическогоСписка         	    = Элементы.Добавить("пкНеТребуетсяСогласование", Тип("ПолеФормы"), Элементы.Список);
    НоваяКолонкаДинамическогоСписка.Вид 	        = ВидПоляФормы.ПолеФлажка;   
    НоваяКолонкаДинамическогоСписка.ПутьКДанным		= "Список.Ссылка.пкНеТребуетсяСогласование";
	                 
//++ Рарус Лимаренко 15.03.2018 Заявка №10462
	НоваяКолонкаДинамическогоСписка				= Элементы.Добавить("пкПрикрепленыФайлыВДО", Тип("ПолеФормы"), Элементы.Список);
	НоваяКолонкаДинамическогоСписка.Вид			= ВидПоляФормы.ПолеКартинки;   
	НоваяКолонкаДинамическогоСписка.ПутьКДанным	= "Список.Ссылка.пкПрикрепленыФайлыВДО";
	НоваяКолонкаДинамическогоСписка.КартинкаЗначений	= БиблиотекаКартинок.КоллекцияСкрепка;
	НоваяКолонкаДинамическогоСписка.КартинкаШапки		= БиблиотекаКартинок.Скрепка;
	НоваяКолонкаДинамическогоСписка.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Нет;
	НоваяКолонкаДинамическогоСписка.Ширина				= 1;
	
	Элементы.Переместить(НоваяКолонкаДинамическогоСписка,Элементы.Список,Элементы.СписокСостояние);
	
	НоваяКолонкаДинамическогоСписка             = Элементы.Добавить("пкТекущаяТочкаСогласования", Тип("ПолеФормы"), Элементы.Список);
    НоваяКолонкаДинамическогоСписка.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаДинамическогоСписка.ПутьКДанным = "Список.Ссылка.пкТекущаяТочкаСогласования";
	
	Элементы.Переместить(НоваяКолонкаДинамическогоСписка,Элементы.Список,Элементы.СписокСостояние);
//-- Рарус Лимаренко 15.03.2018 Заявка №1046

КонецПроцедуры 
//Рарус Владимир Подрезов Конец

//++ Рарус Лимаренко 15.03.2018 Заявка №10462
Процедура ПриСозданииНаСервере_Справочник_ДоговорыКонтрагентов_ФормаСпискаПродажи(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы = Форма.Элементы;
	
	НоваяКолонкаДинамическогоСписка				= Элементы.Добавить("пкПрикрепленыФайлыВДО", Тип("ПолеФормы"), Элементы.Список);
	НоваяКолонкаДинамическогоСписка.Вид			= ВидПоляФормы.ПолеКартинки;   
	НоваяКолонкаДинамическогоСписка.ПутьКДанным	= "Список.Ссылка.пкПрикрепленыФайлыВДО";
	НоваяКолонкаДинамическогоСписка.КартинкаЗначений	= БиблиотекаКартинок.КоллекцияСкрепка;
	НоваяКолонкаДинамическогоСписка.КартинкаШапки		= БиблиотекаКартинок.Скрепка;
	НоваяКолонкаДинамическогоСписка.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Нет;
	НоваяКолонкаДинамическогоСписка.Ширина				= 1;
	
	Элементы.Переместить(НоваяКолонкаДинамическогоСписка,Элементы.Список,Элементы.СписокСостояние);
	
	НоваяКолонкаДинамическогоСписка             = Элементы.Добавить("пкТекущаяТочкаСогласования", Тип("ПолеФормы"), Элементы.Список);
    НоваяКолонкаДинамическогоСписка.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаДинамическогоСписка.ПутьКДанным = "Список.Ссылка.пкТекущаяТочкаСогласования";
	
	Элементы.Переместить(НоваяКолонкаДинамическогоСписка,Элементы.Список,Элементы.СписокСостояние);

	
КонецПроцедуры

Процедура ПриСозданииНаСервере_Справочник_ДоговорыКонтрагентов_ФормаСписка(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы = Форма.Элементы;
	
	НоваяКолонкаДинамическогоСписка				= Элементы.Добавить("пкПрикрепленыФайлыВДО", Тип("ПолеФормы"), Элементы.Список);
	НоваяКолонкаДинамическогоСписка.Вид			= ВидПоляФормы.ПолеКартинки;   
	НоваяКолонкаДинамическогоСписка.ПутьКДанным	= "Список.Ссылка.пкПрикрепленыФайлыВДО";
	НоваяКолонкаДинамическогоСписка.КартинкаЗначений	= БиблиотекаКартинок.КоллекцияСкрепка;
	НоваяКолонкаДинамическогоСписка.КартинкаШапки		= БиблиотекаКартинок.Скрепка;
	НоваяКолонкаДинамическогоСписка.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Нет;
	НоваяКолонкаДинамическогоСписка.Ширина				= 1;
	
	Элементы.Переместить(НоваяКолонкаДинамическогоСписка,Элементы.Список,Элементы.СписокСостояние);
	
	НоваяКолонкаДинамическогоСписка             = Элементы.Добавить("пкТекущаяТочкаСогласования", Тип("ПолеФормы"), Элементы.Список);
    НоваяКолонкаДинамическогоСписка.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаДинамическогоСписка.ПутьКДанным = "Список.Ссылка.пкТекущаяТочкаСогласования";
	
	Элементы.Переместить(НоваяКолонкаДинамическогоСписка,Элементы.Список,Элементы.СписокСостояние);

	
КонецПроцедуры
//-- Рарус Лимаренко 15.03.2018 Заявка №1046

//++ Рарус Лимаренко 20.02.2018
Процедура ПриСозданииНаСервере_Справочник_ДоговорыКонтрагентов_ФормаВыбора(Форма, Отказ, СтандартнаяОбработка)

	Элементы = Форма.Элементы;
	
	НоваяКолонкаДинамическогоСписка         	    = Элементы.Добавить("пкОсновнойДоговорСПоставщиком", Тип("ПолеФормы"), Элементы.Список);
    НоваяКолонкаДинамическогоСписка.Вид 	        = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаДинамическогоСписка.ПутьКДанным		= "Список.Ссылка.пкОсновнойДоговорСПоставщиком";
	
	НоваяКолонкаДинамическогоСписка         	    = Элементы.Добавить("пкЕстьОсновнойДоговорСПоставщиком", Тип("ПолеФормы"), Элементы.Список);
    НоваяКолонкаДинамическогоСписка.Вид 	        = ВидПоляФормы.ПолеФлажка;   
    НоваяКолонкаДинамическогоСписка.ПутьКДанным		= "Список.Ссылка.пкЕстьОсновнойДоговорСПоставщиком";
	
	НоваяКолонкаДинамическогоСписка         	    = Элементы.Добавить("Менеджер", Тип("ПолеФормы"), Элементы.Список);
    НоваяКолонкаДинамическогоСписка.Вид 	        = ВидПоляФормы.ПолеФлажка;   
    НоваяКолонкаДинамическогоСписка.ПутьКДанным		= "Список.Ссылка.Менеджер";
	
	НоваяКолонкаДинамическогоСписка         	    = Элементы.Добавить("Класс", Тип("ПолеФормы"), Элементы.Список);
    НоваяКолонкаДинамическогоСписка.Вид 	        = ВидПоляФормы.ПолеФлажка;   
    НоваяКолонкаДинамическогоСписка.ПутьКДанным		= "Список.Ссылка.Партнер.пкКласс";	

	НоваяКолонкаДинамическогоСписка         	    = Элементы.Добавить("Объект", Тип("ПолеФормы"), Элементы.Список);
    НоваяКолонкаДинамическогоСписка.Вид 	        = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаДинамическогоСписка.ПутьКДанным		= "Список.Ссылка";
	НоваяКолонкаДинамическогоСписка.Видимость		= Ложь;
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("пкГод",  Новый ОписаниеТипов("Дата")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ЕстьОсновнойДоговорСПоставщиком",  Новый ОписаниеТипов("Булево")));

	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	НовоеПоле               = Элементы.Добавить("пкГод", Тип("ПолеФормы"), Элементы.БыстрыеОтборы);
    НовоеПоле.Вид           = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным   = "пкГод";
    НовоеПоле.Заголовок     = "Год";
    НовоеПоле.КнопкаОчистки = Истина;
	НовоеПоле.КнопкаРегулирования  = Истина;	
    НовоеПоле.КнопкаВыпадающегоСписка = Ложь;
	НовоеПоле.Формат = "ДФ=гггг";
	НовоеПоле.ФорматРедактирования = "ДФ=гггг";
	
	НовоеПоле.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду");
	
	НовоеПоле               = Элементы.Добавить("ЕстьОсновнойДоговорСПоставщиком", Тип("ПолеФормы"), Элементы.БыстрыеОтборы);
    НовоеПоле.Вид           = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным   = "ЕстьОсновнойДоговорСПоставщиком";
    НовоеПоле.Заголовок     = "Только основные договора";
	
	НовоеПоле.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду");
		
КонецПроцедуры // ()
//-- Рарус Лимаренко 20.02.2018

Процедура ПриСозданииНаСервере_Справочник_ДоговорыКонтрагентов_ФормаЭлемента(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    ДобавляемыеРеквизиты = Новый Массив;
    ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("пкОтборДопСолгашение", Новый ОписаниеТипов("СправочникСсылка.пкДополнительныеСоглашенияКДоговорам")));
    ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("пкОтборМодель",        Новый ОписаниеТипов("СправочникСсылка.Номенклатура")));
    ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Дата",                 Новый ОписаниеТипов("Дата"), "Объект.пкТарифы"));
    
    Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
#Область ДляНовогоДоговора
    Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
        Объект.Дата                  = ТекущаяДата();
        Объект.ДатаНачалаДействия    = ТекущаяДата();
        Объект.ДатаОкончанияДействия = КонецГода(ТекущаяДата());
        
        Пользователь = Пользователи.ТекущийПользователь();
        
        Объект.Подразделение = Пользователь.Подразделение;
        Объект.Менеджер      = Объект.Партнер.ОсновнойМенеджер;
        
        Объект.пкГраницаВидовАренды = Константы.пкГраницаВидовАренды.Получить();
        
        Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
        
        Запрос = Новый Запрос;
        Запрос.Текст = 
        "ВЫБРАТЬ ПЕРВЫЕ 1
        |	пкПрайсЛисты.Ссылка КАК ПрайсЛист
        |ИЗ
        |	Справочник.пкПрайсЛисты КАК пкПрайсЛисты
        |ГДЕ
        |	НЕ пкПрайсЛисты.ПометкаУдаления
        |	И пкПрайсЛисты.Подразделение = &Подразделение";
        
        Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
        
        Результат = Запрос.Выполнить();
        Выборка = Результат.Выбрать();
        
        Если Выборка.Следующий() Тогда
            Объект.пкПрайсЛист = Выборка.ПрайсЛист;
        КонецЕсли;
		
//++ Рарус Лимаренко 11.03.2018
		Если Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПоставщиком") Тогда
			Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов;
		КонецЕсли;
	
	   Объект.пкОригиналДоговора       = Ложь;
	   Объект.пкСканДоговора           = Ложь;
	   Объект.пкУставныеДокументы      = Ложь;
	   Объект.пкДоговорПоручительства  = Ложь;
	   Объект.пкПримечание             = "";
	   Объект.пкВыставлениеСчетовПоФакту = Ложь;
	   Объект.пкОсновнойДоговорСПоставщиком = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	   Объект.пкЕстьОсновнойДоговорСПоставщиком = Ложь;
	   Объект.пкНеТребуетсяСогласование = Ложь;
	   Объект.Комментарий				= "";
//++ Рарус Лимаренко 21.05.2018 Заявка №11946
	   Объект.пкЯвляетсяДопСоглашениемКДоговору	= Ложь;
	   Объект.пкДопСоглашениеКДоговору          = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
//-- Рарус Лимаренко 21.05.2018 Заявка №11946

	   
	   Объект.Статус						= Перечисления.СтатусыДоговоровКонтрагентов.НеСогласован;
	
		КопироватьДанныеФормы(Объект, Форма.Объект);
		
		//++ Рарус Лимаренко 04.04.2018
		Если  Объект.ДополнительныеРеквизиты.Количество() > 0 Тогда
				Для каждого Стр Из  Объект.ДополнительныеРеквизиты Цикл
				Если Стр.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Основной (Договоры с контрагентами)") И Стр.Значение = Истина Тогда
					 Стр.Значение = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
//-- Рарус Лимаренко 04.04.2018
	Если Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПоставщиком") Тогда
			//Если Не (РольДоступна("пкУправлениеСогласованиемДоговоровСПоставщикамиРарус") ИЛИ РольДоступна("ПолныеПрава")) Тогда
				Объект.Согласован					= Ложь;
				Объект.пкПройденПроцессСогласования	= Ложь;
				//Объект.Менеджер						= Пользователи.ТекущийПользователь();
			//КонецЕсли;
		КонецЕсли;
		
	КонецЕсли; 
//-- Рарус Лимаренко 11.03.2018
#КонецОбласти

//Рарус Владимир Подрезов 13.10.2017 5683
	Если Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПоставщиком") Тогда	
	Элементы.Статус.ТолькоПросмотр = Не пкМодификацияСервер.ПроверитьВхождениеПользователяВГруппупкУправлениеСогласованиемДоговоровСПоставщикамиРарус();
	КонецЕсли;
	//ИЛИ РольДоступна("ПолныеПрава"));
		 //Рарус Владимир Подрезов Конец
      
//Рарус Владимир Подрезов 15.02.2017
	Если Объект.ТипДоговора <> ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПоставщиком") Тогда
//Рарус Владимир Подрезов Конец
    	НовоеПоле             = Элементы.Вставить("пкВидДоговора", Тип("ПолеФормы"), Элементы.ГруппаШапкаПраво, Элементы.ГруппаПериодДействия);
    	НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
   	 	НовоеПоле.ПутьКДанным = "Объект.пкВидДоговора";
    	НовоеПоле.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду");	
	ИначеЕсли Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПоставщиком") Тогда
		Объект.пкВидДоговора = Перечисления.пкВидыДоговоров.ПустаяСсылка();	
//Рарус Владимир Подрезов 15.02.2017
	КонецЕсли;
//Рарус Владимир Подрезов Конец
    
    НоваяГруппа             = Элементы.Вставить("пкГруппаНаличиеДокументов", Тип("ГруппаФормы"), Элементы.СтраницаОсновное, Элементы.ГруппаДополнительныеРеквизиты); 
	НоваяГруппа.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	НоваяГруппа.Заголовок   = "Наличие документов";
        
    НовоеПоле             = Элементы.Добавить("пкОригиналДоговора", Тип("ПолеФормы"), Элементы.пкГруппаНаличиеДокументов);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеФлажка;
    НовоеПоле.ПутьКДанным = "Объект.пкОригиналДоговора";
	
	//++ RARUS_IUC 20180212
	НовоеПоле             = Элементы.Добавить("пкСканДоговора", Тип("ПолеФормы"), Элементы.пкГруппаНаличиеДокументов);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеФлажка;
    НовоеПоле.ПутьКДанным = "Объект.пкСканДоговора";
	//-- RARUS_IUC 20180212
    
    НовоеПоле             = Элементы.Добавить("пкУставныеДокументы", Тип("ПолеФормы"), Элементы.пкГруппаНаличиеДокументов);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеФлажка;
    НовоеПоле.ПутьКДанным = "Объект.пкУставныеДокументы";
    
    НовоеПоле             = Элементы.Добавить("пкДоговорПоручительства", Тип("ПолеФормы"), Элементы.пкГруппаНаличиеДокументов);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеФлажка;
    НовоеПоле.ПутьКДанным = "Объект.пкДоговорПоручительства";
	
	НовоеПоле             = Элементы.Добавить("пкБезПечати", Тип("ПолеФормы"), Элементы.пкГруппаНаличиеДокументов);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеФлажка;
    НовоеПоле.ПутьКДанным = "Объект.пкБезПечати";
    
    НоваяГруппа             = Элементы.Вставить("пкГруппаПримечания", Тип("ГруппаФормы"), Элементы.СтраницаОсновное, Элементы.ГруппаДополнительныеРеквизиты); 
	НоваяГруппа.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
    НоваяГруппа.ОтображатьЗаголовок = Ложь;
    
    НовоеПоле             = Элементы.Добавить("пкОтправка", Тип("ПолеФормы"), Элементы.пкГруппаПримечания);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеФлажка;
    НовоеПоле.ПутьКДанным = "Объект.пкОтправка";
    
    НовоеПоле             = Элементы.Добавить("пкПримечание", Тип("ПолеФормы"), Элементы.пкГруппаПримечания);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеФлажка;
    НовоеПоле.ПутьКДанным = "Объект.пкПримечание";

    НоваяГруппа           = Элементы.Вставить("пкСтраницаТарифы", Тип("ГруппаФормы"), Элементы.ГруппаСтраницы, Элементы.СтраницаРасчетыИОформление); 
	НоваяГруппа.Вид       = ВидГруппыФормы.Страница;
	НоваяГруппа.Заголовок = "Тарифы";
    НоваяГруппа.Видимость = Объект.пкВидДоговора <> Перечисления.пкВидыДоговоров.ПоставкаТехники;
    
    НоваяГруппа             = Элементы.Добавить("пкГруппаГраницаВидовАрендыПрайсЛист", Тип("ГруппаФормы"), Элементы.пкСтраницаТарифы); 
	НоваяГруппа.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	НоваяГруппа.ОтображатьЗаголовок = Ложь;
        
    НовоеПоле             = Элементы.Добавить("пкГраницаВидовАренды", Тип("ПолеФормы"), Элементы.пкГруппаГраницаВидовАрендыПрайсЛист);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкГраницаВидовАренды";
    
    НовоеПоле             = Элементы.Добавить("пкПрайсЛист", Тип("ПолеФормы"), Элементы.пкГруппаГраницаВидовАрендыПрайсЛист);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкПрайсЛист";
    
//Рарус Владимир Подрезов 22.01.2017
	НовоеПоле             = Элементы.Добавить("пкВалютаТарифа", Тип("ПолеФормы"), Элементы.пкГруппаГраницаВидовАрендыПрайсЛист);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкВалютаТарифа";
//Рарус Владимир Подрезов Конец
    
    НоваяГруппа             = Элементы.Добавить("пкГруппаОтборы", Тип("ГруппаФормы"), Элементы.пкСтраницаТарифы); 
	НоваяГруппа.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	НоваяГруппа.Заголовок   = "Настройка отборов";
    
    НовоеПоле               = Элементы.Добавить("пкОтборДопСолгашение", Тип("ПолеФормы"), Элементы.пкГруппаОтборы);
    НовоеПоле.Вид           = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным   = "пкОтборДопСолгашение";
    НовоеПоле.Заголовок     = "Доп. соглашение";
    НовоеПоле.КнопкаОчистки = Истина;
    НовоеПоле.КнопкаВыбора  = Истина;
    НовоеПоле.КнопкаВыпадающегоСписка = Ложь;
    НовоеПоле.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
    
    НовоеПоле.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    
    ПараметрыВыбора = Новый ПараметрВыбора("Отбор.Владелец", Объект.Ссылка);
    МассивПараметровВыбора = Новый Массив();
    МассивПараметровВыбора.Добавить(ПараметрыВыбора);
    НовоеПоле.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);    
    
    НовоеПоле               = Элементы.Добавить("пкОтборМодель", Тип("ПолеФормы"), Элементы.пкГруппаОтборы);
    НовоеПоле.Вид           = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным   = "пкОтборМодель";
    НовоеПоле.Заголовок     = "Модель";
    НовоеПоле.КнопкаОчистки = Истина;
    НовоеПоле.КнопкаВыбора  = Истина;
    НовоеПоле.КнопкаВыпадающегоСписка = Ложь;
    НовоеПоле.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
    НовоеПоле.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду");
    
    ПараметрыВыбора = Новый ПараметрВыбора("Отбор.пкЭтоТехника", Истина);
    МассивПараметровВыбора = Новый Массив();
    МассивПараметровВыбора.Добавить(ПараметрыВыбора);
    НовоеПоле.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);    
    
    НоваяТаблица             = Элементы.Добавить("пкТарифы", Тип("ТаблицаФормы"), Элементы.пкСтраницаТарифы);
    НоваяТаблица.ПутьКДанным = "Объект.пкТарифы";
    
    НоваяГруппа           = Элементы.Добавить("пкГруппаЗаполнитьПоПрайсЛисту", Тип("ГруппаФормы"), Элементы.пкТарифы.КоманднаяПанель); 
    НоваяГруппа.Вид       = ВидГруппыФормы.Подменю; 
    НоваяГруппа.Заголовок = "Заполнить по прайс-листу";
    
    НоваяКоманда            = Форма.Команды.Добавить("пкЗаполнитьПоПрайсЛисту");
    НоваяКоманда.Заголовок  = "Все";
    НоваяКоманда.Действие   = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
    
    НоваяКнопка            = Элементы.Добавить("пкЗаполнитьПоПрайсЛисту", Тип("КнопкаФормы"), Элементы.пкГруппаЗаполнитьПоПрайсЛисту); 
    НоваяКнопка.ИмяКоманды = "пкЗаполнитьПоПрайсЛисту"; 
    
    НоваяКоманда            = Форма.Команды.Добавить("пкЗаполнитьТарифыПоПрайсЛисту");
    НоваяКоманда.Заголовок  = "Тарифы";
    НоваяКоманда.Действие   = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
    
    НоваяКнопка            = Элементы.Добавить("пкЗаполнитьТарифыПоПрайсЛисту", Тип("КнопкаФормы"), Элементы.пкГруппаЗаполнитьПоПрайсЛисту); 
    НоваяКнопка.ИмяКоманды = "пкЗаполнитьТарифыПоПрайсЛисту"; 
    
    НоваяКоманда             = Форма.Команды.Добавить("ЗаполнитьТранспортировкуПоПрайсЛисту");
    НоваяКоманда.Заголовок   = "Транспортировку";
    НоваяКоманда.Действие    = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
    
    НоваяКнопка            = Элементы.Добавить("ЗаполнитьТранспортировкуПоПрайсЛисту", Тип("КнопкаФормы"), Элементы.пкГруппаЗаполнитьПоПрайсЛисту); 
    НоваяКнопка.ИмяКоманды = "ЗаполнитьТранспортировкуПоПрайсЛисту"; 
    
    НоваяКоманда             = Форма.Команды.Добавить("ЗаполнитьУслугиРемонтаПоПрайсЛисту");
    НоваяКоманда.Заголовок   = "Услуги ремонта";
    НоваяКоманда.Действие    = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
    
    НоваяКнопка            = Элементы.Добавить("ЗаполнитьУслугиРемонтаПоПрайсЛисту", Тип("КнопкаФормы"), Элементы.пкГруппаЗаполнитьПоПрайсЛисту); 
    НоваяКнопка.ИмяКоманды = "ЗаполнитьУслугиРемонтаПоПрайсЛисту"; 

    НоваяКолонка             = Элементы.Добавить("пкТарифыМодель", Тип("ПолеФормы"), Элементы.пкТарифы);
    НоваяКолонка.Вид         = ВидПоляФормы.ПолеВвода;
    НоваяКолонка.ПутьКДанным = "Объект.пкТарифы.Модель";
    НоваяКолонка.КнопкаВыбора            = Истина;
    НоваяКолонка.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
    НоваяКолонка.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    
    НоваяКолонка             = Элементы.Добавить("пкТарифыДопСоглашение", Тип("ПолеФормы"), Элементы.пкТарифы);
    НоваяКолонка.Вид         = ВидПоляФормы.ПолеВвода;
    НоваяКолонка.ПутьКДанным = "Объект.пкТарифы.ДополнительноеСоглашение";
    НоваяКолонка.Заголовок   = "Доп. соглашение"; 
    НоваяКолонка.КнопкаВыбора            = Истина;
    НоваяКолонка.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
    НоваяКолонка.КнопкаВыпадающегоСписка = Ложь;
    НоваяКолонка.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    
    НоваяКолонка             = Элементы.Добавить("пкТарифыДата", Тип("ПолеФормы"), Элементы.пкТарифы);
    НоваяКолонка.Вид         = ВидПоляФормы.ПолеВвода;
    НоваяКолонка.Заголовок   = "Дата";
    НоваяКолонка.Формат      = "ДФ=dd.MM.yyyy";
    НоваяКолонка.ТолькоПросмотр = Истина;
    НоваяКолонка.ПутьКДанным = "Объект.пкТарифы.Дата";
    
    НоваяКолонка             = Элементы.Добавить("пкТарифыОбъектСтроительства", Тип("ПолеФормы"), Элементы.пкТарифы);
    НоваяКолонка.Вид         = ВидПоляФормы.ПолеВвода;
    НоваяКолонка.ПутьКДанным = "Объект.пкТарифы.ОбъектСтроительства";
    НоваяКолонка.КнопкаВыбора            = Истина;
    НоваяКолонка.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
    НоваяКолонка.ИсторияВыбораПриВводе   = ИсторияВыбораПриВводе.НеИспользовать;
    НоваяКолонка.УстановитьДействие("НачалоВыбора", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    
    //НоваяГруппа     = Элементы.Добавить("пкГруппаКраткосрочнаяЦена", Тип("ГруппаФормы"), Элементы.пкТарифы); 
    //НоваяГруппа.Вид = ВидГруппыФормы.ГруппаКолонок;
    
    НоваяКолонка             = Элементы.Добавить("пкТарифыКраткосрочнаяЦена", Тип("ПолеФормы"), Элементы.пкТарифы);
    НоваяКолонка.Вид         = ВидПоляФормы.ПолеВвода;
    НоваяКолонка.ПутьКДанным = "Объект.пкТарифы.КраткосрочнаяЦена";
    
    НоваяКолонка             = Элементы.Добавить("пкТарифыЕдиницаИзмеренияКраткосрочнойЦены", Тип("ПолеФормы"), Элементы.пкТарифы);
    НоваяКолонка.Вид         = ВидПоляФормы.ПолеВвода;
    НоваяКолонка.ПутьКДанным = "Объект.пкТарифы.ЕдиницаИзмеренияКраткосрочнойЦены";
    НоваяКолонка.Заголовок   = "Ед. изм.";
	//++ RARUS_IUC 20180119
	НоваяКолонка.УстановитьДействие("ПриИзменении", "пкЕдИзмКЦПриИзмерении");
	//-- RARUS_IUC 20180119
    
    //НоваяГруппа     = Элементы.Добавить("пкГруппаДолгосрочнаяЦена", Тип("ГруппаФормы"), Элементы.пкТарифы); 
    //НоваяГруппа.Вид = ВидГруппыФормы.ГруппаКолонок;
    
    НоваяКолонка             = Элементы.Добавить("пкТарифыДолгосрочнаяЦена", Тип("ПолеФормы"), Элементы.пкТарифы);
    НоваяКолонка.Вид         = ВидПоляФормы.ПолеВвода;
    НоваяКолонка.ПутьКДанным = "Объект.пкТарифы.ДолгосрочнаяЦена";
    
    НоваяКолонка             = Элементы.Добавить("пкТарифыЕдиницаИзмеренияДолгосрочнойЦены", Тип("ПолеФормы"), Элементы.пкТарифы);
    НоваяКолонка.Вид         = ВидПоляФормы.ПолеВвода;
    НоваяКолонка.ПутьКДанным = "Объект.пкТарифы.ЕдиницаИзмеренияДолгосрочнойЦены";
    НоваяКолонка.Заголовок   = "Ед. изм.";
	//++ RARUS_IUC 20180119
	НоваяКолонка.УстановитьДействие("ПриИзменении", "пкЕдИзмДЦПриИзмерении");
	//-- RARUS_IUC 20180119
	
    НоваяКолонка             = Элементы.Добавить("пкТарифыКомментарий", Тип("ПолеФормы"), Элементы.пкТарифы);
    НоваяКолонка.Вид         = ВидПоляФормы.ПолеВвода;
    НоваяКолонка.ПутьКДанным = "Объект.пкТарифы.Комментарий";
    НоваяКолонка.Высота      = 1;
    
    НоваяГруппа             = Элементы.Добавить("пкГруппаТранспортировка", Тип("ГруппаФормы"), Элементы.пкСтраницаТарифы); 
	НоваяГруппа.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	НоваяГруппа.Заголовок   = "Транспортировка";
        
    НоваяТаблица             = Элементы.Добавить("пкТранспортировка", Тип("ТаблицаФормы"), Элементы.пкГруппаТранспортировка);
    НоваяТаблица.ПутьКДанным = "Объект.пкТранспортировка";

    НоваяКолонка             = Элементы.Добавить("пкТранспортировкаУслуга", Тип("ПолеФормы"), Элементы.пкТранспортировка);
    НоваяКолонка.Вид         = ВидПоляФормы.ПолеВвода;
    НоваяКолонка.ПутьКДанным = "Объект.пкТранспортировка.Услуга";
    НоваяКолонка.КнопкаВыбора            = Истина;
    НоваяКолонка.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
    НоваяКолонка.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
        
    НоваяКолонка             = Элементы.Добавить("пкТранспортировкаДопСоглашение", Тип("ПолеФормы"), Элементы.пкТранспортировка);
    НоваяКолонка.Вид         = ВидПоляФормы.ПолеВвода;
    НоваяКолонка.ПутьКДанным = "Объект.пкТранспортировка.ДополнительноеСоглашение";
    НоваяКолонка.Заголовок   = "Доп. соглашение"; 
    НоваяКолонка.КнопкаВыбора            = Истина;
    НоваяКолонка.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
    НоваяКолонка.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    
    НоваяКолонка             = Элементы.Добавить("пкТранспортировкаОбъектСтроительства", Тип("ПолеФормы"), Элементы.пкТранспортировка);
    НоваяКолонка.Вид         = ВидПоляФормы.ПолеВвода;
    НоваяКолонка.ПутьКДанным = "Объект.пкТранспортировка.ОбъектСтроительства";
    НоваяКолонка.КнопкаВыбора            = Истина;
    НоваяКолонка.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
    НоваяКолонка.ИсторияВыбораПриВводе   = ИсторияВыбораПриВводе.НеИспользовать;
    НоваяКолонка.УстановитьДействие("НачалоВыбора", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    
    НоваяКолонка             = Элементы.Добавить("пкТранспортировкаЦена", Тип("ПолеФормы"), Элементы.пкТранспортировка);
    НоваяКолонка.Вид         = ВидПоляФормы.ПолеВвода;
    НоваяКолонка.ПутьКДанным = "Объект.пкТранспортировка.Цена";
    
    НоваяКолонка             = Элементы.Добавить("пкТранспортировкаКомментарий", Тип("ПолеФормы"), Элементы.пкТранспортировка);
    НоваяКолонка.Вид         = ВидПоляФормы.ПолеВвода;
    НоваяКолонка.ПутьКДанным = "Объект.пкТранспортировка.Комментарий";
    
    НоваяГруппа           = Элементы.Вставить("пкСтраницаТехника", Тип("ГруппаФормы"), Элементы.ГруппаСтраницы, Элементы.СтраницаРасчетыИОформление); 
	НоваяГруппа.Вид       = ВидГруппыФормы.Страница;
	НоваяГруппа.Заголовок = "Техника";
    НоваяГруппа.Видимость = Объект.пкВидДоговора = Перечисления.пкВидыДоговоров.ПоставкаТехники;
        
    НоваяТаблица             = Элементы.Добавить("пкТехника", Тип("ТаблицаФормы"), Элементы.пкСтраницаТехника);
    НоваяТаблица.ПутьКДанным = "Объект.пкТехника";

    НоваяКолонка             = Элементы.Добавить("пкТехникаТехника", Тип("ПолеФормы"), Элементы.пкТехника);
    НоваяКолонка.Вид         = ВидПоляФормы.ПолеВвода;
    НоваяКолонка.ПутьКДанным = "Объект.пкТехника.Техника";
    
    НоваяКолонка             = Элементы.Добавить("пкТехникаСумма", Тип("ПолеФормы"), Элементы.пкТехника);
    НоваяКолонка.Вид         = ВидПоляФормы.ПолеВвода;
    НоваяКолонка.ПутьКДанным = "Объект.пкТехника.Сумма";
    НоваяКолонка.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    
    НоваяКолонка             = Элементы.Добавить("пкТехникаСтавкаНДС", Тип("ПолеФормы"), Элементы.пкТехника);
    НоваяКолонка.Вид         = ВидПоляФормы.ПолеВвода;
    НоваяКолонка.ПутьКДанным = "Объект.пкТехника.СтавкаНДС";
    НоваяКолонка.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    
    НоваяКолонка             = Элементы.Добавить("пкТехникаСуммаНДС", Тип("ПолеФормы"), Элементы.пкТехника);
    НоваяКолонка.Вид         = ВидПоляФормы.ПолеВвода;
    НоваяКолонка.ПутьКДанным = "Объект.пкТехника.СуммаНДС";
	//++ Рарус Лимаренко 20.08.2018 Задача 13848
	НоваяКолонка.Доступность = пкМодификацияСервер.ПроверитьВхождениеПользователяВГруппу("пкРазрешитьРедактированиеНДСВДоговореПередачеОС");
	//-- Рарус Лимаренко 20.08.2018
    
    НоваяКолонка             = Элементы.Добавить("пкТехникаСуммаСНДС", Тип("ПолеФормы"), Элементы.пкТехника);
    НоваяКолонка.Вид         = ВидПоляФормы.ПолеВвода;
    НоваяКолонка.ПутьКДанным = "Объект.пкТехника.СуммаСНДС";
	//++ Рарус Лимаренко 20.08.2018 Задача 13848
	НоваяКолонка.Доступность = пкМодификацияСервер.ПроверитьВхождениеПользователяВГруппу("пкРазрешитьРедактированиеНДСВДоговореПередачеОС");
	//-- Рарус Лимаренко 20.08.2018

    НоваяГруппа           = Элементы.Вставить("пкСтраницаУслугиРемонта", Тип("ГруппаФормы"), Элементы.ГруппаСтраницы, Элементы.СтраницаРасчетыИОформление); 
	НоваяГруппа.Вид       = ВидГруппыФормы.Страница;
	НоваяГруппа.Заголовок = "Услуги ремонта";
            
    НоваяТаблица             = Элементы.Добавить("пкУслугиРемонта", Тип("ТаблицаФормы"), Элементы.пкСтраницаУслугиРемонта);
    НоваяТаблица.ПутьКДанным = "Объект.пкУслугиРемонта";
        
    НоваяКолонка             = Элементы.Добавить("пкУслугиРемонтаУслуга", Тип("ПолеФормы"), Элементы.пкУслугиРемонта);
    НоваяКолонка.Вид         = ВидПоляФормы.ПолеВвода;
    НоваяКолонка.ПутьКДанным = "Объект.пкУслугиРемонта.Услуга";
    НоваяКолонка.КнопкаВыбора            = Истина;
    НоваяКолонка.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
    НоваяКолонка.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    
    НоваяКолонка             = Элементы.Добавить("пкУслугиРемонтаДопСоглашение", Тип("ПолеФормы"), Элементы.пкУслугиРемонта);
    НоваяКолонка.Вид         = ВидПоляФормы.ПолеВвода;
    НоваяКолонка.ПутьКДанным = "Объект.пкУслугиРемонта.ДополнительноеСоглашение";
    НоваяКолонка.Заголовок   = "Доп. соглашение"; 
    НоваяКолонка.КнопкаВыбора            = Истина;
    НоваяКолонка.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
    
    НоваяКолонка             = Элементы.Добавить("пкУслугиРемонтаНаименованиеДляПечати", Тип("ПолеФормы"), Элементы.пкУслугиРемонта);
    НоваяКолонка.Вид         = ВидПоляФормы.ПолеВвода;
    НоваяКолонка.ПутьКДанным = "Объект.пкУслугиРемонта.НаименованиеДляПечати";
    
    НоваяКолонка             = Элементы.Добавить("пкУслугиРемонтаЦена", Тип("ПолеФормы"), Элементы.пкУслугиРемонта);
    НоваяКолонка.Вид         = ВидПоляФормы.ПолеВвода;
    НоваяКолонка.ПутьКДанным = "Объект.пкУслугиРемонта.Цена"; 
	
	//+++rarus-spb_pavelk
	НовоеПоле             = Элементы.Вставить("пкВыставлениеСчетовПоФакту", Тип("ПолеФормы"), Элементы.СтраницаОсновное, Элементы.ГруппаДополнительныеРеквизиты);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеФлажка;
    НовоеПоле.ПутьКДанным = "Объект.пкВыставлениеСчетовПоФакту";
    //---rarus-spb_pavelk
    
    Для Каждого Строка ИЗ Форма.Объект.пкТарифы Цикл
        Если ЗначениеЗаполнено(Строка.ДополнительноеСоглашение) Тогда
            Строка.Дата = Строка.ДополнительноеСоглашение.ДатаОкончанияДействия;
        Иначе
            Строка.Дата = Объект.ДатаОкончанияДействия;
        КонецЕсли;    
    КонецЦикла;    
    
    Элемент = Форма.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.пкТарифыДопСоглашение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.пкТарифы.ДополнительноеСоглашение");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.пкДополнительныеСоглашенияКДоговорам.ПустаяСсылка();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru= '<По договору>'"));
    
    Элемент = Форма.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.пкТранспортировкаДопСоглашение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.пкТранспортировка.ДополнительноеСоглашение");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.пкДополнительныеСоглашенияКДоговорам.ПустаяСсылка();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru= '<По договору>'"));
    
    Элемент = Форма.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.пкУслугиРемонтаДопСоглашение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.пкУслугиРемонта.ДополнительноеСоглашение");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.пкДополнительныеСоглашенияКДоговорам.ПустаяСсылка();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru= '<По договору>'"));

//Рарус Владимир Подрезов 07.12.2016

	НоваяГруппа						= Элементы.Вставить("пкГруппаСогласование", Тип("ГруппаФормы"), Элементы.СтраницаОсновное);
	НоваяГруппа.Вид					= ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение			= ОтображениеОбычнойГруппы.СлабоеВыделение;
	НоваяГруппа.Группировка			= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	НоваяГруппа.Заголовок			= "Согласование";
	НоваяГруппа.ОтображатьЗаголовок	= Истина;

		НовоеПолеВвода						= Элементы.Добавить("пкЕстьОсновнойДоговорСПоставщиком", Тип("ПолеФормы"), Элементы.пкГруппаСогласование);
	    НовоеПолеВвода.Вид					= ВидПоляФормы.ПолеФлажка;   
	    НовоеПолеВвода.ПутьКДанным			= "Объект.пкЕстьОсновнойДоговорСПоставщиком";
		НовоеПолеВвода.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 

		НовоеПолеВвода						= Элементы.Добавить("пкОсновнойДоговорСПоставщиком", Тип("ПолеФормы"), Элементы.пкГруппаСогласование);
	    НовоеПолеВвода.Вид					= ВидПоляФормы.ПолеВвода;   
	    НовоеПолеВвода.ПутьКДанным			= "Объект.пкОсновнойДоговорСПоставщиком";
		НовоеПолеВвода.Доступность			= (Объект.пкЕстьОсновнойДоговорСПоставщиком);
		НовоеПолеВвода.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
		
		НовоеПолеВвода.УстановитьДействие("НачалоВыбора", "пкОсновнойДоговорСПоставщикомНачалоВыбора");
		
		
	Если РольДоступна("ПолныеПрава") ИЛИ пкМодификацияСервер.ПроверитьВхождениеПользователяВГруппупкУправлениеСогласованиемДоговоровСПоставщикамиРарус() Тогда
		НовоеПолеВвода						= Элементы.Добавить("пкНеТребуетсяСогласование", Тип("ПолеФормы"), Элементы.пкГруппаСогласование);
	    НовоеПолеВвода.Вид					= ВидПоляФормы.ПолеФлажка;   
	    НовоеПолеВвода.ПутьКДанным			= "Объект.пкНеТребуетсяСогласование";
		НовоеПолеВвода.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
//++ Рарус Лимаренко 06.08.2018
		НовоеПолеВвода.Видимость			= Ложь;
//-- Рарус Лимаренко 06.08.2018		
	КонецЕсли;

	Элементы.ТипДоговора.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 

	
	Элементы.пкСтраницаТарифы.Видимость			 = (Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем);
	Элементы.пкСтраницаТехника.Видимость		 = (Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем);
	Элементы.пкСтраницаУслугиРемонта.Видимость	 = (Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем);
	
//Рарус Владимир Подрезов Конец
	
//++Рарус Лимаренко 25.10.17
	НоваяГруппа             = Элементы.Добавить("пкГруппаСервис", Тип("ГруппаФормы"), Элементы.СтраницаОсновное); 
	НоваяГруппа.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НоваяГруппа.Заголовок   = "";
	НоваяГруппа.Видимость 	= Объект.пкВидДоговора = Перечисления.пкВидыДоговоров.Сервис;
	
    НовоеПоле               = Элементы.Добавить("пкСтоимостьЧасаМеханика", Тип("ПолеФормы"), Элементы.пкГруппаСервис);
    НовоеПоле.Вид           = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным   = "Объект.пкСтоимостьЧасаМеханика";
    НовоеПоле.Заголовок     = "Стоимость часа механика";
    НовоеПоле.КнопкаОчистки = Истина;
	
	НовоеПоле               = Элементы.Добавить("пкСтоимостьКилометраПути", Тип("ПолеФормы"), Элементы.пкГруппаСервис);
    НовоеПоле.Вид           = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным   = "Объект.пкСтоимостьКилометраПути";
    НовоеПоле.Заголовок     = "Стоимость километра пути";
    НовоеПоле.КнопкаОчистки = Истина;
//--Рарус Лимаренко 25.10.17

//++ Рарус Лимаренко 21.05.2018 Заявка №11946 2.4
	НоваяГруппа								= Элементы.Вставить("пкГруппаДопСоглашение", Тип("ГруппаФормы"), Элементы.СтраницаОсновное);
	НоваяГруппа.Вид							= ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение					= ОтображениеОбычнойГруппы.СлабоеВыделение;
	НоваяГруппа.Группировка					= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	НоваяГруппа.Заголовок					= "Доп. соглашение";
	НоваяГруппа.ОтображатьЗаголовок			= Истина;
	
	НовоеПолеВвода							= Элементы.Добавить("пкЯвляетсяДопСоглашениемКДоговору", Тип("ПолеФормы"), Элементы.пкГруппаДопСоглашение);
	НовоеПолеВвода.Вид						= ВидПоляФормы.ПолеФлажка;   
	НовоеПолеВвода.ПутьКДанным				= "Объект.пкЯвляетсяДопСоглашениемКДоговору";
	НовоеПолеВвода.Доступность				= Объект.Статус <> Перечисления.СтатусыДоговоровКонтрагентов.Закрыт;
	НовоеПолеВвода.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
	
	НовоеПолеВвода							= Элементы.Добавить("пкДопСоглашениеКДоговору", Тип("ПолеФормы"), Элементы.пкГруппаДопСоглашение);
	НовоеПолеВвода.Вид						= ВидПоляФормы.ПолеВвода;   
	НовоеПолеВвода.ПутьКДанным				= "Объект.пкДопСоглашениеКДоговору"; 
	//++Параматр выбора
	НоваяСвязь 								= Новый СвязьПараметраВыбора("Отбор.Контрагент","Объект.Контрагент");
	НовыйМассив 							= Новый Массив();
	НовыйМассив.Добавить(НоваяСвязь);
	НовыеСвязи 								= Новый ФиксированныйМассив(НовыйМассив);
	НовоеПолеВвода.СвязиПараметровВыбора 	= НовыеСвязи;
	//--Параматр выбора
	НовоеПолеВвода.Видимость				= Объект.пкЯвляетсяДопСоглашениемКДоговору;
	НовоеПолеВвода.Доступность				= Объект.Статус <> Перечисления.СтатусыДоговоровКонтрагентов.Закрыт;
	
//-- Рарус Лимаренко 21.05.2018 Заявка №11946
	
//++ Рарус Лимаренко 24.05.2018 Заявка №11918
		НоваяКоманда             = Форма.Команды.Добавить("пкЗакрытьДоговор");
    	НоваяКоманда.Заголовок = "Закрыть договор";
    	НоваяКоманда.Действие    = "Подключаемый_ВыполнитьПереопределяемуюКоманду";

		НоваяГруппа								= Элементы.Добавить("пкСтатусИКнопкаЗакрыть", Тип("ГруппаФормы"), Элементы.ГруппаШапкаПраво);
		НоваяГруппа.Вид							= ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппа.Отображение					= ОтображениеОбычнойГруппы.Нет;
		НоваяГруппа.Группировка					= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		НоваяГруппа.Заголовок					= "";
		НоваяГруппа.ОтображатьЗаголовок			= Ложь;

		НоваяКнопка								= Элементы.Добавить("пкЗакрытьДоговор", Тип("КнопкаФормы"), Элементы.ГруппаШапкаПраво);
		НоваяКнопка.ИмяКоманды 					= "пкЗакрытьДоговор";
		НоваяКнопка.Вид       			 		= ВидКнопкиФормы.ОбычнаяКнопка;
		НоваяКнопка.Видимость  					= (пкМодификацияСервер.ПроверитьВхождениеПользователяВГруппупкЗакрытиеДоговоровИзФормыРарус() И Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком);	
		НоваяКнопка.Доступность					= (Объект.Статус <> Перечисления.СтатусыДоговоровКонтрагентов.Закрыт);	
		
		Элементы.Переместить(Элементы.пкСтатусИКнопкаЗакрыть,Элементы.ГруппаШапкаПраво,Элементы.Статус);
		Элементы.Переместить(Элементы.Статус,Элементы.пкСтатусИКнопкаЗакрыть,Элементы.пкЗакрытьДоговор);
		Элементы.Переместить(Элементы.пкЗакрытьДоговор,Элементы.пкСтатусИКнопкаЗакрыть);
	//-- Рарус Лимаренко 24.05.2018 Заявка №11918 2.4

КонецПроцедуры    

Процедура ПриСозданииНаСервере_Справочник_Должности_ФормаЭлемента(Форма, Отказ, СтандартнаяОбработка)
    
    Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    НовоеПоле			  = Элементы.Вставить("пкНаименованиеАнгл", Тип("ПолеФормы"), , Элементы.ГруппаОсновныеСвойства);
    НовоеПоле.Вид		  = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкНаименованиеАнгл";
    
КонецПроцедуры    

Процедура ПриСозданииНаСервере_Справочник_Номенклатура_ФормаЭлемента(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
	           
//Владимир Подрезов Доставка п.2.2.2. 12.07.2016
	//ДобавляемыеРеквизиты = Новый Массив;
	//ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("пкСписокСпособыПогрузкиРазгрузкиТехники", Новый ОписаниеТипов("ДинамическийСписок")));
	//
	//Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	//
	//Форма.пкСписокСпособыПогрузкиРазгрузкиТехники.ОсновнаяТаблица = "РегистрСведений.пкДоступностьСпособовПогрузкиИРазгрузкиТехники";
	//
	//ЭлементОтбора                = Форма.пкСписокСпособыПогрузкиРазгрузкиТехники.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект"); 
	//ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
	//ЭлементОтбора.Использование  = Истина;
	//
	//НоваяГруппа             = Элементы.Добавить("пкГруппаЭтоТехника", Тип("ГруппаФормы"), Элементы.ГруппаНаименованиеИКоманды); 
	//НоваяГруппа.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
	//НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	//НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	//НоваяГруппа.ОтображатьЗаголовок = Ложь; 
	//
	//НовоеПоле             = Элементы.Добавить("пкЭтоТехника", Тип("ПолеФормы"), Элементы.пкГруппаЭтоТехника);
	//НовоеПоле.Вид         = ВидПоляФормы.ПолеФлажка;
	//НовоеПоле.ПутьКДанным = "Объект.пкЭтоТехника";
	//НовоеПоле.Заголовок   = "Техника";
	//НовоеПоле.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
	//
	//НоваяГруппа           = Элементы.Добавить("пкСтраницаПараметрыТехники", Тип("ГруппаФормы"), Элементы.СтраницыКарточкаНоменклатуры); 
	//НоваяГруппа.Вид       = ВидГруппыФормы.Страница;
	//НоваяГруппа.Заголовок = "Параметры техники";
	//НоваяГруппа.Видимость = Объект.пкЭтоТехника;	
	//
	ДобавляемыеРеквизиты = Новый Массив;
    ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("пкСписокСпособыПогрузкиРазгрузкиТехники", Новый ОписаниеТипов("ТаблицаЗначений")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Доступен", Новый ОписаниеТипов("Булево"), "пкСписокСпособыПогрузкиРазгрузкиТехники", "Доступен", ложь));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("СпособПогрузкиРазгрузки", Новый ОписаниеТипов("СправочникСсылка.пкСпособыПогрузкиРазгрузкиТехники"), "пкСписокСпособыПогрузкиРазгрузкиТехники", "Способ", ложь));
	//++ Рарус IA 03.10.2016
    ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("пкАналогиНоменклатуры", Новый ОписаниеТипов("ТаблицаЗначений")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Аналог", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"), "пкАналогиНоменклатуры", "Аналог", ложь));
	//-- Рарус IA 03.10.2016
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
    
    Если Объект.пкЭтоТехника Тогда
        Элементы.ИспользоватьУпаковки.Видимость     = Истина;
        Элементы.ГруппаОбщийНаборУпаковок.Видимость = Истина;
    КонецЕсли;    
	
	ЗаполнитьКоллекциюСпособовДляОбъекта(Форма["пкСписокСпособыПогрузкиРазгрузкиТехники"], Объект.Ссылка);
	
//Владимир Подрезов Доставка п.2.2.2. 12.07.2016 Конец

	НоваяГруппа             = Элементы.Добавить("пкГруппаЭтоТехника", Тип("ГруппаФормы"), Элементы.ГруппаНаименованиеИКоманды); 
	НоваяГруппа.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НоваяГруппа.ОтображатьЗаголовок = Ложь; 
	
    НовоеПоле             = Элементы.Добавить("пкЭтоТехника", Тип("ПолеФормы"), Элементы.пкГруппаЭтоТехника);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеФлажка;
    НовоеПоле.ПутьКДанным = "Объект.пкЭтоТехника";
	НовоеПоле.Заголовок   = "Техника";
    НовоеПоле.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
	
	//+++pavelk
	НовоеПоле             = Элементы.Добавить("пкЭтоСервиснаяТехника", Тип("ПолеФормы"), Элементы.пкГруппаЭтоТехника);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеФлажка;
    НовоеПоле.ПутьКДанным = "Объект.пкЭтоСервиснаяТехника";
	НовоеПоле.Заголовок   = "Сервисная техника";
	//---pavelk

	НоваяГруппа           = Элементы.Добавить("пкСтраницаПараметрыТехники", Тип("ГруппаФормы"), Элементы.СтраницыКарточкаНоменклатуры); 
	НоваяГруппа.Вид       = ВидГруппыФормы.Страница;
	НоваяГруппа.Заголовок = "Параметры техники";
	НоваяГруппа.Видимость = Объект.пкЭтоТехника;	
	
	НоваяГруппа             = Элементы.Добавить("пкГруппаОбщиеПараметры", Тип("ГруппаФормы"), Элементы.пкСтраницаПараметрыТехники); 
	НоваяГруппа.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	НоваяГруппа.Заголовок   = "Общие параметры";
    
    НоваяГруппа             = Элементы.Добавить("пкГруппаИсточникПитанияТипТехники", Тип("ГруппаФормы"), Элементы.пкГруппаОбщиеПараметры); 
	НоваяГруппа.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НоваяГруппа.ОтображатьЗаголовок = Ложь; 	
	
	НовоеПоле             = Элементы.Добавить("пкТипТехники", Тип("ПолеФормы"), Элементы.пкГруппаИсточникПитанияТипТехники);
	НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.пкТипТехники";
	НовоеПоле.РастягиватьПоГоризонтали = Ложь;	
	НовоеПоле.Ширина      = 29;	
    
	НовоеПоле             = Элементы.Добавить("пкКатегорияТехники", Тип("ПолеФормы"), Элементы.пкГруппаИсточникПитанияТипТехники);
	НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.пкКатегорияТехники";
	НовоеПоле.РастягиватьПоГоризонтали = Ложь;	
	НовоеПоле.Ширина      = 29;	
    
    НовоеПоле             = Элементы.Добавить("пкИсточникПитания", Тип("ПолеФормы"), Элементы.пкГруппаИсточникПитанияТипТехники);
	НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.пкИсточникПитания";
	НовоеПоле.РастягиватьПоГоризонтали = Ложь;	
	НовоеПоле.Ширина      = 29;	
	
	НоваяГруппа             = Элементы.Добавить("пкГруппаВесГабариты", Тип("ГруппаФормы"), Элементы.пкГруппаОбщиеПараметры); 
	НоваяГруппа.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НоваяГруппа.ОтображатьЗаголовок = Ложь; 	
	
    НовоеПоле             = Элементы.Добавить("пкВес", Тип("ПолеФормы"), Элементы.пкГруппаВесГабариты);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкВес";
	НовоеПоле.Ширина      = 20;	
	
    НовоеПоле             = Элементы.Добавить("пкГрузоподъемность", Тип("ПолеФормы"), Элементы.пкГруппаВесГабариты);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкГрузоподъемность";
	НовоеПоле.Ширина      = 20;	
		
	НоваяГруппа             = Элементы.Добавить("пкГруппаТранспортныеГабаритыПлатформа", Тип("ГруппаФормы"), Элементы.пкСтраницаПараметрыТехники); 
	НоваяГруппа.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	НоваяГруппа.ОтображатьЗаголовок = Ложь; 	
	
	НоваяГруппа             = Элементы.Добавить("пкГруппаТранспортныеГабариты", Тип("ГруппаФормы"), Элементы.пкГруппаТранспортныеГабаритыПлатформа); 
	НоваяГруппа.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НоваяГруппа.Заголовок   = "Транспортные габариты";
	
    НовоеПоле             = Элементы.Добавить("пкТранспортнаяДлина", Тип("ПолеФормы"), Элементы.пкГруппаТранспортныеГабариты);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкТранспортнаяДлина";
	НовоеПоле.Заголовок   = "Длина, м";	
	НовоеПоле.Ширина      = 25;	
	
    НовоеПоле             = Элементы.Добавить("пкТранспортнаяШирина", Тип("ПолеФормы"), Элементы.пкГруппаТранспортныеГабариты);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкТранспортнаяШирина";
	НовоеПоле.Заголовок   = "Ширина, м";	
	НовоеПоле.Ширина      = 25;	
	
	НовоеПоле             = Элементы.Добавить("пкТранспортнаяВысота", Тип("ПолеФормы"), Элементы.пкГруппаТранспортныеГабариты);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкТранспортнаяВысота";
	НовоеПоле.Заголовок   = "Высота, м";	
	НовоеПоле.Ширина      = 25;	
	
	НоваяГруппа             = Элементы.Добавить("пкГруппаПлатформа", Тип("ГруппаФормы"), Элементы.пкГруппаТранспортныеГабаритыПлатформа); 
	НоваяГруппа.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НоваяГруппа.Заголовок   = "Платформа";
	
    НовоеПоле             = Элементы.Добавить("пкДлинаПлатформы", Тип("ПолеФормы"), Элементы.пкГруппаПлатформа);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкДлинаПлатформы";
	НовоеПоле.Заголовок   = "Длина, м";	
	НовоеПоле.Ширина      = 25;	
	
    НовоеПоле             = Элементы.Добавить("пкШиринаПлатформы", Тип("ПолеФормы"), Элементы.пкГруппаПлатформа);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкШиринаПлатформы";
	НовоеПоле.Заголовок   = "Ширина, м";	
	НовоеПоле.Ширина      = 25;
	
	НовоеПоле             = Элементы.Добавить("пкВысотаПодъемаПлатформы", Тип("ПолеФормы"), Элементы.пкГруппаПлатформа);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкВысотаПодъемаПлатформы";
	НовоеПоле.Заголовок   = "Высота подъема, м";
	НовоеПоле.Ширина      = 25;	
	
	НовоеПоле             = Элементы.Добавить("пкВыдвижнаяСекция", Тип("ПолеФормы"), Элементы.пкГруппаПлатформа);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкВыдвижнаяСекция";
	НовоеПоле.Заголовок   = "Выдвижная секция, м";
	НовоеПоле.Ширина      = 25;	
	
//rarus+ saveld 12.10.2016
	НоваяГруппа             = Элементы.Добавить("пкГруппаРасходТопливаПлатформа", Тип("ГруппаФормы"), Элементы.пкСтраницаПараметрыТехники); 
	НоваяГруппа.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	НоваяГруппа.ОтображатьЗаголовок = Ложь; 	
//rarus- saveld 12.10.2016
	
//rarus+ saveld 12.10.2016
	//НоваяГруппа             = Элементы.Добавить("пкГруппаРасходТоплива", Тип("ГруппаФормы"), Элементы.пкСтраницаПараметрыТехники); 
	НоваяГруппа             = Элементы.Добавить("пкГруппаРасходТоплива", Тип("ГруппаФормы"), Элементы.пкГруппаРасходТопливаПлатформа); 
//rarus- saveld 12.10.2016
	НоваяГруппа.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НоваяГруппа.Заголовок   = "Расход топлива";
	
    НовоеПоле             = Элементы.Добавить("пкРасходТопливаПодНагрузкой", Тип("ПолеФормы"), Элементы.пкГруппаРасходТоплива);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкРасходТопливаПодНагрузкой";
	НовоеПоле.Заголовок   = "Под нагрузкой";	
	НовоеПоле.Ширина      = 22;	
	
    НовоеПоле             = Элементы.Добавить("пкРасходТопливаХолостойХод", Тип("ПолеФормы"), Элементы.пкГруппаРасходТоплива);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкРасходТопливаХолостойХод";
	НовоеПоле.Заголовок   = "Холостой ход";	
	НовоеПоле.Ширина      = 22;
	
//rarus+ saveld 12.10.2016
    НоваяГруппа             = Элементы.Добавить("пкГруппаПроведениеТО", Тип("ГруппаФормы"), Элементы.пкГруппаРасходТопливаПлатформа); 
	НоваяГруппа.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НоваяГруппа.Заголовок = "Проведение ТО"; 	
	
    НовоеПоле             = Элементы.Добавить("пкКоличествоМоточасовМеждуТО", Тип("ПолеФормы"), Элементы.пкГруппаПроведениеТО);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкКоличествоМоточасовМеждуТО";
	НовоеПоле.Заголовок   = "Моточасов между ТО";	
	НовоеПоле.Ширина      = 22;	
	НовоеПоле.КнопкаВыбора = Истина;	
	
    НовоеПоле             = Элементы.Добавить("пкКоличествоДнейМеждуТО", Тип("ПолеФормы"), Элементы.пкГруппаПроведениеТО);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкКоличествоДнейМеждуТО";
	НовоеПоле.Заголовок   = "Дней между ТО";	
	НовоеПоле.Ширина      = 22;	
	НовоеПоле.КнопкаВыбора = Истина;	
//rarus- saveld 12.10.2016
	
//Владимир Подрезов Доставка п.2.2.2. 12.07.2016
//Закомментировано, переделано и убрано в начало
//Было так:
	//НовыйДинамическийСписок  = Элементы.Добавить("пкСписокСпособыПогрузкиРазгрузкиТехники", Тип("ТаблицаФормы"), Элементы.пкСтраницаПараметрыТехники);
	//НовыйДинамическийСписок.ПутьКДанным = "пкСписокСпособыПогрузкиРазгрузкиТехники";
	//    
	//НоваяКолонкаДинамическогоСписка             = Элементы.Добавить("пкСписокСпособыПогрузкиРазгрузкиТехникиСпособПогрузкиРазгрузки", Тип("ПолеФормы"), Элементы.пкСписокСпособыПогрузкиРазгрузкиТехники);
	//НоваяКолонкаДинамическогоСписка.Вид         = ВидПоляФормы.ПолеВвода;   
	//НоваяКолонкаДинамическогоСписка.ПутьКДанным = "пкСписокСпособыПогрузкиРазгрузкиТехники.СпособПогрузкиРазгрузки";
	//
	//НоваяКолонкаДинамическогоСписка             = Элементы.Добавить("пкСписокСпособыПогрузкиРазгрузкиТехникиДоступен", Тип("ПолеФормы"), Элементы.пкСписокСпособыПогрузкиРазгрузкиТехники);
	//НоваяКолонкаДинамическогоСписка.Вид         = ВидПоляФормы.ПолеВвода;   
	//НоваяКолонкаДинамическогоСписка.ПутьКДанным = "пкСписокСпособыПогрузкиРазгрузкиТехники.Доступен";
	
	НовыйСписок  = Элементы.Добавить("пкСписокСпособыПогрузкиРазгрузкиТехники", Тип("ТаблицаФормы"), Элементы.пкСтраницаПараметрыТехники);
    НовыйСписок.ПутьКДанным 			= "пкСписокСпособыПогрузкиРазгрузкиТехники";
	НовыйСписок.ИзменятьПорядокСтрок 	= Ложь;
	НовыйСписок.ИзменятьСоставСтрок 	= Ложь;
	НовыйСписок.Заголовок				= НСтр("ru='Способы погрузки/разгрузки техники'");
	НовыйСписок.ПоложениеЗаголовка		= ПоложениеЗаголовкаЭлементаФормы.Верх;
	НовыйСписок.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	
	НоваяКолонкаДинамическогоСписка             = Элементы.Добавить("пкСписокСпособыПогрузкиРазгрузкиТехникиДоступен", Тип("ПолеФормы"), Элементы.пкСписокСпособыПогрузкиРазгрузкиТехники);
    НоваяКолонкаДинамическогоСписка.Вид         = ВидПоляФормы.ПолеФлажка;   
    НоваяКолонкаДинамическогоСписка.ПутьКДанным = "пкСписокСпособыПогрузкиРазгрузкиТехники.Доступен";
	
	НоваяКолонкаДинамическогоСписка         	    = Элементы.Добавить("пкСписокСпособыПогрузкиРазгрузкиТехникиСпособПогрузкиРазгрузки", Тип("ПолеФормы"), Элементы.пкСписокСпособыПогрузкиРазгрузкиТехники);
    НоваяКолонкаДинамическогоСписка.Вид 	        = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаДинамическогоСписка.ПутьКДанным		= "пкСписокСпособыПогрузкиРазгрузкиТехники.СпособПогрузкиРазгрузки";
    НоваяКолонкаДинамическогоСписка.ТолькоПросмотр	= Истина;
//Владимир Подрезов Доставка п.2.2.2. 12.07.2016 КОНЕЦ
    	
	//НовоеПоле             = Элементы.Добавить("пкЭтоТехника", Тип("ПолеФормы"), Элементы.ГруппаРеквизитовПраво);
	//НовоеПоле.Вид         = ВидПоляФормы.ПолеФлажка;
	//НовоеПоле.ПутьКДанным = "Объект.пкЭтоТехника";
	
	//++ PSA IA 03.10.2016
	Группа_пкАналогиИЯчейки = Элементы.Добавить("пкАналогиИЯчейки", Тип("ГруппаФормы"), Элементы.СтраницыКарточкаНоменклатуры); 
	Группа_пкАналогиИЯчейки.Вид       = ВидГруппыФормы.Страница;
	Группа_пкАналогиИЯчейки.Заголовок = "Аналоги и ячейки";
	//НоваяГруппа.Видимость = не Объект.пкЭтоТехника;
	
	НовыйСписок  = Элементы.Добавить("пкСкладскиеЯчейки", Тип("ТаблицаФормы"), Группа_пкАналогиИЯчейки);
    НовыйСписок.ПутьКДанным 			= "Объект.пкСкладскиеЯчейки";
	НовыйСписок.Заголовок				= НСтр("ru='Ячейки'");
	НовыйСписок.ПоложениеЗаголовка		= ПоложениеЗаголовкаЭлементаФормы.Верх;
	НовыйСписок.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Авто;
	
	НоваяКолонкаДинамическогоСписка             = Элементы.Добавить("Ячейка", Тип("ПолеФормы"), Элементы.пкСкладскиеЯчейки);
	НоваяКолонкаДинамическогоСписка.Вид         = ВидПоляФормы.ПолеВвода;   
	НоваяКолонкаДинамическогоСписка.ПутьКДанным = "Объект.пкСкладскиеЯчейки.Ячейка";
	
	НовыйСписок  = Элементы.Добавить("пкАналогиНоменклатуры", Тип("ТаблицаФормы"), Группа_пкАналогиИЯчейки);
	НовыйСписок.ПутьКДанным 			= "пкАналогиНоменклатуры";
	//НовыйСписок.ИзменятьПорядокСтрок 	= Ложь;
	//НовыйСписок.ИзменятьСоставСтрок 	= Ложь;
	НовыйСписок.Заголовок				= НСтр("ru='Аналоги номенклатуры'");
	НовыйСписок.ПоложениеЗаголовка		= ПоложениеЗаголовкаЭлементаФормы.Верх;
	//НовыйСписок.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	
	НоваяКолонкаДинамическогоСписка             = Элементы.Добавить("Аналог", Тип("ПолеФормы"), Элементы.пкАналогиНоменклатуры);
	НоваяКолонкаДинамическогоСписка.Вид         = ВидПоляФормы.ПолеВвода;   
	НоваяКолонкаДинамическогоСписка.ПутьКДанным = "пкАналогиНоменклатуры.Аналог";
    НоваяКолонкаДинамическогоСписка.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗапросАналогов = Новый Запрос;
		ЗапросАналогов.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	пкАналогиНоменклатуры1.Номенклатура КАК Аналог
		|ИЗ
		|	РегистрСведений.пкАналогиНоменклатуры КАК пкАналогиНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.пкАналогиНоменклатуры КАК пкАналогиНоменклатуры1
		|		ПО (пкАналогиНоменклатуры.Номенклатура = &Ссылка)
		|			И пкАналогиНоменклатуры.ГруппаАналогов = пкАналогиНоменклатуры1.ГруппаАналогов
		|			И (пкАналогиНоменклатуры1.Номенклатура <> &Ссылка)";
		ЗапросАналогов.УстановитьПараметр("Ссылка", Объект.Ссылка);
		ЗапросАналоговРезультат=ЗапросАналогов.Выполнить();
		Если не ЗапросАналоговРезультат.Пустой() Тогда
			таб_пкАналогиНоменклатуры = ЗапросАналоговРезультат.Выгрузить();
			ЗначениеВДанныеФормы(таб_пкАналогиНоменклатуры,Форма.пкАналогиНоменклатуры); 
		КонецЕсли; 
	КонецЕсли; 
	//-- PSA IA 03.10.2016
	
//rarus+ saveld 05.10.2016
	НовоеПоле             = Элементы.Добавить("пкТипПульта", Тип("ПолеФормы"), Элементы.пкГруппаВесГабариты);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкТипПульта";
	НовоеПоле.Заголовок   = "Тип пульта";
	НовоеПоле.Ширина      = 20;	
	НовоеПоле.РастягиватьПоГоризонтали = Ложь;
//rarus- saveld 05.10.2016

//Рарус Владимир Подрезов 09.06.2017
    НовоеПоле             = Элементы.Добавить("пкНеУчитыватьПроизводителя", Тип("ПолеФормы"), Элементы.пкГруппаЭтоТехника);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеФлажка;
    НовоеПоле.ПутьКДанным = "Объект.пкНеУчитыватьПроизводителя";
//Рарус Владимир Подрезов КОНЕЦ

КонецПроцедуры	

Процедура ПриСозданииНаСервере_Справочник_ОбъектыЭксплуатации_ФормаВыбора(Форма, Отказ, СтандартнаяОбработка)
	
    Параметры = Форма.Параметры;
    
    Если Параметры.Свойство("Отбор") Тогда
        Если Параметры.Отбор.Свойство("пкЭтоТехника") Тогда
            ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
    		    Форма.Список, "пкЭтоТехника", Параметры.Отбор.пкЭтоТехника, , , Истина);
        КонецЕсли;    
//Рарус Владимир Подрезов 31.08.2017
        Если Параметры.Отбор.Свойство("пкЗапретАренды") Тогда
            ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
    		    Форма.Список, "пкЗапретАренды", Параметры.Отбор.пкЗапретАренды, , , Истина);
        КонецЕсли;    
//Рарус Владимир Подрезов Конец
	КонецЕсли; 
    
    Если Параметры.Свойство("пкМодель") Тогда
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
            Форма.Список, "пкМодель", Параметры.пкМодель, , , Истина);
    КонецЕсли;    
    
КонецПроцедуры    

Процедура ПриСозданииНаСервере_Справочник_Склады_ФормаЭлемента(Форма, Отказ, СтандартнаяОбработка)
    
    Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    Элементы.ГруппаШапкаЛево.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
    
    НовоеПоле             = Элементы.Вставить("пкКод", Тип("ПолеФормы"), Элементы.ГруппаШапкаЛево, Элементы.Наименование);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкКод";    
    
КонецПроцедуры    

Процедура ПриСозданииНаСервере_Справочник_ОбъектыЭксплуатации_ФормаЭлемента(Форма, Отказ, СтандартнаяОбработка)
	
    Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
	
    ДобавляемыеРеквизиты = Новый Массив;
    ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("пкПодразделение",          Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия")));
    ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("пкДокументПринятияКУчету", Новый ОписаниеТипов("ДокументСсылка.пкОперацииСТехникой")));
    ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("пкУчетВРостехнадзореРегистрационныйНомер", Новый ОписаниеТипов("Строка")));
    ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("пкПостановкаСнятиеНаУчетВРостехнадзоре", Новый ОписаниеТипов("ДокументСсылка.пкПостановкаСнятиеНаУчетВРостехнадзоре")));
	
	ТипыМестонахождения = Новый Массив;
	ТипыМестонахождения.Добавить(Тип("СправочникСсылка.Склады"));
	ТипыМестонахождения.Добавить(Тип("СправочникСсылка.СМ_ОбъектыСтроительства"));
	
    ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("пкМестонахождения",  Новый ОписаниеТипов(ТипыМестонахождения)));
    ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("пкСтатус",           Новый ОписаниеТипов("ПеречислениеСсылка.пкСтатусыТехники")));
    ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("пкМоточасы",         Новый ОписаниеТипов("Число")));

    ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("пкИмеющиесяДефекты", Новый ОписаниеТипов("ДинамическийСписок")));
    
    ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("пкИсторияРемонтов",      Новый ОписаниеТипов("ДеревоЗначений")));
    
    СписокТипов = Новый СписокЗначений();
    СписокТипов.Добавить("ДокументСсылка.пкЗаказНаряд");
    СписокТипов.Добавить("СправочникСсылка.Номенклатура");
    
    ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ЗаказНарядНоменклатура", Новый ОписаниеТипов(СписокТипов), "пкИсторияРемонтов"));
    ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Количество",             Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)), "пкИсторияРемонтов"));
    ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ЕдиницаИзмерения",       Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"), "пкИсторияРемонтов"));
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Статус = пкУправлениеТехникойСервер.ПолучитьСтатусТехники(Объект.Ссылка);
    
	Форма.пкСтатус = Статус;
    
    Местонахождения = пкУправлениеТехникойСервер.ПолучитьЗначениеПоказателяСостоянияТехники(Объект.Ссылка, ПланыВидовХарактеристик.пкПоказателиСостоянияТехники.Местонахождения);
    
    Форма.пкМестонахождения = Местонахождения;
    
    Подразделение = пкУправлениеТехникойСервер.ПолучитьЗначениеПоказателяСостоянияТехники(Объект.Ссылка, ПланыВидовХарактеристик.пкПоказателиСостоянияТехники.Подразделение);
    
    Форма.пкПодразделение = Подразделение;
    
    Моточасы = пкУправлениеТехникойСервер.ПолучитьКоличествоМоточасовТехники(Объект.Ссылка);
    
    Форма.пкМоточасы = Моточасы;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   пкСтатусыТехники.Регистратор КАК ПринятиеКУчету
    |ИЗ
    |   РегистрСведений.пкСтатусыТехники КАК пкСтатусыТехники
    |ГДЕ
    |   пкСтатусыТехники.Техника = &Техника
    |   И пкСтатусыТехники.Регистратор ССЫЛКА Документ.пкОперацииСТехникой
    |           И пкСтатусыТехники.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийСТехникой.Поступление)";
    
    Запрос.УстановитьПараметр("Техника", Объект.Ссылка);
    
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Если Выборка.Следующий() Тогда
        Форма.пкДокументПринятияКУчету = Выборка.ПринятиеКУчету;
    КонецЕсли;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    пкПостановкаНаУчетВРостехнадзореСрезПоследних.Регистратор КАК Регистратор,
    |    пкПостановкаНаУчетВРостехнадзореСрезПоследних.Организация,
    |    пкПостановкаНаУчетВРостехнадзореСрезПоследних.РегистрационныйНомер
    |ИЗ
    |    РегистрСведений.пкПостановкаНаУчетВРостехнадзоре.СрезПоследних(, ОсновноеСредство = &ОсновноеСредство) КАК пкПостановкаНаУчетВРостехнадзореСрезПоследних
    |ГДЕ
    |    пкПостановкаНаУчетВРостехнадзореСрезПоследних.ПостановкаНаУчет = ИСТИНА
    |
    |УПОРЯДОЧИТЬ ПО
    |    пкПостановкаНаУчетВРостехнадзореСрезПоследних.Период УБЫВ";
    
    Запрос.УстановитьПараметр("ОсновноеСредство", Объект.Ссылка);
    
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Если Выборка.Следующий() Тогда
        Форма.пкПостановкаСнятиеНаУчетВРостехнадзоре = Выборка.Регистратор;
        Форма.пкУчетВРостехнадзореРегистрационныйНомер = Выборка.РегистрационныйНомер;
    КонецЕсли;
    
    Элементы.Код.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    Элементы.ЗаводскойНомер.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    Элементы.ДатаВыпуска.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    
	НоваяГруппа             = Элементы.Вставить("пкГруппаКодЭтоТехника", Тип("ГруппаФормы"), Элементы.ГруппаРеквизитыПраво, Элементы.Родитель); 
	НоваяГруппа.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	НоваяГруппа.ОтображатьЗаголовок = Ложь; 
        
    Элементы.Переместить(Элементы.Код, Элементы.пкГруппаКодЭтоТехника);
    	
    НовоеПоле             = Элементы.Добавить("пкЭтоТехника", Тип("ПолеФормы"), Элементы.пкГруппаКодЭтоТехника);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеФлажка;
    НовоеПоле.ПутьКДанным = "Объект.пкЭтоТехника";
	НовоеПоле.Заголовок   = "Техника";
    НовоеПоле.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду");
	
//Рарус Владимир Подрезов 31.08.2017
    НовоеПоле             = Элементы.Добавить("пкЗапретАренды", Тип("ПолеФормы"), Элементы.пкГруппаКодЭтоТехника);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеФлажка;
    НовоеПоле.ПутьКДанным = "Объект.пкЗапретАренды";
	НовоеПоле.Заголовок   = "Запрет Аренды";
    НовоеПоле.Видимость   = Объект.пкЭтоТехника;
//Рарус Владимир Подрезов Конец
	
//+++pavelk
	НовоеПоле             = Элементы.Добавить("пкЭтоСервиснаяТехника", Тип("ПолеФормы"), Элементы.пкГруппаКодЭтоТехника);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеФлажка;
    НовоеПоле.ПутьКДанным = "Объект.пкЭтоСервиснаяТехника";
	НовоеПоле.Заголовок   = "Сервисная техника";
//---pavelk
    
    НовоеПоле             = Элементы.Добавить("пкМодель", Тип("ПолеФормы"), Элементы.ГруппаОсновныеРеквизиты);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкМодель";
    НовоеПоле.Ширина      =  24;
    НовоеПоле.Видимость   = Объект.пкЭтоТехника;
    НовоеПоле.РастягиватьПоГоризонтали = Ложь;
    НовоеПоле.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
        
//Рарус Владимир Подрезов 11.11.2016
	НовоеПоле             = Элементы.Вставить("пкТранспортноеСредство", Тип("ПолеФормы"), Элементы.ГруппаОсновныеРеквизиты, Элементы.пкМодель);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкТранспортноеСредство";
    НовоеПоле.Ширина      =  24;
    НовоеПоле.РастягиватьПоГоризонтали = Ложь;
    НовоеПоле.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
//Рарус Владимир Подрезов Конец
        
	НоваяГруппа             = Элементы.Вставить("пкГруппаТекущееСостояние", Тип("ГруппаФормы"), Элементы.ГруппаОсновныеРеквизиты); 
	НоваяГруппа.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НоваяГруппа.Заголовок   = "Текущее состояние";
    НоваяГруппа.Видимость   = Объект.пкЭтоТехника;
	
    НовоеПоле                = Элементы.Добавить("пкПодразделение", Тип("ПолеФормы"), Элементы.пкГруппаТекущееСостояние);
    НовоеПоле.Вид            = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным    = "пкПодразделение";
	НовоеПоле.ТолькоПросмотр = Истина;	
	НовоеПоле.Заголовок      = "Подразделение";
	
    НовоеПоле                = Элементы.Добавить("пкМестонахождения", Тип("ПолеФормы"), Элементы.пкГруппаТекущееСостояние);
    НовоеПоле.Вид            = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным    = "пкМестонахождения";
	НовоеПоле.ТолькоПросмотр = Истина;	
	НовоеПоле.Заголовок      = "Местонахождения";
    НовоеПоле.КнопкаВыбора   = Ложь;
    НовоеПоле.КнопкаОткрытия = Истина;
	
    НовоеПоле                = Элементы.Добавить("пкСтатус", Тип("ПолеФормы"), Элементы.пкГруппаТекущееСостояние);
    НовоеПоле.Вид            = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным    = "пкСтатус";
	НовоеПоле.ТолькоПросмотр = Истина;	
	НовоеПоле.Заголовок      = "Статус";
    
    НовоеПоле                = Элементы.Добавить("пкМоточасы", Тип("ПолеФормы"), Элементы.пкГруппаТекущееСостояние);
    НовоеПоле.Вид            = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным    = "пкМоточасы";
	НовоеПоле.ТолькоПросмотр = Истина;	
	НовоеПоле.Заголовок      = "Моточасы";
    
    НоваяКоманда             = Форма.Команды.Добавить("пкПринятьКУчету");
    
    Если ЗначениеЗаполнено(Форма.пкДокументПринятияКУчету) Тогда
        НоваяКоманда.Заголовок = Форма.пкДокументПринятияКУчету;
    Иначе
	    НоваяКоманда.Заголовок = "Оформить поступление";
    КонецЕсли;   
    
    НоваяКоманда.Действие    = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
    
    НоваяКнопка            = Элементы.Добавить("пкПринятьКУчету", Тип("КнопкаФормы"), Элементы.пкГруппаТекущееСостояние); 
    НоваяКнопка.ИмяКоманды = "пкПринятьКУчету";
    НоваяКнопка.Вид        = ВидКнопкиФормы.Гиперссылка;
    
    НоваяГруппа           = Элементы.Вставить("пкСтраницаСервис", Тип("ГруппаФормы"), Элементы.СтраницыРеквизитов, Элементы.СтраницаОписание); 
	НоваяГруппа.Вид       = ВидГруппыФормы.Страница;
	НоваяГруппа.Заголовок = "Сервис";
    НоваяГруппа.Видимость = Объект.пкЭтоТехника;
    
    НоваяТаблица                = Элементы.Добавить("пкИсторияРемонтов", Тип("ТаблицаФормы"), Элементы.пкСтраницаСервис);
	НоваяТаблица.ПутьКДанным    = "пкИсторияРемонтов";
    НоваяТаблица.Отображение    = ОтображениеТаблицы.Дерево;
    НоваяТаблица.ТолькоПросмотр = Истина;
    НоваяТаблица.ПоложениеКоманднойПанели   = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
    НоваяТаблица.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
    	    
	НоваяКолонкаТаблицы             = Элементы.Добавить("пкИсторияРемонтовЗаказНарядНоменклатура", Тип("ПолеФормы"), Элементы.пкИсторияРемонтов);
	НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
	НоваяКолонкаТаблицы.ПутьКДанным = "пкИсторияРемонтов.ЗаказНарядНоменклатура";
    НоваяКолонкаТаблицы.Заголовок   = "Заказ-наряд / Работа / Материал";
	
	НоваяКолонкаТаблицы             = Элементы.Добавить("пкИсторияРемонтовКоличество", Тип("ПолеФормы"), Элементы.пкИсторияРемонтов);
	НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
	НоваяКолонкаТаблицы.ПутьКДанным = "пкИсторияРемонтов.Количество";
    
	НоваяКолонкаТаблицы             = Элементы.Добавить("пкИсторияРемонтовЕдиницаИзмерения", Тип("ПолеФормы"), Элементы.пкИсторияРемонтов);
	НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
	НоваяКолонкаТаблицы.ПутьКДанным = "пкИсторияРемонтов.ЕдиницаИзмерения";
    НоваяКолонкаТаблицы.Заголовок   = "Ед. изм.";
        
    Запрос = Новый Запрос;
    Запрос.Текст = 
    
    "ВЫБРАТЬ
    |   пкЗаказНарядРаботы.Ссылка КАК ЗаказНаряд,
    |   пкЗаказНарядРаботы.Номенклатура,
    |   пкЗаказНарядРаботы.Количество,
    |   пкЗаказНарядРаботы.ЕдиницаИзмерения
    |ИЗ
    |   Документ.пкЗаказНаряд.Работы КАК пкЗаказНарядРаботы
    |ГДЕ
    |   пкЗаказНарядРаботы.Ссылка.Техника = &Техника
    |   И пкЗаказНарядРаботы.Ссылка.Проведен
    |   И (пкЗаказНарядРаботы.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.пкСтатусыЗаказНарядов.Выполнен)
    |           ИЛИ пкЗаказНарядРаботы.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.пкСтатусыЗаказНарядов.Закрыт))
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |   пкЗаказНарядМатериалы.Ссылка,
    |   пкЗаказНарядМатериалы.Номенклатура,
    |   пкЗаказНарядМатериалы.КоличествоУпаковок,
    |   пкЗаказНарядМатериалы.Упаковка
    |ИЗ
    |   Документ.пкЗаказНаряд.Материалы КАК пкЗаказНарядМатериалы
    |ГДЕ
    |   пкЗаказНарядМатериалы.Ссылка.Техника = &Техника
    |   И пкЗаказНарядМатериалы.Ссылка.Проведен
    |   И (пкЗаказНарядМатериалы.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.пкСтатусыЗаказНарядов.Выполнен)
    |           ИЛИ пкЗаказНарядМатериалы.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.пкСтатусыЗаказНарядов.Закрыт))
    |ИТОГИ ПО
    |   ЗаказНаряд";
    
    Запрос.УстановитьПараметр("Техника", Объект.Ссылка);
    
    Результат = Запрос.Выполнить();
    ВыборкаЗаказНаряды = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
    
    ИсторияРемонтов = Форма.пкИсторияРемонтов.ПолучитьЭлементы();
    
    Пока ВыборкаЗаказНаряды.Следующий() Цикл
        НоваяСтрокаЗаказНаряд = ИсторияРемонтов.Добавить();
        НоваяСтрокаЗаказНаряд.ЗаказНарядНоменклатура = ВыборкаЗаказНаряды.ЗаказНаряд;
        
        Выборка = ВыборкаЗаказНаряды.Выбрать();
        
        Пока Выборка.Следующий() Цикл
            ЗаказНаряды = НоваяСтрокаЗаказНаряд.ПолучитьЭлементы(); 
            
            НоваяСтрока = ЗаказНаряды.Добавить();
            НоваяСтрока.ЗаказНарядНоменклатура = Выборка.Номенклатура;
            НоваяСтрока.Количество             = Выборка.Количество;
            НоваяСтрока.ЕдиницаИзмерения       = Выборка.ЕдиницаИзмерения;
        КонецЦикла;    
    КонецЦикла;
        
	НоваяГруппа           = Элементы.Вставить("пкСтраницаИмеющиесяДефекты", Тип("ГруппаФормы"), Элементы.СтраницыРеквизитов, Элементы.СтраницаОписание); 
	НоваяГруппа.Вид       = ВидГруппыФормы.Страница;
	НоваяГруппа.Заголовок = "Имеющиеся дефекты";
    НоваяГруппа.Видимость = Объект.пкЭтоТехника;
    
    Форма.пкИмеющиесяДефекты.ОсновнаяТаблица = "РегистрСведений.пкДефектыТехники";
    
    ЭлементОтбора                = Форма.пкИмеющиесяДефекты.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Техника"); 
    ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
    ЭлементОтбора.Использование  = Истина;
    
    НовыйДинамическийСписок  = Элементы.Добавить("пкСписокИмеющиесяДефекты", Тип("ТаблицаФормы"), Элементы.пкСтраницаИмеющиесяДефекты);
	НовыйДинамическийСписок.ПутьКДанным = "пкИмеющиесяДефекты";
    НовыйДинамическийСписок.КоманднаяПанель.РазрешитьИзменениеСостава = Ложь;
    	    
	НоваяКолонкаДинамическогоСписка             = Элементы.Добавить("пкСписокИмеющиесяДефектыПериод", Тип("ПолеФормы"), Элементы.пкСписокИмеющиесяДефекты);
	НоваяКолонкаДинамическогоСписка.Вид         = ВидПоляФормы.ПолеВвода;   
	НоваяКолонкаДинамическогоСписка.ПутьКДанным = "пкИмеющиесяДефекты.Период";
	
	НоваяКолонкаДинамическогоСписка             = Элементы.Добавить("пкСписокИмеющиесяДефектыДефект", Тип("ПолеФормы"), Элементы.пкСписокИмеющиесяДефекты);
	НоваяКолонкаДинамическогоСписка.Вид         = ВидПоляФормы.ПолеВвода;   
	НоваяКолонкаДинамическогоСписка.ПутьКДанным = "пкИмеющиесяДефекты.Дефект";
    
    НоваяГруппа             = Элементы.Добавить("пкГруппаУчетВРостехнадзоре", Тип("ГруппаФормы"),Элементы.СтраницаОсновные); 
    НоваяГруппа.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
    НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
    НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
    НоваяГруппа.Заголовок   = "Учет в Ростехнадзоре";
    НоваяГруппа.ОтображатьЗаголовок = Истина;
        
    НовоеПоле             = Элементы.Добавить("пкУчетВРостехнадзореРегистрационныйНомер", Тип("ПолеФормы"), Элементы.пкГруппаУчетВРостехнадзоре);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеФлажка;
    НовоеПоле.ПутьКДанным = "пкУчетВРостехнадзореРегистрационныйНомер";
    НовоеПоле.Заголовок   = "Регистрационный номер";
    НовоеПоле.ТолькоПросмотр   = Истина;
    
    НовоеПоле             = Элементы.Добавить("пкПостановкаСнятиеНаУчетВРостехнадзоре", Тип("ПолеФормы"), Элементы.пкГруппаУчетВРостехнадзоре);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "пкПостановкаСнятиеНаУчетВРостехнадзоре";
    НовоеПоле.Заголовок   = "Постановка на учет";
    НовоеПоле.ТолькоПросмотр   = Истина;
    
    Элементы.Расположение.Видимость                    = НЕ Объект.пкЭтоТехника;
	Элементы.Модель.Видимость                          = НЕ Объект.пкЭтоТехника;
	Элементы.ЭксплуатирующееПодразделение.Видимость    = НЕ Объект.пкЭтоТехника;
	Элементы.РемонтирующееПодразделение.Видимость      = НЕ Объект.пкЭтоТехника;
	Элементы.СтраницаПараметрыУчетаНаработок.Видимость = НЕ Объект.пкЭтоТехника;
	Элементы.СтраницаРабочиеЦентры.Видимость           = НЕ Объект.пкЭтоТехника;
    Элементы.Изготовитель.Видимость                    = НЕ Объект.пкЭтоТехника; 
    Элементы.НомерПаспорта.Видимость                   = НЕ Объект.пкЭтоТехника; 
    
    Если Объект.пкЭтоТехника Тогда
        Элементы.Код.Заголовок = "Инв. номер";
    КонецЕсли; 
    
    Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.пкИсторияРемонтовЗаказНарядНоменклатура.Имя);
    
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.пкИсторияРемонтовКоличество.Имя);
    
    ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.пкИсторияРемонтовЕдиницаИзмерения.Имя);

	ОтборЭлемента                = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ЗаказНарядНоменклатура.ВидНоменклатуры.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Товар;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Синий);
	
КонецПроцедуры	

Процедура ПриСозданииНаСервере_Справочник_ОбъектыЭксплуатации_ФормаГруппа(Форма, Отказ, СтандартнаяОбработка)
	
    Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
	
    НовоеПоле             = Элементы.Добавить("пкЭтоТехника", Тип("ПолеФормы"));
    НовоеПоле.Вид         = ВидПоляФормы.ПолеФлажка;
    НовоеПоле.ПутьКДанным = "Объект.пкЭтоТехника";
	НовоеПоле.Заголовок   = "Техника";
    //НовоеПоле.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
//Рарус Владимир Подрезов 31.08.2017
    НовоеПоле             = Элементы.Добавить("пкЗапретАренды", Тип("ПолеФормы"), Элементы.пкГруппаКодЭтоТехника);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеФлажка;
    НовоеПоле.ПутьКДанным = "Объект.пкЗапретАренды";
	НовоеПоле.Заголовок   = "Запрет Аренды";
    НовоеПоле.Видимость   = Объект.пкЭтоТехника;
//Рарус Владимир Подрезов Конец

КонецПроцедуры	

Процедура ПриСозданииНаСервере_Справочник_СМ_ОбъектыСтроительства_ФормаВыбора(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы = Форма.Элементы;
    
    Элементы.Список.Отображение = ОтображениеТаблицы.Список;
    
    Элементы.Заказчик.Видимость = Ложь;
    	
	НоваяКолонкаДинамическогоСписка         	= Элементы.Добавить("пкПодразделение", Тип("ПолеФормы"), Элементы.Список);
    НоваяКолонкаДинамическогоСписка.Вид 	    = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаДинамическогоСписка.ПутьКДанным = "Список.пкПодразделение";
    
	НоваяКолонкаДинамическогоСписка         	= Элементы.Добавить("пкАдресДоставки", Тип("ПолеФормы"), Элементы.Список);
    НоваяКолонкаДинамическогоСписка.Вид 	    = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаДинамическогоСписка.ПутьКДанным = "Список.пкАдресДоставки";
	
	НоваяКолонкаДинамическогоСписка         	= Элементы.Добавить("пкПолноеНаименование", Тип("ПолеФормы"), Элементы.Список);
    НоваяКолонкаДинамическогоСписка.Вид 	    = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаДинамическогоСписка.ПутьКДанным = "Список.пкПолноеНаименование";
	
КонецПроцедуры    

Процедура ПриСозданииНаСервере_Справочник_СМ_ОбъектыСтроительства_ФормаСписка(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы = Форма.Элементы;
    
    Элементы.Заказчик.Видимость = Ложь;
    	
	НоваяКолонкаДинамическогоСписка         	= Элементы.Добавить("пкПодразделение", Тип("ПолеФормы"), Элементы.Список);
    НоваяКолонкаДинамическогоСписка.Вид 	    = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаДинамическогоСписка.ПутьКДанным = "Список.пкПодразделение";
    
	НоваяКолонкаДинамическогоСписка         	= Элементы.Добавить("пкАдресДоставки", Тип("ПолеФормы"), Элементы.Список);
    НоваяКолонкаДинамическогоСписка.Вид 	    = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаДинамическогоСписка.ПутьКДанным = "Список.пкАдресДоставки";
	
	НоваяКолонкаДинамическогоСписка         	= Элементы.Добавить("пкПолноеНаименование", Тип("ПолеФормы"), Элементы.Список);
    НоваяКолонкаДинамическогоСписка.Вид 	    = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаДинамическогоСписка.ПутьКДанным = "Список.пкПолноеНаименование";
	
КонецПроцедуры    

Процедура ПриСозданииНаСервере_Справочник_СМ_ОбъектыСтроительства_ФормаЭлемента(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
//Владимир Подрезов Доставка п.2.2.3. 12.07.2016
//    НовоеПоле             = Элементы.Добавить("пкОбъектСтроительства", Тип("ПолеФормы"));
//    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
//    НовоеПоле.ПутьКДанным = "Объект.пкАдресДоставки";
    НовоеПоле				= Элементы.Добавить("пкАдресДоставки", Тип("ПолеФормы"));
    НовоеПоле.Вид			= ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным	= "Объект.пкАдресДоставки";
    НовоеПоле.КнопкаВыпадающегоСписка = Истина;
    НовоеПоле.КнопкаВыбора            = Истина;
    НовоеПоле.УстановитьДействие("ПриИзменении",    "АдресДоставкиПриИзменении"); 
    НовоеПоле.УстановитьДействие("Очистка",         "АдресДоставкиОчистка"); 
    НовоеПоле.УстановитьДействие("НачалоВыбора",    "АдресДоставкиНачалоВыбора"); 
    НовоеПоле.УстановитьДействие("ОбработкаВыбора", "АдресДоставкиОбработкаВыбора"); 
    	
    НовоеПоле				= Элементы.Добавить("пкПодразделение", Тип("ПолеФормы"));
    НовоеПоле.Вид			= ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным	= "Объект.пкПодразделение";
    
    НовоеПоле				= Элементы.Добавить("пкОтветственный", Тип("ПолеФормы"));
    НовоеПоле.Вид			= ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным	= "Объект.пкОтветственный";
    
    Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
        Объект.пкОтветственный = Пользователи.ТекущийПользователь();    
    КонецЕсли;
    
    Элементы.Заказчик.Видимость = Ложь;
    	
    ДобавляемыеРеквизиты = Новый Массив;
    ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("пкСписокСпособыПогрузкиРазгрузкиТехники", Новый ОписаниеТипов("ТаблицаЗначений")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Доступен", Новый ОписаниеТипов("Булево"), "пкСписокСпособыПогрузкиРазгрузкиТехники", "Доступен", ложь));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("СпособПогрузкиРазгрузки", Новый ОписаниеТипов("СправочникСсылка.пкСпособыПогрузкиРазгрузкиТехники"), "пкСписокСпособыПогрузкиРазгрузкиТехники", "Способ", ложь));
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ЗаполнитьКоллекциюСпособовДляОбъекта(Форма["пкСписокСпособыПогрузкиРазгрузкиТехники"], Объект.Ссылка);
	
	НоваяГруппа             = Элементы.Добавить("пкСтраницаПараметрыТехники", Тип("ГруппаФормы")); 
	НоваяГруппа.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НоваяГруппа.ОтображатьЗаголовок = Ложь; 
	
	НовыйСписок  = Элементы.Добавить("пкСписокСпособыПогрузкиРазгрузкиТехники", Тип("ТаблицаФормы"), Элементы.пкСтраницаПараметрыТехники);
    НовыйСписок.ПутьКДанным 			= "пкСписокСпособыПогрузкиРазгрузкиТехники";
	НовыйСписок.ИзменятьПорядокСтрок 	= Ложь;
	НовыйСписок.ИзменятьСоставСтрок 	= Ложь;
	НовыйСписок.Заголовок				= НСтр("ru='Способы погрузки/разгрузки техники'");
	НовыйСписок.ПоложениеЗаголовка		= ПоложениеЗаголовкаЭлементаФормы.Верх;
	НовыйСписок.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	
	НоваяКолонкаДинамическогоСписка             = Элементы.Добавить("пкСписокСпособыПогрузкиРазгрузкиТехникиДоступен", Тип("ПолеФормы"), Элементы.пкСписокСпособыПогрузкиРазгрузкиТехники);
    НоваяКолонкаДинамическогоСписка.Вид         = ВидПоляФормы.ПолеФлажка;   
    НоваяКолонкаДинамическогоСписка.ПутьКДанным = "пкСписокСпособыПогрузкиРазгрузкиТехники.Доступен";
	
	НоваяКолонкаДинамическогоСписка         	    = Элементы.Добавить("пкСписокСпособыПогрузкиРазгрузкиТехникиСпособПогрузкиРазгрузки", Тип("ПолеФормы"), Элементы.пкСписокСпособыПогрузкиРазгрузкиТехники);
    НоваяКолонкаДинамическогоСписка.Вид 	        = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаДинамическогоСписка.ПутьКДанным		= "пкСписокСпособыПогрузкиРазгрузкиТехники.СпособПогрузкиРазгрузки";
    НоваяКолонкаДинамическогоСписка.ТолькоПросмотр	= Истина;
	
    НовоеПоле				= Элементы.Добавить("пкПолноеНаименование", Тип("ПолеФормы"));
    НовоеПоле.Вид			= ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным	= "Объект.пкПолноеНаименование";
//Владимир Подрезов Конец

КонецПроцедуры    

//Рарус Владимир Подрезов 07.12.2016
Процедура ПриСозданииНаСервере_Справочник_СтруктураПредприятия_ФормаСписка(Форма, Отказ, СтандартнаяОбработка)
    
    Элементы = Форма.Элементы;
    
	НоваяКолонкаДинамическогоСписка         	    = Элементы.Добавить("пкАдресБазы", Тип("ПолеФормы"), Элементы.Список);
    НоваяКолонкаДинамическогоСписка.Вид 	        = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаДинамическогоСписка.ПутьКДанным		= "Список.пкАдресБазы";
	
	НоваяКолонкаДинамическогоСписка         	    = Элементы.Добавить("пкУпрощеннаяДоставка", Тип("ПолеФормы"), Элементы.Список);
    НоваяКолонкаДинамическогоСписка.Вид 	        = ВидПоляФормы.ПолеФлажка;   
    НоваяКолонкаДинамическогоСписка.ПутьКДанным		= "Список.пкУпрощеннаяДоставка";
	
//Рарус Владимир Подрезов 15.05.2017
	НоваяКолонкаДинамическогоСписка         	    = Элементы.Добавить("пкОтражатьРасходыПоЛогистике", Тип("ПолеФормы"), Элементы.Список);
    НоваяКолонкаДинамическогоСписка.Вид 	        = ВидПоляФормы.ПолеФлажка;   
    НоваяКолонкаДинамическогоСписка.ПутьКДанным		= "Список.пкОтражатьРасходыПоЛогистике";
//Рарус Владимир Подрезов Конец
    
КонецПроцедуры 
//Рарус Владимир Подрезов Конец

Процедура ПриСозданииНаСервере_Справочник_СтруктураПредприятия_ФормаЭлемента(Форма, Отказ, СтандартнаяОбработка)
    
    Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    НовоеПоле			  = Элементы.Вставить("пкСкладТехники", Тип("ПолеФормы"));
    НовоеПоле.Вид		  = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкСкладТехники";
    
    НовоеПоле			  = Элементы.Вставить("пкНаименованиеАнгл", Тип("ПолеФормы"), Элементы.ГруппаРеквизиты, Элементы.Родитель);
    НовоеПоле.Вид		  = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкНаименованиеАнгл";
    
//Рарус Владимир Подрезов 07.12.2016
    НовоеПоле			  = Элементы.Вставить("пкАдресБазы", Тип("ПолеФормы"));
    НовоеПоле.Вид		  = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкАдресБазы";
    
    НовоеПоле			  = Элементы.Вставить("пкУпрощеннаяДоставка", Тип("ПолеФормы"));
    НовоеПоле.Вид		  = ВидПоляФормы.ПолеФлажка;
    НовоеПоле.ПутьКДанным = "Объект.пкУпрощеннаяДоставка";
    
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 22.01.2017
    НовоеПоле			  = Элементы.Вставить("пкВестиНумерациюПутевыхЛистов", Тип("ПолеФормы"));
    НовоеПоле.Вид		  = ВидПоляФормы.ПолеФлажка;
    НовоеПоле.ПутьКДанным = "Объект.пкВестиНумерациюПутевыхЛистов";
//Рарус Владимир Подрезов Конец

    НовоеПоле			  = Элементы.Добавить("пкТребуетсяПодтверждениеОтгрузки", Тип("ПолеФормы"));
    НовоеПоле.Вид		  = ВидПоляФормы.ПолеФлажка;
    НовоеПоле.ПутьКДанным = "Объект.пкТребуетсяПодтверждениеОтгрузки";

//Рарус Владимир Подрезов 15.05.2017
    НовоеПоле			  = Элементы.Вставить("пкОтражатьРасходыПоЛогистике", Тип("ПолеФормы"));
    НовоеПоле.Вид		  = ВидПоляФормы.ПолеФлажка;
    НовоеПоле.ПутьКДанным = "Объект.пкОтражатьРасходыПоЛогистике";
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 24.08.2017
    НовоеПоле			  = Элементы.Вставить("пкАвтоматическоеСозданиеЗаказНарядовПослеАренды", Тип("ПолеФормы"));
    НовоеПоле.Вид		  = ВидПоляФормы.ПолеФлажка;
    НовоеПоле.ПутьКДанным = "Объект.пкАвтоматическоеСозданиеЗаказНарядовПослеАренды";
//Рарус Владимир Подрезов Конец
    
//Рарус Владимир Подрезов 07.12.2016
    НоваяГруппа                  = Элементы.Вставить("пкГруппаОтправкаСостояния", Тип("ГруппаФормы")); 
	НоваяГруппа.Вид              = ВидГруппыФормы.ОбычнаяГруппа;
    НоваяГруппа.Группировка      = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
    
    НовоеПоле             = Элементы.Вставить("пкОтправлятьСостояниеТехники", Тип("ПолеФормы"), Элементы.пкГруппаОтправкаСостояния);
    НовоеПоле.Вид		  = ВидПоляФормы.ПолеФлажка;
    НовоеПоле.ПутьКДанным = "Объект.пкОтправлятьСостояниеТехники";
	
	НовоеПоле             = Элементы.Вставить("пкАдресаОтправкиСостоянияТехники", Тип("ПолеФормы"), Элементы.пкГруппаОтправкаСостояния);
    НовоеПоле.Вид		  = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкАдресаОтправкиСостоянияТехники";
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 14.08.2017
	Если (Не РольДоступна("АдминистраторСистемы"))
		И (Не РольДоступна("ПолныеПрава"))
	Тогда
    	Форма.ТолькоПросмотр = Истина;
    КонецЕсли;
//Рарус Владимир Подрезов Конец

КонецПроцедуры 

Процедура ПриСозданииНаСервере_Справочник_ФизическиеЛица_ФормаЭлементаУП(Форма, Отказ, СтандартнаяОбработка)
    
    Элементы	= Форма.Элементы;
    Объект		= Форма.Объект;
	
    НовоеПоле             = Элементы.Вставить("пкПодразделение", Тип("ПолеФормы"), , Элементы.ГруппаДоступа);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкПодразделение";
    
    НовоеПоле			  = Элементы.Вставить("пкФИОАнгл", Тип("ПолеФормы"), , Элементы.ГруппаПолИДатаРождения);
    НовоеПоле.Вид		  = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкФИОАнгл";
    
КонецПроцедуры    

Процедура ПриСозданииНаСервере_Справочник_ХарактеристикиНоменклатуры_ФормаЭлемента(Форма, Отказ, СтандартнаяОбработка)
    
    Элементы	= Форма.Элементы;
    Объект		= Форма.Объект;
    
    НовоеПоле             = Элементы.Добавить("пкНеПроводитьПоБУ", Тип("ПолеФормы"), Элементы.ГруппаНаименование);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеФлажка;
    НовоеПоле.ПутьКДанным = "Объект.пкНеПроводитьПоБУ";
    
КонецПроцедуры

Процедура ПриСозданииНаСервере_Справочник_ОбщиеВидыРемонтов_ФормаЭлемента(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
	НовоеПоле				= Элементы.Добавить("пкТипРемонта", Тип("ПолеФормы"));
    НовоеПоле.Вид			= ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным	= "Объект.пкТипРемонта";
	
КонецПроцедуры

Процедура ПриСозданииНаСервере_Документ_ВыбытиеДенежныхДокументова_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка)
    
    Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    НоваяКолонкаТаблицы             = Элементы.Вставить("пкДенежныеДокументыТипДенежногоДокумента", Тип("ПолеФормы"), Элементы.ДенежныеДокументы, Элементы.ДенежныеДокументыВалюта);
    НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаТаблицы.ПутьКДанным = "Объект.ДенежныеДокументы.пкТипДенежногоДокумента";
    
КонецПроцедуры   

Процедура ПриСозданииНаСервере_Документ_Встреча_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка)
    
    Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    НовоеПоле             = Элементы.Вставить("пкПартнер", Тип("ПолеФормы"), Элементы.ГруппаЛевая, Элементы.СтраницыОписаниеУчастникиДополнительно);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкПартнер";
    НовоеПоле.Заголовок   = "Клиент";
    
    НовоеПоле             = Элементы.Вставить("пкОбъектСтроительства", Тип("ПолеФормы"), Элементы.ГруппаЛевая, Элементы.СтраницыОписаниеУчастникиДополнительно);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкОбъектСтроительства";
    
    //НоваяГруппа           = Элементы.Вставить("пкСтраницаОбъектыСтроительства", Тип("ГруппаФормы"), Элементы.СтраницыОписаниеУчастникиДополнительно, Элементы.СтраницаУчастники); 
    //НоваяГруппа.Вид       = ВидГруппыФормы.Страница;
    //НоваяГруппа.Заголовок = "Объекты строительства";
    //
    //НоваяТаблица             = Элементы.Добавить("пкОбъектыСтроительства", Тип("ТаблицаФормы"), Элементы.пкСтраницаОбъектыСтроительства);
    //НоваяТаблица.ПутьКДанным = "Объект.пкСтраницаОбъектыСтроительства";

    //НоваяКолонка             = Элементы.Добавить("пкОбъектыСтроительстваОбъектСтроительства", Тип("ПолеФормы"), Элементы.пкОбъектыСтроительства);
    //НоваяКолонка.Вид         = ВидПоляФормы.ПолеВвода;
    //НоваяКолонка.ПутьКДанным = "Объект.пкОбъектыСтроительства.ОбъектСтроительства";
    
КонецПроцедуры    

Процедура ПриСозданииНаСервере_Документ_ТелефонныйЗвонок_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка)
    
    Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    //НовоеПоле             = Элементы.Вставить("пкПартнер", Тип("ПолеФормы"), Элементы.ГруппаЛевая, Элементы.СтраницыОписаниеУчастникиДополнительно);
    //НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    //НовоеПоле.ПутьКДанным = "Объект.пкПартнер";
    //НовоеПоле.Заголовок   = "Клиент";
    
    НовоеПоле             = Элементы.Вставить("пкОбъектСтроительства", Тип("ПолеФормы"), Элементы.ГруппаЛевая, Элементы.СтраницыОписаниеУчастникиДополнительно);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкОбъектСтроительства";
    
КонецПроцедуры    
    
Процедура ПриСозданииНаСервере_Документ_ЗаказКлиента_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    ЭтоАренда = Объект.Договор.пкВидДоговора = ПредопределенноеЗначение("Перечисление.пкВидыДоговоров.АрендаТехники");
    
    //
    //ДобавляемыеРеквизиты = Новый Массив;
    //ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("пкТоварыТехника", Новый ОписаниеТипов("СправочникСсылка.ОбъектыЭксплуатации"), "Товары"));
    //
    //Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
        	
    //НоваяКоманда             = Форма.Команды.Добавить("пкРедактированиеПозицииЗаказа");
    //НоваяКоманда.Заголовок   = "Позиция заказа";
    //НоваяКоманда.Действие    = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
    //
    //НоваяКнопка            = Элементы.Добавить("пкРедактированиеПозицииЗаказа", Тип("КнопкаФормы"), Элементы.Товары.КоманднаяПанель); 
    //НоваяКнопка.ИмяКоманды = "пкРедактированиеПозицииЗаказа";
    
    Элементы.Переместить(Элементы.ДокументОснование,          Форма, Элементы.ГруппаСтраницы);
    Элементы.Переместить(Элементы.ГруппаШапка,                Форма, Элементы.ГруппаСтраницы);
    Элементы.Переместить(Элементы.ГруппаЭтапыОплатыРасчеты,   Форма, Элементы.ГруппаСтраницы);
    Элементы.Переместить(Элементы.Комментарий,                Форма, Элементы.ГруппаПодвал);
    Элементы.Переместить(Элементы.ГруппаПодпискаНаОповещения, Форма, Элементы.ГруппаПодвал);
    
    Элементы.Комментарий.Ширина = 0;
    Элементы.Комментарий.Высота = 1;
    Элементы.Комментарий.РастягиватьПоГоризонтали = Истина;
    
    Элементы.ТоварыХарактеристика.Видимость = НЕ ЭтоАренда;
    Элементы.ТоварыСодержание.Видимость     = НЕ ЭтоАренда;
    Элементы.СтраницаДоставка.Видимость     = НЕ ЭтоАренда;
    
    Элементы.Подразделение.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    
//Рарус Владимир Подрезов 15.08.2017
//Закомментировано, т.к. теряется возможность реализации по заказу товаров, нужно устанавливать статус отгрузить
	//Элементы.Статус.ТолькоПросмотр         = Истина;
//Рарус Владимир Подрезов Конец
    Элементы.ТоварыСуммаНДС.ТолькоПросмотр = Ложь;
    Элементы.ТоварыСуммаНДС.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    
    Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
        Объект.Склад    = Объект.Подразделение.пкСкладТехники;
        Объект.Менеджер = Объект.Договор.Менеджер;
        Объект.ЦенаВключаетНДС = Ложь;  
        Объект.Статус   = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке;
        
        Дата = пкОбщегоНазначенияСервер.ПолучитьРабочуюДатуПользователя(Пользователи.ТекущийПользователь());
        
        Если Дата <> Неопределено Тогда
//Рарус Владимир Подрезов 24.10.2017 6528
//			Объект.Дата         = Дата; 
//			Объект.ДатаОтгрузки = Дата;
			Объект.Дата			= КонецДня(Дата);    
			Объект.ДатаОтгрузки	= КонецДня(Дата);
//Рарус Владимир Подрезов Конец
        КонецЕсли;    
    КонецЕсли;    
    
    //НоваяКнопка            = Элементы.Добавить("пкПереместитьВверх", Тип("КнопкаФормы"), Элементы.ТоварыКоманднаяПанель); 
    //НоваяКнопка.ИмяКоманды = "ТоварыПереместитьВверх"; 
    //НоваяКнопка.ТолькоВоВсехДействиях = Ложь;
    //
    //НоваяКнопка            = Элементы.Добавить("пкПереместитьВниз", Тип("КнопкаФормы"), Элементы.ТоварыКоманднаяПанель); 
    //НоваяКнопка.ИмяКоманды = "ТоварыПереместитьВниз"; 
    //НоваяКнопка.ТолькоВоВсехДействиях = Ложь;
    
    //НовоеПоле             = Элементы.Добавить("пкЭтоСчетНаОплатуАренды", Тип("ПолеФормы"), Элементы.ГруппаСтатусПриоритет);
    //НовоеПоле.Вид         = ВидПоляФормы.ПолеФлажка;
    //НовоеПоле.ПутьКДанным = "Объект.пкЭтоСчетНаОплатуАренды";
    //НовоеПоле.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
            
    НовоеПоле             = Элементы.Добавить("пкОбъектСтроительства", Тип("ПолеФормы"), Элементы.ГруппаШапкаЛево);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкОбъектСтроительства";
    НовоеПоле.РастягиватьПоГоризонтали = Ложь;
    НовоеПоле.Ширина             = 28;
    НовоеПоле.ВысотаЗаголовка    = 1;
    НовоеПоле.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
    НовоеПоле.Заголовок          = "Объект";
    НовоеПоле.Видимость          = ЭтоАренда;
    НовоеПоле.КнопкаВыбора            = Истина;
    НовоеПоле.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
    НовоеПоле.ИсторияВыбораПриВводе   = ИсторияВыбораПриВводе.НеИспользовать;
    НовоеПоле.УстановитьДействие("НачалоВыбора", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    
    НоваяКоманда            = Форма.Команды.Добавить("пкЗаполнитьПоЗаявке");
    НоваяКоманда.Заголовок  = "Заполнить по заявке";
    НоваяКоманда.Действие   = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
    
    НоваяКнопка            = Элементы.Добавить("пкЗаполнитьПоЗаявке", Тип("КнопкаФормы"), Элементы.ТоварыГруппаЗаполнить); 
    НоваяКнопка.ИмяКоманды = "пкЗаполнитьПоЗаявке"; 
    
    НоваяКоманда            = Форма.Команды.Добавить("пкДобавитьПоЗаявке");
    НоваяКоманда.Заголовок  = "Добавить по заявке";
    НоваяКоманда.Действие   = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
    
    НоваяКнопка            = Элементы.Добавить("пкДобавитьПоЗаявке", Тип("КнопкаФормы"), Элементы.ТоварыГруппаЗаполнить); 
    НоваяКнопка.ИмяКоманды = "пкДобавитьПоЗаявке"; 
    
    НоваяКоманда            = Форма.Команды.Добавить("пкЗаполнитьПоЗаявкеОстатки");
    НоваяКоманда.Заголовок  = "Заполнить по заявке (остатки)";
    НоваяКоманда.Действие   = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
    
    НоваяКнопка            = Элементы.Добавить("пкЗаполнитьПоЗаявкеОстатки", Тип("КнопкаФормы"), Элементы.ТоварыГруппаЗаполнить); 
    НоваяКнопка.ИмяКоманды = "пкЗаполнитьПоЗаявкеОстатки"; 
    
    НоваяКоманда            = Форма.Команды.Добавить("пкДобавитьПоЗаявкеОстатки");
    НоваяКоманда.Заголовок  = "Добавить по заявке (остатки)";
    НоваяКоманда.Действие   = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
    
    НоваяКнопка            = Элементы.Добавить("пкДобавитьПоЗаявкеОстатки", Тип("КнопкаФормы"), Элементы.ТоварыГруппаЗаполнить); 
    НоваяКнопка.ИмяКоманды = "пкДобавитьПоЗаявкеОстатки"; 
    
    НоваяГруппа                  = Элементы.Вставить("пкТоварыГруппаАренда", Тип("ГруппаФормы"), Элементы.Товары, Элементы.ТоварыКоличествоУпаковок); 
	НоваяГруппа.Вид              = ВидГруппыФормы.ГруппаКолонок;
    НоваяГруппа.ОтображатьВШапке = Истина;
    НоваяГруппа.Группировка      = ГруппировкаКолонок.Горизонтальная;
    НоваяГруппа.Заголовок        = "Аренда";
    НоваяГруппа.Видимость        = ЭтоАренда;
    
    НоваяКолонкаТаблицы             = Элементы.Добавить("пкТоварыДатаНачалаАренды", Тип("ПолеФормы"), Элементы.пкТоварыГруппаАренда);
    НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаТаблицы.ПутьКДанным = "Объект.Товары.пкДатаНачалаАренды";
    НоваяКолонкаТаблицы.Заголовок   = "Дата начала";
    НоваяКолонкаТаблицы.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    
    НоваяКолонкаТаблицы             = Элементы.Добавить("пкТоварыДатаОкончанияАренды", Тип("ПолеФормы"), Элементы.пкТоварыГруппаАренда);
    НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаТаблицы.ПутьКДанным = "Объект.Товары.пкДатаОкончанияАренды";
    НоваяКолонкаТаблицы.Заголовок   = "Дата окончания";
    НоваяКолонкаТаблицы.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    
    НоваяКолонкаТаблицы             = Элементы.Вставить("пкТоварыТехника", Тип("ПолеФормы"), Элементы.Товары, Элементы.ТоварыХарактеристика);
    НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаТаблицы.ПутьКДанным = "Объект.Товары.пкТехника";
    НоваяКолонкаТаблицы.Видимость   = ЭтоАренда;
    НоваяКолонкаТаблицы.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    
    НоваяКолонкаТаблицы             = Элементы.Вставить("пкТоварыПримечаниеДляПечати", Тип("ПолеФормы"), Элементы.Товары, Элементы.ТоварыХарактеристика);
    НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаТаблицы.ПутьКДанным = "Объект.Товары.пкПримечаниеДляПечати";
    
    НоваяКолонкаТаблицы             = Элементы.Вставить("пкТоварыЗаявкаНаАрендуТехники", Тип("ПолеФормы"), Элементы.Товары, Элементы.ТоварыСклад);
    НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаТаблицы.ПутьКДанным = "Объект.Товары.пкЗаявкаНаАрендуТехники";
	//НоваяКолонкаТаблицы.Ширина		= 30;
    НоваяКолонкаТаблицы.Видимость   = ЭтоАренда;
    
    НоваяКолонкаТаблицы             = Элементы.Вставить("пкТоварыВидТарифа", Тип("ПолеФормы"), Элементы.Товары, Элементы.ТоварыВидЦены);
    НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаТаблицы.ПутьКДанным = "Объект.Товары.пкВидТарифа";
    НоваяКолонкаТаблицы.Видимость   = ЭтоАренда;
    НоваяКолонкаТаблицы.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    
	НовоеПоле             = Элементы.Вставить("пкПримечание", Тип("ПолеФормы"), Элементы.ГруппаДополнительно, Элементы.ДополнительнаяИнформация);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкПримечание";
    НовоеПоле.МногострочныйРежим = Истина;
    НовоеПоле.Ширина             = 71;
    НовоеПоле.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
    НовоеПоле.РастягиватьПоГоризонтали = Ложь;
        
    НоваяТаблица             = Элементы.Вставить("пкКорректировкиТоваров", Тип("ТаблицаФормы"), Элементы.ГруппаТовары, Элементы.ГруппаТоварыПодвал);
    НоваяТаблица.ПутьКДанным = "Объект.пкКорректировкиТоваров";
    НоваяТаблица.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
    
    НоваяКолонкаТаблицы             = Элементы.Добавить("пкКорректировкиТоваровНоменклатура", Тип("ПолеФормы"), Элементы.пкКорректировкиТоваров);
    НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаТаблицы.ПутьКДанным = "Объект.пкКорректировкиТоваров.Номенклатура";
    НоваяКолонкаТаблицы.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    
    НоваяКолонкаТаблицы             = Элементы.Добавить("пкКорректировкиТоваровпкТехника", Тип("ПолеФормы"), Элементы.пкКорректировкиТоваров);
    НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаТаблицы.ПутьКДанным = "Объект.пкКорректировкиТоваров.пкТехника";
    НоваяКолонкаТаблицы.Видимость   = ЭтоАренда;
    НоваяКолонкаТаблицы.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    
    НоваяКолонкаТаблицы             = Элементы.Добавить("пкКорректировкиТоваровпкпкПримечаниеДляПечати", Тип("ПолеФормы"), Элементы.пкКорректировкиТоваров);
    НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаТаблицы.ПутьКДанным = "Объект.пкКорректировкиТоваров.пкПримечаниеДляПечати";
            
    НоваяГруппа                  = Элементы.Добавить("пкКорректировкиТоваровГруппаАренда", Тип("ГруппаФормы"), Элементы.пкКорректировкиТоваров); 
	НоваяГруппа.Вид              = ВидГруппыФормы.ГруппаКолонок;
    НоваяГруппа.ОтображатьВШапке = Истина;
    НоваяГруппа.Группировка      = ГруппировкаКолонок.Горизонтальная;
    НоваяГруппа.Заголовок        = "Аренда";
    НоваяГруппа.Видимость        = ЭтоАренда;
    
    НоваяКолонкаТаблицы             = Элементы.Добавить("пкКорректировкиТоваровпкДатаНачалаАренды", Тип("ПолеФормы"), Элементы.пкКорректировкиТоваровГруппаАренда);
    НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаТаблицы.ПутьКДанным = "Объект.пкКорректировкиТоваров.пкДатаНачалаАренды";
    НоваяКолонкаТаблицы.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    
    НоваяКолонкаТаблицы             = Элементы.Добавить("пкКорректировкиТоваровпкДатаОкончанияАренды", Тип("ПолеФормы"), Элементы.пкКорректировкиТоваровГруппаАренда);
    НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаТаблицы.ПутьКДанным = "Объект.пкКорректировкиТоваров.пкДатаОкончанияАренды";
    НоваяКолонкаТаблицы.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
        
    НоваяКолонкаТаблицы             = Элементы.Добавить("пкКорректировкиТоваровКоличествоУпаковок", Тип("ПолеФормы"), Элементы.пкКорректировкиТоваров);
    НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаТаблицы.ПутьКДанным = "Объект.пкКорректировкиТоваров.КоличествоУпаковок";
    НоваяКолонкаТаблицы.Заголовок   = "Количество";
    НоваяКолонкаТаблицы.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду");
        
    НоваяКолонкаТаблицы             = Элементы.Добавить("пкКорректировкиТоваровКоличество", Тип("ПолеФормы"), Элементы.пкКорректировкиТоваров);
    НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаТаблицы.ПутьКДанным = "Объект.пкКорректировкиТоваров.Количество";
    НоваяКолонкаТаблицы.Видимость   = Ложь;
    
    НоваяГруппа                  = Элементы.Добавить("пкКорректировкиУпаковкаЕдиницаИзмерения", Тип("ГруппаФормы"), Элементы.пкКорректировкиТоваров); 
	НоваяГруппа.Вид              = ВидГруппыФормы.ГруппаКолонок;
    НоваяГруппа.Группировка      = ГруппировкаКолонок.ВЯчейке;
    
    НоваяКолонкаТаблицы             = Элементы.Добавить("пкКорректировкиТоваровУпаковка", Тип("ПолеФормы"), Элементы.пкКорректировкиУпаковкаЕдиницаИзмерения);
    НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаТаблицы.ПутьКДанным = "Объект.пкКорректировкиТоваров.Упаковка";
    НоваяКолонкаТаблицы.ОтображатьВШапке = Ложь;
    НоваяКолонкаТаблицы.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    
    НоваяКолонкаТаблицы             = Элементы.Добавить("пкКорректировкиТоваровНоменклатураЕдиницаИзмерения", Тип("ПолеФормы"), Элементы.пкКорректировкиУпаковкаЕдиницаИзмерения);
    НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеНадписи;   
    НоваяКолонкаТаблицы.ПутьКДанным = "Объект.пкКорректировкиТоваров.Номенклатура.ЕдиницаИзмерения";
    НоваяКолонкаТаблицы.Заголовок   = "Ед. изм.";
    НоваяКолонкаТаблицы.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
    
    НоваяКолонкаТаблицы             = Элементы.Добавить("пкКорректировкиТоваровпкВидТарифа", Тип("ПолеФормы"), Элементы.пкКорректировкиТоваров);
    НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаТаблицы.ПутьКДанным = "Объект.пкКорректировкиТоваров.пкВидТарифа";
    НоваяКолонкаТаблицы.Видимость   = ЭтоАренда;
    НоваяКолонкаТаблицы.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    
    НоваяКолонкаТаблицы             = Элементы.Добавить("пкКорректировкиТоваровЦена", Тип("ПолеФормы"), Элементы.пкКорректировкиТоваров);
    НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаТаблицы.ПутьКДанным = "Объект.пкКорректировкиТоваров.Цена";
    НоваяКолонкаТаблицы.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    
    НоваяКолонкаТаблицы             = Элементы.Добавить("пкКорректировкиТоваровСумма", Тип("ПолеФормы"), Элементы.пкКорректировкиТоваров);
    НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаТаблицы.ПутьКДанным = "Объект.пкКорректировкиТоваров.Сумма";
    НоваяКолонкаТаблицы.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    
    НоваяКолонкаТаблицы             = Элементы.Добавить("пкКорректировкиТоваровСтавкаНДС", Тип("ПолеФормы"), Элементы.пкКорректировкиТоваров);
    НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаТаблицы.ПутьКДанным = "Объект.пкКорректировкиТоваров.СтавкаНДС";
    НоваяКолонкаТаблицы.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    
    НоваяКолонкаТаблицы             = Элементы.Добавить("пкКорректировкиТоваровСуммаНДС", Тип("ПолеФормы"), Элементы.пкКорректировкиТоваров);
    НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаТаблицы.ПутьКДанным = "Объект.пкКорректировкиТоваров.СуммаНДС";
//Рарус Владимир Подрезов 15.08.2017 RS00-0000000000000005314
    //НоваяКолонкаТаблицы.ТолькоПросмотр = Истина;
    НоваяКолонкаТаблицы.ТолькоПросмотр = Ложь;
    НоваяКолонкаТаблицы.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
//Рарус Владимир Подрезов Конец
    
    НоваяКолонкаТаблицы             = Элементы.Добавить("пкКорректировкиТоваровСуммаСНДС", Тип("ПолеФормы"), Элементы.пкКорректировкиТоваров);
    НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаТаблицы.ПутьКДанным = "Объект.пкКорректировкиТоваров.СуммаСНДС";
    НоваяКолонкаТаблицы.ТолькоПросмотр = Истина;
    
    НоваяКолонкаТаблицы             = Элементы.Добавить("пкКорректировкиТоваровКодСтроки", Тип("ПолеФормы"), Элементы.пкКорректировкиТоваров);
    НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаТаблицы.ПутьКДанным = "Объект.пкКорректировкиТоваров.КодСтроки";
    НоваяКолонкаТаблицы.Видимость   = Ложь;
    
    НоваяКолонкаТаблицы             = Элементы.Добавить("пкКорректировкиТоваровпкЗаявкаНаАрендуТехники", Тип("ПолеФормы"), Элементы.пкКорректировкиТоваров);
    НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаТаблицы.ПутьКДанным = "Объект.пкКорректировкиТоваров.пкЗаявкаНаАрендуТехники";
    
    НоваяГруппа             = Элементы.Добавить("пкГруппаНеРаспределятьПрофитИсключениеИзУСР", Тип("ГруппаФормы"), Элементы.ГруппаПараметрыПраво); 
	НоваяГруппа.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
    НоваяГруппа.ОтображатьЗаголовок = Ложь;
    
    НовоеПоле             = Элементы.Добавить("пкНеРаспределятьПрофит", Тип("ПолеФормы"), Элементы.пкГруппаНеРаспределятьПрофитИсключениеИзУСР);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеФлажка;
    НовоеПоле.ПутьКДанным = "Объект.пкНеРаспределятьПрофит";
    
    НовоеПоле             = Элементы.Добавить("пкИсключитьИзУСР", Тип("ПолеФормы"), Элементы.пкГруппаНеРаспределятьПрофитИсключениеИзУСР);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеФлажка;
    НовоеПоле.ПутьКДанным = "Объект.пкИсключитьИзУСР";
    
    НоваяГруппа             = Элементы.Добавить("пкГруппаЗакрытиеСчета", Тип("ГруппаФормы"), Элементы.ГруппаПараметрыПраво); 
	НоваяГруппа.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
    НоваяГруппа.ОтображатьЗаголовок = Ложь;
    
    НовоеПоле             = Элементы.Добавить("пкЗакрыт", Тип("ПолеФормы"), Элементы.пкГруппаЗакрытиеСчета);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеФлажка;
    НовоеПоле.ПутьКДанным = "Объект.пкЗакрыт";
    
    НовоеПоле             = Элементы.Добавить("пкДатаЗакрытия", Тип("ПолеФормы"), Элементы.пкГруппаЗакрытиеСчета);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкДатаЗакрытия";
    
    НовоеПоле            = Элементы.Вставить("пкОстатокПоДоговору", Тип("ДекорацияФормы"), Элементы.Группа1, Элементы.ЗачетОплатыФорма);
    НовоеПоле.Заголовок  = "По договору: " + Строка(ПолучитьОстатокПоДоговору(Объект.Договор)) + " руб.";
    НовоеПоле.Шрифт      = Новый Шрифт(НовоеПоле.Шрифт, , , Истина);
    НовоеПоле.ЦветТекста = ЦветаСтиля.ЦветФонаВыделенияПоля;
    
    Элементы.Товары.Высота                 = 5;
    Элементы.пкКорректировкиТоваров.Высота = 5;
	
//Рарус Владимр Подрезов 24.03.2017
	НоваяКолонкаТаблицы				= Элементы.Вставить("пкТоварыЗамененнаяМодель", Тип("ПолеФормы"), Элементы.Товары, Элементы.ТоварыСклад);
	//НоваяКолонкаТаблицы.Вид			= ВидПоляФормы.ПолеНадписи;   
	НоваяКолонкаТаблицы.Вид			= ВидПоляФормы.ПолеВвода;   
	НоваяКолонкаТаблицы.ПутьКДанным	= "Объект.Товары.пкЗамененнаяМодель";
	НоваяКолонкаТаблицы.Заголовок	= "Замененная модель";
	НоваяКолонкаТаблицы.Видимость	= ЭтоАренда;
	
	НоваяКолонкаТаблицы				= Элементы.Вставить("пкТоварыЗаказНаряд", Тип("ПолеФормы"), Элементы.Товары, Элементы.ТоварыСклад);
	НоваяКолонкаТаблицы.Вид			= ВидПоляФормы.ПолеВвода;   
	НоваяКолонкаТаблицы.ПутьКДанным	= "Объект.Товары.пкЗаказНаряд";
	НоваяКолонкаТаблицы.Заголовок	= "Заказ-наряд";
	//НоваяКолонкаТаблицы.Видимость	= ЭтоСервис;
//Рарус Владимр Подрезов Конец

КонецПроцедуры       

Процедура ПриСозданииНаСервере_Документ_ЗаказКлиента_ФормаСпискаДокументов(Форма, Отказ, СтандартнаяОбработка)
    
    Элементы = Форма.Элементы;
    
    Форма.Список.ТекстЗапроса = 
    "ВЫБРАТЬ
    |   ДокументЗаказКлиента.Ссылка КАК Ссылка,
    |   ДокументЗаказКлиента.ПометкаУдаления КАК ПометкаУдаления,
    |   ДокументЗаказКлиента.Номер КАК Номер,
    |   ДокументЗаказКлиента.Дата КАК Дата,
    |   ДокументЗаказКлиента.НомерПоДаннымКлиента КАК НомерПоДаннымКлиента,
    |   ДокументЗаказКлиента.ДатаПоДаннымКлиента КАК ДатаПоДаннымКлиента,
    |   ДокументЗаказКлиента.Проведен КАК Проведен,
    |   ДокументЗаказКлиента.Приоритет КАК Приоритет,
    |   ДокументЗаказКлиента.Партнер КАК Партнер,
    |   ДокументЗаказКлиента.Контрагент КАК Контрагент,
    |   ДокументЗаказКлиента.Организация КАК Организация,
    |   ДокументЗаказКлиента.Соглашение КАК Соглашение,
    |   ДокументЗаказКлиента.Договор КАК Договор,
    |   ДокументЗаказКлиента.Сделка КАК Сделка,
    |   ДокументЗаказКлиента.Валюта КАК Валюта,
    |   ДокументЗаказКлиента.СуммаДокумента КАК СуммаДокумента,
    |   ДокументЗаказКлиента.СуммаВозвратнойТары КАК СуммаВозвратнойТары,
    |   ДокументЗаказКлиента.ГрафикОплаты КАК ГрафикОплаты,
    |   ДокументЗаказКлиента.ЖелаемаяДатаОтгрузки КАК ЖелаемаяДатаОтгрузки,
    |   ДокументЗаказКлиента.Склад КАК Склад,
    |   ДокументЗаказКлиента.Статус КАК Статус,
    |   ДокументЗаказКлиента.Менеджер КАК Менеджер,
    |   ДокументЗаказКлиента.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
    |   ДокументЗаказКлиента.СуммаАвансаДоОбеспечения КАК СуммаАвансаДоОбеспечения,
    |   ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки КАК СуммаПредоплатыДоОтгрузки,
    |   ДокументЗаказКлиента.ДатаОтгрузки КАК ДатаОтгрузки,
    |   ДокументЗаказКлиента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
    |   ДокументЗаказКлиента.ПорядокРасчетов КАК ПорядокРасчетов,
    |   ДокументЗаказКлиента.Комментарий КАК Комментарий,
    |   ВЫБОР
    |       КОГДА НЕ ДокументЗаказКлиента.Проведен
    |           ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ПустаяСсылка)
    |       ИНАЧЕ ЕСТЬNULL(СостоянияЗаказовКлиентов.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.Закрыт))
    |   КОНЕЦ КАК Состояние,
    |   ВЫБОР
    |       КОГДА НЕ ДокументЗаказКлиента.Проведен
    |           ТОГДА ЛОЖЬ
    |       КОГДА СостоянияЗаказовКлиентов.ДатаСобытия <> ДАТАВРЕМЯ(1, 1, 1)
    |               И &ДатаАктуальности > СостоянияЗаказовКлиентов.ДатаСобытия
    |           ТОГДА ИСТИНА
    |       ИНАЧЕ ЛОЖЬ
    |   КОНЕЦ КАК Просрочен,
    |   ВЫБОР
    |       КОГДА ДокументЗаказКлиента.Приоритет В
    |               (ВЫБРАТЬ ПЕРВЫЕ 1
    |                   Приоритеты.Ссылка КАК Приоритет
    |               ИЗ
    |                   Справочник.Приоритеты КАК Приоритеты
    |               УПОРЯДОЧИТЬ ПО
    |                   Приоритеты.РеквизитДопУпорядочивания)
    |           ТОГДА 0
    |       КОГДА ДокументЗаказКлиента.Приоритет В
    |               (ВЫБРАТЬ ПЕРВЫЕ 1
    |                   Приоритеты.Ссылка КАК Приоритет
    |               ИЗ
    |                   Справочник.Приоритеты КАК Приоритеты
    |               УПОРЯДОЧИТЬ ПО
    |                   Приоритеты.РеквизитДопУпорядочивания УБЫВ)
    |           ТОГДА 2
    |       ИНАЧЕ 1
    |   КОНЕЦ КАК КартинкаПриоритета,
    |   ЕСТЬNULL(СостоянияЗаказовКлиентов.СуммаОплаты, 0) КАК СуммаОплаты,
    |   ЕСТЬNULL(СостоянияЗаказовКлиентов.ПроцентОплаты, 0) КАК ПроцентОплаты,
    |   ЕСТЬNULL(СостоянияЗаказовКлиентов.СуммаОтгрузки, 0) КАК СуммаОтгрузки,
    |   ЕСТЬNULL(СостоянияЗаказовКлиентов.ПроцентОтгрузки, 0) КАК ПроцентОтгрузки,
    |   ВЫБОР
    |       КОГДА ЕСТЬNULL(СостоянияЗаказовКлиентов.СуммаДолга, 0) < 0
    |           ТОГДА ЕСТЬNULL(СостоянияЗаказовКлиентов.СуммаДолга, 0)
    |       ИНАЧЕ 0
    |   КОНЕЦ КАК НашДолг,
    |   ВЫБОР
    |       КОГДА ЕСТЬNULL(СостоянияЗаказовКлиентов.СуммаДолга, 0) > 0
    |           ТОГДА ЕСТЬNULL(СостоянияЗаказовКлиентов.СуммаДолга, 0)
    |       ИНАЧЕ 0
    |   КОНЕЦ КАК ДолгКлиента,
    |   ЕСТЬNULL(СостоянияЗаказовКлиентов.ПроцентДолга, 0) КАК ПроцентДолга,
    |   ЕСТЬNULL(СостоянияЗаказовКлиентов.ДатаСобытия, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаСобытия,
    |   ЕСТЬNULL(СостоянияЗаказовКлиентов.ЕстьРасхожденияОрдерНакладная, ЛОЖЬ) КАК ЕстьРасхожденияОрдерНакладная,
    |   СостоянияЭД.СостояниеВерсииЭД,
    |   ДокументЗаказКлиента.пкДатаНачалаАренды,
    |   ДокументЗаказКлиента.пкДатаОкончанияАренды
    |ИЗ
    |   Документ.ЗаказКлиента КАК ДокументЗаказКлиента
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказовКлиентов
    |       ПО (СостоянияЗаказовКлиентов.Заказ = ДокументЗаказКлиента.Ссылка)
    |       {ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
    |       ПО (СостоянияЭД.СсылкаНаОбъект = ДокументЗаказКлиента.Ссылка)}";
                                       
    НоваяГруппа                  = Элементы.Вставить("пкТоварыГруппаАренда", Тип("ГруппаФормы"), Элементы.Список, Элементы.СписокСостояние); 
	НоваяГруппа.Вид              = ВидГруппыФормы.ГруппаКолонок;
    НоваяГруппа.ОтображатьВШапке = Истина;
    НоваяГруппа.Группировка      = ГруппировкаКолонок.Горизонтальная;
    НоваяГруппа.Заголовок        = "Аренда";
    
    НоваяКолонкаТаблицы             = Элементы.Добавить("пкТоварыДатаНачалаАренды", Тип("ПолеФормы"), Элементы.пкТоварыГруппаАренда);
    НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаТаблицы.ПутьКДанным = "Список.пкДатаНачалаАренды";
    НоваяКолонкаТаблицы.Заголовок   = "Дата начала";
    
    НоваяКолонкаТаблицы             = Элементы.Добавить("пкТоварыДатаОкончанияАренды", Тип("ПолеФормы"), Элементы.пкТоварыГруппаАренда);
    НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаТаблицы.ПутьКДанным = "Список.пкДатаОкончанияАренды";
    НоваяКолонкаТаблицы.Заголовок   = "Дата окончания";
    
КонецПроцедуры    

Процедура  ПриСозданииНаСервере_Документ_ПоступлениеБезналичныхДенежныхСредств_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка)
    
    Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    НовоеПоле             = Элементы.Добавить("пкЭкспорт", Тип("ПолеФормы"), Элементы.ГруппаОсновныеРеквизиты);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеФлажка;
    НовоеПоле.ПутьКДанным = "Объект.пкЭкспорт";
    
Конецпроцедуры    

Процедура ПриСозданииНаСервере_Документ_ПоступлениеДенежныхДокументов_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка)
    
    Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    НоваяКолонкаТаблицы             = Элементы.Вставить("пкДенежныеДокументыТипДенежногоДокумента", Тип("ПолеФормы"), Элементы.ДенежныеДокументы, Элементы.ДенежныеДокументыВалюта);
    НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаТаблицы.ПутьКДанным = "Объект.ДенежныеДокументы.пкТипДенежногоДокумента";
	
	НоваяКолонкаТаблицы             = Элементы.Вставить("пкКонтрагент", Тип("ПолеФормы"), Элементы.ДенежныеДокументы, Элементы.ДенежныеДокументыВалюта);
    НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаТаблицы.ПутьКДанным = "Объект.ДенежныеДокументы.пкКонтрагент";
    
КонецПроцедуры    

Процедура ПриСозданииНаСервере_Документ_ПоступлениеТоваровУслуг_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка)
    
    Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    НоваяГруппа             = Элементы.Вставить("пкГруппаКурсДатаДокумента", Тип("ГруппаФормы"), Элементы.ГруппаПараметрыПраво, Элементы.НалогообложениеНДС); 
	НоваяГруппа.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
    НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
    НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.ОтображатьЗаголовок = Ложь;
    
    НовоеПоле             = Элементы.Добавить("пкКурсДокумента", Тип("ПолеФормы"), Элементы.пкГруппаКурсДатаДокумента);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкКурсДокумента";
    НовоеПоле.Заголовок   = "Курс";
    НовоеПоле.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    
    НовоеПоле             = Элементы.Добавить("пкДатаКурса", Тип("ПолеФормы"), Элементы.пкГруппаКурсДатаДокумента);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкДатаКурса";
    НовоеПоле.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    
КонецПроцедуры    

Процедура ПриСозданииНаСервере_Документ_ПринятиеКУчетуОС_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка)
	
	Объект = Форма.Объект;
    
    Если Форма.Параметры.Свойство("ДанныеЗаполнения") Тогда
		СтрокаТабличнойЧасти = Объект.ОС.Добавить();
		
		СтрокаТабличнойЧасти.ОсновноеСредство = Форма.Параметры.ДанныеЗаполнения;
		СтрокаТабличнойЧасти.ИнвентарныйНомер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.Параметры.ДанныеЗаполнения, "Код");
	КонецЕсли;
  
КонецПроцедуры    

Процедура ПриСозданииНаСервере_Документ_РеализацияТоваровУслуг_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка)
    
    Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    ЭтоАренда = Объект.Договор.пкВидДоговора = ПредопределенноеЗначение("Перечисление.пкВидыДоговоров.АрендаТехники");
    
    Элементы.Переместить(Элементы.ГруппаРеализацияПоЗаказам, Форма, Элементы.ГруппаСтраницы);
    Элементы.Переместить(Элементы.ГруппаШапка,               Форма, Элементы.ГруппаСтраницы);
	Элементы.Переместить(Элементы.НадписьВалюты,             Форма, Элементы.ГруппаСтраницы);
    Элементы.Переместить(Элементы.ГруппаОплата1,             Форма, Элементы.ГруппаСтраницы);
    Элементы.Переместить(Элементы.Комментарий,               Форма, Элементы.ГруппаПодвал);
    
    Элементы.Комментарий.Ширина = 0;
    Элементы.Комментарий.Высота = 1;
    Элементы.Комментарий.РастягиватьПоГоризонтали = Истина;
    
    Элементы.ТоварыХарактеристика.Видимость = НЕ ЭтоАренда;
    Элементы.СтраницаДоставка.Видимость     = НЕ ЭтоАренда;
    
    Элементы.ТоварыСуммаНДС.ТолькоПросмотр = Ложь;
    Элементы.ТоварыСуммаНДС.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    
    Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
        Объект.Склад    = Объект.Подразделение.пкСкладТехники;
        Объект.Менеджер = Объект.Договор.Менеджер;
        
        Дата = пкОбщегоНазначенияСервер.ПолучитьРабочуюДатуПользователя(Пользователи.ТекущийПользователь());
        
		Если Дата <> Неопределено Тогда
//Рарус Владимир Подрезов 24.10.2017 6528
//			Объект.Дата = Дата;    
			Объект.Дата = КонецДня(Дата);    
//Рарус Владимир Подрезов Конец
        КонецЕсли;    
    КонецЕсли;    
    
    Элементы.Товары.РастягиватьПоВертикали = Ложь;
    Элементы.Товары.Высота = 5;
    
    НовоеПоле             = Элементы.Добавить("пкОбъектСтроительства", Тип("ПолеФормы"), Элементы.ГруппаШапкаЛево);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкОбъектСтроительства";
    НовоеПоле.РастягиватьПоГоризонтали = Ложь;
    НовоеПоле.Ширина             = 28;
    НовоеПоле.ВысотаЗаголовка    = 1;
    НовоеПоле.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
    НовоеПоле.Заголовок          = "Объект";
    НовоеПоле.Видимость          = ЭтоАренда;
    НовоеПоле.КнопкаВыбора       = Истина;
    НовоеПоле.УстановитьДействие("НачалоВыбора", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    
    НоваяКоманда            = Форма.Команды.Добавить("пкЗаполнитьПоСчету");
    НоваяКоманда.Заголовок  = "Заполнить по счету";
    НоваяКоманда.Действие   = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
    
    НоваяКнопка            = Элементы.Добавить("пкЗаполнитьПоСчету", Тип("КнопкаФормы"), Элементы.ТоварыГруппаЗаполнить); 
    НоваяКнопка.ИмяКоманды = "пкЗаполнитьПоСчету"; 
    
    НоваяКоманда            = Форма.Команды.Добавить("пкДобавитьПоСчету");
    НоваяКоманда.Заголовок  = "Добавить по счету";
    НоваяКоманда.Действие   = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
    
    НоваяКнопка            = Элементы.Добавить("пкДобавитьПоСчету", Тип("КнопкаФормы"), Элементы.ТоварыГруппаЗаполнить); 
    НоваяКнопка.ИмяКоманды = "пкДобавитьПоСчету"; 
    
    НоваяКоманда            = Форма.Команды.Добавить("пкЗаполнитьПоСчетуОстатки");
    НоваяКоманда.Заголовок  = "Заполнить по счету (остатки)";
    НоваяКоманда.Действие   = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
    
    НоваяКнопка            = Элементы.Добавить("пкЗаполнитьПоСчетуОстатки", Тип("КнопкаФормы"), Элементы.ТоварыГруппаЗаполнить); 
    НоваяКнопка.ИмяКоманды = "пкЗаполнитьПоСчетуОстатки"; 
    
    НоваяКоманда            = Форма.Команды.Добавить("пкДобавитьПоСчетуОстатки");
    НоваяКоманда.Заголовок  = "Добавить по счету (остатки)";
    НоваяКоманда.Действие   = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
    
    НоваяКнопка            = Элементы.Добавить("пкДобавитьПоСчетуОстатки", Тип("КнопкаФормы"), Элементы.ТоварыГруппаЗаполнить); 
    НоваяКнопка.ИмяКоманды = "пкДобавитьПоСчетуОстатки"; 
    
    НоваяГруппа                  = Элементы.Вставить("пкТоварыГруппаАренда", Тип("ГруппаФормы"), Элементы.Товары, Элементы.ТоварыКоличествоУпаковок); 
	НоваяГруппа.Вид              = ВидГруппыФормы.ГруппаКолонок;
    НоваяГруппа.ОтображатьВШапке = Истина;
    НоваяГруппа.Группировка      = ГруппировкаКолонок.Горизонтальная;
    НоваяГруппа.Заголовок        = "Аренда";
    НоваяГруппа.Видимость        = ЭтоАренда;
    
    НоваяКолонкаТаблицы             = Элементы.Добавить("пкТоварыДатаНачалаАренды", Тип("ПолеФормы"), Элементы.пкТоварыГруппаАренда);
    НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаТаблицы.ПутьКДанным = "Объект.Товары.пкДатаНачалаАренды";
    НоваяКолонкаТаблицы.Заголовок   = "Дата начала";
    НоваяКолонкаТаблицы.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    
    НоваяКолонкаТаблицы             = Элементы.Добавить("пкТоварыДатаОкончанияАренды", Тип("ПолеФормы"), Элементы.пкТоварыГруппаАренда);
    НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаТаблицы.ПутьКДанным = "Объект.Товары.пкДатаОкончанияАренды";
    НоваяКолонкаТаблицы.Заголовок   = "Дата окончания";
    НоваяКолонкаТаблицы.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    
    НоваяКолонкаТаблицы             = Элементы.Вставить("пкТоварыТехника", Тип("ПолеФормы"), Элементы.Товары, Элементы.ТоварыХарактеристика);
    НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаТаблицы.ПутьКДанным = "Объект.Товары.пкТехника";
    НоваяКолонкаТаблицы.Видимость   = ЭтоАренда;
    НоваяКолонкаТаблицы.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    
    НоваяКолонкаТаблицы             = Элементы.Вставить("пкТоварыПримечаниеДляПечати", Тип("ПолеФормы"), Элементы.Товары, Элементы.ТоварыХарактеристика);
    НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаТаблицы.ПутьКДанным = "Объект.Товары.пкПримечаниеДляПечати";
        
    НоваяКолонкаТаблицы             = Элементы.Вставить("пкТоварыЗаявкаНаАрендуТехники", Тип("ПолеФормы"), Элементы.Товары, Элементы.ТоварыСклад);
    НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаТаблицы.ПутьКДанным = "Объект.Товары.пкЗаявкаНаАрендуТехники";
    НоваяКолонкаТаблицы.Видимость   = ЭтоАренда;
    
    НоваяКолонкаТаблицы             = Элементы.Вставить("пкТоварыВидТарифа", Тип("ПолеФормы"), Элементы.Товары, Элементы.ТоварыВидЦены);
    НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаТаблицы.ПутьКДанным = "Объект.Товары.пкВидТарифа";
    НоваяКолонкаТаблицы.Видимость   = ЭтоАренда;
    НоваяКолонкаТаблицы.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
	
//Рарус Владимр Подрезов 25.11.2017 5678
	НоваяКолонкаТаблицы				= Элементы.Вставить("пкТоварыЗамененнаяМодель", Тип("ПолеФормы"), Элементы.Товары, Элементы.ТоварыСклад);
	НоваяКолонкаТаблицы.Вид			= ВидПоляФормы.ПолеВвода;   
	НоваяКолонкаТаблицы.ПутьКДанным	= "Объект.Товары.пкЗамененнаяМодель";
	НоваяКолонкаТаблицы.Заголовок	= "Замененная модель";
//Рарус Владимр Подрезов Конец
    
	НовоеПоле            = Элементы.Вставить("пкОстатокПоДоговору", Тип("ДекорацияФормы"), Элементы.ГруппаОплата1, Элементы.ЗачетОплаты);
	НовоеПоле.Заголовок  = "По договору: " + Строка(ПолучитьОстатокПоДоговору(Объект.Договор)) + " руб.";                   
	НовоеПоле.Шрифт      = Новый Шрифт(НовоеПоле.Шрифт, , , Истина);
	НовоеПоле.ЦветТекста = ЦветаСтиля.ЦветФонаВыделенияПоля;
    
КонецПроцедуры    

Процедура ПриСозданииНаСервере_Документ_СчетФактураВыданный_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка)
    
    Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
        Объект.Номер = Объект.ДокументОснование.Номер;
        Объект.Дата  = Объект.ДокументОснование.Дата;
        Объект.ДатаВыставления = Объект.ДокументОснование.Дата; 
//Рарус Владимир Подрезов 24.07.2017
		ТаблицаПлатежноРасчетныеДокументы = Объект.ПлатежноРасчетныеДокументы.Выгрузить();
		тОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.СчетФактураВыданный"));
		Документы.СчетФактураВыданный.ЗаполнитьПлатежноРасчетныеДокументы(
			ТаблицаПлатежноРасчетныеДокументы,
			тОбъект.ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"),
			Объект.Организация);
		Объект.ПлатежноРасчетныеДокументы.Загрузить(ТаблицаПлатежноРасчетныеДокументы);
		Объект.СтрокаПлатежноРасчетныеДокументы = 
			Документы.СчетФактураВыданный.СтрокаРасчетноПлатежныхДокументов(Объект.ПлатежноРасчетныеДокументы);
		Если ЗначениеЗаполнено(Объект.СтрокаПлатежноРасчетныеДокументы) Тогда
			Форма.СтрокаПлатежноРасчетныеДокументы = Объект.СтрокаПлатежноРасчетныеДокументы;
		Иначе
			Форма.СтрокаПлатежноРасчетныеДокументы = НСтр("ru='<отсутствуют>'"); 
		КонецЕсли;
//Рарус Владимир Подрезов Конец
	КонецЕсли;    
        
КонецПроцедуры    

Процедура ПриСозданииНаСервере_Документ_СписаниеБезналичныхДенежныхСредств_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка)
    
    Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    НоваяГруппа             = Элементы.Вставить("пкГруппаКурсДатаДокумента", Тип("ГруппаФормы"), Элементы.РасшифровкаБезРазбиения, Элементы.РасшифровкаБезРазбиенияСтатьяДвиженияДенежныхСредств); 
	НоваяГруппа.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
    НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
    НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.ОтображатьЗаголовок = Ложь;
    
    НовоеПоле					= Элементы.Добавить("пкКурсДокумента", Тип("ПолеФормы"), Элементы.пкГруппаКурсДатаДокумента);
    НовоеПоле.Вид				= ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным		= "Объект.пкКурсДокумента";
    НовоеПоле.Заголовок			= "Курс";
    НовоеПоле.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    
    НовоеПоле					= Элементы.Добавить("пкДатаКурса", Тип("ПолеФормы"), Элементы.пкГруппаКурсДатаДокумента);
    НовоеПоле.Вид				= ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным		= "Объект.пкДатаКурса";
    НовоеПоле.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду");
	 
//Рарус Владимир Подрезов 16.03.2017
    НоваяКоманда            = Форма.Команды.Добавить("пкИзменитьКурсСписаниеДС");
    НоваяКоманда.Заголовок  = "Изменить курс";
    НоваяКоманда.Действие   = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
    
    НоваяКнопка            = Элементы.Добавить("пкИзменитьКурсСписаниеДС", Тип("КнопкаФормы"), Элементы.пкГруппаКурсДатаДокумента); 
    НоваяКнопка.ИмяКоманды = "пкИзменитьКурсСписаниеДС"; 
	
	Элементы.пкКурсДокумента.ТолькоПросмотр	= Истина;
	Элементы.пкДатаКурса.ТолькоПросмотр		= Истина;
//Рарус Владимир Подрезов Конец
    
    Элементы.РасшифровкаБезРазбиенияСуммаВзаиморасчетов.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду");
    
    Элементы.РасшифровкаПлатежаСуммаВзаиморасчетов.ОтображениеПредупрежденияПриРедактировании      = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
    Элементы.РасшифровкаБезРазбиенияСуммаВзаиморасчетов.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
    
КонецПроцедуры    

Процедура ПриСозданииНаСервере_Документ_ТабельУчетаРабочегоВремени_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка)
	
	//Элементы = Форма.Элементы;
	//
	//НоваяКоманда = Команды.Добавить("уатЗаполнитьПоПЛ");
	//НоваяКоманда.Действие = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
	//НоваяКоманда.Подсказка = "Заполнить данными рабочего времени по путевым листам";
	//
	//НоваяКнопка = Элементы.Добавить("уатЗаполнитьПоПЛ", Тип("КнопкаФормы"), Элементы.ФормаКоманднаяПанель);
	//НоваяКнопка.Заголовок = НСтр("ru = 'Заполнить по ПЛ");
	//НоваяКнопка.ИмяКоманды = "уатЗаполнитьПоПЛ";    
	
КонецПроцедуры    

//Рарус Владимир Подрезов Доставка п.2.2.2. 12.07.2016
Процедура ПриСозданииНаСервере_Справочник_ТранспортныеСредства_ФормаЭлемента(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
	
	// Таблица регистра сведений ДоступныеСпособыПогрузкиРазгрузкиТехники для текущего ТС
	ДобавляемыеРеквизиты = Новый Массив;
    ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("пкСписокСпособыПогрузкиРазгрузкиТехники", Новый ОписаниеТипов("ТаблицаЗначений")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Доступен", Новый ОписаниеТипов("Булево"), "пкСписокСпособыПогрузкиРазгрузкиТехники", "Доступен", ложь));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("СпособПогрузкиРазгрузки", Новый ОписаниеТипов("СправочникСсылка.пкСпособыПогрузкиРазгрузкиТехники"), "пкСписокСпособыПогрузкиРазгрузкиТехники", "Способ", ложь));
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ЗаполнитьКоллекциюСпособовДляОбъекта(Форма["пкСписокСпособыПогрузкиРазгрузкиТехники"], Объект.Ссылка);
	
	НоваяГруппа             = Элементы.Добавить("пкСтраницаПараметрыТехники", Тип("ГруппаФормы")); 
	НоваяГруппа.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НоваяГруппа.ОтображатьЗаголовок = Ложь; 
	
	НовыйСписок  = Элементы.Добавить("пкСписокСпособыПогрузкиРазгрузкиТехники", Тип("ТаблицаФормы"), Элементы.пкСтраницаПараметрыТехники);
    НовыйСписок.ПутьКДанным 			= "пкСписокСпособыПогрузкиРазгрузкиТехники";
	НовыйСписок.ИзменятьПорядокСтрок 	= Ложь;
	НовыйСписок.ИзменятьСоставСтрок 	= Ложь;
	НовыйСписок.Заголовок				= НСтр("ru='Способы погрузки/разгрузки техники'");
	НовыйСписок.ПоложениеЗаголовка		= ПоложениеЗаголовкаЭлементаФормы.Верх;
	НовыйСписок.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	
	НоваяКолонкаДинамическогоСписка             = Элементы.Добавить("пкСписокСпособыПогрузкиРазгрузкиТехникиДоступен", Тип("ПолеФормы"), Элементы.пкСписокСпособыПогрузкиРазгрузкиТехники);
    НоваяКолонкаДинамическогоСписка.Вид         = ВидПоляФормы.ПолеФлажка;   
    НоваяКолонкаДинамическогоСписка.ПутьКДанным = "пкСписокСпособыПогрузкиРазгрузкиТехники.Доступен";
	
	НоваяКолонкаДинамическогоСписка         	    = Элементы.Добавить("пкСписокСпособыПогрузкиРазгрузкиТехникиСпособПогрузкиРазгрузки", Тип("ПолеФормы"), Элементы.пкСписокСпособыПогрузкиРазгрузкиТехники);
    НоваяКолонкаДинамическогоСписка.Вид 	        = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаДинамическогоСписка.ПутьКДанным		= "пкСписокСпособыПогрузкиРазгрузкиТехники.СпособПогрузкиРазгрузки";
    НоваяКолонкаДинамическогоСписка.ТолькоПросмотр	= Истина;
	
	//Добавленный реквизит справочника пкКоэффициентЗагрузкиТС
	НовоеПолеВвода             = Элементы.Добавить("пкКоэффициентЗагрузкиТС", Тип("ПолеФормы"), Элементы.ГрузоподъемностьВместимость);
    НовоеПолеВвода.Вид         = ВидПоляФормы.ПолеВвода;   
    НовоеПолеВвода.ПутьКДанным = "Объект.пкКоэффициентЗагрузкиТС";
	
//Рарус Владимир Подрезов 17.05.2017
	НоваяКолонкаДинамическогоСписка             = Элементы.Добавить("пкНеУчитыватьВыработку", Тип("ПолеФормы"));
    НоваяКолонкаДинамическогоСписка.Вид         = ВидПоляФормы.ПолеФлажка;   
    НоваяКолонкаДинамическогоСписка.ПутьКДанным = "Объект.пкНеУчитыватьВыработку";
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 05.06.2017
	НоваяКолонкаДинамическогоСписка             = Элементы.Добавить("пкНеИспользоватьВЛогистике", Тип("ПолеФормы"));
    НоваяКолонкаДинамическогоСписка.Вид         = ВидПоляФормы.ПолеФлажка;   
    НоваяКолонкаДинамическогоСписка.ПутьКДанным = "Объект.пкНеИспользоватьВЛогистике";
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 10.10.2017
	НоваяКолонкаДинамическогоСписка             = Элементы.Добавить("пкСпособДоставки", Тип("ПолеФормы"));
    НоваяКолонкаДинамическогоСписка.Вид         = ВидПоляФормы.ПолеФлажка;   
    НоваяКолонкаДинамическогоСписка.ПутьКДанным = "Объект.пкСпособДоставки";
//Рарус Владимир Подрезов Конец

КонецПроцедуры    

Процедура ПриСозданииНаСервере_Справочник_Партнеры_ФормаЭлемента(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы	= Форма.Элементы;
    Объект		= Форма.Объект;
	
	НоваяГруппа				= Элементы.Добавить("пкГруппаОбъектыСтроительства", Тип("ГруппаФормы"), Элементы.ГруппаСтраницы); 
	НоваяГруппа.Вид			= ВидГруппыФормы.Страница;
	НоваяГруппа.Группировка	= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НоваяГруппа.Заголовок	= "Объекты строительства";
	
    НоваяТаблица						= Элементы.Добавить("пкОбъектыСтроительства", Тип("ТаблицаФормы"), Элементы.пкГруппаОбъектыСтроительства);
    НоваяТаблица.ПутьКДанным			= "Объект.пкОбъектыСтроительства";
	НоваяТаблица.АвтоВводНовойСтроки	= Ложь;
    //НоваяТаблица.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
	
    НоваяКолонкаТаблицы             = Элементы.Добавить("ОбъектыСтроительстваОбъектСтроительства", Тип("ПолеФормы"), Элементы.пкОбъектыСтроительства);
    НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаТаблицы.ПутьКДанным = "Объект.пкОбъектыСтроительства.ОбъектСтроительства";
	НоваяКолонкаТаблицы.Заголовок	= "Объект строительства";
    
    НоваяКолонкаТаблицы             = Элементы.Добавить("ОбъектыСтроительстваКонтактноеЛицо", Тип("ПолеФормы"), Элементы.пкОбъектыСтроительства);
    НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаТаблицы.ПутьКДанным = "Объект.пкОбъектыСтроительства.КонтактноеЛицо";
    
    НовоеПоле             = Элементы.Добавить("пкПоручитель", Тип("ПолеФормы"), Элементы.ГруппаОбщаяИнформация);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкПоручитель";
    
	НоваяГруппа				= Элементы.Добавить("пкГруппаВремяДоставки", Тип("ГруппаФормы"), Элементы.ГруппаОбщаяИнформация); 
	НоваяГруппа.Вид			= ВидГруппыФормы.ОбычнаяГруппа;
    НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.Группировка	= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
    НоваяГруппа.ОтображатьЗаголовок = Ложь;
    
    НовоеПоле             = Элементы.Добавить("пкВремяДоставкиС", Тип("ПолеФормы"), Элементы.пкГруппаВремяДоставки);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкВремяДоставкиС";
    НовоеПоле.Заголовок   = "Желаемое время доставки с";
    НовоеПоле.Ширина      = 6;
    НовоеПоле.РастягиватьПоГоризонтали = Ложь;	
    НовоеПоле.КнопкаВыпадающегоСписка  = Истина;
    НовоеПоле.ВысотаЗаголовка          = 2;
    НовоеПоле.ПоложениеЗаголовка       = ПоложениеЗаголовкаЭлементаФормы.Лево;
    
    НовоеПоле             = Элементы.Добавить("пкВремяДоставкиПо", Тип("ПолеФормы"), Элементы.пкГруппаВремяДоставки);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкВремяДоставкиПо";
    НовоеПоле.Заголовок   = "по";
    НовоеПоле.Ширина      = 6;
    НовоеПоле.РастягиватьПоГоризонтали = Ложь;	
    НовоеПоле.КнопкаВыпадающегоСписка  = Истина;
    
    ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.пкВремяДоставкиС);
	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.пкВремяДоставкиПо);
    
	НоваяГруппа				= Элементы.Добавить("пкГруппаСтатусКлассификация", Тип("ГруппаФормы"), Элементы.ГруппаОбщаяИнформация); 
	НоваяГруппа.Вид			= ВидГруппыФормы.ОбычнаяГруппа;
    НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.Группировка	= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
    НоваяГруппа.ОтображатьЗаголовок = Ложь;
    
    НовоеПоле             = Элементы.Добавить("пкСтатус", Тип("ПолеФормы"), Элементы.пкГруппаСтатусКлассификация);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкСтатус";
    
    НовоеПоле             = Элементы.Добавить("пкКласс", Тип("ПолеФормы"), Элементы.пкГруппаСтатусКлассификация);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкКласс";
    
    НовоеПоле             = Элементы.Добавить("пкНадежность", Тип("ПолеФормы"), Элементы.ГруппаОбщаяИнформация);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкНадежность";
    
//Рарус Владимир Подрезов 01.01.2017
    НовоеПоле             = Элементы.Добавить("пкПодразделение", Тип("ПолеФормы"), Элементы.ГруппаОбщаяИнформация);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкПодразделение";
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 15.06.2017
    Элементы.ДополнительнаяИнформация.ТолькоПросмотр = Не (ПроверитьВхождениеПользователяВГруппупкИзменениеДополнительнойИнформацииКонтрагентаРарус());// ИЛИ РольДоступна("ПолныеПрава"));
//Рарус Владимир Подрезов Конец
    
КонецПроцедуры	

Процедура ПриСозданииНаСервере_Справочник_Партнеры_ФормаЭлементаРеквизитыКонтрагента(Форма, Отказ, СтандартнаяОбработка)
    
	Элементы	= Форма.Элементы;
    Объект		= Форма.Объект;

	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"), "Объект.пкМенеджеры", "Подразделение"));
    
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
        
    НоваяГруппа				= Элементы.Добавить("пкГруппаМенеджеры", Тип("ГруппаФормы"), Элементы.ГруппаСтраницы); 
	НоваяГруппа.Вид			= ВидГруппыФормы.Страница;
	НоваяГруппа.Группировка	= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НоваяГруппа.Заголовок	= "Менеджеры";
    
    НоваяТаблица		     = Элементы.Добавить("пкМенеджеры", Тип("ТаблицаФормы"), Элементы.пкГруппаМенеджеры);
    НоваяТаблица.ПутьКДанным = "Объект.пкМенеджеры";
	
    НоваяКолонкаТаблицы             = Элементы.Добавить("пкМенеджерыМенеджер", Тип("ПолеФормы"), Элементы.пкМенеджеры);
    НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаТаблицы.ПутьКДанным = "Объект.пкМенеджеры.Менеджер";
    НоваяКолонкаТаблицы.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    
    НоваяКолонкаТаблицы             = Элементы.Добавить("пкМенеджерыПодразделение", Тип("ПолеФормы"), Элементы.пкМенеджеры);
    НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаТаблицы.ПутьКДанным = "Объект.пкМенеджеры.Подразделение";
    НоваяКолонкаТаблицы.ТолькоПросмотр = Истина;
	
	//Для Каждого Строка ИЗ Объект.пкМенеджеры Цикл
	//    Строка.Подразделение = Строка.Менеджер.Подразделение;       
	//КонецЦикла;    
	
	НоваяГруппа				= Элементы.Добавить("пкГруппаОбъектыСтроительства", Тип("ГруппаФормы"), Элементы.ГруппаСтраницы); 
	НоваяГруппа.Вид			= ВидГруппыФормы.Страница;
	НоваяГруппа.Группировка	= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НоваяГруппа.Заголовок	= "Объекты строительства";
	
    НоваяТаблица						= Элементы.Добавить("пкОбъектыСтроительства", Тип("ТаблицаФормы"), Элементы.пкГруппаОбъектыСтроительства);
    НоваяТаблица.ПутьКДанным			= "Объект.пкОбъектыСтроительства";
	НоваяТаблица.АвтоВводНовойСтроки	= Ложь;
    //НоваяТаблица.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
	
    НоваяКолонкаТаблицы             = Элементы.Добавить("ОбъектыСтроительстваОбъектСтроительства", Тип("ПолеФормы"), Элементы.пкОбъектыСтроительства);
    НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаТаблицы.ПутьКДанным = "Объект.пкОбъектыСтроительства.ОбъектСтроительства";
	НоваяКолонкаТаблицы.Заголовок	= "Объект строительства";
    НоваяКолонкаТаблицы.УстановитьДействие("НачалоВыбора", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    
    НоваяКолонкаТаблицы             = Элементы.Добавить("ОбъектыСтроительстваКонтактноеЛицо", Тип("ПолеФормы"), Элементы.пкОбъектыСтроительства);
    НоваяКолонкаТаблицы.Вид         = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаТаблицы.ПутьКДанным = "Объект.пкОбъектыСтроительства.КонтактноеЛицо";
    
    НоваяГруппа				= Элементы.Добавить("пкГруппаОГРНОКПО", Тип("ГруппаФормы"), Элементы.ГруппаСтраницаРоссийскогоКонтрагента); 
	НоваяГруппа.Вид			= ВидГруппыФормы.ОбычнаяГруппа;
    НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.Группировка	= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
    НоваяГруппа.ОтображатьЗаголовок = Ложь;
    
    НовоеПоле             = Элементы.Добавить("пкОГРН", Тип("ПолеФормы"), Элементы.пкГруппаОГРНОКПО);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкОГРН";
    
    Элементы.Переместить(Элементы.КодПоОКПО, Элементы.пкГруппаОГРНОКПО);
        
    НовоеПоле             = Элементы.Добавить("пкПоручитель", Тип("ПолеФормы"), Элементы.ГруппаОбщаяИнформация);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкПоручитель";
    
	НоваяГруппа				= Элементы.Добавить("пкГруппаВремяДоставки", Тип("ГруппаФормы"), Элементы.ГруппаОбщаяИнформация); 
	НоваяГруппа.Вид			= ВидГруппыФормы.ОбычнаяГруппа;
    НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.Группировка	= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
    НоваяГруппа.ОтображатьЗаголовок = Ложь;
    
    НовоеПоле             = Элементы.Добавить("пкВремяДоставкиС", Тип("ПолеФормы"), Элементы.пкГруппаВремяДоставки);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкВремяДоставкиС";
    НовоеПоле.Заголовок   = "Желаемое время доставки с";
    НовоеПоле.Ширина      = 6;
    НовоеПоле.РастягиватьПоГоризонтали = Ложь;	
    НовоеПоле.КнопкаВыпадающегоСписка  = Истина;
    НовоеПоле.ВысотаЗаголовка          = 2;
    НовоеПоле.ПоложениеЗаголовка       = ПоложениеЗаголовкаЭлементаФормы.Лево;
    
    НовоеПоле             = Элементы.Добавить("пкВремяДоставкиПо", Тип("ПолеФормы"), Элементы.пкГруппаВремяДоставки);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкВремяДоставкиПо";
    НовоеПоле.Заголовок   = "по";
    НовоеПоле.Ширина      = 6;
    НовоеПоле.РастягиватьПоГоризонтали = Ложь;	
    НовоеПоле.КнопкаВыпадающегоСписка  = Истина;
    
    ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.пкВремяДоставкиС);
	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.пкВремяДоставкиПо);
    
	НоваяГруппа				= Элементы.Добавить("пкГруппаСтатусКлассификация", Тип("ГруппаФормы"), Элементы.ГруппаОбщаяИнформация); 
	НоваяГруппа.Вид			= ВидГруппыФормы.ОбычнаяГруппа;
    НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.Группировка	= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
    НоваяГруппа.ОтображатьЗаголовок = Ложь;
    
    НовоеПоле             = Элементы.Добавить("пкСтатус", Тип("ПолеФормы"), Элементы.пкГруппаСтатусКлассификация);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкСтатус";
    
    НовоеПоле             = Элементы.Добавить("пкКласс", Тип("ПолеФормы"), Элементы.пкГруппаСтатусКлассификация);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкКласс";
    
    НовоеПоле             = Элементы.Добавить("пкНадежность", Тип("ПолеФормы"), Элементы.ГруппаОбщаяИнформация);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкНадежность";
    
    Если Объект.Клиент И НЕ РольДоступна("ПолныеПрава") И НЕ РольДоступна("пкПолныеПрава") И НЕ РольДоступна("пкИзменениеКлассаИДопИнформацииОКлиенте") Тогда
        Если НЕ Объект.Поставщик ИЛИ НЕ РольДоступна("пкИзменениеКлассаИДопИнформацииОПоставщике") И НЕ ПроверитьВхождениеПользователяВГруппупкИзменениеДополнительнойИнформацииКонтрагентаРарус() Тогда
            Элементы.пкКласс.ТолькоПросмотр                  = Истина;
            Элементы.ДополнительнаяИнформация.ТолькоПросмотр = Истина;
        КонецЕсли;
    КонецЕсли;  
    
    Если Объект.Поставщик И НЕ РольДоступна("ПолныеПрава") И НЕ РольДоступна("пкИзменениеКлассаИДопИнформацииОПоставщике") Тогда
        Если НЕ Объект.Клиент ИЛИ НЕ РольДоступна("пкИзменениеКлассаИДопИнформацииОКлиенте") Тогда
            Элементы.пкКласс.ТолькоПросмотр                  = Истина;
            Элементы.ДополнительнаяИнформация.ТолькоПросмотр = Истина;
        КонецЕсли;    
    КонецЕсли;    
        
//Рарус Владимир Подрезов 01.01.2017
    НовоеПоле             = Элементы.Добавить("пкПодразделение", Тип("ПолеФормы"), Элементы.ГруппаОбщаяИнформация);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкПодразделение";
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 15.06.01.2017
    Элементы.ДополнительнаяИнформация.ТолькоПросмотр = Не (ПроверитьВхождениеПользователяВГруппупкИзменениеДополнительнойИнформацииКонтрагентаРарус());// ИЛИ РольДоступна("ПолныеПрава"));
//Рарус Владимир Подрезов Конец
КонецПроцедуры

Процедура ЗаполнитьКоллекциюСпособовДляОбъекта(пкСписокСпособыПогрузкиРазгрузкиТехники, Объект)
	
	пкСписокСпособыПогрузкиРазгрузкиТехники.Очистить();
	
	ЗапросСпособыОбъекты = Новый Запрос;
	ЗапросСпособыОбъекты.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Способы.Ссылка КАК СпособПогрузкиРазгрузки,
	|	ЕСТЬNULL(пкДоступностьСпособовПогрузкиИРазгрузкиТехники.Доступен, Ложь) КАК Доступен
	|ИЗ
	|	Справочник.пкСпособыПогрузкиРазгрузкиТехники КАК Способы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкДоступностьСпособовПогрузкиИРазгрузкиТехники КАК пкДоступностьСпособовПогрузкиИРазгрузкиТехники
	|		ПО Способы.Ссылка = пкДоступностьСпособовПогрузкиИРазгрузкиТехники.СпособПогрузкиРазгрузки
	|			И (пкДоступностьСпособовПогрузкиИРазгрузкиТехники.Объект = &Объект)";
	ЗапросСпособыОбъекты.УстановитьПараметр("Объект", Объект);
	табСпособы = ЗапросСпособыОбъекты.Выполнить().Выгрузить();
	
	Для Каждого текСпособ Из табСпособы Цикл
		НовыйЭлементКоллекции = пкСписокСпособыПогрузкиРазгрузкиТехники.Добавить();
		НовыйЭлементКоллекции.Доступен 					= текСпособ.Доступен;
		НовыйЭлементКоллекции.СпособПогрузкиРазгрузки	= текСпособ.СпособПогрузкиРазгрузки;
	КонецЦикла;
	
КонецПроцедуры
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов УАТ 3.1.1 04.08.2016
Процедура ПриСозданииНаСервере_Справочник_уатМоделиТС_ФормаЭлемента(Форма, Отказ, СтандартнаяОбработка)
КонецПроцедуры
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов УАТ 3.5.1 09.08.2016
Процедура ПриСозданииНаСервере_Документ_уатВводВЭксплуатациюТСиОборудования_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
	
	//Добавленный реквизит пкВОдитель документа уатВводВЭксплуатациюТСиОборудования
	НовоеПолеВвода             = Элементы.Добавить("пкВодитель", Тип("ПолеФормы"), Элементы.ГруппаШапкаЛевая);
    НовоеПолеВвода.Вид         = ВидПоляФормы.ПолеВвода;   
    НовоеПолеВвода.ПутьКДанным = "Объект.пкВодитель";
	
КонецПроцедуры
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов УАТ 3.3.2 09.08.2016
Процедура ПриСозданииНаСервере_Документ_уатЗаправкаГСМ_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
	
	//Добавленный реквизит пкЧек тч Заправки документа уатЗаправкаГСМ
	НовоеПолеВвода             = Элементы.Добавить("пкЧек", Тип("ПолеФормы"), Элементы.Заправки);
    НовоеПолеВвода.Вид         = ВидПоляФормы.ПолеВвода;   
    НовоеПолеВвода.ПутьКДанным = "Объект.Заправки.пкЧек";
	
	НовоеПолеВвода             = Элементы.Добавить("пкЧекПервойСтроки", Тип("ПолеФормы"), Элементы.ЗаправкиЛеваяКолонка);
    НовоеПолеВвода.Вид         = ВидПоляФормы.ПолеВвода;   
    НовоеПолеВвода.ПутьКДанным = "Элементы.Заправки.ТекущиеДанные.пкЧек";
	
КонецПроцедуры
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов Закупки 2.6.1 11.08.2016
Процедура ПриСозданииНаСервере_Документ_ЗаказПоставщику_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
	
	НоваяГруппа             = Элементы.Вставить("пкГруппаДоставка", Тип("ГруппаФормы"), Элементы.СтраницаДоставка, Элементы.СтраницыДоставки); 
	НоваяГруппа.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	НоваяГруппа.ОтображатьЗаголовок = Ложь;
    
	//Добавленный реквизиты пкСтоимостьДоставки,пкДатаОтправки,пкНомерЗаявкиВТранспортную документа ЗаказПоставщику
	НовоеПолеВвода             = Элементы.Добавить("пкСтоимостьДоставки", Тип("ПолеФормы"), Элементы.пкГруппаДоставка);
    НовоеПолеВвода.Вид         = ВидПоляФормы.ПолеВвода;   
    НовоеПолеВвода.ПутьКДанным = "Объект.пкСтоимостьДоставки";
	
	НовоеПолеВвода             = Элементы.Добавить("пкДатаОтправки", Тип("ПолеФормы"), Элементы.пкГруппаДоставка);
    НовоеПолеВвода.Вид         = ВидПоляФормы.ПолеВвода;   
    НовоеПолеВвода.ПутьКДанным = "Объект.пкДатаОтправки";
	
	НовоеПолеВвода             = Элементы.Добавить("пкНомерЗаявкиВТранспортную", Тип("ПолеФормы"), Элементы.пкГруппаДоставка);
    НовоеПолеВвода.Вид         = ВидПоляФормы.ПолеВвода;   
    НовоеПолеВвода.ПутьКДанным = "Объект.пкНомерЗаявкиВТранспортную";
	
КонецПроцедуры
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов Закупки 2.6.2 11.08.2016
Процедура ПриСозданииНаСервере_Документ_ЗаказНаПеремещение_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
	
	НоваяГруппа             = Элементы.Вставить("пкГруппаДоставка", Тип("ГруппаФормы"), Элементы.СтраницаДоставка, Элементы.СтраницыДоставки); 
	НоваяГруппа.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	НоваяГруппа.ОтображатьЗаголовок = Ложь;
    
	//Добавленный реквизиты пкСтоимостьДоставки,пкДатаОтправки,пкНомерЗаявкиВТранспортную документа ЗаказПоставщику
	НовоеПолеВвода             = Элементы.Добавить("пкСтоимостьДоставки", Тип("ПолеФормы"), Элементы.пкГруппаДоставка);
    НовоеПолеВвода.Вид         = ВидПоляФормы.ПолеВвода;   
    НовоеПолеВвода.ПутьКДанным = "Объект.пкСтоимостьДоставки";
	
	НовоеПолеВвода             = Элементы.Добавить("пкДатаОтправки", Тип("ПолеФормы"), Элементы.пкГруппаДоставка);
    НовоеПолеВвода.Вид         = ВидПоляФормы.ПолеВвода;   
    НовоеПолеВвода.ПутьКДанным = "Объект.пкДатаОтправки";
	
	НовоеПолеВвода             = Элементы.Добавить("пкНомерЗаявкиВТранспортную", Тип("ПолеФормы"), Элементы.пкГруппаДоставка);
    НовоеПолеВвода.Вид         = ВидПоляФормы.ПолеВвода;   
    НовоеПолеВвода.ПутьКДанным = "Объект.пкНомерЗаявкиВТранспортную";
	
КонецПроцедуры
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 07.12.2016
Процедура ПриСозданииНаСервере_Документ_ЗаказНаВнутреннееПотребление_ФормаСписка(Форма, Отказ, СтандартнаяОбработка)
    
    Элементы = Форма.Элементы;
    
	НоваяКолонкаДинамическогоСписка         	    = Элементы.Добавить("пкИнициатор", Тип("ПолеФормы"), Элементы.Список);
    НоваяКолонкаДинамическогоСписка.Вид 	        = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаДинамическогоСписка.ПутьКДанным		= "Список.Ссылка.пкИнициатор";
	
	НоваяКолонкаДинамическогоСписка         	    = Элементы.Добавить("пкЗакупщик", Тип("ПолеФормы"), Элементы.Список);
    НоваяКолонкаДинамическогоСписка.Вид 	        = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаДинамическогоСписка.ПутьКДанным		= "Список.Ссылка.пкЗакупщик";
	
	НоваяКолонкаДинамическогоСписка         	    = Элементы.Добавить("пкТипОперации", Тип("ПолеФормы"), Элементы.Список);
    НоваяКолонкаДинамическогоСписка.Вид 	        = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаДинамическогоСписка.ПутьКДанным		= "Список.Ссылка.пкТипОперации";
	
	НоваяКолонкаДинамическогоСписка         	    = Элементы.Добавить("пкПоставщик", Тип("ПолеФормы"), Элементы.Список);
    НоваяКолонкаДинамическогоСписка.Вид 	        = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаДинамическогоСписка.ПутьКДанным		= "Список.Ссылка.пкПоставщик";
	
	НоваяКолонкаДинамическогоСписка         	    = Элементы.Добавить("пкДоговор", Тип("ПолеФормы"), Элементы.Список);
    НоваяКолонкаДинамическогоСписка.Вид 	        = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаДинамическогоСписка.ПутьКДанным		= "Список.Ссылка.пкДоговор";
	
КонецПроцедуры 
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов Закупки 2.6.3 12.08.2016
Процедура ПриСозданииНаСервере_Документ_ЗаказНаВнутреннееПотребление_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
	
	СтраницаДоставка				= Элементы.Вставить("пкСтраницаДоставка", Тип("ГруппаФормы"), Элементы.ГруппаСтраницы, Элементы.ГруппаДополнительно); 
	СтраницаДоставка.Вид			= ВидГруппыФормы.Страница;
	СтраницаДоставка.Группировка	= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	СтраницаДоставка.Заголовок		= "Доставка";
	
		НоваяГруппа						= Элементы.Вставить("пкГруппаСпособДоставкиПеревозчик", Тип("ГруппаФормы"), Элементы.пкСтраницаДоставка);
		НоваяГруппа.Вид					= ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппа.Отображение			= ОтображениеОбычнойГруппы.Нет;
		НоваяГруппа.Группировка			= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		НоваяГруппа.ОтображатьЗаголовок	= Ложь;
    
			НоваяДекорация				= Элементы.Добавить("пкДекорацияСпособДоставки", Тип("ДекорацияФормы"), Элементы.пкГруппаСпособДоставкиПеревозчик);
			НоваяДекорация.Заголовок	= "Способ доставки:";
	
			НовоеПолеВвода						= Элементы.Добавить("пкСпособДоставки", Тип("ПолеФормы"), Элементы.пкГруппаСпособДоставкиПеревозчик);
		    НовоеПолеВвода.Вид					= ВидПоляФормы.ПолеВвода;   
		    НовоеПолеВвода.ПутьКДанным			= "Объект.пкСпособДоставки";
			НовоеПолеВвода.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Нет;
			НовоеПолеВвода.УстановитьДействие("ПриИзменении", "пкСпособМестоДоставкиПеревозчикПриИзменении");
			//НовоеПолеВвода.СписокВыбора.Добавить(Перечисления.СпособыДоставки.Самовывоз, "Самовывоз (с нашего склада)");
			НовоеПолеВвода.СписокВыбора.Добавить(Перечисления.СпособыДоставки.ДоКлиента, "Наша транспортная служба до получателя");
			НовоеПолеВвода.СписокВыбора.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу, "Наша транспортная служба до перевозчика");
			НовоеПолеВвода.СписокВыбора.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчика, "Перевозчик (с нашего склада)");
			НовоеПолеВвода.СписокВыбора.Добавить(Перечисления.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки, "На усмотрение транспортной службы");
			НовоеПолеВвода.РежимВыбораИзСписка	= Истина;
	
			СтраницаПеревозчик						= Элементы.Вставить("пкСтраницыПеревозчик", Тип("ГруппаФормы"), Элементы.пкГруппаСпособДоставкиПеревозчик); 
			СтраницаПеревозчик.Вид					= ВидГруппыФормы.Страницы;
			СтраницаПеревозчик.ОтображениеСтраниц	= ОтображениеСтраницФормы.Нет;
			
				НоваяГруппа				= Элементы.Вставить("пкСтраницаПеревозчик", Тип("ГруппаФормы"), Элементы.пкСтраницыПеревозчик);
				НоваяГруппа.Вид			= ВидГруппыФормы.Страница;
				НоваяГруппа.Группировка	= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		    
					НовоеПолеВвода						= Элементы.Добавить("пкПеревозчикПартнер", Тип("ПолеФормы"), Элементы.пкСтраницаПеревозчик);
				    НовоеПолеВвода.Вид					= ВидПоляФормы.ПолеВвода;   
				    НовоеПолеВвода.ПутьКДанным			= "Объект.пкПеревозчикПартнер";
					НовоеПолеВвода.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Нет;
					
				НоваяГруппа				= Элементы.Вставить("пкСтраницаПеревозчикПусто", Тип("ГруппаФормы"), Элементы.пкСтраницыПеревозчик);
				НоваяГруппа.Вид			= ВидГруппыФормы.Страница;
				НоваяГруппа.Группировка	= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		    
					НоваяДекорация				= Элементы.Добавить("пкДекорацияПусто", Тип("ДекорацияФормы"), Элементы.пкСтраницаПеревозчикПусто);
					НоваяДекорация.Заголовок	= "";
			
		НоваяГруппа						= Элементы.Вставить("пкГруппаДоставка", Тип("ГруппаФормы"), Элементы.пкСтраницаДоставка); 
		НоваяГруппа.Вид					= ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппа.Отображение			= ОтображениеОбычнойГруппы.Нет;
		НоваяГруппа.Группировка			= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		НоваяГруппа.ОтображатьЗаголовок	= Ложь;
    
			//Добавленный реквизиты пкСтоимостьДоставки,пкДатаОтправки,пкНомерЗаявкиВТранспортную документа ЗаказПоставщику
			НовоеПолеВвода             = Элементы.Добавить("пкСтоимостьДоставки", Тип("ПолеФормы"), Элементы.пкГруппаДоставка);
		    НовоеПолеВвода.Вид         = ВидПоляФормы.ПолеВвода;   
		    НовоеПолеВвода.ПутьКДанным = "Объект.пкСтоимостьДоставки";
			
			НовоеПолеВвода             = Элементы.Добавить("пкДатаОтправки", Тип("ПолеФормы"), Элементы.пкГруппаДоставка);
		    НовоеПолеВвода.Вид         = ВидПоляФормы.ПолеВвода;   
		    НовоеПолеВвода.ПутьКДанным = "Объект.пкДатаОтправки";
			
			НовоеПолеВвода             = Элементы.Добавить("пкНомерЗаявкиВТранспортную", Тип("ПолеФормы"), Элементы.пкГруппаДоставка);
		    НовоеПолеВвода.Вид         = ВидПоляФормы.ПолеВвода;   
		    НовоеПолеВвода.ПутьКДанным = "Объект.пкНомерЗаявкиВТранспортную";
	
		СтраницаДоставки					= Элементы.Вставить("пкСтраницыДоставки", Тип("ГруппаФормы"), Элементы.пкСтраницаДоставка); 
		СтраницаДоставки.Вид				= ВидГруппыФормы.Страницы;
		СтраницаДоставки.ОтображениеСтраниц	= ОтображениеСтраницФормы.Нет;
		
			НоваяГруппа				= Элементы.Вставить("пкСтраницаСамовывоз", Тип("ГруппаФормы"), Элементы.пкСтраницыДоставки);
			НоваяГруппа.Вид			= ВидГруппыФормы.Страница;
			НоваяГруппа.Группировка	= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			
				НоваяДекорация				= Элементы.Добавить("пкДекорацияАдрес", Тип("ДекорацияФормы"), Элементы.пкСтраницаСамовывоз);
				НоваяДекорация.Заголовок	= "Адрес доставки для печати:";
		
				НовоеПолеВвода							= Элементы.Добавить("пкАдресДоставкиСамовывоз", Тип("ПолеФормы"), Элементы.пкСтраницаСамовывоз);
			    НовоеПолеВвода.Вид						= ВидПоляФормы.ПолеВвода;   
			    НовоеПолеВвода.ПутьКДанным				= "Объект.пкАдресДоставки";
				НовоеПолеВвода.ПоложениеЗаголовка		= ПоложениеЗаголовкаЭлементаФормы.Нет;
				НовоеПолеВвода.КнопкаВыпадающегоСписка	= Истина;
				НовоеПолеВвода.КнопкаВыбора				= Истина;
				НовоеПолеВвода.УстановитьДействие("ПриИзменении", "пкАдресДоставкиПриИзменении");
				НовоеПолеВвода.УстановитьДействие("Очистка", "пкАдресДоставкиОчистка");
				НовоеПолеВвода.УстановитьДействие("НачалоВыбора", "пкАдресДоставкиНачалоВыбора");
				НовоеПолеВвода.УстановитьДействие("ОбработкаВыбора", "пкАдресДоставкиОбработкаВыбора");
		
			НоваяГруппа				= Элементы.Вставить("пкСтраницаДоставкаДоПолучателя", Тип("ГруппаФормы"), Элементы.пкСтраницыДоставки);
			НоваяГруппа.Вид			= ВидГруппыФормы.Страница;
			НоваяГруппа.Группировка	= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			
				НовоеПолеВвода							= Элементы.Добавить("пкАдресДоставкиПолучателя", Тип("ПолеФормы"), Элементы.пкСтраницаДоставкаДоПолучателя);
			    НовоеПолеВвода.Вид						= ВидПоляФормы.ПолеВвода;   
			    НовоеПолеВвода.ПутьКДанным				= "Объект.пкАдресДоставки";
				НовоеПолеВвода.КнопкаВыпадающегоСписка	= Истина;
				НовоеПолеВвода.КнопкаВыбора				= Истина;
				НовоеПолеВвода.УстановитьДействие("ПриИзменении", "пкАдресДоставкиПриИзменении");
				НовоеПолеВвода.УстановитьДействие("Очистка", "пкАдресДоставкиОчистка");
				НовоеПолеВвода.УстановитьДействие("НачалоВыбора", "пкАдресДоставкиНачалоВыбора");
				НовоеПолеВвода.УстановитьДействие("ОбработкаВыбора", "пкАдресДоставкиОбработкаВыбора");
			
				НоваяГруппа						= Элементы.Вставить("пкГруппаЗонаВремя", Тип("ГруппаФормы"), Элементы.пкСтраницаДоставкаДоПолучателя); 
				НоваяГруппа.Вид					= ВидГруппыФормы.ОбычнаяГруппа;
				НоваяГруппа.Отображение			= ОтображениеОбычнойГруппы.Нет;
				НоваяГруппа.Группировка			= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
				НоваяГруппа.ОтображатьЗаголовок	= Ложь;
		    
					НовоеПолеВвода             = Элементы.Добавить("пкЗонаДоставкиПолучателя", Тип("ПолеФормы"), Элементы.пкГруппаЗонаВремя);
				    НовоеПолеВвода.Вид         = ВидПоляФормы.ПолеВвода;   
				    НовоеПолеВвода.ПутьКДанным = "Объект.пкЗонаДоставки";
			
					НовоеПолеВвода             = Элементы.Добавить("пкВремяДоставкиС", Тип("ПолеФормы"), Элементы.пкГруппаЗонаВремя);
				    НовоеПолеВвода.Вид         = ВидПоляФормы.ПолеВвода;   
				    НовоеПолеВвода.ПутьКДанным = "Объект.пкВремяДоставкиС";
			
					НовоеПолеВвода             = Элементы.Добавить("пкВремяДоставкиПо", Тип("ПолеФормы"), Элементы.пкГруппаЗонаВремя);
				    НовоеПолеВвода.Вид         = ВидПоляФормы.ПолеВвода;   
				    НовоеПолеВвода.ПутьКДанным = "Объект.пкВремяДоставкиПо";
			
				НоваяГруппа						= Элементы.Вставить("пкГруппаДоставкаДоПолучателяДопИнфо", Тип("ГруппаФормы"), Элементы.пкСтраницаДоставкаДоПолучателя); 
				НоваяГруппа.Вид					= ВидГруппыФормы.ОбычнаяГруппа;
				НоваяГруппа.Отображение			= ОтображениеОбычнойГруппы.Нет;
				НоваяГруппа.Группировка			= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
				НоваяГруппа.ОтображатьЗаголовок	= Ложь;
		    
					НовоеПолеВвода             = Элементы.Добавить("пкДополнительнаяИнформацияПоДоставке", Тип("ПолеФормы"), Элементы.пкГруппаДоставкаДоПолучателяДопИнфо);
				    НовоеПолеВвода.Вид         = ВидПоляФормы.ПолеВвода;   
				    НовоеПолеВвода.ПутьКДанным = "Объект.пкДополнительнаяИнформацияПоДоставке";
			
				НовоеПолеВвода						= Элементы.Добавить("пкОсобыеУсловияПеревозки", Тип("ПолеФормы"), Элементы.пкСтраницаДоставкаДоПолучателя);
			    НовоеПолеВвода.Вид					= ВидПоляФормы.ПолеФлажка;   
			    НовоеПолеВвода.ПутьКДанным			= "Объект.пкОсобыеУсловияПеревозки";
				НовоеПолеВвода.УстановитьДействие("ПриИзменении", "пкОсобыеУсловияПеревозкиПриИзмененииСервер");
				
				НовоеПолеВвода						= Элементы.Добавить("пкОсобыеУсловияПеревозкиОписание", Тип("ПолеФормы"), Элементы.пкСтраницаДоставкаДоПолучателя);
			    НовоеПолеВвода.Вид					= ВидПоляФормы.ПолеВвода;   
			    НовоеПолеВвода.ПутьКДанным			= "Объект.пкОсобыеУсловияПеревозкиОписание";
				
			НоваяГруппа				= Элементы.Вставить("пкСтраницаДоставкаПеревозчикомПоАдресу", Тип("ГруппаФормы"), Элементы.пкСтраницыДоставки);
			НоваяГруппа.Вид			= ВидГруппыФормы.Страница;
			НоваяГруппа.Группировка	= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			
				НовоеПолеВвода							= Элементы.Добавить("пкАдресДоставкиПеревозчика", Тип("ПолеФормы"), Элементы.пкСтраницаДоставкаПеревозчикомПоАдресу);
			    НовоеПолеВвода.Вид						= ВидПоляФормы.ПолеВвода;   
			    НовоеПолеВвода.ПутьКДанным				= "Объект.пкАдресДоставкиПеревозчика";
				НовоеПолеВвода.КнопкаВыпадающегоСписка	= Истина;
				НовоеПолеВвода.КнопкаВыбора				= Истина;
				НовоеПолеВвода.УстановитьДействие("ПриИзменении", "пкАдресДоставкиПриИзменении");
				НовоеПолеВвода.УстановитьДействие("Очистка", "пкАдресДоставкиОчистка");
				НовоеПолеВвода.УстановитьДействие("НачалоВыбора", "пкАдресДоставкиНачалоВыбора");
				НовоеПолеВвода.УстановитьДействие("ОбработкаВыбора", "пкАдресДоставкиОбработкаВыбора");
			
				НоваяГруппа						= Элементы.Вставить("пкГруппаЗонаВремя1", Тип("ГруппаФормы"), Элементы.пкСтраницаДоставкаПеревозчикомПоАдресу); 
				НоваяГруппа.Вид					= ВидГруппыФормы.ОбычнаяГруппа;
				НоваяГруппа.Отображение			= ОтображениеОбычнойГруппы.Нет;
				НоваяГруппа.Группировка			= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
				НоваяГруппа.ОтображатьЗаголовок	= Ложь;
		    
					НовоеПолеВвода             = Элементы.Добавить("пкЗонаДоставкиПолучателя1", Тип("ПолеФормы"), Элементы.пкГруппаЗонаВремя1);
				    НовоеПолеВвода.Вид         = ВидПоляФормы.ПолеВвода;   
				    НовоеПолеВвода.ПутьКДанным = "Объект.пкЗонаДоставки";
			
					НовоеПолеВвода             = Элементы.Добавить("пкВремяДоставкиС1", Тип("ПолеФормы"), Элементы.пкГруппаЗонаВремя1);
				    НовоеПолеВвода.Вид         = ВидПоляФормы.ПолеВвода;   
				    НовоеПолеВвода.ПутьКДанным = "Объект.пкВремяДоставкиС";
			
					НовоеПолеВвода             = Элементы.Добавить("пкВремяДоставкиПо1", Тип("ПолеФормы"), Элементы.пкГруппаЗонаВремя1);
				    НовоеПолеВвода.Вид         = ВидПоляФормы.ПолеВвода;   
				    НовоеПолеВвода.ПутьКДанным = "Объект.пкВремяДоставкиПо";
			
				НоваяГруппа						= Элементы.Вставить("пкГруппаДоставкаДоПолучателяДопИнфо1", Тип("ГруппаФормы"), Элементы.пкСтраницаДоставкаПеревозчикомПоАдресу); 
				НоваяГруппа.Вид					= ВидГруппыФормы.ОбычнаяГруппа;
				НоваяГруппа.Отображение			= ОтображениеОбычнойГруппы.Нет;
				НоваяГруппа.Группировка			= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
				НоваяГруппа.ОтображатьЗаголовок	= Ложь;
		    
					НовоеПолеВвода             = Элементы.Добавить("пкДополнительнаяИнформацияПоДоставке1", Тип("ПолеФормы"), Элементы.пкГруппаДоставкаДоПолучателяДопИнфо1);
				    НовоеПолеВвода.Вид         = ВидПоляФормы.ПолеВвода;   
				    НовоеПолеВвода.ПутьКДанным = "Объект.пкДополнительнаяИнформацияПоДоставке";
			
				НовоеПолеВвода						= Элементы.Добавить("пкАдресДоставкиПолучателя1", Тип("ПолеФормы"), Элементы.пкСтраницаДоставкаПеревозчикомПоАдресу);
			    НовоеПолеВвода.Вид					= ВидПоляФормы.ПолеФлажка;   
			    НовоеПолеВвода.ПутьКДанным			= "Объект.пкАдресДоставки";
				НовоеПолеВвода.УстановитьДействие("ПриИзменении", "пкОсобыеУсловияПеревозкиПриИзмененииСервер");
				
				НовоеПолеВвода						= Элементы.Добавить("пкОсобыеУсловияПеревозки1", Тип("ПолеФормы"), Элементы.пкСтраницаДоставкаПеревозчикомПоАдресу);
			    НовоеПолеВвода.Вид					= ВидПоляФормы.ПолеФлажка;   
			    НовоеПолеВвода.ПутьКДанным			= "Объект.пкОсобыеУсловияПеревозки";
				НовоеПолеВвода.УстановитьДействие("ПриИзменении", "пкОсобыеУсловияПеревозкиПриИзмененииСервер");
				
				НовоеПолеВвода						= Элементы.Добавить("пкОсобыеУсловияПеревозкиОписание1", Тип("ПолеФормы"), Элементы.пкСтраницаДоставкаПеревозчикомПоАдресу);
			    НовоеПолеВвода.Вид					= ВидПоляФормы.ПолеВвода;   
			    НовоеПолеВвода.ПутьКДанным			= "Объект.пкОсобыеУсловияПеревозкиОписание";
				
			НоваяГруппа				= Элементы.Вставить("пкСтраницаДоставкаПеревозчиком", Тип("ГруппаФормы"), Элементы.пкСтраницыДоставки);
			НоваяГруппа.Вид			= ВидГруппыФормы.Страница;
			НоваяГруппа.Группировка	= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			
				НовоеПолеВвода							= Элементы.Добавить("пкАдресДоставкиПолучателя2", Тип("ПолеФормы"), Элементы.пкСтраницаДоставкаПеревозчиком);
			    НовоеПолеВвода.Вид						= ВидПоляФормы.ПолеВвода;   
			    НовоеПолеВвода.ПутьКДанным				= "Объект.пкАдресДоставки";
				НовоеПолеВвода.КнопкаВыпадающегоСписка	= Истина;
				НовоеПолеВвода.КнопкаВыбора				= Истина;
				НовоеПолеВвода.УстановитьДействие("ПриИзменении", "пкАдресДоставкиПриИзменении");
				НовоеПолеВвода.УстановитьДействие("Очистка", "пкАдресДоставкиОчистка");
				НовоеПолеВвода.УстановитьДействие("НачалоВыбора", "пкАдресДоставкиНачалоВыбора");
				НовоеПолеВвода.УстановитьДействие("ОбработкаВыбора", "пкАдресДоставкиОбработкаВыбора");
			
				НоваяГруппа						= Элементы.Вставить("пкГруппаДоставкаДоПолучателяДопИнфо2", Тип("ГруппаФормы"), Элементы.пкСтраницаДоставкаПеревозчиком); 
				НоваяГруппа.Вид					= ВидГруппыФормы.ОбычнаяГруппа;
				НоваяГруппа.Отображение			= ОтображениеОбычнойГруппы.Нет;
				НоваяГруппа.Группировка			= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
				НоваяГруппа.ОтображатьЗаголовок	= Ложь;
		    
					НовоеПолеВвода             = Элементы.Добавить("пкДополнительнаяИнформацияПоДоставке2", Тип("ПолеФормы"), Элементы.пкГруппаДоставкаДоПолучателяДопИнфо2);
				    НовоеПолеВвода.Вид         = ВидПоляФормы.ПолеВвода;   
				    НовоеПолеВвода.ПутьКДанным = "Объект.пкДополнительнаяИнформацияПоДоставке";
			
				НовоеПолеВвода						= Элементы.Добавить("пкОсобыеУсловияПеревозкиДоставкаПеревозчиком", Тип("ПолеФормы"), Элементы.пкСтраницаДоставкаПеревозчиком);
			    НовоеПолеВвода.Вид					= ВидПоляФормы.ПолеФлажка;   
			    НовоеПолеВвода.ПутьКДанным			= "Объект.пкОсобыеУсловияПеревозки";
				НовоеПолеВвода.УстановитьДействие("ПриИзменении", "пкОсобыеУсловияПеревозкиПриИзмененииСервер");
				
				НовоеПолеВвода						= Элементы.Добавить("пкОсобыеУсловияПеревозкиОписаниеДоставкаПеревозчиком", Тип("ПолеФормы"), Элементы.пкСтраницаДоставкаПеревозчиком);
			    НовоеПолеВвода.Вид					= ВидПоляФормы.ПолеВвода;   
			    НовоеПолеВвода.ПутьКДанным			= "Объект.пкОсобыеУсловияПеревозкиОписание";
				
	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.пкВремяДоставкиС);
	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.пкВремяДоставкиПо);
	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.пкВремяДоставкиС1);
	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.пкВремяДоставкиПо1);
	
	//Добавленные реквизиты пкЦенаПлан и пкСуммаСНДС тч Товары документа ЗаказНаВнутреннеПотребление для задачи раздела Закупки 2.4.3
	НовоеПолеВвода             = Элементы.Вставить("пкЦенаПлан", Тип("ПолеФормы"), Элементы.Товары, Элементы.ТоварыКатегорияЭксплуатации);
    НовоеПолеВвода.Вид         = ВидПоляФормы.ПолеВвода;   
    НовоеПолеВвода.ПутьКДанным = "Объект.Товары.пкЦенаПлан";
	НовоеПолеВвода.УстановитьДействие("ПриИзменении", "ТоварыпкЦенаПланПриИзменении");
	
	НовоеПолеВвода             = Элементы.Вставить("пкСуммаСНДС", Тип("ПолеФормы"), Элементы.Товары, Элементы.ТоварыКатегорияЭксплуатации);
    НовоеПолеВвода.Вид         = ВидПоляФормы.ПолеВвода;   
    НовоеПолеВвода.ПутьКДанным = "Объект.Товары.пкСуммаСНДС";
	
//Рарус Владимир Подрезов 07.12.2016
	Страница				= Элементы.Вставить("пкСтраницаСогласование", Тип("ГруппаФормы"), Элементы.ГруппаСтраницы, Элементы.ГруппаТовары); 
	Страница.Вид			= ВидГруппыФормы.Страница;
	Страница.Группировка	= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Страница.Заголовок		= "Согласование";
	
		НоваяГруппа						= Элементы.Вставить("пкГруппаСогласованиеШапка", Тип("ГруппаФормы"), Элементы.пкСтраницаСогласование);
		НоваяГруппа.Вид					= ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппа.Отображение			= ОтображениеОбычнойГруппы.Нет;
		НоваяГруппа.Группировка			= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		НоваяГруппа.ОтображатьЗаголовок	= Ложь;
    
			НоваяГруппа						= Элементы.Вставить("пкГруппаСогласованиеЛево", Тип("ГруппаФормы"), Элементы.пкГруппаСогласованиеШапка);
			НоваяГруппа.Вид					= ВидГруппыФормы.ОбычнаяГруппа;
			НоваяГруппа.Отображение			= ОтображениеОбычнойГруппы.Нет;
			НоваяГруппа.Группировка			= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			НоваяГруппа.ОтображатьЗаголовок	= Ложь;
		
				НовоеПолеВвода						= Элементы.Добавить("пкТипОперации", Тип("ПолеФормы"), Элементы.пкГруппаСогласованиеЛево);
			    НовоеПолеВвода.Вид					= ВидПоляФормы.ПолеВвода;   
			    НовоеПолеВвода.ПутьКДанным			= "Объект.пкТипОперации";
		
				НовоеПолеВвода						= Элементы.Добавить("пкИнициатор", Тип("ПолеФормы"), Элементы.пкГруппаСогласованиеЛево);
			    НовоеПолеВвода.Вид					= ВидПоляФормы.ПолеВвода;   
			    НовоеПолеВвода.ПутьКДанным			= "Объект.пкИнициатор";
		
				НовоеПолеВвода						= Элементы.Добавить("пкЗакупщик", Тип("ПолеФормы"), Элементы.пкГруппаСогласованиеЛево);
			    НовоеПолеВвода.Вид					= ВидПоляФормы.ПолеВвода;   
			    НовоеПолеВвода.ПутьКДанным			= "Объект.пкЗакупщик";
	    
			НоваяГруппа						= Элементы.Вставить("пкГруппаСогласованиеПраво", Тип("ГруппаФормы"), Элементы.пкГруппаСогласованиеШапка);
			НоваяГруппа.Вид					= ВидГруппыФормы.ОбычнаяГруппа;
			НоваяГруппа.Отображение			= ОтображениеОбычнойГруппы.Нет;
			НоваяГруппа.Группировка			= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			НоваяГруппа.ОтображатьЗаголовок	= Ложь;
		
				НовоеПолеВвода						= Элементы.Добавить("пкПоставщик", Тип("ПолеФормы"), Элементы.пкГруппаСогласованиеПраво);
			    НовоеПолеВвода.Вид					= ВидПоляФормы.ПолеВвода;   
			    НовоеПолеВвода.ПутьКДанным			= "Объект.пкПоставщик";
		
				НовоеПолеВвода						= Элементы.Добавить("пкДоговор", Тип("ПолеФормы"), Элементы.пкГруппаСогласованиеПраво);
			    НовоеПолеВвода.Вид					= ВидПоляФормы.ПолеВвода;   
			    НовоеПолеВвода.ПутьКДанным			= "Объект.пкДоговор";
		
				НовоеПолеВвода						= Элементы.Добавить("пкДоговорСтатус", Тип("ПолеФормы"), Элементы.пкГруппаСогласованиеПраво);
			    НовоеПолеВвода.Вид					= ВидПоляФормы.ПолеНадписи;   
			    НовоеПолеВвода.ПутьКДанным			= "Объект.пкДоговор.Статус";
				НовоеПолеВвода.Заголовок			= "Статус";
		
		НовыйСписок  = Элементы.Добавить("пкСогласование", Тип("ТаблицаФормы"), Элементы.пкСтраницаСогласование);
	    НовыйСписок.ПутьКДанным 			= "Объект.пкСогласование";
		
		НоваяКолонкаДинамическогоСписка         	    = Элементы.Добавить("пкСогласованиеСодержание", Тип("ПолеФормы"), Элементы.пкСогласование);
	    НоваяКолонкаДинамическогоСписка.Вид 	        = ВидПоляФормы.ПолеВвода;   
	    НоваяКолонкаДинамическогоСписка.ПутьКДанным		= "Объект.пкСогласование.Содержание";
		
		НоваяКолонкаДинамическогоСписка         	    = Элементы.Добавить("пкСогласованиеНоменклатура", Тип("ПолеФормы"), Элементы.пкСогласование);
	    НоваяКолонкаДинамическогоСписка.Вид 	        = ВидПоляФормы.ПолеВвода;   
	    НоваяКолонкаДинамическогоСписка.ПутьКДанным		= "Объект.пкСогласование.Номенклатура";
		
		НоваяКолонкаДинамическогоСписка         	    = Элементы.Добавить("пкСогласованиеКоличествоУпаковок", Тип("ПолеФормы"), Элементы.пкСогласование);
	    НоваяКолонкаДинамическогоСписка.Вид 	        = ВидПоляФормы.ПолеВвода;   
	    НоваяКолонкаДинамическогоСписка.ПутьКДанным		= "Объект.пкСогласование.КоличествоУпаковок";
		
		НоваяКолонкаДинамическогоСписка         	    = Элементы.Добавить("пкСогласованиеУпаковка", Тип("ПолеФормы"), Элементы.пкСогласование);
	    НоваяКолонкаДинамическогоСписка.Вид 	        = ВидПоляФормы.ПолеВвода;   
	    НоваяКолонкаДинамическогоСписка.ПутьКДанным		= "Объект.пкСогласование.Упаковка";
		
		НоваяКолонкаДинамическогоСписка         	    = Элементы.Добавить("пкСогласованиеЦена", Тип("ПолеФормы"), Элементы.пкСогласование);
	    НоваяКолонкаДинамическогоСписка.Вид 	        = ВидПоляФормы.ПолеВвода;   
	    НоваяКолонкаДинамическогоСписка.ПутьКДанным		= "Объект.пкСогласование.Цена";
		
//Рарус Владимир Подрезов Конец
	
КонецПроцедуры
//Рарус Владимир Подрезов Конец

// Rarus-spb byse {
// Необходимо сделать реквизит "Это техника" доступным для группы номенклатуры. 
//Иначе на мобильном приложении в справочнике не будет иерархии
Процедура ПриСозданииНаСервере_Справочник_Номенклатура_ФормаГруппы(Форма, Отказ, СтандартнаяОбработка)
	Элементы = Форма.Элементы;
    НовоеПоле             = Элементы.Добавить("пкЭтоТехника", Тип("ПолеФормы"));
    НовоеПоле.Вид         = ВидПоляФормы.ПолеФлажка;
    НовоеПоле.ПутьКДанным = "Объект.пкЭтоТехника";
	НовоеПоле.Заголовок   = "Техника";
КонецПроцедуры	
// Rarus-spb byse }

//Рарус Владимир Подрезов УАТ 3.1.2 24.08.2016
Процедура ПриСозданииНаСервере_РегистрСведений_уатДокументыТС_ФормаЗаписи(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы = Форма.Элементы;
    Объект   = Форма.Запись;
	
	НовоеПолеВвода             = Элементы.Вставить("пкТС", Тип("ПолеФормы"), Элементы.ГруппаТС, Элементы.НомерТС);
    НовоеПолеВвода.Вид         = ВидПоляФормы.ПолеВвода;   
    НовоеПолеВвода.ПутьКДанным = "Запись.ТС";
	
	Элементы.НомерТС.Заголовок = НСтр("ru='Номер ТС'");
	
КонецПроцедуры
//Рарус Владимир Подрезов Конец

//+++Рарус Павел Князьков 15.09.2016
Процедура ПриСозданииНаСервере_Справочник_Контрагенты_ФормаЭлемента(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
	
	НоваяГруппа				= Элементы.Вставить("пкСтраницаДополнительно", Тип("ГруппаФормы"), Элементы.СтраницыФормы);
	НоваяГруппа.Вид			= ВидГруппыФормы.Страница;
	НоваяГруппа.Группировка	= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НоваяГруппа.Заголовок		= "Дополнительно";
	
		НовоеПолеВвода							= Элементы.Добавить("пкАВСКлассификация", Тип("ПолеФормы"), Элементы.пкСтраницаДополнительно);
	    НовоеПолеВвода.Вид						= ВидПоляФормы.ПолеВвода;   
	    НовоеПолеВвода.ПутьКДанным				= "Объект.пкАВСКлассификация";
		НовоеПолеВвода.КнопкаВыпадающегоСписка	= Истина;
		НовоеПолеВвода.КнопкаОчистки			= Истина;
	
КонецПроцедуры

Процедура ПриСозданииНаСервере_Справочник_СтатьиДвиженияДенежныхСредств_ФормаЭлемента(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	НовоеПолеВвода							= Элементы.Добавить("пкНаименованиеАнгл", Тип("ПолеФормы"));
	НовоеПолеВвода.Вид						= ВидПоляФормы.ПолеВвода;   
	НовоеПолеВвода.ПутьКДанным				= "Объект.пкНаименованиеАнгл";
	
КонецПроцедуры

//+++Рарус Павел Князьков 30.09.2016
Процедура ПриСозданииНаСервере_Документ_РасходныйОрдерНаТовары_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
	
	НовоеПолеВвода							= Элементы.Добавить("пкПолучатель", Тип("ПолеФормы"), Элементы.ГруппаИнформацияПраво);
	НовоеПолеВвода.Вид						= ВидПоляФормы.ПолеВвода;   
	НовоеПолеВвода.ПутьКДанным				= "Объект.пкПолучатель";
	НовоеПолеВвода.КнопкаВыбора				= Истина;
	НовоеПолеВвода.КнопкаОткрытия			= Истина;
	НовоеПолеВвода.КнопкаОчистки			= Истина;
	
КонецПроцедуры
//---Рарус Павел Князьков

//++ Рарус IA 02.10.2016
Процедура ПриСозданииНаСервере_Документ_ВнутреннееПотреблениеТоваров_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
	
	НовоеПоле             = Элементы.Добавить("пкСотрудник", Тип("ПолеФормы"), Элементы.ГруппаДополнительно);
	НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.пкСотрудник";
	НовоеПоле.Заголовок   = "Сотрудник";
	
//Рарус Владимир Подрезов 26.07.2017
	НовоеПоле             = Элементы.Добавить("пкУчитыватьВРасходахЛогистики", Тип("ПолеФормы"), Элементы.ГруппаДополнительно);
	НовоеПоле.Вид         = ВидПоляФормы.ПолеФлажка;
	НовоеПоле.ПутьКДанным = "Объект.пкУчитыватьВРасходахЛогистики";
	НовоеПоле.Заголовок   = "Учитывать в расходах логистики";
	НовоеПоле.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
//Рарус Владимир Подрезов Конец
		
	НовоеПоле             = Элементы.Добавить("пкТранспортноеСредство", Тип("ПолеФормы"), Элементы.ГруппаДополнительно);
	НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.пкТранспортноеСредство";
	НовоеПоле.Заголовок   = "Транспортное средство";
//Рарус Владимир Подрезов 26.07.2017
	НовоеПоле.Видимость   = Объект.пкУчитыватьВРасходахЛогистики;
//Рарус Владимир Подрезов Конец
		
КонецПроцедуры    

Процедура ПриСозданииНаСервере_Документ_ОтборРазмещениеТоваров_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка)

	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
	Команды		= Форма.Команды;
	
	НоваяКоманда = Команды.Добавить("пкКомандаТоварыПодобратьЯчейкиРазмещения");
	НоваяКоманда.Действие = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
	НоваяКоманда.Заголовок = "Товары подобрать ячейки размещения (пк)";
	НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
	
	НоваяКнопка				= Элементы.Добавить("пкТоварыРазмещениеПодобратьЯчейки", Тип("КнопкаФормы"), Элементы.Ячейки);
	НоваяКнопка.Вид			= ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды	= "пкКомандаТоварыПодобратьЯчейкиРазмещения";
	НоваяКнопка.Заголовок 	= НСтр("ru = 'Подбор с учетом ячеек по умолчанию (пк)'");
	
	Элементы.ТоварыОтборЯчейка.УстановитьДействие("НачалоВыбора", "Подключаемый_ВыполнитьПереопределяемуюКоманду");
	
КонецПроцедуры

Процедура ПриСозданииНаСервере_Справочник_СкладскиеЯчейки_ФормаВыбора(Форма, Отказ, СтандартнаяОбработка)

	//"При открытии" формы вызывает ошибку, поэтому если нам нужно внести изменения в форму выбора, приходится править в стандартартных объектах при вызове
	//Элементы = Форма.Элементы;
	//Форма.УстановитьДействие("ПриОткрытии", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 

	//+++DubI Рарус-СПб 23.01.2017, добавлено условие - не создавать кнопку, если указана ячейка для пользователя
Если Не ЗначениеЗаполнено(Пользователи.ТекущийПользователь().пкСкладскаяЯчейка) Тогда
	//---DubI Рарус-СПб
	Элементы = Форма.Элементы;
	Команды		= Форма.Команды;
	
	НоваяКоманда = Команды.Добавить("пкКомандаУбратьОтборЯчейкиСписка");
	НоваяКоманда.Действие = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
	НоваяКоманда.Заголовок = "Убрать отбор по ячейкам в списке";
	//НоваяКоманда.ИзменяетСохраняемыеДанные = Ложь;
	
	НоваяКнопка				= Элементы.Добавить("пкКнопкаУбратьОтборЯчейкиСписка", Тип("КнопкаФормы"), Элементы.ФормаКоманднаяПанель);
	НоваяКнопка.Вид			= ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды	= "пкКомандаУбратьОтборЯчейкиСписка";
	НоваяКнопка.Заголовок 	= НСтр("ru = 'Убрать отбор по ячейкам в списке'");
	НоваяКнопка.Картинка 	= БиблиотекаКартинок.ОтключитьОтбор;
	НоваяКнопка.Отображение = ОтображениеКнопки.Картинка;
	Элементы.Переместить(НоваяКнопка, Элементы.ФормаКоманднаяПанель, Элементы.ФормаНайти); 
	//+++DubI Рарус-СПб 23.01.2017
//++ Рарус Лимаренко 06.03.2018	Задача 9610
Иначе
	Если РольДоступна("пкОграничитьВыборЯчеекПоПользователю") Тогда 
		НовЭлементОтбора = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
		НовЭлементОтбора.ПравоеЗначение = Пользователи.ТекущийПользователь().пкСкладскаяЯчейка;
		НовЭлементОтбора.Использование = Истина;
	КонецЕсли;
КонецЕсли;
//-- Рарус Лимаренко 06.03.2018 Задача 9610
    //---DubI Рарус-СПб	
КонецПроцедуры

Процедура ПриСозданииНаСервере_Справочник_ВидыЦен_ФормаВыбора(Форма, Отказ, СтандартнаяОбработка)

	Элементы = Форма.Элементы;
    Объект   = Форма.Список;
	
	//"При открытии" формы вызывает ошибку, поэтому если нам нужно внести изменения в форму выбора, приходится править в стандартартных объектах при вызове
	НоваяКолонкаДинамическогоСписка         	    = Элементы.Добавить("пкРемонт", Тип("ПолеФормы"), Элементы.Список);
    НоваяКолонкаДинамическогоСписка.Вид 	        = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаДинамическогоСписка.ПутьКДанным		= "Список.пкРемонт";
	
КонецПроцедуры

Процедура ПриСозданииНаСервере_Справочник_ВидыЦен_ФормаЭлемента(Форма, Отказ, СтандартнаяОбработка)

	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
	Команды		= Форма.Команды;
	
    НовоеПоле			  = Элементы.Добавить("пкРемонт", Тип("ПолеФормы"), Элементы.ГруппаКолонка2);
    НовоеПоле.Вид		  = ВидПоляФормы.ПолеФлажка;
    НовоеПоле.ПутьКДанным = "Объект.пкРемонт";
	НовоеПоле.Заголовок   = "Ремонт (пк) - используется в заказ-нарядах";	
КонецПроцедуры

Процедура ПриСозданииНаСервере_Обработка_ПодборТоваровВДокументПродажи_Форма(Форма, Отказ, СтандартнаяОбработка)
	Возврат;
	
	ДокументЗаказНаряд=Ложь;	
	Попытка
		ДокументЗаказНаряд = ТипЗнч(Форма.Параметры.Документ)=Тип("ДокументСсылка.пкЗаказНаряд");		
	Исключение	
	КонецПопытки;	
	
	Если Не ДокументЗаказНаряд Тогда 
		Возврат;	
	КонецЕсли;	
		
	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
	Команды		= Форма.Команды;
	
	ДобавляемыеРеквизиты = Новый Массив;
    ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("пкДанныеПоЯчейкам", Новый ОписаниеТипов("ТаблицаЗначений")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Ячейка", Новый ОписаниеТипов("СправочникСсылка.СкладскиеЯчейки"), "пкДанныеПоЯчейкам", "Ячейка", ложь));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ВНаличиеОстаток", Новый ОписаниеТипов("Число"), "пкДанныеПоЯчейкам", "В наличие остаток", ложь));
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	НовыйСписок  = Элементы.Добавить("пкДанныеПоЯчейкам", Тип("ТаблицаФормы"), Элементы.ГруппаНайденныеТовары);
	НовыйСписок.ПутьКДанным 			= "пкДанныеПоЯчейкам";
	НовыйСписок.ИзменятьПорядокСтрок 	= Ложь;
	НовыйСписок.ИзменятьСоставСтрок 	= Ложь;
	НовыйСписок.Заголовок				= НСтр("ru='Данные по ячейкам'");
	НовыйСписок.ПоложениеЗаголовка		= ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйСписок.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	
	НоваяКолонкаДинамическогоСписка             = Элементы.Добавить("Ячейка", Тип("ПолеФормы"), Элементы.пкДанныеПоЯчейкам);
	НоваяКолонкаДинамическогоСписка.Вид         = ВидПоляФормы.ПолеВвода;   
	НоваяКолонкаДинамическогоСписка.ПутьКДанным = "пкДанныеПоЯчейкам.Ячейка";
	
 	НоваяКолонкаДинамическогоСписка             = Элементы.Добавить("ВНаличиеОстаток", Тип("ПолеФормы"), Элементы.пкДанныеПоЯчейкам);
	НоваяКолонкаДинамическогоСписка.Вид         = ВидПоляФормы.ПолеВвода;   
	НоваяКолонкаДинамическогоСписка.ПутьКДанным = "пкДанныеПоЯчейкам.ВНаличиеОстаток";
	
	//НоваяКолонкаДинамическогоСписка.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
   
КонецПроцедуры
//-- Рарус IA 02.10.2016

//Рарус Владимир Подрезов Доставка 10.10.2016
Процедура ПриСозданииНаСервере_Справочник_ФизическиеЛица_ФормаЭлемента(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы	= Форма.Элементы;
    Объект		= Форма.ФизическоеЛицо;
	
    НовоеПоле             = Элементы.Добавить("пкПодразделение", Тип("ПолеФормы"));
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "ФизическоеЛицо.пкПодразделение";
    
    НовоеПоле			  = Элементы.Добавить("пкФИОАнгл", Тип("ПолеФормы"), Элементы.ГруппаФИО);
    НовоеПоле.Вид		  = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "ФизическоеЛицо.пкФИОАнгл";
    
КонецПроцедуры	

Процедура ПриСозданииНаСервере_Справочник_ФизическиеЛица_ФормаНового(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы	= Форма.Элементы;
    Объект		= Форма.Объект;
	
    НовоеПоле             = Элементы.Добавить("пкПодразделение", Тип("ПолеФормы"));
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкПодразделение";
    
КонецПроцедуры	
//Рарус Владимир Подрезов Конец

//+++DubI Рарус-СПб 31.10.2016
//по задаче приостановлено выполнение
//Процедура ПриСозданииНаСервере_Обработка_ПлатежныйКалендарь_Форма(Форма, Отказ, СтандартнаяОбработка)

//	Элементы	= Форма.Элементы;
//    Объект		= Форма.Объект;
//	Команды		= Форма.Команды;
//	
//    ДобавляемыеРеквизиты = Новый Массив;
//    ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("пкСЗфильтрВходящиеИсходящие", Новый ОписаниеТипов("СписокЗначений")));
//    ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("пкСЗфильтрСтатьяДДС",        Новый ОписаниеТипов("СписокЗначений")));
//    ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("пкСЗфильтрКонтрагенты",        Новый ОписаниеТипов("СписокЗначений")));
//	
//    Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
//	
//	НоваяКоманда = Команды.Добавить("пкДополнительныеФильтрыВходящиеИсходящие");
//	НоваяКоманда.Действие = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
//	НоваяКоманда.Заголовок = "Входящие/исходящие платежи";
//	НоваяКоманда.ИзменяетСохраняемыеДанные = Ложь;
//	
//	НоваяКоманда = Команды.Добавить("пкДополнительныеФильтрыСтатьяДДС");
//	НоваяКоманда.Действие = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
//	НоваяКоманда.Заголовок = "Статьи ДДС";
//	НоваяКоманда.ИзменяетСохраняемыеДанные = Ложь;
//	
//	НоваяКоманда = Команды.Добавить("пкДополнительныеФильтрыКонтрагенты");
//	НоваяКоманда.Действие = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
//	НоваяКоманда.Заголовок = "Контрагенты";
//	НоваяКоманда.ИзменяетСохраняемыеДанные = Ложь;
//		
//	НоваяГруппа				= Элементы.Добавить("пкТабличноеПолеЗаполнениеДополнительныеФильтры", Тип("ГруппаФормы"), Элементы.ГруппаТабличноеПолеЗаполнение);
//	НоваяГруппа.Вид			= ВидГруппыФормы.Подменю;
//	НоваяГруппа.Заголовок		= "Дополнительные фильтры";

//		НоваяКнопка				= Элементы.Добавить("пкТабличноеПолеЗаполнениеВходящиеИсходящие", Тип("КнопкаФормы"), Элементы.пкТабличноеПолеЗаполнениеДополнительныеФильтры);
//		НоваяКнопка.Вид			= ВидКнопкиФормы.КнопкаКоманднойПанели;
//		НоваяКнопка.ИмяКоманды	= "пкДополнительныеФильтрыВходящиеИсходящие";
//		
//		НоваяКнопка				= Элементы.Добавить("пкТабличноеПолеЗаполнениеСтатьиДДС", Тип("КнопкаФормы"), Элементы.пкТабличноеПолеЗаполнениеДополнительныеФильтры);
//		НоваяКнопка.Вид			= ВидКнопкиФормы.КнопкаКоманднойПанели;
//		НоваяКнопка.ИмяКоманды	= "пкДополнительныеФильтрыСтатьяДДС";
//		
//		НоваяКнопка				= Элементы.Добавить("пкТабличноеПолеЗаполнениеКонтрагенты", Тип("КнопкаФормы"), Элементы.пкТабличноеПолеЗаполнениеДополнительныеФильтры);
//		НоваяКнопка.Вид			= ВидКнопкиФормы.КнопкаКоманднойПанели;
//		НоваяКнопка.ИмяКоманды	= "пкДополнительныеФильтрыКонтрагенты";
//		
//	НоваяГруппа				= Элементы.Добавить("пкДеревоПлатежейДополнительныеФильтры", Тип("ГруппаФормы"), Элементы.ДеревоПлатежейКоманднаяПанель);
//	НоваяГруппа.Вид			= ВидГруппыФормы.Подменю;
//	НоваяГруппа.Заголовок		= "Дополнительные фильтры";

//		НоваяКнопка				= Элементы.Добавить("пкДеревоПлатежейВходящиеИсходящие", Тип("КнопкаФормы"), Элементы.пкДеревоПлатежейДополнительныеФильтры);
//		НоваяКнопка.Вид			= ВидКнопкиФормы.КнопкаКоманднойПанели;
//		НоваяКнопка.ИмяКоманды	= "пкДополнительныеФильтрыВходящиеИсходящие";
//		
//		НоваяКнопка				= Элементы.Добавить("пкДеревоПлатежейСтатьиДДС", Тип("КнопкаФормы"), Элементы.пкДеревоПлатежейДополнительныеФильтры);
//		НоваяКнопка.Вид			= ВидКнопкиФормы.КнопкаКоманднойПанели;
//		НоваяКнопка.ИмяКоманды	= "пкДополнительныеФильтрыСтатьяДДС";
//		
//		НоваяКнопка				= Элементы.Добавить("пкДеревоПлатежейКонтрагенты", Тип("КнопкаФормы"), Элементы.пкДеревоПлатежейДополнительныеФильтры);
//		НоваяКнопка.Вид			= ВидКнопкиФормы.КнопкаКоманднойПанели;
//		НоваяКнопка.ИмяКоманды	= "пкДополнительныеФильтрыКонтрагенты";
//		
//КонецПроцедуры

Процедура ПриСозданииНаСервере_Справочник_Пользователи_ФормаЭлемента(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы	= Форма.Элементы;
    Объект		= Форма.Объект;
	
    НовоеПоле			  = Элементы.Добавить("пкСкладскаяЯчейка", Тип("ПолеФормы"), Элементы.ГруппаШапка);
    НовоеПоле.Вид		  = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкСкладскаяЯчейка";
    
КонецПроцедуры	
//---DubI Рарус-СПб

//Рарус Владимир Подрезов Доставка 10.11.2016
Процедура ПриСозданииНаСервере_Документ_ЗаявкаНаРасходованиеДенежныхСредств_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
	
//Рарус Владимир Подрезов 01.07.2017
	//ДобавляемыеРеквизиты = Новый Массив;
	//ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("пкКтоЗаявил", Новый ОписаниеТипов("СправочникСсылка.Пользователи")));
	//ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("пкПодразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия")));
	//ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("пкСтатус", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыЗаявокНаРасходованиеДенежныхСредств")));
	//ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("пкЭтоНовый", Новый ОписаниеТипов("Булево")));
	//Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 22.01.2017
	//Добавленный реквизит справочника пкТекущаяТочкаСогласования
	НовоеПолеВвода             = Элементы.Добавить("пкТекущаяТочкаСогласования", Тип("ПолеФормы"), Элементы.ГруппаШапкаЛево);
    НовоеПолеВвода.Вид         = ВидПоляФормы.ПолеНадписи;   
    НовоеПолеВвода.ПутьКДанным = "Объект.пкТекущаяТочкаСогласования";
//Рарус Владимир Подрезов Конец
	
	НоваяГруппа				= Элементы.Добавить("пкСтраницаЛогистика", Тип("ГруппаФормы"), Элементы.ГруппаСтраницы); 
	НоваяГруппа.Вид			= ВидГруппыФормы.Страница;
	НоваяГруппа.Группировка	= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НоваяГруппа.Заголовок	= "Транспорт (Логистика)";
	
	//Добавленный реквизит справочника пкСтатьяРасходовПоЛогистике
	НовоеПолеВвода             = Элементы.Добавить("пкСтатьяРасходовПоЛогистике", Тип("ПолеФормы"), Элементы.пкСтраницаЛогистика);
    НовоеПолеВвода.Вид         = ВидПоляФормы.ПолеВвода;   
    НовоеПолеВвода.ПутьКДанным = "Объект.пкСтатьяРасходовПоЛогистике";
	
	//Добавленная тч пкТранспортныеСредства
	НовыйСписок  = Элементы.Добавить("пкТранспортныеСредства", Тип("ТаблицаФормы"), Элементы.пкСтраницаЛогистика);
    НовыйСписок.ПутьКДанным 			= "Объект.пкТранспортныеСредства";
	
	НоваяКолонкаДинамическогоСписка         	    = Элементы.Добавить("пкТранспортныеСредстваТранспортноеСредство", Тип("ПолеФормы"), Элементы.пкТранспортныеСредства);
    НоваяКолонкаДинамическогоСписка.Вид 	        = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаДинамическогоСписка.ПутьКДанным		= "Объект.пкТранспортныеСредства.ТранспортноеСредство";
	
	НоваяКолонкаДинамическогоСписка         	    = Элементы.Добавить("пкТранспортныеСредстваСумма", Тип("ПолеФормы"), Элементы.пкТранспортныеСредства);
    НоваяКолонкаДинамическогоСписка.Вид 	        = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаДинамическогоСписка.ПутьКДанным		= "Объект.пкТранспортныеСредства.Сумма";
        
    НоваяГруппа             = Элементы.Вставить("пкГруппаКурсДатаДокумента", Тип("ГруппаФормы"), Элементы.РасшифровкаБезРазбиения, Элементы.РасшифровкаБезРазбиенияСтатьяДвиженияДенежныхСредств); 
	НоваяГруппа.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
    НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
    НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.ОтображатьЗаголовок = Ложь;
    
    НовоеПоле             = Элементы.Добавить("пкКурсДокумента", Тип("ПолеФормы"), Элементы.пкГруппаКурсДатаДокумента);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкКурсДокумента";
    НовоеПоле.Заголовок   = "Курс";
    НовоеПоле.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    
    НовоеПоле             = Элементы.Добавить("пкДатаКурса", Тип("ПолеФормы"), Элементы.пкГруппаКурсДатаДокумента);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкДатаКурса";
    НовоеПоле.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду");
	
	НоваяКоманда            = Форма.Команды.Добавить("пкИзменитьКурс");
    НоваяКоманда.Заголовок  = "Изменить курс";
    НоваяКоманда.Действие   = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
    
    НоваяКнопка            = Элементы.Добавить("пкИзменитьКурс", Тип("КнопкаФормы"), Элементы.пкГруппаКурсДатаДокумента); 
    НоваяКнопка.ИмяКоманды = "пкИзменитьКурс";
	
//++ Рарус Лимаренко 14.02.2018 Задача 9741

	НоваяГруппа             = Элементы.Вставить("пкГруппаКурсДатаДокументаСписок", Тип("ГруппаФормы"), Элементы.РасшифровкаСписком, Элементы.РасшифровкаПлатежа); 
	НоваяГруппа.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.ОтображатьЗаголовок = Ложь;
	
	НовоеПоле             = Элементы.Добавить("пкКурсДокументаСписок", Тип("ПолеФормы"), Элементы.пкГруппаКурсДатаДокументаСписок);
	НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.пкКурсДокумента";
	НовоеПоле.Заголовок   = "Курс";
	НовоеПоле.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
	
	НовоеПоле             = Элементы.Добавить("пкДатаКурсаСписок", Тип("ПолеФормы"), Элементы.пкГруппаКурсДатаДокументаСписок);
	НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.пкДатаКурса";
	НовоеПоле.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду");
	
	Элементы.РасшифровкаПлатежаСуммаВзаиморасчетов.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду");
	
//-- Рарус Лимаренко 14.02.2018 Задача 9741
	 
    Элементы.РасшифровкаБезРазбиенияСуммаВзаиморасчетов.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    
    Элементы.РасшифровкаПлатежаСуммаВзаиморасчетов.ОтображениеПредупрежденияПриРедактировании      = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
    Элементы.РасшифровкаБезРазбиенияСуммаВзаиморасчетов.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
    
//Рарус Владимир Подрезов 09.02.2017
    НоваяГруппа             = Элементы.Вставить("пкГруппаНДС", Тип("ГруппаФормы"), Элементы.ГруппаСумма, Элементы.СверхЛимита); 
	НоваяГруппа.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
    НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
    НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.ОтображатьЗаголовок = Ложь;
	
	НовоеПоле				= Элементы.Добавить("пкСуммаБезНДС", Тип("ПолеФормы"), Элементы.пкГруппаНДС);
    НовоеПоле.Вид			= ВидПоляФормы.ПолеНадписи;
    НовоеПоле.ПутьКДанным	= "Объект.пкСуммаБезНДС";
	
	Элементы.СуммаДокумента.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
	
	Если НЕ ЗначениеЗаполнено(Форма.Объект.Ссылка) И НЕ ЗначениеЗаполнено(Форма.Объект.ФормаОплатыЗаявки) Тогда
	    Форма.Объект.ФормаОплатыНаличная = Ложь;
		Форма.Объект.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Безналичная;	
	
	КонецЕсли;

КонецПроцедуры
//Рарус Владимир Подрезов Доставка Конец

//Рарус Владимир Подрезов 22.01.2017
Процедура ПриСозданииНаСервере_Документ_ЗаявкаНаРасходованиеДенежныхСредств_ФормаСписка(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы = Форма.Элементы;
	
	//Добавленный реквизит справочника пкТекущаяТочкаСогласования
	НовоеПолеВвода             = Элементы.Вставить("пкТекущаяТочкаСогласования", Тип("ПолеФормы"), Элементы.Список, Элементы.СверхЛимита);
    НовоеПолеВвода.Вид         = ВидПоляФормы.ПолеНадписи;   
    НовоеПолеВвода.ПутьКДанным = "Список.пкТекущаяТочкаСогласования";
	
    ДобавляемыеРеквизиты = Новый Массив;
    ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("пкТекущийПользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи")));
    Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	Форма.пкТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	//Выделим Жирным не согласованные заявки, где текущая точка согласования - это текущий пользователь
	Элемент							= Форма.УсловноеОформление.Элементы.Добавить();
    ПолеЭлемента					= Элемент.Поля.Элементы.Добавить();
    ПолеЭлемента.Поле				= Новый ПолеКомпоновкиДанных(Элементы.Список.Имя);
	ГруппаОтборов					= Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборов.ТипГруппы			= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ОтборЭлемента					= ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ОтборЭлемента.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Список.Статус");
    ОтборЭлемента.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
    ОтборЭлемента.ПравоеЗначение	= Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована;
	ОтборЭлемента					= ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ОтборЭлемента.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Список.пкТекущаяТочкаСогласования");
    ОтборЭлемента.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
    ОтборЭлемента.ПравоеЗначение	= ПараметрыСеанса.ТекущийПользователь;
    Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ВидШрифта.ЭлементСтиля, 10, Истина));	
	
	//Выделим Красным не отклоненные заявки
	Элемент							= Форма.УсловноеОформление.Элементы.Добавить();
    ПолеЭлемента					= Элемент.Поля.Элементы.Добавить();
    ПолеЭлемента.Поле				= Новый ПолеКомпоновкиДанных(Элементы.Список.Имя);
	ОтборЭлемента					= Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ОтборЭлемента.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Список.Статус");
    ОтборЭлемента.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
    ОтборЭлемента.ПравоеЗначение	= Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена;
    Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(127,0,0));	
	
	НовоеПолеВвода				= Элементы.Вставить("пкСуммаБезНДС", Тип("ПолеФормы"), Элементы.Список, Элементы.Ссылка);
    НовоеПолеВвода.Вид			= ВидПоляФормы.ПолеНадписи;   
    НовоеПолеВвода.ПутьКДанным	= "Список.пкСуммаБезНДС";
	
	НовоеПолеВвода				= Элементы.Вставить("пкПрикрепленыФайлыВДО", Тип("ПолеФормы"), Элементы.Список, Элементы.СуммаДокумента);
    НовоеПолеВвода.Вид			= ВидПоляФормы.ПолеКартинки;   
    НовоеПолеВвода.ПутьКДанным	= "Список.пкПрикрепленыФайлыВДО";
	НовоеПолеВвода.КартинкаЗначений	= БиблиотекаКартинок.КоллекцияСкрепка;
	НовоеПолеВвода.КартинкаШапки		= БиблиотекаКартинок.Скрепка;
	НовоеПолеВвода.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовоеПолеВвода.Ширина				= 1;
	
//Рарус Владимир Подрезов Конец

КонецПроцедуры

Процедура ПриСозданииНаСервере_Документ_ЗаявкаНаРасходованиеДенежныхСредств_ФормаСпискаДокументов(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы = Форма.Элементы;
	
	//Изменим Запрос для наложения условного оформления на новый реквизит
	Форма.Список.ТекстЗапроса =
	"ВЫБРАТЬ
	|	Заявка.Ссылка,
	|	Заявка.ПометкаУдаления,
	|	Заявка.Номер,
	|	Заявка.Дата,
	|	Заявка.Проведен,
	|	Заявка.Организация КАК Организация,
	|	Заявка.Статус,
	|	ВЫБОР
	|		КОГДА Заявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты)
	|			ТОГДА Заявка.ХозяйственнаяОперацияПоЗарплате
	|		ИНАЧЕ Заявка.ХозяйственнаяОперация
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|	Заявка.СуммаДокумента,
	|	Заявка.Валюта,
	|	Заявка.БанковскийСчет,
	|	Заявка.Касса,
	|	Заявка.ЖелательнаяДатаПлатежа КАК ДатаПлатежа,
	|	ВЫБОР
	|		КОГДА Заявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику)
	|			ТОГДА Заявка.ПодотчетноеЛицо
	|		КОГДА Заявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию)
	|				ИЛИ Заявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию)
	|				ИЛИ Заявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств)
	|			ТОГДА Заявка.ОрганизацияПолучатель
	|		ИНАЧЕ Заявка.Контрагент
	|	КОНЕЦ КАК Получатель,
	|	Заявка.Контрагент,
	|	Заявка.Подразделение,
	|	Заявка.КтоЗаявил КАК Заявитель,
	|	Заявка.Представление,
	//|	Заявка.Приоритет,
	|	Заявка.СверхЛимита,
	//|	ВЫБОР
	//|		КОГДА Заявка.Приоритет = НизкийПриоритет.Приоритет
	//|			ТОГДА 0
	//|		КОГДА Заявка.Приоритет = ВысокийПриоритет.Приоритет
	//|			ТОГДА 2
	//|		ИНАЧЕ 1
	//|	КОНЕЦ КАК КартинкаПриоритета,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДенежныеСредства.СуммаОстаток, 0) >= 0
	|				И Заявка.Проведен
	|				И Заявка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗаявкаОплаченаСтандарт,
	|	ВЫБОР
	|		КОГДА НаличиеПрисоединенныхФайлов.ЕстьФайлы ЕСТЬ NULL
	|			ТОГДА 1
	|		КОГДА НаличиеПрисоединенныхФайлов.ЕстьФайлы
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЕстьФайлы,
	|	Заявка.пкСуммаБезНДС КАК пкСуммаБезНДС,
	|	Заявка.пкПрикрепленыФайлыВДО КАК пкПрикрепленыФайлыВДО,
	|	Заявка.пкТекущаяТочкаСогласования,
	|	ВЫБОР
	|		КОГДА СУММА(ЕСТЬNULL(ДенежныеСредстваОбороты.СуммаРасход, 0)) > 0
//Рарус Владимир Подрезов 21.06.2017
	//|				И Заявка.Проведен
	//|				И Заявка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена)
//Рарус Владимир Подрезов Конец
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗаявкаОплачена,
	|	МАКСИМУМ(ДенежныеСредстваОбороты.Период) КАК пкДатаОплаты,
	|	МАКСИМУМ(ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.Заказ) КАК пкОбъектРасчетов
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваКВыплате.Остатки КАК ДенежныеСредства
	|		ПО (ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств = Заявка.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеФайлов КАК НаличиеПрисоединенныхФайлов
	|		ПО Заявка.Ссылка = НаличиеПрисоединенныхФайлов.ОбъектСФайлами
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваКВыплате.Обороты(, , Регистратор, ) КАК ДенежныеСредстваОбороты
	|		ПО (ДенежныеСредстваОбороты.ЗаявкаНаРасходованиеДенежныхСредств = Заявка.Ссылка)
	|			И (ДенежныеСредстваОбороты.Регистратор <> Заявка.Ссылка)
	|			И (ДенежныеСредстваОбороты.СуммаРасход > 0)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа
	|		ПО (ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.Ссылка = Заявка.Ссылка)
	//|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	//|			Приоритеты.Ссылка КАК Приоритет
	//|		ИЗ
	//|			Справочник.Приоритеты КАК Приоритеты
	//|		
	//|		УПОРЯДОЧИТЬ ПО
	//|			Приоритеты.РеквизитДопУпорядочивания) КАК НизкийПриоритет
	//|		ПО (ИСТИНА)
	//|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	//|			Приоритеты.Ссылка КАК Приоритет
	//|		ИЗ
	//|			Справочник.Приоритеты КАК Приоритеты
	//|		
	//|		УПОРЯДОЧИТЬ ПО
	//|			Приоритеты.РеквизитДопУпорядочивания УБЫВ) КАК ВысокийПриоритет
	//|		ПО (ИСТИНА)
	|
	|СГРУППИРОВАТЬ ПО
	|	Заявка.Ссылка,
	|	Заявка.ПометкаУдаления,
	|	Заявка.Номер,
	|	Заявка.Дата,
	|	Заявка.Проведен,
	|	Заявка.Организация,
	|	Заявка.Статус,
	|	Заявка.СуммаДокумента,
	|	Заявка.Валюта,
	|	Заявка.БанковскийСчет,
	|	Заявка.Касса,
	|	Заявка.ЖелательнаяДатаПлатежа,
	|	Заявка.Контрагент,
	|	Заявка.Подразделение,
	|	Заявка.КтоЗаявил,
	|	Заявка.Представление,
	//|	Заявка.Приоритет,
	|	Заявка.СверхЛимита,
	|	Заявка.пкСуммаБезНДС,
	|	Заявка.пкПрикрепленыФайлыВДО,
	|	Заявка.пкТекущаяТочкаСогласования,
	|	ВЫБОР
	|		КОГДА Заявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты)
	|			ТОГДА Заявка.ХозяйственнаяОперацияПоЗарплате
	|		ИНАЧЕ Заявка.ХозяйственнаяОперация
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Заявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику)
	|			ТОГДА Заявка.ПодотчетноеЛицо
	|		КОГДА Заявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию)
	|				ИЛИ Заявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию)
	|				ИЛИ Заявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств)
	|			ТОГДА Заявка.ОрганизацияПолучатель
	|		ИНАЧЕ Заявка.Контрагент
	|	КОНЕЦ,
	//|	ВЫБОР
	//|		КОГДА Заявка.Приоритет = НизкийПриоритет.Приоритет
	//|			ТОГДА 0
	//|		КОГДА Заявка.Приоритет = ВысокийПриоритет.Приоритет
	//|			ТОГДА 2
	//|		ИНАЧЕ 1
	//|	КОНЕЦ,
//Рарус Владимир Подрезов 21.06.2017
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДенежныеСредства.СуммаОстаток, 0) >= 0
	//|				И Заявка.Проведен
	//|				И Заявка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДенежныеСредства.СуммаОстаток, 0) >= 0
	|				И Заявка.Проведен
	|				И Заявка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
//Рарус Владимир Подрезов Конец
	|	ВЫБОР
	|		КОГДА НаличиеПрисоединенныхФайлов.ЕстьФайлы ЕСТЬ NULL
	|			ТОГДА 1
	|		КОГДА НаличиеПрисоединенныхФайлов.ЕстьФайлы
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ";
	
	//Добавленный реквизит справочника пкТекущаяТочкаСогласования
	НовоеПолеВвода             = Элементы.Вставить("пкТекущаяТочкаСогласования", Тип("ПолеФормы"), Элементы.Список, Элементы.СверхЛимита);
    НовоеПолеВвода.Вид         = ВидПоляФормы.ПолеВвода;   
    НовоеПолеВвода.ПутьКДанным = "Список.пкТекущаяТочкаСогласования";
	
	//Выделим Жирным не согласованные заявки, где текущая точка согласования - это текущий пользователь
	Элемент							= Форма.УсловноеОформление.Элементы.Добавить();
    ПолеЭлемента					= Элемент.Поля.Элементы.Добавить();
    ПолеЭлемента.Поле				= Новый ПолеКомпоновкиДанных(Элементы.Список.Имя);
	ГруппаОтборов					= Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборов.ТипГруппы			= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ОтборЭлемента					= ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ОтборЭлемента.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Список.Статус");
    ОтборЭлемента.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
    ОтборЭлемента.ПравоеЗначение	= Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована;
	ОтборЭлемента					= ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ОтборЭлемента.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Список.пкТекущаяТочкаСогласования");
    ОтборЭлемента.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
    ОтборЭлемента.ПравоеЗначение	= ПараметрыСеанса.ТекущийПользователь;
    Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ВидШрифта.ЭлементСтиля, 10, Истина));	
	
	//Выделим Красным не отклоненные заявки
	Элемент							= Форма.УсловноеОформление.Элементы.Добавить();
    ПолеЭлемента					= Элемент.Поля.Элементы.Добавить();
    ПолеЭлемента.Поле				= Новый ПолеКомпоновкиДанных(Элементы.Список.Имя);
	ОтборЭлемента					= Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ОтборЭлемента.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Список.Статус");
    ОтборЭлемента.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
    ОтборЭлемента.ПравоеЗначение	= Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена;
    Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(127,0,0));	
	
	//Выделим оплаченные серым цветом текста
	Элемент							= Форма.УсловноеОформление.Элементы.Добавить();
    ПолеЭлемента					= Элемент.Поля.Элементы.Добавить();
    ПолеЭлемента.Поле				= Новый ПолеКомпоновкиДанных(Элементы.Список.Имя);
	ОтборЭлемента					= Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ОтборЭлемента.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Список.ЗаявкаОплачена");
    ОтборЭлемента.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
    ОтборЭлемента.ПравоеЗначение	= Истина;
    Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(127, 127, 127));	
	
	//Выделим курсивом КОплате, но не оплаченные
	Элемент							= Форма.УсловноеОформление.Элементы.Добавить();
    ПолеЭлемента					= Элемент.Поля.Элементы.Добавить();
    ПолеЭлемента.Поле				= Новый ПолеКомпоновкиДанных(Элементы.Список.Имя);
	ГруппаОтборов					= Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборов.ТипГруппы			= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ОтборЭлемента					= ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ОтборЭлемента.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Список.Статус");
    ОтборЭлемента.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
    ОтборЭлемента.ПравоеЗначение	= Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате;
	ОтборЭлемента					= ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ОтборЭлемента.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Список.ЗаявкаОплачена");
    ОтборЭлемента.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
    ОтборЭлемента.ПравоеЗначение	= Ложь;
    Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ВидШрифта.ЭлементСтиля, 10,, Истина));	
		
	НовоеПолеВвода             = Элементы.Вставить("пкСуммаБезНДС", Тип("ПолеФормы"), Элементы.Список, Элементы.СуммаДокумента);
    НовоеПолеВвода.Вид         = ВидПоляФормы.ПолеНадписи;   
    НовоеПолеВвода.ПутьКДанным = "Список.пкСуммаБезНДС";
	
	НовоеПолеВвода						= Элементы.Вставить("пкПрикрепленыФайлыВДО", Тип("ПолеФормы"), Элементы.Список, Элементы.СуммаДокумента);
    НовоеПолеВвода.Вид					= ВидПоляФормы.ПолеКартинки;   
    НовоеПолеВвода.ПутьКДанным			= "Список.пкПрикрепленыФайлыВДО";
	НовоеПолеВвода.КартинкаЗначений		= БиблиотекаКартинок.КоллекцияСкрепка;
	НовоеПолеВвода.КартинкаШапки		= БиблиотекаКартинок.Скрепка;
	НовоеПолеВвода.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовоеПолеВвода.Ширина				= 1;
	
	Элементы.ЕстьФайлы.Видимость	= Ложь;
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 15.03.2017
	НовоеПолеВвода				= Элементы.Вставить("пкДатаОплаты", Тип("ПолеФормы"), Элементы.Список, Элементы.ХозяйственнаяОперация);
    НовоеПолеВвода.Вид			= ВидПоляФормы.ПолеНадписи;   
    НовоеПолеВвода.ПутьКДанным	= "Список.пкДатаОплаты";
    НовоеПолеВвода.Заголовок	= "Факт оплата";   
	НовоеПолеВвода.Формат		= "ДФ=dd.MM.yyyy";
	
	НовоеПолеВвода				= Элементы.Вставить("пкОбъектРасчетов", Тип("ПолеФормы"), Элементы.Список, Элементы.ХозяйственнаяОперация);
    НовоеПолеВвода.Вид			= ВидПоляФормы.ПолеНадписи;   
    НовоеПолеВвода.ПутьКДанным	= "Список.пкОбъектРасчетов";
    НовоеПолеВвода.Заголовок	= "Объект расчетов"; 
	
	НовоеПолеВвода				= Элементы.Вставить("Ссылка", Тип("ПолеФормы"), Элементы.Список);
    НовоеПолеВвода.Вид			= ВидПоляФормы.ПолеНадписи;   
    НовоеПолеВвода.ПутьКДанным	= "Список.Ссылка";
    НовоеПолеВвода.Заголовок	= "Ссылка";
	
	НовоеПолеВвода				= Элементы.Вставить("Номер", Тип("ПолеФормы"), Элементы.Список,Элементы.Статус);
    НовоеПолеВвода.Вид			= ВидПоляФормы.ПолеНадписи;   
    НовоеПолеВвода.ПутьКДанным	= "Список.Номер";
    НовоеПолеВвода.Заголовок	= "Номер";

	НовоеПолеВвода				= Элементы.Вставить("Дата", Тип("ПолеФормы"), Элементы.Список,Элементы.Статус);
    НовоеПолеВвода.Вид			= ВидПоляФормы.ПолеНадписи;   
    НовоеПолеВвода.ПутьКДанным	= "Список.Дата";
    НовоеПолеВвода.Заголовок	= "Дата";

//Рарус Владимир Подрезов Конец

КонецПроцедуры
//Рарус Владимир Подрезов Конец

//+++rarus-spb_pavelk 15.11.2016
Процедура ПриСозданииНаСервере_Документ_уатОтчетПоставщикаПЦ_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
	Команды		= Форма.Команды;
	
	НоваяКоманда = Команды.Добавить("пкЗаполнитьТСпоКартам");
	НоваяКоманда.Действие = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
	НоваяКоманда.Заголовок = "Заполнить ТС по картам (пк)";
	НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
	
	НоваяКнопка				= Элементы.Добавить("пкЗаполнитьТСпоКартам", Тип("КнопкаФормы"), Элементы.Заправки.КоманднаяПанель.ПодчиненныеЭлементы.ЗаправкиЗаполнить.ПодчиненныеЭлементы.ЗаправкиГруппа1);
	НоваяКнопка.Вид			= ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды	= "пкЗаполнитьТСпоКартам";
	НоваяКнопка.Заголовок 	= НСтр("ru = 'Заполнить ТС по картам (пк)'");	
	
КонецПроцедуры

//Рарус Владимир Подрезов УАТ Протокол 30.11.2016
Процедура ПриСозданииНаСервере_Документ_уатВводНачальныхПоказаний_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
	
	//Добавленный реквизит документа пкПодразделение
	НовоеПолеВвода             = Элементы.Добавить("пкПодразделение", Тип("ПолеФормы"), Элементы.ГруппаПравая);
    НовоеПолеВвода.Вид         = ВидПоляФормы.ПолеВвода;   
    НовоеПолеВвода.ПутьКДанным = "Объект.пкПодразделение";
	
КонецПроцедуры

Процедура ПриСозданииНаСервере_Документ_уатВводНачальныхПоказаний_ФормаСписка(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы = Форма.Элементы;
	
	//Добавленный реквизит документа пкПодразделение
	НоваяКолонкаДинамическогоСписка         	    = Элементы.Добавить("пкПодразделение", Тип("ПолеФормы"), Элементы.Список);
    НоваяКолонкаДинамическогоСписка.Вид 	        = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаДинамическогоСписка.ПутьКДанным		= "Список.пкПодразделение";
	
КонецПроцедуры

Процедура ПриСозданииНаСервере_Документ_уатВводНачальныхПоказаний_ФормаВыбора(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы = Форма.Элементы;
	
	//Добавленный реквизит документа пкПодразделение
	НоваяКолонкаДинамическогоСписка         	    = Элементы.Добавить("пкПодразделение", Тип("ПолеФормы"), Элементы.Список);
    НоваяКолонкаДинамическогоСписка.Вид 	        = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаДинамическогоСписка.ПутьКДанным		= "Список.пкПодразделение";
	
КонецПроцедуры

Процедура ПриСозданииНаСервере_Документ_уатВводОстатковГСМ_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
	
	//Добавленный реквизит документа пкПодразделение
	НовоеПолеВвода             = Элементы.Вставить("пкПодразделение", Тип("ПолеФормы"),,Элементы.ГруппаСтраницы);
    НовоеПолеВвода.Вид         = ВидПоляФормы.ПолеВвода;   
    НовоеПолеВвода.ПутьКДанным = "Объект.пкПодразделение";
	
КонецПроцедуры

Процедура ПриСозданииНаСервере_Документ_уатВводОстатковГСМ_ФормаСписка(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы = Форма.Элементы;
	
	//Добавленный реквизит документа пкПодразделение
	НоваяКолонкаДинамическогоСписка         	    = Элементы.Добавить("пкПодразделение", Тип("ПолеФормы"), Элементы.Список);
    НоваяКолонкаДинамическогоСписка.Вид 	        = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаДинамическогоСписка.ПутьКДанным		= "Список.пкПодразделение";
	
КонецПроцедуры

Процедура ПриСозданииНаСервере_Документ_уатВводОстатковГСМ_ФормаВыбора(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы = Форма.Элементы;
	
	//Добавленный реквизит документа пкПодразделение
	НоваяКолонкаДинамическогоСписка         	    = Элементы.Добавить("пкПодразделение", Тип("ПолеФормы"), Элементы.Список);
    НоваяКолонкаДинамическогоСписка.Вид 	        = ВидПоляФормы.ПолеВвода;   
    НоваяКолонкаДинамическогоСписка.ПутьКДанным		= "Список.пкПодразделение";
	
КонецПроцедуры
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 18.01.2017
Процедура ПриСозданииНаСервере_Справочник_Организации_ФормаЭлемента(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы	= Форма.Элементы;
    Объект		= Форма.Объект;
	
    НовоеПоле             = Элементы.Добавить("пкНаименованиеПолное", Тип("ПолеФормы"), Элементы.Наименования);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкНаименованиеПолное";
    
КонецПроцедуры	
//Рарус Владимир Подрезов Конец

Функция ВладелецПластиковойКарты(ПластиковаяКарта, Дата) Экспорт
	
	Запрос=Новый Запрос();
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	пкВыданныеТопливныеКарты.ТС
	|ИЗ
	|	РегистрСведений.пкВыданныеТопливныеКарты КАК пкВыданныеТопливныеКарты
	|ГДЕ
	|	пкВыданныеТопливныеКарты.ТопливнаяКарта = &ПластиковаяКарта
	|	И пкВыданныеТопливныеКарты.ДатаВремяВыдачи <= &Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	пкВыданныеТопливныеКарты.ДатаВремяВыдачи УБЫВ";
	
	Запрос.Текст=ТекстЗапроса;
	Запрос.УстановитьПараметр("ПластиковаяКарта",ПластиковаяКарта);
	Запрос.УстановитьПараметр("Дата",Дата);
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаЗапроса.Следующий() Тогда
		
		Результат = ВыборкаЗапроса.ТС;
		
	Иначе
		
		Результат = Неопределено;
		
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции	
//---rarus-spb_pavelk

//Рарус Владимир Подрезов 09.03.2017
Процедура ПриСозданииНаСервере_Документ_АвансовыйОтчет_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
	
	НовоеПоле				= Элементы.Вставить("пкКоличество", Тип("ПолеФормы"), Элементы.ПрочиеРасходы, Элементы.ПрочиеРасходыСумма);
    НовоеПоле.Вид			= ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным	= "Объект.ПрочиеРасходы.пкКоличество";
	Элементы.пкКоличество.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 

	НовоеПоле				= Элементы.Вставить("пкЦена", Тип("ПолеФормы"), Элементы.ПрочиеРасходы, Элементы.ПрочиеРасходыСумма);
    НовоеПоле.Вид			= ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным	= "Объект.ПрочиеРасходы.пкЦена";
	Элементы.пкЦена.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 

КонецПроцедуры
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 15.03.2017
Процедура ПриСозданииНаСервере_ОбщаяФорма_ВыборДокументаРасчетов(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы = Форма.Элементы;
    Список   = Форма.Список;
	
    НоваяКоманда			= Форма.Команды.Добавить("пкДобавитьДоговор");
    НоваяКоманда.Заголовок	= "Добавить договор";
    НоваяКоманда.Действие	= "Подключаемый_ВыполнитьПереопределяемуюКоманду";
    
    НоваяКнопка				= Элементы.Добавить("пкДобавитьДоговор", Тип("КнопкаФормы"), Форма.КоманднаяПанель); 
    НоваяКнопка.Отображение	= ОтображениеКнопки.КартинкаИТекст; 
    НоваяКнопка.Картинка	= БиблиотекаКартинок.ДобавитьЭлементСписка; 
    НоваяКнопка.ИмяКоманды	= "пкДобавитьДоговор"; 
	
//Рарус Владимир Подрезов 13.09.2017
    НоваяКоманда			= Форма.Команды.Добавить("пкСкопироватьДоговор");
    НоваяКоманда.Заголовок	= "Скопировать договор";
    НоваяКоманда.Действие	= "Подключаемый_ВыполнитьПереопределяемуюКоманду";
    
    НоваяКнопка				= Элементы.Добавить("пкСкопироватьДоговор", Тип("КнопкаФормы"), Форма.КоманднаяПанель); 
    НоваяКнопка.Отображение	= ОтображениеКнопки.КартинкаИТекст; 
    НоваяКнопка.Картинка	= БиблиотекаКартинок.СкопироватьЭлементСписка; 
    НоваяКнопка.ИмяКоманды	= "пкСкопироватьДоговор"; 
//Рарус Владимир Подрезов Конец

КонецПроцедуры
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 16.03.2017
Процедура ПриСозданииНаСервере_Документ_ОтражениеЗарплатыВФинансовомУчете_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
	
    НоваяКоманда            = Форма.Команды.Добавить("пкУдержанияЗаполнитьПодразделения");
    НоваяКоманда.Заголовок  = "Заполнить подразделения";
    НоваяКоманда.Действие   = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
    
    НоваяКнопка            = Элементы.Добавить("пкУдержанияЗаполнитьПодразделения", Тип("КнопкаФормы"), Элементы.УдержаннаяЗарплата.КоманднаяПанель); 
    НоваяКнопка.ИмяКоманды = "пкУдержанияЗаполнитьПодразделения"; 

КонецПроцедуры
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 20.03.2017
Процедура ПриСозданииНаСервере_Документ_ПоступлениеПредметовЛизинга_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка)
    
    Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    НоваяГруппа             = Элементы.Добавить("пкГруппаКурсДатаДокумента", Тип("ГруппаФормы"), Элементы.ГруппаРеквизитыЛево); 
	НоваяГруппа.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
    НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
    НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.ОтображатьЗаголовок = Ложь;
    
    НовоеПоле             = Элементы.Добавить("пкКурсДокумента", Тип("ПолеФормы"), Элементы.пкГруппаКурсДатаДокумента);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Объект.пкКурсДокумента";
    НовоеПоле.Заголовок   = "Курс";
    НовоеПоле.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду"); 
    
КонецПроцедуры    
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 22.03.2017
Процедура ПриСозданииНаСервере_Документ_РеализацияУслугПрочихАктивов_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка)
    
    Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
    
    НоваяКоманда            = Форма.Команды.Добавить("пкЗаполнитьСодержания");
    НоваяКоманда.Заголовок  = "Заполнить содержание";
    НоваяКоманда.Действие   = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
    
    НоваяКнопка            = Элементы.Добавить("пкЗаполнитьСодержания", Тип("КнопкаФормы"), Элементы.Доходы.КоманднаяПанель); 
    НоваяКнопка.ИмяКоманды = "пкЗаполнитьСодержания"; 

КонецПроцедуры    
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 22.03.2017
Процедура ПриСозданииНаСервере_ЖурналДокументов_РеестрТорговыхДокументов_ФормаСписка(Форма, Отказ, СтандартнаяОбработка)
    
    Элементы = Форма.Элементы;
    Список   = Форма.Список;
    
    НовоеПоле             = Элементы.Вставить("пкОбъектСтроительства", Тип("ПолеФормы"), Элементы.Список, Элементы.СуммаДокумента);
    НовоеПоле.Вид         = ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным = "Список.пкОбъектСтроительства";
    НовоеПоле.Заголовок   = "Объект строительства";

КонецПроцедуры    
//Рарус Владимир Подрезов Конец

//+++DubI Рарус-СПб 24.03.2017
Процедура ПриСозданииНаСервере_Документ_СверкаВзаиморасчетов_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы = Форма.Элементы;
    Объект   = Форма.Объект;
	
	НовоеПоле				= Элементы.Добавить("пкПодписант", Тип("ПолеФормы"), Элементы.ГруппаРуководитель);
    НовоеПоле.Вид			= ВидПоляФормы.ПолеВвода;
    НовоеПоле.ПутьКДанным	= "Объект.пкПодписант";


КонецПроцедуры
//---DubI Рарус-СПб

//++ Рарус Лимаренко 12.02.2018 Заявка 9676
Процедура ПриСозданииНаСервере_Документ_ПеремещениеТоваров_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка)
	
	Объект   = Форма.Объект;
	
	Если не ПустаяСтрока(Объект.Номер) И Форма.ИспользоватьПодразделения Тогда
		 Возврат;
	КонецЕсли;
	Подразделение = Пользователи.ТекущийПользователь().Подразделение;	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Объект.Подразделение = Подразделение;
	Иначе
		Объект.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	Объект.СкладОтправитель = Справочники.Склады.ПустаяСсылка();
	Объект.СкладПолучатель = Справочники.Склады.ПустаяСсылка();
	
КонецПроцедуры
//-- Рарус Лимаренко 12.02.2018 Заявка 9676

//++ Рарус Лимаренко 23.07.2018
Процедура ПриСозданииНаСервере_ПодготовкаКПередачеОС_ФормаСписка(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы = Форма.Элементы;
	
	НовоеПолеВвода						= Элементы.Вставить("пкПрикрепленыФайлыВДО", Тип("ПолеФормы"), Элементы.Список, Элементы.Организация);
    НовоеПолеВвода.Вид					= ВидПоляФормы.ПолеКартинки;   
    НовоеПолеВвода.ПутьКДанным			= "Список.пкПрикрепленыФайлыВДО";
	НовоеПолеВвода.КартинкаЗначений		= БиблиотекаКартинок.КоллекцияСкрепка;
	НовоеПолеВвода.КартинкаШапки		= БиблиотекаКартинок.Скрепка;
	НовоеПолеВвода.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовоеПолеВвода.Ширина               = 1;
КонецПроцедуры
//-- Рарус Лимаренко 23.07.2018

Процедура ПриСозданииНаСервере_ПодготовкаКПередачеОС_ФормаДокумента(Форма, Отказ, СтандартнаяОбработка)

	Элементы = Форма.Элементы;
	Элементы.ОССуммаНДС.ТолькоПросмотр = Не пкМодификацияСервер.ПроверитьВхождениеПользователяВГруппу("пкРазрешитьРедактированиеНДСВДоговореПередачеОС");
	Элементы.ОССуммаСНДС.ТолькоПросмотр = НЕ пкМодификацияСервер.ПроверитьВхождениеПользователяВГруппу("пкРазрешитьРедактированиеНДСВДоговореПередачеОС");
	
КонецПроцедуры 


#КонецОбласти

#Область ПриЧтенииНаСервере

Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт

//Рарус Владимир Подрезов 09.06.2017
	Если Форма.ИмяФормы = "Документ.ЗаказКлиента.Форма.ФормаДокумента" Тогда
		Если Форма.Объект.пкЗакрыт И Форма.Объект.пкДатаЗакрытия <> '00010101' Тогда
			// Обработчик механизма "ДатыЗапретаИзменения"
			ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(Форма, ТекущийОбъект);
		КонецЕсли;
//Рарус Владимир Подрезов КОНЕЦ
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПередЗаписьюНаСервере

Процедура ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
    
	Если Форма.ИмяФормы = "Справочник.ОбъектыЭксплуатации.Форма.ФормаЭлемента" Тогда
        ПередЗаписьюНаСервере_Справочник_ОбъектыЭксплуатации_ФормаЭлемента(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
//++ Рарус Лимаренко 14.02.2018	
	ИначеЕсли
		Форма.ИмяФормы = "Документ.ПеремещениеТоваров.Форма.ФормаДокумента" Тогда
		ПередЗаписьюНаСервере_Документ_ПеремещениеТоваров_ФормаДокумента(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
//-- Рарус Лимаренко 14.02.2018
//++ Рарус Лимаренко 22.08.2018
	ИначеЕсли Форма.ИмяФормы = "Справочник.ДоговорыКонтрагентов.Форма.ФормаЭлемента" Тогда	
		ПередЗаписьюНаСервере_Документ_ДоговорыКонтрагентов_ФормаДокумента(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи);	
//-- Рарус Лимаренко 22.08.2018
	КонецЕсли;
    
КонецПроцедуры 

Процедура ПередЗаписьюНаСервере_Справочник_ОбъектыЭксплуатации_ФормаЭлемента(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи)
    
    Если ТекущийОбъект.пкЭтоТехника Тогда
        Ошибки = Неопределено;
        
        Если НЕ ЗначениеЗаполнено(ТекущийОбъект.пкМодель) Тогда
            ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Объект.пкМодель", НСтр("ru='Не указана модель техники'"), Неопределено);   
        КонецЕсли; 
        
        ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
    КонецЕсли;
    
КонецПроцедуры    

//++ Рарус Лимаренко 14.02.2018 Задача №9783
Процедура ПередЗаписьюНаСервере_Документ_ПеремещениеТоваров_ФормаДокумента(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьПривилегированныйРежим(Истина);
	ПодразделениеМосква = Константы.пкПодразделениеМосква.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НЕ ТекущийОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами  
			И ТекущийОбъект.Организация = Справочники.Организации.НайтиПоРеквизиту("КПП","504743001")
			И НЕ ТекущийОбъект.СкладПолучатель.Подразделение = ПодразделениеМосква 
			И ТекущийОбъект.ЭтоНовый() Тогда
			
			ТекущийОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами;
			ТекущийОбъект.ОрганизацияПолучатель = ТекущийОбъект.Организация;
			Сообщить("Операции перемещения между складами филиала производятся через хоз.операцию «Внутренняя передача товаров», хоз. операция заменена!");
	КонецЕсли;
	
	Если ТекущийОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами И ТекущийОбъект.Организация = Справочники.Организации.НайтиПоРеквизиту("КПП","504743001") 
		И ТекущийОбъект.СкладОтправитель.Подразделение <> ПодразделениеМосква Тогда	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Неправильно заполнен склад-отправитель!",ТекущийОбъект,"СкладОтправитель","Объект.СкладОтправитель",Ложь);		
	    Отказ = Истина;		
	КонецЕсли;
	
	Если ТекущийОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами И ТекущийОбъект.Организация = Справочники.Организации.НайтиПоРеквизиту("КПП","785050001") 
		И ТекущийОбъект.СкладОтправитель.Подразделение = ПодразделениеМосква Тогда	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Неправильно заполнен склад-отправитель!",ТекущийОбъект,"СкладОтправитель","Объект.СкладОтправитель",Ложь);		
	    Отказ = Истина;	
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект.Подразделение) И ТекущийОбъект.ЭтоНовый() Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо заполнить подразделение",ТекущийОбъект,"Подразделение","Объект.Подразделение",Ложь);		
	    Отказ = Истина;
	КонецЕсли;
		
КонецПроцедуры
//-- Рарус Лимаренко 14.02.2018
//++ Рарус Лимаренко 22.08.2018
Процедура ПередЗаписьюНаСервере_Документ_ДоговорыКонтрагентов_ФормаДокумента(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Объект = Форма.Объект;
	
	Если Объект.пкЕстьОсновнойДоговорСПоставщиком И ТекущийОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДоговоровКонтрагентов.Действует") Тогда	
			ТекущийОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДоговоровКонтрагентов.НеСогласован");
			ТекущийОбъект.Согласован =  Ложь;		
		КонецЕсли; 
		
КонецПроцедуры
//-- Рарус Лимаренко 22.08.2018
	

#КонецОбласти

//Рарус Владимир Подрезов Доставка 12.07.2016    
#Область ПослеЗаписиВФорме

Процедура ПослеЗаписи(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
    
	Если Форма.ИмяФормы = "Справочник.ДоговорыКонтрагентов.Форма.ФормаЭлемента" Тогда
        ПослеЗаписиНаСервере_Справочник_ДоговорыКонтрагентов_ФормаЭлемента(Форма, ТекущийОбъект); 	
	ИначеЕсли ТипЗнч(ТекущийОбъект) = Тип("СправочникОбъект.Номенклатура") 
		И Форма.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаЭлемента" Тогда
		Если ТекущийОбъект.пкЭтоТехника Тогда
			ЗаписатьКоллекциюСпособовДляОбъекта(Форма["пкСписокСпособыПогрузкиРазгрузкиТехники"], ТекущийОбъект.Ссылка);
		КонецЕсли;
		//++ Рарус IA 03.10.2016
		ЗаписатьКоллекциюАналоговДляОбъекта(Форма["пкАналогиНоменклатуры"], ТекущийОбъект.Ссылка);
		//-- Рарус IA 03.10.2016
	ИначеЕсли Форма.ИмяФормы = "Справочник.ОбъектыЭксплуатации.Форма.ФормаЭлемента" Тогда
        ПослеЗаписиНаСервере_Справочник_ОбъектыЭксплуатации_ФормаЭлемента(Форма, ТекущийОбъект); 
	ИначеЕсли ТипЗнч(ТекущийОбъект) = Тип("СправочникОбъект.СМ_ОбъектыСтроительства") 
		И Форма.ИмяФормы = "Справочник.СМ_ОбъектыСтроительства.Форма.ФормаЭлемента" Тогда
		ЗаписатьКоллекциюСпособовДляОбъекта(Форма["пкСписокСпособыПогрузкиРазгрузкиТехники"], ТекущийОбъект.Ссылка);
	ИначеЕсли ТипЗнч(ТекущийОбъект) = Тип("СправочникОбъект.ТранспортныеСредства") 
		И Форма.ИмяФормы = "Справочник.ТранспортныеСредства.Форма.ФормаЭлемента" Тогда
		ЗаписатьКоллекциюСпособовДляОбъекта(Форма["пкСписокСпособыПогрузкиРазгрузкиТехники"], ТекущийОбъект.Ссылка);
	КонецЕсли;
		
КонецПроцедуры

Процедура ПослеЗаписиНаСервере_Справочник_ДоговорыКонтрагентов_ФормаЭлемента(Форма, ТекущийОбъект)
    
    Объект = Форма.Объект;
    
    Для Каждого Строка ИЗ Форма.Объект.пкТарифы Цикл
        Если ЗначениеЗаполнено(Строка.ДополнительноеСоглашение) Тогда
            Строка.Дата = Строка.ДополнительноеСоглашение.ДатаОкончанияДействия;
        Иначе
            Строка.Дата = Объект.ДатаОкончанияДействия;
        КонецЕсли;    
    КонецЦикла;  
    
КонецПроцедуры    

Процедура ЗаписатьКоллекциюСпособовДляОбъекта(пкСписокСпособыПогрузкиРазгрузкиТехники, Объект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.пкДоступностьСпособовПогрузкиИРазгрузкиТехники.СоздатьНаборЗаписей();
	
	Для Каждого текСпособ Из пкСписокСпособыПогрузкиРазгрузкиТехники Цикл
		//формируем записи для каждого объекта по текущему способу
		НаборЗаписей.Отбор.Объект.Установить(Объект, Истина);
		НаборЗаписей.Отбор.СпособПогрузкиРазгрузки.Установить(текСпособ.СпособПогрузкиРазгрузки, Истина);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Объект					= Объект;
		НоваяЗапись.СпособПогрузкиРазгрузки	= текСпособ.СпособПогрузкиРазгрузки;
		НоваяЗапись.Доступен				= текСпособ.Доступен;
		Попытка
			НаборЗаписей.Записать(Истина);
		Исключение
			тСообщение = Новый СообщениеПользователю;
			тСообщение.Текст = "Не удалось обновить записи доступности способов погрузки и разгрузки для Способа " + текСпособ.СпособПогрузкиРазгрузки + " " + ОписаниеОшибки();
			тСообщение.Сообщить();
		КонецПопытки;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПослеЗаписиНаСервере_Справочник_ОбъектыЭксплуатации_ФормаЭлемента(Форма, Объект)
    Элементы = Форма.Элементы;
    
    ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницаРабочиеЦентры", "Видимость", НЕ Объект.пкЭтоТехника);
КонецПроцедуры    

#КонецОбласти
//Рарус Владимир Подрезов Конец

#Область ОбъектСтроительства

//Функция ПолучитьАдресДоставкиОбъектаСтроительства(ОбъектСтроительства)
//    Взврат        
//КонецФункции    

#КонецОбласти

#Область ДоговорыКонтрагентов

Функция ДоговорыКонтрагентовВидЦеныПриИзмененииНаСервере(Объект) Экспорт
    
    СтруктураПараметровОтбора = Новый Структура("Валюта, Дата, ВидЦены, Характеристика, Упаковка",
        Константы.ВалютаРегламентированногоУчета.Получить(), ТекущаяДата(), Объект.пкВидЦеныУслуг, 
        Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
        
    Для Каждого Строка ИЗ Объект.пкУслугиРемонта Цикл 
        СтруктураПараметровОтбора.Вставить("Номенклатура", Строка.Услуга);    
        Строка.Цена = ПродажиСервер.ПолучитьЦенуПоОтбору(СтруктураПараметровОтбора);        
    КонецЦикла;
    
    Возврат Объект;
    
КонецФункции    

Функция ПолучитьЦенуУслугиПоДоговору(ВидЦены, Услуга) Экспорт
    СтруктураПараметровОтбора = Новый Структура("Валюта, Дата, ВидЦены, Номенклатура, Характеристика, Упаковка",
        Константы.ВалютаРегламентированногоУчета.Получить(), ТекущаяДата(), ВидЦены, Услуга, 
        Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	
	Цена =  ПродажиСервер.ПолучитьЦенуПоОтбору(СтруктураПараметровОтбора);
    
    Возврат Цена;
КонецФункции    

Процедура ЗаполнитьПоПрайсЛистуНаСервере(Объект) Экспорт
    
    ПрайсЛист = Объект.пкПрайсЛист; 
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
    |   МАКСИМУМ(ВЫБОР
    |           КОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦенКраткосрочная
    |               ТОГДА ЦеныНоменклатурыСрезПоследних.Цена * ЕСТЬNULL(КурсВалютыВидаЦен.Курс, 1) * ЕСТЬNULL(КурсВалютыВидаЦен.Кратность, 1) / ВЫБОР
    |                       КОГДА ЕСТЬNULL(КурсВалютыДокумента.Курс, 1) = 0
    |                           ТОГДА 1
    |                       ИНАЧЕ ЕСТЬNULL(КурсВалютыДокумента.Курс, 1)
    |                   КОНЕЦ / ВЫБОР
    |                       КОГДА ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1) = 0
    |                           ТОГДА 1
    |                       ИНАЧЕ ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1)
    |                   КОНЕЦ
    |           ИНАЧЕ 0
    |       КОНЕЦ) КАК КраткосрочнаяЦена,
    |   МАКСИМУМ(ВЫБОР
    |           КОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦенДолгосрочная
    |               ТОГДА ЦеныНоменклатурыСрезПоследних.Цена * ЕСТЬNULL(КурсВалютыВидаЦен.Курс, 1) * ЕСТЬNULL(КурсВалютыВидаЦен.Кратность, 1) / ВЫБОР
    |                       КОГДА ЕСТЬNULL(КурсВалютыДокумента.Курс, 1) = 0
    |                           ТОГДА 1
    |                       ИНАЧЕ ЕСТЬNULL(КурсВалютыДокумента.Курс, 1)
    |                   КОНЕЦ / ВЫБОР
    |                       КОГДА ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1) = 0
    |                           ТОГДА 1
    |                       ИНАЧЕ ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1)
    |                   КОНЕЦ
    |           ИНАЧЕ 0
    |       КОНЕЦ) КАК ДолгосрочнаяЦена,
    |   МАКСИМУМ(ВЫБОР
    |           КОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦенКраткосрочная
    |               ТОГДА ЦеныНоменклатурыСрезПоследних.Упаковка
    |           ИНАЧЕ НЕОПРЕДЕЛЕНО
    |       КОНЕЦ) КАК ЕдиницаИзмеренияКраткосрочнойЦены,
    |   МАКСИМУМ(ВЫБОР
    |           КОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦенДолгосрочная
    |               ТОГДА ЦеныНоменклатурыСрезПоследних.Упаковка
    |           ИНАЧЕ НЕОПРЕДЕЛЕНО
    |       КОНЕЦ) КАК ЕдиницаИзмеренияДолгосрочнойЦены,
    |   МАКСИМУМ(ВЫБОР
    |           КОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦенТранспортировка
    |               ТОГДА ЦеныНоменклатурыСрезПоследних.Цена * ЕСТЬNULL(КурсВалютыВидаЦен.Курс, 1) * ЕСТЬNULL(КурсВалютыВидаЦен.Кратность, 1) / ВЫБОР
    |                       КОГДА ЕСТЬNULL(КурсВалютыДокумента.Курс, 1) = 0
    |                           ТОГДА 1
    |                       ИНАЧЕ ЕСТЬNULL(КурсВалютыДокумента.Курс, 1)
    |                   КОНЕЦ / ВЫБОР
    |                       КОГДА ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1) = 0
    |                           ТОГДА 1
    |                       ИНАЧЕ ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1)
    |                   КОНЕЦ
    |           ИНАЧЕ 0
    |       КОНЕЦ) КАК ЦенаТранспортировки,
    |   МАКСИМУМ(ВЫБОР
    |           КОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦенУслугиРемонта
    |               ТОГДА ЦеныНоменклатурыСрезПоследних.Цена * ЕСТЬNULL(КурсВалютыВидаЦен.Курс, 1) * ЕСТЬNULL(КурсВалютыВидаЦен.Кратность, 1) / ВЫБОР
    |                       КОГДА ЕСТЬNULL(КурсВалютыДокумента.Курс, 1) = 0
    |                           ТОГДА 1
    |                       ИНАЧЕ ЕСТЬNULL(КурсВалютыДокумента.Курс, 1)
    |                   КОНЕЦ / ВЫБОР
    |                       КОГДА ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1) = 0
    |                           ТОГДА 1
    |                       ИНАЧЕ ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1)
    |                   КОНЕЦ
    |           ИНАЧЕ 0
    |       КОНЕЦ) КАК ЦенаРемонта
    |ИЗ
    |   РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
    |           &Период,
    |           ВидЦены = &ВидЦенКраткосрочная
    |               ИЛИ ВидЦены = &ВидЦенДолгосрочная
    |               ИЛИ ВидЦены = &ВидЦенТранспортировка
    |               ИЛИ ВидЦены = &ВидЦенУслугиРемонта) КАК ЦеныНоменклатурыСрезПоследних
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсВалютыВидаЦен
    |       ПО ЦеныНоменклатурыСрезПоследних.Валюта = КурсВалютыВидаЦен.Валюта
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсВалютыДокумента
    |       ПО (КурсВалютыДокумента.Валюта = &Валюта)
    |ГДЕ
    |   ЦеныНоменклатурыСрезПоследних.Цена > 0
    |
    |СГРУППИРОВАТЬ ПО
    |   ЦеныНоменклатурыСрезПоследних.Номенклатура";
    
    Запрос.УстановитьПараметр("Период",                Объект.Дата);
    Запрос.УстановитьПараметр("ВидЦенКраткосрочная",   ПрайсЛист.ВидЦенКраткосрочная);
    Запрос.УстановитьПараметр("ВидЦенДолгосрочная",    ПрайсЛист.ВидЦенДолгосрочная);
    Запрос.УстановитьПараметр("ВидЦенТранспортировка", ПрайсЛист.ВидЦенТранспортировка);
    Запрос.УстановитьПараметр("ВидЦенУслугиРемонта",   ПрайсЛист.ВидЦенУслугиРемонта);
    Запрос.УстановитьПараметр("Валюта",                Объект.ВалютаВзаиморасчетов);
    
    Выборка = Запрос.Выполнить().Выбрать();
    
    Объект.пкТарифы.Очистить();
    Объект.пкТранспортировка.Очистить();
    Объект.пкУслугиРемонта.Очистить();
    
    Пока Выборка.Следующий() Цикл
        Если Выборка.Номенклатура.пкЭтоТехника Тогда 
            НоваяСтрока = Объект.пкТарифы.Добавить();
            НоваяСтрока.Модель = Выборка.Номенклатура;
        
            ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
            
            Если НЕ ЗначениеЗаполнено(НоваяСтрока.ЕдиницаИзмеренияКраткосрочнойЦены) Тогда
                НоваяСтрока.ЕдиницаИзмеренияКраткосрочнойЦены = Выборка.Номенклатура.ЕдиницаИзмерения;    
            КонецЕсли;    
            
            Если НЕ ЗначениеЗаполнено(НоваяСтрока.ЕдиницаИзмеренияДолгосрочнойЦены) Тогда
                НоваяСтрока.ЕдиницаИзмеренияДолгосрочнойЦены = Выборка.Номенклатура.ЕдиницаИзмерения;    
            КонецЕсли;    
        ИначеЕсли Выборка.ЦенаТранспортировки > 0 Тогда
            НоваяСтрока = Объект.пкТранспортировка.Добавить();
            НоваяСтрока.Услуга = Выборка.Номенклатура;
            НоваяСтрока.Цена   = Выборка.ЦенаТранспортировки;
            
            ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
        Иначе
            НоваяСтрока = Объект.пкУслугиРемонта.Добавить();
            НоваяСтрока.Услуга = Выборка.Номенклатура;
            НоваяСтрока.Цена   = Выборка.ЦенаРемонта;
            
            ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
        КонецЕсли;    
    КонецЦикла; 

КонецПроцедуры

Процедура ЗаполнитьТарифыПоПрайсЛистуНаСервере(Объект) Экспорт
    
    ПрайсЛист = Объект.пкПрайсЛист; 
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Модель,
    |   МАКСИМУМ(ВЫБОР
    |           КОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦенКраткосрочная
    |               ТОГДА ЦеныНоменклатурыСрезПоследних.Цена * ЕСТЬNULL(КурсВалютыВидаЦен.Курс, 1) * ЕСТЬNULL(КурсВалютыВидаЦен.Кратность, 1) / ВЫБОР
    |                       КОГДА ЕСТЬNULL(КурсВалютыДокумента.Курс, 1) = 0
    |                           ТОГДА 1
    |                       ИНАЧЕ ЕСТЬNULL(КурсВалютыДокумента.Курс, 1)
    |                   КОНЕЦ / ВЫБОР
    |                       КОГДА ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1) = 0
    |                           ТОГДА 1
    |                       ИНАЧЕ ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1)
    |                   КОНЕЦ
    |           ИНАЧЕ 0
    |       КОНЕЦ) КАК КраткосрочнаяЦена,
    |   МАКСИМУМ(ВЫБОР
    |           КОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦенДолгосрочная
    |               ТОГДА ЦеныНоменклатурыСрезПоследних.Цена * ЕСТЬNULL(КурсВалютыВидаЦен.Курс, 1) * ЕСТЬNULL(КурсВалютыВидаЦен.Кратность, 1) / ВЫБОР
    |                       КОГДА ЕСТЬNULL(КурсВалютыДокумента.Курс, 1) = 0
    |                           ТОГДА 1
    |                       ИНАЧЕ ЕСТЬNULL(КурсВалютыДокумента.Курс, 1)
    |                   КОНЕЦ / ВЫБОР
    |                       КОГДА ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1) = 0
    |                           ТОГДА 1
    |                       ИНАЧЕ ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1)
    |                   КОНЕЦ
    |           ИНАЧЕ 0
    |       КОНЕЦ) КАК ДолгосрочнаяЦена,
    |   МАКСИМУМ(ВЫБОР
    |           КОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦенКраткосрочная
    |               ТОГДА ЦеныНоменклатурыСрезПоследних.Упаковка
    |           ИНАЧЕ НЕОПРЕДЕЛЕНО
    |       КОНЕЦ) КАК ЕдиницаИзмеренияКраткосрочнойЦены,
    |   МАКСИМУМ(ВЫБОР
    |           КОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦенДолгосрочная
    |               ТОГДА ЦеныНоменклатурыСрезПоследних.Упаковка
    |           ИНАЧЕ НЕОПРЕДЕЛЕНО
    |       КОНЕЦ) КАК ЕдиницаИзмеренияДолгосрочнойЦены
    |ИЗ
    |   РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
    |           &Период,
    |           (ВидЦены = &ВидЦенКраткосрочная
    |               ИЛИ ВидЦены = &ВидЦенДолгосрочная)
    |               И Номенклатура.пкЭтоТехника) КАК ЦеныНоменклатурыСрезПоследних
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсВалютыВидаЦен
    |       ПО ЦеныНоменклатурыСрезПоследних.Валюта = КурсВалютыВидаЦен.Валюта
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсВалютыДокумента
    |       ПО (КурсВалютыДокумента.Валюта = &Валюта)
    |ГДЕ
    |   ЦеныНоменклатурыСрезПоследних.Цена > 0
    |
    |СГРУППИРОВАТЬ ПО
    |   ЦеныНоменклатурыСрезПоследних.Номенклатура";
    
    Запрос.УстановитьПараметр("Период",              Объект.Дата);
    Запрос.УстановитьПараметр("ВидЦенКраткосрочная", ПрайсЛист.ВидЦенКраткосрочная);
    Запрос.УстановитьПараметр("ВидЦенДолгосрочная",  ПрайсЛист.ВидЦенДолгосрочная);
    Запрос.УстановитьПараметр("Валюта",              Объект.ВалютаВзаиморасчетов);
    
    Выборка = Запрос.Выполнить().Выбрать();
    
    Объект.пкТарифы.Очистить();
            
    Пока Выборка.Следующий() Цикл
        НоваяСтрока = Объект.пкТарифы.Добавить();
        
        ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
        
        Если НЕ ЗначениеЗаполнено(НоваяСтрока.ЕдиницаИзмеренияКраткосрочнойЦены) Тогда
            НоваяСтрока.ЕдиницаИзмеренияКраткосрочнойЦены = НоваяСтрока.Модель.ЕдиницаИзмерения;    
        КонецЕсли;    
        
        Если НЕ ЗначениеЗаполнено(НоваяСтрока.ЕдиницаИзмеренияДолгосрочнойЦены) Тогда
            НоваяСтрока.ЕдиницаИзмеренияДолгосрочнойЦены = НоваяСтрока.Модель.ЕдиницаИзмерения;    
        КонецЕсли;    
    КонецЦикла; 

КонецПроцедуры

Процедура ЗаполнитьТранспортировкуПоПрайсЛистуНаСервере(Объект) Экспорт
    
    ПрайсЛист = Объект.пкПрайсЛист; 
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Услуга,
    |   МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.Цена * ЕСТЬNULL(КурсВалютыВидаЦен.Курс, 1) * ЕСТЬNULL(КурсВалютыВидаЦен.Кратность, 1) / ВЫБОР
    |           КОГДА ЕСТЬNULL(КурсВалютыДокумента.Курс, 1) = 0
    |               ТОГДА 1
    |           ИНАЧЕ ЕСТЬNULL(КурсВалютыДокумента.Курс, 1)
    |       КОНЕЦ / ВЫБОР
    |           КОГДА ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1) = 0
    |               ТОГДА 1
    |           ИНАЧЕ ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1)
    |       КОНЕЦ) КАК Цена
    |ИЗ
    |   РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, ВидЦены = &ВидЦенТранспортировка) КАК ЦеныНоменклатурыСрезПоследних
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсВалютыВидаЦен
    |       ПО ЦеныНоменклатурыСрезПоследних.Валюта = КурсВалютыВидаЦен.Валюта
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсВалютыДокумента
    |       ПО (КурсВалютыДокумента.Валюта = &Валюта)
    |ГДЕ
    |   ЦеныНоменклатурыСрезПоследних.Цена > 0
    |
    |СГРУППИРОВАТЬ ПО
    |   ЦеныНоменклатурыСрезПоследних.Номенклатура";
    
    Запрос.УстановитьПараметр("Период",                Объект.Дата);
    Запрос.УстановитьПараметр("ВидЦенТранспортировка", ПрайсЛист.ВидЦенТранспортировка);
    Запрос.УстановитьПараметр("Валюта",                Объект.ВалютаВзаиморасчетов);
    
    Выборка = Запрос.Выполнить().Выбрать();
    
    Объект.пкТранспортировка.Очистить();
            
    Пока Выборка.Следующий() Цикл
        НоваяСтрока = Объект.пкТранспортировка.Добавить();
        
        ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
    КонецЦикла;    

КонецПроцедуры

Процедура ЗаполнитьУслугиРемонтаПоПрайсЛистуНаСервере(Объект) Экспорт
    
    ПрайсЛист = Объект.пкПрайсЛист; 
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Услуга,
    |   ЦеныНоменклатурыСрезПоследних.Номенклатура.НаименованиеПолное КАК НаименованиеДляПечати,
    |   МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.Цена * ЕСТЬNULL(КурсВалютыВидаЦен.Курс, 1) * ЕСТЬNULL(КурсВалютыВидаЦен.Кратность, 1) / ВЫБОР
    |           КОГДА ЕСТЬNULL(КурсВалютыДокумента.Курс, 1) = 0
    |               ТОГДА 1
    |           ИНАЧЕ ЕСТЬNULL(КурсВалютыДокумента.Курс, 1)
    |       КОНЕЦ / ВЫБОР
    |           КОГДА ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1) = 0
    |               ТОГДА 1
    |           ИНАЧЕ ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1)
    |       КОНЕЦ) КАК Цена
    |ИЗ
    |   РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, ВидЦены = &ВидЦенУслугиРемонта) КАК ЦеныНоменклатурыСрезПоследних
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсВалютыВидаЦен
    |       ПО ЦеныНоменклатурыСрезПоследних.Валюта = КурсВалютыВидаЦен.Валюта
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсВалютыДокумента
    |       ПО (КурсВалютыДокумента.Валюта = &Валюта)
    |ГДЕ
    |   ЦеныНоменклатурыСрезПоследних.Цена > 0
    |
    |СГРУППИРОВАТЬ ПО
    |   ЦеныНоменклатурыСрезПоследних.Номенклатура,
    |   ЦеныНоменклатурыСрезПоследних.Номенклатура.НаименованиеПолное";
    
    Запрос.УстановитьПараметр("Период",              Объект.Дата);
    Запрос.УстановитьПараметр("ВидЦенУслугиРемонта", ПрайсЛист.ВидЦенУслугиРемонта);
    Запрос.УстановитьПараметр("Валюта",              Объект.ВалютаВзаиморасчетов);
    
    Выборка = Запрос.Выполнить().Выбрать();
    
    Объект.пкУслугиРемонта.Очистить();
            
    Пока Выборка.Следующий() Цикл
        НоваяСтрока = Объект.пкУслугиРемонта.Добавить();
        
        ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
    КонецЦикла;    

КонецПроцедуры

Процедура ЗаполнитьТарифВСтрокеПоПрайсЛистуНаСервере(Объект, НомерСтроки) Экспорт
    
    ПрайсЛист = Объект.пкПрайсЛист; 
    
    Строка = Объект.пкТарифы.НайтиПоИдентификатору(НомерСтроки);
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   МАКСИМУМ(ВЫБОР
    |           КОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦенКраткосрочная
    |               ТОГДА ЦеныНоменклатурыСрезПоследних.Цена * ЕСТЬNULL(КурсВалютыВидаЦен.Курс, 1) * ЕСТЬNULL(КурсВалютыВидаЦен.Кратность, 1) / ВЫБОР
    |                       КОГДА ЕСТЬNULL(КурсВалютыДокумента.Курс, 1) = 0
    |                           ТОГДА 1
    |                       ИНАЧЕ ЕСТЬNULL(КурсВалютыДокумента.Курс, 1)
    |                   КОНЕЦ / ВЫБОР
    |                       КОГДА ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1) = 0
    |                           ТОГДА 1
    |                       ИНАЧЕ ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1)
    |                   КОНЕЦ
    |           ИНАЧЕ 0
    |       КОНЕЦ) КАК КраткосрочнаяЦена,
    |   МАКСИМУМ(ВЫБОР
    |           КОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦенДолгосрочная
    |               ТОГДА ЦеныНоменклатурыСрезПоследних.Цена * ЕСТЬNULL(КурсВалютыВидаЦен.Курс, 1) * ЕСТЬNULL(КурсВалютыВидаЦен.Кратность, 1) / ВЫБОР
    |                       КОГДА ЕСТЬNULL(КурсВалютыДокумента.Курс, 1) = 0
    |                           ТОГДА 1
    |                       ИНАЧЕ ЕСТЬNULL(КурсВалютыДокумента.Курс, 1)
    |                   КОНЕЦ / ВЫБОР
    |                       КОГДА ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1) = 0
    |                           ТОГДА 1
    |                       ИНАЧЕ ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1)
    |                   КОНЕЦ
    |           ИНАЧЕ 0
    |       КОНЕЦ) КАК ДолгосрочнаяЦена,
    |   МАКСИМУМ(ВЫБОР
    |           КОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦенКраткосрочная
    |               ТОГДА ЦеныНоменклатурыСрезПоследних.Упаковка
    |           ИНАЧЕ НЕОПРЕДЕЛЕНО
    |       КОНЕЦ) КАК ЕдиницаИзмеренияКраткосрочнойЦены,
    |   МАКСИМУМ(ВЫБОР
    |           КОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦенДолгосрочная
    |               ТОГДА ЦеныНоменклатурыСрезПоследних.Упаковка
    |           ИНАЧЕ НЕОПРЕДЕЛЕНО
    |       КОНЕЦ) КАК ЕдиницаИзмеренияДолгосрочнойЦены
    |ИЗ
    |   РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
    |           &Период,
    |           (ВидЦены = &ВидЦенКраткосрочная
    |               ИЛИ ВидЦены = &ВидЦенДолгосрочная)
    |               И Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыСрезПоследних
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсВалютыВидаЦен
    |       ПО ЦеныНоменклатурыСрезПоследних.Валюта = КурсВалютыВидаЦен.Валюта
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсВалютыДокумента
    |       ПО (КурсВалютыДокумента.Валюта = &Валюта)
    |ГДЕ
    |   ЦеныНоменклатурыСрезПоследних.Цена > 0
    |
    |СГРУППИРОВАТЬ ПО
    |   ЦеныНоменклатурыСрезПоследних.Номенклатура";
    
    Запрос.УстановитьПараметр("Период",              Объект.Дата);
    Запрос.УстановитьПараметр("ВидЦенКраткосрочная", ПрайсЛист.ВидЦенКраткосрочная);
    Запрос.УстановитьПараметр("ВидЦенДолгосрочная",  ПрайсЛист.ВидЦенДолгосрочная);
    Запрос.УстановитьПараметр("Валюта",              Объект.ВалютаВзаиморасчетов);
    Запрос.УстановитьПараметр("Номенклатура",        Строка.Модель);
    
    Выборка = Запрос.Выполнить().Выбрать();
                
    Если Выборка.Следующий() Тогда
        ЗаполнитьЗначенияСвойств(Строка, Выборка); 
        
        Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмеренияКраткосрочнойЦены) Тогда
            Строка.ЕдиницаИзмеренияКраткосрочнойЦены = Строка.Модель.ЕдиницаИзмерения;    
        КонецЕсли;    
        
        Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмеренияДолгосрочнойЦены) Тогда
            Строка.ЕдиницаИзмеренияДолгосрочнойЦены = Строка.Модель.ЕдиницаИзмерения;    
        КонецЕсли;
    КонецЕсли;
        
КонецПроцедуры

Процедура ЗаполнитьТранспортировкуВСтрокеПоПрайсЛистуНаСервере(Объект, НомерСтроки) Экспорт
    
    ПрайсЛист = Объект.пкПрайсЛист; 

    Строка = Объект.пкТранспортировка.НайтиПоИдентификатору(НомерСтроки);
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.Цена * ЕСТЬNULL(КурсВалютыВидаЦен.Курс, 1) * ЕСТЬNULL(КурсВалютыВидаЦен.Кратность, 1) / ВЫБОР
    |           КОГДА ЕСТЬNULL(КурсВалютыДокумента.Курс, 1) = 0
    |               ТОГДА 1
    |           ИНАЧЕ ЕСТЬNULL(КурсВалютыДокумента.Курс, 1)
    |       КОНЕЦ / ВЫБОР
    |           КОГДА ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1) = 0
    |               ТОГДА 1
    |           ИНАЧЕ ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1)
    |       КОНЕЦ) КАК Цена
    |ИЗ
    |   РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
    |           &Период,
    |           ВидЦены = &ВидЦенТранспортировка
    |               И Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыСрезПоследних
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсВалютыВидаЦен
    |       ПО ЦеныНоменклатурыСрезПоследних.Валюта = КурсВалютыВидаЦен.Валюта
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсВалютыДокумента
    |       ПО (КурсВалютыДокумента.Валюта = &Валюта)
    |ГДЕ
    |   ЦеныНоменклатурыСрезПоследних.Цена > 0";
    
    Запрос.УстановитьПараметр("Период",                Объект.Дата);
    Запрос.УстановитьПараметр("ВидЦенТранспортировка", ПрайсЛист.ВидЦенТранспортировка);
    Запрос.УстановитьПараметр("Валюта",                Объект.ВалютаВзаиморасчетов);
    Запрос.УстановитьПараметр("Номенклатура",          Строка.Услуга);
    
    Выборка = Запрос.Выполнить().Выбрать();
                
    Если Выборка.Следующий() Тогда
        ЗаполнитьЗначенияСвойств(Строка, Выборка); 
    КонецЕсли;  

КонецПроцедуры

Процедура ЗаполнитьУслугуРемонтаВСтрокеПоПрайсЛистуНаСервере(Объект, НомерСтроки) Экспорт
    
    ПрайсЛист = Объект.пкПрайсЛист; 
    
    Строка = Объект.пкУслугиРемонта.НайтиПоИдентификатору(НомерСтроки);
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.Цена * ЕСТЬNULL(КурсВалютыВидаЦен.Курс, 1) * ЕСТЬNULL(КурсВалютыВидаЦен.Кратность, 1) / ВЫБОР
    |           КОГДА ЕСТЬNULL(КурсВалютыДокумента.Курс, 1) = 0
    |               ТОГДА 1
    |           ИНАЧЕ ЕСТЬNULL(КурсВалютыДокумента.Курс, 1)
    |       КОНЕЦ / ВЫБОР
    |           КОГДА ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1) = 0
    |               ТОГДА 1
    |           ИНАЧЕ ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1)
    |       КОНЕЦ) КАК Цена
    |ИЗ
    |   РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
    |           &Период,
    |           ВидЦены = &ВидЦенУслугиРемонта
    |               И Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыСрезПоследних
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсВалютыВидаЦен
    |       ПО ЦеныНоменклатурыСрезПоследних.Валюта = КурсВалютыВидаЦен.Валюта
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсВалютыДокумента
    |       ПО (КурсВалютыДокумента.Валюта = &Валюта)
    |ГДЕ
    |   ЦеныНоменклатурыСрезПоследних.Цена > 0";
    
    Запрос.УстановитьПараметр("Период",              Объект.Дата);
    Запрос.УстановитьПараметр("ВидЦенУслугиРемонта", ПрайсЛист.ВидЦенУслугиРемонта);
    Запрос.УстановитьПараметр("Валюта",              Объект.ВалютаВзаиморасчетов);
    Запрос.УстановитьПараметр("Номенклатура",        Строка.Услуга);
    
    Выборка = Запрос.Выполнить().Выбрать();
                
    Если Выборка.Следующий() Тогда
        ЗаполнитьЗначенияСвойств(Строка, Выборка);
    КонецЕсли;    

КонецПроцедуры

Функция ПолучитьОстатокПоДоговору(Договор)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   СУММА(РасчетыСКлиентамиОстатки.СуммаОстаток * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 1) * ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 1)) КАК КОплатеОстаток
    |ИЗ
    |   РегистрНакопления.РасчетыСКлиентами.Остатки(, ЗаказКлиента.Договор = &Договор) КАК РасчетыСКлиентамиОстатки
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалютСрезПоследних
    |       ПО РасчетыСКлиентамиОстатки.Валюта = КурсыВалютСрезПоследних.Валюта";
    
    Запрос.УстановитьПараметр("Договор", Договор);
    
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Если Выборка.Следующий() Тогда
        Возврат Выборка.КОплатеОстаток;
    Иначе	
        Возврат 0;
    КонецЕсли;
        
КонецФункции    

Функция ПроверитьДоступностьРоли(ИмяРоли) Экспорт

	Возврат РольДоступна(ИмяРоли);	

КонецФункции

Функция ПроверитьВхождениеПользователяВГруппупкЗакрытиеДоговоровИзФормыРарус() Экспорт

	ВхождениеВГруппу = Справочники.ГруппыДоступа.пкЗакрытиеДоговоровИзФормыРарус.Пользователи.Найти(Пользователи.ТекущийПользователь());
	
	Если ВхождениеВГруппу = Неопределено Тогда	
		Возврат Ложь;	
	Иначе	
		Возврат Истина;	
	КонецЕсли;
	
КонецФункции

Функция ПроверитьВхождениеПользователяВГруппу(ИмяГруппы) Экспорт

	ВхождениеВГруппу = Справочники.ГруппыДоступа[ИмяГруппы].Пользователи.Найти(Пользователи.ТекущийПользователь());
	
	Если ВхождениеВГруппу = Неопределено Тогда	
		Возврат Ложь;	
	Иначе	
		Возврат Истина;	
	КонецЕсли;
	
КонецФункции

Функция ПроверитьВхождениеПользователяВГруппупкИзменениеДополнительнойИнформацииКонтрагентаРарус() Экспорт

	ВхождениеВГруппу = Справочники.ГруппыДоступа.пкИзменениеДополнительнойИнформацииКонтрагентаРарус.Пользователи.Найти(Пользователи.ТекущийПользователь());
	
	Если ВхождениеВГруппу = Неопределено Тогда	
		Возврат Ложь;	
	Иначе	
		Возврат Истина;	
	КонецЕсли;
	
КонецФункции

Функция ПроверитьВхождениеПользователяВГруппупкУправлениеСогласованиемДоговоровСПоставщикамиРарус() Экспорт

	ВхождениеВГруппу = Справочники.ГруппыДоступа.пкУправлениеСогласованиемДоговоровСПоставщикамиРарус.Пользователи.Найти(Пользователи.ТекущийПользователь());
	
	Если ВхождениеВГруппу = Неопределено Тогда	
		Возврат Ложь;
		Сообщить("Ложь");
	Иначе	
		Возврат Истина;
		сообщить("Истина");
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОбъектыЭксплуатации

Процедура СформироватьНаименованиеОбъектаЭксплуатацииНаСервере(Объект) Экспорт
    
    Если Объект.пкЭтоТехника Тогда
        Модель = Объект.пкМодель;
        
        Объект.Наименование = ?(ЗначениеЗаполнено(Объект.Код), СокрЛП(Объект.Код) + ", ", "") + ?(ЗначениеЗаполнено(Модель.Производитель)
		//++ Рарус Лимаренко 30.03.2018 Запрос №11000
					И  НЕ Модель.пкНеУчитыватьПроизводителя
		//-- Рарус Лимаренко 30.03.2018	Запрос №11000	
		, Модель.Производитель.Наименование + " ", "") + Модель.Наименование;         
    КонецЕсли;
    
КонецПроцедуры

Функция ПолучитьДокуметПринятияКУчетуНаСервере(Объект) Экспорт
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   пкСтатусыТехники.Регистратор КАК ПринятиеКУчету
    |ИЗ
    |   РегистрСведений.пкСтатусыТехники КАК пкСтатусыТехники
    |ГДЕ
    |   пкСтатусыТехники.Техника = &Техника
    |   И пкСтатусыТехники.Регистратор ССЫЛКА Документ.пкОперацииСТехникой
    |           И пкСтатусыТехники.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийСТехникой.Поступление)";
    
    Запрос.УстановитьПараметр("Техника", Объект);
    
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Если Выборка.Следующий() Тогда
        Возврат Выборка.ПринятиеКУчету;
    Иначе
        Возврат Неопределено;     
    КонецЕсли;    
    
КонецФункции    
  
#КонецОбласти

#Область ПлатежныйКалендарь

Процедура ПлатежныйКалендарьУстановитьДополнительныеФильтры(Форма, Объект) Экспорт

	Попытка
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.ЗаявкиКОплате, "Контрагент", Форма.пкСЗфильтрКонтрагенты, 
															ВидСравненияКомпоновкиДанных.ВСписке, , Форма.пкСЗфильтрКонтрагенты.Количество());

	Исключение КонецПопытки;
КонецПроцедуры
 
#КонецОбласти

#Область ЗаявкаНаРасходованиеДенежныхСредств

Процедура ЗаявкаНаРасходованиеДенежныхСредствКурсДокументаПриИзмененииНаСервере(Объект, СуммаВзаиморасчетов) Экспорт
    
    Объект.СуммаДокумента = СуммаВзаиморасчетов * ?(Объект.пкКурсДокумента = 0,1,Объект.пкКурсДокумента); 

	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		
		СтрокаТаблицы = Объект.РасшифровкаПлатежа[0];
		СтрокаТаблицы.Сумма = Объект.СуммаДокумента;
		СтрокаТаблицы.СуммаВзаиморасчетов = СуммаВзаиморасчетов;
		
	ИначеЕсли Объект.РасшифровкаПлатежа.Количество() = 0 И Объект.СуммаДокумента > 0 Тогда
		
		СтрокаТаблицы = Объект.РасшифровкаПлатежа.Добавить();
		СтрокаТаблицы.Сумма = Объект.СуммаДокумента;
		
	ИначеЕсли Объект.РасшифровкаПлатежа.Итог("Сумма") > Объект.СуммаДокумента Тогда
		
		СуммаРазницы = Объект.РасшифровкаПлатежа.Итог("Сумма") - Объект.СуммаДокумента;
		НомерСтроки = Объект.РасшифровкаПлатежа.Количество() - 1;
		Пока НомерСтроки <> 0 Цикл
			СтрокаРасшифровки = Объект.РасшифровкаПлатежа[НомерСтроки];
			Если СтрокаРасшифровки.Сумма = СуммаРазницы Тогда
				Объект.РасшифровкаПлатежа.Удалить(НомерСтроки);
			ИначеЕсли СтрокаРасшифровки.Сумма > СуммаРазницы Тогда
				СтрокаРасшифровки.Сумма = СтрокаРасшифровки.Сумма - СуммаРазницы;
				СтрокаРасшифровки.СуммаВзаиморасчетов = 0;
			ИначеЕсли СтрокаРасшифровки.Сумма < СуммаРазницы Тогда
				СуммаРазницы = СуммаРазницы - СтрокаРасшифровки.Сумма;
				Объект.РасшифровкаПлатежа.Удалить(НомерСтроки);
			КонецЕсли;
			НомерСтроки = НомерСтроки - 1 ;
        КонецЦикла;
        
    КонецЕсли;
    
КонецПроцедуры    

Процедура ЗаявкаНаРасходованиеДенежныхСредствДатаКурсаПриИзмененииНаСервере(Объект, ВалютаВзаиморасчетов, СуммаВзаиморасчетов) Экспорт
    
    СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, Объект.пкДатаКурса);
    
    Объект.пкКурсДокумента = СтруктураКурса.Курс;
    
    ЗаявкаНаРасходованиеДенежныхСредствКурсДокументаПриИзмененииНаСервере(Объект, СуммаВзаиморасчетов);
    
КонецПроцедуры 

//++ Рарус Лимаренко 16.02.2018 Задача 9741
Функция ЗРДСпкДатаКурсаПриИзмененииНаСервере(Объект) Экспорт

	ТЗВалют = Объект.РасшифровкаПлатежа.Выгрузить(,"ВалютаВзаиморасчетов");	
	
	ТЗВалют.Свернуть("ВалютаВзаиморасчетов");
	
	Если ТЗВалют.Количество() > 1 Тогда
			Сообщить("Курс невозможно установить для табличной части, где несколько валют взаиморасчетов");
		Возврат 1;	
	КонецЕсли;
	
	Валюта = ?(Объект.РасшифровкаПлатежа.Количество() > 0,ТЗВалют[0].ВалютаВзаиморасчетов,Объект.Валюта);
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, Объект.пкДатаКурса);    
	Возврат СтруктураКурса.Курс;		
КонецФункции
//-- Рарус Лимаренко 16.02.2018 Задача 9741

Процедура ЗаявкаНаРасходованиеДенежныхСредствСуммаДокументаПриИзмененииСервер(Объект, Партнер, ДоговорКонтрагента) Экспорт
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.КонвертацияВалюты") Тогда
		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		Если Объект.КурсКонвертации <> 0 Тогда
			Если Объект.ВалютаКонвертации = ВалютаРегламентированногоУчета Тогда
				Объект.СуммаПослеКонвертации = Объект.СуммаДокумента * Объект.КурсКонвертации;
			Иначе
				Объект.СуммаПослеКонвертации = Объект.СуммаДокумента / Объект.КурсКонвертации;
			КонецЕсли;
		Иначе
			Объект.СуммаПослеКонвертации = 0;
		КонецЕсли;
	КонецЕсли;
	
	// Заполним реквизит "Партнер"
	Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Объект.Контрагент, Объект.ХозяйственнаяОперация);
	Для Каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
		Если СтрокаРасшифровки.Партнер.Пустая() Тогда
			СтрокаРасшифровки.Партнер = Партнер;
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1
		И ЗначениеЗаполнено(ДоговорКонтрагента)
		И Не ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].Заказ) Тогда
		Объект.РасшифровкаПлатежа[0].Заказ = ДоговорКонтрагента;
		Объект.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств =
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "СтатьяДвиженияДенежныхСредств");
	КонецЕсли;
	
	Если Объект.ПлатежиПо275ФЗ Тогда
		
		Для каждого СтрокаДоговораСЗаказчиком Из Объект.ДоговорыСЗаказчиками Цикл
			СтрокаДоговораСЗаказчиком.Сумма = СтрокаДоговораСЗаказчиком.Процент * Объект.СуммаДокумента / 100;
		КонецЦикла;
		
		Если Не Объект.ДоговорСУчастникомГОЗ Тогда
			Объект.СуммаОплатыЗаСчетСобственныхСредств = 
				Объект.ПроцентОплатыЗаСчетСобственныхСредств * Объект.СуммаДокумента / 100;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
		СтрокаРасшифровки.СуммаНДС	= ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(СтрокаРасшифровки.Сумма, ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтрокаРасшифровки.СтавкаНДС), Истина);
	КонецЦикла;
	Объект.пкСуммаБезНДС = Объект.РасшифровкаПлатежа.Итог("Сумма") - Объект.РасшифровкаПлатежа.Итог("СуммаНДС");
	
КонецПроцедуры
//Рарус Владимир Подрезов Конец

#КонецОбласти

#Область ПоступлениеТоваровУслуг

Процедура ПоступлениеТоваровУслугПриИзмененииНаСервере(Объект, ВалютаВзаиморасчетов) Экспорт
    
    СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, Объект.пкДатаКурса);
    
    Объект.пкКурсДокумента = СтруктураКурса.Курс;
        
КонецПроцедуры    

#КонецОбласти

#Область СписаниеБезналичныхДенежныхСредств

Процедура СписаниеБезналичныхДенежныхСредствКурсДокументаПриИзмененииНаСервере(Объект, СуммаВзаиморасчетов) Экспорт
    
    Объект.СуммаДокумента = СуммаВзаиморасчетов * Объект.пкКурсДокумента; 
    
	Если Объект.СуммаДокумента = 0 Тогда
		
		Объект.РасшифровкаПлатежа.Очистить();
		
	ИначеЕсли Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		
		СтрокаТаблицы = Объект.РасшифровкаПлатежа[0];
		СтрокаТаблицы.Сумма = Объект.СуммаДокумента;
		СтрокаТаблицы.СуммаВзаиморасчетов = СуммаВзаиморасчетов;
		
	ИначеЕсли Объект.РасшифровкаПлатежа.Количество() = 0 И Объект.СуммаДокумента > 0 Тогда
		
		СтрокаТаблицы = Объект.РасшифровкаПлатежа.Добавить();
		СтрокаТаблицы.Сумма = Объект.СуммаДокумента;
		
	ИначеЕсли Объект.РасшифровкаПлатежа.Итог("Сумма") > Объект.СуммаДокумента Тогда
		
		СуммаРазницы = Объект.РасшифровкаПлатежа.Итог("Сумма") - Объект.СуммаДокумента;
		НомерСтроки = Объект.РасшифровкаПлатежа.Количество() - 1;
		Пока НомерСтроки <> 0 Цикл
			СтрокаРасшифровки = Объект.РасшифровкаПлатежа[НомерСтроки];
			Если СтрокаРасшифровки.Сумма = СуммаРазницы Тогда
				Объект.РасшифровкаПлатежа.Удалить(НомерСтроки);
			ИначеЕсли СтрокаРасшифровки.Сумма > СуммаРазницы Тогда
				СтрокаРасшифровки.Сумма = СтрокаРасшифровки.Сумма - СуммаРазницы;
				СтрокаРасшифровки.СуммаВзаиморасчетов = 0;
			ИначеЕсли СтрокаРасшифровки.Сумма < СуммаРазницы Тогда
				СуммаРазницы = СуммаРазницы - СтрокаРасшифровки.Сумма;
				Объект.РасшифровкаПлатежа.Удалить(НомерСтроки);
			КонецЕсли;
			НомерСтроки = НомерСтроки - 1 ;
        КонецЦикла;
        
    КонецЕсли;
    
КонецПроцедуры    

Процедура СписаниеБезналичныхДенежныхСредствДатаКурсаПриИзмененииНаСервере(Объект, ВалютаВзаиморасчетов, СуммаВзаиморасчетов) Экспорт
    
    СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, Объект.пкДатаКурса);
    
    Объект.пкКурсДокумента = СтруктураКурса.Курс;
    
    ЗаявкаНаРасходованиеДенежныхСредствКурсДокументаПриИзмененииНаСервере(Объект, СуммаВзаиморасчетов);
    
КонецПроцедуры    

#КонецОбласти

#Область ОтражениеЗарплатыВФинансовомУчете

//Рарус Владимир Подрезов 16.03.2017
Процедура ОтражениеЗарплатыВФинансовомУчетеУдержанияЗаполнитьПодразделенияНаСервере(Объект) Экспорт
    
	Для Каждого текСтрока Из Объект.УдержаннаяЗарплата Цикл
		//Если ЗначениеЗаполнено(текСтрока.ПодразделениеПредприятия) Тогда
		//	Продолжить;
		//КонецЕсли;
		Если НЕ ЗначениеЗаполнено(текСтрока.ФизическоеЛицо) Тогда
			Продолжить;
		КонецЕсли;
		//Если НЕ ЗначениеЗаполнено(текСтрока.ФизическоеЛицо.пкПодразделение) Тогда
		//	Продолжить;
		//КонецЕсли;
		
		текСтрока.ПодразделениеПредприятия = текСтрока.ФизическоеЛицо.пкПодразделение;
		
	КонецЦикла;
	
КонецПроцедуры    
//Рарус Владимир Подрезов Конец

#КонецОбласти

#Область РеализацияУслугПрочихАктивов

//Рарус Владимир Подрезов 22.03.2017
Процедура РеализацияУслугПрочихАктивовЗаполнитьСодержанияНаСервере(Объект) Экспорт
    
	Для Каждого текСтрока Из Объект.Доходы Цикл
		Если НЕ ЗначениеЗаполнено(текСтрока.АналитикаДоходов) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(текСтрока.АналитикаДоходов) <> Тип("СправочникСсылка.ОбъектыЭксплуатации") Тогда
			Продолжить;
		КонецЕсли;
		
		Если текСтрока.АналитикаДоходов.пкЭтоТехника Тогда
			
			текСтрока.Содержание = ?(ЗначениеЗаполнено(текСтрока.АналитикаДоходов.пкМодель),
										?(ЗначениеЗаполнено(текСтрока.АналитикаДоходов.пкМодель.Производитель)
											И НЕ текСтрока.АналитикаДоходов.пкМодель.пкНеУчитыватьПроизводителя, 
											СокрЛП(текСтрока.АналитикаДоходов.пкМодель.Производитель) + " ", "") + 
										СокрЛП(текСтрока.АналитикаДоходов.пкМодель) + ", ", "") + 
									СокрЛП(текСтрока.АналитикаДоходов.Код) + ", "  +
									?(ЗначениеЗаполнено(текСтрока.АналитикаДоходов.ЗаводскойНомер), СокрЛП(текСтрока.АналитикаДоходов.ЗаводскойНомер) + ", ", "") + 
									?(ЗначениеЗаполнено(текСтрока.АналитикаДоходов.ДатаВыпуска), Формат(текСтрока.АналитикаДоходов.ДатаВыпуска, "ДФ=yyyy"), "");
									
		Иначе
			Если НЕ ЗначениеЗаполнено(текСтрока.Содержание) Тогда
				текСтрока.Содержание = текСтрока.АналитикаДоходов.НаименованиеПолное;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры    
//Рарус Владимир Подрезов Конец

#КонецОбласти

#Область СчетаФактуры

Функция  пкТекстЗапросаДанныхТабличнойЧастиДляПечатиСчетаФактуры(ПараметрыПечати) Экспорт

ПечататьСчетаФактурыПолученные = ПараметрыПечати.Свойство("МассивСчетФактураПолученный");
	
	ТекстЗапроса =
    	
   	"ВЫБРАТЬ
	|	СчетаФактурыОснования.Ссылка                                 КАК Ссылка,
	|	МИНИМУМ(ТаблицаДокумента.НомерСтроки)                        КАК НомерСтроки,	
	|	ТаблицаДокумента.Номенклатура                                КАК Номенклатура,
	|	ТаблицаДокумента.НоменклатураНаименование                    КАК НоменклатураНаименование,
    |   МИНИМУМ(ТаблицаДокумента.пкДатаНачалаАренды) 				 КАК пкДатаНачалаАренды,
    |   МАКСИМУМ(ТаблицаДокумента.пкДатаОкончанияАренды)			 КАК пкДатаОкончанияАренды,
    |   ТаблицаДокумента.пкТехника									 КАК пкТехника,
    |   ТаблицаДокумента.НомерСтрокиТранспортировки					 КАК НомерСтрокиТранспортировки,
    |   МАКСИМУМ(ТаблицаДокумента.пкПримечаниеДляПечати)			 КАК пкПримечаниеДляПечати,
//Рарус Владимир Подрезов 29.03.2017
    |   ТаблицаДокумента.АналитикаДоходов							 КАК АналитикаДоходов,
    |   ТаблицаДокумента.КлючСтрокиРаботы							 КАК КлючСтрокиРаботы,
//Рарус Владимир Подрезов Конец
	|	ТаблицаДокумента.НоменклатураКод                             КАК НоменклатураКод,
	|	ТаблицаДокумента.КодТНВЭД                                    КАК КодТНВЭД,
	|	ТаблицаДокумента.ЕдиницаИзмерения                            КАК ЕдиницаИзмерения,
//Рарус Владимир Подрезов 02.06.2017
//	|	ДанныеЕдиницыИзмерения.Представление                         КАК ЕдиницаИзмеренияНаименование,
	|	ДанныеЕдиницыИзмерения.НаименованиеПолное                    КАК ЕдиницаИзмеренияНаименование,
//Рарус Владимир Подрезов Конец
	|	ДанныеЕдиницыИзмерения.Код                                   КАК ЕдиницаИзмеренияКод,
	|	ТаблицаДокумента.Характеристика                              КАК Характеристика,
	|	ЕСТЬNULL(ДанныеХарактеристики.НаименованиеПолное, """")      КАК ХарактеристикаНаименование,
	|	ВЫБОР КОГДА ТаблицаДокумента.НомерГТД.РегистрационныйНомер = """" 
	|		ТОГДА ТаблицаДокумента.НомерГТД
	|	ИНАЧЕ ТаблицаДокумента.НомерГТД.РегистрационныйНомер КОНЕЦ   КАК НомерГТД,
	|	ДанныеСтраныПросхождения.Ссылка                              КАК СтранаПроисхождения,
	|	ДанныеСтраныПросхождения.Код                                 КАК СтранаПроисхожденияКод,
	|	СУММА(ТаблицаДокумента.Количество)                           КАК Количество,
	|	ТаблицаДокумента.Цена                                        КАК Цена,
	|	СУММА(ТаблицаДокумента.СуммаБезНДС)                          КАК СуммаБезНДС,
	|	СУММА(ТаблицаДокумента.СуммаНДС)                             КАК СуммаНДС,
	|	СУММА(ТаблицаДокумента.СуммаБезНДС
	|		+ ТаблицаДокумента.СуммаНДС)                             КАК СуммаСНДС,
	|	ТаблицаДокумента.СтавкаНДС                                   КАК СтавкаНДС,
	|
	|	СУММА(ТаблицаДокумента.КоличествоДо)                         КАК КоличествоДо,
    |   ТаблицаДокумента.ЦенаДо                                      КАК ЦенаДо,
	|	СУММА(ТаблицаДокумента.СуммаБезНДСДо)                        КАК СуммаБезНДСДо,
	|	СУММА(ТаблицаДокумента.РазницаБезНДСУвеличение)              КАК РазницаБезНДСУвеличение,
	|	СУММА(ТаблицаДокумента.РазницаБезНДСУменьшение)              КАК РазницаБезНДСУменьшение,
	|	СУММА(ТаблицаДокумента.СуммаНДСДо)                           КАК СуммаНДСДо,
	|	СУММА(ТаблицаДокумента.РазницаНДСУвеличение)                 КАК РазницаНДСУвеличение,
	|	СУММА(ТаблицаДокумента.РазницаНДСУменьшение)                 КАК РазницаНДСУменьшение,
	|	СУММА(ТаблицаДокумента.СуммаБезНДСДо
	|		+ ТаблицаДокумента.СуммаНДСДо)                           КАК СуммаСНДСДо,
	|	СУММА(ТаблицаДокумента.РазницаСНДСУвеличение)                КАК РазницаСНДСУвеличение,
	|	СУММА(ТаблицаДокумента.РазницаСНДСУменьшение)                КАК РазницаСНДСУменьшение,
	|
	|	//ДанныеНаборов
	|
	|	ЛОЖЬ                                                         КАК ЭтоВозвратнаяТара
//++ Рарус Лимаренко 29.10.2018
	|,ТаблицаДокумента.пкЗамененнаяМодель КАК пкЗамененнаяМодель
//-- Рарус Лимаренко 29.10.2018	
	|
	|ИЗ ТаблицаТоваровДокументов КАК ТаблицаДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаФактурыОснования КАК СчетаФактурыОснования
	|	ПО СчетаФактурыОснования.ДокументОснование = ТаблицаДокумента.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК ДанныеЕдиницыИзмерения
	|	ПО ТаблицаДокумента.ЕдиницаИзмерения = ДанныеЕдиницыИзмерения.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ДанныеХарактеристики
	|	ПО ТаблицаДокумента.Характеристика = ДанныеХарактеристики.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтраныМира КАК ДанныеСтраныПросхождения
	|	ПО ТаблицаДокумента.НомерГТД.СтранаПроисхождения = ДанныеСтраныПросхождения.Ссылка
	|
	|ГДЕ
	|	НЕ ТаблицаДокумента.ЭтоВозвратнаяТара
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетаФактурыОснования.Ссылка,
	|	ТаблицаДокумента.Номенклатура,
	|	ТаблицаДокумента.НоменклатураНаименование,
	|	ТаблицаДокумента.пкТехника,
	|	ТаблицаДокумента.НомерСтрокиТранспортировки,
//Рарус Владимир Подрезов 29.03.2017
    |   ТаблицаДокумента.АналитикаДоходов,
    |   ТаблицаДокумента.КлючСтрокиРаботы,
//Рарус Владимир Подрезов Конец
	|	ТаблицаДокумента.НоменклатураКод,
	|	ТаблицаДокумента.КодТНВЭД,
	|	ТаблицаДокумента.ЕдиницаИзмерения,
//Рарус Владимир Подрезов 02.06.2017
//	|	ДанныеЕдиницыИзмерения.Представление,
	|	ДанныеЕдиницыИзмерения.НаименованиеПолное,
//Рарус Владимир Подрезов Конец
	|	ДанныеЕдиницыИзмерения.Код,
	|	ТаблицаДокумента.Характеристика,
	|	ДанныеХарактеристики.НаименованиеПолное,
	|	ВЫБОР КОГДА ТаблицаДокумента.НомерГТД.РегистрационныйНомер = """" ТОГДА ТаблицаДокумента.НомерГТД ИНАЧЕ ТаблицаДокумента.НомерГТД.РегистрационныйНомер КОНЕЦ,
	|	ДанныеСтраныПросхождения.Ссылка,
	|	ТаблицаДокумента.Цена,
	|	ТаблицаДокумента.ЦенаДо,
	|	//ГруппировкаНаборов
	|	ТаблицаДокумента.СтавкаНДС	
	//++ Рарус Лимаренко 28.11.2018
	|	,ТаблицаДокумента.пкЗамененнаяМодель	
	//-- Рарус Лимаренко 28.11.2018	
	|";
    
    //---rarus-spb_zlov 22.01.2017 
	
	Если ПараметрыПечати.ВыводитьНаборы Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДанныеНаборов",
		"МИНИМУМ(ТаблицаДокумента.НомерСтрокиНаборы)                     КАК НомерСтрокиНаборы,
		|	ТаблицаДокумента.ВариантПредставленияНабораВПечатныхФормах   КАК ВариантПредставленияНабораВПечатныхФормах,
		|	ТаблицаДокумента.ВариантРасчетаЦеныНабора                    КАК ВариантРасчетаЦеныНабора,
		|	ТаблицаДокумента.НоменклатураНабора                          КАК НоменклатураНабора,
		|	ТаблицаДокумента.ХарактеристикаНабора                        КАК ХарактеристикаНабора,
		|	ТаблицаДокумента.ЭтоКомплектующие                            КАК ЭтоКомплектующие,
		|	ТаблицаДокумента.ЭтоНабор                                    КАК ЭтоНабор,
		|	ТаблицаДокумента.ПолныйНабор                                 КАК ПолныйНабор,");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ГруппировкаНаборов",
		"ТаблицаДокумента.ВариантПредставленияНабораВПечатныхФормах,
		|	ТаблицаДокумента.ВариантРасчетаЦеныНабора,
		|	ТаблицаДокумента.НоменклатураНабора,
		|	ТаблицаДокумента.ХарактеристикаНабора,
		|	ТаблицаДокумента.ЭтоКомплектующие,
		|	ТаблицаДокумента.ЭтоНабор,
		|	ТаблицаДокумента.ПолныйНабор,");
		
	КонецЕсли;
	
	Если ПечататьСчетаФактурыПолученные Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|" +
		СтрЗаменить(ТекстЗапроса, "СчетаФактурыОснования", "СчетаФактурыПолученныеОснования");
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	//ПорядокНаборов
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка
	|;";
	
	Если ПараметрыПечати.ВыводитьНаборы Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ПорядокНаборов",
		"НомерСтрокиНаборы,
		|	НоменклатураНабора,
		|	ХарактеристикаНабора,
		|	ЭтоНабор УБЫВ,");
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	

КонецФункции // ()
	
#КонецОбласти

#Область РеализацияТоваровУслуг

//Рарус Владимир Подрезов 22.03.2017
Процедура РеализацияТоваровУслугЗаполнитьЭтапыОплаты(Объект) Экспорт
    
	ПараметрыЗаполненияЭтапов = ЭтапыОплатыСервер.ПараметрыЗаполненияЭтаповОплатыПоЗаказам();
				ЗаполнитьЗначенияСвойств(ПараметрыЗаполненияЭтапов,Объект);
				ПараметрыЗаполненияЭтапов.ТабличнаяЧасть =  Объект.Товары.Выгрузить();
				ПараметрыЗаполненияЭтапов.ИмяПоляЗаказ   = "ЗаказКлиента";
				ПараметрыЗаполненияЭтапов.ЕстьТара       = ЛОЖЬ;
				ПараметрыЗаполненияЭтапов.ПоЗаказам      = Истина;
				
				ЭтапыОплатыСервер.РаспределитьСуммыЭтаповОплатыДокументаПоЗаказам(ПараметрыЗаполненияЭтапов);
			
КонецПроцедуры    
//Рарус Владимир Подрезов Конец

#КонецОбласти


Функция СтруктураВСтроку(Структура, РазделительКлючаИЗначения = "=", РазделительЭлементов = ";") Экспорт
	Результат = "";
	Для Каждого КлючИЗначение Из Структура Цикл
		Результат = Результат + ?(Результат = "", "", РазделительЭлементов)
			+ КлючИЗначение.Ключ
			+ РазделительКлючаИЗначения
			+ КлючИЗначение.Значение;
	КонецЦикла;
	Возврат Результат;
КонецФункции

//++ Рарус IA 03.10.2016
Процедура ЗаписатьКоллекциюАналоговДляОбъекта(пкАналогиНоменклатуры, Объект)
	
	НаборЗаписейТекНоменклатура = РегистрыСведений.пкАналогиНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписейТекНоменклатура.Отбор.Номенклатура.Установить(Объект, Истина);
	НаборЗаписейТекНоменклатура.Прочитать();
	Если НаборЗаписейТекНоменклатура.Количество()=0 Тогда 	
		НоваяЗапись=НаборЗаписейТекНоменклатура.Добавить();
		НоваяЗапись.Номенклатура=Объект;			
	КонецЕсли; 
	ТекИдентификатор=НаборЗаписейТекНоменклатура[0].ГруппаАналогов;
	Если пкАналогиНоменклатуры.Количество()=0 Тогда
		
		НаборЗаписейТекНоменклатура.Очистить();
		Попытка
			НаборЗаписейТекНоменклатура.Записать();
		Исключение
			тСообщение = Новый СообщениеПользователю;
			тСообщение.Текст = "Не удалось обновить записи аналогов: " + ОписаниеОшибки();
			тСообщение.Сообщить();
		КонецПопытки; 
		
		Возврат;
		
	КонецЕсли; 
	
	СписокАналогов=Новый СписокЗначений;
	Для Каждого текЗапись Из пкАналогиНоменклатуры Цикл
		СписокАналогов.Добавить(текЗапись.Аналог);	
	КонецЦикла;
	
	ЗапросАналогов=Новый Запрос;
	ЗапросАналогов.Текст= "ВЫБРАТЬ
	                      |	Номенклатура.Ссылка
	                      |ПОМЕСТИТЬ СписокАналогов
	                      |ИЗ
	                      |	Справочник.Номенклатура КАК Номенклатура
	                      |ГДЕ
	                      |	Номенклатура.Ссылка В(&СписокАналогов)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	СписокАналогов.Ссылка,
	                      |	ЕСТЬNULL(пкАналогиНоменклатуры.ГруппаАналогов, """") КАК ГруппаАналогов
	                      |ИЗ
	                      |	СписокАналогов КАК СписокАналогов
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкАналогиНоменклатуры КАК пкАналогиНоменклатуры
	                      |		ПО СписокАналогов.Ссылка = пкАналогиНоменклатуры.Номенклатура
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ГруппаАналогов УБЫВ";
	ЗапросАналогов.УстановитьПараметр("СписокАналогов",СписокАналогов);					  
	ВыборкаАналогов=ЗапросАналогов.Выполнить().Выбрать();
	Пока ВыборкаАналогов.Следующий() Цикл
		Если Не ЗначениеЗаполнено(ТекИдентификатор) Тогда
			Если ЗначениеЗаполнено(ВыборкаАналогов.ГруппаАналогов) Тогда
				ТекИдентификатор=ВыборкаАналогов.ГруппаАналогов;
			Иначе	
				ТекИдентификатор=Строка(Новый УникальныйИдентификатор);
			КонецЕсли;
			НаборЗаписейТекНоменклатура[0].ГруппаАналогов=ТекИдентификатор;
			Попытка
				НаборЗаписейТекНоменклатура.Записать();
			Исключение
				тСообщение = Новый СообщениеПользователю;
				тСообщение.Текст = "Не удалось обновить записи аналогов: " + ОписаниеОшибки();
				тСообщение.Сообщить();
			КонецПопытки; 
		КонецЕсли; 
		НаборЗаписейДляОбработки = РегистрыСведений.пкАналогиНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписейДляОбработки.Отбор.Номенклатура.Установить(ВыборкаАналогов.Ссылка, Истина);
		НаборЗаписейДляОбработки.Прочитать();
		Если НаборЗаписейДляОбработки.Количество()=0 Тогда
			НоваяЗапись=НаборЗаписейДляОбработки.Добавить();
			НоваяЗапись.Номенклатура=ВыборкаАналогов.Ссылка;
		    НоваяЗапись.ГруппаАналогов=ТекИдентификатор;
			Попытка
			НаборЗаписейДляОбработки.Записать();
			Исключение
			тСообщение = Новый СообщениеПользователю;
			тСообщение.Текст = "Не удалось обновить записи аналогов: " + ОписаниеОшибки();
			тСообщение.Сообщить();
			КонецПопытки;
		Иначе
			Если НаборЗаписейДляОбработки[0].ГруппаАналогов<>ТекИдентификатор Тогда
				НаборЗаписейДляОбработки[0].ГруппаАналогов=ТекИдентификатор;
				Попытка
				НаборЗаписейДляОбработки.Записать();
				Исключение
				тСообщение = Новый СообщениеПользователю;
				тСообщение.Текст = "Не удалось обновить записи аналогов: " + ОписаниеОшибки();
				тСообщение.Сообщить();
				КонецПопытки;
			КонецЕсли; 	
		КонецЕсли; 
	КонецЦикла; 	
	
	ЗапросАналоговНеНужных=Новый Запрос;
	ЗапросАналоговНеНужных.Текст= "ВЫБРАТЬ
	                      |	пкАналогиНоменклатуры.Номенклатура,
	                      |	пкАналогиНоменклатуры.ГруппаАналогов
	                      |ИЗ
	                      |	РегистрСведений.пкАналогиНоменклатуры КАК пкАналогиНоменклатуры
	                      |ГДЕ
	                      |	НЕ пкАналогиНоменклатуры.Номенклатура В (&СписокАналогов)
	                      |	И пкАналогиНоменклатуры.Номенклатура <> &Объект
	                      |	И пкАналогиНоменклатуры.ГруппаАналогов = &ТекИдентификатор";
	ЗапросАналоговНеНужных.УстановитьПараметр("Объект",Объект);					  
	ЗапросАналоговНеНужных.УстановитьПараметр("СписокАналогов",СписокАналогов);					  
	ЗапросАналоговНеНужных.УстановитьПараметр("ТекИдентификатор",ТекИдентификатор);					  
	ВыборкаАналоговНеНужных=ЗапросАналоговНеНужных.Выполнить().Выбрать();
	Пока ВыборкаАналоговНеНужных.Следующий() Цикл
		НаборЗаписейДляОбработки = РегистрыСведений.пкАналогиНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписейДляОбработки.Отбор.Номенклатура.Установить(ВыборкаАналоговНеНужных.Номенклатура, Истина);
		НаборЗаписейДляОбработки.Прочитать();
		НаборЗаписейДляОбработки.Очистить();
		Попытка
		НаборЗаписейДляОбработки.Записать();
		Исключение
		тСообщение = Новый СообщениеПользователю;
		тСообщение.Текст = "Не удалось обновить записи аналогов: " + ОписаниеОшибки();
		тСообщение.Сообщить();
		КонецПопытки;
	КонецЦикла; 	
	
КонецПроцедуры

Функция ДобавитьВсеАналоги(Мас_пкАналогиНоменклатуры,НоменклатураПоиска, Форма) экспорт
	ЗапросАналогов = Новый Запрос;
	ЗапросАналогов.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	пкАналогиНоменклатуры1.Номенклатура КАК Аналог
	|ИЗ
	|	РегистрСведений.пкАналогиНоменклатуры КАК пкАналогиНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.пкАналогиНоменклатуры КАК пкАналогиНоменклатуры1
	|		ПО (пкАналогиНоменклатуры.Номенклатура = &Ссылка)
	|			И пкАналогиНоменклатуры.ГруппаАналогов = пкАналогиНоменклатуры1.ГруппаАналогов
	|			И (не пкАналогиНоменклатуры1.Номенклатура В (&Мас_пкАналогиНоменклатуры))
	|			И (пкАналогиНоменклатуры1.Номенклатура <> &Ссылка)";
	ЗапросАналогов.УстановитьПараметр("Ссылка", НоменклатураПоиска);
	ЗапросАналогов.УстановитьПараметр("Мас_пкАналогиНоменклатуры", Мас_пкАналогиНоменклатуры);
	ЗапросАналоговРезультат=ЗапросАналогов.Выполнить();
	//Если не ЗапросАналоговРезультат.Пустой() Тогда
	//	ВыборкаАналоговРезультат=ЗапросАналоговРезультат.Выбрать();
	//	Пока ВыборкаАналоговРезультат.Следующий() Цикл
	//		СтрокаПоиска=Таб_пкАналогиНоменклатуры.Найти(ВыборкаАналоговРезультат.Аналог,"Аналог");
	//        Если СтрокаПоиска=Неопределено Тогда
	//			НоваяСтрока=Таб_пкАналогиНоменклатуры.Добавить();
	//			НоваяСтрока.Аналог=ВыборкаАналоговРезультат.Аналог;
	//		КонецЕсли; 
	//	КонецЦикла; 
	//	ЗначениеВДанныеФормы(таб_пкАналогиНоменклатуры,Форма.пкАналогиНоменклатуры); 
	//КонецЕсли;
	
	Возврат ЗапросАналоговРезультат.Выгрузить().ВыгрузитьКолонку("Аналог");
	
КонецФункции

Процедура пкОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
		
	Если СтруктураДействий.Свойство("НоменклатураПриИзмененииПереопределяемый")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) 
		И ТекущаяСтрока.Свойство("Ячейка") 
		И ТекущаяСтрока.Свойство("КоличествоРазмещено")
		И ТипЗнч(ТекущаяСтрока.Номенклатура)=Тип("СправочникСсылка.Номенклатура")
		И ТекущаяСтрока.Номенклатура.пкСкладскиеЯчейки.Количество()>0
		Тогда
			
		ТекущаяСтрока.Ячейка=ТекущаяСтрока.Номенклатура.пкСкладскиеЯчейки[0].Ячейка;				
			
	КонецЕсли;
	
КонецПроцедуры

Функция ОбработатьСтрокуРазмещенияНаЯчейкуСУчетомПодобраннойЯчейки(Ячейка, Номенклатура, Склад) Экспорт
	
	Если ЗначениеЗаполнено(Ячейка) Тогда
		Если Номенклатура.пкСкладскиеЯчейки.Найти(Ячейка,"Ячейка")<>Неопределено Тогда
			Возврат Ячейка;	
		Иначе	
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	ТоварыВЯчейкахОстатки.Номенклатура,
			               |	ТоварыВЯчейкахОстатки.Ячейка,
			               |	ТоварыВЯчейкахОстатки.ВНаличииОстаток
			               |ИЗ
			               |	РегистрНакопления.ТоварыВЯчейках.Остатки(
			               |			,
			               |			Ячейка = &Ячейка
			               |				И Номенклатура = &Номенклатура) КАК ТоварыВЯчейкахОстатки
			               |ГДЕ
			               |	ТоварыВЯчейкахОстатки.ВНаличииОстаток > 0";
				   
			Запрос.УстановитьПараметр("Номенклатура", Номенклатура);			   
			Запрос.УстановитьПараметр("Ячейка", Ячейка);			   
			
			РезультатОстатка=Запрос.Выполнить();
			Если не РезультатОстатка.Пустой() Тогда
			Возврат Ячейка;	
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	               |	ВложенныйЗапрос.Ячейка КАК Ячейка,
	               |	ЕСТЬNULL(ТоварыВЯчейкахОстатки.ВНаличииОстаток, 0) КАК КоличествоНаСкладе
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		НоменклатурапкСкладскиеЯчейки.Ячейка КАК Ячейка,
	               |		НоменклатурапкСкладскиеЯчейки.Ссылка КАК Номенклатура,
	               |		НоменклатурапкСкладскиеЯчейки.НомерСтроки КАК НомерСтроки
	               |	ИЗ
	               |		Справочник.Номенклатура.пкСкладскиеЯчейки КАК НоменклатурапкСкладскиеЯчейки
	               |	ГДЕ
	               |		НоменклатурапкСкладскиеЯчейки.Ссылка = &Номенклатура
	               |		И НоменклатурапкСкладскиеЯчейки.Ячейка.Владелец = &Склад) КАК ВложенныйЗапрос
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВЯчейках.Остатки КАК ТоварыВЯчейкахОстатки
	               |		ПО ВложенныйЗапрос.Ячейка = ТоварыВЯчейкахОстатки.Ячейка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки";
				   
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);			   
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.КоличествоНаСкладе=0 Тогда
			Возврат Выборка.Ячейка;
		КонецЕсли; 	
	КонецЦикла;	
	
	Возврат Ячейка;	
	
КонецФункции // ()
//-- Рарус IA 03.10.2016

