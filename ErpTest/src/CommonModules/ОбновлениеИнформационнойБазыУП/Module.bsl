////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы библиотеки УправлениеПредприятием.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область СведенияОБиблиотекеИлиКонфигурации

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   * Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   * Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   * ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                    Обработчики обновления таких библиотек должны быть вызваны ранее
//                                    обработчиков обновления данной библиотеки.
//                                    При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                    порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                    в процедуре ПриДобавленииПодсистем общего модуля
//                                    ПодсистемыКонфигурацииПереопределяемый.
//   * РежимВыполненияОтложенныхОбработчиков - Строка - "Последовательно" - отложенные обработчики обновления выполняются
//                                    последовательно в интервале от номера версии информационной базы до номера
//                                    версии конфигурации включительно или "Параллельно" - отложенный обработчик после
//                                    обработки первой порции данных передает управление следующему обработчику, а после
//                                    выполнения последнего обработчика цикл повторяется заново.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = "УправлениеПредприятием";
	Описание.Версия = "2.4.6.200";
	Описание.РежимВыполненияОтложенныхОбработчиков = "Параллельно";
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновленияИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
//  Обработчики - ТаблицаЗначений - См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления().
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

#Область Монопольно

#Область НачальноеЗаполнение

#Область ОбновлениеИнформационнойБазыУП_ПервыйЗапуск

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУП.ПервыйЗапуск";
	Обработчик.ЧитаемыеОбъекты = "";
	Обработчик.ИзменяемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = ''");

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область Отложенно

#Область Версия_2_4_1

#Область Справочники_МоделиБюджетирования_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.1.65";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.МоделиБюджетирования.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c0438376-ca83-4ebf-b19b-b4a9460f8800");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.МоделиБюджетирования.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.МоделиБюджетирования";
	Обработчик.ИзменяемыеОбъекты = "Справочник.МоделиБюджетирования";
	Обработчик.БлокируемыеОбъекты = "Справочник.МоделиБюджетирования";
	Обработчик.Комментарий = НСтр("ru = 'Создает экземпляры регламентного задания для каждой модели бюджетирования при условии выполнения следующих условий: модель не помечена на удаление, статус = действует, установлен переключатель на ""Формировать задачи бюджетного процесса автоматически по расписанию"", включена функциональная опция ""Бюджетный процесс"". После создания экземпляров регламентного задания удаляет экземпляры регламентного задания без параметров (бывший предопределенный экземпляр)'");

#КонецОбласти

#Область РегистрыНакопления_ТоварыОрганизаций_СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.1.73";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("63ba0784-a450-41fa-8708-6f34dd0e93d5");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ТоварыОрганизаций.ЗарегистрироватьСгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	Обработчик.ОчередьОтложеннойОбработки = 14;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЗапускатьТолькоВГлавномУзле = Истина;
	Обработчик.ЧитаемыеОбъекты = "Справочник.НаправленияДеятельности,"
		+ "РегистрНакопления.ТоварыОрганизаций,"
		+ "Справочник.ВидыЗапасов,"
		+ "Справочник.Назначения,"
		+ "Справочник.КлючиАналитикиУчетаНоменклатуры,"
		+ "Справочник.ВидыНоменклатуры,"
		+ "Документ.КорректировкаНазначенияТоваров,"
		+ "РегистрСведений.АналитикаУчетаНоменклатуры,"
		+ "Справочник.ПолитикиУчетаСерий,"
		+ "Справочник.Склады";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ТоварыНаСкладах,"
		+ "РегистрНакопления.ТоварыОрганизаций,"
		+ "РегистрНакопления.ТоварыВЯчейках,"
		+ "Документ.КорректировкаНазначенияТоваров,"
		+ "РегистрНакопления.СвободныеОстатки,"
		+ "РегистрСведений.АналитикаУчетаНоменклатуры,"
		+ "РегистрНакопления.ОбеспечениеЗаказов,"
		+ "Справочник.Назначения,"
		+ "РегистрСведений.ДатыПоступленияТоваровОрганизаций,"
		+ "РегистрНакопления.СебестоимостьТоваров,"
		+ "РегистрНакопления.ДвиженияНоменклатураНоменклатура";
	Обработчик.БлокируемыеОбъекты = "Документ.КорректировкаНазначенияТоваров";
	Обработчик.Комментарий = НСтр("ru = 'Генерируются новые документы ""Корректировка назначения товаров"" для корректировки назначения по видам запасов давальцев.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ВидыНоменклатуры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Назначения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Партнеры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПереработчику.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВводОстатков.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ПрочиеАктивыПассивы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВнутреннееПотреблениеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.СвободныеОстатки.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ОбеспечениеЗаказов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СборкаТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.КорректировкаВидаДеятельностиНДС.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РаспределениеПроизводственныхЗатрат.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РеализацияТоваровУслуг.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПорчаТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.КорректировкаНазначенияТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.КорректировкаОбособленногоУчетаЗапасов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриобретениеТоваровУслуг.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПроизводствоБезЗаказа.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РаспределениеВозвратныхОтходов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ДвиженияНоменклатураНоменклатура.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.СебестоимостьТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыНаСкладах.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РаспределениеВозвратныхОтходов.СгенерироватьКлючиАналитикиНоменклатуры";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПроизводствоБезЗаказа.СгенерироватьКлючиАналитикиНоменклатуры";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПереработчику.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаСборку.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаРемонт.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПеремещение.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаВнутреннееПотребление.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказМатериаловВПроизводство.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаСборку.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаРемонт.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПеремещение.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаВнутреннееПотребление.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказМатериаловВПроизводство.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ПартииПроизводства.СгенерироватьПартииПроизводстваПриПереходеНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область ОбновлениеИнформационнойБазыУП_УчетВФункциональнойВалюте_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.1.82";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУП.УчетВФункциональнойВалюте_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("22cc9613-3501-4cf0-9bbc-19aa628fdef6");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУП.УчетВФункциональнойВалюте_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Константа.ФормироватьПроводкиМеждународногоУчетаПоДаннымОперативного,"
		+ "Константа.ФормироватьПроводкиМеждународногоУчетаПоДаннымРегламентированного,"
		+ "Константа.ВалютаФункциональная,"
		+ "Константа.ВалютаРегламентированногоУчета,"
		+ "Константа.ВалютаУправленческогоУчета";
	Обработчик.ИзменяемыеОбъекты = "Константа.УчетВФункциональнойВалюте";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает значение в константе УчетВФункциональнойВалюте'");

#КонецОбласти

#Область Справочники_КомплектыФинансовыхОтчетов_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.1.82";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.КомплектыФинансовыхОтчетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("35c40a81-8dd3-4ae1-a9b5-27f958c00460");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.КомплектыФинансовыхОтчетов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.КомплектыФинансовыхОтчетов,"
		+ "Справочник.ВидыФинансовыхОтчетов";
	Обработчик.ИзменяемыеОбъекты = "Справочник.КомплектыФинансовыхОтчетов";
	Обработчик.БлокируемыеОбъекты = "Справочник.КомплектыФинансовыхОтчетов";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение нового реквизита в справочнике комплектов финансовых отчетов.'");

#КонецОбласти

#Область ОбновлениеИнформационнойБазыУП_ИспользоватьСерииНоменклатурыПроизводство22_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.1.182";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУП.ИспользоватьСерииНоменклатурыПроизводство22_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3f56b820-a78e-43e3-b72e-d974078d3602");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУП.ИспользоватьСерииНоменклатурыПроизводство22_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 4;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Константа.ИспользоватьСерииНоменклатурыПроизводство22,"
		+ "Справочник.ВидыНоменклатуры";
	Обработчик.ИзменяемыеОбъекты = "Константа.ИспользоватьСерииНоменклатурыПроизводство22";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает значение в константе ""Использовать серии номенклатуры производство 2.2""'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ВидыНоменклатуры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область ОбновлениеИнформационнойБазыУП_УчитыватьСебестоимостьПоСериямПроизводство22_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.1.182";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУП.УчитыватьСебестоимостьПоСериямПроизводство22_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("293f7ead-a1bd-4bff-8666-2f3ea1d17d3d");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУП.УчитыватьСебестоимостьПоСериямПроизводство22_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 4;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.ВидыНоменклатуры,"
		+ "Константа.УчитыватьСебестоимостьПоСериямПроизводство22,"
		+ "Справочник.ПолитикиУчетаСерий";
	Обработчик.ИзменяемыеОбъекты = "Константа.УчитыватьСебестоимостьПоСериямПроизводство22";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает значение в константе ""Учитывать себестоимость по сериям производство 2.2""'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ВидыНоменклатуры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#КонецОбласти

#Область Версия_2_4_2

#Область РегистрыНакопления_ПереработкаПоГрафикуПроизводства_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.2.8";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ПереработкаПоГрафикуПроизводства.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5671a5eb-1539-4f50-b217-eff6c59653ea");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ПереработкаПоГрафикуПроизводства.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 15;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ЗаказПереработчику,"
		+ "РегистрНакопления.ПереработкаПоГрафикуПроизводства";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ПереработкаПоГрафикуПроизводства";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет движения по данным документов ""Заказ переработчику"". Пока обработчик не выполнен, возможны ошибки при работе с документами ""Заказ переработчику"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПереработчику.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область РегистрыНакопления_ФактическиеДанныеБюджетирования_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.2.32";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ФактическиеДанныеБюджетирования.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("598c4611-f826-4a5e-945f-69b043cbe43c");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ФактическиеДанныеБюджетирования.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "БюджетированиеСервер.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрНакопления.ФактическиеДанныеБюджетирования";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ФактическиеДанныеБюджетирования";
	Обработчик.БлокируемыеОбъекты = "Документ.ЭкземплярБюджета,"
		+ "Отчет.ПроверкаСвязейПоказателейБюджетов,"
		+ "Отчет.ОборотнаяВедомостьБюджетирования,"
		+ "Отчет.ЛимитыРасходаДенежныхСредствПоДаннымБюджетирования,"
		+ "Отчет.БюджетныйОтчет,"
		+ "Отчет.ОборотноСальдоваяВедомостьБюджетирования";
	Обработчик.Комментарий = НСтр("ru = 'Замена пустых значений аналитики на единое значение пустой аналитики Неопределено'");

#КонецОбласти

#Область РегистрыБухгалтерии_Международный_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.2.48";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыБухгалтерии.Международный.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a964bb82-c53a-4cb9-bd3b-3b9702f9ce24");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыБухгалтерии.Международный.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрБухгалтерии.Международный";
	Обработчик.ИзменяемыеОбъекты = "РегистрБухгалтерии.Международный";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Перенос измерения подразделение в документе ""Операция (международный учет)""'");

#КонецОбласти

#КонецОбласти

#Область Версия_2_4_4

#Область Документы_ПередачаДавальцу_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.4.1";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ПередачаДавальцу.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e07c7c63-e0c9-44af-a0f3-bd0e9104925c");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ПередачаДавальцу.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ПередачаДавальцу";
	Обработчик.ИзменяемыеОбъекты = "Документ.ПередачаДавальцу";
	Обработчик.БлокируемыеОбъекты = "Документ.ПередачаДавальцу";
	Обработчик.Комментарий = НСтр("ru = 'Исправляет значение служебного реквизита ""Адрес доставки значения полей"".
	|Пока обработчик не выполнен, возможны ошибки при изменении имеющихся документов.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область Документы_МаршрутныйЛистПроизводства_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.4.55";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.МаршрутныйЛистПроизводства.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("045e9a27-68d2-4b09-8fbb-61d3be702f9c");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.МаршрутныйЛистПроизводства.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 5;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.МаршрутныйЛистПроизводства,"
		+ "Константа.ВариантПриемкиТоваров,"
		+ "Справочник.Номенклатура,"
		+ "Справочник.ВидыНоменклатуры,"
		+ "Справочник.ПолитикиУчетаСерий";
	Обработчик.ИзменяемыеОбъекты = "Документ.МаршрутныйЛистПроизводства";
	Обработчик.БлокируемыеОбъекты = "Документ.МаршрутныйЛистПроизводства";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Вариант приемки товаров"". Перезаполняет статусы указания серий для материалов с политикой ""Управление по FEFO остатками серий"". Пока обработчик не выполнен, возможны ошибки при изменении имеющихся документов.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ВидыНоменклатуры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыКПоступлению.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТрудозатратыКОформлению.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Номенклатура.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#КонецОбласти

#Область Версия_2_4_6

#Область Документы_ЗаказДавальца_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.6.11";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ЗаказДавальца.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("cb6a9b63-29eb-4714-ac21-b909779da82f");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ЗаказДавальца.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ЗаказДавальца,"
		+ "Константа.ВариантПриемкиТоваров";
	Обработчик.ИзменяемыеОбъекты = "Документ.ЗаказДавальца";
	Обработчик.БлокируемыеОбъекты = "Документ.ЗаказДавальца";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет служебный реквизит ""Договор является не обязательным"" для заказов давальцев, созданных до перехода на версию 2.4.1.
	|Заполняет реквизит ""Вариант приемки товаров"".
	|Исправляет значения служебных реквизитов ""Адрес доставки значения полей"" и ""Адрес доставки перевозчика значения полей"".
	|Заполняет реквизит ""Тип производственного процесса"" значением по умолчанию ""изготовление, сборка, выполнение работ"".
	|Сворачивает этапы графика оплаты, чтобы не было строк с одинаковым вариантом оплаты и датой платежа.
	|Пока обработчик не выполнен, возможны ошибки при изменении имеющихся документов.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ГруппыФинансовогоУчетаРасчетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ДоступныеОстаткиПланируемыхПоступлений.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСКлиентами.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыКПоступлению.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область Документы_ОтчетДавальцу_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.6.11";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ОтчетДавальцу.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ab68b08d-2b0b-4c0e-8d12-377bb325eaea");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ОтчетДавальцу.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ОтчетДавальцу";
	Обработчик.ИзменяемыеОбъекты = "Документ.ОтчетДавальцу";
	Обработчик.БлокируемыеОбъекты = "Документ.ОтчетДавальцу";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет табличную часть ""ЭтапыГрафикаОплаты"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ГруппыФинансовогоУчетаРасчетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СуммыДокументовВВалютеРегл.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСКлиентами.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ДанныеОснованийСчетовФактур.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область Справочники_РесурсныеСпецификации_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.6.16";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.РесурсныеСпецификации.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("563dbfab-1d15-427c-9767-eb8682689afd");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.РесурсныеСпецификации.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.РесурсныеСпецификации";
	Обработчик.ИзменяемыеОбъекты = "Справочник.РесурсныеСпецификации";
	Обработчик.БлокируемыеОбъекты = "Справочник.РесурсныеСпецификации";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет ключ строки для табличных частей, переносит отбор по свойству в таб. часть, чистит лишние строки тч соответствия свойств'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ПланыПроизводства.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область Справочники_МаршрутныеКарты_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.6.16";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.МаршрутныеКарты.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("bc74947e-c94c-4526-bf12-e8cab563ae21");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.МаршрутныеКарты.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.МаршрутныеКарты,"
		+ "Справочник.ТехнологическиеОперации";
	Обработчик.ИзменяемыеОбъекты = "Справочник.МаршрутныеКарты";
	Обработчик.БлокируемыеОбъекты = "Справочник.МаршрутныеКарты";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет ключ строки для табличных частей, переносит отбор по свойству в таб. часть, чистит лишние строки тч соответствия свойств'");

#КонецОбласти

#Область Справочники_ЭтапыПроизводства_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.6.16";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.ЭтапыПроизводства.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b6428b54-02a0-4f3c-9bcd-1ee08326d624");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ЭтапыПроизводства.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.ВидыРабочихЦентров,"
		+ "Справочник.ЭтапыПроизводства,"
		+ "Справочник.СтруктураПредприятия";
	Обработчик.ИзменяемыеОбъекты = "Справочник.ЭтапыПроизводства";
	Обработчик.БлокируемыеОбъекты = "Справочник.ЭтапыПроизводства";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет ключ строки для альтернативных рц, переносит отбор в таб. часть.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.СтруктураПредприятия.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ПланыВыпускаИзделий.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область ОбновлениеИнформационнойБазыУП_ИспользоватьПараметризациюРесурсныхСпецификаций_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.6.17";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУП.ИспользоватьПараметризациюРесурсныхСпецификаций_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1440a084-9b69-4fe6-add1-da0b8034cc47");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУП.ИспользоватьПараметризациюРесурсныхСпецификаций_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Константа.ИспользоватьУправлениеПроизводством2_2,"
		+ "Константа.ИспользоватьПараметризациюРесурсныхСпецификаций,"
		+ "Константа.ИспользоватьУправлениеПроизводством";
	Обработчик.ИзменяемыеОбъекты = "Константа.ИспользоватьПараметризациюРесурсныхСпецификаций";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает значение константы ИспользоватьПараметризациюРесурсныхСпецификаций в случае, если в обновляемой информационной базе присутствуют параметрические спецификации или маршрутные карты.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ЗапасыСервер.УстановитьИспользованиеРегламентногоЗаданияСверткиРезервов";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область Документы_ПроизводственнаяОперация2_2_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.6.18";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ПроизводственнаяОперация2_2.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("439b1cdf-ab9a-4b7b-a030-2d9a5738c826");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ПроизводственнаяОперация2_2.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 8;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ПроизводственнаяОперация2_2,"
		+ "Документ.ЭтапПроизводства2_2,"
		+ "Справочник.ТехнологическиеОперации";
	Обработчик.ИзменяемыеОбъекты = "Документ.ПроизводственнаяОперация2_2";
	Обработчик.БлокируемыеОбъекты = "Документ.ПроизводственнаяОперация2_2";
	Обработчик.Комментарий = НСтр("ru = 'Приводит в соответствие значение реквизита ""Исполнитель"" в шапке и табличной части документа: если в табличной части выбраны различные исполнители, то значение в шапке очищается; в противном случае всем строкам табличной части ""Трудозатраты"" устанавливается значение из шапки. Заполняет реквизиты ""Наименование"", ""Начало выполнения"", ""Количество факт"", ""Организация"" и взводит флаг ""На основании маршрутной карты"". Документам в статусе ""Не выполнена"", содержащим материалы, изделия или трудозатраты, устанавливается статус ""Выполнена"" с флагом ""Требует повторения"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЭтапПроизводства2_2.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ОчередьПроизводственныхОпераций.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область ОбновлениеИнформационнойБазыУП_ПроизводственнаяОперация2_2_Свойства_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.6.20";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУП.ПроизводственнаяОперация2_2_Свойства_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c1a5a29d-cc00-4075-9dec-606bfea619c6");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУП.ПроизводственнаяОперация2_2_Свойства_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.НаборыДополнительныхРеквизитовИСведений,"
		+ "ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения";
	Обработчик.ИзменяемыеОбъекты = "Справочник.НаборыДополнительныхРеквизитовИСведений,"
		+ "ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения";
	Обработчик.БлокируемыеОбъекты = "ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения,"
		+ "Справочник.НаборыДополнительныхРеквизитовИСведений";
	Обработчик.Комментарий = НСтр("ru = 'Настраивает объект ""Документ ""Производственная операция"" (Общие)"" на основании устаревшего объекта ""(не используется) Документ ""Производственная операция"""". Использование устаревшего объекта отключается.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "УправлениеСвойствамиПереопределяемый.УстановитьИспользованиеСвойств_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ВидыНоменклатуры.ОбработатьДополнительныеСвойстваИНаборыСвойств";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область Документы_ЗаказНаРемонт_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.6.44";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ЗаказНаРемонт.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("531e6bf9-6f40-4b13-abad-68aa78540557");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ЗаказНаРемонт.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 21;
	Обработчик.ПроцедураПроверки = "Справочники.Назначения.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ЗаказНаРемонт,"
		+ "Справочник.НаправленияДеятельности,"
		+ "Справочник.Назначения";
	Обработчик.ИзменяемыеОбъекты = "Документ.ЗаказНаРемонт";
	Обработчик.БлокируемыеОбъекты = "Документ.ЗаказНаРемонт,"
		+ "Справочник.НаправленияДеятельности";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет документы ""Заказ на ремонт"":
	|- Заполняет реквизит ""Назначение"";
	|- Устанавливает видимость табличной части трудозатрат;
	|- Заполняет реквизит ""ОбщийВидРемонта"".
	|Пока обработчик не выполнен, возможны ошибки при изменении имеющихся документов.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Партнеры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Назначения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПереработчику.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаСборку.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаРемонт.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПеремещение.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаВнутреннееПотребление.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказМатериаловВПроизводство.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТрудозатратыКОформлению.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область Документы_ЗаказНаРемонт_ОбработатьДанныеДляГенерацииНазначений

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.6.44";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ЗаказНаРемонт.ОбработатьДанныеДляГенерацииНазначений";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("7d2aa397-662f-4aac-ba9a-5b4c10bce802");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ЗаказНаРемонт.ЗарегистрироватьДанныеКОбработкеДляГенерацииНазначений";
	Обработчик.ОчередьОтложеннойОбработки = 20;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЗапускатьТолькоВГлавномУзле = Истина;
	Обработчик.ЧитаемыеОбъекты = "Справочник.Назначения,"
		+ "Справочник.НаправленияДеятельности,"
		+ "Документ.ЗаказНаРемонт";
	Обработчик.ИзменяемыеОбъекты = "Справочник.Назначения";
	Обработчик.БлокируемыеОбъекты = "Справочник.Назначения";
	Обработчик.Комментарий = НСтр("ru = 'Создает новые назначения связанные с документом ""Заказ на ремонт""'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.СебестоимостьТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СборкаТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПереработчику.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Партнеры.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Назначения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПереработчику.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаСборку.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПеремещение.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаВнутреннееПотребление.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказМатериаловВПроизводство.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.НаправленияДеятельности.ОбработатьДанныеДляГенерацииНазначений";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаСборку.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаРемонт.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПеремещение.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаВнутреннееПотребление.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказМатериаловВПроизводство.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область Документы_ЗаказНаПроизводство2_2_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.6.61";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ЗаказНаПроизводство2_2.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b8193913-9ad4-4094-99da-c14ee63f649b");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ЗаказНаПроизводство2_2.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 8;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ЗаказНаПроизводство2_2,"
		+ "Документ.ЭтапПроизводства2_2,"
		+ "Справочник.Номенклатура";
	Обработчик.ИзменяемыеОбъекты = "Документ.ЗаказНаПроизводство2_2";
	Обработчик.БлокируемыеОбъекты = "Документ.ЗаказНаПроизводство2_2";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет служебный реквизит ""Договор является не обязательным"" для заказов на производство по переработке давальческого сырья, созданных до перехода на версию 2.4.1.
	|Заполняет реквизит ""Тип производственного процесса"" значением по умолчанию ""изготовление, сборка, выполнение работ"".
	|Устанавливает флаг «Списать на расходы» и заполняет связанные с ней реквизиты для строк с номенклатурой типом «Работа», если в документе «Этап производства» в табличной части «Выходные изделия» для аналогичных строк по номенклатуре установлен флаг «Списать на расходы».
	|Пока обработчик не выполнен, возможны ошибки при проведении имеющихся документов.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЭтапПроизводства2_2.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ПартииПроизводства.СгенерироватьПартииПроизводстваПриПереходеНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Номенклатура.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СостоянияЗаказовНаПроизводство.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ОбеспечениеПроизводственныхПроцессов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область РегистрыСведений_ОчередьПроизводственныхОпераций_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.6.62";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыСведений.ОчередьПроизводственныхОпераций.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e1a8fbc8-0513-4159-b3c3-e0503e0abfa1");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.ОчередьПроизводственныхОпераций.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 9;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ЭтапПроизводства2_2,"
		+ "Справочник.ТехнологическиеОперации,"
		+ "Документ.ПроизводственнаяОперация2_2";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.ОчередьПроизводственныхОпераций";
	Обработчик.БлокируемыеОбъекты = "РегистрСведений.ОчередьПроизводственныхОпераций";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет регистр по этапам производства в статусе ""Завершен"".
	|Заполняет реквизит ""Время выполнения нормативное"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЭтапПроизводства2_2.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПроизводственнаяОперация2_2.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СостоянияЭтаповПроизводства.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область РегистрыСведений_ОперацииКСозданиюСменныхЗаданий_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.6.62";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыСведений.ОперацииКСозданиюСменныхЗаданий.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f614388c-b277-4501-a8ec-b99ae6a96a99");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.ОперацииКСозданиюСменныхЗаданий.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.ОперацииКСозданиюСменныхЗаданий";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.ОперацииКСозданиюСменныхЗаданий";
	Обработчик.БлокируемыеОбъекты = "РегистрСведений.ОперацииКСозданиюСменныхЗаданий";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Порядок"" у назначенных операций.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СостоянияЭтаповПроизводства.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область РегистрыСведений_СостоянияЭтаповПроизводства_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.6.64";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыСведений.СостоянияЭтаповПроизводства.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("891982b9-c364-47ad-b084-da21fa1a071f");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.СостоянияЭтаповПроизводства.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 10;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.СостоянияЭтаповПроизводства,"
		+ "Документ.ЭтапПроизводства2_2,"
		+ "Справочник.СтруктураПредприятия,"
		+ "РегистрСведений.ОперацииКСозданиюСменныхЗаданий,"
		+ "РегистрСведений.ОчередьПроизводственныхОпераций";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.СостоянияЭтаповПроизводства";
	Обработчик.БлокируемыеОбъекты = "РегистрСведений.СостоянияЭтаповПроизводства";
	Обработчик.Комментарий = НСтр("ru = 'Пересчитывает состояние операций.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ОперацииКСозданиюСменныхЗаданий.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЭтапПроизводства2_2.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.СтруктураПредприятия.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СостоянияЗаказовНаПроизводство.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ОчередьПроизводственныхОпераций.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область Документы_ПоступлениеСырьяОтДавальца_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.6.99";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ПоступлениеСырьяОтДавальца.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ff351bb7-c57d-4228-8387-d27ef3f433ed");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ПоступлениеСырьяОтДавальца.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ПоступлениеСырьяОтДавальца,"
		+ "Константа.ВариантПриемкиТоваров";
	Обработчик.ИзменяемыеОбъекты = "Документ.ПоступлениеСырьяОтДавальца";
	Обработчик.БлокируемыеОбъекты = "Документ.ПоступлениеСырьяОтДавальца";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Вариант приемки товаров"". 
	|Заполняет реквизит ""Сумма документа"". 
	|Пока обработчик не выполнен, возможны ошибки при проведении имеющихся документов.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриходныйОрдерНаТовары.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ГруппыФинансовогоУчетаРасчетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СуммыДокументовВВалютеРегл.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ГрафикПоступленияТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ДвижениеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ДоступныеОстаткиПланируемыхПоступлений.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыКПоступлению.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область Документы_ЭтапПроизводства2_2_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.6.102";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ЭтапПроизводства2_2.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("54c2e393-af57-4d3a-8b2d-636a8aa43709");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ЭтапПроизводства2_2.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 7;
	Обработчик.ПроцедураПроверки = "Документы.ЭтапПроизводства2_2.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ЗаказПереработчику,"
		+ "Документ.ЭтапПроизводства2_2,"
		+ "Справочник.ПартииПроизводства,"
		+ "Константа.ВалютаУправленческогоУчета,"
		+ "Константа.ВариантПриемкиТоваров";
	Обработчик.ИзменяемыеОбъекты = "Документ.ЭтапПроизводства2_2";
	Обработчик.БлокируемыеОбъекты = "Документ.ЭтапПроизводства2_2,"
		+ "Документ.ЗаказПереработчику";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет новые реквизиты документов ""Этапы производства"": ""Валюта"", ""Номер на печать"", ""Порядок работы видов рабочих центров"", ""Дата реестра документов"" и ""Вариант приемки товаров"".
	|Обновляет табличную часть ""Последователи"".
	|Сбрасывает флаг ""Отгружать одной датой"", если в учете документ отражен разными  датами отгрузки, несоответствующими дате отгрузки, указанной в шапке документа
	|Заполняет реквизит ""Тип производственного процесса"" значением по умолчанию ""изготовление, сборка, выполнение работ"".
	|Заполняет реквизит ""Способ распределения затрат на изделия"" значением по умолчанию ""по долям стоимости""
	|Заполняет реквизиты ""Статус указания серий отправитель"" в табличной части ""Обеспечение"" и ""Статус указания серий получатель"" в табличной части ""Неизрасходованные материалы"".
	|Заполняет реквизит ""Статья расходов"" табличных частей ""Изделия по рассчитываемой стоимости"", ""Побочный и промежуточный выход по фиксированной стоимости"" значением по умолчанию.
	|Пока обработчик не выполнен, возможны ошибки при изменении имеющихся документов.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РаспределениеВозвратныхОтходов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.СебестоимостьТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РаспределениеПроизводственныхЗатрат.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ВыпускПродукции.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ДвиженияСерийТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ПрочиеРасходыНезавершенногоПроизводства.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПереработчику.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыНаСкладах.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПроизводство2_2.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыКПоступлению.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТрудозатратыНезавершенногоПроизводства.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РаспределениеПрочихЗатрат.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПроизводственнаяОперация2_2.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТрудозатратыКОформлению.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыКОтгрузке.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ОбеспечениеПроизводственныхПроцессов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ОчередьПроизводственныхОпераций.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ПартииПроизводства.СгенерироватьПартииПроизводстваПриПереходеНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СостоянияЭтаповПроизводства.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область РегистрыСведений_СостоянияЗаказовНаПроизводство_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.6.126";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыСведений.СостоянияЗаказовНаПроизводство.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("8113972f-3669-4c89-ae04-cc6b21c8a61c");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.СостоянияЗаказовНаПроизводство.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 11;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.ГрафикЭтаповПроизводства2_2,"
		+ "РегистрСведений.СостоянияЭтаповПроизводства,"
		+ "РегистрНакопления.ОбеспечениеПроизводственныхПроцессов,"
		+ "Документ.ЗаказНаПроизводство2_2";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.СостоянияЗаказовНаПроизводство";
	Обработчик.БлокируемыеОбъекты = "РегистрСведений.СостоянияЗаказовНаПроизводство";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет состояния заказов на производство'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПроизводство2_2.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ОбеспечениеПроизводственныхПроцессов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СостоянияЭтаповПроизводства.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область РегистрыНакопления_ОбеспечениеПроизводственныхПроцессов_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.6.151";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ОбеспечениеПроизводственныхПроцессов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("caee6890-f805-47f4-88ab-50643aa8cf54");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ОбеспечениеПроизводственныхПроцессов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 9;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ЗаказНаПроизводство2_2,"
		+ "Документ.ЭтапПроизводства2_2";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ОбеспечениеПроизводственныхПроцессов";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Регистр заполняется по данным документов ""Заказ на производство"", ""Этап производства""
	|Заполняет измерения «Списать на расходы», «Статья расходов / активов», «Аналитика расходов», «Аналитика активов / пассивов» на основании данных табличных частей документов «Заказ на производство» и «Этап производства».'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЭтапПроизводства2_2.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПроизводство2_2.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СостоянияЗаказовНаПроизводство.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область РегистрыНакопления_ТрудозатратыНезавершенногоПроизводства_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.6.156";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыНакопления.ТрудозатратыНезавершенногоПроизводства.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3032ebb6-1332-4921-8c63-99fc6eec0952");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ТрудозатратыНезавершенногоПроизводства.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 8;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ОтражениеЗарплатыВФинансовомУчете,"
		+ "РегистрНакопления.ТрудозатратыНезавершенногоПроизводства,"
		+ "Документ.НачислениеОценочныхОбязательствПоОтпускам,"
		+ "Справочник.ПартииПроизводства,"
		+ "Документ.ВыработкаСотрудников,"
		+ "Документ.ПроизводствоБезЗаказа,"
		+ "Документ.ОтчетПереработчика,"
		+ "Документ.ЭтапПроизводства2_2";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ТрудозатратыНезавершенногоПроизводства";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет измерение ""Партия производства"" регистра накопления ""Трудозатраты незавершенного производства"". Данные трудозатрат незавершенного производства будут не корректны до окончания обработки.
	|Если обработчик обновления выполняется долго, необходимо отключить использование итогов (всех) для регистра накопления ""Трудозатраты незавершенного производства"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ПрочиеАктивыПассивы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЭтапПроизводства2_2.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПереработчика.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПроизводствоБезЗаказа.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВыработкаСотрудников.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтражениеЗарплатыВФинансовомУчете.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ПартииПроизводства.СгенерироватьПартииПроизводстваПриПереходеНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область Оперативно

#Область Версия_2_4_6

#Область ОбновлениеИнформационнойБазыУП_УстановитьВариантыОбособления

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.6.27";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУП.УстановитьВариантыОбособления";
	Обработчик.ЧитаемыеОбъекты = "Константа.ВариантОбособленияМатериаловВРемонтах,"
		+ "Константа.ВариантОбособленияМатериаловВПроизводстве";
	Обработчик.ИзменяемыеОбъекты = "Константа.ВариантОбособленияМатериаловВРемонтах,"
		+ "Константа.ВариантОбособленияМатериаловВПроизводстве";
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает значение констант ""Вариант обособления материалов в производстве"" и ""Вариант обособления материалов в ремонтах"".'");

#КонецОбласти

#КонецОбласти

#КонецОбласти

КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - (возвращаемое значение) если установить Истина,
//                                то будет выведена форма с описанием обновлений. По умолчанию, Истина.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
// Пример обхода выполненных обработчиков обновления:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
		
	ОбновлениеИнформационнойБазыУТ.ПослеОбновленияИнформационнойБазы(ПредыдущаяВерсия, ТекущаяВерсия,
		ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим);
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "УправлениеТорговлей";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУП.ОбновлениеУТДоERP";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "КомплекснаяАвтоматизация";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУП.ОбновлениеКАДоERP";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "УправлениеТорговлей";
	Обработчик.Процедура = "Справочники.НастройкиХозяйственныхОпераций.ЗаполнитьПредопределенныеНастройкиХозяйственныхОпераций";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "КомплекснаяАвтоматизация";
	Обработчик.Процедура = "Справочники.НастройкиХозяйственныхОпераций.ЗаполнитьПредопределенныеНастройкиХозяйственныхОпераций";
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
	Если ПредыдущееИмяКонфигурации = "УправлениеТорговлей"
	 ИЛИ ПредыдущееИмяКонфигурации = "КомплекснаяАвтоматизация" Тогда
		Параметры.ОчиститьСведенияОПредыдущейКонфигурации = Ложь;
		ОбновлениеИнформационнойБазы.УстановитьВерсиюИБ(ПредыдущееИмяКонфигурации, ПредыдущаяВерсияКонфигурации, Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПереименованныеОбъектыМетаданных

// Заполняет переименования объектов метаданных (подсистемы и роли).
// Подробнее см. ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных().
// 
// Параметры:
//   Итог	- Структура - передается в процедуру подсистемой БазоваяФункциональность.
//
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	ОписаниеПодсистемы = Новый Структура("Имя, Версия, РежимВыполненияОтложенныхОбработчиков");
	ПриДобавленииПодсистемы(ОписаниеПодсистемы);
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.2.1.13",
		"Роль.РазделМеждународныйФинансовыйУчет",
		"Роль.ПодсистемаМеждународныйФинансовыйУчет",
		ОписаниеПодсистемы.Имя);
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.1.1.56",
		"Роль.ДобавлениеИзменениеПричинЗадержекВыполненияМаршрутныхЛистов",
		"Роль.ДобавлениеИзменениеПричинЗадержекВыполненияЭтаповПроизводства",
		ОписаниеПодсистемы.Имя);
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.1.1.56",
		"Роль.ЧтениеПричинЗадержекВыполненияМаршрутныхЛистов",
		"Роль.ЧтениеПричинЗадержекВыполненияЭтаповПроизводства",
		ОписаниеПодсистемы.Имя);
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполненияПустойИБ

// Обработчик первого запуска УП (ERP).
//
Процедура ПервыйЗапуск() Экспорт
	
	Справочники.СтатьиКалькуляции.НастроитьСтатьюКалькуляцииПредопределенныхЭлементов();
	Константы.ИсточникСуммыДляПересчетаВВалютуФинОтчетности.Установить(Перечисления.ИсточникиСуммыДляПересчетаВВалютуФинОтчетности.БУ);
	
КонецПроцедуры

Процедура ОбновлениеКАДоERP() Экспорт
	
	Справочники.СтатьиКалькуляции.НастроитьСтатьюКалькуляцииПредопределенныхЭлементов();
	Константы.ИсточникСуммыДляПересчетаВВалютуФинОтчетности.Установить(Перечисления.ИсточникиСуммыДляПересчетаВВалютуФинОтчетности.БУ);
	
	ЗначенияКонстант = Новый Структура;
	ЗначенияКонстант.Вставить("КомплекснаяАвтоматизация", Ложь);
	ЗначенияКонстант.Вставить("УправлениеПредприятием", Истина);
	
	Для Каждого КлючИЗначение Из ЗначенияКонстант Цикл
		Константы[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
	КонецЦикла; 
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

Процедура ОбновлениеУТДоERP() Экспорт
	
	ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ЗаполнитьПредопределенныеАналитикиСтатейБюджетов();
	УправлениеДоступомЛокализация.УстановитьРодителяПрофилейДоступаЗарплатаИКадры();
	Справочники.ТипыПлатежейФЗ275.ЗаполнитьПредопределенныеЭлементы();
	Справочники.ВидыПодтверждающихДокументов.ЗаполнитьПредопределенныеЭлементы();
	Справочники.СтатистическиеПоказатели.ЗаполнитьПоставляемымиПравилами();
	Справочники.ДрагоценныеМатериалы.ЗаполнитьПредопределенныеДрагоценныеМатериалы();
	ПланыСчетов.Хозрасчетный.ЗаполнитьПредопределенныеНастройки();
	Константы.ЗаполненыДвиженияАктивовПассивов.Установить(Истина);
	Константы.ИсточникСуммыДляПересчетаВВалютуФинОтчетности.Установить(Перечисления.ИсточникиСуммыДляПересчетаВВалютуФинОтчетности.БУ);
	
	ОбновлениеИнформационнойБазыУТ.ЗаполнитьЗначениеРазделенияПоОбластямДанных();
	
	ЗначенияКонстант = Новый Структура;
	ЗначенияКонстант.Вставить("УправлениеТорговлей", Ложь);
	ЗначенияКонстант.Вставить("УправлениеПредприятием", Истина);
	
	Для Каждого КлючИЗначение Из ЗначенияКонстант Цикл
		Константы[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
	КонецЦикла; 
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеНовыхВерсийИБ

Процедура УстановитьВариантыОбособления() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Константы.ВариантОбособленияМатериаловВРемонтах.Получить()) Тогда
		МенеджерЗначения = Константы.ВариантОбособленияМатериаловВРемонтах.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Перечисления.ВариантыОбособленияМатериаловВРемонтах.ЗаказНаРемонт;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	КонецЕсли;
	
	ВариантОбособленияВПроизводстве = Константы.ВариантОбособленияМатериаловВПроизводстве.Получить();
	Если Константы.ИспользоватьУправлениеПроизводством.Получить()
		И Не Константы.ИспользоватьУправлениеПроизводством2_2.Получить()
		И ВариантОбособленияВПроизводстве <> Перечисления.ВариантыОбособленияМатериаловВПроизводстве.НаправлениеДеятельности
		И ВариантОбособленияВПроизводстве <> Перечисления.ВариантыОбособленияМатериаловВПроизводстве.НазначениеПродукции Тогда
		МенеджерЗначения = Константы.ВариантОбособленияМатериаловВПроизводстве.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Перечисления.ВариантыОбособленияМатериаловВПроизводстве.НазначениеПродукции;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	КонецЕсли;
	
КонецПроцедуры

#Область УстановкаКонстанты_УчетВФункциональнойВалюте

Процедура УчетВФункциональнойВалюте_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	// Регистрация не требуется
	Возврат;
	
КонецПроцедуры

Процедура УчетВФункциональнойВалюте_ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Если Константы.ИспользоватьМеждународныйФинансовыйУчет.Получить() Тогда
		
		ТрансляторОУ = ПолучитьФункциональнуюОпцию("ФормироватьПроводкиМеждународногоУчетаПоДаннымОперативного");
		ТрансляторБУ = ПолучитьФункциональнуюОпцию("ФормироватьПроводкиМеждународногоУчетаПоДаннымРегламентированного");
		ФункциональнаяВалюта = Константы.ВалютаФункциональная.Получить();
		ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
		ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
		
		ЗначениеКонстанты = Перечисления.ВидыУчетаВФункциональнойВалюте.ВВалютеРегл;
		Если ТрансляторОУ И ФункциональнаяВалюта = ВалютаУпр
			ИЛИ НЕ ТрансляторБУ И ФункциональнаяВалюта <> ВалютаРегл Тогда
			ЗначениеКонстанты = Перечисления.ВидыУчетаВФункциональнойВалюте.ВВалютеУпр;
		КонецЕсли;
		МенеджерЗначения = Константы.УчетВФункциональнойВалюте.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = ЗначениеКонстанты;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	КонецЕсли;
	Параметры.ОбработкаЗавершена = Истина
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаКонстанты_ИспользоватьСерииНоменклатурыПроизводство22

Процедура ИспользоватьСерииНоменклатурыПроизводство22_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	// Регистрация не требуется
	Возврат;
	
КонецПроцедуры

Процедура ИспользоватьСерииНоменклатурыПроизводство22_ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	МАКСИМУМ(ВидыНоменклатуры.ИспользоватьСерии) КАК ИспользоватьСерииНоменклатурыПроизводство22
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(ВидыНоменклатуры.ИспользоватьСерии) ЕСТЬ НЕ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Константы.ИспользоватьСерииНоменклатурыПроизводство22 КАК ИспользоватьСерииНоменклатурыПроизводство22
		|ИЗ
		|	Константы КАК Константы");
	
	ОбработкаЗавершена = Истина;
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ВидыНоменклатуры");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		
		ЭлементБлокировки = Блокировка.Добавить("Константа.ИспользоватьСерииНоменклатурыПроизводство22");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		Если НЕ МассивРезультатов[0].Пустой() Тогда
		
			НовыеЗначения = МассивРезультатов[0].Выбрать();
			НовыеЗначения.Следующий();
			
			СтарыеЗначения = МассивРезультатов[1].Выбрать();
			СтарыеЗначения.Следующий();
			
			Если НовыеЗначения.ИспользоватьСерииНоменклатурыПроизводство22
				<> СтарыеЗначения.ИспользоватьСерииНоменклатурыПроизводство22 Тогда
				
				Если ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, "Справочник.ВидыНоменклатуры") Тогда
					
					ОбработкаЗавершена = Ложь;
					
				Иначе
					
					МенеджерЗначения = Константы.ИспользоватьСерииНоменклатурыПроизводство22.СоздатьМенеджерЗначения();
					МенеджерЗначения.Значение = НовыеЗначения.ИспользоватьСерииНоменклатурыПроизводство22;
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ОбработкаЗавершена = Ложь;
		
		Шаблон = НСтр("ru = 'Не удалось установить значение константы ""Использовать серии номенклатуры производство 2.2"" по причине: %1'");
		ТекстСообщения = СтрШаблон(Шаблон, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Установка константы ""Использовать серии номенклатуры производство 2.2""'", КодОсновногоЯзыка),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.Константы.ИспользоватьСерииНоменклатурыПроизводство22,
			,
			ТекстСообщения);
		
	КонецПопытки;
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаКонстанты_УчитыватьСебестоимостьПоСериямПроизводство22

Процедура УчитыватьСебестоимостьПоСериямПроизводство22_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	// Регистрация не требуется
	Возврат;
	
КонецПроцедуры

Процедура УчитыватьСебестоимостьПоСериямПроизводство22_ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	МАКСИМУМ(ЕСТЬNULL(ВидыНоменклатуры.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям, ЛОЖЬ)) КАК УчитыватьСебестоимостьПоСериямПроизводство22
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(ЕСТЬNULL(ВидыНоменклатуры.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям, ЛОЖЬ)) ЕСТЬ НЕ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Константы.УчитыватьСебестоимостьПоСериямПроизводство22 КАК УчитыватьСебестоимостьПоСериямПроизводство22
		|ИЗ
		|	Константы КАК Константы");
	
	ОбработкаЗавершена = Истина;
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ВидыНоменклатуры");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		
		ЭлементБлокировки = Блокировка.Добавить("Константа.УчитыватьСебестоимостьПоСериямПроизводство22");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		Если НЕ МассивРезультатов[0].Пустой() Тогда
		
			НовыеЗначения = МассивРезультатов[0].Выбрать();
			НовыеЗначения.Следующий();
			
			СтарыеЗначения = МассивРезультатов[1].Выбрать();
			СтарыеЗначения.Следующий();
			
			Если НовыеЗначения.УчитыватьСебестоимостьПоСериямПроизводство22
				<> СтарыеЗначения.УчитыватьСебестоимостьПоСериямПроизводство22 Тогда
				
				Если ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, "Справочник.ВидыНоменклатуры") Тогда
					
					ОбработкаЗавершена = Ложь;
					
				Иначе
					
					МенеджерЗначения = Константы.УчитыватьСебестоимостьПоСериямПроизводство22.СоздатьМенеджерЗначения();
					МенеджерЗначения.Значение = НовыеЗначения.УчитыватьСебестоимостьПоСериямПроизводство22;
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ОбработкаЗавершена = Ложь;
		
		Шаблон = НСтр("ru = 'Не удалось установить значение константы ""Учитывать себестоимость по сериям производство 2.2"" по причине: %1'");
		ТекстСообщения = СтрШаблон(Шаблон, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Установка константы ""Учитывать себестоимость по сериям производство 2.2""'", КодОсновногоЯзыка),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.Константы.УчитыватьСебестоимостьПоСериямПроизводство22,
			,
			ТекстСообщения);
		
	КонецПопытки;
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаКонстанты_ИспользоватьПараметризациюРесурсныхСпецификаций

Процедура ИспользоватьПараметризациюРесурсныхСпецификаций_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	// Регистрация не требуется
	Возврат;
	
КонецПроцедуры

Процедура ИспользоватьПараметризациюРесурсныхСпецификаций_ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	//++ НЕ УТКА
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИспользоватьУправлениеПроизводством.Значение КАК УправлениеПроизводством21,
	|	ИспользоватьУправлениеПроизводством2_2.Значение КАК УправлениеПроизводством22,
	|	ИспользоватьПараметризациюРесурсныхСпецификаций.Значение КАК ПараметризацияСпецификаций
	|ИЗ
	|	Константа.ИспользоватьУправлениеПроизводством КАК ИспользоватьУправлениеПроизводством,
	|	Константа.ИспользоватьУправлениеПроизводством2_2 КАК ИспользоватьУправлениеПроизводством2_2,
	|	Константа.ИспользоватьПараметризациюРесурсныхСпецификаций КАК ИспользоватьПараметризациюРесурсныхСпецификаций";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Если (Выборка.УправлениеПроизводством21 ИЛИ Выборка.УправлениеПроизводством22)
		И НЕ Выборка.ПараметризацияСпецификаций Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	МаршрутныеКартыМатериалыИУслуги.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.МаршрутныеКарты.МатериалыИУслуги КАК МаршрутныеКартыМатериалыИУслуги
		|ГДЕ
		|	((ВЫРАЗИТЬ(МаршрутныеКартыМатериалыИУслуги.АлгоритмРасчетаКоличества КАК СТРОКА(100))) <> """"
		|			ИЛИ МаршрутныеКартыМатериалыИУслуги.УдалитьОтборСвойство <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка)
		|			ИЛИ МаршрутныеКартыМатериалыИУслуги.СпособАвтовыбораНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ)
		|			ИЛИ МаршрутныеКартыМатериалыИУслуги.СпособАвтовыбораХарактеристики <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	МаршрутныеКартыТрудозатраты.Ссылка
		|ИЗ
		|	Справочник.МаршрутныеКарты.Трудозатраты КАК МаршрутныеКартыТрудозатраты
		|ГДЕ
		|	((ВЫРАЗИТЬ(МаршрутныеКартыТрудозатраты.АлгоритмРасчетаКоличества КАК СТРОКА(100))) <> """"
		|			ИЛИ МаршрутныеКартыТрудозатраты.УдалитьОтборСвойство <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	РесурсныеСпецификацииМатериалыИУслуги.Ссылка
		|ИЗ
		|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК РесурсныеСпецификацииМатериалыИУслуги
		|ГДЕ
		|	((ВЫРАЗИТЬ(РесурсныеСпецификацииМатериалыИУслуги.АлгоритмРасчетаКоличества КАК СТРОКА(100))) <> """"
		|			ИЛИ РесурсныеСпецификацииМатериалыИУслуги.УдалитьОтборСвойство <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка)
		|			ИЛИ РесурсныеСпецификацииМатериалыИУслуги.СпособАвтовыбораНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ)
		|			ИЛИ РесурсныеСпецификацииМатериалыИУслуги.СпособАвтовыбораХарактеристики <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	РесурсныеСпецификацииТрудозатраты.Ссылка
		|ИЗ
		|	Справочник.РесурсныеСпецификации.Трудозатраты КАК РесурсныеСпецификацииТрудозатраты
		|ГДЕ
		|	((ВЫРАЗИТЬ(РесурсныеСпецификацииТрудозатраты.АлгоритмРасчетаКоличества КАК СТРОКА(100))) <> """"
		|			ИЛИ РесурсныеСпецификацииТрудозатраты.УдалитьОтборСвойство <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЭтапыПроизводстваВидыРабочихЦентров.Ссылка
		|ИЗ
		|	Справочник.ЭтапыПроизводства.ВидыРабочихЦентров КАК ЭтапыПроизводстваВидыРабочихЦентров
		|ГДЕ
		|	((ВЫРАЗИТЬ(ЭтапыПроизводстваВидыРабочихЦентров.АлгоритмРасчетаКоличества КАК СТРОКА(100))) <> """"
		|			ИЛИ ЭтапыПроизводстваВидыРабочихЦентров.УдалитьОтборСвойство <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЭтапыПроизводстваАльтернативныеВидыРабочихЦентров.Ссылка
		|ИЗ
		|	Справочник.ЭтапыПроизводства.АльтернативныеВидыРабочихЦентров КАК ЭтапыПроизводстваАльтернативныеВидыРабочихЦентров
		|ГДЕ
		|	((ВЫРАЗИТЬ(ЭтапыПроизводстваАльтернативныеВидыРабочихЦентров.АлгоритмРасчетаКоличества КАК СТРОКА(100))) <> """"
		|			ИЛИ ЭтапыПроизводстваАльтернативныеВидыРабочихЦентров.УдалитьОтборСвойство <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка))";
		
		Если НЕ Запрос.Выполнить().Пустой() Тогда
			МенеджерЗначения = Константы.ИспользоватьПараметризациюРесурсныхСпецификаций.СоздатьМенеджерЗначения();
			МенеджерЗначения.Значение = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
		КонецЕсли;
		
	КонецЕсли;
	
	//-- НЕ УТКА

	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ПроизводственнаяОперация2_2_Свойства

Процедура ПроизводственнаяОперация2_2_Свойства_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	// Регистрация не требуется
	Возврат;
	
КонецПроцедуры

Процедура ПроизводственнаяОперация2_2_Свойства_ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ОбработкаЗавершена = Истина;
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		
		ЭлементБлокировки = Блокировка.Добавить("Справочник.НаборыДополнительныхРеквизитовИСведений");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка",
			Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ПроизводственнаяОперация2_2);
		
		Блокировка.Заблокировать();
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ПроизводственнаяОперация2_2,
				"Используется") Тогда
			
			СтарыйОбъект = Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ПроизводственнаяОперация2_2.ПолучитьОбъект();
			СтарыйОбъект.Используется = Ложь;
			
			НовыйОбъект = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ПроизводственнаяОперация2_2_Общие.ПолучитьОбъект();
			НовыйОбъект.Используется = Истина;
			
			ГруппаОбъект = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ПроизводственнаяОперация2_2.ПолучитьОбъект();
			ГруппаОбъект.Используется = Истина;
			
			Для каждого Строка Из СтарыйОбъект.ДополнительныеРеквизиты Цикл
				ЗаполнитьЗначенияСвойств(НовыйОбъект.ДополнительныеРеквизиты.Добавить(), Строка);
				ЗаполнитьЗначенияСвойств(ГруппаОбъект.ДополнительныеРеквизиты.Добавить(), Строка, "Свойство");
			КонецЦикла;
			НовыйОбъект.КоличествоРеквизитов = Формат(НовыйОбъект.ДополнительныеРеквизиты.НайтиСтроки(
				Новый Структура("ПометкаУдаления", Ложь)).Количество(), "ЧГ=");
			
			Для каждого Строка Из СтарыйОбъект.ДополнительныеСведения Цикл
				ЗаполнитьЗначенияСвойств(НовыйОбъект.ДополнительныеСведения.Добавить(), Строка);
				ЗаполнитьЗначенияСвойств(ГруппаОбъект.ДополнительныеСведения.Добавить(), Строка, "Свойство");
			КонецЦикла;
			НовыйОбъект.КоличествоСведений = Формат(НовыйОбъект.ДополнительныеСведения.НайтиСтроки(
				Новый Структура("ПометкаУдаления", Ложь)).Количество(), "ЧГ=");
			
			СтарыйОбъект.ДополнительныеРеквизиты.Очистить();
			СтарыйОбъект.КоличествоРеквизитов = "";
			
			СтарыйОбъект.ДополнительныеСведения.Очистить();
			СтарыйОбъект.КоличествоСведений = "";
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СтарыйОбъект);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйОбъект);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ГруппаОбъект);
			
			Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	Таблица.Ссылка КАК Ссылка
				|ИЗ
				|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК Таблица
				|ГДЕ
				|	Таблица.НаборСвойств = &НаборСвойств");
			Запрос.УстановитьПараметр("НаборСвойств", СтарыйОбъект.Ссылка);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ПВХОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ПВХОбъект.НаборСвойств = НовыйОбъект.Ссылка;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПВХОбъект);
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ОбработкаЗавершена = Ложь;
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось настроить дополнительные реквизиты и сведения документа ""Производственная операция"" по причине: %1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Настройка дополнительных реквизитов и сведений документа ""Производственная операция""'", КодОсновногоЯзыка),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений,
			,
			ТекстСообщения);
		
	КонецПопытки;
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти
