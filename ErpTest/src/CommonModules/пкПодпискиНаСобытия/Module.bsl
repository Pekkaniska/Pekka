
///////////////////////////////////////////////////////////////////////////////////////////////
// Обработчики

Процедура ПриЗаписиДокумента(Источник, Отказ) Экспорт
//++ Рарус Лимаренко К.А. 16.05.2018
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыСеанса.ПараметрыОбработчикаОбновления.РежимВыполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
//-- Рарус Лимаренко К.А. 16.05.2018	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказКлиента") Тогда
		ПриЗаписиЗаказКлиента(Источник, Отказ);
//Рарус Владимир Подрезов 21.11.2016
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.пкАктПриемкиВозврата") Тогда
		Если Не Источник.ПометкаУдаления Тогда
			СоздатьШтрихкодыEAN13(Источник.Ссылка);
			Если ЗначениеЗаполнено(Источник.Партнер) Тогда
				ДобавитьВБуферАвтосозданиеОбъектовВДО(Источник.Ссылка);
			КонецЕсли;
		КонецЕсли;
//Рарус Владимир Подрезов Конец
	КонецЕсли;    
КонецПроцедуры

Процедура пкПриЗаписиСправочниковПриЗаписи(Источник, Отказ) Экспорт
	
//++ Рарус Лимаренко К.А. 16.05.2018
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыСеанса.ПараметрыОбработчикаОбновления.РежимВыполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
//-- Рарус Лимаренко К.А. 16.05.2018
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.пкСпособыПогрузкиРазгрузкиТехники") Тогда
		ПриЗаписи_пкСпособыПогрузкиРазгрузкиТехники(Источник, Отказ);
    ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.Номенклатура") Тогда
		ПриЗаписиНоменклатура(Источник, Отказ);
    ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.ТранспортныеСредства") Тогда
		ПриЗаписиТранспортныеСредства(Источник, Отказ);
    ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.СМ_ОбъектыСтроительства") Тогда
		ПриЗаписи_СМ_ОбъектыСтроительства(Источник, Отказ);
//Рарус Владимир Подрезов 13.12.2016
    ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.ДоговорыКонтрагентов") Тогда
		ПриЗаписи_ДоговорыКонтрагентов(Источник, Отказ);
//Рарус Владимир Подрезов Конец
	КонецЕсли;    
	
КонецПроцедуры

Процедура пкОбработкаПроведенияДокументов(Источник, Отказ, РежимПроведения) Экспорт
	
//++ Рарус Лимаренко К.А. 16.05.2018
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыСеанса.ПараметрыОбработчикаОбновления.РежимВыполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
//-- Рарус Лимаренко К.А. 16.05.2018
	
//Рарус Владимир Подрезов УАТ 3.4 04.08.2016
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.уатПутевойЛист") Тогда
		ОбработкаПроведения_уатПутевойЛист(Источник, Отказ, РежимПроведения);
//Рарус Владимир Подрезов Конец

//++ Рарус Лимаренко 23.07.2018 Задачи № 10501,11722
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.пкЗаправочнаяВедомость") Тогда
		Если Не Отказ Тогда
			ДобавитьВБуферАвтосозданиеОбъектовВДО(Источник.Ссылка);			
		КонецЕсли;
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПодготовкаКПередачеОС") Тогда		
		Если Не Отказ И Источник.ОС.Количество() > 0 И Источник.ОС[0].ОсновноеСредство.пкЭтоТехника Тогда
			ДобавитьВБуферАвтосозданиеОбъектовВДО(Источник.Ссылка);			
		КонецЕсли	
//-- Рарус Лимаренко 23.07.2018	
    ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказКлиента") Тогда
        ОбработкаПроведения_ЗаказКлиента(Источник, Отказ, РежимПроведения);
//Рарус Владимир Подрезов 30.09.2017
		Для Каждого текСтрока Из Источник.Товары Цикл
			Если Не ЗначениеЗаполнено(текСтрока.пкЗаявкаНаАрендуТехники) Тогда
				Продолжить;
			КонецЕсли;
			ДобавитьЗаявкуВБуферКПерепроведениюПоСрокамАренды(текСтрока.пкЗаявкаНаАрендуТехники);
		КонецЦикла;
//Рарус Владимир Подрезов Конец
//Рарус Владимир Подрезов Закупки 2.4.3 11.08.2016
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказПоставщику") Тогда
		ОбработкаПроведения_ЗаказПоставщику(Источник, Отказ, РежимПроведения);
//Рарус Владимир Подрезов Конец
//Рарус Владимир Подрезов 07.12.2016
//		СоздатьДокументВБазеДО(Источник.Ссылка);
		ДобавитьВБуферАвтосозданиеОбъектовВДО(Источник.Ссылка);
//Рарус Владимир Подрезов Конец
    ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств") Тогда
        ОбработкаПроведения_ПоступлениеБезналичныхДенежныхСредств(Источник, Отказ, РежимПроведения);   
    ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
        ОбработкаПроведения_РеализацияТоваровУслуг(Источник, Отказ, РежимПроведения);
//Рарус Владимир Подрезов 30.09.2017
		Для Каждого текСтрока Из Источник.Товары Цикл
			Если Не ЗначениеЗаполнено(текСтрока.пкЗаявкаНаАрендуТехники) Тогда
				Продолжить;
			КонецЕсли;
			ДобавитьЗаявкуВБуферКПерепроведениюПоСрокамАренды(текСтрока.пкЗаявкаНаАрендуТехники);
		КонецЦикла;
//Рарус Владимир Подрезов Конец
//++ Рарус IA 02.10.2016
    ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ВнутреннееПотреблениеТоваров") Тогда
        ОбработкаПроведения_ВнутреннееПотреблениеТоваров(Источник, Отказ, РежимПроведения);
//-- Рарус IA 02.10.2016
//rarus+ saveld 03.11.2016	
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.уатДТП") Тогда
//Рарус Владимир Подрезов 07.12.2016
//		СоздатьДокументВБазеДО(Источник.Ссылка);
		ДобавитьВБуферАвтосозданиеОбъектовВДО(Источник.Ссылка);
//Рарус Владимир Подрезов Конец
    ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказНаПеремещение") Тогда
//Рарус Владимир Подрезов 07.12.2016
//		СоздатьДокументВБазеДО(Источник.Ссылка);
		ДобавитьВБуферАвтосозданиеОбъектовВДО(Источник.Ссылка);
//Рарус Владимир Подрезов Конец
    ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.пкЗаявкаНаРемонтУДилера") Тогда
//Рарус Владимир Подрезов 07.12.2016
//		СоздатьДокументВБазеДО(Источник.Ссылка);
		ДобавитьВБуферАвтосозданиеОбъектовВДО(Источник.Ссылка);
//Рарус Владимир Подрезов Конец
    ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказНаВнутреннееПотребление") Тогда
//Рарус Владимир Подрезов 07.12.2016
//		СоздатьДокументВБазеДО(Источник.Ссылка);
		ДобавитьВБуферАвтосозданиеОбъектовВДО(Источник.Ссылка);
//Рарус Владимир Подрезов Конец
    ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.уатЗаправкаГСМ") Тогда
//Рарус Владимир Подрезов 07.12.2016
//		СоздатьДокументВБазеДО(Источник.Ссылка);
		ДобавитьВБуферАвтосозданиеОбъектовВДО(Источник.Ссылка);
//Рарус Владимир Подрезов Конец
    ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.пкЗаявкаНаАрендуТехники") Тогда
		СоздатьШтрихкодыEAN13(Источник.Ссылка);
//Рарус Владимир Подрезов 07.12.2016
//		СоздатьДокументВБазеДО(Источник.Ссылка);
		ДобавитьВБуферАвтосозданиеОбъектовВДО(Источник.Ссылка);
//Рарус Владимир Подрезов Конец
//Рарус Владимир Подрезов 30.09.2017
		ДобавитьЗаявкуВБуферКПерепроведениюПоСрокамАренды(Источник.Ссылка);
//Рарус Владимир Подрезов Конец
    ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
//Рарус Владимир Подрезов 27.02.2017
        ОбработкаПроведения_ЗаявкаНаРасходованиеДенежныхСредств(Источник, Отказ, РежимПроведения);   
//Рарус Владимир Подрезов Конец
//Рарус Владимир Подрезов 07.12.2016
//		СоздатьДокументВБазеДО(Источник.Ссылка);
		ДобавитьВБуферАвтосозданиеОбъектовВДО(Источник.Ссылка);
//Рарус Владимир Подрезов Конец
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.пкЗаказНаряд") Тогда
//Рарус Владимир Подрезов 07.12.2016
//		СоздатьДокументВБазеДО(Источник.Ссылка);
		ДобавитьВБуферАвтосозданиеОбъектовВДО(Источник.Ссылка);
//Рарус Владимир Подрезов Конец
//rarus- saveld 03.11.2016
	//+++DubI Рарус-СПб 03.11.2016
    ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПриобретениеУслугПоЛизингу") Тогда
		ОбработкаПроведения_ПриобретениеУслугПоЛизингу(Источник, Отказ, РежимПроведения);
    ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.АмортизацияОС") Тогда
		ОбработкаПроведения_АмортизацияОС(Источник, Отказ, РежимПроведения);
	//---DubI Рарус-СПб
//Рарус Владимир Подрезов 13.03.2017
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.пкЗаданиеНаРемонт") Тогда
		ДобавитьВБуферАвтосозданиеОбъектовВДО(Источник.Ссылка);
//Рарус Владимир Подрезов Конец
//Рарус Владимир Подрезов 20.03.2017
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.пкЗаданиеНаПеревозку") Тогда
		ДобавитьВБуферАвтосозданиеОбъектовВДО(Источник.Ссылка);
//Рарус Владимир Подрезов Конец
//Рарус Владимир Подрезов 30.09.2017
		Если ЗначениеЗаполнено(Источник.ЗаявкаНаАрендуТехники) Тогда
			ДобавитьЗаявкуВБуферКПерепроведениюПоСрокамАренды(Источник.ЗаявкаНаАрендуТехники);
		КонецЕсли;
//Рарус Владимир Подрезов Конец
//++ Рарус Лимаренко 25.01.2018
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.пкОперацииСТехникой") Тогда
		ДобавитьВБуферАвтосозданиеОбъектовВДО(Источник.Ссылка);
//-- Рарус Лимаренко 25.01.2018
	КонецЕсли;    
	
КонецПроцедуры

Процедура пкОбработкаЗаполнения(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
    
    Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказКлиента") Тогда
        ОбработкаЗаполнения_ЗаказКлиента(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
    ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
        ОбработкаЗаполнения_РеализацияТоваровУслуг(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.уатПутевойЛист") Тогда
		ОбработкаЗаполнения_ПутевойЛист(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	//Рарус Владимир Подрезов 22.12.2016
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказНаВнутреннееПотребление") Тогда
		ОбработкаЗаполнения_ЗаказНаВнутреннееПотребление(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	//Рарус Владимир Подрезов Конец
	//++Рарус IA 08.02.2017
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ОтборРазмещениеТоваров") Тогда
		ОбработкаЗаполнения_ОтборРазмещениеТоваров(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	//--Рарус IA 08.02.2017
	//Рарус Владимир Подрезов 15.03.2017
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ВнутреннееПотреблениеТоваров") Тогда
		ОбработкаЗаполнения_ВнутреннееПотреблениеТоваров(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	//Рарус Владимир Подрезов Конец
	//Рарус Владимир Подрезов 16.03.2017
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.ОбъектыЭксплуатации") Тогда
		ОбработкаЗаполнения_ОбъектыЭксплуатации(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств") Тогда
		ОбработкаЗаполнения_СписаниеБезналичныхДенежныхСредств(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	//Рарус Владимир Подрезов Конец
	//Рарус Владимир Подрезов 04.04.2017
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаписьКнигиПокупок") Тогда
		ОбработкаЗаполнения_ЗаписьКнигиПокупок(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	//Рарус Владимир Подрезов Конец
	//Рарус Владимир Подрезов 02.06.2017
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		ОбработкаЗаполнения_ЗаявкаНаРасходованиеДенежныхСредств(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	//Рарус Владимир Подрезов Конец
	//++ Рарус Лимаренко 30.07.2018
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПриобретениеТоваровУслуг") Тогда
		ОбработкаЗаполнения_ПриобретениеТоваровУслуг(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);	
	//-- Рарус Лимаренко 30.07.2018	
	КонецЕсли;    
	
КонецПроцедуры

Процедура пкОбработкаПроверкиЗаполнения(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт
//++ Рарус Лимаренко К.А. 16.05.2018
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыСеанса.ПараметрыОбработчикаОбновления.РежимВыполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
//-- Рарус Лимаренко К.А. 16.05.2018

    Если ТипЗнч(Источник) = Тип("СправочникОбъект.ДоговорыКонтрагентов") Тогда
		ОбработкаПроверкиЗаполнения_ДоговорыКонтрагентов(Источник, Отказ, ПроверяемыеРеквизиты);
    ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.ОбъектыЭксплуатации") Тогда
		ОбработкаПроверкиЗаполнения_ОбъектыЭксплуатации(Источник, Отказ, ПроверяемыеРеквизиты);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказНаВнутреннееПотребление") Тогда
		ОбработкаПроверкиЗаполнения_ЗаказНаВнутреннееПотребление(Источник, Отказ, ПроверяемыеРеквизиты);
	КонецЕсли;    
	
КонецПроцедуры

Процедура пкПередЗаписьюДокументов(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
//++ Рарус Лимаренко К.А. 16.05.2018
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыСеанса.ПараметрыОбработчикаОбновления.РежимВыполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
//-- Рарус Лимаренко К.А. 16.05.2018

//Рарус Владимир Подрезов Закупки 2.4.3 12.08.2016
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказНаВнутреннееПотребление") Тогда
		ПередЗаписью_ЗаказНаВнутреннееПотребление(Источник, Отказ, РежимЗаписи, РежимПроведения);
//Рарус Владимир Подрезов Конец
    ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказКлиента") ТОгда
		ПередЗаписью_ЗаказКлиента(Источник, Отказ, РежимЗаписи, РежимПроведения);
    ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств") ТОгда
		ПередЗаписью_ЗаявкаНаРасходованиеДенежныхСредств(Источник, Отказ, РежимЗаписи, РежимПроведения);
    ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств") ТОгда
		ПередЗаписью_ПоступлениеБезналичныхДенежныхСредств(Источник, Отказ, РежимЗаписи, РежимПроведения);
//Рарус Владимир Подрезов 15.08.2017 RS00-0000000000000004385
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		ПередЗаписью_РеализацияТоваровУслуг(Источник, Отказ, РежимЗаписи, РежимПроведения);
//Рарус Владимир Подрезов Конец
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказНаРемонт") Тогда
		ПередЗаписью_ЗаказНаРемонт(Источник, Отказ, РежимЗаписи, РежимПроведения);
	КонецЕсли;    
	
КонецПроцедуры

Процедура пкПриКопировании(Источник, ОбъектКопирования) Экспорт
//Рарус Владимир Подрезов 05.06.2017
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		ПриКопировании_ЗаявкаНаРасходованиеДенежныхСредств(Источник, ОбъектКопирования);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказКлиента") Тогда
		ПриКопировании_ЗаказКлиента(Источник, ОбъектКопирования);
//Рарус Владимир Подрезов Конец
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.ДоговорыКонтрагентов") Тогда
		ПриКопировании_ДоговорыКонтрагентов(Источник, ОбъектКопирования);
	КонецЕсли;    
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////
// Дополнительные процедуры события ПриЗаписи Справочников

Процедура ПриЗаписиЗаказКлиента(Источник, Отказ)
    //Для Каждого Строка ИЗ Источник.Товары Цикл
    //	МенеджерЗаписи = РегистрыСведений.пкДанныеСтрокиЗаказа.СоздатьМенеджерЗаписи();
    //
    //	МенеджерЗаписи.ЗаказКлиента = Источник.Ссылка;
    //	МенеджерЗаписи.КодСтроки    = Строка.КодСтроки;
    //	
    //	МенеджерЗаписи.Прочитать();
    //	
    //	Если НЕ МенеджерЗаписи.Выбран() Тогда
    //		МенеджерЗаписи.ЗаказКлиента = Источник.Ссылка;
    //		МенеджерЗаписи.КодСтроки    = Строка.КодСтроки;
    //		
    //		МенеджерЗаписи.Записать();
    //	КонецЕсли;	
    //КонецЦикла;	
//Рарус Владимир Подрезов 09.06.2017
	Если Источник.пкЗакрыт И Источник.пкДатаЗакрытия <> '00010101' Тогда
		ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюДокумента(Источник, Отказ, РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);		
    КонецЕсли;    
//Рарус Владимир Подрезов КОНЕЦ

КонецПроцедуры

Процедура ПриЗаписи_пкСпособыПогрузкиРазгрузкиТехники(Источник, Отказ)
	
	ПроверитьДобавитьЗаписиДоступностиСпособовПогрузки(Источник, Отказ);
	
КонецПроцедуры

Процедура ПриЗаписиНоменклатура(Источник, Отказ)
	
	Если (НЕ Источник.ЭтоГруппа) И (Источник.пкЭтоТехника) Тогда
		ПроверитьДобавитьЗаписиДоступностиСпособовПогрузки(Источник, Отказ);
	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаписиТранспортныеСредства(Источник, Отказ)
	
	ПроверитьДобавитьЗаписиДоступностиСпособовПогрузки(Источник, Отказ);
	
КонецПроцедуры

Процедура ПриЗаписи_СМ_ОбъектыСтроительства(Источник, Отказ)
	
	Если (НЕ Источник.ЭтоГруппа) Тогда
		ПроверитьДобавитьЗаписиДоступностиСпособовПогрузки(Источник, Отказ);
	КонецЕсли;
	
КонецПроцедуры

//Рарус Владимир Подрезов 13.12.2016
Процедура ПриЗаписи_ДоговорыКонтрагентов(Источник, Отказ)
	
	//Если Источник.ЭтоГруппа Тогда
	//	Возврат;
	//КонецЕсли;
	
//Рарус Владимир Подрезов 13.12.2016
	ДобавитьВБуферАвтосозданиеОбъектовВДО(Источник.Ссылка);
//Рарус Владимир Подрезов Конец
		
	ЗапросП = Новый Запрос;
	ЗапросП.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.пкОсновнойДоговорСПоставщиком = &пкОсновнойДоговорСПоставщиком
	|	И ДоговорыКонтрагентов.Статус <> &Статус";
	ЗапросП.УстановитьПараметр("пкОсновнойДоговорСПоставщиком", Источник.Ссылка);
	ЗапросП.УстановитьПараметр("Статус", Источник.Статус);
	РезЗапроса = ЗапросП.Выполнить().Выбрать();
	Пока РезЗапроса.Следующий() Цикл
		
		тОбъект = РезЗапроса.Ссылка.ПолучитьОбъект();
		тОбъект.Статус = Источник.Статус;
		тОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			тОбъект.Записать();
		Исключение
			тСообщение = Новый СообщениеПользователю;
			тСообщение.Текст = ОписаниеОшибки();
			тСообщение.Сообщить();
			Отказ = Истина;
			
			Прервать;
			
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры
//Рарус Владимир Подрезов Конец

///////////////////////////////////////////////////////////////////////////////////////////////
// Дополнительные вспомогательные процедуры для событий ПриЗаписи Справочников
Процедура ПроверитьДобавитьЗаписиДоступностиСпособовПогрузки(Источник, Отказ)
	
	Если Источник.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗНЧ(Источник) = Тип("СправочникОбъект.пкСпособыПогрузкиРазгрузкиТехники") Тогда
		
		Если Источник.ДополнительныеСвойства.Свойство("ДоступенДляВсех") Тогда
			Доступен = Источник.ДополнительныеСвойства.ДоступенДляВсех;
		Иначе
			Доступен = Ложь;
		КонецЕсли;

		//Определяем список объектов без записи для текущего способа
		ЗапросОбъекты = Новый Запрос;
		ЗапросОбъекты.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Объекты.Объект КАК Объект
		|ИЗ
		|	РегистрСведений.пкДоступностьСпособовПогрузкиИРазгрузкиТехники КАК Объекты
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			пкДоступностьСпособовПогрузкиИРазгрузкиТехники.Объект КАК Объект
		|		ИЗ
		|			РегистрСведений.пкДоступностьСпособовПогрузкиИРазгрузкиТехники КАК пкДоступностьСпособовПогрузкиИРазгрузкиТехники
		|		ГДЕ
		|			пкДоступностьСпособовПогрузкиИРазгрузкиТехники.СпособПогрузкиРазгрузки = &СпособПогрузкиРазгрузки) КАК ОбъектыПоСпособу
		|		ПО Объекты.Объект = ОбъектыПоСпособу.Объект
		|ГДЕ
		|	ОбъектыПоСпособу.Объект ЕСТЬ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	Объекты.Объект";
		ЗапросОбъекты.УстановитьПараметр("СпособПогрузкиРазгрузки", Источник.Ссылка);
		ОбъектыБезЗаписиДоступности = ЗапросОбъекты.Выполнить().Выгрузить();
		
		НаборЗаписей = РегистрыСведений.пкДоступностьСпособовПогрузкиИРазгрузкиТехники.СоздатьНаборЗаписей();
		
		Для Каждого текОбъект Из ОбъектыБезЗаписиДоступности Цикл
			//формируем записи для каждого объекта по текущему способу
			НаборЗаписей.Отбор.Объект.Установить(текОбъект.Объект, Истина);
			НаборЗаписей.Отбор.СпособПогрузкиРазгрузки.Установить(Источник.Ссылка, Истина);
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Объект					= текОбъект.Объект;
			НоваяЗапись.СпособПогрузкиРазгрузки	= Источник.Ссылка;
			НоваяЗапись.Доступен				= Доступен;
			Попытка
				НаборЗаписей.Записать(Истина);
			Исключение
				тСообщение = Новый СообщениеПользователю;
				тСообщение.Текст =  НСтр("ru='Не удалось обновить записи доступности способов погрузки и разгрузки для объекта '") + текОбъект.Объект + " " + ОписаниеОшибки();
				тСообщение.Сообщить();
			КонецПопытки;
		КонецЦикла;
	Иначе //Считаем Источник - Объектом
		//Определяем список способов без записи для объекта
		ЗапросСпособы = Новый Запрос;
		ЗапросСпособы.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Способы.Ссылка КАК Способ
		|ИЗ
		|	Справочник.пкСпособыПогрузкиРазгрузкиТехники КАК Способы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкДоступностьСпособовПогрузкиИРазгрузкиТехники КАК пкДоступностьСпособовПогрузкиИРазгрузкиТехники
		|		ПО (Способы.Ссылка = пкДоступностьСпособовПогрузкиИРазгрузкиТехники.СпособПогрузкиРазгрузки)
		|			И (пкДоступностьСпособовПогрузкиИРазгрузкиТехники.Объект = &Объект)
		|ГДЕ
		|	пкДоступностьСпособовПогрузкиИРазгрузкиТехники.СпособПогрузкиРазгрузки ЕСТЬ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	Способы.Ссылка";
		ЗапросСпособы.УстановитьПараметр("Объект", Источник.Ссылка);
		СпособыБезЗаписей = ЗапросСпособы.Выполнить().Выгрузить();
		
		НаборЗаписей = РегистрыСведений.пкДоступностьСпособовПогрузкиИРазгрузкиТехники.СоздатьНаборЗаписей();
		
		Для Каждого текСпособ Из СпособыБезЗаписей Цикл
			//формируем записи для каждого объекта по текущему способу
			НаборЗаписей.Отбор.Объект.Установить(Источник.Ссылка, Истина);
			НаборЗаписей.Отбор.СпособПогрузкиРазгрузки.Установить(текСпособ.Способ, Истина);
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Объект					= Источник.Ссылка;
			НоваяЗапись.СпособПогрузкиРазгрузки	= текСпособ.Способ;
			НоваяЗапись.Доступен				= Ложь;
			Попытка
				НаборЗаписей.Записать(Истина);
			Исключение
				тСообщение = Новый СообщениеПользователю;
				тСообщение.Текст =  НСтр("ru='Не удалось обновить записи доступности способов погрузки и разгрузки для Способа '") + текСпособ.Способ + " " + ОписаниеОшибки();
				тСообщение.Сообщить();
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////
// Дополнительные процедуры события ОбработкаПроведения Документов

//Рарус Владимир Подрезов УАТ 3.4 04.08.2016
Процедура ОбработкаПроведения_уатПутевойЛист(Источник, Отказ, РежимПроведения) Экспорт
	
	РегистрыСведений.пкПробегТСпоТО.СформироватьЗаписи(Отказ, РежимПроведения, Источник);
	
КонецПроцедуры
//Рарус Владимир Подрезов Конец

Процедура ОбработкаПроведения_ЗаказКлиента(Источник, Отказ, РежимПроведения)
    
    РегистрыСведений.пкСрокиАренды.СформироватьЗаписи(Источник, Отказ, РежимПроведения);
    
//Рарус Владимир Подрезов 29.09.2017
    РегистрыСведений.пкОформлениеАрендыТехники.СформироватьЗаписи(Источник, Отказ, РежимПроведения);
//Рарус Владимир Подрезов Конец
	
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   ЗаказКлиентаТовары.Ссылка.Дата КАК Период,
    |   ЗаказКлиентаТовары.Ссылка КАК ЗаказКлиента,
    |   ЗаказКлиентаТовары.пкЗаявкаНаАрендуТехники КАК ЗаявкаНаАрендуТехники,
    |   &АналитикаУчетаПоПартнерам,
    |   ЗаказКлиентаТовары.Ссылка.Валюта,
    |   СУММА(ЗаказКлиентаТовары.СуммаСНДС) КАК Сумма
    |ИЗ
    |   Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
    |ГДЕ
    |   ЗаказКлиентаТовары.Ссылка = &Ссылка
    |   И НЕ ЗаказКлиентаТовары.Отменено
    |
    |СГРУППИРОВАТЬ ПО
    |   ЗаказКлиентаТовары.Ссылка.Дата,
    |   ЗаказКлиентаТовары.Ссылка,
    |   ЗаказКлиентаТовары.Ссылка.Валюта,
    |   ЗаказКлиентаТовары.пкЗаявкаНаАрендуТехники
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |   ЗаказКлиентапкКорректировкиТоваров.Ссылка.Дата,
    |   ЗаказКлиентапкКорректировкиТоваров.Ссылка,
    |   ЗаказКлиентапкКорректировкиТоваров.пкЗаявкаНаАрендуТехники,
    |   &АналитикаУчетаПоПартнерам,
    |   ЗаказКлиентапкКорректировкиТоваров.Ссылка.Валюта,
    |   СУММА(ЗаказКлиентапкКорректировкиТоваров.СуммаСНДС)
    |ИЗ
    |   Документ.ЗаказКлиента.пкКорректировкиТоваров КАК ЗаказКлиентапкКорректировкиТоваров
    |ГДЕ
    |   ЗаказКлиентапкКорректировкиТоваров.Ссылка = &Ссылка
    |
    |СГРУППИРОВАТЬ ПО
    |   ЗаказКлиентапкКорректировкиТоваров.Ссылка.Дата,
    |   ЗаказКлиентапкКорректировкиТоваров.Ссылка,
    |   ЗаказКлиентапкКорректировкиТоваров.Ссылка.Валюта,
    |   ЗаказКлиентапкКорректировкиТоваров.пкЗаявкаНаАрендуТехники";
    
    Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
    
    СтруктураПараметровАналитики = Новый Структура("Организация, Партнер, Контрагент, Договор, НаправлениеДеятельности", 
    Источник.Организация, Источник.Партнер, Источник.Контрагент, Источник.Договор, Источник.НаправлениеДеятельности);
    
    Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(СтруктураПараметровАналитики));
    
    НаборЗаписей = Источник.Движения.пкРасчетыСКлиентамиПоАренде;
    НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
    НаборЗаписей.Записать();
    
КонецПроцедуры    

//Рарус Владимир Подрезов Закупки 2.4.3 11.08.2016
Процедура ОбработкаПроведения_ЗаказПоставщику(Источник, Отказ, РежимПроведения) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//Проверим соответсвие суммы Заказа Поставщику по Заказу на внутренне потребление 
	//на не привышение суммы более чем на 20%
	Если Не ЗначениеЗаполнено(Источник.ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник.ДокументОснование) <> Тип("ДокументСсылка.ЗаказНаВнутреннееПотребление") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.СуммаДокумента > Источник.ДокументОснование.СуммаДокумента * 120 / 100 Тогда
		
		Отказ = Истина;
		тСообщение = Новый СообщениеПользователю;
		тСообщение.Текст = НСтр("ru='Сумма документа привышает более чем на 20% сумму основания: '") + Источник.ДокументОснование;
		тСообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры
//Рарус Владимир Подрезов Конец

Процедура ОбработкаПроведения_ПоступлениеБезналичныхДенежныхСредств(Источник, Отказ, РежимПроведения)
            
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   КОНЕЦПЕРИОДА(ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка.ДатаПроведенияБанком, ДЕНЬ) КАК Период,
    |   ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Заказ КАК ЗаказКлиента,
    |   АналитикаУчетаПоПартнерам.КлючАналитики КАК АналитикаУчетаПоПартнерам,
    |   ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК Валюта,
    |   СУММА(ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.СуммаВзаиморасчетов) КАК СуммаОплаты
    |ПОМЕСТИТЬ ВТ_ОплатаАренды
    |ИЗ
    |   Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
    |       ПО ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Партнер = АналитикаУчетаПоПартнерам.Партнер
    |           И ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Организация = АналитикаУчетаПоПартнерам.Организация
    |           И ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка.Контрагент = АналитикаУчетаПоПартнерам.Контрагент
    |           И ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Заказ.Договор = АналитикаУчетаПоПартнерам.Договор
    |           И ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Заказ.НаправлениеДеятельности = АналитикаУчетаПоПартнерам.НаправлениеДеятельности
    |ГДЕ
    |   ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка = &Ссылка
    |   И ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Заказ ССЫЛКА Документ.ЗаказКлиента
    |   И ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка.ПроведеноБанком
    |
    |СГРУППИРОВАТЬ ПО
    |   ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Заказ,
    |   ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.ВалютаВзаиморасчетов,
    |   АналитикаУчетаПоПартнерам.КлючАналитики,
    |   КОНЕЦПЕРИОДА(ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка.ДатаПроведенияБанком, ДЕНЬ)
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |   ВТ_ОплатаАренды.Период,
    |   ВТ_ОплатаАренды.ЗаказКлиента,
    |   ВТ_ОплатаАренды.АналитикаУчетаПоПартнерам,
    |   ВТ_ОплатаАренды.СуммаОплаты,
    |   ВТ_ОплатаАренды.Валюта,
    |   ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
    |ИЗ
    |   ВТ_ОплатаАренды КАК ВТ_ОплатаАренды
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |   пкРасчетыСКлиентамиПоАрендеОстатки.ЗаказКлиента КАК ЗаказКлиента,
    |   пкРасчетыСКлиентамиПоАрендеОстатки.ЗаявкаНаАрендуТехники,
    |   пкРасчетыСКлиентамиПоАрендеОстатки.Валюта,
    |   пкРасчетыСКлиентамиПоАрендеОстатки.СуммаОстаток КАК Сумма
    |ИЗ
    |   РегистрНакопления.пкРасчетыСКлиентамиПоАренде.Остатки(
    |           ,
    |           ЗаказКлиента В
    |               (ВЫБРАТЬ
    |                   ВТ_ОплатаАренды.ЗаказКлиента
    |               ИЗ
    |                   ВТ_ОплатаАренды КАК ВТ_ОплатаАренды)) КАК пкРасчетыСКлиентамиПоАрендеОстатки
    |
    |УПОРЯДОЧИТЬ ПО
    |   ЗаказКлиента,
    |   пкРасчетыСКлиентамиПоАрендеОстатки.ЗаявкаНаАрендуТехники.Дата";
    
    Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
    
    Результат = Запрос.ВыполнитьПакет();
    
    ТаблицаОплатыАренды           = Результат[1].Выгрузить();
    ТаблицаЗадолженностиПоЗаявкам = Результат[2].Выгрузить();
    
    НаборЗаписей = Источник.Движения.пкРасчетыСКлиентамиПоАренде;
    
    СтруктураПоиска = Новый Структура("ЗаказКлиента");
        
    Для Каждого Строка ИЗ ТаблицаОплатыАренды Цикл
        СуммаОплаты = Строка.СуммаОплаты; 
        
        СтруктураПоиска.Вставить("ЗаказКлиента", Строка.ЗаказКлиента);
        
        НайденныеСтроки = ТаблицаЗадолженностиПоЗаявкам.НайтиСтроки(СтруктураПоиска);
        
        Для Каждого НайденнаяСтрока ИЗ НайденныеСтроки Цикл
            Если СуммаОплаты = 0 Тогда
                Прервать;    
            КонецЕсли;
            
            СуммаПоЗаявкеВВалютеОплаты = РаботаСКурсамиВалютУТ.ПересчитатьСуммуДокументаВВалюту(НайденнаяСтрока.Сумма, НайденнаяСтрока.Валюта, Строка.Валюта, Источник.Дата);
            
            Если СуммаОплаты > СуммаПоЗаявкеВВалютеОплаты Тогда
                НоваяЗапись = НаборЗаписей.Добавить();
                
                ЗаполнитьЗначенияСвойств(НоваяЗапись, Строка);
                                
                НоваяЗапись.ЗаявкаНаАрендуТехники = НайденнаяСтрока.ЗаявкаНаАрендуТехники;
                НоваяЗапись.Сумма = СуммаПоЗаявкеВВалютеОплаты;
                
                СуммаОплаты = СуммаОплаты - СуммаПоЗаявкеВВалютеОплаты;
                
                ТаблицаЗадолженностиПоЗаявкам.Удалить(НайденнаяСтрока);
            Иначе
                НоваяЗапись = НаборЗаписей.Добавить();
                
                ЗаполнитьЗначенияСвойств(НоваяЗапись, Строка);
                
                НоваяЗапись.ЗаявкаНаАрендуТехники = НайденнаяСтрока.ЗаявкаНаАрендуТехники;
                НоваяЗапись.Сумма = СуммаОплаты;
                                
                НайденнаяСтрока.Сумма = НайденнаяСтрока.Сумма - РаботаСКурсамиВалютУТ.ПересчитатьСуммуДокументаВВалюту(СуммаОплаты, Строка.Валюта, НайденнаяСтрока.Валюта, Источник.Дата); 
                
                СуммаОплаты = 0;
            КонецЕсли;    
        КонецЦикла;   
        
        Если СуммаОплаты > 0 Тогда
            НоваяЗапись = НаборЗаписей.Добавить();
                
            ЗаполнитьЗначенияСвойств(НоваяЗапись, Строка);
            
            НоваяЗапись.Сумма = СуммаОплаты;
        КонецЕсли;
            
    КонецЦикла;    
    
    НаборЗаписей.Записать();
    
КонецПроцедуры    

Процедура ОбработкаПроведения_РеализацияТоваровУслуг(Источник, Отказ, РежимПроведения)
    
    РегистрыСведений.пкСрокиАренды.СформироватьЗаписи(Источник, Отказ, РежимПроведения);
//Рарус Владимир Подрезов 29.09.2017
    РегистрыСведений.пкОформлениеАрендыТехники.СформироватьЗаписи(Источник, Отказ, РежимПроведения);
//Рарус Владимир Подрезов Конец
	
КонецПроцедуры    

//++ Рарус IA 02.10.2016
Процедура ОбработкаПроведения_ВнутреннееПотреблениеТоваров(Источник, Отказ, РежимПроведения)
            
	Если ЗначениеЗаполнено(Источник.пкТранспортноеСредство) Тогда
    	НаборЗаписей = Источник.Движения.ПрочиеРасходы;
    	Для Каждого СтрокаДвижения ИЗ НаборЗаписей Цикл
 			СтрокаДвижения.пкТранспортноеСредство=Источник.пкТранспортноеСредство;
		КонецЦикла;
		НаборЗаписей.ОбменДанными.Загрузка=Истина;
    	НаборЗаписей.Записать();
	КонецЕсли; 
    
КонецПроцедуры    
//-- Рарус IA 02.10.2016

//+++DubI Рарус-СПб 03.11.2016
Процедура ОбработкаПроведения_ПриобретениеУслугПоЛизингу(Источник, Отказ, РежимПроведения)
    
    РегистрыНакопления.пкПризнаниеВ_НУ_ЛизинговыхПлатежей.СформироватьЗаписи(Источник, Отказ, РежимПроведения);
    
КонецПроцедуры    

Процедура ОбработкаПроведения_АмортизацияОС(Источник, Отказ, РежимПроведения)

    РегистрыНакопления.пкПризнаниеВ_НУ_ЛизинговыхПлатежей.СформироватьЗаписи(Источник, Отказ, РежимПроведения);

КонецПроцедуры
//---DubI Рарус-СПб

//Рарус Владимир Подрезов 27.02.2017
Процедура ОбработкаПроведения_ЗаявкаНаРасходованиеДенежныхСредств(Источник, Отказ, РежимПроведения)
            
//Рарус Владимир Подрезов 08.06.2017
	Если Источник.Статус <> Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована
		И Источник.Статус <> Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате
	Тогда
		Возврат;
	КонецЕсли;
//Рарус Владимир Подрезов КОНЕЦ

	//++ RARUS_IUC
	ЗапросЛогистика = Новый Запрос;
	ЗапросЛогистика.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДоходыРасходы.Дата КАК Период,
	|	ТаблицаДоходыРасходы.пкСтатьяРасходовПоЛогистике.СобственныеАрендованные КАК СпособПеревозки,
	|	ТаблицаДоходыРасходы.пкСтатьяРасходовПоЛогистике КАК СтатьяАктиваПассива,
	|	ТаблицаДоходыРасходы.Подразделение КАК Регион,
	|	ЕСТЬNULL(ЗаявкаНаРасходованиеДенежныхСредствпкТранспортныеСредства.ТранспортноеСредство, ЗНАЧЕНИЕ(Справочник.ТранспортныеСредства.ПустаяСсылка)) КАК ТранспортноеСредство,
	|	ЕСТЬNULL(ЗаявкаНаРасходованиеДенежныхСредствпкТранспортныеСредства.Сумма, ТаблицаДоходыРасходы.пкСуммаБезНДС) КАК Сумма
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ТаблицаДоходыРасходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.пкТранспортныеСредства КАК ЗаявкаНаРасходованиеДенежныхСредствпкТранспортныеСредства
	|		ПО (ЗаявкаНаРасходованиеДенежныхСредствпкТранспортныеСредства.Ссылка = ТаблицаДоходыРасходы.Ссылка)
	|ГДЕ
	|	ТаблицаДоходыРасходы.Ссылка = &Ссылка
	|	И ТаблицаДоходыРасходы.пкСтатьяРасходовПоЛогистике <> ЗНАЧЕНИЕ(Справочник.пкСтатьиДоходовРасходовЛогистика.ПустаяСсылка)
	|	И ТаблицаДоходыРасходы.Подразделение.пкОтражатьРасходыПоЛогистике";
	//-- RARUS_IUC 
	
	ЗапросЛогистика.УстановитьПараметр("Ссылка", Источник.Ссылка);
	Таблица	= ЗапросЛогистика.Выполнить().Выгрузить();
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.СуммаДокумента <> Источник.пкСуммаБезНДС Тогда
		
		// Есть НДС. Высчитываем сумму без 18%
		
		ОсталосьпкСуммаБезНДС = Источник.пкСуммаБезНДС;
		
		Для каждого Стр Из Таблица Цикл		
			
			Стр.Сумма = Окр(Стр.Сумма / 118 * 100, 2);		
			
			ОсталосьпкСуммаБезНДС = ОсталосьпкСуммаБезНДС - Стр.Сумма; 		
			
		КонецЦикла;
		
		Таблица[Таблица.Количество() - 1].Сумма = Таблица[Таблица.Количество() - 1].Сумма + ОсталосьпкСуммаБезНДС;		
		
	КонецЕсли;  	
	
	Источник.Движения.пкРасходыПоЛогистике.Записывать = Истина;
	Источник.Движения.пкРасходыПоЛогистике.Загрузить(Таблица);
    Источник.Движения.пкРасходыПоЛогистике.Записать();
    
КонецПроцедуры    
//Рарус Владимир Подрезов Конец

///////////////////////////////////////////////////////////////////////////////////////////////
// Дополнительные процедуры события ОбработкаЗаполнения Справочников и Документов

Процедура ОбработкаЗаполнения_ЗаказКлиента(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
    
    Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.пкЗаявкаНаАрендуТехники") Тогда
        ЗаполнитьПоЗаявке(Источник, ДанныеЗаполнения);
    КонецЕсли;    
    
КонецПроцедуры

Процедура ЗаполнитьПоЗаявкеОстатки(Источник, ДанныеЗаполнения, ЗаполнятьШапку = Истина) Экспорт 
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   пкЗаявкаНаАрендуТехники.Партнер,
    |   пкЗаявкаНаАрендуТехники.Контрагент,
    |   пкЗаявкаНаАрендуТехники.Организация,
    |   пкЗаявкаНаАрендуТехники.Договор,
    |   пкЗаявкаНаАрендуТехники.Подразделение,
    |   пкЗаявкаНаАрендуТехники.ОбъектСтроительства КАК пкОбъектСтроительства,
    |   пкЗаявкаНаАрендуТехники.КонтактноеЛицо,
    |   пкЗаявкаНаАрендуТехники.Менеджер,
    |   пкЗаявкаНаАрендуТехники.Договор.ПорядокРасчетов КАК ПорядокРасчетов
    |ИЗ
    |   Документ.пкЗаявкаНаАрендуТехники КАК пкЗаявкаНаАрендуТехники
    |ГДЕ
    |   пкЗаявкаНаАрендуТехники.Ссылка = &ЗаявкаНаАрендуТехники
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |   МАКСИМУМ(ЕСТЬNULL(ДанныеНачалаАрендыЗаказы.Период, ДанныеНачалаАрендыЗаявки.Период)) КАК пкДатаНачалаАренды,
    |   ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники КАК пкЗаявкаНаАрендуТехники,
    |   ДанныеНачалаАрендыЗаявки.Модель КАК Номенклатура,
    |   МАКСИМУМ(ЕСТЬNULL(ДанныеОкончанияАренды.Период, КОНЕЦПЕРИОДА(ЕСТЬNULL(ДанныеНачалаАрендыЗаказы.Период, ДанныеНачалаАрендыЗаявки.Период), МЕСЯЦ))) КАК пкДатаОкончанияАренды,
    |   МАКСИМУМ(ЕСТЬNULL(ДанныеНачалаАрендыЗаказы.Техника, ДанныеНачалаАрендыЗаявки.Техника)) КАК пкТехника,
    |   ДанныеНачалаАрендыЗаявки.НомерМодели
    |ПОМЕСТИТЬ ВТ_СрокиАренды
    |ИЗ
    |   РегистрСведений.пкСрокиАренды.СрезПоследних(
    |           ,
    |           ЗаявкаНаАрендуТехники = &ЗаявкаНаАрендуТехники
    |               И ТипДокумента = ЗНАЧЕНИЕ(Перечисление.пкТипыДокументовДляСроковАренды.ЗаявкаНаАрендуТехники)
    |               И НЕ ЭтоОкончаниеАренды) КАК ДанныеНачалаАрендыЗаявки
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкСрокиАренды.СрезПоследних(
    |               ,
    |               ЗаявкаНаАрендуТехники = &ЗаявкаНаАрендуТехники
    |                   И ЭтоОкончаниеАренды
    |                   И ТипДокумента = ЗНАЧЕНИЕ(Перечисление.пкТипыДокументовДляСроковАренды.ЗаявкаНаАрендуТехники)) КАК ДанныеОкончанияАренды
    |       ПО ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники = ДанныеОкончанияАренды.ЗаявкаНаАрендуТехники
    |           И ДанныеНачалаАрендыЗаявки.Модель = ДанныеОкончанияАренды.Модель
    |           И ДанныеНачалаАрендыЗаявки.НомерМодели = ДанныеОкончанияАренды.НомерМодели
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкСрокиАренды.СрезПоследних(
    |               ,
    |               ЗаявкаНаАрендуТехники = &ЗаявкаНаАрендуТехники
    |                   И ТипДокумента = ЗНАЧЕНИЕ(Перечисление.пкТипыДокументовДляСроковАренды.ЗаказКлиента)
    |                   И ЭтоОкончаниеАренды) КАК ДанныеНачалаАрендыЗаказы
    |       ПО ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники = ДанныеНачалаАрендыЗаказы.ЗаявкаНаАрендуТехники
    |           И ДанныеНачалаАрендыЗаявки.Модель = ДанныеНачалаАрендыЗаказы.Модель
    |           И ДанныеНачалаАрендыЗаявки.НомерМодели = ДанныеНачалаАрендыЗаказы.НомерМодели
    |
    |СГРУППИРОВАТЬ ПО
    |   ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники,
    |   ДанныеНачалаАрендыЗаявки.Модель,
    |   ДанныеНачалаАрендыЗаявки.НомерМодели
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |   МАКСИМУМ(ЕСТЬNULL(ДанныеНачалаАрендыЗаказы.Период, ДанныеНачалаАрендыЗаявки.Период)),
    |   ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники,
    |   ДанныеНачалаАрендыЗаявки.Модель,
    |   МАКСИМУМ(ДанныеОкончанияАренды.Период),
    |   МАКСИМУМ(ЕСТЬNULL(ДанныеНачалаАрендыЗаказы.Техника, ДанныеНачалаАрендыЗаявки.Техника)),
    |   ДанныеНачалаАрендыЗаявки.НомерМодели
    |ИЗ
    |   РегистрСведений.пкСрокиАренды.СрезПоследних(
    |           ,
    |           ЗаявкаНаАрендуТехники = &ЗаявкаНаАрендуТехники
    |               И ТипДокумента = ЗНАЧЕНИЕ(Перечисление.пкТипыДокументовДляСроковАренды.ПогрузкаВыгрузка)
    |               И НЕ ЭтоОкончаниеАренды) КАК ДанныеНачалаАрендыЗаявки
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкСрокиАренды.СрезПоследних(
    |               ,
    |               ЗаявкаНаАрендуТехники = &ЗаявкаНаАрендуТехники
    |                   И ЭтоОкончаниеАренды
    |                   И ТипДокумента = ЗНАЧЕНИЕ(Перечисление.пкТипыДокументовДляСроковАренды.ПогрузкаВыгрузка)) КАК ДанныеОкончанияАренды
    |       ПО ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники = ДанныеОкончанияАренды.ЗаявкаНаАрендуТехники
    |           И ДанныеНачалаАрендыЗаявки.Модель = ДанныеОкончанияАренды.Модель
    |           И ДанныеНачалаАрендыЗаявки.НомерМодели = ДанныеОкончанияАренды.НомерМодели
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкСрокиАренды.СрезПоследних(
    |               ,
    |               ЗаявкаНаАрендуТехники = &ЗаявкаНаАрендуТехники
    |                   И ТипДокумента = ЗНАЧЕНИЕ(Перечисление.пкТипыДокументовДляСроковАренды.ЗаказКлиента)
    |                   И ЭтоОкончаниеАренды) КАК ДанныеНачалаАрендыЗаказы
    |       ПО ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники = ДанныеНачалаАрендыЗаказы.ЗаявкаНаАрендуТехники
    |           И ДанныеНачалаАрендыЗаявки.Модель = ДанныеНачалаАрендыЗаказы.Модель
    |           И ДанныеНачалаАрендыЗаявки.НомерМодели = ДанныеНачалаАрендыЗаказы.НомерМодели
    |ГДЕ
    |   НЕ ДанныеОкончанияАренды.Период ЕСТЬ NULL 
    |   И ЕСТЬNULL(ДанныеНачалаАрендыЗаказы.Период, ДанныеНачалаАрендыЗаявки.Период) < ДанныеОкончанияАренды.Период
    |
    |СГРУППИРОВАТЬ ПО
    |   ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники,
    |   ДанныеНачалаАрендыЗаявки.Модель,
    |   ДанныеНачалаАрендыЗаявки.НомерМодели
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |   ВТ_СрокиАренды.пкДатаНачалаАренды,
    |   ВТ_СрокиАренды.пкЗаявкаНаАрендуТехники,
    |   ВТ_СрокиАренды.Номенклатура,
    |   ВТ_СрокиАренды.пкДатаОкончанияАренды,
    |   ВТ_СрокиАренды.пкТехника,
    |   ВТ_СрокиАренды.НомерМодели
    |ИЗ
    |   ВТ_СрокиАренды КАК ВТ_СрокиАренды
    |ГДЕ
    |   ВТ_СрокиАренды.пкДатаНачалаАренды < ВТ_СрокиАренды.пкДатаОкончанияАренды";
    
    Запрос.УстановитьПараметр("ЗаявкаНаАрендуТехники", ДанныеЗаполнения);
    
    Результат = Запрос.ВыполнитьПакет();
    
    Если ЗаполнятьШапку Тогда
        Выборка = Результат[0].Выбрать();
        
        Выборка.Следующий();
        
        ЗаполнитьЗначенияСвойств(Источник, Выборка);
        
	    ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Источник.Договор, Источник.БанковскийСчет, Источник.БанковскийСчетКонтрагента);
        
        Если Не ЗначениеЗаполнено(Источник.БанковскийСчетКонтрагента) Тогда
			Источник.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Источник.Контрагент);
        КонецЕсли;
        
        Источник.Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке;
    КонецЕсли;
        
    Выборка = Результат[2].Выбрать();
    
    СтруктураДействий = Новый Структура();
    
    СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Источник);
    СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",   Источник.НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",  Новый Структура("НалогообложениеНДС, Дата", Источник.НалогообложениеНДС, Источник.Дата));
    СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
    СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
    СтруктураДействий.Вставить("ПересчитатьСумму");
    СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Источник));
    
    СтруктураПолейТЧ = Новый Структура;
    
    СтруктураПолейТЧ.Вставить("Номенклатура");
    СтруктураПолейТЧ.Вставить("Характеристика");
    СтруктураПолейТЧ.Вставить("ВидЦены");
    СтруктураПолейТЧ.Вставить("Упаковка");
    СтруктураПолейТЧ.Вставить("Цена", 0);
    СтруктураПолейТЧ.Вставить("КоличествоУпаковок", 0);
    СтруктураПолейТЧ.Вставить("Количество", 0);
    СтруктураПолейТЧ.Вставить("пкЗаявкаНаАрендуТехники");
    СтруктураПолейТЧ.Вставить("пкТехника");
    СтруктураПолейТЧ.Вставить("пкВидТарифа");
    СтруктураПолейТЧ.Вставить("Сумма"    , 0);
    СтруктураПолейТЧ.Вставить("СтавкаНДС", 0);
    СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
    СтруктураПолейТЧ.Вставить("СуммаСНДС", 0);
    
    Пока Выборка.Следующий() Цикл
        КоличествоУпаковок = (Выборка.пкДатаОкончанияАренды + 1 - НачалоДня(Выборка.пкДатаНачалаАренды)) / (3600 * 24);
        
        Если КоличествоУпаковок > 0 Тогда
            НоваяСтрока = Источник.Товары.Добавить();
            
            ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
            
            НоваяСтрока.КоличествоУпаковок = КоличествоУпаковок;
            
            НоваяСтрока.пкПримечаниеДляПечати = пкУправлениеТехникойСервер.СформироватьПримечаниеДляПечатиПоТехнике(НоваяСтрока.Номенклатура, НоваяСтрока.пкТехника);
            
            ЗаполнитьЗначенияСвойств(СтруктураПолейТЧ, НоваяСтрока);
            
            ОбработкаТабличнойЧастиВызовСервера.ОбработатьСтрокуТЧ(СтруктураПолейТЧ, СтруктураДействий, Неопределено);
    
            ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПолейТЧ);
        КонецЕсли;
    КонецЦикла;  
        
КонецПроцедуры    

Процедура ЗаполнитьПоЗаявке(Источник, ДанныеЗаполнения, ЗаполнятьШапку = Истина) Экспорт 
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   пкЗаявкаНаАрендуТехники.Партнер,
    |   пкЗаявкаНаАрендуТехники.Контрагент,
    |   пкЗаявкаНаАрендуТехники.Организация,
    |   пкЗаявкаНаАрендуТехники.Договор,
    |   пкЗаявкаНаАрендуТехники.Подразделение,
    |   пкЗаявкаНаАрендуТехники.ОбъектСтроительства КАК пкОбъектСтроительства,
    |   пкЗаявкаНаАрендуТехники.КонтактноеЛицо,
    |   пкЗаявкаНаАрендуТехники.Менеджер,
    |   пкЗаявкаНаАрендуТехники.Договор.ПорядокРасчетов КАК ПорядокРасчетов
    |ИЗ
    |   Документ.пкЗаявкаНаАрендуТехники КАК пкЗаявкаНаАрендуТехники
    |ГДЕ
    |   пкЗаявкаНаАрендуТехники.Ссылка = &ЗаявкаНаАрендуТехники
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |   пкЗаявкаНаАрендуТехникиТовары.ДатаНачалаАренды КАК пкДатаНачалаАренды,
    |   пкЗаявкаНаАрендуТехникиТовары.Ссылка КАК пкЗаявкаНаАрендуТехники,
    |   пкЗаявкаНаАрендуТехникиТовары.Номенклатура,
//Рарус Владимир Подрезов 24.03.2017
    |   пкЗаявкаНаАрендуТехникиТовары.ЗамененнаяМодель КАК пкЗамененнаяМодель,
//Рарус Владимир Подрезов Конец
    |   пкЗаявкаНаАрендуТехникиТовары.ДатаОкончанияАренды КАК пкДатаОкончанияАренды,
    |   пкЗаявкаНаАрендуТехникиТовары.КоличествоУпаковок,
    |   пкЗаявкаНаАрендуТехникиТовары.КоличествоПоМодели
    |ПОМЕСТИТЬ ВТ_СрокиАрендыПоЗаявке
    |ИЗ
    |   Документ.пкЗаявкаНаАрендуТехники.Товары КАК пкЗаявкаНаАрендуТехникиТовары
    |ГДЕ
    |   пкЗаявкаНаАрендуТехникиТовары.Ссылка = &ЗаявкаНаАрендуТехники
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |   пкРезервТехникиСрезПоследних.Техника,
    |   пкРезервТехникиСрезПоследних.Техника.пкМодель КАК Модель
    |ИЗ
    |   РегистрСведений.пкРезервТехники.СрезПоследних(
    |           ,
    |           ЗаявкаНаАрендуТехники В
    |               (ВЫБРАТЬ
    |                   ВТ_СрокиАрендыПоЗаявке.пкЗаявкаНаАрендуТехники
    |               ИЗ
    |                   ВТ_СрокиАрендыПоЗаявке КАК ВТ_СрокиАрендыПоЗаявке)) КАК пкРезервТехникиСрезПоследних
    |
    |СГРУППИРОВАТЬ ПО
    |   пкРезервТехникиСрезПоследних.Техника,
    |   пкРезервТехникиСрезПоследних.Техника.пкМодель
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |   ВТ_СрокиАрендыПоЗаявке.пкДатаНачалаАренды,
    |   ВТ_СрокиАрендыПоЗаявке.пкЗаявкаНаАрендуТехники,
    |   ВТ_СрокиАрендыПоЗаявке.Номенклатура,
//Рарус Владимир Подрезов 24.03.2017
    |   ВТ_СрокиАрендыПоЗаявке.пкЗамененнаяМодель,
//Рарус Владимир Подрезов Конец
    |   ВТ_СрокиАрендыПоЗаявке.пкДатаОкончанияАренды,
    |   ВТ_СрокиАрендыПоЗаявке.КоличествоУпаковок,
    |   ВТ_СрокиАрендыПоЗаявке.КоличествоПоМодели
    |ИЗ
    |   ВТ_СрокиАрендыПоЗаявке КАК ВТ_СрокиАрендыПоЗаявке";
    
    Запрос.УстановитьПараметр("ЗаявкаНаАрендуТехники", ДанныеЗаполнения);
        
    Результат = Запрос.ВыполнитьПакет();
    
    Если ЗаполнятьШапку Тогда
        Выборка = Результат[0].Выбрать();
        
        Выборка.Следующий();
        
        ЗаполнитьЗначенияСвойств(Источник, Выборка);
        
	    ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Источник.Договор, Источник.БанковскийСчет, Источник.БанковскийСчетКонтрагента);
        
        Если Не ЗначениеЗаполнено(Источник.БанковскийСчетКонтрагента) Тогда
			Источник.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Источник.Контрагент);
        КонецЕсли;
        
        Источник.Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке;
    КонецЕсли;

    ТаблицаТехники = Результат[2].Выгрузить();
    
    СтруктураПоиска = Новый Структура("Модель");
            
    Выборка = Результат[3].Выбрать();
    
    СтруктураДействий = Новый Структура();
    
    СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Источник);
    СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",  Новый Структура("НалогообложениеНДС, Дата", Источник.НалогообложениеНДС, Источник.Дата));
    СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
    СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
    СтруктураДействий.Вставить("ПересчитатьСумму");
    СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Источник));

    СтруктураПолейТЧ = Новый Структура;
    
    СтруктураПолейТЧ.Вставить("Номенклатура");
    СтруктураПолейТЧ.Вставить("Характеристика");
    СтруктураПолейТЧ.Вставить("ВидЦены");
    СтруктураПолейТЧ.Вставить("Упаковка");
    СтруктураПолейТЧ.Вставить("Цена", 0);
    СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
    СтруктураПолейТЧ.Вставить("Количество", 0);
    СтруктураПолейТЧ.Вставить("пкЗаявкаНаАрендуТехники");
    СтруктураПолейТЧ.Вставить("пкТехника");
    СтруктураПолейТЧ.Вставить("пкВидТарифа");
    СтруктураПолейТЧ.Вставить("Сумма"    , 0);
    СтруктураПолейТЧ.Вставить("СтавкаНДС", 0);
    СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
    СтруктураПолейТЧ.Вставить("СуммаСНДС", 0);
//Рарус Владимир Подрезов 24.03.2017
    СтруктураПолейТЧ.Вставить("пкЗамененнаяМодель");
//Рарус Владимир Подрезов Конец
//Рарус Владимир Подрезов 29.03.2017
	Если ТипЗнч(Источник) = Тип("ДанныеФормыСтруктура") Тогда
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", Новый Структура("Номенклатура", "ВариантОформленияПродажи"));
		СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", Новый Структура(
			"БезВозвратнойТары,ОтмененоБезВозвратнойТары,Отменено",
			"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки",
			"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки",
			"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Источник.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Источник.ВернутьМногооборотнуюТару);
		
		текТаб = Источник.Товары.Выгрузить();
		Для Каждого текПоле Из текТаб.Колонки Цикл
			Если текПоле.Имя = "НомерСтроки" Тогда 
				Продолжить;
			КонецЕсли;
			Если Не СтруктураПолейТЧ.Свойство(текПоле.Имя) Тогда
			    СтруктураПолейТЧ.Вставить(текПоле.Имя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
//Рарус Владимир Подрезов Конец
    
    Пока Выборка.Следующий() Цикл        
        Для Счетчик = 1 По Выборка.КоличествоПоМодели Цикл
            НоваяСтрока = Источник.Товары.Добавить();
            
            ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
            
            СтруктураПоиска.Вставить("Модель", НоваяСтрока.Номенклатура);
            
            НайденныеСтроки = ТаблицаТехники.НайтиСтроки(СтруктураПоиска);
            
            Если НайденныеСтроки.Количество() > 0 Тогда
                НоваяСтрока.пкТехника = НайденныеСтроки[0].Техника;
                
//Рарус Владимир Подрезов 24.03.2017
//				НайденныеСтроки.Удалить(0);
				ТаблицаТехники.Удалить(НайденныеСтроки[0]);
//Рарус Владимир Подрезов Конец
            КонецЕсли;  
            
            НоваяСтрока.пкПримечаниеДляПечати = пкУправлениеТехникойСервер.СформироватьПримечаниеДляПечатиПоТехнике(НоваяСтрока.Номенклатура, НоваяСтрока.пкТехника);
            
            ЗаполнитьЗначенияСвойств(СтруктураПолейТЧ, НоваяСтрока);
            
            ОбработкаТабличнойЧастиВызовСервера.ОбработатьСтрокуТЧ(СтруктураПолейТЧ, СтруктураДействий, Неопределено);
            
            ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПолейТЧ);
//Рарус Владимир Подрезов 29.03.2017
			НоваяСтрока.КодСтроки			= 0;
			НоваяСтрока.ДатаОтгрузки		= Источник.Дата;
			НоваяСтрока.ВариантОбеспечения	= Перечисления.ВариантыОбеспечения.Отгрузить;
//Рарус Владимир Подрезов Конец
        КонецЦикла; 
    КонецЦикла;  
	
КонецПроцедуры    

//Рарус Владимир Подрезов УАТ 3.4 04.08.2016
Процедура ОбработкаЗаполнения_ПутевойЛист(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ДанныеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументОбъект.пкДоставка") Тогда
		Документы.пкДоставка.ЗаполнитьПутевойЛистПоДоставке(Источник, ДанныеЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры
//Рарус Владимир Подрезов Конец

Процедура ОбработкаЗаполнения_РеализацияТоваровУслуг(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
    
	Если ДанныеЗаполнения <> Неопределено И НЕ ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда	
		ДокументОснование = ДанныеЗаполнения.ДокументОснование; 
		
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			Если ДокументОснование.Договор.пкВидДоговора = Перечисления.пкВидыДоговоров.АрендаТехники Тогда            
				Источник.Товары.Очистить();
				
				Источник.пкОбъектСтроительства = ДокументОснование.пкОбъектСтроительства;
				
				ЗаполнитьПоСчету(Источник, ДокументОснование);
			КонецЕсли; 
		КонецЕсли; 
		//++ Рарус Лимаренко 19.06.2018
	ИначеЕсли ДанныеЗаполнения <> Неопределено И ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("ДокументОснование") И ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			Если ДанныеЗаполнения.ДокументОснование.Договор.пкВидДоговора = Перечисления.пкВидыДоговоров.АрендаТехники Тогда            
				Источник.Товары.Очистить();
				
				Источник.пкОбъектСтроительства = ДанныеЗаполнения.ДокументОснование.пкОбъектСтроительства;
				
				ЗаполнитьПоСчету(Источник, ДанныеЗаполнения.ДокументОснование);
			КонецЕсли; 	
		КонецЕсли;		
		//-- Рарус Лимаренко 19.06.2018
	КонецЕсли;
	
КонецПроцедуры    

//Рарус Владимир Подрезов 22.12.2016
Процедура ОбработкаЗаполнения_ЗаказНаВнутреннееПотребление(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Источник.пкИнициатор = Пользователи.ТекущийПользователь();
	
КонецПроцедуры
//Рарус Владимир Подрезов Конец

//++Рарус IA 08.02.2017
Процедура ОбработкаЗаполнения_ОтборРазмещениеТоваров(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	попытка
	Источник.пкДокументОснование = ДанныеЗаполнения;
	исключение
	конецпопытки;
	
КонецПроцедуры
//--Рарус IA 08.02.2017

Процедура ЗаполнитьПоСчетуОстатки(Источник, ДокументОснование) Экспорт
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   ЗаказКлиентаТовары.Ссылка,
    |   ЗаказКлиентаТовары.Номенклатура,
    |   ЗаказКлиентаТовары.пкЗаявкаНаАрендуТехники,
    |   ЗаказКлиентаТовары.Упаковка,
    |   ЗаказКлиентаТовары.КоличествоУпаковок,
    |   ЗаказКлиентаТовары.Цена,
    |   ЗаказКлиентаТовары.пкВидТарифа,
    |   ЗаказКлиентаТовары.пкТехника,
    |   ЗаказКлиентаТовары.НомерСтроки,
    |   ПОДСТРОКА(ЗаказКлиентаТовары.пкПримечаниеДляПечати, 1, 250) КАК пкПримечаниеДляПечати,
    |   ЗаказКлиентаТовары.КодСтроки
    |ПОМЕСТИТЬ ВТ_ТоварыПоСчету
    |ИЗ
    |   Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
    |ГДЕ
    |   ЗаказКлиентаТовары.Ссылка = &ЗаказКлиента
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |   ДанныеНачалаАренды.Период КАК пкДатаНачалаАренды,
    |   ДанныеНачалаАренды.ЗаявкаНаАрендуТехники КАК пкЗаявкаНаАрендуТехники,
    |   ДанныеНачалаАренды.Модель КАК Номенклатура,
    |   ДОБАВИТЬКДАТЕ(ДанныеОкончанияАренды.Период, СЕКУНДА, -1) КАК пкДатаОкончанияАренды,
    |   ДанныеНачалаАренды.Техника КАК пкТехника,
    |   ДанныеНачалаАренды.НомерМодели,
    |   ДанныеНачалаАренды.ЗаказКлиента,
    |   СРЕДНЕЕ(ВТ_ТоварыПоСчету.Цена) КАК Цена,
    |   ВТ_ТоварыПоСчету.пкВидТарифа КАК пкВидТарифа,
    |   ВТ_ТоварыПоСчету.Упаковка,
    |   0 КАК КоличествоУпаковок,
    |   МАКСИМУМ(ВТ_ТоварыПоСчету.НомерСтроки) КАК НомерСтроки,
    |   ВТ_ТоварыПоСчету.пкПримечаниеДляПечати КАК пкПримечаниеДляПечати,
    |   МАКСИМУМ(ВТ_ТоварыПоСчету.КодСтроки) КАК КодСтроки
    |ИЗ
    |   РегистрСведений.пкСрокиАренды.СрезПоследних(
    |           ,
    |           ЗаказКлиента = &ЗаказКлиента
    |               И (ТипДокумента = ЗНАЧЕНИЕ(Перечисление.пкТипыДокументовДляСроковАренды.ЗаказКлиента)
    |                   ИЛИ ТипДокумента = ЗНАЧЕНИЕ(Перечисление.пкТипыДокументовДляСроковАренды.РеализацияТоваровУслуг))
    |               И НЕ ЭтоОкончаниеАренды) КАК ДанныеНачалаАренды
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкСрокиАренды.СрезПоследних(
    |               ,
    |               ЗаказКлиента = &ЗаказКлиента
    |                   И ЭтоОкончаниеАренды
    |                   И ТипДокумента = ЗНАЧЕНИЕ(Перечисление.пкТипыДокументовДляСроковАренды.ЗаказКлиента)) КАК ДанныеОкончанияАренды
    |       ПО ДанныеНачалаАренды.ЗаявкаНаАрендуТехники = ДанныеОкончанияАренды.ЗаявкаНаАрендуТехники
    |           И ДанныеНачалаАренды.Модель = ДанныеОкончанияАренды.Модель
    |           И ДанныеНачалаАренды.НомерМодели = ДанныеОкончанияАренды.НомерМодели
    |           И ДанныеНачалаАренды.ЗаказКлиента = ДанныеОкончанияАренды.ЗаказКлиента
    |       ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТоварыПоСчету КАК ВТ_ТоварыПоСчету
    |       ПО ДанныеНачалаАренды.Модель = ВТ_ТоварыПоСчету.Номенклатура
    |           И ДанныеНачалаАренды.ЗаявкаНаАрендуТехники = ВТ_ТоварыПоСчету.пкЗаявкаНаАрендуТехники
    |           И ДанныеНачалаАренды.Техника = ВТ_ТоварыПоСчету.пкТехника
    |           И ДанныеНачалаАренды.ЗаказКлиента = ВТ_ТоварыПоСчету.Ссылка
    |ГДЕ
    |   ДанныеНачалаАренды.Период < ДОБАВИТЬКДАТЕ(ДанныеОкончанияАренды.Период, СЕКУНДА, -1)
    |
    |СГРУППИРОВАТЬ ПО
    |   ДанныеНачалаАренды.Период,
    |   ДанныеНачалаАренды.ЗаявкаНаАрендуТехники,
    |   ДанныеНачалаАренды.Модель,
    |   ДОБАВИТЬКДАТЕ(ДанныеОкончанияАренды.Период, СЕКУНДА, -1),
    |   ДанныеНачалаАренды.Техника,
    |   ДанныеНачалаАренды.ЗаказКлиента,
    |   ДанныеНачалаАренды.НомерМодели,
    |   ВТ_ТоварыПоСчету.Упаковка,
    |   ВТ_ТоварыПоСчету.пкВидТарифа,
    |   ВТ_ТоварыПоСчету.пкПримечаниеДляПечати
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |   НЕОПРЕДЕЛЕНО,
    |   ВТ_ТоварыПоСчету.пкЗаявкаНаАрендуТехники,
    |   ВТ_ТоварыПоСчету.Номенклатура,
    |   НЕОПРЕДЕЛЕНО,
    |   ВТ_ТоварыПоСчету.пкТехника,
    |   0,
    |   ВТ_ТоварыПоСчету.Ссылка,
    |   ВТ_ТоварыПоСчету.Цена,
    |   ВТ_ТоварыПоСчету.пкВидТарифа,
    |   ВТ_ТоварыПоСчету.Упаковка,
    |   ВТ_ТоварыПоСчету.КоличествоУпаковок,
    |   ВТ_ТоварыПоСчету.НомерСтроки,
    |   ВТ_ТоварыПоСчету.пкПримечаниеДляПечати,
    |   ВТ_ТоварыПоСчету.КодСтроки
    |ИЗ
    |   ВТ_ТоварыПоСчету КАК ВТ_ТоварыПоСчету
    |ГДЕ
    |   НЕ ВТ_ТоварыПоСчету.Номенклатура.пкЭтоТехника
    |
    |УПОРЯДОЧИТЬ ПО
    |   НомерСтроки";
    
    Запрос.УстановитьПараметр("ЗаказКлиента", ДокументОснование);
    
    Выборка = Запрос.Выполнить().Выбрать();
    
    СтруктураДействий = Новый Структура();
    
    СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Источник);
    СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",   Источник.НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",  Новый Структура("НалогообложениеНДС, Дата", Источник.НалогообложениеНДС, Источник.Дата));
    СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
    СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
    СтруктураДействий.Вставить("ПересчитатьСумму");
    //СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Источник));
    
    СтруктураПолейТЧ = Новый Структура;
    СтруктураПолейТЧ.Вставить("Номенклатура");
    СтруктураПолейТЧ.Вставить("Характеристика");
    СтруктураПолейТЧ.Вставить("ВидЦены");
    СтруктураПолейТЧ.Вставить("Упаковка");
    СтруктураПолейТЧ.Вставить("Цена");
    СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
    СтруктураПолейТЧ.Вставить("Количество", 0);
    СтруктураПолейТЧ.Вставить("пкЗаявкаНаАрендуТехники");
    СтруктураПолейТЧ.Вставить("пкТехника");
    СтруктураПолейТЧ.Вставить("пкВидТарифа");
    СтруктураПолейТЧ.Вставить("Сумма"    , 0);
    СтруктураПолейТЧ.Вставить("СтавкаНДС", 0);
    СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
    СтруктураПолейТЧ.Вставить("СуммаСНДС", 0);
    
    Пока Выборка.Следующий() Цикл
        Если Выборка.КоличествоУпаковок = 0 Тогда
            КоличествоУпаковок = (Выборка.пкДатаОкончанияАренды + 1 - НачалоДня(Выборка.пкДатаНачалаАренды)) / (3600 * 24);
        Иначе
            КоличествоУпаковок = Выборка.КоличествоУпаковок;    
        КонецЕсли;    
        
        Если КоличествоУпаковок > 0 Тогда
            НоваяСтрока = Источник.Товары.Добавить();
            
            ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
            
            НоваяСтрока.КоличествоУпаковок = КоличествоУпаковок;
            
            ЗаполнитьЗначенияСвойств(СтруктураПолейТЧ, НоваяСтрока);
            
            ОбработкаТабличнойЧастиВызовСервера.ОбработатьСтрокуТЧ(СтруктураПолейТЧ, СтруктураДействий, Неопределено);
            
            ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПолейТЧ);
        КонецЕсли;
    КонецЦикла;   
    
КонецПроцедуры    

Процедура ЗаполнитьПоСчету(Источник, ДокументОснование) Экспорт
    
    Для Каждого Строка ИЗ ДокументОснование.Товары Цикл
        НоваяСтрока = Источник.Товары.Добавить();
        
        ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		Если ТипЗнч(НоваяСтрока) = Тип("ДанныеФормыЭлементКоллекции") Тогда
					НоваяСтрока.СуммаСНДСБезВозвратнойТары = НоваяСтрока.СуммаСНДС;
					НоваяСтрока.СуммаНДСБезВозвратнойТары  = НоваяСтрока.СуммаНДС;
					НоваяСтрока.СуммаВзаиморасчетов		   = НоваяСтрока.СуммаСНДС;
		КонецЕсли;
	
        НоваяСтрока.ЗаказКлиента = ДокументОснование;
    КонецЦикла;    
    
КонецПроцедуры    

//Рарус Владимир Подрезов 15.03.2017
Процедура ОбработкаЗаполнения_ВнутреннееПотреблениеТоваров(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		Источник.пкПоступлениеТоваровУслуг = ДанныеЗаполнения;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") 
				И ДанныеЗаполнения.Свойство("ДокументОснование")
				И ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
	Тогда
		Источник.пкПоступлениеТоваровУслуг = ДанныеЗаполнения.ДокументОснование;
	КонецЕсли;
	
КонецПроцедуры
//Рарус Владимир Подрезов Конец
	
//Рарус Владимир Подрезов 16.03.2017
Процедура ОбработкаЗаполнения_ОбъектыЭксплуатации(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Источник.ДатаСведений) Тогда
		Источник.ДатаСведений = ТекущаяДатаСеанса();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения_СписаниеБезналичныхДенежныхСредств(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		Источник.пкКурсДокумента	= ДанныеЗаполнения.пкКурсДокумента;
		Источник.пкДатаКурса		= ДанныеЗаполнения.пкДатаКурса;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") 
				И ДанныеЗаполнения.Свойство("ДокументОснование")
				И ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств")
	Тогда
		Источник.пкКурсДокумента	= ДанныеЗаполнения.ДокументОснование.пкКурсДокумента;
		Источник.пкДатаКурса		= ДанныеЗаполнения.ДокументОснование.пкДатаКурса;
	КонецЕсли;
	
КонецПроцедуры
//Рарус Владимир Подрезов Конец
	
//Рарус Владимир Подрезов 04.04.2017
Процедура ОбработкаЗаполнения_ЗаписьКнигиПокупок(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		Для Каждого текСтрока Из ДанныеЗаполнения.ПрочиеРасходы Цикл
			Если текСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				Продолжить;
			КонецЕсли;
			Если текСтрока.Отменено Тогда
				Продолжить;
			КонецЕсли;
			
			Источник.ПредъявленСчетФактура	= Истина;
			Источник.ДатаПолучения			= текСтрока.ДатаВходящегоДокумента;
			Источник.ДатаСчетаФактуры		= текСтрока.ДатаВходящегоДокумента;
			Источник.НомерСчетаФактуры		= текСтрока.НомерВходящегоДокумента;
			
		КонецЦикла;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") 
				И ДанныеЗаполнения.Свойство("ДокументОснование")
				И ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет")
	Тогда
		Для Каждого текСтрока Из ДанныеЗаполнения.ДокументОснование.ПрочиеРасходы Цикл
			Если текСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				Продолжить;
			КонецЕсли;
			Если текСтрока.Отменено Тогда
				Продолжить;
			КонецЕсли;
			
			Источник.ПредъявленСчетФактура	= Истина;
			Источник.ДатаПолучения			= текСтрока.ДатаВходящегоДокумента;
			Источник.ДатаСчетаФактуры		= текСтрока.ДатаВходящегоДокумента;
			Источник.НомерСчетаФактуры		= текСтрока.НомерВходящегоДокумента;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 02.06.2017
Процедура ОбработкаЗаполнения_ЗаявкаНаРасходованиеДенежныхСредств(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
КонецПроцедуры
//Рарус Владимир Подрезов Конец

Процедура ОбработкаЗаполнения_ПриобретениеТоваровУслуг(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)

	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.пкЗаявкаНаРемонтЗапчасти") Тогда	
		ЗаполнитьЗначенияСвойств(Источник,ДанныеЗаполнения,,"Дата,Номер,Автор");
		Для каждого Стр Из ДанныеЗаполнения.Товары Цикл
			СтрТовары = Источник.Товары.Добавить();
		    ЗаполнитьЗначенияСвойств(СтрТовары,Стр);
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры

	
	///////////////////////////////////////////////////////////////////////////////////////////////
// Дополнительные процедуры события ОбработкаПроверкиЗаполнения Справочников и Документов

Процедура ОбработкаПроверкиЗаполнения_ДоговорыКонтрагентов(Источник, Отказ, ПроверяемыеРеквизиты)
    
    НепроверяемыеРеквизиты = Новый Массив;
    
    НепроверяемыеРеквизиты.Добавить("Наименование");
    
    ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
        
КонецПроцедуры    

Процедура ОбработкаПроверкиЗаполнения_ОбъектыЭксплуатации(Источник, Отказ, ПроверяемыеРеквизиты) 
    
    Если Источник.пкЭтоТехника Тогда
        
        НепроверяемыеРеквизиты = Новый Массив;
        
        НепроверяемыеРеквизиты.Добавить("Наименование");
        НепроверяемыеРеквизиты.Добавить("ДатаСведений");
        
        ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);

    КонецЕсли;
    
КонецПроцедуры    

//Рарус Владимир Подрезов Закупки 2.6.3 12.08.2016
Процедура ОбработкаПроверкиЗаполнения_ЗаказНаВнутреннееПотребление(Источник, Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("пкАдресДоставки");
	Иначе
		
		Если Не Источник.пкОсобыеУсловияПеревозки Тогда
			МассивНепроверяемыхРеквизитов.Добавить("пкОсобыеУсловияПеревозкиОписание");
		КонецЕсли;
		
		// Доставка не требуется
		Если Источник.пкСпособДоставки = Перечисления.СпособыДоставки.Самовывоз Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("пкПеревозчикПартнер");
			МассивНепроверяемыхРеквизитов.Добавить("пкАдресДоставки");
			МассивНепроверяемыхРеквизитов.Добавить("пкАдресДоставкиПеревозчика");
			
		// Доставка от нас
		
		ИначеЕсли Источник.пкСпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчика Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("пкАдресДоставкиПеревозчика");
			
		ИначеЕсли Источник.пкСпособДоставки = Перечисления.СпособыДоставки.ДоКлиента
			Или Источник.пкСпособДоставки = Перечисления.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки
			
		// Доставка к нам
		
			Или Источник.пкСпособДоставки = Перечисления.СпособыДоставки.НашимиСиламиСАдресаОтправителя
			Или Источник.пкСпособДоставки = Перечисления.СпособыДоставки.ОтОтправителяОпределяетСлужбаДоставки Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("пкПеревозчикПартнер");
			МассивНепроверяемыхРеквизитов.Добавить("пкАдресДоставкиПеревозчика");
			
		ИначеЕсли Источник.пкСпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада Тогда

			МассивНепроверяемыхРеквизитов.Добавить("пкАдресДоставки");
			МассивНепроверяемыхРеквизитов.Добавить("пкАдресДоставкиПеревозчика");
			
		ИначеЕсли Источник.пкСпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("пкАдресДоставки");
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры
//Рарус Владимир Подрезов Конец  

///////////////////////////////////////////////////////////////////////////////////////////////
// Дополнительные процедуры события ПередЗаписью Документов

//Рарус Владимир Подрезов Закупки 2.4.3 12.08.2016
Процедура ПередЗаписью_ЗаказНаВнутреннееПотребление(тИсточник, тОтказ, тРежимЗаписи, тРежимПроведения)
	
	тИсточник.СуммаДокумента = 0;
	Для Каждого текСтрока Из тИсточник.Товары Цикл
		тИсточник.СуммаДокумента = тИсточник.СуммаДокумента + текСтрока.пкСуммаСНДС;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(тИсточник.пкДоговор) Тогда
		тИсточник.ИДДоговора = тИсточник.пкДоговор.УникальныйИдентификатор();
	Иначе
		тИсточник.ИДДоговора = "";
	КонецЕсли;
	
КонецПроцедуры
//Рарус Владимир Подрезов Конец

Процедура ПередЗаписью_ЗаказКлиента(Источник, Отказ, РежимЗаписи, РежимПроведения)
    
    //+++rarus-spb_zlov 27.04.2017    
    Если РежимЗаписи = РежимЗаписиДокумента.Проведение И Источник.Проведен И Источник.пкЗакрыт И НЕ Отказ Тогда
        Сообщить("Счет закрыт, перед его изменением необходимо отменить проведение"); 
        Отказ = Истина;
    КонецЕсли;    
    //---rarus-spb_zlov 27.04.2017 
    
//Рарус Владимир Подрезов 29.05.2017
//    ЭтоСчетСервиса = Ложь;
    ЭтоСчетСервиса = ЗначениеЗаполнено(Источник.пкЗаказНаряд);
//Рарус Владимир Подрезов Конец
    РемонтАрендованногоОборудования = Константы.пкРемонтАрендованногоОборудования.Получить();
    
    Для Каждого Строка ИЗ Источник.Товары Цикл
//Рарус Владимир Подрезов 29.05.2017
//        Если НЕ ЭтоСчетСервиса И Строка.Номенклатура = РемонтАрендованногоОборудования Тогда
		Если НЕ ЭтоСчетСервиса 
			И (Строка.Номенклатура = РемонтАрендованногоОборудования 
				ИЛИ ЗначениеЗаполнено(Строка.пкЗаказНаряд))
		Тогда
//Рарус Владимир Подрезов Конец
            ЭтоСчетСервиса = Истина;
        КонецЕсли;   
        
        Если Строка.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.Отгрузить Тогда
            ВидНоменклатуры = Строка.Номенклатура.ВидНоменклатуры;
            
            Если ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
                Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
            КонецЕсли;
        КонецЕсли;  
//Рарус Владимир Подрезов - не проверяем Строку услуги сервиса
        Если Строка.Номенклатура = РемонтАрендованногоОборудования Тогда
			Продолжить;
        КонецЕсли;   
//Рарус Владимир Подрезов Конец
        Если НЕ ЗначениеЗаполнено(Строка.пкЗаявкаНаАрендуТехники) И Строка.Номенклатура.пкЭтоТехника Тогда
            Сообщить("В строке " + Строка.НомерСтроки + " не заполнена заявка на аренду техники");    
        КонецЕсли; 
        
        Если Строка.Номенклатура <> Строка.пкТехника.пкМодель И ЗначениеЗаполнено(Строка.пкТехника) Тогда
            Сообщить("В строке " + Строка.НомерСтроки + " указана техника не соответствующая модели"); 
            //Отказ = Истина;
        КонецЕсли;    
    КонецЦикла;
    
    Источник.пкЭтоСчетСервиса = ЭтоСчетСервиса;
    
    Если Источник.Статус <> Перечисления.СтатусыЗаказовКлиентов.КОтгрузке Тогда
        Источник.Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке;    
    КонецЕсли;  
//Рарус Владимир Подрезов 15.08.2017 RS00-0000000000000005050
//Устанавливаем статус отгрузки в виде варианта обеспечения в строках
	Для Каждого текСтрока Из Источник.Товары Цикл
		Если текСтрока.Отменено Тогда
			Продолжить;
		КонецЕсли;
//Рарус Владимир Подрезов 19.09.2017 RS00-0000000000000005754
		Если ЭтоСчетСервиса Тогда
			Если Источник.пкЗаказНаряд.Статус = Перечисления.пкСтатусыЗаказНарядов.Закрыт И текСтрока.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.Отгрузить Тогда
				текСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
			ИначеЕсли Источник.пкЗаказНаряд.Статус <> Перечисления.пкСтатусыЗаказНарядов.Закрыт И текСтрока.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
				Если Не ЗначениеЗаполнено(текСтрока.ВариантОбеспечения) Тогда
					текСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется;
				КонецЕсли;
			КонецЕсли;
		Иначе
//Рарус Владимир Подрезов Конец
			Если текСтрока.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.Отгрузить Тогда
				текСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
			КонецЕсли;
//Рарус Владимир Подрезов 19.09.2017 RS00-0000000000000005754
		КонецЕсли;
//Рарус Владимир Подрезов Конец
	КонецЦикла;
//Рарус Владимир Подрезов Конец
    
    Если НачалоДня(Источник.ДатаОтгрузки) <> НачалоДня(Источник.Дата) Тогда
        Источник.ДатаОтгрузки = Источник.Дата;     
    КонецЕсли;    
    
//Рарус Владимир Подрезов 09.10.2017
	Если Источник.пкЭтоСчетСервиса Тогда
        Источник.пкДатаНачалаАренды		= '00010101';    
        Источник.пкДатаОкончанияАренды	= '00010101';    
	Иначе
//Рарус Владимир Подрезов Конец
	Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   МИНИМУМ(ВЫБОР
    |           КОГДА ЗаказКлиентаТовары.пкДатаНачалаАренды = &ПустаяДата
    |               ТОГДА &Дата
    |           ИНАЧЕ ЗаказКлиентаТовары.пкДатаНачалаАренды
    |       КОНЕЦ) КАК пкДатаНачалаАренды,
    |   МАКСИМУМ(ЗаказКлиентаТовары.пкДатаОкончанияАренды) КАК пкДатаОкончанияАренды
    |ИЗ
    |   Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
    |ГДЕ
//Рарус Владимир Подрезов 04.10.2017 5525
//    |   ЗаказКлиентаТовары.Ссылка = &Ссылка";
    |   ЗаказКлиентаТовары.Ссылка = &Ссылка
    |   И ЗаказКлиентаТовары.Номенклатура.пкЭтоТехника";
//Рарус Владимир Подрезов Конец
    
    Запрос.УстановитьПараметр("Дата",       КонецГода(ТекущаяДата()));
    Запрос.УстановитьПараметр("ПустаяДата", '00010101');
    Запрос.УстановитьПараметр("Ссылка",     Источник.Ссылка);
    
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Если Выборка.Следующий() Тогда
        Источник.пкДатаНачалаАренды    = Выборка.пкДатаНачалаАренды;    
        Источник.пкДатаОкончанияАренды = Выборка.пкДатаОкончанияАренды;    
	КонецЕсли;
//Рарус Владимир Подрезов 09.10.2017
    КонецЕсли;
//Рарус Владимир Подрезов Конец
КонецПроцедуры    

Процедура ПередЗаписью_ЗаявкаНаРасходованиеДенежныхСредств(Источник, Отказ, РежимЗаписи, РежимПроведения)
	
	Источник.пкСуммаБезНДС = Источник.РасшифровкаПлатежа.Итог("Сумма") - Источник.РасшифровкаПлатежа.Итог("СуммаНДС");
	
//++ Рарус Лимаренко 16.05.2018 Заявка №11909
	Если НЕ Источник.Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.Заказ КАК Справочник.ДоговорыКонтрагентов) КАК Заказ
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа
		|ГДЕ
		|	ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.Ссылка = &Ссылка
		|	И ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.Заказ ССЫЛКА Справочник.ДоговорыКонтрагентов
		|	И ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.Заказ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Закрыт)";
		
		Запрос.УстановитьПараметр("Ссылка",Источник.Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда	
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Сообщение = "Проведение Невозможно! В заявке есть договор(а) со статусом Закрыт:";
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Сообщение = Сообщение + " "+ Строка(ВыборкаДетальныеЗаписи.Заказ);
			КонецЦикла;
			Сообщить(Сообщение);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
//-- Рарус Лимаренко 16.05.2018 Заявка №11909
		
КонецПроцедуры   

Процедура ПередЗаписью_ПоступлениеБезналичныхДенежныхСредств(Источник, Отказ, РежимЗаписи, РежимПроведения)
    
    Если Источник.РасшифровкаПлатежа.Количество() > 0 Тогда
        Заказ = Источник.РасшифровкаПлатежа[0].Заказ; 
        
        Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
            Источник.пкПодразделениеСчета = Заказ.Подразделение;        
        КонецЕсли;    
	КонецЕсли;
	
	//++ Рарус Лимаренко 28.12.2017
	Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
		Источник.Дата = НачалоДня(Источник.Дата);
	КонецЕсли;
	//-- Рарус Лимаренко 28.12.2017
		
    
КонецПроцедуры    

//Рарус Владимир Подрезов 15.08.2017 RS00-0000000000000004385
Процедура ПередЗаписью_РеализацияТоваровУслуг(Источник, Отказ, РежимЗаписи, РежимПроведения)
	
	МенеджерЗаказа = "";
	
	Если ЗначениеЗаполнено(Источник.ЗаказКлиента) И ЗначениеЗаполнено(Источник.ЗаказКлиента.Менеджер) Тогда
		МенеджерЗаказа = Источник.ЗаказКлиента.Менеджер;
	КонецЕсли;
	
	Для Каждого текСтрока Из Источник.Товары Цикл
		Если ЗначениеЗаполнено(текСтрока.ЗаказКлиента) И ЗначениеЗаполнено(текСтрока.ЗаказКлиента.Менеджер) И Не ЗначениеЗаполнено(МенеджерЗаказа) Тогда
			МенеджерЗаказа = текСтрока.ЗаказКлиента.Менеджер;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(МенеджерЗаказа) И Источник.Менеджер <> МенеджерЗаказа Тогда
		Источник.Менеджер = МенеджерЗаказа;
	КонецЕсли;
    
КонецПроцедуры    
//Рарус Владимир Подрезов Конец

Процедура ПередЗаписью_ЗаказНаРемонт(Источник, Отказ, РежимЗаписи, РежимПроведения)
	
	Если Не ЗначениеЗаполнено(Источник.ОбщийВидРемонта)  Тогда
				Если Источник.Ремонты.Количество() > 0 Тогда
				     Источник.ОбщийВидРемонта = Источник.Ремонты[0].ВидРемонта.ОбщийВидРемонта;				
				КонецЕсли;	
	КонецЕсли;
		
КонецПроцедуры  

//++ Рарус IA 13.09.2016
Процедура ИнициироватьПроверкуСудебныхИсков() Экспорт
	Обработка_пкСозданиеПроверкиИсков=Обработки.пкСозданиеПроверкиИсков.Создать();
	Обработка_пкСозданиеПроверкиИсков.НайтиИскиДляПроверки();	
	Обработка_пкСозданиеПроверкиИсков.СоздатьЗадачиПроверки();
КонецПроцедуры
//-- Рарус IA 13.09.2016

//++ Рарус IA 21.09.2016
Процедура ОбработкаПроведения_СписанияПередачиОС(Источник, Отказ, РежимПроведения) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//Проверим наличия списания и задач 
	МассивОС=Источник.ОС.ВыгрузитьКолонку("ОсновноеСредство");	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВложенныйЗапрос.ОсновноеСредство,
	               |	ВложенныйЗапрос.Ссылка,
	               |	ВложенныйЗапрос.Организация,
	               |	пкПостановкаНаУчетВРостехнадзореСрезПоследних.ПостановкаНаУчет,
	               |	ЗадачаИсполнителя.Ссылка КАК Ссылка1
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		СписаниеОСОС.ОсновноеСредство КАК ОсновноеСредство,
	               |		СписаниеОСОС.Ссылка КАК Ссылка,
	               |		СписаниеОСОС.Ссылка.Организация КАК Организация
	               |	ИЗ
	               |		Документ.СписаниеОС.ОС КАК СписаниеОСОС
	               |	ГДЕ
	               |		СписаниеОСОС.Ссылка = &Ссылка
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ПодготовкаКПередачеОСОС.ОсновноеСредство,
	               |		ПодготовкаКПередачеОСОС.Ссылка,
	               |		ПодготовкаКПередачеОСОС.Ссылка.Организация
	               |	ИЗ
	               |		Документ.ПодготовкаКПередачеОС.ОС КАК ПодготовкаКПередачеОСОС
	               |	ГДЕ
	               |		ПодготовкаКПередачеОСОС.Ссылка = &Ссылка) КАК ВложенныйЗапрос
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	               |		ПО ВложенныйЗапрос.Ссылка = ЗадачаИсполнителя.Предмет
	               |			И (ЛОЖЬ = ЗадачаИсполнителя.Выполнена)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкПостановкаНаУчетВРостехнадзоре.СрезПоследних КАК пкПостановкаНаУчетВРостехнадзореСрезПоследних
	               |		ПО ВложенныйЗапрос.ОсновноеСредство = пкПостановкаНаУчетВРостехнадзореСрезПоследних.ОсновноеСредство
	               |			И ВложенныйЗапрос.Организация = пкПостановкаНаУчетВРостехнадзореСрезПоследних.Организация
	               |ГДЕ
	               |	не ЗадачаИсполнителя.Ссылка ЕСТЬ NULL 
	               |	Или не (пкПостановкаНаУчетВРостехнадзореСрезПоследних.ПостановкаНаУчет ЕСТЬ NULL 
	               |			ИЛИ пкПостановкаНаУчетВРостехнадзореСрезПоследних.ПостановкаНаУчет = ЛОЖЬ)";
	
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Если не Результат.Пустой() Тогда
		
		НачТекДата=НачалоДня(ТекущаяДата());
		СрокИсполнения=НачалоДня(ТекущаяДата())+5*24*60*60;
		СрокПроверки=СрокИсполнения+5*24*60*60;
		Исполнитель=Справочники.РолиИсполнителей.НайтиПоНаименованию("Инженеры");
		Если Не ЗначениеЗаполнено(Исполнитель) Тогда
		Исполнитель=Справочники.РолиИсполнителей.НайтиПоНаименованию("Инженер");
		КонецЕсли; 
		Проверяющий=Неопределено;
		
		БПСогласования=БизнесПроцессы.Задание.СоздатьБизнесПроцесс();
	    БПСогласования.Заполнить(Источник.Ссылка);
		БПСогласования.СрокИсполнения=СрокИсполнения;
		
		Если ЗначениеЗаполнено(Исполнитель) Тогда
		БПСогласования.Исполнитель=Исполнитель;
		КонецЕсли;
		Если не ЗначениеЗаполнено(БПСогласования.Исполнитель) Тогда
		БПСогласования.Исполнитель=Источник.Ответственный;	
		КонецЕсли;
		Если не ЗначениеЗаполнено(БПСогласования.Исполнитель) Тогда
		БПСогласования.Исполнитель=Пользователи.АвторизованныйПользователь();	
		КонецЕсли;
		Если ЗначениеЗаполнено(Проверяющий) Тогда
			БПСогласования.НаПроверке=Истина;
			БПСогласования.Проверяющий=Проверяющий;
			БПСогласования.СрокПроверки=СрокПроверки;
		Иначе	
			БПСогласования.НаПроверке=Ложь;
			//БПСогласования.Проверяющий=Неопределено;
			//БПСогласования.СрокПроверки=Неопределено;
		КонецЕсли;
		БПСогласования.Содержание="Проверить на снятие ОС с учета в Ростехнадзоре "+Строка(Источник.Ссылка);
		БПСогласования.Наименование="Проверить на снятие ОС с учета в Ростехнадзоре "+Строка(Источник.Ссылка);
		БПСогласования.Дата=НачТекДата;
		БПСогласования.Записать();
		БПСогласования.Старт();
	КонецЕсли;
	 
	
КонецПроцедуры

Процедура пкПриЗаписиРC_ТоварныеОграниченияПриЗаписи(Источник, Отказ, Замещение) Экспорт
	ОбработкаАРМ=Обработки.пкАРМСклад.Создать();
	ОбработкаАРМ.СинхронизируемТоварныеОграничения();
КонецПроцедуры
//-- Рарус IA 21.09.2016

//Рарус Владимир Подрезов 24.03.2017
Процедура пкКонтрольДанныхПереданныхИзДО() Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюС1СДокументооборот") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотИмяПользователя	= Константы.ИнтеграцияС1СДокументооборотИмяПользователяДляОбмена.Получить();
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотПароль			= Константы.ИнтеграцияС1СДокументооборотПарольДляОбмена.Получить();
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотПарольИзвестен	= Истина;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаОкончания	= ТекущаяДата();
	ДатаНачала		= ДатаОкончания - Константы.пкГлубинаКонтроляДанныхИзДО.Получить()*60*60*24;
	
	//1. Проверим статусы Заявок на расходование денежных средств
	ЗапросД = Новый Запрос;
	ЗапросД.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаНаРасходованиеДенежныхСредств.Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
	|ГДЕ
	|	ЗаявкаНаРасходованиеДенежныхСредств.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ЗаявкаНаРасходованиеДенежныхСредств.Проведен
	|	И НЕ ЗаявкаНаРасходованиеДенежныхСредств.ПометкаУдаления
	|	И ЗаявкаНаРасходованиеДенежныхСредств.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована)";
	ЗапросД.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачала));
	ЗапросД.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));
	
	РезЗапроса = ЗапросД.Выполнить().Выбрать();
	Пока РезЗапроса.Следующий() Цикл
		
		Правила = ИнтеграцияС1СДокументооборотВызовСервера.ПодходящиеПравила(РезЗапроса.Ссылка);
		Если Правила.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Правило = Правила[0];

		ОбъектДОИлиСообщение = пкДанныеОбъектаДОПоВнешнемуОбъекту(РезЗапроса.Ссылка);
		Если ОбъектДОИлиСообщение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
				
		Если ТипЗнч(ОбъектДОИлиСообщение) = Тип("Строка") Тогда // Сообщение об ошибке
			Продолжить;
		КонецЕсли;
		
		Если ОбъектДОИлиСообщение.statusApproval <> "Согласован" Тогда //Еще не согласовано в ДО
			Продолжить;
		КонецЕсли;
		
		тОбъект = РезЗапроса.Ссылка.ПолучитьОбъект();
		тОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате;
		//тОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			тОбъект.Записать(?(тОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись), РежимПроведенияДокумента.Неоперативный);
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось провести %1.'"), тОбъект.Ссылка);
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка
				,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
	//2. Проверим Отметку прикрепления файлов
	ЗапросД = Новый Запрос;
	ЗапросД.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаНаРасходованиеДенежныхСредств.Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
	|ГДЕ
	|	ЗаявкаНаРасходованиеДенежныхСредств.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ЗаявкаНаРасходованиеДенежныхСредств.Проведен
	|	И НЕ ЗаявкаНаРасходованиеДенежныхСредств.ПометкаУдаления
	|	И ЗаявкаНаРасходованиеДенежныхСредств.пкПрикрепленыФайлыВДО = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	пкЗаявкаНаАрендуТехники.Ссылка
	|ИЗ
	|	Документ.пкЗаявкаНаАрендуТехники КАК пкЗаявкаНаАрендуТехники
	|ГДЕ
	|	пкЗаявкаНаАрендуТехники.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И пкЗаявкаНаАрендуТехники.Проведен
	|	И НЕ пкЗаявкаНаАрендуТехники.ПометкаУдаления
	|	И пкЗаявкаНаАрендуТехники.пкПрикрепленыФайлыВДО = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	пкЗаданиеНаРемонт.Ссылка
	|ИЗ
	|	Документ.пкЗаданиеНаРемонт КАК пкЗаданиеНаРемонт
	|ГДЕ
	|	пкЗаданиеНаРемонт.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И пкЗаданиеНаРемонт.Проведен
	|	И НЕ пкЗаданиеНаРемонт.ПометкаУдаления
	|	И пкЗаданиеНаРемонт.пкПрикрепленыФайлыВДО = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	пкАктПриемкиВозврата.Ссылка
	|ИЗ
	|	Документ.пкАктПриемкиВозврата КАК пкАктПриемкиВозврата
	|ГДЕ
	|	пкАктПриемкиВозврата.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И пкАктПриемкиВозврата.Проведен
	|	И НЕ пкАктПриемкиВозврата.ПометкаУдаления
	|	И пкАктПриемкиВозврата.пкПрикрепленыФайлыВДО = 0";
	ЗапросД.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачала));
	ЗапросД.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));
	
	РезЗапроса = ЗапросД.Выполнить().Выбрать();
	Пока РезЗапроса.Следующий() Цикл
		
		Правила = ИнтеграцияС1СДокументооборотВызовСервера.ПодходящиеПравила(РезЗапроса.Ссылка);
		Если Правила.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Правило = Правила[0];

		ОбъектДОИлиСообщение = пкДанныеОбъектаДОПоВнешнемуОбъекту(РезЗапроса.Ссылка);
		Если ОбъектДОИлиСообщение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
				
		Если ТипЗнч(ОбъектДОИлиСообщение) = Тип("Строка") Тогда // Сообщение об ошибке
			Продолжить;
		КонецЕсли;
		
		Если СтрНайти(ОбъектДОИлиСообщение.comment, "#Прикреплены файлы") = 0 Тогда //Еще нет файлов
			Продолжить;
		КонецЕсли;
		
		тОбъект = РезЗапроса.Ссылка.ПолучитьОбъект();
		тОбъект.пкПрикрепленыФайлыВДО = 1;
		тОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			//тОбъект.Записать(?(тОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись), РежимПроведенияДокумента.Неоперативный);
			тОбъект.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось провести %1.'"), тОбъект.Ссылка);
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка
				,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция пкДанныеОбъектаДОПоВнешнемуОбъекту(СсылкаНаВнешнийОбъект) Экспорт
	
	Если ЗначениеЗаполнено(СсылкаНаВнешнийОбъект) Тогда
		Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
		ВнешнийОбъект = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "ExternalObject");
		ВнешнийОбъект.id = Строка(СсылкаНаВнешнийОбъект.УникальныйИдентификатор());
		ВнешнийОбъект.type = СсылкаНаВнешнийОбъект.Метаданные().ПолноеИмя();
		ВнешнийОбъект.name = Строка(СсылкаНаВнешнийОбъект);
	
		Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetDocumentListRequest");
		Запрос.externalObjects.Добавить(ВнешнийОбъект);

		Запрос.columnSet.Добавить("name"); 
		Запрос.columnSet.Добавить("documentType"); 
		Запрос.columnSet.Добавить("statusApproval"); 
		Запрос.columnSet.Добавить("comment"); 

		Результат = Прокси.execute(Запрос);
		ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);

		Если Результат.documents.Количество() > 0 Тогда 
			Объект = Результат.documents[0];
			ДанныеВозврата = Новый Структура();
			ДанныеВозврата.Вставить("id", Объект.objectId.id);
			ДанныеВозврата.Вставить("type", Объект.objectId.type);
			ДанныеВозврата.Вставить("name", Объект.name);
			Если ДанныеВозврата.type = "DMInternalDocument" 
			 Или ДанныеВозврата.type = "DMIncomingDocument" 
			 Или ДанныеВозврата.type = "DMOutgoingDocument" Тогда 
				ТипДокумента = новый Структура("id,type,name", Объект.documentType.objectID.id, Объект.documentType.objectID.type,Объект.documentType.name);
				ДанныеВозврата.Вставить("documentType",ТипДокумента);
				Если Объект.statusApproval <> Неопределено Тогда
					ДанныеВозврата.Вставить("statusApproval", Объект.statusApproval.name);
				Иначе
					ДанныеВозврата.Вставить("statusApproval", "");
				КонецЕсли;
				ДанныеВозврата.Вставить("comment",Объект.comment);
			КонецЕсли;
				
			Возврат ДанныеВозврата;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

//Рарус Владимир Подрезов Конец

//rarus+ saveld 03.11.2016	
Процедура СоздатьДокументВБазеДО(Документ)

	Если НЕ ИнтеграцияС1СДокументооборотВызовСервера.ПарольИзвестен() Тогда
		Возврат;
	КонецЕсли;	
		
	Таймаут = Неопределено;
	ВерсияСервиса = ИнтеграцияС1СДокументооборот.ВерсияСервиса();
	
	Продолжаем = Ложь;
	
	Если ВерсияСервиса = "" Тогда // версия неизвестна, в процессе получения
			
		ДатаВремяВызова = ТекущаяДата();
		Пока ВерсияСервиса = "" и ТекущаяДата() - ДатаВремяВызова < Таймаут Цикл
			ВерсияСервиса = ИнтеграцияС1СДокументооборот.ВерсияСервиса();
		КонецЦикла;
				
		Если ВерсияСервиса <> "" И ВерсияСервиса <> "0.0.0.0" Тогда // версия получена
			Продолжаем = Истина;
		КонецЕсли;
				
	ИначеЕсли ВерсияСервиса <> "0.0.0.0" Тогда // версия получена
		Продолжаем = Истина;
		
	КонецЕсли;

	Если Продолжаем Тогда
	
		Отказ = Ложь;
		ДокументID = Неопределено;
		ПолучитьДанныеДокумента(Документ, ДокументID, Отказ);
	
		Если ЗначениеЗаполнено(ДокументID) ИЛИ Отказ Тогда 
			Возврат;
		КонецЕсли;
	
		ДополнительныеПараметры = Новый Структура;
	
		ОбъектИС = Документ;
	
		Параметры = Новый Структура;
		Параметры.Вставить("ОбъектИС", ОбъектИС);
	
		Правила = ИнтеграцияС1СДокументооборотВызовСервера.ПодходящиеПравила(ОбъектИС);
	
		Если Правила.Количество() = 1 Тогда
		
			Правило = Правила[0];
	
			ОбъектДОИлиСообщение = ИнтеграцияС1СДокументооборотВызовСервера.СоздатьОбъектДОПоПравилу(
				Параметры.ОбъектИС,
				Правило.Ссылка);
				
			Если ТипЗнч(ОбъектДОИлиСообщение) <> Тип("Строка") Тогда // Не сообщение об ошибке
				Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();

				// Возможно, созданному объекту нужно присвоить штрихкод.
				ШтрихкодВнешнегоОбъекта = ИнтеграцияС1СДокументооборотПереопределяемый.ШтрихкодДокумента(Документ);
				Если ЗначениеЗаполнено(ШтрихкодВнешнегоОбъекта) 
					и ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.4.3.1.CORP") Тогда
			
					Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMRetrieveBarcodesRequest");
				
					Запрос.objectId = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectID");
					Запрос.objectId.id = ОбъектДОИлиСообщение.id; 
					Запрос.objectId.type = ОбъектДОИлиСообщение.type;
			
					Результат = Прокси.execute(Запрос);
					ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);
			
					Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMUpdateBarcodesRequest");
			
					Запрос.objectBarcodes = Результат.objectBarcodes;
				
					Штрихкод = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMBarcode");
					Штрихкод.internal = Ложь;
					Штрихкод.barcodeData = ШтрихкодВнешнегоОбъекта;
					Запрос.objectBarcodes.barcodes.Добавить(Штрихкод);
					
//rarus+ saveld 18.11.2016					
					ДобавитьШтрихкодыEAN13(Документ, Прокси, Запрос);
//rarus- saveld 18.11.2016					

					Результат = Прокси.execute(Запрос);
					ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);
			
				КонецЕсли;
        	КонецЕсли;
				
			Если ТипЗнч(ОбъектДОИлиСообщение) = Тип("Строка") Тогда // сообщение об ошибке
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Рарус Владимир Подрезов 07.12.2016
Функция СоздатьДокументВБазеДОВФоновомЗадании(Документ)

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюС1СДокументооборот") Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотИмяПользователя	= Константы.ИнтеграцияС1СДокументооборотИмяПользователяДляОбмена.Получить();
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотПароль			= Константы.ИнтеграцияС1СДокументооборотПарольДляОбмена.Получить();
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотПарольИзвестен	= Истина;
	
	Правила = ИнтеграцияС1СДокументооборотВызовСервера.ПодходящиеПравила(Документ);
	Если Правила.Количество() > 0 Тогда
	
		Правило = Правила[0];

		ОбъектДОИлиСообщение = ИнтеграцияС1СДокументооборотВызовСервера.ДанныеОбъектаДОПоВнешнемуОбъекту(Документ);
		Если ОбъектДОИлиСообщение = Неопределено Тогда
			ОбъектДОИлиСообщение = ИнтеграцияС1СДокументооборотВызовСервера.СоздатьОбъектДОПоПравилу(
				Документ,
				Правило.Ссылка);
		КонецЕсли;
			
		Если ТипЗнч(ОбъектДОИлиСообщение) <> Тип("Строка") Тогда // Не сообщение об ошибке
			Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();

			// Возможно, созданному объекту нужно присвоить штрихкод.
			ШтрихкодВнешнегоОбъекта = ИнтеграцияС1СДокументооборотПереопределяемый.ШтрихкодДокумента(Документ);
			Если ЗначениеЗаполнено(ШтрихкодВнешнегоОбъекта) 
				и ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.4.3.1.CORP") Тогда
		
				Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMRetrieveBarcodesRequest");
			
				Запрос.objectId = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectID");
				Запрос.objectId.id = ОбъектДОИлиСообщение.id; 
				Запрос.objectId.type = ОбъектДОИлиСообщение.type;
		
				Результат = Прокси.execute(Запрос);
				ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);
		
				Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMUpdateBarcodesRequest");
		
				Запрос.objectBarcodes = Результат.objectBarcodes;
			
				Штрихкод = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMBarcode");
				Штрихкод.internal = Ложь;
				Штрихкод.barcodeData = ШтрихкодВнешнегоОбъекта;
				Запрос.objectBarcodes.barcodes.Добавить(Штрихкод);
				
				ДобавитьШтрихкодыEAN13(Документ, Прокси, Запрос);

				Результат = Прокси.execute(Запрос);
				ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);
		
			КонецЕсли;
			
			Возврат Истина;
			
		ИначеЕсли ТипЗнч(ОбъектДОИлиСообщение) = Тип("Строка") Тогда // сообщение об ошибке
			
			Возврат Ложь;
			
    	КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции
//Рарус Владимир Подрезов Конец

Процедура ПолучитьДанныеДокумента(Документ, ДокументID, Отказ)
	
	ВнешнийОбъект = Документ;
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	ExternalObject = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "ExternalObject");
	ExternalObject.id = Строка(ВнешнийОбъект.УникальныйИдентификатор());
	ExternalObject.type = ВнешнийОбъект.Метаданные().ПолноеИмя();
	ExternalObject.name = Строка(ВнешнийОбъект);
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetDocumentListRequest");
	Запрос.externalObjects.Добавить(ExternalObject);
	Запрос.columnSet.Добавить("name");
	
	Результат = Прокси.execute(Запрос);
	Если ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, Результат, "DMError") Тогда 
		Отказ = Истина;
		ВызватьИсключение Результат.description;
	КонецЕсли;
		
	ОбъектXDTO = Неопределено;
	Если ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, Результат, "DMGetObjectListResponse") Тогда
		Если Результат.items.Количество() > 0 Тогда
			ОбъектXDTO = Результат.items[0].object;
		КонецЕсли;
	Иначе // совместимость со старыми версиями сервиса
		Если Результат.documents.Количество() > 0 Тогда
			ОбъектXDTO = Результат.documents[0];
		КонецЕсли;
	КонецЕсли;
		
	Если ОбъектXDTO = Неопределено Тогда
		ДокументID = "";
	Иначе
		// Заполним основные реквизиты.
		ДокументID = ОбъектXDTO.objectId.id;
		ДокументТип = ОбъектXDTO.objectId.type;
		//Документ = ОбъектXDTO.name;
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьШтрихкодыEAN13(ДокСсылка)
	
//Перед использованием раскомментировать))	
	//Возврат;
	
	ТипыДокументов = Метаданные.ОпределяемыеТипы.пкТипыДокументовПФEAN13.Тип;
	
	Если ТипыДокументов.СодержитТип(ТипЗнч(ДокСсылка)) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	пкПечатныеФормыEAN13.Наименование КАК НаименованиеПФ
			|ПОМЕСТИТЬ ВТ
			|ИЗ
			|	Справочник.пкПечатныеФормыEAN13 КАК пкПечатныеФормыEAN13
			|ГДЕ
			|	пкПечатныеФормыEAN13.ПометкаУдаления = ЛОЖЬ
			|	И пкПечатныеФормыEAN13.ИспользоватьEAN13 = ИСТИНА
			|	И пкПечатныеФормыEAN13.НаименованиеТипаДокумента = &НаименованиеТипаДокумента
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	пкШтрихкодыПечатныхФормEAN13.НаименованиеПФ,
			|	пкШтрихкодыПечатныхФормEAN13.ШтрихкодEAN13
			|ПОМЕСТИТЬ ВТ1
			|ИЗ
			|	РегистрСведений.пкШтрихкодыПечатныхФормEAN13 КАК пкШтрихкодыПечатныхФормEAN13
			|ГДЕ
			|	пкШтрихкодыПечатныхФормEAN13.ДокументВладелец = &ДокументВладелец
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ.НаименованиеПФ
			|ИЗ
			|	ВТ КАК ВТ
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ1 КАК ВТ1
			|		ПО ВТ.НаименованиеПФ = ВТ1.НаименованиеПФ
			|ГДЕ
			|	ВТ1.НаименованиеПФ ЕСТЬ NULL ";
	
		Запрос.УстановитьПараметр("НаименованиеТипаДокумента", Строка(ТипЗнч(ДокСсылка)));
		Запрос.УстановитьПараметр("ДокументВладелец", ДокСсылка);
	
		РезультатЗапроса = Запрос.Выполнить();
	
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

			МенеджерЗап = РегистрыСведений.пкШтрихкодыПечатныхФормEAN13.СоздатьМенеджерЗаписи();
		
			МенеджерЗап.ДокументВладелец = ДокСсылка;
			МенеджерЗап.НаименованиеПФ = ВыборкаДетальныеЗаписи.НаименованиеПФ;
			МенеджерЗап.Прочитать();
			Если Не МенеджерЗап.Выбран() Тогда
			    МенеджерЗап.ДокументВладелец = ДокСсылка;
				МенеджерЗап.НаименованиеПФ = ВыборкаДетальныеЗаписи.НаименованиеПФ;
				МенеджерЗап.ШтрихкодEAN13 = РегистрыСведений.пкШтрихкодыПечатныхФормEAN13.СформироватьШтрихкодEAN13();
			    МенеджерЗап.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры
//rarus- saveld 03.11.2016	

//rarus+ saveld 18.11.2016					
Процедура ДобавитьШтрихкодыEAN13(ДокСсылка, Прокси, ЗапросПр) Экспорт
	
	ТипыДокументов = Метаданные.ОпределяемыеТипы.пкТипыДокументовПФEAN13.Тип;
	
	Если ТипыДокументов.СодержитТип(ТипЗнч(ДокСсылка)) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	пкПечатныеФормыEAN13.Наименование КАК НаименованиеПФ
			|ПОМЕСТИТЬ ВТ
			|ИЗ
			|	Справочник.пкПечатныеФормыEAN13 КАК пкПечатныеФормыEAN13
			|ГДЕ
			|	пкПечатныеФормыEAN13.ПометкаУдаления = ЛОЖЬ
			|	И пкПечатныеФормыEAN13.ИспользоватьEAN13 = ИСТИНА
			|	И пкПечатныеФормыEAN13.НаименованиеТипаДокумента = &НаименованиеТипаДокумента
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	пкШтрихкодыПечатныхФормEAN13.НаименованиеПФ,
			|	пкШтрихкодыПечатныхФормEAN13.ШтрихкодEAN13
			|ПОМЕСТИТЬ ВТ1
			|ИЗ
			|	РегистрСведений.пкШтрихкодыПечатныхФормEAN13 КАК пкШтрихкодыПечатныхФормEAN13
			|ГДЕ
			|	пкШтрихкодыПечатныхФормEAN13.ДокументВладелец = &ДокументВладелец
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ.НаименованиеПФ,
			|	ВТ1.ШтрихкодEAN13
			|ИЗ
			|	ВТ КАК ВТ
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ1 КАК ВТ1
			|		ПО ВТ.НаименованиеПФ = ВТ1.НаименованиеПФ";
	
		Запрос.УстановитьПараметр("НаименованиеТипаДокумента", Строка(ТипЗнч(ДокСсылка)));
		Запрос.УстановитьПараметр("ДокументВладелец", ДокСсылка);
	
		РезультатЗапроса = Запрос.Выполнить();
	
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

			Штрихкод = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMBarcode");
			Штрихкод.internal = Ложь;
			Штрихкод.barcodeData = ВыборкаДетальныеЗаписи.ШтрихкодEAN13;
			ЗапросПр.objectBarcodes.barcodes.Добавить(Штрихкод);
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры	//rarus+ saveld 18.11.2016					

Процедура пкПередЗаписьюСправочниковПередЗаписью(Источник, Отказ) Экспорт
    
    Если ТипЗнч(Источник) = Тип("СправочникОбъект.ДоговорыКонтрагентов") Тогда
        ПередЗаписьюДоговорыКонтрагентов(Источник, Отказ);
    ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.ОбъектыЭксплуатации") Тогда
        ПередЗаписьюОбъектыЭксплуатации(Источник);
    ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.ФизическиеЛица") Тогда
        ПередЗаписьюФизическиеЛица(Источник);
//Рарус Владимир Подрезов 18.09.2017
    ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.СМ_ОбъектыСтроительства") Тогда
        ПередЗаписьюСМ_ОбъектыСтроительства(Источник, Отказ);
//Рарус Владимир Подрезов Конец
    КонецЕсли;
        
КонецПроцедуры

Процедура ПередЗаписьюДоговорыКонтрагентов(Источник, Отказ)
    
//Рарус Владимир Подрезов 24.07.2017
//Поддерживаем режим разработчика
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
//Рарус Владимир Подрезов Конец

    Если НЕ ЗначениеЗаполнено(Источник.Ссылка) И Источник.пкВидДоговора = Перечисления.пкВидыДоговоров.АрендаТехники Тогда
        Если Источник.Номер = "" Тогда
            Источник.Номер = пкОбщегоНазначенияСервер.ПолучитьНомерДоговора(); 
        КонецЕсли;
        
		Если Источник.Наименование = "" Тогда
//Рарус Владимир Подрезов 24.07.2017
//			Источник.Наименование = Строка(Источник.пкВидДоговора) + " № " + Источник.Номер + " от " + Формат(Источник.Дата, "ДФ=dd.MM.yyyy");
			СтрокаДоговора = "Договор";
			Если Источник.пкВидДоговора = Перечисления.пкВидыДоговоров.АрендаТехники Тогда
				СтрокаДоговора = "Договор";
			ИначеЕсли Источник.пкВидДоговора = Перечисления.пкВидыДоговоров.ПоставкаЗапчастей Тогда
				СтрокаДоговора = "Договор";
			ИначеЕсли Источник.пкВидДоговора = Перечисления.пкВидыДоговоров.ПоставкаТехники Тогда
				СтрокаДоговора = "Договор";
			ИначеЕсли Источник.пкВидДоговора = Перечисления.пкВидыДоговоров.Сервис Тогда
				СтрокаДоговора = "Договор";
			ИначеЕсли Источник.пкВидДоговора = Перечисления.пкВидыДоговоров.ТранспортноеОбслуживание Тогда
				СтрокаДоговора = "Договор";
			КонецЕсли;
			Источник.Наименование = СтрокаДоговора + " № " + Источник.Номер + " от " + Формат(Источник.Дата, "ДФ=dd.MM.yyyy");
//Рарус Владимир Подрезов Конец
        КонецЕсли;
    КонецЕсли;
    
    Если Источник.пкВидДоговора = Перечисления.пкВидыДоговоров.АрендаТехники И Источник.ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем Тогда
        Запрос = Новый Запрос;
        Запрос.Текст = 
        "ВЫБРАТЬ ПЕРВЫЕ 1
        |   ДоговорыКонтрагентов.Номер
        |ИЗ
        |   Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
        |ГДЕ
        |   НЕ ДоговорыКонтрагентов.ПометкаУдаления
        |   И ДоговорыКонтрагентов.пкВидДоговора = ЗНАЧЕНИЕ(Перечисление.пкВидыДоговоров.АрендаТехники)
        |   И ДоговорыКонтрагентов.Ссылка <> &Ссылка
        |   И ДоговорыКонтрагентов.Номер = &Номер
        |   И ДоговорыКонтрагентов.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПокупателем)";
        
        Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
        Запрос.УстановитьПараметр("Номер",  Источник.Номер);
        
        Результат = Запрос.Выполнить();
        Выборка = Результат.Выбрать();
        
        Если Выборка.Следующий() Тогда
            Сообщить("Договор с номером """ + Выборка.Номер + """ уже существует"); 
            Отказ = Истина;
        КонецЕсли;
    КонецЕсли;    
	
//Рарус Владимир Подрезов 13.12.2016
	Если ЗначениеЗаполнено(Источник.пкОсновнойДоговорСПоставщиком) Тогда
		Источник.Статус = Источник.пкОсновнойДоговорСПоставщиком.Статус;
		Если Источник.пкОсновнойДоговорСПоставщиком.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДоговоровКонтрагентов.Действует") Тогда
			 Источник.Согласован = Истина;
		КонецЕсли;
	КонецЕсли;
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 05.06.2017
	Если Источник.пкВидДоговора = Перечисления.пкВидыДоговоров.АрендаТехники И Источник.ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем Тогда
		Если Не ЗначениеЗаполнено(Источник.пкВалютаТарифа) Тогда
			тСообщение = Новый СообщениеПользователю;
			тСообщение.Текст = НСтр("ru='Не заполнена валюта тарифа.'");
        	тСообщение.Сообщить();
        	Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
//Рарус Владимир Подрезов КОНЕЦ
КонецПроцедуры    

Процедура ПередЗаписьюОбъектыЭксплуатации(Источник)
    
//Рарус Владимир Подрезов 28.12.2016
    Если НЕ Источник.ЭтоГруппа Тогда
//Рарус Владимир Подрезов Конец
    Если НЕ ЗначениеЗаполнено(Источник.ДатаСведений) Тогда
	    Источник.ДатаСведений = ТекущаяДатаСеанса();
    КонецЕсли;    
//Рарус Владимир Подрезов 28.12.2016
    КонецЕсли;    
//Рарус Владимир Подрезов Конец
        
КонецПроцедуры    

Процедура ПередЗаписьюФизическиеЛица(Источник)
    
    Если НЕ Источник.ЭтоГруппа Тогда
	    Источник.ФИО = Источник.Наименование;
    КонецЕсли;    
        
КонецПроцедуры    

//Рарус Владимир Подрезов 18.09.2017
Процедура ПередЗаписьюСМ_ОбъектыСтроительства(Источник, Отказ)
    
    Если НЕ Источник.ЭтоГруппа Тогда
		Если (Не Источник.ПометкаУдаления) И (Не ЗначениеЗаполнено(Источник.пкПодразделение)) Тогда
			тСообщение = Новый СообщениеПользователю;
			тСообщение.Текст = НСтр("ru='Не указано подразделение для объекта:'") + Источник.Наименование;
			тСообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
//Рарус Владимир Подрезов 04.10.2017
		Если Не ЗначениеЗаполнено(Источник.пкПолноеНаименование) Тогда
			Источник.пкПолноеНаименование = Источник.Наименование;
		КонецЕсли;
//Рарус Владимир Подрезов Конец
    КонецЕсли;    
        
КонецПроцедуры    
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 07.12.2016
Процедура ДобавитьВБуферАвтосозданиеОбъектовВДО(Документ) Экспорт
	
	Если НЕ ИнтеграцияС1СДокументооборотВызовСервера.ПарольИзвестен() Тогда
	//	Возврат;
	КонецЕсли;	
		
	//Отказ = Ложь;
	//ДокументID = Неопределено;
	//ПолучитьДанныеДокумента(Документ, ДокументID, Отказ);

	//Если Отказ Тогда 
	//	Возврат;
	//КонецЕсли;

	Правила = ИнтеграцияС1СДокументооборотВызовСервера.ПодходящиеПравила(Документ);

	Если Правила.Количество() > 0 Тогда
		
		НаборЗаписей = РегистрыСведений.пкАвтосозданиеВДО.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Объект.Установить(Документ, Истина);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Объект = Документ;
			Попытка
				НаборЗаписей.Записать(Истина);
			Исключение
				тСообщение = Новый СообщениеПользователю;
				тСообщение.Текст =  НСтр("ru='Не удалось Зарегестрировать объект для ДО!:'") + ОписаниеОшибки();
				тСообщение.Сообщить();
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
			
КонецПроцедуры

//Процедура отрабатывает по регламентному заданию (каждые 20 минут)
//  - Для объектов из буфера создает в фоновом режиме объекты в документообороте
Процедура пкАвтосозданиеОбъектовВДО() Экспорт
	
	НаборЗаписей = РегистрыСведений.пкАвтосозданиеВДО.СоздатьНаборЗаписей();
	
	ЗапросБ = Новый Запрос;
	ЗапросБ.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	пкАвтосозданиеВДО.Объект
	|ИЗ
	|	РегистрСведений.пкАвтосозданиеВДО КАК пкАвтосозданиеВДО";
	РезЗапроса = ЗапросБ.Выполнить().Выбрать();
	Пока РезЗапроса.Следующий() Цикл
		
		Если РезЗапроса.Объект = Неопределено ИЛИ Не ЗначениеЗаполнено(РезЗапроса.Объект) Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			
			СозданОбъект = Ложь;
			
			Если Не РезЗапроса.Объект.ПометкаУдаления Тогда
				СозданОбъект = СоздатьДокументВБазеДОВФоновомЗадании(РезЗапроса.Объект);
			КонецЕсли;
			
			Если РезЗапроса.Объект.ПометкаУдаления ИЛИ СозданОбъект Тогда
				НаборЗаписей.Отбор.Объект.Установить(РезЗапроса.Объект, Истина);
				НаборЗаписей.Прочитать();
				НаборЗаписей.Очистить();
				
				НаборЗаписей.Записать(Истина);
			КонецЕсли;
			
		Исключение
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 24.01.2017
Процедура пкПроверкаЗаполненияЗаявкиНаРасходованиеДенежныхСредствОбработкаПроверкиЗаполнения(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	ПроверяемыеРеквизиты.Добавить("Подразделение");
	
	Если Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		ИЛИ Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
		ИЛИ Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
		ИЛИ Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет
		ИЛИ Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне
		ИЛИ Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
		ИЛИ Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
		ИЛИ Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств
		ИЛИ Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам
		ИЛИ Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты
		ИЛИ Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймов
		ИЛИ Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаЛизингодателю
	Тогда
		ПроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств");
//Рарус Владимир Подрезов 02.10.2017
		ПроверяемыеРеквизиты.Добавить("БанковскийСчетКонтрагента");
//Рарус Владимир Подрезов Конец
	Иначе
		ПроверяемыеРеквизиты.Добавить("СтатьяДвиженияДенежныхСредств");
	КонецЕсли;
	
	Если Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
		ИЛИ Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет
		ИЛИ Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты
		ИЛИ Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
		ИЛИ Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты
		ИЛИ Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств
		ИЛИ Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам
		ИЛИ Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты
		ИЛИ Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймов
		ИЛИ Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику
		ИЛИ Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаЛизингодателю
	Тогда
	Иначе
		ПроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.Заказ");
	КонецЕсли;
	
	Если Источник.ФормаОплатыБезналичная = Истина
		И Источник.ФормаОплатыНаличная = Ложь
		И Источник.ФормаОплатыПлатежнаяКарта = Ложь
	Тогда
		ПроверяемыеРеквизиты.Добавить("БанковскийСчет");
	КонецЕсли;
	
КонецПроцедуры

//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 10.02.2017
Процедура пкУдалениеДвиженийПоРаботамПриРеализацииСебестоимостьТоваровПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Если ТипЗнч(Источник.Отбор.Регистратор.Значение) <> Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиДляУдаления = Новый СписокЗначений;
	
	Для Каждого текСтрока Из Источник Цикл
		
		Если Не ЗначениеЗаполнено(текСтрока.АналитикаУчетаНоменклатуры) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(текСтрока.АналитикаУчетаНоменклатуры.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если текСтрока.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
			СтрокиДляУдаления.Добавить(текСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого текСтрока Из СтрокиДляУдаления Цикл
		Источник.Удалить(текСтрока.Значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура пкУдалениеДвиженийПоРаботамПриРеализацииМатериалыИРаботыВПроизводствеПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Если ТипЗнч(Источник.Отбор.Регистратор.Значение) <> Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиДляУдаления = Новый СписокЗначений;
	
	Для Каждого текСтрока Из Источник Цикл
		
		Если Не ЗначениеЗаполнено(текСтрока.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если текСтрока.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
			СтрокиДляУдаления.Добавить(текСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого текСтрока Из СтрокиДляУдаления Цикл
		Источник.Удалить(текСтрока.Значение);
	КонецЦикла;
	
КонецПроцедуры
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 09.03.2017
Процедура пкУстановкаНовогоНомераАвнсовогоОтчетаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если СокрЛП(Источник.Номер) <> "" Тогда
		Возврат;
	КонецЕсли;
	
	//Источник.УстановитьНовыйНомер(Формат(Источник.Дата, "ДФ=MMдд"));
	//Источник.Номер = Формат(Источник.Дата, "ДФ=MM/дд/") + Прав(Источник.Номер, 3);
	Источник.УстановитьНовыйНомер(Формат(Источник.Дата, "ДФ=MM/дд/"));
	Источник.Номер = Формат(Источник.Дата, "ДФ=MM/дд/") + Прав(СокрЛП(Источник.Номер), 3);
	
КонецПроцедуры
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 05.06.2017
Процедура ПриКопировании_ЗаявкаНаРасходованиеДенежныхСредств(Источник, ОбъектКопирования) Экспорт
	
	Источник.КтоРешил						= "";
	Источник.пкСтатьяРасходовПоЛогистике	= "";
	Источник.пкТекущаяТочкаСогласования		= "";
	Источник.пкПрикрепленыФайлыВДО			= 0;
	Источник.пкТранспортныеСредства.Очистить();
	
КонецПроцедуры
	
Процедура ПриКопировании_ЗаказКлиента(Источник, ОбъектКопирования) Экспорт
	
	Источник.пкЗакрыт			= Ложь;
	Источник.пкДатаЗакрытия		= '00010101';
	Источник.пкИсключитьИзУСР	= Ложь;
//Рарус Владимир Подрезов 30.09.2017
	Источник.пкЗаказНаряд		= "";
	Источник.пкЭтоСчетСервиса	= Ложь;
	Для Каждого текСтрока Из Источник.Товары Цикл
		текСтрока.пкЗаказНаряд	= "";
	КонецЦикла;
//Рарус Владимир Подрезов Конец
	
КонецПроцедуры
//Рарус Владимир Подрезов Конец


Процедура ПриКопировании_ДоговорыКонтрагентов(Источник, ОбъектКопирования) Экспорт	
	Источник.пкПройденПроцессСогласования	= Ложь;
	Источник.пкТекущаяТочкаСогласования		= Справочники.Пользователи.ПустаяСсылка();
	Источник.пкСканДоговора					= Ложь;
	Источник.пкПрикрепленыФайлыВДО			= 0;
	Источник.пкПримечание 					= "";
	Источник.пкБезПечати 					= ЛОЖЬ;
КонецПроцедуры

//Рарус Владимир Подрезов 30.09.2017
Процедура ДобавитьЗаявкуВБуферКПерепроведениюПоСрокамАренды(ЗаявкаНаАренду) Экспорт
	
	Если Не ЗначениеЗаполнено(ЗаявкаНаАренду) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.пкЗаявкиКПерепроведениюПоСрокамАренды.СоздатьНаборЗаписей();
		
	НаборЗаписей.Отбор.ЗаявкаНаАрендуТехники.Установить(ЗаявкаНаАренду, Истина);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ЗаявкаНаАрендуТехники = ЗаявкаНаАренду;
		Попытка
			НаборЗаписей.Записать(Истина);
		Исключение
			тСообщение = Новый СообщениеПользователю;
			тСообщение.Текст =  НСтр("ru='Не удалось Зарегестрировать Заявку для перепроведения по срокам аренды!:'") + ОписаниеОшибки();
			тСообщение.Сообщить();
		КонецПопытки;
	КонецЕсли;
			
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

//Процедура отрабатывает по регламентному заданию (каждые 20 минут)
//  - Для Заявок из буфера производит перепроведение всей цыпочки по срокам аренды
Процедура пкПерепроведениеЗаявокПоСрокамАренды() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.пкЗаявкиКПерепроведениюПоСрокамАренды.СоздатьНаборЗаписей();
	
	ЗапросБ = Новый Запрос;
	ЗапросБ.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	пкЗаявкиКПерепроведениюПоСрокамАренды.ЗаявкаНаАрендуТехники
	|ИЗ
	|	РегистрСведений.пкЗаявкиКПерепроведениюПоСрокамАренды КАК пкЗаявкиКПерепроведениюПоСрокамАренды";
	РезЗапроса = ЗапросБ.Выполнить().Выбрать();
	Пока РезЗапроса.Следующий() Цикл
		
		Если РезЗапроса.ЗаявкаНаАрендуТехники = Неопределено ИЛИ Не ЗначениеЗаполнено(РезЗапроса.ЗаявкаНаАрендуТехники) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ РезЗапроса.ЗаявкаНаАрендуТехники.ПометкаУдаления Тогда
			пкПерепровестиЗаявкуПоСрокамАренды(РезЗапроса.ЗаявкаНаАрендуТехники);
		КонецЕсли;
		
		Попытка
			
			НаборЗаписей.Отбор.ЗаявкаНаАрендуТехники.Установить(РезЗапроса.ЗаявкаНаАрендуТехники, Истина);
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			
			НаборЗаписей.Записать(Истина);
			
		Исключение
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура пкПерепровестиЗаявкуПоСрокамАренды(тЗаявка)
	
	Если Не ЗначениеЗаполнено(тЗаявка) Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросОтгрузки = Новый Запрос;
	ЗапросОтгрузки.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	пкЗаданиеНаПеревозку.Ссылка
	|ИЗ
	|	Документ.пкЗаданиеНаПеревозку КАК пкЗаданиеНаПеревозку
	|ГДЕ
	|	пкЗаданиеНаПеревозку.Проведен
	|	И (пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
	|		ИЛИ пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|			И пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка))
	|	И пкЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники = &ЗаявкаНаАрендуТехники";
	ЗапросОтгрузки.УстановитьПараметр("ЗаявкаНаАрендуТехники", тЗаявка);
	ЗаданияНаОтгрузку = ЗапросОтгрузки.Выполнить().Выгрузить();
	
	ЗапросВозвраты = Новый Запрос;
	ЗапросВозвраты.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	пкЗаданиеНаПеревозку.Ссылка
	|ИЗ
	|	Документ.пкЗаданиеНаПеревозку КАК пкЗаданиеНаПеревозку
	|ГДЕ
	|	пкЗаданиеНаПеревозку.Проведен
	|	И (пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
	|		ИЛИ пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|			И пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка))
	|	И пкЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники = &ЗаявкаНаАрендуТехники";
	ЗапросВозвраты.УстановитьПараметр("ЗаявкаНаАрендуТехники", тЗаявка);
	ЗаданияНаВозврат = ЗапросВозвраты.Выполнить().Выгрузить();
	
	ЗапросСчета = Новый Запрос;
	ЗапросСчета.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказКлиентаТовары.Ссылка,
	|	ЗаказКлиентаТовары.пкДатаНачалаАренды КАК пкДатаНачалаАренды
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка.Проведен
	|	И ЗаказКлиентаТовары.пкЗаявкаНаАрендуТехники = &пкЗаявкаНаАрендуТехники
	|
	|УПОРЯДОЧИТЬ ПО
	|	пкДатаНачалаАренды";
	ЗапросСчета.УстановитьПараметр("пкЗаявкаНаАрендуТехники", тЗаявка);
	СчетаПоЗаявке = ЗапросСчета.Выполнить().Выгрузить();
	
	ЕстьЗамена = Ложь;
	//Отменим движения заданий
	Для Каждого текОтгрузка Из ЗаданияНаОтгрузку Цикл
		пкУдалитьДвиженияДатыСрокиАренды(текОтгрузка.Ссылка);
	КонецЦикла;
	Для Каждого текВозврат Из ЗаданияНаВозврат Цикл
		Если текВозврат.Ссылка.ЗаменаТехники Тогда
			ЕстьЗамена = Истина;
		КонецЕсли;
		пкУдалитьДвиженияСрокиАренды(текВозврат.Ссылка);
	КонецЦикла;
	
	//Для каждого счета сначала оменим движения его реализации
	Для Каждого текСчет Из СчетаПоЗаявке Цикл
		пкУдалитьДвиженияРеализацииПоСрокамАренды(текСчет.Ссылка);
		пкУдалитьДвиженияСрокиАренды(текСчет.Ссылка);
	КонецЦикла;
	
	//Восстановим движения заданий
	Для Каждого текОтгрузка Из ЗаданияНаОтгрузку Цикл
		Если ЗначениеЗаполнено(текОтгрузка.Ссылка.Техника) Тогда
			пкПерепровестиДокументПоДатамСрокамАренды(текОтгрузка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	Для Каждого текОтгрузка Из ЗаданияНаОтгрузку Цикл
		Если НЕ ЗначениеЗаполнено(текОтгрузка.Ссылка.Техника) Тогда
			пкПерепровестиДокументПоСрокамАренды(текОтгрузка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	Для Каждого текВозврат Из ЗаданияНаВозврат Цикл
		Если ЗначениеЗаполнено(текВозврат.Ссылка.Техника) Тогда
			пкПерепровестиДокументПоСрокамАренды(текВозврат.Ссылка);
		КонецЕсли;
	КонецЦикла;
	Для Каждого текВозврат Из ЗаданияНаВозврат Цикл
		Если НЕ ЗначениеЗаполнено(текВозврат.Ссылка.Техника) Тогда
			пкПерепровестиДокументПоСрокамАренды(текВозврат.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьЗамена Тогда
		//Перепроведенм еще разок, для выстроения замен
		Для Каждого текОтгрузка Из ЗаданияНаОтгрузку Цикл
			Если ЗначениеЗаполнено(текОтгрузка.Ссылка.Техника) Тогда
				пкПерепровестиДокументПоСрокамАренды(текОтгрузка.Ссылка);
			КонецЕсли;
		КонецЦикла;
		Для Каждого текОтгрузка Из ЗаданияНаОтгрузку Цикл
			Если НЕ ЗначениеЗаполнено(текОтгрузка.Ссылка.Техника) Тогда
				пкПерепровестиДокументПоСрокамАренды(текОтгрузка.Ссылка);
			КонецЕсли;
		КонецЦикла;
		Для Каждого текВозврат Из ЗаданияНаВозврат Цикл
			Если ЗначениеЗаполнено(текВозврат.Ссылка.Техника) Тогда
				пкПерепровестиДокументПоСрокамАренды(текВозврат.Ссылка);
			КонецЕсли;
		КонецЦикла;
		Для Каждого текВозврат Из ЗаданияНаВозврат Цикл
			Если НЕ ЗначениеЗаполнено(текВозврат.Ссылка.Техника) Тогда
				пкПерепровестиДокументПоСрокамАренды(текВозврат.Ссылка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//Для каждого счета проведем счет и восстановим движения по реализациям
	Для Каждого текСчет Из СчетаПоЗаявке Цикл
		пкПерепровестиЗаказПоСрокамАренды(текСчет.Ссылка);
	КонецЦикла;
	
	//Перепроведем движения возвратных заданий без техники
	//Восстановим движения заданий
	Для Каждого текОтгрузка Из ЗаданияНаОтгрузку Цикл
		Если ЗначениеЗаполнено(текОтгрузка.Ссылка.Техника) Тогда
			пкПерепровестиДокументПоСрокамАренды(текОтгрузка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	Для Каждого текОтгрузка Из ЗаданияНаОтгрузку Цикл
		Если НЕ ЗначениеЗаполнено(текОтгрузка.Ссылка.Техника) Тогда
			пкПерепровестиДокументПоСрокамАренды(текОтгрузка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	Для Каждого текВозврат Из ЗаданияНаВозврат Цикл
		Если ЗначениеЗаполнено(текВозврат.Ссылка.Техника) Тогда
			пкПерепровестиДокументПоСрокамАренды(текВозврат.Ссылка);
		КонецЕсли;
	КонецЦикла;
	Для Каждого текВозврат Из ЗаданияНаВозврат Цикл
		Если НЕ ЗначениеЗаполнено(текВозврат.Ссылка.Техника) Тогда
			пкПерепровестиДокументПоСрокамАренды(текВозврат.Ссылка);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура пкУдалитьДвиженияРеализацииПоСрокамАренды(тСчет)
	
	Если Не ЗначениеЗаполнено(тСчет) Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросР = Новый Запрос;
	ЗапросР.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияТоваровУслугТовары.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	(РеализацияТоваровУслугТовары.Ссылка.ЗаказКлиента = &ЗаказКлиента
	|		ИЛИ РеализацияТоваровУслугТовары.ЗаказКлиента = &ЗаказКлиента)
	|	И РеализацияТоваровУслугТовары.Ссылка.Проведен";
	ЗапросР.УстановитьПараметр("ЗаказКлиента", тСчет);
	
	РезЗапроса = ЗапросР.Выполнить().Выбрать();
	Пока РезЗапроса.Следующий() Цикл
		пкУдалитьДвиженияСрокиАренды(РезЗапроса.Ссылка, Ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура пкПерепровестиЗаказПоСрокамАренды(тСчет)
	
	Если Не ЗначениеЗаполнено(тСчет) Тогда
		Возврат;
	КонецЕсли;
	
	Если тСчет.Проведен Тогда
		пкПерепровестиДокументПоСрокамАренды(тСчет, Ложь);
	КонецЕсли;
	
	ЗапросР = Новый Запрос;
	ЗапросР.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияТоваровУслугТовары.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	(РеализацияТоваровУслугТовары.Ссылка.ЗаказКлиента = &ЗаказКлиента
	|		ИЛИ РеализацияТоваровУслугТовары.ЗаказКлиента = &ЗаказКлиента)
	|	И РеализацияТоваровУслугТовары.Ссылка.Проведен";
	ЗапросР.УстановитьПараметр("ЗаказКлиента", тСчет);
	
	РезЗапроса = ЗапросР.Выполнить().Выбрать();
	Пока РезЗапроса.Следующий() Цикл
		пкПерепровестиДокументПоСрокамАренды(РезЗапроса.Ссылка, Ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура пкУдалитьДвиженияСрокиАренды(тДокумент, Отказ = Ложь)
	
	тОбъект = тДокумент.ПолучитьОбъект();
    НаборЗаписей = тОбъект.Движения.пкСрокиАренды;
    НаборЗаписей.Записывать = Истина;
	НаборЗаписей.Прочитать();
	
	НаборЗаписей.Очистить();
	
    Попытка
        НаборЗаписей.Записать(Истина);
    Исключение
        Отказ = Истина;
        Сообщение = Новый СообщениеПользователю;
        Сообщение.Текст = ОписаниеОшибки();
        Сообщение.Сообщить();
    КонецПопытки;
	
КонецПроцедуры

Процедура пкУдалитьДвиженияДатыСрокиАренды(тДокумент, Отказ = Ложь)
	
	тОбъект = тДокумент.ПолучитьОбъект();
    НаборЗаписей = тОбъект.Движения.пкСрокиАренды;
    НаборЗаписей.Записывать = Истина;
	НаборЗаписей.Прочитать();
	
	НаборЗаписей.Очистить();
	
    Попытка
        НаборЗаписей.Записать(Истина);
    Исключение
        Отказ = Истина;
        Сообщение = Новый СообщениеПользователю;
        Сообщение.Текст = ОписаниеОшибки();
        Сообщение.Сообщить();
    КонецПопытки;
	
	НаборЗаписей = тОбъект.Движения.пкДатыАренды;
    НаборЗаписей.Записывать = Истина;
	НаборЗаписей.Прочитать();
	
	НаборЗаписей.Очистить();
	
    Попытка
        НаборЗаписей.Записать(Истина);
    Исключение
        Отказ = Истина;
        Сообщение = Новый СообщениеПользователю;
        Сообщение.Текст = ОписаниеОшибки();
        Сообщение.Сообщить();
    КонецПопытки;
	
КонецПроцедуры

Процедура пкПерепровестиДокументПоДатамСрокамАренды(тДокумент, Отказ = Ложь)
	
	тОбъект = тДокумент.ПолучитьОбъект();
	//НаборЗаписей = тОбъект.Движения.пкСрокиАренды;
	//НаборЗаписей.Записывать = Истина;
	//НаборЗаписей.Прочитать();
	//НаборЗаписей.Очистить();
	//Попытка
	//    НаборЗаписей.Записать(Истина);
	//Исключение
	//    Отказ = Истина;
	//    Сообщение = Новый СообщениеПользователю;
	//    Сообщение.Текст = ОписаниеОшибки();
	//    Сообщение.Сообщить();
	//КонецПопытки;
	
	РегистрыСведений.пкСрокиАренды.СформироватьЗаписи(тОбъект, Отказ, РежимПроведенияДокумента.Неоперативный);
	РегистрыСведений.пкДатыАренды.СформироватьЗаписи(Отказ,РежимПроведенияДокумента.Неоперативный,тОбъект);
	
КонецПроцедуры


Процедура пкПерепровестиДокументПоСрокамАренды(тДокумент, Отказ = Ложь)
	
	тОбъект = тДокумент.ПолучитьОбъект();
    НаборЗаписей = тОбъект.Движения.пкСрокиАренды;
    НаборЗаписей.Записывать = Истина;
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
    Попытка
        НаборЗаписей.Записать(Истина);
    Исключение
        Отказ = Истина;
        Сообщение = Новый СообщениеПользователю;
        Сообщение.Текст = ОписаниеОшибки();
        Сообщение.Сообщить();
    КонецПопытки;
	
	РегистрыСведений.пкСрокиАренды.СформироватьЗаписи(тОбъект, Отказ, РежимПроведенияДокумента.Неоперативный);
	
КонецПроцедуры
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 04.10.2017
Процедура пкПредставлениеОбъектаСтроительстваОбработкаПолученияПредставления(Источник, Данные, Представление, СтандартнаяОбработка) Экспорт
	
	Если НЕ Данные.Ссылка.ЭтоГруппа Тогда
		Если Данные.Ссылка.пкПолноеНаименование <> "" Тогда
			Представление = Данные.Ссылка.пкПолноеНаименование;
		Иначе
			Представление = Данные.Ссылка.Наименование;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 09.10.2017
Процедура пкПредставлениеЗаданиеНаПеревозкуОбработкаПолученияПредставления(Источник, Данные, Представление, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	пкЗаданиеНаПеревозку = Данные.Ссылка;
	
	ВидОперации = "";
	Если пкЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту Тогда
		ВидОперации = "Отправка";
	ИначеЕсли пкЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента Тогда
		ВидОперации = "Возврат";
	ИначеЕсли пкЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.Перекат
				И Не ЗначениеЗаполнено(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку) Тогда
		ВидОперации = "Возврат";
	ИначеЕсли пкЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.Перекат
				И ЗначениеЗаполнено(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку) Тогда
		ВидОперации = "Отправка";
	ИначеЕсли пкЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами Тогда
		ВидОперации = "Перемещение";
	КонецЕсли;
	
	Представление = НСтр("ru='Задание на перевозку '") + СокрЛП(пкЗаданиеНаПеревозку.Номер) + ": " +
		СокрЛП(ВидОперации) + ", " + СокрЛП(пкЗаданиеНаПеревозку.Модель) + 
		?(ЗначениеЗаполнено(пкЗаданиеНаПеревозку.Техника), " (" + СокрЛП(пкЗаданиеНаПеревозку.Техника) + ")", "") + ", " + 
		СокрЛП(пкЗаданиеНаПеревозку.ДатаОтгрузки);
			
КонецПроцедуры
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 06.01.2018
Процедура пкУстановкаСтатьиПоЗаказНарядуПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Источник.ЗаказНаВнутреннееПотребление) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник.ЗаказНаВнутреннееПотребление) <> Тип("ДокументСсылка.ЗаказНаРемонт") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Источник.ЗаказНаВнутреннееПотребление.пкЗаказНаряд) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого текСтрока Из Источник.Товары Цикл
		Если ЗначениеЗаполнено(текСтрока.СтатьяРасходов) Тогда
			Продолжить;
		КонецЕсли;
		
		текСтрока.СтатьяРасходов = Источник.ЗаказНаВнутреннееПотребление.пкЗаказНаряд.СтатьяРасходов;
		
	КонецЦикла;
	
КонецПроцедуры
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 24.01.2018
Процедура пкПроверкаСогласованностиДоговораВЗаявкахДСПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьНеСогласованныйДоговор = Ложь;
	Для Каждого текСтрока Из Источник.РасшифровкаПлатежа Цикл
		
		Если ТипЗнч(текСтрока.Заказ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			Если ЗначениеЗаполнено(текСтрока.Заказ.Договор) Тогда
				ЕстьНеСогласованныйДоговор = ЕстьНеСогласованныйДоговор ИЛИ НЕ текСтрока.Заказ.Договор.Согласован;
			КонецЕсли;
		ИначеЕсли ТипЗнч(текСтрока.Заказ) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			ЕстьНеСогласованныйДоговор = ЕстьНеСогласованныйДоговор ИЛИ НЕ текСтрока.Заказ.Согласован;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьНеСогласованныйДоговор Тогда
		тСообщение = Новый СообщениеПользователю;
		тСообщение.Текст = НСтр("ru='В документе выбран не согласованный договор! Такая заявка не может быть проведена.'");
		тСообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры


Процедура пкПроверкаСогласованногоДоговораВЗаказеНаВнутреннеПортреблениеПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Источник.пкДоговор) И НЕ Источник.пкДоговор.Согласован Тогда
		тСообщение = Новый СообщениеПользователю;
		тСообщение.Текст = НСтр("ru='В документе выбран не согласованный договор! Такой заказ не может быть проведен.'");
		тСообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры
//Рарус Владимир Подрезов Конец
