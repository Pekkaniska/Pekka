////////////////////////////////////////////////////////////////////////////////
// Подсистема "Облачные классификаторы".
// ОбщийМодуль.ОблачныеКлассификаторы.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Обновление классификатора ТН ВЭД
// Запускает обновление элементов классификатора, загруженных в базу.
// Полученные данные передает в метод ОблачныеКлассификаторыПереопределяемый.СоздатьОбновитьЭлементыТНВЭД.
//
Процедура ОбновитьКлассификаторТНВЭД() Экспорт
	
	// Получение уже существующих в базе кодов элементов классификатора
	СуществующиеКоды = Новый Массив;
	ОблачныеКлассификаторыПереопределяемый.ОпределитьЗагруженныеЭлементыТНВЭД(СуществующиеКоды);
	
	Если Не СуществующиеКоды.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	// Нормализация формата кодов (приведение к виду "ХХХХ ХХ ХХХ Х") и запись их в соответствие
	КодыИмеющихсяЭлементов = ПолучитьНормализованныеКодыЭлементовТНВЭД(СуществующиеКоды);
	
	// Получение обновлений
	Отказ = Ложь;
	МассивПараметров = Новый Массив;
	ТекущийПараметр = "";
	КоличествоЭлементов = 0;
	
	Для Каждого ИмеющийсяКод Из КодыИмеющихсяЭлементов Цикл
		
		ТекущийПараметр = ?(ПустаяСтрока(ТекущийПараметр), "", ТекущийПараметр + ",") + ИмеющийсяКод.Ключ;
		
		КоличествоЭлементов = КоличествоЭлементов + 1;
		
		Если КоличествоЭлементов = 100 Тогда // Максимальный размер разовой выборки из сервиса
			МассивПараметров.Добавить(ТекущийПараметр);
			ТекущийПараметр = "";
			КоличествоЭлементов = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(ТекущийПараметр) Тогда
		МассивПараметров.Добавить(ТекущийПараметр);
	КонецЕсли;
	
	ДанныеОбновления = Неопределено;
	
	Для Каждого ПараметрКоды Из МассивПараметров Цикл
		
		// Получение данных элементов
		ОписаниеПараметровЗапроса            = ОблачныеКлассификаторыСлужебный.ОписаниеПараметровЗапросаЭлементыТНВЭД();
		ОписаниеПараметровЗапроса.НаборПолей = РаботаСНоменклатуройСлужебный.НаборПолейСтандартный();
		ОписаниеПараметровЗапроса.Коды       = ПараметрКоды;
		
		ПараметрыКоманды = ОблачныеКлассификаторыСлужебный.ПараметрыЗапросаЭлементыТНВЭД(ОписаниеПараметровЗапроса);
		ДанныеСервиса    = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если ДанныеОбновления = Неопределено Тогда
			ДанныеОбновления = ДанныеСервиса.СкопироватьКолонки();
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из ДанныеСервиса Цикл
			Если КодыИмеющихсяЭлементов[СтрокаТаблицы.Код] <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ДанныеОбновления.Добавить(), СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Если ДанныеОбновления.Количество() Тогда
		ОблачныеКлассификаторыПереопределяемый.СоздатьОбновитьЭлементыТНВЭД(ДанныеОбновления, Отказ);
	КонецЕсли;
	
	// Обновление даты последней синхронизации
	Если Не Отказ Тогда
		УстановитьПривилегированныйРежим(Истина);
		Константы.ДатаСинхронизацииТНВЭД.Установить(УниверсальноеВремя(ТекущаяДатаСеанса()));
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из обработчика события формы ПриСозданииНаСервере.
// Создает кнопку подбора элементов классификатора из сервиса.
// Обработчик см. ОблачныеКлассификаторыКлиент.ПодобратьИзСервисаЭлементыТНВЭД().
//
// Параметры:
//  Форма - УправляемаяФорма - из обработчика события которой происходит вызов процедуры.
//  ГруппаРодитель - ЭлементФормы - группа формы для размещения элементов.
//
Процедура ПриСозданииНаСервереФормаСпискаТНВЭД(Форма, ГруппаРодитель) Экспорт
	
	Если Не ПравоДоступа("Использование", Метаданные.Обработки.РаботаСОблачнымиКлассификаторами) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяКомандаФормы           = Форма.Команды.Добавить("ПодобратьИзСервисаЭлементыТНВЭД");
	НоваяКомандаФормы.Заголовок = НСтр("ru = 'Подобрать'");
	НоваяКомандаФормы.Подсказка = НСтр("ru = 'Подобрать элементы классификатора'");
	НоваяКомандаФормы.Действие  = "Подключаемый_ПодобратьИзСервисаЭлементыТНВЭД";
	
	НовыйЭлемент = Форма.Элементы.Добавить("ПодобратьИзСервисаЭлементыТНВЭД", Тип("КнопкаФормы"), ГруппаРодитель);
	НовыйЭлемент.Вид         = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НовыйЭлемент.ИмяКоманды  = "ПодобратьИзСервисаЭлементыТНВЭД";
	
КонецПроцедуры

// Получение из сервиса данных ОКЕИ
// Возвращает данные элементов классификатора ОКЕИ из сервиса.
//
// Параметры:
//  Коды - Массив - Коды элементов ОКЕИ, данные которых необходимо получить. Элементы массива должны иметь тип Строка.
//                  Элементы массива должны иметь тип Строка. Если передан пустой массив, будут возвращены данные
//                  всех элементов классификатора.
//
// Возвращаемое значение:
//  ТаблицаЗначений, Неопределено - если обращение к сервису успешно, будет возвращена ТаблицаЗначений с колонками:
//    * Код                                      - Строка - Например, "163".
//    * Наименование                             - Строка - Например, "Грамм".
//    * УсловноеОбозначениеНациональное          - Строка - Например, "г".
//    * УсловноеОбозначениеМеждународное         - Строка - Например, "g".
//    * КодовоеБуквенноеОбозначениеНациональное  - Строка - Например, "Г".
//    * КодовоеБуквенноеОбозначениеМеждународное - Строка - Например, "GRM".
//    * ТипИзмеряемойВеличины                    - Строка - Например, "Вес".
//    * Числитель                                - Число  - Числитель в отношении к базовой единице измерения.
//                                                          Например, для Грамма базовой единицей измерения является
//                                                          Килограмм, т.е. числитель равен 1.
//    * Знаменатель                              - Число  - Знаменатель в отношении к базовой единице измерения.
//                                                          Например, для Грамма знаменатель равен 1000.
//    * Идентификатор                            - Строка - Служебное поле. Идентификатор элемента в сервисе.
//    * ИдентификаторРодителя                    - Строка - Служебное поле. Идентификатор родителя элемента в сервисе.
//    В случае ошибки будет возвращено Неопределено, описание ошибки см. в Журнале регистрации.
//
Функция ПолучитьИзСервисаДанныеОКЕИ(Коды) Экспорт
	
	Отказ = Ложь;
	
	ОписаниеПараметровЗапроса            = ОблачныеКлассификаторыСлужебный.ОписаниеПараметровЗапросаЭлементыОКЕИ();
	ОписаниеПараметровЗапроса.НаборПолей = РаботаСНоменклатуройСлужебный.НаборПолейСтандартный();
	ОписаниеПараметровЗапроса.Коды       = Коды;
	
	ПараметрыКоманды = ОблачныеКлассификаторыСлужебный.ПараметрыЗапросаЭлементыОКЕИ(ОписаниеПараметровЗапроса);
	ДанныеСервиса    = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Возврат ДанныеСервиса;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Получение разделов классификатора ТН ВЭД.
// Разделами являются элементы верхнего уровня иерархии.
//
// Параметры:
//  Параметры        - Структура - параметры процедуры.
//  АдресРезультата  - Строка - адрес результата.
//
Процедура ПолучитьРазделыТНВЭД(Знач Параметры, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	// Получение разделов классификатора
	ОписаниеПараметровЗапроса            = ОблачныеКлассификаторыСлужебный.ОписаниеПараметровЗапросаРазделыТНВЭД();
	ОписаниеПараметровЗапроса.НаборПолей = РаботаСНоменклатуройСлужебный.НаборПолейСтандартный();
	
	ПараметрыКоманды = ОблачныеКлассификаторыСлужебный.ПараметрыЗапросаРазделыТНВЭД(ОписаниеПараметровЗапроса);
	ДанныеСервиса    = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	// Определение уже имеющихся в базе элементов классификатора	
	Если Не Отказ Тогда
		ОпределитьЗагруженныеЭлементыТНВЭД(ДанныеСервиса, Отказ);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ДанныеСервиса, АдресРезультата);
	
КонецПроцедуры

// Получение подчиненных элементов классификатора ТН ВЭД.
//
// Параметры:
//  Параметры		 - Структура - параметры процедуры.
//  АдресРезультата	 - Строка - адрес результата.
//
Процедура ПолучитьПодчиненныеЭлементыТНВЭД(Знач Параметры, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	// Получение подчиненных элементов (детей)
	ОписаниеПараметровЗапроса = ОблачныеКлассификаторыСлужебный.ОписаниеПараметровЗапросаПодчиненныеЭлементыТНВЭД();
	ОписаниеПараметровЗапроса.НаборПолей = РаботаСНоменклатуройСлужебный.НаборПолейСтандартный();
	ОписаниеПараметровЗапроса.Код        = Параметры.Код;
	
	ПараметрыКоманды = ОблачныеКлассификаторыСлужебный.ПараметрыЗапросаПодчиненныеЭлементыТНВЭД(ОписаниеПараметровЗапроса);
	ДанныеСервиса    = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	// Определение уже имеющихся в базе элементов классификатора	
	Если Не Отказ Тогда
		ОпределитьЗагруженныеЭлементыТНВЭД(ДанныеСервиса, Отказ);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ДанныеСервиса, АдресРезультата);
	
КонецПроцедуры

// Получение элементов классификатора ТН ВЭД по строке поиска.
//
// Параметры:
//  Параметры        - Структура - параметры процедуры.
//  АдресРезультата  - Строка - адрес результата.
//
Процедура ОбработатьПоисковыйЗапросТНВЭД(Знач Параметры, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	УдалитьНедопустимыеСимволыURI(Параметры.СтрокаПоиска);
	
	ОписаниеПараметровЗапроса = ОблачныеКлассификаторыСлужебный.ОписаниеПараметровЗапросаПоискЭлементовТНВЭД();
	ОписаниеПараметровЗапроса.НаборПолей = РаботаСНоменклатуройСлужебный.НаборПолейСтандартный();
	ОписаниеПараметровЗапроса.СтрокаПоиска = Параметры.СтрокаПоиска;
	ОписаниеПараметровЗапроса.НомерСтраницы = Параметры.НомерСтраницы;
	
	ПараметрыКоманды = ОблачныеКлассификаторыСлужебный.ПараметрыЗапросаПоискЭлементовТНВЭД(ОписаниеПараметровЗапроса);
	ДанныеСервиса    = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	// Определение уже имеющихся в базе элементов классификатора	
	Если Не Отказ Тогда
		ОпределитьЗагруженныеЭлементыТНВЭД(ДанныеСервиса, Отказ);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ДанныеСервиса, АдресРезультата);
	
КонецПроцедуры

// Получение ветки классификатора ТН ВЭД.
//
// Параметры:
//  Параметры		 - Структура - параметры процедуры.
//  АдресРезультата	 - Строка - адрес результата.
//
Процедура ПолучитьВеткуТНВЭД(Знач Параметры, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	// Загрузка разделов
	Если Параметры.Кэш = Неопределено Тогда
		
		ОписаниеПараметровЗапроса            = ОблачныеКлассификаторыСлужебный.ОписаниеПараметровЗапросаРазделыТНВЭД();
		ОписаниеПараметровЗапроса.НаборПолей = РаботаСНоменклатуройСлужебный.НаборПолейСтандартный();
		
		ПараметрыКоманды = ОблачныеКлассификаторыСлужебный.ПараметрыЗапросаРазделыТНВЭД(ОписаниеПараметровЗапроса);
		Параметры.Кэш    = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
		
		// Определение уже имеющихся в базе элементов классификатора
		Если Не Отказ Тогда
			
			Если Не Параметры.РежимВыбораЭлемента Тогда
				ОпределитьЗагруженныеЭлементыТНВЭД(Параметры.Кэш, Отказ);
			Иначе
				Параметры.Кэш.Колонки.Добавить("Пометка",  Новый ОписаниеТипов("Число",,,
					Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
				Параметры.Кэш.Колонки.Добавить("Загружен", Новый ОписаниеТипов("Число",,,
					Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
			КонецЕсли;
			
		Иначе
			ПоместитьВоВременноеХранилище(Параметры.Кэш, АдресРезультата);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Получение списка предков
	ОписаниеПараметровЗапроса = ОблачныеКлассификаторыСлужебный.ОписаниеПараметровЗапросаПредкиЭлементаТНВЭД();
	ОписаниеПараметровЗапроса.НаборПолей = РаботаСНоменклатуройСлужебный.НаборПолейСтандартный();
	ОписаниеПараметровЗапроса.Код        = Параметры.Код;
	
	ПараметрыКоманды = ОблачныеКлассификаторыСлужебный.ПараметрыЗапросаПредкиЭлементаТНВЭД(ОписаниеПараметровЗапроса);
	ДанныеСервисаПредки = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ
		Или ДанныеСервисаПредки = Неопределено
		Или Не ДанныеСервисаПредки.Количество() Тогда
		ПоместитьВоВременноеХранилище(Параметры.Кэш, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	// Определение ближайшего кэшированного предка к заданному элементу
	Параметры.Кэш.Индексы.Добавить("Код");
	
	БлижайшийЗагруженный = Неопределено;
	
	Для Каждого Предок Из ДанныеСервисаПредки Цикл
		
		КэшированныеЭлементы = Параметры.Кэш.НайтиСтроки(Новый Структура("Код", Предок.Код));
		
		Для Каждого КэшированныйПредок Из КэшированныеЭлементы Цикл
			
			Если БлижайшийЗагруженный = Неопределено Тогда
				БлижайшийЗагруженный = КэшированныйПредок;
			Иначе
				БлижайшийЗагруженный = ?(КэшированныйПредок.Порядок > БлижайшийЗагруженный.Порядок,
					КэшированныйПредок, БлижайшийЗагруженный);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Получение детей для всех предков, начиная с ближайшего кэшированного.
	ОписаниеПараметровЗапроса = ОблачныеКлассификаторыСлужебный.ОписаниеПараметровЗапросаПодчиненныеЭлементыТНВЭД();
	ОписаниеПараметровЗапроса.НаборПолей = РаботаСНоменклатуройСлужебный.НаборПолейСтандартный();
	
	ДанныеСервиса = Неопределено;
	
	Для Каждого Предок Из ДанныеСервисаПредки Цикл
		
		Если Предок.Порядок < БлижайшийЗагруженный.Порядок Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеПараметровЗапроса.Код = Предок.Код;
		ПараметрыКоманды = ОблачныеКлассификаторыСлужебный.ПараметрыЗапросаПодчиненныеЭлементыТНВЭД(ОписаниеПараметровЗапроса);
		ДанныеСервисаФрагмент = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
		
		Если ДанныеСервиса = Неопределено Тогда
			ДанныеСервиса = ДанныеСервисаФрагмент.Скопировать();
			Продолжить;
		КонецЕсли;
		
		Для Каждого ДанныеЭлемента Из ДанныеСервисаФрагмент Цикл
			ЗаполнитьЗначенияСвойств(ДанныеСервиса.Добавить(), ДанныеЭлемента);
		КонецЦикла;
		
	КонецЦикла;
	
	// Определение уже имеющихся в базе элементов классификатора
	Если Не Параметры.РежимВыбораЭлемента Тогда
		ОпределитьЗагруженныеЭлементыТНВЭД(ДанныеСервиса, Отказ);
	КонецЕсли;
	
	// Обновление кэша формы
	Для Каждого ПолученныеДанные Из ДанныеСервиса Цикл
		ЗаполнитьЗначенияСвойств(Параметры.Кэш.Добавить(), ПолученныеДанные);
	КонецЦикла;
	
	Параметры.Кэш.Сортировать("Порядок Возр");
	
	ПоместитьВоВременноеХранилище(Параметры.Кэш, АдресРезультата);
	
КонецПроцедуры

// Загрузка в базу подобранных элементов классификатора ТН ВЭД.
//
// Параметры:
//  Параметры        - Структура - параметры процедуры.
//  АдресРезультата  - Строка - адрес результата.
//
Процедура ЗагрузитьВБазуДанныеТНВЭД(Знач Параметры, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	// Получение уже существующих в базе кодов элементов классификатора
	СуществующиеКоды = Новый Массив;
	ОблачныеКлассификаторыПереопределяемый.ОпределитьЗагруженныеЭлементыТНВЭД(СуществующиеКоды);
	
	// Нормализация формата кодов (приведение к виду "ХХХХ ХХ ХХХ Х") и запись их в соответствие
	КодыИмеющихсяЭлементов = ПолучитьНормализованныеКодыЭлементовТНВЭД(СуществующиеКоды);
	
	// Формирование таблицы с итоговыми данными для загрузки
	ИтоговыеДанные = Параметры.Кэш.СкопироватьКолонки();
	
	Параметры.Кэш.Индексы.Добавить("Идентификатор");
	Параметры.Кэш.Индексы.Добавить("Код");
	Параметры.Кэш.Индексы.Добавить("КодРодителя");
	
	РазмерПорции = 1000;
	
	ОписаниеПараметровЗапроса = ОблачныеКлассификаторыСлужебный.ОписаниеПараметровЗапросаПотомкиЭлементаТНВЭД();
	ОписаниеПараметровЗапроса.НаборПолей = РаботаСНоменклатуройСлужебный.НаборПолейСтандартный();
	
	Для Каждого Идентификатор Из Параметры.ВыбранныеЭлементы Цикл
		
		СтрокаКэша = Параметры.Кэш.Найти(Идентификатор, "Идентификатор");
		
		Если СтрДлина(СтрокаКэша.Код) = 13 Тогда // заполнение данных кэшированных листовых элементов
			
			МассивСтрок = Параметры.Кэш.НайтиСтроки(Новый Структура("Код", СтрокаКэша.Код));
			
			Для Каждого ДанныеКэша Из МассивСтрок Цикл
				ЗаполнитьЗначенияСвойств(ИтоговыеДанные.Добавить(), ДанныеКэша);
			КонецЦикла;
			
		Иначе // загрузка и обработка потомков нелистовых групп, дети которых отсутствуют в кэше
			
			ТекстОшибки = НСтр("ru = 'Ошибка получения потомков элемента с кодом %1 из сервиса.'");
			
			РебенокНелистовогоВКэше = Параметры.Кэш.Найти(СтрокаКэша.Код, "КодРодителя");
			
			// Наличие хотя бы одного ребенка является однозначным признаком наличия в кэше всех детей
			Если РебенокНелистовогоВКэше <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ОписаниеПараметровЗапроса.Код               = СтрокаКэша.Код;
			ОписаниеПараметровЗапроса.КоличествоЗаписей = РазмерПорции;
			ОписаниеПараметровЗапроса.НомерСтраницы     = 1;
			
			ПараметрыКоманды = ОблачныеКлассификаторыСлужебный.ПараметрыЗапросаПотомкиЭлементаТНВЭД(ОписаниеПараметровЗапроса);
			ДанныеСервисаФрагмент = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
			
			Если Отказ Тогда
				ВызватьИсключение СтрШаблон(ТекстОшибки, СтрокаКэша.Код);
			КонецЕсли;
			
			Для Каждого ДанныеЭлемента Из ДанныеСервисаФрагмент Цикл
				Если СтрДлина(ДанныеЭлемента.Код) = 13
					И КодыИмеющихсяЭлементов[ДанныеЭлемента.Код] = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(ИтоговыеДанные.Добавить(), ДанныеЭлемента);
				КонецЕсли;
			КонецЦикла;
			
			Если ДанныеСервисаФрагмент.Количество() = РазмерПорции Тогда
				
				Пока Истина Цикл
					
					ОписаниеПараметровЗапроса.НомерСтраницы = ОписаниеПараметровЗапроса.НомерСтраницы + 1;
					
					ПараметрыКоманды = ОблачныеКлассификаторыСлужебный.ПараметрыЗапросаПотомкиЭлементаТНВЭД(ОписаниеПараметровЗапроса);
					ДанныеСервисаФрагмент = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
					
					Если Отказ Тогда
						ВызватьИсключение СтрШаблон(ТекстОшибки, СтрокаКэша.Код);
					ИначеЕсли Не ДанныеСервисаФрагмент.Количество() Тогда
						Прервать;
					КонецЕсли;
					
					Для Каждого ДанныеЭлемента Из ДанныеСервисаФрагмент Цикл
						Если СтрДлина(ДанныеЭлемента.Код) = 13
							И КодыИмеющихсяЭлементов[ДанныеЭлемента.Код] = Неопределено Тогда
							ЗаполнитьЗначенияСвойств(ИтоговыеДанные.Добавить(), ДанныеЭлемента);
						КонецЕсли;
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ИтоговыеДанные.Количество() Тогда
		ВызватьИсключение НСтр("ru = 'Нет данных для загрузки.'");
	КонецЕсли;
	
	// Создание элементов классификатора в базе
	ОблачныеКлассификаторыПереопределяемый.СоздатьОбновитьЭлементыТНВЭД(ИтоговыеДанные, Отказ);
	
	// Обновление признаков загруженных элементов
	Если Параметры.ОбновитьКэш Тогда
		
		ОпределитьЗагруженныеЭлементыТНВЭД(Параметры.Кэш, Отказ);
		
		Если Отказ Тогда
			ВызватьИсключение НСтр("ru = 'Не удалось обновить признаки загруженных элементов.'");
		КонецЕсли;
		
		ПоместитьВоВременноеХранилище(Параметры.Кэш, АдресРезультата);
		
	КонецЕсли;
	
КонецПроцедуры

// Нормализация формата кода элемента классификатора ТН ВЭД.
// Используется для приведения кода формата "ХХХХХХХХХХ" к стандартному виду "ХХХХ ХХ ХХХ Х".
//
// Параметры:
//  Код - Строка - код элемента классификатора в формате "ХХХХХХХХХХ".
//
Процедура НормализоватьКодЭлементаТНВЭД(Код) Экспорт
	
	Код = СокрЛП(Код);
	
	Если Не СтрНайти(Код, " ") Тогда
		
		Если СтрДлина(Код) > 4 Тогда
			Код = Лев(Код, 4) + " " + Сред(Код, 5, СтрДлина(Код));   // ХХХХХ -> ХХХХ Х
		КонецЕсли;
		
		Если СтрДлина(Код) > 7 Тогда
			Код = Лев(Код, 7) + " " + Сред(Код, 8, СтрДлина(Код));   // ХХХХ ХХХ -> ХХХХ ХХ Х
		КонецЕсли;
		
		Если СтрДлина(Код) > 11 Тогда
			Код = Лев(Код, 11) + " " + Сред(Код, 12, СтрДлина(Код)); // ХХХХ ХХ ХХХХ -> ХХХХ ХХ ХХХ Х
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Нормализация формата кодов элементов классификатора ТН ВЭД и запись их в соответствие.
// Используется для приведения кодов формата "ХХХХХХХХХХ" к стандартному виду "ХХХХ ХХ ХХХ Х".
//
// Параметры:
//  Коды - Массив - перечень кодов элементов классификатора, которые необходимо нормализовать.
//                  Коды элементов должны быть представлены строками в формате "ХХХХХХХХХХ".
//                  Строки в формате "ХХХХ ХХ ХХХ Х" будут проигнорированы.
//
// Возвращаемое значение:
//  Соответствие - где ключи - нормализованные коды (значение отсутствует).
//
Функция ПолучитьНормализованныеКодыЭлементовТНВЭД(Коды)
	
	НормализованныеКоды = Новый Соответствие;
	
	Для Каждого Код Из Коды Цикл
		НормализоватьКодЭлементаТНВЭД(Код);
		НормализованныеКоды.Вставить(Код, Истина);
	КонецЦикла;
	
	Возврат НормализованныеКоды;
	
КонецФункции

Процедура ОпределитьЗагруженныеЭлементыТНВЭД(ДанныеСервиса, Отказ)
	
	// Получение уже существующих в базе кодов элементов классификатора
	СуществующиеКоды = Новый Массив;
	ОблачныеКлассификаторыПереопределяемый.ОпределитьЗагруженныеЭлементыТНВЭД(СуществующиеКоды);
	
	// Нормализация формата кодов (приведение к виду "ХХХХ ХХ ХХХ Х") и запись их в соответствие
	КодыИмеющихсяЭлементов = ПолучитьНормализованныеКодыЭлементовТНВЭД(СуществующиеКоды);
	
	// Установка принадлежности имеющихся кодов к иерархии полученных из сервиса элементов и подсчет количества
	Если ДанныеСервиса.Колонки.Найти("Пометка") = Неопределено Тогда
			ДанныеСервиса.Колонки.Добавить("Пометка",  Новый ОписаниеТипов("Число",,,
		Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
	КонецЕсли;
	
	Если ДанныеСервиса.Колонки.Найти("Загружен") = Неопределено Тогда
		ДанныеСервиса.Колонки.Добавить("Загружен", Новый ОписаниеТипов("Число",,,
			Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
	КонецЕсли;
	
	// Код                   - Код элемента, полученного в ответе сервиса;
	// Количество            - Количество имеющихся в базе элементов, входящих в иерархию полученного из сервиса
	// ЭлементКлассификатора - Полные данные элемента, полученные в ответе сервиса
	ДанныеИмеющихсяЭлементов = Новый ТаблицаЗначений;
	ДанныеИмеющихсяЭлементов.Колонки.Добавить("Код");
	ДанныеИмеющихсяЭлементов.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ДанныеИмеющихсяЭлементов.Колонки.Добавить("ЭлементКлассификатора");
	
	ДанныеИмеющихсяЭлементов.Индексы.Добавить("Код");
	
	ОпределитьПринадлежностьКИерархииЭлементовТНВЭД(ДанныеСервиса, КодыИмеющихсяЭлементов, ДанныеИмеющихсяЭлементов, Отказ);
	
	// Определение степени наличия (часть/все) потомков для полученных из сервиса нелистовых элементов в базе
	// (по аналогии с состояниями флажков: 0 - не загружен, 1 - загружен полностью, 2 - загружен частично).
	Для Каждого СтрокаИмеющиесяДанные Из ДанныеИмеющихсяЭлементов Цикл
		ЭлементКлассификатора          = СтрокаИмеющиесяДанные.ЭлементКлассификатора;
		ЭлементКлассификатора.Пометка  = ?(ЭлементКлассификатора.ПотомковИтого = СтрокаИмеющиесяДанные.Количество, 1, 2);
		ЭлементКлассификатора.Загружен = ЭлементКлассификатора.Пометка;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОпределитьПринадлежностьКИерархииЭлементовТНВЭД(ДанныеСервиса, КодыИмеющихсяЭлементов,
		ДанныеИмеющихсяЭлементов, Отказ)
	
	Если Не КодыИмеющихсяЭлементов.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСервиса.Индексы.Добавить("КодРодителя");
	
	ДополнениеГруппБезКода = Новый Соответствие;
	ПодчиненныеГруппБезКода = Новый Соответствие;
	
	// Проверка наличия в данных сервиса элементов классификатора, являющихся Разделами
	// (корневыми элементами всего классификатора).
	ПрисутствуютРазделы = ДанныеСервиса.Найти("", "КодРодителя") <> Неопределено;
	
	// Определение кодов элементов, подчиненных Разделам (Подгрупп),
	// для установления связи имеющихся в базе элементов с Разделами
	// (так как, фактически, Разделы классификатора не имеют кодов;
	// возвращаемые сервисом коды Разделов - служебные).
	ПодгруппыИРазделы = Новый Соответствие;
	
	Если ПрисутствуютРазделы Тогда
		
		ДанныеСервиса.Индексы.Добавить("Код");
		
		КодыИмеющихсяПодгрупп = Новый Соответствие;
		
		Для Каждого ИмеющийсяКод Из КодыИмеющихсяЭлементов Цикл
			КодыИмеющихсяПодгрупп.Вставить(Лев(ИмеющийсяКод.Ключ, 2));
		КонецЦикла;
		
		МассивПараметров = Новый Массив;
		ТекущийПараметр = "";
		КоличествоЭлементов = 0;
		Для Каждого ИмеющийсяКодПодгруппы Из КодыИмеющихсяПодгрупп Цикл
			
			ТекущийПараметр = ?(ПустаяСтрока(ТекущийПараметр), "", ТекущийПараметр + ",") + ИмеющийсяКодПодгруппы.Ключ;
			
			КоличествоЭлементов = КоличествоЭлементов + 1;
			
			Если КоличествоЭлементов = 100 Тогда // Максимальный размер разовой выборки из сервиса
				МассивПараметров.Добавить(ТекущийПараметр);
				ТекущийПараметр = "";
				КоличествоЭлементов = 0;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ПустаяСтрока(ТекущийПараметр) Тогда
			МассивПараметров.Добавить(ТекущийПараметр);
		КонецЕсли;
		
		Для Каждого ПараметрКоды Из МассивПараметров Цикл
			
			// Получение данных Подгрупп
			ОписаниеПараметровЗапроса            = ОблачныеКлассификаторыСлужебный.ОписаниеПараметровЗапросаЭлементыТНВЭД();
			ОписаниеПараметровЗапроса.НаборПолей = РаботаСНоменклатуройСлужебный.НаборПолейСтандартный();
			ОписаниеПараметровЗапроса.Коды       = ПараметрКоды;
			
			ПараметрыКоманды       = ОблачныеКлассификаторыСлужебный.ПараметрыЗапросаЭлементыТНВЭД(ОписаниеПараметровЗапроса);
			ДанныеСервисаПодгруппы = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
			
			// Определение связи Подгрупп с Разделами
			Для Каждого ЭлементКлассификатора Из ДанныеСервисаПодгруппы Цикл
				ПодгруппыИРазделы.Вставить(ЭлементКлассификатора.Код, ЭлементКлассификатора.КодРодителя);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ИмеющийсяКод Из КодыИмеющихсяЭлементов Цикл
		
		// Определение принадлежности к иерархии для всех элементов, кроме Разделов,
		// производится непосредственно по коду элемента.
		Для Каждого ЭлементКлассификатора Из ДанныеСервиса Цикл
			
			// В данных сервиса имеются элементы с кодами, начинающимися с префикса "Н". Такие значения поля Код
			// являются служебными (фактически в классификаторе у этих элементов код отсутствует), поэтому для
			// целей проверки таких элементов, их потомки подгружаются из сервиса.
			Если Лев(ЭлементКлассификатора.Код, 1) <> "Н" Тогда
				
				Если ЭлементКлассификатора.Код = Лев(ИмеющийсяКод.Ключ, СтрДлина(ЭлементКлассификатора.Код)) Тогда
					
					Если СтрДлина(ЭлементКлассификатора.Код) = 13 Тогда // Установка признака Загружен у листового элемента
						ЭлементКлассификатора.Пометка  = 1;
						ЭлементКлассификатора.Загружен = 1;
						Продолжить;
					КонецЕсли;
					
					СтрокаИмеющиесяДанные = ДанныеИмеющихсяЭлементов.Найти(ЭлементКлассификатора.Код, "Код");
					
					Если СтрокаИмеющиесяДанные = Неопределено Тогда
						СтрокаИмеющиесяДанные = ДанныеИмеющихсяЭлементов.Добавить();
					КонецЕсли;
					
					СтрокаИмеющиесяДанные.Код                   = ЭлементКлассификатора.Код;
					СтрокаИмеющиесяДанные.Количество            = СтрокаИмеющиесяДанные.Количество + 1;
					СтрокаИмеющиесяДанные.ЭлементКлассификатора = ЭлементКлассификатора;
					
				КонецЕсли;
				
			Иначе
				
				// Получение вспомогательных данных из сервиса
				Если ДополнениеГруппБезКода[ЭлементКлассификатора.Код] = Неопределено Тогда
					
					ОписаниеПараметровЗапроса = ОблачныеКлассификаторыСлужебный.ОписаниеПараметровЗапросаПотомкиЭлементаТНВЭД();
					ОписаниеПараметровЗапроса.НаборПолей = РаботаСНоменклатуройСлужебный.НаборПолейСтандартный();
					ОписаниеПараметровЗапроса.Код        = ЭлементКлассификатора.Код;
					
					ПараметрыКоманды = ОблачныеКлассификаторыСлужебный.ПараметрыЗапросаПотомкиЭлементаТНВЭД(
						ОписаниеПараметровЗапроса);
					ДанныеСервисаВспомогательные = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
					
					Если Отказ Тогда
						Возврат;
					КонецЕсли;
					
					ДополнениеГруппБезКода.Вставить(ЭлементКлассификатора.Код, Истина);
					
					Для Каждого ДополнениеДанных Из ДанныеСервисаВспомогательные Цикл
						Если СтрДлина(ДополнениеДанных.Код) = 13
							И Лев(ДополнениеДанных.Код, 1) <> "Н" Тогда
							ПодчиненныеГруппБезКода.Вставить(ДополнениеДанных.Код, ЭлементКлассификатора.Код);
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
				// Определение принадлежности к иерархии на основании вспомогательных данных
				Если ЭлементКлассификатора.Код = ПодчиненныеГруппБезКода[ИмеющийсяКод.Ключ] Тогда
					
					СтрокаИмеющиесяДанные = ДанныеИмеющихсяЭлементов.Найти(ЭлементКлассификатора.Код, "Код");
					
					Если СтрокаИмеющиесяДанные = Неопределено Тогда
						СтрокаИмеющиесяДанные = ДанныеИмеющихсяЭлементов.Добавить();
					КонецЕсли;
					
					СтрокаИмеющиесяДанные.Код                   = ЭлементКлассификатора.Код;
					СтрокаИмеющиесяДанные.Количество            = СтрокаИмеющиесяДанные.Количество + 1;
					СтрокаИмеющиесяДанные.ЭлементКлассификатора = ЭлементКлассификатора;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Принадлежность к иерархии Разделов определяется по коду подчиненной Подгруппы
		Если Не ПрисутствуютРазделы Тогда
			Продолжить;
		КонецЕсли;
		
		КодПодгруппы = Лев(ИмеющийсяКод.Ключ, 2);
		КодРаздела   = ПодгруппыИРазделы[КодПодгруппы];
		
		ЭлементКлассификатора = ДанныеСервиса.Найти(КодРаздела, "Код"); 
		
		Если ЭлементКлассификатора <> Неопределено Тогда
			
			СтрокаИмеющиесяДанные = ДанныеИмеющихсяЭлементов.Найти(ЭлементКлассификатора.Код, "Код");
			
			Если СтрокаИмеющиесяДанные = Неопределено Тогда
				СтрокаИмеющиесяДанные = ДанныеИмеющихсяЭлементов.Добавить();
			КонецЕсли;
			
			СтрокаИмеющиесяДанные.Код                   = ЭлементКлассификатора.Код;
			СтрокаИмеющиесяДанные.Количество            = СтрокаИмеющиесяДанные.Количество + 1;
			СтрокаИмеющиесяДанные.ЭлементКлассификатора = ЭлементКлассификатора;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьНедопустимыеСимволыURI(СтрокаДляОбработки)
	
	СтрокаДляОбработки = СтрЗаменить(СтрокаДляОбработки, "&", "");
	СтрокаДляОбработки = СтрЗаменить(СтрокаДляОбработки, "$", "");
	СтрокаДляОбработки = СтрЗаменить(СтрокаДляОбработки, "+", "");
	СтрокаДляОбработки = СтрЗаменить(СтрокаДляОбработки, ",", "");
	СтрокаДляОбработки = СтрЗаменить(СтрокаДляОбработки, "/", "");
	СтрокаДляОбработки = СтрЗаменить(СтрокаДляОбработки, "\", "");
	СтрокаДляОбработки = СтрЗаменить(СтрокаДляОбработки, ":", "");
	СтрокаДляОбработки = СтрЗаменить(СтрокаДляОбработки, ";", "");
	СтрокаДляОбработки = СтрЗаменить(СтрокаДляОбработки, "=", "");
	СтрокаДляОбработки = СтрЗаменить(СтрокаДляОбработки, "?", "");
	СтрокаДляОбработки = СтрЗаменить(СтрокаДляОбработки, "@", "");
	СтрокаДляОбработки = СтрЗаменить(СтрокаДляОбработки, "<", "");
	СтрокаДляОбработки = СтрЗаменить(СтрокаДляОбработки, ">", "");
	СтрокаДляОбработки = СтрЗаменить(СтрокаДляОбработки, "[", "");
	СтрокаДляОбработки = СтрЗаменить(СтрокаДляОбработки, "]", "");
	СтрокаДляОбработки = СтрЗаменить(СтрокаДляОбработки, "{", "");
	СтрокаДляОбработки = СтрЗаменить(СтрокаДляОбработки, "}", "");
	СтрокаДляОбработки = СтрЗаменить(СтрокаДляОбработки, "|", "");
	СтрокаДляОбработки = СтрЗаменить(СтрокаДляОбработки, "^", "");
	СтрокаДляОбработки = СтрЗаменить(СтрокаДляОбработки, "%", "");
	
КонецПроцедуры

#КонецОбласти