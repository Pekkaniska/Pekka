#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает таблицу используемых аналитик
//  
// Возвращаемое значение:
//  ТаблицаЗначений - таблица используемых аналитик. 
//		* Ссылка - Ссылка на аналитику.
//      * Представление - Представление аналитики.
//		* УчитыватьПоКоличеству - Признак учета по количеству.
//
Функция ВидыАналитики()Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АналитикиСтатейБюджетов.Ссылка                КАК Ссылка,
	|	АналитикиСтатейБюджетов.Представление         КАК Представление,
	|	АналитикиСтатейБюджетов.УчитыватьПоКоличеству КАК УчитыватьПоКоличеству
	|ИЗ
	|	ПланВидовХарактеристик.АналитикиСтатейБюджетов КАК АналитикиСтатейБюджетов";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает признак использования аналитики в статьях бюджетов
//
// Параметры
//  АналитикаСтатейБюджетов - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов - Аналитика для проверки.
//  
// Возвращаемое значение:
//  Булево - признак использования.
//
Функция ИспользуетсяВСтатьяхБюджетов(АналитикаСтатейБюджетов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтатьиБюджетов.Ссылка
	|ИЗ
	|	Справочник.СтатьиБюджетов КАК СтатьиБюджетов
	|ГДЕ
	|	СтатьиБюджетов.ВидАналитики1 = &АналитикаСтатейБюджетов
	|	ИЛИ СтатьиБюджетов.ВидАналитики2 = &АналитикаСтатейБюджетов
	|	ИЛИ СтатьиБюджетов.ВидАналитики3 = &АналитикаСтатейБюджетов
	|	ИЛИ СтатьиБюджетов.ВидАналитики4 = &АналитикаСтатейБюджетов
	|	ИЛИ СтатьиБюджетов.ВидАналитики5 = &АналитикаСтатейБюджетов
	|	ИЛИ СтатьиБюджетов.ВидАналитики6 = &АналитикаСтатейБюджетов";
	Запрос.УстановитьПараметр("АналитикаСтатейБюджетов", АналитикаСтатейБюджетов);
	
	Результат = НЕ Запрос.Выполнить().Пустой();
	
	Возврат Результат;
	
КонецФункции

// Возвращает типы значений аналитики
//
// Параметры
//  АналитикаСтатейБюджетов - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов  - Значение аналитики.
//  
// Возвращаемое значение:
//  ДоступныеТипы - Соответствие
//         Ключ - Тип -  Тип значения аналитики.
//         Значение - Полное имя объекта метаданных.
//        
Функция ДоступныеТипыАналитикиСтатейБюджетов(АналитикаСтатейБюджетов) Экспорт
	
	ДоступныеТипы = Новый Соответствие;
	
	Для каждого Тип Из АналитикаСтатейБюджетов.ТипЗначения.Типы() Цикл
		ДоступныеТипы.Вставить(Тип, Метаданные.НайтиПоТипу(Тип).ПолноеИмя());
	КонецЦикла;
	
	Возврат ДоступныеТипы;
	
КонецФункции

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП.
// 
// Возвращаемое значание:
// 	Массив - Имена блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить("ТипЗначения");
	Результат.Добавить("ПредставлениеВалюты");
	Результат.Добавить("ПредставлениеЕдиницыИзмерения");
	Результат.Добавить("УчитыватьПоВалюте");
	Результат.Добавить("УчитыватьПоКоличеству");
	
	Возврат Результат;
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АналитикиСтатейБюджетов.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.АналитикиСтатейБюджетов КАК АналитикиСтатейБюджетов
	|ГДЕ
	|	АналитикиСтатейБюджетов.Ссылка В (ЗНАЧЕНИЕ(ПланВидовХарактеристик.АналитикиСтатейБюджетов.Заказы), ЗНАЧЕНИЕ(ПланВидовХарактеристик.АналитикиСтатейБюджетов.ОбъектыСтроительства))
	|	И (ВЫРАЗИТЬ(АналитикиСтатейБюджетов.ПредставлениеТипаЗначения КАК СТРОКА(1))) = &ПустаяСтрока";
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеСправочника = Метаданные.ПланыВидовХарактеристик.АналитикиСтатейБюджетов;
	ПолноеИмяОбъекта = МетаданныеСправочника.ПолноеИмя();
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Если СправочникОбъект = Неопределено Тогда
				
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				
				ЗафиксироватьТранзакцию();
				Продолжить;
				
			КонецЕсли;
		
			СправочникОбъект.ПредставлениеТипаЗначения = БюджетированиеКлиентСервер.ПредставлениеТипаЗначения(СправочникОбъект);
				
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось заблокировать справочник: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									МетаданныеСправочника,
									Выборка.Ссылка,
									ТекстСообщения);
			Продолжить;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет предопределенные элементы
//
Процедура ЗаполнитьПредопределенныеАналитикиСтатейБюджетов() Экспорт
	
	ПВХОбъект = ПланыВидовХарактеристик.АналитикиСтатейБюджетов.НоменклатураБюджетирования.ПолучитьОбъект();
	ПВХОбъект.УчитыватьПоКоличеству = Истина;
	ПВХОбъект.ЗаполнениеЕдиницыИзмерения = "ЕдиницаИзмерения";
	ПВХОбъект.ПредставлениеЕдиницыИзмерения = НСтр("ru = '[Единица хранения]'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПВХОбъект);
	
	ПВХОбъект = ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ВидыНоменклатуры.ПолучитьОбъект();
	ПВХОбъект.УчитыватьПоКоличеству = Истина;
	ПВХОбъект.ЗаполнениеЕдиницыИзмерения = "ЕдиницаИзмерения";
	ПВХОбъект.ПредставлениеЕдиницыИзмерения = НСтр("ru = '[Единица хранения]'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПВХОбъект);
	
	ПВХОбъект = ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ДенежныеСредстваБюджетирования.ПолучитьОбъект();
	ПВХОбъект.УчитыватьПоВалюте = Истина;
	ПВХОбъект.ЗаполнениеВалюты = "ВалютаДенежныхСредств";
	ПВХОбъект.ПредставлениеВалюты = НСтр("ru = '[Валюта денежных средств]'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПВХОбъект);
	
	ПВХОбъект = ПланыВидовХарактеристик.АналитикиСтатейБюджетов.Договоры.ПолучитьОбъект();
	ПВХОбъект.УчитыватьПоВалюте = Истина;
	ПВХОбъект.ЗаполнениеВалюты = "ВалютаВзаиморасчетов";
	ПВХОбъект.ПредставлениеВалюты = НСтр("ru = '[Валюта взаиморасчетов]'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПВХОбъект);
	
	Выборка = ПланыВидовХарактеристик.АналитикиСтатейБюджетов.Выбрать();
	Пока Выборка.Следующий() Цикл
		ПВХОбъект = Выборка.ПолучитьОбъект();
		ПВХОбъект.ПредставлениеТипаЗначения = Строка(ПВХОбъект.ТипЗначения);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПВХОбъект);
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

#КонецЕсли