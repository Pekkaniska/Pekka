
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	об = РеквизитФормыВЗначение("Объект");
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(об, Отказ, СтандартнаяОбработка, ЭтаФорма, ДопПараметрыОткрытие);
	ЗначениеВРеквизитФормы(Об,"Объект");
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	уатОбщегоНазначенияСервер.ЗаполнитьШапкуДокумента(
		Объект,
		,
		Параметры.ЗначениеКопирования,
		Параметры.Основание,
		,
		,
		,
		Параметры.ЗначенияЗаполнения
	);
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ВалютаРасчетов = Объект.Сценарий.Валюта;
	НациональнаяВалюта = мВалютаРегламентированногоУчета;
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата,
						Новый Структура("Валюта", НациональнаяВалюта));
	КурсНациональнаяВалюта = СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Объект.УчитыватьНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС);
		Объект.СуммаВключаетНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.СуммаВключаетНДС);
		
		Если НЕ ЗначениеЗаполнено(Объект.ДатаПланирования) Тогда
			Объект.ДатаПланирования = НачалоМесяца(ДобавитьМесяц(ТекущаяДата(), 1));
		КонецЕсли;
	КонецЕсли;
	
	мТекущийСценарий = Объект.Сценарий;
	
	ОбновитьНомерТСвТЧ();
	
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.Подразделение, "Объект.Организация");
	
	// УправлениеПредприятием.СлужебныеПодсистемы
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	// Конец УправлениеПредприятием.СлужебныеПодсистемы
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	НДСВсего = Объект.СоставПлана.Итог("СуммаНДС");
	ОбновитьВсегоВТЧСоставПлана();
	ОбновитьИнфНадпись();
	ОбновитьНадписьПериодПланирования();
	УстановитьТекстКолонкиДетализация();
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьНомерТСвТЧ();
	ОбновитьВсегоВТЧСервер();
	ОбновитьПараметрВыработкиВременныйСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьНомерТСвТЧ();
	ОбновитьВсегоВТЧСервер();
	ОбновитьПараметрВыработкиВременныйСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			//Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаПланированияПриИзменении(Элемент)
	уатОбщегоНазначенияТиповые.уатВыровнятьДатуПоНачалуПериода(Объект.ДатаПланирования, уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.Сценарий, "Периодичность"));
	ОбновитьНадписьПериодПланирования();
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьДетализацииПриИзменении(Элемент)
	ОбновитьНадписьПериодПланирования();
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	ДетПланирования = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.Сценарий, "ДетализацияПланирования");
	мТекущийСценарий_ДетПланирования = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(мТекущийСценарий, "ДетализацияПланирования");
	мУчетПоСуммам = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.Сценарий, "УчетПоСуммам");
	мУчетПоКоличеству = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.Сценарий, "УчетПоКоличеству");
	
	Если ДетПланирования = ПредопределенноеЗначение("Перечисление.уатДетализацияПланирования.Номенклатура") Тогда
	 
		ПоказатьПредупреждение(Новый ОписаниеОповещения("СценарийПриИзмененииПредупреждение", ЭтотОбъект,
		Новый Структура("ДетПланирования, мТекущийСценарий_ДетПланирования, мУчетПоСуммам, мУчетПоКоличеству",
		ДетПланирования, мТекущийСценарий_ДетПланирования, мУчетПоСуммам, мУчетПоКоличеству)),
		"В документе ""Планирование работы ТС"" возможно использовать только сценарии с детализацией планирования по типам ТС, моделям ТС и ТС. 
		| Будет установлен начальный сценарий", 10);
        Возврат;
		
	ИначеЕсли ДетПланирования <> мТекущийСценарий_ДетПланирования Тогда
		
		Если Объект.СоставПлана.Количество() > 0 Тогда
			
			ПоказатьВопрос(Новый ОписаниеОповещения("СценарийПриИзмененииВопрос", ЭтотОбъект,
			Новый Структура("ДетПланирования, мТекущийСценарий_ДетПланирования, мУчетПоСуммам, мУчетПоКоличеству",
			ДетПланирования, мТекущийСценарий_ДетПланирования, мУчетПоСуммам, мУчетПоКоличеству)), 
			"Выбран сценарий с детализацией планирования """ + ДетПланирования + """." + Символы.ПС +
			"Детализация планирования текущего сценария """ + мТекущийСценарий_ДетПланирования + """." + Символы.ПС +
			"Принять изменение и очистить табличную часть?", РежимДиалогаВопрос.ОКОтмена, 0, КодВозвратаДиалога.Отмена);
            Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СценарийПриИзмененииПродолжение(мУчетПоСуммам, мУчетПоКоличеству);
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзмененииВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    КодВозврата = РезультатВопроса;
    
    Если КодВозврата = КодВозвратаДиалога.ОК Тогда
        Объект.СоставПлана.Очистить();
    Иначе
        Объект.Сценарий = мТекущийСценарий;
    КонецЕсли;
    
    СценарийПриИзмененииПродолжение(ДополнительныеПараметры.мУчетПоСуммам, ДополнительныеПараметры.мУчетПоКоличеству);

КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзмененииПредупреждение(ДополнительныеПараметры) Экспорт
    
    ДетПланирования = ДополнительныеПараметры.ДетПланирования;
    мТекущийСценарий_ДетПланирования = ДополнительныеПараметры.мТекущийСценарий_ДетПланирования;
    
    Объект.Сценарий = мТекущийСценарий;
    
    СценарийПриИзмененииПродолжение(ДополнительныеПараметры.мУчетПоСуммам, ДополнительныеПараметры.мУчетПоКоличеству);

КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзмененииПродолжение(мУчетПоСуммам, мУчетПоКоличеству)
	//установка валюты из сценария
	СтруктураДанные = ПолучитьДанныеСценарийПриИзменении(Объект.Дата, Объект.ВалютаДокумента, Объект.Сценарий);
	ВалютаРасчетовПередИзменением = ВалютаРасчетов;
	ВалютаРасчетов = СтруктураДанные.ВалютаРасчетов;
	Если ЗначениеЗаполнено(Объект.Сценарий) Тогда 
		Объект.КурсДокумента	   = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1,
										СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
		Объект.КратностьДокумента = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1,
										СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
	КонецЕсли;
	Если (ЗначениеЗаполнено(Объект.Сценарий)
		И ЗначениеЗаполнено(ВалютаРасчетов)
		И Объект.Сценарий <> мТекущийСценарий
		И ВалютаРасчетовПередИзменением <> СтруктураДанные.ВалютаРасчетов)
		И Объект.ВалютаДокумента <> СтруктураДанные.ВалютаРасчетов И мУчетПоСуммам и мУчетПоКоличеству Тогда
		
		Объект.ВалютаДокумента = СтруктураДанные.ВалютаРасчетов;
		ПоказатьПредупреждение(, НСтр("ru = 'Изменилась валюта по сценарию! 
							| Необходимо проверить валюту документа!'"));
		ОбработатьИзмененияПоКнопкеЦеныИВалюты(ВалютаРасчетовПередИзменением, Истина);
	КонецЕсли;
	
	ПериодичностьДетализацииПред = Объект.ПериодичностьДетализации;
	Объект.ПериодичностьДетализации = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.Сценарий, "Периодичность");
	Если Объект.ПериодичностьДетализации <> ПериодичностьДетализацииПред Тогда
		ПериодичностьДетализацииПриИзменении(Неопределено);
	КонецЕсли;
	
	уатОбщегоНазначенияТиповые.уатВыровнятьДатуПоНачалуПериода(Объект.ДатаПланирования, Объект.ПериодичностьДетализации);
	
	// установки по типу планируемых показателей
	УстановитьВидимостьДоступность();
	
	УстановитьТекстКолонкиДетализация();
	
	мТекущийСценарий = Объект.Сценарий;
КонецПроцедуры

// Получает набор данных с сервера для процедуры СценарийПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеСценарийПриИзменении(Дата, ВалютаДокумента, Сценарий)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
	"ВалютаРасчетов",
	Сценарий.Валюта);
	
	СтруктураДанные.Вставить(
	"ВалютаРасчетовКурсКратность",
	РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Сценарий.Валюта)));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	УчитыватьНДСПередИзменением = Объект.УчитыватьНДС;
	СуммаВключаетНДСПередИзменением = Объект.СуммаВключаетНДС;
	
	Объект.УчитыватьНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС"));
	Объект.СуммаВключаетНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.СуммаВключаетНДС"));

	Если Объект.УчитыватьНДС <> УчитыватьНДСПередИзменением ИЛИ Объект.СуммаВключаетНДС <> СуммаВключаетНДСПередИзменением Тогда
		уатОбщегоНазначенияКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтаФорма, "СоставПлана");
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
	КонецЕсли;	
	
	ОбновитьВсегоВТЧСоставПлана();
	РассчитатьСуммуДокумента();
		
	// Сформируем надпись цены и валюты.
	СтруктураНадписи = Новый Структура;
	СтруктураНадписи.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураНадписи.Вставить("ВалютаРасчетов", ВалютаРасчетов);
	СтруктураНадписи.Вставить("Курс", Объект.КурсДокумента);
	СтруктураНадписи.Вставить("КурсНациональнаяВалюта", КурсНациональнаяВалюта);
	СтруктураНадписи.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураНадписи.Вставить("УчитыватьНДС", Объект.УчитыватьНДС);
	
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСоставПлана

&НаКлиенте
Процедура СоставПланаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если НЕ ЗначениеЗаполнено(уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.Сценарий, "ДетализацияПланирования")) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(, "Не указана детализация планирования у сценария
			|или не заполнен сценарий!", 10);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоставПланаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекСтрока = Элементы.СоставПлана.ТекущиеДанные;
	Если НоваяСтрока И НЕ ЗначениеЗаполнено(ТекСтрока.ДетализацияПланирования) Тогда
		ДетПланирования = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.Сценарий, "ДетализацияПланирования");
		Если ДетПланирования = ПредопределенноеЗначение("Перечисление.уатДетализацияПланирования.МодельТС") Тогда
			ТекСтрока.ДетализацияПланирования = ПредопределенноеЗначение("Справочник.уатМоделиТС.ПустаяСсылка");
		ИначеЕсли ДетПланирования = ПредопределенноеЗначение("Перечисление.уатДетализацияПланирования.ТипТС") Тогда
			ТекСтрока.ДетализацияПланирования = ПредопределенноеЗначение("Справочник.ТипыТранспортныхСредств.ПустаяСсылка");
		ИначеЕсли ДетПланирования = ПредопределенноеЗначение("Перечисление.уатДетализацияПланирования.ТС") Тогда
			ТекСтрока.ДетализацияПланирования = ПредопределенноеЗначение("Справочник.ТранспортныеСредства.ПустаяСсылка");
		Иначе
			ТекСтрока.ДетализацияПланирования = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекСтрока.ПараметрВыработкиВременный Тогда
		Элементы.СоставПланаКоличество.ФорматРедактирования = "ЧДЦ=2; ЧРД=:";
	Иначе
		Элементы.СоставПланаКоличество.ФорматРедактирования = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоставПланаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧСоставПлана();
КонецПроцедуры

&НаКлиенте
Процедура СоставПланаПослеУдаления(Элемент)
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧСоставПлана();
КонецПроцедуры

&НаКлиенте
Процедура СоставПланаПараметрВыработкиПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.СоставПлана.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВидБилета) И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ПараметрВыработки) Тогда
		СтрокаТабличнойЧасти.ВидБилета = ПредопределенноеЗначение("Справочник.уатВидыБилетов.ПустаяСсылка");
	КонецЕсли;
	
	ОбновитьПараметрВыработкиВременныйСервер();
	
	Если СтрокаТабличнойЧасти.ПараметрВыработкиВременный Тогда
		Элементы.СоставПланаКоличество.ФорматРедактирования = "ЧДЦ=2; ЧРД=:";
	Иначе
		Элементы.СоставПланаКоличество.ФорматРедактирования = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоставПланаЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.СоставПлана.ТекущиеДанные;
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура СоставПланаКоличествоПриИзменении(Элемент)
	ТекСтрока = Элементы.СоставПлана.ТекущиеДанные;
	Если ТекСтрока.ПараметрВыработкиВременный Тогда
		уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрока.Количество);
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура СоставПланаСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.СоставПлана.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура СоставПланаСтавкаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.СоставПлана.ТекущиеДанные;
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура СоставПланаНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораГруза(Элемент, Элементы.СоставПлана.ТекущиеДанные.Номенклатура, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СоставПланаВидБилетаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.СоставПлана.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ПараметрВыработки) И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВидБилета) Тогда
		СтрокаТабличнойЧасти.ПараметрВыработки = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоставПланаНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.СоставПлана.ТекущиеДанные;
	СтрокаТабличнойЧасти.СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
									СтрокаТабличнойЧасти.Номенклатура, "СтавкаНДС");
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура СоставПланаНомерТСПриИзменении(Элемент)
	ТекСтрока = Элементы.СоставПлана.ТекущиеДанные;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСПриИзменении(ТекСтрока.ДетализацияПланирования, ТекСтрока.НомерТС, Объект.Организация);
	
	ОбновитьНомерТСвТЧ();
КонецПроцедуры

&НаКлиенте
Процедура СоставПланаНомерТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("уатОрганизация", Объект.Организация);
	КонецЕсли;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСНачалоВыбора(Элемент, Элементы.СоставПлана.ТекущиеДанные.ДетализацияПланирования, СтруктураОтбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СоставПланаНомерТСОчистка(Элемент, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОчистка(Элементы.СоставПлана.ТекущиеДанные.ДетализацияПланирования);
КонецПроцедуры

&НаКлиенте
Процедура СоставПланаНомерТСОткрытие(Элемент, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОткрытие(Элементы.СоставПлана.ТекущиеДанные.ДетализацияПланирования, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СоставПланаНомерТСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекСтрока = Элементы.СоставПлана.ТекущиеДанные;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОбработкаВыбора(ТекСтрока.ДетализацияПланирования, ТекСтрока.НомерТС, ВыбранноеЗначение, СтандартнаяОбработка, Объект.Организация);
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СоставПланаНомерТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура СоставПланаНомерТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// УправлениеПредприятием.СлужебныеПодсистемы
&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
КонецПроцедуры
// Конец УправлениеПредприятием.СлужебныеПодсистемы

&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Команда)
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ВалютаДокумента);
	ОбновитьВсегоВТЧСоставПлана();
	РассчитатьСуммуДокумента();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПлан(Команда)
	Если НЕ ЗначениеЗаполнено(уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.Сценарий, "ДетализацияПланирования")) Тогда
		ПоказатьПредупреждение(, "Не указана детализация планирования у сценария
		|или не заполнен сценарий!", 10);
		Возврат;
	КонецЕсли;
	
	Если Объект.СоставПлана.Количество() > 0 Тогда
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПланЗавершение1", ЭтотОбъект), "Очистить табличную часть перед заполнением?", РежимДиалогаВопрос.ДаНетОтмена);
        Возврат;
	КонецЕсли;
	
	ЗаполнитьПланФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПланЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Отмена Тогда
        Возврат;
    ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
        Объект.СоставПлана.Очистить();
    КонецЕсли;
    
    ЗаполнитьПланФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПланФрагмент()
    
    Перем ПараметрыФормы, Рез;
    
    ПараметрыФормы = Новый Структура;
    ПараметрыФормы.Вставить("Сценарий", Объект.Сценарий);
    ПараметрыФормы.Вставить("Организация", Объект.Организация);
    ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
    ПараметрыФормы.Вставить("ДатаНач", Объект.ДатаПланирования);
    ПараметрыФормы.Вставить("ДатаКон", Объект.ДатаПланирования);
    ПараметрыФормы.Вставить("УчитыватьНДС", Объект.УчитыватьНДС);
    ПараметрыФормы.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
    уатОбщегоНазначенияТиповые.уатВыровнятьДатуПоКонцуПериода(ПараметрыФормы.ДатаКон,
    уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.Сценарий, "Периодичность"));
    
    Рез = Неопределено;
    
    
    ОткрытьФорму("Обработка.уатПомощникПланированияРаботыТС.Форма", ПараметрыФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("ЗаполнитьПланЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПланЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Рез = Результат;
    Если ТипЗнч(Рез) = Тип("Массив") Тогда
        Объект.СоставПлана.Очистить();
        Для Каждого ТекСтрока Из Рез Цикл
            НоваяСтрока = Объект.СоставПлана.Добавить();
            ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
        КонецЦикла;
        
        ОбновитьНомерТСвТЧ();
        ОбновитьВсегоВТЧСервер();
        ОбновитьПараметрВыработкиВременныйСервер();
        Элементы.СоставПлана.Обновить();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПлан(Команда)
	Если Объект.СоставПлана.Количество() > 0 Тогда
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьПланЗавершение", ЭтотОбъект), "Будет выполнена очистка состава плана. Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	КонецЕСли;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПланЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Объект.СоставПлана.Очистить();
    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервереБезКонтекста
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("РазностьДат", уатОбщегоНазначенияСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая,
							ДатаПередИзменением));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	//видимость колонки НомерТС - для планирования по ТС
	ДетализацияТС = (уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.Сценарий, "ДетализацияПланирования") = ПредопределенноеЗначение("Перечисление.уатДетализацияПланирования.ТС"));
	Элементы.СоставПланаНомерТС.Видимость = ДетализацияТС;
	Элементы.СоставПланаДетализацияПланирования.Видимость = НЕ ДетализацияТС;
	
	мУчетПоСуммам = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.Сценарий, "УчетПоСуммам");
	мУчетПоКоличеству = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.Сценарий, "УчетПоКоличеству");
	
	// установим для сумм
	Элементы.СоставПланаСумма.Видимость = мУчетПоСуммам;
	Элементы.СоставПланаСтавкаНДС.Видимость = мУчетПоСуммам И Объект.УчитыватьНДС;
	Элементы.СоставПланаСуммаНДС.Видимость = мУчетПоСуммам И Объект.УчитыватьНДС;
	Элементы.СоставПланаВсего.Видимость = мУчетПоСуммам И Объект.УчитыватьНДС;
	
	// установим для количества
	Элементы.СоставПланаПараметрВыработки.Видимость = мУчетПоКоличеству;
	Элементы.СоставПланаКоличество.Видимость = мУчетПоКоличеству;
	
	// установим для цены
	Элементы.СоставПланаЦена.Видимость = (мУчетПоСуммам И мУчетПоКоличеству);
	
	Элементы.РедактироватьЦеныИВалюту.Видимость = (мУчетПоСуммам И мУчетПоКоличеству);
	Элементы.ЦеныИвалюта.Видимость = (мУчетПоСуммам И мУчетПоКоличеству);
	
	// Сформируем надпись цены и валюты.
	СтруктураНадписи = Новый Структура("ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, 
									|СуммаВключаетНДС, УчитыватьНДС",
									Объект.ВалютаДокумента, ВалютаРасчетов, Объект.КурсДокумента,
									КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, Объект.УчитыватьНДС);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
КонецПроцедуры

// Процедура для обновления надписи периода планирования в соответствии с периодичностью плана
//
&НаКлиенте
Процедура ОбновитьНадписьПериодПланирования()
	Если Объект.ДатаПланирования = '00010101' Тогда
		НадписьПериод = "<не указан>";
		Возврат;
	КонецЕсли;
	
	НачДата = Объект.ДатаПланирования;
	КонДата = Объект.ДатаПланирования;
	уатОбщегоНазначенияТиповые.уатВыровнятьПериод(НачДата, КонДата, Объект.ПериодичностьДетализации);
	НадписьПериод = Формат(НачДата, "ДФ = дд.ММ.гггг") + " - " + Формат(КонДата, "ДФ = дд.ММ.гггг");
КонецПроцедуры

// Устанавливает текст шапки в колонке "Детализация" ТС, Тип ТС или Модель ТС
&НаКлиенте
Процедура УстановитьТекстКолонкиДетализация()
	ДетПланирования = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.Сценарий, "ДетализацияПланирования");
	Если ДетПланирования = ПредопределенноеЗначение("Перечисление.уатДетализацияПланирования.МодельТС") Тогда
		Элементы.СоставПланаДетализацияПланирования.Заголовок = "Модель ТС";
	ИначеЕсли ДетПланирования = ПредопределенноеЗначение("Перечисление.уатДетализацияПланирования.ТипТС") Тогда
		Элементы.СоставПланаДетализацияПланирования.Заголовок = "Тип ТС";
	ИначеЕсли ДетПланирования = ПредопределенноеЗначение("Перечисление.уатДетализацияПланирования.ТС") Тогда
		Элементы.СоставПланаДетализацияПланирования.Заголовок = "ТС";
	Иначе
		Элементы.СоставПланаДетализацияПланирования.Заголовок = "Детализация";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнфНадпись()
	ВременнаяСтрока = "";
	
	Если (ЗначениеЗаполнено(Объект.ВалютаДокумента))
		И (Объект.ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда
		
		ВременнаяСтрока = ВременнаяСтрока + уатОбщегоНазначенияТиповые.ПолучитьИнформациюКурсаВалютыСтрокой(
		Объект.ВалютаДокумента, 
		Объект.КурсДокумента,
		Объект.КратностьДокумента,
		мВалютаРегламентированногоУчета) + ", ";
		
	КонецЕсли;
	
	ИнфНадпись = ВременнаяСтрока;
КонецПроцедуры

&НаСервере
Процедура ОбновитьНомерТСвТЧ(Знач ТекСтрока = Неопределено)
	Если ТекСтрока <> Неопределено Тогда
		ТекСтрока = Объект.СоставПлана.НайтиПоИдентификатору(ТекСтрока);
	КонецЕсли;
	
	Если ТекСтрока = Неопределено Тогда
		Для Каждого ТекСтрокаТЧ Из Объект.СоставПлана Цикл
			ТекСтрокаТЧ.НомерТС = уатОбщегоНазначения.уатПредставлениеТС(ТекСтрокаТЧ.ДетализацияПланирования, Объект.Организация);
		КонецЦикла;
	Иначе
		ТекСтрока.НомерТС = уатОбщегоНазначения.уатПредставлениеТС(ТекСтрока.ДетализацияПланирования, Объект.Организация);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти)
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсегоВТЧСоставПлана()
	Для Каждого СтрокаТабличнойЧасти Из Объект.СоставПлана Цикл
		РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьВсегоВТЧСервер()
	Для Каждого СтрокаТабличнойЧасти Из Объект.СоставПлана Цикл
		СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрВыработкиВременныйСервер()
	Для Каждого ТекСтрокаТЧ Из Объект.СоставПлана Цикл
		ТекСтрокаТЧ.ПараметрВыработкиВременный = ТекСтрокаТЧ.ПараметрВыработки.Временный;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАСЧЕТА НДС, ЦЕНЫ И ВАЛЮТА

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь)
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",		  Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("КурсДокумента",		  Объект.КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента",	  Объект.КратностьДокумента);
	//СтруктураПараметров.Вставить("Контрагент",			  Объект.Контрагент);
	//СтруктураПараметров.Вставить("Договор",				  Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация",			  Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",		  Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",	  Ложь);
	СтруктураПараметров.Вставить("ПересчитатьЦены",		  ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",  Ложь);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",      Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НалогообложениеНДС",	  Объект.УчитыватьНДС);
	// Для объедининенного решения с БП 3
	СтруктураПараметров.Вставить("ДокументБезНДС",       НЕ Объект.УчитыватьНДС);
	// Для объедининенного решения с БП 3

	
	// 2. Открываем форму "Цены и Валюта".
	ДополнительныеПараметры = Новый Структура("ВалютаРасчетовПередИзменением, ПересчитатьЦены", ВалютаРасчетовПередИзменением, ПересчитатьЦены);
	СтруктураЦеныИВалюта = ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,,
		Новый ОписаниеОповещения("ОбработкаЗакрытияФормыЦеныИВалюта", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаКлиенте
Процедура ОбработкаЗакрытияФормыЦеныИВалюта(Результат, ДополнительныеПараметры) Экспорт
	СтруктураЦеныИВалюта = Результат;
	
	// 3. Перезаполняем табличную часть "Номенклатура", если были внесены изменения в форме "Цены и Валюта".
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") Тогда
		
		// Для объедининенного решения с БП 3
		уатОбщегоНазначенияКлиент.ЗаполнитьСтруктуруЦеныИВалютыДляБП3(СтруктураЦеныИВалюта, Объект.ВалютаДокумента,
			ДополнительныеПараметры.ВалютаРасчетовПередИзменением, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС);
		// Для объедининенного решения с БП 3
		
		Если СтруктураЦеныИВалюта.Свойство("ВалютаДокумента") И СтруктураЦеныИВалюта.Свойство("Курс") И СтруктураЦеныИВалюта.Свойство("Кратность") И
			СтруктураЦеныИВалюта.Свойство("СуммаВключаетНДС") И  СтруктураЦеныИВалюта.Свойство("НалогообложениеНДС") Тогда
			Объект.ВалютаДокумента		   = СтруктураЦеныИВалюта.ВалютаДокумента;
			Объект.КурсДокумента	   = СтруктураЦеныИВалюта.Курс;
			Объект.КратностьДокумента = СтруктураЦеныИВалюта.Кратность;
			Объект.СуммаВключаетНДС		   = СтруктураЦеныИВалюта.СуммаВключаетНДС;
			Объект.УчитыватьНДС			   = СтруктураЦеныИВалюта.НалогообложениеНДС;
		КонецЕсли;
		// Пересчитываем сумму если изменился признак Налогообложение НДС.
		Если СтруктураЦеныИВалюта.Свойство("НалогообложениеНДС") И СтруктураЦеныИВалюта.Свойство("ПредНалогообложениеНДС") Тогда
			Если СтруктураЦеныИВалюта.НалогообложениеНДС <> СтруктураЦеныИВалюта.ПредНалогообложениеНДС Тогда
				ЗаполнитьСтавкуНДСПоНалогообложениеНДС();		
			КонецЕсли;
		КонецЕсли;
		
		// Пересчитываем цены по валюте.
		Если СтруктураЦеныИВалюта.Свойство("ПересчитатьЦены") Тогда
			Если  СтруктураЦеныИВалюта.ПересчитатьЦены Тогда	
				уатОбщегоНазначенияКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтаФорма, ДополнительныеПараметры.ВалютаРасчетовПередИзменением, "СоставПлана");
			КонецЕсли;
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак "Сумма включает НДС".
		Если СтруктураЦеныИВалюта.Свойство("СуммаВключаетНДС") И СтруктураЦеныИВалюта.Свойство("ПредСуммаВключаетНДС") Тогда
			Если СтруктураЦеныИВалюта.СуммаВключаетНДС <> СтруктураЦеныИВалюта.ПредСуммаВключаетНДС Тогда
				уатОбщегоНазначенияКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтаФорма, "СоставПлана");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Сформируем надпись цены и валюты.
	СтруктураНадписи = Новый Структура;
	СтруктураНадписи.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураНадписи.Вставить("ВалютаРасчетов", ВалютаРасчетов);
	СтруктураНадписи.Вставить("Курс", Объект.КурсДокумента);
	СтруктураНадписи.Вставить("КурсНациональнаяВалюта", КурсНациональнаяВалюта);
	СтруктураНадписи.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураНадписи.Вставить("УчитыватьНДС", Объект.УчитыватьНДС);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	УстановитьВидимостьДоступность();
	ОбновитьИнфНадпись();
КонецПроцедуры

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения.
// 
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	//СтавкаНДСПоУмолчанию = уатОбщегоНазначенияПовтИсп.ПолучитьСтавкуНДСНоль();
	СтавкаНДСПоУмолчанию = Перечисления.СтавкиНДС.ПустаяСсылка();
	Для каждого СтрокаТабличнойЧасти Из Объект.СоставПлана Цикл
		СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
		СтрокаТабличнойЧасти.СуммаНДС = 0;
	КонецЦикла;
	
	Если Объект.УчитыватьНДС Тогда
		Элементы.СоставПланаСтавкаНДС.Видимость = Истина;
		Элементы.СоставПланаСуммаНДС.Видимость  = Истина;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.СоставПлана Цикл
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
			КонецЕсли;	
			
			СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			
		КонецЦикла;
		
	Иначе
		Элементы.СоставПланаСтавкаНДС.Видимость = Ложь;
		Элементы.СоставПланаСуммаНДС.Видимость  = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

// Процедура рассчитывает сумму в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.ПараметрВыработкиВременный Тогда
		Колич = Цел(СтрокаТабличнойЧасти.Количество) + (СтрокаТабличнойЧасти.Количество - Цел(СтрокаТабличнойЧасти.Количество))/60*100;
	Иначе
		Колич = СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	СтрокаТабличнойЧасти.Сумма = Колич * СтрокаТабличнойЧасти.Цена;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

// Рассчитывается сумма НДС в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	
	СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
	СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
	СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	
КонецПроцедуры // РассчитатьСуммуНДС()

&НаКлиенте
Процедура РассчитатьСуммуДокумента()
	НДСВсего = Объект.СоставПлана.Итог("СуммаНДС");
	Объект.СуммаДокумента = Объект.СоставПлана.Итог("Сумма");
	Если Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС Тогда
		Объект.СуммаДокумента = Объект.СуммаДокумента + НДСВсего;
	КонецЕсли;
КонецПроцедуры

// Функция возвращает текст надписи "Цены и валюта".
//
&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНадписьЦеныИВалюта(СтруктураНадписи)
	
	ТекстНадписи = "";
	
	// Валюта.
	Если ЗначениеЗаполнено(СтруктураНадписи.ВалютаДокумента) Тогда
		ТекстНадписи = НСтр("ru = 'Валюта: %Валюта%, курс: %Курс%'");
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Валюта%", СокрЛП(Строка(СтруктураНадписи.ВалютаДокумента)));
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Курс%", ?((НЕ ЗначениеЗаполнено(СтруктураНадписи.ВалютаРасчетов)) ИЛИ
						СтруктураНадписи.ВалютаДокумента = СтруктураНадписи.ВалютаРасчетов, СокрЛП(Строка(СтруктураНадписи.Курс)), 
						СокрЛП(Строка(СтруктураНадписи.КурсНациональнаяВалюта))));
	Иначе
		ТекстНадписи = НСтр("ru = 'Валюта: <нет>'");
	КонецЕсли;
	
	//// Налогообложение НДС.
	//Если ПустаяСтрока(ТекстНадписи) Тогда
	//	ТекстНадписи = ТекстНадписи + НСтр("ru = '%НалогообложениеНДС%'");
	//Иначе
	//	ТекстНадписи = ТекстНадписи + НСтр("ru = '; %НалогообложениеНДС%'");
	//КонецЕсли;
	//ТекстНадписи = СтрЗаменить(ТекстНадписи, "%НалогообложениеНДС%", ?(СтруктураНадписи.УчитыватьНДС, "Учитывать НДС",
	//																"Не учитывать НДС"));
	//
	//// Флаг сумма включает НДС.
	//Если СтруктураНадписи.УчитыватьНДС Тогда
	//	Если ПустаяСтрока(ТекстНадписи) Тогда
	//		ТекстНадписи = ТекстНадписи + НСтр("ru = '%СуммаВключаетНДС%'");
	//	Иначе
	//		ТекстНадписи = ТекстНадписи + НСтр("ru = '; %СуммаВключаетНДС%'");
	//	КонецЕсли;
	//	ТекстНадписи = СтрЗаменить(ТекстНадписи, "%СуммаВключаетНДС%", ?(СтруктураНадписи.СуммаВключаетНДС,
	//																	"Сумма вкл. НДС", "Сумма не вкл. НДС"));
	//КонецЕсли;
	
	Возврат ТекстНадписи;
	
КонецФункции // СформироватьНадписьЦеныИВалюта()

#КонецОбласти
