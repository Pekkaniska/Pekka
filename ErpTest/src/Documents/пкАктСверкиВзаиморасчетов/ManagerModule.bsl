
Функция СформироватьПечатнуюФормуАктСверкиВзаимныхРасчетов(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДок = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;	
	
	Для Каждого ЭлементМассива ИЗ МассивОбъектов Цикл
	
	Если Не ПервыйДокумент Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	ПервыйДокумент = Ложь;

	
	НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
	
	Макет = Документы.пкАктСверкиВзаиморасчетов.ПолучитьМакет("АктСверки");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	пкАктСверкиВзаиморасчетов.Дата,
	|	пкАктСверкиВзаиморасчетов.ДатаНачалаПериодаСверки КАК ДатаНачалаПериода,
	|	пкАктСверкиВзаиморасчетов.ДатаОкончанияПериодаСверки КАК ДатаОкончания,
	|	пкАктСверкиВзаиморасчетов.Комментарий,
	|	пкАктСверкиВзаиморасчетов.Контрагент КАК НаименованиеКонтрагента,
	|	пкАктСверкиВзаиморасчетов.Номер,
	|	пкАктСверкиВзаиморасчетов.Организация,
	|	пкАктСверкиВзаиморасчетов.Ответственный,
	|	пкАктСверкиВзаиморасчетов.СальдоНаКонецПоДаннымОрганизации,
	|	пкАктСверкиВзаиморасчетов.СальдоНаНачалоПоДаннымОрганизации,
	|	пкАктСверкиВзаиморасчетов.СверкаСогласована,
	|	пкАктСверкиВзаиморасчетов.Валюта,
	|	пкАктСверкиВзаиморасчетов.Руководитель,
	|	пкАктСверкиВзаиморасчетов.Контрагент.Партнер.пкПодразделение КАК Регион,
	|	пкАктСверкиВзаиморасчетов.СальдоНаНачалоПоДаннымКонтрагента,
	|	пкАктСверкиВзаиморасчетов.пкПодписант,
	|	пкАктСверкиВзаиморасчетов.ДолжностьРуководителяКонтрагента,
	|	пкАктСверкиВзаиморасчетов.ФИОРуководителяКонтрагента,
	|	пкАктСверкиВзаиморасчетов.Организация.НаименованиеПолное КАК НазваниеОрганизации,
	|	пкАктСверкиВзаиморасчетов.Организация.Наименование КАК НаименованиеОрганизации
	|ИЗ
	|	Документ.пкАктСверкиВзаиморасчетов КАК пкАктСверкиВзаиморасчетов
	|ГДЕ
	|	пкАктСверкиВзаиморасчетов.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	пкАктСверкиВзаиморасчетовПоДаннымОрганизации.Дата КАК ДатаДокумента,
	|	пкАктСверкиВзаиморасчетовПоДаннымОрганизации.Документ КАК Документ,
	|	СУММА(пкАктСверкиВзаиморасчетовПоДаннымОрганизации.Дебет) КАК СуммаОборотДТ,
	|	СУММА(пкАктСверкиВзаиморасчетовПоДаннымОрганизации.Кредит) КАК СуммаОборотКТ
	|ИЗ
	|	Документ.пкАктСверкиВзаиморасчетов.ПоДаннымОрганизации КАК пкАктСверкиВзаиморасчетовПоДаннымОрганизации
	|ГДЕ
	|	пкАктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка В(&Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	пкАктСверкиВзаиморасчетовПоДаннымОрганизации.Дата,
	|	пкАктСверкиВзаиморасчетовПоДаннымОрганизации.Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	пкАктСверкиВзаиморасчетовПоДаннымКонтрагента.Дата КАК ДатаДокументаКонтр,
	|	пкАктСверкиВзаиморасчетовПоДаннымКонтрагента.Документ КАК Документ,
	|	пкАктСверкиВзаиморасчетовПоДаннымКонтрагента.ДебетКонтрагента КАК СуммаОборотДТКонтр,
	|	пкАктСверкиВзаиморасчетовПоДаннымКонтрагента.КредитКонтрагента КАК СуммаОборотКТКонтр
	|ИЗ
	|	Документ.пкАктСверкиВзаиморасчетов.ПоДаннымКонтрагента КАК пкАктСверкиВзаиморасчетовПоДаннымКонтрагента
	|ГДЕ
	|	пкАктСверкиВзаиморасчетовПоДаннымКонтрагента.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокументаКонтр
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	пкАктСверкиВзаиморасчетовДоговорыКонтрагента.ДоговорыКонтрагентов,
	|	ПодразделенияОрганизаций.Представление
	|ИЗ
	|	Документ.пкАктСверкиВзаиморасчетов.ДоговорыКонтрагента КАК пкАктСверкиВзаиморасчетовДоговорыКонтрагента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|		ПО пкАктСверкиВзаиморасчетовДоговорыКонтрагента.ДоговорыКонтрагентов.Подразделение = ПодразделенияОрганизаций.Ссылка
	|ГДЕ
	|	пкАктСверкиВзаиморасчетовДоговорыКонтрагента.Ссылка = &Ссылка";
	
	Запрос.Параметры.Вставить("Ссылка", ЭлементМассива);
	ВыборкаПакет = Запрос.ВыполнитьПакет();
	
	ВыборкаДокумента = ВыборкаПакет[0].Выбрать();
	ВыборкаДокумента.Следующий();
	
	СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ВыборкаДокумента.Организация, ВыборкаДокумента.Дата);
	СведенияОКонтрагенте =  ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ВыборкаДокумента.НаименованиеКонтрагента, ВыборкаДокумента.Дата);
	
	// ++ШАПКА
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	
	РезультатЗапросаПоДоговорам = ВыборкаПакет[3].Выбрать();
	//ТабРезультатЗапросаПоДоговорам = ВыборкаПакет[3].Выгрузить();
	КоличествоДоговоров = РезультатЗапросаПоДоговорам.Количество();
	
	//Если КоличествоДоговоров = 0 Тогда
	//	Договора = " всем."
	//Иначе
	//	Пока РезультатЗапросаПоДоговорам.Следующий() Цикл
	//		Договора = Строка(РезультатЗапросаПоДоговорам.ДоговорыКонтрагентов)+"; "+ Строка(Договора);
	//	КонецЦикла;		
	//КонецЕсли;
	
		
	ТекстЗаголовка = "взаимных расчетов за период с " + Формат(ВыборкаДокумента.ДатаНачалаПериода, "ДФ=dd.MM.yyyy") + " по " + Формат(ВыборкаДокумента.ДатаОкончания, "ДФ=dd.MM.yyyy")
	+ " между " + ВыборкаДокумента.НазваниеОрганизации + " и " + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте,"ПолноеНаименование") + ".";
	//+ " по договорам: " + Строка(Договора);
	ОбластьШапка.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	
	ОбластьШапка.Параметры.Дата = Формат(ВыборкаДокумента.Дата, "ДФ=dd.MM.yyyy");
	ОбластьШапка.Параметры.Регион = ВыборкаДокумента.Регион;
	СтрЗаголовокТаблица = "Мы, нижеподписавшиеся, "
	+ ?(ВыборкаДокумента.ДолжностьРуководителяКонтрагента<>"",ВыборкаДокумента.ДолжностьРуководителяКонтрагента,"_______________________")+" "
	+ ВыборкаДокумента.НазваниеОрганизации 
	+ " " + ?(ВыборкаДокумента.Руководитель<>"",ВыборкаДокумента.Руководитель,"__________________________________________") + ", с одной стороны, "
	+ "и " + ?(ВыборкаДокумента.ДолжностьРуководителяКонтрагента<>"",ВыборкаДокумента.ДолжностьРуководителяКонтрагента,"___________________________") 
	+ " " + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте,"ПолноеНаименование") + " " 
	+ ?(НЕ ЗначениеЗаполнено(ВыборкаДокумента.ФИОРуководителяКонтрагента),"_____________________________________________",ВыборкаДокумента.ФИОРуководителяКонтрагента) + ", с другой стороны, "
	+ "составили настоящий акт сверки в том, что состояние взаимных расчетов по данным учета следующее:";
	
	ОбластьШапка.Параметры.СтрЗаголовокТаблица = СтрЗаголовокТаблица;
		ТабДок.Вывести(ОбластьШапка);
	// --ШАПКА
	
	
	
	
	Если КоличествоДоговоров = 0 Тогда
		
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьШапкаТаблицы.Параметры.НазваниеОрганизации = ВыборкаДокумента.НазваниеОрганизации;
	ОбластьШапкаТаблицы.Параметры.НаименованиеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте,"ПолноеНаименование");
	ОбластьШапкаТаблицы.Параметры.ВалютаДокумента = ВыборкаДокумента.Валюта;
	ТабДок.Вывести(ОбластьШапкаТаблицы);
				
	ОбластьНачОстатки = Макет.ПолучитьОбласть("НачОстатки");
	Если ВыборкаДокумента.СальдоНаНачалоПоДаннымОрганизации < 0 Тогда
		ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокКт = -1* ВыборкаДокумента.СальдоНаНачалоПоДаннымОрганизации;
	Иначе
		ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокДт = ВыборкаДокумента.СальдоНаНачалоПоДаннымОрганизации;
	КонецЕсли;
	
	Если ВыборкаДокумента.СальдоНаНачалоПоДаннымКонтрагента < 0 Тогда
		ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокДтКонтр = -1* ВыборкаДокумента.СальдоНаНачалоПоДаннымКонтрагента;
	Иначе
		ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокКтКонтр = ВыборкаДокумента.СальдоНаНачалоПоДаннымКонтрагента;
	КонецЕсли;	
	
	ТабДок.Вывести(ОбластьНачОстатки); 
	
	ОбластьОбороты = Макет.ПолучитьОбласть("Обороты");
	ИтСуммаОборотДт      = 0;
	ИтСуммаОборотКт      = 0;
	ИтСуммаОборотДтКонтр = 0;
	ИтСуммаОборотКтКонтр = 0;
	
	ТабДок.НачатьАвтогруппировкуСтрок();
	
	//++ Для наименований
	ПредставленияДокументов = ПредставленияДокументов();
	ПредставленияВладельцевДокументов = ПредставленияВладельцевДокументов();
	ПредставлениеДокументаПоОрганизации = "";
	ПредставлениеДокументаПоКонтрагенту = "";	
	//-- Для наименований
	
	МаксИндекс = Макс(ЭлементМассива.ПоДаннымОрганизации.Количество(), ЭлементМассива.ПоДаннымКонтрагента.Количество()) - 1;
	Для Инд = 0 По МаксИндекс Цикл
		Если Инд < ЭлементМассива.ПоДаннымОрганизации.Количество() Тогда
			СтрокаОрганизации = ЭлементМассива.ПоДаннымОрганизации[Инд];
			Регистратор = 	СтрокаОрганизации.Документ;
			СуммаОборотДт = СтрокаОрганизации.Дебет;
			СуммаОборотКт = СтрокаОрганизации.Кредит;
			ОбластьОбороты.Параметры.СуммаОборотДт = СуммаОборотДт;
			ОбластьОбороты.Параметры.СуммаОборотКт = СуммаОборотКт;
			ИтСуммаОборотДт = ИтСуммаОборотДт + СуммаОборотДт;
			ИтСуммаОборотКт = ИтСуммаОборотКт + СуммаОборотКт;
			
			ПредставленияДокументов.Свойство(СтрокаОрганизации.Документ.Метаданные().Имя,ПредставлениеДокументаПоОрганизации);
			ОбластьОбороты.Параметры.РегистраторПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 №%2 от %3'"),
			?(ПредставлениеДокументаПоОрганизации <> Неопределено, ПредставлениеДокументаПоОрганизации, ?(Строка(СтрокаОрганизации.Документ.Метаданные()) = "Регламентная операция",Строка(СтрокаОрганизации.Документ.ТипОперации),Строка(СтрокаОрганизации.Документ.Метаданные()))),
			?(ЗначениеЗаполнено(СтрокаОрганизации.Документ.Номер),
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СтрокаОрганизации.Документ.Номер), "_______"),
			?(ЗначениеЗаполнено(СтрокаОрганизации.Документ.Дата), Формат(СтрокаОрганизации.Документ.Дата, "ДЛФ=D") + " " + НСтр("ru='г.'"), "'  .  .    '"));
			
			ОбластьОбороты.Параметры.ДатаДокумента = Формат(СтрокаОрганизации.Дата,"ЧЦ=21; ЧДЦ=2; ДФ=dd.MM.yy");
			
		Иначе
			ОбластьОбороты.Параметры.СуммаОборотДт = "";
			ОбластьОбороты.Параметры.СуммаОборотКт = "";
			ОбластьОбороты.Параметры.РегистраторПредставление = "";
			ОбластьОбороты.Параметры.Регистратор = "";
			ОбластьОбороты.Параметры.ДатаДокумента = "";
		КонецЕсли;
		Если Инд < ЭлементМассива.ПоДаннымКонтрагента.Количество() Тогда
			СтрокаОрганизации = ЭлементМассива.ПоДаннымКонтрагента[Инд];
			Регистратор = 	СтрокаОрганизации.Документ;
			СуммаОборотДт = СтрокаОрганизации.ДебетКонтрагента;
			СуммаОборотКт = СтрокаОрганизации.КредитКонтрагента;
			ОбластьОбороты.Параметры.СуммаОборотДтКонтр = СуммаОборотДт;
			ОбластьОбороты.Параметры.СуммаОборотКтКонтр = СуммаОборотКт;
			ИтСуммаОборотДтКонтр = ИтСуммаОборотДтКонтр + СуммаОборотДт;
			ИтСуммаОборотКтКонтр = ИтСуммаОборотКтКонтр + СуммаОборотКт;
			
			ПредставленияДокументов.Свойство(СтрокаОрганизации.Документ.Метаданные().Имя,ПредставлениеДокументаПоКонтрагенту);
			ОбластьОбороты.Параметры.РегистраторПредставлениеКонтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 №%2 от %3'"),
			?(ПредставлениеДокументаПоКонтрагенту <> Неопределено, ПредставлениеДокументаПоКонтрагенту, ?(Строка(СтрокаОрганизации.Документ.Метаданные()) = "Регламентная операция",Строка(СтрокаОрганизации.Документ.ТипОперации),Строка(СтрокаОрганизации.Документ.Метаданные()))),
			?(ЗначениеЗаполнено(СтрокаОрганизации.Документ.Номер),
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СтрокаОрганизации.Документ.Номер), "_______"),
			?(ЗначениеЗаполнено(СтрокаОрганизации.Документ.Дата), Формат(СтрокаОрганизации.Документ.Дата, "ДЛФ=D") + " " + НСтр("ru='г.'"), "'  .  .    '"));
			
			
			ОбластьОбороты.Параметры.ДатаДокументаКонтр = Формат(СтрокаОрганизации.Дата,"ЧЦ=21; ЧДЦ=2; ДФ=dd.MM.yy");
		Иначе
			ОбластьОбороты.Параметры.СуммаОборотДтКонтр = "";
			ОбластьОбороты.Параметры.СуммаОборотКтКонтр = "";
			ОбластьОбороты.Параметры.РегистраторПредставлениеКонтр = "";
			ОбластьОбороты.Параметры.ДатаДокументаКонтр = "";
		КонецЕсли;
		ТабДок.Вывести(ОбластьОбороты);
	КонецЦикла;
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	
	ОбластьОборотыИтог  = Макет.ПолучитьОбласть("ОборотыИтог");
	ОбластьКонОстатки   = Макет.ПолучитьОбласть("КонОстатки");
	ОбластьПодвал       = Макет.ПолучитьОбласть("Подвал");
	
	
	ОбластьОборотыИтог.Параметры.СуммаОборотДт      = ИтСуммаОборотДт;
	ОбластьОборотыИтог.Параметры.СуммаОборотКт      = ИтСуммаОборотКт;
	
	ОбластьОборотыИтог.Параметры.СуммаОборотДтКонтр = ИтСуммаОборотДтКонтр;
	ОбластьОборотыИтог.Параметры.СуммаОборотКтКонтр = ИтСуммаОборотКтКонтр;
	
	ТабДок.Вывести(ОбластьОборотыИтог);
	
	НачОстДебет  = ?(ЭлементМассива.СальдоНаНачалоПоДаннымОрганизации > 0, ЭлементМассива.СальдоНаНачалоПоДаннымОрганизации, 0);
	НачОстКредит = ?(ЭлементМассива.СальдоНаНачалоПоДаннымОрганизации < 0, -ЭлементМассива.СальдоНаНачалоПоДаннымОрганизации, 0);
	
	ОстатокНаКонец = ЭлементМассива.СальдоНаНачалоПоДаннымОрганизации + ЭлементМассива.ПоДаннымОрганизации.Итог("Дебет") -  ЭлементМассива.ПоДаннымОрганизации.Итог("Кредит");
	
	КонОстДебет  = ?(ОстатокНаКонец > 0, ОстатокНаКонец, 0);
	КонОстКредит = ?(ОстатокНаКонец < 0, -ОстатокНаКонец, 0);
	
	ОстатокНаКонецК = -ЭлементМассива.СальдоНаНачалоПоДаннымОрганизации + ЭлементМассива.ПоДаннымКонтрагента.Итог("ДебетКонтрагента") -  ЭлементМассива.ПоДаннымКонтрагента.Итог("КредитКонтрагента");
	
	КонОстДебетК  = ?(ОстатокНаКонецК > 0, ОстатокНаКонецК, 0);
	КонОстКредитК = ?(ОстатокНаКонецК < 0, -ОстатокНаКонецК, 0);
	
	
	ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДт = КонОстДебет;
	ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКт = КонОстКредит;
	
	ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДтКонтр = КонОстДебетК;
	ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКтКонтр = КонОстКредитК;
	
	
	ТабДок.Вывести(ОбластьКонОстатки);
	
	// Результаты сверки
	
	Если НЕ ЭлементМассива.ПоДаннымОрганизации.Количество() = 0 и НЕ ЭлементМассива.СальдоНаНачалоПоДаннымОрганизации = 0 Тогда
		
		РезультатыСверки = "на " + Формат(ЭлементМассива.ДатаОкончанияПериодаСверки, "ДФ=dd.MM.yyyy") + " задолженность ";
		
		Если ОстатокНаКонец > 0 Тогда
			РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(ВыборкаДокумента.НаименованиеОрганизации) + " " + Формат(ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2") + " " + строка(ЭлементМассива.Валюта);
			
		ИначеЕсли ОстатокНаКонец < 0 Тогда
			РезультатыСверки = РезультатыСверки + "в пользу " + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте,"ПолноеНаименование") + " " + Формат(-ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2") + " " + строка(ЭлементМассива.Валюта);
			
		Иначе
			РезультатыСверки = РезультатыСверки + "отсутствует.";
		КонецЕсли;
	КонецЕсли;
	ОбластьПодвал.Параметры.РезультатыСверки = РезультатыСверки;
	
	//Если Ссылка[0].СверкаСогласована тогда
	ОбластьПодвал.Параметры.ПоДаннымКонтрагента = "По данным " + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте,"ПолноеНаименование");
	ОбластьПодвал.Параметры.НазваниеОрганизации =  ВыборкаДокумента.НаименованиеОрганизации;
	Если НЕ ЭлементМассива.ПоДаннымКонтрагента.Количество() = 0 и НЕ ЭлементМассива.СальдоНаНачалоПоДаннымОрганизации = 0 Тогда
	
		РезультатыСверки = "на " + Формат(ЭлементМассива.ДатаОкончанияПериодаСверки, "ДФ=dd.MM.yyyy") + " задолженность ";
		
		Если ОстатокНаКонецК < 0 Тогда
			РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(ВыборкаДокумента.НаименованиеОрганизации) + " " + Формат(-ОстатокНаКонецК, "ЧЦ=21; ЧДЦ=2") + " " + строка(ЭлементМассива.Валюта);
			
		ИначеЕсли ОстатокНаКонецК > 0 Тогда
			РезультатыСверки = РезультатыСверки + "в пользу " + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте,"ПолноеНаименование") + " " + Формат(ОстатокНаКонецК, "ЧЦ=21; ЧДЦ=2") + " " + строка(ЭлементМассива.Валюта);
			
		Иначе
			РезультатыСверки = РезультатыСверки + "отсутствует.";
		КонецЕсли;
		
	КонецЕсли;
	
	ОбластьПодвал.Параметры.РезультатыСверкиК = РезультатыСверки;
	
	//Если ОстатокНаКонец-ОстатокНаКонецК<>0 Тогда
	//	ИтогСверки = "В результате сверки выявлено расхождение информации о состоянии расчетов в размере "+Формат(?(ОстатокНаКонец-ОстатокНаКонецК>0,1,-1)*(ОстатокНаКонец-ОстатокНаКонецК), "ЧЦ=21; ЧДЦ=2") +" "+ Строка(ЭлементМассива.Валюта);
	//	ОбластьПодвал.Параметры.ИтогСверки = Символы.ПС+ ИтогСверки+Символы.ПС+" ";
	//КонецЕсли; 	
	//КонецЕсли;
	
	ТабДок.Вывести(ОбластьПодвал);

ИначеЕсли КоличествоДоговоров > 0 Тогда
	
	РезультатЗапросаПоДоговорам = ВыборкаПакет[3].Выбрать();
	
	Пока РезультатЗапросаПоДоговорам.Следующий() Цикл
		
	ОбластьПоДоговору = Макет.ПолучитьОбласть("ПоДоговору");
	ОбластьПоДоговору.Параметры.ДоговорыКонтрагента = РезультатЗапросаПоДоговорам.ДоговорыКонтрагентов;	
	ТабДок.Вывести(ОбластьПоДоговору);
	
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьШапкаТаблицы.Параметры.НазваниеОрганизации = ВыборкаДокумента.НазваниеОрганизации;
	ОбластьШапкаТаблицы.Параметры.НаименованиеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте,"ПолноеНаименование");
	ОбластьШапкаТаблицы.Параметры.ВалютаДокумента = ВыборкаДокумента.Валюта;
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	
	СписокСубконто = Новый Массив; 
	СписокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СписокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	
	МассивСчетов = Новый Массив;
	Для каждого СтрокаМассиваСчетов Из ЭлементМассива.СчетаУчетаРасчетов Цикл
		Если СтрокаМассиваСчетов.УчаствуетВРасчетах Тогда
			 МассивСчетов.Добавить(СтрокаМассиваСчетов.Счет);
		КонецЕсли;		
	КонецЦикла;
	

	ЗапросНаНачало = Новый Запрос;
	ЗапросНаНачало.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
		|			ТОГДА ХозрасчетныйОстатки.СуммаОстаток
		|		ИНАЧЕ ХозрасчетныйОстатки.ВалютнаяСуммаОстаток
		|	КОНЕЦ КАК СальдоНаНачало
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ДатаНачалаПериодаСверки,
		|			Счет В ИЕРАРХИИ (&МассивСчетов),
		|			&СписокСубконто,
		|			Организация = &Организация
		|				И Субконто1 = &Контрагент
		|				И ВЫБОР
		|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
		|						ТОГДА Валюта ЕСТЬ NULL
		|					ИНАЧЕ Валюта = &Валюта
		|				КОНЕЦ
		|				И Субконто2 = &Договоры) КАК ХозрасчетныйОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
		|			ТОГДА ХозрасчетныйОстатки.СуммаОстаток
		|		ИНАЧЕ ХозрасчетныйОстатки.ВалютнаяСуммаОстаток
		|	КОНЕЦ КАК СальдоНаКонец,
		|	ВТ.СальдоНаНачало
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ДатаОкончанияПериодаСверки,
		|			Счет В ИЕРАРХИИ (&МассивСчетов),
		|			&СписокСубконто,
		|			Организация = &Организация
		|				И Субконто1 = &Контрагент
		|				И ВЫБОР
		|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
		|						ТОГДА Валюта ЕСТЬ NULL
		|					ИНАЧЕ Валюта = &Валюта
		|				КОНЕЦ
		|				И Субконто2 = &Договоры) КАК ХозрасчетныйОстатки,
		|	ВТ КАК ВТ";
	
	ЗапросНаНачало.УстановитьПараметр("ДатаНачалаПериодаСверки", Новый Граница(НачалоДня(ЭлементМассива.ДатаНачалаПериодаСверки), ВидГраницы.Включая));
	ЗапросНаНачало.УстановитьПараметр("ДатаОкончанияПериодаСверки", Новый Граница(КонецДня(ЭлементМассива.ДатаОкончанияПериодаСверки), ВидГраницы.Включая));
	ЗапросНаНачало.УстановитьПараметр("Контрагент",  ЭлементМассива.Контрагент);
	ЗапросНаНачало.УстановитьПараметр("МассивСчетов", МассивСчетов);
	ЗапросНаНачало.УстановитьПараметр("Организация", ЭлементМассива.Организация);
	ЗапросНаНачало.УстановитьПараметр("СписокСубконто", СписокСубконто);
	ВалютаДокумента = ?(ЭлементМассива.Валюта = Константы.ВалютаРегламентированногоУчета.Получить(), неопределено,ЭлементМассива.Валюта);
	ЗапросНаНачало.УстановитьПараметр("Валюта", ВалютаДокумента);
    ЗапросНаНачало.УстановитьПараметр("Договоры",РезультатЗапросаПоДоговорам.ДоговорыКонтрагентов);

	
	РезультатЗапросаНаНачало = ЗапросНаНачало.Выполнить();
	
	ВыборкаДетальныеЗаписиНаНачало = РезультатЗапросаНаНачало.Выбрать();
	
	ВыборкаДетальныеЗаписиНаНачало.Следующий();
	
	//Если ИмяТЧ = "ПоДаннымОрганизации" Тогда
	//	Объект.СальдоНаНачалоПоДаннымОрганизации = ВыборкаДетальныеЗаписи.СальдоНаНачало;
	//	Объект.СальдоНаКонецПоДаннымОрганизации = ВыборкаДетальныеЗаписи.СальдоНаКонец;
	//Иначе
	//	Объект.СальдоНаНачалоПоДаннымКонтрагента = -1*ВыборкаДетальныеЗаписи.СальдоНаНачало;
	//	Объект.СальдоНаКонецПоДаннымКонтрагента = -1*ВыборкаДетальныеЗаписи.СальдоНаКонец;
	//КонецЕсли;

	
	ОбластьНачОстатки = Макет.ПолучитьОбласть("НачОстатки");
	Если ВыборкаДокумента.СальдоНаНачалоПоДаннымОрганизации < 0 Тогда
		ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокКт = -1* ВыборкаДетальныеЗаписиНаНачало.СальдоНаНачало;
	Иначе
		ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокДт = ВыборкаДетальныеЗаписиНаНачало.СальдоНаНачало;
	КонецЕсли;
	
	Если ВыборкаДокумента.СальдоНаНачалоПоДаннымКонтрагента < 0 Тогда
		ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокДтКонтр = -1* ВыборкаДетальныеЗаписиНаНачало.СальдоНаНачало;
	Иначе
		ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокКтКонтр = ВыборкаДетальныеЗаписиНаНачало.СальдоНаНачало;
	КонецЕсли;	
	
	ТабДок.Вывести(ОбластьНачОстатки); 
	
	ОбластьОбороты = Макет.ПолучитьОбласть("Обороты");
	ИтСуммаОборотДт      = 0;
	ИтСуммаОборотКт      = 0;
	ИтСуммаОборотДтКонтр = 0;
	ИтСуммаОборотКтКонтр = 0;
	
	ТабДок.НачатьАвтогруппировкуСтрок();
	
	//++ Для наименований
	ПредставленияДокументов = ПредставленияДокументов();
	ПредставленияВладельцевДокументов = ПредставленияВладельцевДокументов();
	ПредставлениеДокументаПоОрганизации = "";
	ПредставлениеДокументаПоКонтрагенту = "";	
	//-- Для наименований
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ДоговорКонтрагента",РезультатЗапросаПоДоговорам.ДоговорыКонтрагентов);
	МассивПоДаннымОрганизации = ЭлементМассива.ПоДаннымОрганизации.НайтиСтроки(ПараметрыОтбора);
	МассивПоДаннымКонтрагента = ЭлементМассива.ПоДаннымКонтрагента.НайтиСтроки(ПараметрыОтбора);
	
	МаксИндекс = Макс(МассивПоДаннымОрганизации.Количество(), МассивПоДаннымКонтрагента.Количество()) - 1;
	Для Инд = 0 По МаксИндекс Цикл
		Если Инд < МассивПоДаннымОрганизации.Количество() Тогда
			СтрокаОрганизации = МассивПоДаннымОрганизации[Инд];
			Регистратор = 	СтрокаОрганизации.Документ;
			СуммаОборотДт = СтрокаОрганизации.Дебет;
			СуммаОборотКт = СтрокаОрганизации.Кредит;
			ОбластьОбороты.Параметры.СуммаОборотДт = СуммаОборотДт;
			ОбластьОбороты.Параметры.СуммаОборотКт = СуммаОборотКт;
			ИтСуммаОборотДт = ИтСуммаОборотДт + СуммаОборотДт;
			ИтСуммаОборотКт = ИтСуммаОборотКт + СуммаОборотКт;
			
			ПредставленияДокументов.Свойство(СтрокаОрганизации.Документ.Метаданные().Имя,ПредставлениеДокументаПоОрганизации);
			ОбластьОбороты.Параметры.РегистраторПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 №%2 от %3'"),
			?(ПредставлениеДокументаПоОрганизации <> Неопределено, ПредставлениеДокументаПоОрганизации, ?(Строка(СтрокаОрганизации.Документ.Метаданные()) = "Регламентная операция",Строка(СтрокаОрганизации.Документ.ТипОперации),Строка(СтрокаОрганизации.Документ.Метаданные()))),
			?(ЗначениеЗаполнено(СтрокаОрганизации.Документ.Номер),
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СтрокаОрганизации.Документ.Номер), "_______"),
			?(ЗначениеЗаполнено(СтрокаОрганизации.Документ.Дата), Формат(СтрокаОрганизации.Документ.Дата, "ДЛФ=D") + " " + НСтр("ru='г.'"), "'  .  .    '"));
			
			ОбластьОбороты.Параметры.ДатаДокумента = Формат(СтрокаОрганизации.Дата,"ЧЦ=21; ЧДЦ=2; ДФ=dd.MM.yy");
			
		Иначе
			ОбластьОбороты.Параметры.СуммаОборотДт = "";
			ОбластьОбороты.Параметры.СуммаОборотКт = "";
			ОбластьОбороты.Параметры.РегистраторПредставление = "";
			ОбластьОбороты.Параметры.Регистратор = "";
			ОбластьОбороты.Параметры.ДатаДокумента = "";
		КонецЕсли;
		Если Инд < МассивПоДаннымКонтрагента.Количество() Тогда
			СтрокаОрганизации = МассивПоДаннымКонтрагента[Инд];
			Регистратор = 	СтрокаОрганизации.Документ;
			СуммаОборотДт = СтрокаОрганизации.ДебетКонтрагента;
			СуммаОборотКт = СтрокаОрганизации.КредитКонтрагента;
			ОбластьОбороты.Параметры.СуммаОборотДтКонтр = СуммаОборотДт;
			ОбластьОбороты.Параметры.СуммаОборотКтКонтр = СуммаОборотКт;
			ИтСуммаОборотДтКонтр = ИтСуммаОборотДтКонтр + СуммаОборотДт;
			ИтСуммаОборотКтКонтр = ИтСуммаОборотКтКонтр + СуммаОборотКт;
			
			ПредставленияДокументов.Свойство(СтрокаОрганизации.Документ.Метаданные().Имя,ПредставлениеДокументаПоКонтрагенту);
			ОбластьОбороты.Параметры.РегистраторПредставлениеКонтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 №%2 от %3'"),
			?(ПредставлениеДокументаПоКонтрагенту <> Неопределено, ПредставлениеДокументаПоКонтрагенту, ?(Строка(СтрокаОрганизации.Документ.Метаданные()) = "Регламентная операция",Строка(СтрокаОрганизации.Документ.ТипОперации),Строка(СтрокаОрганизации.Документ.Метаданные()))),
			?(ЗначениеЗаполнено(СтрокаОрганизации.Документ.Номер),
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СтрокаОрганизации.Документ.Номер), "_______"),
			?(ЗначениеЗаполнено(СтрокаОрганизации.Документ.Дата), Формат(СтрокаОрганизации.Документ.Дата, "ДЛФ=D") + " " + НСтр("ru='г.'"), "'  .  .    '"));
			
			
			ОбластьОбороты.Параметры.ДатаДокументаКонтр = Формат(СтрокаОрганизации.Дата,"ЧЦ=21; ЧДЦ=2; ДФ=dd.MM.yy");
		Иначе
			ОбластьОбороты.Параметры.СуммаОборотДтКонтр = "";
			ОбластьОбороты.Параметры.СуммаОборотКтКонтр = "";
			ОбластьОбороты.Параметры.РегистраторПредставлениеКонтр = "";
			ОбластьОбороты.Параметры.ДатаДокументаКонтр = "";
		КонецЕсли;
		ТабДок.Вывести(ОбластьОбороты);
	КонецЦикла;
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	
	ОбластьОборотыИтог  = Макет.ПолучитьОбласть("ОборотыИтог");
	ОбластьКонОстатки   = Макет.ПолучитьОбласть("КонОстатки");
	ОбластьПодвал       = Макет.ПолучитьОбласть("Подвал");
	
	
	ОбластьОборотыИтог.Параметры.СуммаОборотДт      = ИтСуммаОборотДт;
	ОбластьОборотыИтог.Параметры.СуммаОборотКт      = ИтСуммаОборотКт;
	
	ОбластьОборотыИтог.Параметры.СуммаОборотДтКонтр = ИтСуммаОборотДтКонтр;
	ОбластьОборотыИтог.Параметры.СуммаОборотКтКонтр = ИтСуммаОборотКтКонтр;
	
	ТабДок.Вывести(ОбластьОборотыИтог);
	
	НачОстДебет  = ?(ВыборкаДетальныеЗаписиНаНачало.СальдоНаНачало > 0, ВыборкаДетальныеЗаписиНаНачало.СальдоНаНачало, 0);
	НачОстКредит = ?(ВыборкаДетальныеЗаписиНаНачало.СальдоНаНачало < 0, -ВыборкаДетальныеЗаписиНаНачало.СальдоНаНачало, 0);
	
	ОстатокНаКонец = ВыборкаДетальныеЗаписиНаНачало.СальдоНаНачало + ИтСуммаОборотДт -  ИтСуммаОборотКт;
	
	КонОстДебет  = ?(ОстатокНаКонец > 0, ОстатокНаКонец, 0);
	КонОстКредит = ?(ОстатокНаКонец < 0, -ОстатокНаКонец, 0);
	
	ОстатокНаКонецК = -ВыборкаДетальныеЗаписиНаНачало.СальдоНаНачало + ИтСуммаОборотДтКонтр -  ИтСуммаОборотКтКонтр;
	
	КонОстДебетК  = ?(ОстатокНаКонецК > 0, ОстатокНаКонецК, 0);
	КонОстКредитК = ?(ОстатокНаКонецК < 0, -ОстатокНаКонецК, 0);
	
	
	ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДт = КонОстДебет;
	ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКт = КонОстКредит;
	
	ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДтКонтр = КонОстДебетК;
	ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКтКонтр = КонОстКредитК;
	
	
	ТабДок.Вывести(ОбластьКонОстатки);
	
	// Результаты сверки
	
	Если НЕ МассивПоДаннымОрганизации.Количество() = 0 и НЕ ВыборкаДетальныеЗаписиНаНачало.СальдоНаНачало = 0 Тогда
		
		РезультатыСверки = "на " + Формат(ЭлементМассива.ДатаОкончанияПериодаСверки, "ДФ=dd.MM.yyyy") + " задолженность ";
		
		Если ОстатокНаКонец > 0 Тогда
			РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(ВыборкаДокумента.НаименованиеОрганизации) + " " + Формат(ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2") + " " + строка(ЭлементМассива.Валюта);
			
		ИначеЕсли ОстатокНаКонец < 0 Тогда
			РезультатыСверки = РезультатыСверки + "в пользу " + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте,"ПолноеНаименование") + " " + Формат(-ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2") + " " + строка(ЭлементМассива.Валюта);
			
		Иначе
			РезультатыСверки = РезультатыСверки + "отсутствует.";
		КонецЕсли;
	КонецЕсли;
	ОбластьПодвал.Параметры.РезультатыСверки = РезультатыСверки;
	
	//Если Ссылка[0].СверкаСогласована тогда
	ОбластьПодвал.Параметры.ПоДаннымКонтрагента = "По данным " + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте,"ПолноеНаименование");
	ОбластьПодвал.Параметры.НазваниеОрганизации =  ВыборкаДокумента.НаименованиеОрганизации;
	Если НЕ ЭлементМассива.ПоДаннымКонтрагента.Количество() = 0 и НЕ ЭлементМассива.СальдоНаНачалоПоДаннымОрганизации = 0 Тогда
	
		РезультатыСверки = "на " + Формат(ЭлементМассива.ДатаОкончанияПериодаСверки, "ДФ=dd.MM.yyyy") + " задолженность ";
		
		Если ОстатокНаКонецК < 0 Тогда
			РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(ВыборкаДокумента.НаименованиеОрганизации) + " " + Формат(-ОстатокНаКонецК, "ЧЦ=21; ЧДЦ=2") + " " + строка(ЭлементМассива.Валюта);
			
		ИначеЕсли ОстатокНаКонецК > 0 Тогда
			РезультатыСверки = РезультатыСверки + "в пользу " + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте,"ПолноеНаименование") + " " + Формат(ОстатокНаКонецК, "ЧЦ=21; ЧДЦ=2") + " " + строка(ЭлементМассива.Валюта);
			
		Иначе
			РезультатыСверки = РезультатыСверки + "отсутствует.";
		КонецЕсли;
		
	КонецЕсли;
	
	ОбластьПодвал.Параметры.РезультатыСверкиК = РезультатыСверки;
	
	//Если ОстатокНаКонец-ОстатокНаКонецК<>0 Тогда
	//	ИтогСверки = "В результате сверки выявлено расхождение информации о состоянии расчетов в размере "+Формат(?(ОстатокНаКонец-ОстатокНаКонецК>0,1,-1)*(ОстатокНаКонец-ОстатокНаКонецК), "ЧЦ=21; ЧДЦ=2") +" "+ Строка(ЭлементМассива.Валюта);
	//	ОбластьПодвал.Параметры.ИтогСверки = Символы.ПС+ ИтогСверки+Символы.ПС+" ";
	//КонецЕсли; 	
	//КонецЕсли;
	
	ТабДок.Вывести(ОбластьПодвал);
		
	КонецЦикла;
	
	КонецЕсли;
	
	// ПОДПИСИ
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(ВыборкаДокумента);
	
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ВыборкаДокумента.НаименованиеОрганизации + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, 
	
	//+++DubI Рарус-СПб 24.03.2017
	//"ПолноеНаименование,ИНН,ЮридическийАдрес");
	"ИНН,КПП");
	//---DubI Рарус-СПб 24.03.2017
	
	ОбластьМакета.Параметры.КонтрагентНаименование   = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, 
	"ПолноеНаименование,ИНН");
	
	Партнер = ВыборкаДокумента.НаименованиеКонтрагента.Партнер;
	Подразделение = ОпределитьПодразделение(ЭлементМассива,КоличествоДоговоров);
	//+++DubI Рарус-СПб 24.03.2017
	//ОбластьПодписи = пкОбщегоНазначенияСервер.ПолучитьМакетПодписи(ДанныеДокумента.Дата, Партнер.пкПодразделение, Перечисления.пкВидыПечатныхФормДляШаблоновПодписей.АктСверки, ВыводитьПодписи);
	ОбластьПодписи = пкОбщегоНазначенияСервер.ПолучитьМакетПодписи(ВыборкаДокумента.Дата, 
	?(Подразделение <> Ложь,Подразделение,ВыборкаДокумента.Регион), 
	Перечисления.пкВидыПечатныхФормДляШаблоновПодписей.АктСверки, 
	Истина,
	//ВыводитьПодписи, 
	?(ЗначениеЗаполнено(ВыборкаДокумента.пкПодписант), ВыборкаДокумента.пкПодписант, Неопределено));
	//---DubI Рарус-СПб
	
	Если ОбластьПодписи <> Неопределено Тогда
		// Получить расширение файла.
		РасширениеВременногоФайла = ".mxl";
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(РасширениеВременногоФайла);
		
		Макет = ОбластьПодписи.Получить();
		
		// Сохранить файл на диске
		Попытка
			Макет.Записать(ИмяВременногоФайла);
		Исключение
			Сообщить("Запись НЕ прошла " + ИмяВременногоФайла);
		КонецПопытки;
		
		МакетПечатнойФормы = Новый ТабличныйДокумент;
		МакетПечатнойФормы.Прочитать(ИмяВременногоФайла);
		УдалитьФайлы(ИмяВременногоФайла);	
	КонецЕсли;
	
	Если МакетПечатнойФормы <> Неопределено тогда
		//+++DubI Рарус-СПб 24.03.2017
		МакетПечатнойФормы.Параметры.НазваниеОрганизации = ВыборкаДокумента.НазваниеОрганизации;
		
		МакетПечатнойФормы.Параметры.НаименованиеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, 
		"ПолноеНаименование,ИНН");
		
		МакетПечатнойФормы.Параметры.ДолжностьК = ВыборкаДокумента.ДолжностьРуководителяКонтрагента;
		МакетПечатнойФормы.Параметры.ФИОПредставителяК = ВыборкаДокумента.ФИОРуководителяКонтрагента;
		//---DubI Рарус-СПб
		ТабДок.АвтоМасштаб = Истина;
		ТабДок.Вывести(МакетПечатнойФормы);
	Иначе
		Сообщить("Не удалось определить макет подписей счета.", СтатусСообщения.Важное);
		ТабДок.АвтоМасштаб = Истина;
		ТабДок.Вывести(ОбластьМакета);		
	КонецЕсли;
	
	Если ПривилегированныйРежим() Тогда
			УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, ЭлементМассива);

	КонецЦикла;
	
	Возврат ТабДок;

КонецФункции

Функция ОпределитьПодразделение(Ссылка,КоличествоДоговоров)
	
	Если КоличествоДоговоров > 1 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	пкАктСверкиВзаиморасчетовДоговорыКонтрагента.ДоговорыКонтрагентов.Подразделение КАК Подразделение
		|ИЗ
		|	Документ.пкАктСверкиВзаиморасчетов.ДоговорыКонтрагента КАК пкАктСверкиВзаиморасчетовДоговорыКонтрагента
		|ГДЕ
		|	пкАктСверкиВзаиморасчетовДоговорыКонтрагента.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
		
		Если ВыборкаЗапроса.Количество() = 1 Тогда
			
			ВыборкаЗапроса.Следующий();
			
			Возврат ВыборкаЗапроса.Подразделение;
			
		Иначе
			
			Возврат ЛОЖЬ;
			
		КонецЕсли;
		
		
	ИначеЕсли КоличествоДоговоров = 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Подразделение
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &Валюта
		|	И ДоговорыКонтрагентов.Контрагент = &Контрагент";
		
		Запрос.УстановитьПараметр("Валюта", Ссылка.Валюта);
		Запрос.УстановитьПараметр("Контрагент", Ссылка.Контрагент);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Количество() = 1 Тогда
			
			ВыборкаДетальныеЗаписи.Следующий();
			
			Возврат ВыборкаДетальныеЗаписи.Подразделение;
			
		Иначе
			
			Возврат ЛОЖЬ;
			
		КонецЕсли;
		
	Иначе		
		
		Возврат Ссылка.ДоговорыКонтрагента[0].ДоговорыКонтрагентов.Подразделение;
		
	КонецЕсли;
	
КонецФункции 

Функция ПредставленияДокументов()
	
	ВидыДокументовКонтрагента = Новый Структура;
	
	ВидыДокументовКонтрагента.Вставить("АвансовыйОтчет",						НСтр("ru='Приходный кассовый ордер'"));
	ВидыДокументовКонтрагента.Вставить("АктВыполненныхРабот", 					НСтр("ru='Акт выполненных работ'"));
	ВидыДокументовКонтрагента.Вставить("ВводОстатков",							НСтр("ru='Корректировка задолженности'"));
	ВидыДокументовКонтрагента.Вставить("ВзаимозачетЗадолженности",				НСтр("ru='Взаимозачет задолженности'"));
	ВидыДокументовКонтрагента.Вставить("ВозвратТоваровМеждуОрганизациями",		НСтр("ru='Накладная (возврат)'"));
	ВидыДокументовКонтрагента.Вставить("ВозвратТоваровОтКлиента",				НСтр("ru='Накладная (возврат)'"));
	ВидыДокументовКонтрагента.Вставить("ВозвратТоваровПоставщику",				НСтр("ru='Накладная (возврат)'"));
	ВидыДокументовКонтрагента.Вставить("ВыкупВозвратнойТарыКлиентом", 			НСтр("ru='Выкуп возвратной тары'"));
	ВидыДокументовКонтрагента.Вставить("ВыкупВозвратнойТарыУПоставщика", 		НСтр("ru='Выкуп возвратной тары'"));
	//Рарус Владимир Подрезов 09.10.2017 5783
	//	ВидыДокументовКонтрагента.Вставить("ЗаказКлиента", 							НСтр("ru='Заказ'"));
	ВидыДокументовКонтрагента.Вставить("ЗаказКлиента", 							НСтр("ru='Счет'"));
	//Рарус Владимир Подрезов Конец
	ВидыДокументовКонтрагента.Вставить("ПереоценкаВалютныхСредств", 			НСтр("ru='Расчет курсовых разниц'"));
	
	ВидыДокументовКонтрагента.Вставить("ЗаказПоставщику", 						НСтр("ru='Заказ'"));
	ВидыДокументовКонтрагента.Вставить("ЗаявкаНаВозвратТоваровОтКлиента", 		НСтр("ru='Заказ (возврат)'"));
	ВидыДокументовКонтрагента.Вставить("КорректировкаПоступления",				НСтр("ru='Корректировка задолженности'"));
	ВидыДокументовКонтрагента.Вставить("КорректировкаРеализации",				НСтр("ru='Корректировка задолженности'"));
	ВидыДокументовКонтрагента.Вставить("КорректировкаРегистров",				НСтр("ru='Корректировка задолженности'"));
	ВидыДокументовКонтрагента.Вставить("ОперацияПоПлатежнойКарте",				НСтр("ru='Эквайринговая операция'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомиссионера",						НСтр("ru='Отчет комитенту'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомиссионераОСписании",			НСтр("ru='Отчет комитенту'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомитенту",						НСтр("ru='Отчет комитенту'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомитентуОСписании",				НСтр("ru='Отчет комитенту'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетПоКомиссииМеждуОрганизациями",		НСтр("ru='Отчет комитенту'"));
	ВидыДокументовКонтрагента.Вставить("ПередачаТоваровМеждуОрганизациями",		НСтр("ru='Накладная'"));
	//+++DubI Рарус-СПб 24.03.2017
	//ВидыДокументовКонтрагента.Вставить("ПоступлениеБезналичныхДенежныхСредств", НСтр("ru='Платежное поручение'"));
	//ВидыДокументовКонтрагента.Вставить("ПриобретениеТоваровУслуг",				НСтр("ru='Накладная'"));
	//ВидыДокументовКонтрагента.Вставить("ПоступлениеУслугПрочихАктивов",			НСтр("ru='Акт'"));
	ВидыДокументовКонтрагента.Вставить("ПоступлениеБезналичныхДенежныхСредств", НСтр("ru='Оплата'"));
	ВидыДокументовКонтрагента.Вставить("ПриобретениеТоваровУслуг",				НСтр("ru='Приход'"));
	ВидыДокументовКонтрагента.Вставить("ПоступлениеУслугПрочихАктивов",			НСтр("ru='Приход'"));
	//---DubI Рарус-СПб
	ВидыДокументовКонтрагента.Вставить("ПриходныйКассовыйОрдер",				НСтр("ru='Приходный кассовый ордер'"));
	ВидыДокументовКонтрагента.Вставить("РасходныйКассовыйОрдер",				НСтр("ru='Расходный кассовый ордер'"));
	//+++rarus-spb_zlov 15.03.2017    
	//ВидыДокументовКонтрагента.Вставить("РеализацияТоваровУслуг", 				НСтр("ru='Накладная'"));
	ВидыДокументовКонтрагента.Вставить("РеализацияТоваровУслуг", 				НСтр("ru='Продажа'"));
	//---rarus-spb_zlov 15.03.2017 
	
	//+++DubI Рарус-СПб 24.03.2017
	//ВидыДокументовКонтрагента.Вставить("РеализацияУслугПрочихАктивов",			НСтр("ru='Акт'"));
	//ВидыДокументовКонтрагента.Вставить("СписаниеБезналичныхДенежныхСредств", 	НСтр("ru='Платежное поручение'"));
	ВидыДокументовКонтрагента.Вставить("РеализацияУслугПрочихАктивов",			НСтр("ru='Продажа'"));
	ВидыДокументовКонтрагента.Вставить("СписаниеБезналичныхДенежныхСредств", 	НСтр("ru='Оплата'"));
	//---DubI Рарус-СПб
	ВидыДокументовКонтрагента.Вставить("СписаниеЗадолженности", 				НСтр("ru='Списание задолженности'"));
	ВидыДокументовКонтрагента.Вставить("СчетНаОплатуКлиенту", 					НСтр("ru='Счет на оплату'"));
	ВидыДокументовКонтрагента.Вставить("СчетФактураВыданный", 					НСтр("ru='Счет-фактура'"));
	ВидыДокументовКонтрагента.Вставить("СчетФактураПолученный", 				НСтр("ru='Счет-фактура'"));
	ВидыДокументовКонтрагента.Вставить("ТаможеннаяДекларацияИмпорт", 			НСтр("ru='Таможенная декларация'"));
	//++ НЕ УТ
	ВидыДокументовКонтрагента.Вставить("ВыбытиеДенежныхДокументов",				НСтр("ru='Расходный кассовый ордер'"));
	ВидыДокументовКонтрагента.Вставить("ЗаказПереработчику", 					НСтр("ru='Заказ'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетПереработчика", 					НСтр("ru='Отчет переработчика'"));
	ВидыДокументовКонтрагента.Вставить("ПоступлениеДенежныхДокументов",			НСтр("ru='Приходный кассовый ордер'"));
	//-- НЕ УТ
	//++ НЕ УТКА
	ВидыДокументовКонтрагента.Вставить("ЗаказДавальца", 						НСтр("ru='Заказ'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетДавальцу", 						НСтр("ru='Отчет переработчика'"));
	//-- НЕ УТКА
	
	Возврат ВидыДокументовКонтрагента;
	
КонецФункции

Функция ПредставленияВладельцевДокументов()
	
	ВидыДокументовКонтрагента = Новый Структура;
	
	ВидыДокументовКонтрагента.Вставить("АвансовыйОтчет",						НСтр("ru='получатель'"));
	ВидыДокументовКонтрагента.Вставить("АктВыполненныхРабот", 					НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("ВозвратТоваровМеждуОрганизациями",		НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("ВозвратТоваровОтКлиента",				НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("ВозвратТоваровПоставщику",				НСтр("ru='от'"));
	//Рарус Владимир Подрезов 09.10.2017 5783
	//	ВидыДокументовКонтрагента.Вставить("ЗаказКлиента", 							НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("ЗаказКлиента", 							НСтр("ru=''"));
	//Рарус Владимир Подрезов Конец
	ВидыДокументовКонтрагента.Вставить("ЗаказПоставщику", 						НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("ЗаявкаНаВозвратТоваровОтКлиента", 		НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("КорректировкаПоступления",				НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("КорректировкаРеализации",				НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("ОперацияПоПлатежнойКарте",				НСтр("ru='плательщик'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомиссионера",						НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомиссионераОСписании",			НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомитенту",						НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомитентуОСписании",				НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетПоКомиссииМеждуОрганизациями",		НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("ПередачаТоваровМеждуОрганизациями",		НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("ПоступлениеБезналичныхДенежныхСредств", НСтр("ru='плательщик'"));
	ВидыДокументовКонтрагента.Вставить("ПриобретениеТоваровУслуг",				НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("ПоступлениеУслугПрочихАктивов", 		НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("ПриходныйКассовыйОрдер",				НСтр("ru='получатель'"));
	ВидыДокументовКонтрагента.Вставить("РасходныйКассовыйОрдер",				НСтр("ru='плательщик'"));
	ВидыДокументовКонтрагента.Вставить("РеализацияТоваровУслуг", 				НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("РеализацияУслугПрочихАктивов", 			НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("СписаниеБезналичныхДенежныхСредств", 	НСтр("ru='плательщик'"));
	ВидыДокументовКонтрагента.Вставить("СчетНаОплатуКлиенту", 					НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("СчетФактураВыданный", 					НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("СчетФактураПолученный", 				НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("ТаможеннаяДекларацияИмпорт", 			НСтр("ru='от'"));
	//++ НЕ УТ
	ВидыДокументовКонтрагента.Вставить("ВыбытиеДенежныхДокументов",				НСтр("ru='плательщик'"));
	ВидыДокументовКонтрагента.Вставить("ЗаказПереработчику", 					НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетПереработчика", 					НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("ПоступлениеДенежныхДокументов",			НСтр("ru='получатель'"));
	//-- НЕ УТ
	//++ НЕ УТКА
	ВидыДокументовКонтрагента.Вставить("ЗаказДавальца", 						НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетДавальцу", 						НСтр("ru='от'"));
	//-- НЕ УТКА
	Возврат ВидыДокументовКонтрагента;
	
КонецФункции

Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Акт сверки взаимных расчетов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктСверкиВзаимныхРасчетов";
	КомандаПечати.Представление = НСтр("ru = 'Акт сверки взаимных расчетов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ПАРАМЕТРЫ.
// ВХОДЯЩИЕ:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ОбъектыПечати		   - СписокЗначений	  - Список объектов печати.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктСверкиВзаимныхРасчетов") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"АктСверкиВзаимныхРасчетов",
		НСтр("ru='Акт сверки взаимных расчетов'"),
		СформироватьПечатнуюФормуАктСверкиВзаимныхРасчетов(МассивОбъектов, ОбъектыПечати));
		
	КонецЕсли;
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

