#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт  

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании) Экспорт  
	СозданиеНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСоздатьНаОсновании);
КонецПроцедуры

Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт   

	 
	Если ПравоДоступа("Добавление", Метаданные.Документы.пкНачисленияПоВекселям) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.пкНачисленияПоВекселям.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.пкНачисленияПоВекселям);
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
	

		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт  

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);

КонецПроцедуры


//++ НЕ УТ

// Функция возвращает текст запроса для отражения документа в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстОтраженияВРеглУчете() Экспорт
	
#Область ПроцентыПоВекселям //(Дт 91.02 :: Кт 60.21.2)
	ТекстПроцентыПоВекселям = "
	|ВЫБРАТЬ // Начисление процентов по векселям (Дт 91.02 :: Кт 60.21.2)
	|
	|	Операция.Ссылка КАК Ссылка,
	|	Строки.Дата КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл, Строки.СуммаВзаиморасчетов) КАК Сумма,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.Расходы) КАК ВидСчетаДт,
	|	Строки.СтатьяРасходов КАК АналитикаУчетаДт,
	|	ДанныеДоговора.Подразделение КАК МестоУчетаДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВалютаДт,
	|	ДанныеДоговора.Подразделение КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеРасходы) КАК СчетДт,
	|	Строки.СтатьяРасходов КАК СубконтоДт1,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗатратРегл.Прочее) КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	Строки.ВалютаВзаиморасчетов КАК ВалютаКт,
	|	ДанныеДоговора.Подразделение КАК ПодразделениеКт,
	|	ДанныеДоговора.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	Строки.СчетКт КАК СчетКт,
	|	Строки.Контрагент КАК СубконтоКт1,
	|	Строки.Договор КАК СубконтоКт2,
	|	Строки.Вексель КАК СубконтоКт3,
	|
	|	Строки.СуммаВзаиморасчетов КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Начисление по векселям"" КАК Содержание
	|
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.пкНачисленияПоВекселям КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		Документ.пкНачисленияПоВекселям.Начисления КАК Строки
	|	ПО 
	|		Строки.Ссылка = Операция.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.СуммыДокументовВВалютеРегл КАК Суммы
	|	ПО 
	|		Строки.Ссылка = Суммы.Регистратор
	|		И Строки.ИдентификаторСтроки = Суммы.ИдентификаторСтроки
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
	|	ПО 
	|		Строки.Договор = ДанныеДоговора.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Константы КАК Константы
	|	ПО
	|		Истина
	|";
#КонецОбласти

	Возврат ТекстПроцентыПоВекселям;
	
КонецФункции

// Функция возвращает текст запроса дополнительных временных таблиц, 
// необходимых для отражения в регламетированном учете
//
Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт  
	
	Возврат "";
	
КонецФункции

//-- НЕ УТ

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт  

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт  
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСуммыДокументовВВалютеРегл(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДвиженияКонтрагентДоходыРасходы(Запрос, ТекстыЗапроса, Регистры);
	//++ НЕ УТ
	ТекстЗапросаТаблицаОтражениеДокументовВРеглУчете(Запрос, ТекстыЗапроса, Регистры);
	//-- НЕ УТ
	
	ПроведениеСерверУТ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)  
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата                  КАК Период,
	|	ДанныеДокумента.Организация           КАК Организация,
	|	ДанныеДокумента.ДатаНачала            КАК ДатаНачала,
	|	ДанныеДокумента.ДатаОкончания         КАК ДатаОкончания
	|ИЗ
	|	Документ.пкНачисленияПоВекселям КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",                Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация",           Реквизиты.Организация);
	Запрос.УстановитьПараметр("ИспользоватьУчетПрочихДоходовРасходов", 
	                                                   ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов"));
	Запрос.УстановитьПараметр("ВалютаУпр",             Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаРегл",            Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ДатаНачала",            Реквизиты.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",         Реквизиты.ДатаОкончания);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПрочиеРасходы);
	
КонецПроцедуры

Функция ТекстЗапросаВтКурсыВалют(Запрос, ТекстыЗапроса)  
	
	ИмяРегистра = "ВтКурсыВалют"; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КурсыВалют.Период    КАК Период,
	|	КурсыВалют.Валюта    КАК Валюта,
	|	КурсыВалют.Курс      КАК Курс,
	|	КурсыВалют.Кратность КАК Кратность
	|ПОМЕСТИТЬ ВтКурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаНачала, ) КАК КурсыВалют
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КурсыВалют.Период,
	|	КурсыВалют.Валюта,
	|	КурсыВалют.Курс,
	|	КурсыВалют.Кратность
	|ИЗ
	|	РегистрСведений.КурсыВалют КАК КурсыВалют
	|ГДЕ
	|	КурсыВалют.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КурсыВалют.Период,
	|	КурсыВалют.Валюта";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтДатыКурсовВалют(Запрос, ТекстыЗапроса) 
	
	ИмяРегистра = "ВтДатыКурсовВалют"; 
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтКурсыВалют", ТекстыЗапроса) Тогда
		ТекстЗапросаВтКурсыВалют(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаНачисления.Дата                 КАК Дата,
	|	ТаблицаНачисления.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	МАКСИМУМ(КурсыВалют.Период)            КАК ДатаКурсаВалюты,
	|	МАКСИМУМ(КурсыВалютыУпр.Период)        КАК ДатаКурсаУпр,
	|	МАКСИМУМ(КурсыВалютыРегл.Период)       КАК ДатаКурсаРегл
	|ПОМЕСТИТЬ ВтДатыКурсовВалют
	|ИЗ
	|	Документ.пкНачисленияПоВекселям.Начисления КАК ТаблицаНачисления
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсыВалют
	|	ПО ТаблицаНачисления.ВалютаВзаиморасчетов = КурсыВалют.Валюта
	|		И ТаблицаНачисления.Дата >= КурсыВалют.Период
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсыВалютыУпр
	|	ПО (&ВалютаУпр = КурсыВалютыУпр.Валюта)
	|		И ТаблицаНачисления.Дата >= КурсыВалютыУпр.Период
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсыВалютыРегл
	|	ПО (&ВалютаРегл = КурсыВалютыРегл.Валюта)
	|		И ТаблицаНачисления.Дата >= КурсыВалютыРегл.Период
	|ГДЕ
	|	ТаблицаНачисления.Ссылка = &Ссылка
	|	
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаНачисления.ВалютаВзаиморасчетов,
	|	ТаблицаНачисления.Дата";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтТаблицаНачисления(Запрос, ТекстыЗапроса) 
	
	ИмяРегистра = "ВтТаблицаНачисления"; 
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтДатыКурсовВалют", ТекстыЗапроса) Тогда
		ТекстЗапросаВтДатыКурсовВалют(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтКурсыВалют", ТекстыЗапроса) Тогда
		ТекстЗапросаВтКурсыВалют(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаНачисления.НомерСтроки КАК НомерСтроки,
	|	ТаблицаНачисления.Дата КАК Дата,
	|	ТаблицаНачисления.Контрагент КАК Контрагент,
	|	ТаблицаНачисления.Договор КАК Договор,
	|	ТаблицаНачисления.Вексель,
	|	ТаблицаНачисления.Договор.Подразделение КАК Подразделение,
	|	ТаблицаНачисления.Договор.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТаблицаНачисления.СтатьяРасходов КАК СтатьяРасходов,
	|	ТаблицаНачисления.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаНачисления.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ВЫРАЗИТЬ(ТаблицаНачисления.СуммаВзаиморасчетов * КурсыВалют.Курс * КурсыВалютыУпр.Кратность / (КурсыВалют.Кратность * КурсыВалютыУпр.Курс) КАК ЧИСЛО(15, 2)) КАК СуммаУпр,
	|	ВЫРАЗИТЬ(ТаблицаНачисления.СуммаВзаиморасчетов * КурсыВалют.Курс * КурсыВалютыРегл.Кратность / (КурсыВалют.Кратность * КурсыВалютыРегл.Курс) КАК ЧИСЛО(15, 2)) КАК СуммаРегл
	|ПОМЕСТИТЬ ВтТаблицаНачисления
	|ИЗ
	|	Документ.пкНачисленияПоВекселям.Начисления КАК ТаблицаНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДатыКурсовВалют КАК ДатыКурсовВалют
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсыВалют
	|			ПО ДатыКурсовВалют.ВалютаВзаиморасчетов = КурсыВалют.Валюта
	|				И ДатыКурсовВалют.ДатаКурсаВалюты = КурсыВалют.Период
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсыВалютыУпр
	|			ПО (&ВалютаУпр = КурсыВалютыУпр.Валюта)
	|				И ДатыКурсовВалют.ДатаКурсаУпр = КурсыВалютыУпр.Период
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсыВалютыРегл
	|			ПО (&ВалютаРегл = КурсыВалютыРегл.Валюта)
	|				И ДатыКурсовВалют.ДатаКурсаРегл = КурсыВалютыРегл.Период
	|		ПО ТаблицаНачисления.ВалютаВзаиморасчетов = ДатыКурсовВалют.ВалютаВзаиморасчетов
	|			И ТаблицаНачисления.Дата = ДатыКурсовВалют.Дата
	|ГДЕ
	|	ТаблицаНачисления.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры)  
	
	ИмяРегистра = "ПрочиеРасходы"; 
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаНачисления", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаНачисления(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаРасходы.Дата                    КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация                           КАК Организация,
	|	ТаблицаРасходы.Подразделение           КАК Подразделение,
	|	ТаблицаРасходы.СтатьяРасходов   	   КАК СтатьяРасходов,
	|	ТаблицаРасходы.Договор                 КАК АналитикаРасходов,
	|	ТаблицаРасходы.ВалютаВзаиморасчетов    КАК Валюта,
	|	ТаблицаРасходы.СуммаУпр                КАК Сумма,
	//++ НЕ УТ
	|	ВЫБОР КОГДА ТаблицаРасходы.СтатьяРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты) ТОГДА
	|		ТаблицаРасходы.СуммаУпр
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ                                  КАК СуммаБезНДС,
	|
	|	ВЫБОР КОГДА ТаблицаРасходы.СтатьяРасходов.ВариантРаспределенияРасходов В
	|		(ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты),
	|		 ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности)) ТОГДА
	|		ТаблицаРасходы.СуммаРегл
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ                                  КАК СуммаРегл,
	|	ВЫБОР КОГДА ТаблицаРасходы.СтатьяРасходов.ПринятиеКналоговомуУчету = ЛОЖЬ
	|				И ТаблицаРасходы.СтатьяРасходов.ВариантРаспределенияРасходов В
	|					(ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты),
	|					 ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности)) ТОГДА
	|		ТаблицаРасходы.СуммаРегл
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ                                   КАК ПостояннаяРазница,
	|	0                                       КАК ВременнаяРазница
	//-- НЕ УТ
	|ИЗ
	|	ВтТаблицаНачисления КАК ТаблицаРасходы
	|ГДЕ
	|	ТаблицаРасходы.СтатьяРасходов.ВариантРаспределенияРасходов <> ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|	И &ИспользоватьУчетПрочихДоходовРасходов";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСуммыДокументовВВалютеРегл(Запрос, ТекстыЗапроса, Регистры) 
	
	ИмяРегистра = "СуммыДокументовВВалютеРегл";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаНачисления", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаНачисления(Запрос, ТекстыЗапроса);
	КонецЕсли; 

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки          КАК НомерСтроки,
	|	ТаблицаДокумента.Дата                 КАК Период,
	|	ТаблицаДокумента.ВалютаВзаиморасчетов КАК Валюта,
	|	ТаблицаДокумента.ИдентификаторСтроки  КАК ИдентификаторСтроки,
	|	ВтНачисления.СуммаУпр                 КАК СуммаБезНДС,
	|	НЕОПРЕДЕЛЕНО                          КАК СтавкаНДС,
	|	0                                     КАК СуммаНДС,
	|	ВтНачисления.СуммаРегл                КАК СуммаБезНДСРегл,
	|	0                                     КАК СуммаНДСРегл,
	|	НЕОПРЕДЕЛЕНО                          КАК ТипРасчетов
	|
	|ИЗ
	|	Документ.пкНачисленияПоВекселям.Начисления КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТаблицаНачисления КАК ВтНачисления
	|		ПО ТаблицаДокумента.НомерСтроки = ВтНачисления.НомерСтроки
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И ТаблицаДокумента.ВалютаВзаиморасчетов <> &ВалютаРегл";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияКонтрагентДоходыРасходы(Запрос, ТекстыЗапроса, Регистры)   
	
	ИмяРегистра = "ДвиженияКонтрагентДоходыРасходы";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаНачисления", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаНачисления(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
#Область НачисленияПоВекселям
	НачисленияПоВекселям = 
	"ВЫБРАТЬ
	|	&Период                              КАК Период,
	|	&Организация                         КАК Организация,
	|	ТаблицаРасходы.Договор.Подразделение КАК Подразделение,
	|	&ХозяйственнаяОперация               КАК ХозяйственнаяОперация,
	|
	|	НЕОПРЕДЕЛЕНО		                 КАК Партнер,
	|	ТаблицаРасходы.Контрагент            КАК Контрагент,
	|	ТаблицаРасходы.Договор               КАК Договор,
	|	НЕОПРЕДЕЛЕНО                         КАК ОбъектРасчетов,
	|
	|	ТаблицаРасходы.СтатьяРасходов 		 КАК СтатьяДоходовРасходов,
	|	НЕОПРЕДЕЛЕНО                         КАК АналитикаДоходов,
	|	ТаблицаРасходы.Договор               КАК АналитикаРасходов,
	|	
	|	ТаблицаРасходы.СуммаУпр              КАК Сумма,
	|	0                                    КАК СуммаБезНДС,
	|	ТаблицаРасходы.СуммаРегл             КАК СуммаРегл,
	|	0                                    КАК СуммаРеглБезНДС,
	|
	|	ТаблицаРасходы.ВалютаВзаиморасчетов  КАК Валюта,
	|	ТаблицаРасходы.СуммаВзаиморасчетов   КАК СуммаВВалюте,
	|	0                                    КАК СуммаБезНДСВВалюте,
	|		
	|	ТаблицаРасходы.ВалютаВзаиморасчетов  КАК ВалютаВзаиморасчетов,
	|	ТаблицаРасходы.СуммаВзаиморасчетов   КАК СуммаВВалютеВзаиморасчетов,
	|	0                                    КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|
	|	ТаблицаРасходы.Договор               КАК ИсточникГФУРасчетов
	|ИЗ
	|	ВтТаблицаНачисления КАК ТаблицаРасходы";
#КонецОбласти

	ТекстЗапроса = НачисленияПоВекселям;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции
//++ НЕ УТ
Функция ТекстЗапросаТаблицаОтражениеДокументовВРеглУчете(Запрос, ТекстыЗапроса, Регистры)  
	
	ИмяРегистра = "ОтражениеДокументовВРеглУчете";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаНачисления", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаНачисления(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(ТаблицаПеридов.Период, ДЕНЬ) КАК ДатаОтражения
	|
	|ИЗ (
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Таблица.Дата КАК Период
	|	ИЗ
	|		ВтТаблицаНачисления КАК Таблица
	|
	|	) КАК ТаблицаПеридов";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции
//-- НЕ УТ

#КонецОбласти

#КонецОбласти

#КонецЕсли