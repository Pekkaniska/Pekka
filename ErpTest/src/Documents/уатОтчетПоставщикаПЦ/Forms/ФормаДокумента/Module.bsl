
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	об = РеквизитФормыВЗначение("Объект");
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(об, Отказ, СтандартнаяОбработка, ЭтаФорма, ДопПараметрыОткрытие);
	ЗначениеВРеквизитФормы(Об,"Объект");
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	уатОбщегоНазначенияСервер.ЗаполнитьШапкуДокумента(
		Объект,
		,
		Параметры.ЗначениеКопирования,
		Параметры.Основание,
		,
		,
		,
		Параметры.ЗначенияЗаполнения
	);
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	Элементы.Контрагент.Видимость = НЕ Объект.АЗС.ЭтоАЗССклад;
	
	ОбновитьНомерТСвТЧ();
	
	// УправлениеПредприятием.СлужебныеПодсистемы
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	// Конец УправлениеПредприятием.СлужебныеПодсистемы
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьНомерТСвТЧ();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьНомерТСвТЧ();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			//Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АЗСПриИзменении(Элемент)
	Объект.Контрагент = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.АЗС, "Контрагент_Склад");
	
	ЭтоАЗСсклад = (уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.АЗС, "ЭтоАЗССклад") = Истина);
	Если Элементы.Контрагент.Видимость = ЭтоАЗССклад Тогда
		Элементы.Контрагент.Видимость = НЕ ЭтоАЗССклад;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиНомерТСПриИзменении(Элемент)
	ТекСтрока = Элементы.Заправки.ТекущиеДанные;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСПриИзменении(ТекСтрока.ТС, ТекСтрока.НомерТС, Объект.Организация);
	
	ОбновитьНомерТСвТЧ(Элементы.Заправки.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиНомерТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("уатОрганизация", Объект.Организация);
	КонецЕсли;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСНачалоВыбора(Элемент, Элементы.Заправки.ТекущиеДанные.ТС, СтруктураОтбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиНомерТСОчистка(Элемент, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОчистка(Элементы.Заправки.ТекущиеДанные.ТС);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиНомерТСОткрытие(Элемент, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОткрытие(Элементы.Заправки.ТекущиеДанные.ТС, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиНомерТСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекСтрока = Элементы.Заправки.ТекущиеДанные;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОбработкаВыбора(ТекСтрока.ТС, ТекСтрока.НомерТС, ВыбранноеЗначение, СтандартнаяОбработка, Объект.Организация);
		
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиНомерТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиНомерТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// УправлениеПредприятием.СлужебныеПодсистемы
&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
КонецПроцедуры
// Конец УправлениеПредприятием.СлужебныеПодсистемы

&НаКлиенте
Процедура ЗагрузитьЗаправкиИзФайла(Команда)
	ОбработкаЗагрузкиПолноеИмя = ПолучитьОбработкуЗагрузки();
	
    Если НЕ ЗначениеЗаполнено(ОбработкаЗагрузкиПолноеИмя) Тогда
        ПоказатьПредупреждение(Неопределено, "Неправильное имя обработки для загрузки данных АЗС!
        	|Для исправления внесите изменения в справочник ""АЗС""");
        Возврат;				
	КонецЕсли;
	
	Если Объект.Заправки.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗагрузитьЗаправкиИзФайлаВопрос", ЭтотОбъект,
			Новый Структура("ОбработкаЗагрузкиПолноеИмя", ОбработкаЗагрузкиПолноеИмя)),
			"Очистить таблицу заправок перед загрузкой?", РежимДиалогаВопрос.ДаНетОтмена);
		Возврат;
	КонецЕсли;
	
	ЗагрузитьЗаправкиИзФайлаПродолжение(ОбработкаЗагрузкиПолноеИмя);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗаправкиИзФайлаВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Заправки.Очистить();
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
	Иначе
		Возврат;
    КонецЕсли;
	
	ЗагрузитьЗаправкиИзФайлаПродолжение(ДополнительныеПараметры.ОбработкаЗагрузкиПолноеИмя);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗаправкиИзФайлаПродолжение(ОбработкаЗагрузкиПолноеИмя)
    Попытка
		ОткрытьФорму(ОбработкаЗагрузкиПолноеИмя + ".Форма",,ЭтаФорма,,,, Новый ОписаниеОповещения("ЗагрузитьЗаправкиИзФайлаЗавершение", ЭтотОбъект),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Исключение
		ПоказатьПредупреждение(Неопределено, "Ошибка при заполнении табличной части ""Заправки"": " + ОписаниеОшибки());
		Возврат;				
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗаправкиИзФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда
		Для Каждого ТекСтрока Из Результат Цикл
			НоваяЗаправка = Объект.Заправки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗаправка, ТекСтрока);
		КонецЦикла;
		Модифицированность = Истина;
		
		//ЭлементыФормы.Заправки.ОбновитьСтроки();
    
    	НайтиЗаполнитьГСМиКарты();
    	НайтиЗаполнитьТСпоКартам();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиОтметитьВсе(Команда)
	Для Каждого ТекСтрока Из Объект.Заправки Цикл
		ТекСтрока.Проверено = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиСнятьВсе(Команда)
	Для Каждого ТекСтрока Из Объект.Заправки Цикл
		ТекСтрока.Проверено = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаправки(Команда)
	ЗаполнитьВсе();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГСМиКарты(Команда)
	НайтиЗаполнитьГСМиКарты();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТСпоКартам(Команда)
	НайтиЗаполнитьТСпоКартам();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервереБезКонтекста
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("РазностьДат", уатОбщегоНазначенияСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая,
								ДатаПередИзменением));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

//Функция ищет ГСМ
&НаСервереБезКонтекста
Функция НайтиГСМвБазе(мНоменклатураОтчета, мАЗС)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА рсГСМ.ГСМ ЕСТЬ NULL 
	|			ТОГДА спрАЗС.ГСМ
	|		ИНАЧЕ рсГСМ.ГСМ
	|	КОНЕЦ КАК ГСМ
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		уатНоменклатураГСМ.Номенклатура КАК ГСМ
	|	ИЗ
	|		РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
	|	ГДЕ
	|		уатНоменклатураГСМ.Номенклатура.Наименование = &НоменклатураОтчета) КАК рсГСМ
	|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			уатАЗССоответствиеГСМ.ГСМ КАК ГСМ
	|		ИЗ
	|			Справочник.уатАЗС.СоответствиеГСМ КАК уатАЗССоответствиеГСМ
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатАЗС КАК уатАЗС
	|				ПО уатАЗССоответствиеГСМ.Ссылка = уатАЗС.Ссылка
	|		ГДЕ
	|			уатАЗС.Ссылка = &АЗС
	|			И уатАЗССоответствиеГСМ.ГСМизФайла = &НоменклатураОтчета) КАК спрАЗС
	|		ПО рсГСМ.ГСМ = спрАЗС.ГСМ";
	
	Запрос.УстановитьПараметр("АЗС", мАЗС);
	Запрос.УстановитьПараметр("НоменклатураОтчета", СокрЛП(мНоменклатураОтчета));
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		
		
		Возврат РезультатЗапроса.ГСМ;
	Иначе
		Возврат "";
	КонецЕсли;	
	
КонецФункции	

//Функция ищет карточку
&НаСервереБезКонтекста
Функция НайтиКартуВБазе(мПластиковаяКартаОтчета)
	
	Запрос = Новый Запрос;
	 
	Запрос.Текст = 
	  "ВЫБРАТЬ
	  |	уатТопливныеКарты.Ссылка КАК Карта
	  |ИЗ
	  |	Справочник.уатТопливныеКарты КАК уатТопливныеКарты
	  |ГДЕ
	  |	уатТопливныеКарты.Код = &ПластиковаяКартаОтчета";
	 
	 Запрос.УстановитьПараметр("ПластиковаяКартаОтчета",СокрЛП(мПластиковаяКартаОтчета));
	 РезультатЗапроса = Запрос.Выполнить().Выбрать();
	 Если РезультатЗапроса.Следующий() Тогда
	 	Возврат РезультатЗапроса.Карта;
	Иначе
		Возврат "";
	КонецЕсли;	
	 
КонецФункции	

&НаКлиенте
Процедура НайтиЗаполнитьГСМиКарты()
	КэшЗагрузкиГСМ.Очистить();
	КэшКарт.Очистить();
		
	//При первом проходе составляем таблицу ГСМ и карточек
	КолСтрок = Объект.Заправки.Количество();
	Инд = 0;
	ПредИндикатор = Неопределено;
	
	Для Каждого ТекСтрока Из Объект.Заправки Цикл
		ОбработкаПрерыванияПользователя();
		
		Инд = Инд + 1;
		ТекИндикатор = Цел(Инд / КолСтрок * 100 / 5);
		
		//найдем соответствующий ГСМ
		мсвСтрокиПоиска = КэшЗагрузкиГСМ.НайтиСтроки(Новый Структура("НоменклатураОтчета, АЗС", ТекСтрока.НоменклатураОтчета,
							Объект.АЗС));
		Если мсвСтрокиПоиска.Количество() = 0 Тогда
			ТекГСМ = НайтиГСМвБазе(ТекСтрока.НоменклатураОтчета, Объект.АЗС);
			ТекСтрока.ГСМ = ТекГСМ;
			
			НоваяСтрокаКэш = КэшЗагрузкиГСМ.Добавить();
			НоваяСтрокаКэш.НоменклатураОтчета = ТекСтрока.НоменклатураОтчета;
			НоваяСтрокаКэш.АЗС = Объект.АЗС;
			НоваяСтрокаКэш.ГСМ = ТекГСМ;
		Иначе	
			ТекСтрока.ГСМ = мсвСтрокиПоиска[0].ГСМ;
		КонецЕсли;
		
		//найдем соответствующую пластиковую карту
		мсвСтрокиПоиска = КэшКарт.НайтиСтроки(Новый Структура("ПластиковаяКартаОтчета", ТекСтрока.ПластиковаяКартаОтчета));
		Если мсвСтрокиПоиска.Количество() = 0 Тогда
			ТекКарта = НайтиКартуВБазе(ТекСтрока.ПластиковаяКартаОтчета);
			ТекСтрока.ПластиковаяКарта = ТекКарта;
			
			НоваяСтрокаКэш = КэшКарт.Добавить();
			НоваяСтрокаКэш.ПластиковаяКартаОтчета = ТекСтрока.ПластиковаяКартаОтчета;
			НоваяСтрокаКэш.ПластиковаяКарта = ТекКарта;
		Иначе	
			ТекСтрока.ПластиковаяКарта = мсвСтрокиПоиска[0].ПластиковаяКарта;
		КонецЕсли;
		
		Если ТекИндикатор <> ПредИндикатор Тогда //отображаем обновление состояния каждые 5% для ускорения вывода
			Состояние("Идентификация ГСМ и пластиковых карт ...", Цел(Инд/КолСтрок * 100));
			ПредИндикатор = ТекИндикатор;
		КонецЕсли;

	КонецЦикла;
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НайтиЗаполнитьТСпоКартам()
	КэшВладельцыКарты.Очистить();
	КэшТСизПЛ.Очистить();
		
	КолСтрок = Объект.Заправки.Количество();
	Инд = 0;
	ПредИндикатор = Неопределено;
	
	Для Каждого ТекСтрока Из Объект.Заправки Цикл
		ОбработкаПрерыванияПользователя();
		
		Инд = Инд + 1;
		ТекИндикатор = Цел(Инд / КолСтрок * 100 / 5);
		
		//найдем соответствующий ТС
		мсвСтрокиПоиска = КэшВладельцыКарты.НайтиСтроки(Новый Структура("ПластиковаяКарта", ТекСтрока.ПластиковаяКарта));
		Если мсвСтрокиПоиска.Количество() = 0 Тогда
			мВладелецКарты = уатОбщегоНазначения.уатВладелецПластиковойКарты(ТекСтрока.ПластиковаяКарта);
			
			НоваяСтрокаКэш = КэшВладельцыКарты.Добавить();
			НоваяСтрокаКэш.ПластиковаяКарта = ТекСтрока.ПластиковаяКарта;
			НоваяСтрокаКэш.Владелец = мВладелецКарты;
		Иначе
			мВладелецКарты = мсвСтрокиПоиска[0].Владелец;
		КонецЕсли;
			
		//если карта закреплена за ТС - то все просто
		Если ТипЗнч(мВладелецКарты) = Тип("СправочникСсылка.ТранспортныеСредства") Тогда
			ТекСтрока.ТС = мВладелецКарты;
		ИначеЕсли ТипЗнч(мВладелецКарты) = Тип("СправочникСсылка.Сотрудники") Тогда
			//если за водителем - то вначале ищем п/л для водителя по дате заправки и из него берем ТС	
			мсвСтрокиПоиска = КэшТСизПЛ.НайтиСтроки(Новый Структура("Владелец, Дата", мВладелецКарты, ТекСтрока.Дата));
			Если мсвСтрокиПоиска.Количество() = 0 Тогда
				ТекСтрока.ТС = НайтиТСизПЛ(мВладелецКарты, ТекСтрока.Дата);
				
				НоваяСтрокаКэш = КэшТСизПЛ.Добавить();
				НоваяСтрокаКэш.Владелец = мВладелецКарты;
				НоваяСтрокаКэш.Дата = ТекСтрока.Дата;
				НоваяСтрокаКэш.ТС = ТекСтрока.ТС;
			Иначе
				ТекСтрока.ТС = мсвСтрокиПоиска[0].ТС;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекИндикатор <> ПредИндикатор Тогда //отображаем обновление состояния каждые 5% для ускорения вывода
			Состояние("Идентификация ТС по пластиковым картам ...", ТекИндикатор*5, "");
			ПредИндикатор = ТекИндикатор;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьНомерТСвТЧ();
	Модифицированность = Истина;
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиТСизПЛ(мВладелецКарты, мДатаЗаправки)
	Если НЕ ЗначениеЗаполнено(мВладелецКарты) ИЛИ НЕ ЗначениеЗаполнено(мДатаЗаправки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//запрос для поиска путевого листа для водителя
	ЗапросПЛ = Новый Запрос;
	ЗапросПЛ.Текст = 
	
	"ВЫБРАТЬ
	|	уатПутевойЛист.ТранспортноеСредство КАК ТС
	|ПОМЕСТИТЬ втПересечения
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|ГДЕ
	|	(уатПутевойЛист.Водитель1 = &Водитель
	|			ИЛИ уатПутевойЛист.Водитель2 = &Водитель)
	|	И &ДатаЗаправки МЕЖДУ уатПутевойЛист.ДатаВыезда И уатПутевойЛист.ДатаВозвращения
	|	И уатПутевойЛист.ПометкаУдаления <> ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатПутевойЛист.ТранспортноеСредство
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|ГДЕ
	|	(уатПутевойЛист.Водитель1 = &Водитель
	|			ИЛИ уатПутевойЛист.Водитель2 = &Водитель)
	|	И уатПутевойЛист.ДатаВозвращения >= &ДатаЗаправкиНачало
	|	И уатПутевойЛист.ДатаВыезда <= &ДатаЗаправкиКонец
	|	И уатПутевойЛист.ПометкаУдаления <> ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	втПересечения.ТС КАК ТС
	|ИЗ
	|	втПересечения КАК втПересечения";
	
	ЗапросПЛ.УстановитьПараметр("Водитель", мВладелецКарты);
	ЗапросПЛ.УстановитьПараметр("ДатаЗаправки", мДатаЗаправки);
	ЗапросПЛ.УстановитьПараметр("ДатаЗаправкиНачало", НачалоДня(мДатаЗаправки));
	ЗапросПЛ.УстановитьПараметр("ДатаЗаправкиКонец", КонецДня(мДатаЗаправки));
	РезультатЗапроса = ЗапросПЛ.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		Возврат РезультатЗапроса.ТС;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьВсе()
	НайтиЗаполнитьГСМиКарты();
	НайтиЗаполнитьТСпоКартам();
КонецПроцедуры

//Функция возвращает обработку загрузки данных 
&НаСервере
Функция ПолучитьОбработкуЗагрузки()
		Рез = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	уатАЗС.ФайлВнешнейОбработки КАК Данные
	|ИЗ
	|	Справочник.уатАЗС КАК уатАЗС
	|ГДЕ
	|	уатАЗС.Ссылка = &Объект";
	
	Запрос.УстановитьПараметр("Объект", Объект.АЗС);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		ИмяФайлаОбработкиЗагрузки = ПолучитьИмяВременногоФайла(".epf");
		
		ОписаниеЗащитыОтОпасныхДействий = Неопределено;
		// Обход ошибки обычного приложения
		Если ТекущийРежимЗапуска() <> РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение Тогда
			Попытка
				ОписаниеЗащитыОтОпасныхДействий = Новый ("ОписаниеЗащитыОтОпасныхДействий");
				ОписаниеЗащитыОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = Ложь;
			Исключение
				// Исключение возможно на предыдущих версиях платформы без механизма
				// защиты от опасных действий
			КонецПопытки;
		КонецЕсли;
		
		Попытка
			ТекДанные = РезультатЗапроса.Данные.Получить();
			ТекДанные.Записать(ИмяФайлаОбработкиЗагрузки);
			
			Если ОписаниеЗащитыОтОпасныхДействий = Неопределено Тогда
				// Предыдущие версии платформы без механизма защиты
				МенеджерОбработки = ВнешниеОбработки.Создать(ИмяФайлаОбработкиЗагрузки, Ложь);
			Иначе
				МенеджерОбработки = ВнешниеОбработки.Создать(
					ВнешниеОбработки.Подключить(
						ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайлаОбработкиЗагрузки)),
						, 
						Ложь, 
						ОписаниеЗащитыОтОпасныхДействий
					)
				);
			КонецЕсли;
			
			ПолноеИмя = МенеджерОбработки.Метаданные().ПолноеИмя();
			Рез = ПолноеИмя;
			
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОписаниеОшибки();
			Сообщение.Сообщить();
		КонецПопытки;
		
		// удаление врем. файла
		ВремФайл = Новый Файл(ИмяФайлаОбработкиЗагрузки);
		Если ВремФайл.Существует() Тогда
			Попытка
				УдалитьФайлы(ВремФайл);
			Исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтрШаблон("Не удалось удалить временный файл обработки ( %1 ) !", ОписаниеОшибки());
				Сообщение.Сообщить();
			КонецПопытки;
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции // ПолучитьОбработкуЗагрузки

&НаСервере
Процедура ОбновитьНомерТСвТЧ(Знач ТекСтрока = Неопределено)
	Если ТекСтрока <> Неопределено Тогда
		ТекСтрока = Объект.Заправки.НайтиПоИдентификатору(ТекСтрока);
	КонецЕсли;
	
	ИмяТЧ = "Заправки";
	Если ТекСтрока = Неопределено Тогда
		Для Каждого ТекСтрокаТЧ Из Объект[ИмяТЧ] Цикл
			ТекСтрокаТЧ.НомерТС = уатОбщегоНазначения.уатПредставлениеТС(ТекСтрокаТЧ.ТС, Объект.Организация);
		КонецЦикла;
	Иначе
		ТекСтрока.НомерТС = уатОбщегоНазначения.уатПредставлениеТС(ТекСтрока.ТС, Объект.Организация);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
