#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);

	ПроведениеСерверУТ.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	Если Не Отказ И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ЗаблокироватьДанные();
		ВнеоборотныеАктивыСлужебный.ПроверитьЧтоОСПринятыКУчету(ЭтотОбъект, Отказ);
		ВнеоборотныеАктивыСлужебный.ПроверитьВозможностьПринятияКУчетуОС(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	Если ОтражатьВУпрУчете И ОтражатьВРеглУчете Тогда
		ДокументВДругомУчете = Неопределено;
	КонецЕсли;
	
	ОчиститьНеиспользуемыеРеквизиты();
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Отказ И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ЗаполнитьРеквизитыОСПриПроведении(Отказ);
	КонецЕсли; 
	
	Если Не Отказ Тогда
		ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
		Документы.РазукомплектацияОС.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства, "РеестрДокументов,ДокументыПоОС");
		РегистрыСведений.РеестрДокументов.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
		РегистрыСведений.ДокументыПоОС.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ИнициализироватьДокументПередЗаполнением();
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		ЗаполнитьДокументПоОтбору(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("СправочникСсылка.ОбъектыЭксплуатации") Тогда
		ЗаполнитьНаОснованииОбъектаЭксплуатации(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.РазукомплектацияОС") Тогда
		ЗаполнитьНаОснованииРазукомплектации(ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	МассивНепроверяемыхРеквизитов.Добавить("ОС.СтоимостьУУ");
	
	УправлениеВнеоборотнымиАктивамиПереопределяемый.ПроверитьОтсутствиеДублейВТабличнойЧасти(
		ЭтотОбъект, 
		"ОС", 
		Новый Структура("ОсновноеСредство"), 
		Отказ);
		
	ВспомогательныеРеквизиты = ВспомогательныеРеквизиты();
		
	ПараметрыРеквизитовОбъекта = 
		ВнеоборотныеАктивыКлиентСервер.ЗначенияСвойствЗависимыхРеквизитов_РазукомплектацияОС(ЭтотОбъект, ВспомогательныеРеквизиты);
	ВнеоборотныеАктивыСлужебный.ОтключитьПроверкуЗаполненияРеквизитовОбъекта(ПараметрыРеквизитовОбъекта, МассивНепроверяемыхРеквизитов);
	
	ПроверитьТаблицуОсновныхСредств(ВспомогательныеРеквизиты, Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	Документы.РазукомплектацияОС.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ПроведениеСерверУТ.ЗагрузитьТаблицыДвижений(ДополнительныеСвойства, Движения);
	РегистрыСведений.РеестрДокументов.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	РегистрыСведений.ДокументыПоОС.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	
	РеглУчетПроведениеСервер.ЗарегистрироватьКОтражению(ЭтотОбъект, ДополнительныеСвойства, Движения, Отказ);
	//++ НЕ УТКА
	МеждународныйУчетПроведениеСервер.ЗарегистрироватьКОтражению(ЭтотОбъект, ДополнительныеСвойства, Движения, Отказ);
	//-- НЕ УТКА
	
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Заполнение

Процедура ИнициализироватьДокументПередЗаполнением()
	
	Ответственный = Пользователи.ТекущийПользователь();
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	
	ОтражатьВУпрУчете = Истина;
	
	Если ВнеоборотныеАктивыСлужебный.ДоступенВыборОтраженияВУчетах(Дата) Тогда
		ОтражатьВРеглУчете = Истина;
	Иначе
		ОтражатьВРеглУчете = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоОтбору(Основание)

	Если Основание.Свойство("ОсновноеСредство") Тогда
		ЗаполнитьНаОснованииОбъектаЭксплуатации(Основание.ОсновноеСредство);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьНаОснованииОбъектаЭксплуатации(Основание)
	
	Если НЕ ЗначениеЗаполнено(Основание) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "ЭтоГруппа");
	
	Если РеквизитыОснования.ЭтоГруппа Тогда
		
		ТекстСообщения = НСтр("ru = 'Разукомплектация группы ОС невозможна.
			|Выберите ОС. Для раскрытия группы используйте клавиши Ctrl и стрелку вниз.'");
		ВызватьИсключение(ТекстСообщения);
		
	КонецЕсли;
	
	ПервоначальныеСведения = ВнеоборотныеАктивыСлужебный.СообщитьЕслиОСНеПринятоКУчету(Основание, Дата);
	
	Организация = ПервоначальныеСведения.Организация;
	Подразделение = ПервоначальныеСведения.Местонахождение;
	
	ОсновноеСредство = Основание;
	
	ОтражатьВУпрУчете = ЗначениеЗаполнено(ПервоначальныеСведения.ДокументВводаВЭксплуатациюУУ);
	ОтражатьВРеглУчете = ЗначениеЗаполнено(ПервоначальныеСведения.ДокументВводаВЭксплуатациюБУ);
	
КонецПроцедуры

Процедура ЗаполнитьНаОснованииРазукомплектации(Основание, ОсновноеСредство = Неопределено)

	ОснованиеОбъект = Основание.ПолучитьОбъект();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ОснованиеОбъект,, "Номер,Дата,ВерсияДанных,Ответственный,ПометкаУдаления,Проведен");
	
	ДокументВДругомУчете = Основание;
	
	Если НЕ ЗначениеЗаполнено(ОсновноеСредство) Тогда
		ОсновноеСредство = ОснованиеОбъект.ОсновноеСредство;
	КонецЕсли; 
	
	
	Если ВнеоборотныеАктивыСлужебный.ДоступенВыборОтраженияВУчетах(Дата) Тогда
		Если ОснованиеОбъект.ОтражатьВРеглУчете Тогда
			ОтражатьВРеглУчете = Ложь;
			ОтражатьВУпрУчете  = Истина;
		Иначе
			ОтражатьВРеглУчете = Истина;
			ОтражатьВУпрУчете  = Ложь;
		КонецЕсли; 
	Иначе	
		ОтражатьВРеглУчете = Ложь;
		ОтражатьВУпрУчете  = Истина;
	КонецЕсли;
	
	ОС.Загрузить(ОснованиеОбъект.ОС.Выгрузить());
	Если Константы.ВалютаУправленческогоУчета.Получить() = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		
		ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Дата);
		
		Для каждого ДанныеСтроки Из ОС Цикл
			Если ОтражатьВРеглУчете Тогда
				ДанныеСтроки.СтоимостьБУ = ДанныеСтроки.СтоимостьУУ;
				ДанныеСтроки.СтоимостьНУ = ДанныеСтроки.СтоимостьУУ;
			ИначеЕсли ОтражатьВУпрУчете Тогда
				ДанныеСтроки.СтоимостьУУ = ?(ДанныеСтроки.СтоимостьБУ <> 0, ДанныеСтроки.СтоимостьБУ, ДанныеСтроки.СтоимостьНУ);
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЕсли; 
	
	ОчиститьНеиспользуемыеРеквизиты();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ЗаблокироватьДанные()

	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПервоначальныеСведенияОС");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ОС;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОсновноеСредство", "ОсновноеСредство");
	ЭлементБлокировки.УстановитьЗначение("Организация", Организация);
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.МестонахождениеОС");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ОС;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОсновноеСредство", "ОсновноеСредство");
	
	Блокировка.Заблокировать(); 
	
КонецПроцедуры

Процедура ПроверитьТаблицуОсновныхСредств(ВспомогательныеРеквизиты, Отказ)

	ВнеоборотныеАктивыСлужебный.ПроверитьРеквизитыОСПриПринятииКУчету(ЭтотОбъект, "ОС", Отказ);
	
	Если ЗначениеЗаполнено(ОсновноеСредство) Тогда
		
		ДанныеСтроки = ОС.Найти(ОсновноеСредство, "ОсновноеСредство");
		Если ДанныеСтроки <> Неопределено Тогда
			
			ТекстСообщения = НСтр("ru = 'Основное средство уже принято к учету'");
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ОС", ДанныеСтроки.НомерСтроки, "ОсновноеСредство");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "", Отказ);
			
		КонецЕсли; 
		
		// Проверка группы ОС и направления деятельности у принимаемых к учету ОС.
		СписокОС = ОС.ВыгрузитьКолонку("ОсновноеСредство");
		РезультатПроверки = Документы.РазукомплектацияОС.ПроверитьВыборОсновныхСредств(ОсновноеСредство, СписокОС);
		Если РезультатПроверки.ПроблемныеОС.Количество() <> 0 Тогда
			
			Если РезультатПроверки.ОтличаетсяГруппаОС 
				И РезультатПроверки.ОтличаетсяАмортизационнаяГруппа
				И НЕ РезультатПроверки.ОтличаетсяНаправлениеДеятельности Тогда
				
				ШаблонСообщения = НСтр("ru = 'У принимаемого к учету основного средства ""%1"" должна быть аналогичная группа ОС и амортизационная группа'");
				
			ИначеЕсли РезультатПроверки.ОтличаетсяАмортизационнаяГруппа
				И НЕ РезультатПроверки.ОтличаетсяГруппаОС
				И НЕ РезультатПроверки.ОтличаетсяНаправлениеДеятельности Тогда
				
				ШаблонСообщения = НСтр("ru = 'У принимаемого к учету основного средства ""%1"" должна быть аналогичная амортизационная группа'");
				
			ИначеЕсли РезультатПроверки.ОтличаетсяНаправлениеДеятельности
				И НЕ РезультатПроверки.ОтличаетсяГруппаОС
				И НЕ РезультатПроверки.ОтличаетсяАмортизационнаяГруппа Тогда
				
				ШаблонСообщения = НСтр("ru = 'У принимаемого к учету основного средства ""%1"" должно быть аналогичное направление деятельности'");
				
			Иначе
				ШаблонСообщения = НСтр("ru = 'У принимаемого к учету основного средства ""%1"" должна быть аналогичная группа ОС, амортизационная группа и направление деятельности'");
			КонецЕсли;
			
			Для каждого ДанныеСтроки Из ОС Цикл
				Если РезультатПроверки.ПроблемныеОС.Найти(ДанныеСтроки.ОсновноеСредство) <> Неопределено Тогда
					ТекстСообщения = СтрШаблон(ШаблонСообщения, Строка(ДанныеСтроки.ОсновноеСредство));
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ОС", ДанныеСтроки.НомерСтроки, "ОсновноеСредство");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "", Отказ);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли; 
	
	// Проверка заполнения табличной части
	
	Если ВспомогательныеРеквизиты.ПлательщикНалогаНаПрибыль Тогда
		ШаблонСообщенияСтоимостьРегл = НСтр("ru = 'Для основного средства ""%1"" необходимо указать стоимость в регламентированном учете'");
	Иначе
		ШаблонСообщенияСтоимостьРегл = НСтр("ru = 'Для основного средства ""%1"" необходимо указать стоимость в бухгалтерском учете'");
	КонецЕсли;
	
	ШаблонСообщенияСтоимостьУпр = НСтр("ru = 'Для основного средства ""%1"" необходимо указать стоимость в управленческом учете'");
	
	ШаблонСообщенияЛиквидационнаяСтоимость = НСтр("ru = 'Ликвидационная стоимость в строке %1 должна быть меньше стоимости по упр. учету'");
	
	Для каждого ДанныеСтроки Из ОС Цикл
		
		Если ОтражатьВУпрУчете Тогда
			
			Если ДанныеСтроки.СтоимостьУУ = 0  Тогда
				ТекстСообщения = СтрШаблон(ШаблонСообщенияСтоимостьУпр, ДанныеСтроки.ОсновноеСредство);
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ОС", ДанныеСтроки.НомерСтроки, "СтоимостьУУ");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "", Отказ);
			КонецЕсли; 
			
			Если ДанныеСтроки.ЛиквидационнаяСтоимость >= ДанныеСтроки.СтоимостьУУ И ДанныеСтроки.СтоимостьУУ <> 0 Тогда
				ТекстСообщения = СтрШаблон(ШаблонСообщенияЛиквидационнаяСтоимость, Формат(ДанныеСтроки.НомерСтроки, "ЧГ="));
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ОС", ДанныеСтроки.НомерСтроки, "ЛиквидационнаяСтоимость");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "", Отказ);
			КонецЕсли; 
			
		КонецЕсли;
		
		Если ОтражатьВРеглУчете Тогда
			Если ДанныеСтроки.СтоимостьБУ = 0 
				И (ДанныеСтроки.СтоимостьНУ = 0 ИЛИ НЕ ВспомогательныеРеквизиты.ПлательщикНалогаНаПрибыль) Тогда
					
				ТекстСообщения = СтрШаблон(ШаблонСообщенияСтоимостьРегл, ДанныеСтроки.ОсновноеСредство);
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ОС", ДанныеСтроки.НомерСтроки, "ОсновноеСредство");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "", Отказ);
			КонецЕсли; 
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОСПриПроведении(Отказ)
	
	Если НЕ ЗначениеЗаполнено(ОсновноеСредство) Тогда
		Возврат;
	КонецЕсли; 
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("Справочник.ОбъектыЭксплуатации");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "ОсновноеСредство");
	ЭлементБлокировки.ИсточникДанных = ОС;
	
	ЭлементБлокировки = Блокировка.Добавить("Справочник.ОбъектыЭксплуатации");
	ЭлементБлокировки.УстановитьЗначение("Ссылка", ОсновноеСредство);
	
	Блокировка.Заблокировать();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОбъектыЭксплуатации.Ссылка КАК Ссылка,
	|	ИсходныйОС.ГруппаОС КАК ГруппаОС,
	|	ИсходныйОС.АмортизационнаяГруппа КАК АмортизационнаяГруппа
	|ИЗ
	|	Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыЭксплуатации КАК ИсходныйОС
	|		ПО (ИсходныйОС.Ссылка = &ОсновноеСредство)
	|ГДЕ
	|	ОбъектыЭксплуатации.Ссылка В(&ОбъектыЭксплуатации)
	|	И (ОбъектыЭксплуатации.ГруппаОС = ЗНАЧЕНИЕ(Перечисление.ГруппыОС.ПустаяСсылка)
	|			ИЛИ ОбъектыЭксплуатации.АмортизационнаяГруппа = ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ПустаяСсылка))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОбъектыЭксплуатации", ОС.ВыгрузитьКолонку("ОсновноеСредство"));
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектСправочника = Выборка.Ссылка.ПолучитьОбъект();
		Если Не ЗначениеЗаполнено(ОбъектСправочника.ГруппаОС) Тогда
			ОбъектСправочника.ГруппаОС = Выборка.ГруппаОС;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ОбъектСправочника.АмортизационнаяГруппа) Тогда
			ОбъектСправочника.АмортизационнаяГруппа = Выборка.АмортизационнаяГруппа;
		КонецЕсли;
		Если ОбъектСправочника.Модифицированность() Тогда
			ОбъектСправочника.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьНеиспользуемыеРеквизиты()
	
	ВспомогательныеРеквизиты = ВспомогательныеРеквизиты();
	
	ПараметрыРеквизитовОбъекта =
		ВнеоборотныеАктивыКлиентСервер.ЗначенияСвойствЗависимыхРеквизитов_РазукомплектацияОС(ЭтотОбъект, ВспомогательныеРеквизиты);
		
	ВнеоборотныеАктивыКлиентСервер.ОчиститьНеиспользуемыеРеквизиты(ЭтотОбъект, ПараметрыРеквизитовОбъекта);
	
КонецПроцедуры

Функция ВспомогательныеРеквизиты()
	
	ВспомогательныеРеквизиты = Новый Структура;
	ВспомогательныеРеквизиты.Вставить("ПлательщикНалогаНаПрибыль", УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Дата));
	ВспомогательныеРеквизиты.Вставить("ПоддержкаПБУ18", УчетнаяПолитика.ПоддержкаПБУ18(Организация, Дата));
	Возврат ВспомогательныеРеквизиты;

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
