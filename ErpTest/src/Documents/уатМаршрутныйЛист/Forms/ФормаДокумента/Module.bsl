
#Область ОписаниеПеременных

&НаКлиенте
Перем мБуфСтрока; // буферная переменная для хранения кэша некоторых параметров изменяемой строки. 
                  // Назначение: для поиска смежной строки после изменения основной.  
&НаКлиенте
Перем ТекВремяСтроки;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	об = РеквизитФормыВЗначение("Объект");
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(об, Отказ, СтандартнаяОбработка, ЭтаФорма, ДопПараметрыОткрытие);
	ЗначениеВРеквизитФормы(Об,"Объект");
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	уатОбщегоНазначенияСервер.ЗаполнитьШапкуДокумента(
		Объект,
		,
		Параметры.ЗначениеКопирования,
		Параметры.Основание,
		,
		,
		,
		Параметры.ЗначенияЗаполнения
	);
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Дата = ТекущаяДата();
		ДатаДокумента = Объект.Дата;
	КонецЕсли;
	
	Отправлен = (Объект.ДатаИВремяОтправления <> '00010101');
	ОбновитьНомерТС();
	
	ОтображатьСтроитРаботы = уатИнтерфейсВзаимодействияСERPВызовСервера.уатЗначениеФункциональнойОпции("уатОбъединеннаяКонфигурацияСУСО");
	Если ОтображатьСтроитРаботы <> Истина Тогда
		Элементы.ЗаказыДеревоГруппаСтроительныеРаботы.Видимость = Ложь;
		Элементы.ЗаказыГруппаСтроительныеРаботы.Видимость = Ложь;
	КонецЕсли;
		
	ИспользоватьУпаковки = ПолучитьФункциональнуюОпцию("уатИспользоватьУпаковкиНоменклатуры");
	Если НЕ ИспользоватьУпаковки Тогда
		Элементы.ЗаказыДеревоЕдиницаИзмерения.Видимость = Ложь;
		Элементы.ЗаказыДеревоЕдиницаИзмеренияПоЗаказу.Видимость = Ложь;
	КонецЕсли;
	
	ОбновитьНадписьИтоги();
	
	// УправлениеПредприятием.СлужебныеПодсистемы
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	// Конец УправлениеПредприятием.СлужебныеПодсистемы
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ВосстановитьНастройкиФормы();
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда 
		ОбновитьДеревоЗаказов();
	Иначе 
		ПересчитатьПлановоеВремя();
	КонецЕсли;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаЗаказы Тогда 
		ЗаказыУстановитьСодержимоеЯчеек();
	КонецЕсли;
	
	ОбновитьСписокВыбораЭкипажа();
	
	УстановитьВидимостьИДоступностьЭлементовФормы();
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьНомерТС();
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаЗаказы Тогда 
		ЗаказыУстановитьСодержимоеЯчеек();
	КонецЕсли;
	
	ОбновитьНадписьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя")
		И РежимОтображенияДерево Тогда
			ЗаписатьДеревоЗаказов();
	КонецЕсли;
	
	СохранитьНастройкиФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьНомерТС();
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаЗаказы Тогда 
		ЗаказыУстановитьСодержимоеЯчеек();
	КонецЕсли;
	
	ОбновитьНадписьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПересчитатьПлановоеВремя();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.уатЗаказГрузоотправителя.Форма.ФормаВыбора" Тогда
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда 
			ЗаполнитьДеревоЗаказовПоЗаказуНаТС(ВыбранноеЗначение);
			ОбновитьГрузовыеПараметрыДереваЗаказов();
			ОбновитьМаршрутныеПараметрыДереваЗаказов();
		Иначе 
			ЗаполнитьЗаказыПоЗаказуНаТСНаСервере(ВыбранноеЗначение); 
			ПересчитатьПлановоеВремя();
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			//Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	УстановитьВидимостьИДоступностьЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура НомерТСПриИзменении(Элемент)
	уатИнтерфейсВводаТС.НомерТСПриИзменении(НомерТС, Объект.ТС, Объект.Организация);
	ОбновитьНомерТС();
	ИнициализацияДанныхАвтомобиляВФорме();
	ОбновитьСписокВыбораЭкипажа();
КонецПроцедуры

&НаКлиенте
Процедура НомерТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура();
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("уатОрганизация", Объект.Организация);
	КонецЕсли;
	
	СтруктураОтбора.Вставить("уатВидМоделиТС", ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Автотранспорт"));
	
	уатИнтерфейсВводаТС.НомерТСНачалоВыбора(Элемент, Объект.ТС, СтруктураОтбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерТСОчистка(Элемент, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.НомерТСОчистка(Объект.ТС);
	ИнициализацияДанныхАвтомобиляВФорме();
КонецПроцедуры

&НаКлиенте
Процедура НомерТСОткрытие(Элемент, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.НомерТСОткрытие(Объект.ТС, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура НомерТСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.НомерТСОбработкаВыбора(НомерТС, Объект.ТС, ВыбранноеЗначение, СтандартнаяОбработка, Объект.Организация);
	Модифицированность = Истина;
	ИнициализацияДанныхАвтомобиляВФорме();
	ОбновитьСписокВыбораЭкипажа();
КонецПроцедуры

&НаКлиенте
Процедура НомерТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура("Отбор", Новый Структура("уатВидМоделиТС", ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Автотранспорт")));
	
	уатИнтерфейсВводаТС.НомерТСАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация,, СтруктураОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура("Отбор", Новый Структура("уатВидМоделиТС", ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Автотранспорт")));
	
	уатИнтерфейсВводаТС.НомерТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация,, СтруктураОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура Водитель1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.Водитель1, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Водитель1Открытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.Водитель1, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Водитель1АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура Водитель1ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура Сотрудник1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.Водитель2, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Сотрудник1Открытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.Водитель2, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Сотрудник1АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура Сотрудник1ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура Водитель2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.Сотрудник1, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Водитель2Открытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.Сотрудник1, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Водитель2АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура Водитель2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура Сотрудник2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.Сотрудник2, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Сотрудник2Открытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.Сотрудник2, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Сотрудник2АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура Сотрудник2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаказыДерево

&НаКлиенте
Процедура ЗаказыДеревоУстановитьПараметрыЯчейки(Элемент)
	
	// Обнулить свойства элементов
	Если Элемент.ТекущийЭлемент.Имя = "ЗаказыДеревоПрибытиеФакт" Тогда 
		Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
	КонецЕсли;
	Если Элемент.ТекущийЭлемент.Имя = "ЗаказыДеревоПрибытиеФактВремя" Тогда 
		Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
	КонецЕсли;
	Если Элемент.ТекущийЭлемент.Имя = "ЗаказыДеревоПрибытиеПлан" Тогда 
		Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
	КонецЕсли;
	Если Элемент.ТекущийЭлемент.Имя = "ЗаказыДеревоПрибытиеПланВремя" Тогда 
		Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
	КонецЕсли;
	Если Элемент.ТекущийЭлемент.Имя = "ЗаказыДеревоУбытиеПлан" Тогда 
		Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
	КонецЕсли;
	Если Элемент.ТекущийЭлемент.Имя = "ЗаказыДеревоУбытиеПланВремя" Тогда 
		Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
	КонецЕсли;
	Если Элемент.ТекущийЭлемент.Имя = "ЗаказыДеревоУбытиеФакт" Тогда 
		Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
	КонецЕсли;
	Если Элемент.ТекущийЭлемент.Имя = "ЗаказыДеревоУбытиеФактВремя" Тогда 
		Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
	КонецЕсли;
	Если Элемент.ТекущийЭлемент.Имя = "ЗаказыДеревоВремя" Тогда 
		Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
	КонецЕсли;
	Если Элемент.ТекущийЭлемент.Имя = "ЗаказыДеревоРасстояние" Тогда 
		Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
	КонецЕсли;
	Если Элемент.ТекущийЭлемент.Имя = "ЗаказыДеревоСтоянка" Тогда 
		Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
	КонецЕсли;
	Если Элемент.ТекущийЭлемент.Имя = "ЗаказыДеревоПунктЗаказНоменклатура" Тогда 
		Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
	КонецЕсли;
	Если Элемент.ТекущийЭлемент.Имя = "ЗаказыДеревоЕдиницаИзмеренияПоЗаказу" Тогда 
		Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда 
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыДеревоСтоянка" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыДеревоВесБрутто" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыДеревоОбъем" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыДеревоКоличествоМест" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если ЗаказыДерево.ПолучитьЭлементы().Индекс(Элемент.ТекущиеДанные) = ЗаказыДерево.ПолучитьЭлементы().Количество()-1 Тогда 
			Если Элемент.ТекущийЭлемент.Имя = "ЗаказыДеревоВремя" Тогда 
				Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
			КонецЕсли;
			Если Элемент.ТекущийЭлемент.Имя = "ЗаказыДеревоРасстояние" Тогда 
				Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
			КонецЕсли;
			Если Элемент.ТекущийЭлемент.Имя = "ЗаказыДеревоСтоянка" Тогда 
				Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
			КонецЕсли;
		КонецЕсли;
		Если Элемент.ТекущиеДанные.ПолучитьЭлементы().Количество() = 0 Тогда 
			Если Элемент.ТекущийЭлемент.Имя = "ЗаказыДеревоПунктЗаказНоменклатура" Тогда 
				Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
			КонецЕсли;
			Если Элемент.ТекущийЭлемент.Имя = "ЗаказыДеревоСтоянка" Тогда 
				Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
			КонецЕсли;
		Иначе 
			Если Элемент.ТекущийЭлемент.Имя = "ЗаказыДеревоПунктЗаказНоменклатура" Тогда 
				Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
			КонецЕсли;
			Если Элемент.ТекущийЭлемент.Имя = "ЗаказыДеревоСтоянка" Тогда 
				Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Элемент.ТекущиеДанные.ПунктЗаказНоменклатура = Тип("СправочникСсылка.Номенклатура") Тогда 
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыДеревоЕдиницаИзмеренияПоЗаказу" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоПриИзменении(Элемент)
	
	ОбновитьТипыЗначенийСтрокДереваЗаказов();
	ЗаказыДеревоИзменитьДатыВШапке();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоПриАктивизацииЯчейки(Элемент)
	
	Если Не Элемент.ТекущаяСтрока = Неопределено Тогда 
		ЗаказыДеревоУстановитьПараметрыЯчейки(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	СписокЗаказов = ПолучитьСписокЗаказовНаСервере();
	
	ФормаВыбора = ПолучитьФорму("Документ.уатЗаказГрузоотправителя.ФормаВыбора",,Элемент);
	
	ЭлементОтбора                  = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение   = СписокЗаказов;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	 
	ТекСтрока = Элементы.ЗаказыДерево.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТекСтроки = Новый Структура("ПунктЗаказНоменклатура,
	                                  |Время,
	                                  |Расстояние,
	                                  |ТипТочкиМаршрута,
	                                  |ЕдиницаИзмерения,
	                                  |ЕдиницаИзмеренияПоЗаказу,
	                                  |Стоянка,
	                                  |Количество,
	                                  |ПрибытиеПлан,
	                                  |ПрибытиеФакт,
	                                  |ОкноС,
	                                  |УбытиеПлан,
	                                  |УбытиеФакт,
	                                  |ОкноПо,
	                                  |ВесБрутто,
	                                  |ВесПроцент,
	                                  |Объем,
	                                  |ОбъемПроцент,
	                                  |КоличествоМест,
	                                  |Контрагент,
	                                  |ЗаказГрузоотправителя");
	
	ЗаполнитьЗначенияСвойств(ДанныеТекСтроки, ТекСтрока);
	
	ЗаказыДеревоПередУдалениемНаСервере(ДанныеТекСтроки);
	
	ОбновитьГрузовыеПараметрыДереваЗаказов();
	ОбновитьМаршрутныеПараметрыДереваЗаказов();
	
	Модифицированность = Истина;
	Объект.Организация = Объект.Организация;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если Не НоваяСтрока И ТипЗнч(ТекДанные.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		мБуфСтрока.ЕдиницаИзмерения = ТекДанные.ЕдиницаИзмерения;
		мБуфСтрока.Количество       = ТекДанные.Количество;
	КонецЕсли;
	
	ТекВремяСтроки = Неопределено;
	Если Не НоваяСтрока Тогда
		ТекВремяСтроки = Новый Структура;
		Группа = ТекДанные.ПолучитьРодителя();
		Если Группа = Неопределено Тогда 

			ТекВремяСтроки.Вставить("ПрибытиеПлан", ТекДанные.ПрибытиеПлан);
			ТекВремяСтроки.Вставить("УбытиеПлан",   ТекДанные.УбытиеПлан);
			ТекВремяСтроки.Вставить("ПрибытиеФакт", ТекДанные.ПрибытиеФакт);
			ТекВремяСтроки.Вставить("УбытиеФакт",   ТекДанные.УбытиеФакт);
		Иначе 

			ТекВремяСтроки.Вставить("ПрибытиеПлан", Группа.ПрибытиеПлан);
			ТекВремяСтроки.Вставить("УбытиеПлан",   Группа.УбытиеПлан);
			ТекВремяСтроки.Вставить("ПрибытиеФакт", Группа.ПрибытиеФакт);
			ТекВремяСтроки.Вставить("УбытиеФакт",   Группа.УбытиеФакт);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Модифицированность = Истина;
	Объект.Организация = Объект.Организация; //Данный код добавлен, что бы при изменении дерева взвести флаг модифицированности 
	                          //у объекта и при печати вывелось стандартное сообщение.
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
		
		ПолучитьНоменклатуруПоЗаказуВДереве(ВыбранноеЗначение);
		ПараметрыФормы                 = Новый Структура("Заказ, ВыбНоменклатура");
		ПараметрыФормы.Заказ           = ВыбранноеЗначение;
		ПараметрыФормы.ВыбНоменклатура = табВыбраннаяНоменклатура;
		ФормаВыбораГруза = ПолучитьФорму("Документ.уатМаршрутныйЛист.Форма.ФормаВыбораГруза",ПараметрыФормы,Элемент);
		ФормаВыбораГруза.ЗакрыватьПриЗакрытииВладельца = Истина;
		ФормаВыбораГруза.ЗакрыватьПриВыборе            = Истина;
		ФормаВыбораГруза.Открыть();
	
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		
		Попытка 
			буф = ВыбранноеЗначение.Количество;
		Исключение
			Возврат;
		КонецПопытки;
		
		СтруктураВхЗначения = Новый Структура("Заказ, 
		                                      |Количество, 
		                                      |Номенклатура, 
		                                      |ЕдиницаИзмерения, 
		                                      |Вес, 
		                                      |Объем, 
		                                      |КоличествоМест",   
		                                      ВыбранноеЗначение.Заказ,
		                                      ВыбранноеЗначение.Количество,
		                                      ВыбранноеЗначение.Номенклатура,
		                                      ВыбранноеЗначение.ЕдиницаИзмерения,
		                                      ВыбранноеЗначение.Вес,
		                                      ВыбранноеЗначение.Объем,
		                                      ВыбранноеЗначение.КоличествоМест);
		
		ДобавитьСтрокиДереваПриВыбореЗаказа(СтруктураВхЗначения);
		
		ОбновитьГрузовыеПараметрыДереваЗаказов();
		
		ЗаказыДеревоИзменитьДатыВШапке();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаИсточник = ЗаказыДерево.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
	Если Не Строка = Неопределено Тогда 
		СтрокаПриемник = ЗаказыДерево.НайтиПоИдентификатору(Строка);
	КонецЕсли;
	
	Если Строка = Неопределено Тогда
		ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Отмена;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		Возврат;
	КонецЕсли;
	
	мЗначение = СтрокаИсточник;
	
	СтрокаПунктПриемник = СтрокаПриемник;
	Пока Не СтрокаПунктПриемник.ПолучитьРодителя() = Неопределено Цикл
		СтрокаПунктПриемник = СтрокаПунктПриемник.ПолучитьРодителя();
	КонецЦикла;
	СтрокаПунктИсточник = мЗначение;
	Пока Не СтрокаПунктИсточник.ПолучитьРодителя() = Неопределено Цикл
		СтрокаПунктИсточник = СтрокаПунктИсточник.ПолучитьРодителя();
	КонецЦикла;
	
	Если СтрокаПунктИсточник = СтрокаПунктПриемник Тогда
		ПараметрыПеретаскивания.Действие            = ДействиеПеретаскивания.Отмена;
		ПараметрыПеретаскивания.ДопустимыеДействия  = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		Возврат;
	КонецЕсли;
	
	ПеретаскиваниеВозможно = Истина;
	
	Если мЗначение.ПолучитьРодителя() = Неопределено И мЗначение.ПолучитьЭлементы().Количество() Тогда //пункт заказа
		
		Для Каждого ТекСтрокаЗаказ Из мЗначение.ПолучитьЭлементы() Цикл
			Для Каждого ТекСтрокаНоменклатура Из ТекСтрокаЗаказ.ПолучитьЭлементы() Цикл
				Если Не ПроверитьВозможностьПеретаскиванияВДеревеЗаказов(ТекСтрокаНоменклатура,СтрокаПриемник,СтрокаПунктИсточник,СтрокаПунктПриемник) Тогда
					ПеретаскиваниеВозможно = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не ПеретаскиваниеВозможно Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли мЗначение.ПолучитьРодителя() = Неопределено И Не мЗначение.ПолучитьЭлементы().Количество() Тогда //просто пункт
		
	ИначеЕсли ТипЗнч(мЗначение.ПунктЗаказНоменклатура) = Тип("ДокументССылка.уатЗаказГрузоотправителя") Тогда
		
		Для Каждого ТекСтрокаНоменклатура Из мЗначение.ПолучитьЭлементы() Цикл
			Если Не ПроверитьВозможностьПеретаскиванияВДеревеЗаказов(ТекСтрокаНоменклатура,СтрокаПриемник,СтрокаПунктИсточник,СтрокаПунктПриемник) Тогда
				ПеретаскиваниеВозможно = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(мЗначение.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		ПеретаскиваниеВозможно = ПроверитьВозможностьПеретаскиванияВДеревеЗаказов(мЗначение, СтрокаПриемник, СтрокаПунктИсточник, СтрокаПунктПриемник);
		
	КонецЕсли;
	
	ПараметрыПеретаскивания.Действие           = ?(ПеретаскиваниеВозможно, 
	                                               ДействиеПеретаскивания.Перемещение,
	                                               ДействиеПеретаскивания.Отмена);
	ПараметрыПеретаскивания.ДопустимыеДействия = ?(ПеретаскиваниеВозможно, 
	                                               ДопустимыеДействияПеретаскивания.Перемещение, 
	                                               ДопустимыеДействияПеретаскивания.НеОбрабатывать);
	
КонецПроцедуры

&НаКлиенте                    
Процедура ЗаказыДеревоПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтрокаИсточник = ЗаказыДерево.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
	СтрокаПриемник = ЗаказыДерево.НайтиПоИдентификатору(Строка);
	
	ДанныеИсточник = Новый Структура("ПунктЗаказНоменклатура,Выполнен,GUIDСтроки,Комментарий,ТипЗначенияСтроки,
	                                 |ЗаказГрузоотправителя,Контрагент,КоличествоМест,ОбъемПроцент,Объем,ВесПроцент,
	                                 |ВесБрутто,ОкноПо,УбытиеФакт,УбытиеПлан,ОкноС,ПрибытиеФакт,ПрибытиеПлан,Количество,
	                                 |Стоянка,ЕдиницаИзмеренияПоЗаказу,Номенклатура,ЕдиницаИзмерения,ТипТочкиМаршрута,Расстояние,Время");
	ДанныеПриемник = Новый Структура("ПунктЗаказНоменклатура,Выполнен,GUIDСтроки,Комментарий,ТипЗначенияСтроки,
	                                 |ЗаказГрузоотправителя,Контрагент,КоличествоМест,ОбъемПроцент,Объем,ВесПроцент,
	                                 |ВесБрутто,ОкноПо,УбытиеФакт,УбытиеПлан,ОкноС,ПрибытиеФакт,ПрибытиеПлан,Количество,
	                                 |Стоянка,ЕдиницаИзмеренияПоЗаказу,Номенклатура,ЕдиницаИзмерения,ТипТочкиМаршрута,Расстояние,Время");
	
	ЗаполнитьЗначенияСвойств(ДанныеИсточник, СтрокаИсточник);
	ЗаполнитьЗначенияСвойств(ДанныеПриемник, СтрокаПриемник);
	
	ЗаказыДеревоПеретаскиваниеНаСервере(ДанныеИсточник, ДанныеПриемник);
	
	Модифицированность = Истина;
	ОбновитьГрузовыеПараметрыДереваЗаказов();
	ОбновитьМаршрутныеПараметрыДереваЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоВремяПриИзменении(Элемент)
	
	ОбновитьМаршрутныеПараметрыДереваЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоРасстояниеПриИзменении(Элемент)
	
	ОбновитьМаршрутныеПараметрыДереваЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекДанные = Элементы.ЗаказыДерево.ТекущиеДанные;
	ТочкаМаршрутаРодителя = ТекДанные.ПолучитьРодителя();
	Если Не ТочкаМаршрутаРодителя = Неопределено Тогда
		ТочкаМаршрутаРодителя = ТочкаМаршрутаРодителя.ТипТочкиМаршрута;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("ЗаказГрузоотправителя, 
	                                  |ПунктЗаказНоменклатура,
	                                  |ЕдиницаИзмерения,
	                                  |ЕдиницаИзмеренияПоЗаказу,
	                                  |Количество", 
	                                  ТекДанные.ЗаказГрузоотправителя,
	                                  ТекДанные.ПунктЗаказНоменклатура, 
	                                  мБуфСтрока.ЕдиницаИзмерения,
	                                  ТекДанные.ЕдиницаИзмеренияПоЗаказу, 
	                                  мБуфСтрока.Количество);
	
	Рез = ЗаказыДеревоЕдиницаИзмеренияПриИзмененииНаСервере(СтруктураПоиска, 
	                                                        ТекДанные.ЕдиницаИзмерения, 
	                                                        ТочкаМаршрутаРодителя);
	Если Рез = 0 Тогда 
		ТекДанные.ЕдиницаИзмерения = мБуфСтрока.ЕдиницаИзмерения;
	КонецЕсли;
	
	ОбновитьГрузовыеПараметрыДереваЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоСтоянкаПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ЗаказыДерево.ТекущиеДанные;
	
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ГруппаОбхода = ТекСтрока.ПолучитьРодителя();
	
	СуммарноеВремяСтоянки = 0;
	Если ГруппаОбхода = Неопределено Тогда
		ТекСтрока.УбытиеПлан = СложитьВремя(ТекСтрока.ПрибытиеПлан, ТекСтрока.Стоянка);
		
		Если Не ТекВремяСтроки = Неопределено И ТекСтрока = ЗаказыДерево.ПолучитьЭлементы()[0] Тогда
			УбытиеПлан = 0;
			
			ТекВремяСтроки.Свойство("УбытиеПлан", УбытиеПлан);
			ТекВремяСтроки = Неопределено;
			
			РазницаВремени = 0;
			Если Не ТекСтрока.УбытиеПлан = УбытиеПлан Тогда
				РазницаВремени = ТекСтрока.УбытиеПлан - УбытиеПлан;
			КонецЕсли;
			
			Объект.ДатаИВремяОтправленияПлан = Объект.ДатаИВремяОтправленияПлан + РазницаВремени;
			Если Объект.Заказы.Количество() Тогда 
				Объект.Заказы.Получить(0).УбытиеПлан = Объект.ДатаИВремяОтправленияПлан;
			КонецЕсли;
		КонецЕсли;
		
	Иначе 
		Для Каждого ТекСтрокаЗаказ Из ГруппаОбхода.ПолучитьЭлементы() Цикл 
			СуммарноеВремяСтоянки = СуммарноеВремяСтоянки + ТекСтрокаЗаказ.Стоянка;
		КонецЦикла;
		ГруппаОбхода.УбытиеПлан = СложитьВремя(ГруппаОбхода.ПрибытиеПлан, СуммарноеВремяСтоянки);
		
		Если Не ТекВремяСтроки = Неопределено И ГруппаОбхода = ЗаказыДерево.ПолучитьЭлементы()[0] Тогда
			УбытиеПлан = 0;
			
			ТекВремяСтроки.Свойство("УбытиеПлан", УбытиеПлан);
			ТекВремяСтроки = Неопределено;
			
			РазницаВремени = 0;
			Если Не ГруппаОбхода.УбытиеПлан = УбытиеПлан Тогда
				РазницаВремени = ГруппаОбхода.УбытиеПлан - УбытиеПлан;
			КонецЕсли;
			
			Объект.ДатаИВремяОтправленияПлан = Объект.ДатаИВремяОтправленияПлан + РазницаВремени;
			Если Объект.Заказы.Количество() Тогда 
				Объект.Заказы.Получить(0).УбытиеПлан = Объект.ДатаИВремяОтправленияПлан;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьМаршрутныеПараметрыДереваЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоКоличествоПриИзменении(Элемент)
	
	ТекДанные = Элементы.ЗаказыДерево.ТекущиеДанные;
	
	ТочкаМаршрутаРодителя = ТекДанные.ПолучитьРодителя();
	Если Не ТочкаМаршрутаРодителя = Неопределено Тогда
		ТочкаМаршрутаРодителя = ТочкаМаршрутаРодителя.ТипТочкиМаршрута;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("ЗаказГрузоотправителя, 
	                                  |ПунктЗаказНоменклатура, 
	                                  |ЕдиницаИзмерения, 
	                                  |ЕдиницаИзмеренияПоЗаказу, 
	                                  |Количество",
	                                  ТекДанные.ЗаказГрузоотправителя,        
	                                  ТекДанные.ПунктЗаказНоменклатура, 
	                                  ТекДанные.ЕдиницаИзмерения, 
	                                  ТекДанные.ЕдиницаИзмеренияПоЗаказу, 
	                                  мБуфСтрока.Количество);
	
	//поиск строк по ключу								  
	НайдСтроки = Новый Массив;
	Для Каждого ТекСтрокаПункт Из ЗаказыДерево.ПолучитьЭлементы() Цикл
		Для Каждого ТекСтрокаЗаказ Из ТекСтрокаПункт.ПолучитьЭлементы() Цикл
			Для Каждого ТекСтрокаНоменклатура Из ТекСтрокаЗаказ.ПолучитьЭлементы() Цикл
				флСоотв = Истина;
				Для Каждого ТекЭл Из СтруктураПоиска Цикл
					Если ТекСтрокаНоменклатура[ТекЭл.Ключ] <> ТекЭл.Значение Тогда
						флСоотв = Ложь;
						Прервать
					КонецЕсли;
				КонецЦикла;
				
				Если флСоотв Тогда
					НайдСтроки.Добавить(ТекСтрокаНоменклатура);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	//не найдено, остается старое значение
	Если НайдСтроки.Количество() = 0 Тогда
		ТекДанные.Количество = мБуфСтрока.Количество;
		Возврат;
	КонецЕсли;
	
	//найдено, выполняется пропорциональный пересчет весо-объемных показателей
	Для Каждого ТекЭлем Из НайдСтроки Цикл
		Если ТекЭлем.Количество = 0 Тогда
			ТекЭлем.ВесБрутто       = 0;
			ТекЭлем.Объем          	= 0;
			ТекЭлем.КоличествоМест 	= 0;
		Иначе
			ТекЭлем.ВесБрутто      = ТекЭлем.ВесБрутто      / ТекЭлем.Количество * ТекДанные.Количество;
			ТекЭлем.Объем          = ТекЭлем.Объем          / ТекЭлем.Количество * ТекДанные.Количество;
			ТекЭлем.КоличествоМест = ТекЭлем.КоличествоМест / ТекЭлем.Количество * ТекДанные.Количество;
		КонецЕсли;
		Если ТекЭлем.КоличествоМест = 0 Тогда
			ТекЭлем.КоличествоМест = 1;
		КонецЕсли;
		
		СтрокаРодитель = ТекЭлем.ПолучитьРодителя();
		Если СтрокаРодитель <> Неопределено И СтрокаРодитель.ТипТочкиМаршрута <> ТочкаМаршрутаРодителя Тогда
			ТекЭлем.Количество = ТекДанные.Количество;
		КонецЕсли;
	КонецЦикла;
	
	Если мБуфСтрока.Количество = 0 Тогда
		ТекДанные.ВесБрутто      = 0;
		ТекДанные.Объем          = 0;
		ТекДанные.КоличествоМест = 0;
	Иначе
		ТекДанные.ВесБрутто      = ТекДанные.ВесБрутто      / мБуфСтрока.Количество * ТекДанные.Количество;
		ТекДанные.Объем          = ТекДанные.Объем          / мБуфСтрока.Количество * ТекДанные.Количество;
		ТекДанные.КоличествоМест = ТекДанные.КоличествоМест / мБуфСтрока.Количество * ТекДанные.Количество;
	КонецЕсли;
	
	Если ТекДанные.КоличествоМест = 0 Тогда
		ТекДанные.КоличествоМест = 1;
	КонецЕсли;
	
	ОбновитьГрузовыеПараметрыДереваЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоПрибытиеФактПриИзменении(Элемент)
	
	ОбновитьМаршрутныеПараметрыДереваЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоПрибытиеФактВремяПриИзменении(Элемент)
	//стандартно очистка времени вызывает также очистку всей даты, поэтому здесь обходим это поведение
	ТекСтрока = Элементы.ЗаказыДерево.ТекущиеДанные;
	Если ТекСтрока.ПрибытиеФакт = '00010101' И ТекВремяСтроки.ПрибытиеФакт <> '00010101' Тогда
		ТекСтрока.ПрибытиеФакт = НачалоДня(ТекВремяСтроки.ПрибытиеФакт);
	КонецЕсли;
	
	ЗаказыДеревоПрибытиеФактПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоПрибытиеПланПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ЗаказыДерево.ТекущиеДанные;
	
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ТекВремяСтроки = Неопределено Тогда
		УбытиеПлан   = 0;
		ПрибытиеПлан = 0;
		
		ТекВремяСтроки.Свойство("УбытиеПлан",   УбытиеПлан);
		ТекВремяСтроки.Свойство("ПрибытиеПлан", ПрибытиеПлан);
		ТекВремяСтроки = Неопределено;
		
		РазницаВремени = 0;
		
		Если Не ТекСтрока.ПрибытиеПлан = ПрибытиеПлан Тогда
			РазницаВремени = ТекСтрока.ПрибытиеПлан - ПрибытиеПлан;
		КонецЕсли;
		
		Объект.ДатаИВремяОтправленияПлан = Объект.ДатаИВремяОтправленияПлан + РазницаВремени;
	КонецЕсли;
	
	ОбновитьМаршрутныеПараметрыДереваЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоПрибытиеПланВремяПриИзменении(Элемент)
	//стандартно очистка времени вызывает также очистку всей даты, поэтому здесь обходим это поведение
	ТекСтрока = Элементы.ЗаказыДерево.ТекущиеДанные;
	Если ТекСтрока.ПрибытиеПлан = '00010101' И ТекВремяСтроки.ПрибытиеПлан <> '00010101' Тогда
		ТекСтрока.ПрибытиеПлан = НачалоДня(ТекВремяСтроки.ПрибытиеПлан);
	КонецЕсли;
	
	ЗаказыДеревоПрибытиеПланПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоУбытиеПланПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ЗаказыДерево.ТекущиеДанные;
	
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ТекВремяСтроки = Неопределено Тогда
		УбытиеПлан   = 0;
		ПрибытиеПлан = 0;
		
		ТекВремяСтроки.Свойство("УбытиеПлан",   УбытиеПлан);
		ТекВремяСтроки.Свойство("ПрибытиеПлан", ПрибытиеПлан);
		ТекВремяСтроки = Неопределено;
		
		РазницаВремени = 0;
		
		Если Не ТекСтрока.УбытиеПлан = УбытиеПлан Тогда
			РазницаВремени = ТекСтрока.УбытиеПлан - УбытиеПлан;
		КонецЕсли;
		
		Объект.ДатаИВремяОтправленияПлан = Объект.ДатаИВремяОтправленияПлан + РазницаВремени;
	КонецЕсли;
	
	ОбновитьМаршрутныеПараметрыДереваЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоУбытиеПланВремяПриИзменении(Элемент)
	//стандартно очистка времени вызывает также очистку всей даты, поэтому здесь обходим это поведение
	ТекСтрока = Элементы.ЗаказыДерево.ТекущиеДанные;
	Если ТекСтрока.УбытиеПлан = '00010101' И ТекВремяСтроки.УбытиеПлан <> '00010101' Тогда
		ТекСтрока.УбытиеПлан = НачалоДня(ТекВремяСтроки.УбытиеПлан);
	КонецЕсли;
	
	ЗаказыДеревоУбытиеПланПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоУбытиеФактПриИзменении(Элемент)
	
	ОбновитьМаршрутныеПараметрыДереваЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоУбытиеФактВремяПриИзменении(Элемент)
	//стандартно очистка времени вызывает также очистку всей даты, поэтому здесь обходим это поведение
	ТекСтрока = Элементы.ЗаказыДерево.ТекущиеДанные;
	Если ТекСтрока.УбытиеФакт = '00010101' И ТекВремяСтроки.УбытиеФакт <> '00010101' Тогда
		ТекСтрока.УбытиеФакт = НачалоДня(ТекВремяСтроки.УбытиеФакт);
	КонецЕсли;
	
	ЗаказыДеревоУбытиеФактПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоВесБруттоПриИзменении(Элемент)
	
	ТекДанные = Элементы.ЗаказыДерево.ТекущиеДанные;
	
	ТочкаМаршрутаРодителя = ТекДанные.ПолучитьРодителя();
	Если Не ТочкаМаршрутаРодителя = Неопределено Тогда
		ТочкаМаршрутаРодителя = ТочкаМаршрутаРодителя.ТипТочкиМаршрута;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("ЗаказГрузоотправителя, 
	                                  |ПунктЗаказНоменклатура, 
	                                  |ЕдиницаИзмерения, 
	                                  |ЕдиницаИзмеренияПоЗаказу",
	                                  ТекДанные.ЗаказГрузоотправителя, 
	                                  ТекДанные.ПунктЗаказНоменклатура, 
	                                  ТекДанные.ЕдиницаИзмерения,
	                                  ТекДанные.ЕдиницаИзмеренияПоЗаказу);
	
	ЗаказыДеревоВесБруттоПриИзмененииНаСервере(СтруктураПоиска, ТекДанные.ВесБрутто, ТочкаМаршрутаРодителя);
	
	ОбновитьГрузовыеПараметрыДереваЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоОбъемПриИзменении(Элемент)
	
	ТекДанные = Элементы.ЗаказыДерево.ТекущиеДанные;
	
	ТочкаМаршрутаРодителя = ТекДанные.ПолучитьРодителя();
	Если Не ТочкаМаршрутаРодителя = Неопределено Тогда
		ТочкаМаршрутаРодителя = ТочкаМаршрутаРодителя.ТипТочкиМаршрута;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("ЗаказГрузоотправителя,
	                                  |ПунктЗаказНоменклатура, 
	                                  |ЕдиницаИзмерения,
	                                  |ЕдиницаИзмеренияПоЗаказу, 
	                                  |Количество",
	                                  ТекДанные.ЗаказГрузоотправителя,
	                                  ТекДанные.ПунктЗаказНоменклатура, 
	                                  ТекДанные.ЕдиницаИзмерения, 
	                                  ТекДанные.ЕдиницаИзмеренияПоЗаказу,
	                                  ТекДанные.Количество);
	
	ЗаказыДеревоОбъемПриИзмененииНаСервере(СтруктураПоиска, ТекДанные.Объем, ТочкаМаршрутаРодителя);
	
	ОбновитьГрузовыеПараметрыДереваЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоКоличествоМестПриИзменении(Элемент)
	
	ТекДанные = Элементы.ЗаказыДерево.ТекущиеДанные;
	
	ТочкаМаршрутаРодителя = ТекДанные.ПолучитьРодителя();
	Если Не ТочкаМаршрутаРодителя = Неопределено Тогда
		ТочкаМаршрутаРодителя = ТочкаМаршрутаРодителя.ТипТочкиМаршрута;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("ЗаказГрузоотправителя, 
	                                  |ПунктЗаказНоменклатура,
	                                  |ЕдиницаИзмерения,
	                                  |ЕдиницаИзмеренияПоЗаказу,
	                                  |Количество",
	                                  ТекДанные.ЗаказГрузоотправителя,
	                                  ТекДанные.ПунктЗаказНоменклатура, 
	                                  ТекДанные.ЕдиницаИзмерения,
	                                  ТекДанные.ЕдиницаИзмеренияПоЗаказу,
	                                  ТекДанные.Количество);
	
	ЗаказыДеревоКоличествоМестПриИзмененииНаСервере(СтруктураПоиска, ТекДанные.КоличествоМест, ТочкаМаршрутаРодителя);
	
	ОбновитьГрузовыеПараметрыДереваЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоВыполненПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ЗаказыДерево.ТекущиеДанные;
	
	СтрокаРодитель = ТекСтрока.ПолучитьРодителя();
	Если СтрокаРодитель = Неопределено Тогда //Пункт
		Для Каждого ТекСтрокаЗаказ Из ТекСтрока.ПолучитьЭлементы() Цикл
			ТекСтрокаЗаказ.Выполнен = ТекСтрока.Выполнен;
			Для Каждого ТекСтрокаНоменклатура Из ТекСтрокаЗаказ.ПолучитьЭлементы() Цикл
				ТекСтрокаНоменклатура.Выполнен = ТекСтрока.Выполнен;
			КонецЦикла;
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.ПрибытиеФакт) И ТекСтрока.Выполнен Тогда 
			ТекСтрока.ПрибытиеФакт = НачалоМинуты(ТекущаяДата());
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ТекСтрока.УбытиеФакт) И ТекСтрока.Выполнен Тогда 
			ТекСтрока.УбытиеФакт = НачалоМинуты(ТекущаяДата());
		КонецЕсли;
		
	Иначе
		СтрокаРодительРодитель = СтрокаРодитель.ПолучитьРодителя();
		Если СтрокаРодительРодитель = Неопределено Тогда //Заказ
			Для Каждого ТекСтрокаНоменклатура Из ТекСтрока.ПолучитьЭлементы() Цикл
				ТекСтрокаНоменклатура.Выполнен = ТекСтрока.Выполнен;
			КонецЦикла;
			
			флВыполнен = Истина;
			Для Каждого ТекСтрокаЗаказ Из СтрокаРодитель.ПолучитьЭлементы() Цикл
				флВыполнен = флВыполнен И ТекСтрокаЗаказ.Выполнен;
			КонецЦикла;
			СтрокаРодитель.Выполнен = флВыполнен;
			
			Если Не ЗначениеЗаполнено(СтрокаРодитель.ПрибытиеФакт) И СтрокаРодитель.Выполнен Тогда 
				СтрокаРодитель.ПрибытиеФакт = НачалоМинуты(ТекущаяДата());
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаРодитель.УбытиеФакт) И СтрокаРодитель.Выполнен Тогда 
				СтрокаРодитель.УбытиеФакт = НачалоМинуты(ТекущаяДата());
			КонецЕсли;
			
		Иначе //Номенклатура
			флВыполнен = Истина;
			Для Каждого ТекСтрокаНоменклатура Из СтрокаРодитель.ПолучитьЭлементы() Цикл
				флВыполнен = флВыполнен И ТекСтрокаНоменклатура.Выполнен;
			КонецЦикла;
			СтрокаРодитель.Выполнен = флВыполнен;
			
			флВыполнен = Истина;
			Для Каждого ТекСтрокаЗаказ Из СтрокаРодительРодитель.ПолучитьЭлементы() Цикл
				флВыполнен = флВыполнен И ТекСтрокаЗаказ.Выполнен;
			КонецЦикла;
			СтрокаРодительРодитель.Выполнен = флВыполнен;
			
			Если Не ЗначениеЗаполнено(СтрокаРодительРодитель.ПрибытиеФакт) И СтрокаРодительРодитель.Выполнен Тогда 
				СтрокаРодительРодитель.ПрибытиеФакт = НачалоМинуты(ТекущаяДата());
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаРодительРодитель.УбытиеФакт) И СтрокаРодительРодитель.Выполнен Тогда 
				СтрокаРодительРодитель.УбытиеФакт = НачалоМинуты(ТекущаяДата());
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗаказыДеревоИзменитьДатыВШапке();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаказы

&НаКлиенте
Процедура ЗаказыУстановитьПараметрыЯчейки(Элемент)
	                                     
	ТекДанныеСтроки = Элементы.Заказы.ДанныеСтроки(Элемент.ТекущаяСтрока);
	
	Если ЗначениеЗаполнено(ТекДанныеСтроки.ЗаказГрузоотправителя) Тогда
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыПункт" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыВесБрутто" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыОбъем" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыКоличествоМест" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыКоличество" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыЕдиницаИзмерения" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
		КонецЕсли;
	Иначе 
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыПункт" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыВесБрутто" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыОбъем" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыКоличествоМест" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыКоличество" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыЕдиницаИзмерения" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = "ЗаказыЕдиницаИзмеренияПоЗаказу" Тогда 
		Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если Объект.Заказы.Индекс(Элемент.ТекущиеДанные) = Объект.Заказы.Количество()-1 Тогда
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыРасстояние" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыВремя" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
	Иначе 
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыРасстояние" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыВремя" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаказыУстановитьСодержимоеЯчеек()
	
	ВремяПоЗаказам = ПолучитьВремяОтправленияДоставкиПоЗаказам();
	
	Для Каждого ТекСтрока Из Объект.Заказы Цикл 
		Если ТекСтрока.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка") Тогда 
			ТекСтрока.ОкноС  = ВремяПоЗаказам.Получить(Объект.Заказы.Индекс(ТекСтрока)).ОтправлениеС;
			ТекСтрока.ОкноПо = ВремяПоЗаказам.Получить(Объект.Заказы.Индекс(ТекСтрока)).ОтправлениеПо;
		Иначе 
			ТекСтрока.ОкноС  = ВремяПоЗаказам.Получить(Объект.Заказы.Индекс(ТекСтрока)).ДоставкаС;
			ТекСтрока.ОкноПо = ВремяПоЗаказам.Получить(Объект.Заказы.Индекс(ТекСтрока)).ДоставкаПо;
		КонецЕсли;
		Если Объект.Заказы.Индекс(ТекСтрока) = Объект.Заказы.Количество()-1 Тогда 
			ТекСтрока.Время = Неопределено;
			ТекСтрока.Расстояние = Неопределено;
			
			Сч = Объект.Заказы.Количество()-2;
			Пока Сч >= 0 Цикл 
				измСтрока = Объект.Заказы.Получить(Сч);
				Если измСтрока.Пункт = ТекСтрока.Пункт Тогда 
					измСтрока.Время = Неопределено;
					измСтрока.Расстояние = Неопределено;
				Иначе 
					Сч = -1;
					Прервать;
				КонецЕсли;
				Сч = Сч - 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПриИзменении(Элемент)
	
	ЗаказыУстановитьСодержимоеЯчеек();
	
	УстановитьДанныеСтрокОдногоПункта(Элементы.Заказы.ТекущиеДанные);
	
	ПересчитатьПлановоеВремя();
	
	ЗаказыИзменитьДатыВШапке();
	
	УстановитьВидимостьИДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПриАктивизацииЯчейки(Элемент)
	
	Если Не Элемент.ТекущаяСтрока = Неопределено Тогда 
		ЗаказыУстановитьПараметрыЯчейки(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	СписокЗаказов = ПолучитьСписокЗаказовНаСервере();
	
	ФормаВыбора = ПолучитьФорму("Документ.уатЗаказГрузоотправителя.ФормаВыбора",,Элемент);
	
	ЭлементОтбора                  = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение   = СписокЗаказов;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекДанные = Элементы.Заказы.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекДанные.ЗаказГрузоотправителя) Тогда
		
		СтруктураОтбора = Новый Структура("ЗаказГрузоотправителя, 
		                                  |Номенклатура, 
		                                  |ЕдиницаИзмеренияПоЗаказу,
		                                  |ЕдиницаИзмерения,
		                                  |Количество");
		
		СтруктураОтбора.ЗаказГрузоотправителя    = ТекДанные.ЗаказГрузоотправителя;
		СтруктураОтбора.Номенклатура             = ТекДанные.Номенклатура;
		СтруктураОтбора.ЕдиницаИзмеренияПоЗаказу = ТекДанные.ЕдиницаИзмеренияПоЗаказу;
		СтруктураОтбора.ЕдиницаИзмерения         = ТекДанные.ЕдиницаИзмерения;
		СтруктураОтбора.Количество               = ТекДанные.Количество;
		
		НайдСтроки = Объект.Заказы.НайтиСтроки(СтруктураОтбора);
		
		Если НайдСтроки.Количество() Тогда
			мТипТочки = НайдСтроки[0].ТипТочкиМаршрута;
			Объект.Заказы.Удалить(НайдСтроки[0]);
			Для СчИ = 1 По НайдСтроки.Количество() - 1 Цикл
				Если Не НайдСтроки[СчИ].ТипТочкиМаршрута = мТипТочки Тогда
					Объект.Заказы.Удалить(НайдСтроки[1]);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		Объект.Заказы.Удалить(ТекДанные);
	КонецЕсли;
	
	Если Объект.Заказы.Количество() Тогда
		ПоследняяСтрока            = Объект.Заказы[Объект.Заказы.Количество() - 1];
		ПоследняяСтрока.Время      = 0;
		ПоследняяСтрока.Расстояние = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекДанные = Элементы.Заказы.ТекущиеДанные;
	Если Не НоваяСтрока И ЗначениеЗаполнено(ТекДанные.ЗаказГрузоотправителя) Тогда
		мБуфСтрока.ЕдиницаИзмерения = ТекДанные.ЕдиницаИзмерения;
		мБуфСтрока.Количество       = ТекДанные.Количество;
	КонецЕсли;
	
	ТекВремяСтроки = Неопределено;
	Если Не НоваяСтрока Тогда
		ТекВремяСтроки = Новый Структура;
		ТекВремяСтроки.Вставить("ПрибытиеПлан", ТекДанные.ПрибытиеПлан);
		ТекВремяСтроки.Вставить("УбытиеПлан",   ТекДанные.УбытиеПлан);
		ТекВремяСтроки.Вставить("ПрибытиеФакт", ТекДанные.ПрибытиеФакт);
		ТекВремяСтроки.Вставить("УбытиеФакт",   ТекДанные.УбытиеФакт);
		ТекВремяСтроки.Вставить("Стоянка",      ((ТекДанные.Стоянка - Цел(ТекДанные.Стоянка))*6000 + Цел(ТекДанные.Стоянка)*3600));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
		
		ПолучитьНоменклатуруПоЗаказуВСписке(ВыбранноеЗначение);
		ПараметрыФормы                 = Новый Структура("Заказ, ВыбНоменклатура");
		ПараметрыФормы.Заказ           = ВыбранноеЗначение;
		ПараметрыФормы.ВыбНоменклатура = табВыбраннаяНоменклатура;
		ФормаВыбораГруза = ПолучитьФорму("Документ.уатМаршрутныйЛист.Форма.ФормаВыбораГруза",ПараметрыФормы,Элемент);
		ФормаВыбораГруза.ЗакрыватьПриЗакрытииВладельца = Истина;
		ФормаВыбораГруза.ЗакрыватьПриВыборе            = Истина;
		ФормаВыбораГруза.Открыть();
		                                    
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		
		Попытка 
			буф = ВыбранноеЗначение.Количество;
		Исключение
			Возврат;
		КонецПопытки;
		
		СтруктураАдресовПоЗаказу = ПолучитьАдресаПоЗаказуНаСервере(ВыбранноеЗначение.Заказ);
		
		НовСтрока = Объект.Заказы.Добавить();
		НовСтрока.Пункт                       = СтруктураАдресовПоЗаказу.АдресОтправления;
		НовСтрока.ТипТочкиМаршрута            = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка");
		НовСтрока.ЗаказГрузоотправителя       = ВыбранноеЗначение.Заказ;
		НовСтрока.Номенклатура                = ВыбранноеЗначение.Номенклатура;
		НовСтрока.ЕдиницаИзмерения            = ВыбранноеЗначение.ЕдиницаИзмерения;
		НовСтрока.ЕдиницаИзмеренияПоЗаказу    = ВыбранноеЗначение.ЕдиницаИзмерения;
		НовСтрока.Количество                  = ВыбранноеЗначение.Количество;
		НовСтрока.ВесБрутто                   = ВыбранноеЗначение.Вес;
		НовСтрока.Объем                       = ВыбранноеЗначение.Объем;
		НовСтрока.КоличествоМест              = ВыбранноеЗначение.КоличествоМест;
		НовСтрока.ОкноС                       = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ВыбранноеЗначение.Заказ, "ОтправлениеС");
		НовСтрока.ОкноПо                      = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ВыбранноеЗначение.Заказ, "ОтправлениеПо");
		НовСтрока.Стоянка                     = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ВыбранноеЗначение.Заказ, "СтоянкаПунктОтправления");
		
		НовСтрока = Объект.Заказы.Добавить();
		НовСтрока.Пункт                       = СтруктураАдресовПоЗаказу.АдресНазначения;
		НовСтрока.ТипТочкиМаршрута            = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка");
		НовСтрока.ЗаказГрузоотправителя       = ВыбранноеЗначение.Заказ;
		НовСтрока.Номенклатура                = ВыбранноеЗначение.Номенклатура;
		НовСтрока.ЕдиницаИзмерения            = ВыбранноеЗначение.ЕдиницаИзмерения;
		НовСтрока.ЕдиницаИзмеренияПоЗаказу    = ВыбранноеЗначение.ЕдиницаИзмерения;
		НовСтрока.Количество                  = ВыбранноеЗначение.Количество;
		НовСтрока.ВесБрутто                   = ВыбранноеЗначение.Вес;
		НовСтрока.Объем                       = ВыбранноеЗначение.Объем;
		НовСтрока.КоличествоМест              = ВыбранноеЗначение.КоличествоМест;
		НовСтрока.ОкноС                       = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ВыбранноеЗначение.Заказ, "ДоставкаС");
		НовСтрока.ОкноПо                      = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ВыбранноеЗначение.Заказ, "ДоставкаПо");
		НовСтрока.Стоянка                     = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ВыбранноеЗначение.Заказ, "СтоянкаПунктНазначения");
		
		ИДНовСтроки = НовСтрока.ПолучитьИдентификатор();
		
		Элементы.Заказы.ТекущаяСтрока  = ИДНовСтроки;
		Элементы.Заказы.ТекущийЭлемент = Элементы.Заказы.ПодчиненныеЭлементы.ЗаказыКоличествоМест;
		ПересчитатьПлановоеВремя();
		ЗаказыИзменитьДатыВШапке();
		Элементы.Заказы.ИзменитьСтроку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	//СтандартнаяОбработки = Ложь;
	мЗначение = ПараметрыПеретаскивания.Значение; //массив индексов перетаскиваемых строк
	Если мЗначение = Неопределено Или Строка = Неопределено Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	Если мЗначение.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТЧ = Элементы.Заказы.ДанныеСтроки(мЗначение[0]);
	
	Если ЗначениеЗаполнено(СтрокаТЧ.ЗаказГрузоотправителя) Тогда
		
		СтруктураОтбора = Новый Структура("ЗаказГрузоотправителя, 
										  |ТипТочкиМаршрута, 
										  |Номенклатура,
										  |ЕдиницаИзмеренияПоЗаказу,
										  |ЕдиницаИзмерения,
										  |Количество");
		СтруктураОтбора.ЗаказГрузоотправителя    = СтрокаТЧ.ЗаказГрузоотправителя;
		СтруктураОтбора.ТипТочкиМаршрута         = ?(СтрокаТЧ.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка"),
		                                           ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка"),
		                                           ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка"));
		СтруктураОтбора.Номенклатура             = СтрокаТЧ.Номенклатура;
		СтруктураОтбора.ЕдиницаИзмеренияПоЗаказу = СтрокаТЧ.ЕдиницаИзмеренияПоЗаказу;
		СтруктураОтбора.ЕдиницаИзмерения         = СтрокаТЧ.ЕдиницаИзмерения;
		СтруктураОтбора.Количество               = СтрокаТЧ.Количество;
		
		НайдСтроки = Объект.Заказы.НайтиСтроки(СтруктураОтбора);
		Если Не НайдСтроки.Количество() Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			Возврат;
		КонецЕсли;
		
		СмежИндекс = ?(СтрокаТЧ.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка"),100000000,-1);
		
		Для Каждого ТекСтрока Из НайдСтроки Цикл
			Если СтрокаТЧ.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка") Тогда
				СмежИндекс = Мин(СмежИндекс,Объект.Заказы.Индекс(ТекСтрока));
			Иначе
				СмежИндекс = Макс(СмежИндекс,Объект.Заказы.Индекс(ТекСтрока));
			КонецЕсли;
		КонецЦикла;
		
		ТекИндекс      = Объект.Заказы.Индекс(СтрокаТЧ);
		дСтрокаПриемника = Элементы.Заказы.ДанныеСтроки(Строка);
		ИндексПриемник = Объект.Заказы.Индекс(дСтрокаПриемника);
		
		Если ТекИндекс > ИндексПриемник И ИндексПриемник <= СмежИндекс И СтрокаТЧ.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка") Тогда //тянем вверх
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		ИначеЕсли ТекИндекс < ИндексПриемник И ИндексПриемник >= СмежИндекс И СтрокаТЧ.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка") Тогда //тянем вниз
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыВыполненПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Заказы.ТекущиеДанные;
	
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекСтрока.ПрибытиеФакт) И ТекСтрока.Выполнен Тогда 
		ТекСтрока.ПрибытиеФакт = НачалоМинуты(ТекущаяДата());
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТекСтрока.УбытиеФакт) И ТекСтрока.Выполнен Тогда 
		ТекСтрока.УбытиеФакт = НачалоМинуты(ТекущаяДата());
	КонецЕсли;
	
	ЗаказыИзменитьДатыВШапке();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекДанные = Элементы.Заказы.ТекущиеДанные;
	СтруктураПоиска = Новый Структура("ЗаказГрузоотправителя, Номенклатура, ЕдиницаИзмерения, ЕдиницаИзмеренияПоЗаказу, Количество",
	                  ТекДанные.ЗаказГрузоотправителя, ТекДанные.Номенклатура,
	                  мБуфСтрока.ЕдиницаИзмерения,     ТекДанные.ЕдиницаИзмеренияПоЗаказу,
	                  ТекДанные.Количество);
	  
	НайдСтроки = Объект.Заказы.НайтиСтроки(СтруктураПоиска);
	Если НайдСтроки.Количество() = 0 Тогда
		ТекДанные.ЕдиницаИзмерения = мБуфСтрока.ЕдиницаИзмерения;
		
	Иначе
		Для Каждого ТекЭлем Из НайдСтроки Цикл
			Если ТекЭлем.ТипТочкиМаршрута <> ТекДанные.ТипТочкиМаршрута Тогда
				ТекЭлем.ЕдиницаИзмерения = ТекДанные.ЕдиницаИзмерения;
				ОбновитьГрузовыеПараметрыЗаказов(ТекЭлем);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновитьГрузовыеПараметрыЗаказов(ТекДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыКоличествоПриИзменении(Элемент)
	
	ТекДанные = Элементы.Заказы.ТекущиеДанные;
	СтруктураПоиска = Новый Структура("ЗаказГрузоотправителя, Номенклатура, ЕдиницаИзмерения, ЕдиницаИзмеренияПоЗаказу, Количество",
	                  ТекДанные.ЗаказГрузоотправителя, ТекДанные.Номенклатура,
	                  ТекДанные.ЕдиницаИзмерения,      ТекДанные.ЕдиницаИзмеренияПоЗаказу,
	                  мБуфСтрока.Количество);
	  
	НайдСтроки = Объект.Заказы.НайтиСтроки(СтруктураПоиска);
	Если НайдСтроки.Количество() = 0 Тогда
		ТекДанные.Количество = мБуфСтрока.Количество;
	Иначе
		Для Каждого ТекЭлем Из НайдСтроки Цикл
			Если ТекЭлем.ТипТочкиМаршрута <> ТекДанные.ТипТочкиМаршрута Тогда
				ТекЭлем.Количество = ТекДанные.Количество;
				ОбновитьГрузовыеПараметрыЗаказов(ТекЭлем);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьГрузовыеПараметрыЗаказов(ТекДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыСтоянкаПриИзменении(Элемент)
	
	ПересчитатьВремяВСтроке(Элементы.Заказы.ТекущиеДанные, "Стоянка");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПрибытиеПланПриИзменении(Элемент)
	
	ПересчитатьВремяВСтроке(Элементы.Заказы.ТекущиеДанные, "ПрибытиеПлан");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПрибытиеПланВремяПриИзменении(Элемент)
	//стандартно очистка времени вызывает также очистку всей даты, поэтому здесь обходим это поведение
	ТекСтрока = Элементы.Заказы.ТекущиеДанные;
	Если ТекСтрока.ПрибытиеПлан = '00010101' И ТекВремяСтроки.ПрибытиеПлан <> '00010101' Тогда
		ТекСтрока.ПрибытиеПлан = НачалоДня(ТекВремяСтроки.ПрибытиеПлан);
	КонецЕсли;
	
	ЗаказыПрибытиеПланПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыУбытиеПланПриИзменении(Элемент)
	
	ПересчитатьВремяВСтроке(Элементы.Заказы.ТекущиеДанные, "УбытиеПлан");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыУбытиеПланВремяПриИзменении(Элемент)
	//стандартно очистка времени вызывает также очистку всей даты, поэтому здесь обходим это поведение
	ТекСтрока = Элементы.Заказы.ТекущиеДанные;
	Если ТекСтрока.УбытиеПлан = '00010101' И ТекВремяСтроки.УбытиеПлан <> '00010101' Тогда
		ТекСтрока.УбытиеПлан = НачалоДня(ТекВремяСтроки.УбытиеПлан);
	КонецЕсли;
	
	ЗаказыУбытиеПланПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыВесБруттоПриИзменении(Элемент)
	
	ТекДанные = Элементы.Заказы.ТекущиеДанные;
	СтруктураПоиска = Новый Структура("ЗаказГрузоотправителя, Номенклатура, ЕдиницаИзмерения, ЕдиницаИзмеренияПоЗаказу, Количество",
	                  ТекДанные.ЗаказГрузоотправителя, ТекДанные.Номенклатура,
	                  ТекДанные.ЕдиницаИзмерения, ТекДанные.ЕдиницаИзмеренияПоЗаказу,
	                  ТекДанные.Количество);
	  
	НайдСтроки = Объект.Заказы.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого ТекЭлем Из НайдСтроки Цикл
		Если Не ТекЭлем.ТипТочкиМаршрута = ТекДанные.ТипТочкиМаршрута Тогда
			ТекЭлем.ВесБрутто = ТекДанные.ВесБрутто;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыОбъемПриИзменении(Элемент)
	
	ТекДанные = Элементы.Заказы.ТекущиеДанные;
	СтруктураПоиска = Новый Структура("ЗаказГрузоотправителя, Номенклатура, ЕдиницаИзмерения, ЕдиницаИзмеренияПоЗаказу, Количество",
	                  ТекДанные.ЗаказГрузоотправителя, ТекДанные.Номенклатура,
	                  ТекДанные.ЕдиницаИзмерения, ТекДанные.ЕдиницаИзмеренияПоЗаказу,
	                  ТекДанные.Количество);
	  
	НайдСтроки = Объект.Заказы.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого ТекЭлем Из НайдСтроки Цикл
		Если Не ТекЭлем.ТипТочкиМаршрута = ТекДанные.ТипТочкиМаршрута Тогда
			ТекЭлем.Объем = ТекДанные.Объем;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыКоличествоМестПриИзменении(Элемент)
	
	ТекДанные = Элементы.Заказы.ТекущиеДанные;
	СтруктураПоиска = Новый Структура("ЗаказГрузоотправителя, Номенклатура, ЕдиницаИзмерения, ЕдиницаИзмеренияПоЗаказу, Количество",
	                  ТекДанные.ЗаказГрузоотправителя, ТекДанные.Номенклатура,
	                  ТекДанные.ЕдиницаИзмерения, ТекДанные.ЕдиницаИзмеренияПоЗаказу,
	                  ТекДанные.Количество);
	  
	НайдСтроки = Объект.Заказы.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого ТекЭлем Из НайдСтроки Цикл
		Если Не ТекЭлем.ТипТочкиМаршрута = ТекДанные.ТипТочкиМаршрута Тогда
			ТекЭлем.КоличествоМест = ТекДанные.КоличествоМест;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораГруза(Элемент,Элементы.Заказы.ТекущиеДанные.Номенклатура,Элемент,СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Заказы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);

	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Количество) тогда
		СтрокаТабличнойЧасти.Количество = 1;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаказы1

&НаКлиенте
Процедура Заказы1ПриИзменении(Элемент)
	
	УстановитьДанныеСтрокОдногоПункта(Элементы.Заказы1.ТекущиеДанные);
	
	ПересчитатьПлановоеВремя();
	
	ЗаказыИзменитьДатыВШапке();
	
КонецПроцедуры

&НаКлиенте
Процедура Заказы1УстановитьПараметрыЯчейки(Элемент)
	
	Если Объект.Заказы.Индекс(Элемент.ТекущиеДанные) = Объект.Заказы.Количество()-1 Тогда
		Если Элемент.ТекущийЭлемент.Имя = "Заказы1Расстояние" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "Заказы1Время" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
	Иначе 
		Если Элемент.ТекущийЭлемент.Имя = "Заказы1Расстояние" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "Заказы1Время" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Заказы1ПриАктивизацииЯчейки(Элемент)
	
	Если Не Элемент.ТекущаяСтрока = Неопределено Тогда 
		Заказы1УстановитьПараметрыЯчейки(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Заказы1ПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элементы.Заказы1.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если Объект.Заказы.Количество() Тогда
		ПоследняяСтрока = Объект.Заказы[Объект.Заказы.Количество() - 1];
		ПоследняяСтрока.Время      = 0;
		ПоследняяСтрока.Расстояние = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Заказы1ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекДанные = Элементы.Заказы1.ТекущиеДанные;
	
	Если НоваяСтрока И Не Копирование Тогда
		ТекДанные.Пункт = "";
		ТекДанные.ЕдиницаИзмерения = ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка");
		ТекДанные.ЕдиницаИзмеренияПоЗаказу = ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка");
	КонецЕсли;
	
	ТекВремяСтроки = Новый Структура;
	ТекВремяСтроки.Вставить("ПрибытиеПлан", ТекДанные.ПрибытиеПлан);
	ТекВремяСтроки.Вставить("УбытиеПлан",   ТекДанные.УбытиеПлан);
	ТекВремяСтроки.Вставить("ПрибытиеФакт", ТекДанные.ПрибытиеФакт);
	ТекВремяСтроки.Вставить("УбытиеФакт",   ТекДанные.УбытиеФакт);
	ТекВремяСтроки.Вставить("Стоянка",      ((ТекДанные.Стоянка - Цел(ТекДанные.Стоянка))*6000 + Цел(ТекДанные.Стоянка)*3600));
	
КонецПроцедуры

&НаКлиенте
Процедура Заказы1ВыполненПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Заказы1.ТекущиеДанные;
	
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекСтрока.ПрибытиеФакт) И ТекСтрока.Выполнен Тогда 
		ТекСтрока.ПрибытиеФакт = НачалоМинуты(ТекущаяДата());
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТекСтрока.УбытиеФакт) И ТекСтрока.Выполнен Тогда 
		ТекСтрока.УбытиеФакт = НачалоМинуты(ТекущаяДата());
	КонецЕсли;
	
	ЗаказыИзменитьДатыВШапке();
	
КонецПроцедуры

&НаКлиенте
Процедура Заказы1НоменклатураПриИзменении(Элемент)
	
	ИндСтроки = Объект.Заказы.Индекс(Элементы.Заказы1.ТекущиеДанные);
	УстановитьЕдиницыИзмеренияПоНоменклатуре(ИндСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура Заказы1ЕдиницаИзмеренияПриИзменении(Элемент)
	
	ИндТекДанных = Объект.Заказы.Индекс(Элементы.Заказы1.ТекущиеДанные);
	ТекДанные = Объект.Заказы.Получить(ИндТекДанных);
	ТекДанные.ЕдиницаИзмеренияПоЗаказу = ТекДанные.ЕдиницаИзмерения;
	
КонецПроцедуры

&НаКлиенте
Процедура Заказы1СтоянкаПриИзменении(Элемент)
	
	ПересчитатьВремяВСтроке(Элементы.Заказы1.ТекущиеДанные, "Стоянка");
	
КонецПроцедуры

&НаКлиенте
Процедура Заказы1ПрибытиеПланПриИзменении(Элемент)
	
	ПересчитатьВремяВСтроке(Элементы.Заказы1.ТекущиеДанные, "ПрибытиеПлан");
	
КонецПроцедуры

&НаКлиенте
Процедура Заказы1ПрибытиеПланВремяПриИзменении(Элемент)
	//стандартно очистка времени вызывает также очистку всей даты, поэтому здесь обходим это поведение
	ТекСтрока = Элементы.Заказы1.ТекущиеДанные;
	Если ТекСтрока.ПрибытиеПлан = '00010101' И ТекВремяСтроки.ПрибытиеПлан <> '00010101' Тогда
		ТекСтрока.ПрибытиеПлан = НачалоДня(ТекВремяСтроки.ПрибытиеПлан);
	КонецЕсли;
	
	Заказы1ПрибытиеПланПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура Заказы1УбытиеПланПриИзменении(Элемент)
	
	ПересчитатьВремяВСтроке(Элементы.Заказы1.ТекущиеДанные, "УбытиеПлан");
	
КонецПроцедуры

&НаКлиенте
Процедура Заказы1УбытиеПланВремяПриИзменении(Элемент)
	//стандартно очистка времени вызывает также очистку всей даты, поэтому здесь обходим это поведение
	ТекСтрока = Элементы.Заказы1.ТекущиеДанные;
	Если ТекСтрока.УбытиеПлан = '00010101' И ТекВремяСтроки.УбытиеПлан <> '00010101' Тогда
		ТекСтрока.УбытиеПлан = НачалоДня(ТекВремяСтроки.УбытиеПлан);
	КонецЕсли;
	
	Заказы1УбытиеПланПриИзменении(Неопределено);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// УправлениеПредприятием.СлужебныеПодсистемы
&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
КонецПроцедуры
// Конец УправлениеПредприятием.СлужебныеПодсистемы

&НаКлиенте
Процедура СписокУстановитьВсе(Команда)
	
	Для Каждого ТекСтрока Из Объект.Заказы Цикл 
		ТекСтрока.Выполнен     = Истина;
		ТекСтрока.ПрибытиеФакт = НачалоМинуты(ТекущаяДата());
		ТекСтрока.УбытиеФакт   = НачалоМинуты(ТекущаяДата());
	КонецЦикла;
	
	Объект.Выполнен = Истина;
	Отправлен       = Истина;
	
	Объект.ДатаИВремяОтправления = НачалоМинуты(ТекущаяДата());
	Объект.ДатаИВремяВыполнения  = ТекущаяДата();
	
	УстановитьВидимостьИДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСнятьВсе(Команда)
	
	Для Каждого ТекСтрока Из Объект.Заказы Цикл 
		ТекСтрока.Выполнен     = Ложь;
		ТекСтрока.ПрибытиеФакт = '00010101';
		ТекСтрока.УбытиеФакт   = '00010101';
	КонецЦикла;
	
	Объект.Выполнен = Ложь;
	Отправлен       = Ложь;
	
	Объект.ДатаИВремяОтправления = '00010101';
	Объект.ДатаИВремяВыполнения  = '00010101';
	
	УстановитьВидимостьИДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруз(Команда)
	
	Отказ       = Ложь;
	Копирование = Ложь;
	Родитель    = Неопределено;
	Группа      = Ложь;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда
		Элемент  = Элементы.ЗаказыДерево;
		Родитель = Элементы.ЗаказыДерево.ТекущийРодитель;
		ЗаказыДеревоПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа);
		ЗаказыДеревоИзменитьДатыВШапке();
	Иначе
		Элемент = Элементы.Заказы;
		ЗаказыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа);
		ПересчитатьПлановоеВремя();
		ЗаказыИзменитьДатыВШапке();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПункт(Команда)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда
		НовСтрокаДерево = ЗаказыДерево.ПолучитьЭлементы().Добавить();
		НовСтрокаДерево.ПунктЗаказНоменклатура = ПредопределенноеЗначение("Справочник.уатПунктыНазначения.ПустаяСсылка");
		Элементы.ЗаказыДерево.ТекущаяСтрока  = НовСтрокаДерево.ПолучитьИдентификатор();
		Элементы.ЗаказыДерево.ТекущийЭлемент = Элементы.ЗаказыДеревоПунктЗаказНоменклатура;
		Элементы.ЗаказыДерево.ИзменитьСтроку();
		ЗаказыДеревоИзменитьДатыВШапке();
	Иначе
		НовСтрока = Объект.Заказы.Добавить();
		НовСтрока.Пункт               = ПредопределенноеЗначение("Справочник.уатПунктыНазначения.ПустаяСсылка");
		НовСтрока.ТипТочкиМаршрута    = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ПромежуточныйПункт");
		Элементы.Заказы.ТекущаяСтрока = НовСтрока.ПолучитьИдентификатор();
		Элементы.Заказы.ИзменитьСтроку();
		ПересчитатьПлановоеВремя();
		ЗаказыИзменитьДатыВШапке();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеУдалить(Команда)
	
	Отказ = Истина;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда
		ЗаказыДеревоПередУдалением(Элементы.ЗаказыДерево, Отказ);
		ЗаказыДеревоИзменитьДатыВШапке();
	Иначе
		ЗаказыПередУдалением(Элементы.Заказы, Отказ);
		ПересчитатьПлановоеВремя();
		ЗаказыИзменитьДатыВШапке();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимДерево(Команда)
	
	мМодифицированность = Модифицированность;
	ОбновитьДеревоЗаказов();
	РежимОтображенияДерево = Истина;
	УстановитьВидимостьИДоступностьЭлементовФормы();
	Модифицированность = мМодифицированность;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимСписок(Команда)
	
	мМодифицированность = Модифицированность;
	ЗаписатьДеревоЗаказов();
	РежимОтображенияДерево = Ложь;
	ПересчитатьПлановоеВремя();
	УстановитьВидимостьИДоступностьЭлементовФормы();
	Модифицированность = мМодифицированность;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаказыПоЗаказуНаТС(Команда)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда
		
		Если ЗаказыДерево.ПолучитьЭлементы().Количество() > 0 Тогда
			Ответ = Неопределено;

			ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗаказыПоЗаказуНаТСЗавершение", ЭтотОбъект), "Очистить табличную часть перед заполнением?",
			               РежимДиалогаВопрос.ДаНет,
			               ,
			               КодВозвратаДиалога.Нет,
			               "Очистка таблицы");
            Возврат;
		КонецЕсли;
		
		ЗаполнитьЗаказыПоЗаказуНаТСФрагмент();

		
	Иначе 
		Если Объект.Заказы.Количество() > 0 Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗаказыПоЗаказуНаТСЗавершениеСписок", ЭтотОбъект), "Очистить табличную часть перед заполнением?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет,"Очистка таблицы");
            Возврат;
		КонецЕсли;
		
		ЗаполнитьЗаказыПоЗаказуНаТСФрагмент1();

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаказыПоЗаказуНаТСЗавершениеСписок(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Объект.Заказы.Очистить();
    КонецЕсли;
    
    ЗаполнитьЗаказыПоЗаказуНаТСФрагмент1();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаказыПоЗаказуНаТСФрагмент1()
    
    Перем ОповещениеОЗакрытии, Форма, ЭлементОтбора;
    
    Форма = ПолучитьФорму("Документ.уатЗаказГрузоотправителя.ФормаВыбора",,ЭтаФорма);
    
    ЭлементОтбора                  = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Ссылка");
    ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.ВСписке;
    ЭлементОтбора.ПравоеЗначение   = ПолучитьСписокЗаказовНаСервере();
    ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
    ЭлементОтбора.Использование    = Истина;
    
    ОповещениеОЗакрытии               = Новый ОписаниеОповещения("ОбновитьСодержимоеТЧСПискаПослеЗаполнения", ЭтотОбъект);
    Форма.ОписаниеОповещенияОЗакрытии = ОповещениеОЗакрытии;
    
    Форма.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаказыПоЗаказуНаТСЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        ЗаказыДерево.ПолучитьЭлементы().Очистить();
    КонецЕсли;
    
    ЗаполнитьЗаказыПоЗаказуНаТСФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаказыПоЗаказуНаТСФрагмент()
    
    Перем Форма, ЭлементОтбора;
    
    Форма = ПолучитьФорму("Документ.уатЗаказГрузоотправителя.ФормаВыбора",,ЭтаФорма);
    
    ЭлементОтбора                  = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Ссылка");
    ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.ВСписке;
    ЭлементОтбора.ПравоеЗначение   = ПолучитьСписокЗаказовНаСервере();
    ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
    ЭлементОтбора.Использование    = Истина;
    
    Форма.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаказыПоОстаткам(Команда)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда
		Если ЗаказыДерево.ПолучитьЭлементы().Количество() > 0 Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗаказыДеревоПоОстаткамЗавершение", ЭтотОбъект),
				"Очистить табличную часть перед заполнением?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет, "Очистка таблицы");
		Иначе
			ЗаполнитьЗаказыДеревоПоОстаткамНаСервере();
			ОбновитьТипыЗначенийСтрокДереваЗаказов();
			ЗаказыДеревоИзменитьДатыВШапке();
		КонецЕсли;
		
	Иначе 
		Если Объект.Заказы.Количество() > 0 Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗаказыТаблицаПоОстаткамЗавершение", ЭтотОбъект),
				"Очистить табличную часть перед заполнением?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет,"Очистка таблицы");
		Иначе
			ЗаполнитьЗаказыПоОстаткамНаСервере();
			ПересчитатьПлановоеВремя();
			ЗаказыУстановитьСодержимоеЯчеек();
			ЗаказыИзменитьДатыВШапке();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаказыДеревоПоОстаткамЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаказыДерево.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	
	ЗаполнитьЗаказыДеревоПоОстаткамНаСервере();
	ОбновитьТипыЗначенийСтрокДереваЗаказов();
	ЗаказыДеревоИзменитьДатыВШапке();

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаказыТаблицаПоОстаткамЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Заказы.Очистить();
	КонецЕсли;
	
	ЗаполнитьЗаказыПоОстаткамНаСервере();
	ПересчитатьПлановоеВремя();
	ЗаказыУстановитьСодержимоеЯчеек();
	ЗаказыИзменитьДатыВШапке();
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура РасстоянияТЧЗаказы(Команда)
	
	мсвПункты = Новый Массив;
	флРежимДерево = (РежимОтображенияДерево И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя"));
	
	Если флРежимДерево Тогда
		КоличСтрок = ЗаказыДерево.ПолучитьЭлементы().Количество();
		Для Сч = 0 По КоличСтрок - 2 Цикл
			ТекСтрока = ЗаказыДерево.ПолучитьЭлементы().Получить(Сч);
			СледСтрока = ЗаказыДерево.ПолучитьЭлементы().Получить(Сч+1);
			Если ЗначениеЗаполнено(ТекСтрока.ПунктЗаказНоменклатура) И ЗначениеЗаполнено(СледСтрока.ПунктЗаказНоменклатура) Тогда
				мсвПункты.Добавить(Новый Структура("Пункт1, Пункт2", ТекСтрока.ПунктЗаказНоменклатура, СледСтрока.ПунктЗаказНоменклатура));
			КонецЕсли;
		КонецЦикла;
	Иначе 
		КоличСтрок = Объект.Заказы.Количество();
		Для Сч = 0 По КоличСтрок - 2 Цикл
			ТекСтрока = Объект.Заказы[Сч];
			СледСтрока = Объект.Заказы[Сч+1];
			Если ЗначениеЗаполнено(ТекСтрока.Пункт) И ЗначениеЗаполнено(СледСтрока.Пункт) Тогда
				мсвПункты.Добавить(Новый Структура("Пункт1, Пункт2", ТекСтрока.Пункт, СледСтрока.Пункт));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	уатЗащищенныеФункцииСервер.РассчитатьТаблицуРасстояниеВремяМеждуПунктами(мсвПункты);
	
	Если флРежимДерево Тогда
		КоличСтрок = ЗаказыДерево.ПолучитьЭлементы().Количество();
		Для Сч = 0 По КоличСтрок - 2 Цикл
			ТекСтрока = ЗаказыДерево.ПолучитьЭлементы().Получить(Сч);
			СледСтрока = ЗаказыДерево.ПолучитьЭлементы().Получить(Сч+1);
			Если ЗначениеЗаполнено(ТекСтрока.ПунктЗаказНоменклатура) И ЗначениеЗаполнено(СледСтрока.ПунктЗаказНоменклатура) Тогда
				Для Каждого ТекПункт Из мсвПункты Цикл
					Если ТекПункт.Пункт1 = ТекСтрока.ПунктЗаказНоменклатура
						И ТекПункт.Пункт2 = СледСтрока.ПунктЗаказНоменклатура Тогда
						ТекСтрока.Расстояние = ТекПункт.Расстояние;
						ТекСтрока.Время = ТекПункт.Время;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		ОбновитьМаршрутныеПараметрыДереваЗаказов();
		РассчитатьМаршрутныеПоказатели();
	Иначе 
		КоличСтрок = Объект.Заказы.Количество();
		Для Сч = 0 По КоличСтрок - 2 Цикл
			ТекСтрока = Объект.Заказы[Сч];
			СледСтрока = Объект.Заказы[Сч+1];
			Если ЗначениеЗаполнено(ТекСтрока.Пункт) И ЗначениеЗаполнено(СледСтрока.Пункт) Тогда
				Для Каждого ТекПункт Из мсвПункты Цикл
					Если ТекПункт.Пункт1 = ТекСтрока.Пункт
						И ТекПункт.Пункт2 = СледСтрока.Пункт Тогда
						ТекСтрока.Расстояние = ТекПункт.Расстояние;
						ТекСтрока.Время = ТекПункт.Время;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		РассчитатьМаршрутныеПоказатели();
	КонецЕсли;
	
	ОбновитьНадписьИтоги();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТЧЗаказы(Команда)
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда
		Если ЗаказыДерево.ПолучитьЭлементы().Количество() > 0 Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьДеревоЗаказыЗавершение", ЭтотОбъект),
				"Вы действительно хотите очистить табличную часть?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет, "Очистка таблицы");
		Иначе
			ОбновитьГрузовыеПараметрыДереваЗаказов();
			ОбновитьМаршрутныеПараметрыДереваЗаказов();
			ЗаказыДеревоИзменитьДатыВШапке();
		КонецЕсли;
		
	Иначе 
		Если Объект.Заказы.Количество() > 0 Тогда 
			ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьТЧЗаказыЗавершение", ЭтотОбъект),
				"Вы действительно хотите очистить табличную часть?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет, "Очистка таблицы");
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДеревоЗаказыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаказыДерево.ПолучитьЭлементы().Очистить();
	КонецЕсли;

	ОбновитьГрузовыеПараметрыДереваЗаказов();
	ОбновитьМаршрутныеПараметрыДереваЗаказов();
	ЗаказыДеревоИзменитьДатыВШапке();
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТЧЗаказыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        Объект.Заказы.Очистить();
        ЗаказыИзменитьДатыВШапке();
    КонецЕсли;
    
    Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПоказатели(Команда)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда 
		ЗаписатьДеревоЗаказов();
	КонецЕсли;
	
	РассчитатьМаршрутныеПоказатели();
	
	мВес     = 0; 
	мОбъем   = 0; 
	мКолМест = 0;
	
	Для Каждого ТекСтрока Из Объект.Заказы Цикл
		Если ТекСтрока.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка") Тогда
			мВес     = мВес     + ТекСтрока.ВесБрутто;
			мОбъем   = мОбъем   + ТекСтрока.Объем;
			мКолМест = мКолМест + ТекСтрока.КоличествоМест;
		КонецЕсли;
	КонецЦикла;
	
	Объект.ВесБрутто      = мВес; 
	Объект.Объем          = мОбъем; 
	Объект.КоличествоМест = мКолМест;
	
	ОбновитьНадписьИтоги();
	
КонецПроцедуры

// Процедура изменения вида операции документа
//
// Параметры:
//  Команда	 - Имя команды
&НаКлиенте
Процедура ОперацияПоЗаказуГрузоотправителя(Команда)
	
	Если Элементы.ФормаОперацияПоЗаказуГрузоотправителя.Пометка Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура("ВидОперации","ПоЗаказуГрузоотправителя");
	
	Если Объект.Заказы.Количество() Тогда 
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОперация", ЭтаФорма, ПараметрыОповещения);
		ПоказатьВопрос(Оповещение, "Табличная часть ""Заказы"" будет очищена. Продолжить выполнение операции?", Режим, 0);
	Иначе 
		ПослеЗакрытияВопросаОперация(КодВозвратаДиалога.Да, ПараметрыОповещения);
	КонецЕсли;
	
КонецПроцедуры // ОперацияПоЗаказуГрузоотправителя();

// Процедура изменения вида операции документа
//
// Параметры:
//  Команда	 - Имя команды
&НаКлиенте
Процедура ОперацияПроизвольный(Команда)
	
	Если Элементы.ФормаОперацияПроизвольный.Пометка Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура("ВидОперации","Произвольный");
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда 
		ТекстВопроса = "Дерево заказов будет очищено. Продолжить выполнение операции?";
		ЗадатьВопрос = Не ЗаказыДерево.ПолучитьЭлементы().Количество()=0;
		
	Иначе 
		ТекстВопроса = "Табличная часть ""Заказы"" будет очищена. Продолжить выполнение операции?";
		ЗадатьВопрос = Не Объект.Заказы.Количество()=0;
	КонецЕсли;
	
	Если ЗадатьВопрос Тогда 
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОперация", ЭтаФорма, ПараметрыОповещения);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	Иначе 
		ПослеЗакрытияВопросаОперация(КодВозвратаДиалога.Да, ПараметрыОповещения);
	КонецЕсли;
	
КонецПроцедуры // ОперацияПроизвольный() 

// Процедура - обработчик  оповещения ответа на вопрос об изменении вида операции документа
//
// Параметры:
//  Результат	 -  результат выбора пользователя
//  Параметры	 -  значение дополнительных параметров
&НаКлиенте
Процедура ПослеЗакрытияВопросаОперация(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаказыДерево.ПолучитьЭлементы().Очистить();
	Объект.Заказы.Очистить();
	
	ВидОперации = "";
	Параметры.Свойство("ВидОперации", ВидОперации);
	Если ВидОперации = "ПоЗаказуГрузоотправителя" Тогда
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя");
		ОбновитьДеревоЗаказов();
	Иначе
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.Произвольный");
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда 
		ЗаказыДеревоИзменитьДатыВШапке();
	Иначе 
		ЗаказыИзменитьДатыВШапке();
	КонецЕсли;
	
	УстановитьВидимостьИДоступностьЭлементовФормы();
	
КонецПроцедуры // ПослеЗакрытияВопросаОперация()

&НаКлиенте
Процедура ДеревоОтметитьВсе(Команда)
	Для каждого ТекСтрокаПункт ИЗ ЗаказыДерево.ПолучитьЭлементы() Цикл
		ТекСтрокаПункт.Выполнен = Истина;
		Если НЕ ЗначениеЗаполнено(ТекСтрокаПункт.ПрибытиеФакт) тогда
			ТекСтрокаПункт.ПрибытиеФакт = НачалоМинуты(ТекущаяДата());
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекСтрокаПункт.УбытиеФакт) тогда
			ТекСтрокаПункт.УбытиеФакт = КонецМинуты(ТекущаяДата());
		КонецЕсли;
		
		Для Каждого ТекСтрокаЗаказ ИЗ ТекСтрокаПункт.ПолучитьЭлементы() Цикл
			ТекСтрокаЗаказ.Выполнен = Истина;
			
			Для Каждого ТекСтрокаНоменклатура ИЗ ТекСтрокаЗаказ.ПолучитьЭлементы() Цикл
				ТекСтрокаНоменклатура.Выполнен = Истина;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Объект.Выполнен = Истина;
	Отправлен       = Истина;
	
	Объект.ДатаИВремяОтправления = НачалоМинуты(ТекущаяДата());
	Объект.ДатаИВремяВыполнения  = ТекущаяДата();
	
	УстановитьВидимостьИДоступностьЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСнятьВсе(Команда)
	Для каждого ТекСтрокаПункт ИЗ ЗаказыДерево.ПолучитьЭлементы() Цикл
		ТекСтрокаПункт.Выполнен = Ложь;
		Если ЗначениеЗаполнено(ТекСтрокаПункт.ПрибытиеФакт) тогда
			ТекСтрокаПункт.ПрибытиеФакт = '00010101';
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрокаПункт.УбытиеФакт) тогда
			ТекСтрокаПункт.УбытиеФакт = '00010101';
		КонецЕсли;
		
		Для Каждого ТекСтрокаЗаказ ИЗ ТекСтрокаПункт.ПолучитьЭлементы() Цикл
			ТекСтрокаЗаказ.Выполнен = Ложь;
			
			Для Каждого ТекСтрокаНоменклатура ИЗ ТекСтрокаЗаказ.ПолучитьЭлементы() Цикл
				ТекСтрокаНоменклатура.Выполнен = Ложь;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Объект.Выполнен = Ложь;
	Отправлен       = Ложь;
	
	Объект.ДатаИВремяОтправления = '00010101';
	Объект.ДатаИВремяВыполнения  = '00010101';
	
	УстановитьВидимостьИДоступностьЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРазвернутьВсе(Команда)
	Для Каждого ТекСтрокаПункт ИЗ ЗаказыДерево.ПолучитьЭлементы() Цикл
		Элементы.ЗаказыДерево.Развернуть(ТекСтрокаПункт.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвернутьВсе(Команда)
	Для Каждого ТекСтрокаПункт ИЗ ЗаказыДерево.ПолучитьЭлементы() Цикл
		Элементы.ЗаказыДерево.Свернуть(ТекСтрокаПункт.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоОткрытьОбъект(Команда)
	
	ТекСтрока = Элементы.ЗаказыДерево.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Элементы.ЗаказыДерево.ТекущийЭлемент.Имя = "ЗаказыДеревоПунктЗаказНоменклатура" Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекСтрока.ПунктЗаказНоменклатура) = Тип("Строка") Тогда 
		Возврат;
	КонецЕсли;
	
	Попытка
		ПоказатьЗначение(, ТекСтрока.ПунктЗаказНоменклатура);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьВсегоПоДокументуНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Расстояние",     Объект.Расстояние);
	ПараметрыФормы.Вставить("ВремяВПути",     Объект.ВремяВПути);
	ПараметрыФормы.Вставить("ВесБрутто",      Объект.ВесБрутто);
	ПараметрыФормы.Вставить("Объем",          Объект.Объем);
	ПараметрыФормы.Вставить("КоличествоМест", Объект.КоличествоМест);
	
	Оповещение = Новый ОписаниеОповещения("НадписьВсегоПоДокументуНажатиеЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.уатРедактированиеМаршрутныхПоказателей", ПараметрыФормы, ЭтаФорма,,,, Оповещение);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// Процедура выполняет установку доступности и видимости реквизитов формы
// в зависимости от текущего режима
//
&НаКлиенте
Процедура УстановитьВидимостьИДоступностьЭлементовФормы()
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") Тогда 
		
		Элементы.ФормаОперацияПоЗаказуГрузоотправителя.Пометка = Истина;
		Элементы.ФормаОперацияПроизвольный.Пометка             = Ложь;
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда 
			Элементы.ЗаказыДеревоГруппаРежим.Заголовок = "Режим: ""Дерево""";
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЗаказыДерево;
		Иначе 
			Элементы.ЗаказыГруппаРежим.Заголовок = "Режим: ""Список""";
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЗаказы;
		КонецЕсли;
		
	Иначе 
		
		Элементы.ФормаОперацияПоЗаказуГрузоотправителя.Пометка = Ложь;
		Элементы.ФормаОперацияПроизвольный.Пометка             = Истина;
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЗаказыПроизвольный;
	КонецЕсли;
	
	флПланФакт = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, "УчетВремениПланФактМаршрутныйЛист");
	Если Элементы.ЗаказыДеревоПрибытиеПлан.Видимость <> флПланФакт Тогда
		Элементы.ЗаказыДеревоПрибытиеПлан.Видимость = флПланФакт;
		Элементы.ЗаказыДеревоПрибытиеПланВремя.Видимость = флПланФакт;
		Элементы.ЗаказыДеревоУбытиеПлан.Видимость = флПланФакт;
		Элементы.ЗаказыДеревоУбытиеПланВремя.Видимость = флПланФакт;
		Элементы.ЗаказыДеревоПрибытиеФакт.Заголовок = ?(флПланФакт, "Прибытие факт", "Прибытие");
		Элементы.ЗаказыДеревоУбытиеФакт.Заголовок = ?(флПланФакт, "Убытие факт", "Убытие");
	КонецЕсли;
	Если Элементы.ЗаказыПрибытиеПлан.Видимость <> флПланФакт Тогда
		Элементы.ЗаказыПрибытиеПлан.Видимость = флПланФакт;
		Элементы.ЗаказыПрибытиеПланВремя.Видимость = флПланФакт;
		Элементы.ЗаказыУбытиеПлан.Видимость = флПланФакт;
		Элементы.ЗаказыУбытиеПланВремя.Видимость = флПланФакт;
		Элементы.ЗаказыПрибытиеФакт.Заголовок = ?(флПланФакт, "Прибытие факт", "Прибытие");
		Элементы.ЗаказыУбытиеФакт.Заголовок = ?(флПланФакт, "Убытие факт", "Убытие");
	КонецЕсли;
	Если Элементы.Заказы1ПрибытиеПлан.Видимость <> флПланФакт Тогда
		Элементы.Заказы1ПрибытиеПлан.Видимость = флПланФакт;
		Элементы.Заказы1ПрибытиеПланВремя.Видимость = флПланФакт;
		Элементы.Заказы1УбытиеПлан.Видимость = флПланФакт;
		Элементы.Заказы1УбытиеПланВремя.Видимость = флПланФакт;
		Элементы.Заказы1ПрибытиеФакт.Заголовок = ?(флПланФакт, "Прибытие факт", "Прибытие");
		Элементы.Заказы1УбытиеФакт.Заголовок = ?(флПланФакт, "Убытие факт", "Убытие");
	КонецЕсли;
	
	Если Отправлен Тогда 
		Элементы.СтраницыОтправленНеОтправлен.ТекущаяСтраница = Элементы.ГруппаОтправлен;
	Иначе 
		Элементы.СтраницыОтправленНеОтправлен.ТекущаяСтраница = Элементы.ГруппаНеОтправлен;
	КонецЕсли;
	Если Объект.Выполнен Тогда 
		Элементы.СтраницыВыполненНеВыполнен.ТекущаяСтраница = Элементы.ГруппаВыполнен;
	Иначе 
		Элементы.СтраницыВыполненНеВыполнен.ТекущаяСтраница = Элементы.ГруппаНеВыполнен;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокЗаказовНаСервере()
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя КАК Ссылка
	|ИЗ
	|	РегистрНакопления.уатЗаказыГрузоотправителей.Остатки(&ДатаКон, ) КАК уатЗаказыГрузоотправителейОстатки";
	Запрос.УстановитьПараметр("ДатаКон",КонецДня(ТекущаяДата()));
	СписокЗаказов = Новый СписокЗначений();
	СписокЗаказов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат СписокЗаказов;
	
КонецФункции

// Получает список номенклатуры по заказу, уже присутствующую в списке маршрутного листа 
// 
// Параметры:
//  Заказ        - Заказ на ТС,из которого будет получена номенклатура
//
&НаСервере
Процедура ПолучитьНоменклатуруПоЗаказуВСписке(Заказ)
	ПараметрОтбора = Новый Структура("ЗаказГрузоотправителя, ТипТочкиМаршрута",Заказ, Перечисления.уатТипыТочекМаршрута.Погрузка);
	НайдСтроки = Объект.Заказы.НайтиСтроки(ПараметрОтбора);
	ТабВыбраннаяНоменклатура.Очистить();
	Если НайдСтроки <> Неопределено Тогда
		Для Каждого ТекСтрока Из НайдСтроки Цикл
			НовСтрока = табВыбраннаяНоменклатура.Добавить();
			НовСтрока.Заказчик              = ТекСтрока.ЗаказГрузоотправителя.Контрагент;
			НовСтрока.ЗаказГрузоотправителя = ТекСтрока.ЗаказГрузоотправителя;
			НовСтрока.Номенклатура          = ТекСтрока.Номенклатура;
			НовСтрока.ЕдиницаИзмерения      = ТекСтрока.ЕдиницаИзмерения;
			НовСтрока.Количество            = ТекСтрока.Количество;
			НовСтрока.ДатаВыполнения        = ТекСтрока.ДатаВыполнения;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Функция выполняет получение таблицы номенклатуры, которая еще не присутствует в 
// маршрутном листе по указанному заказу
//
// Параметры:
//  Заказ        - Заказ из которого производится выбор номенклатуры
//
// Возвращаемое значение:
//  Таблица доступной к выбору номенклатуры
//
&НаСервере
Функция ПолучитьТаблицуДоступнойНоменклатурыПоЗаказу(Заказ)
	
	Если Не ТипЗнч(Заказ) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
		мТаб = Новый ТаблицаЗначений();
		Возврат мТаб;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	мМенеджерВрТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = мМенеджерВрТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	Таб.Заказчик,
	|	Таб.ЗаказГрузоотправителя,
	|	Таб.Номенклатура,
	|	Таб.ЕдиницаИзмерения,
	|	Таб.Количество
	|ПОМЕСТИТЬ 
	|	ВремТаб 
	|ИЗ &ВыбНоменклатура КАК Таб";
	
	Запрос.УстановитьПараметр("ВыбНоменклатура", ДанныеФормыВЗначение(табВыбраннаяНоменклатура, Тип("ТаблицаЗначений")));
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя КАК Заказ,
	|	уатЗаказыГрузоотправителейОстатки.Номенклатура КАК Номенклатура,
	|	уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	(уатЗаказыГрузоотправителейОстатки.КоличествоОстаток - ЕСТЬNULL(ВремТаб.Количество, 0)) КАК Количество,
	|	ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.ВесБрутто, 0) / ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Количество, 1) КАК ВесЕдиницы,
	|	ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Объем, 0) / ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Количество, 1) КАК ОбъемЕдиницы,
	|	ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.КоличествоМест, 0) / ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Количество, 1) КАК КоличествоМестЕдиницы,
	|	ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.ВесБрутто, 0) * (уатЗаказыГрузоотправителейОстатки.КоличествоОстаток - ЕСТЬNULL(ВремТаб.Количество, 0)) / ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Количество, 1) КАК Вес,
	|	ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Объем, 0) * (уатЗаказыГрузоотправителейОстатки.КоличествоОстаток - ЕСТЬNULL(ВремТаб.Количество, 0)) / ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Количество, 1) КАК Объем,
	|	ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.КоличествоМест, 0) * (уатЗаказыГрузоотправителейОстатки.КоличествоОстаток - ЕСТЬNULL(ВремТаб.Количество, 0)) / ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Количество, 1) КАК КоличествоМест
	|ИЗ
	|	РегистрНакопления.уатЗаказыГрузоотправителей.Остатки(&ДатаКон, ЗаказГрузоотправителя = &ВыбЗаказ) КАК уатЗаказыГрузоотправителейОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремТаб КАК ВремТаб
	|		ПО уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя.Контрагент = ВремТаб.Заказчик
	|			И уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя = ВремТаб.ЗаказГрузоотправителя
	|			И уатЗаказыГрузоотправителейОстатки.Номенклатура = ВремТаб.Номенклатура
	|			И уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения = ВремТаб.ЕдиницаИзмерения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяЗаказы
	|		ПО уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя.Контрагент = уатЗаказГрузоотправителяЗаказы.Ссылка.Контрагент
	|			И уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя = уатЗаказГрузоотправителяЗаказы.Ссылка
	|			И уатЗаказыГрузоотправителейОстатки.Номенклатура = уатЗаказГрузоотправителяЗаказы.Номенклатура
	|			И уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения = уатЗаказГрузоотправителяЗаказы.ЕдиницаИзмерения
	|ГДЕ
	|	уатЗаказыГрузоотправителейОстатки.КоличествоОстаток - ЕСТЬNULL(ВремТаб.Количество, 0) > 0";
	
	Запрос.УстановитьПараметр("ВыбЗаказ", Заказ);
	Запрос.УстановитьПараметр("ДатаКон" , КонецДня(ТекущаяДата()));
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЗаказыПоЗаказуНаТСНаСервере(ВыбЗаказНаТС)
	
	ПолучитьНоменклатуруПоЗаказуВСписке(ВыбЗаказНаТС);
	ДоступнаяНоменклатура = ПолучитьТаблицуДоступнойНоменклатурыПоЗаказу(ВыбЗаказНаТС);
	
	СтоянкаПО = ВыбЗаказНаТС.СтоянкаПунктОтправления;
	Для Каждого ТекСтрока Из ДоступнаяНоменклатура Цикл
		НовСтрока = Объект.Заказы.Добавить();
		НовСтрока.ЗаказГрузоотправителя       = ВыбЗаказНаТС;
		НовСтрока.Пункт                       = ВыбЗаказНаТС.АдресОтправления;
		НовСтрока.ТипТочкиМаршрута            = Перечисления.уатТипыТочекМаршрута.Погрузка;
		НовСтрока.Номенклатура                = ТекСтрока.Номенклатура;
		НовСтрока.Количество                  = ТекСтрока.Количество;
		НовСтрока.ЕдиницаИзмерения            = ТекСтрока.ЕдиницаИзмерения;
		НовСтрока.ЕдиницаИзмеренияПоЗаказу    = ТекСтрока.ЕдиницаИзмерения;
		НовСтрока.ВесБрутто                   = ТекСтрока.Вес;
		НовСтрока.Объем                       = ТекСтрока.Объем;
		НовСтрока.КоличествоМест              = ТекСтрока.КоличествоМест;
		НовСтрока.Стоянка                     = СтоянкаПО;
		НовСтрока.ОкноС                       = ВыбЗаказНаТС.ОтправлениеС;
		НовСтрока.ОкноПо                      = ВыбЗаказНаТС.ОтправлениеПо;
		
		СтоянкаПО = 0;
	КонецЦикла;
	
	СтоянкаПД = ВыбЗаказНаТС.СтоянкаПунктНазначения;
	Для Каждого ТекСтрока Из ДоступнаяНоменклатура Цикл
		НовСтрока = Объект.Заказы.Добавить();
		НовСтрока.ЗаказГрузоотправителя       = ВыбЗаказНаТС;
		НовСтрока.Пункт                       = ВыбЗаказНаТС.АдресНазначения;
		НовСтрока.ТипТочкиМаршрута            = Перечисления.уатТипыТочекМаршрута.Разгрузка;
		НовСтрока.Номенклатура                = ТекСтрока.Номенклатура;
		НовСтрока.Количество                  = ТекСтрока.Количество;
		НовСтрока.ЕдиницаИзмерения            = ТекСтрока.ЕдиницаИзмерения;
		НовСтрока.ЕдиницаИзмеренияПоЗаказу    = ТекСтрока.ЕдиницаИзмерения;
		НовСтрока.ВесБрутто                   = ТекСтрока.Вес;
		НовСтрока.Объем                       = ТекСтрока.Объем;
		НовСтрока.КоличествоМест              = ТекСтрока.КоличествоМест;
		НовСтрока.Стоянка                     = СтоянкаПД;
		НовСтрока.ОкноС                       = ВыбЗаказНаТС.ДоставкаС;
		НовСтрока.ОкноПо                      = ВыбЗаказНаТС.ДоставкаПо;
		
		СтоянкаПД = 0;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаказыПоОстаткамНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя КАК Заказ,
	|	уатЗаказыГрузоотправителейОстатки.Номенклатура,
	|	уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения,
	|	уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПоЗаказу,
	|	уатЗаказыГрузоотправителейОстатки.КоличествоОстаток КАК Количество,
	|	уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя.АдресОтправления КАК АдресОтправления,
	|	уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя.АдресНазначения КАК АдресДоставки,
	|	ВЫБОР
	|		КОГДА НЕ уатЗаказГрузоотправителяЗаказы.Количество ЕСТЬ NULL 
	|			ТОГДА уатЗаказГрузоотправителяЗаказы.ВесБрутто / уатЗаказГрузоотправителяЗаказы.Количество * уатЗаказыГрузоотправителейОстатки.КоличествоОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Вес,
	|	ВЫБОР
	|		КОГДА НЕ уатЗаказГрузоотправителяЗаказы.Количество ЕСТЬ NULL 
	|			ТОГДА уатЗаказГрузоотправителяЗаказы.Объем / уатЗаказГрузоотправителяЗаказы.Количество * уатЗаказыГрузоотправителейОстатки.КоличествоОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Объем,
	|	ВЫБОР
	|		КОГДА НЕ уатЗаказГрузоотправителяЗаказы.Количество ЕСТЬ NULL 
	|			ТОГДА уатЗаказГрузоотправителяЗаказы.КоличествоМест / уатЗаказГрузоотправителяЗаказы.Количество * уатЗаказыГрузоотправителейОстатки.КоличествоОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоМест
	|ИЗ
	|	РегистрНакопления.уатЗаказыГрузоотправителей.Остатки(&Дата, ) КАК уатЗаказыГрузоотправителейОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяЗаказы
	|		ПО уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя = уатЗаказГрузоотправителяЗаказы.Ссылка
	|			И уатЗаказыГрузоотправителейОстатки.Контрагент = уатЗаказГрузоотправителяЗаказы.Ссылка.Контрагент
	|			И уатЗаказыГрузоотправителейОстатки.Номенклатура = уатЗаказГрузоотправителяЗаказы.Номенклатура
	|			И уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения = уатЗаказГрузоотправителяЗаказы.ЕдиницаИзмерения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Заказ";
	
	ПарамДата = ?(Объект.Дата = Дата('00010101'), КонецДня(ТекущаяДата()), 
		?(Час(Объект.Дата) = 0 И Минута(Объект.Дата) = 0 И Секунда(Объект.Дата) = 0, КонецДня(Объект.Дата), Объект.Дата));  
	Запрос.УстановитьПараметр("Дата", ПарамДата);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		// Добавляем строку "Отправления"
		НовСтрока                          = Объект.Заказы.Добавить();
		НовСтрока.Пункт                    = Выборка.Заказ.АдресОтправления;
		НовСтрока.ЗаказГрузоотправителя    = Выборка.Заказ;
		НовСтрока.ТипТочкиМаршрута         = Перечисления.уатТипыТочекМаршрута.Погрузка;
		НовСтрока.Стоянка                  = Выборка.Заказ.СтоянкаПунктОтправления;
		НовСтрока.Номенклатура             = Выборка.Номенклатура;
		НовСтрока.ЕдиницаИзмерения         = Выборка.ЕдиницаИзмерения;
		НовСтрока.ЕдиницаИзмеренияПоЗаказу = Выборка.ЕдиницаИзмерения;
		НовСтрока.Количество               = Выборка.Количество;
		НовСтрока.ВесБрутто                = Выборка.Вес;
		НовСтрока.Объем                    = Выборка.Объем;
		НовСтрока.КоличествоМест           = Выборка.КоличествоМест;
		// Добавляем строку "Прибытия"
		НовСтрока                          = Объект.Заказы.Добавить();
		НовСтрока.Пункт                    = Выборка.Заказ.АдресНазначения;
		НовСтрока.ЗаказГрузоотправителя    = Выборка.Заказ;
		НовСтрока.ТипТочкиМаршрута         = Перечисления.уатТипыТочекМаршрута.Разгрузка;
		НовСтрока.Стоянка                  = Выборка.Заказ.СтоянкаПунктОтправления;
		НовСтрока.Номенклатура             = Выборка.Номенклатура;
		НовСтрока.ЕдиницаИзмерения         = Выборка.ЕдиницаИзмерения;
		НовСТрока.ЕдиницаИзмеренияПоЗаказу = Выборка.ЕдиницаИзмерения;
		НовСтрока.Количество               = Выборка.Количество;
		НовСтрока.ВесБрутто                = Выборка.Вес;
		НовСтрока.Объем                    = Выборка.Объем;
		НовСтрока.КоличествоМест           = Выборка.КоличествоМест;
	КонецЦикла;
	
	//Запрос = Новый Запрос;
	//Запрос.Текст =
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя КАК Заказ,
	//|	уатЗаказыГрузоотправителейОстатки.Номенклатура,
	//|	уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения,
	//|	уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПоЗаказу,
	//|	уатЗаказыГрузоотправителейОстатки.КоличествоОстаток КАК Количество,
	//|	уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя.АдресОтправления КАК АдресОтправления,
	//|	ВЫБОР
	//|		КОГДА НЕ уатЗаказГрузоотправителяЗаказы.Количество ЕСТЬ NULL 
	//|			ТОГДА уатЗаказГрузоотправителяЗаказы.ВесБрутто / уатЗаказГрузоотправителяЗаказы.Количество * уатЗаказыГрузоотправителейОстатки.КоличествоОстаток
	//|		ИНАЧЕ 0
	//|	КОНЕЦ КАК Вес,
	//|	ВЫБОР
	//|		КОГДА НЕ уатЗаказГрузоотправителяЗаказы.Количество ЕСТЬ NULL 
	//|			ТОГДА уатЗаказГрузоотправителяЗаказы.Объем / уатЗаказГрузоотправителяЗаказы.Количество * уатЗаказыГрузоотправителейОстатки.КоличествоОстаток
	//|		ИНАЧЕ 0
	//|	КОНЕЦ КАК Объем,
	//|	ВЫБОР
	//|		КОГДА НЕ уатЗаказГрузоотправителяЗаказы.Количество ЕСТЬ NULL 
	//|			ТОГДА уатЗаказГрузоотправителяЗаказы.КоличествоМест / уатЗаказГрузоотправителяЗаказы.Количество * уатЗаказыГрузоотправителейОстатки.КоличествоОстаток
	//|		ИНАЧЕ 0
	//|	КОНЕЦ КАК КоличествоМест
	//|ИЗ
	//|	РегистрНакопления.уатЗаказыГрузоотправителей.Остатки(&Дата, ) КАК уатЗаказыГрузоотправителейОстатки
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяЗаказы
	//|		ПО уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя = уатЗаказГрузоотправителяЗаказы.Ссылка
	//|			И уатЗаказыГрузоотправителейОстатки.Контрагент = уатЗаказГрузоотправителяЗаказы.Ссылка.Контрагент
	//|			И уатЗаказыГрузоотправителейОстатки.Номенклатура = уатЗаказГрузоотправителяЗаказы.Номенклатура
	//|			И уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения = уатЗаказГрузоотправителяЗаказы.ЕдиницаИзмерения
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	АдресОтправления,
	//|	Заказ";
	//
	//
	//ПарамДата = ?(Объект.Дата = Дата('00010101'), КонецДня(ТекущаяДата()), 
	//	?(Час(Объект.Дата) = 0 И Минута(Объект.Дата) = 0 И Секунда(Объект.Дата) = 0, КонецДня(Объект.Дата), Объект.Дата));  
	//Запрос.УстановитьПараметр("Дата", ПарамДата);
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	//Пока Выборка.Следующий() Цикл 
	//	НовСтрока                          = Объект.Заказы.Добавить();
	//	НовСтрока.Пункт                    = Выборка.Заказ.АдресОтправления;
	//	НовСтрока.ЗаказГрузоотправителя    = Выборка.Заказ;
	//	НовСтрока.ТипТочкиМаршрута         = Перечисления.уатТипыТочекМаршрута.Погрузка;
	//	НовСтрока.Стоянка                  = Выборка.Заказ.СтоянкаПунктОтправления;
	//	НовСтрока.Номенклатура             = Выборка.Номенклатура;
	//	НовСтрока.ЕдиницаИзмерения         = Выборка.ЕдиницаИзмерения;
	//	НовСтрока.ЕдиницаИзмеренияПоЗаказу = Выборка.ЕдиницаИзмерения;
	//	НовСтрока.Количество               = Выборка.Количество;
	//	НовСтрока.ВесБрутто                = Выборка.Вес;
	//	НовСтрока.Объем                    = Выборка.Объем;
	//	НовСтрока.КоличествоМест           = Выборка.КоличествоМест;
	//	//ПараметрыМаршрута.Добавить();
	//КонецЦикла;
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст =
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя КАК Заказ,
	//|	уатЗаказыГрузоотправителейОстатки.Номенклатура,
	//|	уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения,
	//|	уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПоЗаказу,
	//|	уатЗаказыГрузоотправителейОстатки.КоличествоОстаток КАК Количество,
	//|	уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя.АдресНазначения КАК АдресДоставки,
	//|	ВЫБОР
	//|		КОГДА НЕ уатЗаказГрузоотправителяЗаказы.Количество ЕСТЬ NULL 
	//|			ТОГДА уатЗаказГрузоотправителяЗаказы.ВесБрутто / уатЗаказГрузоотправителяЗаказы.Количество * уатЗаказыГрузоотправителейОстатки.КоличествоОстаток
	//|		ИНАЧЕ 0
	//|	КОНЕЦ КАК Вес,
	//|	ВЫБОР
	//|		КОГДА НЕ уатЗаказГрузоотправителяЗаказы.Количество ЕСТЬ NULL 
	//|			ТОГДА уатЗаказГрузоотправителяЗаказы.Объем / уатЗаказГрузоотправителяЗаказы.Количество * уатЗаказыГрузоотправителейОстатки.КоличествоОстаток
	//|		ИНАЧЕ 0
	//|	КОНЕЦ КАК Объем,
	//|	ВЫБОР
	//|		КОГДА НЕ уатЗаказГрузоотправителяЗаказы.Количество ЕСТЬ NULL 
	//|			ТОГДА уатЗаказГрузоотправителяЗаказы.КоличествоМест / уатЗаказГрузоотправителяЗаказы.Количество * уатЗаказыГрузоотправителейОстатки.КоличествоОстаток
	//|		ИНАЧЕ 0
	//|	КОНЕЦ КАК КоличествоМест
	//|ИЗ
	//|	РегистрНакопления.уатЗаказыГрузоотправителей.Остатки(&Дата, ) КАК уатЗаказыГрузоотправителейОстатки
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяЗаказы
	//|		ПО уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя = уатЗаказГрузоотправителяЗаказы.Ссылка
	//|			И уатЗаказыГрузоотправителейОстатки.Контрагент = уатЗаказГрузоотправителяЗаказы.Ссылка.Контрагент
	//|			И уатЗаказыГрузоотправителейОстатки.Номенклатура = уатЗаказГрузоотправителяЗаказы.Номенклатура
	//|			И уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения = уатЗаказГрузоотправителяЗаказы.ЕдиницаИзмерения
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	АдресДоставки,
	//|	Заказ";
	//
	//
	//Запрос.УстановитьПараметр("Дата", ПарамДата);
	//Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	//
	//Пока Выборка.Следующий() Цикл 
	//	НовСтрока                          = Объект.Заказы.Добавить();
	//	НовСтрока.Пункт                    = Выборка.Заказ.АдресНазначения;
	//	НовСтрока.ЗаказГрузоотправителя    = Выборка.Заказ;
	//	НовСтрока.ТипТочкиМаршрута         = Перечисления.уатТипыТочекМаршрута.Разгрузка;
	//	НовСтрока.Стоянка                  = Выборка.Заказ.СтоянкаПунктОтправления;
	//	НовСтрока.Номенклатура             = Выборка.Номенклатура;
	//	НовСтрока.ЕдиницаИзмерения         = Выборка.ЕдиницаИзмерения;
	//	НовСТрока.ЕдиницаИзмеренияПоЗаказу = Выборка.ЕдиницаИзмерения;
	//	НовСтрока.Количество               = Выборка.Количество;
	//	НовСтрока.ВесБрутто                = Выборка.Вес;
	//	НовСтрока.Объем                    = Выборка.Объем;
	//	НовСтрока.КоличествоМест           = Выборка.КоличествоМест;
	//	//ПараметрыМаршрута.Добавить();
	//КонецЦикла;
	
КонецПроцедуры

// Функция объединения двух дат  в форматах Число либо Дата
// Время 1 будет увеличено на Время2
// Парам.
// Время1, Время2 - два значения времени, к первому будут добавлено второе 
//
&НаКлиенте
Функция СложитьВремя(Время1,Время2)
	Если ТипЗнч(Время1) = Тип("Число") И ТипЗнч(Время2) = Тип("Число") тогда
		час1 = Цел(Время1);
		час2 = Цел(время2);
		мЧас = Час1 + Час2;
		мин = ((Время1 - час1) + (Время2 - час2)) * 100;
		допЧас = Цел(мин / 60);
		мЧас = мЧас + допЧас;
		мин = (мин - ДопЧас*60) / 100;
		Возврат мЧас + Мин;
	ИначеЕсли ТипЗнч(Время1) = Тип("Дата") И ТипЗнч(Время2) = Тип("Дата") тогда
		Возврат Время1 + Час(Время2) * 60 * 60 + Минута(Время2) * 60 + Секунда(Время2); 	
	Иначе
		Если ТипЗнч(Время1) = Тип("Число") тогда
			мВремя1 = Время2;
			мВремя2 = Время1;
		Иначе
			мВремя1 = Время1;
			мВремя2 = Время2;
		КонецЕсли;
		мВремя = дата('00010101010101');
		МВремя = мВремя1 + Цел(мВремя2) * 60 * 60 + (Время2 - Цел(Время2)) * 100 * 60;
		Если ТипЗнч(Время1) = Тип("Число") тогда
			Возврат Час(мВремя) + Минута(мВремя) / 100;
		Иначе
			Возврат мВремя;
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура РассчитатьМаршрутныеПоказатели()
	
	мВремяВПути   = 0;
	мВремяСтоянок = 0;
	мРасстояние   = 0;
	
	ПредПункт = Неопределено;
	ПредЗаказ = Неопределено;
	Для Каждого ТекСтрока Из Объект.Заказы Цикл
		Если Не ПредПункт = ТекСтрока.Пункт Тогда 
			ПредПункт   = ТекСтрока.Пункт;
			мВремяВПути = уатЗащищенныеФункцииСервер.СложитьВремя(мВремяВПути, ТекСтрока.Время);
			мРасстояние = мРасстояние + ТекСтрока.Расстояние;
			ПредЗаказ   = Неопределено;
		КонецЕсли;
		
		Если Не ПредЗаказ = ТекСтрока.ЗаказГрузоотправителя Тогда 
			ПредЗаказ     = ТекСтрока.ЗаказГрузоотправителя;
			мВремяСтоянок = уатЗащищенныеФункцииСервер.СложитьВремя(мВремяСтоянок, ТекСтрока.Стоянка);
		КонецЕсли;
	КонецЦикла;
	
	Объект.ВремяВПути = уатЗащищенныеФункцииСервер.СложитьВремя(мВремяВПути, мВремяСтоянок);
	Объект.Расстояние = мРасстояние;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("РазностьДат", уатОбщегоНазначенияСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая,
								ДатаПередИзменением));
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервере
Процедура ОбновитьНомерТС()
	НомерТС = уатОбщегоНазначения.уатПредставлениеТС(Объект.ТС, Объект.Организация);
КонецПроцедуры

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Процедура выполняет заполнение реквизитов относящихся к ТС в форме документа
//
&НаСервере
Процедура ИнициализацияДанныхАвтомобиляВФорме()
	
	Если ЗначениеЗаполнено(Объект.ТС) Тогда 
		//заполняем водителей
		СтруктураЭкипаж = уатЗащищенныеФункцииСервер.ЭкипажТС(Объект.ТС);
		//очистим реквизиты
		Объект.Водитель1  = Справочники.Сотрудники.ПустаяСсылка();
		Объект.Водитель2  = Справочники.Сотрудники.ПустаяСсылка();
		Объект.Сотрудник1 = Справочники.Сотрудники.ПустаяСсылка();
		Объект.Сотрудник2 = Справочники.Сотрудники.ПустаяСсылка();
		
		Для Каждого ТекущийЧленЭкипажа Из СтруктураЭкипаж Цикл 
			Если ТекущийЧленЭкипажа.ЧленЭкипажа = Перечисления.уатЧленыЭкипажа.ОсновнойВодитель Тогда 
				Объект.Водитель1 = ТекущийЧленЭкипажа.Значение;
			КонецЕсли;
			Если ТекущийЧленЭкипажа.ЧленЭкипажа = Перечисления.уатЧленыЭкипажа.ОсновноеСопроводительноеЛицо Тогда 
				Объект.Сотрудник1 = ТекущийЧленЭкипажа.Значение;
			КонецЕсли;
			Если ТекущийЧленЭкипажа.ЧленЭкипажа = Перечисления.уатЧленыЭкипажа.ВторойВодитель Тогда 
				Объект.Водитель2 = ТекущийЧленЭкипажа.Значение;
			КонецЕсли;
			Если ТекущийЧленЭкипажа.ЧленЭкипажа = Перечисления.уатЧленыЭкипажа.ВтороеСопроводительноеЛицо Тогда 
				Объект.Сотрудник2 = ТекущийЧленЭкипажа.Значение;
			КонецЕсли;
		КонецЦикла;
	Иначе 
		//очистим реквизиты
		//Объект.Водитель1  = Справочники.Сотрудники.ПустаяСсылка();
		//Объект.Водитель2  = Справочники.Сотрудники.ПустаяСсылка();
		//Объект.Сотрудник1 = Справочники.Сотрудники.ПустаяСсылка();
		//Объект.Сотрудник2 = Справочники.Сотрудники.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресаПоЗаказуНаСервере(Заказ)
	
	Результат = Новый Структура("АдресОтправления, АдресНазначения");
	Если ЗначениеЗаполнено(Заказ) Тогда 
		Результат.АдресОтправления = Заказ.АдресОтправления;
		Результат.АдресНазначения  = Заказ.АдресНазначения;
	Иначе 
		//СправочникСсылка.уатПунктыНазначения
		Результат.АдресОтправления = Справочники.уатПунктыНазначения.ПустаяСсылка();
		Результат.АдресНазначения  = Справочники.уатПунктыНазначения.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьВремяОтправленияДоставкиПоЗаказам()
	
	Результат = Новый Соответствие;
	
	Для Каждого ТекЗаказ Из Объект.Заказы Цикл 
		СтрокаРезультата = Новый Структура("ОтправлениеС, ОтправлениеПо, ДоставкаС, ДоставкаПо");
		
		Если ЗначениеЗаполнено(ТекЗаказ.ЗаказГрузоотправителя) Тогда 
			СтрокаРезультата.ОтправлениеС  = ТекЗаказ.ЗаказГрузоотправителя.ОтправлениеС;
			СтрокаРезультата.ОтправлениеПо = ТекЗаказ.ЗаказГрузоотправителя.ОтправлениеПо;
			СтрокаРезультата.ДоставкаС     = ТекЗаказ.ЗаказГрузоотправителя.ДоставкаС;
			СтрокаРезультата.ДоставкаПо    = ТекЗаказ.ЗаказГрузоотправителя.ДоставкаПо;
		Иначе 
			СтрокаРезультата.ОтправлениеС  = '00010101000000';
			СтрокаРезультата.ОтправлениеПо = '00010101000000';
			СтрокаРезультата.ДоставкаС     = '00010101000000';
			СтрокаРезультата.ДоставкаПо    = '00010101000000';
		КонецЕсли;
		
		Результат.Вставить(Объект.Заказы.Индекс(ТекЗаказ), СтрокаРезультата);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьВремяОтправленияДоставкиПоЗаказу()

&НаКлиенте
Процедура ОбновитьТипыЗначенийСтрокДереваЗаказов(Узел = Неопределено)
	// Типы значений строки:
	// 1 - СправочникСсылка.уатПунктыНазначения 
	// 2 - ДокументСсылка.уатЗаказГрузоотправителя
	// 3 - Строка
	// 4 - СправочникСсылка.Номенклатура
	
	ОчиститьНедоступныеДанные = Ложь;
	
	Если Узел = Неопределено Тогда 
		Узел = ЗаказыДерево;
		ОчиститьНедоступныеДанные = Истина;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Узел.ПолучитьЭлементы() Цикл 
		ОбновитьТипыЗначенийСтрокДереваЗаказов(ТекСтрока);
		Если ТипЗнч(ТекСтрока.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
			ТекСтрока.ТипЗначенияСтроки = 1;
		КонецЕсли;
		Если ТипЗнч(ТекСтрока.ПунктЗаказНоменклатура) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда 
			ТекСтрока.ТипЗначенияСтроки = 2;
		КонецЕсли;
		Если ТипЗнч(ТекСтрока.ПунктЗаказНоменклатура) = Тип("Строка") Тогда 
			ТекСтрока.ТипЗначенияСтроки = 3;
		КонецЕсли;
		Если ТипЗнч(ТекСтрока.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.Номенклатура") Тогда 
			ТекСтрока.ТипЗначенияСтроки = 4;
		КонецЕсли;
		Если ОчиститьНедоступныеДанные
				И ЗаказыДерево.ПолучитьЭлементы().Получить(ЗаказыДерево.ПолучитьЭлементы().Количество()-1) = ТекСтрока Тогда 
			ТекСтрока.Время = Неопределено;
			ТекСтрока.Расстояние = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Рассчитывает для дерева временные и километражные характеристики для дерева заказов:
//  - суммарное время стоянки в пунктах
//  - Плановое время прибытия 
//  - Плановое время убытия 
//  - общую протяженность маршрута
&НаКлиенте
Процедура ОбновитьМаршрутныеПараметрыДереваЗаказов()
	
	ЭлементыДерева = ЗаказыДерево.ПолучитьЭлементы();
	
	Если ЭлементыДерева.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПредВремяОтпр       = ЭлементыДерева[0].УбытиеПлан;
	ПредПунктСтрока     = Неопределено;
	СуммарноеРасстояние = 0;
	СуммарноеВремя      = 0;
	
	Для Каждого ТекСтрокаПункт Из ЭлементыДерева Цикл
		
		СуммарноеВремяСтоянки = 0;
		
		Подстроки = ТекСтрокаПункт.ПолучитьЭлементы();
		
		Если Подстроки.Количество() Тогда
			Для Каждого ТекСтрокаЗаказ Из Подстроки Цикл 
				СуммарноеВремяСтоянки = СуммарноеВремяСтоянки + ТекСтрокаЗаказ.Стоянка;
			КонецЦикла;
		Иначе
			СуммарноеВремяСтоянки = ТекСтрокаПункт.Стоянка;
		КонецЕсли;
		
		ТекСтрокаПункт.Стоянка = СуммарноеВремяСтоянки;
		СуммарноеРасстояние    = СуммарноеРасстояние + ТекСтрокаПункт.Расстояние;
		
		Если ЭлементыДерева.Индекс(ТекСтрокаПункт) = 0 Тогда
			ТекСтрокаПункт.ПрибытиеПлан = СложитьВремя(Объект.ДатаИВремяОтправленияПлан, -СуммарноеВремяСтоянки);
			ТекСтрокаПункт.УбытиеПлан   = Объект.ДатаИВремяОтправленияПлан;
			ПредВремяОтпр               = ТекСтрокаПункт.УбытиеПлан;
		Иначе 
			ТекСтрокаПункт.ПрибытиеПлан = СложитьВремя(ПредВремяОтпр,               ПредПунктСтрока.Время);
			ТекСтрокаПункт.УбытиеПлан   = СложитьВремя(ТекСтрокаПункт.ПрибытиеПлан, СуммарноеВремяСтоянки);
			ПредВремяОтпр               = ТекСтрокаПункт.УбытиеПлан;
		КонецЕсли;
		ПредПунктСтрока = ТекСтрокаПункт;
		
	КонецЦикла;
	
	ОбновитьТипыЗначенийСтрокДереваЗаказов();
	
КонецПроцедуры

// Рассчитывает для дерева грузовые характеристики
//  - общий вес и объем заказа
//  - относительно и абсолютное значение загрузки ТС по весу и объему на выходе из точки 
&НаКлиенте
Процедура ОбновитьГрузовыеПараметрыДереваЗаказов()
	
	ТекВес   = 0; ТекОбъем   = 0; ТекКолМест   = 0;
	ЗаказВес = 0; ЗаказОбъем = 0; ЗаказКолМест = 0;
	
	ГрузовыеПараметрыТС = уатОбщегоНазначения.уатПолучитьГрузоподъемностьИОбъемТС(Объект.ТС);
	ГрузоПодъемность    = ГрузовыеПараметрыТС.Грузоподъемность;
	ОбъемКузова         = ГрузовыеПараметрыТС.ОбъемКузова;
	
	СтрокиДерева = ЗаказыДерево.ПолучитьЭлементы();
	
	Для Каждого ТекПункт Из СтрокиДерева Цикл
		
		Подстроки = ТекПункт.ПолучитьЭлементы();
		
		Для Каждого ТекЗаказ Из Подстроки Цикл
			
			ЗаказВес = 0; ЗаказОбъем = 0; ЗаказКолМест = 0;
			
			Подстроки_2 = ТекЗаказ.ПолучитьЭлементы();
			
			Для Каждого ТекНоменклатура Из Подстроки_2 Цикл
				ЗаказВес     = ЗаказВес     + ТекНоменклатура.ВесБрутто;
				ЗаказОбъем   = ЗаказОбъем   + ТекНоменклатура.Объем;
				ЗаказКолМест = ЗаказКолМест + ТекНоменклатура.КоличествоМест;
			КонецЦикла; //ТекНоменклатура Из ТекЗаказ.Строки
			
			ТекЗаказ.ВесБрутто      = ЗаказВес;
			ТекЗаказ.Объем          = ЗаказОбъем;
			ТекЗаказ.КоличествоМест = ЗаказКолМест;
			Если ТекЗаказ.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка") Тогда
				ТекВес     = ТекВес     + ЗаказВес;
				ТекОбъем   = ТекОбъем   + ЗаказОбъем;
				ТекКолМест = ТекКолМест + ЗаказКолМест;
			ИначеЕсли ТекЗаказ.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка") Тогда
				ТекВес     = ТекВес     - ЗаказВес;
				ТекОбъем   = ТекОбъем   - ЗаказОбъем;
				ТекКолМест = ТекКолМест - ЗаказКолМест;
			КонецЕсли;
		КонецЦикла;//ТекЗаказ Из ТекПункт.Строки
		
		ТекПункт.ВесБрутто      = ТекВес;
		ТекПункт.Объем          = ТекОбъем;
		ТекПункт.КоличествоМест = ТекКолМест;
		ТекПункт.ВесПроцент     = ?(Грузоподъемность, ТекВес   / (Грузоподъемность*1000),0) * 100;
		ТекПункт.ОбъемПроцент   = ?(ОбъемКузова     , ТекОбъем / ОбъемКузова            ,0) * 100;
		
	КонецЦикла;//ТекПункт ИЗ ЗаказыДерево.Строки
	
	ОбновитьТипыЗначенийСтрокДереваЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьГрузовыеПараметрыЗаказов(ТекДанные = Неопределено)
	Если ТекДанные = Неопределено Тогда
		Для Каждого ТекСтрока Из Объект.Заказы Цикл
			ОбновитьГрузовыеПараметрыЗаказов(ТекСтрока);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	ВесОбъем = уатОбщегоНазначения.ПолучитьВесОбъемНоменклатуры(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения);
	Если ВесОбъем.Вес <> 0 Тогда
		ТекДанные.ВесБрутто	= ВесОбъем.Вес * ТекДанные.Количество;
	КонецЕсли;
	Если ВесОбъем.Объем <> 0 Тогда
		ТекДанные.Объем = ВесОбъем.Объем * ТекДанные.Количество;
	КонецЕсли;
	Если ВесОбъем.КоличествоМест <> 0 Тогда
		ТекДанные.КоличествоМест = ВесОбъем.КоличествоМест * ТекДанные.Количество;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЗаказыДеревоЕдиницаИзмеренияПриИзмененииНаСервере(СтруктураПоиска,ТекЕдиницаИзмерения,ТипТочкиМаршрутаРодителя)
	
	пЗаказыДерево = ДанныеФормыВЗначение(ЗаказыДерево, Тип("ДеревоЗначений"));
	
	НайдСтроки = пЗаказыДерево.Строки.НайтиСтроки(СтруктураПоиска,Истина);
	Если НайдСтроки.Количество() = 0 Тогда
		Возврат 0;
	ИначеЕсли НайдСтроки.Количество() = 1 Тогда
		НайдСтроки[0].ЕдиницаИзмерения = ТекЕдиницаИзмерения;
		ЗначениеВДанныеФормы(пЗаказыДерево, ЗаказыДерево);
		Возврат 1;
	Иначе
		Для Каждого ТекЭлем Из НайдСтроки Цикл
			Если Не ТекЭлем.Родитель = Неопределено 
				И Не ТекЭлем.Родитель.ТипТочкиМаршрута = ТипТочкиМаршрутаРодителя Тогда
					ТекЭлем.ЕдиницаИзмерения = ТекЕдиницаИзмерения;
					Прервать;
			КонецЕсли;
		КонецЦикла;
		ЗначениеВДанныеФормы(пЗаказыДерево, ЗаказыДерево);
		Возврат 1;
	КонецЕсли;
	
КонецФункции // ЗаказыДеревоЕдиницаИзмеренияПриИзмененииНаСервере()

&НаСервере
Процедура ЗаказыДеревоВесБруттоПриИзмененииНаСервере(СтруктураПоиска, ТекВес, ТочкаМаршрутаРодителя)
	
	пЗаказыДерево = ДанныеФормыВЗначение(ЗаказыДерево, Тип("ДеревоЗначений"));
	
	НайдСтроки = пЗаказыДерево.Строки.НайтиСтроки(СтруктураПоиска,Истина);
	
	Для Каждого ТекЭлем Из НайдСтроки Цикл
		Если Не ТекЭлем.Родитель = Неопределено 
			И Не ТекЭлем.Родитель.ТипТочкиМаршрута = ТочкаМаршрутаРодителя Тогда 
				ТекЭлем.ВесБрутто = ТекВес;
				Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВДанныеФормы(пЗаказыДерево, ЗаказыДерево);
	
КонецПроцедуры

&НаСервере
Процедура ЗаказыДеревоОбъемПриИзмененииНаСервере(СтруктураПоиска, ТекОбъем, ТочкаМаршрутаРодителя)
	
	пЗаказыДерево = ДанныеФормыВЗначение(ЗаказыДерево, Тип("ДеревоЗначений"));
	
	НайдСтроки = пЗаказыДерево.Строки.НайтиСтроки(СтруктураПоиска,Истина);
	
	Для Каждого ТекЭлем Из НайдСтроки Цикл
		Если Не ТекЭлем.Родитель = Неопределено 
			И Не ТекЭлем.Родитель.ТипТочкиМаршрута = ТочкаМаршрутаРодителя Тогда
			ТекЭлем.Объем = ТекОбъем;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВДанныеФормы(пЗаказыДерево, ЗаказыДерево);
	
КонецПроцедуры

&НаСервере
Процедура ЗаказыДеревоКоличествоМестПриИзмененииНаСервере(СтруктураПоиска, текКоличествоМест, ТочкаМаршрутаРодителя)
	
	пЗаказыДерево = ДанныеФормыВЗначение(ЗаказыДерево, Тип("ДеревоЗначений"));
	
	НайдСтроки = пЗаказыДерево.Строки.НайтиСтроки(СтруктураПоиска,Истина);
	
	Для Каждого ТекЭлем Из НайдСтроки Цикл
		Если Не ТекЭлем.Родитель = Неопределено 
			И Не ТекЭлем.Родитель.ТипТочкиМаршрута = ТочкаМаршрутаРодителя Тогда
				ТекЭлем.КоличествоМест = текКоличествоМест;
				Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВДанныеФормы(пЗаказыДерево, ЗаказыДерево);
	
КонецПроцедуры

// Процедура выполняет удаление строки номенклатуры  (вместе со смежной) из дерева
// 
// Параметры:
//  ДеревоЗаказов      - дерево значений, содержащее заказы
//  СтрокаНоменклатуры - удаляемая строка
//  УдалятьРодителей   - признак, что после удаления строки при необходимости будут удалены родители
//
&НаСервере
Процедура УдалитьНоменклатуруИзМаршрутногоЛиста(ДеревоЗаказов, СтрокаНоменклатуры, УдалятьРодителей = Истина)
	
	СтруктураОтбора = Новый Структура("ЗаказГрузоотправителя, ПунктЗаказНоменклатура, ЕдиницаИзмеренияПоЗаказу, Количество");
	СтруктураОтбора.ЗаказГрузоотправителя       = СтрокаНоменклатуры.ЗаказГрузоотправителя;
	СтруктураОтбора.ПунктЗаказНоменклатура      = СтрокаНоменклатуры.ПунктЗаказНоменклатура;
	СтруктураОтбора.ЕдиницаИзмеренияПоЗаказу    = СтрокаНоменклатуры.ЕдиницаИзмеренияПоЗаказу;
	СтруктураОтбора.Количество                  = СтрокаНоменклатуры.Количество;
	
	НайденныеСтроки = ДеревоЗаказов.Строки.НайтиСтроки(СтруктураОтбора, Истина); 
	РодСтрокаЗаказ1 = НайденныеСтроки[0].Родитель;
	РодСтрокаЗаказ2 = НайденныеСтроки[1].Родитель;
	РодСтрокаПункт1 = НайденныеСтроки[0].Родитель.Родитель;
	РодСтрокаПункт2 = НайденныеСтроки[1].Родитель.Родитель;
	
	НайденныеСтроки[1].Родитель.Строки.Удалить(НайденныеСтроки[1]);
	НайденныеСтроки[0].Родитель.Строки.Удалить(НайденныеСтроки[0]);
	
	Если УдалятьРодителей Тогда
		Если РодСтрокаЗаказ1.Строки.Количество() = 0 Тогда
			РодСтрокаЗаказ1.Родитель.Строки.Удалить(РодСтрокаЗаказ1);
		КонецЕсли;
		Если РодСтрокаПункт1.Строки.Количество() = 0 Тогда
			ДеревоЗаказов.Строки.Удалить(РодСтрокаПункт1);
		КонецЕсли;
		Если Не РодСтрокаЗаказ2 = Неопределено И РодСтрокаЗаказ2.Строки.Количество() = 0 Тогда
			РодСтрокаЗаказ2.Родитель.Строки.Удалить(РодСтрокаЗаказ2);
		КонецЕсли;
		Если Не РодСтрокаПункт2 = Неопределено И РодСтрокаПункт2.Строки.Количество() = 0 Тогда
			ДеревоЗаказов.Строки.Удалить(РодСтрокаПункт2);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаказыДеревоПередУдалениемНаСервере(ДанныеТекСтроки)
	
	пЗаказыДерево = ДанныеФормыВЗначение(ЗаказыДерево, Тип("ДеревоЗначений"));
	НайдСтроки    = пЗаказыДерево.Строки.НайтиСтроки(ДанныеТекСтроки, Истина);
	ТекСтрока     = НайдСтроки[0];
	
	Если ТипЗнч(ТекСтрока.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.уатПунктыНазначения") 
		Или ТипЗнч(ТекСтрока.ПунктЗаказНоменклатура) = Тип("Строка") Тогда 
		
		Если ТекСтрока.Строки.Количество() = 0 Тогда //просто пункт
			
			пЗаказыДерево.Строки.Удалить(ТекСтрока);
			
		Иначе
			
			СчЗак = ТекСтрока.Строки.Количество()-1;
			Пока СчЗак >= 0 Цикл
				ТекСтрокаЗаказ = ТекСтрока.Строки[СчЗак];
				СчГруз = ТекСтрокаЗаказ.Строки.Количество()-1;
				Пока СчГруз >= 0 Цикл
					ТекСтрокаГруз = ТекСтрокаЗаказ.Строки[СчГруз];
					УдалитьНоменклатуруИзМаршрутногоЛиста(пЗаказыДерево, ТекСтрокаГруз);
					СчГруз = СчГруз - 1;
				КонецЦикла;
				СчЗак = СчЗак - 1;
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ТекСтрока.ПунктЗаказНоменклатура) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
		
		СчГруз = ТекСтрока.Строки.Количество()-1;
		Пока СчГруз >= 0 Цикл
			ТекСтрокаГруз = ТекСтрока.Строки[СчГруз];
			УдалитьНоменклатуруИзМаршрутногоЛиста(пЗаказыДерево, ТекСтрокаГруз);
			СчГруз = СчГруз - 1;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ТекСтрока.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		УдалитьНоменклатуруИзМаршрутногоЛиста(пЗаказыДерево, ТекСтрока);
		
	КонецЕсли;
	
	Если пЗаказыДерево.Строки.Количество() Тогда
		ПоследняяСтрока = пЗаказыДерево.Строки[пЗаказыДерево.Строки.Количество() - 1];
		ПоследняяСтрока.Время      = 0;
		ПоследняяСтрока.Расстояние = 0;
	КонецЕсли;
	
	ЗначениеВДанныеФормы(пЗаказыДерево, ЗаказыДерево);
	
КонецПроцедуры

// Получает список номенклатуры по заказу, уже присутствующую в списке маршрутного листа 
// 
//Параметры:
//  Заказ        - Заказ на ТС,из которого будет получена номенклатура
//
&НаСервере
Процедура ПолучитьНоменклатуруПоЗаказуВДереве(Заказ)
	
	пЗаказыДерево = ДанныеФормыВЗначение(ЗаказыДерево, Тип("ДеревоЗначений"));
	
	СтруктураОтбора = Новый Структура("ПунктЗаказНоменклатура, ТипТочкиМаршрута");
	СтруктураОтбора.ПунктЗаказНоменклатура = Заказ; 
	СтруктураОтбора.ТипТочкиМаршрута       = Перечисления.уатТипыТочекМаршрута.Погрузка;
	
	НайдСтроки = пЗаказыДерево.Строки.НайтиСтроки(СтруктураОтбора, Истина);
	
	ТабВыбраннаяНоменклатура.Очистить();
	
	Если Не НайдСтроки = Неопределено Тогда
		Для Каждого ТекСтрока Из НайдСтроки Цикл
			Для Каждого ТекСтрокаНом Из ТекСтрока.Строки Цикл
				НовСтрока = табВыбраннаяНоменклатура.Добавить();
				НовСтрока.Заказчик              = ТекСтрока.ПунктЗаказНоменклатура.Контрагент;
				НовСтрока.ЗаказГрузоотправителя = ТекСтрока.ПунктЗаказНоменклатура;
				НовСтрока.Номенклатура          = ТекСтрокаНом.ПунктЗаказНоменклатура;
				НовСтрока.ЕдиницаИзмерения      = ТекСтрокаНом.ЕдиницаИзмерения;
				НовСтрока.Количество            = ТекСтрокаНом.Количество;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет поиск или создание строк уровня Заказ в дереве, в которые потом будут добавлены 
// перевозимые позиции. Если соответствующие строки найти не удается, то создаются новые
//
// Параметры:
//  мЗаказНаТС    - Заказ на ТС для которого необходимо добавить позицию в дерево заказов
//  пЗаказыДерево - Дерево заказов
//
// Возвращаемое значение:
//  Строки       - Структура, содержащая две строки. Одна для добавления погрузочной позиции, вторая для 
//               разгрузочной позиции
//
&НаСервере
Функция ПолучитьСтрокиДереваДляДобавленияПозиции(мЗаказНаТС, пЗаказыДерево)
	
	Результат = Новый Структура("СтрокаЗаказПогрузка, СтрокаЗаказРазгрузка");
	
	//ищем точку погрузки
	СтруктураПоиска = Новый Структура("ПунктЗаказНоменклатура, ТипТочкиМаршрута");
	СтруктураПоиска.ПунктЗаказНоменклатура = мЗаказНаТС;
	СтруктураПоиска.ТипТочкиМаршрута       = Перечисления.уатТипыТочекМаршрута.Погрузка;
	НайдСтроки = пЗаказыДерево.Строки.НайтиСтроки(СтруктураПоиска, Истина);
	Если НайдСтроки.Количество() = 0 Тогда //не нашли строку-заказ
		
		СтруктураПоискаВнутр = Новый Структура("ПунктЗаказНоменклатура");
		СтруктураПоискаВнутр.ПунктЗаказНоменклатура = мЗаказНаТС.АдресОтправления;
		НайдСтроки = пЗаказыДерево.Строки.НайтиСтроки(СтруктураПоискаВнутр, Ложь);
		Если НайдСтроки.Количество() = 0 Тогда //ненашли строку пункт
			СтрокаПунктПогрузка = пЗаказыДерево.Строки.Добавить();
			СтрокаПунктПогрузка.ПунктЗаказНоменклатура = мЗаказНаТС.АдресОтправления;
		Иначе //Если НайдСтроки.Количество() = 0 тогда
			СтрокаПунктПогрузка = НайдСтроки[0];
		КонецЕсли;
		
		СтрокаЗаказПогрузка = СтрокаПунктПогрузка.Строки.Добавить();
		СтрокаЗаказПогрузка.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка;
		
	Иначе //Если НайдСтроки.Количество() = 0 тогда
		СтрокаЗаказПогрузка = НайдСтроки[0];
	КонецЕсли;
	
	//ищем точку разгрузки
	СтруктураПоискаРазгрузка = Новый Структура("ПунктЗаказНоменклатура, ТипТочкиМаршрута");
	СтруктураПоискаРазгрузка.ПунктЗаказНоменклатура = мЗаказНаТС;
	СтруктураПоискаРазгрузка.ТипТочкиМаршрута       = Перечисления.уатТипыТочекМаршрута.Разгрузка;
	НайдСтроки = пЗаказыДерево.Строки.НайтиСтроки(СтруктураПоискаРазгрузка, Истина);
	Если НайдСтроки.Количество() = 0 Тогда
		
		СтруктураПоискаРазгрузкаВнутр = Новый Структура("ПунктЗаказНоменклатура");
		СтруктураПоискаРазгрузкаВнутр.ПунктЗаказНоменклатура = мЗаказНаТС.АдресНазначения;
		НайдСтроки = пЗаказыДерево.Строки.НайтиСтроки(СтруктураПоискаРазгрузкаВнутр, Ложь);
		Если НайдСтроки.Количество() = 0 
		 Или пЗаказыДерево.Строки.Индекс(НайдСтроки[НайдСтроки.Количество() - 1]) < пЗаказыДерево.Строки.Индекс(СтрокаПунктПогрузка) Тогда
			СтрокаПунктРазгрузка = пЗаказыДерево.Строки.Добавить(); 
			СтрокаПунктРазгрузка.ПунктЗаказНоменклатура = мЗаказНаТС.АдресНазначения;
		Иначе
			СтрокаПунктРазгрузка = НайдСтроки[НайдСтроки.Количество() - 1];
		КонецЕсли;
		
		СтрокаЗаказРазгрузка = СтрокаПунктРазгрузка.Строки.Добавить();
		СтрокаЗаказРазгрузка.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка;
		
	Иначе
		СтрокаЗаказРазгрузка = НайдСтроки[0];
	КонецЕсли;
	
	Результат.СтрокаЗаказПогрузка  = СтрокаЗаказПогрузка;
	Результат.СтрокаЗаказРазгрузка = СтрокаЗаказРазгрузка;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДобавитьСтрокиДереваПриВыбореЗаказа(ВыбранноеЗначение)
	
	пЗаказыДерево = ДанныеФормыВЗначение(ЗаказыДерево, Тип("ДеревоЗначений"));
	
	мСтроки = ПолучитьСтрокиДереваДляДобавленияПозиции(ВыбранноеЗначение.Заказ, пЗаказыДерево);
	СтрокаЗаказПогрузка  = мСтроки.СтрокаЗаказПогрузка;
	СтрокаЗаказРазгрузка = мСтроки.СтрокаЗаказРазгрузка;
	
	СтрокаНомПогрузка  = СтрокаЗаказПогрузка.Строки.Добавить();
	СтрокаНомРазгрузка = СтрокаЗаказРазгрузка.Строки.Добавить();
	
	СтрокаЗаказПогрузка.ПунктЗаказНоменклатура    = ВыбранноеЗначение.Заказ;
	СтрокаНомПогрузка.ЗаказГрузоотправителя       = ВыбранноеЗначение.Заказ;
	СтрокаНомПогрузка.Количество                  = ВыбранноеЗначение.Количество;
	СтрокаНомПогрузка.ПунктЗаказНоменклатура      = ВыбранноеЗначение.Номенклатура;
	СтрокаНомПогрузка.ЕдиницаИзмерения            = ВыбранноеЗначение.ЕдиницаИзмерения;
	СтрокаНомПогрузка.ЕдиницаИзмеренияПоЗаказу    = ВыбранноеЗначение.ЕдиницаИзмерения;
	СтрокаНомПогрузка.ВесБрутто                   = ВыбранноеЗначение.Вес;
	СтрокаНомПогрузка.Объем                       = ВыбранноеЗначение.Объем;
	СтрокаНомПогрузка.КоличествоМест              = ВыбранноеЗначение.КоличествоМест;
	СтрокаЗаказПогрузка.ОкноС                     = ВыбранноеЗначение.Заказ.ОтправлениеС;
	СтрокаЗаказПогрузка.ОкноПо                    = ВыбранноеЗначение.Заказ.ОтправлениеПо;
	СтрокаНомПогрузка.Стоянка                     = ВыбранноеЗначение.Заказ.СтоянкаПунктОтправления;
	
	СтрокаЗаказРазгрузка.ПунктЗаказНоменклатура   = ВыбранноеЗначение.Заказ;
	СтрокаНомРазгрузка.ЗаказГрузоотправителя      = ВыбранноеЗначение.Заказ;
	СтрокаНомРазгрузка.Количество                 = ВыбранноеЗначение.Количество;
	СтрокаНомРазгрузка.ПунктЗаказНоменклатура     = ВыбранноеЗначение.Номенклатура;
	СтрокаНомРазгрузка.ЕдиницаИзмерения           = ВыбранноеЗначение.ЕдиницаИзмерения;
	СтрокаНомРазгрузка.ЕдиницаИзмеренияПоЗаказу   = ВыбранноеЗначение.ЕдиницаИзмерения;
	СтрокаНомРазгрузка.ВесБрутто                  = ВыбранноеЗначение.Вес;
	СтрокаНомРазгрузка.Объем                      = ВыбранноеЗначение.Объем;
	СтрокаНомРазгрузка.КоличествоМест             = ВыбранноеЗначение.КоличествоМест;
	СтрокаЗаказРазгрузка.ОкноС                    = ВыбранноеЗначение.Заказ.ДоставкаС;
	СтрокаЗаказРазгрузка.ОкноПо                   = ВыбранноеЗначение.Заказ.ДоставкаПо;
	СтрокаНомПогрузка.Стоянка                     = ВыбранноеЗначение.Заказ.СтоянкаПунктНазначения;
	
	ЗначениеВДанныеФормы(пЗаказыДерево, ЗаказыДерево);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиСтрокиВДереве(НайденныеСтроки, СтруктураОтбора, Узлы)
	
	Для Каждого ТекУзел Из Узлы Цикл 
		Если  СтруктураОтбора.ЗаказГрузоотправителя    = ТекУзел.ЗаказГрузоотправителя
			И СтруктураОтбора.ПунктЗаказНоменклатура   = ТекУзел.ПунктЗаказНоменклатура
			И СтруктураОтбора.ЕдиницаИзмерения         = ТекУзел.ЕдиницаИзмерения
			И СтруктураОтбора.ЕдиницаИзмеренияПоЗаказу = ТекУзел.ЕдиницаИзмеренияПоЗаказу
			И СтруктураОтбора.Количество               = ТекУзел.Количество Тогда
				НайденныеСтроки.Добавить(ТекУзел);
		КонецЕсли;
		НайтиСтрокиВДереве(НайденныеСтроки, СтруктураОтбора, ТекУзел.ПолучитьЭлементы());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьПеретаскиванияВДеревеЗаказов(СтрокаНоменклатуры, СтрокаПриемник, СтрокаПунктИсточник = Неопределено, СтрокаПунктПриемник=Неопределено)
	
	Если СтрокаПунктИсточник = Неопределено Тогда
		СтрокаПунктИсточник = СтрокаНоменклатуры.ПолучитьРодителя().ПолучитьРодителя();
	КонецЕсли;
	Если СтрокаПунктПриемник = Неопределено Тогда
		СтрокаПунктИсточник = СтрокаПриемник;
		Пока Не СтрокаПунктИсточник.ПолучитьРодителя() = Неопределено Цикл
			СтрокаПунктИсточник = СтрокаПунктИсточник.ПолучитьРодителя();
		КонецЦикла;
	КонецЕсли;
	
	НайденныеСтроки = Новый Массив;
	
	СтруктураОтбора = Новый Структура("ЗаказГрузоотправителя, 
	                                  |ПунктЗаказНоменклатура, 
	                                  |ЕдиницаИзмерения, 
	                                  |ЕдиницаИзмеренияПоЗаказу, 
	                                  |Количество");
	СтруктураОтбора.ЗаказГрузоотправителя    = СтрокаНоменклатуры.ЗаказГрузоотправителя;
	СтруктураОтбора.ПунктЗаказНоменклатура   = СтрокаНоменклатуры.ПунктЗаказНоменклатура;
	СтруктураОтбора.ЕдиницаИзмерения         = СтрокаНоменклатуры.ЕдиницаИзмерения;
	СтруктураОтбора.ЕдиницаИзмеренияПоЗаказу = СтрокаНоменклатуры.ЕдиницаИзмеренияПоЗаказу;
	СтруктураОтбора.Количество               = СтрокаНоменклатуры.Количество;
	
	НайтиСтрокиВДереве(НайденныеСтроки, СтруктураОтбора, ЗаказыДерево.ПолучитьЭлементы()); 
	
	Для Каждого текНайдСтрока Из НайденныеСтроки Цикл
		Если Не ТекНайдСтрока = СтрокаНоменклатуры 
			И Не ТекНайдСтрока.ПолучитьРодителя().ТипТочкиМаршрута = СтрокаНоменклатуры.ПолучитьРодителя().ТипТочкиМаршрута Тогда
				СмежнаяСтрокаНоменклатуры = ТекНайдСтрока;
		КонецЕсли;
	Конеццикла;
	
	Если Не СмежнаяСтрокаНоменклатуры = Неопределено Тогда
		СтрокаПунктСмежный = СмежнаяСтрокаНоменклатуры;
		Пока Не СтрокаПунктСмежный.ПолучитьРодителя() = Неопределено Цикл
			СтрокаПунктСмежный = СтрокаПунктСмежный.ПолучитьРодителя();
		КонецЦикла;
	Иначе
		СтрокаПунктСмежный = СтрокаНоменклатуры;
	КонецЕсли;
		
	ИндексИсточник = ЗаказыДерево.ПолучитьЭлементы().Индекс(СтрокаПунктИсточник);
	ИндексПриемник = ЗаказыДерево.ПолучитьЭлементы().Индекс(СтрокаПунктПриемник);
	ИндексСмежный  = ЗаказыДерево.ПолучитьЭлементы().Индекс(СтрокаПунктСмежный);
	
	Если ИндексИсточник = ИндексПриемник Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрокаНоменклатуры.ПолучитьРодителя().ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка") Тогда
		//       перетягиваем вниз                погрузка не окажется ниже разгрузки
		Если ИндексИсточник < ИндексПриемник И ИндексСмежный <= ИндексПриемник Тогда
			ПеретягиваниеВозможно = Ложь;
		Иначе
			ПеретягиваниеВозможно = Истина;
		КонецЕсли;
		
	Иначе
		//      перетягиваем вверх                   разгрузка не окажется выше погрузки
		Если ИндексИсточник > ИндексПриемник И ИндексСмежный >= ИндексПриемник Тогда
			ПеретягиваниеВозможно = Ложь;
		Иначе
			ПеретягиваниеВозможно = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПеретягиваниеВозможно;
	
КонецФункции // ПроверитьВозможностьПеретаскиванияВДеревеЗаказов()

// Функция выполняет получение строки пункта в дереве заказов по переданным строки источнику и строке приемнику.
// если подходящий строки не найдено, то возвращается неопределено
//
// Параметры:
//  ДеревоЗаказов       -
//  СтрокаПунктИсточник - 
//  СтрокаПунктПриемник -
//
// Возвращаемое значение:
//  строкаПункт  - подходящая строка пункт или неопределено если такой строки не найдено
//
&НаСервере
Функция ПолучитьСтрокуПунктПриПеретаскиванииВДеревеЗаказов(ДеревоЗаказов, СтрокаПунктИсточник, СтрокаПунктПриемник) 
	
	ИндексИсточник = ДеревоЗаказов.Строки.Индекс(СтрокаПунктИсточник);
	ИндексПриемник = ДеревоЗаказов.Строки.Индекс(СтрокаПунктПриемник);
	
	Если ( СтрокаПунктИсточник.Строки.Количество() И СтрокаПунктПриемник.Строки.Количество() ) 
		Или ( СтрокаПунктИсточник.Строки.Количество() = 0 И СтрокаПунктПриемник.Строки.Количество() = 0 ) Тогда // тип строка источника и приемника совпадают
			Если СтрокаПунктИсточник.ПунктЗаказНоменклатура = СтрокаПунктПриемник.ПунктЗаказНоменклатура Тогда
				Возврат СтрокаПунктПриемник;
			КонецЕсли;
	КонецЕсли;
	
	Если ИндексИсточник < ИндексПриемник Тогда //двигаем вниз
		ИндексСлед = ИндексПриемник + 1;
		Если индексСлед > ДеревоЗаказов.Строки.Количество() - 1 Тогда
			Возврат Неопределено;
		КонецЕсли;
		Если (ДеревоЗаказов.Строки[ИндексСлед].Строки.Количество() И СтрокаПунктИсточник.Строки.Количество()) 
			Или (ДеревоЗаказов.Строки[ИндексСлед].Строки.Количество() = 0 И СтрокаПунктИсточник.Строки.Количество() = 0) Тогда
				Если ДеревоЗаказов.Строки[ИндексСлед].ПунктЗаказНоменклатура = СтрокаПунктИсточник.ПунктЗаказНоменклатура Тогда
					Возврат ДеревоЗаказов.Строки[ИндексСлед];
				КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИндексИсточник > ИндексПриемник Тогда //двигаем вверх
		ИндексПред = ИндексПриемник -1;
		Если ИндексПред < 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		Если (ДеревоЗаказов.Строки[ИндексПред].Строки.Количество() И СтрокаПунктИсточник.Строки.Количество()) 
			Или (ДеревоЗаказов.Строки[ИндексПред].Строки.Количество() = 0 И СтрокаПунктИсточник.Строки.Количество() = 0) Тогда
				Если ДеревоЗаказов.Строки[ИндексПред].ПунктЗаказНоменклатура = СтрокаПунктИсточник.ПунктЗаказНоменклатура Тогда
					Возврат ДеревоЗаказов.Строки[ИндексПред];
				КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ЗаказыДеревоПеретаскиваниеНаСервере(СтрокаИсточник, СтрокаПриемник)
	
	пЗаказыДерево = РеквизитФормыВЗначение("ЗаказыДерево", Тип("ДеревоЗначений"));
	
	мЗначение             = пЗаказыДерево.Строки.НайтиСтроки(СтрокаИсточник, Истина).Получить(0);
	СтрокаПриемникВДереве = пЗаказыДерево.Строки.НайтиСтроки(СтрокаПриемник, Истина).Получить(0);
	
	СтрокаПунктПриемник = СтрокаПриемникВДереве;
	Пока Не СтрокаПунктПриемник.Родитель = Неопределено Цикл
		СтрокаПунктПриемник = СтрокаПунктПриемник.Родитель;
	КонецЦикла;
	СтрокаПунктИсточник = мЗначение;
	Пока Не СтрокаПунктИсточник.Родитель = Неопределено Цикл
		СтрокаПунктИсточник = СтрокаПунктИсточник.Родитель;
	КонецЦикла;
	ИндексСтрокаПунктИсточник = пЗаказыДерево.Строки.Индекс(СтрокаПунктИсточник); 
	ИндексСтрокаПунктПриемник = пЗаказыДерево.Строки.Индекс(СтрокаПунктПриемник);
	
	Если ( ТипЗнч(мЗначение.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.уатПунктыНазначения") Или ТипЗнч(мЗначение.ПунктЗаказНоменклатура) = Тип("Строка") ) 
		Или ( ТипЗнч(мЗначение.ПунктЗаказНоменклатура) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") И мЗначение.Родитель.Строки.Количество() = 1 )
		Или ( ТипЗнч(мЗначение.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.Номенклатура") И мЗначение.Родитель.Строки.Количество() = 1 И мЗначение.Родитель.Родитель.Строки.Количество() = 1) Тогда 
		
		мСтр = ПолучитьСтрокуПунктПриПеретаскиванииВДеревеЗаказов(пЗаказыДерево, СтрокаПунктИсточник, СтрокаПунктПриемник);
		
		Если мСтр = Неопределено Или СтрокаПунктИсточник.Строки.Количество() = 0 Тогда
			
			Если ТипЗнч(мЗначение.ПунктЗаказНоменклатура) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
				сдвигСтрока = мЗначение.Родитель;
			ИначеЕсли ТипЗнч(мЗначение.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
				сдвигСтрока = мЗначение.Родитель.Родитель;
			Иначе
				сдвигСтрока = мЗначение;
			КонецЕсли;
			
			Смещение = пЗаказыДерево.Строки.Индекс(СтрокаПунктПриемник) - пЗаказыДерево.Строки.Индекс(СтрокаПунктИсточник);
			пЗаказыДерево.Строки.Сдвинуть(сдвигСтрока, Смещение);
			
		Иначе
			
			Для Каждого ТекЗаказ Из СтрокаПунктИсточник.Строки Цикл
				//ТекЗаказ.Родитель = мСтр;
				СтруктураПоиска = Новый Структура("ПунктЗаказНоменклатура, ТипТочкиМаршрута");
				СтруктураПоиска.ПунктЗаказНоменклатура = ТекЗаказ.ПунктЗаказНоменклатура;
				СтруктураПоиска.ТипТочкиМаршрута       = ТекЗаказ.ТипТочкиМаршрута;
				НайдСтроки = мСтр.Строки.НайтиСтроки(СтруктураПоиска, Ложь);
				Если НайдСтроки.Количество() Тогда
					НовСтрокаЗаказ = НайдСтроки[0];
				Иначе
					НовСтрокаЗаказ = мСтр.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрокаЗаказ, ТекЗаказ);
				КонецЕсли;
				Для Каждого ТекСтрокаНоменклатура Из ТекЗаказ.Строки Цикл
					НовСтрокаНоменклатура = НовСтрокаЗаказ.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрокаНоменклатура, ТекСтрокаНоменклатура);
				КонецЦикла;
				
			КонецЦикла;
			пЗаказыДерево.Строки.Удалить(СтрокаПунктИсточник);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(мЗначение.ПунктЗаказНоменклатура) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда //тащим заказ
		
		НовСтрокаПункт = Неопределено;
		НовСтрокаЗаказ = Неопределено;
		
		мСтр = ПолучитьСтрокуПунктПриПеретаскиванииВДеревеЗаказов(пЗаказыДерево, СтрокаПунктИсточник, СтрокаПунктПриемник);
		Если мСтр = Неопределено Тогда
			НовСтрокаПункт = пЗаказыДерево.Строки.Вставить(пЗаказыДерево.Строки.Индекс(СтрокаПунктПриемник));
			ЗаполнитьЗначенияСвойств(НовСтрокаПункт, мЗначение.Родитель);
		Иначе
			НовСтрокаПункт = мСтр;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаПриемникВДереве.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.уатПунктыНазначения") 
			Или ТипЗнч(СтрокаПриемникВДереве.ПунктЗаказНоменклатура) = Тип("Строка") Тогда
				Если НовСтрокаПункт.Строки.Количество() И НовСтрокаПункт.Строки[НовСтрокаПункт.Строки.Количество() - 1].ПунктЗаказНоменклатура = мЗначение.ПунктЗаказНоменклатура 
				   И НовСтрокаПункт.Строки[НовСтрокаПункт.Строки.Количество() - 1].ТипТочкиМаршрута = мЗначение.ТипТочкиМаршрута тогда
					НовСтрокаЗаказ = НовСтрокаПункт.Строки[НовСтрокаПункт.Строки.Количество() - 1];
				Иначе
					НовСтрокаЗаказ = НовСтрокаПункт.Строки.Добавить();
					НовСтрокаЗаказ.ПунктЗаказНоменклатура = мЗначение.ПунктЗаказНоменклатура;
					НовСтрокаЗаказ.ТипТочкиМаршрута       = мЗначение.ТипТочкиМаршрута;
				КонецЕсли;
			
		ИначеЕсли ТипЗнч(СтрокаПриемникВДереве.ПунктЗаказНоменклатура) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") 
			Или ТипЗнч(СтрокаПриемникВДереве.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.Номенклатура") Тогда 
				мСтрЗаказ = ?(ТипЗнч(СтрокаПриемникВДереве.ПунктЗаказНоменклатура) = Тип("ДокументСсылка.уатЗаказГрузоотправителя"), СтрокаПриемникВДереве, СтрокаПриемникВДереве.Родитель);
				Если мСтрЗаказ.ПунктЗаказНоменклатура = мЗначение.ПунктЗаказНоменклатура И мСтрЗаказ.ТипТочкиМаршрута = мЗначение.ТипТочкиМаршрута Тогда 
					
					НовСтрокаЗаказ = СтрокаПриемникВДереве;
					
				ИначеЕсли (Не мСтрЗаказ.Родитель.Строки.Индекс(мСтрЗаказ) = 0) И мСтрЗаказ.Родитель.Строки[мСтрЗаказ.Родитель.Строки.Индекс(мСтрЗаказ)-1].ПунктЗаказНоменклатура = мЗначение.ПунктЗаказНоменклатура 
					И мСтрЗаказ.Родитель.Строки[мСтрЗаказ.Родитель.Строки.Индекс(мСтрЗаказ)-1].ТипТочкиМаршрута = мЗначение.ТипТочкиМаршрута Тогда 
					  
						НовСтрокаЗаказ = мСтрЗаказ.Родитель.Строки[мСтрЗаказ.Родитель.Строки.Индекс(мСтрЗаказ)-1];
					
				Иначе
					НовСтрокаЗаказ = мСтрЗаказ.Родитель.Строки.Вставить(мСтрЗаказ.Родитель.Строки.Индекс(мСтрЗаказ));
					НовСтрокаЗаказ.ПунктЗаказНоменклатура = мЗначение.ПунктЗаказНоменклатура;
					НовСтрокаЗаказ.ТипТочкиМаршрута       = мЗначение.ТипТочкиМаршрута;
					Если ТипЗнч(НовСтрокаЗаказ.ПунктЗаказНоменклатура) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
						НовСтрокаЗаказ.ЗаказГрузоотправителя = НовСтрокаЗаказ.ПунктЗаказНоменклатура;
					ИначеЕсли ТипЗнч(НовСтрокаЗаказ.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
						НовСтрокаЗаказ.Номенклатура = НовСтрокаЗаказ.ПунктЗаказНоменклатура;
					КонецЕсли;
					
				КонецЕсли;
		КонецЕсли;
		
		Для Каждого мТекСтрока Из мЗначение.Строки Цикл
			НовСтрокаНоменклатура = НовСтрокаЗаказ.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрокаНоменклатура, мТекСтрока);
		КонецЦикла;
		
		мРод = мЗначение.Родитель;
		мЗначение.Родитель.Строки.Удалить(мЗначение);
		Если мРод.Строки.Количество() = 0 Тогда
			пЗаказыДерево.Строки.Удалить(мРод);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(мЗначение.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.Номенклатура") Тогда //Если ТипЗнч(мЗначение.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.уатПунктыНазначения") ИЛИ ТипЗнч(мЗначение.ПунктЗаказНоменклатура) = Тип("Строка") тогда
		
		мСтр = ПолучитьСтрокуПунктПриПеретаскиванииВДеревеЗаказов(пЗаказыДерево, СтрокаПунктИсточник, СтрокаПунктПриемник);
		Если мСтр = Неопределено Тогда
			ИндексДляВставки = пЗаказыДерево.Строки.Индекс(СтрокаПунктПриемник);
			Если пЗаказыДерево.Строки.Индекс(СтрокаПунктПриемник) > пЗаказыДерево.Строки.Индекс(СтрокаПунктИсточник) Тогда
				ИндексДляВставки = ИндексДляВставки + 1;
			КонецЕсли;
			НовСтрокаПункт = пЗаказыДерево.Строки.Вставить(ИндексДляВставки);
			ЗаполнитьЗначенияСвойств(НовСтрокаПункт, мЗначение.Родитель.Родитель);
		Иначе
			НовСтрокаПункт = мСтр;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаПриемникВДереве.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.уатПунктыНазначения") 
			Или ТипЗнч(СтрокаПриемникВДереве.ПунктЗаказНоменклатура) = Тип("Строка") Тогда
				
				Если НовСтрокаПункт.Строки.Количество() И НовСтрокаПункт.Строки[мСтр.Строки.Количество() - 1].ПунктЗаказНоменклатура = мЗначение.ПунктЗаказНоменклатура 
					И НовСтрокаПункт.Строки[НовСтрокаПункт.Строки.Количество() - 1].ТипТочкиМаршрута = мЗначение.ТипТочкиМаршрута Тогда
						
						НовСтрокаЗаказ = НовСтрокаПункт.Строки[НовСтрокаПункт.Строки.Количество() - 1];
						
				Иначе
					
					НовСтрокаЗаказ = НовСтрокаПункт.Строки.Добавить();
					НовСтрокаЗаказ.ПунктЗаказНоменклатура = мЗначение.Родитель.ПунктЗаказНоменклатура;
					НовСтрокаЗаказ.ТипТочкиМаршрута       = мЗначение.Родитель.ТипТочкиМаршрута;
					
				КонецЕсли;
				
		ИначеЕсли ТипЗнч(СтрокаПриемникВДереве.ПунктЗаказНоменклатура) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") 
			Или ТипЗнч(СтрокаПриемникВДереве.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.Номенклатура") Тогда 
				
				мСтрЗаказ = ?(ТипЗнч(СтрокаПриемникВДереве.ПунктЗаказНоменклатура) = Тип("ДокументСсылка.уатЗаказГрузоотправителя"),СтрокаПриемникВДереве,СтрокаПриемникВДереве.Родитель);
				
				Если мСтрЗаказ.ПунктЗаказНоменклатура = мЗначение.ПунктЗаказНоменклатура И мСтрЗаказ.ТипТочкиМаршрута = мЗначение.ТипТочкиМаршрута Тогда 
					
					НовСтрокаЗаказ = СтрокаПриемникВДереве;
					
				ИначеЕсли (Не мСтрЗаказ.Родитель.Строки.Индекс(мСтрЗаказ) = 0) И мСтрЗаказ.Родитель.Строки[мСтрЗаказ.Родитель.Строки.Индекс(мСтрЗаказ)-1].ПунктЗаказНоменклатура = мЗначение.ПунктЗаказНоменклатура 
					И мСтрЗаказ.Родитель.Строки[мСтрЗаказ.Родитель.Строки.Индекс(мСтрЗаказ)-1].ТипТочкиМаршрута = мЗначение.ТипТочкиМаршрута тогда 
						  
						НовСтрокаЗаказ = мСтрЗаказ.Родитель.Строки[мСтрЗаказ.Родитель.Строки.Индекс(мСтрЗаказ)-1];
						
				Иначе
					
					НовСтрокаЗаказ = мСтрЗаказ.Родитель.Строки.Вставить(мСтрЗаказ.Родитель.Строки.Индекс(мСтрЗаказ));
					НовСтрокаЗаказ.ПунктЗаказНоменклатура = мЗначение.ПунктЗаказНоменклатура;
					НовСтрокаЗаказ.ТипТочкиМаршрута       = мЗначение.ТипТочкиМаршрута;
					Если ТипЗнч(НовСтрокаЗаказ.ПунктЗаказНоменклатура) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
						НовСтрокаЗаказ.ЗаказГрузоотправителя = НовСтрокаЗаказ.ПунктЗаказНоменклатура;
					ИначеЕсли ТипЗнч(НовСтрокаЗаказ.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
						НовСтрокаЗаказ.Номенклатура = НовСтрокаЗаказ.ПунктЗаказНоменклатура;
					КонецЕсли;
					
				КонецЕсли;
				
		КонецЕсли;
		
		НовСтрокаНоменклатура = НовСтрокаЗаказ.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрокаНоменклатура,мЗначение);
		
		мРодЗаказ = мЗначение.Родитель;
		мЗначение.Родитель.Строки.Удалить(мЗначение);
		Если мРодЗаказ.Строки.Количество() = 0 Тогда
			мРодПункт = мРодЗаказ.Родитель;
			мРодПункт.Строки.Удалить(мРодЗаказ);
			Если мРодПункт.Строки.Количество() = 0 Тогда
				пЗаказыДерево.Строки.Удалить(мРодПункт);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли; //Если ТипЗнч(мЗначение) = Тип("СправочникСсылка.уатПунктыНазначения") ИЛИ ТипЗнч(мЗначение) = Тип("Строка") тогда
	
	ЗначениеВРеквизитФормы(пЗаказыДерево, "ЗаказыДерево");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоЗаказовПоЗаказуНаТС(ВыбЗаказНаТС)
	
	ПолучитьНоменклатуруПоЗаказуВДереве(ВыбЗаказНаТС);
	ДоступнаяНоменклатура = ПолучитьТаблицуДоступнойНоменклатурыПоЗаказу(ВыбЗаказНаТС);
	Если Не ДоступнаяНоменклатура.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	пЗаказыДерево = ДанныеФормыВЗначение(ЗаказыДерево, Тип("ДеревоЗначений"));
	
	КолСтрокВДереве = пЗаказыДерево.Строки.Количество();
	Если КолСтрокВДереве > 0 И пЗаказыДерево.Строки[КолСтрокВДереве - 1].Строки.Количество() 
		И пЗаказыДерево.Строки[КолСтрокВДереве - 1].ПунктЗаказНоменклатура = ВыбЗаказНаТС.АдресОтправления Тогда
			НовСтрокаПункт = пЗаказыДерево.Строки[КолСтрокВДереве - 1];
	Иначе
		НовСтрокаПункт = пЗаказыДерево.Строки.Добавить();
		НовСтрокаПункт.ПунктЗаказНоменклатура = ВыбЗаказНаТС.АдресОтправления;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("ПунктЗаказНоменклатура,ТипТочкиМаршрута");
	СтруктураПоиска.ПунктЗаказНоменклатура = ВыбЗаказНаТС;
	СтруктураПоиска.ТипТочкиМаршрута       = Перечисления.уатТипыТочекМаршрута.Погрузка;
	НайдСтроки = НовСтрокаПункт.Строки.НайтиСтроки(СтруктураПоиска);
	Если НайдСтроки.Количество() = 0 Тогда
		НовСтрокаЗаказ = НовСтрокаПункт.Строки.Добавить();
		НовСтрокаЗаказ.ПунктЗаказНоменклатура = ВыбЗаказНаТС;
		НовСтрокаЗаказ.ТипТочкиМаршрута       = Перечисления.уатТипыТочекМаршрута.Погрузка;
		НовСТрокаЗаказ.Стоянка                = ВыбЗаказНаТС.СтоянкаПунктОтправления;
		НовСтрокаЗаказ.ОкноС                  = ВыбЗаказНаТС.ОтправлениеС;
		НовСтрокаЗаказ.ОкноПо                 = ВыбЗаказНаТС.ОтправлениеПо;
		НовСтрокаЗаказ.ЗаказГрузоотправителя  = ВыбЗаказНаТС;
	Иначе
		НовСтрокаЗаказ = НайдСтроки[0];
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ДоступнаяНоменклатура Цикл
		НовСтрокаЗаказы = НовСтрокаЗаказ.Строки.Добавить();
		НовСтрокаЗаказы.ПунктЗаказНоменклатура      = ТекСтрока.Номенклатура;
		НовСтрокаЗаказы.Количество                  = ТекСтрока.Количество;
		НовСтрокаЗаказы.ЕдиницаИзмерения            = ТекСтрока.ЕдиницаИзмерения;
		НовСтрокаЗаказы.ЕдиницаИзмеренияПоЗаказу    = ТекСтрока.ЕдиницаИзмерения;
		НовСтрокаЗаказы.ВесБрутто                   = ТекСтрока.Вес;
		НовСтрокаЗаказы.Объем                       = ТекСтрока.Объем;
		НовСтрокаЗаказы.КоличествоМест              = ТекСтрока.КоличествоМест;
		НовСтрокаЗаказы.Номенклатура		        = ТекСтрока.Номенклатура;
	КонецЦикла;
	
	Если Не НовСтрокаПункт.ПунктЗаказНоменклатура = ВыбЗаказНаТС.АдресНазначения Тогда
		НовСтрокаПункт = пЗаказыДерево.Строки.Добавить();
		НовСтрокаПункт.ПунктЗаказНоменклатура = ВыбЗаказНаТС.АдресНазначения;
	КонецЕсли;
	
	СтруктураПоиска.ПунктЗаказНоменклатура = ВыбЗаказНаТС;
	СтруктураПоиска.ТипТочкиМаршрута       = Перечисления.уатТипыТочекМаршрута.Разгрузка;
	НайдСтроки = НовСтрокаПункт.Строки.НайтиСтроки(СтруктураПоиска);
	Если НайдСтроки.Количество() = 0 Тогда
		НовСтрокаЗаказ = НовСтрокаПункт.Строки.Добавить();
		НовСтрокаЗаказ.ПунктЗаказНоменклатура = ВыбЗаказНаТС;
		НовСтрокаЗаказ.ТипТочкиМаршрута       = Перечисления.уатТипыТочекМаршрута.Разгрузка;
		НовСТрокаЗаказ.Стоянка                = ВыбЗаказНаТС.СтоянкаПунктНазначения;
		НовСтрокаЗаказ.ОкноС                  = ВыбЗаказНаТС.ДоставкаС;
		НовСтрокаЗаказ.ОкноПо                 = ВыбЗаказНаТС.ДоставкаПо;
		НовСтрокаЗаказ.ЗаказГрузоотправителя  = ВыбЗаказНаТС;
	Иначе
		НовСтрокаЗаказ = НайдСтроки[0];
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ДоступнаяНоменклатура Цикл
		НовСтрокаЗаказы = НовСтрокаЗаказ.Строки.Добавить();
		НовСтрокаЗаказы.ПунктЗаказНоменклатура      = ТекСтрока.Номенклатура;
		НовСтрокаЗаказы.Количество                  = ТекСтрока.Количество;
		НовСтрокаЗаказы.ЕдиницаИзмерения            = ТекСтрока.ЕдиницаИзмерения;
		НовСтрокаЗаказы.ЕдиницаИзмеренияПоЗаказу    = ТекСтрока.ЕдиницаИзмерения;
		НовСтрокаЗаказы.ВесБрутто                   = ТекСтрока.Вес;
		НовСтрокаЗаказы.Объем                       = ТекСтрока.Объем;
		НовСтрокаЗаказы.КоличествоМест              = ТекСтрока.КоличествоМест;
		НовСтрокаЗаказы.Номенклатура		        = ТекСтрока.Номенклатура;
	КонецЦикла;
	
	ЗначениеВДанныеФормы(пЗаказыДерево, ЗаказыДерево);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаказыДеревоПоОстаткамНаСервере()
	
	пЗаказыДерево = ДанныеФормыВЗначение(ЗаказыДерево, Тип("ДеревоЗначений"));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя КАК Заказ,
	|	уатЗаказыГрузоотправителейОстатки.Номенклатура,
	|	уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения,
	|	уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПоЗаказу,
	|	уатЗаказыГрузоотправителейОстатки.КоличествоОстаток КАК Количество,
	|	уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя.АдресОтправления КАК АдресОтправления,
	|	ВЫБОР
	|		КОГДА НЕ уатЗаказГрузоотправителяЗаказы.Количество ЕСТЬ NULL 
	|			ТОГДА уатЗаказГрузоотправителяЗаказы.ВесБрутто / уатЗаказГрузоотправителяЗаказы.Количество * уатЗаказыГрузоотправителейОстатки.КоличествоОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Вес,
	|	ВЫБОР
	|		КОГДА НЕ уатЗаказГрузоотправителяЗаказы.Количество ЕСТЬ NULL 
	|			ТОГДА уатЗаказГрузоотправителяЗаказы.Объем / уатЗаказГрузоотправителяЗаказы.Количество * уатЗаказыГрузоотправителейОстатки.КоличествоОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Объем,
	|	ВЫБОР
	|		КОГДА НЕ уатЗаказГрузоотправителяЗаказы.Количество ЕСТЬ NULL 
	|			ТОГДА уатЗаказГрузоотправителяЗаказы.КоличествоМест / уатЗаказГрузоотправителяЗаказы.Количество * уатЗаказыГрузоотправителейОстатки.КоличествоОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоМест
	|ИЗ
	|	РегистрНакопления.уатЗаказыГрузоотправителей.Остатки(&Дата, ) КАК уатЗаказыГрузоотправителейОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяЗаказы
	|		ПО уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя = уатЗаказГрузоотправителяЗаказы.Ссылка
	|			И уатЗаказыГрузоотправителейОстатки.Контрагент = уатЗаказГрузоотправителяЗаказы.Ссылка.Контрагент
	|			И уатЗаказыГрузоотправителейОстатки.Номенклатура = уатЗаказГрузоотправителяЗаказы.Номенклатура
	|			И уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения = уатЗаказГрузоотправителяЗаказы.ЕдиницаИзмерения
	|ИТОГИ ПО
	|	АдресОтправления КАК АдресОтправления,
	|	Заказ";
	
	ПарамДата = ?(Объект.Дата = Дата('00010101'),
	              КонецДня(ТекущаяДата()), 
	              ?(Час(Объект.Дата) = 0 И Минута(Объект.Дата) = 0 И Секунда(Объект.Дата) = 0, КонецДня(Объект.Дата), Объект.Дата));  
	
	Запрос.УстановитьПараметр("Дата", ПарамДата);
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Пока Выборка.Следующий() Цикл 
		КолСтрокВДереве = пЗаказыДерево.Строки.Количество();
		Если КолСтрокВДереве > 0 И пЗаказыДерево.Строки[КолСтрокВДереве - 1].Строки.Количество() 
			И пЗаказыДерево.Строки[КолСтрокВДереве - 1].ПунктЗаказНоменклатура = Выборка.АдресОтправления Тогда
				НовСтрокаПункт = пЗаказыДерево.Строки[КолСтрокВДереве - 1];
		Иначе
			НовСтрокаПункт = пЗаказыДерево.Строки.Добавить();
			НовСтрокаПункт.ПунктЗаказНоменклатура = Выборка.АдресОтправления;
		КонецЕсли;
		
		ВыборкаЗаказы = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЗаказы.Следующий() Цикл
			СтруктураПоиска = Новый Структура("ПунктЗаказНоменклатура,ТипТочкиМаршрута");
			СтруктураПоиска.ПунктЗаказНоменклатура = ВыборкаЗаказы.Заказ;
			СтруктураПоиска.ТипТочкиМаршрута       = Перечисления.уатТипыТочекМаршрута.Погрузка;
			НайдСтроки = НовСтрокаПункт.Строки.НайтиСтроки(СтруктураПоиска);
			Если НайдСтроки.Количество() = 0 Тогда
				НовСтрокаЗаказПогрузка = НовСтрокаПункт.Строки.Добавить();
				НовСтрокаЗаказПогрузка.ПунктЗаказНоменклатура = ВыборкаЗаказы.Заказ;
				НовСтрокаЗаказПогрузка.ТипТочкиМаршрута       = Перечисления.уатТипыТочекМаршрута.Погрузка;
				НовСтрокаЗаказПогрузка.Стоянка                = ВыборкаЗаказы.Заказ.СтоянкаПунктОтправления;
				НовСтрокаЗаказПогрузка.ОкноС                  = ВыборкаЗаказы.Заказ.ОтправлениеС;
				НовСтрокаЗаказПогрузка.ОкноПо                 = ВыборкаЗаказы.Заказ.ОтправлениеПо;
				НовСтрокаЗаказПогрузка.ЗаказГрузоотправителя  = ВыборкаЗаказы.Заказ;
			Иначе
				НовСтрокаЗаказПогрузка = НайдСтроки[0];
			КонецЕсли;
			
			ВыборкаНоменклатура = ВыборкаЗаказы.Выбрать();
			Пока ВыборкаНоменклатура.Следующий() цикл
				
				НовСтрока = НовСтрокаЗаказПогрузка.Строки.Добавить();
				НовСтрока.ПунктЗаказНоменклатура      = ВыборкаНоменклатура.Номенклатура;
				НовСтрока.ЕдиницаИзмерения            = ВыборкаНоменклатура.ЕдиницаИзмерения;
				НовСТрока.ЕдиницаИзмеренияПоЗаказу    = ВыборкаНоменклатура.ЕдиницаИзмерения;
				НовСТрока.Количество                  = ВыборкаНоменклатура.Количество;
				НовСтрока.ВесБрутто                   = ВыборкаНоменклатура.Вес;
				НовСтрока.Объем                       = ВыборкаНоменклатура.Объем;
				НовСтрока.КоличествоМест              = ВыборкаНоменклатура.КоличествоМест;
				НовСтрока.Номенклатура      = ВыборкаНоменклатура.Номенклатура;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя КАК Заказ,
	|	уатЗаказыГрузоотправителейОстатки.Номенклатура,
	|	уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения,
	|	уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПоЗаказу,
	|	уатЗаказыГрузоотправителейОстатки.КоличествоОстаток КАК Количество,
	|	уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя.АдресНазначения КАК АдресНазначения,
	|	ВЫБОР
	|		КОГДА НЕ уатЗаказГрузоотправителяЗаказы.Количество ЕСТЬ NULL 
	|			ТОГДА уатЗаказГрузоотправителяЗаказы.ВесБрутто / уатЗаказГрузоотправителяЗаказы.Количество * уатЗаказыГрузоотправителейОстатки.КоличествоОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Вес,
	|	ВЫБОР
	|		КОГДА НЕ уатЗаказГрузоотправителяЗаказы.Количество ЕСТЬ NULL 
	|			ТОГДА уатЗаказГрузоотправителяЗаказы.Объем / уатЗаказГрузоотправителяЗаказы.Количество * уатЗаказыГрузоотправителейОстатки.КоличествоОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Объем,
	|	ВЫБОР
	|		КОГДА НЕ уатЗаказГрузоотправителяЗаказы.Количество ЕСТЬ NULL 
	|			ТОГДА уатЗаказГрузоотправителяЗаказы.КоличествоМест / уатЗаказГрузоотправителяЗаказы.Количество * уатЗаказыГрузоотправителейОстатки.КоличествоОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоМест
	|ИЗ
	|	РегистрНакопления.уатЗаказыГрузоотправителей.Остатки(&Дата, ) КАК уатЗаказыГрузоотправителейОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяЗаказы
	|		ПО уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя = уатЗаказГрузоотправителяЗаказы.Ссылка
	|			И уатЗаказыГрузоотправителейОстатки.Контрагент = уатЗаказГрузоотправителяЗаказы.Ссылка.Контрагент
	|			И уатЗаказыГрузоотправителейОстатки.Номенклатура = уатЗаказГрузоотправителяЗаказы.Номенклатура
	|			И уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения = уатЗаказГрузоотправителяЗаказы.ЕдиницаИзмерения
	|ИТОГИ ПО
	|	АдресНазначения КАК АдресНазначения,
	|	Заказ";
	
	Запрос.УстановитьПараметр("Дата", ПарамДата);
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Пока Выборка.Следующий() Цикл 
		КолСтрокВДереве = пЗаказыДерево.Строки.Количество();
		Если КолСтрокВДереве > 0 И пЗаказыДерево.Строки[КолСтрокВДереве - 1].Строки.Количество() 
			И пЗаказыДерево.Строки[КолСтрокВДереве - 1].ПунктЗаказНоменклатура = Выборка.АдресНазначения Тогда
				НовСтрокаПункт = пЗаказыДерево.Строки[КолСтрокВДереве - 1];
		Иначе
			НовСтрокаПункт = пЗаказыДерево.Строки.Добавить();
			НовСтрокаПункт.ПунктЗаказНоменклатура = Выборка.АдресНазначения;
		КонецЕсли;
		
		ВыборкаЗаказы = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЗаказы.Следующий() Цикл
			СтруктураПоиска = Новый Структура("ПунктЗаказНоменклатура,ТипТочкиМаршрута");
			СтруктураПоиска.ПунктЗаказНоменклатура = ВыборкаЗаказы.Заказ;
			СтруктураПоиска.ТипТочкиМаршрута       = Перечисления.уатТипыТочекМаршрута.Погрузка;
			НайдСтроки = НовСтрокаПункт.Строки.НайтиСтроки(СтруктураПоиска);
			Если НайдСтроки.Количество() = 0 Тогда
				НовСтрокаЗаказПогрузка = НовСтрокаПункт.Строки.Добавить();
				НовСтрокаЗаказПогрузка.ПунктЗаказНоменклатура = ВыборкаЗаказы.Заказ;
				НовСтрокаЗаказПогрузка.ТипТочкиМаршрута       = Перечисления.уатТипыТочекМаршрута.Разгрузка;
				НовСтрокаЗаказПогрузка.Стоянка                = ВыборкаЗаказы.Заказ.СтоянкаПунктНазначения;
				НовСтрокаЗаказПогрузка.ОкноС                  = ВыборкаЗаказы.Заказ.ДоставкаС;
				НовСтрокаЗаказПогрузка.ОкноПо                 = ВыборкаЗаказы.Заказ.ДоставкаПо;
				НовСтрокаЗаказПогрузка.ЗаказГрузоотправителя  = ВыборкаЗаказы.Заказ;
			Иначе
				НовСтрокаЗаказПогрузка = НайдСтроки[0];
			КонецЕсли;
			
			ВыборкаНоменклатура = ВыборкаЗаказы.Выбрать();
			Пока ВыборкаНоменклатура.Следующий() Цикл
				
				НовСтрока = НовСтрокаЗаказПогрузка.Строки.Добавить();
				НовСтрока.ПунктЗаказНоменклатура   = ВыборкаНоменклатура.Номенклатура;
				НовСтрока.ЕдиницаИзмерения         = ВыборкаНоменклатура.ЕдиницаИзмерения;
				НовСТрока.ЕдиницаИзмеренияПоЗаказу = ВыборкаНоменклатура.ЕдиницаИзмерения;
				НовСТрока.Количество               = ВыборкаНоменклатура.Количество;
				НовСтрока.ВесБрутто                = ВыборкаНоменклатура.Вес;
				НовСтрока.Объем                    = ВыборкаНоменклатура.Объем;
				НовСтрока.КоличествоМест           = ВыборкаНоменклатура.КоличествоМест;
				НовСтрока.Номенклатура   = ВыборкаНоменклатура.Номенклатура;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ЗначениеВДанныеФормы(пЗаказыДерево, ЗаказыДерево);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиФормы()
	
	ВремРежим = ХранилищеНастроекДанныхФорм.Загрузить("Документ.уатМаршрутныйЛист.Форма.ФормаДокумента", 
	                                                  "РежимОтображения");
	Если ВремРежим = Неопределено Тогда 
		РежимОтображенияДерево = Истина;
	Иначе 
		РежимОтображенияДерево = ВремРежим;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиФормы()
	УстановитьПривилегированныйРежим(Истина);
	
	ХранилищеНастроекДанныхФорм.Сохранить("Документ.уатМаршрутныйЛист.Форма.ФормаДокумента", 
	                                      "РежимОтображения", 
	                                      РежимОтображенияДерево);
	
КонецПроцедуры

// Процедура выполняет обновление дерева маршрута 
//
&НаКлиенте
Процедура ОбновитьДеревоЗаказов()
	
	ОбновитьДеревоЗаказовНаСервере();
	
	Элементы.ЗаказыДерево.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;
	
	ОбновитьМаршрутныеПараметрыДереваЗаказов();
	ОбновитьГрузовыеПараметрыДереваЗаказов();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоЗаказовНаСервере()
	
	Перем НовСтрокаПункт, ПредПункт, НовСтрокаЗаказ, ПредЗаказ, ПредСтрока;
	
	пЗаказыДерево = ДанныеФормыВЗначение(ЗаказыДерево, Тип("ДеревоЗначений"));
	
	пЗаказыДерево.Строки.Очистить();
	
	СменилсяПункт = Ложь;
	ПредСтрока    = Неопределено;
	ПредПункт     = Ложь;
	
	Для Каждого ТекСтрока Из Объект.Заказы Цикл
		
		//пункт
		Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда
			ТекПункт = ?(ЗначениеЗаполнено(ТекСтрока.Пункт), ТекСтрока.Пункт, ТекСтрока.ЗаказГрузоотправителя.АдресОтправления);
		ИначеЕсли ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка Тогда
			ТекПункт = ?(ЗначениеЗаполнено(ТекСтрока.Пункт), ТекСтрока.Пункт, ТекСтрока.ЗаказГрузоотправителя.АдресНазначения);
		Иначе
			ТекПункт = ТекСтрока.Пункт;
		КонецЕсли;
		
		Если ТекСтрока.ЗаказГрузоотправителя.Пустая() Или ТекСтрока.ТипТочкиМаршрута.Пустая() Тогда
			НовСтрокаПункт = пЗаказыДерево.Строки.Добавить();
			НовСтрокаПункт.ПунктЗаказНоменклатура = ТекПункт;
			НовСтрокаПункт.Расстояние             = ТекСтрока.Расстояние;
			НовСтрокаПункт.Время                  = ТекСтрока.Время;
			НовСтрокаПункт.ПрибытиеФакт           = ТекСтрока.ПрибытиеФакт;
			НовСтрокаПункт.УбытиеФакт             = ТекСтрока.УбытиеФакт;
			НовСтрокаПункт.ПрибытиеПлан           = ТекСтрока.ПрибытиеПлан;
			НовСтрокаПункт.GUIDСтроки             = ТекСтрока.GUIDСтроки;
			НовСтрокаПункт.Выполнен               = ТекСтрока.Выполнен;
			
			ПредПункт     = ТекПункт;
			СменилсяПункт = Истина;
			
			Если пЗаказыДерево.Строки.Индекс(НовСтрокаПункт) = 0 Тогда
				НовСтрокаПункт.УбытиеПлан = Объект.ДатаИВремяОтправленияПлан;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		Если Не ТекПункт = ПредПункт Или СменилсяПункт Тогда
			НовСтрокаПункт = пЗаказыДерево.Строки.Добавить();
			НовСтрокаПункт.ПунктЗаказНоменклатура = ТекПункт;
			НовСтрокаПункт.Расстояние             = ТекСтрока.Расстояние;
			НовСтрокаПункт.Время                  = ТекСтрока.Время;
			НовСтрокаПункт.ПрибытиеФакт           = ТекСтрока.ПрибытиеФакт;
			новСтрокаПункт.УбытиеФакт             = ТекСтрока.УбытиеФакт;
			новСтрокаПункт.ПрибытиеПлан           = ТекСтрока.ПрибытиеПлан;
			
			ПредПункт     = ТекПункт;
			СменилсяПункт = Истина;
			
			Если пЗаказыДерево.Строки.Индекс(НовСтрокаПункт) = 0 Тогда
				НовСтрокаПункт.УбытиеПлан = Объект.ДатаИВремяОтправленияПлан;
			КонецЕсли;
		КонецЕсли;
		
		//Заказ
		Если Не ТекСтрока.ЗаказГрузоотправителя = ПредЗаказ 
			Или (Не ПредСтрока = Неопределено И Не ТекСтрока.ТипТочкиМаршрута = ПредСтрока.ТипТочкиМаршрута) 
			Или СменилсяПункт Тогда
				НовСтрокаЗаказ = НовСтрокаПункт.Строки.Добавить();
				НовСтрокаЗаказ.ПунктЗаказНоменклатура = ТекСтрока.ЗаказГрузоотправителя;
				НовСтрокаЗаказ.ЗаказГрузоотправителя  = ТекСтрока.ЗаказГрузоотправителя;
				НовСтрокаЗаказ.ТипТочкиМаршрута       = ТекСтрока.ТипТочкиМаршрута;
				НовСтрокаЗаказ.Стоянка                = ТекСтрока.Стоянка;
				НовСтрокаЗаказ.Расстояние             = ТекСтрока.Расстояние;
				Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда
					НовСтрокаЗаказ.ОкноС  = ТекСтрока.ЗаказГрузоотправителя.ОтправлениеС;
					НовСтрокаЗаказ.ОкноПо = ТекСтрока.ЗаказГрузоотправителя.ОтправлениеПо;
				ИначеЕсли ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка Тогда
					НовСтрокаЗаказ.ОкноС  = ТекСтрока.ЗаказГрузоотправителя.ДоставкаС;
					НовСтрокаЗаказ.ОкноПо = ТекСтрока.ЗаказГрузоотправителя.ДоставкаПо;
				КонецЕсли;
				ПредЗаказ     = ТекСтрока.ЗаказГрузоотправителя;
				СменилсяПункт = Ложь;
		КонецЕсли;
		
		//номенклатура
		НовСтрокаНоменклатура = НовСтрокаЗаказ.Строки.Добавить();
		НовСтрокаНоменклатура.ПунктЗаказНоменклатура      = ТекСтрока.Номенклатура;
		НовСтрокаНоменклатура.Номенклатура      = ТекСтрока.Номенклатура;
		НовСтрокаНоменклатура.Количество                  = ТекСтрока.Количество;
		НовСтрокаНоменклатура.ВесБрутто                   = ТекСтрока.ВесБрутто;
		НовСтрокаНоменклатура.Объем                       = ТекСтрока.Объем;
		НовСтрокаНоменклатура.КоличествоМест              = ТекСтрока.КоличествоМест;
		НовСтрокаНоменклатура.ЕдиницаИзмерения            = ТекСтрока.ЕдиницаИзмерения;
		НовСтрокаНоменклатура.ЕдиницаИзмеренияПоЗаказу    = ТекСтрока.ЕдиницаИзмеренияПоЗаказу;
		НовСтрокаНоменклатура.ЗаказГрузоотправителя       = ТекСтрока.ЗаказГрузоотправителя;
		НовСтрокаНоменклатура.GUIDСтроки                  = ТекСтрока.GUIDСтроки;
		НовСтрокаНоменклатура.Выполнен                    = ТекСтрока.Выполнен;
		
		ПредСтрока = ТекСтрока;
	КонецЦикла;
	
	Для Каждого ТекУзел Из пЗаказыДерево.Строки Цикл 
		ТекУзел.Выполнен = ПолучитьПометкуУзлаДереваПриЗагрузке(ТекУзел);
	КонецЦикла;
	
	ЗначениеВДанныеФормы(пЗаказыДерево, ЗаказыДерево);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПометкуУзлаДереваПриЗагрузке(УзелОбхода)
	
	Если УзелОбхода.Строки.Количество() = 0 Тогда 
		Возврат УзелОбхода.Выполнен;
	КонецЕсли;
	
	СчВсегоСтрок = 0;
	СчВыполнено  = 0;
	Для Каждого ТекУзел Из УзелОбхода.Строки Цикл 
		СчВсегоСтрок = СчВсегоСтрок + 1;
		СчВыполнено  = СчВыполнено + ?(ПолучитьПометкуУзлаДереваПриЗагрузке(ТекУзел),1,0);
	КонецЦикла;
	
	Если СчВсегоСтрок = СчВыполнено Тогда 
		УзелОбхода.Выполнен = Истина;
		Возврат Истина;
	Иначе 
		УзелОбхода.Выполнен = Ложь;
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Процедура выполняет запись дерева маршрутов
//
&НаСервере
Процедура ЗаписатьДеревоЗаказов()
	
	пЗаказыДерево = ДанныеФормыВЗначение(ЗаказыДерево, Тип("ДеревоЗначений"));
	
	Объект.Заказы.Очистить();
	
	Для Каждого ТекСтрокаПункт Из пЗаказыДерево.Строки Цикл
		Если ТекСтрокаПункт.Строки.Количество() = 0 Тогда //просто пункт
			НовСтрокаЗаказы = Объект.Заказы.Добавить();
			НовСтрокаЗаказы.Пункт            = ТекСтрокаПункт.ПунктЗаказНоменклатура;
			НовСтрокаЗаказы.Время            = ТекСтрокаПункт.Время;
			НовСтрокаЗаказы.Расстояние       = ТекСтрокаПункт.Расстояние;
			НовСтрокаЗаказы.Стоянка          = ТекСтрокаПункт.Стоянка;
			НовСтрокаЗаказы.ПрибытиеФакт     = ТекСтрокаПункт.ПрибытиеФакт;
			НовСтрокаЗаказы.УбытиеФакт       = ТекСтрокаПункт.УбытиеФакт;
			НовСтрокаЗаказы.ПрибытиеПлан     = ТекСтрокаПункт.ПрибытиеПлан;
			НовСтрокаЗаказы.GUIDСтроки       = ТекСтрокаПункт.GUIDСтроки;
			НовСтрокаЗаказы.Выполнен         = ТекСтрокаПункт.Выполнен;
			НовСтрокаЗаказы.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ПромежуточныйПункт;
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекСтрокаЗаказ Из ТекСтрокаПункт.Строки Цикл
			Для Каждого ТекСтрокаНом Из ТекСтрокаЗаказ.Строки Цикл
				НовСтрокаЗаказы = Объект.Заказы.Добавить();
				НовСтрокаЗаказы.ЗаказГрузоотправителя    = ТекСтрокаЗаказ.ПунктЗаказНоменклатура;
				НовСтрокаЗаказы.Пункт                    = ?(ТекСтрокаЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка,
				                                             ТекСтрокаЗаказ.ПунктЗаказНоменклатура.АдресОтправления,
				                                             ТекСтрокаЗаказ.ПунктЗаказНоменклатура.АдресНазначения);
				НовСтрокаЗаказы.Номенклатура             = ТекСтрокаНом.ПунктЗаказНоменклатура;
				НовСтрокаЗаказы.ЕдиницаИзмеренияПоЗаказу = ТекСтрокаНом.ЕдиницаИзмеренияПоЗаказу;
				НовСтрокаЗаказы.ЕдиницаИзмерения         = ТекСтрокаНом.ЕдиницаИзмерения;
				НовСтрокаЗаказы.Количество               = ТекСтрокаНом.Количество;
				НовСтрокаЗаказы.ТипТочкиМаршрута         = ТекСтрокаЗаказ.ТипТочкиМаршрута;
				НовСтрокаЗаказы.ВесБрутто                = ТекСтрокаНом.ВесБрутто;
				НовСтрокаЗаказы.Объем                    = ТекСтрокаНом.Объем;
				НовСтрокаЗаказы.КоличествоМест           = ТекСтрокаНом.КоличествоМест;
				НовСтрокаЗаказы.Стоянка                  = ТекСтрокаЗаказ.Стоянка;
				НовСтрокаЗаказы.GUIDСтроки               = ТекСтрокаНом.GUIDСтроки;
				НовСтрокаЗаказы.Расстояние               = ТекСтрокаПункт.Расстояние;
				НовСтрокаЗаказы.Время                    = ТекСтрокаПункт.Время;
				НовСтрокаЗаказы.ПрибытиеФакт             = ТекСтрокаПункт.ПрибытиеФакт;
				НовСтрокаЗаказы.УбытиеФакт               = ТекСтрокаПункт.УбытиеФакт;
				НовСтрокаЗаказы.ПрибытиеПлан             = ТекСтрокаПункт.ПрибытиеПлан;
				НовСтрокаЗаказы.Выполнен                 = ТекСтрокаНом.Выполнен;
				НовСтрокаЗаказы.ОкноС                    = ТекСтрокаЗаказ.ОкноС;
				НовСтрокаЗаказы.ОкноПо                   = ТекСтрокаЗаказ.ОкноПо;
			КонецЦикла; //Для Каждого ТекСтрокаНом ИЗ ТекСтрокаЗаказ.Строки цикл
		КонецЦикла; //Для каждого ТекСтрокаЗаказ ИЗ ТекСтрокаПункт.Строки Цикл
	КонецЦикла; //Для каждого ТекСтрокаПункт ИЗ ЗаказыДерево цикл
	
	Если пЗаказыДерево.Строки.Количество() > 0 Тогда
		Объект.ДатаИВремяОтправленияПлан = пЗаказыДерево.Строки[0].УбытиеПлан;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет данные в ТЧ после выполнения подборов
&НаКлиенте
Процедура ОбновитьСодержимоеТЧСПискаПослеЗаполнения(Параметр1, Параметр2) Экспорт
	
	ЗаказыУстановитьСодержимоеЯчеек();
	
	ЗаказыДеревоИзменитьДатыВШапке();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокВыбораЭкипажа()
	Элементы.Водитель1.СписокВыбора.Очистить();
	Элементы.Водитель2.СписокВыбора.Очистить();
	Элементы.Сотрудник1.СписокВыбора.Очистить();
	Элементы.Сотрудник2.СписокВыбора.Очистить();
	
	ЭкипажТССписок = уатЗащищенныеФункцииСервер.ЭкипажТССписок(Объект.ТС);
	ЭкипажТССписок_Количество = ЭкипажТССписок.Количество();
	
	Элементы.Водитель1.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	Элементы.Водитель2.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	Элементы.Сотрудник1.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	Элементы.Сотрудник2.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	
	Если ЭкипажТССписок_Количество = 0 Тогда	
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСотр Из ЭкипажТССписок Цикл
		Элементы.Водитель1.СписокВыбора.Добавить(ТекСотр.Значение);
		Элементы.Водитель2.СписокВыбора.Добавить(ТекСотр.Значение);
		Элементы.Сотрудник1.СписокВыбора.Добавить(ТекСотр.Значение);
		Элементы.Сотрудник2.СписокВыбора.Добавить(ТекСотр.Значение);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДанныеСтрокОдногоПункта(ОбновленнаяСтрока)
	
	Если ОбновленнаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	мсвНаборСтрокПункта = Новый Массив;
	
	Индекс = ОбновленнаяСтрока.НомерСтроки-1;
	
	Пока Индекс >= 0 Цикл 
		ТекСтрока = Объект.Заказы.Получить(Индекс);
		Если ТекСтрока.Пункт = ОбновленнаяСтрока.Пункт Тогда 
			мсвНаборСтрокПункта.Добавить(ТекСтрока);
		Иначе 
			Прервать;
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Индекс     = ОбновленнаяСтрока.НомерСтроки;
	МаксИндекс = Объект.Заказы.Количество()-1;
	
	Пока Индекс <= МаксИндекс Цикл 
		ТекСтрока = Объект.Заказы.Получить(Индекс);
		Если ТекСтрока.Пункт = ОбновленнаяСтрока.Пункт Тогда 
			мсвНаборСтрокПункта.Добавить(ТекСтрока);
		Иначе 
			Прервать;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из мсвНаборСтрокПункта Цикл 
		Если ТекСтрока.ЗаказГрузоотправителя = ОбновленнаяСтрока.ЗаказГрузоотправителя Тогда  
			ТекСтрока.Стоянка = ОбновленнаяСтрока.Стоянка;
		КонецЕсли;
	КонецЦикла;
	
	ОбщееВремяСтоянкиВПунктеВСек = 0;
	ПредЗаказАнализ = Неопределено;
	Для Каждого ТекСтрока Из мсвНаборСтрокПункта Цикл 
		Если Не ТекСтрока.ЗаказГрузоотправителя = ПредЗаказАнализ Тогда 
			ОбщееВремяСтоянкиВПунктеВСек = ОбщееВремяСтоянкиВПунктеВСек + ((ТекСтрока.Стоянка - Цел(ТекСтрока.Стоянка))*6000 + Цел(ТекСтрока.Стоянка)*3600);
			ПредЗаказАнализ              = ТекСтрока.ЗаказГрузоотправителя;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из мсвНаборСтрокПункта Цикл 
		ТекСтрока.Время        = ОбновленнаяСтрока.Время;
		ТекСтрока.Расстояние   = ОбновленнаяСтрока.Расстояние;
		ТекСтрока.ПрибытиеПлан = ОбновленнаяСтрока.ПрибытиеПлан;
		ТекСтрока.ПрибытиеФакт = ОбновленнаяСтрока.ПрибытиеФакт;
		ТекСтрока.УбытиеПлан   = ОбновленнаяСтрока.ПрибытиеПлан + ОбщееВремяСтоянкиВПунктеВСек;
		ТекСтрока.УбытиеФакт   = ОбновленнаяСтрока.УбытиеФакт;
		ТекСтрока.Выполнен     = ОбновленнаяСтрока.Выполнен;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьПлановоеВремя()
	
	ПредПрибытиеПлан             = Неопределено;
	ПредУбытиеПлан               = Неопределено;
	ПредВремя                    = Неопределено;
	ПредПункт                    = Неопределено;
	ПредЗаказАнализ              = Неопределено;
	мсвСтрокиОбработка           = Новый Массив();
	ОбщееВремяСтоянкиВПунктеВСек = 0;
	флЕстьПерваяСтрока           = Ложь;
	
	Для Каждого ТекСтрока Из Объект.Заказы Цикл 
		Если Не ТекСтрока.Пункт = ПредПункт Тогда 
			Для Сч = 1 По мсвСтрокиОбработка.Количество() Цикл 
				СтрокаПункта = мсвСтрокиОбработка.Получить(Сч-1);
				Если Сч = 1 И флЕстьПерваяСтрока Тогда 
					СтрокаПункта.УбытиеПлан   = Объект.ДатаИВремяОтправленияПлан;
					СтрокаПункта.ПрибытиеПлан = СтрокаПункта.УбытиеПлан - ОбщееВремяСтоянкиВПунктеВСек;
					
					ПредПрибытиеПлан = СтрокаПункта.ПрибытиеПлан;
					ПредУбытиеПлан   = СтрокаПункта.УбытиеПлан;
					ПредВремя        = СтрокаПункта.Время;
					
				ИначеЕсли Сч = 1 И Не флЕстьПерваяСтрока Тогда
					СтрокаПункта.ПрибытиеПлан = ПредУбытиеПлан + ((ПредВремя - Цел(ПредВремя))*6000 + Цел(ПредВремя)*3600);
					СтрокаПункта.УбытиеПлан   = СтрокаПункта.ПрибытиеПлан + ОбщееВремяСтоянкиВПунктеВСек;
					
					ПредПрибытиеПлан = СтрокаПункта.ПрибытиеПлан;
					ПредУбытиеПлан   = СтрокаПункта.УбытиеПлан;
					ПредВремя        = СтрокаПункта.Время;
					
				Иначе 
					СтрокаПункта.УбытиеПлан   = ПредУбытиеПлан;
					СтрокаПункта.ПрибытиеПлан = ПредПрибытиеПлан;
					СтрокаПункта.Время        = ПредВремя;
				КонецЕсли;
			КонецЦикла;
			
			ПредПункт = ТекСтрока.Пункт;
			ПредЗаказАнализ = Неопределено;
			мсвСтрокиОбработка = Новый Массив();
			ОбщееВремяСтоянкиВПунктеВСек = 0;
			флЕстьПерваяСтрока = Ложь;
		КонецЕсли;
		
		мсвСтрокиОбработка.Добавить(ТекСтрока);
		Если ТекСтрока.НомерСтроки = 1 Тогда 
			флЕстьПерваяСтрока = Истина;
		КонецЕсли;
		
		Если Не ТекСтрока.ЗаказГрузоотправителя = ПредЗаказАнализ Тогда 
			ПредЗаказАнализ = ТекСтрока.ЗаказГрузоотправителя;
			ОбщееВремяСтоянкиВПунктеВСек = ОбщееВремяСтоянкиВПунктеВСек + ((ТекСтрока.Стоянка - Цел(ТекСтрока.Стоянка))*6000 + Цел(ТекСтрока.Стоянка)*3600);
		КонецЕсли;
	КонецЦикла;
	
	Для Сч = 1 По мсвСтрокиОбработка.Количество() Цикл 
		СтрокаПункта = мсвСтрокиОбработка.Получить(Сч-1);
		Если Сч = 1 И флЕстьПерваяСтрока Тогда 
			СтрокаПункта.УбытиеПлан   = Объект.ДатаИВремяОтправленияПлан;
			СтрокаПункта.ПрибытиеПлан = СтрокаПункта.УбытиеПлан - ОбщееВремяСтоянкиВПунктеВСек;
			
			ПредПрибытиеПлан = СтрокаПункта.ПрибытиеПлан;
			ПредУбытиеПлан   = СтрокаПункта.УбытиеПлан;
			ПредВремя        = СтрокаПункта.Время;
			
		ИначеЕсли Сч = 1 И Не флЕстьПерваяСтрока Тогда
			СтрокаПункта.ПрибытиеПлан = ПредУбытиеПлан + ((ПредВремя - Цел(ПредВремя))*6000 + Цел(ПредВремя)*3600);
			СтрокаПункта.УбытиеПлан   = СтрокаПункта.ПрибытиеПлан + ОбщееВремяСтоянкиВПунктеВСек;
			
			ПредПрибытиеПлан = СтрокаПункта.ПрибытиеПлан;
			ПредУбытиеПлан   = СтрокаПункта.УбытиеПлан;
			ПредВремя        = СтрокаПункта.Время;
			
		Иначе 
			СтрокаПункта.УбытиеПлан   = ПредУбытиеПлан;
			СтрокаПункта.ПрибытиеПлан = ПредПрибытиеПлан;
			СтрокаПункта.Время        = ПредВремя;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьВремяВСтроке(ТекСтрока, Знач ИмяКолонки)
	
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекВремяСтроки <> Неопределено Тогда
		УбытиеПлан   = 0;
		ПрибытиеПлан = 0;
		Стоянка      = 0;
		
		ТекВремяСтроки.Свойство("УбытиеПлан",   УбытиеПлан);
		ТекВремяСтроки.Свойство("ПрибытиеПлан", ПрибытиеПлан);
		ТекВремяСтроки.Свойство("Стоянка",      Стоянка);
		ТекВремяСтроки = Неопределено;
		
		РазницаВремени = 0;
		Если Не ТекСтрока.УбытиеПлан = УбытиеПлан Тогда
			РазницаВремени = ТекСтрока.УбытиеПлан - УбытиеПлан;
		ИначеЕсли Не ТекСтрока.ПрибытиеПлан = ПрибытиеПлан Тогда
			РазницаВремени = ТекСтрока.ПрибытиеПлан - ПрибытиеПлан;
		ИначеЕсли Не ТекСтрока.Стоянка = Стоянка Тогда
			РазницаВремени = ((ТекСтрока.Стоянка - Цел(ТекСтрока.Стоянка))*6000 + Цел(ТекСтрока.Стоянка)*3600)-Стоянка;
		КонецЕсли;
		
		Объект.ДатаИВремяОтправленияПлан = Объект.ДатаИВремяОтправленияПлан + РазницаВремени;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоИзменитьДатыВШапке()
	
	ВсегоЭлементов   = 0;
	ВыполненоСтрок   = 0;
	МинимальнаяДата  = '39991231';
	МаксимальнаяДата = '00010101';
	
	ПолучитьДанныеДляИзмененияДатВШапке(ЗаказыДерево.ПолучитьЭлементы(), ВсегоЭлементов, ВыполненоСтрок, МинимальнаяДата, МаксимальнаяДата);
	
	Если МинимальнаяДата = '39991231' Тогда 
		МинимальнаяДата = '00010101';
	КонецЕсли;
	
	Если ВсегоЭлементов = 0 Тогда
		Объект.ДатаИВремяОтправленияПлан = '00010101';
	КонецЕсли;
	
	Если ВыполненоСтрок = 0 Тогда 
		Объект.Выполнен = Ложь;
		Отправлен       = Ложь;
		
		Объект.ДатаИВремяОтправления = '00010101';
		Объект.ДатаИВремяВыполнения  = '00010101';
				
	ИначеЕсли ВыполненоСтрок < ВсегоЭлементов Тогда 
		Объект.Выполнен = Ложь;
		Отправлен       = Истина;
		
		Объект.ДатаИВремяОтправления = НачалоМинуты(МинимальнаяДата);
		Объект.ДатаИВремяВыполнения  = '00010101';
				
	Иначе 
		Объект.Выполнен = Истина;
		Отправлен       = Истина;
		
		Объект.ДатаИВремяОтправления = НачалоМинуты(МинимальнаяДата);
		Объект.ДатаИВремяВыполнения  = НачалоМинуты(МаксимальнаяДата);
				
	КонецЕсли;
	
	УстановитьВидимостьИДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеДляИзмененияДатВШапке(Знач УзелОбхода, КоличествоЭлементов, КоличествоВыполненных, МинимальнаяДата, МаксимальнаяДата)
	
	Для Каждого ТекЭлемент Из УзелОбхода Цикл 
		КоличествоЭлементов = КоличествоЭлементов + 1;
		
		Если ТекЭлемент.Выполнен Тогда 
			КоличествоВыполненных = КоличествоВыполненных + 1;
		КонецЕсли;
		
		Если Не ТекЭлемент.ПрибытиеФакт = '00010101' И ТекЭлемент.ПрибытиеФакт < МинимальнаяДата Тогда 
			МинимальнаяДата = ТекЭлемент.ПрибытиеФакт;
		КонецЕсли;
		Если Не ТекЭлемент.УбытиеФакт = '00010101' И ТекЭлемент.УбытиеФакт < МинимальнаяДата Тогда 
			МинимальнаяДата = ТекЭлемент.УбытиеФакт;
		КонецЕсли;
		Если Не ТекЭлемент.ПрибытиеФакт = '00010101' И ТекЭлемент.ПрибытиеФакт > МаксимальнаяДата Тогда 
			МаксимальнаяДата = ТекЭлемент.ПрибытиеФакт;
		КонецЕсли;
		Если Не ТекЭлемент.УбытиеФакт = '00010101' И ТекЭлемент.УбытиеФакт > МаксимальнаяДата Тогда 
			МаксимальнаяДата = ТекЭлемент.УбытиеФакт;
		КонецЕсли;
		
		ПолучитьДанныеДляИзмененияДатВШапке(ТекЭлемент.ПолучитьЭлементы(), КоличествоЭлементов, КоличествоВыполненных, МинимальнаяДата, МаксимальнаяДата); 
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыИзменитьДатыВШапке()
	
	КоличествоВыполненных = Объект.Заказы.НайтиСтроки(Новый Структура("Выполнен", Истина)).Количество();
	
	Если КоличествоВыполненных = 0 Тогда 
		Объект.Выполнен = Ложь;
		Отправлен       = Ложь;
		
		Объект.ДатаИВремяОтправления = '00010101';
		Объект.ДатаИВремяВыполнения  = '00010101';
		
	ИначеЕсли КоличествоВыполненных < Объект.Заказы.Количество() Тогда 
		Объект.Выполнен = Ложь;
		Отправлен       = Истина;
		
		МинДатаПоЗаказам = '39991231';
		Для Каждого ТекСтрока Из Объект.Заказы Цикл 
			Если Не ТекСтрока.ПрибытиеФакт = '00010101' И ТекСтрока.ПрибытиеФакт < МинДатаПоЗаказам Тогда 
				МинДатаПоЗаказам = ТекСтрока.ПрибытиеФакт;
			КонецЕсли;
			Если Не ТекСтрока.УбытиеФакт = '00010101' И ТекСтрока.УбытиеФакт < МинДатаПоЗаказам Тогда 
				МинДатаПоЗаказам = ТекСтрока.УбытиеФакт;
			КонецЕсли;
		КонецЦикла;
		
		Объект.ДатаИВремяОтправления = ?(МинДатаПоЗаказам = '39991231', '00010101', НачалоМинуты(МинДатаПоЗаказам));
		Объект.ДатаИВремяВыполнения  = '00010101';
		
	Иначе 
		Объект.Выполнен = Истина;
		Отправлен       = Истина;
		
		МинДатаПоЗаказам  = '39991231';
		МаксДатаПоЗаказам = '00010101';
		Для Каждого ТекСтрока Из Объект.Заказы Цикл 
			Если Не ТекСтрока.ПрибытиеФакт = '00010101' И ТекСтрока.ПрибытиеФакт < МинДатаПоЗаказам Тогда 
				МинДатаПоЗаказам = ТекСтрока.ПрибытиеФакт;
			КонецЕсли;
			Если Не ТекСтрока.УбытиеФакт = '00010101' И ТекСтрока.УбытиеФакт < МинДатаПоЗаказам Тогда 
				МинДатаПоЗаказам = ТекСтрока.УбытиеФакт;
			КонецЕсли;
			Если Не ТекСтрока.ПрибытиеФакт = '00010101' И ТекСтрока.ПрибытиеФакт > МаксДатаПоЗаказам Тогда 
				МаксДатаПоЗаказам = ТекСтрока.ПрибытиеФакт;
			КонецЕсли;
			Если Не ТекСтрока.УбытиеФакт = '00010101' И ТекСтрока.УбытиеФакт > МаксДатаПоЗаказам Тогда 
				МаксДатаПоЗаказам = ТекСтрока.УбытиеФакт;
			КонецЕсли;
		КонецЦикла;
		
		Объект.ДатаИВремяОтправления = ?(МинДатаПоЗаказам = '39991231', '00010101', НачалоМинуты(МинДатаПоЗаказам));
		Объект.ДатаИВремяВыполнения  = НачалоМинуты(МаксДатаПоЗаказам);
	КонецЕсли;
	
	Если Объект.Заказы.Количество() = 0 Тогда
		Объект.ДатаИВремяОтправленияПлан = '00010101';
	КонецЕсли;
	
	УстановитьВидимостьИДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЕдиницыИзмеренияПоНоменклатуре(ИндексСтроки)
	
	ТекСтрока = Объект.Заказы.Получить(ИндексСтроки);
	ТекСтрока.ЕдиницаИзмерения         = ТекСтрока.Номенклатура.ЕдиницаИзмерения;
	ТекСтрока.ЕдиницаИзмеренияПоЗаказу = ТекСтрока.Номенклатура.ЕдиницаИзмерения;
	  
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписьИтоги()
	
	НадписьВсегоПоДокументу = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 км / %2 / %3 кг / %4 м3 / мест %5",
		Объект.Расстояние, Формат(Объект.ВремяВПути, "ЧДЦ=2; ЧРД=:; ЧН=00:00; ЧГ="), Объект.ВесБрутто, Объект.Объем, Объект.КоличествоМест);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьВсегоПоДокументуНажатиеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РезультатЗакрытия.Свойство("Расстояние",     Объект.Расстояние);
	РезультатЗакрытия.Свойство("ВремяВПути",     Объект.ВремяВПути);
	РезультатЗакрытия.Свойство("ВесБрутто",      Объект.ВесБрутто);
	РезультатЗакрытия.Свойство("Объем",          Объект.Объем);
	РезультатЗакрытия.Свойство("КоличествоМест", Объект.КоличествоМест);
	
	ОбновитьНадписьИтоги();
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

мБуфСтрока = Новый Структура("ЕдиницаИзмерения, Количество, Вес, Объем");

#КонецОбласти
