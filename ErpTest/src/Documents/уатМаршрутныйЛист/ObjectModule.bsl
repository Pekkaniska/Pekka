Перем мВалютаРегламентированногоУчета Экспорт;//Переменная хранит значение валюты регламентированного учёта,
                                              //полученное из констант
Перем КэшЗаказовНаТС Экспорт; // Рабочая переменная-кэш содержит список заказов на ТС
Перем табВыбраннаяНоменклатура Экспорт; //таблица с уже добавленной в таб часть заказы номенклатурой
Перем мДоступнаКомпонентаУЭ Экспорт; // Используется решение УЭ


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Обновляет значение переменной КэшЗаказовНаТС 
Процедура ОбновитьКэшЗаказовНаТС() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя
	|ИЗ
	|	РегистрНакопления.уатЗаказыГрузоотправителей.Остатки(&ДатаКон, ) КАК уатЗаказыГрузоотправителейОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя.Дата";
	Запрос.УстановитьПараметр("ДатаКон",КонецДня(ТекущаяДата()));
	КэшЗаказовНаТС = Новый СписокЗначений();
	КэшЗаказовНаТС.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЗаказГрузоотправителя"));

КонецПроцедуры

// Функция объединения двух дат  в форматах Число либо Дата
// Время 1 будет увеличено на Время2
// Парам.
// Время1, Время2 - два значения времени, к первому будут добавлено второе 
//
Функция СложитьВремя(Время1,Время2) Экспорт
	Если ТипЗнч(Время1) = Тип("Число") И ТипЗнч(Время2) = Тип("Число") тогда
		час1 = Цел(Время1);
		час2 = Цел(время2);
		мЧас = Час1 + Час2;
		мин = ((Время1 - час1) + (Время2 - час2)) * 100;
		допЧас = Цел(мин / 60);
		мЧас = мЧас + допЧас;
		мин = (мин - ДопЧас*60) / 100;
		Возврат мЧас + Мин;
	ИначеЕсли ТипЗнч(Время1) = Тип("Дата") И ТипЗнч(Время2) = Тип("Дата") тогда
		Возврат Время1 + Час(Время2) * 60 * 60 + Минута(Время2) * 60 + Секунда(Время2); 	
	Иначе
		Если ТипЗнч(Время1) = Тип("Число") тогда
			мВремя1 = Время2;
			мВремя2 = Время1;
		Иначе
			мВремя1 = Время1;
			мВремя2 = Время2;
		КонецЕсли;
		мВремя = дата('00010101010101');
		МВремя = мВремя1 + Цел(мВремя2) * 60 * 60 + (Время2 - Цел(Время2)) * 100 * 60;
		Если ТипЗнч(Время1) = Тип("Число") тогда
			Возврат Час(мВремя) + Минута(мВремя) / 100;	
		Иначе
			Возврат мВремя;	
		КОнецЕсли;
	КонецЕсли;
КонецФункции

// Функция выполняет получение таблицы номенклатуры, которая еще не присутствует в 
// маршрутном листе по указанному заказу
//
// Параметры:
//  Заказ        - Заказ из которого производится выбор номенклатуры
//
// Возвращаемое значение:
//  Таблица доступной к выбору номенклатуры
//
Функция ПолучитьТаблицуДоступнойНоменклатурыПоЗаказу(Заказ) Экспорт
	
	Если НЕ ТипЗнч(Заказ) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") тогда
		мТаб = Новый ТаблицаЗначений();
		Возврат мТаб;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	мМенеджерВрТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = мМенеджерВрТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	Заказчик,
	|	ЗаказГрузоотправителя,
	|	Номенклатура,
	|	ЕдиницаИзмерения,
	|	Количество
	|ПОМЕСТИТЬ 
	|	ВремТаб 
	|ИЗ &ВыбНоменклатура КАК Таб";
	
	Запрос.УстановитьПараметр("ВыбНоменклатура", табВыбраннаяНоменклатура);
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя КАК Заказ,
	|	уатЗаказыГрузоотправителейОстатки.Номенклатура КАК Номенклатура,
	|	уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	уатЗаказыГрузоотправителейОстатки.КоличествоОстаток - ЕСТЬNULL(ВремТаб.Количество, 0) КАК Количество,
	|	ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.ВесБрутто, 0) / ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Количество, 1) 
	|		КАК ВесЕдиницы,
	|	ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Объем, 0) / ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Количество, 1) 
	|		КАК ОбъемЕдиницы,
	|	ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.КоличествоМест, 0) / ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Количество, 1)
	|		КАК КоличествоМестЕдиницы,
	|	(уатЗаказыГрузоотправителейОстатки.КоличествоОстаток - ЕСТЬNULL(ВремТаб.Количество, 0)) * 
	|		ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.ВесБрутто, 0) / ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Количество, 1)
	|			КАК Вес,
	|	(уатЗаказыГрузоотправителейОстатки.КоличествоОстаток - ЕСТЬNULL(ВремТаб.Количество, 0)) * 
	|		ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Объем, 0) / ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Количество, 1)
	|			КАК Объем,
	|	(уатЗаказыГрузоотправителейОстатки.КоличествоОстаток - ЕСТЬNULL(ВремТаб.Количество, 0)) * 
	|		ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.КоличествоМест, 0) /
	|			ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Количество, 1) КАК КоличествоМест
	|ИЗ
	|	РегистрНакопления.уатЗаказыГрузоотправителей.Остатки(&ДатаКон, ЗаказГрузоотправителя = &ВыбЗаказ)
	|			КАК уатЗаказыГрузоотправителейОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремТаб КАК ВремТаб
	|		ПО уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя.Контрагент = ВремТаб.Заказчик
	|			И уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя = ВремТаб.ЗаказГрузоотправителя
	|			И уатЗаказыГрузоотправителейОстатки.Номенклатура = ВремТаб.Номенклатура
	|			И уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения = ВремТаб.ЕдиницаИзмерения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяЗаказы
	|		ПО уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя.Контрагент = 
	|				уатЗаказГрузоотправителяЗаказы.Ссылка.Контрагент
	|			И уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя = уатЗаказГрузоотправителяЗаказы.Ссылка
	|			И уатЗаказыГрузоотправителейОстатки.Номенклатура = уатЗаказГрузоотправителяЗаказы.Номенклатура
	|			И уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения = уатЗаказГрузоотправителяЗаказы.ЕдиницаИзмерения
	|ГДЕ
	|	уатЗаказыГрузоотправителейОстатки.КоличествоОстаток - ЕСТЬNULL(ВремТаб.Количество, 0) > 0";
	
	Запрос.УстановитьПараметр("ВыбЗаказ", Заказ);
	Запрос.УстановитьПараметр("ДатаКон" , КонецДня(ТекущаяДата()));
	Возврат Запрос.Выполнить().Выгрузить();
	
КОнецФункции

// Формирует структуру, содержащую значения реквизитов шапки документа.
//
// Параметры: 
//  ДокументОбъект - объект документа для формирования структуры шапки, 
//
// Возвращаемое значение:
//  Сформированная структура.
//
Функция СформироватьСтруктуруШапкиДокумента()
	
	СтруктураШапкиДокумента = Новый Структура;
	СтруктураШапкиДокумента.Вставить("Ссылка", Ссылка);
	СтруктураШапкиДокумента.Вставить("Дата", Дата);
	Для каждого Реквизит из Метаданные().Реквизиты Цикл
		СтруктураШапкиДокумента.Вставить(Реквизит.Имя, ЭтотОбъект[Реквизит.Имя]);
	КонецЦикла;
	
	Возврат СтруктураШапкиДокумента;
	
КонецФункции // СформироватьСтруктуруШапкиДокумента()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ПроведениеПоЗаказамНаТСИЗаказамГрузоотправителей(Отказ, РежимПроведения, Заголовок, СтруктураШапкиДокумента) 
	
	//Подготовим таблицу заказов для проведения.
	ТаблицаПоЗаказамГрузоотправителей = ПодготовитьТаблицуЗаказов();
		
	НаборДвижений = Движения.уатЗаказыГрузоотправителей;
	
	//управляемая блокировка
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатЗаказыГрузоотправителей");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ТаблицаПоЗаказамГрузоотправителей;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Контрагент", "Контрагент");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ЗаказГрузоотправителя", "ЗаказГрузоотправителя");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	Блокировка.Заблокировать();
	
		
	//сюда вставить контроль остатков по регистру заказы грузоотправителей.
	НаборДвижений.КонтрольОстатков(ЭтотОбъект,"Заказы",СтруктураШапкиДокумента,Отказ,Заголовок);
		
	Движения.уатЗаказыГрузоотправителей.Загрузить(ТаблицаПоЗаказамГрузоотправителей);
	
КонецПроцедуры

Процедура ПроведениеПоОборотамПоМаршрутномуЛисту(Отказ,Заголовок,СтруктураШапкиДокумента)
	
	НаборДвижений = Движения.уатОборотыПоМаршрутномуЛисту;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	мТаб = Заказы.Выгрузить(,"ЗаказГрузоотправителя");
	мТаб.Свернуть("ЗаказГрузоотправителя");
	колЗаказов = мТаб.Количество();
	
	НовСтрока = ТаблицаДвижений.Добавить();
	НовСтрока.организация       = Организация;
	НовСТрока.Перевозчик        = Контрагент;
	НовСтрока.МаршрутныйЛист    = Ссылка;
	НовСтрока.ТС                = ТС;
	НовСтрока.Водитель1         = Водитель1;
	НовСтрока.Водитель2         = Водитель2;
	НовСтрока.Сотрудник1        = Сотрудник1;
	НовСтрока.Сотрудник2        = Сотрудник2;
	НовСтрока.ВремяВПути        = ВремяВПути * 60;
	НовСтрока.Расстояние        = Расстояние;
	НовСтрока.КоличествоЗаказов = КолЗаказов;
	НовСтрока.КоличествоМест    = КоличествоМест;
	НовСтрока.Объем             = Объем;
	НовСтрока.ВесБрутто         = ВесБрутто;
	
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.ВыполнитьДвижения();
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Заказы".
//
// Параметры:
// Параметры: 
//  ТаблицаПоЗаказам        - таблица значений, содержащая данные для проведения и проверки ТЧ Заказы
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиЗаказы(Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "Заказы";
	
	Если Заказы.Количество() = 0 Тогда
		СтрокаСообщения = "Не заполнена табличная часть ""Заказы""!";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения,,,,Отказ);
		Возврат;
	КонецЕсли;
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	
	//!!!!вызываем не стандартный метод проверки, а делаем это своим потому что если у нас выбраны 
	// пункт выезда и возврата то в соответствующих строках таб части будет заполнено только поле Пункт 
	// и стандартный метод естественно будет ругаться на эту строку 
	// уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, 
	//     СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	ПредставлениеТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти.Заказы.Представление();
	МетаданныеРеквизиты         = ЭтотОбъект.Метаданные().ТабличныеЧасти.Заказы.Реквизиты;
	Для Каждого ТекСтрока ИЗ Заказы цикл
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ТекСтрока.НомерСтроки) +
		                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";
									   
		Если ЗначениеЗаполнено(ТекСтрока.ЗаказГрузоотправителя) Тогда
			Для Каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
				Значение = ТекСтрока[КлючЗначение.Ключ];
				Если НЕ ЗначениеЗаполнено(Значение) Тогда
					Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
						ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
						СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
					Иначе
						СтрокаСообщения = КлючЗначение.Значение;
					КонецЕсли;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения,,,,Отказ);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если НЕ ЗначениеЗаполнено(ТекСтрока.Пункт) тогда
				СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения,,,,Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиЗаказы()
  
Функция ПодготовитьТаблицуЗаказов()
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	уатМаршрутныйЛист.НомерСтроки,
	|	уатМаршрутныйЛист.ЗаказГрузоотправителя.Контрагент КАК Контрагент,
	|	уатМаршрутныйЛист.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|	уатМаршрутныйЛист.Номенклатура,
	|	уатМаршрутныйЛист.ЕдиницаИзмерения КАК ЕдиницаИзмеренияФакт,
	|	уатМаршрутныйЛист.ЕдиницаИзмеренияПоЗаказу КАК ЕдиницаИзмерения,
	|	уатМаршрутныйЛист.Ссылка КАК Регистратор,
	|	уатМаршрутныйЛист.Ссылка.Дата КАК Период,
	|	уатМаршрутныйЛист.ЗаказГрузоотправителя.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	СУММА(уатМаршрутныйЛист.Количество) *
	|	ВЫБОР КОГДА уатМаршрутныйЛист.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1)
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛист
	|ГДЕ
	|	уатМаршрутныйЛист.Ссылка = &Ссылка
	|	И уатМаршрутныйЛист.ТипТочкиМаршрута = &ТипТочкиРазгрузка
	|	И НЕ уатМаршрутныйЛист.ЗаказГрузоотправителя = &ПустойЗаказ
	|
	|СГРУППИРОВАТЬ ПО
	|	уатМаршрутныйЛист.ЗаказГрузоотправителя.Контрагент,
	|	уатМаршрутныйЛист.ЗаказГрузоотправителя,
	|	уатМаршрутныйЛист.Номенклатура,
	|	уатМаршрутныйЛист.ЕдиницаИзмерения,
	|	уатМаршрутныйЛист.ЕдиницаИзмеренияПоЗаказу,
	|	уатМаршрутныйЛист.НомерСтроки,
	|	уатМаршрутныйЛист.Ссылка,
	|	уатМаршрутныйЛист.Ссылка.Дата,
	|	уатМаршрутныйЛист.ЗаказГрузоотправителя.ДоговорКонтрагента";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"уатМаршрутныйЛист.ЕдиницаИзмерения",
			"уатМаршрутныйЛист.Номенклатура"));
			
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ТипТочкиРазгрузка", Перечисления.уатТипыТочекМаршрута.Разгрузка);
	Запрос.УстановитьПараметр("ПустойЗаказ", Документы.уатЗаказГрузоотправителя.ПустаяСсылка());
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции
 

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(Ссылка);
	
	//// Инициализация дополнительных свойств для проведения документа.
	//уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента();
	
	Если ВидОперации = Перечисления.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя тогда
		ПроверитьЗаполнениеТабличнойЧастиЗаказы(Отказ, Заголовок);
		Если Не Отказ Тогда
			ПроведениеПоЗаказамНаТСИЗаказамГрузоотправителей(Отказ,РежимПроведения,Заголовок,СтруктураШапкиДокумента);
		КонецЕсли;
	КонецЕсли;
	ПроведениеПоОборотамПоМаршрутномуЛисту(Отказ,Заголовок,СтруктураШапкиДокумента);
	
	//// Контроль возникновения отрицательного остатка.
	//Документы.уатМаршрутныйЛист.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//мВес = 0; мОбъем = 0; мКолМест = 0;
	//мВремяВПути = 0;
	//мРасстояние = 0;
	//Для Каждого ТекСтрока ИЗ Заказы цикл
	//	Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка тогда
	//		мВес     = мВес     + ТекСтрока.ВесБрутто;
	//		мОбъем   = мОбъем   + ТекСтрока.Объем;
	//		мКолМест = мКолМест + ТекСтрока.КоличествоМест;
	//	КонецЕсли;
	//	Если Не ЗначениеЗаполнено(ТекСтрока.GUIDСтроки) Тогда 
	//		ТекСтрока.GUIDСтроки = Новый УникальныйИдентификатор();
	//	КонецЕсли;
	//	мРасстояние = мРасстояние + ТекСтрока.Расстояние;
	//	мВремяВПути = СложитьВремя(мВремяВПути, ТекСтрока.Время);
	//КонецЦикла;
	//
	//ВесБрутто = мВес; Объем = мОбъем; КоличествоМест = мКолМест;	
	//Расстояние = мРасстояние;
	//ВремяВПути = мВремяВПути;
	
	Контрагент = Организация;
	
	// Обновляем даты в шапке документа
	КоличествоВыполненных = Заказы.НайтиСтроки(Новый Структура("Выполнен", Истина)).Количество();
	
	Если КоличествоВыполненных = 0 Тогда 
		Выполнен  = Ложь;
		Отправлен = Ложь;
		
		ДатаИВремяОтправления = '00010101';
		ДатаИВремяВыполнения  = '00010101';
		
	ИначеЕсли КоличествоВыполненных < Заказы.Количество() Тогда 
		Выполнен  = Ложь;
		Отправлен = Истина;
		
		МинДатаПоЗаказам = '39991231';
		Для Каждого ТекСтрока Из Заказы Цикл 
			Если Не ТекСтрока.ПрибытиеФакт = '00010101' И ТекСтрока.ПрибытиеФакт < МинДатаПоЗаказам Тогда 
				МинДатаПоЗаказам = ТекСтрока.ПрибытиеФакт;
			КонецЕсли;
			Если Не ТекСтрока.УбытиеФакт = '00010101' И ТекСтрока.УбытиеФакт < МинДатаПоЗаказам Тогда 
				МинДатаПоЗаказам = ТекСтрока.УбытиеФакт;
			КонецЕсли;
		КонецЦикла;
		
		ДатаИВремяОтправления = ?(МинДатаПоЗаказам = '39991231', '00010101', НачалоМинуты(МинДатаПоЗаказам));
		ДатаИВремяВыполнения  = '00010101';
		
	Иначе 
		Выполнен  = Истина;
		Отправлен = Истина;
		
		МинДатаПоЗаказам  = '39991231';
		МаксДатаПоЗаказам = '00010101';
		Для Каждого ТекСтрока Из Заказы Цикл 
			Если Не ТекСтрока.ПрибытиеФакт = '00010101' И ТекСтрока.ПрибытиеФакт < МинДатаПоЗаказам Тогда 
				МинДатаПоЗаказам = ТекСтрока.ПрибытиеФакт;
			КонецЕсли;
			Если Не ТекСтрока.УбытиеФакт = '00010101' И ТекСтрока.УбытиеФакт < МинДатаПоЗаказам Тогда 
				МинДатаПоЗаказам = ТекСтрока.УбытиеФакт;
			КонецЕсли;
			Если Не ТекСтрока.ПрибытиеФакт = '00010101' И ТекСтрока.ПрибытиеФакт > МаксДатаПоЗаказам Тогда 
				МаксДатаПоЗаказам = ТекСтрока.ПрибытиеФакт;
			КонецЕсли;
			Если Не ТекСтрока.УбытиеФакт = '00010101' И ТекСтрока.УбытиеФакт > МаксДатаПоЗаказам Тогда 
				МаксДатаПоЗаказам = ТекСтрока.УбытиеФакт;
			КонецЕсли;
		КонецЦикла;
		
		ДатаИВремяОтправления = ?(МинДатаПоЗаказам = '39991231', '00010101', НачалоМинуты(МинДатаПоЗаказам));
		ДатаИВремяВыполнения  = НачалоМинуты(МаксДатаПоЗаказам);
	КонецЕсли;
	
	//обновляем адреса отправления/назначения
	Если Заказы.Количество() > 0 Тогда
		АдресОтправления = Заказы[0].Пункт;
		АдресНазначения = Заказы[Заказы.Количество()-1].Пункт;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
		СтандартнаяОбработка = Ложь;
		ВидОперации = Перечисления.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя;
		Организация = ДанныеЗаполнения.Организация;
		ДатаИВремяОтправленияПлан = уатЗащищенныеФункцииСервер.СложитьВремя(ДанныеЗаполнения.ОтправлениеС, ДанныеЗаполнения.СтоянкаПунктОтправления);
		Для Каждого ТекСтрока Из ДанныеЗаполнения.Товары Цикл
			НовСтрока = Заказы.Добавить();
			НовСтрока.ЗаказГрузоотправителя    = ДанныеЗаполнения;
			НовСтрока.Пункт                    = ДанныеЗаполнения.АдресОтправления;
			НовСтрока.ТипТочкиМаршрута         = Перечисления.уатТипыТочекМаршрута.Погрузка;
			НовСтрока.Номенклатура             = ТекСтрока.Номенклатура;
			НовСтрока.ЕдиницаИзмерения         = ТекСтрока.ЕдиницаИзмерения;
			НовСтрока.Количество               = ТекСтрока.Количество;
			НовСтрока.ЕдиницаИзмеренияПоЗаказу = ТекСтрока.ЕдиницаИзмерения;
			НовСтрока.КоличествоМест           = ТекСтрока.КоличествоМест;
			НовСтрока.ВесБрутто                = ТекСтрока.ВесБрутто;
			НовСтрока.Объем                    = ТекСтрока.Объем;
			НовСтрока.Стоянка                  = ДанныеЗаполнения.СтоянкаПунктОтправления;
			НовСтрока.ПрибытиеПлан             = ДанныеЗаполнения.ОтправлениеС;
		КонецЦикла;
		Для Каждого ТекСтрока Из ДанныеЗаполнения.Товары Цикл
			НовСтрока = Заказы.Добавить();
			НовСтрока.ЗаказГрузоотправителя    = ДанныеЗаполнения;
			НовСтрока.Пункт                    = ДанныеЗаполнения.АдресНазначения;
			НовСтрока.ТипТочкиМаршрута         = Перечисления.уатТипыТочекМаршрута.Разгрузка;
			НовСтрока.Номенклатура             = ТекСтрока.Номенклатура;
			НовСтрока.ЕдиницаИзмерения         = ТекСтрока.ЕдиницаИзмерения;
			НовСтрока.Количество               = ТекСтрока.Количество;
			НовСтрока.ЕдиницаИзмеренияПоЗаказу = ТекСтрока.ЕдиницаИзмерения;
			НовСтрока.КоличествоМест           = ТекСтрока.КоличествоМест;
			НовСтрока.ВесБрутто                = ТекСтрока.ВесБрутто;
			НовСтрока.Объем                    = ТекСтрока.Объем;
			НовСтрока.Стоянка                  = ДанныеЗаполнения.СтоянкаПунктНазначения;
			НовСтрока.ПрибытиеПлан             = ДанныеЗаполнения.ДоставкаС;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

табВыбраннаяНоменклатура = Новый ТаблицаЗначений();
табВыбраннаяНоменклатура.Колонки.Добавить("Заказчик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты, СправочникСсылка.СтруктураПредприятия"));

табВыбраннаяНоменклатура.Колонки.Добавить("ЗаказГрузоотправителя", Новый ОписаниеТипов(
											"ДокументСсылка.уатЗаказГрузоотправителя"));
табВыбраннаяНоменклатура.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
табВыбраннаяНоменклатура.Колонки.Добавить("ЕдиницаИзмерения",  Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
табВыбраннаяНоменклатура.Колонки.Добавить("Количество",        Новый ОписаниеТипов("Число",,,
															   Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
табВыбраннаяНоменклатура.Колонки.Добавить("ДатаВыполнения",	   Новый ОписаниеТипов("Дата",
															   Новый КвалификаторыДаты(ЧастиДаты.Дата)));
табВыбраннаяНоменклатура.Колонки.Добавить("ПараметрВыработки", Новый ОписаниеТипов(
											"СправочникСсылка.уатПараметрыВыработки"));
