#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	
	
	//СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗаказовНаТС"   , ТабЗаказыНаТС);
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ДокументСсылка);
	
	//мЗапрос = Новый Запрос;
	//мЗапрос.Текст =
	//"ВЫБРАТЬ
	//|	уатЗаказыНаТСОстатки.Контрагент,
	//|	уатЗаказыНаТСОстатки.Номенклатура,
	//|	уатЗаказыНаТСОстатки.КоличествоОстаток
	//|ИЗ
	//|	РегистрНакопления.уатЗаказыГрузоотправителей.Остатки(&МоментВремени, ЗаказГрузоотправителя = &Заказ И Номенклатура В (&Номенклатура)) КАК уатЗаказыНаТСОстатки
	//|ГДЕ
	//|	уатЗаказыНаТСОстатки.КоличествоОстаток < 0";
	//
	//мЗапрос.УстановитьПараметр("МоментВремени", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	//мЗапрос.УстановитьПараметр("Заказ", ДокументСсылка);
	//мЗапрос.УстановитьПараметр("Номенклатура", ДокументСсылка.Заказы.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	//
	//Выборка = мЗапрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	ТекстСообщения = "Получены отрицательные остатки по заказчику """ + Выборка.Контрагент + """ для номенклатуры " + Выборка.Номенклатура;
	//	уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок, СтатусСообщения.Внимание);	
	//КонецЦикла;
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатМаршрутныйЛист";
	КомандаПечати.Идентификатор = "МаршрутныйЛист";
	КомандаПечати.Представление = НСтр("ru = 'Маршрутный лист'");
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатМаршрутныйЛист";
	КомандаПечати.Идентификатор = "МаршрутныйЛистСЗаказами";
	КомандаПечати.Представление = НСтр("ru = 'Маршрутный лист (детализация по заказам)'");
	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если НЕ уатОбщегоНазначенияСервер.РазрешениеПечатиНепроведенногоДокумента(МассивОбъектов) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "МаршрутныйЛист") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "МаршрутныйЛист",
			"Маршрутный лист", ПечатьМаршрутныйЛист(МассивОбъектов, ОбъектыПечати));
			
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "МаршрутныйЛистСЗаказами") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "МаршрутныйЛистСЗаказами",
			"Маршрутный лист (детализация по заказам)", ПечатьМаршрутныйЛистСЗаказами(МассивОбъектов, ОбъектыПечати));
			
	КонецЕсли;

	уатОбщегоНазначенияСервер.УстановитьРедактированиеПечатныхФормДокумента(КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	Заглушка = Истина;
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Функция определяет плановое время отправления по указанному маршрутному листу
//
Функция ПолучитьВремяОтправленияПлан(Знач МаршрутныйЛист) Экспорт
	
	Если МаршрутныйЛист.Заказы.Количество() = 0 Тогда
		Возврат МаршрутныйЛист.ДатаИВремяОтправленияПлан;
	КонецЕсли;
	
	ПунктОтправления = МаршрутныйЛист.Заказы[0];
	
	Если ЗначениеЗаполнено(ПунктОтправления.ПрибытиеПлан) Тогда 
		Возврат ПунктОтправления.ПрибытиеПлан;
	Иначе 
		Возврат МаршрутныйЛист.ДатаИВремяОтправленияПлан;
	КонецЕсли;
	
КонецФункции // ПолучитьВремяОтправленияПлан()

// Функция определяет плановое время возвращения по указанному маршрутному листу
//
Функция ПолучитьВремяВозвратаПлан(Знач МаршрутныйЛист) Экспорт
	
	Если МаршрутныйЛист.Заказы.Количество() = 0 Тогда
		Возврат '00010101';
	КонецЕсли;
	
	ПоследняяСтрока  = МаршрутныйЛист.Заказы[МаршрутныйЛист.Заказы.Количество()-1];
	ТекИндекс        = МаршрутныйЛист.Заказы.Количество()-1;
	ПоследнийПункт   = МаршрутныйЛист.Заказы[ТекИндекс].Пункт;
	ПредЗаказ        = Неопределено;
	ПоследняяСтоянка = 0;
	
	Пока ТекИндекс > 0 Цикл 
		ТекСтрока = МаршрутныйЛист.Заказы[ТекИндекс];
		Если Не ТекСтрока.Пункт = ПоследнийПункт Тогда 
			Прервать;
		КонецЕсли;
		
		Если Не ПредЗаказ = ТекСтрока.ЗаказГрузоотправителя Тогда 
			ПоследняяСтоянка = уатЗащищенныеФункцииСервер.СложитьВремя(ПоследняяСтоянка, ТекСтрока.Стоянка);
			ПредЗаказ = ТекСтрока.ЗаказГрузоотправителя;
		КонецЕсли;
		
		ТекИндекс = ТекИндекс - 1;
	КонецЦикла;
	
	Возврат уатЗащищенныеФункцииСервер.СложитьВремя(ПоследняяСтрока.ПрибытиеПлан, ПоследняяСтоянка);
	
КонецФункции // ПолучитьВремяПрибытияПлан()

Функция ПолучитьПлановыеДатыПоЗаказам(МаршрутныйЛист) Экспорт
	
	ТаблицаЗаказов = Новый ТаблицаЗначений();
	ТаблицаЗаказов.Колонки.Добавить("Заказ",        Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
	ТаблицаЗаказов.Колонки.Добавить("ПрибытиеПлан", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаЗаказов.Колонки.Добавить("УбытиеПлан",   Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	
	ТабЗаказы = МаршрутныйЛист.Заказы.Выгрузить(, "ЗаказГрузоотправителя");
	ТабЗаказы.Свернуть("ЗаказГрузоотправителя");
	мсвЗаказы = ТабЗаказы.ВыгрузитьКолонку("ЗаказГрузоотправителя");
	
	ДеревоЗаказов = Новый ДеревоЗначений();
	ДеревоЗаказов.Колонки.Добавить("ПунктЗаказНоменклатура", Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя, СправочникСсылка.уатПунктыНазначения, Строка"));
	ДеревоЗаказов.Колонки.Добавить("ПрибытиеПлан",           Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ДеревоЗаказов.Колонки.Добавить("УбытиеПлан",             Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ДеревоЗаказов.Колонки.Добавить("Время",                  Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("Стоянка",                Новый ОписаниеТипов("Число"));
	
	СменилсяПункт = Ложь;
	ПредЗаказ     = Неопределено;
	ПредСтрока    = Неопределено;
	ПредПункт     = Ложь;
	Для Каждого ТекСтрока Из МаршрутныйЛист.Заказы Цикл
		//пункт
		Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда
			ТекПункт = ?(ЗначениеЗаполнено(ТекСтрока.Пункт), ТекСтрока.Пункт, ТекСтрока.ЗаказГрузоотправителя.АдресОтправления);
		ИначеЕсли ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка Тогда
			ТекПункт = ?(ЗначениеЗаполнено(ТекСтрока.Пункт), ТекСтрока.Пункт, ТекСтрока.ЗаказГрузоотправителя.АдресНазначения);
		Иначе
			ТекПункт = ТекСтрока.Пункт;
		КонецЕсли;
		
		Если ТекСтрока.ЗаказГрузоотправителя.Пустая() Или ТекСтрока.ТипТочкиМаршрута.Пустая() Тогда
			НовСтрокаПункт = ДеревоЗаказов.Строки.Добавить();
			НовСтрокаПункт.ПунктЗаказНоменклатура = ТекПункт;
			НовСтрокаПункт.Время                  = ТекСтрока.Время;
			НовСтрокаПункт.ПрибытиеПлан           = ТекСтрока.ПрибытиеПлан;
			
			ПредПункт     = ТекПункт;
			СменилсяПункт = Истина;
			
			Если ДеревоЗаказов.Строки.Индекс(НовСтрокаПункт) = 0 Тогда
				НовСтрокаПункт.УбытиеПлан = МаршрутныйЛист.ДатаИВремяОтправленияПлан;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		Если Не ТекПункт = ПредПункт Или СменилсяПункт Тогда
			НовСтрокаПункт = ДеревоЗаказов.Строки.Добавить();
			НовСтрокаПункт.ПунктЗаказНоменклатура = ТекПункт;
			НовСтрокаПункт.Время                  = ТекСтрока.Время;
			новСтрокаПункт.ПрибытиеПлан           = ТекСтрока.ПрибытиеПлан;
			
			ПредПункт     = ТекПункт;
			СменилсяПункт = Истина;
			
			Если ДеревоЗаказов.Строки.Индекс(НовСтрокаПункт) = 0 Тогда
				НовСтрокаПункт.УбытиеПлан = МаршрутныйЛист.ДатаИВремяОтправленияПлан;
			КонецЕсли;
		КонецЕсли;
		
		//Заказ
		Если Не ТекСтрока.ЗаказГрузоотправителя = ПредЗаказ 
			Или (Не ПредСтрока = Неопределено И Не ТекСтрока.ТипТочкиМаршрута = ПредСтрока.ТипТочкиМаршрута) 
			Или СменилсяПункт Тогда
				НовСтрокаЗаказ = НовСтрокаПункт.Строки.Добавить();
				НовСтрокаЗаказ.ПунктЗаказНоменклатура = ТекСтрока.ЗаказГрузоотправителя;
				НовСтрокаЗаказ.Стоянка                = ТекСтрока.Стоянка;
				
				ПредЗаказ     = ТекСтрока.ЗаказГрузоотправителя;
				СменилсяПункт = Ложь;
		КонецЕсли;
		
		ПредСтрока = ТекСтрока;
	КонецЦикла;
	
	ПредВремяОтпр     = Неопределено;
	ПредПунктСтрока   = Неопределено;
	ОбщееВремяСтоянок = 0;
	Для Каждого ТекСтрокаПункт Из ДеревоЗаказов.Строки Цикл
		СуммарноеВремяСтоянки = 0;
		Подстроки = ТекСтрокаПункт.Строки;
		
		Если Подстроки.Количество() Тогда
			Для Каждого ТекСтрокаЗаказ Из Подстроки Цикл 
				СуммарноеВремяСтоянки = уатЗащищенныеФункцииСервер.СложитьВремя(СуммарноеВремяСтоянки, ТекСтрокаЗаказ.Стоянка);
			КонецЦикла;
		Иначе
			СуммарноеВремяСтоянки = ТекСтрокаПункт.Стоянка;
		КонецЕсли;
		
		ТекСтрокаПункт.Стоянка = СуммарноеВремяСтоянки;
		ОбщееВремяСтоянок      = уатЗащищенныеФункцииСервер.СложитьВремя(ОбщееВремяСтоянок, ТекСтрокаПункт.Стоянка);
		
		Если ДеревоЗаказов.Строки.Индекс(ТекСтрокаПункт) = 0 Тогда
			ТекСтрокаПункт.ПрибытиеПлан = уатЗащищенныеФункцииСервер.СложитьВремя(МаршрутныйЛист.ДатаИВремяОтправленияПлан, -СуммарноеВремяСтоянки);
			ТекСтрокаПункт.УбытиеПлан   = МаршрутныйЛист.ДатаИВремяОтправленияПлан;
			ПредВремяОтпр               = ТекСтрокаПункт.УбытиеПлан;
		Иначе 
			ТекСтрокаПункт.ПрибытиеПлан = уатЗащищенныеФункцииСервер.СложитьВремя(ПредВремяОтпр,               ПредПунктСтрока.Время);
			ТекСтрокаПункт.УбытиеПлан   = уатЗащищенныеФункцииСервер.СложитьВремя(ТекСтрокаПункт.ПрибытиеПлан, СуммарноеВремяСтоянки);
			ПредВремяОтпр               = ТекСтрокаПункт.УбытиеПлан;
		КонецЕсли;
		
		ПредПунктСтрока = ТекСтрокаПункт;
	КонецЦикла;
	
	Для Каждого ТекЗаказ Из мсвЗаказы Цикл 
		ПрибытиеПлан = Неопределено;
		УбытиеПлан   = Неопределено;
		
		Для Каждого СтрокаПункта Из ДеревоЗаказов.Строки Цикл 
			Если Не ПрибытиеПлан = Неопределено Тогда 
				Прервать;
			КонецЕсли;
			
			Для Каждого СтрокаЗаказа Из СтрокаПункта.Строки Цикл 
				Если СтрокаЗаказа.ПунктЗаказНоменклатура = ТекЗаказ Тогда 
					ПрибытиеПлан = СтрокаПункта.ПрибытиеПлан;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если ПрибытиеПлан = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		СчВнеш = ДеревоЗаказов.Строки.Количество()-1;
		Пока СчВнеш >= 0 Цикл 
			Если Не УбытиеПлан = Неопределено Тогда 
				Прервать;
			КонецЕсли;
			
			СтрокаПункта = ДеревоЗаказов.Строки[СчВнеш];
			
			СчВнут = СтрокаПункта.Строки.Количество()-1;
			Пока СчВнут >= 0 Цикл
				СтрокаЗаказа = СтрокаПункта.Строки[СчВнут];
				Если СтрокаЗаказа.ПунктЗаказНоменклатура = ТекЗаказ Тогда 
					УбытиеПлан = СтрокаПункта.УбытиеПлан;
					Прервать;
				КонецЕсли;
				
				СчВнут = СчВнут - 1;
			КонецЦикла;
			
			СчВнеш = СчВнеш - 1;
		КонецЦикла;
		
		Если УбытиеПлан = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		НовСтрока = ТаблицаЗаказов.Добавить();
		НовСтрока.Заказ        = ТекЗаказ;
		НовСтрока.ПрибытиеПлан = ПрибытиеПлан;
		НовСтрока.УбытиеПлан   = УбытиеПлан;
	КонецЦикла;
	
	Возврат ТаблицаЗаказов;
	
КонецФункции // ПолучитьПлановыеДатыПоЗаказам()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьАдресСтрокой(Адрес)
	Результат = "";
	Если ТипЗнч(Адрес) = Тип("СправочникСсылка.уатПунктыНазначения") тогда
		Если ПустаяСтрока(Адрес.Адрес) тогда
			Результат = Адрес.Наименование;
		Иначе
			Результат = Адрес.Адрес;
		КонецЕсли;
	ИначеЕсли типЗнч(Адрес) = тип("Строка") тогда
		Результат = Адрес;
	Иначе
		Результат = "";
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция ПечатьМаршрутныйЛист(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_МаршрутныйЛист";
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_МаршрутныйЛист_МаршрутныйЛист";
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатМаршрутныйЛист.ПФ_MXL_МаршрутныйЛист");
		
		// Заголовок
		ОбластьМакетаШапка = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакетаШапка.Параметры.ТекстЗаголовка           = уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ТекущийДокумент, "Маршрутный лист");
		ОбластьМакетаШапка.Параметры.ПредставлениеПеревозчика = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(
			уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Контрагент, ТекущийДокумент.Дата), "ПолноеНаименование");
		ОбластьМакетаШапка.Параметры.ПредставлениеТС          = уатОбщегоНазначения.уатПредставлениеТС(ТекущийДокумент.ТС, ТекущийДокумент.Организация)
			+ " (" + уатОбщегоНазначения.уатПредставлениеМоделиТС(ТекущийДокумент.ТС) + ")";
		ОбластьМакетаШапка.Параметры.Водитель = ТекущийДокумент.Водитель1;
		ОбластьМакетаШапка.Параметры.ПредставлениеВодителя = уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ТекущийДокумент.Водитель1, НачалоДня(ТекущийДокумент.Дата));;
		
		Если ТекущийДокумент.Заказы.Количество() Тогда 
			
			ОбластьМакетаШапка.Параметры.ПлановоеВремяВыезда = ПолучитьВремяОтправленияПлан(ТекущийДокумент);
			
			Если ТекущийДокумент.Заказы.НайтиСтроки(Новый Структура("Выполнен", Истина)).Количество() Тогда 
				ОбластьМакетаШапка.Параметры.ФактическоеВремяВыезда = ТекущийДокумент.ДатаИВремяОтправления;
			КонецЕсли;
			
			ОбластьМакетаШапка.Параметры.ПлановоеВремяВозврата = ПолучитьВремяВозвратаПлан(ТекущийДокумент);
			
			Если ТекущийДокумент.Выполнен Тогда 
				ОбластьМакетаШапка.Параметры.ФактическоеВремяВозврата = ТекущийДокумент.ДатаИВремяВыполнения;
				ОбластьМакетаШапка.Параметры.ДатаВыполнения           = ТекущийДокумент.ДатаИВремяВыполнения;
			КонецЕсли;
		КонецЕсли;
		
		ТабДокМаршрут = Новый ТабличныйДокумент;
		
		ОбластьМакета = Макет.ПолучитьОбласть("МаршрутШапка");
		ТабДокМаршрут.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("МаршрутСтрока");
		
		ПредАдр     = 0;
		ОбщийПробег = 0;
		ПредСтрока  = Неопределено;
		
		МаксВес    = 0; МаксОбъем    = 0; МаксКолМест    = 0;
		ПеревезВес = 0; ПеревезОбъем = 0; ПеревезКолМест = 0;
		ТекВес     = 0; ТекОбъем     = 0; ТекКолМест     = 0;
		
		Для Каждого ТекСтрока Из ТекущийДокумент.Заказы Цикл
			Если ТекСтрока.Пункт = Неопределено ИЛИ НЕ значениеЗаполнено(ТекСтрока.Пункт) тогда
				Если НЕ ТекСтрока.ЗаказГрузоотправителя.Пустая() И ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка тогда
					мАдр = ТекСтрока.ЗаказГрузоотправителя.АдресОтправления;
				ИначеЕсли НЕ ТекСтрока.ЗаказГрузоотправителя.Пустая() И ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка тогда
					мАдр = ТекСтрока.ЗаказГрузоотправителя.АдресНазначения;
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				мАдр = ТекСтрока.Пункт;
			КонецЕсли;
			мАдр = ПолучитьАдресСтрокой(мадр);
			
			Если ТекСтрока.ЗаказГрузоотправителя.Пустая() И НЕ ЗначениеЗаполнено(ТекСтрока.Контрагент) тогда
				мКонтр = "";
			ИначеЕсли ТекСтрока.ЗаказГрузоотправителя.Пустая() И ЗначениеЗаполнено(ТекСтрока.Контрагент) тогда	
				мКонтр = ТекСтрока.Контрагент;
			Иначе
				Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка тогда
					мКонтр = ТекСтрока.ЗаказГрузоотправителя.Грузоотправитель;
				Иначе
					мКонтр = ТекСтрока.ЗаказГрузоотправителя.Грузополучатель;
				КонецЕсли;
				Если мКонтр = Неопределено ИЛИ НЕ ЗначениеЗаполнено(мКонтр) тогда
					мКонтр = ТекСтрока.ЗаказГрузоотправителя.Контрагент;
				КОнецЕсли;
			КонецЕсли;
			
			Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка тогда
				ПеревезВес     = ПеревезВес     + ТекСтрока.ВесБрутто;
				ПеревезОбъем   = ПеревезОбъем   + ТекСтрока.Объем;
				ПеревезКолМест = ПеревезКолМест + ТекСтрока.КоличествоМест;
				ТекВес         = ТекВес         + ТекСтрока.ВесБрутто;
				ТекОбъем       = ТекОбъем       + ТекСтрока.Объем;
				ТекКолМест     = ТекКолМест     + ТекСтрока.КоличествоМест;
			ИначеЕсли ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка тогда
				ТекВес         = ТекВес         - ТекСтрока.ВесБрутто;
				ТекОбъем       = ТекОбъем       - ТекСтрока.Объем;
				ТекКолМест     = ТекКолМест     - ТекСтрока.КоличествоМест;
			КонецЕсли;
			МаксВес     = Макс(МаксВес    ,ТекВес);
			МаксОбъем   = Макс(МаксОбъем  ,ТекОбъем);
			МаксКолМест = Макс(МаксКолМест,ТекКолМест);
			
			ОбластьМакета.Параметры.НомерПункта  = ТекСтрока.НомерСтроки;
			ОбластьМакета.Параметры.Адрес        = мАдр;
			ОбластьМакета.Параметры.Расстояние   = ТекСтрока.Расстояние;
			ОбластьМакета.Параметры.Контрагент   = мКонтр;
			ОбластьМакета.Параметры.ПрибытиеПлан = ТекСтрока.ПрибытиеПлан;
			ОбластьМакета.Параметры.ПрибытиеФакт = ТекСтрока.ПрибытиеФакт;
			ОбластьМакета.Параметры.Операция     = ТекСтрока.ТипТочкиМаршрута;
			ОбластьМакета.Параметры.ВремяРабот   = ТекСтрока.Стоянка;
			
			ТабДокМаршрут.Вывести(ОбластьМакета);
			
			ПредАдр = мАдр;
			ПредСтрока = ТекСтрока;
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("МаршрутПодвал");
		ОбластьМакета.Параметры.ПеревезеноВес     = ПеревезВес;
		ОбластьМакета.Параметры.ПеревезеноОбъем   = ПеревезОбъем;
		ОбластьМакета.Параметры.ПеревезеноКолМест = ПеревезКолМест;
		ОбластьМакета.Параметры.МаксВес           = МаксВес;
		ОбластьМакета.Параметры.МаксОбъем         = МаксОбъем;
		ОбластьМакета.Параметры.МаксКолМест       = МаксКолМест;
		ТабДокМаршрут.Вывести(ОбластьМакета);
		
		ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
		ТабличныйДокумент.Вывести(ТабДокМаршрут);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

Функция ПечатьМаршрутныйЛистСЗаказами(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_МаршрутныйЛист";
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_МаршрутныйЛист_МаршрутныйЛистСЗаказами";
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатМаршрутныйЛист.ПФ_MXL_МаршрутныйЛистСЗаказами");
		
		// Заголовок
		ОбластьМакетаШапка = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакетаШапка.Параметры.ТекстЗаголовка           = уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ТекущийДокумент, "Маршрутный лист");
		ОбластьМакетаШапка.Параметры.ПредставлениеПеревозчика = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(
			уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Контрагент, ТекущийДокумент.Дата), "ПолноеНаименование");
		ОбластьМакетаШапка.Параметры.ПредставлениеТС          = уатОбщегоНазначения.уатПредставлениеТС(ТекущийДокумент.ТС, ТекущийДокумент.Организация)
			+ " (" + уатОбщегоНазначения.уатПредставлениеМоделиТС(ТекущийДокумент.ТС) + ")";
		ОбластьМакетаШапка.Параметры.Водитель = ТекущийДокумент.Водитель1;
		ОбластьМакетаШапка.Параметры.ПредставлениеВодителя = уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ТекущийДокумент.Водитель1, НачалоДня(ТекущийДокумент.Дата));
		
		Если ТекущийДокумент.Заказы.Количество() Тогда 
			ОбластьМакетаШапка.Параметры.ПлановоеВремяВыезда = ПолучитьВремяОтправленияПлан(ТекущийДокумент);
			
			Если ТекущийДокумент.Заказы.НайтиСтроки(Новый Структура("Выполнен", Истина)).Количество() Тогда 
				ОбластьМакетаШапка.Параметры.ФактическоеВремяВыезда = ТекущийДокумент.ДатаИВремяОтправления;
			КонецЕсли;
			
			ОбластьМакетаШапка.Параметры.ПлановоеВремяВозврата = ПолучитьВремяВозвратаПлан(ТекущийДокумент);
			
			Если ТекущийДокумент.Выполнен Тогда 
				ОбластьМакетаШапка.Параметры.ФактическоеВремяВозврата = ТекущийДокумент.ДатаИВремяВыполнения;
				ОбластьМакетаШапка.Параметры.ДатаВыполнения           = ТекущийДокумент.ДатаИВремяВыполнения;
			КонецЕсли;
			
			ПервыйПункт   = ТекущийДокумент.Заказы[0].Пункт;
			ПерваяСтоянка = 0;
			ПредЗаказ     = Неопределено;
			
			Для Сч = 0 По ТекущийДокумент.Заказы.Количество()-1 Цикл 
				ТекСтрока = ТекущийДокумент.Заказы[Сч];
				Если Не ТекСтрока.Пункт = ПервыйПункт Тогда 
					Прервать;
				КонецЕсли;
				
				Если Не ПредЗаказ = ТекСтрока.ЗаказГрузоотправителя Тогда 
					ПерваяСтоянка = уатЗащищенныеФункцииСервер.СложитьВремя(ПерваяСтоянка, ТекСтрока.Стоянка);
					ПредЗаказ = ТекСтрока.ЗаказГрузоотправителя;
				КонецЕсли;
			КонецЦикла;
			
			мВремяПрибытия = уатЗащищенныеФункцииСервер.СложитьВремя(ТекущийДокумент.ДатаИВремяОтправленияПлан, -ПерваяСтоянка);
		КонецЕсли;
		
		ТабДокМаршрут = Новый ТабличныйДокумент;
		ТабДокЗаказ   = Новый ТабличныйДокумент;
		
		ОбластьМакета = Макет.ПолучитьОбласть("МаршрутШапка");
		ТабДокМаршрут.Вывести(ОбластьМакета);
		
		ОбластьМакетаАдрес = Макет.ПолучитьОбласть("СтрокаАдрес");
		ОбластьМакетаЗаказ = Макет.ПолучитьОбласть("СтрокаЗаказ");
		
		ПредАдр = 0;
		ПредСтрока = Неопределено;
		ИзменилсяЗаказ = Ложь;
		ОбщийПробег = 0; мСтоянка  = 0;
		СчАдресов = 1;  СчЗаказов = 1;
		МаксВес    = 0; МаксОбъем    = 0; МаксКолМест    = 0; МаксЗаказов    = 0;
		ПеревезВес = 0; ПеревезОбъем = 0; ПеревезКолМест = 0; ПеревезЗаказов = 0;
		мВес       = 0; мОбъем       = 0; мКолМест       = 0; 
		ТекВес     = 0; ТекОбъем     = 0; ТекКолМест     = 0; ТекКолЗаказов  = 0;
		
		Для Каждого ТекСтрока ИЗ ТекущийДокумент.Заказы цикл
			
			Если ТекСтрока.Пункт = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ТекСтрока.Пункт) тогда
				Если НЕ ТекСтрока.ЗаказГрузоотправителя.Пустая() И ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка тогда
					мАдр = ТекСтрока.ЗаказГрузоотправителя.АдресОтправления;
				ИначеЕсли НЕ ТекСтрока.ЗаказГрузоотправителя.Пустая() И ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка тогда
					мАдр = ТекСтрока.ЗаказГрузоотправителя.АдресДоставки;
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				мАдр = ТекСтрока.Пункт;
			КонецЕсли;
			
			мАдр = ПолучитьАдресСтрокой(мАдр);
			
			Если мАдр <> ПредАдр тогда
				
				Если ПредАдр <> 0 тогда
					//выводим старую
					ОбластьМакетаАдрес.Параметры.Стоянка      = мСтоянка;
					ТабДокМаршрут.Вывести(ОбластьМакетаАдрес);
					Если ИзменилсяЗаказ = Истина тогда
						ОбластьМакетаЗаказ.Параметры.Вес            = мВес;
						ОбластьМакетаЗаказ.Параметры.Объем          = мОбъем;
						ОбластьМакетаЗаказ.Параметры.КоличествоМест = мКолМест;
						Если СчАдресов >= 2 тогда
							мВремяПрибытия = уатЗащищенныеФункцииСервер.СложитьВремя(мВремяПрибытия,мСтоянка);
							ОбластьМакетаАдрес.Параметры.ПрибытиеПлан = мВремяПрибытия;
						КонецЕсли;
						ТабДокЗаказ.Вывести(ОбластьМакетаЗаказ);
						мВес = 0; мОбъем = 0; мКолМест = 0;
					КонецЕсли;
					ТабДокМаршрут.Вывести(ТабДокЗаказ);
					ТабДокЗаказ = Новый ТабличныйДокумент;
					ИзменилсяЗаказ = Ложь;
				КонецЕсли;
				
				ОбластьМакетаАдрес = Макет.ПолучитьОбласть("СтрокаАдрес");
				ОбластьМакетаАдрес.Параметры.Адрес           = мАдр;
				ОбластьМакетаАдрес.Параметры.РасстояниеВремя = "" + ТекСтрока.Расстояние + " / " + Формат(ТекСтрока.Время,"ЧДЦ=2; ЧРД=:; ЧН=0:00");
				ОбластьМакетаАдрес.Параметры.ПрибытиеПлан    = мВремяПрибытия;
				ОбластьМакетаАдрес.Параметры.ПрибытиеФакт    = ТекСтрока.ПрибытиеФакт;
				ОбластьМакетаАдрес.Параметры.Номер           = СчАдресов;
				мВремяПрибытия = уатЗащищенныеФункцииСервер.СложитьВремя(мВремяПрибытия,ТекСтрока.Время);
				мСтоянка   = 0;
				СчАдресов = СчАдресов + 1;
				СчЗаказов = 1;
				ОбщийПробег = ОбщийПробег  + ТекСтрока.Расстояние;
				
			КонецЕсли;
			
			ПредАдр = мАдр;
			//произвольный пункт 
			Если ТекущийДокумент.ВидОперации = Перечисления.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя И НЕ ЗначениеЗаполнено(ТекСтрока.ЗаказГрузоотправителя) 
				ИЛИ ТекущийДокумент.ВидОперации = Перечисления.уатВидыОперацийМаршрутныйЛист.Произвольный И НЕ ЗначениеЗаполнено(ТекСтрока.Контрагент)
				И НЕ ЗначениеЗаполнено(ТекСтрока.Номенклатура) тогда
				
				мСтоянка   = мСтоянка + ТекСтрока.Стоянка;
				ПредСтрока = ТекСтрока;
				Продолжить;
			КонецЕсли;
			
			Если ПредСтрока = Неопределено
				ИЛИ (ТекущийДокумент.ВидОперации = Перечисления.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя И
					(ПредСтрока.ЗаказГрузоотправителя <> ТекСтрока.ЗаказГрузоотправителя ИЛИ ПредСтрока.ТипТочкиМаршрута <> ТекСтрока.ТипТочкиМаршрута))
				ИЛИ (ТекущийДокумент.ВидОперации = Перечисления.уатВидыОперацийМаршрутныйЛист.Произвольный И ТекСтрока.Контрагент <> ПредСтрока.Контрагент) Тогда
				
				Если ИзменилсяЗаказ = Истина Тогда
					//Выводим
					ОбластьМакетаЗаказ.Параметры.Вес            = мВес;
					ОбластьМакетаЗаказ.Параметры.Объем          = мОбъем;
					ОбластьМакетаЗаказ.Параметры.КоличествоМест = мКолМест;
					ТабДокЗаказ.Вывести(ОбластьМакетаЗаказ);
					ИзменилсяЗаказ = Ложь;
					мВес = 0; мОбъем = 0; мКолМест = 0;
				КонецЕсли;
				мСтоянка = уатЗащищенныеФункцииСервер.СложитьВремя(мСтоянка,ТекСтрока.Стоянка);
				ОбластьМакетаЗаказ = Макет.ПолучитьОбласть("СтрокаЗаказ");
				мКонтр = "";
				Если ТекСтрока.ЗаказГрузоотправителя.Пустая() И ЗначениеЗаполнено(ТекСтрока.Контрагент) тогда
					мКонтр = ТекСтрока.Контрагент;
				Иначе
					Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка тогда
						мКонтр = ТекСтрока.ЗаказГрузоотправителя.Грузоотправитель;
					Иначе
						мКонтр = ТекСтрока.ЗаказГрузоотправителя.Грузополучатель;
					КонецЕсли;
					Если мКонтр = Неопределено ИЛИ НЕ ЗначениеЗаполнено(мКонтр) тогда
						мКонтр = ТекСтрока.ЗаказГрузоотправителя.Контрагент;
					КонецЕсли;
				КонецЕсли;
				
				ОбластьМакетаЗаказ.Параметры.Номер      = "" + (СчАдресов - 1) + "." + СчЗаказов;
				ОбластьМакетаЗаказ.Параметры.Контрагент = мКонтр;
				ОбластьМакетаЗаказ.Параметры.Заказ      = "" + ТекСтрока.ЗаказГрузоотправителя.Номер + " от " + ТекСтрока.ЗаказГрузоотправителя.Дата;
				ОбластьМакетаЗаказ.Параметры.НомерПоУчетуЗаказчика = ТекСтрока.ЗаказГрузоотправителя.НомерПоУчетуЗаказчика;
				ОбластьМакетаЗаказ.Параметры.Операция   = ТекСтрока.ТипТочкиМаршрута;
				
				СчЗаказов = СчЗаказов + 1;
				ИзменилсяЗаказ = Истина;
			КонецЕсли;
			
			мВес        = мВес        + ТекСтрока.ВесБрутто;
			мОбъем      = мОбъем      + ТекСтрока.Объем;
			мКолМест    = мКолМест    + ТекСтрока.КоличествоМест;
			Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка тогда
				ПеревезВес     = ПеревезВес     + ТекСтрока.ВесБрутто;
				ПеревезОбъем   = ПеревезОбъем   + ТекСтрока.Объем;
				ПеревезКолМест = ПеревезКолМест + ТекСтрока.КоличествоМест;
				ТекВес         = ТекВес         + ТекСтрока.ВесБрутто;
				ТекОбъем       = ТекОбъем       + ТекСтрока.Объем;
				ТекКолМест     = ТекКолМест     + ТекСтрока.КоличествоМест;
				ПеревезЗаказов = ПеревезЗаказов + 1;
				ТекКолЗаказов  = ТекКолЗаказов  + 1;
			ИначеЕсли ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка тогда
				ТекВес         = ТекВес         - ТекСтрока.ВесБрутто;
				ТекОбъем       = ТекОбъем       - ТекСтрока.Объем;
				ТекКолМест     = ТекКолМест     - ТекСтрока.КоличествоМест;
				ТекКолЗаказов  = ТекКолЗаказов  - 1;
			КонецЕсли;
			МаксВес     = Макс(МаксВес    ,ТекВес);
			МаксОбъем   = Макс(МаксОбъем  ,ТекОбъем);
			МаксКолМест = Макс(МаксКолМест,ТекКолМест);
			МаксЗаказов = Макс(МаксЗаказов,ТекКолЗаказов);
			
			ПредСтрока = ТекСтрока;
			
		КонецЦикла;
		
		ОбластьМакетаАдрес.Параметры.Стоянка   = мСтоянка;
		ТабДокМаршрут.Вывести(ОбластьМакетаАдрес);
		Если ИзменилсяЗаказ = Истина тогда
			ОбластьМакетаЗаказ.Параметры.Вес            = мВес;
			ОбластьМакетаЗаказ.Параметры.Объем          = мОбъем;
			ОбластьМакетаЗаказ.Параметры.КоличествоМест = мКолМест;
			ТабДокЗаказ.Вывести(ОбластьМакетаЗаказ);
		КонецЕсли;
		ТабДокМаршрут.Вывести(ТабДокЗаказ);
		ОбластьМакета = Макет.ПолучитьОбласть("МаршрутПодвал");
		ОбластьМакета.Параметры.ПеревезеноВес     = ПеревезВес;
		ОбластьМакета.Параметры.ПеревезеноОбъем   = ПеревезОбъем;
		ОбластьМакета.Параметры.ПеревезеноКолМест = ПеревезКолМест;
		ОбластьМакета.Параметры.ПеревезеноЗаказов = ПеревезЗаказов;
		ОбластьМакета.Параметры.МаксВес           = МаксВес;
		ОбластьМакета.Параметры.МаксОбъем         = МаксОбъем;
		ОбластьМакета.Параметры.МаксКолМест       = МаксКолМест;
		ОбластьМакета.Параметры.МаксЗаказов       = МаксЗаказов;
		ТабДокМаршрут.Вывести(ОбластьМакета);
		
		ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
		ТабличныйДокумент.Вывести(ТабДокМаршрут);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

#КонецОбласти

#КонецЕсли