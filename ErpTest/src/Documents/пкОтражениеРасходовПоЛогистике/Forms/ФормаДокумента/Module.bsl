&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

/////////////////////////////////////////////////////////////////////////
// Стандартное (почти)

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

#Область ОбработчикиКомандФормы
// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	//МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	//ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

#КонецОбласти

/////////////////////////////////////////////////////////////////////////
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать

	//ВводНаОсновании.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюСоздатьНаОсновании);
	
	//МенюОтчеты.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюОтчеты);
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ЗаданиеНаПеревозку", ПараметрыЗаписи, Объект.Ссылка);

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
&НаСервере
Функция ПолучитьПредопределенноеЗначениеSalary()
	
	Возврат Справочники.пкСтатьиДоходовРасходовЛогистика.Salary;
	
КонецФункции

&НаСервере
Функция ПолучитьЗначениеРеквизитаНаСервере(тОбъект, ИмяРевизита)
	
	Возврат тОбъект[ИмяРевизита];
	
КонецФункции

&НаСервере
Функция ПолучитьЗначениеПеречисленияНаСервере(ИмяПеречисления, ИмяЗначения)
	
	Возврат Перечисления[ИмяПеречисления][ИмяЗначения];
	
КонецФункции

/////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура ДоходыРасходыПередНачаломИзменения(Элемент, Отказ)
	
	Если Элементы.ДоходыРасходы.ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Элементы.ДоходыРасходы.ТекущиеДанные.СтатьяРасходовДоходов) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Элементы.ДоходыРасходы.ТекущиеДанные.СтатьяРасходовДоходов <> ПолучитьПредопределенноеЗначениеSalary() Тогда
		тСообщение = Новый СообщениеПользователю;
		тСообщение.Текст = НСтр("ru='Можно изменять только сумму у статьи Salary!'");
		тСообщение.Сообщить();
		
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура КомандаЗаполнить(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Подразделение) Тогда
		тСообщение = Новый СообщениеПользователю;
		тСообщение.Текст = НСтр("ru='Не указано Подразделение (Регион). Заполнение не возможно!'");
		тСообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("КомандаЗаполнитьЗавершение", ЭтаФорма, 
		""), 
		НСтр("ru='Документ будет перезаполнен, существующие строки удалены. 
		|Выполнить заполнение?'"), 
			РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьДанные();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанные()
	
	тОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.пкОтражениеРасходовПоЛогистике"));
	тОбъект.ДоходыРасходы.Очистить();
	
//Рарус Владимир Подрезов 16.02.2017
//Теперь только зарплата в этом документе!

	////СписокПодразделений = Новый СписокЗначений;
	////СписокПодразделений.Добавить(тОбъект.Подразделение);
	////
	//////1. Добавим строки по Заявкам на расходование денежных средств по таблице транспортных средств
	////ЗапросРасходыПоДС = Новый Запрос;
	////ЗапросРасходыПоДС.Текст = 
	////"ВЫБРАТЬ
	////|	ЗаявкаНаРасходованиеСредств.пкСтатьяРасходовПоЛогистике.СобственныеАрендованные КАК СпособПеревозки,
	////|	ЗаявкаНаРасходованиеСредств.пкСтатьяРасходовПоЛогистике КАК СтатьяРасходовДоходов,
	////|	ЗНАЧЕНИЕ(Справочник.ТранспортныеСредства.ПустаяСсылка) КАК ТранспортноеСредство,
	////|	СУММА(ЗаявкаНаРасходованиеСредств.пкСуммаБезНДС) КАК Сумма
	////|ИЗ
	////|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеСредств
	////|ГДЕ
	////|	ЗаявкаНаРасходованиеСредств.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	////|	И ЗаявкаНаРасходованиеСредств.Проведен
	////|	И ЗаявкаНаРасходованиеСредств.Подразделение В ИЕРАРХИИ(&Подразделение)
	////|	И ЗаявкаНаРасходованиеСредств.пкСтатьяРасходовПоЛогистике <> ЗНАЧЕНИЕ(Справочник.пкСтатьиДоходовРасходовЛогистика.ПустаяСсылка)
	////|
	////|СГРУППИРОВАТЬ ПО
	////|	ЗаявкаНаРасходованиеСредств.пкСтатьяРасходовПоЛогистике,
	////|	ЗаявкаНаРасходованиеСредств.пкСтатьяРасходовПоЛогистике.СобственныеАрендованные";
	////
	////ЗапросРасходыПоДС.УстановитьПараметр("НачалоПериода", НачалоМесяца(тОбъект.Дата));
	////ЗапросРасходыПоДС.УстановитьПараметр("КонецПериода", КонецМесяца(тОбъект.Дата));
	////ЗапросРасходыПоДС.УстановитьПараметр("Подразделение", СписокПодразделений);
	////
	////РезЗапроса = ЗапросРасходыПоДС.Выполнить().Выгрузить();
	////РезЗапроса.Свернуть("СпособПеревозки, СтатьяРасходовДоходов", "Сумма");
	////Для Каждого текСтрока из РезЗапроса Цикл
	////	
	////	НайденныеСтроки = тОбъект.ДоходыРасходы.НайтиСтроки(Новый Структура("СпособПеревозки,
	////																			|СтатьяРасходовДоходов",
	////																			//|ТранспортноеСредство",
	////																			текСтрока.СпособПеревозки,
	////																			текСтрока.СтатьяРасходовДоходов));//,
	////																			//текСтрока.ТранспортноеСредство));
	////																			
	////	Если НайденныеСтроки.Количество() = 0 Тогда
	////		СтрокаДокумента = тОбъект.ДоходыРасходы.Добавить();
	////		СтрокаДокумента.СпособПеревозки			= текСтрока.СпособПеревозки;
	////		СтрокаДокумента.СтатьяРасходовДоходов	= текСтрока.СтатьяРасходовДоходов;
	////		//СтрокаДокумента.ТранспортноеСредство	= текСтрока.ТранспортноеСредство;
	////	Иначе
	////		СтрокаДокумента = НайденныеСтроки[0];
	////	КонецЕсли;
	////	
	////	СтрокаДокумента.Сумма = СтрокаДокумента.Сумма + текСтрока.Сумма;
	////	
	////КонецЦикла;
	////
	//////2. Дополним таблицу предопределенными статьями
	////
	//////2.1. Добавим строки  по статъе Справочники.пкСтатьиДоходовРасходовЛогистика.Depreciations
	//////ЗапросРасходыПоДС = Новый Запрос;
	//////ЗапросРасходыПоДС.Текст = 
	//////"ВЫБРАТЬ
	//////|	&СпособПеревозки КАК СпособПеревозки,
	//////|	&СтатьяРасходовДоходов КАК СтатьяРасходовДоходов,
	//////|	уатМестонахождениеТССрезПоследних.ТС КАК ТранспортноеСредство,
	//////|	ХозрасчетныйОбороты.СуммаОборотКт КАК Сумма
	//////|ИЗ
	//////|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет = &Счет_02, , , , ) КАК ХозрасчетныйОбороты
	//////|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних(&КонецПериода, ) КАК уатМестонахождениеТССрезПоследних
	//////|		ПО (уатМестонахождениеТССрезПоследних.ТС = ХозрасчетныйОбороты.Субконто1.пкТранспортноеСредство)
	//////|			И (уатМестонахождениеТССрезПоследних.Подразделение В ИЕРАРХИИ (&Подразделение))
	//////|ГДЕ
	//////|	НЕ уатМестонахождениеТССрезПоследних.ТС ЕСТЬ NULL ";
	////
	////ЗапросРасходыПоДС = Новый Запрос;
	////ЗапросРасходыПоДС.Текст = 
	////"ВЫБРАТЬ
	////|	&СпособПеревозки КАК СпособПеревозки,
	////|	&СтатьяРасходовДоходов КАК СтатьяРасходовДоходов,
	////|	ХозрасчетныйОбороты.Субконто1.пкТранспортноеСредство КАК ТранспортноеСредство,
	////|	ХозрасчетныйОбороты.СуммаОборотКт КАК Сумма
	////|ИЗ
	////|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет = &Счет_02, , Подразделение В ИЕРАРХИИ (&Подразделение), , ) КАК ХозрасчетныйОбороты
	////|ГДЕ
	////|	ЕСТЬNULL(ХозрасчетныйОбороты.Субконто1.пкТранспортноеСредство, ЗНАЧЕНИЕ(Справочник.ТранспортныеСредства.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ТранспортныеСредства.ПустаяСсылка)";
	////
	////ЗапросРасходыПоДС.УстановитьПараметр("НачалоПериода", НачалоМесяца(тОбъект.Дата));
	////ЗапросРасходыПоДС.УстановитьПараметр("КонецПериода", КонецМесяца(тОбъект.Дата));
	////ЗапросРасходыПоДС.УстановитьПараметр("СпособПеревозки", Справочники.пкСтатьиДоходовРасходовЛогистика.Depreciations.СобственныеАрендованные);
	////ЗапросРасходыПоДС.УстановитьПараметр("СтатьяРасходовДоходов", Справочники.пкСтатьиДоходовРасходовЛогистика.Depreciations);
	////ЗапросРасходыПоДС.УстановитьПараметр("Подразделение", СписокПодразделений);
	////ЗапросРасходыПоДС.УстановитьПараметр("Счет_02", ПланыСчетов.Хозрасчетный.АмортизацияОС_01);
	////
	////РезЗапроса = ЗапросРасходыПоДС.Выполнить().Выгрузить();
	////РезЗапроса.Свернуть("СпособПеревозки, СтатьяРасходовДоходов", "Сумма");
	////Для Каждого текСтрока из РезЗапроса Цикл
	////	
	////	НайденныеСтроки = тОбъект.ДоходыРасходы.НайтиСтроки(Новый Структура("СпособПеревозки,
	////																			|СтатьяРасходовДоходов",
	////																			//|ТранспортноеСредство",
	////																			текСтрока.СпособПеревозки,
	////																			текСтрока.СтатьяРасходовДоходов));//,
	////																			//текСтрока.ТранспортноеСредство));
	////																			
	////	Если НайденныеСтроки.Количество() = 0 Тогда
	////		СтрокаДокумента = тОбъект.ДоходыРасходы.Добавить();
	////		СтрокаДокумента.СпособПеревозки			= текСтрока.СпособПеревозки;
	////		СтрокаДокумента.СтатьяРасходовДоходов	= текСтрока.СтатьяРасходовДоходов;
	////		//СтрокаДокумента.ТранспортноеСредство	= текСтрока.ТранспортноеСредство;
	////	Иначе
	////		СтрокаДокумента = НайденныеСтроки[0];
	////	КонецЕсли;
	////	
	////	СтрокаДокумента.Сумма = СтрокаДокумента.Сумма + текСтрока.Сумма;
	////	
	////КонецЦикла;
	//////Если РезЗапроса.Количество() = 0 Тогда
	//////	НовСтрока                       = тОбъект.ДоходыРасходы.Добавить();
	//////	НовСтрока.СпособПеревозки       = Перечисления.пкСпособыПеревозки.Собственные;
	//////	НовСтрока.СтатьяРасходовДоходов = Справочники.пкСтатьиДоходовРасходовЛогистика.Depreciations;
	//////КонецЕсли;
	////
	//////2.2. Добавим строки  по статъе Справочники.пкСтатьиДоходовРасходовЛогистика.Fuel
	////ЗапросРасходыПоДС = Новый Запрос;
	////ЗапросРасходыПоДС.Текст = 
	////"ВЫБРАТЬ
	////|	&СпособПеревозки КАК СпособПеревозки,
	////|	&СтатьяРасходовДоходов КАК СтатьяРасходовДоходов,
	////|	уатОборотыПоЗаправкамГСМОбороты.ТС КАК ТранспортноеСредство,
	////|	СУММА(уатОборотыПоЗаправкамГСМОбороты.СтоимостьУпрОборот) КАК Сумма
	////|ИЗ
	////|	РегистрНакопления.уатОборотыПоЗаправкамГСМ.Обороты(&НачалоПериода, &КонецПериода, , ) КАК уатОборотыПоЗаправкамГСМОбороты
	////|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних(&КонецПериода, ) КАК уатМестонахождениеТССрезПоследних
	////|		ПО (уатМестонахождениеТССрезПоследних.ТС = уатОборотыПоЗаправкамГСМОбороты.ТС)
	////|			И (уатМестонахождениеТССрезПоследних.Подразделение В ИЕРАРХИИ (&Подразделение))
	////|ГДЕ
	////|	НЕ уатМестонахождениеТССрезПоследних.ТС ЕСТЬ NULL
	////|
	////|СГРУППИРОВАТЬ ПО
	////|	уатОборотыПоЗаправкамГСМОбороты.ТС";
	////
	////ЗапросРасходыПоДС.УстановитьПараметр("НачалоПериода", НачалоМесяца(тОбъект.Дата));
	////ЗапросРасходыПоДС.УстановитьПараметр("КонецПериода", КонецМесяца(тОбъект.Дата));
	////ЗапросРасходыПоДС.УстановитьПараметр("СпособПеревозки", Справочники.пкСтатьиДоходовРасходовЛогистика.Fuel.СобственныеАрендованные);
	////ЗапросРасходыПоДС.УстановитьПараметр("СтатьяРасходовДоходов", Справочники.пкСтатьиДоходовРасходовЛогистика.Fuel);
	////ЗапросРасходыПоДС.УстановитьПараметр("Подразделение", СписокПодразделений);
	////
	////РезЗапроса = ЗапросРасходыПоДС.Выполнить().Выгрузить();
	////РезЗапроса.Свернуть("СпособПеревозки, СтатьяРасходовДоходов", "Сумма");
	////Для Каждого текСтрока из РезЗапроса Цикл
	////	
	////	НайденныеСтроки = тОбъект.ДоходыРасходы.НайтиСтроки(Новый Структура("СпособПеревозки,
	////																			|СтатьяРасходовДоходов",
	////																			//|ТранспортноеСредство",
	////																			текСтрока.СпособПеревозки,
	////																			текСтрока.СтатьяРасходовДоходов));//,
	////																			//текСтрока.ТранспортноеСредство));
	////																			
	////	Если НайденныеСтроки.Количество() = 0 Тогда
	////		СтрокаДокумента = тОбъект.ДоходыРасходы.Добавить();
	////		СтрокаДокумента.СпособПеревозки			= текСтрока.СпособПеревозки;
	////		СтрокаДокумента.СтатьяРасходовДоходов	= текСтрока.СтатьяРасходовДоходов;
	////		//СтрокаДокумента.ТранспортноеСредство	= текСтрока.ТранспортноеСредство;
	////	Иначе
	////		СтрокаДокумента = НайденныеСтроки[0];
	////	КонецЕсли;
	////	
	////	СтрокаДокумента.Сумма = СтрокаДокумента.Сумма + текСтрока.Сумма;
	////	
	////КонецЦикла;
	//////Если РезЗапроса.Количество() = 0 Тогда
	//////	НовСтрока                       = тОбъект.ДоходыРасходы.Добавить();
	//////	НовСтрока.СпособПеревозки       = Перечисления.пкСпособыПеревозки.Собственные;
	//////	НовСтрока.СтатьяРасходовДоходов = Справочники.пкСтатьиДоходовРасходовЛогистика.Fuel;
	//////КонецЕсли;
	////
	//////////2.3. Добавим строки по статъе Справочники.пкСтатьиДоходовРасходовЛогистика.OperatingExpenses
	////////ЗапросРасходыПоДС = Новый Запрос;
	////////ЗапросРасходыПоДС.Текст = 
	////////"ВЫБРАТЬ
	////////|	&СпособПеревозки КАК СпособПеревозки,
	////////|	&СтатьяРасходовДоходов КАК СтатьяРасходовДоходов,
	////////|	пкРемонтТСУДилераОбороты.ТС КАК ТранспортноеСредство,
	////////|	СУММА(пкРемонтТСУДилераОбороты.СуммаОборот) КАК Сумма
	////////|ИЗ
	////////|	РегистрНакопления.пкРемонтТСУДилера.Обороты(&НачалоПериода, &КонецПериода, , ) КАК пкРемонтТСУДилераОбороты
	////////|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних(&КонецПериода, ) КАК уатМестонахождениеТССрезПоследних
	////////|		ПО (уатМестонахождениеТССрезПоследних.ТС = пкРемонтТСУДилераОбороты.ТС)
	////////|			И (уатМестонахождениеТССрезПоследних.Подразделение В ИЕРАРХИИ (&Подразделение))
	////////|ГДЕ
	////////|	НЕ уатМестонахождениеТССрезПоследних.ТС ЕСТЬ NULL 
	////////|
	////////|СГРУППИРОВАТЬ ПО
	////////|	пкРемонтТСУДилераОбороты.ТС";
	////////
	////////ЗапросРасходыПоДС.УстановитьПараметр("НачалоПериода", НачалоМесяца(тОбъект.Дата));
	////////ЗапросРасходыПоДС.УстановитьПараметр("КонецПериода", КонецМесяца(тОбъект.Дата));
	////////ЗапросРасходыПоДС.УстановитьПараметр("СпособПеревозки", Справочники.пкСтатьиДоходовРасходовЛогистика.OperatingExpenses.СобственныеАрендованные);
	////////ЗапросРасходыПоДС.УстановитьПараметр("СтатьяРасходовДоходов", Справочники.пкСтатьиДоходовРасходовЛогистика.OperatingExpenses);
	////////ЗапросРасходыПоДС.УстановитьПараметр("Подразделение", СписокПодразделений);
	////////
	////////РезЗапроса = ЗапросРасходыПоДС.Выполнить().Выгрузить();
	////////РезЗапроса.Свернуть("СпособПеревозки, СтатьяРасходовДоходов", "Сумма");
	////////Для Каждого текСтрока из РезЗапроса Цикл
	////////	
	////////	НайденныеСтроки = тОбъект.ДоходыРасходы.НайтиСтроки(Новый Структура("СпособПеревозки,
	////////																			|СтатьяРасходовДоходов",
	////////																			//|ТранспортноеСредство",
	////////																			текСтрока.СпособПеревозки,
	////////																			текСтрока.СтатьяРасходовДоходов));//,
	////////																			//текСтрока.ТранспортноеСредство));
	////////																			
	////////	Если НайденныеСтроки.Количество() = 0 Тогда
	////////		СтрокаДокумента = тОбъект.ДоходыРасходы.Добавить();
	////////		СтрокаДокумента.СпособПеревозки			= текСтрока.СпособПеревозки;
	////////		СтрокаДокумента.СтатьяРасходовДоходов	= текСтрока.СтатьяРасходовДоходов;
	////////		//СтрокаДокумента.ТранспортноеСредство	= текСтрока.ТранспортноеСредство;
	////////	Иначе
	////////		СтрокаДокумента = НайденныеСтроки[0];
	////////	КонецЕсли;
	////////	
	////////	СтрокаДокумента.Сумма = СтрокаДокумента.Сумма + текСтрока.Сумма;
	////////	
	////////КонецЦикла;
	//////////Если РезЗапроса.Количество() = 0 Тогда
	//////////	НовСтрока                       = тОбъект.ДоходыРасходы.Добавить();
	//////////	НовСтрока.СпособПеревозки       = Перечисления.пкСпособыПеревозки.Собственные;
	//////////	НовСтрока.СтатьяРасходовДоходов = Справочники.пкСтатьиДоходовРасходовЛогистика.OperatingExpenses;
	//////////КонецЕсли;
	////
	//////2.4. Добавим строки по статъе Справочники.пкСтатьиДоходовРасходовЛогистика.OwnService
	////ЗапросРасходыПоДС = Новый Запрос;
	////ЗапросРасходыПоДС.Текст = 
	////"ВЫБРАТЬ
	////|	&СпособПеревозки КАК СпособПеревозки,
	////|	&СтатьяРасходовДоходов КАК СтатьяРасходовДоходов,
	////|	ПрочиеРасходыОбороты.пкТранспортноеСредство КАК ТранспортноеСредство,
	////|	СУММА(ПрочиеРасходыОбороты.СуммаРеглОборот) КАК Сумма
	////|ИЗ
	////|	РегистрНакопления.ПрочиеРасходы.Обороты(&НачалоПериода, &КонецПериода, , ) КАК ПрочиеРасходыОбороты
	////|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних(&КонецПериода, ) КАК уатМестонахождениеТССрезПоследних
	////|		ПО (уатМестонахождениеТССрезПоследних.ТС = ПрочиеРасходыОбороты.пкТранспортноеСредство)
	////|			И (уатМестонахождениеТССрезПоследних.Подразделение В ИЕРАРХИИ (&Подразделение))
	////|ГДЕ
	////|	НЕ уатМестонахождениеТССрезПоследних.ТС ЕСТЬ NULL 
	////|
	////|СГРУППИРОВАТЬ ПО
	////|	ПрочиеРасходыОбороты.пкТранспортноеСредство";
	////
	////ЗапросРасходыПоДС.УстановитьПараметр("НачалоПериода", НачалоМесяца(тОбъект.Дата));
	////ЗапросРасходыПоДС.УстановитьПараметр("КонецПериода", КонецМесяца(тОбъект.Дата));
	////ЗапросРасходыПоДС.УстановитьПараметр("СпособПеревозки", Справочники.пкСтатьиДоходовРасходовЛогистика.OwnService.СобственныеАрендованные);
	////ЗапросРасходыПоДС.УстановитьПараметр("СтатьяРасходовДоходов", Справочники.пкСтатьиДоходовРасходовЛогистика.OwnService);
	////ЗапросРасходыПоДС.УстановитьПараметр("Подразделение", СписокПодразделений);
	////
	////РезЗапроса = ЗапросРасходыПоДС.Выполнить().Выгрузить();
	////РезЗапроса.Свернуть("СпособПеревозки, СтатьяРасходовДоходов", "Сумма");
	////Для Каждого текСтрока из РезЗапроса Цикл
	////	
	////	НайденныеСтроки = тОбъект.ДоходыРасходы.НайтиСтроки(Новый Структура("СпособПеревозки,
	////																			|СтатьяРасходовДоходов",
	////																			//|ТранспортноеСредство",
	////																			текСтрока.СпособПеревозки,
	////																			текСтрока.СтатьяРасходовДоходов));//,
	////																			//текСтрока.ТранспортноеСредство));
	////																			
	////	Если НайденныеСтроки.Количество() = 0 Тогда
	////		СтрокаДокумента = тОбъект.ДоходыРасходы.Добавить();
	////		СтрокаДокумента.СпособПеревозки			= текСтрока.СпособПеревозки;
	////		СтрокаДокумента.СтатьяРасходовДоходов	= текСтрока.СтатьяРасходовДоходов;
	////		//СтрокаДокумента.ТранспортноеСредство	= текСтрока.ТранспортноеСредство;
	////	Иначе
	////		СтрокаДокумента = НайденныеСтроки[0];
	////	КонецЕсли;
	////	
	////	СтрокаДокумента.Сумма = СтрокаДокумента.Сумма + текСтрока.Сумма;
	////	
	////КонецЦикла;
	//////Если РезЗапроса.Количество() = 0 Тогда
	//////	НовСтрока                       = тОбъект.ДоходыРасходы.Добавить();
	//////	НовСтрока.СпособПеревозки       = Перечисления.пкСпособыПеревозки.Собственные;
	//////	НовСтрока.СтатьяРасходовДоходов = Справочники.пкСтатьиДоходовРасходовЛогистика.OwnService;
	//////КонецЕсли;
//Рарус Владимир Подрезов Конец

	//3. Добавим пустые строки по статьям, данные по которым негде брать
	НовСтрока                       = тОбъект.ДоходыРасходы.Добавить();
	НовСтрока.СпособПеревозки       = Перечисления.пкСпособыПеревозки.Собственные;
	НовСтрока.СтатьяРасходовДоходов = Справочники.пкСтатьиДоходовРасходовЛогистика.Salary;

	//Отразим результаты
	тОбъект.ДоходыРасходы.Сортировать("СтатьяРасходовДоходов, ТранспортноеСредство");
	ЗначениеВДанныеФормы(тОбъект, Объект);
	
КонецПроцедуры

