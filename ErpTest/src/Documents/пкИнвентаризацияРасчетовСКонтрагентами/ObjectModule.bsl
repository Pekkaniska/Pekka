#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

///////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	Если ЭтоНовый() И НЕ ЗначениеЗаполнено(Номер) Тогда
		УстановитьНовыйНомер();
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ПроверяемыеРеквизиты.Добавить("Организация");
	//ПроверяемыеРеквизиты.Добавить("Подразделение");
	//ПроверяемыеРеквизиты.Добавить("ТопливныеКарты.Сотрудник");
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СформироватьСписокРегистровДляКонтроля();
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	РегистрыСведений.пкВыданныеТопливныеКарты.СформироватьЗаписи(Отказ, РежимПроведения, ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	СформироватьСписокРегистровДляКонтроля();
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Организация		= ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Подразделение	= ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Пользователи.ТекущийПользователь());
	Ответственный	= Пользователи.ТекущийПользователь();
	Автор 			= Пользователи.ТекущийПользователь();
	
	Если СчетаРасчетов.Количество()=0 Тогда
		МакетСчетов=ПолучитьМакет("СчетаПоУмолчанию");
		СтрокаМакета=1;
		КодСчета=МакетСчетов.Область(СтрокаМакета,1).Текст;
		Пока КодСчета<>"" Цикл
			СчетНайденный=ПланыСчетов.Хозрасчетный.НайтиПоКоду(КодСчета);	
			Если Не (СчетНайденный=ПланыСчетов.Хозрасчетный.ПустаяСсылка() или СчетНайденный=Неопределено) Тогда
				НоваяСтрокаСчета=СчетаРасчетов.Добавить();	
				НоваяСтрокаСчета.СчетРасчета=СчетНайденный;
				НоваяСтрокаСчета.НаименованиеСчета=СчетНайденный.Наименование;
			КонецЕсли; 
		    СтрокаМакета=СтрокаМакета+1;
			КодСчета=МакетСчетов.Область(СтрокаМакета,1).Текст;
		КонецЦикла;   
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура СформироватьСписокРегистровДляКонтроля()
	
	Массив = Новый Массив;
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

Функция ПолучитьИНВ_17() Экспорт
	
	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаПодписей = Новый Структура();
	ЗаголовокРазделаПодписей.Вставить("ПредседательКомиссии", "Председатель комиссии");
	ЗаголовокРазделаПодписей.Вставить("ЧленыКомиссии",        "Члены комиссии");
	
	//	Данные для шапки акта
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", 	Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Инвентаризация.Дата КАК Дата,
	|	Инвентаризация.Номер КАК Номер,
	|	Инвентаризация.Организация КАК Организация,
	|	Инвентаризация.ДатаНачалаИнвентаризации КАК ДатаНачалаИнвентаризации,
	|	Инвентаризация.ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации,
	|	Инвентаризация.Основание КАК ДокументОснованиеВид,
	|	Инвентаризация.ДатаДокументаОснования КАК ДокументОснованиеДата,
	|	Инвентаризация.НомерДокументаОснования КАК ДокументОснованиеНомер,
	|	Инвентаризация.Председатель КАК Председатель,
	|	Инвентаризация.ИнвентаризационнаяКомиссия.(
	|		ЧленКомиссии КАК ФизЛицо
	|		, Должность КАК Должность
	//|		, Председатель КАК Председатель
	|	) КАК ИнвентаризационнаяКомиссия
	|ИЗ
	|	Документ.пкИнвентаризацияРасчетовСКонтрагентами КАК Инвентаризация
	|ГДЕ
	|	Инвентаризация.Ссылка = &Ссылка
	|	
	|УПОРЯДОЧИТЬ ПО
	|	Инвентаризация.ИнвентаризационнаяКомиссия.НомерСтроки";
	
	Выборка= Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	//	Данные строк таблиц
	ЗапросКонтрагенты = Новый Запрос;
	ЗапросКонтрагенты.УстановитьПараметр("Ссылка", Ссылка);
	
	ЗапросКонтрагенты.Текст =       
	"ВЫБРАТЬ
	|	""Дебиторская"" КАК ВидЗадолженности,
	|	ДебиторскаяЗадолженность.Контрагент КАК Контрагент,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДебиторскаяЗадолженность.Контрагент.НаименованиеПолное КАК СТРОКА(200)), """") КАК КонтрагентНаименованиеПолное,
	|	ЕСТЬNULL(ДебиторскаяЗадолженность.Контрагент.Наименование, """") КАК КонтрагентНаименование,
	|	ДебиторскаяЗадолженность.СчетРасчетов КАК СчетРасчетов,
	|	ПРЕДСТАВЛЕНИЕ(ДебиторскаяЗадолженность.СчетРасчетов) КАК СчетРасчетовПредставление,
	|	СУММА(ДебиторскаяЗадолженность.Подтверждено + ДебиторскаяЗадолженность.НеПодтверждено) КАК Всего,
	|	СУММА(ДебиторскаяЗадолженность.Подтверждено) КАК Подтверждено,
	|	СУММА(ДебиторскаяЗадолженность.НеПодтверждено) КАК НеПодтверждено,
	|	СУММА(ДебиторскаяЗадолженность.ИстекСрокДавности) КАК ИстекСрокДавности
	|ИЗ
	|	Документ.пкИнвентаризацияРасчетовСКонтрагентами.ДебиторскаяЗадолженность КАК ДебиторскаяЗадолженность
	|ГДЕ
	|	ДебиторскаяЗадолженность.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДебиторскаяЗадолженность.Контрагент,
	|	ПОДСТРОКА(ДебиторскаяЗадолженность.Контрагент.НаименованиеПолное, 1, 200),
	|	ДебиторскаяЗадолженность.СчетРасчетов,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДебиторскаяЗадолженность.Контрагент.НаименованиеПолное КАК СТРОКА(200)), """"),
	|	ЕСТЬNULL(ДебиторскаяЗадолженность.Контрагент.Наименование, """")
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Кредиторская"",
	|	пкИнвентаризацияРасчетовСКонтрагентамиКредиторскаяЗадолженность.Контрагент,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(пкИнвентаризацияРасчетовСКонтрагентамиКредиторскаяЗадолженность.Контрагент.НаименованиеПолное КАК СТРОКА(200)), """"),
	|	ЕСТЬNULL(пкИнвентаризацияРасчетовСКонтрагентамиКредиторскаяЗадолженность.Контрагент.Наименование, """"),
	|	пкИнвентаризацияРасчетовСКонтрагентамиКредиторскаяЗадолженность.СчетРасчетов,
	|	ПРЕДСТАВЛЕНИЕ(пкИнвентаризацияРасчетовСКонтрагентамиКредиторскаяЗадолженность.СчетРасчетов),
	|	СУММА(пкИнвентаризацияРасчетовСКонтрагентамиКредиторскаяЗадолженность.Подтверждено + пкИнвентаризацияРасчетовСКонтрагентамиКредиторскаяЗадолженность.НеПодтверждено),
	|	СУММА(пкИнвентаризацияРасчетовСКонтрагентамиКредиторскаяЗадолженность.Подтверждено),
	|	СУММА(пкИнвентаризацияРасчетовСКонтрагентамиКредиторскаяЗадолженность.НеПодтверждено),
	|	СУММА(пкИнвентаризацияРасчетовСКонтрагентамиКредиторскаяЗадолженность.ИстекСрокДавности)
	|ИЗ
	|	Документ.пкИнвентаризацияРасчетовСКонтрагентами.КредиторскаяЗадолженность КАК пкИнвентаризацияРасчетовСКонтрагентамиКредиторскаяЗадолженность
	|ГДЕ
	|	пкИнвентаризацияРасчетовСКонтрагентамиКредиторскаяЗадолженность.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	пкИнвентаризацияРасчетовСКонтрагентамиКредиторскаяЗадолженность.Контрагент,
	|	ПОДСТРОКА(пкИнвентаризацияРасчетовСКонтрагентамиКредиторскаяЗадолженность.Контрагент.НаименованиеПолное, 1, 200),
	|	пкИнвентаризацияРасчетовСКонтрагентамиКредиторскаяЗадолженность.СчетРасчетов,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(пкИнвентаризацияРасчетовСКонтрагентамиКредиторскаяЗадолженность.Контрагент.НаименованиеПолное КАК СТРОКА(200)), """"),
	|	ЕСТЬNULL(пкИнвентаризацияРасчетовСКонтрагентамиКредиторскаяЗадолженность.Контрагент.Наименование, """")
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидЗадолженности,
	|	КонтрагентНаименование
	|ИТОГИ
	|	СУММА(Всего),
	|	СУММА(Подтверждено),
	|	СУММА(НеПодтверждено),
	|	СУММА(ИстекСрокДавности)
	|ПО
	|	ВидЗадолженности";
	
	РезультатКонтрагенты = ЗапросКонтрагенты.Выполнить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияРасчетов_ИНВ17";
	
	Макет       = ПолучитьМакет("ИНВ17");
	
	// Формирование шапки
	Шапка = Макет.ПолучитьОбласть("Шапка");
	Шапка.Параметры.Заполнить(Выборка);
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    			= Выборка.Организация;
	СтруктураПараметров.НаправлениеДеятельности	= Неопределено;
	БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);  
	СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Выборка.Организация,      Выборка.Дата,, БанковскийСчетОрганизации);
	Шапка.Параметры.Организация          = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации);
	Шапка.Параметры.ОрганизацияКодПоОКПО = СведенияОбОрганизации.КодПоОКПО;
	
	Шапка.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Выборка.Номер);
	Шапка.Параметры.ДеньДокумента  = День(Выборка.Дата);
	Шапка.Параметры.МесяцДокумента = Сред(Формат(Выборка.Дата, "ДЛФ=ДД"), 
													 Найти(Формат(Выборка.Дата, "ДЛФ=ДД"), " "));
													 
	ТабДокумент.Вывести(Шапка);

	// Формирование строк дебиторской задолженности
	ПодвалТаблицыДт = Макет.ПолучитьОбласть("ПодвалТаблицыДт");
	СтрокаТаблицыДт = Макет.ПолучитьОбласть("СтрокаТаблицыДт");
	
	ВыборкаПоВидуЗадолженности = РезультатКонтрагенты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ВыборкаПоВидуЗадолженности.НайтиСледующий("Дебиторская", "ВидЗадолженности") Тогда

		ПодвалТаблицыДт.Параметры.Заполнить(ВыборкаПоВидуЗадолженности);
		
		ВыборкаПоКонтрагенту = ВыборкаПоВидуЗадолженности.Выбрать();
		Пока ВыборкаПоКонтрагенту.Следующий() Цикл
			СтрокаТаблицыДт.Параметры.Заполнить(ВыборкаПоКонтрагенту);
			СтрокаТаблицыДт.Параметры.КонтрагентПредставление = ?(ПустаяСтрока(ВыборкаПоКонтрагенту.КонтрагентНаименованиеПолное),
				ВыборкаПоКонтрагенту.КонтрагентНаименование, ВыборкаПоКонтрагенту.КонтрагентНаименованиеПолное);
			ТабДокумент.Вывести(СтрокаТаблицыДт);
		КонецЦикла;
		
	КонецЕсли;
	
	ТабДокумент.Вывести(ПодвалТаблицыДт);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	// Шапка оборотной стороны Акта
	ШапкаОборот = Макет.ПолучитьОбласть("ШапкаОборот");
	ТабДокумент.Вывести(ШапкаОборот);
	
	// Формирование строк кредиторской задолженности
	ПодвалТаблицыКт = Макет.ПолучитьОбласть("ПодвалТаблицыКт");
	СтрокаТаблицыКт = Макет.ПолучитьОбласть("СтрокаТаблицыКт");
			
	ВыборкаПоВидуЗадолженности.Сбросить();
	Если ВыборкаПоВидуЗадолженности.НайтиСледующий("Кредиторская", "ВидЗадолженности") Тогда
		
		ПодвалТаблицыКт.Параметры.Заполнить(ВыборкаПоВидуЗадолженности);
		
		ВыборкаПоКонтрагенту = ВыборкаПоВидуЗадолженности.Выбрать();
		Пока ВыборкаПоКонтрагенту.Следующий() Цикл
			СтрокаТаблицыКт.Параметры.Заполнить(ВыборкаПоКонтрагенту);
			СтрокаТаблицыКт.Параметры.КонтрагентПредставление = ?(ПустаяСтрока(ВыборкаПоКонтрагенту.КонтрагентНаименованиеПолное),
				ВыборкаПоКонтрагенту.КонтрагентНаименование, ВыборкаПоКонтрагенту.КонтрагентНаименованиеПолное);
			ТабДокумент.Вывести(СтрокаТаблицыКт);
		КонецЦикла;
		
	КонецЕсли;
	
	ТабДокумент.Вывести(ПодвалТаблицыКт);
	
	// Подвал печатной формы
	Подвал = Макет.ПолучитьОбласть("Подвал");
	ТабДокумент.Вывести(Подвал);
	
	Подпись = Макет.ПолучитьОбласть("Подпись");
	ТаблицаИнвентаризационнаяКомиссия = Выборка.ИнвентаризационнаяКомиссия.Выгрузить();
	
	// Выведем подпись председателя инвентаризационной комиссии
	ПредседательКомиссии = Председатель;
	
	Если НЕ (ПредседательКомиссии = Неопределено или ПредседательКомиссии = Справочники.ФизическиеЛица.ПустаяСсылка()) Тогда
		
		ДанныеПредседателя = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Председатель, Выборка.Дата);
		//ДанныеПредседателя = ОбщегоНазначения.ДанныеФизЛица(Выборка.Организация, ПредседательКомиссии.ФизЛицо, Выборка.Дата);
			
		Подпись.Параметры.ЗаголовокРазделаПодписей = ЗаголовокРазделаПодписей.ПредседательКомиссии;
		Подпись.Параметры.Должность                = Должность;
		Подпись.Параметры.РасшифровкаПодписи       = ПредседательКомиссии;
		
	Иначе
		
		Подпись.Параметры.ЗаголовокРазделаПодписей = ЗаголовокРазделаПодписей.ПредседательКомиссии;
		Подпись.Параметры.Должность                = "";
		Подпись.Параметры.РасшифровкаПодписи       = "";
		
	КонецЕсли;
		
	ТабДокумент.Вывести(Подпись);
	
	// Выведем подписи членов комиссии
	ВыводитьЗаголовок = Истина;
	
	// Сформируем список членов комиссии
	СписокЧленовКомиссии = Новый Массив();
	
	Для Каждого Строка Из ТаблицаИнвентаризационнаяКомиссия Цикл
		//Если НЕ Строка.Председатель Тогда
			СписокЧленовКомиссии.Добавить(Строка.ФизЛицо);
		//КонецЕсли;
	КонецЦикла;
	
	//МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	////новое ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);	
	////ДанныеЧленовКомиссии = ОбщегоНазначения.ДанныеФизЛиц(Выборка.Организация, СписокЧленовКомиссии, Выборка.Дата);
	ДанныеЧленовКомиссии=СписокЧленовКомиссии;
	
	
	// Сначала выведем членов комиссии из выборки
	Для Каждого ЧленКомиссии Из ТаблицаИнвентаризационнаяКомиссия Цикл
		
		Если НЕ ТабДокумент.ПроверитьВывод(Подпись) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
		
		КонецЕсли;
		
		Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, 
		                                               ЗаголовокРазделаПодписей.ЧленыКомиссии,
													   "");
		Подпись.Параметры.Должность                = ЧленКомиссии.Должность;
		Подпись.Параметры.РасшифровкаПодписи       = ЧленКомиссии.ФизЛицо;
		
		ТабДокумент.Вывести(Подпись);
		
		ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
		
	КонецЦикла;
	
	// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
	// подписей, как в форме, утвержденной Госкомстатом)
	Если ДанныеЧленовКомиссии.Количество() < 3 Тогда
		Если НЕ ТабДокумент.ПроверитьВывод(Подпись) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
		
		КонецЕсли;
		
		Для Итератор = (ДанныеЧленовКомиссии.Количество() + 1) По 3 Цикл
			
			Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, 
			                                               ЗаголовокРазделаПодписей.ЧленыКомиссии,
														   "");
			Подпись.Параметры.Должность                = "";
			Подпись.Параметры.РасшифровкаПодписи       = "";
			
			ТабДокумент.Вывести(Подпись);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции	

Функция ПолучитьИНВ_22() Экспорт

	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаПодписей = Новый Структура();
	ЗаголовокРазделаПодписей.Вставить("ПредседательКомиссии", "Председатель комиссии");
	ЗаголовокРазделаПодписей.Вставить("ЧленыКомиссии",        "Члены комиссии");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Инвентаризация.Дата КАК Дата,
	|	Инвентаризация.Номер КАК Номер,
	|	Инвентаризация.Дата КАК ДатаДокумента,
	|	Инвентаризация.Номер КАК НомерДокумента,
	|	Инвентаризация.Организация КАК Организация,
	|	Инвентаризация.ДатаНачалаИнвентаризации КАК ДатаНачалаИнвентаризации,
	|	Инвентаризация.ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации,
	|	Инвентаризация.Основание КАК ДокументОснованиеВид,
	|	Инвентаризация.ДатаДокументаОснования КАК ДокументОснованиеДата,
	|	Инвентаризация.НомерДокументаОснования КАК ДокументОснованиеНомер,
	|	Инвентаризация.Председатель КАК Председатель,
	|	Инвентаризация.ПричинаПроведения КАК ПричинаПроведенияИнвентаризации,
	|	Инвентаризация.ИнвентаризационнаяКомиссия.(
	|		ЧленКомиссии КАК ФизЛицо
	|		, Должность КАК Должность
	//|		, Председатель КАК Председатель
	|	) КАК ИнвентаризационнаяКомиссия
	|ИЗ
	|	Документ.пкИнвентаризацияРасчетовСКонтрагентами КАК Инвентаризация
	|ГДЕ
	|	Инвентаризация.Ссылка = &Ссылка
	|	
	|УПОРЯДОЧИТЬ ПО
	|	Инвентаризация.ИнвентаризационнаяКомиссия.НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ТаблицаИнвентаризационнаяКомиссия = Выборка.ИнвентаризационнаяКомиссия.Выгрузить();
	
	Макет = ПолучитьМакет("ИНВ22");
	
	// Получаем области макета для вывода в табличный документ
	Шапка   = Макет.ПолучитьОбласть("Шапка");
	Подпись = Макет.ПолучитьОбласть("Подпись");
	Подвал  = Макет.ПолучитьОбласть("Подвал");
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияРасчетов_ИНВ22";

	// Выведем шапку документа
	Шапка.Параметры.Заполнить(Выборка);
	Шапка.Параметры.НаименованиеИмуществаОбязательств = "расчетов с покупателями, поставщиками и прочими дебиторами и кредиторами";
	
	//СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Выборка.Организация, Выборка.Дата);
	//Шапка.Параметры.Организация          = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации);
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    			= Выборка.Организация;
	СтруктураПараметров.НаправлениеДеятельности	= Неопределено;
	БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);  
	СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Выборка.Организация,      Выборка.Дата,, БанковскийСчетОрганизации);
	Шапка.Параметры.Организация          = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации);
	Шапка.Параметры.ОрганизацияКодПоОКПО = СведенияОбОрганизации.КодПоОКПО;
	
	Шапка.Параметры.НомерДокумента=ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Выборка.Номер);
	
	ТабДокумент.Вывести(Шапка);
	
	// Выведем подпись председателя инвентаризационной комиссии
	//ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
	ПредседательКомиссии = Председатель;
	
	Если НЕ (ПредседательКомиссии = Неопределено) Тогда
		
		//ДанныеПредседателя = ОбщегоНазначения.ДанныеФизЛица(Выборка.Организация, ПредседательКомиссии.ФизЛицо, Выборка.Дата);
		ДанныеПредседателя = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ПредседательКомиссии, Выборка.Дата);
			
		Подпись.Параметры.ЗаголовокРазделаПодписей = ЗаголовокРазделаПодписей.ПредседательКомиссии;
		//Подпись.Параметры.Должность                = ДанныеПредседателя.Должность;
		//Подпись.Параметры.НаименованиеЧленаКомисси = ПредседательКомиссии.ФизЛицо.Наименование;
		Подпись.Параметры.Должность                = Должность;
		Подпись.Параметры.НаименованиеЧленаКомисси = ПредседательКомиссии;
		
	Иначе
		
		Подпись.Параметры.ЗаголовокРазделаПодписей = ЗаголовокРазделаПодписей.ПредседательКомиссии;
		Подпись.Параметры.Должность                = "";
		Подпись.Параметры.НаименованиеЧленаКомисси       = "";
		
	КонецЕсли;
		
	ТабДокумент.Вывести(Подпись);
	
	// Выведем подписи членов комиссии
	ВыводитьЗаголовок = Истина;
	
	// Сформируем список членов комиссии
	СписокЧленовКомиссии = Новый Массив();
	
	Для Каждого Строка Из ТаблицаИнвентаризационнаяКомиссия Цикл
		//Если НЕ Строка.Председатель Тогда
			СписокЧленовКомиссии.Добавить(Строка.ФизЛицо);
		//КонецЕсли;
	КонецЦикла;
	
	//ДанныеЧленовКомиссии = ОбщегоНазначения.ДанныеФизЛиц(Выборка.Организация, СписокЧленовКомиссии, Выборка.Дата);
	ДанныеЧленовКомиссии = СписокЧленовКомиссии;
	
	// Сначала выведем членов комиссии из выборки
	Для Каждого ЧленКомиссии Из ТаблицаИнвентаризационнаяКомиссия Цикл
		
		//Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, Подпись) Тогда
		Если ТабДокумент.ПроверитьВывод(Подпись) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
		
		КонецЕсли;
		
		Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, 
		                                               ЗаголовокРазделаПодписей.ЧленыКомиссии,
													   "");
		Подпись.Параметры.Должность                = ЧленКомиссии.Должность;
		Подпись.Параметры.НаименованиеЧленаКомисси = ЧленКомиссии.ФизЛицо;
		
		ТабДокумент.Вывести(Подпись);
		
		ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
		
	КонецЦикла;
	
	// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
	// подписей, как в форме, утвержденной Госкомстатом)
	Если ДанныеЧленовКомиссии.Количество() < 3 Тогда
		
		//Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, Подпись) Тогда
		Если ТабДокумент.ПроверитьВывод(Подпись) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
		
		КонецЕсли;
		
		Для Итератор = (ДанныеЧленовКомиссии.Количество() + 1) По 3 Цикл
			
			Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, 
			                                               ЗаголовокРазделаПодписей.ЧленыКомиссии,
														   "");
			Подпись.Параметры.Должность                = "";
			Подпись.Параметры.НаименованиеЧленаКомисси = "";
			
			ТабДокумент.Вывести(Подпись);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла;
	
	КонецЕсли;
	
	// Выведем подвал приказа
	//Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, Подвал) Тогда
	Если ТабДокумент.ПроверитьВывод(Подпись) Тогда
		
		// Выведем разрыв страницы
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЕсли;
	
	Подвал.Параметры.НаименованиеИмуществаОбязательств = "расчеты с покупателями, поставщиками и прочими дебиторами и кредиторами";
	Подвал.Параметры.ДатаНачалаИнвентаризации          = Формат(Выборка.ДатаНачалаИнвентаризации, "ДЛФ=DD");
	Подвал.Параметры.ДатаОкончанияИнвентаризации       = Формат(Выборка.ДатаОкончанияИнвентаризации, "ДЛФ=DD");
	Подвал.Параметры.ПричинаПроведенияИнвентаризации   = Выборка.ПричинаПроведенияИнвентаризации;
	
	//Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Выборка.Организация, Выборка.Дата);
	//Подвал.Параметры.ДолжностьРуководителя          = Руководители.РуководительДолжность;
	//Подвал.Параметры.РасшифровкаПодписиРуководителя = Руководители.Руководитель;
	ОтветственныеЛица = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(Организация, Дата);
	Подвал.Параметры.ДолжностьРуководителя          = ОтветственныеЛица.РуководительДолжность;
	Подвал.Параметры.РасшифровкаПодписиРуководителя = ОтветственныеЛица.Руководитель;
	
	ТабДокумент.Вывести(Подвал);
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьИНВ22()

