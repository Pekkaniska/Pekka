#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс



// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании) Экспорт

    //Документы.ЗаказКлиента.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);

    //Документы.КоммерческоеПредложениеКлиенту.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);

    //ВводНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСоздатьНаОсновании);

    //Если ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееСогласованиеКоммерческихПредложений") Тогда
    //	Команда = БизнесПроцессы.СогласованиеПродажи.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
    //	Если Команда <> Неопределено Тогда
    //		Команда.Представление = НСтр("ru = 'Согласование коммерческого предложения клиенту'");
    //	КонецЕсли;
    //КонецЕсли;
    //
    //ВводНаОснованииПереопределяемый.ДобавитьКомандыСоздатьНаОснованииПисмаПоШаблону(КомандыСоздатьНаОсновании);
    //
    //Документы.ПоручениеЭкспедитору.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);

КонецПроцедуры

// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт

    //Если ПравоДоступа("Добавление", Метаданные.Документы.КоммерческоеПредложениеКлиенту) Тогда
    //	КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
    //	КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.КоммерческоеПредложениеКлиенту.ПолноеИмя();
    //	КомандаСоздатьНаОсновании.Представление = ВводНаОсновании.ПредставлениеОбъекта(Метаданные.Документы.КоммерческоеПредложениеКлиенту);
    //	КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
    //	КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьКоммерческиеПредложенияКлиентам";
    //

    //	Возврат КомандаСоздатьНаОсновании;
    //КонецЕсли;

    Возврат Неопределено;
КонецФункции

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);

КонецПроцедуры

// Осуществялет вычисление текущего состояния коммерческого предложения
//
// Параметры:
//	КоммерческоеПредложение - ДокументСсылка.КоммерческоеПредложение - Документ, состояние которого необходимо вычислить
//	Состояние - Строка - Реквизит, в который будет помещено рассчитанное состояние
//	СостояниеПросрочено - Булево - Реквизит, в который будет помещен признак просроченности состояния
//	КартинкаСостояния   - Картинка - Картинка состояния коммерческого предложения
//
Процедура РассчитатьСостояние(Знач КоммерческоеПредложение, Состояние, СостояниеПросрочено) Экспорт
	
	Если ЗначениеЗаполнено(КоммерческоеПредложение) Тогда
		УстановитьПривилегированныйРежим(Истина);
		Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|ВЫБОР
			|	// НЕ ПРОВЕДЕНО ///////////////////////////////////////////////////////////
			|	КОГДА
			|		НЕ КоммерческоеПредложениеКлиенту.Проведен
			|	ТОГДА
			|		НЕОПРЕДЕЛЕНО
			|	// ОТМЕНЕНО ///////////////////////////////////////////////////////////////
			|	КОГДА
			|		КоммерческоеПредложениеКлиенту.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.Отменено)
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Перечисление.СостоянияКоммерческихПредложенийКлиентам.Отменено)
			|	// ДЕЙСТВУЕТ //////////////////////////////////////////////////////////////
			|	КОГДА
			|		КоммерческоеПредложениеКлиенту.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.Действует)
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Перечисление.СостоянияКоммерческихПредложенийКлиентам.Действует)
			|	// ОЖИДАЕТСЯ СОГЛАСОВАНИЕ /////////////////////////////////////////////////
			|	КОГДА
			|		КоммерческоеПредложениеКлиенту.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано)
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Перечисление.СостоянияКоммерческихПредложенийКлиентам.ОжидаетсяСогласование)
			|КОНЕЦ КАК Состояние,
			|ВЫБОР
			|	// СОГЛАСОВАНИЕ ПРОСРОЧЕНО ////////////////////////////////////////////////
			|	КОГДА
			|		КоммерческоеПредложениеКлиенту.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано)
			|		И КоммерческоеПредложениеКлиенту.СрокДействия < &ТекущаяДата
			|		И КоммерческоеПредложениеКлиенту.СрокДействия <> ДАТАВРЕМЯ(1,1,1)
			|	ТОГДА
			|		ИСТИНА
			|	// СРОК ДЕЙСТВИЯ ИСТЕК ////////////////////////////////////////////////////
			|	КОГДА
			|		КоммерческоеПредложениеКлиенту.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.Действует)
			|		И КоммерческоеПредложениеКлиенту.СрокДействия < &ТекущаяДата
			|		И КоммерческоеПредложениеКлиенту.СрокДействия <> ДАТАВРЕМЯ(1,1,1)
			|	ТОГДА
			|		ИСТИНА
			|	ИНАЧЕ
			|		ЛОЖЬ
			|КОНЕЦ КАК Просрочен
			|ИЗ
			|	Документ.КоммерческоеПредложениеКлиенту КАК КоммерческоеПредложениеКлиенту
			|ГДЕ
			|	КоммерческоеПредложениеКлиенту.Ссылка = &КоммерческоеПредложение
			|");
			
		Запрос.УстановитьПараметр("КоммерческоеПредложение", КоммерческоеПредложение);
		Запрос.УстановитьПараметр("ТекущаяДата",  НачалоДня(ТекущаяДата()));
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Состояние           = Выборка.Состояние;
		СостояниеПросрочено = Выборка.Просрочен;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	НовыйСтатус - Строка - Имя нового статуса
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыКоммерческихПредложенийКлиентам[НовыйСтатус];
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
	|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.Статус = &Статус
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтатусСовпадает,
	|	ТаблицаДокументов.Проведен КАК Проведен,
	|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
	|	ИСТИНА КАК ЗаписьПроведением
	|ИЗ
	|	Документ.КоммерческоеПредложениеКлиенту КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//	ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	НовыйСтатус - Перечисление - Новый статус
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешного завершения проверки
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Возврат Истина; // Для документа "КоммерческоеПредлоениеКлиенту" отсутствуют дополнительные проверки
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
    
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.пкКоммерческоеПредложениеНаАрендуТехники";
	КомандаПечати.Идентификатор = "КоммерческоеПредложение";
	КомандаПечати.Представление = НСтр("ru = 'Коммерческое предложение'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 1;
    
    КомандаПечати = КомандыПечати.Добавить();
    КомандаПечати.МенеджерПечати = "Документ.пкКоммерческоеПредложениеНаАрендуТехники";
    КомандаПечати.Идентификатор = "КоммерческоеПредложениеАнгл";
    КомандаПечати.Представление = НСтр("ru = 'Коммерческое предложение (англ.)'");
    КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
    КомандаПечати.Порядок = 2;
    	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КоммерческоеПредложение") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "КоммерческоеПредложение", НСтр("ru = 'Коммерческое предложение'"), СформироватьПечатнуюФормуКоммерческогоПредложения(МассивОбъектов, ОбъектыПечати, Неопределено, ПараметрыПечати));
    КонецЕсли;
    
    Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КоммерческоеПредложениеАнгл") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "КоммерческоеПредложениеАнгл", НСтр("ru = 'Коммерческое предложение (англ.)'"), СформироватьПечатнуюФормуКоммерческогоПредложенияАнгл(МассивОбъектов, ОбъектыПечати, Неопределено, ПараметрыПечати));
    КонецЕсли;
	
    //Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КомплектДокументов") Тогда
    //	КоллекцияПечатныхФорм.Очистить();
    //	СформироватьКомплектПечатныхФорм(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати);
    //КонецЕсли;
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

Функция СформироватьПечатнуюФормуКоммерческогоПредложения(МассивОбъектов, ОбъектыПечати, КомплектыПечати, ПараметрыПечати = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ДанныеДляПечати = ПолучитьДанныеДляПечати(МассивОбъектов, ПараметрыПечати);
	
	ДанныеПечати = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	Товары       = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выгрузить();
	
	ПервыйДокумент = Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		// Для печати комплектов
		Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено Тогда
			КомплектПечатиПоСсылке = КомплектыПечати.Найти(ДанныеПечати.Ссылка,"Ссылка");
			Если КомплектПечатиПоСсылке = Неопределено Тогда
				КомплектПечатиПоСсылке = КомплектыПечати[0];
			КонецЕсли;
			Если КомплектПечатиПоСсылке.Экземпляров = 0 Тогда
				Продолжить
			КонецЕсли;
		КонецЕсли;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ЗаполнитьТабличныйДокументКоммерческоеПредложение(ТабличныйДокумент, ДанныеПечати, Товары);
		
		// Выведем нужное количество экземпляров (при печати комплектов)
		Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено И КомплектПечатиПоСсылке.Экземпляров > 1 Тогда
			ОбластьКопирования = ТабличныйДокумент.ПолучитьОбласть(НомерСтрокиНачало,,ТабличныйДокумент.ВысотаТаблицы);
			Для Итератор = 2 По КомплектПечатиПоСсылке.Экземпляров Цикл
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьКопирования);
			КонецЦикла;
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция СформироватьПечатнуюФормуКоммерческогоПредложенияАнгл(МассивОбъектов, ОбъектыПечати, КомплектыПечати, ПараметрыПечати = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ДанныеДляПечати = ПолучитьДанныеДляПечати(МассивОбъектов, ПараметрыПечати);
	
	ДанныеПечати = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	Товары       = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выгрузить();
	
	ПервыйДокумент = Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		// Для печати комплектов
		Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено Тогда
			КомплектПечатиПоСсылке = КомплектыПечати.Найти(ДанныеПечати.Ссылка,"Ссылка");
			Если КомплектПечатиПоСсылке = Неопределено Тогда
				КомплектПечатиПоСсылке = КомплектыПечати[0];
			КонецЕсли;
			Если КомплектПечатиПоСсылке.Экземпляров = 0 Тогда
				Продолжить
			КонецЕсли;
		КонецЕсли;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ЗаполнитьТабличныйДокументКоммерческоеПредложениеАнгл(ТабличныйДокумент, ДанныеПечати, Товары);
		
		// Выведем нужное количество экземпляров (при печати комплектов)
		Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено И КомплектПечатиПоСсылке.Экземпляров > 1 Тогда
			ОбластьКопирования = ТабличныйДокумент.ПолучитьОбласть(НомерСтрокиНачало,,ТабличныйДокумент.ВысотаТаблицы);
			Для Итератор = 2 По КомплектПечатиПоСсылке.Экземпляров Цикл
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьКопирования);
			КонецЦикла;
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьДанныеДляПечати(МассивОбъектов, ПараметрыПечати)
		
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
    |   пкКоммерческоеПредложениеНаАрендуТехникиТовары.Номенклатура КАК Модель,
    |   пкКоммерческоеПредложениеНаАрендуТехникиТовары.Номенклатура.пкТипТехники КАК ТипТехники,
    |   пкКоммерческоеПредложениеНаАрендуТехникиТовары.ЦенаКраткосрочная,
    |   пкКоммерческоеПредложениеНаАрендуТехникиТовары.ЦенаДолгосрочная,
    |   пкКоммерческоеПредложениеНаАрендуТехникиТовары.Номенклатура.пкВес КАК Вес,
    |   пкКоммерческоеПредложениеНаАрендуТехникиТовары.Номенклатура.пкВысотаПодъемаПлатформы КАК ВысотаПодъемаПлатформы,
    |   пкКоммерческоеПредложениеНаАрендуТехникиТовары.Номенклатура.пкГрузоподъемность КАК Грузоподъемность
    |ИЗ
    |   Документ.пкКоммерческоеПредложениеНаАрендуТехники.Товары КАК пкКоммерческоеПредложениеНаАрендуТехникиТовары
    |ГДЕ
    |   пкКоммерческоеПредложениеНаАрендуТехникиТовары.Ссылка В(&МассивОбъектов)
    |   И пкКоммерческоеПредложениеНаАрендуТехникиТовары.Активность
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |   пкКоммерческоеПредложениеНаАрендуТехники.Ссылка КАК Ссылка,
    |   пкКоммерческоеПредложениеНаАрендуТехники.Номер КАК Номер,
    |   пкКоммерческоеПредложениеНаАрендуТехники.Дата КАК Дата,
    |   пкКоммерческоеПредложениеНаАрендуТехники.Организация КАК Организация,
    |   пкКоммерческоеПредложениеНаАрендуТехники.Организация.НаименованиеСокращенное КАК ОрганизацияСокращенноеНаименование,
    |   пкКоммерческоеПредложениеНаАрендуТехники.Организация.Наименование КАК ОрганизацияНаименование,
    |   пкКоммерческоеПредложениеНаАрендуТехники.СрокДействия КАК СрокДействия,
    |   ВЫБОР
    |       КОГДА пкКоммерческоеПредложениеНаАрендуТехники.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
    |               ИЛИ пкКоммерческоеПредложениеНаАрендуТехники.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД)
    |           ТОГДА ЛОЖЬ
    |       ИНАЧЕ ИСТИНА
    |   КОНЕЦ КАК УчитыватьНДС,
    |   пкКоммерческоеПредложениеНаАрендуТехники.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
    |   пкКоммерческоеПредложениеНаАрендуТехники.Валюта КАК Валюта,
    |   ЕСТЬNULL(пкКоммерческоеПредложениеНаАрендуТехники.Менеджер.ФизическоеЛицо.Наименование, пкКоммерческоеПредложениеНаАрендуТехники.Менеджер.Наименование) КАК Менеджер,
    |   пкКоммерческоеПредложениеНаАрендуТехники.КонтактноеЛицо КАК КонтактноеЛицо,
    |   пкКоммерческоеПредложениеНаАрендуТехники.Партнер КАК Партнер,
    |   пкКоммерческоеПредложениеНаАрендуТехники.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
    |   ТелефонМенеджера.Представление КАК ТелефонМенеджера,
    |   пкКоммерческоеПредложениеНаАрендуТехники.Подразделение.пкАдресБазы КАК АдресОрганизации,
    |   ПочтаМенеджера.Представление КАК АдресЭлектроннойПочтыМенеджера,
    |   пкКоммерческоеПредложениеНаАрендуТехники.Склад,
    |   пкКоммерческоеПредложениеНаАрендуТехники.КакОбращаться,
    |   пкКоммерческоеПредложениеНаАрендуТехники.ТелефонРабочий,
    |   пкКоммерческоеПредложениеНаАрендуТехники.ТелефонМобильный,
    |   пкКоммерческоеПредложениеНаАрендуТехники.Email,
    |   пкКоммерческоеПредложениеНаАрендуТехники.ОбъектСтроительства,
    |   пкКоммерческоеПредложениеНаАрендуТехники.Обращение,
    |   пкКоммерческоеПредложениеНаАрендуТехники.СтавкаНДС,
    |   пкКоммерческоеПредложениеНаАрендуТехники.Доставка,
    |   пкКоммерческоеПредложениеНаАрендуТехники.ПечататьКраткосрочнуюЦену,
    |   пкКоммерческоеПредложениеНаАрендуТехники.ПечататьДолгосрочнуюЦену,
    |   пкКоммерческоеПредложениеНаАрендуТехники.ПечататьЦенуЗаМесяц,
    |   ТелефонОрганизации.НомерТелефона КАК ТелефонОрганизации
    |ИЗ
    |   Документ.пкКоммерческоеПредложениеНаАрендуТехники КАК пкКоммерческоеПредложениеНаАрендуТехники
    |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ПочтаМенеджера
    |       ПО (ПочтаМенеджера.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EMailПользователя))
    |           И пкКоммерческоеПредложениеНаАрендуТехники.Менеджер = ПочтаМенеджера.Ссылка
    |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ТелефонМенеджера
    |       ПО пкКоммерческоеПредложениеНаАрендуТехники.Менеджер = ТелефонМенеджера.Ссылка
    |           И (ТелефонМенеджера.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонПользователя))
    |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК ТелефонОрганизации
    |       ПО пкКоммерческоеПредложениеНаАрендуТехники.Организация = ТелефонОрганизации.Ссылка
    |           И (ТелефонОрганизации.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации))
    |ГДЕ
    |   пкКоммерческоеПредложениеНаАрендуТехники.Ссылка В(&МассивОбъектов)
    |
    |УПОРЯДОЧИТЬ ПО
    |   Ссылка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"Товары.Упаковка",
		"Товары.Номенклатура"));
		
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке", ПакетРезультатовЗапроса[1]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти", ПакетРезультатовЗапроса[0]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументКоммерческоеПредложение(ТабДокумент, ДанныеОбъекта, Товары)
    
    Если НЕ ДанныеОбъекта.ПечататьКраткосрочнуюЦену И НЕ ДанныеОбъекта.ПечататьДолгосрочнуюЦену И НЕ ДанныеОбъекта.ПечататьЦенуЗаМесяц Тогда
        Сообщить("Выберите тариф, который нужно выводить на печать."); 
        Возврат;
    КонецЕсли;    
    
    Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.пкКоммерческоеПредложениеНаАрендуТехники.КоммерческоеПредложение");
    
    ОбластьШапка = Макет.ПолучитьОбласть("Шапка");

	ТекФизЛицо = ДанныеОбъекта.Менеджер;
	Телефон    = ДанныеОбъекта.ТелефонМенеджера;
	ЭлАдрес    = ДанныеОбъекта.АдресЭлектроннойПочтыМенеджера;
	
	ОбластьШапка.Параметры.Дата               = Формат(ДанныеОбъекта.Дата, "ДЛФ=Д");
	ОбластьШапка.Параметры.ДатаПо             = Формат(ДанныеОбъекта.СрокДействия, "ДЛФ=Д");
	ОбластьШапка.Параметры.НомерДок           = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеОбъекта.Номер, Истина, Истина);
	ОбластьШапка.Параметры.ФИО                = ДанныеОбъекта.КакОбращаться;
	ОбластьШапка.Параметры.ФИОПолностью       = ДанныеОбъекта.КонтактноеЛицо;
	ОбластьШапка.Параметры.Менеджер           = ТекФизЛицо;
	ОбластьШапка.Параметры.Телефон            = Телефон;
	ОбластьШапка.Параметры.ЭлАдресМенеджера   = ЭлАдрес;
	ОбластьШапка.Параметры.Объект             = ДанныеОбъекта.ОбъектСтроительства;
	ОбластьШапка.Параметры.Контрагент         = ?(ТипЗнч(ДанныеОбъекта.Партнер) = Тип("СправочникСсылка.Партнеры"), ДанныеОбъекта.Партнер.НаименованиеПолное, ДанныеОбъекта.Партнер);
	ОбластьШапка.Параметры.ТелефонОрганизации = ДанныеОбъекта.ТелефонРабочий;
	ОбластьШапка.Параметры.ТелефонМобильный   = ДанныеОбъекта.ТелефонМобильный;
	ОбластьШапка.Параметры.ЭлАдрес            = ДанныеОбъекта.Email;
	ОбластьШапка.Параметры.Адрес              = ДанныеОбъекта.АдресОрганизации;
	
	Если ДанныеОбъекта.Обращение = 0 Тогда
		ОбластьШапка.Параметры.Уважаемый      = "Уважаемый";
	Иначе
		ОбластьШапка.Параметры.Уважаемый      = "Уважаемая";
	КонецЕсли;	
		
	ТабДокумент.Вывести(ОбластьШапка);
	
	ОбластьВид    = Макет.ПолучитьОбласть("СтрокаВид");
	 
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	
	ТекТипТехники  = "";
	НомерПоПорядку = 1;
    
    ВВалютеРеглУчета = ДанныеОбъекта.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
    СтавкаНДС        = УчетНДСПереопределяемый.ПолучитьСтавкуНДС(ДанныеОбъекта.СтавкаНДС); 
	
	Для Каждого Строка Из Товары Цикл
        Если ТекТипТехники <> Строка.ТипТехники Тогда  
            ОбластьВид.Параметры.ВидОборудования = Строка(НомерПоПорядку) + ". " + Строка.ТипТехники;
			ТабДокумент.Вывести(ОбластьВид);
			ТекТипТехники  = Строка.ТипТехники;
			НомерПоПорядку = НомерПоПорядку + 1;
        КонецЕсли;
        
        ОбластьМодель = Неопределено;
		
		Если НЕ ДанныеОбъекта.ЦенаВключаетНДС Тогда //Печать без НДС
			Если ДанныеОбъекта.ПечататьКраткосрочнуюЦену И НЕ ДанныеОбъекта.ПечататьДолгосрочнуюЦену И НЕ ДанныеОбъекта.ПечататьЦенуЗаМесяц Тогда //1
				ОбластьМодель = Макет.ПолучитьОбласть("Строка1");
				ОбластьМодель.Параметры.ТарифДень = "- " + Строка(Строка.ЦенаКраткосрочная) + ?(ВВалютеРеглУчета, " руб./день", " EUR/день"); 
			ИначеЕсли НЕ ДанныеОбъекта.ПечататьКраткосрочнуюЦену И ДанныеОбъекта.ПечататьДолгосрочнуюЦену И НЕ ДанныеОбъекта.ПечататьЦенуЗаМесяц Тогда //2
				ОбластьМодель = Макет.ПолучитьОбласть("Строка2");
				ОбластьМодель.Параметры.ТарифМесяц = "- " + Строка(Строка.ЦенаДолгосрочная) + ?(ВВалютеРеглУчета, " руб./месяц", " EUR/месяц");
			ИначеЕсли НЕ ДанныеОбъекта.ПечататьКраткосрочнуюЦену И НЕ ДанныеОбъекта.ПечататьДолгосрочнуюЦену И ДанныеОбъекта.ПечататьЦенуЗаМесяц Тогда //3
				ОбластьМодель = Макет.ПолучитьОбласть("Строка3");
				ОбластьМодель.Параметры.ТарифМесяц30 = "- " + Строка(Окр(Строка.ЦенаДолгосрочная / 30, 2)) + ?(ВВалютеРеглУчета, " руб./день", " EUR/день");
			ИначеЕсли ДанныеОбъекта.ПечататьКраткосрочнуюЦену И ДанныеОбъекта.ПечататьДолгосрочнуюЦену И НЕ ДанныеОбъекта.ПечататьЦенуЗаМесяц Тогда //12
				ОбластьМодель = Макет.ПолучитьОбласть("Строка12");
				ОбластьМодель.Параметры.ТарифДень = "- " + Строка(Строка.ЦенаКраткосрочная) + ?(ВВалютеРеглУчета, " руб./день", " EUR/день");
				ОбластьМодель.Параметры.ТарифМесяц = "- " + Строка(Строка.ЦенаДолгосрочная) + ?(ВВалютеРеглУчета, " руб./месяц", " EUR/месяц");
			ИначеЕсли ДанныеОбъекта.ПечататьКраткосрочнуюЦену И НЕ ДанныеОбъекта.ПечататьДолгосрочнуюЦену И ДанныеОбъекта.ПечататьЦенуЗаМесяц Тогда //13
				ОбластьМодель = Макет.ПолучитьОбласть("Строка13");
				ОбластьМодель.Параметры.ТарифДень = "- " + Строка(Строка.ЦенаКраткосрочная) + ?(ВВалютеРеглУчета, " руб./день", " EUR/день");
				ОбластьМодель.Параметры.ТарифМесяц30 = "- " + Строка(Окр(Строка.ЦенаДолгосрочная / 30, 2)) + ?(ВВалютеРеглУчета, " руб./день", " EUR/день");
			ИначеЕсли НЕ ДанныеОбъекта.ПечататьКраткосрочнуюЦену И ДанныеОбъекта.ПечататьДолгосрочнуюЦену И ДанныеОбъекта.ПечататьЦенуЗаМесяц Тогда //23
				ОбластьМодель = Макет.ПолучитьОбласть("Строка23");
				ОбластьМодель.Параметры.ТарифМесяц = "- " + Строка(Строка.ЦенаДолгосрочная) + ?(ВВалютеРеглУчета, " руб./месяц", " EUR/месяц");
				ОбластьМодель.Параметры.ТарифМесяц30 = "- " + Строка(Окр(Строка.ЦенаДолгосрочная / 30, 2)) + ?(ВВалютеРеглУчета, " руб./день", " EUR/день");
			ИначеЕсли ДанныеОбъекта.ПечататьКраткосрочнуюЦену И ДанныеОбъекта.ПечататьДолгосрочнуюЦену И ДанныеОбъекта.ПечататьЦенуЗаМесяц Тогда //123
				ОбластьМодель = Макет.ПолучитьОбласть("Строка123");
				ОбластьМодель.Параметры.ТарифДень = "- " + Строка(Строка.ЦенаКраткосрочная) + ?(ВВалютеРеглУчета, " руб./день", " EUR/день"); 
				ОбластьМодель.Параметры.ТарифМесяц = "- " + Строка(Строка.ЦенаДолгосрочная) + ?(ВВалютеРеглУчета, " руб./месяц", " EUR/месяц");
				ОбластьМодель.Параметры.ТарифМесяц30 = "- " + Строка(Окр(Строка.ЦенаДолгосрочная / 30, 2)) + ?(ВВалютеРеглУчета, " руб./день", " EUR/день");
			КонецЕсли;
		Иначе
			Если ДанныеОбъекта.ПечататьКраткосрочнуюЦену И НЕ ДанныеОбъекта.ПечататьДолгосрочнуюЦену И НЕ ДанныеОбъекта.ПечататьЦенуЗаМесяц Тогда //1
				ОбластьМодель = Макет.ПолучитьОбласть("Строка1");
				ОбластьМодель.Параметры.ТарифДень = "- " + Строка(Строка.ЦенаКраткосрочная + Строка.ЦенаКраткосрочная * СтавкаНДС / 100) + ?(ВВалютеРеглУчета, " руб./день", " EUR/день"); 
			ИначеЕсли НЕ ДанныеОбъекта.ПечататьКраткосрочнуюЦену И ДанныеОбъекта.ПечататьДолгосрочнуюЦену И НЕ ДанныеОбъекта.ПечататьЦенуЗаМесяц Тогда //2
				ОбластьМодель = Макет.ПолучитьОбласть("Строка2");
				ОбластьМодель.Параметры.ТарифМесяц = "- " + Строка(Строка.ЦенаДолгосрочная + Строка.ЦенаДолгосрочная * СтавкаНДС / 100) + ?(ВВалютеРеглУчета, " руб./месяц", " EUR/месяц");
			ИначеЕсли НЕ ДанныеОбъекта.ПечататьКраткосрочнуюЦену И НЕ ДанныеОбъекта.ПечататьДолгосрочнуюЦену И ДанныеОбъекта.ПечататьЦенуЗаМесяц Тогда //3
				ОбластьМодель = Макет.ПолучитьОбласть("Строка3");
				ОбластьМодель.Параметры.ТарифМесяц30 = "- " + Строка(Строка.ЦенаДолгосрочная / 30 + Строка.ЦенаДолгосрочная / 30 * СтавкаНДС / 100) + ?(ВВалютеРеглУчета, " руб./день", " EUR/день");
			ИначеЕсли ДанныеОбъекта.ПечататьКраткосрочнуюЦену И ДанныеОбъекта.ПечататьДолгосрочнуюЦену И НЕ ДанныеОбъекта.ПечататьЦенуЗаМесяц Тогда //12
				ОбластьМодель = Макет.ПолучитьОбласть("Строка12");
				ОбластьМодель.Параметры.ТарифДень = "- " + Строка(Строка.ЦенаКраткосрочная + Строка.ЦенаКраткосрочная * СтавкаНДС / 100) + ?(ВВалютеРеглУчета, " руб./день", " EUR/день"); 
				ОбластьМодель.Параметры.ТарифМесяц = "- " + Строка(Строка.ЦенаДолгосрочная + Строка.ЦенаДолгосрочная * СтавкаНДС / 100) + ?(ВВалютеРеглУчета, " руб./месяц", " EUR/месяц");
			ИначеЕсли ДанныеОбъекта.ПечататьКраткосрочнуюЦену И НЕ ДанныеОбъекта.ПечататьДолгосрочнуюЦену И ДанныеОбъекта.ПечататьЦенуЗаМесяц Тогда //13
				ОбластьМодель = Макет.ПолучитьОбласть("Строка13");
				ОбластьМодель.Параметры.ТарифДень = "- " + Строка(Строка.ЦенаКраткосрочная + Строка.ЦенаКраткосрочная * СтавкаНДС / 100) + ?(ВВалютеРеглУчета, " руб./день", " EUR/день"); 
				ОбластьМодель.Параметры.ТарифМесяц30 = "- " + Строка(Строка.ЦенаДолгосрочная / 30 + Строка.ЦенаДолгосрочная / 30 * СтавкаНДС / 100) + ?(ВВалютеРеглУчета, " руб./день", " EUR/день");
			ИначеЕсли НЕ ДанныеОбъекта.ПечататьКраткосрочнуюЦену И ДанныеОбъекта.ПечататьДолгосрочнуюЦену И ДанныеОбъекта.ПечататьЦенуЗаМесяц Тогда //23
				ОбластьМодель = Макет.ПолучитьОбласть("Строка23");
				ОбластьМодель.Параметры.ТарифМесяц = "- " + Строка(Строка.ЦенаДолгосрочная + Строка.ЦенаДолгосрочная * СтавкаНДС / 100) + ?(ВВалютеРеглУчета, " руб./месяц", " EUR/месяц");
				ОбластьМодель.Параметры.ТарифМесяц30 = "- " + Строка(Строка.ЦенаДолгосрочная / 30 + Строка.ЦенаДолгосрочная / 30 * СтавкаНДС / 100) + ?(ВВалютеРеглУчета, " руб./день", " EUR/день");
			ИначеЕсли ДанныеОбъекта.ПечататьКраткосрочнуюЦену И ДанныеОбъекта.ПечататьДолгосрочнуюЦену И ДанныеОбъекта.ПечататьЦенуЗаМесяц Тогда //123
				ОбластьМодель = Макет.ПолучитьОбласть("Строка123");
				ОбластьМодель.Параметры.ТарифДень = "- " + Строка(Строка.ЦенаКраткосрочная + Строка.ЦенаКраткосрочная * СтавкаНДС / 100) + ?(ВВалютеРеглУчета, " руб./день", " EUR/день"); 
				ОбластьМодель.Параметры.ТарифМесяц = "- " + Строка(Строка.ЦенаДолгосрочная + Строка.ЦенаДолгосрочная * СтавкаНДС / 100) + ?(ВВалютеРеглУчета, " руб./месяц", " EUR/месяц");
				ОбластьМодель.Параметры.ТарифМесяц30 = "- " + Строка(Строка.ЦенаДолгосрочная / 30 + Строка.ЦенаДолгосрочная / 30 * СтавкаНДС / 100) + ?(ВВалютеРеглУчета, " руб./день", " EUR/день");
			КонецЕсли;	
        КонецЕсли;
        
        Если ОбластьМодель <> Неопределено Тогда
		
    		ОбластьМодель.Параметры.Модель           = Строка.Модель;
    		ОбластьМодель.Параметры.ВысотаПодъема    = "- " + Строка(Строка.ВысотаПодъемаПлатформы) + " м";
    		ОбластьМодель.Параметры.Грузоподъемность = "- " + Строка(Строка.Грузоподъемность * 1000) + " кг";
    		ОбластьМодель.Параметры.Масса            = "- " + Строка(Строка.Вес) + " т";
    		
    		Если НЕ ТабДокумент.ПроверитьВывод(ОбластьМодель) Тогда
    			 ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
    		КонецЕсли;	
    		
    		ТабДокумент.Вывести(ОбластьМодель);
        КонецЕсли;
	КонецЦикла;	
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.ДополнительнаяИнформация) Тогда
		ОбластьПодвал.Параметры.Комментарий   = ДанныеОбъекта.ДополнительнаяИнформация;
		ОбластьПодвал.Параметры.Дополнительно = "Дополнительно:";
	КонецЕсли;
	
	Если НЕ ДанныеОбъекта.ЦенаВключаетНДС Тогда
		ОбластьПодвал.Параметры.ТекстПодвал = "Все цены указаны без учета НДС, оплата по договору. Доставка осуществляется по письменной заявке, при наличии свободной техники на складе.";
	Иначе
		ОбластьПодвал.Параметры.ТекстПодвал = "Все цены указаны с учетом НДС, оплата по договору. Доставка осуществляется по письменной заявке, при наличии свободной техники на складе.";
	КонецЕсли;	
	
    Если ДанныеОбъекта.Доставка <> 0 Тогда
    	ОбластьПодвал.Параметры.ТекстУсловияДоставки = "Транспортные расходы (одна ходка): " + Строка(ДанныеОбъекта.Доставка + ?(ДанныеОбъекта.ЦенаВключаетНДС, ДанныеОбъекта.Доставка * СтавкаНДС / 100, 0)) + ?(ВВалютеРеглУчета, " руб.", " EUR");
    КонецЕсли;
	
	ОбластьПодвал.Параметры.Менеджер = ДанныеОбъекта.Менеджер;
	ТабДокумент.Вывести(ОбластьПодвал);
	
	ТабДокумент.НижнийКолонтитул.НачальнаяСтраница     = 1;
	ТабДокумент.НижнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
    //Если ДанныеОбъекта.Регион.Наименование = "Санкт-Петербург" Тогда
    //    ТабДокумент.НижнийКолонтитул.ТекстВЦентре            = "___________________________________________________________________________________________________________________"  + Символы.ПС + "cайт: www.pekkaniska.ru" + ", e-mail: zakaz@pekkaniska.com" + ", тел.  +7(812)3208254";
    //ИначеЕсли ДанныеОбъекта.Регион.Наименование = "Москва" Тогда
    //    ТабДокумент.НижнийКолонтитул.ТекстВЦентре            = "___________________________________________________________________________________________________________________"  + Символы.ПС + "cайт: www.pekkaniska.ru" + ", e-mail: zakaz@pekkaniska.com" + ", тел.  +7 495 926 18 94";
    //ИначеЕсли ДанныеОбъекта.Регион.Наименование = "Екатеринбург" Тогда	
    //    ТабДокумент.НижнийКолонтитул.ТекстВЦентре            = "___________________________________________________________________________________________________________________"  + Символы.ПС + "cайт: www.pekkaniska.ru" + ", e-mail: zakaz@pekkaniska.com" + ", тел.  +7 343 345 72 29";
    //ИначеЕсли ДанныеОбъекта.Регион.Наименование = "Нижний Новгород" Тогда
    //    ТабДокумент.НижнийКолонтитул.ТекстВЦентре            = "___________________________________________________________________________________________________________________"  + Символы.ПС + "cайт: www.pekkaniska.ru" + ", e-mail: zakaz@pekkaniska.com" + ", тел.  +7 831 411 16 17";
    //ИначеЕсли ДанныеОбъекта.Регион.Наименование = "Новосибирск" Тогда
    //    ТабДокумент.НижнийКолонтитул.ТекстВЦентре            = "___________________________________________________________________________________________________________________"  + Символы.ПС + "cайт: www.pekkaniska.ru" + ", e-mail: zakaz@pekkaniska.com" + ", тел.  +7 383 233 59 00";
    //ИначеЕсли ДанныеОбъекта.Регион.Наименование = "Самара" Тогда
    //    ТабДокумент.НижнийКолонтитул.ТекстВЦентре            = "___________________________________________________________________________________________________________________"  + Символы.ПС + "cайт: www.pekkaniska.ru" + ", e-mail: zakaz@pekkaniska.com" + ", тел.  + 7 987 989 08 06";
    //КонецЕсли;	
	
	ТабДокумент.НижнийКолонтитул.Выводить                = Истина;
	
	ТабДокумент.ПолеСверху = 3;
	ТабДокумент.АвтоМасштаб = Истина;
    
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументКоммерческоеПредложениеАнгл(ТабДокумент, ДанныеОбъекта, Товары)
    
    Если НЕ ДанныеОбъекта.ПечататьКраткосрочнуюЦену И НЕ ДанныеОбъекта.ПечататьДолгосрочнуюЦену И НЕ ДанныеОбъекта.ПечататьЦенуЗаМесяц Тогда
        Сообщить("Выберите тариф, который нужно выводить на печать."); 
        Возврат;
    КонецЕсли;    
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.пкКоммерческоеПредложениеНаАрендуТехники.КоммерческоеПредложениеАнгл");
    
    ОбластьШапка = Макет.ПолучитьОбласть("Шапка");

	ТекФизЛицо = ДанныеОбъекта.Менеджер;
	Телефон    = ДанныеОбъекта.ТелефонМенеджера;
	ЭлАдрес    = ДанныеОбъекта.АдресЭлектроннойПочтыМенеджера;
	
	ОбластьШапка.Параметры.Дата               = Формат(ДанныеОбъекта.Дата, "ДЛФ=Д");
	ОбластьШапка.Параметры.ДатаПо             = Формат(ДанныеОбъекта.СрокДействия, "ДЛФ=Д");
	ОбластьШапка.Параметры.НомерДок           = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеОбъекта.Номер, Истина, Истина);;
	ОбластьШапка.Параметры.ФИО                = ДанныеОбъекта.КакОбращаться;
	ОбластьШапка.Параметры.ФИОПолностью       = ДанныеОбъекта.КонтактноеЛицо;
	ОбластьШапка.Параметры.Менеджер           = ТекФизЛицо;
	ОбластьШапка.Параметры.Телефон            = Телефон;
	ОбластьШапка.Параметры.ЭлАдресМенеджера   = ЭлАдрес;
	ОбластьШапка.Параметры.Объект             = ДанныеОбъекта.ОбъектСтроительства;
	ОбластьШапка.Параметры.Контрагент         = ?(ТипЗнч(ДанныеОбъекта.Партнер) = Тип("СправочникСсылка.Партнеры"), ДанныеОбъекта.Партнер.НаименованиеПолное, ДанныеОбъекта.Партнер);
	ОбластьШапка.Параметры.ТелефонОрганизации = ДанныеОбъекта.ТелефонРабочий;
	ОбластьШапка.Параметры.ТелефонМобильный   = ДанныеОбъекта.ТелефонМобильный;
	ОбластьШапка.Параметры.ЭлАдрес            = ДанныеОбъекта.Email;
			
	ТабДокумент.Вывести(ОбластьШапка);
	
	ОбластьВид    = Макет.ПолучитьОбласть("СтрокаВид");
	 
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	
	ТекТипТехники  = "";
	НомерПоПорядку = 1;
    
    ВВалютеРеглУчета = ДанныеОбъекта.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
    СтавкаНДС        = УчетНДСПереопределяемый.ПолучитьСтавкуНДС(ДанныеОбъекта.СтавкаНДС); 
	
	Для Каждого Строка Из Товары Цикл
        Если ТекТипТехники <> Строка.ТипТехники Тогда  
            ОбластьВид.Параметры.ВидОборудования = Строка(НомерПоПорядку) + ". " + Строка.ТипТехники;
			ТабДокумент.Вывести(ОбластьВид);
			ТекТипТехники  = Строка.ТипТехники;
			НомерПоПорядку = НомерПоПорядку + 1;
        КонецЕсли;
        
        ОбластьМодель = Неопределено;
		
		Если НЕ ДанныеОбъекта.ЦенаВключаетНДС Тогда //Печать без НДС
			Если ДанныеОбъекта.ПечататьКраткосрочнуюЦену И НЕ ДанныеОбъекта.ПечататьДолгосрочнуюЦену И НЕ ДанныеОбъекта.ПечататьЦенуЗаМесяц Тогда //1
				ОбластьМодель = Макет.ПолучитьОбласть("Строка1");
				ОбластьМодель.Параметры.ТарифДень = "- " + Строка(Строка.ЦенаКраткосрочная) + ?(ВВалютеРеглУчета, " ruble/day", " EUR/day"); 
			ИначеЕсли НЕ ДанныеОбъекта.ПечататьКраткосрочнуюЦену И ДанныеОбъекта.ПечататьДолгосрочнуюЦену И НЕ ДанныеОбъекта.ПечататьЦенуЗаМесяц Тогда //2
				ОбластьМодель = Макет.ПолучитьОбласть("Строка2");
				ОбластьМодель.Параметры.ТарифМесяц = "- " + Строка(Строка.ЦенаДолгосрочная) + ?(ВВалютеРеглУчета, " ruble/month", " EUR/month");
			ИначеЕсли НЕ ДанныеОбъекта.ПечататьКраткосрочнуюЦену И НЕ ДанныеОбъекта.ПечататьДолгосрочнуюЦену И ДанныеОбъекта.ПечататьЦенуЗаМесяц Тогда //3
				ОбластьМодель = Макет.ПолучитьОбласть("Строка3");
				ОбластьМодель.Параметры.ТарифМесяц30 = "- " + Строка(Окр(Строка.ЦенаДолгосрочная / 30, 2)) + ?(ВВалютеРеглУчета, " ruble/day", " EUR/day");
			ИначеЕсли ДанныеОбъекта.ПечататьКраткосрочнуюЦену И ДанныеОбъекта.ПечататьДолгосрочнуюЦену И НЕ ДанныеОбъекта.ПечататьЦенуЗаМесяц Тогда //12
				ОбластьМодель = Макет.ПолучитьОбласть("Строка12");
				ОбластьМодель.Параметры.ТарифДень = "- " + Строка(Строка.ЦенаКраткосрочная) + ?(ВВалютеРеглУчета, " ruble/day", " EUR/day");
				ОбластьМодель.Параметры.ТарифМесяц = "- " + Строка(Строка.ЦенаДолгосрочная) + ?(ВВалютеРеглУчета, " ruble/month", " EUR/month");
			ИначеЕсли ДанныеОбъекта.ПечататьКраткосрочнуюЦену И НЕ ДанныеОбъекта.ПечататьДолгосрочнуюЦену И ДанныеОбъекта.ПечататьЦенуЗаМесяц Тогда //13
				ОбластьМодель = Макет.ПолучитьОбласть("Строка13");
				ОбластьМодель.Параметры.ТарифДень = "- " + Строка(Строка.ЦенаКраткосрочная) + ?(ВВалютеРеглУчета, " ruble/day", " EUR/day");
				ОбластьМодель.Параметры.ТарифМесяц30 = "- " + Строка(Окр(Строка.ЦенаДолгосрочная / 30, 2)) + ?(ВВалютеРеглУчета, " ruble/day", " EUR/day");
			ИначеЕсли НЕ ДанныеОбъекта.ПечататьКраткосрочнуюЦену И ДанныеОбъекта.ПечататьДолгосрочнуюЦену И ДанныеОбъекта.ПечататьЦенуЗаМесяц Тогда //23
				ОбластьМодель = Макет.ПолучитьОбласть("Строка23");
				ОбластьМодель.Параметры.ТарифМесяц = "- " + Строка(Строка.ЦенаДолгосрочная) + ?(ВВалютеРеглУчета, " ruble/month", " EUR/month");
				ОбластьМодель.Параметры.ТарифМесяц30 = "- " + Строка(Окр(Строка.ЦенаДолгосрочная / 30, 2)) + ?(ВВалютеРеглУчета, " ruble/day", " EUR/day");
			ИначеЕсли ДанныеОбъекта.ПечататьКраткосрочнуюЦену И ДанныеОбъекта.ПечататьДолгосрочнуюЦену И ДанныеОбъекта.ПечататьЦенуЗаМесяц Тогда //123
				ОбластьМодель = Макет.ПолучитьОбласть("Строка123");
				ОбластьМодель.Параметры.ТарифДень = "- " + Строка(Строка.ЦенаКраткосрочная) + ?(ВВалютеРеглУчета, " ruble/day", " EUR/day"); 
				ОбластьМодель.Параметры.ТарифМесяц = "- " + Строка(Строка.ЦенаДолгосрочная) + ?(ВВалютеРеглУчета, " ruble/month", " EUR/month");
				ОбластьМодель.Параметры.ТарифМесяц30 = "- " + Строка(Окр(Строка.ЦенаДолгосрочная / 30, 2)) + ?(ВВалютеРеглУчета, " ruble/day", " EUR/day");
			КонецЕсли;
		Иначе
			Если ДанныеОбъекта.ПечататьКраткосрочнуюЦену И НЕ ДанныеОбъекта.ПечататьДолгосрочнуюЦену И НЕ ДанныеОбъекта.ПечататьЦенуЗаМесяц Тогда //1
				ОбластьМодель = Макет.ПолучитьОбласть("Строка1");
				ОбластьМодель.Параметры.ТарифДень = "- " + Строка(Строка.ЦенаКраткосрочная + Строка.ЦенаКраткосрочная * СтавкаНДС / 100) + ?(ВВалютеРеглУчета, " ruble/day", " EUR/day"); 
			ИначеЕсли НЕ ДанныеОбъекта.ПечататьКраткосрочнуюЦену И ДанныеОбъекта.ПечататьДолгосрочнуюЦену И НЕ ДанныеОбъекта.ПечататьЦенуЗаМесяц Тогда //2
				ОбластьМодель = Макет.ПолучитьОбласть("Строка2");
				ОбластьМодель.Параметры.ТарифМесяц = "- " + Строка(Строка.ЦенаДолгосрочная + Строка.ЦенаДолгосрочная * СтавкаНДС / 100) + ?(ВВалютеРеглУчета, " ruble/month", " EUR/month");
			ИначеЕсли НЕ ДанныеОбъекта.ПечататьКраткосрочнуюЦену И НЕ ДанныеОбъекта.ПечататьДолгосрочнуюЦену И ДанныеОбъекта.ПечататьЦенуЗаМесяц Тогда //3
				ОбластьМодель = Макет.ПолучитьОбласть("Строка3");
				ОбластьМодель.Параметры.ТарифМесяц30 = "- " + Строка(Строка.ЦенаДолгосрочная / 30 + Строка.ЦенаДолгосрочная / 30 * СтавкаНДС / 100) + ?(ВВалютеРеглУчета, " ruble/day", " EUR/day");
			ИначеЕсли ДанныеОбъекта.ПечататьКраткосрочнуюЦену И ДанныеОбъекта.ПечататьДолгосрочнуюЦену И НЕ ДанныеОбъекта.ПечататьЦенуЗаМесяц Тогда //12
				ОбластьМодель = Макет.ПолучитьОбласть("Строка12");
				ОбластьМодель.Параметры.ТарифДень = "- " + Строка(Строка.ЦенаКраткосрочная + Строка.ЦенаКраткосрочная * СтавкаНДС / 100) + ?(ВВалютеРеглУчета, " ruble/day", " EUR/day"); 
				ОбластьМодель.Параметры.ТарифМесяц = "- " + Строка(Строка.ЦенаДолгосрочная + Строка.ЦенаДолгосрочная * СтавкаНДС / 100) + ?(ВВалютеРеглУчета, " ruble/month", " EUR/month");
			ИначеЕсли ДанныеОбъекта.ПечататьКраткосрочнуюЦену И НЕ ДанныеОбъекта.ПечататьДолгосрочнуюЦену И ДанныеОбъекта.ПечататьЦенуЗаМесяц Тогда //13
				ОбластьМодель = Макет.ПолучитьОбласть("Строка13");
				ОбластьМодель.Параметры.ТарифДень = "- " + Строка(Строка.ЦенаКраткосрочная + Строка.ЦенаКраткосрочная * СтавкаНДС / 100) + ?(ВВалютеРеглУчета, " ruble/day", " EUR/day"); 
				ОбластьМодель.Параметры.ТарифМесяц30 = "- " + Строка(Строка.ЦенаДолгосрочная / 30 + Строка.ЦенаДолгосрочная / 30 * СтавкаНДС / 100) + ?(ВВалютеРеглУчета, " ruble/day", " EUR/day");
			ИначеЕсли НЕ ДанныеОбъекта.ПечататьКраткосрочнуюЦену И ДанныеОбъекта.ПечататьДолгосрочнуюЦену И ДанныеОбъекта.ПечататьЦенуЗаМесяц Тогда //23
				ОбластьМодель = Макет.ПолучитьОбласть("Строка23");
				ОбластьМодель.Параметры.ТарифМесяц = "- " + Строка(Строка.ЦенаДолгосрочная + Строка.ЦенаДолгосрочная * СтавкаНДС / 100) + ?(ВВалютеРеглУчета, " ruble/month", " EUR/month");
				ОбластьМодель.Параметры.ТарифМесяц30 = "- " + Строка(Строка.ЦенаДолгосрочная / 30 + Строка.ЦенаДолгосрочная / 30 * СтавкаНДС / 100) + ?(ВВалютеРеглУчета, " ruble/day", " EUR/day");
			ИначеЕсли ДанныеОбъекта.ПечататьКраткосрочнуюЦену И ДанныеОбъекта.ПечататьДолгосрочнуюЦену И ДанныеОбъекта.ПечататьЦенуЗаМесяц Тогда //123
				ОбластьМодель = Макет.ПолучитьОбласть("Строка123");
				ОбластьМодель.Параметры.ТарифДень = "- " + Строка(Строка.ЦенаКраткосрочная + Строка.ЦенаКраткосрочная * СтавкаНДС / 100) + ?(ВВалютеРеглУчета, " ruble/day", " EUR/day"); 
				ОбластьМодель.Параметры.ТарифМесяц = "- " + Строка(Строка.ЦенаДолгосрочная + Строка.ЦенаДолгосрочная * СтавкаНДС / 100) + ?(ВВалютеРеглУчета, " ruble/month", " EUR/month");
				ОбластьМодель.Параметры.ТарифМесяц30 = "- " + Строка(Строка.ЦенаДолгосрочная / 30 + Строка.ЦенаДолгосрочная / 30 * СтавкаНДС / 100) + ?(ВВалютеРеглУчета, " ruble/day", " EUR/day");
			КонецЕсли;	
        КонецЕсли;
        
        Если ОбластьМодель <> Неопределено Тогда
		
    		ОбластьМодель.Параметры.Модель           = Строка.Модель;
    		ОбластьМодель.Параметры.ВысотаПодъема    = "- " + Строка(Строка.ВысотаПодъемаПлатформы) + " m";
    		ОбластьМодель.Параметры.Грузоподъемность = "- " + Строка(Строка.Грузоподъемность * 1000) + " kg";
    		ОбластьМодель.Параметры.Масса            = "- " + Строка(Строка.Вес) + " ton";
    		
    		Если НЕ ТабДокумент.ПроверитьВывод(ОбластьМодель) Тогда
    			 ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
    		КонецЕсли;	
    		
    		ТабДокумент.Вывести(ОбластьМодель);
        КонецЕсли;
	КонецЦикла;	
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.ДополнительнаяИнформация) Тогда
		ОбластьПодвал.Параметры.Комментарий   = ДанныеОбъекта.ДополнительнаяИнформация;
		ОбластьПодвал.Параметры.Дополнительно = "Additionally:";
	КонецЕсли;
	
	Если НЕ ДанныеОбъекта.ЦенаВключаетНДС Тогда
		ОбластьПодвал.Параметры.ТекстПодвал = "For all prices VAT - 0%. For further information, please do not hesitate to contact us.";
	Иначе
		ОбластьПодвал.Параметры.ТекстПодвал = "All prices include VAT. For further information, please do not hesitate to contact us.";
	КонецЕсли;	
	
    Если ДанныеОбъекта.Доставка <> 0 Тогда
    	ОбластьПодвал.Параметры.ТекстУсловияДоставки = "Transportation expenses (one way): " + Строка(ДанныеОбъекта.Доставка + ?(ДанныеОбъекта.ЦенаВключаетНДС, ДанныеОбъекта.Доставка * СтавкаНДС / 100, 0)) + ?(ВВалютеРеглУчета, " ruble", " EUR");
    КонецЕсли;
	
	ОбластьПодвал.Параметры.Менеджер = ДанныеОбъекта.Менеджер;
	ТабДокумент.Вывести(ОбластьПодвал);
	
	ТабДокумент.НижнийКолонтитул.НачальнаяСтраница     = 1;
	ТабДокумент.НижнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
    //Если ДанныеОбъекта.Регион.Наименование = "Санкт-Петербург" Тогда
    //    ТабДокумент.НижнийКолонтитул.ТекстВЦентре            = "___________________________________________________________________________________________________________________"  + Символы.ПС + "cайт: www.pekkaniska.ru" + ", e-mail: zakaz@pekkaniska.com" + ", тел.  +7(812)3208254";
    //ИначеЕсли ДанныеОбъекта.Регион.Наименование = "Москва" Тогда
    //    ТабДокумент.НижнийКолонтитул.ТекстВЦентре            = "___________________________________________________________________________________________________________________"  + Символы.ПС + "cайт: www.pekkaniska.ru" + ", e-mail: zakaz@pekkaniska.com" + ", тел.  +7 495 926 18 94";
    //ИначеЕсли ДанныеОбъекта.Регион.Наименование = "Екатеринбург" Тогда	
    //    ТабДокумент.НижнийКолонтитул.ТекстВЦентре            = "___________________________________________________________________________________________________________________"  + Символы.ПС + "cайт: www.pekkaniska.ru" + ", e-mail: zakaz@pekkaniska.com" + ", тел.  +7 343 345 72 29";
    //ИначеЕсли ДанныеОбъекта.Регион.Наименование = "Нижний Новгород" Тогда
    //    ТабДокумент.НижнийКолонтитул.ТекстВЦентре            = "___________________________________________________________________________________________________________________"  + Символы.ПС + "cайт: www.pekkaniska.ru" + ", e-mail: zakaz@pekkaniska.com" + ", тел.  +7 831 411 16 17";
    //ИначеЕсли ДанныеОбъекта.Регион.Наименование = "Новосибирск" Тогда
    //    ТабДокумент.НижнийКолонтитул.ТекстВЦентре            = "___________________________________________________________________________________________________________________"  + Символы.ПС + "cайт: www.pekkaniska.ru" + ", e-mail: zakaz@pekkaniska.com" + ", тел.  +7 383 233 59 00";
    //ИначеЕсли ДанныеОбъекта.Регион.Наименование = "Самара" Тогда
    //    ТабДокумент.НижнийКолонтитул.ТекстВЦентре            = "___________________________________________________________________________________________________________________"  + Символы.ПС + "cайт: www.pekkaniska.ru" + ", e-mail: zakaz@pekkaniska.com" + ", тел.  + 7 987 989 08 06";
    //КонецЕсли;	
	
	ТабДокумент.НижнийКолонтитул.Выводить                = Истина;
	
	ТабДокумент.ПолеСверху = 3;
	ТабДокумент.АвтоМасштаб = Истина;
    
КонецПроцедуры

Функция СформироватьКомплектПечатныхФорм(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати) Экспорт
	
	Перем АдресКомплектаПечатныхФорм;
	
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура") И ПараметрыПечати.Свойство("АдресКомплектаПечатныхФорм", АдресКомплектаПечатныхФорм) Тогда
		
		КомплектПечатныхФорм = ПолучитьИзВременногоХранилища(АдресКомплектаПечатныхФорм);
		
	Иначе
		
		КомплектПечатныхФорм = РегистрыСведений.НастройкиПечатиОбъектов.КомплектПечатныхФорм(
			Метаданные.Документы.КоммерческоеПредложениеКлиенту.ПолноеИмя(),
			МассивОбъектов, Неопределено);
		
	КонецЕсли;
	
	Если КомплектПечатныхФорм = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяМакета = "КоммерческоеПредложение";
	ТекущийКомплект = КомплектПечатныхФорм.Скопировать(Новый Структура("Имя,Печатать,",ИмяМакета,Истина));
	Если ТекущийКомплект.Количество() > 0 Тогда
		Если ТекущийКомплект.Колонки.Найти("Ссылка") <> Неопределено И ЗначениеЗаполнено(ТекущийКомплект[0].Ссылка) Тогда
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекциюОдинЭкземпляр(КоллекцияПечатныхФорм, ИмяМакета);
			ТаблицаСсылок = ТекущийКомплект.Скопировать(,"Ссылка");
			ТаблицаСсылок.Свернуть("Ссылка");
			ТекущийМассивОбъектов = ТаблицаСсылок.ВыгрузитьКолонку("Ссылка");
		Иначе
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, ТекущийКомплект[0]);
			ТекущийМассивОбъектов = МассивОбъектов
		КонецЕсли;
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			ИмяМакета,
			ТекущийКомплект[0].Представление,
			СформироватьПечатнуюФормуКоммерческогоПредложения(ТекущийМассивОбъектов, ОбъектыПечати, ТекущийКомплект));
	КонецЕсли;
		
	РегистрыСведений.НастройкиПечатиОбъектов.СформироватьКомплектВнешнихПечатныхФорм(
		"Документ.пкКоммерческоеПредложениеНаАрендуТехники",
		МассивОбъектов,
		ПараметрыПечати,
		КоллекцияПечатныхФорм,
		ОбъектыПечати);
	
КонецФункции

Функция КомплектПечатныхФорм() Экспорт
	
	КомплектПечатныхФорм = РегистрыСведений.НастройкиПечатиОбъектов.ПодготовитьКомплектПечатныхФорм();
	
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "КоммерческоеПредложение", НСтр("ru = 'Коммерческое предложение'"), 1);
	
	Возврат КомплектПечатныхФорм;
	
КонецФункции

Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Партнер";
	
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Партнер");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("КонтактноеЛицо");
	
КонецПроцедуры

Функция ДоступныеДляШаблоновПечатныеФормы() Экспорт

	МассивДоступныхПечатныхФорм = Новый Массив;
	
	
	МассивДоступныхПечатныхФорм.Добавить(ШаблоныСообщенийСервер.СтруктураПараметровДоступнойПечатнойФормы(
	                                     "КоммерческоеПредложение", НСтр("ru = 'Коммерческое предложение'"),
	                                     "Документ.КоммерческоеПредложениеКлиенту", Неопределено));
	
	Возврат МассивДоступныхПечатныхФорм

КонецФункции

#КонецОбласти

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
// Описание параметров процедуры см. в ТекущиеДелаСлужебный.НоваяТаблицаТекущихДел()
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаСписка";
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСлужебный.ОбщиеПараметрыЗапросов();
	
	// Определим доступны ли текущему пользователю показатели группы
	Доступность =
		(ОбщиеПараметрыЗапросов.ЭтоПолноправныйПользователь
			Или ПравоДоступа("Просмотр", Метаданные.Документы.КоммерческоеПредложениеКлиенту))
		И ПравоДоступа("Изменение", Метаданные.Документы.КоммерческоеПредложениеКлиенту)
		И ПолучитьФункциональнуюОпцию("ИспользоватьКоммерческиеПредложенияКлиентам");
	
	Если НЕ Доступность Тогда
		Возврат;
	КонецЕсли;
	
	// Расчет показателей
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА КоммерческоеПредложениеКлиенту.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.Действует)
	|					ИЛИ КоммерческоеПредложениеКлиенту.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано)
	|				ТОГДА КоммерческоеПредложениеКлиенту.Ссылка
	|		КОНЕЦ) КАК КоммерческиеПредложенияКлиентамВсегоВРаботе,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА (КоммерческоеПредложениеКлиенту.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано)
	|					ИЛИ КоммерческоеПредложениеКлиенту.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.Действует))
	|					И КоммерческоеПредложениеКлиенту.СрокДействия < &ДатаАктуальности
	|					И КоммерческоеПредложениеКлиенту.СрокДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|					И КоммерческоеПредложениеКлиенту.Проведен
	|				ТОГДА КоммерческоеПредложениеКлиенту.Ссылка
	|		КОНЕЦ) КАК КоммерческиеПредложенияКлиентамПросроченные
	|ИЗ
	|	Документ.КоммерческоеПредложениеКлиенту КАК КоммерческоеПредложениеКлиенту
	|ГДЕ
	|	КоммерческоеПредложениеКлиенту.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.Отменено)
	|	И КоммерческоеПредложениеКлиенту.Менеджер = &Пользователь
	|	И (НЕ КоммерческоеПредложениеКлиенту.ПометкаУдаления)";
	
	Результат = ТекущиеДелаСлужебный.ЧисловыеПоказателиТекущихДел(Запрос, ОбщиеПараметрыЗапросов);
	
	// Заполнение дел.
	// КоммерческиеПредложенияКлиентам
	ДелоРодитель = ТекущиеДела.Добавить();
	ДелоРодитель.Идентификатор  = "КоммерческиеПредложенияКлиентам";
	ДелоРодитель.Представление  = НСтр("ru = 'Коммерческие предложения клиентам'");
	ДелоРодитель.Владелец       = Метаданные.Подсистемы.Продажи;
	
	// КоммерческиеПредложенияКлиентамВсегоВРаботе
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Состояние", "ВсеВРаботе");
	ПараметрыОтбора.Вставить("Актуальность", "");
	ПараметрыОтбора.Вставить("ДатаСобытия", ОбщиеПараметрыЗапросов.ПустаяДата);
	ПараметрыОтбора.Вставить("Менеджер", ОбщиеПараметрыЗапросов.Пользователь);
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "КоммерческиеПредложенияКлиентамВсегоВРаботе";
	Дело.ЕстьДела       = Результат.КоммерческиеПредложенияКлиентамВсегоВРаботе > 0;
	Дело.Представление  = НСтр("ru = 'Всего предложений в работе'");
	Дело.Количество     = Результат.КоммерческиеПредложенияКлиентамВсегоВРаботе;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	Дело.Владелец       = "КоммерческиеПредложенияКлиентам";
	
	// КоммерческиеПредложенияКлиентамПросроченные
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Состояние", Неопределено);
	ПараметрыОтбора.Вставить("Актуальность", "Просроченные");
	ПараметрыОтбора.Вставить("ДатаСобытия", ОбщиеПараметрыЗапросов.ПустаяДата);
	ПараметрыОтбора.Вставить("Менеджер", ОбщиеПараметрыЗапросов.Пользователь);
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "КоммерческиеПредложенияКлиентамПросроченные";
	Дело.ЕстьДела       = Результат.КоммерческиеПредложенияКлиентамПросроченные > 0;
	Дело.Представление  = НСтр("ru = 'Просроченные предложения'");
	Дело.Количество     = Результат.КоммерческиеПредложенияКлиентамПросроченные;
	Дело.Важное         = Истина;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	Дело.Владелец       = "КоммерческиеПредложенияКлиентам";
	
	Если Результат.КоммерческиеПредложенияКлиентамВсегоВРаботе > 0
		Или Результат.КоммерческиеПредложенияКлиентамПросроченные > 0 Тогда
		ДелоРодитель.ЕстьДела = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

#КонецОбласти

#КонецОбласти

#КонецЕсли
