&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
    //УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Свойства"
    //ДополнительныеПараметры = Новый Структура;
    //ДополнительныеПараметры.Вставить("Объект", Объект);
    //ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
    //ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
    //УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	ИспользоватьРучныеСкидкиВПродажах           = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьАвтоматическиеСкидкиВПродажах   = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	ИспользоватьОграниченияРучныхСкидок = ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоПользователям")
	                                      ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоСоглашениям");
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		СтатусДокумента = Объект.Статус;
        Объект.СрокДействия = НачалоДня(ТекущаяДата()) + 30 * 3600 * 24;
        
	КонецЕсли;
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ГруппаИтого.ЦветФона = Новый Цвет();
	КонецЕсли;
	
	ОбновитьСостояниеСервер(Объект.Ссылка, Состояние, СостояниеПросрочено);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаДокументОснование", "Видимость", ЗначениеЗаполнено(Объект.ДокументОснование));
	
	// Подсистема "ЭлектронныеДокументы"
	//УстановитьТекстСостоянияЭДНаСервере();
	
    //СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	УстановитьДоступностьКомандБуфераОбмена();

	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	// Подсистема "ОбменСКонтрагентами".
	ПараметрыПриСозданииНаСервере = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСписка();
	ПараметрыПриСозданииНаСервере.Форма = ЭтотОбъект;
	ПараметрыПриСозданииНаСервере.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаСписка(ПараметрыПриСозданииНаСервере);
	// Конец подсистема "ОбменСКонтрагентами".
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	// ВводНаОсновании
	//ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании

	// МенюОтчеты
	//МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты
    
    ИспользоватьСоглашенияСКлиентами = Ложь;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
    //УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	Если Объект.Проведен Тогда
		СтатусДокумента = Объект.Статус;
	Иначе
		СтатусДокумента = Перечисления.СтатусыКоммерческихПредложенийКлиентам.ПустаяСсылка();
	КонецЕсли;

	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьСостояниеСервер(Объект.Ссылка, Состояние, СостояниеПросрочено);
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакТипНоменклатуры, ЗаполнитьПризнакАртикул, пкТипТехники",
			Новый Структура("Номенклатура", "ТипНоменклатуры"),
			Новый Структура("Номенклатура", "Артикул"),
            Новый Структура("Номенклатура", "ТипТехники")));
			
	// Подсистема "ЭлектронныеДокументы"
	УстановитьТекстСостоянияЭДНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("Сделка", Объект.Сделка);
	Оповестить("Запись_КоммерческоеПредложениеКлиенту", ПараметрыЗаписи, Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НеВыполнятьПроверкуПередЗаписью Тогда
		НеВыполнятьПроверкуПередЗаписью = Ложь;
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ЗагрузкаДанныхИзВнешнихФайлов.Форма.Форма" Тогда
		
		ПолучитьЗагруженныеТоварыИзХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
    //Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
    //	ОбновитьЭлементыДополнительныхРеквизитов();
    //	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
    //КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(СобытияФормГИСМКлиентПереопределяемый.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
	// Подсистема "ЭлектронныеДокументы"
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		УстановитьТекстСостоянияЭДНаСервере();
	КонецЕсли;
	
	Если ИмяСобытия = "СчитанаКартаЛояльности"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		СчитанаКартаЛояльности(Новый ОписаниеОповещения("ОбработкаОповещенияЗавершение", ЭтотОбъект, Новый Структура("ИмяСобытия, Параметр", ИмяСобытия, Параметр)), Параметр.КартаЛояльности);
        Возврат;
	КонецЕсли;
	
	ОбработкаОповещенияФрагмент(ИмяСобытия, Параметр);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ИмяСобытия = ДополнительныеПараметры.ИмяСобытия;
    Параметр = ДополнительныеПараметры.Параметр;
    
    
    ОбработкаОповещенияФрагмент(ИмяСобытия, Параметр);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияФрагмент(Знач ИмяСобытия, Знач Параметр)
    
    Если ИмяСобытия = "ПолученыСообщения"
        И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
        ПолученыСообщения(Параметр.Сообщения);
    КонецЕсли;
    
    Если ИмяСобытия = "ИзмененРеквизитЗависящийОтСтатуса"
        И Параметр.УникальныйИдентификатор = УникальныйИдентификатор Тогда
        Если Объект.Согласован Тогда
            Объект.Согласован = Ложь;
        КонецЕсли;
        ПодключитьОбработчикОжидания("Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса", 0.1, Истина);
    КонецЕсли;
    
    Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
        
        УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
        
    КонецЕсли;
    
    Если ИмяСобытия = "ДобавлениеПартнераВСегмент"
        ИЛИ ИмяСобытия = "УдалениеПартнераИзСегмента" Тогда
        
        УстановитьВидимостьЗапретаОтгрузкиПартнеру();
    КонецЕсли;
        
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик подсистемы "Свойства"
    //УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено (Объект.Партнер) Тогда
		УстановитьВидимостьЗапретаОтгрузкиПартнеру();
		Возврат;
	КонецЕсли;

	ПриИзмененииПартнераСервер();
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
    
    Если ТипЗнч(Объект.КонтактноеЛицо) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
    	Если Объект.КонтактноеЛицо.Пустая() Тогда
    		Возврат;
        КонецЕсли;
            	
    	ПартнерИзменился = Ложь;
    	КонтактноеЛицоПриИзмененииСервер(ПартнерИзменился);
    	    	
    КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НалогообложениеНДСПриИзменении(Элемент)
	
	НалогообложениеНДСПриИзмененииСервер(КэшированныеЗначения);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
		
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	ВалютаДокумента = Объект.Валюта;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	СтатусДокумента = Объект.Статус;
	
	Если Объект.Согласован И 
		Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыКоммерческихПредложенийКлиентам.Действует")
		И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыКоммерческихПредложенийКлиентам.Отменено") Тогда
		
		Объект.Согласован = Ложь;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ФормаОплатыПриИзменении(Элемент)
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	ЗаполнитьНалогообложениеНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КартаЛояльностиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КартыЛояльностиКлиент.НачалоВыбораКартыЛояльности(Элемент, СтандартнаяОбработка, Объект.Партнер, Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура КартаЛояльностиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СчитанаКартаЛояльности(Неопределено, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТекстСостоянияЭД = "Настроить ЭДО с контрагентом" И Не ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Настроить ЭДО с контрагентом из данной формы возможно только при заполненном ""Соглашении""'"), Объект.Ссылка, "Объект.Соглашение");
	Иначе
		ОбменСКонтрагентамиКлиент.ОткрытьДеревоЭД(Объект.Ссылка);		
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстОтгрузкаПартнеруЗапрещенаНажатие(Элемент)
	ОткрытьФорму("Справочник.Партнеры.Форма.ФормаСегментовЗапретаОтгрузки", Новый Структура("Партнер", Объект.Партнер));
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)

	Если Копирование Тогда
		Возврат;
	КонецЕсли;

	Если ФлагРекурсии Тогда
		
		ФлагРекурсии = Ложь;
		Возврат;
		
	КонецЕсли;

	Отказ        = Истина;
	ФлагРекурсии = Истина;
	
	Элементы.Товары.ДобавитьСтроку();
	
	НоваяСтрока            = Элементы.Товары.ТекущиеДанные;
	
	Если Не НоваяСтрока = Неопределено Тогда
		НоваяСтрока.Активность = Истина;
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПродажиКлиент.СтрокаНоменклатурыПриНачалеРедактирования(ЭтаФорма, "Товары", ТекущаяСтрока, НоваяСтрока, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
    //Если Поле = Элементы.ТоварыЦена Тогда
    //	
    //	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
    //	Если ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) И НЕ Объект.Согласован Тогда
    //		ОчиститьСообщения();
    //		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
    //			НСтр("ru='Для редактирования цены выберите вид цены ""<произвольная>""'"),
    //			Объект.Ссылка,
    //			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущиеДанные.НомерСтроки, "ВидЦены"),);
    //	КонецЕсли;
    //	
    //КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыборЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
    Поле = ДополнительныеПараметры.Поле;
    
    
    Результат = РезультатВопроса;
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    Иначе
        
        СтруктураПараметры = Новый Структура;
        СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
        СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
        СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
        СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
        
        СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
        Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
            ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
        КонецЕсли;
        
    КонецЕсли;
    
    ТоварыВыборФрагмент();

КонецПроцедуры

&НаКлиенте
Функция ТоварыВыборФрагмент()
    
    Если Не ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
        РассчитатьСкидкиБезПримененияКОбъекту();
    КонецЕсли;
    
    ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
    СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтаФорма);
    Возврат ТекущиеДанные;

КонецФункции

&НаКлиенте
Процедура ТоварыАктивностьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыАктивностьПриИзмененииНаСервере()
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
    		
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.ЕдиницаИзмеренияКраткосрочнойЦены);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.ЕдиницаИзмеренияДолгосрочнойЦены);
    //СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("пкТипТехники", Новый Структура("Номенклатура", "ТипТехники"));
    
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
    
    СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентРучнойСкидкиКраткосрочныйПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
    
    Если ТекущиеДанные.ПроцентРучнойСкидкиКраткосрочный <> 0 Тогда  
        ТекущиеДанные.ЦенаКраткосрочная = ТекущиеДанные.ЦенаКраткосрочнаяПрайс - ТекущиеДанные.ЦенаКраткосрочнаяПрайс / 100 * ТекущиеДанные.ПроцентРучнойСкидкиКраткосрочный; 
    КонецЕсли;     
      
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентРучнойСкидкиДолгосрочныйПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
    
    Если ТекущиеДанные.ПроцентРучнойСкидкиДолгосрочный <> 0 Тогда  
        ТекущиеДанные.ЦенаДолгосрочная = ТекущиеДанные.ЦенаДолгосрочнаяПрайс - ТекущиеДанные.ЦенаДолгосрочнаяПрайс / 100 * ТекущиеДанные.ПроцентРучнойСкидкиДолгосрочный; 
    КонецЕсли;     
      
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	//МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец МенюОтчеты

&НаКлиенте
Процедура АвтоТест_ЗаполнитьЦеныПоСоглашению(Команда) Экспорт

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтметкиАктивностиВыделенныхСтрок(Команда)
	
	УстановитьСнятьОтметкиАктивностиВыделенныхСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкиАктивностиВыделенныхСтрок(Команда)

	УстановитьСнятьОтметкиАктивностиВыделенныхСтрок(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Валюта"" не заполнено'"), Объект.Ссылка, "Объект.Валюта",,Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
		
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценки(Команда)
	
	РассчитатьСкидкиНаценкиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидках(Команда)
	
	Если Не Объект.СкидкиРассчитаны Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОткрытьИнформациюОСкидкахЗавершение", ЭтотОбъект), 
			НСтр("ru = 'Скидки (наценки) не рассчитаны, рассчитать?'"), РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ОткрытьИнформациюОСкидкахФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Результат = РезультатВопроса;
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    Иначе
        
        СтруктураПараметры = Новый Структура;
        СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
        СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
        СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
        СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
        
        СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
        Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
            ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
        КонецЕсли;
        
    КонецЕсли;
    
    ОткрытьИнформациюОСкидкахФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахФрагмент()
    
    Если НЕ ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
        РассчитатьСкидкиБезПримененияКОбъекту();
    КонецЕсли;
    
    ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
    СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидку(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Ложь, Истина);
	
	Оповещение = Новый ОписаниеОповещения(
		"НазначитьРучнуюСкидкуЗавершение", 
		ЭтотОбъект, 
		Новый Структура("АдресВоВременномХранилище", АдресВоВременномХранилище));
	
	СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(
		АдресВоВременномХранилище,
		Объект.Валюта,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуЗавершение(СуммаРучнойСкидкиНаценки, ДополнительныеПараметры) Экспорт 
	
	АдресВоВременномХранилище = ДополнительныеПараметры.АдресВоВременномХранилище;
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, , АдресВоВременномХранилище);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
				
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуДляВыделенныхСтрок(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Истина, Ложь);
	
	Оповещение = Новый ОписаниеОповещения(
		"НазначитьРучнуюСкидкуДляВыделенныхСтрокЗавершение", 
		ЭтотОбъект, 
		Новый Структура("АдресВоВременномХранилище", АдресВоВременномХранилище));
	
	СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(
		АдресВоВременномХранилище,
		Объект.Валюта,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуДляВыделенныхСтрокЗавершение(СуммаРучнойСкидкиНаценки, ДополнительныеПараметры) Экспорт 
	
	АдресВоВременномХранилище = ДополнительныеПараметры.АдресВоВременномХранилище;
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, Элементы.Товары.ВыделенныеСтроки, АдресВоВременномХранилище);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРучныеСкидки(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможнаОтменаРучныхСкидокНаценок(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьРучныеСкидкиНаСервере();
	СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок();
		
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(Результат, Параметры) Экспорт
	
	Если Результат.Результат Тогда
		ОбработатьШтрихкоды(Результат.ТаблицаТоваров);
	Иначе
		МенеджерОборудованияУТКлиент.СообщитьОбОшибке(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСообщения(Команда)
	
	СкидкиНаценкиКлиент.ОткрытьФормуСообщений(ПолучитьСтруктуруСообщений(), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СчитатьКартуЛояльности(Команда)
	
	Если Объект.Согласован Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(
		"Справочник.КартыЛояльности.Форма.СчитываниеКартыЛояльности",
		Новый Структура("Партнер", Объект.Партнер),
		ЭтаФорма,
		ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(
		ДанныеТаблицы,
		ТаблицаФормы,
		Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	
	КоличествоВставленных = Объект.Товары.Количество()-КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.Товары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере();
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайла(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЗагружатьЦены", Истина);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("Валюта", Объект.Валюта);
	
	ОткрытьФорму(
		"Обработка.ЗагрузкаДанныхИзВнешнихФайлов.Форма.Форма",
		ПараметрыФормы,
		ЭтаФорма,
		УникальныйИдентификатор);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеСлужебныйКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    //УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    //УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ЗаполнитьПодчиненныеСвойстваПоСтатистике(ИмяРеквизитаРодителя)
	ЗаполнениеСвойствПоСтатистикеСервер.ЗаполнитьПодчиненныеСвойства(Объект, ИмяРеквизитаРодителя);
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Товары.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Активность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Состояние.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Состояние");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru = 'Отменено'");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Состояние.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СостояниеПросрочено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныйДокумент);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПроцентРучнойСкидки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Активность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ВыделятьОтрицательные", Истина);

	//

    //Элемент = УсловноеОформление.Элементы.Добавить();

    //ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
    //ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦена.Имя);

    //ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    //ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВидЦены");
    //ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
    //Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, "ТоварыНоменклатураЕдиницаИзмеренияКраткосрочнойЦены", "Объект.Товары.ЕдиницаИзмеренияКраткосрочнойЦены");
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, "ТоварыНоменклатураЕдиницаИзмеренияДолгосрочнойЦены",  "Объект.Товары.ЕдиницаИзмеренияДолгосрочнойЦены");
	
	//

	НаборыСервер.УстановитьУсловноеОформление(ЭтаФорма, "Товары");
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ПриИзмененииПартнераСервер()
		
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакТипНоменклатуры, ЗаполнитьПризнакАртикул, пкТипТехники",
			Новый Структура("Номенклатура", "ТипНоменклатуры"),
			Новый Структура("Номенклатура", "Артикул"),
            Новый Структура("Номенклатура", "ТипТехники")));
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой") Тогда
		ДоставкаТоваров.КоммерческоеПредложениеПриИзмененииПартнера(Элементы,Объект);
	КонецЕсли;
	УстановитьВидимостьЗапретаОтгрузкиПартнеру();
	
КонецПроцедуры

&НаСервере
Процедура КонтактноеЛицоПриИзмененииСервер(ПартнерИзменился)
    	
	ВладелецКонтактногоЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КонтактноеЛицо, "Владелец");
	Если ВладелецКонтактногоЛица <> Объект.Партнер Тогда
		Объект.Партнер = ВладелецКонтактногоЛица;
		ПриИзмененииПартнераСервер();
		ПартнерИзменился = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НалогообложениеНДСПриИзмененииСервер(КэшированныеЗначения = Неопределено)
		
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("пкТипТехники", Новый Структура("Номенклатура", "ТипТехники"));
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения)
			
	ВидЦеныПоУмолчанию = ЗначениеНастроекПовтИсп.ВидЦеныПоУмолчанию(, Объект.ЦенаВключаетНДС, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВалютыСервер(НоваяВалюта)
	
	СтараяВалюта                = ВалютаДокумента;
	СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтараяВалюта, Объект.Дата);
	СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта, Объект.Дата);
	
	Ценообразование.ПересчитатьСуммыТабличнойЧастиВВалюту(
		Объект.Товары,
		Объект.ЦенаВключаетНДС,
		СтараяВалюта,
		НоваяВалюта,
		СтруктураКурсовСтаройВалюты,
		СтруктураКурсовНовойВалюты,
		Истина,
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектСтроительстваНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
    Если ЗначениеЗаполнено(Объект.Партнер) И ТипЗнч(Объект.Партнер) = Тип("СправочникСсылка.Партнеры")
      И ТипЗнч(Объект.ОбъектСтроительства) = Тип("СправочникСсылка.СМ_ОбъектыСтроительства") Тогда
        СтандартнаяОбработка = Ложь;
        
        ОбъектыСтроительства = пкОбщегоНазначенияСервер.ПолучитьОбъектыСтроительстваКлиента(Объект.Партнер);
        
        Отбор = Новый Структура("Ссылка", ОбъектыСтроительства);
    
        ПараметрыФормы = Новый Структура("Отбор", Отбор);
    
        ОткрытьФорму("Справочник.СМ_ОбъектыСтроительства.Форма.ФормаВыбора", ПараметрыФормы, , , , , Новый ОписаниеОповещения("ОбъектСтроительстваНачалоВыбораЗавершение", ЭтаФорма));
    ИначеЕсли ТипЗнч(Объект.ОбъектСтроительства) = Тип("СправочникСсылка.СМ_ОбъектыСтроительства") Тогда
        СтандартнаяОбработка = Ложь;
                
        Отбор = Новый Структура("БезОтбора", Истина);
    
        ПараметрыФормы = Новый Структура("Отбор", Отбор);
    
        ОткрытьФорму("Справочник.СМ_ОбъектыСтроительства.Форма.ФормаВыбора", ПараметрыФормы, , , , , Новый ОписаниеОповещения("ОбъектСтроительстваНачалоВыбораЗавершение", ЭтаФорма));
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ОбъектСтроительстваНачалоВыбораЗавершение(ВыбранноеЗначение, ДопПараметры) Экспорт 
    
    Если ВыбранноеЗначение <> Неопределено Тогда
        Объект.ОбъектСтроительства = ВыбранноеЗначение;
    КонецЕсли;    
    
КонецПроцедуры   

#КонецОбласти

#Область ЦенообразованиеИСкидки

&НаСервере
Функция ПолучитьСтруктуруСообщений()
	
	Возврат СкидкиНаценкиСервер.ПолучитьСтруктуруСообщений(Объект);
	
КонецФункции

&НаКлиенте
Процедура РассчитатьСкидкиНаценкиКлиент()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
		ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Скидки (наценки)'"),
		,
		НСтр("ru = 'Скидки (наценки) рассчитаны'"),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьИзмененияСкидокНаценокНаКлиенте(Отказ)
	
	СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(Неопределено, Истина);
	Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
		ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
		Отказ = Истина;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Скидки (наценки)'"),
		,
		НСтр("ru = 'Скидки (наценки) рассчитаны'"),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСкидкиБезПримененияКОбъекту()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры, ВзятьИзВременногоХранилища = Ложь)
	
	Если ВзятьИзВременногоХранилища Тогда
		ПримененныеСкидки = ПолучитьИзВременногоХранилища(АдресПримененныхСкидокВоВременномХранилище);
		СкидкиНаценкиСервер.ПрименитьРезультатРасчета(Объект, ПримененныеСкидки);
	Иначе
		ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
		АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	КонецЕсли;
	
	Объект.СкидкиРассчитаны = Истина;
		
	СтруктураСообщений = СкидкиНаценкиСервер.ПолучитьСтруктуруСообщений(Объект);
	СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	
	Возврат СтруктураСообщений;
	
КонецФункции

&НаСервере
Процедура НазначитьРучнуюСкидкуНаСервере(СуммаСкидкиНаценки, Знач ВыделенныеСтроки = Неопределено, АдресВоВременномХранилище)
	
	Если ВыделенныеСтроки = Неопределено Тогда
		СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина, Истина);
	КонецЕсли;
	
	ПараметрыСкидки = Новый Структура();
	ПараметрыСкидки.Вставить("ТолькоДляАктивныхСтрок", Истина);
	ПараметрыСкидки.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);
	ПараметрыСкидки.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	
	СкидкиНаценкиСервер.НазначитьРучнуюСкидку(Объект, "Товары", СуммаСкидкиНаценки, ПараметрыСкидки);
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьПредварительныйРасчетСкидокНаСервере()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Истина);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	Возврат ПоместитьВоВременноеХранилище(СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОтменитьРучныеСкидкиНаСервере()
	
	СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПолученыСообщения(Сообщения)
	
	СкидкиНаценкиСервер.СохранитьОтработанныеСообщения(Объект, Сообщения);
	СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	
КонецПроцедуры

&НаСервере
Функция СкидкиИзменились()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
	
	СкидкиИзменились = Ложь;
	
	КоличествоСтрок = ПримененныеСкидки.ТаблицаСкидкиНаценки.Количество();
	Если КоличествоСтрок <> Объект.СкидкиНаценки.Количество() Тогда
		СкидкиИзменились = Истина;
    Иначе
        
		Для НомерСтроки = 1 По КоличествоСтрок Цикл
			Если    Объект.СкидкиНаценки[НомерСтроки-1].Сумма <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].Сумма
				ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].КлючСвязи <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].КлючСвязи
				ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].СкидкаНаценка <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].СкидкаНаценка
				ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].НапомнитьПозже <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].НапомнитьПозже Тогда
				СкидкиИзменились = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если СкидкиИзменились Тогда
		АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат СкидкиИзменились;
	
КонецФункции

&НаКлиенте
Процедура ПредложитьПользователюРассчитатьСкидкиЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Если ОтветНаВопрос = КодВозвратаДиалога.ОК Тогда
		
		Отказ = Ложь;
		ПрименитьИзмененияСкидокНаценокНаКлиенте(Отказ);
		
		ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтаФорма, ДополнительныеПараметры.ПараметрыЗаписи, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодборыИОбработкаПроверкиКоличества

&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение)
	
	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	
	ЭтаФорма.ЗаблокироватьДанныеФормыДляРедактирования();
		
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
    СтруктураДействийСДобавленнымиСтроками.Вставить("пкТипТехники", Новый Структура("Номенклатура", "ТипТехники"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("УстановитьАктивность");
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	
	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = Неопределено;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		
		Элементы.Товары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия,КэшированныеЗначения)
	
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма,Объект,СтруктураПараметровДействия,КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область ПодсистемаЭлектронныедокументы

&НаСервере
Процедура УстановитьТекстСостоянияЭДНаСервере()
	
	//ТекстСостоянияЭД = ОбменСКонтрагентамиКлиентСервер.ПолучитьТекстСостоянияЭД(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы.Товары.ВыделенныеСтроки, Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		
		ТекущаяСтрока.Активность = Истина;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	    СтруктураДействий.Вставить("пкТипТехники", Новый Структура("Номенклатура", "ТипТехники"));
				
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы,
		МассивЭлементов,
		"Доступность",
		НЕ ОбщегоНазначения.ПустойБуферОбмена("Строки"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
		
	ВалютаДокумента = Объект.Валюта;
	УстановитьДоступностьЭлементовПоСтатусуСервер();
    
	ПараметрыВыбораВидаЦены = ЗначениеНастроекПовтИсп.ПараметрыВыбораВидаЦеныПоУмолчанию();

	ПараметрыВыбораВидаЦены.ЦенаВключаетНДС        = Объект.ЦенаВключаетНДС;
	ПараметрыВыбораВидаЦены.ИспользоватьПриПродаже = Истина;
	ПараметрыВыбораВидаЦены.Статус                 = Перечисления.СтатусыДействияВидовЦен.Действует;
	
	ВидЦеныПоУмолчанию = ЗначениеНастроекПовтИсп.ВидЦеныПоУмолчанию(ПараметрыВыбораВидаЦены);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакТипНоменклатуры, ЗаполнитьПризнакАртикул, пкТипТехники",
			Новый Структура("Номенклатура", "ТипНоменклатуры"),
			Новый Структура("Номенклатура", "Артикул"),
            Новый Структура("Номенклатура", "ТипТехники")));
		
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой") Тогда
		Элементы.СпособДоставки.Видимость = Ложь;
	КонецЕсли;
	УстановитьВидимостьЗапретаОтгрузкиПартнеру();
    
	Объект.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	УстановитьПодписку = Ложь;
	
	Если Объект.Статус = Перечисления.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано Тогда
		УстановитьПодписку = Ложь;
	ИначеЕсли Объект.Статус = Перечисления.СтатусыКоммерческихПредложенийКлиентам.Отменено Тогда
		УстановитьПодписку = Объект.Согласован;
	ИначеЕсли Объект.Статус = Перечисления.СтатусыКоммерческихПредложенийКлиентам.Действует Тогда
		УстановитьПодписку = Объект.Согласован;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	// Элементы управления шапки
	МассивЭлементов.Добавить("Дата");
	МассивЭлементов.Добавить("Партнер");
	МассивЭлементов.Добавить("Организация");
	МассивЭлементов.Добавить("СрокДействия");
	МассивЭлементов.Добавить("ЦенаВключаетНДС");
	МассивЭлементов.Добавить("НалогообложениеНДС");
	МассивЭлементов.Добавить("СрокПоставки");
	МассивЭлементов.Добавить("ФормаОплаты");
	МассивЭлементов.Добавить("Склад");
	МассивЭлементов.Добавить("Валюта");
	МассивЭлементов.Добавить("КартаЛояльности");
	
	МассивЭлементов.Добавить("Товары;ПередНачаломДобавления,ПередУдалением");
	
	// Элементы управления, связанные с таблицей Товары
	МассивЭлементов.Добавить("ТоварыНоменклатура");
	МассивЭлементов.Добавить("ТоварыУпаковка");
	МассивЭлементов.Добавить("ТоварыЦенаКраткосрочная");
	МассивЭлементов.Добавить("ТоварыЦенаДолгосрочная");
	МассивЭлементов.Добавить("ТоварыПроцентРучнойСкидки");
	МассивЭлементов.Добавить("ТоварыТекстовоеОписание");
	
	// Элементы управления, связанные с таблицей Товары
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюДобавить");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюСкопировать");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюУдалить");
	
	МассивЭлементов.Добавить("ТоварыДобавить");
	МассивЭлементов.Добавить("ТоварыИзменить");
	МассивЭлементов.Добавить("ТоварыСкопировать");
	МассивЭлементов.Добавить("ТоварыУдалить");
	МассивЭлементов.Добавить("ТоварыРазбитьСтроку");
	МассивЭлементов.Добавить("ТоварыПоискПоШтрихкоду");
	
	МассивЭлементов.Добавить("ТоварыОткрытьПодбор");
	
	МассивЭлементов.Добавить("ТоварыЗагрузитьДанныеИзТСД");
		
	МассивЭлементов.Добавить("ТоварыРассчитатьСкидкиНаценки");
	МассивЭлементов.Добавить("ТоварыОтменитьРучныеСкидки");
	МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидку");
	МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидкуВыделенныхСтрок");
	МассивЭлементов.Добавить("СчитатьКартуЛояльности");
	МассивЭлементов.Добавить("КартаЛояльности");
	
	ОбщегоНазначенияУТ.УстановитьПодпискуНаСобытияИзмененияЭлементовФормы(ЭтаФорма, МассивЭлементов, УстановитьПодписку);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьОтметкиАктивностиВыделенныхСтрок(Установить = Истина)
	
	Если Объект.Товары.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Таблица товаров не заполнена.'"));
		Возврат;
	КонецЕсли;
	        
   Для Каждого ТекущаяСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.Активность <> Установить Тогда
			
			СтрокаТаблицы.Активность = Установить;
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция  ПолучитьФормуОплатыСервер(ГрафикОплаты)
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ГрафикиОплаты.ФормаОплаты КАК ФормаОплаты
		|ИЗ
		|	Справочник.ГрафикиОплаты КАК ГрафикиОплаты
		|ГДЕ
		|	ГрафикиОплаты.Ссылка = &ГрафикОплаты
		|");
		
	Запрос.УстановитьПараметр("ГрафикОплаты", ГрафикОплаты);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ФормаОплаты;
	
КонецФункции

&НаСервере
Процедура ОбновитьСостояниеСервер(КоммерческоеПредложение, Состояние, СостояниеПросрочено)
	
	Документы.КоммерческоеПредложениеКлиенту.РассчитатьСостояние(КоммерческоеПредложение, Состояние, СостояниеПросрочено);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
    //УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
    //УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СчитанаКартаЛояльностиНаСервере(ДанныеКартыЛояльности)
	
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Партнер) И ДанныеКартыЛояльности.Партнер <> Объект.Партнер Тогда
		Объект.Партнер = ДанныеКартыЛояльности.Партнер;
		Объект.Соглашение = Справочники.СоглашенияСКлиентами.ПустаяСсылка();
		ПриИзмененииПартнераСервер();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СчитанаКартаЛояльности(Знач Оповещение, КартаЛояльности)
	
	ДанныеКартыЛояльности = КартыЛояльностиВызовСервера.ПолучитьДанныеКартыЛояльности(КартаЛояльности);
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Ссылка) Тогда
		
		Если Не ДанныеКартыЛояльности.ПартнерДоступен Тогда
			ПоказатьПредупреждение(Новый ОписаниеОповещения("СчитанаКартаЛояльностиЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), НСтр("ru = 'Нет доступа к партнеру-владельцу карты лояльности.'"));
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеКартыЛояльности.Партнер) Тогда // Обезличенная карта
			
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
			Модифицированность = Истина;
			Объект.КартаЛояльности   = КартаЛояльности;
			
			ВыполнитьОбработкуОповещения(Оповещение);
			Возврат;
			
		ИначеЕсли Объект.Партнер <> ДанныеКартыЛояльности.Партнер Тогда // Партнер в карте отличается от партнера в документе.
			
			Если ЗначениеЗаполнено(Объект.Партнер) Тогда
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("Оповещение", Оповещение);
				ДополнительныеПараметры.Вставить("КартаЛояльности", КартаЛояльности);
				ДополнительныеПараметры.Вставить("ДанныеКартыЛояльности", ДанныеКартыЛояльности);
				ПоказатьВопрос(
					Новый ОписаниеОповещения("СчитанаКартаЛояльностиВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры),
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Карта лояльности принадлежит партнеру ""%1"". Изменить партнера в документе?'"), ДанныеКартыЛояльности.Партнер),
					РежимДиалогаВопрос.ДаНет);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		Модифицированность = Истина;
		Объект.КартаЛояльности   = КартаЛояльности;
		СчитанаКартаЛояльностиНаСервере(ДанныеКартыЛояльности);
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура СчитанаКартаЛояльностиВопросЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение);
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		Модифицированность = Истина;
		Объект.КартаЛояльности   = ДополнительныеПараметры.КартаЛояльности;
		СчитанаКартаЛояльностиНаСервере(ДополнительныеПараметры.ДанныеКартыЛояльности);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчитанаКартаЛояльностиЗавершение(ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
    
    ВыполнитьОбработкуОповещения(Оповещение);

КонецПроцедуры

&НаСервере
Функция АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ТолькоВыделенныеСтроки, ТолькоАктивныеСтроки)
	
	Возврат СкидкиНаценкиСервер.АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ЭтаФорма, "Товары", УникальныйИдентификатор, ТолькоВыделенныеСтроки,,ТолькоАктивныеСтроки);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьУсловияПродаж()
	
	ДокументПродажи = РеквизитФормыВЗначение("Объект");
	ДокументПродажи.ЗаполнитьУсловияПродажПоУмолчанию();
	
	ЗначениеВРеквизитФормы(ДокументПродажи, "Объект");
	ВалютаДокумента = Объект.Валюта;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНалогообложениеНДС()
	Объект.НалогообложениеНДС = ЗначениеНастроекПовтИсп.НалогообложениеНДС(Объект.Организация, Объект.Склад, , , Объект.Дата);
	НалогообложениеНДСПриИзмененииСервер();
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЗапретаОтгрузкиПартнеру()
	
	СегментыСервер.УстановитьВидимостьЗапретаОтгрузкиПартнеру(Объект.Партнер, Элементы);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьЗагруженныеТоварыИзХранилища(АдресТоваровВХранилище)
	
	СтруктураДействий = Новый Структура;
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ТоварыИзХранилища = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	
	Для Каждого СтрокаТоваров Из ТоварыИзХранилища Цикл
		СтрокаТЧТовары = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТоваров);
		СтрокаТЧТовары.Активность = Истина;
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧТовары, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ЗаполнитьНалогообложениеНДС();
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Организация");
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольНесогласованныхИзменений

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент)
    Если Элемент.Имя = "Дата" Тогда
    	ДатаПриИзменении(Элемент);
    ИначеЕсли Элемент.Имя = "Партнер" Тогда
    	ПартнерПриИзменении(Элемент);
    ИначеЕсли Элемент.Имя = "Организация" Тогда
    	ОрганизацияПриИзменении(Элемент);
    ИначеЕсли Элемент.Имя = "НалогообложениеНДС" Тогда
    	НалогообложениеНДСПриИзменении(Элемент);
    ИначеЕсли Элемент.Имя = "ФормаОплаты" Тогда
    	ФормаОплатыПриИзменении(Элемент);
    ИначеЕсли Элемент.Имя = "Склад" Тогда
    	СкладПриИзменении(Элемент);
    ИначеЕсли Элемент.Имя = "Валюта" Тогда
    	ВалютаПриИзменении(Элемент);
    ИначеЕсли Элемент.Имя = "ТоварыАктивность" Тогда
    	ТоварыАктивностьПриИзменении(Элемент);
    ИначеЕсли Элемент.Имя = "ТоварыНоменклатура" Тогда
    	ТоварыНоменклатураПриИзменении(Элемент);
    ИначеЕсли Элемент.Имя = "ТоварыУпаковка" Тогда
    	ТоварыУпаковкаПриИзменении(Элемент);
    ИначеЕсли Элемент.Имя = "ТоварыЦена" Тогда
    	ТоварыЦенаПриИзменении(Элемент);
    ИначеЕсли Элемент.Имя = "ТоварыПроцентРучнойСкидки" Тогда
    	ТоварыПроцентРучнойСкидкиКраткосрочныйПриИзменении(Элемент);
    ИначеЕсли Элемент.Имя = "ТоварыПроцентРучнойСкидкиДолгосрочный" Тогда
    	ТоварыПроцентРучнойСкидкиДолгосрочныйПриИзменении(Элемент);
    Иначе
    	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда)
    Если Команда.Имя = "РазбитьСтроку" Тогда
    	РазбитьСтроку(Команда);
    ИначеЕсли Команда.Имя = "ПоискПоШтрихкоду" Тогда
    	ПоискПоШтрихкодуВыполнить(Команда);
    ИначеЕсли Команда.Имя = "ОткрытьПодбор" Тогда
    	ОткрытьПодбор(Команда);
    ИначеЕсли Команда.Имя = "ЗагрузитьДанныеИзТСД" Тогда
    	ЗагрузитьДанныеИзТСД(Команда);
    ИначеЕсли Команда.Имя = "РассчитатьСкидкиНаценки" Тогда
    	РассчитатьСкидкиНаценки(Команда);
    ИначеЕсли Команда.Имя = "ОтменитьРучныеСкидки" Тогда
    	ОтменитьРучныеСкидки(Команда);
    ИначеЕсли Команда.Имя = "НазначитьРучнуюСкидку" Тогда
    	НазначитьРучнуюСкидку(Команда);
    ИначеЕсли Команда.Имя = "НазначитьРучнуюСкидкуВыделенныхСтрок" Тогда
    	НазначитьРучнуюСкидкуДляВыделенныхСтрок(Команда);
    ИначеЕсли Команда.Имя = "СчитатьКартуЛояльности" Тогда
    	СчитатьКартуЛояльности(Команда);
    Иначе
    	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Команда);
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеНажатие(Элемент)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если Элемент.Имя = "Товары" Тогда
		ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзменении_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПриИзменении.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Нажатие_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Нажатие.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеНажатие(Элемент);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Команда_УстановитьДоступностьЭлементовПоСтатусуСервер(Команда)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Команды.Свойство(Команда.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломИзменения_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломИзменения.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередУдалением_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломДобавления_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломДобавления.Свойство(Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса()
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	ОбщегоНазначенияУТКлиент.ПослеИзмененияРеквизитаЗависящегоОтСтатуса(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьВидимостьПоляПартнер()
	
	ВидимостьКЛ = Элементы.СчитатьКартуЛояльностиКлиент.Видимость;
	Если ВидимостьКЛ Тогда
		ВидимостьКЛ = ПолучитьФункциональнуюОпцию("ИспользоватьКартыЛояльности");
	КонецЕсли;
	
	Элементы.ПартнерБезКЛ.Видимость = НЕ ВидимостьКЛ;
	Элементы.Партнер.Видимость      = ВидимостьКЛ;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипыТехникиПриАктивизацииСтроки(Элемент)
    
    ТекущиеДанные = Элементы.ТипыТехники.ТекущиеДанные;
    
    Если ТекущиеДанные <> Неопределено Тогда
        Отбор = Новый Структура();
        
        Отбор.Вставить("ТипТехники", ТекущиеДанные.ТипТехники);
        
        Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
    КонецЕсли;    
    
КонецПроцедуры

&НаКлиенте
Процедура ПрайсЛистПриИзменении(Элемент)
    
    ПоказатьВопрос(Новый ОписаниеОповещения("ПрайсЛистПриИзмененииЗавершение", ЭтаФорма), "Заполнить технику по прайс-листу?", РежимДиалогаВопрос.ДаНет); 
    
КонецПроцедуры

&НаКлиенте
Процедура ПрайсЛистПриИзмененииЗавершение(Результат, ДопПараметры) Экспорт
    
    Если Результат = КодВозвратаДиалога.Да Тогда
        ПрайсЛистПриИзмененииНаСервере();    
    КонецЕсли;    
    
КонецПроцедуры    

&НаСервере
Процедура ПрайсЛистПриИзмененииНаСервере()
    
    Объект.ТипыТехники.Очистить();
    Объект.Товары.Очистить();
    
    ЗаполнитьТехникуПоПрайсу();    
    
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТехникуПоПрайсу()
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   ЦеныНоменклатурыСрезПоследних.Номенклатура,
    |   МАКСИМУМ(ВЫБОР
    |           КОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦенКраткосрочная
    |               ТОГДА ЦеныНоменклатурыСрезПоследних.Цена * ЕСТЬNULL(КурсВалютыВидаЦен.Курс, 1) * ЕСТЬNULL(КурсВалютыВидаЦен.Кратность, 1) / ВЫБОР
    |                       КОГДА ЕСТЬNULL(КурсВалютыДокумента.Курс, 1) = 0
    |                           ТОГДА 1
    |                       ИНАЧЕ ЕСТЬNULL(КурсВалютыДокумента.Курс, 1)
    |                   КОНЕЦ / ВЫБОР
    |                       КОГДА ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1) = 0
    |                           ТОГДА 1
    |                       ИНАЧЕ ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1)
    |                   КОНЕЦ
    |           ИНАЧЕ 0
    |       КОНЕЦ) КАК ЦенаКраткосрочнаяПрайс,
    |   МАКСИМУМ(ВЫБОР
    |           КОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦенКраткосрочнаяМинимальная
    |               ТОГДА ЦеныНоменклатурыСрезПоследних.Цена * ЕСТЬNULL(КурсВалютыВидаЦен.Курс, 1) * ЕСТЬNULL(КурсВалютыВидаЦен.Кратность, 1) / ВЫБОР
    |                       КОГДА ЕСТЬNULL(КурсВалютыДокумента.Курс, 1) = 0
    |                           ТОГДА 1
    |                       ИНАЧЕ ЕСТЬNULL(КурсВалютыДокумента.Курс, 1)
    |                   КОНЕЦ / ВЫБОР
    |                       КОГДА ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1) = 0
    |                           ТОГДА 1
    |                       ИНАЧЕ ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1)
    |                   КОНЕЦ
    |           ИНАЧЕ 0
    |       КОНЕЦ) КАК ЦенаКраткосрочнаяМинимальная,
    |   МАКСИМУМ(ВЫБОР
    |           КОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦенДолгосрочная
    |               ТОГДА ЦеныНоменклатурыСрезПоследних.Цена * ЕСТЬNULL(КурсВалютыВидаЦен.Курс, 1) * ЕСТЬNULL(КурсВалютыВидаЦен.Кратность, 1) / ВЫБОР
    |                       КОГДА ЕСТЬNULL(КурсВалютыДокумента.Курс, 1) = 0
    |                           ТОГДА 1
    |                       ИНАЧЕ ЕСТЬNULL(КурсВалютыДокумента.Курс, 1)
    |                   КОНЕЦ / ВЫБОР
    |                       КОГДА ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1) = 0
    |                           ТОГДА 1
    |                       ИНАЧЕ ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1)
    |                   КОНЕЦ
    |           ИНАЧЕ 0
    |       КОНЕЦ) КАК ЦенаДолгосрочнаяПрайс,
    |   МАКСИМУМ(ВЫБОР
    |           КОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦенДолгосрочнаяМинимальная
    |               ТОГДА ЦеныНоменклатурыСрезПоследних.Цена * ЕСТЬNULL(КурсВалютыВидаЦен.Курс, 1) * ЕСТЬNULL(КурсВалютыВидаЦен.Кратность, 1) / ВЫБОР
    |                       КОГДА ЕСТЬNULL(КурсВалютыДокумента.Курс, 1) = 0
    |                           ТОГДА 1
    |                       ИНАЧЕ ЕСТЬNULL(КурсВалютыДокумента.Курс, 1)
    |                   КОНЕЦ / ВЫБОР
    |                       КОГДА ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1) = 0
    |                           ТОГДА 1
    |                       ИНАЧЕ ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1)
    |                   КОНЕЦ
    |           ИНАЧЕ 0
    |       КОНЕЦ) КАК ЦенаДолгосрочнаяМинимальная,
    |   МАКСИМУМ(ВЫБОР
    |           КОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦенКраткосрочная
    |                   ИЛИ ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦенКраткосрочнаяМинимальная
    |               ТОГДА ЦеныНоменклатурыСрезПоследних.Упаковка
    |           ИНАЧЕ НЕОПРЕДЕЛЕНО
    |       КОНЕЦ) КАК ЕдиницаИзмеренияКраткосрочнойЦены,
    |   МАКСИМУМ(ВЫБОР
    |           КОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦенДолгосрочная
    |                   ИЛИ ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦенДолгосрочнаяМинимальная
    |               ТОГДА ЦеныНоменклатурыСрезПоследних.Упаковка
    |           ИНАЧЕ НЕОПРЕДЕЛЕНО
    |       КОНЕЦ) КАК ЕдиницаИзмеренияДолгосрочнойЦены,
    |   ИСТИНА КАК Активность,
    |   ЦеныНоменклатурыСрезПоследних.Номенклатура.пкТипТехники КАК ТипТехники,
    |   ЦеныНоменклатурыСрезПоследних.Номенклатура.ВидНоменклатуры.ТипНоменклатуры КАК ТипНоменклатуры,
    |   ЦеныНоменклатурыСрезПоследних.Номенклатура.Артикул КАК Артикул
    |ИЗ
    |   РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
    |           &Период,
    |           (ВидЦены = &ВидЦенКраткосрочная
    |               ИЛИ ВидЦены = &ВидЦенКраткосрочнаяМинимальная
    |               ИЛИ ВидЦены = &ВидЦенДолгосрочная
    |               ИЛИ ВидЦены = &ВидЦенДолгосрочнаяМинимальная)
    |               И Номенклатура.пкЭтоТехника) КАК ЦеныНоменклатурыСрезПоследних
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсВалютыВидаЦен
    |       ПО ЦеныНоменклатурыСрезПоследних.Валюта = КурсВалютыВидаЦен.Валюта
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсВалютыДокумента
    |       ПО (КурсВалютыВидаЦен.Валюта = &Валюта)
    |
    |СГРУППИРОВАТЬ ПО
    |   ЦеныНоменклатурыСрезПоследних.Номенклатура,
    |   ЦеныНоменклатурыСрезПоследних.Номенклатура.пкТипТехники,
    |   ЦеныНоменклатурыСрезПоследних.Номенклатура.ВидНоменклатуры.ТипНоменклатуры,
    |   ЦеныНоменклатурыСрезПоследних.Номенклатура.Артикул
    |ИТОГИ ПО
    |   ТипТехники";
    
    Запрос.УстановитьПараметр("Период",                         Объект.Дата);
    Запрос.УстановитьПараметр("ВидЦенКраткосрочная",            Объект.ПрайсЛист.ВидЦенКраткосрочная);
    Запрос.УстановитьПараметр("ВидЦенКраткосрочнаяМинимальная", Объект.ПрайсЛист.ВидЦенКраткосрочнаяМинимальная);
    Запрос.УстановитьПараметр("ВидЦенДолгосрочная",             Объект.ПрайсЛист.ВидЦенДолгосрочная);
    Запрос.УстановитьПараметр("ВидЦенДолгосрочнаяМинимальная",  Объект.ПрайсЛист.ВидЦенДолгосрочнаяМинимальная);
    Запрос.УстановитьПараметр("Валюта",                         Объект.Валюта);
    
    ВыборкаТиповТехники = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
    
    Пока ВыборкаТиповТехники.Следующий() Цикл
        НоваяСтрока = Объект.ТипыТехники.Добавить();
        
        НоваяСтрока.ТипТехники = ВыборкаТиповТехники.ТипТехники;
        
        Выборка = ВыборкаТиповТехники.Выбрать();
        
        Пока Выборка.Следующий() Цикл
            НоваяСтрока = Объект.Товары.Добавить();
            
            ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
            
            НоваяСтрока.ЦенаКраткосрочная = НоваяСтрока.ЦенаКраткосрочнаяПрайс;
            НоваяСтрока.ЦенаДолгосрочная  = НоваяСтрока.ЦенаДолгосрочнаяПрайс;
        КонецЦикла;    
    КонецЦикла;    
    
КонецПроцедуры    

&НаСервере
Процедура ЗаполнитьСтрокуПоПрайсу(Модель)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   ЦеныНоменклатурыСрезПоследних.Номенклатура,
    |   МАКСИМУМ(ВЫБОР
    |           КОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦенКраткосрочная
    |               ТОГДА ЦеныНоменклатурыСрезПоследних.Цена * ЕСТЬNULL(КурсВалютыВидаЦен.Курс, 1) * ЕСТЬNULL(КурсВалютыВидаЦен.Кратность, 1) / ВЫБОР
    |                       КОГДА ЕСТЬNULL(КурсВалютыДокумента.Курс, 1) = 0
    |                           ТОГДА 1
    |                       ИНАЧЕ ЕСТЬNULL(КурсВалютыДокумента.Курс, 1)
    |                   КОНЕЦ / ВЫБОР
    |                       КОГДА ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1) = 0
    |                           ТОГДА 1
    |                       ИНАЧЕ ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1)
    |                   КОНЕЦ
    |           ИНАЧЕ 0
    |       КОНЕЦ) КАК ЦенаКраткосрочнаяПрайс,
    |   МАКСИМУМ(ВЫБОР
    |           КОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦенКраткосрочнаяМинимальная
    |               ТОГДА ЦеныНоменклатурыСрезПоследних.Цена * ЕСТЬNULL(КурсВалютыВидаЦен.Курс, 1) * ЕСТЬNULL(КурсВалютыВидаЦен.Кратность, 1) / ВЫБОР
    |                       КОГДА ЕСТЬNULL(КурсВалютыДокумента.Курс, 1) = 0
    |                           ТОГДА 1
    |                       ИНАЧЕ ЕСТЬNULL(КурсВалютыДокумента.Курс, 1)
    |                   КОНЕЦ / ВЫБОР
    |                       КОГДА ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1) = 0
    |                           ТОГДА 1
    |                       ИНАЧЕ ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1)
    |                   КОНЕЦ
    |           ИНАЧЕ 0
    |       КОНЕЦ) КАК ЦенаКраткосрочнаяМинимальная,
    |   МАКСИМУМ(ВЫБОР
    |           КОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦенДолгосрочная
    |               ТОГДА ЦеныНоменклатурыСрезПоследних.Цена * ЕСТЬNULL(КурсВалютыВидаЦен.Курс, 1) * ЕСТЬNULL(КурсВалютыВидаЦен.Кратность, 1) / ВЫБОР
    |                       КОГДА ЕСТЬNULL(КурсВалютыДокумента.Курс, 1) = 0
    |                           ТОГДА 1
    |                       ИНАЧЕ ЕСТЬNULL(КурсВалютыДокумента.Курс, 1)
    |                   КОНЕЦ / ВЫБОР
    |                       КОГДА ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1) = 0
    |                           ТОГДА 1
    |                       ИНАЧЕ ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1)
    |                   КОНЕЦ
    |           ИНАЧЕ 0
    |       КОНЕЦ) КАК ЦенаДолгосрочнаяПрайс,
    |   МАКСИМУМ(ВЫБОР
    |           КОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦенДолгосрочнаяМинимальная
    |               ТОГДА ЦеныНоменклатурыСрезПоследних.Цена * ЕСТЬNULL(КурсВалютыВидаЦен.Курс, 1) * ЕСТЬNULL(КурсВалютыВидаЦен.Кратность, 1) / ВЫБОР
    |                       КОГДА ЕСТЬNULL(КурсВалютыДокумента.Курс, 1) = 0
    |                           ТОГДА 1
    |                       ИНАЧЕ ЕСТЬNULL(КурсВалютыДокумента.Курс, 1)
    |                   КОНЕЦ / ВЫБОР
    |                       КОГДА ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1) = 0
    |                           ТОГДА 1
    |                       ИНАЧЕ ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1)
    |                   КОНЕЦ
    |           ИНАЧЕ 0
    |       КОНЕЦ) КАК ЦенаДолгосрочнаяМинимальная,
    |   МАКСИМУМ(ВЫБОР
    |           КОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦенКраткосрочная
    |                   ИЛИ ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦенКраткосрочнаяМинимальная
    |               ТОГДА ЦеныНоменклатурыСрезПоследних.Упаковка
    |           ИНАЧЕ НЕОПРЕДЕЛЕНО
    |       КОНЕЦ) КАК ЕдиницаИзмеренияКраткосрочнойЦены,
    |   МАКСИМУМ(ВЫБОР
    |           КОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦенДолгосрочная
    |                   ИЛИ ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦенДолгосрочнаяМинимальная
    |               ТОГДА ЦеныНоменклатурыСрезПоследних.Упаковка
    |           ИНАЧЕ НЕОПРЕДЕЛЕНО
    |       КОНЕЦ) КАК ЕдиницаИзмеренияДолгосрочнойЦены,
    |   ИСТИНА КАК Активность,
    |   ЦеныНоменклатурыСрезПоследних.Номенклатура.пкТипТехники КАК ТипТехники,
    |   ЦеныНоменклатурыСрезПоследних.Номенклатура.ВидНоменклатуры.ТипНоменклатуры КАК ТипНоменклатуры,
    |   ЦеныНоменклатурыСрезПоследних.Номенклатура.Артикул КАК Артикул
    |ИЗ
    |   РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
    |           &Период,
    |           (ВидЦены = &ВидЦенКраткосрочная
    |               ИЛИ ВидЦены = &ВидЦенКраткосрочнаяМинимальная
    |               ИЛИ ВидЦены = &ВидЦенДолгосрочная
    |               ИЛИ ВидЦены = &ВидЦенДолгосрочнаяМинимальная)
    |               И Номенклатура = &Модель) КАК ЦеныНоменклатурыСрезПоследних
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсВалютыВидаЦен
    |       ПО ЦеныНоменклатурыСрезПоследних.Валюта = КурсВалютыВидаЦен.Валюта
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсВалютыДокумента
    |       ПО (КурсВалютыВидаЦен.Валюта = &Валюта)
    |
    |СГРУППИРОВАТЬ ПО
    |   ЦеныНоменклатурыСрезПоследних.Номенклатура,
    |   ЦеныНоменклатурыСрезПоследних.Номенклатура.пкТипТехники,
    |   ЦеныНоменклатурыСрезПоследних.Номенклатура.ВидНоменклатуры.ТипНоменклатуры,
    |   ЦеныНоменклатурыСрезПоследних.Номенклатура.Артикул";
    
    Запрос.УстановитьПараметр("Период",                         Объект.Дата);
    Запрос.УстановитьПараметр("ВидЦенКраткосрочная",            Объект.ПрайсЛист.ВидЦенКраткосрочная);
    Запрос.УстановитьПараметр("ВидЦенКраткосрочнаяМинимальная", Объект.ПрайсЛист.ВидЦенКраткосрочнаяМинимальная);
    Запрос.УстановитьПараметр("ВидЦенДолгосрочная",             Объект.ПрайсЛист.ВидЦенДолгосрочная);
    Запрос.УстановитьПараметр("ВидЦенДолгосрочнаяМинимальная",  Объект.ПрайсЛист.ВидЦенДолгосрочнаяМинимальная);
    Запрос.УстановитьПараметр("Валюта",                         Объект.Валюта);
    Запрос.УстановитьПараметр("Модель",                         Модель);
    
    Выборка= Запрос.Выполнить().Выбрать();
    
    Если Выборка.Следующий() Тогда
        НоваяСтрока = Объект.Товары.Добавить();
        
        ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
        
        НоваяСтрока.ЦенаКраткосрочная = НоваяСтрока.ЦенаКраткосрочнаяПрайс;
        НоваяСтрока.ЦенаДолгосрочная  = НоваяСтрока.ЦенаДолгосрочнаяПрайс;
    Иначе
        НоваяСтрока = Объект.Товары.Добавить();
        НоваяСтрока.Номенклатура    = Модель;
        НоваяСтрока.ТипТехники      = Модель.пкТипТехники;
        НоваяСтрока.ТипНоменклатуры = Модель.ТипНоменклатуры;
        НоваяСтрока.Артикул         = Модель.Артикул;
        НоваяСтрока.Активность      = Истина;
    КонецЕсли;    
    
КонецПроцедуры    

&НаКлиенте
Процедура ДобавитьМодельТехники(Команда)
    
    ТекущиеДанные = Элементы.ТипыТехники.ТекущиеДанные;
    
    Если ТекущиеДанные <> Неопределено Тогда
        //НоменклатураДляВыбора = ПолучитьНоменклатуруДляВыбора(ТекущиеДанные.ТипТехники);
        
        СтруктураОтбора = Новый Структура("пкТипТехники", ТекущиеДанные.ТипТехники);
        
        ПараметрыОткрытия = Новый Структура("Отбор", СтруктураОтбора);
        
        ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыОткрытия, , , , , Новый ОписаниеОповещения("ДобавитьМодельТехникиЗавершение", ЭтаФорма)); 
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМодельТехникиЗавершение(ВыбранноеЗначение, ДопПараметры) Экспорт
    
    Если ВыбранноеЗначение <> Неопределено Тогда
        ДобавитьМодельТехнкиНаСервере(ВыбранноеЗначение);        
    КонецЕсли;    
    
КонецПроцедуры 

&НаСервере
Процедура ДобавитьМодельТехнкиНаСервере(Модель)
        
    ЗаполнитьСтрокуПоПрайсу(Модель);
    
КонецПроцедуры    

&НаСервере
Функция ПолучитьНоменклатуруДляВыбора(ТипТехники)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   ЦеныНоменклатурыСрезПоследних.Номенклатура
    |ИЗ
    |   РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
    |           &Период,
    |           (ВидЦены = &ВидЦенКраткосрочная
    |               ИЛИ ВидЦены = &ВидЦенКраткосрочнаяМинимальная
    |               ИЛИ ВидЦены = &ВидЦенДолгосрочная
    |               ИЛИ ВидЦены = &ВидЦенДолгосрочнаяМинимальная)
    |               И НЕ Номенклатура В (&НоменклатураДокумента)
    |               И Номенклатура.пкТипТехники = &ТипТехники
    |               И Номенклатура.пкЭтоТехника) КАК ЦеныНоменклатурыСрезПоследних
    |
    |СГРУППИРОВАТЬ ПО
    |   ЦеныНоменклатурыСрезПоследних.Номенклатура";
    
    ТаблицаТехники = Объект.Товары.Выгрузить();
    
    Запрос.УстановитьПараметр("Период",                         Объект.Дата);
    Запрос.УстановитьПараметр("ВидЦенКраткосрочная",            Объект.ПрайсЛист.ВидЦенКраткосрочная);
    Запрос.УстановитьПараметр("ВидЦенКраткосрочнаяМинимальная", Объект.ПрайсЛист.ВидЦенКраткосрочнаяМинимальная);
    Запрос.УстановитьПараметр("ВидЦенДолгосрочная",             Объект.ПрайсЛист.ВидЦенДолгосрочная);
    Запрос.УстановитьПараметр("ВидЦенДолгосрочнаяМинимальная",  Объект.ПрайсЛист.ВидЦенДолгосрочнаяМинимальная);
    Запрос.УстановитьПараметр("ТипТехники",                     ТипТехники);
    Запрос.УстановитьПараметр("НоменклатураДокумента",          ТаблицаТехники.ВыгрузитьКолонку("Номенклатура"));
    
    НоменклатураДляВыбора = Новый Массив();
    
    Выборка = Запрос.Выполнить().Выбрать();
    
    Пока Выборка.Следующий() Цикл
        НоменклатураДляВыбора.Добавить(Выборка.Номенклатура);    
    КонецЦикла; 
    
    Возврат НоменклатураДляВыбора;
    
КонецФункции    

&НаСервере
Процедура УдалитьМодельТехникиНаСервере(НомерСтроки)
    
    ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(НомерСтроки); 
    
    Если ТекущаяСтрока <> Неопределено Тогда
        Объект.Товары.Удалить(ТекущаяСтрока);        
    КонецЕсли;    
        
КонецПроцедуры

&НаКлиенте
Процедура УдалитьМодельТехники(Команда)
    
    ТекущаяСтрока = Элементы.Товары.ТекущаяСтрока;
        
    УдалитьМодельТехникиНаСервере(ТекущаяСтрока);
    
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТипТехники(Команда)
    
    ТехникаДляВыбора = ПолучитьТипыТехникиДляВыбора();  
    
    СтруктураОтбора = Новый Структура("Ссылка", ТехникаДляВыбора);
    
    ПараметрыОткрытия = Новый Структура("Отбор", СтруктураОтбора);
    
    ОткрытьФорму("Справочник.пкТипыТехники.ФормаВыбора", ПараметрыОткрытия, , , , , Новый ОписаниеОповещения("ДобавитьТипТехникиЗавершение", ЭтаФорма)); 
    
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТипТехникиЗавершение(ВыбранноеЗначение, ДопПараметры) Экспорт
    
    Если ВыбранноеЗначение <> Неопределено Тогда
        НоваяСтрока = Объект.ТипыТехники.Добавить();
        НоваяСтрока.ТипТехники = ВыбранноеЗначение;
    КонецЕсли;    
    
КонецПроцедуры 

&НаСервере
Функция ПолучитьТипыТехникиДляВыбора()
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |	пкТипыТехники.Ссылка
    |ИЗ
    |	Справочник.пкТипыТехники КАК пкТипыТехники
    |ГДЕ
    |	НЕ пкТипыТехники.Ссылка В (&ИсключаемыеТипыТехники)";
    
    ТаблицаТиповТехники = Объект.ТипыТехники.Выгрузить();
    
    Запрос.УстановитьПараметр("ИсключаемыеТипыТехники", ТаблицаТиповТехники.ВыгрузитьКолонку("ТипТехники"));
    
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    ТехникаДляВыбора = Новый Массив();
    
    Пока Выборка.Следующий() Цикл
        ТехникаДляВыбора.Добавить(Выборка.Ссылка);
    КонецЦикла;
    
    Возврат ТехникаДляВыбора;
    
КонецФункции 

&НаСервере
Процедура УдалитьТипТехникиНаСервере(НомерСтроки)
    
    ТекущаяСтрока = Объект.ТипыТехники.НайтиПоИдентификатору(НомерСтроки); 
    
    Если ТекущаяСтрока <> Неопределено Тогда
        ТипТехники = ТекущаяСтрока.ТипТехники;
        СтруктураПоиска = Новый Структура("ТипТехники", ТипТехники);
        
        Объект.ТипыТехники.Удалить(ТекущаяСтрока); 
        
        НайденныеСтроки = Объект.Товары.НайтиСтроки(СтруктураПоиска);
        
        Для Каждого НайденнаяСтрока ИЗ НайденныеСтроки Цикл
            Объект.Товары.Удалить(НайденнаяСтрока);    
        КонецЦикла;    
    КонецЕсли;   
    
КонецПроцедуры    

&НаКлиенте
Процедура УдалитьТипТехники(Команда)
    
    ТекущаяСтрока = Элементы.ТипыТехники.ТекущаяСтрока;
        
    УдалитьТипТехникиНаСервере(ТекущаяСтрока);
    
КонецПроцедуры

#КонецОбласти
