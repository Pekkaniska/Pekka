&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик механизма "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	ИспользоватьПодразделения = ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения");
    		
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДокументОснование", "Видимость", ЗначениеЗаполнено(Объект.ДокументОснование));
	ПродажиСервер.УстановитьОтметкуНезаполненногоДоговора(Элементы, "Договор");
				
	Элементы.ЗаголовокОрганизация.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
		
	УстановитьДоступностьКомандБуфераОбмена();
	
	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.ВремяДоставкиС);
	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.ВремяДоставкиПо);
	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.ВремяДоставкиС1);
	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.ВремяДоставкиПо1);
	            	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
    
    Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
        ЗаполнитьУстановитьРеквизитыДоставкиСервер("СпособДоставки");
        Объект.Менеджер = Пользователи.ТекущийПользователь();
    Иначе
		ДоставкаТоваровКлиентСервер.УстановитьСтраницуДоставки(Элементы, Объект.СпособДоставки, ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками"));
        ОсобыеУсловияПеревозкиУстановитьДоступность();
    КонецЕсли; 
    
    ЗаявкиНаАрендуТехники = Новый Массив;
    ЗаявкиНаАрендуТехники.Добавить(Объект.Ссылка);
    
    ТаблицаСтатусовПоЗаявкам = пкУправлениеТехникойСервер.ПолучитьСтатусЗаявкиНаАрендуТехники(ЗаявкиНаАрендуТехники);
    
    Если ТаблицаСтатусовПоЗаявкам.Количество() > 0 Тогда
        Статус = ТаблицаСтатусовПоЗаявкам[0].Статус;        
    КонецЕсли;
    
    ОбновитьНаличиеМоделиВДоговоре();
    
    Элементы.ПричинаОтмены.Видимость = Объект.Отменена;
    
    Элементы.ВалютаТарифа.Заголовок = Объект.Договор.пкВалютаТарифа;
    
    Если НЕ РольДоступна("пкПодтверждениеЗаявокНаАрендуТехники") 
      И НЕ РольДоступна("ПолныеПрава") И НЕ РольДоступна("пкПолныеПрава") Тогда
        Если Объект.Подтверждена Тогда
            ЭтаФорма.ТолькоПросмотр = Истина;
        Иначе
            Элементы.Подтверждена.ТолькоПросмотр = Истина;    
        КонецЕсли;    
    КонецЕсли; 
    
    Техника.Параметры.УстановитьЗначениеПараметра("ЗаявкаНаАрендуТехники", Объект.Ссылка);
	
	ОбновитьСписокАктовНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
    Если ИсточникВыбора.ИмяФормы = "Обработка.пкПодборТехники.Форма.Форма" Тогда
        Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
            Если ВыбранноеЗначение.Свойство("АдресТоваровВХранилище") Тогда
                ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
            Иначе
                ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;   
                ТекущаяСтрока.Техника = ВыбранноеЗначение.ВыбраннаяТехника;
                
                Модель = ТекущаяСтрока.Номенклатура;
                
                Если НЕ ПроверитьНаличиеМоделиВДоговоре(Объект.Договор, Модель) Тогда
                    Сообщить("Модель """ + Модель + """ отсутствует в договоре");     
                КонецЕсли;    
            
                Если ЗначениеЗаполнено(Модель) И Модель <> ТекущаяСтрока.ЗамененнаяМодель И Модель <> ВыбранноеЗначение.ВыбраннаяМодель И НЕ ЗначениеЗаполнено(ТекущаяСтрока.ЗамененнаяМодель) Тогда
                    ПараметрыОповещения = Новый Структура("ВыбраннаяМодель, ЗамененнаяМодель", ВыбранноеЗначение.ВыбраннаяМодель, Модель);
            
        	        Оповещение = Новый ОписаниеОповещения("ОбработкаВыбораМоделиЗавершение", ЭтаФорма, ПараметрыОповещения);
        	        ПоказатьВопрос(Оповещение, "Модель техники была изменена, зафиксировать замену?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
                Иначе
                    ТекущаяСтрока.Номенклатура = ВыбранноеЗначение.ВыбраннаяМодель;
                    Модифицированность = Истина;
                КонецЕсли;    
            КонецЕсли;    
        ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Номенклатура") Тогда
            ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;  
            
            Модель = ТекущаяСтрока.Номенклатура;
            
            Если НЕ ПроверитьНаличиеМоделиВДоговоре(Объект.Договор, Модель) Тогда
                Сообщить("Модель """ + Модель + """ отсутствует в договоре");     
            КонецЕсли;    
            
            КоличествоПоМодели = 1;
            
            Если ЗначениеЗаполнено(Модель) И Модель <> ВыбранноеЗначение И ТекущаяСтрока.КоличествоПоМодели > 1 Тогда
                
                ПараметрыОповещения = Новый Структура("ВыбраннаяМодель", ВыбранноеЗначение);
    
                ПоказатьВводЗначения(Новый ОписаниеОповещения("ВводКоличестваМоделейЗавершение", ЭтаФорма, ПараметрыОповещения), КоличествоПоМодели, "Заменяемое количество");
                            
            ИначеЕсли ЗначениеЗаполнено(Модель) И Модель <> ТекущаяСтрока.ЗамененнаяМодель И Модель <> ВыбранноеЗначение И НЕ ЗначениеЗаполнено(ТекущаяСтрока.ЗамененнаяМодель) Тогда
                ПараметрыОповещения = Новый Структура("ВыбраннаяМодель, ЗамененнаяМодель, КоличествоПоМодели", ВыбранноеЗначение, Модель, КоличествоПоМодели);
                
                Оповещение = Новый ОписаниеОповещения("ОбработкаВыбораМоделиЗавершение", ЭтаФорма, ПараметрыОповещения);
                ПоказатьВопрос(Оповещение, "Модель техники была изменена, зафиксировать замену?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
            Иначе
				Номенклатура = ТекущаяСтрока.Номенклатура;
                
                Если КоличествоПоМодели >= ТекущаяСтрока.КоличествоПоМодели Тогда 
                    ТекущаяСтрока.Номенклатура       = ВыбранноеЗначение;
                    ТекущаяСтрока.КоличествоПоМодели = КоличествоПоМодели;
                Иначе
                    ТекущаяСтрока.КоличествоПоМодели = ТекущаяСтрока.КоличествоПоМодели - КоличествоПоМодели;
                    
                    ОбработатьИзменениеМодели(ВыбранноеЗначение, КоличествоПоМодели);
				КонецЕсли;  
				
				ИзменитьМодельВДокументах(ВыбранноеЗначение, Номенклатура, КоличествоПоМодели);
                
                Модифицированность = Истина;
            КонецЕсли; 
        КонецЕсли; 
    КонецЕсли;
    
    ОбновитьНаличиеМоделиВДоговоре();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеМодели(Модель, КоличествоПоМодели, ЗамененнаяМодель = Неопределено)
    
    ТекущаяСтрока = Элементы.Товары.ТекущиеДанные; 
    
    НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", Модель));
    
    Если НайденныеСтроки.Количество() > 0 Тогда
        НайденныеСтроки[0].КоличествоПоМодели = НайденныеСтроки[0].КоличествоПоМодели + КоличествоПоМодели; 
        
        Если ЗамененнаяМодель <> Неопределено Тогда
            НайденныеСтроки[0].ЗамененнаяМодель = ЗамененнаяМодель;    
        КонецЕсли;    
    Иначе
        НоваяСтрока = Объект.Товары.Добавить();
        
        ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
        НоваяСтрока.Номенклатура       = Модель;
        НоваяСтрока.КоличествоПоМодели = КоличествоПоМодели;
        
        Если ЗамененнаяМодель <> Неопределено Тогда
            НоваяСтрока.ЗамененнаяМодель = ЗамененнаяМодель;    
        КонецЕсли;    
    КонецЕсли;
    
    Модифицированность = Истина;
    
КонецПроцедуры  

&НаКлиенте
Процедура ВводКоличестваМоделейЗавершение(Результат, ПараметрыОповещения) Экспорт
    
    ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;  
    
    Модель = ТекущаяСтрока.Номенклатура;
    
    Если ЗначениеЗаполнено(Модель) И Модель <> ТекущаяСтрока.ЗамененнаяМодель И Модель <> ПараметрыОповещения.ВыбраннаяМодель И НЕ ЗначениеЗаполнено(ТекущаяСтрока.ЗамененнаяМодель) Тогда
        ПараметрыОповещенияВыборМодели = Новый Структура("ВыбраннаяМодель, ЗамененнаяМодель, КоличествоПоМодели", ПараметрыОповещения.ВыбраннаяМодель, Модель, Результат);
        
        Оповещение = Новый ОписаниеОповещения("ОбработкаВыбораМоделиЗавершение", ЭтаФорма, ПараметрыОповещенияВыборМодели);
        ПоказатьВопрос(Оповещение, "Модель техники была изменена, зафиксировать замену?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Иначе
		Номенклатура = ТекущаяСтрока.Номенклатура;
		
        Если Результат >= ТекущаяСтрока.КоличествоПоМодели Тогда 
            ТекущаяСтрока.Номенклатура       = ПараметрыОповещения.ВыбраннаяМодель;
            ТекущаяСтрока.КоличествоПоМодели = Результат;
        Иначе
            ТекущаяСтрока.КоличествоПоМодели = ТекущаяСтрока.КоличествоПоМодели - Результат;
            
            ОбработатьИзменениеМодели(ПараметрыОповещения.ВыбраннаяМодель, Результат);
		КонецЕсли; 
		
		ИзменитьМодельВДокументах(ПараметрыОповещения.ВыбраннаяМодель, Номенклатура, Результат);
        
        Модифицированность = Истина;
    КонецЕсли; 
    
КонецПроцедуры    

&НаКлиенте
Процедура ОбработкаВыбораМоделиЗавершение(Результат, ПараметрыОповещения) Экспорт
    
    ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
    
    ЗамененнаяМодель = Неопределено;

    Если Результат = КодВозвратаДиалога.Да Тогда
        ЗамененнаяМодель = ПараметрыОповещения.ЗамененнаяМодель;
    КонецЕсли;
    
	Номенклатура = ТекущаяСтрока.Номенклатура;
    
    Если ПараметрыОповещения.КоличествоПоМодели >= ТекущаяСтрока.КоличествоПоМодели Тогда 
        ТекущаяСтрока.Номенклатура       = ПараметрыОповещения.ВыбраннаяМодель;
        ТекущаяСтрока.КоличествоПоМодели = ПараметрыОповещения.КоличествоПоМодели;
        
        Если ЗамененнаяМодель <> Неопределено Тогда
            ТекущаяСтрока.ЗамененнаяМодель = ЗамененнаяМодель;    
        КонецЕсли;    
    Иначе
        ТекущаяСтрока.КоличествоПоМодели = ТекущаяСтрока.КоличествоПоМодели - ПараметрыОповещения.КоличествоПоМодели;
        
        ОбработатьИзменениеМодели(ПараметрыОповещения.ВыбраннаяМодель, ПараметрыОповещения.КоличествоПоМодели, ЗамененнаяМодель);
	КонецЕсли;    
	
	ИзменитьМодельВДокументах(ПараметрыОповещения.ВыбраннаяМодель, Номенклатура, ПараметрыОповещения.КоличествоПоМодели);
    
    Модифицированность = Истина;
    
КонецПроцедуры    

//++ RARUS_IUC 20180111 #7492
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Модифицированность и НЕ Объект.Подтверждена Тогда		
		RS_РаспровестиСвязныеЗаданияНаПеревозку();	
	КонецЕсли; 
	
КонецПроцедуры //-- RARUS_IUC 20180118
//++ RARUS_YRN 20180718
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЗаполнитьУстановитьРеквизитыДоставкиСервер("СпособДоставки");
КонецПроцедуры  //--RARUS_YRN

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(Объект.Партнер) Тогда
		ДоставкаТоваровКлиентСервер.ОчиститьРеквизитыДоставки(Элементы,Объект);
		УстановитьВидимостьЗапретаОтгрузкиПартнеру();
		Возврат;
	КонецЕсли;

	ПриИзмененииПартнераСервер();
		
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	Если Объект.КонтактноеЛицо.Пустая() Тогда
		Возврат;
	ИначеЕсли Не Объект.Партнер.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПартнерИзменился = Ложь;
	КонтактноеЛицоПриИзмененииСервер(ПартнерИзменился);
	
	Если Не ПартнерИзменился Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено (Объект.Партнер) Тогда
		ДоставкаТоваровКлиентСервер.ОчиститьРеквизитыДоставки(Элементы,Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.ГруппаДоговор.Доступность, Элементы.ГруппаДоговор.Видимость, Объект.Договор);
	Элементы.ЗаголовокДоговор.Видимость = Элементы.ГруппаДоговор.Видимость;
	Элементы.ГруппаНадписьДоговор.Видимость = Элементы.ГруппаДоговор.Видимость;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ЗаполнитьДоговорПоУмолчанию();
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОрганизацииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектСтроительстваПриИзменении(Элемент)
    
    ОбъектСтроительстваПриИзмененииНаСервере();
    
КонецПроцедуры

&НаКлиенте
Процедура ОбъектСтроительстваНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
    Если ЗначениеЗаполнено(Объект.Партнер) Тогда
        
        СтандартнаяОбработка = Ложь;
        
        ОбъектыСтроительства = пкОбщегоНазначенияСервер.ПолучитьОбъектыСтроительстваКлиента(Объект.Партнер);
        
        Отбор = Новый Структура("Ссылка", ОбъектыСтроительства);
    
        ПараметрыФормы = Новый Структура("Отбор", Отбор);
    
        ОткрытьФорму("Справочник.СМ_ОбъектыСтроительства.Форма.ФормаВыбора", ПараметрыФормы, , , , , Новый ОписаниеОповещения("ОбъектСтроительстваНачалоВыбораЗавершение", ЭтаФорма));

    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ОбъектСтроительстваНачалоВыбораЗавершение(ВыбранноеЗначение, ДопПараметры) Экспорт 
    
    Если ВыбранноеЗначение <> Неопределено Тогда
        Объект.ОбъектСтроительства = ВыбранноеЗначение;
        Объект.АдресДоставки = пкОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "пкАдресДоставки");
    КонецЕсли;    
    
КонецПроцедуры    

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
    
    ДоговорПриИзмененииНаСервере();
    
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Менеджер");
		
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьУсловноеОформление()

    УсловноеОформление.Элементы.Очистить();

    //

    НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма);
    
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодчиненныеСвойстваПоСтатистике(ИмяРеквизитаРодителя)
	ЗаполнениеСвойствПоСтатистикеСервер.ЗаполнитьПодчиненныеСвойства(Объект, ИмяРеквизитаРодителя);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ПодобратьТехнику(Команда)
    
    ОткрытьПодбор();
    
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьМодель(Команда)
    
    ОткрытьПодбор(Истина);
    
КонецПроцедуры

&НаСервере
Функция ПроверитьНаличиеДокументовПоМодели(Модель)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ ПЕРВЫЕ 1
    |   пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОбороты.ЗаявкаНаАрендуТехники
    |ИЗ
    |   РегистрНакопления.пкМоделиКДоставкеПоЗаявкамНаАрендуТехники.Обороты(
    |           ,
    |           ,
    |           ,
    |           ЗаявкаНаАрендуТехники = &ЗаявкаНаАрендуТехники
    |               И Модель = &Модель) КАК пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОбороты
    |ГДЕ
    |   пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОбороты.ВыгрузитьПриход > 0";
    
    Запрос.УстановитьПараметр("ЗаявкаНаАрендуТехники", Объект.Ссылка);
    Запрос.УстановитьПараметр("Модель",                Модель);
    
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Если Выборка.Следующий() Тогда
        Возврат Истина;
    Иначе
        Возврат Ложь;
    КонецЕсли;    
        
КонецФункции    

&НаСервере
Процедура УдалитьМодельНаСервере(ТекущаяСтрока, Модель)
    
    Если ПроверитьНаличиеДокументовПоМодели(Модель) Тогда
        Сообщить("По выбранной модели уже оформлены документы, удаление строки невозможно");    
    Иначе
        Объект.Товары.Удалить(ТекущаяСтрока);
            
        Модифицированность = Истина;
    КонецЕсли;    
    
КонецПроцедуры

&НаКлиенте
Процедура УдалитьМодель(Команда)
    
    ТекущаяСтрока = Элементы.Товары.ТекущаяСтрока;
    ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
    
    Если ТекущиеДанные <> Неопределено Тогда
        УдалитьМодельНаСервере(ТекущаяСтрока, ТекущиеДанные.Номенклатура);
        
        ЭтаФорма.ОбновитьОтображениеДанных();
    КонецЕсли;    
    
КонецПроцедуры

#КонецОбласти

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ПриИзмененииПартнераСервер()
		
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
    
    КонтрагентПриИзмененииСервер();
							
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	УстановитьВидимостьЗапретаОтгрузкиПартнеру();
    
    Объект.ВремяДоставкиС  = Объект.Партнер.пкВремяДоставкиС;    
    Объект.ВремяДоставкиПо = Объект.Партнер.пкВремяДоставкиПо;
    
КонецПроцедуры

&НаСервере
Процедура КонтактноеЛицоПриИзмененииСервер(ПартнерИзменился)
	
	ВладелецКонтактногоЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КонтактноеЛицо, "Владелец");
	Если ВладелецКонтактногоЛица <> Объект.Партнер Тогда
		Объект.Партнер = ВладелецКонтактногоЛица;
		ПриИзмененииПартнераСервер();
		ПартнерИзменился = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизацииСервер()
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.ГруппаДоговор.Доступность, Элементы.ГруппаДоговор.Видимость, Объект.Договор);
	Элементы.ЗаголовокДоговор.Видимость = Элементы.ГруппаДоговор.Видимость;
	Элементы.ГруппаНадписьДоговор.Видимость = Элементы.ГруппаДоговор.Видимость;
		
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ЗаполнитьДоговорПоУмолчанию();
	КонецЕсли;
		
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Организация");
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ОбъектСтроительстваПриИзмененииНаСервере()
    
    Объект.АдресДоставки = Объект.ОбъектСтроительства.пкАдресДоставки;
    
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииНаСервере()
    
    Объект.Менеджер = Объект.Договор.Менеджер;
    
    Элементы.ВалютаТарифа.Заголовок = Объект.Договор.пкВалютаТарифа;
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

&НаКлиенте
Процедура СпособМестоДоставкиПеревозчикПриИзменении(Элемент)
	
	ЗаполнитьУстановитьРеквизитыДоставкиСервер(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиПриИзменении(Элемент)
	
	ИмяРеквизитаАдресаДоставки = ПолучитьИмяРеквизитаАдресаДоставки(Элемент);
	
	ДоставкаТоваровКлиент.ПриИзмененииПредставленияАдреса(
	    Элемент,
		Объект[ИмяРеквизитаАдресаДоставки],
		Объект[ИмяРеквизитаАдресаДоставки + "ЗначенияПолей"]);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОчистка(Элемент, СтандартнаяОбработка)
	
	АдресДоставкиПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИмяРеквизитаАдресаДоставки = ПолучитьИмяРеквизитаАдресаДоставки(Элемент);
	
	ДоставкаТоваровКлиент.ОткрытьФормуВыбораАдресаИОбработатьРезультат(
	    Элемент,
		Объект,
		ИмяРеквизитаАдресаДоставки,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	АдресДоставкиПриИзменении(Элемент);
	
	ДоставкаТоваровКлиент.АдресДоставкиОбработкаВыбора(Элементы, Объект, Элемент.Имя, ВыбранноеЗначение);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяРеквизитаАдресаДоставки(Элемент)
	
	Если СтрНайти(Элемент.Имя, "АдресДоставкиПеревозчика") > 0 Тогда
		ИмяРеквизитаАдреса = "АдресДоставкиПеревозчика";
	Иначе
		ИмяРеквизитаАдреса = "АдресДоставки";
	КонецЕсли;
	
	Возврат ИмяРеквизитаАдреса;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОбщегоНазначенияУТКлиент.КешироватьТекущуюСтроку(ЭтотОбъект, "Товары");
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
	Если НоваяСтрока Тогда
		ТекущиеДанные.КодСтроки = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если Не ОтменаРедактирования Тогда
		КешСтроки = ?(НоваяСтрока, Неопределено, ТоварыКешТекущейСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ОбщегоНазначенияУТКлиент.КешироватьТекущуюСтроку(ЭтотОбъект, "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
    
    //ЗаполнитьИнформациюОТехникеНаСервере();
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);	
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
    
    Если ЗначениеЗаполнено(ТекущаяСтрока.ДатаНачалаАренды) И НЕ ЗначениеЗаполнено(ТекущаяСтрока.ДатаОкончанияАренды) Тогда
        ТекущаяСтрока.ДатаОкончанияАренды = пкУправлениеТехникойСервер.ПолучитьДатуОкончанияАрендыПоСрокуАренды(ТекущаяСтрока.КоличествоУпаковок, ТекущаяСтрока.ДатаНачалаАренды, 
            ТекущаяСтрока.Номенклатура, ?(ЗначениеЗаполнено(ТекущаяСтрока.Упаковка), ТекущаяСтрока.Упаковка, пкОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Номенклатура, "ЕдиницаИзмерения")));    
    КонецЕсли;    
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДатаНачалаАрендыПриИзменении(Элемент)
    
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
    
    ТекущаяСтрока.ДатаОтгрузки = ТекущаяСтрока.ДатаНачалаАренды;    
    
    ТоварыДатаАрендыПриИзменении();
    
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДатаОкончанияАрендыПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
    
    ТекущаяСтрока.ДатаВозврата = ТекущаяСтрока.ДатаОкончанияАренды;    
    
    ТоварыДатаАрендыПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДатаАрендыПриИзменении()
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
    
    Если ЗначениеЗаполнено(ТекущаяСтрока.ДатаНачалаАренды) И ЗначениеЗаполнено(ТекущаяСтрока.ДатаОкончанияАренды) Тогда
        ТекущаяСтрока.КоличествоУпаковок = (КонецДня(ТекущаяСтрока.ДатаОкончанияАренды) + 1 - НачалоДня(ТекущаяСтрока.ДатаНачалаАренды)) / (3600 * 24);
        
        СтруктураДействий = Новый Структура;
	    ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);	
	
	    ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
    КонецЕсли;    
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    СтандартнаяОбработка = Ложь;
        
    ОткрытьПодбор(Истина);
КонецПроцедуры
    
#КонецОбласти

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы.Товары.ВыделенныеСтроки, Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
    ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
				
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ПустойБуферОбмена = ОбщегоНазначения.ПустойБуферОбмена("Строки");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", НЕ ПустойБуферОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Доставка

&НаСервере
Процедура ЗаполнитьУстановитьРеквизитыДоставкиСервер(ИмяЭлементаФормы);
	
	ДоставкаТоваров.ЗаполнитьРеквизитыДоставки(Элементы, ИмяЭлементаФормы, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсобыеУсловияПеревозкиПриИзменении(Элемент)
	ОсобыеУсловияПеревозкиПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьИнформациюПоДоставкеКонтактами(Команда)
	ДополнитьИнформациюПоДоставкеКонтактамиСервер();
КонецПроцедуры

&НаСервере
Процедура ОсобыеУсловияПеревозкиПриИзмененииСервер()
	ДоставкаТоваров.ОсобыеУсловияПеревозкиПриИзменении(Элементы, Объект);
КонецПроцедуры

&НаСервере
Процедура ДополнитьИнформациюПоДоставкеКонтактамиСервер()
	ДоставкаТоваров.ДополнитьИнформациюПоДоставкеКонтактами(Объект);
КонецПроцедуры

Процедура ОсобыеУсловияПеревозкиУстановитьДоступность()
		
	ОсобыеУсловияПеревозки = Объект.ОсобыеУсловияПеревозки;
	Элементы.ОсобыеУсловияПеревозкиОписание.Доступность  = ОсобыеУсловияПеревозки;
	Элементы.ОсобыеУсловияПеревозкиОписание1.Доступность = ОсобыеУсловияПеревозки;
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольНесогласованныхИзменений

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
    
	ИспользоватьНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
					
    //ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.ГруппаДоговор.Доступность, Элементы.ГруппаДоговор.Видимость);
	Элементы.ЗаголовокДоговор.Видимость = Элементы.ГруппаДоговор.Видимость;
	Элементы.ГруппаНадписьДоговор.Видимость = Элементы.ГруппаДоговор.Видимость;
	
	Элементы.ГруппаОрганизация.Видимость = ИспользоватьНесколькоОрганизаций;
		
	УстановитьВидимостьЗапретаОтгрузкиПартнеру();

	РассылкиИОповещенияКлиентам.УстановитьВидимостьПодпискиНаОповещенияВОбъекте(
		Элементы.ГруппаПодпискаНаОповещения,
		Объект.Партнер,
		ПредопределенноеЗначение("Перечисление.ТипыСобытийОповещений.ИзменениеСостоянияЗаказа"));
			
	УстановитьПривилегированныйРежим(Истина);
		
	ОбщегоНазначенияУТ.ИнициализироватьКешТекущейСтроки(ЭтотОбъект, "Товары");
	
	МетаданныеФормы = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).МетаданныеДокумента();	
    
    Объект.Подразделение         = Объект.Автор.Подразделение;
    Объект.ПодразделениеОтгрузки = Объект.Автор.Подразделение;
    Объект.СНДС                  = Истина;
    
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоговорПоУмолчанию()
															
    Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(Объект, Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
    														
    Если Договор <> Объект.Договор Тогда
    	Объект.Договор = Договор;
//Рарус Владимир Подрезов 12.09.2017 5669
	    ДоговорПриИзмененииНаСервере();
//Рарус Владимир Подрезов Конец
    КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьЗапретаОтгрузкиПартнеру()
	
	СегментыСервер.УстановитьВидимостьЗапретаОтгрузкиПартнеру(Объект.Партнер, Элементы);
	
КонецПроцедуры  

&НаКлиенте
Процедура ОткрытьПодбор(ИзменениеСтроки = Ложь, Модель = Неопределено)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Документ.пкЗаявкаНаАрендуТехники.ФормаДокумента.Команда.ОткрытьПодбор");
	
	Отказ = Ложь;
    
	ПараметрЗаголовок = НСтр("ru = 'Подбор техники в документ """" %Документ% """);
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='заявку на аренду техники'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",           ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата",                Объект.Дата);
	ПараметрыФормы.Вставить("Документ",            Объект.Ссылка);
    ПараметрыФормы.Вставить("ИзменениеСтроки",     ИзменениеСтроки);
    ПараметрыФормы.Вставить("Модель",              Модель);
    ПараметрыФормы.Вставить("КодФормы",            "ЗаявкаНаАрендуТехники");
	
	ОткрытьФорму("Обработка.пкПодборТехники.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьНаличиеМоделиВДоговоре(Договор, Модель)
    
    СтруктураПоиска = Новый Структура("Модель", Модель);
    
    НайденныеСтроки = Договор.пкТарифы.НайтиСтроки(СтруктураПоиска);
    
    Если НайденныеСтроки.Количество() > 0 Тогда
        Возврат Истина;   
    Иначе
        Возврат Ложь;    
    КонецЕсли;    
    
КонецФункции    

&НаСервере
Процедура ИзменитьМодельВЗаданияхНаПеревозку(Модель, ЗамененнаяМодель, Количество, Отказ = Ложь)
    
    ОсталосьПоменять = Количество;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |	пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОбороты.Регистратор КАК Документ
    |ИЗ
    |	РегистрНакопления.пкМоделиКДоставкеПоЗаявкамНаАрендуТехники.Обороты(
    |			,
    |			,
    |			Регистратор,
    |			ЗаданиеНаПеревозку <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |				И ЗаявкаНаАрендуТехники = &ЗаявкаНаАрендуТехники
    |				И Модель = &Модель) КАК пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОбороты
    |ГДЕ
    |	(пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОбороты.Регистратор ССЫЛКА Документ.пкЗаданиеНаПеревозку
    |			ИЛИ пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОбороты.Регистратор ССЫЛКА Документ.пкДоставка)
    |
    |УПОРЯДОЧИТЬ ПО
    |	пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОбороты.ЗаданиеНаПеревозку.Техника";
    
    Запрос.УстановитьПараметр("ЗаявкаНаАрендуТехники", Объект.Ссылка);
    Запрос.УстановитьПараметр("Модель",                ЗамененнаяМодель);
    
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.пкЗаданиеНаПеревозку") И ОсталосьПоменять > 0 Тогда
	        ЗаданиеНаПеревозку         = Выборка.Документ.ПолучитьОбъект();
	        ЗаданиеНаПеревозку.Модель  = Модель;
	        ЗаданиеНаПеревозку.Техника = Неопределено;
	        
	        Попытка
	            ЗаданиеНаПеревозку.Записать(РежимЗаписиДокумента.Проведение);        
			Исключение
//Рарус Владимир Подрезов 18.05.2017
				тСообщение = Новый СообщениеПользователю;
				тСообщение.Текст = ОписаниеОшибки();
				тСообщение.Сообщить();
				
				Отказ = Истина;
				Прервать;
//Рарус Владимир Подрезов Конец
	        КонецПопытки;
        
	        ОсталосьПоменять = ОсталосьПоменять - 1;
		ИначеЕсли ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.пкДоставка") Тогда
	        Доставка = Выборка.Документ.ПолучитьОбъект();
			
	        Попытка
	            Доставка.Записать(РежимЗаписиДокумента.Проведение);        
	        Исключение
//Рарус Владимир Подрезов 18.05.2017
				тСообщение = Новый СообщениеПользователю;
				тСообщение.Текст = ОписаниеОшибки();
				тСообщение.Сообщить();
				
				Отказ = Истина;
				Прервать;
//Рарус Владимир Подрезов Конец
	        КонецПопытки;
		КонецЕсли;
    КонецЦикла;

КонецПроцедуры 

&НаСервере
Процедура ЗаписатьЗаявкуНаСеревре()
	
	ЭтотОбъект.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьМодельВДокументах(ВыбраннаяМодель, ЗамененнаяМодель, Количество)
	
//Рарус Владимир Подрезов 18.05.2017
	Отказ = Ложь;
//Рарус Владимир Подрезов Конец
	
	НачатьТранзакцию();
	
	ЗаписатьЗаявкуНаСеревре();
	ИзменитьМодельВЗаданияхНаПеревозку(ВыбраннаяМодель, ЗамененнаяМодель, Количество, Отказ);
	
//Рарус Владимир Подрезов 18.05.2017
	Если Отказ Тогда
		ОтменитьТранзакцию();
	Иначе
//Рарус Владимир Подрезов Конец
	ЗафиксироватьТранзакцию();
//Рарус Владимир Подрезов 18.05.2017
	КонецЕсли;
//Рарус Владимир Подрезов Конец
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьНаличиеМоделиВДоговоре()
    
    ВсеМоделиЕстьВДоговоре = 0;
    
    Для Каждого Строка ИЗ Объект.Товары Цикл
        Если НЕ ПроверитьНаличиеМоделиВДоговоре(Объект.Договор, Строка.Номенклатура) Тогда
            ВсеМоделиЕстьВДоговоре = 1;
            Строка.НаличиеМоделиВДоговоре = 1; 
        КонецЕсли;    
    КонецЦикла;  
    
    НаличиеМоделиВДоговоре = ВсеМоделиЕстьВДоговоре;
    
КонецПроцедуры    
	
#КонецОбласти

#Область ПодборыИОбработкаПроверкиКоличества

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
    
    СтруктураПоиска = Новый Структура("Номенклатура, Упаковка, ДатаНачалаАренды, ДатаОкончанияАренды");
    
    Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
        
        ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТовара);
        
        Если НЕ ПроверитьНаличиеМоделиВДоговоре(Объект.Договор, СтрокаТовара.Номенклатура) Тогда
            Сообщить("Модель """ + СтрокаТовара.Номенклатура + """ отсутствует в договоре");     
        КонецЕсли;    
                    
        НайденныеСтроки = Объект.Товары.НайтиСтроки(СтруктураПоиска);
        
        Если НайденныеСтроки.Количество() > 0 Тогда
            ТекущаяСтрока = НайденныеСтроки[0];
            
            ТекущаяСтрока.Количество         = ТекущаяСтрока.Количество + СтрокаТовара.Количество; 
            ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок + СтрокаТовара.КоличествоУпаковок; 
        Иначе
            ТекущаяСтрока = Объект.Товары.Добавить();
            
            ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
        
            ТекущаяСтрока.ДатаОтгрузки = ТекущаяСтрока.ДатаНачалаАренды;
            ТекущаяСтрока.ДатаВозврата = ТекущаяСтрока.ДатаОкончанияАренды;
        КонецЕсли;    
        
    КонецЦикла;
    
    Если ТаблицаТоваров.Количество() > 0 Тогда
        Модифицированность = Истина;    
    КонецЕсли;    
		
КонецПроцедуры

&НаКлиенте
Процедура ОтмененаПриИзменении(Элемент)
        
    Элементы.ПричинаОтмены.Видимость = Объект.Отменена;
    
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
    
    ОбновитьНаличиеМоделиВДоговоре();
    
КонецПроцедуры

&НаСервере
Процедура ПодтвержденаПриИзмененииНаСервере()
    
    Если Объект.Подтверждена Тогда
        Объект.Отменена      = Ложь;
        Объект.ПричинаОтмены = "";
        
        Элементы.Отменена.Доступность    = Ложь;
        Элементы.ПричинаОтмены.Видимость = Ложь;
    Иначе
        Элементы.Отменена.Доступность = Истина;
    КонецЕсли;  
    
КонецПроцедуры

&НаКлиенте
Процедура ПодтвержденаПриИзменении(Элемент)
    
    ПодтвержденаПриИзмененииНаСервере();
    
КонецПроцедуры

#КонецОбласти

#Область СписокАктов

&НаКлиенте
Процедура СписокАктовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Элементы.СписокАктов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "СписокАктовпкПрикрепленыФайлыВДО" Тогда
		//Если Элементы.СписокАктов.ТекущиеДанные.пкПрикрепленыФайлыВДО = 0 Тогда
		//	Возврат;
		//КонецЕсли;
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ПрисоединенныеФайлы", 
			Новый Структура("ВладелецФайла", Элементы.СписокАктов.ТекущиеДанные.Ссылка), 
			ЭтаФорма);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокАктов(Команда)
	ОбновитьСписокАктовНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокАктовНаСервере()
	
	СписокАктов.Очистить();
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросАкты = Новый Запрос;
	ЗапросАкты.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка,
	|	пкАктПриемкиВозврата.пкПрикрепленыФайлыВДО
	|ИЗ
	|	Документ.пкАктПриемкиВозврата.ЗаданияНаПеревозку КАК пкАктПриемкиВозвратаЗаданияНаПеревозку
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкАктПриемкиВозврата КАК пкАктПриемкиВозврата
	|		ПО пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка = пкАктПриемкиВозврата.Ссылка
	|ГДЕ
	|	пкАктПриемкиВозвратаЗаданияНаПеревозку.ЗаявкаНаАрендуТехники = &ЗаявкаНаАрендуТехники";
	ЗапросАкты.УстановитьПараметр("ЗаявкаНаАрендуТехники", Объект.Ссылка);
	РезЗапроса = ЗапросАкты.Выполнить().Выбрать();
	Пока РезЗапроса.Следующий() Цикл
		НоваяСтрока = СписокАктов.Добавить();
		НоваяСтрока.Ссылка					= РезЗапроса.Ссылка;
		НоваяСтрока.пкПрикрепленыФайлыВДО	= РезЗапроса.пкПрикрепленыФайлыВДО;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТехникаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
    
    ТекущиеДанные = Элементы.Техника.ТекущиеДанные;
    
    Если ТекущиеДанные <> Неопределено Тогда
    	Если Поле.Имя = "ТехникаЗаданиеНаПеревозку"	Тогда
            текИмяФормы = "Документ.пкЗаданиеНаПеревозку.Форма.ФормаДокумента";
            текОбъект	= ТекущиеДанные.ЗаданиеНаПеревозку;
            
            Если ЗначениеЗаполнено(текОбъект) Тогда
                ОткрытьФорму(текИмяФормы, Новый Структура("Ключ", текОбъект));
            КонецЕсли;
    	ИначеЕсли Поле.Имя = "ТехникаЗаданиеНаПеревозкуВозврат"	Тогда
            текИмяФормы = "Документ.пкЗаданиеНаПеревозку.Форма.ФормаДокумента";
            текОбъект	= ТекущиеДанные.ЗаданиеНаПеревозкуВозврат;
            
            Если ЗначениеЗаполнено(текОбъект) Тогда
                ОткрытьФорму(текИмяФормы, Новый Структура("Ключ", текОбъект));
            КонецЕсли;
        ИначеЕсли Поле.Имя = "ТехникаКомментарий" Тогда
            Комментарий = пкУправлениеТехникойСервер.ПолучитьКомменатрииПоЗаявке(ТекущиеДанные.ЗаявкаНаАрендуТехники, ТекущиеДанные.Техника);
            
            ПоказатьВводСтроки(Новый ОписаниеОповещения("ВводКомментарияЗавершение", ЭтаФорма, 
                Новый Структура("ЗаявкаНаАрендуТехники, Техника", ТекущиеДанные.ЗаявкаНаАрендуТехники, ТекущиеДанные.Техника)), Комментарий);
        ИначеЕсли Поле.Имя = "ТехникаПримечание" Тогда
            Примечание = пкУправлениеТехникойСервер.ПолучитьКомменатрииПоЗаявке(ТекущиеДанные.ЗаявкаНаАрендуТехники, ТекущиеДанные.Техника, Ложь);
            
            ПоказатьВводСтроки(Новый ОписаниеОповещения("ВводПримечанияЗавершение", ЭтаФорма, 
                Новый Структура("ЗаявкаНаАрендуТехники, Техника", ТекущиеДанные.ЗаявкаНаАрендуТехники, ТекущиеДанные.Техника)), Примечание);
//Рарус Владимир Подрезов 29.09.2017
		ИначеЕсли Поле.Имя = "ТехникаПаспорт" Тогда
			ПодключитьОбработчикОжидания("ИзменитьОтметкуПаспорта", 0.1, Истина);
		ИначеЕсли Поле.Имя = "ТехникаВахтенныйЖурнал" Тогда
			ПодключитьОбработчикОжидания("ИзменитьОтметкуВахтенныйЖурнал", 0.1, Истина);
//Рарус Владимир Подрезов Конец
        КонецЕсли;
    КонецЕсли;
        
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОтметкуПаспорта()
	
	ТекущиеДанные = Элементы.Техника.ТекущиеДанные;
    
	ТекущиеДанные.Паспорт = Не ТекущиеДанные.Паспорт;
	пкУправлениеТехникойСервер.ЗаписатьПаспортПоЗаявке(ТекущиеДанные.ЗаявкаНаАрендуТехники, ТекущиеДанные.Техника, ТекущиеДанные.Паспорт); 
	Элементы.Техника.Обновить();
	
КонецПроцедуры 

&НаКлиенте
Процедура ИзменитьОтметкуВахтенныйЖурнал()
	
	ТекущиеДанные = Элементы.Техника.ТекущиеДанные;
    
	ТекущиеДанные.ВахтенныйЖурнал = Не ТекущиеДанные.ВахтенныйЖурнал;
	пкУправлениеТехникойСервер.ЗаписатьВахтенныйЖурналПоЗаявке(ТекущиеДанные.ЗаявкаНаАрендуТехники, ТекущиеДанные.Техника, ТекущиеДанные.ВахтенныйЖурнал); 
	Элементы.Техника.Обновить();
	
КонецПроцедуры 

Процедура ВводКомментарияЗавершение(ВведенноеЗначение, ДопПараметры) Экспорт
    
    Если ВведенноеЗначение <> Неопределено Тогда
        пкУправлениеТехникойСервер.ЗаписатьКомментарийПоЗаявке(ДопПараметры.ЗаявкаНаАрендуТехники, ДопПараметры.Техника, ВведенноеЗначение); 
        
        Элементы.Техника.Обновить();
    КонецЕсли; 
    
КонецПроцедуры 

Процедура ВводПримечанияЗавершение(ВведенноеЗначение, ДопПараметры) Экспорт
    
    Если ВведенноеЗначение <> Неопределено Тогда
        пкУправлениеТехникойСервер.ЗаписатьПримечаниеПоЗаявке(ДопПараметры.ЗаявкаНаАрендуТехники, ДопПараметры.Техника, ВведенноеЗначение); 
        
        Элементы.Техника.Обновить();
    КонецЕсли; 
    
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьРасшифровку(Команда)
	
	Элементы.Техника.Обновить();
	
КонецПроцедуры

//++ RARUS_IUC 20180111 #7492
&НаСервере
Процедура RS_РаспровестиСвязныеЗаданияНаПеревозку()
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;	
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	пкЗаданиеНаПеревозку.Ссылка
		|ИЗ
		|	Документ.пкЗаданиеНаПеревозку КАК пкЗаданиеНаПеревозку
		|ГДЕ
		|	пкЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники = &ЗаявкаНаАрендуТехники
		|	И пкЗаданиеНаПеревозку.Проведен";
	
	Запрос.УстановитьПараметр("ЗаявкаНаАрендуТехники", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДЗ = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДЗ.Следующий() Цикл
			
			ОбъектДокумент = ВыборкаДЗ.Ссылка.ПолучитьОбъект();
				
			Попытка 			
				ОбъектДокумент.Записать(РежимЗаписиДокумента.ОтменаПроведения); 			
			Исключение
			    Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ИнформацияОбОшибке().Описание;
				Сообщение.Сообщить(); 
			КонецПопытки;
			
		КонецЦикла; 	
		
	КонецЕсли; 	
	
КонецПроцедуры //-- RARUS_IUC 20180118

#КонецОбласти
