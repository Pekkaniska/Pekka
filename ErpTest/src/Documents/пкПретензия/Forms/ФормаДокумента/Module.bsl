&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

/////////////////////////////////////////////////////////////////////////
&НаСервере
Функция ПолучитьЗначениеРеквизитаНаСервере(тОбъект, ИмяРевизита)
	
	Возврат тОбъект[ИмяРевизита];
	
КонецФункции

&НаСервере
Функция ПолучитьЗначениеПеречисленияНаСервере(ИмяПеречисления, ИмяЗначения)
	
	Возврат Перечисления[ИмяПеречисления][ИмяЗначения];
	
КонецФункции

/////////////////////////////////////////////////////////////////////////
// Стандартное (почти)

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

#Область ОбработчикиКомандФормы
// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	//МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	//ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

#КонецОбласти

/////////////////////////////////////////////////////////////////////////
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать

	//ВводНаОсновании.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюСоздатьНаОсновании);
	
	//МенюОтчеты.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюОтчеты);
	
	// ИнтеграцияС1СДокументооборотом
	//ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	Запрос=Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетыСКлиентамиПоДокументамОстаткиИОбороты.ЗаказКлиента,
	|	РасчетыСКлиентамиПоДокументамОстаткиИОбороты.РасчетныйДокумент,
	|	РасчетыСКлиентамиПоДокументамОстаткиИОбороты.Валюта,
	|	РасчетыСКлиентамиПоДокументамОстаткиИОбороты.ДолгНачальныйОстаток,
	|	РасчетыСКлиентамиПоДокументамОстаткиИОбороты.ДолгПриход,
	|	РасчетыСКлиентамиПоДокументамОстаткиИОбороты.ДолгРасход,
	|	РасчетыСКлиентамиПоДокументамОстаткиИОбороты.ДолгКонечныйОстаток,
	|	РасчетыСКлиентамиПоДокументамОстаткиИОбороты.ПредоплатаНачальныйОстаток,
	|	РасчетыСКлиентамиПоДокументамОстаткиИОбороты.ПредоплатаПриход,
	|	РасчетыСКлиентамиПоДокументамОстаткиИОбороты.ПредоплатаРасход,
	|	РасчетыСКлиентамиПоДокументамОстаткиИОбороты.ПредоплатаКонечныйОстаток
	|ПОМЕСТИТЬ СписокДолгов
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(
	|			,
	|			ЗаказКлиента.Организация = &Организация
//Рарус Владимир Подрезов 18.09.2017
	|				И НЕ ЗаказКлиента.пкЗакрыт
//Рарус Владимир Подрезов Конец
	|				И ЗаказКлиента.Контрагент = &Контрагент
	|				И (&Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|					ИЛИ ЗаказКлиента.Договор = &Договор)
	|				И (&ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|					ИЛИ ЗаказКлиента.Дата >= &ДатаНачала)
	|				И (&ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|					ИЛИ ЗаказКлиента.Дата <= &ДатаОкончания)) КАК РасчетыСКлиентамиОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоДокументам.ОстаткиИОбороты(
	|				,
	|				,
	|				,
	|				,
	|				ЗаказКлиента.Организация = &Организация
//Рарус Владимир Подрезов 18.09.2017
	|					И НЕ ЗаказКлиента.пкЗакрыт
//Рарус Владимир Подрезов Конец
	|					И ЗаказКлиента.Контрагент = &Контрагент
	|					И (&Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|						ИЛИ ЗаказКлиента.Договор = &Договор)
	|					И (&ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|						ИЛИ ЗаказКлиента.Дата >= &ДатаНачала)
	|					И (&ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|						ИЛИ ЗаказКлиента.Дата <= &ДатаОкончания)) КАК РасчетыСКлиентамиПоДокументамОстаткиИОбороты
	|		ПО РасчетыСКлиентамиОстатки.ЗаказКлиента = РасчетыСКлиентамиПоДокументамОстаткиИОбороты.ЗаказКлиента
	|			И РасчетыСКлиентамиОстатки.Валюта = РасчетыСКлиентамиПоДокументамОстаткиИОбороты.Валюта
	|ГДЕ
	|	РасчетыСКлиентамиОстатки.КОплатеОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.ЗаказКлиента,
	|	ВложенныйЗапрос.РасчетныйДокумент,
	|	ВложенныйЗапрос.Валюта,
	|	ВложенныйЗапрос.ПлатежныйДокумент,
	|	ВложенныйЗапрос.ТипОплаты,
	|	ВложенныйЗапрос.СуммаОплаты
	|ПОМЕСТИТЬ ТаблицаПлатежек
	|ИЗ
	|	(ВЫБРАТЬ
	|		СписокДолгов.ЗаказКлиента КАК ЗаказКлиента,
	|		СписокДолгов.РасчетныйДокумент КАК РасчетныйДокумент,
	|		СписокДолгов.Валюта КАК Валюта,
	|		РасчетыСКлиентамиПоДокументамОбороты.Регистратор КАК ПлатежныйДокумент,
	|		""ПостОплата"" КАК ТипОплаты,
	|		РасчетыСКлиентамиПоДокументамОбороты.ДолгРасход КАК СуммаОплаты
	|	ИЗ
	|		СписокДолгов КАК СписокДолгов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоДокументам.Обороты(, , Регистратор, ) КАК РасчетыСКлиентамиПоДокументамОбороты
	|			ПО СписокДолгов.ЗаказКлиента = РасчетыСКлиентамиПоДокументамОбороты.ЗаказКлиента
	|				И СписокДолгов.РасчетныйДокумент = РасчетыСКлиентамиПоДокументамОбороты.РасчетныйДокумент
	|	ГДЕ
	|		РасчетыСКлиентамиПоДокументамОбороты.ДолгРасход > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СписокДолгов.ЗаказКлиента,
	|		СписокДолгов.РасчетныйДокумент,
	|		СписокДолгов.Валюта,
	|		РасчетыСКлиентамиПоДокументамОбороты.РасчетныйДокумент,
	|		""Предоплата"",
	|		РасчетыСКлиентамиПоДокументамОбороты.ПредоплатаРасход
	|	ИЗ
	|		СписокДолгов КАК СписокДолгов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоДокументам.Обороты(, , Регистратор, ) КАК РасчетыСКлиентамиПоДокументамОбороты
	|			ПО СписокДолгов.ЗаказКлиента = РасчетыСКлиентамиПоДокументамОбороты.ЗаказКлиента
	|				И СписокДолгов.РасчетныйДокумент = РасчетыСКлиентамиПоДокументамОбороты.РасчетныйДокумент
	|	ГДЕ
	|		РасчетыСКлиентамиПоДокументамОбороты.ПредоплатаРасход > 0) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокДолгов.ЗаказКлиента КАК ЗаказКлиента,
	|	СписокДолгов.РасчетныйДокумент КАК РасчетныйДокумент,
	|	СписокДолгов.Валюта,
	|	СписокДолгов.ДолгНачальныйОстаток,
	|	СписокДолгов.ДолгПриход,
	|	СписокДолгов.ДолгРасход,
	|	СписокДолгов.ДолгКонечныйОстаток,
	|	ТаблицаПлатежек.ПлатежныйДокумент КАК ПлатежныйДокумент,
	|	ТаблицаПлатежек.ТипОплаты,
	|	ЕСТЬNULL(ТаблицаПлатежек.СуммаОплаты, 0) КАК СуммаОплаты,
	|	СписокДолгов.ПредоплатаНачальныйОстаток,
	|	СписокДолгов.ПредоплатаПриход,
	|	СписокДолгов.ПредоплатаРасход,
	|	СписокДолгов.ПредоплатаКонечныйОстаток
	|ИЗ
	|	СписокДолгов КАК СписокДолгов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПлатежек КАК ТаблицаПлатежек
	|		ПО СписокДолгов.ЗаказКлиента = ТаблицаПлатежек.ЗаказКлиента
	|			И СписокДолгов.РасчетныйДокумент = ТаблицаПлатежек.РасчетныйДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкПретензииПоСчетам.СрезПоследних(&МоментВремениДокумента, Регистратор <> &Регистратор) КАК пкПретензииПоСчетамСрезПоследних
	|		ПО СписокДолгов.ЗаказКлиента = пкПретензииПоСчетамСрезПоследних.Счет
	|ГДЕ
	|	пкПретензииПоСчетамСрезПоследних.Состояние ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказКлиента,
	|	РасчетныйДокумент,
	|	ТаблицаПлатежек.ПлатежныйДокумент.Дата";
				   
	Запрос.УстановитьПараметр("Организация", Объект.Организация);	
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);	
	Запрос.УстановитьПараметр("Договор", Объект.Договор);	
	Запрос.УстановитьПараметр("ДатаНачала", Объект.ДатаНачала);	
	Запрос.УстановитьПараметр("ДатаОкончания", Объект.ДатаОкончания);	
	Запрос.УстановитьПараметр("МоментВремениДокумента", ?(Объект.Ссылка.Пустая(), ТекущаяДата(),Объект.Ссылка.МоментВремени()));	
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);	
	
	ВалютаРегл=Константы.ВалютаРегламентированногоУчета.Получить();
	
	ВыборкаЗапроса=Запрос.Выполнить().Выбрать();
	
	Объект.Расшифровка.Очистить();
	
	ТекЗаказ=Неопределено;
	ТекДокументРасчета=Неопределено;
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		ТекущаяДатаОплаты = Дата(1,1,1);
		Если ТекДокументРасчета = Неопределено ИЛИ ВыборкаЗапроса.РасчетныйДокумент <> ТекДокументРасчета 
			ИЛИ ТекЗаказ = Неопределено ИЛИ ВыборкаЗапроса.ЗаказКлиента <> ТекЗаказ Тогда
			НоваяЗадолженность = Объект.Расшифровка.Добавить();
			НоваяЗадолженность.Счет			= ВыборкаЗапроса.ЗаказКлиента;
			НоваяЗадолженность.Валюта		= ВыборкаЗапроса.Валюта;
			НоваяЗадолженность.Реализация	= ВыборкаЗапроса.РасчетныйДокумент;
			НоваяЗадолженность.СуммаОплат	= ВыборкаЗапроса.СуммаОплаты;
			Если ТипЗнч(ВыборкаЗапроса.ЗаказКлиента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда 
				НоваяЗадолженность.СуммаСчета		= ВыборкаЗапроса.ДолгКонечныйОстаток;
				НоваяЗадолженность.СуммаРеализации	= ВыборкаЗапроса.ДолгКонечныйОстаток;
			Иначе
				НоваяЗадолженность.СуммаСчета		= ВыборкаЗапроса.ЗаказКлиента.СуммаДокумента;
				НоваяЗадолженность.СуммаРеализации	= ВыборкаЗапроса.РасчетныйДокумент.СуммаДокумента;
			КонецЕсли;	
			Если ЗначениеЗаполнено(ВыборкаЗапроса.ПлатежныйДокумент) Тогда
				НоваяЗадолженность.ДатаОплат	= Формат(ВыборкаЗапроса.ПлатежныйДокумент.Дата, "ДФ=dd.MM.yyyy");
				ТекущаяДатаОплаты				= ВыборкаЗапроса.ПлатежныйДокумент.Дата;
			Иначе
				НоваяЗадолженность.ДатаОплат	= "";	
				ТекущаяДатаОплаты				= Дата(1,1,1);
			КонецЕсли; 
			НоваяЗадолженность.СуммаЗадолженности	= ВыборкаЗапроса.ДолгКонечныйОстаток;
			ТекДокументРасчета						= ВыборкаЗапроса.РасчетныйДокумент;
			ТекЗаказ								= ВыборкаЗапроса.ЗаказКлиента;
		ИначеЕсли ЗначениеЗаполнено(ВыборкаЗапроса.ПлатежныйДокумент) Тогда
			Если ВыборкаЗапроса.ПлатежныйДокумент.Дата > ТекущаяДатаОплаты тогда
				НоваяЗадолженность.ДатаОплат	= Формат(ВыборкаЗапроса.ПлатежныйДокумент.Дата,"ДФ=dd.MM.yyyy");
				ТекущаяДатаОплаты				= ВыборкаЗапроса.ПлатежныйДокумент.Дата;
			КонецЕсли;	
			//НоваяЗадолженность.ДатаОплат=НоваяЗадолженность.ДатаОплат + " " + Формат(ВыборкаЗапроса.ПлатежныйДокумент.Дата, "ДФ=dd.MM.yyyy");	
			НоваяЗадолженность.СуммаОплат	= НоваяЗадолженность.СуммаОплат + ВыборкаЗапроса.СуммаОплаты;
		КонецЕсли;
	КонецЦикла; 	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	ЗаполнитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыПечати(Команда)
	
	ЗаполнитьПараметрыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыНаСервере()
	
	ТЗ_ПараметрыПечати	= ТаблицаПараметровПечати.Выгрузить();
	
	///////////////////////////////////////////////////////////////////////////////////////////
	ДанныеОрганизации	= ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Объект.Организация, Объект.Дата);
	ДанныеКонтрагента	= ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Объект.Контрагент, Объект.Дата);
	ЗаполнитьПараметр(ТЗ_ПараметрыПечати, "ОрганизацияНаименование", ДанныеОрганизации.СокращенноеНаименование);
	ЗаполнитьПараметр(ТЗ_ПараметрыПечати, "ОрганизацияНаименованиеПолное", ДанныеОрганизации.ОфициальноеНаименование);
	ЗаполнитьПараметр(ТЗ_ПараметрыПечати, "ОрганизацияИНН", ДанныеОрганизации.ИНН);
	ЗаполнитьПараметр(ТЗ_ПараметрыПечати, "ОрганизацияКПП", ДанныеОрганизации.КПП);
	ЗаполнитьПараметр(ТЗ_ПараметрыПечати, "ОрганизацияЮридическийАдрес", ДанныеОрганизации.ЮридическийАдрес);
	ЗаполнитьПараметр(ТЗ_ПараметрыПечати, "КонтрагентНаименование", ДанныеКонтрагента.СокращенноеНаименование);
	ЗаполнитьПараметр(ТЗ_ПараметрыПечати, "КонтрагентТелефон", ДанныеКонтрагента.Телефоны);
	ЗаполнитьПараметр(ТЗ_ПараметрыПечати, "КонтрагентЮридическийАдрес", ДанныеКонтрагента.ЮридическийАдрес);
	ЗаполнитьПараметр(ТЗ_ПараметрыПечати, "КонтрагентФактическийАдрес", ДанныеКонтрагента.ФактическийАдрес);
	КонтрагентАдрес	= "";
	Если ЗначениеЗаполнено(ДанныеКонтрагента.ЮридическийАдрес) Тогда
		КонтрагентАдрес	= КонтрагентАдрес + "Юр. адрес: " + ДанныеКонтрагента.ЮридическийАдрес;	
	КонецЕсли; 
	Если ЗначениеЗаполнено(ДанныеКонтрагента.ФактическийАдрес) Тогда
		Если ЗначениеЗаполнено(КонтрагентАдрес) Тогда
			КонтрагентАдрес	= КонтрагентАдрес + Символы.ПС;
		КонецЕсли; 
		КонтрагентАдрес	= КонтрагентАдрес + "Факт. адрес: " + ДанныеКонтрагента.ФактическийАдрес;	
	КонецЕсли; 
	ЗаполнитьПараметр(ТЗ_ПараметрыПечати,"КонтрагентАдрес", КонтрагентАдрес);
	ЗаполнитьПараметр(ТЗ_ПараметрыПечати,"КонтрагентЕмаил", УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект.Контрагент, Справочники.ВидыКонтактнойИнформации.EmailКонтрагента,Объект.Дата));
	ЗаполнитьПараметр(ТЗ_ПараметрыПечати,"Дата", Формат(Объект.Дата, "ДФ='dd MMMM yyyy'"));
	ЗаполнитьПараметр(ТЗ_ПараметрыПечати,"Номер", Объект.Номер);
	
	ЗаполнитьПараметр(ТЗ_ПараметрыПечати,"ДоговорДата", Формат(Объект.Договор.Дата, "ДФ='dd MMMM yyyy'"));
	ЗаполнитьПараметр(ТЗ_ПараметрыПечати,"ДоговорНомер", Объект.Договор.Номер);
	
	///////////////////////////////////////////////////////////////////////////////////////////
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура.Наименование КАК НомНаименование,
	|	РеализацияТоваровУслугТовары.Ссылка.АдресДоставки КАК АдресДоставки,
	|	РеализацияТоваровУслугТовары.Ссылка КАК СсылкаАкт,
	|	РеализацияТоваровУслугТовары.Ссылка.Дата КАК Дата,
	|	РеализацияТоваровУслугТовары.Ссылка.Номер,
	|	РеализацияТоваровУслугТовары.пкТехника КАК Техника,
	|	РеализацияТоваровУслугТовары.Номенклатура.пкЭтоТехника КАК ЭтоТехника
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка В(&СписокРеализаций)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	//МассивРеализаций	
	Запрос.УстановитьПараметр("СписокРеализаций", Объект.Расшифровка.Выгрузить(,"Реализация"));
	Результат = Запрос.Выполнить();
	ТаблицаРезультата = Результат.Выгрузить();
	
	ТаблицаНаименований	= ТаблицаРезультата.Скопировать();
	ТаблицаНаименований.Свернуть("НомНаименование, Техника, ЭтоТехника");
	
	КолвоЕдиниц	= ТаблицаНаименований.Количество();
	ОписаниеДлительности = "единица, единицы, единиц";
	//КоличествоПереданныхЕдиницОборудования	= СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КолвоЕдиниц, ОписаниеДлительности);
	//ЗаполнитьПараметр(ТЗ_ПараметрыПечати, "КоличествоПереданныхЕдиницОборудования", КоличествоПереданныхЕдиницОборудования);
	
	СписокОборудования	= "";
	Для каждого СтрокаНаименования Из ТаблицаНаименований Цикл
		
		Если НЕ СтрокаНаименования.ЭтоТехника Тогда
			Продолжить;
		КонецЕсли; 	
		
		Если СписокОборудования <> "" Тогда
			СписокОборудования	= СписокОборудования + ", ";
		КонецЕсли; 	
		
		СписокОборудования	= СписокОборудования + СтрокаНаименования.НомНаименование + ?(ЗначениеЗаполнено(СтрокаНаименования.Техника), " (" + СОКРЛП(СтрокаНаименования.Техника.Код) + ")" , "");
		
	КонецЦикла; 
	ЗаполнитьПараметр(ТЗ_ПараметрыПечати, "СписокОборудования", СписокОборудования);
	
	///////////////////////////////////////////////////////////////////////////////////////////
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказКлиентаТовары.пкЗаявкаНаАрендуТехники
	|ПОМЕСТИТЬ ЗаявкиНаАренду
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка В(&СписокЗаказов)
	|	И ЗаказКлиентаТовары.пкЗаявкаНаАрендуТехники <> ЗНАЧЕНИЕ(Документ.пкЗаявкаНаАрендуТехники.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(пкЗаданиеНаПеревозку.АдресДоставки КАК СТРОКА(1000)) КАК АдресДоставки
	|ИЗ
	|	ЗаявкиНаАренду КАК ЗаявкиНаАренду
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкЗаданиеНаПеревозку КАК пкЗаданиеНаПеревозку
	|		ПО ЗаявкиНаАренду.пкЗаявкаНаАрендуТехники = пкЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники
	|			И (пкЗаданиеНаПеревозку.Проведен = ИСТИНА)";
	
	Запрос.УстановитьПараметр("СписокЗаказов", Объект.Расшифровка.Выгрузить(, "Счет"));
	ТаблицаАдресовДоставки = Запрос.Выполнить().Выгрузить();
	ТаблицаАдресовДоставки.Свернуть("АдресДоставки");
	АдресОбъекта = "";
	Для каждого СтрокаАдресаДоставки Из ТаблицаАдресовДоставки Цикл
		Если АдресОбъекта <> "" Тогда
			АдресОбъекта	= АдресОбъекта + ", ";
		КонецЕсли; 	
		АдресОбъекта	= АдресОбъекта + СокрЛП(СтрокаАдресаДоставки.АдресДоставки);
	КонецЦикла; 
	ЗаполнитьПараметр(ТЗ_ПараметрыПечати, "АдресОбъекта", АдресОбъекта);
	
	///////////////////////////////////////////////////////////////////////////////////////////
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	пкДоставкаЗаданияНаПеревозку.ЗаданиеНаПеревозку.Номер,
	//               |	пкДоставкаЗаданияНаПеревозку.ЗаданиеНаПеревозку.Дата КАК ЗаданиеНаПеревозкуДата,
	//               |	пкДоставкаЗаданияНаПеревозку.ЗаданиеНаПеревозку.ВидОперации,
	//               |	пкДоставкаЗаданияНаПеревозку.ЗаданиеНаПеревозку.АдресДоставки
	//               |ИЗ
	//               |	Документ.пкДоставка.ЗаданияНаПеревозку КАК пкДоставкаЗаданияНаПеревозку
	//               |
	//               |УПОРЯДОЧИТЬ ПО
	//               |	ЗаданиеНаПеревозкуДата";
	
	//МассивРеализаций	
	//Запрос.УстановитьПараметр("СписокРеализаций", Объект.Расшифровка.Выгрузить(,"Реализация"));
	//Результат = Запрос.Выполнить();
	//ТаблицаРезультата = Результат.Выгрузить();
	
	//////////////////////////////////////////////////////////
	//Новое
//Рарус Владимир Подрезов 15.06.2017
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	ЗаказКлиентаТовары.пкЗаявкаНаАрендуТехники
	//|ПОМЕСТИТЬ ЗаявкиНаАренду
	//|ИЗ
	//|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	//|ГДЕ
	//|	ЗаказКлиентаТовары.Ссылка В(&СписокЗаказов)
	//|	И ЗаказКлиентаТовары.пкЗаявкаНаАрендуТехники <> ЗНАЧЕНИЕ(Документ.пкЗаявкаНаАрендуТехники.ПустаяСсылка)
	//|	И ЗаказКлиентаТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
	//|	И ЗаказКлиентаТовары.пкЗаявкаНаАрендуТехники.ПометкаУдаления = ЛОЖЬ
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	ВЫРАЗИТЬ(пкЗаданиеНаПеревозку.АдресДоставки КАК СТРОКА(1000)) КАК АдресДоставки,
	//|	пкЗаданиеНаПеревозку.Модель КАК Модель,
	//|	пкЗаданиеНаПеревозку.Ссылка КАК Ссылка
	//|ИЗ
	//|	ЗаявкиНаАренду КАК ЗаявкиНаАренду
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.пкЗаданиеНаПеревозку КАК пкЗаданиеНаПеревозку
	//|		ПО ЗаявкиНаАренду.пкЗаявкаНаАрендуТехники = пкЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники
	//|			И (пкЗаданиеНаПеревозку.Проведен = ИСТИНА)
	//|ИТОГИ
	//|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка)
	//|ПО
	//|	АдресДоставки,
	//|	Модель";
	//Запрос.УстановитьПараметр("СписокЗаказов", Объект.Расшифровка.Выгрузить(,"Счет"));
	//СтрокаПоТехнике	= "";
	//ВыборкаАдресовДоставки = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//Пока ВыборкаАдресовДоставки.Следующий() Цикл
	//	//2 единицы оборудования - Optimum 8, Dino 150T – для работы на Объекте по адресу: Большой Сампсониевский пр., 24 (СПб)
	//	Если СтрокаПоТехнике <> "" Тогда
	//		СтрокаПоТехнике		= СтрокаПоТехнике + "; ";
	//	КонецЕсли; 
	//	//СтрокаПоТехнике		= СтрокаПоТехнике + "для работы на объекте по адресу " + ВыборкаАдресовДоставки.АдресДоставки + " ";
	//	ВыборкаЕдиницТехники	= ВыборкаАдресовДоставки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//	СчТиповОборуд			= 0;
	//	ВнСтрокаПоТехнике		= "";
	//	ВнЕдиницТехники			= 0;
	//	Пока ВыборкаЕдиницТехники.Следующий() Цикл
	//		СчТиповОборуд	= СчТиповОборуд + 1;
	//		Если СчТиповОборуд <> 1 Тогда
	//			ВнСтрокаПоТехнике	= ВнСтрокаПоТехнике + ", ";
	//			//СтрокаПоТехнике	= СтрокаПоТехнике + ", ";
	//		КонецЕсли; 
	//		ВнСтрокаПоТехнике	= ВнСтрокаПоТехнике + Строка(ВыборкаЕдиницТехники.Модель);
	//		ВнЕдиницТехники		= ВнЕдиницТехники + ВыборкаЕдиницТехники.Ссылка;
	//		//КолвоЕдиниц		= ВыборкаЕдиницТехники.Ссылка;
	//		//ОписаниеДлительности	= "единицу, единицы, единиц";
	//		//КоличествоПереданныхЕдиницОборудования	= СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КолвоЕдиниц, ОписаниеДлительности);
	//		//
	//		//СтрокаПоТехнике	= СтрокаПоТехнике +КоличествоПереданныхЕдиницОборудования;
	//		//СтрокаПоТехнике	= СтрокаПоТехнике + " оборудования " + ВыборкаЕдиницТехники.Модель
	//	КонецЦикла; 
	//	ОписаниеДлительности = "единицу, единицы, единиц";
	//	КоличествоПереданныхЕдиницОборудования	= СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(ВнЕдиницТехники, ОписаниеДлительности);
	//	СтрокаПоТехнике			= СтрокаПоТехнике + КоличествоПереданныхЕдиницОборудования + " оборудования – " + ВнСтрокаПоТехнике + " – для работы на Объекте по адресу: " + ВыборкаАдресовДоставки.АдресДоставки;
	//КонецЦикла; 
	//ЗаполнитьПараметр(ТЗ_ПараметрыПечати, "СтрокаПоТехнике", СтрокаПоТехнике);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказКлиентаТовары.пкЗаявкаНаАрендуТехники,
	|	ЗаказКлиентаТовары.Номенклатура КАК Модель,
	|	ЗаказКлиентаТовары.пкТехника КАК Техника
	|ПОМЕСТИТЬ ЗаявкиНаАренду
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка В(&СписокЗаказов)
	|	И ЗаказКлиентаТовары.пкЗаявкаНаАрендуТехники <> ЗНАЧЕНИЕ(Документ.пкЗаявкаНаАрендуТехники.ПустаяСсылка)
//Рарус Владимир Подрезов 18.09.2017
	|	И НЕ ЗаказКлиентаТовары.Ссылка.пкЗакрыт
//Рарус Владимир Подрезов Конец
	|	И НЕ ЗаказКлиентаТовары.Ссылка.ПометкаУдаления
	|	И НЕ ЗаказКлиентаТовары.пкЗаявкаНаАрендуТехники.ПометкаУдаления
	|	И ЗаказКлиентаТовары.Номенклатура.пкЭтоТехника
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиентаТовары.пкЗаявкаНаАрендуТехники,
	|	ЗаказКлиентаТовары.Номенклатура,
	|	ЗаказКлиентаТовары.пкТехника
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА пкЗаданиеНаПеревозкуПриемка.Ссылка ЕСТЬ NULL
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(пкЗаданиеНаПеревозкуВозврат.АдресДоставки, ЗаявкиНаАренду.пкЗаявкаНаАрендуТехники.АдресДоставки) КАК СТРОКА(1000))
	|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(пкЗаданиеНаПеревозкуПриемка.АдресДоставки, ЗаявкиНаАренду.пкЗаявкаНаАрендуТехники.АдресДоставки) КАК СТРОКА(1000))
	|	КОНЕЦ КАК АдресДоставки,
	|	ЗаявкиНаАренду.Модель КАК Модель,
	|	ЗаявкиНаАренду.Техника КАК Техника,
	|	пкЗаданиеНаПеревозкуПриемка.Ссылка КАК Приемка,
	|	пкЗаданиеНаПеревозкуВозврат.Ссылка КАК Возврат
	|ИЗ
	|	ЗаявкиНаАренду КАК ЗаявкиНаАренду
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкЗаданиеНаПеревозку КАК пкЗаданиеНаПеревозкуПриемка
	|		ПО (пкЗаданиеНаПеревозкуПриемка.ЗаявкаНаАрендуТехники = ЗаявкиНаАренду.пкЗаявкаНаАрендуТехники)
	|			И (пкЗаданиеНаПеревозкуПриемка.Модель = ЗаявкиНаАренду.Модель)
	|			И (пкЗаданиеНаПеревозкуПриемка.Техника = ЗаявкиНаАренду.Техника)
	|			И (пкЗаданиеНаПеревозкуПриемка.Проведен)
	|			И (пкЗаданиеНаПеревозкуПриемка.Статус = ЗНАЧЕНИЕ(Перечисление.пкСтатусыЗаданийНаПеревозку.КДоставке))
	|			И (пкЗаданиеНаПеревозкуПриемка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
	|				ИЛИ пкЗаданиеНаПеревозкуПриемка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|					И пкЗаданиеНаПеревозкуПриемка.ЗаданиеНаПеревозку <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкЗаданиеНаПеревозку КАК пкЗаданиеНаПеревозкуВозврат
	|		ПО (пкЗаданиеНаПеревозкуВозврат.ЗаявкаНаАрендуТехники = ЗаявкиНаАренду.пкЗаявкаНаАрендуТехники)
	|			И (пкЗаданиеНаПеревозкуВозврат.Модель = ЗаявкиНаАренду.Модель)
	|			И (пкЗаданиеНаПеревозкуВозврат.Техника = ЗаявкиНаАренду.Техника)
	|			И (пкЗаданиеНаПеревозкуВозврат.Проведен)
	|			И (пкЗаданиеНаПеревозкуВозврат.Статус = ЗНАЧЕНИЕ(Перечисление.пкСтатусыЗаданийНаПеревозку.КДоставке))
	|			И (пкЗаданиеНаПеревозкуВозврат.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
	|				ИЛИ пкЗаданиеНаПеревозкуВозврат.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|					И пкЗаданиеНаПеревозкуВозврат.ЗаданиеНаПеревозку = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА пкЗаданиеНаПеревозкуПриемка.Ссылка ЕСТЬ NULL
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(пкЗаданиеНаПеревозкуВозврат.АдресДоставки, ЗаявкиНаАренду.пкЗаявкаНаАрендуТехники.АдресДоставки) КАК СТРОКА(1000))
	|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(пкЗаданиеНаПеревозкуПриемка.АдресДоставки, ЗаявкиНаАренду.пкЗаявкаНаАрендуТехники.АдресДоставки) КАК СТРОКА(1000))
	|	КОНЕЦ,
	|	ЗаявкиНаАренду.Модель,
	|	ЗаявкиНаАренду.Техника,
	|	пкЗаданиеНаПеревозкуПриемка.Ссылка,
	|	пкЗаданиеНаПеревозкуВозврат.Ссылка
	|ИТОГИ ПО
	|	АдресДоставки,
	|	Модель";
	
	Запрос.УстановитьПараметр("СписокЗаказов", Объект.Расшифровка.Выгрузить(,"Счет"));
	
	СтрокаПоТехнике	= "";
	
	АктыПриемкиОборудования		= "";
	АктыВозвратаОборудования	= "";
	СписокДатыПриемки			= Новый СписокЗначений;
	СписокДатыВозврата			= Новый СписокЗначений;
	
	ВыборкаАдресовДоставки = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаАдресовДоставки.Следующий() Цикл
		Если СтрокаПоТехнике <> "" Тогда
			СтрокаПоТехнике		= СтрокаПоТехнике + "; ";
		КонецЕсли; 
		
		ВнСтрокаПоТехнике	= "";
		ВсегоЕдиниц			= 0;
		
		ВыборкаМодели	= ВыборкаАдресовДоставки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаМодели.Следующий() Цикл
			
			ВыборкаЕдиницТехники	= ВыборкаМодели.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаЕдиницТехники.Следующий() Цикл
				
				ВсегоЕдиниц		= ВсегоЕдиниц + 1;
				
				Если ВнСтрокаПоТехнике <> "" Тогда
					ВнСтрокаПоТехнике	= ВнСтрокаПоТехнике + ", ";
				КонецЕсли; 
				
				Если ЗначениеЗаполнено(ВыборкаЕдиницТехники.Приемка) И ЗначениеЗаполнено(ВыборкаЕдиницТехники.Приемка.ДатаОтгрузки) Тогда
					Если СписокДатыПриемки.НайтиПоЗначению(ВыборкаЕдиницТехники.Приемка.ДатаОтгрузки) = Неопределено Тогда
						СписокДатыПриемки.Добавить(ВыборкаЕдиницТехники.Приемка.ДатаОтгрузки);
					КонецЕсли;
				КонецЕсли; 	
				Если ЗначениеЗаполнено(ВыборкаЕдиницТехники.Возврат) И ЗначениеЗаполнено(ВыборкаЕдиницТехники.Возврат.ДатаОтгрузки) Тогда
					Если СписокДатыВозврата.НайтиПоЗначению(ВыборкаЕдиницТехники.Возврат.ДатаОтгрузки) = Неопределено Тогда
						СписокДатыВозврата.Добавить(ВыборкаЕдиницТехники.Возврат.ДатаОтгрузки);
					КонецЕсли;
				КонецЕсли; 	
				
				ВнСтрокаПоТехнике	= ВнСтрокаПоТехнике + Строка(ВыборкаМодели.Модель) + 
										?(ЗначениеЗаполнено(ВыборкаЕдиницТехники.Техника) <> "", " (" + СокрЛП(ВыборкаЕдиницТехники.Техника.Код) + ")", "");
				
			КонецЦикла;
		КонецЦикла; 
		ОписаниеДлительности	= "единицу, единицы, единиц";
		ВсегоЕдиницСтрокой		= СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(ВсегоЕдиниц, ОписаниеДлительности);
		СтрокаПоТехнике			= СтрокаПоТехнике + ВсегоЕдиницСтрокой + " оборудования – " + ВнСтрокаПоТехнике + " – для работы на Объекте по адресу: " + ВыборкаАдресовДоставки.АдресДоставки;
	КонецЦикла; 
	ЗаполнитьПараметр(ТЗ_ПараметрыПечати, "СтрокаПоТехнике", СтрокаПоТехнике);
	
	Для Каждого текСтрока Из СписокДатыПриемки Цикл
		Если АктыПриемкиОборудования = "" Тогда
			АктыПриемкиОборудования = АктыПриемкиОборудования + "от ";
		Иначе
			АктыПриемкиОборудования = АктыПриемкиОборудования + ", ";
		КонецЕсли;
		АктыПриемкиОборудования = АктыПриемкиОборудования + Формат(текСтрока.Значение, "ДФ=dd.MM.yyyy");
	КонецЦикла;
	Если ЗначениеЗаполнено(АктыПриемкиОборудования) Тогда
		ЗаполнитьПараметр(ТЗ_ПараметрыПечати, "АктыПриемкиОборудования", АктыПриемкиОборудования);
	Иначе	
		ЗаполнитьПараметр(ТЗ_ПараметрыПечати, "АктыПриемкиОборудования", "____________________");
	КонецЕсли; 
		
	Для Каждого текСтрока Из СписокДатыВозврата Цикл
		Если АктыВозвратаОборудования = "" Тогда
			АктыВозвратаОборудования = АктыВозвратаОборудования + "от ";
		Иначе
			АктыВозвратаОборудования = АктыВозвратаОборудования + ", ";
		КонецЕсли;
		АктыВозвратаОборудования = АктыВозвратаОборудования + Формат(текСтрока.Значение, "ДФ=dd.MM.yyyy");
	КонецЦикла;
	Если ЗначениеЗаполнено(АктыВозвратаОборудования) Тогда
		ЗаполнитьПараметр(ТЗ_ПараметрыПечати, "АктыВозвратаОборудования", АктыВозвратаОборудования);
	Иначе	
		ЗаполнитьПараметр(ТЗ_ПараметрыПечати, "АктыВозвратаОборудования", "____________________");
	КонецЕсли; 
//Рарус Владимир Подрезов Конец
	
	///////////////////////////////////////////////////////////////////////////////////////////
	ТаблицаАктыСдачиРабот	= ТаблицаРезультата.Скопировать();
	ТаблицаАктыСдачиРабот.Свернуть("СсылкаАкт, Дата, Номер");
	АктыСдачиРабот			= "";
	НомерИДатаАктаНаРемонт	= "";
	ВидНоменклатурыРемонт	= Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Ремонт");
	Для каждого СтрокаАктыСдачиРабот Из ТаблицаАктыСдачиРабот Цикл
		ЭтоРемонт = Ложь;
		Если ЗначениеЗаполнено(ВидНоменклатурыРемонт) Тогда
			Попытка
				ЭтоРемонт	= (СтрокаАктыСдачиРабот.СсылкаАкт.Товары[0].Номенклатура.ВидНоменклатуры = ВидНоменклатурыРемонт);
			Исключение
			КонецПопытки; 
		КонецЕсли; 
		
		Если ЭтоРемонт Тогда
			Если НомерИДатаАктаНаРемонт <> "" Тогда
				НомерИДатаАктаНаРемонт	= НомерИДатаАктаНаРемонт + ", ";
			КонецЕсли; 	
			НомерИДатаАктаНаРемонт	= НомерИДатаАктаНаРемонт + "№" + СтрокаАктыСдачиРабот.Номер + " от " + Формат(СтрокаАктыСдачиРабот.Дата, "ДФ=dd.MM.yyyy");
		Иначе	
			Если АктыСдачиРабот <> "" Тогда
				АктыСдачиРабот	= АктыСдачиРабот + ", ";
			КонецЕсли; 	
			АктыСдачиРабот	= АктыСдачиРабот + "№" + СтрокаАктыСдачиРабот.Номер + " от " + Формат(СтрокаАктыСдачиРабот.Дата, "ДФ=dd.MM.yyyy");
		КонецЕсли; 
	КонецЦикла; 
	
	ЗаполнитьПараметр(ТЗ_ПараметрыПечати, "АктыСдачиРабот", АктыСдачиРабот);
	Если ЗначениеЗаполнено(НомерИДатаАктаНаРемонт) Тогда
		ЗаполнитьПараметр(ТЗ_ПараметрыПечати, "НомерИДатаАктаНаРемонт", НомерИДатаАктаНаРемонт);
	Иначе	
		ЗаполнитьПараметр(ТЗ_ПараметрыПечати, "НомерИДатаАктаНаРемонт", "____________________");
	КонецЕсли; 
	
	///////////////////////////////////////////////////////////////////////////////////////////
//Рарус Владимир Подрезов 15.06.2017
//Закомментировано: Обрабатывается ранее при формировании наименования оборудования
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	ЗаказКлиентаТовары.пкЗаявкаНаАрендуТехники
	//|ПОМЕСТИТЬ ЗаявкиНаАренду
	//|ИЗ
	//|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	//|ГДЕ
	//|	ЗаказКлиентаТовары.Ссылка В(&СписокЗаказов)
	//|	И ЗаказКлиентаТовары.пкЗаявкаНаАрендуТехники <> ЗНАЧЕНИЕ(Документ.пкЗаявкаНаАрендуТехники.ПустаяСсылка)
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	пкЗаданиеНаПеревозку.ВидОперации КАК ВидОперации,
	//|	пкЗаданиеНаПеревозку.Ссылка
	//|ИЗ
	//|	ЗаявкиНаАренду КАК ЗаявкиНаАренду
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкЗаданиеНаПеревозку КАК пкЗаданиеНаПеревозку
	//|		ПО ЗаявкиНаАренду.пкЗаявкаНаАрендуТехники = пкЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники
	//|			И (пкЗаданиеНаПеревозку.Проведен = ИСТИНА)
	//|ИТОГИ ПО
	//|	ВидОперации";
	//
	//Запрос.УстановитьПараметр("СписокЗаказов", Объект.Расшифровка.Выгрузить(, "Счет"));
	//Результат = Запрос.Выполнить();
	//ВыборкаВида = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//АктыПриемкиОборудования		= "";
	//АктыВозвратаОборудования	= "";
	//Пока ВыборкаВида.Следующий() Цикл
	//	Если ВыборкаВида.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента Тогда
	//		Выборка	= ВыборкаВида.Выбрать();
	//		Пока Выборка.Следующий() Цикл
	//			Если АктыВозвратаОборудования <> "" Тогда
	//				АктыВозвратаОборудования	= АктыВозвратаОборудования + ", ";
	//			КонецЕсли; 	
	//			АктыВозвратаОборудования	= АктыВозвратаОборудования + "№" + Выборка.Ссылка.Номер + " от " + Формат(Выборка.Ссылка.Дата, "ДФ=dd.MM.yyyy");
	//		КонецЦикла; 
	//	ИначеЕсли ВыборкаВида.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту Тогда
	//		Выборка	= ВыборкаВида.Выбрать();
	//		Пока Выборка.Следующий() Цикл
	//			Если АктыПриемкиОборудования <> "" Тогда
	//				АктыПриемкиОборудования	= АктыПриемкиОборудования + ", ";
	//			КонецЕсли; 	
	//			АктыПриемкиОборудования	= АктыПриемкиОборудования + "№" + Выборка.Ссылка.Номер + " от " + Формат(Выборка.Ссылка.Дата,"ДФ=dd.MM.yyyy");
	//		КонецЦикла; 
	//	КонецЕсли; 	
	//КонецЦикла;
	//
	//Если ЗначениеЗаполнено(АктыПриемкиОборудования) Тогда
	//	ЗаполнитьПараметр(ТЗ_ПараметрыПечати, "АктыПриемкиОборудования", АктыПриемкиОборудования);
	//Иначе	
	//	ЗаполнитьПараметр(ТЗ_ПараметрыПечати, "АктыПриемкиОборудования", "____________________");
	//КонецЕсли; 
	//Если ЗначениеЗаполнено(АктыВозвратаОборудования) Тогда
	//	ЗаполнитьПараметр(ТЗ_ПараметрыПечати, "АктыВозвратаОборудования", АктыВозвратаОборудования);
	//Иначе	
	//	ЗаполнитьПараметр(ТЗ_ПараметрыПечати, "АктыВозвратаОборудования", "____________________");
	//КонецЕсли; 
	//
//Рарус Владимир Подрезов Конец

	///////////////////////////////////////////////////////////////////////////////////////////
	НомерИДатаСчетаНаРемонт = "";
	Если ЗначениеЗаполнено(ВидНоменклатурыРемонт) Тогда
		ТаблРасшифровкиСчет	= Объект.Расшифровка.Выгрузить();
		ТаблРасшифровкиСчет.Свернуть("Счет");
		Для каждого СтрокаТаблРасшифровкиСчет Из ТаблРасшифровкиСчет Цикл
			ЭтоРемонт	= Ложь;
			Попытка
				ЭтоРемонт	= (СтрокаТаблРасшифровкиСчет.Счет.Товары[0].Номенклатура.ВидНоменклатуры = ВидНоменклатурыРемонт);
			Исключение
			КонецПопытки; 
			Если ЭтоРемонт Тогда
				Если НомерИДатаСчетаНаРемонт <> "" Тогда
					НомерИДатаСчетаНаРемонт	= НомерИДатаСчетаНаРемонт + ", ";
				КонецЕсли; 	
				НомерИДатаСчетаНаРемонт	= НомерИДатаСчетаНаРемонт + "№" + СтрокаТаблРасшифровкиСчет.Счет.Номер + " от " + Формат(СтрокаТаблРасшифровкиСчет.Счет.Дата, "ДФ=dd.MM.yyyy");
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	Если ЗначениеЗаполнено(НомерИДатаСчетаНаРемонт) Тогда
		ЗаполнитьПараметр(ТЗ_ПараметрыПечати, "НомерИДатаСчетаНаРемонт", НомерИДатаСчетаНаРемонт);
	Иначе	
		ЗаполнитьПараметр(ТЗ_ПараметрыПечати, "НомерИДатаСчетаНаРемонт", "____________________");
	КонецЕсли; 
	
	///////////////////////////////////////////////////////////////////////////////////////////
	Если ЗначениеЗаполнено(Объект.МаксимальноДопустимаяДатаЗадолженности) Тогда
		ЗаполнитьПараметр(ТЗ_ПараметрыПечати, "МаксимальноДопустимаяДатаЗадолженности", Объект.МаксимальноДопустимаяДатаЗадолженности);
	Иначе	
		ЗаполнитьПараметр(ТЗ_ПараметрыПечати, "МаксимальноДопустимаяДатаЗадолженности", "____________________");
	КонецЕсли; 
	
	///////////////////////////////////////////////////////////////////////////////////////////
	Если ЗначениеЗаполнено(Объект.ДатаВозврата) Тогда
		ЗаполнитьПараметр(ТЗ_ПараметрыПечати, "ДатаВозврата", Объект.ДатаВозврата);
	Иначе
		ЗаполнитьПараметр(ТЗ_ПараметрыПечати, "ДатаВозврата", "____________________");
	КонецЕсли; 	
	
	///////////////////////////////////////////////////////////////////////////////////////////
	Если КолвоЕдиниц > 0 Тогда
		МесяцНарушенияУсловий = Формат(ТаблицаРезультата[0].Дата, "ДФ='MMMM'");
		Если Прав(МесяцНарушенияУсловий, 1) = "ь" Тогда
			МесяцНарушенияУсловий	= СтрЗаменить(МесяцНарушенияУсловий, "ь", "я");
		ИначеЕсли Прав(МесяцНарушенияУсловий, 1)= "й" Тогда
			МесяцНарушенияУсловий	= СтрЗаменить(МесяцНарушенияУсловий, "й", "я");
		Иначе	
			МесяцНарушенияУсловий	= МесяцНарушенияУсловий + "а";
		КонецЕсли; 
		ЗаполнитьПараметр(ТЗ_ПараметрыПечати,"МесяцНарушенияУсловий", МесяцНарушенияУсловий + Формат(ТаблицаРезультата[0].Дата, "ДФ=' yyyy'"));
	КонецЕсли; 
	
	///////////////////////////////////////////////////////////////////////////////////////////
	ЗаполнитьПараметр(ТЗ_ПараметрыПечати, "СуммаПретензии", Формат(Объект.СуммаДокумента, "ЧДЦ=2"));
	
	ФормСтрока	= "Л = ru_RU;";
	ПарПредмета	= "рубль, рубля, рублей, м";
	//ФормСтрока	= "Л = ru_RU; ДП = Истина";
	//ПарПредмета	= "доллар,доллара,долларов,м,цент,цента,центов,м,2";
	СуммаПретензииПрописью	= ЧислоПрописью(Цел(Объект.СуммаДокумента), ФормСтрока, ПарПредмета);
	ПозицияРубля			= СтрНайти(СуммаПретензииПрописью, "руб");
	ЗаполнитьПараметр(ТЗ_ПараметрыПечати, "СуммаПретензииПрописью", Лев(СуммаПретензииПрописью, ПозицияРубля-1));
	ЗаполнитьПараметр(ТЗ_ПараметрыПечати, "РублиВПадеже", СокрЛП(Сред(СуммаПретензииПрописью, ПозицияРубля, 6)));
	
	///////////////////////////////////////////////////////////////////////////////////////////
	Если Объект.Подписывает.Пустая() Тогда
		ОтветственныеЛица = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(Объект.Организация, Объект.Дата);
		//Подвал.Параметры.ДолжностьРуководителя          = ОтветственныеЛица.РуководительДолжность;
		//Подвал.Параметры.РасшифровкаПодписиРуководителя = ОтветственныеЛица.Руководитель;
		ЗаполнитьПараметр(ТЗ_ПараметрыПечати,"Руководитель",ОтветственныеЛица.Руководитель);
		РуководительПерем = ОтветственныеЛица.Руководитель;
	Иначе
		ЗаполнитьПараметр(ТЗ_ПараметрыПечати,"Руководитель",Объект.Подписывает);
		РуководительПерем = Объект.Подписывает;
	КонецЕсли;

	ЗапросСуда=Новый Запрос;	
	ЗапросСуда.Текст = 
	"ВЫБРАТЬ
	|	пкРеквизитыПечатныхФормСрезПоследних.Период,
	|	пкРеквизитыПечатныхФормСрезПоследних.Подразделение,
	|	пкРеквизитыПечатныхФормСрезПоследних.Руководитель,
	|	пкРеквизитыПечатныхФормСрезПоследних.НомерДоверенности,
	|	пкРеквизитыПечатныхФормСрезПоследних.ДатаДоверенности,
	|	пкРеквизитыПечатныхФормСрезПоследних.Должность,
	|	пкРеквизитыПечатныхФормСрезПоследних.ТекстШапки,
	|	пкРеквизитыПечатныхФормСрезПоследних.ТекстШапкиАнгл,
	|	пкРеквизитыПечатныхФормСрезПоследних.НомерТелефона,
	|	пкРеквизитыПечатныхФормСрезПоследних.ЭлектронныйАдрес,
	|	пкРеквизитыПечатныхФормСрезПоследних.ЭлектронныйАдрес1,
	|	пкРеквизитыПечатныхФормСрезПоследних.ГородСуда,
	|	пкРеквизитыПечатныхФормСрезПоследних.ГородСудаАнгл,
	|	пкРеквизитыПечатныхФормСрезПоследних.ГородВыезда,
	|	пкРеквизитыПечатныхФормСрезПоследних.ГородВыездаАнгл,
	|	пкРеквизитыПечатныхФормСрезПоследних.АдресПередачи,
	|	пкРеквизитыПечатныхФормСрезПоследних.ДопПодписьГлБух,
	|	пкРеквизитыПечатныхФормСрезПоследних.ДопПодписьРуководитель
	|ИЗ
	|	РегистрСведений.пкРеквизитыПечатныхФорм.СрезПоследних КАК пкРеквизитыПечатныхФормСрезПоследних
	|ГДЕ
	|	пкРеквизитыПечатныхФормСрезПоследних.Руководитель = &Руководитель";
	ЗапросСуда.УстановитьПараметр("Руководитель", РуководительПерем);
	
	ВыборкаСуда	= ЗапросСуда.Выполнить().Выбрать();
	Если ВыборкаСуда.Следующий() Тогда
		ЗаполнитьПараметр(ТЗ_ПараметрыПечати, "ГородСуда", ВыборкаСуда.ГородСуда);
	иначе	
		ЗаполнитьПараметр(ТЗ_ПараметрыПечати, "ГородСуда", Неопределено);
	КонецЕсли; 
	
	///////////////////////////////////////////////////////////////////////////////////////////
	ТаблицаПараметровПечати.Загрузить(ТЗ_ПараметрыПечати);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметр(ТаблицаПараметров,ИмяПараметра,Значениепараметра)
	перемЗначениепараметра=Значениепараметра;
	Если не ЗначениеЗаполнено(перемЗначениепараметра) Тогда
		перемЗначениепараметра="__________";
	КонецЕсли; 
	СтрокаПараметра=ТаблицаПараметров.Найти(ИмяПараметра,"ИмяПараметра");
	Если СтрокаПараметра=Неопределено Тогда
		СтрокаПараметра=ТаблицаПараметров.Добавить();	
		СтрокаПараметра.ИмяПараметра=ИмяПараметра;
	КонецЕсли; 	
	СтрокаПараметра.ЗначениеПараметра=перемЗначениепараметра;
КонецПроцедуры

&НаКлиенте
Процедура ПечатьВордПретензия1_Аренда(Команда)
	
	СтруктураПараметров=ПолучитьСтруктуруПараметров();
	Word = Новый COMОбъект("Word.Application"); 
	Макет = ПолучитьМакетСервер("ШаблонВордПретензия1_Аренда");
	временныйПуть = КаталогВременныхФайлов();
	имяВременногоФайла = временныйПуть + "Претензия (услуги аренды).doc";
	Попытка
		Макет.Записать(имяВременногоФайла);
	Исключение
		имяВременногоФайла = временныйПуть + "Претензия (услуги аренды)(время печати "+Формат(ТекущаяДата(),"ДФ=MMdd_hhmmss")+").doc";
		Макет.Записать(имяВременногоФайла);
	КонецПопытки; 
	ТекДок = Word.Documents.ADD(имяВременногоФайла);
	СоздатьПеременныеВВорд(ТекДок);
	Для каждого ВыбранныйПараметр Из СтруктураПараметров Цикл
		Попытка
		ТекДок.Variables(ВыбранныйПараметр.Ключ).Value=ВыбранныйПараметр.Значение;
		Исключение
		
		КонецПопытки; 	
	КонецЦикла; 
	//ТекДок.Variables("ОрганизацияНаименование").Value=СтруктураПараметров["ОрганизацияНаименование"];
	//ТекДок.Variables("ОрганизацияНаименованиеПолное").Value=СтруктураПараметров["ОрганизацияНаименованиеПолное"];
	//ТекДок.Variables("КонтрагентНаименование").Value=СтруктураПараметров["КонтрагентНаименование"];
	//ТекДок.Variables("orgNameS").Value=Данные.ОргКртако;
	//ТекДок.Variables("DocDate").Value=Данные.Дата;
	//ТекДок.Variables("fio").Value=Данные.ФИО;
	//ТекДок.Variables("orgNameLong").Value=Данные.ОргДлинно;
	ТекДок.Fields.Update();
	Word.ActiveWindow.View.ShowFieldCodes = False;
	Word.Visible=Истина;
	Для каждого oStory Из ТекДок.StoryRanges Цикл 
	Для каждого oField Из oStory.Fields Цикл 
	oField.Update(); 
	КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПеременныеВВорд(WordDoc) Экспорт
	//Проходим по всем полям и делаем содержимое поля "переменной"
	Для ъТек=1 По WordDoc.Fields.Count Цикл
		ИмяПоля = WordDoc.Fields(ъТек).Code.Text;
		Если Найти(ИмяПоля, "docvariable")=0 Тогда
			Попытка
			WordDoc.Variables.Add(СокрЛП(WordDoc.Fields(ъТек).Code.Text));
			Исключение
			
			КонецПопытки; 
			WordDoc.Fields(ъТек).Code.Text ="docvariable "+СокрЛП(WordDoc.Fields(ъТек).Code.Text);
		КонецЕсли;
		//	Пример записи данных в поле (без переменной)
		//	WordDoc.Fields(1).Result.Text="куку"
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруПараметров()
	
	СтруктураПараметров = Новый Структура;
	Для каждого СтрокаПараметра Из ТаблицаПараметровПечати Цикл
		СтруктураПараметров.Вставить(СтрокаПараметра.ИмяПараметра,СтрокаПараметра.ЗначениеПараметра);
	КонецЦикла;
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция ПолучитьМакетСервер(МакетИмя)
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьМакет(МакетИмя);
КонецФункции

&НаСервере
Функция ПечатьТаблДокПретензия1_АрендаНаСервере(СтруктураПараметровДляПечати)
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	МакетПретензия=ДокументОбъект.ПолучитьПечатьТаблДокПретензия1(СтруктураПараметровДляПечати);
	Возврат МакетПретензия;
КонецФункции

&НаКлиенте
Процедура ПечатьТаблДокПретензия1_Аренда(Команда)
	СтруктураПараметровДляПечати=ПолучитьСтруктуруПараметров();
	МакетПретензия=ПечатьТаблДокПретензия1_АрендаНаСервере(СтруктураПараметровДляПечати);
	МакетПретензия.Показать();	
КонецПроцедуры

&НаСервере
Функция ПечатьТаблДокПретензия2_АрендаРемонтНаСервере(СтруктураПараметровДляПечати)
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	МакетПретензия=ДокументОбъект.ПолучитьПечатьТаблДокПретензия2(СтруктураПараметровДляПечати);
	Возврат МакетПретензия;
КонецФункции

&НаКлиенте
Процедура ПечатьТаблДокПретензия2_АрендаРемонт(Команда)
	СтруктураПараметровДляПечати=ПолучитьСтруктуруПараметров();
	МакетПретензия=ПечатьТаблДокПретензия2_АрендаРемонтНаСервере(СтруктураПараметровДляПечати);
	МакетПретензия.Показать();	
КонецПроцедуры


&НаСервере
Функция ПечатьТаблДокПретензия3_АрендаВозвратНаСервере(СтруктураПараметровДляПечати)
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	МакетПретензия=ДокументОбъект.ПолучитьПечатьТаблДокПретензия3(СтруктураПараметровДляПечати);
	Возврат МакетПретензия;
КонецФункции

&НаКлиенте
Процедура ПечатьТаблДокПретензия3_АрендаВозврат(Команда)
	СтруктураПараметровДляПечати=ПолучитьСтруктуруПараметров();
	МакетПретензия=ПечатьТаблДокПретензия3_АрендаВозвратНаСервере(СтруктураПараметровДляПечати);
	МакетПретензия.Показать();	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ТекущаяСтрока = Элементы.Расшифровка.ТекущиеДанные;
		ТекущаяСтрока.Реализация = РасшифровкаПриНачалеРедактированияНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция РасшифровкаПриНачалеРедактированияНаСервере()
	Возврат Документы.РеализацияТоваровУслуг.ПустаяСсылка();
КонецФункции
