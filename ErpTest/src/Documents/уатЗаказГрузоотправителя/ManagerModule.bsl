#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	уатЗаказГрузоотправителяТовары.Ссылка.Дата КАК Период,
	|	уатЗаказГрузоотправителяТовары.Ссылка КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	уатЗаказГрузоотправителяТовары.Ссылка.Контрагент,
	|	уатЗаказГрузоотправителяТовары.Ссылка.ДоговорКонтрагента,
	|	уатЗаказГрузоотправителяТовары.Ссылка КАК ЗаказГрузоотправителя,
	|	уатЗаказГрузоотправителяТовары.Номенклатура,
	|	уатЗаказГрузоотправителяТовары.ЕдиницаИзмерения,
	|	СУММА(уатЗаказГрузоотправителяТовары.Количество) *
	|	ВЫБОР КОГДА уатЗаказГрузоотправителяТовары.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1)
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяТовары
	|ГДЕ
	|	уатЗаказГрузоотправителяТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	уатЗаказГрузоотправителяТовары.Ссылка.Дата,
	|	уатЗаказГрузоотправителяТовары.Ссылка,
	|	уатЗаказГрузоотправителяТовары.Ссылка.Контрагент,
	|	уатЗаказГрузоотправителяТовары.Ссылка.ДоговорКонтрагента,
	|	уатЗаказГрузоотправителяТовары.Номенклатура,
	|	уатЗаказГрузоотправителяТовары.ЕдиницаИзмерения,
	|	уатЗаказГрузоотправителяТовары.Ссылка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"уатЗаказГрузоотправителяТовары.ЕдиницаИзмерения",
			"уатЗаказГрузоотправителяТовары.Номенклатура"));
			
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	ТаблицаДокумента = Запрос.Выполнить().Выгрузить();
	
	//управляемая блокировка
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатЗаказыГрузоотправителей");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ТаблицаДокумента;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Контрагент", "Контрагент");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ЗаказГрузоотправителя", "ЗаказГрузоотправителя");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	Блокировка.Заблокировать();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗаказовГрузоотправителя", ТаблицаДокумента);
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ДокументСсылка);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатЗаказыГрузоотправителейОстатки.Контрагент,
	|	уатЗаказыГрузоотправителейОстатки.Номенклатура,
	|	уатЗаказыГрузоотправителейОстатки.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.уатЗаказыГрузоотправителей.Остатки(&МоментКонтроля, ЗаказГрузоотправителя = &Ссылка) КАК уатЗаказыГрузоотправителейОстатки
	|ГДЕ
	|	уатЗаказыГрузоотправителейОстатки.КоличествоОстаток < 0";
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("МоментКонтроля", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = "Получены отрицательные остатки по заказчику """ + Выборка.Контрагент + """ для номенклатуры " + Выборка.Номенклатура;
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок, СтатусСообщения.Внимание);	
	КонецЦикла;
КонецПроцедуры

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	Заглушка = Истина;
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатЗаказГрузоотправителя";
	КомандаПечати.Идентификатор = "ЗаказНаТС";
	КомандаПечати.Представление = НСтр("ru = 'Заказ на ТС'");
	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если НЕ уатОбщегоНазначенияСервер.РазрешениеПечатиНепроведенногоДокумента(МассивОбъектов) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаказНаТС") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЗаказНаТС", "Заказ на ТС", ПечатьЗаказНаТС(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.УстановитьРедактированиеПечатныхФормДокумента(КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПечатьЗаказНаТС(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ЗаказНаТС";
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_уатЗаказГрузоотправителя_ЗаказНаТС";
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатЗаказГрузоотправителя.ПФ_MXL_ЗаказНаТС");
		
		// Заголовок
		Область = Макет.ПолучитьОбласть("Заголовок");
		Область.Параметры.Номер = ТекущийДокумент.Номер;
		ФорматДаты = "ДФ='дд ММММ гггг'";
		Область.Параметры.Дата = Формат(ТекущийДокумент.Дата, ФорматДаты);
		ТабличныйДокумент.Вывести(Область);
		
		// Шапка
		Шапка = Макет.ПолучитьОбласть("Шапка");
		Шапка.Параметры.Заполнить(ТекущийДокумент);
		Шапка.Параметры.Организация = ТекущийДокумент.Организация;
		Шапка.Параметры.Контрагент = ТекущийДокумент.Контрагент;
		Шапка.Параметры.Ответственный = ТекущийДокумент.Ответственный;
		Шапка.Параметры.АдресДоставки = ТекущийДокумент.АдресНазначения;
		ТабличныйДокумент.Вывести(Шапка);
		
		// Заказы
		Область = Макет.ПолучитьОбласть("ЗаказыШапка");
		ТабличныйДокумент.Вывести(Область);
		ОбластьЗаказы = Макет.ПолучитьОбласть("Заказы");
		Для Каждого ТекСтрокаЗаказы Из ТекущийДокумент.Товары Цикл
			ОбластьЗаказы.Параметры.Заполнить(ТекСтрокаЗаказы);
			ОбластьЗаказы.Параметры.Вес = ТекСтрокаЗаказы.ВесБрутто;
			Если Не ЗначениеЗаполнено(ТекСтрокаЗаказы.ЕдиницаИзмерения) Тогда 
				ОбластьЗаказы.Параметры.Заполнить(Новый Структура("ЕдиницаИзмерения", ТекСтрокаЗаказы.Номенклатура.ЕдиницаИзмерения));
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьЗаказы);
		КонецЦикла;
		
		Сумма    = 0;
		СуммаНДС = 0;
		
		// Услуги
		Область = Макет.ПолучитьОбласть("УслугиШапка");
		ТабличныйДокумент.Вывести(Область);
		ОбластьУслуги = Макет.ПолучитьОбласть("Услуги");
		Для Каждого ТекСтрокаУслуги Из ТекущийДокумент.Услуги Цикл
			ОбластьУслуги.Параметры.Заполнить(ТекСтрокаУслуги);
			ОбластьУслуги.Параметры.Номенклатура = уатОбщегоНазначенияСервер.ПолучитьНаименованиеУслугиДляПечати(ТекСтрокаУслуги.Номенклатура,ТекСтрокаУслуги.Содержание);
			Сумма    = Сумма + ТекСтрокаУслуги.Сумма;
			СуммаНДС = СуммаНДС + ТекСтрокаУслуги.СуммаНДС;
			ТабличныйДокумент.Вывести(ОбластьУслуги);
		КонецЦикла;
		
		// Итого
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего = уатОбщегоНазначенияТиповые.уатФорматСумм(Сумма);
		Если ТекущийДокумент.УчитыватьНДС Тогда
			ОбластьМакета.Параметры.ВсегоНДС = уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаНДС);
			ОбластьМакета.Параметры.НДС      = ?(ТекущийДокумент.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Подвал
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		СуммаКПрописи = Сумма + ?(ТекущийДокумент.СуммаВключаетНДС, 0, СуммаНДС);
		Если ТекущийДокумент.УчитыватьНДС И СуммаНДС <> 0 Тогда
			ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего оказано услуг " + ТекущийДокумент.Услуги.Количество()
			+ ", на сумму " + уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаКПрописи, ТекущийДокумент.ВалютаДокумента) + ", в том числе НДС "
			+ уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаНДС, ТекущийДокумент.ВалютаДокумента);
			ОбластьМакета.Параметры.СуммаПрописью  = уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(СуммаКПрописи, ТекущийДокумент.ВалютаДокумента)
			+ ", в том числе НДС " + уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(СуммаНДС, ТекущийДокумент.ВалютаДокумента);
		Иначе
			ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего оказано услуг " + ТекущийДокумент.Услуги.Количество()
			+ ", на сумму " + уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаКПрописи, ТекущийДокумент.ВалютаДокумента);
			ОбластьМакета.Параметры.СуммаПрописью  = уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(СуммаКПрописи, ТекущийДокумент.ВалютаДокумента);		
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

#КонецОбласти

#КонецЕсли