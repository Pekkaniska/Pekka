
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	об = РеквизитФормыВЗначение("Объект");
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(об, Отказ, СтандартнаяОбработка, ЭтаФорма, ДопПараметрыОткрытие);
	ЗначениеВРеквизитФормы(Об,"Объект");
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	уатОбщегоНазначенияСервер.ЗаполнитьШапкуДокумента(
		Объект,
		,
		Параметры.ЗначениеКопирования,
		Параметры.Основание,
		,
		,
		,
		Параметры.ЗначенияЗаполнения
	);
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.УчитыватьНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС);
		Объект.СуммаВключаетНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.СуммаВключаетНДС);
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) тогда
			Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();	
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.КонтактноеЛицоГрузоотправителя) тогда
			Объект.КонтактноеЛицоГрузоотправителя = "";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.КонтактноеЛицоГрузополучателя) тогда
			Объект.КонтактноеЛицоГрузополучателя = "";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.АдресОтправления) тогда
			Объект.АдресОтправления = "";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.АдресНазначения) тогда
			Объект.АдресНазначения = "";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) тогда
			флЗаказОтКонтрагента = 1;
			Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") тогда
		флЗаказОтКонтрагента = 1;
	Иначе
		флЗаказОтКонтрагента = 0;
	КонецЕсли;
	
	// Инициализация реквизитов формы.	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		И ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) 
				И ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				
				Объект.ДоговорКонтрагента = уатЗаполнениеДокументов.ПолучитьОсновнойДоговорКонтрагента(Объект.Контрагент, "СПоставщиком");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
				Объект.ВалютаДокумента         = Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
				ВалютаРасчетовКурсКратность    = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата,
													Новый Структура("Валюта", Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов));
				Объект.КурсВзаиморасчетов      = ?(ВалютаРасчетовКурсКратность.Курс = 0, 1, ВалютаРасчетовКурсКратность.Курс);
				Объект.КратностьВзаиморасчетов = ?(ВалютаРасчетовКурсКратность.Кратность = 0, 1,
													ВалютаРасчетовКурсКратность.Кратность);
			КонецЕсли;
	КонецЕсли;
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Контрагент = Объект.Контрагент;
	Договор = Объект.ДоговорКонтрагента;
	мОтправлениеС  = Объект.ОтправлениеС;
	мОтправлениеПО = Объект.ОтправлениеПо;
	мДоставкаПО    = Объект.ДоставкаПо;
	мДоставкаС     = Объект.ДоставкаС;
	ВалютаРасчетов = Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	НациональнаяВалюта = мВалютаРегламентированногоУчета;
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта",
																									НациональнаяВалюта));
	КурсНациональнаяВалюта = СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	
	ВалютаРасчетовКурсКратность    = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата,
	Новый Структура("Валюта", Объект.ВалютаДокумента));
	Объект.КурсВзаиморасчетов      = ?(ВалютаРасчетовКурсКратность.Курс = 0, 1, ВалютаРасчетовКурсКратность.Курс);
	Объект.КратностьВзаиморасчетов = ?(ВалютаРасчетовКурсКратность.Кратность = 0, 1,
	ВалютаРасчетовКурсКратность.Кратность);
	
	уатОбщегоНазначенияСервер.НастроитьПолеКонтактноеЛицо(Элементы.КонтактноеЛицоГрузоотправителя);
	уатОбщегоНазначенияСервер.НастроитьПолеКонтактноеЛицо(Элементы.КонтактноеЛицоГрузополучателя);
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.Контрагент, "Объект.Организация",	Объект.Ссылка.Метаданные().Реквизиты.Контрагент.Тип);
	уатОбщегоНазначенияСервер.НастроитьПолеДоговорКонтрагента(Элементы.ДоговорКонтрагента, "Объект.Организация", "Объект.Контрагент", "СПокупателем");
	
	ОрганизацияПередИзменением = Объект.Организация;
	
	УстановитьОтборНоменклатуры();
	
	// УправлениеПредприятием.СлужебныеПодсистемы
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	// Конец УправлениеПредприятием.СлужебныеПодсистемы
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьВсегоВТЧУслуги();
	
	АдресОтправленияСтрока = Объект.АдресОтправления;
	АдресНазначенияСтрока = Объект.АдресНазначения;
	
	Если флЗаказОтКонтрагента тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	Иначе
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
	КонецЕсли;
	
	ОбновитьНадписьДолга();
	
	УстановитьВидимость();
	ОбновитьПодвал();
	
	мТиповойДокумент = Неопределено;
	мОписаниеПредупреждения = "";
	Если НЕ Объект.Ссылка.Пустая() И уатТиповыеДокументы.НайтиТиповойДокументДляДокументаУАТ(Объект.Ссылка, мТиповойДокумент, мОписаниеПредупреждения) Тогда
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ОповеститьОНаличииТиповогоДокумента", ЭтотОбъект), мОписаниеПредупреждения, 10);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	#Если Клиент Тогда
		Оповестить("Изменен заказ грузоотправителя");
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			//Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Если Объект.Организация = ОрганизацияПередИзменением Тогда
		Возврат;
	КонецЕсли;
	ОрганизацияПередИзменением = Объект.Организация;
	
	ПриИзмененииКонтрагентаИлиОрганизации(Новый ОписаниеОповещения("ОрганизацияПриИзмененииФрагментЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзмененииФрагментЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	УчитыватьНДСПередИзменением = Объект.УчитыватьНДС;
	СуммаВключаетНДСПередИзменением = Объект.СуммаВключаетНДС;
	
	Объект.УчитыватьНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС"));
	Объект.СуммаВключаетНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.СуммаВключаетНДС"));
		
	Если Объект.УчитыватьНДС <> УчитыватьНДСПередИзменением ИЛИ Объект.СуммаВключаетНДС <> СуммаВключаетНДСПередИзменением Тогда
		ПересчитатьНДС();
	КонецЕсли;
		
	// Сформируем надпись цены и валюты.
	СтруктураНадписи = Новый Структура;
	СтруктураНадписи.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураНадписи.Вставить("ВалютаРасчетов", ВалютаРасчетов);
	СтруктураНадписи.Вставить("Курс", Объект.КурсВзаиморасчетов);
	СтруктураНадписи.Вставить("КурсНациональнаяВалюта", КурсНациональнаяВалюта);
	СтруктураНадписи.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураНадписи.Вставить("УчитыватьНДС", Объект.УчитыватьНДС);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	ОбновитьПодвал();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Контрагент;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		
		ПриИзмененииКонтрагентаИлиОрганизации(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатИнтерфейсВзаимодействияСERPКлиент.уатНачалоВыбораСоглашенияСКлиентом(
		Элемент,
		СтандартнаяОбработка,
		Объект.Партнер,
		Объект.Соглашение,
		Объект.Дата);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ДоговорПередИзменением = Договор;
	Договор = Объект.ДоговорКонтрагента;
	
	Если ДоговорПередИзменением <> Объект.ДоговорКонтрагента Тогда
		ПриИзмененииДоговора(Неопределено, ДоговорПередИзменением);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура флЗаказОтКонтрагентаПриИзменении(Элемент)
	Если флЗаказОтКонтрагента Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		Объект.Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	Иначе
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
		Объект.Контрагент = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
	КонецЕсли;
	Объект.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДолг(Команда)
	ОбновитьНадписьДолга();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписьДолга()
	уатОбщегоНазначенияТиповые_проф.СформироватьНадписьДолга(Объект.Контрагент, ВалютаРасчетов,
		Объект.Организация,	НадписьДолг, Элементы.НадписьДолг.ЦветТекста, Элементы.НадписьДолг.Гиперссылка, Объект.Дата);
КонецПроцедуры

&НаКлиенте
Процедура НадписьДолгНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	КлючВарианта = "КарточкаРасчетовСКлиентамиПоДокументамКонтекст";
	СтрокаБазовая = ?(уатИнтерфейсВзаимодействияСERPВызовСервера.уатЗначениеФункциональнойОпции("БазоваяВерсия"), "Базовая", "");
	
	ОткрытьФорму("Отчет.КарточкаРасчетовСКлиентами.Форма",
		Новый Структура("КлючВарианта, КлючНазначенияИспользования, Отбор, СформироватьПриОткрытии, ВидимостьКомандВариантовОтчетов", 
			КлючВарианта + СтрокаБазовая,
			, 
			Новый Структура("Контрагент, Организация", Объект.Контрагент, Объект.Организация), 
			Истина,
			Ложь));
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ Закладки Маршрут

&НаКлиенте
Процедура АдресОтправленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатОбщегоНазначенияКлиент.ПунктНачалоВыбора(Элемент, СтандартнаяОбработка, Объект.АдресОтправления);
КонецПроцедуры

&НаКлиенте
Процедура АдресОтправленияОчистка(Элемент, СтандартнаяОбработка)
	Объект.ЛатОтправления = 0;
	Объект.ЛонОтправления = 0;
КонецПроцедуры

&НаКлиенте
Процедура АдресОтправленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	мВремяС  = 0; 
	мВремяПо = 0; 
	мСтоянка = 0; 
	мЛат     = 0; 
	мЛон     = 0;	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") тогда
		мВыбЗнач = ВыбранноеЗначение;		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.уатПунктыНазначения") тогда 
		мВыбЗнач = ВыбранноеЗначение;
		мВремяС  = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "ВремяДоступностиС");
		мВремяПо = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "ВремяДоступностиПО");
		мЛат     = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Лат");
		мЛон     = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Лон");
		мСтоянка = ПолучитьВремяСтоянкиВПункте(ВыбранноеЗначение);
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СтрокаДереваЗначений") тогда
		мВыбЗнач = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Значение");
		мВремяС  = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "ВремяДоступностиС");
		мВремяПо = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "ВремяДоступностиПО");
		мЛат 	 = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Лат");
		мЛон 	 = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Лон");
		мСтоянка = ПолучитьВремяСтоянкиВПункте(ВыбранноеЗначение);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(мВремяС) = Тип("Дата") Тогда
		мВремяС = мВремяС - '00010101';
	КонецЕсли;
	
	Если ТипЗнч(мВремяПо) = Тип("Дата") Тогда
		мВремяПо = мВремяПо - '00010101';
		мВремяПо = ?(ЗначениеЗаполнено(мВремяПо), мВремяПо, '00010101235900'-Дата('00010101'))
	КонецЕсли;
	
	мДатаОтправленияС = ?(ЗначениеЗаполнено(Объект.ОтправлениеС),НачалоДня(Объект.ОтправлениеС),НачалоДня(Объект.Дата));
	мДатаОтправленияПо = ?(ЗначениеЗаполнено(Объект.ОтправлениеПо),НачалоДня(Объект.ОтправлениеПо),НачалоДня(Объект.Дата));
	
	Объект.ОтправлениеС            = мДатаОтправленияС + мВремяС;
	Объект.ОтправлениеПо           = мДатаОтправленияПо + мВремяПо;
	Объект.СтоянкаПунктОтправления = мСтоянка;
	Объект.ЛатОтправления          = мЛат;
	Объект.ЛонОтправления          = мЛон;
	
	мОтправлениеС  = Объект.ОтправлениеС;
	мОтправлениеПО = Объект.ОтправлениеПо;

	уатОбщегоНазначенияКлиент.ПунктОбработкаВыбора(Объект.АдресОтправления, мВыбЗнач, СтандартнаяОбработка);
	АдресОтправленияПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура АдресОтправленияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	СписокАдреса = ПодобратьАдреса(Текст);
	Если СписокАдреса.Количество() = 0 Тогда
	Иначе
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокАдреса;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АдресОтправленияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	СписокАдреса = ПодобратьАдреса(Текст);
	Если СписокАдреса.Количество() = 0 Тогда
		Объект.АдресОтправления = Текст;
		АдресОтправленияПриИзменении(Элемент);
	Иначе
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокАдреса;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АдресОтправленияПриИзменении(Элемент)
	АдресОтправленияСтрока = Объект.АдресОтправления;
КонецПроцедуры

&НаКлиенте
Процедура АдресНазначенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатОбщегоНазначенияКлиент.ПунктНачалоВыбора(Элемент, СтандартнаяОбработка, Объект.АдресНазначения);
КонецПроцедуры

&НаКлиенте
Процедура АдресНазначенияОчистка(Элемент, СтандартнаяОбработка)
	Объект.ЛатДоставки = 0;
	Объект.ЛонДоставки = 0;
КонецПроцедуры

&НаКлиенте
Процедура АдресНазначенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	мВремяС  = 0;
	мВремяПо = 0;
	мСтоянка = 0;
	мЛат = 0;
	мЛон = 0;	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") тогда
		мВыбЗнач = ВыбранноеЗначение;		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.уатПунктыНазначения") тогда 
		мВыбЗнач = ВыбранноеЗначение;
		мВремяС  = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "ВремяДоступностиС");
		мВремяПо = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "ВремяДоступностиПО");
		мЛат     = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Лат");
		мЛон     = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Лон");
		мСтоянка = ПолучитьВремяСтоянкиВПункте(ВыбранноеЗначение);
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СтрокаДереваЗначений") тогда
		мВыбЗнач = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Значение");
		мВремяС  = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "ВремяДоступностиС");
		мВремяПо = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "ВремяДоступностиПО");
		мЛат 	 = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Лат");
		мЛон 	 = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Лон");
		мСтоянка = ПолучитьВремяСтоянкиВПункте(ВыбранноеЗначение);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(мВремяС) = Тип("Дата") Тогда
		мВремяС = мВремяС - '00010101';
	КонецЕсли;
	
	Если ТипЗнч(мВремяПо) = Тип("Дата") Тогда
		мВремяПо = мВремяПо - '00010101';
		мВремяПо = ?(ЗначениеЗаполнено(мВремяПо), мВремяПо, '00010101235900'-Дата('00010101'))
	КонецЕсли;
	
	мДатаПрибытияС = ?(ЗначениеЗаполнено(Объект.ДоставкаС),НачалоДня(Объект.ДоставкаС),НачалоДня(Объект.Дата));
	мДатаПрибытияПо = ?(ЗначениеЗаполнено(Объект.ДоставкаПо),НачалоДня(Объект.ДоставкаПо),НачалоДня(Объект.Дата));
	
	Объект.ДоставкаС              = мДатаПрибытияС + мВремяС;
	Объект.ДоставкаПо             = мДатаПрибытияПо + мВремяПо;
	Объект.СтоянкаПунктНазначения = мСтоянка;
	Объект.ЛатДоставки            = мЛат;
	Объект.ЛонДоставки            = мЛон;
	
	мДоставкаПО    = Объект.ДоставкаПо;
	мДоставкаС     = Объект.ДоставкаС;
	
	уатОбщегоНазначенияКлиент.ПунктОбработкаВыбора(Объект.АдресНазначения, мВыбЗнач, СтандартнаяОбработка);
	АдресНазначенияПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура АдресНазначенияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	СписокАдреса = ПодобратьАдреса(Текст);
	Если СписокАдреса.Количество() = 0 Тогда
	Иначе
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокАдреса;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АдресНазначенияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	СписокАдреса = ПодобратьАдреса(Текст);
	Если СписокАдреса.Количество() = 0 Тогда
		Объект.АдресНазначения = Текст;
		АдресНазначенияПриИзменении(Элемент);
	Иначе
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокАдреса;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АдресНазначенияПриИзменении(Элемент)
	АдресНазначенияСтрока = Объект.АдресНазначения;
КонецПроцедуры

&НаКлиенте
Процедура ОтправлениеСПриИзменении(Элемент)
	АвтоподборНезаполненныхДатМаршрутаПриИзменении("ОтправлениеПо");
КонецПроцедуры

&НаКлиенте
Процедура ОтправлениеПоПриИзменении(Элемент)
	АвтоподборНезаполненныхДатМаршрутаПриИзменении("ОтправлениеС");
КонецПроцедуры

&НаКлиенте
Процедура ДоставкаСПриИзменении(Элемент)
	АвтоподборНезаполненныхДатМаршрутаПриИзменении("ДоставкаПо");
КонецПроцедуры

&НаКлиенте
Процедура ДоставкаПоПриИзменении(Элемент)
	АвтоподборНезаполненныхДатМаршрутаПриИзменении("ДоставкаС");
КонецПроцедуры

&НаКлиенте
Процедура СтоянкаПунктОтправленияПриИзменении(Элемент)
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(Объект.СтоянкаПунктОтправления);	
КонецПроцедуры

&НаКлиенте
Процедура СтоянкаПунктНазначенияПриИзменении(Элемент)
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(Объект.СтоянкаПунктНазначения);	
КонецПроцедуры

&НаКлиенте
Процедура ГрузоотправительПриИзменении(Элемент)
	ГрузоотправительПриИзмененииСервер();
	АдресОтправленияПриИзменении(Элементы.АдресОтправления);
КонецПроцедуры

&НаСервере
Процедура ГрузоотправительПриИзмененииСервер()
	Если ЗначениеЗаполнено(Объект.Грузоотправитель) Тогда
		АдресОтправления = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект.Грузоотправитель,
							Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, '39991231');
		Если НЕ ЗначениеЗаполнено(АдресОтправления) Тогда
			АдресОтправления = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект.Грузоотправитель,
								Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, '39991231');
		КонецЕсли;
		Если ЗначениеЗаполнено(АдресОтправления) Тогда
			Объект.АдресОтправления = АдресОтправления;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательПриИзменении(Элемент)
	ГрузополучательПриИзмененииСервер();
	АдресНазначенияПриИзменении(Элементы.АдресНазначения);
КонецПроцедуры

&НаСервере
Процедура ГрузополучательПриИзмененииСервер()
	Если ЗначениеЗаполнено(Объект.Грузополучатель) Тогда 
		АдресНазначения = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект.Грузополучатель,
							Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, '39991231');
		Если НЕ ЗначениеЗаполнено(АдресНазначения) Тогда
			АдресНазначения = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект.Грузополучатель,
								Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, '39991231');
		КонецЕсли;
		Если ЗначениеЗаполнено(АдресНазначения) Тогда 
			Объект.АдресНазначения = АдресНазначения;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзКИ(Команда)
	ОбъектКИ = ?(Не ЗначениеЗаполнено(Объект.Грузоотправитель), Объект.Контрагент, Объект.Грузоотправитель);
	ВыбратьАдресИзКонтактнойИнформации(Элементы.АдресОтправления, ОбъектКИ, "АдресОтправления");
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзКИ2(Команда)
	ОбъектКИ = ?(НЕ ЗначениеЗаполнено(Объект.Грузополучатель), Объект.Контрагент, Объект.Грузополучатель);
	ВыбратьАдресИзКонтактнойИнформации(Элементы.АдресНазначения, ОбъектКИ, "АдресНазначения");
КонецПроцедуры

&НаКлиенте
Процедура ТребованиеКТСПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ТребованиеКТС) Тогда
		Объект.ТребованиеКТСТипТС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ТребованиеКТС, "ТипТС");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТребованиеКТСТипТСПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ТребованиеКТСТипТС) Тогда
		Модель_ТипТС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ТребованиеКТС, "ТипТС");
		Если Модель_ТипТС <> Объект.ТребованиеКТСТипТС Тогда
			Объект.ТребованиеКТС = Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РаботаТехникиНаОбъектеСтроительстваПриИзменении(Элемент)
	Если НЕ Объект.РаботаТехникиНаОбъектеСтроительства Тогда
		Объект.ОбъектСтроительства = Неопределено;
		Объект.СценарийПланированияСтроительства = Неопределено;
		Объект.СтроительнаяРабота = Неопределено;
		Объект.ОбъемСтроительнойРаботы = 0;
		Объект.ЕдиницаИзмеренияСтроительнойРаботы = Неопределено;
		Объект.ГрафикСтроительнойРаботы = Неопределено;
		Объект.НачалоСтроительнойРаботы = '00010101';
		Объект.ОкончаниеСтроительнойРаботы = '00010101';
	КонецЕсли;
	
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПериода(Команда)
	ДиалогПериода = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогПериода.Период.ДатаНачала = Объект.НачалоСтроительнойРаботы;
	ДиалогПериода.Период.ДатаОкончания = Объект.ОкончаниеСтроительнойРаботы;
	ДиалогПериода.Показать(Новый ОписаниеОповещения("НастройкаПериодаЗавершение", ЭтотОбъект, Новый Структура("ДиалогПериода", ДиалогПериода)));
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПериодаЗавершение(Период, ДополнительныеПараметры) Экспорт
    Если Период <> Неопределено Тогда
        Объект.НачалоСтроительнойРаботы = Период.ДатаНачала;
        Объект.ОкончаниеСтроительнойРаботы = Период.ДатаОкончания;
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоГрузоотправителяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатОбщегоНазначенияТиповыеКлиент.уатНачалоВыбораКонтактногоЛицаКонтрагента(Элемент, СтандартнаяОбработка,
		?(Не ЗначениеЗаполнено(Объект.Грузоотправитель), Объект.Контрагент, Объект.Грузоотправитель));
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоГрузополучателяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатОбщегоНазначенияТиповыеКлиент.уатНачалоВыбораКонтактногоЛицаКонтрагента(Элемент, СтандартнаяОбработка,
		?(Не ЗначениеЗаполнено(Объект.Грузополучатель), Объект.Контрагент, Объект.Грузополучатель));
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаказы

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	
	Если НоваяСтрока И Копирование = Ложь Тогда
		ТекДанные.КоличествоМест = 1;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	ПриИзмененииНоменклатуры(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНоменклатуры(ТекСтрока = Неопределено)
	Если ТекСтрока = Неопределено Тогда
		ТекСтрока = Элементы.Товары.ТекущиеДанные;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекСтрока.Номенклатура) тогда
		уатОбщегоНазначения.ЗаполнитьУпаковкуНоменклатурыПоУмолчанию(ТекСтрока.Номенклатура, ТекСтрока.ЕдиницаИзмерения);
		ВесОбъем = уатОбщегоНазначения.ПолучитьВесОбъемНоменклатуры(ТекСтрока.Номенклатура, ТекСтрока.ЕдиницаИзмерения);
		Если ВесОбъем.Вес <> 0 Тогда
			ТекСтрока.ВесБрутто	= ВесОбъем.Вес * ТекСтрока.Количество;
		КонецЕсли;
		Если ВесОбъем.Объем <> 0 Тогда
			ТекСтрока.Объем = ВесОбъем.Объем * ТекСтрока.Количество;
		КонецЕсли;
		Если ВесОбъем.КоличествоМест <> 0 Тогда
			ТекСтрока.КоличествоМест = ВесОбъем.КоличествоМест * ТекСтрока.Количество;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораГруза(Элемент, Элементы.Товары.ТекущиеДанные.Номенклатура, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	ВесОбъем = уатОбщегоНазначения.ПолучитьВесОбъемНоменклатуры(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения);
	Если ВесОбъем.Вес <> 0 Тогда
		ТекДанные.ВесБрутто = ВесОбъем.Вес * ТекДанные.Количество;
	КонецЕсли;
	Если ВесОбъем.Объем <> 0 Тогда
		ТекДанные.Объем = ВесОбъем.Объем * ТекДанные.Количество;
	КонецЕсли;
	Если ВесОбъем.КоличествоМест <> 0 Тогда
		ТекДанные.КоличествоМест = ВесОбъем.КоличествоМест * ТекДанные.Количество;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	ВесОбъем = уатОбщегоНазначения.ПолучитьВесОбъемНоменклатуры(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения);
	Если ВесОбъем.Вес <> 0 Тогда
		ТекДанные.ВесБрутто	= ВесОбъем.Вес * ТекДанные.Количество;
	КонецЕсли;
	Если ВесОбъем.Объем <> 0 Тогда
		ТекДанные.Объем = ВесОбъем.Объем * ТекДанные.Количество;
	КонецЕсли;
	Если ВесОбъем.КоличествоМест <> 0 Тогда
		ТекДанные.КоличествоМест = ВесОбъем.КоличествоМест * ТекДанные.Количество;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.Услуги.ТекущиеДанные.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
													ПользователиКлиентСервер.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧУслуги();
КонецПроцедуры

&НаКлиенте
Процедура УслугиПослеУдаления(Элемент)
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧУслуги();
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	РассчитатьСуммуВСтрокеТабличнойЧасти(Элементы.Услуги.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	РассчитатьСуммуВСтрокеТабличнойЧасти(Элементы.Услуги.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	РассчитатьСуммуНДС(Элементы.Услуги.ТекущиеДанные);
	РассчитатьСуммуВсегоВстрокеТЧ(Элементы.Услуги.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	СтрокаТабличнойЧасти.Содержание = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(СтрокаТабличнойЧасти.Номенклатура, "НаименованиеПолное");
	СтрокаТабличнойЧасти.СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(СтрокаТабличнойЧасти.Номенклатура, "СтавкаНДС");
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	ОбновитьПодвал();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// УправлениеПредприятием.СлужебныеПодсистемы
&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
КонецПроцедуры
// Конец УправлениеПредприятием.СлужебныеПодсистемы

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура УстановитьВидимость()
	
	// Колонки налога показываем только тогда, когда его учитываем.
	Если Элементы.УслугиСтавкаНДС.Видимость <> Объект.УчитыватьНДС Тогда
		Элементы.УслугиСтавкаНДС.Видимость = Объект.УчитыватьНДС;
	КонецЕсли;
	Если Элементы.УслугиСуммаНДС.Видимость <> Объект.УчитыватьНДС Тогда
		Элементы.УслугиСуммаНДС.Видимость = Объект.УчитыватьНДС;
		Элементы.УслугиВсего.Видимость = Объект.УчитыватьНДС;
	КонецЕсли;
	
	Элементы.ДоговорКонтрагента.Видимость = флЗаказОтКонтрагента;
	Элементы.Контрагент.Заголовок = ?(флЗаказОтКонтрагента, "Контрагент", "Подразделение");
	Элементы.Соглашение.Видимость = флЗаказОтКонтрагента;
	Элементы.ГруппаДолг.Видимость = флЗаказОтКонтрагента;
	Элементы.Партнер.Видимость = флЗаказОтКонтрагента;
	Элементы.ГруппаСтраницаРаботаТехникиНаОбъектеСтроительства.Видимость = Объект.РаботаТехникиНаОбъектеСтроительства;
	
	// Сформируем надпись цены и валюты.
	СтруктураНадписи = Новый Структура("ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС,
										| УчитыватьНДС",
		Объект.ВалютаДокумента, ВалютаРасчетов, Объект.КурсВзаиморасчетов, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС,
		Объект.УчитыватьНДС);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);

КонецПроцедуры // УстановитьВидимость()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура ОбновитьПодвал()
	
	ОбновитьПодвалСервер();
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		НадписьВсего = "Всего (<>):";
	Иначе
		НадписьВсего = "Всего (" + СокрЛП(Объект.ВалютаДокумента) +"):";
	КонецЕсли;
	
	Если Объект.СуммаВключаетНДС Тогда
		НадписьВсегоНДС = "НДС (в т. ч.):";
	Иначе
		НадписьВсегоНДС = "НДС (сверху):";
	КонецЕсли;
	
КонецПроцедуры // ОбновитьПодвал()

&НаСервере
Процедура ОбновитьПодвалСервер()
	// При изменении данных обновим суммы в подвале.
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	Всего    = уатОбщегоНазначенияТиповые.уатФорматСумм(уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ДокОбъект, "Услуги"));
	ВсегоНДС = уатОбщегоНазначенияТиповые.уатФорматСумм(уатОбщегоНазначенияТиповые.ПолучитьНДСДокумента(ДокОбъект, "Услуги"));
	Если Не Объект.УчитыватьНДС Тогда
		ВсегоНДС = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("РазностьДат", уатОбщегоНазначенияСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая,
							ДатаПередИзменением));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Дата, ВалютаДокумента, Договор)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
	"ВалютаРасчетов",
	Договор.ВалютаВзаиморасчетов);
	
	СтруктураДанные.Вставить(
	"ВалютаРасчетовКурсКратность",
	РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаВзаиморасчетов)));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

&НаКлиенте
Процедура ПриИзмененииКонтрагентаИлиОрганизации(Знач Оповещение)
	
	ДанныеОбменаССервером = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, Дата");
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, Объект);
	// Получим данные с сервера
	ДанныеОбменаССервером.ДоговорКонтрагента = Объект.ДоговорКонтрагента;
	ЗначенияДляЗаполнения = ИзменениеКонтрагентаСервер(ДанныеОбменаССервером);
	Объект.ДоговорКонтрагента = ЗначенияДляЗаполнения.ДоговорКонтрагента;
	
	ДоговорПередИзменением = Договор;
	Договор = Объект.ДоговорКонтрагента;
	
	ПриИзмененииДоговора(Новый ОписаниеОповещения("ПриИзмененииКонтрагентаИлиОрганизацииЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), ДоговорПередИзменением);
	
КонецПроцедуры // ПриИзмененииКонтрагентаИлиОрганизации()

&НаКлиенте
Процедура ПриИзмененииКонтрагентаИлиОрганизацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьНадписьДолга();
	
	Если Не ДополнительныеПараметры.Оповещение = Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение);
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииКонтрагентаИлиОрганизации()

// Процедура при изменении договора.
//
&НаКлиенте
Процедура ПриИзмененииДоговора(Знач Оповещение, ДоговорПередИзменением)
	
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(Объект.Дата, Объект.ВалютаДокумента, Объект.ДоговорКонтрагента);
	
	ВалютаРасчетовПередИзменением = ВалютаРасчетов;
	ВалютаРасчетов = СтруктураДанные.ВалютаРасчетов;
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда 
		Объект.КурсВзаиморасчетов	   = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1,
			СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
		Объект.КратностьВзаиморасчетов = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1,
			СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(Объект.ДоговорКонтрагента)
		И ЗначениеЗаполнено(ВалютаРасчетов)
		И Объект.ДоговорКонтрагента <> ДоговорПередИзменением
		И ВалютаРасчетовПередИзменением <> СтруктураДанные.ВалютаРасчетов)
		И Объект.ВалютаДокумента <> СтруктураДанные.ВалютаРасчетов Тогда
		
		Объект.ВалютаДокумента = СтруктураДанные.ВалютаРасчетов;
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ПриИзмененииДоговораЗавершениеПредупреждение", ЭтотОбъект, Новый Структура("ВалютаРасчетовПередИзменением, Оповещение", ВалютаРасчетовПередИзменением, Оповещение)), НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом! 
							| Необходимо проверить валюту документа!'"));
		Возврат;
	КонецЕсли;
	
	ПриИзмененииДоговораФрагмент(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДоговораЗавершениеПредупреждение(ДополнительныеПараметры) Экспорт
	
	ВалютаРасчетовПередИзменением = ДополнительныеПараметры.ВалютаРасчетовПередИзменением;
	Оповещение = ДополнительныеПараметры.Оповещение;
	
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Новый ОписаниеОповещения("ПриИзмененииДоговораЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), ВалютаРасчетовПередИзменением, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДоговораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПриИзмененииДоговораФрагмент(ДополнительныеПараметры.Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДоговораФрагмент(Знач Оповещение)
	
	ОбновитьВсегоВТЧУслуги();
	РассчитатьСуммуДокумента();
	
	УстановитьВидимость();
	ОбновитьНадписьДолга();
	
	Если Не Оповещение = Неопределено Тогда 
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзменениеКонтрагентаСервер(ДанныеДляЗаполнения)
	СтруктураПараметровДляПолученияДоговора =
		уатЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПродажи();
	
	ЗначенияДляЗаполнения = уатОбщегоНазначенияСервер.ПриИзмененииЗначенияКонтрагента(ДанныеДляЗаполнения,
							СтруктураПараметровДляПолученияДоговора);
	Возврат ЗначенияДляЗаполнения;
КонецФункции

// Процедура рассчитывает сумму в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
		
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

// Рассчитывается сумма НДС в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	
	СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	
КонецПроцедуры // РассчитатьСуммуНДС()

&НаКлиенте
Процедура РассчитатьСуммуДокумента()
	НДСВсего = Объект.Услуги.Итог("СуммаНДС");
	Объект.СуммаДокумента = Объект.Услуги.Итог("Сумма");
	Если Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС Тогда
		Объект.СуммаДокумента = Объект.СуммаДокумента + НДСВсего;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодобратьАдреса(Знач Текст)
	Рез = Новый СписокЗначений;
	
	Если НЕ ЗначениеЗаполнено(Текст) Тогда
		Возврат Рез;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
	|	уатПунктыНазначения.Ссылка
	|ИЗ
	|	Справочник.уатПунктыНазначения КАК уатПунктыНазначения
	|ГДЕ
	|	НЕ уатПунктыНазначения.ПометкаУдаления
	|	И НЕ уатПунктыНазначения.ЭтоГруппа
	|	И уатПунктыНазначения.Наименование ПОДОБНО &парамТекст");
	
	// заменим спецсимволы
	Текст = СтрЗаменить(Текст, "~", "~~");
	Текст = СтрЗаменить(Текст, "%", "~%");
	Текст = СтрЗаменить(Текст, "_", "~_");
	Текст = СтрЗаменить(Текст, "[", "~[");
	Текст = СтрЗаменить(Текст, "-", "~-");
	Текст = сокрЛП(Текст)+"%";

	Запрос.УстановитьПараметр("парамТекст", Текст);
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		Рез.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат Рез;
КонецФункции

&НаСервереБезКонтекста
Функция СписокАдресовКонтрагентаИзКИ(Контрагент)
	Рез = Новый СписокЗначений;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.Представление,
	|	КонтрагентыКонтактнаяИнформация.Вид
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Тип = &ТипКИ
	|	И КонтрагентыКонтактнаяИнформация.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Контрагент);
	Запрос.УстановитьПараметр("ТипКИ", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Рез.Добавить(Выборка.Представление, Выборка.Представление + " (" + Выборка.Вид + ")");
	КонецЦикла;
	
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура ВыбратьАдресИзКонтактнойИнформации(Элемент, ОбъектКИ, ИмяРеквизита)
	
	Если НЕ ЗначениеЗаполнено(ОбъектКИ) ИЛИ ТипЗнч(ОбъектКИ) <> Тип("СправочникСсылка.Контрагенты") тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЕстьОбработка_уатКонтактнаяИнформация_уэ() Тогда
		СписокАдресовКИ = СписокАдресовКонтрагентаИзКИ(ОбъектКИ);
		ДопПараметры = Новый Структура("ИмяРеквизита", ИмяРеквизита);
		ОписаниеОповещенияОВыбореАдресаИзКИ = Новый ОписаниеОповещения("ВыбратьАдресИзКонтактнойИнформацииПродолжение", ЭтотОбъект, ДопПараметры);
		СписокАдресовКИ.ПоказатьВыборЭлемента(ОписаниеОповещенияОВыбореАдресаИзКИ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьАдресИзКонтактнойИнформацииПродолжение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ДопПараметры = Неопределено И ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("ИмяРеквизита") Тогда 
		ЭтотОбъект[ДопПараметры.ИмяРеквизита+"Строка"] = Результат.Значение;
		Объект[ДопПараметры.ИмяРеквизита] = Результат.Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьОбработка_уатКонтактнаяИнформация_уэ()
	Возврат Метаданные.Обработки.Найти("уатКонтактнаяИнформация_уэ") <> Неопределено;
КонецФункции

&НаКлиенте
Процедура ОбновитьВсегоВТЧУслуги()
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
		РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти)
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0,
									СтрокаТабличнойЧасти.СуммаНДС);
КонецПроцедуры

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач Оповещение, Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь)
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",		  Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",				  Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность",			  Объект.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("Контрагент",			  Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",				  Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация",			  Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",		  Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",	  Ложь);
	СтруктураПараметров.Вставить("ПересчитатьЦены",		  ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",  Ложь);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",      Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НалогообложениеНДС",	  Объект.УчитыватьНДС);
	// Для объедининенного решения с БП 3
	СтруктураПараметров.Вставить("ДокументБезНДС",       НЕ Объект.УчитыватьНДС);
	// Для объедининенного решения с БП 3
	
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,, Новый ОписаниеОповещения("ЦеныИВалютаОбработкаОповещения", ЭтотОбъект, Новый Структура("ВалютаРасчетовПередИзменением, Оповещение", ВалютаРасчетовПередИзменением, Оповещение)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаКлиенте
Процедура ЦеныИВалютаОбработкаОповещения(СтруктураЦеныИВалюта, ДопПараметры) Экспорт
	
	Если ТипЗнч(СтруктураЦеныИВалюта) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	// 3. Перезаполняем табличную часть "Номенклатура", если были внесены изменения в форме "Цены и Валюта".
	
	// Для объедининенного решения с БП 3
	уатОбщегоНазначенияКлиент.ЗаполнитьСтруктуруЦеныИВалютыДляБП3(СтруктураЦеныИВалюта, Объект.ВалютаДокумента,
	ДопПараметры.ВалютаРасчетовПередИзменением, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС);
	// Для объедининенного решения с БП 3
	
	Если СтруктураЦеныИВалюта.Свойство("ВалютаДокумента") И СтруктураЦеныИВалюта.Свойство("КурсРасчетов") И СтруктураЦеныИВалюта.Свойство("КратностьРасчетов") И
		СтруктураЦеныИВалюта.Свойство("СуммаВключаетНДС") И  СтруктураЦеныИВалюта.Свойство("НалогообложениеНДС") Тогда
		
		Объект.ВалютаДокумента		   = СтруктураЦеныИВалюта.ВалютаДокумента;
		Объект.КурсВзаиморасчетов	   = СтруктураЦеныИВалюта.КурсРасчетов;
		Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.КратностьРасчетов;
		Объект.СуммаВключаетНДС		   = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Объект.УчитыватьНДС			   = СтруктураЦеныИВалюта.НалогообложениеНДС;
	КонецЕсли;
	
	// Пересчитываем сумму если изменился признак Налогообложение НДС.
	Если СтруктураЦеныИВалюта.Свойство("НалогообложениеНДС") И СтруктураЦеныИВалюта.Свойство("ПредНалогообложениеНДС") Тогда
		Если СтруктураЦеныИВалюта.НалогообложениеНДС <> СтруктураЦеныИВалюта.ПредНалогообложениеНДС Тогда
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС();		
		КонецЕсли;
	КонецЕсли;
	
	// Пересчитываем цены по валюте.
	Если СтруктураЦеныИВалюта.Свойство("ПересчитатьЦены") Тогда
		Если СтруктураЦеныИВалюта.ПересчитатьЦены Тогда	
			уатОбщегоНазначенияКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтаФорма, ДопПараметры.ВалютаРасчетовПередИзменением, "Услуги");
		КонецЕсли;
	КонецЕсли;
	
	// Пересчитываем сумму если изменился признак "Сумма включает НДС".
	Если СтруктураЦеныИВалюта.Свойство("СуммаВключаетНДС") И СтруктураЦеныИВалюта.Свойство("ПередСуммаВключаетНДС") Тогда
		Если СтруктураЦеныИВалюта.СуммаВключаетНДС <> СтруктураЦеныИВалюта.ПредСуммаВключаетНДС Тогда
			уатОбщегоНазначенияКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтаФорма, "Услуги");
		КонецЕсли;
	КонецЕсли;
	
	// Сформируем надпись цены и валюты.
	СтруктураНадписи = Новый Структура;
	СтруктураНадписи.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураНадписи.Вставить("ВалютаРасчетов", ВалютаРасчетов);
	СтруктураНадписи.Вставить("Курс", Объект.КурсВзаиморасчетов);
	СтруктураНадписи.Вставить("КурсНациональнаяВалюта", КурсНациональнаяВалюта);
	СтруктураНадписи.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураНадписи.Вставить("УчитыватьНДС", Объект.УчитыватьНДС);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	УстановитьВидимость();
	ОбновитьПодвал();
	
	ОбновитьВсегоВТЧУслуги();
	Модифицированность = Истина;
	
	Если Не ДопПараметры.Оповещение = Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ДопПараметры.Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Команда)
	
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Новый ОписаниеОповещения("РедактироватьЦеныИВалютуЗавершение", ЭтотОбъект), Объект.ВалютаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЦеныИВалютуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьВсегоВТЧУслуги();
	Модифицированность = Истина;
	
КонецПроцедуры

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения.
// 
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	//СтавкаНДСПоУмолчанию = уатОбщегоНазначенияПовтИсп.ПолучитьСтавкуНДСНоль();
	СтавкаНДСПоУмолчанию = Перечисления.СтавкиНДС.ПустаяСсылка();
	Для каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
		СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
		СтрокаТабличнойЧасти.СуммаНДС = 0;
	КонецЦикла;
	
	Если Объект.УчитыватьНДС Тогда
		Элементы.УслугиСтавкаНДС.Видимость = Истина;
		Элементы.УслугиСуммаНДС.Видимость  = Истина;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
			КонецЕсли;	
			
			СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			
		КонецЦикла;
		
	Иначе
		Элементы.УслугиСтавкаНДС.Видимость = Ложь;
		Элементы.УслугиСуммаНДС.Видимость  = Ложь;
		
	КонецЕсли;	
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

// Функция возвращает текст надписи "Цены и валюта".
//
&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНадписьЦеныИВалюта(СтруктураНадписи)
	
	ТекстНадписи = "";
	
	// Валюта.
	Если ЗначениеЗаполнено(СтруктураНадписи.ВалютаДокумента) Тогда
		ТекстНадписи = НСтр("ru = 'Валюта: %Валюта%, курс: %Курс%'");
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Валюта%", СокрЛП(Строка(СтруктураНадписи.ВалютаДокумента)));
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Курс%", ?((НЕ ЗначениеЗаполнено(СтруктураНадписи.ВалютаРасчетов)) ИЛИ
						СтруктураНадписи.ВалютаДокумента = СтруктураНадписи.ВалютаРасчетов, СокрЛП(Строка(СтруктураНадписи.Курс)),
						СокрЛП(Строка(СтруктураНадписи.КурсНациональнаяВалюта))));
	Иначе
		ТекстНадписи = НСтр("ru = 'Валюта: <нет>'");
	КонецЕсли;
	
	//// Налогообложение НДС.
	//Если ПустаяСтрока(ТекстНадписи) Тогда
	//	ТекстНадписи = ТекстНадписи + НСтр("ru = '%НалогообложениеНДС%'");
	//Иначе
	//	ТекстНадписи = ТекстНадписи + НСтр("ru = '; %НалогообложениеНДС%'");
	//КонецЕсли;
	//ТекстНадписи = СтрЗаменить(ТекстНадписи, "%НалогообложениеНДС%", ?(СтруктураНадписи.УчитыватьНДС, "Учитывать НДС",
	//																									"Не учитывать НДС"));
	//
	//// Флаг сумма включает НДС.
	//Если СтруктураНадписи.УчитыватьНДС Тогда
	//	Если ПустаяСтрока(ТекстНадписи) Тогда
	//		ТекстНадписи = ТекстНадписи + НСтр("ru = '%СуммаВключаетНДС%'");
	//	Иначе
	//		ТекстНадписи = ТекстНадписи + НСтр("ru = '; %СуммаВключаетНДС%'");
	//	КонецЕсли;
	//	ТекстНадписи = СтрЗаменить(ТекстНадписи, "%СуммаВключаетНДС%", ?(СтруктураНадписи.СуммаВключаетНДС, "Сумма вкл. НДС",
	//																										"Сумма не вкл. НДС"));
	//КонецЕсли;

	Возврат ТекстНадписи;
	
КонецФункции // СформироватьНадписьЦеныИВалюта()

&НаСервере
Процедура УстановитьОтборНоменклатуры()
	
	ПарамОтбор = Новый ПараметрВыбора("Отбор.ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Услуга);
	мсвОтборы = Новый Массив();
	мсвОтборы.Добавить(ПарамОтбор);
	фиксМсвОтборы = Новый ФиксированныйМассив(мсвОтборы);
	
	Элементы.УслугиНоменклатура.ПараметрыВыбора = фиксМсвОтборы;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьНДС()
	уатОбщегоНазначенияКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтаФорма, "Услуги");
	ОбновитьВсегоВТЧУслуги();
	УстановитьВидимость();
	ОбновитьПодвал();
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОНаличииТиповогоДокумента(ДополнительныеПараметры) Экспорт
	
	ТолькоПросмотр = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоподборНезаполненныхДатМаршрутаПриИзменении(Поле = "")
	
	Если Поле = "ОтправлениеС" Тогда
		СдвинутьДату(Объект.ОтправлениеПо, мОтправлениеПо, Объект.ОтправлениеС, мОтправлениеС);
	ИначеЕсли Поле = "ОтправлениеПо" Тогда
		СдвинутьДату(Объект.ОтправлениеС, мОтправлениеС, Объект.ОтправлениеПо, мОтправлениеПо);
	ИначеЕсли Поле = "ДоставкаС" Тогда
		СдвинутьДату(Объект.ДоставкаПо, мДоставкаПо, Объект.ДоставкаС, мДоставкаС);
	ИначеЕсли Поле = "ДоставкаПо" Тогда
		СдвинутьДату(Объект.ДоставкаС, мДоставкаС, Объект.ДоставкаПо, мДоставкаПо);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВремяСтоянкиВПункте(ПунктНазначения)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ПунктНазначения", ПунктНазначения);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатТипыПунктов.Стоянка КАК Стоянка
	|ИЗ
	|	Справочник.уатПунктыНазначения КАК уатПунктыНазначения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатТипыПунктов КАК уатТипыПунктов
	|		ПО уатПунктыНазначения.ТипПункта = уатТипыПунктов.Ссылка
	|			И (уатПунктыНазначения.Ссылка = &ПунктНазначения)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Стоянка;
	Иначе 
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьВремяСтоянкиВПункте()

&НаСервереБезКонтекста
Процедура СдвинутьДату(ДатаИсх, мДатаИсх, ДатаКон, мДатаКон)

	ПередИзменением = мДатаИсх;
	мДатаИсх = ДатаИсх;
	
	Если НЕ ЗначениеЗаполнено(ДатаКон)
		ИЛИ НЕ ЗначениеЗаполнено(ПередИзменением)
		ИЛИ НЕ ЗначениеЗаполнено(ДатаИсх) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПередИзменением <> ДатаИсх Тогда
		Если ЗначениеЗаполнено(ДатаКон) Тогда
			ДнейИзменилась = (ПередИзменением - мДатаИсх)/60/60/24;
			
			СекундИзменилась = ?(Цел(ДнейИзменилась) <> 0, ДнейИзменилась * 60 *60 *24, 0);
			ДатаКон  = ДатаКон - СекундИзменилась;
			мДатаКон = ДатаКон;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
