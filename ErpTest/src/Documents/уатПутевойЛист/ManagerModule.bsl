#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Получение ответственных лиц согласно учетной политике
//
Функция ОтветственныеЛицаПоУмолчанию(Организация, ДатаСреза) Экспорт
	
	Если ТипЗнч(Организация) = Тип("Структура") Тогда
		ТекОрганизация = Неопределено;
		Организация.Свойство("Организация", ТекОрганизация);
	Иначе
		ТекОрганизация = Организация;	
	КонецЕсли;	
	
	ОтветствЛица = Новый Структура("ОсмотрелВрач, ВыдалДиспетчер, ВыпустилМеханик, ПринялДиспетчер, ПринялМеханик");
	ОтветствЛица.ОсмотрелВрач = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, "ОсновнойВрач");
	Если НЕ СотрудникЗакрепленЗаОрганизацией(ОтветствЛица.ОсмотрелВрач, ТекОрганизация, ДатаСреза) Тогда
		ОтветствЛица.ОсмотрелВрач = Неопределено;
	КонецЕсли;
	ОтветствЛица.ВыдалДиспетчер = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, "ОсновнойДиспетчер");
	Если НЕ СотрудникЗакрепленЗаОрганизацией(ОтветствЛица.ВыдалДиспетчер, ТекОрганизация, ДатаСреза) Тогда
		ОтветствЛица.ВыдалДиспетчер = Неопределено;
	КонецЕсли;
	ОтветствЛица.ВыпустилМеханик = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, "ОсновнойМеханик");
	Если НЕ СотрудникЗакрепленЗаОрганизацией(ОтветствЛица.ВыпустилМеханик, ТекОрганизация, ДатаСреза) Тогда
		ОтветствЛица.ВыпустилМеханик = Неопределено;
	КонецЕсли;
	ОтветствЛица.ПринялДиспетчер = ОтветствЛица.ВыдалДиспетчер;
	ОтветствЛица.ПринялМеханик = ОтветствЛица.ВыпустилМеханик;
	
	Возврат ОтветствЛица;
	
КонецФункции

//Возвращает таблицу остатков ТЖ на ТС
Функция ОстаткиТЖнаТС(ТС, МоментВремени) Экспорт
	тблНормыРасходаТЖ = уатОбщегоНазначения_проф.ПолучитьНормыРасходаТЖ(ТС, МоментВремени);
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НормыРасходаТЖ.ГСМ КАК ТЖ
	|ПОМЕСТИТЬ НормыРасходаТЖ
	|ИЗ
	|	&тблНормыРасходаТЖ КАК НормыРасходаТЖ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(уатОстаткиТЖнаТС.КоличествоОстаток, 0) КАК Количество,
	|	ЕСТЬNULL(НормыРасходаТЖ.ТЖ, уатОстаткиТЖнаТС.ТЖ) КАК ТЖ
	|ИЗ
	|	РегистрНакопления.уатОстаткиТЖнаТС.Остатки(&Момент, ТС = &ТС) КАК уатОстаткиТЖнаТС
	|		ПОЛНОЕ СОЕДИНЕНИЕ НормыРасходаТЖ КАК НормыРасходаТЖ
	|		ПО уатОстаткиТЖнаТС.ТЖ = НормыРасходаТЖ.ТЖ";
	Запрос.УстановитьПараметр("Момент", МоментВремени);
	Запрос.УстановитьПараметр("ТС", ТС);
	Запрос.УстановитьПараметр("тблНормыРасходаТЖ", тблНормыРасходаТЖ);
	
	Рез = Запрос.Выполнить().Выгрузить();
	
	Возврат Рез;
КонецФункции

// Функция рассчитывает время в работе за указанный день
// Возвращает значение в секундах
Функция СтруктураВремениЗаДень(ДатаВыезда, ДатаВозвращения, НомерДня, РежимРаботыТС, Простои, Знач ПродолжительностьРабочегоДня, Знач ПродолжительностьОбеда, ВремяДоОбеда, флОбедУжеРассчитан = Ложь)
	флРежимРаботыНочной = (РежимРаботыТС.НачалоРаботы > РежимРаботыТС.КонецРаботы);
	флОднодневныйПЛ = (ДатаВозвращения - ДатаВыезда) <= 86400;
	флОднодневныйНочнойПЛ = флОднодневныйПЛ И НачалоДня(ДатаВыезда) <> НачалоДня(ДатаВозвращения);
	КоличествоДней = (НачалоДня(ДатаВозвращения) - НачалоДня(ДатаВыезда))/86400 + 1;
	
	Если ЗначениеЗаполнено(РежимРаботыТС) Тогда
		Если флРежимРаботыНочной Тогда
			ПродолжительностьРабочегоДня = 86400 - (РежимРаботыТС.НачалоРаботы - РежимРаботыТС.КонецРаботы);
		Иначе
			ПродолжительностьРабочегоДня = РежимРаботыТС.КонецРаботы - РежимРаботыТС.НачалоРаботы;
		КонецЕсли;
		Если ЗначениеЗаполнено(РежимРаботыТС.Обед) Тогда //заполнена продолжительность обеда
			ПродолжительностьОбеда = РежимРаботыТС.Обед - '00010101';
		ИначеЕсли РежимРаботыТС.НачалоОбеда > РежимРаботыТС.КонецОбеда Тогда //это ночной обед
			ПродолжительностьОбеда = (РежимРаботыТС.КонецОбеда + 86400) - РежимРаботыТС.НачалоОбеда;
		Иначе //типичный дневной обед
			ПродолжительностьОбеда = РежимРаботыТС.КонецОбеда - РежимРаботыТС.НачалоОбеда;
		КонецЕсли;
	КонецЕсли;
	
	ТекДата = НачалоДня(ДатаВыезда) + 86400*(НомерДня-1);
	
	//простои
	тблПростои = РасчетПростоевНаДень(ТекДата, Простои);
			
	//обеденные часы с вытеснением простоями
	НачалоРабочегоИнтервала = Макс(ДатаВыезда, НачалоДня(ТекДата));
	тблОбеды = РасчетОбедовНаДень(ТекДата, РежимРаботыТС, ПродолжительностьОбеда, ВремяДоОбеда, тблПростои, ДатаВыезда, ДатаВозвращения, флОднодневныйНочнойПЛ);
		
	тблРабочееВремя = Новый ТаблицаЗначений;
	тблРабочееВремя.Колонки.Добавить("ВидВремени");
	тблРабочееВремя.Колонки.Добавить("Начало");
	тблРабочееВремя.Колонки.Добавить("Конец");
	тблРабочееВремя.Колонки.Добавить("Продолжительность");
	
	Если флОднодневныйПЛ И НЕ флОднодневныйНочнойПЛ Тогда //однодневные дневные
		//рабочий интервал
		Если ДатаВозвращения >= НачалоДня(ДатаВозвращения) + 6*3600 И ДатаВыезда <= НачалоДня(ДатаВыезда) + 22*3600 Тогда
			НоваяСтрока = тблРабочееВремя.Добавить();
			НоваяСтрока.ВидВремени = "Работа";
			НоваяСтрока.Начало = ДатаВыезда;
			НоваяСтрока.Конец = ДатаВозвращения;
			НоваяСтрока.Продолжительность = НоваяСтрока.Конец - НоваяСтрока.Начало;
		КонецЕсли;
		
		//часть ночного интервала от 0:00 до 6:00 в день выезда
		Если ДатаВыезда < НачалоДня(ДатаВыезда) + 6*3600 Тогда
			НоваяСтрока = тблРабочееВремя.Добавить();
			НоваяСтрока.ВидВремени = "Ночные";
			НоваяСтрока.Начало = ДатаВыезда;
			НоваяСтрока.Конец = Мин(ДатаВозвращения, НачалоДня(ДатаВыезда) + 6*3600);
			НоваяСтрока.Продолжительность = НоваяСтрока.Конец - НоваяСтрока.Начало;
		КонецЕсли;
		//часть ночного интервала от 22:00 до 0:00 в день возврата
		Если ДатаВозвращения > НачалоДня(ДатаВозвращения) + 22*3600 Тогда
			НоваяСтрока = тблРабочееВремя.Добавить();
			НоваяСтрока.ВидВремени = "Ночные";
			НоваяСтрока.Начало = НачалоДня(ДатаВозвращения) + 22*3600;
			НоваяСтрока.Конец = ДатаВозвращения;
			НоваяСтрока.Продолжительность = НоваяСтрока.Конец - НоваяСтрока.Начало;
		КонецЕсли;
		//для ночного ПЛ - часть ночного интервала от 22:00 до 6:00 в ночь между выездом и возвратом
		Если флОднодневныйНочнойПЛ Тогда
			НоваяСтрока = тблРабочееВремя.Добавить();
			НоваяСтрока.ВидВремени = "Ночные";
			НоваяСтрока.Начало = Макс(ДатаВыезда, НачалоДня(ДатаВыезда) + 22*3600);
			НоваяСтрока.Конец = Мин(ДатаВозвращения, НачалоДня(ДатаВозвращения) + 6*3600);
			НоваяСтрока.Продолжительность = НоваяСтрока.Конец - НоваяСтрока.Начало;
		КонецЕсли;
		
	Иначе //многодневные и однодневные ночные
		Если НомерДня = 1 Тогда //первый день, считаем рабочее время без учета режима работы ТС
			//рабочий интервал
			НоваяСтрока = тблРабочееВремя.Добавить();
			НоваяСтрока.ВидВремени = "Работа";
			НоваяСтрока.Начало = ДатаВыезда;
			Если ДатаВыезда - НачалоДня(ДатаВыезда) + ПродолжительностьРабочегоДня > 86400 Тогда // продолжительность рабочего времени по настройкам меньше промежутка от выезда до конца дня
				НоваяСтрока.Конец = КонецДня(ДатаВыезда)+1;
				НоваяСтрока.Продолжительность = НоваяСтрока.Конец - НоваяСтрока.Начало;
			Иначе
				НоваяСтрока.Продолжительность = ПродолжительностьРабочегоДня;
				НоваяСтрока.Конец = НоваяСтрока.Начало + НоваяСтрока.Продолжительность;
			КонецЕсли;
			КонецРаботы = НоваяСтрока.Конец;
			
			//часть ночного интервала от 0:00
			Если ДатаВыезда < НачалоДня(ДатаВыезда) + 6*3600 Тогда
				НоваяСтрока = тблРабочееВремя.Добавить();
				НоваяСтрока.ВидВремени = "Ночные";
				НоваяСтрока.Начало = ДатаВыезда;
				НоваяСтрока.Конец = НачалоДня(ДатаВыезда) + 6*3600;
				НоваяСтрока.Продолжительность = НоваяСтрока.Конец - НоваяСтрока.Начало;
			КонецЕсли;
			
			//часть ночного интервала до 0:00
			Если ДатаВыезда + ПродолжительностьРабочегоДня > НачалоДня(ДатаВыезда) + 22*3600 Тогда
				НоваяСтрока = тблРабочееВремя.Добавить();
				НоваяСтрока.ВидВремени = "Ночные";
				НоваяСтрока.Начало = Макс(ДатаВыезда, НачалоДня(ДатаВыезда) + 22*3600);
				НоваяСтрока.Конец = Мин(ДатаВыезда + ПродолжительностьРабочегоДня, КонецДня(ДатаВыезда)+1);
				НоваяСтрока.Продолжительность = НоваяСтрока.Конец - НоваяСтрока.Начало;
			КонецЕсли;
						
		ИначеЕсли НомерДня = КоличествоДней Тогда //последний день, считаем рабочее время без учета режима работы ТС
			//рабочий интервал
			НоваяСтрока = тблРабочееВремя.Добавить();
			НоваяСтрока.ВидВремени = "Работа";
			НоваяСтрока.Конец = ДатаВозвращения;
			Если ДатаВозвращения - НачалоДня(ДатаВозвращения) < ПродолжительностьРабочегоДня Тогда // продолжительность рабочего времени по настройкам меньше промежутка от начала дня возвращения до времени возвращения
				НоваяСтрока.Начало = НачалоДня(ДатаВозвращения);
				НоваяСтрока.Продолжительность = ДатаВозвращения - НачалоДня(ДатаВозвращения);
			Иначе
				НоваяСтрока.Продолжительность = ПродолжительностьРабочегоДня;
				НоваяСтрока.Начало = НоваяСтрока.Конец - ПродолжительностьРабочегоДня;
			КонецЕсли;
			
			//часть ночного интервала от 0:00
			Если ДатаВозвращения - ПродолжительностьРабочегоДня < НачалоДня(ДатаВозвращения) + 6*3600 Тогда
				НоваяСтрока = тблРабочееВремя.Добавить();
				НоваяСтрока.ВидВремени = "Ночные";
				НоваяСтрока.Начало = Макс(ДатаВозвращения - ПродолжительностьРабочегоДня, НачалоДня(ДатаВозвращения));
				НоваяСтрока.Конец = Мин(НачалоДня(ДатаВозвращения) + 6*3600, ДатаВозвращения);
				НоваяСтрока.Продолжительность = НоваяСтрока.Конец - НоваяСтрока.Начало;
			КонецЕсли;
						
			//часть ночного интервала до 0:00
			Если ДатаВозвращения > НачалоДня(ДатаВозвращения) + 22*3600 Тогда
				НоваяСтрока = тблРабочееВремя.Добавить();
				НоваяСтрока.ВидВремени = "Ночные";
				НоваяСтрока.Начало = НачалоДня(ДатаВозвращения) + 22*3600;
				НоваяСтрока.Конец = ДатаВозвращения;
				НоваяСтрока.Продолжительность = НоваяСтрока.Конец - НоваяСтрока.Начало;
			КонецЕсли;
			
		Иначе //промежуточные дни
			Если ЗначениеЗаполнено(РежимРаботыТС) Тогда //режим работы указан
				Если флРежимРаботыНочной Тогда
					//часть рабочего интервала от 0:00
					НоваяСтрока = тблРабочееВремя.Добавить();
					НоваяСтрока.ВидВремени = "Работа";
					НоваяСтрока.Начало = НачалоДня(ТекДата);
					НоваяСтрока.Конец = НачалоДня(ТекДата) + (РежимРаботыТС.КонецРаботы - '00010101');
					НоваяСтрока.Продолжительность = НоваяСтрока.Конец - НоваяСтрока.Начало;
					
					//часть рабочего интервала до 0:00
					НоваяСтрока = тблРабочееВремя.Добавить();
					НоваяСтрока.ВидВремени = "Работа";
					НоваяСтрока.Начало = НачалоДня(ТекДата) + (РежимРаботыТС.НачалоРаботы - '00010101');
					НоваяСтрока.Конец = КонецДня(ТекДата) + 1;
					НоваяСтрока.Продолжительность = НоваяСтрока.Конец - НоваяСтрока.Начало;
					
					//часть ночного интервала от 0:00
					НоваяСтрока = тблРабочееВремя.Добавить();
					НоваяСтрока.ВидВремени = "Ночные";
					НоваяСтрока.Начало = НачалоДня(ТекДата);
					Если (РежимРаботыТС.КонецРаботы - '00010101') >= 6*3600 Тогда //конец интервала по режиму больше 6:00
						НоваяСтрока.Продолжительность = 6*3600;
					Иначе //конец интервала по режиму меньше 6:00
						НоваяСтрока.Продолжительность = (РежимРаботыТС.КонецРаботы - '00010101');
					КонецЕсли;
					НоваяСтрока.Конец = НоваяСтрока.Начало + НоваяСтрока.Продолжительность;
					
					//часть ночного интервала до 0:00
					НоваяСтрока = тблРабочееВремя.Добавить();
					НоваяСтрока.ВидВремени = "Ночные";
					НоваяСтрока.Конец = КонецДня(ТекДата) + 1;
					Если (РежимРаботыТС.НачалоРаботы - '00010101') <= 22*3600 Тогда //начало интервала по режиму меньше 22:00
						НоваяСтрока.Продолжительность = 2*3600;
					Иначе //начало интервала по режиму больше 22:00
						НоваяСтрока.Продолжительность = 24*3600 - (РежимРаботыТС.НачалоРаботы - '00010101');
					КонецЕсли;
					НоваяСтрока.Начало = НоваяСтрока.Конец - НоваяСтрока.Продолжительность;
					
				Иначе
					//рабочий интервал
					НоваяСтрока = тблРабочееВремя.Добавить();
					НоваяСтрока.ВидВремени = "Работа";
					НоваяСтрока.Начало = НачалоДня(ТекДата) + (РежимРаботыТС.НачалоРаботы - '00010101');
					НоваяСтрока.Конец = НачалоДня(ТекДата) + (РежимРаботыТС.КонецРаботы - '00010101');
					НоваяСтрока.Продолжительность = НоваяСтрока.Конец - НоваяСтрока.Начало;
					
					//часть ночного интервала от 0:00
					Если (РежимРаботыТС.НачалоРаботы - '00010101') < 6*3600 Тогда
						НоваяСтрока = тблРабочееВремя.Добавить();
						НоваяСтрока.ВидВремени = "Ночные";
						НоваяСтрока.Начало = НачалоДня(ТекДата);
						НоваяСтрока.Продолжительность = 6*3600 - (РежимРаботыТС.НачалоРаботы - '00010101');
						НоваяСтрока.Конец = НоваяСтрока.Начало + НоваяСтрока.Продолжительность;
					КонецЕсли;
					
					//часть ночного интервала до 0:00
					Если (РежимРаботыТС.КонецРаботы - '00010101') > 22*3600 Тогда
						НоваяСтрока = тблРабочееВремя.Добавить();
						НоваяСтрока.ВидВремени = "Ночные";
						НоваяСтрока.Начало = НачалоДня(ТекДата) + 22*3600;
						НоваяСтрока.Конец = НачалоДня(ТекДата) + (РежимРаботыТС.КонецРаботы - '00010101');
						НоваяСтрока.Продолжительность = НоваяСтрока.Конец - НоваяСтрока.Начало;
					КонецЕсли;
				КонецЕсли;
			Иначе
				//рабочий интервал
				//!Внимание! ночной интервал для промежуточных дней для неуказанного режима работы не заполняем
				//если продолжительность раб. дня захватывает ночные (больше 16), то заполняем
				Если ПродолжительностьРабочегоДня > 57600 Тогда
					НоваяСтрока = тблРабочееВремя.Добавить();
					НоваяСтрока.ВидВремени = "Работа";
					НоваяСтрока.Продолжительность = 57600;
					//НоваяСтрока.Начало = НачалоДня(ТекДата) + 6*3600;
					//НоваяСтрока.Конец = НачалоДня(ТекДата) + 22*3600;
					НоваяСтрока = тблРабочееВремя.Добавить();
					НоваяСтрока.ВидВремени = "Ночные";
					НоваяСтрока.Продолжительность = ПродолжительностьРабочегоДня - 57600;
				Иначе
					НоваяСтрока = тблРабочееВремя.Добавить();
					НоваяСтрока.ВидВремени = "Работа";
					НоваяСтрока.Продолжительность = ПродолжительностьРабочегоДня;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//исключаем из всего рабочего времени ночные - получаем дневное время
	тблНочные = тблРабочееВремя.Скопировать();
	мсвСтрокиУдалить = Новый Массив;
	Для Каждого ТекСтрока Из тблНочные Цикл
		Если ТекСтрока.ВидВремени <> "Ночные" Тогда
			мсвСтрокиУдалить.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекСтрокаУдалить Из мсвСтрокиУдалить Цикл
		тблНочные.Удалить(ТекСтрокаУдалить);
	КонецЦикла;
	Для Каждого ТекСтрокаРабочееВремя Из тблРабочееВремя Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрокаРабочееВремя.Начало) Тогда //промежуточный день многодневного ПЛ, считаем что ночное время заведомо не входит в дневное
			Продолжить;
		КонецЕсли;
		
		Если ТекСтрокаРабочееВремя.ВидВремени = "Работа" Тогда
			ПересечениеИнтервалов(ТекСтрокаРабочееВремя, тблНочные, тблРабочееВремя);
		КонецЕсли;
	КонецЦикла;
	//удаляем строки с нулевой продолжительностью
	мсвСтрокиУдалить = Новый Массив;
	Для Каждого ТекСтрока Из тблНочные Цикл
		Если ТекСтрока.Продолжительность = 0 Тогда
			мсвСтрокиУдалить.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекСтрокаУдалить Из мсвСтрокиУдалить Цикл
		тблНочные.Удалить(ТекСтрокаУдалить);
	КонецЦикла;
	мсвСтрокиУдалить = Новый Массив;
	Для Каждого ТекСтрока Из тблРабочееВремя Цикл
		Если ТекСтрока.Продолжительность = 0 Тогда
			мсвСтрокиУдалить.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекСтрокаУдалить Из мсвСтрокиУдалить Цикл
		тблРабочееВремя.Удалить(ТекСтрокаУдалить);
	КонецЦикла;
		
	//исключение обеда и простоев из дневного и ночного времени
	Для Каждого ТекСтрокаРабочееВремя Из тблРабочееВремя Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрокаРабочееВремя.Начало) Тогда //промежуточный день многодневного ПЛ, считаем что простой/обеда полностью входят в рабочий интервал
			Продолжить;
		КонецЕсли;
		
		ПересечениеИнтервалов(ТекСтрокаРабочееВремя, тблПростои, тблРабочееВремя);
		ПересечениеИнтервалов(ТекСтрокаРабочееВремя, тблОбеды, тблРабочееВремя);
	КонецЦикла;
	//удаляем строки с нулевой продолжительностью
	мсвСтрокиУдалить = Новый Массив;
	Для Каждого ТекСтрока Из тблНочные Цикл
		Если ТекСтрока.Продолжительность = 0 Тогда
			мсвСтрокиУдалить.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекСтрокаУдалить Из мсвСтрокиУдалить Цикл
		тблНочные.Удалить(ТекСтрокаУдалить);
	КонецЦикла;
	
	//пересчет итоговой продолжительности
	ВремяДневное = 0;
	ВремяНочное = 0;
	Для Каждого ТекСтрока Из тблРабочееВремя Цикл
		Если ТекСтрока.ВидВремени = "Работа" Тогда
			ВремяДневное = ВремяДневное + ТекСтрока.Продолжительность;
		ИначеЕсли ТекСтрока.ВидВремени = "Ночные" Тогда
			ВремяНочное = ВремяНочное + ТекСтрока.Продолжительность;
		КонецЕсли;
	КонецЦикла;
	ВремяПростои = тблПростои.Итог("Продолжительность");
	
	//доп. обработка
	Если тблРабочееВремя.Количество() > 0 Тогда
		Если НЕ ЗначениеЗаполнено(тблРабочееВремя[0].Начало) Тогда //промежуточный день многодневного ПЛ, считаем что простой/обед полностью входят в рабочий интервал
			Если ВремяДневное + ВремяНочное > ВремяДоОбеда Тогда
				Если флРежимРаботыНочной Тогда
					ВремяНочное = ВремяНочное - тблОбеды.Итог("Продолжительность");
				Иначе
					ВремяДневное = ВремяДневное - тблОбеды.Итог("Продолжительность");
				КонецЕсли;
			КонецЕсли;
			ВремяДневное = ВремяДневное - ВремяПростои;
		ИначеЕсли НЕ ЗначениеЗаполнено(РежимРаботыТС) ИЛИ РежимРаботыТС.Обед <> '00010101' Тогда //рабочий интервал указан, но не известен интервал обеда (не известна продолжительность) - тогда нужно убрать продолжительность обеда
			Если ВремяДневное + ВремяНочное > ВремяДоОбеда Тогда
				Для Каждого ТекОбед Из тблОбеды Цикл
					Если ТекОбед.Начало = Неопределено Тогда
						Если ВремяДневное >= ВремяДоОбеда + ТекОбед.Продолжительность Тогда
							Если НЕ флОднодневныйНочнойПЛ ИЛИ НЕ флОбедУжеРассчитан Тогда
								ВремяДневное = ВремяДневное - ТекОбед.Продолжительность;
								Если флОднодневныйНочнойПЛ Тогда
									флОбедУжеРассчитан = Истина;
								КонецЕсли;
							КонецЕсли;
						ИначеЕсли ВремяНочное >= ВремяДоОбеда + ТекОбед.Продолжительность Тогда
							Если НЕ флОднодневныйНочнойПЛ ИЛИ НЕ флОбедУжеРассчитан Тогда
								ВремяНочное = ВремяНочное - ТекОбед.Продолжительность;
								Если флОднодневныйНочнойПЛ Тогда
									флОбедУжеРассчитан = Истина;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("РабочееВремя, Явка, РаботаНочныеЧасы, Простой", ВремяДневное + ВремяНочное, ВремяДневное, ВремяНочное, ВремяПростои);
КонецФункции	

// Функция рассчитывает обеденное время для ПЛ с указанным режимом работы ТС
// Учитывает пересечение с простоями - интервалы обеда замещаются пересекающимися простоями
// Возвращает таблицу интервалов простоев и продолжительность в секундах
//
Функция РасчетОбедовНаДень(ТекДата, РежимРаботы, ПродолжительностьОбеда, ВремяДоОбеда, Простои, ДатаВыезда, ДатаВозвращения, флОднодневныйНочнойПЛ) Экспорт
	тблРез = Новый ТаблицаЗначений;
	тблРез.Колонки.Добавить("Начало");
	тблРез.Колонки.Добавить("Конец");
	тблРез.Колонки.Добавить("Продолжительность");
	
	Если ЗначениеЗаполнено(РежимРаботы) Тогда
		Если ЗначениеЗаполнено(РежимРаботы.Обед) Тогда // указана продолжительность обеда, интервал не заполнен
			НоваяСтрока = тблРез.Добавить();
			НоваяСтрока.Продолжительность = РежимРаботы.Обед - '00010101';
			Если ВремяДоОбеда = 0 Тогда //не указано время до обеда, считаем что обед точно должен быть, но когда неизвестно
				НоваяСтрока.Начало = Неопределено;
				НоваяСтрока.Конец = Неопределено;
			Иначе
				Если ДатаВозвращения - ДатаВыезда <= 86400 Тогда //однодневный ПЛ
					НоваяСтрока.Начало = ДатаВыезда + ВремяДоОбеда;
					НоваяСтрока.Конец = НоваяСтрока.Начало + НоваяСтрока.Продолжительность;
				Иначе
					Если НачалоДня(ТекДата) = НачалоДня(ДатаВыезда) Тогда //многодневный ПЛ - первый день
						НоваяСтрока.Начало = ДатаВыезда + ВремяДоОбеда;
						НоваяСтрока.Конец = НоваяСтрока.Начало + НоваяСтрока.Продолжительность;
					Иначе //многодневный ПЛ - второй и последующие дни
						НоваяСтрока.Начало = НачалоДня(ТекДата) + (РежимРаботы.НачалоРаботы - '00010101') + ВремяДоОбеда;
						Если НачалоДня(НоваяСтрока.Начало) > НачалоДня(ТекДата) Тогда //ночной режим
							НоваяСтрока.Начало = НоваяСтрока.Начало - 86400;
						КонецЕсли;
						НоваяСтрока.Конец = НоваяСтрока.Начало + НоваяСтрока.Продолжительность;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		Иначе // продолжительность обеда не заполнена - берем интервал, продолжительность рассчитываем
			Если РежимРаботы.НачалоОбеда <= РежимРаботы.КонецОбеда Тогда //дневной обед
				НоваяСтрока = тблРез.Добавить();
				НоваяСтрока.Начало = НачалоДня(ТекДата) + (РежимРаботы.НачалоОбеда - '00010101');
				НоваяСтрока.Конец = НачалоДня(ТекДата) + (РежимРаботы.КонецОбеда - '00010101');
				НоваяСтрока.Продолжительность = НоваяСтрока.Конец - НоваяСтрока.Начало;
			Иначе //ночной обед
				//часть ночного обеда до 0:00
				НоваяСтрока = тблРез.Добавить();
				НоваяСтрока.Начало = НачалоДня(ТекДата) + (РежимРаботы.НачалоОбеда - '00010101');
				НоваяСтрока.Конец = КонецДня(ТекДата)+1;
				НоваяСтрока.Продолжительность = НоваяСтрока.Конец - НоваяСтрока.Начало;
				//часть ночного обеда с 0:00
				Если РежимРаботы.КонецОбеда <> '00010101' Тогда
					НоваяСтрока = тблРез.Добавить();
					НоваяСтрока.Начало = НачалоДня(ТекДата);
					НоваяСтрока.Конец = НачалоДня(ТекДата) + (РежимРаботы.КонецОбеда - '00010101');
					НоваяСтрока.Продолжительность = НоваяСтрока.Конец - НоваяСтрока.Начало;
				КонецЕсли;
			КонецЕсли;
			
			//простои вытесняют обед
			Для Каждого СтруктураОбед Из тблРез Цикл
				Если СтруктураОбед.Начало = Неопределено Тогда //обед задан только продолжительностью - вытеснить не можем, не известен интервал обеда
					Продолжить;
				КонецЕсли;
				
				ПересечениеИнтервалов(СтруктураОбед, Простои, тблРез, Истина);
			КонецЦикла;
		КонецЕсли;
			
	Иначе //режим работы не указан, расчет ведем по ВремяДоОбеда и ПродолжительностьОбеда
		Если (ДатаВозвращения - ДатаВыезда) <= 86400 Тогда //однодневный ПЛ
			Если НачалоДня(ТекДата) = НачалоДня(ДатаВыезда) Тогда //дневной и первый день ночного ПЛ
				ОтВыездаДоПолуночи = (КонецДня(ДатаВыезда) + 1) - ДатаВыезда;
				Если ОтВыездаДоПолуночи > ВремяДоОбеда Тогда
					НоваяСтрока = тблРез.Добавить();
					НоваяСтрока.Начало = ДатаВыезда + ВремяДоОбеда;
					НоваяСтрока.Продолжительность = Мин(ПродолжительностьОбеда, ОтВыездаДоПолуночи - ВремяДоОбеда);
					НоваяСтрока.Конец = НоваяСтрока.Начало + НоваяСтрока.Продолжительность;
				КонецЕсли;
			ИначеЕсли НачалоДня(ТекДата) = НачалоДня(ДатаВозвращения) Тогда //второй день ночного ПЛ
				ОтПолуночиДоВозврата = ДатаВозвращения - НачалоДня(ДатаВозвращения);
				Если ОтПолуночиДоВозврата > ВремяДоОбеда Тогда
					НоваяСтрока = тблРез.Добавить();
					НоваяСтрока.Начало = НачалоДня(ДатаВозвращения) + ВремяДоОбеда;
					НоваяСтрока.Продолжительность = Мин(ПродолжительностьОбеда, ОтПолуночиДоВозврата - ВремяДоОбеда);
					НоваяСтрока.Конец = НоваяСтрока.Начало + НоваяСтрока.Продолжительность;
				КонецЕсли;
			КонецЕсли;
		Иначе //многодневный ПЛ
			НоваяСтрока = тблРез.Добавить();
			НоваяСтрока.Начало = Неопределено;
			НоваяСтрока.Конец = Неопределено;
			НоваяСтрока.Продолжительность = ПродолжительностьОбеда;
		КонецЕсли;
		
	КонецЕсли;
	
	//удаление обедов с нулевой продолжительностью
	мсвСтрокиУдалить = тблРез.НайтиСтроки(Новый Структура("Продолжительность", 0));
	Для Каждого СтрокаУдалить Из мсвСтрокиУдалить Цикл
		тблРез.Удалить(СтрокаУдалить);
	КонецЦикла;
	
	////для однодневного ночного нужно найти обеды и на следующий день, поскольку эта функция для однодневных всегда вызывается один раз
	//Если флОднодневныйНочнойПЛ Тогда
	//	тблСледДень = РасчетОбедовНаДень(ТекДата + 86400, РежимРаботы, ПродолжительностьОбеда, ВремяДоОбеда, Простои, ДатаВыезда, ДатаВозвращения, Ложь);
	//	Для Каждого ТекОбед Из тблСледДень Цикл
	//		НовыйОбед = тблРез.Добавить();
	//		ЗаполнитьЗначенияСвойств(НовыйОбед, ТекОбед);
	//	КонецЦикла;
	//	
	//	//лишние обеды удаляем
	//	мсвСтрокиУдалить = Новый Массив;
	//	Для Каждого ТекОбед Из тблРез Цикл
	//		Если ТекОбед.Начало < ДатаВыезда ИЛИ ТекОбед.Конец > ДатаВозвращения Тогда
	//			мсвСтрокиУдалить.Добавить(ТекОбед);
	//		КонецЕсли;
	//	КонецЦикла;
	//	Для Каждого СтрокаУдалить Из мсвСтрокиУдалить Цикл
	//		тблРез.Удалить(СтрокаУдалить);
	//	КонецЦикла;
	//КонецЕсли;
	
	Возврат тблРез;
КонецФункции //РасчетОбедовНаДень()

// Функция расчета времени простоев по заданному дню
// Возвращает таблицу интервалов простоев и продолжительность в секундах
//
Функция РасчетПростоевНаДень(ТекДата, Простои) Экспорт
	тблРез = Новый ТаблицаЗначений;
	тблРез.Колонки.Добавить("Начало");
	тблРез.Колонки.Добавить("Конец");
	тблРез.Колонки.Добавить("Продолжительность");
	
	Для Каждого ТекСтрока Из Простои Цикл
		Если НачалоДня(ТекДата) <> НачалоДня(ТекСтрока.НачалоПростоя) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = тблРез.Добавить();
		НоваяСтрока.Начало = НачалоДня(ТекДата) + (ТекСтрока.НачалоПростоя - НачалоДня(ТекСтрока.НачалоПростоя));
		НоваяСтрока.Продолжительность = Текстрока.ВремяПростоя - НачалоДня(Текстрока.ВремяПростоя);
		НоваяСтрока.Конец = НоваяСтрока.Начало + НоваяСтрока.Продолжительность;
	КонецЦикла;
	
	Возврат тблРез;
КонецФункции	

// Функция расчета времени по документу
//Возвращает таблицу с колонками:
//	- ВидВремени - Строка - возможные значения: Работа, Ночные, Простой
//  - ДатаРаботы - Дата работ
//  - Продолжительность - время работ в секундах
//Внимание! Время в работе (вид Работа) = Время дневное + Время ночное (вид Ночные)
//
Функция РасчетВремени(ДатаВыезда, ДатаВозвращения, Организация, РежимРаботыТС, Простои) Экспорт
	//переводим время из формата Дата в количество секунд
	мВремяДоОбеда = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, "ВремяДоОбеда") - '00010101';
	мПродолжительностьОбеда = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, "ПродолжительностьОбеда") - '00010101';
	мПродолжительностьРабочегоДня = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, "ПродолжительностьРабочегоДня") - '00010101';
	Если мПродолжительностьРабочегоДня = 0 Тогда
		мПродолжительностьРабочегоДня = 86400;
	КонецЕсли;
	
	резТаблица = Новый ТаблицаЗначений;
	резТаблица.Колонки.Добавить("ВидВремени");
	резТаблица.Колонки.Добавить("ДатаРаботы");
	резТаблица.Колонки.Добавить("Продолжительность");
	
	ТекДата = НачалоДня(ДатаВыезда);
	Сч = 1;
	флОбедУжеРассчитан = Ложь;
	Пока ТекДата <= НачалоДня(ДатаВозвращения) Цикл
		СтруктураВремениЗаДень = СтруктураВремениЗаДень(ДатаВыезда, ДатаВозвращения, Сч, РежимРаботыТС, Простои, мПродолжительностьРабочегоДня, мПродолжительностьОбеда, мВремяДоОбеда, флОбедУжеРассчитан);
		
		Для Каждого ТекВидВремени Из СтруктураВремениЗаДень Цикл
			Если ТекВидВремени.Значение > 0 Тогда
				НоваяСтрока = резТаблица.Добавить();
				НоваяСтрока.ВидВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени." + ТекВидВремени.Ключ);
				НоваяСтрока.ДатаРаботы = ТекДата;
				НоваяСтрока.Продолжительность = СтруктураВремениЗаДень[ТекВидВремени.Ключ];
			КонецЕсли;
		КонецЦикла;
		
		ТекДата = ТекДата + 86400;
		Сч = Сч + 1;
		
		////выходим, если ПЛ однодневный
		//Если (ДатаВозвращения - ДатаВыезда) <= 86400 Тогда
		//	Прервать;
		//КонецЕсли;
	КонецЦикла;
	
	Возврат резТаблица;
КонецФункции

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	СформироватьТаблицаСостояниеТС(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаПланированияРаботыТС(ДокументСсылка, СтруктураДополнительныеСвойства);
	Если ДокументСсылка.Рассчитан Тогда
		СформироватьТаблицаСчетчикиТС(ДокументСсылка, СтруктураДополнительныеСвойства);
		СформироватьТаблицаВыработкаТС(ДокументСсылка, СтруктураДополнительныеСвойства);
		СформироватьТаблицаВыработкаСотрудников(ДокументСсылка, СтруктураДополнительныеСвойства);
		СформироватьТаблицаПростоев(ДокументСсылка, СтруктураДополнительныеСвойства);
		СформироватьТаблицаГСМ(ДокументСсылка, СтруктураДополнительныеСвойства);
		СформироватьТаблицаРасходГСМ(ДокументСсылка, СтруктураДополнительныеСвойства);
		СформироватьТаблицаРасходТЖ(ДокументСсылка, СтруктураДополнительныеСвойства);
		СформироватьТаблицаИзносПробегШин(ДокументСсылка, СтруктураДополнительныеСвойства);
		СформироватьТаблицуПараметровВыработкиПользовательскихАгрегатов(ДокументСсылка, СтруктураДополнительныеСвойства);
		СформироватьТаблицаПартииТЖ(ДокументСсылка, СтруктураДополнительныеСвойства);
		СформироватьТаблицаЗатратыТС(ДокументСсылка, СтруктураДополнительныеСвойства);
		СформироватьТаблицаРабочееВремяРаботниковОрганизаций(ДокументСсылка, СтруктураДополнительныеСвойства);
	КонецЕсли;
КонецПроцедуры // ИнициализироватьДанныеДокумента()

// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ДокументСсылка);
	
	Если ДокументСсылка.Рассчитан Тогда
		Для Каждого ТекСтрока Из ДокументСсылка.РасходГСМ Цикл
			Если НЕ ТекСтрока.Активен Тогда
				Продолжить;
			КонецЕсли;
			
			МоментВремени = Новый Граница(ДокументСсылка.ДатаЗакрытия, ВидГраницы.Включая);
			
			Если уатГСМ.ЭтоТехническаяЖидкость(ТекСтрока.ГСМ) Тогда
				ОстатокТЖ = уатГСМ.ОстатокТЖнаТС(ТекСтрока.ТС, ТекСтрока.ГСМ, МоментВремени);
				Если ОстатокТЖ < 0 Тогда
					ТекстСообщения = "ТЖ """ + ТекСтрока.ГСМ + """, ТС """ + уатОбщегоНазначения.уатПредставлениеТС(ТекСтрока.ТС, ДокументСсылка.Организация) + """ ";
					ТекстСообщения = ТекстСообщения + " - отрицательный остаток ТЖ в ТС.";
					ТекстСообщения = ТекстСообщения + Символы.ПС + "Остаток на ТС: " + ОстатокТЖ + ".";
					уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
				КонецЕсли;
			Иначе
				ОстатокГСМ = уатОбщегоНазначения.уатОстатокГСМнаТС(МоментВремени, ТекСтрока.ТС, ТекСтрока.ГСМ, ДокументСсылка);
				Если ОстатокГСМ < 0 Тогда
					ТекстСообщения = "ГСМ """ + ТекСтрока.ГСМ + """, ТС """ + уатОбщегоНазначения.уатПредставлениеТС(ТекСтрока.ТС, ДокументСсылка.Организация) + """ ";
					ТекстСообщения = ТекстСообщения + " - отрицательный остаток ГСМ на ТС.";
					ТекстСообщения = ТекстСообщения + Символы.ПС + "Остаток на ТС: " + ОстатокГСМ + ".";
					уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры 

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	Заглушка = Истина;
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.Печать

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатПутевойЛист";
	КомандаПечати.Идентификатор = "ПечататьЛицСторону";
	КомандаПечати.Представление = НСтр("ru = 'Печатать лиц. сторону при выезде'");
	КомандаПечати.Порядок  = 2;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатПутевойЛист";
	КомандаПечати.Идентификатор = "ПечататьОбрСторону";
	КомандаПечати.Представление = НСтр("ru = 'Печатать обр. сторону при выезде'");
	КомандаПечати.Порядок  = 3;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатПутевойЛист";
	КомандаПечати.Идентификатор = "ПечатьВесьДокумент";
	КомандаПечати.Представление = НСтр("ru = 'Печатать весь пут. лист при выезде'");
	КомандаПечати.Порядок  = 1;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатПутевойЛист";
	КомандаПечати.Идентификатор = "МаршрутныйЛистПоЗаданию";
	КомандаПечати.Представление = НСтр("ru = 'Маршрутный лист по заданию'");
	КомандаПечати.Порядок  = 7;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатПутевойЛист";
	КомандаПечати.Идентификатор = "ПечатьВесьДокументПолная";
	КомандаПечати.Представление = НСтр("ru = 'Печатать весь пут. лист при возвращении'");
	КомандаПечати.Порядок  = 4;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатПутевойЛист";
	КомандаПечати.Идентификатор = "ПечататьОбрСторонуПолная";
	КомандаПечати.Представление = НСтр("ru = 'Печатать обр. сторону при возвращении'");
	КомандаПечати.Порядок  = 6;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатПутевойЛист";
	КомандаПечати.Идентификатор = "ПечататьЛицСторонуПолная";
	КомандаПечати.Представление = НСтр("ru = 'Печатать лиц. сторону при возвращении'");
	КомандаПечати.Порядок  = 5;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатПутевойЛист";
	КомандаПечати.Идентификатор = "ЭСМ7";
	КомандаПечати.Представление = НСтр("ru = 'ЭСМ-7'");
	КомандаПечати.Порядок  = 8;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатПутевойЛист";
	КомандаПечати.Идентификатор = "Автокран";
	КомандаПечати.Представление = НСтр("ru = 'Автокран'");
	КомандаПечати.Порядок  = 9;
	
КонецПроцедуры

//Функция возвращает адрес строкой для печати
//
Функция ПредставлениеАдреса(ВхАдрес) Экспорт
	Если ТипЗнч(ВхАдрес) = Тип("Строка") Тогда
		Рез = ВхАдрес;
	ИначеЕсли ТипЗнч(ВхАдрес) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		Если ПустаяСтрока(ВхАдрес.Адрес) Тогда
			Рез = ВхАдрес.Наименование;
		Иначе
			Рез = ВхАдрес.Адрес;
		КонецЕсли;
	Иначе
		Рез = "";
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

// Формирует печатную форму путевых листов
//
// Параметры:
//  ИмяМакета - табличный документ
//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
Функция уатПечать_4П(ТекущийДокумент, ИмяМакета, ФлагПечати="") Экспорт
	Перем мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория;	
	
	мМаксСтрок = 2;
	мМаксСтрокПростоя = 3;

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_ПутевойЛист";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатПутевойЛист." + ИмяМакета);
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабДокумент.ПолеСверху 	= 0;
	ТабДокумент.ПолеСлева 	= 0;
	ТабДокумент.ПолеСнизу 	= 0;
	ТабДокумент.ПолеСправа 	= 0;
	
	//печатаем лицевую сторону п/л
	Если ФлагПечати <> 2 И ФлагПечати <> 3 Тогда
		Обл   = Макет.ПолучитьОбласть("Лицевая");
		
		мНомерПЛ = уатОбщегоНазначенияТиповые.уатПолучитьНомерНаПечать(ТекущийДокумент);
		ФорматДаты = "ДФ='дд ММММ гггг'";
		
		Обл.Параметры.Номер               = мНомерПЛ;
		Обл.Параметры.ДатаВыписки         = Формат(ТекущийДокумент.Дата, ФорматДаты);
		Обл.Параметры.ТекстДействителенДо = ?(ТекущийДокумент.ДействителенДо = '00010101', "", "Действителен до: " + Формат(ТекущийДокумент.ДействителенДо, ФорматДаты));
//++ Рарус Лимаренко 01.07.2018
		//Обл.Параметры.Организация         = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(
		//ТекущийДокумент.Организация, ТекущийДокумент.ДатаЗакрытия), "ПолноеНаименование,ОГРН,ЮридическийАдрес,Телефоны");
		СведенияОЮрФизЛице = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ТекущийДокумент.Организация, ТекущийДокумент.ДатаЗакрытия);
		Обл.Параметры.Организация	= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОЮрФизЛице, "ПолноеНаименование,ОГРН,ФактическийАдрес,Телефоны"); 
//-- Рарус Лимаренко 01.07.2018
		
		Обл.Параметры.КодПоОКПО = ТекущийДокумент.Организация.КодПоОКПО;
		Обл.Параметры.МодельТС = уатОбщегоНазначения.уатПредставлениеМоделиТС(ТекущийДокумент.ТранспортноеСредство);
		Обл.Параметры.ТипТС = ТекущийДокумент.ТранспортноеСредство.Тип;
		Обл.Параметры.ТранспортноеСредствоГосНомер = ТекущийДокумент.ТранспортноеСредство.Код;
		Обл.Параметры.ТранспортноеСредствоГарНомер = ТекущийДокумент.ТранспортноеСредство.уатГаражныйНомер;
		Обл.Параметры.РежимРаботы = ТекущийДокумент.РежимРаботыТС;
		Если ТекущийДокумент.ТранспортноеСредство.уатКолонна <> Неопределено Тогда
			Обл.Параметры.Колонна = ТекущийДокумент.ТранспортноеСредство.уатКолонна.Код;
		КонецЕсли;
		Обл.Параметры.НомерПЛВТалоне = мНомерПЛ;
		Обл.Параметры.ДатаПЛВТалоне = Формат(ТекущийДокумент.Дата, ФорматДаты);
		
		мРеквизитыВодителя1 = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(ТекущийДокумент.Водитель1, ТекущийДокумент.Дата,, ТекущийДокумент.Организация);
		Обл.Параметры.Водитель1 = уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ТекущийДокумент.Водитель1, ТекущийДокумент.Дата);
		Обл.Параметры.Водитель1Расшифровка = ТекущийДокумент.Водитель1;
		Обл.Параметры.Водитель1Код 	= мРеквизитыВодителя1.ТабельныйНомер;
		
		Если ЗначениеЗаполнено(ТекущийДокумент.Водитель2) Тогда
			мРеквизитыВодителя2 = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(ТекущийДокумент.Водитель2, ТекущийДокумент.Дата,, ТекущийДокумент.Организация);
			Обл.Параметры.Водитель2 = уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ТекущийДокумент.Водитель2, ТекущийДокумент.Дата);
			Обл.Параметры.Водитель2Расшифровка = ТекущийДокумент.Водитель2;
			Обл.Параметры.Водитель2Код = мРеквизитыВодителя2.ТабельныйНомер;
		КонецЕсли;
		
		Если мРеквизитыВодителя1 <> Неопределено Тогда
			Обл.Параметры.КлассВодителя = мРеквизитыВодителя1.Класс;
		КонецЕсли;
		
		уатОбщегоНазначения.уатУдостоверениеВодителя(ТекущийДокумент.Водитель1, мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория);	
		Обл.Параметры.НомерУдостоверенияВодителя = ?(СокрЛП(мВодительскоеУдСерия)="","",СокрЛП(мВодительскоеУдСерия) + " ") + мВодительскоеУдНомер;
		
		Обл.Параметры.ЛицензионнаяКарточка = ТекущийДокумент.ТранспортноеСредство.ЛицензионнаяКарточкаВид;
		Обл.Параметры.НомерЛицензионнойКарточки = ТекущийДокумент.ТранспортноеСредство.ЛицензионнаяКарточкаРегистрационныйНомер;
		Обл.Параметры.СерияЛицензионнойКарточки = ТекущийДокумент.ТранспортноеСредство.ЛицензионнаяКарточкаСерия;
		Обл.Параметры.НомерСерииЛицензионнойКарточки = ТекущийДокумент.ТранспортноеСредство.ЛицензионнаяКарточкаНомер;
		
		СопровождающиеЛица = уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ТекущийДокумент.Сотрудник1, ТекущийДокумент.Дата);
		Если ЗначениеЗаполнено(ТекущийДокумент.Сотрудник2) Тогда
			Обл.Параметры.СопровождающиеЛица = СокрЛП(СопровождающиеЛица) +  ", " + уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ТекущийДокумент.Сотрудник2, ТекущийДокумент.Дата);
		Иначе
			Обл.Параметры.СопровождающиеЛица = СопровождающиеЛица;
		КонецЕсли;	
		
		мТекИнд = 0;
		Для мИнд = 1 по ТекущийДокумент.Прицепы.Количество() Цикл
			мПрицеп = ТекущийДокумент.Прицепы[мИнд-1].ТС;
			Если мПрицеп.уатМодель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
				мТекИнд = мТекИнд + 1;
				Если мТекИнд = 1 Тогда
					Обл.Параметры.ПрицепМодель1  = уатОбщегоНазначения.уатПредставлениеМоделиТС(мПрицеп);
					Попытка
						Обл.Параметры.ПрицепГосНомер1  = мПрицеп.Код;
						Обл.Параметры.ПрицепГарНомер1  = мПрицеп.уатГаражныйНомер;
					Исключение
					КонецПопытки;	
				ИначеЕсли мТекИнд = 2 Тогда
					Обл.Параметры.ПрицепМодель2  = уатОбщегоНазначения.уатПредставлениеМоделиТС(мПрицеп);
					Попытка
						Обл.Параметры.ПрицепГосНомер2  = мПрицеп.Код;
						Обл.Параметры.ПрицепГарНомер2  = мПрицеп.уатГаражныйНомер;
					Исключение
					КонецПопытки;	
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
		
		Обл.Параметры.ДатаВыезда_ДД = Формат(ТекущийДокумент.ДатаВыезда,"ДФ=дд");
		Обл.Параметры.ДатаВыезда_ММММ = Формат(ТекущийДокумент.ДатаВыезда,"ДФ=ММ");
		
//++ Рарус Лимаренко 01.07.2018
		//Обл.Параметры.ВремяВыезда_ЧЧ = Формат(ТекущийДокумент.ДатаВыезда,"ДФ=ЧЧ");
		//Обл.Параметры.ВремяВыезда_ММ = Формат(ТекущийДокумент.ДатаВыезда,"ДФ=мм");
		//Обл.Параметры.ДатаВозвращения_ДД = Формат(ТекущийДокумент.ДатаВозвращения,"ДФ=дд");
		//Обл.Параметры.ДатаВозвращения_ММММ = Формат(ТекущийДокумент.ДатаВозвращения,"ДФ=ММ");
		//Обл.Параметры.ВремяВозвращения_ЧЧ = Формат(ТекущийДокумент.ДатаВозвращения,"ДФ=ЧЧ");
		//Обл.Параметры.ВремяВозвращения_ММ = Формат(ТекущийДокумент.ДатаВозвращения,"ДФ=мм");
		//Обл.Параметры.НулевойПробегВыезд = ТекущийДокумент.НулевойПробегВыезда;
//-- Рарус Лимаренко 01.07.2018
		
		Если ФлагПечати = 5 Или ФлагПечати = 4  Тогда
			 Обл.Параметры.НулевойПробегВозврат = ТекущийДокумент.НулевойПробегВозвращения;
			 Обл.Параметры.СпидометрВозврата = ТекущийДокумент.СпидометрВозвращения;
		КонецЕсли;
		
		Если ТекущийДокумент.ВыдатьКоличествоГорючего > 0 Тогда
			Обл.Параметры.ВыдатьГорючее = ТекущийДокумент.ВыдатьГорючее;
			Обл.Параметры.ВыдатьКоличествоГорючего = ТекущийДокумент.ВыдатьКоличествоГорючего;
		КонецЕсли;
		
//++ Рарус Лимаренко 01.07.2018
		//Обл.Параметры.СпидометрВыезда = ТекущийДокумент.СпидометрВыезда;
//-- Рарус Лимаренко 01.07.2018
		

		
		Для Каждого ТекСтрока из ТекущийДокумент.РасходГСМ Цикл
			Если ТекСтрока.ТС = ТекущийДокумент.ТранспортноеСредство Тогда
				Если ТекСтрока.ГСМ = ТекСтрока.ТС.уатМодель.ОсновноеТопливо Тогда
					Обл.Параметры.ГСМ1	= ТекСтрока.ГСМ;
//++ Рарус Лимаренко 01.07.2018
					//Обл.Параметры.ОстатокПриВыезде1	= ТекСтрока.ОстатокПриВыезде;
//-- Рарус Лимаренко 01.07.2018
					
					Обл.Параметры.ВыданоГСМ1 = ТекСтрока.Выдано;
					Если ФлагПечати = 5 Или ФлагПечати = 4  Тогда
						Обл.Параметры.ОстатокПриВозвращении1 = ТекСтрока.ОстатокПриВозвращении;
						Обл.Параметры.СданоГСМ1 = ТекСтрока.Сдано;
					КонецЕсли;
				Иначе
					ГруппаГСМ = уатОбщегоНазначения.уатПрочитатьРеквизитГСМ(ТекСтрока.ГСМ,"ГруппаГСМ");
					Если ГруппаГСМ = Перечисления.уатГруппыГСМ.Топливо Тогда  
						Обл.Параметры.ГСМ2	= ТекСтрока.ГСМ;
						Обл.Параметры.ОстатокПриВыезде2	= ТекСтрока.ОстатокПриВыезде;
						Обл.Параметры.ВыданоГСМ2 = ТекСтрока.Выдано;
						Если ФлагПечати = 5 Или ФлагПечати = 4  Тогда
							Обл.Параметры.ОстатокПриВозвращении2 = ТекСтрока.ОстатокПриВозвращении;
							Обл.Параметры.СданоГСМ2 = ТекСтрока.Сдано;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Обл.Параметры.ВыдалДиспетчер  = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.ВыдалДиспетчер.ФизическоеЛицо);
		Обл.Параметры.ВыпустилМеханик = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.ВыпустилМеханик.ФизическоеЛицо);
		Обл.Параметры.ПринялМеханик   = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.ПринялМеханик.ФизическоеЛицо);
		Обл.Параметры.ВодительСдал    = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.Водитель1.ФизическоеЛицо);
		Обл.Параметры.ВодительПринял  = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.Водитель1.ФизическоеЛицо);
		Обл.Параметры.ОсмотрелВрач    = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.ОсмотрелВрач.ФизическоеЛицо);
		
		Для Каждого ТекСтрока Из ТекущийДокумент.Задание Цикл
			ТекИндекс = ТекущийДокумент.Задание.Индекс(ТекСтрока) + 1;
			
			Если ТекИндекс > мМаксСтрок Тогда
				Прервать;
			КонецЕсли;
			
			стрОбласть = "ВРаспоряжение" + Строка(ТекИндекс);
			Если ЗначениеЗаполнено(ТекСтрока.Контрагент) Тогда
				Обл.Область(стрОбласть).Текст	= ТекСтрока.Контрагент.НаименованиеПолное;
			ИначеЕсли ЗначениеЗаполнено(ТекСтрока.Подразделение) Тогда
				Обл.Область(стрОбласть).Текст	= ТекСтрока.Подразделение.Наименование;
			КонецЕсли;
			Обл.Область(стрОбласть).Текст	= Обл.Область(стрОбласть).Текст + ?(ПредставлениеАдреса(ТекСтрока.АдресПрибытия) = "", "", ", " + ПредставлениеАдреса(ТекСтрока.АдресПрибытия));
			стрОбласть = "ВремяПрибытия" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.ВремяПрибытия, ?(ТекСтрока.ВремяПрибытия - НачалоДня(ТекСтрока.ВремяПрибытия) = 0, "ДФ=dd.MM.yyyy", "ДФ='dd.MM.yyyy ЧЧ:мм'"));
			стрОбласть = "ВремяУбытия" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.ВремяУбытия, ?(ТекСтрока.ВремяУбытия - НачалоДня(ТекСтрока.ВремяУбытия) = 0, "ДФ=dd.MM.yyyy", "ДФ='dd.MM.yyyy ЧЧ:мм'"));
			стрОбласть = "КоличествоЕздок" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = ?(ТекСтрока.КоличествоЕздок = 0, "",ТекСтрока.КоличествоЕздок);
			стрОбласть = "КоличествоЧасов" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = ?(ТекСтрока.КоличествоЧасов = 0, "",Формат(ТекСтрока.КоличествоЧасов, "ЧДЦ=2; ЧРД=:"));
		КонецЦикла;
		
		Если ФлагПечати = 5 Или ФлагПечати = 4  Тогда
			Сч = 0;
			Для Каждого ТекСтрока Из ТекущийДокумент.Задание Цикл 
				Если Сч = 2 Тогда
					Прервать;
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекСтрока.Контрагент) И ТекСтрока.Выполнено Тогда
					Сч = Сч + 1;
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекСтрока.Контрагент) И ТекСтрока.Выполнено и Сч = 1 Тогда
					Обл.Параметры.Талон1ВремяВРаботе  = ?(ТекСтрока.КоличествоЧасов = 0, "", Формат(ТекСтрока.КоличествоЧасов, "ЧДЦ=2; ЧРД=:"));
					Обл.Параметры.Талон1Ездки         = ТекСтрока.КоличествоЕздок;
					Обл.Параметры.Талон1ПробегОбщий   = (ТекСтрока.КоличествоКмГруз + ТекСтрока.КоличествоКмПорожний) * ТекСтрока.КоличествоЕздок;
					Обл.Параметры.Талон1ПробегСГрузом = ТекСтрока.КоличествоКмГруз * ТекСтрока.КоличествоЕздок;
					Обл.Параметры.Талон1ВесГруза      = ТекСтрока.КоличествоТонн;
					Обл.Параметры.Талон1ТКМ           = ТекСтрока.КоличествоТонн * ТекСтрока.КоличествоКмГруз * ТекСтрока.КоличествоЕздок;
					
				ИначеЕсли ЗначениеЗаполнено(ТекСтрока.Контрагент) И ТекСтрока.Выполнено и Сч = 2 Тогда
					Обл.Параметры.Талон2ВремяВРаботе  = ?(ТекСтрока.КоличествоЧасов = 0, "", Формат(ТекСтрока.КоличествоЧасов, "ЧДЦ=2; ЧРД=:"));
					Обл.Параметры.Талон2Ездки         = ТекСтрока.КоличествоЕздок;
					Обл.Параметры.Талон2ПробегОбщий   = (ТекСтрока.КоличествоКмГруз + ТекСтрока.КоличествоКмПорожний)*ТекСтрока.КоличествоЕздок;
					Обл.Параметры.Талон2ПробегСГрузом = ТекСтрока.КоличествоКмГруз *ТекСтрока.КоличествоЕздок;
					Обл.Параметры.Талон2ВесГруза      = ТекСтрока.КоличествоТонн;
					Обл.Параметры.Талон2ТКМ           = ТекСтрока.КоличествоТонн * ТекСтрока.КоличествоКмГруз * ТекСтрока.КоличествоЕздок;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ТабДокумент.Вывести(Обл);
	КонецЕсли;
	
	Если ФлагПечати = 0 Или ФлагПечати = 4 Тогда	//Новая страница для печати полного пут. листа
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	//печатаем обратную сторону п/л
	Если ФлагПечати <> 1 И ФлагПечати <> 5 Тогда

		Обл   = Макет.ПолучитьОбласть("Оборотная");
		
		Обл.Параметры.Организация  		= ТекущийДокумент.Организация;
		Обл.Параметры.МодельТС  		= уатОбщегоНазначения.уатПредставлениеМоделиТС(ТекущийДокумент.ТранспортноеСредство);
		Обл.Параметры.ТранспортноеСредствоГосНомер	= ТекущийДокумент.ТранспортноеСредство.Код;
		
		Если ФлагПечати = 3 Или ФлагПечати = 4 Тогда
			
			ТТДПЛ = уатОбщегоНазначения.уатТТДДляПЛ(ТекущийДокумент);
			
			Для Каждого ТекСтрока из ТекущийДокумент.Простои Цикл
				
				ТекИндекс = ТекущийДокумент.Простои.Индекс(ТекСтрока) + 1;
				
				Если ТекИндекс > мМаксСтрокПростоя Тогда
					Прервать;
				КонецЕсли;
				
				стрОбласть = "Видпростоя" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = ТекСтрока.ВидПростоя;
				стрОбласть = "Начало" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.НачалоПростоя,"ДФ='dd.MM.yyyy HH.mm'");
				стрОбласть = "Окончание" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.КонецПростоя,"ДФ='dd.MM.yyyy HH.mm'");
			КонецЦикла;
			
			ВыработкаТС = ТекущийДокумент.ВыработкаТС;
			ВремяВработе = ВыработкаТС.Найти(Справочники.уатПараметрыВыработки.ВремяВРаботе,"ПараметрВыработки");
			Сч = 0;
			Для Каждого ТекСтрока Из ТекущийДокумент.Задание Цикл 
				Если Сч = 2 Тогда
					Прервать;
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекСтрока.Контрагент) И ТекСтрока.Выполнено Тогда
					Сч = Сч + 1;
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекСтрока.Контрагент) И ТекСтрока.Выполнено и Сч = 1 Тогда
					Если ЗначениеЗаполнено(ТекСтрока.Прицеп1) И ТекСтрока.Прицеп1.уатВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
						Обл.Параметры.ПрицепМодель1  = уатОбщегоНазначения.уатПредставлениеМоделиТС(ТекСтрока.Прицеп1);
						Попытка
							Обл.Параметры.ПрицепГосНомер1  = ТекСтрока.Прицеп1.Код;
						Исключение
						КонецПопытки;
					Иначе
						Если ЗначениеЗаполнено(ТекСтрока.Прицеп2) И ТекСтрока.Прицеп2.уатВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
							Обл.Параметры.ПрицепМодель1  = уатОбщегоНазначения.уатПредставлениеМоделиТС(ТекСтрока.Прицеп2);
							Попытка
								Обл.Параметры.ПрицепГосНомер1  = ТекСтрока.Прицеп2.Код;
							Исключение
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;
					
					Отбор = Новый Структура("Контрагент",ТекСтрока.Контрагент);
					МассивТТД = ТТДПЛ.НайтиСтроки(Отбор);
					КоличествоТТД = МассивТТД.Количество();
					Обл.Параметры.Заказчик1КоличествоТТД = КоличествоТТД;
					СтрокаТТД = "";
					СчТТД = 0;
					Для Каждого ТекСтрокаТТД из МассивТТД Цикл
						СчТТД = СчТТД + 1;
						СтрокаТТД = СтрокаТТД + ТекСтрокаТТД.Номер;
						Если СчТТД <> КоличествоТТД Тогда
							СтрокаТТД = СтрокаТТД + ", ";
						КонецЕсли;
					КонецЦикла;
					Обл.Параметры.Заказчик1ТТД = СтрокаТТД;
					Если ВремяВработе <> Неопределено Тогда
						Обл.Параметры.Талон1ВремяВРаботе = Формат(уатОбщегоНазначения.уатВремяВЧЧ_ММ(ВремяВработе.Количество),"ЧДЦ=2; ЧРД=:");
					КонецЕсли;
					Обл.Параметры.Талон1Ездки = ТекСтрока.КоличествоЕздок;
					Обл.Параметры.Талон1ПробегОбщий = (ТекСтрока.КоличествоКмГруз + ТекСтрока.КоличествоКмПорожний) *ТекСтрока.КоличествоЕздок;
					Обл.Параметры.Талон1ПробегСГрузом = ТекСтрока.КоличествоКмГруз * ТекСтрока.КоличествоЕздок;
					Обл.Параметры.Талон1ВесГруза = ТекСтрока.КоличествоТонн;
					Обл.Параметры.Талон1ТКМ = ТекСтрока.КоличествоТонн * ТекСтрока.КоличествоКмГруз * ТекСтрока.КоличествоЕздок;
					Обл.Параметры.ПервыйЗаказчик = ТекСтрока.Контрагент.НаименованиеПолное;
					Обл.Параметры.Заказчик1Прибытие = Формат(ТекСтрока.ВремяПрибытия,"ДФ='dd.MM.yyyy HH mm'");
					Обл.Параметры.Заказчик1Убытие = Формат(ТекСтрока.ВремяУбытия,"ДФ='dd.MM.yyyy HH mm'");
					Если ЗначениеЗаполнено(ТекСтрока.Маршрут) Тогда
						Обл.Параметры.Заказчик1Маршрут = ТекСтрока.Маршрут;
					Иначе
						Обл.Параметры.Заказчик1Маршрут = ПредставлениеАдреса(ТекСтрока.АдресПрибытия) + " - " + ПредставлениеАдреса(ТекСтрока.АдресУбытия);
					КонецЕсли;
					Обл.Параметры.Заказчик1КоличествоЕздок = ТекСтрока.КоличествоЕздок;
				ИначеЕсли ЗначениеЗаполнено(ТекСтрока.Контрагент) И ТекСтрока.Выполнено и Сч = 2 Тогда
					
					Если ЗначениеЗаполнено(ТекСтрока.Прицеп1)  И ТекСтрока.Прицеп1.уатВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
						Обл.Параметры.ПрицепМодель2  = уатОбщегоНазначения.уатПредставлениеМоделиТС(ТекСтрока.Прицеп1);
						Попытка
							Обл.Параметры.ПрицепГосНомер2  = ТекСтрока.Прицеп1.Код;
						Исключение
						КонецПопытки;
					Иначе
						Если ЗначениеЗаполнено(ТекСтрока.Прицеп2)  И ТекСтрока.Прицеп2.уатВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
							Обл.Параметры.ПрицепМодель2  = уатОбщегоНазначения.уатПредставлениеМоделиТС(ТекСтрока.Прицеп2);
							Попытка
								Обл.Параметры.ПрицепГосНомер2  = ТекСтрока.Прицеп2.Код;
							Исключение
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;
					
					Отбор = Новый Структура("Контрагент",ТекСтрока.Контрагент);
					МассивТТД = ТТДПЛ.НайтиСтроки(Отбор);
					КоличествоТТД = МассивТТД.Количество();
					Обл.Параметры.Заказчик2КоличествоТТД = КоличествоТТД;
					СтрокаТТД = "";
					СчТТД = 0;
					Для Каждого ТекСтрокаТТД из МассивТТД Цикл
						СчТТД = СчТТД + 1;
						СтрокаТТД = СтрокаТТД + ТекСтрокаТТД.Номер;
						Если СчТТД <> КоличествоТТД Тогда
							СтрокаТТД = СтрокаТТД + ", ";
						КонецЕсли;
					КонецЦикла;
					
					Обл.Параметры.Заказчик2ТТД = СтрокаТТД;
					
					Если ВремяВработе <> Неопределено Тогда
						Обл.Параметры.Талон2ВремяВРаботе = Формат(уатОбщегоНазначения.уатВремяВЧЧ_ММ(ВремяВработе.Количество),"ЧДЦ=2; ЧРД=:");
					КонецЕсли;
					Обл.Параметры.Талон2Ездки = ТекСтрока.КоличествоЕздок;
					Обл.Параметры.Талон2ПробегОбщий = (ТекСтрока.КоличествоКмГруз + ТекСтрока.КоличествоКмПорожний)*ТекСтрока.КоличествоЕздок;
					Обл.Параметры.Талон2ПробегСГрузом = ТекСтрока.КоличествоКмГруз * ТекСтрока.КоличествоЕздок;
					Обл.Параметры.Талон2ВесГруза = ТекСтрока.КоличествоТонн;
					Обл.Параметры.Талон2ТКМ = ТекСтрока.КоличествоТонн * ТекСтрока.КоличествоКмГруз * ТекСтрока.КоличествоЕздок;
					Обл.Параметры.ВторойЗаказчик = ТекСтрока.Контрагент.НаименованиеПолное;
					Обл.Параметры.Заказчик2Прибытие = Формат(ТекСтрока.ВремяПрибытия,"ДФ='dd.MM.yyyy HH mm'");
					Обл.Параметры.Заказчик2Убытие = Формат(ТекСтрока.ВремяУбытия,"ДФ='dd.MM.yyyy HH mm'");
					Если ЗначениеЗаполнено(ТекСтрока.Маршрут) Тогда
						Обл.Параметры.Заказчик2Маршрут = ТекСтрока.Маршрут;
					Иначе
						Обл.Параметры.Заказчик2Маршрут = ПредставлениеАдреса(ТекСтрока.АдресПрибытия) + " - " + ПредставлениеАдреса(ТекСтрока.АдресУбытия);
					КонецЕсли;
					Обл.Параметры.Заказчик2КоличествоЕздок = ТекСтрока.КоличествоЕздок;	
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТекСтрока из ТекущийДокумент.РасходГСМ Цикл
				Если ТекСтрока.ТС = ТекущийДокумент.ТранспортноеСредство Тогда
					Если ТекСтрока.ГСМ = ТекСтрока.ТС.уатМодель.ОсновноеТопливо Тогда
						Обл.Параметры.ГСМ1	= ТекСтрока.ГСМ;
						Обл.Параметры.РасходПоНорме1	= ТекСтрока.РасходПоНорме;
						Обл.Параметры.РасходПоФакту1 = ТекСтрока.РасходПоФакту;
					Иначе
						Обл.Параметры.ГСМ2	= ТекСтрока.ГСМ;
						Обл.Параметры.РасходПоНорме2	= ТекСтрока.РасходПоНорме;
						Обл.Параметры.РасходПоФакту2 = ТекСтрока.РасходПоФакту;
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;	
			
		КонецЕсли;

		ТабДокумент.Вывести(Обл);
		
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьПлатежногоПоручения()

// Формирует печатную форму путевых листов ПГ-1
//
// Параметры:
//  ИмяМакета - табличный документ
//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
Функция уатПечать_ПГ1(ТекущийДокумент, ИмяМакета, ФлагПечати="") Экспорт
	
	Возврат уатПечать_ПЛ1(ТекущийДокумент, ИмяМакета, ФлагПечати);
	
КонецФункции

// Формирует печатную форму путевых листов ПА-1
//
// Параметры:
//  ИмяМакета - табличный документ
//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
Функция уатПечать_ПА1(ТекущийДокумент, ИмяМакета, ФлагПечати="") Экспорт
	
	Возврат уатПечать_ПЛ1(ТекущийДокумент, ИмяМакета, ФлагПечати);
	
КонецФункции

Функция ПечататьЛицСторону(МассивОбъектов, ОбъектыПечати) Экспорт
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ПутевойЛист";
	
	ПервыйДокумент = Истина;
	флИспользованиеШК = Константы.уатИспользоватьШтрихкодированиеПутевыхЛистов.Получить();
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		//начало формирования типовой печатной формы
		ИмяМакета = ТекущийДокумент.ВидПЛ.Метаданные().ЗначенияПеречисления[Перечисления.уатВидыПЛ.Индекс(ТекущийДокумент.ВидПЛ)].Имя;
		Если (ИмяМакета = "_ЭСМ1") Или (ИмяМакета = "_ЭСМ3") Тогда
			ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ТекущийДокумент, ""уат"" + Сред(ИмяМакета,2,4), 1)";
		ИначеЕсли (ИмяМакета = "_4")  Или (ИмяМакета = "_6") Тогда
			ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ТекущийДокумент, ИмяМакета + ""_пп"", 1)";
		ИначеЕсли (ИмяМакета = "_412_АПК") Тогда
			ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ТекущийДокумент,ИмяМакета, 1)";
		Иначе
			ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ТекущийДокумент, ИмяМакета, 1)";
		КонецЕсли;
		ИмяМакета = "ПФ_MXL" + ИмяМакета;
		ТабДокумент = Вычислить(ИмяФункцииПечати);
		//конец формирования типовой печатной формы
		
		//печать штрихкодов
		Если флИспользованиеШК = ИСТИНА Тогда
			уатЗащищенныеФункцииСервер_проф.ОтобразитьШКнаПФ(ТабДокумент, ТекущийДокумент);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ТабДокумент);
		
		ТабличныйДокумент.ПолеСлева = 0;
		ТабличныйДокумент.ПолеСправа = 0;
		ТабличныйДокумент.ПолеСверху = 0;
		ТабличныйДокумент.ПолеСнизу = 0;
		//ТабличныйДокумент.ИмяПараметровПечати = "ПутевойЛист";
		
		Если ИмяМакета = "ПФ_MXL_3" ИЛИ ИмяМакета = "ПФ_MXL_ПЛ1"
			ИЛИ ИмяМакета = "ПФ_MXL_ПГ1" ИЛИ ИмяМакета = "ПФ_MXL_ПА1" Тогда
			
			ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		Иначе
			ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		КонецЕсли;
		
		ТабличныйДокумент.ОтображатьСетку = Ложь;
		ТабличныйДокумент.Защита = Ложь;
		ТабличныйДокумент.ТолькоПросмотр = Ложь;
		ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
КонецФункции

Функция ПечататьЛицСторонуПолная(МассивОбъектов, ОбъектыПечати) Экспорт
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ПутевойЛист";
	
	ПервыйДокумент = Истина;
	флИспользованиеШК = Константы.уатИспользоватьШтрихкодированиеПутевыхЛистов.Получить();
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		//начало формирования типовой печатной формы
		ИмяМакета = ТекущийДокумент.ВидПЛ.Метаданные().ЗначенияПеречисления[Перечисления.уатВидыПЛ.Индекс(ТекущийДокумент.ВидПЛ)].Имя;
		Если (ИмяМакета = "_ЭСМ1") Или (ИмяМакета = "_ЭСМ3") Тогда
			ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ТекущийДокумент,""уат""+сред(ИмяМакета,2,4), 5)";
		ИначеЕсли (ИмяМакета = "_4")  Или (ИмяМакета = "_6") Тогда
			ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ТекущийДокумент,ИмяМакета + ""_пп"", 5)";
		Иначе
			ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ТекущийДокумент,ИмяМакета, 5)";
		КонецЕсли;
		ИмяМакета = "ПФ_MXL" + ИмяМакета;
		ТабДокумент = Вычислить(ИмяФункцииПечати);
		//конец формирования типовой печатной формы
		
		//печать штрихкодов
		Если флИспользованиеШК = ИСТИНА Тогда
			уатЗащищенныеФункцииСервер_проф.ОтобразитьШКнаПФ(ТабДокумент, ТекущийДокумент);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ТабДокумент);
		
		ТабличныйДокумент.ПолеСлева = 0;
		ТабличныйДокумент.ПолеСправа = 0;
		ТабличныйДокумент.ПолеСверху = 0;
		ТабличныйДокумент.ПолеСнизу = 0;
		//ТабличныйДокумент.ИмяПараметровПечати = "ПутевойЛист";
		
		Если ИмяМакета = "ПФ_MXL_3" ИЛИ ИмяМакета = "ПФ_MXL_ПЛ1"
			ИЛИ ИмяМакета = "ПФ_MXL_ПГ1" ИЛИ ИмяМакета = "ПФ_MXL_ПА1" Тогда
			
			ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		Иначе
			ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		КонецЕсли;
		
		ТабличныйДокумент.ОтображатьСетку = Ложь;
		ТабличныйДокумент.Защита = Ложь;
		ТабличныйДокумент.ТолькоПросмотр = Ложь;
		ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
КонецФункции

Функция ПечататьОбрСторону(МассивОбъектов, ОбъектыПечати) Экспорт
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ПутевойЛист";
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		//начало формирования типовой печатной формы
		ИмяМакета = ТекущийДокумент.ВидПЛ.Метаданные().ЗначенияПеречисления[Перечисления.уатВидыПЛ.Индекс(ТекущийДокумент.ВидПЛ)].Имя;
		Если (ИмяМакета = "_ЭСМ1") Или (ИмяМакета = "_ЭСМ3") Тогда
			ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ТекущийДокумент,""уат""+сред(ИмяМакета,2,4), 2)";
		ИначеЕсли (ИмяМакета = "_4")  Или (ИмяМакета = "_6") Тогда
			ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ТекущийДокумент,ИмяМакета + ""_пп"", 2)";
		ИначеЕсли (ИмяМакета = "_412_АПК") Тогда
			ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ТекущийДокумент,ИмяМакета, 2)";
		Иначе	
			ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ТекущийДокумент,ИмяМакета, 2)";
		КонецЕсли;
		ИмяМакета = "ПФ_MXL" + ИмяМакета;
		ТабДокумент = Вычислить(ИмяФункцииПечати);
		//конец формирования типовой печатной формы
		
		ТабличныйДокумент.Вывести(ТабДокумент);
		
		ТабличныйДокумент.ПолеСлева = 0;
		ТабличныйДокумент.ПолеСправа = 0;
		ТабличныйДокумент.ПолеСверху = 0;
		ТабличныйДокумент.ПолеСнизу = 0;
		//ТабличныйДокумент.ИмяПараметровПечати = "ПутевойЛист";
		
		Если ИмяМакета = "ПФ_MXL_3" ИЛИ ИмяМакета = "ПФ_MXL_ПЛ1"
			ИЛИ ИмяМакета = "ПФ_MXL_ПГ1" ИЛИ ИмяМакета = "ПФ_MXL_ПА1" Тогда
			
			ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		Иначе
			ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		КонецЕсли;
		
		ТабличныйДокумент.ОтображатьСетку = Ложь;
		ТабличныйДокумент.Защита = Ложь;
		ТабличныйДокумент.ТолькоПросмотр = Ложь;
		ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
КонецФункции

Функция ПечататьОбрСторонуПолная(МассивОбъектов, ОбъектыПечати) Экспорт
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ПутевойЛист";
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		//начало формирования типовой печатной формы
		ИмяМакета = ТекущийДокумент.ВидПЛ.Метаданные().ЗначенияПеречисления[Перечисления.уатВидыПЛ.Индекс(ТекущийДокумент.ВидПЛ)].Имя;
		Если (ИмяМакета = "_ЭСМ1") Или (ИмяМакета = "_ЭСМ3") Тогда
			ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ТекущийДокумент,""уат""+сред(ИмяМакета,2,4), 3)";
		ИначеЕсли (ИмяМакета = "_4")  Или (ИмяМакета = "_6") Тогда
			ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ТекущийДокумент,ИмяМакета + ""_пп"", 3)";
		Иначе	
			ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ТекущийДокумент,ИмяМакета, 3)";
		КонецЕсли;
		ИмяМакета = "ПФ_MXL" + ИмяМакета;
		ТабДокумент = Вычислить(ИмяФункцииПечати);
		//конец формирования типовой печатной формы
		
		ТабличныйДокумент.Вывести(ТабДокумент);
		
		ТабличныйДокумент.ПолеСлева = 0;
		ТабличныйДокумент.ПолеСправа = 0;
		ТабличныйДокумент.ПолеСверху = 0;
		ТабличныйДокумент.ПолеСнизу = 0;
		//ТабличныйДокумент.ИмяПараметровПечати = "ПутевойЛист";
		
		Если ИмяМакета = "ПФ_MXL_3" ИЛИ ИмяМакета = "ПФ_MXL_ПЛ1"
			ИЛИ ИмяМакета = "ПФ_MXL_ПГ1" ИЛИ ИмяМакета = "ПФ_MXL_ПА1" Тогда
			
			ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		Иначе
			ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		КонецЕсли;
		
		ТабличныйДокумент.ОтображатьСетку = Ложь;
		ТабличныйДокумент.Защита = Ложь;
		ТабличныйДокумент.ТолькоПросмотр = Ложь;
		ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
КонецФункции

Функция ПечатьВесьДокумент(МассивОбъектов, ОбъектыПечати) Экспорт
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ПутевойЛист";
	
	ПервыйДокумент = Истина;
	флИспользованиеШК = Константы.уатИспользоватьШтрихкодированиеПутевыхЛистов.Получить();
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		//начало формирования типовой печатной формы
		ИмяМакета = ТекущийДокумент.ВидПЛ.Метаданные().ЗначенияПеречисления[Перечисления.уатВидыПЛ.Индекс(ТекущийДокумент.ВидПЛ)].Имя;
		Если (ИмяМакета = "_ЭСМ1") Или (ИмяМакета = "_ЭСМ3") Тогда
			ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ТекущийДокумент,""уат""+сред(ИмяМакета,2,4), 0)";
		ИначеЕсли (ИмяМакета = "_4")  Или (ИмяМакета = "_6") Тогда
			ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ТекущийДокумент,ИмяМакета + ""_пп"", 0)";
		ИначеЕсли (ИмяМакета = "_412_АПК") Тогда
			ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ТекущийДокумент,ИмяМакета, 0)";
		Иначе	
			ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ТекущийДокумент,ИмяМакета, 0)";
		КонецЕсли;
		ИмяМакета = "ПФ_MXL" + ИмяМакета;
		ТабДокумент = Вычислить(ИмяФункцииПечати);
		//конец формирования типовой печатной формы
		
		//печать штрихкодов
		Если флИспользованиеШК = ИСТИНА Тогда
			уатЗащищенныеФункцииСервер_проф.ОтобразитьШКнаПФ(ТабДокумент, ТекущийДокумент);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ТабДокумент);
		
		ТабличныйДокумент.ПолеСлева = 0;
		ТабличныйДокумент.ПолеСправа = 0;
		ТабличныйДокумент.ПолеСверху = 0;
		ТабличныйДокумент.ПолеСнизу = 0;
		//ТабличныйДокумент.ИмяПараметровПечати = "ПутевойЛист";
		
		Если ИмяМакета = "ПФ_MXL_3" ИЛИ ИмяМакета = "ПФ_MXL_ПЛ1"
			ИЛИ ИмяМакета = "ПФ_MXL_ПГ1" ИЛИ ИмяМакета = "ПФ_MXL_ПА1" Тогда
			
			ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		Иначе
			ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		КонецЕсли;
		
		ТабличныйДокумент.ОтображатьСетку = Ложь;
		ТабличныйДокумент.Защита = Ложь;
		ТабличныйДокумент.ТолькоПросмотр = Ложь;
		ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
КонецФункции

Функция ПечатьВесьДокументПолная(МассивОбъектов, ОбъектыПечати) Экспорт
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ПутевойЛист";
	
	ПервыйДокумент = Истина;
	флИспользованиеШК = Константы.уатИспользоватьШтрихкодированиеПутевыхЛистов.Получить();
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		//начало формирования типовой печатной формы
		ИмяМакета = ТекущийДокумент.ВидПЛ.Метаданные().ЗначенияПеречисления[Перечисления.уатВидыПЛ.Индекс(ТекущийДокумент.ВидПЛ)].Имя;
		Если (ИмяМакета = "_ЭСМ1") Или (ИмяМакета = "_ЭСМ3") Тогда
			ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ТекущийДокумент,""уат""+сред(ИмяМакета,2,4), 4)";
		ИначеЕсли (ИмяМакета = "_4")  Или (ИмяМакета = "_6") Тогда
			ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ТекущийДокумент,ИмяМакета + ""_пп"", 4)";
		Иначе	
			ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ТекущийДокумент,ИмяМакета, 4)";
		КонецЕсли;
		ИмяМакета = "ПФ_MXL" + ИмяМакета;
		ТабДокумент = Вычислить(ИмяФункцииПечати);
		//конец формирования типовой печатной формы
		
		//печать штрихкодов
		Если флИспользованиеШК = ИСТИНА Тогда
			уатЗащищенныеФункцииСервер_проф.ОтобразитьШКнаПФ(ТабДокумент, ТекущийДокумент);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ТабДокумент);
		
		ТабличныйДокумент.ПолеСлева = 0;
		ТабличныйДокумент.ПолеСправа = 0;
		ТабличныйДокумент.ПолеСверху = 0;
		ТабличныйДокумент.ПолеСнизу = 0;
		//ТабличныйДокумент.ИмяПараметровПечати = "ПутевойЛист";
		
		Если ИмяМакета = "ПФ_MXL_3" ИЛИ ИмяМакета = "ПФ_MXL_ПЛ1"
			ИЛИ ИмяМакета = "ПФ_MXL_ПГ1" ИЛИ ИмяМакета = "ПФ_MXL_ПА1" Тогда
			
			ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		Иначе
			ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		КонецЕсли;
		
		ТабличныйДокумент.ОтображатьСетку = Ложь;
		ТабличныйДокумент.Защита = Ложь;
		ТабличныйДокумент.ТолькоПросмотр = Ложь;
		ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
КонецФункции

// Формирует печатную форму путевых листов 6 автобусов
//
// Параметры:
//  ИмяМакета - табличный документ
//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
Функция уатПечать_6(ТекущийДокумент, ИмяМакета, ФлагПечати="") Экспорт
	Возврат уатЗащищенныеФункцииСервер_проф.уатПечать_6(ТекущийДокумент, ИмяМакета, ФлагПечати);
КонецФункции // уатПечать_6()

// Формирует печатную форму путевых листов ЭСМ7
//
// Параметры:
//  ИмяМакета - табличный документ
//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
Функция уатПечатьЭСМ7(МассивОбъектов, ОбъектыПечати) Экспорт
	Возврат уатЗащищенныеФункцииСервер_проф.уатПечать_уатЭСМ7(МассивОбъектов, ОбъектыПечати);
КонецФункции // уатПечатьЭСМ7()

// Формирует печатную форму путевых листов Автокрана
//
// Параметры:
//  ИмяМакета - табличный документ
//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
Функция уатПечатьАвтокран(МассивОбъектов, ОбъектыПечати) Экспорт
	Возврат уатЗащищенныеФункцииСервер_проф.уатПечать_уатАвтокран(МассивОбъектов, ОбъектыПечати);
КонецФункции // уатПечатьАвтокран()

// Формирует печатную форму путевых листов
//
// Параметры:
//  ИмяМакета - табличный документ
//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
Функция уатПечать_ЭСМ1(ТекущийДокумент, ИмяМакета, ФлагПечати="") Экспорт
	Возврат уатЗащищенныеФункцииСервер_проф.уатПечать_ЭСМ1(ТекущийДокумент, ИмяМакета, ФлагПечати);
КонецФункции // уатПечать_ЭСМ1()

// Формирует печатную форму путевых листов
//
// Параметры:
//  ИмяМакета - табличный документ
//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
Функция уатПечать_ЭСМ3(ТекущийДокумент, ИмяМакета, ФлагПечати="") Экспорт
	Возврат уатЗащищенныеФункцииСервер_проф.уатПечать_ЭСМ3(ТекущийДокумент, ИмяМакета, ФлагПечати);
КонецФункции // уатПечать_ЭСМ3()

 //Формирует печатную форму путевых листов
 //Параметры:
 // ИмяМакета - табличный документ
 // ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
Функция уатПечать_412_АПК(ТекущийДокумент, ИмяМакета, ФлагПечати="") Экспорт
	Возврат уатЗащищенныеФункцииСервер_проф.уатПечать_412(ТекущийДокумент, ИмяМакета,  ФлагПечати); 
КонецФункции // уатПечать_412АПК()

#КонецОбласти

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//Проверка закрепления сотрудника за организацией
//
Функция СотрудникЗакрепленЗаОрганизацией(Сотрудник, Организация, ДатаСреза)
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТекущиеКадровыеДанныеСотрудников.Сотрудник
	|ИЗ
	|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|ГДЕ
	|	ТекущиеКадровыеДанныеСотрудников.Сотрудник = &Сотрудник
	|	И ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = &Организация
	|	И (ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = NULL
	|	ИЛИ ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения ЕСТЬ NULL
	|	ИЛИ ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1,1,1)
	|	ИЛИ ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения > &ТекДата)");
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТекДата", ДатаСреза);
	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции

// Процедура пересекает исходный интервал таблицей интервалов.
//При этом исходный интервал может изменяться: вырезаться начало/конец/середина интервала, либо полностью замещаться
//
Процедура ПересечениеИнтервалов(ИсходныйИнтервал, тблПересечения, тблРабочееВремя, флОбед = Ложь)
	Для Каждого ТекПересечение Из тблПересечения Цикл
		Если НЕ ЗначениеЗаполнено(ТекПересечение.Начало) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекПересечение.Начало >= ИсходныйИнтервал.Начало И ТекПересечение.Начало <= ИсходныйИнтервал.Конец
			И ТекПересечение.Конец >= ИсходныйИнтервал.Конец Тогда //интервал пересечения срезает конец рабочего интервала
			ИсходныйИнтервал.Конец = ТекПересечение.Начало;
			ИсходныйИнтервал.Продолжительность = ИсходныйИнтервал.Конец - ИсходныйИнтервал.Начало;
		ИначеЕсли ТекПересечение.Начало <= ИсходныйИнтервал.Начало И ТекПересечение.Конец <= ИсходныйИнтервал.Конец
			И ТекПересечение.Конец >= ИсходныйИнтервал.Начало Тогда //интервал пересечения срезает начало рабочего интервала
			ИсходныйИнтервал.Начало = ТекПересечение.Конец;
			ИсходныйИнтервал.Продолжительность = ИсходныйИнтервал.Конец - ИсходныйИнтервал.Начало;
		ИначеЕсли ИсходныйИнтервал.Начало >= ТекПересечение.Начало И ИсходныйИнтервал.Конец <= ТекПересечение.Конец Тогда //рабочий интервал внутри интервала пересечения
			ИсходныйИнтервал.Начало = Неопределено;
			ИсходныйИнтервал.Конец = Неопределено;
			ИсходныйИнтервал.Продолжительность = 0;
		ИначеЕсли ИсходныйИнтервал.Начало <= ТекПересечение.Начало И ИсходныйИнтервал.Конец >= ТекПересечение.Конец Тогда //интервал пересечения внутри рабочего интервала
			КонецИсхВрем = ИсходныйИнтервал.Конец;
			ИсходныйИнтервал.Конец = ТекПересечение.Начало;
			ИсходныйИнтервал.Продолжительность = ИсходныйИнтервал.Конец - ИсходныйИнтервал.Начало;
			НовыйРабИнтервал = тблРабочееВремя.Добавить();
			Если НЕ флОбед Тогда
				НовыйРабИнтервал.ВидВремени = ИсходныйИнтервал.ВидВремени;
			КонецЕсли;
			НовыйРабИнтервал.Начало = ТекПересечение.Конец;
			НовыйРабИнтервал.Конец = КонецИсхВрем;
			НовыйРабИнтервал.Продолжительность = НовыйРабИнтервал.Конец - НовыйРабИнтервал.Начало;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Процедура формирует таблицу рабочего времени сотрудников
//для дальнейшего формирования табеля рабочего времени
Процедура ФормированиеТаблицыРабочегоВремениДляТабеля(ТаблицаДвижений, ДокументСсылка, СтруктураДополнительныеСвойства)
	Для Каждого ТекСтрокаФОВ Из ДокументСсылка.ФактическиОтработанноеВремя Цикл
		//добавляем Явку
		Если ТекСтрокаФОВ.ВремяДневное > 0 Тогда
			Движение = ТаблицаДвижений.Добавить();
			Движение.Период = ДокументСсылка.ДатаЗакрытия;
			Движение.ДатаРаботы = ТекСтрокаФОВ.Дата;
			Движение.Организация = ДокументСсылка.Организация;
			Движение.Сотрудник = ТекСтрокаФОВ.Сотрудник;
			Движение.ВидИспользованияРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Явка");
			Движение.Дней = 1;
			Движение.Время = ТекСтрокаФОВ.ВремяДневное;
		КонецЕсли;
		//добавляем Ночные
		Если ТекСтрокаФОВ.ВремяНочное > 0 Тогда
			Движение = ТаблицаДвижений.Добавить();
			Движение.Период = ДокументСсылка.ДатаЗакрытия;
			Движение.ДатаРаботы = ТекСтрокаФОВ.Дата;
			Движение.Организация = ДокументСсылка.Организация;
			Движение.Сотрудник = ТекСтрокаФОВ.Сотрудник;
			Движение.ВидИспользованияРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы");
			Движение.Дней = 1;
			Движение.Время = ТекСтрокаФОВ.ВремяНочное;
		КонецЕсли;
	КонецЦикла;
	
	//добавляем Простои
	мсвВодители = Новый Массив;
	Если ЗначениеЗаполнено(ДокументСсылка.Водитель1) Тогда
		мсвВодители.Добавить(ДокументСсылка.Водитель1);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокументСсылка.Водитель2) Тогда
		мсвВодители.Добавить(ДокументСсылка.Водитель2);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокументСсылка.Сотрудник1) Тогда
		мсвВодители.Добавить(ДокументСсылка.Сотрудник1);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокументСсылка.Сотрудник2) Тогда
		мсвВодители.Добавить(ДокументСсылка.Сотрудник2);
	КонецЕсли;
	Для Каждого ТекВодитель Из мсвВодители Цикл
		Для Каждого ТекПростой Из ДокументСсылка.Простои Цикл
			Если ЗначениеЗаполнено(ТекПростой.ВремяПростоя) Тогда
				Движение = ТаблицаДвижений.Добавить();
				Движение.Период = ДокументСсылка.ДатаЗакрытия;
				Движение.ДатаРаботы = ТекПростой.НачалоПростоя;
				Движение.Организация = ДокументСсылка.Организация;
				Движение.Сотрудник = ТекВодитель;
				Движение.ВидИспользованияРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Простой");
				Движение.Дней = 1;
				Движение.Время = ТекПростой.ВремяПростоя - '00010101';
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры  

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицуПараметровВыработкиПользовательскихАгрегатов(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	СписокПередопределенныхАгрегатов = Новый СписокЗначений();
	СписокПередопределенныхАгрегатов.Добавить(Справочники.уатТипыАгрегатов.Аккумулятор);
	СписокПередопределенныхАгрегатов.Добавить(Справочники.уатТипыАгрегатов.Аптечка);
	СписокПередопределенныхАгрегатов.Добавить(Справочники.уатТипыАгрегатов.Шина);
	СписокПередопределенныхАгрегатов.Добавить(Справочники.уатТипыАгрегатов.ПустаяСсылка());
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Дата",              Новый Граница(ДокументСсылка.ДатаЗакрытия, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("СостояниеАгрегата", Перечисления.уатСостоянияАгрегатов.УстановленоВРаботе);
	Запрос.УстановитьПараметр("ТС",                ДокументСсылка.ВыработкаТС.ВыгрузитьКолонку("ТС"));
	Запрос.УстановитьПараметр("ТипАгрегата",       СписокПередопределенныхАгрегатов);
	Запрос.УстановитьПараметр("Ссылка",            ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатУстановленныеАгрегатыСрезПоследних.УзелОбъектаЭксплуатации,
	|	уатУстановленныеАгрегатыСрезПоследних.ТранспортноеСредство,
	|	уатАгрегатыТС.ПараметрВыработки КАК ПараметрВыработки
	|ПОМЕСТИТЬ Временная
	|ИЗ
	|	РегистрСведений.уатУстановленныеАгрегаты.СрезПоследних(
	|			&Дата,
	|			СостояниеАгрегата = &СостояниеАгрегата
	|				И ТранспортноеСредство В (&ТС)
	|				И НЕ ТипАгрегата В (&ТипАгрегата)) КАК уатУстановленныеАгрегатыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатАгрегатыТС КАК уатАгрегатыТС
	|		ПО уатУстановленныеАгрегатыСрезПоследних.УзелОбъектаЭксплуатации = уатАгрегатыТС.УзелОбъектаЭксплуатации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатПутевойЛистВыработкаТС.Ссылка.ДатаЗакрытия КАК Период,
	|	уатПутевойЛистВыработкаТС.Ссылка.Организация КАК Организация,
	|	уатПутевойЛистВыработкаТС.ТС КАК ТС,
	|	Временная.УзелОбъектаЭксплуатации КАК УзелОбъектаЭксплуатации,
	|	уатПутевойЛистВыработкаТС.ПараметрВыработки,
	|	СУММА(уатПутевойЛистВыработкаТС.Количество) КАК Количество
	|ИЗ
	|	Временная КАК Временная
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатПутевойЛист.ВыработкаТС КАК уатПутевойЛистВыработкаТС
	|		ПО (уатПутевойЛистВыработкаТС.ПараметрВыработки = Временная.ПараметрВыработки)
	|			И (уатПутевойЛистВыработкаТС.ТС = Временная.ТранспортноеСредство)
	|ГДЕ
	|	уатПутевойЛистВыработкаТС.Ссылка = &Ссылка
	|	И уатПутевойЛистВыработкаТС.ПараметрВыработки В
	|			(ВЫБРАТЬ
	|				Временная.ПараметрВыработки
	|			ИЗ
	|				Временная)
	|
	|СГРУППИРОВАТЬ ПО
	|	уатПутевойЛистВыработкаТС.Ссылка.ДатаЗакрытия,
	|	уатПутевойЛистВыработкаТС.Ссылка.Организация,
	|	уатПутевойЛистВыработкаТС.ТС,
	|	Временная.УзелОбъектаЭксплуатации,
	|	уатПутевойЛистВыработкаТС.ПараметрВыработки";
	
	мТаблицаВыработкиАгрегатов = Запрос.Выполнить().Выгрузить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПараметровВыработкиАгрегатов", мТаблицаВыработкиАгрегатов);
	
КонецПроцедуры 

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗатратыТС(ДокументСсылка, СтруктураДополнительныеСвойства)
	мТаблица = ДокументСсылка.ЗатратыТС.Выгрузить();
	мТаблица.Колонки.Добавить("Период");
	мТаблица.Колонки.Добавить("Контрагент");
	мТаблица.Колонки.Добавить("Организация");
	мТаблица.Колонки.Добавить("Подразделение");
	мТаблица.Колонки.Добавить("ТС");
	
	мТаблица.ЗаполнитьЗначения(ДокументСсылка.ДатаЗакрытия,         "Период");
	мТаблица.ЗаполнитьЗначения(ДокументСсылка.Контрагент,           "Контрагент");
	мТаблица.ЗаполнитьЗначения(ДокументСсылка.Организация,          "Организация");
	мТаблица.ЗаполнитьЗначения(ДокументСсылка.Подразделение,        "Подразделение");
	мТаблица.ЗаполнитьЗначения(ДокументСсылка.ТранспортноеСредство, "ТС");
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗатратыТС", мТаблица);
КонецПроцедуры // СформироватьТаблицаЗатратыТС()

#Область Проведение

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСостояниеТС(ДокументСсылка, СтруктураДополнительныеСвойства)
	тблДвижений = Новый ТаблицаЗначений;
	тблДвижений.Колонки.Добавить("Регистратор");
	тблДвижений.Колонки.Добавить("Период");
	тблДвижений.Колонки.Добавить("ДатаОкончания");
	тблДвижений.Колонки.Добавить("ТС");
	тблДвижений.Колонки.Добавить("Состояние");
	тблДвижений.Колонки.Добавить("Контрагент");
	
	НоваяСтрока = тблДвижений.Добавить();
	НоваяСтрока.ТС = ДокументСсылка.ТранспортноеСредство;
	НоваяСтрока.Период = уатОбщегоНазначения.уатДатаБезСекунд(ДокументСсылка.ДатаВыезда);
	НоваяСтрока.ДатаОкончания = ДокументСсылка.ДатаВозвращения-1;
	НоваяСтрока.Состояние = Справочники.уатСостояниеТС.ВРейсе;
	НоваяСтрока.Контрагент = ДокументСсылка.Контрагент;
	
	Для Каждого ТекПрицеп Из ДокументСсылка.Прицепы Цикл
		НоваяСтрока = тблДвижений.Добавить();
		НоваяСтрока.ТС = ТекПрицеп.ТС;
		НоваяСтрока.Период = уатОбщегоНазначения.уатДатаБезСекунд(ДокументСсылка.ДатаВыезда);
		НоваяСтрока.ДатаОкончания = ДокументСсылка.ДатаВозвращения-1;
		НоваяСтрока.Состояние = Справочники.уатСостояниеТС.ВРейсе;
		НоваяСтрока.Контрагент = ДокументСсылка.Контрагент;
	КонецЦикла;
		
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСостоянийТС", тблДвижений);
КонецПроцедуры // СформироватьТаблицаСостояниеТС()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПланированияРаботыТС(ДокументСсылка, СтруктураДополнительныеСвойства)
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = 
	"ВЫБРАТЬ
	|	уатПутевойЛист.Ссылка КАК Регистратор,
	|	уатПутевойЛист.Ссылка КАК ДокументПланирования,
	|	уатПутевойЛист.ДатаВыезда КАК ДатаНачала,
	|	уатПутевойЛист.ДатаВозвращения КАК ДатаОкончания,
	|	ЗНАЧЕНИЕ(СПРАВОЧНИК.уатСостояниеТС.ВРейсе) КАК Состояние,
	|	уатПутевойЛист.ТранспортноеСредство КАК ТС
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|ГДЕ
	|	уатПутевойЛист.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатПутевойЛистПрицепы.Ссылка,
	|	уатПутевойЛистПрицепы.Ссылка,
	|	уатПутевойЛистПрицепы.Ссылка.ДатаВыезда,
	|	уатПутевойЛистПрицепы.Ссылка.ДатаВозвращения,
	|	ЗНАЧЕНИЕ(СПРАВОЧНИК.уатСостояниеТС.ВРейсе),
	|	уатПутевойЛистПрицепы.ТС
	|ИЗ
	|	Документ.уатПутевойЛист.Прицепы КАК уатПутевойЛистПрицепы
	|ГДЕ
	|	уатПутевойЛистПрицепы.Ссылка = &Ссылка";
	
	мЗапрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	МассивРезультатов = мЗапрос.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПланированияРаботыТС", МассивРезультатов[0].Выгрузить());
КонецПроцедуры // СформироватьТаблицаПланированияРаботыТС()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСчетчикиТС(ДокументСсылка, СтруктураДополнительныеСвойства)
	тблДвижений = Новый ТаблицаЗначений;
	тблДвижений.Колонки.Добавить("Регистратор");
	тблДвижений.Колонки.Добавить("Период");
	тблДвижений.Колонки.Добавить("ТС");
	тблДвижений.Колонки.Добавить("ТипСчетчика");
	тблДвижений.Колонки.Добавить("Значение");
	
	Движение = тблДвижений.Добавить();
	Движение.Регистратор = ДокументСсылка;
	Движение.Период = ДокументСсылка.ДатаВозвращения-1;
	Движение.ТС = ДокументСсылка.ТранспортноеСредство;
	Если ДокументСсылка.ТранспортноеСредство.уатМодель.НаличиеСпидометра Тогда
		Движение.ТипСчетчика = Перечисления.уатТипыСчетчиковТС.Спидометр;
	Иначе
		Движение.ТипСчетчика = Перечисления.уатТипыСчетчиковТС.СчетчикМЧ;
	КонецЕсли;	
	Движение.Значение = ДокументСсылка.СпидометрВозвращения;
	
	Для Каждого ТекСтрПрицепы из ДокументСсылка.Прицепы Цикл
		Если ТекСтрПрицепы.СчетчикМЧВозвращения <> ТекСтрПрицепы.СчетчикМЧВыезда Тогда
			Движение = тблДвижений.Добавить();
			Движение.Регистратор = ДокументСсылка;
			Движение.Период = ДокументСсылка.ДатаВозвращения-1;
			Движение.ТС = ТекСтрПрицепы.ТС;
			Если ТекСтрПрицепы.ТС.уатМодель.НаличиеСпидометра Тогда
				Движение.ТипСчетчика = Перечисления.уатТипыСчетчиковТС.Спидометр;
			Иначе
				Движение.ТипСчетчика = Перечисления.уатТипыСчетчиковТС.СчетчикМЧ;
			КонецЕсли;
			Движение.Значение = ТекСтрПрицепы.СчетчикМЧВозвращения;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСчетчиковТС", тблДвижений);
КонецПроцедуры // СформироватьТаблицаСчетчикиТС()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаВыработкаТС(ДокументСсылка, СтруктураДополнительныеСвойства)
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	уатПутевойЛистВыработкаТС.Ссылка.ДатаЗакрытия КАК Период,
	|	уатПутевойЛистВыработкаТС.ТС КАК ТС,
	|	уатПутевойЛистВыработкаТС.ПараметрВыработки КАК ПараметрВыработки,
	|	уатПутевойЛистВыработкаТС.Количество КАК Количество,
	|	уатПутевойЛистВыработкаТС.Подразделение КАК Подразделение,
	|	уатПутевойЛистВыработкаТС.Контрагент КАК Контрагент,
	|	уатПутевойЛистВыработкаТС.Ссылка.Организация КАК Организация,
	|	уатПутевойЛистВыработкаТС.ОбъектСтроительства КАК ОбъектСтроительства,
	|	уатПутевойЛистВыработкаТС.Маршрут КАК Маршрут,
	|	уатПутевойЛистВыработкаТС.ВидПеревозки КАК ВидПеревозки,
	|	уатМестонахождениеТССрезПоследних.Колонна КАК Колонна,
	|	уатПутевойЛистВыработкаТС.СтроительнаяРабота,
	|	уатПутевойЛистВыработкаТС.СценарийПланирования
	|ИЗ
	|	Документ.уатПутевойЛист.ВыработкаТС КАК уатПутевойЛистВыработкаТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних(&ДатаВозвращения, ) КАК уатМестонахождениеТССрезПоследних
	|		ПО уатПутевойЛистВыработкаТС.Ссылка.ТранспортноеСредство = уатМестонахождениеТССрезПоследних.ТС
	|ГДЕ
	|	уатПутевойЛистВыработкаТС.Ссылка = &Док";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Док", ДокументСсылка);
	Запрос.УстановитьПараметр("ДатаВозвращения", ДокументСсылка.ДатаВозвращения);
	тблДвижений = Запрос.Выполнить().Выгрузить();
	
	УчетВыработкиПоКонтрагентам = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоКонтрагентам);
	УчетВыработкиПоПодразделениям = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоПодразделениям);
	УчетВыработкиПоОбъектамСтроительства = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоОбъектамСтроительства);
	УчетВыработкиПоМаршрутам = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоМаршрутам);
	УчетВыработкиПоВидамПеревозок = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоВидамПеревозок);
	Если НЕ УчетВыработкиПоКонтрагентам Тогда
		тблДвижений.ЗаполнитьЗначения(Неопределено, "Контрагент");
	КонецЕсли;
	Если НЕ УчетВыработкиПоПодразделениям Тогда
		тблДвижений.ЗаполнитьЗначения(Неопределено, "Подразделение");
	КонецЕсли;
	Если НЕ УчетВыработкиПоОбъектамСтроительства Тогда
		тблДвижений.ЗаполнитьЗначения(Неопределено, "ОбъектСтроительства");
		тблДвижений.ЗаполнитьЗначения(Неопределено, "СтроительнаяРабота");
		тблДвижений.ЗаполнитьЗначения(Неопределено, "СценарийПланирования");
	КонецЕсли;
	Если НЕ УчетВыработкиПоМаршрутам Тогда
		тблДвижений.ЗаполнитьЗначения(Неопределено, "Маршрут");
	КонецЕсли;
	Если НЕ УчетВыработкиПоВидамПеревозок Тогда
		тблДвижений.ЗаполнитьЗначения(Неопределено, "ВидПеревозки");
	КонецЕсли;
	Если (НЕ УчетВыработкиПоКонтрагентам) ИЛИ (НЕ УчетВыработкиПоПодразделениям) ИЛИ (НЕ УчетВыработкиПоОбъектамСтроительства)
		ИЛИ (НЕ УчетВыработкиПоМаршрутам) ИЛИ (НЕ УчетВыработкиПоВидамПеревозок) Тогда
		тблДвижений.Свернуть("Период, ТС, ПараметрВыработки, Подразделение, Контрагент, Организация, ОбъектСтроительства, Маршрут, Колонна, ВидПеревозки, СтроительнаяРабота, СценарийПланирования", "Количество");

	КонецЕсли;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВыработкиТС", тблДвижений);
КонецПроцедуры // СформироватьТаблицаВыработкаТС()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаВыработкаСотрудников(ДокументСсылка, СтруктураДополнительныеСвойства)
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	уатПутевойЛистВыработка.Ссылка.ДатаЗакрытия КАК Период,
	|	уатПутевойЛистВыработка.Сотрудник КАК Сотрудник,
	|	уатПутевойЛистВыработка.ПараметрВыработки КАК ПараметрВыработки,
	|	уатПутевойЛистВыработка.Количество КАК Количество,
	|	уатПутевойЛистВыработка.Подразделение КАК Подразделение,
	|	уатПутевойЛистВыработка.Контрагент КАК Контрагент,
	|	уатПутевойЛистВыработка.Ссылка.Организация КАК Организация,
	|	уатМестонахождениеТССрезПоследних.Колонна КАК Колонна,
	|	уатПутевойЛистВыработка.ОбъектСтроительства,
	|	уатПутевойЛистВыработка.Маршрут,
	|	уатПутевойЛистВыработка.ВидПеревозки,
	|	уатПутевойЛистВыработка.СтроительнаяРабота,
	|	уатПутевойЛистВыработка.СценарийПланирования
	|ИЗ
	|	Документ.уатПутевойЛист.ВыработкаСотрудников КАК уатПутевойЛистВыработка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних(&ДатаВозвращения, ) КАК уатМестонахождениеТССрезПоследних
	|		ПО уатПутевойЛистВыработка.Ссылка.ТранспортноеСредство = уатМестонахождениеТССрезПоследних.ТС
	|ГДЕ
	|	уатПутевойЛистВыработка.Ссылка = &Док";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Док", ДокументСсылка);
	Запрос.УстановитьПараметр("ДатаВозвращения", ДокументСсылка.ДатаВозвращения);
	тблДвижений = Запрос.Выполнить().Выгрузить();
	
	УчетВыработкиПоКонтрагентам = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоКонтрагентам);
	УчетВыработкиПоПодразделениям = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоПодразделениям);
	УчетВыработкиПоОбъектамСтроительства = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоОбъектамСтроительства);
	УчетВыработкиПоМаршрутам = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоМаршрутам);
	УчетВыработкиПоВидамПеревозок = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоВидамПеревозок);
	Если НЕ УчетВыработкиПоКонтрагентам Тогда
		тблДвижений.ЗаполнитьЗначения(Неопределено, "Контрагент");
	КонецЕсли;
	Если НЕ УчетВыработкиПоПодразделениям Тогда
		тблДвижений.ЗаполнитьЗначения(Неопределено, "Подразделение");
	КонецЕсли;
	Если НЕ УчетВыработкиПоОбъектамСтроительства Тогда
		тблДвижений.ЗаполнитьЗначения(Неопределено, "ОбъектСтроительства");
		тблДвижений.ЗаполнитьЗначения(Неопределено, "СтроительнаяРабота");
		тблДвижений.ЗаполнитьЗначения(Неопределено, "СценарийПланирования");
	КонецЕсли;
	Если НЕ УчетВыработкиПоМаршрутам Тогда
		тблДвижений.ЗаполнитьЗначения(Неопределено, "Маршрут");
	КонецЕсли;
	Если НЕ УчетВыработкиПоВидамПеревозок Тогда
		тблДвижений.ЗаполнитьЗначения(Неопределено, "ВидПеревозки");
	КонецЕсли;
	Если (НЕ УчетВыработкиПоКонтрагентам) ИЛИ (НЕ УчетВыработкиПоПодразделениям) ИЛИ (НЕ УчетВыработкиПоОбъектамСтроительства)
		ИЛИ (НЕ УчетВыработкиПоМаршрутам) ИЛИ (НЕ УчетВыработкиПоВидамПеревозок) Тогда
		тблДвижений.Свернуть("Период, Сотрудник, ПараметрВыработки, Подразделение, Контрагент, Организация, ОбъектСтроительства, Маршрут, Колонна, ВидПеревозки, СтроительнаяРабота, СценарийПланирования", "Количество");
	КонецЕсли;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВыработкиСотрудников", тблДвижений);
КонецПроцедуры // СформироватьТаблицаВыработкаСотрудников()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПростоев(ДокументСсылка, СтруктураДополнительныеСвойства)
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	уатПутевойЛистПростои.НачалоПростоя КАК Период,
	|	уатПутевойЛистПростои.Ссылка.ТранспортноеСредство КАК ТС,
	|	уатПутевойЛистПростои.Ссылка.Водитель1 КАК Водитель,
	|	уатПутевойЛистПростои.ВидПростоя КАК ВидПростоя,
	|	уатПутевойЛистПростои.ВремяПростоя КАК ВремяПростоя,
	|	0 КАК Время
	|ИЗ
	|	Документ.уатПутевойЛист.Простои КАК уатПутевойЛистПростои
	|ГДЕ
	|	уатПутевойЛистПростои.Ссылка = &Док
	|	И уатПутевойЛистПростои.ВремяПростоя <> &ПустаяДата";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Док", ДокументСсылка);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	тблДвижений = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Текстрока Из тблДвижений Цикл
		Текстрока.Время = Текстрока.ВремяПростоя - НачалоДня(Текстрока.ВремяПростоя);
	КонецЦикла;
	тблДвижений.Колонки.Удалить("ВремяПростоя");
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПростои", тблДвижений);
КонецПроцедуры // СформироватьТаблицаПростоев()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаГСМ(ДокументСсылка, СтруктураДополнительныеСвойства)
	Перем мТаблицаПоСписаниюГСМ;
	
	// Подготовим таблицу ГСМ для проведения.
	СтрокаОшибки = "";
	
	мЗапрос = Новый Запрос;
	мЗапрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатПутевойЛистРасходГСМ.ТС,
	|	уатПутевойЛистРасходГСМ.ГСМ
	|ИЗ
	|	Документ.уатПутевойЛист.РасходГСМ КАК уатПутевойЛистРасходГСМ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
	|		ПО (уатПутевойЛистРасходГСМ.ГСМ = уатНоменклатураГСМ.Номенклатура
	|				И уатНоменклатураГСМ.ГруппаГСМ = &ГруппаГСМ)
	|ГДЕ
	|	уатПутевойЛистРасходГСМ.Ссылка = &Ссылка";
	мЗапрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	мЗапрос.УстановитьПараметр("ГруппаГСМ", Перечисления.уатГруппыГСМ.Топливо);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатОстаткиГСМнаТС");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = мЗапрос.Выполнить();
	Для каждого КолонкаРезультатЗапроса Из ЭлементБлокировки.ИсточникДанных.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	уатОбщегоНазначения_проф.уатПодготовитьТаблицуСписанияГСМ(ДокументСсылка, мТаблицаПоСписаниюГСМ, Истина, , СтрокаОшибки);
	
	мТаблицаПоСписаниюГСМ.Колонки.Дата.Имя = "Период";
	мТаблицаПоСписаниюГСМ.Колонки.Добавить("ВидДвижения");
	мТаблицаПоСписаниюГСМ.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");
	
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаГСМ", мТаблицаПоСписаниюГСМ);
КонецПроцедуры // СформироватьТаблицаГСМ()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПартииТЖ(ДокументСсылка, СтруктураДополнительныеСвойства)
	мЗапрос = новый Запрос;
	мЗапрос.Текст = 
	"ВЫБРАТЬ
	|	РасходТЖ.ТС,
	|	РасходТЖ.ГСМ КАК ТЖ
	|ИЗ
	|	Документ.уатПутевойЛист.РасходГСМ КАК РасходТЖ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
	|		ПО (РасходТЖ.ГСМ = уатНоменклатураГСМ.Номенклатура
	|				И уатНоменклатураГСМ.ВестиУчетОстатковТЖ)
	|ГДЕ
	|	РасходТЖ.Ссылка = &Ссылка";
	мЗапрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатОстаткиТЖнаТС");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = мЗапрос.Выполнить();
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТС" , "ТС");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТЖ", "ТЖ");
	Блокировка.Заблокировать();
	
	тблДвижений = Неопределено;
	ВсеОК =	уатГСМ.ПодготовитьТаблицуСписанияТЖ(ДокументСсылка, тблДвижений, Истина);
	
	тблДвижений.Колонки.Добавить("Регистратор");
	тблДвижений.ЗаполнитьЗначения(ДокументСсылка, "Регистратор");
	тблДвижений.Колонки.Добавить("Период");
	тблДвижений.ЗаполнитьЗначения(ДокументСсылка.ДатаЗакрытия, "Период");
	тблДвижений.Колонки.Добавить("ВидДвижения");
	тблДвижений.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПартииТЖ", тблДвижений);
КонецПроцедуры // СформироватьТаблицаПартииТЖ()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаРасходГСМ(ДокументСсылка, СтруктураДополнительныеСвойства)
	тблДвижений = Новый ТаблицаЗначений;
	тблДвижений.Колонки.Добавить("Период");
	тблДвижений.Колонки.Добавить("ТС");
	тблДвижений.Колонки.Добавить("Водитель");
	тблДвижений.Колонки.Добавить("ГСМ");
	тблДвижений.Колонки.Добавить("Колонна");
	тблДвижений.Колонки.Добавить("Организация");
	тблДвижений.Колонки.Добавить("РасходПоНорме");
	тблДвижений.Колонки.Добавить("РасходПоФакту");
	
	мТочностьОстатковГСМ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ТочностьОстатковТоплива);
	
	Для Каждого ТекСтрокаРасходГСМ Из ДокументСсылка.РасходГСМ Цикл
		Если уатГСМ.ЭтоТехническаяЖидкость(ТекСтрокаРасходГСМ.ГСМ) Тогда
			Продолжить;
		КонецЕсли;
		
		Если (ТекСтрокаРасходГСМ.РасходПоНорме <> 0 ИЛИ
			ТекСтрокаРасходГСМ.РасходПоФакту <> 0) И ТекСтрокаРасходГСМ.Активен Тогда
			
			ТекКолоннаТС = уатОбщегоНазначения.МестонахождениеТС(ТекСтрокаРасходГСМ.ТС, ДокументСсылка.ДатаВозвращения).Колонна;
			
			мОтбор = Новый Структура("ГСМ, ТС", ТекСтрокаРасходГСМ.ГСМ, ТекСтрокаРасходГСМ.ТС);
			мНайденныеСтроки = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаГСМ.НайтиСтроки(мОтбор);
			Если мНайденныеСтроки.Количество() > 0 Тогда
				Если мНайденныеСтроки[0].Количество = ТекСтрокаРасходГСМ.РасходПоФакту Тогда
					НоваяСтрока 				= тблДвижений.Добавить();
					НоваяСтрока.Период 			= ДокументСсылка.ДатаЗакрытия;
					НоваяСтрока.ТС 				= ТекСтрокаРасходГСМ.ТС;
					НоваяСтрока.Водитель 		= ДокументСсылка.Водитель1;
					НоваяСтрока.ГСМ				= ТекСтрокаРасходГСМ.ГСМ;
					НоваяСтрока.Колонна = ТекКолоннаТС;
					НоваяСтрока.Организация = ДокументСсылка.Организация;
					НоваяСтрока.РасходПоНорме 	= ТекСтрокаРасходГСМ.РасходПоНорме;
					НоваяСтрока.РасходПоФакту 	= ТекСтрокаРасходГСМ.РасходПоФакту;
					
				Иначе
					мОстатокКСписаниюНорм		= ТекСтрокаРасходГСМ.РасходПоНорме;
					мАналоги					= уатОбщегоНазначения.уатПолучитьАналогиГСМ(ТекСтрокаРасходГСМ.ГСМ);
					Для Каждого ТекСтрокаТаблицыГСМ Из СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаГСМ Цикл
						Если ТекСтрокаТаблицыГСМ.ТС = ТекСтрокаРасходГСМ.ТС Тогда
							мНайденнаяСтрока_рабочая = мАналоги.Найти(ТекСтрокаТаблицыГСМ.ГСМ, "Аналог");
							Если мНайденнаяСтрока_рабочая <> Неопределено или ТекСтрокаТаблицыГСМ.ГСМ = ТекСтрокаРасходГСМ.ГСМ Тогда
								НоваяСтрока 				= тблДвижений.Добавить();
								НоваяСтрока.Период 			= ДокументСсылка.ДатаЗакрытия;
								НоваяСтрока.ТС 				= ТекСтрокаРасходГСМ.ТС;
								НоваяСтрока.Водитель 		= ДокументСсылка.Водитель1;
								НоваяСтрока.ГСМ				= ТекСтрокаТаблицыГСМ.ГСМ;
								НоваяСтрока.Колонна = ТекКолоннаТС;
								НоваяСтрока.Организация = ДокументСсылка.Организация;
								Если ТекСтрокаРасходГСМ.РасходПоФакту <> 0 Тогда
									мРН	= ТекСтрокаРасходГСМ.РасходПоНорме * ТекСтрокаТаблицыГСМ.Количество /ТекСтрокаРасходГСМ.РасходПоФакту;
								Иначе
									мРН	= ТекСтрокаРасходГСМ.РасходПоНорме;
								КонецЕсли;	
								НоваяСтрока.РасходПоНорме 	= мРН;
								НоваяСтрока.РасходПоФакту 	= ТекСтрокаТаблицыГСМ.Количество;
								мОстатокКСписаниюНорм		= мОстатокКСписаниюНорм - мРН; 
							КонецЕсли;						
						КонецЕсли;						
					КонецЦикла;	
					
					//последняя копейка
					Если Окр(мОстатокКСписаниюНорм, мТочностьОстатковГСМ) <> 0 Тогда
						НоваяСтрока 				= тблДвижений.Добавить();
						НоваяСтрока.Период 			= ДокументСсылка.ДатаЗакрытия;
						НоваяСтрока.ТС 				= ТекСтрокаРасходГСМ.ТС;
						НоваяСтрока.Водитель 		= ДокументСсылка.Водитель1;
						НоваяСтрока.ГСМ				= ТекСтрокаРасходГСМ.ГСМ;
						НоваяСтрока.Колонна = ТекКолоннаТС;
						НоваяСтрока.Организация = ДокументСсылка.Организация;
						НоваяСтрока.РасходПоНорме 	= мОстатокКСписаниюНорм;
						НоваяСтрока.РасходПоФакту 	= 0;
					КонецЕсли;	
				КонецЕсли;	
				
			Иначе
				мОстатокКСписаниюНорм		= ТекСтрокаРасходГСМ.РасходПоНорме;
				мАналоги					= уатОбщегоНазначения.уатПолучитьАналогиГСМ(ТекСтрокаРасходГСМ.ГСМ);
				Для Каждого ТекСтрокаТаблицыГСМ Из СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаГСМ Цикл
					Если ТекСтрокаТаблицыГСМ.ТС = ТекСтрокаРасходГСМ.ТС Тогда
						//мОтбор = Новый Структура("ГСМ, ТС", ТекСтрокаТаблицыГСМ.ГСМ, ТекСтрокаТаблицыГСМ.ТС);
						//мНайденныеСтроки_рабочая = мТаблицаПоСписаниюГСМ.НайтиСтроки(мОтбор);
						мНайденнаяСтрока_рабочая = мАналоги.Найти(ТекСтрокаТаблицыГСМ.ГСМ, "Аналог");
						Если мНайденнаяСтрока_рабочая <> Неопределено или ТекСтрокаТаблицыГСМ.ГСМ = ТекСтрокаРасходГСМ.ГСМ Тогда
							НоваяСтрока 				= тблДвижений.Добавить();
							НоваяСтрока.Период 			= ДокументСсылка.ДатаЗакрытия;
							НоваяСтрока.ТС 				= ТекСтрокаРасходГСМ.ТС;
							НоваяСтрока.Водитель 		= ДокументСсылка.Водитель1;
							НоваяСтрока.ГСМ				= ТекСтрокаТаблицыГСМ.ГСМ;
							НоваяСтрока.Колонна = ТекКолоннаТС;
							НоваяСтрока.Организация = ДокументСсылка.Организация;
							Если ТекСтрокаРасходГСМ.РасходПоФакту <> 0 Тогда
								мРН	= ТекСтрокаРасходГСМ.РасходПоНорме * ТекСтрокаТаблицыГСМ.Количество / ТекСтрокаРасходГСМ.РасходПоФакту;
							Иначе
								мРН	= ТекСтрокаРасходГСМ.РасходПоНорме;
							КонецЕсли;	
							НоваяСтрока.РасходПоНорме 	= мРН;
							НоваяСтрока.РасходПоФакту 	= ТекСтрокаТаблицыГСМ.Количество;
							мОстатокКСписаниюНорм		= мОстатокКСписаниюНорм - мРН; 
						КонецЕсли;						
					КонецЕсли;						
				КонецЦикла;	
				
				//последняя копейка
				Если Окр(мОстатокКСписаниюНорм, мТочностьОстатковГСМ) <> 0 Тогда
					НоваяСтрока 				= тблДвижений.Добавить();
					НоваяСтрока.Период 			= ДокументСсылка.ДатаЗакрытия;
					НоваяСтрока.ТС 				= ТекСтрокаРасходГСМ.ТС;
					НоваяСтрока.Водитель 		= ДокументСсылка.Водитель1;
					НоваяСтрока.ГСМ				= ТекСтрокаРасходГСМ.ГСМ;
					НоваяСтрока.Колонна = ТекКолоннаТС;
					НоваяСтрока.Организация = ДокументСсылка.Организация;
					НоваяСтрока.РасходПоНорме 	= мОстатокКСписаниюНорм;
					НоваяСтрока.РасходПоФакту 	= 0;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	тблДвижений.Свернуть("Период, ТС, Водитель, ГСМ, Колонна, Организация", "РасходПоНорме, РасходПоФакту");
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасходГСМ", тблДвижений);
КонецПроцедуры // СформироватьТаблицаРасходГСМ()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаРасходТЖ(ДокументСсылка, СтруктураДополнительныеСвойства)
	тблДвижений = Новый ТаблицаЗначений;
	тблДвижений.Колонки.Добавить("Период");
	тблДвижений.Колонки.Добавить("ТС");
	тблДвижений.Колонки.Добавить("Водитель");
	тблДвижений.Колонки.Добавить("ГСМ");
	тблДвижений.Колонки.Добавить("Колонна");
	тблДвижений.Колонки.Добавить("Организация");
	тблДвижений.Колонки.Добавить("ВидОперации");
	тблДвижений.Колонки.Добавить("КоличествоПриход");
	тблДвижений.Колонки.Добавить("КоличествоРасход");
	
	мЗапрос = Новый запрос;
	мЗапрос.Текст = 
	"ВЫБРАТЬ
	|	РасходГСМ.ГСМ,
	|	РасходГСМ.РасходПоФакту КАК КоличествоРасход,
	|	РасходГСМ.Ссылка КАК Регистратор,
	|	РасходГСМ.Ссылка.Организация КАК Организация,
	|	РасходГСМ.Ссылка.ДатаЗакрытия КАК Период,
	|	РасходГСМ.ТС,
	|	НЕОПРЕДЕЛЕНО КАК Колонна,
	|	РасходГСМ.Ссылка.Водитель1 КАК Водитель,
	|	ЗНАЧЕНИЕ(Перечисление.уатВидыОперацийСТехническимиЖидкостями.РасходВРаботе) КАК ВидОперации
	|ИЗ
	|	Документ.уатПутевойЛист.РасходГСМ КАК РасходГСМ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
	|		ПО (РасходГСМ.ГСМ = уатНоменклатураГСМ.Номенклатура
	|				И уатНоменклатураГСМ.ГруппаГСМ = &ГруппаГСМ)
	|ГДЕ
	|	РасходГСМ.Ссылка = &Ссылка";
	мЗапрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	мЗапрос.УстановитьПараметр("ГруппаГСМ", Перечисления.уатГруппыГСМ.ПрисадкиИТехническиеЖидкости);
	
	Выгрузка = мЗапрос.Выполнить().Выгрузить();
	
	Для каждого ТекСтрока ИЗ Выгрузка Цикл
		ТекСтрока.Колонна = уатОбщегоНазначения.МестонахождениеТС(ТекСтрока.ТС, ДокументСсылка.ДатаВозвращения).Колонна;
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасходТЖ", Выгрузка);
КонецПроцедуры // СформироватьТаблицаРасходГСМ()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаИзносПробегШин(ДокументСсылка, СтруктураДополнительныеСвойства)
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатПутевойЛистВыработкаТС.Ссылка.ДатаЗакрытия КАК Период,
	|	уатПутевойЛистВыработкаТС.Ссылка.Организация КАК Организация,
	|	уатПутевойЛистВыработкаТС.ПараметрВыработки КАК ПараметрВыработки,
	|	уатПутевойЛистВыработкаТС.ТС КАК ТС,
	|	уатПутевойЛистВыработкаТС.Количество КАК Пробег,
	|	ВложенныйЗапрос.УзелОбъектаЭксплуатации КАК УзелОбъектаЭксплуатации,
	|	уатМоделиШин.НормаЗатрат * ВложенныйЗапрос.ПервоначальнаяСтоимость / 100 * уатПутевойЛистВыработкаТС.Количество / 1000 КАК Износ
	|ИЗ
	|	Документ.уатПутевойЛист.ВыработкаТС КАК уатПутевойЛистВыработкаТС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			уатУстановленныеАгрегатыСрезПоследних.Период КАК Период,
	|			уатУстановленныеАгрегатыСрезПоследних.УзелОбъектаЭксплуатации КАК УзелОбъектаЭксплуатации,
	|			уатУстановленныеАгрегатыСрезПоследних.ТранспортноеСредство КАК ТС,
	|			уатУстановленныеАгрегатыСрезПоследних.СостояниеАгрегата КАК СостояниеАгрегата,
	|			уатАгрегатыТС.МодельАгрегата КАК МодельАгрегата,
	|			уатАгрегатыТС.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость
	|		ИЗ
	|			РегистрСведений.уатУстановленныеАгрегаты.СрезПоследних(&Дата, ТипАгрегата = ЗНАЧЕНИЕ(Справочник.уатТипыАгрегатов.Шина)) КАК уатУстановленныеАгрегатыСрезПоследних
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатАгрегатыТС КАК уатАгрегатыТС
	|				ПО уатУстановленныеАгрегатыСрезПоследних.УзелОбъектаЭксплуатации = уатАгрегатыТС.УзелОбъектаЭксплуатации
	|		ГДЕ
	|			уатУстановленныеАгрегатыСрезПоследних.СостояниеАгрегата В(&СостояниеАгрегата)
	|			И уатУстановленныеАгрегатыСрезПоследних.ТранспортноеСредство В(&ВСоставе)) КАК ВложенныйЗапрос
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатМоделиАгрегатов КАК уатМоделиШин
	|			ПО ВложенныйЗапрос.МодельАгрегата = уатМоделиШин.Ссылка
	|		ПО уатПутевойЛистВыработкаТС.ТС = ВложенныйЗапрос.ТС
	|ГДЕ
	|	уатПутевойЛистВыработкаТС.ПараметрВыработки = &ПараметрВыработки
	|	И уатПутевойЛистВыработкаТС.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Дата", Новый Граница(ДокументСсылка.ДатаЗакрытия, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ВСоставе", ДокументСсылка.ВыработкаТС.ВыгрузитьКолонку("ТС"));
	СписокСостоянийАгрегата = Новый СписокЗначений();
	СписокСостоянийАгрегата.Добавить(Перечисления.уатСостоянияАгрегатов.УстановленоВРаботе);
	Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.НачислятьИзносНаЗапаску) Тогда
		СписокСостоянийАгрегата.Добавить(Перечисления.уатСостоянияАгрегатов.УстановленоВЗапас);
	КонецЕсли;
	Запрос.УстановитьПараметр("СостояниеАгрегата", СписокСостоянийАгрегата);
	Запрос.УстановитьПараметр("СостояниеСнято", Перечисления.уатСостоянияАгрегатов.Снято);
	Запрос.УстановитьПараметр("ПараметрВыработки", Справочники.уатПараметрыВыработки.ПробегОбщий);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	мТаблицаУстановленныхШин = Запрос.Выполнить().Выгрузить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаИзносаПробегаШин", мТаблицаУстановленныхШин);
КонецПроцедуры // СформироватьТаблицаИзносПробегШин()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаРабочееВремяРаботниковОрганизаций(ДокументСсылка, СтруктураДополнительныеСвойства)
	Если Не уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетРабочегоВремени) Тогда
		Возврат;
	КонецЕсли;
	
	мТаблица = Новый ТаблицаЗначений;
	мТаблица.Колонки.Добавить("Период");
	мТаблица.Колонки.Добавить("Сотрудник");
	мТаблица.Колонки.Добавить("Организация");
	мТаблица.Колонки.Добавить("ВидИспользованияРабочегоВремени");
	мТаблица.Колонки.Добавить("ДатаРаботы");
	мТаблица.Колонки.Добавить("Дней");
	мТаблица.Колонки.Добавить("Время");
	
	ФормированиеТаблицыРабочегоВремениДляТабеля(мТаблица, ДокументСсылка, СтруктураДополнительныеСвойства);
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРабочегоВремени", мТаблица);
КонецПроцедуры // СформироватьТаблицаРабочееВремяРаботниковОрганизаций()

#КонецОбласти

#КонецОбласти

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

//Рарус Владимир Подрезов 13.10.2016
	ИсходныйМассивОбъектов = МассивОбъектов;
	НовыйМассивОбъектов = Новый Массив;
	Для Каждого текОбъект Из МассивОбъектов Цикл
		Если ТипЗнч(текОбъект) = Тип("ДокументСсылка.пкДоставка") Тогда
			ЗапросО = новый Запрос;
			ЗапросО.Текст = 
			"ВЫБРАТЬ
			|	уатПутевойЛист.Ссылка
			|ИЗ
			|	Документ.уатПутевойЛист КАК уатПутевойЛист
			|ГДЕ
			|	уатПутевойЛист.пкДоставка = &пкДоставка";
			Запросо.УстановитьПараметр("пкДоставка", текОбъект);
			РезЗапроса = ЗапросО.Выполнить().Выбрать();
			Пока РезЗапроса.Следующий() Цикл
				НовыйМассивОбъектов.Добавить(РезЗапроса.Ссылка);
			КонецЦикла;
		Иначе
			НовыйМассивОбъектов.Добавить(текОбъект);
		КонецЕсли;
	КонецЦикла;
	МассивОбъектов = НовыйМассивОбъектов;
//Рарус Владимир Подрезов Конец
	
	Если НЕ уатОбщегоНазначенияСервер.РазрешениеПечатиНепроведенногоДокумента(МассивОбъектов) Тогда
//Рарус Владимир Подрезов 13.10.2016
		МассивОбъектов = ИсходныйМассивОбъектов;
//Рарус Владимир Подрезов Конец
		Возврат;
	КонецЕсли;

	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "МаршрутныйЛистПоЗаданию") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "МаршрутныйЛистПоЗаданию", "Маршрутный лист по заданию", ПечататьМаршрутныйЛистПоЗаданию(МассивОбъектов, ОбъектыПечати));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечататьЛицСторону") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПечататьЛицСторону",
		"Печатать лиц. сторону при выезде", ПечататьЛицСторону(МассивОбъектов, ОбъектыПечати));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечататьОбрСторону") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПечататьОбрСторону",
		"Печатать обр. сторону при выезде", ПечататьОбрСторону(МассивОбъектов, ОбъектыПечати));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьВесьДокумент") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПечатьВесьДокумент",
		"Печатать весь пут. лист при выезде", ПечатьВесьДокумент(МассивОбъектов, ОбъектыПечати));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьВесьДокументПолная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПечатьВесьДокументПолная",
		"Печатать весь пут. лист при возвращении", ПечатьВесьДокументПолная(МассивОбъектов, ОбъектыПечати));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечататьОбрСторонуПолная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПечататьОбрСторонуПолная",
		"Печатать обр. сторону при возвращении", ПечататьОбрСторонуПолная(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечататьЛицСторонуПолная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПечататьЛицСторонуПолная",
		"Печатать лиц. сторону при возвращении", ПечататьЛицСторонуПолная(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭСМ7") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЭСМ7", "ЭСМ-7", уатПечатьЭСМ7(МассивОбъектов, ОбъектыПечати));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Автокран") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Автокран", "Автокран", уатПечатьАвтокран(МассивОбъектов, ОбъектыПечати));
	Иначе
//Рарус Владимир Подрезов 13.10.2016
		МассивОбъектов = ИсходныйМассивОбъектов;
//Рарус Владимир Подрезов Конец
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.УстановитьРедактированиеПечатныхФормДокумента(КоллекцияПечатныхФорм);
	
	//печать штрихкодов
	уатЗащищенныеФункцииСервер_проф.ОтобразитьШКнаПФ(КоллекцияПечатныхФорм, ОбъектыПечати);
	
//Рарус Владимир Подрезов 13.10.2016
	МассивОбъектов = ИсходныйМассивОбъектов;
//Рарус Владимир Подрезов Конец
КонецПроцедуры // Печать

// Формирует печатную форму путевых листов 3
//
// Параметры:
//  ИмяМакета - табличный документ
//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
Функция уатПечать_3(ТекущийДокумент, ИмяМакета, ФлагПечати="") Экспорт
	Перем мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория;	
	
	мМаксСтрок = 18;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_ПутевойЛист";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатПутевойЛист." + ИмяМакета);
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ТабДокумент.ПолеСверху 	= 0;
	ТабДокумент.ПолеСлева 	= 0;
	ТабДокумент.ПолеСнизу 	= 0;
	ТабДокумент.ПолеСправа 	= 0;
	
	//печатаем лицевую сторону п/л
	Если ФлагПечати <>  2 И ФлагПечати <> 3 Тогда
		Обл   = Макет.ПолучитьОбласть("Лицевая");
		
		мНомерПЛ = уатОбщегоНазначенияТиповые.уатПолучитьНомерНаПечать(ТекущийДокумент);
//Рарус Владимир Подрезов 03.08.2016 УАТ 3.4.2
		Если ЗначениеЗаполнено(ТекущийДокумент.Подразделение) И ТекущийДокумент.Подразделение.пкВестиНумерациюПутевыхЛистов Тогда
//Рарус Владимир Подрезов Конец
		Обл.Параметры.Номер       	= мНомерПЛ;
//Рарус Владимир Подрезов 03.08.2016 УАТ 3.4.2
		Иначе
			Обл.Параметры.Номер       	= "";
		КонецЕсли;
//Рарус Владимир Подрезов Конец
		ФорматДаты      = "ДФ='дд ММММ гггг'";
		Обл.Параметры.ДатаВыписки 		= Формат(ТекущийДокумент.Дата, ФорматДаты);
//Рарус Владимир Подрезов 03.08.2016 УАТ 3.4.2
//		Обл.Параметры.ТекстДействителенДо = ?(ТекущийДокумент.ДействителенДо = '00010101', "", "Действителен до: " + Формат(ТекущийДокумент.ДействителенДо, ФорматДаты));
		Обл.Параметры.ТекстДействителенДо = ?(НачалоДня(ТекущийДокумент.ДатаВыезда)=НачалоДня(ТекущийДокумент.ДатаВозвращения), "", " - " + Формат(ТекущийДокумент.ДатаВозвращения, ФорматДаты)) ;
//Рарус Владимир Подрезов Конец
		Обл.Параметры.Организация  		= уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Организация, ТекущийДокумент.ДатаЗакрытия), "ПолноеНаименование,ЮридическийАдрес,Телефоны");
		Обл.Параметры.ОрганизацияРасшифровка = ТекущийДокумент.Организация;
		Обл.Параметры.КодПоОКПО = ТекущийДокумент.Организация.КодПоОКПО;
		Обл.Параметры.МодельТС = уатОбщегоНазначения.уатПредставлениеМоделиТС(ТекущийДокумент.ТранспортноеСредство);
		Обл.Параметры.ТипТС = ТекущийДокумент.ТранспортноеСредство.Тип;
		Обл.Параметры.ТранспортноеСредствоГосНомер = ТекущийДокумент.ТранспортноеСредство.Код;
		Обл.Параметры.ТранспортноеСредствоГарНомер = ТекущийДокумент.ТранспортноеСредство.уатГаражныйНомер;
		
		Обл.Параметры.Водители = уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ТекущийДокумент.Водитель1, ТекущийДокумент.Дата);
		мРеквизитыВодителя1 = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(ТекущийДокумент.Водитель1, ТекущийДокумент.Дата,, ТекущийДокумент.Организация);
		Если мРеквизитыВодителя1 <> Неопределено Тогда
			Обл.Параметры.ВодительКод 	= мРеквизитыВодителя1.ТабельныйНомер;
			Обл.Параметры.КлассВодителя = мРеквизитыВодителя1.Класс;
		КонецЕсли;
		
		уатОбщегоНазначения.уатУдостоверениеВодителя(ТекущийДокумент.Водитель1, мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория);	
		Обл.Параметры.НомерУдостоверенияВодителя = ?(СокрЛП(мВодительскоеУдСерия)="","",СокрЛП(мВодительскоеУдСерия) + " ") + мВодительскоеУдНомер;
		
		Обл.Параметры.ЛицензионнаяКарточка = ТекущийДокумент.ТранспортноеСредство.ЛицензионнаяКарточкаВид;
		Обл.Параметры.НомерЛицензионнойКарточки = ТекущийДокумент.ТранспортноеСредство.ЛицензионнаяКарточкаРегистрационныйНомер;
		Обл.Параметры.СерияЛицензионнойКарточки = ТекущийДокумент.ТранспортноеСредство.ЛицензионнаяКарточкаСерия;
		Обл.Параметры.НомерСерииЛицензионнойКарточки = ТекущийДокумент.ТранспортноеСредство.ЛицензионнаяКарточкаНомер;
		
//Рарус Владимир Подрезов 03.08.2016 УАТ 3.4.2
//		Обл.Параметры.ВремяВыезда = Формат(ТекущийДокумент.ДатаВыезда,"ДФ=ЧЧ:мм");
		//Обл.Параметры.ВремяВыезда = Формат(ТекущийДокумент.ДатаВыезда,"ДФ=dd.MM.yyyy");

//		Если ФлагПечати = 5 Или ФлагПечати = 4 Тогда
//			Обл.Параметры.ВремяВозврата = Формат(ТекущийДокумент.ДатаВозвращения,"ДФ=ЧЧ:мм");
//			Обл.Параметры.СпидометрВозвращения = ТекущийДокумент.СпидометрВозвращения;
//		КонецЕсли;
//		
		Обл.Параметры.ВремяВыезда			= "";
		Обл.Параметры.ВремяВозврата			= "";
		Обл.Параметры.СпидометрВозвращения	= "";
//Рарус Владимир Подрезов Конец
		
//Рарус Владимир Подрезов 28.11.2016 УАТ Протокол
//		Обл.Параметры.СпидометрВыезда = ТекущийДокумент.СпидометрВыезда;
		Обл.Параметры.СпидометрВыезда = "";
//Рарус Владимир Подрезов Конец
		
		Для Каждого ТекСтрока из ТекущийДокумент.РасходГСМ Цикл
			
			Если ТекСтрока.ТС = ТекущийДокумент.ТранспортноеСредство Тогда
				Если ТекСтрока.ГСМ = ТекСтрока.ТС.уатМодель.ОсновноеТопливо Тогда
					Обл.Параметры.ГСМ1	= ТекСтрока.ГСМ;
//Рарус Владимир Подрезов 28.11.2016 УАТ Протокол
//					Обл.Параметры.ОстатокПриВыезде1	= ТекСтрока.ОстатокПриВыезде;
					Обл.Параметры.ОстатокПриВыезде1	= "";
//Рарус Владимир Подрезов Конец
					Если ФлагПечати = 5 Или ФлагПечати = 4  Тогда
						Обл.Параметры.ОстатокПриВозвращении = ТекСтрока.ОстатокПриВозвращении;
						Обл.Параметры.РасходПоНорме = ТекСтрока.РасходПоНорме;
						Обл.Параметры.РасходФактический = ТекСтрока.РасходПоФакту;
						ЭкономияПережог = ТекСтрока.РасходПоНорме - ТекСтрока.РасходПоФакту;
						Если ЭкономияПережог < 0 Тогда
							Обл.Параметры.Перерасход = ЭкономияПережог *(-1);
						ИначеЕсли ЭкономияПережог > 0 Тогда
							Обл.Параметры.Экономия = ЭкономияПережог;
						Иначе
							Обл.Параметры.Экономия = ЭкономияПережог;
							Обл.Параметры.Перерасход = ЭкономияПережог;
						КонецЕсли;
				КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Обл.Параметры.ВыдалДиспетчер	= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.ВыдалДиспетчер.ФизическоеЛицо);
		Обл.Параметры.ВыпустилМеханик	= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.ВыпустилМеханик.ФизическоеЛицо);
		Обл.Параметры.ПринялМеханик		= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.ПринялМеханик.ФизическоеЛицо);
		Обл.Параметры.ВодительСдал		= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.Водитель1.ФизическоеЛицо);
		Обл.Параметры.ВодительПринял	= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.Водитель1.ФизическоеЛицо);
		Обл.Параметры.ОсмотрелВрач	= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.ОсмотрелВрач.ФизическоеЛицо);
		
		Если ТекущийДокумент.Задание.Количество() > 0 Тогда
			ТекСтрока = ТекущийДокумент.Задание[0]; //Для пут. листа легкового авто
			Если ЗначениеЗаполнено(ТекСтрока.Контрагент) Тогда
				Обл.Параметры.ВРаспоряжение	= ТекСтрока.Контрагент.НаименованиеПолное;
			ИначеЕсли ЗначениеЗаполнено(ТекСтрока.Подразделение) Тогда
				Обл.Параметры.ВРаспоряжение	= ТекСтрока.Подразделение.Наименование;
			КонецЕсли;	
			Обл.Параметры.АдресПрибытия	= ПредставлениеАдреса(ТекСтрока.АдресПрибытия);
		КонецЕсли;
		
		ТабДокумент.Вывести(Обл);
	КонецЕсли;
	
	Если ФлагПечати = 0 Или ФлагПечати = 4 Тогда	//Новая страница для печати полного пут. листа
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	//печатаем обратную сторону п/л
	Если ФлагПечати <> 1 И ФлагПечати <> 5 Тогда
		
		Обл   = Макет.ПолучитьОбласть("Оборотная");
		
		Если ФлагПечати = 3 Или ФлагПечати = 4 Тогда
			
			Для Каждого ТекСтрока из ТекущийДокумент.Задание Цикл
				
				ТекИндекс = ТекущийДокумент.Задание.Индекс(ТекСтрока) + 1;
				
				Если ТекИндекс > мМаксСтрок Тогда
					Прервать;
				КонецЕсли;
				
				стрОбласть = "Номер" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = ТекСтрока.НомерСтроки;
				стрОбласть = "ПунктОтправления" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = ПредставлениеАдреса(ТекСтрока.АдресПрибытия);
				стрОбласть = "ПунктНазначения" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = ПредставлениеАдреса(ТекСтрока.АдресУбытия);
				стрОбласть = "ВремяВыездаЧасы" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.ВремяПрибытия,"ДФ=HH");
				стрОбласть = "ВремяВыездаМин" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.ВремяПрибытия,"ДФ=mm");
				стрОбласть = "ВремяВозвращенияЧасы" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.ВремяУбытия,"ДФ=HH");
				стрОбласть = "ВремяВозвращенияМин" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.ВремяУбытия,"ДФ=mm");
				стрОбласть = "ПройденоКм" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = Строка((ТекСтрока.КоличествоКмГруз  + ТекСтрока.КоличествоКмПорожний) * ТекСтрока.КоличествоЕздок);
			КонецЦикла;
			ВыработкаТС = ТекущийДокумент.ВыработкаТС.Выгрузить();
			ВыработкаТС.Свернуть("ТС,ПараметрВыработки","Количество");
			Отбор = Новый Структура("ТС,ПараметрВыработки");
			Отбор.Вставить("ТС",ТекущийДокумент.ТранспортноеСредство);
			Отбор.Вставить("ПараметрВыработки",Справочники.уатПараметрыВыработки.ВремяВНаряде);
			ВремяВНаряде = ВыработкаТС.НайтиСтроки(Отбор);
			Если ВремяВНаряде.Количество() > 0 Тогда
				Обл.Параметры.ВремяВНаряде = Формат(уатОбщегоНазначения.уатВремяВЧЧ_ММ(ВремяВНаряде[0].Количество),"ЧДЦ=2; ЧРД=:");
			КонецЕсли;
			Отбор.Вставить("ПараметрВыработки",Справочники.уатПараметрыВыработки.ПробегОбщий);
			ПробегОбщий  = ВыработкаТС.НайтиСтроки(Отбор);;
			Если ПробегОбщий.Количество() > 0 Тогда
				Обл.Параметры.ПробегОбщий = ПробегОбщий[0].Количество;
			КонецЕсли;
			
		КонецЕсли;
		
		ТабДокумент.Вывести(Обл);
		
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции // Печать_3()

// Формирует печатную форму путевых листов
//
// Параметры:
//  ИмяМакета - табличный документ
//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
Функция уатПечать_3Спец(ТекущийДокумент, ИмяМакета, ФлагПечати="") Экспорт
	Перем мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория;	
	
	мМаксСтрок = 8;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_ПутевойЛист";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатПутевойЛист." + ИмяМакета);
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабДокумент.ПолеСверху 	= 0;
	ТабДокумент.ПолеСлева 	= 0;
	ТабДокумент.ПолеСнизу 	= 0;
	ТабДокумент.ПолеСправа 	= 0;
	
	//печатаем лицевую сторону п/л
	Если ФлагПечати <> 2 И ФлагПечати <> 3 Тогда 
		Обл = Макет.ПолучитьОбласть("Лицевая");
		
		мНомерПЛ = уатОбщегоНазначенияТиповые.уатПолучитьНомерНаПечать(ТекущийДокумент);
//Рарус Владимир Подрезов 03.08.2016 УАТ 3.4.2
		Если ЗначениеЗаполнено(ТекущийДокумент.Подразделение) И ТекущийДокумент.Подразделение.пкВестиНумерациюПутевыхЛистов Тогда
//Рарус Владимир Подрезов Конец
		Обл.Параметры.Номер       	= мНомерПЛ;
//Рарус Владимир Подрезов 03.08.2016 УАТ 3.4.2
		Иначе
			Обл.Параметры.Номер       	= "";
		КонецЕсли;
//Рарус Владимир Подрезов Конец
		ФорматДаты = "ДФ='дд ММММ гггг'";
		Обл.Параметры.ДатаВыписки = Формат(ТекущийДокумент.Дата, ФорматДаты);
//Рарус Владимир Подрезов 03.08.2016 УАТ 3.4.2
//		Обл.Параметры.ТекстДействителенДо = ?(ТекущийДокумент.ДействителенДо = '00010101', "", "Действителен до: " + Формат(ТекущийДокумент.ДействителенДо, ФорматДаты));
		Обл.Параметры.ТекстДействителенДо = ?(НачалоДня(ТекущийДокумент.ДатаВыезда)=НачалоДня(ТекущийДокумент.ДатаВозвращения), "", " - " + Формат(ТекущийДокумент.ДатаВозвращения, ФорматДаты)) ;
//Рарус Владимир Подрезов Конец
		Обл.Параметры.Организация = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(
		ТекущийДокумент.Организация, ТекущийДокумент.ДатаЗакрытия), "ПолноеНаименование,ЮридическийАдрес,Телефоны");
		Обл.Параметры.ОрганизацияРасшифровка = ТекущийДокумент.Организация;
		Обл.Параметры.КодПоОКПО = ТекущийДокумент.Организация.КодПоОКПО;
		Обл.Параметры.МодельТС = уатОбщегоНазначения.уатПредставлениеМоделиТС(ТекущийДокумент.ТранспортноеСредство);
		Обл.Параметры.ТипТС = ТекущийДокумент.ТранспортноеСредство.Тип;
		Обл.Параметры.ТранспортноеСредствоГосНомер = ТекущийДокумент.ТранспортноеСредство.Код;
		Обл.Параметры.ТранспортноеСредствоГарНомер = ТекущийДокумент.ТранспортноеСредство.уатГаражныйНомер;
		
		Если ТекущийДокумент.ТранспортноеСредство.уатКолонна <> Неопределено Тогда
			Обл.Параметры.Колонна = ТекущийДокумент.ТранспортноеСредство.уатКолонна.Код;
		КонецЕсли;	
		
		Водители = уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ТекущийДокумент.Водитель1, ТекущийДокумент.Дата);
		Если ЗначениеЗаполнено(ТекущийДокумент.Водитель2) Тогда
			Обл.Параметры.Водители = СокрЛП(Водители) +  ", " + уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ТекущийДокумент.Водитель2, ТекущийДокумент.Дата);
		Иначе
			Обл.Параметры.Водители = Водители;
		КонецЕсли;	
		мРеквизитыВодителя1 = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(ТекущийДокумент.Водитель1, ТекущийДокумент.Дата,, ТекущийДокумент.Организация);
		Если мРеквизитыВодителя1 <> Неопределено Тогда
			Обл.Параметры.ВодительКод 	= мРеквизитыВодителя1.ТабельныйНомер;
			Обл.Параметры.КлассВодителя = мРеквизитыВодителя1.Класс;
		КонецЕсли;
		
		уатОбщегоНазначения.уатУдостоверениеВодителя(ТекущийДокумент.Водитель1, мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория);	
		Обл.Параметры.НомерУдостоверенияВодителя = ?(СокрЛП(мВодительскоеУдСерия)="","",СокрЛП(мВодительскоеУдСерия) + " ") + мВодительскоеУдНомер;
		Обл.Параметры.ЛицензионнаяКарточка = ТекущийДокумент.ТранспортноеСредство.ЛицензионнаяКарточкаВид;
		Обл.Параметры.НомерЛицензионнойКарточки = ТекущийДокумент.ТранспортноеСредство.ЛицензионнаяКарточкаРегистрационныйНомер;
		Обл.Параметры.СерияЛицензионнойКарточки = ТекущийДокумент.ТранспортноеСредство.ЛицензионнаяКарточкаСерия;
		Обл.Параметры.НомерСерииЛицензионнойКарточки = ТекущийДокумент.ТранспортноеСредство.ЛицензионнаяКарточкаНомер;
		
		мТекИнд = 0;
		Для мИнд = 1 по ТекущийДокумент.Прицепы.Количество() Цикл
			мПрицеп = ТекущийДокумент.Прицепы[мИнд-1].ТС;
			Если мПрицеп.уатМодель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
				мТекИнд = мТекИнд + 1;
				Если мТекИнд = 1 Тогда
					Обл.Параметры.ПрицепМодель1  = уатОбщегоНазначения.уатПредставлениеМоделиТС(мПрицеп);
					Попытка
						Обл.Параметры.ПрицепГосНомер1  = мПрицеп.Код;
						Обл.Параметры.ПрицепГарНомер1  = мПрицеп.уатГаражныйНомер;
					Исключение
					КонецПопытки;	
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
		
//Рарус Владимир Подрезов 03.08.2016 УАТ 3.4.2
//		Обл.Параметры.ВремяВыезда		= Формат(ТекущийДокумент.ДатаВыезда,"ДФ=ЧЧ:мм");
		//Обл.Параметры.ВремяВыезда		= Формат(ТекущийДокумент.ДатаВыезда,"ДФ=dd.MM.yyyy");
		Обл.Параметры.ВремяВыезда = "";
//Рарус Владимир Подрезов Конец
		Обл.Параметры.ВремяВозвращения	= Формат(ТекущийДокумент.ДатаВозвращения,"ДФ=ЧЧ:мм");
		Если ТекущийДокумент.ВыдатьКоличествоГорючего > 0 Тогда
			Обл.Параметры.ВыдатьГорючее				= ТекущийДокумент.ВыдатьГорючее;
			Обл.Параметры.ВыдатьКоличествоГорючего  = ТекущийДокумент.ВыдатьКоличествоГорючего;
		КонецЕсли;	
		
//Рарус Владимир Подрезов 28.11.2016 УАТ Протокол
//		Обл.Параметры.СпидометрВыезда = ТекущийДокумент.СпидометрВыезда;
		Обл.Параметры.СпидометрВыезда = "";
//Рарус Владимир Подрезов Конец
		
		Для Каждого ТекСтрока из ТекущийДокумент.РасходГСМ Цикл
			Если ТекСтрока.ТС = ТекущийДокумент.ТранспортноеСредство Тогда
				Если ТекСтрока.ГСМ = ТекСтрока.ТС.уатМодель.ОсновноеТопливо Тогда
					Обл.Параметры.ГСМ1	= ТекСтрока.ГСМ;
//Рарус Владимир Подрезов 28.11.2016 УАТ Протокол
//					Обл.Параметры.ОстатокПриВыезде1	= ТекСтрока.ОстатокПриВыезде;
					Обл.Параметры.ОстатокПриВыезде1	= "";
//Рарус Владимир Подрезов Конец
				Иначе
					Обл.Параметры.ГСМ2	= ТекСтрока.ГСМ;
//Рарус Владимир Подрезов 28.11.2016 УАТ Протокол
//					Обл.Параметры.ОстатокПриВыезде2	= ТекСтрока.ОстатокПриВыезде;
					Обл.Параметры.ОстатокПриВыезде2	= "";
//Рарус Владимир Подрезов Конец
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
		Обл.Параметры.ВыдалДиспетчер	= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.ВыдалДиспетчер.ФизическоеЛицо);
		Обл.Параметры.ВыпустилМеханик	= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.ВыпустилМеханик.ФизическоеЛицо);
		Обл.Параметры.ПринялМеханик		= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.ПринялМеханик.ФизическоеЛицо);
		Обл.Параметры.ВодительСдал		= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.Водитель1.ФизическоеЛицо);
		Обл.Параметры.ВодительПринял	= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.Водитель1.ФизическоеЛицо);
		Обл.Параметры.ОсмотрелВрач  = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.ОсмотрелВрач.ФизическоеЛицо);
		
		Для Каждого ТекСтрока Из ТекущийДокумент.Задание Цикл
			ТекИндекс = ТекущийДокумент.Задание.Индекс(ТекСтрока) + 1;
			
			Если ТекИндекс > мМаксСтрок Тогда
				Прервать;
			КонецЕсли;
			
			стрОбласть = "ВРаспоряжение" + Строка(ТекИндекс);
			Если ЗначениеЗаполнено(ТекСтрока.Контрагент) Тогда
				Обл.Область(стрОбласть).Текст	= ТекСтрока.Контрагент.НаименованиеПолное;
			ИначеЕсли ЗначениеЗаполнено(ТекСтрока.Подразделение) Тогда
				Обл.Область(стрОбласть).Текст	= ТекСтрока.Подразделение.Наименование;
			КонецЕсли;
			Обл.Область(стрОбласть).Текст	= Обл.Область(стрОбласть).Текст + ?(ПредставлениеАдреса(ТекСтрока.АдресПрибытия)="","",", " +ПредставлениеАдреса(ТекСтрока.АдресПрибытия));
			стрОбласть = "ВремяПрибытия" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.ВремяПрибытия, ?(ТекСтрока.ВремяПрибытия - НачалоДня(ТекСтрока.ВремяПрибытия) = 0, "ДФ=dd.MM.yyyy", "ДФ='dd.MM.yyyy ЧЧ:мм'"));
			стрОбласть = "ВремяУбытия" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.ВремяУбытия, ?(ТекСтрока.ВремяУбытия - НачалоДня(ТекСтрока.ВремяУбытия) = 0, "ДФ=dd.MM.yyyy", "ДФ='dd.MM.yyyy ЧЧ:мм'"));
		КонецЦикла;
		
		ТабДокумент.Вывести(Обл);
	КонецЕсли;
	
	Если ФлагПечати = 0 Или ФлагПечати = 4 Тогда	//Новая страница для печати полного пут. листа
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	//печатаем обратную сторону п/л
	Если ФлагПечати <> 1 И ФлагПечати <> 5 Тогда
		
		Обл   = Макет.ПолучитьОбласть("Оборотная");
		
		ТабДокумент.Вывести(Обл);
		
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьПлатежногоПоручения()

// Формирует печатную форму путевых листов 4С
//
// Параметры:
//  ИмяМакета - табличный документ
//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
Функция уатПечать_4С(ТекущийДокумент, ИмяМакета, ФлагПечати="") Экспорт
	Перем мВодительскоеУдСерия , мВодительскоеУдНомер , мВодительскоеУдКатегория;	
	Перем мВодительскоеУдСерия2, мВодительскоеУдНомер2, мВодительскоеУдКатегория2;	
	
	мМаксСтрок = 5;
	мМаксСтрокПростоя = 3;
	мМаксСтрокПослЗаданий = 8;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_ПутевойЛист";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатПутевойЛист." + ИмяМакета);
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабДокумент.ПолеСверху 	= 0;
	ТабДокумент.ПолеСлева 	= 0;
	ТабДокумент.ПолеСнизу 	= 0;
	ТабДокумент.ПолеСправа 	= 0;
	
	//печатаем лицевую сторону п/л
	Если ФлагПечати <> 2 И ФлагПечати <> 3 Тогда
		Обл   = Макет.ПолучитьОбласть("Лицевая");
		
		мНомерПЛ = уатОбщегоНазначенияТиповые.уатПолучитьНомерНаПечать(ТекущийДокумент);
//Рарус Владимир Подрезов 03.08.2016 УАТ 3.4.2
		Если ЗначениеЗаполнено(ТекущийДокумент.Подразделение) И ТекущийДокумент.Подразделение.пкВестиНумерациюПутевыхЛистов Тогда
//Рарус Владимир Подрезов Конец
		Обл.Параметры.Номер       	= мНомерПЛ;
//Рарус Владимир Подрезов 03.08.2016 УАТ 3.4.2
		Иначе
			Обл.Параметры.Номер       	= "";
		КонецЕсли;
//Рарус Владимир Подрезов Конец
		ФорматДаты = "ДФ='дд ММММ гггг'";
		Обл.Параметры.ДатаВыписки = Формат(ТекущийДокумент.Дата, ФорматДаты);
//Рарус Владимир Подрезов 03.08.2016 УАТ 3.4.2
//		Обл.Параметры.ТекстДействителенДо = ?(ТекущийДокумент.ДействителенДо = '00010101', "", "Действителен до: " + Формат(ТекущийДокумент.ДействителенДо, ФорматДаты));
		Обл.Параметры.ТекстДействителенДо = ?(НачалоДня(ТекущийДокумент.ДатаВыезда)=НачалоДня(ТекущийДокумент.ДатаВозвращения), "", " - " + Формат(ТекущийДокумент.ДатаВозвращения, ФорматДаты)) ;
//Рарус Владимир Подрезов Конец
		Обл.Параметры.Организация = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(
		ТекущийДокумент.Организация, ТекущийДокумент.ДатаЗакрытия), "ПолноеНаименование, ЮридическийАдрес, Телефоны");
		Обл.Параметры.КодПоОКПО = ТекущийДокумент.Организация.КодПоОКПО;
		Обл.Параметры.МодельТС = уатОбщегоНазначения.уатПредставлениеМоделиТС(ТекущийДокумент.ТранспортноеСредство);
		Обл.Параметры.ТипТС = ТекущийДокумент.ТранспортноеСредство.Тип;
		Обл.Параметры.ТранспортноеСредствоГосНомер = ТекущийДокумент.ТранспортноеСредство.Код;
		Обл.Параметры.ТранспортноеСредствоГарНомер = ТекущийДокумент.ТранспортноеСредство.уатГаражныйНомер;
		Обл.Параметры.РежимРаботы = ТекущийДокумент.РежимРаботыТС;
		Если ТекущийДокумент.ТранспортноеСредство.уатКолонна <> Неопределено Тогда
			Обл.Параметры.Колонна = ТекущийДокумент.ТранспортноеСредство.уатКолонна.Код;
		КонецЕсли;	
		
		Если ТекущийДокумент.ВидПЛ = Перечисления.уатВидыПЛ._4П Тогда
			Обл.Параметры.НомерПЛВТалоне = мНомерПЛ;
			Обл.Параметры.ДатаПЛВТалоне = Формат(ТекущийДокумент.Дата, ФорматДаты);
		КонецЕсли;	
		
		мРеквизитыВодителя1 = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(ТекущийДокумент.Водитель1, ТекущийДокумент.Дата,, ТекущийДокумент.Организация);
		Обл.Параметры.Водитель1 = уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ТекущийДокумент.Водитель1, ТекущийДокумент.Дата);
		Обл.Параметры.Водитель1Расшифровка = ТекущийДокумент.Водитель1;
		Обл.Параметры.ВодительКод1 = мРеквизитыВодителя1.ТабельныйНомер;
		Если ЗначениеЗаполнено(ТекущийДокумент.Водитель2) Тогда
			мРеквизитыВодителя2 = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(ТекущийДокумент.Водитель2, ТекущийДокумент.Дата,, ТекущийДокумент.Организация);
			Обл.Параметры.Водитель2 = уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ТекущийДокумент.Водитель2, ТекущийДокумент.Дата);
			Обл.Параметры.Водитель2Расшифровка = ТекущийДокумент.Водитель2;
			Обл.Параметры.ВодительКод2 = мРеквизитыВодителя2.ТабельныйНомер;
		КонецЕсли;	
		
		Если мРеквизитыВодителя1 <> Неопределено Тогда
			Обл.Параметры.КлассВодителя = мРеквизитыВодителя1.Класс;
		КонецЕсли;
		
		уатОбщегоНазначения.уатУдостоверениеВодителя(ТекущийДокумент.Водитель1, мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория);
		Обл.Параметры.НомерУдостоверенияВодителя = ?(СокрЛП(мВодительскоеУдСерия)="","",СокрЛП(мВодительскоеУдСерия) + " ") + мВодительскоеУдНомер;
		
		уатОбщегоНазначения.уатУдостоверениеВодителя(ТекущийДокумент.Водитель2, мВодительскоеУдСерия2, мВодительскоеУдНомер2, мВодительскоеУдКатегория2);
		УдостоверениеВторогоВодителя = ?(СокрЛП(мВодительскоеУдСерия2)="","",СокрЛП(мВодительскоеУдСерия2) + " ") + мВодительскоеУдНомер2;
		Если СокрЛП(УдостоверениеВторогоВодителя) <> "" Тогда
			Обл.Параметры.НомерУдостоверенияВодителя = ?(СокрЛП(Обл.Параметры.НомерУдостоверенияВодителя)="",
			УдостоверениеВторогоВодителя, Обл.Параметры.НомерУдостоверенияВодителя + ", " + УдостоверениеВторогоВодителя);
		КонецЕсли;
		
		Обл.Параметры.ЛицензионнаяКарточка = ТекущийДокумент.ТранспортноеСредство.ЛицензионнаяКарточкаВид;
		Обл.Параметры.НомерЛицензионнойКарточки = ТекущийДокумент.ТранспортноеСредство.ЛицензионнаяКарточкаРегистрационныйНомер;
		Обл.Параметры.СерияЛицензионнойКарточки = ТекущийДокумент.ТранспортноеСредство.ЛицензионнаяКарточкаСерия;
		Обл.Параметры.НомерСерииЛицензионнойКарточки = ТекущийДокумент.ТранспортноеСредство.ЛицензионнаяКарточкаНомер;
		
		СопровождающиеЛица = уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ТекущийДокумент.Сотрудник1, ТекущийДокумент.Дата);
		Если ЗначениеЗаполнено(ТекущийДокумент.Сотрудник2) Тогда
			Обл.Параметры.СопровождающиеЛица = СокрЛП(СопровождающиеЛица) +  ", " + уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ТекущийДокумент.Сотрудник2, ТекущийДокумент.Дата);
		Иначе
			Обл.Параметры.СопровождающиеЛица = СопровождающиеЛица;
		КонецЕсли;
		
		мсвПрицепов = Новый Массив;
		
		Для Каждого ТекСтрока Из ТекущийДокумент.Прицепы Цикл 
			Если Текстрока.ТС.уатМодель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
				мсвПрицепов.Добавить(ТекСтрока.ТС);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекЗадание из ТекущийДокумент.Задание Цикл
			Если ЗначениеЗаполнено(ТекЗадание.Прицеп1) И ТекЗадание.Прицеп1.уатМодель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
				Прицеп = мсвПрицепов.Найти(ТекЗадание.Прицеп1);
				Если Прицеп = Неопределено Тогда
					мсвПрицепов.Добавить(ТекЗадание.Прицеп1);
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекЗадание.Прицеп2) И ТекЗадание.Прицеп2.уатМодель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
				Прицеп = мсвПрицепов.Найти(ТекЗадание.Прицеп2);
				Если Прицеп = Неопределено Тогда
					мсвПрицепов.Добавить(ТекЗадание.Прицеп2);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		мТекИнд = 0;
		Для мИнд = 1 по мсвПрицепов.Количество() Цикл
			мПрицеп = мсвПрицепов[мИнд-1];
			Если мПрицеп.уатМодель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
				мТекИнд = мТекИнд + 1;
				Если мТекИнд = 1 Тогда
					Обл.Параметры.ПрицепМодель1  = уатОбщегоНазначения.уатПредставлениеМоделиТС(мПрицеп);
					Попытка
						Обл.Параметры.ПрицепГосНомер1  = мПрицеп.Код;
						Обл.Параметры.ПрицепГарНомер1  = мПрицеп.уатГаражныйНомер;
					Исключение
					КонецПопытки;	
				ИначеЕсли мТекИнд = 2 Тогда
					Обл.Параметры.ПрицепМодель2  = уатОбщегоНазначения.уатПредставлениеМоделиТС(мПрицеп);
					Попытка
						Обл.Параметры.ПрицепГосНомер2  = мПрицеп.Код;
						Обл.Параметры.ПрицепГарНомер2  = мПрицеп.уатГаражныйНомер;
					Исключение
					КонецПопытки;	
				ИначеЕсли мТекИнд = 3 Тогда
					Обл.Параметры.ПрицепМодель3  = уатОбщегоНазначения.уатПредставлениеМоделиТС(мПрицеп);
					Попытка
						Обл.Параметры.ПрицепГосНомер3  = мПрицеп.Код;
						Обл.Параметры.ПрицепГарНомер3  = мПрицеп.уатГаражныйНомер;
					Исключение
					КонецПопытки;	
				ИначеЕсли мТекИнд = 4 Тогда
					Обл.Параметры.ПрицепМодель4  = уатОбщегоНазначения.уатПредставлениеМоделиТС(мПрицеп);
					Попытка
						Обл.Параметры.ПрицепГосНомер4  = мПрицеп.Код;
						Обл.Параметры.ПрицепГарНомер4  = мПрицеп.уатГаражныйНомер;
					Исключение
					КонецПопытки;	
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
		
		Обл.Параметры.ДатаВыезда_ДД = Формат(ТекущийДокумент.ДатаВыезда,"ДФ=дд");
		Обл.Параметры.ДатаВыезда_ММММ = Формат(ТекущийДокумент.ДатаВыезда,"ДФ=ММ");
//Рарус Владимир Подрезов 03.08.2016 УАТ 3.4.2
//		Обл.Параметры.ВремяВыезда_ЧЧ = Формат(ТекущийДокумент.ДатаВыезда,"ДФ=ЧЧ");
//		Обл.Параметры.ВремяВыезда_ММ = Формат(ТекущийДокумент.ДатаВыезда,"ДФ=мм");
		Обл.Параметры.ВремяВыезда_ЧЧ = "  ";
		Обл.Параметры.ВремяВыезда_ММ = "  ";
//Рарус Владимир Подрезов Конец
		
//Рарус Владимир Подрезов 28.11.2016 УАТ Протокол
//		Обл.Параметры.ДатаВозвращения_ДД = Формат(ТекущийДокумент.ДатаВозвращения,"ДФ=дд");
//		Обл.Параметры.ДатаВозвращения_ММММ = Формат(ТекущийДокумент.ДатаВозвращения,"ДФ=ММ");
//		Обл.Параметры.ВремяВозвращения_ЧЧ = Формат(ТекущийДокумент.ДатаВозвращения,"ДФ=ЧЧ");
//		Обл.Параметры.ВремяВозвращения_ММ = Формат(ТекущийДокумент.ДатаВозвращения,"ДФ=мм");
		Обл.Параметры.ДатаВозвращения_ДД = "   ";
		Обл.Параметры.ДатаВозвращения_ММММ = "   ";
		Обл.Параметры.ВремяВозвращения_ЧЧ = "  ";
		Обл.Параметры.ВремяВозвращения_ММ = "  ";
//Рарус Владимир Подрезов Конец
		
		Если ТекущийДокумент.ВыдатьКоличествоГорючего > 0 Тогда
			Обл.Параметры.ВыдатьГорючее = ТекущийДокумент.ВыдатьГорючее;
			Обл.Параметры.ВыдатьКоличествоГорючего = ТекущийДокумент.ВыдатьКоличествоГорючего;
		КонецЕсли;	
		
//Рарус Владимир Подрезов 28.11.2016 УАТ Протокол
//		Обл.Параметры.СпидометрВыезда = ТекущийДокумент.СпидометрВыезда;
		Обл.Параметры.СпидометрВыезда = "";
//Рарус Владимир Подрезов Конец
		
		Обл.Параметры.НулевойПробег = ТекущийДокумент.НулевойПробегВыезда;
		
		Если ФлагПечати = 5 Или ФлагПечати = 4  Тогда
			Обл.Параметры.НулевойПробегВозврат = ТекущийДокумент.НулевойПробегВозвращения;
			Обл.Параметры.СпидометрВозвращения = ТекущийДокумент.СпидометрВозвращения;
		КонецЕсли;

		Для Каждого ТекСтрока из ТекущийДокумент.РасходГСМ Цикл
			Если ТекСтрока.ТС = ТекущийДокумент.ТранспортноеСредство Тогда
				Если ТекСтрока.ГСМ = ТекСтрока.ТС.уатМодель.ОсновноеТопливо Тогда
					Обл.Параметры.ГСМ1	= ТекСтрока.ГСМ;
//Рарус Владимир Подрезов 28.11.2016 УАТ Протокол
//					Обл.Параметры.ОстатокПриВыезде1	= ТекСтрока.ОстатокПриВыезде;
					Обл.Параметры.ОстатокПриВыезде1	= "";
//Рарус Владимир Подрезов Конец
					Обл.Параметры.ВыданоГСМ1 = ТекСтрока.Выдано;
					Если ФлагПечати = 5 Или ФлагПечати = 4   Тогда
						Обл.Параметры.ОстатокПриВозвращении1 = ТекСтрока.ОстатокПриВозвращении;
						Обл.Параметры.СданоГСМ1 = ТекСтрока.Сдано;
					КонецЕсли;
				Иначе
					Обл.Параметры.ГСМ2	= ТекСтрока.ГСМ;
//Рарус Владимир Подрезов 28.11.2016 УАТ Протокол
//					Обл.Параметры.ОстатокПриВыезде2	= ТекСтрока.ОстатокПриВыезде;
					Обл.Параметры.ОстатокПриВыезде2	= "";
//Рарус Владимир Подрезов Конец
					Обл.Параметры.ВыданоГСМ2 = ТекСтрока.Выдано;
					Если ФлагПечати = 5 Или ФлагПечати = 4  Тогда
						Обл.Параметры.ОстатокПриВозвращении2 = ТекСтрока.ОстатокПриВозвращении;
						Обл.Параметры.СданоГСМ2 = ТекСтрока.Сдано;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
		
		Обл.Параметры.ВыдалДиспетчер = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.ВыдалДиспетчер.ФизическоеЛицо);
		Если СтрДлина(ТекущийДокумент.ВыпустилМеханик.ФизическоеЛицо) > 30 Тогда
			Обл.Параметры.ВыпустилМеханик = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.ВыпустилМеханик.ФизическоеЛицо);
		Иначе
			Обл.Параметры.ВыпустилМеханик = ТекущийДокумент.ВыпустилМеханик.ФизическоеЛицо;
		КонецЕсли;
		Обл.Параметры.ПринялМеханик = ТекущийДокумент.ПринялМеханик.ФизическоеЛицо;
		Если СтрДлина(ТекущийДокумент.Водитель1.ФизическоеЛицо) > 30 Тогда
			Обл.Параметры.ВодительПринял = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.Водитель1.ФизическоеЛицо);
		Иначе
			Обл.Параметры.ВодительПринял = ТекущийДокумент.Водитель1.ФизическоеЛицо;
		КонецЕсли;
		Обл.Параметры.ВодительСдал = ТекущийДокумент.Водитель1.ФизическоеЛицо;
		Обл.Параметры.ОсмотрелВрач = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.ОсмотрелВрач.ФизическоеЛицо);
		
		ЕздкиВсего      = 0;
		РасстояниеВсего = 0;
		ТонныВсего      = 0;
		Для Каждого ТекСтрока Из ТекущийДокумент.Задание Цикл
			ТекИндекс = ТекущийДокумент.Задание.Индекс(ТекСтрока) + 1;
			
			Если ТекИндекс > мМаксСтрок Тогда
				Прервать;
			КонецЕсли;
			
			стрОбласть = "ВРаспоряжение" + Строка(ТекИндекс);
			Если ЗначениеЗаполнено(ТекСтрока.Контрагент) Тогда
				Обл.Область(стрОбласть).Текст = ТекСтрока.Контрагент.НаименованиеПолное;
				Адрес_ = уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекСтрока.Контрагент, ТекущийДокумент.ДатаЗакрытия).ЮридическийАдрес;
				Если НЕ ПустаяСтрока(Адрес_) Тогда
					Обл.Область(стрОбласть).Текст = Обл.Область(стрОбласть).Текст + " " + Адрес_;
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(ТекСтрока.Подразделение) Тогда
				Обл.Область(стрОбласть).Текст = ТекСтрока.Подразделение.Наименование;
				
			КонецЕсли;	
			
			стрОбласть = "ВремяПрибытия" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.ВремяПрибытия, ?(ТекСтрока.ВремяПрибытия - НачалоДня(ТекСтрока.ВремяПрибытия) = 0, "ДФ=""дд.ММ.гг""", "ДФ=""дд.ММ.гг ЧЧ:мм"""));
			
			стрОбласть = "АдресПогрузки" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = ПредставлениеАдреса(ТекСтрока.АдресПрибытия);
			
			стрОбласть = "АдресРазгрузки" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = ПредставлениеАдреса(ТекСтрока.АдресУбытия);
			
			стрОбласть = "Груз" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = ТекСтрока.Номенклатура;
			
			ЕздкиВсего = ЕздкиВсего + ТекСтрока.КоличествоЕздок;
			стрОбласть = "КоличествоЕздок" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = ?(ТекСтрока.КоличествоЕздок = 0, "",ТекСтрока.КоличествоЕздок);
			
			РасстояниеВсего = РасстояниеВсего + ТекСтрока.КоличествоКмГруз;
			стрОбласть = "Расстояние" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = ?(ТекСтрока.КоличествоКмГруз = 0, "",ТекСтрока.КоличествоКмГруз);
			
			ТонныВсего = ТонныВсего + ТекСтрока.КоличествоТонн;
			стрОбласть = "Тонны" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = ?(ТекСтрока.КоличествоТонн = 0, "",ТекСтрока.КоличествоТонн);

		КонецЦикла;
		
		Обл.Область("ЕздкиВсего").Текст      = ?(ЕздкиВсего = 0, "", ЕздкиВсего);
		Обл.Область("РасстояниеВсего").Текст = ?(РасстояниеВсего = 0, "", РасстояниеВсего);
		Обл.Область("ТонныВсего").Текст      = ?(ТонныВсего = 0, "", ТонныВсего);
		
		ТабДокумент.Вывести(Обл);
	КонецЕсли;
	
	Если ФлагПечати = 0 Или ФлагПечати = 4 Тогда	//Новая страница для печати полного пут. листа
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	//печатаем обратную сторону п/л
	Если ФлагПечати <> 1 И ФлагПечати <> 5 Тогда
		
		Обл   = Макет.ПолучитьОбласть("Оборотная");
		
		Если ФлагПечати = 3 Или ФлагПечати = 4 Тогда
			
			Для Каждого ТекСтрока из ТекущийДокумент.Простои Цикл
				
				ТекИндекс = ТекущийДокумент.Простои.Индекс(ТекСтрока) + 1;
				
				Если ТекИндекс > мМаксСтрокПростоя Тогда
					Прервать;
				КонецЕсли;
				
				стрОбласть = "Видпростоя" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = ТекСтрока.ВидПростоя;
				стрОбласть = "Начало" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.НачалоПростоя,"ДФ='dd.MM.yyyy HH.mm'");
				стрОбласть = "Окончание" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.КонецПростоя,"ДФ='dd.MM.yyyy HH.mm'");
			КонецЦикла;
			ФорматЧисла = "ДФ=dd.MM.yyyy";
			ФорматЧасов = "ДФ=HH";
			ФорматМинут =  "ДФ=mm";
			Для Каждого ТекСтрока Из ТекущийДокумент.Задание Цикл
				ТекИндекс = ТекущийДокумент.Задание.Индекс(ТекСтрока) + 1;
				
				Если ТекИндекс > мМаксСтрокПослЗаданий Тогда
					Прервать;
				КонецЕсли;
				
				Если Не ТекСтрока.Выполнено Тогда
					Продолжить;
				КонецЕсли;
				
				стрОбласть = "ПунктПогрузкиРазгрузки" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = ПредставлениеАдреса(ТекСтрока.АдресПрибытия) + " - " + ПредставлениеАдреса(ТекСтрока.АдресУбытия);
				
				стрОбласть = "ЧислоПрибытие" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.ВремяПрибытия,ФорматЧисла);
				
				стрОбласть = "ЧасыПрибытие" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.ВремяПрибытия,ФорматЧасов);
				
				стрОбласть = "МинутПрибытие" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.ВремяПрибытия,ФорматМинут);
				
				стрОбласть = "ЧасыУбытие" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.ВремяУбытия,ФорматЧасов);
				
				стрОбласть = "МинутУбытие" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.ВремяУбытия,ФорматМинут);
				
				стрОбласть = "НаименованиеОтправителя" + Строка(ТекИндекс);
				Если ЗначениеЗаполнено(ТекСтрока.Контрагент) Тогда
					Обл.Область(стрОбласть).Текст = ТекСтрока.Контрагент.НаименованиеПолное;
				ИначеЕсли ЗначениеЗаполнено(ТекСтрока.Подразделение) Тогда
					Обл.Область(стрОбласть).Текст = ТекСтрока.Подразделение.Наименование;
				КонецЕсли;	
				
			КонецЦикла;
			
			Для Каждого ТекСтрока из ТекущийДокумент.РасходГСМ Цикл
				Если ТекСтрока.ТС = ТекущийДокумент.ТранспортноеСредство Тогда
					Если ТекСтрока.ГСМ = ТекСтрока.ТС.уатМодель.ОсновноеТопливо Тогда
						Обл.Параметры.РасходПоНорме = ТекСтрока.РасходПоНорме;
						Обл.Параметры.РасходФактический = ТекСтрока.РасходПоФакту;
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;
			ВыработкаТС = ТекущийДокумент.ВыработкаТС.Выгрузить();
			ВыработкаТС.Свернуть("ТС,ПараметрВыработки","Количество");
			Прицеп = Неопределено;
			Для Каждого ТекСтрока Из ТекущийДокумент.Прицепы Цикл 
				Если ТекСтрока.ТС.уатВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
					Прицеп = ТекСтрока.ТС;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Отбор = Новый Структура("ТС,ПараметрВыработки");
			Отбор.Вставить("ТС",ТекущийДокумент.ТранспортноеСредство);
			Отбор.Вставить("ПараметрВыработки",Справочники.уатПараметрыВыработки.ВремяВНаряде);
			ВремяВНарядеТС = ВыработкаТС.НайтиСтроки(Отбор);
			Если ВремяВНарядеТС.Количество() > 0 Тогда
				Обл.Параметры.ВремяВНарядеТС = Формат(уатОбщегоНазначения.уатВремяВЧЧ_ММ(ВремяВНарядеТС[0].Количество),"ЧДЦ=2; ЧРД=:");
			КонецЕсли;
			Отбор.Вставить("ПараметрВыработки",Справочники.уатПараметрыВыработки.КоличествоЕздок);
			ВсегоЕздок = ВыработкаТС.НайтиСтроки(Отбор);
			Если ВсегоЕздок.Количество() > 0 Тогда
				Обл.Параметры.ЕздокВсего = ВсегоЕздок[0].Количество;
			КонецЕсли;
			Отбор.Вставить("ПараметрВыработки",Справочники.уатПараметрыВыработки.ПробегОбщий);
			ПробегОбщийТС = ВыработкаТС.НайтиСтроки(Отбор);
			Если ПробегОбщийТС.Количество() > 0 Тогда
				Обл.Параметры.ПробегОбщийТС = ПробегОбщийТС[0].Количество;
			КонецЕсли;
			Отбор.Вставить("ПараметрВыработки",Справочники.уатПараметрыВыработки.ПробегСГрузом);
			ПробегСГрузомТС = ВыработкаТС.НайтиСтроки(Отбор);
			Если ПробегСГрузомТС.Количество() > 0 Тогда
				Обл.Параметры.ПробегСГрузомТС = ПробегСГрузомТС[0].Количество;
			КонецЕсли;
			Отбор.Вставить("ПараметрВыработки",Справочники.уатПараметрыВыработки.ВесГруза);
			ВсегоТонн = ВыработкаТС.НайтиСтроки(Отбор);
			Если ВсегоТонн.Количество() > 0 Тогда
				Обл.Параметры.ТоннВсего = ВсегоТонн[0].Количество;
			КонецЕсли;
			Отбор.Вставить("ПараметрВыработки",Справочники.уатПараметрыВыработки.ТнКм);
			ВсегоТКМ = ВыработкаТС.НайтиСтроки(Отбор);
			Если ВсегоТКМ.Количество() > 0 Тогда
				Обл.Параметры.ВсегоТКМ = ВсегоТКМ[0].Количество;
			КонецЕсли;
			
			Если Прицеп <> Неопределено Тогда
				Отбор.Вставить("ТС",Прицеп);
				Отбор.Вставить("ПараметрВыработки",Справочники.уатПараметрыВыработки.ПробегОбщий);
				ПробегОбщийТС = ВыработкаТС.НайтиСтроки(Отбор);
				Если ПробегОбщийТС.Количество() > 0 Тогда
					Обл.Параметры.ПробегОбщийПрицеп = ПробегОбщийТС[0].Количество;
				КонецЕсли;
				Отбор.Вставить("ПараметрВыработки",Справочники.уатПараметрыВыработки.ПробегСГрузом);
				ПробегСГрузомТС = ВыработкаТС.НайтиСтроки(Отбор);
				Если ПробегСГрузомТС.Количество() > 0 Тогда
					Обл.Параметры.ПробегСГрузомПрицеп = ПробегСГрузомТС[0].Количество;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		ТабДокумент.Вывести(Обл);
		
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции // Печать_4С()

// Формирует печатную форму путевых листов
//
// Параметры:
//  ИмяМакета - табличный документ
//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
Функция уатПечать_4М(ТекущийДокумент, ИмяМакета, ФлагПечати="") Экспорт
	Перем мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория;	
	
	мМаксСтрок = 5;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_ПутевойЛист";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатПутевойЛист." + ИмяМакета);
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабДокумент.ПолеСверху 	= 0;
	ТабДокумент.ПолеСлева 	= 0;
	ТабДокумент.ПолеСнизу 	= 0;
	ТабДокумент.ПолеСправа 	= 0;
	
	//печатаем лицевую сторону п/л
	Если ФлагПечати <> 2 И ФлагПечати <> 3 Тогда

		Обл   = Макет.ПолучитьОбласть("Лицевая");
		
		мНомерПЛ = уатОбщегоНазначенияТиповые.уатПолучитьНомерНаПечать(ТекущийДокумент);
//Рарус Владимир Подрезов 03.08.2016 УАТ 3.4.2
		Если ЗначениеЗаполнено(ТекущийДокумент.Подразделение) И ТекущийДокумент.Подразделение.пкВестиНумерациюПутевыхЛистов Тогда
//Рарус Владимир Подрезов Конец
		Обл.Параметры.Номер       	= мНомерПЛ;
//Рарус Владимир Подрезов 03.08.2016 УАТ 3.4.2
		Иначе
			Обл.Параметры.Номер       	= "";
		КонецЕсли;
//Рарус Владимир Подрезов Конец
		ФорматДаты = "ДФ='дд ММММ гггг'";
		Обл.Параметры.ДатаВыписки = Формат(ТекущийДокумент.Дата, ФорматДаты);
//Рарус Владимир Подрезов 03.08.2016 УАТ 3.4.2
//		Обл.Параметры.ТекстДействителенДо = ?(ТекущийДокумент.ДействителенДо = '00010101', "", "Действителен до: " + Формат(ТекущийДокумент.ДействителенДо, ФорматДаты));
		Обл.Параметры.ТекстДействителенДо = ?(НачалоДня(ТекущийДокумент.ДатаВыезда)=НачалоДня(ТекущийДокумент.ДатаВозвращения), "", " - " + Формат(ТекущийДокумент.ДатаВозвращения, ФорматДаты)) ;
//Рарус Владимир Подрезов Конец
		Обл.Параметры.Организация = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(
		ТекущийДокумент.Организация, ТекущийДокумент.ДатаЗакрытия), "ПолноеНаименование,ЮридическийАдрес,Телефоны");
		Обл.Параметры.МодельТС = уатОбщегоНазначения.уатПредставлениеМоделиТС(ТекущийДокумент.ТранспортноеСредство);
		Обл.Параметры.ТипТС = ТекущийДокумент.ТранспортноеСредство.Тип;
		Обл.Параметры.ТранспортноеСредствоГосНомер = ТекущийДокумент.ТранспортноеСредство.Код;
		Обл.Параметры.ТранспортноеСредствоГарНомер = ТекущийДокумент.ТранспортноеСредство.уатГаражныйНомер;
		Обл.Параметры.РежимРаботы = ТекущийДокумент.РежимРаботыТС;
		Если ТекущийДокумент.ТранспортноеСредство.уатКолонна <> Неопределено Тогда
			Обл.Параметры.Колонна = ТекущийДокумент.ТранспортноеСредство.уатКолонна.Код;
		КонецЕсли;	
		
		мРеквизитыВодителя1 = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(ТекущийДокумент.Водитель1, ТекущийДокумент.Дата,, ТекущийДокумент.Организация);
		уатОбщегоНазначения.уатУдостоверениеВодителя(ТекущийДокумент.Водитель1, мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория);	
		Обл.Параметры.Водитель1 = уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ТекущийДокумент.Водитель1, ТекущийДокумент.Дата) + ", № " + мВодительскоеУдСерия + " " + мВодительскоеУдНомер
		+ ?(мРеквизитыВодителя1 = Неопределено, "", ", кл. " + мРеквизитыВодителя1.Класс);
		Обл.Параметры.Водитель1Расшифровка = ТекущийДокумент.Водитель1;
		
		Если мРеквизитыВодителя1 <> Неопределено Тогда
			Обл.Параметры.ВодительКод1 = мРеквизитыВодителя1.ТабельныйНомер;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущийДокумент.Водитель2) Тогда
			мРеквизитыВодителя2 = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(ТекущийДокумент.Водитель2, ТекущийДокумент.Дата,, ТекущийДокумент.Организация);
			уатОбщегоНазначения.уатУдостоверениеВодителя(ТекущийДокумент.Водитель2, мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория);	
			Обл.Параметры.Водитель2 = уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ТекущийДокумент.Водитель2, ТекущийДокумент.Дата)
			+ ", № " + мВодительскоеУдСерия + " " + мВодительскоеУдНомер + ?(мРеквизитыВодителя2 = Неопределено, "", ", кл. " + мРеквизитыВодителя2.Класс);
			Обл.Параметры.Водитель2Расшифровка = ТекущийДокумент.Водитель2;
		КонецЕсли;
		
		Если мРеквизитыВодителя2 <> Неопределено Тогда
			Обл.Параметры.ВодительКод2 = мРеквизитыВодителя2.ТабельныйНомер;
		КонецЕсли;
		
		СопровождающиеЛица = уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ТекущийДокумент.Сотрудник1, ТекущийДокумент.Дата);
		Если ЗначениеЗаполнено(ТекущийДокумент.Сотрудник2) Тогда
			Обл.Параметры.СопровождающиеЛица = СокрЛП(СопровождающиеЛица) +  ", " + уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ТекущийДокумент.Сотрудник2, ТекущийДокумент.Дата);
		Иначе
			Обл.Параметры.СопровождающиеЛица = СопровождающиеЛица;
		КонецЕсли;	
		
		мсвПрицепов = Новый Массив;
		
		Для Каждого ТекСтрока Из ТекущийДокумент.Прицепы Цикл 
			Если Текстрока.ТС.уатМодель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
				мсвПрицепов.Добавить(ТекСтрока.ТС);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекЗадание из ТекущийДокумент.Задание Цикл
			Если ЗначениеЗаполнено(ТекЗадание.Прицеп1) И ТекЗадание.Прицеп1.уатМодель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
				Прицеп = мсвПрицепов.Найти(ТекЗадание.Прицеп1);
				Если Прицеп = Неопределено Тогда
					мсвПрицепов.Добавить(ТекЗадание.Прицеп1);
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекЗадание.Прицеп2) И ТекЗадание.Прицеп2.уатМодель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
				Прицеп = мсвПрицепов.Найти(ТекЗадание.Прицеп2);
				Если Прицеп = Неопределено Тогда
					мсвПрицепов.Добавить(ТекЗадание.Прицеп2);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		мТекИнд = 0;
		Для мИнд = 1 по мсвПрицепов.Количество() Цикл
			мПрицеп = мсвПрицепов[мИнд-1];
			Если мПрицеп.уатМодель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
				мТекИнд = мТекИнд + 1;
				Если мТекИнд = 1 Тогда
					Обл.Параметры.ПрицепМодель1  = уатОбщегоНазначения.уатПредставлениеМоделиТС(мПрицеп);
					Попытка
						Обл.Параметры.ПрицепГосНомер1  = мПрицеп.Код;
						Обл.Параметры.ПрицепГарНомер1  = мПрицеп.уатГаражныйНомер;
					Исключение
					КонецПопытки;	
				ИначеЕсли мТекИнд = 2 Тогда
					Обл.Параметры.ПрицепМодель2  = уатОбщегоНазначения.уатПредставлениеМоделиТС(мПрицеп);
					Попытка
						Обл.Параметры.ПрицепГосНомер2  = мПрицеп.Код;
						Обл.Параметры.ПрицепГарНомер2  = мПрицеп.уатГаражныйНомер;
					Исключение
					КонецПопытки;	
				ИначеЕсли мТекИнд = 3 Тогда
					Обл.Параметры.ПрицепМодель3  = уатОбщегоНазначения.уатПредставлениеМоделиТС(мПрицеп);
					Попытка
						Обл.Параметры.ПрицепГосНомер3  = мПрицеп.Код;
						Обл.Параметры.ПрицепГарНомер3  = мПрицеп.уатГаражныйНомер;
					Исключение
					КонецПопытки;	
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
		
		Обл.Параметры.ДатаВыезда_ДД = Формат(ТекущийДокумент.ДатаВыезда,"ДФ=дд");
		Обл.Параметры.ДатаВыезда_ММММ = Формат(ТекущийДокумент.ДатаВыезда,"ДФ=ММ");
//Рарус Владимир Подрезов 03.08.2016 УАТ 3.4.2
//		Обл.Параметры.ВремяВыезда_ЧЧ = Формат(ТекущийДокумент.ДатаВыезда,"ДФ=ЧЧ");
//		Обл.Параметры.ВремяВыезда_ММ = Формат(ТекущийДокумент.ДатаВыезда,"ДФ=мм");
		Обл.Параметры.ВремяВыезда_ЧЧ = "  ";
		Обл.Параметры.ВремяВыезда_ММ = "  ";
//Рарус Владимир Подрезов Конец
		
//Рарус Владимир Подрезов 28.11.2016 УАТ Протокол
//		Обл.Параметры.ДатаВозвращения_ДД = Формат(ТекущийДокумент.ДатаВозвращения,"ДФ=дд");
//		Обл.Параметры.ДатаВозвращения_ММММ = Формат(ТекущийДокумент.ДатаВозвращения,"ДФ=ММ");
//		Обл.Параметры.ВремяВозвращения_ЧЧ = Формат(ТекущийДокумент.ДатаВозвращения,"ДФ=ЧЧ");
//		Обл.Параметры.ВремяВозвращения_ММ = Формат(ТекущийДокумент.ДатаВозвращения,"ДФ=мм");
		Обл.Параметры.ДатаВозвращения_ДД = "   ";
		Обл.Параметры.ДатаВозвращения_ММММ = "   ";
		Обл.Параметры.ВремяВозвращения_ЧЧ = "  ";
		Обл.Параметры.ВремяВозвращения_ММ = "  ";
//Рарус Владимир Подрезов Конец
		
		Если ТекущийДокумент.ВыдатьКоличествоГорючего > 0 Тогда
			Обл.Параметры.ВыдатьГорючее = ТекущийДокумент.ВыдатьГорючее;
			Обл.Параметры.ВыдатьКоличествоГорючего = ТекущийДокумент.ВыдатьКоличествоГорючего;
		КонецЕсли;	
		
//Рарус Владимир Подрезов 28.11.2016 УАТ Протокол
//		Обл.Параметры.СпидометрВыезда = ТекущийДокумент.СпидометрВыезда;
		Обл.Параметры.СпидометрВыезда = "";
//Рарус Владимир Подрезов Конец

		Обл.Параметры.НулевойПробег = ТекущийДокумент.НулевойПробегВыезда;
		
		Для Каждого ТекСтрока из ТекущийДокумент.РасходГСМ Цикл
			Если ТекСтрока.ТС = ТекущийДокумент.ТранспортноеСредство Тогда
				Если ТекСтрока.ГСМ = ТекСтрока.ТС.уатМодель.ОсновноеТопливо Тогда
					Обл.Параметры.ГСМ1	= ТекСтрока.ГСМ;
//Рарус Владимир Подрезов 28.11.2016 УАТ Протокол
//					Обл.Параметры.ОстатокПриВыезде1	= ТекСтрока.ОстатокПриВыезде;
					Обл.Параметры.ОстатокПриВыезде1	= "";
//Рарус Владимир Подрезов Конец
				Иначе
					Обл.Параметры.ГСМ2	= ТекСтрока.ГСМ;
//Рарус Владимир Подрезов 28.11.2016 УАТ Протокол
//					Обл.Параметры.ОстатокПриВыезде2	= ТекСтрока.ОстатокПриВыезде;
					Обл.Параметры.ОстатокПриВыезде2	= "";
//Рарус Владимир Подрезов Конец
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
		Обл.Параметры.ВыдалДиспетчер	= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.ВыдалДиспетчер.ФизическоеЛицо);
		Обл.Параметры.ВыпустилМеханик	= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.ВыпустилМеханик.ФизическоеЛицо);
		Обл.Параметры.ПринялМеханик		= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.ПринялМеханик.ФизическоеЛицо);
		Обл.Параметры.ВодительСдал		= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.Водитель1.ФизическоеЛицо);
		Обл.Параметры.ВодительПринял	= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.Водитель1.ФизическоеЛицо);
		Обл.Параметры.ОсмотрелВрач  = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.ОсмотрелВрач.ФизическоеЛицо);
		
		ЕздкиВсего      = 0;
		РасстояниеВсего = 0;
		ТонныВсего      = 0;
		Для Каждого ТекСтрока Из ТекущийДокумент.Задание Цикл
			ТекИндекс = ТекущийДокумент.Задание.Индекс(ТекСтрока) + 1;
			
			Если ТекИндекс > мМаксСтрок Тогда
				Прервать;
			КонецЕсли;
			
			стрОбласть = "ВРаспоряжение" + Строка(ТекИндекс);
			Если ЗначениеЗаполнено(ТекСтрока.Контрагент) Тогда
				Обл.Область(стрОбласть).Текст	= ТекСтрока.Контрагент.НаименованиеПолное;
			ИначеЕсли ЗначениеЗаполнено(ТекСтрока.Подразделение) Тогда
				Обл.Область(стрОбласть).Текст	= ТекСтрока.Подразделение.Наименование;
			КонецЕсли;	
			стрОбласть = "ВремяПрибытия" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.ВремяПрибытия, ?(ТекСтрока.ВремяПрибытия - НачалоДня(ТекСтрока.ВремяПрибытия) = 0, "ДФ=dd.MM.yyyy", "ДФ='dd.MM.yyyy ЧЧ:мм'"));
			стрОбласть = "АдресПогрузки" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = ПредставлениеАдреса(ТекСтрока.АдресПрибытия);
			стрОбласть = "АдресРазгрузки" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = ПредставлениеАдреса(ТекСтрока.АдресУбытия);
			стрОбласть = "Груз" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = ТекСтрока.Номенклатура;
			ЕздкиВсего = ЕздкиВсего + ТекСтрока.КоличествоЕздок;
			стрОбласть = "КоличествоЕздок" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = ?(ТекСтрока.КоличествоЕздок = 0, "",ТекСтрока.КоличествоЕздок);
			РасстояниеВсего = РасстояниеВсего + ТекСтрока.КоличествоКмГруз;
			стрОбласть = "Расстояние" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = ?(ТекСтрока.КоличествоКмГруз = 0, "",ТекСтрока.КоличествоКмГруз);
			ТонныВсего = ТонныВсего + ТекСтрока.КоличествоТонн;
			стрОбласть = "Тонны" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = ?(ТекСтрока.КоличествоТонн = 0, "",ТекСтрока.КоличествоТонн);

		КонецЦикла;
		
		Обл.Область("ЕздкиВсего").Текст      = ?(ЕздкиВсего = 0, "", ЕздкиВсего);
		Обл.Область("РасстояниеВсего").Текст = ?(РасстояниеВсего = 0, "", РасстояниеВсего);
		Обл.Область("ТонныВсего").Текст      = ?(ТонныВсего = 0, "", ТонныВсего);
		
		ТабДокумент.Вывести(Обл);
	КонецЕсли;
	
	Если ФлагПечати = 0 Или ФлагПечати = 4 Тогда	//Новая страница для печати полного пут. листа
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	//печатаем обратную сторону п/л
	Если ФлагПечати <> 1 И ФлагПечати <> 5 Тогда
		
		Обл   = Макет.ПолучитьОбласть("Оборотная");
		
		Для Каждого ТекСтрока из ТекущийДокумент.РасходГСМ Цикл
			Если ТекСтрока.ТС = ТекущийДокумент.ТранспортноеСредство Тогда
				Если ТекСтрока.ГСМ = ТекСтрока.ТС.уатМодель.ОсновноеТопливо Тогда
					Обл.Параметры.РасходПоНорме = ТекСтрока.РасходПоНорме;
					Обл.Параметры.РасходФактический = ТекСтрока.РасходПоФакту;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		
		ТабДокумент.Вывести(Обл);
		
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьПлатежногоПоручения()

// Формирует печатную форму путевых листов
//
// Параметры:
//  ИмяМакета - табличный документ
//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
Функция уатПечать_6С(ТекущийДокумент, ИмяМакета, ФлагПечати="") Экспорт
	Перем мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория;	
	
	мМаксСтрок = 5;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_ПутевойЛист";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатПутевойЛист." + ИмяМакета);
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабДокумент.ПолеСверху 	= 0;
	ТабДокумент.ПолеСлева 	= 0;
	ТабДокумент.ПолеСнизу 	= 0;
	ТабДокумент.ПолеСправа 	= 0;
	
	//печатаем лицевую сторону п/л
	Если ФлагПечати <> 2 И ФлагПечати <> 3 Тогда
		Обл   = Макет.ПолучитьОбласть("Лицевая");
		
		мНомерПЛ = уатОбщегоНазначенияТиповые.уатПолучитьНомерНаПечать(ТекущийДокумент);
		ФорматДаты = "ДФ='дд ММММ гггг'";
//Рарус Владимир Подрезов 03.08.2016 УАТ 3.4.2
		Если ЗначениеЗаполнено(ТекущийДокумент.Подразделение) И ТекущийДокумент.Подразделение.пкВестиНумерациюПутевыхЛистов Тогда
//Рарус Владимир Подрезов Конец
		Обл.Параметры.Номер       	= мНомерПЛ;
//Рарус Владимир Подрезов 03.08.2016 УАТ 3.4.2
		Иначе
			Обл.Параметры.Номер       	= "";
		КонецЕсли;
//Рарус Владимир Подрезов Конец
		Обл.Параметры.ДатаВыписки = Формат(ТекущийДокумент.Дата, ФорматДаты);
//Рарус Владимир Подрезов 03.08.2016 УАТ 3.4.2
//		Обл.Параметры.ТекстДействителенДо = ?(ТекущийДокумент.ДействителенДо = '00010101', "", "Действителен до: " + Формат(ТекущийДокумент.ДействителенДо, ФорматДаты));
		Обл.Параметры.ТекстДействителенДо = ?(НачалоДня(ТекущийДокумент.ДатаВыезда)=НачалоДня(ТекущийДокумент.ДатаВозвращения), "", " - " + Формат(ТекущийДокумент.ДатаВозвращения, ФорматДаты)) ;
//Рарус Владимир Подрезов Конец
		Обл.Параметры.Организация  		= уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(
		ТекущийДокумент.Организация, ТекущийДокумент.ДатаЗакрытия), "ПолноеНаименование,ЮридическийАдрес,Телефоны");
		Обл.Параметры.КодПоОКПО = ТекущийДокумент.Организация.КодПоОКПО;
		Обл.Параметры.МодельТС = уатОбщегоНазначения.уатПредставлениеМоделиТС(ТекущийДокумент.ТранспортноеСредство);
		Обл.Параметры.ТипТС = ТекущийДокумент.ТранспортноеСредство.Тип;
		Обл.Параметры.ТранспортноеСредствоГосНомер = ТекущийДокумент.ТранспортноеСредство.Код;
		Обл.Параметры.ТранспортноеСредствоГарНомер = ТекущийДокумент.ТранспортноеСредство.уатГаражныйНомер;
		Если ТекущийДокумент.ТранспортноеСредство.уатКолонна <> Неопределено Тогда
			Обл.Параметры.Колонна = ТекущийДокумент.ТранспортноеСредство.уатКолонна.Код;
		КонецЕсли;	
		Если ТекущийДокумент.ВидПЛ = Перечисления.уатВидыПЛ._4П Тогда
			Обл.Параметры.НомерПЛВТалоне = мНомерПЛ;
			Обл.Параметры.ДатаПЛВТалоне = Формат(ТекущийДокумент.Дата, ФорматДаты);
		КонецЕсли;	
		
		Водители = уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ТекущийДокумент.Водитель1, ТекущийДокумент.Дата);
		Если ЗначениеЗаполнено(ТекущийДокумент.Водитель2) Тогда
			Обл.Параметры.Водители  = СокрЛП(Водители) +  ", " + уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ТекущийДокумент.Водитель2, ТекущийДокумент.Дата);
		Иначе
			Обл.Параметры.Водители  = Водители;
		КонецЕсли;	
		мРеквизитыВодителя1 = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(ТекущийДокумент.Водитель1, ТекущийДокумент.Дата,, ТекущийДокумент.Организация);
		
		Если мРеквизитыВодителя1 <> Неопределено Тогда
			Обл.Параметры.ВодительКод 	= мРеквизитыВодителя1.ТабельныйНомер;
			Обл.Параметры.КлассВодителя = мРеквизитыВодителя1.Класс;
		КонецЕсли;
		
		уатОбщегоНазначения.уатУдостоверениеВодителя(ТекущийДокумент.Водитель1, мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория);	
		Обл.Параметры.НомерУдостоверенияВодителя = ?(СокрЛП(мВодительскоеУдСерия)="","",СокрЛП(мВодительскоеУдСерия) + " ") + мВодительскоеУдНомер;
		
		Если ЗначениеЗаполнено(ТекущийДокумент.Водитель2) Тогда
			уатОбщегоНазначения.уатУдостоверениеВодителя(ТекущийДокумент.Водитель2, мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория);	
			Обл.Параметры.НомерУдостоверенияВодителя  = СокрЛП(Обл.Параметры.НомерУдостоверенияВодителя) + ", "
			+ ?(СокрЛП(мВодительскоеУдСерия)="","",СокрЛП(мВодительскоеУдСерия) + " ") + мВодительскоеУдНомер;
		КонецЕсли;
		
		Обл.Параметры.ЛицензионнаяКарточка = ТекущийДокумент.ТранспортноеСредство.ЛицензионнаяКарточкаВид;
		Обл.Параметры.НомерЛицензионнойКарточки = ТекущийДокумент.ТранспортноеСредство.ЛицензионнаяКарточкаРегистрационныйНомер;
		Обл.Параметры.СерияЛицензионнойКарточки = ТекущийДокумент.ТранспортноеСредство.ЛицензионнаяКарточкаСерия;
		Обл.Параметры.НомерСерииЛицензионнойКарточки = ТекущийДокумент.ТранспортноеСредство.ЛицензионнаяКарточкаНомер;
		
//Рарус Владимир Подрезов 03.08.2016 УАТ 3.4.2
//		Обл.Параметры.ВремяВыезда		= Формат(ТекущийДокумент.ДатаВыезда,"ДФ=ЧЧ:мм");
		//Обл.Параметры.ВремяВыезда		= Формат(ТекущийДокумент.ДатаВыезда,"ДФ=dd.MM.yyyy");
		Обл.Параметры.ВремяВыезда = "";
//Рарус Владимир Подрезов Конец
		Обл.Параметры.ВремяВозвращения	= Формат(ТекущийДокумент.ДатаВозвращения,"ДФ=ЧЧ:мм");
		Если ТекущийДокумент.ВыдатьКоличествоГорючего > 0 Тогда
			Обл.Параметры.ВыдатьГорючее				= ТекущийДокумент.ВыдатьГорючее;
			Обл.Параметры.ВыдатьКоличествоГорючего  = ТекущийДокумент.ВыдатьКоличествоГорючего;
		КонецЕсли;	
		
//Рарус Владимир Подрезов 28.11.2016 УАТ Протокол
//		Обл.Параметры.СпидометрВыезда 		= ТекущийДокумент.СпидометрВыезда;
		Обл.Параметры.СпидометрВыезда 		= "";
//Рарус Владимир Подрезов Конец

		Обл.Параметры.СпидометрВозвращения	= ТекущийДокумент.СпидометрВозвращения;
		Обл.Параметры.НулевойПробегВыезда	= ТекущийДокумент.НулевойПробегВыезда;
		Обл.Параметры.НулевойПробегВозвращения = ТекущийДокумент.НулевойПробегВозвращения;
		
		Для Каждого ТекСтрока из ТекущийДокумент.РасходГСМ Цикл
			Если ТекСтрока.ТС = ТекущийДокумент.ТранспортноеСредство Тогда
				Если ТекСтрока.ГСМ = ТекСтрока.ТС.уатМодель.ОсновноеТопливо Тогда
					Обл.Параметры.ГСМ1	= ТекСтрока.ГСМ;
//Рарус Владимир Подрезов 28.11.2016 УАТ Протокол
//					Обл.Параметры.ОстатокПриВыезде1	= ТекСтрока.ОстатокПриВыезде;
					Обл.Параметры.ОстатокПриВыезде1	= "";
//Рарус Владимир Подрезов Конец
				Иначе
					Обл.Параметры.ГСМ2	= ТекСтрока.ГСМ;
//Рарус Владимир Подрезов 28.11.2016 УАТ Протокол
//					Обл.Параметры.ОстатокПриВыезде2	= ТекСтрока.ОстатокПриВыезде;
					Обл.Параметры.ОстатокПриВыезде2	= "";
//Рарус Владимир Подрезов Конец
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
		Обл.Параметры.ВыдалДиспетчер	= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.ВыдалДиспетчер.ФизическоеЛицо);
		Обл.Параметры.ВыпустилМеханик	= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.ВыпустилМеханик.ФизическоеЛицо);
		Обл.Параметры.ПринялМеханик		= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.ПринялМеханик.ФизическоеЛицо);
		Обл.Параметры.ВодительСдал		= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.Водитель1.ФизическоеЛицо);
		Обл.Параметры.ВодительПринял	= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.Водитель1.ФизическоеЛицо);
		Обл.Параметры.ОсмотрелВрач  = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.ОсмотрелВрач.ФизическоеЛицо);
		
//Рарус Владимир Подрезов 03.08.2016 УАТ 3.4.2
		Если ЗначениеЗаполнено(ТекущийДокумент.Подразделение) И ТекущийДокумент.Подразделение.пкВестиНумерациюПутевыхЛистов Тогда
//Рарус Владимир Подрезов Конец
		Обл.Параметры.СтрПутевойЛист  = "№" + ТекущийДокумент.Номер + " от " + Формат(ТекущийДокумент.Дата, "ДЛФ=D");
//Рарус Владимир Подрезов 03.08.2016 УАТ 3.4.2
		Иначе
			Обл.Параметры.СтрПутевойЛист  = "№_______________ от " + Формат(ТекущийДокумент.Дата, "ДЛФ=D");
		КонецЕсли;
//Рарус Владимир Подрезов Конец
		
		Для Каждого ТекСтрока Из ТекущийДокумент.Задание Цикл
			ТекИндекс = ТекущийДокумент.Задание.Индекс(ТекСтрока) + 1;
			
			Если ТекИндекс > мМаксСтрок Тогда
				Прервать;
			КонецЕсли;
			
			стрОбласть = "ВРаспоряжение" + Строка(ТекИндекс);
			Если ЗначениеЗаполнено(ТекСтрока.Контрагент) Тогда
				Обл.Область(стрОбласть).Текст = ТекСтрока.Контрагент.НаименованиеПолное;
			ИначеЕсли ЗначениеЗаполнено(ТекСтрока.Подразделение) Тогда
				Обл.Область(стрОбласть).Текст = ТекСтрока.Подразделение.Наименование;
			КонецЕсли;	
			стрОбласть = "ВремяПрибытия" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = ?(ТекСтрока.ВремяПрибытия - НачалоДня(ТекСтрока.ВремяПрибытия) = 0, "", Формат(ТекСтрока.ВремяПрибытия, "ДФ=ЧЧ:мм"));
			стрОбласть = "ВремяУбытия" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = ?(ТекСтрока.ВремяУбытия - НачалоДня(ТекСтрока.ВремяУбытия) = 0, "", Формат(ТекСтрока.ВремяУбытия, "ДФ=ЧЧ:мм"));
			стрОбласть = "КоличествоЕздок" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = ?(ТекСтрока.КоличествоЕздок = 0, "",ТекСтрока.КоличествоЕздок);
			стрОбласть = "КоличествоЧасов" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = ?(ТекСтрока.КоличествоЧасов = 0, "",ТекСтрока.КоличествоЧасов);
			
		КонецЦикла;
		
		ТабДокумент.Вывести(Обл);
	КонецЕсли;
	
	Если ФлагПечати = 0 Или ФлагПечати = 4 Тогда	//Новая страница для печати полного пут. листа
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	//печатаем обратную сторону п/л
	Если ФлагПечати <> 1 И ФлагПечати <> 5 Тогда
		
		Обл   = Макет.ПолучитьОбласть("Оборотная");
		
		Обл.Параметры.Организация  		= ТекущийДокумент.Организация;
		Обл.Параметры.МодельТС  		= уатОбщегоНазначения.уатПредставлениеМоделиТС(ТекущийДокумент.ТранспортноеСредство);
		Обл.Параметры.ТранспортноеСредствоГосНомер	= ТекущийДокумент.ТранспортноеСредство.Код;
//Рарус Владимир Подрезов 03.08.2016 УАТ 3.4.2
		Если ЗначениеЗаполнено(ТекущийДокумент.Подразделение) И ТекущийДокумент.Подразделение.пкВестиНумерациюПутевыхЛистов Тогда
//Рарус Владимир Подрезов Конец
		Обл.Параметры.СтрПутевойЛист  = "№" + ТекущийДокумент.Номер + " от " + Формат(ТекущийДокумент.Дата, "ДЛФ=D");
//Рарус Владимир Подрезов 03.08.2016 УАТ 3.4.2
		Иначе
			Обл.Параметры.СтрПутевойЛист  = "№_______________ от " + Формат(ТекущийДокумент.Дата, "ДЛФ=D");
		КонецЕсли;
//Рарус Владимир Подрезов Конец
		
		ТабДокумент.Вывести(Обл);
		
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьПлатежногоПоручения()

// Формирует печатную форму путевых листов
//
// Параметры:
//  ИмяМакета - табличный документ
//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
Функция уатПечать_ЭСМ2(ТекущийДокумент, ИмяМакета, ФлагПечати="") Экспорт
	Перем мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория;	
	
	мМаксСтрок = 6;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_ПутевойЛист";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатПутевойЛист." + ИмяМакета);
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабДокумент.ПолеСверху 	= 0;
	ТабДокумент.ПолеСлева 	= 0;
	ТабДокумент.ПолеСнизу 	= 0;
	ТабДокумент.ПолеСправа 	= 0;
	
	//печатаем лицевую сторону п/л
	Если ФлагПечати <> 2 И ФлагПечати <> 3 Тогда

		Обл   = Макет.ПолучитьОбласть("Лицевая");
		
		мНомерПЛ = уатОбщегоНазначенияТиповые.уатПолучитьНомерНаПечать(ТекущийДокумент);
//Рарус Владимир Подрезов 03.08.2016 УАТ 3.4.2
		Если ЗначениеЗаполнено(ТекущийДокумент.Подразделение) И ТекущийДокумент.Подразделение.пкВестиНумерациюПутевыхЛистов Тогда
//Рарус Владимир Подрезов Конец
		Обл.Параметры.Номер       	= мНомерПЛ;
//Рарус Владимир Подрезов 03.08.2016 УАТ 3.4.2
		Иначе
			Обл.Параметры.Номер       	= "";
		КонецЕсли;
//Рарус Владимир Подрезов Конец
		ФорматДаты = "ДЛФ='Д'";
		Обл.Параметры.ДатаВыписки = Формат(ТекущийДокумент.Дата, ФорматДаты);
		Обл.Параметры.ДействителенДо = Формат(ТекущийДокумент.ДействителенДо, ФорматДаты);;
		Обл.Параметры.Организация = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(
		ТекущийДокумент.Организация, ТекущийДокумент.ДатаЗакрытия), "ПолноеНаименование,ЮридическийАдрес,Телефоны");
		Обл.Параметры.КодПоОКПО = ТекущийДокумент.Организация.КодПоОКПО;
		Обл.Параметры.МодельТС = уатОбщегоНазначения.уатПредставлениеМоделиТС(ТекущийДокумент.ТранспортноеСредство);
		Обл.Параметры.ТипТС = ТекущийДокумент.ТранспортноеСредство.Тип;
		Обл.Параметры.ТранспортноеСредствоГосНомер = ТекущийДокумент.ТранспортноеСредство.Код;
		Обл.Параметры.ТранспортноеСредствоГарНомер = ТекущийДокумент.ТранспортноеСредство.уатГаражныйНомер;
		Если ТекущийДокумент.ТранспортноеСредство.уатКолонна <> Неопределено Тогда
			Обл.Параметры.Колонна = ТекущийДокумент.ТранспортноеСредство.уатКолонна.Код;
		КонецЕсли;	
		
		Водители = уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ТекущийДокумент.Водитель1, ТекущийДокумент.Дата);
		Если ЗначениеЗаполнено(ТекущийДокумент.Водитель2) Тогда
			Обл.Параметры.Водители = СокрЛП(Водители) +  ", " + уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ТекущийДокумент.Водитель2, ТекущийДокумент.Дата);
		Иначе
			Обл.Параметры.Водители = Водители;
		КонецЕсли;	
		мРеквизитыВодителя1 = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(ТекущийДокумент.Водитель1, ТекущийДокумент.Дата,, ТекущийДокумент.Организация);
		Если мРеквизитыВодителя1 <> Неопределено Тогда
			Обл.Параметры.ВодительКод = мРеквизитыВодителя1.ТабельныйНомер;
		КонецЕсли;
		
		Обл.Параметры.ОсмотрелВрач = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.ОсмотрелВрач.ФизическоеЛицо);
		
		Обл.Параметры.НачалоРаботы = Формат(ТекущийДокумент.ДатаВыезда, ФорматДаты);
		Обл.Параметры.КонецРаботы = Формат(ТекущийДокумент.ДатаВозвращения, ФорматДаты);
		
		Для Каждого ТекСтрока Из ТекущийДокумент.Задание Цикл
			ТекИндекс = ТекущийДокумент.Задание.Индекс(ТекСтрока) + 1;
			
			Если ТекИндекс > мМаксСтрок Тогда
				Прервать;
			КонецЕсли;
			
			стрОбласть = "Дата" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = День(ТекСтрока.ВремяПрибытия);
			стрОбласть = "Объект" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = "";
			стрОбласть = "ВремяПрибытия" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = ?(ТекСтрока.ВремяПрибытия - НачалоДня(ТекСтрока.ВремяПрибытия) = 0, "", Формат(ТекСтрока.ВремяПрибытия, "ДФ=ЧЧ:мм"));
			стрОбласть = "ВремяУбытия" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = ?(ТекСтрока.ВремяУбытия - НачалоДня(ТекСтрока.ВремяУбытия) = 0, "", Формат(ТекСтрока.ВремяУбытия, "ДФ=ЧЧ:мм"));
			
			Если ТекИндекс = 1 Тогда
				
				Обл.Параметры.Заказчик = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(
				ТекСтрока.Контрагент, ТекущийДокумент.ДатаЗакрытия), "ПолноеНаименование,ЮридическийАдрес,Телефоны");
//Рарус Владимир Подрезов 28.11.2016 УАТ Протокол
//				Обл.Область("СпидометрВыезда1").Текст = ТекущийДокумент.СпидометрВыезда;
				Обл.Область("СпидометрВыезда1").Текст = "";
//Рарус Владимир Подрезов Конец
				
				Для Каждого ТекСтрокаГСМ из ТекущийДокумент.РасходГСМ Цикл
					Если ТекСтрокаГСМ.ТС = ТекущийДокумент.ТранспортноеСредство Тогда
						Если ТекСтрокаГСМ.ГСМ = ТекСтрокаГСМ.ТС.уатМодель.ОсновноеТопливо Тогда
							Обл.Область("ГСМ1").Текст = ТекСтрокаГСМ.ГСМ;
//Рарус Владимир Подрезов 28.11.2016 УАТ Протокол
//							Обл.Область("ОстатокПриВыезде1").Текст = ТекСтрокаГСМ.ОстатокПриВыезде;
							Обл.Область("ОстатокПриВыезде1").Текст = "";
//Рарус Владимир Подрезов Конец
						КонецЕсли;	
					КонецЕсли;	
				КонецЦикла;	
				
			КонецЕсли;	
			
		КонецЦикла;
		
		ТабДокумент.Вывести(Обл);
	КонецЕсли;
	
	Если ФлагПечати = 0 Или ФлагПечати = 4 Тогда	//Новая страница для печати полного пут. листа
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	//печатаем обратную сторону п/л
	Если ФлагПечати <> 1 И ФлагПечати <> 5 Тогда
		
		Обл = Макет.ПолучитьОбласть("Оборотная");
		
		ТабДокумент.Вывести(Обл);
		
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьПлатежногоПоручения()

// Формирует печатную форму путевых листов ПЛ-1
//
// Параметры:
//  ИмяМакета - табличный документ
//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
Функция уатПечать_ПЛ1(ТекущийДокумент, ИмяМакета, ФлагПечати="") Экспорт
	Перем мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория;	
	
	мМаксСтрок = 2;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_ПутевойЛист";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатПутевойЛист." + ИмяМакета);
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ФорматДаты = "ДЛФ='Д'";
	
	ТабДокумент.ПолеСверху 	= 0;
	ТабДокумент.ПолеСлева 	= 0;
	ТабДокумент.ПолеСнизу 	= 0;
	ТабДокумент.ПолеСправа 	= 0;
	
	//печатаем лицевую сторону п/л
	Если ФлагПечати = 2 Или ФлагПечати = 3 Тогда
		Возврат ТабДокумент;
	КонецЕсли;
	
	мСведенияОПредпринимателе = уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Организация, ТекущийДокумент.ДатаЗакрытия);
	
	Обл = Макет.ПолучитьОбласть("ОбластьШапка");
	
	мНомерПЛ = уатОбщегоНазначенияТиповые.уатПолучитьНомерНаПечать(ТекущийДокумент);
//Рарус Владимир Подрезов 03.08.2016 УАТ 3.4.2
	Если ЗначениеЗаполнено(ТекущийДокумент.Подразделение) И ТекущийДокумент.Подразделение.пкВестиНумерациюПутевыхЛистов Тогда
//Рарус Владимир Подрезов Конец
	Обл.Параметры.Номер = мНомерПЛ;
	Обл.Параметры.ДатаНач = Формат(ТекущийДокумент.ДатаВыезда, "ДФ=дд.ММ.гггг,ЧЧ:мм");
	Обл.Параметры.ДатаКон = Формат(ТекущийДокумент.ДатаВозвращения, "ДФ='дд.ММ.гггг,ЧЧ:мм'");
//Рарус Владимир Подрезов 03.08.2016 УАТ 3.4.2
	Иначе
		Обл.Параметры.Номер = "";
		Обл.Параметры.ДатаНач = Формат(ТекущийДокумент.ДатаВыезда, "ДФ=дд.ММ.гггг");
		Обл.Параметры.ДатаКон = Формат(ТекущийДокумент.ДатаВозвращения, "ДФ=дд.ММ.гггг");
	КонецЕсли;
//Рарус Владимир Подрезов Конец
	
//Рарус Владимир Подрезов 03.08.2016 УАТ 3.4.2
//	Обл.Параметры.ТекстДействителенДо = ?(ТекущийДокумент.ДействителенДо = '00010101', "", "Действителен до: " + Формат(ТекущийДокумент.ДействителенДо, ФорматДаты));
	Обл.Параметры.ТекстДействителенДо = ?(НачалоДня(ТекущийДокумент.ДатаВыезда)=НачалоДня(ТекущийДокумент.ДатаВозвращения), "", " - " + Формат(ТекущийДокумент.ДатаВозвращения, ФорматДаты)) ;
//Рарус Владимир Подрезов Конец
	
	ФорматДаты = "ДФ='дд ММММ гггг, ЧЧ:мм'";
	
	Обл.Параметры.ФИО = уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ТекущийДокумент.Организация, КонецДня(ТекущийДокумент.ДатаВыезда));
	
	Обл.Параметры.Адрес = мСведенияОПредпринимателе.ЮридическийАдрес;
	Обл.Параметры.Телефон = мСведенияОПредпринимателе.Телефоны;
	
	Обл.Параметры.ЛицензионнаяКарточка = ТекущийДокумент.ТранспортноеСредство.ЛицензионнаяКарточкаВид;
	Обл.Параметры.НомерЛицензионнойКарточки = ТекущийДокумент.ТранспортноеСредство.ЛицензионнаяКарточкаРегистрационныйНомер;
	//Обл.Параметры.СерияЛицензионнойКарточки = ТекущийДокумент.ТранспортноеСредство.ЛицензионнаяКарточкаСерия;
	
	Обл.Параметры.МодельТС = уатОбщегоНазначения.уатПредставлениеМоделиТС(ТекущийДокумент.ТранспортноеСредство);
	Обл.Параметры.ТранспортноеСредствоГосНомер = ТекущийДокумент.ТранспортноеСредство.Код;
	Обл.Параметры.ТипТС = ТекущийДокумент.ТранспортноеСредство.Тип;
	
	уатОбщегоНазначения.уатУдостоверениеВодителя(ТекущийДокумент.Водитель1, мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория);	
	Обл.Параметры.Водитель1 = ТекущийДокумент.Водитель1;
	Обл.Параметры.Водитель1Представление = уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ТекущийДокумент.Водитель1, ТекущийДокумент.Дата);
	Обл.Параметры.НомерУдостоверенияВодителя1 = ?(СокрЛП(мВодительскоеУдСерия)="","",СокрЛП(мВодительскоеУдСерия) + " ") + мВодительскоеУдНомер;
	
	уатОбщегоНазначения.уатУдостоверениеВодителя(ТекущийДокумент.Водитель2, мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория);	
	Обл.Параметры.Водитель2 = ТекущийДокумент.Водитель2;
	Обл.Параметры.Водитель2Представление = уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ТекущийДокумент.Водитель2, ТекущийДокумент.Дата);
	Обл.Параметры.НомерУдостоверенияВодителя2 = ?(СокрЛП(мВодительскоеУдСерия)="","",СокрЛП(мВодительскоеУдСерия) + " ") + мВодительскоеУдНомер;
	
	мТекИнд = 0;
	Для мИнд = 1 по ТекущийДокумент.Прицепы.Количество() Цикл
		Если ИмяМакета = "ПФ_MXL_ПА1" Тогда //для автобуса прицепы некорректны
			Продолжить;
		КонецЕсли;
		
		мПрицеп = ТекущийДокумент.Прицепы[мИнд-1].ТС;
		Если мПрицеп.уатМодель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
			мТекИнд = мТекИнд + 1;
			Если мТекИнд = 1 Тогда
				Обл.Параметры.ПрицепМодель1  = уатОбщегоНазначения.уатПредставлениеМоделиТС(мПрицеп);
				Попытка
					Обл.Параметры.ПрицепГосНомер1  = мПрицеп.Код;
				Исключение
				КонецПопытки;	
			ИначеЕсли мТекИнд = 2 Тогда
				Обл.Параметры.ПрицепМодель2  = уатОбщегоНазначения.уатПредставлениеМоделиТС(мПрицеп);
				Попытка
					Обл.Параметры.ПрицепГосНомер2  = мПрицеп.Код;
				Исключение
				КонецПопытки;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
	Обл.Параметры.ВыпустилМеханик	= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.ВыпустилМеханик.ФизическоеЛицо);
	Обл.Параметры.ОсмотрелВрач  = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.ОсмотрелВрач.ФизическоеЛицо);
	
//Рарус Владимир Подрезов 03.08.2016 УАТ 3.4.2
//	Обл.Параметры.ДатаВыезда = Формат(ТекущийДокумент.ДатаВыезда, ФорматДаты); //+время
	Обл.Параметры.ДатаВыезда = Формат(ТекущийДокумент.ДатаВыезда, "ДФ=dd.MM.yyyy"); //+время
//Рарус Владимир Подрезов Конец
	//Обл.Параметры.ДатаВозвращения = Формат(ДатаВозвращения, ФорматДаты);
	
	//Обл.Параметры.СпидометрВозвращения = СпидометрВозвращения;
//Рарус Владимир Подрезов 28.11.2016 УАТ Протокол
//	Обл.Параметры.СпидометрВыезда = ТекущийДокумент.СпидометрВыезда;
	Обл.Параметры.СпидометрВыезда = "";
//Рарус Владимир Подрезов Конец
	
	ТабДокумент.Вывести(Обл);
	
	Обл = Макет.ПолучитьОбласть("ОбластьСтрока");
	Для Каждого ТекЗадание Из ТекущийДокумент.Задание Цикл
		Обл.Параметры.Заказчик = ТекЗадание.Контрагент;
		Обл.Параметры.ЗаказчикПредставление = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(
		ТекЗадание.Контрагент, ТекущийДокумент.ДатаЗакрытия), "ПолноеНаименование, ЮридическийАдрес");
		Если ИмяМакета = "ПФ_MXL_ПГ1" Тогда
			Обл.Параметры.Номенклатура = ТекЗадание.Номенклатура;
		КонецЕсли;
		Если ИмяМакета = "ПФ_MXL_ПА1" ИЛИ ИмяМакета = "ПФ_MXL_ПГ1" Тогда
			Обл.Параметры.АдресУбытия = ПредставлениеАдреса(ТекЗадание.АдресУбытия);
			Обл.Параметры.АдресПрибытия = ПредставлениеАдреса(ТекЗадание.АдресПрибытия);
		КонецЕсли;
		
		ТабДокумент.Вывести(Обл);
	КонецЦикла;
	
	Обл = Макет.ПолучитьОбласть("ОбластьПодвал");
	ТабДокумент.Вывести(Обл);
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьПлатежногоПоручения()

Функция ПечататьМаршрутныйЛистПоЗаданию(МассивОбъектов, ОбъектыПечати) Экспорт
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ПутевойЛист";
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_ПутевойЛист_МаршрутныйЛистПоЗаданию";
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_уатМаршрутныйЛист");
		
		// Заголовок
		Область = Макет.ПолучитьОбласть("Заголовок");
		ТабличныйДокумент.Вывести(Область);
		
		// Шапка
		Область = Макет.ПолучитьОбласть("Шапка");
//Рарус Владимир Подрезов 03.08.2016 УАТ 3.4.2
		Если ЗначениеЗаполнено(ТекущийДокумент.Подразделение) И ТекущийДокумент.Подразделение.пкВестиНумерациюПутевыхЛистов Тогда
//Рарус Владимир Подрезов Конец
		Область.Параметры.Номер = ТекущийДокумент.Номер;
//Рарус Владимир Подрезов 03.08.2016 УАТ 3.4.2
		Иначе
			Область.Параметры.Номер = "";
		КонецЕсли;
//Рарус Владимир Подрезов Конец
		Область.Параметры.Дата = ТекущийДокумент.ДатаЗакрытия;
		Область.Параметры.Организация = ТекущийДокумент.Организация;
		Область.Параметры.ВидЗаказа = Справочники.уатВидыПеревозок.Грузовая;
		Область.Параметры.ТС = уатОбщегоНазначения.уатПредставлениеТС(ТекущийДокумент.ТранспортноеСредство, ТекущийДокумент.Организация);
		Область.Параметры.Водитель = ТекущийДокумент.Водитель1;
		Область.Параметры.ПредставлениеВодителя = уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ТекущийДокумент.Водитель1, НачалоДня(ТекущийДокумент.ДатаЗакрытия));;
		
		Область.Параметры.Ответственный = ТекущийДокумент.Ответственный;
		ТабличныйДокумент.Вывести(Область);
		
		// Задания
		Область = Макет.ПолучитьОбласть("ЗаданияШапка");
		ТабличныйДокумент.Вывести(Область);
		Для Каждого ТекСтрокаЗадания Из ТекущийДокумент.Задание Цикл
			Область = Макет.ПолучитьОбласть("Задания");
			Если Не ЗначениеЗаполнено(ТекСтрокаЗадания.Контрагент) Тогда
				Область.Параметры.Заказчик = ТекСтрокаЗадания.Подразделение;
			Иначе	
				Область.Параметры.Заказчик = ТекСтрокаЗадания.Контрагент;
			КонецЕсли;	
			Область.Параметры.Маршрут = ТекСтрокаЗадания.Маршрут;
			Область.Параметры.ПунктЗагрузки = ПредставлениеАдреса(ТекСтрокаЗадания.АдресПрибытия);
			Область.Параметры.ВремяЗагрузки =  ТекСтрокаЗадания.ВремяПрибытия;
			Область.Параметры.ВремяЗагрузки = Формат(ТекСтрокаЗадания.ВремяПрибытия, 
				?(ТекСтрокаЗадания.ВремяПрибытия - НачалоДня(ТекСтрокаЗадания.ВремяПрибытия) = 0, "ДФ=dd.MM.yyyy", "ДФ='dd.MM.yyyy ЧЧ:мм'"));
			Область.Параметры.ПунктРазгрузки = ПредставлениеАдреса(ТекСтрокаЗадания.АдресУбытия);
			Область.Параметры.ВремяРазгрузки = Формат(ТекСтрокаЗадания.ВремяУбытия, 
				?(ТекСтрокаЗадания.ВремяУбытия - НачалоДня(ТекСтрокаЗадания.ВремяУбытия) = 0, "ДФ=dd.MM.yyyy", "ДФ='dd.MM.yyyy ЧЧ:мм'"));
			Область.Параметры.Расстояние = ТекСтрокаЗадания.КоличествоКмГруз + ТекСтрокаЗадания.КоличествоКмПорожний;
			Область.Параметры.Груз = ТекСтрокаЗадания.Номенклатура;
			Область.Параметры.ВесГруза = ТекСтрокаЗадания.КоличествоТонн;
			Область.Параметры.КоличествоЕздок = ТекСтрокаЗадания.КоличествоЕздок;
			ТабличныйДокумент.Вывести(Область);
		КонецЦикла;
		
		ТабличныйДокумент.ПолеСлева = 0;
		ТабличныйДокумент.ПолеСправа = 0;
		ТабличныйДокумент.ПолеСверху = 0;
		ТабличныйДокумент.ПолеСнизу = 0;
		//ТабличныйДокумент.ИмяПараметровПечати = "ПутевойЛист";
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		ТабличныйДокумент.ОтображатьСетку = Ложь;
		ТабличныйДокумент.Защита = Ложь;
		ТабличныйДокумент.ТолькоПросмотр = Ложь;
		ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецЕсли