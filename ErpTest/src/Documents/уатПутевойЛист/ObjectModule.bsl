////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБЪЕКТА

Перем ДанныеИзменились Экспорт; // Признак изменения данных документа (экспорт сделан для использования формой объекта).
Перем ПакетнаяОбработкаТиповыхДокументов Экспорт; // Признак пакетной обработки типовых документов.
Перем мВремяВНаряде Экспорт; // Время в наряде(общее время). Используется для расчета по временным параметрам выработки.
Перем мВремяВРаботе Экспорт; // Время в работе (рабочее). Используется для расчета по временным параметрам выработки.
Перем мВремяВПростое Экспорт; // Время в простое (простои). Используется для расчета по временным параметрам выработки.
Перем мВремяВПростоеСВклДвигателем Экспорт; // Время в простое с вкл. двигателем (простои).
Перем мВремяНочь Экспорт; // Время ночное. Используется для доп. начислений за ночную выработку.
Перем мПробегОбщий Экспорт; // Общий пробег
Перем мКоличествоДней Экспорт; // Количество дней по путевому листу

Перем мТаблицаПоСписаниюГСМ;


//Функция рассчитывает итоги работы по пут. листу
Функция РасчетИтогов(Отказ, флЗаписывать = Истина) Экспорт 
	Заголовок = "Ошибки при расчете итогов работы по путевому листу №" + Номер + " :";
	
	ПроверкаКорректностиПЛ_РасчетИтогов(Заголовок, Отказ);
	
	Если Не Отказ Тогда
		РасчетВыработкиТС(Отказ);
		РасчетВыработкиСотрудников(Отказ);
		РасчетРасходаГСМ(Заголовок, Отказ);
		РасчетРасходаТЖ();
		РасчетЗП(Отказ);
	КонецЕсли;
	
	Рассчитан = Не Отказ;
	Если НЕ Рассчитан Тогда
		Сообщить("Документ <" + ЭтотОбъект + ">: не был рассчитан.", СтатусСообщения.Внимание);
	КонецЕсли;
	
	Если флЗаписывать И (НЕ Отказ) Тогда
		Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	Возврат Рассчитан;
КонецФункции //РасчетИтогов()

//Процедура проверяет корректность заполнения ПЛ перед расчетом итогов по документу
Процедура ПроверкаКорректностиПЛ_РасчетИтогов(Заголовок, Отказ)
	Отказ = Ложь;
	
	СтруктураПолей = Новый Структура("ТранспортноеСредство, Водитель1, ДатаВыезда, ДатаВозвращения");
	
	уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,СтруктураПолей, Отказ, Заголовок);
	
	Если НЕ ЗначениеЗаполнено(ТранспортноеСредство.уатМодель) Тогда
		Сообщить("Для ТС не указана модель!", СтатусСообщения.Важное);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначения_проф.уатПроверкаКорректностиПЛ(Организация, ЭтотОбъект, Отказ);
КонецПроцедуры


// РАСЧЕТ ВЫРАБОТКИ ТС и ОБОРУДОВАНИЯ

//Процедура рассчитывает выработку ТС
//
Процедура РасчетВыработкиТС(Отказ) Экспорт
	Перем мТаблицаТТД;
	
	Если ТранспортноеСредство.уатМодель.НаличиеСпидометра Тогда
		мПробегОбщий = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(СпидометрВыезда,СпидометрВозвращения);
	Иначе
		мПробегОбщий = 0;
	КонецЕсли;
	
	РасчитатьВременныеПараметры();
	
	//удалим строки выработки с ТС/прицепами, которых нет в ПЛ
	мсвТС = Новый Массив;
	мсвТС.Добавить(ТранспортноеСредство);
	Для Каждого ТекСтрока Из Прицепы Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ТС) Тогда
			мсвТС.Добавить(ТекСтрока.ТС);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекСтрока Из Задание Цикл
		Если ТекСтрока.Выполнено Тогда
			Если ЗначениеЗаполнено(ТекСтрока.Прицеп1) Тогда
				мсвТС.Добавить(ТекСтрока.Прицеп1);
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекСтрока.Прицеп2) Тогда
				мсвТС.Добавить(ТекСтрока.Прицеп2);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Сч = ВыработкаТС.Количество() - 1;
	Пока Сч >= 0 Цикл
		ТекСтрокаВыработка = ВыработкаТС[Сч];
		Если мсвТС.Найти(ТекСтрокаВыработка.ТС) = Неопределено Тогда
			ВыработкаТС.Удалить(ТекСтрокаВыработка);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
	СтруктураОбъектовНастроек = Новый Структура;
	СтруктураОбъектовНастроек.Вставить("Организация", Организация);
	Если ЗначениеЗаполнено(Подразделение) Тогда 
		СтруктураОбъектовНастроек.Вставить("Подразделение", Подразделение);
	Иначе
		СтруктураОбъектовНастроек.Вставить("Подразделение", ТранспортноеСредство.уатПодразделение);
	КонецЕсли;
	
	ПраваОрганизации = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек);
	
	АвтообновлениеПЛпоGPS           = уатПраваИНастройки.уатПраво("АвтообновлениеПЛпоGPS",           ПраваОрганизации);
	ПодставлятьВремяВРаботеВПЛпоGPS = уатПраваИНастройки.уатПраво("ПодставлятьВремяВРаботеВПЛпоGPS", ПраваОрганизации);
	ПодставлятьОбщийПробегВПЛпоGPS  = уатПраваИНастройки.уатПраво("ПодставлятьОбщийПробегВПЛпоGPS",  ПраваОрганизации); 
	
	//расчет по заданию
	Если РежимРасчетаВыработки = Перечисления.уатРежимыРасчетаВыработкиПЛ.ПоЗаданию Тогда
		РасчетВыработкиТС_ПоЗаданию(Отказ, ПодставлятьВремяВРаботеВПЛпоGPS, ПодставлятьОбщийПробегВПЛпоGPS, АвтообновлениеПЛпоGPS);
		
	//расчет выработки по ТТД
	ИначеЕсли РежимРасчетаВыработки = Перечисления.уатРежимыРасчетаВыработкиПЛ.ПоТТД Тогда
		РасчетВыработкиТС_ПоТТД(Отказ, ПодставлятьВремяВРаботеВПЛпоGPS, ПодставлятьОбщийПробегВПЛпоGPS, АвтообновлениеПЛпоGPS);
		
	//расчет ручной
	ИначеЕсли РежимРасчетаВыработки = Перечисления.уатРежимыРасчетаВыработкиПЛ.Ручной Тогда
		РасчетВыработкиТС_Ручной(Отказ, ПодставлятьВремяВРаботеВПЛпоGPS, ПодставлятьОбщийПробегВПЛпоGPS, АвтообновлениеПЛпоGPS);
	Иначе 
		Если АвтообновлениеПЛпоGPS Тогда 
			ОбновитьДанныеВыработкиПоGPS();
		КонецЕсли;
	КонецЕсли;
	
	// расчет произвольных параметров выработки
	РезультатЗапросаПоПараметрамСПроизвольнымРасчетом = ПолучитьПараметрыВыработкиСПроизвольнымРасчетом();
	
	Если РежимРасчетаВыработки <> Перечисления.уатРежимыРасчетаВыработкиПЛ.НеРассчитывать Тогда
		// произвольные параметры выработки (по шапке)
		ПараметрыСРасчетомПоШапке = РезультатЗапросаПоПараметрамСПроизвольнымРасчетом[1].Выгрузить();
		Для Каждого Параметр Из ПараметрыСРасчетомПоШапке Цикл
			Если Параметр.ДействуетНаТС Тогда
				ЗначениеПараметра = ВычислитьПроизвольныйПараметрВыработкиПоШапке(Параметр);
				Если НЕ ЗначениеПараметра = "ошибка" Тогда
					ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Параметр.Ссылка, ЗначениеПараметра);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// произвольные параметры выработки (по заданию)
		Если Задание.Количество() Тогда
			ПараметрыСРасчетомПоЗаданию = РезультатЗапросаПоПараметрамСПроизвольнымРасчетом[0].Выгрузить();
			мЭтапыЗадания = Задание.Выгрузить();
			мЭтапыЗадания.Свернуть("НомерЕздки");
			Для Каждого ТекЭтапЗадания из мЭтапыЗадания Цикл
				//выбираем строки для каждого этапа задания
				мСтрокиЗадания = Задание.НайтиСтроки(Новый Структура("НомерЕздки, Выполнено", ТекЭтапЗадания.НомерЕздки, Истина));
				Для Каждого ТекСтрЗадание Из мСтрокиЗадания Цикл
					Для Каждого Параметр Из ПараметрыСРасчетомПоЗаданию Цикл
						Если Параметр.ДействуетНаТС Тогда
							ЗначениеПараметра = ВычислитьПроизвольныйПараметрВыработки(Параметр, ТекСтрЗадание);
							Если НЕ ЗначениеПараметра = "ошибка" Тогда
								ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Параметр.Ссылка, ЗначениеПараметра,
									Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут, ВидПеревозки, СтроительнаяРабота, СценарийПланирования",
										ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут,
										ТекСтрЗадание.ВидПеревозки, ТекСтрЗадание.СтроительнаяРабота, ТекСтрЗадание.СценарийПланирования), Ложь);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		// произвольные параметры выработки (по ТТД)
		ПараметрыСРасчетомПоТТД = РезультатЗапросаПоПараметрамСПроизвольнымРасчетом[2].Выгрузить();
		Если ПараметрыСРасчетомПоТТД.Количество() И ПроверкаТТД(мТаблицаТТД, 1) Тогда
			Для Каждого ТекСтр из мТаблицаТТД Цикл
				мТТД = ТекСтр.ТТД;
				Для Каждого ТекСтрЗадание из мТТД.Выработка Цикл
					Если ТекСтрЗадание.ПутЛист <> Ссылка Тогда
						Продолжить;
					КонецЕсли;
					Для Каждого Параметр Из ПараметрыСРасчетомПоТТД Цикл
						Если Параметр.ДействуетНаТС Тогда
							ЗначениеПараметра = ВычислитьПроизвольныйПараметрВыработки(Параметр, ТекСтрЗадание);
							Если НЕ ЗначениеПараметра = "ошибка" Тогда
								ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Параметр.Ссылка, ЗначениеПараметра,
									Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут, ВидПеревозки",
									Подразделение, мТТД.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут, ТекСтрЗадание.ВидПеревозки), Ложь);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
// ITOB +++
		// Подсчет параметров выработки на базе данных GPS трекеров
		Если Константы.уатИспользоватьЦСМ.Получить() И ТранспортноеСредство.уатИспользуемаяСистемаGPS = Перечисления.уатСистемаGPS._1СЦСМ Тогда
			
			ТаблицаВыработки = ItobКалькуляцияПараметровВыработки.ПолучитьТаблицуВыработки(ТранспортноеСредство, ДатаВыезда, ДатаВозвращения);
			Для каждого СтрокаФактВыработки Из ТаблицаВыработки Цикл  
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, СтрокаФактВыработки.ПараметрВыработки,  СтрокаФактВыработки.Значение);
			КонецЦикла;
		КонецЕсли;
// ITOB ---		
	КонецЕсли;
	
	СвернутьВыработкуТСпоУчетнойПолитике();
КонецПроцедуры //РасчетВыработкиТС()

Процедура ОбновитьДанныеВыработкиПоGPS()
	
	// Обновление пробега, времени работы по GPS
	ОбъектСтруктура = Новый Структура;
	ОбъектСтруктура.Вставить("Организация",           Организация);
	ОбъектСтруктура.Вставить("ТранспортноеСредство",  ТранспортноеСредство);
	ОбъектСтруктура.Вставить("ДатаВыезда",            ДатаВыезда);
	ОбъектСтруктура.Вставить("ДатаВозвращения",       ДатаВозвращения);
	ОбъектСтруктура.Вставить("СпидометрВыезда",       СпидометрВыезда);
	ОбъектСтруктура.Вставить("СпидометрВозвращения",  СпидометрВозвращения);
	ОбъектСтруктура.Вставить("Прицепы",               Новый Массив());
	
	Для Каждого ТекПрицеп Из Прицепы Цикл 
		СтрокаПрицепа = Новый Структура("ТС, СпидометрВыезда, СпидометрВозвращения",
			ТекПрицеп.ТС,
			ТекПрицеп.СчетчикМЧВыезда,
			ТекПрицеп.СчетчикМЧВозвращения);
		ОбъектСтруктура.Прицепы.Добавить(СтрокаПрицепа);
	КонецЦикла;
	
	РезультатСтруктура = Новый Структура;
	
	//РАСЧЕТ
	уатЗащищенныеФункцииСервер_проф.РассчитатьСпидометрПоGPS(ОбъектСтруктура, РезультатСтруктура);
	
	//заполнение основных реквизитов
	Если РезультатСтруктура.Свойство("СчетчикПоGPS") Тогда
		ПробегПоGPS = РезультатСтруктура.СчетчикПоGPS;
	КонецЕсли;
	Если РезультатСтруктура.Свойство("ПробегПоGPS") Тогда
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегОбщийПоДаннымGPS, 
			Окр(РезультатСтруктура.ПробегПоGPS, 2, РежимОкругления.Окр15как20),, Истина, Истина);
	КонецЕсли;
	Если РезультатСтруктура.Свойство("МоточасыПоGPS") Тогда 
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботеПоДаннымGPS, 
			Окр(РезультатСтруктура.МоточасыПоGPS*3600, 2),, Истина, Истина);
	КонецЕсли;
	
	// Заполнение данных по прицепам
	Для Каждого ТекПрицеп Из РезультатСтруктура.Прицепы Цикл 
		Если ТекПрицеп.Свойство("СчетчикПоGPS") Тогда
			НайдСтроки = Прицепы.НайтиСтроки(Новый Структура("ТС", ТекПрицеп.ТС));
			Если НайдСтроки.Количество() Тогда 
				НайдСтроки[0].СчетчикМЧGPS = ТекПрицеп.СчетчикПоGPS;
			КонецЕсли;
		КонецЕсли;
		Если ТекПрицеп.Свойство("ПробегПоGPS") Тогда
			ЗаписатьСтрокуВыработкиТС(ТекПрицеп.ТС, Справочники.уатПараметрыВыработки.ПробегОбщийПоДаннымGPS, 
				Окр(ТекПрицеп.ПробегПоGPS, 2, РежимОкругления.Окр15как20),, Истина, Истина);
		КонецЕсли;
		Если ТекПрицеп.Свойство("МоточасыПоGPS") Тогда
			ЗаписатьСтрокуВыработкиТС(ТекПрицеп.ТС, Справочники.уатПараметрыВыработки.ВремяВРаботеПоДаннымGPS, 
				Окр(ТекПрицеп.МоточасыПоGPS*3600, 2),, Истина, Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьВыработкуПоGPS(ТекТС, ТекПараметрВыработки)
	
	НайдСтроки = ВыработкаТС.НайтиСтроки(Новый Структура("ТС,ПараметрВыработки",ТекТС,ТекПараметрВыработки));
	Если НайдСтроки.Количество() Тогда 
		Возврат НайдСтроки[0].Количество;
	Иначе 
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьВыработкуПоGPS()

//Процедура рассчитывает выработку ТС по ТЧ Задание
//
Процедура РасчетВыработкиТС_ПоЗаданию(Отказ, ПодставлятьВремяВРаботеВПЛпоGPS, ПодставлятьОбщийПробегВПЛпоGPS, АвтообновлениеПЛпоGPS)
	//очистка выработки - только для предопределенных параметров выработки
	//и для параметров с произвольным расчетом, если задана формула расчета
	Сч = ВыработкаТС.Количество() - 1;
	Пока Сч >= 0 Цикл
		ТекСтрока = ВыработкаТС[Сч];
		Если ТекСтрока.ПараметрВыработки.Предопределенный
				Или Не ТекСтрока.ПараметрВыработки.Предопределенный И ЗначениеЗаполнено(ТекСтрока.ПараметрВыработки.АлгоритмРасчетаПараметра)
				Или Не Задание.Найти(ТекСтрока.ПараметрВыработки) = Неопределено Тогда
			ВыработкаТС.Удалить(ТекСтрока);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
	Если АвтообновлениеПЛпоGPS Тогда 
		ОбновитьДанныеВыработкиПоGPS();
	КонецЕсли;
	
	//пробег общий для ТС со счетчиком моточасов
	Если НЕ ТранспортноеСредство.уатМодель.НаличиеСпидометра Тогда
		мПробегОбщий = НулевойПробегВыезда + НулевойПробегВозвращения;
		Для Каждого ТекСтрокаЗадания Из Задание Цикл
			Если Не ТекСтрокаЗадания.Выполнено Тогда Продолжить; КонецЕсли;
			ТекСтрокаЗадания_КоличествоЕздок = ?(ТекСтрокаЗадания.КоличествоЕздок = 0, 1, ТекСтрокаЗадания.КоличествоЕздок);
			мПробегОбщий = мПробегОбщий + ТекСтрокаЗадания.КоличествоКмГруз*ТекСтрокаЗадания_КоличествоЕздок
				+ ТекСтрокаЗадания.КоличествоКмПорожний*ТекСтрокаЗадания_КоличествоЕздок;
		КонецЦикла;
	КонецЕсли;
	
	//время в наряде
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВНаряде, мВремяВНаряде);
	
	//время в простое
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВПростое, мВремяВПростое - мВремяВПростоеСВклДвигателем);
	
	//время в простое с вкл. двигателем
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВПростоеСВклДвигателем, мВремяВПростоеСВклДвигателем);
	
	//количество дней
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоДней, мКоличествоДней);
	
	//количество рейсов
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоРейсов, 1, , Ложь);
	
	//пробег с пассажирами
	Если ВидПЛ = Перечисления.уатВидыПЛ._4 Или ВидПЛ = Перечисления.уатВидыПЛ._6 Или ВидПЛ = Перечисления.уатВидыПЛ._6С Тогда
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегСПассажирами, мПробегОбщий - НулевойПробегВыезда - НулевойПробегВозвращения);
	КонецЕсли;
	
	мКоличествоКмСГрузом = 0;
	мКоличествоЧасов = 0;
	мПробегПорожний = 0;
	мОбщаяНаработка = уатОбщегоНазначения.уатПоказанияСчетчикаВСекунды(уатОбщегоНазначения.уатРазностьПоказанийСчетчика(СпидометрВыезда, СпидометрВозвращения));
	тблПробегПрицепы = Новый ТаблицаЗначений;
	тблПробегПрицепы.Колонки.Добавить("Прицеп");
	тблПробегПрицепы.Колонки.Добавить("ПробегСГрузом");
	тблПробегПрицепы.Колонки.Добавить("ПробегПорожний");
	тблПробегПрицепы.Колонки.Добавить("ПробегОбщий");
	
	//делаем таблицу с номерами этапов
	мЭтапыЗадания = Задание.Выгрузить();
	мЭтапыЗадания.Свернуть("НомерЕздки");
	
	ВесГруза_СуммированиеПоЭтапам = (Справочники.уатПараметрыВыработки.ВесГруза.СпособРасчетаПоНомеруЭтапа = 0);
	Объем_СуммированиеПоЭтапам = (Справочники.уатПараметрыВыработки.Объем.СпособРасчетаПоНомеруЭтапа = 0);
	КоличествоЕздок_СуммированиеПоЭтапам = (Справочники.уатПараметрыВыработки.КоличествоЕздок.СпособРасчетаПоНомеруЭтапа = 0);
	
	Для Каждого ТекЭтапЗадания из мЭтапыЗадания Цикл
		//выбираем строки для каждого этапа задания
		мСтрокиЗадания = Задание.НайтиСтроки(Новый Структура("НомерЕздки, Выполнено", ТекЭтапЗадания.НомерЕздки, Истина));
		
		//вес, объем груза, количество ездок для номера этапа <> 0 (учет по этапам ведется)
		//для разных строк с одинаковым номером этапа либо суммируем, либо выбираем максимальное значение
		Если ТекЭтапЗадания.НомерЕздки <> 0 Тогда
			мВесГруза = 0;
			мОбъем = 0;
			мКоличествоЕздок = 0;
			мНомСтрМаксВес = Неопределено;
			мНомСтрМаксОбъем = Неопределено;
			мНомСтрМаксКоличествоЕздок = Неопределено;
			СоотвСпецРаботы = Новый Соответствие;
			
			Для Каждого ТекСтрЗадание Из мСтрокиЗадания Цикл
				Если НЕ ВесГруза_СуммированиеПоЭтапам И мВесГруза < ТекСтрЗадание.КоличествоТонн * ТекСтрЗадание.КоличествоЕздок Тогда
					мВесГруза = ТекСтрЗадание.КоличествоТонн * ТекСтрЗадание.КоличествоЕздок;
					мНомСтрМаксВес = ТекСтрЗадание.НомерСтроки-1;
				КонецЕсли;
				Если НЕ Объем_СуммированиеПоЭтапам И мОбъем < ТекСтрЗадание.Объем * ТекСтрЗадание.КоличествоЕздок Тогда
					мОбъем = ТекСтрЗадание.Объем * ТекСтрЗадание.КоличествоЕздок;
					мНомСтрМаксОбъем = ТекСтрЗадание.НомерСтроки-1;
				КонецЕсли;
				Если НЕ КоличествоЕздок_СуммированиеПоЭтапам И мКоличествоЕздок < ТекСтрЗадание.КоличествоЕздок Тогда
					мКоличествоЕздок = ТекСтрЗадание.КоличествоЕздок;
					мНомСтрМаксКоличествоЕздок = ТекСтрЗадание.НомерСтроки-1;
				КонецЕсли;
				Для СчСпец = 1 По 5 Цикл
					Если ТекСтрЗадание["КоличествоСпецРаботы" + СчСпец] > 0 И ТекСтрЗадание["СпецРабота" + СчСпец].СпособРасчетаПоНомеруЭтапа = 1 Тогда
						СтруктураСпец = СоотвСпецРаботы.Получить(ТекСтрЗадание["СпецРабота" + СчСпец]);
						Если СтруктураСпец = Неопределено Тогда
							СтруктураСпец = Новый Структура("Количество, НомерСтроки", 0, Неопределено);
						КонецЕсли;
						Если СтруктураСпец.Количество < ТекСтрЗадание["КоличествоСпецРаботы" + СчСпец] * ТекСтрЗадание.КоличествоЕздок Тогда
							СтруктураСпец.Количество = ТекСтрЗадание["КоличествоСпецРаботы" + СчСпец] * ТекСтрЗадание.КоличествоЕздок;
							СтруктураСпец.НомерСтроки = ТекСтрЗадание.НомерСтроки-1;
						КонецЕсли;
						СоотвСпецРаботы.Вставить(ТекСтрЗадание["СпецРабота" + СчСпец], СтруктураСпец);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			Если мНомСтрМаксВес <> Неопределено Тогда
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВесГруза, мВесГруза,
					Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут, ВидПеревозки",
					Задание[мНомСтрМаксВес].Подразделение, Задание[мНомСтрМаксВес].Контрагент, Задание[мНомСтрМаксВес].ОбъектСтроительства,
					Задание[мНомСтрМаксВес].Маршрут, Задание[мНомСтрМаксВес].ВидПеревозки), Ложь);
			КонецЕсли;
			Если мНомСтрМаксОбъем <> Неопределено Тогда
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.Объем, мОбъем,
					Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут, ВидПеревозки",
					Задание[мНомСтрМаксОбъем].Подразделение, Задание[мНомСтрМаксОбъем].Контрагент, Задание[мНомСтрМаксОбъем].ОбъектСтроительства,
					Задание[мНомСтрМаксОбъем].Маршрут, Задание[мНомСтрМаксОбъем].ВидПеревозки), Ложь);
			КонецЕсли;
			Если мНомСтрМаксКоличествоЕздок <> Неопределено Тогда
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоЕздок, мКоличествоЕздок,
					Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут, ВидПеревозки",
					Задание[мНомСтрМаксКоличествоЕздок].Подразделение, Задание[мНомСтрМаксКоличествоЕздок].Контрагент, Задание[мНомСтрМаксКоличествоЕздок].ОбъектСтроительства,
					Задание[мНомСтрМаксКоличествоЕздок].Маршрут, Задание[мНомСтрМаксКоличествоЕздок].ВидПеревозки), Ложь);
			КонецЕсли;
			Для Каждого ТекСоотвСпец Из СоотвСпецРаботы Цикл	
				Если ТекСоотвСпец.Значение.НомерСтроки <> Неопределено Тогда
					ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, ТекСоотвСпец.Ключ, ТекСоотвСпец.Значение.Количество,
						Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут, ВидПеревозки",
						Задание[ТекСоотвСпец.Значение.НомерСтроки].Подразделение,
						Задание[ТекСоотвСпец.Значение.НомерСтроки].Контрагент,
						Задание[ТекСоотвСпец.Значение.НомерСтроки].ОбъектСтроительства,
						Задание[ТекСоотвСпец.Значение.НомерСтроки].Маршрут,
						Задание[ТекСоотвСпец.Значение.НомерСтроки].ВидПеревозки), Ложь);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого ТекСтрЗадание Из мСтрокиЗадания Цикл
			ТекСтрокаЗадания_КоличествоЕздок = ТекСтрЗадание.КоличествоЕздок;
			
			СтруктураСтроки = Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут, ВидПеревозки, СтроительнаяРабота, СценарийПланирования",
				ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут,
				ТекСтрЗадание.ВидПеревозки, ТекСтрЗадание.СтроительнаяРабота, ТекСтрЗадание.СценарийПланирования);
			
			//время в работе
			Если Не (ПодставлятьВремяВРаботеВПЛпоGPS И ЗначениеЗаполнено(ТранспортноеСредство.уатИспользуемаяСистемаGPS) И ЗначениеЗаполнено(ТранспортноеСредство.уатИДвСистемеНавигации)) Тогда 
				Если ТранспортноеСредство.уатМодель.НаличиеСпидометра Тогда
					ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.КоличествоЧасов), СтруктураСтроки, Ложь);
				Иначе
					//отдельно для порожнего пробега
					//время работы записываем, если общая наработка больше чем уже учтенная до этого
					//(нельзя записать время в работе больше чем разность показаний счетчика в шапке)
					Если мКоличествоЧасов < мОбщаяНаработка Тогда
						ТекНаработка = Мин(мОбщаяНаработка - мКоличествоЧасов, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.КоличествоЧасов));
						ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, ТекНаработка, СтруктураСтроки, Ложь);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			//вес, объем груза, количество ездок для номера этапа = 0 (учет по этапам не ведется)
			Если ТекЭтапЗадания.НомерЕздки = 0 ИЛИ ВесГруза_СуммированиеПоЭтапам Тогда
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВесГруза,	ТекСтрЗадание.КоличествоТонн * ТекСтрЗадание.КоличествоЕздок, СтруктураСтроки, Ложь);
			КонецЕсли;
			Если ТекЭтапЗадания.НомерЕздки = 0 ИЛИ Объем_СуммированиеПоЭтапам Тогда
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.Объем, ТекСтрЗадание.Объем * ТекСтрЗадание.КоличествоЕздок, СтруктураСтроки, Ложь);
			КонецЕсли;
			Если ТекЭтапЗадания.НомерЕздки = 0 ИЛИ КоличествоЕздок_СуммированиеПоЭтапам Тогда
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоЕздок, ТекСтрЗадание.КоличествоЕздок, СтруктураСтроки, Ложь);
			КонецЕсли;
			
			//количество операций
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоОпераций, ТекСтрЗадание.КоличествоОпераций, СтруктураСтроки, Ложь);
			
			//подача
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.Подача, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.Подача), СтруктураСтроки, Ложь);
			
			//пробег с грузом
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегСГрузом, ТекСтрЗадание.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок, СтруктураСтроки, Ложь);
			
			// Спец. работы.
			Если ТекЭтапЗадания.НомерЕздки = 0 ИЛИ ТекСтрЗадание.СпецРабота1.СпособРасчетаПоНомеруЭтапа = 0 Тогда
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, ТекСтрЗадание.СпецРабота1, ТекСтрЗадание.КоличествоСпецРаботы1 * ТекСтрЗадание.КоличествоЕздок, СтруктураСтроки, Ложь);
			КонецЕсли;
			Если ТекЭтапЗадания.НомерЕздки = 0 ИЛИ ТекСтрЗадание.СпецРабота2.СпособРасчетаПоНомеруЭтапа = 0 Тогда
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, ТекСтрЗадание.СпецРабота2, ТекСтрЗадание.КоличествоСпецРаботы2 * ТекСтрЗадание.КоличествоЕздок, СтруктураСтроки, Ложь);
			КонецЕсли;
			Если ТекЭтапЗадания.НомерЕздки = 0 ИЛИ ТекСтрЗадание.СпецРабота3.СпособРасчетаПоНомеруЭтапа = 0 Тогда
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, ТекСтрЗадание.СпецРабота3, ТекСтрЗадание.КоличествоСпецРаботы3 * ТекСтрЗадание.КоличествоЕздок, СтруктураСтроки, Ложь);
			КонецЕсли;
			Если ТекЭтапЗадания.НомерЕздки = 0 ИЛИ ТекСтрЗадание.СпецРабота4.СпособРасчетаПоНомеруЭтапа = 0 Тогда
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, ТекСтрЗадание.СпецРабота4, ТекСтрЗадание.КоличествоСпецРаботы4 * ТекСтрЗадание.КоличествоЕздок, СтруктураСтроки, Ложь);
			КонецЕсли;
			Если ТекЭтапЗадания.НомерЕздки = 0 ИЛИ ТекСтрЗадание.СпецРабота5.СпособРасчетаПоНомеруЭтапа = 0 Тогда
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, ТекСтрЗадание.СпецРабота5, ТекСтрЗадание.КоличествоСпецРаботы5 * ТекСтрЗадание.КоличествоЕздок, СтруктураСтроки, Ложь);
			КонецЕсли;
			
			//тн*км
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ТнКм, ТекСтрЗадание.КоличествоТонн * ТекСтрЗадание.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок, СтруктураСтроки, Ложь);
			
			//объем*км
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ОбъемКм, ТекСтрЗадание.Объем * ТекСтрЗадание.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок, СтруктураСтроки, Ложь);
			
			//количество пассажиров
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоПассажиров, ТекСтрЗадание.КоличествоПассажиров, СтруктураСтроки, Ложь);
			
			//время в работе оборудования, у которого есть спидометр, а не счетчик моточасов
			Для Каждого ТекСтрПрицепы из Прицепы Цикл
				Если ТекСтрПрицепы.ТС.уатМодель.НаличиеСпидометра И ТекСтрЗадание.КоличествоЧасов > 0 Тогда
					Если ПодставлятьВремяВРаботеВПЛпоGPS И ЗначениеЗаполнено(ТекСтрПрицепы.ТС.уатИспользуемаяСистемаGPS) И ЗначениеЗаполнено(ТекСтрПрицепы.ТС.уатИДвСистемеНавигации) Тогда 
						КоличествоВыработкиПоGPS = ПолучитьВыработкуПоGPS(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ВремяВРаботеПоДаннымGPS);
						ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ВремяВРаботе, КоличествоВыработкиПоGPS, СтруктураСтроки, Истина);
					Иначе 
						ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ВремяВРаботе, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.КоличествоЧасов), СтруктураСтроки, Ложь);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			//выработка прицепов и оборудования, указанных в Задании
			Если ЗначениеЗаполнено(ТекСтрЗадание.Прицеп1) Тогда
				Если Не (ПодставлятьВремяВРаботеВПЛпоGPS И ЗначениеЗаполнено(ТекСтрЗадание.Прицеп1.уатИспользуемаяСистемаGPS) И ЗначениеЗаполнено(ТекСтрЗадание.Прицеп1.уатИДвСистемеНавигации)) И Не ТекСтрЗадание.Прицеп1.уатМодель.НаличиеСпидометра Тогда
					ЗаписатьСтрокуВыработкиТС(ТекСтрЗадание.Прицеп1, Справочники.уатПараметрыВыработки.ВремяВРаботе, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.КоличествоЧасовПрицеп1), СтруктураСтроки, Ложь);
				КонецЕсли;
				
				ЗаписатьСтрокуВыработкиТС(ТекСтрЗадание.Прицеп1, Справочники.уатПараметрыВыработки.ПробегСГрузом, ТекСтрЗадание.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок, СтруктураСтроки, Ложь);
				
				ТекСтрокаПрицеп = тблПробегПрицепы.Найти(ТекСтрЗадание.Прицеп1, "Прицеп");
				Если ТекСтрокаПрицеп = Неопределено Тогда
					ТекСтрокаПрицеп = тблПробегПрицепы.Добавить();
					ТекСтрокаПрицеп.Прицеп = ТекСтрЗадание.Прицеп1;
					ТекСтрокаПрицеп.ПробегСГрузом = 0;
					ТекСтрокаПрицеп.ПробегПорожний = 0;
					ТекСтрокаПрицеп.ПробегОбщий = 0;
				КонецЕсли;
				ТекСтрокаПрицеп.ПробегСГрузом = ТекСтрокаПрицеп.ПробегСГрузом + ТекСтрЗадание.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекСтрЗадание.Прицеп2) Тогда
				Если Не (ПодставлятьВремяВРаботеВПЛпоGPS И ЗначениеЗаполнено(ТекСтрЗадание.Прицеп2.уатИспользуемаяСистемаGPS) И ЗначениеЗаполнено(ТекСтрЗадание.Прицеп2.уатИДвСистемеНавигации)) И Не ТекСтрЗадание.Прицеп2.уатМодель.НаличиеСпидометра Тогда
					ЗаписатьСтрокуВыработкиТС(ТекСтрЗадание.Прицеп2, Справочники.уатПараметрыВыработки.ВремяВРаботе, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.КоличествоЧасовПрицеп2), СтруктураСтроки, Ложь);
				КонецЕсли;
				
				ЗаписатьСтрокуВыработкиТС(ТекСтрЗадание.Прицеп2, Справочники.уатПараметрыВыработки.ПробегСГрузом, ТекСтрЗадание.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок, СтруктураСтроки, Ложь);
				
				ТекСтрокаПрицеп = тблПробегПрицепы.Найти(ТекСтрЗадание.Прицеп2, "Прицеп");
				Если ТекСтрокаПрицеп = Неопределено Тогда
					ТекСтрокаПрицеп = тблПробегПрицепы.Добавить();
					ТекСтрокаПрицеп.Прицеп = ТекСтрЗадание.Прицеп2;
					ТекСтрокаПрицеп.ПробегСГрузом = 0;
					ТекСтрокаПрицеп.ПробегПорожний = 0;
					ТекСтрокаПрицеп.ПробегОбщий = 0;
				КонецЕсли;
				ТекСтрокаПрицеп.ПробегСГрузом = ТекСтрокаПрицеп.ПробегСГрузом + ТекСтрЗадание.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок;
			КонецЕсли;
			
			мКоличествоКмСГрузом = мКоличествоКмСГрузом + ТекСтрЗадание.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок;
			мКоличествоЧасов = мКоличествоЧасов + уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.КоличествоЧасов);
		КонецЦикла;
	КонецЦикла;
	
	//отдельно для общего и порожнего пробега
	//порожний пробег записываем, если пробег общий больше пробега с грузом
	//(нельзя записать пробег общий больше чем разность показаний спидометра в шапке)
	мПробегОбщийПоЗаданию = 0;
	Для Каждого ТекЭтапЗадания из мЭтапыЗадания Цикл
		//выбираем строки для каждого этапа задания
		мСтрокиЗадания = Задание.НайтиСтроки(Новый Структура("НомерЕздки, Выполнено", ТекЭтапЗадания.НомерЕздки, Истина));
		
		Для Каждого ТекСтрЗадание Из мСтрокиЗадания Цикл
			СтруктураСтроки = Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут, ВидПеревозки, СтроительнаяРабота, СценарийПланирования",
				ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут,
				ТекСтрЗадание.ВидПеревозки, ТекСтрЗадание.СтроительнаяРабота, ТекСтрЗадание.СценарийПланирования);
				
			ТекСтрокаЗадания_КоличествоЕздок = ТекСтрЗадание.КоличествоЕздок;
			//основное ТС
			ТекПробегПорожний = 0;
			Если мПробегПорожний + мКоличествоКмСГрузом + НулевойПробегВыезда + НулевойПробегВозвращения < мПробегОбщий Тогда
				ТекПробегПорожний = Мин(мПробегОбщий - мПробегПорожний - мКоличествоКмСГрузом - НулевойПробегВыезда - НулевойПробегВозвращения, ТекСтрЗадание.КоличествоКмПорожний * ТекСтрокаЗадания_КоличествоЕздок);
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегПорожний, ТекПробегПорожний, СтруктураСтроки, Ложь);
				мПробегПорожний = мПробегПорожний + ТекПробегПорожний;
			КонецЕсли;
			ТекПробегОбщий = ТекСтрЗадание.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок + ТекПробегПорожний;
			Если Не (ПодставлятьОбщийПробегВПЛпоGPS И ЗначениеЗаполнено(ТранспортноеСредство.уатИспользуемаяСистемаGPS) И ЗначениеЗаполнено(ТранспортноеСредство.уатИДвСистемеНавигации)) Тогда 
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегОбщий, ТекПробегОбщий, СтруктураСтроки, Ложь);
			КонецЕсли;
			мПробегОбщийПоЗаданию = мПробегОбщийПоЗаданию + ТекПробегОбщий;
			
			//прицеп1
			Если ЗначениеЗаполнено(ТекСтрЗадание.Прицеп1) Тогда
				ТекСтрокаПрицеп = тблПробегПрицепы.Найти(ТекСтрЗадание.Прицеп1, "Прицеп");
				мКоличествоКмСГрузомПрицеп = ТекСтрокаПрицеп.ПробегСГрузом;
				мПробегПорожнийПрицеп = ТекСтрокаПрицеп.ПробегПорожний;
				мПробегОбщийПрицеп = ТекСтрокаПрицеп.ПробегОбщий;
				Если мПробегПорожнийПрицеп + мКоличествоКмСГрузомПрицеп + НулевойПробегВыезда + НулевойПробегВозвращения < мПробегОбщий Тогда
					ТекПробегПорожний = Мин(мПробегОбщий - мПробегПорожнийПрицеп - мКоличествоКмСГрузомПрицеп - НулевойПробегВыезда - НулевойПробегВозвращения, ТекСтрЗадание.КоличествоКмПорожний * ТекСтрокаЗадания_КоличествоЕздок);
					
					ЗаписатьСтрокуВыработкиТС(ТекСтрЗадание.Прицеп1, Справочники.уатПараметрыВыработки.ПробегПорожний, ТекПробегПорожний, СтруктураСтроки, Ложь);
					ТекСтрокаПрицеп.ПробегПорожний = ТекСтрокаПрицеп.ПробегПорожний + ТекПробегПорожний;
				КонецЕсли;
				Если мПробегОбщийПрицеп + НулевойПробегВыезда + НулевойПробегВозвращения < мПробегОбщий Тогда
					ТекПробегОбщий = Мин(мПробегОбщий - мПробегОбщийПрицеп - НулевойПробегВыезда - НулевойПробегВозвращения, (ТекСтрЗадание.КоличествоКмПорожний+ТекСтрЗадание.КоличествоКмГруз) * ТекСтрокаЗадания_КоличествоЕздок);
					
					Если Не (ПодставлятьОбщийПробегВПЛпоGPS И ЗначениеЗаполнено(ТекСтрЗадание.Прицеп1.уатИспользуемаяСистемаGPS) И ЗначениеЗаполнено(ТекСтрЗадание.Прицеп1.уатИДвСистемеНавигации)) Тогда 
						ЗаписатьСтрокуВыработкиТС(ТекСтрЗадание.Прицеп1, Справочники.уатПараметрыВыработки.ПробегОбщий, ТекПробегОбщий, СтруктураСтроки, Ложь);
					КонецЕсли;
					ТекСтрокаПрицеп.ПробегОбщий = ТекСтрокаПрицеп.ПробегОбщий + ТекПробегОбщий;
				КонецЕсли;
			КонецЕсли;
			//прицеп2
			Если ЗначениеЗаполнено(ТекСтрЗадание.Прицеп2) Тогда
				ТекСтрокаПрицеп = тблПробегПрицепы.Найти(ТекСтрЗадание.Прицеп2, "Прицеп");
				мКоличествоКмСГрузомПрицеп = ТекСтрокаПрицеп.ПробегСГрузом;
				мПробегПорожнийПрицеп = ТекСтрокаПрицеп.ПробегПорожний;
				мПробегОбщийПрицеп = ТекСтрокаПрицеп.ПробегОбщий;
				Если мПробегПорожнийПрицеп + мКоличествоКмСГрузомПрицеп + НулевойПробегВыезда + НулевойПробегВозвращения < мПробегОбщий Тогда
					ТекПробегПорожний = Мин(мПробегОбщий - мПробегПорожнийПрицеп - мКоличествоКмСГрузомПрицеп - НулевойПробегВыезда - НулевойПробегВозвращения, ТекСтрЗадание.КоличествоКмПорожний * ТекСтрокаЗадания_КоличествоЕздок);
					
					ЗаписатьСтрокуВыработкиТС(ТекСтрЗадание.Прицеп2, Справочники.уатПараметрыВыработки.ПробегПорожний, ТекПробегПорожний, СтруктураСтроки, Ложь);
					ТекСтрокаПрицеп.ПробегПорожний = ТекСтрокаПрицеп.ПробегПорожний + ТекПробегПорожний;
				КонецЕсли;
				Если мПробегОбщийПрицеп + НулевойПробегВыезда + НулевойПробегВозвращения < мПробегОбщий Тогда
					ТекПробегОбщий = Мин(мПробегОбщий - мПробегОбщийПрицеп - НулевойПробегВыезда - НулевойПробегВозвращения, (ТекСтрЗадание.КоличествоКмПорожний+ТекСтрЗадание.КоличествоКмГруз) * ТекСтрокаЗадания_КоличествоЕздок);
					
					Если Не (ПодставлятьОбщийПробегВПЛпоGPS И ЗначениеЗаполнено(ТекСтрЗадание.Прицеп2.уатИспользуемаяСистемаGPS) И ЗначениеЗаполнено(ТекСтрЗадание.Прицеп2.уатИДвСистемеНавигации)) Тогда 
						ЗаписатьСтрокуВыработкиТС(ТекСтрЗадание.Прицеп2, Справочники.уатПараметрыВыработки.ПробегОбщий, ТекПробегОбщий, СтруктураСтроки, Ложь);
					КонецЕсли;
					ТекСтрокаПрицеп.ПробегОбщий = ТекСтрокаПрицеп.ПробегОбщий + ТекПробегОбщий;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	//пробег порожний, не учитанный по строкам задания
	Если мПробегОбщий - мКоличествоКмСГрузом - мПробегПорожний - НулевойПробегВыезда - НулевойПробегВозвращения > 0 Тогда
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегПорожний, мПробегОбщий - мКоличествоКмСГрузом - мПробегПорожний - НулевойПробегВыезда - НулевойПробегВозвращения,,Ложь);
	КонецЕсли;
	
	//пробег общий, не учитанный по строкам задания
	Если ПодставлятьОбщийПробегВПЛпоGPS И ЗначениеЗаполнено(ТранспортноеСредство.уатИспользуемаяСистемаGPS) И ЗначениеЗаполнено(ТранспортноеСредство.уатИДвСистемеНавигации) Тогда 
		КоличествоВыработкиПоGPS = ПолучитьВыработкуПоGPS(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегОбщийПоДаннымGPS);
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегОбщий, КоличествоВыработкиПоGPS,, Истина);
	Иначе 
		Если мПробегОбщий - мПробегОбщийПоЗаданию > 0 Тогда
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегОбщий, мПробегОбщий - мПробегОбщийПоЗаданию,, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	//время в работе основного ТС
	Если ПодставлятьВремяВРаботеВПЛпоGPS И ЗначениеЗаполнено(ТранспортноеСредство.уатИспользуемаяСистемаGPS) И ЗначениеЗаполнено(ТранспортноеСредство.уатИДвСистемеНавигации) Тогда 
		КоличествоВыработкиПоGPS = ПолучитьВыработкуПоGPS(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботеПоДаннымGPS);
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, КоличествоВыработкиПоGPS);
	Иначе 
		Если ТранспортноеСредство.уатМодель.НаличиеСпидометра Тогда
			Если мКоличествоЧасов = 0 Тогда
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, мВремяВРаботе);
			КонецЕсли;
		Иначе
			мНаработка = уатОбщегоНазначения.уатПоказанияСчетчикаВСекунды(уатОбщегоНазначения.уатРазностьПоказанийСчетчика(СпидометрВыезда, СпидометрВозвращения));
			Если мКоличествоЧасов = 0 Тогда
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, мНаработка);
			ИначеЕсли мНаработка > мКоличествоЧасов Тогда
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, мНаработка - мКоличествоЧасов,, Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//теперь прицепы
	Для Каждого ТекСтрПрицепы из Прицепы Цикл
		Если ТекСтрПрицепы.ТС.уатМодель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Автотранспорт 
			ИЛИ ТекСтрПрицепы.ТС.уатМодель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
			//пробег общий
			Если ПодставлятьОбщийПробегВПЛпоGPS И ЗначениеЗаполнено(ТекСтрПрицепы.ТС.уатИспользуемаяСистемаGPS) И ЗначениеЗаполнено(ТекСтрПрицепы.ТС.уатИДвСистемеНавигации) Тогда 
				КоличествоВыработкиПоGPS = ПолучитьВыработкуПоGPS(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ПробегОбщийПоДаннымGPS);
				ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ПробегОбщий, КоличествоВыработкиПоGPS);
			Иначе 
				ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ПробегОбщий, мПробегОбщий);
			КонецЕсли;
			
			//пробег с грузом
			ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ПробегСГрузом, мКоличествоКмСГрузом);
			
			//пробег порожний
			ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ПробегПорожний, мПробегОбщий - мКоличествоКмСГрузом);
		КонецЕсли;
		
		//время в работе
		Если ПодставлятьВремяВРаботеВПЛпоGPS И ЗначениеЗаполнено(ТекСтрПрицепы.ТС.уатИспользуемаяСистемаGPS) И ЗначениеЗаполнено(ТекСтрПрицепы.ТС.уатИДвСистемеНавигации) Тогда 
			КоличествоВыработкиПоGPS = ПолучитьВыработкуПоGPS(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ВремяВРаботеПоДаннымGPS);
			ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ВремяВРаботе, КоличествоВыработкиПоGPS);
		Иначе 
			Если ТекСтрПрицепы.ТС.уатМодель.НаличиеСпидометра Тогда
				Если мКоличествоЧасов = 0 Тогда
					ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ВремяВРаботе, мВремяВРаботе, Новый Структура("Подразделение, Контрагент", Подразделение, Контрагент));
				КонецЕсли;
			Иначе
				мНаработка = уатОбщегоНазначения.уатПоказанияСчетчикаВСекунды(уатОбщегоНазначения.уатРазностьПоказанийСчетчика(ТекСтрПрицепы.СчетчикМЧВыезда, ТекСтрПрицепы.СчетчикМЧВозвращения));
				ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ВремяВРаботе, мНаработка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//количество ТС
	Если Справочники.уатПараметрыВыработки.КоличествоТС.ДействуетНаТС Тогда
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоТС, 1);
	КонецЕсли;
	
	//свертка выработки по аналитикам
	ТЗ = ВыработкаТС.Выгрузить();
	флСвертка = Ложь;
	Если НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоКонтрагентам) Тогда
		
		ТЗ.ЗаполнитьЗначения(Неопределено, "Контрагент");
		флСвертка = Истина;
	КонецЕсли;
	Если НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоПодразделениям) Тогда
		
		ТЗ.ЗаполнитьЗначения(Неопределено, "Подразделение");
		флСвертка = Истина;
	КонецЕсли;
	Если НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоМаршрутам) Тогда
		
		ТЗ.ЗаполнитьЗначения(Неопределено, "Маршрут");
		флСвертка = Истина;
	КонецЕсли;
	Если НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоОбъектамСтроительства) Тогда
		
		ТЗ.ЗаполнитьЗначения(Неопределено, "ОбъектСтроительства");
		ТЗ.ЗаполнитьЗначения(Неопределено, "СтроительнаяРабота");
		ТЗ.ЗаполнитьЗначения(Неопределено, "СценарийПланирования");
		флСвертка = Истина;
	КонецЕсли;
	Если НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоВидамПеревозок) Тогда
		
		ТЗ.ЗаполнитьЗначения(Неопределено, "ВидПеревозки");
		флСвертка = Истина;
	КонецЕсли;
	Если флСвертка Тогда
		ТЗ.Свернуть("ТС, ПараметрВыработки, Подразделение, Контрагент, ОбъектСтроительства, Маршрут, ВидПеревозки, СтроительнаяРабота, СценарийПланирования", "Количество");
		ВыработкаТС.Загрузить(ТЗ);
	КонецЕсли;
КонецПроцедуры

//Процедура рассчитывает выработку ТС по документам ТТД
//
Процедура РасчетВыработкиТС_ПоТТД(Отказ, ПодставлятьВремяВРаботеВПЛпоGPS, ПодставлятьОбщийПробегВПЛпоGPS, АвтообновлениеПЛпоGPS)
	Перем мТаблицаТТД;
	
	мПроверкаТТД = ПроверкаТТД(мТаблицаТТД);
	
	//получим массив непредопределенных произвольных параметров выработки ТТД
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатТТДВыработка.ПараметрВыработки КАК ПараметрВыработки
	|ИЗ
	|	Документ.уатТТД.Выработка КАК уатТТДВыработка
	|ГДЕ
	|	уатТТДВыработка.Ссылка В(&мсвТТД)");
	Запрос.УстановитьПараметр("мсвТТД", мТаблицаТТД.ВыгрузитьКолонку("ТТД"));
	мсвПроизвольныеПараметрыВыработки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПараметрВыработки");
	
	//очистка выработки - только для предопределенных параметров выработки
	//и для параметров с произвольным расчетом, если задана формула расчета
	Сч = ВыработкаТС.Количество() - 1;
	Пока Сч >= 0 Цикл
		ТекСтрока = ВыработкаТС[Сч];
		//также надо очистить непредопределенные параметры, которые указаны в произвольном параметре выработке в ТТД
		Если ТекСтрока.ПараметрВыработки.Предопределенный ИЛИ мсвПроизвольныеПараметрыВыработки.Найти(ТекСтрока.ПараметрВыработки) <> Неопределено
				Или Не ТекСтрока.ПараметрВыработки.Предопределенный И ЗначениеЗаполнено(ТекСтрока.ПараметрВыработки.АлгоритмРасчетаПараметра)
				Или Не Задание.Найти(ТекСтрока.ПараметрВыработки) = Неопределено Тогда
			ВыработкаТС.Удалить(ТекСтрока);
		КонецЕсли;
		
		Сч = Сч - 1;
	КонецЦикла;
	
	Если АвтообновлениеПЛпоGPS Тогда 
		ОбновитьДанныеВыработкиПоGPS();
	КонецЕсли;
	
	Если НЕ мПроверкаТТД Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	//пробег общий для ТС со счетчиком моточасов
	Если НЕ ТранспортноеСредство.уатМодель.НаличиеСпидометра Тогда
		мПробегОбщий = НулевойПробегВыезда + НулевойПробегВозвращения;
		Для Каждого ТекТТД Из мТаблицаТТД Цикл
			Для Каждого ТекСтрокаЗадания Из ТекТТД.ТТД.Выработка Цикл
				ТекСтрокаЗадания_КоличествоЕздок = ?(ТекСтрокаЗадания.КоличествоЕздок = 0, 1, ТекСтрокаЗадания.КоличествоЕздок);
				мПробегОбщий = мПробегОбщий + ТекСтрокаЗадания.КоличествоКмГруз*ТекСтрокаЗадания_КоличествоЕздок
				+ ТекСтрокаЗадания.КоличествоКмПорожний*ТекСтрокаЗадания_КоличествоЕздок;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	//время в наряде
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВНаряде, мВремяВНаряде);
	
	//время в простое
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВПростое, мВремяВПростое - мВремяВПростоеСВклДвигателем);
	
	//время в простое с вкл. двигателем
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВПростоеСВклДвигателем, мВремяВПростоеСВклДвигателем);
	
	//количество дней
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоДней, мКоличествоДней);
	
	//выручка
	Если ВидПЛ = Перечисления.уатВидыПЛ._4 Или ВидПЛ = Перечисления.уатВидыПЛ._6 Или ВидПЛ = Перечисления.уатВидыПЛ._6С Тогда
		мТаблицаВыручка	= Новый ТаблицаЗначений;
		мТаблицаВыручка = Вычислить("уатЗащищенныеФункцииСервер_проф.ПолучитьБилетныеЛистыДляПЛ(Ссылка)");
		Для Каждого ТекСтр из мТаблицаВыручка Цикл
			мБилетныйЛист = ТекСтр.Ссылка;
			Для Каждого ТекСтрВыработка из мБилетныйЛист.Билеты Цикл
				Если ТекСтрВыработка.ПутЛист = Ссылка Тогда
					мКоличествоПассажиров= мКоличествоПассажиров + ТекСтрВыработка.Количество;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		//количество пассажиров
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоПассажиров, мКоличествоПассажиров);
		
		//пробег с пассажирами
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегСПассажирами, мПробегОбщий - НулевойПробегВыезда - НулевойПробегВозвращения);
	КонецЕсли;
	
	мКоличествоКмСГрузом = 0;
	мКоличествоЧасов = 0;
	мПробегПорожний = 0;
	мОбщаяНаработка = уатОбщегоНазначения.уатПоказанияСчетчикаВСекунды(уатОбщегоНазначения.уатРазностьПоказанийСчетчика(СпидометрВыезда, СпидометрВозвращения));
	
	Для Каждого ТекСтр из мТаблицаТТД Цикл
		мТТД = ТекСтр.ТТД;
		Для Каждого ТекСтрЗадание из мТТД.Выработка Цикл
			Если ТекСтрЗадание.ПутЛист <> Ссылка Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураСтроки = Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут, ВидПеревозки",
				Подразделение, мТТД.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут, ТекСтрЗадание.ВидПеревозки);
			
			ТекСтрокаЗадания_КоличествоЕздок = ТекСтрЗадание.КоличествоЕздок;
			
			//время в работе
			Если Не (ПодставлятьВремяВРаботеВПЛпоGPS И ЗначениеЗаполнено(ТранспортноеСредство.уатИспользуемаяСистемаGPS) И ЗначениеЗаполнено(ТранспортноеСредство.уатИДвСистемеНавигации)) Тогда 
				Если ТранспортноеСредство.уатМодель.НаличиеСпидометра Тогда
					ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.КоличествоЧасов), , Ложь);
				Иначе
					//отдельно для порожнего пробега
					//время работы записываем, если общая наработка больше чем уже учтенная до этого
					//(нельзя записать время в работе больше чем разность показаний счетчика в шапке)
					Если мКоличествоЧасов < мОбщаяНаработка Тогда
						ТекНаработка = Мин(мОбщаяНаработка - мКоличествоЧасов, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.КоличествоЧасов));
						ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, ТекНаработка, СтруктураСтроки, Ложь);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			//пробег с грузом
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегСГрузом, ТекСтрЗадание.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок, СтруктураСтроки, Ложь);
			
			//вес груза
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВесГруза, ТекСтрЗадание.КоличествоТонн * ТекСтрокаЗадания_КоличествоЕздок, СтруктураСтроки, Ложь);
			
			//объем
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.Объем, ТекСтрЗадание.Объем * ТекСтрокаЗадания_КоличествоЕздок, СтруктураСтроки, Ложь);
			
			//количество ездок
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоЕздок, ТекСтрЗадание.КоличествоЕздок, СтруктураСтроки, Ложь);
			
			//количество операций
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоОпераций, ТекСтрЗадание.КоличествоОпераций, СтруктураСтроки, Ложь);
			
			//подача
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.Подача, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.Подача), СтруктураСтроки, Ложь);
			
			//простой под погрузкой
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПростойПодПогрузкой, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.ПростойПодПогрузкой), СтруктураСтроки, Ложь);
			
			//простой под разгрузкой
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПростойПодРазгрузкой, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.ПростойПодРазгрузкой), СтруктураСтроки, Ложь);
			
			//погрузочно-разгрузочные работы
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПогрузочноРазгрузочныеРаботы, ТекСтрЗадание.ПогрузочноРазгрузочныеРаботы, СтруктураСтроки, Ложь);
			
			// Спец. работы.
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, ТекСтрЗадание.СпецРабота1, ТекСтрЗадание.КоличествоСпецРаботы1 * ТекСтрокаЗадания_КоличествоЕздок, СтруктураСтроки, Ложь);
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, ТекСтрЗадание.СпецРабота2, ТекСтрЗадание.КоличествоСпецРаботы2 * ТекСтрокаЗадания_КоличествоЕздок, СтруктураСтроки, Ложь);
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, ТекСтрЗадание.СпецРабота3, ТекСтрЗадание.КоличествоСпецРаботы3 * ТекСтрокаЗадания_КоличествоЕздок, СтруктураСтроки, Ложь);
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, ТекСтрЗадание.СпецРабота4, ТекСтрЗадание.КоличествоСпецРаботы4 * ТекСтрокаЗадания_КоличествоЕздок, СтруктураСтроки, Ложь);
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, ТекСтрЗадание.СпецРабота5, ТекСтрЗадание.КоличествоСпецРаботы5 * ТекСтрокаЗадания_КоличествоЕздок, СтруктураСтроки, Ложь);
			
			//тн*км
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ТнКм, ТекСтрЗадание.КоличествоТонн * ТекСтрЗадание.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок, СтруктураСтроки, Ложь);
			
			//объем*км
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ОбъемКм, ТекСтрЗадание.Объем * ТекСтрЗадание.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок, СтруктураСтроки, Ложь);
			
			//ручной произвольный параметр выработки
			Если ЗначениеЗаполнено(ТекСтрЗадание.ПараметрВыработки) И ТекСтрЗадание.Выработка > 0 Тогда
				Если ТекСтрЗадание.ПараметрВыработки.Временный Тогда
					ТекВыработка = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.Выработка);
				Иначе
					ТекВыработка = ТекСтрЗадание.Выработка;
				КонецЕсли;
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, ТекСтрЗадание.ПараметрВыработки, ТекВыработка, СтруктураСтроки, Ложь);
			КонецЕсли;
			
			мКоличествоКмСГрузом = мКоличествоКмСГрузом + ТекСтрЗадание.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок;
			мКоличествоЧасов = мКоличествоЧасов + уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.КоличествоЧасов);
		КонецЦикла;
	КонецЦикла;
	
	//отдельно для общего и порожнего пробега
	//порожний пробег записываем, если пробег общий больше пробега с грузом
	//(нельзя записать пробег общий больше чем разность показаний спидометра в шапке)
	мПробегОбщийПоЗаданию = 0;
	Для Каждого ТекСтр из мТаблицаТТД Цикл
		мТТД = ТекСтр.ТТД;
		Для Каждого ТекСтрЗадание из мТТД.Выработка Цикл
			Если ТекСтрЗадание.ПутЛист <> Ссылка Тогда
				Продолжить;
			КонецЕсли;
			ТекПробегПорожний = 0;
			ТекСтрокаЗадания_КоличествоЕздок = ТекСтрЗадание.КоличествоЕздок;
			СтруктураСтроки = Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут, ВидПеревозки",
				Подразделение, мТТД.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут, ТекСтрЗадание.ВидПеревозки);
			
			Если мПробегПорожний + мКоличествоКмСГрузом + НулевойПробегВыезда + НулевойПробегВозвращения < мПробегОбщий Тогда
				ТекПробегПорожний = Мин(мПробегОбщий - мПробегПорожний - мКоличествоКмСГрузом - НулевойПробегВыезда - НулевойПробегВозвращения, ТекСтрЗадание.КоличествоКмПорожний * ТекСтрокаЗадания_КоличествоЕздок);
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегПорожний, ТекПробегПорожний, СтруктураСтроки, Ложь);
				мПробегПорожний = мПробегПорожний + ТекПробегПорожний;
			КонецЕсли;
			ТекПробегОбщий = ТекСтрЗадание.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок + ТекПробегПорожний;
			Если Не (ПодставлятьОбщийПробегВПЛпоGPS И ЗначениеЗаполнено(ТранспортноеСредство.уатИспользуемаяСистемаGPS) И ЗначениеЗаполнено(ТранспортноеСредство.уатИДвСистемеНавигации)) Тогда 
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегОбщий, ТекПробегОбщий, СтруктураСтроки, Ложь);
			КонецЕсли;
			мПробегОбщийПоЗаданию = мПробегОбщийПоЗаданию + ТекПробегОбщий;
		КонецЦикла;
	КонецЦикла;
	
	//время в работе основного ТС
	Если ПодставлятьВремяВРаботеВПЛпоGPS И ЗначениеЗаполнено(ТранспортноеСредство.уатИспользуемаяСистемаGPS) И ЗначениеЗаполнено(ТранспортноеСредство.уатИДвСистемеНавигации) Тогда 
		КоличествоВыработкиПоGPS = ПолучитьВыработкуПоGPS(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботеПоДаннымGPS);
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, КоличествоВыработкиПоGPS);
	Иначе 
		Если ТранспортноеСредство.уатМодель.НаличиеСпидометра Тогда //спидометр
			Если мКоличествоЧасов = 0 Тогда
				Если мТаблицаТТД.Количество() = 1 Тогда
					ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, мВремяВРаботе, Новый Структура("Подразделение, Контрагент", Подразделение, мТаблицаТТД[0].Контрагент));
				Иначе
					ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, мВремяВРаботе);
				КонецЕсли;
			КонецЕсли;
			
		Иначе //счетчик м/ч
			мНаработка = уатОбщегоНазначения.уатПоказанияСчетчикаВСекунды(уатОбщегоНазначения.уатРазностьПоказанийСчетчика(СпидометрВыезда, СпидометрВозвращения));
			Если мКоличествоЧасов = 0 Тогда
				Если мТаблицаТТД.Количество() = 1 Тогда
					ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, мНаработка, Новый Структура("Подразделение, Контрагент", Подразделение, мТаблицаТТД[0].Контрагент));
				Иначе
					ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, мНаработка);
				КонецЕсли;
			ИначеЕсли мНаработка > мКоличествоЧасов Тогда
				Если мТаблицаТТД.Количество() = 1 Тогда
					ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, мНаработка-мКоличествоЧасов, Новый Структура("Подразделение, Контрагент", Подразделение, мТаблицаТТД[0].Контрагент));
				Иначе
					ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, мНаработка-мКоличествоЧасов);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//теперь прицепы
	Для Каждого ТекСтрПрицепы из Прицепы Цикл
		Если ТекСтрПрицепы.ТС.уатМодель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Автотранспорт 
			ИЛИ ТекСтрПрицепы.ТС.уатМодель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
			//пробег общий
			Если ПодставлятьОбщийПробегВПЛпоGPS И ЗначениеЗаполнено(ТекСтрПрицепы.ТС.уатИспользуемаяСистемаGPS) И ЗначениеЗаполнено(ТекСтрПрицепы.ТС.уатИДвСистемеНавигации) Тогда 
				КоличествоВыработкиПоGPS = ПолучитьВыработкуПоGPS(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ПробегОбщийПоДаннымGPS);
				ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ПробегОбщий, КоличествоВыработкиПоGPS);
			Иначе 
				ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ПробегОбщий, мПробегОбщий);
			КонецЕсли;
			
			//пробег с грузом
			ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ПробегСГрузом, мКоличествоКмСГрузом);
			
			//пробег порожний
			ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ПробегПорожний, мПробегОбщий - мКоличествоКмСГрузом);
		КонецЕсли;
		
		Если ТекСтрПрицепы.ТС.уатМодель.НаличиеСпидометра Тогда
			мНаработка = ?(мКоличествоЧасов = 0, мВремяВРаботе, мКоличествоЧасов);
		Иначе
			мНаработка = уатОбщегоНазначения.уатПоказанияСчетчикаВСекунды(уатОбщегоНазначения.уатРазностьПоказанийСчетчика(ТекСтрПрицепы.СчетчикМЧВыезда, ТекСтрПрицепы.СчетчикМЧВозвращения));
		КонецЕсли;
		
		//время в работе
		Если ПодставлятьВремяВРаботеВПЛпоGPS И ЗначениеЗаполнено(ТекСтрПрицепы.ТС.уатИспользуемаяСистемаGPS) И ЗначениеЗаполнено(ТекСтрПрицепы.ТС.уатИДвСистемеНавигации) Тогда 
			КоличествоВыработкиПоGPS = ПолучитьВыработкуПоGPS(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ВремяВРаботеПоДаннымGPS);
			ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ВремяВРаботе, КоличествоВыработкиПоGPS);
		Иначе 
			ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ВремяВРаботе, мНаработка);
		КонецЕсли;
	КонецЦикла;
	
	//пробег порожний, не учитанный по строкам задания ТТД
	Если мПробегОбщий - мКоличествоКмСГрузом - мПробегПорожний - НулевойПробегВыезда - НулевойПробегВозвращения > 0 Тогда
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегПорожний, мПробегОбщий - мКоличествоКмСГрузом - мПробегПорожний - НулевойПробегВыезда - НулевойПробегВозвращения,,Ложь);
	КонецЕсли;
	
	//пробег общий, не учитанный по строкам задания
	Если ПодставлятьОбщийПробегВПЛпоGPS И ЗначениеЗаполнено(ТранспортноеСредство.уатИспользуемаяСистемаGPS) И ЗначениеЗаполнено(ТранспортноеСредство.уатИДвСистемеНавигации) Тогда 
		КоличествоВыработкиПоGPS = ПолучитьВыработкуПоGPS(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегОбщийПоДаннымGPS);
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегОбщий, КоличествоВыработкиПоGPS,, Истина);
	Иначе 
		Если мПробегОбщий - мПробегОбщийПоЗаданию > 0 Тогда
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегОбщий, мПробегОбщий - мПробегОбщийПоЗаданию,, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	//если из ТТД не пришло количество рейсов
	НайденнаяСтрока = ВыработкаТС.Найти(Справочники.уатПараметрыВыработки.КоличествоРейсов, "ПараметрВыработки");
	Если НайденнаяСтрока = Неопределено Тогда
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоРейсов, 1, , , Ложь);
	КонецЕсли;
	
	//количество ТС
	Если Справочники.уатПараметрыВыработки.КоличествоТС.ДействуетНаТС Тогда
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоТС, 1);
	КонецЕсли;
КонецПроцедуры

//Процедура рассчитывает выработку ТС вручную
//При этом следующие параметры пересчитываются при расчете итогов:
// - Пробег общий,
// - Время в работе,
// - Время в наряде,
// - Время ночное,
// - Время в простое.
//Остальные параметры не пересчитываются.
//
Процедура РасчетВыработкиТС_Ручной(Отказ, ПодставлятьВремяВРаботеВПЛпоGPS, ПодставлятьОбщийПробегВПЛпоGPS, АвтообновлениеПЛпоGPS)
	
	//очистка выработки - только параметров с произвольным расчетом, если задана формула расчета
	Сч = ВыработкаТС.Количество() - 1;
	Пока Сч >= 0 Цикл
		ТекСтрока = ВыработкаТС[Сч];
		Если НЕ ТекСтрока.ПараметрВыработки.Предопределенный И ЗначениеЗаполнено(ТекСтрока.ПараметрВыработки.АлгоритмРасчетаПараметра) Тогда
			ВыработкаТС.Удалить(ТекСтрока);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
	Если АвтообновлениеПЛпоGPS Тогда 
		ОбновитьДанныеВыработкиПоGPS();
	КонецЕсли;
	
	//пробег
	Если ПодставлятьОбщийПробегВПЛпоGPS И ЗначениеЗаполнено(ТранспортноеСредство.уатИспользуемаяСистемаGPS) И ЗначениеЗаполнено(ТранспортноеСредство.уатИДвСистемеНавигации) Тогда 
		КоличествоВыработкиПоGPS = ПолучитьВыработкуПоGPS(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегОбщийПоДаннымGPS);
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегОбщий, КоличествоВыработкиПоGPS,, Истина, Истина);
	Иначе 
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегОбщий, мПробегОбщий,, Истина, Истина);
	КонецЕсли;
	
	//пробег порожний
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегПорожний, мПробегОбщий,, Истина, Истина);
	
	//время в наряде
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВНаряде, мВремяВНаряде,, Истина, Истина);
	
	//время в работе. Если у ТС спидометр, то время берем из задания, иначе показания спидометра используются
	//как счетчики моточасов
	Если ТранспортноеСредство.уатМодель.НаличиеСпидометра Тогда
		мНаработка = мВремяВРаботе;
	Иначе
		мНаработка = уатОбщегоНазначения.уатПоказанияСчетчикаВСекунды(уатОбщегоНазначения.уатРазностьПоказанийСчетчика(СпидометрВыезда,СпидометрВозвращения));
	КонецЕсли;
	
	Если ПодставлятьВремяВРаботеВПЛпоGPS И ЗначениеЗаполнено(ТранспортноеСредство.уатИспользуемаяСистемаGPS) И ЗначениеЗаполнено(ТранспортноеСредство.уатИДвСистемеНавигации) Тогда 
		КоличествоВыработкиПоGPS = ПолучитьВыработкуПоGPS(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботеПоДаннымGPS);
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, КоличествоВыработкиПоGPS,, Истина, Истина);
	Иначе 
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, мНаработка,, Истина, Истина);
	КонецЕсли;
	
	//время в простое
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВПростое, мВремяВПростое - мВремяВПростоеСВклДвигателем,, Истина, Истина);
	
	//время в простое с вкл. двигателем
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВПростоеСВклДвигателем, мВремяВПростоеСВклДвигателем,, Истина, Истина);
	
	//количество дней
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоДней, мКоличествоДней,, Истина, Истина);
	
	//количество рейсов
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоРейсов, 1,, Истина, Истина);
	
	// теперь прицепы
	Для Каждого ТекСтрПрицепы из Прицепы Цикл
		Если ТекСтрПрицепы.ТС.уатМодель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Автотранспорт 
			ИЛИ ТекСтрПрицепы.ТС.уатМодель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда 
			//пробег
			Если ПодставлятьОбщийПробегВПЛпоGPS И ЗначениеЗаполнено(ТекСтрПрицепы.ТС.уатИспользуемаяСистемаGPS) И ЗначениеЗаполнено(ТекСтрПрицепы.ТС.уатИДвСистемеНавигации) Тогда 
				КоличествоВыработкиПоGPS = ПолучитьВыработкуПоGPS(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ПробегОбщийПоДаннымGPS);
				ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ПробегОбщий, КоличествоВыработкиПоGPS,, Истина, Истина);
			Иначе 
				ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ПробегОбщий, мПробегОбщий,, Истина, Истина);
			КонецЕсли;
			
			//пробег порожний
			ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ПробегПорожний, мПробегОбщий,, Истина, Истина);
		КонецЕсли;
		
		Если Не ТекСтрПрицепы.ТС.уатМодель.НаличиеСпидометра Тогда	//Счетчик моточасов
			Если ПодставлятьВремяВРаботеВПЛпоGPS И ЗначениеЗаполнено(ТекСтрПрицепы.ТС.уатИспользуемаяСистемаGPS) И ЗначениеЗаполнено(ТекСтрПрицепы.ТС.уатИДвСистемеНавигации) Тогда 
				КоличествоВыработкиПоGPS = ПолучитьВыработкуПоGPS(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ВремяВРаботеПоДаннымGPS);
				ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ВремяВРаботе, КоличествоВыработкиПоGPS,, Истина, Истина);
			Иначе 
				мНаработка = уатОбщегоНазначения.уатПоказанияСчетчикаВСекунды(уатОбщегоНазначения.уатРазностьПоказанийСчетчика(ТекСтрПрицепы.СчетчикМЧВыезда, ТекСтрПрицепы.СчетчикМЧВозвращения));
				//время в работе
				Если мНаработка <> 0 Тогда
					ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ВремяВРаботе, мНаработка,, Истина, Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//количество ТС
	Если Справочники.уатПараметрыВыработки.КоличествоТС.ДействуетНаТС Тогда
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоТС, 1,,, Истина);
	КонецЕсли;
КонецПроцедуры

//Процедура записывает строку выработки ТС
//ДопАналитика: структура, содержащая ключи Подразделение, Контрагент, ОбъектСтроительства, Маршрут
//	флУдалитьСтрокиБезДопАналитик - если Истина, тогда перед добавлением новой строки выработки будут очищены
//		не только строки, соотв. структуре ДопАналитика, но также и все остальные строки, для которых
//		значения ТС и Параметра выработки совпадают с входными параметрами. Имеет смысл только для значения
//		флЗамещать = Истина
//
Процедура ЗаписатьСтрокуВыработкиТС(ВыбТС, ПараметрВыработки, КоличествоВыработки, ДопАналитика = Неопределено, Знач флЗамещать = Истина, флУдалитьСтрокиБезДопАналитик = Ложь) Экспорт
	ВыбПодразделение = Неопределено;
	ВыбКонтрагент = Неопределено;
	ВыбОбъектСтроительства = Неопределено;
	ВыбМаршрут = Неопределено;
	ВыбВидПеревозки = Неопределено;
	ВыбСтроительнаяРабота = Неопределено;
	ВыбСценарийПланированияПроектовСтроительства = Неопределено;
	
	Если ДопАналитика <> Неопределено И ДопАналитика.Свойство("Подразделение") Тогда
		ВыбПодразделение = ДопАналитика.Подразделение;
	КонецЕсли;
	Если ДопАналитика <> Неопределено И ДопАналитика.Свойство("Контрагент") Тогда
		ВыбКонтрагент = ДопАналитика.Контрагент;
	КонецЕсли;
	Если ДопАналитика <> Неопределено И ДопАналитика.Свойство("ОбъектСтроительства") Тогда
		ВыбОбъектСтроительства = ДопАналитика.ОбъектСтроительства;
	КонецЕсли;
	Если ДопАналитика <> Неопределено И ДопАналитика.Свойство("Маршрут") Тогда
		ВыбМаршрут = ДопАналитика.Маршрут;
	КонецЕсли;
	Если ДопАналитика <> Неопределено И ДопАналитика.Свойство("ВидПеревозки") Тогда
		ВыбВидПеревозки = ДопАналитика.ВидПеревозки;
	КонецЕсли;
	Если ДопАналитика <> Неопределено И ДопАналитика.Свойство("СтроительнаяРабота") Тогда
		ВыбСтроительнаяРабота = ДопАналитика.СтроительнаяРабота;
	КонецЕсли;
	Если ДопАналитика <> Неопределено И ДопАналитика.Свойство("СценарийПланирования") Тогда
		ВыбСценарийПланированияПроектовСтроительства = ДопАналитика.СценарийПланирования;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("ТС, ПараметрВыработки", ВыбТС, ПараметрВыработки);
	Если ЗначениеЗаполнено(ВыбПодразделение) Тогда
		СтруктураОтбора.Вставить("Подразделение", ВыбПодразделение);
	Иначе
		СтруктураОтбора.Вставить("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыбКонтрагент) Тогда
		СтруктураОтбора.Вставить("Контрагент", ВыбКонтрагент);
	Иначе
		СтруктураОтбора.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыбОбъектСтроительства) Тогда
		СтруктураОтбора.Вставить("ОбъектСтроительства", ВыбОбъектСтроительства);
	Иначе
		СтруктураОтбора.Вставить("ОбъектСтроительства", Справочники.СМ_ОбъектыСтроительства.ПустаяСсылка());
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыбМаршрут) Тогда
		СтруктураОтбора.Вставить("Маршрут", ВыбМаршрут);
	Иначе
		СтруктураОтбора.Вставить("Маршрут", Справочники.уатМаршруты.ПустаяСсылка());
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыбВидПеревозки) Тогда
		СтруктураОтбора.Вставить("ВидПеревозки", ВыбВидПеревозки);
	Иначе
		СтруктураОтбора.Вставить("ВидПеревозки", Справочники.уатВидыПеревозок.ПустаяСсылка());
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыбСтроительнаяРабота) Тогда
		СтруктураОтбора.Вставить("СтроительнаяРабота", ВыбСтроительнаяРабота);
	Иначе
		СтруктураОтбора.Вставить("СтроительнаяРабота", Справочники.УСОERP_СтроительныеРаботы.ПустаяСсылка());
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыбСценарийПланированияПроектовСтроительства) Тогда
		СтруктураОтбора.Вставить("СценарийПланирования", ВыбСценарийПланированияПроектовСтроительства);
	Иначе
		СтруктураОтбора.Вставить("СценарийПланирования", Справочники.УСОERP_СценарииПланированияПроектовСтроительства.ПустаяСсылка());
	КонецЕсли;
	
	мМассивСтрок = ВыработкаТС.НайтиСтроки(СтруктураОтбора);
	Если мМассивСтрок.Количество() = 0 Тогда
		ТекСтрокаВыработки = ВыработкаТС.Добавить();
		ТекСтрокаВыработки.ТС = ВыбТС;
		ТекСтрокаВыработки.ПараметрВыработки = ПараметрВыработки;
		ТекСтрокаВыработки.Подразделение = ВыбПодразделение;
		ТекСтрокаВыработки.Контрагент = ВыбКонтрагент;
		ТекСтрокаВыработки.ОбъектСтроительства = ВыбОбъектСтроительства;
		ТекСтрокаВыработки.Маршрут = ВыбМаршрут;
		ТекСтрокаВыработки.ВидПеревозки = ВыбВидПеревозки;
		ТекСтрокаВыработки.СтроительнаяРабота = ВыбСтроительнаяРабота;
		ТекСтрокаВыработки.СценарийПланирования = ВыбСценарийПланированияПроектовСтроительства;
	Иначе
		ТекСтрокаВыработки = мМассивСтрок[0];
	КонецЕсли;
	Если флЗамещать Тогда
		//очистим все строки с указанным ТС и парам. выработки, кроме найденной строки
		Если флУдалитьСтрокиБезДопАналитик Тогда
			СтруктураОтбора = Новый Структура("ТС, ПараметрВыработки", ВыбТС, ПараметрВыработки);
			мМассивСтрок = ВыработкаТС.НайтиСтроки(СтруктураОтбора);
			Для Каждого ТекСтрока Из мМассивСтрок Цикл
				Если ТекСтрока <> ТекСтрокаВыработки Тогда
					ВыработкаТС.Удалить(ТекСтрока);
				КонецЕсли;
			КонецЦикла;
			//чистим заодно и доп. аналитики
			ТекСтрокаВыработки.Подразделение = Неопределено;
			ТекСтрокаВыработки.Контрагент = Неопределено;
			ТекСтрокаВыработки.ОбъектСтроительства = Неопределено;
			ТекСтрокаВыработки.Маршрут = Неопределено;
			ТекСтрокаВыработки.ВидПеревозки = Неопределено;
			ТекСтрокаВыработки.СтроительнаяРабота = Неопределено;
			ТекСтрокаВыработки.СценарийПланирования = Неопределено;
		КонецЕсли;
		ТекСтрокаВыработки.Количество = КоличествоВыработки;
	Иначе //приплюсуем к тому что есть уже
		ТекСтрокаВыработки.Количество = ТекСтрокаВыработки.Количество + КоличествоВыработки;
	КонецЕсли;
	
	Если ТекСтрокаВыработки.Количество = 0 Тогда
		ВыработкаТС.Удалить(ТекСтрокаВыработки);
	Иначе
		мПараметрВыработки = уатОбщегоНазначения.уатПараметрыВыработкиТС();
		мМассивПараметров = мПараметрВыработки.НайтиСтроки(Новый СТруктура("ПараметрВыработки", ТекСтрокаВыработки.ПараметрВыработки));
		Если мМассивПараметров.Количество() = 0 Тогда
			ВыработкаТС.Удалить(ТекСтрокаВыработки);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ЗаписатьСтрокуВыработкиТС()

// РАСЧЕТ ВЫРАБОТКИ СОТРУДНИКОВ

//Процедура рассчитывает выработку сотрудников
//
Процедура РасчетВыработкиСотрудников(Отказ) Экспорт
	Перем мТаблицаТТД;
	
	Если ТранспортноеСредство.уатМодель.НаличиеСпидометра Тогда
		мПробегОбщий = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(СпидометрВыезда,СпидометрВозвращения);
	Иначе
		мПробегОбщий = 0;
	КонецЕсли;
	
	РасчитатьВременныеПараметры();
	РасчетФОВ();
	
	//составим список задействованных сотрудников
	списСотрудники = Новый СписокЗначений();
	списСотрудники.Добавить(Водитель1);
	Если ЗначениеЗаполнено(Водитель2) Тогда
		списСотрудники.Добавить(Водитель2);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Сотрудник1) Тогда
		списСотрудники.Добавить(Сотрудник1);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Сотрудник2) Тогда
		списСотрудники.Добавить(Сотрудник2);
	КонецЕсли;	
	
	РезультатЗапросаПоПараметрамСПроизвольнымРасчетом = ПолучитьПараметрыВыработкиСПроизвольнымРасчетом();
	
	//удалим строки выработки с водителями/сотрудниками, которых нет в ПЛ
	мсвСотрудников = списСотрудники.ВыгрузитьЗначения();
	Сч = ВыработкаСотрудников.Количество() - 1;
	Пока Сч >= 0 Цикл
		ТекСтрокаВыработка = ВыработкаСотрудников[Сч];
		Если мсвСотрудников.Найти(ТекСтрокаВыработка.Сотрудник) = Неопределено Тогда
			ВыработкаСотрудников.Удалить(ТекСтрокаВыработка);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
	//расчет по заданию
	Если РежимРасчетаВыработки = Перечисления.уатРежимыРасчетаВыработкиПЛ.ПоЗаданию Тогда
		РасчетВыработкиСотрудников_ПоЗаданию(Отказ, списСотрудники, РезультатЗапросаПоПараметрамСПроизвольнымРасчетом);
		
		//расчет выработки по ТТД
	ИначеЕсли РежимРасчетаВыработки = Перечисления.уатРежимыРасчетаВыработкиПЛ.ПоТТД Тогда
		РасчетВыработкиСотрудников_ПоТТД(Отказ, списСотрудники, РезультатЗапросаПоПараметрамСПроизвольнымРасчетом);
		
		//расчет ручной
	ИначеЕсли РежимРасчетаВыработки = Перечисления.уатРежимыРасчетаВыработкиПЛ.Ручной Тогда
		РасчетВыработкиСотрудников_Ручной(Отказ, списСотрудники, РезультатЗапросаПоПараметрамСПроизвольнымРасчетом);
		
	КонецЕсли;
	
	// расчет произвольных параметров выработки
	Если РежимРасчетаВыработки <> Перечисления.уатРежимыРасчетаВыработкиПЛ.НеРассчитывать Тогда
		// произвольные параметры выработки (по шапке)
		ПараметрыСРасчетомПоШапке = РезультатЗапросаПоПараметрамСПроизвольнымРасчетом[1].Выгрузить();
		Для сч = 0 По списСотрудники.Количество() - 1 Цикл
			мСотрудник = списСотрудники[сч].Значение;
			Для Каждого Параметр Из ПараметрыСРасчетомПоШапке Цикл
				Если Параметр.ДействуетНаСотрудников Тогда					
					ЗначениеПараметра = ВычислитьПроизвольныйПараметрВыработкиПоШапке(Параметр);
					Если НЕ ЗначениеПараметра = "ошибка" Тогда
						ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Параметр.Ссылка, ЗначениеПараметра);
					КонецЕсли;					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// произвольные параметры выработки (по заданию)
		Если Задание.Количество() Тогда
			ПараметрыСРасчетомПоЗаданию = РезультатЗапросаПоПараметрамСПроизвольнымРасчетом[0].Выгрузить();	
			Для сч = 0 По списСотрудники.Количество() - 1 Цикл
				мСотрудник = списСотрудники[сч].Значение;
				мЭтапыЗадания = Задание.Выгрузить();
				мЭтапыЗадания.Свернуть("НомерЕздки");
				Для Каждого ТекЭтапЗадания из мЭтапыЗадания Цикл
					//выбираем строки для каждого этапа задания
					мСтрокиЗадания = Задание.НайтиСтроки(Новый Структура("НомерЕздки, Выполнено", ТекЭтапЗадания.НомерЕздки, Истина));
					Для Каждого ТекСтрЗадание Из мСтрокиЗадания Цикл
						Для Каждого Параметр Из ПараметрыСРасчетомПоЗаданию Цикл
							Если Параметр.ДействуетНаСотрудников Тогда
								ЗначениеПараметра = ВычислитьПроизвольныйПараметрВыработки(Параметр, ТекСтрЗадание);
								Если НЕ ЗначениеПараметра = "ошибка" Тогда
									ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Параметр.Ссылка, ЗначениеПараметра,
										Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут, ВидПеревозки, СтроительнаяРабота, СценарийПланирования",
										ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут,
										ТекСтрЗадание.ВидПеревозки, ТекСтрЗадание.СтроительнаяРабота, ТекСтрЗадание.СценарийПланирования), Ложь);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;		
					КонецЦикла;	
				КонецЦикла;	
			КонецЦикла;
		КонецЕсли;	
		
		// произвольные параметры выработки (по ТТД)
		ПараметрыСРасчетомПоТТД = РезультатЗапросаПоПараметрамСПроизвольнымРасчетом[2].Выгрузить();	
		Если ПараметрыСРасчетомПоТТД.Количество() И ПроверкаТТД(мТаблицаТТД, 1, "выработки сотрудников") Тогда
			Для Каждого ТекСтр из мТаблицаТТД Цикл
				Для сч = 0 По списСотрудники.Количество() - 1 Цикл
					мСотрудник = списСотрудники[сч].Значение;
					мТТД = ТекСтр.ТТД;
					Для Каждого ТекСтрЗадание из мТТД.Выработка Цикл
						Если ТекСтрЗадание.ПутЛист <> Ссылка Тогда
							Продолжить;
						КонецЕсли;
						
						Для Каждого Параметр Из ПараметрыСРасчетомПоТТД Цикл
							Если Параметр.ДействуетНаСотрудников Тогда
								ЗначениеПараметра = ВычислитьПроизвольныйПараметрВыработки(Параметр, ТекСтрЗадание);
								Если НЕ ЗначениеПараметра = "ошибка" Тогда
									ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Параметр.Ссылка, ЗначениеПараметра,
										Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут, ВидПеревозки",
										Подразделение, мТТД.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут, ТекСтрЗадание.ВидПеревозки), Ложь);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;						
					КонецЦикла;
				КонецЦикла;	
			КонецЦикла;			
		КонецЕсли;
	КонецЕсли;	
	
	СвернутьВыработкуСотрудниковпоУчетнойПолитике();
КонецПроцедуры //РасчетВыработкиСотрудников()

//Процедура рассчитывает выработку сотрудников по ТЧ Задание
//
Процедура РасчетВыработкиСотрудников_ПоЗаданию(Отказ, списСотрудники, РезультатЗапросаПоПараметрам)
	
	//очистка выработки - только для предопределенных параметров выработки
	//и для параметров с произвольным расчетом, если задана формула расчета
	Сч = ВыработкаСотрудников.Количество() - 1;
	Пока Сч >= 0 Цикл
		ТекСтрока = ВыработкаСотрудников[Сч];
		Если ТекСтрока.ПараметрВыработки.Предопределенный 
				Или Не ТекСтрока.ПараметрВыработки.Предопределенный И ЗначениеЗаполнено(ТекСтрока.ПараметрВыработки.АлгоритмРасчетаПараметра)
				Или Не Задание.Найти(ТекСтрока.ПараметрВыработки) = Неопределено Тогда
			ВыработкаСотрудников.Удалить(ТекСтрока);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
	ВесГруза_СуммированиеПоЭтапам = (Справочники.уатПараметрыВыработки.ВесГруза.СпособРасчетаПоНомеруЭтапа = 0);
	Объем_СуммированиеПоЭтапам = (Справочники.уатПараметрыВыработки.Объем.СпособРасчетаПоНомеруЭтапа = 0);
	КоличествоЕздок_СуммированиеПоЭтапам = (Справочники.уатПараметрыВыработки.КоличествоЕздок.СпособРасчетаПоНомеруЭтапа = 0);
	
	Для сч = 0 По списСотрудники.Количество() - 1 Цикл
		мСотрудник = списСотрудники[сч].Значение;
		
		мВремяДеньСотрудника = 0;
		мВремяНочьСотрудника = 0;
		Для Каждого ТекСтрока Из ФактическиОтработанноеВремя Цикл
			Если ТекСтрока.Сотрудник = мСотрудник Тогда
				мВремяДеньСотрудника = мВремяДеньСотрудника + ТекСтрока.ВремяДневное;
				мВремяНочьСотрудника = мВремяНочьСотрудника + ТекСтрока.ВремяНочное;
			КонецЕсли;
		КонецЦикла;
		
		//время в наряде
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяВНаряде, мВремяВНаряде);
		
		//время в работе
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяВРаботе, мВремяДеньСотрудника + мВремяНочьСотрудника);
		
		//время в простое
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяВПростое, мВремяВПростое - мВремяВПростоеСВклДвигателем);
	
		//время в простое с вкл. двигателем
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяВПростоеСВклДвигателем, мВремяВПростоеСВклДвигателем);
	
		//время дневное
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяДневное, мВремяДеньСотрудника);
		
		//время ночное
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяНочное, мВремяНочьСотрудника);
		
		//количество дней
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоДней, мКоличествоДней);
		
		//количество рейсов
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоРейсов, 1,, Ложь);
		
		//пробег с пассажирами
		Если ВидПЛ = Перечисления.уатВидыПЛ._4 Или ВидПЛ = Перечисления.уатВидыПЛ._6 Или ВидПЛ = Перечисления.уатВидыПЛ._6С Тогда
			ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегСПассажирами, мПробегОбщий - НулевойПробегВыезда - НулевойПробегВозвращения);
		КонецЕсли;
		
		//делаем таблицу с номерами этапов
		мЭтапыЗадания = Задание.Выгрузить();
		мЭтапыЗадания.Свернуть("НомерЕздки");
		
		мКоличествоЧасов = 0;
		мПробегПорожний = 0;
		мКоличествоКмСГрузом = 0;
		Для Каждого ТекЭтапЗадания из мЭтапыЗадания Цикл
			//выбираем строки для каждого этапа задания
			мСтрокиЗадания = Задание.НайтиСтроки(Новый Структура("НомерЕздки, Выполнено", ТекЭтапЗадания.НомерЕздки, Истина));
			мВесГруза = 0;
			мОбъем = 0;			
			
			//вес, объем груза, количество ездок для номера этапа <> 0 (учет по этапам ведется)
			//для разных строк с одинаковым номером этапа либо суммируем, либо выбираем максимальное значение
			Если ТекЭтапЗадания.НомерЕздки <> 0 Тогда
				мВесГруза = 0;
				мОбъем = 0;
				мКоличествоЕздок = 0;
				мНомСтрМаксВес = Неопределено;
				мНомСтрМаксОбъем = Неопределено;
				мНомСтрМаксКоличествоЕздок = Неопределено;
				СоотвСпецРаботы = Новый Соответствие;
				
				Для Каждого ТекСтрЗадание Из мСтрокиЗадания Цикл
					Если НЕ ВесГруза_СуммированиеПоЭтапам И мВесГруза < ТекСтрЗадание.КоличествоТонн * ТекСтрЗадание.КоличествоЕздок Тогда
						мВесГруза = ТекСтрЗадание.КоличествоТонн * ТекСтрЗадание.КоличествоЕздок;
						мНомСтрМаксВес = ТекСтрЗадание.НомерСтроки-1;
					КонецЕсли;
					Если НЕ Объем_СуммированиеПоЭтапам И мОбъем < ТекСтрЗадание.Объем * ТекСтрЗадание.КоличествоЕздок Тогда
						мОбъем = ТекСтрЗадание.Объем * ТекСтрЗадание.КоличествоЕздок;
						мНомСтрМаксОбъем = ТекСтрЗадание.НомерСтроки-1;
					КонецЕсли;
					Если НЕ КоличествоЕздок_СуммированиеПоЭтапам И мКоличествоЕздок < ТекСтрЗадание.КоличествоЕздок Тогда
						мКоличествоЕздок = ТекСтрЗадание.КоличествоЕздок;
						мНомСтрМаксКоличествоЕздок = ТекСтрЗадание.НомерСтроки-1;
					КонецЕсли;
					Для СчСпец = 1 По 5 Цикл
						Если ТекСтрЗадание["КоличествоСпецРаботы" + СчСпец] > 0 И ТекСтрЗадание["СпецРабота" + СчСпец].СпособРасчетаПоНомеруЭтапа = 1 Тогда
							СтруктураСпец = СоотвСпецРаботы.Получить(ТекСтрЗадание["СпецРабота" + СчСпец]);
							Если СтруктураСпец = Неопределено Тогда
								СтруктураСпец = Новый Структура("Количество, НомерСтроки", 0, Неопределено);
							КонецЕсли;
							Если СтруктураСпец.Количество < ТекСтрЗадание["КоличествоСпецРаботы" + СчСпец] * ТекСтрЗадание.КоличествоЕздок Тогда
								СтруктураСпец.Количество = ТекСтрЗадание["КоличествоСпецРаботы" + СчСпец] * ТекСтрЗадание.КоличествоЕздок;
								СтруктураСпец.НомерСтроки = ТекСтрЗадание.НомерСтроки-1;
							КонецЕсли;
							СоотвСпецРаботы.Вставить(ТекСтрЗадание["СпецРабота" + СчСпец], СтруктураСпец);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				Если мНомСтрМаксВес <> Неопределено Тогда
					ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВесГруза, мВесГруза,
						Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут, ВидПеревозки",
						Задание[мНомСтрМаксВес].Подразделение, Задание[мНомСтрМаксВес].Контрагент, Задание[мНомСтрМаксВес].ОбъектСтроительства,
						Задание[мНомСтрМаксВес].Маршрут, Задание[мНомСтрМаксВес].ВидПеревозки), Ложь);
				КонецЕсли;
				Если мНомСтрМаксОбъем <> Неопределено Тогда
					ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.Объем, мОбъем,
						Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут, ВидПеревозки",
						Задание[мНомСтрМаксОбъем].Подразделение, Задание[мНомСтрМаксОбъем].Контрагент, Задание[мНомСтрМаксОбъем].ОбъектСтроительства,
						Задание[мНомСтрМаксОбъем].Маршрут, Задание[мНомСтрМаксОбъем].ВидПеревозки), Ложь);
				КонецЕсли;
				Если мНомСтрМаксКоличествоЕздок <> Неопределено Тогда
					ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоЕздок, мКоличествоЕздок,
						Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут, ВидПеревозки",
						Задание[мНомСтрМаксКоличествоЕздок].Подразделение, Задание[мНомСтрМаксКоличествоЕздок].Контрагент, Задание[мНомСтрМаксКоличествоЕздок].ОбъектСтроительства,
						Задание[мНомСтрМаксКоличествоЕздок].Маршрут, Задание[мНомСтрМаксКоличествоЕздок].ВидПеревозки), Ложь);
				КонецЕсли;
				Для Каждого ТекСоотвСпец Из СоотвСпецРаботы Цикл	
					Если ТекСоотвСпец.Значение.НомерСтроки <> Неопределено Тогда
						ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, ТекСоотвСпец.Ключ, ТекСоотвСпец.Значение.Количество,
							Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут, ВидПеревозки",
							Задание[ТекСоотвСпец.Значение.НомерСтроки].Подразделение,
							Задание[ТекСоотвСпец.Значение.НомерСтроки].Контрагент,
							Задание[ТекСоотвСпец.Значение.НомерСтроки].ОбъектСтроительства,
							Задание[ТекСоотвСпец.Значение.НомерСтроки].Маршрут,
							Задание[ТекСоотвСпец.Значение.НомерСтроки].ВидПеревозки), Ложь);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Для Каждого ТекСтрЗадание Из мСтрокиЗадания Цикл
				ТекСтрокаЗадания_КоличествоЕздок = ТекСтрЗадание.КоличествоЕздок;
				
				СтруктураСтроки = Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут, ВидПеревозки, СтроительнаяРабота, СценарийПланирования",
					ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут,
					ТекСтрЗадание.ВидПеревозки, ТекСтрЗадание.СтроительнаяРабота, ТекСтрЗадание.СценарийПланирования);
				
				//количество пассажиров
				Если ВидПЛ = Перечисления.уатВидыПЛ._4 Или ВидПЛ = Перечисления.уатВидыПЛ._6 Или ВидПЛ = Перечисления.уатВидыПЛ._6С Тогда
					ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоПассажиров, ТекСтрЗадание.КоличествоПассажиров, СтруктураСтроки, Ложь);
				КонецЕсли;
				
				//пробег с грузом
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегСГрузом, ТекСтрЗадание.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок, СтруктураСтроки, Ложь);
				
				//спец. работа
				Если ТекЭтапЗадания.НомерЕздки = 0 ИЛИ ТекСтрЗадание.СпецРабота1.СпособРасчетаПоНомеруЭтапа = 0 Тогда
					ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, ТекСтрЗадание.СпецРабота1, ТекСтрЗадание.КоличествоСпецРаботы1 * ТекСтрЗадание.КоличествоЕздок, СтруктураСтроки, Ложь);
				КонецЕсли;
				Если ТекЭтапЗадания.НомерЕздки = 0 ИЛИ ТекСтрЗадание.СпецРабота2.СпособРасчетаПоНомеруЭтапа = 0 Тогда
					ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, ТекСтрЗадание.СпецРабота2, ТекСтрЗадание.КоличествоСпецРаботы2 * ТекСтрЗадание.КоличествоЕздок, СтруктураСтроки, Ложь);
				КонецЕсли;
				Если ТекЭтапЗадания.НомерЕздки = 0 ИЛИ ТекСтрЗадание.СпецРабота3.СпособРасчетаПоНомеруЭтапа = 0 Тогда
					ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, ТекСтрЗадание.СпецРабота3, ТекСтрЗадание.КоличествоСпецРаботы3 * ТекСтрЗадание.КоличествоЕздок, СтруктураСтроки, Ложь);
				КонецЕсли;
				Если ТекЭтапЗадания.НомерЕздки = 0 ИЛИ ТекСтрЗадание.СпецРабота4.СпособРасчетаПоНомеруЭтапа = 0 Тогда
					ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, ТекСтрЗадание.СпецРабота4, ТекСтрЗадание.КоличествоСпецРаботы4 * ТекСтрЗадание.КоличествоЕздок, СтруктураСтроки, Ложь);
				КонецЕсли;
				Если ТекЭтапЗадания.НомерЕздки = 0 ИЛИ ТекСтрЗадание.СпецРабота5.СпособРасчетаПоНомеруЭтапа = 0 Тогда
					ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, ТекСтрЗадание.СпецРабота5, ТекСтрЗадание.КоличествоСпецРаботы5 * ТекСтрЗадание.КоличествоЕздок, СтруктураСтроки, Ложь);
				КонецЕсли;
				
				//тн*км
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ТнКм, ТекСтрЗадание.КоличествоТонн * ТекСтрЗадание.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок, СтруктураСтроки, Ложь);
				
				//объем*км
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ОбъемКм, ТекСтрЗадание.Объем * ТекСтрЗадание.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок, СтруктураСтроки, Ложь);				
				
				//количество операций
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоОпераций, ТекСтрЗадание.КоличествоОпераций, СтруктураСтроки, Ложь);
				
				//подача
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.Подача, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.Подача), СтруктураСтроки, Ложь);
				
				//вес, объем груза, количество ездок для номера этапа = 0 (учет по этапам не ведется)
				Если ТекЭтапЗадания.НомерЕздки = 0 ИЛИ ВесГруза_СуммированиеПоЭтапам Тогда
					ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВесГруза, ТекСтрЗадание.КоличествоТонн * ТекСтрЗадание.КоличествоЕздок, СтруктураСтроки, Ложь);
				КонецЕсли;
				Если ТекЭтапЗадания.НомерЕздки = 0 ИЛИ Объем_СуммированиеПоЭтапам Тогда
					ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.Объем, ТекСтрЗадание.Объем * ТекСтрЗадание.КоличествоЕздок, СтруктураСтроки, Ложь);
				КонецЕсли;
				Если ТекЭтапЗадания.НомерЕздки = 0 ИЛИ КоличествоЕздок_СуммированиеПоЭтапам Тогда
					ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоЕздок, ТекСтрЗадание.КоличествоЕздок, СтруктураСтроки, Ложь);
				КонецЕсли;
				
				мКоличествоКмСГрузом = мКоличествоКмСГрузом + ТекСтрЗадание.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок;
			КонецЦикла;	
		КонецЦикла;
		
		//отдельно для общего и порожнего пробега
		//порожний пробег записываем, если пробег общий больше пробега с грузом
		//(нельзя записать пробег общий больше чем разность показаний спидометра в шапке)
		мПробегОбщийПоЗаданию = 0;
		Для Каждого ТекЭтапЗадания из мЭтапыЗадания Цикл
			//выбираем строки для каждого этапа задания
			мСтрокиЗадания = Задание.НайтиСтроки(Новый Структура("НомерЕздки, Выполнено", ТекЭтапЗадания.НомерЕздки, Истина));
			
			Для Каждого ТекСтрЗадание Из мСтрокиЗадания Цикл
				СтруктураСтроки = Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут, ВидПеревозки, СтроительнаяРабота, СценарийПланирования",
					ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут,
					ТекСтрЗадание.ВидПеревозки, ТекСтрЗадание.СтроительнаяРабота, ТекСтрЗадание.СценарийПланирования);
					
				ТекСтрокаЗадания_КоличествоЕздок = ТекСтрЗадание.КоличествоЕздок;
				ТекПробегПорожний = 0;
				Если мПробегПорожний + мКоличествоКмСГрузом + НулевойПробегВыезда + НулевойПробегВозвращения < мПробегОбщий Тогда
					ТекПробегПорожний = Мин(мПробегОбщий - мПробегПорожний - мКоличествоКмСГрузом - НулевойПробегВыезда - НулевойПробегВозвращения, ТекСтрЗадание.КоличествоКмПорожний * ТекСтрокаЗадания_КоличествоЕздок);
					ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегПорожний, ТекПробегПорожний, СтруктураСтроки, Ложь);
					мПробегПорожний = мПробегПорожний + ТекПробегПорожний;
				ИначеЕсли НЕ ТранспортноеСредство.уатМодель.НаличиеСпидометра Тогда	
					 ТекПробегПорожний = ТекПробегПорожний + ТекСтрЗадание.КоличествоКмПорожний;
					 ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегПорожний, ТекПробегПорожний, СтруктураСтроки, Ложь);
				КонецЕсли;
				ТекПробегОбщий = ТекСтрЗадание.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок + ТекПробегПорожний;
				
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегОбщий, ТекПробегОбщий, СтруктураСтроки, Ложь);
				
				мПробегОбщийПоЗаданию = мПробегОбщийПоЗаданию + ТекПробегОбщий;
			КонецЦикла;
		КонецЦикла;
		
		//пробег порожний, не учитанный по строкам задания
		Если мПробегОбщий - мКоличествоКмСГрузом - мПробегПорожний - НулевойПробегВыезда - НулевойПробегВозвращения > 0 Тогда
			ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегПорожний, мПробегОбщий - мКоличествоКмСГрузом - мПробегПорожний - НулевойПробегВыезда - НулевойПробегВозвращения,,Ложь);
		КонецЕсли;
		
		//пробег общий, не учитанный по строкам задания
		Если мПробегОбщий - мПробегОбщийПоЗаданию > 0 Тогда
			ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегОбщий, мПробегОбщий - мПробегОбщийПоЗаданию,, Ложь);
		КонецЕсли;
		
		//количество ТС
		Если Справочники.уатПараметрыВыработки.КоличествоТС.ДействуетНаСотрудников Тогда
			ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоТС, 1);
		КонецЕсли;
	КонецЦикла;
	
	//свертка выработки по аналитикам
	ТЗ = ВыработкаСотрудников.Выгрузить();
	флСвертка = Ложь;
	Если НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоКонтрагентам) Тогда
		
		ТЗ.ЗаполнитьЗначения(Неопределено, "Контрагент");
		флСвертка = Истина;
	КонецЕсли;
	Если НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоПодразделениям) Тогда
		
		ТЗ.ЗаполнитьЗначения(Неопределено, "Подразделение");
		флСвертка = Истина;
	КонецЕсли;
	Если НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоМаршрутам) Тогда
		
		ТЗ.ЗаполнитьЗначения(Неопределено, "Маршрут");
		флСвертка = Истина;
	КонецЕсли;
	Если НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоОбъектамСтроительства) Тогда
		
		ТЗ.ЗаполнитьЗначения(Неопределено, "ОбъектСтроительства");
		ТЗ.ЗаполнитьЗначения(Неопределено, "СтроительнаяРабота");
		ТЗ.ЗаполнитьЗначения(Неопределено, "СценарийПланирования");
		флСвертка = Истина;
	КонецЕсли;
	Если НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоВидамПеревозок) Тогда
		
		ТЗ.ЗаполнитьЗначения(Неопределено, "ВидПеревозки");
		флСвертка = Истина;
	КонецЕсли;
	Если флСвертка Тогда
		ТЗ.Свернуть("Сотрудник, ПараметрВыработки, Подразделение, Контрагент, ОбъектСтроительства, Маршрут, ВидПеревозки, СтроительнаяРабота, СценарийПланирования", "Количество");
		ВыработкаСотрудников.Загрузить(ТЗ);
	КонецЕсли;
	
КонецПроцедуры

//Процедура рассчитывает выработку сотрудников по документам ТТД
//
Процедура РасчетВыработкиСотрудников_ПоТТД(Отказ, списСотрудники, РезультатЗапросаПоПараметрам)
	Перем мТаблицаТТД;
	
	мПроверкаТТД = ПроверкаТТД(мТаблицаТТД, , "выработки сотрудников");
	
	//получим массив непредопределенных произвольных параметров выработки ТТД
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатТТДВыработка.ПараметрВыработки КАК ПараметрВыработки
	|ИЗ
	|	Документ.уатТТД.Выработка КАК уатТТДВыработка
	|ГДЕ
	|	уатТТДВыработка.Ссылка В(&мсвТТД)");
	Запрос.УстановитьПараметр("мсвТТД", мТаблицаТТД.ВыгрузитьКолонку("ТТД"));
	мсвПроизвольныеПараметрыВыработки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПараметрВыработки");
	
	//очистка выработки - только для предопределенных параметров выработки
	//и для параметров с произвольным расчетом, если задана формула расчета
	Сч = ВыработкаСотрудников.Количество() - 1;
	Пока Сч >= 0 Цикл
		ТекСтрока = ВыработкаСотрудников[Сч];
		//также надо очистить непредопределенные параметры, которые указаны в произвольном параметре выработке в ТТД
		Если ТекСтрока.ПараметрВыработки.Предопределенный ИЛИ мсвПроизвольныеПараметрыВыработки.Найти(ТекСтрока.ПараметрВыработки) <> Неопределено
				Или Не ТекСтрока.ПараметрВыработки.Предопределенный И ЗначениеЗаполнено(ТекСтрока.ПараметрВыработки.АлгоритмРасчетаПараметра)
				Или Не Задание.Найти(ТекСтрока.ПараметрВыработки) = Неопределено Тогда
			ВыработкаСотрудников.Удалить(ТекСтрока);
		КонецЕсли;
		
		Сч = Сч - 1;
	КонецЦикла;
	
	Если НЕ мПроверкаТТД Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	Для сч = 0 По списСотрудники.Количество() - 1 Цикл
		мСотрудник = списСотрудники[сч].Значение;
		
		мВремяДеньСотрудника = 0;
		мВремяНочьСотрудника = 0;
		Для Каждого ТекСтрока Из ФактическиОтработанноеВремя Цикл
			Если ТекСтрока.Сотрудник = мСотрудник Тогда
				мВремяДеньСотрудника = мВремяДеньСотрудника + ТекСтрока.ВремяДневное;
				мВремяНочьСотрудника = мВремяНочьСотрудника + ТекСтрока.ВремяНочное;
			КонецЕсли;
		КонецЦикла;
		
		//время в наряде
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяВНаряде, мВремяВНаряде);
		
		//время в работе
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяВРаботе, мВремяДеньСотрудника + мВремяНочьСотрудника);
		
		//время дневное
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяДневное, мВремяДеньСотрудника);
		
		//время ночное
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяНочное, мВремяНочьСотрудника);
		
		//время в простое
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяВПростое, мВремяВПростое - мВремяВПростоеСВклДвигателем);
	
		//время в простое с вкл. двигателем
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяВПростоеСВклДвигателем, мВремяВПростоеСВклДвигателем);
	
		//количество дней
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоДней, мКоличествоДней);
		
		//выручка
		Если ВидПЛ = Перечисления.уатВидыПЛ._4 Или ВидПЛ = Перечисления.уатВидыПЛ._6 Или ВидПЛ = Перечисления.уатВидыПЛ._6С Тогда
			Если уатОбщегоНазначенияТиповые.уатЕстьДокумент("уатБилетныйЛист") Тогда
				мТаблицаВыручка	= Новый ТаблицаЗначений;
				мТаблицаВыручка = Вычислить("уатЗащищенныеФункцииСервер_проф.ПолучитьБилетныеЛистыДляПЛ(Ссылка)");
				Для Каждого ТекСтр из мТаблицаВыручка Цикл
					мБилетныйЛист = ТекСтр.Ссылка;
					Для Каждого ТекСтрВыработка из мБилетныйЛист.Билеты Цикл
						Если ТекСтрВыработка.ПутЛист = Ссылка Тогда
							мКоличествоПассажиров= мКоличествоПассажиров + ТекСтрВыработка.Количество;
						КонецЕсли;	
					КонецЦикла;	
				КонецЦикла;	
				
				//количество пассажиров
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоПассажиров, мКоличествоПассажиров);
				
				//пробег с пассажирами
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегСПассажирами, мПробегОбщий - НулевойПробегВыезда - НулевойПробегВозвращения);
			КонецЕсли;	
		КонецЕсли;
		
		мКоличествоЧасов = 0;
		мПробегПорожний = 0;
		мКоличествоКмСГрузом = 0;
		
		Для Каждого ТекСтр из мТаблицаТТД Цикл
			мТТД = ТекСтр.ТТД;
			Для Каждого ТекСтрВыработка из мТТД.Выработка Цикл
				Если ТекСтрВыработка.ПутЛист <> Ссылка Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураСтроки = Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут, ВидПеревозки",
					Подразделение, мТТД.Контрагент, ТекСтрВыработка.ОбъектСтроительства, ТекСтрВыработка.Маршрут, ТекСтрВыработка.ВидПеревозки);
					
				ТекСтрокаЗадания_КоличествоЕздок = ТекСтрВыработка.КоличествоЕздок;
				
				//вес груза
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВесГруза, ТекСтрВыработка.КоличествоТонн * ТекСтрокаЗадания_КоличествоЕздок, СтруктураСтроки, Ложь);
				
				//объем
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.Объем, ТекСтрВыработка.Объем * ТекСтрокаЗадания_КоличествоЕздок, СтруктураСтроки, Ложь);
				
				//пробег с грузом
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегСГрузом, ТекСтрВыработка.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок, СтруктураСтроки, Ложь);
				
				// Спец. работы.
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, ТекСтрВыработка.СпецРабота1, ТекСтрВыработка.КоличествоСпецРаботы1 * ТекСтрокаЗадания_КоличествоЕздок, СтруктураСтроки, Ложь);
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, ТекСтрВыработка.СпецРабота2, ТекСтрВыработка.КоличествоСпецРаботы2 * ТекСтрокаЗадания_КоличествоЕздок, СтруктураСтроки, Ложь);
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, ТекСтрВыработка.СпецРабота3, ТекСтрВыработка.КоличествоСпецРаботы3 * ТекСтрокаЗадания_КоличествоЕздок, СтруктураСтроки, Ложь);
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, ТекСтрВыработка.СпецРабота4, ТекСтрВыработка.КоличествоСпецРаботы4 * ТекСтрокаЗадания_КоличествоЕздок, СтруктураСтроки, Ложь);
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, ТекСтрВыработка.СпецРабота5, ТекСтрВыработка.КоличествоСпецРаботы5 * ТекСтрокаЗадания_КоличествоЕздок, СтруктураСтроки, Ложь);
				
				//тн*км
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ТнКм, ТекСтрВыработка.КоличествоТонн * ТекСтрВыработка.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок, СтруктураСтроки, Ложь);
				
				//объем*км
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ОбъемКм, ТекСтрВыработка.Объем * ТекСтрВыработка.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок, СтруктураСтроки, Ложь);
				
				//количество ездок
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоЕздок, ТекСтрВыработка.КоличествоЕздок, СтруктураСтроки, Ложь);
				
				//количество операций
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоОпераций, ТекСтрВыработка.КоличествоОпераций, СтруктураСтроки, Ложь);
				
				//погрузочно-разгрузочные работы
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПогрузочноРазгрузочныеРаботы, ТекСтрВыработка.ПогрузочноРазгрузочныеРаботы, СтруктураСтроки, Ложь);
				
				//простой под погрузкой
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПростойПодПогрузкой, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрВыработка.ПростойПодПогрузкой), СтруктураСтроки, Ложь);
				
				//простой под разгрузкой
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПростойПодРазгрузкой, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрВыработка.ПростойПодРазгрузкой), СтруктураСтроки, Ложь);
				
				//подача
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.Подача, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрВыработка.Подача), СтруктураСтроки, Ложь);
				
				//ручной произвольный параметр выработки
				Если ЗначениеЗаполнено(ТекСтрВыработка.ПараметрВыработки) И ТекСтрВыработка.Выработка > 0 Тогда
					Если ТекСтрВыработка.ПараметрВыработки.Временный Тогда
						ТекВыработка = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрВыработка.Выработка);
					Иначе
						ТекВыработка = ТекСтрВыработка.Выработка;
					КонецЕсли;
					ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, ТекСтрВыработка.ПараметрВыработки, ТекВыработка, СтруктураСтроки, Ложь);
				КонецЕсли;
				
				мКоличествоКмСГрузом = мКоличествоКмСГрузом + ТекСтрВыработка.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок;
			КонецЦикла;	
		КонецЦикла;
		
		//отдельно для общего и порожнего пробега
		//порожний пробег записываем, если пробег общий больше пробега с грузом
		//(нельзя записать пробег общий больше чем разность показаний спидометра в шапке)
		мПробегОбщийПоЗаданию = 0;
		Для Каждого ТекСтр из мТаблицаТТД Цикл
			мТТД = ТекСтр.ТТД;
			Для Каждого ТекСтрЗадание из мТТД.Выработка Цикл
				Если ТекСтрЗадание.ПутЛист <> Ссылка Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураСтроки = Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут, ВидПеревозки",
					Подразделение, мТТД.Контрагент, ТекСтрВыработка.ОбъектСтроительства, ТекСтрВыработка.Маршрут, ТекСтрВыработка.ВидПеревозки);
					
				ТекСтрокаЗадания_КоличествоЕздок = ТекСтрЗадание.КоличествоЕздок;
				ТекПробегПорожний = 0;
				Если мПробегПорожний + мКоличествоКмСГрузом + НулевойПробегВыезда + НулевойПробегВозвращения < мПробегОбщий Тогда
					ТекПробегПорожний = Мин(мПробегОбщий - мПробегПорожний - мКоличествоКмСГрузом - НулевойПробегВыезда - НулевойПробегВозвращения, ТекСтрЗадание.КоличествоКмПорожний * ТекСтрокаЗадания_КоличествоЕздок);
					ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегПорожний, ТекПробегПорожний, СтруктураСтроки, Ложь);
					мПробегПорожний = мПробегПорожний + ТекПробегПорожний;
				ИначеЕсли НЕ ТранспортноеСредство.уатМодель.НаличиеСпидометра Тогда	
					ТекПробегПорожний = ТекПробегПорожний + ТекСтрЗадание.КоличествоКмПорожний;
					ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегПорожний, ТекПробегПорожний, СтруктураСтроки, Ложь);
				КонецЕсли;
				ТекПробегОбщий = ТекСтрЗадание.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок + ТекПробегПорожний;
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегОбщий, ТекПробегОбщий, СтруктураСтроки, Ложь);
				мПробегОбщийПоЗаданию = мПробегОбщийПоЗаданию + ТекПробегОбщий;
			КонецЦикла;
		КонецЦикла;
		
		//пробег порожний, не учитанный по строкам задания
		Если мПробегОбщий - мКоличествоКмСГрузом - мПробегПорожний - НулевойПробегВыезда - НулевойПробегВозвращения > 0 Тогда
			ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегПорожний, мПробегОбщий - мКоличествоКмСГрузом - мПробегПорожний - НулевойПробегВыезда - НулевойПробегВозвращения,,Ложь);
		КонецЕсли;
		
		//пробег общий, не учитанный по строкам задания
		Если мПробегОбщий - мПробегОбщийПоЗаданию > 0 Тогда
			ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегОбщий, мПробегОбщий - мПробегОбщийПоЗаданию,, Ложь);
		КонецЕсли;
		
		//если из ТТД не пришло количество рейсов
		мсвНайденныеСтроки = ВыработкаСотрудников.НайтиСтроки(Новый Структура("Сотрудник, ПараметрВыработки", мСотрудник, Справочники.уатПараметрыВыработки.КоличествоРейсов));
		Если мсвНайденныеСтроки.Количество() = 0 Тогда
			ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоРейсов, 1, , Ложь);
		КонецЕсли;
		
		//количество ТС
		Если Справочники.уатПараметрыВыработки.КоличествоТС.ДействуетНаСотрудников Тогда
			ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоТС, 1);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//Процедура рассчитывает выработку сотрудников вручную
//При этом следующие параметры пересчитываются при расчете итогов:
// - Пробег общий,
// - Время в работе,
// - Время в наряде,
// - Время ночное,
// - Время в простое.
//Остальные параметры не пересчитываются.
//
Процедура РасчетВыработкиСотрудников_Ручной(Отказ, списСотрудники, РезультатЗапросаПоПараметрам)
	
	//очистка выработки - только для предопределенных параметров выработки
	//и для параметров с произвольным расчетом, если задана формула расчета
	Сч = ВыработкаТС.Количество() - 1;
	Пока Сч >= 0 Цикл
		ТекСтрока = ВыработкаТС[Сч];
		Если НЕ ТекСтрока.ПараметрВыработки.Предопределенный И ЗначениеЗаполнено(ТекСтрока.ПараметрВыработки.АлгоритмРасчетаПараметра) Тогда
			ВыработкаТС.Удалить(ТекСтрока);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;	
	
	Для сч = 0 По списСотрудники.Количество() - 1 Цикл
		мСотрудник = списСотрудники[сч].Значение;
		
		мВремяДеньСотрудника = 0;
		мВремяНочьСотрудника = 0;
		Для Каждого ТекСтрока Из ФактическиОтработанноеВремя Цикл
			Если ТекСтрока.Сотрудник = мСотрудник Тогда
				мВремяДеньСотрудника = мВремяДеньСотрудника + ТекСтрока.ВремяДневное;
				мВремяНочьСотрудника = мВремяНочьСотрудника + ТекСтрока.ВремяНочное;
			КонецЕсли;
		КонецЦикла;
		
		//пробег
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегОбщий, мПробегОбщий,, Истина, Истина);
		
		//время в наряде
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяВНаряде, мВремяВНаряде,, Истина, Истина);
		
		//время в работе
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяВРаботе, мВремяДеньСотрудника + мВремяНочьСотрудника,, Истина, Истина);
		
		//время дневное
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяДневное, мВремяДеньСотрудника,, Истина, Истина);
		
		//время ночное
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяНочное, мВремяНочьСотрудника,, Истина, Истина);
		
		//время в простое
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяВПростое, мВремяВПростое - мВремяВПростоеСВклДвигателем,, Истина, Истина);
	
		//время в простое с вкл. двигателем
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяВПростоеСВклДвигателем, мВремяВПростоеСВклДвигателем,, Истина, Истина);
	
		//количество дней
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоДней, мКоличествоДней,, Истина, Истина);
		
		//количество рейсов
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоРейсов, 1,, Истина, Истина);
		
		//количество ТС
		Если Справочники.уатПараметрыВыработки.КоличествоТС.ДействуетНаСотрудников Тогда
			ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоТС, 1,, Истина, Истина);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//Процедура записывает строку выработки сотрудника
//	флУдалитьСтрокиБезДопАналитик - если Истина, тогда перед добавлением новой строки выработки будут очищены
//		не только строки, соотв. структуре ДопАналитика, но также и все остальные строки, для которых
//		значения сотрудника и Параметра выработки совпадают с входными параметрами. Имеет смысл только для значения
//		флЗамещать = Истина
Процедура ЗаписатьСтрокуВыработкиСотрудника(ВыбСотрудник, ПараметрВыработки, КоличествоВыработки, ДопАналитика = Неопределено, Знач флЗамещать = Истина, флУдалитьСтрокиБезДопАналитик = Ложь) Экспорт
	ВыбПодразделение = Неопределено;
	ВыбКонтрагент = Неопределено;
	ВыбОбъектСтроительства = Неопределено;
	ВыбМаршрут = Неопределено;
	ВыбВидПеревозки = Неопределено;
	ВыбСтроительнаяРабота = Неопределено;
	ВыбСценарийПланированияПроектовСтроительства = Неопределено;
	
	Если ДопАналитика <> Неопределено И ДопАналитика.Свойство("Подразделение") Тогда
		ВыбПодразделение = ДопАналитика.Подразделение;
	КонецЕсли;
	Если ДопАналитика <> Неопределено И ДопАналитика.Свойство("Контрагент") Тогда
		ВыбКонтрагент = ДопАналитика.Контрагент;
	КонецЕсли;
	Если ДопАналитика <> Неопределено И ДопАналитика.Свойство("ОбъектСтроительства") Тогда
		ВыбОбъектСтроительства = ДопАналитика.ОбъектСтроительства;
	КонецЕсли;
	Если ДопАналитика <> Неопределено И ДопАналитика.Свойство("Маршрут") Тогда
		ВыбМаршрут = ДопАналитика.Маршрут;
	КонецЕсли;
	Если ДопАналитика <> Неопределено И ДопАналитика.Свойство("ВидПеревозки") Тогда
		ВыбВидПеревозки = ДопАналитика.ВидПеревозки;
	КонецЕсли;
	Если ДопАналитика <> Неопределено И ДопАналитика.Свойство("СтроительнаяРабота") Тогда
		ВыбСтроительнаяРабота = ДопАналитика.СтроительнаяРабота;
	КонецЕсли;
	Если ДопАналитика <> Неопределено И ДопАналитика.Свойство("СценарийПланирования") Тогда
		ВыбСценарийПланированияПроектовСтроительства = ДопАналитика.СценарийПланирования;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Сотрудник, ПараметрВыработки", ВыбСотрудник, ПараметрВыработки);
	Если ЗначениеЗаполнено(ВыбПодразделение) Тогда
		СтруктураОтбора.Вставить("Подразделение", ВыбПодразделение);
	Иначе
		СтруктураОтбора.Вставить("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыбКонтрагент) Тогда
		СтруктураОтбора.Вставить("Контрагент", ВыбКонтрагент);
	Иначе
		СтруктураОтбора.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыбОбъектСтроительства) Тогда
		СтруктураОтбора.Вставить("ОбъектСтроительства", ВыбОбъектСтроительства);
	Иначе
		СтруктураОтбора.Вставить("ОбъектСтроительства", Справочники.СМ_ОбъектыСтроительства.ПустаяСсылка());
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыбМаршрут) Тогда
		СтруктураОтбора.Вставить("Маршрут", ВыбМаршрут);
	Иначе
		СтруктураОтбора.Вставить("Маршрут", Справочники.уатМаршруты.ПустаяСсылка());
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыбВидПеревозки) Тогда
		СтруктураОтбора.Вставить("ВидПеревозки", ВыбВидПеревозки);
	Иначе
		СтруктураОтбора.Вставить("ВидПеревозки", Справочники.уатВидыПеревозок.ПустаяСсылка());
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыбСтроительнаяРабота) Тогда
		СтруктураОтбора.Вставить("СтроительнаяРабота", ВыбСтроительнаяРабота);
	Иначе
		СтруктураОтбора.Вставить("СтроительнаяРабота", Справочники.УСОERP_СтроительныеРаботы.ПустаяСсылка());
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыбСценарийПланированияПроектовСтроительства) Тогда
		СтруктураОтбора.Вставить("СценарийПланирования", ВыбСценарийПланированияПроектовСтроительства);
	Иначе
		СтруктураОтбора.Вставить("СценарийПланирования", Справочники.УСОERP_СценарииПланированияПроектовСтроительства.ПустаяСсылка());
	КонецЕсли;
	
	мМассивСтрок = ВыработкаСотрудников.НайтиСтроки(СтруктураОтбора);
	Если мМассивСтрок.Количество() = 0 Тогда
		ТекСтрокаВыработки = ВыработкаСотрудников.Добавить();
		ТекСтрокаВыработки.Сотрудник = ВыбСотрудник;
		ТекСтрокаВыработки.ПараметрВыработки = ПараметрВыработки;
		ТекСтрокаВыработки.Подразделение = ВыбПодразделение;
		ТекСтрокаВыработки.Контрагент = ВыбКонтрагент;
		ТекСтрокаВыработки.ОбъектСтроительства = ВыбОбъектСтроительства;
		ТекСтрокаВыработки.Маршрут = ВыбМаршрут;
		ТекСтрокаВыработки.ВидПеревозки = ВыбВидПеревозки;
		ТекСтрокаВыработки.СтроительнаяРабота = ВыбСтроительнаяРабота;
		ТекСтрокаВыработки.СценарийПланирования = ВыбСценарийПланированияПроектовСтроительства;
	Иначе
		ТекСтрокаВыработки = мМассивСтрок[0];
	КонецЕсли;
	Если флЗамещать Тогда
		//очистим все строки с указанным сотрудником и парам. выработки, кроме найденной строки
		Если флУдалитьСтрокиБезДопАналитик Тогда
			СтруктураОтбора = Новый Структура("Сотрудник, ПараметрВыработки", ВыбСотрудник, ПараметрВыработки);
			мМассивСтрок = ВыработкаСотрудников.НайтиСтроки(СтруктураОтбора);
			Для Каждого ТекСтрока Из мМассивСтрок Цикл
				Если ТекСтрока <> ТекСтрокаВыработки Тогда
					ВыработкаСотрудников.Удалить(ТекСтрока);
				КонецЕсли;
			КонецЦикла;
			//чистим заодно и доп. аналитики
			ТекСтрокаВыработки.Подразделение = Неопределено;
			ТекСтрокаВыработки.Контрагент = Неопределено;
			ТекСтрокаВыработки.ОбъектСтроительства = Неопределено;
			ТекСтрокаВыработки.Маршрут = Неопределено;
			ТекСтрокаВыработки.ВидПеревозки = Неопределено;
			ТекСтрокаВыработки.СтроительнаяРабота = Неопределено;
			ТекСтрокаВыработки.СценарийПланирования = Неопределено;
		КонецЕсли;
		ТекСтрокаВыработки.Количество = КоличествоВыработки;
	Иначе //приплюсуем к тому что есть уже
		ТекСтрокаВыработки.Количество = ТекСтрокаВыработки.Количество + КоличествоВыработки;
	КонецЕсли;
	
	Если ТекСтрокаВыработки.Количество = 0 Тогда
		ВыработкаСотрудников.Удалить(ТекСтрокаВыработки);
		Иначе
		мПараметрВыработки = уатОбщегоНазначения.уатПараметрыВыработкиВодителей();
		мМассивПараметров = мПараметрВыработки.НайтиСтроки(Новый СТруктура("ПараметрВыработки", ТекСтрокаВыработки.ПараметрВыработки));
		Если мМассивПараметров.Количество() = 0 Тогда
			ВыработкаСотрудников.Удалить(ТекСтрокаВыработки);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ЗаписатьСтрокуВыработкиСотрудника()

// РАСЧЕТ РАСХОДА ГСМ

Процедура ОбновитьДанныеПоРасходуГСМпоGPS()
	
	Если Не ЗначениеЗаполнено(ДатаВыезда) Или Не ЗначениеЗаполнено(ДатаВозвращения) Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаРасхода Из РасходГСМ Цикл 
		Если ЗначениеЗаполнено(СтрокаРасхода.ТС) Тогда
			Отказ = Ложь;
			Если Константы.уатИспользоватьDynafleet.Получить() И СтрокаРасхода.ТС.уатИспользуемаяСистемаGPS = Перечисления.уатСистемаGPS.Dynafleet Тогда
				Запрос = Новый Запрос();
				Запрос.Текст = "ВЫБРАТЬ
				|	уатМестоположениеПоGPSСрезПоследних.ПотребленноеТопливо
				|ИЗ
				|	РегистрСведений.уатМестоположениеПоGPS.СрезПоследних(&ДатаКон, ТС = &ТС) КАК уатМестоположениеПоGPSСрезПоследних";
				
				Запрос.УстановитьПараметр("ДатаКон", ДатаВыезда);
				Запрос.УстановитьПараметр("ТС",      СтрокаРасхода.ТС);
				
				флПустой1 = Запрос.Выполнить().Пустой();
				Если Не флПустой1 Тогда
					КоличествоТопливаПриВыезде = Запрос.Выполнить().Выгрузить()[0].ПотребленноеТопливо;
				КонецЕсли;
				
				Запрос = Новый Запрос();
				Запрос.Текст = "ВЫБРАТЬ
				|	уатМестоположениеПоGPSСрезПоследних.ПотребленноеТопливо
				|ИЗ
				|	РегистрСведений.уатМестоположениеПоGPS.СрезПоследних(&ДатаКон, ТС = &ТС) КАК уатМестоположениеПоGPSСрезПоследних";
				
				Запрос.УстановитьПараметр("ДатаКон", ДатаВозвращения);
				Запрос.УстановитьПараметр("ТС",      СтрокаРасхода.ТС);
				
				флПустой2 = Запрос.Выполнить().Пустой();
				Если Не флПустой2 Тогда
					КоличествоТопливаПриВозвращении = Запрос.Выполнить().Выгрузить()[0].ПотребленноеТопливо;
				КонецЕсли;
				
				Если Не флПустой1 И Не флПустой2 Тогда
					СтрокаРасхода.РасходПоGPS = КоличествоТопливаПриВозвращении - КоличествоТопливаПриВыезде;
				КонецЕсли;
				
			ИначеЕсли Константы.уатИспользоватьOmnicomm.Получить() И СтрокаРасхода.ТС.уатИспользуемаяСистемаGPS = Перечисления.уатСистемаGPS.Omnicomm Тогда
				ТекстОшибки = "";
				
				табТС = Новый ТаблицаЗначений();
				табТС.Колонки.Добавить("ТС");
				табТС.Колонки.Добавить("ИдВСистемеНавигации");
				НоваяСтрока = табТС.Добавить();
				НоваяСтрока.ТС = СтрокаРасхода.ТС;
				НоваяСтрока.ИдВСистемеНавигации = СтрокаРасхода.ТС.уатИДвСистемеНавигации;
				
				СтруктураОбъектовНастроек = Новый Структура;
				СтруктураОбъектовНастроек.Вставить("Подразделение", СтрокаРасхода.ТС.уатПодразделение);
				
				КорректировкаОмником = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.КорректировкаВремениДляЗагрузкиOmnicomm);
				
				СтруктураДопПараметров = Новый Структура();
				СтруктураДопПараметров.Вставить("КорректировкаВремени", КорректировкаОмником);
				
				ТабСобытий = уатЗащищенныеФункцииСервер_проф.ПолучитьДанныеПоТСOmnicomm(ДатаВыезда, ДатаВозвращения, табТС, ТекстОшибки, СтруктураДопПараметров);
				Если Не ТабСобытий = 1 Тогда 
					СтрокаРасхода.РасходПоGPS = ТабСобытий.Итог("fuelRate");
				КонецЕсли;
				
			ИначеЕсли Константы.уатИспользоватьАвтотрекер.Получить() И СтрокаРасхода.ТС.уатИспользуемаяСистемаGPS = Перечисления.уатСистемаGPS.Автотрекер Тогда
				ТекстОшибки = "";
				
				СтруктураДанныхТСGPSАвтотрекер = уатЗащищенныеФункцииСервер_проф.ПолучитьРасходТопливаПоТСАвтотрекерЧерезВебСервис(ДатаВыезда, 
				                                                                                              ДатаВозвращения, 
				                                                                                              СтрокаРасхода.ТС,
				                                                                                              ТекстОшибки);
				
				Если ТипЗнч(СтруктураДанныхТСGPSАвтотрекер) = Тип("Структура") Тогда 
					СтрокаРасхода.РасходПоGPS = СтруктураДанныхТСGPSАвтотрекер.РасходТоплива;
				КонецЕсли;
				
			ИначеЕсли Константы.уатИспользоватьСКАУТ.Получить() И СтрокаРасхода.ТС.уатИспользуемаяСистемаGPS = Перечисления.уатСистемаGPS.СКАУТ Тогда
				ТекстОшибки = "";
				
				СтруктураДанныхТСGPSСКАУТ = уатЗащищенныеФункцииСервер_проф.ПолучитьРасходТопливаПоТССКАУТЧерезВебСервис(ДатаВыезда, 
				                                                                                              ДатаВозвращения, 
				                                                                                              СтрокаРасхода.ТС,
				                                                                                              ТекстОшибки);
				
				Если ТипЗнч(СтруктураДанныхТСGPSСКАУТ) = Тип("Структура") Тогда 
					СтрокаРасхода.РасходПоGPS = СтруктураДанныхТСGPSСКАУТ.РасходТоплива;
				КонецЕсли;
				
			ИначеЕсли Константы.уатИспользоватьWialon.Получить() И СтрокаРасхода.ТС.уатИспользуемаяСистемаGPS = Перечисления.уатСистемаGPS.Wialon Тогда
				ТекстОшибки = "";
				
				СтруктураДанныхТСGPSWialon = уатЗащищенныеФункцииСервер_проф.ПолучитьРасходТопливаДляПЛПоТСWialon(ДатаВыезда, 
				                                                                                              ДатаВозвращения, 
				                                                                                              СтрокаРасхода.ТС,
				                                                                                              ТекстОшибки);
				
				Если ТипЗнч(СтруктураДанныхТСGPSWialon) = Тип("Структура") Тогда 
					СтрокаРасхода.РасходПоGPS = СтруктураДанныхТСGPSWialon.РасходТоплива;
				КонецЕсли;
				
			ИначеЕсли Константы.уатИспользоватьАвтоГРАФ.Получить() И СтрокаРасхода.ТС.уатИспользуемаяСистемаGPS = Перечисления.уатСистемаGPS.АвтоГРАФ Тогда
				ТекстОшибки = "";
				
				СтруктураДанныхТСGPSАвтоГРАФ = уатЗащищенныеФункцииСервер_проф.ПолучитьРасходТопливаДляПЛПоТСАвтоГРАФ(ДатаВыезда, 
				                                                                                              ДатаВозвращения, 
				                                                                                              СтрокаРасхода.ТС,
				                                                                                              ТекстОшибки);
				
				Если ТипЗнч(СтруктураДанныхТСGPSАвтоГРАФ) = Тип("Структура") Тогда 
					СтрокаРасхода.РасходПоGPS = СтруктураДанныхТСGPSАвтоГРАФ.РасходТоплива;
				КонецЕсли;
			// ITOB +++
			ИначеЕсли Константы.уатИспользоватьЦСМ.Получить() И СтрокаРасхода.ТС.уатИспользуемаяСистемаGPS = Перечисления.уатСистемаGPS._1СЦСМ Тогда
				ТекстОшибки = "";
				ОбъектСтруктура = Новый Структура;
				ОбъектСтруктура.Вставить("Организация",          Организация);
				ОбъектСтруктура.Вставить("ТранспортноеСредство", СтрокаРасхода.ТС);
				ОбъектСтруктура.Вставить("ДатаВыезда",           ДатаВыезда);
				ОбъектСтруктура.Вставить("ДатаВозвращения",      ДатаВозвращения);
				ДанныеПоТопливу = ItobЗаполнениеПутевыхЛистовВызовСервера.ПолучитьДанныеПоТС(ОбъектСтруктура, ТекстОшибки);
				
				Если ДанныеПоТопливу = Ложь ИЛИ НЕ ТипЗнч(ДанныеПоТопливу) = Тип("Структура") ИЛИ НЕ ПустаяСтрока(ТекстОшибки) Тогда
					Продолжить;
				КонецЕсли;
				
				ФактРасходТоплива = ДанныеПоТопливу.РасходТоплива;
				Если Не ФактРасходТоплива = Неопределено Тогда
					СтрокаРасхода.РасходПоGPS = ФактРасходТоплива;
				КонецЕсли;
			// ITOB ---
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// РАСЧЕТ РАСХОДА ГСМ

//Процедура рассчитывает расход ГСМ
Процедура РасчетРасходаГСМ(Заголовок, Отказ) Экспорт 
	//очищаем строки с ненайденными ТС и оборудованием
	мсвТС = Новый Массив;
	Если ЗначениеЗаполнено(ТранспортноеСредство) Тогда
		мсвТС.Добавить(ТранспортноеСредство);
	КонецЕсли;
	Для Каждого ТекПрицеп Из Прицепы Цикл
		Если ЗначениеЗаполнено(ТекПрицеп.ТС) Тогда
			мсвТС.Добавить(ТекПрицеп.ТС);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекСтрокаЗадание Из Задание Цикл
		Если ЗначениеЗаполнено(ТекСтрокаЗадание.Прицеп1) Тогда
			мсвТС.Добавить(ТекСтрокаЗадание.Прицеп1);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрокаЗадание.Прицеп2) Тогда
			мсвТС.Добавить(ТекСтрокаЗадание.Прицеп2);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСтрокаРасходГСМ Из РасходГСМ Цикл
		Если мсвТС.Найти(ТекСтрокаРасходГСМ.ТС) = Неопределено Тогда
			РасходГСМ.Удалить(ТекСтрокаРасходГСМ);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураОбъектовНастроек = Новый Структура;
	СтруктураОбъектовНастроек.Вставить("Организация", Организация);
	Если ЗначениеЗаполнено(Подразделение) Тогда 
		СтруктураОбъектовНастроек.Вставить("Подразделение", Подразделение);
	Иначе
		СтруктураОбъектовНастроек.Вставить("Подразделение", ТранспортноеСредство.уатПодразделение);
	КонецЕсли;
	
	ПраваОрганизации = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек);
	
	АвтообновлениеПЛпоGPS = уатПраваИНастройки.уатПраво("АвтообновлениеПЛпоGPS", ПраваОрганизации);
	
	Если АвтообновлениеПЛпоGPS Тогда 
		ОбновитьДанныеПоРасходуГСМпоGPS();
	КонецЕсли;
	
	Если НеПересчитыватьРасходГСМ Тогда
		Сообщить("Расчет расхода ГСМ по путевому листу №" + Номер + " не выполнен:");
		Сообщить("Установлен флажок ""Не пересчитывать расход ГСМ""", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	СтруктураПолей = Новый Структура("ТС, ГСМ");
	уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РасходГСМ", СтруктураПолей, Отказ, Заголовок);
	Если Отказ Тогда Возврат КонецЕсли;
	
	ФлагТопливоАктивно = Ложь;
	Для Каждого ТекСтрока Из РасходГСМ Цикл
		Если ТекСтрока.ТС = ТранспортноеСредство И ТекСтрока.Активен Тогда
			ФлагТопливоАктивно = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ФлагТопливоАктивно Тогда
		ТекстСообщения = "В таблице ""Движение ГСМ"" для автомобиля не указано активное топливо для расчета!";
		Сообщить(ТекстСообщения, СтатусСообщения.Важное);
	КонецЕсли;
	
	ПредупреждатьПриПревышенииУровняТопливаВБаке = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ПредупреждатьПриПревышенииУровняТопливаВБаке);
	Для Каждого ТекСтрока Из РасходГСМ Цикл
		Если уатГСМ.ЭтоТехническаяЖидкость(ТекСтрока.ГСМ) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекСтрока.Активен Тогда
			ТекСтрока.РасходПоНорме = уатЗащищенныеФункцииСервер.РасчитатьРасходГСМПоНорме(ЭтотОбъект, ТекСтрока.ТС, ТекСтрока.ГСМ, Организация,Отказ,,Ложь);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			Если РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоНорме Тогда
				ТекСтрока.РасходПоФакту = ТекСтрока.РасходПоНорме;
				ТекСтрока.ОстатокПриВозвращении = окр(ТекСтрока.ОстатокПриВыезде - ТекСтрока.РасходПоФакту + ТекСтрока.Выдано - ТекСтрока.Сдано,
					уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
					ПланыВидовХарактеристик.уатПраваИНастройки.ТочностьОстатковТоплива));
					
				ОбъемБака = ТекСтрока.ТС.уатМодель.ОбъемБака;
				Если ПредупреждатьПриПревышенииУровняТопливаВБаке И ЗначениеЗаполнено(ОбъемБака) Тогда
					Если ТекСтрока.ОстатокПриВозвращении > ОбъемБака Тогда
						Сообщить("Превышение уровня топлива в баке ТС """ + ТекСтрока.ТС + """", СтатусСообщения.Внимание);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоGPS Тогда
				ТекСтрока.РасходПоФакту = ТекСтрока.РасходПоGPS;
				ТекСтрока.ОстатокПриВозвращении = Окр(ТекСтрока.ОстатокПриВыезде - ТекСтрока.РасходПоФакту + ТекСтрока.Выдано - ТекСтрока.Сдано,
					уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
					ПланыВидовХарактеристик.уатПраваИНастройки.ТочностьОстатковТоплива));
				ОбъемБака = ТекСтрока.ТС.уатМодель.ОбъемБака;
				Если ПредупреждатьПриПревышенииУровняТопливаВБаке И ЗначениеЗаполнено(ОбъемБака) Тогда
					Если ТекСтрока.ОстатокПриВозвращении > ОбъемБака Тогда
						Сообщить("Превышение уровня топлива в баке ТС """ + ТекСтрока.ТС + """", СтатусСообщения.Внимание);
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				ТекСтрока.РасходПоФакту = Окр(ТекСтрока.ОстатокПриВыезде - ТекСтрока.ОстатокПриВозвращении + ТекСтрока.Выдано - ТекСтрока.Сдано,
					уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
					ПланыВидовХарактеристик.уатПраваИНастройки.ТочностьОстатковТоплива));
			КонецЕсли;
		Иначе
			ТекСтрока.РасходПоНорме = 0;
			Если РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоНорме Тогда
				ТекСтрока.РасходПоФакту = 0;
			ИначеЕсли РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоGPS Тогда
				ТекСтрока.РасходПоФакту = 0;
			Иначе
				ТекСтрока.РасходПоФакту = Окр(ТекСтрока.ОстатокПриВыезде - ТекСтрока.ОстатокПриВозвращении + ТекСтрока.Выдано - ТекСтрока.Сдано,
					уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
					ПланыВидовХарактеристик.уатПраваИНастройки.ТочностьОстатковТоплива));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры //РасчетРасходаГСМ()

// Процедура рассчитывает расход технических жидкостей
Процедура РасчетРасходаТЖ() Экспорт
	//обнулим расход ТЖ
	Для Каждого ТекСтрокаРасходГСМ Из РасходГСМ Цикл
		Если уатГСМ.ЭтоТехническаяЖидкость(ТекСтрокаРасходГСМ.ГСМ) Тогда
			ТекСтрокаРасходГСМ.РасходПоНорме = 0;
			ТекСтрокаРасходГСМ.РасходПоФакту = 0;
			ТекСтрокаРасходГСМ.Активен = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ИспользоватьУчетНормативногоРасходаТехЖидкостей) = ЛОЖЬ Тогда
		Возврат;
	КонецЕсли;
	
	//получим нормы расхода тех. жидкостей
	мсвТС = Новый Массив;
	мсвТС.Добавить(ТранспортноеСредство);
	Для Каждого ТекСтрока Из Прицепы Цикл
		мсвТС.Добавить(ТекСтрока.ТС);
	КонецЦикла;
	Для Каждого ТекСтрока Из Задание Цикл
		мсвТС.Добавить(ТекСтрока.Прицеп1);
		мсвТС.Добавить(ТекСтрока.Прицеп2);
	КонецЦикла;
	тблНормыРасходаТЖ = уатОбщегоНазначения_проф.ПолучитьНормыРасходаТЖ(мсвТС, ДатаВозвращения);
	
	//свернем все прицепы в одну табличку
	тблПрицепы = Новый ТаблицаЗначений;
	тблПрицепы.Колонки.Добавить("ТС");
	тблПрицепы.Колонки.Добавить("Моточасы");
	Для Каждого ТекПрицеп Из Прицепы Цикл
		Если ЗначениеЗаполнено(ТекПрицеп.ТС) Тогда
			СтрокаПрицепа = тблПрицепы.Найти(ТекПрицеп.ТС, "ТС");
			Если СтрокаПрицепа = Неопределено Тогда
				СтрокаПрицепа = тблПрицепы.Добавить();
				СтрокаПрицепа.ТС = ТекПрицеп.ТС;
				СтрокаПрицепа.Моточасы = 0;
			КонецЕсли;
			СтрокаПрицепа.Моточасы = СтрокаПрицепа.Моточасы + уатОбщегоНазначения.уатРазностьПоказанийСчетчика(
				ТекПрицеп.СчетчикМЧВыезда, ТекПрицеп.СчетчикМЧВозвращения);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекЗадание Из Задание Цикл
		Если ЗначениеЗаполнено(ТекЗадание.Прицеп1) Тогда
			СтрокаПрицепа = тблПрицепы.Найти(ТекЗадание.Прицеп1, "ТС");
			Если СтрокаПрицепа = Неопределено Тогда
				СтрокаПрицепа = тблПрицепы.Добавить();
				СтрокаПрицепа.ТС = ТекЗадание.Прицеп1;
				СтрокаПрицепа.Моточасы = 0;
			КонецЕсли;
			СтрокаПрицепа.Моточасы = СтрокаПрицепа.Моточасы + ТекЗадание.КоличествоЧасовПрицеп1;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекЗадание.Прицеп2) Тогда
			СтрокаПрицепа = тблПрицепы.Найти(ТекЗадание.Прицеп2, "ТС");
			Если СтрокаПрицепа = Неопределено Тогда
				СтрокаПрицепа = тблПрицепы.Добавить();
				СтрокаПрицепа.ТС = ТекЗадание.Прицеп2;
				СтрокаПрицепа.Моточасы = 0;
			КонецЕсли;
			СтрокаПрицепа.Моточасы = СтрокаПрицепа.Моточасы + ТекЗадание.КоличествоЧасовПрицеп2;
		КонецЕсли;
	КонецЦикла;
	
	//перебираем все строки расхода ГСМ с топливом 
	Для Каждого ТекСтрокаРасходГСМ Из РасходГСМ Цикл
		Если уатГСМ.ЭтоТехническаяЖидкость(ТекСтрокаРасходГСМ.ГСМ) Тогда
			Продолжить;
		КонецЕсли;
		
		Если (НЕ ТекСтрокаРасходГСМ.Активен) ИЛИ
			ТекСтрокаРасходГСМ.РасходПоФакту = 0 ИЛИ
			ТекСтрокаРасходГСМ.ГСМ <> ТекСтрокаРасходГСМ.ТС.уатМодель.ОсновноеТопливо Тогда
			Продолжить;
		КонецЕсли;
		
		флНаличиеСпидометра = ТекСтрокаРасходГСМ.ТС.уатМодель.НаличиеСпидометра;
		
		мНайденныеСтроки = тблНормыРасходаТЖ.НайтиСтроки(Новый Структура("МодельТС", ТекСтрокаРасходГСМ.ТС));
		мНайденныеСтрокиМодель = тблНормыРасходаТЖ.НайтиСтроки(Новый Структура("МодельТС", ТекСтрокаРасходГСМ.ТС.уатМодель));
		Для Каждого ТекСтрокаМодель Из мНайденныеСтрокиМодель Цикл
			мНайденныеСтроки.Добавить(ТекСтрокаМодель);
		КонецЦикла;
		
		//пробегаемся по списку ТЖ для текущего ТС и ГСМ
		Для Каждого ТекСтрокаТЖ Из мНайденныеСтроки Цикл
			//ищем строку расхода ГСМ с ТЖ по соответствию ТС (из тек. строки расхода ГСМ) и ТЖ (из норм расхода ТЖ)
			СтрокиПоискаТЖ = РасходГСМ.НайтиСтроки(Новый Структура("ТС, ГСМ", ТекСтрокаРасходГСМ.ТС, ТекСтрокаТЖ.ГСМ));
			Если СтрокиПоискаТЖ.Количество() > 0 Тогда
				Если ТекСтрокаТЖ.НормаНаОснТопливо Тогда
					СтрокиПоискаТЖ[0].РасходПоНорме = ТекСтрокаРасходГСМ.РасходПоФакту * ТекСтрокаТЖ.Норма / 100;
				Иначе
					Если РаботаНаДвухВидахТоплива Тогда
						ТекПробег = ТекСтрокаРасходГСМ.Пробег;
					Иначе
						Если ТранспортноеСредство.уатМодель.НаличиеСпидометра Тогда
							ТекПробег = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(СпидометрВыезда, СпидометрВозвращения);
						Иначе
							ТекПробег = 0;
						КонецЕсли;
					КонецЕсли;
					СтрокиПоискаТЖ[0].РасходПоНорме = ТекПробег * ТекСтрокаТЖ.ЛинейнаяНорма / 100;
				КонецЕсли;
								
				Если (НЕ флНаличиеСпидометра) И (ТекСтрокаТЖ.НормаНаМоточас > 0) Тогда //счетчик моточасов
					мМоточасы = 0;
					Если ТекСтрокаРасходГСМ.ТС = ТранспортноеСредство Тогда //ТС в шапке
						мМоточасы = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(СпидометрВыезда, СпидометрВозвращения);
					Иначе //прицеп или оборудование
						ТекСтрокаПрицепа = тблПрицепы.Найти(ТекСтрокаРасходГСМ.ТС, "ТС");
						Если ТекСтрокаПрицепа <> Неопределено Тогда
							мМоточасы = ТекСтрокаПрицепа.Моточасы;
						КонецЕсли;	
					КонецЕсли;
					СтрокиПоискаТЖ[0].РасходПоНорме = СтрокиПоискаТЖ[0].РасходПоНорме + мМоточасы * ТекСтрокаТЖ.НормаНаМоточас;
				КонецЕсли;
				СтрокиПоискаТЖ[0].РасходПоФакту = СтрокиПоискаТЖ[0].РасходПоНорме;
				//СтрокиПоискаТЖ[0].ОстатокПриВыезде = уатОбщегоНазначения_проф.ОстатокТЖнаТС(ТекСтрокаТЖ.ТС, ТекСтрокаТЖ.ГСМ, ДатаВыезда);
				
				
				Если уатГСМ.УчитыватьОстаткиТЖ(СтрокиПоискаТЖ[0].ГСМ) Тогда
					СтрокиПоискаТЖ[0].ОстатокПриВозвращении = СтрокиПоискаТЖ[0].ОстатокПриВыезде - СтрокиПоискаТЖ[0].РасходПоФакту + СтрокиПоискаТЖ[0].Выдано - СтрокиПоискаТЖ[0].Сдано;
				КонецЕсли;
				
				Если СтрокиПоискаТЖ[0].РасходПоФакту > 0 Тогда
					СтрокиПоискаТЖ[0].Активен = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ПересчетВыданногоГСМ();
	ПересчетСданногоГСМ();
	
КонецПроцедуры


// РАСЧЕТ З/П СОТРУДНИКОВ

// Процедура рассчитывает начисление з/п по пут. листу
//Вызывается из документа при выборе действия расчета.
//
Процедура РасчетЗП(Отказ, вхСотрудникИндекс = Неопределено) Экспорт
	Перем мТаблицаТТД;
	
	Если НЕ ЗначениеЗаполнено(ТранспортноеСредство.уатМодель) Тогда
		Сообщить("Для ТС не указана модель!", СтатусСообщения.Важное);
		Отказ = Истина;
	КонецЕсли;
	
	Если РежимРасчетаВыработки = Перечисления.уатРежимыРасчетаВыработкиПЛ.ПоТТД И (НЕ ПроверкаТТД(мТаблицаТТД, , "зарплаты")) Тогда
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначения_проф.уатПроверкаКорректностиПЛ(Организация, ЭтотОбъект, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	Если вхСотрудникИндекс = Неопределено Тогда
		Если НачислятьЗПВодителю1 Тогда
			РасчетЗП(Отказ, 1);
		КонецЕсли;	
		
		Если НачислятьЗПВодителю2 Тогда
			РасчетЗП(Отказ, 2);
		КонецЕсли;	
		
		Если НачислятьЗПСотруднику1 Тогда
			РасчетЗП(Отказ, 3);
		КонецЕсли;	
		
		Если НачислятьЗПСотруднику2 Тогда
			РасчетЗП(Отказ, 4);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если вхСотрудникИндекс = 1 Тогда
		вхСотрудник = Водитель1;
	ИначеЕсли вхСотрудникИндекс = 2 Тогда
		вхСотрудник = Водитель2;
	ИначеЕсли вхСотрудникИндекс = 3 Тогда
		вхСотрудник = Сотрудник1;
	ИначеЕсли вхСотрудникИндекс = 4 Тогда
		вхСотрудник = Сотрудник2;
	ИначеЕсли ТипЗнч(вхСотрудникИндекс) <> Тип("Число") Тогда
		вхСотрудник = вхСотрудникИндекс;
	Иначе
		Возврат;
	КонецЕсли;
	
	//не удаляем вручную введенные начисления
	мЗП = Зарплата.НайтиСтроки(Новый Структура("Сотрудник, РучнойВвод", вхСотрудник, Ложь));
	Для мСч = 0 По мЗП.Количество() - 1 Цикл
		Зарплата.Удалить(мЗП[мСч]);
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(вхСотрудник) Тогда
		Возврат;
	КонецЕсли;
	
	тблЗарплатаВрем = Зарплата.Выгрузить();
	тблЗарплатаВрем.Колонки.Добавить("ВесФильтров");
	тблЗарплатаВрем.Колонки.Добавить("ПараметрВыработкиДоп");
	тблЗарплатаВрем.Колонки.Добавить("НомерСтрокиДляПострочныхТарифов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1,0,ДопустимыйЗнак.Неотрицательный)));
	тблЗарплатаВрем.Очистить();
	
	мТарифы = уатОбщегоНазначения.уатНайтиТарифыЗП(вхСотрудник, ДатаЗакрытия);
	Если мТарифы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//1. Проценты от выручки
	//выручка по ТТД
	мТарифыПроцентОтВыручки = мТарифы.НайтиСтроки(Новый Структура("СпособРасчетаОплатыТруда", Перечисления.уатСпособыРасчетаОплатыТруда.ПроцентомОтВыручки));
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	уатТТДСтоимость.Ссылка КАК ТТД,

	|	уатТТДСтоимость.Сумма КАК Сумма,
	|	уатТТДСтоимость.Ссылка.ВалютаДокумента КАК Валюта,
	|	уатТТДСтоимость.Маршрут КАК Маршрут,
	|	уатТТДСтоимость.ПараметрВыработки
	|ИЗ
	|	Документ.уатТТД.Стоимость КАК уатТТДСтоимость
	|ГДЕ
	|	уатТТДСтоимость.ПутЛист = &ПутЛист
	|	И уатТТДСтоимость.Ссылка.Проведен";
	Запрос.УстановитьПараметр("ПутЛист", Ссылка);
	ВыборкаЗапросаТТД = Запрос.Выполнить().Выгрузить();	
	ВыборкаЗапросаТТД.Свернуть("ТТД, Маршрут, Валюта, ПараметрВыработки", "Сумма");
	//выручка по Билетным листам
	ВыборкаЗапросаБилетныйЛист = Новый ТаблицаЗначений;
	Если уатОбщегоНазначенияТиповые.уатЕстьДокумент("уатБилетныйЛист") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	уатБилетныйЛистБилеты.Ссылка,
		|	уатБилетныйЛистБилеты.Сумма КАК Сумма,
		|	уатБилетныйЛистБилеты.Маршрут КАК Маршрут
		|ИЗ
		|	Документ.уатБилетныйЛист.Билеты КАК уатБилетныйЛистБилеты
		|ГДЕ
		|	уатБилетныйЛистБилеты.ПутевойЛист = &ПутЛист
		|	И уатБилетныйЛистБилеты.Ссылка.Проведен
		|	И уатБилетныйЛистБилеты.Ссылка.Сотрудник = &Сотрудник";
		
		Запрос.УстановитьПараметр("Сотрудник", вхСотрудник);
		Запрос.УстановитьПараметр("ПутЛист", Ссылка);
		ВыборкаЗапросаБилетныйЛист = Запрос.Выполнить().Выгрузить();	
	КонецЕсли;
	//выручка по Посадочным ведомостям
	ВыборкаЗапросаПосадочнаяВедомость = Новый ТаблицаЗначений;
	Если уатОбщегоНазначенияТиповые.уатЕстьДокумент("уатПосадочнаяВедомость") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	уатПосадочнаяВедомостьБилеты.Ссылка,
		|	уатПосадочнаяВедомостьБилеты.Сумма КАК Сумма,
		|	уатПосадочнаяВедомостьБилеты.Маршрут КАК Маршрут
		|ИЗ
		|	Документ.уатПосадочнаяВедомость.Билеты КАК уатПосадочнаяВедомостьБилеты
		|ГДЕ
		|	уатПосадочнаяВедомостьБилеты.ПутевойЛист = &ПутЛист
		|	И уатПосадочнаяВедомостьБилеты.Ссылка.Проведен
		|	И уатПосадочнаяВедомостьБилеты.Ссылка.Сотрудник = &Сотрудник";
		
		Запрос.УстановитьПараметр("Сотрудник", вхСотрудник);
		Запрос.УстановитьПараметр("ПутЛист", Ссылка);
		ВыборкаЗапросаПосадочнаяВедомость = Запрос.Выполнить().Выгрузить();	
	КонецЕсли;
	//выручка по документам Выручка водителей
	ВыборкаЗапросаВыручкаВодителей = Новый ТаблицаЗначений;
	Если уатОбщегоНазначенияТиповые.уатЕстьДокумент("уатВыручкаВодителей") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	уатВыручкаВодителей.Ссылка,
		|	уатВыручкаВодителей.Сумма КАК Сумма,
		|	уатВыручкаВодителей.Маршрут КАК Маршрут
		|ИЗ
		|	Документ.уатВыручкаВодителей КАК уатВыручкаВодителей
		|ГДЕ
		|	уатВыручкаВодителей.ПутевойЛист = &ПутЛист
		|	И уатВыручкаВодителей.Ссылка.Проведен
		|	И уатВыручкаВодителей.Ссылка.Сотрудник = &Сотрудник";
		
		Запрос.УстановитьПараметр("Сотрудник", вхСотрудник);
		Запрос.УстановитьПараметр("ПутЛист", Ссылка);
		ВыборкаЗапросаВыручкаВодителей = Запрос.Выполнить().Выгрузить();	
	КонецЕсли;
	
	ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	
	Для сч = 0 По мТарифыПроцентОтВыручки.Количество() - 1 Цикл
		//для ТТД
		Для Каждого ТекСтрокаТТД Из ВыборкаЗапросаТТД Цикл
			//проверка для контрагента
			ВесФильтровВрем = 0;
			СтруктураОбластьДействия = Новый Структура("ТС, Контрагент, Маршрут", ТранспортноеСредство, ТекСтрокаТТД.ТТД.Контрагент, ТекСтрокаТТД.Маршрут);
			ДобавитьВСтруктуруОбластиДействияПрицепы(СтруктураОбластьДействия);
			Если НЕ уатОбщегоНазначения.уатТарифЗПВОбластиДействия(мТарифыПроцентОтВыручки[сч].ТарифЗП, Организация, СтруктураОбластьДействия, ВесФильтровВрем) Тогда
				Продолжить;
			КонецЕсли;	
			
			НоваяСтрока 				= тблЗарплатаВрем.Добавить();
			НоваяСтрока.ВидНачисления 	= мТарифыПроцентОтВыручки[сч].ВидНачисления;
			НоваяСтрока.Сотрудник 		= вхСотрудник;
			НоваяСтрока.Сумма 			= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(Окр(ТекСтрокаТТД.Сумма
				* мТарифыПроцентОтВыручки[сч].ТарифЗП.Тариф / 100,2), ТекСтрокаТТД.Валюта, ВалютаУпр, ДатаЗакрытия, ДатаЗакрытия);
			НоваяСтрока.РучнойВвод 		= Ложь;
			НоваяСтрока.ВесФильтров		= ВесФильтровВрем;
			НоваяСтрока.ПараметрВыработки = ТекСтрокаТТД.ПараметрВыработки;
			НоваяСтрока.ПараметрВыработкиДоп = Строка(ТекСтрокаТТД.ПараметрВыработки);
		КонецЦикла;
		//для Билетных листов
		Для Каждого ТекСтрокаБилеты Из ВыборкаЗапросаБилетныйЛист Цикл
			//проверка для контрагента
			ВесФильтровВрем = 0;
			СтруктураОбластьДействия = Новый Структура("ТС, Маршрут", ТранспортноеСредство, ТекСтрокаБилеты.Маршрут);
			ДобавитьВСтруктуруОбластиДействияПрицепы(СтруктураОбластьДействия);
			Если Не уатОбщегоНазначения.уатТарифЗПВОбластиДействия(мТарифыПроцентОтВыручки[сч].ТарифЗП, Организация, СтруктураОбластьДействия, ВесФильтровВрем) Тогда
				Продолжить;
			КонецЕсли;	
			
			НоваяСтрока = тблЗарплатаВрем.Добавить();
			НоваяСтрока.ВидНачисления = мТарифыПроцентОтВыручки[сч].ВидНачисления;
			НоваяСтрока.Сотрудник     = вхСотрудник;
			НоваяСтрока.Сумма         = Окр(ТекСтрокаБилеты.Сумма * мТарифыПроцентОтВыручки[сч].ТарифЗП.Тариф / 100,2);
			НоваяСтрока.РучнойВвод    = Ложь;
			НоваяСтрока.ВесФильтров   = ВесФильтровВрем;
		КонецЦикла;
		//для Посадочных ведомостей
		Для Каждого ТекСтрокаБилеты Из ВыборкаЗапросаПосадочнаяВедомость Цикл
			//проверка для контрагента
			ВесФильтровВрем = 0;
			СтруктураОбластьДействия = Новый Структура("ТС, Маршрут", ТранспортноеСредство, ТекСтрокаБилеты.Маршрут);
			ДобавитьВСтруктуруОбластиДействияПрицепы(СтруктураОбластьДействия);
			Если Не уатОбщегоНазначения.уатТарифЗПВОбластиДействия(мТарифыПроцентОтВыручки[сч].ТарифЗП, Организация, СтруктураОбластьДействия, ВесФильтровВрем) Тогда
				Продолжить;
			КонецЕсли;	
			
			НоваяСтрока = тблЗарплатаВрем.Добавить();
			НоваяСтрока.ВидНачисления = мТарифыПроцентОтВыручки[сч].ВидНачисления;
			НоваяСтрока.Сотрудник     = вхСотрудник;
			НоваяСтрока.Сумма         = Окр(ТекСтрокаБилеты.Сумма * мТарифыПроцентОтВыручки[сч].ТарифЗП.Тариф / 100,2);
			НоваяСтрока.РучнойВвод    = Ложь;
			НоваяСтрока.ВесФильтров   = ВесФильтровВрем;
		КонецЦикла;
		//для Выручки водителей
		Для Каждого ТекСтрокаВыручка Из ВыборкаЗапросаВыручкаВодителей Цикл
			//проверка для контрагента
			ВесФильтровВрем = 0;
			СтруктураОбластьДействия = Новый Структура("ТС, Маршрут", ТранспортноеСредство, ТекСтрокаВыручка.Маршрут);
			ДобавитьВСтруктуруОбластиДействияПрицепы(СтруктураОбластьДействия);
			Если Не уатОбщегоНазначения.уатТарифЗПВОбластиДействия(мТарифыПроцентОтВыручки[сч].ТарифЗП, Организация, СтруктураОбластьДействия, ВесФильтровВрем) Тогда
				Продолжить;
			КонецЕсли;	
			
			НоваяСтрока = тблЗарплатаВрем.Добавить();
			НоваяСтрока.ВидНачисления = мТарифыПроцентОтВыручки[сч].ВидНачисления;
			НоваяСтрока.Сотрудник     = вхСотрудник;
			НоваяСтрока.Сумма         = Окр(ТекСтрокаВыручка.Сумма * мТарифыПроцентОтВыручки[сч].ТарифЗП.Тариф / 100,2);
			НоваяСтрока.РучнойВвод    = Ложь;
			НоваяСтрока.ВесФильтров   = ВесФильтровВрем;
		КонецЦикла;
	КонецЦикла;	
	
	УдалитьЛишниеТарифыЗП(тблЗарплатаВрем);
	
	//ищем выработку для некоторых параметров выработки
	мРасстояниеГруз   = 0;
	мВремяРаботы      = 0;
	мГрузоподъемность = уатОбщегоНазначения.уатГрузоподъемностьПоПЛ(ЭтотОбъект);
	мКлассГруза       = 0;
	
	мВыработка = ВыработкаСотрудников.НайтиСтроки(Новый Структура("Сотрудник, ПараметрВыработки", вхСотрудник, Справочники.уатПараметрыВыработки.ПробегСГрузом));
	Если мВыработка.Количество() > 0 Тогда	//найден прейскурант
		мРасстояниеГруз = мВыработка[0].Количество;
	КонецЕсли;
	
	мВыработка = ВыработкаСотрудников.НайтиСтроки(Новый Структура("Сотрудник, ПараметрВыработки", вхСотрудник, Справочники.уатПараметрыВыработки.ВремяВРаботе));
	Если мВыработка.Количество() > 0 Тогда	//найден прейскурант
		мВремяРаботы = мВыработка[0].Количество;
	КонецЕсли;
	
	//класс груза получаем как максимальный класс грузов, указанных в задании
	Для Каждого ТекСтрока Из Задание Цикл
		Если ТекСтрока.Выполнено Тогда
			мКлассГруза = Макс(мКлассГруза, уатОбщегоНазначения.уатКлассГруза(ТекСтрока.Номенклатура));
		КонецЕсли;
	КонецЦикла;
	
	//2. Сдельные тарифы от выработки
	мТарифыСдельные = мТарифы.НайтиСтроки(Новый Структура("СпособРасчетаОплатыТруда", Перечисления.уатСпособыРасчетаОплатыТруда.СдельныйЗаработок));
	Для Каждого ТекСтрокаТарифыСдельные Из мТарифыСдельные Цикл
		//простои посчитаем потом
		Если ТекСтрокаТарифыСдельные.ПараметрВыработки = Справочники.уатПараметрыВыработки.ВремяВПростое Тогда
			Продолжить;
		КонецЕсли;
		
		//расчет зарплаты по строкам задания/ТТД
		Если ТекСтрокаТарифыСдельные.ТарифЗП.РасчетПоСтрокам Тогда
			Если РежимРасчетаВыработки = Перечисления.уатРежимыРасчетаВыработкиПЛ.ПоЗаданию Тогда
				Для Каждого ТекСтрокаЗадания Из Задание Цикл
					Если НЕ ТекСтрокаЗадания.Выполнено Тогда
						Продолжить;
					КонецЕсли;
					
					//дополнительно отбираем тарифы по контрагенту и маршруту, действующие только для построчных тарифов
					ВесФильтровВрем = 0;
					СтруктураОбластьДействия = Новый Структура;
					СтруктураОбластьДействия.Вставить("ТС", ТранспортноеСредство);
					СтруктураОбластьДействия.Вставить("Контрагент", ТекСтрокаЗадания.Контрагент);
					СтруктураОбластьДействия.Вставить("Маршрут", ТекСтрокаЗадания.Маршрут);
					СтруктураОбластьДействия.Вставить("ОбъектСтроительства", ТекСтрокаЗадания.ОбъектСтроительства);
					СтруктураОбластьДействия.Вставить("Подразделение", ТекСтрокаЗадания.Подразделение);
					СтруктураОбластьДействия.Вставить("ВидПеревозки", ТекСтрокаЗадания.ВидПеревозки);
					СтруктураОбластьДействия.Вставить("ПунктОтправления", ТекСтрокаЗадания.АдресПрибытия);
					СтруктураОбластьДействия.Вставить("ПунктНазначения", ТекСтрокаЗадания.АдресУбытия);
					СтруктураОбластьДействия.Вставить("Номенклатура", ТекСтрокаЗадания.Номенклатура);
					
					ДобавитьВСтруктуруОбластиДействияПрицепы(СтруктураОбластьДействия);
					Если Не уатОбщегоНазначения.уатТарифЗПВОбластиДействия(ТекСтрокаТарифыСдельные.ТарифЗП, Организация, СтруктураОбластьДействия, ВесФильтровВрем) Тогда
						Продолжить;
					КонецЕсли;
					
					ТекСтрокаЗадания_КоличествоЕздок = ТекСтрокаЗадания.КоличествоЕздок;
					
					//время в работе
					Если ТекСтрокаТарифыСдельные.ПараметрВыработки = Справочники.уатПараметрыВыработки.ВремяВРаботе И ТекСтрокаЗадания.КоличествоЧасов > 0 Тогда
						мКоличество = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаЗадания.КоличествоЧасов)/3600;
						
						//вес груза
					ИначеЕсли ТекСтрокаТарифыСдельные.ПараметрВыработки = Справочники.уатПараметрыВыработки.ВесГруза И ТекСтрокаЗадания.КоличествоТонн > 0 Тогда
						мКоличество = ТекСтрокаЗадания.КоличествоТонн * ТекСтрокаЗадания_КоличествоЕздок;
						
						//объем
					ИначеЕсли ТекСтрокаТарифыСдельные.ПараметрВыработки = Справочники.уатПараметрыВыработки.Объем И ТекСтрокаЗадания.Объем > 0 Тогда
						мКоличество = ТекСтрокаЗадания.Объем * ТекСтрокаЗадания_КоличествоЕздок;						
						
						//количество ездок
					ИначеЕсли ТекСтрокаТарифыСдельные.ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоЕздок И ТекСтрокаЗадания.КоличествоЕздок > 0 Тогда
						мКоличество = ТекСтрокаЗадания.КоличествоЕздок;
						
						//количество операций
					ИначеЕсли ТекСтрокаТарифыСдельные.ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоОпераций И ТекСтрокаЗадания.КоличествоОпераций > 0 Тогда
						мКоличество = ТекСтрокаЗадания.КоличествоОпераций;
						
						//количество пассажиров
					ИначеЕсли ТекСтрокаТарифыСдельные.ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоПассажиров И ТекСтрокаЗадания.КоличествоПассажиров > 0 Тогда
						мКоличество = ТекСтрокаЗадания.КоличествоПассажиров;
						
						//подача
					ИначеЕсли ТекСтрокаТарифыСдельные.ПараметрВыработки = Справочники.уатПараметрыВыработки.Подача И ТекСтрокаЗадания.Подача > 0 Тогда
						мКоличество = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаЗадания.Подача)/3600;
						
						//пробег порожний
					ИначеЕсли ТекСтрокаТарифыСдельные.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегПорожний И ТекСтрокаЗадания.КоличествоКмПорожний > 0 Тогда
						мКоличество = ТекСтрокаЗадания.КоличествоКмПорожний * ТекСтрокаЗадания_КоличествоЕздок;
						
						//пробег с грузом
					ИначеЕсли ТекСтрокаТарифыСдельные.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегСГрузом И ТекСтрокаЗадания.КоличествоКмГруз > 0 Тогда
						мКоличество = ТекСтрокаЗадания.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок;
						
					// Спец. работы.
					ИначеЕсли ТекСтрокаТарифыСдельные.ПараметрВыработки = ТекСтрокаЗадания.СпецРабота1 И ТекСтрокаЗадания.КоличествоСпецРаботы1 > 0 Тогда
						мКоличество = ТекСтрокаЗадания.КоличествоСпецРаботы1 * ТекСтрокаЗадания_КоличествоЕздок;
					ИначеЕсли ТекСтрокаТарифыСдельные.ПараметрВыработки = ТекСтрокаЗадания.СпецРабота2 И ТекСтрокаЗадания.КоличествоСпецРаботы2 > 0 Тогда
						мКоличество = ТекСтрокаЗадания.КоличествоСпецРаботы2 * ТекСтрокаЗадания_КоличествоЕздок;
					ИначеЕсли ТекСтрокаТарифыСдельные.ПараметрВыработки = ТекСтрокаЗадания.СпецРабота3 И ТекСтрокаЗадания.КоличествоСпецРаботы3 > 0 Тогда
						мКоличество = ТекСтрокаЗадания.КоличествоСпецРаботы3 * ТекСтрокаЗадания_КоличествоЕздок;
					ИначеЕсли ТекСтрокаТарифыСдельные.ПараметрВыработки = ТекСтрокаЗадания.СпецРабота4 И ТекСтрокаЗадания.КоличествоСпецРаботы4 > 0 Тогда
						мКоличество = ТекСтрокаЗадания.КоличествоСпецРаботы4 * ТекСтрокаЗадания_КоличествоЕздок;
					ИначеЕсли ТекСтрокаТарифыСдельные.ПараметрВыработки = ТекСтрокаЗадания.СпецРабота5 И ТекСтрокаЗадания.КоличествоСпецРаботы5 > 0 Тогда
						мКоличество = ТекСтрокаЗадания.КоличествоСпецРаботы5 * ТекСтрокаЗадания_КоличествоЕздок;
						
						//тн*км
					ИначеЕсли ТекСтрокаТарифыСдельные.ПараметрВыработки = Справочники.уатПараметрыВыработки.ТнКм И ТекСтрокаЗадания.КоличествоТонн > 0 И ТекСтрокаЗадания.КоличествоКмГруз > 0 Тогда
						мКоличество = ТекСтрокаЗадания.КоличествоКмГруз * ТекСтрокаЗадания.КоличествоТонн * ТекСтрокаЗадания_КоличествоЕздок;
						
						//объем*км
					ИначеЕсли ТекСтрокаТарифыСдельные.ПараметрВыработки = Справочники.уатПараметрыВыработки.ОбъемКм И ТекСтрокаЗадания.Объем > 0 И ТекСтрокаЗадания.КоличествоКмГруз > 0 Тогда
						мКоличество = ТекСтрокаЗадания.КоличествоКмГруз * ТекСтрокаЗадания.Объем * ТекСтрокаЗадания_КоличествоЕздок;
						
					ИначеЕсли НЕ ТекСтрокаТарифыСдельные.ПараметрВыработки.Предопределенный
						И ТекСтрокаТарифыСдельные.ПараметрВыработки.СпособРасчетаПараметровВыработки = Перечисления.уатСпособРасчетаПараметровВыработки.ПоЗаданию
						И ТекСтрокаТарифыСдельные.ПараметрВыработки.ДействуетНаТС Тогда
						
						ЗначениеПараметра = ВычислитьПроизвольныйПараметрВыработки(ТекСтрокаТарифыСдельные.ПараметрВыработки, ТекСтрокаЗадания);
						Если ЗначениеПараметра = "ошибка" Тогда
							мКоличество = 0;
						Иначе
							мКоличество = ЗначениеПараметра;
						КонецЕсли;
							
					Иначе
						мКоличество = 0;
						
					КонецЕсли;
					
					мТариф = уатОбщегоНазначения.уатРасчетСдельногоТарифаЗП(ТекСтрокаТарифыСдельные.ТарифЗП,
					ТекСтрокаЗадания.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок,
					уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаЗадания.КоличествоЧасов)/3600,
					мГрузоподъемность,
					уатОбщегоНазначения.уатКлассГруза(ТекСтрокаЗадания.Номенклатура));
					
					НоваяСтрока = тблЗарплатаВрем.Добавить();
					НоваяСтрока.ВидНачисления        = ТекСтрокаТарифыСдельные.ВидНачисления;
					НоваяСтрока.Сотрудник            = вхСотрудник;
					НоваяСтрока.Сумма                = мКоличество * мТариф;
					НоваяСтрока.РучнойВвод           = Ложь;
					НоваяСтрока.ВесФильтров          = ВесФильтровВрем;
					НоваяСтрока.ПараметрВыработки    = ТекСтрокаТарифыСдельные.ПараметрВыработки;
					НоваяСтрока.ПараметрВыработкиДоп = Строка(ТекСтрокаТарифыСдельные.ПараметрВыработки);
					НоваяСтрока.НомерСтрокиДляПострочныхТарифов = ТекСтрокаЗадания.НомерСтроки;
				КонецЦикла;
				
			ИначеЕсли РежимРасчетаВыработки = Перечисления.уатРежимыРасчетаВыработкиПЛ.ПоТТД Тогда
				Для Каждого ТекСтр из мТаблицаТТД Цикл
					мТТД = ТекСтр.ТТД;
					Для Каждого ТекСтрокаЗадания из мТТД.Выработка Цикл
						Если ТекСтрокаЗадания.ПутЛист <> Ссылка Тогда
							Продолжить;
						КонецЕсли;
						
						ТекСтрокаЗадания_КоличествоЕздок = ТекСтрокаЗадания.КоличествоЕздок;
						
						//дополнительно отбираем тарифы по контрагенту и маршруту, действующие только для построчных тарифов
						ВесФильтровВрем = 0;
						СтруктураОбластьДействия = Новый Структура;
						СтруктураОбластьДействия.Вставить("ТС", ТранспортноеСредство);
						СтруктураОбластьДействия.Вставить("Контрагент", мТТД.Контрагент);
						СтруктураОбластьДействия.Вставить("Маршрут", ТекСтрокаЗадания.Маршрут);
						СтруктураОбластьДействия.Вставить("ОбъектСтроительства", ТекСтрокаЗадания.ОбъектСтроительства);
						СтруктураОбластьДействия.Вставить("ВидПеревозки", ТекСтрокаЗадания.ВидПеревозки);
						СтруктураОбластьДействия.Вставить("Номенклатура", ТекСтрокаЗадания.Номенклатура);
						
						ДобавитьВСтруктуруОбластиДействияПрицепы(СтруктураОбластьДействия);
						Если Не уатОбщегоНазначения.уатТарифЗПВОбластиДействия(ТекСтрокаТарифыСдельные.ТарифЗП, Организация, СтруктураОбластьДействия, ВесФильтровВрем) Тогда
							Продолжить;
						КонецЕсли;
						
						//время в работе
						Если ТекСтрокаТарифыСдельные.ПараметрВыработки = Справочники.уатПараметрыВыработки.ВремяВРаботе И ТекСтрокаЗадания.КоличествоЧасов > 0 Тогда
							мКоличество = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаЗадания.КоличествоЧасов)/3600;
							
							//вес груза
						ИначеЕсли ТекСтрокаТарифыСдельные.ПараметрВыработки = Справочники.уатПараметрыВыработки.ВесГруза И ТекСтрокаЗадания.КоличествоТонн > 0 Тогда
							мКоличество = ТекСтрокаЗадания.КоличествоТонн * ТекСтрокаЗадания_КоличествоЕздок;
							
							//объем
						ИначеЕсли ТекСтрокаТарифыСдельные.ПараметрВыработки = Справочники.уатПараметрыВыработки.Объем И ТекСтрокаЗадания.Объем > 0 Тогда
							мКоличество = ТекСтрокаЗадания.Объем * ТекСтрокаЗадания_КоличествоЕздок;
							
							//количество ездок
						ИначеЕсли ТекСтрокаТарифыСдельные.ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоЕздок И ТекСтрокаЗадания.КоличествоЕздок > 0 Тогда
							мКоличество = ТекСтрокаЗадания.КоличествоЕздок;
							
							//количество операций
						ИначеЕсли ТекСтрокаТарифыСдельные.ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоОпераций И ТекСтрокаЗадания.КоличествоОпераций > 0 Тогда
							мКоличество = ТекСтрокаЗадания.КоличествоОпераций;
							
							//подача
						ИначеЕсли ТекСтрокаТарифыСдельные.ПараметрВыработки = Справочники.уатПараметрыВыработки.Подача И ТекСтрокаЗадания.Подача > 0 Тогда
							мКоличество = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаЗадания.Подача)/3600;
							
							//пробег порожний
						ИначеЕсли ТекСтрокаТарифыСдельные.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегПорожний И ТекСтрокаЗадания.КоличествоКмПорожний > 0 Тогда
							мКоличество = ТекСтрокаЗадания.КоличествоКмПорожний * ТекСтрокаЗадания_КоличествоЕздок;
							
							//пробег с грузом
						ИначеЕсли ТекСтрокаТарифыСдельные.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегСГрузом И ТекСтрокаЗадания.КоличествоКмГруз > 0 Тогда
							мКоличество = ТекСтрокаЗадания.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок;
							
						// Спец. работы.
						ИначеЕсли ТекСтрокаТарифыСдельные.ПараметрВыработки = ТекСтрокаЗадания.СпецРабота1 И ТекСтрокаЗадания.КоличествоСпецРаботы1 > 0 Тогда
							мКоличество = ТекСтрокаЗадания.КоличествоСпецРаботы1 * ТекСтрокаЗадания_КоличествоЕздок;
						ИначеЕсли ТекСтрокаТарифыСдельные.ПараметрВыработки = ТекСтрокаЗадания.СпецРабота2 И ТекСтрокаЗадания.КоличествоСпецРаботы2 > 0 Тогда
							мКоличество = ТекСтрокаЗадания.КоличествоСпецРаботы2 * ТекСтрокаЗадания_КоличествоЕздок;
						ИначеЕсли ТекСтрокаТарифыСдельные.ПараметрВыработки = ТекСтрокаЗадания.СпецРабота3 И ТекСтрокаЗадания.КоличествоСпецРаботы3 > 0 Тогда
							мКоличество = ТекСтрокаЗадания.КоличествоСпецРаботы3 * ТекСтрокаЗадания_КоличествоЕздок;
						ИначеЕсли ТекСтрокаТарифыСдельные.ПараметрВыработки = ТекСтрокаЗадания.СпецРабота4 И ТекСтрокаЗадания.КоличествоСпецРаботы4 > 0 Тогда
							мКоличество = ТекСтрокаЗадания.КоличествоСпецРаботы4 * ТекСтрокаЗадания_КоличествоЕздок;
						ИначеЕсли ТекСтрокаТарифыСдельные.ПараметрВыработки = ТекСтрокаЗадания.СпецРабота5 И ТекСтрокаЗадания.КоличествоСпецРаботы5 > 0 Тогда
							мКоличество = ТекСтрокаЗадания.КоличествоСпецРаботы5 * ТекСтрокаЗадания_КоличествоЕздок;
							
							//тн*км
						ИначеЕсли ТекСтрокаТарифыСдельные.ПараметрВыработки = Справочники.уатПараметрыВыработки.ТнКм И ТекСтрокаЗадания.КоличествоТонн > 0 И ТекСтрокаЗадания.КоличествоКмГруз > 0 Тогда
							мКоличество = ТекСтрокаЗадания.КоличествоКмГруз * ТекСтрокаЗадания.КоличествоТонн * ТекСтрокаЗадания_КоличествоЕздок;
							
							//объем*км
						ИначеЕсли ТекСтрокаТарифыСдельные.ПараметрВыработки = Справочники.уатПараметрыВыработки.ОбъемКм И ТекСтрокаЗадания.Объем > 0 И ТекСтрокаЗадания.КоличествоКмГруз > 0 Тогда
							мКоличество = ТекСтрокаЗадания.КоличествоКмГруз * ТекСтрокаЗадания.Объем * ТекСтрокаЗадания_КоличествоЕздок;
							
							//погрузочно-разгрузочные работы
						ИначеЕсли ТекСтрокаТарифыСдельные.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПогрузочноРазгрузочныеРаботы И ТекСтрокаЗадания.ПогрузочноРазгрузочныеРаботы > 0 Тогда
							мКоличество = ТекСтрокаЗадания.ПогрузочноРазгрузочныеРаботы;
							
							//простой под погрузкой
						ИначеЕсли ТекСтрокаТарифыСдельные.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПростойПодПогрузкой И ТекСтрокаЗадания.ПростойПодПогрузкой > 0 Тогда
							мКоличество = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаЗадания.ПростойПодПогрузкой)/3600;
							
							//простой под разгрузкой
						ИначеЕсли ТекСтрокаТарифыСдельные.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПростойПодРазгрузкой И ТекСтрокаЗадания.ПростойПодРазгрузкой > 0 Тогда
							мКоличество = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаЗадания.ПростойПодРазгрузкой)/3600;
							
							//ручной произвольный параметр выработки
						ИначеЕсли ТекСтрокаТарифыСдельные.ПараметрВыработки = ТекСтрокаЗадания.ПараметрВыработки И ТекСтрокаЗадания.Выработка > 0 Тогда
							Если ТекСтрокаЗадания.ПараметрВыработки.Временный Тогда
								мКоличество = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаЗадания.Выработка)/3600;
							Иначе
								мКоличество = ТекСтрокаЗадания.Выработка;
							КонецЕсли;
							
						ИначеЕсли НЕ ТекСтрокаТарифыСдельные.ПараметрВыработки.Предопределенный
							И ТекСтрокаТарифыСдельные.ПараметрВыработки.СпособРасчетаПараметровВыработки = Перечисления.уатСпособРасчетаПараметровВыработки.ПоЗаданию
							И ТекСтрокаТарифыСдельные.ПараметрВыработки.ДействуетНаТС Тогда
							
							ЗначениеПараметра = ВычислитьПроизвольныйПараметрВыработки(ТекСтрокаТарифыСдельные.ПараметрВыработки, ТекСтрокаЗадания);
							Если ЗначениеПараметра = "ошибка" Тогда
								мКоличество = 0;
							Иначе
								мКоличество = ЗначениеПараметра;
							КонецЕсли;
							
						Иначе
							мКоличество = 0;
							
						КонецЕсли;
						
						мТариф = уатОбщегоНазначения.уатРасчетСдельногоТарифаЗП(ТекСтрокаТарифыСдельные.ТарифЗП,
						ТекСтрокаЗадания.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок,
						уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаЗадания.КоличествоЧасов)/3600,
						мГрузоподъемность,
						уатОбщегоНазначения.уатКлассГруза(ТекСтрокаЗадания.Номенклатура));
						
						НоваяСтрока = тблЗарплатаВрем.Добавить();
						НоваяСтрока.ВидНачисления        = ТекСтрокаТарифыСдельные.ВидНачисления;
						НоваяСтрока.Сотрудник            = вхСотрудник;
						НоваяСтрока.Сумма                = мКоличество * мТариф;
						НоваяСтрока.РучнойВвод           = Ложь;
						НоваяСтрока.ВесФильтров          = ВесФильтровВрем;
						НоваяСтрока.ПараметрВыработки    = ТекСтрокаТарифыСдельные.ПараметрВыработки;
						НоваяСтрока.ПараметрВыработкиДоп = Строка(ТекСтрокаТарифыСдельные.ПараметрВыработки);
						НоваяСтрока.НомерСтрокиДляПострочныхТарифов = ТекСтрокаЗадания.НомерСтроки;
					КонецЦикла;	
				КонецЦикла;
			КонецЕсли;
			
		Иначе  //расчет зарплаты по таблице выработки (свернутой)
			мВыработка = ВыработкаСотрудников.НайтиСтроки(Новый Структура("Сотрудник, ПараметрВыработки", вхСотрудник, ТекСтрокаТарифыСдельные.ПараметрВыработки));
			Для Каждого ТекСтрокаВыработки Из мВыработка Цикл
				Если ТекСтрокаВыработки.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;	
				
				ВесФильтровВрем = 0;
				СтруктураОбластьДействия = Новый Структура("ТС", ТранспортноеСредство);
				ДобавитьВСтруктуруОбластиДействияПрицепы(СтруктураОбластьДействия);
				Если Не уатОбщегоНазначения.уатТарифЗПВОбластиДействия(ТекСтрокаТарифыСдельные.ТарифЗП, Организация, СтруктураОбластьДействия, ВесФильтровВрем) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТекСтрокаВыработки.ПараметрВыработки.Временный Тогда
					мКоличество = ТекСтрокаВыработки.Количество / 3600;
				Иначе	
					мКоличество = ТекСтрокаВыработки.Количество;
				КонецЕсли;	
				
				мТариф = уатОбщегоНазначения.уатРасчетСдельногоТарифаЗП(ТекСтрокаТарифыСдельные.ТарифЗП, мРасстояниеГруз, мВремяРаботы  / 3600, мГрузоподъемность, мКлассГруза);
				НоваяСтрока = тблЗарплатаВрем.Добавить();
				НоваяСтрока.ВидНачисления        = ТекСтрокаТарифыСдельные.ВидНачисления;
				НоваяСтрока.Сотрудник            = вхСотрудник;
				НоваяСтрока.Сумма                = мКоличество * мТариф;
				НоваяСтрока.РучнойВвод           = Ложь;
				НоваяСтрока.ВесФильтров          = ВесФильтровВрем;
				НоваяСтрока.ПараметрВыработки    = ТекСтрокаТарифыСдельные.ПараметрВыработки;
				НоваяСтрока.ПараметрВыработкиДоп = Строка(ТекСтрокаТарифыСдельные.ПараметрВыработки);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;	
	УдалитьЛишниеТарифыЗП(тблЗарплатаВрем, "ПараметрВыработкиДоп");
	
	//3. Время в простое (простой с оплатой водителю)
	//берем не из таблицы выработки, а из таблицы простоев, т.к. нужно смотреть признак оплаты
	мТарифыСдельные = мТарифы.НайтиСтроки(Новый Структура("СпособРасчетаОплатыТруда, ПараметрВыработки",
	Перечисления.уатСпособыРасчетаОплатыТруда.СдельныйЗаработок,
	Справочники.уатПараметрыВыработки.ВремяВПростое));
	Для Каждого ТекСтрокаТарифыСдельные Из мТарифыСдельные Цикл
		ВесФильтровВрем = 0;
		СтруктураОбластьДействия = Новый Структура("ТС", ТранспортноеСредство);
		ДобавитьВСтруктуруОбластиДействияПрицепы(СтруктураОбластьДействия);
		Если Не уатОбщегоНазначения.уатТарифЗПВОбластиДействия(ТекСтрокаТарифыСдельные.ТарифЗП, Организация, СтруктураОбластьДействия, ВесФильтровВрем) Тогда
			Продолжить;
		КонецЕсли;
		
		мВремяВПростое = 0;
		Для Каждого мТекСтрокаПростои Из Простои Цикл
			Если мТекСтрокаПростои.ВидПростоя.ОплатаВодителю Тогда
				мВремяВПростое = мВремяВПростое + (мТекСтрокаПростои.ВремяПростоя - НачалоДня(мТекСтрокаПростои.ВремяПростоя));
			КонецЕсли;	
		КонецЦикла;	
		
		мТариф = уатОбщегоНазначения.уатРасчетСдельногоТарифаЗП(ТекСтрокаТарифыСдельные.ТарифЗП, мРасстояниеГруз, мВремяРаботы  / 3600, мГрузоподъемность, мКлассГруза);
		НоваяСтрока = тблЗарплатаВрем.Добавить();
		НоваяСтрока.ВидНачисления        = ТекСтрокаТарифыСдельные.ВидНачисления;
		НоваяСтрока.Сотрудник            = вхСотрудник;
		НоваяСтрока.Сумма                = мВремяВПростое  / 3600 * мТариф;
		НоваяСтрока.РучнойВвод           = Ложь;
		НоваяСтрока.ВесФильтров          = ВесФильтровВрем;
		НоваяСтрока.ПараметрВыработки    = Справочники.уатПараметрыВыработки.ВремяВПростое;
		НоваяСтрока.ПараметрВыработкиДоп = "Время в простое";
	КонецЦикла;
	УдалитьЛишниеТарифыЗП(тблЗарплатаВрем, "ПараметрВыработкиДоп");
	
	//4. Надбавка за ночные
	//вначале смотрим есть ли ночное время в выработке водителя
	мВыработка = ВыработкаСотрудников.НайтиСтроки(Новый Структура("Сотрудник, ПараметрВыработки", вхСотрудник, Справочники.уатПараметрыВыработки.ВремяНочное));
	Если мВыработка.Количество() > 0 Тогда	
		Если мВыработка[0].Количество > 0 Тогда
			РасчетДоплатЗП(вхСотрудник, мТарифы, Перечисления.уатСпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы);
		КонецЕсли;
	КонецЕсли;
	
	//5. Тарифы с фиксированной суммой
	мТарифыФикс = мТарифы.НайтиСтроки(Новый Структура("СпособРасчетаОплатыТруда", Перечисления.уатСпособыРасчетаОплатыТруда.ФиксированнойСуммой));
	Для счТарифы = 0 По мТарифыФикс.Количество() - 1 Цикл
		ТекСтрокаТарифыФикс = мТарифыФикс[счТарифы];
		
		ВесФильтровВрем = 0;
		СтруктураОбластьДействия = Новый Структура("ТС", ТранспортноеСредство);
		ДобавитьВСтруктуруОбластиДействияПрицепы(СтруктураОбластьДействия);
		Если Не уатОбщегоНазначения.уатТарифЗПВОбластиДействия(ТекСтрокаТарифыФикс.ТарифЗП, Организация, СтруктураОбластьДействия, ВесФильтровВрем) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = тблЗарплатаВрем.Добавить();
		НоваяСтрока.ВидНачисления        = ТекСтрокаТарифыФикс.ВидНачисления;
		НоваяСтрока.Сотрудник            = вхСотрудник;
		НоваяСтрока.Сумма                = ТекСтрокаТарифыФикс.ТарифЗП.Тариф;
		НоваяСтрока.РучнойВвод           = Ложь;
		НоваяСтрока.ВесФильтров          = ВесФильтровВрем;
		НоваяСтрока.ПараметрВыработки    = ТекСтрокаТарифыФикс.ПараметрВыработки;
		НоваяСтрока.ПараметрВыработкиДоп = Строка(ТекСтрокаТарифыФикс.ПараметрВыработки);
	КонецЦикла;
	УдалитьЛишниеТарифыЗП(тблЗарплатаВрем);
	
	//6. Прочие надбавки (процентом от видов начислений)
	РасчетДоплатЗП(вхСотрудник, мТарифы, Перечисления.уатСпособыРасчетаОплатыТруда.ПроцентомОтВидовНачислений);
		
	Зарплата.Свернуть("Сотрудник, ВидНачисления, РучнойВвод, ПараметрВыработки", "Сумма");
	
КонецПроцедуры // РасчетЗП()

// Процедура рассчитывает доплаты (за ночные и прочие) к з/п по пут. листу
// и добавляет их в ТЧ Зарплата
// Параметры:
//	вхСотрудник - сотрудник, по которому рассчитываются доплаты
//	вхТарифыЗП - таблица тарифов, колонки [СпособРасчетаОплатыТруда, ВидНачисления, ТарифЗП]
//	вхВидДоплаты - СпособРасчетаОплатыТруда, по которому ведется расчет доплат
//
Процедура РасчетДоплатЗП(вхСотрудник, вхТарифыЗП, вхВидДоплаты)
	тблЗарплатаВрем = Зарплата.Выгрузить();
	тблЗарплатаВрем.Очистить();
	тблЗарплатаВрем.Колонки.Добавить("ВесФильтров");
	тблЗарплатаВрем.Колонки.Добавить("НомерСтрокиДляПострочныхТарифов",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1,0,ДопустимыйЗнак.Неотрицательный)));
	
	СтруктураОбластьДействия = Новый Структура("ТС", ТранспортноеСредство);
	ДобавитьВСтруктуруОбластиДействияПрицепы(СтруктураОбластьДействия);
	
	мТарифыДоплата = вхТарифыЗП.НайтиСтроки(Новый Структура("СпособРасчетаОплатыТруда", вхВидДоплаты));
	Для счТарифы = 0 По мТарифыДоплата.Количество() - 1 Цикл
		ТекСтрока = мТарифыДоплата[счТарифы];
		мВидНачисления = ТекСтрока.ВидНачисления;
		ВесФильтровВрем = 0;
		
		Если НЕ уатОбщегоНазначения.уатТарифЗПВОбластиДействия(ТекСтрока.ТарифЗП, Организация, СтруктураОбластьДействия,
				ВесФильтровВрем) Тогда
			Продолжить;
		КонецЕсли;
		
		мСумма = 0;
		
		Для Каждого ТекСтрокаИсточник Из мВидНачисления.БазовыеВидыРасчета Цикл
			мЗП = Зарплата.НайтиСтроки(Новый Структура("Сотрудник, ВидНачисления", вхСотрудник, ТекСтрокаИсточник.ВидРасчета));
			
			Если мЗП.Количество() = 0 Тогда
				мЗП = тблЗарплатаВрем.НайтиСтроки(Новый Структура("Сотрудник, ВидНачисления", вхСотрудник, ТекСтрокаИсточник.ВидРасчета));
			КонецЕсли;

			//просуммируем все начисления данного вида
			Для счЗП = 0 По мЗП.Количество() - 1 Цикл
				мСумма = мСумма + мЗП[счЗП].Сумма;
			КонецЦикла;	
		КонецЦикла;	
		
		НоваяСтрока 					= тблЗарплатаВрем.Добавить();
		НоваяСтрока.ВидНачисления 		= мВидНачисления;
		НоваяСтрока.Сотрудник 			= вхСотрудник;
		НоваяСтрока.Сумма 				= Окр(мСумма * ТекСтрока.ТарифЗП.Тариф / 100,2);
		НоваяСтрока.РучнойВвод 			= Ложь;
		НоваяСтрока.ВесФильтров		= ВесФильтровВрем;
		НоваяСтрока.ПараметрВыработки = ТекСтрока.ПараметрВыработки;
	КонецЦикла;
	
	УдалитьЛишниеТарифыЗП(тблЗарплатаВрем);
КонецПроцедуры

//Процедура удаляет "лишние" тарифы из блока з/п (лишним считается тариф с меньшим весом совпадения фильтров)
// тблЗарплатаВрем - таблица со структурой аналогичной ТЧ Зарплата, плюс доп. поля сортировки
// СтрокаДопСортировка - строка доп поля таблицы тблЗарплатаВрем, доп. аналитика для отбора "нужных" тарифов
Процедура УдалитьЛишниеТарифыЗП(тблЗарплатаВрем, СтрокаДопСортировка = Неопределено)
	Если тблЗарплатаВрем.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//удаляем сначала лишние тарифы с отключенным флагом "Построчно" (общие тарифы).
	//Если вес фильтра найденных построчных тарифов выше, чем вес фильтра общего тарифа,
	//то последний является лишним и будет удален
	Если СтрокаДопСортировка = Неопределено Тогда
		тблЗарплатаВрем.Сортировать("ВесФильтров УБЫВ");
		МаксВесФильтров = тблЗарплатаВрем[0].ВесФильтров;
		Сч = тблЗарплатаВрем.Количество();
		Пока Сч > 0 Цикл
			Сч = Сч - 1;
			Если тблЗарплатаВрем[Сч].ВесФильтров <> МаксВесФильтров И
					тблЗарплатаВрем[Сч].НомерСтрокиДляПострочныхТарифов = 0 Тогда
				тблЗарплатаВрем.Удалить(Сч);
			КонецЕсли;
		КонецЦикла;
	Иначе
		тблЗарплатаВрем.Сортировать(СтрокаДопСортировка + " УБЫВ, ВесФильтров УБЫВ");
		мсвНайденныхДопАналитикТарифов = Новый Массив;
		
		ТекАналитикаВрем = "";
		ПострочныйТарифИмеетМаксимальныйВес = Ложь;
		мсвСтрокДляУдаления = Новый Массив;
		Для каждого ТекСтрока Из тблЗарплатаВрем Цикл
			ТекАналитика = ТекСтрока[СтрокаДопСортировка];
			Если ТекАналитикаВрем <> ТекАналитика Тогда //перешли на новое значение аналитики - текущую строку включаем в ТЧ
				МаксВесФильтровПоАналитике = ТекСтрока.ВесФильтров;
				ТекАналитикаВрем = ТекАналитика;
				ПострочныйТарифИмеетМаксимальныйВес = (ТекСтрока.НомерСтрокиДляПострочныхТарифов <> 0);
				Продолжить;
			КонецЕсли;
			
			//вес фильтров в тек. строке ниже, значит ее удаляем
			Если ТекСтрока.ВесФильтров <> МаксВесФильтровПоАналитике И ТекСтрока.НомерСтрокиДляПострочныхТарифов = 0 Тогда
				
				мсвСтрокДляУдаления.Добавить(ТекСтрока);
				
				//ТОНКИЙ МОМЕНТ! вес фильтров в текущей строке равен максимальному,
				//но максимальный вес также соответствует и построчному тарифу
				//значит удаляем общий тариф
			ИначеЕсли ТекСтрока.ВесФильтров = МаксВесФильтровПоАналитике И ТекСтрока.НомерСтрокиДляПострочныхТарифов = 0
				И ПострочныйТарифИмеетМаксимальныйВес Тогда
				
				мсвСтрокДляУдаления.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла; 
		Для Каждого ТекСтрокаУдаления Из мсвСтрокДляУдаления Цикл
			тблЗарплатаВрем.Удалить(ТекСтрокаУдаления);
		КонецЦикла;
	КонецЕсли;
	
	//удаляем лишние тарифы с включенным флагом "Построчно"
	//(для них НомерСтроки во временной таблице ненулевой и соответствует номеру строки Задания)
	тблЗарплатаВремПострочныеТарифы = тблЗарплатаВрем.Скопировать();
	тблЗарплатаВремПострочныеТарифы.Очистить();
	тблЗарплатаВрем.Сортировать("НомерСтрокиДляПострочныхТарифов УБЫВ");
	МаксНомерСтроки = тблЗарплатаВрем[0].НомерСтрокиДляПострочныхТарифов;
	Для Сч = 1 По МаксНомерСтроки Цикл
		тблЗарплатаВремПоСтроке = тблЗарплатаВрем.Скопировать();
		СчПоСтроке = тблЗарплатаВремПоСтроке.Количество()-1;
		Пока СчПоСтроке >= 0 Цикл
			Если тблЗарплатаВремПоСтроке[СчПоСтроке].НомерСтрокиДляПострочныхТарифов <> Сч Тогда
				тблЗарплатаВремПоСтроке.Удалить(СчПоСтроке);
			КонецЕсли;
			СчПоСтроке = СчПоСтроке - 1;
		КонецЦикла;
		
		//Если тблЗарплатаВремПоСтроке.Количество() < 2 Тогда//Если тариф найден один или не найден,то оставляем его как есть
		//	Если тблЗарплатаВремПоСтроке.Количество() = 1 Тогда
		//		НоваяСтрокаПостр = тблЗарплатаВремПострочныеТарифы.Добавить();
		//		ЗаполнитьЗначенияСвойств(НоваяСтрокаПостр, тблЗарплатаВремПоСтроке[0]);
		//	КонецЕсли;
		//	
		//	Продолжить;
		//КонецЕсли;
		
		Если СтрокаДопСортировка = Неопределено Тогда
			МаксВесФильтровДляОбщихТарифов = 0;
			Для Каждого ТекСтрока Из тблЗарплатаВрем Цикл
				Если ТекСтрока.НомерСтрокиДляПострочныхТарифов = 0 И ТекСтрока.ВесФильтров > МаксВесФильтровДляОбщихТарифов Тогда
					МаксВесФильтровДляОбщихТарифов = ТекСтрока.ВесФильтров;
				КонецЕсли;
			КонецЦикла;
			
			тблЗарплатаВрем1 = тблЗарплатаВрем.Скопировать();
			тблЗарплатаВрем1.Сортировать("ВесФильтров УБЫВ");
			МаксВесФильтровДляОбщихТарифов = тблЗарплатаВрем1[0].ВесФильтров;
			
			тблЗарплатаВремПоСтроке.Сортировать("ВесФильтров УБЫВ");
			МаксВесФильтров = тблЗарплатаВремПоСтроке[0].ВесФильтров;
			Сч = тблЗарплатаВремПоСтроке.Количество();
			Пока Сч > 0 Цикл
				Сч = Сч - 1;
				Если тблЗарплатаВремПоСтроке[Сч].ВесФильтров = МаксВесФильтров И
						тблЗарплатаВремПоСтроке[Сч].ВесФильтров >= МаксВесФильтровДляОбщихТарифов Тогда
					НоваяСтрокаПостр = тблЗарплатаВремПострочныеТарифы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПостр, тблЗарплатаВремПоСтроке[Сч]);
				КонецЕсли;
			КонецЦикла;
		Иначе
			тблЗарплатаВремПоСтроке.Сортировать(СтрокаДопСортировка + " УБЫВ, ВесФильтров УБЫВ");
			мсвНайденныхДопАналитикТарифов = Новый Массив;
			
			ТекАналитикаВрем = "";
			мсвСтрокДляУдаления = Новый Массив;
			Для каждого ТекСтрока Из тблЗарплатаВремПоСтроке Цикл
				ТекАналитика = ТекСтрока[СтрокаДопСортировка];
				Если ТекАналитикаВрем <> ТекАналитика Тогда //перешли на новое значение аналитики - текущую строку включаем в ТЧ
					МаксВесФильтровПоАналитике = ТекСтрока.ВесФильтров;
					ТекАналитикаВрем = ТекАналитика;
					
					МаксВесФильтровДляОбщихТарифов = 0;
					Для Каждого ТекСтрокаМаксВес Из тблЗарплатаВрем Цикл
						Если ТекСтрокаМаксВес.НомерСтрокиДляПострочныхТарифов = 0 И
								ТекСтрокаМаксВес[СтрокаДопСортировка] = ТекАналитика
							И ТекСтрокаМаксВес.ВесФильтров > МаксВесФильтровДляОбщихТарифов Тогда
							МаксВесФильтровДляОбщихТарифов = ТекСтрокаМаксВес.ВесФильтров;
						КонецЕсли;
					КонецЦикла;
					//Продолжить;
				КонецЕсли;
				
				Если ТекСтрока.ВесФильтров = МаксВесФильтровПоАналитике И
						ТекСтрока.ВесФильтров >= МаксВесФильтровДляОбщихТарифов Тогда
					НоваяСтрокаПостр = тблЗарплатаВремПострочныеТарифы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПостр, ТекСтрока);
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
	КонецЦикла;
	
	//удаляем все построчные тарифы из входной таблицы тблЗарплатаВрем
	//и дабавляем обработанные (очищенные от лишних) построчные тарифы в туже таблицу тблЗарплатаВрем
	Сч = тблЗарплатаВрем.Количество()-1;
	Пока Сч >= 0 Цикл
		Если тблЗарплатаВрем[Сч].НомерСтрокиДляПострочныхТарифов <> 0 Тогда
			тблЗарплатаВрем.Удалить(Сч);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	Для Каждого ТекСтрокаПостр Из тблЗарплатаВремПострочныеТарифы Цикл
		НоваяСтрокаВрем = тблЗарплатаВрем.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаВрем, ТекСтрокаПостр);
	КонецЦикла;
	
	//заливаем обработанную временную таблицу тарифов в ТЧ Зарплата
	Для Каждого ТекСтрокаВрем Из тблЗарплатаВрем Цикл
		Если ТекСтрокаВрем.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Зарплата.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаВрем);
	КонецЦикла;
	
	тблЗарплатаВрем.Очистить();
КонецПроцедуры

Процедура ДобавитьВСтруктуруОбластиДействияПрицепы(СтруктураОбластьДействия)
	Если Прицепы.Количество() > 0 Тогда
		мсвПрицепы = новый Массив;
		Для Каждого ТекСтрока Из Прицепы Цикл
			Если ЗначениеЗаполнено(ТекСтрока.ТС) Тогда
				мсвПрицепы.Добавить(ТекСтрока.ТС);
			КонецЕсли;
		КонецЦикла;
		Если мсвПрицепы.Количество() > 0 Тогда
			СтруктураОбластьДействия.Вставить("Прицепы", мсвПрицепы);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура устанавливает дату "Действителен до" документа.
//
Процедура УстановитьДействителенДоПоУмолчанию() Экспорт
	
	СтруктураОбъектовНастроек = Новый Структура;
	СтруктураОбъектовНастроек.Вставить("Организация", Организация);
	Если ЗначениеЗаполнено(Подразделение) Тогда
		СтруктураОбъектовНастроек.Вставить("Подразделение", Подразделение);
	Иначе
		СтруктураОбъектовНастроек.Вставить("Подразделение", уатОбщегоНазначения.МестонахождениеТС(ТранспортноеСредство).Подразделение);
	КонецЕсли;
	
	мСрокДействияПутевогоЛиста = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.СрокДействияПутевогоЛиста);
	мСрокДействияПутевогоЛиста = ?(мСрокДействияПутевогоЛиста <> Неопределено, мСрокДействияПутевогоЛиста, 0);
	
	ДействителенДо = КонецДня(Дата + мСрокДействияПутевогоЛиста * 3600 * 24 + 1);
	
КонецПроцедуры

//Процедура рассчитывает кол-во выданного топлива в таб. части Заправки ГСМ и заносит это
//значение в табл. часть Расход ГСМ в реквизит Выдано
Процедура ПересчетВыданногоГСМ(ТаблицаЗаправкиГСМ = Неопределено) Экспорт
	
	Если ТаблицаЗаправкиГСМ = Неопределено Тогда
		ТаблицаЗаправкиГСМ = уатОбщегоНазначения.уатПолучитьЗаправкиДляПЛ(Ссылка);
	КонецЕсли;
	
	ТаблицаСливыНаТС = уатОбщегоНазначения.уатПолучитьСливыНаТСДляПЛ(Ссылка);
	
	Для Каждого ТекСтрока Из РасходГСМ Цикл
		//выбрали строки заправок для ТС
		мМассивСтрокЗаправкиГСМ = ТаблицаЗаправкиГСМ.НайтиСтроки(Новый Структура("ТС", ТекСтрока.ТС));
		
		тзАналогиГСМ = уатОбщегоНазначения.уатПолучитьАналогиГСМ(ТекСтрока.ГСМ);
		
		чВыдано = 0;
		Для сч = 0 По мМассивСтрокЗаправкиГСМ.Количество() - 1 Цикл
			//если заправка не проведена - не учитываем
			Если НЕ мМассивСтрокЗаправкиГСМ[сч].Ссылка.Проведен Тогда
				Продолжить;
			КонецЕсли;
			
			//заправка заданнымГСМ или его аналогом
			//Если заправка была по талонам, то определяем ГСМ талона и кол-во литров по талону
			Если мМассивСтрокЗаправкиГСМ[сч].ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаТалоны Тогда
				мГСМТалон = уатОбщегоНазначения.уатПрочитатьРеквизитГСМ(мМассивСтрокЗаправкиГСМ[сч].ГСМ);
				мГСМ		= мГСМТалон.ГСМТалона;
				мКоличество = уатОбщегоНазначения.уатКоличествоЛитровТалонаГСМ(мМассивСтрокЗаправкиГСМ[сч].Дата,
					мМассивСтрокЗаправкиГСМ[сч].АЗС, мГСМТалон, мМассивСтрокЗаправкиГСМ[сч].Количество);
			Иначе
				мГСМ		= мМассивСтрокЗаправкиГСМ[сч].ГСМ;
				мКоличество = мМассивСтрокЗаправкиГСМ[сч].Количество;
			КонецЕсли;	
			
			Если тзАналогиГСМ.Найти(мГСМ, "Аналог") <> Неопределено Или	мГСМ = ТекСтрока.ГСМ Тогда
				чВыдано = чВыдано + мКоличество;
			КонецЕсли;	
		КонецЦикла;	
		
		мМассивСтрокСливовНаТС = ТаблицаСливыНаТС.НайтиСтроки(Новый Структура("АЗС", ТекСтрока.ТС));
		
		Для сч = 0 По мМассивСтрокСливовНаТС.Количество() - 1 Цикл
			Если Не мМассивСтрокСливовНаТС[сч].Ссылка.Проведен Тогда
				Продолжить;
			КонецЕсли;
			
			мГСМ        = мМассивСтрокСливовНаТС[сч].ГСМ;
			мКоличество = мМассивСтрокСливовНаТС[сч].Количество;
			
			Если тзАналогиГСМ.Найти(мГСМ, "Аналог") <> Неопределено Или мГСМ = ТекСтрока.ГСМ Тогда
				чВыдано = чВыдано + мКоличество;
			КонецЕсли;
		КонецЦикла;
		
		Если ТекСтрока.Выдано <> Окр(чВыдано, 3) Тогда
			ТекСтрока.Выдано = чВыдано;
			Если Рассчитан И НЕ уатГСМ.ЭтоТехническаяЖидкость(ТекСтрока.ГСМ) Тогда
				ТекСтрока.РасходПоФакту = ТекСтрока.ОстатокПриВыезде - ТекСтрока.ОстатокПриВозвращении + ТекСтрока.Выдано - ТекСтрока.Сдано;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //ПересчетВыданногоГСМ()

//Процедура рассчитывает кол-во сданного топлива в таб. части Сливы ГСМ и заносит это
//значение в табл. часть Расход ГСМ в реквизит Сдано
Процедура ПересчетСданногоГСМ(ТаблицаСливыГСМ = Неопределено) Экспорт
	Если ТаблицаСливыГСМ = Неопределено Тогда
		ТаблицаСливыГСМ = уатОбщегоНазначения.уатПолучитьСливыДляПЛ(Ссылка);
	КонецЕсли;
	
	Для Каждого ТекСтрока Из РасходГСМ Цикл
		мМассивСтрокСливовГСМ = ТаблицаСливыГСМ.НайтиСтроки(Новый Структура("ТС", ТекСтрока.ТС));
		
		тзАналогиГСМ = уатОбщегоНазначения.уатПолучитьАналогиГСМ(ТекСтрока.ГСМ);
		
		чСдано = 0;
		Для сч = 0 По мМассивСтрокСливовГСМ.Количество() - 1 Цикл
			//если заправка не проведена - не учитываем
			Если НЕ мМассивСтрокСливовГСМ[сч].Ссылка.Проведен Тогда
				Продолжить;
			КонецЕсли;
			
			//слив ГСМ или его аналога
			мГСМ		= мМассивСтрокСливовГСМ[сч].ГСМ;
			мКоличество = мМассивСтрокСливовГСМ[сч].Количество;
			
			Если тзАналогиГСМ.Найти(мГСМ, "Аналог") <> Неопределено Или	мГСМ = ТекСтрока.ГСМ Тогда
				чСдано = чСдано + мКоличество;
			КонецЕсли;	
		КонецЦикла;	
		
		Если ТекСтрока.Сдано <> Окр(чСдано, 3) Тогда
			ТекСтрока.Сдано = чСдано;
			Если Рассчитан Тогда
				ТекСтрока.РасходПоФакту = ТекСтрока.ОстатокПриВыезде - ТекСтрока.ОстатокПриВозвращении + ТекСтрока.Выдано - ТекСтрока.Сдано;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Процедура проверяет корректность заполнения документа.
//
// Параметры:
//	СтруктураШапкиДокумента - структура шапки;
//	Отказ - сюда передается флаг корректности заполнения;
//	Заголовок - представление документа при выполнении проверки.
//
Процедура ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт
	СтруктураОбязательныхПолей = Новый Структура("Организация, ТранспортноеСредство, Водитель1, ДатаВыезда, ВидПЛ");
	Если Рассчитан Тогда
		СтруктураОбязательныхПолей.Вставить("ДатаЗакрытия");
	КонецЕсли;
	
	уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,СтруктураОбязательныхПолей, Отказ,
		Заголовок);
	Если Отказ Тогда Возврат КонецЕсли;
	
	Если НЕ ТранспортноеСредство.уатВидМоделиТС = Перечисления.уатВидыМоделейТС.Автотранспорт Тогда
		Сообщить("Выбранное ТС не является автотранспортом (выбрано оборудование)!", СтатусСообщения.Внимание);
		Отказ = Истина;
	КонецЕсли;
	
	Если Рассчитан Тогда
		ИмяТабличнойЧасти = "РасходГСМ";
		СтруктураОбязательныхПолей = Новый Структура("ТС, ГСМ");
		уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти,
			СтруктураОбязательныхПолей, Отказ, Заголовок);
		
		ТекстСообщОшибки = "";
		Если Не ПроверитьТаблицуВыработкиТС(ТекстСообщОшибки) Тогда
			Сообщить("Неправильно заполнена таблица выработки ТС (" + ТекстСообщОшибки + ")", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если Не ПроверитьТаблицуПростоев() Тогда
			Сообщить("Неправильно заполнена таблица простоев!
			|Не указана дата простоя!", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		ТекстСообщОшибки = "";
		ПроверитьТаблицуФОВ(ТекстСообщОшибки, Отказ);
		Если ЗначениеЗаполнено(ТекстСообщОшибки) Тогда
			Сообщить("Неправильно заполнена таблица фактически отработанного времени:" + ТекстСообщОшибки, СтатусСообщения.Внимание);
		КонецЕсли;
		
		ПроверитьТаблицуЗП();
	КонецЕсли;
КонецПроцедуры

// Формирует структуру, содержащую значения реквизитов шапки документа.
//
// Параметры: 
//  ДокументОбъект - объект документа для формирования структуры шапки, 
//
// Возвращаемое значение:
//  Сформированная структура.
//
Функция СформироватьСтруктуруШапкиДокумента()
	
	СтруктураШапкиДокумента = Новый Структура;
	СтруктураШапкиДокумента.Вставить("Ссылка", Ссылка);
	СтруктураШапкиДокумента.Вставить("Дата", Дата);
	Для каждого Реквизит из Метаданные().Реквизиты Цикл
		СтруктураШапкиДокумента.Вставить(Реквизит.Имя, ЭтотОбъект[Реквизит.Имя]);
	КонецЦикла;
	
	Возврат СтруктураШапкиДокумента;
	
КонецФункции // СформироватьСтруктуруШапкиДокумента()

//Функция проверяет таблицу выработки ТС.
//В случае успеха возвращается Истина, иначе - Ложь
Функция ПроверитьТаблицуВыработкиТС(ТекстСообщения = "") Экспорт
	
	мсвТС = Новый Массив();
	мсвТС.Добавить(ТранспортноеСредство);
	
	Для Каждого ТекОборуд Из Прицепы Цикл
		мсвТС.Добавить(ТекОборуд.ТС);
	КонецЦикла;
	
	Для Каждого ТекТС Из мсвТС Цикл
		Если Не ТекТС.уатМодель.НаличиеСпидометра Тогда
			Продолжить;
		КонецЕсли;
		
		мПробегОбщий              = 0;
		мПробегСГрузом            = 0;
		мПробегПорожний           = 0;
		мПробегСПассажирами       = 0;
		мПробегСпециальнойРаботы1 = 0;
		мПробегСпециальнойРаботы2 = 0;
		мПробегСпециальнойРаботы3 = 0;
		мПробегСпециальнойРаботы4 = 0;
		мПробегСпециальнойРаботы5 = 0;
		мПробегНаБуксире          = 0;
		
		Для Каждого ТекСтрокаВыработки Из ВыработкаТС Цикл
			Если ТекСтрокаВыработки.ТС <> ТекТС Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекСтрокаВыработки.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегОбщий Тогда
				мПробегОбщий = мПробегОбщий + ТекСтрокаВыработки.Количество;
				
			ИначеЕсли ТекСтрокаВыработки.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегСГрузом Тогда
				мПробегСГрузом = мПробегСГрузом + ТекСтрокаВыработки.Количество;
				
			ИначеЕсли ТекСтрокаВыработки.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегПорожний Тогда
				мПробегПорожний = мПробегПорожний + ТекСтрокаВыработки.Количество;
				
			ИначеЕсли ТекСтрокаВыработки.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегСПассажирами Тогда
				мПробегСПассажирами = мПробегСПассажирами + ТекСтрокаВыработки.Количество;
				
			ИначеЕсли ТекСтрокаВыработки.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы
					И Не Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы.Временный Тогда
				мПробегСпециальнойРаботы1 = мПробегСпециальнойРаботы1 + ТекСтрокаВыработки.Количество;
				
			ИначеЕсли ТекСтрокаВыработки.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы2
					И Не Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы2.Временный Тогда
				мПробегСпециальнойРаботы2 = мПробегСпециальнойРаботы2 + ТекСтрокаВыработки.Количество;
				
			ИначеЕсли ТекСтрокаВыработки.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы3
					И Не Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы3.Временный Тогда
				мПробегСпециальнойРаботы3 = мПробегСпециальнойРаботы3 + ТекСтрокаВыработки.Количество;
				
			ИначеЕсли ТекСтрокаВыработки.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы4
					И Не Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы4.Временный Тогда
				мПробегСпециальнойРаботы4 = мПробегСпециальнойРаботы4 + ТекСтрокаВыработки.Количество;
				
			ИначеЕсли ТекСтрокаВыработки.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы5
					И Не Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы5.Временный Тогда
				мПробегСпециальнойРаботы5 = мПробегСпециальнойРаботы5 + ТекСтрокаВыработки.Количество;
				
			ИначеЕсли ТекСтрокаВыработки.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегНаБуксире Тогда
				мПробегНаБуксире = мПробегНаБуксире + ТекСтрокаВыработки.Количество;
			КонецЕсли;
		КонецЦикла;
		
		Если Окр(мПробегСГрузом, 1) > Окр(мПробегОбщий, 1) Тогда
			ТекстСообщения = "Пробег с грузом превышает общий пробег";
			Возврат Ложь;
		КонецЕсли;
		
		Если Окр(мПробегПорожний, 1) > Окр(мПробегОбщий, 1) Тогда
			ТекстСообщения = "Пробег порожний превышает общий пробег";
			Возврат Ложь;
		КонецЕсли;
		
		Если Окр(мПробегСПассажирами, 1) > Окр(мПробегОбщий, 1) Тогда
			ТекстСообщения = "Пробег с пассажирами превышает общий пробег";
			Возврат Ложь;
		КонецЕсли;
		
		Если Окр(мПробегСпециальнойРаботы1, 1) > Окр(мПробегОбщий, 1) Тогда
			ТекстСообщения = Нстр("ru = 'Пробег спец. работы 1 превышает общий пробег'; en = 'NTRS'");
			Возврат Ложь;
		КонецЕсли;
		
		Если Окр(мПробегСпециальнойРаботы2, 1) > Окр(мПробегОбщий, 1) Тогда
			ТекстСообщения = Нстр("ru = 'Пробег спец. работы 2 превышает общий пробег'; en = 'NTRS'");
			Возврат Ложь;
		КонецЕсли;
		
		Если Окр(мПробегСпециальнойРаботы3, 1) > Окр(мПробегОбщий, 1) Тогда
			ТекстСообщения = Нстр("ru = 'Пробег спец. работы 3 превышает общий пробег'; en = 'NTRS'");
			Возврат Ложь;
		КонецЕсли;
		
		Если Окр(мПробегСпециальнойРаботы4, 1) > Окр(мПробегОбщий, 1) Тогда
			ТекстСообщения = Нстр("ru = 'Пробег спец. работы 4 превышает общий пробег'; en = 'NTRS'");
			Возврат Ложь;
		КонецЕсли;
		
		Если Окр(мПробегСпециальнойРаботы5, 1) > Окр(мПробегОбщий, 1) Тогда
			ТекстСообщения = Нстр("ru = 'Пробег спец. работы 5 превышает общий пробег'; en = 'NTRS'");
			Возврат Ложь;
		КонецЕсли;
		
		Если Окр(мПробегНаБуксире, 1) > Окр(мПробегОбщий, 1) Тогда
			ТекстСообщения = "Пробег на буксире превышает общий пробег";
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции //ПроверитьТаблицуВыработкиТС

//Функция проверяет таблицу простоев.
//Строка - текущая строка таблицы значений. Если значение не передано, то проверяется
//вся таблица, иначе - только строка.
//В случае успеха возвращается Истина, иначе - Ложь
Функция ПроверитьТаблицуПростоев()
	Результат = Истина;
	Для Каждого ТекСтрока Из Простои Цикл
		Если НачалоДня(ТекСтрока.НачалоПростоя) = '00010101' Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции //ПроверитьТаблицуПростоев

//Процедура проверяет таблицу з/п.
//В таблице удаляются строки, для которых нет водителей и сотрудников в п/л
//
Процедура ПроверитьТаблицуЗП()
	сч = 0;
	Пока сч  <= Зарплата.Количество() - 1 Цикл
		Если Зарплата[сч].Сотрудник <> Водитель1 И
			Зарплата[сч].Сотрудник <> Водитель2 И
			Зарплата[сч].Сотрудник <> Сотрудник1 И
			Зарплата[сч].Сотрудник <> Сотрудник2 Тогда
			Зарплата.Удалить(сч);
		Иначе	
			сч = сч + 1;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры //ПроверитьТаблицуЗП

//Функция проверяет ТТД по данному путевому листу
//Если ТТД нет, или есть непроведенные ТТД, то возвращается Ложь
Функция ПроверкаТТД(мТаблицаТТД, ПроизвольныеПараметрыВыработки = Неопределено, Знач ДопСообщениеРазделУчета = "") Экспорт
	мТаблицаТТД = уатОбщегоНазначения.уатТТДДляПЛ(Ссылка);
	
	ДопСообщениеРазделУчета = ?(ЗначениеЗаполнено(ДопСообщениеРазделУчета), ДопСообщениеРазделУчета, "выработки ТС");
	
	Если мТаблицаТТД.Количество() = 0 Тогда
		Если ПроизвольныеПараметрыВыработки = Неопределено Тогда
			Сообщить("Расчет " + ДопСообщениеРазделУчета + " по путевому листу №" + Номер + " не выполнен:
			|Для путевого листа не введены ТТД", СтатусСообщения.Внимание);
			Возврат Ложь;
		Иначе
			Сообщить("Расчет произвольных параметров выработки ТС по путевому листу №" + Номер + " не выполнен:
			|Для путевого листа не введены ТТД", СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ТекСтр из мТаблицаТТД Цикл
		Если Не ТекСтр.ТТД.Проведен Тогда
			Если ПроизвольныеПараметрыВыработки = Неопределено Тогда
				Сообщить("Расчет " + ДопСообщениеРазделУчета + " по путевому листу №" + Номер + " не выполнен:
				|Для путевого листа есть непроведенные ТТД", СтатусСообщения.Внимание);
				Возврат Ложь;
			Иначе
				Сообщить("Расчет произвольных параметров выработки ТС по путевому листу №" + Номер + " не выполнен:
				|Для путевого листа есть непроведенные ТТД", СтатусСообщения.Внимание);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции //ПроверкаТТД()

// Процедура запрашивает данные по ТС.
// Устанавливаются начальные данные по остаткам ГСМ, данные спидометра/счетчика, экипаж ТС и т.п.
//
// Параметры:
//	ОстатокТопливаВыезд - остаток топлива в баке ТС при выезде, перезаполняется при выполнении процедуры;
//	СоставТС - состав ТС (прицепы и доп. оборудование со своим баком);
//	флЗаполнитьВодителейПоУмолчанию - признак перезаполнения водителей при инициализации ТС (можно отключить)
//
Процедура ИнициализацияДанныхАвтомобиля(ОстатокТопливаВыезд = 0, СоставТС,
		флЗаполнитьВодителейПоУмолчанию = Истина) Экспорт
	РасходГСМ.Очистить();
	Прицепы.Очистить();
	
	Если ЗначениеЗаполнено(ТранспортноеСредство) Тогда
		
		ОстатокТопливаВыезд 	= уатОбщегоНазначения.уатОстатокГСМнаТС(ДатаВыезда, ТранспортноеСредство,
			ТранспортноеСредство.уатМодель.ОсновноеТопливо, Ссылка);
		ОстатокТопливаВозврат 	= 0;
		
		Если ЗначениеЗаполнено(ТранспортноеСредство.уатМодель.ОсновноеТопливо) Тогда
			НоваяСтрокаГСМ 						= РасходГСМ.Добавить();
			НоваяСтрокаГСМ.Активен 				= Истина;
			НоваяСтрокаГСМ.ТС 					= ТранспортноеСредство;
			НоваяСтрокаГСМ.ГСМ 					= ТранспортноеСредство.уатМодель.ОсновноеТопливо;
			НоваяСтрокаГСМ.ОстатокПриВыезде 	= ОстатокТопливаВыезд;
			НоваяСтрокаГСМ.ОстатокПриВозвращении = ОстатокТопливаВозврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТранспортноеСредство.уатМодель.ДополнительноеТопливо) Тогда
			НоваяСтрокаГСМ 					= РасходГСМ.Добавить();
			НоваяСтрокаГСМ.Активен 			= РаботаНаДвухВидахТоплива;
			НоваяСтрокаГСМ.ТС 				= ТранспортноеСредство;
			НоваяСтрокаГСМ.ГСМ 				= ТранспортноеСредство.уатМодель.ДополнительноеТопливо;
			НоваяСтрокаГСМ.ОстатокПриВыезде = уатОбщегоНазначения.уатОстатокГСМнаТС(ДатаВыезда,ТранспортноеСредство,
												НоваяСтрокаГСМ.ГСМ, Ссылка);
			НоваяСтрокаГСМ.ОстатокПриВозвращении = 0;
		КонецЕсли;
		
		//добавляем остатки ТЖ при выезде
		//а также и ТЖ, по которым учет норм ведется, но остатков нет
		тблОстаткиТЖнаТС = Документы.уатПутевойЛист.ОстаткиТЖнаТС(ТранспортноеСредство, ДатаВыезда);
		Для Каждого ТекСтрокаТЖ Из тблОстаткиТЖнаТС Цикл
			НоваяСтрокаГСМ 					= РасходГСМ.Добавить();
			НоваяСтрокаГСМ.ТС 				= ТранспортноеСредство;
			НоваяСтрокаГСМ.ГСМ 				= ТекСтрокаТЖ.ТЖ;
			НоваяСтрокаГСМ.ОстатокПриВыезде = ТекСтрокаТЖ.Количество;
			НоваяСтрокаГСМ.ОстатокПриВозвращении = 0;
		КонецЦикла;
		
		Для Каждого ТекТС из СоставТС Цикл
			Если ЗначениеЗаполнено(ТекТС) Тогда
				НоваяСтрокаПрицеп = Прицепы.Добавить();
				НоваяСтрокаПрицеп.ТС = ТекТС;
				Если ТекТС.уатМодель.НаличиеСпидометра Тогда
					НоваяСтрокаПрицеп.СчетчикМЧВыезда = уатОбщегоНазначения.уатТекущийСпидометр(ТекТС, ДатаВыезда);
				Иначе
					НоваяСтрокаПрицеп.СчетчикМЧВыезда = уатОбщегоНазначения.уатТекущийСчетчикМЧ(ТекТС, ДатаВыезда);
				КонецЕсли;
				НоваяСтрокаПрицеп.СчетчикМЧВозвращения = 0;
				
				Если ЗначениеЗаполнено(ТекТС.уатМодель.ОсновноеТопливо) И ТекТС.уатМодель.НаличиеТопливногоБака Тогда
					НоваяСтрокаГСМ = РасходГСМ.Добавить();
					НоваяСтрокаГСМ.Активен = Истина;
					НоваяСтрокаГСМ.ТС                    = ТекТС;
					НоваяСтрокаГСМ.ГСМ                   = ТекТС.уатМодель.ОсновноеТопливо;
					НоваяСтрокаГСМ.ОстатокПриВыезде      = уатОбщегоНазначения.уатОстатокГСМнаТС(ДатаВыезда, ТекТС,
															НоваяСтрокаГСМ.ГСМ, Ссылка);
					НоваяСтрокаГСМ.ОстатокПриВозвращении = 0;
				КонецЕсли;	
			КонецЕсли;
			
			//добавляем остатки ТЖ при выезде
			тблОстаткиТЖнаТС = Документы.уатПутевойЛист.ОстаткиТЖнаТС(ТекТС, ДатаВыезда);
			Для Каждого ТекСтрокаТЖ Из тблОстаткиТЖнаТС Цикл
				НоваяСтрокаГСМ 					= РасходГСМ.Добавить();
				НоваяСтрокаГСМ.ТС 				= ТекТС;
				НоваяСтрокаГСМ.ГСМ 				= ТекСтрокаТЖ.ТЖ;
				НоваяСтрокаГСМ.ОстатокПриВыезде = ТекСтрокаТЖ.Количество;
				НоваяСтрокаГСМ.ОстатокПриВозвращении = 0;
			КонецЦикла;
		КонецЦикла;
		
		Если ТранспортноеСредство.уатМодель.НаличиеСпидометра Тогда
			СпидометрВыезда = уатОбщегоНазначения.уатТекущийСпидометр(ТранспортноеСредство, ДатаВыезда);
		Иначе
			СпидометрВыезда = уатОбщегоНазначения.уатТекущийСчетчикМЧ(ТранспортноеСредство, ДатаВыезда);
		КонецЕсли;	
		
		//заполняем водителей
		Если флЗаполнитьВодителейПоУмолчанию Тогда
			Сотрудник2 = Неопределено;
			Сотрудник1 = Неопределено;
			Водитель2 = Неопределено;
			Водитель1 = Неопределено;
			
			СтруктураЭкипаж = уатЗащищенныеФункцииСервер.ЭкипажТСсУчетомГрафика(ТранспортноеСредство, ДатаВыезда,
				Организация, Смена);
			Водитель1 = СтруктураЭкипаж.Водитель;
			Водитель2 = СтруктураЭкипаж.Водитель2;
			Сотрудник1 = СтруктураЭкипаж.Сотрудник;
			Сотрудник2 = СтруктураЭкипаж.Сотрудник2;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(УсловиеРаботы) = Истина Тогда
			УсловиеРаботы = ТранспортноеСредство.уатОсновноеУсловиеРаботы;
		КонецЕсли;
		
		ВыдатьГорючее = ТранспортноеСредство.уатМодель.ОсновноеТопливо;
	Иначе
		СпидометрВыезда = 0;
	КонецЕсли;	
	
КонецПроцедуры // ИнициализацияДанныхАвтомобиля()

// Процедура удаляет строки из документы Заправки ГСМ, соответствующие данному п/л. 
// Если строк не осталось, то сам документ помечаем на удаление.
Процедура УдалитьЗаправку(вхЗаправка, вхТС = Неопределено, вхДата = Неопределено, вхКоличество = Неопределено) Экспорт
	
	Если вхТС = Неопределено Тогда
		
		мСтроки = вхЗаправка.Заправки.НайтиСтроки(Новый Структура("ПутевойЛист", Ссылка));
		
	Иначе
		
		мСтроки = вхЗаправка.Заправки.НайтиСтроки(Новый Структура("ПутевойЛист, ТС, Дата, Количество", Ссылка, вхТС,
			вхДата, вхКоличество));
		
	КонецЕсли;
	
	Для сч = 0 По мСтроки.Количество() - 1 Цикл
		
		ТекСтрока = мСтроки[сч];
		вхЗаправка.Заправки.Удалить(ТекСтрока);
		
	КонецЦикла;	
	
	//дЗаправкаГСМ.ПакетнаяОбработкаТиповыхДокументов = Ложь;
	Если вхЗаправка.Заправки.Количество() = 0 Тогда
		вхЗаправка.Записать();
		вхЗаправка.УстановитьПометкуУдаления(Истина);
	Иначе
		
		Если вхЗаправка.Проведен Тогда
			мРежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			мРежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		вхЗаправка.Записать(мРежимЗаписи);
		
	КонецЕсли;
КонецПроцедуры

// Процедура удаляет строки из документы ТТД, соответствующие данному п/л. 
// Если строк не осталось, то сам документ помечаем на удаление.
Процедура УдалитьТТД(вхТТД) Экспорт
	
	мСтроки = вхТТД.Выработка.НайтиСтроки(Новый Структура("ПутЛист", Ссылка));
	Для сч = 0 По мСтроки.Количество() - 1 Цикл
		вхТТД.Выработка.Удалить(мСтроки[сч]);
	КонецЦикла;	
	
	мСтроки = вхТТД.Стоимость.НайтиСтроки(Новый Структура("ПутЛист", Ссылка));
	Для сч = 0 По мСтроки.Количество() - 1 Цикл
		вхТТД.Стоимость.Удалить(мСтроки[сч]);
	КонецЦикла;	
	
	//вхТТД.ПакетнаяОбработкаТиповыхДокументов = Ложь;
	Если вхТТД.Выработка.Количество() = 0 Тогда
		вхТТД.Записать();
		вхТТД.УстановитьПометкуУдаления(Истина);
	Иначе
		
		Если вхТТД.Проведен Тогда
			мРежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			мРежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		вхТТД.Записать(мРежимЗаписи);
		
	КонецЕсли;
КонецПроцедуры

// Процедура удаляет строки из документы Билетный Лист, соответствующие данному п/л. 
// Если строк не осталось, то сам документ помечаем на удаление.
Процедура УдалитьБилетныйЛист(вхБилетныйЛист) Экспорт
	
	//Если вхТС = Неопределено Тогда
	
	мСтроки = вхБилетныйЛист.Билеты.НайтиСтроки(Новый Структура("ПутевойЛист", Ссылка));
	
	//Иначе
	//	
	//	мСтроки = вхБилетныйЛист.Билеты.НайтиСтроки(Новый Структура("ПутевойЛист, ТС, Дата, Количество", 
	//	Ссылка, вхТС, вхДата, вхКоличество));
	//	
	//КонецЕсли;
	
	Для сч = 0 По мСтроки.Количество() - 1 Цикл
		
		ТекСтрока = мСтроки[сч];
		вхБилетныйЛист.Билеты.Удалить(ТекСтрока);
		
	КонецЦикла;	
	
	Если вхБилетныйЛист.Билеты.Количество() = 0 Тогда
		вхБилетныйЛист.Записать();
		вхБилетныйЛист.УстановитьПометкуУдаления(Истина);
	Иначе
		
		Если вхБилетныйЛист.Проведен Тогда
			мРежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			мРежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		вхБилетныйЛист.Записать(мРежимЗаписи);
		
	КонецЕсли;
КонецПроцедуры

// Процедура удаляет строки из документы Билетный Лист, соответствующие данному п/л. 
// Если строк не осталось, то сам документ помечаем на удаление.
Процедура УдалитьПосадочнуюВедомость(вхПосадочнаяВедомость) Экспорт
	
	мСтроки = вхПосадочнаяВедомость.Билеты.НайтиСтроки(Новый Структура("ПутевойЛист", Ссылка));
	
	Для сч = 0 По мСтроки.Количество() - 1 Цикл
		
		ТекСтрока = мСтроки[сч];
		вхПосадочнаяВедомость.Билеты.Удалить(ТекСтрока);
		
	КонецЦикла;	
	
	Если вхПосадочнаяВедомость.Билеты.Количество() = 0 Тогда
		вхПосадочнаяВедомость.Записать();
		вхПосадочнаяВедомость.УстановитьПометкуУдаления(Истина);
	Иначе
		
		Если вхПосадочнаяВедомость.Проведен Тогда
			мРежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			мРежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		вхПосадочнаяВедомость.Записать(мРежимЗаписи);
		
	КонецЕсли;
КонецПроцедуры

// Процедура удаляет документы Выручка, соответствующие данному п/л. 
// Если строк не осталось, то сам документ помечаем на удаление.
Процедура УдалитьДокументыВыручка(вхВыручка) Экспорт
	
	вхВыручка.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры

//Процедура рассчитывает время по путевому листу
//
Процедура РасчитатьВременныеПараметры() Экспорт
	тблРабочееВремя = Документы.уатПутевойЛист.РасчетВремени(ДатаВыезда, ДатаВозвращения, Организация, РежимРаботыТС, Простои.Выгрузить());
	тблРабочееВремя.Свернуть("ВидВремени", "Продолжительность");
	
	//работу и ночные часы берем из таблицы рабочего времени
	мВремяВРаботе = 0;
	мВремяНочь = 0;
	Для Каждого ТекСтрокаРабВремя Из тблРабочееВремя Цикл
		//Если ТекСтрокаРабВремя.ВидВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Явка") Тогда
		Если ТекСтрокаРабВремя.ВидВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя") Тогда
			мВремяВРаботе = мВремяВРаботе + ТекСтрокаРабВремя.Продолжительность;
		ИначеЕсли ТекСтрокаРабВремя.ВидВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы") Тогда
			мВремяНочь = мВремяНочь + ТекСтрокаРабВремя.Продолжительность;
		КонецЕсли;
	КонецЦикла;
	
	//простои - из таблицы простоев
	мВремяВПростое = 0;
	мВремяВПростоеСВклДвигателем = 0;
	Для Каждого ТекСтрока Из Простои Цикл
		мВремяВПростое = мВремяВПростое + (ТекСтрока.ВремяПростоя - НачалоДня(ТекСтрока.ВремяПростоя));
		Если ТекСтрока.ВключенДвигатель Тогда
			мВремяВПростоеСВклДвигателем = мВремяВПростоеСВклДвигателем + (ТекСтрока.ВремяПростоя -
				НачалоДня(ТекСтрока.ВремяПростоя));
		КонецЕсли;
	КонецЦикла;
	
	//общее количество дней по ПЛ
	мКоличествоДней = (НачалоДня(ДатаВозвращения) - НачалоДня(ДатаВыезда))/86400 + 1;
	
	//время в наряде
	Если ДатаВозвращения - ДатаВыезда > 86400 Тогда //многодневный ПЛ
		Если ЗначениеЗаполнено(РежимРаботыТС) Тогда
			мПродолжительностьРабочегоДня = РежимРаботыТС.КонецРаботы - РежимРаботыТС.НачалоРаботы;
			Если РежимРаботыТС.НачалоРаботы <= РежимРаботыТС.КонецРаботы Тогда //дневной
				мПродолжительностьРабочегоДня = РежимРаботыТС.КонецРаботы - РежимРаботыТС.НачалоРаботы;
			Иначе //ночной
				мПродолжительностьРабочегоДня = РежимРаботыТС.КонецРаботы + 86400 - РежимРаботыТС.НачалоРаботы;
			КонецЕсли;
		Иначе
			мПродолжительностьРабочегоДня = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, "ПродолжительностьРабочегоДня") - '00010101';
			Если мПродолжительностьРабочегоДня = 0 Тогда
				мПродолжительностьРабочегоДня = 86400;
			КонецЕсли;
		КонецЕсли;
		
		мВремяВНаряде = ?(ДатаВыезда - НачалоДня(ДатаВыезда) > 86400 - мПродолжительностьРабочегоДня,
			86400 -	(ДатаВыезда - НачалоДня(ДатаВыезда)), мПродолжительностьРабочегоДня)
		+ ?(ДатаВозвращения - НачалоДня(ДатаВозвращения) > мПродолжительностьРабочегоДня,
			мПродолжительностьРабочегоДня, ДатаВозвращения - НачалоДня(ДатаВозвращения))
		+ мПродолжительностьРабочегоДня*((НачалоДня(ДатаВозвращения) -
			НачалоДня(ДатаВыезда))/86400 - 1);
	Иначе //однодневный ПЛ
		мВремяВНаряде = ДатаВозвращения - ДатаВыезда;
	КонецЕсли;
КонецПроцедуры

// Процедура для шин ТС определяет параметр выработки пробег общий
//
Процедура ВывестиПарметрыВыработкиШин(МассивАгрегатов)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Дата",   Новый Граница(ДатаЗакрытия, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ТС",     ВыработкаТС.ВыгрузитьКолонку("ТС"));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатУстановленныеАгрегатыСрезПоследних.УзелОбъектаЭксплуатации,
	|	уатУстановленныеАгрегатыСрезПоследних.ТранспортноеСредство
	|ПОМЕСТИТЬ Временная
	|ИЗ
	|	РегистрСведений.уатУстановленныеАгрегаты.СрезПоследних(
	|			&Дата,
	|			СостояниеАгрегата = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.УстановленоВРаботе)
	|				И ТранспортноеСредство В (&ТС)
	|				И ТипАгрегата = ЗНАЧЕНИЕ(Справочник.уатТипыАгрегатов.Шина)) КАК уатУстановленныеАгрегатыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатПутевойЛистВыработкаТС.ТС,
	|	Временная.УзелОбъектаЭксплуатации КАК Агрегат,
	|	уатПутевойЛистВыработкаТС.ПараметрВыработки,
	|	СУММА(уатПутевойЛистВыработкаТС.Количество) КАК Количество
	|ИЗ
	|	Временная КАК Временная
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатПутевойЛист.ВыработкаТС КАК уатПутевойЛистВыработкаТС
	|		ПО (уатПутевойЛистВыработкаТС.ТС = Временная.ТранспортноеСредство)
	|ГДЕ
	|	уатПутевойЛистВыработкаТС.Ссылка = &Ссылка
	|	И уатПутевойЛистВыработкаТС.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПробегОбщий)
	|
	|СГРУППИРОВАТЬ ПО
	|	Временная.УзелОбъектаЭксплуатации,
	|	уатПутевойЛистВыработкаТС.ПараметрВыработки,
	|	уатПутевойЛистВыработкаТС.ТС";
	
	Выборка = Запрос.Выполнить().Выбрать(); 
	
	ВыработкаШин = Новый ТаблицаЗначений;
	ВыработкаШин = ВыработкаТС.Выгрузить();
	ВыработкаШин.Свернуть("ТС,ПараметрВыработки","Количество");
	
	Пока Выборка.Следующий() Цикл
		СтрокаТЧ = ВыработкаШин.Найти(Выборка.ПараметрВыработки, "ПараметрВыработки");
		Если СтрокаТЧ <> Неопределено Тогда
			СтруктураАгрегатов = Новый Структура;
			СтруктураАгрегатов.Вставить("ТС",                Выборка.ТС);
			СтруктураАгрегатов.Вставить("Агрегат",           Выборка.Агрегат);
			СтруктураАгрегатов.Вставить("ПараметрВыработки", Выборка.ПараметрВыработки);
			СтруктураАгрегатов.Вставить("Количество",        СтрокаТЧ.Количество);
			МассивАгрегатов.Добавить(СтруктураАгрегатов);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает массив агрегатов установленных на ТС с их параметрами выработки
//
Функция ВывестиПараметрВыработкиПользовательскихАгрегатов() Экспорт 
	
	МассивАгрегатов = Новый Массив;
	
	СписокПередопределенныхАгрегатов = Новый СписокЗначений;
	СписокПередопределенныхАгрегатов.Добавить(Справочники.уатТипыАгрегатов.Аккумулятор);
	СписокПередопределенныхАгрегатов.Добавить(Справочники.уатТипыАгрегатов.Аптечка);
	СписокПередопределенныхАгрегатов.Добавить(Справочники.уатТипыАгрегатов.Шина);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Дата",              Новый Граница(ДатаЗакрытия, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("СостояниеАгрегата", Перечисления.уатСостоянияАгрегатов.УстановленоВРаботе);
	Запрос.УстановитьПараметр("ТС",                ВыработкаТС.ВыгрузитьКолонку("ТС"));
	Запрос.УстановитьПараметр("ТипАгрегата",       СписокПередопределенныхАгрегатов);
	Запрос.УстановитьПараметр("Ссылка",            Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатУстановленныеАгрегатыСрезПоследних.УзелОбъектаЭксплуатации,
	|	уатУстановленныеАгрегатыСрезПоследних.ТранспортноеСредство,
	|	уатАгрегатыТС.ПараметрВыработки КАК ПараметрВыработки
	|ПОМЕСТИТЬ Временная
	|ИЗ
	|	РегистрСведений.уатУстановленныеАгрегаты.СрезПоследних(
	|			&Дата,
	|			СостояниеАгрегата = &СостояниеАгрегата
	|				И ТранспортноеСредство В (&ТС)
	|				И НЕ ТипАгрегата В (&ТипАгрегата)) КАК уатУстановленныеАгрегатыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатАгрегатыТС КАК уатАгрегатыТС
	|		ПО уатУстановленныеАгрегатыСрезПоследних.УзелОбъектаЭксплуатации = уатАгрегатыТС.УзелОбъектаЭксплуатации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатПутевойЛистВыработкаТС.ТС,
	|	Временная.УзелОбъектаЭксплуатации КАК Агрегат,
	|	уатПутевойЛистВыработкаТС.ПараметрВыработки,
	|	СУММА(уатПутевойЛистВыработкаТС.Количество) КАК Количество
	|ИЗ
	|	Временная КАК Временная
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатПутевойЛист.ВыработкаТС КАК уатПутевойЛистВыработкаТС
	|		ПО (уатПутевойЛистВыработкаТС.ТС = Временная.ТранспортноеСредство)
	|			И (уатПутевойЛистВыработкаТС.ПараметрВыработки = Временная.ПараметрВыработки)
	|ГДЕ
	|	уатПутевойЛистВыработкаТС.Ссылка = &Ссылка
	|	И уатПутевойЛистВыработкаТС.ПараметрВыработки В
	|			(ВЫБРАТЬ
	|				Временная.ПараметрВыработки
	|			ИЗ
	|				Временная)
	|
	|СГРУППИРОВАТЬ ПО
	|	Временная.УзелОбъектаЭксплуатации,
	|	уатПутевойЛистВыработкаТС.ТС,
	|	уатПутевойЛистВыработкаТС.ПараметрВыработки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыработкаАгрегатов = Новый ТаблицаЗначений;
	ВыработкаАгрегатов = ВыработкаТС.Выгрузить();
	ВыработкаАгрегатов.Свернуть("ТС,ПараметрВыработки","Количество");
	
	Пока Выборка.Следующий() Цикл
		СтрокаТЧ = ВыработкаАгрегатов.Найти(Выборка.ПараметрВыработки,"ПараметрВыработки");
		Если СтрокаТЧ <> Неопределено Тогда
			СтруктураАгрегатов = Новый Структура;
			СтруктураАгрегатов.Вставить("ТС",                Выборка.ТС);
			СтруктураАгрегатов.Вставить("Агрегат",           Выборка.Агрегат);
			СтруктураАгрегатов.Вставить("ПараметрВыработки", Выборка.ПараметрВыработки);
			СтруктураАгрегатов.Вставить("Количество",        СтрокаТЧ.Количество);
			МассивАгрегатов.Добавить(СтруктураАгрегатов);
		КонецЕсли;
	КонецЦикла;
	
	ВывестиПарметрыВыработкиШин(МассивАгрегатов);
	
	Возврат МассивАгрегатов;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКопировании(ОбъектКопирования)
	
	//РазностьДатВыздаВозврата = ОбъектКопирования.ДатаВозвращения - ОбъектКопирования.ДатаВыезда;
	
	Дата = ТекущаяДата();
	//ДатаВыезда = ТекущаяДата();
	//ДатаВозвращения = ДатаВыезда
	ДатаВыезда = Неопределено;
	ДатаВозвращения = Неопределено;
	
	//уатОбщегоНазначенияТиповые.ЗаполнитьШапкуДокумента(ЭтотОбъект, ПользователиКлиентСервер.ТекущийПользователь());
	
	Прицепы.Очистить();
	РасходГСМ.Очистить();
	ВыработкаСотрудников.Очистить();
	ВыработкаТС.Очистить();
	Зарплата.Очистить();
	Простои.Очистить();
	
	ТекДата = ТекущаяДата();
	
	Для Каждого ТексТрока из Задание Цикл
		Если ЗначениеЗаполнено(ТексТрока.ВремяПрибытия) И НачалоДня(ТексТрока.ВремяПрибытия) < НачалоДня(ТекДата) Тогда
			ТексТрока.ВремяПрибытия = НачалоДня(ТекДата)+ (ТексТрока.ВремяПрибытия - НачалоДня(ТексТрока.ВремяПрибытия));
		КонецЕсли;
		Если ЗначениеЗаполнено(ТексТрока.ВремяУбытия) И НачалоДня(ТексТрока.ВремяУбытия) < НачалоДня(ТекДата) Тогда 
			ТексТрока.ВремяУбытия = НачалоДня(ТекДата) + (ТексТрока.ВремяУбытия - НачалоДня(ТексТрока.ВремяУбытия));
		КонецЕсли;
	КонецЦикла;
	
	СпидометрВозвращения = 0;
	ВыдатьГорючее = Неопределено;
	ВыдатьКоличествоГорючего = 0;
	ВремяРаботыОтопителя = 0;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументОбъект.уатМаршрутныйЛист") 
			Или ТипЗнч(Основание) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
		Дата = ТекущаяДата();
		Рассчитан = Ложь;
		
		ИспользованиеСтроитРабот = уатИнтерфейсВзаимодействияСERPВызовСервера.уатЗначениеФункциональнойОпции("уатОбъединеннаяКонфигурацияСУСО");
		
		ДокументОснование = Основание.Ссылка;
		
		Организация = Основание.Организация;
		ТранспортноеСредство = Основание.ТС;
		Водитель1 = Основание.Водитель1;
		Водитель2 = Основание.Водитель2;
		Сотрудник1 = Основание.Сотрудник1;
		Сотрудник2 = Основание.Сотрудник2;
		
		ПлановоеВремяВыездаМЛ = Документы.уатМаршрутныйЛист.ПолучитьВремяОтправленияПлан(ДокументОснование);
		ПлановоеВремяВозвратаМЛ = Документы.уатМаршрутныйЛист.ПолучитьВремяВозвратаПлан(ДокументОснование);
		
		Если ЗначениеЗаполнено(Основание.ТС.уатОсновнойРежимРаботы) Тогда
			ДатаВыезда = НачалоДня(?(ПлановоеВремяВыездаМЛ = '00010101', Основание.Дата, ПлановоеВремяВыездаМЛ))
				+ (Основание.ТС.уатОсновнойРежимРаботы.НачалоРаботы - '00010101');
			ДатаВозвращения = НачалоДня(?(ПлановоеВремяВыездаМЛ = '00010101', Основание.Дата, ПлановоеВремяВыездаМЛ))
				+ (Основание.ТС.уатОсновнойРежимРаботы.КонецРаботы - '00010101');
		Иначе
			Если ЗначениеЗаполнено(ПлановоеВремяВыездаМЛ) И ЗначениеЗаполнено(ПлановоеВремяВозвратаМЛ) Тогда
				ДатаВыезда = ПлановоеВремяВыездаМЛ;
				ДатаВозвращения = ПлановоеВремяВозвратаМЛ;
			Иначе
				ДатаВыезда = НачалоДня(?(ПлановоеВремяВыездаМЛ = '00010101', Основание.Дата, ПлановоеВремяВыездаМЛ))
					+ (уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
					ПланыВидовХарактеристик.уатПраваИНастройки.ВремяВыездаПЛ) - '00010101');
				ДатаВозвращения = НачалоДня(?(ПлановоеВремяВыездаМЛ = '00010101', Основание.Дата, ПлановоеВремяВыездаМЛ))
					+ (уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
					ПланыВидовХарактеристик.уатПраваИНастройки.ВремяВозращенияПЛ) - '00010101');
			КонецЕсли;
		КонецЕсли;
		Если ДатаВозвращения <= ДатаВыезда Тогда //ночной режим работы
			ДатаВозвращения = НачалоДня(ДатаВыезда) + 86400 + (ДатаВозвращения - НачалоДня(ДатаВозвращения));
		КонецЕсли;
		
		ДатаЗакрытия = ?(ДатаВозвращения > ДатаВыезда, ДатаВозвращения - 1, ДатаВозвращения);
		
		Если Основание.Заказы.Количество() > 0 тогда
			тзПункты = ПолучитьРассточниеПоМЛ(Основание);
			ПлановыеДатыПоЗаказам = Документы.уатМаршрутныйЛист.ПолучитьПлановыеДатыПоЗаказам(Основание);
			
			// получим строки с погрузкой
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ТипТочкиМаршрута", Перечисления.уатТипыТочекМаршрута.Погрузка);
			НайденныеСтроки = Основание.Заказы.НайтиСтроки(ПараметрыОтбора);
			МассивДобавленныхЗаказов = Новый Массив;
			
			флМЛ_РучноеЗаполнение = (Основание.ВидОперации = Перечисления.уатВидыОперацийМаршрутныйЛист.Произвольный);
			
			Для Каждого ТекСтрокаЗаказа Из НайденныеСтроки Цикл
				Если флМЛ_РучноеЗаполнение Или (Не флМЛ_РучноеЗаполнение И МассивДобавленныхЗаказов.Найти(ТекСтрокаЗаказа.ЗаказГрузоотправителя) = Неопределено) Тогда
					Если Не флМЛ_РучноеЗаполнение Тогда 
						МассивДобавленныхЗаказов.Добавить(ТекСтрокаЗаказа.ЗаказГрузоотправителя);
						
						// берём итоги по весу и объему
						ПарОтбора = Новый Структура();
						ПарОтбора.Вставить("ЗаказГрузоотправителя", ТекСтрокаЗаказа.ЗаказГрузоотправителя);
						ПарОтбора.Вставить("ТипТочкиМаршрута", Перечисления.уатТипыТочекМаршрута.Погрузка);
						НайдСтроки = Основание.Заказы.НайтиСтроки(ПарОтбора);
						
						ВесГрузаТонн = 0;
						ОбъемГруза   = 0;
						
						Для Каждого ТекСтр Из НайдСтроки Цикл
							ВесГрузаТонн = ВесГрузаТонн + ТекСтр.ВесБрутто/1000;
							ОбъемГруза   = ОбъемГруза + ТекСтр.Объем;
						КонецЦикла;
					Иначе 
						ВесГрузаТонн = ТекСтрокаЗаказа.ВесБрутто / 1000;
						ОбъемГруза   = ТекСтрокаЗаказа.Объем;
					КонецЕсли;
					
					НоваяСтрока = Задание.Добавить();
					
					Если ЗначениеЗаполнено(ТекСтрокаЗаказа.ЗаказГрузоотправителя) Тогда
						НоваяСтрока.АдресПрибытия = ТекСтрокаЗаказа.ЗаказГрузоотправителя.АдресОтправления;
						НоваяСтрока.АдресУбытия   = ТекСтрокаЗаказа.ЗаказГрузоотправителя.АдресНазначения;
					Иначе
						НоваяСтрока.АдресПрибытия = ТекСтрокаЗаказа.Пункт;
					КонецЕсли;
					
					СтрокаЗаказа = ПлановыеДатыПоЗаказам.Найти(ТекСтрокаЗаказа.ЗаказГрузоотправителя);
					Если Не СтрокаЗаказа = Неопределено Тогда 
						НоваяСтрока.ВремяПрибытия = СтрокаЗаказа.ПрибытиеПлан;
						НоваяСтрока.ВремяУбытия   = СтрокаЗаказа.УбытиеПлан;
					ИначеЕсли СтрокаЗаказа = Неопределено И флМЛ_РучноеЗаполнение Тогда 
						НоваяСтрока.ВремяПрибытия = ТекСтрокаЗаказа.ПрибытиеПлан;
					КонецЕсли;
					
					// время убытия получим из строки с разгрузкой по текущему заказу
					ПараметрыОтбора = Новый Структура;
					ПараметрыОтбора.Вставить("ЗаказГрузоотправителя", ТекСтрокаЗаказа.ЗаказГрузоотправителя);
					ПараметрыОтбора.Вставить("ТипТочкиМаршрута", Перечисления.уатТипыТочекМаршрута.Разгрузка);
					НайденныеСтроки = Основание.Заказы.НайтиСтроки(ПараметрыОтбора);
					
					Если ТекСтрокаЗаказа.ЗаказГрузоотправителя.Пустая() Тогда
						НоваяСтрока.Контрагент = ТекСтрокаЗаказа.Контрагент;
					Иначе
						НоваяСтрока.Контрагент = ТекСтрокаЗаказа.ЗаказГрузоотправителя.Контрагент;
					КонецЕсли;
					
					Если ТипЗнч(ТекСтрокаЗаказа.ЗаказГрузоотправителя.Контрагент) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
						НоваяСтрока.Подразделение = ТекСтрокаЗаказа.ЗаказГрузоотправителя.Контрагент;
					КонецЕсли;
					
					Если ИспользованиеСтроитРабот И ТекСтрокаЗаказа.ЗаказГрузоотправителя.РаботаТехникиНаОбъектеСтроительства Тогда
						НоваяСтрока.ОбъектСтроительства = ТекСтрокаЗаказа.ЗаказГрузоотправителя.ОбъектСтроительства;
						НоваяСтрока.СценарийПланирования = ТекСтрокаЗаказа.ЗаказГрузоотправителя.СценарийПланированияСтроительства;
						НоваяСтрока.СтроительнаяРабота = ТекСтрокаЗаказа.ЗаказГрузоотправителя.СтроительнаяРабота;
					КонецЕсли;
					
					НоваяСтрока.Номенклатура = ТекСтрокаЗаказа.Номенклатура;
					
					НоваяСтрока.КоличествоТонн = ВесГрузаТонн;
					НоваяСтрока.Объем          = ОбъемГруза;
					
					
					массивРасст = тзПункты.НайтиСтроки(Новый Структура("Заказ, Пункт1, Пункт2, флКонечныйЗаказ",ТекСтрокаЗаказа.ЗаказГрузоотправителя, НоваяСтрока.АдресПрибытия, НоваяСтрока.АдресУбытия, Истина));
					Если массивРасст.Количество() <> 0 Тогда 
						ТекРасстДляЗаполнения = массивРасст[0].Расстояние;
						ТекВремяДляЗаполнения = массивРасст[0].Время;
					КонецЕсли;
					
					Если ВесГрузаТонн > 0 Тогда
						НоваяСтрока.КоличествоКмГруз = ТекРасстДляЗаполнения;
					Иначе
						НоваяСтрока.КоличествоКмПорожний = ТекРасстДляЗаполнения;
					КонецЕсли;
					
					НоваяСтрока.КоличествоЧасов = ТекВремяДляЗаполнения;
					НоваяСтрока.КоличествоЕздок = 1;
					НоваяСтрока.ВидПеревозки = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Основание.Организация, "ОсновнойВидПеревозок");
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументОбъект.уатЗаказГрузоотправителя") Или
			ТипЗнч(Основание) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
		Дата = ТекущаяДата();
		Рассчитан = Ложь;
		
		ИспользованиеСтроитРабот = уатИнтерфейсВзаимодействияСERPВызовСервера.уатЗначениеФункциональнойОпции("уатОбъединеннаяКонфигурацияСУСО");
		
		ДокументОснование = Основание.Ссылка;
		
		Организация = Основание.Организация;
		ДатаВыезда = НачалоДня(Основание.ОтправлениеС) +
			(уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
				ПланыВидовХарактеристик.уатПраваИНастройки.ВремяВыездаПЛ) - '00010101');
		ДатаВозвращения = НачалоДня(Основание.ОтправлениеС) +
			(уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
				ПланыВидовХарактеристик.уатПраваИНастройки.ВремяВозращенияПЛ) - '00010101');
		Если ДатаВозвращения <= ДатаВыезда Тогда //ночной режим работы
			ДатаВозвращения = НачалоДня(ДатаВыезда) + 86400 + (ДатаВозвращения - НачалоДня(ДатаВозвращения));
		КонецЕсли;
		
		ВремяПрибытия = ДатаВозвращения;
		
		Если ЗначениеЗаполнено(Основание.АдресНазначения) Или ЗначениеЗаполнено(Основание.АдресОтправления) Тогда 
			//если есть строки заказа (а они должны быть) то добавим груз из 1-й строки с суммарным весом
			Если Основание.Товары.Количество() > 0 Тогда
				НоваяСтрока = Задание.Добавить();                                                       
				НоваяСтрока.Контрагент = Основание.Контрагент;
				
				НоваяСтрока.АдресПрибытия = Основание.АдресОтправления;
				НоваяСтрока.ВремяПрибытия = ДатаВыезда;
				
				НоваяСтрока.АдресУбытия = Основание.АдресНазначения;
				НоваяСтрока.ВремяУбытия = ВремяПрибытия;
				
				НоваяСтрока.Номенклатура   = Основание.Товары[0].Номенклатура;
				НоваяСтрока.КоличествоТонн = Основание.Товары.Итог("ВесБрутто") / 1000;
				НоваяСтрока.Объем		   = Основание.Товары.Итог("Объем");
				
				НоваяСтрока.КоличествоЕздок = 1;
				Если ЗначениеЗаполнено(НоваяСтрока.АдресУбытия) 
					И ЗначениеЗаполнено(НоваяСтрока.АдресПрибытия) Тогда
					мсвПункты = Новый Массив();
					мсвПункты.Добавить(Новый Структура("Пункт1, Пункт2", 
						НоваяСтрока.АдресПрибытия, 
						НоваяСтрока.АдресУбытия));
					уатЗащищенныеФункцииСервер.РассчитатьТаблицуРасстояниеВремяМеждуПунктами(мсвПункты);
					НоваяСтрока.КоличествоКмГруз = мсвПункты[0].Расстояние;
					НоваяСтрока.КоличествоЧасов  = мсвПункты[0].Время;
				КонецЕсли;
				
				НоваяСтрока.ВидПеревозки = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Основание.Организация, "ОсновнойВидПеревозок");
				
				Если ТипЗнч(Основание.Контрагент) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
					НоваяСтрока.Подразделение = Основание.Контрагент;
				КонецЕсли;
				
			ИначеЕсли Основание.Услуги.Количество() > 0 Тогда
				НоваяСтрока = Задание.Добавить();                                                       
				НоваяСтрока.Контрагент = Основание.Контрагент;
				
				НоваяСтрока.АдресПрибытия = Основание.АдресОтправления;
				НоваяСтрока.ВремяПрибытия = ДатаВыезда;
				
				НоваяСтрока.АдресУбытия = Основание.АдресНазначения;
				НоваяСтрока.ВремяУбытия = ВремяПрибытия;
				
				НоваяСтрока.КоличествоЕздок = 1;
				Если ЗначениеЗаполнено(НоваяСтрока.АдресУбытия) 
					И ЗначениеЗаполнено(НоваяСтрока.АдресПрибытия) Тогда
					мсвПункты = Новый Массив();
					мсвПункты.Добавить(Новый Структура("Пункт1, Пункт2", 
						НоваяСтрока.АдресПрибытия, 
						НоваяСтрока.АдресУбытия));
					уатЗащищенныеФункцииСервер.РассчитатьТаблицуРасстояниеВремяМеждуПунктами(мсвПункты);
					НоваяСтрока.КоличествоКмГруз = мсвПункты[0].Расстояние;
					НоваяСтрока.КоличествоЧасов  = мсвПункты[0].Время;
				КонецЕсли;

				НоваяСтрока.ВидПеревозки = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Основание.Организация, "ОсновнойВидПеревозок");
				
				Если ТипЗнч(Основание.Контрагент) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
					НоваяСтрока.Подразделение = Основание.Контрагент;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ИспользованиеСтроитРабот И Основание.РаботаТехникиНаОбъектеСтроительства Тогда
				НоваяСтрока.ОбъектСтроительства = Основание.ОбъектСтроительства;
				НоваяСтрока.СценарийПланирования = Основание.СценарийПланированияСтроительства;
				НоваяСтрока.СтроительнаяРабота = Основание.СтроительнаяРабота;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументОбъект.ЗаданиеНаПеревозку") 
			Или ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаданиеНаПеревозку") Тогда
		Дата              = ТекущаяДата();
		ДатаЗакрытия      = ТекущаяДата();
		Рассчитан         = Ложь;
		ДокументОснование = Основание.Ссылка;
		Комментарий       = Основание.Комментарий;
		Водитель1         = ПолучитьСотрудникаПоФизЛицу(Основание.Водитель);
		Сотрудник1        = ПолучитьСотрудникаПоФизЛицу(Основание.КурьерЭкспедитор);
		ДатаВыезда        = ?(ЗначениеЗаполнено(Основание.ДатаВремяРейсаФактС), Основание.ДатаВремяРейсаФактС, Основание.ДатаВремяРейсаПланС);
		ДатаВозвращения   = ?(ЗначениеЗаполнено(Основание.ДатаВремяРейсаФактПо), Основание.ДатаВремяРейсаФактПо, Основание.ДатаВремяРейсаПланПо);
		
		Если Не Основание.ТранспортноеСредство = Неопределено 
				И ЗначениеЗаполнено(Основание.ТранспортноеСредство) 
				И ТипЗнч(Основание.ТранспортноеСредство) = Тип("СправочникСсылка.ТранспортныеСредства") Тогда 
			Организация          = Основание.ТранспортноеСредство.уатОрганизация;
			ТранспортноеСредство = Основание.ТранспортноеСредство;
		КонецЕсли;
		
		Для Каждого СтрокаРаспоряжения Из Основание.Распоряжения Цикл 
			СтрокаЗадания = Задание.Добавить();
			СтрокаЗадания.ВремяПрибытия   = ДатаВыезда;
			СтрокаЗадания.ВремяУбытия     = ДатаВозвращения;
			СтрокаЗадания.Выполнено       = СтрокаРаспоряжения.Доставлено;
			СтрокаЗадания.КоличествоЕздок = 1;
			СтрокаЗадания.КоличествоТонн  = СтрокаРаспоряжения.Вес;
			СтрокаЗадания.Объем           = СтрокаРаспоряжения.Объем;
			
			#Если Сервер Тогда
				СтрокаЗадания.КоличествоТонн  = СтрокаРаспоряжения.Вес * НоменклатураСервер.КоэффициентПересчетаВТонны(Константы.ЕдиницаИзмеренияВеса.Получить());
				СтрокаЗадания.Объем           = СтрокаРаспоряжения.Объем * НоменклатураСервер.КоэффициентПересчетаВКубическиеМетры(Константы.ЕдиницаИзмеренияОбъема.Получить());
			#КонецЕсли
			
			СтрокиМаршрута = Основание.Маршрут.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаРаспоряжения.КлючСвязи));
			Если СтрокиМаршрута.Количество() Тогда 
				СтрокаЗадания.АдресПрибытия = СтрокиМаршрута[0].Адрес;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//Рарус Владимир Подрезов
	Если ЗначениеЗаполнено(Подразделение) Тогда
		СтруктураОЛ = РегистрыСведений.пкОтветственныеЛицаПутевыхЛистовПодразделений.Получить(Новый Структура("Подразделение", Подразделение));
		Если НЕ ЗначениеЗаполнено(ОсмотрелВрач) Тогда
			ОсмотрелВрач = СтруктураОЛ.Врач;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ВыдалДиспетчер) Тогда
			ВыдалДиспетчер = СтруктураОЛ.Диспетчер;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ВыпустилМеханик) Тогда
			ВыпустилМеханик = СтруктураОЛ.Механик;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПринялДиспетчер) Тогда
			ПринялДиспетчер = СтруктураОЛ.Диспетчер;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПринялМеханик) Тогда
			ПринялМеханик = СтруктураОЛ.Механик;
		КонецЕсли;
	КонецЕсли;
//Рарус Владимир Подрезов Конец

КонецПроцедуры                                                                         

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ЗапретПроведенияПЛприНаличииИстекшихДокументов) Тогда
		мДниДоОкончанияДействияДокументовТС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
			Организация, 
			ПланыВидовХарактеристик.уатПраваИНастройки.ДниДоОкончанияДействияДокументовТС
		);
		
		мДниДоОкончанияДействияДокументовВодителей = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
			Организация, 
			ПланыВидовХарактеристик.уатПраваИНастройки.ДниДоОкончанияДействияДокументовВодителей
		);
		
		Если уатОбщегоНазначения.уатПросроченныеДокументыТС(Дата, мДниДоОкончанияДействияДокументовТС, ТранспортноеСредство) Тогда 
			ТекстОшибки = "У ТС """ + ТранспортноеСредство + """ есть документы с истекшим сроком действия.";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, Отказ);
		КонецЕсли;
		
		Для Каждого ТекСтрока Из Прицепы Цикл
			Если уатОбщегоНазначения.уатПросроченныеДокументыТС(Дата, мДниДоОкончанияДействияДокументовТС, ТекСтрока.ТС) Тогда 
				ТекстОшибки = "У прицепа/оборудования """ + ТекСтрока.ТС + """ есть документы с истекшим сроком действия.";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, Отказ);
			КонецЕсли;
		КонецЦикла;
		
		Если уатОбщегоНазначения.уатПросроченныеДокументыВодителя(Дата, мДниДоОкончанияДействияДокументовВодителей, Водитель1) Тогда 
			ТекстОшибки = "У водителя """ + Водитель1 + """ есть документы с истекшим сроком действия.";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, Отказ);
		КонецЕсли;
		
		Если уатОбщегоНазначения.уатПросроченныеДокументыВодителя(Дата, мДниДоОкончанияДействияДокументовВодителей, Водитель2) Тогда 
			ТекстОшибки = "У водителя """ + Водитель2 + """ есть документы с истекшим сроком действия.";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, Отказ);
		КонецЕсли;
		
		Если уатОбщегоНазначения.уатПросроченныеДокументыВодителя(Дата, мДниДоОкончанияДействияДокументовВодителей, Сотрудник1) Тогда 
			ТекстОшибки = "У сотрудника """ + Сотрудник1 + """ есть документы с истекшим сроком действия.";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, Отказ);
		КонецЕсли;
		
		Если уатОбщегоНазначения.уатПросроченныеДокументыВодителя(Дата, мДниДоОкончанияДействияДокументовВодителей, Сотрудник2) Тогда 
			ТекстОшибки = "У сотрудника """ + Сотрудник2 + """ есть документы с истекшим сроком действия.";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Инициализация дополнительных свойств для проведения документа.
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.уатПутевойЛист.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета. Движения которые выполняются всегда
	уатПроведение.ОтразитьСостояниеТС(ДополнительныеСвойства, Движения, Отказ);
	уатПроведение.ОтразитьПланированиеРаботыТС(ДополнительныеСвойства, Движения, Отказ);
	
	// Отражение в разделах учета. Часть движений которые выполняются только когда путевой лист рассчитан
	Если Рассчитан Тогда 
		уатПроведение.ОтразитьСчетчикиТС(ДополнительныеСвойства, Движения, Отказ);
		уатПроведение.ОтразитьВыработкуТС(ДополнительныеСвойства, Движения, Отказ);
		уатПроведение.ОтразитьВыработкуСотрудников(ДополнительныеСвойства, Движения, Отказ);
		уатПроведение.ОтразитьПростои(ДополнительныеСвойства, Движения, Отказ);
		уатПроведение.ОтразитьОстаткиГСМНаТС(ДополнительныеСвойства, Движения, Отказ);
		уатПроведение.ОтразитьРасходГСМНаТС(ДополнительныеСвойства, Движения, Отказ);
		уатПроведение.ОтразитьПартииТЖ(ДополнительныеСвойства, Движения, Отказ);
		Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, "ИспользоватьУчетНормативногоРасходаТехЖидкостей") Тогда
			уатПроведение.ОтразитьРасходТЖ(ДополнительныеСвойства, Движения, Отказ);
		КонецЕсли;
		уатПроведение.ОтразитьИзносПробегШин(ДополнительныеСвойства, Движения, Отказ);
		уатПроведение.ОтразитьВыработкуАгрегатов(ДополнительныеСвойства, Движения, Отказ);
		Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,	"УчетРабочегоВремени") Тогда
			уатПроведение.ОтразитьРабочееВремяРаботниковОрганизаций(ДополнительныеСвойства, Движения, Отказ);
		КонецЕсли;
		уатПроведение_проф.ОтразитьЗатратыТС(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;
	
	// Запись наборов записей.
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.уатПутевойЛист.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	//режим записи - всегда проведение
	Если РежимЗаписи = РежимЗаписиДокумента.Запись И (НЕ Отказ) и (Не ПометкаУдаления) Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	
	//в случае если дата закрытия равна дате выезда, то прибавим 1 сек для корректного расчета ГСМ
	Если ДатаЗакрытия = ДатаВыезда Тогда
		ДатаЗакрытия = ДатаЗакрытия + 1;
	КонецЕсли;
	
	Если ПометкаУдаления Тогда
		//Удаляем данные в заправках, ТТД и билетных листах
		мТаблицаЗаправкиГСМ = уатОбщегоНазначения.уатПолучитьЗаправкиДляПЛ(Ссылка);
		мТаблицаСливыГСМ    = уатОбщегоНазначения.уатПолучитьСливыДляПЛ(Ссылка);
		мТаблицаСливыНаТС   = уатОбщегоНазначения.уатПолучитьСливыНаТСДляПЛ(Ссылка);
		мТаблицаТТД         = уатОбщегоНазначения.уатТТДДляПЛ(Ссылка);
		
		Попытка
			мТаблицаБилетныеЛисты = Вычислить("уатПолучитьБилетныеЛистыДляПЛ(Ссылка)");
		Исключение
			мТаблицаБилетныеЛисты = Новый ТаблицаЗначений;
		КонецПопытки;
		
		Попытка
			мТаблицаВыручка = Вычислить("уатПолучитьВыручкуДляПЛ(Ссылка)");
		Исключение
			мТаблицаВыручка = Новый ТаблицаЗначений;
		КонецПопытки;
		
		Для Каждого ТекСтрока Из мТаблицаЗаправкиГСМ Цикл
			УдалитьЗаправку(ТекСтрока.Ссылка.ПолучитьОбъект());
		КонецЦикла;
		
		Для Каждого ТекСтрока Из мТаблицаСливыГСМ Цикл
			ДокСлив = ТекСтрока.Ссылка.ПолучитьОбъект();
			ДокСлив.ПутевойЛист = Неопределено;
			ДокСлив.Записать();
			Если Не ЗначениеЗаполнено(ДокСлив.ПутевойЛистПриемник) Тогда 
				ДокСлив.УстановитьПометкуУдаления(Истина);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекСтрока Из мТаблицаСливыНаТС Цикл
			ДокСлив = ТекСтрока.Ссылка.ПолучитьОбъект();
			ДокСлив.ПутевойЛистПриемник = Неопределено;
			ДокСлив.Записать();
			Если Не ЗначениеЗаполнено(ДокСлив.ПутевойЛист) Тогда 
				ДокСлив.УстановитьПометкуУдаления(Истина);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекСтрока Из мТаблицаТТД Цикл
			УдалитьТТД(ТекСтрока.ТТД.ПолучитьОбъект());
		КонецЦикла;
		
		Для Каждого ТекСтрока Из мТаблицаБилетныеЛисты Цикл
			УдалитьБилетныйЛист(ТекСтрока.Ссылка.ПолучитьОбъект());
		КонецЦикла;
		
		Для Каждого ТекСтрока Из мТаблицаВыручка Цикл
			УдалитьДокументыВыручка(ТекСтрока.Ссылка.ПолучитьОбъект());
		КонецЦикла;
	КонецЕсли;
	
	//Сброс флага Рассчитан
	Если НЕ Отказ И РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения И Рассчитан Тогда
		Рассчитан = Ложь;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение и Не ПометкаУдаления Тогда
		// Проверка заполнения документа
		Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(Ссылка);
		СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента();
		ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента, Отказ, Заголовок);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если Рассчитан тогда
			Права_ = Неопределено;
			флРассчитатьИтоги = (уатПраваИНастройки.уатПраво("ПутевойЛистПерерасчетИтоговПриПроведении", Права_) = Истина);
			Если флРассчитатьИтоги Тогда
				РасчетИтогов(Отказ, Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	//Если НЕ Отказ Тогда
	//	//обрабатываем заправки ГСМ, введенные на основании текущего путевого листа
	//	тблЗаправки = уатОбщегоНазначения.уатПолучитьЗаправкиДляПЛ(Ссылка);
	//	
	//	Для Каждого ТекЗаправка Из тблЗаправки Цикл
	//		Если ТекЗаправка.Ссылка.Проведен И (НЕ Проведен) Тогда
	//			ТекЗаправкаОбъект = ТекЗаправка.Ссылка.ПолучитьОбъект();
	//			Попытка
	//				ТекЗаправкаОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	//				//Сообщить("Отменено проведение связанного документа <" + ТекЗаправка.Ссылка + ">", СтатусСообщения.Информация);
	//			Исключение
	//				//Сообщить("Не удалось отменить проведение связанного документа <"
	//				//	+ ТекЗаправка.Ссылка + ">", СтатусСообщения.Внимание);
	//				//Отказ = Истина;
	//			КонецПопытки;
	//			
	//		ИначеЕсли (НЕ ТекЗаправка.Ссылка.Проведен) И Проведен Тогда
	//			ТекЗаправкаОбъект = ТекЗаправка.Ссылка.ПолучитьОбъект();
	//			Попытка
	//				ТекЗаправкаОбъект.Записать(РежимЗаписиДокумента.Проведение);
	//				//Сообщить("Проведен связанный документ <" + ТекЗаправка.Ссылка + ">", СтатусСообщения.Информация);
	//			Исключение
	//				//Сообщить("Не удалось провести связанный документ <" + ТекЗаправка.Ссылка + ">", СтатусСообщения.Внимание);
	//				//Отказ = Истина;
	//			КонецПопытки;
	//			
	//		КонецЕсли;	
	//	КонецЦикла;
	//КонецЕсли;
	
	флИспользованиеШК = Константы.уатИспользоватьШтрихкодированиеПутевыхЛистов.Получить();
	Если флИспользованиеШК И НЕ Отказ Тогда
		уатЗащищенныеФункцииСервер_проф.ПолучитьСформироватьШтрихкодОбъекта(Ссылка);
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАСЧЕТА ИТОГОВ ПО ДОКУМЕНТУ

// Функция возвращает все параметры выработки с произвольным расчетом
//
Функция ПолучитьПараметрыВыработкиСПроизвольнымРасчетом ()
	
	//параметры выработки с произвольным расчетом
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	уатПараметрыВыработки.Ссылка,
	|	уатПараметрыВыработки.АлгоритмРасчетаПараметра,
	|	уатПараметрыВыработки.ДействуетНаСотрудников,
	|	уатПараметрыВыработки.ДействуетНаТС
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|ГДЕ
	|	(НЕ уатПараметрыВыработки.Предопределенный)
	|	И уатПараметрыВыработки.СпособРасчетаПараметровВыработки = ЗНАЧЕНИЕ(Перечисление.уатСпособРасчетаПараметровВыработки.ПоЗаданию)
	|	И (НЕ уатПараметрыВыработки.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	уатПараметрыВыработки.Ссылка,
	|	уатПараметрыВыработки.АлгоритмРасчетаПараметра,
	|	уатПараметрыВыработки.ДействуетНаСотрудников,
	|	уатПараметрыВыработки.ДействуетНаТС
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|ГДЕ
	|	(НЕ уатПараметрыВыработки.Предопределенный)
	|	И уатПараметрыВыработки.СпособРасчетаПараметровВыработки = ЗНАЧЕНИЕ(Перечисление.уатСпособРасчетаПараметровВыработки.ПоШапке)
	|	И (НЕ уатПараметрыВыработки.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	уатПараметрыВыработки.Ссылка,
	|	уатПараметрыВыработки.АлгоритмРасчетаПараметра,
	|	уатПараметрыВыработки.ДействуетНаСотрудников,
	|	уатПараметрыВыработки.ДействуетНаТС
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|ГДЕ
	|	(НЕ уатПараметрыВыработки.Предопределенный)
	|	И уатПараметрыВыработки.СпособРасчетаПараметровВыработки = ЗНАЧЕНИЕ(Перечисление.уатСпособРасчетаПараметровВыработки.ПоТТД)
	|	И (НЕ уатПараметрыВыработки.ПометкаУдаления)";
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

//Процедура сворачивает выработку ТС по настройкам учета выработки согласно учетной политике
//Перед сверткой, если по аналитике (напр. Подразделение) не ведется учет, то она заполняется пустыми значениями
//
Процедура СвернутьВыработкуТСпоУчетнойПолитике()
	УчетВыработкиПоКонтрагентам = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоКонтрагентам);
	УчетВыработкиПоПодразделениям = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоПодразделениям);
	УчетВыработкиПоОбъектамСтроительства = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоОбъектамСтроительства);
	УчетВыработкиПоМаршрутам = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоМаршрутам);
	УчетВыработкиПоВидамПеревозок = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоВидамПеревозок);
	Для Каждого ТекСтрока Из ВыработкаТС Цикл
		Если НЕ УчетВыработкиПоКонтрагентам Тогда
			ТекСтрока.Контрагент = Неопределено;
		КонецЕсли;
		Если НЕ УчетВыработкиПоПодразделениям Тогда
			ТекСтрока.Подразделение = Неопределено;
		КонецЕсли;
		Если НЕ УчетВыработкиПоОбъектамСтроительства Тогда
			ТекСтрока.ОбъектСтроительства = Неопределено;
			ТекСтрока.СтроительнаяРабота = Неопределено;
			ТекСтрока.СценарийПланирования = Неопределено;
		КонецЕсли;
		Если НЕ УчетВыработкиПоМаршрутам Тогда
			ТекСтрока.Маршрут = Неопределено;
		КонецЕсли;
		Если НЕ УчетВыработкиПоВидамПеревозок Тогда
			ТекСтрока.ВидПеревозки = Неопределено;
		КонецЕсли;
	КонецЦикла;
	Если (НЕ УчетВыработкиПоКонтрагентам) ИЛИ (НЕ УчетВыработкиПоПодразделениям) ИЛИ (НЕ УчетВыработкиПоОбъектамСтроительства)
		ИЛИ (НЕ УчетВыработкиПоМаршрутам) ИЛИ (НЕ УчетВыработкиПоВидамПеревозок) Тогда
		ВыработкаТС.Свернуть("ТС, ПараметрВыработки, Подразделение, Контрагент, ОбъектСтроительства, Маршрут, ВидПеревозки, СтроительнаяРабота, СценарийПланирования", "Количество");
	КонецЕсли;
КонецПроцедуры

//Процедура сворачивает выработку сотрудников по настройкам учета выработки согласно учетной политике
//Перед сверткой, если по аналитике (напр. Подразделение) не ведется учет, то она заполняется пустыми значениями
//
Процедура СвернутьВыработкуСотрудниковпоУчетнойПолитике()
	УчетВыработкиПоКонтрагентам = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоКонтрагентам);
	УчетВыработкиПоПодразделениям = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоПодразделениям);
	УчетВыработкиПоОбъектамСтроительства = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоОбъектамСтроительства);
	УчетВыработкиПоМаршрутам = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоМаршрутам);
	УчетВыработкиПоВидамПеревозок = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоВидамПеревозок);
	Для Каждого ТекСтрока Из ВыработкаСотрудников Цикл
		Если НЕ УчетВыработкиПоКонтрагентам Тогда
			ТекСтрока.Контрагент = Неопределено;
		КонецЕсли;
		Если НЕ УчетВыработкиПоПодразделениям Тогда
			ТекСтрока.Подразделение = Неопределено;
		КонецЕсли;
		Если НЕ УчетВыработкиПоОбъектамСтроительства Тогда
			ТекСтрока.ОбъектСтроительства = Неопределено;
			ТекСтрока.СтроительнаяРабота = Неопределено;
			ТекСтрока.СценарийПланирования = Неопределено;
		КонецЕсли;
		Если НЕ УчетВыработкиПоМаршрутам Тогда
			ТекСтрока.Маршрут = Неопределено;
		КонецЕсли;
		Если НЕ УчетВыработкиПоВидамПеревозок Тогда
			ТекСтрока.ВидПеревозки = Неопределено;
		КонецЕсли;
	КонецЦикла;
	Если (НЕ УчетВыработкиПоКонтрагентам) ИЛИ (НЕ УчетВыработкиПоПодразделениям) ИЛИ (НЕ УчетВыработкиПоОбъектамСтроительства)
		ИЛИ (НЕ УчетВыработкиПоМаршрутам) ИЛИ (НЕ УчетВыработкиПоВидамПеревозок) Тогда
		ВыработкаСотрудников.Свернуть("Сотрудник, ПараметрВыработки, Подразделение, Контрагент, ОбъектСтроительства, Маршрут, ВидПеревозки, СтроительнаяРабота, СценарийПланирования", "Количество");
	КонецЕсли;
КонецПроцедуры

// Процедура проверяет корректность заполнения таблицы ФОВ
//
Процедура ПроверитьТаблицуФОВ(ТекстСообщения = "", Отказ)
	//проверка на заполненость хотя бы одного из времени дневного или ночного
	Для Каждого ТекСтрокаФОВ Из ФактическиОтработанноеВремя Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрокаФОВ.ВремяДневное) И НЕ ЗначениеЗаполнено(ТекСтрокаФОВ.ВремяНочное) Тогда
			ТекстСообщения = ТекстСообщения + "
			|	- в строке №" + ТекСтрокаФОВ.НомерСтроки + " не указано время!";
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
	
	РасчитатьВременныеПараметры();
	
	//проверка на превышение времени по каждому сотруднику общего времени по путевому листу
	тблФОВсвернутая = ФактическиОтработанноеВремя.Выгрузить().Скопировать();
	тблФОВсвернутая.Свернуть("Сотрудник", "ВремяДневное, ВремяНочное");
	Для Каждого ТекСтрФОВ Из тблФОВсвернутая Цикл
		Если ТекСтрФОВ.ВремяДневное > мВремяВНаряде Тогда
			ТекстСообщения = ТекстСообщения + "
			|	- рабочее время по сотруднику """ + ТекСтрФОВ.Сотрудник + """ ("
			+ Формат(уатОбщегоНазначения.уатВремяВЧЧ_ММ(ТекСтрФОВ.ВремяДневное), "ЧДЦ=2; ЧРД=:")
			+ ") превышает время в наряде по путевому листу ("
			+ Формат(уатОбщегоНазначения.уатВремяВЧЧ_ММ(мВремяВНаряде), "ЧДЦ=2; ЧРД=:") + ")!";
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекСтрФОВ Из ФактическиОтработанноеВремя Цикл
		Если ТекСтрФОВ.ВремяНочное > 8*3600 Тогда
			ТекстСообщения = ТекстСообщения + "
			|	- ночное время по сотруднику """ + ТекСтрФОВ.Сотрудник + """ на дату " + Формат(ТекСтрФОВ.Дата, "ДФ = дд.ММ.гггг") + " ("
			+ Формат(уатОбщегоНазначения.уатВремяВЧЧ_ММ(ТекСтрФОВ.ВремяНочное), "ЧДЦ=2; ЧРД=:")
			+ ") превышает 8ч/сут!";
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//Процедура рассчитывает фактически отработанное время сотрудников по путевому листу
//
Процедура РасчетФОВ(ВыполнитьПринудительно = Ложь) Экспорт
	Если НеВыполнятьАвтоРасчетФОВ И (НЕ ВыполнитьПринудительно) Тогда
		Возврат;
	КонецЕсли;
	
	ФактическиОтработанноеВремя.Очистить();
	
	тблРабочееВремя = Документы.уатПутевойЛист.РасчетВремени(ДатаВыезда, ДатаВозвращения, Организация, РежимРаботыТС, Простои.Выгрузить());
	
	//составим список задействованных сотрудников
	мсвСотрудники = Новый Массив;
	мсвСотрудники.Добавить(Водитель1);
	Если ЗначениеЗаполнено(Водитель2) Тогда
		мсвСотрудники.Добавить(Водитель2);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Сотрудник1) Тогда
		мсвСотрудники.Добавить(Сотрудник1);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Сотрудник2) Тогда
		мсвСотрудники.Добавить(Сотрудник2);
	КонецЕсли;	
	
	Для Каждого ТекСотрудник Из мсвСотрудники Цикл
		Для Каждого ТекСтрока Из тблРабочееВремя Цикл
			НоваяСтрока = ФактическиОтработанноеВремя.Добавить();
			НоваяСтрока.Дата = ТекСтрока.ДатаРаботы;
			НоваяСтрока.Сотрудник = ТекСотрудник;
			Если ТекСтрока.ВидВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Явка") Тогда
				НоваяСтрока.ВремяДневное = ТекСтрока.Продолжительность;
			ИначеЕсли ТекСтрока.ВидВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы") Тогда
				НоваяСтрока.ВремяНочное = ТекСтрока.Продолжительность;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ФактическиОтработанноеВремя.Свернуть("Сотрудник, Дата", "ВремяДневное, ВремяНочное");
	
	////сейчас в таблице время дневное - это время в работе.
	////корректируем дневное время = время в работе - время ночное
	//Для Каждого ТекСтрока Из ФактическиОтработанноеВремя Цикл
	//	ТекСтрока.ВремяДневное = ТекСтрока.ВремяДневное - ТекСтрока.ВремяНочное;
	//КонецЦикла;
КонецПроцедуры

//Функция вычисляет произвольный параметр выработки рассчитанный по шапке
//
Функция ВычислитьПроизвольныйПараметрВыработкиПоШапке(Параметр)
	СтрокаЗамены = СтрЗаменить(Параметр.АлгоритмРасчетаПараметра, "[", "");
	СтрокаЗамены = СтрЗаменить(СтрокаЗамены, "]", "");
	Попытка 
		ЗначениеПараметра = Вычислить(СтрокаЗамены);
		Возврат ЗначениеПараметра;
	Исключение
		Сообщить("При расчете параметра выработки """ + Параметр.Ссылка.Наименование + """ произошла ошибка. Проверьте правильность формулы и введенных данных.");
		Сообщить("Информация об ошибке для специалистов:");
		Сообщить(ОписаниеОшибки());
		Возврат "ошибка";
	КонецПопытки;
КонецФункции

//Функция подготовливает для вычисления произвольный параметр выработки рассчитанный по заданию или по ттд
//
Функция ВычислитьПроизвольныйПараметрВыработки(Параметр, ТекСтрЗадание)
	СтрокаЗамены = СтрЗаменить(Параметр.АлгоритмРасчетаПараметра, "[", "ТекСтрЗадание.");
	СтрокаЗамены = СтрЗаменить(СтрокаЗамены, "]", "");
	Попытка 
		ЗначениеПараметра = Вычислить(СтрокаЗамены);
		Возврат ЗначениеПараметра;
	Исключение
		Сообщить("При расчете параметра выработки """ + Параметр.Ссылка.Наименование + """ произошла ошибка. Проверьте правильность формулы и введенных данных.");
		Сообщить("Информация об ошибке для специалистов:");
		Сообщить(ОписаниеОшибки());
		Возврат "ошибка";
	КонецПопытки;
КонецФункции

Функция ПолучитьСотрудникаПоФизЛицу(Знач ФизЛицо)
	
	мЗапрос = Новый Запрос();
	мЗапрос.УстановитьПараметр("ФизическоеЛицо", ФизЛицо);
	
	мЗапрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	Сотрудники.Ссылка
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.ФизическоеЛицо = &ФизическоеЛицо
	|	И НЕ Сотрудники.ПометкаУдаления
	|	И НЕ Сотрудники.ВАрхиве";
	
	мВыборка = мЗапрос.Выполнить().Выбрать();
	
	Если мВыборка.Следующий() Тогда 
		Возврат мВыборка.Ссылка;
	Иначе 
		Возврат Справочники.Сотрудники.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьРассточниеПоМЛ(Основание) 
	
	мсвПункты = Новый Массив();
	
	ДеревоПунктов = Новый ДеревоЗначений();
	ДеревоПунктов.Колонки.Добавить("Группировка", Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения, Строка, Число"));
	ДеревоПунктов.Колонки.Добавить("Расстояние",  Новый ОписаниеТипов("Число"));
	ДеревоПунктов.Колонки.Добавить("Время",  Новый ОписаниеТипов("Число"));
	ДеревоПунктов.Колонки.Добавить("Заказ",       Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
	ДеревоПунктов.Колонки.Добавить("ТипТочкиМаршрута",       Новый ОписаниеТипов("ПеречислениеСсылка.уатТипыТочекМаршрута"));
	
	Для Каждого ТекСтрока Из Основание.Заказы Цикл 
		СтруктураПоиска = Новый Структура("Группировка, Заказ", ТекСтрока.Пункт, ТекСтрока.ЗаказГрузоотправителя);
		НайдСтроки = ДеревоПунктов.Строки.НайтиСтроки(СтруктураПоиска, Ложь);
		Если НайдСтроки.Количество() = 0 Тогда 
			НайдСтрока = ДеревоПунктов.Строки.Добавить();
			НайдСтрока.Группировка      = ТекСтрока.Пункт;
			НайдСтрока.Расстояние       = ТекСтрока.Расстояние;
			НайдСтрока.Время            = ТекСтрока.Время;
			НайдСтрока.ТипТочкиМаршрута = ТекСтрока.ТипТочкиМаршрута;
			НайдСтрока.Заказ            = ТекСтрока.ЗаказГрузоотправителя;
		Иначе 
			НайдСтрока = НайдСтроки[0];
		КонецЕсли;
		
		НовПодстрока = НайдСтрока.Строки.Добавить();
		НовПодстрока.Группировка = ТекСтрока.НомерСтроки;
	КонецЦикла;
	
	тзПункты = Новый ТаблицаЗначений();
	тзПункты.Колонки.Добавить("Пункт1", Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения, Строка, Число"));
	тзПункты.Колонки.Добавить("Пункт2", Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения, Строка, Число"));
	тзПункты.Колонки.Добавить("ТипТочкиМаршрута1", Новый ОписаниеТипов("ПеречислениеСсылка.уатТипыТочекМаршрута"));
	тзПункты.Колонки.Добавить("ТипТочкиМаршрута2", Новый ОписаниеТипов("ПеречислениеСсылка.уатТипыТочекМаршрута"));
	тзПункты.Колонки.Добавить("Расстояние",   Новый ОписаниеТипов("Число"));
	тзПункты.Колонки.Добавить("Время",        Новый ОписаниеТипов("Число"));
	тзПункты.Колонки.Добавить("Заказ",        Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
	тзПункты.Колонки.Добавить("ЗаказМаршрут", Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
	тзПункты.Колонки.Добавить("флКонечныйЗаказ");
	
	Для Сч = 0 По ДеревоПунктов.Строки.Количество()-2 Цикл
		ТекСтрока   = ДеревоПунктов.Строки[Сч];
		СледСтрока  = ДеревоПунктов.Строки[Сч+1];
		СтрокаПункт = тзПункты.Добавить();
		СтрокаПункт.Пункт1            = ТекСтрока.Группировка;
		СтрокаПункт.Пункт2            = СледСтрока.Группировка;
		СтрокаПункт.ТипТочкиМаршрута1 = ТекСтрока.ТипТочкиМаршрута;
		СтрокаПункт.ТипТочкиМаршрута2 = СледСтрока.ТипТочкиМаршрута;
		СтрокаПункт.Расстояние        = ТекСтрока.Расстояние;
		СтрокаПункт.Время             = ТекСтрока.Время;
		СтрокаПункт.Заказ             = СледСтрока.Заказ;
		СтрокаПункт.ЗаказМаршрут      = ТекСтрока.Заказ;
		СтрокаПункт.флКонечныйЗаказ   = Ложь;
	КонецЦикла;
	
	тзЗаказы = тзПункты.Скопировать(,"Заказ");
	тзЗаказы.Свернуть("Заказ");
	Раст = 0;
	Для Каждого ТекСтрока Из тзЗаказы Цикл
		ПунктыЗаказ = тзПункты.НайтиСтроки(Новый Структура("Заказ", ТекСтрока.Заказ));
		Если ПунктыЗаказ.Количество() = 1 Тогда
			ПунктыЗаказ[0].флКонечныйЗаказ = Истина;
		ИначеЕсли ПунктыЗаказ.Количество() > 1 Тогда
			СтрокаПункт = тзПункты.Добавить();
			СтрокаПункт.Пункт1            = ПунктыЗаказ[0].Пункт1;
			СтрокаПункт.Пункт2            = ПунктыЗаказ[1].Пункт2;
			СтрокаПункт.ТипТочкиМаршрута1 = ПунктыЗаказ[0].ТипТочкиМаршрута1;
			СтрокаПункт.ТипТочкиМаршрута2 = ПунктыЗаказ[1].ТипТочкиМаршрута2;
			СтрокаПункт.флКонечныйЗаказ   = Истина;
			Если ПунктыЗаказ[0].Пункт2 = ПунктыЗаказ[1].Пункт1 Тогда
				СтрокаПункт.Расстояние        = ПунктыЗаказ[1].Расстояние;
				СтрокаПункт.Время             = ПунктыЗаказ[1].Время;
				СтрокаПункт.Заказ             = ТекСтрока.Заказ;
			Иначе
				НачПункт     = ПунктыЗаказ[0].Пункт1;
				ЗаказМаршрут = ПунктыЗаказ[1].ЗаказМаршрут;
				Расстояние   = ПунктыЗаказ[1].Расстояние;
				Время        = ПунктыЗаказ[1].Время;
				мНачПункт    = Справочники.уатПунктыНазначения.ПустаяСсылка();
				Пока НЕ (НачПункт = мНачПункт) Цикл
					ПунктыЗаказ  = тзПункты.НайтиСтроки(Новый Структура("Заказ", ЗаказМаршрут));
					Если ПунктыЗаказ.Количество() = 0 Тогда
						Прервать;
					ИначеЕсли ПунктыЗаказ.Количество() > 1 Тогда
						Расстояние = Расстояние + ПунктыЗаказ[1].Расстояние;
						Время      = Время      + ПунктыЗаказ[1].Время;
					Иначе
						Расстояние = Расстояние + ПунктыЗаказ[0].Расстояние;
						Время      = Время      + ПунктыЗаказ[0].Время;
					КонецЕсли;
					ЗаказМаршрут = ПунктыЗаказ[0].ЗаказМаршрут;
					мНачПункт    = ПунктыЗаказ[0].Пункт1;
				КонецЦикла;
				СтрокаПункт.Расстояние  = Расстояние;
				СтрокаПункт.Время       = Время;
				СтрокаПункт.Заказ       = ТекСтрока.Заказ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	МассивСтрок = тзПункты.НайтиСтроки(Новый Структура("флКонечныйЗаказ", Ложь));
	Для Каждого ЭлементМассив Из МассивСтрок Цикл 
		тзПункты.Удалить(ЭлементМассив);
	КонецЦикла;
	
	Возврат тзПункты;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

ДанныеИзменились = Ложь;
