
#Область ПеременныеФормы

&НаКлиенте
Перем ПрицепОлд;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	об = РеквизитФормыВЗначение("Объект");
//++ Рарус Лимаренко 27.06.2018
	//уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(об, Отказ, СтандартнаяОбработка, ЭтаФорма, ДопПараметрыОткрытие);	
//-- Рарус Лимаренко 27.06.2018
	
	ЗначениеВРеквизитФормы(Об,"Объект");
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Вызывается строго после вызова подсистемы "ПодключаемыеКоманды".
	// Необходим для группировки команд печати.
	СгруппироватьКомандыПечатиПЛ();
	
	уатОбщегоНазначенияСервер.ЗаполнитьШапкуДокумента(
		Объект,
		,
		Параметры.ЗначениеКопирования,
		Параметры.Основание,
		,
		,
		,
		Параметры.ЗначенияЗаполнения
	);
	
	ПараметрОбъектКопирования = Параметры.ЗначениеКопирования;
	мКопированиеДокумента = ЗначениеЗаполнено(ПараметрОбъектКопирования);
	
	// Установка реквизитов формы.
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Объект.Дата = ТекущаяДата();
	КонецЕсли;
	ДатаДокумента = Объект.Дата;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если НЕ ЗначениеЗаполнено(Объект.ДатаЗакрытия) Тогда
			Объект.ДатаЗакрытия = ТекущаяДата();
		КонецЕсли;
		
		Объект.Рассчитан = Ложь;
		
		СтруктураОбъектовНастроек = Новый Структура;
		СтруктураОбъектовНастроек.Вставить("Организация", Объект.Организация);
		СтруктураОбъектовНастроек.Вставить("Подразделение", ПодразделениеНастройки());
		СтруктураОбъектовНастроек.Вставить("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
		
		СтруктураОбъектовНастроекБезПользовательскихНастроек = Новый Структура;
		СтруктураОбъектовНастроекБезПользовательскихНастроек.Вставить("Организация", Объект.Организация);
		СтруктураОбъектовНастроек.Вставить("Подразделение", ПодразделениеНастройки());
		
		
		Если Объект.ВидПЛ.Пустая() Тогда
			Объект.ВидПЛ = ПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойВидПЛ);
		КонецЕсли;
		Если Объект.РежимРасчетаВыработки.Пустая() Тогда
			Объект.РежимРасчетаВыработки = ПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек,
				ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойРежимРасчетаВыработкиПЛ);
		КонецЕсли;
		Объект.РасчетФактРасходаГСМ = ПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроекБезПользовательскихНастроек,
			ПланыВидовХарактеристик.уатПраваИНастройки.РасчетФактРасходаГСМ);
	
	Иначе
		Элементы.ПроверитьДокументы.Доступность = Истина;
		
	КонецЕсли;
	
	//отбор списка ТТД
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТТД, "ПутЛист", Объект.Ссылка);
	Если Объект.Ссылка.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ТТД.Отбор, "Ссылка", Документы.уатТТД.ПустаяСсылка());
	КонецЕсли;
	
	РедактироватьЗаправкуГСМВДиалоге = ХранилищеОбщихНастроек.Загрузить("Документ.уатПутевойЛист",
		"РедактироватьЗаправкуГСМВДиалоге");
	РедактироватьСливГСМВДиалоге = ХранилищеОбщихНастроек.Загрузить("Документ.уатПутевойЛист",
		"РедактироватьСливГСМВДиалоге");
		
	мМакет = ХранилищеОбщихНастроек.Загрузить("Документ.уатПутевойЛист", "ПечатнаяФорма");
	
	ВидПЛДоИзменения = Объект.ВидПЛ;
	
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.Подразделение, "Объект.Организация");
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.ЗаданиеПодразделение, "Объект.Организация");
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.ВыработкаТСПодразделение, "Объект.Организация");
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.ВыработкаСотрудниковПодразделение, "Объект.Организация");
	Если НЕ ПравоДоступа("Редактирование", Метаданные.Документы.уатПутевойЛист) Тогда
		Элементы.НомерТранспортноеСредство.ТолькоПросмотр = Истина;
		Элементы.ОстатокТопливаВыезд.ТолькоПросмотр = Истина;
		Элементы.ОстатокТопливаВозврат.ТолькоПросмотр = Истина;
		Элементы.ВыработкаТСсводная.ТолькоПросмотр = Истина;
		Элементы.ВыработкаСотрудниковСводная.ТолькоПросмотр = Истина;
		Элементы.ЗарплатаСводная.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	АвтомобильОлд = Объект.ТранспортноеСредство;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			ПриИзмененииОрганизации(Истина);
		КонецЕсли;
		
		//Было копирование п/л или ввод на основании
		Если ЗначениеЗаполнено(Объект.ТранспортноеСредство) Тогда
			АвтомобильОлд = Неопределено;
			ИнициализацияДанныхАвтомобиляСервер(Ложь);
		КонецЕсли;
		
		Если Объект.ВидПЛ.Пустая() Тогда
			СтруктураОбъектовНастроек = Новый Структура;
			СтруктураОбъектовНастроек.Вставить("Организация", Объект.Организация);
			СтруктураОбъектовНастроек.Вставить("Подразделение", ПодразделениеНастройки());
			СтруктураОбъектовНастроек.Вставить("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
			Объект.ВидПЛ = ПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ОсновнойВидПЛ"));
		КонецЕсли;
		
		УстановитьДействителенДоПоУмолчанию();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ТранспортноеСредство) Тогда 
		НомерТранспортноеСредство = ПредставлениеТСсервер(Объект.ТранспортноеСредство, Объект.Организация);
		МодельТС = ПолучитьЗначениеРеквизита(Объект.ТранспортноеСредство, "уатМодель");
		Если ЗначениеЗаполнено(МодельТС) Тогда
			Если ПолучитьЗначениеРеквизита(МодельТС, "НаличиеСпидометра") Тогда
				Элементы.ДекорацияСпидометр.Заголовок = "Спидометр";
				Элементы.РасходГСМПробег.Заголовок = "Пробег, км";
			Иначе
				Элементы.ДекорацияСпидометр.Заголовок = "Счетчик м/ч";
				Элементы.РасходГСМПробег.Заголовок = "Наработка, м/ч";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.НомерПачки.Видимость = ПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ИспользоватьУчетПутЛистовПоПачкам"));
	
	НастроитьВидимостьЗатрат();
	
	ВывестиТаблицуВыработкаСотрудников();
	ВывестиТаблицуВыработкаТС();
	
	ВывестиТаблицуЗаправокСервер();
	ВывестиТаблицуСливовСервер();
	Элементы.РасходГСМПробег.Видимость = Объект.РаботаНаДвухВидахТоплива;
	
	ПроцентИзмененияНормыТемпература = Строка(уатОбщегоНазначения.уатПолучитьКоэффициентИзмененияНормыДляТемпературы(Объект.Температура)) + "%";
	УстановитьФорматированиеТочностиОстатковГСМ();
	
	Если НЕ Объект.Рассчитан Тогда
		ПересчетВыданногоГСМСервер();
		ПересчетСданногоГСМСервер();
	КонецЕсли;
	Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
		Если Объект.ТранспортноеСредство = ТекСтрока.ТС Тогда
			ОстатокТопливаВыезд = ТекСтрока.ОстатокПриВыезде;
			ОстатокТопливаВозврат = ТекСтрока.ОстатокПриВозвращении;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ВывестиТаблицуЗПсервер();
	
	ВремяРаботыОтопителя = уатОбщегоНазначения.уатВремяВЧЧ_ММ(Объект.ВремяРаботыОтопителя);
	
	НастроитьВидимостьВыработки();
	
	Элементы.ВидПЛ.СписокВыбора.Очистить();
	Для Каждого ТекВидПЛ Из уатОбщегоНазначения.уатВидыПЛ() Цикл
		Элементы.ВидПЛ.СписокВыбора.Добавить(ТекВидПЛ.Значение, ТекВидПЛ.Представление);
	КонецЦикла;
	
	Элементы.РедактироватьЗаправкуГСМВДиалоге.Пометка = РедактироватьЗаправкуГСМВДиалоге;
	Элементы.РедактироватьСливГСМВДиалоге.Пометка = РедактироватьСливГСМВДиалоге;
	
	Элементы.ЗаправкиГСМВидЗаправки.СписокВыбора.Очистить();
	Для Каждого ТекВидЗаправки Из уатОбщегоНазначения.СписокВидовЗаправок() Цикл
		Элементы.ЗаправкиГСМВидЗаправки.СписокВыбора.Добавить(ТекВидЗаправки.Значение, ТекВидЗаправки.Представление);
	КонецЦикла;
	
	Если Объект.Проведен И Объект.Рассчитан Тогда
		мТиповойДокумент = Неопределено;
		уатТиповыеДокументы.НайтиТиповойДокументДляДокументаУАТ(Объект.Ссылка, мТиповойДокумент);
		Если ТипЗнч(мТиповойДокумент) = Тип("Массив") И мТиповойДокумент.Количество() > 0 Тогда
			мТиповойДокументПредставление = Строка(мТиповойДокумент[0]);
		ИначеЕсли ЗначениеЗаполнено(мТиповойДокумент) Тогда
			мТиповойДокументПредставление = Строка(мТиповойДокумент);
		КонецЕсли;
		
		ТолькоПросмотр = Истина;
		Элементы.НомерТранспортноеСредство.ТолькоПросмотр = Истина;
		Элементы.ОстатокТопливаВыезд.ТолькоПросмотр = Истина;
		Элементы.ОстатокТопливаВозврат.ТолькоПросмотр = Истина;
		Элементы.ФормаРасчетИтогов.Доступность = Ложь;
		Элементы.ФормаЗаполнитьНачальныеОстатки.Доступность = Ложь;
		Элементы.ФормаРассчитатьСпидометрПоЗаданию.Доступность = Ложь;
		Элементы.ЗаданиеОтметитьВсеЗадания.Доступность = Ложь;
		Элементы.ЗаданиеСнятьВсеОтметкиВЗаданиях.Доступность = Ложь;
		Элементы.ТТД.ТолькоПросмотр = Истина;
		Элементы.ЗаправкиГСМ.ТолькоПросмотр = Истина;
		Элементы.СливыГСМ.ТолькоПросмотр = Истина;
		Элементы.ВыработкаТСсводная.ТолькоПросмотр = Истина;
		Элементы.ВыработкаСотрудниковСводная.ТолькоПросмотр = Истина;
		Элементы.ЗарплатаСводная.ТолькоПросмотр = Истина;
		Элементы.НадписьПробег.Доступность = Ложь;
		Элементы.ЗаправкиГСМДобавитьСуществующуюЗаправку.Доступность = Ложь;
		Элементы.РедактироватьЗаправкуГСМВДиалоге.Доступность = Ложь;
		Элементы.РедактироватьСливГСМВДиалоге.Доступность = Ложь;
		Элементы.ТТДДобавитьВСуществующийТТД.Доступность = Ложь;
		Элементы.ЗаданиеЗаполнить.Доступность = Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступаИзменениеЗаправкиГСМ() Тогда
		Элементы.ЗаправкиГСМ.ТолькоПросмотр = Истина;
		Элементы.РедактироватьЗаправкуГСМВДиалоге.Доступность = Ложь;
		Элементы.ЗаправкиГСМДобавитьСуществующуюЗаправку.Доступность = Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступаИзменениеСливыГСМ() Тогда
		Элементы.СливыГСМ.ТолькоПросмотр = Истина;
		Элементы.РедактироватьСливГСМВДиалоге.Доступность = Ложь;
	КонецЕсли;
	
	РассчитатьЭкономиюПережогСервер();
	ОбновитьНадписьРассчитанСервер();
	ОбновитьНадписьПробегСервер();
	ОбновитьНомераПрицеповСервер();
	ОбновитьНомераТСвТаблицахСервер();
	ОбновитьФлагЭтоТЖ_РасходГСМСервер();
	СформироватьСписокВыбораТСвЗаправкахГСМСервер();
	
	// Обновим картинки просроченных документов
	ОбновитьФлагПросроченныхДокументовТС();
	ОбновитьФлагПросроченныхДокументовВодителей();
	
	//обновление оформления выработки
	ОбновитьКоличествоВыработкаПодробноСервер();
	
	ОбновитьСписокВыбораЭкипажаСервер();
	
	СтруктураРеквизитов = Новый Структура("ВидПЛ, Водитель2, Сотрудник1, Сотрудник2, Организация",
		Объект.ВидПЛ, Объект.Водитель2, Объект.Сотрудник1, Объект.Сотрудник2, Объект.Организация);
	уатОбщегоНазначенияКлиентСервер.УстановитьВидимостьПутевойЛист(ЭтаФорма, СтруктураРеквизитов);
	
	ИспользоватьСоглашенияСПоставщиками = уатИнтерфейсВзаимодействияСERPВызовСервера.уатЗначениеФункциональнойОпции("ИспользоватьСоглашенияСПоставщиками");
	
	ПриСозданииНаСервере_пп();
	
	УстановитьСистемныеНастройки();
	
	ОбновитьНадписьСпецРабот();
	
	// УправлениеПредприятием.СлужебныеПодсистемы
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	// Конец УправлениеПредприятием.СлужебныеПодсистемы
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере_пп()
	
	Если НЕ Константы.уатИспользоватьDynafleet.Получить() 
		// ITOB +++
		И Не Константы.уатИспользоватьЦСМ.Получить()
		// ITOB ---
		И НЕ Константы.уатИспользоватьOmnicomm.Получить() 
		И НЕ Константы.уатИспользоватьАвтотрекер.Получить()
		И НЕ Константы.уатИспользоватьСКАУТ.Получить()
		И НЕ Константы.уатИспользоватьАвтоГРАФ.Получить() Тогда
		
		Элементы.ФормаРассчитатьСпидометрПоGPS.Видимость = Ложь;
		Элементы.РасходГСМпоДаннымGPS.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ Константы.уатИспользоватьЦСМ.Получить() Тогда
		Элементы.ЗаданиеЗаполнитьЗаданиеПоДаннымGPS.Видимость = Ложь;
	КонецЕсли;
	
	ОбновитьВремяФОВ_Сервер();
	
	Если Объект.Проведен И Объект.Рассчитан Тогда
		Элементы.ФактическиОтработанноеВремя.Доступность = Ложь;
		Элементы.ФактическиОтработанноеВремяПересчитатьФОВ.Доступность = Ложь;
		Элементы.ЗатратыТС.Доступность = Ложь;
		Элементы.ФормаРассчитатьСпидометрПоGPS.Доступность = Ложь;
		Элементы.ФормаItobПоказатьМаршрутНаКарте.Доступность = Ложь;
	КонецЕсли;
	
	ВывестиТаблицуБилетыСервер();
	ВывестиТаблицуВыручкиСервер();
	ВывестиТаблицуПосВедСервер();
	
	ОбновитьКэшПравПоGPS();
	Если НЕ Объект.Рассчитан Тогда
		УстановитьВозможностьРедактированияДанныхПоGPS();
	КонецЕсли;
	
	Если Объект.Организация <> Справочники.Организации.ПустаяСсылка() Тогда
		мВидимостьРеквизитовНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//++ Рарус Лимаренко 27.06.2018
	//уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	//-- Рарус Лимаренко 27.06.2018
	
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПриОткрытии_пп();
	
	Если НЕ ПустаяСтрока(мТиповойДокументПредставление) Тогда
		ОповещениеПослеПредупрежденияОТД = Новый ОписаниеОповещения("ПоказатьПредупреждениеОТиповомДокументеПродолжение", ЭтотОбъект);
		ПоказатьПредупреждение(ОповещениеПослеПредупрежденияОТД,
		"Для данного документа сформирован документ типовой конфигурации """ + мТиповойДокументПредставление + """.
		|Документ открыт в режиме просмотра!", 10);
	КонецЕсли;
	
	ОбновитьЗаправкиВсего();
	мКопированиеДокумента = Ложь;
	Модифицированность = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		ПроверитьПредыдущийПЛНеРассчитан();
	КонецЕсли;
	
	ТекущийЭлемент = Элементы.НомерТранспортноеСредство;
	
КонецПроцедуры

// Подключаемая динамически процедура обработки предупреждения.
&НаКлиенте
Процедура ПоказатьПредупреждениеОТиповомДокументеПродолжение(ДопПараметры) Экспорт
	
	ЭтаФорма.Активизировать();
	
КонецПроцедуры

// Вынесены процедуры и функции блока пассажирских перевозок
&НаКлиенте
Процедура ПриОткрытии_пп()
	
	Элементы.РедактироватьВыручкуВДиалоге.Пометка = РедактироватьВыручкуВДиалоге;
	Элементы.РедактироватьБилетыВДиалоге.Пометка = РедактироватьБилетыВДиалоге;
	Элементы.РедактироватьПосВедВДиалоге.Пометка = РедактироватьПосВедВДиалоге;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы Тогда 
		СохранитьНастройкиСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьВремяФОВ_Сервер();
	ОбновитьНомераТСвТаблицахСервер();
	ОбновитьНомераПрицеповСервер();
	ОбновитьНадписьСпецРабот();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	//проверка попадания заправок в период ПЛ
	Если НЕ ПараметрыЗаписи.Свойство("ЗаписьЗаправкиГСМ") Тогда
		Если НЕ ПроверитьПопаданиеЗаправокСливовВПериодПЛ(Объект.Организация, Объект.Ссылка, Объект.ДатаВыезда, Объект.ДатаВозвращения) Тогда
			Сообщить("Путевой лист не был записан: введенные заправки и сливы ГСМ не попадают в период путевого листа!", СтатусСообщения.Внимание);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// изменение времени заправки на время выезда ПЛ
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение И НЕ ТекущийОбъект.Ссылка.Пустая()
		И ПолучитьПраваИНастройкиПользователя(ТекущийОбъект.Организация, "ПроверятьПопаданиеЗаправкиСливаВПериодПутевогоЛиста")
		= Перечисления.уатВидыПроверкиПопаданияЗаправкиВПериодПЛ.ПерепроводитьЗаправку Тогда
		
		//Запрос = Новый Запрос(
		//"ВЫБРАТЬ РАЗЛИЧНЫЕ
		//|	уатОстаткиГСМнаТС.Регистратор
		//|ИЗ
		//|	РегистрНакопления.уатОстаткиГСМнаТС КАК уатОстаткиГСМнаТС
		//|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаправкаГСМ.Заправки КАК уатЗаправкаГСМЗаправки
		//|	ПО уатОстаткиГСМнаТС.Регистратор = уатЗаправкаГСМЗаправки.Ссылка
		//|	И уатОстаткиГСМнаТС.ГСМ = уатЗаправкаГСМЗаправки.ГСМ
		//|ГДЕ
		//|	уатОстаткиГСМнаТС.Регистратор ССЫЛКА Документ.уатЗаправкаГСМ
		//|	И уатЗаправкаГСМЗаправки.ПутевойЛист = &ПутевойЛист
		//|	И (уатОстаткиГСМнаТС.Период > &ДатаКон ИЛИ уатОстаткиГСМнаТС.Период < &ДатаНач)
		//|ОБЪЕДИНИТЬ
		//|ВЫБРАТЬ РАЗЛИЧНЫЕ
		//|	уатОстаткиГСМнаТС.Регистратор
		//|ИЗ
		//|	РегистрНакопления.уатОстаткиТЖнаТС КАК уатОстаткиГСМнаТС
		//|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаправкаГСМ.Заправки КАК уатЗаправкаГСМЗаправки
		//|	ПО уатОстаткиГСМнаТС.Регистратор = уатЗаправкаГСМЗаправки.Ссылка
		//|	И уатОстаткиГСМнаТС.ТЖ = уатЗаправкаГСМЗаправки.ГСМ
		//|ГДЕ
		//|	уатОстаткиГСМнаТС.Регистратор ССЫЛКА Документ.уатЗаправкаГСМ
		//|	И уатЗаправкаГСМЗаправки.ПутевойЛист = &ПутевойЛист
		//|	И (уатОстаткиГСМнаТС.Период > &ДатаКон ИЛИ уатОстаткиГСМнаТС.Период < &ДатаНач)
		//|");
		//Запрос.УстановитьПараметр("ДатаНач", ТекущийОбъект.ДатаВыезда);
		//Запрос.УстановитьПараметр("ДатаКон", ТекущийОбъект.ДатаВозвращения);
		//Запрос.УстановитьПараметр("ПутевойЛист", ТекущийОбъект.Ссылка);
		//ВыборкаЗаправки = Запрос.Выполнить().Выбрать();
		//Пока ВыборкаЗаправки.Следующий() Цикл
		//	ЗаправкаОбъект = ВыборкаЗаправки.Регистратор.ПолучитьОбъект();
		//	Попытка
		//		ЗаправкаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		//	Исключение
		//		Отказ = Истина;
		//		Возврат;
		//	КонецПопытки;
		//КонецЦикла;
		
		ЗапросЗаправкиПЛ = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	уатЗаправкаГСМЗаправки.Ссылка,
		|	уатЗаправкаГСМЗаправки.ГСМ,
		|	уатЗаправкаГСМЗаправки.ТС,
		|	ВЫБОР
		|		КОГДА уатЗаправкаГСМЗаправки.Ссылка.ВидДвиженияГСМ = ЗНАЧЕНИЕ(Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЗаправкаПоТалонам
		|ИЗ
		|	Документ.уатЗаправкаГСМ.Заправки КАК уатЗаправкаГСМЗаправки
		|ГДЕ
		|	уатЗаправкаГСМЗаправки.Ссылка.Проведен
		|	И НЕ уатЗаправкаГСМЗаправки.Ссылка.ПометкаУдаления
		|	И уатЗаправкаГСМЗаправки.ПутевойЛист = &ПутевойЛист
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	уатСливГСМ.Ссылка,
		|	уатСливГСМ.ГСМ,
		|	уатСливГСМ.ТС,
		|	ЛОЖЬ
		|ИЗ
		|	Документ.уатСливГСМ КАК уатСливГСМ
		|ГДЕ
		|	уатСливГСМ.Проведен
		|	И НЕ уатСливГСМ.ПометкаУдаления
		|	И уатСливГСМ.ПутевойЛист = &ПутевойЛист");
		
		ЗапросЗаправкиПЛ.УстановитьПараметр("ДатаНач", ТекущийОбъект.ДатаВыезда);
		ЗапросЗаправкиПЛ.УстановитьПараметр("ДатаКон", ТекущийОбъект.ДатаВозвращения);
		ЗапросЗаправкиПЛ.УстановитьПараметр("ПутевойЛист", ТекущийОбъект.Ссылка);
		
		ВыборкаЗаправкиПЛ = ЗапросЗаправкиПЛ.Выполнить().Выбрать();
		Пока ВыборкаЗаправкиПЛ.Следующий() Цикл
			ЗаправкаОбъект = ВыборкаЗаправкиПЛ.Ссылка.ПолучитьОбъект();
			
			флПерепровести = Ложь;
			НЗОстатки = ЗаправкаОбъект.Движения.уатОстаткиГСМнаТС;
			НЗОстатки.Прочитать();
			Для Каждого ТекЗапись Из НЗОстатки Цикл
				Если ТекЗапись.Период < ТекущийОбъект.ДатаВыезда ИЛИ ЗначениеЗаполнено(ТекущийОбъект.ДатаВозвращения) И ТекЗапись.Период > ТекущийОбъект.ДатаВозвращения Тогда
					флПерепровести = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если флПерепровести Тогда
				Попытка
					ЗаправкаОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					Отказ = Истина;
					Возврат;
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//отбор списка ТТД
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТТД, "ПутЛист", ТекущийОбъект.Ссылка);
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ТТД.Отбор, "Ссылка");
	КонецЕсли;
	
	РассчитатьЭкономиюПережогСервер();
	ОбновитьНадписьРассчитанСервер();
	ОбновитьНомераПрицеповСервер();
	ОбновитьНомераТСвТаблицахСервер();
	ОбновитьФлагЭтоТЖ_РасходГСМСервер();
	ОбновитьКоличествоВыработкаПодробноСервер();
	Элементы.ПроверитьДокументы.Доступность = Истина;
	ОбновитьНадписьСпецРабот();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "Обновление для ПЛ из ТТД" Тогда 
		Элементы.ТТД.Обновить();
	ИначеЕсли ИмяСобытия = "ЗаправкаГСМ_Запись" Тогда 
		ВывестиТаблицуЗаправок();
		ПересчетВыданногоГСМСервер();
	ИначеЕсли (ИмяСобытия = "ДобавлениеЗаправкиИзПЛ" ИЛИ ИмяСобытия = "РедактированиеЗаправкиИзПЛ") И
			ЗначениеЗаполнено(Параметр) Тогда
		ВывестиТаблицуЗаправок();
		ПересчетВыданногоГСМСервер();
		Попытка
			Записать(Новый Структура("ЗаписьЗаправкиГСМ"));
		Исключение
		КонецПопытки;
	ИначеЕсли (ИмяСобытия = "ДобавлениеСливаИзПЛ" ИЛИ ИмяСобытия = "РедактированиеСливаИзПЛ") И ЗначениеЗаполнено(Параметр) Тогда
		ВывестиТаблицуСливов();
		ПересчетСданногоГСМСервер();
		Попытка
			Записать(Новый Структура("ЗаписьЗаправкиГСМ"));
		Исключение
		КонецПопытки;
	ИначеЕсли (ИмяСобытия = "ДобавлениеВыручкиИзПЛ" ИЛИ ИмяСобытия = "РедактированиеВыручкиИзПЛ") Тогда
		ВывестиТаблицуВыручки();
		
	ИначеЕсли (ИмяСобытия = "ДобавлениеБилетовИзПЛ" ИЛИ ИмяСобытия = "РедактированиеБилетовИзПЛ") Тогда
		ВывестиТаблицуБилеты();
		
	ИначеЕсли (ИмяСобытия = "ДобавлениеПосадочнойВедомостиИзПЛ" ИЛИ ИмяСобытия = "РедактированиеПосадочнойВедомостиИзПЛ") Тогда
		ВывестиТаблицуПосВед();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьВремяФОВ();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	УстановитьДатыВыездаВозвращения();
	
	ИнициализацияДанныхАвтомобиля(Новый ОписаниеОповещения("ДатаПриИзмененииЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Заглушка = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПЛПриИзменении(Элемент)
	ВидПЛПриИзмененииСервер();
	
	УстановитьВидимость();
	
	// для обновления настроек формы
	ОбновитьИнтерфейс();
КонецПроцедуры

&НаСервере
Процедура ВидПЛПриИзмененииСервер()
	Если ВидПЛДоИзменения <> Объект.ВидПЛ Тогда
		СохранитьНастройкиСервер();
		УстановитьСистемныеНастройки();
		ВидПЛДоИзменения = Объект.ВидПЛ;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаВыездаПриИзменении(Элемент)
	ДатаВыездаПриИзмененииСервер();
	ПроверитьПредыдущийПЛНеРассчитан();
КонецПроцедуры

&НаСервере
Процедура ДатаВыездаПриИзмененииСервер()
	Если ЗначениеЗаполнено(Объект.ТранспортноеСредство) Тогда
		//обновляем остатки топлива ТС при выезде
		ОснТопливо = Объект.ТранспортноеСредство.уатМодель.ОсновноеТопливо;
		ДопТопливо = Объект.ТранспортноеСредство.уатМодель.ДополнительноеТопливо;
		
		ОстатокТопливаВыезд = уатОбщегоНазначения.уатОстатокГСМнаТС(Объект.ДатаВыезда, Объект.ТранспортноеСредство, ОснТопливо, Объект.Ссылка);
		ОстатокТопливаВыездПриИзмененииСервер();
		
		Если ЗначениеЗаполнено(ДопТопливо) Тогда
			мсвСтрокиДопТопливо = Объект.РасходГСМ.НайтиСтроки(Новый Структура("ТС, ГСМ", Объект.ТранспортноеСредство, ДопТопливо));
			Если мсвСтрокиДопТопливо.Количество() > 0 Тогда
				мсвСтрокиДопТопливо[0].ОстатокПриВыезде = уатОбщегоНазначения.уатОстатокГСМнаТС(Объект.ДатаВыезда, Объект.ТранспортноеСредство, ДопТопливо, Объект.Ссылка);
				ПересчетРасходФактВСтрокеСервер(мсвСтрокиДопТопливо[0]);
			КонецЕсли;
		КонецЕсли;
		
		//обновляем остатки ТЖ ТС при выезде
		тблОстаткиТЖнаТС = Документы.уатПутевойЛист.ОстаткиТЖнаТС(Объект.ТранспортноеСредство, Объект.ДатаВыезда);
		Для Каждого ТекСтрокаТЖ Из тблОстаткиТЖнаТС Цикл
			мсвСтрокиТЖ = Объект.РасходГСМ.НайтиСтроки(Новый Структура("ТС, ГСМ", Объект.ТранспортноеСредство, ТекСтрокаТЖ.ТЖ));
			Если мсвСтрокиТЖ.Количество() > 0 Тогда
				мсвСтрокиТЖ[0].ОстатокПриВыезде = ТекСтрокаТЖ.Количество;
				ПересчетРасходФактВСтрокеСервер(мсвСтрокиТЖ[0]);
			КонецЕсли;
		КонецЦикла;
		
		Если ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(Объект.ТранспортноеСредство, "уатМодель"),
			"НаличиеСпидометра") = Истина Тогда
			Объект.СпидометрВыезда = уатОбщегоНазначения.уатТекущийСпидометр(Объект.ТранспортноеСредство, Объект.ДатаВыезда);
		Иначе
			Объект.СпидометрВыезда = уатОбщегоНазначения.уатТекущийСчетчикМЧ(Объект.ТранспортноеСредство, Объект.ДатаВыезда);
		КонецЕсли;
	КонецЕсли;
	
	СписокПрицепы = Новый СписокЗначений;
	Для Каждого ТекПрицеп Из Объект.Прицепы Цикл 
		Если СписокПрицепы.НайтиПоЗначению(ТекПрицеп.ТС) = Неопределено Тогда
			СписокПрицепы.Добавить(ТекПрицеп.ТС);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекЗадание Из Объект.Задание Цикл 
		Если ЗначениеЗаполнено(ТекЗадание.Прицеп1) И СписокПрицепы.НайтиПоЗначению(ТекЗадание.Прицеп1) = Неопределено Тогда
			СписокПрицепы.Добавить(ТекЗадание.Прицеп1,, Истина);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекЗадание.Прицеп2) И СписокПрицепы.НайтиПоЗначению(ТекЗадание.Прицеп2) = Неопределено Тогда
			СписокПрицепы.Добавить(ТекЗадание.Прицеп2,, Истина);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекПрицеп Из СписокПрицепы Цикл 
		//обновляем остатки топлива прицепов при выезде
		ТопливоПрицеп = ТекПрицеп.Значение.уатМодель.ОсновноеТопливо;
		Если ЗначениеЗаполнено(ТопливоПрицеп) Тогда
			мсвСтрокиТопливоПрицеп = Объект.РасходГСМ.НайтиСтроки(Новый Структура("ТС, ГСМ", ТекПрицеп.Значение, ТопливоПрицеп));
			Если мсвСтрокиТопливоПрицеп.Количество() > 0 Тогда
				мсвСтрокиТопливоПрицеп[0].ОстатокПриВыезде = уатОбщегоНазначения.уатОстатокГСМнаТС(Объект.ДатаВыезда, ТекПрицеп.Значение, ТопливоПрицеп, Объект.Ссылка);
				ПересчетРасходФактВСтрокеСервер(мсвСтрокиТопливоПрицеп[0]);
			КонецЕсли;
		КонецЕсли;
		
		//обновляем остатки ТЖ прицепов при выезде
		тблОстаткиТЖнаПрицепе = Документы.уатПутевойЛист.ОстаткиТЖнаТС(ТекПрицеп.Значение, Объект.ДатаВыезда);
		Для Каждого ТекСтрокаТЖ Из тблОстаткиТЖнаПрицепе Цикл
			мсвСтрокиТЖ = Объект.РасходГСМ.НайтиСтроки(Новый Структура("ТС, ГСМ", ТекПрицеп.Значение, ТекСтрокаТЖ.ТЖ));
			Если мсвСтрокиТЖ.Количество() > 0 Тогда
				мсвСтрокиТЖ[0].ОстатокПриВыезде = ТекСтрокаТЖ.Количество;
				ПересчетРасходФактВСтрокеСервер(мсвСтрокиТЖ[0]);
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ТекПрицеп.Пометка Тогда
			мсвСтрокаПрицеп = Объект.Прицепы.НайтиСтроки(Новый Структура("ТС", ТекПрицеп.Значение));
			Если ТекПрицеп.Значение.уатМодель.НаличиеСпидометра Тогда 
				мсвСтрокаПрицеп[0].СчетчикМЧВыезда = уатОбщегоНазначения.уатТекущийСпидометр(ТекПрицеп.Значение, Объект.ДатаВыезда);
			Иначе 
				мсвСтрокаПрицеп[0].СчетчикМЧВыезда = уатОбщегоНазначения.уатТекущийСчетчикМЧ(ТекПрицеп.Значение, Объект.ДатаВыезда);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.ДатаВыезда > Объект.ДатаВозвращения Тогда
		Объект.ДатаВозвращения = Объект.ДатаВыезда;
		ДатаВозвращенияПриИзмененииСервер();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ПриИзмененииОрганизации();
	НастроитьВидимостьЗатрат();
	СтруктураОбъектовНастроек = Новый Структура;
	СтруктураОбъектовНастроек.Вставить("Организация", Объект.Организация);
	СтруктураОбъектовНастроек.Вставить("Подразделение", ПодразделениеНастройки());
	Объект.РасчетФактРасходаГСМ = ПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, "РасчетФактРасходаГСМ");
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизации(ВызовПриОткрытии = Ложь)
	Если НЕ мКопированиеДокумента Тогда
		СтруктураОбъектовНастроек = Новый Структура;
		СтруктураОбъектовНастроек.Вставить("Организация", Объект.Организация);
		СтруктураОбъектовНастроек.Вставить("Подразделение", ПодразделениеНастройки());
		ОтветствЛица = Документы.уатПутевойЛист.ОтветственныеЛицаПоУмолчанию(СтруктураОбъектовНастроек, Объект.дата);
		ЗаполнитьЗначенияСвойств(Объект, ОтветствЛица);
	КонецЕсли;
	
	УстановитьФорматированиеТочностиОстатковГСМ();
	УстановитьДействителенДоПоУмолчанию();
	
	Если ПолучитьПраваИНастройкиПользователя(Объект.Организация, "ВестиУчетЗатрат")
		И ЗначениеЗаполнено(Объект.ТранспортноеСредство) И Объект.ТранспортноеСредство <> Неопределено Тогда
		Если Не уатОбщегоНазначения.уатНайтиПланЗатрат(Объект.ПланЗатрат, Объект.Организация, Объект.ТранспортноеСредство,
				ПолучитьЗначениеРеквизита(Объект.ТранспортноеСредство, "уатКолонна")) Тогда 
			Сообщить("Не найден план затрат!");
		КонецЕсли;	
	КонецЕсли;
	
	Элементы.ПланЗатрат.Видимость = ПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВестиУчетЗатрат"));
	
	ПоказыватьЗаданиеПЛ = ПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ПоказыватьЗаданиеПЛ"));
	Элементы.ГруппаЗадание.Видимость = ПоказыватьЗаданиеПЛ;
	Если НЕ ПоказыватьЗаданиеПЛ Тогда
		Объект.Задание.Очистить();
	КонецЕсли;
	
	Если ПолучитьПраваИНастройкиПользователя(Объект.Организация, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ИспользоватьУчетНормативногоРасходаТехЖидкостей")) = ЛОЖЬ Тогда
		мсвСтрокУдаления = Новый Массив;
		Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
			Если уатГСМ.ЭтоТехническаяЖидкость(ТекСтрока.ГСМ) Тогда
				мсвСтрокУдаления.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ТекСтрока Из мсвСтрокУдаления Цикл
			Объект.РасходГСМ.Удалить(ТекСтрока);
		КонецЦикла;
	КонецЕсли;
		
	Если (НЕ ЗначениеЗаполнено(Объект.ТранспортноеСредство)) И
			(НЕ ЗначениеЗаполнено(Объект.ВидПЛ)) И ВызовПриОткрытии = Истина
		ИЛИ (НЕ ЗначениеЗаполнено(Объект.ТранспортноеСредство)) И ВызовПриОткрытии = Ложь Тогда
		СтруктураОбъектовНастроек = Новый Структура;
		СтруктураОбъектовНастроек.Вставить("Организация", Объект.Организация);
		СтруктураОбъектовНастроек.Вставить("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
		Объект.ВидПЛ = ПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ОсновнойВидПЛ"));
	КонецЕсли;
	
	Если Объект.РежимРасчетаВыработки.Пустая() Тогда
		Объект.РежимРасчетаВыработки = ПолучитьПраваИНастройкиПользователя(Объект.Организация,
			ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ОсновнойРежимРасчетаВыработкиПЛ"));
	КонецЕсли;
	
	Если ВызовПриОткрытии = Истина И Объект.ДатаВыезда = '00010101' И Объект.ДатаВозвращения = '00010101' ИЛИ
			ВызовПриОткрытии = Ложь Тогда
		УстановитьДатыВыездаВозвращения();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.НомерПачки) Тогда
		Объект.НомерПачки = 0;
	КонецЕсли;	
	Элементы.НомерПачки.Видимость = ПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ИспользоватьУчетПутЛистовПоПачкам"));
		
	Если Объект.Организация <> Справочники.Организации.ПустаяСсылка() Тогда
		мВидимостьРеквизитовНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
			ПланыВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС);
	КонецЕсли;
		
	НастроитьВидимостьВыработки();
	
	ОбновитьКэшПравПоGPS();
	УстановитьВозможностьРедактированияДанныхПоGPS();
КонецПроцедуры

&НаКлиенте
Процедура ДатаВозвращенияПриИзменении(Элемент)
	Объект.ДатаЗакрытия = ?(Объект.ДатаВозвращения > Объект.ДатаВыезда, Объект.ДатаВозвращения - 1, Объект.ДатаВозвращения);
	Если Объект.ДатаВыезда > Объект.ДатаВозвращения Тогда
		Объект.ДатаВыезда = Объект.ДатаВозвращения;
		ДатаВыездаПриИзменении(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДатаВозвращенияПриИзмененииСервер()
	Объект.ДатаЗакрытия = ?(Объект.ДатаВозвращения > Объект.ДатаВыезда, Объект.ДатаВозвращения - 1, Объект.ДатаВозвращения);
	
	Если Объект.ДатаВыезда > Объект.ДатаВозвращения Тогда
		Объект.ДатаВыезда = Объект.ДатаВозвращения;
		ДатаВыездаПриИзмененииСервер();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОстатокТопливаВыездПриИзменении(Элемент)
	ОснТопливо = ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(Объект.ТранспортноеСредство, "уатМодель"),
		"ОсновноеТопливо");
	Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
		Если Объект.ТранспортноеСредство = ТекСтрока.ТС И ОснТопливо = ТекСтрока.ГСМ Тогда
			ТекСтрока.ОстатокПриВыезде = ОстатокТопливаВыезд;
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОстатокТопливаВыездПриИзмененииСервер()
	ОснТопливо = ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(Объект.ТранспортноеСредство, "уатМодель"), "ОсновноеТопливо");
	Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
		Если Объект.ТранспортноеСредство = ТекСтрока.ТС И ОснТопливо = ТекСтрока.ГСМ Тогда
			ТекСтрока.ОстатокПриВыезде = ОстатокТопливаВыезд;
			ПересчетРасходФактВСтрокеСервер(ТекСтрока);
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОстатокТопливаВозвратПриИзменении(Элемент)
	ОснТопливо = ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(Объект.ТранспортноеСредство, "уатМодель"),
		"ОсновноеТопливо");
	Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
		Если Объект.ТранспортноеСредство = ТекСтрока.ТС И ОснТопливо = ТекСтрока.ГСМ Тогда
			ТекСтрока.ОстатокПриВозвращении = ОстатокТопливаВозврат;
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОстатокТопливаВозвратПриИзмененииСервер()
	ОснТопливо = ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(Объект.ТранспортноеСредство, "уатМодель"), "ОсновноеТопливо");
	Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
		Если Объект.ТранспортноеСредство = ТекСтрока.ТС И ОснТопливо = ТекСтрока.ГСМ Тогда
			ТекСтрока.ОстатокПриВозвращении = ОстатокТопливаВозврат;
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыдатьГорючееНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ДопПараметры = Новый Структура("ЗначениеГСМДоИзменения, ИмяПроцедурыОписаниеОповещения", Объект.ВыдатьГорючее, "ОписаниеОповещенияВыдатьГорючее");
	уатЗащищенныеФункцииКлиент.СписокГСМдляТС(Объект.Организация, Объект.ТранспортноеСредство,
		ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Топливо"),,, ЭтаФорма, ДопПараметры);
КонецПроцедуры

// Подключаемый динамически обработчик оповещения
&НаКлиенте
Процедура ОписаниеОповещенияВыдатьГорючее(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		Объект.ВыдатьГорючее = Результат;
		Если ДопПараметры.ЗначениеГСМДоИзменения <> Результат Тогда 
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыдатьГорючееАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	мсвГруппДляОтбора = Новый Массив;
	мсвГруппДляОтбора.Добавить(ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Топливо"));
	ДопПараметры = Новый Структура("ТС, Организация, УчитыватьТЖ", Объект.ТранспортноеСредство, Объект.Организация, Ложь);
	ДанныеВыбора = уатГСМ.ПолучитьСписокАвтоподбораПоляГСМ(Текст, мсвГруппДляОтбора, ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ВыдатьГорючееОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ПараметрыПолученияДанных.СтрокаПоиска = "";
КонецПроцедуры

&НаКлиенте
Процедура РежимРаботыТСПриИзменении(Элемент)
	УстановитьДатыВыездаВозвращения();
	ПроверитьПредыдущийПЛНеРассчитан();
КонецПроцедуры

&НаСервере
Процедура РежимРаботыТСПриИзмененииСервер()
	УстановитьДатыВыездаВозвращения();
КонецПроцедуры

&НаКлиенте
Процедура ТемператураПриИзменении(Элемент)
	ПроцентИзмененияНормыТемпература = Строка(уатОбщегоНазначения.уатПолучитьКоэффициентИзмененияНормыДляТемпературы(
		Объект.Температура)) + "%";
КонецПроцедуры

&НаКлиенте
Процедура СпидометрВыездаПриИзменении(Элемент)
	ОбновитьНадписьПробег();
КонецПроцедуры

&НаКлиенте
Процедура СпидометрВозвращенияПриИзменении(Элемент)
	ОбновитьНадписьПробег();
КонецПроцедуры

&НаКлиенте
Процедура НомерТранспортноеСредствоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("уатВидМоделиТС", ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Автотранспорт"));
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("уатОрганизация", Объект.Организация);
	КонецЕсли;
	уатИнтерфейсВводаТС.НомерТСНачалоВыбора(Элемент, Объект.ТранспортноеСредство, СтруктураОтбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура НомерТранспортноеСредствоПриИзменении(Элемент)
 	уатИнтерфейсВводаТС.НомерТСПриИзменении(НомерТранспортноеСредство, Объект.ТранспортноеСредство, Объект.Организация);
	
	Если АвтомобильОлд = Объект.ТранспортноеСредство Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализацияДанныхАвтомобиля(Новый ОписаниеОповещения("НомерТранспортноеСредствоПриИзмененииЗавершение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура НомерТранспортноеСредствоПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    //Если ЗначениеЗаполнено(Объект.ТранспортноеСредство) Тогда
    
    
    Если ПолучитьПраваИНастройкиПользователя(Объект.Организация,	
        ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВестиУчетЗатрат")) Тогда
        Если Не уатОбщегоНазначения.уатНайтиПланЗатрат(Объект.ПланЗатрат, Объект.Организация, Объект.ТранспортноеСредство,
            ПолучитьЗначениеРеквизита(Объект.ТранспортноеСредство, "уатКолонна")) Тогда 
            
            Сообщить("Не найден план затрат!");
        КонецЕсли;	
    КонецЕсли;
    //КонецЕсли;
    
    АвтомобильОлд = Объект.ТранспортноеСредство;
    
    ВывестиТаблицуВыработкаТС();
    
    ОбновитьФлагПросроченныхДокументовТС();
    ОбновитьФлагПросроченныхДокументовВодителей();
    ОбновитьНадписьПробег();
    СформироватьСписокВыбораТСвЗаправкахГСМ();
    ОбновитьСписокВыбораЭкипажа();

КонецПроцедуры

&НаКлиенте
Процедура НомерТранспортноеСредствоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.НомерТСОбработкаВыбора(НомерТранспортноеСредство, Объект.ТранспортноеСредство, ВыбранноеЗначение, СтандартнаяОбработка, Объект.Организация);
	
	Если АвтомобильОлд = Объект.ТранспортноеСредство Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализацияДанныхАвтомобиля(Новый ОписаниеОповещения("НомерТранспортноеСредствоОбработкаВыбораЗавершение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура НомерТранспортноеСредствоОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    //Если ЗначениеЗаполнено(Объект.ТранспортноеСредство) Тогда
    
    
    Если ПолучитьПраваИНастройкиПользователя(Объект.Организация,
        ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВестиУчетЗатрат")) Тогда
        Если Не уатОбщегоНазначения.уатНайтиПланЗатрат(Объект.ПланЗатрат, Объект.Организация, Объект.ТранспортноеСредство,
            ПолучитьЗначениеРеквизита(Объект.ТранспортноеСредство, "уатКолонна")) Тогда 
            
            Сообщить("Не найден план затрат!");
        КонецЕсли;	
    КонецЕсли;
    //КонецЕсли;
    
    АвтомобильОлд = Объект.ТранспортноеСредство;
    
    ВывестиТаблицуВыработкаТС();
    
    Модифицированность = Истина;
    
    ОбновитьФлагПросроченныхДокументовТС();
    ОбновитьФлагПросроченныхДокументовВодителей();
    ОбновитьНадписьПробег();
    СформироватьСписокВыбораТСвЗаправкахГСМ();
    ОбновитьСписокВыбораЭкипажа();

КонецПроцедуры

&НаКлиенте
Процедура НомерТранспортноеСредствоОчистка(Элемент, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.НомерТСОчистка(Объект.ТранспортноеСредство);
КонецПроцедуры

&НаКлиенте
Процедура НомерТранспортноеСредствоОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(Неопределено, Объект.ТранспортноеСредство);
КонецПроцедуры

&НаКлиенте
Процедура НомерТранспортноеСредствоАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	ДопОтбор = Новый Структура("уатВидМоделиТС", ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Автотранспорт"));
	ДопПараметры = Новый Структура("Отбор", ДопОтбор);
	уатИнтерфейсВводаТС.НомерТСАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация, Ложь, ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура НомерТранспортноеСредствоОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ДопОтбор = Новый Структура("уатВидМоделиТС", ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Автотранспорт"));
	ДопПараметры = Новый Структура("Отбор", ДопОтбор);
	уатИнтерфейсВводаТС.НомерТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация, Ложь, ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура Водитель1ПриИзменении(Элемент)
	ПриИзменииВодителяСервер(1);
	ОбновитьФОВПриИзмененииВодителя();
	ВывестиТаблицуЗП();
КонецПроцедуры

&НаСервере
Процедура ПриИзменииВодителяСервер(НомерВодителя)
	ИнициализацияЗП();
	ВывестиТаблицуВыработкаСотрудников();
	ОбновитьФлагПросроченныхДокументовВодителей(НомерВодителя);
	
	//заполняем бригаду
	Если Объект.Бригада.Пустая() Тогда
		Если НомерВодителя = 1 Тогда
			текСотрудник = Объект.Водитель1.ФизическоеЛицо;
		ИначеЕсли НомерВодителя = 2 Тогда
			текСотрудник = Объект.Водитель2.ФизическоеЛицо;
		ИначеЕсли НомерВодителя = 3 Тогда
			текСотрудник = Объект.Сотрудник1.ФизическоеЛицо;
		Иначе
			текСотрудник = Объект.Сотрудник2.ФизическоеЛицо;
		КонецЕсли;
		Если ЗначениеЗаполнено(текСотрудник) Тогда
			Бригада_ = уатИнтерфейсВзаимодействияСERPСервер.ПолучитьБригадуСотрудника(текСотрудник,
				?(Объект.ДатаВыезда = '00010101', ТекущаяДата(), Объект.ДатаВыезда));
				
			Если ЗначениеЗаполнено(Бригада_) Тогда
				Объект.Бригада = Бригада_;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Водитель1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.Водитель1, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Водитель1Открытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.Водитель1, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Водитель1АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура Водитель1ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура Водитель2ПриИзменении(Элемент)
	ПриИзменииВодителяСервер(2);
	ОбновитьФОВПриИзмененииВодителя();
	ВывестиТаблицуЗП();
КонецПроцедуры

&НаКлиенте
Процедура Водитель2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.Водитель2, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Водитель2Открытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.Водитель2, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Водитель2АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура Водитель2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура Сотрудник1ПриИзменении(Элемент)
	ПриИзменииВодителяСервер(3);
	ОбновитьФОВПриИзмененииВодителя();
	ВывестиТаблицуЗП();
КонецПроцедуры

&НаКлиенте
Процедура Сотрудник1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.Сотрудник1, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Сотрудник1Открытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.Сотрудник1, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Сотрудник1АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура Сотрудник1ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура Сотрудник2ПриИзменении(Элемент)
	ПриИзменииВодителяСервер(4);
	ОбновитьФОВПриИзмененииВодителя();
	ВывестиТаблицуЗП();
КонецПроцедуры

&НаКлиенте
Процедура Сотрудник2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.Сотрудник2, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Сотрудник2Открытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.Сотрудник2, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Сотрудник2АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура Сотрудник2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ОсмотрелВрачНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.ОсмотрелВрач, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОсмотрелВрачОткрытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.ОсмотрелВрач, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОсмотрелВрачАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ОсмотрелВрачОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ВыдалДиспетчерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.ВыдалДиспетчер, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВыдалДиспетчерОткрытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.ВыдалДиспетчер, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВыдалДиспетчерАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ВыдалДиспетчерОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ВыпустилМеханикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.ВыпустилМеханик, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВыпустилМеханикОткрытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.ВыпустилМеханик, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВыпустилМеханикАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ВыпустилМеханикОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ПринялДиспетчерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.ПринялДиспетчер, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПринялДиспетчерОткрытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.ПринялДиспетчер, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПринялДиспетчерАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ПринялДиспетчерОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ПринялМеханикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.ПринялМеханик, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПринялМеханикОткрытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.ПринялМеханик, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПринялМеханикАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ПринялМеханикОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыПриИзменении(Элемент)
	ОбновитьНомераПрицепов();
	ОбновитьНадписьПробег();
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ПрицепыТСМодель" Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(Неопределено, ПолучитьЗначениеРеквизита(Элементы.Прицепы.ТекущиеДанные.ТС, "уатМодель"));
		
	ИначеЕсли Поле.Имя = "ПрицепыНомерТС" И (ТолькоПросмотр ИЛИ Элементы.Прицепы.ТолькоПросмотр ИЛИ НЕ Элементы.Прицепы.Доступность) Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(Неопределено, Элементы.Прицепы.ТекущиеДанные.ТС);
		
	ИначеЕсли Поле.Имя = "ПрицепыНадписьПробег" Тогда 
		СтандартнаяОбработка = Ложь;
		
		ТекСтрока = Элементы.Прицепы.ТекущиеДанные;
		Если ТекСтрока = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТолькоПросмотр",   мКэшПравGPS_ЗапретитьРучноеИзменениеПоказанийОдометра И уатОбщегоНазначения_проф.уатПроверитьИспользованиеGPS(ТекСтрока.ТС));
		ПараметрыФормы.Вставить("ПробегПоОдометру", ТекСтрока.СчетчикМЧВозвращения - ТекСтрока.СчетчикМЧВыезда);
		ПараметрыФормы.Вставить("ПробегПоGPS",      ТекСтрока.СчетчикМЧGPS);
		Если ЗначениеЗаполнено(ТекСтрока.ТС) И Не ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(ТекСтрока.ТС, "уатМодель"), "НаличиеСпидометра") Тогда
			ПараметрыФормы.Вставить("флМоточасы", Истина);
		КонецЕсли;
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ТекСтрока", ТекСтрока);
		
		Оповещение = Новый ОписаниеОповещения("ПрицепыНадписьПробегНажатиеЗавершение", ЭтотОбъект, ДопПараметры);
		
		ОткрытьФорму("Документ.уатПутевойЛист.Форма.ВводЗначенийПробега", ПараметрыФормы, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыНадписьПробегНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекСтрока = ДополнительныеПараметры.ТекСтрока;
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ТекСтрока.СчетчикМЧGPS = Результат.ПробегПоGPS;
		ТекСтрока.СчетчикМЧВозвращения = ТекСтрока.СчетчикМЧВыезда + Результат.ПробегПоОдометру;
		ОбновитьНадписьПробег();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока = Истина Тогда
		ПрицепОлд = "";
	Иначе
		ПрицепОлд = Элементы.Прицепы.ТекущиеДанные.ТС;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли; 
	
	ТекСтрока = Элементы.Прицепы.ТекущиеДанные;
	
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ТекСтрока.ТС) Тогда
		Если Объект.Прицепы.НайтиСтроки(Новый Структура("ТС", ТекСтрока.ТС)).Количество() > 1 Тогда
			Отказ = Истина;
			ПоказатьПредупреждение(Неопределено, "Прицеп/оборудование уже введен!", 30);
			
		ИначеЕсли ТекСтрока.ТС = Объект.ТранспортноеСредство Тогда
			Отказ = Истина;
			ПоказатьПредупреждение(Неопределено, "Нельзя установить оборудование на само себя!", 30);
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыПередУдалением(Элемент, Отказ)
	ИнициализацияДанныхПрицепа(Элементы.Прицепы.ТекущиеДанные.ТС, "");
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ВывестиТаблицуВыработкаТС();
	СформироватьСписокВыбораТСвЗаправкахГСМ();
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыПослеУдаления(Элемент)
	ВывестиТаблицуВыработкаТС();
	СформироватьСписокВыбораТСвЗаправкахГСМ();
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыНомерТСПриИзменении(Элемент)
	ТекСтрока = Элементы.Прицепы.ТекущиеДанные;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСПриИзменении(ТекСтрока.ТС, ТекСтрока.НомерТС, Объект.Организация);
	
	Если ПрицепОлд <> ТекСтрока.ТС Тогда
		ИнициализацияДанныхПрицепа(ПрицепОлд, ТекСтрока.ТС);
		Если ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(ТекСтрока.ТС, "уатМодель"), "НаличиеСпидометра") = Истина Тогда
			ТекСтрока.СчетчикМЧВыезда = уатОбщегоНазначения.уатТекущийСпидометр(ТекСтрока.ТС, Объект.ДатаВыезда);
		Иначе
			ТекСтрока.СчетчикМЧВыезда = уатОбщегоНазначения.уатТекущийСчетчикМЧ(ТекСтрока.ТС, Объект.ДатаВыезда);
		КонецЕсли;
		ТекСтрока.СчетчикМЧВозвращения = 0;
	КонецЕсли;
	
	ОбновитьНомераПрицепов();
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыНомерТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("уатОрганизация", Объект.Организация);
	КонецЕсли;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСНачалоВыбора(Элемент, Элементы.Прицепы.ТекущиеДанные.ТС, СтруктураОтбора, СтандартнаяОбработка)
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыНомерТСОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(Неопределено, Элементы.Прицепы.ТекущиеДанные.ТС);
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыНомерТСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекСтрока = Элементы.Прицепы.ТекущиеДанные;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОбработкаВыбора(ТекСтрока.ТС, ТекСтрока.НомерТС, ВыбранноеЗначение, СтандартнаяОбработка, Объект.Организация);
	
	Если ПрицепОлд <> ТекСтрока.ТС Тогда
		ИнициализацияДанныхПрицепа(ПрицепОлд, ТекСтрока.ТС);
		Если ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(ТекСтрока.ТС, "уатМодель"), "НаличиеСпидометра") = Истина Тогда
			ТекСтрока.СчетчикМЧВыезда = уатОбщегоНазначения.уатТекущийСпидометр(ТекСтрока.ТС, Объект.ДатаВыезда);
		Иначе
			ТекСтрока.СчетчикМЧВыезда = уатОбщегоНазначения.уатТекущийСчетчикМЧ(ТекСтрока.ТС, Объект.ДатаВыезда);
		КонецЕсли;
		ТекСтрока.СчетчикМЧВозвращения = 0;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыНомерТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.НомерТСАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	ПодразделениеПриИзмененииСервер();
	УстановитьВидимость();
КонецПроцедуры

&НаСервере
Процедура ПодразделениеПриИзмененииСервер()
	СтруктураОбъектовНастроек = Новый Структура;
	СтруктураОбъектовНастроек.Вставить("Организация", Объект.Организация);
	СтруктураОбъектовНастроек.Вставить("Подразделение", ПодразделениеНастройки());
	
	ВидПЛ_ТС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ТранспортноеСредство, "уатОсновнойВидПЛ");
	Если НЕ ЗначениеЗаполнено(ВидПЛ_ТС) Тогда
		ВидПЛ_ = ПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойВидПЛ);
		Если ЗначениеЗаполнено(ВидПЛ_) Тогда
			Объект.ВидПЛ = ВидПЛ_;
			ВидПЛПриИзмененииСервер();
		КонецЕсли;
	КонецЕсли;
	
	Объект.РежимРасчетаВыработки = ПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойРежимРасчетаВыработкиПЛ);
	Объект.РасчетФактРасходаГСМ = ПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.РасчетФактРасходаГСМ);
	
	ОтветствЛица = Документы.уатПутевойЛист.ОтветственныеЛицаПоУмолчанию(СтруктураОбъектовНастроек, Объект.Дата);
	ОсмотрелВрач_    = ОтветствЛица.ОсмотрелВрач;
	ВыдалДиспетчер_  = ОтветствЛица.ВыдалДиспетчер;
	ВыпустилМеханик_ = ОтветствЛица.ВыпустилМеханик;
	ПринялДиспетчер_ = ОтветствЛица.ПринялДиспетчер;
	ПринялМеханик_   = ОтветствЛица.ПринялМеханик;
	
	Если ЗначениеЗаполнено(ОсмотрелВрач_) Тогда
		Объект.ОсмотрелВрач = ОсмотрелВрач_;
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыдалДиспетчер_) Тогда
		Объект.ВыдалДиспетчер = ВыдалДиспетчер_;
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыпустилМеханик_) Тогда
		Объект.ВыпустилМеханик = ВыпустилМеханик_;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПринялДиспетчер_) Тогда
		Объект.ПринялДиспетчер = ПринялДиспетчер_;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПринялМеханик_) Тогда
		Объект.ПринялМеханик = ПринялМеханик_;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПробегНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр", мКэшПравGPS_ЗапретитьРучноеИзменениеПоказанийОдометра И уатОбщегоНазначения_проф.уатПроверитьИспользованиеGPS(Объект.ТранспортноеСредство));
	ПараметрыФормы.Вставить("ПробегПоОдометру", Объект.СпидометрВозвращения - Объект.СпидометрВыезда);
	ПараметрыФормы.Вставить("ПробегПоGPS", Объект.ПробегПоGPS);
	Если ЗначениеЗаполнено(Объект.ТранспортноеСредство) И
		НЕ ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(Объект.ТранспортноеСредство, "уатМодель"), "НаличиеСпидометра") Тогда
		
		ПараметрыФормы.Вставить("флМоточасы", Истина);
	КонецЕсли;
	
	Рез = Неопределено;
	
	ОткрытьФорму("Документ.уатПутевойЛист.Форма.ВводЗначенийПробега", ПараметрыФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("НадписьПробегНажатиеЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПробегНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Объект.ПробегПоGPS = Результат.ПробегПоGPS;
		Объект.СпидометрВозвращения = Объект.СпидометрВыезда + Результат.ПробегПоОдометру;
		ОбновитьНадписьПробег();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПрицепы(Команда)
	Если Объект.Прицепы.Количество() > 0 Тогда
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПрицепыЗавершение", ЭтотОбъект), "Перед заполнением табличная часть будет очищена! Продолжить?", РежимДиалогаВопрос.ОКОтмена);
        Возврат;
	КонецЕсли;
	
	ЗаполнитьПрицепыФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПрицепыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ <> КодВозвратаДиалога.ОК Тогда
        Возврат;
    КонецЕсли;
    
    ЗаполнитьПрицепыФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПрицепыФрагмент()
	
	Перем мсвСоставТС, мсвСтрокУдаления, НоваяСтрокаПрицеп, ТекПрицеп, ТекСтрока, ТекСтрокаУдаления;
	
	Объект.Прицепы.Очистить();
	
	мсвСтрокУдаления = Новый Массив;
	Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
		Если ТекСтрока.ТС <> Объект.ТранспортноеСредство Тогда
			мсвСтрокУдаления.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекСтрокаУдаления Из мсвСтрокУдаления Цикл
		Объект.РасходГСМ.Удалить(ТекСтрокаУдаления);
	КонецЦикла;
	
	мсвСоставТС = уатОбщегоНазначения.уатСоставТС(Объект.ТранспортноеСредство);
	Для Каждого ТекПрицеп Из мсвСоставТС Цикл
		Если ЗначениеЗаполнено(ТекПрицеп) Тогда
			НоваяСтрокаПрицеп = Объект.Прицепы.Добавить();
			НоваяСтрокаПрицеп.ТС = ТекПрицеп;
			
			Если ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(ТекПрицеп, "уатМодель"), "НаличиеСпидометра") = Истина Тогда
				НоваяСтрокаПрицеп.СчетчикМЧВыезда = уатОбщегоНазначения.уатТекущийСпидометр(ТекПрицеп, Объект.ДатаВыезда);
			Иначе
				НоваяСтрокаПрицеп.СчетчикМЧВыезда = уатОбщегоНазначения.уатТекущийСчетчикМЧ(ТекПрицеп, Объект.ДатаВыезда);
			КонецЕсли;
			
			ИнициализацияДанныхПрицепа(Неопределено, ТекПрицеп);
		КонецЕсли;
	КонецЦикла;
	
	ВывестиТаблицуВыработкаТС();
	ОбновитьНомераПрицепов();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗАДАНИЕ

&НаКлиенте
Процедура ЗаданиеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока = Истина И НЕ Копирование Тогда
		ТекСтрока = Элементы.Задание.ТекущиеДанные;
		ТекСтрока.УсловиеРаботы = Объект.УсловиеРаботы;
		ТекСтрока.Подразделение = Объект.Подразделение;
		ТекСтрока.ВидПеревозки = ПолучитьВидПеревозки(Объект.Организация, Объект.ТранспортноеСредство);
		
		ТекСтрока.ВремяПрибытия = Объект.ДатаВыезда;
		ТекСтрока.ВремяУбытия   = Объект.ДатаВозвращения;
		
		ТекСтрока.КоличествоЕздок = 1;
		Попытка
			ТекСтрока.Контрагент = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				ПользователиКлиентСервер.ТекущийПользователь(), "ОсновнойПокупатель");
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеПриАктивизацииСтроки(Элемент)
	ТекСтрока = Элементы.Задание.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	УстановитьОтборОбъектСтроительства(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеПриИзменении(Элемент)
	ОбновитьНомераПрицепов();
	ОбновитьНадписьСпецРабот();
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекСтрока = Элементы.Задание.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если Поле = Элементы.ЗаданиеНадписьСпецРаботы Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("ТолькоПросмотр", ТолькоПросмотр);
		ПараметрыОткрытия.Вставить("СпецРабота1", ТекСтрока.СпецРабота1);
		ПараметрыОткрытия.Вставить("СпецРабота2", ТекСтрока.СпецРабота2);
		ПараметрыОткрытия.Вставить("СпецРабота3", ТекСтрока.СпецРабота3);
		ПараметрыОткрытия.Вставить("СпецРабота4", ТекСтрока.СпецРабота4);
		ПараметрыОткрытия.Вставить("СпецРабота5", ТекСтрока.СпецРабота5);
		ПараметрыОткрытия.Вставить("КоличествоСпецРаботы1", ТекСтрока.КоличествоСпецРаботы1);
		ПараметрыОткрытия.Вставить("КоличествоСпецРаботы2", ТекСтрока.КоличествоСпецРаботы2);
		ПараметрыОткрытия.Вставить("КоличествоСпецРаботы3", ТекСтрока.КоличествоСпецРаботы3);
		ПараметрыОткрытия.Вставить("КоличествоСпецРаботы4", ТекСтрока.КоличествоСпецРаботы4);
		ПараметрыОткрытия.Вставить("КоличествоСпецРаботы5", ТекСтрока.КоличествоСпецРаботы5);
		Если ЗначениеЗаполнено(Объект.ТранспортноеСредство) Тогда
			ПараметрыОткрытия.Вставить("ТС", Объект.ТранспортноеСредство);
		КонецЕсли;
				
		Если ТолькоПросмотр Тогда
			Оповещение = Неопределено;
		Иначе
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияФормыРедактированияСпецРабот", ЭтотОбъект, ТекСтрока);
		КонецЕсли;
		
		ОткрытьФорму("Документ.уатПутевойЛист.Форма.ФормаРедактированияСпецРабот", ПараметрыОткрытия, ЭтотОбъект,,,, Оповещение);
		Возврат;
	КонецЕсли;
	
	Если ТолькоПросмотр Тогда
		Если Поле = Элементы.ЗаданиеУсловиеРаботы
			ИЛИ Поле = Элементы.ЗаданиеКонтрагент
			ИЛИ Поле = Элементы.ЗаданиеПодразделение
			ИЛИ Поле = Элементы.ЗаданиеМаршрут
			ИЛИ Поле = Элементы.ЗаданиеАдресПрибытия
			ИЛИ Поле = Элементы.ЗаданиеАдресУбытия
			ИЛИ Поле = Элементы.ЗаданиеНоменклатура
			ИЛИ Поле = Элементы.ЗаданиеВидПеревозки
			ИЛИ Поле = Элементы.ЗаданиеОбъектСтроительства Тогда
			ТекЗначение = ТекСтрока[Сред(Поле.Имя, 8)];
			ПоказатьЗначение(Неопределено, ТекЗначение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыРедактированияСпецРабот(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Или ДополнительныеПараметры = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РезультатЗакрытия.Свойство("СпецРабота1", ДополнительныеПараметры.СпецРабота1);
	РезультатЗакрытия.Свойство("СпецРабота2", ДополнительныеПараметры.СпецРабота2);
	РезультатЗакрытия.Свойство("СпецРабота3", ДополнительныеПараметры.СпецРабота3);
	РезультатЗакрытия.Свойство("СпецРабота4", ДополнительныеПараметры.СпецРабота4);
	РезультатЗакрытия.Свойство("СпецРабота5", ДополнительныеПараметры.СпецРабота5);
	РезультатЗакрытия.Свойство("КоличествоСпецРаботы1", ДополнительныеПараметры.КоличествоСпецРаботы1);
	РезультатЗакрытия.Свойство("КоличествоСпецРаботы2", ДополнительныеПараметры.КоличествоСпецРаботы2);
	РезультатЗакрытия.Свойство("КоличествоСпецРаботы3", ДополнительныеПараметры.КоличествоСпецРаботы3);
	РезультатЗакрытия.Свойство("КоличествоСпецРаботы4", ДополнительныеПараметры.КоличествоСпецРаботы4);
	РезультатЗакрытия.Свойство("КоличествоСпецРаботы5", ДополнительныеПараметры.КоличествоСпецРаботы5);
	
	ОбновитьНадписьСпецРабот();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеКоличествоЧасовПриИзменении(Элемент)
	ТекСтрока = Элементы.Задание.ТекущиеДанные;
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрока.КоличествоЧасов);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеПодачаПриИзменении(Элемент)
	ТекСтрока = Элементы.Задание.ТекущиеДанные;
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрока.Подача);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораГруза(Элемент, Элементы.Задание.ТекущиеДанные.Номенклатура, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеКонтрагентПриИзменении(Элемент)
	ТекСтрока = Элементы.Задание.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	УстановитьОтборОбъектСтроительства(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеМаршрутПриИзменении(Элемент)
	ТекСтрокаЗадание = Элементы.Задание.ТекущиеДанные;
	
	мМаршрут = ТекСтрокаЗадание.Маршрут;
	мМаршрутЭтапы = ЭтапыМаршрута(мМаршрут);
	Если мМаршрутЭтапы.Количество() > 0 Тогда
		ТекСтрокаЗадание.АдресПрибытия = мМаршрутЭтапы[0].ПунктОтправления;
		Если уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(мМаршрут, "ПредставлениеМаршрутаОднимПунктом") Тогда
			ТекСтрокаЗадание.АдресУбытия = мМаршрутЭтапы[мМаршрутЭтапы.Количество()-1].ПунктОтправления;
		Иначе	
			ТекСтрокаЗадание.АдресУбытия = мМаршрутЭтапы[мМаршрутЭтапы.Количество()-1].ПунктПрибытия;
		КонецЕсли;
	КонецЕсли;
		
	ТекСтрокаЗадание.КоличествоЕздок = 1;
	КоличествоКмГруз = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(мМаршрут, "Расстояние");
	КоличествоЧасов  = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(мМаршрут, "ВремяВПути");
	Если ЗначениеЗаполнено(КоличествоКмГруз) И ЗначениеЗаполнено(КоличествоЧасов) Тогда
		ТекСтрокаЗадание.КоличествоКмГруз = КоличествоКмГруз;
		ТекСтрокаЗадание.КоличествоЧасов  = КоличествоЧасов;
	Иначе
		РассчитатьРасстояниеВремяМеждуПунктами(ТекСтрокаЗадание);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеАдресПрибытияПриИзменении(Элемент)
	
	ТекСтрокаЗадание = Элементы.Задание.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекСтрокаЗадание.АдресПрибытия) 
		И ЗначениеЗаполнено(ТекСтрокаЗадание.АдресУбытия) Тогда
		РассчитатьРасстояниеВремяМеждуПунктами(ТекСтрокаЗадание)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеАдресУбытияПриИзменении(Элемент)
	
	ТекСтрокаЗадание = Элементы.Задание.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекСтрокаЗадание.АдресПрибытия) 
		И ЗначениеЗаполнено(ТекСтрокаЗадание.АдресУбытия) Тогда
		РассчитатьРасстояниеВремяМеждуПунктами(ТекСтрокаЗадание)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеОбъектСтроительстваПриИзменении(Элемент)
	ТекСтрока = Элементы.Задание.ТекущиеДанные;
	КонтрОбъекта = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(ТекСтрока.ОбъектСтроительства, "Заказчик");
	Если ЗначениеЗаполнено(КонтрОбъекта) Тогда
		ТекСтрока.Контрагент = КонтрОбъекта;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеНомерПрицепа1ПриИзменении(Элемент)
	ТекСтрока = Элементы.Задание.ТекущиеДанные;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСПриИзменении(ТекСтрока.Прицеп1, ТекСтрока.НомерПрицепа1, Объект.Организация);
	ИнициализацияДанныхПрицепа(ПрицепОлд, ТекСтрока.Прицеп1);
	//ОбновитьНомераПрицепов();
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеНомерПрицепа1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("уатОрганизация", Объект.Организация);
	КонецЕсли;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСНачалоВыбора(Элемент, Элементы.Задание.ТекущиеДанные.Прицеп1, СтруктураОтбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеНомерПрицепа1Очистка(Элемент, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОчистка(Элементы.Задание.ТекущиеДанные.Прицеп1);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеНомерПрицепа1Открытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(Неопределено, Элементы.Задание.ТекущиеДанные.Прицеп1);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеНомерПрицепа1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекСтрока = Элементы.Задание.ТекущиеДанные;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОбработкаВыбора(ТекСтрока.Прицеп1, ТекСтрока.НомерПрицепа1, ВыбранноеЗначение, СтандартнаяОбработка, Объект.Организация);
	ИнициализацияДанныхПрицепа(ПрицепОлд, ТекСтрока.Прицеп1);
	//ОбновитьНомераПрицепов();
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеНомерПрицепа1АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеНомерПрицепа1ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеНомерПрицепа2ПриИзменении(Элемент)
	ТекСтрока = Элементы.Задание.ТекущиеДанные;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСПриИзменении(ТекСтрока.Прицеп2, ТекСтрока.НомерПрицепа2, Объект.Организация);
	ИнициализацияДанныхПрицепа(ПрицепОлд, ТекСтрока.Прицеп2);
	//ОбновитьНомераПрицепов();
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеНомерПрицепа2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("уатОрганизация", Объект.Организация);
	КонецЕсли;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСНачалоВыбора(Элемент, Элементы.Задание.ТекущиеДанные.Прицеп2, СтруктураОтбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеНомерПрицепа2Очистка(Элемент, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОчистка(Элементы.Задание.ТекущиеДанные.Прицеп2);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеНомерПрицепа2Открытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(Неопределено, Элементы.Задание.ТекущиеДанные.Прицеп2);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеНомерПрицепа2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекСтрока = Элементы.Задание.ТекущиеДанные;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОбработкаВыбора(ТекСтрока.Прицеп2, ТекСтрока.НомерПрицепа2, ВыбранноеЗначение, СтандартнаяОбработка, Объект.Организация);
	ИнициализацияДанныхПрицепа(ПрицепОлд, ТекСтрока.Прицеп2);
	//ОбновитьНомераПрицепов();
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеНомерПрицепа2АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеНомерПрицепа2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеКоличествоЧасовПрицеп1ПриИзменении(Элемент)
	ТекСтрока = Элементы.Задание.ТекущиеДанные;
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрока.КоличествоЧасовПрицеп1);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеКоличествоЧасовПрицеп2ПриИзменении(Элемент)
	ТекСтрока = Элементы.Задание.ТекущиеДанные;
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрока.КоличествоЧасовПрицеп2);
КонецПроцедуры

&НаКлиенте
Процедура ТТДПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Рассчитан = Ложь;
	
	уатОбщегоНазначенияКлиент.ПроверитьЗаписьНовогоОбъектаВФорме(ЭтаФорма, Объект.Ссылка, "документ", Модифицированность, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВводТТДизПЛ", Истина);
	ПараметрыОткрытия.Вставить("ПЛ", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ТекСтрокаПЛ", Неопределено);
	Если Элементы.Задание.ТекущаяСтрока <> Неопределено Тогда
		ТекСтрокаЗадание = Объект.Задание.НайтиПоИдентификатору(Элементы.Задание.ТекущаяСтрока);
		Если ТекСтрокаЗадание <> Неопределено Тогда
			ПараметрыОткрытия.ТекСтрокаПЛ = ТекСтрокаЗадание.НомерСтроки-1;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("Документ.уатТТД.ФормаОбъекта", ПараметрыОткрытия, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВСуществующийТТД(Команда)
	флОтказ = Ложь;
	уатОбщегоНазначенияКлиент.ПроверитьЗаписьНовогоОбъектаВФорме(ЭтаФорма, Объект.Ссылка, "документ", Модифицированность, флОтказ);
	Если флОтказ Тогда
		Возврат;
	КонецЕсли;	
	
	ОтборФормыВыбораТТД = Новый Структура("Организация", Объект.Организация);
	
	ТекСтрокаПЛ = Неопределено;
	Если Элементы.Задание.ТекущаяСтрока <> Неопределено Тогда
		ТекСтрокаЗадание = Объект.Задание.НайтиПоИдентификатору(Элементы.Задание.ТекущаяСтрока);
		Если ТекСтрокаЗадание <> Неопределено Тогда
			ТекСтрокаПЛ = ТекСтрокаЗадание.НомерСтроки-1;
			Если ЗначениеЗаполнено(ТекСтрокаЗадание.Контрагент) Тогда
				ОтборФормыВыбораТТД.Вставить("Контрагент", ТекСтрокаЗадание.Контрагент);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	дТТД = Неопределено;

	
	ОткрытьФорму("Документ.уатТТД.ФормаВыбора", Новый Структура("Отбор", ОтборФормыВыбораТТД),,,,, Новый ОписаниеОповещения("ДобавитьВСуществующийТТДЗавершение", ЭтотОбъект, Новый Структура("ТекСтрокаПЛ", ТекСтрокаПЛ)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВСуществующийТТДЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекСтрокаПЛ = ДополнительныеПараметры.ТекСтрокаПЛ;
    
    
    дТТД = Результат;
    Если дТТД = Неопределено Тогда
        Возврат;
    КонецЕсли;	
    
    ПараметрыОткрытия = Новый Структура;
    ПараметрыОткрытия.Вставить("Ключ", дТТД);
    ПараметрыОткрытия.Вставить("ВводТТДизПЛ", Истина);
    ПараметрыОткрытия.Вставить("ПЛ", Объект.Ссылка);
    ПараметрыОткрытия.Вставить("ТекСтрокаПЛ", ТекСтрокаПЛ);
    
    ОткрытьФорму("Документ.уатТТД.ФормаОбъекта", ПараметрыОткрытия);
    
    //ФормаТТД.ТекущийЭлемент = ФормаТТД.ЭлементыФормы.Выработка;
    //ФормаТТД.ТекущийЭлемент.ТекущаяСтрока = докТТД.Выработка.Получить(докТТД.Выработка.Количество()-1);

КонецПроцедуры

&НаКлиенте
Процедура ТТДПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	УдалитьТТД(Элементы.ТТД.ТекущиеДанные);
	Элементы.ТТД.Обновить();
КонецПроцедуры

// Процедура удаляет строки из документы ТТД, соответствующие данному п/л. 
// Если строк не осталось, то сам документ помечаем на удаление.
//
&НаСервере
Процедура УдалитьТТД(вхТТДссылка) Экспорт
	
	вхТТД = вхТТДссылка.ПолучитьОбъект();
	
	мСтроки = вхТТД.Выработка.НайтиСтроки(Новый Структура("ПутЛист", Объект.Ссылка));
	Для сч = 0 По мСтроки.Количество() - 1 Цикл
		вхТТД.Выработка.Удалить(мСтроки[сч]);
	КонецЦикла;	
	
	мСтроки = вхТТД.Стоимость.НайтиСтроки(Новый Структура("ПутЛист", Объект.Ссылка));
	Для сч = 0 По мСтроки.Количество() - 1 Цикл
		вхТТД.Стоимость.Удалить(мСтроки[сч]);
	КонецЦикла;	
	
	//вхТТД.ПакетнаяОбработкаТиповыхДокументов = Ложь;
	Если вхТТД.Выработка.Количество() = 0 Тогда
		вхТТД.Записать();
		вхТТД.УстановитьПометкуУдаления(Истина);
	Иначе
		
		Если вхТТД.Проведен Тогда
			мРежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			мРежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		вхТТД.Записать(мРежимЗаписи);
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПРОСТОИ

&НаКлиенте
Процедура ПростоиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока и Не Копирование  Тогда
		Элементы.Простои.ТекущиеДанные.НачалоПростоя = НачалоДня(Объект.ДатаВыезда);
		Элементы.Простои.ТекущиеДанные.КонецПростоя = НачалоДня(Объект.ДатаВыезда);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВремяРаботыОтопителяПриИзменении(Элемент)
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ВремяРаботыОтопителя);
	Объект.ВремяРаботыОтопителя = уатОбщегоНазначения.уатВремяВСекунды(ВремяРаботыОтопителя);
КонецПроцедуры

&НаКлиенте
Процедура ПростоиНачалоПриИзменении(Элемент)
	ТекСтрока = Элементы.Простои.ТекущиеДанные;
	
	Если ТекСтрока.НачалоПростоя > ТекСтрока.КонецПростоя Тогда
		ТекСтрока.КонецПростоя = ТекСтрока.НачалоПростоя;
	КонецЕсли;	
	
	ТекСтрока.ВремяПростоя = '00010101' + (ТекСтрока.КонецПростоя - ТекСтрока.НачалоПростоя);	
КонецПроцедуры

&НаКлиенте
Процедура ПростоиКонецПростояПриИзменении(Элемент)
	ТекСтрока = Элементы.Простои.ТекущиеДанные;
	
	Если ТекСтрока.КонецПростоя = НачалоДня(ТекСтрока.КонецПростоя) Тогда //если конец простоя 0:00, то перещелкиваем на начало след. дня
		ТекСтрока.КонецПростоя = НачалоДня(ТекСтрока.НачалоПростоя) + 24*3600;
	ИначеЕсли НачалоДня(ТекСтрока.НачалоПростоя) <> НачалоДня(ТекСтрока.КонецПростоя) Тогда //если конец простоя не той же даты
		ТекСтрока.КонецПростоя = НачалоДня(ТекСтрока.НачалоПростоя) + (ТекСтрока.КонецПростоя - НачалоДня(ТекСтрока.КонецПростоя));
	КонецЕсли;
	
	Если ТекСтрока.НачалоПростоя > ТекСтрока.КонецПростоя Тогда
		ТекСтрока.НачалоПростоя = ТекСтрока.КонецПростоя;
	КонецЕсли;
	
	ТекСтрока.ВремяПростоя = '00010101' + (ТекСтрока.КонецПростоя - ТекСтрока.НачалоПростоя);
КонецПроцедуры

&НаКлиенте
Процедура ПростоиВремяПростояПриИзменении(Элемент)
	ТекСтрока = Элементы.Простои.ТекущиеДанные;
	Секунды = ТекСтрока.ВремяПростоя - Дата(1,1,1);
	ТекСтрока.КонецПростоя = ТекСтрока.НачалоПростоя + Секунды;
	Секунды = ТекСтрока.ВремяПростоя - Дата(1,1,1);
	ПроверкаДата = ТекСтрока.НачалоПростоя + Секунды;
	Если ПроверкаДата> КонецДня(ТекСтрока.НачалоПростоя) Тогда
		ТекСтрока.ВремяПростоя = Дата(1,1,1) + (КонецДня(ТекСтрока.НачалоПростоя)-59 - ТекСтрока.НачалоПростоя+60);
		ТекСтрока.КонецПростоя = ТекСтрока.НачалоПростоя +(КонецДня(ТекСтрока.НачалоПростоя)-59 - ТекСтрока.НачалоПростоя+60);
		ТекСтрока.КонецПростоя = ТекСтрока.КонецПростоя - 86400;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРАСХОД_ГСМ

&НаКлиенте
Процедура РасшифровкаРасходаГСМ(Команда)
	Перем СписокНормРасхода, Отказ;
	
	Отказ = Ложь;
	
	ТекСтрока = Элементы.РасходГСМ.ТекущиеДанные;
	
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	флЭтоТЖ = уатГСМ.ЭтоТехническаяЖидкость(ТекСтрока.ГСМ);
	Если флЭтоТЖ Тогда
		СписокНормРасхода = ПолучитьРасшифровкуРасходаТЖ(ТекСтрока.ТС, ТекСтрока.ГСМ);
	Иначе
		РассчитатьРасходГСМпоНорме(ТекСтрока.ТС, ТекСтрока.ГСМ, Отказ, СписокНормРасхода);
	КонецЕсли;
	
	Если Не Отказ Тогда
		ПараметрыОткрытия = Новый Структура("СписокНормРасхода", СписокНормРасхода);
		ОткрытьФорму("Документ.уатПутевойЛист.Форма.РасшифровкаНормыРасходаГСМ", ПараметрыОткрытия, ЭтаФорма,,,, Новый ОписаниеОповещения("РасшифровкаРасходаГСМЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаРасходаГСМЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
	Заглушка = Истина;    

КонецПроцедуры

&НаСервере
Процедура РассчитатьРасходГСМпоНорме(ТС, ГСМ, Отказ, СписокНормРасхода)
	уатЗащищенныеФункцииСервер.РасчитатьРасходГСМПоНорме(Объект, ТС, ГСМ, Объект.Организация, Отказ, СписокНормРасхода, Ложь);
КонецПроцедуры

&НаСервере
Функция ПолучитьРасшифровкуРасходаТЖ(ТС, ТЖ)
	Рез = Новый СписокЗначений();
	
	Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, "ИспользоватьУчетНормативногоРасходаТехЖидкостей") = ЛОЖЬ Тогда
		Возврат Рез;
	КонецЕсли;
	
	//получим нормы расхода тех. жидкостей
	тблНормыРасходаТЖ = уатОбщегоНазначения_проф.ПолучитьНормыРасходаТЖ(ТС, Объект.ДатаВозвращения, ТЖ);
	
	//получим общую наработку для прицепа/оборудования
	мМоточасы = 0;
	Если НЕ ТС.уатМодель.НаличиеСпидометра	И ТС <> Объект.ТранспортноеСредство Тогда
		Для Каждого ТекПрицеп Из Объект.Прицепы Цикл
			Если ТекПрицеп.ТС = ТС Тогда
				мМоточасы = мМоточасы + уатОбщегоНазначения.уатРазностьПоказанийСчетчика(
					ТекПрицеп.СчетчикМЧВыезда, ТекПрицеп.СчетчикМЧВозвращения);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ТекЗадание Из Объект.Задание Цикл
			Если ТекЗадание.Прицеп1 = ТС Тогда
				мМоточасы = мМоточасы + ТекЗадание.КоличествоЧасовПрицеп1;
			КонецЕсли;
			Если ТекЗадание.Прицеп2 = ТС Тогда
				мМоточасы = мМоточасы + ТекЗадание.КоличествоЧасовПрицеп2;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//формируем сводную таблицу прицепов
	тблПрицепы = Новый ТаблицаЗначений;
	тблПрицепы.Колонки.Добавить("ТС");
	тблПрицепы.Колонки.Добавить("Моточасы");
	Для Каждого ТекПрицеп Из Объект.Прицепы Цикл
		Если ЗначениеЗаполнено(ТекПрицеп.ТС) Тогда
			СтрокаПрицепа = тблПрицепы.Найти(ТекПрицеп.ТС, "ТС");
			Если СтрокаПрицепа = Неопределено Тогда
				СтрокаПрицепа = тблПрицепы.Добавить();
				СтрокаПрицепа.ТС = ТекПрицеп.ТС;
				СтрокаПрицепа.Моточасы = 0;
			КонецЕсли;
			СтрокаПрицепа.Моточасы = СтрокаПрицепа.Моточасы + уатОбщегоНазначения.уатРазностьПоказанийСчетчика(
				ТекПрицеп.СчетчикМЧВыезда, ТекПрицеп.СчетчикМЧВозвращения);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекЗадание Из Объект.Задание Цикл
		Если ЗначениеЗаполнено(ТекЗадание.Прицеп1) Тогда
			СтрокаПрицепа = тблПрицепы.Найти(ТекЗадание.Прицеп1, "ТС");
			Если СтрокаПрицепа = Неопределено Тогда
				СтрокаПрицепа = тблПрицепы.Добавить();
				СтрокаПрицепа.ТС = ТекЗадание.Прицеп1;
				СтрокаПрицепа.Моточасы = 0;
			КонецЕсли;
			СтрокаПрицепа.Моточасы = СтрокаПрицепа.Моточасы + ТекЗадание.КоличествоЧасовПрицеп1;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекЗадание.Прицеп2) Тогда
			СтрокаПрицепа = тблПрицепы.Найти(ТекЗадание.Прицеп2, "ТС");
			Если СтрокаПрицепа = Неопределено Тогда
				СтрокаПрицепа = тблПрицепы.Добавить();
				СтрокаПрицепа.ТС = ТекЗадание.Прицеп2;
				СтрокаПрицепа.Моточасы = 0;
			КонецЕсли;
			СтрокаПрицепа.Моточасы = СтрокаПрицепа.Моточасы + ТекЗадание.КоличествоЧасовПрицеп2;
		КонецЕсли;
	КонецЦикла;
	
	Если тблНормыРасходаТЖ.Количество() > 0 Тогда
		ТекСтрокаТЖ = тблНормыРасходаТЖ[0];
		СтрокиПоискаГСМ = Объект.РасходГСМ.НайтиСтроки(Новый Структура("ТС, ГСМ", ТС, ТС.уатМодель.ОсновноеТопливо));
		Если СтрокиПоискаГСМ.Количество() > 0 Тогда
			ТекСтрокаРасходГСМ = СтрокиПоискаГСМ[0];
			
			Если ТекСтрокаТЖ.НормаНаОснТопливо Тогда
				ТекРасходГСМ = ТекСтрокаРасходГСМ.РасходПоФакту * ТекСтрокаТЖ.Норма / 100;
				Если ТекРасходГСМ > 0 Тогда
					Рез.Добавить(Формат(ТекРасходГСМ, "ЧДЦ=3; ЧН=0"), "Расход на основное топливо");
				КонецЕсли;
			Иначе
				Если Объект.РаботаНаДвухВидахТоплива Тогда
					ТекПробег = ТекСтрокаРасходГСМ.Пробег;
				Иначе
					Если ТС.уатМодель.НаличиеСпидометра Тогда
						ТекПробег = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(Объект.СпидометрВыезда, Объект.СпидометрВозвращения);
					Иначе
						ТекПробег = 0;
					КонецЕсли;
				КонецЕсли;
				ТекРасходГСМ = ТекПробег * ТекСтрокаТЖ.ЛинейнаяНорма / 100;
				Если ТекРасходГСМ > 0 Тогда
					Рез.Добавить(Формат(ТекРасходГСМ, "ЧДЦ=3; ЧН=0"), "Расход на 100 км пробега (линейная норма)");
				КонецЕсли;
			КонецЕсли;
						
			флНаличиеСпидометра = ТекСтрокаРасходГСМ.ТС.уатМодель.НаличиеСпидометра;
			Если (НЕ флНаличиеСпидометра) И (ТекСтрокаТЖ.НормаНаМоточас > 0) Тогда //счетчик моточасов
				Если ТекСтрокаРасходГСМ.ТС = Объект.ТранспортноеСредство Тогда //ТС в шапке
					мМоточасы = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(Объект.СпидометрВыезда, Объект.СпидометрВозвращения);
				КонецЕсли;
				ТекРасходГСМ = мМоточасы * ТекСтрокаТЖ.НормаНаМоточас;
				Если ТекРасходГСМ > 0 Тогда
					Рез.Добавить(Формат(ТекРасходГСМ, "ЧДЦ=3; ЧН=0"), "Расход по моточасам");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура РаботаНаДвухВидахТопливаПриИзменении(Элемент)
	Элементы.РасходГСМПробег.Видимость = Объект.РаботаНаДвухВидахТоплива;
	
	ОснТопливо = ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(Объект.ТранспортноеСредство, "уатМодель"), "ОсновноеТопливо");
	ДопТопливо = ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(Объект.ТранспортноеСредство, "уатМодель"), "ДополнительноеТопливо");
	
	Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
		Если ТекСтрока.ТС <> Объект.ТранспортноеСредство Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекСтрока.ГСМ = ОснТопливо Тогда
			ТекСтрока.Пробег = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(Объект.СпидометрВыезда, Объект.СпидометрВозвращения);
			
		ИначеЕсли ТекСтрока.ГСМ = ДопТопливо Тогда
			ТекСтрока.Активен = Объект.РаботаНаДвухВидахТоплива;
			ТекСтрока.Пробег = 0;
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЭкономиюПережог()
	Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
		ТекСтрока.Экономия = ТекСтрока.РасходПоНорме - ТекСтрока.РасходПоФакту;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура РассчитатьЭкономиюПережогСервер()
	Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
		ТекСтрока.Экономия = ТекСтрока.РасходПоНорме - ТекСтрока.РасходПоФакту;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РасходГСМПриИзменении(Элемент)
	РассчитатьЭкономиюПережог();
	ОбновитьНомераТСвТаблицах();
	ОбновитьФлагЭтоТЖ_РасходГСМ();
КонецПроцедуры

&НаКлиенте
Процедура РасходГСМОстатокПриВыездеПриИзменении(Элемент)
	ПересчетОстаткаГСМ("ОстатокПриВыезде");
КонецПроцедуры

&НаКлиенте
Процедура РасходГСМОстатокПриВозвращенииПриИзменении(Элемент)
	ПересчетОстаткаГСМ("ОстатокПриВозвращении");
КонецПроцедуры

&НаКлиенте
Процедура РасходГСМРасходПоФактуПриИзменении(Элемент)
	ПересчетОстаткаГСМ("РасходПоФакту");
	ПересчитатьРасходТЖсервер();
КонецПроцедуры

&НаКлиенте
Процедура РасходГСМПробегПриИзменении(Элемент)
	мТекущиеДанные = Элементы.РасходГСМ.ТекущиеДанные;
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ТС", мТекущиеДанные.ТС);
	мСтроки = Объект.РасходГСМ.НайтиСтроки(ПараметрыОтбора);
	Для Каждого ТекСтрока Из мСтроки Цикл
		Если уатГСМ.ЭтоТехническаяЖидкость(ТекСтрока.ГСМ) Тогда
			Продолжить;
		КонецЕсли;
		Если ТекСтрока.ГСМ <> мТекущиеДанные.ГСМ Тогда
			ТекСтрока.Пробег = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(Объект.СпидометрВыезда,
				Объект.СпидометрВозвращения) - мТекущиеДанные.Пробег;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РасходГСМпоДаннымGPS(Команда)
	
	ЗаполнитьГСМПоGPSСервер();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьРасходТЖсервер()
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.РасчетРасходаТЖ();
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	ОбновитьНадписьСпецРабот();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗАПРАВКИ_ГСМ

&НаКлиенте
Процедура РедактироватьЗаправкуГСМВДиалоге(Команда)
	Элементы.РедактироватьЗаправкуГСМВДиалоге.Пометка = НЕ Элементы.РедактироватьЗаправкуГСМВДиалоге.Пометка;
	РедактироватьЗаправкуГСМВДиалоге = Элементы.РедактироватьЗаправкуГСМВДиалоге.Пометка;
	СохранитьНастройкиСервер();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСуществующуюЗаправку(Команда)
	Если Объект.Рассчитан Тогда
		Объект.Рассчитан = Ложь;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьСуществующуюЗаправкуЗавершение1", ЭтотОбъект), "Для выполнения данной операции необходимо записать документ. Продолжить?",
			РежимДиалогаВопрос.ОКОтмена);
        Возврат;
	КонецЕсли;
	
	ДобавитьСуществующуюЗаправкуФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСуществующуюЗаправкуЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ <> КодВозвратаДиалога.ОК Тогда
        Возврат;
    КонецЕсли;
    
    Если НЕ ПроверитьЗаполнениеДокумента() Тогда
        Возврат;
    КонецЕсли;
    
    Попытка
        Записать();
    Исключение
        Возврат;
    КонецПопытки;
    
    ДобавитьСуществующуюЗаправкуФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСуществующуюЗаправкуФрагмент()
    
    Перем дЗаправкаГСМ, СписТС, СтруктураОтбора, ТекСтрокаОборудование;
    
    СтруктураОтбора = Новый Структура;
    СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
    СтруктураОтбора.Вставить("Организация", Объект.Организация);
    
    СписТС = Новый СписокЗначений;
    СписТС.Добавить(Объект.ТранспортноеСредство);
    Для Каждого ТекСтрокаОборудование Из Объект.Прицепы Цикл
        СписТС.Добавить(ТекСтрокаОборудование.ТС);
    КонецЦикла;
    
    дЗаправкаГСМ = Неопределено;
    
    
    ОткрытьФорму("Документ.уатЗаправкаГСМ.ФормаВыбора", Новый Структура("Отбор, СписокТС",
    СтруктураОтбора, СписТС),,,,, Новый ОписаниеОповещения("ДобавитьСуществующуюЗаправкуЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСуществующуюЗаправкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	дЗаправкаГСМ = Результат;
	Если дЗаправкаГСМ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РедактироватьЗаправкуГСМВДиалоге Тогда
		ДобавитьЗаправкуГСМВДиалоге(, дЗаправкаГСМ);
	Иначе
		ДобавитьСуществующуюЗаправкуСервер(дЗаправкаГСМ);
		ДобавитьЗаправкуГСМВСписке();
		ОбновитьНадписьРассчитан();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСуществующуюЗаправкуСервер(дЗаправкаГСМ)
	ДокЗаправка = дЗаправкаГСМ.ПолучитьОбъект();
	ДокЗаправка.ПризнакРедактированияИзПутевогоЛиста = Истина;
	ДокЗаправка.ПризнакРедактированияИзПутевогоЛистаСсылка = Объект.Ссылка;
	ДокЗаправка.Заполнить(Объект.Ссылка);
	Если НЕ РедактироватьЗаправкуГСМВДиалоге Тогда
		ДокЗаправка.Записать();
	КонецЕсли;
	ЗначениеВРеквизитФормы(ДокЗаправка, "мДокументЗаправкаГСМ");
	ОбновитьНадписьСпецРабот();
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМПриИзменении(Элемент)
	ОбновитьНомераТС_ЗаправкиГСМ();
	ОбновитьФлагЭтоТЖ_РасходГСМ();
	ОбновитьКартинкиЗаправкиГСМ();
	ОбновитьЗаправкиВсего();
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	
	Если Объект.Рассчитан Тогда
		Объект.Рассчитан = Ложь;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаправкиГСМПередНачаломДобавленияЗавершение", ЭтотОбъект, Новый Структура("Копирование", Копирование)), "Для выполнения данной операции необходимо записать документ. Продолжить?", РежимДиалогаВопрос.ОКОтмена);
        Возврат;
	КонецЕсли;
	
	ЗаправкиГСМПередНачаломДобавленияФрагмент(Копирование);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМПередНачаломДобавленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Копирование = ДополнительныеПараметры.Копирование;
    
    
    Ответ = РезультатВопроса;
    Если Ответ <> КодВозвратаДиалога.ОК Тогда
        Возврат;
    КонецЕсли;
    
    Если НЕ ПроверитьЗаполнениеДокумента() Тогда
        Возврат;
    КонецЕсли;
    
    Попытка
        Записать();
    Исключение
        Возврат;
    КонецПопытки;
    
    ЗаправкиГСМПередНачаломДобавленияФрагмент(Копирование);

КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМПередНачаломДобавленияФрагмент(Знач Копирование)
	
	Перем мТекущаяСтрокаСтруктура;
	
	Если РедактироватьЗаправкуГСМВДиалоге Тогда
		ДобавитьЗаправкуГСМВДиалоге(Копирование);
	Иначе
		мТекущаяСтрокаСтруктура = СтруктураСтрокиЗаправкиГСМ();
		Если Копирование Тогда
			ЗаполнитьЗначенияСвойств(мТекущаяСтрокаСтруктура, Элементы.ЗаправкиГСМ.ТекущиеДанные);
		КонецЕсли;
		ДобавитьЗаправкуГСМсервер(Копирование, мТекущаяСтрокаСтруктура);
		ДобавитьЗаправкуГСМВСписке();
		
		ДобавитьЗаправкуГСМПродолжение(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМПередНачаломИзменения(Элемент, Отказ)
	Если РедактироватьЗаправкуГСМВДиалоге Тогда
		ИзменитьЗаправкуГСМВДиалоге();
		Отказ = Истина;
	Иначе
		ТекЗаправка = Элементы.ЗаправкиГСМ.ТекущиеДанные.Ссылка;
		НачалоИзмененияЗаправкиГСМсервер(ТекЗаправка);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НачалоИзмененияЗаправкиГСМсервер(ТекЗаправка)
	ДокЗаправка = ТекЗаправка.ПолучитьОбъект();
	ДокЗаправка.ПризнакРедактированияИзПутевогоЛиста = Истина;
	ДокЗаправка.ПризнакРедактированияИзПутевогоЛистаСсылка = Объект.Ссылка;
	ЗначениеВРеквизитФормы(ДокЗаправка, "мДокументЗаправкаГСМ");
	ОбновитьНадписьСпецРабот();
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗаправкуГСМсервер(флКопирование = Ложь, мТекущаяСтрокаСтруктура = Неопределено)
	Если флКопирование = Истина Тогда
		ДокОбъект = мТекущаяСтрокаСтруктура.Ссылка.Скопировать();
	Иначе
		ДокОбъект = Документы.уатЗаправкаГСМ.СоздатьДокумент();
	КонецЕсли;
	
	ДокОбъект.ПризнакРедактированияИзПутевогоЛиста = Истина;
	ДокОбъект.ПризнакРедактированияИзПутевогоЛистаСсылка = Объект.Ссылка;
	ДокОбъект.Заполнить(Объект.Ссылка);
	ДокОбъект.УчитыватьНДС = мВидимостьРеквизитовНДС;
	ДокОбъект.СуммаВключаетНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.СуммаВключаетНДС);
		
	Если флКопирование = Истина Тогда
		ДокОбъект.Заправки.Очистить();
		НоваяЗаправка = ДокОбъект.Заправки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗаправка, мТекущаяСтрокаСтруктура);
		НоваяЗаправка.ПутевойЛист = Объект.Ссылка;
	Иначе
		ДокОбъект.ВидДвиженияГСМ = ПолучитьПраваИНастройкиПользователя(Объект.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойВидЗаправки);
		ДокОбъект.АЗС = ПолучитьПраваИНастройкиПользователя(Объект.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнаяАЗС);
	КонецЕсли;
	
	Попытка
		ДокОбъект.Записать();
		ЗначениеВРеквизитФормы(ДокОбъект, "мДокументЗаправкаГСМ");
	Исключение
	КонецПопытки;
	ОбновитьНадписьСпецРабот();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаправкуГСМВДиалоге(флКопирование = Ложь, дЗаправкаГСМ = Неопределено)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ДобавлениеЗаправкиИзПЛ", Истина);
	ПараметрыОткрытия.Вставить("ПутевойЛист", Объект.Ссылка);
	Если дЗаправкаГСМ <> Неопределено Тогда
		ПараметрыОткрытия.Вставить("Ключ", дЗаправкаГСМ);
	КонецЕсли;
	Если флКопирование = Истина Тогда
		ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
		Если ТекСтрока <> Неопределено Тогда
			мТекущаяСтрокаСтруктура = СтруктураСтрокиЗаправкиГСМ();
			ЗаполнитьЗначенияСвойств(мТекущаяСтрокаСтруктура, ТекСтрока);
			мТекущаяСтрокаСтруктура.Договор = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.Ссылка, "ДоговорКонтрагента");
			ПараметрыОткрытия.Вставить("ЗаправкаКопирование", мТекущаяСтрокаСтруктура);
		КонецЕсли;
	КонецЕсли;
	
	ОповещениеОЗаписиЗаправки = Новый ОписаниеОповещения("ДобавитьЗаправкуГСМПродолжение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.уатЗаправкаГСМ.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект,,,, ОповещениеОЗаписиЗаправки, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Подключаемый динамически обработчик при добавлении заправки ГСМ.
&НаКлиенте
Процедура ДобавитьЗаправкуГСМПродолжение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ОбновитьНомераТС_ЗаправкиГСМ();
	ОбновитьФлагЭтоТЖ_РасходГСМ();
	
	ОбновитьКартинкиЗаправкиГСМ();
	ОбновитьЗаправкиВсего();
	ОбновитьНадписьРассчитан();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗаправкуГСМВДиалоге()
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("Ключ, РедактированиеЗаправкиИзПЛ, ПутевойЛист", ТекСтрока.Ссылка, Истина, Объект.Ссылка);
	
	ОткрытьФорму("Документ.уатЗаправкаГСМ.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗаправкуГСМВСписке()
	мТекущаяСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	мсвНайдСтроки = мДокументЗаправкаГСМ.Заправки.НайтиСтроки(Новый Структура("НомерСтроки", мТекущаяСтрока.НомерСтроки));
	Если мсвНайдСтроки.Количество() = 0 Тогда
		НайденнаяСтрока = Неопределено;
	Иначе
		НайденнаяСтрока = мсвНайдСтроки[0];
	КонецЕсли;
	
	Если НайденнаяСтрока = Неопределено Тогда
		ПоказатьПредупреждение(, "Ошибка при записи документа ""Заправка ГСМ""!
		|Возможно документ был изменен другим пользователем!");
	Иначе
		мТекущаяСтрокаСтруктура = СтруктураСтрокиЗаправкиГСМ();
		ЗаполнитьЗначенияСвойств(мТекущаяСтрокаСтруктура, мТекущаяСтрока);
		ИзменитьЗаправкуГСМВСпискеСервер(мТекущаяСтрокаСтруктура);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураСтрокиЗаправкиГСМ()
	Рез = Новый Структура;
	Для Каждого ТекРеквизит Из Метаданные.Документы.уатЗаправкаГСМ.ТабличныеЧасти.Заправки.Реквизиты Цикл
		Рез.Вставить(ТекРеквизит.Имя);
	КонецЦикла;
	Рез.Вставить("АЗС");
	Рез.Вставить("Договор");
	Рез.Вставить("ВидДвиженияГСМ");
	Рез.Вставить("Страна");
	Рез.Вставить("НомерСтроки");
	Рез.Вставить("Ссылка");
	Рез.Вставить("Соглашение");
	Рез.Вставить("ДатаЗаправки");
	Рез.Вставить("УчитыватьНДС");
	Рез.Вставить("СуммаВключаетНДС");
	
	Возврат Рез;
КонецФункции

&НаСервере
Процедура ИзменитьЗаправкуГСМВСпискеСервер(мТекущаяСтрокаСтруктура)
	Рез = Истина;
	
	ДокЗаправка = РеквизитФормыВЗначение("мДокументЗаправкаГСМ");
	ДокЗаправка.АЗС = мТекущаяСтрокаСтруктура.АЗС;
	ДокЗаправка.ВидДвиженияГСМ = мТекущаяСтрокаСтруктура.ВидДвиженияГСМ;
	ДокЗаправка.Страна = мТекущаяСтрокаСтруктура.Страна;
	ДокЗаправка.Дата = мТекущаяСтрокаСтруктура.Дата;
	ДокЗаправка.УчитыватьНДС	    = мТекущаяСтрокаСтруктура.УчитыватьНДС;
	ДокЗаправка.СуммаВключаетНДС	= мТекущаяСтрокаСтруктура.СуммаВключаетНДС;
	
	НайденнаяСтрока = ДокЗаправка.Заправки.Найти(мТекущаяСтрокаСтруктура.НомерСтроки, "НомерСтроки");
	НайденнаяСтрока.Дата 			= мТекущаяСтрокаСтруктура.ДатаЗаправки;
	НайденнаяСтрока.ТС 				= мТекущаяСтрокаСтруктура.ТС;
	НайденнаяСтрока.Водитель 		= мТекущаяСтрокаСтруктура.Водитель;
	НайденнаяСтрока.ГСМ 			= мТекущаяСтрокаСтруктура.ГСМ;
	НайденнаяСтрока.Цена 			= мТекущаяСтрокаСтруктура.Цена;
	НайденнаяСтрока.Количество 		= мТекущаяСтрокаСтруктура.Количество;
	НайденнаяСтрока.Сумма 			= мТекущаяСтрокаСтруктура.Сумма;
	НайденнаяСтрока.Валюта 			= мТекущаяСтрокаСтруктура.Валюта;
	НайденнаяСтрока.ПластиковаяКарта= мТекущаяСтрокаСтруктура.ПластиковаяКарта;
	НайденнаяСтрока.НомераТалонов	= мТекущаяСтрокаСтруктура.НомераТалонов;
	НайденнаяСтрока.СтавкаНДС	= мТекущаяСтрокаСтруктура.СтавкаНДС;
	Если ЗначениеЗаполнено(НайденнаяСтрока.СтавкаНДС) Тогда
		уатОбщегоНазначенияТиповыеСервер.уатРассчитатьСуммуНДСТабЧасти(НайденнаяСтрока, ДокЗаправка);
	КонецЕсли;
	
	НайденнаяСтрока.ВидЦеныПоставщика = мТекущаяСтрокаСтруктура.ВидЦеныПоставщика;
	ДокЗаправка.Соглашение = мТекущаяСтрокаСтруктура.Соглашение;
	ДокЗаправка.Партнер = ДокЗаправка.Соглашение.Партнер;
	
	Попытка
		ДокЗаправка.Записать(РежимЗаписиДокумента.Проведение);
		ЗначениеВРеквизитФормы(ДокЗаправка, "мДокументЗаправкаГСМ");
	Исключение
		Рез = Ложь;
	КонецПопытки;
	
	Если Рез Тогда
		ПересчетВыданногоГСМСервер();
		УстановитьПривилегированныйРежим(Истина);
		ЭтаФорма.Записать(Новый Структура("ЗаписьЗаправкиГСМ"));
	КонецЕсли;
	ОбновитьНадписьСпецРабот();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаправкуГСМВСписке()
	Если мДокументЗаправкаГСМ.Заправки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрокаНовойЗаправки = мДокументЗаправкаГСМ.Заправки[мДокументЗаправкаГСМ.Заправки.Количество()-1];
	
	НоваяСтрока = ЗаправкиГСМ.Добавить();
	НоваяСтрока.Ссылка = мДокументЗаправкаГСМ.Ссылка;
	НоваяСтрока.НомерСтроки	= ТекСтрокаНовойЗаправки.НомерСтроки;
	НоваяСтрока.Номер = мДокументЗаправкаГСМ.Номер;
	НоваяСтрока.Дата = мДокументЗаправкаГСМ.Дата;
	НоваяСтрока.ДатаЗаправки = ТекСтрокаНовойЗаправки.Дата;
	НоваяСтрока.АЗС = мДокументЗаправкаГСМ.АЗС;
	НоваяСтрока.ВидДвиженияГСМ = мДокументЗаправкаГСМ.ВидДвиженияГСМ;
	НоваяСтрока.ТС = ТекСтрокаНовойЗаправки.ТС;
	НоваяСтрока.Водитель = Объект.Водитель1;
	НоваяСтрока.ГСМ = ТекСтрокаНовойЗаправки.ГСМ;
	Если (НЕ ЗначениеЗаполнено(НоваяСтрока.ГСМ)) И ЗначениеЗаполнено(ТекСтрокаНовойЗаправки.ТС) Тогда
		НоваяСтрока.ГСМ = ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(ТекСтрокаНовойЗаправки.ТС, "уатМодель"),
			"ОсновноеТопливо");
		ЗаправкиПриИзмененииГСМ(НоваяСтрока);
	КонецЕсли;
	
	Если НоваяСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны")
		И (НЕ ЗначениеЗаполнено(НоваяСтрока.НомераТалонов))
		И ЗначениеЗаполнено(ТекСтрокаНовойЗаправки.НомераТалонов) Тогда
		
		НоваяСтрока.НомераТалонов = ТекСтрокаНовойЗаправки.НомераТалонов;
	КонецЕсли;
		
	Если (НоваяСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта")
		ИЛИ НоваяСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад"))
		И НЕ ЗначениеЗаполнено(НоваяСтрока.ПластиковаяКарта)
		И ЗначениеЗаполнено(ТекСтрокаНовойЗаправки.ПластиковаяКарта) Тогда
		
		НоваяСтрока.ПластиковаяКарта = ТекСтрокаНовойЗаправки.ПластиковаяКарта;
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.ПластиковаяКарта) Тогда
			НоваяСтрока.ПластиковаяКарта = уатОбщегоНазначения.уатПластиковаяКартаТСВодителя(ТекСтрокаНовойЗаправки.ТС,
				Объект.Водитель1);
		КонецЕсли;
		
	//ИначеЕсли НоваяСтрока.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаНаличные Тогда
	//	НоваяСтрока.Сумма = 0;
	КонецЕсли;
	
	НоваяСтрока.Количество = ТекСтрокаНовойЗаправки.Количество;
	НоваяСтрока.Цена = ТекСтрокаНовойЗаправки.Цена;
	НоваяСтрока.Сумма = ТекСтрокаНовойЗаправки.Сумма;
	НоваяСтрока.Валюта = ТекСтрокаНовойЗаправки.Валюта;
	
	Если НЕ ЗначениеЗаполнено(НоваяСтрока.Валюта) Тогда
		НоваяСтрока.Валюта = ВалютаРегламентированногоУчета();
	КонецЕсли;
	
	НоваяСтрока.ВидЦеныПоставщика = ТекСтрокаНовойЗаправки.ВидЦеныПоставщика;
	НоваяСтрока.Соглашение = мДокументЗаправкаГСМ.Соглашение;
	
	НоваяСтрока.УчитыватьНДС = мДокументЗаправкаГСМ.УчитыватьНДС;
	НоваяСтрока.СуммаВключаетНДС = мДокументЗаправкаГСМ.СуммаВключаетНДС;
		
	НоваяСтрока.СуммаНДС = ТекСтрокаНовойЗаправки.СуммаНДС;
	НоваяСтрока.СтавкаНДС = ТекСтрокаНовойЗаправки.СтавкаНДС;
	
	Элементы.ЗаправкиГСМ.ТекущаяСтрока = ЗаправкиГСМ[ЗаправкиГСМ.Количество() - 1].ПолучитьИдентификатор();
	ТекущийЭлемент = Элементы.ЗаправкиГСМКоличество;
	Элементы.ЗаправкиГСМКоличество.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
	
	ОбновитьНомераТС_ЗаправкиГСМ();
	ОбновитьКартинкиЗаправкиГСМ();
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	
	Если ЗаправкиГСМ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаправкиГСМПередУдалениемЗавершение", ЭтотОбъект, Новый Структура("ТекСтрока", ТекСтрока)), "Удалить заправку ГСМ?", РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ТекСтрока = ДополнительныеПараметры.ТекСтрока;
    
    Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
        ЗаправкаГСМСсылка = ТекСтрока.Ссылка;
		ЗаправкаГСМТС = ТекСтрока.ТС;
		ЗаправкаГСМДата = ТекСтрока.ДатаЗаправки;
		ЗаправкаГСМКоличество = ТекСтрока.Количество;
		ЗаправкиГСМ.Удалить(ТекСтрока);
		ЗаправкиГСМПередУдалениемЗавершениеСервер(ЗаправкаГСМСсылка, ЗаправкаГСМТС, ЗаправкаГСМДата, ЗаправкаГСМКоличество);
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаправкиГСМПередУдалениемЗавершениеСервер(ЗаправкаГСМСсылка, ЗаправкаГСМТС, ЗаправкаГСМДата, ЗаправкаГСМКоличество)
	УдалитьЗаправкуСервер(ЗаправкаГСМСсылка, ЗаправкаГСМТС, ЗаправкаГСМДата, ЗаправкаГСМКоличество);
	ПересчетВыданногоГСМСервер();
	УстановитьПривилегированныйРежим(Истина);
	Записать(Новый Структура("ЗаписьЗаправкиГСМ"));
КонецПроцедуры

&НаСервере
Процедура УдалитьЗаправкуСервер(ТекЗаправка, ТекТС, ТекДата, ТекКоличество)
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.УдалитьЗаправку(ТекЗаправка.ПолучитьОбъект(), ТекТС, ТекДата, ТекКоличество);
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	ОбновитьНадписьСпецРабот();
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ОбновитьСписокПластиковыхКарт();
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ОтменаРедактирования Тогда
		ВывестиТаблицуЗаправок();
		Возврат;
	КонецЕсли; 
	
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ТекСтрока.ТС) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, "Необходимо выбрать ТС!", 30);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекСтрока.Водитель) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, "Необходимо выбрать водителя!", 30);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекСтрока.ГСМ) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, "Необходимо выбрать ГСМ!", 30);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекСтрока.АЗС) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, "Необходимо выбрать АЗС!", 30);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекСтрока.ВидДвиженияГСМ) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, "Необходимо выбрать вид заправки!", 30);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекСтрока.Количество) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, "Необходимо указать количество!", 30);
		Возврат;
	ИначеЕсли (ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта")
		ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад")) Тогда
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ПластиковаяКарта) Тогда
			Отказ = Истина;
			ПоказатьПредупреждение(Неопределено, "Необходимо указать пластиковую карту!", 30);
			Возврат;
		ИначеЕсли ПластиковаяКартаПросрочена(ТекСтрока.ПластиковаяКарта,ТекСтрока.Дата) Тогда
			Отказ = Истина;
			ПоказатьПредупреждение(Неопределено, "Пластиковая карта просрочена!", 30);
			Возврат;
		КонецЕсли;
		
	ИначеЕсли (ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаНаличные")
		ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПоставщик")
		ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта"))
		И ТекСтрока.УчитыватьНДС
		И НЕ ЗначениеЗаполнено(ТекСтрока.СтавкаНДС) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, "Необходимо указать ставку НДС!",30);
		Возврат;
	КонецЕсли;
	
	Если Не РедактироватьЗаправкуГСМВДиалоге И Не Отказ Тогда
		Попытка
			ИзменитьЗаправкуГСМВСписке();
		Исключение
			Отказ = Истина;
		КонецПопытки;	
		// Сохранение индекса текущей строки
		ТекЗаправкаГСМ = Новый Структура();
		ТекЗаправкаГСМ.Вставить("Ссылка", ТекСтрока.Ссылка);
		ТекЗаправкаГСМ.Вставить("НомерСтроки", ТекСтрока.НомерСтроки);
		
		ВывестиТаблицуЗаправок();
		
		Элементы.ЗаправкиГСМ.Обновить();
		ТекСтрока = ЗаправкиГСМ.НайтиСтроки(ТекЗаправкаГСМ);
		Если ТекСтрока.Количество() <> 0 Тогда
			Элементы.ЗаправкиГСМ.ТекущаяСтрока = ТекСтрока[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ЗаправкиГСМКоличество.РежимРедактирования = РежимРедактированияКолонки.Вход;
	////Была отмена редактирования, нужно заново сформировать таблицу заправок
	//Если ОтменаРедактирования Тогда
	//	мИндекс = Элементы.ЗаправкиГСМ.ТекущиеДанные.ПолучитьИдентификатор();
	//	ВывестиТаблицуЗаправок();
	//	Элементы.ЗаправкиГСМ.ТекущаяСтрока = мИндекс;
	//КонецЕсли;
	ОбновитьНомераТС_ЗаправкиГСМ();
	ОбновитьФлагЭтоТЖ_РасходГСМ();
	//ОбновитьКартинкиЗаправкиГСМ();
	ОбновитьЗаправкиВсего();
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ЗаправкиГСМНомер Или Элементы.ЗаправкиГСМ.ТолькоПросмотр Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДанныеТСВЗаправкеГСМ(мТС)
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	ТекСтрока.ТС = мТС;
	
	Если ТекСтрока.ВидДвиженияГСМ <> ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны") Тогда
		ТекСтрока.ГСМ = ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(мТС, "уатМодель"), "ОсновноеТопливо");
		ЗаправкиПриИзмененииГСМ(ТекСтрока);
		
		Если ТекСтрока.ВидДвиженияГСМ =	ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта")
			ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад") Тогда
			ТекСтрока.ПластиковаяКарта = уатОбщегоНазначения.уатПластиковаяКартаТСВодителя(мТС, Объект.Водитель1);
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМТСПриИзменении(Элемент)
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСПриИзменении(ТекСтрока.ТС, ТекСтрока.НомерТС, Объект.Организация);
	
	Если ЗначениеЗаполнено(ТекСтрока.ТС) Тогда
		УстановитьДанныеТСВЗаправкеГСМ(ТекСтрока.ТС);
	КонецЕсли;
	
	Если ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта")
		ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад") Тогда
		Если ЗначениеЗаполнено(ТекСтрока.ТС)  Тогда
			ПластиковаяКарта = уатОбщегоНазначения.уатПластиковаяКартаТСВодителя(ТекСтрока.ТС,ТекСтрока.Водитель);
			Если ЗначениеЗаполнено(ПластиковаяКарта) Тогда
				ТекСтрока.ПластиковаяКарта = ПластиковаяКарта;
			Иначе
				ТекСтрока.ПластиковаяКарта = уатОбщегоНазначения.уатПластиковаяКартаТСВодителя(Объект.ТранспортноеСредство,Объект.Водитель1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьСписокПластиковыхКарт();
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Заглушка = Истина;
	//СтруктураОтбора = Новый Структура;
	//Если ЗначениеЗаполнено(Объект.Организация) Тогда
	//	СтруктураОтбора.Вставить("уатОрганизация", Объект.Организация);
	//КонецЕсли;
	//уатИнтерфейсВводаТС.ТабличноеПолеНомерТСНачалоВыбора(Элемент, Элементы.ЗаправкиГСМ.ТекущиеДанные.ТС, СтруктураОтбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМТСОткрытие(Элемент, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОткрытие(Элементы.ЗаправкиГСМ.ТекущиеДанные.ТС, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМТСОчистка(Элемент, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОчистка(Элементы.ЗаправкиГСМ.ТекущиеДанные.ТС);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМТСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Заглушка = Истина;
	//ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	//уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОбработкаВыбора(ТекСтрока.ТС, ТекСтрока.НомерТС, ВыбранноеЗначение, СтандартнаяОбработка, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	Заглушка = Истина;
	////формирование списка выбора ТС
	//Если Ожидание = 0 Тогда
	//	Элементы.ЗаправкиГСМТС.СписокВыбора.Очистить();
	//	Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
	//		Если Элементы.ЗаправкиГСМТС.СписокВыбора.НайтиПоЗначению(ТекСтрока.ТС) = Неопределено Тогда
	//			Элементы.ЗаправкиГСМТС.СписокВыбора.Добавить(ТекСтрока.ТС, ПредставлениеТС(ТекСтрока.ТС, Объект.Организация));
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	//
	//уатИнтерфейсВводаТС.ТабличноеПолеНомерТСАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	Заглушка = Истина;
	//уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМВодительПриИзменении(Элемент)
	мТС = Элементы.ЗаправкиГСМ.ТекущиеДанные.ТС;
	Если ЗначениеЗаполнено(мТС) Тогда
		УстановитьДанныеТСВЗаправкеГСМ(мТС);
	КонецЕсли;
	ОбновитьСписокПластиковыхКарт();
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМВодительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, ТекСтрока.Водитель,
		Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМВодительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМВодительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМВидЗаправкиПриИзменении(Элемент)
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	ТекСтрока.Сумма = ТекСтрока.Цена * ТекСтрока.Количество;
	РассчитатьСуммуНДС(ТекСтрока);
	//ТекСтрока.ГСМ = Неопределено;
	
	Если ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта")
		ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад") Тогда
		мТС = ТекСтрока.ТС;
		Если ЗначениеЗаполнено(мТС) Тогда
			УстановитьДанныеТСВЗаправкеГСМ(мТС);
		КонецЕсли;
	Иначе
		ТекСтрока.ПластиковаяКарта = Неопределено; 
	КонецЕсли;
	
	Если ТекСтрока.АЗС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьЗначениеРеквизита(ТекСтрока.АЗС, "ЭтоАЗССклад") = Ложь
		И (ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаСклад")
		ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад")
		ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны")) Тогда
		
		ТекСтрока.АЗС = Неопределено;
		Возврат;
	КонецЕсли;
	Если ПолучитьЗначениеРеквизита(ТекСтрока.АЗС, "ЭтоАЗССклад") = Истина 
		И (ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПоставщик")
		ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта")
		ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаНаличные")) Тогда
		
		ТекСтрока.АЗС = Неопределено;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМАЗСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	ЗаправкаСоСклада = (ТекСтрока.ВидДвиженияГСМ =
		ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаСклад")
		ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад")
		ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны"));
		
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор", Новый Структура("ЭтоАЗССклад", ?(ЗаправкаСоСклада, Истина, Ложь)));
	ПараметрыОткрытия.Вставить("ТекущаяСтрока", ТекСтрока.АЗС);
	ОткрытьФорму("Справочник.уатАЗС.ФормаВыбора", ПараметрыОткрытия, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМГСМНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.ЗаправкиГСМ.ТекущиеДанные.ВидДвиженияГСМ =
			ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны") Тогда
		мГруппаГСМ = ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Талон");
	Иначе	
		мГруппаГСМ = ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Топливо");
	КонецЕсли;
	
	ДопПараметры = Новый Структура("ЗначениеГСМДоИзменения, ИмяПроцедурыОписаниеОповещения", Элементы.ЗаправкиГСМ.ТекущиеДанные.ГСМ, "ОписаниеОповещенияЗаправкиГСМ");
	уатЗащищенныеФункцииКлиент.СписокГСМдляТС(Объект.Организация, Элементы.ЗаправкиГСМ.ТекущиеДанные.ТС, мГруппаГСМ,, Истина, ЭтаФорма, ДопПараметры);
КонецПроцедуры

// Подключаемый динамически обработчик оповещения
&НаКлиенте
Процедура ОписаниеОповещенияЗаправкиГСМ(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		Элементы.ЗаправкиГСМ.ТекущиеДанные.ГСМ = Результат;
		ЗаправкиГСМГСМПриИзменении(Неопределено);
		Если ДопПараметры.ЗначениеГСМДоИзменения <> Результат Тогда 
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМГСМПриИзменении(Элемент)
	ЗаправкиПриИзмененииГСМ(Элементы.ЗаправкиГСМ.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМАЗСПриИзменении(Элемент)
	ЗаправкиПриИзмененииГСМ(Элементы.ЗаправкиГСМ.ТекущиеДанные);
	
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	Контрагент_Склад = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.АЗС, "Контрагент_Склад");
	Если ТипЗнч(Контрагент_Склад) = Тип("СправочникСсылка.Контрагенты") Тогда
		Если уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(мДокументЗаправкаГСМ.ДоговорКонтрагента, "Контрагент") <> Контрагент_Склад Тогда
			мДокументЗаправкаГСМ.ДоговорКонтрагента = уатЗаполнениеДокументов.ПолучитьОсновнойДоговорКонтрагента(Контрагент_Склад, "СПоставщиком");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиПриИзмененииГСМ(ТекСтрока)
	СтруктураЦенаВалюта = уатОбщегоНазначения.уатНайтиЦенуНоменклатуры(ТекСтрока.Дата, ТекСтрока.ГСМ,
		ТекСтрока.ВидЦеныПоставщика, ТекСтрока.АЗС, ТекСтрока.Соглашение, Ложь);
	Если ЗначениеЗаполнено(СтруктураЦенаВалюта.Цена) Тогда
		ТекСтрока.Цена = СтруктураЦенаВалюта.Цена;
		ТекСтрока.Валюта = СтруктураЦенаВалюта.Валюта;
		ТекСтрока.Сумма = ТекСтрока.Цена*ТекСтрока.Количество;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМПластиковаяКартаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.уатТопливныеКарты.ФормаВыбора",, Элемент,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМКоличествоПриИзменении(Элемент)
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	ТекСтрока.Сумма = ТекСтрока.Цена * ТекСтрока.Количество;
	РассчитатьСуммуНДС(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМЦенаПриИзменении(Элемент)
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	ТекСтрока.Сумма = ТекСтрока.Цена * ТекСтрока.Количество;
	РассчитатьСуммуНДС(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМСуммаПриИзменении(Элемент)
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	ТекСтрока.Цена = ?(ТекСтрока.Количество = 0, 0, ТекСтрока.Сумма / ТекСтрока.Количество);
	РассчитатьСуммуНДС(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМСтавкаНДСПриИзменении(Элемент)
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	РассчитатьСуммуНДС(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМСоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	
	КонтрагентСклад = ПолучитьЗначениеРеквизита(ТекСтрока.АЗС, "Контрагент_Склад");
	Если ТипЗнч(КонтрагентСклад) = Тип("СправочникСсылка.Склады") Тогда 
		Возврат;
	КонецЕсли;
	
	уатИнтерфейсВзаимодействияСERPКлиент.уатНачалоВыбораСоглашенияСПоставщиком(
		Элемент,
		СтандартнаяОбработка,
		ПолучитьЗначениеРеквизита(КонтрагентСклад, "Партнер"),
		ТекСтрока.Соглашение,
		ТекСтрока.Дата,
		Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМСоглашениеПриИзменении(Элемент)
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	
	СтруктураСервер = Новый Структура("Соглашение, АЗС, ВидЦеныПоставщика",
		ТекСтрока.Соглашение,
		ТекСтрока.АЗС,
		ТекСтрока.ВидЦеныПоставщика);
	ПриИзмененииСоглашенияСервер(СтруктураСервер);
	ТекСтрока.АЗС = СтруктураСервер.АЗС;
	ТекСтрока.ВидЦеныПоставщика = Неопределено;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриИзмененииСоглашенияСервер(СтруктураСервер)
	Если ЗначениеЗаполнено(СтруктураСервер.Соглашение) Тогда
		Если СтруктураСервер.АЗС.Контрагент_Склад <> СтруктураСервер.Соглашение.Контрагент Тогда
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	уатАЗС.Ссылка
			|ИЗ
			|	Справочник.уатАЗС КАК уатАЗС
			|ГДЕ
			|	уатАЗС.Контрагент_Склад = &Контрагент_Склад
			|	И НЕ уатАЗС.ПометкаУдаления");
			Запрос.УстановитьПараметр("Контрагент_Склад", СтруктураСервер.Соглашение.Контрагент);
			ВыборкаАЗС = Запрос.Выполнить().Выбрать();
			Если ВыборкаАЗС.Следующий() Тогда
				СтруктураСервер.АЗС = ВыборкаАЗС.Ссылка;
			Иначе
				СтруктураСервер.АЗС = Неопределено;
			КонецЕсли;
		КонецЕсли;
		СтруктураСервер.ВидЦеныПоставщика = СтруктураСервер.Соглашение.ВидЦеныПоставщика;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМВидЦенНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	
	КонтрагентСклад = ПолучитьЗначениеРеквизита(ТекСтрока.АЗС, "Контрагент_Склад");
	Если ТипЗнч(КонтрагентСклад) = Тип("СправочникСсылка.Склады") Тогда 
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Владелец",        ПолучитьЗначениеРеквизита(КонтрагентСклад, "Партнер"));
	СтруктураОтбора.Вставить("ЦенаВключаетНДС", мДокументЗаправкаГСМ.СуммаВключаетНДС);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	
	ОткрытьФорму("Справочник.ВидыЦенПоставщиков.ФормаВыбора", ПараметрыФормы, Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСЛИВЫ_ГСМ

&НаСервере
Процедура НачалоИзмененияСливаГСМсервер(ТекДок)
	Док = ТекДок.ПолучитьОбъект();
	//Док.ПризнакРедактированияИзПутевогоЛиста = Истина;
	//Док.ПризнакРедактированияИзПутевогоЛистаСсылка = Объект.Ссылка;
	ЗначениеВРеквизитФормы(Док, "мДокументСливГСМ");
	ОбновитьНадписьСпецРабот();
КонецПроцедуры

&НаСервере
Процедура ДобавитьСливГСМсервер(флКопирование = Ложь, мТекущаяСтрокаСтруктура = Неопределено)
	Если флКопирование = Истина Тогда
		ДокОбъект = мТекущаяСтрокаСтруктура.Ссылка.Скопировать();
		ДокОбъект.Дата = мТекущаяСтрокаСтруктура.Дата;
	Иначе
		ДокОбъект = Документы.уатСливГСМ.СоздатьДокумент();
		ДокОбъект.Заполнить(Объект.Ссылка);
		ДокОбъект.ПутевойЛистПриемник = мТекущаяСтрокаСтруктура.ПутевойЛистПриемник;
	КонецЕсли;
	
	ДокОбъект.Записать();
	
	ЗначениеВРеквизитФормы(ДокОбъект, "мДокументСливГСМ");
	
	ОбновитьНадписьСпецРабот();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСливГСМВДиалоге(флКопирование = Ложь)
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ДобавлениеСливаИзПЛ", Истина);
	ПараметрыОткрытия.Вставить("ПутевойЛист", Объект.Ссылка);
	Если флКопирование = Истина Тогда
		ТекСтрока = Элементы.СливыГСМ.ТекущиеДанные;
		Если ТекСтрока <> Неопределено Тогда
			мТекущаяСтрокаСтруктура = СтруктураСтрокиСливаГСМ();
			ЗаполнитьЗначенияСвойств(мТекущаяСтрокаСтруктура, ТекСтрока);
			ПараметрыОткрытия.Вставить("СливКопирование", мТекущаяСтрокаСтруктура);
		КонецЕсли;
	КонецЕсли;
	
	ОповещениеОДобавленииСливаГСМ = Новый ОписаниеОповещения("ДобавитьСливГСМПродолжение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.уатСливГСМ.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект,,,, ОповещениеОДобавленииСливаГСМ, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

// Подключаемый динамически обработчик при добавлении слива ГСМ.
&НаКлиенте
Процедура ДобавитьСливГСМПродолжение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ОбновитьНомераТС_СливыГСМ();
	ОбновитьКартинкиСливыГСМ();
	
	ОбновитьНадписьРассчитан();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСливГСМВДиалоге()
	ТекСтрока = Элементы.СливыГСМ.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ, РедактированиеСливаИзПЛ, ПутевойЛист", ТекСтрока.Ссылка, Истина, Объект.Ссылка);
	
	ОткрытьФорму("Документ.уатСливГСМ.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Функция ИзменитьСливГСМВСписке()
	мТекущаяСтрока = Элементы.СливыГСМ.ТекущиеДанные;
	
	мТекущаяСтрокаСтруктура = СтруктураСтрокиСливаГСМ();
	ЗаполнитьЗначенияСвойств(мТекущаяСтрокаСтруктура, мТекущаяСтрока);
	
	Рез = ИзменитьСливГСМВСпискеСервер(мТекущаяСтрокаСтруктура);
	
	Возврат Рез;
КонецФункции

&НаСервереБезКонтекста
Функция СтруктураСтрокиСливаГСМ()
	Рез = Новый Структура;
	Рез.Вставить("ТС");
	Рез.Вставить("ГСМ");
	Рез.Вставить("АЗС");
	Рез.Вставить("Количество");
	Рез.Вставить("Дата");
	Рез.Вставить("ВидОперации");
	Рез.Вставить("Ссылка");
	Рез.Вставить("Проведен");
	Рез.Вставить("ПометкаУдаления");
	Рез.Вставить("Картинка");
	Рез.Вставить("ПутевойЛист");
	Рез.Вставить("ПутевойЛистПриемник");
	
	Возврат Рез;
КонецФункции

&НаСервере
Функция ИзменитьСливГСМВСпискеСервер(мТекущаяСтрокаСтруктура)
	Рез = Истина;
	
	Док = РеквизитФормыВЗначение("мДокументСливГСМ");
	Док.АЗС = мТекущаяСтрокаСтруктура.АЗС;
	Док.ВидОперации = мТекущаяСтрокаСтруктура.ВидОперации;
	Док.Дата = мТекущаяСтрокаСтруктура.Дата;
	Док.ТС = мТекущаяСтрокаСтруктура.ТС;
	Док.ГСМ = мТекущаяСтрокаСтруктура.ГСМ;
	Док.Количество = мТекущаяСтрокаСтруктура.Количество;
	Док.ПутевойЛистПриемник = мТекущаяСтрокаСтруктура.ПутевойЛистПриемник;
	
	Попытка
		Док.Записать(РежимЗаписиДокумента.Проведение);
		ЗначениеВРеквизитФормы(Док, "мДокументСливГСМ");

	Исключение
		Рез = Ложь;
	КонецПопытки;
	
	Если Рез Тогда
		ПересчетВыданногоГСМСервер();
		ПересчетСданногоГСМСервер();
		УстановитьПривилегированныйРежим(Истина);
		ЭтаФорма.Записать(Новый Структура("ЗаписьЗаправкиГСМ"));
	КонецЕсли;
	ОбновитьНадписьСпецРабот();
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура ДобавитьСливГСМВСписке()
	
	НоваяСтрока = СливыГСМ.Добавить();
	НоваяСтрока.Ссылка              = мДокументСливГСМ.Ссылка;
	НоваяСтрока.Номер               = мДокументСливГСМ.Номер;
	НоваяСтрока.Дата                = мДокументСливГСМ.Дата;
	НоваяСтрока.АЗС                 = мДокументСливГСМ.АЗС;
	НоваяСтрока.ВидОперации         = мДокументСливГСМ.ВидОперации;
	НоваяСтрока.ТС                  = мДокументСливГСМ.ТС;
	НоваяСтрока.ГСМ                 = мДокументСливГСМ.ГСМ;
	НоваяСтрока.ПутевойЛист         = мДокументСливГСМ.ПутевойЛист;
	НоваяСтрока.ПутевойЛистПриемник = мДокументСливГСМ.ПутевойЛистПриемник;
	
	Если (Не ЗначениеЗаполнено(НоваяСтрока.ГСМ)) И ЗначениеЗаполнено(НоваяСтрока.ТС) Тогда
		НоваяСтрока.ГСМ = ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(НоваяСтрока.ТС, "уатМодель"), "ОсновноеТопливо");
	КонецЕсли;
	
	НоваяСтрока.Количество      = мДокументСливГСМ.Количество;
	НоваяСтрока.Проведен        = мДокументСливГСМ.Проведен;
	НоваяСтрока.ПометкаУдаления = мДокументСливГСМ.ПометкаУдаления;
	НоваяСтрока.Картинка        = ?(НоваяСтрока.Проведен, 0, ?(НоваяСтрока.ПометкаУдаления, 1, 2));
	
	Элементы.СливыГСМ.ТекущаяСтрока = СливыГСМ[СливыГСМ.Количество() - 1].ПолучитьИдентификатор();
	ТекущийЭлемент = Элементы.СливыГСМКоличество;
	Элементы.СливыГСМКоличество.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
	
	ОбновитьНомераТС_СливыГСМ();
	ОбновитьКартинкиСливыГСМ();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьСливСервер(ТекДок)
	ДокСлив = ТекДок.ПолучитьОбъект();
	ДокСлив.ПутевойЛист = Неопределено;
	ДокСлив.Записать();
	ДокСлив.УстановитьПометкуУдаления(Истина);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСливГСМВДиалоге(Команда)
	Элементы.РедактироватьСливГСМВДиалоге.Пометка = НЕ Элементы.РедактироватьСливГСМВДиалоге.Пометка;
	РедактироватьСливГСМВДиалоге = Элементы.РедактироватьСливГСМВДиалоге.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМПриИзменении(Элемент)
	ОбновитьНомераТС_СливыГСМ();
	//ОбновитьКартинкиСливыГСМ();
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	
	Если Объект.Рассчитан Тогда
		Объект.Рассчитан = Ложь;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("СливыГСМПередНачаломДобавленияЗавершение", ЭтотОбъект, Новый Структура("Копирование", Копирование)), "Для выполнения данной операции необходимо записать документ. Продолжить?", РежимДиалогаВопрос.ОКОтмена);
        Возврат;
	КонецЕсли;
	
	СливыГСМПередНачаломДобавленияФрагмент(Копирование);
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМПередНачаломДобавленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Копирование = ДополнительныеПараметры.Копирование;
    
    
    Ответ = РезультатВопроса;
    Если Ответ <> КодВозвратаДиалога.ОК Тогда
        Возврат;
    КонецЕсли;
    
    Если НЕ ПроверитьЗаполнениеДокумента() Тогда
        Возврат;
    КонецЕсли;
    
    Попытка
        Записать(Новый Структура("ЗаписьЗаправкиГСМ"));
    Исключение
        Возврат;
    КонецПопытки;
    
    СливыГСМПередНачаломДобавленияФрагмент(Копирование);

КонецПроцедуры

&НаКлиенте
Процедура СливыГСМПередНачаломДобавленияФрагмент(Знач Копирование)
    
    Перем мТекущаяСтрокаСтруктура;
    
    Если РедактироватьСливГСМВДиалоге Тогда
        ДобавитьСливГСМВДиалоге(Копирование);
    Иначе
        мТекущаяСтрокаСтруктура = СтруктураСтрокиСливаГСМ();
        Если Копирование Тогда
            ЗаполнитьЗначенияСвойств(мТекущаяСтрокаСтруктура, Элементы.СливыГСМ.ТекущиеДанные);
        КонецЕсли;
        ДобавитьСливГСМсервер(Копирование, мТекущаяСтрокаСтруктура);
        ДобавитьСливГСМВСписке();
		
		ДобавитьСливГСМПродолжение(Неопределено, Неопределено);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.СливыГСМ.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(ТекущиеДанные.ТС) И Не ТекущиеДанные.ТС = Объект.ТранспортноеСредство)
			Или ПолучитьЗначениеРеквизита(ТекущиеДанные.ПутевойЛистПриемник, "Рассчитан") Тогда 
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если РедактироватьСливГСМВДиалоге Тогда
		ИзменитьСливГСМВДиалоге();
		Отказ = Истина;
	Иначе
		ТекДок = Элементы.СливыГСМ.ТекущиеДанные.Ссылка;
		НачалоИзмененияСливаГСМсервер(ТекДок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	
	Если СливыГСМ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элементы.СливыГСМ.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(ТекСтрока.ТС) И Не ТекСтрока.ТС = Объект.ТранспортноеСредство)
			Или ПолучитьЗначениеРеквизита(ТекСтрока.ПутевойЛистПриемник, "Рассчитан") Тогда 
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("СливыГСМПередУдалениемЗавершение", ЭтотОбъект, Новый Структура("ТекСтрока", ТекСтрока)), "Удалить слив ГСМ?", РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ТекСтрока = ДополнительныеПараметры.ТекСтрока;
    
    Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		СливГСМСсылка = ТекСтрока.Ссылка;
		СливыГСМ.Удалить(ТекСтрока);
		СливыГСМПередУдалениемЗавершениеСервер(СливГСМСсылка);
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СливыГСМПередУдалениемЗавершениеСервер(СливГСМСсылка)
	УдалитьСливСервер(СливГСМСсылка);
	ПересчетСданногоГСМСервер();
	УстановитьПривилегированныйРежим(Истина);
	Записать(Новый Структура("ЗаписьЗаправкиГСМ"));
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ОтменаРедактирования Тогда
		ВывестиТаблицуСливов();
		Возврат;
	КонецЕсли; 
	
	ТекСтрока = Элементы.СливыГСМ.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ТекСтрока.ТС) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(, "Необходимо выбрать ТС!", 30);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекСтрока.ГСМ) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(, "Необходимо выбрать ГСМ!", 30);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекСтрока.АЗС) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, "Необходимо выбрать АЗС!", 30);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекСтрока.ВидОперации) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(, "Необходимо выбрать вид слива!", 30);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекСтрока.Количество) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(, "Необходимо указать количество!", 30);
		Возврат;
	КонецЕсли;
	
	Если Не РедактироватьСливГСМВДиалоге И Не Отказ Тогда
		Попытка
			Рез = ИзменитьСливГСМВСписке();
		Исключение
			Рез = Ложь;
		КонецПопытки;
		Если НЕ Рез Тогда
			Отказ = Истина;
		КонецЕсли;
		ВывестиТаблицуСливов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СливыГСМКоличество.РежимРедактирования = РежимРедактированияКолонки.Вход;
	////Была отмена редактирования, нужно заново сформировать таблицу заправок
	//Если ОтменаРедактирования Тогда
	//	мИндекс = Элементы.СливыГСМ.ТекущиеДанные.ПолучитьИдентификатор();
	//	ВывестиТаблицуЗаправок();
	//	Элементы.ЗаправкиГСМ.ТекущаяСтрока = мИндекс;
	//КонецЕсли;
	ОбновитьНомераТС_СливыГСМ();
	ОбновитьКартинкиСливыГСМ();
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.СливыГСМНомер Или Элементы.СливыГСМ.ТолькоПросмотр Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМНомерТСПриИзменении(Элемент)
	ТекСтрока = Элементы.СливыГСМ.ТекущиеДанные;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСПриИзменении(ТекСтрока.ТС, ТекСтрока.НомерТС, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМНомерТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Заглушка = Истина;
	//СтруктураОтбора = Новый Структура;
	//Если ЗначениеЗаполнено(Объект.Организация) Тогда
	//	СтруктураОтбора.Вставить("уатОрганизация", Объект.Организация);
	//КонецЕсли;
	//уатИнтерфейсВводаТС.ТабличноеПолеНомерТСНачалоВыбора(Элемент, Элементы.СливыГСМ.ТекущиеДанные.ТС, СтруктураОтбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМНомерТСОткрытие(Элемент, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОткрытие(Элементы.СливыГСМ.ТекущиеДанные.ТС, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМНомерТСОчистка(Элемент, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОчистка(Элементы.СливыГСМ.ТекущиеДанные.ТС);
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМНомерТСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Заглушка = Истина;
	//ТекСтрока = Элементы.СливыГСМ.ТекущиеДанные;
	//уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОбработкаВыбора(ТекСтрока.ТС, ТекСтрока.НомерТС, ВыбранноеЗначение, СтандартнаяОбработка, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМНомерТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	Заглушка = Истина;
	////формирование списка выбора ТС
	//Если Ожидание = 0 Тогда
	//	Элементы.ЗаправкиГСМТС.СписокВыбора.Очистить();
	//	Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
	//		Если Элементы.ЗаправкиГСМТС.СписокВыбора.НайтиПоЗначению(ТекСтрока.ТС) = Неопределено Тогда
	//			Элементы.ЗаправкиГСМТС.СписокВыбора.Добавить(ТекСтрока.ТС, ПредставлениеТС(ТекСтрока.ТС, Объект.Организация));
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	//
	//уатИнтерфейсВводаТС.ТабличноеПолеНомерТСАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМНомерТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	Заглушка = Истина;
	//уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМВидСливаГСМПриИзменении(Элемент)
	ТекСтрока = Элементы.СливыГСМ.ТекущиеДанные;
	Если ТекСтрока.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийСливГСМ.НаТС") Тогда
		ТекСтрока.АЗС = ПредопределенноеЗначение("Справочник.ТранспортныеСредства.ПустаяСсылка");
	Иначе
		ТекСтрока.АЗС = ПредопределенноеЗначение("Справочник.уатАЗС.ПустаяСсылка");
		ТекСтрока.ПутевойЛистПриемник = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМГСМНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ДопПараметры = Новый Структура("ЗначениеГСМДоИзменения, ИмяПроцедурыОписаниеОповещения", Элементы.СливыГСМ.ТекущиеДанные.ГСМ, "ОписаниеОповещенияВыбораГСМ");
	уатЗащищенныеФункцииКлиент.СписокГСМдляТС(Объект.Организация, Элементы.СливыГСМ.ТекущиеДанные.ТС,
		ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Топливо"),, Истина, ЭтаФорма, ДопПараметры);
КонецПроцедуры

// Подключаемый динамически обработчик оповещения
&НаКлиенте
Процедура ОписаниеОповещенияВыбораГСМ(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		Элементы.СливыГСМ.ТекущиеДанные.ГСМ = Результат;
		Если ДопПараметры.ЗначениеГСМДоИзменения <> Результат Тогда 
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМАЗСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СливыГСМ.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийСливГСМ.НаТС") Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ПутевойЛистПриемник) И ТСПрисутствуетВПутевомЛисте(ТекущиеДанные.АЗС, ТекущиеДанные.ПутевойЛистПриемник) Тогда 
		Возврат;
	КонецЕсли;
	
	СписокЗаправок = ПолучитьПутевыеЛистыПоТС(ТекущиеДанные.АЗС, ТекущиеДанные.Дата);
	Если СписокЗаправок.Количество() Тогда 
		ТекущиеДанные.ПутевойЛистПриемник = СписокЗаправок[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМАЗСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.СливыГСМ.ТекущиеДанные;
	
	Если ТекСтрока.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийСливГСМ.НаТС") Тогда
		ОткрытьФорму("Справочник.ТранспортныеСредства.ФормаВыбора", , Элемент);
	Иначе
		СливНаСклад = (ТекСтрока.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийСливГСМ.НаСклад"));
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Отбор", Новый Структура("ЭтоАЗССклад", СливНаСклад));
		ПараметрыОткрытия.Вставить("ТекущаяСтрока", ТекСтрока.АЗС);
		ОткрытьФорму("Справочник.уатАЗС.ФормаВыбора", ПараметрыОткрытия, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМАЗСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СливыГСМ.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийСливГСМ.НаТС") Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ПутевойЛистПриемник) И ТСПрисутствуетВПутевомЛисте(ТекущиеДанные.АЗС, ТекущиеДанные.ПутевойЛистПриемник) Тогда 
		Возврат;
	КонецЕсли;
	
	СписокЗаправок = ПолучитьПутевыеЛистыПоТС(ТекущиеДанные.АЗС, ТекущиеДанные.Дата);
	Если СписокЗаправок.Количество() Тогда 
		ТекущиеДанные.ПутевойЛистПриемник = СписокЗаправок[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМПутевойЛистПриемникПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СливыГСМ.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийСливГСМ.НаТС") Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.АЗС) И ТСПрисутствуетВПутевомЛисте(ТекущиеДанные.АЗС, ТекущиеДанные.ПутевойЛистПриемник) Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.АЗС = ПолучитьЗначениеРеквизита(ТекущиеДанные.ПутевойЛистПриемник, "ТранспортноеСредство");
	
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМПутевойЛистПриемникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СливыГСМ.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийСливГСМ.НаТС") Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Ссылка", ПолучитьПутевыеЛистыПоТС(ТекущиеДанные.АЗС, ТекущиеДанные.Дата)));
	ОткрытьФорму("Документ.уатПутевойЛист.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМПутевойЛистПриемникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СливыГСМ.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийСливГСМ.НаТС") Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.АЗС) И ТСПрисутствуетВПутевомЛисте(ТекущиеДанные.АЗС, ВыбранноеЗначение) Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.АЗС = ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "ТранспортноеСредство");
	
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМПутевойЛистПриемникАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.СливыГСМ.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СписокПЛПодбор = ПолучитьПутевыеЛистыПоТС(ТекущиеДанные.АЗС, ТекущиеДанные.Дата, Текст);
	Если СписокПЛПодбор.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокПЛПодбор;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМПутевойЛистПриемникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СливыГСМ.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = ПолучитьПутевыеЛистыПоТС(ТекущиеДанные.АЗС, ТекущиеДанные.Дата, Текст);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВЫРАБОТКА

&НаКлиенте
Процедура ВыработкаТСПриИзменении(Элемент)
	ВывестиТаблицуВыработкаТС();
	ОбновитьПараметрВыработкиТСВременный();
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаТСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекСтрока = Элементы.ВыработкаТС.ТекущиеДанные;
	Если ПолучитьЗначениеРеквизита(ТекСтрока.ПараметрВыработки, "Временный") = Истина Тогда
		ТекСтрока.КоличествоФормат = ВремяВЧЧ_ММ(ТекСтрока.Количество);
		Элементы.ВыработкаТСКоличествоФормат.ФорматРедактирования = "ЧДЦ=2; ЧРД=:";
	ИначеЕсли ТекСтрока.ПараметрВыработки = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПробегСГрузом")
		ИЛИ ТекСтрока.ПараметрВыработки = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПробегПорожний") Тогда 
		Элементы.ВыработкаТСКоличествоФормат.ФорматРедактирования = "ЧДЦ=3";
	Иначе
		ТекСтрока.КоличествоФормат = ТекСтрока.Количество;
		Элементы.ВыработкаТСКоличествоФормат.ФорматРедактирования = "ЧДЦ=2; ЧРД=" + Сред(Строка(1.5), 2, 1) + "";
	КонецЕсли;
	//уатИнтерфейсВводаТС.ТабличноеПолеПриНачалеРедактирования(ЭлементыФормы.ВыработкаТС.ТекущаяСтрока.ТС,
	//	ЭлементыФормы.ВыработкаТС.Колонки.НомерТС, Организация);
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаТСТСПриИзменении(Элемент)
	ТекСтрока = Элементы.ВыработкаТС.ТекущиеДанные;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСПриИзменении(ТекСтрока.ТС, ТекСтрока.НомерТС, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаТСТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("уатОрганизация", Объект.Организация);
	КонецЕсли;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСНачалоВыбора(Элемент, Элементы.ВыработкаТС.ТекущиеДанные.ТС, СтруктураОтбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаТСТСОчистка(Элемент, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОчистка(Элементы.ВыработкаТС.ТекущиеДанные.ТС);
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаТСТСОткрытие(Элемент, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОткрытие(Элементы.ВыработкаТС.ТекущиеДанные.ТС, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаТСТСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекСтрока = Элементы.ВыработкаТС.ТекущиеДанные;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОбработкаВыбора(ТекСтрока.ТС, ТекСтрока.НомерТС, ВыбранноеЗначение, СтандартнаяОбработка, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаТСТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаТСТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаТСсводнаяПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекЭлем = Элементы.ВыработкаТСсводная.ТекущийЭлемент;
	Если ТекЭлем.Имя = "ВыработкаТСсводнаяПараметрВыработки" Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элементы.ВыработкаТСсводная.ТекущиеДанные;
	
	Если ТекСтрока.ПараметрВыработкиВременный Тогда
		//ТекСтрока[ТекИмяКолонкиДанных] = ВремяВЧЧ_ММ(ТекСтрока[ТекИмяКолонкиДанных]);
		ТекЭлем.ФорматРедактирования = "ЧДЦ=2; ЧРД=:";
	ИначеЕсли ТекСтрока.ПараметрВыработки = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПробегСГрузом")
		ИЛИ ТекСтрока.ПараметрВыработки = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПробегПорожний") Тогда 
		ТекЭлем.ФорматРедактирования = "ЧДЦ=3";
	Иначе
		//ТекСтрока[ТекИмяКолонкиДанных] = ВремяВЧЧ_ММ(ТекСтрока[ТекИмяКолонкиДанных]);
		ТекЭлем.ФорматРедактирования = "ЧДЦ=2; ЧРД=" + Сред(Строка(1.5), 2, 1) + "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаТСКоличествоФорматПриИзменении(Элемент)
	ТекСтрока = Элементы.ВыработкаТС.ТекущиеДанные;
	Если ПолучитьЗначениеРеквизита(ТекСтрока.ПараметрВыработки, "Временный") = Истина Тогда
		уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрока.КоличествоФормат);
		ТекСтрока.Количество = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрока.КоличествоФормат);
	Иначе
		ТекСтрока.Количество = ТекСтрока.КоличествоФормат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КоличествоВыработкиТСПриИзменении(Элемент)
	ТекСтрока = Элементы.ВыработкаТСсводная.ТекущиеДанные;
	
	Разделитель = Найти(Элемент.Имя, "_");
	Если Разделитель = 0 Тогда
		Возврат;
	КонецЕсли;
	ТекИмяКолонкиДанных = Сред(Элемент.Имя, Разделитель+1);
		
	мТС = мСоответствиеВыработкаТС[ТекИмяКолонкиДанных];
	мТекПарамВыработки = ТекСтрока.ПараметрВыработки;
	мТекПарамВыработкиВременный = ПолучитьЗначениеРеквизита(мТекПарамВыработки, "Временный");
	
	Если мТекПарамВыработкиВременный = Истина Тогда
		уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрока[ТекИмяКолонкиДанных]);
	КонецЕсли;
		
	мТекКоличество = ?(мТекПарамВыработкиВременный = Истина,
		уатОбщегоНазначения.уатВремяВСекунды(ТекСтрока[ТекИмяКолонкиДанных]), ТекСтрока[ТекИмяКолонкиДанных]);
	ЗаписатьСтрокуВыработкиТСсервер(мТС, мТекПарамВыработки, мТекКоличество);
	ОбновитьПараметрВыработкиТСВременный();
	
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСтрокуВыработкиТСсервер(мТС, мТекПарамВыработки, мТекКоличество)
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.ЗаписатьСтрокуВыработкиТС(мТС, мТекПарамВыработки, мТекКоличество,,,Истина);
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	ОбновитьНадписьСпецРабот();
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаСотрудниковПриИзменении(Элемент)
	ВывестиТаблицуВыработкаСотрудников();
	ОбновитьПараметрВыработкиСотрудниковВременный();
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаСотрудниковПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекСтрока = Элементы.ВыработкаСотрудников.ТекущиеДанные;
	Если ПолучитьЗначениеРеквизита(ТекСтрока.ПараметрВыработки, "Временный") Тогда
		ТекСтрока.КоличествоФормат = ВремяВЧЧ_ММ(ТекСтрока.Количество);
		Элементы.ВыработкаСотрудниковКоличествоФормат.ФорматРедактирования = "ЧДЦ=2; ЧРД=:";
	ИначеЕсли ТекСтрока.ПараметрВыработки = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПробегСГрузом")
		ИЛИ ТекСтрока.ПараметрВыработки = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПробегПорожний") Тогда 
		Элементы.ВыработкаСотрудниковКоличествоФормат.ФорматРедактирования = "ЧДЦ=3";
	Иначе
		ТекСтрока.КоличествоФормат = ТекСтрока.Количество;
		Элементы.ВыработкаСотрудниковКоличествоФормат.ФорматРедактирования = "ЧДЦ=2; ЧРД=" + Сред(Строка(1.5), 2, 1) + "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаСотрудниковСводнаяПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекЭлем = Элементы.ВыработкаСотрудниковСводная.ТекущийЭлемент;
	Если ТекЭлем.Имя = "ВыработкаСотрудниковсводнаяПараметрВыработки" Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элементы.ВыработкаСотрудниковСводная.ТекущиеДанные;
	
	Если ТекСтрока.ПараметрВыработкиВременный Тогда
		//ТекСтрока[ТекИмяКолонкиДанных] = ВремяВЧЧ_ММ(ТекСтрока[ТекИмяКолонкиДанных]);
		ТекЭлем.ФорматРедактирования = "ЧДЦ=2; ЧРД=:";
	ИначеЕсли ТекСтрока.ПараметрВыработки = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПробегСГрузом")
		ИЛИ ТекСтрока.ПараметрВыработки = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПробегПорожний") Тогда 
		ТекЭлем.ФорматРедактирования = "ЧДЦ=3";
	Иначе
		//ТекСтрока[ТекИмяКолонкиДанных] = ВремяВЧЧ_ММ(ТекСтрока[ТекИмяКолонкиДанных]);
		ТекЭлем.ФорматРедактирования = "ЧДЦ=2; ЧРД=" + Сред(Строка(1.5), 2, 1) + "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаСотрудниковКоличествоФорматПриИзменении(Элемент)
	ТекСтрока = Элементы.ВыработкаСотрудников.ТекущиеДанные;
	Если ПолучитьЗначениеРеквизита(ТекСтрока.ПараметрВыработки, "Временный") = Истина Тогда
		уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрока.КоличествоФормат);
		ТекСтрока.Количество = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрока.КоличествоФормат);
	Иначе
		ТекСтрока.Количество = ТекСтрока.КоличествоФормат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КоличествоВыработкиСотрудниковПриИзменении(Элемент)
	ТекСтрока = Элементы.ВыработкаСотрудниковСводная.ТекущиеДанные;
	
	Разделитель = Найти(Элемент.Имя, "_");
	Если Разделитель = 0 Тогда
		Возврат;
	КонецЕсли;
	ТекИмяКолонкиДанных = Сред(Элемент.Имя, Разделитель+1);
		
	мСотрудник = мСоответствиеВыработкаСотрудников[ТекИмяКолонкиДанных];
	мТекПарамВыработки = ТекСтрока.ПараметрВыработки;
	мТекПарамВыработкиВременный = ПолучитьЗначениеРеквизита(мТекПарамВыработки, "Временный");
	
	Если мТекПарамВыработкиВременный = Истина Тогда
		уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрока[ТекИмяКолонкиДанных]);
	КонецЕсли;
		
	мТекКоличество = ?(мТекПарамВыработкиВременный = Истина,
		уатОбщегоНазначения.уатВремяВСекунды(ТекСтрока[ТекИмяКолонкиДанных]), ТекСтрока[ТекИмяКолонкиДанных]);
	ЗаписатьСтрокуВыработкиСотрудникаСервер(мСотрудник, мТекПарамВыработки, мТекКоличество);
	ОбновитьПараметрВыработкиСотрудниковВременный();
	
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСтрокуВыработкиСотрудникаСервер(мСотрудник, мТекПарамВыработки, мТекКоличество)
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, мТекПарамВыработки, мТекКоличество,,,Истина);
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	ОбновитьНадписьСпецРабот();
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаСотрудниковСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Элементы.ВыработкаСотрудников.ТекущиеДанные.Сотрудник, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаСотрудниковСотрудникОткрытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Элементы.ВыработкаСотрудников.ТекущиеДанные.Сотрудник, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьВремяФОВ_Сервер()
	Для Каждого ТекСтрокаТЧ Из Объект.ФактическиОтработанноеВремя Цикл
		ТекСтрокаТЧ.ВремяДневноеФормат = ВремяВЧЧ_ММ_Сервер(ТекСтрокаТЧ.ВремяДневное);
		ТекСтрокаТЧ.ВремяНочноеФормат = ВремяВЧЧ_ММ_Сервер(ТекСтрокаТЧ.ВремяНочное);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаСотрудниковСотрудникАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаСотрудниковСотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗАРПЛАТА

&НаКлиенте
Процедура ЗарплатаСводнаяПриАктивизацииСтроки(Элемент)
	ТекСтрока = Элементы.ЗарплатаСводная.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Элементы.Зарплата.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("Сотрудник", ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка")));
	Иначе
		Элементы.Зарплата.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("Сотрудник", ТекСтрока.Сотрудник));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаСводнаяВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Элементы.ЗарплатаСводная.ТекущиеДанные.Сотрудник, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаСводнаяНачислятьЗарплатуПриИзменении(Элемент)
	ТекСтрокаЗП = Элементы.ЗарплатаСводная.ТекущиеДанные;
	
	//соотв. флаг расчета для сотрудника в шапке документа
	Если ТекСтрокаЗП.Сотрудник = Объект.Водитель1 Тогда
		Объект.НачислятьЗПВодителю1 = ТекСтрокаЗП.НачислятьЗарплату;
	ИначеЕсли ТекСтрокаЗП.Сотрудник = Объект.Водитель2 Тогда
		Объект.НачислятьЗПВодителю2 = ТекСтрокаЗП.НачислятьЗарплату;
	ИначеЕсли ТекСтрокаЗП.Сотрудник = Объект.Сотрудник1 Тогда
		Объект.НачислятьЗПСотруднику1 = ТекСтрокаЗП.НачислятьЗарплату;
	ИначеЕсли ТекСтрокаЗП.Сотрудник = Объект.Сотрудник2 Тогда
		Объект.НачислятьЗПСотруднику2 = ТекСтрокаЗП.НачислятьЗарплату;
	КонецЕсли;
	
	Если ТекСтрокаЗП.НачислятьЗарплату Тогда //перерасчет з/п по сотруднику
		Отказ_ = Ложь;
		РасчетЗПсервер(Отказ_, ТекСтрокаЗП.Сотрудник);
		ВывестиТаблицуЗП(ТекСтрокаЗП.Сотрудник);
		
	Иначе //удаляем предыдущие начисления по сотруднику, т.к. это в любом случае нужно сделать
		мЗП = Объект.Зарплата.НайтиСтроки(Новый Структура("Сотрудник", ТекСтрокаЗП.Сотрудник));
		Сч = Объект.Зарплата.Количество()-1;
		Пока Сч >= 0 Цикл
			ТекСтрока = Объект.Зарплата[Сч];
			Если ТекСтрока.Сотрудник = ТекСтрокаЗП.Сотрудник Тогда
				Объект.Зарплата.Удалить(Сч);
			КонецЕсли;
			Сч = Сч - 1;
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РасчетЗПсервер(Отказ, ТекСотрудник)
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.РасчетЗП(Отказ, ТекСотрудник);
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	ОбновитьНадписьСпецРабот();
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаПередНачаломИзменения(Элемент, Отказ)
	Если НЕ Элементы.Зарплата.ТекущиеДанные.РучнойВвод Тогда
		Сообщить("Редактировать начисления можно только для ручного ввода и вида начисления ""Фиксированной суммой""!",
			СтатусСообщения.Внимание);
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаПередУдалением(Элемент, Отказ)
	Если НЕ Элементы.Зарплата.ТекущиеДанные.РучнойВвод Тогда
		Сообщить("Редактировать начисления можно только для ручного ввода и вида начисления ""Фиксированной суммой""!",
			СтатусСообщения.Внимание);
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаПослеУдаления(Элемент)
	ВывестиТаблицуЗП();
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ТекСтрока = Элементы.Зарплата.ТекущиеДанные;
		ТекСтрока.РучнойВвод = Истина;
		
		ТекСтрокаЗППоСотрудникам = Элементы.ЗарплатаСводная.ТекущиеДанные;
		Если ТекСтрокаЗППоСотрудникам <> Неопределено Тогда
			ТекСтрока.Сотрудник = ТекСтрокаЗППоСотрудникам.Сотрудник;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекСтрокаЗППоСотрудникам = Элементы.ЗарплатаСводная.ТекущиеДанные;
	мТекСотрудник = Неопределено;
	Если ТекСтрокаЗППоСотрудникам <> Неопределено Тогда
		мТекСотрудник = ТекСтрокаЗППоСотрудникам.Сотрудник;
	КонецЕсли;
	
	ВывестиТаблицуЗП(мТекСотрудник);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыручка

//Процедура заполняет таблицу списком заправок
//
&НаКлиенте
Процедура ВывестиТаблицуВыручки()
	
	Выручка.Очистить();
	Для Каждого ТекСтрока Из ПолучитьТаблицуВыручкиСервер(Объект.Ссылка) Цикл
		НоваяСтрока = Выручка.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

//Процедура заполняет таблицу списком заправок
//
&НаСервере
Процедура ВывестиТаблицуВыручкиСервер()
	
	Выручка.Очистить();
	Для Каждого ТекСтрока Из ПолучитьТаблицуВыручкиСервер(Объект.Ссылка) Цикл
		НоваяСтрока = Выручка.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТаблицуВыручкиСервер(Ссылка)
	Возврат уатЗащищенныеФункцииСервер_проф.ПолучитьВыручкуДляПЛ(Ссылка);
КонецФункции

&НаСервере
Процедура ОбновитьКартинкиВыручка()
	Для Каждого ТекСтрока Из Выручка Цикл
		Если ТекСтрока.Ссылка.Проведен Тогда
			ТекСтрока.Картинка = 0;
		ИначеЕсли ТекСтрока.Ссылка.ПометкаУдаления Тогда
			ТекСтрока.Картинка = 1;
		Иначе
			ТекСтрока.Картинка = 2;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура НачалоИзмененияВыручкиСервер(ТекДок)
	Док = ТекДок.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(Док, "мДокументВыручка");
	ОбновитьНадписьСпецРабот();
КонецПроцедуры

&НаСервере
Процедура ДобавитьВыручкуСервер(флКопирование = Ложь, мТекущаяСтрокаСтруктура = Неопределено)
	Если флКопирование = Истина Тогда
		ДокОбъект = мТекущаяСтрокаСтруктура.Ссылка.Скопировать();
		ДокОбъект.Дата = мТекущаяСтрокаСтруктура.Дата;
	Иначе
		ДокОбъект = Документы.уатВыручкаВодителей.СоздатьДокумент();
		ДокОбъект.Заполнить(Объект.Ссылка);
	КонецЕсли;
	
	ДокОбъект.Записать();
	
	ЗначениеВРеквизитФормы(ДокОбъект, "мДокументВыручка");
	ОбновитьНадписьСпецРабот();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВыручкуВДиалоге(флКопирование = Ложь)
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ДобавлениеВыручкиИзПЛ", Истина);
	ПараметрыОткрытия.Вставить("ПутевойЛист", Объект.Ссылка);
	Если флКопирование = Истина Тогда
		ТекСтрока = Элементы.Выручка.ТекущиеДанные;
		Если ТекСтрока <> Неопределено Тогда
			мТекущаяСтрокаСтруктура = СтруктураСтрокиВыручки();
			ЗаполнитьЗначенияСвойств(мТекущаяСтрокаСтруктура, ТекСтрока);
			ПараметрыОткрытия.Вставить("ВыручкаКопирование", мТекущаяСтрокаСтруктура);
			ПараметрыОткрытия.Вставить("ЗначениеКопирования", мТекущаяСтрокаСтруктура.Ссылка);
		КонецЕсли;
	КонецЕсли;
	ОткрытьФорму("Документ.уатВыручкаВодителей.ФормаОбъекта", ПараметрыОткрытия, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыручкуВДиалоге()
	ТекСтрока = Элементы.Выручка.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Ключ", ТекСтрока.Ссылка);
	ПараметрыОткрытия.Вставить("РедактированиеВыручкиИзПЛ", Истина);
	ПараметрыОткрытия.Вставить("ПутевойЛист", Объект.Ссылка);
	
	ОткрытьФорму("Документ.уатВыручкаВодителей.ФормаОбъекта", ПараметрыОткрытия,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Функция ИзменитьВыручкуВСписке()
	мТекущаяСтрока = Элементы.Выручка.ТекущиеДанные;
	
	мТекущаяСтрокаСтруктура = СтруктураСтрокиВыручки();
	ЗаполнитьЗначенияСвойств(мТекущаяСтрокаСтруктура, мТекущаяСтрока);
	
	Рез = ИзменитьВыручкуВСпискеСервер(мТекущаяСтрокаСтруктура);
	
	Возврат Рез;
КонецФункции

&НаСервереБезКонтекста
Функция СтруктураСтрокиВыручки()
	Рез = Новый Структура;
	Рез.Вставить("Сотрудник");
	Рез.Вставить("ПутевойЛист");
	Рез.Вставить("Количество");
	Рез.Вставить("Сумма");
	Рез.Вставить("Дата");
	Рез.Вставить("ВидОперации");
	Рез.Вставить("Ссылка");
	Рез.Вставить("Проведен");
	Рез.Вставить("ПометкаУдаления");
	Рез.Вставить("Картинка");
	
	Возврат Рез;
КонецФункции

&НаСервере
Функция ИзменитьВыручкуВСпискеСервер(мТекущаяСтрокаСтруктура)
	Рез = Истина;
	
	Док = РеквизитФормыВЗначение("мДокументВыручка");
	Док.Сотрудник = мТекущаяСтрокаСтруктура.Сотрудник;
	Док.ПутевойЛист = Объект.Ссылка;
	Док.Дата = мТекущаяСтрокаСтруктура.Дата;
	Док.Количество = мТекущаяСтрокаСтруктура.Количество;
	Док.Сумма = мТекущаяСтрокаСтруктура.Сумма;
	
	Попытка
		Док.Записать(РежимЗаписиДокумента.Проведение);
		ЗначениеВРеквизитФормы(Док, "мДокументВыручка");
	Исключение
		Рез = Ложь;
	КонецПопытки;
	ОбновитьНадписьСпецРабот();
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура ДобавитьВыручкуВСписке()
	НоваяСтрока = Выручка.Добавить();
	НоваяСтрока.Ссылка = мДокументВыручка.Ссылка;
	НоваяСтрока.Номер = мДокументВыручка.Номер;
	НоваяСтрока.Дата = мДокументВыручка.Дата;
	НоваяСтрока.Сотрудник = мДокументВыручка.Сотрудник;
	НоваяСтрока.Количество = мДокументВыручка.Количество;
	НоваяСтрока.Сумма = мДокументВыручка.Сумма;
	НоваяСтрока.Проведен = мДокументВыручка.Проведен;
	НоваяСтрока.ПометкаУдаления = мДокументВыручка.ПометкаУдаления;
	НоваяСтрока.Картинка = ?(НоваяСтрока.Проведен, 0, ?(НоваяСтрока.ПометкаУдаления, 1, 2));
		
	Элементы.Выручка.ТекущаяСтрока = Выручка[Выручка.Количество() - 1].ПолучитьИдентификатор();
	ТекущийЭлемент = Элементы.ВыручкаКоличество;
	Элементы.ВыручкаКоличество.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
	
	ОбновитьКартинкиВыручка();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьВыручкуСервер(ТекДок)
	ДокВыручка = ТекДок.ПолучитьОбъект();
	ДокВыручка.ПутевойЛист = Неопределено;
	ДокВыручка.Записать();
	ДокВыручка.УстановитьПометкуУдаления(Истина);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьВыручкуВДиалоге(Команда)
	Элементы.РедактироватьВыручкуВДиалоге.Пометка = НЕ Элементы.РедактироватьВыручкуВДиалоге.Пометка;
	РедактироватьВыручкуВДиалоге = Элементы.РедактироватьВыручкуВДиалоге.Пометка;
	СохранитьНастройкиСервер();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСуществующуюВыручку(Команда)
	Если Объект.Рассчитан Тогда
		Объект.Рассчитан = Ложь;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьСуществующуюВыручкуЗавершение1", ЭтотОбъект), "Для выполнения данной операции необходимо записать документ. Продолжить?",
			РежимДиалогаВопрос.ОКОтмена);
        Возврат;
	КонецЕсли;
	
	ДобавитьСуществующуюВыручкуФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСуществующуюВыручкуЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ <> КодВозвратаДиалога.ОК Тогда
        Возврат;
    КонецЕсли;
    
    Если НЕ ПроверитьЗаполнениеДокумента() Тогда
        Возврат;
    КонецЕсли;
    
    ДобавитьСуществующуюВыручкуФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСуществующуюВыручкуФрагмент()
    
    СтруктураОтбора = Новый Структура;
    СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
    СтруктураОтбора.Вставить("Организация", Объект.Организация);
    
    ОткрытьФорму("Документ.уатВыручкаВодителей.ФормаВыбора", Новый Структура("Отбор", СтруктураОтбора),,,,,
		Новый ОписаниеОповещения("ДобавитьСуществующуюВыручкуЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСуществующуюВыручкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если Результат = Неопределено Тогда
        Возврат;
    КонецЕсли;	
    
    ДобавитьСуществующуюВыручкуСервер(Результат);
    
    Если РедактироватьВыручкуВДиалоге Тогда
        ДобавитьВыручкуВДиалоге();
    Иначе
        ДобавитьВыручкуВСписке();
    КонецЕсли;
    
    ОбновитьНадписьРассчитан();

КонецПроцедуры

&НаСервере
Процедура ДобавитьСуществующуюВыручкуСервер(докСсылка)
	Док = докСсылка.ПолучитьОбъект();
	//Док.ПризнакРедактированияИзПутевогоЛистаСсылка = Объект.Ссылка;
	//Док.Заполнить(Объект.Ссылка);
	Док.ПутевойЛист = Объект.Ссылка;
	Если НЕ РедактироватьВыручкуВДиалоге Тогда
		Док.Записать();
	КонецЕсли;
	ЗначениеВРеквизитФормы(Док, "мДокументВыручка");
	ОбновитьНадписьСпецРабот();
КонецПроцедуры

&НаКлиенте
Процедура ВыручкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	
	Если Объект.Рассчитан Тогда
		Объект.Рассчитан = Ложь;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ВыручкаПередНачаломДобавленияЗавершение", ЭтотОбъект, Новый Структура("Копирование", Копирование)), "Для выполнения данной операции необходимо записать документ. Продолжить?", РежимДиалогаВопрос.ОКОтмена);
        Возврат;
	КонецЕсли;
	
	ВыручкаПередНачаломДобавленияФрагмент(Копирование);
КонецПроцедуры

&НаКлиенте
Процедура ВыручкаПередНачаломДобавленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Копирование = ДополнительныеПараметры.Копирование;
	
	Ответ = РезультатВопроса;
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверитьЗаполнениеДокумента() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Записать();
	Исключение
		Возврат;
	КонецПопытки;
	
	ВыручкаПередНачаломДобавленияФрагмент(Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыручкаПередНачаломДобавленияФрагмент(Знач Копирование)
    
    Перем мТекущаяСтрокаСтруктура;
    
    Если РедактироватьВыручкуВДиалоге Тогда
        ДобавитьВыручкуВДиалоге(Копирование);
    Иначе
        мТекущаяСтрокаСтруктура = СтруктураСтрокиВыручки();
        Если Копирование Тогда
            ЗаполнитьЗначенияСвойств(мТекущаяСтрокаСтруктура, Элементы.Выручка.ТекущиеДанные);
        КонецЕсли;
        ДобавитьВыручкуСервер(Копирование, мТекущаяСтрокаСтруктура);
        ДобавитьВыручкуВСписке();
    КонецЕсли;
    //Если Копирование и ЗначениеЗаполнено(Элементы.Выручка.ТекущиеДанные.Количество) Тогда
    //	ИзменитьВыручкуВСписке();
    //КонецЕсли;
    
    ОбновитьКартинкиВыручка();
    ОбновитьНадписьРассчитан();

КонецПроцедуры

&НаКлиенте
Процедура ВыручкаПередНачаломИзменения(Элемент, Отказ)
	Если РедактироватьВыручкуВДиалоге Тогда
		ИзменитьВыручкуВДиалоге();
		Отказ = Истина;
	Иначе
		ТекДок = Элементы.Выручка.ТекущиеДанные.Ссылка;
		НачалоИзмененияВыручкиСервер(ТекДок);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыручкаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	
	Если Выручка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элементы.Выручка.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ВыручкаПередУдалениемЗавершение", ЭтотОбъект, Новый Структура("ТекСтрока", ТекСтрока)),
		"Удалить выручку?", РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

&НаКлиенте
Процедура ВыручкаПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ТекСтрока = ДополнительныеПараметры.ТекСтрока;
    
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ДокСсылка = ТекСтрока.Ссылка;
		Выручка.Удалить(ТекСтрока);
		ВыручкаПередУдалениемЗавершениеСервер(ДокСсылка);
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВыручкаПередУдалениемЗавершениеСервер(ДокСсылка)
	УдалитьВыручкуСервер(ДокСсылка);
КонецПроцедуры

&НаКлиенте
Процедура ВыручкаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ОтменаРедактирования Тогда
		ВывестиТаблицуВыручки();
		Возврат;
	КонецЕсли; 
	
	ТекСтрока = Элементы.Выручка.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ТекСтрока.Сотрудник) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, "Необходимо выбрать сотрудника!", 30);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекСтрока.Количество) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, "Необходимо указать количество!", 30);
		Возврат;
	КонецЕсли;
	
	Если Не РедактироватьВыручкуВДиалоге И Не Отказ Тогда
		Попытка
			Рез = ИзменитьВыручкуВСписке();
		Исключение
			Рез = Ложь;
		КонецПопытки;
		Если НЕ Рез Тогда
			Отказ = Истина;
		КонецЕсли;
		ВывестиТаблицуВыручки();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыручкаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ВыручкаКоличество.РежимРедактирования = РежимРедактированияКолонки.Вход;
	////Была отмена редактирования, нужно заново сформировать таблицу заправок
	//Если ОтменаРедактирования Тогда
	//	мИндекс = Элементы.СливыГСМ.ТекущиеДанные.ПолучитьИдентификатор();
	//	ВывестиТаблицуЗаправок();
	//	Элементы.ЗаправкиГСМ.ТекущаяСтрока = мИндекс;
	//КонецЕсли;
	ОбновитьКартинкиВыручка();
КонецПроцедуры

&НаКлиенте
Процедура ВыручкаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Элементы.Выручка.ТолькоПросмотр Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(Неопределено, Элементы.Выручка.ТекущиеДанные.Ссылка);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыБилеты

&НаКлиенте
Процедура РедактироватьБилетыВДиалоге(Команда)
	Элементы.РедактироватьБилетыВДиалоге.Пометка = НЕ Элементы.РедактироватьБилетыВДиалоге.Пометка;
	РедактироватьБилетыВДиалоге = Элементы.РедактироватьБилетыВДиалоге.Пометка;
	СохранитьНастройкиСервер();
КонецПроцедуры

//Процедура заполняет таблицу списком заправок
//
&НаКлиенте
Процедура ВывестиТаблицуБилеты()
	
	Билеты.Очистить();
	Для Каждого ТекСтрока Из ПолучитьТблБилетыСервер(Объект.Ссылка) Цикл
		НоваяСтрока = Билеты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

//Процедура заполняет таблицу списком заправок
//
&НаСервере
Процедура ВывестиТаблицуБилетыСервер()
	
	Билеты.Очистить();
	Для Каждого ТекСтрока Из ПолучитьТблБилетыСервер(Объект.Ссылка) Цикл
		НоваяСтрока = Билеты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТблБилетыСервер(Ссылка)
	Возврат уатЗащищенныеФункцииСервер_проф.ПолучитьБилетныеЛистыДляПЛ(Ссылка);
КонецФункции

&НаКлиенте
Процедура ДобавитьСуществующийБилетныйЛист(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьСуществующийБилетныйЛистЗавершение1", ЭтотОбъект),
			"Для выполнения данной операции необходимо записать документ. Продолжить?",
			РежимДиалогаВопрос.ОКОтмена);
        Возврат;
	КонецЕсли;
	
	ДобавитьСуществующийБилетныйЛистФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСуществующийБилетныйЛистЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ <> КодВозвратаДиалога.ОК Тогда
        Возврат;
    КонецЕсли;
    
    Если НЕ ПроверитьЗаполнениеДокумента() Тогда
        Возврат;
    КонецЕсли;
    
    Попытка
        Записать();
    Исключение
        Возврат;
    КонецПопытки;
    
    ДобавитьСуществующийБилетныйЛистФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСуществующийБилетныйЛистФрагмент()
    
    СтруктураОтбора = Новый Структура;
    СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
    СтруктураОтбора.Вставить("Организация", Объект.Организация);
	СтруктураОтбора.Вставить("ТС", Объект.ТранспортноеСредство);
    
    ОткрытьФорму("Документ.уатБилетныйЛист.ФормаВыбора", Новый Структура("Отбор", СтруктураОтбора),,,,,
		Новый ОписаниеОповещения("ДобавитьСуществующийБилетныйЛистЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСуществующийБилетныйЛистЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если Результат = Неопределено Тогда
        Возврат;
    КонецЕсли;	
    
    Если РедактироватьБилетыВДиалоге Тогда
        ДобавитьБилетныйЛистВДиалоге(, Результат);
	Иначе
		ДобавитьСуществующийБилетныйЛистСервер(Результат);
        ДобавитьБилетныйЛистВСписке();
		ОбновитьНадписьРассчитан();
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура ДобавитьСуществующийБилетныйЛистСервер(докСсылка)
	ДокОбъект = докСсылка.ПолучитьОбъект();
	ДокОбъект.Заполнить(Объект.Ссылка);
	Если НЕ РедактироватьБилетыВДиалоге Тогда
		ДокОбъект.Записать();
	КонецЕсли;
	ЗначениеВРеквизитФормы(ДокОбъект, "мДокументБилетныйЛист");
	ОбновитьНадписьСпецРабот();
КонецПроцедуры

&НаСервере
Процедура ОбновитьКартинкиБилеты()
	Для Каждого ТекСтрока Из Билеты Цикл
		Если ТекСтрока.Ссылка.Проведен Тогда
			ТекСтрока.Картинка = 0;
		ИначеЕсли ТекСтрока.Ссылка.ПометкаУдаления Тогда
			ТекСтрока.Картинка = 1;
		Иначе
			ТекСтрока.Картинка = 2;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура БилетыПриИзменении(Элемент)
	ОбновитьКартинкиБилеты();
КонецПроцедуры

&НаКлиенте
Процедура БилетыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	
	Если Объект.Ссылка.Пустая() Тогда
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("БилетыПередНачаломДобавленияЗавершение", ЭтотОбъект,
			Новый Структура("Копирование", Копирование)), "Для выполнения данной операции необходимо записать документ. Продолжить?",
			РежимДиалогаВопрос.ОКОтмена);
        Возврат;
	КонецЕсли;
	
	БилетыПередНачаломДобавленияФрагмент(Копирование);
КонецПроцедуры

&НаКлиенте
Процедура БилетыПередНачаломДобавленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
        Возврат;
    КонецЕсли;
    
    Если НЕ ПроверитьЗаполнениеДокумента() Тогда
        Возврат;
    КонецЕсли;
    
    Попытка
        Записать();
    Исключение
        Возврат;
    КонецПопытки;
    
    БилетыПередНачаломДобавленияФрагмент(ДополнительныеПараметры.Копирование);

КонецПроцедуры

&НаКлиенте
Процедура БилетыПередНачаломДобавленияФрагмент(Знач Копирование)
    
    Если РедактироватьБилетыВДиалоге Тогда
        ДобавитьБилетныйЛистВДиалоге(Копирование);
    Иначе
        мТекущаяСтрокаСтруктура = СтруктураСтрокиБилетныйЛист();
        Если Копирование Тогда
            ЗаполнитьЗначенияСвойств(мТекущаяСтрокаСтруктура, Элементы.Билеты.ТекущиеДанные);
        КонецЕсли;
        ДобавитьБилетныйЛистСервер(Копирование, мТекущаяСтрокаСтруктура);
        ДобавитьБилетныйЛистВСписке();
    КонецЕсли;
    
    ОбновитьКартинкиБилеты();
    ОбновитьНадписьРассчитан();

КонецПроцедуры

&НаКлиенте
Процедура БилетыПередНачаломИзменения(Элемент, Отказ)
	Если РедактироватьБилетыВДиалоге Тогда
		ИзменитьБилетныйЛистВДиалоге();
		Отказ = Истина;
	Иначе
		ТекДок = Элементы.Билеты.ТекущиеДанные.Ссылка;
		НачалоИзмененияБилетногоЛистаСервер(ТекДок);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НачалоИзмененияБилетногоЛистаСервер(ТекДок)
	ДокОбъект = ТекДок.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(ДокОбъект, "мДокументБилетныйЛист");
	ОбновитьНадписьСпецРабот();
КонецПроцедуры

&НаСервере
Процедура ДобавитьБилетныйЛистСервер(флКопирование = Ложь, мТекущаяСтрокаСтруктура = Неопределено)
	Если флКопирование = Истина Тогда
		ДокОбъект = мТекущаяСтрокаСтруктура.Ссылка.Скопировать();
		ДокОбъект.Дата = мТекущаяСтрокаСтруктура.Дата;
	Иначе
		ДокОбъект = Документы.уатБилетныйЛист.СоздатьДокумент();
		ДокОбъект.Заполнить(Объект.Ссылка);
	КонецЕсли;
		
	ДокОбъект.Записать();
	
	ЗначениеВРеквизитФормы(ДокОбъект, "мДокументБилетныйЛист");
	ОбновитьНадписьСпецРабот();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьБилетныйЛистВДиалоге(флКопирование = Ложь, докСсылка = Неопределено)
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ДобавлениеБилетовИзПЛ", Истина);
	ПараметрыОткрытия.Вставить("ПутевойЛист", Объект.Ссылка);
	Если докСсылка <> Неопределено Тогда
		ПараметрыОткрытия.Вставить("Ключ", докСсылка);
	КонецЕсли;
	
	Если флКопирование = Истина Тогда
		ТекСтрока = Элементы.Билеты.ТекущиеДанные;
		Если ТекСтрока <> Неопределено Тогда
			мТекущаяСтрокаСтруктура = СтруктураСтрокиБилетныйЛист();
			ЗаполнитьЗначенияСвойств(мТекущаяСтрокаСтруктура, ТекСтрока);
			ПараметрыОткрытия.Вставить("БилетныйЛистКопирование", мТекущаяСтрокаСтруктура);
			ПараметрыОткрытия.Вставить("ЗначениеКопирования", мТекущаяСтрокаСтруктура.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("Документ.уатБилетныйЛист.ФормаОбъекта", ПараметрыОткрытия, ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьБилетныйЛистВДиалоге()
	ТекСтрока = Элементы.Билеты.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Ключ",                       ТекСтрока.Ссылка);
	ПараметрыОткрытия.Вставить("РедактированиеБилетногоЛистаИзПЛ", Истина);
	ПараметрыОткрытия.Вставить("ПутевойЛист",                Объект.Ссылка);
	
	ОткрытьФорму("Документ.уатБилетныйЛист.ФормаОбъекта", ПараметрыОткрытия,,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьБилетныйЛистВСписке()
	мТекущаяСтрока = Элементы.Билеты.ТекущиеДанные;
	мсвНайдСтроки = мДокументБилетныйЛист.Билеты.НайтиСтроки(Новый Структура("НомерСтроки", мТекущаяСтрока.НомерСтроки));
	Если мсвНайдСтроки.Количество() = 0 Тогда
		НайденнаяСтрока = Неопределено;
	Иначе
		НайденнаяСтрока = мсвНайдСтроки[0];
	КонецЕсли;
	
	Если НайденнаяСтрока = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, "Ошибка при записи документа ""Билетный лист""!
			|Возможно документ был изменен другим пользователем!");
	Иначе
		мТекущаяСтрокаСтруктура = СтруктураСтрокиБилетныйЛист();
		ЗаполнитьЗначенияСвойств(мТекущаяСтрокаСтруктура, мТекущаяСтрока);
		ИзменитьБилетныйЛистВСпискеСервер(мТекущаяСтрокаСтруктура);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураСтрокиБилетныйЛист()
	Рез = Новый Структура;
	Рез.Вставить("Ссылка");
	Рез.Вставить("Номер");
	Рез.Вставить("Дата");
	Рез.Вставить("НомерСтроки");
	Рез.Вставить("Сотрудник");
	Рез.Вставить("ТС");
	Рез.Вставить("Склад");
	Рез.Вставить("Билет");
	Рез.Вставить("Маршрут");
	Рез.Вставить("Количество");
	Рез.Вставить("Сумма");
	Рез.Вставить("НомерНачальный");
	Рез.Вставить("НомерКонечный");
	
	Возврат Рез;
КонецФункции

&НаСервере
Процедура ИзменитьБилетныйЛистВСпискеСервер(мТекущаяСтрокаСтруктура)
	Рез = Истина;
	
	ДокОбъект = РеквизитФормыВЗначение("мДокументБилетныйЛист");
	ДокОбъект.Дата = мТекущаяСтрокаСтруктура.Дата;
	ДокОбъект.Номер = мТекущаяСтрокаСтруктура.Номер;
	ДокОбъект.Сотрудник = мТекущаяСтрокаСтруктура.Сотрудник;
	ДокОбъект.ТС = Объект.ТранспортноеСредство;
	ДокОбъект.Склад = мТекущаяСтрокаСтруктура.Склад;
	НайденнаяСтрока = ДокОбъект.Билеты.Найти(мТекущаяСтрокаСтруктура.НомерСтроки, "НомерСтроки");
	ЗаполнитьЗначенияСвойств(НайденнаяСтрока, мТекущаяСтрокаСтруктура);
	НайденнаяСтрока.ПутевойЛист = Объект.Ссылка;
	
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ЗначениеВРеквизитФормы(ДокОбъект, "мДокументБилетныйЛист");
	Исключение
	КонецПопытки;
	ОбновитьНадписьСпецРабот();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьБилетныйЛистВСписке()
	Если мДокументБилетныйЛист.Билеты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрокаБилета = мДокументБилетныйЛист.Билеты[мДокументБилетныйЛист.Билеты.Количество()-1];
	
	НоваяСтрока = Билеты.Добавить();
	НоваяСтрока.Ссылка = мДокументБилетныйЛист.Ссылка;
	НоваяСтрока.Номер = мДокументБилетныйЛист.Номер;
	НоваяСтрока.Дата = мДокументБилетныйЛист.Дата;
	НоваяСтрока.Сотрудник = мДокументБилетныйЛист.Сотрудник;
	НоваяСтрока.Маршрут = ТекСтрокаБилета.Маршрут;
	НоваяСтрока.Склад = мДокументБилетныйЛист.Склад;
	НоваяСтрока.НомерСтроки	= ТекСтрокаБилета.НомерСтроки;
	НоваяСтрока.Билет = ТекСтрокаБилета.Билет;
	НоваяСтрока.Количество = ТекСтрокаБилета.Количество;
	НоваяСтрока.Сумма = ТекСтрокаБилета.Сумма;
	
	Элементы.Билеты.ТекущаяСтрока = Билеты[Билеты.Количество() - 1].ПолучитьИдентификатор();
	ТекущийЭлемент = Элементы.БилетыКоличество;
	Элементы.БилетыКоличество.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
	
	ОбновитьКартинкиБилеты();
КонецПроцедуры

&НаКлиенте
Процедура БилетыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	
	Если Билеты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элементы.Билеты.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("БилетыПередУдалениемЗавершение", ЭтотОбъект, Новый Структура("ТекСтрока", ТекСтрока)), "Удалить билетный лист?", РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

&НаКлиенте
Процедура БилетыПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ТекСтрока = ДополнительныеПараметры.ТекСтрока;
    
    Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		БилетныйЛистСсылка = ТекСтрока.Ссылка;
		Билеты.Удалить(ТекСтрока);
		БилетыПередУдалениемЗавершениеСервер(БилетныйЛистСсылка);
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура БилетыПередУдалениемЗавершениеСервер(ДокументСсылка)
	УдалитьБилетныйЛистСервер(ДокументСсылка);
КонецПроцедуры

&НаСервере
Процедура УдалитьБилетныйЛистСервер(ДокСсылка)
	ДокСсылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
КонецПроцедуры

&НаКлиенте
Процедура БилетыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ОтменаРедактирования Тогда
		ВывестиТаблицуБилеты();
		Возврат;
	КонецЕсли; 
	
	ТекСтрока = Элементы.Билеты.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ТекСтрока.Сотрудник) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, "Необходимо выбрать сотрудника!", 30);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекСтрока.Маршрут) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, "Необходимо выбрать маршрут!", 30);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекСтрока.Склад) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, "Необходимо склад!", 30);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекСтрока.Билет) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, "Необходимо выбрать билет!", 30);
		Возврат;
	КонецЕсли;
	
	Если Не РедактироватьБилетыВДиалоге И Не Отказ Тогда
		Попытка
			ИзменитьБилетныйЛистВСписке();
		Исключение
			Отказ = Истина;
		КонецПопытки;	
		ВывестиТаблицуБилеты();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура БилетыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.БилетыКоличество.РежимРедактирования = РежимРедактированияКолонки.Вход;
	ОбновитьКартинкиБилеты();
КонецПроцедуры

&НаКлиенте
Процедура БилетыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Элементы.Билеты.ТолькоПросмотр Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(Неопределено, Элементы.Билеты.ТекущиеДанные.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура БилетыКоличествоПриИзменении(Элемент)
	ТекСтрока = Элементы.Билеты.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекСтрока.Билет) Тогда
		ТекСтрока.Сумма = ТекСтрока.Количество * уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.Билет, "Цена");
	Иначе
		ТекСтрока.Сумма = 0;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПосадочныеВедомости

&НаКлиенте
Процедура РедактироватьПосадочныеВедомостиВДиалоге(Команда)
	Элементы.РедактироватьПосВедВДиалоге.Пометка = НЕ Элементы.РедактироватьПосВедВДиалоге.Пометка;
	РедактироватьПосВедВДиалоге = Элементы.РедактироватьПосВедВДиалоге.Пометка;
	СохранитьНастройкиСервер();
КонецПроцедуры

&НаКлиенте
Процедура ВывестиТаблицуПосВед()
	
	ПосадочныеВедомости.Очистить();
	Для Каждого ТекСтрока Из ПолучитьТблПосВедСервер(Объект.Ссылка) Цикл
		НоваяСтрока = ПосадочныеВедомости.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиТаблицуПосВедСервер()
	
	ПосадочныеВедомости.Очистить();
	Для Каждого ТекСтрока Из ПолучитьТблПосВедСервер(Объект.Ссылка) Цикл
		НоваяСтрока = ПосадочныеВедомости.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТблПосВедСервер(Ссылка)
	Возврат уатЗащищенныеФункцииСервер_проф.ПолучитьПосадочныеВедомостиДляПЛ(Ссылка);
КонецФункции

&НаКлиенте
Процедура ДобавитьСуществующуюПосадочнуюВедомость(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьСуществующуюПосадочнуюВедомостьЗавершение1", ЭтотОбъект),
			"Для выполнения данной операции необходимо записать документ. Продолжить?",
			РежимДиалогаВопрос.ОКОтмена);
        Возврат;
	КонецЕсли;
	
	ДобавитьСуществующуюПосадочнуюВедомостьФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСуществующуюПосадочнуюВедомостьЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ <> КодВозвратаДиалога.ОК Тогда
        Возврат;
    КонецЕсли;
    
    Если НЕ ПроверитьЗаполнениеДокумента() Тогда
        Возврат;
    КонецЕсли;
    
    Попытка
        Записать();
    Исключение
        Возврат;
    КонецПопытки;
    
    ДобавитьСуществующуюПосадочнуюВедомостьФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСуществующуюПосадочнуюВедомостьФрагмент()
    
    СтруктураОтбора = Новый Структура;
    СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
    СтруктураОтбора.Вставить("Организация", Объект.Организация);
	СтруктураОтбора.Вставить("ТС", Объект.ТранспортноеСредство);
    
    ОткрытьФорму("Документ.уатПосадочнаяВедомость.ФормаВыбора", Новый Структура("Отбор", СтруктураОтбора),,,,,
		Новый ОписаниеОповещения("ДобавитьСуществующуюПосадочнуюВедомостьЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСуществующуюПосадочнуюВедомостьЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если Результат = Неопределено Тогда
        Возврат;
    КонецЕсли;	
    
    Если РедактироватьПосВедВДиалоге Тогда
        ДобавитьПосадочнуюВедомостьВДиалоге(, Результат);
	Иначе
		ДобавитьСуществующуюПосадочнуюВедомостьСервер(Результат);
        ДобавитьПосадочнуюВедомостьВСписке();
		ОбновитьНадписьРассчитан();
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура ДобавитьСуществующуюПосадочнуюВедомостьСервер(докСсылка)
	ДокОбъект = докСсылка.ПолучитьОбъект();
	ДокОбъект.Заполнить(Объект.Ссылка);
	Если НЕ РедактироватьПосВедВДиалоге Тогда
		ДокОбъект.Записать();
	КонецЕсли;
	ЗначениеВРеквизитФормы(ДокОбъект, "мДокументПосадочнаяВедомость");
	ОбновитьНадписьСпецРабот();
КонецПроцедуры

&НаСервере
Процедура ОбновитьКартинкиПосВед()
	Для Каждого ТекСтрока Из ПосадочныеВедомости Цикл
		Если ТекСтрока.Ссылка.Проведен Тогда
			ТекСтрока.Картинка = 0;
		ИначеЕсли ТекСтрока.Ссылка.ПометкаУдаления Тогда
			ТекСтрока.Картинка = 1;
		Иначе
			ТекСтрока.Картинка = 2;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПосадочныеВедомостиПриИзменении(Элемент)
	ОбновитьКартинкиПосВед();
КонецПроцедуры

&НаКлиенте
Процедура ПосадочныеВедомостиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	
	Если Объект.Ссылка.Пустая() Тогда
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ПосадочныеВедомостиПередНачаломДобавленияЗавершение", ЭтотОбъект,
			Новый Структура("Копирование", Копирование)), "Для выполнения данной операции необходимо записать документ. Продолжить?",
			РежимДиалогаВопрос.ОКОтмена);
        Возврат;
	КонецЕсли;
	
	ПосадочныеВедомостиПередНачаломДобавленияФрагмент(Копирование);
КонецПроцедуры

&НаКлиенте
Процедура ПосадочныеВедомостиПередНачаломДобавленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
        Возврат;
    КонецЕсли;
    
    Если НЕ ПроверитьЗаполнениеДокумента() Тогда
        Возврат;
    КонецЕсли;
    
    Попытка
        Записать();
    Исключение
        Возврат;
    КонецПопытки;
    
    ПосадочныеВедомостиПередНачаломДобавленияФрагмент(ДополнительныеПараметры.Копирование);

КонецПроцедуры

&НаКлиенте
Процедура ПосадочныеВедомостиПередНачаломДобавленияФрагмент(Знач Копирование)
    
    Если РедактироватьПосВедВДиалоге Тогда
        ДобавитьПосадочнуюВедомостьВДиалоге(Копирование);
    Иначе
        мТекущаяСтрокаСтруктура = СтруктураСтрокиПосадочнаяВедомость();
        Если Копирование Тогда
            ЗаполнитьЗначенияСвойств(мТекущаяСтрокаСтруктура, Элементы.ПосадочныеВедомости.ТекущиеДанные);
        КонецЕсли;
        ДобавитьПосадочнуюВедомостьСервер(Копирование, мТекущаяСтрокаСтруктура);
        ДобавитьПосадочнуюВедомостьВСписке();
    КонецЕсли;
    
    ОбновитьКартинкиПосВед();
    ОбновитьНадписьРассчитан();

КонецПроцедуры

&НаКлиенте
Процедура ПосадочныеВедомостиПередНачаломИзменения(Элемент, Отказ)
	Если РедактироватьПосВедВДиалоге Тогда
		ИзменитьПосадочнуюВедомостьВДиалоге();
		Отказ = Истина;
	Иначе
		ТекДок = Элементы.ПосадочныеВедомости.ТекущиеДанные.Ссылка;
		НачалоИзмененияПосадочнойВедомостиСервер(ТекДок);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НачалоИзмененияПосадочнойВедомостиСервер(ТекДок)
	ДокОбъект = ТекДок.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(ДокОбъект, "мДокументПосадочнаяВедомость");
	ОбновитьНадписьСпецРабот();
КонецПроцедуры

&НаСервере
Процедура ДобавитьПосадочнуюВедомостьСервер(флКопирование = Ложь, мТекущаяСтрокаСтруктура = Неопределено)
	Если флКопирование = Истина Тогда
		ДокОбъект = мТекущаяСтрокаСтруктура.Ссылка.Скопировать();
		ДокОбъект.Дата = мТекущаяСтрокаСтруктура.Дата;
	Иначе
		ДокОбъект = Документы.уатПосадочнаяВедомость.СоздатьДокумент();
		ДокОбъект.Заполнить(Объект.Ссылка);
	КонецЕсли;
		
	ДокОбъект.Записать();
	
	ЗначениеВРеквизитФормы(ДокОбъект, "мДокументПосадочнаяВедомость");
	ОбновитьНадписьСпецРабот();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПосадочнуюВедомостьВДиалоге(флКопирование = Ложь, докСсылка = Неопределено)
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ДобавлениеПосадочнойВедомостиИзПЛ", Истина);
	ПараметрыОткрытия.Вставить("ПутевойЛист", Объект.Ссылка);
	Если докСсылка <> Неопределено Тогда
		ПараметрыОткрытия.Вставить("Ключ", докСсылка);
	КонецЕсли;
	
	Если флКопирование = Истина Тогда
		ТекСтрока = Элементы.ПосадочныеВедомости.ТекущиеДанные;
		Если ТекСтрока <> Неопределено Тогда
			мТекущаяСтрокаСтруктура = СтруктураСтрокиПосадочнаяВедомость();
			ЗаполнитьЗначенияСвойств(мТекущаяСтрокаСтруктура, ТекСтрока);
			ПараметрыОткрытия.Вставить("ПосадочнаяВедомостьКопирование", мТекущаяСтрокаСтруктура);
			ПараметрыОткрытия.Вставить("ЗначениеКопирования", мТекущаяСтрокаСтруктура.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("Документ.уатПосадочнаяВедомость.ФормаОбъекта", ПараметрыОткрытия, ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПосадочнуюВедомостьВДиалоге()
	ТекСтрока = Элементы.ПосадочныеВедомости.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Ключ",                       ТекСтрока.Ссылка);
	ПараметрыОткрытия.Вставить("РедактированиеПосадочнойВедомостиИзПЛ", Истина);
	ПараметрыОткрытия.Вставить("ПутевойЛист",                Объект.Ссылка);
	
	ОткрытьФорму("Документ.уатПосадочнаяВедомость.ФормаОбъекта", ПараметрыОткрытия,,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПосадочнуюВедомостьВСписке()
	мТекущаяСтрока = Элементы.ПосадочныеВедомости.ТекущиеДанные;
	мсвНайдСтроки = мДокументПосадочнаяВедомость.Билеты.НайтиСтроки(Новый Структура("НомерСтроки", мТекущаяСтрока.НомерСтроки));
	Если мсвНайдСтроки.Количество() = 0 Тогда
		НайденнаяСтрока = Неопределено;
	Иначе
		НайденнаяСтрока = мсвНайдСтроки[0];
	КонецЕсли;
	
	Если НайденнаяСтрока = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, "Ошибка при записи документа ""Посадочная ведомость""!
			|Возможно документ был изменен другим пользователем!");
	Иначе
		мТекущаяСтрокаСтруктура = СтруктураСтрокиПосадочнаяВедомость();
		ЗаполнитьЗначенияСвойств(мТекущаяСтрокаСтруктура, мТекущаяСтрока);
		ИзменитьПосадочнуюВедомостьВСпискеСервер(мТекущаяСтрокаСтруктура);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураСтрокиПосадочнаяВедомость()
	Рез = Новый Структура;
	Рез.Вставить("Ссылка");
	Рез.Вставить("Номер");
	Рез.Вставить("Дата");
	Рез.Вставить("НомерСтроки");
	Рез.Вставить("Сотрудник");
	Рез.Вставить("ТС");
	Рез.Вставить("Автостанция");
	Рез.Вставить("КомиссияАвтостанции");
	Рез.Вставить("Билет");
	Рез.Вставить("Маршрут");
	Рез.Вставить("Количество");
	Рез.Вставить("Сумма");
		
	Возврат Рез;
КонецФункции

&НаСервере
Процедура ИзменитьПосадочнуюВедомостьВСпискеСервер(мТекущаяСтрокаСтруктура)
	Рез = Истина;
	
	ДокОбъект = РеквизитФормыВЗначение("мДокументПосадочнаяВедомость");
	ДокОбъект.Дата = мТекущаяСтрокаСтруктура.Дата;
	ДокОбъект.Номер = мТекущаяСтрокаСтруктура.Номер;
	ДокОбъект.Сотрудник = мТекущаяСтрокаСтруктура.Сотрудник;
	ДокОбъект.ТС = Объект.ТранспортноеСредство;
	ДокОбъект.Автостанция = мТекущаяСтрокаСтруктура.Автостанция;
	НайденнаяСтрока = ДокОбъект.Билеты.Найти(мТекущаяСтрокаСтруктура.НомерСтроки, "НомерСтроки");
	ЗаполнитьЗначенияСвойств(НайденнаяСтрока, мТекущаяСтрокаСтруктура);
	НайденнаяСтрока.ПутевойЛист = Объект.Ссылка;
	
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ЗначениеВРеквизитФормы(ДокОбъект, "мДокументПосадочнаяВедомость");
	Исключение
	КонецПопытки;
	ОбновитьНадписьСпецРабот();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПосадочнуюВедомостьВСписке()
	Если мДокументПосадочнаяВедомость.Билеты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрокаПосВед = мДокументПосадочнаяВедомость.Билеты[мДокументПосадочнаяВедомость.Билеты.Количество()-1];
	
	НоваяСтрока = ПосадочныеВедомости.Добавить();
	НоваяСтрока.Ссылка = мДокументПосадочнаяВедомость.Ссылка;
	НоваяСтрока.Номер = мДокументПосадочнаяВедомость.Номер;
	НоваяСтрока.Дата = мДокументПосадочнаяВедомость.Дата;
	НоваяСтрока.Сотрудник = мДокументПосадочнаяВедомость.Сотрудник;
	НоваяСтрока.Маршрут = ТекСтрокаПосВед.Маршрут;
	НоваяСтрока.Автостанция = мДокументПосадочнаяВедомость.Автостанция;
	НоваяСтрока.НомерСтроки	= ТекСтрокаПосВед.НомерСтроки;
	НоваяСтрока.КомиссияАвтостанции	= ТекСтрокаПосВед.КомиссияАвтостанции;
	НоваяСтрока.Билет = ТекСтрокаПосВед.Билет;
	НоваяСтрока.Количество = ТекСтрокаПосВед.Количество;
	НоваяСтрока.Сумма = ТекСтрокаПосВед.Сумма;
	
	Элементы.ПосадочныеВедомости.ТекущаяСтрока = ПосадочныеВедомости[ПосадочныеВедомости.Количество() - 1].ПолучитьИдентификатор();
	ТекущийЭлемент = Элементы.ПосадочныеВедомостиКоличество;
	Элементы.ПосадочныеВедомостиКоличество.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
	
	ОбновитьКартинкиПосВед();
КонецПроцедуры

&НаКлиенте
Процедура ПосадочныеВедомостиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	
	Если ПосадочныеВедомости.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элементы.ПосадочныеВедомости.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ПосадочныеВедомостиПередУдалениемЗавершение", ЭтотОбъект,
		Новый Структура("ТекСтрока", ТекСтрока)), "Удалить посадочную ведомость?", РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

&НаКлиенте
Процедура ПосадочныеВедомостиПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ТекСтрока = ДополнительныеПараметры.ТекСтрока;
    
    Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ДокСсылка = ТекСтрока.Ссылка;
		ПосадочныеВедомости.Удалить(ТекСтрока);
		ПосадочныеВедомостиПередУдалениемЗавершениеСервер(ДокСсылка);
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПосадочныеВедомостиПередУдалениемЗавершениеСервер(ДокументСсылка)
	ДокументСсылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПосадочныеВедомостиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ОтменаРедактирования Тогда
		ВывестиТаблицуПосВед();
		Возврат;
	КонецЕсли; 
	
	ТекСтрока = Элементы.ПосадочныеВедомости.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ТекСтрока.Сотрудник) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, "Необходимо выбрать сотрудника!", 30);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекСтрока.Маршрут) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, "Необходимо выбрать маршрут!", 30);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекСтрока.Автостанция) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, "Необходимо выбрать автостанцию!", 30);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекСтрока.Билет) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, "Необходимо выбрать билет!", 30);
		Возврат;
	КонецЕсли;
	
	Если Не РедактироватьПосВедВДиалоге И Не Отказ Тогда
		Попытка
			ИзменитьПосадочнуюВедомостьВСписке();
		Исключение
			Отказ = Истина;
		КонецПопытки;	
		ВывестиТаблицуПосВед();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПосадочныеВедомостиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ПосадочныеВедомостиКоличество.РежимРедактирования = РежимРедактированияКолонки.Вход;
	ОбновитьКартинкиПосВед();
КонецПроцедуры

&НаКлиенте
Процедура ПосадочныеВедомостиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Элементы.ПосадочныеВедомости.ТолькоПросмотр Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(Неопределено, Элементы.ПосадочныеВедомости.ТекущиеДанные.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПосадочныеВедомостиАвтостанцияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.уатПунктыНазначения.Форма.ФормаВыбораАвтостанции",,Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПосадочныеВедомостиКоличествоПриИзменении(Элемент)
	ТекСтрока = Элементы.ПосадочныеВедомости.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекСтрока.Билет) Тогда
		ТекСтрока.Сумма = ТекСтрока.Количество * уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.Билет, "Цена");
	Иначе
		ТекСтрока.Сумма = 0;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФОВ

&НаКлиенте
Процедура ПересчитатьФОВ(Команда)
	Если Объект.ФактическиОтработанноеВремя.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПересчитатьФОВЗавершение", ЭтотОбъект), "Перед заполнением таблица будет очищена! Продолжить?", РежимДиалогаВопрос.ОКОтмена);
        Возврат;
	КонецЕсли;
	
	ПересчитатьФОВФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьФОВЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
        Возврат;
    КонецЕсли;
    
    ПересчитатьФОВФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьФОВФрагмент()
    
    РасчетВремениСервер();
    РасчетФОВСервер(Истина);
    ОбновитьВремяФОВ();

КонецПроцедуры

&НаСервере
Процедура РасчетВремениСервер()
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.РасчитатьВременныеПараметры();
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	ОбновитьНадписьСпецРабот();
КонецПроцедуры

&НаСервере
Процедура РасчетФОВСервер(ВыполнитьПринудительно)
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.РасчетФОВ(ВыполнитьПринудительно);
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	ОбновитьНадписьСпецРабот();
КонецПроцедуры

&НаКлиенте
Процедура ФактическиОтработанноеВремяПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.НеВыполнятьАвтоРасчетФОВ Тогда
		Объект.НеВыполнятьАвтоРасчетФОВ = Истина;
	КонецЕсли;
	
	РасчетВыработкиСотрудниковСервер();
	ВывестиТаблицуВыработкаСотрудников();
	ОбновитьВремяФОВ();
КонецПроцедуры

&НаСервере
Процедура РасчетВыработкиСотрудниковСервер()
	Док = РеквизитФормыВЗначение("Объект");
	Отказ = Ложь;
	Док.РасчетВыработкиСотрудников(Отказ);
	ЗначениеВРеквизитФормы(Док, "Объект");
	ОбновитьНадписьСпецРабот();
КонецПроцедуры

&НаКлиенте
Процедура ФактическиОтработанноеВремяДневноеФорматПриИзменении(Элемент)
	ТекСтрока = Элементы.ФактическиОтработанноеВремя.ТекущиеДанные;
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрока.ВремяДневноеФормат);
	ТекСтрока.ВремяДневное = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрока.ВремяДневноеФормат);
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ФактическиОтработанноеВремяНочноеФорматПриИзменении(Элемент)
	ТекСтрока = Элементы.ФактическиОтработанноеВремя.ТекущиеДанные;
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрока.ВремяНочноеФормат);
	ТекСтрока.ВремяНочное = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрока.ВремяНочноеФормат);
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ФактическиОтработанноеВремяСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекСтрока = Элементы.ФактическиОтработанноеВремя.ТекущиеДанные;
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, ТекСтрока.Сотрудник, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗатратыТС

&НаКлиенте
Процедура ЗатратыЗаполнить(Команда)
	Если Не ЗначениеЗаполнено(Объект.ПланЗатрат) Тогда 
		ТекстОшибки = "Не указан план затрат.";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Объект.ПланЗатрат");
		Возврат;
	КонецЕсли;
	
	Если Не Объект.Рассчитан Тогда 
		ТекстВопроса = "Для выполнения данной операции необходимо рассчитать документ. Продолжить?";
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗатратыПодтвердитьЗаписьДокумента", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	ЗатратыПроверитьЗаполненностьТЧ();
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыПодтвердитьЗаписьДокумента(Результат, ДопПараметры) Экспорт
	
	Если Не Результат = КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	РасчетИтогов(Неопределено);
	
	Если Объект.Рассчитан Тогда 
		ЗатратыПроверитьЗаполненностьТЧ();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыПроверитьЗаполненностьТЧ()
	
	Если Объект.ЗатратыТС.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗатратыЗаполнитьЗавершение", ЭтотОбъект), "Перед заполнением таблица будет очищена! Продолжить?", РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	ЗатратыЗаполнитьФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ЗатратыЗаполнитьФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыЗаполнитьФрагмент()
	
	ЗатратыЗаполнитьСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗатратыЗаполнитьСервер()
	
	Объект.ЗатратыТС.Очистить();
	
	//ГСМ
	СтрокаВидаЗатрат = Объект.ПланЗатрат.Затраты.Найти(Перечисления.уатВидыЗатрат.ГСМ, "ВидЗатрат");
	Если Не СтрокаВидаЗатрат = Неопределено Тогда
		мТаблицаПоСписаниюГСМ = Неопределено;
		ДокОбъект = РеквизитФормыВЗначение("Объект");
		уатОбщегоНазначения_проф.уатПодготовитьТаблицуСписанияГСМ(ДокОбъект, мТаблицаПоСписаниюГСМ, Истина);
		
		мТаблицаПоСписаниюГСМ.Свернуть("ГСМ", "Стоимость");
		
		СписокГСМ = уатГСМ.ПолучитьСписокГСМПоГруппе(Перечисления.уатГруппыГСМ.Топливо);
		
		Для Каждого ТекСтрГСМ Из мТаблицаПоСписаниюГСМ Цикл 
			Если СписокГСМ.НайтиПоЗначению(ТекСтрГСМ.ГСМ) = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			НоваяСтрока = Объект.ЗатратыТС.Добавить();
			НоваяСтрока.Затрата      = ТекСтрГСМ.ГСМ;
			НоваяСтрока.СтатьяЗатрат = СтрокаВидаЗатрат.СтатьяЗатрат;
			НоваяСтрока.Сумма        = ТекСтрГСМ.Стоимость;
		КонецЦикла;
	КонецЕсли;
	
	//Шины
	СтрокаВидаЗатрат = Объект.ПланЗатрат.Затраты.Найти(Перечисления.уатВидыЗатрат.Шины, "ВидЗатрат");
	Если Не СтрокаВидаЗатрат = Неопределено Тогда
		тблШиныТС = уатОбщегоНазначения.уатШиныТС(Объект.ТранспортноеСредство, Объект.ДатаВыезда);
		Для Каждого ТекШинаТС Из тблШиныТС Цикл
			НоваяСтрока = Объект.ЗатратыТС.Добавить();
			НоваяСтрока.СтатьяЗатрат = СтрокаВидаЗатрат.СтатьяЗатрат;
			НоваяСтрока.Затрата      = ТекШинаТС.УзелОбъектаЭксплуатации;
			НоваяСтрока.Сумма        = ТекШинаТС.Модель.НормаЗатрат * ТекШинаТС.ПервоначальнаяСтоимость / 100
				* уатОбщегоНазначения.уатРазностьПоказанийСчетчика(Объект.СпидометрВыезда, Объект.СпидометрВозвращения) / 1000;
		КонецЦикла;
	КонецЕсли;
	
	//Зарплата
	СтрокаВидаЗатрат = Объект.ПланЗатрат.Затраты.Найти(Перечисления.уатВидыЗатрат.ОплатаТруда, "ВидЗатрат");
	Если Не СтрокаВидаЗатрат = Неопределено Тогда
		НоваяСтрока = Объект.ЗатратыТС.Добавить();
		НоваяСтрока.СтатьяЗатрат = СтрокаВидаЗатрат.СтатьяЗатрат;
		НоваяСтрока.Сумма        = Объект.Зарплата.Итог("Сумма");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// УправлениеПредприятием.СлужебныеПодсистемы
&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
КонецПроцедуры
// Конец УправлениеПредприятием.СлужебныеПодсистемы

&НаКлиенте
Процедура ВыработкаТСкратко(Команда)
	Элементы.ГруппаВыработкаТСстраницы.ТекущаяСтраница = Элементы.ГруппаВыработкаТСкратко;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаАгрегатов(Команда)
	Если Объект.Рассчитан Тогда
		ПарамерОткрытия = Новый Структура;
		ПарамерОткрытия.Вставить("Массив",  ПолучитьВыработкуПоАгрегатам());
		ОткрытьФорму("Документ.уатПутевойЛист.Форма.ФормаВыработкиАгрегатов",ПарамерОткрытия);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо рассчитать путевой лист!");
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаТСподробно(Команда)
	Элементы.ГруппаВыработкаТСстраницы.ТекущаяСтраница = Элементы.ГруппаВыработкаТСподробно;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаСотрудниковКратко(Команда)
	Элементы.ГруппаВыработкаСотрудниковСтраницы.ТекущаяСтраница = Элементы.ГруппаВыработкаСотрудниковКратко;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаСотрудниковПодробно(Команда)
	Элементы.ГруппаВыработкаСотрудниковСтраницы.ТекущаяСтраница = Элементы.ГруппаВыработкаСотрудниковПодробно;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПроверитьДокументыНажатие(Элемент)
	уатОбщегоНазначенияКлиент.ОткрытьОтчетПоДокументамТСиВодителей(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура РасчетИтогов(Команда)
	Перем Отказ;
	
	//проверка попадания заправок в период ПЛ
	Если НЕ ПроверитьПопаданиеЗаправокСливовВПериодПЛ(Объект.Организация, Объект.Ссылка, Объект.ДатаВыезда, Объект.ДатаВозвращения) Тогда
		Объект.Рассчитан = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ не был рассчитан: введенные заправки ГСМ не попадают в период путевого листа!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	//проверим таблицу выработки
	ТекстСообщОшибки = "";
	Объект.Рассчитан = РасчетИтоговСервер(Отказ, Ложь, ТекстСообщОшибки);
	
	Если НЕ ПустаяСтрока(ТекстСообщОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Неправильно заполнена таблица выработки ТС (" + ТекстСообщОшибки + ")");
	КонецЕсли;
	
	ОбновитьНомераПрицепов();
	ОбновитьНомераТСвТаблицах();
	ОбновитьВремяФОВ();
	ОбновитьФлагЭтоТЖ_РасходГСМ();
	
	РассчитатьЭкономиюПережог();
	ОбновитьНадписьРассчитан();
	ОбновитьНадписьПробег();
	ОбновитьНадписьСпецРабот();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНачальныеОстатки(Команда)
	Если ЗначениеЗаполнено(Объект.ТранспортноеСредство) Тогда
		МодельТС = ПолучитьЗначениеРеквизита(Объект.ТранспортноеСредство, "уатМодель");
		
		ОстатокТопливаВыезд = уатОбщегоНазначения.уатОстатокГСМнаТС(Объект.ДатаВыезда, Объект.ТранспортноеСредство,
			ПолучитьЗначениеРеквизита(МодельТС, "ОсновноеТопливо"), Объект.Ссылка);
		ОстатокТопливаВыездПриИзменении(Элементы.ОстатокТопливаВыезд);
		
		ДопТопливо = ПолучитьЗначениеРеквизита(МодельТС, "ДополнительноеТопливо");
		Если ЗначениеЗаполнено(ДопТопливо) Тогда
			Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
				Если Объект.ТранспортноеСредство = ТекСтрока.ТС И ДопТопливо = ТекСтрока.ГСМ Тогда
					ТекСтрока.ОстатокПриВыезде = уатОбщегоНазначения.уатОстатокГСМнаТС(Объект.ДатаВыезда,
						Объект.ТранспортноеСредство, ТекСтрока.ГСМ, Объект.Ссылка);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ПолучитьЗначениеРеквизита(МодельТС, "НаличиеСпидометра") = Истина Тогда
			Объект.СпидометрВыезда = уатОбщегоНазначения.уатТекущийСпидометр(Объект.ТранспортноеСредство, Объект.ДатаВыезда);
		Иначе
			Объект.СпидометрВыезда = уатОбщегоНазначения.уатТекущийСчетчикМЧ(Объект.ТранспортноеСредство, Объект.ДатаВыезда);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Объект.Прицепы Цикл
		Если ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(ТекСтрока.ТС, "уатМодель"), "НаличиеСпидометра") = Истина Тогда
			ТекСтрока.СчетчикМЧВыезда = уатОбщегоНазначения.уатТекущийСпидометр(ТекСтрока.ТС, Объект.ДатаВыезда);
		Иначе
			ТекСтрока.СчетчикМЧВыезда = уатОбщегоНазначения.уатТекущийСчетчикМЧ(ТекСтрока.ТС, Объект.ДатаВыезда);
		КонецЕсли;
		ТекМодельТС = ПолучитьЗначениеРеквизита(ТекСтрока.ТС, "уатМодель");
		ТекОснТопливо = ПолучитьЗначениеРеквизита(ТекМодельТС, "ОсновноеТопливо");
		Если ЗначениеЗаполнено(ТекОснТопливо) И ПолучитьЗначениеРеквизита(ТекМодельТС,"НаличиеТопливногоБака") = Истина Тогда
			Для Каждого ТекСтрокаГСМ Из Объект.РасходГСМ Цикл
				Если ТекСтрока.ТС = ТекСтрокаГСМ.ТС И ТекОснТопливо = ТекСтрокаГСМ.ГСМ Тогда
					ТекСтрокаГСМ.ОстатокПриВыезде = уатОбщегоНазначения.уатОстатокГСМнаТС(Объект.ДатаВыезда, ТекСтрокаГСМ.ТС,
						ТекСтрокаГСМ.ГСМ, Объект.Ссылка);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьНадписьПробег();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСпидометрПоЗаданию(Команда)
	мЗначениеСпидометра = 0;
	мЗначениеСчетчика   = 0;
	Для Каждого ТекСтрока Из Объект.Задание Цикл
		Если ТекСтрока.Выполнено Тогда
			мЗначениеСпидометра = мЗначениеСпидометра + ТекСтрока.КоличествоКмГруз * ТекСтрока.КоличествоЕздок + ТекСтрока.КоличествоКмПорожний *
				ТекСтрока.КоличествоЕздок;
			мЗначениеСчетчика = мЗначениеСчетчика + Цел(ТекСтрока.КоличествоЧасов) + (ТекСтрока.КоличествоЧасов -
				Цел(ТекСтрока.КоличествоЧасов))*100/60;
		КонецЕсли;
	КонецЦикла;
	
	Если ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(Объект.ТранспортноеСредство, "уатМодель"), "НаличиеСпидометра") Тогда 
		Объект.СпидометрВозвращения = Объект.СпидометрВыезда + мЗначениеСпидометра;
		Объект.СпидометрВозвращения = Объект.СпидометрВозвращения + Объект.НулевойПробегВыезда + Объект.НулевойПробегВозвращения;
	Иначе 
		Объект.СпидометрВозвращения = Объект.СпидометрВыезда + мЗначениеСчетчика;
	КонецЕсли;
	
	Для Каждого ТекПрицеп Из Объект.Прицепы Цикл 
		Если ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(ТекПрицеп.ТС, "уатМодель"), "НаличиеСпидометра") Тогда 
			ТекПрицеп.СчетчикМЧВозвращения = ТекПрицеп.СчетчикМЧВыезда + мЗначениеСпидометра;
			ТекПрицеп.СчетчикМЧВозвращения = ТекПрицеп.СчетчикМЧВозвращения + Объект.НулевойПробегВыезда + Объект.НулевойПробегВозвращения;
		Иначе 
			ТекПрицеп.СчетчикМЧВозвращения = ТекПрицеп.СчетчикМЧВыезда + мЗначениеСчетчика;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьНадписьПробег();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоМаршруту(Команда)
	Если Объект.Задание.Количество() > 0 Тогда
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗаданиеПоМаршрутуЗавершение1", ЭтотОбъект), "Очистить таблицу перед заполнением?", РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Нет);
        Возврат;	
	КонецЕсли;
	
	ЗаполнитьЗаданиеПоМаршрутуФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоМаршрутуЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Отмена Тогда
        Возврат;
    ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
        Объект.Задание.Очистить();
        Модифицированность = Истина;
    КонецЕсли;	
    
    ЗаполнитьЗаданиеПоМаршрутуФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоМаршрутуФрагмент()
    
    Перем спрМаршрут;
    
    спрМаршрут = Неопределено;
    
    
    ОткрытьФорму("Справочник.уатМаршруты.ФормаВыбора",,,,,, Новый ОписаниеОповещения("ЗаполнитьЗаданиеПоМаршрутуЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоМаршрутуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    спрМаршрут = Результат;
    Если НЕ ЗначениеЗаполнено(спрМаршрут) Тогда
        Возврат;
    КонецЕсли;
    
    спрМаршрутЭтапы = ЭтапыМаршрута(спрМаршрут);
    
    Если спрМаршрутЭтапы.Количество() = 0 Тогда
        НоваяСтрока = Объект.Задание.Добавить();
        НоваяСтрока.Маршрут = спрМаршрут;
        НоваяСтрока.КоличествоЕздок = 1;
        НоваяСтрока.КоличествоКмГруз = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(спрМаршрут, "Расстояние");
    Иначе	
        Для Каждого ТекСтрока Из спрМаршрутЭтапы Цикл
            НоваяСтрока = Объект.Задание.Добавить();
            НоваяСтрока.Маршрут = спрМаршрут;
            НоваяСтрока.АдресПрибытия = ТекСтрока.ПунктОтправления;
            НоваяСтрока.АдресУбытия   = ТекСтрока.ПунктПрибытия;
            НоваяСтрока.КоличествоЕздок = 1;
            НоваяСтрока.КоличествоКмГруз = ТекСтрока.Расстояние;
        КонецЦикла;
    КонецЕсли;
    Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоЗаказуНаТС(Команда)
	Если Объект.Задание.Количество() > 0 Тогда
		ТекстВопроса = НСтр("en='Clear the table part before filling?';ru='Очистить табличную часть перед заполнением?'");
		ТекстЗаголовка = НСтр("en='Clear the table';ru='Очистка таблицы'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗаданиеПоЗаказуНаТСЗавершение1", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Нет, ТекстЗаголовка);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗаданиеПоЗаказуНаТСФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоЗаказуНаТСЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Задание.Очистить();
		Модифицированность = Истина;
	КонецЕсли;
	
	ЗаполнитьЗаданиеПоЗаказуНаТСФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоЗаказуНаТСФрагмент()
	ОткрытьФорму("Документ.уатЗаказГрузоотправителя.Форма.ФормаВыбора", , ЭтотОбъект,,,, Новый ОписаниеОповещения("ЗаполнитьЗаданиеПоЗаказуНаТСЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоЗаказуНаТСЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбработкаЗаполненияТЧЗаданиеПоЗаказуНаТС(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоРейсам(Команда)
	Если Объект.Задание.Количество() > 0 Тогда
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗаданиеПоРейсамЗавершение1", ЭтотОбъект), "Очистить таблицу перед заполнением?",РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Нет);
        Возврат;	
	КонецЕсли;
	
	ЗаполнитьЗаданиеПоРейсамФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоРейсамЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Отмена Тогда
        Возврат;
    ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
        Объект.Задание.Очистить();
        Модифицированность = Истина;
    КонецЕсли;	
    
    ЗаполнитьЗаданиеПоРейсамФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоРейсамФрагмент()
    
    Перем Рез;
    
    Рез = Неопределено;
    
    
    ОткрытьФорму("Документ.уатПутевойЛист.Форма.ЗаполнениеПоРасписанию", , ЭтаФорма,,,, Новый ОписаниеОповещения("ЗаполнитьЗаданиеПоРейсамЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоРейсамЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Рез = Результат;
    Если ТипЗнч(Рез) <> Тип("Структура") Тогда
        Возврат;
    КонецЕсли;
    
    мМаршрут = Рез.Маршрут;
    мВыход = Рез.Выход;
    мРейс = Рез.Рейс;
    
    Если НЕ ЗначениеЗаполнено(мМаршрут) ИЛИ НЕ ЗначениеЗаполнено(мВыход) ИЛИ НЕ ЗначениеЗаполнено(мРейс) Тогда
        Возврат;
    КонецЕсли;
    
    ЗаполнитьЗаданиеПоРейсамСервер(мМаршрут, мВыход, мРейс);
    Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаданиеПоРейсамСервер(мМаршрут, мВыход, мРейс)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	уатМаршрутыЭтапы.ПунктОтправления КАК ПунктОтправления,
	|	уатРасписаниеРейсов.ВремяПрибытия КАК ВремяПрибытия,
	|	уатРасписаниеРейсов.ВремяУбытия КАК ВремяУбытия,
	|	уатМаршрутыЭтапы.ПунктПрибытия
	|ИЗ
	|	Справочник.уатМаршруты.Этапы КАК уатМаршрутыЭтапы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатРасписаниеРейсов КАК уатРасписаниеРейсов
	|		ПО уатМаршрутыЭтапы.Ссылка = уатРасписаниеРейсов.Маршрут
	|			И уатМаршрутыЭтапы.УИД = уатРасписаниеРейсов.УИДПункта
	|ГДЕ
	|	уатРасписаниеРейсов.Маршрут = &Маршрут
	|	И уатРасписаниеРейсов.Выход = &Выход
	|	И уатРасписаниеРейсов.Рейс = &Рейс
	|	И (уатРасписаниеРейсов.Пн
	|				И &Пн
	|			ИЛИ уатРасписаниеРейсов.Вт
	|				И &Вт
	|			ИЛИ уатРасписаниеРейсов.Ср
	|				И &Ср
	|			ИЛИ уатРасписаниеРейсов.Чт
	|				И &Чт
	|			ИЛИ уатРасписаниеРейсов.Пт
	|				И &Пт
	|			ИЛИ уатРасписаниеРейсов.Сб
	|				И &Сб
	|			ИЛИ уатРасписаниеРейсов.Вс
	|				И &Вс)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВремяПрибытия";
	Запрос.УстановитьПараметр("Маршрут", мМаршрут);
	Запрос.УстановитьПараметр("Выход", мВыход);
	Запрос.УстановитьПараметр("Рейс", мРейс);
	Запрос.УстановитьПараметр("Пн", ДеньНедели(Объект.ДатаВыезда)=1);
	Запрос.УстановитьПараметр("Вт", ДеньНедели(Объект.ДатаВыезда)=2);
	Запрос.УстановитьПараметр("Ср", ДеньНедели(Объект.ДатаВыезда)=3);
	Запрос.УстановитьПараметр("Чт", ДеньНедели(Объект.ДатаВыезда)=4);
	Запрос.УстановитьПараметр("Пт", ДеньНедели(Объект.ДатаВыезда)=5);
	Запрос.УстановитьПараметр("Сб", ДеньНедели(Объект.ДатаВыезда)=6);
	Запрос.УстановитьПараметр("Вс", ДеньНедели(Объект.ДатаВыезда)=7);
	тбл = Запрос.Выполнить().Выгрузить();
	
	КоличСтрок = тбл.Количество(); 
	ТекНомСтр = 1;
	
	Если мМаршрут.ПредставлениеМаршрутаОднимПунктом Тогда
		
		//представление маршрута в виде одиночных пунктов следования
		
		Для Каждого ТекСтрокаПункт Из тбл Цикл
			Если ТекНомСтр = КоличСтрок Тогда
				Прервать;
			КонецЕсли;
			
			СтрокаСледПункт = тбл[ТекНомСтр];
			
			НоваяСтрокаЗадания = Объект.Задание.Добавить();
			НоваяСтрокаЗадания.Маршрут = мМаршрут;
			НоваяСтрокаЗадания.КоличествоЕздок = 1;
			НоваяСтрокаЗадания.АдресПрибытия = ТекСтрокаПункт.ПунктОтправления;
			НоваяСтрокаЗадания.ВремяПрибытия = НачалоДня(Объект.ДатаВыезда) + (ТекСтрокаПункт.ВремяУбытия - '00010101');
			НоваяСтрокаЗадания.АдресУбытия = СтрокаСледПункт.ПунктОтправления;
			НоваяСтрокаЗадания.ВремяУбытия = НачалоДня(Объект.ДатаВыезда) + (СтрокаСледПункт.ВремяПрибытия - '00010101');
			
			ТекНомСтр = ТекНомСтр + 1;
		КонецЦикла;
	Иначе
		
		//представление маршрута в виде пары пунктов следования
		
		Для Каждого ТекСтрокаПункт Из тбл Цикл
			
			НоваяСтрокаЗадания = Объект.Задание.Добавить();
			НоваяСтрокаЗадания.Маршрут = мМаршрут;
			НоваяСтрокаЗадания.КоличествоЕздок = 1;         
			НоваяСтрокаЗадания.АдресПрибытия = ТекСтрокаПункт.ПунктОтправления;
			НоваяСтрокаЗадания.ВремяПрибытия = НачалоДня(Объект.ДатаВыезда) + (ТекСтрокаПункт.ВремяПрибытия - '00010101');
			НоваяСтрокаЗадания.АдресУбытия = ТекСтрокаПункт.ПунктПрибытия;
			НоваяСтрокаЗадания.ВремяУбытия = НачалоДня(Объект.ДатаВыезда) + (ТекСтрокаПункт.ВремяУбытия - '00010101');
			
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЗаполнитьЗаданиеПоДаннымGPSНаСервере()
	
	Результат = Новый СписокЗначений;
	
	ТабДвижения = ItobОперативныйМониторинг.ПолучитьИнтервалыДвижения(Объект.ТранспортноеСредство, 
		Объект.ДатаВыезда, Объект.ДатаВозвращения, Истина);
	
	Для Каждого ТекСтрока Из ТабДвижения Цикл 
		ДанныеСтроки = Новый Структура("ВремяНач, ВремяКон, СостояниеСтрока, Длительность, Пробег, МестоСтоянки");
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекСтрока);
		Результат.Добавить(ДанныеСтроки);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоДаннымGPS(Команда)
	
	Если Не ЗначениеЗаполнено(ItobОперативныйМониторингВызовСервера.ПолучитьПривязанныйТерминал(Объект.ТранспортноеСредство)) Тогда
		ПоказатьПредупреждение(, 
			"Для данного транспортного средства не привязан ГЛОНАСС/GPS трекер!
			|Список совместимого оборудования доступен по ссылке http://itob.ru/products/mobile/ .");
		Возврат;
		
	КонецЕсли;
	
	Если Объект.Задание.Количество() > 0 Тогда
		ТекстВопроса = "Очистить таблицу задания?";
		Оповещение   = Новый ОписаниеОповещения("ЗаполнитьЗаданиеПоДаннымGPSОтвет", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе 
		ЗаполнитьЗаданиеПоДаннымGPSЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоДаннымGPSОтвет(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		ЗаполнитьЗаданиеПоДаннымGPSЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоДаннымGPSЗавершение()
	
	мсвИнтерваловДвижения = ЗаполнитьЗаданиеПоДаннымGPSНаСервере();
	
	Объект.Задание.Очистить();
	
	ПробегЕздки = 0;
	
	Для Сч = 0 По мсвИнтерваловДвижения.Количество()-1 Цикл
		ТекущаяСтрока = мсвИнтерваловДвижения[Сч];
		
		ПробегЕздки = ПробегЕздки + ТекущаяСтрока.Пробег;
		
		НовСтрокаЗадание = Объект.Задание.Добавить();
		НовСтрокаЗадание.Выполнено        = Истина;
		НовСтрокаЗадание.КоличествоКмГруз = ПробегЕздки;
		НовСтрокаЗадание.КоличествоЕздок  = 1;
		НовСтрокаЗадание.АдресПрибытия    = ТекущаяСтрока.МестоСтоянки;
		НовСтрокаЗадание.ВремяПрибытия    = ТекущаяСтрока.ВремяНач;
		НовСтрокаЗадание.ВремяУбытия      = ТекущаяСтрока.ВремяКон;
		
		ПробегЕздки = 0;
	КонецЦикла;
	
	Если ПробегЕздки > 0 Тогда
		НовСтрокаЗадание = Объект.Задание.Добавить();
		НовСтрокаЗадание.Выполнено = Истина;
		
		НовСтрокаЗадание.КоличествоКмГруз = ПробегЕздки;
		НовСтрокаЗадание.КоличествоЕздок  = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтапыМаршрута(спрМаршрут)
	массивЭтапов = Новый Массив;
	Для Каждого ТекЭтап Из спрМаршрут.Этапы Цикл
		массивЭтапов.Добавить(Новый Структура("ПунктОтправления, ПунктПрибытия, Расстояние",
			ТекЭтап.ПунктОтправления, ТекЭтап.ПунктПрибытия, ТекЭтап.Расстояние));
	КонецЦикла;
	
	Возврат массивЭтапов;
КонецФункции

&НаКлиенте
Процедура ItobПоказатьМаршрутНаКарте(Команда)
	ПараметрыФормы = Новый Структура("РежимОткрытия", "ПостроениеМаршрутов");
	ОткрытьФорму("Обработка.ItobРабочееМестоДиспетчера.Форма", ПараметрыФормы);
	ПараметрыОповещения = Новый Структура("НачПериода, КонПериода, Объект",
	НачалоДня(?(Объект.ДатаВыезда = '00010101', ТекущаяДата(), Объект.ДатаВыезда)),
	КонецДня(?(Объект.ДатаВозвращения = '00010101', ТекущаяДата(), Объект.ДатаВозвращения)),
	Объект.ТранспортноеСредство);
	
	Оповестить("РежимМаршрута", ПараметрыОповещения);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСпидометрПоGPS(Команда)
	
	ОбъектСтруктура = Новый Структура;
	ОбъектСтруктура.Вставить("Организация",           Объект.Организация);
	ОбъектСтруктура.Вставить("ТранспортноеСредство",  Объект.ТранспортноеСредство);
	ОбъектСтруктура.Вставить("ДатаВыезда",            Объект.ДатаВыезда);
	ОбъектСтруктура.Вставить("ДатаВозвращения",       Объект.ДатаВозвращения);
	ОбъектСтруктура.Вставить("СпидометрВыезда",       Объект.СпидометрВыезда);
	ОбъектСтруктура.Вставить("СпидометрВозвращения",  Объект.СпидометрВозвращения);
	ОбъектСтруктура.Вставить("Прицепы",               Новый Массив());
	
	Для Каждого ТекПрицеп Из Объект.Прицепы Цикл 
		СтрокаПрицепа = Новый Структура("ТС, СпидометрВыезда, СпидометрВозвращения",
			ТекПрицеп.ТС,
			ТекПрицеп.СчетчикМЧВыезда,
			ТекПрицеп.СчетчикМЧВозвращения);
		ОбъектСтруктура.Прицепы.Добавить(СтрокаПрицепа);
	КонецЦикла;
	
	РезультатСтруктура = Новый Структура;
	
	//РАСЧЕТ
	уатЗащищенныеФункцииСервер_проф.РассчитатьСпидометрПоGPS(ОбъектСтруктура, РезультатСтруктура);
	
	НайденныеСтроки = ВыработкаТСсводная.НайтиСтроки(Новый Структура("ПараметрВыработки", 
		ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПробегОбщийПоДаннымGPS")));
	Если НайденныеСтроки.Количество() > 0 Тогда 
		СтрокаВыработкиПробег = НайденныеСтроки[0];
	Иначе 
		СтрокаВыработкиПробег = Неопределено;
	КонецЕсли;
	
	НайденныеСтроки = ВыработкаТСсводная.НайтиСтроки(Новый Структура("ПараметрВыработки", 
		ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ВремяВРаботеПоДаннымGPS")));
	Если НайденныеСтроки.Количество() > 0 Тогда 
		СтрокаВыработкиВремяВРаботе = НайденныеСтроки[0];
	Иначе 
		СтрокаВыработкиВремяВРаботе = Неопределено;
	КонецЕсли;
	
	//заполнение основных реквизитов
	Если РезультатСтруктура.Свойство("СчетчикВыезда") Тогда
		Объект.СпидометрВыезда = РезультатСтруктура.СчетчикВыезда;
	КонецЕсли;
	Если РезультатСтруктура.Свойство("СчетчикВозвращения") Тогда
		Объект.СпидометрВозвращения = РезультатСтруктура.СчетчикВозвращения;
	КонецЕсли;
	Если РезультатСтруктура.Свойство("СчетчикПоGPS") Тогда
		Объект.ПробегПоGPS = РезультатСтруктура.СчетчикПоGPS;
	КонецЕсли;
	Если РезультатСтруктура.Свойство("ПробегПоGPS") И Не СтрокаВыработкиПробег = Неопределено Тогда
		СтрокаВыработкиПробег.К1 = Окр(РезультатСтруктура.ПробегПоGPS, 2, РежимОкругления.Окр15как20);
	КонецЕсли;
	Если РезультатСтруктура.Свойство("МоточасыПоGPS") И Не СтрокаВыработкиВремяВРаботе = Неопределено Тогда
		СтрокаВыработкиВремяВРаботе.К1 = ВремяВЧЧ_ММ(РезультатСтруктура.МоточасыПоGPS*3600);
	КонецЕсли;
	
	ЗаполнитьУровеньТопливаПоGPS(РезультатСтруктура);
	
	// Заполнение данных по прицепам
	Для Каждого ТекПрицеп Из РезультатСтруктура.Прицепы Цикл 
		НайдСтроки = Объект.Прицепы.НайтиСтроки(Новый Структура("ТС", ТекПрицеп.ТС));
		Если НайдСтроки.Количество() Тогда 
			Если ТекПрицеп.Свойство("СчетчикВыезда") Тогда
				НайдСтроки[0].СчетчикМЧВыезда = ТекПрицеп.СчетчикВыезда;
			КонецЕсли;
			Если ТекПрицеп.Свойство("СчетчикВозвращения") Тогда
				НайдСтроки[0].СчетчикМЧВозвращения = ТекПрицеп.СчетчикВозвращения;
			КонецЕсли;
			Если ТекПрицеп.Свойство("СчетчикПоGPS") Тогда
				НайдСтроки[0].СчетчикМЧGPS = ТекПрицеп.СчетчикПоGPS;
			КонецЕсли;
			Если ТекПрицеп.Свойство("ПробегПоGPS") И Не СтрокаВыработкиПробег = Неопределено Тогда
				СтрокаВыработкиПробег["К" + Строка(НайдСтроки[0].НомерСтроки + 1)] = Окр(ТекПрицеп.ПробегПоGPS, 2, РежимОкругления.Окр15как20);
			КонецЕсли;
			Если ТекПрицеп.Свойство("МоточасыПоGPS") И Не СтрокаВыработкиВремяВРаботе = Неопределено Тогда
				СтрокаВыработкиВремяВРаботе["К" + Строка(НайдСтроки[0].НомерСтроки + 1)] = ВремяВЧЧ_ММ(ТекПрицеп.МоточасыПоGPS*3600);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьНадписьПробег();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ItobОтчетПоТопливу(Команда)
	
	// Определяем привязанный терминал
	ПривязанныйТерминал = ItobОперативныйМониторингВызовСервера.ПолучитьПривязанныйТерминал(Объект.ТранспортноеСредство, Объект.ДатаВозвращения);
	Если НЕ ЗначениеЗаполнено(ПривязанныйТерминал) Тогда
		ТекстСообщения = "К транспортному средству не привязан терминал";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СписокПараметров = Новый СписокЗначений;
	СписокПараметров.Добавить(НачалоДня(?(Объект.ДатаВыезда='00010101',ТекущаяДата(),Объект.ДатаВыезда)),"НачПериода");
	СписокПараметров.Добавить(КонецДня(?(Объект.ДатаВозвращения='00010101',ТекущаяДата(),Объект.ДатаВозвращения)),"КонПериода");
	СписокПараметров.Добавить(Объект.ТранспортноеСредство,"Объект");
	СписокПараметров.Добавить("Пробег","Метод");
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
	ПараметрыОтчета.Вставить("Терминал", ПривязанныйТерминал);
	
	ОткрытьФорму("Отчет.ItobОтчетПоТопливу.Форма", ПараметрыОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсеЗадания(Команда)
	Для Каждого ТекСтрока Из Объект.Задание Цикл
		ТекСтрока.Выполнено = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеОтметкиВЗаданиях(Команда)
	Для Каждого ТекСтрока Из Объект.Задание Цикл
		ТекСтрока.Выполнено = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьПопаданиеЗаправокСливовВПериодПЛ(Организация, ДокСсылка, ДатаВыезда, ДатаВозвращения)
	Если ДокСсылка.Пустая() Тогда
		Возврат Истина;
	КонецЕсли;
	НастройкаПроверки = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, "ПроверятьПопаданиеЗаправкиСливаВПериодПутевогоЛиста");
	Если НастройкаПроверки = Перечисления.уатВидыПроверкиПопаданияЗаправкиВПериодПЛ.НеПроверять
		ИЛИ НастройкаПроверки = Перечисления.уатВидыПроверкиПопаданияЗаправкиВПериодПЛ.ПерепроводитьЗаправку Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатОборотыПоЗаправкамГСМ.ПутевойЛист
	|ИЗ
	|	РегистрНакопления.уатОборотыПоЗаправкамГСМ.Обороты(, , Регистратор, ПутевойЛист = &ПутевойЛист) КАК уатОборотыПоЗаправкамГСМ
	|ГДЕ
	|	(уатОборотыПоЗаправкамГСМ.Период > &ДатаКон
	|			ИЛИ уатОборотыПоЗаправкамГСМ.Период < &ДатаНач)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатОстаткиГСМнаТС.Регистратор
	|ИЗ
	|	РегистрНакопления.уатОстаткиГСМнаТС КАК уатОстаткиГСМнаТС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатСливГСМ КАК уатСливГСМ
	|		ПО уатОстаткиГСМнаТС.Регистратор = уатСливГСМ.Ссылка
	|			И уатОстаткиГСМнаТС.ГСМ = уатСливГСМ.ГСМ
	|			И уатОстаткиГСМнаТС.ТС = уатСливГСМ.ТС
	|ГДЕ
	|	уатОстаткиГСМнаТС.Регистратор ССЫЛКА Документ.уатСливГСМ
	|	И уатСливГСМ.ПутевойЛист = &ПутевойЛист
	|	И (уатОстаткиГСМнаТС.Период > &ДатаКон
	|			ИЛИ уатОстаткиГСМнаТС.Период < &ДатаНач)");
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаВыезда);
	Запрос.УстановитьПараметр("ДатаКон", ?(ДатаВозвращения < ДатаВыезда, ДатаВыезда, ДатаВозвращения));
	Запрос.УстановитьПараметр("ПутевойЛист", ДокСсылка);
	
	Возврат Запрос.Выполнить().Пустой();
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Объект, ИмяРеквизита)
	Возврат уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект, ИмяРеквизита);
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеТСсервер_Влож(ТранспортноеСредство, Организация)
	Возврат уатОбщегоНазначения.уатПредставлениеТС(ТранспортноеСредство, Организация);
КонецФункции

&НаСервере
Процедура НастроитьВидимостьЗатрат()
	
	Если ПолучитьПраваИНастройкиПользователя(Объект.Организация, 
			ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВестиУчетЗатрат")) Тогда 
		Элементы.ПланЗатрат.Видимость    = Истина;
		Элементы.ГруппаЗатраты.Видимость = Истина;
	Иначе 
		Объект.ЗатратыТС.Очистить();
		Элементы.ПланЗатрат.Видимость    = Ложь;
		Элементы.ГруппаЗатраты.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПредставлениеТС(ТранспортноеСредство, Организация)
	мсвСтрокиКэша = КэшПредставлениеТС.НайтиСтроки(Новый Структура("ТС, Организация", ТранспортноеСредство, Организация));
	Если мсвСтрокиКэша.Количество() = 0 Тогда
		СтрокаТСвКэше = КэшПредставлениеТС.Добавить();
		СтрокаТСвКэше.ТС = ТранспортноеСредство;
		СтрокаТСвКэше.Организация = Организация;
		СтрокаТСвКэше.Представление = ПредставлениеТСсервер_Влож(ТранспортноеСредство, Организация);
	Иначе
		СтрокаТСвКэше = мсвСтрокиКэша[0];
	КонецЕсли;
	
	Возврат СтрокаТСвКэше.Представление;
КонецФункции

&НаСервере
Функция ПредставлениеТСсервер(ТранспортноеСредство, Организация)
	мсвСтрокиКэша = КэшПредставлениеТС.НайтиСтроки(Новый Структура("ТС, Организация", ТранспортноеСредство, Организация));
	Если мсвСтрокиКэша.Количество() = 0 Тогда
		СтрокаТСвКэше = КэшПредставлениеТС.Добавить();
		СтрокаТСвКэше.ТС = ТранспортноеСредство;
		СтрокаТСвКэше.Организация = Организация;
		СтрокаТСвКэше.Представление = ПредставлениеТСсервер_Влож(ТранспортноеСредство, Организация);
	Иначе
		СтрокаТСвКэше = мсвСтрокиКэша[0];
	КонецЕсли;
	
	Возврат СтрокаТСвКэше.Представление;
КонецФункции

&НаКлиенте
Функция ВремяВЧЧ_ММ(Время)
	Часы = Цел(Время / 3600);
	//Минуты = Цел((Время - (Часы * 3600))/60)/100;
	Минуты = Окр((Время - (Часы * 3600))/60)/100;
	Результат = Часы + Минуты;
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция ВремяВЧЧ_ММ_Сервер(Время)
	Возврат уатОбщегоНазначения.уатВремяВЧЧ_ММ(Время);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПраваИНастройкиПользователя(Организация, НастройкаПольз)
	Возврат уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, НастройкаПольз);
КонецФункции

&НаСервере
// Процедура устанавливает дату "Действителен до" документа.
//
Процедура УстановитьДействителенДоПоУмолчанию()
	
	СтруктураОбъектовНастроек = Новый Структура;
	СтруктураОбъектовНастроек.Вставить("Организация",   Объект.Организация);
	СтруктураОбъектовНастроек.Вставить("Подразделение", ПодразделениеНастройки());
	
	мСрокДействияПутевогоЛиста = ПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.СрокДействияПутевогоЛиста);
	мСрокДействияПутевогоЛиста = ?(мСрокДействияПутевогоЛиста <> Неопределено, мСрокДействияПутевогоЛиста, 0);
	
	Объект.ДействителенДо = КонецДня(Объект.Дата + мСрокДействияПутевогоЛиста * 3600 * 24 + 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияДанныхАвтомобиля(Знач Оповещение, флЗаполнитьВодителейПоУмолчанию = Истина)
	Если АвтомобильОлд = Объект.ТранспортноеСредство Тогда
		ВыполнитьОбработкуОповещения(Оповещение);
		Возврат;
	КонецЕсли;
	
	Если НЕ ((Объект.Прицепы.Количество() = 0) И (Объект.РасходГСМ.Количество() = 0) И (Объект.ВыработкаТС.Количество() = 0)) Тогда
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ИнициализацияДанныхАвтомобиляЗавершение", ЭтотОбъект, Новый Структура("Оповещение, флЗаполнитьВодителейПоУмолчанию", Оповещение, флЗаполнитьВодителейПоУмолчанию)), "В документе есть заполненные таблицы, которые будут очищены! Продолжить?", РежимДиалогаВопрос.ОКОтмена);
        Возврат;
	КонецЕсли;
	
	ИнициализацияДанныхАвтомобиляФрагмент(Оповещение, флЗаполнитьВодителейПоУмолчанию);
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияДанныхАвтомобиляЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    флЗаполнитьВодителейПоУмолчанию = ДополнительныеПараметры.флЗаполнитьВодителейПоУмолчанию;
    
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.ОК Тогда
        Объект.Прицепы.Очистить();
        Объект.РасходГСМ.Очистить();
        Объект.ВыработкаТС.Очистить();
        ВыработкаТСсводная.Очистить();
    Иначе
        Объект.ТранспортноеСредство = АвтомобильОлд;
        НомерТранспортноеСредство = ПредставлениеТС(Объект.ТранспортноеСредство, Объект.Организация);
        ВыполнитьОбработкуОповещения(Оповещение);
        Возврат;
    КонецЕсли;
    
    ИнициализацияДанныхАвтомобиляФрагмент(Оповещение, флЗаполнитьВодителейПоУмолчанию);

КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияДанныхАвтомобиляФрагмент(Знач Оповещение, Знач флЗаполнитьВодителейПоУмолчанию)
    
    Если ЗаправкиГСМ.Количество() > 0 Тогда
        ПоказатьПредупреждение(Новый ОписаниеОповещения("ИнициализацияДанныхАвтомобиляФрагментЗавершение", ЭтотОбъект, Новый Структура("Оповещение, флЗаполнитьВодителейПоУмолчанию", Оповещение, флЗаполнитьВодителейПоУмолчанию)), "Необходимо изменить документы заправки ГСМ!", 10);
        Возврат;
    КонецЕсли;
    
    ИнициализацияДанныхАвтомобиляФрагментФрагмент(Оповещение, флЗаполнитьВодителейПоУмолчанию);
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияДанныхАвтомобиляФрагментЗавершение(ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    флЗаполнитьВодителейПоУмолчанию = ДополнительныеПараметры.флЗаполнитьВодителейПоУмолчанию;
    
    
    ИнициализацияДанныхАвтомобиляФрагментФрагмент(Оповещение, флЗаполнитьВодителейПоУмолчанию);

КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияДанныхАвтомобиляФрагментФрагмент(Знач Оповещение, Знач флЗаполнитьВодителейПоУмолчанию)
	
	ИнициализацияДанныхАвтомобиляСервер(флЗаполнитьВодителейПоУмолчанию);
	
	ПроверитьПредыдущийПЛНеРассчитан();
	УстановитьВидимость();
	УстановитьВозможностьРедактированияДанныхПоGPS();
	
	ВыполнитьОбработкуОповещения(Оповещение);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияДанныхАвтомобиляСервер(флЗаполнитьВодителейПоУмолчанию)
	ОрганизацияТС = уатОбщегоНазначения.МестонахождениеТС(Объект.ТранспортноеСредство, Объект.ДатаВыезда).Организация;
	Если Объект.Организация <> ОрганизацияТС Тогда
		Если ЗначениеЗаполнено(ОрганизацияТС) Тогда
			Объект.Организация = ОрганизацияТС;
		Иначе
			Объект.Организация = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.ТекущийПользователь(), "ОсновнаяОрганизация");
		КонецЕсли;
		
		ПриИзмененииОрганизации();
	КонецЕсли;
	
	Если Объект.ТранспортноеСредство.уатЗаполнятьПутевойЛистСпискомОборудования Тогда
		мСоставТС = ?(мКопированиеДокумента, ПолучитьМассивПрицепов(ПараметрОбъектКопирования), уатОбщегоНазначения.уатСоставТС(Объект.ТранспортноеСредство));
	Иначе
		мСоставТС = Новый Массив;
	КонецЕсли;
		
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.ИнициализацияДанныхАвтомобиля(ОстатокТопливаВыезд, мСоставТС, флЗаполнитьВодителейПоУмолчанию);
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	
	ИнициализацияЗП();
	
	НомерТранспортноеСредство = ПредставлениеТСсервер(Объект.ТранспортноеСредство, Объект.Организация);
	ОбновитьНомераПрицеповСервер();
	
	ОстатокТопливаВозвратПриИзмененииСервер();
	
	ПредВидПЛ = Объект.ВидПЛ;
	ОснВидПЛпоТС = Объект.ТранспортноеСредство.уатОсновнойВидПЛ;
	Если ЗначениеЗаполнено(ОснВидПЛпоТС) Тогда
		Объект.ВидПЛ = ОснВидПЛпоТС;
	Иначе
		СтруктураОбъектовНастроек = Новый Структура;
		СтруктураОбъектовНастроек.Вставить("Организация", Объект.Организация);
		СтруктураОбъектовНастроек.Вставить("Подразделение", ПодразделениеНастройки());
		СтруктураОбъектовНастроек.Вставить("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
		Объект.ВидПЛ = ПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойВидПЛ);
	КонецЕсли;	
	Если Объект.ВидПЛ <> ПредВидПЛ Тогда
		ВидПЛПриИзмененииСервер();
	КонецЕсли;
	
	ОснРежРаботыТС = Объект.ТранспортноеСредство.уатОсновнойРежимРаботы;
	Если ЗначениеЗаполнено(ОснРежРаботыТС) Тогда
		Объект.РежимРаботыТС = ОснРежРаботыТС;
		РежимРаботыТСПриИзмененииСервер();
	КонецЕсли;	
	
	Если Объект.ТранспортноеСредство.уатМодель.НаличиеСпидометра Тогда
		Элементы.ДекорацияСпидометр.Заголовок = "Спидометр";
		Элементы.РасходГСМПробег.Заголовок = "Пробег";
	Иначе
		Элементы.ДекорацияСпидометр.Заголовок = "Счетчик м/ч";
		Элементы.РасходГСМПробег.Заголовок = "М/часы";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ТранспортноеСредство.уатМодель.ДополнительноеТопливо) Тогда
		Элементы.РаботаНаДвухВидахТоплива.Доступность = Ложь;
		Объект.РаботаНаДвухВидахТоплива = Ложь;
		Элементы.РасходГСМПробег.Видимость = Объект.РаботаНаДвухВидахТоплива;
	Иначе 
		Элементы.РаботаНаДвухВидахТоплива.Доступность = Истина;
	КонецЕсли;

	ПодразделениеТС = Объект.ТранспортноеСредство.уатПодразделение;
	Если ЗначениеЗаполнено(ПодразделениеТС) И Объект.Подразделение <> ПодразделениеТС Тогда
		Объект.Подразделение = ПодразделениеТС;
		ПодразделениеПриИзмененииСервер();
	КонецЕсли;
	
	ПересчетВыданногоГСМСервер();
	
	ОбновитьНомераТСвТаблицахСервер();
	ОбновитьФлагЭтоТЖ_РасходГСМСервер();
	
	ОбновитьВремяФОВ_Сервер();
	
	АвтомобильОлд = Объект.ТранспортноеСредство;
	ОбновитьНадписьСпецРабот();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивПрицепов(СсылкаПЛ)
	Возврат СсылкаПЛ.Прицепы.ВыгрузитьКолонку("ТС");
КонецФункции

&НаКлиенте
Процедура ИнициализацияДанныхПрицепа(ПрицепОлд, Прицеп)
	Если ПрицепОлд = Прицеп и ЗначениеЗаполнено(Прицеп) Тогда
		Возврат;
	КонецЕсли;	
	
	мсвСтрокиУдалить = Новый Массив;
	Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
		Если (ПрицепОлд = ТекСтрока.ТС) ИЛИ (Прицеп = ТекСтрока.ТС) Тогда
			мсвСтрокиУдалить.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекСтрокаУдалить Из мсвСтрокиУдалить Цикл
		Объект.РасходГСМ.Удалить(ТекСтрокаУдалить);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Прицеп) Тогда
		МодельПрицепа = ПолучитьЗначениеРеквизита(Прицеп, "уатМодель");
		ОснТопливо = ПолучитьЗначениеРеквизита(МодельПрицепа, "ОсновноеТопливо");
		Если ЗначениеЗаполнено(ОснТопливо) И ПолучитьЗначениеРеквизита(МодельПрицепа, "НаличиеТопливногоБака") = Истина Тогда
			НоваяСтрокаГСМ = Объект.РасходГСМ.Добавить();
			НоваяСтрокаГСМ.Активен = Истина;
			НоваяСтрокаГСМ.ТС = Прицеп;
			НоваяСтрокаГСМ.ГСМ = ОснТопливо;
			НоваяСтрокаГСМ.ОстатокПриВыезде = уатОбщегоНазначения.уатОстатокГСМнаТС(Объект.ДатаВыезда, Прицеп, ОснТопливо, Объект.Ссылка);
			НоваяСтрокаГСМ.ОстатокПриВозвращении = 0;
		КонецЕсли;
	КонецЕсли;
	
	ПрицепОлд = Прицеп;
КонецПроцедуры

&НаСервере
Процедура ИнициализацияЗП()
	мсвСотрудникиЗП = Новый Массив;
	Если ЗначениеЗаполнено(Объект.Водитель1) Тогда мсвСотрудникиЗП.Добавить(Объект.Водитель1); КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Водитель2) Тогда мсвСотрудникиЗП.Добавить(Объект.Водитель2); КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Сотрудник1) Тогда мсвСотрудникиЗП.Добавить(Объект.Сотрудник1); КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Сотрудник2) Тогда мсвСотрудникиЗП.Добавить(Объект.Сотрудник2); КонецЕсли;
	
	//удалим из З/п строки с сотрудниками, не содержащимися в шапке документа (водитель 1,2 или сотрудник 1,2)
	Сч = Объект.Зарплата.Количество()-1;
	Пока Сч >= 0 Цикл
		ТекСтрока = Объект.Зарплата[Сч];
		Если мсвСотрудникиЗП.Найти(ТекСтрока.Сотрудник) = Неопределено Тогда
			Объект.Зарплата.Удалить(ТекСтрока);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
	Объект.НачислятьЗПВодителю1 = НачислятьЗПВодителю(Объект.Водитель1, Объект.ДатаЗакрытия, Объект.Организация);
	Объект.НачислятьЗПВодителю2 = НачислятьЗПВодителю(Объект.Водитель2, Объект.ДатаЗакрытия, Объект.Организация);
	Объект.НачислятьЗПСотруднику1 = НачислятьЗПВодителю(Объект.Сотрудник1, Объект.ДатаЗакрытия, Объект.Организация);
	Объект.НачислятьЗПСотруднику2 = НачислятьЗПВодителю(Объект.Сотрудник2, Объект.ДатаЗакрытия, Объект.Организация);
КонецПроцедуры

&НаСервереБезКонтекста
Функция НачислятьЗПВодителю(Водитель, ДатаСреза, Организация)
	Возврат Истина;
КонецФункции

&НаСервере
Процедура ВывестиТаблицуВыработкаСотрудников()
	ОписаниеТипаРезультатРаботы = Новый ОписаниеТипов("Число");
	
	//определяем, нужно ли перестраивать таблицу (изменять состав колонок)
	списСотрудниковПЛ = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Объект.Водитель1) Тогда
		списСотрудниковПЛ.Добавить(уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Объект.Водитель1));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Водитель2) Тогда
		списСотрудниковПЛ.Добавить(уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Объект.Водитель2));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Сотрудник1) Тогда
		списСотрудниковПЛ.Добавить(уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Объект.Сотрудник1));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Сотрудник2) Тогда
		списСотрудниковПЛ.Добавить(уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Объект.Сотрудник2));
	КонецЕсли;
	списСотрудниковТЧ = Новый СписокЗначений;
	Для Каждого ТекЭлементКолонка Из ПолучитьРеквизиты("ВыработкаСотрудниковСводная") Цикл
		Если Найти(ТекЭлементКолонка.Имя, "ПараметрВыработки") = 0 Тогда
			списСотрудниковТЧ.Добавить(ТекЭлементКолонка.Заголовок);
		КонецЕсли;
	КонецЦикла;
		
	ПерестраиватьТаблицу = НЕ ОбщегоНазначения.КоллекцииИдентичны(списСотрудниковПЛ, списСотрудниковТЧ);
		
	Если ПерестраиватьТаблицу Тогда
		МассивКолонокДобавить = Новый Массив;
		МассивКолонокУдалить = Новый Массив;
		МассивЭлементовУдалить = Новый Массив;
		
		Для Каждого ТекЭлементКолонка Из Элементы.ВыработкаСотрудниковСводная.ПодчиненныеЭлементы Цикл
			Если Найти(ТекЭлементКолонка.Имя, "ПараметрВыработки") = 0 Тогда
				МассивКолонокУдалить.Добавить(ТекЭлементКолонка.ПутьКДанным);
				МассивЭлементовУдалить.Добавить(ТекЭлементКолонка); 
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекЭлем Из МассивЭлементовУдалить Цикл
			Элементы.Удалить(ТекЭлем);
		КонецЦикла;
	КонецЕсли;
	
	ТабличноеПолеВыработкаСотрудников = Новый ТаблицаЗначений;
	ТабличноеПолеВыработкаСотрудников.Колонки.Добавить("ПараметрВыработки");
	ТабличноеПолеВыработкаСотрудников.Колонки.Добавить("ПараметрВыработкиВременный");
	
	мСоответствиеВыработкаСотрудников = Новый Структура;
	мСчетчикКолонок = 0;
	Если ЗначениеЗаполнено(Объект.Водитель1) Тогда
		мСчетчикКолонок = мСчетчикКолонок + 1;
		ИмяКолонки = "К" + Строка(мСчетчикКолонок);
		ЗаголовокКолонки = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Объект.Водитель1);
		
		мСоответствиеВыработкаСотрудников.Вставить(ИмяКолонки, Объект.Водитель1);
		
		Если ПерестраиватьТаблицу Тогда
			МассивКолонокДобавить.Добавить(Новый РеквизитФормы(ИмяКолонки, ОписаниеТипаРезультатРаботы,
				"ВыработкаСотрудниковСводная", ЗаголовокКолонки));
		КонецЕсли;
	
		ТабличноеПолеВыработкаСотрудников.Колонки.Добавить(ИмяКолонки, ОписаниеТипаРезультатРаботы, , 100);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.Водитель2) Тогда
		мСчетчикКолонок = мСчетчикКолонок + 1;
		ИмяКолонки = "К" + Строка(мСчетчикКолонок);
		ЗаголовокКолонки = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Объект.Водитель2);
		
		мСоответствиеВыработкаСотрудников.Вставить(ИмяКолонки, Объект.Водитель2);
		
		Если ПерестраиватьТаблицу Тогда
			МассивКолонокДобавить.Добавить(Новый РеквизитФормы(ИмяКолонки, ОписаниеТипаРезультатРаботы,
				"ВыработкаСотрудниковСводная", ЗаголовокКолонки));
		КонецЕсли;
		
		ТабличноеПолеВыработкаСотрудников.Колонки.Добавить(ИмяКолонки, ОписаниеТипаРезультатРаботы,	, 100);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.Сотрудник1) Тогда
		мСчетчикКолонок = мСчетчикКолонок + 1;
		ИмяКолонки = "К" + Строка(мСчетчикКолонок);
		ЗаголовокКолонки = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Объект.Сотрудник1);
		
		мСоответствиеВыработкаСотрудников.Вставить(ИмяКолонки, Объект.Сотрудник1);
		
		Если ПерестраиватьТаблицу Тогда
			МассивКолонокДобавить.Добавить(Новый РеквизитФормы(ИмяКолонки, ОписаниеТипаРезультатРаботы,
				"ВыработкаСотрудниковСводная", ЗаголовокКолонки));
		КонецЕсли;
		
		ТабличноеПолеВыработкаСотрудников.Колонки.Добавить(ИмяКолонки, ОписаниеТипаРезультатРаботы, , 100);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.Сотрудник2) Тогда
		мСчетчикКолонок = мСчетчикКолонок + 1;
		ИмяКолонки = "К" + Строка(мСчетчикКолонок);
		ЗаголовокКолонки = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Объект.Сотрудник2);
		
		мСоответствиеВыработкаСотрудников.Вставить(ИмяКолонки, Объект.Сотрудник2);
		
		Если ПерестраиватьТаблицу Тогда
			МассивКолонокДобавить.Добавить(Новый РеквизитФормы(ИмяКолонки, ОписаниеТипаРезультатРаботы,
				"ВыработкаСотрудниковСводная", ЗаголовокКолонки));
		КонецЕсли;
	
		ТабличноеПолеВыработкаСотрудников.Колонки.Добавить(ИмяКолонки, ОписаниеТипаРезультатРаботы, , 100);
	КонецЕсли;	
	
	Если ПерестраиватьТаблицу Тогда
		ИзменитьРеквизиты(МассивКолонокДобавить, МассивКолонокУдалить);
	КонецЕсли;
			
	мПараметрВыработки = уатОбщегоНазначения.уатПараметрыВыработкиВодителей();
	Для Каждого ТекСтрока Из мПараметрВыработки Цикл
		НовСтр = ТабличноеПолеВыработкаСотрудников.Добавить();
		НовСтр.ПараметрВыработки = ТекСтрока.ПараметрВыработки;
		НовСтр.ПараметрВыработкиВременный = ТекСтрока.ПараметрВыработки.Временный;
	КонецЦикла;	
	
	ВыработкаСотрудниковСвернутая1 = Объект.ВыработкаСотрудников.Выгрузить().Скопировать();
	ВыработкаСотрудниковСвернутая1.Свернуть("Сотрудник, ПараметрВыработки", "Количество");
	
	Для счКолонок = 1 По ТабличноеПолеВыработкаСотрудников.Колонки.Количество() - 1 Цикл
		Для каждого ТекСтр Из ТабличноеПолеВыработкаСотрудников Цикл
			Для каждого ТекСтрРезультат Из ВыработкаСотрудниковСвернутая1 Цикл
				Если ТекСтрРезультат.ПараметрВыработки = ТекСтр.ПараметрВыработки Тогда
					Для каждого ТекСоответствие Из мСоответствиеВыработкаСотрудников Цикл
						мСотрудник = ТекСоответствие.Значение;
						мКлюч = ТекСоответствие.Ключ;
						Если ТабличноеПолеВыработкаСотрудников.Колонки[счКолонок].Имя = мКлюч и
								мСотрудник = ТекСтрРезультат.Сотрудник Тогда
							Если ТекСтр.ПараметрВыработки.Временный Тогда
								ТекСтр[счКолонок] = ВремяВЧЧ_ММ_Сервер(ТекСтрРезультат.Количество);
							Иначе	
								ТекСтр[счКолонок] = ТекСтрРезультат.Количество;
							КонецЕсли;	
						КонецЕсли;	
					КонецЦикла;	
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;	
	КонецЦикла;	
	
	ТабличноеПолеВыработкаСотрудников.Сортировать("ПараметрВыработки");
	
	Если ПерестраиватьТаблицу Тогда
		Для Каждого Колонка Из ТабличноеПолеВыработкаСотрудников.Колонки Цикл
			Если Найти(Колонка.Имя, "ПараметрВыработки") <> 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйЭлемент = Элементы.Добавить("ВыработкаСотрудниковСводная_" + Колонка.Имя, Тип("ПолеФормы"),
				Элементы.ВыработкаСотрудниковСводная);
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
			НовыйЭлемент.ПутьКДанным = "ВыработкаСотрудниковСводная." + Колонка.Имя;
			НовыйЭлемент.ТолькоПросмотр = Ложь;
			НовыйЭлемент.УстановитьДействие("ПриИзменении", "КоличествоВыработкиСотрудниковПриИзменении");
			НовыйЭлемент.Ширина = 15;
		КонецЦикла;
	КонецЕсли;
	
	ВыработкаСотрудниковСводная.Очистить();
	Для Каждого ТекСтрока Из ТабличноеПолеВыработкаСотрудников Цикл
		НовСтр = ВыработкаСотрудниковСводная.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиТаблицуВыработкаТС()
	ОписаниеТипаРезультатРаботы = Новый ОписаниеТипов("Число");
	
	//определяем, нужно ли перестраивать таблицу (изменять состав колонок)
	списТСПЛ = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Объект.ТранспортноеСредство) Тогда
		списТСПЛ.Добавить(ПредставлениеТСсервер(Объект.ТранспортноеСредство, Объект.Организация));
	КонецЕсли;
	Для каждого ТекСтрПрицепы Из Объект.Прицепы Цикл
		Если ЗначениеЗаполнено(ТекСтрПрицепы.ТС) Тогда
			списТСПЛ.Добавить(ПредставлениеТСсервер(ТекСтрПрицепы.ТС, Объект.Организация));
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекСтрокаЗадания Из Объект.Задание Цикл
		Если ЗначениеЗаполнено(ТекСтрокаЗадания.Прицеп1) Тогда
			Прицеп1Представление = ПредставлениеТСсервер(ТекСтрокаЗадания.Прицеп1, Объект.Организация);
			Если списТСПЛ.НайтиПоЗначению(Прицеп1Представление) = Неопределено Тогда
				списТСПЛ.Добавить(Прицеп1Представление);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрокаЗадания.Прицеп2) Тогда
			Прицеп2Представление = ПредставлениеТСсервер(ТекСтрокаЗадания.Прицеп2, Объект.Организация);
			Если списТСПЛ.НайтиПоЗначению(Прицеп2Представление) = Неопределено Тогда
				списТСПЛ.Добавить(Прицеп2Представление);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	списТСПЛ.СортироватьПоЗначению();
	
	списТСТЧ = Новый СписокЗначений;
	Для Каждого ТекЭлементКолонка Из ПолучитьРеквизиты("ВыработкаТССводная") Цикл
		Если Найти(ТекЭлементКолонка.Имя, "ПараметрВыработки") = 0 Тогда
			списТСТЧ.Добавить(ТекЭлементКолонка.Заголовок);
		КонецЕсли;
	КонецЦикла;
	списТСТЧ.СортироватьПоЗначению();
		
	ПерестраиватьТаблицу = НЕ ОбщегоНазначения.КоллекцииИдентичны(списТСПЛ, списТСТЧ);
	
	Если ПерестраиватьТаблицу Тогда
		МассивКолонокДобавить = Новый Массив;
		МассивКолонокУдалить = Новый Массив;
		МассивЭлементовУдалить = Новый Массив;
		
		Для Каждого ТекЭлементКолонка Из Элементы.ВыработкаТСсводная.ПодчиненныеЭлементы Цикл
			Если Найти(ТекЭлементКолонка.Имя, "ПараметрВыработки") = 0 Тогда
				МассивКолонокУдалить.Добавить(ТекЭлементКолонка.ПутьКДанным);
				МассивЭлементовУдалить.Добавить(ТекЭлементКолонка); 
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекЭлем Из МассивЭлементовУдалить Цикл
			Элементы.Удалить(ТекЭлем);
		КонецЦикла;
	КонецЕсли;
	
	ТабличноеПолеВыработкаТС = Новый ТаблицаЗначений;
	ТабличноеПолеВыработкаТС.Колонки.Добавить("ПараметрВыработки");
	ТабличноеПолеВыработкаТС.Колонки.Добавить("ПараметрВыработкиВременный");
	
	мСоответствиеВыработкаТС = Новый Структура;
	
	мСчетчикКолонок = 0;
	Если ЗначениеЗаполнено(Объект.ТранспортноеСредство) Тогда
		мСчетчикКолонок = мСчетчикКолонок + 1;
		ИмяКолонки = "К" + Строка(мСчетчикКолонок);
		ЗаголовокКолонки = ПредставлениеТСсервер(Объект.ТранспортноеСредство, Объект.Организация);
		
		мСоответствиеВыработкаТС.Вставить(ИмяКолонки, Объект.ТранспортноеСредство);
		Если ПерестраиватьТаблицу Тогда
			МассивКолонокДобавить.Добавить(Новый РеквизитФормы(ИмяКолонки, ОписаниеТипаРезультатРаботы, "ВыработкаТСсводная",
				ЗаголовокКолонки));
		КонецЕсли;
			
		ТабличноеПолеВыработкаТС.Колонки.Добавить(ИмяКолонки, ОписаниеТипаРезультатРаботы, ЗаголовокКолонки, 100);
	КонецЕсли;	
	
	мсвПрицепы = Новый Массив;
	Для каждого ТекСтрПрицепы Из Объект.Прицепы Цикл
		мсвПрицепы.Добавить(ТекСтрПрицепы.ТС);
	КонецЦикла;
	Для Каждого ТекСтрокаЗадания Из Объект.Задание Цикл
		Если ЗначениеЗаполнено(ТекСтрокаЗадания.Прицеп1) И мсвПрицепы.Найти(ТекСтрокаЗадания.Прицеп1) = Неопределено Тогда
			мсвПрицепы.Добавить(ТекСтрокаЗадания.Прицеп1);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрокаЗадания.Прицеп2) И мсвПрицепы.Найти(ТекСтрокаЗадания.Прицеп2) = Неопределено Тогда
			мсвПрицепы.Добавить(ТекСтрокаЗадания.Прицеп2);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекПрицеп Из мсвПрицепы Цикл
		Попытка
			мСчетчикКолонок = мСчетчикКолонок + 1;
			ИмяКолонки = "К" + Строка(мСчетчикКолонок);
			ЗаголовокКолонки = ПредставлениеТСсервер(ТекПрицеп, Объект.Организация);
		
			мСоответствиеВыработкаТС.Вставить(ИмяКолонки, ТекПрицеп);
			Если ПерестраиватьТаблицу Тогда
				МассивКолонокДобавить.Добавить(Новый РеквизитФормы(ИмяКолонки, ОписаниеТипаРезультатРаботы, "ВыработкаТСсводная",
					ЗаголовокКолонки));
			КонецЕсли;
				
			ТабличноеПолеВыработкаТС.Колонки.Добавить(ИмяКолонки, ОписаниеТипаРезультатРаботы, ЗаголовокКолонки, 100);
		Исключение
			сообщить("Ошибка при заполнении таблицы выработки ТС и механизмов");
			сообщить("Прицеп/оборудование """ + ТекПрицеп + """. Ошибка " +ОписаниеОшибки());
		КонецПопытки;	
	КонецЦикла;
	
	Если ПерестраиватьТаблицу Тогда
		ИзменитьРеквизиты(МассивКолонокДобавить, МассивКолонокУдалить);
	КонецЕсли;
			
	мПараметрВыработки = уатОбщегоНазначения.уатПараметрыВыработкиТС();
	Для Каждого ТекСтрока Из мПараметрВыработки Цикл
		НовСтр = ТабличноеПолеВыработкаТС.Добавить();
		НовСтр.ПараметрВыработки = ТекСтрока.ПараметрВыработки;
		НовСтр.ПараметрВыработкиВременный = ТекСтрока.ПараметрВыработки.Временный;
	КонецЦикла;	
	
	ВыработкаТССвернутая1 = Объект.ВыработкаТС.Выгрузить().Скопировать();
	ВыработкаТССвернутая1.Свернуть("ТС, ПараметрВыработки", "Количество");
	
	Для счКолонок = 1 По ТабличноеПолеВыработкаТС.Колонки.Количество() - 1 Цикл
		Для каждого ТекСтр Из ТабличноеПолеВыработкаТС Цикл
			Для каждого ТекСтрРезультат Из ВыработкаТССвернутая1 Цикл
				Если ТекСтрРезультат.ПараметрВыработки = ТекСтр.ПараметрВыработки Тогда
					Для каждого ТекСоответствие Из мСоответствиеВыработкаТС Цикл
						мТС = ТекСоответствие.Значение;
						мКлюч = ТекСоответствие.Ключ;
						Если ТабличноеПолеВыработкаТС.Колонки[счКолонок].Имя = мКлюч и мТС = ТекСтрРезультат.ТС Тогда
							Если ТекСтр.ПараметрВыработки.Временный Тогда
								ТекСтр[счКолонок] = ВремяВЧЧ_ММ_Сервер(ТекСтрРезультат.Количество);
							Иначе
								ТекСтр[счКолонок] = ТекСтрРезультат.Количество;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ТабличноеПолеВыработкаТС.Сортировать("ПараметрВыработки");
	
	Если ПерестраиватьТаблицу Тогда
		Для Каждого Колонка Из ТабличноеПолеВыработкаТС.Колонки Цикл
			Если Найти(Колонка.Имя, "ПараметрВыработки") <> 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйЭлемент = Элементы.Добавить("ВыработкаТССводная_" + Колонка.Имя, Тип("ПолеФормы"), Элементы.ВыработкаТСсводная);
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
			НовыйЭлемент.ПутьКДанным = "ВыработкаТСсводная." + Колонка.Имя;
			НовыйЭлемент.ТолькоПросмотр = Ложь;
			НовыйЭлемент.УстановитьДействие("ПриИзменении", "КоличествоВыработкиТСПриИзменении");
			НовыйЭлемент.Ширина = 15;
		КонецЦикла;
	КонецЕсли;
	
	ВыработкаТСсводная.Очистить();
	Для Каждого ТекСтрока Из ТабличноеПолеВыработкаТС Цикл
		НовСтр = ВыработкаТСсводная.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, ТекСтрока);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВывестиТаблицуЗП(Сотрудник = Неопределено)
	мсвСтрокЗарплата = Новый Массив;
	Для Каждого ТекСтрокаЗП Из Объект.Зарплата Цикл
		мсвСтрокЗарплата.Добавить(Новый Структура("Сотрудник, Сумма", ТекСтрокаЗП.Сотрудник, ТекСтрокаЗП.Сумма));
	КонецЦикла;
	
	СтруктураРеквизитов = Новый Структура("Вод1, Вод2, Сотр1, Сотр2, ЗПВод1, ЗПВод2, ЗПСотр1, ЗПСотр2, Зарплата",
		Объект.Водитель1, Объект.Водитель2, Объект.Сотрудник1, Объект.Сотрудник2,
		Объект.НачислятьЗПВодителю1, Объект.НачислятьЗПВодителю2, Объект.НачислятьЗПСотруднику1, Объект.НачислятьЗПСотруднику2,
		мсвСтрокЗарплата);
	уатОбщегоНазначенияКлиентСервер.ВывестиТаблицуЗП(ЭтаФорма, СтруктураРеквизитов, Сотрудник);
КонецПроцедуры

&НаСервере
Процедура ВывестиТаблицуЗПсервер()
	мсвСтрокЗарплата = Новый Массив;
	Для Каждого ТекСтрокаЗП Из Объект.Зарплата Цикл
		мсвСтрокЗарплата.Добавить(Новый Структура("Сотрудник, Сумма", ТекСтрокаЗП.Сотрудник, ТекСтрокаЗП.Сумма));
	КонецЦикла;
	
	СтруктураРеквизитов = Новый Структура("Вод1, Вод2, Сотр1, Сотр2, ЗПВод1, ЗПВод2, ЗПСотр1, ЗПСотр2, Зарплата",
		Объект.Водитель1, Объект.Водитель2, Объект.Сотрудник1, Объект.Сотрудник2,
		Объект.НачислятьЗПВодителю1, Объект.НачислятьЗПВодителю2, Объект.НачислятьЗПСотруднику1, Объект.НачислятьЗПСотруднику2,
		мсвСтрокЗарплата);
	уатОбщегоНазначенияКлиентСервер.ВывестиТаблицуЗП(ЭтаФорма, СтруктураРеквизитов);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗаправкиДляПЛ(ПЛСсылка)
	тблЗаправки = уатОбщегоНазначения.уатПолучитьЗаправкиДляПЛ(ПЛСсылка);
	мсвЗаправок = уатОбщегоНазначенияСервер.ПреобразоватьТаблицуВМассивСтрок(тблЗаправки);
	
	Возврат мсвЗаправок;
КонецФункции

&НаКлиенте
//Процедура заполняет таблицу списком заправок
//
Процедура ВывестиТаблицуЗаправок()
	ЗаправкиГСМ.Очистить();
	
	мсвЗаправок = ПолучитьЗаправкиДляПЛ(Объект.Ссылка);
	
	//если есть хотя бы одна заправка не со склада и по талонам, делаем видимыми столбцы сумма и валюта
	мВидимостьСуммы = Ложь;
	
	Для Каждого ТекСтрока Из мсвЗаправок Цикл
		НоваяСтрока = ЗаправкиГСМ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		
		Если ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаНаличные")
			ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПоставщик")
			ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта")
			Тогда
			
			мВидимостьСуммы = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьНомераТС_ЗаправкиГСМ();
	ОбновитьФлагЭтоТЖ_РасходГСМ();
	ОбновитьЗаправкиВсего();
	
	Если Элементы.ЗаправкиГСМСумма.Видимость <> мВидимостьСуммы Тогда
		Элементы.ЗаправкиГСМВалюта.Видимость = мВидимостьСуммы;
		Элементы.ЗаправкиГСМСумма.Видимость = мВидимостьСуммы;
		Элементы.ЗаправкиГСМЦена.Видимость = мВидимостьСуммы;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВывестиТаблицуЗаправокСервер()
	ЗаправкиГСМ.Очистить();
	
	мсвЗаправок = ПолучитьЗаправкиДляПЛ(Объект.Ссылка);
	
	//если есть хотя бы одна заправка не со склада и по талонам, делаем видимыми столбцы сумма и валюта
	мВидимостьСуммы = Ложь;
	
	Для Каждого ТекСтрока Из мсвЗаправок Цикл
		НоваяСтрока = ЗаправкиГСМ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		
		Если ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаНаличные")
			ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПоставщик")
			ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта")
			Тогда
			
			мВидимостьСуммы = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВывестиТаблицуСливов()
	СливыГСМ.Очистить();
	
	мсвСтрок = ПолучитьТаблицуСливовСервер(Объект.Ссылка);
	Для Каждого ТекСтрока Из мсвСтрок Цикл
		НоваяСтрока = СливыГСМ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ВывестиТаблицуСливовСервер()
	СливыГСМ.Очистить();
	
	мсвСтрок = ПолучитьТаблицуСливовСервер(Объект.Ссылка);
	Для Каждого ТекСтрока Из мсвСтрок Цикл
		НоваяСтрока = СливыГСМ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТаблицуСливовСервер(ПЛ)
	
	тблСливы     = уатОбщегоНазначения.уатПолучитьСливыДляПЛ(ПЛ);
	тблСливыНаТС = уатОбщегоНазначения.уатПолучитьСливыНаТСДляПЛ(ПЛ);
	
	мсвРез = Новый Массив();
	
	Для Каждого ТекСтрока Из тблСливы Цикл
		СтруктураСтроки = Новый Структура;
		Для Каждого ТекКолонка Из тблСливы.Колонки Цикл
			СтруктураСтроки.Вставить(ТекКолонка.Имя, ТекСтрока[ТекКолонка.Имя]);
		КонецЦикла;
		СтруктураСтроки.Вставить("НомерТС", уатОбщегоНазначения.уатПредставлениеТС(ТекСтрока.ТС, ПЛ.Организация));
		СтруктураСтроки.Вставить("Картинка", ?(ТекСтрока.Проведен, 0, ?(ТекСтрока.ПометкаУдаления, 1, 2)));
		
		мсвРез.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Для Каждого ТекСтрока Из тблСливыНаТС Цикл
		СтруктураСтроки = Новый Структура();
		Для Каждого ТекКолонка Из тблСливыНаТС.Колонки Цикл
			СтруктураСтроки.Вставить(ТекКолонка.Имя, ТекСтрока[ТекКолонка.Имя]);
		КонецЦикла;
		СтруктураСтроки.Вставить("НомерТС", уатОбщегоНазначения.уатПредставлениеТС(ТекСтрока.ТС, ПЛ.Организация));
		СтруктураСтроки.Вставить("Картинка", ?(ТекСтрока.Проведен, 0, ?(ТекСтрока.ПометкаУдаления, 1, 2)));
		
		мсвРез.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат мсвРез;
	
КонецФункции

&НаСервере
Процедура ОбновитьКартинкиЗаправкиГСМ()
	Для Каждого ТекСтрока Из ЗаправкиГСМ Цикл
		Если ТекСтрока.Ссылка.Проведен Тогда
			ТекСтрока.Картинка = 0;
		ИначеЕсли ТекСтрока.Ссылка.ПометкаУдаления Тогда
			ТекСтрока.Картинка = 1;
		Иначе
			ТекСтрока.Картинка = 2;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьКартинкиСливыГСМ()
	Для Каждого ТекСтрока Из СливыГСМ Цикл
		Если ТекСтрока.Проведен Тогда
			ТекСтрока.Картинка = 0;
		ИначеЕсли ТекСтрока.ПометкаУдаления Тогда
			ТекСтрока.Картинка = 1;
		Иначе
			ТекСтрока.Картинка = 2;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаправкиВсего()
	Для Каждого ТекСтрока Из ЗаправкиГСМ Цикл
		ТекСтрока.Всего = ТекСтрока.Сумма + ?(ТекСтрока.Ссылка.СуммаВключаетНДС, 0, ТекСтрока.СуммаНДС);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПересчетОстаткаГСМ(ТекКолонкаИмя = "РасходПоФакту", ТекСтрока = Неопределено)
	Если ТекСтрока = Неопределено Тогда
		ТекСтрока = Элементы.РасходГСМ.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекКолонкаИмя = "ОстатокПриВыезде" Тогда
		ПересчетРасходФактВСтроке(ТекСтрока);
	ИначеЕсли ТекКолонкаИмя = "ОстатокПриВозвращении" Тогда
		ПересчетРасходФактВСтроке(ТекСтрока);
	Иначе //Если ТекКолонкаИмя = "РасходПоФакту" Тогда
		ТекСтрока.ОстатокПриВозвращении = ТекСтрока.ОстатокПриВыезде - ТекСтрока.РасходПоФакту + ТекСтрока.Выдано - ТекСтрока.Сдано;
	КонецЕсли;
	
	Если Объект.ТранспортноеСредство = ТекСтрока.ТС Тогда
		Если ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(Объект.ТранспортноеСредство, "уатМодель"),
				"ОсновноеТопливо") = ТекСтрока.ГСМ Тогда
			ОстатокТопливаВыезд = ТекСтрока.ОстатокПриВыезде;
			ОстатокТопливаВозврат = ТекСтрока.ОстатокПриВозвращении;
		КонецЕсли;
	КонецЕсли;
	
	РассчитатьЭкономиюПережог();
КонецПроцедуры

&НаСервере
Процедура ПересчетВыданногоГСМСервер()
	Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
		//выбрали строки заправок для ТС
		мМассивСтрокЗаправкиГСМ = ЗаправкиГСМ.НайтиСтроки(Новый Структура("ТС", ТекСтрока.ТС));
		
		тзАналогиГСМ = уатОбщегоНазначения.уатПолучитьАналогиГСМ(ТекСтрока.ГСМ);
		
		чВыдано = 0;
		Для сч = 0 По мМассивСтрокЗаправкиГСМ.Количество() - 1 Цикл
			//если заправка не проведена - не учитываем
			Если НЕ мМассивСтрокЗаправкиГСМ[сч].Ссылка.Проведен Тогда
				Продолжить;
			КонецЕсли;
			
			//заправка заданнымГСМ или его аналогом
			//Если заправка была по талонам, то определяем ГСМ талона и кол-во литров по талону
			Если мМассивСтрокЗаправкиГСМ[сч].ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаТалоны Тогда
				мГСМТалон = уатОбщегоНазначения.уатПрочитатьРеквизитГСМ(мМассивСтрокЗаправкиГСМ[сч].ГСМ);
				мГСМ		= мГСМТалон.ГСМТалона;
				
				СтруктураОтбора = Новый Структура("Контрагент, ГСМ, ВидЦеныПоставщика, Соглашение, Валюта",
					мМассивСтрокЗаправкиГСМ[сч].АЗС,
					мГСМТалон,
					мМассивСтрокЗаправкиГСМ[сч].ВидЦеныПоставщика,
					мМассивСтрокЗаправкиГСМ[сч].Соглашение,
					мМассивСтрокЗаправкиГСМ[сч].Валюта);
				
				мКоличество = уатОбщегоНазначения.уатКоличествоЛитровТалонаГСМ(мМассивСтрокЗаправкиГСМ[сч].Дата, СтруктураОтбора, мМассивСтрокЗаправкиГСМ[сч].Количество);
			Иначе
				мГСМ		= мМассивСтрокЗаправкиГСМ[сч].ГСМ;
				мКоличество = мМассивСтрокЗаправкиГСМ[сч].Количество;
			КонецЕсли;	
			
			Если тзАналогиГСМ.Найти(мГСМ, "Аналог") <> Неопределено Или	мГСМ = ТекСтрока.ГСМ Тогда
				чВыдано = чВыдано + мКоличество;
			КонецЕсли;	
		КонецЦикла;	
		
		мМассивСтрокСливыНаТС = СливыГСМ.НайтиСтроки(Новый Структура("АЗС, ВидОперации", ТекСтрока.ТС, Перечисления.уатВидыОперацийСливГСМ.НаТС));
		
		Для сч = 0 По мМассивСтрокСливыНаТС.Количество() - 1 Цикл
			//если заправка не проведена - не учитываем
			Если НЕ мМассивСтрокСливыНаТС[сч].Ссылка.Проведен Тогда
				Продолжить;
			КонецЕсли;
			
			//слив ГСМ или его аналога
			мГСМ		= мМассивСтрокСливыНаТС[сч].ГСМ;
			мКоличество = мМассивСтрокСливыНаТС[сч].Количество;
			
			Если тзАналогиГСМ.Найти(мГСМ, "Аналог") <> Неопределено Или мГСМ = ТекСтрока.ГСМ Тогда
				чВыдано = чВыдано + мКоличество;
			КонецЕсли;
		КонецЦикла;
		
		Если ТекСтрока.Выдано <> Окр(чВыдано, 3) Тогда
			ТекСтрока.Выдано = чВыдано;
			//Если Объект.Рассчитан Тогда
				ПересчетРасходФактВСтрокеСервер(ТекСтрока);
			//КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПересчетСданногоГСМСервер()
	Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
		мМассивСтрокСливовГСМ = СливыГСМ.НайтиСтроки(Новый Структура("ТС", ТекСтрока.ТС));
		
		тзАналогиГСМ = уатОбщегоНазначения.уатПолучитьАналогиГСМ(ТекСтрока.ГСМ);
		
		чСдано = 0;
		Для сч = 0 По мМассивСтрокСливовГСМ.Количество() - 1 Цикл
			//если заправка не проведена - не учитываем
			Если НЕ мМассивСтрокСливовГСМ[сч].Ссылка.Проведен Тогда
				Продолжить;
			КонецЕсли;
			
			//слив ГСМ или его аналога
			мГСМ		= мМассивСтрокСливовГСМ[сч].ГСМ;
			мКоличество = мМассивСтрокСливовГСМ[сч].Количество;
			
			Если тзАналогиГСМ.Найти(мГСМ, "Аналог") <> Неопределено Или	мГСМ = ТекСтрока.ГСМ Тогда
				чСдано = чСдано + мКоличество;
			КонецЕсли;	
		КонецЦикла;	
		
		Если ТекСтрока.Сдано <> Окр(чСдано, 3) Тогда
			ТекСтрока.Сдано = чСдано;
			//Если Объект.Рассчитан Тогда
				ПересчетРасходФактВСтрокеСервер(ТекСтрока);
			//КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПересчетРасходФактВСтроке(СтрокаРасходГСМ)
	СтрокаРасходГСМ.РасходПоФакту = СтрокаРасходГСМ.ОстатокПриВыезде - СтрокаРасходГСМ.ОстатокПриВозвращении
		+ СтрокаРасходГСМ.Выдано - СтрокаРасходГСМ.Сдано;
КонецПроцедуры

&НаСервере
Процедура ПересчетРасходФактВСтрокеСервер(СтрокаРасходГСМ)
	СтрокаРасходГСМ.РасходПоФакту = СтрокаРасходГСМ.ОстатокПриВыезде - СтрокаРасходГСМ.ОстатокПриВозвращении
		+ СтрокаРасходГСМ.Выдано - СтрокаРасходГСМ.Сдано;
КонецПроцедуры

&НаСервере
Функция РасчетИтоговСервер(Отказ, флЗаписывать = Ложь, ТекстСообщОшибки = "")
	ВывестиТаблицуЗаправокСервер();
	ПересчетВыданногоГСМСервер();
	ВывестиТаблицуСливовСервер();
	ПересчетСданногоГСМСервер();
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	Рез = ДокОбъект.РасчетИтогов(Отказ, флЗаписывать);
	ДокОбъект.ПроверитьТаблицуВыработкиТС(ТекстСообщОшибки);
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	
	ОбновитьКоличествоВыработкаПодробноСервер();
	
	ВывестиТаблицуВыработкаТС();
	ВывестиТаблицуВыработкаСотрудников();
	
	ВывестиТаблицуЗПсервер();
	
	Если Объект.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоНорме Или Объект.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоGPS Тогда
		ОснТопливо = ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(Объект.ТранспортноеСредство, "уатМодель"), "ОсновноеТопливо");
		Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
			Если ТекСтрока.Активен Тогда
				Если ТекСтрока.ТС = Объект.ТранспортноеСредство И ТекСтрока.ГСМ = ОснТопливо Тогда
					ОстатокТопливаВозврат = ТекСтрока.ОстатокПриВозвращении;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ОбновитьНадписьСпецРабот();
	Возврат Рез;
КонецФункции

&НаСервере
Процедура УстановитьДатыВыездаВозвращения()
	//запомним для проверки на ночной режим
	мДатаВыезда = НачалоДня(Объект.ДатаВыезда + 24*3600);
	мДатаВозвращения = НачалоДня(Объект.ДатаВозвращения);
	
	Если НачалоДня(Объект.ДатаВыезда) = '00010101' ИЛИ Объект.Ссылка.Пустая() ИЛИ
		Объект.Ссылка.Дата = Объект.ДатаВыезда Тогда
		
		Объект.ДатаВыезда = Объект.Дата;
	КонецЕсли;
	Если НачалоДня(Объект.ДатаВозвращения) = '00010101' Тогда
		Объект.ДатаВозвращения = Объект.Дата;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.РежимРаботыТС) Тогда
		НачалоРаботы_ = Объект.РежимРаботыТС.НачалоРаботы;
		КонецРаботы_ = Объект.РежимРаботыТС.КонецРаботы;
	Иначе
		НачалоРаботы_ = ПолучитьПраваИНастройкиПользователя(Объект.Организация,
			ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВремяВыездаПЛ"));
		КонецРаботы_ = ПолучитьПраваИНастройкиПользователя(Объект.Организация,
			ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВремяВозращенияПЛ"));
	КонецЕсли;
	
	//приравняем дату возвращения к дате выезда
	Если Объект.ДатаВыезда > Объект.ДатаВозвращения Тогда
		Объект.ДатаВозвращения = Объект.ДатаВыезда;
	КонецЕсли;
	
	Объект.ДатаВыезда = НачалоДня(Объект.ДатаВыезда) + (НачалоРаботы_ - '00010101');
	Объект.ДатаВозвращения	= НачалоДня(Объект.ДатаВозвращения) + (КонецРаботы_ - '00010101');
	
	//поправка на ночной режим работы (добавляем сутки к времени возвращения)
	Если Объект.ДатаВыезда > Объект.ДатаВозвращения И НачалоРаботы_ > КонецРаботы_ Тогда
		Объект.ДатаВозвращения	= Объект.ДатаВозвращения + 24*3600;
	ИначеЕсли НачалоДня(Объект.ДатаВыезда) < НачалоДня(Объект.ДатаВозвращения) И НачалоРаботы_ < КонецРаботы_ И
			мДатаВыезда = мДатаВозвращения Тогда
		//с ночного перещелкнули на дневной (отнимаем сутки от времени возвращения)
		Объект.ДатаВозвращения = Объект.ДатаВозвращения - 24*3600;
	КонецЕсли;
	
	Объект.ДатаВыезда = уатОбщегоНазначения.уатДатаБезСекунд(Объект.ДатаВыезда);
	Объект.ДатаВозвращения	= уатОбщегоНазначения.уатДатаБезСекунд(Объект.ДатаВозвращения);
	ДатаВыездаПриИзмененииСервер();
	ДатаВозвращенияПриИзмененииСервер();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПросроченныеДокументыВодителя(ТекДата, мДниДоОкончанияДействияДокументовВодителей, Водитель)
	Возврат уатОбщегоНазначения.уатПросроченныеДокументыВодителя(ТекДата, мДниДоОкончанияДействияДокументовВодителей,
		Водитель);
КонецФункции

&НаСервереБезКонтекста
Функция ПросроченныеДокументыТС(ТекДата, мДниДоОкончанияДействияДокументовТС, ТС)
	Возврат уатОбщегоНазначения.уатПросроченныеДокументыТС(ТекДата, мДниДоОкончанияДействияДокументовТС, ТС);
КонецФункции

&НаКлиенте
Процедура ОбновитьПараметрВыработкиТСВременный()
	Для Каждого ТекСтрока Из Объект.ВыработкаТС Цикл
		ТекСтрока.ПараметрВыработкиВременный = ПолучитьЗначениеРеквизита(ТекСтрока.ПараметрВыработки, "Временный");
		Если ТекСтрока.ПараметрВыработкиВременный = Истина Тогда
			ТекСтрока.КоличествоФормат = ВремяВЧЧ_ММ(ТекСтрока.Количество);
		Иначе
			ТекСтрока.КоличествоФормат = ТекСтрока.Количество;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрВыработкиСотрудниковВременный()
	Для Каждого ТекСтрока Из Объект.ВыработкаСотрудников Цикл
		ТекСтрока.ПараметрВыработкиВременный = ПолучитьЗначениеРеквизита(ТекСтрока.ПараметрВыработки, "Временный");
		Если ТекСтрока.ПараметрВыработкиВременный = Истина Тогда
			ТекСтрока.КоличествоФормат = ВремяВЧЧ_ММ(ТекСтрока.Количество);
		Иначе
			ТекСтрока.КоличествоФормат = ТекСтрока.Количество;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьКоличествоВыработкаПодробноСервер()
	Для Каждого ТекСтрока Из Объект.ВыработкаТС Цикл
		ТекСтрока.ПараметрВыработкиВременный = ТекСтрока.ПараметрВыработки.Временный;
		Если ТекСтрока.ПараметрВыработкиВременный = Истина Тогда
			ТекСтрока.КоличествоФормат = уатОбщегоНазначения.уатВремяВЧЧ_ММ(ТекСтрока.Количество);
		Иначе
			ТекСтрока.КоличествоФормат = ТекСтрока.Количество;
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекСтрока Из Объект.ВыработкаСотрудников Цикл
		ТекСтрока.ПараметрВыработкиВременный = ТекСтрока.ПараметрВыработки.Временный;
		Если ТекСтрока.ПараметрВыработкиВременный = Истина Тогда
			ТекСтрока.КоличествоФормат = уатОбщегоНазначения.уатВремяВЧЧ_ММ(ТекСтрока.Количество);
		Иначе
			ТекСтрока.КоличествоФормат = ТекСтрока.Количество;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокПластиковыхКарт()
	ВладельцыКарт = Новый СписокЗначений();
	ВладельцыКарт.Добавить(Элементы.ЗаправкиГСМ.ТекущиеДанные.ТС);
	ВладельцыКарт.Добавить(Элементы.ЗаправкиГСМ.ТекущиеДанные.Водитель);
	Элементы.ЗаправкиГСМПластиковаяКарта.СписокВыбора.ЗагрузитьЗначения(СписокПластикКарт(ВладельцыКарт).ВыгрузитьЗначения());
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокПластикКарт(ВладельцыКарт)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатТопливныеКарты.Ссылка
	|ИЗ
	|	Справочник.уатТопливныеКарты КАК уатТопливныеКарты
	|ГДЕ
	|	уатТопливныеКарты.КомуВыдана В(&ВладельцыКарт)
	|	И НЕ уатТопливныеКарты.ПометкаУдаления");
	Запрос.УстановитьПараметр("ВладельцыКарт", ВладельцыКарт);
	
	списокПК = Новый СписокЗначений;
	списокПК.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	Возврат списокПК;
КонецФункции

&НаСервере
Процедура СохранитьНастройкиСервер()
	УстановитьПривилегированныйРежим(Истина);
	
	ХранилищеОбщихНастроек.Сохранить("Документ.уатПутевойЛист", "РедактироватьЗаправкуГСМВДиалоге",
		РедактироватьЗаправкуГСМВДиалоге);
		
	НастройкиФормы = ХранилищеНастроекДанныхФорм.Загрузить("Документ.уатПутевойЛист.Форма.ФормаДокумента", "ОбщиеНастройки");
	Если (НастройкиФормы = Неопределено ИЛИ ТипЗнч(НастройкиФормы) <> Тип("Соответствие")) Тогда
		НастройкиФормы = Новый Соответствие;
	КонецЕсли;
	НастройкаОтображенияФормы = ХранилищеСистемныхНастроек.Загрузить("Документ.уатПутевойЛист.Форма.ФормаДокумента/НастройкиФормы");
	НастройкиФормы.Вставить(ВидПЛДоИзменения,НастройкаОтображенияФормы);
	ХранилищеНастроекДанныхФорм.Сохранить("Документ.уатПутевойЛист.Форма.ФормаДокумента", "ОбщиеНастройки", НастройкиФормы);

КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеДокумента()
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ДокОбъект.ПроверитьЗаполнение();
КонецФункции

&НаСервереБезКонтекста
Функция ВалютаРегламентированногоУчета()
	Возврат Константы.ВалютаРегламентированногоУчета.Получить();
КонецФункции

&НаСервереБезКонтекста
Функция ПравоДоступаИзменениеЗаправкиГСМ()
	Возврат ПравоДоступа("Изменение", Метаданные.Документы.уатЗаправкаГСМ);
КонецФункции

&НаСервереБезКонтекста
Функция ПравоДоступаИзменениеСливыГСМ()
	Возврат ПравоДоступа("Изменение", Метаданные.Документы.уатСливГСМ);
КонецФункции

&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	СтрокаТабличнойЧасти.СуммаНДС = уатОбщегоНазначенияТиповые.уатРассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
		мДокументЗаправкаГСМ.УчитыватьНДС, мДокументЗаправкаГСМ.СуммаВключаетНДС,
		уатОбщегоНазначенияТиповые.уатПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
КонецПроцедуры

//Функция возвращает подразделение, используемое для получения настроек
//
&НаСервере
Функция ПодразделениеНастройки() Экспорт
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Рез = Объект.Подразделение;
	Иначе
		Рез = уатОбщегоНазначения.МестонахождениеТС(Объект.ТранспортноеСредство).Подразделение;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура СформироватьСписокВыбораТСвЗаправкахГСМ()
	Элементы.ЗаправкиГСМТС.СписокВыбора.Очистить();
	Элементы.СливыГСМНомерТС.СписокВыбора.Очистить();
	
	Если ЗначениеЗаполнено(Объект.ТранспортноеСредство) Тогда
		Элементы.ЗаправкиГСМТС.СписокВыбора.Добавить(ПредставлениеТС(Объект.ТранспортноеСредство, Объект.Организация));
		Элементы.СливыГСМНомерТС.СписокВыбора.Добавить(ПредставлениеТС(Объект.ТранспортноеСредство, Объект.Организация));
	КонецЕсли;
	Для Каждого ТекСтрока Из Объект.Прицепы Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ТС) Тогда
			Элементы.ЗаправкиГСМТС.СписокВыбора.Добавить(ПредставлениеТС(ТекСтрока.ТС, Объект.Организация));
			Элементы.СливыГСМНомерТС.СписокВыбора.Добавить(ПредставлениеТС(ТекСтрока.ТС, Объект.Организация));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокВыбораТСвЗаправкахГСМСервер()
	Элементы.ЗаправкиГСМТС.СписокВыбора.Очистить();
	Элементы.СливыГСМНомерТС.СписокВыбора.Очистить();
	
	Если ЗначениеЗаполнено(Объект.ТранспортноеСредство) Тогда
		Элементы.ЗаправкиГСМТС.СписокВыбора.Добавить(ПредставлениеТСсервер(Объект.ТранспортноеСредство, Объект.Организация));
		Элементы.СливыГСМНомерТС.СписокВыбора.Добавить(ПредставлениеТСсервер(Объект.ТранспортноеСредство, Объект.Организация));
	КонецЕсли;
	Для Каждого ТекСтрока Из Объект.Прицепы Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ТС) Тогда
			Элементы.ЗаправкиГСМТС.СписокВыбора.Добавить(ПредставлениеТСсервер(ТекСтрока.ТС, Объект.Организация));
			Элементы.СливыГСМНомерТС.СписокВыбора.Добавить(ПредставлениеТСсервер(ТекСтрока.ТС, Объект.Организация));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьКэшПравПоGPS()
	
	ОргЗапретПоказанийОдометра   = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, "ЗапретитьРучноеИзменениеПоказанийОдометра");
	ПользЗапретПоказанийОдометра = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ПользователиКлиентСервер.ТекущийПользователь(), "ЗапретитьРучноеИзменениеПоказанийОдометра");
	ЗапретПоказанийОдометра      = ?(НЕ ОргЗапретПоказанийОдометра И НЕ ПользЗапретПоказанийОдометра, Ложь, Истина);
	
	ОргЗапретОстатковТоплива   = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, "ЗапретитьРучноеИзменениеОстатковТоплива");
	ПользЗапретОстатковТоплива = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ПользователиКлиентСервер.ТекущийПользователь(), "ЗапретитьРучноеИзменениеОстатковТоплива");
	ЗапретОстатковТоплива	   = ?(НЕ ОргЗапретОстатковТоплива И НЕ ПользЗапретОстатковТоплива, Ложь, Истина);
	
	мКэшПравGPS_ЗапретитьРучноеИзменениеПоказанийОдометра = ЗапретПоказанийОдометра;
	мКэшПравGPS_ЗапретитьРучноеИзменениеОстатковТоплива = ЗапретОстатковТоплива;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВозможностьРедактированияДанныхПоGPS()
	Если НЕ ЗначениеЗаполнено(Объект.ТранспортноеСредство) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуетGPS = уатОбщегоНазначения_проф.уатПроверитьИспользованиеGPS(Объект.ТранспортноеСредство);
	
	Если мКэшПравGPS_ЗапретитьРучноеИзменениеПоказанийОдометра И ИспользуетGPS Тогда
		Элементы.СпидометрВыезда.ТолькоПросмотр = Истина;
		Элементы.СпидометрВозвращения.ТолькоПросмотр = Истина;
		Элементы.ФормаРассчитатьСпидометрПоЗаданию.Доступность = Ложь;
	Иначе
		Элементы.СпидометрВыезда.ТолькоПросмотр = Ложь;
		Элементы.СпидометрВозвращения.ТолькоПросмотр = Ложь;	
		Элементы.ФормаРассчитатьСпидометрПоЗаданию.Доступность = Истина;
	КонецЕсли;
	
	Если мКэшПравGPS_ЗапретитьРучноеИзменениеОстатковТоплива И ИспользуетGPS Тогда
		Элементы.ОстатокТопливаВыезд.ТолькоПросмотр = Истина;
		Элементы.ОстатокТопливаВозврат.ТолькоПросмотр = Истина;
	Иначе
		Элементы.ОстатокТопливаВыезд.ТолькоПросмотр = Ложь;
		Элементы.ОстатокТопливаВозврат.ТолькоПросмотр = Ложь;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГСМПоGPSСервер()
	
	Перем СписокНормРасхода;
	
	ОтказЗаполнениеРасходаПоGPS = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаВыезда) Тогда 
		ТекстОшибки = "Необходимо указать дату выезда";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Объект.ДатаВыезда",, ОтказЗаполнениеРасходаПоGPS);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаВозвращения) Тогда 
		ТекстОшибки = "Необходимо указать дату возвращения";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Объект.ДатаВозвращения",, ОтказЗаполнениеРасходаПоGPS);
	КонецЕсли;
	
	Если ОтказЗаполнениеРасходаПоGPS Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаРасхода Из Объект.РасходГСМ Цикл 
		ТекОсновноеТопливо = СтрокаРасхода.ТС.уатМодель.ОсновноеТопливо;
		Если ЗначениеЗаполнено(СтрокаРасхода.ТС) И ЗначениеЗаполнено(ТекОсновноеТопливо) И СтрокаРасхода.ГСМ = ТекОсновноеТопливо Тогда
			Отказ = Ложь;
			Если Константы.уатИспользоватьDynafleet.Получить() И СтрокаРасхода.ТС.уатИспользуемаяСистемаGPS = Перечисления.уатСистемаGPS.Dynafleet Тогда
				Запрос = Новый Запрос();
				Запрос.Текст = "ВЫБРАТЬ
				|	уатМестоположениеПоGPSСрезПоследних.ПотребленноеТопливо
				|ИЗ
				|	РегистрСведений.уатМестоположениеПоGPS.СрезПоследних(&ДатаКон, ТС = &ТС) КАК уатМестоположениеПоGPSСрезПоследних";
				
				Запрос.УстановитьПараметр("ДатаКон", Объект.ДатаВыезда);
				Запрос.УстановитьПараметр("ТС",      СтрокаРасхода.ТС);
				
				флПустой1 = Запрос.Выполнить().Пустой();
				Если флПустой1 Тогда
					Сообщить("Нет соответствующих данных");
				Иначе
					КоличествоТопливаПриВыезде = Запрос.Выполнить().Выгрузить()[0].ПотребленноеТопливо;
				КонецЕсли;
				
				Запрос = Новый Запрос();
				Запрос.Текст = "ВЫБРАТЬ
				|	уатМестоположениеПоGPSСрезПоследних.ПотребленноеТопливо
				|ИЗ
				|	РегистрСведений.уатМестоположениеПоGPS.СрезПоследних(&ДатаКон, ТС = &ТС) КАК уатМестоположениеПоGPSСрезПоследних";
				
				Запрос.УстановитьПараметр("ДатаКон", Объект.ДатаВозвращения);
				Запрос.УстановитьПараметр("ТС",      СтрокаРасхода.ТС);
				
				флПустой2 = Запрос.Выполнить().Пустой();
				Если флПустой2 Тогда
					Сообщить("Нет соответствующих данных");
				Иначе
					КоличествоТопливаПриВозвращении = Запрос.Выполнить().Выгрузить()[0].ПотребленноеТопливо;
				КонецЕсли;
				
				Если Не флПустой1 И Не флПустой2 Тогда
					СтрокаРасхода.Активен       = Истина;
					СтрокаРасхода.РасходПоНорме = уатЗащищенныеФункцииСервер.РасчитатьРасходГСМПоНорме(Объект, СтрокаРасхода.ТС, СтрокаРасхода.ГСМ, Объект.Организация, Отказ,, Ложь);
					СтрокаРасхода.РасходПоGPS   = КоличествоТопливаПриВозвращении - КоличествоТопливаПриВыезде;
					
					Если Объект.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоНорме Тогда 
						СтрокаРасхода.РасходПоФакту = СтрокаРасхода.РасходПоНорме;
					ИначеЕсли Объект.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоGPS Тогда
						СтрокаРасхода.РасходПоФакту = СтрокаРасхода.РасходПоGPS;
					КонецЕсли;
					
					СтрокаРасхода.ОстатокПриВозвращении = СтрокаРасхода.ОстатокПриВыезде - СтрокаРасхода.РасходПоФакту + СтрокаРасхода.Выдано - СтрокаРасхода.Сдано;
					СтрокаРасхода.Экономия = СтрокаРасхода.РасходПоНорме - СтрокаРасхода.РасходПоФакту;
					
					Если Объект.ТранспортноеСредство = СтрокаРасхода.ТС Тогда
						Если ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(СтрокаРасхода.ТС, "уатМодель"),
								"ОсновноеТопливо") = СтрокаРасхода.ГСМ Тогда
							ОстатокТопливаВыезд   = СтрокаРасхода.ОстатокПриВыезде;
							ОстатокТопливаВозврат = СтрокаРасхода.ОстатокПриВозвращении;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли Константы.уатИспользоватьOmnicomm.Получить() И СтрокаРасхода.ТС.уатИспользуемаяСистемаGPS = Перечисления.уатСистемаGPS.Omnicomm Тогда
				ТекстОшибки = "";
				
				ТС = Новый ТаблицаЗначений();
				ТС.Колонки.Добавить("ТС");
				ТС.Колонки.Добавить("ИдВСистемеНавигации");
				НоваяСтрока = ТС.Добавить();
				НоваяСтрока.ТС = СтрокаРасхода.ТС;
				НоваяСтрока.ИдВСистемеНавигации = СтрокаРасхода.ТС.уатИДвСистемеНавигации;
				
				СтруктураОбъектовНастроек = Новый Структура;
				СтруктураОбъектовНастроек.Вставить("Подразделение", СтрокаРасхода.ТС.уатПодразделение);
				
				КорректировкаОмником = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.КорректировкаВремениДляЗагрузкиOmnicomm);
				
				СтруктураДопПараметров = Новый Структура();
				СтруктураДопПараметров.Вставить("КорректировкаВремени", КорректировкаОмником);
				
				ТаблицаСобытий = уатЗащищенныеФункцииСервер_проф.ПолучитьДанныеПоТСOmnicomm(Объект.ДатаВыезда, Объект.ДатаВозвращения, ТС, ТекстОшибки, СтруктураДопПараметров);
				Если ТаблицаСобытий = 1 Тогда 
					Сообщить(ТекстОшибки);
				Иначе
					СтрокаРасхода.Активен       = Истина;
					СтрокаРасхода.РасходПоНорме = уатЗащищенныеФункцииСервер.РасчитатьРасходГСМПоНорме(Объект, СтрокаРасхода.ТС, СтрокаРасхода.ГСМ, Объект.Организация, Отказ,, Ложь);
					СтрокаРасхода.РасходПоGPS   = ТаблицаСобытий.Итог("fuelRate");
					
					Если Объект.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоНорме Тогда 
						СтрокаРасхода.РасходПоФакту = СтрокаРасхода.РасходПоНорме;
					ИначеЕсли Объект.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоGPS Тогда
						СтрокаРасхода.РасходПоФакту = СтрокаРасхода.РасходПоGPS;
					КонецЕсли;
					
					СтрокаРасхода.ОстатокПриВозвращении = СтрокаРасхода.ОстатокПриВыезде - СтрокаРасхода.РасходПоФакту + СтрокаРасхода.Выдано - СтрокаРасхода.Сдано;
					СтрокаРасхода.Экономия = СтрокаРасхода.РасходПоНорме - СтрокаРасхода.РасходПоФакту;
					
					Если Объект.ТранспортноеСредство = СтрокаРасхода.ТС Тогда
						Если ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(СтрокаРасхода.ТС, "уатМодель"),
								"ОсновноеТопливо") = СтрокаРасхода.ГСМ Тогда
							ОстатокТопливаВыезд   = СтрокаРасхода.ОстатокПриВыезде;
							ОстатокТопливаВозврат = СтрокаРасхода.ОстатокПриВозвращении;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли Константы.уатИспользоватьАвтотрекер.Получить() И СтрокаРасхода.ТС.уатИспользуемаяСистемаGPS = Перечисления.уатСистемаGPS.Автотрекер Тогда
				ТекстОшибки = "";
				
				СтруктураДанныхТСGPSАвтотрекер = уатЗащищенныеФункцииСервер_проф.ПолучитьРасходТопливаПоТСАвтотрекерЧерезВебСервис(Объект.ДатаВыезда, 
				                                                                                              Объект.ДатаВозвращения, 
				                                                                                              СтрокаРасхода.ТС,
				                                                                                              ТекстОшибки);
				
				Если Не ТипЗнч(СтруктураДанныхТСGPSАвтотрекер) = Тип("Структура") Тогда 
					Сообщить(ТекстОшибки);
				Иначе 
					СтрокаРасхода.Активен       = Истина;
					СтрокаРасхода.РасходПоНорме = уатЗащищенныеФункцииСервер.РасчитатьРасходГСМПоНорме(Объект, СтрокаРасхода.ТС, СтрокаРасхода.ГСМ, Объект.Организация, Отказ,, Ложь);
					СтрокаРасхода.РасходПоGPS   = СтруктураДанныхТСGPSАвтотрекер.РасходТоплива;
					
					Если Объект.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоНорме Тогда 
						СтрокаРасхода.РасходПоФакту = СтрокаРасхода.РасходПоНорме;
					ИначеЕсли Объект.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоGPS Тогда
						СтрокаРасхода.РасходПоФакту = СтрокаРасхода.РасходПоGPS;
					КонецЕсли;
					
					СтрокаРасхода.ОстатокПриВозвращении = СтрокаРасхода.ОстатокПриВыезде - СтрокаРасхода.РасходПоФакту + СтрокаРасхода.Выдано - СтрокаРасхода.Сдано;
					СтрокаРасхода.Экономия = СтрокаРасхода.РасходПоНорме - СтрокаРасхода.РасходПоФакту;
					
					Если Объект.ТранспортноеСредство = СтрокаРасхода.ТС Тогда
						Если ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(СтрокаРасхода.ТС, "уатМодель"),
								"ОсновноеТопливо") = СтрокаРасхода.ГСМ Тогда
							ОстатокТопливаВыезд   = СтрокаРасхода.ОстатокПриВыезде;
							ОстатокТопливаВозврат = СтрокаРасхода.ОстатокПриВозвращении;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли Константы.уатИспользоватьСКАУТ.Получить() И СтрокаРасхода.ТС.уатИспользуемаяСистемаGPS = Перечисления.уатСистемаGPS.СКАУТ Тогда
				ТекстОшибки = "";
				
				СтруктураДанныхТСGPSСКАУТ = уатЗащищенныеФункцииСервер_проф.ПолучитьРасходТопливаПоТССКАУТЧерезВебСервис(Объект.ДатаВыезда, 
				                                                                                              Объект.ДатаВозвращения, 
				                                                                                              СтрокаРасхода.ТС,
				                                                                                              ТекстОшибки);
				
				Если Не ТипЗнч(СтруктураДанныхТСGPSСКАУТ) = Тип("Структура") Тогда 
					Сообщить(ТекстОшибки);
				Иначе 
					СтрокаРасхода.Активен       = Истина;
					СтрокаРасхода.РасходПоНорме = уатЗащищенныеФункцииСервер.РасчитатьРасходГСМПоНорме(Объект, СтрокаРасхода.ТС, СтрокаРасхода.ГСМ, Объект.Организация, Отказ,, Ложь);
					СтрокаРасхода.РасходПоGPS   = СтруктураДанныхТСGPSСКАУТ.РасходТоплива;
					
					Если Объект.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоНорме Тогда 
						СтрокаРасхода.РасходПоФакту = СтрокаРасхода.РасходПоНорме;
					ИначеЕсли Объект.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоGPS Тогда
						СтрокаРасхода.РасходПоФакту = СтрокаРасхода.РасходПоGPS;
					КонецЕсли;
					
					СтрокаРасхода.ОстатокПриВозвращении = СтрокаРасхода.ОстатокПриВыезде - СтрокаРасхода.РасходПоФакту + СтрокаРасхода.Выдано - СтрокаРасхода.Сдано;
					СтрокаРасхода.Экономия = СтрокаРасхода.РасходПоНорме - СтрокаРасхода.РасходПоФакту;
					
					Если Объект.ТранспортноеСредство = СтрокаРасхода.ТС Тогда
						Если ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(СтрокаРасхода.ТС, "уатМодель"),
								"ОсновноеТопливо") = СтрокаРасхода.ГСМ Тогда
							ОстатокТопливаВыезд   = СтрокаРасхода.ОстатокПриВыезде;
							ОстатокТопливаВозврат = СтрокаРасхода.ОстатокПриВозвращении;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли Константы.уатИспользоватьWialon.Получить() И СтрокаРасхода.ТС.уатИспользуемаяСистемаGPS = Перечисления.уатСистемаGPS.Wialon Тогда
				ТекстОшибки = "";
				
				СтруктураДанныхТСGPSWialon = уатЗащищенныеФункцииСервер_проф.ПолучитьРасходТопливаДляПЛПоТСWialon(Объект.ДатаВыезда, 
				                                                                                              Объект.ДатаВозвращения, 
				                                                                                              СтрокаРасхода.ТС,
				                                                                                              ТекстОшибки);
				
				Если Не ТипЗнч(СтруктураДанныхТСGPSWialon) = Тип("Структура") Тогда 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				Иначе 
					СтрокаРасхода.Активен       = Истина;
					СтрокаРасхода.РасходПоНорме = уатЗащищенныеФункцииСервер.РасчитатьРасходГСМПоНорме(Объект, СтрокаРасхода.ТС, СтрокаРасхода.ГСМ, Объект.Организация, Отказ,, Ложь);
					СтрокаРасхода.РасходПоGPS   = СтруктураДанныхТСGPSWialon.РасходТоплива;
					
					Если Объект.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоНорме Тогда 
						СтрокаРасхода.РасходПоФакту = СтрокаРасхода.РасходПоНорме;
					ИначеЕсли Объект.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоGPS Тогда
						СтрокаРасхода.РасходПоФакту = СтрокаРасхода.РасходПоGPS;
					КонецЕсли;
					
					СтрокаРасхода.ОстатокПриВозвращении = СтрокаРасхода.ОстатокПриВыезде - СтрокаРасхода.РасходПоФакту + СтрокаРасхода.Выдано - СтрокаРасхода.Сдано;
					СтрокаРасхода.Экономия = СтрокаРасхода.РасходПоНорме - СтрокаРасхода.РасходПоФакту;
					
					Если Объект.ТранспортноеСредство = СтрокаРасхода.ТС Тогда
						Если ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(СтрокаРасхода.ТС, "уатМодель"),
								"ОсновноеТопливо") = СтрокаРасхода.ГСМ Тогда
							ОстатокТопливаВыезд   = СтрокаРасхода.ОстатокПриВыезде;
							ОстатокТопливаВозврат = СтрокаРасхода.ОстатокПриВозвращении;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли Константы.уатИспользоватьАвтоГРАФ.Получить() И СтрокаРасхода.ТС.уатИспользуемаяСистемаGPS = Перечисления.уатСистемаGPS.АвтоГРАФ Тогда
				ТекстОшибки = "";
				
				СтруктураДанныхТСGPSАвтоГРАФ = уатЗащищенныеФункцииСервер_проф.ПолучитьРасходТопливаДляПЛПоТСАвтоГРАФ(Объект.ДатаВыезда, 
				                                                                                              Объект.ДатаВозвращения, 
				                                                                                              СтрокаРасхода.ТС,
				                                                                                              ТекстОшибки);
				
				Если Не ТипЗнч(СтруктураДанныхТСGPSАвтоГРАФ) = Тип("Структура") Тогда 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				Иначе 
					СтрокаРасхода.Активен       = Истина;
					СтрокаРасхода.РасходПоНорме = уатЗащищенныеФункцииСервер.РасчитатьРасходГСМПоНорме(Объект, СтрокаРасхода.ТС, СтрокаРасхода.ГСМ, Объект.Организация, Отказ,, Ложь);
					СтрокаРасхода.РасходПоGPS   = СтруктураДанныхТСGPSАвтоГРАФ.РасходТоплива;
					
					Если Объект.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоНорме Тогда 
						СтрокаРасхода.РасходПоФакту = СтрокаРасхода.РасходПоНорме;
					ИначеЕсли Объект.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоGPS Тогда
						СтрокаРасхода.РасходПоФакту = СтрокаРасхода.РасходПоGPS;
					КонецЕсли;
					
					СтрокаРасхода.ОстатокПриВозвращении = СтрокаРасхода.ОстатокПриВыезде - СтрокаРасхода.РасходПоФакту + СтрокаРасхода.Выдано - СтрокаРасхода.Сдано;
					СтрокаРасхода.Экономия = СтрокаРасхода.РасходПоНорме - СтрокаРасхода.РасходПоФакту;
					
					Если Объект.ТранспортноеСредство = СтрокаРасхода.ТС Тогда
						Если ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(СтрокаРасхода.ТС, "уатМодель"),
								"ОсновноеТопливо") = СтрокаРасхода.ГСМ Тогда
							ОстатокТопливаВыезд   = СтрокаРасхода.ОстатокПриВыезде;
							ОстатокТопливаВозврат = СтрокаРасхода.ОстатокПриВозвращении;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			// ITOB +++
			ИначеЕсли Константы.уатИспользоватьЦСМ.Получить() И СтрокаРасхода.ТС.уатИспользуемаяСистемаGPS = Перечисления.уатСистемаGPS._1СЦСМ Тогда
				ТекстОшибки = "";
				ОбъектСтруктура = Новый Структура;
				ОбъектСтруктура.Вставить("Организация",          Объект.Организация);
				ОбъектСтруктура.Вставить("ТранспортноеСредство", СтрокаРасхода.ТС);
				ОбъектСтруктура.Вставить("ДатаВыезда",           Объект.ДатаВыезда);
				ОбъектСтруктура.Вставить("ДатаВозвращения",      Объект.ДатаВозвращения);
				ДанныеПоТопливу = ItobЗаполнениеПутевыхЛистовВызовСервера.ПолучитьДанныеПоТС(ОбъектСтруктура, ТекстОшибки);
				
				Если ДанныеПоТопливу = Ложь ИЛИ НЕ ТипЗнч(ДанныеПоТопливу) = Тип("Структура") ИЛИ НЕ ПустаяСтрока(ТекстОшибки) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
					Продолжить;
				КонецЕсли;
				
				ФактРасходТоплива = ДанныеПоТопливу.РасходТоплива;
				Если ФактРасходТоплива = Неопределено Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Расход топлива не определен!");
				Иначе
					СтрокаРасхода.Активен       = Истина;
					СтрокаРасхода.РасходПоНорме = уатЗащищенныеФункцииСервер.РасчитатьРасходГСМПоНорме(Объект, СтрокаРасхода.ТС, СтрокаРасхода.ГСМ, Объект.Организация, Отказ,, Ложь);
					СтрокаРасхода.РасходПоGPS   = ФактРасходТоплива;
					
					Если Объект.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоНорме Тогда 
						СтрокаРасхода.РасходПоФакту = СтрокаРасхода.РасходПоНорме;
					ИначеЕсли Объект.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоGPS Тогда
						СтрокаРасхода.РасходПоФакту = СтрокаРасхода.РасходПоGPS;
					КонецЕсли;
					
					СтрокаРасхода.ОстатокПриВозвращении = СтрокаРасхода.ОстатокПриВыезде - СтрокаРасхода.РасходПоФакту + СтрокаРасхода.Выдано - СтрокаРасхода.Сдано;
					СтрокаРасхода.Экономия = СтрокаРасхода.РасходПоНорме - СтрокаРасхода.РасходПоФакту;
					
					Если Объект.ТранспортноеСредство = СтрокаРасхода.ТС Тогда
						Если ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(СтрокаРасхода.ТС, "уатМодель"),
								"ОсновноеТопливо") = СтрокаРасхода.ГСМ Тогда
							ОстатокТопливаВыезд   = СтрокаРасхода.ОстатокПриВыезде;
							ОстатокТопливаВозврат = СтрокаРасхода.ОстатокПриВозвращении;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			// ITOB ---
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокВыбораЭкипажа()
	Элементы.Водитель1.СписокВыбора.Очистить();
	Элементы.Водитель2.СписокВыбора.Очистить();
	Элементы.Сотрудник1.СписокВыбора.Очистить();
	Элементы.Сотрудник2.СписокВыбора.Очистить();
	
	ЭкипажТССписок = уатЗащищенныеФункцииСервер.ЭкипажТССписок(Объект.ТранспортноеСредство);
	ЭкипажТССписок_Количество = ЭкипажТССписок.Количество();
	
	Элементы.Водитель1.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	Элементы.Водитель2.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	Элементы.Сотрудник1.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	Элементы.Сотрудник2.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	
	Если ЭкипажТССписок_Количество = 0 Тогда	
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСотр Из ЭкипажТССписок Цикл
		Элементы.Водитель1.СписокВыбора.Добавить(ТекСотр.Значение);
		Элементы.Водитель2.СписокВыбора.Добавить(ТекСотр.Значение);
		Элементы.Сотрудник1.СписокВыбора.Добавить(ТекСотр.Значение);
		Элементы.Сотрудник2.СписокВыбора.Добавить(ТекСотр.Значение);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВыбораЭкипажаСервер()
	Элементы.Водитель1.СписокВыбора.Очистить();
	Элементы.Водитель2.СписокВыбора.Очистить();
	Элементы.Сотрудник1.СписокВыбора.Очистить();
	Элементы.Сотрудник2.СписокВыбора.Очистить();
	
	ЭкипажТССписок = уатЗащищенныеФункцииСервер.ЭкипажТССписок(Объект.ТранспортноеСредство);
	ЭкипажТССписок_Количество = ЭкипажТССписок.Количество();
	
	Элементы.Водитель1.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	Элементы.Водитель2.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	Элементы.Сотрудник1.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	Элементы.Сотрудник2.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	
	Если ЭкипажТССписок_Количество = 0 Тогда	
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСотр Из ЭкипажТССписок Цикл
		Элементы.Водитель1.СписокВыбора.Добавить(ТекСотр.Значение);
		Элементы.Водитель2.СписокВыбора.Добавить(ТекСотр.Значение);
		Элементы.Сотрудник1.СписокВыбора.Добавить(ТекСотр.Значение);
		Элементы.Сотрудник2.СписокВыбора.Добавить(ТекСотр.Значение);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКолонокЗаданияПоСохраненнымНастройкам(НастройкаОтображенияФормы)
	УстановитьПривилегированныйРежим(Истина);
	ХранилищеСистемныхНастроек.Сохранить("Документ.уатПутевойЛист.Форма.ФормаДокумента/НастройкиФормы",,НастройкаОтображенияФормы);
КонецПроцедуры

&НаСервере
Процедура УстановитьСистемныеНастройки()
	НастройкиФормы = ВосстановитьНастройки();
	НастройкиНекорректны = (НастройкиФормы = Неопределено ИЛИ ТипЗнч(НастройкиФормы) <> Тип("Соответствие"));
	Если Не НастройкиНекорректны Тогда
		НастройкаОтображенияФормы = НастройкиФормы.Получить(Объект.ВидПЛ);
		Если НастройкаОтображенияФормы <> Неопределено Тогда
			УстановитьВидимостьКолонокЗаданияПоСохраненнымНастройкам(НастройкаОтображенияФормы);
		Иначе
			УстановитьВидимостьКолонокЗаданияПоСохраненнымНастройкам(Неопределено);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВосстановитьНастройки()
	НастройкиФормы = ХранилищеНастроекДанныхФорм.Загрузить("Документ.уатПутевойЛист.Форма.ФормаДокумента", "ОбщиеНастройки");
	Возврат НастройкиФормы;
КонецФункции

//Проверка просрочена ли пластиковая карта
//
&НаСервереБезКонтекста
Функция ПластиковаяКартаПросрочена(ПластиковаяКарта, ДатаЗаправки)
	Если ПластиковаяКарта.ДатаОкончания <> Дата(1,1,1) Тогда
		Если ПластиковаяКарта.ДатаОкончания < ДатаЗаправки Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаСервере
Функция ПолучитьВыработкуПоАгрегатам()
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	Если Объект.Ссылка.Пустая() Тогда
		Попытка
			ДокОбъект.Записать();
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	МассивАгрегатов = ДокОбъект.ВывестиПараметрВыработкиПользовательскихАгрегатов();
	Возврат МассивАгрегатов;
КонецФункции

&НаКлиенте
Процедура УстановитьОтборОбъектСтроительства(ТекСтрокаЗадания)
	Если ЗначениеЗаполнено(ТекСтрокаЗадания.Контрагент) Тогда
		СписКонтрагентов = Новый СписокЗначений;
		СписКонтрагентов.Добавить(ТекСтрокаЗадания.Контрагент);
		СписКонтрагентов.Добавить(ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
		ПарамВыбора = Новый ПараметрВыбора("Отбор.Контрагент", СписКонтрагентов);
		мсв = Новый Массив;
		мсв.Добавить(ПарамВыбора);
		Элементы.ЗаданиеОбъектСтроительства.ПараметрыВыбора = Новый ФиксированныйМассив(мсв); //Новый ФиксированныйМассив(мсв)
	Иначе
		Элементы.ЗаданиеОбъектСтроительства.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПредыдущийПЛНеРассчитан()
	Если Объект.Рассчитан Тогда
		Возврат;
	КонецЕсли;
		
	ПредПЛ_номер = Неопределено;
	ПредПЛ_дата = Неопределено;
	Если уатОбщегоНазначения.ПредыдущийПЛНеРассчитан(Объект.ТранспортноеСредство, Объект.ДатаВыезда, ПредПЛ_номер, ПредПЛ_дата, Объект.Ссылка) Тогда
		Объект.СпидометрВыезда = 0;
		Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
			Если ТекСтрока.ТС = Объект.ТранспортноеСредство Тогда
				ТекСтрока.ОстатокПриВыезде = 0;
				ПересчетОстаткаГСМ("ОстатокПриВыезде", ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		
		Сообщить("Предыдущий путевой лист №" + ПредПЛ_номер + " от " + Формат(ПредПЛ_дата, "ДФ=dd.MM.yyyy") + " не рассчитан.
			|Остаток топлива и показания спидометра (счетчика) при выезде обнулены!");
	КонецЕсли;
КонецПроцедуры
	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

&НаКлиенте
Процедура УстановитьВидимость()
	СтруктураРеквизитов = Новый Структура("ВидПЛ, Водитель2, Сотрудник1, Сотрудник2, Организация",
		Объект.ВидПЛ, Объект.Водитель2, Объект.Сотрудник1, Объект.Сотрудник2, Объект.Организация);
	уатОбщегоНазначенияКлиентСервер.УстановитьВидимостьПутевойЛист(ЭтаФорма, СтруктураРеквизитов);
	
	Элементы.ЗаправкиГСМСоглашение.Видимость = ИспользоватьСоглашенияСПоставщиками;
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьВыработки()
	Элементы.ГруппаЗадание.Видимость = ПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ПоказыватьЗаданиеПЛ"));
	
	УчетВыработкиПоКонтрагентам = ПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоКонтрагентам"));
	УчетВыработкиПоПодразделениям = ПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоПодразделениям"));
	УчетВыработкиПоОбъектамСтроительства = ПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоОбъектамСтроительства"));
	УчетВыработкиПоМаршрутам = ПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоМаршрутам"));
	УчетВыработкиПоВидамПеревозок = ПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоВидамПеревозок"));
		
	Элементы.ВыработкаТСКонтрагент.Видимость = УчетВыработкиПоКонтрагентам;
	Элементы.ВыработкаТСПодразделение.Видимость = УчетВыработкиПоПодразделениям;
	Элементы.ВыработкаТСОбъектСтроительства.Видимость = УчетВыработкиПоОбъектамСтроительства;
	Элементы.ВыработкаТССценарийПланирования.Видимость = УчетВыработкиПоОбъектамСтроительства;
	Элементы.ВыработкаТССтроительнаяРабота.Видимость = УчетВыработкиПоОбъектамСтроительства;
	Элементы.ВыработкаТСМаршрут.Видимость = УчетВыработкиПоМаршрутам;
	Элементы.ВыработкаТСВидПеревозки.Видимость = УчетВыработкиПоВидамПеревозок;
	Элементы.ВыработкаСотрудниковКонтрагент.Видимость = УчетВыработкиПоКонтрагентам;
	Элементы.ВыработкаСотрудниковПодразделение.Видимость = УчетВыработкиПоПодразделениям;
	Элементы.ВыработкаСотрудниковОбъектСтроительства.Видимость = УчетВыработкиПоОбъектамСтроительства;
	Элементы.ВыработкаСотрудниковСценарийПланирования.Видимость = УчетВыработкиПоОбъектамСтроительства;
	Элементы.ВыработкаСотрудниковСтроительнаяРабота.Видимость = УчетВыработкиПоОбъектамСтроительства;
	Элементы.ВыработкаСотрудниковМаршрут.Видимость = УчетВыработкиПоМаршрутам;
	Элементы.ВыработкаСотрудниковВидПеревозки.Видимость = УчетВыработкиПоВидамПеревозок;
	//Элементы.Контрагент.Видимость = УчетВыработкиПоКонтрагентам;
	//Элементы.Подразделение.Видимость = УчетВыработкиПоПодразделениям;
	
	Элементы.РасходГСМРасходПоНорме.Доступность = Истина;
	//уатПраваИНастройки.уатПраво("РедактированиеНормативногоРасходаГСМ");
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматированиеТочностиОстатковГСМ()
	ТочностьОстТоплива = ПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ТочностьОстатковТоплива"));
	ТекФормат = "ЧЦ=" + (10-3+ТочностьОстТоплива) + "; ЧДЦ=" + ТочностьОстТоплива;
	Элементы.ОстатокТопливаВозврат.Формат = ТекФормат;
	Элементы.ОстатокТопливаВозврат.ФорматРедактирования = ТекФормат;
	Элементы.ОстатокТопливаВыезд.Формат = ТекФормат;
	Элементы.ОстатокТопливаВыезд.ФорматРедактирования = ТекФормат;
	Элементы.РасходГСМОстатокПриВыезде.Формат = ТекФормат;
	Элементы.РасходГСМОстатокПриВыезде.ФорматРедактирования = ТекФормат;
	Элементы.РасходГСМОстатокПриВозвращении.Формат = ТекФормат;
	Элементы.РасходГСМОстатокПриВозвращении.ФорматРедактирования = ТекФормат;
	Элементы.РасходГСМРасходПоНорме.Формат = ТекФормат;
	Элементы.РасходГСМРасходПоНорме.ФорматРедактирования = ТекФормат;
	Элементы.РасходГСМРасходПоФакту.Формат = ТекФормат;
	Элементы.РасходГСМРасходПоФакту.ФорматРедактирования = ТекФормат;
	Элементы.РасходГСМЭкономия.Формат = ТекФормат;
	Элементы.РасходГСМЭкономия.ФорматРедактирования = ТекФормат;
КонецПроцедуры

// Выполняет обновление таблицы ФОВ при изменении водителей
//Удаляет лишние строки
//
&НаКлиенте
Процедура ОбновитьФОВПриИзмененииВодителя()
	мсвСотрудники = Новый Массив;
	Если ЗначениеЗаполнено(Объект.Водитель1) Тогда
		мсвСотрудники.Добавить(Объект.Водитель1);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Водитель2) Тогда
		мсвСотрудники.Добавить(Объект.Водитель2);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Сотрудник1) Тогда
		мсвСотрудники.Добавить(Объект.Сотрудник1);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Сотрудник2) Тогда
		мсвСотрудники.Добавить(Объект.Сотрудник2);
	КонецЕсли;
	
	мсвСтрокУдаления = Новый Массив;
	Для Каждого ТекСтрока Из Объект.ФактическиОтработанноеВремя Цикл
		Если мсвСотрудники.Найти(ТекСтрока.Сотрудник) = Неопределено Тогда
			мсвСтрокУдаления.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекСтрока Из мсвСтрокУдаления Цикл
		Объект.ФактическиОтработанноеВремя.Удалить(ТекСтрока);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписьРассчитан()
	Элементы.ДекорацияРассчитан.ЦветТекста = ЦветСтатуса(Объект.Рассчитан);
	Элементы.ДекорацияРассчитан.Заголовок = ?(Объект.Рассчитан, "РАССЧИТАН", "НЕ РАССЧИТАН");
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписьРассчитанСервер()
	Элементы.ДекорацияРассчитан.ЦветТекста = ЦветСтатуса(Объект.Рассчитан);
	Элементы.ДекорацияРассчитан.Заголовок = ?(Объект.Рассчитан, "РАССЧИТАН", "НЕ РАССЧИТАН");
КонецПроцедуры

Функция ЦветСтатуса(ДокументРассчитан)
	Если ДокументРассчитан Тогда
		Возврат Новый Цвет(0, 128, 0);
	Иначе
		Возврат Новый Цвет(178, 34, 34);
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ОбновитьНадписьПробег()
	Если ЗначениеЗаполнено(Объект.СпидометрВозвращения) Тогда
		мПробегПоОдометру = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(Объект.СпидометрВыезда, Объект.СпидометрВозвращения);
	Иначе
		мПробегПоОдометру = 0;
	КонецЕсли;
	
	мРазница = мПробегПоОдометру - Объект.ПробегПоGPS;
	
	Если НЕ ЗначениеЗаполнено(Объект.ТранспортноеСредство) ИЛИ ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(Объект.ТранспортноеСредство, "уатМодель"), "НаличиеСпидометра") Тогда
		НадписьПробег = "Пробег по одометру: " + мПробегПоОдометру + " км, по GPS " + Объект.ПробегПоGPS + " км, разница " + мРазница + " км.";
	Иначе
		НадписьПробег = "Наработка по счетчику м/ч: " + мПробегПоОдометру + " ч, по GPS " + Объект.ПробегПоGPS + " ч, разница " + мРазница + " ч.";
	КонецЕсли;
	
	Если мРазница <> 0 Тогда
		Элементы.НадписьПробег.ЦветТекста = Новый Цвет(255,0,0);
	Иначе
		Элементы.НадписьПробег.ЦветТекста = Новый Цвет(83, 106, 194);
	КонецЕсли;
	
	Для Каждого СтрокаПрицепа Из Объект.Прицепы Цикл 
		Если ЗначениеЗаполнено(СтрокаПрицепа.СчетчикМЧВозвращения) Тогда
			пПробегПоОдометру = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(СтрокаПрицепа.СчетчикМЧВыезда, СтрокаПрицепа.СчетчикМЧВозвращения);
		Иначе
			пПробегПоОдометру = 0;
		КонецЕсли;
		
		пРазница = пПробегПоОдометру - СтрокаПрицепа.СчетчикМЧGPS;
		
		Если Не ЗначениеЗаполнено(СтрокаПрицепа.ТС) Или ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(СтрокаПрицепа.ТС, "уатМодель"), "НаличиеСпидометра") Тогда
			СтрокаПрицепа.НадписьПробег = "Пробег по одометру: " + пПробегПоОдометру + " км, по GPS " + СтрокаПрицепа.СчетчикМЧGPS + " км, разница " + пРазница + " км.";
		Иначе
			СтрокаПрицепа.НадписьПробег = "Наработка по счетчику м/ч: " + пПробегПоОдометру + " ч, по GPS " + СтрокаПрицепа.СчетчикМЧGPS + " ч, разница " + пРазница + " ч.";
		КонецЕсли;
		
		СтрокаПрицепа.СчетчикСовпадает = ?(пРазница = 0, Истина, Ложь);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписьПробегСервер()
	Если ЗначениеЗаполнено(Объект.СпидометрВозвращения) Тогда
		мПробегПоОдометру = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(Объект.СпидометрВыезда, Объект.СпидометрВозвращения);
	Иначе
		мПробегПоОдометру = 0;
	КонецЕсли;
	
	мРазница = мПробегПоОдометру - Объект.ПробегПоGPS;
	
	Если НЕ ЗначениеЗаполнено(Объект.ТранспортноеСредство) ИЛИ Объект.ТранспортноеСредство.уатМодель.НаличиеСпидометра Тогда
		НадписьПробег = "Пробег по одометру: " + мПробегПоОдометру + " км, по GPS " + Объект.ПробегПоGPS + " км, разница " + мРазница + " км.";
	Иначе
		НадписьПробег = "Наработка по счетчику м/ч: " + мПробегПоОдометру + " ч, по GPS " + Объект.ПробегПоGPS + " ч, разница " + мРазница + " ч.";
	КонецЕсли;
	
	Если мРазница <> 0 Тогда
		Элементы.НадписьПробег.ЦветТекста = Новый Цвет(255,0,0);
	Иначе
		Элементы.НадписьПробег.ЦветТекста = Новый Цвет(83, 106, 194);
	КонецЕсли;
	
	Для Каждого СтрокаПрицепа Из Объект.Прицепы Цикл 
		Если ЗначениеЗаполнено(СтрокаПрицепа.СчетчикМЧВозвращения) Тогда
			пПробегПоОдометру = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(СтрокаПрицепа.СчетчикМЧВыезда, СтрокаПрицепа.СчетчикМЧВозвращения);
		Иначе
			пПробегПоОдометру = 0;
		КонецЕсли;
		
		пРазница = пПробегПоОдометру - СтрокаПрицепа.СчетчикМЧGPS;
		
		Если Не ЗначениеЗаполнено(СтрокаПрицепа.ТС) Или ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(СтрокаПрицепа.ТС, "уатМодель"), "НаличиеСпидометра") Тогда
			СтрокаПрицепа.НадписьПробег = "Пробег по одометру: " + пПробегПоОдометру + " км, по GPS " + СтрокаПрицепа.СчетчикМЧGPS + " км, разница " + пРазница + " км.";
		Иначе
			СтрокаПрицепа.НадписьПробег = "Наработка по счетчику м/ч: " + пПробегПоОдометру + " ч, по GPS " + СтрокаПрицепа.СчетчикМЧGPS + " ч, разница " + пРазница + " ч.";
		КонецЕсли;
		
		СтрокаПрицепа.СчетчикСовпадает = ?(мРазница = 0, Истина, Ложь);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьФлагПросроченныхДокументовТС()
	Элементы.ДекорацияТСПредупреждение.Видимость = ЗначениеЗаполнено(Объект.ТранспортноеСредство) И
		ПросроченныеДокументыТС(Объект.Дата,
			ПолучитьПраваИНастройкиПользователя(Объект.Организация, "ДниДоОкончанияДействияДокументовТС"),
			Объект.ТранспортноеСредство) = Истина;
КонецПроцедуры

&НаСервере
Процедура ОбновитьФлагПросроченныхДокументовВодителей(НомерЧленаЭкипажа = 0)
	Если НомерЧленаЭкипажа = 0 Тогда
		ОбновитьФлагПросроченныхДокументовВодителей(1);
		ОбновитьФлагПросроченныхДокументовВодителей(2);
		ОбновитьФлагПросроченныхДокументовВодителей(3);
		ОбновитьФлагПросроченныхДокументовВодителей(4);
		Возврат;
	КонецЕсли;
	
	мДниДоОкончанияДействияДокументовВодителей = ПолучитьПраваИНастройкиПользователя(Объект.Организация, "ДниДоОкончанияДействияДокументовВодителей");
	
	Если НомерЧленаЭкипажа = 1 Тогда
		Элементы.ДекорацияВодитель1Предупреждение.Видимость = ЗначениеЗаполнено(Объект.Водитель1)
			И ПросроченныеДокументыВодителя(Объект.Дата, мДниДоОкончанияДействияДокументовВодителей,
				Объект.Водитель1) = Истина;
		Элементы.ДекорацияВодитель1ПредупреждениеПустая.Видимость = НЕ Элементы.ДекорацияВодитель1Предупреждение.Видимость;
		
	ИначеЕсли НомерЧленаЭкипажа = 2 Тогда
		Элементы.ДекорацияВодитель2Предупреждение.Видимость = ЗначениеЗаполнено(Объект.Водитель2)
			И ПросроченныеДокументыВодителя(Объект.Дата, мДниДоОкончанияДействияДокументовВодителей,
				Объект.Водитель2) = Истина;
		Элементы.ДекорацияВодитель2ПредупреждениеПустая.Видимость = НЕ Элементы.ДекорацияВодитель2Предупреждение.Видимость;
		
	ИначеЕсли НомерЧленаЭкипажа = 3 Тогда
		Элементы.ДекорацияСотрудник1Предупреждение.Видимость = ЗначениеЗаполнено(Объект.Сотрудник1)
			И ПросроченныеДокументыВодителя(Объект.Дата, мДниДоОкончанияДействияДокументовВодителей,
				Объект.Сотрудник1) = Истина;
		Элементы.ДекорацияСотрудник1ПредупреждениеПустая.Видимость = НЕ Элементы.ДекорацияСотрудник1Предупреждение.Видимость;
		
	ИначеЕсли НомерЧленаЭкипажа = 4 Тогда
		Элементы.ДекорацияСотрудник2Предупреждение.Видимость = ЗначениеЗаполнено(Объект.Сотрудник2)
			И ПросроченныеДокументыВодителя(Объект.Дата, мДниДоОкончанияДействияДокументовВодителей,
				Объект.Сотрудник2) = Истина;
		Элементы.ДекорацияСотрудник2ПредупреждениеПустая.Видимость = НЕ Элементы.ДекорацияСотрудник2Предупреждение.Видимость;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНомераПрицепов()
	Для Каждого ТекСтрока Из Объект.Прицепы Цикл
		ТекСтрока.НомерТС = ПредставлениеТС(ТекСтрока.ТС, Объект.Организация);
	КонецЦикла;
	Для Каждого ТекСтрока Из Объект.Задание Цикл
		Если ЗначениеЗаполнено(ТекСтрока.Прицеп1) Тогда
			ТекСтрока.НомерПрицепа1 = ПредставлениеТС(ТекСтрока.Прицеп1, Объект.Организация);
		Иначе
			ТекСтрока.НомерПрицепа1 = "";
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрока.Прицеп2) Тогда
			ТекСтрока.НомерПрицепа2 = ПредставлениеТС(ТекСтрока.Прицеп2, Объект.Организация);
		Иначе
			ТекСтрока.НомерПрицепа2 = "";
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьНомераПрицеповСервер()
	Для Каждого ТекСтрока Из Объект.Прицепы Цикл
		ТекСтрока.НомерТС = ПредставлениеТСсервер(ТекСтрока.ТС, Объект.Организация);
	КонецЦикла;
	Для Каждого ТекСтрока Из Объект.Задание Цикл
		ТекСтрока.НомерПрицепа1 = ПредставлениеТСсервер(ТекСтрока.Прицеп1, Объект.Организация);
		ТекСтрока.НомерПрицепа2 = ПредставлениеТСсервер(ТекСтрока.Прицеп2, Объект.Организация);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНомераТСвТаблицах()
	Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
		ТекСтрока.НомерТС = ПредставлениеТС(ТекСтрока.ТС, Объект.Организация);
	КонецЦикла;
	ОбновитьНомераТС_ЗаправкиГСМ();
	Для Каждого ТекСтрока Из Объект.РасходТехническихЖидкостей Цикл
		ТекСтрока.НомерТС = ПредставлениеТС(ТекСтрока.ТС, Объект.Организация);
	КонецЦикла;
	Для Каждого ТекСтрока Из Объект.ВыработкаТС Цикл
		ТекСтрока.НомерТС = ПредставлениеТС(ТекСтрока.ТС, Объект.Организация);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьНомераТСвТаблицахСервер()
	Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
		ТекСтрока.НомерТС = ПредставлениеТСсервер(ТекСтрока.ТС, Объект.Организация);
	КонецЦикла;
	Для Каждого ТекСтрока Из ЗаправкиГСМ Цикл
		ТекСтрока.НомерТС = ПредставлениеТСсервер(ТекСтрока.ТС, Объект.Организация);
	КонецЦикла;
	Для Каждого ТекСтрока Из СливыГСМ Цикл
		ТекСтрока.НомерТС = ПредставлениеТСсервер(ТекСтрока.ТС, Объект.Организация);
	КонецЦикла;
	Для Каждого ТекСтрока Из Объект.РасходТехническихЖидкостей Цикл
		ТекСтрока.НомерТС = ПредставлениеТСсервер(ТекСтрока.ТС, Объект.Организация);
	КонецЦикла;
	Для Каждого ТекСтрока Из Объект.ВыработкаТС Цикл
		ТекСтрока.НомерТС = ПредставлениеТСсервер(ТекСтрока.ТС, Объект.Организация);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНомераТС_ЗаправкиГСМ()
	Для Каждого ТекСтрока Из ЗаправкиГСМ Цикл
		ТекСтрока.НомерТС = ПредставлениеТС(ТекСтрока.ТС, Объект.Организация);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНомераТС_СливыГСМ()
	Для Каждого ТекСтрока Из СливыГСМ Цикл
		ТекСтрока.НомерТС = ПредставлениеТС(ТекСтрока.ТС, Объект.Организация);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФлагЭтоТЖ_РасходГСМ()
	Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
		ТекСтрока.ЭтоТЖ = уатГСМ.ЭтоТехническаяЖидкость(ТекСтрока.ГСМ);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьФлагЭтоТЖ_РасходГСМСервер()
	Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
		ТекСтрока.ЭтоТЖ = уатГСМ.ЭтоТехническаяЖидкость(ТекСтрока.ГСМ);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВремяФОВ()
	Для Каждого ТекСтрокаТЧ Из Объект.ФактическиОтработанноеВремя Цикл
		ТекСтрокаТЧ.ВремяДневноеФормат = ВремяВЧЧ_ММ(ТекСтрокаТЧ.ВремяДневное);
		ТекСтрокаТЧ.ВремяНочноеФормат = ВремяВЧЧ_ММ(ТекСтрокаТЧ.ВремяНочное);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписьСпецРабот()
	
	Для Каждого ТекСтрока Из Объект.Задание Цикл 
		ТекСтрока.НадписьСпецРаботы = "";
		Если ЗначениеЗаполнено(ТекСтрока.СпецРабота1) И ЗначениеЗаполнено(ТекСтрока.КоличествоСпецРаботы1) Тогда 
			ТекСтрока.НадписьСпецРаботы = 
				ТекСтрока.НадписьСпецРаботы 
				+ ?(ТекСтрока.НадписьСпецРаботы = "", "", " / ") 
				+ Строка(?(ТекСтрока.СпецРабота1.Временный, Формат(уатОбщегоНазначения.уатВремяВЧЧ_ММ(ТекСтрока.КоличествоСпецРаботы1), "ЧДЦ=2; ЧРД=:; ЧГ="), ТекСтрока.КоличествоСпецРаботы1));
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрока.СпецРабота2) И ЗначениеЗаполнено(ТекСтрока.КоличествоСпецРаботы2) Тогда 
			ТекСтрока.НадписьСпецРаботы = 
				ТекСтрока.НадписьСпецРаботы 
				+ ?(ТекСтрока.НадписьСпецРаботы = "", "", " / ") 
				+ Строка(?(ТекСтрока.СпецРабота2.Временный, Формат(уатОбщегоНазначения.уатВремяВЧЧ_ММ(ТекСтрока.КоличествоСпецРаботы2), "ЧДЦ=2; ЧРД=:; ЧГ="), ТекСтрока.КоличествоСпецРаботы2));
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрока.СпецРабота3) И ЗначениеЗаполнено(ТекСтрока.КоличествоСпецРаботы3) Тогда 
			ТекСтрока.НадписьСпецРаботы = 
				ТекСтрока.НадписьСпецРаботы 
				+ ?(ТекСтрока.НадписьСпецРаботы = "", "", " / ") 
				+ Строка(?(ТекСтрока.СпецРабота3.Временный, Формат(уатОбщегоНазначения.уатВремяВЧЧ_ММ(ТекСтрока.КоличествоСпецРаботы3), "ЧДЦ=2; ЧРД=:; ЧГ="), ТекСтрока.КоличествоСпецРаботы3));
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрока.СпецРабота4) И ЗначениеЗаполнено(ТекСтрока.КоличествоСпецРаботы4) Тогда 
			ТекСтрока.НадписьСпецРаботы = 
				ТекСтрока.НадписьСпецРаботы 
				+ ?(ТекСтрока.НадписьСпецРаботы = "", "", " / ") 
				+ Строка(?(ТекСтрока.СпецРабота4.Временный, Формат(уатОбщегоНазначения.уатВремяВЧЧ_ММ(ТекСтрока.КоличествоСпецРаботы4), "ЧДЦ=2; ЧРД=:; ЧГ="), ТекСтрока.КоличествоСпецРаботы4));
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрока.СпецРабота5) И ЗначениеЗаполнено(ТекСтрока.КоличествоСпецРаботы5) Тогда 
			ТекСтрока.НадписьСпецРаботы = 
				ТекСтрока.НадписьСпецРаботы 
				+ ?(ТекСтрока.НадписьСпецРаботы = "", "", " / ") 
				+ Строка(?(ТекСтрока.СпецРабота5.Временный, Формат(уатОбщегоНазначения.уатВремяВЧЧ_ММ(ТекСтрока.КоличествоСпецРаботы5), "ЧДЦ=2; ЧРД=:; ЧГ="), ТекСтрока.КоличествоСпецРаботы5));
		КонецЕсли;
		Если ТекСтрока.НадписьСпецРаботы = "" Тогда 
			ТекСтрока.НадписьСпецРаботы = "Редактировать";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьРасстояниеВремяМеждуПунктами(ТекСтрокаЗадание)
	
	Если ТипЗнч(ТекСтрокаЗадание.АдресПрибытия) = Тип("СправочникСсылка.уатПунктыНазначения")
		И ТипЗнч(ТекСтрокаЗадание.АдресУбытия) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		
		мсвПункты = Новый Массив();
		мсвПункты.Добавить(Новый Структура("Пункт1, Пункт2", 
		ТекСтрокаЗадание.АдресПрибытия, 
		ТекСтрокаЗадание.АдресУбытия));
		уатЗащищенныеФункцииСервер.РассчитатьТаблицуРасстояниеВремяМеждуПунктами(мсвПункты);
		ТекСтрокаЗадание.КоличествоКмГруз = мсвПункты[0].Расстояние;
		ТекСтрокаЗадание.КоличествоЧасов  = мсвПункты[0].Время;
	Иначе
		ТекСтрокаЗадание.КоличествоКмГруз = 0;
		ТекСтрокаЗадание.КоличествоЧасов  = 0;
	КонецЕсли;

	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУровеньТопливаПоGPS(РезультатСтруктура)
	
	Если РезультатСтруктура.Свойство("УровеньТопливаВыезд") Тогда
		ОстатокТопливаВыезд = РезультатСтруктура.УровеньТопливаВыезд;
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("ТС",  Объект.ТранспортноеСредство);
		СтруктураОтбора.Вставить("ГСМ", Объект.ТранспортноеСредство.уатМодель.ОсновноеТопливо);
		
		Для Каждого ТекНайдСтрока Из Объект.РасходГСМ.НайтиСтроки(СтруктураОтбора) Цикл 
			ТекНайдСтрока.ОстатокПриВыезде = РезультатСтруктура.УровеньТопливаВыезд;
		КонецЦикла;
	КонецЕсли;
	
	Если РезультатСтруктура.Свойство("УровеньТопливаВозврат") Тогда
		ОстатокТопливаВозврат = РезультатСтруктура.УровеньТопливаВозврат;
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("ТС",  Объект.ТранспортноеСредство);
		СтруктураОтбора.Вставить("ГСМ", Объект.ТранспортноеСредство.уатМодель.ОсновноеТопливо);
		
		Для Каждого ТекНайдСтрока Из Объект.РасходГСМ.НайтиСтроки(СтруктураОтбора) Цикл 
			ТекНайдСтрока.ОстатокПриВозвращении = РезультатСтруктура.УровеньТопливаВозврат;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВидПеревозки(мОрганизация, мТранспортноеСредство)
	
	Если ЗначениеЗаполнено(мТранспортноеСредство)
		И ЗначениеЗаполнено(мТранспортноеСредство.уатОсновнойВидПеревозки) Тогда
		ВидПеревозки = мТранспортноеСредство.уатОсновнойВидПеревозки;
	Иначе
		ВидПеревозки = ПолучитьПраваИНастройкиПользователя(мОрганизация, "ОсновнойВидПеревозок");
	КонецЕсли;
	Возврат ВидПеревозки;
	
КонецФункции

&НаСервере
Процедура ОбработкаЗаполненияТЧЗаданиеПоЗаказуНаТС(Результат)
	
	Если НЕ ТипЗнч(Результат) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.АдресНазначения) Или ЗначениеЗаполнено(Результат.АдресОтправления) Тогда 
		Если Результат.Товары.Количество() > 0 Тогда
			НоваяСтрока = Объект.Задание.Добавить();                                                       
			НоваяСтрока.Контрагент = Результат.Контрагент;
			
			НоваяСтрока.АдресПрибытия = Результат.АдресОтправления;
			НоваяСтрока.ВремяПрибытия = Объект.ДатаВыезда;
			
			НоваяСтрока.АдресУбытия = Результат.АдресНазначения;
			НоваяСтрока.ВремяУбытия = Объект.ДатаВозвращения;
			
			НоваяСтрока.Номенклатура   = Результат.Товары[0].Номенклатура;
			НоваяСтрока.КоличествоТонн = Результат.Товары.Итог("ВесБрутто") / 1000;
			НоваяСтрока.Объем		   = Результат.Товары.Итог("Объем");
			
			НоваяСтрока.КоличествоЕздок = 1;
			Если ЗначениеЗаполнено(НоваяСтрока.АдресУбытия) 
				И ЗначениеЗаполнено(НоваяСтрока.АдресПрибытия) Тогда
				мсвПункты = Новый Массив();
				мсвПункты.Добавить(Новый Структура("Пункт1, Пункт2", 
				НоваяСтрока.АдресПрибытия, 
				НоваяСтрока.АдресУбытия));
				уатЗащищенныеФункцииСервер.РассчитатьТаблицуРасстояниеВремяМеждуПунктами(мсвПункты);
				НоваяСтрока.КоличествоКмГруз = мсвПункты[0].Расстояние;
				НоваяСтрока.КоличествоЧасов  = мсвПункты[0].Время;
			КонецЕсли;
			
			НоваяСтрока.ВидПеревозки = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Результат.Организация, "ОсновнойВидПеревозок");
			
			Если ТипЗнч(Результат.Контрагент) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
				НоваяСтрока.Подразделение = Результат.Контрагент;
			КонецЕсли;
			
		ИначеЕсли Результат.Услуги.Количество() > 0 Тогда
			НоваяСтрока = Объект.Задание.Добавить();                                                       
			НоваяСтрока.Контрагент = Результат.Контрагент;
			
			НоваяСтрока.АдресПрибытия = Результат.АдресОтправления;
			НоваяСтрока.ВремяПрибытия = Объект.ДатаВыезда;
			
			НоваяСтрока.АдресУбытия = Результат.АдресНазначения;
			НоваяСтрока.ВремяУбытия = Объект.ДатаВозвращения;
			
			НоваяСтрока.КоличествоЕздок = 1;
			Если ЗначениеЗаполнено(НоваяСтрока.АдресУбытия) 
				И ЗначениеЗаполнено(НоваяСтрока.АдресПрибытия) Тогда
				мсвПункты = Новый Массив();
				мсвПункты.Добавить(Новый Структура("Пункт1, Пункт2", 
				НоваяСтрока.АдресПрибытия, 
				НоваяСтрока.АдресУбытия));
				уатЗащищенныеФункцииСервер.РассчитатьТаблицуРасстояниеВремяМеждуПунктами(мсвПункты);
				НоваяСтрока.КоличествоКмГруз = мсвПункты[0].Расстояние;
				НоваяСтрока.КоличествоЧасов  = мсвПункты[0].Время;
			КонецЕсли;
			
			НоваяСтрока.ВидПеревозки = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Результат.Организация, "ОсновнойВидПеревозок");
			
			Если ТипЗнч(Результат.Контрагент) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
				НоваяСтрока.Подразделение = Результат.Контрагент;
			КонецЕсли;
			
		КонецЕсли;
		
		ИспользованиеСтроитРабот = уатИнтерфейсВзаимодействияСERPВызовСервера.уатЗначениеФункциональнойОпции("уатОбъединеннаяКонфигурацияСУСО");
		Если ИспользованиеСтроитРабот И Результат.РаботаТехникиНаОбъектеСтроительства Тогда
			НоваяСтрока.ОбъектСтроительства = Результат.ОбъектСтроительства;
			НоваяСтрока.СценарийПланирования = Результат.СценарийПланированияСтроительства;
			НоваяСтрока.СтроительнаяРабота = Результат.СтроительнаяРабота;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТСПрисутствуетВПутевомЛисте(Знач ТекТС, Знач ТекПутевойЛист)
	
	Если ТекПутевойЛист.ТранспортноеСредство = ТекТС Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ТекПутевойЛист.Прицепы Цикл 
		Если ТекСтрока.ТС = ТекТС Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ТекПутевойЛист.Задание Цикл 
		Если ТекСтрока.Прицеп1 = ТекТС Тогда 
			Возврат Истина;
		КонецЕсли;
		Если ТекСтрока.Прицеп2 = ТекТС Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции // ТСПрисутствуетВПутевомЛисте()

&НаСервереБезКонтекста
Функция ПолучитьПутевыеЛистыПоТС(Знач ТС, Знач ДатаСлива, Знач ТекстПодбора="")
	
	ПутевыеЛистыПоТС = Новый СписокЗначений();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТС",               ТС);
	Запрос.УстановитьПараметр("НачалоПериода",    ДобавитьМесяц(ДатаСлива, -1));
	Запрос.УстановитьПараметр("ОкончаниеПериода", ДобавитьМесяц(ДатаСлива, 1));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПутевойЛист.Ссылка КАК Ссылка,
	|	уатПутевойЛист.Номер КАК Номер,
	|	уатПутевойЛист.Дата КАК Дата
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|ГДЕ
	|	НЕ уатПутевойЛист.ПометкаУдаления
	|	И НЕ уатПутевойЛист.Рассчитан
	|	И уатПутевойЛист.ДатаВыезда >= &НачалоПериода
	|	И уатПутевойЛист.ДатаВыезда <= &ОкончаниеПериода
	|	И уатПутевойЛист.ДатаВозвращения >= &НачалоПериода
	|	И уатПутевойЛист.ДатаВозвращения <= &ОкончаниеПериода";
	
	Если ЗначениеЗаполнено(ТС) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И (уатПутевойЛист.ТранспортноеСредство = &ТС
		|	ИЛИ уатПутевойЛист.Прицепы.ТС.уатМодель.НаличиеТопливногоБака И уатПутевойЛист.Прицепы.ТС = &ТС
		|	ИЛИ уатПутевойЛист.Задание.Прицеп1.уатМодель.НаличиеТопливногоБака И уатПутевойЛист.Задание.Прицеп1 = &ТС
		|	ИЛИ уатПутевойЛист.Задание.Прицеп2.уатМодель.НаличиеТопливногоБака И уатПутевойЛист.Задание.Прицеп2 = &ТС)";
	КонецЕсли;
	
	Запрос.Текст = СокрЛП(Запрос.Текст) + "
	|УПОРЯДОЧИТЬ ПО
	|	уатПутевойЛист.ДатаВыезда";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		ПредставлениеДокумента = Выборка.Номер + " (" + Выборка.Дата + ")";
		Если ТекстПодбора = "" Тогда 
			ПутевыеЛистыПоТС.Добавить(Выборка.Ссылка, ПредставлениеДокумента);
		Иначе 
			стрДлинаПодбор = СтрДлина(ТекстПодбора);
			Если Не НРег(Лев(ПредставлениеДокумента, стрДлинаПодбор)) = НРег(ТекстПодбора) Тогда 
				Продолжить;
			КонецЕсли;
			
			тПредставление = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(Лев(ПредставлениеДокумента, стрДлинаПодбор),, ЦветаСтиля.уатЦветТекстаПриАвтоподборе), 
				Новый ФорматированнаяСтрока(Прав(ПредставлениеДокумента, СтрДлина(ПредставлениеДокумента)-стрДлинаПодбор)));
			ПутевыеЛистыПоТС.Добавить(Выборка.Ссылка, тПредставление);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПутевыеЛистыПоТС;
	
КонецФункции // ПолучитьПутевыеЛистыПоТС()

&НаСервере
Процедура СгруппироватьКомандыПечатиПЛ()
	
	ЭлементыДляОбработки = Новый Массив();
	Для Каждого ТекЭлемент Из Элементы.ПодменюПечатьОбычное.ПодчиненныеЭлементы Цикл 
		ЭлементыДляОбработки.Добавить(ТекЭлемент);
	КонецЦикла;
	
	ГруппаВыезд = Элементы.Добавить("ПодменюПечатьОбычноеГруппаВыезд", Тип("ГруппаФормы"), Элементы.ПодменюПечатьОбычное);
	ГруппаВыезд.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	ГруппаВозврат = Элементы.Добавить("ПодменюПечатьОбычноеГруппаВозврат", Тип("ГруппаФормы"), Элементы.ПодменюПечатьОбычное);
	ГруппаВозврат.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	ГруппаОбщая = Элементы.Добавить("ПодменюПечатьОбычноеГруппаОбщая", Тип("ГруппаФормы"), Элементы.ПодменюПечатьОбычное);
	ГруппаОбщая.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	Для Каждого ТекЭлемент Из ЭлементыДляОбработки Цикл 
		Если ТекЭлемент.Имя = "ПодменюПечатьОбычное_ПечататьЛицСторону" 
				Или ТекЭлемент.Имя = "ПодменюПечатьОбычное_ПечататьОбрСторону"
				Или ТекЭлемент.Имя = "ПодменюПечатьОбычное_ПечатьВесьДокумент" Тогда 
			Элементы.Переместить(ТекЭлемент, ГруппаВыезд);
			
		ИначеЕсли ТекЭлемент.Имя = "ПодменюПечатьОбычное_ПечататьЛицСторонуПолная" 
				Или ТекЭлемент.Имя = "ПодменюПечатьОбычное_ПечататьОбрСторонуПолная"
				Или ТекЭлемент.Имя = "ПодменюПечатьОбычное_ПечатьВесьДокументПолная" Тогда
			Элементы.Переместить(ТекЭлемент, ГруппаВозврат);
			
		Иначе 
			Элементы.Переместить(ТекЭлемент, ГруппаОбщая);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
