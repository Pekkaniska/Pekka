#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
///////////////////////////////////////////////////////////////////////
#Область ОбработчикиСобытий
	
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("Операция") Тогда
			Операция = ДанныеЗаполнения.Операция;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("Доставка") Тогда
			Доставка = ДанныеЗаполнения.Доставка;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("ЗаданиеНаПеревозку") Тогда
			ЗаданиеНаПеревозку = ДанныеЗаполнения.ЗаданиеНаПеревозку;
//Рарус Владимир Подрезов 27.09.2017
			Если ЗначениеЗаполнено(ЗаданиеНаПеревозку) Тогда
				Подразделение = ЗаданиеНаПеревозку.Подразделение;
			КонецЕсли;
//Рарус Владимир Подрезов Конец
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Подразделение) Тогда
		Если ЗначениеЗаполнено(ЗаданиеНаПеревозку) Тогда
			Подразделение = ЗаданиеНаПеревозку.Подразделение;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Подразделение) Тогда
		Если ЗначениеЗаполнено(Доставка) Тогда
			Подразделение = Доставка.Подразделение;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Подразделение) Тогда
		Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Пользователи.ТекущийПользователь());
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ответственный) Тогда
		Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Автор) Тогда
		Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Дата = ТекущаяДата();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	Документы.пкПогрузкаВыгрузкаПоДоставке.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	Документы.пкПогрузкаВыгрузкаПоДоставке.ОтразитьСостояниеТехники(ДополнительныеСвойства, Движения, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	РегистрыСведений.пкРезервТехники.СформироватьЗаписи(Отказ, РежимПроведения, ЭтотОбъект);
	РегистрыСведений.пкСтатусыТехники.СформироватьЗаписи(Отказ, РежимПроведения, ЭтотОбъект);
	РегистрыСведений.пкСтатусыРемонтаТехники.СформироватьЗаписи(Отказ, РежимПроведения, ЭтотОбъект);
    РегистрыСведений.пкСрокиАренды.СформироватьЗаписи(ЭтотОбъект, Отказ, РежимПроведения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ПроверяемыеРеквизиты.Добавить("Операция");
	ПроверяемыеРеквизиты.Добавить("Доставка");
	ПроверяемыеРеквизиты.Добавить("ЗаданиеНаПеревозку");
	ПроверяемыеРеквизиты.Добавить("Подразделение");
	//ПроверяемыеРеквизиты.Добавить("Ответственный");
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
//Рарус Владимир Подрезов 10.10.2017 5551
	Если ЗначениеЗаполнено(ЗаданиеНаПеревозку)
		И ЗначениеЗаполнено(ЗаданиеНаПеревозку.Подразделение)
	Тогда
		Подразделение = ЗаданиеНаПеревозку.Подразделение;
	КонецЕсли;
//Рарус Владимир Подрезов Конец
	
//Рарус Владимир Подрезов 10.10.2017 4328
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
	
		текДата = Дата;
		
		//1. проверим удалим дубли
		ЗапросДубли = Новый Запрос;
		ЗапросДубли.Текст = 
		"ВЫБРАТЬ
		|	пкПогрузкаВыгрузкаПоДоставке.Ссылка
		|ИЗ
		|	Документ.пкПогрузкаВыгрузкаПоДоставке КАК пкПогрузкаВыгрузкаПоДоставке
		|ГДЕ
		|	пкПогрузкаВыгрузкаПоДоставке.Операция = &Операция
		|	И пкПогрузкаВыгрузкаПоДоставке.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозку
		|	И пкПогрузкаВыгрузкаПоДоставке.Доставка = &Доставка
		|	И пкПогрузкаВыгрузкаПоДоставке.Ссылка <> &Ссылка
		|	И пкПогрузкаВыгрузкаПоДоставке.Проведен
		|	И НЕ пкПогрузкаВыгрузкаПоДоставке.ПометкаУдаления";
		ЗапросДубли.УстановитьПараметр("Операция", Операция);
		ЗапросДубли.УстановитьПараметр("ЗаданиеНаПеревозку", ЗаданиеНаПеревозку);
		ЗапросДубли.УстановитьПараметр("Доставка", Доставка);
		ЗапросДубли.УстановитьПараметр("Ссылка", Ссылка);
		
		РезЗапроса = ЗапросДубли.Выполнить().Выбрать();
		Пока РезЗапроса.Следующий() Цикл
			тОбъект = РезЗапроса.Ссылка.ПолучитьОбъект();
			Попытка
				тОбъект.УстановитьПометкуУдаления(Истина);
			Исключение
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось отменить погрузку/выгрузку %1.'"), тОбъект.Ссылка);
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка
					,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				тСообщение = Новый СообщениеПользователю;
				тСообщение.Текст = ОписаниеОшибки();
				тСообщение.Сообщить();
				Отказ = Истина;
				Возврат;
			КонецПопытки;
		КонецЦикла;
		
		//2. Установим правильный порядок по датам/времени: 
		// - Погрузки как минимум на секунду раньше самой ранней выгрузки, 
		// - Выгрузки - как минимум на секунду позже самой поздней погрузки
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			//Если оперативное проведение, то сремя еще не определено, 
			//определим его самостоятельно и проводить будем не оперативно
			Дата = ТекущаяДатаСеанса();
			РежимПроведения = РежимПроведенияДокумента.НеОперативный;
		КонецЕсли;
		
		ЗапросОперации = Новый Запрос;
		ЗапросОперации.Текст = 
		"ВЫБРАТЬ
		|	пкПогрузкаВыгрузкаПоДоставке.Ссылка,
		|	пкПогрузкаВыгрузкаПоДоставке.Дата
		|ИЗ
		|	Документ.пкПогрузкаВыгрузкаПоДоставке КАК пкПогрузкаВыгрузкаПоДоставке
		|ГДЕ
		|	пкПогрузкаВыгрузкаПоДоставке.Операция = &Операция
		|	И пкПогрузкаВыгрузкаПоДоставке.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозку
		|	И пкПогрузкаВыгрузкаПоДоставке.Доставка = &Доставка
		|	И пкПогрузкаВыгрузкаПоДоставке.Ссылка <> &Ссылка
		|	И пкПогрузкаВыгрузкаПоДоставке.Проведен
		|	И НЕ пкПогрузкаВыгрузкаПоДоставке.ПометкаУдаления";
		ЗапросОперации.УстановитьПараметр("Операция", ?(Операция = Перечисления.пкОперацииПогрузкаВыгрузка.Погрузка, Перечисления.пкОперацииПогрузкаВыгрузка.Выгрузка, Перечисления.пкОперацииПогрузкаВыгрузка.Погрузка));
		ЗапросОперации.УстановитьПараметр("ЗаданиеНаПеревозку", ЗаданиеНаПеревозку);
		ЗапросОперации.УстановитьПараметр("Доставка", Доставка);
		ЗапросОперации.УстановитьПараметр("Ссылка", Ссылка);
		
		РезЗапроса = ЗапросОперации.Выполнить().Выбрать();
		Пока РезЗапроса.Следующий() Цикл
			Если Операция = Перечисления.пкОперацииПогрузкаВыгрузка.Погрузка Тогда
				Если Дата >= РезЗапроса.Дата Тогда
					Дата = РезЗапроса.Дата - 1;
				КонецЕсли;
			Иначе
				Если Дата <= РезЗапроса.Дата Тогда
					Дата = РезЗапроса.Дата + 1;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// - Если сменился год, то перенумеруем документ
		Если НачалоГода(текДата) <> НачалоГода(Дата) Тогда
			УстановитьНовыйНомер();
		КонецЕсли;
	КонецЕсли;
//Рарус Владимир Подрезов Конец
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	СформироватьСписокРегистровДляКонтроля();
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
//Рарус Владимир Подрезов 25.08.2017
//	Если Не Отказ И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение И Константы.пкАвтоматическоеСозданиеЗаказНарядовПослеАренды.Получить() Тогда 
	Если Не Отказ И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение 
		И ЗначениеЗаполнено(Подразделение) И Подразделение.пкАвтоматическоеСозданиеЗаказНарядовПослеАренды 
	Тогда
//Рарус Владимир Подрезов Конец
		
		Документы.пкПогрузкаВыгрузкаПоДоставке.СоздатьДокументЗаказНаряд(Ссылка);
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Подразделение	= ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Пользователи.ТекущийПользователь());
	Ответственный	= Пользователи.ТекущийПользователь();
	Автор 			= Пользователи.ТекущийПользователь();
	
КонецПроцедуры

#КонецОбласти
#Область Прочее

Процедура СформироватьСписокРегистровДляКонтроля()
	
	Массив = Новый Массив;
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

#КонецОбласти
#КонецОбласти
#КонецЕсли

