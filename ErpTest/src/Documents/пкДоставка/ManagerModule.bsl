#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область СозданиеНаОсновании

// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании, НастройкиФормы) Экспорт
	
	Документы.пкДоставка.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	Документы.пкОперацииСПультами.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	СозданиеНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСоздатьНаОсновании);
	
КонецПроцедуры

// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт

	 
	Если ПравоДоступа("Добавление", Метаданные.Документы.уатПутевойЛист) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.уатПутевойЛист.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.уатПутевойЛист);
		//КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

#КонецОбласти 
#КонецОбласти 

// Определяет реквизиты выбранного документа
//
// Параметры:
//	ДокументСсылка - Ссылка на документа
//
// Возвращаемое значение:
//	Структура - реквизиты выбранного документа
//
Функция РеквизитыДокумента(ДокументСсылка) Экспорт
	
	СтруктураРеквизитов = Новый Структура();
	
	Возврат СтруктураРеквизитов;

КонецФункции

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		Если ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь() Тогда
			СтандартнаяОбработка = Ложь;
			//ВыбраннаяФорма = "ФормаДокументаСамообслуживание";
		КонецЕсли;
	ИначеЕсли ВидФормы = "ФормаСписка" Тогда
		Если ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь() Тогда
			СтандартнаяОбработка = Ложь;
			//ВыбраннаяФорма = "ФормаСпискаСамообслуживание";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблица_пкМоделиКДоставкеПоЗаявкамНаАрендуТехники(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблица_пкТехникаКПеремещениюМеждуРегионами(Запрос, ТекстыЗапроса, Регистры);
    
	ПроведениеСерверУТ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                           КАК Ссылка,
	|	ДанныеДокумента.Дата                             КАК Дата,
	|	ДанныеДокумента.НачалоРейсаПлан                  КАК НачалоРейсаПлан,
	|	ДанныеДокумента.НачалоРейсаФакт                  КАК НачалоРейсаФакт,
	|	ДанныеДокумента.ОкончаниеРейсаПлан               КАК ОкончаниеРейсаПлан,
	|	ДанныеДокумента.ОкончаниеРейсаФакт               КАК ОкончаниеРейсаФакт,
	|	ДанныеДокумента.Статус                           КАК Статус,
	|	ДанныеДокумента.Подразделение                    КАК Подразделение,
	|	ДанныеДокумента.Автор                            КАК Автор,
	|	ДанныеДокумента.Ответственный                    КАК Ответственный,
	|	ДанныеДокумента.ДоставкуВыполняет                КАК ДоставкуВыполняет,
	|	ДанныеДокумента.ТранспортноеСредство             КАК ТранспортноеСредство,
	|	ДанныеДокумента.Водитель      	                 КАК Водитель,
	|	ДанныеДокумента.ДатаНачалаДействияДовернности    КАК ДатаНачалаДействияДовернности,
	|	ДанныеДокумента.ДатаОкончанияДействияДовернности КАК ДатаОкончанияДействияДовернности,
	|	ДанныеДокумента.СпособДоставки                   КАК СпособДоставки,
	|	ДанныеДокумента.Перевозчик                       КАК Перевозчик
	|ИЗ
	|	Документ.пкДоставка КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Статус",								Реквизиты.Статус);
	Запрос.УстановитьПараметр("Дата",								Реквизиты.Дата);
	Запрос.УстановитьПараметр("НачалоРейсаПлан",					Реквизиты.НачалоРейсаПлан);
	Запрос.УстановитьПараметр("НачалоРейсаФакт",					Реквизиты.НачалоРейсаФакт);
	Запрос.УстановитьПараметр("ОкончаниеРейсаПлан",					Реквизиты.ОкончаниеРейсаПлан);
	Запрос.УстановитьПараметр("ОкончаниеРейсаФакт",					Реквизиты.ОкончаниеРейсаФакт);
	Запрос.УстановитьПараметр("Подразделение",						Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("Автор",								Реквизиты.Автор);
	Запрос.УстановитьПараметр("Ответственный",						Реквизиты.Ответственный);
	Запрос.УстановитьПараметр("ДоставкуВыполняет",					Реквизиты.ДоставкуВыполняет);
	Запрос.УстановитьПараметр("ТранспортноеСредство",				Реквизиты.ТранспортноеСредство);
	Запрос.УстановитьПараметр("Водитель",							Реквизиты.Водитель);
	Запрос.УстановитьПараметр("ДатаНачалаДействияДовернности",		Реквизиты.ДатаНачалаДействияДовернности);
	Запрос.УстановитьПараметр("ДатаОкончанияДействияДовернности",	Реквизиты.ДатаОкончанияДействияДовернности);
	Запрос.УстановитьПараметр("СпособДоставки",						Реквизиты.СпособДоставки);
	Запрос.УстановитьПараметр("Перевозчик",							Реквизиты.Перевозчик);
	
КонецПроцедуры

Функция ТекстЗапросаТаблица_пкМоделиКДоставкеПоЗаявкамНаАрендуТехники(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "пкМоделиКДоставкеПоЗаявкамНаАрендуТехники";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&НачалоРейсаПлан КАК Период,
	|	ТаблицаЗадание.ЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники КАК ЗаявкаНаАрендуТехники,
	|	ТаблицаЗадание.ЗаданиеНаПеревозку.Модель КАК Модель,
	|	ТаблицаЗадание.ЗаданиеНаПеревозку.Техника КАК Техника,
	|	0 КАК КОтгрузке,
	|	0 КАК КВозврату,
	|	1 КАК Выгрузить,
	|	0 КАК Погрузить,
	|	&Ссылка КАК Доставка,
	|	ТаблицаЗадание.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку
	|ИЗ
	|	Документ.пкДоставка.ЗаданияНаПеревозку КАК ТаблицаЗадание
	|ГДЕ
	|	ТаблицаЗадание.Ссылка = &Ссылка
	|	И ТаблицаЗадание.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
	|	И НЕ ТаблицаЗадание.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&НачалоРейсаПлан КАК Период,
	|	ТаблицаЗадание.ЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники КАК ЗаявкаНаАрендуТехники,
	|	ТаблицаЗадание.ЗаданиеНаПеревозку.Модель КАК Модель,
	|	ТаблицаЗадание.ЗаданиеНаПеревозку.Техника КАК Техника,
	|	0 КАК КОтгрузке,
	|	0 КАК КВозврату,
	|	0 КАК Выгрузить,
	|	1 КАК Погрузить,
	|	&Ссылка КАК Доставка,
	|	ТаблицаЗадание.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку
	|ИЗ
	|	Документ.пкДоставка.ЗаданияНаПеревозку КАК ТаблицаЗадание
	|ГДЕ
	|	ТаблицаЗадание.Ссылка = &Ссылка
	|	И ТаблицаЗадание.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
	|	И НЕ ТаблицаЗадание.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&НачалоРейсаПлан КАК Период,
	|	ТаблицаЗадание.ЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники КАК ЗаявкаНаАрендуТехники,
	|	ТаблицаЗадание.ЗаданиеНаПеревозку.Модель КАК Модель,
	|	ТаблицаЗадание.ЗаданиеНаПеревозку.Техника КАК Техника,
	|	0 КАК КОтгрузке,
	|	0 КАК КВозврату,
	|	1 КАК Выгрузить,
	|	0 КАК Погрузить,
	|	&Ссылка КАК Доставка,
	|	ТаблицаЗадание.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку
	|ИЗ
	|	Документ.пкДоставка.ЗаданияНаПеревозку КАК ТаблицаЗадание
	|ГДЕ
	|	ТаблицаЗадание.Ссылка = &Ссылка
	|	И ТаблицаЗадание.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|	И ЕСТЬNULL(ТаблицаЗадание.ЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|	И НЕ ТаблицаЗадание.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&НачалоРейсаПлан КАК Период,
	|	ТаблицаЗадание.ЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники КАК ЗаявкаНаАрендуТехники,
	|	ТаблицаЗадание.ЗаданиеНаПеревозку.Модель КАК Модель,
	|	ТаблицаЗадание.ЗаданиеНаПеревозку.Техника КАК Техника,
	|	0 КАК КОтгрузке,
	|	0 КАК КВозврату,
	|	0 КАК Выгрузить,
	|	1 КАК Погрузить,
	|	&Ссылка КАК Доставка,
	|	ТаблицаЗадание.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку
	|ИЗ
	|	Документ.пкДоставка.ЗаданияНаПеревозку КАК ТаблицаЗадание
	|ГДЕ
	|	ТаблицаЗадание.Ссылка = &Ссылка
	|	И ТаблицаЗадание.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|	И ЕСТЬNULL(ТаблицаЗадание.ЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|	И НЕ ТаблицаЗадание.Отменено
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблица_пкТехникаКПеремещениюМеждуРегионами(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "пкТехникаКПеремещениюМеждуРегионами";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&НачалоРейсаПлан КАК Период,
	|	ТаблицаЗадание.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку,
	|	ТаблицаЗадание.ЗаданиеНаПеревозку.Техника КАК Техника,
	|	&Ссылка КАК Доставка,
	|	1 КАК Выгрузить
	|ИЗ
	|	Документ.пкДоставка.ЗаданияНаПеревозку КАК ТаблицаЗадание
	|ГДЕ
	|	ТаблицаЗадание.Ссылка = &Ссылка
	|	И ТаблицаЗадание.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
	|	И НЕ ТаблицаЗадание.Отменено
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура Отразить_пкМоделиКДоставкеПоЗаявкамНаАрендуТехники(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицапкМоделиКДоставкеПоЗаявкамНаАрендуТехники;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.пкМоделиКДоставкеПоЗаявкамНаАрендуТехники.Записывать = Истина;
	Движения.пкМоделиКДоставкеПоЗаявкамНаАрендуТехники.Загрузить(Таблица);
	
КонецПроцедуры

Процедура Отразить_пкТехникаКПеремещениюМеждуРегионами(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицапкТехникаКПеремещениюМеждуРегионами;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.пкТехникаКПеремещениюМеждуРегионами.Записывать = Истина;
	Движения.пкТехникаКПеремещениюМеждуРегионами.Загрузить(Таблица);
	
КонецПроцедуры

Функция ЕстьИзмененияВТаблице(СтруктураДанных, Ключ)
	Перем ЕстьИзменения;

	Возврат СтруктураДанных.Свойство(Ключ, ЕстьИзменения) И ЕстьИзменения;

КонецФункции

Процедура СообщитьОбОшибкахПроведенияПриДвижениипкМоделиКДоставкеПоЗаявкамНаАрендуТехники(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru = 'По документу %ДокументКонтроля% 
		|нет не выполненной доставки Модели %Модель%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Модель%", Выборка.Модель);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДокументКонтроля%", Выборка.ДокументКонтроля);

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПриДвижениипкТехникаКПеремещениюМеждуРегионами(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru = 'По документу %ДокументКонтроля% 
		|нет не выполненной доставки техники %Техника%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Техника%", Выборка.Техника);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДокументКонтроля%", Выборка.ДокументКонтроля);

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура ВыполнитьКонтрольРезультатовПроведения(Объект, Отказ) Экспорт

	Если ЗначениеЗаполнено(ПараметрыСеанса.ПараметрыОбработчикаОбновления.РежимВыполнения) 
		Или Объект.ДополнительныеСвойства.ДляПроведения.РегистрыДляКонтроля.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ДанныеТаблиц    = Объект.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	ПакетЗапросов   = Новый Запрос;
	МассивКонтролей = Новый Массив;
	ТекстЗапроса    = "";

	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияпкМоделиКДоставкеПоЗаявкамНаАрендуТехникиИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ДвиженияпкМоделиКДоставкеПоЗаявкамНаАрендуТехникиИзменение"));

		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	Остатки.ЗаявкаНаАрендуТехники КАК ДокументКонтроля,
		|	Остатки.Модель                КАК Модель,
		|	Остатки.ВыгрузитьОстаток      КАК Выгрузить,
		|	Остатки.ПогрузитьОстаток      КАК Погрузить
		|
		|ИЗ 
		|	РегистрНакопления.пкМоделиКДоставкеПоЗаявкамНаАрендуТехники.Остатки(
		|			,
		|			(ЗаявкаНаАрендуТехники, Модель) В
		|				(ВЫБРАТЬ
		|					Т.ЗаявкаНаАрендуТехники,
		|					Т.Модель
		|				ИЗ
		|					ДвиженияпкМоделиКДоставкеПоЗаявкамНаАрендуТехникиИзменение КАК Т)) КАК Остатки
		|
		|ГДЕ
		|	Остатки.ВыгрузитьОстаток < 0	
		|	ИЛИ Остатки.ПогрузитьОстаток < 0
		|;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияпкТехникаКПеремещениюМеждуРегионамиИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ДвиженияпкТехникаКПеремещениюМеждуРегионамиИзменение"));

		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	Остатки.ЗаданиеНаПеревозку КАК ДокументКонтроля,
		|	Остатки.Техника			   КАК Техника,
		|	Остатки.ВыгрузитьОстаток   КАК Выгрузить
		|
		|ИЗ 
		|	РегистрНакопления.пкТехникаКПеремещениюМеждуРегионами.Остатки(
		|			,
		|			(ЗаданиеНаПеревозку, Техника) В
		|				(ВЫБРАТЬ
		|					Т.ЗаданиеНаПеревозку,
		|					Т.Техника
		|				ИЗ
		|					ДвиженияпкТехникаКПеремещениюМеждуРегионамиИзменение КАК Т)) КАК Остатки
		|
		|ГДЕ
		|	Остатки.ВыгрузитьОстаток < 0	
		|;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	Если МассивКонтролей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПакетЗапросов.Текст = ТекстЗапроса;
	ПакетЗапросов.МенеджерВременныхТаблиц = ДанныеТаблиц.МенеджерВременныхТаблиц;
	МассивРезультатов = ПакетЗапросов.ВыполнитьПакет();

	Итератор = -1;
	Для Каждого Результат Из МассивРезультатов Цикл

		Итератор = Итератор + 1;
		Если Результат.Пустой() Тогда
			Продолжить;
		КонецЕсли;

		ИмяКонтроля = МассивКонтролей[Итератор];

		Если ИмяКонтроля = Врег("ДвиженияпкМоделиКДоставкеПоЗаявкамНаАрендуТехникиИзменение") Тогда

			СообщитьОбОшибкахПроведенияПриДвижениипкМоделиКДоставкеПоЗаявкамНаАрендуТехники(Объект, Отказ, Результат)
			
		ИначеЕсли ИмяКонтроля = Врег("ДвиженияпкТехникаКПеремещениюМеждуРегионамиИзменение") Тогда

			СообщитьОбОшибкахПроведенияПриДвижениипкТехникаКПеремещениюМеждуРегионами(Объект, Отказ, Результат)
			
		Иначе

			ВызватьИсключение НСтр("ru = 'Ошибка контроля проведения!'");

		КонецЕсли;
	КонецЦикла;

	Если Отказ Тогда

		Если Объект.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ТекстСообщения = НСтр("ru = 'Проведение не выполнено %ПредставлениеОбъекта%'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Отмена проведения не выполнена %ПредставлениеОбъекта%'");
		КонецЕсли;

		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеОбъекта%", Строка(Объект));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Отчеты

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);	

КонецПроцедуры

#КонецОбласти 

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Комплект документов на принтер
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьКомплектаДокументов";
	КомандаПечати.МенеджерПечати = "";
	КомандаПечати.Идентификатор = "КомплектДокументов";
	КомандаПечати.СразуНаПринтер = Истина;
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов на принтер'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 1;

	// Комплект документов с настройкой...
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьКомплектаДокументовСНастройкой";
	КомандаПечати.МенеджерПечати = "";
	КомандаПечати.Идентификатор = "КомплектДокументовСНастройкой";
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов с настройкой...'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 2;

	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатПутевойЛист";
	КомандаПечати.Идентификатор = "ПечатьВесьДокумент";
	КомандаПечати.Представление = НСтр("ru = 'Печатать весь пут. лист при выезде'");
	КомандаПечати.Порядок  = 3;
	
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.МенеджерПечати = "Документ.уатПутевойЛист";
	//КомандаПечати.Идентификатор = "ПечататьЛицСторону";
	//КомандаПечати.Представление = НСтр("ru = 'Печатать лиц. сторону при выезде'");
	//КомандаПечати.Порядок  = 4;
	//
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.МенеджерПечати = "Документ.уатПутевойЛист";
	//КомандаПечати.Идентификатор = "ПечататьОбрСторону";
	//КомандаПечати.Представление = НСтр("ru = 'Печатать обр. сторону при выезде'");
	//КомандаПечати.Порядок  = 5;
	//
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатПутевойЛист";
	КомандаПечати.Идентификатор = "ПечатьВесьДокументПолная";
	КомандаПечати.Представление = НСтр("ru = 'Печатать весь пут. лист при возвращении'");
	КомандаПечати.Порядок  = 6;
	
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.МенеджерПечати = "Документ.уатПутевойЛист";
	//КомандаПечати.Идентификатор = "ПечататьЛицСторонуПолная";
	//КомандаПечати.Представление = НСтр("ru = 'Печатать лиц. сторону при возвращении'");
	//КомандаПечати.Порядок  = 7;
	//
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.МенеджерПечати = "Документ.уатПутевойЛист";
	//КомандаПечати.Идентификатор = "ПечататьОбрСторонуПолная";
	//КомандаПечати.Представление = НСтр("ru = 'Печатать обр. сторону при возвращении'");
	//КомандаПечати.Порядок  = 8;
	//
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.МенеджерПечати = "Документ.уатПутевойЛист";
	//КомандаПечати.Идентификатор = "МаршрутныйЛистПоЗаданию";
	//КомандаПечати.Представление = НСтр("ru = 'Маршрутный лист по заданию'");
	//КомандаПечати.Порядок  = 9;
	//
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.МенеджерПечати = "Документ.уатПутевойЛист";
	//КомандаПечати.Идентификатор = "ЭСМ7";
	//КомандаПечати.Представление = НСтр("ru = 'ЭСМ-7'");
	//КомандаПечати.Порядок  = 10;
	//
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.МенеджерПечати = "Документ.уатПутевойЛист";
	//КомандаПечати.Идентификатор = "Автокран";
	//КомандаПечати.Представление = НСтр("ru = 'Автокран'");
	//КомандаПечати.Порядок  = 11;
	
	//Маршрутный лист 
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.пкПечатьЛогистика";
	КомандаПечати.Идентификатор = "Доставка_МаршрутныйЛист";
	КомандаПечати.Представление = НСтр("ru = 'Маршрутный лист'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 12;
	
	//Акт приемки/возврата для печати на А4 (2016)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.пкПечатьЛогистика";
	КомандаПечати.Идентификатор = "Доставка_АктПриемкиВовзвратаА4";
	КомандаПечати.Представление = НСтр("ru = 'Акт приемки/возврата для печати на А4 (2016)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 13;
	
	//Акт приемки/возврата для печати на А4
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.пкПечатьЛогистика";
	КомандаПечати.Идентификатор = "Доставка_АктПриемкиВовзвратаА42017";
	КомандаПечати.Представление = НСтр("ru = 'Акт приемки/возврата для печати на А4'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 14;
	
	////Акт приемки/возврата для печати на А4 для Москвы
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.МенеджерПечати = "Обработка.пкПечатьЛогистика";
	//КомандаПечати.Идентификатор = "Доставка_АктПриемкиВовзвратаА4Москва";
	//КомандаПечати.Представление = НСтр("ru = 'Акт приемки/возврата для печати на А4 для Москвы'");
	//КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	//КомандаПечати.Порядок = 14;
	
	//Акт приемки/возврата для печати на А5 (2016)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.пкПечатьЛогистика";
	КомандаПечати.Идентификатор = "Доставка_АктПриемкиВовзвратаА5";
	КомандаПечати.Представление = НСтр("ru = 'Акт приемки/возврата для печати на А5 (2016)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 15;
	
	//Акт приемки/возврата для печати на А5
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.пкПечатьЛогистика";
	КомандаПечати.Идентификатор = "Доставка_АктПриемкиВовзвратаА52017";
	КомандаПечати.Представление = НСтр("ru = 'Акт приемки/возврата для печати на А5'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 16;
	
	////Акт приемки/возврата для печати на А5 для Москвы
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.МенеджерПечати = "Обработка.пкПечатьЛогистика";
	//КомандаПечати.Идентификатор = "Доставка_АктПриемкиВовзвратаА5Москва";
	//КомандаПечати.Представление = НСтр("ru = 'Акт приемки/возврата для печати на А5 для Москвы'");
	//КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	//КомандаПечати.Порядок = 16;
	
	//Доверенность
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.пкПечатьЛогистика";
	КомандаПечати.Идентификатор = "Доставка_ДоверенностьСПодписями";
	КомандаПечати.Представление = НСтр("ru = 'Доверенность с подписями'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 17;
	
	//Доверенность
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.пкПечатьЛогистика";
	КомандаПечати.Идентификатор = "Доставка_Доверенность";
	КомандаПечати.Представление = НСтр("ru = 'Доверенность'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 18;

	
	//ТН (форма 1208)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.пкПечатьЛогистика";
	КомандаПечати.Идентификатор = "Доставка_ТТН";
	КомандаПечати.Представление = НСтр("ru = 'ТН (форма 1208)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 19;
	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КомплектДокументов") Тогда
		КоллекцияПечатныхФорм.Очистить();
		СформироватьКомплектПечатныхФорм(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати);
	КонецЕсли;
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

Функция СформироватьКомплектПечатныхФорм(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати) Экспорт
	
	Перем АдресКомплектаПечатныхФорм;
	
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура") И ПараметрыПечати.Свойство("АдресКомплектаПечатныхФорм", АдресКомплектаПечатныхФорм) Тогда
		
		КомплектПечатныхФорм = ПолучитьИзВременногоХранилища(АдресКомплектаПечатныхФорм);
		
	Иначе
		
		КомплектПечатныхФорм = РегистрыСведений.НастройкиПечатиОбъектов.КомплектПечатныхФорм(
			Метаданные.Документы.пкДоставка.ПолноеИмя(),
			МассивОбъектов, Неопределено);
		
	КонецЕсли;
		
	Если КомплектПечатныхФорм = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураТипов = Новый Соответствие;
	СтруктураТипов.Вставить("Документ.пкДоставка", МассивОбъектов);
	
	ИмяМакета = "ПечатьВесьДокумент";
	ТекущийКомплект = КомплектПечатныхФорм.Скопировать(Новый Структура("Имя,Печатать,",ИмяМакета,Истина));
	Если ТекущийКомплект.Количество() > 0 Тогда
		Если ТекущийКомплект.Колонки.Найти("Ссылка") <> Неопределено И ЗначениеЗаполнено(ТекущийКомплект[0].Ссылка) Тогда
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекциюОдинЭкземпляр(КоллекцияПечатныхФорм, ИмяМакета);
			ТаблицаСсылок = ТекущийКомплект.Скопировать(,"Ссылка");
			ТаблицаСсылок.Свернуть("Ссылка");
			ТекущаяСтруктураТипов = Новый Соответствие;
			ТекущаяСтруктураТипов.Вставить("Документ.пкДоставка", ТаблицаСсылок.ВыгрузитьКолонку("Ссылка"));
		Иначе
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, ТекущийКомплект[0]);
			ТекущаяСтруктураТипов = СтруктураТипов;
		КонецЕсли;
	КонецЕсли;
	
	ИмяМакета = "ПечататьЛицСторону";
	ТекущийКомплект = КомплектПечатныхФорм.Скопировать(Новый Структура("Имя,Печатать,",ИмяМакета,Истина));
	Если ТекущийКомплект.Количество() > 0 Тогда
		Если ТекущийКомплект.Колонки.Найти("Ссылка") <> Неопределено И ЗначениеЗаполнено(ТекущийКомплект[0].Ссылка) Тогда
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекциюОдинЭкземпляр(КоллекцияПечатныхФорм, ИмяМакета);
			ТаблицаСсылок = ТекущийКомплект.Скопировать(,"Ссылка");
			ТаблицаСсылок.Свернуть("Ссылка");
			ТекущаяСтруктураТипов = Новый Соответствие;
			ТекущаяСтруктураТипов.Вставить("Документ.пкДоставка", ТаблицаСсылок.ВыгрузитьКолонку("Ссылка"));
		Иначе
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, ТекущийКомплект[0]);
			ТекущаяСтруктураТипов = СтруктураТипов;
		КонецЕсли;
	КонецЕсли;
	
	ИмяМакета = "ПечататьОбрСторону";
	ТекущийКомплект = КомплектПечатныхФорм.Скопировать(Новый Структура("Имя,Печатать,",ИмяМакета,Истина));
	Если ТекущийКомплект.Количество() > 0 Тогда
		Если ТекущийКомплект.Колонки.Найти("Ссылка") <> Неопределено И ЗначениеЗаполнено(ТекущийКомплект[0].Ссылка) Тогда
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекциюОдинЭкземпляр(КоллекцияПечатныхФорм, ИмяМакета);
			ТаблицаСсылок = ТекущийКомплект.Скопировать(,"Ссылка");
			ТаблицаСсылок.Свернуть("Ссылка");
			ТекущаяСтруктураТипов = Новый Соответствие;
			ТекущаяСтруктураТипов.Вставить("Документ.пкДоставка", ТаблицаСсылок.ВыгрузитьКолонку("Ссылка"));
		Иначе
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, ТекущийКомплект[0]);
			ТекущаяСтруктураТипов = СтруктураТипов;
		КонецЕсли;
	КонецЕсли;
	
	ИмяМакета = "МаршрутныйЛистПоЗаданию";
	ТекущийКомплект = КомплектПечатныхФорм.Скопировать(Новый Структура("Имя,Печатать,",ИмяМакета,Истина));
	Если ТекущийКомплект.Количество() > 0 Тогда
		Если ТекущийКомплект.Колонки.Найти("Ссылка") <> Неопределено И ЗначениеЗаполнено(ТекущийКомплект[0].Ссылка) Тогда
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекциюОдинЭкземпляр(КоллекцияПечатныхФорм, ИмяМакета);
			ТаблицаСсылок = ТекущийКомплект.Скопировать(,"Ссылка");
			ТаблицаСсылок.Свернуть("Ссылка");
			ТекущаяСтруктураТипов = Новый Соответствие;
			ТекущаяСтруктураТипов.Вставить("Документ.пкДоставка", ТаблицаСсылок.ВыгрузитьКолонку("Ссылка"));
		Иначе
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, ТекущийКомплект[0]);
			ТекущаяСтруктураТипов = СтруктураТипов;
		КонецЕсли;
	КонецЕсли;
	
	ИмяМакета = "ПечатьВесьДокументПолная";
	ТекущийКомплект = КомплектПечатныхФорм.Скопировать(Новый Структура("Имя,Печатать,",ИмяМакета,Истина));
	Если ТекущийКомплект.Количество() > 0 Тогда
		Если ТекущийКомплект.Колонки.Найти("Ссылка") <> Неопределено И ЗначениеЗаполнено(ТекущийКомплект[0].Ссылка) Тогда
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекциюОдинЭкземпляр(КоллекцияПечатныхФорм, ИмяМакета);
			ТаблицаСсылок = ТекущийКомплект.Скопировать(,"Ссылка");
			ТаблицаСсылок.Свернуть("Ссылка");
			ТекущаяСтруктураТипов = Новый Соответствие;
			ТекущаяСтруктураТипов.Вставить("Документ.пкДоставка", ТаблицаСсылок.ВыгрузитьКолонку("Ссылка"));
		Иначе
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, ТекущийКомплект[0]);
			ТекущаяСтруктураТипов = СтруктураТипов;
		КонецЕсли;
	КонецЕсли;
	
	ИмяМакета = "ПечататьОбрСторонуПолная";
	ТекущийКомплект = КомплектПечатныхФорм.Скопировать(Новый Структура("Имя,Печатать,",ИмяМакета,Истина));
	Если ТекущийКомплект.Количество() > 0 Тогда
		Если ТекущийКомплект.Колонки.Найти("Ссылка") <> Неопределено И ЗначениеЗаполнено(ТекущийКомплект[0].Ссылка) Тогда
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекциюОдинЭкземпляр(КоллекцияПечатныхФорм, ИмяМакета);
			ТаблицаСсылок = ТекущийКомплект.Скопировать(,"Ссылка");
			ТаблицаСсылок.Свернуть("Ссылка");
			ТекущаяСтруктураТипов = Новый Соответствие;
			ТекущаяСтруктураТипов.Вставить("Документ.пкДоставка", ТаблицаСсылок.ВыгрузитьКолонку("Ссылка"));
		Иначе
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, ТекущийКомплект[0]);
			ТекущаяСтруктураТипов = СтруктураТипов;
		КонецЕсли;
	КонецЕсли;
	
	ИмяМакета = "ПечататьЛицСторонуПолная";
	ТекущийКомплект = КомплектПечатныхФорм.Скопировать(Новый Структура("Имя,Печатать,",ИмяМакета,Истина));
	Если ТекущийКомплект.Количество() > 0 Тогда
		Если ТекущийКомплект.Колонки.Найти("Ссылка") <> Неопределено И ЗначениеЗаполнено(ТекущийКомплект[0].Ссылка) Тогда
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекциюОдинЭкземпляр(КоллекцияПечатныхФорм, ИмяМакета);
			ТаблицаСсылок = ТекущийКомплект.Скопировать(,"Ссылка");
			ТаблицаСсылок.Свернуть("Ссылка");
			ТекущаяСтруктураТипов = Новый Соответствие;
			ТекущаяСтруктураТипов.Вставить("Документ.пкДоставка", ТаблицаСсылок.ВыгрузитьКолонку("Ссылка"));
		Иначе
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, ТекущийКомплект[0]);
			ТекущаяСтруктураТипов = СтруктураТипов;
		КонецЕсли;
	КонецЕсли;
	
	ИмяМакета = "ЭСМ7";
	ТекущийКомплект = КомплектПечатныхФорм.Скопировать(Новый Структура("Имя,Печатать,",ИмяМакета,Истина));
	Если ТекущийКомплект.Количество() > 0 Тогда
		Если ТекущийКомплект.Колонки.Найти("Ссылка") <> Неопределено И ЗначениеЗаполнено(ТекущийКомплект[0].Ссылка) Тогда
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекциюОдинЭкземпляр(КоллекцияПечатныхФорм, ИмяМакета);
			ТаблицаСсылок = ТекущийКомплект.Скопировать(,"Ссылка");
			ТаблицаСсылок.Свернуть("Ссылка");
			ТекущаяСтруктураТипов = Новый Соответствие;
			ТекущаяСтруктураТипов.Вставить("Документ.пкДоставка", ТаблицаСсылок.ВыгрузитьКолонку("Ссылка"));
		Иначе
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, ТекущийКомплект[0]);
			ТекущаяСтруктураТипов = СтруктураТипов;
		КонецЕсли;
	КонецЕсли;
	
	ИмяМакета = "Автокран";
	ТекущийКомплект = КомплектПечатныхФорм.Скопировать(Новый Структура("Имя,Печатать,",ИмяМакета,Истина));
	Если ТекущийКомплект.Количество() > 0 Тогда
		Если ТекущийКомплект.Колонки.Найти("Ссылка") <> Неопределено И ЗначениеЗаполнено(ТекущийКомплект[0].Ссылка) Тогда
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекциюОдинЭкземпляр(КоллекцияПечатныхФорм, ИмяМакета);
			ТаблицаСсылок = ТекущийКомплект.Скопировать(,"Ссылка");
			ТаблицаСсылок.Свернуть("Ссылка");
			ТекущаяСтруктураТипов = Новый Соответствие;
			ТекущаяСтруктураТипов.Вставить("Документ.пкДоставка", ТаблицаСсылок.ВыгрузитьКолонку("Ссылка"));
		Иначе
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, ТекущийКомплект[0]);
			ТекущаяСтруктураТипов = СтруктураТипов;
		КонецЕсли;
	КонецЕсли;
	
	Документы.уатПутевойЛист.Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, Новый Структура("ДоступнаПечатьПоКомплектно", Истина));
	
	//Маршрутный лист 
	ИмяМакета = "Доставка_МаршрутныйЛист";
	ТекущийКомплект = КомплектПечатныхФорм.Скопировать(Новый Структура("Имя,Печатать,",ИмяМакета,Истина));
	Если ТекущийКомплект.Количество() > 0 Тогда
		Если ТекущийКомплект.Колонки.Найти("Ссылка") <> Неопределено И ЗначениеЗаполнено(ТекущийКомплект[0].Ссылка) Тогда
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекциюОдинЭкземпляр(КоллекцияПечатныхФорм, ИмяМакета);
			ТаблицаСсылок = ТекущийКомплект.Скопировать(,"Ссылка");
			ТаблицаСсылок.Свернуть("Ссылка");
			ТекущаяСтруктураТипов = Новый Соответствие;
			ТекущаяСтруктураТипов.Вставить("Документ.пкДоставка", ТаблицаСсылок.ВыгрузитьКолонку("Ссылка"));
		Иначе
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, ТекущийКомплект[0]);
			ТекущаяСтруктураТипов = СтруктураТипов;
		КонецЕсли;
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			ИмяМакета,
			ТекущийКомплект[0].Представление,
			Обработки.пкПечатьЛогистика.СформироватьПечатнуюФормуДоставка_МаршрутныйЛист(ТекущаяСтруктураТипов, ОбъектыПечати, Новый Структура, ТекущийКомплект));

	КонецЕсли;
	
	////Акт приемки/возврата для печати на А4 (2016)
	ИмяМакета = "Доставка_АктПриемкиВовзвратаА4";
	ТекущийКомплект = КомплектПечатныхФорм.Скопировать(Новый Структура("Имя,Печатать,",ИмяМакета,Истина));
	Если ТекущийКомплект.Количество() > 0 Тогда
		Если ТекущийКомплект.Колонки.Найти("Ссылка") <> Неопределено И ЗначениеЗаполнено(ТекущийКомплект[0].Ссылка) Тогда
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекциюОдинЭкземпляр(КоллекцияПечатныхФорм, ИмяМакета);
			ТаблицаСсылок = ТекущийКомплект.Скопировать(,"Ссылка");
			ТаблицаСсылок.Свернуть("Ссылка");
			ТекущаяСтруктураТипов = Новый Соответствие;
			ТекущаяСтруктураТипов.Вставить("Документ.пкДоставка", ТаблицаСсылок.ВыгрузитьКолонку("Ссылка"));
		Иначе
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, ТекущийКомплект[0]);
			ТекущаяСтруктураТипов = СтруктураТипов;
		КонецЕсли;
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			ИмяМакета,
			ТекущийКомплект[0].Представление,
			Обработки.пкПечатьЛогистика.СформироватьПечатнуюФормуДоставка_АктПриемкиВовзвратаА4(ТекущаяСтруктураТипов, ОбъектыПечати, Новый Структура, ТекущийКомплект));

	КонецЕсли;
	
	////Акт приемки/возврата для печати на А4
	ИмяМакета = "Доставка_АктПриемкиВовзвратаА42017";
	ТекущийКомплект = КомплектПечатныхФорм.Скопировать(Новый Структура("Имя,Печатать,",ИмяМакета,Истина));
	Если ТекущийКомплект.Количество() > 0 Тогда
		Если ТекущийКомплект.Колонки.Найти("Ссылка") <> Неопределено И ЗначениеЗаполнено(ТекущийКомплект[0].Ссылка) Тогда
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекциюОдинЭкземпляр(КоллекцияПечатныхФорм, ИмяМакета);
			ТаблицаСсылок = ТекущийКомплект.Скопировать(,"Ссылка");
			ТаблицаСсылок.Свернуть("Ссылка");
			ТекущаяСтруктураТипов = Новый Соответствие;
			ТекущаяСтруктураТипов.Вставить("Документ.пкДоставка", ТаблицаСсылок.ВыгрузитьКолонку("Ссылка"));
		Иначе
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, ТекущийКомплект[0]);
			ТекущаяСтруктураТипов = СтруктураТипов;
		КонецЕсли;
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			ИмяМакета,
			ТекущийКомплект[0].Представление,
			Обработки.пкПечатьЛогистика.СформироватьПечатнуюФормуДоставка_АктПриемкиВовзвратаА42017(ТекущаяСтруктураТипов, ОбъектыПечати, Новый Структура, ТекущийКомплект));

	КонецЕсли;
	
	////Акт приемки/возврата для печати на А4 для Москвы
	ИмяМакета = "Доставка_АктПриемкиВовзвратаА4Москва";
	ТекущийКомплект = КомплектПечатныхФорм.Скопировать(Новый Структура("Имя,Печатать,",ИмяМакета,Истина));
	Если ТекущийКомплект.Количество() > 0 Тогда
		Если ТекущийКомплект.Колонки.Найти("Ссылка") <> Неопределено И ЗначениеЗаполнено(ТекущийКомплект[0].Ссылка) Тогда
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекциюОдинЭкземпляр(КоллекцияПечатныхФорм, ИмяМакета);
			ТаблицаСсылок = ТекущийКомплект.Скопировать(,"Ссылка");
			ТаблицаСсылок.Свернуть("Ссылка");
			ТекущаяСтруктураТипов = Новый Соответствие;
			ТекущаяСтруктураТипов.Вставить("Документ.пкДоставка", ТаблицаСсылок.ВыгрузитьКолонку("Ссылка"));
		Иначе
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, ТекущийКомплект[0]);
			ТекущаяСтруктураТипов = СтруктураТипов;
		КонецЕсли;
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			ИмяМакета,
			ТекущийКомплект[0].Представление,
			Обработки.пкПечатьЛогистика.СформироватьПечатнуюФормуДоставка_АктПриемкиВовзвратаА4Москва(ТекущаяСтруктураТипов, ОбъектыПечати, Новый Структура, ТекущийКомплект));

	КонецЕсли;
	
	////Акт приемки/возврата для печати на А5 (2016)
	ИмяМакета = "Доставка_АктПриемкиВовзвратаА5";
	ТекущийКомплект = КомплектПечатныхФорм.Скопировать(Новый Структура("Имя,Печатать,",ИмяМакета,Истина));
	Если ТекущийКомплект.Количество() > 0 Тогда
		Если ТекущийКомплект.Колонки.Найти("Ссылка") <> Неопределено И ЗначениеЗаполнено(ТекущийКомплект[0].Ссылка) Тогда
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекциюОдинЭкземпляр(КоллекцияПечатныхФорм, ИмяМакета);
			ТаблицаСсылок = ТекущийКомплект.Скопировать(,"Ссылка");
			ТаблицаСсылок.Свернуть("Ссылка");
			ТекущаяСтруктураТипов = Новый Соответствие;
			ТекущаяСтруктураТипов.Вставить("Документ.пкДоставка", ТаблицаСсылок.ВыгрузитьКолонку("Ссылка"));
		Иначе
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, ТекущийКомплект[0]);
			ТекущаяСтруктураТипов = СтруктураТипов;
		КонецЕсли;
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			ИмяМакета,
			ТекущийКомплект[0].Представление,
			Обработки.пкПечатьЛогистика.СформироватьПечатнуюФормуДоставка_АктПриемкиВовзвратаА5(ТекущаяСтруктураТипов, ОбъектыПечати, Новый Структура, ТекущийКомплект));

	КонецЕсли;
	
	////Акт приемки/возврата для печати на А5
	ИмяМакета = "Доставка_АктПриемкиВовзвратаА52017";
	ТекущийКомплект = КомплектПечатныхФорм.Скопировать(Новый Структура("Имя,Печатать,",ИмяМакета,Истина));
	Если ТекущийКомплект.Количество() > 0 Тогда
		Если ТекущийКомплект.Колонки.Найти("Ссылка") <> Неопределено И ЗначениеЗаполнено(ТекущийКомплект[0].Ссылка) Тогда
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекциюОдинЭкземпляр(КоллекцияПечатныхФорм, ИмяМакета);
			ТаблицаСсылок = ТекущийКомплект.Скопировать(,"Ссылка");
			ТаблицаСсылок.Свернуть("Ссылка");
			ТекущаяСтруктураТипов = Новый Соответствие;
			ТекущаяСтруктураТипов.Вставить("Документ.пкДоставка", ТаблицаСсылок.ВыгрузитьКолонку("Ссылка"));
		Иначе
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, ТекущийКомплект[0]);
			ТекущаяСтруктураТипов = СтруктураТипов;
		КонецЕсли;
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			ИмяМакета,
			ТекущийКомплект[0].Представление,
			Обработки.пкПечатьЛогистика.СформироватьПечатнуюФормуДоставка_АктПриемкиВовзвратаА52017(ТекущаяСтруктураТипов, ОбъектыПечати, Новый Структура, ТекущийКомплект));

	КонецЕсли;
	
	////Акт приемки/возврата для печати на А5 для Москвы
	ИмяМакета = "Доставка_АктПриемкиВовзвратаА5Москва";
	ТекущийКомплект = КомплектПечатныхФорм.Скопировать(Новый Структура("Имя,Печатать,",ИмяМакета,Истина));
	Если ТекущийКомплект.Количество() > 0 Тогда
		Если ТекущийКомплект.Колонки.Найти("Ссылка") <> Неопределено И ЗначениеЗаполнено(ТекущийКомплект[0].Ссылка) Тогда
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекциюОдинЭкземпляр(КоллекцияПечатныхФорм, ИмяМакета);
			ТаблицаСсылок = ТекущийКомплект.Скопировать(,"Ссылка");
			ТаблицаСсылок.Свернуть("Ссылка");
			ТекущаяСтруктураТипов = Новый Соответствие;
			ТекущаяСтруктураТипов.Вставить("Документ.пкДоставка", ТаблицаСсылок.ВыгрузитьКолонку("Ссылка"));
		Иначе
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, ТекущийКомплект[0]);
			ТекущаяСтруктураТипов = СтруктураТипов;
		КонецЕсли;
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			ИмяМакета,
			ТекущийКомплект[0].Представление,
			Обработки.пкПечатьЛогистика.СформироватьПечатнуюФормуДоставка_АктПриемкиВовзвратаА5Москва(ТекущаяСтруктураТипов, ОбъектыПечати, Новый Структура, ТекущийКомплект));

	КонецЕсли;
	
	////Доверенность
	ИмяМакета = "Доставка_Доверенность";
	ТекущийКомплект = КомплектПечатныхФорм.Скопировать(Новый Структура("Имя,Печатать,",ИмяМакета,Истина));
	Если ТекущийКомплект.Количество() > 0 Тогда
		Если ТекущийКомплект.Колонки.Найти("Ссылка") <> Неопределено И ЗначениеЗаполнено(ТекущийКомплект[0].Ссылка) Тогда
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекциюОдинЭкземпляр(КоллекцияПечатныхФорм, ИмяМакета);
			ТаблицаСсылок = ТекущийКомплект.Скопировать(,"Ссылка");
			ТаблицаСсылок.Свернуть("Ссылка");
			ТекущаяСтруктураТипов = Новый Соответствие;
			ТекущаяСтруктураТипов.Вставить("Документ.пкДоставка", ТаблицаСсылок.ВыгрузитьКолонку("Ссылка"));
		Иначе
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, ТекущийКомплект[0]);
			ТекущаяСтруктураТипов = СтруктураТипов;
		КонецЕсли;
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			ИмяМакета,
			ТекущийКомплект[0].Представление,
			Обработки.пкПечатьЛогистика.СформироватьПечатнуюФормуДоставка_Доверенность(ТекущаяСтруктураТипов, ОбъектыПечати, Новый Структура, ТекущийКомплект));

	КонецЕсли;
	
	//ТН (форма 1208)
	ИмяМакета = "Доставка_ТТН";
	ТекущийКомплект = КомплектПечатныхФорм.Скопировать(Новый Структура("Имя,Печатать,",ИмяМакета,Истина));
	Если ТекущийКомплект.Количество() > 0 Тогда
		Если ТекущийКомплект.Колонки.Найти("Ссылка") <> Неопределено И ЗначениеЗаполнено(ТекущийКомплект[0].Ссылка) Тогда
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекциюОдинЭкземпляр(КоллекцияПечатныхФорм, ИмяМакета);
			ТаблицаСсылок = ТекущийКомплект.Скопировать(,"Ссылка");
			ТаблицаСсылок.Свернуть("Ссылка");
			ТекущаяСтруктураТипов = Новый Соответствие;
			ТекущаяСтруктураТипов.Вставить("Документ.пкДоставка", ТаблицаСсылок.ВыгрузитьКолонку("Ссылка"));
		Иначе
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, ТекущийКомплект[0]);
			ТекущаяСтруктураТипов = СтруктураТипов;
		КонецЕсли;
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			ИмяМакета,
			ТекущийКомплект[0].Представление,
			Обработки.пкПечатьЛогистика.СформироватьПечатнуюФормуДоставка_ТТН(ТекущаяСтруктураТипов, ОбъектыПечати, Новый Структура, ТекущийКомплект));

	КонецЕсли;
	
	РегистрыСведений.НастройкиПечатиОбъектов.СформироватьКомплектВнешнихПечатныхФорм(
		"Документ.пкДоставка",
		МассивОбъектов,
		ПараметрыПечати,
		КоллекцияПечатныхФорм,
		ОбъектыПечати);
	
КонецФункции

Функция КомплектПечатныхФорм() Экспорт
	
	КомплектПечатныхФорм = РегистрыСведений.НастройкиПечатиОбъектов.ПодготовитьКомплектПечатныхФорм();
	
	//РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "ПечататьЛицСторону", НСтр("ru = 'Печатать лиц. сторону при выезде'"), 0);
	//РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "ПечататьОбрСторону", НСтр("ru = 'Печатать обр. сторону при выезде'"), 0);
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "ПечатьВесьДокумент", НСтр("ru = 'Печатать весь пут. лист при выезде'"), 0);
	//РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "МаршрутныйЛистПоЗаданию", НСтр("ru = 'Маршрутный лист по заданию'"), 0);
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "ПечатьВесьДокументПолная", НСтр("ru = 'Печатать весь пут. лист при возвращении'"), 0);
	//РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "ПечататьОбрСторонуПолная", НСтр("ru = 'Печатать обр. сторону при возвращении'"), 0);
	//РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "ПечататьЛицСторонуПолная", НСтр("ru = 'Печатать лиц. сторону при возвращении'"), 0);
	//РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "ЭСМ7", НСтр("ru = 'ЭСМ-7'"), 0);
	//РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "Автокран", НСтр("ru = 'Автокран'"), 0);
	
	//Маршрутный лист 
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "Доставка_МаршрутныйЛист", НСтр("ru = 'Маршрутный лист'"), 0);
	//Акт приемки/возврата для печати на А4 (2016)
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "Доставка_АктПриемкиВовзвратаА4", НСтр("ru = 'Акт приемки/возврата для печати на А4 (2016)'"), 0);
	//Акт приемки/возврата для печати на А4
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "Доставка_АктПриемкиВовзвратаА42017", НСтр("ru = 'Акт приемки/возврата для печати на А4'"), 0);
	////Акт приемки/возврата для печати на А4 для Москвы
	//РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "Доставка_АктПриемкиВовзвратаА4Москва", НСтр("ru = 'Акт приемки/возврата для печати на А4 для Москвы'"), 0);
	//Акт приемки/возврата для печати на А5 (2016)
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "Доставка_АктПриемкиВовзвратаА5", НСтр("ru = 'Акт приемки/возврата для печати на А5 (2016)'"), 0);
	//Акт приемки/возврата для печати на А5
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "Доставка_АктПриемкиВовзвратаА52017", НСтр("ru = 'Акт приемки/возврата для печати на А5'"), 0);
	////Акт приемки/возврата для печати на А5 для Москвы
	//РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "Доставка_АктПриемкиВовзвратаА5Москва", НСтр("ru = 'Акт приемки/возврата для печати на А5 для Москвы'"), 0);
	//Доверенность
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "Доставка_Доверенность", НСтр("ru = 'Доверенность'"), 0);
	//ТН (форма 1208)
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "Доставка_ТТН", НСтр("ru = 'ТН (форма 1208)'"), 0);
	
	Возврат КомплектПечатныхФорм;
	
КонецФункции

Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Партнер";
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Перевозчик");
	
КонецПроцедуры

Функция ДоступныеДляШаблоновПечатныеФормы() Экспорт

	МассивДоступныхПечатныхФорм = Новый Массив;
	ШаблоныСообщенийСервер.ДобавитьВМассивПечатныеФормыСчета(МассивДоступныхПечатныхФорм);
	
	Возврат МассивДоступныхПечатныхФорм

КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Функция ПолноеИмяОбъекта()
	
	Возврат "Документ.пкДоставка";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли

Процедура ЗаполнитьПутевойЛистПоДоставке(тОбъект, обДоставка, СтандартнаяОбработка) Экспорт
	
	Если Не ЗначениеЗаполнено(обДоставка.Организация) Тогда
		Возврат; //без отказа
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(обДоставка.Водитель) Тогда
		Возврат; //без отказа
	КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(обДоставка.СпособДоставки)) ИЛИ обДоставка.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз Тогда
		Возврат; //без отказа - едет само Путевого листа не нужно!
	КонецЕсли;
	
	//Заполняем
	тОбъект.Организация				= обДоставка.Организация;
	тОбъект.Подразделение			= обДоставка.Подразделение;
	тОбъект.Ответственный			= обДоставка.Ответственный;
	тОбъект.Комментарий				= НСтр("ru='Создан автоматически подокументу: '") + обДоставка.Ссылка;
	тОбъект.ТранспортноеСредство	= обДоставка.ТранспортноеСредство;
	тОбъект.пкДоставка				= обДоставка.Ссылка;
	тОбъект.ДатаВыезда				= ?(ЗначениеЗаполнено(обДоставка.НачалоРейсаФакт), НачалоДня(обДоставка.НачалоРейсаФакт), НачалоДня(обДоставка.НачалоРейсаПлан));
	тОбъект.ДатаВозвращения			= ?(ЗначениеЗаполнено(обДоставка.ОкончаниеРейсаФакт), НачалоДня(обДоставка.ОкончаниеРейсаФакт), НачалоДня(обДоставка.ОкончаниеРейсаПлан));
	
	ЗапросСотрудникПоФЛ = новый Запрос;
	ЗапросСотрудникПоФЛ.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТекущиеКадровыеДанныеСотрудников.Сотрудник
	|ИЗ
	|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|ГДЕ
	|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо = &ФизическоеЛицо
	|	И ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = &ТекущаяОрганизация";
	ЗапросСотрудникПоФЛ.УстановитьПараметр("ФизическоеЛицо", обДоставка.Водитель);
	ЗапросСотрудникПоФЛ.УстановитьПараметр("ТекущаяОрганизация", тОбъект.Организация);
	РезЗапроса = ЗапросСотрудникПоФЛ.Выполнить().Выбрать();
	
	Если РезЗапроса.Следующий() Тогда
		тОбъект.Водитель1	= РезЗапроса.Сотрудник;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(тОбъект.Водитель1) Тогда
		//Создадим нового сотрудника
		НовыйСотрудник = Справочники.Сотрудники.СоздатьЭлемент();
		НовыйСотрудник.ФизическоеЛицо	= обДоставка.Водитель;
		НовыйСотрудник.Наименование		= НовыйСотрудник.ФизическоеЛицо.Наименование;
		НовыйСотрудник.УстановитьНовыйКод();
		
		Попытка
			НовыйСотрудник.Записать();
		Исключение
			тСообщение = Новый СообщениеПользователю;
			тСообщение.Текст = "Ошибка при записи нового сотрудника: " + НовыйСотрудник.Ссылка + " " + ОписаниеОшибки();
			тСообщение.Сообщить();
			
			Возврат;
			
		КонецПопытки;
		
		//и запишем его в регистр сведений ТекущиеКадровыеДанныеСотрудников
		НаборЗаписей = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(НовыйСотрудник.ФизическоеЛицо, Истина);
		НаборЗаписей.Отбор.Сотрудник.Установить(НовыйСотрудник.Ссылка, Истина);
		НаборЗаписей.Отбор.ТекущаяОрганизация.Установить(обДоставка.Организация, Истина);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		
		тЗапись = НаборЗаписей.Добавить();
		тЗапись.Сотрудник			= НовыйСотрудник.Ссылка;
		тЗапись.ФизическоеЛицо		= НовыйСотрудник.ФизическоеЛицо;
		тЗапись.ТекущаяОрганизация	= обДоставка.Организация;
		
		Попытка
			НаборЗаписей.Записать(Истина);
		Исключение
			тСообщение = Новый СообщениеПользователю;
			тСообщение.Текст = "Ошибка при записи нового сотрудника: " + НовыйСотрудник.Ссылка + " " + ОписаниеОшибки();
			тСообщение.Сообщить();
			
			Возврат;
			
		КонецПопытки;
		
		тОбъект.Водитель1	= НовыйСотрудник.Ссылка;
		
	КонецЕсли;
	
	СтруктураОбъектовНастроек = Новый Структура;
	СтруктураОбъектовНастроек.Вставить("Организация", тОбъект.Организация);
	СтруктураОбъектовНастроек.Вставить("Подразделение", тОбъект.Подразделение);
	СтруктураОбъектовНастроек.Вставить("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
	тОбъект.ВидПЛ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ОсновнойВидПЛ"));

КонецПроцедуры

