&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

/////////////////////////////////////////////////////////////////////////
// Стандартное (почти)

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

#Область ОбработчикиКомандФормы
// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизитаНаСервере(тОбъект, ИмяРевизита)
	
	Возврат тОбъект[ИмяРевизита];
	
КонецФункции

/////////////////////////////////////////////////////////////////////////
&НаСервере
Процедура ОбновитьДанныеШапки()
	
	Если ЗначениеЗаполнено(Объект.ТранспортноеСредство) И ТипЗнч(Объект.ТранспортноеСредство) <> Тип("Строка") Тогда
		МаксимальныйВес			= Объект.ТранспортноеСредство.ГрузоподъемностьВТоннах;
		КоэффициентЗагрузкиТС	= ?(Объект.ТранспортноеСредство.пкКоэффициентЗагрузкиТС <> 0, Объект.ТранспортноеСредство.пкКоэффициентЗагрузкиТС, 1);
		МаксимальныйОбъем		= Объект.ТранспортноеСредство.ВместимостьВКубическихМетрах * КоэффициентЗагрузкиТС;
	Иначе
		МаксимальныйВес			= 0;
		КоэффициентЗагрузкиТС	= 1;
		МаксимальныйОбъем		= 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДопДанныеЗаданияНаПеревозку()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Элементы.ЗаданияНаПеревозкуЗаданиеНаПеревозкуОтгрузкаПодтверждена.Видимость = ЗначениеЗаполнено(Объект.Подразделение) И Объект.Подразделение.пкТребуетсяПодтверждениеОтгрузки;
	
	ЗапросОперации = новый Запрос;
	ЗапросОперации.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	пкПогрузкаВыгрузкаПоДоставке.ЗаданиеНаПеревозку,
	|	пкПогрузкаВыгрузкаПоДоставке.Операция,
	|	пкПогрузкаВыгрузкаПоДоставке.Дата
	|ИЗ
	|	Документ.пкПогрузкаВыгрузкаПоДоставке КАК пкПогрузкаВыгрузкаПоДоставке
	|ГДЕ
	|	пкПогрузкаВыгрузкаПоДоставке.Доставка = &Доставка
	|	И пкПогрузкаВыгрузкаПоДоставке.Проведен";
	ЗапросОперации.УстановитьПараметр("Доставка", Объект.Ссылка);
	ОперацииПоДоставке = ЗапросОперации.Выполнить().Выгрузить();
	
	Для Каждого текСтрока Из Объект.ЗаданияНаПеревозку Цикл
		Если ЗначениеЗаполнено(текСтрока.ЗаданиеНаПеревозку) Тогда
			
			текСтрока.ЗаданиеНаПеревозкуНомер	= текСтрока.ЗаданиеНаПеревозку.Номер;
			текСтрока.Модель					= текСтрока.ЗаданиеНаПеревозку.Модель;
			текСтрока.Техника					= текСтрока.ЗаданиеНаПеревозку.Техника;
			
			Если ЗначениеЗаполнено(текСтрока.ЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники) Тогда
				текСтрока.Клиент				= текСтрока.ЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники.Партнер;
				текСтрока.ОбъектСтроительства	= текСтрока.ЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники.ОбъектСтроительства;
			КонецЕсли;
			
			текСтрока.АдресДоставки = текСтрока.ЗаданиеНаПеревозку.АдресДоставки;
			
			Если текСтрока.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту Тогда
				
				текСтрока.КодВидаДоставки 	= 1;
				
				текСтрока.АдресОтправитель	= "";
				текСтрока.АдресПолучатель	= текСтрока.ЗаданиеНаПеревозку.АдресДоставки;
				
			ИначеЕсли текСтрока.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента Тогда
				
				текСтрока.КодВидаДоставки = 2;
				
				текСтрока.АдресОтправитель	= текСтрока.ЗаданиеНаПеревозку.АдресДоставки;
				текСтрока.АдресПолучатель	= "";
				
			ИначеЕсли текСтрока.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.Перекат Тогда
				Если Не ЗначениеЗаполнено(текСтрока.ЗаданиеНаПеревозку.ЗаданиеНаПеревозку) Тогда
					
					текСтрока.КодВидаДоставки 	= 4;
					
					текСтрока.АдресОтправитель	= текСтрока.ЗаданиеНаПеревозку.АдресДоставки;
					текСтрока.АдресПолучатель	= "";
				
					Для Каждого текСтрокаПерекат Из Объект.ЗаданияНаПеревозку Цикл
						Если ЗначениеЗаполнено(текСтрокаПерекат.ЗаданиеНаПеревозку)
							И текСтрокаПерекат.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.Перекат
							И текСтрокаПерекат.ЗаданиеНаПеревозку.ЗаданиеНаПеревозку = текСтрока.ЗаданиеНаПеревозку
						Тогда
							текСтрока.АдресПолучатель	=  текСтрокаПерекат.ЗаданиеНаПеревозку.АдресДоставки;
						КонецЕсли;
					КонецЦикла;
					
				Иначе
					
					текСтрока.КодВидаДоставки = 3;
					
					текСтрока.АдресОтправитель	= "";
					текСтрока.АдресПолучатель	= текСтрока.АдресДоставки;
				
					Для Каждого текСтрокаПерекат Из Объект.ЗаданияНаПеревозку Цикл
						Если ЗначениеЗаполнено(текСтрокаПерекат.ЗаданиеНаПеревозку)
							И текСтрокаПерекат.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.Перекат
							И текСтрокаПерекат.ЗаданиеНаПеревозку = текСтрока.ЗаданиеНаПеревозку.ЗаданиеНаПеревозку
						Тогда
							текСтрока.АдресОтправитель	=  текСтрокаПерекат.ЗаданиеНаПеревозку.АдресДоставки;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
			ИначеЕсли текСтрока.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами Тогда
				
				текСтрока.КодВидаДоставки 	= 1;
				
				текСтрока.АдресОтправитель	= "";
				текСтрока.АдресПолучатель	= текСтрока.ЗаданиеНаПеревозку.АдресДоставки;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Объект.СпособДоставки) И текСтрока.ЗаданиеНаПеревозку.СпособДоставки <> Объект.СпособДоставки Тогда
				текСтрока.СпособПодходит 	= 1;
			Иначе
				текСтрока.СпособПодходит 	= 0;
			КонецЕсли;
			
			текСтрока.Погружено			= Ложь;
			текСтрока.ДатаВремяПогрузки	= "";
			текСтрока.Выгружено			= Ложь;
			текСтрока.ДатаВремяВыгрузки	= "";
			
			Если ОперацииПоДоставке.Количество() > 0 Тогда
				
				НайденныеСтроки = ОперацииПоДоставке.НайтиСтроки(Новый Структура("ЗаданиеНаПеревозку,Операция",
					текСтрока.ЗаданиеНаПеревозку, Перечисления.пкОперацииПогрузкаВыгрузка.Погрузка));
				Если НайденныеСтроки.Количество() > 0 тогда
					текСтрока.Погружено			= Истина;
					текСтрока.ДатаВремяПогрузки	= НайденныеСтроки[0].Дата;
				КонецЕсли;
				
				НайденныеСтроки = ОперацииПоДоставке.НайтиСтроки(Новый Структура("ЗаданиеНаПеревозку,Операция",
					текСтрока.ЗаданиеНаПеревозку, Перечисления.пкОперацииПогрузкаВыгрузка.Выгрузка));
				Если НайденныеСтроки.Количество() > 0 тогда
					текСтрока.Выгружено			= Истина;
					текСтрока.ДатаВремяВыгрузки	= НайденныеСтроки[0].Дата;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(текСтрока.Модель) Тогда
			
			текСтрока.Вес	= текСтрока.Модель.пкВес;
			текСтрока.Объем	= текСтрока.Модель.пкТранспортнаяДлина * 
				текСтрока.Модель.пкТранспортнаяШирина * 
				текСтрока.Модель.пкТранспортнаяВысота;
				
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьМаршруты()
	
	тМаршруты = Маршруты.Выгрузить();
	тМаршруты.Очистить();
	
	//Построим очередь строк зданий по перевозке техники, чтобы сначало забирали а потом выгруали
	Для Каждого текСтрока Из Объект.ЗаданияНаПеревозку Цикл
		Если ЗначениеЗаполнено(текСтрока.ЗаданиеНаПеревозку) 
			И текСтрока.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.Перекат
			И ЗначениеЗаполнено(текСтрока.ЗаданиеНаПеревозку.ЗаданиеНаПеревозку)
		Тогда
			текСтрока.ОчередьВПеревозке = 1;
		Иначе
			текСтрока.ОчередьВПеревозке = 0;
		КонецЕсли;
	КонецЦикла;
	
//Рарус Владимир Подрезов 25.07.2017
	//Объект.ЗаданияНаПеревозку.Сортировать("НомерХодки, ТочкаМаршрута, ОчередьВПеревозке, КодВидаДоставки, ПланируемоеВремяДоставки, НомерСтроки");
	Объект.ЗаданияНаПеревозку.Сортировать("Отменено, Погружено Убыв, ДатаВремяПогрузки, ПланируемоеВремяДоставки, НомерХодки, ТочкаМаршрута, КодВидаДоставки, НомерСтроки");
//Рарус Владимир Подрезов Конец
	
	//Заполним маршрут и Проверим нет ли двух строк с одним адресом точкой маршрута, но разными адресами
	текХодка = -1;
	
	Для Каждого текСтрока Из Объект.ЗаданияНаПеревозку Цикл
		
		Если текХодка <> текСтрока.НомерХодки Тогда
			
			Если текХодка <> -1 Тогда
				//Добавим Заезд на базу
				НоваяСтрока = тМаршруты.Добавить();
				НоваяСтрока.АдресДоставки	= "<Заезд на базу>";
				НоваяСтрока.НомерХодки		= текХодка;
				НоваяСтрока.ЭтоЗаездНаБазу	= Истина;
				
			КонецЕсли;
			
			текХодка = текСтрока.НомерХодки;
			
		КонецЕсли;
		
		НашлиАдрес = Ложь;
		Для Каждого текПроверкаСтрока Из тМаршруты Цикл
			
			Если текСтрока.НомерХодки <> текПроверкаСтрока.НомерХодки Тогда
				Продолжить;
			КонецЕсли;
			
			Если Лев(СокрЛП(текСтрока.АдресДоставки), 1000) = Лев(СокрЛП(текПроверкаСтрока.АдресДоставки), 1000) Тогда
				
				НашлиАдрес = Истина;
				
				Если (текСтрока.ТочкаМаршрута <> текПроверкаСтрока.ТочкаМаршрута) Тогда
					
					текСтрока.ИзмененАдрес = Истина;
					
				КонецЕсли;
				
			ИначеЕсли (текСтрока.ТочкаМаршрута = текПроверкаСтрока.ТочкаМаршрута) Тогда
				
				текСтрока.ИзмененАдрес = Истина;
				
			КонецЕсли;
		КонецЦикла;
		
		Если Не НашлиАдрес Тогда
			
			НоваяСтрока = тМаршруты.Добавить();
			НоваяСтрока.АдресДоставки	= текСтрока.АдресДоставки;
			НоваяСтрока.ИзмененАдрес	= текСтрока.ИзмененАдрес;
			НоваяСтрока.НомерХодки		= текСтрока.НомерХодки;
			НоваяСтрока.ТочкаМаршрута	= текСтрока.ТочкаМаршрута;
			
		КонецЕсли;
	КонецЦикла;
	
	Если текХодка <> -1 Тогда
		//Добавим последний Заезд на базу (возвращение)
		НоваяСтрока = тМаршруты.Добавить();
		НоваяСтрока.АдресДоставки	= "<Заезд на базу>";
		НоваяСтрока.НомерХодки		= текХодка;
		НоваяСтрока.ЭтоЗаездНаБазу	= Истина;
		
	КонецЕсли;


	ЗначениеВДанныеФормы(тМаршруты, Маршруты);
	
	ОбновитьДопДанныеМаршрутов();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДопДанныеМаршрутов()
	
	текНомерХодки = -1;
	ВесВозврата		= 0;
	ОбъемВозврата	= 0;
			
	Для Каждого текСтрока Из Маршруты Цикл
		
		//Обнулим счетчики при изменении Номера ходки
		Если текНомерХодки <> текСтрока.НомерХодки Тогда
			
			текНомерХодки 	= текСтрока.НомерХодки;
			
			ВесВозврата		= 0;
			ОбъемВозврата	= 0;
			
		КонецЕсли;
		
		Если текСтрока.ЭтоЗаездНаБазу Тогда
			
			текСтрока.Вес			= ВесВозврата;
			текСтрока.ОстатокВеса	= МаксимальныйВес - текСтрока.Вес;
			текСтрока.Объем			= ОбъемВозврата;
			текСтрока.ОстатокОбъема	= МаксимальныйОбъем - текСтрока.Объем;
			текСтрока.Перевес		= 0;
			текСтрока.ПеревесИнфо	= "";
			Разделитель				= "";
			
			Если текСтрока.ОстатокВеса < 0 Тогда
				текСтрока.Перевес = 1;
				текСтрока.ПеревесИнфо	= текСтрока.ПеревесИнфо + Разделитель + НСтр("ru='Превышен максимальный Вес'");
				Разделитель = ", ";
			КонецЕсли;
			Если текСтрока.ОстатокОбъема < 0 Тогда
				текСтрока.Перевес = 1;
				текСтрока.ПеревесИнфо	= текСтрока.ПеревесИнфо + Разделитель + НСтр("ru='Превышен объем (с учетом коэффициента вместимости)'");
				Разделитель = ", ";
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		ВесПоТочке		= 0;
		ОбъемПоТочке	= 0;
		
		Для Каждого текСтрокаЗаданий Из Объект.ЗаданияНаПеревозку Цикл
			
			Если Не ЗначениеЗаполнено(текСтрокаЗаданий.ЗаданиеНаПеревозку) Тогда
				Продолжить;
			КонецЕсли;
			
			Если текСтрокаЗаданий.НомерХодки <> текСтрока.НомерХодки Тогда
				Продолжить;
			КонецЕсли;
			
			Если текСтрокаЗаданий.Отменено Тогда
				Продолжить;
			КонецЕсли;
			
			Если текСтрокаЗаданий.ТочкаМаршрута < текСтрока.ТочкаМаршрута Тогда
				
				Если текСтрокаЗаданий.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента Тогда
					//Техника, которая ранее была забрана для возврата
					ВесПоТочке 		= ВесПоТочке + текСтрокаЗаданий.Вес;
					ОбъемПоТочке	= ОбъемПоТочке + текСтрокаЗаданий.Объем;
				КонецЕсли;
				
				Если (текСтрокаЗаданий.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.Перекат 
					И НЕ ЗначениеЗаполнено(текСтрокаЗаданий.ЗаданиеНаПеревозку.ЗаданиеНаПеревозку))
				Тогда
					//Техника, которая ранее была забрана для Переката
					ПерекатЗакончен = Ложь;
					Для Каждого КонецПереката Из Объект.ЗаданияНаПеревозку Цикл
						Если КонецПереката.НомерХодки <> текСтрока.НомерХодки Тогда
							Продолжить;
						КонецЕсли;
						
						Если КонецПереката.ТочкаМаршрута > текСтрока.ТочкаМаршрута Тогда
							Прервать;//нет смысла дальше смотреть - оно точно еще в машине
						КонецЕсли;
						Если КонецПереката.ЗаданиеНаПеревозку.ЗаданиеНаПеревозку = текСтрокаЗаданий.ЗаданиеНаПеревозку Тогда
							ПерекатЗакончен = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если Не ПерекатЗакончен Тогда
						//Оно еще в машине!?)
						ВесПоТочке 		= ВесПоТочке + текСтрокаЗаданий.Вес;
						ОбъемПоТочке	= ОбъемПоТочке + текСтрокаЗаданий.Объем;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли текСтрокаЗаданий.ТочкаМаршрута = текСтрока.ТочкаМаршрута Тогда
				
				Если текСтрокаЗаданий.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту
					ИЛИ текСтрокаЗаданий.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами
					ИЛИ (текСтрокаЗаданий.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.Перекат И ЗначениеЗаполнено(текСтрокаЗаданий.ЗаданиеНаПеревозку.ЗаданиеНаПеревозку))
				Тогда
					//Техника, которая должна быть отгружена именно в данной точке маршрута
					ВесПоТочке 		= ВесПоТочке + текСтрокаЗаданий.Вес;
					ОбъемПоТочке	= ОбъемПоТочке + текСтрокаЗаданий.Объем;
				ИначеЕсли текСтрокаЗаданий.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента Тогда
					ВесВозврата		= ВесВозврата + текСтрокаЗаданий.Вес;
					ОбъемВозврата	= ОбъемВозврата + текСтрокаЗаданий.Объем;
				КонецЕсли;
				
			ИначеЕсли текСтрокаЗаданий.ТочкаМаршрута > текСтрока.ТочкаМаршрута Тогда
				
				Если текСтрокаЗаданий.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту
					ИЛИ текСтрокаЗаданий.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами
				Тогда
					//Техника, которая едет с базы и должна быть отгружена позже
					ВесПоТочке 		= ВесПоТочке + текСтрокаЗаданий.Вес;
					ОбъемПоТочке	= ОбъемПоТочке + текСтрокаЗаданий.Объем;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
			
		текСтрока.Перевес		= 0;
		текСтрока.ПеревесИнфо	= "";
		Разделитель				= "";
		
		текСтрока.Вес			= ВесПоТочке;
		текСтрока.ОстатокВеса	= МаксимальныйВес - текСтрока.Вес;
		Если текСтрока.ОстатокВеса < 0 Тогда
			текСтрока.Перевес = 1;
			текСтрока.ПеревесИнфо	= текСтрока.ПеревесИнфо + Разделитель + НСтр("ru='Превышен максимальный Вес'");
			Разделитель = ", ";
		КонецЕсли;
		
		текСтрока.Объем			= ОбъемПоТочке;
		текСтрока.ОстатокОбъема	= МаксимальныйОбъем - текСтрока.Объем;
		Если текСтрока.ОстатокОбъема < 0 Тогда
			текСтрока.Перевес = 1;
			текСтрока.ПеревесИнфо	= текСтрока.ПеревесИнфо + Разделитель + НСтр("ru='Превышен объем (с учетом коэффициента вместимости)'");
			Разделитель = ", ";
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УпорядочитьСтрокиПоМаршрутам()
	
	//Перенумеруем точки маршрута
	текХодка = -1;
	текНомер = 0;
	Для Каждого текСтрока Из Маршруты Цикл
		
		Если текХодка <> текСтрока.НомерХодки Тогда
			
			текХодка = текСтрока.НомерХодки;
			
			текНомер = 0;
			
		КонецЕсли;
		
		текНомер = текНомер + 1;
		текСтрока.ТочкаМаршрута = текНомер;
		текСтрока.ИзмененАдрес	= Ложь;
		
	КонецЦикла;
	
	//Привяжем заново строки Заданий с маршрутами по АдресуДоставки
	тЗаданияНаПеревозку = Объект.ЗаданияНаПеревозку.Выгрузить();
	Для Каждого текСтрока Из тЗаданияНаПеревозку Цикл
		Для Каждого ТочкаМаршрута Из Маршруты Цикл
			
			Если текСтрока.НомерХодки <> ТочкаМаршрута.НомерХодки Тогда
				Продолжить;
			КонецЕсли;
			
			Если Лев(СокрЛП(текСтрока.АдресДоставки), 1000) = Лев(СокрЛП(ТочкаМаршрута.АдресДоставки), 1000) Тогда
				
				текСтрока.ТочкаМаршрута	= ТочкаМаршрута.ТочкаМаршрута;
				текСтрока.ИзмененАдрес	= Ложь;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	//Упорядочим по ТочкиМаршрута, План время доставки, НомерСтроки
//Рарус Владимир Подрезов 25.07.2017
//	тЗаданияНаПеревозку.Сортировать("НомерХодки, ТочкаМаршрута, КодВидаДоставки, ПланируемоеВремяДоставки, НомерСтроки");
	тЗаданияНаПеревозку.Сортировать("Отменено, Погружено Убыв, ДатаВремяПогрузки, ПланируемоеВремяДоставки, НомерХодки, ТочкаМаршрута, КодВидаДоставки, НомерСтроки");
//Рарус Владимир Подрезов Конец
	текНомер = 0;
	Для Каждого текСтрока Из тЗаданияНаПеревозку Цикл
		
		текНомер = текНомер + 1;
		текСтрока.НомерСтроки = текНомер;
		
	КонецЦикла;
	
	ЗначениеВДанныеФормы(тЗаданияНаПеревозку, Объект.ЗаданияНаПеревозку);
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////
&НаСервере
Процедура ОтобразитьПеревозчика()
	
	Элементы.Перевозчик.Видимость = (Объект.ДоставкуВыполняет = Перечисления.ТипыИсполнителейЗаданийНаПеревозку.Перевозчик);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностью()
	
	//Общее
	
	Элементы.ГруппаОсновное.ТолькоПросмотр	= (Объект.Статус = Перечисления.пкСтатусыДоставки.Закрыто);
	Элементы.ГруппаМаршрут.ТолькоПросмотр	= (Объект.Статус = Перечисления.пкСтатусыДоставки.Закрыто);
	
	Элементы.ГруппаВыполняетВодитель.ТолькоПросмотр	= НЕ (Объект.Статус = Перечисления.пкСтатусыДоставки.Открыто);
	Элементы.ГруппаТранспорт.ТолькоПросмотр			= НЕ (Объект.Статус = Перечисления.пкСтатусыДоставки.Открыто);
	Элементы.Перевозчик.ТолькоПросмотр				= НЕ (Объект.Статус = Перечисления.пкСтатусыДоставки.Открыто);
		
	//Таблица заданий	
	Элементы.ЗаданияНаПеревозку.ИзменятьСоставСтрок	= (Объект.Статус = Перечисления.пкСтатусыДоставки.Открыто);
		
	Элементы.ЗаданияНаПеревозкуЗаданиеНаПеревозку.ТолькоПросмотр		= НЕ (Объект.Статус = Перечисления.пкСтатусыДоставки.Открыто);
	Элементы.ЗаданияНаПеревозкуПланируемоеВремяДоставки.ТолькоПросмотр	= НЕ (Объект.Статус = Перечисления.пкСтатусыДоставки.Открыто);
		
	//Таблица и команды Маршрутов	
	Элементы.Маршруты.ТолькоПросмотр 		= НЕ (Объект.Статус = Перечисления.пкСтатусыДоставки.Открыто);
	Элементы.Маршруты.ИзменятьПорядокСтрок 	= (Объект.Статус = Перечисления.пкСтатусыДоставки.Открыто);
		
	Элементы.МаршрутыКомандаПостроитьМаршрут.Доступность	= (Объект.Статус = Перечисления.пкСтатусыДоставки.Открыто);
	Элементы.МаршрутыКомандаТочкуМаршрутаРаньше.Доступность	= (Объект.Статус = Перечисления.пкСтатусыДоставки.Открыто);
	Элементы.МаршрутыКомандаТочкуМаршрутаПозже.Доступность	= (Объект.Статус = Перечисления.пкСтатусыДоставки.Открыто);
	
	Элементы.табАкты.ТолькоПросмотр							= (Объект.Статус = Перечисления.пкСтатусыДоставки.Открыто);
	Элементы.табАктыКомандаАктыСформировать.Доступность		= (Объект.Статус = Перечисления.пкСтатусыДоставки.Открыто);
	Элементы.табАктыКомандаАктыРасформировать.Доступность	= (Объект.Статус = Перечисления.пкСтатусыДоставки.Открыто);
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
///////////////	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	// {Рарус ognale 2017.01 techlab@rarus.ru 
	// &ЗамерПроизводительности
	ДобавляемыеРеквизиты = Новый Массив; 
    Реквизит = Новый РеквизитФормы("НачалоЗамера", Новый ОписаниеТипов("Число")); 
    ДобавляемыеРеквизиты.Добавить(Реквизит); 
    ИзменитьРеквизиты(ДобавляемыеРеквизиты); 
	//ЭтаФорма.НачалоЗамера = ОценкаПроизводительностиКлиентСервер.ЗначениеТаймера();
	// }Рарус ognale 2017.01 techlab@rarus.ru   
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.ЗаданияНаПеревозкуПланируемоеВремяДоставки);
	            	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
		ОбъектыМетаданных = Новый Массив;
	ОбъектыМетаданных.Добавить(Метаданные.Документы.пкДоставка);
	ОбъектыМетаданных.Добавить(Метаданные.Документы.пкАктПриемкиВозврата);
	//
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = ОбъектыМетаданных;
	//ПараметрыРазмещения.КоманднаяПанель = Элементы.табАктыКоманднаяПанель;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект,ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
///////////////	

	КомандыПечатиАктов	= УправлениеПечатью.СоздатьКоллекциюКомандПечати();
	//КомандыПечатиАктов.Колонки.Добавить("ИмяКомандыНаФорме", Новый ОписаниеТипов("Строка"));
	Документы.пкАктПриемкиВозврата.ДобавитьКомандыПечати(КомандыПечатиАктов);
	ОднаКомандаПечати	= КомандыПечатиАктов.Количество() = 1;
	Для Каждого ОписаниеКомандыПечати Из КомандыПечатиАктов Цикл
		
		НомерКоманды	= ОписаниеКомандыПечати.Владелец().Индекс(ОписаниеКомандыПечати);
		ИмяКоманды		= "ПечатьОбычное_" + ОписаниеКомандыПечати.Идентификатор;
		                
		КомандаФормы	= ЭтаФорма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие					= "Подключаемый_ВыполнитьКомандуПечатиАкта";
		КомандаФормы.Заголовок					= ОписаниеКомандыПечати.Представление;
		КомандаФормы.ИзменяетСохраняемыеДанные	= Ложь;
		КомандаФормы.Отображение				= ОтображениеКнопки.КартинкаИТекст;
		
		Если ЗначениеЗаполнено(ОписаниеКомандыПечати.Картинка) Тогда
			КомандаФормы.Картинка = ОписаниеКомандыПечати.Картинка;
		ИначеЕсли ОднаКомандаПечати Тогда
			КомандаФормы.Картинка = БиблиотекаКартинок.Печать;
		КонецЕсли;
		
		ОписаниеКомандыПечати.ИмяКомандыНаФорме = ИмяКоманды;
		
		НовыйЭлемент	= ЭтаФорма.Элементы.Добавить(Элементы.табАктыГруппаПечатьАктов.Имя + ИмяКоманды, Тип("КнопкаФормы"), Элементы.табАктыГруппаПечатьАктов);
		НовыйЭлемент.Вид		= ВидКнопкиФормы.КнопкаКоманднойПанели;
		НовыйЭлемент.ИмяКоманды	= ИмяКоманды;
		
	КонецЦикла;
	
	АдресКомандПечатиВоВременномХранилище = "АдресКомандПечатиВоВременномХранилище";
	КомандаФормы = ЭтаФорма.Команды.Найти(АдресКомандПечатиВоВременномХранилище);
	Если КомандаФормы = Неопределено Тогда
		КомандаФормы = ЭтаФорма.Команды.Добавить(АдресКомандПечатиВоВременномХранилище);
		КомандаФормы.Действие = ПоместитьВоВременноеХранилище(КомандыПечатиАктов, ЭтаФорма.УникальныйИдентификатор);
	Иначе
		ОбщийСписокКомандПечатиФормы = ПолучитьИзВременногоХранилища(КомандаФормы.Действие);
		Для Каждого КомандаПечати Из КомандыПечатиАктов Цикл
			ЗаполнитьЗначенияСвойств(ОбщийСписокКомандПечатиФормы.Добавить(), КомандаПечати);
		КонецЦикла;
		КомандаФормы.Действие = ПоместитьВоВременноеХранилище(ОбщийСписокКомандПечатиФормы, ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
	
	ОбновитьДанныеШапки();
	ОбновитьДанныеАктов();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьДопДанныеЗаданияНаПеревозку();
	ОбновитьМаршруты();
	ОбновитьДанныеАктов();
	УправлениеДоступностью();
	
	Оповестить("Запись_ЗаданиеНаПеревозку", ПараметрыЗаписи, Объект.Ссылка);

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// {Рарус ognale 2017.01 techlab@rarus.ru 
	//&ЗамерыПроизводительности
	//ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремениСоСмещением("Документ.Доставка.ФормаДокумента.Открытие",ЭтаФорма.НачалоЗамера - ОценкаПроизводительностиКлиентСервер.ЗначениеТаймера());
	// }Рарус ognale 2017.01 techlab@rarus.ru 
	
	ОбновитьДанныеШапки();
	
	ОбновитьДопДанныеЗаданияНаПеревозку();
	ОбновитьМаршруты();
	ОбновитьДанныеАктов();
	ОтобразитьПеревозчика();
	УправлениеДоступностью();
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура ТранспортноеСредствоПриИзменении(Элемент)
	
	ОбновитьДанныеШапки();
	УпорядочитьСтрокиПоМаршрутам();
	ОбновитьДопДанныеМаршрутов();
	
КонецПроцедуры

&НаКлиенте
Процедура ТранспортноеСредствоОчистка(Элемент, СтандартнаяОбработка)
	
	ОбновитьДанныеШапки();
	УпорядочитьСтрокиПоМаршрутам();
	ОбновитьДопДанныеМаршрутов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоставкуВыполняетПриИзменении(Элемент)
	
	ОтобразитьПеревозчика();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоставкуВыполняетОчистка(Элемент, СтандартнаяОбработка)
	
	ОтобразитьПеревозчика();
	
КонецПроцедуры

&НаКлиенте
Процедура ВодительПриИзменении(Элемент)
	
	ВодительПриИзмененииНаСервере();

КонецПроцедуры

&НаСервере
Процедура ВодительПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Водитель) Тогда
		Если ТипЗнч(Объект.Водитель) <> Тип("Строка") Тогда
			Объект.Д_Водитель	= СклонениеПредставленийОбъектов.ПросклонятьПредставлениеПоВсемПадежам(Объект.Водитель.Наименование, Истина).ДательныйПадеж;
			Объект.Д_Документ	= "";
			ЗапросД = Новый Запрос;
			ЗапросД.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
			|	ДокументыФизическихЛицСрезПоследних.Серия,
			|	ДокументыФизическихЛицСрезПоследних.Номер,
			|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи,
			|	ДокументыФизическихЛицСрезПоследних.КемВыдан,
			|	ДокументыФизическихЛицСрезПоследних.Представление
			|ИЗ
			|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(&ДатаДокумента, Физлицо = &Физлицо) КАК ДокументыФизическихЛицСрезПоследних";
			ЗапросД.УстановитьПараметр("ДатаДокумента", КонецДня(Объект.Дата));
			ЗапросД.УстановитьПараметр("Физлицо", Объект.Водитель);
			РезЗапроса = ЗапросД.Выполнить().Выбрать();
			Если РезЗапроса.Следующий() Тогда
				Объект.Д_Документ	= РезЗапроса.Представление;
			КонецЕсли;
		Иначе
			Объект.Д_Водитель	= СклонениеПредставленийОбъектов.ПросклонятьПредставлениеПоВсемПадежам(Объект.Водитель, Истина).ДательныйПадеж;
			Объект.Д_Документ	= "";
		КонецЕсли;
	Иначе
		Объект.Д_Водитель	= "";
		Объект.Д_Документ	= "";
	КонецЕсли;

КонецПроцедуры

/////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура ЗаданияНаПеревозкуПриИзменении(Элемент)
	
	Если Элементы.ЗаданияНаПеревозку.ТекущиеДанные <> Неопределено Тогда
		врВыбранноеЗадание			= Элементы.ЗаданияНаПеревозку.ТекущиеДанные.ЗаданиеНаПеревозку;
		врЗаданиеНаПеревозку		= Элементы.ЗаданияНаПеревозку.ТекущиеДанные.ЗаданиеНаПеревозку;
		врТехника					= Элементы.ЗаданияНаПеревозку.ТекущиеДанные.Техника;
		врПланируемоеВремяДоставки	= Элементы.ЗаданияНаПеревозку.ТекущиеДанные.ПланируемоеВремяДоставки;
		врОтменено					= Элементы.ЗаданияНаПеревозку.ТекущиеДанные.Отменено;
		врПричинаОтмены				= Элементы.ЗаданияНаПеревозку.ТекущиеДанные.ПричинаОтмены;
		врНомерХодки				= Элементы.ЗаданияНаПеревозку.ТекущиеДанные.НомерХодки;
		
		ОбновитьДанныеСтрокиЗаданияНаПеревозку();
		
	КонецЕсли;
	
	ОбновитьДопДанныеЗаданияНаПеревозку();
	ОбновитьДопДанныеМаршрутов();
	ОбновитьДанныеАктов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуПланируемоеВремяДоставкиПриИзменении(Элемент)
	
	УпорядочитьСтрокиПоМаршрутам();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ЗаданияНаПеревозку.ТекущиеДанные <> Неопределено Тогда
		ТекущийМаршрут = Элементы.ЗаданияНаПеревозку.ТекущиеДанные.ТочкаМаршрута;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		Если Маршруты.Количество() = 0 Тогда
			ТекущийНомерХодки = 1;
		КонецЕсли;
		
		Элементы.ЗаданияНаПеревозку.ТекущиеДанные.НомерХодки = ТекущийНомерХодки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	врЗаданиеНаПеревозку = Элемент.ТекущиеДанные.ЗаданиеНаПеревозку;
	
	Если Элемент.ТекущиеДанные.Погружено ИЛИ Элемент.ТекущиеДанные.Выгружено Тогда
		тСообщение = Новый СообщениеПользователю;
		тСообщение.Текст = НСтр("ru='По строке уже отмечены операции погрузки или выгрузки техники. Необходимо сначала отменить их.'");
		тСообщение.Сообщить();
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.АктКоличествоЗаданий > 1 Тогда
		Отказ = Истина;
		ПараметрыОповещения = Новый Структура("УдаляемоеЗадание", врЗаданиеНаПеревозку);
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаданияНаПеревозкуПередУдалениемЗавершение", ЭтаФорма, ПараметрыОповещения), 
			НСтр("ru='Удалить все задания Акта из доставки (Да)'") + Символы.ПС + 
				НСтр("ru=' или отменить удалени и вручную расформировать Акт перед удалением (Нет)?'"), 
			РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Иначе
		ПодключитьОбработчикОжидания("УдалитьЗаданияПеревозкиНаКлиенте", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуПередУдалениемЗавершение(Результат, ПараметрыОповещения) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		УдалитьСвязанныеЗаданияПеревозкиОсвободитьАкт();
	КонецЕсли;
КонецПроцедуры    

&НаКлиенте
Процедура ЗаданияНаПеревозкуПослеУдаления(Элемент)
	
	//Перестроим маршруты
	
	ОбновитьМаршруты();
	УпорядочитьСтрокиПоМаршрутам();
	ОбновитьДопДанныеМаршрутов();
	ОбновитьДанныеАктов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Модифицированность = МодифицированностьПередПогрузкойРазгрузкой;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	врЗаданиеНаПеревозку = Элемент.ТекущиеДанные.ЗаданиеНаПеревозку;
	
	ПодключитьОбработчикОжидания("ПроверитьДобавитьВстречноеЗаданиеПерекатаНаКлиенте", 0.1, Истина);
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////
// Поле Ссылки документы в виде номера: номер - новый реквизит коллекции Объекта типа строка, заполняется программно

&НаКлиенте
Процедура ЗаданияНаПеревозкуЗаданиеНаПеревозкуНомерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Элементы.ЗаданияНаПеревозку.ТекущиеДанные.ЗаданиеНаПеревозку);
	ОткрытьФорму("Документ.пкЗаданиеНаПеревозку.Форма.ФормаВыбораПоОстатку", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуЗаданиеНаПеревозкуОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка	= Ложь;
	
	врЗаданиеНаПеревозку	= Элементы.ЗаданияНаПеревозку.ТекущиеДанные.ЗаданиеНаПеревозку;
	врВыбранноеЗадание		= ВыбранноеЗначение;
	врНомерХодки			= Элементы.ЗаданияНаПеревозку.ТекущиеДанные.НомерХодки;
	
	ПодключитьОбработчикОжидания("ПроверитьВозможностьДобавленияЗаданияНаКлиенте", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуЗаданиеНаПеревозкуНомерОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Элементы.ЗаданияНаПеревозку.ТекущиеДанные.ЗаданиеНаПеревозку);
	ОткрытьФорму("Документ.пкЗаданиеНаПеревозку.Форма.ФормаДокумента", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,Новый ОписаниеОповещения("ОбновитьДанныеФормыПоСсылке", ЭтаФорма, Истина));

КонецПроцедуры

/////////////////////////////////////////////////////////////////////////
&НаСервереБезКонтекста
Процедура СформироватьОперациюПоДоставке(тДоставка, тЗаданиеНаПеревозку, стрОперация, тДатаОперации = "")
	Документы.пкПогрузкаВыгрузкаПоДоставке.СформироватьОперациюПоДоставке(тДоставка, тЗаданиеНаПеревозку, стрОперация,,тДатаОперации);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтменитьОперациюПоДоставке(тДоставка, тЗаданиеНаПеревозку, стрОперация)
	Документы.пкПогрузкаВыгрузкаПоДоставке.ОтменитьОперациюПоДоставке(тДоставка, тЗаданиеНаПеревозку, стрОперация);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущийЭлемент.Имя	= "ЗаданияНаПеревозкуЗаданиеНаПеревозкуНомер" Тогда
		Если Элемент.ТекущиеДанные.Погружено ИЛИ Элемент.ТекущиеДанные.Выгружено Тогда
			тСообщение = Новый СообщениеПользователю;
			тСообщение.Текст = НСтр("ru='По строке уже отмечены операции погрузки или выгрузки техники. Необходимо сначала отменить их.'");
			тСообщение.Сообщить();
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	МодифицированностьПередПогрузкойРазгрузкой = Модифицированность;
	
	Если Элемент.ТекущийЭлемент.Имя = "ЗаданияНаПеревозкуОтменено" 
		ИЛИ Элемент.ТекущийЭлемент.Имя = "ЗаданияНаПеревозкуПричинаОтмены" 
	Тогда
		Если НЕ Элемент.ТекущиеДанные.Отменено Тогда
			Если Элемент.ТекущиеДанные.АктКоличествоЗаданий > 1 Тогда
				Отказ = Истина;
				ПараметрыОповещения = Новый Структура("ОтменяемоеЗадание, Отменять", Элемент.ТекущиеДанные.ЗаданиеНаПеревозку, Истина);
				ПоказатьВопрос(Новый ОписаниеОповещения("ИсключитьЗаданияНаПеревозкуИзАктаНаКлиенте", ЭтаФорма, ПараметрыОповещения), 
					НСтр("ru='Отменить только текущее задание Акта (Да)'") + Символы.ПС + 
						НСтр("ru=' или все задания Акта (Нет)?'"), 
					РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуПогруженоПриИзменении(Элемент)
	
	Если Элементы.ЗаданияНаПеревозку.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ЗаданияНаПеревозку.ТекущиеДанные.Погружено И Элементы.ЗаданияНаПеревозку.ТекущиеДанные.Отменено Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Невозможно выполнить операции погрузки/выгрузки в отмененной строке! Сначала снимите Отмену.'"));
		Элементы.ЗаданияНаПеревозку.ТекущиеДанные.Погружено = Ложь;
		Возврат;
	КонецЕсли;
	
	Если (НЕ Элементы.ЗаданияНаПеревозку.ТекущиеДанные.Погружено) И Элементы.ЗаданияНаПеревозку.ТекущиеДанные.Выгружено Тогда
		//Уже выгружено - нельзя менять погрузку
		Элементы.ЗаданияНаПеревозку.ТекущиеДанные.Погружено = Истина;
		Возврат;
	КонецЕсли;
	
	Если МодифицированностьПередПогрузкойРазгрузкой Тогда
		тФлаг = Элементы.ЗаданияНаПеревозку.ТекущиеДанные.Погружено;
		Попытка
			ЭтаФорма.Записать();
			Элементы.ЗаданияНаПеревозку.ТекущиеДанные.Погружено = тФлаг;
		Исключение
			тСообщение = Новый СообщениеПользователю;
			тСообщение.Текст = ОписаниеОшибки();
			тСообщение.Сообщить();
			
			Элементы.ЗаданияНаПеревозку.ТекущиеДанные.Погружено = Истина;
			Возврат;
			
		КонецПопытки;
	КонецЕсли;
	
	Если Элементы.ЗаданияНаПеревозку.ТекущиеДанные.Погружено Тогда
//Рарус Владимир Подрезов 10.10.2017 3622
		тДата = НачалоДня(ТекущаяДата());
		Если тДата <> НачалоДня(ПолучитьЗначениеРеквизитаНаСервере(Элементы.ЗаданияНаПеревозку.ТекущиеДанные.ЗаданиеНаПеревозку, "ДатаОтгрузки")) Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Внимание: Дата погрузки/выгрузки отличается от даты отгрузки задания!.'"));
		КонецЕсли;
//Рарус Владимир Подрезов Конец
		СформироватьОперациюПоДоставке(Объект.Ссылка, Элементы.ЗаданияНаПеревозку.ТекущиеДанные.ЗаданиеНаПеревозку, "Погрузка");
	Иначе
		ОтменитьОперациюПоДоставке(Объект.Ссылка, Элементы.ЗаданияНаПеревозку.ТекущиеДанные.ЗаданиеНаПеревозку, "Погрузка");
	КонецЕсли;
	ОбновитьДопДанныеЗаданияНаПеревозку();
//Рарус Владимир Подрезов 25.07.2017
	Объект.ЗаданияНаПеревозку.Сортировать("Отменено, Погружено Убыв, ДатаВремяПогрузки, ПланируемоеВремяДоставки, НомерХодки, ТочкаМаршрута, ОчередьВПеревозке, КодВидаДоставки, НомерСтроки");
//Рарус Владимир Подрезов Конец
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуРазгруженоПриИзменении(Элемент)
	
	Если Элементы.ЗаданияНаПеревозку.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ЗаданияНаПеревозку.ТекущиеДанные.Выгружено И Элементы.ЗаданияНаПеревозку.ТекущиеДанные.Отменено Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Невозможно выполнить операции погрузки/выгрузки в отмененной строке! Сначала снимите Отмену.'"));
		Элементы.ЗаданияНаПеревозку.ТекущиеДанные.Выгружено = Ложь;
		Возврат;
	КонецЕсли;
	
	Если (НЕ Элементы.ЗаданияНаПеревозку.ТекущиеДанные.Погружено) И Элементы.ЗаданияНаПеревозку.ТекущиеДанные.Выгружено Тогда
		//Еще на позгружено - нельзя ставиь выгрузку
		Элементы.ЗаданияНаПеревозку.ТекущиеДанные.Выгружено = Ложь;
		Возврат;
	КонецЕсли;
	
	Если МодифицированностьПередПогрузкойРазгрузкой Тогда
		тФлаг = Элементы.ЗаданияНаПеревозку.ТекущиеДанные.Выгружено;
		Попытка
			ЭтаФорма.Записать();
			Элементы.ЗаданияНаПеревозку.ТекущиеДанные.Выгружено = тФлаг;
		Исключение
			тСообщение = Новый СообщениеПользователю;
			тСообщение.Текст = ОписаниеОшибки();
			тСообщение.Сообщить();
			
			Элементы.ЗаданияНаПеревозку.ТекущиеДанные.Выгружено = Ложь;
			
			Возврат;
			
		КонецПопытки;
	КонецЕсли;
	Если Элементы.ЗаданияНаПеревозку.ТекущиеДанные.Выгружено Тогда
//Рарус Владимир Подрезов 10.10.2017 3622
		//тДата = НачалоДня(ТекущаяДата());
		//Если тДата <> НачалоДня(ПолучитьЗначениеРеквизитаНаСервере(Элементы.ЗаданияНаПеревозку.ТекущиеДанные.ЗаданиеНаПеревозку, "ДатаОтгрузки")) Тогда
		//	ПоказатьПредупреждение(,НСтр("ru = 'Внимание: Дата погрузки/выгрузки отличается от даты отгрузки задания!.'"));
		//КонецЕсли;
//Рарус Владимир Подрезов Конец
		СформироватьОперациюПоДоставке(Объект.Ссылка, Элементы.ЗаданияНаПеревозку.ТекущиеДанные.ЗаданиеНаПеревозку, "Выгрузка");
	Иначе
		ОтменитьОперациюПоДоставке(Объект.Ссылка, Элементы.ЗаданияНаПеревозку.ТекущиеДанные.ЗаданиеНаПеревозку, "Выгрузка");
	КонецЕсли;
	ОбновитьДопДанныеЗаданияНаПеревозку();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуВремяПогрузкиПриИзменении(Элемент)
	Если Элементы.ЗаданияНаПеревозку.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ЗаданияНаПеревозку.ТекущиеДанные.Отменено Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Невозможно выполнить операции погрузки/выгрузки в отмененной строке! Сначала снимите Отмену.'"));
		Возврат;
	КонецЕсли;
	
	Если КонецДня(Элементы.ЗаданияНаПеревозку.ТекущиеДанные.ДатаВремяПогрузки) > КонецДня(ТекущаяДата()) Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Невозможно выполнить операции погрузки/выгрузки будущей датой!'"));
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Элементы.ЗаданияНаПеревозку.ТекущиеДанные.ДатаВремяПогрузки) Тогда
//Рарус Владимир Подрезов 10.10.2017 3622
		тДата = НачалоДня(Элементы.ЗаданияНаПеревозку.ТекущиеДанные.ДатаВремяПогрузки);
		Если тДата <> НачалоДня(ПолучитьЗначениеРеквизитаНаСервере(Элементы.ЗаданияНаПеревозку.ТекущиеДанные.ЗаданиеНаПеревозку, "ДатаОтгрузки")) Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Внимание: Дата погрузки/выгрузки отличается от даты отгрузки задания!.'"));
		КонецЕсли;
//Рарус Владимир Подрезов Конец
		СформироватьОперациюПоДоставке(Объект.Ссылка, Элементы.ЗаданияНаПеревозку.ТекущиеДанные.ЗаданиеНаПеревозку, "Погрузка", Элементы.ЗаданияНаПеревозку.ТекущиеДанные.ДатаВремяПогрузки);
	Иначе
		ОтменитьОперациюПоДоставке(Объект.Ссылка, Элементы.ЗаданияНаПеревозку.ТекущиеДанные.ЗаданиеНаПеревозку, "Погрузка");
	КонецЕсли;
	ОбновитьДопДанныеЗаданияНаПеревозку();
//Рарус Владимир Подрезов 25.07.2017
	Объект.ЗаданияНаПеревозку.Сортировать("Отменено, Погружено Убыв, ДатаВремяПогрузки, ПланируемоеВремяДоставки, НомерХодки, ТочкаМаршрута, КодВидаДоставки, НомерСтроки");
//Рарус Владимир Подрезов Конец
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуВремяРазгрузкиПриИзменении(Элемент)
	
	Если Элементы.ЗаданияНаПеревозку.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ЗаданияНаПеревозку.ТекущиеДанные.Отменено Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Невозможно выполнить операции погрузки/выгрузки в отмененной строке! Сначала снимите Отмену.'"));
		Возврат;
	КонецЕсли;
	
	Если КонецДня(Элементы.ЗаданияНаПеревозку.ТекущиеДанные.ДатаВремяВыгрузки) > КонецДня(ТекущаяДата()) Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Невозможно выполнить операции погрузки/выгрузки будущей датой!'"));
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Элементы.ЗаданияНаПеревозку.ТекущиеДанные.ДатаВремяВыгрузки) Тогда
//Рарус Владимир Подрезов 10.10.2017 3622
		//тДата = НачалоДня(Элементы.ЗаданияНаПеревозку.ТекущиеДанные.ДатаВремяВыгрузки);
		//Если тДата <> НачалоДня(ПолучитьЗначениеРеквизитаНаСервере(Элементы.ЗаданияНаПеревозку.ТекущиеДанные.ЗаданиеНаПеревозку, "ДатаОтгрузки")) Тогда
		//	ПоказатьПредупреждение(,НСтр("ru = 'Внимание: Дата погрузки/выгрузки отличается от даты отгрузки задания!.'"));
		//КонецЕсли;
//Рарус Владимир Подрезов Конец
		СформироватьОперациюПоДоставке(Объект.Ссылка, Элементы.ЗаданияНаПеревозку.ТекущиеДанные.ЗаданиеНаПеревозку, "Выгрузка", Элементы.ЗаданияНаПеревозку.ТекущиеДанные.ДатаВремяВыгрузки);
	Иначе
		ОтменитьОперациюПоДоставке(Объект.Ссылка, Элементы.ЗаданияНаПеревозку.ТекущиеДанные.ЗаданиеНаПеревозку, "Выгрузка");
	КонецЕсли;
	
	ОбновитьДопДанныеЗаданияНаПеревозку();
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуОтмененоПриИзменении(Элемент)
	
	Если Элементы.ЗаданияНаПеревозку.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ЗаданияНаПеревозку.ТекущиеДанные.Отменено
		И (Элементы.ЗаданияНаПеревозку.ТекущиеДанные.Погружено ИЛИ Элементы.ЗаданияНаПеревозку.ТекущиеДанные.Выгружено) Тогда
		//Уже есть операции - нельзя отменять
		ПоказатьПредупреждение(,НСтр("ru = 'Невозможно отменить строку, по которой выполнены операции погрузки/выгрузки! Сначала отмените операции.'"));
		Элементы.ЗаданияНаПеревозку.ТекущиеДанные.Отменено = Ложь;
		Возврат;
	КонецЕсли;
	
//Рарус Владимир Подрезов 25.07.2017
	Объект.ЗаданияНаПеревозку.Сортировать("Отменено, Погружено Убыв, ДатаВремяПогрузки, ПланируемоеВремяДоставки, НомерХодки, ТочкаМаршрута, КодВидаДоставки, НомерСтроки");
//Рарус Владимир Подрезов Конец
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////
&НаСервере
Функция ЕстьВозможностьВыбораЗадания()
	
	ЕстьВозможность = Истина;
	
	Если ЗначениеЗаполнено(врВыбранноеЗадание)
		//И ЗначениеЗаполнено(врЗаданиеНаПеревозку)
		И (врВыбранноеЗадание <> врЗаданиеНаПеревозку) 
	Тогда
		Для Каждого текСтрока Из Объект.ЗаданияНаПеревозку Цикл
			Если врВыбранноеЗадание = текСтрока.ЗаданиеНаПеревозку Тогда
				ЕстьВозможность = Ложь;
				тСообщение = Новый СообщениеПользователю;
				тСообщение.Текст = НСтр("ru='Выбранное задание уже присутствует в документе: '") + врВыбранноеЗадание;
				тСообщение.Сообщить();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если врВыбранноеЗадание.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.Перекат Тогда
			
			ЗаданиеОтправитель	= ?(ЗначениеЗаполнено(врВыбранноеЗадание.ЗаданиеНаПеревозку), врВыбранноеЗадание.ЗаданиеНаПеревозку, врВыбранноеЗадание);
			ЗаданиеПолучатель	= ?(ЗначениеЗаполнено(врВыбранноеЗадание.ЗаданиеНаПеревозку), врВыбранноеЗадание, "");
			
			Если Не ЗначениеЗаполнено(ЗаданиеПолучатель) Тогда
				ЗапросП = Новый Запрос;
				ЗапросП.Текст = 
				"ВЫБРАТЬ
				|	пкЗаданиеНаПеревозку.Ссылка
				|ИЗ
				|	Документ.пкЗаданиеНаПеревозку КАК пкЗаданиеНаПеревозку
				|ГДЕ
				|	пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозку
				|	И пкЗаданиеНаПеревозку.Проведен
				|	И НЕ пкЗаданиеНаПеревозку.ПометкаУдаления";
				ЗапросП.УстановитьПараметр("ЗаданиеНаПеревозку", врВыбранноеЗадание);
				РезЗапроса = ЗапросП.Выполнить().Выгрузить();
				
				Для Каждого текСтрока Из РезЗапроса Цикл
					ЗаданиеПолучатель = текСтрока.Ссылка;
				КонецЦикла;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ЗаданиеПолучатель) Тогда
				ЕстьВозможность = Ложь;
				тСообщение = Новый СообщениеПользователю;
				тСообщение.Текст = НСтр("ru='У выбранного переката нет задания-получателя: '") + врВыбранноеЗадание;
				тСообщение.Сообщить();
			КонецЕсли;
			
			Если ЕстьВозможность Тогда
				Для Каждого текСтрока Из Объект.ЗаданияНаПеревозку Цикл
					// не должно быть перекатов навстречу
					Если текСтрока.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.Перекат
						И ЗначениеЗаполнено(текСтрока.ЗаданиеНаПеревозку.ЗаданиеНаПеревозку)//Конец переката - доступны все адреса, по нему и проверяем
						И ЛЕВ(СокрЛП(текСтрока.ЗаданиеНаПеревозку.АдресДоставки), 1000) = ЛЕВ(СокрЛП(ЗаданиеОтправитель.АдресДоставки), 1000) 
						И ЛЕВ(СокрЛП(текСтрока.ЗаданиеНаПеревозку.ЗаданиеНаПеревозку.АдресДоставки), 1000) = ЛЕВ(СокрЛП(ЗаданиеПолучатель.АдресДоставки), 1000) 
						И текСтрока.НомерХодки = врНомерХодки 
					Тогда
						ЕстьВозможность = Ложь;
						тСообщение = Новый СообщениеПользователю;
						тСообщение.Текст = НСтр("ru='В документе присутствует встречный перекат.'");
						тСообщение.Сообщить();
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьВозможность Тогда
			//Нельзя если в акте другой доставки
			тАкт = АктПоЗаданию(врВыбранноеЗадание);
			Если ЗначениеЗаполнено(тАкт) И ЗначениеЗаполнено(тАкт.Доставка) И тАкт.Доставка <> Объект.Ссылка Тогда
				ЕстьВозможность = Ложь;
				тСообщение = Новый СообщениеПользователю;
				тСообщение.Текст = НСтр("ru='По выбранному заданию сформировани акт в другой доставке:'") + тАкт.Доставка;
				тСообщение.Сообщить();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат ЕстьВозможность;
		
КонецФункции

&НаКлиенте
Процедура ПроверитьВозможностьДобавленияЗаданияНаКлиенте()
	
	Если ЕстьВозможностьВыбораЗадания() Тогда
		
		ОбновитьДанныеСтрокиЗаданияНаПеревозку();
		ПроверитьУдалитьВстречноеЗаданиеПереката(врЗаданиеНаПеревозку);
		ПроверитьДобавитьВстречноеЗаданиеПереката(врВыбранноеЗадание);
		
		ПроверитьУдалитьЗаданияСАкта(врЗаданиеНаПеревозку);
		ПроверитьДобавитьЗаданияСАкта(врВыбранноеЗадание);
		
		ОбновитьДопДанныеЗаданияНаПеревозку();
		ОбновитьМаршруты();
		УпорядочитьСтрокиПоМаршрутам();
		ОбновитьДопДанныеМаршрутов();
		ОбновитьДанныеАктов();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьУдалитьВстречноеЗаданиеПереката(тЗаданиеНаПеревозку)
	
	Если Не ЗначениеЗаполнено(тЗаданиеНаПеревозку) Тогда
		Возврат;
	КонецЕсли;
	
	Если тЗаданиеНаПеревозку.ВидОперации <> Перечисления.пкВидыОперацийЗаданийНаПеревозку.Перекат Тогда
		Возврат;
	КонецЕсли;
	
	ВстречныйПерекат = "";
	
	Если ЗначениеЗаполнено(тЗаданиеНаПеревозку.ЗаданиеНаПеревозку) Тогда
		ВстречныйПерекат = тЗаданиеНаПеревозку.ЗаданиеНаПеревозку;
	Иначе
		тЗапрос = Новый Запрос;
		тЗапрос.Текст = 
		"ВЫБРАТЬ
		|	пкЗаданиеНаПеревозку.Ссылка
		|ИЗ
		|	Документ.пкЗаданиеНаПеревозку КАК пкЗаданиеНаПеревозку
		|ГДЕ
		|	пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозку
		|	И НЕ пкЗаданиеНаПеревозку.ПометкаУдаления
		|	И пкЗаданиеНаПеревозку.Проведен";
		тЗапрос.УстановитьПараметр("ЗаданиеНаПеревозку", тЗаданиеНаПеревозку);
		РезЗапроса = тЗапрос.Выполнить().Выгрузить();
		
		Если РезЗапроса.Количество() > 0 Тогда
			ВстречныйПерекат = РезЗапроса[0].Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Если ВстречныйПерекат = "" Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиКУдалению = Новый Массив;
	Для Каждого текСтрока из Объект.ЗаданияНаПеревозку Цикл
		Если текСтрока.ЗаданиеНаПеревозку = ВстречныйПерекат Тогда
			СтрокиКУдалению.Добавить(текСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого текСтрока Из СтрокиКУдалению Цикл
		Объект.ЗаданияНаПеревозку.Удалить(текСтрока);
	КонецЦикла;
	
	ОбновитьДопДанныеЗаданияНаПеревозку();
	ОбновитьМаршруты();
	УпорядочитьСтрокиПоМаршрутам();
	ОбновитьДопДанныеМаршрутов();
	ОбновитьДанныеАктов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДобавитьВстречноеЗаданиеПерекатаНаКлиенте()
	
	//Если перекат проверить/добавить встерчный перекат
	ПроверитьДобавитьВстречноеЗаданиеПереката(врЗаданиеНаПеревозку);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДобавитьВстречноеЗаданиеПереката(тЗаданиеНаПеревозку)
	
	Если Не ЗначениеЗаполнено(тЗаданиеНаПеревозку) Тогда
		Возврат;
	КонецЕсли;
	
	Если тЗаданиеНаПеревозку.ВидОперации <> Перечисления.пкВидыОперацийЗаданийНаПеревозку.Перекат Тогда
		Возврат;
	КонецЕсли;
	
	ВстречныйПерекат = "";
	
	Если ЗначениеЗаполнено(тЗаданиеНаПеревозку.ЗаданиеНаПеревозку) Тогда
		ВстречныйПерекат = тЗаданиеНаПеревозку.ЗаданиеНаПеревозку;
	Иначе
		тЗапрос = Новый Запрос;
		тЗапрос.Текст = 
		"ВЫБРАТЬ
		|	пкЗаданиеНаПеревозку.Ссылка
		|ИЗ
		|	Документ.пкЗаданиеНаПеревозку КАК пкЗаданиеНаПеревозку
		|ГДЕ
		|	пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозку
		|	И НЕ пкЗаданиеНаПеревозку.ПометкаУдаления
		|	И пкЗаданиеНаПеревозку.Проведен";
		тЗапрос.УстановитьПараметр("ЗаданиеНаПеревозку", тЗаданиеНаПеревозку);
		РезЗапроса = тЗапрос.Выполнить().Выгрузить();
		
		Если РезЗапроса.Количество() > 0 Тогда
			ВстречныйПерекат = РезЗапроса[0].Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Если ВстречныйПерекат = "" Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьВДокументе = Ложь;
	Для Каждого текСтрока из Объект.ЗаданияНаПеревозку Цикл
		Если текСтрока.ЗаданиеНаПеревозку = ВстречныйПерекат Тогда
			ЕстьВДокументе = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьВДокументе Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Объект.ЗаданияНаПеревозку.Добавить();
	НоваяСтрока.ЗаданиеНаПеревозку	= ВстречныйПерекат;
	НоваяСтрока.Техника				= ВстречныйПерекат.Техника;
	
	ОбновитьДопДанныеЗаданияНаПеревозку();
	ОбновитьМаршруты();
	УпорядочитьСтрокиПоМаршрутам();
	ОбновитьДопДанныеМаршрутов();
	ОбновитьДанныеАктов();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьУдалитьЗаданияСАкта(тЗаданиеНаПеревозку)
	
	Если Не ЗначениеЗаполнено(тЗаданиеНаПеревозку) Тогда
		Возврат;
	КонецЕсли;
	
	тАкт = АктПоЗаданию(тЗаданиеНаПеревозку);
	Если НЕ ЗначениеЗаполнено(тАкт) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиКУдалению = Новый Массив;
	Для Каждого текСтрока из Объект.ЗаданияНаПеревозку Цикл
		Если текСтрока.ЗаданиеНаПеревозку = тЗаданиеНаПеревозку Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого текСтрокаАтка из тАкт.ЗаданияНаПеревозку Цикл
			Если текСтрока.ЗаданиеНаПеревозку = текСтрокаАтка.ЗаданиеНаПеревозку Тогда
				СтрокиКУдалению.Добавить(текСтрока);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого текСтрока Из СтрокиКУдалению Цикл
		Объект.ЗаданияНаПеревозку.Удалить(текСтрока);
	КонецЦикла;
	
	ОбновитьДопДанныеЗаданияНаПеревозку();
	ОбновитьМаршруты();
	УпорядочитьСтрокиПоМаршрутам();
	ОбновитьДопДанныеМаршрутов();
	ОбновитьДанныеАктов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДобавитьЗаданияСАктаНаКлиенте()
	
	//Если перекат проверить/добавить встерчный перекат
	ПроверитьДобавитьЗаданияСАкта(врЗаданиеНаПеревозку);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДобавитьЗаданияСАкта(тЗаданиеНаПеревозку)
	
	Если Не ЗначениеЗаполнено(тЗаданиеНаПеревозку) Тогда
		Возврат;
	КонецЕсли;
	
	тАкт = АктПоЗаданию(тЗаданиеНаПеревозку);
	Если НЕ ЗначениеЗаполнено(тАкт) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого текСтрокаАтка из тАкт.ЗаданияНаПеревозку Цикл
		Если текСтрокаАтка.ЗаданиеНаПеревозку = тЗаданиеНаПеревозку Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьВДокументе = Ложь;
		Для Каждого текСтрока из Объект.ЗаданияНаПеревозку Цикл
			Если текСтрока.ЗаданиеНаПеревозку = текСтрокаАтка.ЗаданиеНаПеревозку Тогда
				ЕстьВДокументе = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьВДокументе Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Объект.ЗаданияНаПеревозку.Добавить();
		НоваяСтрока.ЗаданиеНаПеревозку	= текСтрокаАтка.ЗаданиеНаПеревозку;
		НоваяСтрока.Техника				= текСтрокаАтка.ЗаданиеНаПеревозку.Техника;
		
	КонецЦикла;
	
	ОбновитьДопДанныеЗаданияНаПеревозку();
	ОбновитьМаршруты();
	УпорядочитьСтрокиПоМаршрутам();
	ОбновитьДопДанныеМаршрутов();
	ОбновитьДанныеАктов();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗаданияПеревозкиНаКлиенте()
	
	УдалитьСвязанныеЗаданияПеревозкиОсвободитьАкт();
	
КонецПроцедуры
	
&НаСервере
Процедура УдалитьСвязанныеЗаданияПеревозкиОсвободитьАкт()
	
	//Проверить/удалить встречные задания переката
	
	Если Не ЗначениеЗаполнено(врЗаданиеНаПеревозку) Тогда
		Возврат;
	КонецЕсли;
	
	//Перекат
	СписокДляУдаления = Новый Массив;
	Для Каждого текСтрока Из Объект.ЗаданияНаПеревозку Цикл
		Если ЗначениеЗаполнено(текСтрока.ЗаданиеНаПеревозку)
			И (текСтрока.ЗаданиеНаПеревозку.ЗаданиеНаПеревозку = врЗаданиеНаПеревозку 
			ИЛИ текСтрока.ЗаданиеНаПеревозку = врЗаданиеНаПеревозку.ЗаданиеНаПеревозку)
		Тогда
			СписокДляУдаления.Добавить(текСтрока);
		КонецЕсли;
	КонецЦикла;
	Для Каждого текСтрока из СписокДляУдаления Цикл
		Объект.ЗаданияНаПеревозку.Удалить(текСтрока);
	КонецЦикла;
	
	//Другие задания акта
	тАкт = АктПоЗаданию(врЗаданиеНаПеревозку);
	СписокДляУдаления = Новый Массив;
	Если ЗначениеЗаполнено(тАкт) Тогда
		Для Каждого текСтрока из Объект.ЗаданияНаПеревозку Цикл
			//Если текСтрока.ЗаданиеНаПеревозку = врЗаданиеНаПеревозку Тогда  //Удаляем все строки акта
			//	Продолжить;
			//КонецЕсли;
			Для Каждого текСтрокаАкта из тАкт.ЗаданияНаПеревозку Цикл
				Если текСтрока.ЗаданиеНаПеревозку = текСтрокаАкта.ЗаданиеНаПеревозку Тогда
					СписокДляУдаления.Добавить(текСтрока);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	//Удалим связанные строки
	Для Каждого текСтрока из СписокДляУдаления Цикл
		Объект.ЗаданияНаПеревозку.Удалить(текСтрока);
	КонецЦикла;
	
	ОбновитьМаршруты();		
	УпорядочитьСтрокиПоМаршрутам();
	ОбновитьДанныеАктов();
	
КонецПроцедуры
	
&НаСервере
Процедура ОбновитьДанныеСтрокиЗаданияНаПеревозку()
	
	Если ЗначениеЗаполнено(врВыбранноеЗадание) Тогда
		Для Каждого текСтрока Из Объект.ЗаданияНаПеревозку Цикл
			
			Если текСтрока.ЗаданиеНаПеревозку <> врЗаданиеНаПеревозку Тогда
				Продолжить;
			КонецЕсли;
			
			Если врЗаданиеНаПеревозку <> врВыбранноеЗадание Тогда
				текСтрока.ЗаданиеНаПеревозку	= врВыбранноеЗадание;
				врЗаданиеНаПеревозку			= текСтрока.ЗаданиеНаПеревозку;
				
			    врТехника						= врВыбранноеЗадание.Техника;
				врПланируемоеВремяДоставки		= врВыбранноеЗадание.ВремяДоставкиПо;
			КонецЕсли;
			
			Если текСтрока.Техника <> врТехника Тогда
				текСтрока.Техника	= врТехника;
			КонецЕсли;
			
			Если текСтрока.ПланируемоеВремяДоставки <> врПланируемоеВремяДоставки Тогда
				Если ЗначениеЗаполнено(врВыбранноеЗадание.ВремяДоставкиПо) Тогда 
					текСтрока.ПланируемоеВремяДоставки 	= врПланируемоеВремяДоставки;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(врЗаданиеНаПеревозку) Тогда
		Возврат;
	КонецЕсли;
	
	Если (врЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.Перекат)
		И ЗначениеЗаполнено(врТехника) 
	Тогда
		
		Для Каждого текСтрока Из Объект.ЗаданияНаПеревозку Цикл
			Если ЗначениеЗаполнено(врЗаданиеНаПеревозку.ЗаданиеНаПеревозку) Тогда 
				Если текСтрока.ЗаданиеНаПеревозку = врЗаданиеНаПеревозку.ЗаданиеНаПеревозку Тогда
					текСтрока.Техника		= врТехника;
				КонецЕсли;
			Иначе
				Если текСтрока.ЗаданиеНаПеревозку.ЗаданиеНаПеревозку = врЗаданиеНаПеревозку Тогда
					текСтрока.Техника		= врТехника;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если (врЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.Перекат) Тогда
		
		Для Каждого текСтрока Из Объект.ЗаданияНаПеревозку Цикл
			Если ЗначениеЗаполнено(врЗаданиеНаПеревозку.ЗаданиеНаПеревозку) Тогда 
				Если текСтрока.ЗаданиеНаПеревозку = врЗаданиеНаПеревозку.ЗаданиеНаПеревозку Тогда
					текСтрока.Отменено		= врОтменено;
					текСтрока.ПричинаОтмены	= врПричинаОтмены;
					текСтрока.НомерХодки	= врНомерХодки;
				КонецЕсли;
			Иначе
				Если текСтрока.ЗаданиеНаПеревозку.ЗаданиеНаПеревозку = врЗаданиеНаПеревозку Тогда
					текСтрока.Отменено		= врОтменено;
					текСтрока.ПричинаОтмены	= врПричинаОтмены;
					текСтрока.НомерХодки	= врНомерХодки;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	тАкт = АктПоЗаданию(врЗаданиеНаПеревозку);
	Если ЗначениеЗаполнено(тАкт) Тогда
		Для Каждого текСтрока из Объект.ЗаданияНаПеревозку Цикл
			Если текСтрока.ЗаданиеНаПеревозку = врЗаданиеНаПеревозку Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого текСтрокаАтка из тАкт.ЗаданияНаПеревозку Цикл
				Если текСтрока.ЗаданиеНаПеревозку = текСтрокаАтка.ЗаданиеНаПеревозку Тогда
					текСтрока.Отменено		= врОтменено;
					текСтрока.ПричинаОтмены	= врПричинаОтмены;
					текСтрока.НомерХодки	= врНомерХодки;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура ЗаданияНаПеревозкуНомерХодкиПриИзменении(Элемент)
	
	Если Элементы.ЗаданияНаПеревозку.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//Нужно переместить в ходку вместе со встречным заданием для Переката
	
	Если ЗначениеЗаполнено(Элементы.ЗаданияНаПеревозку.ТекущиеДанные.ЗаданиеНаПеревозку) 
		И ПолучитьЗначениеРеквизитаНаСервере(Элементы.ЗаданияНаПеревозку.ТекущиеДанные.ЗаданиеНаПеревозку, "ВидОперации") = ПредопределенноеЗначение("Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат") Тогда
		Если ЗначениеЗаполнено(ПолучитьЗначениеРеквизитаНаСервере(Элементы.ЗаданияНаПеревозку.ТекущиеДанные.ЗаданиеНаПеревозку, "ЗаданиеНаПеревозку")) Тогда
			Для Каждого текСтрока из Объект.ЗаданияНаПеревозку Цикл
				Если текСтрока.ЗаданиеНаПеревозку = ПолучитьЗначениеРеквизитаНаСервере(Элементы.ЗаданияНаПеревозку.ТекущиеДанные.ЗаданиеНаПеревозку, "ЗаданиеНаПеревозку") Тогда
					текСтрока.НомерХодки = Элементы.ЗаданияНаПеревозку.ТекущиеДанные.НомерХодки;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого текСтрока из Объект.ЗаданияНаПеревозку Цикл
				Если ПолучитьЗначениеРеквизитаНаСервере(текСтрока.ЗаданиеНаПеревозку, "ЗаданиеНаПеревозку") = Элементы.ЗаданияНаПеревозку.ТекущиеДанные.ЗаданиеНаПеревозку Тогда
					текСтрока.НомерХодки = Элементы.ЗаданияНаПеревозку.ТекущиеДанные.НомерХодки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьМаршруты();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Интерактив Общий

&НаКлиенте
Процедура ОбновитьДанныеФормыПоСсылке(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	                                                                                 
	ОбновитьДопДанныеЗаданияНаПеревозку();
	ОбновитьМаршруты();
	ОбновитьДанныеАктов();
	ОтобразитьПеревозчика();
	УправлениеДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперСсылкаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НужноОбновитьДанныеФормы = Истина;
	
	Если (Поле.Имя = "ЗаданияНаПеревозкуМодель")
	Тогда
	
		текИмяФормы = "Справочник.Номенклатура.Форма.ФормаЭлемента";
		текОбъект	= Элемент.ТекущиеДанные.Модель;
		
		Если ЗначениеЗаполнено(текОбъект) Тогда
			ОткрытьФорму(текИмяФормы, Новый Структура("Ключ", текОбъект), ЭтаФорма,,,,Новый ОписаниеОповещения("ОбновитьДанныеФормыПоСсылке", ЭтаФорма, Истина));
		КонецЕсли;
		
//Рарус Владимир Подрезов 24.10.2017 6791
	ИначеЕсли (Поле.Имя = "ЗаданияНаПеревозкуЗаданиеНаПеревозкуНомер")
	Тогда
		
		текИмяФормы = "Документ.пкЗаданиеНаПеревозку.Форма.ФормаДокумента";
		текОбъект	= Элемент.ТекущиеДанные.ЗаданиеНаПеревозку;
		
		Если ЗначениеЗаполнено(текОбъект) Тогда
			ОткрытьФорму(текИмяФормы, Новый Структура("Ключ", текОбъект), ЭтаФорма,,,,Новый ОписаниеОповещения("ОбновитьДанныеФормыПоСсылке", ЭтаФорма, Истина));
		КонецЕсли;
		
	ИначеЕсли (Поле.Имя = "ЗаданияНаПеревозкуСпособПодходит")
	Тогда
		ЗаданияНаПеревозкуСпособПодходитНажатие(Неопределено, Ложь);
//Рарус Владимир Подрезов Конец
	ИначеЕсли (Поле.Имя = "ЗаданияНаПеревозкуТехника")
	Тогда
	
		текИмяФормы = "Справочник.ОбъектыЭксплуатации.Форма.ФормаЭлемента";
		текОбъект	= Элемент.ТекущиеДанные.Техника;
		
		Если ЗначениеЗаполнено(текОбъект) Тогда
			ОткрытьФорму(текИмяФормы, Новый Структура("Ключ", текОбъект), ЭтаФорма,,,,Новый ОписаниеОповещения("ОбновитьДанныеФормыПоСсылке", ЭтаФорма, Истина));
		КонецЕсли;
		
	ИначеЕсли (Поле.Имя = "ЗаданияНаПеревозкуОбъектСтроительства")
	Тогда
		
		текИмяФормы = "Справочник.СМ_ОбъектыСтроительства.Форма.ФормаЭлемента";
		текОбъект	= Элемент.ТекущиеДанные.ОбъектСтроительства;
		
		Если ЗначениеЗаполнено(текОбъект) Тогда
			ОткрытьФорму(текИмяФормы, Новый Структура("Ключ", текОбъект), ЭтаФорма,,,,Новый ОписаниеОповещения("ОбновитьДанныеФормыПоСсылке", ЭтаФорма, Истина));
		КонецЕсли;
		
	ИначеЕсли (Поле.Имя = "ЗаданияНаПеревозкуКлиент")
	Тогда
		Если ТипЗнч(Элемент.ТекущиеДанные.Клиент) = Тип("СправочникСсылка.Партнеры") Тогда
			
			текИмяФормы = "Справочник.Партнеры.Форма.ФормаЭлемента";
			текОбъект	= Элемент.ТекущиеДанные.Клиент;
			
			Если ЗначениеЗаполнено(текОбъект) Тогда
				ОткрытьФорму(текИмяФормы, Новый Структура("Ключ", текОбъект), ЭтаФорма,,,,Новый ОписаниеОповещения("ОбновитьДанныеФормыПоСсылке", ЭтаФорма, Истина));
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент.ТекущиеДанные.Клиент) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			
			текИмяФормы = "Справочник.СтруктураПредприятия.Форма.ФормаЭлемента";
			текОбъект	= Элемент.ТекущиеДанные.Клиент;
			
			Если ЗначениеЗаполнено(текОбъект) Тогда
				ОткрытьФорму(текИмяФормы, Новый Структура("Ключ", текОбъект), ЭтаФорма,,,,Новый ОписаниеОповещения("ОбновитьДанныеФормыПоСсылке", ЭтаФорма, Истина));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
    
	Если ИсточникВыбора.ИмяФормы = "Обработка.пкПодборТехники.Форма.Форма" Тогда
		// {Рарус ognale 2017.01 techlab@rarus.ru 
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("Документ.Доставка.ФормаДокумента.ОбработкаВыбора из обработки подбора техники");
		// }Рарус ognale 2017.01 techlab@rarus.ru   
		ТекущиеДанные = Элементы.ЗаданияНаПеревозку.ТекущиеДанные;
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ОбъектыЭксплуатации") Тогда
            Если ТекущиеДанные <> Неопределено Тогда
				ЗаданиеНаПеревозку = ТекущиеДанные.ЗаданиеНаПеревозку;
             	ОбработкаПодборТехникиНаСервере(ВыбранноеЗначение, ЗаданиеНаПеревозку);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ВыбраннаяТехника") Тогда
            Если ТекущиеДанные <> Неопределено Тогда
				ЗаданиеНаПеревозку = ТекущиеДанные.ЗаданиеНаПеревозку;
             	ОбработкаПодборТехникиНаСервере(ВыбранноеЗначение.ВыбраннаяТехника, ЗаданиеНаПеревозку);
			КонецЕсли;
        КонецЕсли;    
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.пкЗаданиеНаПеревозку.Форма.ФормаВыбораПоОстатку" Тогда
		ЗаданияНаПеревозкуЗаданиеНаПеревозкуОбработкаВыбора(Элементы.ЗаданияНаПеревозкуЗаданиеНаПеревозку, ВыбранноеЗначение, Истина);
	Иначе
		
		ОбновитьДопДанныеЗаданияНаПеревозку();
		ОбновитьМаршруты();
		ОбновитьДанныеАктов();
		ОтобразитьПеревозчика();
		УправлениеДоступностью();
    КонецЕсли;
    
КонецПроцедуры
    
/////////////////////////////////////////////////////////////////////////
&НаСервере
Функция ЕстьНарушениеОчередностиПерекатаИзТочкиИЛИВТочку(тНомерХодки, тТочкаМаршрута, НоваяТочка)
	
	РезультатПроверки = Ложь;
	
	Для Каждого текСтрока Из Объект.ЗаданияНаПеревозку Цикл
		Если текСтрока.НомерХодки = тНомерХодки
			И текСтрока.ТочкаМаршрута = тТочкаМаршрута
			И ЗначениеЗаполнено(текСтрока.ЗаданиеНаПеревозку)
			И текСтрока.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.Перекат
		Тогда
			Если ЗначениеЗаполнено(текСтрока.ЗаданиеНаПеревозку.ЗаданиеНаПеревозку) Тогда
				//Задание - Оконание Перката: Не должно быть отправителя раньше новой точки
				Для Каждого текКонечнаяСтрока Из Объект.ЗаданияНаПеревозку Цикл
					
					Если ЗначениеЗаполнено(текКонечнаяСтрока.ЗаданиеНаПеревозку)
						И текКонечнаяСтрока.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.Перекат
						И текКонечнаяСтрока.ЗаданиеНаПеревозку = текСтрока.ЗаданиеНаПеревозку.ЗаданиеНаПеревозку 
					Тогда
					
						РезультатПроверки = РезультатПроверки ИЛИ (НЕ текКонечнаяСтрока.ТочкаМаршрута < НоваяТочка) ИЛИ (НЕ текКонечнаяСтрока.НомерХодки <> тНомерХодки);
						
					КонецЕсли;
				КонецЦикла;	
			Иначе
				//Задание - Начало перката: Все окончательные должны быть позже новой точки
				Для Каждого текКонечнаяСтрока Из Объект.ЗаданияНаПеревозку Цикл
					
					Если ЗначениеЗаполнено(текКонечнаяСтрока.ЗаданиеНаПеревозку)
						И текКонечнаяСтрока.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.Перекат
						И текКонечнаяСтрока.ЗаданиеНаПеревозку.ЗаданиеНаПеревозку = текСтрока.ЗаданиеНаПеревозку 
					Тогда
					
						РезультатПроверки = РезультатПроверки ИЛИ (НЕ текКонечнаяСтрока.ТочкаМаршрута > НоваяТочка) ИЛИ (НЕ текКонечнаяСтрока.НомерХодки <> тНомерХодки);
						
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаКлиенте
Процедура КомандаТочкуМаршрутаРаньше(Команда)
	
	Если Элементы.Маршруты.ТекущиеДанные.ЭтоЗаездНаБазу Тогда
		
		текНомеХодки = Элементы.Маршруты.ТекущиеДанные.НомерХодки;
		МинимальныйНомерХодки	= -1;
		МаксимальныНомерХодки	= -1;
		
		Для Каждого текСтрока Из Маршруты Цикл
			Если МинимальныйНомерХодки = -1 Тогда
				МинимальныйНомерХодки = текСтрока.НомерХодки;
			КонецЕсли;
			
			МаксимальныНомерХодки = текСтрока.НомерХодки;
			
		КонецЦикла;
		
		Если текНомеХодки = МинимальныйНомерХодки Тогда
			НовыйНомерХодки = МаксимальныНомерХодки;
		Иначе
			НовыйНомерХодки = текНомеХодки - 1;
		КонецЕсли;
		
		Если текНомеХодки = НовыйНомерХодки Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого текСтрока Из Объект.ЗаданияНаПеревозку Цикл
			Если текСтрока.НомерХодки = текНомеХодки Тогда
				текСтрока.НомерХодки = НовыйНомерХодки;
			ИначеЕсли текСтрока.НомерХодки = НовыйНомерХодки Тогда
				текСтрока.НомерХодки = текНомеХодки;
			КонецЕсли;
		КонецЦикла;
		
		ОбновитьМаршруты();		
		УпорядочитьСтрокиПоМаршрутам();
		
	Иначе
		текИндекс = Маршруты.Индекс(Элементы.Маршруты.ТекущиеДанные);
		
		ИндексПервогоВХодке		= -1;
		ИндексПоследнегоВХодке	= -1;
		Для Каждого текСтрока Из Маршруты Цикл
			Если текСтрока.НомерХодки <> Маршруты[текИндекс].НомерХодки Тогда
				Продолжить;
			КонецЕсли;
			Если ИндексПервогоВХодке = -1 Тогда
				ИндексПервогоВХодке = Маршруты.Индекс(текСтрока);
			КонецЕсли;
			
			ИндексПоследнегоВХодке = Маршруты.Индекс(текСтрока) - 1;
			
		КонецЦикла;
		
		Если текИндекс = ИндексПервогоВХодке Тогда
			новИндекс = ИндексПоследнегоВХодке;
		Иначе
			новИндекс = текИндекс - 1;
		КонецЕсли;
		
		Если текИндекс = новИндекс Тогда
			Возврат;
		КонецЕсли;
		
		Если ЕстьНарушениеОчередностиПерекатаИзТочкиИЛИВТочку(Маршруты[текИндекс].НомерХодки, Маршруты[текИндекс].ТочкаМаршрута, Маршруты[новИндекс].ТочкаМаршрута) Тогда
			тСообщение = Новый СообщениеПользователю;
			тСообщение.Текст = НСтр("ru='Между точками маршрута осуществляется перекат техники, для перекатов движение может быть только в одном направлении.'");
			тСообщение.Сообщить();
			Возврат;
		КонецЕсли;
			
		Маршруты.Сдвинуть(текИндекс, новИндекс - текИндекс);
		УпорядочитьСтрокиПоМаршрутам();
		ОбновитьДопДанныеМаршрутов();
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаТочкуМаршрутаПозже(Команда)
	
	Если Элементы.Маршруты.ТекущиеДанные.ЭтоЗаездНаБазу Тогда
		
		текНомеХодки = Элементы.Маршруты.ТекущиеДанные.НомерХодки;
		МинимальныйНомерХодки	= -1;
		МаксимальныНомерХодки	= -1;
		
		Для Каждого текСтрока Из Маршруты Цикл
			Если МинимальныйНомерХодки = -1 Тогда
				МинимальныйНомерХодки = текСтрока.НомерХодки;
			КонецЕсли;
			
			МаксимальныНомерХодки = текСтрока.НомерХодки;
			
		КонецЦикла;
		
		Если текНомеХодки = МаксимальныНомерХодки Тогда
			НовыйНомерХодки = МинимальныйНомерХодки;
		Иначе
			НовыйНомерХодки = текНомеХодки + 1;
		КонецЕсли;
		
		Если текНомеХодки = НовыйНомерХодки Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого текСтрока Из Объект.ЗаданияНаПеревозку Цикл
			Если текСтрока.НомерХодки = текНомеХодки Тогда
				текСтрока.НомерХодки = НовыйНомерХодки;
			ИначеЕсли текСтрока.НомерХодки = НовыйНомерХодки Тогда
				текСтрока.НомерХодки = текНомеХодки;
			КонецЕсли;
		КонецЦикла;
		
		ОбновитьМаршруты();		
		УпорядочитьСтрокиПоМаршрутам();
		
	Иначе
		текИндекс = Маршруты.Индекс(Элементы.Маршруты.ТекущиеДанные);
		
		ИндексПервогоВХодке		= -1;
		ИндексПоследнегоВХодке	= -1;
		Для Каждого текСтрока Из Маршруты Цикл
			Если текСтрока.НомерХодки <> Маршруты[текИндекс].НомерХодки Тогда
				Продолжить;
			КонецЕсли;
			Если ИндексПервогоВХодке = -1 Тогда
				ИндексПервогоВХодке = Маршруты.Индекс(текСтрока);
			КонецЕсли;
			
			ИндексПоследнегоВХодке = Маршруты.Индекс(текСтрока) - 1;
			
		КонецЦикла;
		
		Если текИндекс = ИндексПоследнегоВХодке Тогда
			новИндекс = ИндексПервогоВХодке;
		Иначе
			новИндекс = текИндекс + 1;
		КонецЕсли;
		
		Если текИндекс = новИндекс Тогда
			Возврат;
		КонецЕсли;
		
		Если ЕстьНарушениеОчередностиПерекатаИзТочкиИЛИВТочку(Маршруты[текИндекс].НомерХодки, Маршруты[текИндекс].ТочкаМаршрута, Маршруты[новИндекс].ТочкаМаршрута) Тогда
			тСообщение = Новый СообщениеПользователю;
			тСообщение.Текст = НСтр("ru='Между точками маршрута осуществляется перекат техники, движение может быть только в одном направлении.'");
			тСообщение.Сообщить();
			Возврат;
		КонецЕсли;
			
		Маршруты.Сдвинуть(текИндекс, новИндекс - текИндекс);
		
	КонецЕсли;
	
	УпорядочитьСтрокиПоМаршрутам();
	ОбновитьДопДанныеМаршрутов();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПостроитьМаршрут(Команда)
	
	ОбновитьМаршруты();
	УпорядочитьСтрокиПоМаршрутам();
	ОбновитьДопДанныеМаршрутов();
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыПриАктивизацииСтроки(Элемент)
	
	Если Элементы.Маршруты.ТекущиеДанные <> Неопределено Тогда
		ТекущийНомерХодки	= Элементы.Маршруты.ТекущиеДанные.НомерХодки;
		ТекущийМаршрут		= Элементы.Маршруты.ТекущиеДанные.ТочкаМаршрута;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПогрузкаВыгрузкаНаМаршруте(Команда)
	
	Если ТекущийНомерХодки = Неопределено ИЛИ ТекущийМаршрут = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ОтразитьПогрузкаВыгрузкаНаМаршруте", ЭтаФорма, Истина), ТекущаяДата(), "Дата погрузки/выгрузки на маршруте", Тип("Дата"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьПогрузкаВыгрузкаНаМаршруте(Значение, ДополнительныеПараметры) Экспорт
	
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КомандаПогрузкаВыгрузкаНаМаршрутеНаСервере(Значение);
	
КонецПроцедуры

&НаСервере
Процедура КомандаПогрузкаВыгрузкаНаМаршрутеНаСервере(тДатаОперации = "")
	
	Если тДатаОперации = "" Тогда
		тДатаОперации = ТекущаяДата();
	КонецЕсли;
	
	тОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.пкДоставка"));
	
	ЗначениеВДанныеФормы(тОбъект, Объект);
	
	Для Каждого текСтрока Из Объект.ЗаданияНаПеревозку Цикл
		
		Если Не ЗначениеЗаполнено(текСтрока.ЗаданиеНаПеревозку) Тогда
			Продолжить;
		КонецЕсли;
		
		Если текСтрока.Отменено Тогда
			Продолжить;
		КонецЕсли;
		
		Если текСтрока.НомерХодки <> ТекущийНомерХодки Тогда
			Продолжить;
		КонецЕсли;
		
		Если текСтрока.ТочкаМаршрута <> ТекущийМаршрут Тогда
			Продолжить;
		КонецЕсли;
		
		Если текСтрока.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту
			ИЛИ текСтрока.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами
			ИЛИ текСтрока.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.Перекат И ЗначениеЗаполнено(текСтрока.ЗаданиеНаПеревозку.ЗаданиеНаПеревозку)
		Тогда
			Документы.пкПогрузкаВыгрузкаПоДоставке.СформироватьОперациюПоДоставке(Объект.Ссылка, текСтрока.ЗаданиеНаПеревозку, "Выгрузка",, тДатаОперации);
		ИначеЕсли текСтрока.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.Перекат И НЕ ЗначениеЗаполнено(текСтрока.ЗаданиеНаПеревозку.ЗаданиеНаПеревозку) Тогда
			Документы.пкПогрузкаВыгрузкаПоДоставке.СформироватьОперациюПоДоставке(Объект.Ссылка, текСтрока.ЗаданиеНаПеревозку, "Погрузка",, тДатаОперации);
		ИначеЕсли текСтрока.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента Тогда
			Документы.пкПогрузкаВыгрузкаПоДоставке.СформироватьОперациюПоДоставке(Объект.Ссылка, текСтрока.ЗаданиеНаПеревозку, "Погрузка",, тДатаОперации);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьДопДанныеЗаданияНаПеревозку();
	ОбновитьМаршруты();
	ОбновитьДанныеАктов();
	ОтобразитьПеревозчика();
	УправлениеДоступностью();
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура КомандаВыездСБазы(Команда)
	
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ОтразитьВыездСБазу", ЭтаФорма, Истина), ТекущаяДата(), "Дата выезда с базы", Тип("Дата"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьВыездСБазу(Значение, ДополнительныеПараметры) Экспорт
	
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если КонецДня(Значение) > КонецДня(ТекущаяДата()) Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Невозможно отметить выезд с базы будущей датой!'"));
		Возврат;
	КонецЕсли;
	
	КомандаВыездСБазыНаСервере(Значение);
	Этаформа.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура КомандаВыездСБазыНаСервере(тДатаОперации = "")
	
	Если тДатаОперации = "" Тогда
		тДатаОперации = ТекущаяДата();
	КонецЕсли;
	
	тОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.пкДоставка"));
	
	Если Не ЗначениеЗаполнено(тОбъект.НачалоРейсаФакт) Тогда
		тОбъект.НачалоРейсаФакт = тДатаОперации;
	КонецЕсли;
	
	ЗначениеВДанныеФормы(тОбъект, Объект);
	Модифицированность = Истина;
	
	Для Каждого текСтрока Из Объект.ЗаданияНаПеревозку Цикл
		
		Если Не ЗначениеЗаполнено(текСтрока.ЗаданиеНаПеревозку) Тогда
			Продолжить;
		КонецЕсли;
		
		Если текСтрока.Отменено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(текСтрока.ЗаданиеНаПеревозку.ЗаданиеНаПеревозку) Тогда
			Продолжить;
		КонецЕсли;
		
		Если текСтрока.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту
			ИЛИ текСтрока.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами
		Тогда
			Документы.пкПогрузкаВыгрузкаПоДоставке.СформироватьОперациюПоДоставке(Объект.Ссылка, текСтрока.ЗаданиеНаПеревозку, "Погрузка",,тДатаОперации);
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьДопДанныеЗаданияНаПеревозку();
	ОбновитьМаршруты();
	ОбновитьДанныеАктов();
	ОтобразитьПеревозчика();
	УправлениеДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПогрузкаРазгрузка(Команда)
	
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ОтразитьПогрузкаРазгрузка", ЭтаФорма, Истина), ТекущаяДата(), "Дата погрузки/разгрузки", Тип("Дата"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьПогрузкаРазгрузка(Значение, ДополнительныеПараметры) Экспорт
	
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если КонецДня(Значение) > КонецДня(ТекущаяДата()) Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Невозможно отметить погрузку/выгрузку будущей датой!'"));
		Возврат;
	КонецЕсли;
	
	КомандаПогрузкаРазгрузкаНаСервере(Значение);
	Этаформа.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура КомандаПогрузкаРазгрузкаНаСервере(тДатаОперации = "")
	
	Если тДатаОперации = "" Тогда
		тДатаОперации = ТекущаяДата();
	КонецЕсли;
	
	тОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.пкДоставка"));
	
	Если Не ЗначениеЗаполнено(тОбъект.НачалоРейсаФакт) Тогда
		тОбъект.НачалоРейсаФакт = тДатаОперации;
	КонецЕсли;
	
	ЗначениеВДанныеФормы(тОбъект, Объект);
	Модифицированность = Истина;
	
	Для Каждого текСтрока Из Объект.ЗаданияНаПеревозку Цикл
		
		Если Не ЗначениеЗаполнено(текСтрока.ЗаданиеНаПеревозку) Тогда
			Продолжить;
		КонецЕсли;
		
		Если текСтрока.Отменено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(текСтрока.ЗаданиеНаПеревозку.ЗаданиеНаПеревозку) Тогда
			Продолжить;
		КонецЕсли;
		
		Если текСтрока.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту
			ИЛИ текСтрока.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами
			ИЛИ текСтрока.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.Перекат
		Тогда
			Если ЗначениеЗаполнено(текСтрока.ДатаВремяПогрузки) И текСтрока.ДатаВремяПогрузки > тДатаОперации Тогда
				тСообщение = Новый СообщениеПользователю;
				тСообщение.Текст = НСтр("ru='Погрузка по строке:'") + текСтрока.НомерСтроки + НСтр("ru=' отмечена позже выгрузки! Вгрузка не произведена.'");
				тСообщение.Сообщить();
				Продолжить;
			КонецЕсли;
			Документы.пкПогрузкаВыгрузкаПоДоставке.СформироватьОперациюПоДоставке(Объект.Ссылка, текСтрока.ЗаданиеНаПеревозку, "Выгрузка",,тДатаОперации);
		ИначеЕсли текСтрока.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента Тогда
			Документы.пкПогрузкаВыгрузкаПоДоставке.СформироватьОперациюПоДоставке(Объект.Ссылка, текСтрока.ЗаданиеНаПеревозку, "Погрузка",, тДатаОперации);
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьДопДанныеЗаданияНаПеревозку();
	ОбновитьМаршруты();
	ОбновитьДанныеАктов();
	ОтобразитьПеревозчика();
	УправлениеДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПриездНаБазу(Команда)
	
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ОтразитьПриездНаБазу", ЭтаФорма, Истина), ТекущаяДата(), "Дата прибытия на базу", Тип("Дата"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьПриездНаБазу(Значение, ДополнительныеПараметры) Экспорт
	
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если КонецДня(Значение) > КонецДня(ТекущаяДата()) Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Невозможно отметить приезд на базу будущей датой!'"));
		Возврат;
	КонецЕсли;
	
	КомандаПриездНаБазуНаСервере(Значение);
	
КонецПроцедуры

&НаСервере
Процедура КомандаПриездНаБазуНаСервере(тДатаОперации = "")
	
	Если тДатаОперации = "" Тогда
		тДатаОперации = ТекущаяДата();
	КонецЕсли;
	
	тОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.пкДоставка"));
	
	Если Не ЗначениеЗаполнено(тОбъект.ОкончаниеРейсаПлан) Тогда
		тОбъект.ОкончаниеРейсаПлан = тДатаОперации;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(тОбъект.НачалоРейсаФакт) Тогда
		тОбъект.НачалоРейсаФакт = тДатаОперации;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(тОбъект.ОкончаниеРейсаФакт) Тогда
		тОбъект.ОкончаниеРейсаФакт = тДатаОперации;
	КонецЕсли;
	
	ЗначениеВДанныеФормы(тОбъект, Объект);
	Модифицированность = Истина;
	
	Для Каждого текСтрока Из Объект.ЗаданияНаПеревозку Цикл
		
		Если Не ЗначениеЗаполнено(текСтрока.ЗаданиеНаПеревозку) Тогда
			Продолжить;
		КонецЕсли;
		
		Если текСтрока.Отменено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(текСтрока.ЗаданиеНаПеревозку.ЗаданиеНаПеревозку) Тогда
			Продолжить;
		КонецЕсли;
		
		Документы.пкПогрузкаВыгрузкаПоДоставке.СформироватьОперациюПоДоставке(Объект.Ссылка, текСтрока.ЗаданиеНаПеревозку, "Выгрузка",, тДатаОперации);
		
	КонецЦикла;
	
	ОбновитьДопДанныеЗаданияНаПеревозку();
	ОбновитьМаршруты();
	ОбновитьДанныеАктов();
	ОтобразитьПеревозчика();
	УправлениеДоступностью();
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////
// Подбор/замена техники

&НаКлиенте
Процедура КомандаПодобратьТехнику(Команда)
	
	ТекущиеДанные = Элементы.ЗаданияНаПеревозку.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ЗаданиеНаПеревозку) Тогда
		// {Рарус ilkond 2017.03.22 techlab@rarus.ru
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремениСКомментарием(
			"Обработка.пкПодборТехники.Форма: Открытие формы", СтрШаблон("Документ.пкДоставка.ФормаДокумента.Команды.КомандаПодобратьТехнику (%1/%2)", Объект.Номер, Объект.Дата));
		// }Рарус ilkond 2017.03.22 techlab@rarus.ru 
		Доставка				= Объект.Ссылка;
		Модель					= ПолучитьЗначениеРеквизитаНаСервере(ТекущиеДанные.ЗаданиеНаПеревозку, "Модель");
		Если ЗначениеЗаполнено(ПолучитьЗначениеРеквизитаНаСервере(ТекущиеДанные.ЗаданиеНаПеревозку,"ЗаявкаНаАрендуТехники")) Тогда
			Клиент				= ПолучитьЗначениеРеквизитаНаСервере(ПолучитьЗначениеРеквизитаНаСервере(ТекущиеДанные.ЗаданиеНаПеревозку,"ЗаявкаНаАрендуТехники"),"Партнер");
			ОбъектСтроительства	= ПолучитьЗначениеРеквизитаНаСервере(ПолучитьЗначениеРеквизитаНаСервере(ТекущиеДанные.ЗаданиеНаПеревозку,"ЗаявкаНаАрендуТехники"),"ОбъектСтроительства");
		Иначе
			Клиент				= "";
			ОбъектСтроительства	= "";
        КонецЕсли;
        
        Местонахождения = Неопределено;
        ВидДоставки     = "ДоставкаКлиенту";
        ВидОперации     = ПолучитьЗначениеРеквизитаНаСервере(ТекущиеДанные.ЗаданиеНаПеревозку, "ВидОперации");
        
        Если ВидОперации = ПредопределенноеЗначение("Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента") Тогда
            Местонахождения = ОбъектСтроительства;  
            ВидДоставки     = "Возврат";
        КонецЕсли;    
		
		ПараметрЗаголовок = НСтр("ru = 'Подбор техники в документ %Документ%'");
		Если ЗначениеЗаполнено(Доставка) Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Доставка);
		Иначе
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='доставку'"));
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",           ПараметрЗаголовок);
		ПараметрыФормы.Вставить("Дата",                ТекущаяДата());
		ПараметрыФормы.Вставить("Документ",            Доставка);
		ПараметрыФормы.Вставить("ИзменениеСтроки",     Истина);
		ПараметрыФормы.Вставить("Модель",              Модель);
		ПараметрыФормы.Вставить("Клиент",              Клиент);
		ПараметрыФормы.Вставить("ОбъектСтроительства", ОбъектСтроительства);
		ПараметрыФормы.Вставить("Местонахождения",     Местонахождения);
		ПараметрыФормы.Вставить("КоличествоПоМодели",  1);
		ПараметрыФормы.Вставить("ИсключаемаяТехника",  ПолучитьИсключаемуюТехннику());
		ПараметрыФормы.Вставить("КодФормы",            ВидДоставки);
        
        Если ВидДоставки = "Возврат" Тогда
		    ПараметрыФормы.Вставить("ЗаявкаНаАрендуТехники", ПолучитьЗначениеРеквизитаНаСервере(ТекущиеДанные.ЗаданиеНаПеревозку,"ЗаявкаНаАрендуТехники"));
        КонецЕсли;    
		
		ОткрытьФорму("Обработка.пкПодборТехники.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;    
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИсключаемуюТехннику()
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   пкЗаданиеНаПеревозку.Техника
    |ИЗ
    |   Документ.пкЗаданиеНаПеревозку КАК пкЗаданиеНаПеревозку
    |ГДЕ
    |   НЕ пкЗаданиеНаПеревозку.Проведен
    |   И НЕ пкЗаданиеНаПеревозку.ПометкаУдаления
    |   И пкЗаданиеНаПеревозку.Ссылка В(&ЗаданияНаПеревозку)
    |
    |СГРУППИРОВАТЬ ПО
    |   пкЗаданиеНаПеревозку.Техника";
    
    Запрос.УстановитьПараметр("ЗаданияНаПеревозку", Объект.ЗаданияНаПеревозку.Выгрузить(, "ЗаданиеНаПеревозку"));
        
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    ИсключаемаяТехника = Новый Массив();
    
    Пока Выборка.Следующий() Цикл
        ИсключаемаяТехника.Добавить(Выборка.Техника);    
    КонецЦикла;
    
    Возврат ИсключаемаяТехника;
    
КонецФункции 

&НаСервере
Процедура ОбработкаПодборТехникиНаСервере(ВыбраннаяТехника, ЗаданиеНаПеревозку)
	                                                                                 
	Если Не ЗначениеЗаполнено(ЗаданиеНаПеревозку) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	НачатьТранзакцию();
	
	тОбъект = ЗаданиеНаПеревозку.ПолучитьОбъект();
	//тОбъект.Модель	= ВыбранноеЗначение.ВыбораннаяМодель;
	тОбъект.Техника	= ВыбраннаяТехника;
	Попытка
		тОбъект.Записать(?(тОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись), РежимПроведенияДокумента.Неоперативный);
	Исключение
		тСообщение = Новый СообщениеПользователю;
		тСообщение.Текст = ОписаниеОшибки();
		тСообщение.Сообщить();
		Отказ = Истина;
	КонецПопытки;
	
	Если Не Отказ Тогда
		Попытка
			Записать();
		Исключение
			тСообщение = Новый СообщениеПользователю;
			тСообщение.Текст = ОписаниеОшибки();
			тСообщение.Сообщить();
			Отказ = Истина;
		КонецПопытки;
	КонецЕсли;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
		
		ОбновитьДопДанныеЗаданияНаПеревозку();
		ОбновитьМаршруты();
		ОбновитьДанныеАктов();
		ОтобразитьПеревозчика();
		УправлениеДоступностью();
	КонецЕсли;
	
КонецПроцедуры

//Рарус Владимир Подрезов 24.10.2017 6791
/////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура ЗаданияНаПеревозкуСпособПодходитНажатие(Элемент, СтандартнаяОбработка)
	
	Если Элементы.ЗаданияНаПеревозку.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ЗаданияНаПеревозку.ТекущиеДанные.СпособПодходит <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Элементы.ЗаданияНаПеревозку.ТекущиеДанные.ЗаданиеНаПеревозку) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СпособДоставки) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура("ЗаданиеНаПеревозку, СпособДоставки", Элементы.ЗаданияНаПеревозку.ТекущиеДанные.ЗаданиеНаПеревозку, Объект.СпособДоставки);
	ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаРезультатаЗаменаСпособаДоставки", ЭтаФорма, ПараметрыОповещения), 
		НСтр("ru='Установить в задание на перевозку '") + СокрЛП(Элементы.ЗаданияНаПеревозку.ТекущиеДанные.ЗаданиеНаПеревозку) + НСтр("ru=' способ доставки '") + СокрЛП(Объект.СпособДоставки) + "?", 
		РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаЗаменаСпособаДоставки(Результат, ПараметрыОповещения) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаменитьСпособДоставкиВЗадании(ПараметрыОповещения.ЗаданиеНаПеревозку, ПараметрыОповещения.СпособДоставки);
		ОповеститьОбИзменении(ПараметрыОповещения.ЗаданиеНаПеревозку);	
		ОбновитьДопДанныеЗаданияНаПеревозку();
	КонецЕсли;
КонецПроцедуры    

&НаСервере
Процедура ЗаменитьСпособДоставкиВЗадании(лЗаданиеНаПеревозку, лСпособДоставки) Экспорт
	
	тОбъект = лЗаданиеНаПеревозку.ПолучитьОбъект();
	тОбъект.СпособДоставки = лСпособДоставки;
	Попытка
		тОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	Исключение
		тСообщение = Новый СообщениеПользователю;
		тСообщение.Текст = ОписаниеОшибки();
		тСообщение.Сообщить();
	КонецПопытки;
КонецПроцедуры    
//Рарус Владимир Подрезов Конец

/////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
// {Рарус ognale 2017.01 techlab@rarus.ru 
	// &ЗамерПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
			"Документ.Доставка.ФормаДокумента.Проведение");
	Иначе
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
			"Документ.Доставка.ФормаДокумента.Запись");
	КонецЕсли;
// }Рарус ognale 2017.01 techlab@rarus.ru    

//Рарус Владимир Подрезов	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение 
		И Объект.Статус = ПредопределенноеЗначение("Перечисление.пкСтатусыДоставки.Закрыто") Тогда
		Для Каждого текСтрока Из Объект.ЗаданияНаПеревозку Цикл
			Если текСтрока.Отменено Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не текСтрока.Погружено Тогда
				тСообщение = Новый СообщениеПользователю;
				тСообщение.Текст = НСтр("ru='Не выполнена операция погрузки по не отмененной строке: '") + текСтрока.НомерСтроки;
				тСообщение.Сообщить();
				Отказ = Истина;
			КонецЕсли;
			
			Если Не текСтрока.Выгружено Тогда
				тСообщение = Новый СообщениеПользователю;
				тСообщение.Текст = НСтр("ru='Не выполнена операция выгрузки по не отмененной строке: '") + текСтрока.НомерСтроки;
				тСообщение.Сообщить();
				Отказ = Истина;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Для Каждого текСтрока Из Объект.ЗаданияНаПеревозку Цикл
			Если текСтрока.Отменено Тогда
				Продолжить;
			КонецЕсли;
			
			Если текСтрока.Погружено И текСтрока.Выгружено 
				И текСтрока.ДатаВремяПогрузки >= текСтрока.ДатаВремяВыгрузки
			Тогда
				тСообщение = Новый СообщениеПользователю;
				тСообщение.Текст = НСтр("ru='Нарушена последовательность погрузки/выгрузки в строке: '") + текСтрока.НомерСтроки;
				тСообщение.Сообщить();
				Отказ = Истина;
			КонецЕсли;
//++ Рарус Лимаренко 06.03.2018 Задача №9618
		ДатаОтгрузкиСтр = ПолучитьЗначениеРеквизитаНаСервере(текСтрока.ЗаданиеНаПеревозку, "ДатаОтгрузки");	
		Если текСтрока.Погружено И ДатаОтгрузкиСтр > текСтрока.ДатаВремяПогрузки Тогда
				тСообщение = Новый СообщениеПользователю;
				тСообщение.Текст = НСтр("ru='Дата запланированной отгрузки позже фактической в строке: '") + текСтрока.НомерСтроки;
				тСообщение.Сообщить();
				Отказ = Истина;
			КонецЕсли;
//-- Рарус Лимаренко 06.03.2018
			
			
			
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		МассивЗаданийСНеправильнойДатойОтгрузки = Новый Массив;
		
		Для Каждого текСтрока Из Объект.ЗаданияНаПеревозку Цикл
			Если текСтрока.Отменено Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(текСтрока.ЗаданиеНаПеревозку) Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ текСтрока.Погружено Тогда
				Продолжить;
			КонецЕсли;
			
			Если текСтрока.ДатаВремяПогрузки < ПолучитьЗначениеРеквизитаНаСервере(текСтрока.ЗаданиеНаПеревозку, "ДатаОтгрузки") Тогда
				
				тСообщение = Новый СообщениеПользователю;
				тСообщение.Текст = НСтр("ru='Нельзя выполнять отгрузку раньше указанной в задании на перевозку даты отгрузки, в строке: '") + текСтрока.НомерСтроки;
				тСообщение.Сообщить();
				
				Отказ = Истина;
				
				МассивЗаданийСНеправильнойДатойОтгрузки.Добавить(Новый Структура("ЗаданиеНаПеревозку, ДатаПогрузки", текСтрока.ЗаданиеНаПеревозку, текСтрока.ДатаВремяПогрузки));
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивЗаданийСНеправильнойДатойОтгрузки.Количество() > 0 Тогда
			ПараметрыОповещения = Новый Структура("МассивЗаданийСНеправильнойДатойОтгрузки", МассивЗаданийСНеправильнойДатойОтгрузки);
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаРезультатаЗаменаДатыОтгрузки", ЭтаФорма, ПараметрыОповещения), 
				НСтр("ru='Изменить дату отгрузки в задании на дату погрузки в доставке (Да)'") + Символы.ПС + 
				НСтр("ru=' или вернуться и вручную исправить дату погрузки в доставке (Нет)?'"), 
				РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
		И НЕ ВсеАктыСформированы() Тогда
		ПоказатьПредупреждение(,НСтр("ru='Не по всем заданиям на перевозку сформированы акты приемки/возврата.'"));
		//Отказ = Истина;
	КонецЕсли;
//Рарус Владимир Подрезов Конец
	
//Рарус Владимир Подрезов 09.10.2017 4285
//Проврека порадка Выгрузка, затем погрузка для неявного переката (способ погрузки: перекат на объекте) по технике
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Для Каждого текСтрока Из Объект.ЗаданияНаПеревозку Цикл
			Если текСтрока.Отменено Тогда
				Продолжить;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(текСтрока.ЗаданиеНаПеревозку) Тогда
				Продолжить;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ПолучитьЗначениеРеквизитаНаСервере(текСтрока.ЗаданиеНаПеревозку, "Техника")) Тогда
				Продолжить;
			КонецЕсли;
			Если ПолучитьЗначениеРеквизитаНаСервере(текСтрока.ЗаданиеНаПеревозку, "СпособДоставки") <> ПредопределенноеЗначение("Перечисление.СпособыДоставки.пкПерекатНаОбъекте") Тогда
				Продолжить;
			КонецЕсли;
			Если ПолучитьЗначениеРеквизитаНаСервере(текСтрока.ЗаданиеНаПеревозку, "ВидОперации") <> ПредопределенноеЗначение("Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента") Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого текСтрокаОтгрузки Из Объект.ЗаданияНаПеревозку Цикл
				Если текСтрокаОтгрузки.Отменено Тогда
					Продолжить;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(текСтрокаОтгрузки.ЗаданиеНаПеревозку) Тогда
					Продолжить;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ПолучитьЗначениеРеквизитаНаСервере(текСтрокаОтгрузки.ЗаданиеНаПеревозку, "Техника")) Тогда
					Продолжить;
				КонецЕсли;
				Если ПолучитьЗначениеРеквизитаНаСервере(текСтрокаОтгрузки.ЗаданиеНаПеревозку, "Техника") <> ПолучитьЗначениеРеквизитаНаСервере(текСтрока.ЗаданиеНаПеревозку, "Техника") Тогда
					Продолжить;
				КонецЕсли;
				Если ПолучитьЗначениеРеквизитаНаСервере(текСтрокаОтгрузки.ЗаданиеНаПеревозку, "СпособДоставки") <> ПредопределенноеЗначение("Перечисление.СпособыДоставки.пкПерекатНаОбъекте") Тогда
					Продолжить;
				КонецЕсли;
				Если ПолучитьЗначениеРеквизитаНаСервере(текСтрокаОтгрузки.ЗаданиеНаПеревозку, "ВидОперации") <> ПредопределенноеЗначение("Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту") Тогда
					Продолжить;
				КонецЕсли;
				
				Если текСтрокаОтгрузки.Погружено И текСтрока.Выгружено 
					И текСтрокаОтгрузки.ДатаВремяПогрузки < текСтрока.ДатаВремяВыгрузки
				Тогда
					тСообщение = Новый СообщениеПользователю;
					тСообщение.Текст = НСтр("ru='Нарушена последовательность погрузки/выгрузки при неявном перекате на объекте в строке: '") + текСтрока.НомерСтроки + 
						Символы.ПС + НСтр("ru='Возврат должен быть выгружен раньше погрузки доставки клиенту в строке:'") + текСтрокаОтгрузки.НомерСтроки;
					тСообщение.Сообщить();
					Отказ = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 10.10.2017 4500
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Для Каждого текСтрока Из Объект.ЗаданияНаПеревозку Цикл
			Если текСтрока.Отменено Тогда
				Продолжить;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(текСтрока.ЗаданиеНаПеревозку) Тогда
				Продолжить;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ПолучитьЗначениеРеквизитаНаСервере(текСтрока.ЗаданиеНаПеревозку, "ЗаявкаНаАрендуТехники")) Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ПолучитьЗначениеРеквизитаНаСервере(ПолучитьЗначениеРеквизитаНаСервере(текСтрока.ЗаданиеНаПеревозку, "ЗаявкаНаАрендуТехники"), "Подтверждена") Тогда
				тСообщение = Новый СообщениеПользователю;
				тСообщение.Текст = НСтр("ru='Нельзя производить отгрузку техники по не подтвержденной заявке в строке: '") + текСтрока.НомерСтроки ;
				тСообщение.Сообщить();
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 10.10.2017 5099
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
	
		Если ЗначениеЗаполнено(Объект.СпособДоставки) 
			И ЗначениеЗаполнено(Объект.ТранспортноеСредство)
			И ТипЗнч(Объект.ТранспортноеСредство) = Тип("СправочникСсылка.ТранспортныеСредства")
			И ЗначениеЗаполнено(ПолучитьЗначениеРеквизитаНаСервере(Объект.ТранспортноеСредство, "пкСпособДоставки"))
			И Объект.СпособДоставки <> ПолучитьЗначениеРеквизитаНаСервере(Объект.ТранспортноеСредство, "пкСпособДоставки") 
		Тогда
			тСообщение = Новый СообщениеПользователю;
			тСообщение.Текст = НСтр("ru='Внимание!: Указаный в документе способ доставки не соответствует способу Транспортного средства.'");
			тСообщение.Сообщить();
		КонецЕсли;
	
		Для Каждого текСтрока Из Объект.ЗаданияНаПеревозку Цикл
			Если текСтрока.Отменено Тогда
				Продолжить;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(текСтрока.ЗаданиеНаПеревозку) Тогда
				Продолжить;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ПолучитьЗначениеРеквизитаНаСервере(текСтрока.ЗаданиеНаПеревозку, "СпособДоставки")) Тогда
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(Объект.СпособДоставки) 
				И ЗначениеЗаполнено(Объект.ТранспортноеСредство)
				И ТипЗнч(Объект.ТранспортноеСредство) = Тип("СправочникСсылка.ТранспортныеСредства")
				И ЗначениеЗаполнено(ПолучитьЗначениеРеквизитаНаСервере(Объект.ТранспортноеСредство, "пкСпособДоставки"))
				И ПолучитьЗначениеРеквизитаНаСервере(текСтрока.ЗаданиеНаПеревозку, "СпособДоставки") <> ПолучитьЗначениеРеквизитаНаСервере(Объект.ТранспортноеСредство, "пкСпособДоставки") 
			Тогда
				тСообщение = Новый СообщениеПользователю;
				тСообщение.Текст = НСтр("ru='Внимание!: Указаный в документе способ доставки не соответствует способу задания в строке: '") + текСтрока.НомерСтроки ;
				тСообщение.Сообщить();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 10.10.2017 3622
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Для Каждого текСтрока Из Объект.ЗаданияНаПеревозку Цикл
			Если текСтрока.Отменено Тогда
				Продолжить;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(текСтрока.ЗаданиеНаПеревозку) Тогда
				Продолжить;
			КонецЕсли;
			Если НачалоДня(текСтрока.ДатаВремяПогрузки) <> НачалоДня(ПолучитьЗначениеРеквизитаНаСервере(текСтрока.ЗаданиеНаПеревозку, "ДатаОтгрузки")) Тогда
				тСообщение = Новый СообщениеПользователю;
				тСообщение.Текст = НСтр("ru = 'Внимание: Дата погрузки отличается от даты отгрузки задания в строке: '") + текСтрока.НомерСтроки;
				тСообщение.Сообщить();
			КонецЕсли;
			//Если НачалоДня(текСтрока.ДатаВремяВыгрузки) <> НачалоДня(ПолучитьЗначениеРеквизитаНаСервере(текСтрока.ЗаданиеНаПеревозку, "ДатаОтгрузки")) Тогда
			//	тСообщение = Новый СообщениеПользователю;
			//	тСообщение.Текст = НСтр("ru = 'Внимание: Дата выгрузки отличается от даты отгрузки задания в строке: '") + текСтрока.НомерСтроки;
			//	тСообщение.Сообщить();
			//КонецЕсли;
		КонецЦикла;
	КонецЕсли;
//Рарус Владимир Подрезов Конец

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаЗаменаДатыОтгрузки(Результат, ПараметрыОповещения) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаменитьДатыОтгрузкиВЗаданиях(ПараметрыОповещения.МассивЗаданийСНеправильнойДатойОтгрузки);
	КонецЕсли;
КонецПроцедуры    

&НаСервереБезКонтекста
Процедура ЗаменитьДатыОтгрузкиВЗаданиях(МассивЗаданий) Экспорт
	
	Для Каждого текСтрока Из МассивЗаданий Цикл
		
		тОбъект = текСтрока.ЗаданиеНаПеревозку.ПолучитьОбъект();
		тОбъект.ДатаОтгрузки = текСтрока.ДатаПогрузки;
		Попытка
			тОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		Исключение
			тСообщение = Новый СообщениеПользователю;
			тСообщение.Текст = ОписаниеОшибки();
			тСообщение.Сообщить();
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры    

&НаСервере
Функция ВсеАктыСформированы()
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВсеАктыЕсть = Истина;
	
	СписокЗаданияНаПеревозку = Новый СписокЗначений;
	Для Каждого текСтрока Из Объект.ЗаданияНаПеревозку Цикл
		Если текСтрока.Отменено Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(текСтрока.ЗаданиеНаПеревозку) Тогда
			Продолжить;
		КонецЕсли;
		
		СписокЗаданияНаПеревозку.Добавить(текСтрока.ЗаданиеНаПеревозку);
		
	КонецЦикла;
	
	ЗапросАкты = Новый Запрос;
	ЗапросАкты.Текст = 
	"ВЫБРАТЬ
	|	пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка КАК Акт,
	|	пкАктПриемкиВозвратаЗаданияНаПеревозку.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку
	|ИЗ
	|	Документ.пкАктПриемкиВозврата.ЗаданияНаПеревозку КАК пкАктПриемкиВозвратаЗаданияНаПеревозку
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкАктПриемкиВозврата КАК пкАктПриемкиВозврата
	|		ПО пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка = пкАктПриемкиВозврата.Ссылка
	|			И (пкАктПриемкиВозврата.Доставка = &Доставка)
	|ГДЕ
	|	НЕ пкАктПриемкиВозврата.ПометкаУдаления
	|	И пкАктПриемкиВозврата.Доставка = &Доставка
	|	И пкАктПриемкиВозвратаЗаданияНаПеревозку.ЗаданиеНаПеревозку В(&ЗаданияНаПеревозку)";
	ЗапросАкты.УстановитьПараметр("Доставка", Объект.Ссылка);
	ЗапросАкты.УстановитьПараметр("ЗаданияНаПеревозку", СписокЗаданияНаПеревозку);
	тАкты = ЗапросАкты.Выполнить().Выгрузить();
	Для Каждого текСтрока Из СписокЗаданияНаПеревозку Цикл
		НайденныеАкты = тАкты.НайтиСтроки(Новый Структура("ЗаданиеНаПеревозку", текСтрока.Значение));
		Если НайденныеАкты.Количество() = 0 Тогда
			ВсеАктыЕсть = Ложь;
			тСообщение = Новый СообщениеПользователю;
			тСообщение.Текст = НСтр("ru='Не сформирован/переформирован Акт для задания:'") + текСтрока.Значение;
			тСообщение.Сообщить();
		Иначе
			Для Каждого текАкт Из НайденныеАкты Цикл
				Для Каждого текСтрокаАкта Из текАкт.Акт.ЗаданияНаПеревозку Цикл
					Если СписокЗаданияНаПеревозку.НайтиПоЗначению(текСтрокаАкта.ЗаданиеНаПеревозку) = Неопределено Тогда
						//Акт содержит задание, которого нет в доставке
						ВсеАктыЕсть = Ложь;
						тСообщение = Новый СообщениеПользователю;
						тСообщение.Текст = Строка(текАкт.Акт) + НСтр("ru=' содержит:'") + 
							Строка(текСтрокаАкта.ЗаданиеНаПеревозку) + НСтр("ru=', которого нет в доставке!'");
						тСообщение.Сообщить();
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВсеАктыЕсть;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ОбновитьДанныеАктов()
	
	текТабАкты = ДанныеФормыВЗначение(табАкты, Тип("ТаблицаЗначений"));
	
	текТабАкты.Очистить();
	
	СписокЗаданий = Новый СписокЗначений;
	Для Каждого текСтрокаЗаданий Из Объект.ЗаданияНаПеревозку Цикл
		Если текСтрокаЗаданий.Отменено Тогда
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(текСтрокаЗаданий.ЗаданиеНаПеревозку) Тогда
			Продолжить;
		КонецЕсли;
		СписокЗаданий.Добавить(текСтрокаЗаданий.ЗаданиеНаПеревозку);
	КонецЦикла;
	
	ЗапросАкты = Новый Запрос;
	ЗапросАкты.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка
	|ИЗ
	|	Документ.пкАктПриемкиВозврата.ЗаданияНаПеревозку КАК пкАктПриемкиВозвратаЗаданияНаПеревозку
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкАктПриемкиВозврата КАК пкАктПриемкиВозврата
	|		ПО пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка = пкАктПриемкиВозврата.Ссылка
	|ГДЕ
	|	пкАктПриемкиВозвратаЗаданияНаПеревозку.ЗаданиеНаПеревозку В(&ЗаданияНаПеревозку)";
	ЗапросАкты.УстановитьПараметр("ЗаданияНаПеревозку", СписокЗаданий);
	РезЗапроса = ЗапросАкты.Выполнить().Выбрать();
	
	Пока РезЗапроса.Следующий() Цикл
		НоваяСтрока = текТабАкты.Добавить();
		НоваяСтрока.Ссылка			= РезЗапроса.Ссылка;
		Если РезЗапроса.Ссылка.ПометкаУдаления Тогда
			НоваяСтрока.Картинка	= 1;
		ИначеЕсли РезЗапроса.Ссылка.Проведен Тогда
			НоваяСтрока.Картинка	= 0;
		Иначе
			НоваяСтрока.Картинка	= 0;//2;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ЗапросАкты = Новый Запрос;
		ЗапросАкты.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	пкАктПриемкиВозврата.Ссылка
		|ИЗ
		|	Документ.пкАктПриемкиВозврата КАК пкАктПриемкиВозврата
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкАктПриемкиВозврата.ЗаданияНаПеревозку КАК пкАктПриемкиВозвратаЗаданияНаПеревозку
		|		ПО (пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка = пкАктПриемкиВозврата.Ссылка)
		|ГДЕ
		|	пкАктПриемкиВозврата.Доставка = &Доставка
		|
		|СГРУППИРОВАТЬ ПО
		|	пкАктПриемкиВозврата.Ссылка
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(ЕСТЬNULL(пкАктПриемкиВозвратаЗаданияНаПеревозку.ЗаданиеНаПеревозку, 0)) = 0";
		ЗапросАкты.УстановитьПараметр("Доставка", Объект.Ссылка);
		РезЗапроса = ЗапросАкты.Выполнить().Выбрать();
		
		Пока РезЗапроса.Следующий() Цикл
			НайденныеСтроки = текТабАкты.НайтиСтроки(Новый Структура("Ссылка", РезЗапроса.Ссылка));
			Если НайденныеСтроки.Количетво() > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = текТабАкты.Добавить();
			НоваяСтрока.Ссылка			= РезЗапроса.Ссылка;
			Если РезЗапроса.Ссылка.ПометкаУдаления Тогда
				НоваяСтрока.Картинка	= 1;
			ИначеЕсли РезЗапроса.Ссылка.Проведен Тогда
				НоваяСтрока.Картинка	= 0;
			Иначе
				НоваяСтрока.Картинка	= 0;//2;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗначениеВДанныеФормы(текТабАкты, табАкты);
	
	УстановитьНомераАктовВЗаданияхНаПеревозку();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНомераАктовВЗаданияхНаПеревозку()
	
	Для Каждого текСтрокаЗадания Из Объект.ЗаданияНаПеревозку Цикл
		текСтрокаЗадания.АктНомер				= "";
		текСтрокаЗадания.АктКоличествоЗаданий	= 0;
	КонецЦикла;
	
	Для Каждого текАтк Из табАкты Цикл
		Для Каждого текСтрока Из текАтк.Ссылка.ЗаданияНаПеревозку Цикл
			
			НайденныеСтроки = Объект.ЗаданияНаПеревозку.НайтиСтроки(Новый Структура("ЗаданиеНаПеревозку", текСтрока.ЗаданиеНаПеревозку));
			
			Для Каждого текСтрокаЗадания Из НайденныеСтроки Цикл
				текСтрокаЗадания.АктНомер				= текАтк.Ссылка.Номер;
				текСтрокаЗадания.АктКоличествоЗаданий	= текАтк.Ссылка.ЗаданияНаПеревозку.Количество();
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьАктыНаСерврере()
	
	тОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.пкДоставка"));
	тОбъект.СформироватьАктыПриемаПередачи(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаАктыСформировать(Команда)
	
	Если Модифицированность ИЛИ НЕ Объект.Проведен Тогда
		ПоказатьПредупреждение(,НСтр("ru='Перед формированием Актов необходимо сохранить изменения и провести документ.'"));
		Возврат;
	КонецЕсли;
	
	СформироватьАктыНаСерврере();
	
	ОбновитьДанныеАктов();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаАктыРасформировать(Команда)
	
	ТекущиеДанные = Элементы.табАкты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекущиеДанные.Акт = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура("Акт", ТекущиеДанные.Акт);
	ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаРезультатаРасформироватьАкт", ЭтаФорма, ПараметрыОповещения), 
		НСтр("ru='Расформировать документ?'") + ПараметрыОповещения.Акт, 
		РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаРасформироватьАкт(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		РасформироватьАктНаСервере(ПараметрыОповещения.Акт);
	КонецЕсли;
	
	ОбновитьДанныеАктов();
	
КонецПроцедуры    

&НаСервереБезКонтекста
Процедура РасформироватьАктНаСервере(врАкт)
	
	Если Не ЗначениеЗаполнено(врАкт) Тогда
		Возврат;
	КонецЕсли;
	
	обАкт = врАкт.ПолучитьОбъект();
	Попытка
		обАкт.УстановитьПометкуУдаления(Истина);
	Исключение
		тСообщение = Новый СообщениеПользователю;
		тСообщение.Текст = ОписаниеОшибки();
		тСообщение.Сообщить();
	КонецПопытки;
	
	обАкт.ЗаданияНаПеревозку.Очистить();
	обАкт.Доставка = Документы.пкДоставка.ПустаяСсылка();
	Попытка
		обАкт.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		тСообщение = Новый СообщениеПользователю;
		тСообщение.Текст = ОписаниеОшибки();
		тСообщение.Сообщить();
	КонецПопытки;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура КомандаЗаданииеВАктУдалить(Команда)
	
	Если Элементы.ЗаданияНаПеревозку.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ЗаданияНаПеревозку.ТекущиеДанные.АктКоличествоЗаданий > 0 Тогда
		ПараметрыОповещения = Новый Структура("ОтменяемоеЗадание, Отменять", Элементы.ЗаданияНаПеревозку.ТекущиеДанные.ЗаданиеНаПеревозку, Ложь);
		ПоказатьВопрос(Новый ОписаниеОповещения("ИсключитьЗаданияНаПеревозкуИзАктаНаКлиенте", ЭтаФорма, ПараметрыОповещения), 
			НСтр("ru='Удалить задание из Акта?'"), 
			РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьЗаданияНаПеревозкуИзАктаНаКлиенте(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИсключитьЗаданиеИзАктаНаСервере(ПараметрыОповещения.ОтменяемоеЗадание);
		ОбновитьДанныеАктов();
	КонецЕсли;
	
	Если ПараметрыОповещения.Отменять Тогда
		
		МожноОтменять = (НЕ Элементы.ЗаданияНаПеревозку.ТекущиеДанные.Погружено 
							И НЕ Элементы.ЗаданияНаПеревозку.ТекущиеДанные.Выгружено);
		
		Если МожноОтменять И ЗначениеЗаполнено(Элементы.ЗаданияНаПеревозку.ТекущиеДанные.АктНомер) Тогда		
			Для Каждого текСтрока Из Объект.ЗаданияНаПеревозку Цикл
				Если текСтрока.ЗаданиеНаПеревозку = Элементы.ЗаданияНаПеревозку.ТекущиеДанные.ЗаданиеНаПеревозку Тогда
					Продолжить;
				КонецЕсли;
				
				Если текСтрока.АктНомер = Элементы.ЗаданияНаПеревозку.ТекущиеДанные.АктНомер
					И (текСтрока.Погружено 
						ИЛИ текСтрока.Выгружено)
				Тогда
					МожноОтменять = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если МожноОтменять Тогда
			Элементы.ЗаданияНаПеревозку.ТекущиеДанные.Отменено = Истина;
			ЗаданияНаПеревозкуПриИзменении(Элементы.ЗаданияНаПеревозку);
		Иначе
			ПоказатьПредупреждение(,НСтр("ru = 'Невозможно отменить строку, в акте с которой есть строки с выполнеными операциями погрузки/выгрузки!'") + Символы.ПС +
				НСтр("ru = 'Сначала отмените операции погрузки/выгрузки по всем строкам Акта.'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры    

&НаСервереБезКонтекста
Процедура ИсключитьЗаданиеИзАктаНаСервере(ОтменяемоеЗадание)
	
	Если НЕ ЗначениеЗаполнено(ОтменяемоеЗадание) Тогда
		Возврат;
	КонецЕсли;
	
	тАкт = АктПоЗаданию(ОтменяемоеЗадание);
	Если НЕ ЗначениеЗаполнено(тАкт) Тогда
		Возврат;
	КонецЕсли;
	
	обАкт = тАкт.ПолучитьОбъект();
	Изменили = Ложь;
	
	СтрокиДляУдалени = Новый СписокЗначений;
	Для Каждого текСтрока Из обАкт.ЗаданияНаПеревозку Цикл
		Если текСтрока.ЗаданиеНаПеревозку = ОтменяемоеЗадание Тогда
			СтрокиДляУдалени.Добавить(текСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого текСтрока Из СтрокиДляУдалени Цикл
		обАкт.ЗаданияНаПеревозку.Удалить(текСтрока.Значение);
		Изменили = Истина;
	КонецЦикла;
	
	Если Изменили Тогда
		Попытка
			обАкт.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			тСообщение = Новый СообщениеПользователю;
			тСообщение.Текст = ОписаниеОшибки();
			тСообщение.Сообщить();
		КонецПопытки;
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаданииеВАктДобавить(Команда)
	
	Если Модифицированность ИЛИ НЕ Объект.Проведен Тогда
		ПоказатьПредупреждение(,НСтр("ru='Перед формированием Актов необходимо сохранить изменения и провести документ.'"));
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ЗаданияНаПеревозку.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.АктКоличествоЗаданий > 0 Тогда
		ПоказатьПредупреждение(,"Задание уже в Акте!");
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ЗаданиеНаПеревозку) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗаданиеНаПеревозку",		ТекущиеДанные.ЗаданиеНаПеревозку);
		ПараметрыФормы.Вставить("КлючДоставка",				Объект.Ссылка);
		ПараметрыФормы.Вставить("КлючНомерХодки",			ТекущиеДанные.НомерХодки);
		ПараметрыФормы.Вставить("КлючПриемкаВозврат",		?(ПолучитьЗначениеРеквизитаНаСервере(ТекущиеДанные.ЗаданиеНаПеревозку, "ВидОперации") = ПредопределенноеЗначение("Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту")
			ИЛИ ПолучитьЗначениеРеквизитаНаСервере(ТекущиеДанные.ЗаданиеНаПеревозку, "ВидОперации") = ПредопределенноеЗначение("Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами")
			ИЛИ (ПолучитьЗначениеРеквизитаНаСервере(ТекущиеДанные.ЗаданиеНаПеревозку, "ВидОперации") = ПредопределенноеЗначение("Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат")
				И ЗначениеЗаполнено(ПолучитьЗначениеРеквизитаНаСервере(ТекущиеДанные.ЗаданиеНаПеревозку, "ЗаданиеНаПеревозку"))), 
			ПредопределенноеЗначение("Перечисление.пкПриемкаВозврат.Приемка"), 
			ПредопределенноеЗначение("Перечисление.пкПриемкаВозврат.Возврат")));
		ПараметрыФормы.Вставить("КлючПартнер",				?(ЗначениеЗаполнено(ПолучитьЗначениеРеквизитаНаСервере(ТекущиеДанные.ЗаданиеНаПеревозку, "ЗаявкаНаАрендуТехники")), 
			ПолучитьЗначениеРеквизитаНаСервере(ПолучитьЗначениеРеквизитаНаСервере(ТекущиеДанные.ЗаданиеНаПеревозку, "ЗаявкаНаАрендуТехники"), "Партнер"), 
			ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка")));
		ПараметрыФормы.Вставить("КлючДоговор",				?(ЗначениеЗаполнено(ПолучитьЗначениеРеквизитаНаСервере(ТекущиеДанные.ЗаданиеНаПеревозку, "ЗаявкаНаАрендуТехники")), 
			ПолучитьЗначениеРеквизитаНаСервере(ПолучитьЗначениеРеквизитаНаСервере(ТекущиеДанные.ЗаданиеНаПеревозку,"ЗаявкаНаАрендуТехники"), "Договор"), 
			ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка")));
		ПараметрыФормы.Вставить("КлючОбъектСтроительства",	?(ЗначениеЗаполнено(ПолучитьЗначениеРеквизитаНаСервере(ТекущиеДанные.ЗаданиеНаПеревозку, "ЗаявкаНаАрендуТехники")), 
			ПолучитьЗначениеРеквизитаНаСервере(ПолучитьЗначениеРеквизитаНаСервере(ТекущиеДанные.ЗаданиеНаПеревозку, "ЗаявкаНаАрендуТехники"), "ОбъектСтроительства"), 
			ПредопределенноеЗначение("Справочник.СМ_ОбъектыСтроительства.ПустаяСсылка")));
		ПараметрыФормы.Вставить("КлючАдресДоставки",		СокрЛП(ПолучитьЗначениеРеквизитаНаСервере(ТекущиеДанные.ЗаданиеНаПеревозку, "АдресДоставки")));
		ПараметрыФормы.Вставить("КлючКонтактноеЛицо",		ПолучитьЗначениеРеквизитаНаСервере(ТекущиеДанные.ЗаданиеНаПеревозку, "КонтактноеЛицо"));
		ПараметрыФормы.Вставить("КлючПодразделение",		ПолучитьЗначениеРеквизитаНаСервере(ТекущиеДанные.ЗаданиеНаПеревозку, "Подразделение"));
		ПараметрыФормы.Вставить("НовыйСуществующий",		0);
		
		ПараметрыФормы.Вставить("ТочкаМаршрута",			ТекущиеДанные.ТочкаМаршрута);
		
		ПараметрыФормы.Вставить("Транспортировка",			ТекущиеДанные.Транспортировка);
		ПараметрыФормы.Вставить("СтоимостьАренды",			ТекущиеДанные.СтоимостьАренды);
		
		ОткрытьФорму("Документ.пкДоставка.Форма.ФормаДобавитьЗаданиеВАкт", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,
			Новый ОписаниеОповещения("ЗаконченоДобавлениеВАкт", ЭтаФорма, Новый Структура));
	КонецЕсли;    
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаконченоДобавлениеВАкт(Результат, ПараметрыОповещения) Экспорт
	
	ОбновитьДанныеАктов();
	
КонецПроцедуры    

/////////////////////////////////////////////////////////////////////////

&НаСервереБезКонтекста
Функция АктПоЗаданию(тЗаданиеНаПеревозку)
	
	Если Не ЗначениеЗаполнено(тЗаданиеНаПеревозку) Тогда
		Возврат Документы.пкАктПриемкиВозврата.ПустаяСсылка();
	КонецЕсли;
	
	ЗапросАкты = Новый Запрос;
	ЗапросАкты.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка
	|ИЗ
	|	Документ.пкАктПриемкиВозврата.ЗаданияНаПеревозку КАК пкАктПриемкиВозвратаЗаданияНаПеревозку
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкАктПриемкиВозврата КАК пкАктПриемкиВозврата
	|		ПО пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка = пкАктПриемкиВозврата.Ссылка
	|ГДЕ
	|	пкАктПриемкиВозвратаЗаданияНаПеревозку.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозку";
	ЗапросАкты.УстановитьПараметр("ЗаданиеНаПеревозку", тЗаданиеНаПеревозку);
	РезЗапроса = ЗапросАкты.Выполнить().Выбрать();
	
	Если РезЗапроса.Следующий() Тогда
		Возврат РезЗапроса.Ссылка;
	Иначе
		Возврат Документы.пкАктПриемкиВозврата.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечатиАкта(Команда)
	
	Если Элементы.табАкты.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Элементы.табАкты);
		
КонецПроцедуры

//Рарус Владимир Подрезов 25.20.2017 6813
&НаКлиенте
Процедура табАктыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "табАктыАктпкПрикрепленыФайлыВДО" Тогда
		
		СтандартнаяОбработка = Ложь;
		Если Элементы.табАкты.ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		//Если ПолучитьЗначениеРеквизитаНаСервере(Элементы.табАкты.ТекущиеДанные.Акт, "пкПрикрепленыФайлыВДО") = 0 Тогда
		//	Возврат;
		//КонецЕсли;
		
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ПрисоединенныеФайлы", 
			Новый Структура("ВладелецФайла", Элементы.табАкты.ТекущиеДанные.Ссылка), 
			ЭтаФорма);
			
	ИначеЕсли Поле.Имя = "табАктыАкт" Тогда
		
		СтандартнаяОбработка = Ложь;
		Если Элементы.табАкты.ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		текИмяФормы = "Документ.пкАктПриемкиВозврата.Форма.ФормаДокумента";
        текОбъект	= Элементы.табАкты.ТекущиеДанные.Ссылка;
        
        Если ЗначениеЗаполнено(текОбъект) Тогда
            ОткрытьФорму(текИмяФормы, Новый Структура("Ключ", текОбъект), ЭтаФорма);
        КонецЕсли;
			
	КонецЕсли;
		
КонецПроцедуры
//Рарус Владимир Подрезов Конец

