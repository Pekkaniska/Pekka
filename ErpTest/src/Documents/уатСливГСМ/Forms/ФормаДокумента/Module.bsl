
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	об = РеквизитФормыВЗначение("Объект");
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(об, Отказ, СтандартнаяОбработка, ЭтаФорма, ДопПараметрыОткрытие);
	ЗначениеВРеквизитФормы(Об,"Объект");
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	уатОбщегоНазначенияСервер.ЗаполнитьШапкуДокумента(
		Объект,
		,
		Параметры.ЗначениеКопирования,
		Параметры.Основание,
		,
		,
		,
		Параметры.ЗначенияЗаполнения
	);
	
	//заполнение при вводе из путевого листа
	Если Параметры.Свойство("ДобавлениеСливаИзПЛ") И Параметры.ДобавлениеСливаИзПЛ = Истина Тогда
		ДобавлениеСливаИзПЛ = Истина;
		
		ДокОбъект = РеквизитФормыВЗначение("Объект");
		
		ДокОбъект.Заполнить(Параметры.ПутевойЛист);
		Если Параметры.Свойство("СливКопирование") И ТипЗнч(Параметры.СливКопирование) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(ДокОбъект, Параметры.СливКопирование);
			ДокОбъект.ПутевойЛист = Параметры.ПутевойЛист;
		КонецЕсли;
		
		ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	КонецЕсли;
	
	//заполнение при редактировании из путевого листа
	Если Параметры.Свойство("РедактированиеСливаИзПЛ") И Параметры.РедактированиеСливаИзПЛ = Истина Тогда
		РедактированиеСливаИзПЛ = Истина;
	КонецЕсли;
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	ДатаДокумента = уатОбщегоНазначения.уатДатаБезСекунд(ДатаДокумента);
	
	Если Параметры.Ключ.Пустая() Тогда 
		Если (Параметры.Основание = Неопределено ИЛИ ТипЗнч(Параметры.Основание) <> Тип("ДокументСсылка.уатИнвентаризацияГСМвТС"))
			И НЕ ДобавлениеСливаИзПЛ Тогда 
			Объект.АЗС = Справочники.уатАЗС.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ТСПриемник.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ТранспортныеСредства");
	Элементы.ТСПриемник.ДоступныеТипы   = Новый ОписаниеТипов("СправочникСсылка.ТранспортныеСредства");
	Элементы.АЗС.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатАЗС");
	Элементы.АЗС.ДоступныеТипы   = Новый ОписаниеТипов("СправочникСсылка.уатАЗС");
	
	ОстатокГСМвТС = ПолучитьОстатокГСМнсТС(Объект.ТС, Объект.ГСМ, Объект.Дата);
	
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.Подразделение, "Объект.Организация");
	
	ОбновитьНомерТС();
	
	Если Объект.ПутевойЛист.Рассчитан Или Объект.ПутевойЛистПриемник.Рассчитан Тогда 
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	// УправлениеПредприятием.СлужебныеПодсистемы
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	// Конец УправлениеПредприятием.СлужебныеПодсистемы
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ОбновитьНомерТС();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьНомерТС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	мТиповойДокумент = Неопределено;
	мОписаниеПредупреждения = "";
	Если НЕ Объект.Ссылка.Пустая() И уатТиповыеДокументы.НайтиТиповойДокументДляДокументаУАТ(Объект.Ссылка, мТиповойДокумент, мОписаниеПредупреждения) Тогда
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект), мОписаниеПредупреждения, 10);
		Возврат;
	КонецЕсли;
	
	ПриОткрытииФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(ДополнительныеПараметры) Экспорт
	
	ТолькоПросмотр = Истина;
	Элементы.НомерТС.ТолькоПросмотр = Истина;
	Элементы.Операция.Доступность = Ложь;
	
	ПриОткрытииФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииФрагмент()
	
	УстановитьВидимостьОрганичениеРеквизитов();
	ОбновитьПредставлениеМоделиТСПриемник();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ДобавлениеСливаИзПЛ Тогда
		Оповестить("ДобавлениеСливаИзПЛ", Объект.Ссылка);
	КонецЕсли;
	Если РедактированиеСливаИзПЛ Тогда
		Оповестить("РедактированиеСливаИзПЛ", Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НомерТСПриИзменении(Элемент)
	
	уатИнтерфейсВводаТС.НомерТСПриИзменении(НомерТС, Объект.ТС, Объект.Организация);
	
	Объект.ГСМ = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
		уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ТС, "уатМодель"), "ОсновноеТопливо");
	ОстатокГСМвТС = ПолучитьОстатокГСМнсТС(Объект.ТС, Объект.ГСМ, Объект.Дата);
	
	ОбновитьНомерТС();
	
	ПодобратьПутевойЛистИсточник(Объект.ТС);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("уатОрганизация", Объект.Организация);
	КонецЕсли;
	уатИнтерфейсВводаТС.НомерТСНачалоВыбора(Элемент, Объект.ТС, СтруктураОтбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура НомерТСОчистка(Элемент, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.НомерТСОчистка(Объект.ТС);
КонецПроцедуры

&НаКлиенте
Процедура НомерТСОткрытие(Элемент, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.НомерТСОткрытие(Объект.ТС, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура НомерТСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	уатИнтерфейсВводаТС.НомерТСОбработкаВыбора(НомерТС, Объект.ТС, ВыбранноеЗначение, СтандартнаяОбработка, Объект.Организация);
	Модифицированность = Истина;
	
	Объект.ГСМ = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
		уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ТС, "уатМодель"), "ОсновноеТопливо");
	ОстатокГСМвТС = ПолучитьОстатокГСМнсТС(Объект.ТС, Объект.ГСМ, Объект.Дата);
	
	ПодобратьПутевойЛистИсточник(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.НомерТСАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура НомерТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.НомерТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура ГСМНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ДопПараметры = Новый Структура("ЗначениеГСМДоИзменения, ИмяПроцедурыОписаниеОповещения", Объект.ГСМ, "ОписаниеОповещенияВыбораГСМ");
	уатЗащищенныеФункцииКлиент.СписокГСМдляТС(Объект.Организация, Объект.ТС, ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Топливо"),,, ЭтаФорма, ДопПараметры);
КонецПроцедуры

// Подключаемый динамически обработчик оповещения
&НаКлиенте
Процедура ОписаниеОповещенияВыбораГСМ(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		Объект.ГСМ = Результат;
		ГСМПриИзменении(Неопределено);
		Если ДопПараметры.ЗначениеГСМДоИзменения <> Результат Тогда 
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГСМПриИзменении(Элемент)
	ОстатокГСМвТС = ПолучитьОстатокГСМнсТС(Объект.ТС, Объект.ГСМ, Объект.Дата);
КонецПроцедуры

&НаКлиенте
Процедура ГСМАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = уатГСМ.ПолучитьСписокГСМПоГруппе(ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Топливо"));
КонецПроцедуры

&НаКлиенте
Процедура ГСМОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	Параметры.СтрокаПоиска = "";
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ОстатокГСМвТС = ПолучитьОстатокГСМнсТС(Объект.ТС, Объект.ГСМ, Объект.Дата);
КонецПроцедуры

&НаКлиенте
Процедура АЗСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийСливГСМ.НаТС") Тогда 
		ПараметрыФормы = Новый Структура();
		Если ТипЗнч(Объект.АЗС) = Тип("СправочникСсылка.ТранспортныеСредства") Тогда 
			ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.АЗС);
		КонецЕсли;
		//ФормаВыбора = ПолучитьФорму("Справочник.уатТС.ФормаВыбора", ПараметрыФормы, Элемент);
		//ЭлементОтбора                  = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		//ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Ссылка");
		//ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.НеРавно;
		//ЭлементОтбора.ПравоеЗначение   = Объект.ТС;
		//ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		//ЭлементОтбора.Использование    = Истина;
		//ФормаВыбора.Открыть();
		ОткрытьФорму("Справочник.ТранспортныеСредства.ФормаВыбора", ПараметрыФормы, Элемент);
	Иначе 
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийСливГСМ.НаСклад") Тогда
			ОтборФормы = Новый Структура("ЭтоАЗССклад", Истина);
		Иначе
			ОтборФормы = Новый Структура("ЭтоАЗССклад", Ложь);
		КонецЕсли;
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Отбор", ОтборФормы);
		Если ТипЗнч(Объект.АЗС) = Тип("СправочникСсылка.уатАЗС") Тогда 
			ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.АЗС);
		КонецЕсли;
		ФормаВыбора = ОткрытьФорму("Справочник.уатАЗС.ФормаВыбора", ПараметрыФормы, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТСПриемникПриИзменении(Элемент)
	
	ОбновитьПредставлениеМоделиТСПриемник();
	ПодобратьПутевойЛистПриемник(Объект.АЗС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТСПриемникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбновитьПредставлениеМоделиТСПриемник();
	ПодобратьПутевойЛистПриемник(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийСливГСМ.НаСклад")
		Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийСливГСМ.НаАЗС") Тогда 
		Объект.АЗС = ПредопределенноеЗначение("Справочник.уатАЗС.ПустаяСсылка");
		Объект.ПутевойЛистПриемник = Неопределено;
	Иначе 
		Объект.АЗС = ПредопределенноеЗначение("Справочник.ТранспортныеСредства.ПустаяСсылка");
	КонецЕсли;
	
	УстановитьВидимостьОрганичениеРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛистПриИзменении(Элемент)
	
	ПодобратьТСПоПутевомуЛисту(Объект.ПутевойЛист);
	ОбновитьНомерТС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛистОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПодобратьТСПоПутевомуЛисту(ВыбранноеЗначение);
	ОбновитьНомерТС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛистНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Ссылка", ПолучитьПутевыеЛистыПоТС(Объект.ТС, Объект.Дата)));
	ОткрытьФорму("Документ.уатПутевойЛист.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛистАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокПЛПодбор = ПолучитьПутевыеЛистыПоТС(Объект.ТС, Объект.Дата, Текст);
	Если СписокПЛПодбор.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокПЛПодбор;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛистОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ДанныеВыбора = ПолучитьПутевыеЛистыПоТС(Объект.ТС, Объект.Дата, Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛистПриемникПриИзменении(Элемент)
	
	ПодобратьТСПриемникПоПутевомуЛисту(Объект.ПутевойЛистПриемник);
	ОбновитьПредставлениеМоделиТСПриемник();
	
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛистПриемникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПодобратьТСПриемникПоПутевомуЛисту(ВыбранноеЗначение);
	ОбновитьПредставлениеМоделиТСПриемник();
	
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛистПриемникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Ссылка", ПолучитьПутевыеЛистыПоТС(Объект.АЗС, Объект.Дата)));
	ОткрытьФорму("Документ.уатПутевойЛист.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛистПриемникАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокПЛПодбор = ПолучитьПутевыеЛистыПоТС(Объект.АЗС, Объект.Дата, Текст);
	Если СписокПЛПодбор.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокПЛПодбор;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛистПриемникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ДанныеВыбора = ПолучитьПутевыеЛистыПоТС(Объект.АЗС, Объект.Дата, Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// УправлениеПредприятием.СлужебныеПодсистемы
&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
КонецПроцедуры
// Конец УправлениеПредприятием.СлужебныеПодсистемы

&НаКлиенте
Процедура ОбновитьОстатокГСМвТС(Команда)
	ОстатокГСМвТС = ПолучитьОстатокГСМнсТС(Объект.ТС, Объект.ГСМ, Объект.Дата);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервереБезКонтекста
Функция ПолучитьОстатокГСМнсТС(ТС, ГСМ, ТекДата)
	ОстатокГСМНаТС = уатОбщегоНазначения.уатОстатокГСМнаТС(Новый Граница(ТекДата, ВидГраницы.Исключая), ТС, ГСМ);
	Возврат ОстатокГСМНаТС;
КонецФункции

&НаСервере
Процедура ОбновитьНомерТС()
	НомерТС = уатОбщегоНазначения.уатПредставлениеТС(Объект.ТС, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьОрганичениеРеквизитов()
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийСливГСМ.НаТС") Тогда 
		Элементы.Склад.Видимость               = Ложь;
		Элементы.АЗС.Видимость                 = Ложь;
		Элементы.СтраницаТС.Видимость          = Истина;
		Элементы.ПутевойЛистПриемник.Видимость = Истина;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийСливГСМ.НаСклад") Тогда
		Элементы.Склад.Видимость               = Истина;
		Элементы.АЗС.Видимость                 = Ложь;
		Элементы.СтраницаТС.Видимость          = Ложь;
		Элементы.ПутевойЛистПриемник.Видимость = Ложь;
		
	Иначе
		Элементы.Склад.Видимость               = Ложь;
		Элементы.АЗС.Видимость                 = Истина;
		Элементы.СтраницаТС.Видимость          = Ложь;
		Элементы.ПутевойЛистПриемник.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьПутевойЛистИсточник(ТССсылка)
	
	Если ЗначениеЗаполнено(Объект.ПутевойЛист) И ТСПрисутствуетВПутевомЛисте(ТССсылка, Объект.ПутевойЛист) Тогда 
		Возврат;
	КонецЕсли;
	
	СписокЗаправок = ПолучитьПутевыеЛистыПоТС(ТССсылка, Объект.Дата);
	Если СписокЗаправок.Количество() Тогда 
		Объект.ПутевойЛист = СписокЗаправок[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьПутевойЛистПриемник(ТССсылка)
	
	Если Не Объект.ВидОперации = Перечисления.уатВидыОперацийСливГСМ.НаТС Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ПутевойЛистПриемник) И ТСПрисутствуетВПутевомЛисте(ТССсылка, Объект.ПутевойЛистПриемник) Тогда 
		Возврат;
	КонецЕсли;
	
	СписокЗаправок = ПолучитьПутевыеЛистыПоТС(ТССсылка, Объект.Дата);
	Если СписокЗаправок.Количество() Тогда 
		Объект.ПутевойЛистПриемник = СписокЗаправок[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьТСПоПутевомуЛисту(ПЛСсылка)
	
	Если ЗначениеЗаполнено(Объект.ТС) И ТСПрисутствуетВПутевомЛисте(Объект.ТС, ПЛСсылка) Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.ТС = ПЛСсылка.ТранспортноеСредство;
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьТСПриемникПоПутевомуЛисту(ПЛСсылка)
	
	Если Не Объект.ВидОперации = Перечисления.уатВидыОперацийСливГСМ.НаТС Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.АЗС) И ТСПрисутствуетВПутевомЛисте(Объект.АЗС, ПЛСсылка) Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.АЗС = ПЛСсылка.ТранспортноеСредство;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТСПрисутствуетВПутевомЛисте(Знач ТекТС, Знач ТекПутевойЛист)
	
	Если ТекПутевойЛист.ТранспортноеСредство = ТекТС Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ТекПутевойЛист.Прицепы Цикл 
		Если ТекСтрока.ТС = ТекТС Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ТекПутевойЛист.Задание Цикл 
		Если ТекСтрока.Прицеп1 = ТекТС Тогда 
			Возврат Истина;
		КонецЕсли;
		Если ТекСтрока.Прицеп2 = ТекТС Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции // ТСПрисутствуетВПутевомЛисте()

&НаСервереБезКонтекста
Функция ПолучитьПутевыеЛистыПоТС(Знач ТС, Знач ДатаСлива, Знач ТекстПодбора="")
	
	ПутевыеЛистыПоТС = Новый СписокЗначений();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТС",               ТС);
	Запрос.УстановитьПараметр("НачалоПериода",    ДобавитьМесяц(ДатаСлива, -1));
	Запрос.УстановитьПараметр("ОкончаниеПериода", ДобавитьМесяц(ДатаСлива, 1));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПутевойЛист.Ссылка КАК Ссылка,
	|	уатПутевойЛист.Номер КАК Номер,
	|	уатПутевойЛист.Дата КАК Дата
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|ГДЕ
	|	НЕ уатПутевойЛист.ПометкаУдаления
	|	И НЕ уатПутевойЛист.Рассчитан
	|	И уатПутевойЛист.ДатаВыезда >= &НачалоПериода
	|	И уатПутевойЛист.ДатаВыезда <= &ОкончаниеПериода
	|	И уатПутевойЛист.ДатаВозвращения >= &НачалоПериода
	|	И уатПутевойЛист.ДатаВозвращения <= &ОкончаниеПериода";
	
	Если ЗначениеЗаполнено(ТС) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И (уатПутевойЛист.ТранспортноеСредство = &ТС
		|	ИЛИ уатПутевойЛист.Прицепы.ТС.уатМодель.НаличиеТопливногоБака И уатПутевойЛист.Прицепы.ТС = &ТС
		|	ИЛИ уатПутевойЛист.Задание.Прицеп1.уатМодель.НаличиеТопливногоБака И уатПутевойЛист.Задание.Прицеп1 = &ТС
		|	ИЛИ уатПутевойЛист.Задание.Прицеп2.уатМодель.НаличиеТопливногоБака И уатПутевойЛист.Задание.Прицеп2 = &ТС)";
	КонецЕсли;
	
	Запрос.Текст = СокрЛП(Запрос.Текст) + "
	|УПОРЯДОЧИТЬ ПО
	|	уатПутевойЛист.ДатаВыезда";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		ПредставлениеДокумента = Выборка.Номер + " (" + Выборка.Дата + ")";
		Если ТекстПодбора = "" Тогда 
			ПутевыеЛистыПоТС.Добавить(Выборка.Ссылка, ПредставлениеДокумента);
		Иначе 
			стрДлинаПодбор = СтрДлина(ТекстПодбора);
			Если Не НРег(Лев(ПредставлениеДокумента, стрДлинаПодбор)) = НРег(ТекстПодбора) Тогда 
				Продолжить;
			КонецЕсли;
			
			тПредставление = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(Лев(ПредставлениеДокумента, стрДлинаПодбор),, ЦветаСтиля.уатЦветТекстаПриАвтоподборе), 
				Новый ФорматированнаяСтрока(Прав(ПредставлениеДокумента, СтрДлина(ПредставлениеДокумента)-стрДлинаПодбор)));
			ПутевыеЛистыПоТС.Добавить(Выборка.Ссылка, тПредставление);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПутевыеЛистыПоТС;
	
КонецФункции // ПолучитьПутевыеЛистыПоТС()

&НаКлиенте
Процедура ОбновитьПредставлениеМоделиТСПриемник()
	
	Если ТипЗнч(Объект.АЗС) = Тип("СправочникСсылка.ТранспортныеСредства") Тогда 
		МодельТСПриемника = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Объект.АЗС, "уатМодель");
	Иначе 
		МодельТСПриемника = ПредопределенноеЗначение("Справочник.уатМоделиТС.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
