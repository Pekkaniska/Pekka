#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область СозданиеНаОсновании

// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании, НастройкиФормы) Экспорт
	
	Документы.пкОперацииСПультами.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	СозданиеНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСоздатьНаОсновании);
	
КонецПроцедуры

// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	 
	КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
	КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.пкОперацииСПультами.ПолноеИмя();
	КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.пкОперацииСПультами);
	КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";

	Возврат КомандаСоздатьНаОсновании;

КонецФункции

#КонецОбласти 
#КонецОбласти 


// Определяет реквизиты выбранного документа
//
// Параметры:
//	ДокументСсылка - Ссылка на документа
//
// Возвращаемое значение:
//	Структура - реквизиты выбранного документа
//
Функция РеквизитыДокумента(ДокументСсылка) Экспорт
	
	СтруктураРеквизитов = Новый Структура();
	
	Возврат СтруктураРеквизитов;

КонецФункции

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		Если ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь() Тогда
			СтандартнаяОбработка = Ложь;
			//ВыбраннаяФорма = "ФормаДокументаСамообслуживание";
		КонецЕсли;
	ИначеЕсли ВидФормы = "ФормаСписка" Тогда
		Если ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь() Тогда
			СтандартнаяОбработка = Ложь;
			//ВыбраннаяФорма = "ФормаСпискаСамообслуживание";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблица_пкМестонахожденияПультовДляПодъемников(Запрос, ТекстыЗапроса, Регистры);
    
	ПроведениеСерверУТ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                           КАК Ссылка,
	|	ДанныеДокумента.Дата                             КАК Дата,
	|	ДанныеДокумента.ВидОперацииВТабличнойЧасти       КАК ВидОперацииВТабличнойЧасти,
	|	ДанныеДокумента.ВидОперации                      КАК ВидОперации,
	|	ДанныеДокумента.Ответственный                    КАК Ответственный
	|ИЗ
	|	Документ.пкОперацииСПультами КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Дата",								Реквизиты.Дата);
	Запрос.УстановитьПараметр("ВидОперацииВТабличнойЧасти",			Реквизиты.ВидОперацииВТабличнойЧасти);
	Запрос.УстановитьПараметр("ВидОперации",						Реквизиты.ВидОперации);
	Запрос.УстановитьПараметр("Ответственный",						Реквизиты.Ответственный);
	
КонецПроцедуры

Функция ТекстЗапросаТаблица_пкМестонахожденияПультовДляПодъемников(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "пкМестонахожденияПультовДляПодъемников";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА пкОперацииСПультамиДанныеПоПультам.Ссылка.ВидОперацииВТабличнойЧасти = ИСТИНА
	               |			ТОГДА ВЫБОР
	               |					КОГДА пкОперацииСПультамиДанныеПоПультам.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийСПультами.Списание)
	               |						ТОГДА ЗНАЧЕНИЕ(Перечисление.пкСтатусСостоянияПульта.НеСуществует)
	               |					КОГДА пкОперацииСПультамиДанныеПоПультам.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийСПультами.ПередачаКонтрагенту)
	               |						ТОГДА ЗНАЧЕНИЕ(Перечисление.пкСтатусСостоянияПульта.ВАренде)
	               |					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.пкСтатусСостоянияПульта.НаСкладе)
	               |				КОНЕЦ
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА пкОперацииСПультамиДанныеПоПультам.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийСПультами.Списание)
	               |					ТОГДА ЗНАЧЕНИЕ(Перечисление.пкСтатусСостоянияПульта.НеСуществует)
	               |				КОГДА пкОперацииСПультамиДанныеПоПультам.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийСПультами.ПередачаКонтрагенту)
	               |					ТОГДА ЗНАЧЕНИЕ(Перечисление.пкСтатусСостоянияПульта.ВАренде)
	               |				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.пкСтатусСостоянияПульта.НаСкладе)
	               |			КОНЕЦ
	               |	КОНЕЦ КАК Статус,
	               |	пкОперацииСПультамиДанныеПоПультам.Пульт,
	               |	ВЫБОР
	               |		КОГДА пкОперацииСПультамиДанныеПоПультам.Ссылка.ВидОперацииВТабличнойЧасти = ИСТИНА
	               |			ТОГДА ВЫБОР
	               |					КОГДА пкОперацииСПультамиДанныеПоПультам.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийСПультами.Списание)
	               |						ТОГДА НЕОПРЕДЕЛЕНО
	               |					ИНАЧЕ пкОперацииСПультамиДанныеПоПультам.Склад
	               |				КОНЕЦ
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА пкОперацииСПультамиДанныеПоПультам.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийСПультами.Списание)
	               |					ТОГДА НЕОПРЕДЕЛЕНО
	               |				ИНАЧЕ пкОперацииСПультамиДанныеПоПультам.Склад
	               |			КОНЕЦ
	               |	КОНЕЦ КАК Местонахождение,
	               |	ВЫБОР
	               |		КОГДА пкОперацииСПультамиДанныеПоПультам.Ссылка.ВидОперацииВТабличнойЧасти = ИСТИНА
	               |			ТОГДА ВЫБОР
	               |					КОГДА пкОперацииСПультамиДанныеПоПультам.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийСПультами.Списание)
	               |						ТОГДА НЕОПРЕДЕЛЕНО
	               |					ИНАЧЕ пкОперацииСПультамиДанныеПоПультам.Ячейка
	               |				КОНЕЦ
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА пкОперацииСПультамиДанныеПоПультам.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийСПультами.Списание)
	               |					ТОГДА НЕОПРЕДЕЛЕНО
	               |				ИНАЧЕ пкОперацииСПультамиДанныеПоПультам.Ячейка
	               |			КОНЕЦ
	               |	КОНЕЦ КАК Ячейка,
	               |	&Дата КАК Период
	               |ИЗ
	               |	Документ.пкОперацииСПультами.ДанныеПоПультам КАК пкОперацииСПультамиДанныеПоПультам
	               |ГДЕ
	               |	пкОперацииСПультамиДанныеПоПультам.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
		
КонецФункции

Процедура Отразить_пкМестонахожденияПультовДляПодъемников(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицапкМестонахожденияПультовДляПодъемников;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.пкМестонахожденияПультовДляПодъемников.Записывать = Истина;
	Движения.пкМестонахожденияПультовДляПодъемников.Загрузить(Таблица);
	
КонецПроцедуры

#КонецОбласти

#Область Отчеты

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);

КонецПроцедуры

#КонецОбласти 

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КомплектДокументов") Тогда
		КоллекцияПечатныхФорм.Очистить();
		СформироватьКомплектПечатныхФорм(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати);
	КонецЕсли;
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

Функция СформироватьКомплектПечатныхФорм(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати) Экспорт
	
	Перем АдресКомплектаПечатныхФорм;
	
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура") И ПараметрыПечати.Свойство("АдресКомплектаПечатныхФорм", АдресКомплектаПечатныхФорм) Тогда
		
		КомплектПечатныхФорм = ПолучитьИзВременногоХранилища(АдресКомплектаПечатныхФорм);
		
	Иначе
		
		КомплектПечатныхФорм = РегистрыСведений.НастройкиПечатиОбъектов.КомплектПечатныхФорм(
			Метаданные.Документы.пкДоставка.ПолноеИмя(),
			МассивОбъектов, Неопределено);
		
	КонецЕсли;
		
	Если КомплектПечатныхФорм = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураТипов = Новый Соответствие;
	СтруктураТипов.Вставить("Документ.пкДоставка", МассивОбъектов);
	
	РегистрыСведений.НастройкиПечатиОбъектов.СформироватьКомплектВнешнихПечатныхФорм(
		"Документ.пкДоставка",
		МассивОбъектов,
		ПараметрыПечати,
		КоллекцияПечатныхФорм,
		ОбъектыПечати);
	
КонецФункции

Функция КомплектПечатныхФорм() Экспорт
	
	//Перем АдресКомплектаПечатныхФорм;
	//
	//Если ТипЗнч(ПараметрыПечати) = Тип("Структура") И ПараметрыПечати.Свойство("АдресКомплектаПечатныхФорм", АдресКомплектаПечатныхФорм) Тогда
	//	
	//	КомплектПечатныхФорм = ПолучитьИзВременногоХранилища(АдресКомплектаПечатныхФорм);
	//	
	//Иначе
	//	
	//	КомплектПечатныхФорм = РегистрыСведений.НастройкиПечатиОбъектов.КомплектПечатныхФорм(
	//		Метаданные.Документы.пкДоставка.ПолноеИмя(),
	//		МассивОбъектов, Неопределено);
	//	
	//КонецЕсли;
	//	
	//Если КомплектПечатныхФорм = Неопределено Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	//
	//СтруктураТипов = Новый Соответствие;
	//СтруктураТипов.Вставить("Документ.пкОперацииСПультами", МассивОбъектов);
	//
	//РегистрыСведений.НастройкиПечатиОбъектов.СформироватьКомплектВнешнихПечатныхФорм(
	//	"Документ.пкОперацииСПультами",
	//	МассивОбъектов,
	//	ПараметрыПечати,
	//	КоллекцияПечатныхФорм,
	//	ОбъектыПечати);
		
	КомплектПечатныхФорм = РегистрыСведений.НастройкиПечатиОбъектов.ПодготовитьКомплектПечатныхФорм();
	
	Возврат КомплектПечатныхФорм;
		
КонецФункции

Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	
КонецПроцедуры

Функция ДоступныеДляШаблоновПечатныеФормы() Экспорт

	МассивДоступныхПечатныхФорм = Новый Массив;
	ШаблоныСообщенийСервер.ДобавитьВМассивПечатныеФормыСчета(МассивДоступныхПечатныхФорм);
	
	Возврат МассивДоступныхПечатныхФорм

КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Функция ПолноеИмяОбъекта()
	
	Возврат "Документ.пкОперацииСПультами";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
