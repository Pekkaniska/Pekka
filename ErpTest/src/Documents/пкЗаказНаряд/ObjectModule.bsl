
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.пкЗаданиеНаРемонт") Тогда
		// Заполнение шапки
		Организация = ДанныеЗаполнения.Организация;
		Техника = ДанныеЗаполнения.ОбъектЭксплуатации;
		Подразделение = ДанныеЗаполнения.Подразделение;
		//ПлановаяКалькуляция = Истина;
		
		//+++ВидРемонта перенесен в реквизит документа
		ВидРемонта = ДанныеЗаполнения.ВидРемонта;
		Если ЗначениеЗаполнено(ВидРемонта) И ТипЗнч(ВидРемонта) = Тип("СправочникСсылка.ВидыРемонтов") 
				И ВидРемонта.ОбщийВидРемонта.ЗаданаСтатьяРасходов Тогда
			СтатьяРасходов = ВидРемонта.ОбщийВидРемонта.СтатьяРасходов;
		КонецЕсли;
		
		//СтрРемонты = Ремонты.Добавить();
		//СтрРемонты.ВидРемонта = ДанныеЗаполнения.ВидРемонта;
		//Если ЗначениеЗаполнено(СтрРемонты.ВидРемонта) И ТипЗнч(СтрРемонты.ВидРемонта) = Тип("СправочникСсылка.ВидыРемонтов") 
		//		И СтрРемонты.ВидРемонта.ОбщийВидРемонта.ЗаданаСтатьяРасходов Тогда
		//	СтрРемонты.СтатьяРасходов = СтрРемонты.ВидРемонта.ОбщийВидРемонта.СтатьяРасходов;
		//КонецЕсли;
		//---ВидРемонта перенесен в реквизит документа
		
		// Заполнение ТЧ Плановые работы
		ТаблицаРабот = ДанныеЗаполнения.ПланируемыеРаботы.Выгрузить();
		ТаблицаРабот.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаРабот.Загрузитьколонку(ТаблицаРабот.ВыгрузитьКолонку("Работа"),"Номенклатура");
		Работы.Загрузить(ТаблицаРабот);
		
		Для Каждого Стр Из Работы Цикл
			
			Стр.ЗаданиеНаРемонт = ДанныеЗаполнения;
			Стр.ВидРемонта = ДанныеЗаполнения.ВидРемонта;
			
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(Ответственный) Тогда	
			Ответственный = Пользователи.ТекущийПользователь();
		КонецЕсли;
//Рарус Владимир Подрезов 11.05.2017  3922
		МестоРемонта		= ДанныеЗаполнения.МестоРемонта;
		Клиент				= ДанныеЗаполнения.Клиент;
		Если ЗначениеЗаполнено(ДанныеЗаполнения.ОбъектСтроительства) И Не ЗначениеЗаполнено(ОбъектСтроительства) Тогда
			ОбъектСтроительства	= ДанныеЗаполнения.ОбъектСтроительства; 
		КонецЕсли;
		//ДатаНачала			= НачалоДня(ДанныеЗаполнения.ТребуемаяДата);
		//ДатаОкончания		= КонецДня(ДанныеЗаполнения.ТребуемаяДата);
//Рарус Владимир Подрезов Конец
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.пкПогрузкаВыгрузкаПоДоставке") Тогда
		// Заполнение шапки
		Доставка = ДанныеЗаполнения.Доставка;
		Организация = Доставка.Организация;
		Техника = ДанныеЗаполнения.ЗаданиеНаПеревозку.Техника;
		ПлановаяКалькуляция = Ложь;
		
		ЗапросВидаРемонта = Новый Запрос("ВЫБРАТЬ
		|	ВидыРемонтов.Ссылка КАК ВидРемонта,
		|	ВЫБОР
		|		КОГДА ВидыРемонтов.ОбщийВидРемонта.ЗаданаСтатьяРасходов
		|			ТОГДА ВидыРемонтов.ОбщийВидРемонта.СтатьяРасходов
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК СтатьяРасходов
		|ИЗ
		|	Справочник.ВидыРемонтов КАК ВидыРемонтов
		|ГДЕ
		|	ВидыРемонтов.ОбщийВидРемонта.пкТипРемонта = ЗНАЧЕНИЕ(Перечисление.пкТипыРемонтов.Осмотр)");
		ВыборкаВидРемонта = ЗапросВидаРемонта.Выполнить().Выбрать();
		Если ВыборкаВидРемонта.Следующий() Тогда 
			ВидРемонта = ВыборкаВидРемонта.ВидРемонта;
			СтатьяРасходов = ВыборкаВидРемонта.СтатьяРасходов;
			Работы.Загрузить(ВидРемонта.МатериалыИРаботы.Выгрузить());
			// Заполнение ТЧ Плановые работы
			Для Каждого Стр Из Работы Цикл
				
				Стр.ВидРемонта = ВидРемонта;
				
			КонецЦикла;
			
		КонецЕсли;	
				
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда	
		
		ЗаполнениеСвойствПоСтатистикеСервер.ЗаполнитьСвойстваОбъекта(ЭтотОбъект, ДанныеЗаполнения);	
	
		ДанныеЗаполнения.Свойство("Техника",Техника);
		ДанныеЗаполнения.Свойство("Организация",Организация);
		//ПлановаяКалькуляция = Истина;

		// Заполнение ТЧ Плановые работы
		ПланируемыеРаботы = Неопределено;
		ДанныеЗаполнения.Свойство("ПланируемыеРаботы",ПланируемыеРаботы);
		Если ПланируемыеРаботы <> Неопределено Тогда 
			ТаблицаРабот = ОбщегоНазначенияУТ.МассивВТаблицуЗначений(ПланируемыеРаботы);
			ТаблицаРабот.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			ТаблицаРабот.Загрузитьколонку(ТаблицаРабот.ВыгрузитьКолонку("Работа"),"Номенклатура");
			Работы.Загрузить(ТаблицаРабот);
		КонецЕсли;	
		//+++ВидРемонта перенесен в реквизит документа
		ДанныеЗаполнения.Свойство("ВидРемонта",ВидРемонта);
		//ПлатныйРемонт = ДанныеЗаполнения.ПлатныйРемонт;
		//Если ЗначениеЗаполнено(ВидРемонта) И ЗначениеЗаполнено(ВидРемонта.ОбщийВидРемонта) Тогда 
		//	ПлатныйРемонт = ВидРемонта.ОбщийВидРемонта.пкТипРемонта = Перечисления.пкТипыРемонтов.Платный;
		//КонецЕсли;	
		 
		Если ЗначениеЗаполнено(ВидРемонта) И ТипЗнч(ВидРемонта) = Тип("СправочникСсылка.ВидыРемонтов") 
				И ВидРемонта.ОбщийВидРемонта.ЗаданаСтатьяРасходов Тогда
			СтатьяРасходов = ВидРемонта.ОбщийВидРемонта.СтатьяРасходов;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Ответственный) Тогда	
			Ответственный = Пользователи.ТекущийПользователь();
		КонецЕсли;
				//ТаблицаПланируемыеРаботы.Свернуть("ВидРемонта");
		//Для Каждого Стр Из ТаблицаПланируемыеРаботы Цикл
		//	СтрРемонты = Ремонты.Добавить();
		//	СтрРемонты.ВидРемонта = Стр.ВидРемонта;
		//	Если ЗначениеЗаполнено(СтрРемонты.ВидРемонта) И ТипЗнч(СтрРемонты.ВидРемонта) = Тип("СправочникСсылка.ВидыРемонтов") 
		//			И СтрРемонты.ВидРемонта.ОбщийВидРемонта.ЗаданаСтатьяРасходов Тогда
		//		СтрРемонты.СтатьяРасходов = СтрРемонты.ВидРемонта.ОбщийВидРемонта.СтатьяРасходов;
		//	КонецЕсли;
		//КонецЦикла;	
		//---ВидРемонта перенесен в реквизит документа
		
	Иначе
		
		ЗаполнениеСвойствПоСтатистикеСервер.ЗаполнитьСвойстваОбъекта(ЭтотОбъект, ДанныеЗаполнения);	
	    Если Не ЗначениеЗаполнено(Ответственный) Тогда	
			Ответственный = Пользователи.ТекущийПользователь();
		КонецЕсли;

	КонецЕсли;
	
	Если ЗначениеЗаполнено(Техника) Тогда 
		СерийныйНомерТехники = Техника.СерийныйНомер;
	КонецЕсли;	
	
	Валюта = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета(Валюта);
	Дата = ТекущаяДата();
	
	ДатаНачала = Дата;
    
    //+++rarus-spb_zlov 06.04.2017    
    //ДатаОкончания = КонецДня(Дата + 86400);
    //---rarus-spb_zlov 06.04.2017 
    
	Если Не ЗначениеЗаполнено(Подразделение) Тогда
		Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Ответственный);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Организация) Тогда 
		Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Склад) Тогда 
		Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад);
		ЗонаОтгрузки = Справочники.СкладскиеЯчейки.ЗонаОтгрузкиПоУмолчанию(Склад, Справочники.СкладскиеПомещения.ПустаяСсылка(), ЗонаОтгрузки);
	КонецЕсли;
	НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	
//Рарус Владимир Подрезов
    Если Не ЗначениеЗаполнено(Ответственный) Тогда	
		Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	Если ЗначениеЗаполнено(Ответственный) И Не ЗначениеЗаполнено(Подразделение) Тогда
		Подразделение = Ответственный.Подразделение;
	КонецЕсли;
	Если ЗначениеЗаполнено(Подразделение) И Не ЗначениеЗаполнено(Склад) Тогда 
		//Ищим первый адресный склад подразделения
		ЗапросСкладыПодразделения = Новый Запрос;
		ЗапросСкладыПодразделения.Текст =
		"ВЫБРАТЬ
		|	Склады.Ссылка
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Подразделение = &Подразделение
		|	И Склады.ИспользоватьАдресноеХранение";
		ЗапросСкладыПодразделения.УстановитьПараметр("Подразделение", Подразделение);
		РезЗапросаСклады = ЗапросСкладыПодразделения.Выполнить().Выбрать();
		Если РезЗапросаСклады.Следующий() Тогда
			Склад = РезЗапросаСклады.Ссылка;
			ЗонаОтгрузки = Справочники.СкладскиеЯчейки.ЗонаОтгрузкиПоУмолчанию(Склад, Справочники.СкладскиеПомещения.ПустаяСсылка(), ЗонаОтгрузки);
		КонецЕсли;
	КонецЕсли;
//Рарус Владимир Подрезов Конец
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	СформироватьДвиженияДокумента(Отказ, РежимПроведения);
	Если Не Отказ Тогда 
		ЗафиксироватьСтатусДокумента();
	КонецЕсли;
	Если Статус = Перечисления.пкСтатусыЗаказНарядов.Закрыт Тогда 
		ОтработатьЗакрытиеЗаказНаряда(Отказ);
	Иначе
		ОтработатьОтменуЗакрытияЗаказНаряда(Отказ);
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗаказКлиента) Тогда 
//Рарус Владимир Подрезов 20.06.2017
		Если НЕ ЗаказКлиента.ПометкаУдаления Тогда 
//Рарус Владимир Подрезов Конец
		ЗаказКлиентаОбъект = ЗаказКлиента.ПолучитьОбъект();
		ЗаказКлиентаОбъект.Записать(РежимЗаписиДокумента.Проведение);
//Рарус Владимир Подрезов 20.06.2017
		КонецЕсли;
//Рарус Владимир Подрезов Конец
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗаказНаРемонт) Тогда 
//Рарус Владимир Подрезов 20.06.2017
		Если НЕ ЗаказНаРемонт.ПометкаУдаления Тогда 
//Рарус Владимир Подрезов Конец
		ЗаказНаРемонтОбъект = ЗаказНаРемонт.ПолучитьОбъект();
		ЗаказНаРемонтОбъект.Записать(РежимЗаписиДокумента.Проведение);
//Рарус Владимир Подрезов 20.06.2017
		КонецЕсли;
//Рарус Владимир Подрезов Конец
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияДокумента(Отказ, РежимПроведения)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	//СформироватьДвиженияТоварыКОтгрузке();
    
    //+++rarus-spb_zlov 13.08.2016    
    //РегистрыСведений.пкСтатусыТехники.СформироватьЗаписи(Отказ, РежимПроведения, ЭтотОбъект);
	Если Не ТехникаКлиента Тогда 
		РегистрыСведений.пкСтатусыРемонтаТехники.СформироватьЗаписи(Отказ, РежимПроведения, ЭтотОбъект);
	КонецЕсли;	
    //---rarus-spb_zlov 13.08.2016 
    
	РегистрыНакопления.пкВыполненныеРаботы.СформироватьЗаписи(Отказ, РежимПроведения, ЭтотОбъект);
	РегистрыНакопления.пкМатериалыИРаботыПоЗаказНарядам.СформироватьЗаписи(Отказ, РежимПроведения, ЭтотОбъект);
	РегистрыНакопления.пкЗаданияНаРемонт.СформироватьЗаписи(Отказ, РежимПроведения, ЭтотОбъект);
	
	//+++DubI Рарус-СПб 20.04.2017
	РегистрыСведений.пкРаботыВЗаказНаряде.СформироватьЗаписи(Отказ, РежимПроведения, ЭтотОбъект);
	//---DubI Рарус-СПб
	
//rarus+ saveld 19.10.2016	
	РегистрыСведений.пкПроведениеРемонтов.СформироватьЗаписи(Отказ, РежимПроведения, ЭтотОбъект);
//rarus- saveld 19.10.2016	
	
	Движения.Записать();
	
КонецПроцедуры

Процедура СформироватьДвиженияТоварыКОтгрузке()
	
	ДвиженияТоварыКОтгрузке = Движения.ТоварыКОтгрузке;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	пкЗаказНарядМатериалы.Ссылка.Дата КАК Период,
	|	пкЗаказНарядМатериалы.Ссылка КАК ДокументОтгрузки,
	|	пкЗаказНарядМатериалы.Номенклатура,
	|	пкЗаказНарядМатериалы.Характеристика,
	|	пкЗаказНарядМатериалы.Ссылка.Склад,
	|	пкЗаказНарядМатериалы.Серия,
	|	пкЗаказНарядМатериалы.Ссылка.Подразделение КАК Получатель,
	|	пкЗаказНарядМатериалы.Количество КАК КОтгрузке,
	|	пкЗаказНарядМатериалы.Количество КАК КОформлению
	|ИЗ
	|	Документ.пкЗаказНаряд.Материалы КАК пкЗаказНарядМатериалы
	|ГДЕ
	|	пкЗаказНарядМатериалы.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда 
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Движение = ДвиженияТоварыКОтгрузке.ДобавитьПриход();
			ЗаполнитьЗначенияСвойств(Движение, Выборка);
		КонецЦикла;
	КонецЕсли;
	ДвиженияТоварыКОтгрузке.Записывать = Истина;
	
КонецПроцедуры	

Процедура ЗафиксироватьСтатусДокумента() 
	
	ДатаЗаписи = ТекущаяДата();
	ПоследняяЗаписьРегистраСтатусов = РегистрыСведений.пкСтатусыЗаказНарядов.ПолучитьПоследнее(ДатаЗаписи,Новый Структура("ЗаказНаряд",Ссылка));
	ПоследнийСтатус = Неопределено;
	ПоследняяЗаписьРегистраСтатусов.Свойство("Статус",ПоследнийСтатус);
	Если Статус <> ПоследнийСтатус Тогда 
		НоваяЗапись = РегистрыСведений.пкСтатусыЗаказНарядов.СоздатьМенеджерЗаписи();
		НоваяЗапись.ЗаказНаряд = Ссылка;
		НоваяЗапись.Период = ДатаЗаписи;
		НоваяЗапись.Статус = Статус;
		НоваяЗапись.Записать();
	КонецЕсли;	
	
КонецПроцедуры	
 
Процедура ОтработатьЗакрытиеЗаказНаряда(Отказ)
	
	//закроем все расходные ордера
	ЗапросОрдеров = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыКОтгрузкеОбороты.Регистратор КАК Ордер
	|ПОМЕСТИТЬ ВТ_Ордера
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.Обороты(, , Регистратор, ДокументОтгрузки В (&ЗаказКлиента, &ЗаказНаРемонт)) КАК ТоварыКОтгрузкеОбороты
	|ГДЕ
	|	ТоварыКОтгрузкеОбороты.Регистратор ССЫЛКА Документ.РасходныйОрдерНаТовары
	|	И ТоварыКОтгрузкеОбороты.Регистратор.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.Отгружен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Ордера.Ордер
	|ИЗ
	|	ВТ_Ордера КАК ВТ_Ордера
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОтборуОбороты.Регистратор КАК ДокументОтбор
	|ИЗ
	|	РегистрНакопления.ТоварыКОтбору.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			Распоряжение В
	|				(ВЫБРАТЬ
	|					ВТ_ордера.Ордер
	|				ИЗ
	|					ВТ_ордера)) КАК ТоварыКОтборуОбороты
	|ГДЕ
	|	ТоварыКОтборуОбороты.Регистратор ССЫЛКА Документ.ОтборРазмещениеТоваров
	|	И ТоварыКОтборуОбороты.ОтбираетсяОборот > 0");
	ЗапросОрдеров.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	ЗапросОрдеров.УстановитьПараметр("ЗаказНаРемонт", ЗаказНаРемонт);
	Результат = ЗапросОрдеров.ВыполнитьПакет();
	//поменяем статус отборов
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Если Не Результат[2].Пустой() Тогда 
		ВыборкаОтборов = Результат[2].Выбрать();
		Пока ВыборкаОтборов.Следующий() Цикл
			Док = ВыборкаОтборов.ДокументОтбор;
			ДокОбъект = Док.ПолучитьОбъект();
			ДокОбъект.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок;
			Попытка
				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Отказ = Истина;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	//поменяем статус ордеров
	Если НЕ Отказ И Не Результат[1].Пустой() Тогда 
		ВыборкаОрдеров = Результат[1].Выбрать();
		Пока ВыборкаОрдеров.Следующий() Цикл
			Док = ВыборкаОрдеров.Ордер;
			ДокОбъект = Док.ПолучитьОбъект();
			ДокОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
			Для Каждого СтрОрдер Из ДокОбъект.ОтгружаемыеТовары Цикл
				Если СтрОрдер.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать Тогда 
					СтрОрдер.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
				КонецЕсли;	
			КонецЦикла;	
			Попытка
				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Отказ = Истина;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
				
	Если Не Отказ Тогда                                          
		
		Если ЗначениеЗаполнено(ЗаказКлиента) И ПлатныйРемонт И ТехникаКлиента Тогда 
			ЗаказОбъект = ЗаказКлиента.ПолучитьОбъект();
			ЗаказОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке;
			Если ЗаказОбъект.ЭтапыГрафикаОплаты.Количество() = 0 Тогда 
				ЭтапОплаты = ЗаказОбъект.ЭтапыГрафикаОплаты.Добавить();
				ЭтапОплаты.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки;
				ЭтапОплаты.ДатаПлатежа = ЗаказОбъект.Дата;
				ЭтапОплаты.ПроцентПлатежа = 100;
				ЭтапОплаты.СуммаПлатежа = ЗаказОбъект.СуммаДокумента;
			КонецЕсли;	
			Попытка
				ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Отказ = Истина;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				ВызватьИсключение;
			КонецПопытки;
			Реализация = Документы.РеализацияТоваровУслуг.НайтиПоРеквизиту("ЗаказКлиента",ЗаказКлиента);
			Если ЗначениеЗаполнено(Реализация) Тогда 
				ДокументРеализация = Реализация.ПолучитьОбъект();
				ДокументРеализация.Товары.Очистить();
				ДокументРеализация.Заполнить(ЗаказКлиента);
				ДокументРеализация.Дата = ТекущаяДата();
			Иначе	
				ДокументРеализация = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
				ДокументРеализация.Заполнить(ЗаказКлиента);
				ДокументРеализация.Дата = ТекущаяДата();
			КонецЕсли;	
			
			Попытка
				ДокументРеализация.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Отказ = Истина;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				ВызватьИсключение;
			КонецПопытки;
		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗаказНаРемонт) И НЕ(ПлатныйРемонт И ТехникаКлиента) Тогда 
			
			Если Материалы.Количество()>0 Тогда
				
				//+++rarus-spb_zlov 11.01.2017    
				                
                Запрос = Новый Запрос;
                Запрос.Текст = 
                
                "ВЫБРАТЬ
                |   ВнутреннееПотреблениеТоваров.Ссылка,
                |   ВнутреннееПотреблениеТоваров.Организация
                |ИЗ
                |   Документ.ВнутреннееПотреблениеТоваров КАК ВнутреннееПотреблениеТоваров
                |ГДЕ
                |   ВнутреннееПотреблениеТоваров.ЗаказНаВнутреннееПотребление = &ЗаказНаВнутреннееПотребление
                |   И (ВнутреннееПотреблениеТоваров.Организация = &Организация
                |           ИЛИ ВнутреннееПотреблениеТоваров.Организация = &ОрганизацияУпр)
                |   И НЕ ВнутреннееПотреблениеТоваров.ПометкаУдаления";
                
                Запрос.УстановитьПараметр("ЗаказНаВнутреннееПотребление", ЗаказНаРемонт);
                Запрос.УстановитьПараметр("Организация",                  ЗаказНаРемонт.Организация);
                Запрос.УстановитьПараметр("ОрганизацияУпр",               Справочники.Организации.УправленческаяОрганизация);
                
                Результат = Запрос.Выполнить();
                Выборка = Результат.Выбрать();
                
                ВнутрПотр    = Неопределено;
                ВнутрПотрУпр = Неопределено;
                
                Пока Выборка.Следующий() Цикл
                    Если Выборка.Организация = ЗаказНаРемонт.Организация Тогда
                        ВнутрПотр = Выборка.Ссылка;
                    Иначе
                        ВнутрПотрУпр = Выборка.Ссылка;
                    КонецЕсли;    
                КонецЦикла;
                
                МассивЗаказов = Новый Массив;
                МассивЗаказов.Добавить(ЗаказНаРемонт);
                СтруктураЗаполнения = Новый Структура("МассивЗаказов",МассивЗаказов);
                
                РеквизитыШапки = Документы.ВнутреннееПотреблениеТоваров.ДанныеЗаполненияНакладной(МассивЗаказов);
                СтруктураЗаполнения.Вставить("РеквизитыШапки",РеквизитыШапки);

				//МассивДопустимыхСтатусов = Новый Массив();
				//МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовНаРемонт.КВыполнению);
				//МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовНаРемонт.Выполняется);
				//МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовНаРемонт.Закрыт);

				//
				//ТекстОшибки = НакладныеСервер.ПроверитьВозможностьВводаНаОсновании(ЗаказНаРемонт, Статус, не Проведен, , МассивДопустимыхСтатусов);
				//Если ТекстОшибки <> "" Тогда
				//	РезультатыПроверки = Новый Структура("ЕстьОшибки, ТекстОшибки", Истина, ТекстОшибки);
				//Иначе
				//	РезультатыПроверки = Документы.ВнутреннееПотреблениеТоваров.ПроверитьДанныеЗаполненияНакладной(РеквизитыШапки);
				//КонецЕсли;
                ЕстьКондиция   = Ложь;
                ЕстьНекондиция = Ложь;
                
                Для Каждого Строка ИЗ ЭтотОбъект.Материалы Цикл
                    Если Строка.Характеристика.пкНеПроводитьПоБУ И НЕ ЕстьНекондиция Тогда
                        ЕстьНекондиция = Истина;
                    ИначеЕсли НЕ Строка.Характеристика.пкНеПроводитьПоБУ И НЕ ЕстьКондиция Тогда
                        ЕстьКондиция = Истина;    
                    КонецЕсли; 
                КонецЦикла;    
                
                СтруктураЗаполнения.Вставить("НеПроводитьПоБУ", Ложь);       
                
                Если ЗначениеЗаполнено(ВнутрПотр) Тогда 
                	ДокумнтВнутреннееПотребление = ВнутрПотр.ПолучитьОбъект();
					ДокумнтВнутреннееПотребление.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					ДокумнтВнутреннееПотребление.Товары.Очистить();
                    ДокумнтВнутреннееПотребление.Заполнить(СтруктураЗаполнения);
                ИначеЕсли ЕстьКондиция Тогда	
                	ДокумнтВнутреннееПотребление = Документы.ВнутреннееПотреблениеТоваров.СоздатьДокумент();
                	ДокумнтВнутреннееПотребление.Заполнить(СтруктураЗаполнения);
                Иначе
                    ДокумнтВнутреннееПотребление = Неопределено;
                КонецЕсли;	
                
                Если ДокумнтВнутреннееПотребление <> Неопределено Тогда
    				ДокумнтВнутреннееПотребление.Склад = Склад;
    				
                    Для Каждого СтрТовары Из ДокумнтВнутреннееПотребление.Товары Цикл
                    	СтрТовары.АналитикаРасходов = Техника;
                    КонецЦикла;	
                    
                    Попытка
                    	ДокумнтВнутреннееПотребление.Записать(РежимЗаписиДокумента.Проведение);
                    Исключение
                    	Отказ = Истина;
                    	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
                    КонецПопытки;
                КонецЕсли;
                
                СтруктураЗаполнения.Вставить("НеПроводитьПоБУ", Истина);    
				
				РеквизитыШапки.Вставить("Организация", Справочники.Организации.УправленческаяОрганизация);

                Если ЗначениеЗаполнено(ВнутрПотрУпр) Тогда 
                	ДокумнтВнутреннееПотребление = ВнутрПотрУпр.ПолучитьОбъект();
                ИначеЕсли ЕстьНекондиция Тогда	
                	ДокумнтВнутреннееПотребление = Документы.ВнутреннееПотреблениеТоваров.СоздатьДокумент();
                	ДокумнтВнутреннееПотребление.Заполнить(СтруктураЗаполнения);
                Иначе
                    ДокумнтВнутреннееПотребление = Неопределено;
                КонецЕсли;
                
                Если ДокумнтВнутреннееПотребление <> Неопределено Тогда
                    Для Каждого СтрТовары Из ДокумнтВнутреннееПотребление.Товары Цикл
                    	СтрТовары.АналитикаРасходов = Техника;
                    КонецЦикла;	
                    Попытка
                    	ДокумнтВнутреннееПотребление.Записать(РежимЗаписиДокумента.Проведение);
                    Исключение
                    	Отказ = Истина;
                    	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
                    КонецПопытки;
                КонецЕсли;
                
                //---rarus-spb_zlov 11.01.2017 

			КонецЕсли;

			ЗаказОбъект = ЗаказНаРемонт.ПолучитьОбъект();
			ЗаказОбъект.Статус = Перечисления.СтатусыЗаказовНаРемонт.Закрыт;
			ЗаказОбъект.ДатаНачалаФактическая = ДатаНачалаФакт;
			ЗаказОбъект.ДатаЗавершенияФактическая = ДатаОкончанияФакт;
			Если Не ЗначениеЗаполнено(ЗаказОбъект.ОбщийВидРемонта)  Тогда
				Если ЗаказОбъект.Ремонты.Количество() > 0 Тогда
				     ЗаказОбъект.ОбщийВидРемонта = ЗаказОбъект.Ремонты[0].ВидРемонта;				
				КонецЕсли;	
			КонецЕсли;
			Попытка
				ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Отказ = Истина;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
					КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
	Иначе 
		ЗафиксироватьТранзакцию();
	КонецЕсли;	
	
КонецПроцедуры	
	
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);

	ПроведениеСерверУТ.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);

	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "ПлановыеМатериалы", "МаксимальныйКодСтрокиПлановыеМатериалы");
	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "ПлановыеРаботы", "МаксимальныйКодСтрокиПлановыеРаботы");
						
	Если НЕ ЗначениеЗаполнено(Номер) Тогда
		УстановитьНовыйНомер();
	КонецЕсли;
	
	Если ЭтоНовый() Тогда 
		НоваяСсылка = ПолучитьСсылкуНового();
		Если Не ЗначениеЗаполнено(НоваяСсылка) Тогда
			НоваяСсылка = Документы.пкЗаказНаряд.ПолучитьСсылку();
			УстановитьСсылкуНового(НоваяСсылка);
		КонецЕсли;	
		Если Не ЗначениеЗаполнено(ЗонаОтгрузки) Тогда 
			ЗонаОтгрузки = Справочники.СкладскиеЯчейки.ЗонаОтгрузкиПоУмолчанию(Склад, Справочники.СкладскиеПомещения.ПустаяСсылка(), ЗонаОтгрузки);
		КонецЕсли;
	КонецЕсли;
	
	//+++ВидРемонта перенесен в реквизит документа
	Если ЗначениеЗаполнено(ВидРемонта) Тогда 
		Если Ремонты.Найти(ВидРемонта,"ВидРемонта") = Неопределено Тогда 
			НовСтрРем = Ремонты.Добавить();
			НовСтрРем.ВидРемонта = ВидРемонта;
			НовСтрРем.СтатьяРасходов = СтатьяРасходов;
			НовСтрРем.ПлатныйРемонт = ПлатныйРемонт;
		КонецЕсли;	
	КонецЕсли;
	//---ВидРемонта перенесен в реквизит документа
	
	//+++pavelk 13/03/2017
	Если Статус = ПредопределенноеЗначение("Перечисление.пкСтатусыЗаказНарядов.Выполнен") Тогда
		ДатаОкончанияТекущая = ТекущаяДатаСеанса();
		Если НачалоДня(ДатаОкончанияТекущая) <> НачалоДня(ДатаОкончанияФакт) Тогда 
			ДатаОкончанияФакт = ДатаОкончанияТекущая;
		КонецЕсли;
		Для Каждого СтрРаботы Из Работы Цикл
			Если НЕ ЗначениеЗаполнено(СтрРаботы.ДатаОкончания) Тогда 
				СтрРаботы.ДатаОкончания = ДатаОкончанияТекущая;
				Если Не ЗначениеЗаполнено(СтрРаботы.ДатаНачала) Тогда
					СтрРаботы.ДатаНачала = НачалоДня(ДатаОкончанияТекущая);
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	//---pavelk 13/03/2017
	
//Рарус Владимир Подрезов 27.10.2017
	Если НЕ Отказ Тогда
		Если ПлатныйРемонт И ТехникаКлиента Тогда
			Если Не ЭтоНовый() И ЗначениеЗаполнено(Ссылка.Клиент) И Ссылка.Клиент <> Клиент Тогда
				ИзменитьКонтрагентаВДокументах();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
//Рарус Владимир Подрезов Конец
    
	Если НЕ Отказ Тогда 
		Если ПлатныйРемонт И ТехникаКлиента Тогда 
			ПроверитьЗаполнитьЗаказКлиента(Отказ, НоваяСсылка);
		Иначе	
			ПроверитьЗаполнитьЗаказНаРемонт(Отказ, НоваяСсылка);
		КонецЕсли;	
    КонецЕсли;
	ЕстьМатериалы = (Материалы.Количество() > 0);
	ЕстьРаботы	  = (Работы.Количество() > 0);
 
	
//Рарус Владимир Подрезов 07.04.2017
//Закомментировано
	//Если Работы.Количество() > 0 Тогда
	//	УстановитьДатуОкончания = Истина;
	//	МаксимальнаяДата = Дата("00010101");
	//	Для Каждого СтрРаботы Из Работы Цикл
	//		Если ЗначениеЗаполнено(СтрРаботы.ДатаОкончания) Тогда 
	//			МаксимальнаяДата = Макс(МаксимальнаяДата,СтрРаботы.ДатаОкончания);
	//		Иначе 
	//			УстановитьДатуОкончания = Ложь;
	//			Прервать;
	//		КонецЕсли;	
	//	КонецЦикла;	
	//	Если УстановитьДатуОкончания Тогда 
	//		ДатаОкончания = МаксимальнаяДата;
	//	КонецЕсли;	
	//КонецЕсли;	
//Рарус Владимир Подрезов Конец
//Рарус Владимир Подрезов 30.03.2017
	Если ПлановаяКалькуляция Тогда
		СуммаДокумента = ПлановыеМатериалы.Итог("СуммаСНДС") + ПлановыеРаботы.Итог("СуммаСНДС")
	Иначе
		СуммаДокумента = Материалы.Итог("СуммаСНДС") + Работы.Итог("СуммаСНДС")
	КонецЕсли;
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 18.04.2017
	УстановитьПривилегированныйРежим(Истина);
	
	Если Статус = Перечисления.пкСтатусыЗаказНарядов.Открыт
		ИЛИ Статус = Перечисления.пкСтатусыЗаказНарядов.ВРаботе
		ИЛИ Статус = Перечисления.пкСтатусыЗаказНарядов.Отложен Тогда
		Если Не ЗначениеЗаполнено(ДатаНачалаФакт) Тогда 
			ДатаНачалаФакт		= ТекущаяДатаСеанса();
		КонецЕсли;
	ИначеЕсли Статус = Перечисления.пкСтатусыЗаказНарядов.Выполнен Тогда
		Если Не ЗначениеЗаполнено(ДатаНачалаФакт) Тогда 
			ДатаНачалаФакт		= ТекущаяДатаСеанса();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДатаОкончанияФакт) Тогда 
			ДатаОкончанияФакт	= ТекущаяДатаСеанса();
		КонецЕсли;
	ИначеЕсли Статус = Перечисления.пкСтатусыЗаказНарядов.Закрыт Тогда 
		Если Не ЗначениеЗаполнено(ДатаНачалаФакт) Тогда 
			ДатаНачалаФакт		= ТекущаяДатаСеанса();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДатаОкончанияФакт) Тогда 
			ДатаОкончанияФакт	= ТекущаяДатаСеанса();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДатаЗакрытия) Тогда 
			ДатаЗакрытия		= ТекущаяДатаСеанса();
			Если ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь) Тогда
				АвторЗакрытия		= ПараметрыСеанса.ТекущийПользователь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого текСтрока Из Ремонты Цикл
		Если Не ЗначениеЗаполнено(текСтрока.СтатьяРасходов) Тогда
			Если текСтрока.ПлатныйРемонт И НЕ ТехникаКлиента Тогда
				текСтрока.СтатьяРасходов	= Константы.пкСтатьяРасходовСервисПлатныеРемонты.Получить();
			ИначеЕсли НЕ текСтрока.ПлатныйРемонт И НЕ ТехникаКлиента Тогда
				текСтрока.СтатьяРасходов	= Константы.пкСтатьяРасходовСервисРемонтыЗаСвойСчет.Получить();
			Иначе
				текСтрока.СтатьяРасходов	= Константы.пкСтатьяРасходовСервисПлатныеРемонты.Получить();
			КонецЕсли;    
		КонецЕсли;    
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДатаНачалаФакт) И ДатаНачалаФакт = Дата Тогда 
		ДатаНачалаФакт		= ДатаНачалаФакт + 1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаОкончанияФакт) И (ДатаОкончанияФакт = Дата ИЛИ ДатаОкончанияФакт <= ДатаНачалаФакт) Тогда 
		ДатаОкончанияФакт		= Макс(Дата, ДатаНачалаФакт) + 1;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
//Рарус Владимир Подрезов Конец

//Рарус Владимир 15.05.2017
	Если Статус <> Перечисления.пкСтатусыЗаказНарядов.Закрыт Тогда
		АвторЗакрытия	= Справочники.Пользователи.ПустаяСсылка();
		ДатаЗакрытия	= '00010101';
	КонецЕсли;
//Рарус Владимир Подрезов Конец

КонецПроцедуры

Процедура ПроверитьЗаполнитьЗаказКлиента(Отказ, НоваяСсылка)
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если ПометкаУдаления И ЗначениеЗаполнено(ЗаказКлиента) Тогда 
		ЗаказКлиентаОбъект = ЗаказКлиента.ПолучитьОбъект();
		ЗаказКлиентаОбъект.УстановитьПометкуУдаления(Истина);
		Возврат;
	КонецЕсли;
	
//Рарус Владимир Подрезов 27.09.2017
	Для Каждого текСтрока Из Работы Цикл
		Если текСтрока.Сумма <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		//Очистим код строки заказа от строк без сумм - они не идут в продажу
		текСтрока.КодСтрокиЗаказа = "";
		
	КонецЦикла;
//Рарус Владимир Подрезов Конец
	
	МассивКоличество = Новый Массив; //Для рапределения сумм
	
	ЗапросТЧПлатныеРаботыМатериалы = Новый Запрос("ВЫБРАТЬ
	|	ТЧМатериалы.НомерСтроки,
	|	ТЧМатериалы.Номенклатура,
	|	ТЧМатериалы.Характеристика,
	|	ТЧМатериалы.Серия,
	|	ТЧМатериалы.Упаковка,
	|	ТЧМатериалы.КоличествоУпаковок,
	|	ТЧМатериалы.Количество,
	|	ТЧМатериалы.Цена,
	|	ТЧМатериалы.Сумма,
	|	ТЧМатериалы.СтавкаНДС,
	|	ТЧМатериалы.СуммаНДС,
	|	ТЧМатериалы.СуммаСНДС,
	|	ТЧМатериалы.ПлатныйРемонт,
	|	ТЧМатериалы.ВидЦены,
	|	ТЧМатериалы.КодСтрокиЗаказа
	|ПОМЕСТИТЬ ВТ_Материалы
	|ИЗ
	|	&ТЧМатериалы КАК ТЧМатериалы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧРаботы.НомерСтроки,
	|	ТЧРаботы.Номенклатура КАК Работа,
	|	ТЧРаботы.ЕдиницаИзмерения,
	|	ТЧРаботы.КоличествоРеализация КАК Количество,
	|	ТЧРаботы.Цена,
	|	ТЧРаботы.Сумма,
	|	ТЧРаботы.СтавкаНДС,
	|	ТЧРаботы.СуммаНДС,
	|	ТЧРаботы.СуммаСНДС,
	|	ТЧРаботы.ПлатныйРемонт,
	|	ТЧРаботы.ВидЦены,
	|	ТЧРаботы.КодСтрокиЗаказа
	|ПОМЕСТИТЬ ВТ_Работы
	|ИЗ
	|	&ТЧРаботы КАК ТЧРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	пкЗаказНарядМатериалы.НомерСтроки,
	|	пкЗаказНарядМатериалы.Номенклатура,
	|	пкЗаказНарядМатериалы.Характеристика,
	|	пкЗаказНарядМатериалы.Серия,
	|	пкЗаказНарядМатериалы.Упаковка,
	|	пкЗаказНарядМатериалы.КоличествоУпаковок,
	|	пкЗаказНарядМатериалы.Количество,
	|	пкЗаказНарядМатериалы.Цена,
	|	пкЗаказНарядМатериалы.Сумма,
	|	пкЗаказНарядМатериалы.СтавкаНДС,
	|	пкЗаказНарядМатериалы.СуммаНДС,
	|	пкЗаказНарядМатериалы.СуммаСНДС,
	|	пкЗаказНарядМатериалы.ВидЦены,
	|	пкЗаказНарядМатериалы.КодСтрокиЗаказа,
	|	ЛОЖЬ КАК ЭтоРабота
	|ИЗ
	|	ВТ_Материалы КАК пкЗаказНарядМатериалы
	|ГДЕ
	|	пкЗаказНарядМатериалы.ПлатныйРемонт
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	пкЗаказНарядРаботы.НомерСтроки,
	|	пкЗаказНарядРаботы.Работа,
	|	NULL,
	|	NULL,
	|	пкЗаказНарядРаботы.ЕдиницаИзмерения,
	|	пкЗаказНарядРаботы.Количество,
	|	пкЗаказНарядРаботы.Количество,
	|	пкЗаказНарядРаботы.Цена,
	|	пкЗаказНарядРаботы.Сумма,
	|	пкЗаказНарядРаботы.СтавкаНДС,
	|	пкЗаказНарядРаботы.СуммаНДС,
	|	пкЗаказНарядРаботы.СуммаСНДС,
	|	пкЗаказНарядРаботы.ВидЦены,
	|	пкЗаказНарядРаботы.КодСтрокиЗаказа,
	|	ИСТИНА
	|ИЗ
	|	ВТ_Работы КАК пкЗаказНарядРаботы
	|ГДЕ
	|	пкЗаказНарядРаботы.ПлатныйРемонт
	|	И ВЫБОР
	|			КОГДА &ТехникаКлиента
	|				ТОГДА пкЗаказНарядРаботы.Сумма > 0
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ");
	ЗапросТЧПлатныеРаботыМатериалы.УстановитьПараметр("ТЧМатериалы", Материалы);
	ЗапросТЧПлатныеРаботыМатериалы.УстановитьПараметр("ТЧРаботы", Работы);
	ЗапросТЧПлатныеРаботыМатериалы.УстановитьПараметр("ТехникаКлиента", ТехникаКлиента);
	РезультатПлатныеРаботыМатериалы = ЗапросТЧПлатныеРаботыМатериалы.Выполнить();
	
	МассивКодовСтрокЗаказа = Новый Массив; //для контроля удаленных из заказ-наряда строк
	
	ТЧМассивКодовСтрок = РезультатПлатныеРаботыМатериалы.Выгрузить().ВыгрузитьКолонку("КодСтрокиЗаказа");
	Для Каждого КодСтрокиТЧ Из ТЧМассивКодовСтрок Цикл
		Если Не ПустаяСтрока(КодСтрокиТЧ) Тогда 
			Если СтрНайти(КодСтрокиТЧ, ",") = 0 Тогда 
				МассивКодовСтрокЗаказа.Добавить(КодСтрокиТЧ);
			Иначе
				МассивКодов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КодСтрокиТЧ, ",", Истина, Истина);
				Для Каждого Код Из МассивКодов Цикл
					МассивКодовСтрокЗаказа.Добавить(Код);
				КонецЦикла;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
	Если НЕ РезультатПлатныеРаботыМатериалы.Пустой() Тогда 
		Если НЕ ЗначениеЗаполнено(ЗаказКлиента) Тогда 
			//создаем заказ клиента
			ЗаказКлиентаНовый						= Документы.ЗаказКлиента.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(ЗаказКлиентаНовый,ЭтотОбъект, , "Номер");
			ЗаказКлиентаНовый.пкЗаказНаряд			= ?(ЗначениеЗаполнено(НоваяСсылка), НоваяСсылка, Ссылка);
			ЗаказКлиентаНовый.Статус				= Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
			ЗаказКлиентаНовый.Приоритет				= Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(ЗаказКлиентаНовый.Приоритет);
			ЗаказКлиентаНовый.ХозяйственнаяОперация	= Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
			ЗаказКлиентаНовый.Партнер				= Клиент;
			ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(ЗаказКлиентаНовый.Партнер, ЗаказКлиентаНовый.Контрагент);
			ЗаказКлиентаНовый.СпособДоставки		= Перечисления.СпособыДоставки.Самовывоз;
			ЗаказКлиентаНовый.Комментарий			= "#Создан автоматически на основании Заказ-наряда №" + Номер + " от " + Формат(Дата,"ДФ='дд ММММ гггг'");
			
			ТекущийКод	= 0;
			ВыборкаПлатныеРаботыМатериалы	= РезультатПлатныеРаботыМатериалы.Выбрать();
			Пока ВыборкаПлатныеРаботыМатериалы.Следующий() Цикл
				ТекущийКод	= ТекущийКод + 1;
				НовСтрока	= ЗаказКлиентаНовый.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, ВыборкаПлатныеРаботыМатериалы, , "НомерСтроки");
				НовСтрока.Склад					= Склад;
				НовСтрока.ВариантОбеспечения	= ?(ВыборкаПлатныеРаботыМатериалы.ЭтоРабота, Перечисления.ВариантыОбеспечения.Отгрузить, Перечисления.ВариантыОбеспечения.Требуется);
				НовСтрока.ДатаОтгрузки			= Дата;
				НовСтрока.КодСтроки				= ТекущийКод;
				Если ВыборкаПлатныеРаботыМатериалы.ЭтоРабота Тогда 
					НайденнаяСтрока	= Работы.Найти(ВыборкаПлатныеРаботыМатериалы.НомерСтроки, "НомерСтроки");
					НайденнаяСтрока.КодСтрокиЗаказа = ТекущийКод;
				Иначе
					НайденнаяСтрока	= Материалы.Найти(ВыборкаПлатныеРаботыМатериалы.НомерСтроки, "НомерСтроки");
					НайденнаяСтрока.КодСтрокиЗаказа = ТекущийКод;
				КонецЕсли;	
			КонецЦикла;
			
			ЗаказКлиентаНовый.МаксимальныйКодСтроки = ТекущийКод;
			//Попытка
				ЗаказКлиентаНовый.Записать(РежимЗаписиДокумента.Запись);
				ЗаказКлиента = ЗаказКлиентаНовый.Ссылка;
			//Исключение
			//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			//	Отказ = Истина;
			//КонецПопытки;
			
		Иначе
			
			//обновим заказ клиента
			ЗаказКлиентаОбъект = ЗаказКлиента.ПолучитьОбъект();
			Если ЗаказКлиентаОбъект.ПометкаУдаления Тогда 
				ЗаказКлиентаОбъект.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;	
			
			ЗаполнитьЗначенияСвойств(ЗаказКлиентаОбъект, ЭтотОбъект, , "Номер,Статус");
			Если Статус = Перечисления.пкСтатусыЗаказНарядов.Закрыт Тогда 
				ЗаказКлиентаОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт;
			Иначе
				ЗаказКлиентаОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
			КонецЕсли;
			ЗаказКлиентаОбъект.Партнер		= Клиент;
			ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(ЗаказКлиентаОбъект.Партнер, ЗаказКлиентаОбъект.Контрагент);
			ТекущийКод						= ЗаказКлиентаОбъект.МаксимальныйКодСтроки;
			ВыборкаПлатныеРаботыМатериалы	= РезультатПлатныеРаботыМатериалы.Выбрать();
			Пока ВыборкаПлатныеРаботыМатериалы.Следующий() Цикл
				ОбновитьКодСтроки	= Ложь;
				НовСтрока			= Неопределено;
				
				//будем собирать общее количество по всем строкам заказа, на которые ссылается строка заказ-наряда
				ОбщееКоличество		= 0;
				Если ВыборкаПлатныеРаботыМатериалы.КодСтрокиЗаказа = "0" ИЛИ Не ЗначениеЗаполнено(ВыборкаПлатныеРаботыМатериалы.КодСтрокиЗаказа) Тогда 
					ТекущийКод			= ТекущийКод + 1;
					НовСтрока			= ЗаказКлиентаОбъект.Товары.Добавить();
					ОбновитьКодСтроки	= Истина;
				Иначе
					Если СтрНайти(ВыборкаПлатныеРаботыМатериалы.КодСтрокиЗаказа, ",") = 0 Тогда
						НовСтрока = ЗаказКлиентаОбъект.Товары.Найти(Число(ВыборкаПлатныеРаботыМатериалы.КодСтрокиЗаказа), "КодСтроки");
						Если Не ЗначениеЗаполнено(НовСтрока) Тогда 
							ТекущийКод			= ТекущийКод + 1;
							НовСтрока			= ЗаказКлиентаОбъект.Товары.Добавить();
							ОбновитьКодСтроки	= Истина;
						Иначе
							ОбщееКоличество		= НовСтрока.Количество;
						КонецЕсли;
					Иначе
						МассивКодов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВыборкаПлатныеРаботыМатериалы.КодСтрокиЗаказа, ",", Истина, Истина);
						ПрисутствуетСтрокаТребуется	= Ложь;
						ПоследняяНайденнаяСтрока	= Неопределено;
						Для Каждого Код Из МассивКодов Цикл
							НайденнаяСтрока = ЗаказКлиентаОбъект.Товары.Найти(Число(Код), "КодСтроки");
							Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда 
								Если НайденнаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется 
									ИЛИ НайденнаяСтрока.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
								Тогда 
									НовСтрока				= НайденнаяСтрока;
								КонецЕсли;
								ОбщееКоличество				= ОбщееКоличество + НайденнаяСтрока.Количество;	
								ПоследняяНайденнаяСтрока	= НайденнаяСтрока; //если последний код не найдем, надо взять предыдущий
							КонецЕсли;	
						КонецЦикла;
						Если НовСтрока = Неопределено Тогда 
							Если ПоследняяНайденнаяСтрока = Неопределено Тогда //Так ни одного кода и не нашлось
								ТекущийКод			= ТекущийКод + 1;
								НовСтрока			= ЗаказКлиентаОбъект.Товары.Добавить();
								ОбновитьКодСтроки	= Истина;
							Иначе	
								НовСтрока			= ПоследняяНайденнаяСтрока;
							КонецЕсли;	
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;				
					
				КодСтрокиТребуется	= ТекущийКод;
				Если ОбновитьКодСтроки Тогда 
					ЗаполнитьЗначенияСвойств(НовСтрока,ВыборкаПлатныеРаботыМатериалы,,"НомерСтроки");
				Иначе
					Если НовСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется Тогда 
						Количество						= НовСтрока.Количество;
						ЗаполнитьЗначенияСвойств(НовСтрока,ВыборкаПлатныеРаботыМатериалы,,"НомерСтроки");
						НовСтрока.Количество			= Количество + ВыборкаПлатныеРаботыМатериалы.Количество - ОбщееКоличество;
						НовСтрока.КоличествоУпаковок	= НовСтрока.Количество;
						КодСтрокиТребуется				= НовСтрока.КодСтроки;
					Иначе
						Если ОбщееКоличество < ВыборкаПлатныеРаботыМатериалы.Количество Тогда
							
							СтараяСтрока	= НовСтрока;         //уже существующая строка
							Разница			= ВыборкаПлатныеРаботыМатериалы.Количество - ОбщееКоличество;
							ТекущийКод		= ТекущийКод + 1;
							
							НовСтрока			= ЗаказКлиентаОбъект.Товары.Добавить();
							ОбновитьКодСтроки	= Истина;
							ЗаполнитьЗначенияСвойств(НовСтрока,ВыборкаПлатныеРаботыМатериалы,,"НомерСтроки");
							НовСтрока.Количество			= Разница;
							НовСтрока.КоличествоУпаковок	= Разница;
							МассивКоличество.Очистить();
							МассивКоличество.Добавить(СтараяСтрока.Количество);
							МассивКоличество.Добавить(Разница);
							//на случай, если 3 или более строк заказа соответствуют одной строке заказ-наряда
							МассивКоличество.Добавить(ВыборкаПлатныеРаботыМатериалы.Количество - Разница - СтараяСтрока.Количество);
							
							РаспределениеСумм		= ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ВыборкаПлатныеРаботыМатериалы.Сумма, МассивКоличество);
							РаспределениеСуммНДС	= ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ВыборкаПлатныеРаботыМатериалы.СуммаНДС, МассивКоличество);
							РаспределениеСуммСНДС	= ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ВыборкаПлатныеРаботыМатериалы.СуммаСНДС, МассивКоличество);
							Если РаспределениеСумм <> Неопределено Тогда 
								СтараяСтрока.Сумма		= РаспределениеСумм[0];
								НовСтрока.Сумма			= РаспределениеСумм[1];
							КонецЕсли;
							Если РаспределениеСуммНДС <> Неопределено Тогда 
								СтараяСтрока.СуммаНДС	= РаспределениеСуммНДС[0];
								НовСтрока.СуммаНДС		= РаспределениеСуммНДС[1];
							КонецЕсли;
							Если РаспределениеСуммСНДС <> Неопределено Тогда 
								СтараяСтрока.СуммаСНДС	= РаспределениеСуммСНДС[0];
								НовСтрока.СуммаСНДС		= РаспределениеСуммСНДС[1];
							КонецЕсли;
							
						ИначеЕсли ОбщееКоличество = ВыборкаПлатныеРаботыМатериалы.Количество Тогда	
							ЗаполнитьЗначенияСвойств(НовСтрока, ВыборкаПлатныеРаботыМатериалы, , "НомерСтроки");
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;
				
				НовСтрока.Склад			= Склад;
				НовСтрока.ДатаОтгрузки	= Дата;
				НовСтрока.Отменено		= Ложь;
				
				Если НовСтрока.Количество <= 0 Тогда 
					НовСтрока.Отменено				= Истина;
					НовСтрока.Количество			= 1;
					НовСтрока.КоличествоУпаковок	= 1;
					Если ВыборкаПлатныеРаботыМатериалы.ЭтоРабота Тогда 
						НайденнаяСтрока = Работы.Найти(ВыборкаПлатныеРаботыМатериалы.НомерСтроки,"НомерСтроки");
						НайденнаяСтрока.КодСтрокиЗаказа	= "";
					Иначе
						НайденнаяСтрока = Материалы.Найти(ВыборкаПлатныеРаботыМатериалы.НомерСтроки,"НомерСтроки");
						Если НЕ ПустаяСтрока(НайденнаяСтрока.КодСтрокиЗаказа) Тогда
							СтрокаТекКод		= Строка(КодСтрокиТребуется);
							ДлинаСтрокиТекКод	= СтрДлина(КодСтрокиТребуется);
							Если НайденнаяСтрока.КодСтрокиЗаказа = СтрокаТекКод Тогда 
								НайденнаяСтрока.КодСтрокиЗаказа	= "";
							ИначеЕсли Лев(НайденнаяСтрока.КодСтрокиЗаказа, ДлинаСтрокиТекКод + 1) = СтрокаТекКод + "," Тогда 
								НайденнаяСтрока.КодСтрокиЗаказа	= Сред(НайденнаяСтрока.КодСтрокиЗаказа, ДлинаСтрокиТекКод + 2);
							ИначеЕсли Прав(НайденнаяСтрока.КодСтрокиЗаказа, ДлинаСтрокиТекКод + 1) = "," + СтрокаТекКод Тогда
								НайденнаяСтрока.КодСтрокиЗаказа	= Лев(НайденнаяСтрока.КодСтрокиЗаказа, СтрДлина(НайденнаяСтрока.КодСтрокиЗаказа) - ДлинаСтрокиТекКод - 1);
							Иначе
								Позиция = СтрНайти(НайденнаяСтрока.КодСтрокиЗаказа, "," + СтрокаТекКод + ",");                                                              
								Если Позиция > 0 Тогда 
									НайденнаяСтрока.КодСтрокиЗаказа	= Лев(НайденнаяСтрока.КодСтрокиЗаказа, Позиция) + Сред(НайденнаяСтрока.КодСтрокиЗаказа, Позиция + ДлинаСтрокиТекКод + 2);
								КонецЕсли;
							КонецЕсли;	
						КонецЕсли;
					КонецЕсли;	
				Иначе
					НовСтрока.Отменено	= Ложь;
				КонецЕсли;	
				
				Если ОбновитьКодСтроки Тогда 
					
					НовСтрока.КодСтроки				= ТекущийКод;
					НовСтрока.ВариантОбеспечения	= ?(ВыборкаПлатныеРаботыМатериалы.ЭтоРабота, 
						Перечисления.ВариантыОбеспечения.Отгрузить, 
						Перечисления.ВариантыОбеспечения.Требуется);
				
					Если ВыборкаПлатныеРаботыМатериалы.ЭтоРабота Тогда 
						НайденнаяСтрока = Работы.Найти(ВыборкаПлатныеРаботыМатериалы.НомерСтроки,"НомерСтроки");
						НайденнаяСтрока.КодСтрокиЗаказа	= ТекущийКод;
					Иначе
						НайденнаяСтрока = Материалы.Найти(ВыборкаПлатныеРаботыМатериалы.НомерСтроки,"НомерСтроки");
						Если ПустаяСтрока(НайденнаяСтрока.КодСтрокиЗаказа) Тогда 
							НайденнаяСтрока.КодСтрокиЗаказа	= ТекущийКод;
						Иначе
							НайденнаяСтрока.КодСтрокиЗаказа	= НайденнаяСтрока.КодСтрокиЗаказа + "," + ТекущийКод;
						КонецЕсли;
					КонецЕсли;
					МассивКодовСтрокЗаказа.Добавить(Строка(ТекущийКод));
				КонецЕсли;
			КонецЦикла;
			ЗаказКлиентаОбъект.МаксимальныйКодСтроки = ТекущийКод;
			
			//очистим строки, которых нет в заказ-наряде
			Для Каждого СтрТовары Из ЗаказКлиентаОбъект.Товары Цикл
				Если МассивКодовСтрокЗаказа.Найти(Строка(СтрТовары.КодСтроки)) = Неопределено И Не СтрТовары.Отменено
					Тогда 
					СтрТовары.Отменено = Истина;
				КонецЕсли;
			КонецЦикла;
			
			//Попытка
				ЗаказКлиентаОбъект.Записать(РежимЗаписиДокумента.Запись);
				ЗаказКлиента = ЗаказКлиентаОбъект.Ссылка;
			//Исключение
			//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			//	Отказ = Истина;
			//КонецПопытки;
			
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ЗаказКлиента) Тогда 
		//поменяем статус заказа клиента
			ЗаказКлиентаОбъект			= ЗаказКлиента.ПолучитьОбъект();
			ЗаказКлиентаОбъект.Статус	= Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
			
			//очистим строки, которых нет в заказ-наряде
			Для Каждого СтрТовары Из ЗаказКлиентаОбъект.Товары Цикл
				СтрТовары.Отменено		= Истина;
			КонецЦикла;
			ЗаказКлиентаОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;	
	КонецЕсли;	
	
//Рарус Владимир Подрезов 14.06.2017
	Если ЗначениеЗаполнено(ЗаказНаРемонт) И Не ЗаказНаРемонт.ПометкаУдаления Тогда 
		//Если есть ЗаказКлиента, то все расходные ордера перевешываем на него
		Если ЗначениеЗаполнено(ЗаказКлиента) Тогда
			ИзменитьРаспоряжениеВДокументах(ЗаказКлиента, ЗаказНаРемонт, "Товары", "МатериалыИРаботы");
			ЗаказНаРемонт = "";
		КонецЕсли;
	КонецЕсли;
//Рарус Владимир Подрезов Конец
КонецПроцедуры

Процедура ПроверитьЗаполнитьЗаказНаРемонт(Отказ, НоваяСсылка)
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если ПометкаУдаления И ЗначениеЗаполнено(ЗаказНаРемонт) Тогда 
		ЗаказНаРемонтОбъект = ЗаказНаРемонт.ПолучитьОбъект();
		ЗаказНаРемонтОбъект.УстановитьПометкуУдаления(Истина);
		Возврат;
	КонецЕсли;
	
	ЗапросТЧРемонты = Новый Запрос("ВЫБРАТЬ
	|	ТЧРемонты.ВидРемонта,
	|	ТЧРемонты.СтатьяРасходов,
	|	ТЧРемонты.ПлатныйРемонт
	|ПОМЕСТИТЬ ВТ_Ремонты
	|ИЗ
	|	&ТЧРемонты КАК ТЧРемонты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Ремонты.ВидРемонта,
	|	ВТ_Ремонты.СтатьяРасходов,
	|	ВТ_Ремонты.ПлатныйРемонт
	|ИЗ
	|	ВТ_Ремонты КАК ВТ_Ремонты
	//|ГДЕ
	//|	НЕ ВТ_Ремонты.ПлатныйРемонт
	|");
	ЗапросТЧРемонты.УстановитьПараметр("ТЧРемонты",Ремонты);
	ВыборкаТЧРемонты = ЗапросТЧРемонты.Выполнить().Выбрать();
	СоответствиеВидовРемонта = Новый Соответствие();
	
	ЗапросТЧРаботыМатериалы = Новый Запрос("ВЫБРАТЬ
	|	ТЧМатериалы.НомерСтроки,
	|	ТЧМатериалы.Номенклатура,
	|	ТЧМатериалы.Характеристика,
	|	ТЧМатериалы.Серия,
	|	ТЧМатериалы.Упаковка,
	|	ТЧМатериалы.КоличествоУпаковок,
	|	ТЧМатериалы.Количество,
	|	ТЧМатериалы.ВидРемонта,
	|	ТЧМатериалы.ПлатныйРемонт,
	|	ТЧМатериалы.КодСтрокиЗаказа
	|ПОМЕСТИТЬ ВТ_Материалы
	|ИЗ
	|	&ТЧМатериалы КАК ТЧМатериалы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧРаботы.НомерСтроки,
	|	ТЧРаботы.Номенклатура КАК Работа,
	|	ТЧРаботы.ЕдиницаИзмерения,
	|	ТЧРаботы.Количество,
	|	ТЧРаботы.ВидРемонта,
	|	ТЧРаботы.ПлатныйРемонт,
	|	ТЧРаботы.КодСтрокиЗаказа
	|ПОМЕСТИТЬ ВТ_Работы
	|ИЗ
	|	&ТЧРаботы КАК ТЧРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	пкЗаказНарядМатериалы.НомерСтроки,
	|	пкЗаказНарядМатериалы.Номенклатура,
	|	пкЗаказНарядМатериалы.Характеристика,
	|	пкЗаказНарядМатериалы.Серия,
	|	пкЗаказНарядМатериалы.Упаковка,
	|	пкЗаказНарядМатериалы.КоличествоУпаковок,
	|	пкЗаказНарядМатериалы.Количество,
	|	пкЗаказНарядМатериалы.КодСтрокиЗаказа,
	|	пкЗаказНарядМатериалы.ВидРемонта,
	|	ЛОЖЬ КАК ЭтоРабота
	|ИЗ
	|	ВТ_Материалы КАК пкЗаказНарядМатериалы
	//|ГДЕ
	//|	НЕ пкЗаказНарядМатериалы.ПлатныйРемонт
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	пкЗаказНарядРаботы.НомерСтроки,
	|	пкЗаказНарядРаботы.Работа,
	|	NULL,
	|	NULL,
	|	пкЗаказНарядРаботы.ЕдиницаИзмерения,
	|	пкЗаказНарядРаботы.Количество,
	|	пкЗаказНарядРаботы.Количество,
	|	пкЗаказНарядРаботы.КодСтрокиЗаказа,
	|	пкЗаказНарядРаботы.ВидРемонта,
	|	ИСТИНА
	|ИЗ
	|	ВТ_Работы КАК пкЗаказНарядРаботы
	//|ГДЕ
	//|	НЕ пкЗаказНарядРаботы.ПлатныйРемонт
	|");
	ЗапросТЧРаботыМатериалы.УстановитьПараметр("ТЧМатериалы", Материалы);
	ЗапросТЧРаботыМатериалы.УстановитьПараметр("ТЧРаботы", Работы);
	РезультатТЧРаботыМатериалы = ЗапросТЧРаботыМатериалы.Выполнить();
	ТЧМассивКодовСтрок = РезультатТЧРаботыМатериалы.Выгрузить().ВыгрузитьКолонку("КодСтрокиЗаказа");
	МассивКодовСтрокЗаказа = Новый Массив;
	Для Каждого КодСтрокиТЧ Из ТЧМассивКодовСтрок Цикл
		Если Не ПустаяСтрока(КодСтрокиТЧ) Тогда 
			Если СтрНайти(КодСтрокиТЧ,",") = 0 Тогда 
				МассивКодовСтрокЗаказа.Добавить(КодСтрокиТЧ);
			Иначе
				МассивКодов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КодСтрокиТЧ,",",Истина,Истина);
				Для Каждого Код Из МассивКодов Цикл
					МассивКодовСтрокЗаказа.Добавить(Код);
				КонецЦикла;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	Если НЕ РезультатТЧРаботыМатериалы.Пустой() Тогда 
		
		Если НЕ ЗначениеЗаполнено(ЗаказНаРемонт) Тогда 
			//создаем заказ на ремонт
			ЗаказНаРемонтНовый = Документы.ЗаказНаРемонт.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(ЗаказНаРемонтНовый,ЭтотОбъект,,"Номер,Статус");
			ЗаказНаРемонтНовый.пкЗаказНаряд = ?(ЗначениеЗаполнено(НоваяСсылка),НоваяСсылка,Ссылка);
			ЗаказНаРемонтНовый.Статус = Перечисления.СтатусыЗаказовНаРемонт.КВыполнению;
			ЗаказНаРемонтНовый.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.Ремонт;
			ЗаказНаРемонтНовый.ДатаНачала = ?(ЗначениеЗаполнено(ДатаНачалаФакт),ДатаНачалаФакт,Дата);
			ЗаказНаРемонтНовый.ДатаЗавершения = ?(ЗначениеЗаполнено(ДатаОкончания), ДатаОкончания,КонецДня(Дата));
			ЗаказНаРемонтНовый.ОбъектЭксплуатации = Техника;
			ЗаказНаРемонтНовый.Комментарий = "#Создан автоматически на основании Заказ-наряда №" + Номер + " от " + Формат(Дата,"ДФ='дд ММММ гггг'");
			ТекущийКодРемонта = 0;
			Пока ВыборкаТЧРемонты.Следующий() Цикл
				ТекущийКодРемонта = ТекущийКодРемонта + 1;
				НовСтрРем = ЗаказНаРемонтНовый.Ремонты.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрРем,ВыборкаТЧРемонты,"ВидРемонта,СтатьяРасходов");
				НовСтрРем.КодРемонта = ТекущийКодРемонта;
				СоответствиеВидовРемонта.Вставить(ВыборкаТЧРемонты.ВидРемонта,ТекущийКодРемонта);
			КонецЦикла;	
			ТекущийКод = 0;
			ВыборкаТЧРаботыМатериалы = РезультатТЧРаботыМатериалы.Выбрать();
			Пока ВыборкаТЧРаботыМатериалы.Следующий() Цикл
				ТекущийКод = ТекущийКод + 1;
				НовСтрока = ЗаказНаРемонтНовый.МатериалыИРаботы.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока,ВыборкаТЧРаботыМатериалы,,"НомерСтроки");
				НовСтрока.Склад = Склад;
				НовСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется;
				НовСтрока.КодСтроки = ТекущийКод;
				НовСтрока.КодРемонта = СоответствиеВидовРемонта.Получить(ВыборкаТЧРаботыМатериалы.ВидРемонта);
				Если ВыборкаТЧРаботыМатериалы.ЭтоРабота Тогда 
					НайденнаяСтрока = Работы.Найти(ВыборкаТЧРаботыМатериалы.НомерСтроки,"НомерСтроки");
					НайденнаяСтрока.КодСтрокиЗаказа = ТекущийКод;
				Иначе
					НайденнаяСтрока = Материалы.Найти(ВыборкаТЧРаботыМатериалы.НомерСтроки,"НомерСтроки");
					НайденнаяСтрока.КодСтрокиЗаказа = ТекущийКод;
				КонецЕсли;	
			КонецЦикла;
			ЗаказНаРемонтНовый.МаксимальныйКодСтрокиНоменклатуры = ТекущийКод;
			ЗаказНаРемонтНовый.МаксимальныйКодРемонта = ТекущийКодРемонта;
			//Попытка
				ЗаказНаРемонтНовый.Записать(РежимЗаписиДокумента.Запись);
				ЗаказНаРемонт = ЗаказНаРемонтНовый.Ссылка;
			////Исключение
			////	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			////	Отказ = Истина;
			////КонецПопытки;
			
		Иначе
			//обновим заказ на ремонт
			ЗаказНаРемонтОбъект = ЗаказНаРемонт.ПолучитьОбъект();
			Если ЗаказНаРемонтОбъект.ПометкаУдаления Тогда 
				ЗаказНаРемонтОбъект.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;	
			Для Каждого СтрРем Из ЗаказНаРемонтОбъект.Ремонты Цикл
				СоответствиеВидовРемонта.Вставить(СтрРем.ВидРемонта,СтрРем.КодРемонта);
			КонецЦикла;
			ТекущийКодРемонта = ЗаказНаРемонтОбъект.МаксимальныйКодРемонта;
			Пока ВыборкаТЧРемонты.Следующий() Цикл
				Если СоответствиеВидовРемонта.Получить(ВыборкаТЧРемонты.ВидРемонта) = Неопределено Тогда 
					ТекущийКодРемонта = ТекущийКодРемонта + 1;
					НовСтрРем = ЗаказНаРемонтОбъект.Ремонты.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрРем,ВыборкаТЧРемонты,"ВидРемонта,СтатьяРасходов");
					НовСтрРем.КодРемонта = ТекущийКодРемонта;
					СоответствиеВидовРемонта.Вставить(ВыборкаТЧРемонты.ВидРемонта,ТекущийКодРемонта);
				КонецЕсли;	
			КонецЦикла;
			
			ЗаполнитьЗначенияСвойств(ЗаказНаРемонтОбъект,ЭтотОбъект,,"Номер,Статус,ДатаНачала");
			ЗаказНаРемонтОбъект.ДатаНачалаФактическая = ?(ЗначениеЗаполнено(ДатаНачалаФакт),ДатаНачалаФакт,НачалоДня(Дата));
			ЗаказНаРемонтОбъект.ДатаЗавершенияФактическая = ?(ЗначениеЗаполнено(ДатаОкончанияФакт),ДатаОкончанияФакт,КонецДня(Дата));
			Если Статус = Перечисления.пкСтатусыЗаказНарядов.Закрыт Тогда 
				ЗаказНаРемонтОбъект.Статус = Перечисления.СтатусыЗаказовНаРемонт.Закрыт;
			Иначе
				ЗаказНаРемонтОбъект.Статус = Перечисления.СтатусыЗаказовНаРемонт.КВыполнению;
			КонецЕсли;	
			ТекущийКод = ЗаказНаРемонтОбъект.МаксимальныйКодСтрокиНоменклатуры;
			ВыборкаРаботыМатериалы = РезультатТЧРаботыМатериалы.Выбрать();
			Пока ВыборкаРаботыМатериалы.Следующий() Цикл
				ОбновитьКодСтроки = Ложь;
				НовСтрока = Неопределено;
				ОбщееКоличество = 0;           //будем собирать общее количество по всем строкам заказа, на которые ссылается строка заказ-наряда
				Если ВыборкаРаботыМатериалы.КодСтрокиЗаказа = "0" ИЛИ Не ЗначениеЗаполнено(ВыборкаРаботыМатериалы.КодСтрокиЗаказа) Тогда 
					ТекущийКод = ТекущийКод + 1;
					НовСтрока = ЗаказНаРемонтОбъект.МатериалыИРаботы.Добавить();
					ОбновитьКодСтроки = Истина;
				Иначе
					Если СтрНайти(ВыборкаРаботыМатериалы.КодСтрокиЗаказа,",") = 0 Тогда
						НовСтрока = ЗаказНаРемонтОбъект.МатериалыИРаботы.Найти(Число(ВыборкаРаботыМатериалы.КодСтрокиЗаказа),"КодСтроки");
						Если Не ЗначениеЗаполнено(НовСтрока) Тогда 
							ТекущийКод = ТекущийКод + 1;
							НовСтрока = ЗаказНаРемонтОбъект.МатериалыИРаботы.Добавить();
							ОбновитьКодСтроки = Истина;
						Иначе
							ОбщееКоличество = НовСтрока.Количество;
						КонецЕсли;
					Иначе
						МассивКодов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВыборкаРаботыМатериалы.КодСтрокиЗаказа,",",Истина,Истина);
						ПрисутствуетСтрокаТребуется = Ложь;
						ПоследняяНайденнаяСтрока = Неопределено;
						Для Каждого Код Из МассивКодов Цикл
							НайденнаяСтрока = ЗаказНаРемонтОбъект.МатериалыИРаботы.Найти(Число(Код),"КодСтроки");
							Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда 
								Если НайденнаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется Тогда 
									НовСтрока = НайденнаяСтрока;
								КонецЕсли;
								ОбщееКоличество = ОбщееКоличество + НайденнаяСтрока.Количество;	
								ПоследняяНайденнаяСтрока = НайденнаяСтрока; //если последний код не найдем, надо взять предыдущий
							КонецЕсли;	
						КонецЦикла;
						Если НовСтрока = Неопределено Тогда 
							Если ПоследняяНайденнаяСтрока = Неопределено Тогда //Так ни одного кода и не нашлось
								ТекущийКод = ТекущийКод + 1;
								НовСтрока = ЗаказНаРемонтОбъект.МатериалыИРаботы.Добавить();
								ОбновитьКодСтроки = Истина;
							Иначе	
								НовСтрока = ПоследняяНайденнаяСтрока;
							КонецЕсли;	
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;
					
				КодСтрокиТребуется = ТекущийКод;
				Если ОбновитьКодСтроки Тогда 
					ЗаполнитьЗначенияСвойств(НовСтрока,ВыборкаРаботыМатериалы,,"НомерСтроки");
				Иначе
					Если НовСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется Тогда 
						Количество = НовСтрока.Количество;
						ЗаполнитьЗначенияСвойств(НовСтрока,ВыборкаРаботыМатериалы,,"НомерСтроки");
						НовСтрока.Количество = Количество + ВыборкаРаботыМатериалы.Количество - ОбщееКоличество;
						НовСтрока.КоличествоУпаковок = НовСтрока.Количество;
						КодСтрокиТребуется = НовСтрока.КодСтроки;
					Иначе
						Если ОбщееКоличество < ВыборкаРаботыМатериалы.Количество Тогда
							СтараяСтрока = НовСтрока;         //уже существующая строка
							Разница = ВыборкаРаботыМатериалы.Количество - ОбщееКоличество;
							ТекущийКод = ТекущийКод + 1;
							НовСтрока = ЗаказНаРемонтОбъект.МатериалыИРаботы.Добавить();
							ОбновитьКодСтроки = Истина;
							ЗаполнитьЗначенияСвойств(НовСтрока,ВыборкаРаботыМатериалы,,"НомерСтроки");
							НовСтрока.Количество = Разница;
							НовСтрока.КоличествоУпаковок = Разница;
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;	
				НовСтрока.Склад = Склад;
				НовСтрока.КодРемонта = СоответствиеВидовРемонта.Получить(ВыборкаРаботыМатериалы.ВидРемонта);
				
				Если НовСтрока.Количество <= 0 Тогда 
					НовСтрока.Отменено = Истина;
					НовСтрока.Количество = 1;
					НовСтрока.КоличествоУпаковок = 1;
					Если ВыборкаРаботыМатериалы.ЭтоРабота Тогда 
						НайденнаяСтрока = Работы.Найти(ВыборкаРаботыМатериалы.НомерСтроки,"НомерСтроки");
						НайденнаяСтрока.КодСтрокиЗаказа = "";
					Иначе
						НайденнаяСтрока = Материалы.Найти(ВыборкаРаботыМатериалы.НомерСтроки,"НомерСтроки");
						Если НЕ ПустаяСтрока(НайденнаяСтрока.КодСтрокиЗаказа) Тогда
							СтрокаТекКод = Строка(КодСтрокиТребуется);
							ДлинаСтрокиТекКод = СтрДлина(КодСтрокиТребуется);
							Если НайденнаяСтрока.КодСтрокиЗаказа = СтрокаТекКод Тогда 
								НайденнаяСтрока.КодСтрокиЗаказа = "";
							ИначеЕсли Лев(НайденнаяСтрока.КодСтрокиЗаказа, ДлинаСтрокиТекКод + 1) = СтрокаТекКод + "," Тогда 
								НайденнаяСтрока.КодСтрокиЗаказа = Сред(НайденнаяСтрока.КодСтрокиЗаказа, ДлинаСтрокиТекКод + 2);
							ИначеЕсли Прав(НайденнаяСтрока.КодСтрокиЗаказа, ДлинаСтрокиТекКод + 1) = "," + СтрокаТекКод Тогда
								НайденнаяСтрока.КодСтрокиЗаказа = Лев(НайденнаяСтрока.КодСтрокиЗаказа, СтрДлина(НайденнаяСтрока.КодСтрокиЗаказа) - ДлинаСтрокиТекКод - 1);
							Иначе
								Позиция = СтрНайти(НайденнаяСтрока.КодСтрокиЗаказа, "," + СтрокаТекКод + ",");                                                              
								Если Позиция > 0 Тогда 
									НайденнаяСтрока.КодСтрокиЗаказа = Лев(НайденнаяСтрока.КодСтрокиЗаказа, Позиция) + Сред(НайденнаяСтрока.КодСтрокиЗаказа, Позиция + ДлинаСтрокиТекКод + 2);
								КонецЕсли;
							КонецЕсли;	
						КонецЕсли;
					КонецЕсли;	
				Иначе
					НовСтрока.Отменено = Ложь;
				КонецЕсли;	
				
				Если ОбновитьКодСтроки Тогда 
					
					НовСтрока.КодСтроки = ТекущийКод;
					НовСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется;
				
					Если ВыборкаРаботыМатериалы.ЭтоРабота Тогда 
						НайденнаяСтрока = Работы.Найти(ВыборкаРаботыМатериалы.НомерСтроки,"НомерСтроки");
						НайденнаяСтрока.КодСтрокиЗаказа = ТекущийКод;
					Иначе
						НайденнаяСтрока = Материалы.Найти(ВыборкаРаботыМатериалы.НомерСтроки,"НомерСтроки");
						Если ПустаяСтрока(НайденнаяСтрока.КодСтрокиЗаказа) Тогда 
							НайденнаяСтрока.КодСтрокиЗаказа = ТекущийКод;
						Иначе
							НайденнаяСтрока.КодСтрокиЗаказа = НайденнаяСтрока.КодСтрокиЗаказа + "," + ТекущийКод;
						КонецЕсли;	
					КонецЕсли;
					МассивКодовСтрокЗаказа.Добавить(Строка(ТекущийКод));
				КонецЕсли;	
			КонецЦикла;
			ЗаказНаРемонтОбъект.МаксимальныйКодСтрокиНоменклатуры = ТекущийКод;
			ЗаказНаРемонтОбъект.МаксимальныйКодРемонта = ТекущийКодРемонта;
			
			//очистим строки, которых нет в заказ-наряде
			Для Каждого СтрМатериалыИРаботы Из ЗаказНаРемонтОбъект.МатериалыИРаботы Цикл
				Если МассивКодовСтрокЗаказа.Найти(Строка(СтрМатериалыИРаботы.КодСтроки)) = Неопределено И Не СтрМатериалыИРаботы.Отменено
					Тогда 
					СтрМатериалыИРаботы.Отменено = Истина;
				КонецЕсли;
			КонецЦикла;	
			
			//Попытка
				ЗаказНаРемонтОбъект.Записать(РежимЗаписиДокумента.Запись);
				ЗаказНаРемонт = ЗаказНаРемонтОбъект.Ссылка;
			//Исключение
			//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			//	Отказ = Истина;
			//КонецПопытки;
			
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(ЗаказНаРемонт) Тогда 
		//поменяем статус заказа клиента
			ЗаказНаРемонтОбъект = ЗаказНаРемонт.ПолучитьОбъект();
			ЗаказНаРемонтОбъект.Статус = Перечисления.СтатусыЗаказовНаРемонт.Создан;
			//очистим строки, которых нет в заказ-наряде
			Для Каждого СтрМатериалыИРаботы Из ЗаказНаРемонтОбъект.МатериалыИРаботы Цикл
				СтрМатериалыИРаботы.Отменено = Истина;
			КонецЦикла; 
			ЗаказНаРемонтОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
				
	КонецЕсли;	
	
//Рарус Владимир Подрезов 14.06.2017
	Если ЗначениеЗаполнено(ЗаказКлиента) И Не ЗаказКлиента.ПометкаУдаления Тогда 
		
		//Если есть ЗаказНаРемонт, то все расходные ордера перевешываем на него
		Если ЗначениеЗаполнено(ЗаказКлиента) Тогда
			ИзменитьРаспоряжениеВДокументах(ЗаказНаРемонт, ЗаказКлиента, "МатериалыИРаботы", "Товары");
			ЗаказКлиента = "";
		КонецЕсли;
	КонецЕсли;
//Рарус Владимир Подрезов Конец

КонецПроцедуры

//Рарус Владимир Подрезов 20.06.2017
Процедура ИзменитьРаспоряжениеВДокументах(НовоеРаспоряжение, СтароеРаспоряжение, ТабТовары, ТабТоварыСтарые)
	
	Если ЗначениеЗаполнено(СтароеРаспоряжение) И Не СтароеРаспоряжение.ПометкаУдаления Тогда 
		Если ЗначениеЗаполнено(НовоеРаспоряжение) Тогда
			
			ЗапросОрдера = Новый Запрос;
			ЗапросОрдера.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка КАК Ордер,
			|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка.Статус КАК Статус
			|ИЗ
			|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
			|ГДЕ
			|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение = &Распоряжение
			|	И НЕ РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка.ПометкаУдаления
			|	И РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка.Проведен";
			ЗапросОрдера.УстановитьПараметр("Распоряжение", СтароеРаспоряжение);
			
			Ордера	= ЗапросОрдера.Выполнить().Выгрузить();
			Отборы	= Новый Массив;
			
			Если Ордера.Количество() > 0 Тогда
				ЗапросОтборы = Новый Запрос;
				ЗапросОтборы.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ОтборРазмещениеТоваров.Ссылка КАК Отбор,
				|	ОтборРазмещениеТоваров.Статус
				|ИЗ
				|	Документ.ОтборРазмещениеТоваров КАК ОтборРазмещениеТоваров
				|ГДЕ
				|	ОтборРазмещениеТоваров.Распоряжение В(&Распоряжения)
				|	И НЕ ОтборРазмещениеТоваров.Ссылка.ПометкаУдаления
				|	И ОтборРазмещениеТоваров.Ссылка.Проведен";
				ЗапросОтборы.УстановитьПараметр("Распоряжения", Ордера.ВыгрузитьКолонку("Ордер"));
				Отборы = ЗапросОтборы.Выполнить().Выгрузить();
			
				Для Каждого текСтрока Из Ордера Цикл
					
					Если текСтрока.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен Тогда
						
						тОбъект = текСтрока.Ордер.ПолучитьОбъект();
						
						тОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтбору;
						
						Для Каждого текСтрокаДок Из тОбъект.ОтгружаемыеТовары Цикл
							текСтрокаДок.Действие	= Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать;
						КонецЦикла;
						
						Попытка
							тОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
						Исключение
							ОписаниеОшибки = ОписаниеОшибки();
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
							Отказ = Истина;
							Возврат;
						КонецПопытки;
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого текСтрока Из Отборы Цикл
					
					тОбъект = текСтрока.Отбор.ПолучитьОбъект();
					
					Попытка
						тОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					Исключение
						ОписаниеОшибки = ОписаниеОшибки();
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
						Отказ = Истина;
						Возврат;
					КонецПопытки;
				КонецЦикла;
			
				Для Каждого текСтрока Из Ордера Цикл
					
					тОбъект = текСтрока.Ордер.ПолучитьОбъект();
						
					Попытка
						тОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					Исключение
						ОписаниеОшибки = ОписаниеОшибки();
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
						Отказ = Истина;
						Возврат;
					КонецПопытки;
				КонецЦикла;
			КонецЕсли;
			
			//-ЗаказНаРемонт нужно пометить на удаление и очистить таблицу
			тОбъект = СтароеРаспоряжение.ПолучитьОбъект();
			Попытка
				тОбъект.УстановитьПометкуУдаления(Истина);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				Отказ = Истина;
				Возврат;
			КонецПопытки;
			тОбъект[ТабТоварыСтарые].Очистить();
			Попытка
				тОбъект.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				Отказ = Истина;
				Возврат;
			КонецПопытки;
			
			//-Новое Размещение нужно провести
			тОбъект = НовоеРаспоряжение.ПолучитьОбъект();
			Для Каждого текСтрокаДок Из тОбъект[ТабТовары] Цикл
				Если текСтрокаДок.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
					текСтрокаДок.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
				КонецЕсли;
			КонецЦикла;
			Попытка
				тОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				Отказ = Истина;
				Возврат;
			КонецПопытки;
			
	        //...и перекинуть всю цепочку
			Для Каждого текСтрока Из Ордера Цикл
				
				тОбъект = текСтрока.Ордер.ПолучитьОбъект();
				
//Раурус Владимир Подрезов 29.09.2017
				Если ТипЗнч(НовоеРаспоряжение) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
					тОбъект.Получатель			= Клиент;
					тОбъект.СкладскаяОперация	= Перечисления.СкладскиеОперации.ОтгрузкаКлиенту;
				ИначеЕсли ТипЗнч(НовоеРаспоряжение) = Тип("ДокументСсылка.ЗаказНаРемонт") Тогда
					тОбъект.Получатель			= Подразделение;
					тОбъект.СкладскаяОперация	= Перечисления.СкладскиеОперации.ОтгрузкаНаВнутренниеНужды;
				КонецЕсли;
//Раурус Владимир Подрезов Конец
				тОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтбору;
				
				Для Каждого текСтрокаДок Из тОбъект.ТоварыПоРаспоряжениям Цикл
					Если текСтрокаДок.Распоряжение = СтароеРаспоряжение Тогда
						текСтрокаДок.Распоряжение	= НовоеРаспоряжение;
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого текСтрокаДок Из тОбъект.ОтгружаемыеТовары Цикл
					текСтрокаДок.Действие	= Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать;
				КонецЦикла;
				
				Попытка
					тОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				Исключение
					ОписаниеОшибки = ОписаниеОшибки();
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
					Отказ = Истина;
					Возврат;
				КонецПопытки;
			КонецЦикла;
			
			Для Каждого текСтрока Из Отборы Цикл
				
				тОбъект = текСтрока.Отбор.ПолучитьОбъект();
				
				тОбъект.Статус	= Перечисления.СтатусыОтборовРазмещенийТоваров.ВРаботе;
				
				Попытка
					тОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				Исключение
					ОписаниеОшибки = ОписаниеОшибки();
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
					Отказ = Истина;
					Возврат;
				КонецПопытки;
				
				Если текСтрока.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок Тогда
					
					тОбъект.Статус	= Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок;
					
					Попытка
						тОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
					Исключение
						ОписаниеОшибки = ОписаниеОшибки();
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
						Отказ = Истина;
						Возврат;
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
		
			Для Каждого текСтрока Из Ордера Цикл
				
				Если текСтрока.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен Тогда
					
					тОбъект = текСтрока.Ордер.ПолучитьОбъект();
					
					тОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
					
					Для Каждого текСтрокаДок Из тОбъект.ОтгружаемыеТовары Цикл
						текСтрокаДок.Действие	= Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
					КонецЦикла;
					
					Попытка
						тОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
					Исключение
						ОписаниеОшибки = ОписаниеОшибки();
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
						Отказ = Истина;
						Возврат;
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 27.10.2017
Процедура ИзменитьКонтрагентаВДокументах()
	
	Если ЗначениеЗаполнено(ЗаказКлиента) И Не ЗаказКлиента.ПометкаУдаления Тогда 
			
		ЗапросОрдера = Новый Запрос;
		ЗапросОрдера.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка КАК Ордер,
		|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка.Статус КАК Статус
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
		|ГДЕ
		|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение = &Распоряжение
		|	И НЕ РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка.ПометкаУдаления
		|	И РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка.Проведен";
		ЗапросОрдера.УстановитьПараметр("Распоряжение", ЗаказКлиента);
		
		Ордера	= ЗапросОрдера.Выполнить().Выгрузить();
		Отборы	= Новый Массив;
		
		Если Ордера.Количество() > 0 Тогда
			ЗапросОтборы = Новый Запрос;
			ЗапросОтборы.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ОтборРазмещениеТоваров.Ссылка КАК Отбор,
			|	ОтборРазмещениеТоваров.Статус
			|ИЗ
			|	Документ.ОтборРазмещениеТоваров КАК ОтборРазмещениеТоваров
			|ГДЕ
			|	ОтборРазмещениеТоваров.Распоряжение В(&Распоряжения)
			|	И НЕ ОтборРазмещениеТоваров.Ссылка.ПометкаУдаления
			|	И ОтборРазмещениеТоваров.Ссылка.Проведен";
			ЗапросОтборы.УстановитьПараметр("Распоряжения", Ордера.ВыгрузитьКолонку("Ордер"));
			Отборы = ЗапросОтборы.Выполнить().Выгрузить();
		
			Для Каждого текСтрока Из Ордера Цикл
				
				Если текСтрока.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен Тогда
					
					тОбъект = текСтрока.Ордер.ПолучитьОбъект();
					
					тОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтбору;
					
					Для Каждого текСтрокаДок Из тОбъект.ОтгружаемыеТовары Цикл
						текСтрокаДок.Действие	= Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать;
					КонецЦикла;
					
					Попытка
						тОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
					Исключение
						ОписаниеОшибки = ОписаниеОшибки();
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
						Отказ = Истина;
						Возврат;
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого текСтрока Из Отборы Цикл
				
				тОбъект = текСтрока.Отбор.ПолучитьОбъект();
				
				Попытка
					тОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Исключение
					ОписаниеОшибки = ОписаниеОшибки();
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
					Отказ = Истина;
					Возврат;
				КонецПопытки;
			КонецЦикла;
		
			Для Каждого текСтрока Из Ордера Цикл
				
				тОбъект = текСтрока.Ордер.ПолучитьОбъект();
					
				Попытка
					тОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Исключение
					ОписаниеОшибки = ОписаниеОшибки();
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
					Отказ = Истина;
					Возврат;
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;
		
		тОбъект = ЗаказКлиента.ПолучитьОбъект();
		тОбъект.Партнер				= Клиент;
		ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(тОбъект.Партнер, тОбъект.Контрагент);
		Попытка
			тОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			Отказ = Истина;
			Возврат;
		КонецПопытки;
				
		//...и перекинуть всю цепочку
		Для Каждого текСтрока Из Ордера Цикл
			
			тОбъект = текСтрока.Ордер.ПолучитьОбъект();
			
			тОбъект.Получатель			= Клиент;
			тОбъект.СкладскаяОперация	= Перечисления.СкладскиеОперации.ОтгрузкаКлиенту;
			тОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтбору;
			
			Для Каждого текСтрокаДок Из тОбъект.ОтгружаемыеТовары Цикл
				текСтрокаДок.Действие	= Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать;
			КонецЦикла;
			
			Попытка
				тОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
				Отказ = Истина;
				Возврат;
			КонецПопытки;
		КонецЦикла;
		
		Для Каждого текСтрока Из Отборы Цикл
			
			тОбъект = текСтрока.Отбор.ПолучитьОбъект();
			
			тОбъект.Статус	= Перечисления.СтатусыОтборовРазмещенийТоваров.ВРаботе;
			
			Попытка
				тОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
				Отказ = Истина;
				Возврат;
			КонецПопытки;
			
			Если текСтрока.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок Тогда
				
				тОбъект.Статус	= Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок;
				
				Попытка
					тОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				Исключение
					ОписаниеОшибки = ОписаниеОшибки();
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
					Отказ = Истина;
					Возврат;
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	
		Для Каждого текСтрока Из Ордера Цикл
			
			Если текСтрока.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен Тогда
				
				тОбъект = текСтрока.Ордер.ПолучитьОбъект();
				
				тОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
				
				Для Каждого текСтрокаДок Из тОбъект.ОтгружаемыеТовары Цикл
					текСтрокаДок.Действие	= Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
				КонецЦикла;
				
				Попытка
					тОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				Исключение
					ОписаниеОшибки = ОписаниеОшибки();
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
					Отказ = Истина;
					Возврат;
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры	
//Рарус Владимир Подрезов Конец

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	//Если Статус = Перечисления.пкСтатусыЗаказНарядов.ВРаботе И Не ЗначениеЗаполнено(ДатаОкончания) Тогда 
	//	ТекстСообщения = НСтр("ru = 'Необходимо заполнить планируемую дату завершения ремонта!'");
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,"ДатаОкончания","Объект",Отказ);
	//КонецЕсли;
	Если Не ТехникаКлиента Тогда 
		ПроверяемыеРеквизиты.Добавить("Техника");
	КонецЕсли;	
	
КонецПроцедуры

//Рарус Владимир Подрезов 09.06.2017
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если Статус = Перечисления.пкСтатусыЗаказНарядов.Закрыт Тогда
		ОтработатьОтменуЗакрытияЗаказНаряда(Отказ);
	КонецЕсли;    
	
КонецПроцедуры

Процедура ОтработатьОтменуЗакрытияЗаказНаряда(Отказ)
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Если ЗначениеЗаполнено(ЗаказКлиента) И ПлатныйРемонт И ТехникаКлиента Тогда 
		Реализация = Документы.РеализацияТоваровУслуг.НайтиПоРеквизиту("ЗаказКлиента", ЗаказКлиента);
		Если ЗначениеЗаполнено(Реализация) Тогда 
			ДокументРеализация = Реализация.ПолучитьОбъект();
			Попытка
				ДокументРеализация.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Исключение
				Отказ = Истина;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				ВызватьИсключение;
			КонецПопытки;
		КонецЕсли;	
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ЗаказНаРемонт) И НЕ(ПлатныйРемонт И ТехникаКлиента) Тогда 
        Если Материалы.Количество() > 0 Тогда
			
			Запрос = Новый Запрос;
            Запрос.Текст = 
            "ВЫБРАТЬ
            |   ВнутреннееПотреблениеТоваров.Ссылка,
            |   ВнутреннееПотреблениеТоваров.Организация
            |ИЗ
            |   Документ.ВнутреннееПотреблениеТоваров КАК ВнутреннееПотреблениеТоваров
            |ГДЕ
            |   ВнутреннееПотреблениеТоваров.ЗаказНаВнутреннееПотребление = &ЗаказНаВнутреннееПотребление
            |   И (ВнутреннееПотреблениеТоваров.Организация = &Организация
            |           ИЛИ ВнутреннееПотреблениеТоваров.Организация = &ОрганизацияУпр)
            |   И НЕ ВнутреннееПотреблениеТоваров.ПометкаУдаления";
            
            Запрос.УстановитьПараметр("ЗаказНаВнутреннееПотребление", ЗаказНаРемонт);
            Запрос.УстановитьПараметр("Организация",                  ЗаказНаРемонт.Организация);
            Запрос.УстановитьПараметр("ОрганизацияУпр",               Справочники.Организации.УправленческаяОрганизация);
            
            Результат = Запрос.Выполнить();
            Выборка = Результат.Выбрать();
            
            ВнутрПотр    = Неопределено;
            ВнутрПотрУпр = Неопределено;
            
            Пока Выборка.Следующий() Цикл
				ДокумнтВнутреннееПотребление = Выборка.Ссылка.ПолучитьОбъект();
                Попытка
                	ДокумнтВнутреннееПотребление.Записать(РежимЗаписиДокумента.ОтменаПроведения);
                Исключение
                	Отказ = Истина;
                	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
                КонецПопытки;
            КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
	Иначе 
		ЗафиксироватьТранзакцию();
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если (ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения ИЛИ ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение)
		И Статус = Перечисления.пкСтатусыЗаказНарядов.Закрыт И ДатаЗакрытия <> '00010101'
		И (ЕстьМатериалы ИЛИ ПлатныйРемонт ИЛИ ТехникаКлиента)
	Тогда
		ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюДокумента(ЭтотОбъект, Отказ, РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	КонецЕсли;
	
//Рарус Владимир Подрезов 07.09.2017  5608
	Если ЗначениеЗаполнено(Техника) Тогда
	
		УстановитьПривилегированныйРежим(Истина);
		
		Для Каждого текСтрока Из Работы Цикл
			
			Если ЗначениеЗаполнено(текСтрока.ЗаданиеНаРемонт) 
				И Не ЗначениеЗаполнено(текСтрока.ЗаданиеНаРемонт.ОбъектЭксплуатации) Тогда
				
				тОбъект = текСтрока.ЗаданиеНаРемонт.ПолучитьОбъект();
				Если тОбъект = Неопределено Тогда //Объекта нет в системе
					Продолжить;
				КонецЕсли;
				
				тОбъект.ОбъектЭксплуатации = Техника;
				Попытка
					тОбъект.Записать(?(тОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись), РежимПроведенияДокумента.Неоперативный);
				Исключение
					тОписание = ОписаниеОшибки();
					тСообщение = Новый СообщениеПользователю;
					тСообщение.Текст = тОписание;
					тСообщение.Сообщить();
					Прервать;
				КонецПопытки;
			КонецЕсли;
			
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
//Рарус Владимир Подрезов Конец
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ДатаНачалаФакт = Неопределено;
	ДатаОкончанияФакт = неопределено;
	
КонецПроцедуры
//Рарус Владимир Подрезов КОНЕЦ
