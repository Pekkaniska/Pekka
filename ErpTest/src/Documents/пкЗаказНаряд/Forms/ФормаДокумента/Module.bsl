&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ДокументЗакрыт; //используется механизмом обработки изменения реквизитов ТЧ

//Рарус Владимир Подрезов 18.04.2017
&НаСервереБезКонтекста
Функция ТекущаяДатаНаСервере()
	Возврат ТекущаяДатаСеанса();
КонецФункции	
//Рарус Владимир Подрезов Конец

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизитаНаСервере(тОбъект, тРеквизит)
	Возврат тОбъект[тРеквизит];
КонецФункции	

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	///////////////	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
		
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьВидимостьКолонокПлатныхРемонтов();
	ПроверитьПлановуюКалькуляцию();
	
	Если Объект.Ссылка.Пустая() Тогда 
		Объект.Статус = Перечисления.пкСтатусыЗаказНарядов.Запланирован;
		//Объект.ДатаНачалаФакт = "";
		//Объект.ДатаОкончанияФакт = "";
		Объект.ТехникаГотова = Ложь;
		Объект.ЗаказКлиента = Неопределено;
		Объект.ЗаказНаРемонт = Неопределено;
		Для Каждого СтрМат Из Объект.Материалы Цикл
			СтрМат.КодСтрокиЗаказа = "";
			СтрМат.КоличествоВыдано = 0;
		КонецЦикла;
		Для Каждого СтрРаб Из Объект.Работы Цикл
			СтрРаб.КодСтрокиЗаказа = "";
			СтрРаб.Начало = Ложь;
			СтрРаб.ДатаНачала = "";
			СтрРаб.Окончание = Ложь;
			СтрРаб.ДатаОкончания = "";
        КонецЦикла;	
        
        //+++rarus-spb_zlov 17.01.2017    
        Объект.СтатьяРасходов = ПолучитьСтатьюРасходов();
        //---rarus-spb_zlov 17.01.2017 

	КонецЕсли;	
	
	ОбновитьСисокВидовРемонта();
	ОбновитьДоступностьКомандВыдачиВозвратаМатериалов();
	ОбновитьСерийныйНомер();
	ОбновитьСписокСтатусов();
	//ОбновитьКоличествоВыдано();
	//ПереключательВидРемонта = Объект.Ремонты.Количество() > 1;
	//ОбновитьВидимостьВидовРемонта();
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
	ЗаполнитьНачалоОкончаниеРабот();
	ОбновитьКоличествоВыдано();
	ОбновитьСписокСтатусов();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокСтатусов()
	
	Элементы.Статус.СписокВыбора.Очистить();
	Если Объект.Статус = Перечисления.пкСтатусыЗаказНарядов.Запланирован Тогда
		Элементы.Статус.СписокВыбора.Добавить(Перечисления.пкСтатусыЗаказНарядов.Открыт);
		Элементы.Статус.СписокВыбора.Добавить(Перечисления.пкСтатусыЗаказНарядов.Запланирован);
		Элементы.Статус.СписокВыбора.Добавить(Перечисления.пкСтатусыЗаказНарядов.Отложен);
	ИначеЕсли Объект.Статус = Перечисления.пкСтатусыЗаказНарядов.Открыт Тогда
		Элементы.Статус.СписокВыбора.Добавить(Перечисления.пкСтатусыЗаказНарядов.Запланирован);
		Элементы.Статус.СписокВыбора.Добавить(Перечисления.пкСтатусыЗаказНарядов.Открыт);
		Элементы.Статус.СписокВыбора.Добавить(Перечисления.пкСтатусыЗаказНарядов.ВРаботе);
		Элементы.Статус.СписокВыбора.Добавить(Перечисления.пкСтатусыЗаказНарядов.Отложен);
	ИначеЕсли Объект.Статус = Перечисления.пкСтатусыЗаказНарядов.ВРаботе Тогда
		Элементы.Статус.СписокВыбора.Добавить(Перечисления.пкСтатусыЗаказНарядов.Открыт);
		Элементы.Статус.СписокВыбора.Добавить(Перечисления.пкСтатусыЗаказНарядов.ВРаботе);
		Элементы.Статус.СписокВыбора.Добавить(Перечисления.пкСтатусыЗаказНарядов.Выполнен);
		Элементы.Статус.СписокВыбора.Добавить(Перечисления.пкСтатусыЗаказНарядов.Отложен);
	ИначеЕсли Объект.Статус = Перечисления.пкСтатусыЗаказНарядов.Выполнен Тогда 
		Элементы.Статус.СписокВыбора.Добавить(Перечисления.пкСтатусыЗаказНарядов.ВРаботе);
		Элементы.Статус.СписокВыбора.Добавить(Перечисления.пкСтатусыЗаказНарядов.Выполнен);
		Если РольДоступна("пкЗакрытиеЗаказНаряда") ИЛИ РольДоступна("ПолныеПрава") ИЛИ РольДоступна("пкПолныеПрава") Тогда 
			Элементы.Статус.СписокВыбора.Добавить(Перечисления.пкСтатусыЗаказНарядов.Закрыт);
		КонецЕсли;	
		Элементы.Статус.СписокВыбора.Добавить(Перечисления.пкСтатусыЗаказНарядов.Отложен);
	ИначеЕсли Объект.Статус = Перечисления.пкСтатусыЗаказНарядов.Отложен Тогда 
		Элементы.Статус.СписокВыбора.Добавить(Перечисления.пкСтатусыЗаказНарядов.Отложен);
		Элементы.Статус.СписокВыбора.Добавить(Перечисления.пкСтатусыЗаказНарядов.Запланирован);
		Элементы.Статус.СписокВыбора.Добавить(Перечисления.пкСтатусыЗаказНарядов.Открыт);
		Элементы.Статус.СписокВыбора.Добавить(Перечисления.пкСтатусыЗаказНарядов.ВРаботе);
		Элементы.Статус.СписокВыбора.Добавить(Перечисления.пкСтатусыЗаказНарядов.Выполнен);
	ИначеЕсли Объект.Статус = Перечисления.пкСтатусыЗаказНарядов.Закрыт Тогда
		Элементы.Статус.СписокВыбора.Добавить(Перечисления.пкСтатусыЗаказНарядов.Закрыт);
		Если РольДоступна("пкЗакрытиеЗаказНаряда") ИЛИ РольДоступна("ПолныеПрава") ИЛИ РольДоступна("пкПолныеПрава") Тогда 
			Элементы.Статус.СписокВыбора.Добавить(Перечисления.пкСтатусыЗаказНарядов.Выполнен);
			Элементы.Статус.СписокВыбора.Добавить(Перечисления.пкСтатусыЗаказНарядов.Отложен);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ВыдатьСоСклада(Команда)
	
	Если Объект.ТехникаКлиента И Не ЗначениеЗаполнено(Объект.Клиент) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для выдачи материалов необходимо заполнить поле Клиент!",,"Клиент");
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ЗонаОтгрузки) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для выдачи материалов необходимо заполнить поле Зона отгрузки!",,"ЗонаОтгрузки");
		Возврат;
	КонецЕсли;
	Если Модифицированность ИЛИ НЕ Объект.Проведен Тогда
		ПараметрыОповещения = Новый Структура("ОткрытьФормуВыдачи",Истина);
        Оповещение = Новый ОписаниеОповещения("ОбработкаВопросаЗаписьОбъекта", ЭтаФорма, ПараметрыОповещения);
    	ПоказатьВопрос(Оповещение, "Перед выдачей запчастей необходимо провести документ!", РежимДиалогаВопрос.ОК, 60, КодВозвратаДиалога.ОК);
		//Если Вопрос("Перед выдачей запчастей необходимо провести документ! Продолжить?",РежимДиалогаВопрос.ДаНетОтмена,60,КодВозвратаДиалога.Да) = КодВозвратаДиалога.Да Тогда 
		//	ПараметрыЗаписи = Новый Структура;
		//	ПараметрыЗаписи.Вставить("РежимПроведения", РежимПроведенияДокумента.Неоперативный);
		//	ПараметрыЗаписи.Вставить("ПринудительноЗакрытьФорму", Ложь);
		//	ПараметрыЗаписи.Вставить("НовыйОбъект", Не ЗначениеЗаполнено(Объект.Ссылка));
		//	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
		//	ЭтаФорма.Записать(ПараметрыЗаписи);
		//КонецЕсли;
	Иначе
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ЗаказНаряд",Объект.Ссылка);
		ПараметрыФормы.Вставить("Период",ТекущаяДатаНаСервере());
		ПараметрыФормы.Вставить("Склад",Объект.Склад);
		ПараметрыФормы.Вставить("ЗонаОтгрузки",Объект.ЗонаОтгрузки);
		ПараметрыФормы.Вставить("ЗаказКлиента",Объект.ЗаказКлиента);
		ПараметрыФормы.Вставить("ЗаказНаРемонт",Объект.ЗаказНаРемонт);
		//+++DubI Рарус-СПб 17.01.2017
		ПараметрыФормы.Вставить("СкладскаяЯчейкаПользователя",ПолучитьЗначениеРеквизита(ПользователиКлиентСервер.ТекущийПользователь(), "пкСкладскаяЯчейка"));//Объект.Ответственный, "пкСкладскаяЯчейка"));
		//---DubI Рарус-СПб
		ОткрытьФорму("Документ.пкЗаказНаряд.Форма.ФормаВыдачаСоСклада",ПараметрыФормы,ЭтаФорма);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьНаСклад(Команда)
	
	Если Модифицированность ИЛИ НЕ Объект.Проведен Тогда
		ПараметрыОповещения = Новый Структура("ОткрытьФормуВозврата",Истина);
        Оповещение = Новый ОписаниеОповещения("ОбработкаВопросаЗаписьОбъекта", ЭтаФорма, ПараметрыОповещения);
    	ПоказатьВопрос(Оповещение, "Перед возвратом запчастей необходимо провести документ! Продолжить?", РежимДиалогаВопрос.ДаНетОтмена, 60, КодВозвратаДиалога.Да);
		//Если Вопрос("Перед выдачей запчастей необходимо провести документ! Продолжить?",РежимДиалогаВопрос.ДаНетОтмена,60,КодВозвратаДиалога.Да) = КодВозвратаДиалога.Да Тогда 
		//	ПараметрыЗаписи = Новый Структура;
		//	ПараметрыЗаписи.Вставить("РежимПроведения", РежимПроведенияДокумента.Неоперативный);
		//	ПараметрыЗаписи.Вставить("ПринудительноЗакрытьФорму", Ложь);
		//	ПараметрыЗаписи.Вставить("НовыйОбъект", Не ЗначениеЗаполнено(Объект.Ссылка));
		//	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
		//	ЭтаФорма.Записать(ПараметрыЗаписи);
		//КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Объект.ЗонаОтгрузки) Тогда 
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("ЗаказНаряд",Объект.Ссылка);
			ПараметрыФормы.Вставить("ЗаказКлиента",Объект.ЗаказКлиента);
			ПараметрыФормы.Вставить("ЗаказНаРемонт",Объект.ЗаказНаРемонт);
			ПараметрыФормы.Вставить("Период",ТекущаяДатаНаСервере());
			ПараметрыФормы.Вставить("Склад",Объект.Склад);
			ПараметрыФормы.Вставить("ЗонаОтгрузки",Объект.ЗонаОтгрузки);
			//+++DubI Рарус-СПб 17.01.2017
			ПараметрыФормы.Вставить("СкладскаяЯчейкаПользователя",ПолучитьЗначениеРеквизита(ПользователиКлиентСервер.ТекущийПользователь(), "пкСкладскаяЯчейка"));//Объект.Ответственный, "пкСкладскаяЯчейка"));
			//---DubI Рарус-СПб
			ОткрытьФорму("Документ.пкЗаказНаряд.Форма.ФормаВозвратаНаСклад",ПараметрыФормы,ЭтаФорма);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для возврата материалов необходимо заполнить Зону отгрузки!",,"ЗонаОтгрузки");
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВопросаЗаписьОбъекта(Результат, ПараметрыОповещения) Экспорт
	
    Если Результат = КодВозвратаДиалога.Да Тогда
        ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("РежимПроведения", РежимПроведенияДокумента.Неоперативный);
		ПараметрыЗаписи.Вставить("ПринудительноЗакрытьФорму", Ложь);
		ПараметрыЗаписи.Вставить("НовыйОбъект", Не ЗначениеЗаполнено(Объект.Ссылка));
		ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
		ЭтаФорма.Записать(ПараметрыЗаписи);
	
		Если ПараметрыОповещения.Свойство("ОткрытьФормуВыдачи") Тогда 
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("ЗаказНаряд",Объект.Ссылка);
			ПараметрыФормы.Вставить("ЗаказНаРемонт",Объект.ЗаказНаРемонт);
			ПараметрыФормы.Вставить("ЗаказКлиента",Объект.ЗаказКлиента);
			ПараметрыФормы.Вставить("Период",ТекущаяДатаНаСервере());
			ПараметрыФормы.Вставить("Склад",Объект.Склад);
			ОткрытьФорму("Документ.пкЗаказНаряд.Форма.ФормаВыдачаСоСклада",ПараметрыФормы,ЭтаФорма);
		КонецЕсли;
		
		Если ПараметрыОповещения.Свойство("ОткрытьФормуВозврата") Тогда 
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("ЗаказНаряд",Объект.Ссылка);
			ПараметрыФормы.Вставить("ЗаказНаРемонт",Объект.ЗаказНаРемонт);		
			ПараметрыФормы.Вставить("ЗаказКлиента",Объект.ЗаказКлиента);
			ПараметрыФормы.Вставить("Период",ТекущаяДатаНаСервере());
			ПараметрыФормы.Вставить("Склад",Объект.Склад);
			ПараметрыФормы.Вставить("ЗонаОтгрузки",Объект.ЗонаОтгрузки);
			ОткрытьФорму("Документ.пкЗаказНаряд.Форма.ФормаВозвратаНаСклад",ПараметрыФормы,ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
        
КонецПроцедуры    

&НаСервере
Процедура УстановитьВидимостьКолонокПлатныхРемонтов() 
	
	//Для Каждого СтрРем Из Объект.Ремонты Цикл
	//	Если СтрРем.ПлатныйРемонт Тогда 
	//			УстановитьВидимостьДоступностьСпискаЭлементов("МатериалыЦена,МатериалыСумма,МатериалыСтавкаНДС,МатериалыСуммаНДС,МатериалыСуммаСНДС
	//			|,РаботыЦена,РаботыСумма,РаботыСтавкаНДС,РаботыСуммаНДС,РаботыСуммаСНДС,ЦенаВключаетНДС,НалогообложениеНДС
	//			|,ПлановыеМатериалыЦена,ПлановыеМатериалыСумма,ПлановыеМатериалыСтавкаНДС,ПлановыеМатериалыСуммаНДС,ПлановыеМатериалыСуммаСНДС
	//			|,ПлановыеРаботыЦена,ПлановыеРаботыСумма,ПлановыеРаботыСтавкаНДС,ПлановыеРаботыСуммаНДС,ПлановыеРаботыСуммаСНДС
	//			|,Валюта,ЦенаВключаетНДС,НалогообложениеНДС,ВидЦен", Истина, Истина);
	//			Возврат;	
	//	КонецЕсли;
	//КонецЦикла;
	//УстановитьВидимостьДоступностьСпискаЭлементов("МатериалыЦена,МатериалыСумма,МатериалыСтавкаНДС,МатериалыСуммаНДС,МатериалыСуммаСНДС
	//			|,РаботыЦена,РаботыСумма,РаботыСтавкаНДС,РаботыСуммаНДС,РаботыСуммаСНДС,ЦенаВключаетНДС,НалогообложениеНДС
	//			|,ПлановыеМатериалыЦена,ПлановыеМатериалыСумма,ПлановыеМатериалыСтавкаНДС,ПлановыеМатериалыСуммаНДС,ПлановыеМатериалыСуммаСНДС
	//			|,ПлановыеРаботыЦена,ПлановыеРаботыСумма,ПлановыеРаботыСтавкаНДС,ПлановыеРаботыСуммаНДС,ПлановыеРаботыСуммаСНДС
	//			|,Валюта,ЦенаВключаетНДС,НалогообложениеНДС,ВидЦен", Ложь, Ложь);
	
	ДоступенПросмотрЦен = РольДоступна(Метаданные.Роли.пкДоступВидимостьЦенВЗаказНаряде) ИЛИ РольДоступна(Метаданные.Роли.ПолныеПрава) ИЛИ РольДоступна(Метаданные.Роли.пкПолныеПрава); 
//Рарус Владимир Подрезов 27.12.2016
	//УстановитьВидимостьДоступностьСпискаЭлементов("МатериалыЦена,МатериалыСумма,МатериалыСтавкаНДС,МатериалыСуммаНДС,МатериалыСуммаСНДС
	//			|,РаботыЦена,РаботыСумма,РаботыСтавкаНДС,РаботыСуммаНДС,РаботыСуммаСНДС,ЦенаВключаетНДС,НалогообложениеНДС
	//			|,ПлановыеМатериалыЦена,ПлановыеМатериалыСумма,ПлановыеМатериалыСтавкаНДС,ПлановыеМатериалыСуммаНДС,ПлановыеМатериалыСуммаСНДС
	//			|,ПлановыеРаботыЦена,ПлановыеРаботыСумма,ПлановыеРаботыСтавкаНДС,ПлановыеРаботыСуммаНДС,ПлановыеРаботыСуммаСНДС
	//			|,Валюта,ЦенаВключаетНДС,НалогообложениеНДС,ВидЦен", Объект.ПлатныйРемонт И ДоступенПросмотрЦен, Объект.ПлатныйРемонт И ДоступенПросмотрЦен);
	УстановитьВидимостьДоступностьСпискаЭлементов("МатериалыЦена,МатериалыСумма,МатериалыСтавкаНДС,МатериалыСуммаНДС,МатериалыСуммаСНДС,МатериалыПроцентРучнойСкидки,МатериалыСуммаРучнойСкидки,МатериалыГруппаСкидки
				|,РаботыКоличествоРеализация,РаботыЦена,РаботыСумма,РаботыСтавкаНДС,РаботыСуммаНДС,РаботыСуммаСНДС,РаботыПроцентРучнойСкидки,РаботыСуммаРучнойСкидки,РаботыГруппаСкидки
				|,ЦенаВключаетНДС,НалогообложениеНДС
				|,ПлановыеМатериалыЦена,ПлановыеМатериалыСумма,ПлановыеМатериалыСтавкаНДС,ПлановыеМатериалыСуммаНДС,ПлановыеМатериалыСуммаСНДС,ПлановыеМатериалыПроцентРучнойСкидки,ПлановыеМатериалыСуммаРучнойСкидки,ПлановыеМатериалыГруппаСкидки
				|,ПлановыеРаботыЦена,ПлановыеРаботыСумма,ПлановыеРаботыСтавкаНДС,ПлановыеРаботыСуммаНДС,ПлановыеРаботыСуммаСНДС,ПлановыеРаботыПроцентРучнойСкидки,ПлановыеРаботыСуммаРучнойСкидки,ПлановыеРаботыГруппаСкидки
				|,Валюта,ЦенаВключаетНДС,НалогообложениеНДС,ВидЦен,ВидЦенМатериалов,НадписьИтогоПлан,НадписьИтогоФакт", Объект.ПлатныйРемонт И ДоступенПросмотрЦен, Объект.ПлатныйРемонт И ДоступенПросмотрЦен);
//Рарус Владимир Подрезов Конец
	Если не Объект.ПлановаяКалькуляция Тогда
		Элементы.НадписьИтогоПлан.Видимость	=  Ложь;
	КонецЕсли;	
	//+++ВидРемонта перенесен в реквизит документа
	Элементы.ЗаказКлиента.Видимость					=  Объект.ПлатныйРемонт И Объект.ТехникаКлиента;
	Элементы.ЗаказКлиента.Доступность				=  Объект.ПлатныйРемонт И Объект.ТехникаКлиента;
	Элементы.ЗаказНаРемонт.Видимость				=  НЕ Объект.ТехникаКлиента;
	Элементы.ЗаказНаРемонт.Доступность			   	=  НЕ Объект.ТехникаКлиента;
	Элементы.ПлановыеМатериалыСуммаНДС.Доступность 	= РольДоступна(Метаданные.Роли.пкИзменениеСуммыНДСВЗаказНарядах);
	
	//Элементы.Клиент.Видимость			= Объект.ПлатныйРемонт И Объект.ТехникаКлиента;
	//Элементы.Клиент.Доступность			= Объект.ПлатныйРемонт И Объект.ТехникаКлиента;
	//Элементы.ОбъектСтроительства.Видимость	 = Объект.ПлатныйРемонт И Объект.ТехникаКлиента;
	//Элементы.ОбъектСтроительства.Доступность = Объект.ПлатныйРемонт И Объект.ТехникаКлиента;
	//---ВидРемонта перенесен в реквизит документа
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПлановуюКалькуляцию()
	
	УстановитьВидимостьДоступностьСпискаЭлементов("ГруппаПлановыеМатериалы,ГруппаПлановыеРаботы",Объект.ПлановаяКалькуляция,Объект.ПлановаяКалькуляция);
	ДоступенПросмотрЦен = РольДоступна(Метаданные.Роли.пкДоступВидимостьЦенВЗаказНаряде) ИЛИ РольДоступна(Метаданные.Роли.ПолныеПрава) ИЛИ РольДоступна(Метаданные.Роли.пкПолныеПрава); 
	Элементы.НадписьИтогоПлан.Видимость = (Объект.ПлатныйРемонт И ДоступенПросмотрЦен и Объект.ПлановаяКалькуляция и Объект.ПлановаяКалькуляция);
	
КонецПроцедуры	
	
&НаСервере
Процедура УстановитьВидимостьДоступностьСпискаЭлементов(СтрокаСписокЭлементов, Видимость, Доступность)
	
	МассивИменЭлементов = СтрРазделить(СтрокаСписокЭлементов, ",", Ложь);
	Для Каждого ИмяЭлемента Из МассивИменЭлементов Цикл
		Элементы[СокрЛП(ИмяЭлемента)].Видимость = Видимость;
		Элементы[СокрЛП(ИмяЭлемента)].Доступность = Доступность;
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура РемонтыПриИзменении(Элемент)
	
	НазначитьСписокВыбораВидовРемонта();
	
	Если Объект.Ремонты.Количество() = 0 Тогда
		Для Каждого СтрМат Из Объект.Материалы Цикл
			СтрМат.ВидРемонта = Неопределено;
			СтрМат.ПлатныйРемонт = Ложь;
		КонецЦикла;
		Для Каждого СтрРаб Из Объект.Работы Цикл
			СтрРаб.ВидРемонта = Неопределено;
			СтрРаб.ПлатныйРемонт = Ложь;
		КонецЦикла;
	ИначеЕсли Объект.Ремонты.Количество() = 1 Тогда	
		ВидРемонта = Объект.Ремонты[0].ВидРемонта;
		ПлатныйРемонт = Объект.Ремонты[0].ПлатныйРемонт;
		Для Каждого СтрМат Из Объект.Материалы Цикл
			СтрМат.ВидРемонта = ВидРемонта;
			СтрМат.ПлатныйРемонт = ПлатныйРемонт;
		КонецЦикла;
		Для Каждого СтрРаб Из Объект.Работы Цикл
			СтрРаб.ВидРемонта = ВидРемонта;
			СтрРаб.ПлатныйРемонт = ПлатныйРемонт;
		КонецЦикла;
	Иначе
		
		ОчиститьНеактуальныеВидыРмонта();
		
	КонецЕсли;	
	УстановитьВидимостьКолонокПлатныхРемонтов();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНеактуальныеВидыРмонта()
	
	ТаблицаВидовРемонтаМатериалы = Объект.Материалы.Выгрузить(,"ВидРемонта");
	ТаблицаВидовРемонтаМатериалы.Свернуть("ВидРемонта");
	Для Каждого СтрТабл Из ТаблицаВидовРемонтаМатериалы Цикл
		СтруктураПоиска = Новый Структура("ВидРемонта",СтрТабл.ВидРемонта);
		Если Объект.Ремонты.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда 
			МассивСтрокДляОчистки = Объект.Материалы.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаМатериалы Из МассивСтрокДляОчистки Цикл
				СтрокаМатериалы.ВидРемонта = Неопределено;
				СтрокаМатериалы.ПлатныйРемонт = Ложь;
			КонецЦикла;	
		КонецЕсли;	
	КонецЦикла;	
	
	ТаблицаВидовРемонтаРаботы = Объект.Работы.Выгрузить(,"ВидРемонта");
	ТаблицаВидовРемонтаРаботы.Свернуть("ВидРемонта");
	Для Каждого СтрТабл Из ТаблицаВидовРемонтаРаботы Цикл
		СтруктураПоиска = Новый Структура("ВидРемонта",СтрТабл.ВидРемонта);
		Если Объект.Ремонты.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда 
			МассивСтрокДляОчистки = Объект.Работы.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаРаботы Из МассивСтрокДляОчистки Цикл
				СтрокаРаботы.ВидРемонта = Неопределено;
				СтрокаМатериалы.ПлатныйРемонт = Ложь;
			КонецЦикла;	
		КонецЕсли;	
	КонецЦикла;
		
КонецПроцедуры	

&НаКлиенте
Процедура НазначитьСписокВыбораВидовРемонта()
	
	МассивВидовРемонта = Новый Массив;
	Для Каждого Стр Из Объект.Ремонты Цикл
		МассивВидовРемонта.Добавить(Стр.ВидРемонта);
	КонецЦикла;
	Элементы.МатериалыВидРемонта.СписокВыбора.ЗагрузитьЗначения(МассивВидовРемонта);
	Элементы.РаботыВидРемонта.СписокВыбора.ЗагрузитьЗначения(МассивВидовРемонта);
	Элементы.ПлановыеМатериалыВидРемонта.СписокВыбора.ЗагрузитьЗначения(МассивВидовРемонта);
	Элементы.ПлановыеРаботыВидРемонта.СписокВыбора.ЗагрузитьЗначения(МассивВидовРемонта);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлановаяКалькуляцияПриИзменении(Элемент)
	ПроверитьПлановуюКалькуляцию();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(ОбъектСсылка, ИмяРеквизита)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, ИмяРеквизита);
	
КонецФункции

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.пкСтатусыЗаказНарядов.Закрыт") Тогда 
		Если Не ВсеМатериалыОтгружены() Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не все позиции материалов выданы со склада! Закрытие заказ-наряда не возможно!");
			Объект.Статус = ПредопределенноеЗначение("Перечисление.пкСтатусыЗаказНарядов.Выполнен");
			Если Не ЗначениеЗаполнено(Объект.ДатаОкончанияФакт) Тогда 
				Объект.ДатаОкончанияФакт = ТекущаяДатаНаСервере();
			КонецЕсли;
		КонецЕсли;	
		Объект.ДатаЗакрытия = ТекущаяДатаНаСервере();
		Объект.АвторЗакрытия = ПользователиКлиентСервер.ТекущийПользователь();
    ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.пкСтатусыЗаказНарядов.ВРаботе") 
      ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.пкСтатусыЗаказНарядов.Отложен") Тогда
		Если Не ЗначениеЗаполнено(Объект.ДатаНачалаФакт) Тогда 
			Объект.ДатаНачалаФакт = ТекущаяДатаНаСервере();
		КонецЕсли;
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.пкСтатусыЗаказНарядов.Выполнен") Тогда
		ДатаОкончанияТекущая = ТекущаяДатаНаСервере();
		Если Не ЗначениеЗаполнено(Объект.ДатаОкончанияФакт) Тогда 
			Объект.ДатаОкончанияФакт = ДатаОкончанияТекущая;
		КонецЕсли;
		Для Каждого СтрРаботы Из Объект.Работы Цикл
			Если НЕ ЗначениеЗаполнено(СтрРаботы.ДатаОкончания) Тогда 
				СтрРаботы.ДатаОкончания = ДатаОкончанияТекущая;
				СтрРаботы.Окончание = Истина;
				Если Не ЗначениеЗаполнено(СтрРаботы.ДатаНачала) Тогда
					СтрРаботы.ДатаНачала = НачалоДня(ДатаОкончанияТекущая);
					СтрРаботы.Начало = Истина;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.пкСтатусыЗаказНарядов.Закрыт") Тогда
		УстановитьДоступностьВсехЭлементовФормы(Ложь);
		ДокументЗакрыт = Истина;
	ИначеЕсли ДокументЗакрыт Тогда 
		УстановитьДоступностьВсехЭлементовФормы(Истина);
		ДокументЗакрыт = Ложь;
	КонецЕсли;
	
	//ОбновитьСписокСтатусов();
	
КонецПроцедуры

&НаКлиенте
Функция ВсеМатериалыОтгружены()
	
	Возврат ВсеМатериалыОтгруженыНаСервере(Объект.ЗаказКлиента, Объект.ЗаказНаРемонт);
	
КонецФункции

&НаСервере
Функция ВсеМатериалыОтгруженыНаСервере(ЗаказКлиента, ЗаказНаРемонт)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ИСТИНА КАК Пометка,
	|	ЗаказКлиентаТовары.Номенклатура,
	|	ЗаказКлиентаТовары.Характеристика,
	|	ЗаказКлиентаТовары.Серия,
	|	ЗаказКлиентаТовары.Количество,
	|	ЗаказКлиентаТовары.Упаковка КАК Упаковка,
	|	ЗаказКлиентаТовары.КодСтроки КАК КодСтрокиЗаказа,
	|	ИСТИНА КАК ПлатныйРемонт,
	|	ЗаказКлиентаТовары.Номенклатура.НаборУпаковок КАК НаборУпаковок
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка = &ЗаказКлиента
	|	И НЕ ЗаказКлиентаТовары.Отменено
	|	И ЗаказКлиентаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется)
	|	И ЗаказКлиентаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА,
	|	ЗаказНаРемонтМатериалыИРаботы.Номенклатура,
	|	ЗаказНаРемонтМатериалыИРаботы.Характеристика,
	|	ЗаказНаРемонтМатериалыИРаботы.Серия,
	|	ЗаказНаРемонтМатериалыИРаботы.Количество,
	|	ЗаказНаРемонтМатериалыИРаботы.Упаковка,
	|	ЗаказНаРемонтМатериалыИРаботы.КодСтроки,
	|	ЛОЖЬ,
	|	ЗаказНаРемонтМатериалыИРаботы.Номенклатура.НаборУпаковок
	|ИЗ
	|	Документ.ЗаказНаРемонт.МатериалыИРаботы КАК ЗаказНаРемонтМатериалыИРаботы
	|ГДЕ
	|	ЗаказНаРемонтМатериалыИРаботы.Ссылка = &ЗаказНаРемонт
	|	И НЕ ЗаказНаРемонтМатериалыИРаботы.Отменено
	|	И ЗаказНаРемонтМатериалыИРаботы.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется)
	|	И ЗаказНаРемонтМатериалыИРаботы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)");
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	Запрос.УстановитьПараметр("ЗаказНаРемонт", ЗаказНаРемонт);
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Пустой();
	
КонецФункции

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы
&НаКлиенте
Процедура ТехникаГотоваПриИзменении(Элемент)
	
	Если Объект.ТехникаГотова Тогда 
		
		Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
			Объект.ДатаГотовности = ТекущаяДатаНаСервере();
		ИначеЕсли Не ЗначениеЗаполнено(ПолучитьЗначениеРеквизита(Объект.Ссылка, "ДатаГотовности")) Тогда 	
		    Объект.ДатаГотовности = ТекущаяДатаНаСервере();
		КонецЕсли;
		
	Иначе
		
		Объект.ДатаГотовности = Неопределено;
		
	КонецЕсли;
		
КонецПроцедуры

//&НаКлиенте
//Процедура ВидРемонтаПриИзменении(Элемент)
//	ВидРемонтаПриИзмененииНаСервере();
//КонецПроцедуры

//&НаСервере
//Процедура ВидРемонтаПриИзмененииНаСервере()
//	
//	Если ЗначениеЗаполнено(Объект.ВидРемонта) И Объект.ВидРемонта.ОбщийВидРемонта.пкТипРемонта = Перечисления.пкТипыРемонтов.Платный Тогда 
//		Объект.ПлатныйРемонт = Истина;
//	Иначе
//		Объект.ПлатныйРемонт = Ложь;
//	КонецЕсли;
//	
//				
//КонецПроцедуры

&НаКлиенте
Процедура МатериалыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	
	ТекущаяСтрока.Упаковка = ПолучитьЗначениеРеквизита(ТекущаяСтрока.Номенклатура, "ЕдиницаИзмерения");
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	//СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	//СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	//СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", 
    Новый Структура("НалогообложениеНДС, Дата", ?(Объект.ПлатныйРемонт, 
	ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС"),Объект.НалогообложениеНДС), Объект.Дата));

	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;

	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", 
    Новый Структура("НалогообложениеНДС, Дата", ?(Объект.ПлатныйРемонт, 
	ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС"),Объект.НалогообложениеНДС), Объект.Дата));

	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлановыеМатериалыНоменклатураПриИзменении(Элемент)
		
	ТекущаяСтрока = Элементы.ПлановыеМатериалы.ТекущиеДанные;
	
	ТекущаяСтрока.Упаковка = ПолучитьЗначениеРеквизита(ТекущаяСтрока.Номенклатура, "ЕдиницаИзмерения");
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	//СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	//СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	//СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", 
    Новый Структура("НалогообложениеНДС, Дата", ?(Объект.ПлатныйРемонт, 
	ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС"),Объект.НалогообложениеНДС), Объект.Дата));

	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыРаботаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Работы.ТекущиеДанные;
	
	ТекущаяСтрока.ЕдиницаИзмерения = ПолучитьЗначениеРеквизита(ТекущаяСтрока.Номенклатура, "ЕдиницаИзмерения");
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	//СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	//СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	//СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", 
    Новый Структура("НалогообложениеНДС, Дата", ?(Объект.ПлатныйРемонт, 
	ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС"),Объект.НалогообложениеНДС), Объект.Дата));

	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
//Рарус Владимир Подрезов 27.12.2016
//	СтруктураДействий.Вставить("ПересчитатьСумму", "Количество");
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоРеализация");
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки", "КоличествоРеализация");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать,ИмяКоличества", Ложь,"КоличествоРеализация"));
//Рарус Владимир Подрезов Конец
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлановыеРаботыРаботаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПлановыеРаботы.ТекущиеДанные;
	
	ТекущаяСтрока.ЕдиницаИзмерения = ПолучитьЗначениеРеквизита(ТекущаяСтрока.Номенклатура, "ЕдиницаИзмерения");
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	////СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	////СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	////СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", 
    Новый Структура("НалогообложениеНДС, Дата", ?(Объект.ПлатныйРемонт, 
	ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС"),Объект.НалогообложениеНДС), Объект.Дата));
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму", "Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки", "Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать,ИмяКоличества", Ложь,"Количество"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыКоличествоПриИзменении(Элемент)
	
	ПриИзмененииКоличества("Материалы", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыКоличествоПриИзменении(Элемент)
	
//Рарус Владимир Подрезов 28.12.2016
//	ПриИзмененииКоличества("Работы", Истина, "Количество");
	ТекущаяСтрока = Элементы.Работы.ТекущиеДанные;
	
	ТекущаяСтрока.КоличествоРеализация = ТекущаяСтрока.Количество;
	РаботыКоличествоРеализацияПриИзменении(Элемент);
//Рарус Владимир Подрезов Конец

КонецПроцедуры

//Рарус Владимир Подрезов 28.12.2016
&НаКлиенте
Процедура РаботыКоличествоРеализацияПриИзменении(Элемент)
	ПриИзмененииКоличества("Работы", Истина, "КоличествоРеализация");
КонецПроцедуры
//Рарус Владимир Подрезов Конец

&НаКлиенте
Процедура ПлановыеМатериалыКоличествоПриИзменении(Элемент)
	
	ПриИзмененииКоличества("ПлановыеМатериалы", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлановыеРаботыКоличествоПриИзменении(Элемент)
	
	ПриИзмененииКоличества("ПлановыеРаботы", Истина, "Количество");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличества(ИмяТЧ, ЭтоУслуги, ИмяКоличества = "КоличествоУпаковок")
		
	ТекущаяСтрока = Элементы[ИмяТЧ].ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	Если Не ЭтоУслуги Тогда
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	КонецЕсли;	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму", ИмяКоличества);
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки", ИмяКоличества);
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать,ИмяКоличества", Ложь, ИмяКоличества));
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЦенаПриИзменении(Элемент)
	
	ПриИзмененииЦены("Материалы");

КонецПроцедуры

&НаКлиенте
Процедура РаботыЦенаПриИзменении(Элемент)
	
//Рарус Владимир Подрезов 27.12.2016
//	ПриИзмененииЦены("Работы", "Количество");
	ПриИзмененииЦены("Работы", "КоличествоРеализация");
//Рарус Владимир Подрезов Конец

КонецПроцедуры

&НаКлиенте
Процедура ПлановыеМатериалыЦенаПриИзменении(Элемент)
	
	ПриИзмененииЦены("ПлановыеМатериалы");
	
КонецПроцедуры

&НаКлиенте
Процедура ПлановыеРаботыЦенаПриИзменении(Элемент)
	
	ПриИзмененииЦены("ПлановыеРаботы", "Количество");

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЦены(ИмяТЧ, ИмяКоличества = "КоличествоУпаковок", СкидкаПроцентная = Истина)

	ТекущаяСтрока = Элементы[ИмяТЧ].ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	Если СкидкаПроцентная Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки", ИмяКоличества);
		СтруктураДействий.Вставить("ПересчитатьСумму", ИмяКоличества);
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать,ИмяКоличества", Ложь, ИмяКоличества));
	Иначе
		СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки", ИмяКоличества);
		СтруктураДействий.Вставить("ПересчитатьСумму", ИмяКоличества);
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать,ИмяКоличества,ПересчитыватьСуммуРучнойСкидки", Ложь, ИмяКоличества, Ложь));
	КонецЕсли; 
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры	

&НаКлиенте
Процедура МатериалыСуммаПриИзменении(Элемент)
	
	ПриИзмененииСуммы("Материалы");
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыСуммаПриИзменении(Элемент)
	
//Рарус Владимир Подрезов 27.12.2016
//	ПриИзмененииСуммы("Работы","Количество");
	ПриИзмененииСуммы("Работы","КоличествоРеализация");
//Рарус Владимир Подрезов Конец

КонецПроцедуры

&НаКлиенте
Процедура ПлановыеМатериалыСуммаПриИзменении(Элемент)
	
	ПриИзмененииСуммы("ПлановыеМатериалы");
	
КонецПроцедуры

&НаКлиенте
Процедура ПлановыеРаботыСуммаПриИзменении(Элемент)
	
	ПриИзмененииСуммы("ПлановыеРаботы","Количество");

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСуммы(ИмяТЧ, ИмяКоличества = "КоличествоУпаковок")

	ТекущаяСтрока = Элементы[ИмяТЧ].ТекущиеДанные;
	
	СтруктураПересчетаЦены  = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаЦеныСкидкиВПродажахВТЧ(Объект,Истина,ИмяКоличества);
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах", СтруктураПересчетаЦены);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры	

&НаКлиенте
Процедура МатериалыСтавкаНДСПриИзменении(Элемент)
	
	ПриИзмененииСтавкиНДС("Материалы");

КонецПроцедуры

&НаКлиенте
Процедура РаботыСтавкаНДСПриИзменении(Элемент)
	
//Рарус Владимир Подрезов 27.12.2016
//	ПриИзмененииСтавкиНДС("Работы", "Количество");
	ПриИзмененииСтавкиНДС("Работы", "КоличествоРеализация");
//Рарус Владимир Подрезов Конец

КонецПроцедуры

&НаКлиенте
Процедура ПлановыеМатериалыСтавкаНДСПриИзменении(Элемент)
	
	ПриИзмененииСтавкиНДС("ПлановыеМатериалы");
	
КонецПроцедуры

&НаКлиенте
Процедура ПлановыеРаботыСтавкаНДСПриИзменении(Элемент)
	
	ПриИзмененииСтавкиНДС("ПлановыеРаботы", "Количество");

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСтавкиНДС(ИмяТЧ, ИмяКоличества = "КоличествоУпаковок")

	ТекущаяСтрока = Элементы[ИмяТЧ].ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму", ИмяКоличества);
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки", ИмяКоличества);
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать,ИмяКоличества", Ложь, ИмяКоличества));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры	

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	ЦенаВключаетНДСПриИзмененииНаСервере(КэшированныеЗначения);
КонецПроцедуры

&НаСервере
Процедура ЦенаВключаетНДСПриИзмененииНаСервере(КэшированныеЗначения)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Материалы, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Работы, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.ПлановыеМатериалы, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.ПлановыеРаботы, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура НалогообложениеНДСПриИзменении(Элемент)
	НалогообложениеНДСПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура НалогообложениеНДСПриИзмененииНаСервере()
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", 
    Новый Структура("НалогообложениеНДС, Дата", ?(Объект.ПлатныйРемонт, 
	ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС"),Объект.НалогообложениеНДС), Объект.Дата));

	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Материалы, СтруктураДействий, Неопределено);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Работы, СтруктураДействий, Неопределено);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.ПлановыеМатериалы, СтруктураДействий, Неопределено);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.ПлановыеРаботы, СтруктураДействий, Неопределено)
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруВидРемонтаПлатный()
	
	СтруктураВидРемонтаПлатный = Новый Структура("ВидРемонта, ПлатныйРемонт");
	//+++ВидРемонта перенесен в реквизит документа
	//Если Объект.Ремонты.Количество() = 0 Тогда 
	//	СтруктураВидРемонтаПлатный.ВидРемонта = Неопределено;
	//	СтруктураВидРемонтаПлатный.ПлатныйРемонт = Ложь;
	//Иначе
	//	СтруктураВидРемонтаПлатный.ВидРемонта = Объект.Ремонты[0].ВидРемонта;
	//	СтруктураВидРемонтаПлатный.ПлатныйРемонт = Объект.Ремонты[0].ПлатныйРемонт;
	//КонецЕсли;
	СтруктураВидРемонтаПлатный.ВидРемонта = Объект.ВидРемонта;
	СтруктураВидРемонтаПлатный.ПлатныйРемонт = Объект.ПлатныйРемонт И Объект.ТехникаКлиента;
	//---ВидРемонта перенесен в реквизит документа
	Возврат СтруктураВидРемонтаПлатный;
	
КонецФункции	

&НаКлиенте
Процедура ПеренестиПлановыеМатериалы(Команда)
	
	СтрокиНеДобавлены = Истина;
	УстановитьКодыСтрок("ПлановыеМатериалы", "МаксимальныйКодСтрокиПлановыеМатериалы");
	Для Каждого СтрПлан Из Объект.ПлановыеМатериалы Цикл
		НайденныеСтроки = Объект.Материалы.НайтиСтроки(Новый Структура("КодСтроки",СтрПлан.КодСтроки));
		Если НайденныеСтроки.Количество() = 0 Тогда 
			СтрФакт = Объект.Материалы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрФакт,СтрПлан);
			//+++ВидРемонта перенесен в реквизит документа
			//СтрФакт.ПлатныйРемонт = ПроверитьПлатныйРемонт(СтрФакт.ВидРемонта);
			////ЗаполнитьЗначенияСвойств(СтрФакт,ПолучитьСтруктуруВидРемонтаПлатный());
			СтрФакт.ВидРемонта = Объект.ВидРемонта;
			СтрФакт.ПлатныйРемонт = Объект.ПлатныйРемонт;
			//---ВидРемонта перенесен в реквизит документа
			СтрокиНеДобавлены = Ложь;
		КонецЕсли;	
	КонецЦикла;
	Если СтрокиНеДобавлены Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Все имеющиеся строки уже перенесены!'"), , "ПлановыеМатериалы");
	Иначе	
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаМатериалы;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиПлановыеРаботы(Команда)
	
	СтрокиНеДобавлены = Истина;
	УстановитьКодыСтрок("ПлановыеРаботы", "МаксимальныйКодСтрокиПлановыеРаботы");
	Для Каждого СтрПлан Из Объект.ПлановыеРаботы Цикл
		НайденныеСтроки = Объект.Работы.НайтиСтроки(Новый Структура("КодСтроки",СтрПлан.КодСтроки));
		Если НайденныеСтроки.Количество() = 0 Тогда 
			СтрФакт = Объект.Работы.Добавить();
			//СтрФакт.Номенклатура = СтрПлан.Работа;
			ЗаполнитьЗначенияСвойств(СтрФакт,СтрПлан);
			//+++ВидРемонта перенесен в реквизит документа
			//СтрФакт.ПлатныйРемонт = ПроверитьПлатныйРемонт(СтрФакт.ВидРемонта);
			////ЗаполнитьЗначенияСвойств(СтрФакт,ПолучитьСтруктуруВидРемонтаПлатный());
			СтрФакт.ВидРемонта = Объект.ВидРемонта;
			СтрФакт.ПлатныйРемонт = Объект.ПлатныйРемонт;
			//---ВидРемонта перенесен в реквизит документа
			СтрокиНеДобавлены = Ложь;
		КонецЕсли;
	КонецЦикла;
	Если СтрокиНеДобавлены Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Все имеющиеся строки уже перенесены!'"), , "ПлановыеРаботы");
	Иначе	
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаРаботы;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКодыСтрок(ИмяТЧ, ИмяРеквизита)
	
	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(Объект, ИмяТЧ, ИмяРеквизита);
	
КонецПроцедуры	

&НаКлиенте
Процедура ПлановыеРаботыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда 
		ОчиститьКодСтроки("ПлановыеРаботы");
		СтрокаРаб = Элементы.ПлановыеРаботы.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(СтрокаРаб,ПолучитьСтруктуруВидРемонтаПлатный());
		СтрокаРаб.ВидЦены = Объект.ВидЦен;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКодСтроки(ИмяТЧ)
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	ТекущиеДанные.КодСтроки = 0;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПлановыеМатериалыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда 
		ОчиститьКодСтроки("ПлановыеМатериалы");
		СтрокаМат = Элементы.ПлановыеМатериалы.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(СтрокаМат,ПолучитьСтруктуруВидРемонтаПлатный());
		СтрокаМат.ВидЦены = Объект.ВидЦенМатериалов;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда 
		ОчиститьКодСтроки("Материалы");
		СтрокаМат = Элементы.Материалы.ТекущиеДанные;
		СтрокаМат.КодСтрокиЗаказа = 0;
		ЗаполнитьЗначенияСвойств(СтрокаМат,ПолучитьСтруктуруВидРемонтаПлатный());
		СтрокаМат.ВидЦены = Объект.ВидЦенМатериалов;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда 
		ОчиститьКодСтроки("Работы");
		СтрокаРаб = Элементы.Работы.ТекущиеДанные;
		СтрокаРаб.КодСтрокиЗаказа = 0;
		ЗаполнитьЗначенияСвойств(СтрокаРаб,ПолучитьСтруктуруВидРемонтаПлатный());
		СтрокаРаб.ВидЦены = Объект.ВидЦен;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательВидРемонтаПриИзменении(Элемент)
	
	ОбновитьВидимостьВидовРемонта();
	Если Не ПереключательВидРемонта Тогда
		Если Объект.Ремонты.Количество() = 0 Тогда
			Объект.Ремонты.Добавить();
			Элементы.Ремонты.ТекущаяСтрока = Объект.Ремонты[0].ПолучитьИдентификатор();
		ИначеЕсли Объект.Ремонты.Количество() = 1 Тогда
			Если Элементы.Ремонты.ТекущаяСтрока = Неопределено Тогда
				Элементы.Ремонты.ТекущаяСтрока = Объект.Ремонты[0].ПолучитьИдентификатор();
			КонецЕсли;
		ИначеЕсли Объект.Ремонты.Количество() > 1 Тогда
			ТекстСообщения = НСтр("ru = 'Переключение в режим без разбиения невозможно, если в списке ремонтов введено более одной строки!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ПереключательВидРемонта = 1;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьВидовРемонта()
	
	УстановитьВидимостьДоступностьСпискаЭлементов("РемонтыВидРемонтаБезРазбиения,РемонтыСтатьяРасходовБезРазбиения", НЕ ПереключательВидРемонта, НЕ ПереключательВидРемонта);
	УстановитьВидимостьДоступностьСпискаЭлементов("Ремонты", ПереключательВидРемонта, ПереключательВидРемонта);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//+++ВидРемонта перенесен в реквизит документа
	//Если Элементы.Ремонты.ТекущаяСтрока = Неопределено Тогда
	//	Элементы.Ремонты.ТекущаяСтрока = Объект.Ремонты[0].ПолучитьИдентификатор();
	//КонецЕсли;
	//НазначитьСписокВыбораВидовРемонта();
	//---ВидРемонта перенесен в реквизит документа
	ОбновитьКоличествоВыдано();
	РассчитатьНадписиИтоговые(ЭтаФорма);	
	ЗаполнитьНачалоОкончаниеРабот();
	УстановитьВидимостьКлиент();
	Элементы.Техника.Доступность = Не Объект.ТехникаКлиента;
	Элементы.ЗаводскойНомерТехники.Доступность = Объект.ТехникаКлиента;
	Элементы.ПлановыеРаботыЗаполнитьИзЗаданияНаРемонт.Доступность = НЕ Объект.ТехникаКлиента;
	
	Если ДокументЗакрыт Тогда 
		УстановитьДоступностьВсехЭлементовФормы(Ложь);
	КонецЕсли;	
	
	Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Объект.Склад) Тогда
		СкладПриИзмененииНаСервере();
	КонецЕсли;	
//Рарус Владимир Подреов 16.10.2017
	ОпределитьЕстьНеЗакрытыеЗадания();
//Рарус Владимир Подреов Конец
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыВидРемонтаПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Ремонты.ТекущиеДанные;
	//ТекСтрока.ПлатныйРемонт = ПроверитьПлатныйРемонт(ТекСтрока.ВидРемонта);
	ТекСтрока.ПлатныйРемонт = Объект.ПлатныйРемонт;
    
    //+++rarus-spb_zlov 17.01.2017    
    //ТекСтрока.СтатьяРасходов = ПолучитьСтатьюРасходов(ТекСтрока.ВидРемонта);
    //---rarus-spb_zlov 17.01.2017 
		
КонецПроцедуры

//+++rarus-spb_zlov 17.01.2017    
//&НаСервереБезКонтекста
//Функция ПолучитьСтатьюРасходов(ВидРемонта)
//    
//    Если ЗначениеЗаполнено(ВидРемонта) И ТипЗнч(ВидРемонта) = Тип("СправочникСсылка.ВидыРемонтов") 
//    		И ВидРемонта.ОбщийВидРемонта.ЗаданаСтатьяРасходов Тогда
//    	Возврат ВидРемонта.ОбщийВидРемонта.СтатьяРасходов;
//    Иначе
//    	Возврат ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка();
//    КонецЕсли;
//	
//КонецФункции
//---rarus-spb_zlov 17.01.2017 

&НаКлиенте
Процедура ОбщийВидРемонтаПриИзменении(ИмяТЧ)
	
	ТекСтрока = Элементы[ИмяТЧ].ТекущиеДанные;
	
	//НовыйВидРемонтаПлатный = ПроверитьПлатныйРемонт(ТекСтрока.ВидРемонта);
	НовыйВидРемонтаПлатный = Объект.ПлатныйРемонт;
	Если ЗначениеЗаполнено(Объект.Ссылка) И ТекСтрока.ПлатныйРемонт <> НовыйВидРемонтаПлатный Тогда 
		ТекСтрока.КодСтрокиЗаказа = 0;
	КонецЕсли;
	ТекСтрока.ПлатныйРемонт = НовыйВидРемонтаПлатный;
		
КонецПроцедуры

//&НаСервереБезКонтекста
//Функция ПроверитьПлатныйРемонт(ВидРемонта)
//	
//	Если ЗначениеЗаполнено(ВидРемонта) И ТипЗнч(ВидРемонта) = Тип("СправочникСсылка.ВидыРемонтов") 
//			И ВидРемонта.ОбщийВидРемонта.пкТипРемонта = Перечисления.пкТипыРемонтов.Платный Тогда
//		Возврат Истина;
//	Иначе
//		Возврат Ложь;
//	КонецЕсли;
//	
//КонецФункции	

&НаКлиенте
Процедура МатериалыВидРемонтаПриИзменении(Элемент)
	
	ОбщийВидРемонтаПриИзменении("Материалы");
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыВидРемонтаПриИзменении(Элемент)
	
	ОбщийВидРемонтаПриИзменении("Работы");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКоличествоВыдано()
	
	ЗаполнитьМатериалыВыданные();
	Для Каждого СтрОтгружено Из МатериалыВыданные Цикл
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Серия");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрОтгружено);
		МассивНайденныхСтрок = Объект.Материалы.НайтиСтроки(СтруктураПоиска);
		КоличествоОтгружено = СтрОтгружено.Количество;
		Итератор = 0;
		ОсталосьСтрок = МассивНайденныхСтрок.Количество();
		Пока ОсталосьСтрок > 0 Цикл
			Если ОсталосьСтрок = 1 Тогда 
				МассивНайденныхСтрок[Итератор].КоличествоВыдано = КоличествоОтгружено;
			Иначе
				Если МассивНайденныхСтрок[Итератор].Количество >= КоличествоОтгружено Тогда 
					МассивНайденныхСтрок[Итератор].КоличествоВыдано = КоличествоОтгружено;
				Иначе
					МассивНайденныхСтрок[Итератор].КоличествоВыдано = МассивНайденныхСтрок[Итератор].Количество;
					КоличествоОтгружено = КоличествоОтгружено - МассивНайденныхСтрок[Итератор].Количество;
				КонецЕсли;
			КонецЕсли;	
			Итератор = Итератор + 1;	
			ОсталосьСтрок = ОсталосьСтрок - 1;
		КонецЦикла;
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьМатериалыВыданные()
	
	//Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	//                      |	ТоварыКОтгрузкеОбороты.Регистратор КАК РасходныйОрдер
	//                      |ПОМЕСТИТЬ ВТ_РасходныеОрдера
	//                      |ИЗ
	//                      |	РегистрНакопления.ТоварыКОтгрузке.Обороты(, , Регистратор, ДокументОтгрузки В (&ЗаказКлиента, &ЗаказНаРемонт)) КАК ТоварыКОтгрузкеОбороты
	//                      |ГДЕ
	//                      |	ТоварыКОтгрузкеОбороты.Регистратор ССЫЛКА Документ.РасходныйОрдерНаТовары
	//                      |;
	//                      |
	//                      |////////////////////////////////////////////////////////////////////////////////
	//                      |ВЫБРАТЬ
	//                      |	ТоварыНаСкладах.Номенклатура,
	//                      |	ТоварыНаСкладах.Характеристика,
	//                      |	ТоварыНаСкладах.Серия,
	//                      |	СУММА(ТоварыНаСкладах.КОтгрузке) КАК Количество
	//                      |ИЗ
	//                      |	РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
	//                      |ГДЕ
	//                      |	ТоварыНаСкладах.Регистратор В
	//                      |			(ВЫБРАТЬ
	//                      |				ВТ_РасходныеОрдера.РасходныйОрдер
	//                      |			ИЗ
	//                      |				ВТ_РасходныеОрдера)
	//                      |
	//                      |СГРУППИРОВАТЬ ПО
	//                      |	ТоварыНаСкладах.Номенклатура,
	//                      |	ТоварыНаСкладах.Характеристика,
	//                      |	ТоварыНаСкладах.Серия");
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЗаказыКлиентовОстатки.Номенклатура,
	                      |	ЗаказыКлиентовОстатки.Характеристика,
	                      |	ЗаказыКлиентовОстатки.Серия,
	                      |	ЗаказыКлиентовОстатки.КОформлениюОстаток КАК Количество
	                      |ИЗ
	                      |	РегистрНакопления.ЗаказыКлиентов.Остатки(&ГраницаДо, ЗаказКлиента = &ЗаказКлиента) КАК ЗаказыКлиентовОстатки
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура,
	                      |	ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика,
	                      |	ЗаказыНаВнутреннееПотреблениеОстатки.Серия,
	                      |	ЗаказыНаВнутреннееПотреблениеОстатки.КОформлениюОстаток
	                      |ИЗ
	                      |	РегистрНакопления.ЗаказыНаВнутреннееПотребление.Остатки(&ГраницаДо, ЗаказНаВнутреннееПотребление = &ЗаказНаРемонт) КАК ЗаказыНаВнутреннееПотреблениеОстатки");
	Запрос.УстановитьПараметр("ГраницаДо",?(ЗначениеЗаполнено(Объект.ДатаЗакрытия),Новый Граница(Объект.ДатаЗакрытия,ВидГраницы.Исключая),ТекущаяДатаНаСервере()));					  
	Запрос.УстановитьПараметр("ЗаказКлиента",Объект.ЗаказКлиента);
	Запрос.УстановитьПараметр("ЗаказНаРемонт",Объект.ЗаказНаРемонт);
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//|	ТоварыКОтгрузкеОбороты.ДокументОтгрузки,
	//|	ТоварыКОтгрузкеОбороты.Номенклатура,
	//|	ТоварыКОтгрузкеОбороты.Характеристика,
	//|	ТоварыКОтгрузкеОбороты.Серия,
	//|	ТоварыКОтгрузкеОбороты.КОтгрузкеРасход КАК Количество
	//|ПОМЕСТИТЬ ВТ_ТоварыКОтгрузкеОбороты
	//|ИЗ
	//|	РегистрНакопления.ТоварыКОтгрузке.Обороты(, , , ДокументОтгрузки В (&ЗаказКлиента, &ЗаказНаРемонт)) КАК ТоварыКОтгрузкеОбороты
	//|ГДЕ
	//|	ТоварыКОтгрузкеОбороты.КОтгрузкеРасход > 0
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ТоварыКОтгрузкеОбороты.Номенклатура,
	//|	ТоварыКОтгрузкеОбороты.Характеристика,
	//|	ТоварыКОтгрузкеОбороты.Серия,
	//|	ТоварыКОтгрузкеОбороты.Количество,
	//|	ЗаказКлиентаТовары.КодСтроки КАК КодСтрокиЗаказа,
	//|	ИСТИНА КАК ПлатныйРемонт
	//|ИЗ
	//|	ВТ_ТоварыКОтгрузкеОбороты КАК ТоварыКОтгрузкеОбороты
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	//|		ПО ТоварыКОтгрузкеОбороты.ДокументОтгрузки = ЗаказКлиентаТовары.Ссылка
	//|			И ТоварыКОтгрузкеОбороты.Номенклатура = ЗаказКлиентаТовары.Номенклатура
	//|			И ТоварыКОтгрузкеОбороты.Характеристика = ЗаказКлиентаТовары.Характеристика
	//|			И ТоварыКОтгрузкеОбороты.Серия = ЗаказКлиентаТовары.Серия
	//|			И (НЕ ЗаказКлиентаТовары.Отменено)
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	ТоварыКОтгрузкеОбороты.Номенклатура,
	//|	ТоварыКОтгрузкеОбороты.Характеристика,
	//|	ТоварыКОтгрузкеОбороты.Серия,
	//|	ТоварыКОтгрузкеОбороты.Количество,
	//|	ЗаказНаРемонтМатериалыИРаботы.КодСтроки,
	//|	ЛОЖЬ
	//|ИЗ
	//|	ВТ_ТоварыКОтгрузкеОбороты КАК ТоварыКОтгрузкеОбороты
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаРемонт.МатериалыИРаботы КАК ЗаказНаРемонтМатериалыИРаботы
	//|		ПО ТоварыКОтгрузкеОбороты.ДокументОтгрузки = ЗаказНаРемонтМатериалыИРаботы.Ссылка
	//|			И ТоварыКОтгрузкеОбороты.Номенклатура = ЗаказНаРемонтМатериалыИРаботы.Номенклатура
	//|			И ТоварыКОтгрузкеОбороты.Характеристика = ЗаказНаРемонтМатериалыИРаботы.Характеристика
	//|			И ТоварыКОтгрузкеОбороты.Серия = ЗаказНаРемонтМатериалыИРаботы.Серия
	//|			И (НЕ ЗаказНаРемонтМатериалыИРаботы.Отменено)");
	//Запрос.УстановитьПараметр("ЗаказКлиента", Объект.ЗаказКлиента);
	//Запрос.УстановитьПараметр("ЗаказНаРемонт", Объект.ЗаказНаРемонт);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда 
		ТаблицаОтгружено = Результат.Выгрузить();
		МатериалыВыданные.Загрузить(ТаблицаОтгружено);
	Иначе
		МатериалыВыданные.Очистить();
	КонецЕсли;	
			
КонецПроцедуры	

&НаКлиенте
Процедура РаботыПередУдалением(Элемент, Отказ)
	
	//Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
	//	
	//	Отказ = Истина;
	//	ПараметрыОповещения = Новый Структура("ИмяТЧ","Работы");
	//	//ПараметрыОповещения.Вставить("Отказ",Отказ);
	//	Оповещение = Новый ОписаниеОповещения("ОбработкаВопросаПередУдалением", ЭтаФорма, ПараметрыОповещения);
	//	ПоказатьВопрос(Оповещение, "При удалении строки объект будет записан! Продолжить?", РежимДиалогаВопрос.ДаНетОтмена, 60, КодВозвратаДиалога.Да);
	//	
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВопросаПередУдалением(Результат, ПараметрыОповещения) Экспорт
	
	Отказ = Ложь;
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИмяТЧ = ПараметрыОповещения.ИмяТЧ;
        Если ПараметрыОповещения.Свойство("ИмяТЧ",ИмяТЧ) Тогда 
			СтрокаТЧ = Элементы[ИмяТЧ].ТекущиеДанные;
			ТЧПередУдалениемНаСервере(СтрокаТЧ.КодСтрокиЗаказа, СтрокаТЧ.ПлатныйРемонт, СтрокаТЧ.КоличествоВыдано, Объект.ЗаказКлиента, Объект.ЗаказНаРемонт, Отказ);
			Если Не Отказ Тогда 
				Объект[ИмяТЧ].Удалить(Объект[ИмяТЧ].НайтиПоИдентификатору(СтрокаТЧ.ПолучитьИдентификатор()));
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	     
КонецПроцедуры    

&НаСервереБезКонтекста
Процедура ТЧПередУдалениемНаСервере(КодСтроки, ПлатныйРемонт, КоличествоВыдано, ЗаказКлиента, ЗаказНаРемонт, Отказ)
	
	МассивКодов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КодСтроки,",",Истина,Истина);
	Если КоличествоВыдано > 0 Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("По выделенной строке производилась выдача запчастей!Сперва верните запчасти на склад!",,,,Отказ);
	КонецЕсли;
	//Если Не Отказ Тогда 
	//	Если МассивКодов.Количество() > 0 Тогда
	//		Если ПлатныйРемонт Тогда 
	//			ЗаказКлиентаОбъект = ЗаказКлиента.ПолучитьОбъект();
	//			Для Каждого КодСтрокиЗаказа Из МассивКодов Цикл
	//				Стр = ЗаказКлиентаОбъект.Товары.Найти(КодСтрокиЗаказа, "КодСтроки");
	//				Если ЗначениеЗаполнено(Стр) Тогда 
	//					Стр.Отменено = Истина;
	//				КонецЕсли;
	//			КонецЦикла;	
	//			Попытка
	//				ЗаказКлиентаОбъект.Записать(РежимЗаписиДокумента.Проведение);
	//			Исключение
	//				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	//				Отказ = Истина;
	//			КонецПопытки;
	//		Иначе
	//			ЗаказНаРемонтОбъект = ЗаказНаРемонт.ПолучитьОбъект();
	//			Для Каждого КодСтрокиЗаказа Из МассивКодов Цикл
	//				Стр = ЗаказНаРемонтОбъект.МатериалыИРаботы.Найти(КодСтрокиЗаказа, "КодСтроки");
	//				Если ЗначениеЗаполнено(Стр) Тогда 
	//					Стр.Отменено = Истина;
	//				КонецЕсли;
	//			КонецЦикла;	
	//			Попытка
	//				ЗаказНаРемонтОбъект.Записать(РежимЗаписиДокумента.Проведение);
	//			Исключение
	//				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	//				Отказ = Истина;
	//			КонецПопытки;
	//		КонецЕсли;	
	//	КонецЕсли;
	//КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПередУдалением(Элемент, Отказ)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		
		Отказ = Истина;
		ПараметрыОповещения = Новый Структура("ИмяТЧ","Материалы");
		Оповещение = Новый ОписаниеОповещения("ОбработкаВопросаПередУдалением", ЭтаФорма, ПараметрыОповещения);
    	ПоказатьВопрос(Оповещение, "Вы действительно хотите удалить строку?", РежимДиалогаВопрос.ДаНетОтмена, 60, КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.пкСтатусыЗаказНарядов.Закрыт") И Не ВсеМатериалыОтгружены() Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не все позиции материалов выданы со склада! Закрытие заказ-наряда не возможно!");
		Отказ = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Техника) И ПараметрыЗаписи.Свойство("РежимЗаписи") И (ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись ИЛИ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение) 
	     И пкУправлениеТехникойСервер.ПолучитьСтатусТехники(Объект.Техника) = ПредопределенноеЗначение("Перечисление.пкСтатусыТехники.Недоступен") Тогда
		 	ПоказатьПредупреждение(,"Внимание, Техника Списана или Продана!",,"Ошибка");
	        Возврат;                        
	КонецЕсли;
	
//Рарус Владимир Подрезов 14.06.2017
	//Если Объект.ПлатныйРемонт И Объект.ТехникаКлиента И ЗначениеЗаполнено(Объект.ЗаказНаРемонт) Тогда 
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("По заказ наряду уже создан заказ на ремонт! Установка признака Техника клиента недопустима!");
	//	Отказ = Истина;
	//КонецЕсли;
	//
	//Если НЕ Объект.ПлатныйРемонт И НЕ Объект.ТехникаКлиента И ЗначениеЗаполнено(Объект.ЗаказКлиента) Тогда 
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("По заказ наряду уже создан заказ клиента! Снятие признака Техника клиента недопустимо!");
	//	Отказ = Истина;
	//КонецЕсли;
//Рарус Владимир Подрезов Конец
	
//Рарус Владимир Подрезов 30.03.2017
	Для Каждого текСтрока Из Объект.Материалы Цикл
		Если Не ЗначениеЗаполнено(текСтрока.Номенклатура) Тогда 
			Продолжить;
		КонецЕсли;
		Если ПолучитьЗначениеРеквизитаНаСервере(текСтрока.Номенклатура, "ИспользованиеХарактеристик") = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать") Тогда 
			Продолжить;
		КонецЕсли;
		//Если Не ЗначениеЗаполнено(текСтрока.Характеристика) Тогда
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В строке материалов " + текСтрока.НомерСтроки + " не указана Характеристика!");
		//	Отказ = Истина;
		//КонецЕсли;
	КонецЦикла;
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.пкСтатусыЗаказНарядов.Закрыт") Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.СтатьяРасходов) Тогда	
	      ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена статья расходов!",,"СтатьяРасходов","Объект",Истина);
		  Отказ = Истина;	
		КонецЕсли;
		
		Для Каждого текСтрока Из Объект.Материалы Цикл
			Если текСтрока.Количество < текСтрока.КоличествоВыдано Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В строке материалов " + текСтрока.НомерСтроки + " выдано больше, чем запланировано!");
				Отказ = Истина;	
			КонецЕсли;
		КонецЦикла;
		Для Каждого текСтрока Из Объект.Работы Цикл
			Если Не ЗначениеЗаполнено(текСтрока.Сотрудник) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В строке работ " + текСтрока.НомерСтроки + " не указан Сотрудник! Закрытие заказ-наряда не возможно!");
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
//Рарус Владимир Подрезов Конец

    //+++rarus-spb_zlov 26.04.2017   
    Если НЕ Объект.НеМеняетСтатусТехники Тогда
        ПроверитьНаличиеОткрытыхЗаказНарядов();
    КонецЕсли;
    //---rarus-spb_zlov 26.04.2017 
	
//++ Рарус Лимаренко 22.11.2017

	Если Объект.Моточасы = 0 Тогда
	    Возврат;
	КонецЕсли;
	
	ПрошлыеМоточасы = ОпределитьКоличествоМоточасов(Объект.Техника,Объект.Дата);
	Если ПрошлыеМоточасы > Объект.Моточасы Тогда
		ПоказатьПредупреждение(,"Количество моточасов по технике: "+Строка(Объект.Техника)+ " в прошлых заказ-нарядах больше на: " + Строка(ПрошлыеМоточасы - Объект.Моточасы));
	КонецЕсли;	

//-- Рарус Лимаренко 22.11.2017

	Для каждого текСтрока Из Объект.Работы Цикл
	
		Если текСтрока.СтавкаНДС <> ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18") Тогда
	
			текСтрока.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18");
	
		КонецЕсли;
	
	
	КонецЦикла;
	
КонецПроцедуры

//+++rarus-spb_zlov 26.04.2017    
&НаСервере
Процедура ПроверитьНаличиеОткрытыхЗаказНарядов()
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   пкСтатусыРемонтаТехникиСрезПоследних.Регистратор КАК ЗаказНаряд
    |ИЗ
    |   РегистрСведений.пкСтатусыРемонтаТехники.СрезПоследних(
    |           &Дата,
    |           Регистратор <> &Ссылка
    |               И Техника = &Техника) КАК пкСтатусыРемонтаТехникиСрезПоследних
    |ГДЕ
    |   пкСтатусыРемонтаТехникиСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.пкСтатусыРемонтаТехники.ВРемонте)";
    
    Запрос.УстановитьПараметр("Ссылка",  Объект.Ссылка);
    Запрос.УстановитьПараметр("Техника", Объект.Техника);
    Запрос.УстановитьПараметр("Дата",    ?(ЗначениеЗаполнено(Объект.ДатаОкончанияФакт), Объект.ДатаОкончанияФакт, Объект.ДатаНачалаФакт));
    
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Если Выборка.Следующий() Тогда
        Сообщить("По технике есть открытый документ """ + Выборка.ЗаказНаряд + """, по текущему заказ-наряду требуется установить признак ""Не меняет статус техники""");
        
        Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаДополнительно;
    КонецЕсли;
    
КонецПроцедуры   
//---rarus-spb_zlov 26.04.2017 

&НаКлиенте
Процедура ВидЦенПриИзменении(Элемент)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", 
    Новый Структура("НалогообложениеНДС, Дата", ?(Объект.ПлатныйРемонт, 
	ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС"),Объект.НалогообложениеНДС), Объект.Дата));

	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ВидЦены = Объект.ВидЦен;
	ВидЦеныМ = Объект.ВидЦенМатериалов;
	
	Если Элемент.Имя="ВидЦенМатериалов" Тогда
		Для Каждого СтрМат Из Объект.Материалы Цикл
			СтрМат.ВидЦены = ВидЦеныМ;
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрМат, СтруктураДействий, КэшированныеЗначения);
		КонецЦикла;
		Для Каждого СтрПлМат Из Объект.ПлановыеМатериалы Цикл
			СтрПлМат.ВидЦены = ВидЦеныМ;
		КонецЦикла;
	Иначе	
		Для Каждого СтрРаб Из Объект.Работы Цикл
			//Рарус Владимир Подрезов 27.12.2016
			СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоРеализация");
			ИмяКоличества="КоличествоРеализация";
			СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки", ИмяКоличества);
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать,ИмяКоличества", Ложь, ИмяКоличества));
			//Рарус Владимир Подрезов Конец
			СтрРаб.ВидЦены = ВидЦены;
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрРаб, СтруктураДействий, КэшированныеЗначения);
		КонецЦикла;
		Для Каждого СтрПлРаб Из Объект.ПлановыеРаботы Цикл
			СтрПлРаб.ВидЦены = ВидЦены;
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзменениеВидаЦен(Результат, ПараметрыОповещения) Экспорт
	
    Если Результат = КодВозвратаДиалога.Да Тогда
        Объект.ВидЦен = ПараметрыОповещения.ВыбранноеЗначение;
		ВидЦенПриИзменении(Элементы.ВидЦен);
	КонецЕсли;
        
КонецПроцедуры    

&НаКлиенте
Процедура ОбработкаИзменениеВидаЦенМатериалов(Результат, ПараметрыОповещения) Экспорт
	
    Если Результат = КодВозвратаДиалога.Да Тогда
        Объект.ВидЦенМатериалов = ПараметрыОповещения.ВыбранноеЗначение;
		ВидЦенПриИзменении(Элементы.ВидЦенМатериалов);
	КонецЕсли;
        
КонецПроцедуры    

&НаКлиенте
Процедура ВидЦенОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Объект.Материалы.Количество()>0 ИЛИ Объект.Работы.Количество()>0 Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыОповещения = Новый Структура("ВыбранноеЗначение",ВыбранноеЗначение);
		Если Элемент.Имя="ВидЦенМатериалов" Тогда
			Оповещение = Новый ОписаниеОповещения("ОбработкаИзменениеВидаЦенМатериалов", ЭтаФорма, ПараметрыОповещения);
    		ПоказатьВопрос(Оповещение, "Цены материалов будут перезаполнены! Продолжить?", РежимДиалогаВопрос.ДаНетОтмена, 60, КодВозвратаДиалога.Нет);
		Иначе	
			Оповещение = Новый ОписаниеОповещения("ОбработкаИзменениеВидаЦен", ЭтаФорма, ПараметрыОповещения);
    		ПоказатьВопрос(Оповещение, "Цены работ будут перезаполнены! Продолжить?", РежимДиалогаВопрос.ДаНетОтмена, 60, КодВозвратаДиалога.Нет);
		КонецЕсли; 
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьКоличество" Тогда
		ЭтаФорма.Прочитать(); 
		ОбновитьКоличествоВыдано();
		ОбновитьОтображениеДанных();
		ЗаполнитьНачалоОкончаниеРабот();
		РассчитатьНадписиИтоговые(ЭтаФорма);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПослеУдаления(Элемент)
	
	//Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	СкладПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()
	
	Объект.ЗонаОтгрузки = Справочники.СкладскиеЯчейки.ЗонаОтгрузкиПоУмолчанию(Объект.Склад, Справочники.СкладскиеПомещения.ПустаяСсылка(), Объект.ЗонаОтгрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыНачалоПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Работы.ТекущиеДанные;
	Если (НЕ ТекСтрока.Начало) И ТекСтрока.Окончание Тогда
		ТекСтрока.Начало = Истина;
		Возврат;
	КонецЕсли;
	
	Если ТекСтрока.Начало Тогда
		ТекСтрока.ДатаНачала = ТекущаяДатаНаСервере();
	Иначе
		ТекСтрока.ДатаНачала = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыОкончаниеПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Работы.ТекущиеДанные;
	//Если (НЕ ТекСтрока.Начало) И ТекСтрока.Окончание Тогда
	//	ТекСтрока.Окончание = Ложь;
	//	Возврат;
	//КонецЕсли;
	//
	//Если ТекСтрока.Окончание Тогда
	//	ТекСтрока.ДатаОкончания = Макс(ТекущаяДатаНаСервере(),ТекСтрока.ДатаНачала);
	//Иначе
	//	ТекСтрока.ДатаОкончания = "";
	//КонецЕсли;
//Рарус Владимир Подрезов 20.06.2017
	Если ТекСтрока.Окончание И Не ЗначениеЗаполнено(ТекСтрока.Сотрудник) Тогда
		ТекСтрока.Окончание = Ложь;
		ПоказатьПредупреждение(,"Перед отметкой о выполнении необходимо указать сотрудника!");
		Возврат;
	КонецЕсли;
//Рарус Владимир Подрезов Конец
	ТекСтрока.ДатаОкончания = НачалоДня(ТекущаяДатаНаСервере());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНачалоОкончаниеРабот()
	
	Для Каждого Стр Из Объект.Работы Цикл
		Стр.Начало = ЗначениеЗаполнено(Стр.ДатаНачала);
		Стр.Окончание = ЗначениеЗаполнено(Стр.ДатаОкончания);
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбъектСтроительстваНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.Клиент) Тогда
        
        СтандартнаяОбработка = Ложь;
        
        ОбъектыСтроительства = ПолучитьОбъектыСтроительстваКлиента();
        
        Отбор = Новый Структура("Ссылка", ОбъектыСтроительства);
    
        ПараметрыФормы = Новый Структура("Отбор", Отбор);
    
        ОткрытьФорму("Справочник.СМ_ОбъектыСтроительства.Форма.ФормаВыбора", ПараметрыФормы, , , , , Новый ОписаниеОповещения("ОбъектСтроительстваНачалоВыбораЗавершение", ЭтаФорма));

    КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектСтроительстваНачалоВыбораЗавершение(ВыбранноеЗначение, ДопПараметры) Экспорт 
    
    Если ВыбранноеЗначение <> Неопределено Тогда
        Объект.ОбъектСтроительства = ВыбранноеЗначение;
    КонецЕсли;    
    
КонецПроцедуры    

&НаСервере
Функция ПолучитьОбъектыСтроительстваКлиента()
    
    ОбъектыСтроительства = Новый Массив();
    
    Для Каждого Строка ИЗ Объект.Клиент.пкОбъектыСтроительства Цикл
        ОбъектыСтроительства.Добавить(Строка.ОбъектСтроительства);    
    КонецЦикла;  
    
    Возврат ОбъектыСтроительства;
                    
КонецФункции  

&НаКлиенте
Процедура РемонтыВидРемонтаБезРазбиенияПриИзменении(Элемент)
	//+++ВидРемонта перенесен в реквизит документа
	//Объект.ПлатныйРемонт = ПроверитьПлатныйРемонт(Объект.ВидРемонта);
    
    //+++rarus-spb_zlov 17.01.2017    
    //Объект.СтатьяРасходов = ПолучитьСтатьюРасходов(Объект.ВидРемонта);
    //---rarus-spb_zlov 17.01.2017 
	
	Для Каждого СтрМат Из Объект.Материалы Цикл
		Если Не ЗначениеЗаполнено(СтрМат.ВидРемонта) Тогда 
			СтрМат.ВидРемонта = Объект.ВидРемонта;
		КонецЕсли;	
		СтрМат.ПлатныйРемонт = Объект.ПлатныйРемонт;
	КонецЦикла;
	Для Каждого СтрРаб Из Объект.Работы Цикл
		Если Не ЗначениеЗаполнено(СтрРаб.ВидРемонта) Тогда 
			СтрРаб.ВидРемонта = Объект.ВидРемонта;
		КонецЕсли;	
		СтрРаб.ПлатныйРемонт = Объект.ПлатныйРемонт;
	КонецЦикла;
	
	УстановитьВидимостьКолонокПлатныхРемонтов();	
	//---ВидРемонта перенесен в реквизит документа
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьМатериалы(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("Валюта", Объект.Валюта);
	ПараметрыФормы.Вставить("ВидЦены", Объект.ВидЦенМатериалов);
	ПараметрыФормы.Вставить("Склад", Объект.Склад);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("Партнер", Объект.Клиент);
	ПараметрыФормы.Вставить("СкрыватьРучныеСкидки", Истина);
	ПараметрыФормы.Вставить("РежимПодбораИспользоватьСкладыВТабличнойЧасти", Истина);
	ПараметрыФормы.Вставить("РежимПодбораИсключитьГруппыДоступныеВЗаказах", Истина);
	ПараметрыФормы.Вставить("РежимПодбораБезСоглашенийСКлиентами", Истина);
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре(Ложь)));
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение)
	ТекстСообщения="";	
	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение,ТекстСообщения);
	Если не ТекстСообщения="" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение,ТекстСообщения)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		ТекущаяСтрока = Неопределено;
		НайденныеСтроки=Объект.Материалы.НайтиСтроки(Новый Структура("Номенклатура",СтрокаТовара.Номенклатура)); 
		Для каждого СтрокаПоиска Из НайденныеСтроки Цикл
			Если СтрокаПоиска.Характеристика=СтрокаТовара.Характеристика Тогда
				ТекущаяСтрока=СтрокаПоиска;	
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		Если ТекущаяСтрока = Неопределено Тогда
			ТекущаяСтрока = Объект.Материалы.Добавить();
			ТекущаяСтрока.ПлатныйРемонт = Объект.ТехникаКлиента И Объект.ПлатныйРемонт;
			СписокСвойств = "Номенклатура, Характеристика, Упаковка, ВидЦены, Цена, КоличествоУпаковок";
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, СписокСвойств);
		Иначе	
			Если ТекстСообщения="" Тогда
				ТекстСообщения="Внимание! Некоторые подобранные позиции уже присутсвовали в документе, их количество увеличено!";	
			КонецЕсли;
			ТекстСообщения=ТекстСообщения+Символы.ПС;
			ТекстСообщения=ТекстСообщения+"Строка №"+ТекущаяСтрока.НомерСтроки+" "+ТекущаяСтрока.Номенклатура+" добавл. кол-во "+СтрокаТовара.КоличествоУпаковок;
			ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок+СтрокаТовара.КоличествоУпаковок;
			Если Не ЗначениеЗаполнено(ТекущаяСтрока.Цена) и ЗначениеЗаполнено(СтрокаТовара.Цена) Тогда
				ТекущаяСтрока.Цена=СтрокаТовара.Цена;
				ТекущаяСтрока.ВидЦены=СтрокаТовара.ВидЦены;
			КонецЕсли;
		КонецЕсли; 
		ТекущаяСтрока.Количество = ТекущаяСтрока.КоличествоУпаковок;
		ТекущаяСтрока.ВидРемонта = Объект.ВидРемонта;
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
		ИмяКоличества="КоличествоУпаковок";
		СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки", ИмяКоличества);
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать,ИмяКоличества", Ложь, ИмяКоличества));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", 
    	Новый Структура("НалогообложениеНДС, Дата", ?(Объект.ПлатныйРемонт, 
		ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС"),Объект.НалогообложениеНДС), Объект.Дата));

		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	КонецЦикла;
	
КонецПроцедуры
#КонецОбласти
		
&НаКлиенте
Процедура ПлатныйРемонтПриИзменении(Элемент)
    
    //+++rarus-spb_zlov 17.01.2017    
    Объект.СтатьяРасходов = ПолучитьСтатьюРасходов();
    
    ТекСтрока = Элементы.Ремонты.ТекущиеДанные;
    
    Если ТекСтрока <> Неопределено Тогда
        ТекСтрока.СтатьяРасходов = Объект.СтатьяРасходов;
    КонецЕсли;    
    //---rarus-spb_zlov 17.01.2017 
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", 
    Новый Структура("НалогообложениеНДС, Дата", ?(Объект.ПлатныйРемонт, 
	ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС"),Объект.НалогообложениеНДС), Объект.Дата));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	Для Каждого СтрМат Из Объект.Материалы Цикл
		СтрМат.ПлатныйРемонт = Объект.ПлатныйРемонт;
		Если Объект.ПлатныйРемонт Тогда 
			СтрМат.ВидЦены = Объект.ВидЦенМатериалов;
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрМат, СтруктураДействий, КэшированныеЗначения);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрРаб Из Объект.Работы Цикл
		СтрРаб.ПлатныйРемонт = Объект.ПлатныйРемонт;
		Если Объект.ПлатныйРемонт Тогда 
			//Рарус Владимир Подрезов 27.12.2016
			СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоРеализация");
			СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки", "КоличествоРеализация");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать,ИмяКоличества", Ложь,"КоличествоРеализация"));
			//Рарус Владимир Подрезов Конец
			СтрРаб.ВидЦены = Объект.ВидЦен;
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрРаб, СтруктураДействий, КэшированныеЗначения);
		КонецЕсли;
	КонецЦикла;
	
	УстановитьВидимостьКолонокПлатныхРемонтов();
	УстановитьВидимостьКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзЗаданияНаРемонт(Команда)
	
	ОповещениеВыбора = Новый ОписаниеОповещения("ВыполнитьПриВыбореЗаданияНаРемонт", ЭтотОбъект, Новый Структура("Форма",ЭтаФорма));
	//ПараметрыОтбора = Новый Структура("ВидРемонта,ОбъектЭксплуатации",Объект.ВидРемонта,Объект.Техника);
	//ПараметрыОтбора = Новый Структура("ОбъектЭксплуатации",Объект.Техника);
	//ПараметрыФормы = Новый Структура("Отбор,МножественныйВыбор", ПараметрыОтбора, Истина);
	ПараметрыФормы = Новый Структура("ОбъектЭксплуатации,МножественныйВыбор", Объект.Техника, Истина);
	
	//Если Объект.ПлановыеРаботы.Количество()>0 Тогда
	//	ПараметрыОповещения = Новый Структура("ПараметрыФормы,ОповещениеВыбора",ПараметрыФормы,ОповещениеВыбора);
	//	Оповещение = Новый ОписаниеОповещения("ОбработкаВопросаОчисткаРабот", ЭтаФорма, ПараметрыОповещения);
	//	ПоказатьВопрос(Оповещение, "Список работ будет очищен! Продолжить?", РежимДиалогаВопрос.ДаНетОтмена, 60, КодВозвратаДиалога.Нет);		
	//Иначе	
		ОткрытьФорму("Документ.пкЗаданиеНаРемонт.ФормаВыбора",ПараметрыФормы,ЭтаФорма,,,,ОповещениеВыбора);
	//КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВопросаОчисткаРабот(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
        ОткрытьФорму("Документ.пкЗаданиеНаРемонт.ФормаВыбора",ПараметрыОповещения.ПараметрыФормы,ЭтаФорма,,,,ПараметрыОповещения.ОповещениеВыбора);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ВыполнитьПриВыбореЗаданияНаРемонт(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатЗакрытия) Тогда 
		//Объект.Работы.Очистить();
		Если ТипЗнч(РезультатЗакрытия) = Тип("ДокументСсылка.пкЗаданиеНаРемонт") Тогда 
			ЗаполнитьРаботыИзЗаданияНаРемонт(РезультатЗакрытия);
		ИначеЕсли ТипЗнч(РезультатЗакрытия) = Тип("Массив") Тогда 
			Для Каждого ЭлементМассива Из РезультатЗакрытия Цикл
				ЗаполнитьРаботыИзЗаданияНаРемонт(ЭлементМассива);
			КонецЦикла;	
		КонецЕсли;
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;	
	
//Рарус Владимир Подреов 16.10.2017
	ОпределитьЕстьНеЗакрытыеЗадания();
//Рарус Владимир Подреов Конец
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРаботыИзЗаданияНаРемонт(ЗаданиеНаРемонт)
	
	
	ЗапросРабот = Новый Запрос;
	ЗапросРабот.Текст = "ВЫБРАТЬ
	|	пкЗаданияНаРемонтОстатки.ЗаданиеНаРемонт,
	|	пкЗаданияНаРемонтОстатки.ВидРемонта,
	|	пкЗаданияНаРемонтОстатки.Работа,
	|	СУММА(пкЗаданиеНаРемонтПланируемыеРаботы.Количество) КАК Количество
	|ИЗ
	|	РегистрНакопления.пкЗаданияНаРемонт.Остатки(, ЗаданиеНаРемонт = &ЗаданиеНаРемонт) КАК пкЗаданияНаРемонтОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкЗаданиеНаРемонт.ПланируемыеРаботы КАК пкЗаданиеНаРемонтПланируемыеРаботы
	|		ПО пкЗаданияНаРемонтОстатки.ЗаданиеНаРемонт = пкЗаданиеНаРемонтПланируемыеРаботы.Ссылка
	|			И пкЗаданияНаРемонтОстатки.Работа = пкЗаданиеНаРемонтПланируемыеРаботы.Работа
	|
	|СГРУППИРОВАТЬ ПО
	|	пкЗаданияНаРемонтОстатки.ЗаданиеНаРемонт,
	|	пкЗаданияНаРемонтОстатки.ВидРемонта,
	|	пкЗаданияНаРемонтОстатки.Работа";
	ЗапросРабот.УстановитьПараметр("ЗаданиеНаРемонт",ЗаданиеНаРемонт);
	Результат = ЗапросРабот.Выполнить();
	Если Результат.Пустой() Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Задание на ремонт уже подобрано в документы!");
	КонецЕсли;	
	
	ДобавленоСтрок = 0;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		МассивСтрок = Объект.Работы.НайтиСтроки(Новый Структура("Номенклатура",Выборка.Работа));
		Если МассивСтрок.Количество() > 0 Тогда 
			Продолжить;
		КонецЕсли;	
		
		СтрокаТЧ = Объект.Работы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ,Выборка);
		СтрокаТЧ.Номенклатура = Выборка.Работа;
		СтрокаТЧ.ЗаданиеНаРемонт = Выборка.ЗаданиеНаРемонт;
		СтрокаТЧ.ВидРемонта = Выборка.ВидРемонта;
		СтрокаТЧ.ПлатныйРемонт = Объект.ПлатныйРемонт;
		СтрокаТЧ.ВидЦены = Объект.ВидЦен;
		СтрокаТЧ.ЕдиницаИзмерения = ПолучитьЗначениеРеквизита(СтрокаТЧ.Номенклатура, "ЕдиницаИзмерения");
		
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", 
		Новый Структура("НалогообложениеНДС, Дата", ?(Объект.ПлатныйРемонт, 
		ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС"),Объект.НалогообложениеНДС), Объект.Дата));
		
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		
//Рарус Владимир Подрезов 27.12.2016
//		СтруктураДействий.Вставить("ПересчитатьСумму", "Количество");
		СтрокаТЧ.КоличествоРеализация = Выборка.Количество;
		СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоРеализация");
//Рарус Владимир Подрезов Конец
		ИмяКоличества="КоличествоРеализация";
		СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки", ИмяКоличества);
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать,ИмяКоличества", Ложь, ИмяКоличества));
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(СтрокаТЧ,СтруктураДействий);
		ОбработкаТабличнойЧастиВызовСервера.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, КэшированныеЗначения);
		ЗаполнитьЗначенияСвойств(СтрокаТЧ,ТекущаяСтрокаСтруктура);
		
		ДобавленоСтрок = ДобавленоСтрок + 1;
		
	КонецЦикла;
	
	Если ДобавленоСтрок = 0 Тогда 
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Задание на ремонт уже подобрано в документ!");
		
	КонецЕсли;	
			
КонецПроцедуры

&НаСервере
Функция ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий)
	Перем СтруктураПараметровДействия;

	СтруктураПолейТЧ = Новый Структура;

	Если СтруктураДействий.Свойство("ПроверитьХарактеристикуПоВладельцу") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьХарактеристикуКиЗПоВладельцу") Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураКиЗ");
		СтруктураПолейТЧ.Вставить("ХарактеристикаКиЗ");
		СтруктураПолейТЧ.Вставить("ХарактеристикиКиЗИспользуются");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьУпаковкуПоВладельцу") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьСтатьюАналитикуРасходов") Тогда
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("СтатьяРасходов");
		СтруктураПолейТЧ.Вставить("АналитикаРасходов");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц")
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок", 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
	КонецЕсли;
	
	Суффикс = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницСуффикс",Суффикс)
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокСуффикс",Суффикс) Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок"+Суффикс, 0);
		СтруктураПолейТЧ.Вставить("Количество"+Суффикс    , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоОтклонение") Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоОтклонение", 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокОтклонение", 0);
		СтруктураПолейТЧ.Вставить("КоличествоФакт", 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт", 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок", 0);
	КонецЕсли; 
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокСуффиксИзОтклонения",Суффикс) Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокОтклонение", 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок"+Суффикс, 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок"		  , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьВесОбъем",Суффикс) Тогда
		СтруктураПолейТЧ.Вставить("ВесУпаковки", 0);
		СтруктураПолейТЧ.Вставить("ОбъемУпаковки", 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок"+Суффикс, 0);
		СтруктураПолейТЧ.Вставить("Вес", 0);
		СтруктураПолейТЧ.Вставить("Объем", 0);
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияВеса");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияОбъема");
	КонецЕсли;
	
	Суффикс = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоВесу",Суффикс)
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоОбъему",Суффикс) Тогда
		СтруктураПолейТЧ.Вставить("ВесУпаковки", 0);
		СтруктураПолейТЧ.Вставить("ОбъемУпаковки", 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок"+Суффикс, 0);
		СтруктураПолейТЧ.Вставить("Количество"+Суффикс, 0);
		СтруктураПолейТЧ.Вставить("Вес", 0);
		СтруктураПолейТЧ.Вставить("Объем", 0);
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияВеса");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияОбъема");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажи") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("Цена", 0);
        
        //+++rarus-spb_zlov 25.09.2016    
		СтруктураПолейТЧ.Вставить("пкЗаявкаНаАрендуТехники");
		СтруктураПолейТЧ.Вставить("пкТехника");
		СтруктураПолейТЧ.Вставить("Количество");
		СтруктураПолейТЧ.Вставить("пкВидТарифа");
        //---rarus-spb_zlov 25.09.2016 
        
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажиПоАссортименту") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуЗакупки") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ВидЦеныПоставщика");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияЗакупок") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ВидЦеныПоставщика");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруПоНоменклатуреПоставщика") Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураПоставщика");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре") Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураПоставщика");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьСопоставленнуюНоменклатуруПоставщика") Тогда
		СтруктураПолейТЧ.Вставить("НомерСтроки");
		СтруктураПолейТЧ.Вставить("НоменклатураПоставщика");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДС")
		 ИЛИ СтруктураДействий.Свойство("ЗаполнитьСтавкуНДСПоНоменклатуре") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДСВозвратнойТары") Тогда
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("СтавкаНДС", 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
		СтруктураПолейТЧ.Вставить("СуммаСНДС", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуБезНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
		СтруктураПолейТЧ.Вставить("СуммаБезНДС", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуРегл") Тогда
		СтруктураПолейТЧ.Вставить("СуммаРегл"    , 0);
		СтруктураПолейТЧ.Вставить("СуммаБезНДС", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьНДСРегл") Тогда
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
		СтруктураПолейТЧ.Вставить("НДСРегл", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСумму") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"             , 0);
		СтруктураПолейТЧ.Вставить("Цена"              , 0);
		СтруктураПолейТЧ.Вставить(?(ПустаяСтрока(СтруктураДействий.ПересчитатьСумму),"КоличествоУпаковок",СтруктураДействий.ПересчитатьСумму), 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуРучнойСкидки") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"              , 0);
		СтруктураПолейТЧ.Вставить("Количество"         , 0);
		СтруктураПолейТЧ.Вставить("Цена      "         , 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомРучнойСкидки") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"              , 0);
		СтруктураПолейТЧ.Вставить("Количество"         , 0);
		СтруктураПолейТЧ.Вставить("Цена      "         , 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомАвтоматическойСкидки") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаБонусныхБалловКСписаниюВВалюте"  , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаУпаковку") Тогда
		СтруктураПолейТЧ.Вставить("Цена"      , 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаказаЗаУпаковку") Тогда
		СтруктураПолейТЧ.Вставить("ЦенаЗаказа"      , 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуСверхЗаказа") Тогда
		СтруктураПолейТЧ.Вставить("СуммаСНДС" , 0);
		СтруктураПолейТЧ.Вставить("СуммаСверхЗаказа", 0);
		СтруктураПолейТЧ.Вставить("КодСтроки", 1);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВПродажах") Тогда
		СтруктураПолейТЧ.Вставить("Цена"                       , 0);
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки", 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"          , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки"        , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок "        , 0);
		СтруктураПолейТЧ.Вставить("Количество"  			   , 0);
		СтруктураПолейТЧ.Вставить("ВидЦены");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВЗакупках") Тогда
		СтруктураПолейТЧ.Вставить("Цена"                       , 0);
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"          , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки"        , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок "        , 0);
		СтруктураПолейТЧ.Вставить("Количество"   		       , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок") Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПоДаннымУчета", 0);
		СтруктураПолейТЧ.Вставить("КоличествоПоДаннымУчета"        , 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьСклад") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Склад");
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродаж") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
		СтруктураПолейТЧ.Вставить("СрокПоставки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродажУслуги") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьРеквизитыПоНоменклатуре") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ВестиУчетПоГТД");
		СтруктураПолейТЧ.Вставить("ЭтоУслуга");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТипНоменклатуры", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакМаркируемаяАлкогольнаяПродукция", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАлкогольнаяПродукция", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакЕдиницаИзмерения", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("пкТипТехники", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
    КонецЕсли;
    
    //+++rarus-spb_zlov 19.10.2016   
    
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТипИзмеряемойВеличины", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
    КонецЕсли;
    
    //---rarus-spb_zlov 19.10.2016 
    
	Если СтруктураДействий.Свойство("ЗаполнитьВесУпаковки") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ВесУпаковки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьОбъемУпаковки") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ОбъемУпаковки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЕдиницуИзмеренияВеса") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияВеса");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЕдиницуИзмеренияОбъема") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияОбъема");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакСерииИспользуются", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакХарактеристикиИспользуются", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАналитикаРасходовОбязательна", СтруктураПараметровДействия) Тогда
		
		Если Не СтруктураПараметровДействия = Неопределено И СтруктураПараметровДействия.Свойство("ИмяРеквизита") Тогда
			СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия["ИмяРеквизита"]);
		Иначе
			СтруктураПолейТЧ.Вставить("СтатьяРасходов");
		КонецЕсли;
		СтруктураПолейТЧ.Вставить("АналитикаРасходовОбязательна");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАналитикаРасходовЗаказРеализация", СтруктураПараметровДействия) Тогда
		
		Если Не СтруктураПараметровДействия = Неопределено И СтруктураПараметровДействия.Свойство("ИмяРеквизита") Тогда
			СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия["ИмяРеквизита"]);
		Иначе
			СтруктураПолейТЧ.Вставить("СтатьяРасходов");
		КонецЕсли;
		СтруктураПолейТЧ.Вставить("АналитикаРасходовЗаказРеализация");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакРаспределениеНДС", СтруктураПараметровДействия) Тогда
		
		Если Не СтруктураПараметровДействия = Неопределено И СтруктураПараметровДействия.Свойство("ИмяРеквизита") Тогда
			СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия["ИмяРеквизита"]);
		Иначе
			СтруктураПолейТЧ.Вставить("СтатьяРасходов");
		КонецЕсли;
		СтруктураПолейТЧ.Вставить("РаспределениеНДС");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВедетсяУчетПоГТД", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакЭтоУслуга", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("УстановитьАктивность") Тогда
		СтруктураПолейТЧ.Вставить("Активность");
		СтруктураПолейТЧ.Вставить("ИндексКартинки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьХарактеристикуНекачественногоТовара") 
		ИЛИ СтруктураДействий.Свойство("ЗаполнитьУпаковкуНекачественногоТовара") Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураИсходногоКачества");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьВариантКомплектацииПоВладельцу") Тогда

		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ВариантКомплектации");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");

	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьФлагРасхождение") Тогда

		СтруктураПолейТЧ.Вставить("Расхождение");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокОтклонение") Тогда

		СтруктураПолейТЧ.Вставить("КоличествоУпаковокОтклонение");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьФлагИзлишекПорча") Тогда

		СтруктураПолейТЧ.Вставить("ИзлишекПорча");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьФлагИзлишекПорча") Тогда

		СтруктураПолейТЧ.Вставить("ИзлишекПорча");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьСуммуВзаиморасчетов") Тогда
		
		СтруктураПолейТЧ.Вставить("СуммаВзаиморасчетов");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьАвтоматическуюСкидку") Тогда
		
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки");
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСодержание") Тогда
		СтруктураПолейТЧ.Вставить("Содержание");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьДубликатыЗависимыхРеквизитов", СтруктураПараметровДействия) Тогда
		Для Каждого ПолеСтруктуры Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(ПолеСтруктуры.Ключ);
			ЗависимыеРеквизиты = Новый Структура(ПолеСтруктуры.Значение);
			Для Каждого Реквизит Из ЗависимыеРеквизиты Цикл
				СтруктураПолейТЧ.Вставить(Реквизит.Ключ+ПолеСтруктуры.Ключ, 0);
				СтруктураПолейТЧ.Вставить(Реквизит.Ключ, 0);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьСуммуВознаграждения") Тогда
		СтруктураПолейТЧ.Вставить("СуммаВознаграждения");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтатьюАналитикуРасходовПоУмолчанию") Тогда
		СтруктураПолейТЧ.Вставить("СтатьяРасходов");
		СтруктураПолейТЧ.Вставить("АналитикаРасходов");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВариантОформленияПродажи") Тогда
		СтруктураПолейТЧ.Вставить("ВариантОформленияПродажи");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакПодакцизныйТовар", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоНеОтгружать") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокВДокументе");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокНеОтгружать");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокВДокументеНеотгружаемые");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПродажи") Тогда
		СтруктураПолейТЧ.Вставить("ЦенаПродажи");
		СтруктураПолейТЧ.Вставить("СуммаПродажи");
		СтруктураПолейТЧ.Вставить("СуммаПродажиНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ВариантОбеспечения");
		СтруктураПолейТЧ.Вставить("ДатаОтгрузки");
		СтруктураПолейТЧ.Вставить("Склад");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьОбеспечение") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ВариантОбеспечения");
		
		Если СтруктураДействий.ПроверитьЗаполнитьОбеспечение.Свойство("ПроверитьЗаполнитьНазначениеОтправителя") Тогда	
			СтруктураПолейТЧ.Вставить("НазначениеОтправителя")
		Иначе
			СтруктураПолейТЧ.Вставить("Назначение");
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьУчетноеКоличествоНоменклатуры")
	 ИЛИ СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоФакту") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокУчет");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУчетноеКоличествоНоменклатуры") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокУчет");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ИндексСовместноПродаваемыеТовары");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьАссортиментСтроки") Тогда
		СтруктураПолейТЧ.Вставить("НомерСтроки");
		СтруктураПолейТЧ.Вставить("Номенклатура");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакБезВозвратнойТары", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("БезВозвратнойТары");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакОтмененоБезВозвратнойТары", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("ОтмененоБезВозвратнойТары");
		СтруктураПолейТЧ.Вставить("Отменено");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАктивностьБезВозвратнойТары", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("АктивностьБезВозвратнойТары");
		СтруктураПолейТЧ.Вставить("Активность");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАртикул", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАлкогольнаяПродукция", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	//++ НЕ УТ
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПередачиПродукцииДавальцу") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	//-- НЕ УТ
	
	Если СтруктураДействий.Свойство("ЗаполнитьПомещение", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("Помещение");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПродавца", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("Продавец");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьИндексАкцизнойМарки", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("МаркируемаяАлкогольнаяПродукция");
		СтруктураПолейТЧ.Вставить("ИндексАкцизнойМарки");
		СтруктураПолейТЧ.Вставить("КоличествоАкцизныхМарок");
		СтруктураПолейТЧ.Вставить("Количество");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьGTINВСтроке", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("GTIN");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруЕГАИС", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("НоменклатураЕГАИС");
		СтруктураПолейТЧ.Вставить("МаркируемаяАлкогольнаяПродукция");
		СтруктураПолейТЧ.Вставить("АлкогольнаяПродукция");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьСериюРассчитатьСтатус",СтруктураПараметровДействия) Тогда
		
		Если СтруктураПараметровДействия.ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
			СтруктураПолейТЧ.Вставить("Серия");
			СтруктураПолейТЧ.Вставить("Номенклатура");
			СтруктураПолейТЧ.Вставить("Характеристика");
		
			СтруктураПолейТЧ.Вставить("СтатусУказанияСерий");
		Иначе
			Для Каждого ИмяПоляСтатус из СтруктураПараметровДействия.ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
				Суффикс = НоменклатураКлиентСервер.СуффиксВИмениПоляСтатусУказанияСерий(ИмяПоляСтатус);
				СтруктураПолейТЧ.Вставить(ИмяПоляСтатус);
				Если ТекущаяСтрока.Свойство("Серия" + Суффикс) Тогда
					СтруктураПолейТЧ.Вставить("Серия" + Суффикс);
					СтруктураПолейТЧ.Вставить("Номенклатура" + Суффикс);
					СтруктураПолейТЧ.Вставить("Характеристика" + Суффикс);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого СтрМас из СтруктураПараметровДействия.ПараметрыУказанияСерий.ПоляСвязи Цикл
			СтруктураПолейТЧ.Вставить(СтрМас);
		КонецЦикла;
		
		Для Каждого СтрМас из СтруктураПараметровДействия.ПараметрыУказанияСерий.ИменаПолейДополнительные Цикл
			СтруктураПолейТЧ.Вставить(СтрМас);
		КонецЦикла;
		
		Если СтруктураПараметровДействия.ПараметрыУказанияСерий.ЭтоЗаказ Тогда
			СтруктураПолейТЧ.Вставить("Отменено");
			СтруктураПолейТЧ.Вставить("ВариантОбеспечения");
		КонецЕсли;
		
		СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия.ПараметрыУказанияСерий.ИмяПоляКоличество);
		
		Если ТекущаяСтрока.Свойство("Назначение") Тогда
			СтруктураПолейТЧ.Вставить("Назначение");
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПартиюТМЦВЭксплуатации") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ФизическоеЛицо");
		СтруктураПолейТЧ.Вставить("ПартияТМЦВЭксплуатации");
		СтруктураПолейТЧ.Вставить("ИнвентарныйУчет");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("Количество");
	КонецЕсли;
	
	//++ НЕ УТ
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакиПартииТМЦВЭксплуатации") Тогда
		СтруктураПолейТЧ.Вставить("ПартияТМЦВЭксплуатации");
		СтруктураПолейТЧ.Вставить("ИнвентарныйУчет");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("Количество");
	КонецЕсли;
	//-- НЕ УТ
	
	Если СтруктураДействий.Свойство("ПересчитатьРасхожденияПослеОтгрузки") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаНДСРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаСНДСРасхождения");
		
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПоДокументу");
		СтруктураПолейТЧ.Вставить("КоличествоПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаНДСПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаСНДСПоДокументу");
		СтруктураПолейТЧ.Вставить("ЕстьРасхождения");
		СтруктураПолейТЧ.Вставить("Действие");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьРасхожденияПослеПриемки") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаНДСРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаСНДСРасхождения");
		
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПоДокументу");
		СтруктураПолейТЧ.Вставить("КоличествоПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаНДСПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаСНДСПоДокументу");
		СтруктураПолейТЧ.Вставить("ЕстьРасхождения");
		СтруктураПолейТЧ.Вставить("Действие");
		СтруктураПолейТЧ.Вставить("ПоВинеСтороннейКомпании");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьРасхождения") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокРасхождения");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПоДокументу");
		СтруктураПолейТЧ.Вставить("КоличествоПоДокументу");
		СтруктураПолейТЧ.Вставить("ЕстьРасхождения");
		СтруктураПолейТЧ.Вставить("Действие");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТовМестаТребуетсяОбработка") Тогда
		СтруктураПолейТЧ.Вставить("Штрихкод");
		СтруктураПолейТЧ.Вставить("ШтрихкодНеОпределен");
		СтруктураПолейТЧ.Вставить("ЭтоУпаковочныйЛист");
		СтруктураПолейТЧ.Вставить("УпаковочныйЛист");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("КоличествоЗаполненныхПодчиненныхПозиций");
		СтруктураПолейТЧ.Вставить("ТребуетсяОбработка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьНазначение") Тогда
		СтруктураПолейТЧ.Вставить("Назначение");
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПриИзмененииНазначения") Тогда
		СтруктураПолейТЧ.Вставить("Назначение");
		СтруктураПолейТЧ.Вставить("НазначениеОтправителя");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакиКатегорииЭксплуатации") Тогда
		СтруктураПолейТЧ.Вставить("КатегорияЭксплуатации");
		СтруктураПолейТЧ.Вставить("ИнвентарныйУчет");
		СтруктураПолейТЧ.Вставить("СпособПогашенияСтоимостиБУ");
		СтруктураПолейТЧ.Вставить("СтатьяРасходов");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакДвиженияПоСкладскимРегистрам", СтруктураПараметровДействия) Тогда
		СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия);
		СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия + "ДвиженияПоСкладскимРегистрам");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения") Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("ВариантОбеспечения");
		СтруктураПолейТЧ.Вставить("Отменено");
		
		СтруктураПолейТЧ.Вставить("ДатаОтгрузкиОбязательна");
		СтруктураПолейТЧ.Вставить("СкладОбязателен");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуУслугиЗаказДавальца") Тогда
		
		СтруктураПолейТЧ.Вставить("СуммаУслуги"       , 0);
		СтруктураПолейТЧ.Вставить("Цена"              , 0);
		СтруктураПолейТЧ.Вставить(?(ПустаяСтрока(СтруктураДействий.ПересчитатьСуммуЗаказДавальца),"КоличествоУпаковок",СтруктураДействий.ПересчитатьСуммуЗаказДавальца), 0);
	
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуЗаказДавальца") Тогда
		
		СтруктураПолейТЧ.Вставить("СуммаУслуги",                0);
		СтруктураПолейТЧ.Вставить("СуммаСобственныхМатериалов", 0);
		СтруктураПолейТЧ.Вставить("Сумма",                      0);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьВариантОтраженияКорректировкиРеализации") Тогда
		
		СтруктураПолейТЧ.Вставить("ВариантОтражения");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтрануПроисхожденияДляНомераГТД") Тогда
		СтруктураПолейТЧ.Вставить("СтранаПроисхождения");
	КонецЕсли;
	
	//++ НЕ УТКА
	Если СтруктураДействий.Свойство("ЗаполнитьНазначениеМатериалыВСтрокеСверхЗаказа") Тогда
		
		СтруктураПолейТЧ.Вставить("ЗаказДавальца");
		СтруктураПолейТЧ.Вставить("Назначение");
		СтруктураПолейТЧ.Вставить("КодСтроки");
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		
	КонецЕсли;
	//-- НЕ УТКА
	
	ЗаполнитьЗначенияСвойств(СтруктураПолейТЧ, ТекущаяСтрока);
	
	Возврат СтруктураПолейТЧ;
	
КонецФункции

&НаКлиенте
Процедура ТехникаПриИзменении(Элемент)
	
	//Если пкУправлениеТехникойСервер.ПолучитьСтатусТехники(Объект.Техника) = ПредопределенноеЗначение("Перечисление.пкСтатусыТехники.Недоступен") Тогда
	//	ПоказатьПредупреждение(,"Нельзя выбирать технику в статусе «Недоступна»");
	//КонецЕсли;
	
	ОбновитьСисокВидовРемонта();
	ОбновитьСерийныйНомер();	
	Если ЗначениеЗаполнено(Объект.Техника) Тогда 
		МестоположениеТ = ПодобратьКлиентаПоМестоположению(Объект.Техника, ?(ЗначениеЗаполнено(Объект.Дата),Объект.Дата,ТекущаяДатаНаСервере()));
		Если МестоположениеТ <> Неопределено Тогда
			Если Объект.МестоРемонта <> ПредопределенноеЗначение("Перечисление.пкМестоРемонта.УКлиента") Тогда 
				ПараметрыОповещения = Новый Структура;
				Оповещение = Новый ОписаниеОповещения("ОбработкаВопросаМестоРемонта", ЭтаФорма, ПараметрыОповещения);
				ПоказатьВопрос(Оповещение, "Техника находится в аренде. Изменить место ремонта?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(Объект, МестоположениеТ);	
		КонецЕсли;
		
		ПроверитьСуществующиеЗаказНаряды();
		
	КонецЕсли;
	
//Рарус Владимир Подреов 16.10.2017
	ОпределитьЕстьНеЗакрытыеЗадания();
//Рарус Владимир Подреов Конец
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВопросаМестоРемонта(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.МестоРемонта = ПредопределенноеЗначение("Перечисление.пкМестоРемонта.УКлиента");
		МестоРемонтаПриИзменении(Элементы.МестоРемонта);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСисокВидовРемонта()
	
	МассивВидовРемонта = Новый Массив;
	Если ЗначениеЗаполнено(Объект.Техника) Тогда 
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	КлассыОбъектовЭксплуатацииРемонтныйЦикл.ВидРемонта
		                      |ИЗ
		                      |	Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассыОбъектовЭксплуатации.РемонтныйЦикл КАК КлассыОбъектовЭксплуатацииРемонтныйЦикл
		                      |		ПО ОбъектыЭксплуатации.Класс = КлассыОбъектовЭксплуатацииРемонтныйЦикл.Ссылка
		                      |ГДЕ
		                      |	ОбъектыЭксплуатации.Ссылка = &Техника
		                      |
		                      |ОБЪЕДИНИТЬ ВСЕ
		                      |
		                      |ВЫБРАТЬ
		                      |	КлассыОбъектовЭксплуатацииПрочиеРемонты.ВидРемонта
		                      |ИЗ
		                      |	Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассыОбъектовЭксплуатации.ПрочиеРемонты КАК КлассыОбъектовЭксплуатацииПрочиеРемонты
		                      |		ПО ОбъектыЭксплуатации.Класс = КлассыОбъектовЭксплуатацииПрочиеРемонты.Ссылка
		                      |ГДЕ
		                      |	ОбъектыЭксплуатации.Ссылка = &Техника");
		Запрос.УстановитьПараметр("Техника",Объект.Техника);
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВидыРемонтов.Ссылка КАК ВидРемонта
		                      |ИЗ
		                      |	Справочник.ВидыРемонтов КАК ВидыРемонтов
		                      |ГДЕ
		                      |	НЕ ВидыРемонтов.ПометкаУдаления");
	КонецЕсли;	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивВидовРемонта.Добавить(Выборка.ВидРемонта);
	КонецЦикла;
	
	Элементы.РемонтыВидРемонтаБезРазбиения.СписокВыбора.ЗагрузитьЗначения(МассивВидовРемонта);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСуществующиеЗаказНаряды()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	пкЗаказНаряд.Ссылка
	                      |ИЗ
	                      |	Документ.пкЗаказНаряд КАК пкЗаказНаряд
	                      |ГДЕ
	                      |	пкЗаказНаряд.Статус <> ЗНАЧЕНИЕ(Перечисление.пкСтатусыЗаказНарядов.Закрыт)
	                      |	И пкЗаказНаряд.Проведен
	                      |	И НЕ пкЗаказНаряд.ПометкаУдаления
	                      |	И пкЗаказНаряд.Техника = &Техника
	                      |	И пкЗаказНаряд.Ссылка <> &Ссылка");
	Запрос.УстановитьПараметр("Техника",Объект.Техника);
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда 
		Сообщение = Новый СообщениеПользователю();
	    Сообщение.Текст = "На данный подъёмник существует незакрытый заказ-наряд!";
	    Сообщение.Поле = "Техника";
	    Сообщение.УстановитьДанные(ЭтотОбъект);
	        
	    Сообщение.Сообщить();
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура МестоРемонтаПриИзменении(Элемент)
	
	//Если НЕ Объект.ТехникаКлиента Тогда 
	//	Объект.Клиент = Неопределено;
	//	Объект.ОбъектСтроительства = Неопределено;
	//	Если Объект.МестоРемонта = ПредопределенноеЗначение("Перечисление.пкМестоРемонта.УКлиента") И ЗначениеЗаполнено(Объект.Техника) Тогда 
	//		ПодобратьКлиентаПоМестоположению();
	//	КонецЕсли;	
	//КонецЕсли;	
	УстановитьВидимостьКлиент();
	ОбновитьДоступностьКомандВыдачиВозвратаМатериалов();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодобратьКлиентаПоМестоположению(Техника, Период)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	пкСостояниеТехникиСрезПоследних.Значение КАК ОбъектСтроительства,
	                      |	ВЫБОР
	                      |		КОГДА пкСостояниеТехникиСрезПоследних.Регистратор ССЫЛКА Документ.пкПогрузкаВыгрузкаПоДоставке
	                      |			ТОГДА пкСостояниеТехникиСрезПоследних.Регистратор.ЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники.Партнер
	                      |		ИНАЧЕ пкСостояниеТехникиСрезПоследних.Значение.Заказчик.Партнер
	                      |	КОНЕЦ КАК Клиент
	                      |ИЗ
	                      |	РегистрСведений.пкСостояниеТехники.СрезПоследних(
	                      |			&Дата,
	                      |			Техника = &Техника
	                      |				И Показатель = ЗНАЧЕНИЕ(ПланВидовХарактеристик.пкПоказателиСостоянияТехники.Местонахождения)) КАК пкСостояниеТехникиСрезПоследних
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.пкСтатусыТехники.СрезПоследних(&Дата, Техника = &Техника) КАК пкСтатусыТехникиСрезПоследних
	                      |		ПО пкСостояниеТехникиСрезПоследних.Техника = пкСтатусыТехникиСрезПоследних.Техника
	                      |ГДЕ
	                      |	пкСтатусыТехникиСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.пкСтатусыТехники.ВАренде)");
	Запрос.УстановитьПараметр("Дата", Период);
	Запрос.УстановитьПараметр("Техника", Техника);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда 
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		СтруктураВозврата = Новый Структура("Клиент,ОбъектСтроительства");
		ЗаполнитьЗначенияСвойств(СтруктураВозврата,Выборка);
		Возврат СтруктураВозврата;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьКлиент()
	
//Рарус Владимир Подрезов 19.01.2017
	//ВидимостьКлиент = Истина;
	//Если Объект.МестоРемонта = ПредопределенноеЗначение("Перечисление.пкМестоРемонта.НаБазе")
	//	И НЕ Объект.ТехникаКлиента Тогда
	//	ВидимостьКлиент = Ложь;
	//КонецЕсли;	
	ВидимостьКлиент = Объект.МестоРемонта = ПредопределенноеЗначение("Перечисление.пкМестоРемонта.УКлиента")
		ИЛИ Объект.ТехникаКлиента
		ИЛИ Объект.ПлатныйРемонт;	
//Рарус Владимир Подрезов Конец
	Элементы.Клиент.Видимость				 = ВидимостьКлиент;
	Элементы.Клиент.Доступность				 = ВидимостьКлиент;
	Элементы.ОбъектСтроительства.Видимость	 = ВидимостьКлиент;
	Элементы.ОбъектСтроительства.Доступность = ВидимостьКлиент;
	
КонецПроцедуры	

&НаКлиенте
Процедура ТехникаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПодборТехники = Истина;
    ВидПеревозки  = "Заказ-наряд";
	
	ПодборТехники = Ложь;
	ИсключаемаяТехника = Новый Массив();
	ИсключаемаяТехника.Добавить(Объект.Техника);
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор техники в документ %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='Заказ-наряд'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",           ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата",                ТекущаяДатаНаСервере());
	ПараметрыФормы.Вставить("Документ",            Объект);
	ПараметрыФормы.Вставить("ИзменениеСтроки",     НЕ ПодборТехники);
	ПараметрыФормы.Вставить("КоличествоПоМодели",  1);
	ПараметрыФормы.Вставить("ИсключаемаяТехника",  ИсключаемаяТехника);
	ПараметрыФормы.Вставить("КодФормы",            ВидПеревозки);
	ПараметрыФормы.Вставить("Модель",              ПредопределенноеЗначение("Справочник.уатМоделиТС.ПустаяСсылка"));
	
	ОткрытьФорму("Обработка.пкПодборТехники.Форма", ПараметрыФормы, Элементы.Техника, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеДляАктаТехническогоОбслуживания(Команда)
	ЗаполнитьДанныеДляАктаТехническогоОбслуживанияНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеДляАктаТехническогоОбслуживанияНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	пкАктТехническогоОбслуживания.НН КАК НН,
		|	пкАктТехническогоОбслуживания.НаименованиеОграничителей,
		|	пкАктТехническогоОбслуживания.Тип,
		|	пкАктТехническогоОбслуживания.Заключение
		|ИЗ
		|	РегистрСведений.пкАктТехническогоОбслуживания КАК пкАктТехническогоОбслуживания
		|ГДЕ
		|	пкАктТехническогоОбслуживания.Модель = &Модель
		|
		|УПОРЯДОЧИТЬ ПО
		|	НН";
	
	Запрос.УстановитьПараметр("Модель", Объект.Техника.пкМодель);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Объект.АктТехническогоОбслуживания.Очистить();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.НН = Объект.АктТехническогоОбслуживания.Количество() Тогда
			НоваяСтрока = Объект.АктТехническогоОбслуживания.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		ИначеЕсли ВыборкаДетальныеЗаписи.НН > Объект.АктТехническогоОбслуживания.Количество()  Тогда
			Пока ВыборкаДетальныеЗаписи.НН > Объект.АктТехническогоОбслуживания.Количество() Цикл
				НоваяСтрока = Объект.АктТехническогоОбслуживания.Добавить();
				Если ВыборкаДетальныеЗаписи.НН = Объект.АктТехническогоОбслуживания.Количество() Тогда
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
				КонецЕсли;
			КонецЦикла;	
		Иначе
			ЗаполнитьЗначенияСвойств(Объект.АктТехническогоОбслуживания[ВыборкаДетальныеЗаписи.НН - 1], ВыборкаДетальныеЗаписи);
		КонецЕсли;	
	КонецЦикла;
	
	ЗаполнитьПримечаниеПоУмолчанию();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПримечаниеПоУмолчанию()
	
	Грузоподъемность = Объект.Техника.пкМодель.пкГрузоподъемность;
	
	Для Каждого ТекСтрока Из Объект.АктТехническогоОбслуживания Цикл
		Если СокрЛП(ВРег(ТекСтрока.НаименованиеОграничителей)) = "ОГРАНИЧИТЕЛЬ ПРЕДЕЛЬНОГО ГРУЗА" Тогда
		//Если ТекСтрока.НомерСтроки = 1 Тогда
			ТекСтрока.Примечание = "Проведено испытание нагрузкой 110% (" + Строка(Окр(Грузоподъемность * 1.1 * 1000,2)) + "кг)";
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ТехникаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда 
		СтандартнаяОбработка = Ложь;
		Если ВыбранноеЗначение.Свойство("ВыбраннаяТехника") Тогда 
			Если пкУправлениеТехникойСервер.ПолучитьСтатусТехники(ВыбранноеЗначение.ВыбраннаяТехника) = ПредопределенноеЗначение("Перечисление.пкСтатусыТехники.Недоступен") Тогда
				ПоказатьПредупреждение(,"Нельзя выбирать технику в статусе «Недоступна»");
				Возврат;
			КонецЕсли;
			Объект.Техника = ВыбранноеЗначение.ВыбраннаяТехника;
		КонецЕсли;
	КонецЕсли;	
	ТехникаПриИзменении(Элемент);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьКомандВыдачиВозвратаМатериалов()
	
	ДоступнаВыдачаВозвратМатериалов = РольДоступна(Метаданные.Роли.пкДоступВыдачаВозвратМатериаловЗаказНаряда) ИЛИ РольДоступна(Метаданные.Роли.ПолныеПрава) ИЛИ РольДоступна(Метаданные.Роли.пкПолныеПрава); 
	//Если Объект.МестоРемонта = Перечисления.пкМестоРемонта.УКлиента Тогда
	//	Элементы.МатериалыВыдатьСоСклада.Видимость = Истина;
	//	Элементы.МатериалыВыдатьСоСклада.Доступность = Истина;
	//	Элементы.МатериалыВернутьНаСклад.Видимость = Истина;
	//	Элементы.МатериалыВернутьНаСклад.Доступность = Истина;
	//Иначе	
		Элементы.МатериалыВыдатьСоСклада.Видимость = ДоступнаВыдачаВозвратМатериалов;
		Элементы.МатериалыВыдатьСоСклада.Доступность = ДоступнаВыдачаВозвратМатериалов;
		Элементы.МатериалыВернутьНаСклад.Видимость = ДоступнаВыдачаВозвратМатериалов;
		Элементы.МатериалыВернутьНаСклад.Доступность = ДоступнаВыдачаВозвратМатериалов;
	//КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьДоступностьВсехЭлементовФормы(Доступность)
	
	СписокИсключенияЭлементов = Новый СписокЗначений;
	СписокИсключенияЭлементов.Добавить(Элементы.Статус);
	ДобавитьРодителяВСписокРекурсивно(Элементы.Статус,СписокИсключенияЭлементов);
	ДобавитьПодчиненныеВСписокРекурсивно(Элементы.ФормаКоманднаяПанель,СписокИсключенияЭлементов);
		
	СписокИсключенияТипов = Новый СписокЗначений;
	СписокИсключенияТипов.Добавить(Тип("ПолеНадписиФормы"));
	СписокИсключенияТипов.Добавить(Тип("ПолеКартинкиФормы"));
	СписокИсключенияТипов.Добавить(Тип("ДекорацияФормы"));
	СписокИсключенияТипов.Добавить(Тип("ДекорацияКартинкаФормы"));
	СписокИсключенияТипов.Добавить(Тип("ДекорацияТекстФормы"));
	СписокИсключенияТипов.Добавить(Тип("ДанныеФормыКоллекция"));
	
	Для Каждого ТекЭлемент Из Элементы Цикл
		
		ТипЭлемента = ТипЗнч(ТекЭлемент);
		
		Если СписокИсключенияТипов.НайтиПоЗначению(ТипЭлемента) = неопределено Тогда
			Если СписокИсключенияЭлементов.НайтиПоЗначению(ТекЭлемент) = Неопределено Тогда
				Попытка
					
					ТекЭлемент.ТолькоПросмотр = Не Доступность;
				Исключение
					ТекЭлемент.Доступность = Доступность;
				КонецПопытки;    
			КонецЕсли;    
		КонецЕсли;
		
	КонецЦикла;    

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРодителяВСписокРекурсивно(Элемент, Список)
	
	Если ТипЗнч(Элемент.Родитель) = Тип("ГруппаФормы") Тогда 
		Список.Добавить(Элемент.Родитель);
		ДобавитьРодителяВСписокРекурсивно(Элемент.Родитель, Список);
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ДобавитьПодчиненныеВСписокРекурсивно(Элемент, Список)
	
	Список.Добавить(Элемент);
	Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда 
		Для Каждого Подчиненный Из Элемент.ПодчиненныеЭлементы Цикл
			ДобавитьПодчиненныеВСписокРекурсивно(Подчиненный, Список);
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ОбработатьШтрихкоды(РезультатВыполнения.ТаблицаТоваров);
	Иначе
		МенеджерОборудованияУТКлиент.СообщитьОбОшибке(РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПересчитатьКоличествоЕдиниц");
	
	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

	СтруктураДействий.ИмяТЧ									 = "Материалы";
	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
//Рарус Владимир Подрезов 17.04.2017
	//СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСДобавленнымиСтроками;
//Рарус Владимир Подрезов Конец
	//СтруктураДействий.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий;
	СтруктураДействий.ТолькоТовары                           = Истина;
	СтруктураДействий.ШтрихкодыВТЧ                           = Ложь;
	СтруктураДействий.УчитыватьУпаковочныеЛисты              = Ложь;
	СтруктураДействий.ДействияСНеизвестнымиШтрихкодами       = "ЗарегистрироватьПеренестиВДокумент";
	//СтруктураДействий.СтруктураДействийСоСтрокамиИзУпаковочныхЛистов = СтруктураДействийСоСтрокамиИзУпаковочныхЛистов;
	СтруктураДействий.ОтработатьИзменениеУпаковочныхЛистов   = Ложь;
	//СтруктураДействий.ТекущийУпаковочныйЛист                 = УпаковочныйЛистРодитель;
	ЭтоВозвратНепринятых									 = Ложь;
	СтруктураДействий.ЗаполнятьНазначения                    = Ложь;
	
//Рарус Владимир Подрезов 17.04.2017
	ТекстСообщения = "";	
//Рарус Владимир Подрезов Конец
	ОбработатьШтрихкодыСервер(СтруктураДействий, КэшированныеЗначения, ТекстСообщения);
//Рарус Владимир Подрезов 17.04.2017
	Если НЕ ТекстСообщения = "" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
//Рарус Владимир Подрезов Конец
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		
		Элементы.Материалы.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураДействий, КэшированныеЗначения, ТекстСообщения = "")
	
//Рарус Владимир Подрезов 17.04.2017
	врМатериалы = Объект.Материалы.Выгрузить();
//Рарус Владимир Подрезов Конец

	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма,Объект,СтруктураДействий,КэшированныеЗначения);
	
//Рарус Владимир Подрезов 17.04.2017
	Для Каждого текСтрока Из Объект.Материалы Цикл
		НаденныеСтроки = врМатериалы.НайтиСтроки(Новый Структура("КодСтроки, Номенклатура", текСтрока.КодСтроки, текСтрока.Номенклатура));
		Если НаденныеСтроки.Количество() = 0 Тогда
			//Добавлена строка
			Продолжить;
		Иначе
			СтараяСтрока = НаденныеСтроки[0];
		КонецЕсли;
		
		Если ТекстСообщения = "" Тогда
			ТекстСообщения = "Внимание! Некоторые позиции уже присутсвовали в документе, их количество увеличено!";	
		КонецЕсли;
		
		УвеличеноНа = текСтрока.КоличествоУпаковок - СтараяСтрока.КоличествоУпаковок;
		
		ТекстСообщения	= ТекстСообщения + Символы.ПС;
		ТекстСообщения	= ТекстСообщения + "Строка №" + текСтрока.НомерСтроки + " " + текСтрока.Номенклатура + " добавл. кол-во " + Строка(УвеличеноНа);
		
	КонецЦикла;
//Рарус Владимир Подрезов Конец

	Для Каждого СтрМат Из Объект.Материалы Цикл
		Если Не ЗначениеЗаполнено(СтрМат.ВидРемонта) Тогда 
			СтрМат.ПлатныйРемонт = Объект.ПлатныйРемонт;
			СтрМат.ВидРемонта = Объект.ВидРемонта;
		КонецЕсли;
		
	//	СтрМат.Упаковка = ПолучитьЗначениеРеквизита(СтрМат.Номенклатура, "ЕдиницаИзмерения");
	//	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	//	
	//	СтруктураДействийСТекущейСтрокой = Новый Структура;
	//	//СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	//	//СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	//	//СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	//	СтруктураДействийСТекущейСтрокой.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	//	СтруктураДействийСТекущейСтрокой.Вставить("ЗаполнитьСтавкуНДС", 
	////++ Рарус Лимаренко 10.11.2017
	//	?(Объект.ПлатныйРемонт, ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС"),Объект.НалогообложениеНДС));  	
	//	//Объект.НалогообложениеНДС);
	////-- Рарус Лимаренко 10.11.2017	
	//	СтруктураДействийСТекущейСтрокой.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	//	СтруктураДействийСТекущейСтрокой.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	//	СтруктураДействийСТекущейСтрокой.Вставить("ПересчитатьСумму");
	//	СтруктураДействийСТекущейСтрокой.Вставить("ПересчитатьСуммуРучнойСкидки");
	//	СтруктураДействийСТекущейСтрокой.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	//	
	//	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрМат, СтруктураДействийСТекущейСтрокой, КэшированныеЗначения);

	//	
	КонецЦикла;	
	
//	СтруктураДействий.ТекущаяСтрока.Упаковка = ПолучитьЗначениеРеквизита(СтруктураДействий.ТекущаяСтрока.Номенклатура, "ЕдиницаИзмерения");
//	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
//	
//	СтруктураДействийСТекущейСтрокой = Новый Структура;
//	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
//	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
//	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
//	СтруктураДействийСТекущейСтрокой.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
//	СтруктураДействийСТекущейСтрокой.Вставить("ЗаполнитьСтавкуНДС", 
////++ Рарус Лимаренко 10.11.2017
//	?(Объект.ПлатныйРемонт, ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС"),Объект.НалогообложениеНДС));  	
//	Объект.НалогообложениеНДС);
////-- Рарус Лимаренко 10.11.2017	
//	СтруктураДействийСТекущейСтрокой.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
//	СтруктураДействийСТекущейСтрокой.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
//	СтруктураДействийСТекущейСтрокой.Вставить("ПересчитатьСумму");
//	СтруктураДействийСТекущейСтрокой.Вставить("ПересчитатьСуммуРучнойСкидки");
//	СтруктураДействийСТекущейСтрокой.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
//	
//	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтруктураДействий.ТекущаяСтрока, СтруктураДействийСТекущейСтрокой, КэшированныеЗначения);

	
	//СтруктураДействийСТекущейСтрокой.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	//СтруктураДействийСТекущейСтрокой.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	//СтруктураДействийСТекущейСтрокой.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины", Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
	//СтруктураДействийСТекущейСтрокой.Вставить("ЗаполнитьВесУпаковки",Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
	//СтруктураДействийСТекущейСтрокой.Вставить("ЗаполнитьОбъемУпаковки",Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
	//СтруктураДействийСТекущейСтрокой.Вставить("ЗаполнитьЕдиницуИзмеренияВеса",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияВеса"));
	//СтруктураДействийСТекущейСтрокой.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияОбъема"));
	//СтруктураДействийСТекущейСтрокой.Вставить("ПересчитатьВесОбъем");
	//ТекущаяСтрока = Объект.Материалы.НайтиПоИдентификатору(СтруктураДействий.ТекущаяСтрока);
	//ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействийСТекущейСтрокой, КэшированныеЗначения);
	
	//УдалитьДублиТоваровБезКоличества();
	//ПересчитатьКоличествоМест();
	//ДекорацияФильтрОбработкаНавигационнойСсылкиСервер("СнятьОтбор");
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьКоличествоМест()
	
	УпаковочныеЛистыСервер.ПересчитатьКоличествоМест(ЭтаФорма, Объект.Материалы)
	
КонецПроцедуры
#КонецОбласти

&НаКлиенте
Процедура ТехникаКлиентаПриИзменении(Элемент)
    	
	Объект.ЗаводскойНомерТехники = "";
	Если Объект.ТехникаКлиента Тогда 
		Объект.Техника = ПредопределенноеЗначение("Справочник.ОбъектыЭксплуатации.ПустаяСсылка");
		Объект.ПлатныйРемонт = Истина;
		УстановитьВидРемонтаДляТехникиКлиента();
	Иначе
		Объект.ПлатныйРемонт = Ложь;
    КонецЕсли;
    
    //+++rarus-spb_zlov 17.01.2017    
    Объект.СтатьяРасходов = ПолучитьСтатьюРасходов();  
    
    ТекСтрока = Элементы.Ремонты.ТекущиеДанные;
    
    Если ТекСтрока <> Неопределено Тогда
        ТекСтрока.СтатьяРасходов = Объект.СтатьяРасходов;
    КонецЕсли;    
    //---rarus-spb_zlov 17.01.2017 

	Элементы.Техника.Доступность = Не Объект.ТехникаКлиента;
	Элементы.ЗаводскойНомерТехники.Доступность = Объект.ТехникаКлиента;
	Элементы.ПлановыеРаботыЗаполнитьИзЗаданияНаРемонт.Доступность = НЕ Объект.ТехникаКлиента;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", 
    Новый Структура("НалогообложениеНДС, Дата", ?(Объект.ПлатныйРемонт, 
	ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС"),Объект.НалогообложениеНДС), Объект.Дата));

	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	
	Для Каждого СтрМат Из Объект.Материалы Цикл
		СтрМат.ПлатныйРемонт = Объект.ПлатныйРемонт;
		Если Объект.ПлатныйРемонт Тогда 
			СтрМат.ВидЦены = Объект.ВидЦен;
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрМат, СтруктураДействий, КэшированныеЗначения);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрРаб Из Объект.Работы Цикл
		СтрРаб.ПлатныйРемонт = Объект.ПлатныйРемонт;
		Если Объект.ПлатныйРемонт Тогда 
			СтрРаб.ВидЦены = Объект.ВидЦен;
			//Рарус Владимир Подрезов 27.12.2016
			СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоРеализация");
			//Рарус Владимир Подрезов Конец
			ИмяКоличества="КоличествоРеализация";
			СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки", ИмяКоличества);
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать,ИмяКоличества", Ложь, ИмяКоличества));
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрРаб, СтруктураДействий, КэшированныеЗначения);
		КонецЕсли;	
	КонецЦикла;
	УстановитьВидимостьКолонокПлатныхРемонтов();
	Если Объект.МестоРемонта = ПредопределенноеЗначение("Перечисление.пкМестоРемонта.НаБазе") Тогда 
		Объект.Клиент = Неопределено;
		Объект.ОбъектСтроительства = Неопределено;
	КонецЕсли;	
	УстановитьВидимостьКлиент();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидРемонтаДляТехникиКлиента()
	
	ЗапросВидаРемонта = Новый Запрос("ВЫБРАТЬ
	|	ВидыРемонтов.Ссылка КАК ВидРемонта,
	|	ВЫБОР
	|		КОГДА ВидыРемонтов.ОбщийВидРемонта.ЗаданаСтатьяРасходов
	|			ТОГДА ВидыРемонтов.ОбщийВидРемонта.СтатьяРасходов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтатьяРасходов
	|ИЗ
	|	Справочник.ВидыРемонтов КАК ВидыРемонтов
	|ГДЕ
	|	ВидыРемонтов.ОбщийВидРемонта.пкТипРемонта = ЗНАЧЕНИЕ(Перечисление.пкТипыРемонтов.Обычный)");
	ВыборкаВидРемонта = ЗапросВидаРемонта.Выполнить().Выбрать();
	Если ВыборкаВидРемонта.Следующий() Тогда 
		Объект.ВидРемонта = ВыборкаВидРемонта.ВидРемонта;
		Объект.СтатьяРасходов = ВыборкаВидРемонта.СтатьяРасходов;
	КонецЕсли;
	Для Каждого СтрМат Из Объект.Материалы Цикл
		СтрМат.ВидРемонта = Объект.ВидРемонта;
		СтрМат.ПлатныйРемонт = Объект.ПлатныйРемонт;
	КонецЦикла;
	Для Каждого СтрРаб Из Объект.Работы Цикл
		СтрРаб.ВидРемонта = Объект.ВидРемонта;
		СтрРаб.ПлатныйРемонт = Объект.ПлатныйРемонт;
	КонецЦикла;
		
КонецПроцедуры			

&НаСервере
Процедура ОбновитьСерийныйНомер()
	
//Рарус Владимир Подрезов 24.05.2017
//!Вызывается при создании формы на сервере и полюбому меняет данные еще до открытия даже формы!!!
//!Было
	//Если ЗначениеЗаполнено(Объект.Техника) Тогда 
	//	Объект.СерийныйНомерТехники = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Техника,"СерийныйНомер");
	//	Объект.ЗаводскойНомерТехники = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Техника,"ЗаводскойНомер");
	//Иначе
	//	Объект.СерийныйНомерТехники = "";
	//	Объект.ЗаводскойНомерТехники = "";
	//КонецЕсли;
//СТАЛО
	Если ЗначениеЗаполнено(Объект.Техника) Тогда
		
		тСерийныйНомерТехники = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Техника, "СерийныйНомер");
		Если Объект.СерийныйНомерТехники <> тСерийныйНомерТехники Тогда
			Объект.СерийныйНомерТехники = тСерийныйНомерТехники;
		КонецЕсли;
		
		тЗаводскойНомерТехники = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Техника, "ЗаводскойНомер");
		Если Объект.ЗаводскойНомерТехники <> тЗаводскойНомерТехники Тогда
			Объект.ЗаводскойНомерТехники = тЗаводскойНомерТехники;
		КонецЕсли;
		
	КонецЕсли;
//Рарус Владимир Подрезов Конец
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыДатаНачалаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекСтрока = Элементы.Работы.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекСтрока.ДатаОкончания) И ВыбранноеЗначение > ТекСтрока.ДатаОкончания Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя выбрать дату начала позже даты окончания!");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыДатаНачалаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекСтрока = Элементы.Работы.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекСтрока.ДатаОкончания) И Дата(Текст) > ТекСтрока.ДатаОкончания Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя выбрать дату начала позже даты окончания!");
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ТекСтрока.ДатаНачала);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыДатаОкончанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	//ТекСтрока = Элементы.Работы.ТекущиеДанные;
	//Если ЗначениеЗаполнено(ТекСтрока.ДатаНачала) И ВыбранноеЗначение < ТекСтрока.ДатаНачала Тогда 
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя выбрать дату окончания раньше даты начала!");
	//	СтандартнаяОбработка = Ложь;
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыДатаОкончанияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	//ТекСтрока = Элементы.Работы.ТекущиеДанные;
	//Если ЗначениеЗаполнено(ТекСтрока.ДатаНачала) И Дата(Текст) < ТекСтрока.ДатаНачала Тогда 
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя выбрать дату окончания раньше даты начала!");
	//	ДанныеВыбора = Новый СписокЗначений;
	//	ДанныеВыбора.Добавить(ТекСтрока.ДатаОкончания);
	//	СтандартнаяОбработка = Ложь;
	//КонецЕсли;
	
КонецПроцедуры

//rarus+ saveld 26.10.2016
&НаКлиенте
Процедура АктТехническогоОбслуживанияТипОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	НомерТекСтроки = Элементы.АктТехническогоОбслуживания.ТекущиеДанные.НомерСтроки;
	Если Не НомераСовпадают(НомерТекСтроки, ВыбранноеЗначение) Тогда
		ВыбранноеЗначение = ПредопределенноеЗначение("Справочник.пкТипыОграничителейУказателей.ПустаяСсылка");
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Выбранное Вами значение не соответствует номеру строки!";
		Сообщение.Сообщить();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура АктТехническогоОбслуживанияТипНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомерТекСтроки = Элементы.АктТехническогоОбслуживания.ТекущиеДанные.НомерСтроки;
	
    ПараметрыФормы = Новый Структура;
    ФН = Новый НастройкиКомпоновкиДанных;
    Эл = ФН.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    Эл.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НомерПункта");
    Эл.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
    Эл.ПравоеЗначение = НомерТекСтроки;
    Эл.Использование = Истина;
    Эл.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
    ПараметрыФормы.Вставить("ФиксированныеНастройки", ФН);
    ОткрытьФорму("Справочник.пкТипыОграничителейУказателей.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаСервере
Функция НомераСовпадают(НомерТекСтроки, ВыбранноеЗначение)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.пкТипыОграничителейУказателей") И ВыбранноеЗначение.НомерПункта = НомерТекСтроки Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции//rarus- saveld 26.10.2016

&НаСервере
Процедура ПрочееОприходованиеДляНеисправныхДеталейНаСервере(ОбъектФормы)
	Документы.пкЗаказНаряд.ПрочееОприходованиеДляНеисправныхДеталейНаСервере(ОбъектФормы, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПрочееОприходованиеДляНеисправныхДеталей(Команда)
	Если ЭтаФорма.Модифицированность Тогда
		Сообщить("Сначала сохраните документ!");
		Возврат;	
	КонецЕсли; 
	Форма = ПолучитьФорму("Документ.ПрочееОприходованиеТоваров.ФормаОбъекта");
	ОбъектФормы = Форма.Объект;
	ПрочееОприходованиеДляНеисправныхДеталейНаСервере(ОбъектФормы);
	КопироватьДанныеФормы(ОбъектФормы, Форма.Объект);
	Форма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ТипЗнч(ВладелецФормы) = Тип("УправляемаяФорма") И ВладелецФормы.ИмяФормы = "Обработка.пкУправлениеРемонтами.Форма.Форма" Тогда
		Оповестить("ОбновитьДерево");
	КонецЕсли;
	
КонецПроцедуры

//+++rarus-spb_zlov 17.01.2017

&НаСервере
Функция ПолучитьСтатьюРасходов()
    
    Если Объект.ПлатныйРемонт И НЕ Объект.ТехникаКлиента Тогда
        Возврат Константы.пкСтатьяРасходовСервисПлатныеРемонты.Получить();
    ИначеЕсли НЕ Объект.ПлатныйРемонт И НЕ Объект.ТехникаКлиента Тогда
        Возврат Константы.пкСтатьяРасходовСервисРемонтыЗаСвойСчет.Получить();
    Иначе
        Возврат ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка();
    КонецЕсли;    
    
КонецФункции

//---rarus-spb_zlov 17.01.2017 

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Моточасы = ПроверяемыеРеквизиты.Найти("Моточасы");
	Если Не ЗначениеЗаполнено(Моточасы) И Объект.Моточасы = 0 Тогда
	    Сообщение = Новый СообщениеПользователю();
	    Сообщение.Текст = "Не указано количество моточасов!";
	    Сообщение.Поле = "Моточасы";
	    Сообщение.УстановитьДанные(ЭтотОбъект);
	    Сообщение.Сообщить();
	        
	    Отказ = Истина;	        
	КонецЕсли;
	
	СписокСтатусовВРаботе = Новый Массив;
	СписокСтатусовВРаботе.Добавить(Перечисления.пкСтатусыЗаказНарядов.ВРаботе);
	СписокСтатусовВРаботе.Добавить(Перечисления.пкСтатусыЗаказНарядов.Выполнен);
	СписокСтатусовВРаботе.Добавить(Перечисления.пкСтатусыЗаказНарядов.Закрыт);
	Если Не ЗначениеЗаполнено(Объект.ДатаНачалаФакт) И СписокСтатусовВРаботе.Найти(Объект.Статус)<>Неопределено Тогда
	    Сообщение = Новый СообщениеПользователю();
	    Сообщение.Текст = "Не указана фактическая дата начала!";
	    Сообщение.Поле = "ДатаНачалаФакт";
	    Сообщение.УстановитьДанные(ЭтотОбъект);
	    Сообщение.Сообщить();
	        
	    Отказ = Истина;
	КонецЕсли;
	
	СписокСтатусовВыполнен = Новый Массив;
	СписокСтатусовВыполнен.Добавить(Перечисления.пкСтатусыЗаказНарядов.Выполнен);
	СписокСтатусовВыполнен.Добавить(Перечисления.пкСтатусыЗаказНарядов.Закрыт);
	Если Не ЗначениеЗаполнено(Объект.ДатаОкончанияФакт) И СписокСтатусовВыполнен.Найти(Объект.Статус)<>Неопределено Тогда
	    Сообщение = Новый СообщениеПользователю();
	    Сообщение.Текст = "Не указана фактическая дата окончания!";
	    Сообщение.Поле = "ДатаОкончанияФакт";
	    Сообщение.УстановитьДанные(ЭтотОбъект);
	    Сообщение.Сообщить();
	        
	    Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаФактОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.ДатаОкончанияФакт) И ВыбранноеЗначение >= Объект.ДатаОкончанияФакт Тогда 
		СтандартнаяОбработка = Ложь;
		Сообщение = Новый СообщениеПользователю();
	    Сообщение.Текст = "Дата начала не может быть равной или позже даты окончания!";
	    Сообщение.Поле = "ДатаНачалаФакт";
	    Сообщение.УстановитьДанные(ЭтотОбъект);
	        
	    Сообщение.Сообщить();
	КонецЕсли;		
		
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаФактОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ВВеденнаяДата = Неопределено;
	Попытка
		ВВеденнаяДата = Дата(Текст);
	Исключение
	КонецПопытки;	
	Если ВВеденнаяДата<>Неопределено И ЗначениеЗаполнено(Объект.ДатаОкончанияФакт) И ВВеденнаяДата >= Объект.ДатаОкончанияФакт Тогда 
		СтандартнаяОбработка = Ложь;
		Сообщение = Новый СообщениеПользователю();
	    Сообщение.Текст = "Дата начала не может быть равной или позже даты окончания!";
	    Сообщение.Поле = "ДатаНачалаФакт";
	    Сообщение.УстановитьДанные(ЭтотОбъект);
	    Сообщение.Сообщить();
		//ПараметрыПолученияДанных.СтрокаПоиска = Строка(Объект.ДатаНачалаФакт);
		//Текст = Строка(Объект.ДатаНачалаФакт);
		Список = Новый СписокЗначений;
		Список.Добавить(Объект.ДатаНачалаФакт);
		ДанныеВыбора = Список;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияФактОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) И ВыбранноеЗначение <= Объект.ДатаНачалаФакт Тогда 
		СтандартнаяОбработка = Ложь;
		Сообщение = Новый СообщениеПользователю();
	    Сообщение.Текст = "Дата окончания не может быть равной или ранее даты начала!";
	    Сообщение.Поле = "ДатаОкончанияФакт";
	    Сообщение.УстановитьДанные(ЭтотОбъект);
	        
	    Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияФактОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ВВеденнаяДата = Неопределено;
	Попытка
		ВВеденнаяДата = Дата(Текст);
	Исключение
	КонецПопытки;	
	Если ВВеденнаяДата<>Неопределено И ВВеденнаяДата <= Объект.ДатаНачалаФакт Тогда 
		СтандартнаяОбработка = Ложь;
		Сообщение = Новый СообщениеПользователю();
	    Сообщение.Текст = "Дата окончания не может быть равной или ранее даты начала!";
	    Сообщение.Поле = "ДатаОкончанияФакт";
	    Сообщение.УстановитьДанные(ЭтотОбъект);
	    Сообщение.Сообщить();
		//ПараметрыПолученияДанных.СтрокаПоиска = Строка(Объект.ДатаНачалаФакт);
		//Текст = Строка(Объект.ДатаНачалаФакт);
		Список = Новый СписокЗначений;
		Список.Добавить(Объект.ДатаОкончанияФакт);
		ДанныеВыбора = Список;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядыПоТехнике(Команда)
//Рарус Владимир Подрезов 27.02.2017
//Закомментировано
	////++IA не работает без добавления своей настройки в ВариантыОтчетов
	////ДополнительныеПараметры=Новый Структура;
	////ДополнительныеПараметры.Вставить("ИмяКоманды","ДанныеПоТехнике");
	////
	////ПараметрыФормы=Новый Структура;
	////ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов",Ложь);
	////ПараметрыФормы.Вставить("КлючВарианта","Основной");
	////ПараметрыФормы.Вставить("КлючНазначенияИспользования","Основной");
	////ПараметрыФормы.Вставить("СформироватьПриОткрытии",Истина);
	////
	////СтруктураПараметров = Новый Структура;
	////СтруктураПараметров.Вставить("ПараметрКоманды", Объект.Техника);
	////СтруктураПараметров.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	////СтруктураПараметров.Вставить("ПараметрыФормы", ПараметрыФормы);
	////
	////МенюОтчетыКлиент.ВыполнитьКомандуОтчет("Отчет.пкАрендаТехники.ФормаОбъекта",
	////		Объект.Техника, ЭтаФорма, СтруктураПараметров);
	//
	//ФормаОтчета = ПолучитьФорму("Отчет.пкЗаказНаряды.ФормаОбъекта",Новый Структура("СформироватьПриОткрытии",Истина),ЭтаФорма);
	//КомпоновщикНастроек = ФормаОтчета.Отчет.КомпоновщикНастроек;
	////СхемаКомпоновкиДанных=Неопределено;
	////ЗаказНарядыПоТехникеНаСервере(СхемаКомпоновкиДанных);
	////КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.ВариантыНастроек.Найти("ЗаказНаряды").Настройки);
	//Настройки = КомпоновщикНастроек.Настройки.Отбор;
	//
	//Поиск=Ложь;
	//Для каждого ТекОтбор Из Настройки.Элементы Цикл
	//    
	//    Если Строка(ТекОтбор.ЛевоеЗначение) = "Техника" Тогда
	//		Элемент = ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ТекОтбор.ИдентификаторПользовательскойНастройки);
	//		Если Элемент <> Неопределено Тогда
	//		    Элемент.Использование = ЗначениеЗаполнено(Объект.Техника);
	//		    Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//		    Элемент.ПравоеЗначение = Объект.Техника;
	//		КонецЕсли;
	//		//ТекОтбор.Использование = ЗначениеЗаполнено(Объект.Техника);
	//		//ТекОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//		//ТекОтбор.ПравоеЗначение = Объект.Техника;
	//		Поиск=Истина;
	//    КонецЕсли;
	//	
	//КонецЦикла;
	//Если не Поиск тогда
	//    ЭлОтбора = ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//    ЭлОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//    ЭлОтбора.Использование = ЗначениеЗаполнено(Объект.Техника);
	//    ЭлОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Техника");
	//    ЭлОтбора.ПравоеЗначение = Объект.Техника;
	//КОнецЕсли;	
	//ФормаОтчета.Открыть();
	//
	ОткрытьФорму("Отчет.пкЗаказНаряды.ФормаОбъекта",
		Новый Структура("КлючВарианта, КлючНазначенияИспользования, Отбор, СформироватьПриОткрытии, ВидимостьКомандВариантовОтчетов", 
			"ЗаказНаряды",
			, 
			Новый Структура("Техника", Объект.Техника), 
			Истина,
			Ложь));
//Рарус Владимир Подрезов Конец
КонецПроцедуры

&НаСервере
Процедура ЗаказНарядыПоТехникеНаСервере(СхемаКомпоновкиДанных)
	СхемаКомпоновкиДанных=Отчеты.пкЗаказНаряды.Создать().СхемаКомпоновкиДанных;
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;	
	
	ФормаВыбора=ПолучитьФорму("Справочник.ВидыЦен.Форма.ФормаВыбора", , Элемент, ЭтаФорма);
    ФормаВыбора.Открыть();
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ФормаВыбора.Список, "пкРемонт", Истина, ВидСравненияКомпоновкиДанных.Равно,, Истина);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПроцентРучнойСкидкиПриИзменении(Элемент)
	ПриИзмененииЦены("Материалы");
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСуммаРучнойСкидкиПриИзменении(Элемент)
	ПриИзмененииЦены("Материалы",,Ложь);
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидку(Команда)
	
	//Если Не СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Материалы", НСтр("ru='Материалы'")) Тогда
	//	Возврат;
	//КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Ложь,ПолучитьИмяАктивнойТЧДляСкидок());
	
	Оповещение = Новый ОписаниеОповещения(
		"НазначитьРучнуюСкидкуЗавершение", 
		ЭтотОбъект, 
		Новый Структура("АдресВоВременномХранилище", АдресВоВременномХранилище));
	
	СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(
		АдресВоВременномХранилище,
		Объект.Валюта,
		Оповещение);
		
	РассчитатьНадписиИтоговые(ЭтаФорма);	
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуЗавершение(СуммаРучнойСкидкиНаценки, ДополнительныеПараметры) Экспорт 
	
	АдресВоВременномХранилище = ДополнительныеПараметры.АдресВоВременномХранилище;
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки,, АдресВоВременномХранилище,ПолучитьИмяАктивнойТЧДляСкидок());
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
		
		РассчитатьНадписиИтоговые(ЭтаФорма);	
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуДляВыделенныхСтрок(Команда)
	
	//Если Не СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Материалы", НСтр("ru='Материалы'")) Тогда
	//	Возврат;
	//КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Истина,ПолучитьИмяАктивнойТЧДляСкидок());
	
	Оповещение = Новый ОписаниеОповещения(
		"НазначитьРучнуюСкидкуДляВыделенныхСтрокЗавершение", 
		ЭтотОбъект, 
		Новый Структура("АдресВоВременномХранилище", АдресВоВременномХранилище));
	
	СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(
		АдресВоВременномХранилище,
		Объект.Валюта,
		Оповещение);
		
	РассчитатьНадписиИтоговые(ЭтаФорма);	
		
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуДляВыделенныхСтрокЗавершение(СуммаРучнойСкидкиНаценки, ДополнительныеПараметры) Экспорт 
	
	АдресВоВременномХранилище = ДополнительныеПараметры.АдресВоВременномХранилище;
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, Элементы[ПолучитьИмяАктивнойТЧДляСкидок()].ВыделенныеСтроки, АдресВоВременномХранилище,ПолучитьИмяАктивнойТЧДляСкидок());
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
		
		РассчитатьНадписиИтоговые(ЭтаФорма);	
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРучныеСкидки(Команда)
	
	//Если Не СкидкиНаценкиКлиент.ВозможнаОтменаРучныхСкидокНаценок(Объект, "Материалы", НСтр("ru='Товары'")) Тогда
	//	Возврат;
	//КонецЕсли;
	
	ОтменитьРучныеСкидкиНаСервере(ПолучитьИмяАктивнойТЧДляСкидок());
	СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок();
	
	РассчитатьНадписиИтоговые(ЭтаФорма);	
	
КонецПроцедуры

&НаСервере
Функция АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ТолькоВыделенныеСтроки,ИмяТабличнойЧасти="Материалы")
	
	Возврат СкидкиНаценкиСервер.АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ЭтаФорма, ИмяТабличнойЧасти, УникальныйИдентификатор, ТолькоВыделенныеСтроки);
	
КонецФункции

&НаСервере
Процедура ОтменитьРучныеСкидкиНаСервере(ИмяТабличнойЧасти="Материалы")
	
	СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, ИмяТабличнойЧасти, Ложь, Истина);
	//ОбновитьДубликатыЗависимыхРеквизитов();
	
КонецПроцедуры

&НаСервере
Процедура НазначитьРучнуюСкидкуНаСервере(СуммаСкидкиНаценки, Знач ВыделенныеСтроки = Неопределено, АдресВоВременномХранилище,ИмяТабличнойЧасти="Материалы")
	
	ПараметрыСкидки = Новый Структура();
	ПараметрыСкидки.Вставить("ИспользуютсяАвтоматическиеСкидки", Ложь);
	ПараметрыСкидки.Вставить("ТолькоДляАктивныхСтрок", Ложь);
	ПараметрыСкидки.Вставить("РассчитыватьСуммуСНДС", Истина);
	ПараметрыСкидки.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);
	ПараметрыСкидки.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	
	СкидкиНаценкиСервер.НазначитьРучнуюСкидку(Объект, ИмяТабличнойЧасти, СуммаСкидкиНаценки, ПараметрыСкидки);
	//ОбновитьДубликатыЗависимыхРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяАктивнойТЧДляСкидок()

	ИмяТабличнойЧасти="Материалы";
	Если Элементы.Страницы.ТекущаяСтраница.Имя="ГруппаРаботы" Тогда
		ИмяТабличнойЧасти="Работы";
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница.Имя="ГруппаПлановыеРаботы" Тогда	
		ИмяТабличнойЧасти="ПлановыеРаботы";
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница.Имя="ГруппаПлановыеМатериалы" Тогда	
		ИмяТабличнойЧасти="ПлановыеМатериалы";
	КонецЕсли; 
	
	Возврат ИмяТабличнойЧасти;
	
КонецФункции // ПолучитьИмяАктивнойТЧДляСкидок()

&НаКлиенте
Процедура МатериалыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	СтрокаМат = Элементы.Материалы.ТекущиеДанные;
	
	СтрокиПоиска=Объект.Материалы.НайтиСтроки(Новый Структура("Номенклатура", СтрокаМат.Номенклатура));	
	Если СтрокиПоиска.Количество()>1 Тогда
		КоличествоПовторов = 0;
		ТекстСтроки = "";
		Для каждого СтрокаПоиска Из СтрокиПоиска Цикл
			Если СтрокаПоиска.Характеристика=СтрокаМат.Характеристика Тогда
				ТекстСтроки = ТекстСтроки + СтрокаПоиска.НомерСтроки+"; ";
				КоличествоПовторов=КоличествоПовторов+1;
			КонецЕсли;	
		КонецЦикла; 
		Если КоличествоПовторов>1 Тогда
			ТекстСтроки=Лев(ТекстСтроки,СтрДлина(ТекстСтроки)-2);	
			ТекстСообщения = НСтр("ru = 'Повтор номенклатуры %НаименованиеНомеклатуры% %НаименованиеХарактеристика% в строках %ТекстСтроки%.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеНомеклатуры%", Строка(СтрокаМат.Номенклатура));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекстСтроки%", ТекстСтроки);
			Если ЗначениеЗаполнено(СтрокаМат.Характеристика) Тогда
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеНомеклатуры%", Строка(СтрокаМат.Характеристика));
			Иначе
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеНомеклатуры%", "");
			КонецЕсли;	
			//ПоказатьОповещениеПользователя(
			//	НСтр("ru = 'Повтор номенклатуры!'"),
			//	,
			//	ТекстСообщения,
			//	БиблиотекаКартинок.Информация32);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Если ЗначениеЗаполнено(СтрокаМат.Характеристика) Тогда
				СтрокаМат.Характеристика=Неопределено;
			Иначе
				СтрокаМат.Номенклатура=Неопределено;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	РассчитатьНадписиИтоговые(ЭтаФорма);	
КонецПроцедуры

&НаКлиенте
Процедура РаботыСуммаРучнойСкидкиПриИзменении(Элемент)
	ПриИзмененииЦены("Работы","КоличествоРеализация",Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПлановыеМатериалыСуммаРучнойСкидкиПриИзменении(Элемент)
	ПриИзмененииЦены("ПлановыеМатериалы",,Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПлановыеРаботыСуммаРучнойСкидкиПриИзменении(Элемент)
	ПриИзмененииЦены("ПлановыеРаботы","Количество",Ложь);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьНадписиИтоговые(Форма)
	
	ТЧ_Материалы = Форма.Объект.Материалы;
 	ТЧ_Работы = Форма.Объект.Работы;
	ТЧ_МатериалыП = Форма.Объект.ПлановыеМатериалы;
 	ТЧ_РаботыП = Форма.Объект.ПлановыеРаботы;
     
    ИтогоСуммаРучнойСкидки = ТЧ_Материалы.Итог("СуммаРучнойСкидки")+ТЧ_Работы.Итог("СуммаРучнойСкидки");
    ИтогоСумма = ТЧ_Материалы.Итог("Сумма")+ТЧ_Работы.Итог("Сумма");
  	ИтогоСуммаСНДС = ТЧ_Материалы.Итог("СуммаСНДС")+ТЧ_Работы.Итог("СуммаСНДС");
    
    ИтогоСуммаРучнойСкидки_П = ТЧ_МатериалыП.Итог("СуммаРучнойСкидки")+ТЧ_РаботыП.Итог("СуммаРучнойСкидки");
    ИтогоСумма_П = ТЧ_МатериалыП.Итог("Сумма")+ТЧ_РаботыП.Итог("Сумма");
  	ИтогоСуммаСНДС_П = ТЧ_МатериалыП.Итог("СуммаСНДС")+ТЧ_РаботыП.Итог("СуммаСНДС");
	
	Форма.Элементы.НадписьИтогоФакт.Заголовок = "Итого, факт:"+" скидка - "+ИтогоСуммаРучнойСкидки+", сумма - "+ИтогоСумма+", сумма с НДС - "+ИтогоСуммаСНДС;
	Форма.Элементы.НадписьИтогоПлан.Заголовок =  "Итого, план:"+" скидка - "+ИтогоСуммаРучнойСкидки_П+", сумма - "+ИтогоСумма_П+", сумма с НДС - "+ИтогоСуммаСНДС_П;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	РассчитатьНадписиИтоговые(ЭтаФорма);	
КонецПроцедуры

&НаКлиенте
Процедура ПлановыеМатериалыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	РассчитатьНадписиИтоговые(ЭтаФорма);	
КонецПроцедуры

&НаКлиенте
Процедура ПлановыеРаботыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	РассчитатьНадписиИтоговые(ЭтаФорма);	
КонецПроцедуры

//Рарус Владимир Подрезов 20.03.2017
&НаКлиенте
Процедура РаботыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Элементы.Работы.ТолькоПросмотр 
		И Поле.Имя = "РаботыЗаданиеНаРемонт"
	Тогда
		ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			текИмяФормы = "Документ.пкЗаданиеНаРемонт.Форма.ФормаДокумента";
			текОбъект	= ТекущиеДанные.ЗаданиеНаРемонт;
			
			Если ЗначениеЗаполнено(текОбъект) Тогда
				ОткрытьФорму(текИмяФормы, Новый Структура("Ключ", текОбъект));
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 09.06.2017
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если Объект.Статус = Перечисления.пкСтатусыЗаказНарядов.Закрыт Тогда
		// Обработчик механизма "ДатыЗапретаИзменения"
		ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	КонецЕсли;
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);

КонецПроцедуры
//Рарус Владимир Подреов Конец

//Рарус Владимир Подреов 16.10.2017
&НаКлиенте
Процедура ТехникаОчистка(Элемент, СтандартнаяОбработка)
	ОпределитьЕстьНеЗакрытыеЗадания();
КонецПроцедуры

&НаКлиенте
Процедура РаботыПриИзменении(Элемент)
	ОпределитьЕстьНеЗакрытыеЗадания();
КонецПроцедуры

&НаСервере
Процедура ОпределитьЕстьНеЗакрытыеЗадания()
	
	ЕстьНеВыполненныеЗадания = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Объект.Техника) Тогда
		
		ЗапросЗадания = Новый Запрос;
		ЗапросЗадания.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаРабот.Номенклатура КАК Работа,
		|	ТаблицаРабот.ЗаданиеНаРемонт
		|ПОМЕСТИТЬ втТаблицаРабот
		|ИЗ
		|	&ТаблицаРабот КАК ТаблицаРабот
		|ГДЕ
		|	ТаблицаРабот.ЗаданиеНаРемонт <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаРемонт.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОстатокРабот.Работа,
		|	ОстатокРабот.ЗаданиеНаРемонт,
		|	СУММА(ОстатокРабот.Количество) КАК Количество
		|ИЗ
		|	(ВЫБРАТЬ
		|		пкЗаданияНаРемонтОстатки.Работа КАК Работа,
		|		пкЗаданияНаРемонтОстатки.ЗаданиеНаРемонт КАК ЗаданиеНаРемонт,
		|		пкЗаданияНаРемонтОстатки.КоличествоОстаток КАК Количество
		|	ИЗ
		|		РегистрНакопления.пкЗаданияНаРемонт.Остатки(, ЗаданиеНаРемонт.ОбъектЭксплуатации = &Техника) КАК пкЗаданияНаРемонтОстатки
		|	ГДЕ
		|		пкЗаданияНаРемонтОстатки.КоличествоОстаток > 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		втТаблицаРабот.Работа,
		|		втТаблицаРабот.ЗаданиеНаРемонт,
		|		-1
		|	ИЗ
		|		втТаблицаРабот КАК втТаблицаРабот) КАК ОстатокРабот
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстатокРабот.ЗаданиеНаРемонт,
		|	ОстатокРабот.Работа
		|
		|ИМЕЮЩИЕ
		|	СУММА(ОстатокРабот.Количество) > 0";
		ЗапросЗадания.УстановитьПараметр("Техника", Объект.Техника);
		ЗапросЗадания.УстановитьПараметр("ТаблицаРабот", Объект.Работы.Выгрузить(, "Номенклатура, ЗаданиеНаРемонт"));
		РезЗапроса = ЗапросЗадания.Выполнить().Выбрать();
		
		ЕстьНеВыполненныеЗадания = РезЗапроса.Следующий();
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Элементы.ПлановыеРаботыЗаполнитьИзЗаданияНаРемонт.Видимость			= НЕ ЕстьНеВыполненныеЗадания;
	Элементы.ПлановыеРаботыЗаполнитьИзЗаданияНаРемонтВажно.Видимость	= ЕстьНеВыполненныеЗадания;
	
КонецПроцедуры
//Рарус Владимир Подрезов Конец

//++ Рарус Лимаренко 22.11.2017
&НаСервереБезКонтекста
Функция ОпределитьКоличествоМоточасов(Техника,Дата)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	пкПроведениеРемонтовСрезПоследних.Моточасы
	|ИЗ
	|	РегистрСведений.пкПроведениеРемонтов.СрезПоследних(&ДатаТехники, Техника = &Техника) КАК пкПроведениеРемонтовСрезПоследних";
	
	Запрос.УстановитьПараметр("Техника",Техника);
	Запрос.УстановитьПараметр("ДатаТехники",Дата);
	
	
	Рез = Запрос.Выполнить();
	Если рез.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка = Рез.Выбрать();
		Выборка.Следующий();
		 Возврат Выборка.Моточасы;
	КонецЕсли;

КонецФункции

//-- Рарус Лимаренко 22.11.2017

ДокументЗакрыт = Объект.Статус = ПредопределенноеЗначение("Перечисление.пкСтатусыЗаказНарядов.Закрыт");		
