
&НаКлиенте
Процедура ВыделитьВсеВыполнить()
	
	Для Каждого СтрокаТЧ Из СписокМатериалы Цикл
		СтрокаТЧ.Пометка = Истина;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыделитьВсеВыполнить()
	
	Для Каждого СтрокаТЧ Из СписокМатериалы Цикл
		СтрокаТЧ.Пометка = Ложь;
	КонецЦикла;	
	
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьСписокМатериалов();
	//СписокМатериалы.Параметры.УстановитьЗначениеПараметра("ДокументОтгрузки", Параметры.ЗаказНаряд);
	//СписокМатериалы.Параметры.УстановитьЗначениеПараметра("Период", Параметры.Период);
	Склад = Параметры.Склад;
	ЗаказНаряд = Параметры.ЗаказНаряд;
	ЗаказКлиента = Параметры.ЗаказКлиента;
	ЗаказНаРемонт = Параметры.ЗаказНаРемонт;
	ЗонаОтгрузки = Параметры.ЗонаОтгрузки;
	//+++DubI Рарус-СПб 17.01.2017
	СкладскаяЯчейкаПользователя = Параметры.СкладскаяЯчейкаПользователя;
	Если ЗначениеЗаполнено(СкладскаяЯчейкаПользователя) Тогда
		МассивПараметровНовый = Новый Массив;
		Для каждого СвязьПараметра Из Элементы.СписокМатериалыЯчейка.СвязиПараметровВыбора Цикл
			МассивПараметровНовый.Добавить(СвязьПараметра);
		КонецЦикла;
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Ссылка", "СкладскаяЯчейкаПользователя");
		МассивПараметровНовый.Добавить(НоваяСвязь);
		
		Элементы.СписокМатериалыЯчейка.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметровНовый);
	КонецЕсли;
	//---DubI Рарус-СПб
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокМатериалов()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ИСТИНА КАК Пометка,
	|	ТоварыКОтгрузкеОбороты.Регистратор КАК РасходныйОрдер,
	|	ТоварыКОтгрузкеОбороты.ДокументОтгрузки КАК Заказ,
	|	ТоварыКОтгрузкеОбороты.Номенклатура,
	|	ТоварыКОтгрузкеОбороты.Характеристика,
	|	ТоварыКОтгрузкеОбороты.Серия,
	|	ВЫБОР
	|		КОГДА ТоварыКОтгрузкеОбороты.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПлатныйРемонт,
	|	ТоварыКОтгрузкеОбороты.СобираетсяПриход КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.Обороты(, , Регистратор, ДокументОтгрузки В (&ЗаказКлиента, &ЗаказНаРемонт)) КАК ТоварыКОтгрузкеОбороты
	|ГДЕ
	|	ТоварыКОтгрузкеОбороты.Регистратор ССЫЛКА Документ.РасходныйОрдерНаТовары");
	Запрос.УстановитьПараметр("ЗаказКлиента", Параметры.ЗаказКлиента);
	Запрос.УстановитьПараметр("ЗаказНаРемонт", Параметры.ЗаказНаРемонт);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		ТаблицаОтгруженныхМатериалов = Результат.Выгрузить();
		ТаблицаМатериаловКВозврату.Загрузить(ТаблицаОтгруженныхМатериалов);
		ТаблицаМатериаловКВозврату.Сортировать("РасходныйОрдер");
		ТаблицаОтгруженныхМатериалов.Свернуть("Заказ,Номенклатура,Характеристика,Серия,ПлатныйРемонт","Количество");
		СписокМатериалы.Загрузить(ТаблицаОтгруженныхМатериалов);
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ВернутьНаСервере()
	
	//отменим строки из расходнх ордеров
	//ТаблицаСтрок = СписокМатериалы.Выгрузить(Новый Структура("Пометка",Истина));
	////ТаблицаСтрок.Сортировать("РасходныйОрдер");
	//СтруктураПоиска = Новый Структура("Заказ,Номенклатура,Характеристика,Серия,ПлатныйРемонт");
	Отказ = Ложь;
	ТаблицаДоступныхКВозврату = ТаблицаМатериаловКВозврату.Выгрузить();
	ТаблицаСтрок = ТаблицаДоступныхКВозврату.СкопироватьКолонки();
	ТаблицаПомеченныхКВозврату = СписокМатериалы.Выгрузить(Новый Структура("Пометка",Истина));
	//проверим заполнение ячеек
	Если ТаблицаПомеченныхКВозврату.Найти(Справочники.СкладскиеЯчейки.ПустаяСсылка(),"Ячейка") <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не запонена складская ячейка для возврата!");
		Отказ = Истина;
	КонецЕсли;
	Если ТаблицаПомеченныхКВозврату.Итог("Количество") <= 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не запонено количество!");
		Отказ = Истина;
	КонецЕсли;
	
	Для Каждого СтрокаКВозврату Из ТаблицаПомеченныхКВозврату Цикл
		МассивДоступныхКВозврату = ТаблицаДоступныхКВозврату.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, Серия, ПлатныйРемонт",СтрокаКВозврату.Номенклатура,СтрокаКВозврату.Характеристика,СтрокаКВозврату.Серия,СтрокаКВозврату.ПлатныйРемонт));
		КоличествоКВозврату = СтрокаКВозврату.Количество;
		Для Каждого СтрДоступных Из МассивДоступныхКВозврату Цикл
			Если СтрДоступных.Количество <= 0 Тогда 
				Продолжить;
			КонецЕсли;	
			Если КоличествоКВозврату = 0 Тогда 
				Прервать;
			ИначеЕсли КоличествоКВозврату = СтрДоступных.Количество Тогда 
				НовСтр = ТаблицаСтрок.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр,СтрДоступных);
				КоличествоКВозврату = 0;
				СтрДоступных.Количество = 0;
			ИначеЕсли КоличествоКВозврату < СтрДоступных.Количество Тогда 
				НовСтр = ТаблицаСтрок.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр,СтрДоступных);
				НовСтр.Количество = КоличествоКВозврату;
				СтрДоступных.Количество = СтрДоступных.Количество - КоличествоКВозврату;
				КоличествоКВозврату = 0;
			Иначе 
				НовСтр = ТаблицаСтрок.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр,СтрДоступных);
				КоличествоКВозврату = КоличествоКВозврату - СтрДоступных.Количество;
				СтрДоступных.Количество = 0;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаКВозврату.Ячейка) Тогда
				НовСтр.Ячейка = СтрокаКВозврату.Ячейка;
			КонецЕсли;	
		КонецЦикла;
		Если КоличествоКВозврату > 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Попытка вернуть больше отгруженного количества по номенклатуре " + СтрокаКВозврату.Номенклатура);
			Отказ = Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаказКлиентаОбъект = ?(ЗначениеЗаполнено(ЗаказКлиента),ЗаказКлиента.ПолучитьОбъект(),Неопределено);
	ЗаказНаРемонтОбъект = ?(ЗначениеЗаполнено(ЗаказНаРемонт),ЗаказНаРемонт.ПолучитьОбъект(),Неопределено);
	ЗаказНарядОбъект = ?(ЗначениеЗаполнено(ЗаказНаряд),ЗаказНаряд.ПолучитьОбъект(),Неопределено);
	СоответствиеОрдеров = Новый Соответствие();
	СоответствиеУпаковок = Новый Соответствие;
	//Заполним Перемещение из зоны отгрузки в складскую ячейку
	ДокументРазмещение = Документы.ОтборРазмещениеТоваров.СоздатьДокумент();
	ДокументРазмещение.Дата = ТекущаяДата();
	ДокументРазмещение.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Перемещение;
	ДокументРазмещение.Склад = Склад;
	ДокументРазмещение.Ответственный = Пользователи.ТекущийПользователь();
	ДокументРазмещение.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.Подготовлено;
	ДокументРазмещение.пкЗаказНаряд = ЗаказНаряд;
	
	Для Инд = 0 По (ТаблицаСтрок.Количество()-1) Цикл
		
		Отказ = Ложь;
		Стр = ТаблицаСтрок[Инд];
		
		НаборУпаковок = Стр.Номенклатура.НаборУпаковок;
		Если СоответствиеУпаковок.Получить(Стр.Номенклатура) = Неопределено Тогда 
			ЗапросУпаковки = Новый Запрос("ВЫБРАТЬ
			|	УпаковкиЕдиницыИзмерения.Ссылка
			|ИЗ
			|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
			|ГДЕ
			|	УпаковкиЕдиницыИзмерения.Владелец = &Владелец
			|	И УпаковкиЕдиницыИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)");
			ЗапросУпаковки.УстановитьПараметр("Владелец",НаборУпаковок);
			РезультатУпаковки = ЗапросУпаковки.Выполнить();
			Если Не РезультатУпаковки.Пустой() Тогда 
				ВыборкаУпаковки = РезультатУпаковки.Выбрать();
				ВыборкаУпаковки.Следующий();
				СоответствиеУпаковок.Вставить(Стр.Номенклатура,ВыборкаУпаковки.Ссылка);
			КонецЕсли;
		КонецЕсли;
		
		ОрдерСсылка = Стр.РасходныйОрдер; 
		Ордер = СоответствиеОрдеров.Получить(ОрдерСсылка);
		Если Ордер = Неопределено  Тогда 
			Ордер = ОрдерСсылка.ПолучитьОбъект();
			СоответствиеОрдеров.Вставить(ОрдерСсылка, Ордер);
		КонецЕсли;	
		СтрокиТовРасп = Ордер.ТоварыПоРаспоряжениям.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, Серия",Стр.Номенклатура,Стр.Характеристика,Стр.Серия));
		СтрокиОтгрТов = Ордер.ОтгружаемыеТовары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, Серия, Действие",Стр.Номенклатура,Стр.Характеристика,Стр.Серия,Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать));
		КоличествоВернуть = Стр.Количество;
		Если СтрокиТовРасп.Количество() = 1 Тогда 
			СтрТовРасп = СтрокиТовРасп[0];
			СтрОтгрТов = СтрокиОтгрТов[0];
			Если КоличествоВернуть > СтрТовРасп.Количество Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Попытка вернуть больше отгруженного количества по номенклатуре " + Стр.Номенклатура);
				Отказ = Истина;
			ИначеЕсли КоличествоВернуть = СтрТовРасп.Количество Тогда
				Ордер.ТоварыПоРаспоряжениям.Удалить(СтрТовРасп);
				СтрОтгрТов.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.НеОтгружать;
				ОбновитьСтрокиЗаказов(КоличествоВернуть,ЗаказНарядОбъект,ЗаказКлиентаОбъект,ЗаказНаРемонтОбъект,Стр,ОрдерСсылка);
				
			Иначе
				СтрТовРасп.Количество = СтрТовРасп.Количество - КоличествоВернуть;
				СтрОтгрТов.Количество = СтрОтгрТов.Количество - КоличествоВернуть;
				СтрОтгрТов.КоличествоУпаковок = СтрОтгрТов.Количество;
				НовСтрОтгрТов = Ордер.ОтгружаемыеТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрОтгрТов,СтрТовРасп);
				НовСтрОтгрТов.Количество = КоличествоВернуть;
				НовСтрОтгрТов.КоличествоУпаковок = КоличествоВернуть;
				НовСтрОтгрТов.Упаковка = СоответствиеУпаковок.Получить(НовСтрОтгрТов.Номенклатура);
				НовСтрОтгрТов.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.НеОтгружать;
				ОбновитьСтрокиЗаказов(КоличествоВернуть,ЗаказНарядОбъект,ЗаказКлиентаОбъект,ЗаказНаРемонтОбъект,Стр,ОрдерСсылка);
			КонецЕсли;
		ИначеЕсли СтрокиТовРасп.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Попытка вернуть больше отгруженного количества по номенклатуре " + Стр.Номенклатура);
			Отказ = Истина;
		Иначе
			
			Для Каждого СтрТовРасп Из СтрокиТовРасп Цикл
				
				Если КоличествоВернуть <= 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если КоличествоВернуть >= СтрТовРасп.Количество Тогда
					ОбновитьСтрокиЗаказов(КоличествоВернуть,ЗаказНарядОбъект,ЗаказНаРемонтОбъект,ЗаказНаРемонтОбъект,Стр,ОрдерСсылка);
					КоличествоВернуть = КоличествоВернуть - СтрТовРасп.Количество;
					Ордер.ТоварыПоРаспоряжениям.Удалить(СтрТовРасп);
				Иначе
					СтрТовРасп.Количество = СтрТовРасп.Количество - КоличествоВернуть;
					КоличествоВернуть = 0;
				КонецЕсли;
				
			КонецЦикла;
			Если КоличествоВернуть > 0 Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Попытка вернуть больше отгруженного количества по номенклатуре " + Стр.Номенклатура);
				Отказ = Истина;
			КонецЕсли;	
			КоличествоВернуть = Стр.Количество;
			Для Каждого СтрОтгрТов Из СтрокиОтгрТов Цикл
				
				Если КоличествоВернуть <= 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если КоличествоВернуть >= СтрОтгрТов.Количество Тогда
					КоличествоВернуть = КоличествоВернуть - СтрОтгрТов.Количество;
					СтрОтгрТов.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.НеОтгружать;
				Иначе
					СтрОтгрТов.Количество = СтрОтгрТов.Количество - КоличествоВернуть;
					КоличествоВернуть = 0;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не Отказ Тогда 
		//Заполним ТЧ
		Для Каждого Стр Из ТаблицаСтрок Цикл
			СтрОтбор = ДокументРазмещение.ТоварыОтбор.Добавить();
			ЗаполнитьЗначенияСвойств(СтрОтбор,Стр);
			СтрОтбор.Упаковка = СоответствиеУпаковок.Получить(Стр.Номенклатура);
			СтрОтбор.Ячейка = ЗонаОтгрузки;
			СтрОтбор.КоличествоУпаковок = СтрОтбор.Количество;
			
			СтрРазмещение = ДокументРазмещение.ТоварыРазмещение.Добавить();
			ЗаполнитьЗначенияСвойств(СтрРазмещение,Стр);
			СтрРазмещение.Упаковка = СтрОтбор.Упаковка;
			СтрРазмещение.КоличествоУпаковок = СтрРазмещение.Количество;
		КонецЦикла;	
	КонецЕсли;	
	
	Если Не Отказ Тогда 
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		//Если Инд = ТаблицаСтрок.Количество()-1 ИЛИ ОрдерСсылка <> ТаблицаСтрок[Инд+1].РасходныйОрдер Тогда 
		Для Каждого СтрОрдер Из СоответствиеОрдеров Цикл
			Ордер = СтрОрдер.Значение;
			Ордер.Записать(РежимЗаписиДокумента.Проведение);
		КонецЦикла;	
		//ЗаказНарядОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Если ЗначениеЗаполнено(ЗаказНаРемонт) Тогда 
			ЗаказНаРемонтОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗаказКлиента) Тогда 
			ЗаказКлиентаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		ДокументРазмещение.Записать(РежимЗаписиДокумента.Проведение);
		ДокументРазмещение.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок;
		ДокументРазмещение.Записать(РежимЗаписиДокумента.Проведение);
		ЗаказНарядОбъект.Записать();
		ЗафиксироватьТранзакцию();
		//КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтрокиЗаказов(КоличествоВернуть,ЗаказНарядОбъект,ЗаказКлиента,ЗаказНаРемонт,Стр,ОрдерСсылка)
	
	СтрокиЗаказНаряда = ЗаказНаряд.Материалы.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, Серия",Стр.Номенклатура,Стр.Характеристика,Стр.Серия));
	ПлатныйРемонт = Стр.ПлатныйРемонт;
	ВариантОбеспеченияТребуется = Перечисления.ВариантыОбеспечения.Требуется;
	ВариантОбеспеченияОтгрузить = Перечисления.ВариантыОбеспечения.Отгрузить;
	ЗаказНарядИзменен = Ложь;
	//ЗаказНарядОбъект = ЗаказНаряд.ПолучитьОбъект();
	МассивКоличество = Новый Массив;
	Если ПлатныйРемонт Тогда
		ЗаказОбъект = ЗаказКлиента;
		ИмяТЧ = "Товары";
	Иначе
		ЗаказОбъект = ЗаказНаРемонт;
		ИмяТЧ = "МатериалыИРаботы";
	КонецЕсли;	
	Для Каждого СтрЗаказНаряда Из СтрокиЗаказНаряда Цикл
		Если КоличествоВернуть <= 0 Тогда 
			Прервать;
		КонецЕсли;	
		МассивКодов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаказНаряда.КодСтрокиЗаказа,",",Истина,Истина);
		Для Каждого КодСтрокиЗаказа Из МассивКодов Цикл 
			Если КоличествоВернуть > 0 Тогда 
				СтрокаЗаказа = ЗаказОбъект[ИмяТЧ].Найти(Число(КодСтрокиЗаказа),"КодСтроки");
				Если ЗначениеЗаполнено(СтрокаЗаказа) И СтрокаЗаказа.ВариантОбеспечения = ВариантОбеспеченияОтгрузить Тогда 
					Если СтрокаЗаказа.Количество <= КоличествоВернуть Тогда 
						СтрокаЗаказа.ВариантОбеспечения = ВариантОбеспеченияТребуется;
						КоличествоВернуть = КоличествоВернуть - СтрокаЗаказа.Количество;
					Иначе
						НовСтрокаЗаказа = ЗаказОбъект[ИмяТЧ].Добавить();
						ЗаполнитьЗначенияСвойств(НовСтрокаЗаказа,СтрокаЗаказа);
						НовСтрокаЗаказа.Количество = НовСтрокаЗаказа.Количество - КоличествоВернуть;
						НовСтрокаЗаказа.КоличествоУпаковок = НовСтрокаЗаказа.Количество;
						СтрокаЗаказа.ВариантОбеспечения = ВариантОбеспеченияТребуется;
						СтрокаЗаказа.Количество = КоличествоВернуть;
						СтрокаЗаказа.КоличествоУпаковок = КоличествоВернуть;
						КоличествоВернуть = 0;
						
						Если ПлатныйРемонт Тогда 
							НовСтрокаЗаказа.КодСтроки = ЗаказОбъект.МаксимальныйКодСтроки + 1;
							ЗаказОбъект.МаксимальныйКодСтроки = НовСтрокаЗаказа.КодСтроки;
							МассивКоличество.Очистить();
							МассивКоличество.Добавить(КоличествоВернуть);
							МассивКоличество.Добавить(НовСтрокаЗаказа.Количество);
							РаспределениеСумм = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СтрокаЗаказа.Сумма, МассивКоличество);
							РаспределениеСуммНДС = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СтрокаЗаказа.СуммаНДС, МассивКоличество);
							РаспределениеСуммСНДС = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СтрокаЗаказа.СуммаСНДС, МассивКоличество);
							Если РаспределениеСумм <> Неопределено Тогда 
								СтрокаЗаказа.Сумма = РаспределениеСумм[0];
								НовСтрокаЗаказа.Сумма = РаспределениеСумм[1];
							КонецЕсли;
							Если РаспределениеСуммНДС <> Неопределено Тогда 
								СтрокаЗаказа.СуммаНДС = РаспределениеСуммНДС[0];
								НовСтрокаЗаказа.СуммаНДС = РаспределениеСуммНДС[1];
							КонецЕсли;
							Если РаспределениеСуммСНДС <> Неопределено Тогда 
								СтрокаЗаказа.СуммаСНДС = РаспределениеСуммСНДС[0];
								НовСтрокаЗаказа.СуммаСНДС = РаспределениеСуммСНДС[1];
							КонецЕсли;
						Иначе
							НовСтрокаЗаказа.КодСтроки = ЗаказОбъект.МаксимальныйКодСтрокиНоменклатуры + 1;
							ЗаказОбъект.МаксимальныйКодСтрокиНоменклатуры = НовСтрокаЗаказа.КодСтроки;
						КонецЕсли;
						
						СтруктураПоиска = Новый Структура;
						СтруктураПоиска.Вставить("КодСтрокиЗаказа",СтрЗаказНаряда.КодСтрокиЗаказа);
						//СтруктураПоиска.Вставить("ПлатныйРемонт",ПлатныйРемонт);
						СтрокиТЧ = ЗаказНарядОбъект.Материалы.НайтиСтроки(СтруктураПоиска);
						Для Каждого СтрТч Из СтрокиТЧ Цикл
							СтрТч.КодСтрокиЗаказа = СтрЗаказНаряда.КодСтрокиЗаказа + "," + НовСтрокаЗаказа.КодСтроки;
						КонецЦикла;
						ЗаказНарядИзменен = Истина;
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;	
			//СтрЗаказНаряда.РасходныйОрдер = Неопределено;
		//	Если СтрЗаказНаряда.ПлатныйРемонт Тогда 
		//		МассивКодов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаказНаряда.КодСтрокиЗаказа,",",Истина,Истина);
		//		Для Каждого КодСтрокиЗаказа Из МассивКодов Цикл
		//			Если КоличествоВернуть > 0 Тогда 
		//				СтрЗаказКлиента = ЗаказКлиента.Товары.Найти(СтрЗаказНаряда.КодСтрокиЗаказа,"КодСтроки");
		//				Если ЗначениеЗаполнено(СтрЗаказКлиента) И СтрЗаказКлиента.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда 
		//					СтрЗаказКлиента.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется;
		//					КоличествоВернуть = КоличествоВернуть - СтрЗаказКлиента.Количество;
		//				КонецЕсли;
		//			КонецЕсли;	
		//	ИначеЕсли НЕ СтрЗаказНаряда.ПлатныйРемонт  Тогда
		//		СтрЗаказаНаРемонт = ЗаказНаРемонт.МатериалыИРаботы.Найти(СтрЗаказНаряда.КодСтрокиЗаказа,"КодСтроки");
		//		Если ЗначениеЗаполнено(СтрЗаказаНаРемонт) Тогда 
		//			СтрЗаказаНаРемонт.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется;
		//		КонецЕсли;
		//	КонецЕсли;
		//КонецЕсли;
		//КоличествоВернуть = КоличествоВернуть - СтрЗаказНаряда.Количество;
	КонецЦикла;
	КоличествоВернуть = Стр.Количество;
	
КонецПроцедуры				

&НаКлиенте
Процедура Вернуть(Команда)
	
	Ошибки = Неопределено;
	МассивСтрок = СписокМатериалы.НайтиСтроки(Новый Структура("Пометка",Истина));
	Для Каждого Стр Из МассивСтрок Цикл
		Если Не ЗначениеЗаполнено(Стр.Ячейка) Тогда 
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.СписокМатериалов",
			НСтр("ru='Не заполнены ячейки возврата!'"),"",);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если МассивСтрок.Количество() = 0 Тогда 
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,	"Объект.СписокМатериалов",
				НСтр("ru='Не выбрана ни одна строка!'"),"",);
	
	КонецЕсли;
	ЕстьОшибки = НЕ Ошибки = Неопределено;
	Если ЕстьОшибки Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);		
		Возврат;
	КонецЕсли;	
	
	ВернутьНаСервере();
	Оповестить("ОбновитьКоличество",,"ВыдачаВозврат");
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокМатериалыЯчейкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекСтрока = Элементы.СписокМатериалы.ТекущиеДанные;
	Номенклатура = ТекСтрока.Номенклатура;
	ХарактеристикаНоменклатуры = ТекСтрока.Характеристика;
	СписокЯчеек = ПолучитьСписокЯчеек(Номенклатура, ХарактеристикаНоменклатуры,Склад,СкладскаяЯчейкаПользователя);
	
	Отбор = Новый Структура("Ссылка", СписокЯчеек);
    ПараметрыФормы = Новый Структура("Отбор", Отбор);
	ОткрытьФорму("Справочник.СкладскиеЯчейки.ФормаВыбора",ПараметрыФормы,Элемент);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокЯчеек(Номенклатура,Характеристика,Склад,СкладскаяЯчейкаПользователя)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТоварыВЯчейкахОстатки.Ячейка
	                      |ИЗ
	                      |	РегистрНакопления.ТоварыВЯчейках.Остатки(
	                      |			,
	                      |			Номенклатура = &Номенклатура
	                      |				И Характеристика = &Характеристика) КАК ТоварыВЯчейкахОстатки
	                      |
	                      |ГДЕ
	                      |	ТоварыВЯчейкахОстатки.Ячейка.Владелец = &Склад
						  //+++DubI Рарус-СПб 17.01.2017
						  | И Выбор когда &СкладскаяЯчейкаПользователя = Значение(Справочник.СкладскиеЯчейки.ПустаяСсылка) Тогда Истина Иначе ТоварыВЯчейкахОстатки.Ячейка = &СкладскаяЯчейкаПользователя Конец
						  //---DubI Рарус-СПб
						  |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ТоварыВЯчейкахОстатки.Ячейка");
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",Характеристика);
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("СкладскаяЯчейкаПользователя", СкладскаяЯчейкаПользователя); //DubI Рарус-СПб
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Неопределено;
	Иначе
		СписокЯчеек = Новый СписокЗначений;
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокЯчеек.Добавить(Выборка.Ячейка);
		КонецЦикла;
		Возврат СписокЯчеек;
	КонецЕсли;	
	
КонецФункции

