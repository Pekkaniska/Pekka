#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область СозданиеНаОсновании

// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании, НастройкиФормы) Экспорт
	
	Документы.пкЗаказНаряд.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	Документы.ЗаказКлиента.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	СозданиеНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСоздатьНаОсновании);
	
КонецПроцедуры

// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	 
	Если ПравоДоступа("Добавление", Метаданные.Документы.пкЗаказНаряд) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.пкЗаказНаряд.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.пкЗаказНаряд);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

#КонецОбласти 
#КонецОбласти 

// Определяет реквизиты выбранного документа
//
// Параметры:
//	ДокументСсылка - Ссылка на документа
//
// Возвращаемое значение:
//	Структура - реквизиты выбранного документа
//
Функция РеквизитыДокумента(ДокументСсылка) Экспорт
	
	СтруктураРеквизитов = Новый Структура();
	
	Возврат СтруктураРеквизитов;

КонецФункции

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		Если ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь() Тогда
			СтандартнаяОбработка = Ложь;
			//ВыбраннаяФорма = "ФормаДокументаСамообслуживание";
		КонецЕсли;
	ИначеЕсли ВидФормы = "ФормаСписка" Тогда
		Если ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь() Тогда
			СтандартнаяОбработка = Ложь;
			//ВыбраннаяФорма = "ФормаСпискаСамообслуживание";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
КонецПроцедуры


#КонецОбласти 

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	//Акт ремонта и техобслуживания
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.пкПечатьЗаказНарядов";
	КомандаПечати.Идентификатор = "пкАктРемонтаИТехобслуживания";
	КомандаПечати.Представление = НСтр("ru = 'Акт ремонта и техобслуживания'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 1;
	
	//Акт технического обслуживания
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.пкПечатьЗаказНарядов";
	КомандаПечати.Идентификатор = "пкАктТехническогоОбслуживания";
	КомандаПечати.Представление = НСтр("ru = 'Акт технического обслуживания'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 2;
	
	//Бланк проведения полного/частичного технического освидетельствования
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.пкПечатьЗаказНарядов";
	КомандаПечати.Идентификатор = "пкБланкПроведенияТехОсвидетельствования";
	КомандаПечати.Представление = НСтр("ru = 'Бланк проведения полного/частичного технического освидетельствования'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 3;
	
	//Предварительная калькуляция
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.пкПечатьЗаказНарядов";
	КомандаПечати.Идентификатор = "пкПредварительнаяКалькуляция";
	КомандаПечати.Представление = НСтр("ru = 'Предварительная калькуляция'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 24;
	
	//Калькуляция (плановая)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.пкПечатьЗаказНарядов";
	КомандаПечати.Идентификатор = "пкКалькуляцияПлановая";
	КомандаПечати.Представление = НСтр("ru = 'Калькуляция (плановая)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 25;
	
	//Калькуляция
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.пкПечатьЗаказНарядов";
	КомандаПечати.Идентификатор = "пкКалькуляция";
	КомандаПечати.Представление = НСтр("ru = 'Калькуляция'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 26;
	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КомплектДокументов") Тогда
		КоллекцияПечатныхФорм.Очистить();
		СформироватьКомплектПечатныхФорм(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати);
	КонецЕсли;
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

Функция СформироватьКомплектПечатныхФорм(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати) Экспорт
	
	Перем АдресКомплектаПечатныхФорм;
	
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура") И ПараметрыПечати.Свойство("АдресКомплектаПечатныхФорм", АдресКомплектаПечатныхФорм) Тогда
		
		КомплектПечатныхФорм = ПолучитьИзВременногоХранилища(АдресКомплектаПечатныхФорм);
		
	Иначе
		
		КомплектПечатныхФорм = РегистрыСведений.НастройкиПечатиОбъектов.КомплектПечатныхФорм(
			Метаданные.Документы.пкЗаказНаряд.ПолноеИмя(),
			МассивОбъектов, Неопределено);
		
	КонецЕсли;
		
	Если КомплектПечатныхФорм = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураТипов = Новый Соответствие;
	СтруктураТипов.Вставить("Документ.пкЗаказНаряд", МассивОбъектов);
	
	//Акт ремонта и техобслуживания
	ИмяМакета = "пкАктРемонтаИТехобслуживания";
	ТекущийКомплект = КомплектПечатныхФорм.Скопировать(Новый Структура("Имя,Печатать,",ИмяМакета,Истина));
	Если ТекущийКомплект.Количество() > 0 Тогда
		Если ТекущийКомплект.Колонки.Найти("Ссылка") <> Неопределено И ЗначениеЗаполнено(ТекущийКомплект[0].Ссылка) Тогда
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекциюОдинЭкземпляр(КоллекцияПечатныхФорм, ИмяМакета);
			ТаблицаСсылок = ТекущийКомплект.Скопировать(,"Ссылка");
			ТаблицаСсылок.Свернуть("Ссылка");
			ТекущаяСтруктураТипов = Новый Соответствие;
			ТекущаяСтруктураТипов.Вставить("Документ.пкЗаказНаряд", ТаблицаСсылок.ВыгрузитьКолонку("Ссылка"));
		Иначе
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, ТекущийКомплект[0]);
			ТекущаяСтруктураТипов = СтруктураТипов;
		КонецЕсли;
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			ИмяМакета,
			ТекущийКомплект[0].Представление,
			Обработки.пкПечатьЛогистика.СформироватьПечатнуюФормупкАктРемонтаИТехобслуживания(ТекущаяСтруктураТипов, ОбъектыПечати, Новый Структура, ТекущийКомплект));

	КонецЕсли;
	
	//Акт технического обслуживания
	ИмяМакета = "пкАктТехническогоОбслуживания";
	ТекущийКомплект = КомплектПечатныхФорм.Скопировать(Новый Структура("Имя,Печатать,",ИмяМакета,Истина));
	Если ТекущийКомплект.Количество() > 0 Тогда
		Если ТекущийКомплект.Колонки.Найти("Ссылка") <> Неопределено И ЗначениеЗаполнено(ТекущийКомплект[0].Ссылка) Тогда
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекциюОдинЭкземпляр(КоллекцияПечатныхФорм, ИмяМакета);
			ТаблицаСсылок = ТекущийКомплект.Скопировать(,"Ссылка");
			ТаблицаСсылок.Свернуть("Ссылка");
			ТекущаяСтруктураТипов = Новый Соответствие;
			ТекущаяСтруктураТипов.Вставить("Документ.пкЗаказНаряд", ТаблицаСсылок.ВыгрузитьКолонку("Ссылка"));
		Иначе
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, ТекущийКомплект[0]);
			ТекущаяСтруктураТипов = СтруктураТипов;
		КонецЕсли;
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			ИмяМакета,
			ТекущийКомплект[0].Представление,
			Обработки.пкПечатьЛогистика.СформироватьПечатнуюФормупкАктТехническогоОбслуживания(ТекущаяСтруктураТипов, ОбъектыПечати, Новый Структура, ТекущийКомплект));

	КонецЕсли;
	
	//Бланк проведения полного/частичного технического освидетельствования
	ИмяМакета = "пкБланкПроведенияТехОсвидетельствования";
	ТекущийКомплект = КомплектПечатныхФорм.Скопировать(Новый Структура("Имя,Печатать,",ИмяМакета,Истина));
	Если ТекущийКомплект.Количество() > 0 Тогда
		Если ТекущийКомплект.Колонки.Найти("Ссылка") <> Неопределено И ЗначениеЗаполнено(ТекущийКомплект[0].Ссылка) Тогда
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекциюОдинЭкземпляр(КоллекцияПечатныхФорм, ИмяМакета);
			ТаблицаСсылок = ТекущийКомплект.Скопировать(,"Ссылка");
			ТаблицаСсылок.Свернуть("Ссылка");
			ТекущаяСтруктураТипов = Новый Соответствие;
			ТекущаяСтруктураТипов.Вставить("Документ.пкЗаказНаряд", ТаблицаСсылок.ВыгрузитьКолонку("Ссылка"));
		Иначе
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, ТекущийКомплект[0]);
			ТекущаяСтруктураТипов = СтруктураТипов;
		КонецЕсли;
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			ИмяМакета,
			ТекущийКомплект[0].Представление,
			Обработки.пкПечатьЛогистика.СформироватьПечатнуюФормупкБланкПроведенияТехОсвидетельствования(ТекущаяСтруктураТипов, ОбъектыПечати, Новый Структура, ТекущийКомплект));

	КонецЕсли;
	
	//Предварительная Калькуляция
	ИмяМакета = "пкПредварительнаяКалькуляция";
	ТекущийКомплект = КомплектПечатныхФорм.Скопировать(Новый Структура("Имя,Печатать,",ИмяМакета,Истина));
	Если ТекущийКомплект.Количество() > 0 Тогда
		Если ТекущийКомплект.Колонки.Найти("Ссылка") <> Неопределено И ЗначениеЗаполнено(ТекущийКомплект[0].Ссылка) Тогда
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекциюОдинЭкземпляр(КоллекцияПечатныхФорм, ИмяМакета);
			ТаблицаСсылок = ТекущийКомплект.Скопировать(,"Ссылка");
			ТаблицаСсылок.Свернуть("Ссылка");
			ТекущаяСтруктураТипов = Новый Соответствие;
			ТекущаяСтруктураТипов.Вставить("Документ.пкЗаказНаряд", ТаблицаСсылок.ВыгрузитьКолонку("Ссылка"));
		Иначе
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, ТекущийКомплект[0]);
			ТекущаяСтруктураТипов = СтруктураТипов;
		КонецЕсли;
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			ИмяМакета,
			ТекущийКомплект[0].Представление,
			Обработки.пкПечатьЛогистика.СформироватьПечатнуюФормупкПредварительнаяКалькуляция(ТекущаяСтруктураТипов, ОбъектыПечати, Новый Структура, ТекущийКомплект));

	КонецЕсли;
	
	//Калькуляция (плановая)
	ИмяМакета = "пкКалькуляцияПлановая";
	ТекущийКомплект = КомплектПечатныхФорм.Скопировать(Новый Структура("Имя,Печатать,",ИмяМакета,Истина));
	Если ТекущийКомплект.Количество() > 0 Тогда
		Если ТекущийКомплект.Колонки.Найти("Ссылка") <> Неопределено И ЗначениеЗаполнено(ТекущийКомплект[0].Ссылка) Тогда
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекциюОдинЭкземпляр(КоллекцияПечатныхФорм, ИмяМакета);
			ТаблицаСсылок = ТекущийКомплект.Скопировать(,"Ссылка");
			ТаблицаСсылок.Свернуть("Ссылка");
			ТекущаяСтруктураТипов = Новый Соответствие;
			ТекущаяСтруктураТипов.Вставить("Документ.пкЗаказНаряд", ТаблицаСсылок.ВыгрузитьКолонку("Ссылка"));
		Иначе
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, ТекущийКомплект[0]);
			ТекущаяСтруктураТипов = СтруктураТипов;
		КонецЕсли;
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			ИмяМакета,
			ТекущийКомплект[0].Представление,
			Обработки.пкПечатьЛогистика.СформироватьПечатнуюФормупкКалькуляцияПлановая(ТекущаяСтруктураТипов, ОбъектыПечати, Новый Структура, ТекущийКомплект));

	КонецЕсли;
	
	//Калькуляция
	ИмяМакета = "пкКалькуляция";
	ТекущийКомплект = КомплектПечатныхФорм.Скопировать(Новый Структура("Имя,Печатать,",ИмяМакета,Истина));
	Если ТекущийКомплект.Количество() > 0 Тогда
		Если ТекущийКомплект.Колонки.Найти("Ссылка") <> Неопределено И ЗначениеЗаполнено(ТекущийКомплект[0].Ссылка) Тогда
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекциюОдинЭкземпляр(КоллекцияПечатныхФорм, ИмяМакета);
			ТаблицаСсылок = ТекущийКомплект.Скопировать(,"Ссылка");
			ТаблицаСсылок.Свернуть("Ссылка");
			ТекущаяСтруктураТипов = Новый Соответствие;
			ТекущаяСтруктураТипов.Вставить("Документ.пкЗаказНаряд", ТаблицаСсылок.ВыгрузитьКолонку("Ссылка"));
		Иначе
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, ТекущийКомплект[0]);
			ТекущаяСтруктураТипов = СтруктураТипов;
		КонецЕсли;
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			ИмяМакета,
			ТекущийКомплект[0].Представление,
			Обработки.пкПечатьЛогистика.СформироватьПечатнуюФормупкКалькуляция(ТекущаяСтруктураТипов, ОбъектыПечати, Новый Структура, ТекущийКомплект));

	КонецЕсли;
	
	РегистрыСведений.НастройкиПечатиОбъектов.СформироватьКомплектВнешнихПечатныхФорм(
		"Документ.пкЗаказНаряд",
		МассивОбъектов,
		ПараметрыПечати,
		КоллекцияПечатныхФорм,
		ОбъектыПечати);
	
КонецФункции

Функция КомплектПечатныхФорм() Экспорт
	
	КомплектПечатныхФорм = РегистрыСведений.НастройкиПечатиОбъектов.ПодготовитьКомплектПечатныхФорм();
	
	//Акт ремонта и техобслуживания
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "пкАктРемонтаИТехобслуживания", НСтр("ru = 'Акт ремонта и техобслуживания'"), 0);
	//Акт технического обслуживания
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "пкАктТехническогоОбслуживания", НСтр("ru = 'Акт технического обслуживания'"), 0);
	//Бланк проведения полного/частичного технического освидетельствования
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "пкБланкПроведенияТехОсвидетельствования", НСтр("ru = 'Бланк проведения полного/частичного технического освидетельствования'"), 0);
	//Предварительная Калькуляция
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "пкПредварительнаяКалькуляция", НСтр("ru = 'Предварительная калькуляция'"), 0);
	//Калькуляция (Плановая)
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "пкКалькуляцияПлановая", НСтр("ru = 'Калькуляция (Плановая)'"), 0);
	//Калькуляция
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "пкКалькуляция", НСтр("ru = 'Калькуляция'"), 0);
	
	Возврат КомплектПечатныхФорм;
	
КонецФункции

Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Партнер";
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Перевозчик");
	
КонецПроцедуры

Функция ДоступныеДляШаблоновПечатныеФормы() Экспорт

	МассивДоступныхПечатныхФорм = Новый Массив;
	//ШаблоныСообщенийСервер.ДобавитьВМассивПечатныеФормыСчета(МассивДоступныхПечатныхФорм);
	
	Возврат МассивДоступныхПечатныхФорм

КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Функция ПолноеИмяОбъекта()
	
	Возврат "Документ.пкЗаказНаряд";
	
КонецФункции

#КонецОбласти

#КонецОбласти

Процедура ПрочееОприходованиеДляНеисправныхДеталейНаСервере(ОбъектФормы, Объект) Экспорт
	ДокументСоздания = ДанныеФормыВЗначение(ОбъектФормы, Тип("ДокументОбъект.ПрочееОприходованиеТоваров"));
	ЗаполнитьЗначенияСвойств(ДокументСоздания, Объект,,"Дата,Номер");
	ДокументСоздания.Организация = Справочники.Организации.УправленческаяОрганизация;
	ДокументСоздания.пкДокументОснование = Объект.Ссылка;  
	
	ДокументСоздания.ХозяйственнаяОперация=Перечисления.ХозяйственныеОперации.ОприходованиеЗаСчетДоходов;
	ДокументСоздания.Склад=Объект.Склад;
	ДокументСоздания.Ответственный = Пользователи.ТекущийПользователь();
	ДокументСоздания.ВидЦены = Справочники.Склады.УчетныйВидЦены(ДокументСоздания.Склад);
	
	//Для каждого СтрокаТоварыОснования Из Объект.Товары Цикл
	//	ТекущаяСтрока=ДокументСоздания.Товары.Добавить();
	//	ТекущаяСтрока.Номенклатура = СтрокаТоварыОснования.Номенклатура;
	//	ТекущаяСтрока.Характеристика = СтрокаТоварыОснования.Характеристика;
	//	ТекущаяСтрока.Упаковка = СтрокаТоварыОснования.Упаковка;
	//	ТекущаяСтрока.Количество = СтрокаТоварыОснования.КоличествоПринято*(СтрокаТоварыОснования.Количество/СтрокаТоварыОснования.КоличествоУпаковок);
	//	ТекущаяСтрока.КоличествоУпаковок = СтрокаТоварыОснования.КоличествоПринято;
	//	
	//	ДоходыИРасходыСервер.ЗаполнитьСтатьюАналитикуРасходовПоУмолчанию(ДокументСоздания.ХозяйственнаяОперация,
	//																	 ДокументСоздания.Организация,
	//																	 ДокументСоздания.Подразделение,
	//																	 ТекущаяСтрока);
	//																	 
	//КонецЦикла;   
	
   	ЗначениеВДанныеФормы(ДокументСоздания, ОбъектФормы);
КонецПроцедуры

#КонецЕсли

// Проставляет статус в документ и проводит его. Возвращает структуру (ДокументПроведен, ОписаниеОшибки)
//
Функция УстановитьСтатус(ДокументСсылка, Статус, ДатаУстановки) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ДокументПроведен");
	СтруктураВозврата.Вставить("ОписаниеОшибки");
	
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда 
		
		Если ЗначениеЗаполнено(Статус) И Статус <> ДокументСсылка.Статус Тогда 
			
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			
			Если Статус = Перечисления.пкСтатусыЗаказНарядов.ВРаботе Тогда
				
				Если Не ЗначениеЗаполнено(ДокументОбъект.ДатаНачалаФакт) Тогда 
					ДокументОбъект.ДатаНачалаФакт = ТекущаяДата();
				КонецЕсли;
				
			ИначеЕсли Статус = Перечисления.пкСтатусыЗаказНарядов.Выполнен Тогда
				
				ДатаОкончанияТекущая = ДатаУстановки;
				Если Не ЗначениеЗаполнено(ДокументОбъект.ДатаОкончанияФакт) Тогда 
					ДокументОбъект.ДатаОкончанияФакт = ДатаОкончанияТекущая;
				КонецЕсли;
				
				Для Каждого СтрРаботы Из ДокументОбъект.Работы Цикл
					Если НЕ ЗначениеЗаполнено(СтрРаботы.ДатаОкончания) Тогда 
						СтрРаботы.ДатаОкончания = ДатаОкончанияТекущая;
						СтрРаботы.Окончание = Истина;
						Если Не ЗначениеЗаполнено(СтрРаботы.ДатаНачала) Тогда
							СтрРаботы.ДатаНачала = НачалоДня(ДатаОкончанияТекущая);
							СтрРаботы.Начало = Истина;
						КонецЕсли;
					КонецЕсли;	
				КонецЦикла;
				
			КонецЕсли;
			
			ДокументОбъект.Статус = Статус;
			
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				СтруктураВозврата.ДокументПроведен = Истина;
			Исключение
				СтруктураВозврата.ДокументПроведен = Ложь;
				СтруктураВозврата.ОписаниеОшибки = ОписаниеОшибки();
			КонецПопытки;
			
		Иначе
			
			Если Статус = ДокументСсылка.Статус Тогда 
				СтруктураВозврата.ДокументПроведен = Ложь;
				СтруктураВозврата.ОписаниеОшибки = "Статус документа не изменился!";
			Иначе
				СтруктураВозврата.ДокументПроведен = Ложь;
				СтруктураВозврата.ОписаниеОшибки = "Статус не заполнен!";
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтруктураВозврата.ДокументПроведен = Ложь;
		СтруктураВозврата.ОписаниеОшибки = "Документ не найден!";
		
	КонецЕсли;	

	Возврат СтруктураВозврата;
	
КонецФункции

