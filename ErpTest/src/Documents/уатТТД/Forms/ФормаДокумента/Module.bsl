
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	об = РеквизитФормыВЗначение("Объект");
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(об, Отказ, СтандартнаяОбработка, ЭтаФорма, ДопПараметрыОткрытие);
	ЗначениеВРеквизитФормы(Об,"Объект");
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	//фильтруем программно по виду договора - сделано для корректной отработки фильтра в объед. конф. БП3+Стд2
	мсвПараметрыВыбора = Новый Массив;
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("ТипДоговора", "ДоговорыКонтрагентов") Тогда
		мсвПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ТипДоговора", ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПокупателем")));
	Иначе
		мсвПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем")));
	КонецЕсли;
	Элементы.ДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(мсвПараметрыВыбора);
	
	уатОбщегоНазначенияСервер.ЗаполнитьШапкуДокумента(
		Объект,
		,
		Параметры.ЗначениеКопирования,
		Параметры.Основание,
		,
		,
		,
		Параметры.ЗначенияЗаполнения
	);
	
	//добавляем ТТД из ПЛ
	Если Параметры.Свойство("ВводТТДизПЛ") И Параметры.ВводТТДизПЛ Тогда
		ОбъектТТД = РеквизитФормыВЗначение("Объект");
		ОбъектТТД.ДополнительныеСвойства.Вставить("ТекСтрокаПЛ", Параметры.ТекСтрокаПЛ);
		ОбъектТТД.Заполнить(Параметры.ПЛ);
		ЗначениеВРеквизитФормы(ОбъектТТД, "Объект");
	КонецЕсли;
		
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
		
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			ПользователиКлиентСервер.ТекущийПользователь(), "ОсновнойПокупатель");
	КонецЕсли;
	
	// Инициализация реквизитов формы.	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
				Объект.ДоговорКонтрагента = уатЗаполнениеДокументов.ПолучитьОсновнойДоговорКонтрагента(Объект.Контрагент, "СПокупателем");
			КонецЕсли;
			Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
				Объект.ВалютаДокумента         = Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
				ВалютаРасчетовКурсКратность    = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, 
					Новый Структура("Валюта", Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов));
				Объект.КурсВзаиморасчетов      = ?(ВалютаРасчетовКурсКратность.Курс = 0, 1, ВалютаРасчетовКурсКратность.Курс);
				Объект.КратностьВзаиморасчетов = ?(ВалютаРасчетовКурсКратность.Кратность = 0, 1, 
					ВалютаРасчетовКурсКратность.Кратность);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Объект.ВидПеревозки) Тогда
				Объект.ВидПеревозки = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, 
					ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойВидПеревозок);
			КонецЕсли;
		КонецЕсли;
		
		Объект.ВалютаДокумента         = мВалютаРегламентированногоУчета;
		Объект.КурсВзаиморасчетов      = 1;
		Объект.КратностьВзаиморасчетов = 1;
		
		Объект.УчитыватьНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС);
		Объект.СуммаВключаетНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.СуммаВключаетНДС);

	КонецЕсли;
	
	Контрагент = Объект.Контрагент;
	Договор = Объект.ДоговорКонтрагента;
	ВалютаРасчетов = Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	НациональнаяВалюта = мВалютаРегламентированногоУчета;
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", 
		НациональнаяВалюта));
	КурсНациональнаяВалюта = СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	
	уатОбщегоНазначенияСервер.НастроитьПолеДоговорКонтрагента(Элементы.ДоговорКонтрагента, "Объект.Организация", "Объект.Контрагент", "СПокупателем");
	
	ОрганизацияПередИзменением = Объект.Организация;
	
	УстановитьОтборНоменклатурыУслуги();
	УстановитьОтборОбъектСтроительства();
	ОбновитьНадписьСпецРабот();
	
	// УправлениеПредприятием.СлужебныеПодсистемы
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	// Конец УправлениеПредприятием.СлужебныеПодсистемы
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	мТиповойДокумент = Неопределено;
	мОписаниеПредупреждения = "";
	Если НЕ Объект.Ссылка.Пустая() И уатТиповыеДокументы.НайтиТиповойДокументДляДокументаУАТ(Объект.Ссылка, мТиповойДокумент, мОписаниеПредупреждения) Тогда
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект), мОписаниеПредупреждения, 10);
		Возврат;
	КонецЕсли;
	
	ПриОткрытииФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(ДополнительныеПараметры) Экспорт
	
	ТолькоПросмотр = Истина;
	Элементы.ГруппаЗаполнитьВыработку.Доступность = Ложь;
	Элементы.СтоимостьРассчитатьСтоимость.Доступность = Ложь;
	Элементы.РедактироватьЦеныИВалюту.Доступность = Ложь;
	
	ПриОткрытииФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииФрагмент()
	
	СформироватьСписокВыбораПЛ();
	УстановитьВидимость();
	
	ОбновитьИтоги();
	ОбновитьВсегоВТЧСтоимость();
	
	ОбновитьНадписьДолга();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьВсегоВТЧСервер();
	ОбновитьНадписьСпецРабот();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Обновление для ПЛ из ТТД");
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьВсегоВТЧСервер();
	ОбновитьНадписьСпецРабот();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
		Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
			Возврат;
		Иначе
			Если Объект.Выработка.Количество() > 0 Тогда
				Ответ = Неопределено;
				
				ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоВыбранномуПЛЗавершение", ЭтотОбъект, Новый Структура("ПутЛист", ВыбранноеЗначение)),
					"Очистить таблицу перед заполнением?", РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Нет);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьВыработкуПоПЛ(ВыбранноеЗначение);
		ОбновитьНадписьСпецРабот();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			//Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Объект.Организация = ОрганизацияПередИзменением Тогда
		Возврат;
	КонецЕсли;
	ОрганизацияПередИзменением = Объект.Организация;
	
	ПриИзмененииКонтрагентаИлиОрганизации(Новый ОписаниеОповещения("ОрганизацияПриИзмененииЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	УчитыватьНДСПередИзменением = Объект.УчитыватьНДС;
	СуммаВключаетНДСПередИзменением = Объект.СуммаВключаетНДС;
	
	// Обработка события изменения организации.
	Объект.УчитыватьНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС"));
	Объект.СуммаВключаетНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.СуммаВключаетНДС"));
	
	Если Объект.УчитыватьНДС <> УчитыватьНДСПередИзменением ИЛИ Объект.СуммаВключаетНДС <> СуммаВключаетНДСПередИзменением Тогда
		уатОбщегоНазначенияКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтаФорма, "Стоимость");
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
	КонецЕсли;
		
	ОбновитьВсегоВТЧСтоимость();
	ОбновитьИтоги();
	ОбновитьНадписьДолга();
	
	УстановитьВидимость();
	СтруктураНадписи = Новый Структура("ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, 
										| УчитыватьНДС", 
										Объект.ВалютаДокумента, ВалютаРасчетов, Объект.КурсВзаиморасчетов, 
										КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, Объект.УчитыватьНДС);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Контрагент;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		ПриИзмененииКонтрагентаИлиОрганизации(Новый ОписаниеОповещения("КонтрагентПриИзмененииЗавершение1", ЭтотОбъект));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзмененииЗавершение1(Результат, ДополнительныеПараметры) Экспорт
	
	Если Объект.Выработка.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("КонтрагентПриИзмененииЗавершение", ЭтотОбъект), "Очистить табличную часть выработки?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьВыработкуНачальнымиЗначениями();
	КонецЕсли;
	
	УстановитьОтборОбъектСтроительства();
	ОбновитьНадписьДолга();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	ДоговорПередИзменением = Договор;
	Договор = Объект.ДоговорКонтрагента;
	
	Если ДоговорПередИзменением <> Объект.ДоговорКонтрагента Тогда
		ПриИзмененииДоговора(Неопределено, ДоговорПередИзменением);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтпускРазрешилНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.ОтпускРазрешил, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОтпускРазрешилОткрытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.ОтпускРазрешил, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОтпускПроизвелНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.ОтпускПроизвел, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОтпускПроизвелОткрытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.ОтпускПроизвел, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВЫРАБОТКА

&НаКлиенте
Процедура ВыработкаПриИзменении(Элемент)
	ОбновитьНадписьСпецРабот();
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Выработка.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ВыработкаНадписьСпецРаботы Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("СпецРабота1", ТекущиеДанные.СпецРабота1);
		ПараметрыОткрытия.Вставить("СпецРабота2", ТекущиеДанные.СпецРабота2);
		ПараметрыОткрытия.Вставить("СпецРабота3", ТекущиеДанные.СпецРабота3);
		ПараметрыОткрытия.Вставить("СпецРабота4", ТекущиеДанные.СпецРабота4);
		ПараметрыОткрытия.Вставить("СпецРабота5", ТекущиеДанные.СпецРабота5);
		ПараметрыОткрытия.Вставить("КоличествоСпецРаботы1", ТекущиеДанные.КоличествоСпецРаботы1);
		ПараметрыОткрытия.Вставить("КоличествоСпецРаботы2", ТекущиеДанные.КоличествоСпецРаботы2);
		ПараметрыОткрытия.Вставить("КоличествоСпецРаботы3", ТекущиеДанные.КоличествоСпецРаботы3);
		ПараметрыОткрытия.Вставить("КоличествоСпецРаботы4", ТекущиеДанные.КоличествоСпецРаботы4);
		ПараметрыОткрытия.Вставить("КоличествоСпецРаботы5", ТекущиеДанные.КоличествоСпецРаботы5);
		
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияФормыРедактированияСпецРабот", ЭтотОбъект, ТекущиеДанные);
		ОткрытьФорму("Документ.уатПутевойЛист.Форма.ФормаРедактированияСпецРабот", ПараметрыОткрытия, ЭтотОбъект,,,, Оповещение);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И (НЕ Копирование) Тогда
		Элементы.Выработка.ТекущиеДанные.КоличествоЕздок = 1;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	СформироватьСписокВыбораПЛ();
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораГруза(Элемент, Элементы.Выработка.ТекущиеДанные.Номенклатура, Элемент, 
		СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Выработка.ТекущиеДанные;

	уатОбщегоНазначения.ЗаполнитьУпаковкуНоменклатурыПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ЕдиницаИзмерения);

	Если ПустаяСтрока(СтрокаТабличнойЧасти.ВидУпаковки) Тогда
		СтрокаТабличнойЧасти.ВидУпаковки = СтрокаТабличнойЧасти.ЕдиницаИзмерения;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаПодачаПриИзменении(Элемент)
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(Элементы.Выработка.ТекущиеДанные.Подача);
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаКоличествоЧасовПриИзменении(Элемент)
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(Элементы.Выработка.ТекущиеДанные.КоличествоЧасов);
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаПростойПодПогрузкойПриИзменении(Элемент)
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(Элементы.Выработка.ТекущиеДанные.ПростойПодПогрузкой);
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаПростойПодРазгрузкойПриИзменении(Элемент)
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(Элементы.Выработка.ТекущиеДанные.ПростойПодРазгрузкой);
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаВыработкаПриИзменении(Элемент)
	ТекСтрока = Элементы.Выработка.ТекущиеДанные;
	Если уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.ПараметрВыработки, "Временный") = ИСТИНА Тогда
		уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрока.Выработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаКоличествоТоннПриИзменении(Элемент)
	ТекСтрока = Элементы.Выработка.ТекущиеДанные;
	ТекСтрока.Количество = ТекСтрока.КоличествоТонн * ТекСтрока.КоличествоЕздок;
	ТекСтрока.Сумма = ТекСтрока.Количество * ТекСтрока.Цена;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаКоличествоЕздокПриИзменении(Элемент)
	ТекСтрока = Элементы.Выработка.ТекущиеДанные;
	ТекСтрока.Количество = ТекСтрока.КоличествоТонн * ТекСтрока.КоличествоЕздок;
	ТекСтрока.Сумма = ТекСтрока.Количество * ТекСтрока.Цена;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаМаршрутПриИзменении(Элемент)
	
	ТекСтрокаВыработка = Элементы.Выработка.ТекущиеДанные;
	Если ТекСтрокаВыработка = Неопределено Тогда
		Возврат;
	КонецЕсли;

	мМаршрут = ТекСтрокаВыработка.Маршрут;
	
	ТекСтрокаВыработка.КоличествоКмГруз = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(мМаршрут, "Расстояние");
	ТекСтрокаВыработка.КоличествоЧасов = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(мМаршрут, "ВремяВПути");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСТОИМОСТЬ

&НаКлиенте
Процедура СтоимостьПриИзменении(Элемент)
	ОбновитьИтоги();
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Если НЕ Копирование И Объект.УчитыватьНДС Тогда 
			Если ЗначениеЗаполнено(Объект.СтавкаНДС) Тогда
				Элементы.Стоимость.ТекущиеДанные.СтавкаНДС = Объект.СтавкаНДС;
			Иначе
				Элементы.Стоимость.ТекущиеДанные.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
					ПользователиКлиентСервер.ТекущийПользователь(), "ОсновнаяСтавкаНДС");	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьИтоги();
	ОбновитьВсегоВТЧСтоимость();
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьПослеУдаления(Элемент)
	ОбновитьВсегоВТЧСтоимость();
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораГруза(Элемент, Элементы.Стоимость.ТекущиеДанные.Номенклатура, Элемент, 
		СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьНоменклатураУслугиПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Стоимость.ТекущиеДанные;
	
	// Заполняем реквизиты табличной части.
	СтрокаТабличнойЧасти.СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(СтрокаТабличнойЧасти.НоменклатураУслуги, "СтавкаНДС");
	СтрокаТабличнойЧасти.Содержание = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
										СтрокаТабличнойЧасти.НоменклатураУслуги, "НаименованиеПолное");
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьПараметрВыработкиПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Стоимость.ТекущиеДанные;
	
	мКоличество = 0;
	ПараметрыОтбора = Новый Структура("ПутЛист", ТекСтрокаТабличнойЧасти.ПутЛист);
	НайденныеСтроки = Объект.Выработка.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого ТекСтрока Из НайденныеСтроки Цикл
		Если ТекСтрокаТабличнойЧасти.ПараметрВыработки =
			ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ВесГруза") Тогда
			мКоличество = мКоличество + ТекСтрока.КоличествоТонн;
		ИначеЕсли ТекСтрокаТабличнойЧасти.ПараметрВыработки =
			ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.Объем") Тогда
			мКоличество = мКоличество + ТекСтрока.Объем;	
		ИначеЕсли ТекСтрокаТабличнойЧасти.ПараметрВыработки =
			ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.Подача") Тогда
			мКоличество = мКоличество + ТекСтрока.Подача;
		ИначеЕсли ТекСтрокаТабличнойЧасти.ПараметрВыработки =
			ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ВремяВРаботе") Тогда
			мКоличество = мКоличество + ТекСтрока.КоличествоЧасов;
		ИначеЕсли ТекСтрокаТабличнойЧасти.ПараметрВыработки =
			ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.КоличествоЕздок") Тогда
			мКоличество = мКоличество + ТекСтрока.КоличествоЕздок;
		ИначеЕсли ТекСтрокаТабличнойЧасти.ПараметрВыработки =
			ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.КоличествоОпераций") Тогда
			мКоличество = мКоличество + ТекСтрока.КоличествоОпераций;
		ИначеЕсли ТекСтрокаТабличнойЧасти.ПараметрВыработки =
			ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПробегСГрузом") Тогда
			мКоличество = мКоличество + ТекСтрока.КоличествоКмГруз;
		ИначеЕсли ТекСтрокаТабличнойЧасти.ПараметрВыработки =
			ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПробегПорожний") Тогда
			мКоличество = мКоличество + ТекСтрока.КоличествоКмПорожний;
		ИначеЕсли ТекСтрокаТабличнойЧасти.ПараметрВыработки =
			ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПогрузочноРазгрузочныеРаботы") Тогда
			мКоличество = мКоличество + ТекСтрока.ПогрузочноРазгрузочныеРаботы;
		ИначеЕсли ТекСтрокаТабличнойЧасти.ПараметрВыработки =
			ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПростойПодПогрузкой") Тогда
			мКоличество = мКоличество + ТекСтрока.ПростойПодПогрузкой;
		ИначеЕсли ТекСтрокаТабличнойЧасти.ПараметрВыработки =
			ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПростойПодРазгрузкой") Тогда
			мКоличество = мКоличество + ТекСтрока.ПростойПодРазгрузкой;
		ИначеЕсли ТекСтрокаТабличнойЧасти.ПараметрВыработки = ТекСтрока.ПараметрВыработки Тогда
			мКоличество = мКоличество + ТекСтрока.Выработка;
		КонецЕсли;	
	КонецЦикла;	
	
	ТекСтрокаТабличнойЧасти.Количество = мКоличество;
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьКоличествоПараметрВыработкиПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Стоимость.ТекущиеДанные;
	Если уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
		ТекСтрокаТабличнойЧасти.ПараметрВыработки, "Временный") = ИСТИНА Тогда 
		
		уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрокаТабличнойЧасти.КоличествоПараметрВыработки);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьЦенаПриИзменении(Элемент)
	РассчитатьСуммуВСтрокеТабличнойЧасти(Элементы.Стоимость.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьКоличествоПриИзменении(Элемент)
	РассчитатьСуммуВСтрокеТабличнойЧасти(Элементы.Стоимость.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Стоимость.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.Количество = 0 Тогда
		СтрокаТабличнойЧасти.Количество = 1;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
		
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьСтавкаНДСПриИзменении(Элемент)
	РассчитатьСуммуНДС(Элементы.Стоимость.ТекущиеДанные);
	РассчитатьСуммуВсегоВстрокеТЧ(Элементы.Стоимость.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьСуммаНДСПриИзменении(Элемент)
	РассчитатьСуммуВсегоВстрокеТЧ(Элементы.Стоимость.ТекущиеДанные);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТТН

&НаКлиенте
Процедура Выработка1КоличествоТоннПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ТабличноеПолеТТН.ТекущиеДанные;
	
	// Рассчитать реквизиты табличной части.
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.КоличествоТонн;
КонецПроцедуры

&НаКлиенте
Процедура Выработка1ЕдиницаИзмеренияПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ТабличноеПолеТТН.ТекущиеДанные;
	
	Если ПустаяСтрока(СтрокаТабличнойЧасти.ВидУпаковки) Тогда
		СтрокаТабличнойЧасти.ВидУпаковки = СтрокаТабличнойЧасти.ЕдиницаИзмерения;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Выработка1ЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ТабличноеПолеТТН.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.КоличествоТонн;
КонецПроцедуры

&НаКлиенте
Процедура Выработка1СуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ТабличноеПолеТТН.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении Суммы.
	Если СтрокаТабличнойЧасти.КоличествоТонн = 0 Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	Иначе
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.КоличествоТонн;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// УправлениеПредприятием.СлужебныеПодсистемы
&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
КонецПроцедуры
// Конец УправлениеПредприятием.СлужебныеПодсистемы

&НаКлиенте
Процедура РассчитатьСтоимость(Команда)
	Если Объект.Стоимость.Количество() = 0 Тогда
		мОтвет = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьСтоимостьЗавершение1", ЭтотОбъект), "Рассчитать стоимость услуг?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
        Возврат;
	Иначе
		ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьСтоимостьЗавершение", ЭтотОбъект), "Рассчитать стоимость услуг. Очистить таблицу перед заполнением?", РежимДиалогаВопрос.ДаНетОтмена, ,
			КодВозвратаДиалога.Да);
        Возврат;
	КонецЕсли;	
	
	РассчитатьСтоимостьФрагмент1();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСтоимостьЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    мОтвет = РезультатВопроса;
    Если мОтвет <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    РассчитатьСтоимостьФрагмент1();

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСтоимостьФрагмент1()
    
    РассчитатьСтоимостьФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСтоимостьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    мОтвет = РезультатВопроса;
    Если мОтвет = КодВозвратаДиалога.Да Тогда
        Объект.Стоимость.Очистить();
    ИначеЕсли мОтвет = КодВозвратаДиалога.Отмена Тогда
        Возврат;
    КонецЕсли;
    
    РассчитатьСтоимостьФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСтоимостьФрагмент()
    
    Перем СтруктураНадписи;
    
    РасчетСтоимостьСервер();
    
    ОбновитьВсегоВТЧСтоимость();
    ОбновитьИтоги();
    
    СтруктураНадписи = Новый Структура;
    СтруктураНадписи.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
    СтруктураНадписи.Вставить("ВалютаРасчетов", ВалютаРасчетов);
    СтруктураНадписи.Вставить("Курс", Объект.КурсВзаиморасчетов);
    СтруктураНадписи.Вставить("КурсНациональнаяВалюта", КурсНациональнаяВалюта);
    СтруктураНадписи.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
    СтруктураНадписи.Вставить("УчитыватьНДС", Объект.УчитыватьНДС);
    ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
    
    Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДолг(Команда)
	ОбновитьНадписьДолга();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписьДолга()
	уатОбщегоНазначенияТиповые_проф.СформироватьНадписьДолга(Объект.Контрагент, ВалютаРасчетов,
		Объект.Организация, НадписьДолг, Элементы.НадписьДолг.ЦветТекста, Элементы.НадписьДолг.Гиперссылка, Объект.Дата);
КонецПроцедуры

&НаКлиенте
Процедура НадписьДолгНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	КлючВарианта = "КарточкаРасчетовСКлиентамиПоДокументамКонтекст";
	СтрокаБазовая = ?(уатИнтерфейсВзаимодействияСERPВызовСервера.уатЗначениеФункциональнойОпции("БазоваяВерсия"), "Базовая", "");
	
	ОткрытьФорму("Отчет.КарточкаРасчетовСКлиентами.Форма",
		Новый Структура("КлючВарианта, КлючНазначенияИспользования, Отбор, СформироватьПриОткрытии, ВидимостьКомандВариантовОтчетов", 
			КлючВарианта + СтрокаБазовая,
			, 
			Новый Структура("Контрагент, Организация", Объект.Контрагент, Объект.Организация), 
			Истина,
			Ложь));
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПЛ(Команда)
	ТекСтрока = Элементы.Выработка.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(ТекСтрока.ПутЛист) Тогда
		Возврат;
	КонецЕсли;

	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоПЛЗавершение", ЭтотОбъект), "Заполнить по ПЛ?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПЛЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		Если Элементы.Выработка.ТекущиеДанные <> Неопределено Тогда
			НомерСтроки = Элементы.Выработка.ТекущиеДанные.НомерСтроки;
			СтрокаОшибки = "";
			ЗаполнитьВыработкуПоПЛ(, НомерСтроки, СтрокаОшибки);
			ОбновитьНадписьСпецРабот();
			Если НЕ ПустаяСтрока(СтрокаОшибки) Тогда
				Сообщить("Заполнение по путевому листу не выполнено: " + СтрокаОшибки);
			КонецЕсли;
		Иначе
			ТекстСообщения = "Для заполнения необходимо выбрать строку в табличной части выработка!";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект.Выработка");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоВыбранномуПЛ(Команда)
	ФормаВыбора = ПолучитьФорму("Документ.уатПутевойЛист.ФормаВыбора",, ЭтаФорма);
	ФормаВыбора.Список.Отбор.Элементы.Очистить();
	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Задание.Контрагент");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Объект.Контрагент;
	ЭлементОтбора.Использование = Истина;
	
	//ОткрытьФорму(ФормаВыбора,, ЭтаФорма,,,, Новый ОписаниеОповещения("ЗаполнитьПоВыбранномуПЛЗавершение1", ЭтаФорма, Новый Структура("Тест", Истина)),
	//	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ФормаВыбора.Открыть();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервереБезКонтекста
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("РазностьДат", уатОбщегоНазначенияСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая,
		ДатаПередИзменением));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Дата, ВалютаДокумента, Договор)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
	"ВалютаРасчетов",
	Договор.ВалютаВзаиморасчетов);
	
	СтруктураДанные.Вставить(
	"ВалютаРасчетовКурсКратность",
	РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаВзаиморасчетов)));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

&НаСервере
Процедура УстановитьКонтрагентаИзДоговора()
	
	Объект.Контрагент = Объект.ДоговорКонтрагента.Контрагент;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКонтрагентаИлиОрганизации(Знач Оповещение)
	
	ДанныеОбменаССервером = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, УчитыватьНДС, Дата");
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, Объект);
	// Получим данные с сервера
	ДанныеОбменаССервером.ДоговорКонтрагента = Объект.ДоговорКонтрагента;
	ЗначенияДляЗаполнения = ИзменениеКонтрагентаСервер(ДанныеОбменаССервером);
	Объект.ДоговорКонтрагента = ЗначенияДляЗаполнения.ДоговорКонтрагента;
	
	ДоговорПередИзменением = Договор;
	Договор = Объект.ДоговорКонтрагента;
	
	ПриИзмененииДоговора(Новый ОписаниеОповещения("ПриИзмененииКонтрагентаИлиОрганизацииЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), ДоговорПередИзменением);
	
КонецПроцедуры // ПриИзмененииКонтрагентаИлиОрганизации()

&НаКлиенте
Процедура ПриИзмененииКонтрагентаИлиОрганизацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ДополнительныеПараметры.Оповещение = Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение);
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииКонтрагентаИлиОрганизации()

// Процедура при изменении договора.
//
&НаКлиенте
Процедура ПриИзмененииДоговора(Знач Оповещение, ДоговорПередИзменением)
	
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(Объект.Дата, Объект.ВалютаДокумента, Объект.ДоговорКонтрагента);
	
	ВалютаРасчетовПередИзменением = ВалютаРасчетов;
	ВалютаРасчетов = СтруктураДанные.ВалютаРасчетов;
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда 
		Объект.КурсВзаиморасчетов	   = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1,
			СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
		Объект.КратностьВзаиморасчетов = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1,
			СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент)
		И ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда 
			УстановитьКонтрагентаИзДоговора();
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(Объект.ДоговорКонтрагента)
		И ЗначениеЗаполнено(ВалютаРасчетов)
		И Объект.ДоговорКонтрагента <> ДоговорПередИзменением
		И ВалютаРасчетовПередИзменением <> СтруктураДанные.ВалютаРасчетов)
		И Объект.ВалютаДокумента <> СтруктураДанные.ВалютаРасчетов Тогда
		
		Объект.ВалютаДокумента = СтруктураДанные.ВалютаРасчетов;
		
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ПриИзмененииДоговораЗавершениеПредупреждение", ЭтотОбъект,
			Новый Структура("ВалютаРасчетовПередИзменением, Оповещение", ВалютаРасчетовПередИзменением, Оповещение)),
			НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом! 
							| Необходимо проверить валюту документа!'"));
		Возврат;
	КонецЕсли;
	
	ПриИзмененииДоговораФрагмент(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДоговораЗавершениеПредупреждение(ДополнительныеПараметры) Экспорт
	
	ВалютаРасчетовПередИзменением = ДополнительныеПараметры.ВалютаРасчетовПередИзменением;
	Оповещение = ДополнительныеПараметры.Оповещение;
	
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Новый ОписаниеОповещения("ПриИзмененииДоговораЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), ВалютаРасчетовПередИзменением, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДоговораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПриИзмененииДоговораФрагмент(ДополнительныеПараметры.Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДоговораФрагмент(Знач Оповещение)
	
	ОбновитьВсегоВТЧСтоимость();
	ОбновитьНадписьДолга();
	УстановитьВидимость();
	
	Если Не Оповещение = Неопределено Тогда 
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзменениеКонтрагентаСервер(ДанныеДляЗаполнения)
	СтруктураПараметровДляПолученияДоговора = 
		уатЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПродажи();
	
	ЗначенияДляЗаполнения = уатОбщегоНазначенияСервер.ПриИзмененииЗначенияКонтрагента(ДанныеДляЗаполнения, 
		СтруктураПараметровДляПолученияДоговора);
	Возврат ЗначенияДляЗаполнения;
КонецФункции

// Формирует надписи элементов формы, в частности при смене валют
//
Процедура ОбновитьИтоги()
	Если ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		НадписьВсего = "Всего (" + СокрЛП(Объект.ВалютаДокумента) +"):";
	Иначе
		НадписьВсего = "Всего (<>):";
	КонецЕсли;
	Если Объект.СуммаВключаетНДС Тогда
		НадписьВсегоНДС = "НДС (в т. ч.):";
	Иначе
		НадписьВсегоНДС = "НДС (сверху):";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ИнициализироватьТЗПоВыработке()
	
	ТЗ = Новый ТаблицаЗначений();
	
	ТЗ.Колонки.Добавить("ПутЛист");
	ТЗ.Колонки.Добавить("Маршрут");
	ТЗ.Колонки.Добавить("Номенклатура");
	ТЗ.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗ.Колонки.Добавить("УсловиеРаботы");
	ТЗ.Колонки.Добавить("КоличествоЕздок");
	ТЗ.Колонки.Добавить("КоличествоКмГруз");
	ТЗ.Колонки.Добавить("КоличествоКмПорожний");
	ТЗ.Колонки.Добавить("СпецРабота1");
	ТЗ.Колонки.Добавить("СпецРабота2");
	ТЗ.Колонки.Добавить("СпецРабота3");
	ТЗ.Колонки.Добавить("СпецРабота4");
	ТЗ.Колонки.Добавить("СпецРабота5");
	ТЗ.Колонки.Добавить("КоличествоСпецРаботы1");
	ТЗ.Колонки.Добавить("КоличествоСпецРаботы2");
	ТЗ.Колонки.Добавить("КоличествоСпецРаботы3");
	ТЗ.Колонки.Добавить("КоличествоСпецРаботы4");
	ТЗ.Колонки.Добавить("КоличествоСпецРаботы5");
	ТЗ.Колонки.Добавить("КоличествоОпераций");
	ТЗ.Колонки.Добавить("КоличествоТонн");
	ТЗ.Колонки.Добавить("КоличествоЧасов");
	ТЗ.Колонки.Добавить("Подача");
	ТЗ.Колонки.Добавить("ПростойПодпогрузкой");
	ТЗ.Колонки.Добавить("ПростойПодРазгрузкой");
	ТЗ.Колонки.Добавить("Объем");
	ТЗ.Колонки.Добавить("ПогрузочноРазгрузочныеРаботы");
	ТЗ.Колонки.Добавить("КоличествоЧасовВСекундах");
	ТЗ.Колонки.Добавить("ПодачаВСекундах");
	ТЗ.Колонки.Добавить("НомерЕздки");
	
	Возврат ТЗ;
	
КонецФункции

&НаСервере
Процедура ДобавитьСтрокуВыработки(ТЗ,ТекСтрока,ПоЭтапу,ВесГруза = Неопределено,ОбъемГруза = Неопределено);
	
	НоваяСтрока = ТЗ.Добавить();
	НоваяСтрока.Путлист               = ТекСтрока.ПутЛист;
	НоваяСтрока.Маршрут               = ТекСтрока.Маршрут;
	НоваяСтрока.Номенклатура          = ТекСтрока.Номенклатура;
	НоваяСтрока.ЕдиницаИзмерения      = ТекСтрока.ЕдиницаИзмерения;
	НоваяСтрока.УсловиеРаботы         = ТекСтрока.УсловиеРаботы;
	НоваяСтрока.КоличествоЕздок       = ТекСтрока.КоличествоЕздок;
	НоваяСтрока.КоличествоКмГруз      = ТекСтрока.КоличествоКмГруз;
	НоваяСтрока.КоличествоКмПорожний  = ТекСтрока.КоличествоКмПорожний;
	НоваяСтрока.СпецРабота1           = ТекСтрока.СпецРабота1;
	НоваяСтрока.СпецРабота2           = ТекСтрока.СпецРабота2;
	НоваяСтрока.СпецРабота3           = ТекСтрока.СпецРабота3;
	НоваяСтрока.СпецРабота4           = ТекСтрока.СпецРабота4;
	НоваяСтрока.СпецРабота5           = ТекСтрока.СпецРабота5;
	НоваяСтрока.КоличествоСпецРаботы1 = ТекСтрока.КоличествоСпецРаботы1;
	НоваяСтрока.КоличествоСпецРаботы2 = ТекСтрока.КоличествоСпецРаботы2;
	НоваяСтрока.КоличествоСпецРаботы3 = ТекСтрока.КоличествоСпецРаботы3;
	НоваяСтрока.КоличествоСпецРаботы4 = ТекСтрока.КоличествоСпецРаботы4;
	НоваяСтрока.КоличествоСпецРаботы5 = ТекСтрока.КоличествоСпецРаботы5;
	НоваяСтрока.КоличествоОпераций    = ТекСтрока.КоличествоОпераций;
	
	Если ПоЭтапу Тогда
		НоваяСтрока.КоличествоТонн = ВесГруза;
		НоваяСтрока.Объем          = ОбъемГруза;
	Иначе 
		НоваяСтрока.КоличествоТонн = ТекСтрока.КоличествоТонн;
		НоваяСтрока.Объем          = ТекСтрока.Объем;
	КонецЕсли;
	
	НоваяСтрока.КоличествоЧасов              = ТекСтрока.КоличествоЧасов;
	НоваяСтрока.Подача                       = ТекСтрока.Подача;
	НоваяСтрока.ПростойПодпогрузкой          = ТекСтрока.ПростойПодпогрузкой;
	НоваяСтрока.ПростойПодРазгрузкой         = ТекСтрока.ПростойПодРазгрузкой;
	НоваяСтрока.ПогрузочноРазгрузочныеРаботы = ТекСтрока.ПогрузочноРазгрузочныеРаботы;
	НоваяСтрока.КоличествоЧасовВСекундах     = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрока.КоличествоЧасов);
	НоваяСтрока.ПодачаВСекундах              = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрока.Подача);
	НоваяСтрока.НомерЕздки                   = ТекСтрока.НомерЕздки;
	
КонецПроцедуры

//Процедура заполняет табличную часть Выработка по ПЛ
//Параметры: 
//	ПЛ  Ссылка на выбранный путевой лист.
//Описание:
//	Если ПЛ <> Неопределено тогда берется Путеовой лист, который выбран в форме выбора.
//	Иначе Путевые листы находящиеся в табличной части Выработка.
//
&НаСервере
Процедура ЗаполнитьВыработкуПоПЛ(ПЛ = Неопределено, НомерСтроки = Неопределено, СтрокаОшибка = "")
	флЗаполнениеТекСтроки = (ПЛ = Неопределено);
	
	СтруктураТекущейСтроки = Новый Структура("ПутЛист, Маршрут", Неопределено, Неопределено);
	ТЗКонечная = ИнициализироватьТЗПоВыработке();
	
	Если флЗаполнениеТекСтроки Тогда
		СтруктураТекущейСтроки.ПутЛист = Объект.Выработка[НомерСтроки-1].ПутЛист;
		СтруктураТекущейСтроки.Маршрут = Объект.Выработка[НомерСтроки-1].Маршрут;
		ТЗВыработкиНач = Объект.Выработка.Выгрузить();
		ТЗВыработкиНач.Колонки.Добавить("КоличествоЧасовВСекундах");
		ТЗВыработкиНач.Колонки.Добавить("ПодачаВСекундах");
	Иначе
		СтруктураТекущейСтроки.ПутЛист = ПЛ;
		СтруктураТекущейСтроки.Маршрут = Неопределено;
	КонецЕсли;
	
	//поиск строки задания ПЛ, соответствующей указанному в ТТД Контрагенту
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекСтрокаПЛ = СтруктураТекущейСтроки.ПутЛист.Задание.Найти(Объект.Контрагент, "Контрагент");
		Если ТекСтрокаПЛ = Неопределено Тогда
			СтрокаОшибка = СтрокаОшибка + "
			|Отсутствуют данные по контрагенту """ + Объект.Контрагент + """ в табличной части ""Задание"" документа """ + СтруктураТекущейСтроки.ПутЛист + """";
			Возврат;
		КонецЕсли;
	ИначеЕсли СтруктураТекущейСтроки.ПутЛист.Задание.Количество() = 0 Тогда
		СтрокаОшибка = СтрокаОшибка + "
		|Отсутствуют данные в табличной части ""Задание"" документа """ + СтруктураТекущейСтроки.ПутЛист + """";
		Возврат;
	Иначе
		ТекСтрокаПЛ = СтруктураТекущейСтроки.ПутЛист.Задание[0];
	КонецЕсли;
		
	//уточнение строки задания ПЛ, если указан маршрут в строке ТТД
	Если флЗаполнениеТекСтроки И ЗначениеЗаполнено(СтруктураТекущейСтроки.Маршрут) Тогда
		мсвСтрокиПоиска = СтруктураТекущейСтроки.ПутЛист.Задание.НайтиСтроки(Новый Структура("Контрагент, Маршрут", Объект.Контрагент, СтруктураТекущейСтроки.Маршрут));
		Если мсвСтрокиПоиска.Количество() = 0 Тогда
			СтрокаОшибка = СтрокаОшибка + "
				|Отсутствуют данные по контрагенту """ + Объект.Контрагент + """ и маршруту """
				+ СтруктураТекущейСтроки.Маршрут + """ в табличной части ""Задание"" документа """ + СтруктураТекущейСтроки.ПутЛист + """";
			Возврат;
		Иначе
			ТекСтрокаПЛ = мсвСтрокиПоиска[0];
		КонецЕсли;
	КонецЕсли;
	
	ОбъектТТД = Документы.уатТТД.СоздатьДокумент();
	Если флЗаполнениеТекСтроки Тогда
		ОбъектТТД.ДополнительныеСвойства.Вставить("ТекСтрокаПЛ", ТекСтрокаПЛ.НомерСтроки-1);
	КонецЕсли;
	ОбъектТТД.Заполнить(СтруктураТекущейСтроки.ПутЛист);
	
	Если флЗаполнениеТекСтроки Тогда 
		Для Каждого ТекСтрокаВырКон Из ОбъектТТД.Выработка Цикл
			ТекСтрокаВырКон.НомерЕздки = 1;
		КонецЦикла;
	КонецЕсли;
	
	тблЕздки = ОбъектТТД.Выработка.Выгрузить();
	тблЕздки.Свернуть("НомерЕздки");
	Для Каждого ТекЕздка Из тблЕздки Цикл
		СтрокиВыработки = ОбъектТТД.Выработка.НайтиСтроки(Новый Структура("НомерЕздки", ТекЕздка.НомерЕздки));
		ВесГруза = 0;
		ОбъемГруза = 0;
		Если ТекЕздка.НомерЕздки <> 0 Тогда
			Для Каждого ТекСтрока Из СтрокиВыработки Цикл
				Если ВесГруза < ТекСтрока.КоличествоТонн * ТекСтрока.КоличествоЕздок  Тогда
					ВесГруза = ТекСтрока.КоличествоТонн * ТекСтрока.КоличествоЕздок;
				КонецЕсли;
				Если ОбъемГруза < ТекСтрока.Объем * ТекСтрока.КоличествоЕздок Тогда
					ОбъемГруза = ТекСтрока.Объем * ТекСтрока.КоличествоЕздок;
				КонецЕсли;		
			КонецЦикла;
			ТЗПромежуточная = ИнициализироватьТЗПоВыработке(); 
			Для Каждого ТекСтрокаМассива Из СтрокиВыработки Цикл
				ДобавитьСтрокуВыработки(ТЗПромежуточная, ТекСтрокаМассива, Истина, ВесГруза, ОбъемГруза);
			КонецЦикла;
			ТЗПромежуточная.Свернуть("ПутЛист,Маршрут,Номенклатура,ЕдиницаИзмерения,УсловиеРаботы,КоличествоТонн,Объем,НомерЕздки,СпецРабота1,СпецРабота2,СпецРабота3,СпецРабота4,СпецРабота5",
				"КоличествоЕздок,КоличествоКмГруз,КоличествоКмПорожний,КоличествоСпецРаботы1,КоличествоСпецРаботы2,КоличествоСпецРаботы3,КоличествоСпецРаботы4,КоличествоСпецРаботы5,КоличествоОпераций,КоличествоЧасов,Подача,ПростойПодПогрузкой,ПростойПодРазгрузкой,ПогрузочноРазгрузочныеРаботы,КоличествоЧасовВСекундах,ПодачаВСекундах");
			Для Каждого ТекСтрокаТЗПромежуточная Из ТЗПромежуточная Цикл
				ДобавитьСтрокуВыработки(ТЗКонечная, ТекСтрокаТЗПромежуточная, Ложь);
			КонецЦикла;
		Иначе
			Для Каждого ТекСтрокаМассива Из СтрокиВыработки Цикл 
				ДобавитьСтрокуВыработки(ТЗКонечная, ТекСтрокаМассива, Ложь);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СтруктураТекущейСтроки.Маршрут) Тогда
		Сч = ТЗКонечная.Количество() - 1;
		Пока Сч >= 0 Цикл
			ТекСтрока = ТЗКонечная[Сч]; 
			Если ТекСтрока.ПутЛист = СтруктураТекущейСтроки.ПутЛист И ТекСтрока.Маршрут <> СтруктураТекущейСтроки.Маршрут Тогда
				ТЗКонечная.Удалить(Сч);
			КонецЕсли;
			Сч = Сч - 1;
		КонецЦикла;
		НайденнаяСтрока = ТЗКонечная.Найти(СтруктураТекущейСтроки.ПутЛист, "ПутЛист");
		Если НайденнаяСтрока = Неопределено Тогда
			НоваяСтрока = ТЗКонечная.Добавить();
			НоваяСтрока.ПутЛист = СтруктураТекущейСтроки.ПутЛист;
			НоваяСтрока.Маршрут = СтруктураТекущейСтроки.Маршрут;
			НоваяСтрока.КоличествоЕздок = 1;
		КонецЕсли;
	КонецЕсли;
		
	Если флЗаполнениеТекСтроки Тогда
		ТЗКонечная.Свернуть("ПутЛист,Маршрут,Номенклатура,ЕдиницаИзмерения,УсловиеРаботы,КоличествоТонн,Объем,НомерЕздки,СпецРабота1,СпецРабота2,СпецРабота3,СпецРабота4,СпецРабота5",
			"КоличествоЕздок,КоличествоКмГруз,КоличествоКмПорожний,КоличествоСпецРаботы1,КоличествоСпецРаботы2,КоличествоСпецРаботы3,КоличествоСпецРаботы4,КоличествоСпецРаботы5,КоличествоОпераций,КоличествоЧасов,Подача,ПростойПодПогрузкой,ПростойПодРазгрузкой,ПогрузочноРазгрузочныеРаботы,КоличествоЧасовВСекундах,ПодачаВСекундах");
		
		ЗаполнитьЗначенияСвойств(ТЗВыработкиНач[НомерСтроки-1], ТЗКонечная[0]);
		ТЗКонечная = ТЗВыработкиНач.Скопировать();
	Иначе
		ТЗКонечная.Свернуть("ПутЛист,Маршрут,Номенклатура,ЕдиницаИзмерения,УсловиеРаботы,НомерЕздки,СпецРабота1,СпецРабота2,СпецРабота3,СпецРабота4,СпецРабота5",
			"КоличествоЕздок,КоличествоКмГруз,КоличествоКмПорожний,КоличествоСпецРаботы1,КоличествоСпецРаботы2,КоличествоСпецРаботы3,КоличествоСпецРаботы4,КоличествоСпецРаботы5,КоличествоОпераций,КоличествоЧасов,Подача,ПростойПодПогрузкой,ПростойПодРазгрузкой,ПогрузочноРазгрузочныеРаботы,КоличествоЧасовВСекундах,ПодачаВСекундах,КоличествоТонн,Объем");
	КонецЕсли;
	
	Для Каждого ТекСтрокаТЗ Из ТЗКонечная Цикл
		Если ЗначениеЗаполнено(ТекСтрокаТЗ.КоличествоЧасовВСекундах) И ЗначениеЗаполнено(ТекСтрокаТЗ.ПодачаВСекундах) Тогда
			ТекСтрокаТЗ.КоличествоЧасов = уатОбщегоНазначения.уатВремяВЧЧ_ММ(ТекСтрокаТЗ.КоличествоЧасовВСекундах);
			ТекСтрокаТЗ.Подача          = уатОбщегоНазначения.уатВремяВЧЧ_ММ(ТекСтрокаТЗ.ПодачаВСекундах);
		КонецЕсли;
	КонецЦикла;
	
	Объект.Выработка.Загрузить(ТЗКонечная);
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент = ТекСтрокаПЛ.Контрагент;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Объект.Выработка Цикл
		ТекСтрока.Количество = ТекСтрока.КоличествоТонн * ТекСтрока.КоличествоЕздок;
		ТекСтрока.Сумма = ТекСтрока.Количество * ТекСтрока.Цена;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВыработкуНачальнымиЗначениями()
	ТЗВыработкаВрем = Объект.Выработка.Выгрузить(,"ПутЛист");
	Объект.Выработка.Загрузить(ТЗВыработкаВрем);
	Для Каждого ТекСтрока из Объект.Выработка Цикл
		ТекСтрока.КоличествоЕздок = 1;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборНоменклатурыУслуги()
	
	ПарамОтбор = Новый ПараметрВыбора("Отбор.ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Услуга);
	мсвОтборы = Новый Массив();
	мсвОтборы.Добавить(ПарамОтбор);
	фиксМсвОтборы = Новый ФиксированныйМассив(мсвОтборы);
	
	Элементы.СтоимостьНоменклатураУслуги.ПараметрыВыбора = фиксМсвОтборы;
	Элементы.ВыработкаНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборОбъектСтроительства()
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		СписКонтрагентов = Новый СписокЗначений;
		СписКонтрагентов.Добавить(Объект.Контрагент);
		СписКонтрагентов.Добавить(ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
		ПарамВыбора = Новый ПараметрВыбора("Отбор.Контрагент", СписКонтрагентов);
		мсв = Новый Массив;
		мсв.Добавить(ПарамВыбора);
		Элементы.ВыработкаОбъектСтроительства.ПараметрыВыбора = Новый ФиксированныйМассив(мсв);
		Элементы.СтоимостьОбъектСтроительства.ПараметрыВыбора = Новый ФиксированныйМассив(мсв);
	Иначе
		Элементы.ВыработкаОбъектСтроительства.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
		Элементы.СтоимостьОбъектСтроительства.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	// Колонки налога показываем только тогда, когда его учитываем.
	Если Элементы.СтоимостьСтавкаНДС.Видимость <> Объект.УчитыватьНДС Тогда
		Элементы.СтоимостьСтавкаНДС.Видимость = Объект.УчитыватьНДС;
	КонецЕсли;
	Если Элементы.СтоимостьСуммаНДС.Видимость <> Объект.УчитыватьНДС Тогда
		Элементы.СтоимостьСуммаНДС.Видимость = Объект.УчитыватьНДС;
	КонецЕсли;
	Если Элементы.СтоимостьВсего.Видимость <> Объект.УчитыватьНДС Тогда
		Элементы.СтоимостьВсего.Видимость = Объект.УчитыватьНДС;
	КонецЕсли;
		
	Элементы.НомерПачки.Видимость = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, 
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ИспользоватьУчетПутЛистовПоПачкам"));
	
	// Сформируем надпись цены и валюты.
	СтруктураНадписи = Новый Структура("ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, 
									| УчитыватьНДС", 
									Объект.ВалютаДокумента, ВалютаРасчетов, Объект.КурсВзаиморасчетов, КурсНациональнаяВалюта, 
									Объект.СуммаВключаетНДС, Объект.УчитыватьНДС);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
КонецПроцедуры

// Функция возвращает текст надписи "Цены и валюта".
//
&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНадписьЦеныИВалюта(СтруктураНадписи)
	
	ТекстНадписи = "";
	
	//// Валюта.
	//Если ЗначениеЗаполнено(СтруктураНадписи.ВалютаДокумента) Тогда
	//	ТекстНадписи = НСтр("ru = 'Валюта: %Валюта%, курс: %Курс%'");
	//	ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Валюта%", СокрЛП(Строка(СтруктураНадписи.ВалютаДокумента)));
	//	ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Курс%", ?((НЕ ЗначениеЗаполнено(СтруктураНадписи.ВалютаРасчетов)) 
	//		ИЛИ СтруктураНадписи.ВалютаДокумента = СтруктураНадписи.ВалютаРасчетов, СокрЛП(Строка(СтруктураНадписи.Курс)), 
	//		СокрЛП(Строка(СтруктураНадписи.КурсНациональнаяВалюта))));
	//Иначе
	//	ТекстНадписи = НСтр("ru = 'Валюта: <нет>'");
	//КонецЕсли;
	//
	//// Налогообложение НДС.
	//Если ПустаяСтрока(ТекстНадписи) Тогда
	//	ТекстНадписи = ТекстНадписи + НСтр("ru = '%НалогообложениеНДС%'");
	//Иначе
	//	ТекстНадписи = ТекстНадписи + НСтр("ru = '; %НалогообложениеНДС%'");
	//КонецЕсли;
	//ТекстНадписи = СтрЗаменить(ТекстНадписи, "%НалогообложениеНДС%", ?(СтруктураНадписи.УчитыватьНДС, "Учитывать НДС",
	//	"Не учитывать НДС"));
	
	// Флаг сумма включает НДС.
	Если СтруктураНадписи.УчитыватьНДС Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%СуммаВключаетНДС%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = '; %СуммаВключаетНДС%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%СуммаВключаетНДС%", ?(СтруктураНадписи.СуммаВключаетНДС, 
			"Сумма вкл. НДС", "Сумма не вкл. НДС"));
	КонецЕсли;
	
	Возврат ТекстНадписи;
	
КонецФункции // СформироватьНадписьЦеныИВалюта()

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения.
// 
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	//СтавкаНДСПоУмолчанию = уатОбщегоНазначенияПовтИсп.ПолучитьСтавкуНДСНоль();
	СтавкаНДСПоУмолчанию = Перечисления.СтавкиНДС.ПустаяСсылка();
	Для каждого СтрокаТабличнойЧасти Из Объект.Стоимость Цикл
		СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
		СтрокаТабличнойЧасти.СуммаНДС = 0;
	КонецЦикла;
	
	Если Объект.УчитыватьНДС Тогда
		Элементы.СтоимостьСтавкаНДС.Видимость = Истина;
		Элементы.СтоимостьСуммаНДС.Видимость  = Истина;
		Элементы.СтоимостьВсего.Видимость     = Истина;
		Для каждого СтрокаТабличнойЧасти Из Объект.Стоимость Цикл
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатураУслуги.СтавкаНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.НоменклатураУслуги.СтавкаНДС;
			КонецЕсли;	
			
			СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			
		КонецЦикла;
										
	Иначе
		Элементы.СтоимостьСтавкаНДС.Видимость = Ложь;
		Элементы.СтоимостьСуммаНДС.Видимость  = Ложь;
		Элементы.СтоимостьВсего.Видимость     = Ложь;
		
	КонецЕсли;	
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач Оповещение, Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь)
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",		  Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",				  Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность",			  Объект.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("Контрагент",			  Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",				  Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация",			  Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",		  Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",	  Ложь);
	СтруктураПараметров.Вставить("ПересчитатьЦены",		  ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",  Ложь);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",      Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НалогообложениеНДС",	  Объект.УчитыватьНДС);
	// Для объедининенного решения с БП 3
	СтруктураПараметров.Вставить("ДокументБезНДС",       НЕ Объект.УчитыватьНДС);
	// Для объедининенного решения с БП 3
	
	// 2. Открываем форму "Цены и Валюта".
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,,
		Новый ОписаниеОповещения("ЦеныИВалютаОбработкаОповещения", ЭтотОбъект,
		Новый Структура("ВалютаРасчетовПередИзменением, Оповещение", ВалютаРасчетовПередИзменением, Оповещение)),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаКлиенте
Процедура ЦеныИВалютаОбработкаОповещения(СтруктураЦеныИВалюта, ДопПараметры) Экспорт
	
	Если ТипЗнч(СтруктураЦеныИВалюта) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	// 3. Перезаполняем табличную часть "Номенклатура", если были внесены изменения в форме "Цены и Валюта".
	
	// Для объедининенного решения с БП 3
	уатОбщегоНазначенияКлиент.ЗаполнитьСтруктуруЦеныИВалютыДляБП3(СтруктураЦеныИВалюта,Объект.ВалютаДокумента,
		ДопПараметры.ВалютаРасчетовПередИзменением,Объект.УчитыватьНДС,Объект.СуммаВключаетНДС);
	// Для объедининенного решения с БП 3
	
	Объект.ВалютаДокумента		   = СтруктураЦеныИВалюта.ВалютаДокумента;
	Объект.КурсВзаиморасчетов	   = СтруктураЦеныИВалюта.КурсРасчетов;
	Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.КратностьРасчетов;
	Объект.СуммаВключаетНДС		   = СтруктураЦеныИВалюта.СуммаВключаетНДС;
	Объект.УчитыватьНДС			   = СтруктураЦеныИВалюта.НалогообложениеНДС;
	
	// Пересчитываем сумму если изменился признак Налогообложение НДС.
	Если СтруктураЦеныИВалюта.НалогообложениеНДС <> СтруктураЦеныИВалюта.ПредНалогообложениеНДС Тогда
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();		
	КонецЕсли;
	
	// Пересчитываем цены по валюте.
	Если СтруктураЦеныИВалюта.ПересчитатьЦены Тогда	
		уатОбщегоНазначенияКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтаФорма, ДопПараметры.ВалютаРасчетовПередИзменением, 
		"Стоимость");
	КонецЕсли;
	
	// Пересчитываем сумму если изменился признак "Сумма включает НДС".
	Если СтруктураЦеныИВалюта.СуммаВключаетНДС <> СтруктураЦеныИВалюта.ПредСуммаВключаетНДС Тогда
		уатОбщегоНазначенияКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтаФорма, "Стоимость");
	КонецЕсли;
	
	// Сформируем надпись цены и валюты.
	СтруктураНадписи = Новый Структура;
	СтруктураНадписи.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураНадписи.Вставить("ВалютаРасчетов", ВалютаРасчетов);
	СтруктураНадписи.Вставить("Курс", Объект.КурсВзаиморасчетов);
	СтруктураНадписи.Вставить("КурсНациональнаяВалюта", КурсНациональнаяВалюта);
	СтруктураНадписи.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураНадписи.Вставить("УчитыватьНДС", Объект.УчитыватьНДС);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	ОбновитьИтоги();
	
	ОбновитьВсегоВТЧСтоимость();
	Модифицированность = Истина;
	
	Если Не ДопПараметры.Оповещение = Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ДопПараметры.Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Команда)
	
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Новый ОписаниеОповещения("РедактироватьЦеныИВалютуЗавершение", ЭтотОбъект), Объект.ВалютаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЦеныИВалютуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьВсегоВТЧСтоимость();
	ОбновитьИтоги();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти)
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсегоВТЧСтоимость()
	Для Каждого СтрокаТабличнойЧасти Из Объект.Стоимость Цикл
		РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьВсегоВТЧСервер()
	Для Каждого СтрокаТабличнойЧасти Из Объект.Стоимость Цикл
		СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура РасчетСтоимостьСервер()
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.РассчитатьСтоимостьУслуг();
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСписокВыбораПЛ()
	Элементы.СтоимостьПутЛист.СписокВыбора.Очистить();
	
	Для Каждого ТекСтрока Из Объект.Выработка Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ПутЛист) И
			Элементы.СтоимостьПутЛист.СписокВыбора.НайтиПоЗначению(ТекСтрока.ПутЛист) = Неопределено Тогда
			
			Элементы.СтоимостьПутЛист.СписокВыбора.Добавить(ТекСтрока.ПутЛист);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Процедура рассчитывает сумму в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

// Рассчитывается сумма НДС в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	
	СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	
КонецПроцедуры // РассчитатьСуммуНДС()

&НаКлиенте
Процедура ЗаполнитьПоВыбранномуПЛЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ПутЛист = ДополнительныеПараметры.ПутЛист;
        
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Отмена Тогда
        Возврат;
    ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
        Объект.Выработка.Очистить();
    КонецЕсли;
    
    ЗаполнитьВыработкуПоПЛ(ПутЛист);

КонецПроцедуры

&НаКлиенте
Процедура ОтпускРазрешилАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ОтпускРазрешилОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ОтпускПроизвелАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ОтпускПроизвелОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыРедактированияСпецРабот(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Или ДополнительныеПараметры = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РезультатЗакрытия.Свойство("СпецРабота1", ДополнительныеПараметры.СпецРабота1);
	РезультатЗакрытия.Свойство("СпецРабота2", ДополнительныеПараметры.СпецРабота2);
	РезультатЗакрытия.Свойство("СпецРабота3", ДополнительныеПараметры.СпецРабота3);
	РезультатЗакрытия.Свойство("СпецРабота4", ДополнительныеПараметры.СпецРабота4);
	РезультатЗакрытия.Свойство("СпецРабота5", ДополнительныеПараметры.СпецРабота5);
	РезультатЗакрытия.Свойство("КоличествоСпецРаботы1", ДополнительныеПараметры.КоличествоСпецРаботы1);
	РезультатЗакрытия.Свойство("КоличествоСпецРаботы2", ДополнительныеПараметры.КоличествоСпецРаботы2);
	РезультатЗакрытия.Свойство("КоличествоСпецРаботы3", ДополнительныеПараметры.КоличествоСпецРаботы3);
	РезультатЗакрытия.Свойство("КоличествоСпецРаботы4", ДополнительныеПараметры.КоличествоСпецРаботы4);
	РезультатЗакрытия.Свойство("КоличествоСпецРаботы5", ДополнительныеПараметры.КоличествоСпецРаботы5);
	
	ОбновитьНадписьСпецРабот();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписьСпецРабот()
	
	Для Каждого ТекСтрока Из Объект.Выработка Цикл 
		ТекСтрока.НадписьСпецРаботы = "";
		Если ЗначениеЗаполнено(ТекСтрока.СпецРабота1) И ЗначениеЗаполнено(ТекСтрока.КоличествоСпецРаботы1) Тогда 
			ТекСтрока.НадписьСпецРаботы = 
				ТекСтрока.НадписьСпецРаботы 
				+ ?(ТекСтрока.НадписьСпецРаботы = "", "", " / ") 
				+ Строка(?(ТекСтрока.СпецРабота1.Временный, Формат(уатОбщегоНазначения.уатВремяВЧЧ_ММ(ТекСтрока.КоличествоСпецРаботы1), "ЧДЦ=2; ЧРД=:; ЧГ="), ТекСтрока.КоличествоСпецРаботы1));
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрока.СпецРабота2) И ЗначениеЗаполнено(ТекСтрока.КоличествоСпецРаботы2) Тогда 
			ТекСтрока.НадписьСпецРаботы = 
				ТекСтрока.НадписьСпецРаботы 
				+ ?(ТекСтрока.НадписьСпецРаботы = "", "", " / ") 
				+ Строка(?(ТекСтрока.СпецРабота2.Временный, Формат(уатОбщегоНазначения.уатВремяВЧЧ_ММ(ТекСтрока.КоличествоСпецРаботы2), "ЧДЦ=2; ЧРД=:; ЧГ="), ТекСтрока.КоличествоСпецРаботы2));
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрока.СпецРабота3) И ЗначениеЗаполнено(ТекСтрока.КоличествоСпецРаботы3) Тогда 
			ТекСтрока.НадписьСпецРаботы = 
				ТекСтрока.НадписьСпецРаботы 
				+ ?(ТекСтрока.НадписьСпецРаботы = "", "", " / ") 
				+ Строка(?(ТекСтрока.СпецРабота3.Временный, Формат(уатОбщегоНазначения.уатВремяВЧЧ_ММ(ТекСтрока.КоличествоСпецРаботы3), "ЧДЦ=2; ЧРД=:; ЧГ="), ТекСтрока.КоличествоСпецРаботы3));
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрока.СпецРабота4) И ЗначениеЗаполнено(ТекСтрока.КоличествоСпецРаботы4) Тогда 
			ТекСтрока.НадписьСпецРаботы = 
				ТекСтрока.НадписьСпецРаботы 
				+ ?(ТекСтрока.НадписьСпецРаботы = "", "", " / ") 
				+ Строка(?(ТекСтрока.СпецРабота4.Временный, Формат(уатОбщегоНазначения.уатВремяВЧЧ_ММ(ТекСтрока.КоличествоСпецРаботы4), "ЧДЦ=2; ЧРД=:; ЧГ="), ТекСтрока.КоличествоСпецРаботы4));
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрока.СпецРабота5) И ЗначениеЗаполнено(ТекСтрока.КоличествоСпецРаботы5) Тогда 
			ТекСтрока.НадписьСпецРаботы = 
				ТекСтрока.НадписьСпецРаботы 
				+ ?(ТекСтрока.НадписьСпецРаботы = "", "", " / ") 
				+ Строка(?(ТекСтрока.СпецРабота5.Временный, Формат(уатОбщегоНазначения.уатВремяВЧЧ_ММ(ТекСтрока.КоличествоСпецРаботы5), "ЧДЦ=2; ЧРД=:; ЧГ="), ТекСтрока.КоличествоСпецРаботы5));
		КонецЕсли;
		Если ТекСтрока.НадписьСпецРаботы = "" Тогда 
			ТекСтрока.НадписьСпецРаботы = "Редактировать";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
