#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.уатПолучателиУслуг.Контрагент) КАК ПолучательУслуг,
	|	уатТТДСтоимость.Ссылка.Дата КАК Период,
	|	уатТТДСтоимость.Ссылка.Ссылка КАК Регистратор,
	|	уатТТДСтоимость.Ссылка.Организация КАК Организация,
	|	уатТТДСтоимость.Ссылка.Контрагент КАК Контрагент,
	|	уатТТДСтоимость.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	уатТТДСтоимость.ПутЛист,
	|	уатТТДСтоимость.ПутЛист.ТранспортноеСредство КАК ТС,
	|	уатТТДСтоимость.ПараметрВыработки,
	|	уатТТДСтоимость.Номенклатура,
	|	уатТТДСтоимость.НоменклатураУслуги,
	|	уатТТДСтоимость.Маршрут,
	|	уатТТДСтоимость.ОбъектСтроительства,
	|	уатТТДСтоимость.ВидПеревозки,
	|	уатТТДСтоимость.Количество,
	|	уатТТДСтоимость.Сумма,
	|	0 КАК СуммаУпр,
	|	уатТТДСтоимость.СуммаНДС,
	|	уатТТДСтоимость.Сумма КАК СуммаВзаиморасчетов,
	|	уатТТДСтоимость.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА уатТТДСтоимость.ПараметрВыработки.Временный
	|			ТОГДА уатТТДСтоимость.КоличествоПараметрВыработки * 3600
	|		ИНАЧЕ уатТТДСтоимость.КоличествоПараметрВыработки
	|	КОНЕЦ КАК КоличествоПараметрВыработки
	|ИЗ
	|	Документ.уатТТД.Стоимость КАК уатТТДСтоимость
	|ГДЕ
	|	уатТТДСтоимость.Ссылка = &Ссылка";
	мЗапрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	ТабДанных = мЗапрос.Выполнить().Выгрузить();
	
	СтруктураКурсаДокумента = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ДокументСсылка.ВалютаДокумента,ДокументСсылка.Дата);
	Для Каждого ТекСтрока ИЗ ТабДанных Цикл
		СуммаВсего = ТекСтрока.Сумма + ?(ДокументСсылка.СуммаВключаетНДС, 0, ТекСтрока.СуммаНДС);		
		ТекСтрока.СуммаНДС  = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДС, ДокументСсылка.ВалютаДокумента,
								СтруктураДополнительныеСвойства.ВалютаРеглУчета,
								СтруктураКурсаДокумента.Курс, 
								1,
								СтруктураКурсаДокумента.Кратность, 
								1);
								
		ТекСтрока.СуммаВзаиморасчетов = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СуммаВсего, ДокументСсылка.ВалютаДокумента,
								ДокументСсылка.ДоговорКонтрагента.ВалютаВзаиморасчетов,
								СтруктураКурсаДокумента.Курс, 
								ДокументСсылка.КурсВзаиморасчетов,
								СтруктураКурсаДокумента.Кратность, 
								ДокументСсылка.КратностьВзаиморасчетов);
								
		Если СтруктураДополнительныеСвойства.Свойство("ВалютаУпрУчета") тогда
			ТекСтрока.СуммаУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СуммаВсего, ДокументСсылка.ВалютаДокумента,
								СтруктураДополнительныеСвойства.ВалютаУпрУчета, 
								СтруктураКурсаДокумента.Курс, 
								СтруктураДополнительныеСвойства.КурсУпр,
								СтруктураКурсаДокумента.Кратность,  
								СтруктураДополнительныеСвойства.КратностьУпр);
		Иначе
			ТекСтрока.СуммаУпр = 0;								
		КонецЕсли;	

		ТекСтрока.Сумма =  уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СуммаВсего, ДокументСсылка.ВалютаДокумента,
								СтруктураДополнительныеСвойства.ВалютаРеглУчета,
								СтруктураКурсаДокумента.Курс, 
								1,
								СтруктураКурсаДокумента.Кратность, 
								1); 

	КонецЦикла;
							
	ТабДанных.Колонки.Удалить("ПолучательУслуг");
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВыработкиПоСтоимости", ТабДанных);
	
КонецПроцедуры 

// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	Заглушка = Истина;
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатТТД";
	КомандаПечати.Идентификатор = "ПечатьВесьДокумент";
	КомандаПечати.Представление = НСтр("ru = 'Печать весь документ'");
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатТТД";
	КомандаПечати.Идентификатор = "ПечататьЛицСторону";
	КомандаПечати.Представление = НСтр("ru = 'Печатать лиц. сторону'");
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатТТД";
	КомандаПечати.Идентификатор = "ПечататьОбрСторону";
	КомандаПечати.Представление = НСтр("ru = 'Печатать обр. сторону'");
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатТТД";
	КомандаПечати.Идентификатор = "ТранспортнаяНакладная";
	КомандаПечати.Представление = НСтр("ru = 'Транспортная накладная'");
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатТТД";
	КомандаПечати.Идентификатор = "БланкиТТН";
	КомандаПечати.Представление = НСтр("ru = 'Бланки ТТН'");
	КомандаПечати.Обработчик = "уатОбщегоНазначенияКлиент.ПечатьБланкиТТН";
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатТТД";
	КомандаПечати.Идентификатор = "ЭСМ7";
	КомандаПечати.Представление = НСтр("ru = 'ЭСМ-7'");
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатТТД";
	КомандаПечати.Идентификатор = "ЗаказНаряд";
	КомандаПечати.Представление = НСтр("ru = 'Заказ-наряд'");
	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если НЕ уатОбщегоНазначенияСервер.РазрешениеПечатиНепроведенногоДокумента(МассивОбъектов) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьВесьДокумент") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПечатьВесьДокумент", "Печать весь документ", ПечатьТТН(МассивОбъектов, ОбъектыПечати, 0));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечататьЛицСторону") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПечататьЛицСторону", "Печатать лиц. сторону", ПечатьТТН(МассивОбъектов, ОбъектыПечати, 1));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечататьОбрСторону") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПечататьОбрСторону", "Печатать обр. сторону", ПечатьТТН(МассивОбъектов, ОбъектыПечати, 2));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТранспортнаяНакладная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТранспортнаяНакладная", "Транспортная накладная", ПечатьТранспортнаяНакладная(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭСМ7") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЭСМ7", "ЭСМ 7", ПечатьЭСМ7(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаказНаряд") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЗаказНаряд", "Заказ-наряд", ПечатьЗаказНаряда(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.УстановитьРедактированиеПечатныхФормДокумента(КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПечатьТТН(МассивОбъектов, ОбъектыПечати, ФлагПечати = 0)
	Перем мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ТТД";
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	мМаксСтрок = 18;
	мДлинаСтрокиГрузополучателяПодСреднийШрифт   = 135;
	мДлинаСтрокиГрузополучателяПодМаленькийШрифт = 190;
	мДлинаСтрокиНаименованияВТаблицеПодСреднийШрифт   = 30;
	мДлинаСтрокиНаименованияВТаблицеПодМаленькийШрифт = 40;
	мДлинаСтрокиПредставлениеОрганизацииПодСреднийШрифт   = 60;
	мДлинаСтрокиПредставлениеОрганизацииПодМаленькийШрифт = 85;
	СреднийШрифт   = Новый Шрифт("Arial", 6);
	МаленькийШрифт = Новый Шрифт("Arial", 4);
	
	ПервыйДокумент = Истина;
	
	ИспользуетсяПользовательскийМакет = уатОбщегоНазначенияТиповыеСервер.ИспользуетсяПользовательскийМакетПечатнойФормы("Документ.уатТТД.ПФ_MXL_ТТН");
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТТД_ТТН";
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатТТД.ПФ_MXL_ТТН");
		
		//печатаем лицевую сторону
		Если ФлагПечати <> 2 Тогда
			Обл   = Макет.ПолучитьОбласть("Лицевая");
			
			Обл.Параметры.НомерТТН = уатОбщегоНазначенияТиповые.уатПолучитьНомерНаПечать(ТекущийДокумент);
			Обл.Параметры.ДеньДок  = День(ТекущийДокумент.Дата);
			Обл.Параметры.МесяцДок = Месяц(ТекущийДокумент.Дата);
			Обл.Параметры.ГодДок   = Год(ТекущийДокумент.Дата);
			
			ГрузополучательПредставление  = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Грузополучатель, ТекущийДокумент.Дата));
			ГрузоотправительПредставление = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Грузоотправитель, ТекущийДокумент.Дата));
			ПлательщикПредставление       = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Контрагент, ТекущийДокумент.Дата));
			
			ДлинаСтрокиГрузоотправитель = СтрДлина(ГрузоотправительПредставление);
			ДлинаСтрокиГрузополучатель  = СтрДлина(ГрузополучательПредставление);
			ДлинаСтрокиПлательщик       = СтрДлина(ПлательщикПредставление);
			
			Если Не ИспользуетсяПользовательскийМакет Тогда 
				// проверим, вместятся ли строки и уменьшим шрифт
				Если ДлинаСтрокиГрузоотправитель > мДлинаСтрокиГрузополучателяПодМаленькийШрифт Тогда
					Обл.Область("R8C6:R8C37").Шрифт = МаленькийШрифт;
				ИначеЕсли ДлинаСтрокиГрузоотправитель > мДлинаСтрокиГрузополучателяПодСреднийШрифт Тогда
					Обл.Область("R8C6:R8C37").Шрифт = СреднийШрифт;
				КонецЕсли;
				
				Если ДлинаСтрокиГрузополучатель > мДлинаСтрокиГрузополучателяПодМаленькийШрифт Тогда
					Обл.Область("R10C6:R10C37").Шрифт = МаленькийШрифт;
				ИначеЕсли ДлинаСтрокиГрузополучатель > мДлинаСтрокиГрузополучателяПодСреднийШрифт Тогда
					Обл.Область("R10C6:R10C37").Шрифт = СреднийШрифт;
				КонецЕсли;
				
				Если ДлинаСтрокиПлательщик > мДлинаСтрокиГрузополучателяПодМаленькийШрифт Тогда
					Обл.Область("R12C5:R12C37").Шрифт = МаленькийШрифт;
				ИначеЕсли ДлинаСтрокиПлательщик > мДлинаСтрокиГрузополучателяПодСреднийШрифт Тогда
					Обл.Область("R12C5:R12C37").Шрифт = СреднийШрифт;
				КонецЕсли;
			КонецЕсли;
			
			Обл.Параметры.Грузополучатель = ТекущийДокумент.Грузополучатель;
			Обл.Параметры.ГрузополучательПредставление = ГрузополучательПредставление;
			Обл.Параметры.ГрузополучательОКПО = ?(НЕ ЗначениеЗаполнено(ТекущийДокумент.Грузополучатель), "", ТекущийДокумент.Грузополучатель.КодПоОКПО);
			
			Обл.Параметры.Грузоотправитель = ТекущийДокумент.Грузоотправитель;
			Обл.Параметры.ГрузоотправительПредставление = ГрузоотправительПредставление;
			Обл.Параметры.ГрузоотправительОКПО = ?(НЕ ЗначениеЗаполнено(ТекущийДокумент.Грузоотправитель), "", ТекущийДокумент.Грузоотправитель.КодПоОКПО);
			
			Обл.Параметры.Плательщик = ТекущийДокумент.Контрагент;			
			Обл.Параметры.ПлательщикПредставление = ПлательщикПредставление;
			Обл.Параметры.ПлательщикОКПО = ?(НЕ ЗначениеЗаполнено(ТекущийДокумент.Контрагент), "", ТекущийДокумент.Контрагент.КодПоОКПО);
			
			УменьшитьШрифтВТаблицеНаМаленький = Ложь;
			УменьшитьШрифтВТаблицеНаСредний = Ложь;
			КоличествоМест	  = 0;
			КоличествоТонн	  = 0;
			ВсегоНаименований = 0;
			Для Каждого ТекСтр Из ТекущийДокумент.Выработка Цикл
				Если ТекСтр.НомерСтроки < 9 Тогда
					Если ЗначениеЗаполнено(ТекСтр.Номенклатура) Тогда
						// проверим, вместятся ли строки
						ДлинаСтрокиНоменклатура = СтрДлина(ТекСтр.Номенклатура);
						Если ДлинаСтрокиНоменклатура > мДлинаСтрокиНаименованияВТаблицеПодМаленькийШрифт Тогда 
							УменьшитьШрифтВТаблицеНаМаленький = Истина;
						ИначеЕсли ДлинаСтрокиНоменклатура > мДлинаСтрокиНаименованияВТаблицеПодСреднийШрифт Тогда 
							УменьшитьШрифтВТаблицеНаСредний = Истина;
						КонецЕсли;
						
						Обл.Параметры["Код" + Строка(ТекСтр.НомерСтроки)] = ТекСтр.Номенклатура.Код;
						Обл.Параметры["Цена" + Строка(ТекСтр.НомерСтроки)] = ТекСтр.Цена;
						Обл.Параметры["Груз" + Строка(ТекСтр.НомерСтроки)] = ТекСтр.Номенклатура;
						Обл.Параметры["ВидУпаковки" + Строка(ТекСтр.НомерСтроки)] = ТекСтр.ВидУпаковки;
						Обл.Параметры["КоличествоМест" + Строка(ТекСтр.НомерСтроки)] = ТекСтр.КоличествоМест;
						Обл.Параметры["Сумма" + Строка(ТекСтр.НомерСтроки)] = ТекСтр.Сумма;
						Обл.Параметры["Масса" + Строка(ТекСтр.НомерСтроки)] = Формат(ТекСтр.КоличествоТонн*?(ТекСтр.КоличествоЕздок=0,1,ТекСтр.КоличествоЕздок), "ЧЦ=10; ЧДЦ=3");
						
						Если ЗначениеЗаполнено(ТекСтр.ЕдиницаИзмерения) Тогда 
							Обл.Параметры["ЕдИзм" + Строка(ТекСтр.НомерСтроки)] = ТекСтр.ЕдиницаИзмерения;
						Иначе 
							Обл.Параметры["ЕдИзм" + Строка(ТекСтр.НомерСтроки)] = ТекСтр.Номенклатура.ЕдиницаИзмерения;
						КонецЕсли;
						
						ВсегоНаименований = ВсегоНаименований + 1;
						КоличествоМест	  = КоличествоМест + ТекСтр.КоличествоМест;
						КоличествоТонн	  = КоличествоТонн + ТекСтр.КоличествоТонн*?(ТекСтр.КоличествоЕздок=0,1,ТекСтр.КоличествоЕздок);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если Не ИспользуетсяПользовательскийМакет Тогда 
				Если УменьшитьШрифтВТаблицеНаМаленький Тогда
					Обл.Область("R17:R24").Шрифт = МаленькийШрифт;
				ИначеЕсли УменьшитьШрифтВТаблицеНаСредний Тогда
					Обл.Область("R17:R24").Шрифт = СреднийШрифт;
				КонецЕсли;
			КонецЕсли;
			
			ПарПредмета = "штука, штуки, штук, ж, , , , , 0";
			Обл.Параметры.ВсегоНаименований = ?(ЗначениеЗаполнено(ВсегоНаименований), ЧислоПрописью(ВсегоНаименований, "Л = ru_RU", ПарПредмета), "");
			
			ПарПредмета = "место, места, мест, с, , , , , 0";
			Обл.Параметры.ВсегоМест = ?(ЗначениеЗаполнено(КоличествоМест), ЧислоПрописью(КоличествоМест, "Л = ru_RU", ПарПредмета), "");
			
			ПарПредмета = "тонна, тонны, тонн, ж, кг, кг, кг, м, 3";
			Обл.Параметры.МассаГрузаБруттоПрописью = ?(ЗначениеЗаполнено(КоличествоТонн), ЧислоПрописью(КоличествоТонн, "Л = ru_RU", ПарПредмета), "");
			
			Обл.Параметры.МассаГрузаБрутто = КоличествоТонн;
			
			СведенияОтпускРазрешил = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(ТекущийДокумент.ОтпускРазрешил, ТекущаяДата(),, ТекущийДокумент.Организация);
			Обл.Параметры.ОтпускРазрешил = ?(СведенияОтпускРазрешил = Неопределено, Ложь, СведенияОтпускРазрешил.Должность);
			Обл.Параметры.ОтпускРазрешилФИО = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.ОтпускРазрешил);
			
			СведенияОтпускПроизвел = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(ТекущийДокумент.ОтпускПроизвел, ТекущаяДата(),, ТекущийДокумент.Организация);
			Обл.Параметры.ОтпускПроизвел = ?(СведенияОтпускПроизвел = Неопределено, Ложь, СведенияОтпускПроизвел.Должность);
			Обл.Параметры.ОтпускПроизвелФИО = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.ОтпускПроизвел);
			
			ТабличныйДокумент.Вывести(Обл);
		КонецЕсли;
		
		Если ФлагПечати = 0 Тогда	//Новая страница для печати полного док.
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		//печатаем обратную сторону
		Если ФлагПечати <> 1 Тогда
			
			Обл   = Макет.ПолучитьОбласть("Оборотная");
			ФорматДаты      = "ДФ='дд ММММ гггг'";
			Обл.Параметры.НомерТТН 	= уатОбщегоНазначенияТиповые.уатПолучитьНомерНаПечать(ТекущийДокумент);
			Обл.Параметры.ДатаТТН	= Формат(ТекущийДокумент.Дата, ФорматДаты);
			
			ОрганизацияПредставление = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(
				уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Организация, ТекущийДокумент.Дата), "ПолноеНаименование, ЮридическийАдрес, Телефоны");
			ДлинаСтрокиОрганизация = СтрДлина(ОрганизацияПредставление);
			
			Если Не ИспользуетсяПользовательскийМакет Тогда 
				Если ДлинаСтрокиОрганизация > мДлинаСтрокиПредставлениеОрганизацииПодМаленькийШрифт Тогда
					Обл.Область("R5C5:R5C20").Шрифт = МаленькийШрифт;
				ИначеЕсли ДлинаСтрокиОрганизация > мДлинаСтрокиПредставлениеОрганизацииПодСреднийШрифт Тогда
					Обл.Область("R5C5:R5C20").Шрифт = СреднийШрифт;
				КонецЕсли;
			КонецЕсли;
			
			Обл.Параметры.НазваниеОрганизации = ОрганизацияПредставление;
			Обл.Параметры.Организация = ТекущийДокумент.Ссылка.Организация;
			
			Обл.Параметры.ВидПеревозки = ТекущийДокумент.ВидПеревозки;
			
			Для каждого ТекСтр из ТекущийДокумент.Выработка Цикл
				Если ЗначениеЗаполнено(ТекСтр.ПутЛист) Тогда
					Обл.Параметры.НомерПЛ 	= ТекСтр.ПутЛист.Номер;
					Обл.Параметры.Марка  	= ТекСтр.ПутЛист.ТранспортноеСредство.уатМодель;
					Обл.Параметры.ГосНомер	= ТекСтр.ПутЛист.ТранспортноеСредство.Код;
					
					ПлательщикПредставление	= уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Контрагент, ТекущийДокумент.Дата));					
					ДлинаСтрокиПлательщик = СтрДлина(ПлательщикПредставление);
					
					Если Не ИспользуетсяПользовательскийМакет Тогда 
						Если ДлинаСтрокиПлательщик > мДлинаСтрокиГрузополучателяПодМаленькийШрифт Тогда
							Обл.Область("R7C8:R7C41").Шрифт = МаленькийШрифт;
						ИначеЕсли ДлинаСтрокиПлательщик > мДлинаСтрокиГрузополучателяПодСреднийШрифт Тогда
							Обл.Область("R7C8:R7C41").Шрифт = СреднийШрифт;
						КонецЕсли;
					КонецЕсли;
					
					Обл.Параметры.Плательщик = ПлательщикПредставление;
					
					Водитель = уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ТекСтр.ПутЛист.Водитель1, ТекущийДокумент.Дата);
					Обл.Параметры.Водители = Водитель;
					
					уатОбщегоНазначения.уатУдостоверениеВодителя(ТекСтр.ПутЛист.Водитель1, мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория);	
					Обл.Параметры.Удостоверения = ?(СокрЛП(мВодительскоеУдСерия)="","",СокрЛП(мВодительскоеУдСерия) + " ") + мВодительскоеУдНомер;
					
					Обл.Параметры.ЛицензионнаяКарточка  	= ТекСтр.ПутЛист.ТранспортноеСредство.ЛицензионнаяКарточкаРегистрационныйНомер;
					Обл.Параметры.НомерЛицензионнойКарточки = ТекСтр.ПутЛист.ТранспортноеСредство.ЛицензионнаяКарточкаНомер;
					Обл.Параметры.СерияЛицензионнойКарточки = ТекСтр.ПутЛист.ТранспортноеСредство.ЛицензионнаяКарточкаСерия;
					Обл.Параметры.ПунктПогрузки	 = ?(ТипЗнч(ТекущийДокумент.АдресОтправления) = Тип("СправочникСсылка.уатПунктыНазначения"),
						?(ЗначениеЗаполнено(ТекущийДокумент.АдресОтправления.Адрес), ТекущийДокумент.АдресОтправления.Адрес, ТекущийДокумент.АдресОтправления), ТекущийДокумент.АдресОтправления);
					Обл.Параметры.ПунктРазгрузки = ?(ТипЗнч(ТекущийДокумент.АдресДоставки)    = Тип("СправочникСсылка.уатПунктыНазначения"),
						?(ЗначениеЗаполнено(ТекущийДокумент.АдресДоставки.Адрес)   , ТекущийДокумент.АдресДоставки.Адрес   , ТекущийДокумент.АдресДоставки)   , ТекущийДокумент.АдресДоставки);
					Обл.Параметры.Переадресовка	 = ?(ТипЗнч(ТекущийДокумент.Переадресовка)    = Тип("СправочникСсылка.уатПунктыНазначения"),
						?(ЗначениеЗаполнено(ТекущийДокумент.Переадресовка.Адрес)   , ТекущийДокумент.Переадресовка.Адрес   , ТекущийДокумент.Переадресовка)   , ТекущийДокумент.Переадресовка);
					НН = 0;                               
					Для каждого ТекСтрПриц из ТекСтр.ПутЛист.Прицепы Цикл
						Если ЗначениеЗаполнено(ТекСтрПриц.ТС) Тогда
							Если ЗначениеЗаполнено(ТекСтрПриц.ТС.уатМодель) Тогда
								Если ЗначениеЗаполнено(ТекСтрПриц.ТС.Тип) Тогда
									Если ТекСтрПриц.ТС.Тип.уатВидТС = Перечисления.уатВидыТС.Полуприцеп
										или ТекСтрПриц.ТС.Тип.уатВидТС = Перечисления.уатВидыТС.Прицеп
										или ТекСтрПриц.ТС.Тип.уатВидТС = Перечисления.уатВидыТС.ПрицепСамосвал Тогда
										
										Если НН < 2 Тогда
											НН = НН + 1;
											Обл.Параметры["МаркаПрицеп" + Строка(НН)]  		= ТекСтрПриц.ТС.уатМодель;
											Обл.Параметры["ГосНомерПрицеп" + Строка(НН)]	= ТекСтрПриц.ТС.Код;
											Обл.Параметры["ГарНомПрицеп" + Строка(НН)]		= ТекСтрПриц.ТС.уатГаражныйНомер;
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Прервать;
			КонецЦикла;
			УменьшитьШрифтВТаблицеНаМаленький = Ложь;
			УменьшитьШрифтВТаблицеНаСредний = Ложь;
			ВсегоНаименований = 0;
			КоличествоЕздок	  = 0;
			КоличествоТонн	  = 0;
			Для каждого ТекСтр из ТекущийДокумент.Выработка Цикл
				Если ТекСтр.НомерСтроки < 4 Тогда
					Если ЗначениеЗаполнено(ТекСтр.Номенклатура) Тогда
						// проверим, вместятся ли строки
						ДлинаСтрокиНоменклатура = СтрДлина(ТекСтр.Номенклатура);
						Если ДлинаСтрокиНоменклатура > мДлинаСтрокиНаименованияВТаблицеПодМаленькийШрифт Тогда 
							УменьшитьШрифтВТаблицеНаМаленький = Истина;
						ИначеЕсли ДлинаСтрокиНоменклатура > мДлинаСтрокиНаименованияВТаблицеПодСреднийШрифт Тогда 
							УменьшитьШрифтВТаблицеНаСредний = Истина;
						КонецЕсли;
						
						Обл.Параметры["КодГруза" + Строка(ТекСтр.НомерСтроки)] 		= ТекСтр.Номенклатура.Код;
						Обл.Параметры["Груз" + Строка(ТекСтр.НомерСтроки)] 			= ТекСтр.Номенклатура;
						Обл.Параметры["ВидУпаковки" + Строка(ТекСтр.НомерСтроки)] 	= ТекСтр.ВидУпаковки;
						Обл.Параметры["КоличествоМест" + Строка(ТекСтр.НомерСтроки)]= ТекСтр.КоличествоМест;
						Обл.Параметры["СОМ" + Строка(ТекСтр.НомерСтроки)] 			= ТекСтр.СпособОпределенияМассы;
						Обл.Параметры["Масса" + Строка(ТекСтр.НомерСтроки)] = Формат(ТекСтр.КоличествоТонн*?(ТекСтр.КоличествоЕздок=0,1,ТекСтр.КоличествоЕздок), "ЧЦ=10; ЧДЦ=3");
						
						ВсегоНаименований = ВсегоНаименований + 1;
						КоличествоТонн	  = КоличествоТонн  + ТекСтр.КоличествоТонн*?(ТекСтр.КоличествоЕздок=0,1,ТекСтр.КоличествоЕздок);
						КоличествоЕздок	  = КоличествоЕздок + ТекСтр.КоличествоЕздок;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если Не ИспользуетсяПользовательскийМакет Тогда 
				Если УменьшитьШрифтВТаблицеНаМаленький Тогда
					Обл.Область("R24:R26").Шрифт = МаленькийШрифт;
				ИначеЕсли УменьшитьШрифтВТаблицеНаСредний Тогда
					Обл.Область("R24:R26").Шрифт = СреднийШрифт;
				КонецЕсли;
			КонецЕсли;
			
			Обл.Параметры.КолвоЕздок = КоличествоЕздок;
			Обл.Параметры.МассаВсего = КоличествоТонн;
			
			ПарПредмета = "тонна, тонны, тонн, ж, кг, кг, кг, м, 3";
			Обл.Параметры.МассаБруттоПрописью = ?(ЗначениеЗаполнено(КоличествоТонн), ЧислоПрописью(КоличествоТонн, "Л = ru_RU", ПарПредмета), "");
			Обл.Параметры.МассаБрутто = ?(ЗначениеЗаполнено(КоличествоТонн), ЧислоПрописью(КоличествоТонн, "Л = ru_RU", ПарПредмета), "");
			
			ТабличныйДокумент.Вывести(Обл);
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

Функция ПечатьТранспортнаяНакладная(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ТТД";
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ПервыйДокумент = Истина;
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТТД";
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатТТД.ПФ_MXL_ТранспортнаяНакладная");
		
		ВыработкаЗаполнена = Ложь;
		Если ТекущийДокумент.Выработка.Количество() Тогда
			ВыработкаЗаполнена = Истина;
			ПутЛист = ТекущийДокумент.Выработка[0].ПутЛист;
		КонецЕсли;
		
		ОбластьЛицевая = Макет.ПолучитьОбласть("Лицевая");
		ОбластьОборотная = Макет.ПолучитьОбласть("Оборотная");
		
		// лицевая
		ОбластьЛицевая.Параметры.НомерТТН = уатОбщегоНазначенияТиповые.уатПолучитьНомерНаПечать(ТекущийДокумент);
		ОбластьЛицевая.Параметры.Дата = ТекущийДокумент.Дата;
		
		МассивСтрок = Новый Массив;
		
		мГрузополучатель = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Грузополучатель, ТекущийДокумент.Дата), "ПолноеНаименование, ЮридическийАдрес");
		МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(мГрузополучатель, 42);
		ОбластьЛицевая.Параметры.ГрузополучательПредставление1 = МассивСтрок[0];
		Если МассивСтрок.Количество() > 1 Тогда
			ОбластьЛицевая.Параметры.ГрузополучательПредставление2 = МассивСтрок[1];
		КонецЕсли;
		ГрузополучательТелефон = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Грузополучатель, ТекущийДокумент.Дата), "Телефоны");
		ОбластьЛицевая.Параметры.ГрузополучательПредставление3 = ГрузополучательТелефон;
		
		мГрузоотправитель = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Грузоотправитель, ТекущийДокумент.Дата), "ПолноеНаименование, ЮридическийАдрес");
		МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(мГрузоотправитель, 42);
		ОбластьЛицевая.Параметры.ГрузоотправительПредставление1 = МассивСтрок[0];
		Если МассивСтрок.Количество() > 1 Тогда
			ОбластьЛицевая.Параметры.ГрузоотправительПредставление2 = МассивСтрок[1];
		КонецЕсли;
		ГрузоотправительТелефон = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Грузоотправитель, ТекущийДокумент.Дата), "Телефоны");
		ОбластьЛицевая.Параметры.ГрузоотправительПредставление3 = ГрузоотправительТелефон;
		
		СтрокаГруза = "";
		Для Каждого СтрокаТаблицы Из ТекущийДокумент.Выработка Цикл
			СтрокаГруза = СтрокаГруза + СтрокаТаблицы.Номенклатура.Наименование;
			Если ЗначениеЗаполнено(СтрокаТаблицы.ВидУпаковки) Тогда
				СтрокаГруза = СтрокаГруза + ", " + СтрокаТаблицы.ВидУпаковки;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицы.КоличествоМест) Тогда
				СтрокаГруза = СтрокаГруза + ", " + Строка(СтрокаТаблицы.КоличествоМест) + " мест";
				Если СтрокаТаблицы.КоличествоМест = 1 Тогда
					СтрокаГруза = СтрокаГруза + "о";
				ИначеЕсли СтрокаТаблицы.КоличествоМест = 2 Тогда
					СтрокаГруза = СтрокаГруза + "а";
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицы.КоличествоТонн) Тогда
				СтрокаГруза = СтрокаГруза + ", " + Строка(СтрокаТаблицы.КоличествоТонн*?(СтрокаТаблицы.КоличествоЕздок=0,1,СтрокаТаблицы.КоличествоЕздок)) + " т";
			КонецЕсли;	
			СтрокаГруза = СтрокаГруза + "; ";
		КонецЦикла;
		
		МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(СтрокаГруза, 120);
		Сч = 0;
		Для Сч = 0 По МассивСтрок.Количество()-1 Цикл
			ОбластьЛицевая.Параметры["НаименованиеГрузаПредставление"+Строка(Сч+1)] = МассивСтрок[Сч];
			Если Сч = 3 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ОбластьЛицевая.Параметры.СопрДокументы   = ТекущийДокумент.ПереченьСопроводительныхДокументов;
		ОбластьЛицевая.Параметры.СопрСертификаты = ТекущийДокумент.ПереченьСопроводительныхСертификатов;
		
		ОбластьЛицевая.Параметры.АдресПогрузкиПредставление  = ТекущийДокумент.АдресОтправления;
		ОбластьЛицевая.Параметры.АдресРазгрузкиПредставление = ТекущийДокумент.АдресДоставки;
		
		// оборотная
		Перевозчик = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(
			ТекущийДокумент.Организация, ТекущийДокумент.Дата), "ПолноеНаименование, ЮридическийАдрес");
		МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(Перевозчик, 45);
		ОбластьОборотная.Параметры.ПеревозчикПредставление1 = МассивСтрок[0];
		Если МассивСтрок.Количество() > 1 Тогда
			ОбластьОборотная.Параметры.ПеревозчикПредставление2 = МассивСтрок[1];
		КонецЕсли;
		ПеревозчикТелефон = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Организация, ТекущийДокумент.Дата), "Телефоны");
		ОбластьОборотная.Параметры.ПеревозчикПредставление5 = ПеревозчикТелефон;
		
		Если ВыработкаЗаполнена Тогда
			ОбластьОборотная.Параметры.ПеревозчикПредставление4 = "№" + ПутЛист.Номер;
			
			Водитель = уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ПутЛист.Водитель1, ТекущийДокумент.Дата);
			ОбластьОборотная.Параметры.ПеревозчикПредставление3 = Водитель;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	КонтактнаяИнформация.Представление
			|ИЗ
			|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Ссылка = &Объект
			|	И КонтактнаяИнформация.Тип = &Тип";
			
			Запрос.УстановитьПараметр("Объект", ПутЛист.Водитель1.ФизическоеЛицо);
			Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
			ТЗ = Запрос.Выполнить().Выгрузить();
			Если ТЗ.Количество() Тогда
				ОбластьОборотная.Параметры.ПеревозчикПредставление3 = ОбластьОборотная.Параметры.ПеревозчикПредставление3 + ", тел. " + ТЗ[0].Представление;
			КонецЕсли;
			
			СтрокаПредставлениеТС = уатОбщегоНазначения.уатПредставлениеТС(ПутЛист.ТранспортноеСредство,Неопределено);
			СтрокаХарактеристикиТС = "Модель " + Строка(ПутЛист.ТранспортноеСредство.уатМодель);
			
			Для Каждого Прицеп Из ПутЛист.Прицепы Цикл
				Если Прицеп.ТС.уатВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
					СтрокаПредставлениеТС = СтрокаПредставлениеТС + ", " + уатОбщегоНазначения.уатПредставлениеТС(Прицеп.ТС,Неопределено);
					СтрокаХарактеристикиТС = СтрокаХарактеристикиТС + ", " + "Модель " + Строка(Прицеп.ТС.уатМодель);
				КонецЕсли;
			КонецЦикла;
			
			МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(СтрокаПредставлениеТС, 35);
			Сч = 0;
			Для Сч = 0 По МассивСтрок.Количество()-1 Цикл
				ОбластьОборотная.Параметры["ТСПредставление"+Строка(Сч+1)] = МассивСтрок[Сч];
				Если Сч = 1 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(СтрокаХарактеристикиТС, 60);
			Сч = 0;
			Для Сч = 0 По МассивСтрок.Количество()-1 Цикл
				ОбластьОборотная.Параметры["ТСХарактеристикиПредставление"+Строка(Сч+1)] = МассивСтрок[Сч];
				Если Сч = 1 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ТекущийДокумент.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
			ОбластьОборотная.Параметры.СтоимостьПредставление = ТекущийДокумент.Стоимость.Итог("Сумма");
		Иначе
			КурсВалютыДокумента = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ТекущийДокумент.ВалютаДокумента, ТекущийДокумент.Дата);
			СтоимостьВРублях =  уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекущийДокумент.Стоимость.Итог("Сумма"), мВалютаРегламентированногоУчета,
				ТекущийДокумент.ВалютаДокумента, КурсВалютыДокумента.Курс, 1, КурсВалютыДокумента.Кратность, 1);
			
			ОбластьОборотная.Параметры.СтоимостьПредставление = СтоимостьВРублях;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьЛицевая);
		ТабличныйДокумент.Вывести(ОбластьОборотная);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

Функция ПечатьЭСМ7(ДокументОбъект, ОбъектыПечати)
	Возврат уатЗащищенныеФункцииСервер_проф.уатПечать_ТТД_ЭСМ7(ДокументОбъект, ОбъектыПечати);
КонецФункции

Функция ПечатьЗаказНаряда(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ЗаказНаряд";
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатТТД.Дата КАК Дата,
	|	уатТТД.Организация КАК Организация,
	|	уатТТД.Контрагент КАК Контрагент,
	|	уатТТДСтоимость.ПутЛист КАК ПутЛист,
	|	уатТТДСтоимость.Маршрут КАК Маршрут,
	|	уатТТДСтоимость.ПараметрВыработки КАК ПараметрВыработки,
	|	уатТТДСтоимость.Цена КАК Цена,
	|	ВЫБОР
	|		КОГДА уатТТД.СуммаВключаетНДС
	|			ТОГДА уатТТДСтоимость.Сумма
	|		ИНАЧЕ уатТТДСтоимость.Сумма + уатТТДСтоимость.СуммаНДС
	|	КОНЕЦ КАК Всего,
	|	уатТТДСтоимость.Ссылка,
	|	уатТТД.ВалютаДокумента
	|ПОМЕСТИТЬ ВРТ_ТТД
	|ИЗ
	|	Документ.уатТТД.Стоимость КАК уатТТДСтоимость
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатТТД КАК уатТТД
	|		ПО уатТТДСтоимость.Ссылка = уатТТД.Ссылка
	|ГДЕ
	|	уатТТДСтоимость.Ссылка В(&Ссылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПутЛист
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	уатПутевойЛистЗадание.АдресПрибытия КАК АдресПрибытия,
	|	уатПутевойЛистЗадание.ВремяПрибытия КАК ВремяПрибытия,
	|	уатПутевойЛистЗадание.ВремяУбытия КАК ВремяУбытия,
	|	уатПутевойЛистЗадание.КоличествоПассажиров КАК КоличествоПассажиров,
	|	уатПутевойЛистЗадание.Маршрут КАК Маршрут,
	|	уатПутевойЛистЗадание.Подача КАК Подача,
	|	уатПутевойЛист.Ссылка КАК ПутЛист,
	|	уатПутевойЛист.Водитель1 КАК Водитель,
	|	уатПутевойЛист.ВыдалДиспетчер КАК Диспетчер,
	|	уатПутевойЛист.ДатаВозвращения КАК ДатаВозвращения,
	|	уатПутевойЛист.ДатаВыезда КАК ДатаВыезда,
	|	уатПутевойЛист.ТранспортноеСредство.Код КАК ГосударственныйНомер,
	|	уатПутевойЛист.ТранспортноеСредство.уатМодель.Наименование КАК НаименованиеМодели,
	|	уатПутевойЛист.СпидометрВыезда КАК СпидометрВыезда,
	|	уатПутевойЛист.СпидометрВозвращения КАК СпидометрВозвращения
	|ИЗ
	|	Документ.уатПутевойЛист.Задание КАК уатПутевойЛистЗадание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатПутевойЛист КАК уатПутевойЛист
	|		ПО уатПутевойЛистЗадание.Ссылка = уатПутевойЛист.Ссылка
	|ГДЕ
	|	уатПутевойЛистЗадание.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ.ПутЛист
	|			ИЗ
	|				ВРТ_ТТД КАК ВТ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	уатПутевойЛист.Ссылка КАК ПутЛист,
	|	уатПутевойЛист.Водитель1 КАК Водитель,
	|	уатПутевойЛист.ВыдалДиспетчер КАК Диспетчер,
	|	уатПутевойЛист.ДатаВозвращения КАК ДатаВозвращения,
	|	уатПутевойЛист.ДатаВыезда КАК ДатаВыезда,
	|	уатПутевойЛист.ТранспортноеСредство.Код КАК ГосударственныйНомер,
	|	уатПутевойЛист.ТранспортноеСредство.уатМодель.Наименование КАК НаименованиеМодели,
	|	уатПутевойЛист.СпидометрВыезда КАК СпидометрВыезда,
	|	уатПутевойЛист.СпидометрВозвращения КАК СпидометрВозвращения
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|ГДЕ
	|	уатПутевойЛист.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ.ПутЛист
	|			ИЗ
	|				ВРТ_ТТД КАК ВТ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВРТ_ТТД.Дата КАК Дата,
	|	ВРТ_ТТД.Организация КАК Организация,
	|	ВРТ_ТТД.Контрагент КАК Контрагент,
	|	ВРТ_ТТД.ПутЛист КАК ПутЛист,
	|	ВРТ_ТТД.Маршрут КАК Маршрут,
	|	ВРТ_ТТД.ПараметрВыработки,
	|	ВРТ_ТТД.Цена,
	|	ВРТ_ТТД.Всего,
	|	ВРТ_ТТД.ВалютаДокумента КАК ВалютаДокумента
	|ИЗ
	|	ВРТ_ТТД КАК ВРТ_ТТД
	|ИТОГИ
	|	МАКСИМУМ(Дата),
	|	МАКСИМУМ(Организация),
	|	МАКСИМУМ(Контрагент),
	|	МАКСИМУМ(ВалютаДокумента)
	|ПО
	|	ВРТ_ТТД.Ссылка,
	|	ПутЛист,
	|	Маршрут";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТабПЛЗадания = РезультатЗапроса[1].Выгрузить();
	ТабПЛ        = РезультатЗапроса[2].Выгрузить();
	
	ПервыйДокумент = Истина;
	
	ВыборкаДокументыТТД = РезультатЗапроса[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДокументыТТД.Следующий() Цикл 
		ВыборкаДокументыПЛ = ВыборкаДокументыТТД.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДокументыПЛ.Следующий() Цикл 
			ВыборкаМаршруты = ВыборкаДокументыПЛ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаМаршруты.Следующий() Цикл 
				Если Не ПервыйДокумент Тогда
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				ПервыйДокумент = Ложь;
				
				ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗАКАЗНАРЯД";
				Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатТТД.ПФ_MXL_ЗаказНаряд");
				
				ОбластьЛицевая = Макет.ПолучитьОбласть("Лицевая");
				
				ПараметрыМакета = Новый Структура();
				
				ПараметрыМакета.Вставить("ДатаДокумента", Формат(ВыборкаМаршруты.Дата, "ДФ='dd MMMM yyyy ''г.'''"));
				
				ПараметрыМакета.Вставить("Фрахтовщик", уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(
					уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(
						ВыборкаМаршруты.Организация, 
						ВыборкаМаршруты.Дата)));
				ПараметрыМакета.Вставить("Фрахтователь", уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(
					уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(
						ВыборкаМаршруты.Контрагент, 
						ВыборкаМаршруты.Дата)));
				
				СтрокиЗадания = ТабПЛЗадания.НайтиСтроки(Новый Структура("ПутЛист, Маршрут", ВыборкаМаршруты.ПутЛист, ВыборкаМаршруты.Маршрут));
				Если СтрокиЗадания.Количество() > 0 Тогда 
					ПараметрыМакета.Вставить("МодельТС",          СтрокиЗадания[0].НаименованиеМодели);
					ПараметрыМакета.Вставить("ГосНомер",          СтрокиЗадания[0].ГосударственныйНомер);
					ПараметрыМакета.Вставить("ФИОВодителя",       уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(СтрокиЗадания[0].Водитель, ВыборкаМаршруты.Дата));
					ПараметрыМакета.Вставить("ДатаПодачи",        Формат(ВыборкаМаршруты.Дата, "ДФ='dd MMMM yyyy ''г.'''"));
					ПараметрыМакета.Вставить("ВремяПодачи",       "" + Формат(Цел(СтрокиЗадания[0].Подача), "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=0") + " час. " + Формат(((СтрокиЗадания[0].Подача - Цел(СтрокиЗадания[0].Подача))*100), "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=0") + " мин.");
					ПараметрыМакета.Вставить("Маршрут",           СтрокиЗадания[0].Маршрут.Наименование);
					ПараметрыМакета.Вставить("Адрес",             СтрокиЗадания[0].АдресПрибытия);
					ПараметрыМакета.Вставить("ВремяВыезда",       Формат(СтрокиЗадания[0].ДатаВыезда, "ДФ='''в'' HH ''час.'' mm ''мин.'''"));
					ПараметрыМакета.Вставить("СпидометрВыезда",   Формат(СтрокиЗадания[0].СпидометрВыезда, "ЧН=0; ЧГ=0"));
					ПараметрыМакета.Вставить("ФИОДиспетчера",     уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(СтрокиЗадания[0].Диспетчер, ВыборкаМаршруты.Дата));
					ПараметрыМакета.Вставить("ВремяПрибытия",     Формат(СтрокиЗадания[0].ВремяПрибытия, "ДФ='HH ''час.'' mm ''мин.'''"));
					ПараметрыМакета.Вставить("ВремяУбытия",       Формат(СтрокиЗадания[0].ВремяУбытия, "ДФ='HH ''час.'' mm ''мин.'''"));
					ПараметрыМакета.Вставить("ПеревезеноЧеловек", "" + Формат(СтрокиЗадания[0].КоличествоПассажиров, "ЧН=0; ЧГ=0") + " чел.");
					ПараметрыМакета.Вставить("ВремяВозврата",     Формат(СтрокиЗадания[0].ДатаВозвращения, "ДФ='''в'' HH ''час.'' mm ''мин.'''"));
					ПараметрыМакета.Вставить("СпидометрВозврата", Формат(СтрокиЗадания[0].СпидометрВозвращения, "ЧН=0; ЧГ=0"));
					
				Иначе 
					СтрокиЗадания = ТабПЛЗадания.НайтиСтроки(Новый Структура("ПутЛист", ВыборкаМаршруты.ПутЛист));
					Если СтрокиЗадания.Количество() > 0 Тогда 
						ПараметрыМакета.Вставить("МодельТС",          СтрокиЗадания[0].НаименованиеМодели);
						ПараметрыМакета.Вставить("ГосНомер",          СтрокиЗадания[0].ГосударственныйНомер);
						ПараметрыМакета.Вставить("ФИОВодителя",       уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(СтрокиЗадания[0].Водитель, ВыборкаМаршруты.Дата));
						ПараметрыМакета.Вставить("ДатаПодачи",        Формат(ВыборкаМаршруты.Дата, "ДФ='dd MMMM yyyy ''г.'''"));
						ПараметрыМакета.Вставить("ВремяПодачи",       "" + Формат(Цел(СтрокиЗадания[0].Подача), "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=0") + " час. " + Формат(((СтрокиЗадания[0].Подача - Цел(СтрокиЗадания[0].Подача))*100), "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=0") + " мин.");
						ПараметрыМакета.Вставить("Маршрут",           СтрокиЗадания[0].Маршрут.Наименование);
						ПараметрыМакета.Вставить("Адрес",             СтрокиЗадания[0].АдресПрибытия);
						ПараметрыМакета.Вставить("ВремяВыезда",       Формат(СтрокиЗадания[0].ДатаВыезда, "ДФ='''в'' HH ''час.'' mm ''мин.'''"));
						ПараметрыМакета.Вставить("СпидометрВыезда",   Формат(СтрокиЗадания[0].СпидометрВыезда, "ЧН=0; ЧГ=0"));
						ПараметрыМакета.Вставить("ФИОДиспетчера",     уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(СтрокиЗадания[0].Диспетчер, ВыборкаМаршруты.Дата));
						ПараметрыМакета.Вставить("ВремяПрибытия",     Формат(СтрокиЗадания[0].ВремяПрибытия, "ДФ='HH ''час.'' mm ''мин.'''"));
						ПараметрыМакета.Вставить("ВремяУбытия",       Формат(СтрокиЗадания[0].ВремяУбытия, "ДФ='HH ''час.'' mm ''мин.'''"));
						ПараметрыМакета.Вставить("ПеревезеноЧеловек", "" + Формат(СтрокиЗадания[0].КоличествоПассажиров, "ЧН=0; ЧГ=0") + " чел.");
						ПараметрыМакета.Вставить("ВремяВозврата",     Формат(СтрокиЗадания[0].ДатаВозвращения, "ДФ='''в'' HH ''час.'' mm ''мин.'''"));
						ПараметрыМакета.Вставить("СпидометрВозврата", Формат(СтрокиЗадания[0].СпидометрВозвращения, "ЧН=0; ЧГ=0"));
					Иначе 
						СтрокиПЛ = ТабПЛ.НайтиСтроки(Новый Структура("ПутЛист", ВыборкаМаршруты.ПутЛист));
						Если СтрокиПЛ.Количество() > 0 Тогда 
							ПараметрыМакета.Вставить("МодельТС",          СтрокиПЛ[0].НаименованиеМодели);
							ПараметрыМакета.Вставить("ГосНомер",          СтрокиПЛ[0].ГосударственныйНомер);
							ПараметрыМакета.Вставить("ФИОВодителя",       уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(СтрокиПЛ[0].Водитель, ВыборкаМаршруты.Дата));
							ПараметрыМакета.Вставить("ДатаПодачи",        Формат(ВыборкаМаршруты.Дата, "ДФ='dd MMMM yyyy ''г.'''"));
							ПараметрыМакета.Вставить("Маршрут",           ВыборкаМаршруты.Маршрут.Наименование);
							ПараметрыМакета.Вставить("ВремяВыезда",       Формат(СтрокиПЛ[0].ДатаВыезда, "ДФ='''в'' HH ''час.'' mm ''мин.'''"));
							ПараметрыМакета.Вставить("СпидометрВыезда",   Формат(СтрокиПЛ[0].СпидометрВыезда, "ЧН=0; ЧГ=0"));
							ПараметрыМакета.Вставить("ФИОДиспетчера",     уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(СтрокиПЛ[0].Диспетчер, ВыборкаМаршруты.Дата));
							ПараметрыМакета.Вставить("ВремяВозврата",     Формат(СтрокиПЛ[0].ДатаВозвращения, "ДФ='''в'' HH ''час.'' mm ''мин.'''"));
							ПараметрыМакета.Вставить("СпидометрВозврата", Формат(СтрокиПЛ[0].СпидометрВозвращения, "ЧН=0; ЧГ=0"));
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				СуммаДокумента = 0;
				ВыборкаСтоимость = ВыборкаМаршруты.Выбрать();
				Пока ВыборкаСтоимость.Следующий() Цикл 
					Если ВыборкаСтоимость.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегОбщий Тогда 
						ПараметрыМакета.Вставить("ТарифЗаКМПробега", Формат(ВыборкаСтоимость.Цена, "ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=0") + " " + ВыборкаМаршруты.ВалютаДокумента + "/км");
						СуммаДокумента = СуммаДокумента + ВыборкаСтоимость.Всего;
					ИначеЕсли ВыборкаСтоимость.ПараметрВыработки = Справочники.уатПараметрыВыработки.ВремяВРаботе Тогда 
						ПараметрыМакета.Вставить("ТарифЗаЧасРаботы", Формат(ВыборкаСтоимость.Цена, "ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=0") + " " + ВыборкаМаршруты.ВалютаДокумента + "/час");
						СуммаДокумента = СуммаДокумента + ВыборкаСтоимость.Всего;
					КонецЕсли;
				КонецЦикла;
				
				ПараметрыМакета.Вставить("ВсегоПоДокументу", Формат(СуммаДокумента, "ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=0") + " " + ВыборкаМаршруты.ВалютаДокумента);
				
				ЗаполнитьЗначенияСвойств(ОбластьЛицевая.Параметры, ПараметрыМакета);
				
				ТабличныйДокумент.Вывести(ОбластьЛицевая);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	МенеджерВТ.Закрыть();
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьЗаказНаряда()

#КонецОбласти

#КонецЕсли