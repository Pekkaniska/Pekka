
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	ИнициализироватьДокументПередЗаполнением();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ВнеоборотныеАктивы.ПроверитьСоответствиеДатыВерсииУчета(ЭтотОбъект, Истина, Отказ);
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковОсновныхСредств
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПредметовЛизингаНаБалансе Тогда
			
		МассивНепроверяемыхРеквизитов.Добавить("НМА");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоДоговорамЛизинга");
		МассивНепроверяемыхРеквизитов.Добавить("ПрочиеРасходы");
		МассивНепроверяемыхРеквизитов.Добавить("АрендованныеОС");
		
		МассивНепроверяемыхРеквизитов.Добавить("Партнер");
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
		МассивНепроверяемыхРеквизитов.Добавить("ГруппаФинансовогоУчета");
		МассивНепроверяемыхРеквизитов.Добавить("ВидАктивов");
		
		ПроверитьЗаполнениеТЧ("ОС", ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов, Отказ);
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуОС
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуПредметовЛизингаНаБалансе Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("НМА");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоДоговорамЛизинга");
		МассивНепроверяемыхРеквизитов.Добавить("ПрочиеРасходы");
		МассивНепроверяемыхРеквизитов.Добавить("АрендованныеОС");
		
		МассивНепроверяемыхРеквизитов.Добавить("Партнер");
		МассивНепроверяемыхРеквизитов.Добавить("ГруппаФинансовогоУчета");
		МассивНепроверяемыхРеквизитов.Добавить("ВидАктивов");
		МассивНепроверяемыхРеквизитов.Добавить("Местонахождение");
		
		ПроверитьЗаполнениеТЧ("ОС", ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов, Отказ);
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковНМАиРасходовНаНИОКР Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ОС");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоДоговорамЛизинга");
		МассивНепроверяемыхРеквизитов.Добавить("ПрочиеРасходы");
		МассивНепроверяемыхРеквизитов.Добавить("АрендованныеОС");
		
		МассивНепроверяемыхРеквизитов.Добавить("Партнер");
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
		МассивНепроверяемыхРеквизитов.Добавить("ГруппаФинансовогоУчета");
		МассивНепроверяемыхРеквизитов.Добавить("ВидАктивов");
		
		ПроверитьЗаполнениеТЧ("НМА", ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов, Отказ);
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковВзаиморасчетовПоДоговорамЛизинга Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ОС");
		МассивНепроверяемыхРеквизитов.Добавить("НМА");
		МассивНепроверяемыхРеквизитов.Добавить("ПрочиеРасходы");
		МассивНепроверяемыхРеквизитов.Добавить("АрендованныеОС");
		МассивНепроверяемыхРеквизитов.Добавить("ГруппаФинансовогоУчета");
		МассивНепроверяемыхРеквизитов.Добавить("ВидАктивов");
		МассивНепроверяемыхРеквизитов.Добавить("Местонахождение");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоДоговорамЛизинга.СуммаРегл");
		
		ПроверитьЗаполнениеТЧ("РасчетыПоДоговорамЛизинга", ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов, Отказ);

	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковВложенийВоВнеоборотныеАктивы Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ОС");
		МассивНепроверяемыхРеквизитов.Добавить("НМА");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоДоговорамЛизинга");
		МассивНепроверяемыхРеквизитов.Добавить("АрендованныеОС");

		МассивНепроверяемыхРеквизитов.Добавить("Партнер");
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
		МассивНепроверяемыхРеквизитов.Добавить("ГруппаФинансовогоУчета");
		МассивНепроверяемыхРеквизитов.Добавить("Местонахождение");
		
		МассивНепроверяемыхРеквизитов.Добавить("ПрочиеРасходы.ВнеоборотныйАктив");
		МассивНепроверяемыхРеквизитов.Добавить("ПрочиеРасходы.Сумма");
		МассивНепроверяемыхРеквизитов.Добавить("ПрочиеРасходы.СуммаРегл");
		МассивНепроверяемыхРеквизитов.Добавить("ПрочиеРасходы.СуммаБезНДС");
		
		ПроверитьЗаполнениеТЧ("ПрочиеРасходы", ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов, Отказ);

	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПредметовЛизингаЗаБалансом
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАрендованныхОС Тогда	
		
		МассивНепроверяемыхРеквизитов.Добавить("ОС");
		МассивНепроверяемыхРеквизитов.Добавить("НМА");
		МассивНепроверяемыхРеквизитов.Добавить("Партнер");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоДоговорамЛизинга");
		МассивНепроверяемыхРеквизитов.Добавить("ПрочиеРасходы");
		МассивНепроверяемыхРеквизитов.Добавить("ВидАктивов");
		
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАрендованныхОС Тогда
			МассивНепроверяемыхРеквизитов.Добавить("АрендованныеОС.ДоговорЛизинга");
		КонецЕсли; 
		
		ПроверитьЗаполнениеТЧ("АрендованныеОС", ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов, Отказ);

	КонецЕсли; 
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Для каждого ДанныеСтроки Из РасчетыПоДоговорамЛизинга Цикл
		ДанныеСтроки.ДокументАванса = Неопределено;
	КонецЦикла; 
	
	ИнициализироватьДокументПередЗаполнением();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеСерверУТ.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	Если Не Отказ И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковОсновныхСредств
			ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуОС
			ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуПредметовЛизингаНаБалансе
			ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПредметовЛизингаНаБалансе Тогда
			ВнеоборотныеАктивыСлужебный.ПроверитьВозможностьПринятияКУчетуОС(ЭтотОбъект, Отказ);
		ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковНМАиРасходовНаНИОКР Тогда
			ВнеоборотныеАктивыСлужебный.ПроверитьВозможностьПринятияКУчетуНМА(ЭтотОбъект, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	ОбработатьОСПередЗаписью();
	ОбработатьРасчетыПоДоговорамЛизингаПередЗаписью();
	
	ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(ПрочиеРасходы);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Отказ И ДополнительныеСвойства.РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
		Документы.ВводОстатковВнеоборотныхАктивов2_4.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства, "РеестрДокументов,ДокументыПоОС,ДокументыПоНМА");
		РегистрыСведений.РеестрДокументов.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
		РегистрыСведений.ДокументыПоОС.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
		РегистрыСведений.ДокументыПоНМА.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковВзаиморасчетовПоДоговорамЛизинга Тогда
		СоздатьУдалитьДокументыАвансовПриЗаписи();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	Документы.ВводОстатковВнеоборотныхАктивов2_4.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ПроведениеСерверУТ.ЗагрузитьТаблицыДвижений(ДополнительныеСвойства, Движения);
	РегистрыСведений.РеестрДокументов.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	РегистрыСведений.ДокументыПоОС.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	РегистрыСведений.ДокументыПоНМА.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	
	РеглУчетПроведениеСервер.ЗарегистрироватьКОтражению(ЭтотОбъект, ДополнительныеСвойства, Движения, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	//++ НЕ УТКА
	МеждународныйУчетПроведениеСервер.ЗарегистрироватьКОтражению(ЭтотОбъект, ДополнительныеСвойства, Движения, Отказ);
	//-- НЕ УТКА
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СформироватьСписокРегистровДляКонтроля();
	
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроверкаЗаполнения

Процедура ПроверитьЗаполнениеТЧ(ИмяТЧ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов, Отказ)

	Если ЭтотОбъект[ИмяТЧ].Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТЧ = "ОС" Тогда
		
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПроверитьОтсутствиеДублейВТабличнойЧасти(
			ЭтотОбъект, ИмяТЧ, Новый Структура("ОсновноеСредство"), Отказ);
			
		ВнеоборотныеАктивыСлужебный.ПроверитьРеквизитыОСПриПринятииКУчету(ЭтотОбъект, ИмяТЧ, Отказ);
			
	ИначеЕсли ИмяТЧ = "НМА" Тогда
		
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПроверитьОтсутствиеДублейВТабличнойЧасти(
			ЭтотОбъект, ИмяТЧ, Новый Структура("НематериальныйАктив"), Отказ);
			
	ИначеЕсли ИмяТЧ = "АрендованныеОС" Тогда
		
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПроверитьОтсутствиеДублейВТабличнойЧасти(
			ЭтотОбъект, ИмяТЧ, Новый Структура("ОсновноеСредство"), Отказ);
			
		ВнеоборотныеАктивыСлужебный.ПроверитьРеквизитыОСПриПринятииКУчету(ЭтотОбъект, ИмяТЧ, Отказ);
			
	ИначеЕсли ИмяТЧ = "РасчетыПоДоговорамЛизинга" Тогда
			
		ПроверкаТабличнойЧастиРасчетовПоДоговорамЛизинга(Отказ);
		
	ИначеЕсли ИмяТЧ = "ПрочиеРасходы" Тогда
		
		ПроверкаТабличнойЧастиПрочиеРасходы(Отказ);
		
	КонецЕсли; 
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	// Универсальная проверка выполняемая на основании свойств реквизитов: 
	//  - если реквизит видимый и не заполнен то выводится сообщение.
	//  - если реквизит не видимый или недоступен для редактирования то он не проверяется.
	УниверсальнаяПроверкаТЧ(ИмяТЧ, ПроверяемыеРеквизиты, Отказ);
	
КонецПроцедуры

Процедура УниверсальнаяПроверкаТЧ(ИмяТЧ, ПроверяемыеРеквизиты, Отказ)

	ПроверяемыеРеквизитыСтатейРасходов = Неопределено;
	ДопПараметрыПровериАналитик = Неопределено;
	
	Если ИмяТЧ = "ОС" Тогда
		
		ИмяОбъектаУчета = "ОсновноеСредство";
		ШаблонСообщения = НСтр("ru = 'В сведениях об основном средстве ""%1"" не заполнено поле %2.'");
		ПроверяемыеРеквизитыСтатейРасходов = "СтатьяРасходовБУ, АналитикаРасходовБУ,"
											+ "СтатьяРасходовАмортизационнойПремии, АналитикаРасходовАмортизационнойПремии,"
											+ "СтатьяРасходовУУ, АналитикаРасходовУУ,"
											+ "СтатьяРасходовНалог, АналитикаРасходовНалог";
											
	ИначеЕсли ИмяТЧ = "НМА" Тогда
	
		ИмяОбъектаУчета = "НематериальныйАктив";
		ШаблонСообщения = НСтр("ru = 'В сведениях о нематериальном активе ""%1"" не заполнено поле %2.'");
		ПроверяемыеРеквизитыСтатейРасходов = "СтатьяРасходовБУ, АналитикаРасходовБУ,"
											+ "СтатьяРасходовУУ, АналитикаРасходовУУ";
	ИначеЕсли ИмяТЧ = "ПрочиеРасходы" Тогда
		
		ИмяОбъектаУчета = "ВнеоборотныйАктив";
		ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""%2"" в строке %1 списка ""Расходы""'");
		
	ИначеЕсли ИмяТЧ = "АрендованныеОС" Тогда
		
		ИмяОбъектаУчета = "ОсновноеСредство";
		ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""%2"" в строке %1 списка ""Основные средства""'");
		
	Иначе
		Возврат;
	КонецЕсли; 
	
	Если ПроверяемыеРеквизитыСтатейРасходов <> Неопределено Тогда
		// Вызываем проверку аналитик, чтобы потом использовать результат проверки.
		РеквизитыАналитик = Новый Структура(ИмяТЧ, ПроверяемыеРеквизитыСтатейРасходов);
		ДопПараметрыПровериАналитик = Новый Структура;
		ДопПараметрыПровериАналитик.Вставить("ПрограммнаяПроверка");
		ПланыВидовХарактеристик.СтатьиРасходов.ПроверитьЗаполнениеАналитик(ЭтотОбъект, РеквизитыАналитик,,, ДопПараметрыПровериАналитик);
	КонецЕсли; 

	ПутьКРеквизитам = ИмяТЧ + ".";
	ПроверяемыеРеквизитыТЧ = Новый Массив;
	ПроверяемыеРеквизитыБезИмениТЧ = Новый Массив;
	Для каждого ИмяПроверяемогоРеквизита Из ПроверяемыеРеквизиты Цикл
		Если СтрНачинаетсяС(ИмяПроверяемогоРеквизита, ПутьКРеквизитам) Тогда
			ПроверяемыеРеквизитыТЧ.Добавить(ИмяПроверяемогоРеквизита);
			ПроверяемыеРеквизитыБезИмениТЧ.Добавить(СтрРазделить(ИмяПроверяемогоРеквизита, ".")[1]);
		КонецЕсли; 
	КонецЦикла; 
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, ПроверяемыеРеквизитыТЧ);
	
	ВспомогательныеРеквизитыОбъекта = Документы.ВводОстатковВнеоборотныхАктивов2_4.ВспомогательныеРеквизиты(ЭтотОбъект, Ложь);
	
	ШаблонРеквизитАналитики = "Объект.%1[%2].%3";
	
	ПредставлениеРеквизитов = Неопределено;
	СписокНезаполненныхАналитик = Новый Массив;
	Для каждого ДанныеСтроки Из ЭтотОбъект[ИмяТЧ] Цикл
		
		ВспомогательныеРеквизиты = Документы.ВводОстатковВнеоборотныхАктивов2_4.ДополнитьВспомогательныеРеквизитыПоДаннымСтроки(
										ЭтотОбъект, ДанныеСтроки, ВспомогательныеРеквизитыОбъекта);
		 
		ПараметрыРеквизитовОбъекта = ВнеоборотныеАктивыКлиентСервер.ЗначенияСвойствЗависимыхРеквизитов_ВводОстатков(
										ДанныеСтроки, ВспомогательныеРеквизиты);
		
		МассивНепроверяемыхРеквизитов = Новый Массив;
		ВнеоборотныеАктивыСлужебный.ОтключитьПроверкуЗаполненияРеквизитовОбъекта(ПараметрыРеквизитовОбъекта, МассивНепроверяемыхРеквизитов);
		Для каждого ИмяРеквизита Из ПроверяемыеРеквизитыБезИмениТЧ Цикл
			
			Если МассивНепроверяемыхРеквизитов.Найти(ИмяРеквизита) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтроки[ИмяРеквизита]) Тогда
				
				Если ИмяРеквизита = "АналитикаРасходовБУ"
					ИЛИ ИмяРеквизита = "АналитикаРасходовУУ"
					ИЛИ ИмяРеквизита = "АналитикаРасходовАмортизационнойПремии"
					ИЛИ ИмяРеквизита = "АналитикаРасходовНалог" Тогда
					
					ПолеАналитики = СтрШаблон(ШаблонРеквизитАналитики, ИмяТЧ, Формат(ДанныеСтроки.НомерСтроки, "ЧГ="), ИмяРеквизита);
					СписокНезаполненныхАналитик.Добавить(ПолеАналитики);
					
				Иначе
				
					ПредставлениеРеквизита = ПредставлениеРеквизита(ИмяРеквизита, ИмяТЧ, ПредставлениеРеквизитов);
					
					Если ИмяТЧ = "ПрочиеРасходы" ИЛИ ИмяТЧ = "АрендованныеОС" Тогда
						ТекстСообщения = СтрШаблон(ШаблонСообщения, ДанныеСтроки.НомерСтроки, ПредставлениеРеквизита);
						Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, ДанныеСтроки.НомерСтроки, ИмяРеквизита);
					Иначе	
						ТекстСообщения = СтрШаблон(ШаблонСообщения, ДанныеСтроки[ИмяОбъектаУчета], ПредставлениеРеквизита);
						Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, ДанныеСтроки.НомерСтроки, "НомерСтроки");
					КонецЕсли; 
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "", Отказ);
					
					// Используется для получения ошибок проверки заполнения из вызывающего кода.
					ВнеоборотныеАктивыСлужебный.ДобавитьРезультатПроверкиЗаполнения(
						ЭтотОбъект,
						ПредставлениеРеквизита,
						ИмяТЧ,
						ДанныеСтроки.НомерСтроки,
						ДанныеСтроки[ИмяОбъектаУчета]);
					
				КонецЕсли; 
			КонецЕсли;
			
		КонецЦикла; 
		
	КонецЦикла;
	
	Если ДопПараметрыПровериАналитик <> Неопределено Тогда
		Для каждого ОписаниеОшибки Из ДопПараметрыПровериАналитик.Ошибки.СписокОшибок Цикл
			ПолеАналитики = СтрШаблон(ОписаниеОшибки.ПолеОшибки, Формат(ОписаниеОшибки.НомерСтроки+1, "ЧГ="));
			Если СписокНезаполненныхАналитик.Найти(ПолеАналитики) <> Неопределено Тогда
				
				ПоляОшибки = СтрРазделить(ОписаниеОшибки.ПолеОшибки, ".");
				ИмяРеквизита = ПоляОшибки.Получить(ПоляОшибки.ВГраница());
				ПредставлениеРеквизита = ПредставлениеРеквизита(ИмяРеквизита, ИмяТЧ, ПредставлениеРеквизитов);
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ДанныеСтроки[ИмяОбъектаУчета], ПредставлениеРеквизита);
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, ОписаниеОшибки.НомерСтроки+1, "НомерСтроки");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "", Отказ);
				
				// Используется для получения ошибок проверки заполнения из вызывающего кода.
				ВнеоборотныеАктивыСлужебный.ДобавитьРезультатПроверкиЗаполнения(
					ЭтотОбъект,
					ПредставлениеРеквизита,
					ИмяТЧ,
					ДанныеСтроки.НомерСтроки+1,
					ДанныеСтроки[ИмяОбъектаУчета]);
				
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверкаТабличнойЧастиРасчетовПоДоговорамЛизинга(Отказ)
	
	РеквизитыДоговоров = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(РасчетыПоДоговорамЛизинга.ВыгрузитьКолонку("ДоговорЛизинга"), "ВалютаВзаиморасчетов");
	
	ВалютаРегУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Для Каждого Строка Из РасчетыПоДоговорамЛизинга Цикл
		
		Если РеквизитыДоговоров.Получить(Строка.ДоговорЛизинга).ВалютаВзаиморасчетов <> ВалютаРегУчета
			И Не ЗначениеЗаполнено(Строка.СуммаРегл) Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнено поле ""Сумма (регл.)"" в строке %НомерСтроки% списка ""Расчеты по договорам лизинга""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", Строка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("РасчетыПоДоговорамЛизинга", Строка.НомерСтроки, "СуммаРегл"),
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверкаТабличнойЧастиПрочиеРасходы(Отказ)

	Если ВидАктивов = Перечисления.ВидыВнеоборотныхАктивов.ОбъектыСтроительства Тогда
		ШаблонСообщенияАктив = НСтр("ru = 'Не заполнена колонка ""Объект строительства"" в строке %1 списка ""Расходы""'");
		ШаблонСообщенияСумма = НСтр("ru = 'Необходимо указать сумму вложений для объекта строительства в строке %1 списка ""Расходы""'");
	ИначеЕсли ВидАктивов = Перечисления.ВидыВнеоборотныхАктивов.НМА Тогда
		ШаблонСообщенияАктив = НСтр("ru = 'Не заполнена колонка ""НМА (расходы на НИОКР)"" в строке %1 списка ""Расходы""'");
		ШаблонСообщенияСумма = НСтр("ru = 'Необходимо указать сумму вложений для НМА (расходов на НИОКР) в строке %1 списка ""Расходы""'");
	Иначе
		ШаблонСообщенияАктив = НСтр("ru = 'Не заполнена колонка ""Основное средство"" в строке %1 списка ""Расходы""'");
		ШаблонСообщенияСумма = НСтр("ru = 'Необходимо указать сумму вложений для основного средства в строке %1 списка ""Расходы""'");
	КонецЕсли;
	
	Для каждого ДанныеСтроки Из ПрочиеРасходы Цикл
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ВнеоборотныйАктив) Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщенияАктив, ДанныеСтроки.НомерСтроки);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПрочиеРасходы", ДанныеСтроки.НомерСтроки, "ВнеоборотныйАктив");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.СуммаРегл) 
				И НЕ ЗначениеЗаполнено(ДанныеСтроки.СуммаПР) 
				И НЕ ЗначениеЗаполнено(ДанныеСтроки.СуммаВР) 
				И ОтражатьВРеглУчете 
				И НЕ ОтражатьВУпрУчете
			ИЛИ НЕ ЗначениеЗаполнено(ДанныеСтроки.Сумма) 
				И НЕ ЗначениеЗаполнено(ДанныеСтроки.СуммаБезНДС) 
				И ОтражатьВУпрУчете 
				И НЕ ОтражатьВРеглУчете
			ИЛИ НЕ ЗначениеЗаполнено(ДанныеСтроки.Сумма) 
				И НЕ ЗначениеЗаполнено(ДанныеСтроки.СуммаБезНДС) 
				И НЕ ЗначениеЗаполнено(ДанныеСтроки.СуммаРегл) 
				И НЕ ЗначениеЗаполнено(ДанныеСтроки.СуммаПР) 
				И НЕ ЗначениеЗаполнено(ДанныеСтроки.СуммаВР)
				И ОтражатьВУпрУчете 
				И ОтражатьВРеглУчете Тогда
				
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПрочиеРасходы", ДанныеСтроки.НомерСтроки, "ВнеоборотныйАктив");
			ТекстСообщения = СтрШаблон(ШаблонСообщенияСумма, ДанныеСтроки.НомерСтроки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеРеквизита(ИмяРеквизита, ИмяТЧ, ПредставлениеРеквизитов)

	Если ПредставлениеРеквизитов = Неопределено Тогда
		ПредставлениеРеквизитов = Новый Соответствие;
		Для каждого МетаданныеРеквизита Из Метаданные().ТабличныеЧасти[ИмяТЧ].Реквизиты Цикл
			ПредставлениеРеквизитов.Вставить(МетаданныеРеквизита.Имя, МетаданныеРеквизита.Синоним);
		КонецЦикла;
	КонецЕсли;

	Возврат ПредставлениеРеквизитов.Получить(ИмяРеквизита);
	
КонецФункции

#КонецОбласти

#Область ОбработкаПередЗаписью

Процедура ОбработатьОСПередЗаписью()

	Если ОС.Количество() = 0
	 ИЛИ РегистрыСведений.УчетнаяПолитикаОрганизаций.РаздельныйУчетТоваровПоНалогообложениюНДС(Организация, Дата) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ВариантРаздельногоУчетаНДС", Перечисления.ВариантыРаздельногоУчетаНДС.ИзДокумента);
	ЗначенияЗаполнения.Вставить("НалогообложениеНДС", Справочники.Организации.ЗакупкаПодДеятельность(Организация,, Дата));
	
	Для Каждого Строка Из ОС Цикл
		ЗаполнитьЗначенияСвойств(Строка, ЗначенияЗаполнения);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьРасчетыПоДоговорамЛизингаПередЗаписью()

	Если РасчетыПоДоговорамЛизинга.Количество() = 0 
		ИЛИ ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВводОстатковВзаиморасчетовПоДоговорамЛизинга Тогда
		Возврат;
	КонецЕсли; 
	
	СоздатьУдалитьДокументыАвансовПередЗаписью();
	
	ВалютыДоговоров = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
							РасчетыПоДоговорамЛизинга.ВыгрузитьКолонку("ДоговорЛизинга"), 
							"ВалютаВзаиморасчетов");
	
	ВалютаРегУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Для Каждого Строка Из РасчетыПоДоговорамЛизинга Цикл
		
		Если ВалютыДоговоров.Получить(Строка.ДоговорЛизинга) = ВалютаРегУчета Тогда
			
			Строка.СуммаРегл = Строка.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьУдалитьДокументыАвансовПередЗаписью()
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗначенияРеквизитов = Новый Структура;
	ЗначенияРеквизитов.Вставить("Организация", Организация);
	ЗначенияРеквизитов.Вставить("Дата", Дата);
	ЗначенияРеквизитов.Вставить("ДатаПроведенияБанком", Дата);
	ЗначенияРеквизитов.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаЛизингодателю);
	ЗначенияРеквизитов.Вставить("ТипПлатежаПоЛизингу", Перечисления.ТипыПлатежейПоЛизингу.ОбеспечительныйПлатеж);
	ЗначенияРеквизитов.Вставить("ПроведеноБанком", Истина);
	
	Запрос = Новый Запрос;
	Для Каждого КлючИЗначение Из ЗначенияРеквизитов Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Контрагент", ЭтотОбъект.Контрагент);
	Запрос.УстановитьПараметр("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("УдалитьСозданные", (ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения));
	
	ТаблицаДокумента = РасчетыПоДоговорамЛизинга.Выгрузить();
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
	
	#Область ТекстЗапроса
	Запрос.Текст =
	"ВЫБРАТЬ
	|	(ВЫРАЗИТЬ(Т.НомерСтроки КАК ЧИСЛО)) - 1 КАК ИндексСтроки,
	|	ВЫРАЗИТЬ(&Контрагент КАК Справочник.Контрагенты) КАК Контрагент,
	|	ВЫРАЗИТЬ(Т.ДоговорЛизинга КАК Справочник.ДоговорыЛизинга) КАК Договор,
	|	ВЫРАЗИТЬ(Т.ТипЗадолженности КАК Перечисление.ТипыПлатежейПоЛизингу) КАК ТипЗадолженности,
	|	ВЫРАЗИТЬ(Т.Сумма КАК ЧИСЛО) КАК Сумма,
	|	ВЫРАЗИТЬ(Т.СуммаРегл КАК ЧИСЛО) КАК СуммаРегл,
	|	ВЫРАЗИТЬ(Т.ДокументАванса КАК Документ.СписаниеБезналичныхДенежныхСредств) КАК ДокументАванса
	|ПОМЕСТИТЬ втТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписаниеБезналичныхДенежныхСредств.Ссылка КАК Ссылка
	|ИЗ
	|	втТаблицаДокумента КАК втТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДенежныхСредств
	|		ПО втТаблицаДокумента.ДокументАванса = СписаниеБезналичныхДенежныхСредств.Ссылка
	|ГДЕ
	|	НЕ СписаниеБезналичныхДенежныхСредств.ПометкаУдаления
	|	И (&УдалитьСозданные
	|			ИЛИ втТаблицаДокумента.ТипЗадолженности <> ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоЛизингу.ОбеспечительныйПлатеж))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СписаниеБезналичныхДенежныхСредств.Ссылка
	|ИЗ
	|	Документ.ВводОстатковВнеоборотныхАктивов2_4.РасчетыПоДоговорамЛизинга КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДенежныхСредств
	|		ПО Т.ДокументАванса = СписаниеБезналичныхДенежныхСредств.Ссылка
	|ГДЕ
	|	Т.Ссылка = &Ссылка
	|	И НЕ Т.ДокументАванса В
	|				(ВЫБРАТЬ
	|					втТаблицаДокумента.ДокументАванса
	|				ИЗ
	|					втТаблицаДокумента КАК втТаблицаДокумента)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаДокумента.ИндексСтроки,
	|	втТаблицаДокумента.Контрагент,
	|	втТаблицаДокумента.Договор,
	|	втТаблицаДокумента.Сумма,
	|	втТаблицаДокумента.СуммаРегл,
	|	втТаблицаДокумента.ДокументАванса,
	|	ВЫБОР
	|		КОГДА втТаблицаДокумента.Договор.ВалютаВзаиморасчетов = &ВалютаРегл
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДоговорВВалютеРегл,
	|	втТаблицаДокумента.Договор.ВалютаВзаиморасчетов КАК Валюта
	|ПОМЕСТИТЬ втЗначимыеСтроки
	|ИЗ
	|	втТаблицаДокумента КАК втТаблицаДокумента
	|ГДЕ
	|	втТаблицаДокумента.ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоЛизингу.ОбеспечительныйПлатеж)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Операция.Ссылка КАК Ссылка,
	|	Операция.Дата КАК Дата,
	|	Операция.Контрагент КАК Контрагент,
	|	Операция.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Операция.Организация КАК Организация,
	|	Операция.СуммаДокумента КАК СуммаДокумента,
	|	Операция.Валюта КАК Валюта,
	|	ТабличнаяЧасть.ДоговорЛизинга КАК ДоговорЛизинга,
	|	ТабличнаяЧасть.ТипПлатежаПоЛизингу КАК ТипПлатежаПоЛизингу,
	|	ТабличнаяЧасть.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СуммыДокументовВВалютеРегл.СуммаБезНДСРегл КАК СуммаБезНДСРегл,
	|	Операция.Проведен КАК Проведен,
	|	Операция.ПроведеноБанком КАК ПроведеноБанком,
	|	Операция.ПометкаУдаления КАК ПометкаУдаления
	|ПОМЕСТИТЬ втДанныеДокументов
	|ИЗ
	|	втЗначимыеСтроки КАК втЗначимыеСтроки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК Операция
	|		ПО втЗначимыеСтроки.ДокументАванса = Операция.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ТабличнаяЧасть
	|		ПО втЗначимыеСтроки.ДокументАванса = ТабличнаяЧасть.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовВВалютеРегл КАК СуммыДокументовВВалютеРегл
	|		ПО (НЕ втЗначимыеСтроки.ДоговорВВалютеРегл)
	|			И (ТабличнаяЧасть.Ссылка = СуммыДокументовВВалютеРегл.Регистратор)
	|			И (ТабличнаяЧасть.ИдентификаторСтроки = СуммыДокументовВВалютеРегл.ИдентификаторСтроки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА втДанныеДокументов.Ссылка ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СоздатьДокумент,
	|	втЗначимыеСтроки.ДокументАванса КАК ДокументАванса,
	|	втЗначимыеСтроки.Контрагент КАК Контрагент,
	|	втЗначимыеСтроки.Договор КАК ДоговорЛизинга,
	|	втЗначимыеСтроки.ДоговорВВалютеРегл КАК ДоговорВВалютеРегл,
	|	втЗначимыеСтроки.Валюта КАК Валюта,
	|	втЗначимыеСтроки.Сумма КАК СуммаДокумента,
	|	втЗначимыеСтроки.Сумма КАК Сумма,
	|	втЗначимыеСтроки.Сумма КАК СуммаВзаиморасчетов,
	|	втЗначимыеСтроки.Валюта КАК ВалютаВзаиморасчетов,
	|	ИСТИНА КАК ПроведеноБанком,
	|	&Дата КАК Период,
	|	втЗначимыеСтроки.Сумма КАК СуммаБезНДС,
	|	втЗначимыеСтроки.СуммаРегл КАК СуммаБезНДСРегл,
	|	втЗначимыеСтроки.ИндексСтроки
	|ИЗ
	|	втЗначимыеСтроки КАК втЗначимыеСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеДокументов КАК втДанныеДокументов
	|		ПО втЗначимыеСтроки.ДокументАванса = втДанныеДокументов.Ссылка
	|ГДЕ
	|	(втДанныеДокументов.Ссылка ЕСТЬ NULL 
	|			ИЛИ НЕ втДанныеДокументов.Проведен
	|			ИЛИ втДанныеДокументов.ПометкаУдаления
	|			ИЛИ втДанныеДокументов.Дата <> &Дата
	|			ИЛИ втДанныеДокументов.ХозяйственнаяОперация <> &ХозяйственнаяОперация
	|			ИЛИ втДанныеДокументов.Организация <> &Организация
	|			ИЛИ втДанныеДокументов.ПроведеноБанком <> &ПроведеноБанком
	|			ИЛИ втДанныеДокументов.Контрагент <> втЗначимыеСтроки.Контрагент
	|			ИЛИ втДанныеДокументов.ДоговорЛизинга <> втЗначимыеСтроки.Договор
	|			ИЛИ втДанныеДокументов.Валюта <> втЗначимыеСтроки.Валюта
	|			ИЛИ втДанныеДокументов.СуммаДокумента <> втЗначимыеСтроки.Сумма
	|			ИЛИ втДанныеДокументов.СуммаБезНДСРегл <> втЗначимыеСтроки.СуммаРегл
	|			ИЛИ втДанныеДокументов.ТипПлатежаПоЛизингу <> &ТипПлатежаПоЛизингу)";
	#КонецОбласти
	
	ПоляДокументаАванса = "СоздатьДокумент, ДокументАванса,
	|Организация, Дата, ДатаПроведенияБанком, Период, ХозяйственнаяОперация, ТипПлатежаПоЛизингу, ПроведеноБанком,
	|Контрагент, ДоговорЛизинга, ДоговорВВалютеРегл, Валюта, ВалютаВзаиморасчетов,
	|СуммаДокумента, Сумма, СуммаБезНДС, СуммаБезНДСРегл, СуммаВзаиморасчетов,
	|Комментарий";
	
	Пакет = Запрос.ВыполнитьПакет();
	
	// Удаление не используемых документов аванса
	Выборка = Пакет[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Пометить на удаление документ аванса
		ОбъектДокумента = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектДокумента.ПометкаУдаления = Истина;
		ОбъектДокумента.Проведен = Ложь;
		ОбъектДокумента.Записать(РежимЗаписиДокумента.Запись);
		
		// Стереть записи в регистре сумм в валюте регл. учета
		НаборЗаписей = РегистрыСведений.СуммыДокументовВВалютеРегл.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Ссылка);
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	МассивОбновляемыхДокументов = Новый Массив;
	Выборка = Пакет[4].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		РеквизитыДокументаАванса = Новый Структура(ПоляДокументаАванса);
		ЗаполнитьЗначенияСвойств(РеквизитыДокументаАванса, ЗначенияРеквизитов);
		ЗаполнитьЗначенияСвойств(РеквизитыДокументаАванса, Выборка);
		
		Если Выборка.СоздатьДокумент Тогда
			РеквизитыДокументаАванса.ДокументАванса = Документы.СписаниеБезналичныхДенежныхСредств.ПолучитьСсылку();
			РасчетыПоДоговорамЛизинга[Выборка.ИндексСтроки].ДокументАванса = РеквизитыДокументаАванса.ДокументАванса;
		КонецЕсли;
		
		МассивОбновляемыхДокументов.Добавить(РеквизитыДокументаАванса);
		
	КонецЦикла;
	
	ДополнительныеСвойства.Вставить("МассивОбновляемыхДокументов", МассивОбновляемыхДокументов);
	
КонецПроцедуры

Процедура СоздатьУдалитьДокументыАвансовПриЗаписи()
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Запись
		Или Не ДополнительныеСвойства.Свойство("МассивОбновляемыхДокументов") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	КомментарийДокументаАванса = НСтр("ru = 'Создан автоматически при вводе начальных остатков взаиморасчетов по договору лизинга документом ""%1"".
                                       |Используется для формирования счетов-фактур на аванс по обеспечительному платежу.'");
	КомментарийДокументаАванса = СтрШаблон(КомментарийДокументаАванса, ЭтотОбъект.Ссылка);
	
	Для Каждого ОписаниеДокумента Из ДополнительныеСвойства.МассивОбновляемыхДокументов Цикл
		
		ОбъектДокумента = Неопределено;
		Если ОписаниеДокумента.СоздатьДокумент Тогда
			ОбъектДокумента = Документы.СписаниеБезналичныхДенежныхСредств.СоздатьДокумент();
			ОбъектДокумента.УстановитьСсылкуНового(ОписаниеДокумента.ДокументАванса);
		Иначе
			ОбъектДокумента = ОписаниеДокумента.ДокументАванса.ПолучитьОбъект();
		КонецЕсли;
		
		ОбъектДокумента.Проведен = Истина;
		ОбъектДокумента.ПометкаУдаления = Ложь;
		ЗаполнитьЗначенияСвойств(ОбъектДокумента, ОписаниеДокумента);
		
		ОбъектДокумента.РасшифровкаПлатежа.Очистить();
		СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, ОписаниеДокумента);
		СтрокаРасшифровки.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		
		ОбъектДокумента.Комментарий = КомментарийДокументаАванса;
		
		ОбъектДокумента.Записать(РежимЗаписиДокумента.Запись);
		
		НаборЗаписей = РегистрыСведений.СуммыДокументовВВалютеРегл.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ОбъектДокумента.Ссылка);
		Если Не ОписаниеДокумента.ДоговорВВалютеРегл Тогда
			СтрокаНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, ОписаниеДокумента);
			СтрокаНабора.Регистратор = ОбъектДокумента.Ссылка;
		КонецЕсли;
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура СформироватьСписокРегистровДляКонтроля()
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Новый Массив);
	
КонецПроцедуры

Процедура ИнициализироватьДокументПередЗаполнением()
	
	Ответственный = Пользователи.ТекущийПользователь();
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковВложенийВоВнеоборотныеАктивы Тогда
		ВидАктивов = Перечисления.ВидыВнеоборотныхАктивов.ОсновноеСредство;
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковОсновныхСредств 
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПредметовЛизингаНаБалансе
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуОС
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуПредметовЛизингаНаБалансе
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковНМАиРасходовНаНИОКР
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковВложенийВоВнеоборотныеАктивы Тогда
		ОтражатьВУпрУчете = Истина;
	КонецЕсли;
	
	Если ВнеоборотныеАктивыСлужебный.ДоступенВыборОтраженияВУчетах(Дата) Тогда
		ОтражатьВРеглУчете = Истина;
	Иначе
		ОтражатьВРеглУчете = Ложь;
	КонецЕсли;
	
	НалогообложениеНДС = Справочники.Организации.НалогообложениеНДС(Организация,, ТекущаяДатаСеанса());
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли