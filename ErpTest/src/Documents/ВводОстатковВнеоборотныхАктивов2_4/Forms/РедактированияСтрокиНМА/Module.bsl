
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	СохраняемыеРеквизиты  = Параметры.СохраняемыеРеквизиты;
	ХозяйственнаяОперация = Параметры.ХозяйственнаяОперация;
	Организация = Параметры.Организация;
	Подразделение = Параметры.Подразделение;
	ОтражатьВУпрУчете = Параметры.ОтражатьВУпрУчете;
	ОтражатьВРеглУчете = Параметры.ОтражатьВРеглУчете;
	Дата = Параметры.Дата;
	Ссылка = Параметры.Ссылка;
	
	Если Параметры.Свойство("ЗначенияРеквизитов") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры.ЗначенияРеквизитов);
		
		РезервПереоценкиСтоимостиРеглСумма = ?(РезервПереоценкиСтоимостиРегл < 0, -РезервПереоценкиСтоимостиРегл, РезервПереоценкиСтоимостиРегл);
		РезервПереоценкиАмортизацииРеглСумма = ?(РезервПереоценкиАмортизацииРегл < 0, -РезервПереоценкиАмортизацииРегл, РезервПереоценкиАмортизацииРегл);
		РезервПереоценкиРеглЗнак = (РезервПереоценкиСтоимостиРегл > 0);
		
		РезервПереоценкиСтоимостиСумма = ?(РезервПереоценкиСтоимости < 0, -РезервПереоценкиСтоимости, РезервПереоценкиСтоимости);
		РезервПереоценкиАмортизацииСумма = ?(РезервПереоценкиАмортизации < 0, -РезервПереоценкиАмортизации, РезервПереоценкиАмортизации);
		РезервПереоценкиЗнак = (РезервПереоценкиСтоимости > 0);
		
	КонецЕсли;
	
	ПриЧтенииСозданииНаСервере();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗавершениеРаботы И Модифицированность Тогда
		
		Отказ = Истина;
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтаФорма),
			НСтр("ru='Данные были изменены. Сохранить изменения?'"),
			РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ВспомогательныеРеквизиты = Документы.ВводОстатковВнеоборотныхАктивов2_4.ВспомогательныеРеквизиты(
										ЭтаФорма, Истина, ЕстьСвязанныеОрганизации);
										
	ПараметрыРеквизитовОбъекта = ВнеоборотныеАктивыКлиентСервер.ЗначенияСвойствЗависимыхРеквизитов_ВводОстатков(ЭтаФорма, ВспомогательныеРеквизиты);
	
	ВнеоборотныеАктивыСлужебный.ОтключитьПроверкуЗаполненияРеквизитовОбъекта(ПараметрыРеквизитовОбъекта, МассивНепроверяемыхРеквизитов);
	
	ПроверитьЗаполнениеАналитик(ПараметрыРеквизитовОбъекта, МассивНепроверяемыхРеквизитов, Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_НематериальныеАктивы" И Источник = НематериальныйАктив Тогда
		ЗаполнитьСведенияНМА();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область СтраницаУчет

&НаКлиенте
Процедура ДатаПринятияКУчетуБУПриИзменении(Элемент)
	
	Если ОтражатьВУпрУчете 
		И ЗначенияРеквизитовДоИзменения.ДатаПринятияКУчетуБУ = ЗначенияРеквизитовДоИзменения.ДатаПринятияКУчетуУУ Тогда
		ДатаПринятияКУчетуУУ = ДатаПринятияКУчетуБУ;
		ЗаполнитьЗначенияРеквизитовДоИзменения(ЭтаФорма);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура НематериальныйАктивПриИзменении(Элемент)
	
	НематериальныйАктивПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименениеЦелевогоФинансированияПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокУчетаБУПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(Элемент);
	
	ПересчитатьЗависимыеСуммы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокУчетаНУПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(Элемент);
	
	ПересчитатьЗависимыеСуммы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокУчетаУУПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(Элемент);
	
	ПересчитатьЗависимыеСуммы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаФинансовогоУчетаПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаСтоимость

&НаКлиенте
Процедура ТекущаяСтоимостьУУПриИзменении(Элемент)
	
	ПересчитатьЗависимыеСуммы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НакопленнаяАмортизацияУУПриИзменении(Элемент)
	
	ПересчитатьЗависимыеСуммы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПервоначальнаяСтоимостьУУПриИзменении(Элемент)
	
	ПересчитатьЗависимыеСуммы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяСтоимостьБУПриИзменении(Элемент)
	
	СуммаНУ = ТекущаяСтоимостьБУ - ТекущаяСтоимостьПР - ТекущаяСтоимостьВР;
	Если СуммаНУ < 0 Тогда
		ТекущаяСтоимостьНУ = 0;
		ТекущаяСтоимостьВР = ТекущаяСтоимостьБУ - ТекущаяСтоимостьНУ - ТекущаяСтоимостьПР;
	Иначе
		ТекущаяСтоимостьНУ = СуммаНУ;
	КонецЕсли;
	
	Если Элементы.ТекущаяСтоимостьУУ.Видимость 
		И ВалютаУпр = ВалютаРегл
		И ЗначенияРеквизитовДоИзменения.ТекущаяСтоимостьБУ = ЗначенияРеквизитовДоИзменения.ТекущаяСтоимостьУУ Тогда
		ТекущаяСтоимостьУУ = ТекущаяСтоимостьБУ;
	КонецЕсли; 
	
	Если Элементы.ТекущаяСтоимостьНУ.Видимость 
		И ЗначенияРеквизитовДоИзменения.ТекущаяСтоимостьБУ = ЗначенияРеквизитовДоИзменения.ТекущаяСтоимостьНУ Тогда
		ТекущаяСтоимостьНУ = ТекущаяСтоимостьБУ;
	КонецЕсли; 
	
	ПересчитатьЗависимыеСуммы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НакопленнаяАмортизацияБУПриИзменении(Элемент)
	
	СуммаНУ = НакопленнаяАмортизацияБУ - НакопленнаяАмортизацияПР - НакопленнаяАмортизацияВР;
	Если СуммаНУ < 0 Тогда
		НакопленнаяАмортизацияНУ = 0;
		НакопленнаяАмортизацияВР = НакопленнаяАмортизацияБУ - НакопленнаяАмортизацияНУ - НакопленнаяАмортизацияПР;
	Иначе
		НакопленнаяАмортизацияНУ = СуммаНУ;
	КонецЕсли;
	
	Если Элементы.НакопленнаяАмортизацияУУ.Видимость 
		И ВалютаУпр = ВалютаРегл
		И ЗначенияРеквизитовДоИзменения.НакопленнаяАмортизацияБУ = ЗначенияРеквизитовДоИзменения.НакопленнаяАмортизацияУУ Тогда
		НакопленнаяАмортизацияУУ = НакопленнаяАмортизацияБУ;
	КонецЕсли; 
	
	Если Элементы.НакопленнаяАмортизацияНУ.Видимость 
		И ЗначенияРеквизитовДоИзменения.НакопленнаяАмортизацияБУ = ЗначенияРеквизитовДоИзменения.НакопленнаяАмортизацияНУ Тогда
		НакопленнаяАмортизацияНУ = НакопленнаяАмортизацияБУ;
	КонецЕсли; 
	
	ПересчитатьЗависимыеСуммы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяСтоимостьНУПриИзменении(Элемент)
	
	ПересчитатьЗависимыеСуммы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяСтоимостьПРПриИзменении(Элемент)
	
	ПересчитатьЗависимыеСуммы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяСтоимостьБУЦФПриИзменении(Элемент)
	
	ПересчитатьЗависимыеСуммы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПервоначальнаяСтоимостьБУПриИзменении(Элемент)
	
	Если Элементы.ПервоначальнаяСтоимостьУУ.Видимость 
		И ВалютаУпр = ВалютаРегл
		И ЗначенияРеквизитовДоИзменения.ПервоначальнаяСтоимостьБУ = ЗначенияРеквизитовДоИзменения.ПервоначальнаяСтоимостьУУ Тогда
		ПервоначальнаяСтоимостьУУ = ПервоначальнаяСтоимостьБУ;
	КонецЕсли; 
	
	Если Элементы.ПервоначальнаяСтоимостьНУ.Видимость 
		И ЗначенияРеквизитовДоИзменения.ПервоначальнаяСтоимостьБУ = ЗначенияРеквизитовДоИзменения.ПервоначальнаяСтоимостьНУ Тогда
		ПервоначальнаяСтоимостьНУ = ПервоначальнаяСтоимостьБУ;
	КонецЕсли; 
	
	ПересчитатьЗависимыеСуммы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПервоначальнаяСтоимостьНУПриИзменении(Элемент)
	
	ПересчитатьЗависимыеСуммы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НакопленнаяАмортизацияНУПриИзменении(Элемент)
	
	ПересчитатьЗависимыеСуммы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НакопленнаяАмортизацияПРПриИзменении(Элемент)
	
	ПересчитатьЗависимыеСуммы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НакопленнаяАмортизацияБУЦФПриИзменении(Элемент)
	
	ПересчитатьЗависимыеСуммы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПервоначальнаяСтоимостьОтличаетсяПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаСобытия

&НаКлиенте
Процедура ЕстьРезервПереоценкиРеглПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьРезервПереоценкиПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РезервПереоценкиСтоимостиРеглСуммаПриИзменении(Элемент)
	
	Если ТекущаяСтоимостьБУ <> 0 И РезервПереоценкиСтоимостиРеглСумма <> 0 Тогда
		МножительЦФ = ?(ПрименениеЦелевогоФинансирования, 1, 0);
		РезервПереоценкиАмортизацииРеглСумма = 
			(НакопленнаяАмортизацияБУ + МножительЦФ*НакопленнаяАмортизацияБУЦФ)
			* (РезервПереоценкиСтоимостиРеглСумма / (ТекущаяСтоимостьБУ + МножительЦФ*ТекущаяСтоимостьБУ));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезервПереоценкиСтоимостиСуммаПриИзменении(Элемент)
	
	Если ТекущаяСтоимостьУУ <> 0 И РезервПереоценкиСтоимостиСумма <> 0 Тогда
		РезервПереоценкиАмортизацииСумма = 
			НакопленнаяАмортизацияУУ
			* (РезервПереоценкиСтоимостиСумма / ТекущаяСтоимостьУУ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаАмортизация

&НаКлиенте
Процедура СрокИспользованияБУПриИзменении(Элемент)
	
	ПриИзмененииСрокаИспользования("СрокИспользованияБУ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИспользованияНУПриИзменении(Элемент)
	
	ПриИзмененииСрокаИспользования("СрокИспользованияНУ", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИспользованияУУПриИзменении(Элемент)
	
	ПриИзмененииСрокаИспользования("СрокИспользованияУУ", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИспользованияНУДо2009ПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(Элемент);		
	
КонецПроцедуры

&НаКлиенте
Процедура МетодНачисленияАмортизацииБУПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура МетодНачисленияАмортизацииУУПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура МетодНачисленияАмортизацииНУПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаОтражениеРасходов

&НаКлиенте
Процедура СтатьяРасходовБУПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(СтатьяРасходовБУ) Тогда
		СтатьяРасходовБУПриИзмененииНаСервере();
	Иначе
		АналитикаРасходовБУ = Неопределено;
		АналитикаРасходовБУОбязательна = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовУУПриИзменении(Элемент)
	
	СтатьяРасходовУУПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДоходовПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(СтатьяДоходов) Тогда
		СтатьяДоходовПриИзмененииНаСервере();
	Иначе
		АналитикаДоходовОбязательна = Ложь;
		АналитикаДоходов = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередаватьРасходыВДругуюОрганизациюПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(Элемент);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ЗавершитьРедактирование();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПриИзмененииРеквизитов

&НаКлиенте
Процедура НастроитьЗависимыеЭлементыФормы(Знач ИзмененныеРеквизитыИлиЭлемент = "")

	Если ТипЗнч(ИзмененныеРеквизитыИлиЭлемент) = Тип("Строка") Тогда
		ИзмененныеРеквизиты = ИзмененныеРеквизитыИлиЭлемент;
	Иначе
		ИзмененныеРеквизиты = ИзмененныеРеквизитыИлиЭлемент.Имя;
	КонецЕсли;
	
	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	
	Если ТребуетсяВызовСервераДляНастройкиЭлементовФормы(СтруктураИзмененныхРеквизитов) Тогда
		НастроитьЗависимыеЭлементыФормыНаСервере(ИзмененныеРеквизиты)
	Иначе
		НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтаФорма, ИзмененныеРеквизиты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(Форма, ИзмененныеРеквизиты)

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = ВнеоборотныеАктивыКлиентСервер.ЗначенияСвойствЗависимыхРеквизитов_ВводОстатков(
									Форма, Форма.ВспомогательныеРеквизиты, ИзмененныеРеквизиты);
	
	ВнеоборотныеАктивыКлиентСервер.НастроитьЗависимыеЭлементыФормы(Форма, ПараметрыРеквизитовОбъекта);
	
	Если НЕ ОбновитьВсе Тогда
		ВнеоборотныеАктивыКлиентСервер.ОчиститьНеиспользуемыеРеквизиты(Форма, ПараметрыРеквизитовОбъекта);
		ИзмененныеРеквизиты = ВнеоборотныеАктивыКлиентСервер.ЗаполнитьРеквизитыВзависимостиОтСвойств_ВводОстатков(
				Форма, ПараметрыРеквизитовОбъекта);
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	
	ЭтоНИОКР = Форма.ВидАктива = ПредопределенноеЗначение("Перечисление.ВидыВнеоборотныхАктивов.НИОКР");
	
	СтоимостьБУДоступна = (Форма.ПорядокУчетаБУ <> ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.СписыватьПриПринятииКУчету"));
	
	АмортизацияБУДоступна = 
		Форма.ОтражатьВРеглУчете
		И (Форма.ПорядокУчетаБУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию")
			ИЛИ Форма.ПорядокУчетаНУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию")
			ИЛИ Форма.ПорядокУчетаНУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.ПустаяСсылка"));
			
	АмортизацияУУДоступна = 
		Форма.ОтражатьВУпрУчете
		И (Форма.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию")
			ИЛИ Форма.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.ПустаяСсылка"));
			
	ДоступныПараметрыАмортизацииБУ = Форма.ПорядокУчетаБУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию")
									И Форма.ВспомогательныеРеквизиты.ОтражатьВРеглУчете;
	
	ДоступныПараметрыАмортизацииНУ = Форма.ПорядокУчетаНУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию")
									И Форма.ВспомогательныеРеквизиты.ОтражатьВРеглУчете
									И Форма.ПлательщикНалогаНаПрибыль;
	
	ДоступныПараметрыАмортизацииУУ = Форма.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию")
									И Форма.ВспомогательныеРеквизиты.ОтражатьВУпрУчете;
									
	#Область СтраницаПараметрыУчета
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ВидОбъектаУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЭлементПорядокУчета = Элементы.ПорядокУчетаНУ.СписокВыбора.НайтиПоЗначению(
									ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.СписыватьПриПринятииКУчету"));
		
		Если Форма.ВидОбъектаУчета = ПредопределенноеЗначение("Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР") Тогда
			Элементы.ПорядокУчетаБУ.СписокВыбора[0].Представление = НСтр("ru = 'Списание расходов'");
			Элементы.ПорядокУчетаНУ.СписокВыбора[0].Представление = НСтр("ru = 'Списание расходов'");
			Элементы.ПорядокУчетаУУ.СписокВыбора[0].Представление = НСтр("ru = 'Списание расходов'");
		Иначе
			Элементы.ПорядокУчетаБУ.СписокВыбора[0].Представление = НСтр("ru = 'Начисление амортизации'");
			Элементы.ПорядокУчетаНУ.СписокВыбора[0].Представление = НСтр("ru = 'Начисление амортизации'");
			Элементы.ПорядокУчетаУУ.СписокВыбора[0].Представление = НСтр("ru = 'Начисление амортизации'");
		КонецЕсли; 
		
	КонецЕсли;	
	
	Если ОбновитьВсе Тогда
		Если Форма.ОтражатьВРеглУчете И НЕ Форма.ОтражатьВУпрУчете Тогда
			Элементы.ДатаПринятияКУчетуБУ.Заголовок = НСтр("ru = 'Принят к учету'");
		ИначеЕсли Форма.ОтражатьВРеглУчете И Форма.ОтражатьВУпрУчете Тогда
			Элементы.ДатаПринятияКУчетуБУ.Заголовок = НСтр("ru = 'Принят к учету (регл)'");
		КонецЕсли; 
		Если Форма.ОтражатьВУпрУчете И НЕ Форма.ОтражатьВРеглУчете Тогда
			Элементы.ДатаПринятияКУчетуУУ.Заголовок = НСтр("ru = 'Принят к учету'");
		ИначеЕсли Форма.ОтражатьВУпрУчете И Форма.ОтражатьВРеглУчете Тогда
			Элементы.ДатаПринятияКУчетуУУ.Заголовок = НСтр("ru = 'Принят к учету (упр)'");
		КонецЕсли; 
	КонецЕсли;	
	
	#КонецОбласти
	
	#Область СтраницаСтоимость
	
	БезАмортизацииБУ = 
		НЕ Форма.ОтражатьВРеглУчете
		ИЛИ (Форма.ПорядокУчетаБУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НеНачислятьАмортизацию")
				И Форма.ПорядокУчетаНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы"))
		ИЛИ Форма.ПорядокУчетаБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ");
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПрименениеЦелевогоФинансирования")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ВидОбъектаУчета")
		ИЛИ ОбновитьВсе Тогда
		
		Если Форма.ПрименениеЦелевогоФинансирования Тогда
			
			Элементы.ГруппаТекущаяСтоимостьЗаголовок.Заголовок       = НСтр("ru = 'Собственные средства:'");
			Элементы.ГруппаНакопленнаяАмортизацияЗаголовок.Заголовок = НСтр("ru = 'Собственные средства:'");
			Элементы.ГруппаОстаточнаяСтоимостьЗаголовок.Заголовок    = НСтр("ru = 'Собственные средства:'");
			
			Элементы.ГруппаТекущаяСтоимостьЗаголовокЦФ.Видимость       = Истина;
			Элементы.ДекорацияТекущаяСтоимостьУУЦФ.Видимость           = Истина;
			Элементы.ДекорацияНакопленнаяАмортизацияУУЦФ.Видимость     = НЕ ЭтоНИОКР;
			Элементы.ДекорацияОстаточнаяСтоимостьУУЦФ.Видимость        = НЕ ЭтоНИОКР;
			Элементы.ГруппаНакопленнаяАмортизацияЗаголовокЦФ.Видимость = НЕ ЭтоНИОКР;
			Элементы.ГруппаОстаточнаяСтоимостьЗаголовокЦФ.Видимость    = НЕ ЭтоНИОКР;
			
		Иначе
			
			Элементы.ГруппаТекущаяСтоимостьЗаголовок.Заголовок       = НСтр("ru = 'Сумма:'");
			Элементы.ГруппаНакопленнаяАмортизацияЗаголовок.Заголовок = НСтр("ru = 'Сумма:'");
			Элементы.ГруппаОстаточнаяСтоимостьЗаголовок.Заголовок    = НСтр("ru = 'Сумма:'");
			
			Элементы.ГруппаТекущаяСтоимостьЗаголовокЦФ.Видимость       = Ложь;
			Элементы.ДекорацияТекущаяСтоимостьУУЦФ.Видимость           = Ложь;
			Элементы.ДекорацияНакопленнаяАмортизацияУУЦФ.Видимость     = Ложь;
			Элементы.ДекорацияОстаточнаяСтоимостьУУЦФ.Видимость        = Ложь;
			Элементы.ГруппаНакопленнаяАмортизацияЗаголовокЦФ.Видимость = Ложь;
			Элементы.ГруппаОстаточнаяСтоимостьЗаголовокЦФ.Видимость    = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаБУ")
		ИЛИ ОбновитьВсе Тогда
		
		Если Форма.ПорядокУчетаБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ")
			И Форма.ОтражатьВРеглУчете И НЕ Форма.ОтражатьВУпрУчете Тогда
			Элементы.ГруппаНакопленнаяАмортизация.Заголовок = НСтр("ru = 'Накопленный износ'");
		Иначе
			Элементы.ГруппаНакопленнаяАмортизация.Заголовок = НСтр("ru = 'Накопленная амортизация'");
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаБУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПрименениеЦелевогоФинансирования")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = Форма.ПрименениеЦелевогоФинансирования И СтоимостьБУДоступна;
		Элементы.ТекущаяСтоимостьВРЦФ.Видимость = ЗначениеСвойства;
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаБУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаНУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ВидОбъектаУчета") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПрименениеЦелевогоФинансирования") 
		ИЛИ ОбновитьВсе Тогда
		
		АмортизацияЦФДоступна = АмортизацияБУДоступна
									И Форма.ПрименениеЦелевогоФинансирования
									И Форма.ВидОбъектаУчета <> ПредопределенноеЗначение("Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР");
		Элементы.НакопленнаяАмортизацияВРЦФ.Видимость = АмортизацияЦФДоступна;
		
	КонецЕсли;
	
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаБУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаНУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ВидОбъектаУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ВидимостьЭлемента = НЕ БезАмортизацииБУ И НЕ ЭтоНИОКР;
		Элементы.ОстаточнаяСтоимостьБУ.Видимость = ВидимостьЭлемента;
		Элементы.ОстаточнаяСтоимостьНУ.Видимость = ВидимостьЭлемента И Форма.ПлательщикНалогаНаПрибыль;
		Элементы.ОстаточнаяСтоимостьВР.Видимость = ВидимостьЭлемента И Форма.ПлательщикНалогаНаПрибыль И Форма.ПоддержкаПБУ18;
		Элементы.ОстаточнаяСтоимостьПР.Видимость = ВидимостьЭлемента И Форма.ПлательщикНалогаНаПрибыль И Форма.ПоддержкаПБУ18;
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаБУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаНУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ВидОбъектаУчета")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПрименениеЦелевогоФинансирования")
		ИЛИ ОбновитьВсе Тогда
		
		ВидимостьЭлемента = НЕ БезАмортизацииБУ И Форма.ПрименениеЦелевогоФинансирования И НЕ ЭтоНИОКР;
		Элементы.ОстаточнаяСтоимостьБУЦФ.Видимость = ВидимостьЭлемента;
		Элементы.ОстаточнаяСтоимостьНУЦФ.Видимость = ВидимостьЭлемента И Форма.ПлательщикНалогаНаПрибыль;
		Элементы.ОстаточнаяСтоимостьПРЦФ.Видимость = ВидимостьЭлемента И Форма.ПлательщикНалогаНаПрибыль И Форма.ПоддержкаПБУ18;
		Элементы.ОстаточнаяСтоимостьВРЦФ.Видимость = ВидимостьЭлемента И Форма.ПлательщикНалогаНаПрибыль И Форма.ПоддержкаПБУ18;
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаБУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаНУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ ОбновитьВсе Тогда
		
		Если Элементы.НакопленнаяАмортизацияУУ.Видимость 
			И Элементы.ТекущаяСтоимостьБУ.Видимость
			И НЕ Элементы.НакопленнаяАмортизацияБУ.Видимость Тогда
			
			Элементы.НакопленнаяАмортизацияБУ.Видимость = Истина;
			Элементы.НакопленнаяАмортизацияБУ.ТолькоПросмотр = Истина;
		Иначе
			Элементы.НакопленнаяАмортизацияБУ.ТолькоПросмотр = Ложь;
		КонецЕсли;
		Если Элементы.НакопленнаяАмортизацияУУ.Видимость 
			И Элементы.ТекущаяСтоимостьНУ.Видимость
			И НЕ Элементы.НакопленнаяАмортизацияНУ.Видимость Тогда
			
			Элементы.НакопленнаяАмортизацияНУ.Видимость = Истина;
			Элементы.НакопленнаяАмортизацияНУ.ТолькоПросмотр = Истина;
		Иначе
			Элементы.НакопленнаяАмортизацияНУ.ТолькоПросмотр = Ложь;
		КонецЕсли;
		Если Элементы.НакопленнаяАмортизацияУУ.Видимость 
			И Элементы.ТекущаяСтоимостьПР.Видимость
			И НЕ Элементы.НакопленнаяАмортизацияПР.Видимость Тогда
			
			Элементы.НакопленнаяАмортизацияПР.Видимость = Истина;
			Элементы.НакопленнаяАмортизацияПР.ТолькоПросмотр = Истина;
		Иначе
			Элементы.НакопленнаяАмортизацияПР.ТолькоПросмотр = Ложь;
		КонецЕсли;
		Если Элементы.НакопленнаяАмортизацияУУ.Видимость 
			И Элементы.ТекущаяСтоимостьВР.Видимость
			И НЕ Элементы.НакопленнаяАмортизацияВР.Видимость Тогда
			
			Элементы.НакопленнаяАмортизацияВР.Видимость = Истина;
			Элементы.НакопленнаяАмортизацияВР.ТолькоПросмотр = Истина;
		Иначе
			Элементы.НакопленнаяАмортизацияВР.ТолькоПросмотр = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ВидОбъектаУчета")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ ОбновитьВсе Тогда
		ЗначениеСвойства = Форма.ВидОбъектаУчета <> ПредопределенноеЗначение("Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР")
							И АмортизацияУУДоступна;
		Элементы.ОстаточнаяСтоимостьУУ.Видимость = ЗначениеСвойства;
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ТекущаяСтоимостьУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ТекущаяСтоимостьБУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ТекущаяСтоимостьНУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ТекущаяСтоимостьПР")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ТекущаяСтоимостьВР")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ТекущаяСтоимостьВРЦФ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПервоначальнаяСтоимостьБУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПервоначальнаяСтоимостьНУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПервоначальнаяСтоимостьПР")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("НакопленнаяАмортизацияУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("НакопленнаяАмортизацияБУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("НакопленнаяАмортизацияНУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("НакопленнаяАмортизацияПР")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("НакопленнаяАмортизацияВР")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("НакопленнаяАмортизацияВРЦФ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ТекущаяСтоимостьБУЦФ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ТекущаяСтоимостьНУЦФ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ТекущаяСтоимостьПРЦФ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("НакопленнаяАмортизацияБУЦФ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("НакопленнаяАмортизацияНУЦФ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("НакопленнаяАмортизацияПРЦФ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПервоначальнаяСтоимостьОтличается")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПрименениеЦелевогоФинансирования")
		ИЛИ ОбновитьВсе Тогда
		
		ПересчитатьЗависимыеСуммы(Форма);
	КонецЕсли; 
	
	Элементы.ГруппаНакопленнаяАмортизацияЗаголовок.Видимость = 
		Элементы.НакопленнаяАмортизацияУУ.Видимость 
		ИЛИ Элементы.НакопленнаяАмортизацияБУ.Видимость;
	
	Элементы.ГруппаОстаточнаяСтоимостьЗаголовок.Видимость = 
		Элементы.ОстаточнаяСтоимостьУУ.Видимость 
		ИЛИ Элементы.ОстаточнаяСтоимостьБУ.Видимость;
		
	Элементы.ДекорацияЗаголовокБУ.Видимость = Элементы.ТекущаяСтоимостьБУ.Видимость;
	Элементы.ДекорацияЗаголовокУУ.Видимость = Элементы.ТекущаяСтоимостьУУ.Видимость;
		
	#КонецОбласти
	
	#Область СтраницаСобытия
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		ИЛИ ОбновитьВсе Тогда
		
		Если Форма.ОтражатьВУпрУчете Тогда
			ЗаголовокГруппы = НСтр("ru = 'Переоценка (бухгалтерский учет)'");
		Иначе
			ЗаголовокГруппы = НСтр("ru = 'Переоценка'");
		КонецЕсли; 
		Элементы.ГруппаПереоценкаРегл.Заголовок = ЗаголовокГруппы;
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ ОбновитьВсе Тогда
		
		Если Форма.ОтражатьВРеглУчете Тогда
			ЗаголовокГруппы = НСтр("ru = 'Переоценка (управленческий учет)'");
		Иначе
			ЗаголовокГруппы = НСтр("ru = 'Переоценка'");
		КонецЕсли; 
		Элементы.ГруппаПереоценкаУпр.Заголовок = ЗаголовокГруппы;
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ЕстьРезервПереоценкиРегл")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = Не Форма.ЕстьРезервПереоценкиРегл;
		Элементы.РезервПереоценкиРеглЗнак.ТолькоПросмотр = ЗначениеСвойства; 
		Элементы.РезервПереоценкиСтоимостиРеглСумма.ТолькоПросмотр = ЗначениеСвойства; 
		Элементы.РезервПереоценкиАмортизацииРеглСумма.ТолькоПросмотр = ЗначениеСвойства; 
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ЕстьРезервПереоценки")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = Не Форма.ЕстьРезервПереоценки;
		Элементы.РезервПереоценкиЗнак.ТолькоПросмотр = ЗначениеСвойства; 
		Элементы.РезервПереоценкиСтоимостиСумма.ТолькоПросмотр = ЗначениеСвойства; 
		Элементы.РезервПереоценкиАмортизацииСумма.ТолькоПросмотр = ЗначениеСвойства; 
			
	КонецЕсли;
	
	#КонецОбласти
	
	#Область СтраницаАмортизация
	Если СтруктураИзмененныхРеквизитов.Свойство("ВидОбъектаУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ВнеоборотныеАктивыКлиентСервер.УстановитьВидимостьЗначенияСпискаВыбора(
			Элементы.МетодНачисленияАмортизацииБУ.СписокВыбора,
			НЕ Форма.ВидОбъектаУчета = ПредопределенноеЗначение("Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР"),
			ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка"),
			1);
		
		Если Форма.ВидОбъектаУчета = ПредопределенноеЗначение("Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР") Тогда
			
			Элементы.СтраницаАмортизация.Заголовок = НСтр("ru='Списание расходов'");
			
			Элементы.МетодНачисленияАмортизацииБУ.Заголовок = НСтр("ru='Способ списания'");
			Элементы.МетодНачисленияАмортизацииУУ.Заголовок = НСтр("ru='Способ списания'");
			Элементы.СрокИспользованияБУ.Заголовок = НСтр("ru='Срок списания'");
			Элементы.СрокИспользованияНУ.Заголовок = НСтр("ru='Срок списания'");
			Элементы.СрокИспользованияУУ.Заголовок = НСтр("ru='Срок списания'");

			Если Форма.МетодНачисленияАмортизацииБУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка") Тогда
				Форма.МетодНачисленияАмортизацииБУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.Линейный");
			КонецЕсли;
			
		Иначе
			
			Элементы.СтраницаАмортизация.Заголовок = НСтр("ru='Амортизация'");
			
			Элементы.МетодНачисленияАмортизацииБУ.Заголовок = НСтр("ru='Метод начисления'");
			Элементы.МетодНачисленияАмортизацииУУ.Заголовок = НСтр("ru='Метод начисления'");
			Элементы.СрокИспользованияБУ.Заголовок = НСтр("ru='Срок использования'");
			Элементы.СрокИспользованияНУ.Заголовок = НСтр("ru='Срок использования'");
			Элементы.СрокИспользованияУУ.Заголовок = НСтр("ru='Срок использования'");

		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("СтатьяРасходовУУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаБУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаНУ") 
		ИЛИ ОбновитьВсе Тогда
		
		ПроверкаНезаполненного = ВнеоборотныеАктивыКлиентСервер.ЗначениеСвойстваРеквизитаОбъекта(
									"СтатьяРасходовУУ", "АвтоОтметкаНезаполненного", ПараметрыРеквизитовОбъекта);
		
		Если ПроверкаНезаполненного = Истина ИЛИ ЗначениеЗаполнено(Форма.СтатьяРасходовУУ) Тогда
			Элементы.СтатьяРасходовУУ.ПодсказкаВвода = "";
			Элементы.АналитикаРасходовУУ.ПодсказкаВвода = "";
		ИначеЕсли ПроверкаНезаполненного = Ложь Тогда
			Если ДоступныПараметрыАмортизацииНУ Тогда
				ПодсказкаВводаСтатьи = НСтр("ru = 'совпадает с бухгалтерским и налоговым учетом'");
			Иначе
				ПодсказкаВводаСтатьи = НСтр("ru = 'совпадает с бухгалтерским учетом'");
			КонецЕсли;
			
			Элементы.СтатьяРасходовУУ.ПодсказкаВвода = ПодсказкаВводаСтатьи;
			Элементы.АналитикаРасходовУУ.ПодсказкаВвода = ПодсказкаВводаСтатьи;
		КонецЕсли; 
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("СрокИспользованияБУ")
		ИЛИ ОбновитьВсе Тогда
		
		Форма.СрокИспользованияБУРасшифровка = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(
			Форма.СрокИспользованияБУ);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("СрокИспользованияНУ")
		ИЛИ ОбновитьВсе Тогда
		
		Форма.СрокИспользованияНУРасшифровка = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(
			Форма.СрокИспользованияНУ);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("СрокИспользованияУУ")
		ИЛИ ОбновитьВсе Тогда
		
		Форма.СрокИспользованияУУРасшифровка = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(
			Форма.СрокИспользованияУУ);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("СрокИспользованияНУДо2009")
		ИЛИ ОбновитьВсе Тогда
		
		Форма.ФактическийСрокИспользованияНУРасшифровка = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(
			Форма.СрокИспользованияНУДо2009);
			
	КонецЕсли;
	
	Если ОбновитьВсе Тогда
		Если Форма.Дата < Форма.ВспомогательныеРеквизиты.ДатаНачалаУчета 
			И Форма.УпрУчетПоДаннымБУ
			И Форма.ОтражатьВУпрУчете Тогда
			Элементы.СрокИспользованияУУ.Заголовок = НСтр("ru = 'Остаточный срок'");
			Элементы.СрокИспользованияУУ.Подсказка = НСтр("ru = 'Остаточный срок на дату перехода'");
			Элементы.СрокИспользованияУУ.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		КонецЕсли; 
	КонецЕсли;
	
	Элементы.СрокИспользованияБУРасшифровка.Видимость = Элементы.СрокИспользованияБУ.Видимость;
	Элементы.СрокИспользованияНУРасшифровка.Видимость = Элементы.СрокИспользованияНУ.Видимость;
	Элементы.СрокИспользованияУУРасшифровка.Видимость = Элементы.СрокИспользованияУУ.Видимость;
	Элементы.ФактическийСрокИспользованияНУРасшифровка.Видимость = Элементы.СрокИспользованияНУДо2009.Видимость;
	
	#КонецОбласти
	
	#Область СтраницаОтражениеРасходов
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПрименениеЦелевогоФинансирования")
		ИЛИ ОбновитьВсе Тогда
		
		Если Форма.ПрименениеЦелевогоФинансирования Тогда
			Элементы.СтраницаОтражениеРасходов.Заголовок = НСтр("ru = 'Отражение доходов и расходов'");
		Иначе
			Элементы.СтраницаОтражениеРасходов.Заголовок = НСтр("ru = 'Отражение расходов'");
		КонецЕсли; 
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ВидОбъектаУчета") 
		ИЛИ ОбновитьВсе Тогда
		
		Если Форма.ВидОбъектаУчета = ПредопределенноеЗначение("Перечисление.ВидыОбъектовУчетаНМА.НематериальныйАктив") Тогда
			Если Форма.ОтражатьВРеглУчете И НЕ Форма.ОтражатьВУпрУчете Тогда
				Элементы.ГруппаРасходыРегл.Заголовок = НСтр("ru = 'Амортизация'");
			ИначеЕсли Форма.ОтражатьВРеглУчете И Форма.ОтражатьВУпрУчете Тогда
				Если ДоступныПараметрыАмортизацииНУ Тогда
					Элементы.ГруппаРасходыРегл.Заголовок = НСтр("ru = 'Амортизация (бухгалтерский и налоговый учет)'");
				Иначе
					Элементы.ГруппаРасходыРегл.Заголовок = НСтр("ru = 'Амортизация (бухгалтерский учет)'");
				КонецЕсли; 
			КонецЕсли; 
			Если Форма.ОтражатьВУпрУчете И НЕ Форма.ОтражатьВРеглУчете Тогда
				Элементы.ГруппаРасходыУУ.Заголовок   = НСтр("ru = 'Амортизация'");
			ИначеЕсли Форма.ОтражатьВУпрУчете И Форма.ОтражатьВРеглУчете Тогда
				Элементы.ГруппаРасходыУУ.Заголовок   = НСтр("ru = 'Амортизация (управленческий учет)'");
			КонецЕсли; 
		Иначе
			Если Форма.ОтражатьВРеглУчете И НЕ Форма.ОтражатьВУпрУчете Тогда
				Элементы.ГруппаРасходыРегл.Заголовок = НСтр("ru = 'Списание расходов'");
			ИначеЕсли Форма.ОтражатьВРеглУчете И Форма.ОтражатьВУпрУчете Тогда
				Если ДоступныПараметрыАмортизацииНУ Тогда
					Элементы.ГруппаРасходыРегл.Заголовок = НСтр("ru = 'Списание расходов (бухгалтерский и налоговый учет)'");
				Иначе
					Элементы.ГруппаРасходыРегл.Заголовок = НСтр("ru = 'Списание расходов (бухгалтерский учет)'");
				КонецЕсли; 
			КонецЕсли; 
			Если Форма.ОтражатьВУпрУчете И НЕ Форма.ОтражатьВРеглУчете Тогда
				Элементы.ГруппаРасходыУУ.Заголовок   = НСтр("ru = 'Списание расходов'");
			ИначеЕсли Форма.ОтражатьВУпрУчете И Форма.ОтражатьВРеглУчете Тогда
				Элементы.ГруппаРасходыУУ.Заголовок   = НСтр("ru = 'Списание расходов (управленческий учет)'");
			КонецЕсли; 
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	ЗаполнитьЗначенияРеквизитовДоИзменения(Форма);

КонецПроцедуры

&НаСервере
Процедура НастроитьЗависимыеЭлементыФормыНаСервере(Знач ИзмененныеРеквизитыИлиЭлемент = "")

	Если ТипЗнч(ИзмененныеРеквизитыИлиЭлемент) = Тип("Строка") Тогда
		ИзмененныеРеквизиты = ИзмененныеРеквизитыИлиЭлемент;
	Иначе
		ИзмененныеРеквизиты = ИзмененныеРеквизитыИлиЭлемент.Имя;
	КонецЕсли;
	
	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ВспомогательныеРеквизиты = Документы.ВводОстатковВнеоборотныхАктивов2_4.ВспомогательныеРеквизиты(
									ЭтаФорма, Истина, ЕстьСвязанныеОрганизации);
	
	НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтаФорма, ИзмененныеРеквизиты);

	Если СтруктураИзмененныхРеквизитов.Свойство("ГруппаФинансовогоУчета")
		ИЛИ ОбновитьВсе Тогда
		
		Если ЗначениеЗаполнено(ГруппаФинансовогоУчета) Тогда
			РеквизитыГФУ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ГруппаФинансовогоУчета, "СчетУчета,СчетУчетаЦФ,СчетУчетаАмортизации,СчетУчетаАмортизацииЦФ");
			ТекстСтоимость     = СтрШаблон(НСтр("ru = 'Для бухгалтерского и налогового учета определяется как остаток на счете %1'"), РеквизитыГФУ.СчетУчета);
			ТекстСтоимостьЦФ   = СтрШаблон(НСтр("ru = 'Для бухгалтерского и налогового учета определяется как остаток на счете %1'"), РеквизитыГФУ.СчетУчетаЦФ);
			ТекстАмортизация   = СтрШаблон(НСтр("ru = 'Для бухгалтерского и налогового учета определяется как остаток на счете %1'"), РеквизитыГФУ.СчетУчетаАмортизации);
			ТекстАмортизацияЦФ = СтрШаблон(НСтр("ru = 'Для бухгалтерского и налогового учета определяется как остаток на счете %1'"), РеквизитыГФУ.СчетУчетаАмортизацииЦФ);
		Иначе
			ТекстСтоимость     = НСтр("ru = 'Для бухгалтерского и налогового учета определяется как остаток на счете учета.'");
			ТекстСтоимостьЦФ   = НСтр("ru = 'Для бухгалтерского и налогового учета определяется как остаток на счете учета средств целевого финансирования.'");
			ТекстАмортизация   = НСтр("ru = 'Для бухгалтерского и налогового учета определяется как остаток на счете учета накопления амортизации.'");
			ТекстАмортизацияЦФ = НСтр("ru = 'Для бухгалтерского и налогового учета определяется как остаток на счете учета средств целевого финансирование в накопленной амортизации.'");
		КонецЕсли; 
		Элементы.ГруппаТекущаяСтоимостьЗаголовок.Подсказка = ТекстСтоимость;
		Элементы.ГруппаТекущаяСтоимостьЗаголовокЦФ.Подсказка = ТекстСтоимостьЦФ;
		Элементы.ГруппаНакопленнаяАмортизацияЗаголовок.Подсказка = ТекстАмортизация;
		Элементы.ГруппаНакопленнаяАмортизацияЗаголовокЦФ.Подсказка = ТекстАмортизацияЦФ;
	КонецЕсли; 
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ВидОбъектаУчета")
		ИЛИ ОбновитьВсе Тогда
		
		НастроитьПараметрыВыбораГФУ();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Функция ТребуетсяВызовСервераДляНастройкиЭлементовФормы(СтруктураИзмененныхРеквизитов)

	Если СтруктураИзмененныхРеквизитов.Количество() = 0
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ГруппаФинансовогоУчета") Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Возврат Ложь;

КонецФункции

&НаКлиенте
Процедура ПриИзмененииСрокаИспользования(ИмяРеквизита, ОбновитьЕслиСовпадают)

	СписокРеквизитов = ИмяРеквизита;
	
	СрокиИспользованияСовпадают = (НЕ ОтражатьВРеглУчете ИЛИ (ЗначенияРеквизитовДоИзменения.СрокИспользованияБУ = ЗначенияРеквизитовДоИзменения.СрокИспользованияНУ))
									И (НЕ ОтражатьВУпрУчете ИЛИ (ЗначенияРеквизитовДоИзменения.СрокИспользованияБУ = ЗначенияРеквизитовДоИзменения.СрокИспользованияУУ));
	
	Если ИмяРеквизита <> "СрокИспользованияУУ"
		И ОтражатьВУпрУчете
		И (СрокИспользованияУУ = 0
			ИЛИ СрокиИспользованияСовпадают И ОбновитьЕслиСовпадают) Тогда
		
		СрокИспользованияУУ = ЭтаФорма[ИмяРеквизита];
		СписокРеквизитов = СписокРеквизитов + ",СрокИспользованияУУ";
		
	КонецЕсли;
	
	Если ИмяРеквизита <> "СрокИспользованияБУ"
		И ОтражатьВУпрУчете
		И (СрокИспользованияНУ = 0
			ИЛИ СрокиИспользованияСовпадают И ОбновитьЕслиСовпадают) Тогда
		
		СрокИспользованияБУ = ЭтаФорма[ИмяРеквизита];
		СписокРеквизитов = СписокРеквизитов + ",СрокИспользованияБУ";
		
	КонецЕсли;
	
	Если ИмяРеквизита <> "СрокИспользованияНУ"
		И ОтражатьВРеглУчете
		И (СрокИспользованияНУ = 0
			ИЛИ СрокиИспользованияСовпадают И ОбновитьЕслиСовпадают) Тогда
		
		СрокИспользованияНУ = ЭтаФорма[ИмяРеквизита];
		СписокРеквизитов = СписокРеквизитов + ",СрокИспользованияНУ";
		
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(СписокРеквизитов);		

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьЗначенияРеквизитовДоИзменения(Форма)

	СписокРеквизитов = "ДатаПринятияКУчетуУУ,ДатаПринятияКУчетуБУ,
						|СрокИспользованияУУ,СрокИспользованияНУ,СрокИспользованияБУ,
						|ТекущаяСтоимостьУУ,ТекущаяСтоимостьБУ,ТекущаяСтоимостьНУ,
						|НакопленнаяАмортизацияУУ,НакопленнаяАмортизацияБУ,НакопленнаяАмортизацияНУ,
						|ПервоначальнаяСтоимостьУУ,ПервоначальнаяСтоимостьБУ,ПервоначальнаяСтоимостьНУ,
						|СтатьяРасходовБУ,АналитикаРасходовБУ,ВидОбъектаУчета";
	
	ЗначенияРеквизитовДоИзменения = Новый Структура(СписокРеквизитов);
	ЗаполнитьЗначенияСвойств(ЗначенияРеквизитовДоИзменения, Форма);
	
	Форма.ЗначенияРеквизитовДоИзменения = Новый ФиксированнаяСтруктура(ЗначенияРеквизитовДоИзменения);

КонецПроцедуры

&НаСервере
Процедура НематериальныйАктивПриИзмененииНаСервере()

	ЗаполнитьСведенияНМА();
	
	ГруппаФинансовогоУчета = Справочники.ГруппыФинансовогоУчетаВнеоборотныхАктивов.ЗначениеПоУмолчанию(ВидАктива);
	ИзмененныеРеквизиты = "ГруппаФинансовогоУчета";
	
	Если ЗначенияРеквизитовДоИзменения.ВидОбъектаУчета <> ВидОбъектаУчета Тогда
		ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",ВидОбъектаУчета";
	КонецЕсли; 
	
	Если ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
		Если МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка Тогда
			МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииНМА.Линейный;
			КоэффициентБУ = 0;
			ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",МетодНачисленияАмортизацииБУ,КоэффициентБУ";
		КонецЕсли;
	ИначеЕсли ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив
		И ПорядокУчетаНУ = Перечисления.ПорядокУчетаСтоимостиВнеоборотныхАктивов.СписыватьПриПринятииКУчету Тогда
		ПорядокУчетаНУ = Перечисления.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НеНачислятьАмортизацию;
		ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",ПорядокУчетаНУ";
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормыНаСервере(ИзмененныеРеквизиты);
	
	ПересчитатьЗависимыеСуммы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьЗависимыеСуммы(Форма)
	
	МножительЦФ = ?(Форма.ПрименениеЦелевогоФинансирования, 1, 0);
	
	Форма.ТекущаяСтоимостьПРЦФ       = Форма.ТекущаяСтоимостьБУЦФ;
	Форма.НакопленнаяАмортизацияПРЦФ = Форма.НакопленнаяАмортизацияБУЦФ;
	
	Если Не Форма.ПервоначальнаяСтоимостьОтличается Тогда
		
		Форма.ПервоначальнаяСтоимостьУУ = Форма.ТекущаяСтоимостьУУ;
		Форма.ПервоначальнаяСтоимостьБУ = Форма.ТекущаяСтоимостьБУ + Форма.ТекущаяСтоимостьБУЦФ * МножительЦФ;
		Форма.ПервоначальнаяСтоимостьНУ = Форма.ТекущаяСтоимостьНУ + Форма.ТекущаяСтоимостьНУЦФ * МножительЦФ;
		
	КонецЕсли;
	
	// Временные разницы не редактируются
	Форма.ТекущаяСтоимостьВР         = Форма.ТекущаяСтоимостьБУ         - Форма.ТекущаяСтоимостьНУ         - Форма.ТекущаяСтоимостьПР;
	Форма.ТекущаяСтоимостьВРЦФ       = Форма.ТекущаяСтоимостьБУЦФ       - Форма.ТекущаяСтоимостьНУЦФ       - Форма.ТекущаяСтоимостьПРЦФ;
	Форма.НакопленнаяАмортизацияВР   = Форма.НакопленнаяАмортизацияБУ   - Форма.НакопленнаяАмортизацияНУ   - Форма.НакопленнаяАмортизацияПР;
	Форма.НакопленнаяАмортизацияВРЦФ = Форма.НакопленнаяАмортизацияБУЦФ - Форма.НакопленнаяАмортизацияНУЦФ - Форма.НакопленнаяАмортизацияПРЦФ;
	
	// Остаточная стоимость не редактируется
	Форма.ОстаточнаяСтоимостьУУ   = Форма.ТекущаяСтоимостьУУ   - Форма.НакопленнаяАмортизацияУУ;
	Форма.ОстаточнаяСтоимостьБУ   = Форма.ТекущаяСтоимостьБУ   - Форма.НакопленнаяАмортизацияБУ;
	Форма.ОстаточнаяСтоимостьНУ   = Форма.ТекущаяСтоимостьНУ   - Форма.НакопленнаяАмортизацияНУ;
	Форма.ОстаточнаяСтоимостьПР   = Форма.ТекущаяСтоимостьПР   - Форма.НакопленнаяАмортизацияПР;
	Форма.ОстаточнаяСтоимостьВР   = Форма.ТекущаяСтоимостьВР   - Форма.НакопленнаяАмортизацияВР;
	
	Форма.ОстаточнаяСтоимостьБУЦФ = Форма.ТекущаяСтоимостьБУЦФ - Форма.НакопленнаяАмортизацияБУЦФ;
	Форма.ОстаточнаяСтоимостьНУЦФ = Форма.ТекущаяСтоимостьНУЦФ - Форма.НакопленнаяАмортизацияНУЦФ;
	Форма.ОстаточнаяСтоимостьПРЦФ = Форма.ТекущаяСтоимостьПРЦФ - Форма.НакопленнаяАмортизацияПРЦФ;
	Форма.ОстаточнаяСтоимостьВРЦФ = Форма.ТекущаяСтоимостьВРЦФ - Форма.НакопленнаяАмортизацияВРЦФ;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПараметрыВыбораГФУ()
	
	МассивПараметров = Новый Массив;
	
	Если ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВидАктива", Перечисления.ВидыВнеоборотныхАктивов.НМА));
	Иначе
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВидАктива", Перечисления.ВидыВнеоборотныхАктивов.НИОКР));
	КонецЕсли;
	
	Элементы.ГруппаФинансовогоУчета.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

&НаСервере
Процедура СтатьяРасходовБУПриИзмененииНаСервере()
	
	СтатьяРасходовПриИзменении(
		СтатьяРасходовБУ, 
		АналитикаРасходовБУ, 
		АналитикаРасходовБУОбязательна);
		
КонецПроцедуры

&НаСервере
Процедура СтатьяРасходовУУПриИзмененииНаСервере()

	СтатьяРасходовПриИзменении(
		СтатьяРасходовУУ, 
		АналитикаРасходовУУ, 
		АналитикаРасходовУУОбязательна);
	
	НастроитьЗависимыеЭлементыФормыНаСервере("СтатьяРасходовУУ");
	
КонецПроцедуры

&НаСервере
Процедура СтатьяРасходовПриИзменении(СтатьяРасходов, АналитикаРасходов, АналитикаРасходовОбязательна)

	Если НЕ ЗначениеЗаполнено(СтатьяРасходов) Тогда
		АналитикаРасходов = Неопределено;
	КонецЕсли;
	
	АналитикаРасходовОбязательна = 
		ЗначениеЗаполнено(СтатьяРасходов)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьяРасходов, "КонтролироватьЗаполнениеАналитики");
		
	ДанныеДляЗаполнения = Новый Структура("Организация,Подразделение", Организация, Подразделение);
	ДоходыИРасходыСервер.СтатьяРасходовПриИзменении(ДанныеДляЗаполнения, СтатьяРасходов, АналитикаРасходов);

КонецПроцедуры

&НаСервере
Процедура СтатьяДоходовПриИзмененииНаСервере()
	
	АналитикаДоходовОбязательна =
		ЗначениеЗаполнено(СтатьяДоходов)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьяДоходов, "КонтролироватьЗаполнениеАналитики");
		
	ДанныеДляЗаполнения = Новый Структура("Организация,Подразделение", Организация, Подразделение);
	ДоходыИРасходыСервер.СтатьяДоходовПриИзменении(ДанныеДляЗаполнения, СтатьяДоходов, Подразделение, АналитикаДоходов);
		
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()

	Если Параметры.НоваяСтрока И НЕ Параметры.Копирование Тогда
		ЗаполнитьЗначенияПоУмолчанию();
	КонецЕсли;
	
	ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	Элементы.ЛиквидационнаяСтоимостьВалюта.Заголовок = ВалютаУпр;
	Элементы.ДекорацияЗаголовокУУ.Заголовок = СтрШаблон(НСтр("ru = 'УУ (%1):'"), Строка(ВалютаУпр));
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	Элементы.ДекорацияЗаголовокБУ.Заголовок = СтрШаблон(НСтр("ru = 'БУ (%1):'"), Строка(ВалютаРегл));
	Элементы.ДекорацияЗаголовокНУ.Заголовок = СтрШаблон(НСтр("ru = 'НУ (%1):'"), Строка(ВалютаРегл));
	Элементы.ДекорацияЗаголовокПР.Заголовок = СтрШаблон(НСтр("ru = 'ПР (%1):'"), Строка(ВалютаРегл));
	Элементы.ДекорацияЗаголовокВР.Заголовок = СтрШаблон(НСтр("ru = 'ВР (%1):'"), Строка(ВалютаРегл));
	
	ДатаНачалаУчета = Константы.ДатаНачалаУчетаВнеоборотныхАктивов2_4.Получить();
	УпрУчетПоДаннымБУ = ПолучитьФункциональнуюОпцию("ИспользоватьАмортизациюБухгалтерскогоУчетаВУправленческомУчете");
	
	ЕстьСвязанныеОрганизации = Справочники.Организации.ОрганизацияВзаимосвязанаСДругимиОрганизациями(Организация);
	
	АналитикаРасходовБУОбязательна =
		ЗначениеЗаполнено(СтатьяРасходовБУ)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьяРасходовБУ, "КонтролироватьЗаполнениеАналитики");
	
	АналитикаРасходовУУОбязательна =
		ЗначениеЗаполнено(СтатьяРасходовУУ)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьяРасходовУУ, "КонтролироватьЗаполнениеАналитики");
	
	АналитикаДоходовОбязательна =
		ЗначениеЗаполнено(СтатьяДоходов)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьяДоходов, "КонтролироватьЗаполнениеАналитики");
		
	УстановитьВидимость();
	
	ЗаполнитьСведенияНМА();
	
	НастроитьЗависимыеЭлементыФормыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ПланыВидовХарактеристик.СтатьиДоходов.УстановитьУсловноеОформлениеАналитик(УсловноеОформление);
	
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(
		УсловноеОформление,
		"СтатьяРасходовБУ, АналитикаРасходовБУ,
		|СтатьяРасходовУУ, АналитикаРасходовУУ");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()

	ДатаУчетнойПолитики = КонецМесяца(Дата) + 1;
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(
		ЭтаФорма, Организация, ДатаУчетнойПолитики);
	
	ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, ДатаУчетнойПолитики);
	ПоддержкаПБУ18 = УчетнаяПолитика.ПоддержкаПБУ18(Организация, ДатаУчетнойПолитики);
	
	Элементы.ДекорацияЗаголовокНУ.Видимость = ПлательщикНалогаНаПрибыль И ОтражатьВРеглУчете;
	Элементы.ДекорацияЗаголовокПР.Видимость = ПлательщикНалогаНаПрибыль И ПоддержкаПБУ18 И ОтражатьВРеглУчете;
	Элементы.ДекорацияЗаголовокВР.Видимость = ПлательщикНалогаНаПрибыль И ПоддержкаПБУ18 И ОтражатьВРеглУчете;
	Элементы.ДекорацияПервоначальнаяСтоимостьПР.Видимость = ПлательщикНалогаНаПрибыль И ПоддержкаПБУ18 И ОтражатьВРеглУчете;
	Элементы.ДекорацияПервоначальнаяСтоимостьВР.Видимость = ПлательщикНалогаНаПрибыль И ПоддержкаПБУ18 И ОтражатьВРеглУчете;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияНМА()

	Если НЕ ЗначениеЗаполнено(НематериальныйАктив) Тогда
		ВидАктива = Перечисления.ВидыВнеоборотныхАктивов.НМА;
		ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив;
		Элементы.НематериальныйАктив.Заголовок = НСтр("ru = 'Нематериальный актив'");
		Элементы.АмортизационнаяГруппа.Видимость = Ложь;
		Элементы.ВидНМА.Видимость = Ложь;
		Возврат;
	КонецЕсли; 
	
	РеквизитыНМА = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НематериальныйАктив, "АмортизационнаяГруппа,ВидОбъектаУчета,ВидНМА");
	
	ВидОбъектаУчета = РеквизитыНМА.ВидОбъектаУчета; 
	
	ВидАктива = ?(РеквизитыНМА.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив, 
						Перечисления.ВидыВнеоборотныхАктивов.НМА, 
						Перечисления.ВидыВнеоборотныхАктивов.НИОКР);
	
	Если ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
		
		Заголовок = НСтр("ru = 'Сведения о расходах на НИОКР'");
		Элементы.НематериальныйАктив.Заголовок = НСтр("ru = 'Расходы на НИОКР'");
		Элементы.АмортизационнаяГруппа.Видимость = Ложь;
		Элементы.ВидНМА.Видимость = Ложь;
		
	Иначе
		
		Заголовок = НСтр("ru = 'Сведения о нематериальном активе'");
		Элементы.НематериальныйАктив.Заголовок = НСтр("ru = 'Нематериальный актив'");
		Элементы.АмортизационнаяГруппа.Видимость = Истина;
		Элементы.ВидНМА.Видимость = Истина;

		Если ЗначениеЗаполнено(РеквизитыНМА.АмортизационнаяГруппа) Тогда
			АмортизационнаяГруппа = Новый ФорматированнаяСтрока(Строка(РеквизитыНМА.АмортизационнаяГруппа));
		Иначе
			АмортизационнаяГруппа = Новый ФорматированнаяСтрока(НСтр("ru = 'не заполнена'"),, ЦветаСтиля.ЦветНедоступногоТекста);
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(РеквизитыНМА.ВидНМА) Тогда
			ВидНМА = Новый ФорматированнаяСтрока(Строка(РеквизитыНМА.ВидНМА));
		Иначе
			ВидНМА = Новый ФорматированнаяСтрока(НСтр("ru = 'не заполнен'"),, ЦветаСтиля.ЦветНедоступногоТекста);
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеАналитик(ПараметрыРеквизитовОбъекта, МассивНепроверяемыхРеквизитов, Отказ)

	ПроверяемыеРеквизитыСтатейРасходов = Новый Массив;
	Если ВнеоборотныеАктивыКлиентСервер.ЗначениеСвойстваРеквизитаОбъекта("СтатьяРасходовБУ", "Видимость", ПараметрыРеквизитовОбъекта) = Истина Тогда
		ПроверяемыеРеквизитыСтатейРасходов.Добавить("СтатьяРасходовБУ, АналитикаРасходовБУ");
	КонецЕсли; 
	Если ВнеоборотныеАктивыКлиентСервер.ЗначениеСвойстваРеквизитаОбъекта("СтатьяРасходовУУ", "Видимость", ПараметрыРеквизитовОбъекта) = Истина Тогда
		ПроверяемыеРеквизитыСтатейРасходов.Добавить("СтатьяРасходовУУ, АналитикаРасходовУУ");
	КонецЕсли; 
	
	Если ПроверяемыеРеквизитыСтатейРасходов.Количество() <> 0 Тогда
		ПланыВидовХарактеристик.СтатьиРасходов.ПроверитьЗаполнениеАналитик(
			ЭтотОбъект, СтрСоединить(ПроверяемыеРеквизитыСтатейРасходов, ","), МассивНепроверяемыхРеквизитов, Отказ);
	КонецЕсли; 
	
	//
	Если ВнеоборотныеАктивыКлиентСервер.ЗначениеСвойстваРеквизитаОбъекта("СтатьяДоходов", "Видимость", ПараметрыРеквизитовОбъекта) = Истина Тогда
		ПланыВидовХарактеристик.СтатьиДоходов.ПроверитьЗаполнениеАналитик(ЭтаФорма,, МассивНепроверяемыхРеквизитов, Отказ);
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияПоУмолчанию()

	ГруппаФинансовогоУчета = Справочники.ГруппыФинансовогоУчетаВнеоборотныхАктивов.ЗначениеПоУмолчанию(ВидАктива);
	
	СпособПоступления = Перечисления.СпособыПоступленияАктивов.ПриобретениеЗаПлату;
	
	ВспомогательныеРеквизиты = Документы.ВводОстатковВнеоборотныхАктивов2_4.ВспомогательныеРеквизиты(
									ЭтаФорма, Истина, ЕстьСвязанныеОрганизации);
									
	ПараметрыРеквизитовОбъекта = ВнеоборотныеАктивыКлиентСервер.ЗначенияСвойствЗависимыхРеквизитов_ВводОстатков(
									ЭтаФорма, ВспомогательныеРеквизиты, "");
									
	Документы.ВводОстатковВнеоборотныхАктивов2_4.ЗаполнитьРеквизитыВзависимостиОтСвойств(
			ЭтаФорма, ВспомогательныеРеквизиты, ПараметрыРеквизитовОбъекта);

	Документы.ВводОстатковВнеоборотныхАктивов2_4.ЗаполнитьЗначенияПоУмолчанию(ЭтаФорма, ЭтаФорма);
			
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗавершитьРедактирование();
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактирование()

	ОчиститьСообщения();
	
	Если НЕ ПроверитьЗаполнение() Тогда
		ТекстВопроса = НСтр("ru = 'Не заполнены обязательные поля.
                             |Можно завершить редактирование или продолжить редактирование.'");
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Завершить редактирование'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Продолжить редактирование'"));
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьРедактированиеЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок,, КодВозвратаДиалога.Да);
	Иначе
		ЗавершитьРедактированиеЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактированиеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	РезультатРедактирования = Новый Структура(СохраняемыеРеквизиты);
	ЗаполнитьЗначенияСвойств(РезультатРедактирования, ЭтаФорма);
	
	МножительРезерваПереоценки = ?(ЕстьРезервПереоценкиРегл, ?(РезервПереоценкиРеглЗнак, 1, -1), 0);
	РезультатРедактирования.Вставить("РезервПереоценкиСтоимостиРегл", МножительРезерваПереоценки * РезервПереоценкиСтоимостиРеглСумма);
	РезультатРедактирования.Вставить("РезервПереоценкиАмортизацииРегл", МножительРезерваПереоценки * РезервПереоценкиАмортизацииРеглСумма);
	
	МножительРезерваПереоценки = ?(ЕстьРезервПереоценки, ?(РезервПереоценкиЗнак, 1, -1), 0);
	РезультатРедактирования.Вставить("РезервПереоценкиСтоимости", МножительРезерваПереоценки * РезервПереоценкиСтоимостиСумма);
	РезультатРедактирования.Вставить("РезервПереоценкиАмортизации", МножительРезерваПереоценки * РезервПереоценкиАмортизацииСумма);
	
	Модифицированность = Ложь;
	
	Закрыть(РезультатРедактирования);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
