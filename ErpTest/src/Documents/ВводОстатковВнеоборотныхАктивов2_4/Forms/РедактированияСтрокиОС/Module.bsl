
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	СохраняемыеРеквизиты  = Параметры.СохраняемыеРеквизиты;
	ХозяйственнаяОперация = Параметры.ХозяйственнаяОперация;
	Организация = Параметры.Организация;
	Местонахождение = Параметры.Местонахождение;
	ОтражатьВУпрУчете = Параметры.ОтражатьВУпрУчете;
	ОтражатьВРеглУчете = Параметры.ОтражатьВРеглУчете;
	Дата = Параметры.Дата;
	Ссылка = Параметры.Ссылка;
	РасчетыМеждуОрганизациямиАрендатор = Параметры.РасчетыМеждуОрганизациямиАрендатор;
	
	Если Параметры.Свойство("ЗначенияРеквизитов") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры.ЗначенияРеквизитов);
		
		РезервПереоценкиСтоимостиРеглСумма = ?(РезервПереоценкиСтоимостиРегл < 0, -РезервПереоценкиСтоимостиРегл, РезервПереоценкиСтоимостиРегл);
		РезервПереоценкиАмортизацииРеглСумма = ?(РезервПереоценкиАмортизацииРегл < 0, -РезервПереоценкиАмортизацииРегл, РезервПереоценкиАмортизацииРегл);
		РезервПереоценкиРеглЗнак = (РезервПереоценкиСтоимостиРегл > 0);
		
		РезервПереоценкиСтоимостиСумма = ?(РезервПереоценкиСтоимости < 0, -РезервПереоценкиСтоимости, РезервПереоценкиСтоимости);
		РезервПереоценкиАмортизацииСумма = ?(РезервПереоценкиАмортизации < 0, -РезервПереоценкиАмортизации, РезервПереоценкиАмортизации);
		РезервПереоценкиЗнак = (РезервПереоценкиСтоимости > 0);
		
	КонецЕсли;
	
	ПриЧтенииСозданииНаСервере();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗавершениеРаботы И Модифицированность Тогда
		
		Отказ = Истина;
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтаФорма),
			НСтр("ru='Данные были изменены. Сохранить изменения?'"),
			РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ВспомогательныеРеквизиты = Документы.ВводОстатковВнеоборотныхАктивов2_4.ВспомогательныеРеквизиты(
									ЭтаФорма, Истина, ЕстьСвязанныеОрганизации);
	
	ПараметрыРеквизитовОбъекта = ВнеоборотныеАктивыКлиентСервер.ЗначенияСвойствЗависимыхРеквизитов_ВводОстатков(
									ЭтаФорма, ВспомогательныеРеквизиты);
	
	ВнеоборотныеАктивыСлужебный.ОтключитьПроверкуЗаполненияРеквизитовОбъекта(ПараметрыРеквизитовОбъекта, МассивНепроверяемыхРеквизитов);
	
	ПроверитьЗаполнениеАналитик(ПараметрыРеквизитовОбъекта, МассивНепроверяемыхРеквизитов, Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ОбъектыЭксплуатации" И Источник = ОсновноеСредство Тогда
		ЗаполнитьСведенияОС();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область СтраницаУчет

&НаКлиенте
Процедура ОсновноеСредствоПриИзменении(Элемент)

	ОсновноеСредствоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименениеЦелевогоФинансированияПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантРаздельногоУчетаНДСПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы("ВариантРаздельногоУчетаНДС");
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокУчетаБУПриИзменении(Элемент)
	
	ИзмененныеРеквизиты = ВнеоборотныеАктивыКлиент.ПриИзмененииПорядкаУчетаБУ_ОС(ЭтаФорма);
	
	Если ПорядокУчетаБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ") Тогда
		
		НакопленнаяАмортизацияНУ = 0;
		НакопленнаяАмортизацияПР = 0;
		НакопленнаяАмортизацияВР = 0;
		
		ПрименениеЦелевогоФинансирования = Ложь;
		ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",ПрименениеЦелевогоФинансирования";
		
		ПорядокУчетаБУПриИзмененииНаСервере(ИзмененныеРеквизиты);
		Возврат;
		
	ИначеЕсли ПорядокУчетаБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету") Тогда
		
		ПервоначальнаяСтоимостьОтличается = Истина;
		ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",ПервоначальнаяСтоимостьОтличается";
		
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ИзмененныеРеквизиты);
	
	ПересчитатьЗависимыеСуммы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокУчетаНУПриИзменении(Элемент)
	
	СписокИзмененныхРеквизитов = Элемент.Имя;
	Если ПорядокУчетаНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету") Тогда
		ПервоначальнаяСтоимостьОтличается = Истина;
		СписокИзмененныхРеквизитов = СписокИзмененныхРеквизитов + ",ПервоначальнаяСтоимостьОтличается";
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(СписокИзмененныхРеквизитов);
	
	ПересчитатьЗависимыеСуммы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокУчетаУУПриИзменении(Элемент)
	
	ИзмененныеРеквизиты = ВнеоборотныеАктивыКлиент.ПриИзмененииПорядкаУчетаУУ_ОС(ЭтаФорма);
	НастроитьЗависимыеЭлементыФормы(ИзмененныеРеквизиты);
	
	ПересчитатьЗависимыеСуммы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПринятияКУчетуБУПриИзменении(Элемент)
	
	Если ОтражатьВУпрУчете 
		И ЗначенияРеквизитовДоИзменения.ДатаПринятияКУчетуБУ = ЗначенияРеквизитовДоИзменения.ДатаПринятияКУчетуУУ Тогда
		ДатаПринятияКУчетуУУ = ДатаПринятияКУчетуБУ;
		ЗаполнитьЗначенияРеквизитовДоИзменения(ЭтаФорма);
	КонецЕсли; 
	
	НастроитьЗависимыеЭлементыФормы(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПринятияКУчетуУУПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаФинансовогоУчетаПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресМестонахожденияПриИзменении(Элемент)
	
	АдресМестонахожденияЗначенияПолей = ЗначенияПолейКонтактнойИнформацииСервер(АдресМестонахождения,
		ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"));
	
КонецПроцедуры

&НаКлиенте
Процедура АдресМестонахожденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормыКонтактнойИнформации = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
			ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"),
			АдресМестонахожденияЗначенияПолей);
			
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(
		ПараметрыФормыКонтактнойИнформации,
		ЭтотОбъект,
		Новый ОписаниеОповещения("АдресМестонахожденияНачалоВыбораЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура АдресМестонахожденияОчистка(Элемент, СтандартнаяОбработка)
	
	АдресМестонахожденияЗначенияПолей = "";
	
КонецПроцедуры

&НаКлиенте
Процедура АдресМестонахожденияАрендатораПриИзменении(Элемент)
	
	АдресМестонахожденияАрендатораЗначенияПолей = ЗначенияПолейКонтактнойИнформацииСервер(АдресМестонахожденияАрендатора,
		ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"));
	
КонецПроцедуры

&НаКлиенте
Процедура АдресМестонахожденияАрендатораНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормыКонтактнойИнформации = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
			ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"),
			АдресМестонахожденияАрендатораЗначенияПолей);
			
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(
		ПараметрыФормыКонтактнойИнформации,
		ЭтотОбъект,
		Новый ОписаниеОповещения("АдресМестонахожденияАрендатораНачалоВыбораЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура АдресМестонахожденияАрендатораОчистка(Элемент, СтандартнаяОбработка)
	
	АдресМестонахожденияАрендатораЗначенияПолей = "";
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаСтоимость

&НаКлиенте
Процедура ТекущаяСтоимостьУУПриИзменении(Элемент)
	
	ПересчитатьЗависимыеСуммы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НакопленнаяАмортизацияУУПриИзменении(Элемент)
	
	ПересчитатьЗависимыеСуммы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПервоначальнаяСтоимостьУУПриИзменении(Элемент)
	
	ПересчитатьЗависимыеСуммы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяСтоимостьБУПриИзменении(Элемент)
	
	Если Элементы.ТекущаяСтоимостьУУ.Видимость 
		И ВалютаУпр = ВалютаРегл
		И ЗначенияРеквизитовДоИзменения.ТекущаяСтоимостьБУ = ЗначенияРеквизитовДоИзменения.ТекущаяСтоимостьУУ Тогда
		ТекущаяСтоимостьУУ = ТекущаяСтоимостьБУ;
	КонецЕсли; 
	
	Если Элементы.ТекущаяСтоимостьНУ.Видимость Тогда
		Если ПорядокУчетаНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету") Тогда
			ТекущаяСтоимостьНУ = 0;
		ИначеЕсли ЗначенияРеквизитовДоИзменения.ТекущаяСтоимостьБУ = ЗначенияРеквизитовДоИзменения.ТекущаяСтоимостьНУ Тогда
			ТекущаяСтоимостьНУ = ТекущаяСтоимостьБУ;
		КонецЕсли;
	КонецЕсли;
	
	ПересчитатьЗависимыеСуммы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НакопленнаяАмортизацияБУПриИзменении(Элемент)
	
	Если Элементы.НакопленнаяАмортизацияУУ.Видимость 
		И ВалютаУпр = ВалютаРегл
		И ЗначенияРеквизитовДоИзменения.НакопленнаяАмортизацияБУ = ЗначенияРеквизитовДоИзменения.НакопленнаяАмортизацияУУ Тогда
		НакопленнаяАмортизацияУУ = НакопленнаяАмортизацияБУ;
	КонецЕсли; 
	
	Если Элементы.НакопленнаяАмортизацияНУ.Видимость 
		И ЗначенияРеквизитовДоИзменения.НакопленнаяАмортизацияБУ = ЗначенияРеквизитовДоИзменения.НакопленнаяАмортизацияНУ 
		И ПорядокУчетаБУ <> ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ")
		И ПорядокУчетаНУ <> ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету") Тогда
		НакопленнаяАмортизацияНУ = НакопленнаяАмортизацияБУ;
	КонецЕсли; 
	
	ПересчитатьЗависимыеСуммы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПервоначальнаяСтоимостьОтличаетсяПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяСтоимостьНУПриИзменении(Элемент)
	
	ПересчитатьЗависимыеСуммы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяСтоимостьПРПриИзменении(Элемент)
	
	ПересчитатьЗависимыеСуммы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяСтоимостьБУЦФПриИзменении(Элемент)
	
	ПересчитатьЗависимыеСуммы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПервоначальнаяСтоимостьБУПриИзменении(Элемент)
	
	Если Элементы.ПервоначальнаяСтоимостьУУ.Видимость 
		И ВалютаУпр = ВалютаРегл
		И ЗначенияРеквизитовДоИзменения.ПервоначальнаяСтоимостьБУ = ЗначенияРеквизитовДоИзменения.ПервоначальнаяСтоимостьУУ Тогда
		ПервоначальнаяСтоимостьУУ = ПервоначальнаяСтоимостьБУ;
	КонецЕсли; 
	
	Если Элементы.ПервоначальнаяСтоимостьНУ.Видимость 
		И ЗначенияРеквизитовДоИзменения.ПервоначальнаяСтоимостьБУ = ЗначенияРеквизитовДоИзменения.НакопленнаяАмортизацияНУ Тогда
		ПервоначальнаяСтоимостьНУ = ПервоначальнаяСтоимостьБУ;
	КонецЕсли; 
	
	ПересчитатьЗависимыеСуммы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПервоначальнаяСтоимостьНУПриИзменении(Элемент)
	
	ПересчитатьЗависимыеСуммы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПервоначальнаяСтоимостьПРПриИзменении(Элемент)
	
	ПересчитатьЗависимыеСуммы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НакопленнаяАмортизацияНУПриИзменении(Элемент)
	
	ПересчитатьЗависимыеСуммы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НакопленнаяАмортизацияПРПриИзменении(Элемент)
	
	ПересчитатьЗависимыеСуммы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НакопленнаяАмортизацияБУЦФПриИзменении(Элемент)
	
	ПересчитатьЗависимыеСуммы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КорректировкаСтоимостиАрендованногоИмуществаНУПриИзменении(Элемент)
	
	КорректировкаСтоимостиАрендованногоИмуществаВР = -КорректировкаСтоимостиАрендованногоИмуществаНУ;
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаСобытия

&НаКлиенте
Процедура ЕстьИзменениеПараметровАмортизацииБУПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьИзменениеПараметровАмортизацииУУПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьРезервПереоценкиРеглПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьРезервПереоценкиПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура РезервПереоценкиСтоимостиРеглСуммаПриИзменении(Элемент)
	
	Если ТекущаяСтоимостьБУ <> 0 И РезервПереоценкиСтоимостиРеглСумма <> 0 Тогда
		МножительЦФ = ?(ПрименениеЦелевогоФинансирования, 1, 0);
		РезервПереоценкиАмортизацииРеглСумма = 
			(НакопленнаяАмортизацияБУ + МножительЦФ*НакопленнаяАмортизацияБУЦФ)
			* (РезервПереоценкиСтоимостиРеглСумма / (ТекущаяСтоимостьБУ + МножительЦФ*ТекущаяСтоимостьБУ));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезервПереоценкиСтоимостиСуммаПриИзменении(Элемент)
	
	Если ТекущаяСтоимостьУУ <> 0 И РезервПереоценкиСтоимостиСумма <> 0 Тогда
		РезервПереоценкиАмортизацииСумма = 
			НакопленнаяАмортизацияУУ
			* (РезервПереоценкиСтоимостиСумма / ТекущаяСтоимостьУУ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаАмортизация

&НаКлиенте
Процедура СрокИспользованияБУПриИзменении(Элемент)
	
	ПриИзмененииСрокаИспользования("СрокИспользованияБУ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИспользованияБУОстаточныйПриИзменении(Элемент)
	
	ПриИзмененииСрокаИспользования("СрокИспользованияБУ", Истина);

КонецПроцедуры

&НаКлиенте
Процедура СрокИспользованияНУПриИзменении(Элемент)
	
	ПриИзмененииСрокаИспользования("СрокИспользованияНУ", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИспользованияУУПриИзменении(Элемент)
	
	ПриИзмененииСрокаИспользования("СрокИспользованияУУ", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура МетодНачисленияАмортизацииБУПриИзменении(Элемент)
	
	МетодНачисленияАмортизацииБУПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МетодНачисленияАмортизацииУУПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы("МетодНачисленияАмортизацииУУ,КоэффициентАмортизацииБУ");
	
КонецПроцедуры

&НаКлиенте
Процедура НачислятьАмортизациюБУПриИзменении(Элемент)
	
	Если НачислятьАмортизациюБУ <> НачислятьАмортизациюНУ Тогда
		НачислятьАмортизациюНУ = НачислятьАмортизациюБУ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьАмортизационнуюПремиюВСоставРасходовПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормыНаСервере("ВключитьАмортизационнуюПремиюВСоставРасходов");
	
КонецПроцедуры

&НаКлиенте
Процедура НачислятьАмортизациюНУПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказательНаработкиПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаОтражениеРасходов

&НаКлиенте
Процедура СтатьяРасходовБУПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(СтатьяРасходовБУ) Тогда
		СтатьяРасходовБУПриИзмененииНаСервере();
	Иначе
		АналитикаРасходовБУ = Неопределено;
		АналитикаРасходовБУОбязательна = Ложь;
	КонецЕсли;
	
	Если ЗначенияРеквизитовДоИзменения.СтатьяРасходовБУ = СтатьяРасходовАмортизационнойПремии
		И Элементы.СтатьяРасходовАмортизационнойПремии.Видимость Тогда
		
		СтатьяРасходовАмортизационнойПремии = СтатьяРасходовБУ;
		АналитикаРасходовАмортизационнойПремии = АналитикаРасходовБУ;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовБУПриИзменении(Элемент)
	
	Если СтатьяРасходовБУ = СтатьяРасходовАмортизационнойПремии
		И ЗначенияРеквизитовДоИзменения.АналитикаРасходовБУ = АналитикаРасходовАмортизационнойПремии
		И Элементы.АналитикаРасходовАмортизационнойПремии.Видимость Тогда
		
		АналитикаРасходовАмортизационнойПремии = АналитикаРасходовБУ;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовУУПриИзменении(Элемент)
	
	СтатьяРасходовУУПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовАмортизационнойПремииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(СтатьяРасходовАмортизационнойПремии) Тогда
		СтатьяРасходовАмортизационнойПремииПриИзмененииНаСервере();
	Иначе
		АналитикаРасходовАмортизационнойПремии = Неопределено;
		АналитикаРасходовАмортизационнойПремииОбязательна = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовНалогПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(СтатьяРасходовАмортизационнойПремии) Тогда
		СтатьяРасходовНалогПриИзмененииНаСервере();
	Иначе
		АналитикаРасходовНалог = Неопределено;
		АналитикаРасходовАмортизационнойПремииОбязательна = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДоходовЦФПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(СтатьяДоходов) Тогда
		СтатьяДоходовЦФПриИзмененииНаСервере();
	Иначе
		АналитикаДоходовОбязательна = Ложь;
		АналитикаДоходов = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередаватьРасходыВДругуюОрганизациюПриИзменении(Элемент)
	
	Если Не ПередаватьРасходыВДругуюОрганизацию Тогда
		ОрганизацияПолучательРасходов = Неопределено;
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(Элемент.Имя);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ЗавершитьРедактирование();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПриИзмененииРеквизитов

&НаКлиенте
Процедура НастроитьЗависимыеЭлементыФормы(Знач ИзмененныеРеквизитыИлиЭлемент = "")

	Если ТипЗнч(ИзмененныеРеквизитыИлиЭлемент) = Тип("Строка") Тогда
		ИзмененныеРеквизиты = ИзмененныеРеквизитыИлиЭлемент;
	Иначе
		ИзмененныеРеквизиты = ИзмененныеРеквизитыИлиЭлемент.Имя;
	КонецЕсли;
	
	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	
	Если ТребуетсяВызовСервераДляНастройкиЭлементовФормы(СтруктураИзмененныхРеквизитов) Тогда
		НастроитьЗависимыеЭлементыФормыНаСервере(ИзмененныеРеквизиты)
	Иначе
		НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтаФорма, ИзмененныеРеквизиты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(Форма, ИзмененныеРеквизиты = "")

	Элементы = Форма.Элементы;
	
	ПриИзмененииРеквизитов(Форма, ИзмененныеРеквизиты);
	
	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыПринятияКУчетуОС = ВнеоборотныеАктивыКлиентСервер.ПараметрыПринятияКУчетуОС(Форма, Форма.ВспомогательныеРеквизиты);

	// Управление видимостью, доступностью и т.п. 
	ПараметрыРеквизитовОбъекта = ВнеоборотныеАктивыКлиентСервер.ЗначенияСвойствЗависимыхРеквизитов_ВводОстатков(
									Форма, Форма.ВспомогательныеРеквизиты, ИзмененныеРеквизиты);
									
	ВнеоборотныеАктивыКлиентСервер.НастроитьЗависимыеЭлементыФормы(Форма, ПараметрыРеквизитовОбъекта);
	
	Если НЕ ОбновитьВсе Тогда
		ВнеоборотныеАктивыКлиентСервер.ОчиститьНеиспользуемыеРеквизиты(Форма, ПараметрыРеквизитовОбъекта);
		ИзмененныеРеквизиты = ВнеоборотныеАктивыКлиентСервер.ЗаполнитьРеквизитыВзависимостиОтСвойств_ВводОстатков(
				Форма, ПараметрыРеквизитовОбъекта);
	КонецЕсли;
	
	СтоимостьБУДоступна = (Форма.ПорядокУчетаБУ <> ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету")
							И Форма.ОтражатьВРеглУчете);
							
	АмортизацияДоступна = ПараметрыПринятияКУчетуОС.АмортизацияБУДоступна 
			И НЕ Форма.ПорядокУчетаБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ")
		ИЛИ ПараметрыПринятияКУчетуОС.АмортизацияУУДоступна И Форма.ОтражатьВРеглУчете;
							
	#Область СтраницаУчет
	
	Если ОбновитьВсе Тогда
		
		Если Форма.ОтражатьВРеглУчете Тогда
			Элементы.ДатаПринятияКУчетуБУ.Заголовок = НСтр("ru = 'Принят к учету (регл. учет)'");
			Элементы.ДатаПринятияКУчетуУУ.Заголовок = НСтр("ru = 'Принят к учету (упр. учет)'");
			Элементы.ГруппаПоследняяМодернизацияУпр.Заголовок = НСтр("ru = 'Модернизация (управленческий учет)'");
			Элементы.ГруппаОтражениеАмортизационныхРасходовУУ.Заголовок = НСтр("ru = 'Амортизация (управленческий учет)'");
			Элементы.ГруппаПорядокУчета.ОтображатьЗаголовок = Истина;
			Элементы.ГруппаПостоянныеСведения.ОтображатьЗаголовок = Истина;
			Элементы.ПорядокУчетаУУ.Заголовок = НСтр("ru = 'Управленческий учет'");
		Иначе
			Элементы.ДатаПринятияКУчетуБУ.Заголовок = НСтр("ru = 'Принят к учету'");
			Элементы.ДатаПринятияКУчетуУУ.Заголовок = НСтр("ru = 'Принят к учету'");
			Элементы.ГруппаПоследняяМодернизацияУпр.Заголовок = НСтр("ru = 'Модернизация'");
			Элементы.ГруппаОтражениеАмортизационныхРасходовУУ.Заголовок = НСтр("ru = 'Амортизация'");
			Элементы.ГруппаПорядокУчета.ОтображатьЗаголовок = Ложь;
			Элементы.ГруппаПостоянныеСведения.ОтображатьЗаголовок = Ложь;
			Элементы.ПорядокУчетаУУ.Заголовок = НСтр("ru = 'Порядок учета'");
		КонецЕсли; 
		
		Элементы.ЛиквидационнаяСтоимостьВалюта.Видимость = Форма.ОтражатьВУпрУчете;
		
		ВнеоборотныеАктивыКлиентСервер.УстановитьВидимостьЗначенияСпискаВыбора(
			Элементы.ПорядокУчетаНУ.СписокВыбора,
			Форма.ВспомогательныеРеквизиты.ПлательщикНалогаНаПрибыль,
			ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации"),
			0);
			
		ВнеоборотныеАктивыКлиентСервер.УстановитьВидимостьЗначенияСпискаВыбора(
			Элементы.ПорядокУчетаНУ.СписокВыбора,
			Форма.ВспомогательныеРеквизиты.ПрименяетсяУСНДоходыМинусРасходы,
			ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключитьВСоставАмортизируемогоИмущества"),
			0);
			
		Если Элементы.ПорядокУчетаНУ.СписокВыбора.НайтиПоЗначению(Форма.ПорядокУчетаНУ) = Неопределено Тогда
			Форма.ПорядокУчетаНУ = Элементы.ПорядокУчетаНУ.СписокВыбора.Получить(0).Значение;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОсновноеСредство")
		ИЛИ ОбновитьВсе Тогда
		
		ПроверяемоеЗначение = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислитьАмортизациюПриПринятииКУчету");
		
		ЗначениеВидно = (Форма.ГруппаОС = ПредопределенноеЗначение("Перечисление.ГруппыОС.ПроизводственныйИХозяйственныйИнвентарь")
							ИЛИ Форма.ПорядокУчетаБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислитьАмортизациюПриПринятииКУчету"));
		
		ВнеоборотныеАктивыКлиентСервер.УстановитьВидимостьЗначенияСпискаВыбора(
			Элементы.ПорядокУчетаБУ.СписокВыбора, 
			ЗначениеВидно, 
			ПроверяемоеЗначение, 
			1);
		
		//
		ПроверяемоеЗначение = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислитьАмортизациюПриПринятииКУчету");
		
		ЗначениеВидно = (Форма.ГруппаОС = ПредопределенноеЗначение("Перечисление.ГруппыОС.ПроизводственныйИХозяйственныйИнвентарь")
							ИЛИ Форма.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислитьАмортизациюПриПринятииКУчету"));
		
		ВнеоборотныеАктивыКлиентСервер.УстановитьВидимостьЗначенияСпискаВыбора(
			Элементы.ПорядокУчетаУУ.СписокВыбора, 
			ЗначениеВидно, 
			ПроверяемоеЗначение, 
			1);
			
	КонецЕсли;
	
	Если ОбновитьВсе Тогда
	
		ЗначениеВидно = Форма.ВспомогательныеРеквизиты.Дата < Форма.ВспомогательныеРеквизиты.ДатаНачалаУчета;
		
		ПроверяемоеЗначение = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.АмортизацияНачислена");
		
		ВнеоборотныеАктивыКлиентСервер.УстановитьВидимостьЗначенияСпискаВыбора(
			Элементы.ПорядокУчетаБУ.СписокВыбора, 
			ЗначениеВидно, 
			ПроверяемоеЗначение, 
			3);
			
		//	
		ПроверяемоеЗначение = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.АмортизацияНачислена");
		
		ВнеоборотныеАктивыКлиентСервер.УстановитьВидимостьЗначенияСпискаВыбора(
			Элементы.ПорядокУчетаНУ.СписокВыбора, 
			ЗначениеВидно, 
			ПроверяемоеЗначение);
			
		//	
		ПроверяемоеЗначение = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.АмортизацияНачислена");
		
		ВнеоборотныеАктивыКлиентСервер.УстановитьВидимостьЗначенияСпискаВыбора(
			Элементы.ПорядокУчетаУУ.СписокВыбора, 
			ЗначениеВидно, 
			ПроверяемоеЗначение);
			
	КонецЕсли;
	
	#КонецОбласти
	
	#Область СтраницаСтоимость
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		ИЛИ ОбновитьВсе Тогда
		
		Элементы.ТекущаяСтоимостьВР.Видимость = Форма.ОтражатьВРеглУчете;
		Элементы.ПервоначальнаяСтоимостьВР.Видимость = Форма.ОтражатьВРеглУчете;
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаБУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПрименениеЦелевогоФинансирования")
		ИЛИ ОбновитьВсе Тогда
		
		Элементы.ТекущаяСтоимостьВРЦФ.Видимость = Форма.ПрименениеЦелевогоФинансирования И СтоимостьБУДоступна;
		Элементы.ОстаточнаяСтоимостьБУЦФ.Видимость = Форма.ПрименениеЦелевогоФинансирования И АмортизацияДоступна;
		Элементы.ОстаточнаяСтоимостьНУЦФ.Видимость = Форма.ПрименениеЦелевогоФинансирования И АмортизацияДоступна;
		Элементы.ОстаточнаяСтоимостьПРЦФ.Видимость = Форма.ПрименениеЦелевогоФинансирования И АмортизацияДоступна;
		Элементы.ОстаточнаяСтоимостьВРЦФ.Видимость = Форма.ПрименениеЦелевогоФинансирования И АмортизацияДоступна;
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаБУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаНУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПрименениеЦелевогоФинансирования") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете") 
		ИЛИ ОбновитьВсе Тогда
	
		АмортизацияЦФДоступна = ПараметрыПринятияКУчетуОС.АмортизацияБУДоступна И Форма.ПрименениеЦелевогоФинансирования;
		Элементы.НакопленнаяАмортизацияВРЦФ.Видимость = АмортизацияЦФДоступна;
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаБУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаНУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = ПараметрыПринятияКУчетуОС.АмортизацияБУДоступна 
							ИЛИ ПараметрыПринятияКУчетуОС.АмортизацияУУДоступна
								И Форма.ОтражатьВРеглУчете;
								
		Элементы.НакопленнаяАмортизацияВР.Видимость = ЗначениеСвойства;
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПрименениеЦелевогоФинансирования")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаБУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаНУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ ОбновитьВсе Тогда
		
		Если Форма.ПрименениеЦелевогоФинансирования Тогда
			
			Элементы.ГруппаТекущаяСтоимостьЗаголовок.Заголовок       = НСтр("ru = 'Собственные средства:'");
			Элементы.ГруппаНакопленнаяАмортизацияЗаголовок.Заголовок = НСтр("ru = 'Собственные средства:'");
			Элементы.ГруппаОстаточнаяСтоимостьЗаголовок.Заголовок    = НСтр("ru = 'Собственные средства:'");
			
			Элементы.ГруппаТекущаяСтоимостьЗаголовокЦФ.Видимость       = Истина;
			Элементы.ГруппаНакопленнаяАмортизацияЗаголовокЦФ.Видимость = Элементы.НакопленнаяАмортизацияБУЦФ.Видимость;
			Элементы.ГруппаОстаточнаяСтоимостьЗаголовокЦФ.Видимость    = Элементы.ОстаточнаяСтоимостьБУЦФ.Видимость;
			
		Иначе
			
			Элементы.ГруппаТекущаяСтоимостьЗаголовок.Заголовок       = НСтр("ru = 'Сумма:'");
			Элементы.ГруппаНакопленнаяАмортизацияЗаголовок.Заголовок = НСтр("ru = 'Сумма:'");
			Элементы.ГруппаОстаточнаяСтоимостьЗаголовок.Заголовок    = НСтр("ru = 'Сумма:'");
			
			Элементы.ГруппаТекущаяСтоимостьЗаголовокЦФ.Видимость       = Ложь;
			Элементы.ГруппаНакопленнаяАмортизацияЗаголовокЦФ.Видимость = Ложь;
			Элементы.ГруппаОстаточнаяСтоимостьЗаголовокЦФ.Видимость    = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаБУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ ОбновитьВсе Тогда
		
		Если Форма.ПорядокУчетаБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ") 
			И Форма.ОтражатьВРеглУчете Тогда
			Если ПараметрыПринятияКУчетуОС.АмортизацияУУДоступна Тогда
				Элементы.ГруппаНакопленнаяАмортизация.Заголовок = НСтр("ru = 'Накопленная амортизация и износ'");
			Иначе
				Элементы.ГруппаНакопленнаяАмортизация.Заголовок = НСтр("ru = 'Накопленный износ'");
			КонецЕсли; 
		Иначе
			Элементы.ГруппаНакопленнаяАмортизация.Заголовок = НСтр("ru = 'Накопленная амортизация'");
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаБУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаНУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ ОбновитьВсе Тогда
		
		Элементы.ОстаточнаяСтоимостьВР.Видимость = АмортизацияДоступна;
		Элементы.ОстаточнаяСтоимостьПР.Видимость = АмортизацияДоступна;
		Элементы.ОстаточнаяСтоимостьНУ.Видимость = АмортизацияДоступна;
		Элементы.ОстаточнаяСтоимостьБУ.Видимость = АмортизацияДоступна;
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ ОбновитьВсе Тогда
		Элементы.ОстаточнаяСтоимостьУУ.Видимость = ПараметрыПринятияКУчетуОС.АмортизацияУУДоступна;
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		ИЛИ ОбновитьВсе Тогда
		ВидимостьЭлементов = Элементы.КорректировкаСтоимостиАрендованногоИмуществаНУ.Видимость;
		Элементы.КорректировкаСтоимостиАрендованногоИмуществаБУ.Видимость = ВидимостьЭлементов;
		Элементы.КорректировкаСтоимостиАрендованногоИмуществаПР.Видимость = ВидимостьЭлементов;
		Элементы.КорректировкаСтоимостиАрендованногоИмуществаВР.Видимость = ВидимостьЭлементов;
		Элементы.КорректировкаСтоимостиАрендованногоИмуществаБУЗаголовок.Видимость = ВидимостьЭлементов;
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ТекущаяСтоимостьУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ТекущаяСтоимостьБУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ТекущаяСтоимостьНУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ТекущаяСтоимостьПР")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ТекущаяСтоимостьВР")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ТекущаяСтоимостьВРЦФ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПервоначальнаяСтоимостьБУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПервоначальнаяСтоимостьНУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПервоначальнаяСтоимостьПР")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("НакопленнаяАмортизацияУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("НакопленнаяАмортизацияБУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("НакопленнаяАмортизацияНУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("НакопленнаяАмортизацияПР")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("НакопленнаяАмортизацияВР")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("НакопленнаяАмортизацияВРЦФ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ТекущаяСтоимостьБУЦФ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ТекущаяСтоимостьНУЦФ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ТекущаяСтоимостьПРЦФ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("НакопленнаяАмортизацияБУЦФ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("НакопленнаяАмортизацияНУЦФ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("НакопленнаяАмортизацияПРЦФ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПервоначальнаяСтоимостьОтличается") Тогда
		
		ПересчитатьЗависимыеСуммы(Форма);
	КонецЕсли; 
	
	Если ОбновитьВсе Тогда
		ПересчитатьИтоговыеСуммы(Форма);
	КонецЕсли;
	
	Элементы.ДекорацияЗаголовокБУ.Видимость = Элементы.ТекущаяСтоимостьБУ.Видимость;
	Элементы.ДекорацияЗаголовокУУ.Видимость = Элементы.ТекущаяСтоимостьУУ.Видимость;
	
	Элементы.ГруппаОстаточнаяСтоимостьЗаголовок.Видимость = 
		Элементы.ОстаточнаяСтоимостьБУ.Видимость
		ИЛИ Элементы.ОстаточнаяСтоимостьНУ.Видимость
		ИЛИ Элементы.ОстаточнаяСтоимостьПР.Видимость
		ИЛИ Элементы.ОстаточнаяСтоимостьВР.Видимость
		ИЛИ Элементы.ОстаточнаяСтоимостьУУ.Видимость;
	
	#КонецОбласти
	
	#Область СтраницаСобытия
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаНУ")
		ИЛИ ОбновитьВсе Тогда
		
		Если ПараметрыПринятияКУчетуОС.ДоступныПараметрыАмортизацииНУ Тогда
			ЗаголовокГруппы = НСтр("ru = 'Модернизация (бухгалтерский и налоговый учет)'");
		Иначе
			ЗаголовокГруппы = НСтр("ru = 'Модернизация (бухгалтерский учет)'");
		КонецЕсли; 
		Элементы.ГруппаПоследняяМодернизацияРегл.Заголовок = ЗаголовокГруппы;
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ ОбновитьВсе Тогда
		
		Если Форма.ОтражатьВУпрУчете Тогда
			ЗаголовокГруппы = НСтр("ru = 'Переоценка (бухгалтерский учет)'");
		Иначе
			ЗаголовокГруппы = НСтр("ru = 'Переоценка'");
		КонецЕсли; 
		Элементы.ГруппаПереоценкаРегл.Заголовок = ЗаголовокГруппы;
		
		Элементы.РезервПереоценкиЗнак.Видимость = Форма.ОтражатьВУпрУчете;
		Элементы.РезервПереоценкиСтоимостиСумма.Видимость = Форма.ОтражатьВУпрУчете;
		Элементы.РезервПереоценкиАмортизацииСумма.Видимость = Форма.ОтражатьВУпрУчете;
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		ИЛИ ОбновитьВсе Тогда
		
		Если Форма.ОтражатьВРеглУчете Тогда
			ЗаголовокГруппы = НСтр("ru = 'Переоценка (управленческий учет)'");
		Иначе
			ЗаголовокГруппы = НСтр("ru = 'Переоценка'");
		КонецЕсли; 
		Элементы.ГруппаПереоценкаУпр.Заголовок = ЗаголовокГруппы;
		
		Элементы.РезервПереоценкиРеглЗнак.Видимость = Форма.ОтражатьВРеглУчете;
		Элементы.РезервПереоценкиСтоимостиРеглСумма.Видимость = Форма.ОтражатьВРеглУчете;
		Элементы.РезервПереоценкиАмортизацииРеглСумма.Видимость = Форма.ОтражатьВРеглУчете;
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ЕстьРезервПереоценкиРегл")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = Не Форма.ЕстьРезервПереоценкиРегл;
		Элементы.РезервПереоценкиРеглЗнак.ТолькоПросмотр = ЗначениеСвойства; 
		Элементы.РезервПереоценкиСтоимостиРеглСумма.ТолькоПросмотр = ЗначениеСвойства; 
		Элементы.РезервПереоценкиАмортизацииРеглСумма.ТолькоПросмотр = ЗначениеСвойства; 
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ЕстьРезервПереоценки")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = Не Форма.ЕстьРезервПереоценки;
		Элементы.РезервПереоценкиЗнак.ТолькоПросмотр = ЗначениеСвойства; 
		Элементы.РезервПереоценкиСтоимостиСумма.ТолькоПросмотр = ЗначениеСвойства; 
		Элементы.РезервПереоценкиАмортизацииСумма.ТолькоПросмотр = ЗначениеСвойства; 
			
	КонецЕсли;
	
	#КонецОбласти
	
	#Область СтраницаАмортизация
	
	Элементы.СрокИспользованияБУРасшифровка.Видимость = Элементы.СрокИспользованияБУ.Видимость;
	Элементы.СрокИспользованияБУОстаточныйРасшифровка.Видимость = Элементы.СрокИспользованияБУОстаточный.Видимость;
	Элементы.СрокИспользованияУУРасшифровка.Видимость = Элементы.СрокИспользованияУУ.Видимость;
	Элементы.СрокИспользованияУУОстаточныйРасшифровка.Видимость = Элементы.СрокИспользованияУУОстаточный.Видимость;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("СрокИспользованияБУ")
		ИЛИ ОбновитьВсе Тогда
		
		Форма.СрокИспользованияБУРасшифровка = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(
			Форма.СрокИспользованияБУ);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("СрокИспользованияНУ")
		ИЛИ ОбновитьВсе Тогда
		
		Форма.СрокИспользованияНУРасшифровка = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(
			Форма.СрокИспользованияНУ);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("СрокИспользованияУУ")
		ИЛИ ОбновитьВсе Тогда
		
		Форма.СрокИспользованияУУРасшифровка = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(
			Форма.СрокИспользованияУУ);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ЕстьИзменениеПараметровАмортизацииБУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ЕстьРезервПереоценкиРегл") 
		ИЛИ ОбновитьВсе Тогда
		
		Если Форма.ЕстьИзменениеПараметровАмортизацииБУ И Форма.ЕстьРезервПереоценкиРегл Тогда
			Элементы.СтоимостьДляВычисленияАмортизацииБУ.Подсказка = НСтр("ru = 'Остаточная стоимость после модернизации и переоценки.'");
		ИначеЕсли Форма.ЕстьИзменениеПараметровАмортизацииБУ Тогда
			Элементы.СтоимостьДляВычисленияАмортизацииБУ.Подсказка = НСтр("ru = 'Остаточная стоимость на дату последней модернизации.'");
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ЕстьИзменениеПараметровАмортизацииУУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ЕстьРезервПереоценки") 
		ИЛИ ОбновитьВсе Тогда
		
		Если Форма.ЕстьИзменениеПараметровАмортизацииУУ И Форма.ЕстьРезервПереоценки Тогда
			Элементы.СтоимостьДляВычисленияАмортизацииУУ.Подсказка = НСтр("ru = 'Остаточная стоимость после модернизации и переоценки.'");
		ИначеЕсли Форма.ЕстьИзменениеПараметровАмортизацииУУ Тогда
			Элементы.СтоимостьДляВычисленияАмортизацииУУ.Подсказка = НСтр("ru = 'Остаточная стоимость на дату последней модернизации.'");
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПоказательНаработки")
		ИЛИ ОбновитьВсе Тогда
		Если ЗначениеЗаполнено(Форма.ПоказательНаработки) Тогда
			Элементы.ОбъемНаработки.Подсказка = ЕдиницаИзмеренияПоказателяНаработки(Форма.ПоказательНаработки);
		Иначе
			Элементы.ОбъемНаработки.Подсказка = "";
		КонецЕсли; 
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаБУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ ОбновитьВсе Тогда
		
		Если Форма.ОтражатьВРеглУчете
			И Форма.ПорядокУчетаБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ") Тогда
			Если Форма.ОтражатьВУпрУчете 
				И Форма.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию") Тогда
				Элементы.СтраницаАмортизация.Заголовок = НСтр("ru = 'Амортизация и износ'");
			Иначе
				Элементы.СтраницаАмортизация.Заголовок = НСтр("ru = 'Износ'");
			КонецЕсли; 
		Иначе	
			Элементы.СтраницаАмортизация.Заголовок = НСтр("ru = 'Амортизация'");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбновитьВсе Тогда
		Если Форма.Дата < Форма.ВспомогательныеРеквизиты.ДатаНачалаУчета 
			И Форма.УпрУчетПоДаннымБУ
			И Форма.ОтражатьВУпрУчете Тогда
			Элементы.СрокИспользованияУУ.Заголовок = НСтр("ru = 'Остаточный срок'");
			Элементы.СрокИспользованияУУ.Подсказка = НСтр("ru = 'Остаточный срок на дату перехода'");
			Элементы.СрокИспользованияУУ.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		КонецЕсли; 
	КонецЕсли;
	
	Элементы.ГруппаНакопленнаяАмортизацияЗаголовок.Видимость = 
		Элементы.НакопленнаяАмортизацияУУ.Видимость 
		ИЛИ Элементы.НакопленнаяАмортизацияБУ.Видимость;
		
	Элементы.ДекорацияКоэффициентАмортизацииБУПроцент.Видимость = Элементы.КоэффициентАмортизацииБУ.Видимость;
	
	#КонецОбласти
	
	#Область СтраницаОтражениеРасходов
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("СтатьяРасходовУУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаБУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаНУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ") 
		ИЛИ ОбновитьВсе Тогда
		
		Если ПараметрыПринятияКУчетуОС.СтатьяРасходовУУОбязательна 
			ИЛИ ЗначениеЗаполнено(Форма.СтатьяРасходовУУ) Тогда
			
			Элементы.СтатьяРасходовУУ.ПодсказкаВвода = "";
			Элементы.АналитикаРасходовУУ.ПодсказкаВвода = "";
			
		ИначеЕсли НЕ ПараметрыПринятияКУчетуОС.СтатьяРасходовУУОбязательна Тогда
			
			Если ПараметрыПринятияКУчетуОС.ДоступноОтражениеРасходовБУ
				И ПараметрыПринятияКУчетуОС.ДоступноОтражениеРасходовНУ Тогда
				ПодсказкаВводаСтатьи = НСтр("ru = 'совпадает с бухгалтерским и налоговым учетом'");
			ИначеЕсли ПараметрыПринятияКУчетуОС.ДоступноОтражениеРасходовНУ Тогда
				ПодсказкаВводаСтатьи = НСтр("ru = 'совпадает с налоговым учетом'");
			Иначе
				ПодсказкаВводаСтатьи = НСтр("ru = 'совпадает с бухгалтерским учетом'");
			КонецЕсли;
			
			Элементы.СтатьяРасходовУУ.ПодсказкаВвода = ПодсказкаВводаСтатьи;
			Элементы.АналитикаРасходовУУ.ПодсказкаВвода = ПодсказкаВводаСтатьи;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаНУ")
		ИЛИ ОбновитьВсе Тогда
		
		Если ПараметрыПринятияКУчетуОС.ДоступноОтражениеРасходовБУ
			И ПараметрыПринятияКУчетуОС.ДоступноОтражениеРасходовНУ Тогда
			ЗаголовокГруппы = НСтр("ru = 'Амортизация (бухгалтерский и налоговый учет)'");
		ИначеЕсли ПараметрыПринятияКУчетуОС.ДоступноОтражениеРасходовНУ Тогда
			ЗаголовокГруппы = НСтр("ru = 'Амортизация (налоговый учет)'");
		Иначе
			ЗаголовокГруппы = НСтр("ru = 'Амортизация (бухгалтерский учет)'");
		КонецЕсли; 
		Элементы.ГруппаОтражениеАмортизационныхРасходовБУ.Заголовок = ЗаголовокГруппы;
		
	КонецЕсли;
	
	#КонецОбласти
	
	ЗаполнитьЗначенияРеквизитовДоИзменения(Форма);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЗависимыеЭлементыФормыНаСервере(Знач ИзмененныеРеквизитыИлиЭлемент = "")

	Если ТипЗнч(ИзмененныеРеквизитыИлиЭлемент) = Тип("Строка") Тогда
		ИзмененныеРеквизиты = ИзмененныеРеквизитыИлиЭлемент;
	Иначе
		ИзмененныеРеквизиты = ИзмененныеРеквизитыИлиЭлемент.Имя;
	КонецЕсли;
	
	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ВспомогательныеРеквизиты = Документы.ВводОстатковВнеоборотныхАктивов2_4.ВспомогательныеРеквизиты(
									ЭтаФорма, Истина, ЕстьСвязанныеОрганизации);
	
	НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтаФорма, ИзмененныеРеквизиты);

	Если СтруктураИзмененныхРеквизитов.Свойство("ГруппаФинансовогоУчета")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаБУ")
		ИЛИ ОбновитьВсе Тогда
		
		Если ЗначениеЗаполнено(ГруппаФинансовогоУчета) Тогда
			РеквизитыГФУ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ГруппаФинансовогоУчета, "СчетУчета,СчетУчетаЦФ,СчетУчетаАмортизации,СчетУчетаАмортизацииЦФ");
			ТекстСтоимость     = СтрШаблон(НСтр("ru = 'Для бухгалтерского и налогового учета определяется как остаток на счете %1'"), РеквизитыГФУ.СчетУчета);
			ТекстСтоимостьЦФ   = СтрШаблон(НСтр("ru = 'Для бухгалтерского и налогового учета определяется как остаток на счете %1'"), РеквизитыГФУ.СчетУчетаЦФ);
			ТекстАмортизация   = СтрШаблон(НСтр("ru = 'Для бухгалтерского и налогового учета определяется как остаток на счете %1'"), РеквизитыГФУ.СчетУчетаАмортизации);
			ТекстАмортизацияЦФ = СтрШаблон(НСтр("ru = 'Для бухгалтерского и налогового учета определяется как остаток на счете %1'"), РеквизитыГФУ.СчетУчетаАмортизацииЦФ);
		Иначе
			ТекстСтоимость     = НСтр("ru = 'Для бухгалтерского и налогового учета определяется как остаток на счете учета.'");
			ТекстСтоимостьЦФ   = НСтр("ru = 'Для бухгалтерского и налогового учета определяется как остаток на счете учета средств целевого финансирования.'");
			ТекстАмортизация   = НСтр("ru = 'Для бухгалтерского и налогового учета определяется как остаток на счете учета накопления амортизации.'");
			ТекстАмортизацияЦФ = НСтр("ru = 'Для бухгалтерского и налогового учета определяется как остаток на счете учета средств целевого финансирование в накопленной амортизации.'");
		КонецЕсли; 
		Если ПорядокУчетаБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ Тогда
			СчетИзноса = ПланыСчетов.Хозрасчетный.ИзносОсновныхСредств;
			ТекстАмортизация = СтрШаблон(НСтр("ru = 'Для бухгалтерского учета определяется как остаток на счете %1'"), СчетИзноса);
		КонецЕсли;
		Элементы.ГруппаТекущаяСтоимостьЗаголовок.Подсказка = ТекстСтоимость;
		Элементы.ГруппаТекущаяСтоимостьЗаголовокЦФ.Подсказка = ТекстСтоимостьЦФ;
		Элементы.ГруппаНакопленнаяАмортизацияЗаголовок.Подсказка = ТекстАмортизация;
		Элементы.ГруппаНакопленнаяАмортизацияЗаголовокЦФ.Подсказка = ТекстАмортизацияЦФ;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииРеквизитов(Объект, ИзмененныеРеквизиты)

	Если НЕ ЗначениеЗаполнено(ИзмененныеРеквизиты) Тогда
		Возврат; 
	КонецЕсли; 
	
	СписокРеквизитов = СтрРазделить(ИзмененныеРеквизиты, ",");
	
	// ВАЖНО: Порядок имеет значение!
	
	Если СписокРеквизитов.Найти("ПорядокУчетаБУ") <> Неопределено Тогда
		
		Если Объект.ПорядокУчетаБУ <> ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации") Тогда
			
			Объект.МетодНачисленияАмортизацииБУ = Неопределено;
			Объект.КоэффициентУскоренияБУ = 0;
			Объект.СтатьяРасходовБУ = Неопределено;
			Объект.АналитикаРасходовБУ = Неопределено;
			
			СписокРеквизитов.Добавить("МетодНачисленияАмортизацииБУ");
			
		КонецЕсли;
		
		Если Объект.ПорядокУчетаБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается")
			ИЛИ Объект.ПорядокУчетаБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету") Тогда
			
			Объект.НачислятьАмортизациюБУ = Ложь;
			Объект.СрокИспользованияБУ = 0;
			Объект.КоэффициентАмортизацииБУ = 0;
			
			СписокРеквизитов.Добавить("НачислятьАмортизациюБУ");
			
		КонецЕсли;
		
	КонецЕсли;

	Если СписокРеквизитов.Найти("ПорядокУчетаНУ") <> Неопределено Тогда
		
		Если Объект.ПорядокУчетаНУ <> ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации") Тогда
			
			Объект.НачислятьАмортизациюНУ = Ложь;
			Объект.СтатьяРасходовАмортизационнойПремии = Неопределено;
			Объект.АналитикаРасходовАмортизационнойПремии = Неопределено;
			Объект.ВключитьАмортизационнуюПремиюВСоставРасходов = Ложь;
			Объект.СуммаКапитальныхВложенийВключаемыхВРасходыНУ = 0;
			
			СписокРеквизитов.Добавить("НачислятьАмортизациюНУ");
			
		КонецЕсли;
		
		Если Объект.ПорядокУчетаНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету")  Тогда
			Объект.НакопленнаяАмортизацияНУ = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	ИзмененныеРеквизиты = СтрСоединить(СписокРеквизитов, ",");
	
КонецПроцедуры

&НаКлиенте
Функция ТребуетсяВызовСервераДляНастройкиЭлементовФормы(СтруктураИзмененныхРеквизитов)

	Если СтруктураИзмененныхРеквизитов.Количество() = 0
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ГруппаФинансовогоУчета")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаБУ")
			И ПорядокУчетаБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ") Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Возврат Ложь;

КонецФункции

&НаКлиенте
Процедура ПриИзмененииСрокаИспользования(ИмяРеквизита, ОбновитьЕслиСовпадают)

	СписокРеквизитов = ИмяРеквизита;
	
	СрокиИспользованияСовпадают = (НЕ ОтражатьВРеглУчете ИЛИ (ЗначенияРеквизитовДоИзменения.СрокИспользованияБУ = ЗначенияРеквизитовДоИзменения.СрокИспользованияНУ))
									И (НЕ ОтражатьВУпрУчете ИЛИ (ЗначенияРеквизитовДоИзменения.СрокИспользованияБУ = ЗначенияРеквизитовДоИзменения.СрокИспользованияУУ));
	
	Если ИмяРеквизита <> "СрокИспользованияУУ"
		И ОтражатьВУпрУчете
		И (СрокИспользованияУУ = 0
			ИЛИ СрокиИспользованияСовпадают И ОбновитьЕслиСовпадают) Тогда
		
		СрокИспользованияУУ = ЭтаФорма[ИмяРеквизита];
		СписокРеквизитов = СписокРеквизитов + ",СрокИспользованияУУ";
		
	КонецЕсли;
	
	Если ИмяРеквизита <> "СрокИспользованияБУ"
		И ОтражатьВУпрУчете
		И (СрокИспользованияНУ = 0
			ИЛИ СрокиИспользованияСовпадают И ОбновитьЕслиСовпадают) Тогда
		
		СрокИспользованияБУ = ЭтаФорма[ИмяРеквизита];
		СписокРеквизитов = СписокРеквизитов + ",СрокИспользованияБУ";
		
	КонецЕсли;
	
	Если ИмяРеквизита <> "СрокИспользованияНУ"
		И ОтражатьВРеглУчете
		И (СрокИспользованияНУ = 0
			ИЛИ СрокиИспользованияСовпадают И ОбновитьЕслиСовпадают) Тогда
		
		СрокИспользованияНУ = ЭтаФорма[ИмяРеквизита];
		СписокРеквизитов = СписокРеквизитов + ",СрокИспользованияНУ";
		
	КонецЕсли;
	
	ЗаполнитьЗначенияРеквизитовДоИзменения(ЭтаФорма);
	
	НастроитьЗависимыеЭлементыФормы(СписокРеквизитов);		

КонецПроцедуры

&НаСервере
Процедура МетодНачисленияАмортизацииБУПриИзмененииНаСервере()
	
	ЗаполнитьГодовуюНормуАмортизацииБУ();
	
	НастроитьЗависимыеЭлементыФормыНаСервере("МетодНачисленияАмортизацииБУ,КоэффициентАмортизацииБУ");
	
КонецПроцедуры

&НаСервере
Процедура ОсновноеСредствоПриИзмененииНаСервере()

	ЗаполнитьСведенияОС();
	ЗаполнитьГодовуюНормуАмортизацииБУ();
	
	НастроитьЗависимыеЭлементыФормыНаСервере("ОсновноеСредство");
	
КонецПроцедуры
 
&НаСервере
Процедура СтатьяРасходовБУПриИзмененииНаСервере()
	
	СтатьяРасходовПриИзменении(
		СтатьяРасходовБУ, 
		АналитикаРасходовБУ, 
		АналитикаРасходовБУОбязательна);
		
	НастроитьЗависимыеЭлементыФормыНаСервере("СтатьяРасходовБУ");
	
КонецПроцедуры

&НаСервере
Процедура СтатьяРасходовУУПриИзмененииНаСервере()

	СтатьяРасходовПриИзменении(
		СтатьяРасходовУУ, 
		АналитикаРасходовУУ, 
		АналитикаРасходовУУОбязательна);
	
	НастроитьЗависимыеЭлементыФормыНаСервере("СтатьяРасходовУУ");
	
КонецПроцедуры

&НаСервере
Процедура СтатьяРасходовАмортизационнойПремииПриИзмененииНаСервере()
	
	СтатьяРасходовПриИзменении(
		СтатьяРасходовАмортизационнойПремии, 
		АналитикаРасходовАмортизационнойПремии, 
		АналитикаРасходовАмортизационнойПремииОбязательна);
		
КонецПроцедуры

&НаСервере
Процедура СтатьяРасходовНалогПриИзмененииНаСервере()

	ДанныеДляЗаполнения = Новый Структура("Организация,Подразделение", Организация,Местонахождение);
	ДоходыИРасходыСервер.СтатьяРасходовПриИзменении(ДанныеДляЗаполнения, СтатьяРасходовНалог, АналитикаРасходовНалог);

КонецПроцедуры

&НаСервере
Процедура СтатьяДоходовЦФПриИзмененииНаСервере()
	
	АналитикаДоходовОбязательна =
		ЗначениеЗаполнено(СтатьяДоходов)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьяДоходов, "КонтролироватьЗаполнениеАналитики");
		
	ДанныеДляЗаполнения = Новый Структура("Организация,Подразделение", Организация, Местонахождение);
	ДоходыИРасходыСервер.СтатьяДоходовПриИзменении(ДанныеДляЗаполнения, СтатьяДоходов, Местонахождение, АналитикаДоходов);
		
КонецПроцедуры

&НаСервере
Процедура СтатьяРасходовПриИзменении(СтатьяРасходов, АналитикаРасходов, АналитикаРасходовОбязательна)

	Если НЕ ЗначениеЗаполнено(СтатьяРасходов) Тогда
		АналитикаРасходов = Неопределено;
	КонецЕсли;
	
	АналитикаРасходовОбязательна = 
		ЗначениеЗаполнено(СтатьяРасходов)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьяРасходов, "КонтролироватьЗаполнениеАналитики");
		
	ДанныеДляЗаполнения = Новый Структура("Организация,Подразделение", Организация,Местонахождение);
	ДоходыИРасходыСервер.СтатьяРасходовПриИзменении(ДанныеДляЗаполнения, СтатьяРасходов, АналитикаРасходов);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьЗависимыеСуммы(Форма)
	
	МножительЦФ = ?(Форма.ПрименениеЦелевогоФинансирования, 1, 0);
	
	Форма.ТекущаяСтоимостьПРЦФ       = Форма.ТекущаяСтоимостьБУЦФ;
	Форма.НакопленнаяАмортизацияПРЦФ = Форма.НакопленнаяАмортизацияБУЦФ;
	
	Если Не Форма.ПервоначальнаяСтоимостьОтличается Тогда
		
		Форма.ПервоначальнаяСтоимостьУУ = Форма.ТекущаяСтоимостьУУ;
		Форма.ПервоначальнаяСтоимостьБУ = Форма.ТекущаяСтоимостьБУ + Форма.ТекущаяСтоимостьБУЦФ * МножительЦФ;
		Форма.ПервоначальнаяСтоимостьНУ = Форма.ТекущаяСтоимостьНУ + Форма.ТекущаяСтоимостьНУЦФ * МножительЦФ;
		Форма.ПервоначальнаяСтоимостьПР = Форма.ТекущаяСтоимостьПР + Форма.ТекущаяСтоимостьПРЦФ * МножительЦФ;
		
	КонецЕсли;
	
	ПересчитатьИтоговыеСуммы(Форма);
	
	ЗаполнитьЗначенияРеквизитовДоИзменения(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьИтоговыеСуммы(Форма)

	// Временные разницы не редактируются
	Форма.ТекущаяСтоимостьВР         = Форма.ТекущаяСтоимостьБУ         - Форма.ТекущаяСтоимостьНУ         - Форма.ТекущаяСтоимостьПР;
	Форма.ТекущаяСтоимостьВРЦФ       = Форма.ТекущаяСтоимостьБУЦФ       - Форма.ТекущаяСтоимостьНУЦФ       - Форма.ТекущаяСтоимостьПРЦФ;
	Форма.ПервоначальнаяСтоимостьВР	 = Форма.ПервоначальнаяСтоимостьБУ  - Форма.ПервоначальнаяСтоимостьНУ  - Форма.ПервоначальнаяСтоимостьПР;
	
	Если Форма.ПорядокУчетаБУ <> ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ") Тогда
		Форма.НакопленнаяАмортизацияВР   = Форма.НакопленнаяАмортизацияБУ   - Форма.НакопленнаяАмортизацияНУ   - Форма.НакопленнаяАмортизацияПР;
		Форма.НакопленнаяАмортизацияВРЦФ = Форма.НакопленнаяАмортизацияБУЦФ - Форма.НакопленнаяАмортизацияНУЦФ - Форма.НакопленнаяАмортизацияПРЦФ;
	КонецЕсли; 
	
	// Остаточная стоимость не редактируется
	Форма.ОстаточнаяСтоимостьУУ   = Форма.ТекущаяСтоимостьУУ   - Форма.НакопленнаяАмортизацияУУ;
	
	Если Форма.ПорядокУчетаБУ <> ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ")
		И Форма.ОтражатьВРеглУчете Тогда
		Форма.ОстаточнаяСтоимостьБУ   = Форма.ТекущаяСтоимостьБУ   - Форма.НакопленнаяАмортизацияБУ;
		Форма.ОстаточнаяСтоимостьНУ   = Форма.ТекущаяСтоимостьНУ   - Форма.НакопленнаяАмортизацияНУ;
		Форма.ОстаточнаяСтоимостьПР   = Форма.ТекущаяСтоимостьПР   - Форма.НакопленнаяАмортизацияПР;
		Форма.ОстаточнаяСтоимостьВР   = Форма.ТекущаяСтоимостьВР   - Форма.НакопленнаяАмортизацияВР;
		
		Форма.ОстаточнаяСтоимостьБУЦФ = Форма.ТекущаяСтоимостьБУЦФ - Форма.НакопленнаяАмортизацияБУЦФ;
		Форма.ОстаточнаяСтоимостьНУЦФ = Форма.ТекущаяСтоимостьНУЦФ - Форма.НакопленнаяАмортизацияНУЦФ;
		Форма.ОстаточнаяСтоимостьПРЦФ = Форма.ТекущаяСтоимостьПРЦФ - Форма.НакопленнаяАмортизацияПРЦФ;
		Форма.ОстаточнаяСтоимостьВРЦФ = Форма.ТекущаяСтоимостьВРЦФ - Форма.НакопленнаяАмортизацияВРЦФ;
	Иначе	
		Форма.ОстаточнаяСтоимостьБУ   = 0;
		Форма.ОстаточнаяСтоимостьНУ   = 0;
		Форма.ОстаточнаяСтоимостьПР   = 0;
		Форма.ОстаточнаяСтоимостьВР   = 0;
		
		Форма.ОстаточнаяСтоимостьБУЦФ = 0;
		Форма.ОстаточнаяСтоимостьНУЦФ = 0;
		Форма.ОстаточнаяСтоимостьПРЦФ = 0;
		Форма.ОстаточнаяСтоимостьВРЦФ = 0;
	КонецЕсли; 

КонецПроцедуры
 
&НаСервере
Процедура ЗаполнитьСведенияОС()

	Если НЕ ЗначениеЗаполнено(ОсновноеСредство) Тогда
		СведенияОС = Новый ФорматированнаяСтрока("");
		Элементы.ГруппаОССтрокой.Видимость = Ложь;
		Элементы.КодПоОКОФ.Видимость = Ложь;
		Элементы.ШифрПоЕНАОФ.Видимость = Ложь;
		Элементы.АмортизационнаяГруппа.Видимость = Ложь;
		Возврат;
	КонецЕсли; 
	
	Элементы.ГруппаОССтрокой.Видимость = Истина;
	Элементы.КодПоОКОФ.Видимость = Истина;
	Элементы.ШифрПоЕНАОФ.Видимость = Истина;
	Элементы.АмортизационнаяГруппа.Видимость = Истина;
	
	ПолучаемыеРеквизиты = Новый Структура;
	ПолучаемыеРеквизиты.Вставить("ИнвентарныйНомер");
	ПолучаемыеРеквизиты.Вставить("АмортизационнаяГруппа");
	ПолучаемыеРеквизиты.Вставить("ГруппаОС");
	ПолучаемыеРеквизиты.Вставить("КодПоОКОФ");
	ПолучаемыеРеквизиты.Вставить("КодПоОКОФПредставление", "КодПоОКОФ.Наименование");
	ПолучаемыеРеквизиты.Вставить("ШифрПоЕНАОФ");
	ПолучаемыеРеквизиты.Вставить("ШифрПоЕНАОФПредставление", "ШифрПоЕНАОФ.Наименование");
	РеквизитыОС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОсновноеСредство, ПолучаемыеРеквизиты);
	
	СписокСтрок = Новый Массив;
	
	СписокСтрок.Добавить(НСтр("ru = 'Инв. №:'"));
	Если ЗначениеЗаполнено(РеквизитыОС.ИнвентарныйНомер) Тогда
		СписокСтрок.Добавить(" ");
		СписокСтрок.Добавить(СокрЛП(РеквизитыОС.ИнвентарныйНомер));
	Иначе	
		СписокСтрок.Добавить(" ");
		ДанныеСтроки = Новый ФорматированнаяСтрока(НСтр("ru = 'не заполнен'"),, ЦветаСтиля.ЦветНедоступногоТекста);
		СписокСтрок.Добавить(ДанныеСтроки);
	КонецЕсли;	
	
	СведенияОС = Новый ФорматированнаяСтрока(СписокСтрок);

	ГруппаОС = РеквизитыОС.ГруппаОС;
	Если ЗначениеЗаполнено(РеквизитыОС.ГруппаОС) Тогда
		ГруппаОССтрокой = Новый ФорматированнаяСтрока(Строка(РеквизитыОС.ГруппаОС));
	Иначе
		ГруппаОССтрокой = Новый ФорматированнаяСтрока(НСтр("ru = 'не заполнена'"),, ЦветаСтиля.ЦветНедоступногоТекста);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(РеквизитыОС.КодПоОКОФ) Тогда
		КодПоОКОФ = Новый ФорматированнаяСтрока(Строка(РеквизитыОС.КодПоОКОФ));
		Элементы.КодПоОКОФ.Подсказка = РеквизитыОС.КодПоОКОФПредставление;
		Элементы.КодПоОКОФ.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	Иначе
		КодПоОКОФ = Новый ФорматированнаяСтрока(НСтр("ru = 'не заполнен'"),, ЦветаСтиля.ЦветНедоступногоТекста);
		Элементы.КодПоОКОФ.Подсказка = "";
		Элементы.КодПоОКОФ.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(РеквизитыОС.ШифрПоЕНАОФ) Тогда
		ШифрПоЕНАОФ = Новый ФорматированнаяСтрока(Строка(РеквизитыОС.ШифрПоЕНАОФ));
		Элементы.ШифрПоЕНАОФ.Подсказка = РеквизитыОС.ШифрПоЕНАОФПредставление;
		Элементы.ШифрПоЕНАОФ.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	Иначе
		ШифрПоЕНАОФ = Новый ФорматированнаяСтрока(НСтр("ru = 'не заполнен'"),, ЦветаСтиля.ЦветНедоступногоТекста);
		Элементы.ШифрПоЕНАОФ.Подсказка = "";
		Элементы.ШифрПоЕНАОФ.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(РеквизитыОС.АмортизационнаяГруппа) Тогда
		АмортизационнаяГруппа = Новый ФорматированнаяСтрока(Строка(РеквизитыОС.АмортизационнаяГруппа));
	Иначе
		АмортизационнаяГруппа = Новый ФорматированнаяСтрока(НСтр("ru = 'не заполнена'"),, ЦветаСтиля.ЦветНедоступногоТекста);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьЗначенияРеквизитовДоИзменения(Форма)

	СписокРеквизитов = "ДатаПринятияКУчетуУУ,ДатаПринятияКУчетуБУ,
						|СрокИспользованияУУ,СрокИспользованияНУ,СрокИспользованияБУ,
						|ТекущаяСтоимостьУУ,ТекущаяСтоимостьБУ,ТекущаяСтоимостьНУ,
						|НакопленнаяАмортизацияУУ,НакопленнаяАмортизацияБУ,НакопленнаяАмортизацияНУ,
						|ПервоначальнаяСтоимостьУУ,ПервоначальнаяСтоимостьБУ,ПервоначальнаяСтоимостьНУ,
						|СтатьяРасходовБУ,АналитикаРасходовБУ";
	
	ЗначенияРеквизитовДоИзменения = Новый Структура(СписокРеквизитов);
	ЗаполнитьЗначенияСвойств(ЗначенияРеквизитовДоИзменения, Форма);
	
	Форма.ЗначенияРеквизитовДоИзменения = Новый ФиксированнаяСтруктура(ЗначенияРеквизитовДоИзменения);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕдиницаИзмеренияПоказателяНаработки(Знач ПоказательНаработки)

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПоказательНаработки, "ЕдиницаИзмерения");

КонецФункции

&НаСервере
Процедура ПорядокУчетаБУПриИзмененииНаСервере(Знач ИзмененныеРеквизиты)

	ЗаполнитьГодовуюНормуАмортизацииБУ();
	
	НастроитьЗависимыеЭлементыФормыНаСервере(ИзмененныеРеквизиты);
	
	ПересчитатьЗависимыеСуммы(ЭтаФорма);

КонецПроцедуры
 
#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()

	ЕстьСвязанныеОрганизации = Справочники.Организации.ОрганизацияВзаимосвязанаСДругимиОрганизациями(Организация);
	
	Если Параметры.НоваяСтрока И НЕ Параметры.Копирование Тогда
		ЗаполнитьЗначенияПоУмолчанию();
	КонецЕсли;
	
	КорректировкаСтоимостиАрендованногоИмуществаВР = -КорректировкаСтоимостиАрендованногоИмуществаНУ;
	
	АдресМестонахожденияЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
		АдресМестонахождения,
		Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	АдресМестонахожденияАрендатораЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
		АдресМестонахожденияАрендатора,
		Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	Элементы.ЛиквидационнаяСтоимостьВалюта.Заголовок = ВалютаУпр;
	Элементы.ДекорацияЗаголовокУУ.Заголовок = СтрШаблон(НСтр("ru = 'УУ (%1):'"), Строка(ВалютаУпр));
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	Элементы.ДекорацияЗаголовокБУ.Заголовок = СтрШаблон(НСтр("ru = 'БУ (%1):'"), Строка(ВалютаРегл));
	Элементы.ДекорацияЗаголовокНУ.Заголовок = СтрШаблон(НСтр("ru = 'НУ (%1):'"), Строка(ВалютаРегл));
	Элементы.ДекорацияЗаголовокПР.Заголовок = СтрШаблон(НСтр("ru = 'ПР (%1):'"), Строка(ВалютаРегл));
	Элементы.ДекорацияЗаголовокВР.Заголовок = СтрШаблон(НСтр("ru = 'ВР (%1):'"), Строка(ВалютаРегл));
	
	ДатаНачалаУчета = Константы.ДатаНачалаУчетаВнеоборотныхАктивов2_4.Получить();
	УпрУчетПоДаннымБУ = ПолучитьФункциональнуюОпцию("ИспользоватьАмортизациюБухгалтерскогоУчетаВУправленческомУчете");
	
	АналитикаРасходовБУОбязательна =
		ЗначениеЗаполнено(СтатьяРасходовБУ)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьяРасходовБУ, "КонтролироватьЗаполнениеАналитики");
	
	АналитикаРасходовУУОбязательна =
		ЗначениеЗаполнено(СтатьяРасходовУУ)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьяРасходовУУ, "КонтролироватьЗаполнениеАналитики");
	
	АналитикаРасходовАмортизационнойПремииОбязательна =
		ЗначениеЗаполнено(СтатьяРасходовАмортизационнойПремии)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьяРасходовАмортизационнойПремии, "КонтролироватьЗаполнениеАналитики");
	
	АналитикаДоходовОбязательна =
		ЗначениеЗаполнено(СтатьяДоходов)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьяДоходов, "КонтролироватьЗаполнениеАналитики");
		
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуОС
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуПредметовЛизингаНаБалансе Тогда
		Элементы.ГруппаМестоНахождение.Заголовок = НСтр("ru = 'Учет у арендодателя'");
		Элементы.МОЛ.Подсказка = НСтр("ru = 'Материально ответственное лицо за основное средство на время аренды.'")
	Иначе
		Элементы.ГруппаМестоНахождение.Заголовок = НСтр("ru = 'Местонахождение'");
		Элементы.МОЛ.Подсказка = НСтр("ru = 'Материально ответственное лицо за основное средство.'")
	КонецЕсли;
	
	УстановитьВидимость();
	
	ЗаполнитьСведенияОС();
	
	НастроитьЗависимыеЭлементыФормыНаСервере();
	
	ЗаполнитьЗначенияРеквизитовДоИзменения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()

	ДатаУчетнойПолитики = КонецМесяца(Дата) + 1;
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(
		ЭтаФорма, Организация, ДатаУчетнойПолитики);
	
	ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, ДатаУчетнойПолитики);
	ПоддержкаПБУ18 = УчетнаяПолитика.ПоддержкаПБУ18(Организация, ДатаУчетнойПолитики);
	
	Элементы.ДекорацияЗаголовокНУ.Видимость = ПлательщикНалогаНаПрибыль И ОтражатьВРеглУчете;
	Элементы.ДекорацияЗаголовокПР.Видимость = ПлательщикНалогаНаПрибыль И ПоддержкаПБУ18 И ОтражатьВРеглУчете;
	Элементы.ДекорацияЗаголовокВР.Видимость = ПлательщикНалогаНаПрибыль И ПоддержкаПБУ18 И ОтражатьВРеглУчете;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ПланыВидовХарактеристик.СтатьиДоходов.УстановитьУсловноеОформлениеАналитик(УсловноеОформление);
	
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(
		УсловноеОформление,
		"СтатьяРасходовБУ, АналитикаРасходовБУ,
		|СтатьяРасходовУУ, АналитикаРасходовУУ,
		|СтатьяРасходовАмортизационнойПремии, АналитикаРасходовАмортизационнойПремии,
		|СтатьяРасходовНалог, АналитикаРасходовНалог");
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначенияПолейКонтактнойИнформацииСервер(Знач Представление, Знач ВидКонтактнойИнформации)
	
	Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Представление, ВидКонтактнойИнформации);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьГодовуюНормуАмортизацииБУ()

	Если НЕ ЗначениеЗаполнено(ОсновноеСредство) Тогда
		Возврат;
	КонецЕсли;
	
	Если МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ
		ИЛИ ПорядокУчетаБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ОбъектыЭксплуатации.ШифрПоЕНАОФ.НормаАмортизационныхОтчислений, 0) КАК Коэффициент
		|ИЗ
		|	Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
		|ГДЕ
		|	ОбъектыЭксплуатации.Ссылка = &ОсновноеСредство";
	ИначеЕсли МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ОбъектыЭксплуатации.ШифрПоЕНАОФ.ПроцентОтСтоимостиМашины, 0) КАК Коэффициент
		|ИЗ
		|	Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
		|ГДЕ
		|	ОбъектыЭксплуатации.Ссылка = &ОсновноеСредство";
	Иначе
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	КоэффициентАмортизацииБУ = Выборка.Коэффициент;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗавершитьРедактирование();
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактирование()

	ОчиститьСообщения();
	
	Если НЕ ПроверитьЗаполнение() Тогда
		ТекстВопроса = НСтр("ru = 'Не заполнены обязательные поля.
                             |Можно завершить редактирование или продолжить редактирование.'");
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Завершить редактирование'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Продолжить редактирование'"));
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьРедактированиеЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок,, КодВозвратаДиалога.Да);
	Иначе
		ЗавершитьРедактированиеЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактированиеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	РезультатРедактирования = Новый Структура(СохраняемыеРеквизиты);
	ЗаполнитьЗначенияСвойств(РезультатРедактирования, ЭтаФорма);
	
	МножительРезерваПереоценки = ?(ЕстьРезервПереоценкиРегл, ?(РезервПереоценкиРеглЗнак, 1, -1), 0);
	РезультатРедактирования.Вставить("РезервПереоценкиСтоимостиРегл", МножительРезерваПереоценки * РезервПереоценкиСтоимостиРеглСумма);
	РезультатРедактирования.Вставить("РезервПереоценкиАмортизацииРегл", МножительРезерваПереоценки * РезервПереоценкиАмортизацииРеглСумма);
	
	МножительРезерваПереоценки = ?(ЕстьРезервПереоценки, ?(РезервПереоценкиЗнак, 1, -1), 0);
	РезультатРедактирования.Вставить("РезервПереоценкиСтоимости", МножительРезерваПереоценки * РезервПереоценкиСтоимостиСумма);
	РезультатРедактирования.Вставить("РезервПереоценкиАмортизации", МножительРезерваПереоценки * РезервПереоценкиАмортизацииСумма);
	
	Модифицированность = Ложь;
	
	Закрыть(РезультатРедактирования);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеАналитик(ПараметрыРеквизитовОбъекта, МассивНепроверяемыхРеквизитов, Отказ)

	ПроверяемыеРеквизитыСтатейРасходов = Новый Массив;
	Если ВнеоборотныеАктивыКлиентСервер.ЗначениеСвойстваРеквизитаОбъекта("СтатьяРасходовБУ", "Видимость", ПараметрыРеквизитовОбъекта) = Истина Тогда
		ПроверяемыеРеквизитыСтатейРасходов.Добавить("СтатьяРасходовБУ, АналитикаРасходовБУ");
	КонецЕсли; 
	Если ВнеоборотныеАктивыКлиентСервер.ЗначениеСвойстваРеквизитаОбъекта("СтатьяРасходовАмортизационнойПремии", "Видимость", ПараметрыРеквизитовОбъекта) = Истина Тогда
		ПроверяемыеРеквизитыСтатейРасходов.Добавить("СтатьяРасходовАмортизационнойПремии, АналитикаРасходовАмортизационнойПремии");
	КонецЕсли; 
	Если ВнеоборотныеАктивыКлиентСервер.ЗначениеСвойстваРеквизитаОбъекта("СтатьяРасходовУУ", "Видимость", ПараметрыРеквизитовОбъекта) = Истина Тогда
		ПроверяемыеРеквизитыСтатейРасходов.Добавить("СтатьяРасходовУУ, АналитикаРасходовУУ");
	КонецЕсли; 
	Если ВнеоборотныеАктивыКлиентСервер.ЗначениеСвойстваРеквизитаОбъекта("СтатьяРасходовНалог", "АвтоОтметкаНезаполненного", ПараметрыРеквизитовОбъекта) = Истина Тогда
		ПроверяемыеРеквизитыСтатейРасходов.Добавить("СтатьяРасходовНалог, АналитикаРасходовНалог");
	КонецЕсли; 
	
	Если ПроверяемыеРеквизитыСтатейРасходов.Количество() <> 0 Тогда
		ПланыВидовХарактеристик.СтатьиРасходов.ПроверитьЗаполнениеАналитик(
			ЭтотОбъект, СтрСоединить(ПроверяемыеРеквизитыСтатейРасходов, ","), МассивНепроверяемыхРеквизитов, Отказ);
	КонецЕсли; 
	
	//
	Если ВнеоборотныеАктивыКлиентСервер.ЗначениеСвойстваРеквизитаОбъекта("СтатьяДоходов", "Видимость", ПараметрыРеквизитовОбъекта) = Истина Тогда
		ПланыВидовХарактеристик.СтатьиДоходов.ПроверитьЗаполнениеАналитик(ЭтаФорма,, МассивНепроверяемыхРеквизитов, Отказ);
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияПоУмолчанию()

	ВспомогательныеРеквизиты = Документы.ВводОстатковВнеоборотныхАктивов2_4.ВспомогательныеРеквизиты(
										ЭтаФорма, Истина, ЕстьСвязанныеОрганизации);

	ПараметрыРеквизитовОбъекта = ВнеоборотныеАктивыКлиентСервер.ЗначенияСвойствЗависимыхРеквизитов_ВводОстатков(
									ЭтаФорма, ВспомогательныеРеквизиты, "");
									
	Документы.ВводОстатковВнеоборотныхАктивов2_4.ЗаполнитьРеквизитыВзависимостиОтСвойств(
			ЭтаФорма, ВспомогательныеРеквизиты, ПараметрыРеквизитовОбъекта);
										
	Документы.ВводОстатковВнеоборотныхАктивов2_4.ЗаполнитьЗначенияПоУмолчанию(ЭтаФорма, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресМестонахожденияНачалоВыбораЗавершение(РезультатОткрытияФормы, ПараметрыОповещения) Экспорт
	
	Если ТипЗнч(РезультатОткрытияФормы)<>Тип("Структура") Тогда
		// не было измнений в данных
		Возврат;
	КонецЕсли;
	
	АдресМестонахожденияЗначенияПолей = РезультатОткрытияФормы.КонтактнаяИнформация;
	АдресМестонахождения = РезультатОткрытияФормы.Представление;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресМестонахожденияАрендатораНачалоВыбораЗавершение(РезультатОткрытияФормы, ПараметрыОповещения) Экспорт
	
	Если ТипЗнч(РезультатОткрытияФормы)<>Тип("Структура") Тогда
		// не было измнений в данных
		Возврат;
	КонецЕсли;
	
	АдресМестонахожденияАрендатораЗначенияПолей = РезультатОткрытияФормы.КонтактнаяИнформация;
	АдресМестонахожденияАрендатора = РезультатОткрытияФормы.Представление;
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
