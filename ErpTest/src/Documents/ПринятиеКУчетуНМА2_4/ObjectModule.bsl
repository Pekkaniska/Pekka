#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ИнициализироватьДокумент();
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		ЗаполнитьДокументПоОтбору(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("СправочникСсылка.НематериальныеАктивы") Тогда
		ЗаполнитьНаОснованииНематериальногоАктива(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ПринятиеКУчетуНМА2_4") Тогда
		ЗаполнитьНаОснованииПринятияКУчетуИлиВводаОстатков(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ИнвентаризацияНМА") Тогда
		ЗаполнитьНаОснованииИнвентаризации(ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	НепроверяемыеРеквизиты = Новый Массив;
	
	ВнеоборотныеАктивы.ПроверитьСоответствиеДатыВерсииУчета(ЭтотОбъект, Истина, Отказ);
	
	ВспомогательныеРеквизиты = ВспомогательныеРеквизиты();
	ПараметрыРеквизитовОбъекта = ВнеоборотныеАктивыКлиентСервер.ЗначенияСвойствЗависимыхРеквизитов_ПринятиеКУчетуНМА(ЭтотОбъект, ВспомогательныеРеквизиты);
	ВнеоборотныеАктивыСлужебный.ОтключитьПроверкуЗаполненияРеквизитовОбъекта(ПараметрыРеквизитовОбъекта, НепроверяемыеРеквизиты);
	
	ПроверитьРеквизитыСЗаданнымПредставлением(НепроверяемыеРеквизиты, Отказ);
	
	ПроверитьРеквизитыОтражениеРасходов(ПараметрыРеквизитовОбъекта, НепроверяемыеРеквизиты, Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ВспомогательныеРеквизиты = ВспомогательныеРеквизиты();
	ПараметрыРеквизитовОбъекта = ВнеоборотныеАктивыКлиентСервер.ЗначенияСвойствЗависимыхРеквизитов_ПринятиеКУчетуНМА(ЭтотОбъект, ВспомогательныеРеквизиты);
	ВнеоборотныеАктивыСлужебный.ОчиститьНеиспользуемыеРеквизиты(ЭтотОбъект, ПараметрыРеквизитовОбъекта);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	Если НЕ Отказ И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ЗаблокироватьДанные();
		ВнеоборотныеАктивыСлужебный.ПроверитьВозможностьПринятияКУчетуНМА(ЭтотОбъект, Отказ, Истина);
	КонецЕсли;
	
	СуммаЦелевыхСредств = ЦелевоеФинансирование.Итог("Сумма");
	
	ВнеоборотныеАктивыСлужебный.ЦелевоеФинансированиеОчиститьСубконто(ЦелевоеФинансирование);
	
	Если НЕ ВспомогательныеРеквизиты.РаздельныйУчетТоваровПоНалогообложениюНДС Тогда
		
		ВариантРаздельногоУчетаНДС = Перечисления.ВариантыРаздельногоУчетаНДС.ИзДокумента;
		НалогообложениеНДС = Справочники.Организации.ЗакупкаПодДеятельность(Организация, , Дата);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Отказ И ДополнительныеСвойства.РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
		Документы.ПринятиеКУчетуНМА2_4.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства, "РеестрДокументов, ДокументыПоНМА");
		РегистрыСведений.РеестрДокументов.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
		РегистрыСведений.ДокументыПоНМА.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ДокументВДругомУчете = Неопределено;
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	Документы.ПринятиеКУчетуНМА2_4.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ПроведениеСерверУТ.ЗагрузитьТаблицыДвижений(ДополнительныеСвойства, Движения);
	РегистрыСведений.РеестрДокументов.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	РегистрыСведений.ДокументыПоНМА.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	
	РеглУчетПроведениеСервер.ЗарегистрироватьКОтражению(ЭтотОбъект, ДополнительныеСвойства, Движения, Отказ);
	//++ НЕ УТКА
	МеждународныйУчетПроведениеСервер.ЗарегистрироватьКОтражению(ЭтотОбъект, ДополнительныеСвойства, Движения, Отказ);
	//-- НЕ УТКА
	
	СформироватьСписокРегистровДляКонтроля();
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьДокумент()
	
	Ответственный = Пользователи.ТекущийПользователь();
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Ответственный, Подразделение);
	
	Если Не ЗначениеЗаполнено(ГруппаФинансовогоУчета) Тогда
		Если ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
			ВидВнеоборотногоАктива = Перечисления.ВидыВнеоборотныхАктивов.НИОКР;
		Иначе
			ВидВнеоборотногоАктива = Перечисления.ВидыВнеоборотныхАктивов.НМА;
		КонецЕсли;
		ГруппаФинансовогоУчета = Справочники.ГруппыФинансовогоУчетаВнеоборотныхАктивов.ЗначениеПоУмолчанию(ВидВнеоборотногоАктива);
	КонецЕсли;
	
	ОтражатьВУпрУчете = Истина;
	ОтражатьВРеглУчете = ВнеоборотныеАктивыСлужебный.ДоступенВыборОтраженияВУчетах(ТекущаяДатаСеанса());
	
КонецПроцедуры
 
Процедура СформироватьСписокРегистровДляКонтроля()
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Новый Массив);
	
КонецПроцедуры

Процедура ЗаблокироватьДанные()
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПервоначальныеСведенияНМА");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("НематериальныйАктив", НематериальныйАктив);
	ЭлементБлокировки.УстановитьЗначение("Организация", Организация);
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.МестоУчетаНМА");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("НематериальныйАктив", НематериальныйАктив);
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

Процедура ПроверитьРеквизитыОтражениеРасходов(ПараметрыРеквизитовОбъекта, НепроверяемыеРеквизиты, Отказ)

	ПроверяемыеРеквизитыСтатейРасходов = Новый Массив;
	Если ВнеоборотныеАктивыКлиентСервер.ЗначениеСвойстваРеквизитаОбъекта("СтатьяРасходовБУ", "Видимость", ПараметрыРеквизитовОбъекта) Тогда
		ПроверяемыеРеквизитыСтатейРасходов.Добавить("СтатьяРасходовБУ, АналитикаРасходовБУ");
	КонецЕсли; 
	Если ВнеоборотныеАктивыКлиентСервер.ЗначениеСвойстваРеквизитаОбъекта("СтатьяРасходовУУ", "Видимость", ПараметрыРеквизитовОбъекта) Тогда
		ПроверяемыеРеквизитыСтатейРасходов.Добавить("СтатьяРасходовУУ, АналитикаРасходовУУ");
	КонецЕсли; 
	
	Если ПроверяемыеРеквизитыСтатейРасходов.Количество() <> 0 Тогда
		ПланыВидовХарактеристик.СтатьиРасходов.ПроверитьЗаполнениеАналитик(
			ЭтотОбъект, СтрСоединить(ПроверяемыеРеквизитыСтатейРасходов, ","), НепроверяемыеРеквизиты, Отказ);
	КонецЕсли; 
	
	//
	Если ВнеоборотныеАктивыКлиентСервер.ЗначениеСвойстваРеквизитаОбъекта("СтатьяДоходов", "Видимость", ПараметрыРеквизитовОбъекта) Тогда
		ПланыВидовХарактеристик.СтатьиДоходов.ПроверитьЗаполнениеАналитик(ЭтотОбъект,, НепроверяемыеРеквизиты, Отказ);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьРеквизитыСЗаданнымПредставлением(НепроверяемыеРеквизиты, Отказ)

	Если ВидОбъектаУчета <> Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка реквизитов у которых представление отличается от того что указано в метаданных.
	
	СписокРеквизитов = Новый Структура;
	СписокРеквизитов.Вставить("НематериальныйАктив", НСтр("ru = 'Расходы на НИОКР'"));
	СписокРеквизитов.Вставить("СпособНачисленияАмортизацииУУ", НСтр("ru = 'Способ списания расходов (управленческий учет)'"));
	СписокРеквизитов.Вставить("СпособНачисленияАмортизацииБУ", НСтр("ru = 'Способ списания расходов (бухгалтерский учет)'"));
	СписокРеквизитов.Вставить("ПорядокУчетаБУ", НСтр("ru = 'Порядок списания (бухгалтерский учет)'"));
	СписокРеквизитов.Вставить("ПорядокУчетаНУ", НСтр("ru = 'Порядок списания (налоговый учет)'"));
	СписокРеквизитов.Вставить("ПорядокУчетаУУ", НСтр("ru = 'Порядок списания (управленческий учет)'"));
	
	ШаблонСообщения = НСтр("ru = 'Поле ""%1"" не заполнено'");
	Для каждого ОписаниеРеквизита Из СписокРеквизитов Цикл
		Если НепроверяемыеРеквизиты.Найти(ОписаниеРеквизита.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект[ОписаниеРеквизита.Ключ]) Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ОписаниеРеквизита.Значение);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, ОписаниеРеквизита.Ключ,, Отказ); 
		КонецЕсли; 
		НепроверяемыеРеквизиты.Добавить(ОписаниеРеквизита.Ключ);
	КонецЦикла; 
	
КонецПроцедуры

Функция ВспомогательныеРеквизиты()

	ВспомогательныеРеквизиты = Новый Структура;
	ВспомогательныеРеквизиты.Вставить("ЕстьСвязанныеОрганизации", Справочники.Организации.ОрганизацияВзаимосвязанаСДругимиОрганизациями(Организация));
	ВспомогательныеРеквизиты.Вставить("ПлательщикНалогаНаПрибыль", УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Дата));
	ВспомогательныеРеквизиты.Вставить("ПрименяетсяУСНДоходыМинусРасходы", УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, Дата));
	
	ВспомогательныеРеквизиты.Вставить(
		"РаздельныйУчетТоваровПоНалогообложениюНДС", 
		РегистрыСведений.УчетнаяПолитикаОрганизаций.РаздельныйУчетТоваровПоНалогообложениюНДС(Организация, Дата));

	Возврат ВспомогательныеРеквизиты;
	
КонецФункции
 
#Область Заполнение 

Процедура ЗаполнитьДокументПоОтбору(Основание)

	Если Основание.Свойство("НематериальныйАктив") Тогда
		ЗаполнитьНаОснованииНематериальногоАктива(Основание.НематериальныйАктив);
	ИначеЕсли Основание.Свойство("ДокументОснование")
		И ТипЗнч(Основание.ДокументОснование) = Тип("ДокументСсылка.ИнвентаризацияНМА") Тогда
		ЗаполнитьНаОснованииИнвентаризации(Основание);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьНаОснованииНематериальногоАктива(Основание)
	
	Если НЕ ЗначениеЗаполнено(Основание) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "ЭтоГруппа,ВидОбъектаУчета,НаправлениеДеятельности");
	
	Если РеквизитыОснования.ЭтоГруппа Тогда
		
		ТекстСообщения = НСтр("ru = 'Принятие к учету НМА на основании группы НМА невозможно.
			|Выберите НМА. Для раскрытия группы используйте клавиши Ctrl и стрелку вниз.'");
		ВызватьИсключение(ТекстСообщения);
		
	КонецЕсли;
	
	НематериальныйАктив = Основание;	
	
	ПервоначальныеСведения = Справочники.НематериальныеАктивы.ПервоначальныеСведения(Основание, Дата);
	Если ЗначениеЗаполнено(ПервоначальныеСведения.ДокументПринятияКУчетуБУ) 
		И НЕ ЗначениеЗаполнено(ПервоначальныеСведения.ДокументПринятияКУчетуУУ)
		И (ТипЗнч(ПервоначальныеСведения.ДокументПринятияКУчетуБУ) = Тип("ДокументСсылка.ПринятиеКУчетуНМА2_4")
			ИЛИ ТипЗнч(ПервоначальныеСведения.ДокументПринятияКУчетуБУ) = Тип("ДокументСсылка.ВводОстатковВнеоборотныхАктивов2_4")) Тогда
		ЗаполнитьНаОснованииПринятияКУчетуИлиВводаОстатков(ПервоначальныеСведения.ДокументПринятияКУчетуБУ, Основание);
		Возврат;
	ИначеЕсли ЗначениеЗаполнено(ПервоначальныеСведения.ДокументПринятияКУчетуУУ) 
		И НЕ ЗначениеЗаполнено(ПервоначальныеСведения.ДокументПринятияКУчетуБУ)
		И (ТипЗнч(ПервоначальныеСведения.ДокументПринятияКУчетуУУ) = Тип("ДокументСсылка.ПринятиеКУчетуНМА2_4")
			ИЛИ ТипЗнч(ПервоначальныеСведения.ДокументПринятияКУчетуУУ) = Тип("ДокументСсылка.ВводОстатковВнеоборотныхАктивов2_4")) Тогда
		ЗаполнитьНаОснованииПринятияКУчетуИлиВводаОстатков(ПервоначальныеСведения.ДокументПринятияКУчетуУУ, Основание);
		Возврат;
	ИначеЕсли ПервоначальныеСведения.СостояниеУУ = Перечисления.ВидыСостоянийНМА.ПринятКУчету
		И (ПервоначальныеСведения.СостояниеБУ = Перечисления.ВидыСостоянийНМА.ПринятКУчету
			ИЛИ НЕ ВнеоборотныеАктивыСлужебный.ДоступенВыборОтраженияВУчетах(Дата)) Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Нематериальный актив ""%1"" уже принят к учету.'"), Строка(Основание));
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли; 

	ВидОбъектаУчета = РеквизитыОснования.ВидОбъектаУчета;
	НаправлениеДеятельности = РеквизитыОснования.НаправлениеДеятельности;
	
	Документы.ПринятиеКУчетуНМА2_4.ЗаполнитьСтоимость(ЭтотОбъект);
	
КонецПроцедуры

Процедура ЗаполнитьНаОснованииПринятияКУчетуИлиВводаОстатков(Основание, ОтборНематериальныйАктив = Неопределено)

	ОснованиеОбъект = Основание.ПолучитьОбъект();
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВводОстатковВнеоборотныхАктивов2_4") Тогда
		СтрокаНМА = ОснованиеОбъект.НМА.Найти(ОтборНематериальныйАктив, "НематериальныйАктив");
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ОснованиеОбъект,, "Номер,Дата,ВерсияДанных,Ответственный,ПометкаУдаления,Проведен");
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтрокаНМА);
		НематериальныйАктив = ОтборНематериальныйАктив;
	Иначе
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ОснованиеОбъект,, "Номер,Дата,ВерсияДанных,Ответственный,ПометкаУдаления,Проведен");
	КонецЕсли;
	
	ДокументВДругомУчете = Основание;
	
	Если ВнеоборотныеАктивыСлужебный.ДоступенВыборОтраженияВУчетах(Дата) Тогда
		Если ОснованиеОбъект.ОтражатьВРеглУчете Тогда
			ОтражатьВРеглУчете = Ложь;
			ОтражатьВУпрУчете  = Истина;
		Иначе
			ОтражатьВРеглУчете = Истина;
			ОтражатьВУпрУчете  = Ложь;
		КонецЕсли; 
	Иначе	
		ОтражатьВРеглУчете = Ложь;
		ОтражатьВУпрУчете  = Истина;
	КонецЕсли;
	
	Документы.ПринятиеКУчетуНМА2_4.ЗаполнитьСтоимость(ЭтотОбъект);
	
КонецПроцедуры

Процедура ЗаполнитьНаОснованииИнвентаризации(Знач ДанныеЗаполнения)
	
	ДокументОснование = Неопределено;
	МассивНомеровСтрок = Неопределено;
	СообщатьОбОшибках = Истина;
	ДокументНаОсновании = Истина;
	
	Организация = Справочники.Организации.ПустаяСсылка();
	Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
	
	ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПринятиеКУчетуНМАпоИнвентаризации;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ДокументОснование = ДанныеЗаполнения.ДокументОснование;
		МассивНомеровСтрок = ДанныеЗаполнения.МассивНомеровСтрок;
		СообщатьОбОшибках = ДанныеЗаполнения.СообщатьОбОшибках;
	Иначе
		ДокументОснование = ДанныеЗаполнения;
	КонецЕсли;
	
	Документы.ПринятиеКУчетуНМА2_4.ЗаполнитьНаОснованииИнвентаризации(ЭтотОбъект, СообщатьОбОшибках, МассивНомеровСтрок); 
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли