#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивыРегл") Тогда
		Элементы.ХозяйственнаяОперация.Видимость = Ложь;
	КонецЕсли;
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ПринятиеКУчетуНМА2_4", ПараметрыЗаписи, Объект.Ссылка);
	Оповестить("ЗаписьДокументаНаОснованииИнвентаризации",, Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	ЗаполнитьИнформациюВПодвале();
	ЦелевоеФинансированиеЗаполнитьСлужебныеРеквизиты();
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ПринятиеКУчетуНМА2_4" Тогда
		ЗаполнитьИнформациюВПодвале();
	КонецЕсли;
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	Если НавигационнаяСсылкаФорматированнойСтроки = "УстановкаПорядкаУчетаНУ" Тогда
		Модифицированность = Истина;
		СтандартнаяОбработка = Ложь;
		Объект.ПорядокУчетаНУ = РекомендуемыйПорядокУчетаНУ;
		НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтотОбъект, "ПорядокУчетаНУ");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	ИзмененныеРеквизиты = Элемент.Имя;
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПринятиеКУчетуНМАпоИнвентаризации")
		И Объект.ВидОбъектаУчета = ПредопределенноеЗначение("Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР") Тогда
		Объект.ВидОбъектаУчета = ПредопределенноеЗначение("Перечисление.ВидыОбъектовУчетаНМА.НематериальныйАктив");
		Объект.ГруппаФинансовогоУчета = Неопределено;
		ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",ВидОбъектаУчета";
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормыНаСервере(ИзмененныеРеквизиты);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	ПрименяетсяУСНДоходыМинусРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Объект.Организация, Объект.Дата);
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Организация));
	
	НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтаФорма, "Дата");
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтраженияВУчетеПриИзменении(Элемент)
	
	ВариантОтраженияВУчетеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормыНаСервере("Организация");
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантПримененияЦелевогоФинансированияПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтаФорма, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОбъектаУчетаПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормыНаСервере("ВидОбъектаУчета");
	
КонецПроцедуры

&НаКлиенте
Процедура ПервоначальнаяСтоимостьБУПриИзменении(Элемент)
	
	ПервоначальнаяСтоимостьБУПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПервоначальнаяСтоимостьНУПриИзменении(Элемент)
	
	ЗаполнитьЗначенияРеквизитовДоИзменения(ЭтаФорма);
	
	ПересчитатьСуммуВР(ЭтаФорма); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПервоначальнаяСтоимостьПРПриИзменении(Элемент)
	
	ПересчитатьСуммуВР(ЭтаФорма); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПервоначальнаяСтоимостьУУПриИзменении(Элемент)
	
	ПервоначальнаяСтоимостьУУПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередаватьРасходыВДругуюОрганизациюПриИзменении(Элемент)
	
	Если Не Объект.ПередаватьРасходыВДругуюОрганизацию Тогда
		Объект.ОрганизацияПолучательРасходов = Неопределено;
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтаФорма, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИспользованияПриИзменении(Элемент)
	
	СрокиИспользования = Новый Соответствие;
	СрокиИспользования.Вставить(Элемент, Объект[Элемент.Имя]);
	
	Если Элемент.Имя = "СрокИспользованияБУ" Тогда
		
		Если Объект.СрокИспользованияНУ = 0
			Или Объект.СрокИспользованияНУ = СрокИспользованияБУ Тогда
			Объект.СрокИспользованияНУ = Объект.СрокИспользованияБУ;
			СрокиИспользования.Вставить(Элементы.СрокИспользованияНУ, Объект.СрокИспользованияБУ);
		КонецЕсли;
		
		Если Объект.СрокИспользованияУУ = 0
			Или Объект.СрокИспользованияУУ = СрокИспользованияБУ Тогда
			Объект.СрокИспользованияУУ = Объект.СрокИспользованияБУ;
			СрокиИспользования.Вставить(Элементы.СрокИспользованияУУ, Объект.СрокИспользованияБУ);
		КонецЕсли;
		
		СрокИспользованияБУ = Объект.СрокИспользованияБУ;
	КонецЕсли;
	
	УстановитьТекстПодсказкиСрокИспользования(СрокиИспользования);
	НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтотОбъект, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОДокументеВДругомУчетеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "#СоздатьДокумент" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
		ОткрытьФорму("Документ.ПринятиеКУчетуНМА2_4.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовУУПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СтатьяРасходовУУ) Тогда
		СтатьяРасходовУУПриИзмененииНаСервере();
	Иначе
		Объект.АналитикаРасходовУУ = Неопределено;
		АналитикаРасходовУУОбязательна = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтатьяРасходовУУПриИзмененииНаСервере()
	
	АналитикаРасходовУУОбязательна =
		ЗначениеЗаполнено(Объект.СтатьяРасходовУУ)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтатьяРасходовУУ, "КонтролироватьЗаполнениеАналитики");
		
	ДоходыИРасходыСервер.СтатьяРасходовПриИзменении(Объект, Объект.СтатьяРасходовУУ, Объект.АналитикаРасходовУУ);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовБУПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СтатьяРасходовБУ) Тогда
		СтатьяРасходовБУПриИзмененииНаСервере();
	Иначе
		Объект.АналитикаРасходовБУ = Неопределено;
		АналитикаРасходовОбязательна = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтатьяРасходовБУПриИзмененииНаСервере()
	
	АналитикаРасходовБУОбязательна =
		ЗначениеЗаполнено(Объект.СтатьяРасходовБУ)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтатьяРасходовБУ, "КонтролироватьЗаполнениеАналитики");
		
	ДоходыИРасходыСервер.СтатьяРасходовПриИзменении(Объект, Объект.СтатьяРасходовБУ, Объект.АналитикаРасходовБУ);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДоходовПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СтатьяДоходов) Тогда
		СтатьяДоходовПриИзмененииНаСервере();
	Иначе
		Объект.АналитикаДоходов = Неопределено;
		АналитикаДоходовОбязательна = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДоходовПоИнвентаризацииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СтатьяДоходов) Тогда
		СтатьяДоходовПоИнвентаризацииПриИзмененииНаСервере();
	Иначе
		АналитикаДоходовОбязательна = Ложь;
		Объект.АналитикаДоходов = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтатьяДоходовПриИзмененииНаСервере()
	
	АналитикаДоходовОбязательна =
		ЗначениеЗаполнено(Объект.СтатьяДоходов)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтатьяДоходов, "КонтролироватьЗаполнениеАналитики");
		
	ДоходыИРасходыСервер.СтатьяДоходовПриИзменении(Объект, Объект.СтатьяДоходов, Объект.Подразделение, Объект.АналитикаДоходов);
	
КонецПроцедуры

&НаСервере
Процедура СтатьяДоходовПоИнвентаризацииПриИзмененииНаСервере()

	АналитикаДоходовОбязательна =
		ЗначениеЗаполнено(Объект.СтатьяДоходов)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтатьяДоходов, "КонтролироватьЗаполнениеАналитики");
		
	ДоходыИРасходыСервер.СтатьяДоходовПриИзменении(Объект, Объект.СтатьяДоходов, Объект.Подразделение, Объект.АналитикаДоходов);

КонецПроцедуры

&НаКлиенте
Процедура НематериальныйАктивПриИзменении(Элемент)
	
	ЗаполнитьПредварительнуюСтоимость(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦелевоеФинансированиеСчетПриИзменении(Элемент)
	
	ЦелевоеФинансированиеЗаполнитьСлужебныеРеквизиты(Элементы.ЦелевоеФинансирование.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантРаздельногоУчетаНДСПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтаФорма, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	
	Если НаправлениеДеятельностиДоИзменения = Объект.НаправлениеДеятельности 
		ИЛИ НЕ ЗначениеЗаполнено(Объект.НематериальныйАктив) Тогда
		НаправлениеДеятельностиДоИзменения = Объект.НаправлениеДеятельности;
		Возврат;
	КонецЕсли;
	
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.ОК, НСтр("ru='Очистить и продолжить'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отменить'"));
	
	Если Объект.ВидОбъектаУчета = ПредопределенноеЗначение("Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР") Тогда
		ТекстВопроса = НСтр("ru='При изменении направления деятельности поле ""Расходы на НИОКР"" будет очищено'");
	Иначе
		ТекстВопроса = НСтр("ru='При изменении направления деятельности поле ""Нематериальный актив"" будет очищено'");
	КонецЕсли; 
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("НаправлениеДеятельностиПриИзмененииЗавершение", ЭтаФорма),
		ТекстВопроса,
		СписокКнопок);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументНаОснованииПриИзменении(Элемент)
	
	Если Объект.ДокументНаОсновании Тогда
		
		ОтборСписка = Новый Структура;
		ОтборСписка.Вставить("Проведен", Истина);
		
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			ОтборСписка.Вставить("Организация", Объект.Организация);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
			ОтборСписка.Вставить("Подразделение", Объект.Подразделение);
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", ОтборСписка);
		ОписаниеОповещения = Новый ОписаниеОповещения("ДокументНаОснованииПриИзмененииЗавершение", ЭтотОбъект);
		ОткрытьФорму("Документ.ИнвентаризацияНМА.ФормаВыбора", ПараметрыФормы,,,,, ОписаниеОповещения);
		
	Иначе
		Объект.ДокументОснование = Неопределено;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантРаздельногоУчетаНДСРаспределяетсяПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтаФорма, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокУчетаБУПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтаФорма, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокУчетаНУПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтаФорма, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособНачисленияАмортизацииБУПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтаФорма, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокУчетаУУПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтаФорма, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособНачисленияАмортизацииУУПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтаФорма, Элемент.Имя);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПервоначальнуюСтоимость(Команда)
	
	ЗаполнитьПредварительнуюСтоимость(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсточникиФинансирования(Команда)
	
	ЗаполнитьИсточникиФинансированияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсточникиФинансированияНаСервере()
	
	Объект.ЦелевоеФинансирование.Загрузить(УчетОСВызовСервера.ДанныеЗаполненияЦелевогоФинансирования(Объект));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ВнеоборотныеАктивыСлужебный.УстановитьУсловноеОформлениеЦелевогоФинансирования(УсловноеОформление, Элементы);
	
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(УсловноеОформление,
		"СтатьяРасходовУУ, АналитикаРасходовУУ");
	
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(УсловноеОформление,
		"СтатьяРасходовБУ, АналитикаРасходовБУ");
	
	ПланыВидовХарактеристик.СтатьиДоходов.УстановитьУсловноеОформлениеАналитик(УсловноеОформление);
	
	#Область АналитикаДоходовПоИнвентаризации
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.АналитикаДоходовПоИнвентаризации.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("АналитикаДоходовОбязательна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.АналитикаДоходовПоИнвентаризации.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("АналитикаДоходовОбязательна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.АналитикаДоходов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	НаправлениеДеятельностиДоИзменения = Объект.НаправлениеДеятельности;
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	ПрименяетсяУСНДоходыМинусРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Объект.Организация, Объект.Дата);
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Организация));
	
	ВалютаУУ = Константы.ВалютаУправленческогоУчета.Получить();
	ВалютаБУ = Константы.ВалютаРегламентированногоУчета.Получить();
	ВалютаБУПредставление = Строка(ВалютаБУ);
	ВалютаУУПредставление = Строка(ВалютаУУ);
	
	Если Объект.ОтражатьВУпрУчете И Объект.ОтражатьВРеглУчете Тогда
		ВариантОтраженияВУчете = Перечисления.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомИРегламентированномУчетах;
	ИначеЕсли Объект.ОтражатьВУпрУчете Тогда
		ВариантОтраженияВУчете = Перечисления.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомУчете;
	ИначеЕсли Объект.ОтражатьВРеглУчете Тогда
		ВариантОтраженияВУчете = Перечисления.ВариантыОтраженияВУчетеВнеоборотныхАктивов.РегламентированномУчете;
	КонецЕсли;
	
	ЕстьСвязанныеОрганизации = Справочники.Организации.ОрганизацияВзаимосвязанаСДругимиОрганизациями(Объект.Организация);
	
	ЗаполнитьСпособыНачисленияАмортизации(
		Элементы.СпособНачисленияАмортизацииУУ.СписокВыбора,
		Элементы.СпособНачисленияАмортизацииБУ.СписокВыбора,
		Объект.ВидОбъектаУчета);
		
	СрокИспользованияБУ = Объект.СрокИспользованияБУ;
	
	СрокиИспользования = Новый Соответствие;
	СрокиИспользования.Вставить(Элементы.СрокИспользованияБУ, Объект.СрокИспользованияБУ);
	СрокиИспользования.Вставить(Элементы.СрокИспользованияНУ, Объект.СрокИспользованияНУ);
	СрокиИспользования.Вставить(Элементы.СрокИспользованияУУ, Объект.СрокИспользованияУУ);
	УстановитьТекстПодсказкиСрокИспользования(СрокиИспользования);
	
	АналитикаРасходовОбязательна = ЗначениеЗаполнено(Объект.СтатьяРасходовУУ)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтатьяРасходовУУ, "КонтролироватьЗаполнениеАналитики");
		
	ЗаполнитьПорядокУчета();
	НастроитьПараметрыВыбораГФУ();
	
	ЗаполнитьИнформациюВПодвале();
	ЦелевоеФинансированиеЗаполнитьСлужебныеРеквизиты();
	НастроитьЗависимыеЭлементыФормыНаСервере();
		
	Элементы.ГруппаУстановкаПараметраУчетаНУ.Доступность = Не ТолькоПросмотр И
		ПравоДоступа("Редактирование", Метаданные.Документы.ПринятиеКУчетуНМА2_4);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСпособыНачисленияАмортизации(СпособыНачисленияАмортизации, СпособыНачисленияАмортизацииБУ, ВидОбъектаУчета)
	
	СпособыНачисленияАмортизации.Очистить();
	СпособыНачисленияАмортизации.Добавить(ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.Линейный"));
	СпособыНачисленияАмортизации.Добавить(ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции"));
	
	СпособыНачисленияАмортизацииБУ.Очистить();
	СпособыНачисленияАмортизацииБУ.Добавить(ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.Линейный"));
	СпособыНачисленияАмортизацииБУ.Добавить(ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции"));
	
	Если ВидОбъектаУчета = ПредопределенноеЗначение("Перечисление.ВидыОбъектовУчетаНМА.НематериальныйАктив") Тогда
		СпособыНачисленияАмортизации.Добавить(ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка"));
		СпособыНачисленияАмортизацииБУ.Добавить(ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекстПодсказкиСрокИспользования(СрокиИспользования)
	
	Для каждого ЭлементСрокИспользования Из СрокиИспользования Цикл
		ЭлементФормы = ЭлементСрокИспользования.Ключ;
		РасшифровкаСрока = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(
			ЭлементСрокИспользования.Значение);
		Если ЗначениеЗаполнено(РасшифровкаСрока) Тогда
			ЭлементФормы.Подсказка = РасшифровкаСрока;
			ЭлементФормы.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСправа;
		Иначе
			ЭлементФормы.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(Форма, Знач ИзмененныеРеквизиты = "")
	
	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ПриИзмененииРеквизитов(Форма, СтруктураИзмененныхРеквизитов);
	
	ВспомогательныеРеквизиты = Новый Структура;
	ВспомогательныеРеквизиты.Вставить("ЕстьСвязанныеОрганизации", Форма.ЕстьСвязанныеОрганизации);
	ВспомогательныеРеквизиты.Вставить("ПлательщикНалогаНаПрибыль", Форма.ПлательщикНалогаНаПрибыль);
	ВспомогательныеРеквизиты.Вставить("ПрименяетсяУСНДоходыМинусРасходы", Форма.ПрименяетсяУСНДоходыМинусРасходы);
	ВспомогательныеРеквизиты.Вставить("РаздельныйУчетТоваровПоНалогообложениюНДС", Форма.РаздельныйУчетТоваровПоНалогообложениюНДС);
	
	ПараметрыРеквизитовОбъекта = ВнеоборотныеАктивыКлиентСервер.ЗначенияСвойствЗависимыхРеквизитов_ПринятиеКУчетуНМА(
									Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты);
	
	ВнеоборотныеАктивыКлиентСервер.НастроитьЗависимыеЭлементыФормы(Форма, ПараметрыРеквизитовОбъекта);
	
	Если НЕ ОбновитьВсе Тогда
		ВнеоборотныеАктивыКлиентСервер.ОчиститьНеиспользуемыеРеквизиты(Объект, ПараметрыРеквизитовОбъекта);
		ИзмененныеРеквизиты = ЗаполнитьРеквизитыВзависимостиОтСвойств(Объект, ПараметрыРеквизитовОбъекта);
		Если ЗначениеЗаполнено(ИзмененныеРеквизиты) Тогда
			ПараметрыРеквизитовОбъекта = ВнеоборотныеАктивыКлиентСервер.ЗначенияСвойствЗависимыхРеквизитов_ПринятиеКУчетуНМА(
											Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты);
		
			ВнеоборотныеАктивыКлиентСервер.НастроитьЗависимыеЭлементыФормы(Форма, ПараметрыРеквизитовОбъекта);
		КонецЕсли;
	КонецЕсли; 
	
	НаОснованииИнвентаризации = Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПринятиеКУчетуНМАпоИнвентаризации");
	
	ДоступныПараметрыАмортизацииНУ = (Объект.ПорядокУчетаНУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию")
										ИЛИ Объект.ПорядокУчетаНУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.СписыватьПриПринятииКУчету"))
									И Объект.ОтражатьВРеглУчете
									И Форма.ПлательщикНалогаНаПрибыль;
	#Область Основное
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ХозяйственнаяОперация") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете") 
		ИЛИ ОбновитьВсе Тогда
		
		Если Объект.ОтражатьВРеглУчете Тогда
			
			Если НаОснованииИнвентаризации Тогда
				
				Элементы.ЗаполнитьПервоначальнуюСтоимостьРегл.Видимость = Ложь;
				
				Элементы.ПервоначальнаяСтоимостьБУ.Заголовок = НСтр("ru = 'Бухгалтерский учет'");
				Элементы.ПервоначальнаяСтоимостьНУ.Заголовок = НСтр("ru = 'Налоговый учет'");
				Элементы.ПервоначальнаяСтоимостьПР.Заголовок = НСтр("ru = 'Постоянная разница'");
				Элементы.ПервоначальнаяСтоимостьВР.Заголовок = НСтр("ru = 'Временная разница'");
				
				Если Объект.ОтражатьВУпрУчете Тогда
					Элементы.ГруппаСтоимость.Заголовок = НСтр("ru = 'Стоимость (регл. учет)'") + ", "+ Форма.ВалютаБУПредставление;
				Иначе
					Элементы.ГруппаСтоимость.Заголовок = НСтр("ru = 'Стоимость'") + ", "+ Форма.ВалютаБУПредставление;
				КонецЕсли;
				
			Иначе
				
				Элементы.ЗаполнитьПервоначальнуюСтоимостьРегл.Видимость = Истина;
				
				Элементы.ГруппаСтоимость.Заголовок = НСтр("ru = 'Стоимость'");
				
				Если Объект.ОтражатьВУпрУчете Тогда
					Элементы.ПервоначальнаяСтоимостьБУ.Заголовок = НСтр("ru = 'Первоначальная стоимость (регл. учет)'");
				Иначе
					Элементы.ПервоначальнаяСтоимостьБУ.Заголовок = НСтр("ru = 'Первоначальная стоимость'");
				КонецЕсли;
				
			КонецЕсли; 
			
		Иначе
			
			Элементы.ЗаполнитьПервоначальнуюСтоимостьРегл.Видимость = Ложь;
			
		КонецЕсли;
		
		Если Объект.ОтражатьВУпрУчете Тогда
			
			Если НаОснованииИнвентаризации Тогда
				
				Элементы.ЗаполнитьПервоначальнуюСтоимостьУпр.Видимость = Ложь;
				
				Элементы.ПервоначальнаяСтоимостьУУ.Заголовок = НСтр("ru = 'Первоначальная'");
				Элементы.ЛиквидационнаяСтоимостьУУ.Заголовок = НСтр("ru = 'Ликвидационная'");
				
				Если Объект.ОтражатьВРеглУчете Тогда
					Элементы.ГруппаСтоимостьУпр.Заголовок = НСтр("ru = 'Стоимость (упр. учет)'") + ", "+ Форма.ВалютаУУПредставление;
				Иначе
					Элементы.ГруппаСтоимостьУпр.Заголовок = НСтр("ru = 'Стоимость'") + ", "+ Форма.ВалютаУУПредставление;
				КонецЕсли;
				
				Элементы.ГруппаСтоимостьУпр.ОтображатьЗаголовок = Истина;
				
			Иначе
				
				Элементы.ЗаполнитьПервоначальнуюСтоимостьУпр.Видимость = НЕ Объект.ОтражатьВРеглУчете;
				
				Если Объект.ОтражатьВРеглУчете Тогда
					Элементы.ПервоначальнаяСтоимостьУУ.Заголовок = НСтр("ru = 'Первоначальная стоимость (упр. учет)'");
					Элементы.ЛиквидационнаяСтоимостьУУ.Заголовок = НСтр("ru = 'Ликвидационная стоимость (упр. учет)'");
				Иначе
					Элементы.ПервоначальнаяСтоимостьУУ.Заголовок = НСтр("ru = 'Первоначальная стоимость'");
					Элементы.ЛиквидационнаяСтоимостьУУ.Заголовок = НСтр("ru = 'Ликвидационная стоимость'");
				КонецЕсли; 
				
				Если Объект.ОтражатьВРеглУчете Тогда
					Элементы.ГруппаСтоимостьУпр.Заголовок = НСтр("ru = 'Стоимость (упр. учет)'");
				Иначе
					Элементы.ГруппаСтоимостьУпр.Заголовок = НСтр("ru = 'Стоимость'");
				КонецЕсли;
				
				Элементы.ГруппаСтоимостьУпр.ОтображатьЗаголовок = НЕ Объект.ОтражатьВРеглУчете;
				
			КонецЕсли; 
			
		Иначе
			
			Элементы.ЗаполнитьПервоначальнуюСтоимостьУпр.Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПараметрыУчета
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ВидОбъектаУчета") 
		ИЛИ ОбновитьВсе Тогда
		
		Если Объект.ВидОбъектаУчета = ПредопределенноеЗначение("Перечисление.ВидыОбъектовУчетаНМА.НематериальныйАктив") Тогда
			
			Элементы.НематериальныйАктив.Заголовок = НСтр("ru = 'Нематериальный актив'");
			Элементы.СпособНачисленияАмортизацииУУ.Заголовок = НСтр("ru = 'Способ начисления амортизации'");
			Элементы.СпособНачисленияАмортизацииБУ.Заголовок = НСтр("ru = 'Способ начисления амортизации'");
			Элементы.ПорядокУчетаБУ.Заголовок = НСтр("ru = 'Порядок учета'");
			Элементы.ПорядокУчетаНУ.Заголовок = НСтр("ru = 'Порядок учета'");
			Элементы.ПорядокУчетаУУ.Заголовок = НСтр("ru = 'Порядок учета'");
			
		Иначе
			
			Элементы.НематериальныйАктив.Заголовок = НСтр("ru = 'НИОКР'");
			Элементы.СпособНачисленияАмортизацииУУ.Заголовок = НСтр("ru = 'Способ списания расходов'");
			Элементы.СпособНачисленияАмортизацииБУ.Заголовок = НСтр("ru = 'Способ списания расходов'");
			Элементы.ПорядокУчетаБУ.Заголовок = НСтр("ru = 'Порядок списания'");
			Элементы.ПорядокУчетаНУ.Заголовок = НСтр("ru = 'Порядок списания'");
			Элементы.ПорядокУчетаУУ.Заголовок = НСтр("ru = 'Порядок списания'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОтражениеРасходов
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаНУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация") 
		ИЛИ ОбновитьВсе Тогда
		
		ПроверкаНезаполненного = ВнеоборотныеАктивыКлиентСервер.ЗначениеСвойстваРеквизитаОбъекта(
									"СтатьяРасходовУУ", "АвтоОтметкаНезаполненного", ПараметрыРеквизитовОбъекта);
		
		Если ПроверкаНезаполненного = Истина ИЛИ ЗначениеЗаполнено(Объект.СтатьяРасходовУУ) Тогда
			Элементы.СтатьяРасходовУУ.ПодсказкаВвода = "";
			Элементы.АналитикаРасходовУУ.ПодсказкаВвода = "";
		ИначеЕсли ПроверкаНезаполненного = Ложь Тогда
			Если ДоступныПараметрыАмортизацииНУ Тогда
				ПодсказкаВводаСтатьи = НСтр("ru = 'совпадает с бухгалтерским и налоговым учетом'");
			Иначе
				ПодсказкаВводаСтатьи = НСтр("ru = 'совпадает с бухгалтерским учетом'");
			КонецЕсли;
			Элементы.СтатьяРасходовУУ.ПодсказкаВвода = ПодсказкаВводаСтатьи;
			Элементы.АналитикаРасходовУУ.ПодсказкаВвода = ПодсказкаВводаСтатьи;
		КонецЕсли; 
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ВидОбъектаУчета") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаНУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация") 
		ИЛИ ОбновитьВсе Тогда
		
		Если Объект.ВидОбъектаУчета = ПредопределенноеЗначение("Перечисление.ВидыОбъектовУчетаНМА.НематериальныйАктив") Тогда
			
			Элементы.ГруппаРасходыРегл.Заголовок = ?(ДоступныПараметрыАмортизацииНУ, 
														НСтр("ru = 'Амортизация (бухгалтерский и налоговый учет)'"),
														НСтр("ru = 'Амортизация (бухгалтерский учет)'"));
														
			Элементы.ГруппаРасходыУУ.Заголовок   = НСтр("ru = 'Амортизация (управленческий учет)'");
		Иначе
			Элементы.ГруппаРасходыРегл.Заголовок = ?(ДоступныПараметрыАмортизацииНУ, 
														НСтр("ru = 'Списание расходов (бухгалтерский и налоговый учет)'"),
														НСтр("ru = 'Списание расходов (бухгалтерский учет)'"));
														
			Элементы.ГруппаРасходыУУ.Заголовок   = НСтр("ru = 'Списание расходов (управленческий учет)'");
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("СрокИспользованияБУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаНУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПервоначальнаяСтоимостьБУ")
		ИЛИ ОбновитьВсе Тогда
		
		Если Элементы.ПорядокУчетаНУ.Видимость Тогда
			
			СписокВыбораНУ = Форма.Элементы.ПорядокУчетаНУ.СписокВыбора;
			
			Если Форма.ПлательщикНалогаНаПрибыль Тогда
				Если Объект.ВидОбъектаУчета = ПредопределенноеЗначение("Перечисление.ВидыОбъектовУчетаНМА.НематериальныйАктив") Тогда
					СтрокаПредставление = НСтр("ru = 'Начисление амортизации'");
				Иначе
					СтрокаПредставление = НСтр("ru = 'Списание расходов'");
				КонецЕсли;
				СписокВыбораНУ.Получить(0).Представление = СтрокаПредставление;
			Иначе
				СписокВыбораНУ.Получить(0).Представление = НСтр("ru = 'Включить в состав амортизируемого имущества'");
			КонецЕсли;
				
			Причина = "";
			Форма.РекомендуемыйПорядокУчетаНУ = СписокВыбораНУ.Получить(0).Значение;
				
			Если ЗначениеЗаполнено(Форма.Объект.СрокИспользованияБУ) И Форма.Объект.СрокИспользованияБУ <= 12 Тогда
				Причина = НСтр("ru = 'Срок полезного использования не превышает 12 месяцев'");
				Форма.РекомендуемыйПорядокУчетаНУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.СписыватьПриПринятииКУчету");
			ИначеЕсли ЗначениеЗаполнено(Форма.Объект.ПервоначальнаяСтоимостьБУ) И Форма.Объект.ПервоначальнаяСтоимостьБУ <= 100000 Тогда
				Причина = НСтр("ru = 'Первоначальная стоимость не превышает 100 000 руб.'");
				Форма.РекомендуемыйПорядокУчетаНУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.СписыватьПриПринятииКУчету");
			КонецЕсли;
			
			МассивСтрок = Новый Массив;
			Если ЗначениеЗаполнено(Причина) И Форма.Объект.ПорядокУчетаНУ <> Форма.РекомендуемыйПорядокУчетаНУ Тогда
				МассивСтрок.Добавить(Причина);
				МассивСтрок.Добавить("," + " ");
				МассивСтрок.Добавить(НСтр("ru = 'рекомендуется установить значение'"));
				МассивСтрок.Добавить(" ");
				ПредставлениеРекомендуемогоПорядкаУчетаНУ = СписокВыбораНУ.НайтиПоЗначению(Форма.РекомендуемыйПорядокУчетаНУ).Представление;
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ПредставлениеРекомендуемогоПорядкаУчетаНУ,,,, "УстановкаПорядкаУчетаНУ"));
				МассивСтрок.Добавить(".");
				Форма.Элементы.ГруппаУстановкаПараметраУчетаНУ.Видимость = Истина;
			Иначе
				Форма.Элементы.ГруппаУстановкаПараметраУчетаНУ.Видимость = Ложь;
			КонецЕсли;
			
			Форма.УстановитьПорядокУчетаНУ = Новый ФорматированнаяСтрока(МассивСтрок);
		Иначе
			Элементы.ГруппаУстановкаПараметраУчетаНУ.Видимость = Ложь;
		КонецЕсли; 
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ХозяйственнаяОперация") 
		ИЛИ ОбновитьВсе Тогда
		
		Элементы.СтраницаОтражениеРасходов.Заголовок = ?(
			НаОснованииИнвентаризации,
			НСтр("ru='Отражение доходов и расходов'"),
			НСтр("ru='Отражение расходов'"));
		
	КонецЕсли;
	
	#КонецОбласти
	
	ЗаполнитьЗначенияРеквизитовДоИзменения(Форма);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЗависимыеЭлементыФормыНаСервере(Знач ИзмененныеРеквизиты = "")

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;

	Если СтруктураИзмененныхРеквизитов.Свойство("ВидОбъектаУчета") Тогда
		ВидОбъектаУчетаПриИзмененииНаСервере(ИзмененныеРеквизиты)
	КонецЕсли; 
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ ОбновитьВсе Тогда
		
		ЕстьСвязанныеОрганизации = Справочники.Организации.ОрганизацияВзаимосвязанаСДругимиОрганизациями(Объект.Организация);
		УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Организация));
		
	КонецЕсли; 
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ ОбновитьВсе Тогда
		
		ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Объект.Организация, Объект.Дата);
		ПрименяетсяУСНДоходыМинусРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Объект.Организация, Объект.Дата);
		ПоддержкаПБУ18 = УчетнаяПолитика.ПоддержкаПБУ18(Объект.Организация, Объект.Дата);
		
		РаздельныйУчетТоваровПоНалогообложениюНДС = РегистрыСведений.УчетнаяПолитикаОрганизаций.РаздельныйУчетТоваровПоНалогообложениюНДС(
														Объект.Организация, Объект.Дата)
	
	КонецЕсли; 
	
	НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтаФорма, ИзмененныеРеквизиты);
	
КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииРеквизитов(Форма, СтруктураИзмененныхРеквизитов)

	Если СтруктураИзмененныхРеквизитов.Количество() = 0 Тогда
		Возврат; 
	КонецЕсли; 
	
	Объект = Форма.Объект;
	
	ЭтоИнвентаризация = Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПринятиеКУчетуНМАпоИнвентаризации");
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ХозяйственнаяОперация") Тогда
		Если ЭтоИнвентаризация Тогда
			
			Объект.ВариантПримененияЦелевогоФинансирования = ПредопределенноеЗначение("Перечисление.ВариантыПримененияЦелевогоФинансирования.НеИспользуется");
			СтруктураИзмененныхРеквизитов.Вставить("ВариантПримененияЦелевогоФинансирования");
			
			Объект.ВидОбъектаУчета = ПредопределенноеЗначение("Перечисление.ВидыОбъектовУчетаНМА.НематериальныйАктив");
			СтруктураИзмененныхРеквизитов.Вставить("ВидОбъектаУчета");
			
			Если Форма.ПлательщикНалогаНаПрибыль Тогда
				Объект.ПервоначальнаяСтоимостьНУ = Объект.ПервоначальнаяСтоимостьБУ;
			КонецЕсли;
			Объект.ПервоначальнаяСтоимостьПР = 0;
			Объект.ПервоначальнаяСтоимостьВР = 0;
			
		КонецЕсли;
	КонецЕсли;

	Если СтруктураИзмененныхРеквизитов.Свойство("Организация") Тогда
		Если Не Форма.ЕстьСвязанныеОрганизации Тогда
			Объект.ПередаватьРасходыВДругуюОрганизацию = Ложь;
			СтруктураИзмененныхРеквизитов.Вставить("ПередаватьРасходыВДругуюОрганизацию");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
Функция ЗаполнитьРеквизитыВзависимостиОтСвойств(Объект, ПараметрыРеквизитовОбъекта)

	ИзмененныеРеквизиты = Новый Массив;
	
	Для каждого ПараметрыРеквизита Из ПараметрыРеквизитовОбъекта Цикл
		
		Если НЕ ЗначениеЗаполнено(ПараметрыРеквизита.ИмяРеквизита)
			ИЛИ СтрРазделить(ПараметрыРеквизита.ИмяРеквизита, ".").ВГраница() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Действие = ВнеоборотныеАктивыКлиентСервер.ОчиститьИлиЗаполнить(Объект, ПараметрыРеквизита);
		
		Если Действие <> "Заполнить" Тогда
			Продолжить;
		КонецЕсли;
		
		#Область СтраницаОсновное
		
		Если ПараметрыРеквизита.ИмяРеквизита = "ВариантПримененияЦелевогоФинансирования" Тогда
			Объект.ВариантПримененияЦелевогоФинансирования = ПредопределенноеЗначение("Перечисление.ВариантыПримененияЦелевогоФинансирования.НеИспользуется");
			ИзмененныеРеквизиты.Добавить(ПараметрыРеквизита.ИмяРеквизита);
		КонецЕсли;
		
		#КонецОбласти
		
		#Область СтраницаУчет
		
		//
		Если ПараметрыРеквизита.ИмяРеквизита = "ПорядокУчетаБУ" Тогда
			Объект[ПараметрыРеквизита.ИмяРеквизита] = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию");
			ИзмененныеРеквизиты.Добавить(ПараметрыРеквизита.ИмяРеквизита);
		КонецЕсли;
		Если ПараметрыРеквизита.ИмяРеквизита = "ПорядокУчетаНУ" Тогда
			Объект[ПараметрыРеквизита.ИмяРеквизита] = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию");
			ИзмененныеРеквизиты.Добавить(ПараметрыРеквизита.ИмяРеквизита);
		КонецЕсли;
		Если ПараметрыРеквизита.ИмяРеквизита = "НачислятьАмортизациюНУ" Тогда
			Объект[ПараметрыРеквизита.ИмяРеквизита] = Истина;
			ИзмененныеРеквизиты.Добавить(ПараметрыРеквизита.ИмяРеквизита);
		КонецЕсли;
		Если ПараметрыРеквизита.ИмяРеквизита = "ПорядокУчетаУУ" Тогда
			Объект[ПараметрыРеквизита.ИмяРеквизита] = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию");
			ИзмененныеРеквизиты.Добавить(ПараметрыРеквизита.ИмяРеквизита);
		КонецЕсли;
		
		//
		Если ПараметрыРеквизита.ИмяРеквизита = "СпособНачисленияАмортизацииБУ" Тогда
			Объект[ПараметрыРеквизита.ИмяРеквизита] = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.Линейный");
			ИзмененныеРеквизиты.Добавить(ПараметрыРеквизита.ИмяРеквизита);
		КонецЕсли;
		Если ПараметрыРеквизита.ИмяРеквизита = "СпособНачисленияАмортизацииУУ" Тогда
			Объект[ПараметрыРеквизита.ИмяРеквизита] = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.Линейный");
			ИзмененныеРеквизиты.Добавить(ПараметрыРеквизита.ИмяРеквизита);
		КонецЕсли;
		
		#КонецОбласти
		
	КонецЦикла; 
	
	Возврат СтрСоединить(ИзмененныеРеквизиты, ",");
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИнформациюВПодвале()

	ЗаголовокНадписи = ВнеоборотныеАктивыСлужебный.ИнформацияОДокументеВДругомУчете(Объект);
	Если ПредварительнаяСтоимостьОтличаетсяОтФактической() Тогда
		Если ЗаголовокНадписи.Количество() <> 0 Тогда
			ЗаголовокНадписи.Добавить(Символы.ПС);
		КонецЕсли;
		ЗаголовокНадписи.Добавить(НСтр("ru = 'Стоимость, указанная в документе, отличается от фактической.'"));
	КонецЕсли; 

	Если ЗаголовокНадписи.Количество() <> 0 Тогда
		Элементы.Информация.Заголовок = Новый ФорматированнаяСтрока(ЗаголовокНадписи);
		Элементы.КартинкаИнформация.Видимость = Истина;
		Элементы.Информация.Видимость = Истина;
	Иначе
		Элементы.КартинкаИнформация.Видимость = Ложь;
		Элементы.Информация.Видимость = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ПредварительнаяСтоимостьОтличаетсяОтФактической()

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) 
		ИЛИ объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПринятиеКУчетуНМАпоИнвентаризации Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СтоимостьНМА.НематериальныйАктив КАК НематериальныйАктив
	|ИЗ
	|	РегистрНакопления.СтоимостьНМА КАК СтоимостьНМА
	|ГДЕ
	|	СтоимостьНМА.Регистратор = &Ссылка
	|	И СтоимостьНМА.РасчетСтоимости
	|	И (СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
	|
	|СГРУППИРОВАТЬ ПО
	|	СтоимостьНМА.НематериальныйАктив
	|
	|ИМЕЮЩИЕ
	|	(&ОтражатьВРеглУчете
	|			И СУММА(&ПервоначальнаяСтоимостьБУ) <> СУММА(СтоимостьНМА.СтоимостьРегл)
	|		ИЛИ &ОтражатьВУпрУчете
	|			И СУММА(&ПервоначальнаяСтоимостьУУ) <> СУММА(СтоимостьНМА.Стоимость))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("НематериальныйАктив", Объект.НематериальныйАктив);
	Запрос.УстановитьПараметр("ПервоначальнаяСтоимостьБУ", Объект.ПервоначальнаяСтоимостьБУ);
	Запрос.УстановитьПараметр("ПервоначальнаяСтоимостьУУ", Объект.ПервоначальнаяСтоимостьУУ);
	Запрос.УстановитьПараметр("ОтражатьВРеглУчете", Объект.ОтражатьВРеглУчете);
	Запрос.УстановитьПараметр("ОтражатьВУпрУчете", Объект.ОтражатьВУпрУчете);
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();

КонецФункции

&НаСервере
Процедура ЗаполнитьПредварительнуюСтоимость(СообщатьОбОшибках)
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Дата) Тогда
		Если СообщатьОбОшибках Тогда
			ТекстСообщения = НСтр("ru = 'Поле ""Дата"" не заполнено'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект", "Дата", Отказ);
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Если СообщатьОбОшибках Тогда
			ТекстСообщения = НСтр("ru = 'Поле ""Организация"" не заполнено'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект", "Организация", Отказ);
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.НематериальныйАктив) Тогда
		Если СообщатьОбОшибках Тогда
			ТекстСообщения = НСтр("ru = 'Поле ""Нематериальный актив"" не заполнено'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект", "НематериальныйАктив", Отказ);
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Документы.ПринятиеКУчетуНМА2_4.ЗаполнитьСтоимость(Объект);
		ЗаполнитьИнформациюВПодвале();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПараметрыВыбораГФУ()
	
	МассивПараметров = Новый Массив;
	
	Если Объект.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВидАктива", Перечисления.ВидыВнеоборотныхАктивов.НМА));
	Иначе
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВидАктива", Перечисления.ВидыВнеоборотныхАктивов.НИОКР));
	КонецЕсли;
	
	Элементы.ГруппаФинансовогоУчета.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПорядокУчета()
	
	Если Объект.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив Тогда
		СтрокаПредставление = НСтр("ru = 'Начисление амортизации'");
	Иначе
		СтрокаПредставление = НСтр("ru = 'Списание расходов'");
	КонецЕсли;
	
	Элементы.ПорядокУчетаУУ.СписокВыбора[0].Представление = СтрокаПредставление;
	Элементы.ПорядокУчетаБУ.СписокВыбора[0].Представление = СтрокаПредставление;
	Элементы.ПорядокУчетаНУ.СписокВыбора[0].Представление = СтрокаПредставление;
	
КонецПроцедуры

&НаСервере
Процедура ЦелевоеФинансированиеЗаполнитьСлужебныеРеквизиты(Строка = Неопределено)
	
	УчетОСВызовСервера.ЗаполнитьСлужебныеРеквизитыВТаблицеЦелевогоФинансирования(Объект, Строка);
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Объект.НаправлениеДеятельности = НаправлениеДеятельностиДоИзменения;
	Иначе
		НаправлениеДеятельностиДоИзменения = Объект.НаправлениеДеятельности;
		Объект.НематериальныйАктив = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьЗначенияРеквизитовДоИзменения(Форма)

	СписокРеквизитов = "НаправлениеДеятельности,ПервоначальнаяСтоимостьБУ,ПервоначальнаяСтоимостьНУ,ПервоначальнаяСтоимостьУУ";
	
	ЗначенияРеквизитовДоИзменения = Новый Структура(СписокРеквизитов);
	ЗаполнитьЗначенияСвойств(ЗначенияРеквизитовДоИзменения, Форма.Объект);
	
	Форма.ЗначенияРеквизитовДоИзменения = Новый ФиксированнаяСтруктура(ЗначенияРеквизитовДоИзменения);

КонецПроцедуры

&НаСервере
Процедура ВариантОтраженияВУчетеПриИзмененииНаСервере()

	Если НЕ ЗначениеЗаполнено(ВариантОтраженияВУчете) Тогда
		ВариантОтраженияВУчете = Перечисления.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомУчете;
	КонецЕсли; 
	
	Объект.ОтражатьВУпрУчете = (ВариантОтраженияВУчете = Перечисления.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомУчете
		Или ВариантОтраженияВУчете = Перечисления.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомИРегламентированномУчетах);
	Объект.ОтражатьВРеглУчете = (ВариантОтраженияВУчете = Перечисления.ВариантыОтраженияВУчетеВнеоборотныхАктивов.РегламентированномУчете
		Или ВариантОтраженияВУчете = Перечисления.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомИРегламентированномУчетах);
		
	НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтаФорма, "ОтражатьВУпрУчете, ОтражатьВРеглУчете");

КонецПроцедуры

&НаСервере
Процедура ПервоначальнаяСтоимостьБУПриИзмененииНаСервере()

	Если ВалютаБУ = ВалютаУУ 
		И ЗначенияРеквизитовДоИзменения.ПервоначальнаяСтоимостьБУ = Объект.ПервоначальнаяСтоимостьУУ Тогда
		
		Объект.ПервоначальнаяСтоимостьУУ = Объект.ПервоначальнаяСтоимостьБУ;
	КонецЕсли; 
	
	Если ЗначенияРеквизитовДоИзменения.ПервоначальнаяСтоимостьБУ = Объект.ПервоначальнаяСтоимостьНУ
		И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПринятиеКУчетуНМАпоИнвентаризации
		И ПлательщикНалогаНаПрибыль Тогда
		Объект.ПервоначальнаяСтоимостьНУ = Объект.ПервоначальнаяСтоимостьБУ;
	КонецЕсли;
	
	ПересчитатьСуммуВР(ЭтаФорма); 
	
	ЗаполнитьЗначенияРеквизитовДоИзменения(ЭтаФорма);
	ЗаполнитьИнформациюВПодвале();
	
	НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтотОбъект, "ПервоначальнаяСтоимостьБУ");
	
КонецПроцедуры

&НаСервере
Процедура ПервоначальнаяСтоимостьУУПриИзмененииНаСервере()

	ЗаполнитьЗначенияРеквизитовДоИзменения(ЭтаФорма);
	ЗаполнитьИнформациюВПодвале();

КонецПроцедуры

&НаСервере
Процедура ВидОбъектаУчетаПриИзмененииНаСервере(ИзмененныеРеквизиты)
	
	ЗаполнитьСпособыНачисленияАмортизации(
		Элементы.СпособНачисленияАмортизацииУУ.СписокВыбора,
		Элементы.СпособНачисленияАмортизацииБУ.СписокВыбора,
		Объект.ВидОбъектаУчета);
		
	Если Объект.ВидОбъектаУчета = ПредопределенноеЗначение("Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР") Тогда
		Если Объект.СпособНачисленияАмортизацииУУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка") Тогда
			Объект.СпособНачисленияАмортизацииУУ = Неопределено;
			ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",СпособНачисленияАмортизацииУУ";
		КонецЕсли;
		Если Объект.СпособНачисленияАмортизацииБУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка") Тогда
			Объект.СпособНачисленияАмортизацииБУ = Неопределено;
			ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",СпособНачисленияАмортизацииБУ";
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
		ВидВнеоборотногоАктива = Перечисления.ВидыВнеоборотныхАктивов.НИОКР;
	Иначе
		ВидВнеоборотногоАктива = Перечисления.ВидыВнеоборотныхАктивов.НМА;
	КонецЕсли;
	Объект.ГруппаФинансовогоУчета = Справочники.ГруппыФинансовогоУчетаВнеоборотныхАктивов.ЗначениеПоУмолчанию(ВидВнеоборотногоАктива);
	
	ЗаполнитьПорядокУчета();
	НастроитьПараметрыВыбораГФУ();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьСуммуВР(Форма)

	Если Форма.Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПринятиеКУчетуНМАпоИнвентаризации")
		И Форма.ПоддержкаПБУ18 Тогда
		
		Форма.Объект.ПервоначальнаяСтоимостьВР = 
				Форма.Объект.ПервоначальнаяСтоимостьБУ 
				- Форма.Объект.ПервоначальнаяСтоимостьНУ 
				- Форма.Объект.ПервоначальнаяСтоимостьПР;
				
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ДокументНаОснованииПриИзмененииЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		Объект.ДокументОснование = РезультатЗакрытия;
	Иначе
		Объект.ДокументНаОсновании = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстВопроса = НСтр("ru = 'Заполнить документ по инвентаризации?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоДаннымОснованияЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет); 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДаннымОснованияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоДаннымОснованияНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДаннымОснованияНаСервере()

	Документы.ПринятиеКУчетуНМА2_4.ЗаполнитьНаОснованииИнвентаризации(Объект, Истина);

	НастроитьЗависимыеЭлементыФормыНаСервере("Организация,Подразделение");
	
КонецПроцедуры

#КонецОбласти
