
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		
	КонецЕсли;
	
	#Область УниверсальныеМеханизмы
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	#КонецОбласти
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();

	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ПринятиеКУчетуОС2_4", ПараметрыЗаписи, Объект.Ссылка);
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПринятиеКУчетуОСпоИнвентаризации") Тогда
		Оповестить("ЗаписьДокументаНаОснованииИнвентаризации",, Объект.Ссылка);
	КонецЕсли; 
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	ЗаполнитьИнформациюВПодвале();
	ЦелевоеФинансированиеЗаполнитьСлужебныеРеквизиты();
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ПринятиеКУчетуОС2_4" Тогда
		ЗаполнитьИнформациюВПодвале();
	КонецЕсли; 
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	Если НавигационнаяСсылкаФорматированнойСтроки = "УстановкаПорядкаУчетаНУ" Тогда
		Модифицированность = Истина;
		СтандартнаяОбработка = Ложь;
		Объект.ПорядокУчетаНУ = РекомендуемыйПорядокУчетаНУ;
		НастроитьЗависимыеЭлементыФормы("ПорядокУчетаНУ");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область СтраницаОсновное

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы("Дата");
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтраженияВУчетеПриИзменении(Элемент)
	
	ВариантОтраженияВУчетеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	Объект.ДокументОснование = Неопределено;
	Объект.ДокументНаОсновании = Ложь;
	
	НастроитьЗависимыеЭлементыФормы("ХозяйственнаяОперация");
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы("Организация,ЕстьСвязанныеОрганизации");
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантПримененияЦелевогоФинансированияПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы("ВариантПримененияЦелевогоФинансирования");
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	
	Если НаправлениеДеятельностиДоИзменения = Объект.НаправлениеДеятельности 
		Или Объект.ОС.Количество() = 0 Тогда
		НаправлениеДеятельностиДоИзменения = Объект.НаправлениеДеятельности;
		Возврат;
	КонецЕсли;
	
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.ОК, НСтр("ru='Очистить и продолжить'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отменить'"));
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("НаправлениеДеятельностиПриИзмененииЗавершение", ЭтаФорма),
		НСтр("ru='При изменении направления деятельности табличная часть документа будет очищена'"),
		СписокКнопок);
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастичныйВводВЭксплуатациюПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы("ЧастичныйВводВЭксплуатацию");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидАналитикиРасходовОсновныеСредстваПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы("ВидАналитикиКапитализацииРасходов");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидАналитикиРасходовОбъектыСтроительстваПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы("ВидАналитикиКапитализацииРасходов");
	
КонецПроцедуры

&НаКлиенте
Процедура АдресМестонахожденияПриИзменении(Элемент)
	
	АдресМестонахожденияЗначенияПолей = ЗначенияПолейКонтактнойИнформацииСервер(Объект.АдресМестонахождения,
		ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"));
	
КонецПроцедуры

&НаКлиенте
Процедура АдресМестонахожденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормыКонтактнойИнформации = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
			ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"),
			АдресМестонахожденияЗначенияПолей);
			
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(
		ПараметрыФормыКонтактнойИнформации,
		ЭтотОбъект,
		Новый ОписаниеОповещения("АдресМестонахожденияНачалоВыбораЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура АдресМестонахожденияОчистка(Элемент, СтандартнаяОбработка)
	
	АдресМестонахожденияЗначенияПолей = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантРаздельногоУчетаНДСПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы("ВариантРаздельногоУчетаНДС");
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОДокументеВДругомУчетеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "#СоздатьДокумент" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
		ОткрытьФорму("Документ.ПринятиеКУчетуОС2_4.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаОСПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументНаОснованииПриИзменении(Элемент)
	
	Если Объект.ДокументНаОсновании Тогда
		
		ОтборСписка = Новый Структура;
		ОтборСписка.Вставить("Проведен", Истина);
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			ОтборСписка.Вставить("Организация", Объект.Организация);
		КонецЕсли;
		
		Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПринятиеКУчетуОСПоДоговоруЛизинга") Тогда
			ИмяФормыВыбора = "Документ.ПоступлениеПредметовЛизинга.ФормаВыбора";
			ОтборСписка.Вставить("ВариантУчетаИмущества", ПредопределенноеЗначение("Перечисление.ВариантыУчетаИмуществаПриЛизинге.НаБалансе"));
		Иначе
			ИмяФормыВыбора = "Документ.ИнвентаризацияОС.ФормаВыбора";
			Если ЗначениеЗаполнено(Объект.Местонахождение) Тогда
				ОтборСписка.Вставить("ПодразделениеОрганизации", Объект.Местонахождение);
			КонецЕсли;
		КонецЕсли;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", ОтборСписка);
		ОписаниеОповещения = Новый ОписаниеОповещения("ДокументНаОснованииПриИзмененииЗавершение", ЭтотОбъект);
		ОткрытьФорму(ИмяФормыВыбора, ПараметрыФормы,,,,, ОписаниеОповещения);
	Иначе
		Объект.ДокументОснование = Неопределено;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура АмортизационнаяГруппаПриИзменении(Элемент)
	АмортизационнаяГруппаПриИзмененииНаСервере();
КонецПроцедуры
#КонецОбласти

#Область СтраницаУчет

&НаКлиенте
Процедура ПорядокУчетаБУПриИзменении(Элемент)
	
	ИзмененныеРеквизиты = ВнеоборотныеАктивыКлиент.ПриИзмененииПорядкаУчетаБУ_ОС(Объект, ПрименяетсяУСНДоходыМинусРасходы);
	НастроитьЗависимыеЭлементыФормы(ИзмененныеРеквизиты);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокУчетаНУПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы("ПорядокУчетаНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокУчетаУУПриИзменении(Элемент)
	
	ИзмененныеРеквизиты = ВнеоборотныеАктивыКлиент.ПриИзмененииПорядкаУчетаУУ_ОС(Объект, ПрименяетсяУСНДоходыМинусРасходы);
	НастроитьЗависимыеЭлементыФормы(ИзмененныеРеквизиты);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИспользованияБУПриИзменении(Элемент)
	
	ПриИзмененииСрокаИспользования("СрокИспользованияБУ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИспользованияНУПриИзменении(Элемент)
	
	ПриИзмененииСрокаИспользования("СрокИспользованияНУ", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИспользованияУУПриИзменении(Элемент)
	
	ПриИзмененииСрокаИспользования("СрокИспользованияУУ", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура МетодНачисленияАмортизацииБУПриИзменении(Элемент)
	
	МетодНачисленияАмортизацииБУПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МетодНачисленияАмортизацииУУПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы("МетодНачисленияАмортизацииУУ");
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьАмортизационнуюПремиюВСоставРасходовПриИзменении(Элемент)
	
	ВключитьАмортизационнуюПремиюВСоставРасходовПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаОтражениеРасходов

&НаКлиенте
Процедура СтатьяРасходовБУПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СтатьяРасходовБУ) Тогда
		СтатьяРасходовПриИзмененииНаСервере();
	Иначе
		Объект.АналитикаРасходовБУ = Неопределено;
		АналитикаРасходовБУОбязательна = Ложь;
	КонецЕсли;
	
	Если СтатьяРасходовДоИзменения = Объект.СтатьяРасходовАмортизационнойПремии
		И Элементы.СтатьяРасходовАмортизационнойПремии.Видимость Тогда
		
		Объект.СтатьяРасходовАмортизационнойПремии = Объект.СтатьяРасходовБУ;
		Объект.АналитикаРасходовАмортизационнойПремии = Объект.АналитикаРасходовБУ;
		
	КонецЕсли;
	
	СтатьяРасходовДоИзменения = Объект.СтатьяРасходовБУ;
	АналитикаРасходовДоИзменения = Объект.АналитикаРасходовБУ;
	
	НастроитьЗависимыеЭлементыФормы("СтатьяРасходовБУ");
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовБУПриИзменении(Элемент)
	
	Если Объект.СтатьяРасходовБУ = Объект.СтатьяРасходовАмортизационнойПремии
		И АналитикаРасходовДоИзменения = Объект.АналитикаРасходовАмортизационнойПремии
		И Элементы.АналитикаРасходовАмортизационнойПремии.Видимость Тогда
		
		Объект.АналитикаРасходовАмортизационнойПремии = Объект.АналитикаРасходовБУ;
		
	КонецЕсли;
	
	АналитикаРасходовДоИзменения = Объект.АналитикаРасходовБУ;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовУУПриИзменении(Элемент)
	
	СтатьяРасходовУУПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередаватьРасходыВДругуюОрганизациюПриИзменении(Элемент)
	
	Если Не Объект.ПередаватьРасходыВДругуюОрганизацию Тогда
		Объект.ОрганизацияПолучательРасходов = Неопределено;
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы("ПередаватьРасходыВДругуюОрганизацию");
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовАмортизационнойПремииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СтатьяРасходовАмортизационнойПремии) Тогда
		СтатьяРасходовАмортизационнойПремииПриИзмененииНаСервере();
	Иначе
		Объект.АналитикаРасходовАмортизационнойПремии = Неопределено;
		АналитикаРасходовАмортизационнойПремииОбязательна = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовНалогПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СтатьяРасходовАмортизационнойПремии) Тогда
		СтатьяРасходовНалогПриИзмененииНаСервере();
	Иначе
		Объект.АналитикаРасходовНалог = Неопределено;
		АналитикаРасходовАмортизационнойПремииОбязательна = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДоходовПоИнвентаризацииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СтатьяДоходов) Тогда
		СтатьяДоходовПоИнвентаризацииПриИзмененииНаСервере();
	Иначе
		АналитикаДоходовОбязательна = Ложь;
		Объект.АналитикаДоходов = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаЦелевоеФинансирование

&НаКлиенте
Процедура СтатьяДоходовЦФПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СтатьяДоходов) Тогда
		СтатьяДоходовЦФПриИзмененииНаСервере();
	Иначе
		АналитикаДоходовОбязательна = Ложь;
		ОБъект.АналитикаДоходов = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОС

&НаКлиенте
Процедура ОСПослеУдаления(Элемент)
	
	НастроитьЗависимыеЭлементыФормы("ОсновноеСредство");
	
КонецПроцедуры

&НаКлиенте
Процедура ОСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПодборНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ЗаполнитьЗначенияРеквизитовОСДоИзменения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	
	ОСОсновноеСредствоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОССтоимостьБУ1ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
	
	Если ТекущиеДанные.СтоимостьНУ = ЗначенияРеквизитовОСДоИзменения.СтоимостьБУ И РасширеннаяСтоимостьРегл Тогда
		ТекущиеДанные.СтоимостьНУ = ТекущиеДанные.СтоимостьБУ;
	КонецЕсли;
	
	ЗаполнитьЗначенияРеквизитовОСДоИзменения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОССтоимостьБУПриИзменении(Элемент)
	
	ОССтоимостьБУПриИзмененииНаСервере();
	
	ЗаполнитьЗначенияРеквизитовОСДоИзменения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОССтоимостьНУПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
	ТекущиеДанные.СтоимостьВР = ТекущиеДанные.СтоимостьБУ - ТекущиеДанные.СтоимостьНУ - ТекущиеДанные.СтоимостьПР;
	
КонецПроцедуры

&НаКлиенте
Процедура ОССтоимостьПРПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
	ТекущиеДанные.СтоимостьВР = ТекущиеДанные.СтоимостьБУ - ТекущиеДанные.СтоимостьНУ - ТекущиеДанные.СтоимостьПР;
	Если ТекущиеДанные.СтоимостьВР < 0 Тогда
		ТекущиеДанные.СтоимостьНУ = ТекущиеДанные.СтоимостьНУ + ТекущиеДанные.СтоимостьВР;
		ТекущиеДанные.СтоимостьВР = ТекущиеДанные.СтоимостьБУ - ТекущиеДанные.СтоимостьНУ - ТекущиеДанные.СтоимостьПР;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОССтоимостьУУПриИзменении(Элемент)
	
	ЗаполнитьИнформациюВПодвале();
	
	ЗаполнитьЗначенияРеквизитовОСДоИзменения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОССтоимостьУУ1ПриИзменении(Элемент)
	
	ЗаполнитьЗначенияРеквизитовОСДоИзменения();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЦелевоеФинансирование

&НаКлиенте
Процедура ЦелевоеФинансированиеСчетПриИзменении(Элемент)
	
	ЦелевоеФинансированиеЗаполнитьСлужебныеРеквизиты(Элементы.ЦелевоеФинансирование.ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подобрать(Команда)
	
	ПараметрыПодбора = ВнеоборотныеАктивыКлиент.ПараметрыПодбора(Элементы.ОСОсновноеСредство, ЭтаФорма);
	
	ОткрытьФорму("Справочник.ОбъектыЭксплуатации.ФормаВыбора", 
					ПараметрыПодбора, Элементы.ОС,,,,, 
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтоимость(Команда)
	
	ЗаполнитьПредварительнуюСтоимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсточникиФинансирования(Команда)
	
	ЗаполнитьИсточникиФинансированияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

#Область ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)

	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеОС

&НаСервере
Процедура ПодборНаСервере(ВыбранноеЗначение)

	ДобавленныеСтроки = ВнеоборотныеАктивыКлиентСервер.ОбработкаВыбораЭлемента(Объект.ОС, "ОсновноеСредство", ВыбранноеЗначение);

	Если ДобавленныеСтроки.Количество() <> 0 Тогда
		
		Если Документы.ПринятиеКУчетуОС2_4.ЗаполнитьГруппуОСиАмортизационнуюГруппу(Объект) Тогда
			
			Если Объект.ВключитьАмортизационнуюПремиюВСоставРасходов Тогда
				ЗаполнитьПроцентКапитальныхВложенийВключаемыхВРасходыНУ();
			КонецЕсли;
			
			НастроитьЗависимыеЭлементыФормыНаСервере("ОсновноеСредство,АмортизационнаяГруппа,ГруппаОС");
			
		КонецЕсли; 
		
		ЗаполнитьПредварительнуюСтоимость(ДобавленныеСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредварительнуюСтоимость(ВыбранныеСтроки = Неопределено)

	СообщатьОбОшибках = ВыбранныеСтроки = Неопределено;
	
	Отказ = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.Дата)  Тогда
		Если СообщатьОбОшибках Тогда
			ТекстСообщения = НСтр("ru = 'Поле ""Дата"" не заполнено'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект", "Дата", Отказ);
		Иначе
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Если СообщатьОбОшибках Тогда
			ТекстСообщения = НСтр("ru = 'Поле ""Организация"" не заполнено'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект", "Организация", Отказ); 
		Иначе
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ОбъектСтроительства) 
		И Объект.ВидАналитикиКапитализацииРасходов = Перечисления.ВидыАналитикиКапитализацииРасходов.ОбъектСтроительства Тогда
		
		Если СообщатьОбОшибках Тогда
			ТекстСообщения = НСтр("ru = 'Поле ""Объект строительства"" не заполнено'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект", "ОбъектСтроительства", Отказ); 
		Иначе
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Документы.ПринятиеКУчетуОС2_4.ЗаполнитьСтоимость(Объект, ВыбранныеСтроки);
	КонецЕсли;
	
	ЗаполнитьИнформациюВПодвале();
	
КонецПроцедуры

#КонецОбласти

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ПроверитьСоответствиеСтатьиРасходовПорядкуУчетаНУ()

	Если НЕ ЗначениеЗаполнено(Объект.СтатьяРасходовБУ) Тогда
		Возврат;
	КонецЕсли;
	
	МассивВариантовРаспределения = ВнеоборотныеАктивыКлиентСервер.ВариантыРаспределенияРасходовПоАмортизацииРегл(Объект.ПорядокУчетаНУ);
		
	Если МассивВариантовРаспределения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВариантРаспределенияРасходовРегл = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтатьяРасходовБУ, "ВариантРаспределенияРасходовРегл");
	
	Если МассивВариантовРаспределения.Найти(ВариантРаспределенияРасходовРегл) = Неопределено Тогда
		Объект.СтатьяРасходовБУ = Неопределено;
		Объект.АналитикаРасходовБУ = Неопределено;
		АналитикаРасходовБУОбязательна = Ложь;
		СтатьяРасходовДоИзменения = Объект.СтатьяРасходовБУ;
		АналитикаРасходовДоИзменения = Объект.АналитикаРасходовБУ;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОСОсновноеСредствоПриИзмененииНаСервере()

	ИзмененныеРеквизиты = "ОсновноеСредство";
	
	ТекущаяСтрока = Элементы.ОС.ТекущаяСтрока;
	ДанныеСтроки = Объект.ОС.НайтиПоИдентификатору(ТекущаяСтрока);
	
	ЗаполнитьПредварительнуюСтоимость(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеСтроки));
	
	Если Документы.ПринятиеКУчетуОС2_4.ЗаполнитьГруппуОСиАмортизационнуюГруппу(Объект) Тогда
		
		Если Объект.ВключитьАмортизационнуюПремиюВСоставРасходов Тогда
			ЗаполнитьПроцентКапитальныхВложенийВключаемыхВРасходыНУ();
		КонецЕсли;
		
		ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",АмортизационнаяГруппа,ГруппаОС";
	КонецЕсли; 

	НастроитьЗависимыеЭлементыФормыНаСервере(ИзмененныеРеквизиты);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресМестонахожденияНачалоВыбораЗавершение(РезультатОткрытияФормы, ПараметрыОповещения) Экспорт
	
	Если ТипЗнч(РезультатОткрытияФормы)<>Тип("Структура") Тогда
		// не было измнений в данных
		Возврат;
	КонецЕсли;
	
	АдресМестонахожденияЗначенияПолей = РезультатОткрытияФормы.КонтактнаяИнформация;
	Объект.АдресМестонахождения = РезультатОткрытияФормы.Представление;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Объект.НаправлениеДеятельности = НаправлениеДеятельностиДоИзменения;
	Иначе
		НаправлениеДеятельностиДоИзменения = Объект.НаправлениеДеятельности;
		Объект.ОС.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСрокаИспользования(ИмяРеквизита, ОбновитьЕслиСовпадают)

	СписокРеквизитов = ИмяРеквизита;
	
	Если ИмяРеквизита <> "СрокИспользованияУУ"
		И Объект.ОтражатьВУпрУчете
		И (Объект.СрокИспользованияУУ = 0
			ИЛИ СрокиИспользованияСовпадают И ОбновитьЕслиСовпадают) Тогда
		
		Объект.СрокИспользованияУУ = Объект[ИмяРеквизита];
		СписокРеквизитов = СписокРеквизитов + ",СрокИспользованияУУ";
		
	КонецЕсли;
	
	Если ИмяРеквизита <> "СрокИспользованияБУ"
		И Объект.ОтражатьВУпрУчете
		И (Объект.СрокИспользованияНУ = 0
			ИЛИ СрокиИспользованияСовпадают И ОбновитьЕслиСовпадают) Тогда
		
		Объект.СрокИспользованияБУ = Объект[ИмяРеквизита];
		СписокРеквизитов = СписокРеквизитов + ",СрокИспользованияБУ";
		
	КонецЕсли;
	
	Если ИмяРеквизита <> "СрокИспользованияНУ"
		И Объект.ОтражатьВРеглУчете
		И (Объект.СрокИспользованияНУ = 0
			ИЛИ СрокиИспользованияСовпадают И ОбновитьЕслиСовпадают) Тогда
		
		Объект.СрокИспользованияНУ = Объект[ИмяРеквизита];
		СписокРеквизитов = СписокРеквизитов + ",СрокИспользованияНУ";
		
	КонецЕсли;
	
	Если НЕ СрокиИспользованияСовпадают Тогда
		УстановитьСрокиИспользованияСовпадают(ЭтаФорма);
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(СписокРеквизитов);		

КонецПроцедуры

&НаСервере
Процедура МетодНачисленияАмортизацииБУПриИзмененииНаСервере()
	
	ЗаполнитьГодовуюНормаАмортизацииБУ();
	
	НастроитьЗависимыеЭлементыФормыНаСервере("МетодНачисленияАмортизацииБУ,ГодоваяНормаАмортизацииБУ");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГодовуюНормаАмортизацииБУ()

	Если Объект.ОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(ОбъектыЭксплуатации.ШифрПоЕНАОФ.НормаАмортизационныхОтчислений), 0) КАК Коэффициент,
		|	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОбъектыЭксплуатации.ШифрПоЕНАОФ.НормаАмортизационныхОтчислений), 0) КАК Количество
		|ИЗ
		|	Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
		|ГДЕ
		|	ОбъектыЭксплуатации.Ссылка В (&СписокОС)";
	ИначеЕсли Объект.МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(ОбъектыЭксплуатации.ШифрПоЕНАОФ.ПроцентОтСтоимостиМашины), 0) КАК Коэффициент,
		|	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОбъектыЭксплуатации.ШифрПоЕНАОФ.ПроцентОтСтоимостиМашины), 0) КАК Количество
		|ИЗ
		|	Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
		|ГДЕ
		|	ОбъектыЭксплуатации.Ссылка В(&СписокОС)";
	Иначе
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокОС", Объект.ОС.Выгрузить(, "ОсновноеСредство").ВыгрузитьКолонку("ОсновноеСредство"));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Если ЗначениеЗаполнено(Выборка.Коэффициент) И Выборка.Количество = 1 Тогда
		Объект.ГодоваяНормаАмортизацииБУ = Выборка.Коэффициент;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтатьяРасходовПриИзмененииНаСервере()
	
	АналитикаРасходовБУОбязательна = 
		ЗначениеЗаполнено(Объект.СтатьяРасходовБУ)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтатьяРасходовБУ, "КонтролироватьЗаполнениеАналитики");
		
	ДоходыИРасходыСервер.СтатьяРасходовПриИзменении(Объект, Объект.СтатьяРасходовБУ, Объект.АналитикаРасходовБУ);
		
КонецПроцедуры

&НаСервере
Процедура СтатьяРасходовУУПриИзмененииНаСервере()

	Если НЕ ЗначениеЗаполнено(Объект.СтатьяРасходовУУ) Тогда
		Объект.АналитикаРасходовУУ = Неопределено;
	КонецЕсли;
	
	АналитикаРасходовУУОбязательна = 
		ЗначениеЗаполнено(Объект.СтатьяРасходовУУ)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтатьяРасходовУУ, "КонтролироватьЗаполнениеАналитики");
		
	ДоходыИРасходыСервер.СтатьяРасходовПриИзменении(Объект, Объект.СтатьяРасходовУУ, Объект.АналитикаРасходовУУ);

	НастроитьЗависимыеЭлементыФормыНаСервере("СтатьяРасходовУУ");
	
КонецПроцедуры

&НаСервере
Процедура СтатьяРасходовАмортизационнойПремииПриИзмененииНаСервере()
	
	АналитикаРасходовАмортизационнойПремииОбязательна = 
		ЗначениеЗаполнено(Объект.СтатьяРасходовАмортизационнойПремии)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтатьяРасходовАмортизационнойПремии, "КонтролироватьЗаполнениеАналитики");
		
	ДоходыИРасходыСервер.СтатьяРасходовПриИзменении(Объект, Объект.СтатьяРасходовАмортизационнойПремии, Объект.АналитикаРасходовАмортизационнойПремии);
		
КонецПроцедуры

&НаСервере
Процедура СтатьяДоходовЦФПриИзмененииНаСервере()
	
	АналитикаДоходовОбязательна =
		ЗначениеЗаполнено(Объект.СтатьяДоходов)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтатьяДоходов, "КонтролироватьЗаполнениеАналитики");
		
	ДоходыИРасходыСервер.СтатьяДоходовПриИзменении(Объект, Объект.СтатьяДоходов, Объект.Местонахождение, Объект.АналитикаДоходов);
		
КонецПроцедуры

&НаСервере
Процедура СтатьяДоходовПоИнвентаризацииПриИзмененииНаСервере()

	АналитикаДоходовОбязательна =
		ЗначениеЗаполнено(Объект.СтатьяДоходов)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтатьяДоходов, "КонтролироватьЗаполнениеАналитики");
		
	ДоходыИРасходыСервер.СтатьяДоходовПриИзменении(Объект, Объект.СтатьяДоходов, Объект.Местонахождение, Объект.АналитикаДоходов);

КонецПроцедуры

&НаСервере
Процедура СтатьяРасходовНалогПриИзмененииНаСервере()

	ДоходыИРасходыСервер.СтатьяРасходовПриИзменении(Объект, Объект.СтатьяРасходовНалог, Объект.АналитикаРасходовНалог);

КонецПроцедуры

&НаСервере
Процедура ВариантОтраженияВУчетеПриИзмененииНаСервере()

	Если НЕ ЗначениеЗаполнено(ВариантОтраженияВУчете) Тогда
		ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомУчете");
	КонецЕсли; 
	
	ИзмененныеРеквизиты = "ОтражатьВУпрУчете,ОтражатьВРеглУчете";
	
	Объект.ОтражатьВУпрУчете = 
		(ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомУчете")
			ИЛИ ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомИРегламентированномУчетах"));
			
	Объект.ОтражатьВРеглУчете = 
		(ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.РегламентированномУчете")
			ИЛИ ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомИРегламентированномУчетах"));
			
	// Заполнение статьи, если отключили отражение в рег. учете.
	Если Объект.ОтражатьВУпрУчете
		И НЕ Объект.ОтражатьВРеглУчете
		И НЕ ЗначениеЗаполнено(Объект.СтатьяРасходовУУ)
		И ЗначениеЗаполнено(Объект.СтатьяРасходовБУ) Тогда
		Объект.СтатьяРасходовУУ = Объект.СтатьяРасходовБУ;
		Объект.АналитикаРасходовУУ = Объект.АналитикаРасходовБУ;
		ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",СтатьяРасходовУУ";
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормыНаСервере(ИзмененныеРеквизиты);

	ЗаполнитьИнформациюВПодвале();
	
КонецПроцедуры

&НаСервере
Процедура ОССтоимостьБУПриИзмененииНаСервере()

	ТекущаяСтрока = Элементы.ОС.ТекущаяСтрока;
	ТекущиеДанные = Объект.ОС.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если ТекущиеДанные.СтоимостьНУ = ЗначенияРеквизитовОСДоИзменения.СтоимостьБУ И РасширеннаяСтоимостьРегл Тогда
		ТекущиеДанные.СтоимостьНУ = ТекущиеДанные.СтоимостьБУ;
	КонецЕсли;
	
	Если ЗначенияРеквизитовОСДоИзменения.СтоимостьБУ = ЗначенияРеквизитовОСДоИзменения.СтоимостьУУ 
		И Объект.ОтражатьВУпрУчете 
		И ВалютыСовпадают Тогда
		ТекущиеДанные.СтоимостьУУ = ТекущиеДанные.СтоимостьБУ;
	КонецЕсли; 

	ЗаполнитьИнформациюВПодвале();
	
КонецПроцедуры

&НаСервере
Процедура ВключитьАмортизационнуюПремиюВСоставРасходовПриИзмененииНаСервере()

	Если Объект.ВключитьАмортизационнуюПремиюВСоставРасходов Тогда
		ЗаполнитьПроцентКапитальныхВложенийВключаемыхВРасходыНУ();
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормыНаСервере("ВключитьАмортизационнуюПремиюВСоставРасходов");

КонецПроцедуры

&НаСервере
Процедура АмортизационнаяГруппаПриИзмененииНаСервере()

	Если Объект.ВключитьАмортизационнуюПремиюВСоставРасходов Тогда
		ЗаполнитьПроцентКапитальныхВложенийВключаемыхВРасходыНУ();
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормыНаСервере("АмортизационнаяГруппа");
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()

	ИнициализацияФормыПриСозданииНаСервере();
	
	СтатьяРасходовДоИзменения = Объект.СтатьяРасходовБУ;
	АналитикаРасходовДоИзменения = Объект.АналитикаРасходовБУ;
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	НаправлениеДеятельностиДоИзменения = Объект.НаправлениеДеятельности;
	ЕстьСвязанныеОрганизации = Справочники.Организации.ОрганизацияВзаимосвязанаСДругимиОрганизациями(Объект.Организация);
	
	УстановитьСрокиИспользованияСовпадают(ЭтаФорма);
	 
	АдресМестонахожденияЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
		Объект.АдресМестонахождения,
		Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	Если Объект.ОтражатьВУпрУчете И Объект.ОтражатьВРеглУчете Тогда
		ВариантОтраженияВУчете = Перечисления.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомИРегламентированномУчетах;
	ИначеЕсли Объект.ОтражатьВУпрУчете Тогда
		ВариантОтраженияВУчете = Перечисления.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомУчете;
	ИначеЕсли Объект.ОтражатьВРеглУчете Тогда
		ВариантОтраженияВУчете = Перечисления.ВариантыОтраженияВУчетеВнеоборотныхАктивов.РегламентированномУчете;
	КонецЕсли; 
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЛизинг") 
		И Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПринятиеКУчетуОСПоДоговоруЛизинга Тогда
		ЭлементСписка = Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПринятиеКУчетуОСПоДоговоруЛизинга);
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.ХозяйственнаяОперация.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
	ЦелевоеФинансированиеЗаполнитьСлужебныеРеквизиты();
	
	РеквизитыСтатьи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.СтатьяРасходовБУ, "КонтролироватьЗаполнениеАналитики");
		
	АналитикаРасходовБУОбязательна = 
		ЗначениеЗаполнено(Объект.СтатьяРасходовБУ) И РеквизитыСтатьи.КонтролироватьЗаполнениеАналитики;
		
	АналитикаРасходовУУОбязательна =
		ЗначениеЗаполнено(Объект.СтатьяРасходовУУ)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтатьяРасходовУУ, "КонтролироватьЗаполнениеАналитики");
	
	АналитикаРасходовАмортизационнойПремииОбязательна =
		ЗначениеЗаполнено(Объект.СтатьяРасходовАмортизационнойПремии)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтатьяРасходовАмортизационнойПремии, "КонтролироватьЗаполнениеАналитики");
	
	АналитикаДоходовОбязательна =
		ЗначениеЗаполнено(Объект.СтатьяДоходов)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтатьяДоходов, "КонтролироватьЗаполнениеАналитики");
	
	ЗаполнитьИнформациюВПодвале();
	
	НастроитьЗависимыеЭлементыФормыНаСервере();
		
	Элементы.ГруппаУстановкаПараметраУчетаНУ.Доступность = Не ТолькоПросмотр И
		ПравоДоступа("Редактирование", Метаданные.Документы.ПринятиеКУчетуОС2_4);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияФормыПриСозданииНаСервере()

	ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ВалютыСовпадают = (ВалютаУпр = ВалютаРегл);
	
	Элементы.ОССтоимостьУУ.Заголовок  = СтрШаблон(НСтр("ru = 'Сумма упр. (%1)'"), Строка(ВалютаУпр));
	Элементы.ОССтоимостьУУ1.Заголовок = СтрШаблон(НСтр("ru = 'Сумма упр. (%1)'"), Строка(ВалютаУпр));
	Элементы.ОСЛиквидационнаяСтоимость.Заголовок = СтрШаблон(НСтр("ru = 'Ликвидационная стоимость (%1)'"), Строка(ВалютаУпр));
	
	Элементы.ОССтоимостьБУ.Заголовок   = СтрШаблон(НСтр("ru = 'Сумма регл. (%1)'"), Строка(ВалютаРегл));
	Элементы.ОССтоимостьБУ2.Заголовок  = СтрШаблон(НСтр("ru = 'Сумма регл. (%1)'"), Строка(ВалютаРегл));
	Элементы.ОСГруппаРасширеннаяСтоимостьРегл.Заголовок  = СтрШаблон(НСтр("ru = 'Сумма регл. (%1)'"), Строка(ВалютаРегл));
	
 	ИспользоватьОбъектыСтроительства = ПолучитьФункциональнуюОпцию("ИспользоватьОбъектыСтроительства");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ВнеоборотныеАктивыСлужебный.УстановитьУсловноеОформлениеЦелевогоФинансирования(УсловноеОформление, Элементы);
	
	ПланыВидовХарактеристик.СтатьиДоходов.УстановитьУсловноеОформлениеАналитик(УсловноеОформление);
	
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(
		УсловноеОформление,
		"СтатьяРасходовБУ, АналитикаРасходовБУ,
		|СтатьяРасходовУУ, АналитикаРасходовУУ,
		|СтатьяРасходовАмортизационнойПремии, АналитикаРасходовАмортизационнойПремии,
		|СтатьяРасходовНалог, АналитикаРасходовНалог");
		
	#Область АналитикаДоходовПоИнвентаризации
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.АналитикаДоходовПоИнвентаризации.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("АналитикаДоходовОбязательна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.АналитикаДоходовПоИнвентаризации.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("АналитикаДоходовОбязательна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.АналитикаДоходов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	#КонецОбласти
		
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЗависимыеЭлементыФормы(Знач ИзмененныеРеквизиты = "")

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	
	Если ТребуетсяВызовСервераДляНастройкиЭлементовФормы(СтруктураИзмененныхРеквизитов) Тогда
		НастроитьЗависимыеЭлементыФормыНаСервере(ИзмененныеРеквизиты)
	Иначе
		НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтаФорма, ИзмененныеРеквизиты);
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(Форма, ИзмененныеРеквизиты)

	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ВнеоборотныеАктивыКлиентСервер.ПриИзмененииРеквизитов_ПринятиеКУчетуОС(Объект, Форма.ПрименяетсяУСНДоходыМинусРасходы, ИзмененныеРеквизиты);
	
	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	// Управление видимостью, доступностью и т.п. 
	ВспомогательныеРеквизиты = Новый Структура;
	ВспомогательныеРеквизиты.Вставить("ЕстьСвязанныеОрганизации", Форма.ЕстьСвязанныеОрганизации);
	ВспомогательныеРеквизиты.Вставить("ИспользоватьОбъектыСтроительства", Форма.ИспользоватьОбъектыСтроительства);
	ВспомогательныеРеквизиты.Вставить("ПлательщикНалогаНаПрибыль", Форма.ПлательщикНалогаНаПрибыль);
	ВспомогательныеРеквизиты.Вставить("ПрименяетсяУСНДоходыМинусРасходы", Форма.ПрименяетсяУСНДоходыМинусРасходы);
	ВспомогательныеРеквизиты.Вставить("ОтражатьВРеглУчете", Объект.ОтражатьВРеглУчете);
	ВспомогательныеРеквизиты.Вставить("ОтражатьВУпрУчете", Объект.ОтражатьВУпрУчете);
	ВспомогательныеРеквизиты.Вставить("ВключатьВСоставНалоговыхРасходовЛизинговыеПлатежи", Форма.ВключатьВСоставНалоговыхРасходовЛизинговыеПлатежи);
	ВспомогательныеРеквизиты.Вставить("ТребуетсяНастройкаОтраженияРасходовПоНалогам", Форма.ТребуетсяНастройкаОтраженияРасходовПоНалогам);
	ВспомогательныеРеквизиты.Вставить("РаздельныйУчетТоваровПоНалогообложениюНДС", Форма.РаздельныйУчетТоваровПоНалогообложениюНДС);
	
	ПараметрыПринятияКУчетуОС = ВнеоборотныеАктивыКлиентСервер.ПараметрыПринятияКУчетуОС(Объект, ВспомогательныеРеквизиты);
	
	ПараметрыРеквизитовОбъекта = ВнеоборотныеАктивыКлиентСервер.ЗначенияСвойствЗависимыхРеквизитов_ПринятиеКУчетуОС(
									Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты);
	ВнеоборотныеАктивыКлиентСервер.НастроитьЗависимыеЭлементыФормы(Форма, ПараметрыРеквизитовОбъекта);
	
	Если НЕ ОбновитьВсе Тогда
		ВнеоборотныеАктивыКлиентСервер.ОчиститьНеиспользуемыеРеквизиты(Объект, ПараметрыРеквизитовОбъекта);
		
		ИзмененныеРеквизиты = ЗаполнитьРеквизитыВзависимостиОтСвойств(Объект, ПараметрыРеквизитовОбъекта);

		Если ЗначениеЗаполнено(ИзмененныеРеквизиты) Тогда
			ВнеоборотныеАктивыКлиентСервер.ПриИзмененииРеквизитов_ПринятиеКУчетуОС(Объект, Форма.ПрименяетсяУСНДоходыМинусРасходы, ИзмененныеРеквизиты);
			ПараметрыРеквизитовОбъекта = ВнеоборотныеАктивыКлиентСервер.ЗначенияСвойствЗависимыхРеквизитов_ПринятиеКУчетуОС(
											Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты);
		
			ВнеоборотныеАктивыКлиентСервер.НастроитьЗависимыеЭлементыФормы(Форма, ПараметрыРеквизитовОбъекта);
		КонецЕсли;
	КонецЕсли;
	
	#Область СтраницаОсновное
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ХозяйственнаяОперация")
		ИЛИ ОбновитьВсе Тогда
		
		Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПринятиеКУчетуОСпоИнвентаризации") Тогда
			
			Элементы.ДокументОснование.Заголовок = НСтр("ru = 'Инвентаризация'");
			Элементы.ДокументОснование.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.ИнвентаризацияОС");
			
		ИначеЕсли Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПринятиеКУчетуОСПоДоговоруЛизинга") Тогда
			
			Элементы.ДокументОснование.Заголовок = НСтр("ru = 'Поступление'");
			Элементы.ДокументОснование.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.ПоступлениеПредметовЛизинга");
			
		КонецЕсли; 
		
		ЭлементСпискаЛизинг = Элементы.СпособПоступления.СписокВыбора.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.СпособыПоступленияАктивов.ПоДоговоруЛизинга"));
		Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПринятиеКУчетуОСПоДоговоруЛизинга") 
			И ЭлементСпискаЛизинг = Неопределено Тогда
			Элементы.СпособПоступления.СписокВыбора.Вставить(6, ЭлементСпискаЛизинг);
		ИначеЕсли Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПринятиеКУчетуОСПоДоговоруЛизинга") 
			И ЭлементСпискаЛизинг <> Неопределено Тогда
			Элементы.СпособПоступления.СписокВыбора.Удалить(ЭлементСпискаЛизинг);
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ВариантПримененияЦелевогоФинансирования")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеВидно = (Объект.ВариантПримененияЦелевогоФинансирования = ПредопределенноеЗначение("Перечисление.ВариантыПримененияЦелевогоФинансирования.НеИспользуется")
						ИЛИ Объект.ВариантПримененияЦелевогоФинансирования = ПредопределенноеЗначение("Перечисление.ВариантыПримененияЦелевогоФинансирования.ПустаяСсылка"));
		
		ВнеоборотныеАктивыКлиентСервер.УстановитьВидимостьЗначенияСпискаВыбора(
			Элементы.ПорядокУчетаБУ.СписокВыбора, 
			ЗначениеВидно, 
			ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.АмортизацияНачислена"));
			
		ВнеоборотныеАктивыКлиентСервер.УстановитьВидимостьЗначенияСпискаВыбора(
			Элементы.ПорядокУчетаУУ.СписокВыбора, 
			ЗначениеВидно, 
			ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.АмортизацияНачислена"));
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ГруппаОС")
		ИЛИ ОбновитьВсе Тогда
		
		ВнеоборотныеАктивыКлиентСервер.УстановитьВидимостьЗначенияСпискаВыбора(
			Элементы.ГруппаОС.СписокВыбора,
			Объект.ГруппаОС = ПредопределенноеЗначение("Перечисление.ГруппыОС.КапитальныеВложенияВАрендованноеИмущество"),
			ПредопределенноеЗначение("Перечисление.ГруппыОС.КапитальныеВложенияВАрендованноеИмущество"),
			11);
	
	КонецЕсли;
	
	Элементы.ДекорацияОтступЧастичныйВводВЭксплуатацию.Видимость = Элементы.ЧастичныйВводВЭксплуатацию.Видимость;
	
	#КонецОбласти

	#Область СтраницаОС
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ТипСтоимости")
		ИЛИ ОбновитьВсе Тогда
		
		Если Объект.ТипСтоимости = ПредопределенноеЗначение("Перечисление.ТипыСтоимостиОС.Фактическая") Тогда
			Элементы.ОСГруппаСтоимость.Заголовок = НСтр("ru = 'Фактическая первоначальная стоимость'");
		Иначе
			Элементы.ОСГруппаСтоимость.Заголовок = НСтр("ru = 'Предварительная первоначальная стоимость'");
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ТипСтоимости")
		ИЛИ ОбновитьВсе Тогда
		Если Объект.ТипСтоимости = ПредопределенноеЗначение("Перечисление.ТипыСтоимостиОС.Предварительная") Тогда
			Элементы.ОСЗаполнитьСтоимость.Заголовок = НСтр("ru = 'Предварительную стоимость'");
		Иначе
			Элементы.ОСЗаполнитьСтоимость.Заголовок = НСтр("ru = 'Фактическую стоимость'");
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ХозяйственнаяОперация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаБУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ ОбновитьВсе Тогда
		
		РасширеннаяСтоимостьРегл = 
				Объект.ОтражатьВРеглУчете
					И (Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПринятиеКУчетуОСпоИнвентаризации") 
						ИЛИ Объект.ПорядокУчетаБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.АмортизацияНачислена"))
					И Форма.ПлательщикНалогаНаПрибыль;
						
		СтоимостьНУЛизинг = 
				Объект.ОтражатьВРеглУчете
					И Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПринятиеКУчетуОСПоДоговоруЛизинга") 
					И Форма.ВключатьВСоставНалоговыхРасходовЛизинговыеПлатежи
					И Форма.ПлательщикНалогаНаПрибыль;
						
		Элементы.ОССтоимостьУУ.Видимость = 
			Объект.ОтражатьВУпрУчете И Объект.ОтражатьВРеглУчете И НЕ РасширеннаяСтоимостьРегл И НЕ СтоимостьНУЛизинг;
		
		Элементы.ОССтоимостьБУ.Видимость = 
			Объект.ОтражатьВУпрУчете И Объект.ОтражатьВРеглУчете И НЕ РасширеннаяСтоимостьРегл И НЕ СтоимостьНУЛизинг;
			
		Элементы.ОССтоимостьУУ1.Видимость = 
			Объект.ОтражатьВУпрУчете И (НЕ Объект.ОтражатьВРеглУчете ИЛИ РасширеннаяСтоимостьРегл ИЛИ СтоимостьНУЛизинг);
						
		Элементы.ОССтоимостьБУ2.Видимость = 
			Объект.ОтражатьВРеглУчете И (НЕ Объект.ОтражатьВУпрУчете И НЕ РасширеннаяСтоимостьРегл И НЕ СтоимостьНУЛизинг);
			
		Элементы.ОСГруппаРасширеннаяСтоимостьРегл.Видимость = РасширеннаяСтоимостьРегл ИЛИ СтоимостьНУЛизинг;
		Элементы.ОССтоимостьБУ1.Видимость = РасширеннаяСтоимостьРегл ИЛИ СтоимостьНУЛизинг;
		Элементы.ОССтоимостьПР.Видимость = РасширеннаяСтоимостьРегл;
		Элементы.ОССтоимостьВР.Видимость = РасширеннаяСтоимостьРегл;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область СтраницаУчет
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("СрокИспользованияБУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаБУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаНУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ГруппаОС")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ВариантПримененияЦелевогоФинансирования")
		ИЛИ ОбновитьВсе Тогда
		
		Если Элементы.ПорядокУчетаНУ.Видимость
			И НЕ ПараметрыПринятияКУчетуОС.ПредопределенныйПорядокУчетаНУ Тогда
			
			СписокВыбораНУ = Элементы.ПорядокУчетаНУ.СписокВыбора;
			
			ВнеоборотныеАктивыКлиентСервер.УстановитьВидимостьЗначенияСпискаВыбора(
				СписокВыбораНУ, 
				Форма.ПлательщикНалогаНаПрибыль, 
				ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации"), 
				0);
				
			ВнеоборотныеАктивыКлиентСервер.УстановитьВидимостьЗначенияСпискаВыбора(
				СписокВыбораНУ, 
				Форма.ПрименяетсяУСНДоходыМинусРасходы, 
				ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключитьВСоставАмортизируемогоИмущества"), 
				0);
			
			НеПолныйВариантПримененияЦФ = (Объект.ВариантПримененияЦелевогоФинансирования 
												<> ПредопределенноеЗначение("Перечисление.ВариантыПримененияЦелевогоФинансирования.Полное"));
			ВнеоборотныеАктивыКлиентСервер.УстановитьВидимостьЗначенияСпискаВыбора(
				СписокВыбораНУ, 
				НеПолныйВариантПримененияЦФ, 
				ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету"), 
				1);
			
			Если СписокВыбораНУ.НайтиПоЗначению(Объект.ПорядокУчетаНУ) = Неопределено И НЕ ОбновитьВсе Тогда
				Объект.ПорядокУчетаНУ = СписокВыбораНУ.Получить(0).Значение;
			КонецЕсли;
				
			Причина = "";
			Форма.РекомендуемыйПорядокУчетаНУ = СписокВыбораНУ.Получить(0).Значение;
				
			Если Форма.Объект.ГруппаОС = ПредопределенноеЗначение("Перечисление.ГруппыОС.ЗемельныеУчастки") Тогда
				Причина = НСтр("ru = 'Указана группа ОС ""Земельные участки""'");
				Форма.РекомендуемыйПорядокУчетаНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы");
			ИначеЕсли ЗначениеЗаполнено(Форма.Объект.СрокИспользованияБУ) И Форма.Объект.СрокИспользованияБУ <= 12 И НеПолныйВариантПримененияЦФ Тогда
				Причина = НСтр("ru = 'Срок полезного использования не превышает 12 месяцев'");
				Форма.РекомендуемыйПорядокУчетаНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету");
			Иначе
				Для каждого СтрокаОС Из Форма.Объект.ОС Цикл
					Если ЗначениеЗаполнено(СтрокаОС.СтоимостьБУ) И СтрокаОС.СтоимостьБУ <= 100000 И НеПолныйВариантПримененияЦФ Тогда
						Причина = НСтр("ru = 'Первоначальная стоимость не превышает 100 000 руб.'");
						Форма.РекомендуемыйПорядокУчетаНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету");
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			МассивСтрок = Новый Массив;
			Если ЗначениеЗаполнено(Причина) И Форма.Объект.ПорядокУчетаНУ <> Форма.РекомендуемыйПорядокУчетаНУ Тогда
				МассивСтрок.Добавить(Причина);
				МассивСтрок.Добавить("," + " ");
				МассивСтрок.Добавить(НСтр("ru = 'рекомендуется установить значение'"));
				МассивСтрок.Добавить(" ");
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(Форма.РекомендуемыйПорядокУчетаНУ),,,, "УстановкаПорядкаУчетаНУ"));
				МассивСтрок.Добавить(".");
				Форма.Элементы.ГруппаУстановкаПараметраУчетаНУ.Видимость = Истина;
			Иначе
				Форма.Элементы.ГруппаУстановкаПараметраУчетаНУ.Видимость = Ложь;
			КонецЕсли;
			
			Форма.УстановитьПорядокУчетаНУ = Новый ФорматированнаяСтрока(МассивСтрок);
			
		Иначе
			
			Форма.Элементы.ГруппаУстановкаПараметраУчетаНУ.Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаБУ")
		ИЛИ ОбновитьВсе Тогда
	
		Элементы.ПорядокУчетаНУ.РежимВыбораИзСписка = НЕ ПараметрыПринятияКУчетуОС.ПредопределенныйПорядокУчетаНУ;
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("СрокИспользованияБУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаБУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		ИЛИ ОбновитьВсе Тогда
		
		Форма.СрокИспользованияБУРасшифровка = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(
			Объект.СрокИспользованияБУ);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("СрокИспользованияНУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаНУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		ИЛИ ОбновитьВсе Тогда
		
		Форма.СрокИспользованияНУРасшифровка = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(
			Объект.СрокИспользованияНУ);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("СрокИспользованияУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ ОбновитьВсе Тогда
		
		Форма.СрокИспользованияУУРасшифровка = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(
			Объект.СрокИспользованияУУ);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		ИЛИ ОбновитьВсе Тогда
		Элементы.ГруппаУчетУУ.ОтображатьЗаголовок = (Объект.ОтражатьВРеглУчете);
		Элементы.ГруппаУчетОбщее.ОтображатьЗаголовок = (Объект.ОтражатьВРеглУчете);
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ГруппаОС")
		ИЛИ ОбновитьВсе Тогда
		
		ПроверяемоеЗначение = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислитьАмортизациюПриПринятииКУчету");
		
		ЗначениеВидно = (Объект.ГруппаОС = ПредопределенноеЗначение("Перечисление.ГруппыОС.ПроизводственныйИХозяйственныйИнвентарь")
							ИЛИ Объект.ПорядокУчетаБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислитьАмортизациюПриПринятииКУчету"));
		
		ВнеоборотныеАктивыКлиентСервер.УстановитьВидимостьЗначенияСпискаВыбора(
			Элементы.ПорядокУчетаБУ.СписокВыбора, 
			ЗначениеВидно, 
			ПроверяемоеЗначение, 
			1);
		
		//
		ПроверяемоеЗначение = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислитьАмортизациюПриПринятииКУчету");
		
		ЗначениеВидно = (Объект.ГруппаОС = ПредопределенноеЗначение("Перечисление.ГруппыОС.ПроизводственныйИХозяйственныйИнвентарь")
							ИЛИ Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислитьАмортизациюПриПринятииКУчету"));
		
		ВнеоборотныеАктивыКлиентСервер.УстановитьВидимостьЗначенияСпискаВыбора(
			Элементы.ПорядокУчетаУУ.СписокВыбора, 
			ЗначениеВидно, 
			ПроверяемоеЗначение, 
			1);
			
	КонецЕсли;
	
	#КонецОбласти
	
	#Область СтраницаОтражениеРасходов
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ ОбновитьВсе Тогда
		
		Если Объект.ОтражатьВУпрУчете 
			И Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.СписыватьПриПринятииКУчету") Тогда
			
			Элементы.ГруппаОтражениеРасходовПоАмортизацииУпр.Заголовок = 
				?(Объект.ОтражатьВРеглУчете, НСтр("ru = 'Отражение расходов (управленческий учет)'"), НСтр("ru = 'Амортизация'"));
		Иначе	
			Элементы.ГруппаОтражениеРасходовПоАмортизацииУпр.Заголовок = 
				?(Объект.ОтражатьВРеглУчете, НСтр("ru = 'Амортизация (управленческий учет)'"), НСтр("ru = 'Амортизация'"));
		КонецЕсли; 
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаНУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ ОбновитьВсе Тогда
		
		Если ПараметрыПринятияКУчетуОС.ДоступноОтражениеРасходовБУ 
			И ПараметрыПринятияКУчетуОС.ДоступноОтражениеРасходовНУ Тогда
			ЗаголовокГруппы = НСтр("ru = 'Амортизация (бухгалтерский и налоговый учет)'");
		ИначеЕсли ПараметрыПринятияКУчетуОС.ДоступноОтражениеРасходовНУ Тогда
			ЗаголовокГруппы = НСтр("ru = 'Амортизация (налоговый учет)'");
		Иначе
			ЗаголовокГруппы = НСтр("ru = 'Амортизация (бухгалтерский учет)'");
		КонецЕсли; 
		Элементы.ГруппаОтражениеРасходовПоАмортизацииРегл.Заголовок = ЗаголовокГруппы;
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаБУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ХозяйственнаяОперация") 
		ИЛИ ОбновитьВсе Тогда
		
		ДокументНаОснованииИнвентаризации = 
			(Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПринятиеКУчетуОСпоИнвентаризации")
				И Объект.ПорядокУчетаБУ <> ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.АмортизацияНачислена")
				И Объект.ПорядокУчетаУУ <> ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.АмортизацияНачислена"));
				
		Элементы.СтраницаОтражениеРасходов.Заголовок = ?(
			ДокументНаОснованииИнвентаризации,
			НСтр("ru='Отражение доходов и расходов'"),
			НСтр("ru='Отражение расходов'"));
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("СтатьяРасходовУУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаБУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаНУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("СтатьяРасходовБУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ ОбновитьВсе Тогда
		
		Если ПараметрыПринятияКУчетуОС.СтатьяРасходовУУОбязательна 
			ИЛИ ЗначениеЗаполнено(Объект.СтатьяРасходовУУ) Тогда
			
			Элементы.СтатьяРасходовУУ.ПодсказкаВвода = "";
			Элементы.АналитикаРасходовУУ.ПодсказкаВвода = "";
			
		ИначеЕсли НЕ ПараметрыПринятияКУчетуОС.СтатьяРасходовУУОбязательна Тогда
			Если ПараметрыПринятияКУчетуОС.ДоступноОтражениеРасходовБУ 
				И ПараметрыПринятияКУчетуОС.ДоступноОтражениеРасходовНУ Тогда
				ПодсказкаВводаСтатьи = НСтр("ru = 'совпадает с бухгалтерским и налоговым учетом'");
			ИначеЕсли ПараметрыПринятияКУчетуОС.ДоступноОтражениеРасходовНУ Тогда
				ПодсказкаВводаСтатьи = НСтр("ru = 'совпадает с налоговым учетом'");
			Иначе
				ПодсказкаВводаСтатьи = НСтр("ru = 'совпадает с бухгалтерским учетом'");
			КонецЕсли;
			
			Элементы.СтатьяРасходовУУ.ПодсказкаВвода = ПодсказкаВводаСтатьи;
			Элементы.АналитикаРасходовУУ.ПодсказкаВвода = ПодсказкаВводаСтатьи;
		КонецЕсли; 
		
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЗависимыеЭлементыФормыНаСервере(ИзмененныеРеквизиты = "")

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаНУ") Тогда
		ПроверитьСоответствиеСтатьиРасходовПорядкуУчетаНУ();
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ ОбновитьВсе Тогда
		
		ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Объект.Организация, Объект.Дата);
		ПрименяетсяУСНДоходыМинусРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Объект.Организация, Объект.Дата);
		
		ПараметрыУчетнойПолитики = РегистрыСведений.УчетнаяПолитикаОрганизаций.ПараметрыУчетнойПолитики(Объект.Организация, Объект.Дата);
		РаздельныйУчетТоваровПоНалогообложениюНДС = 
			ПараметрыУчетнойПолитики <> Неопределено 
			И ПараметрыУчетнойПолитики.РаздельныйУчетТоваровПоНалогообложениюНДС;
		ВключатьВСоставНалоговыхРасходовЛизинговыеПлатежи = 
			ПараметрыУчетнойПолитики <> Неопределено 
			И ПараметрыУчетнойПолитики.ВключатьВСоставНалоговыхРасходовЛизинговыеПлатежи;
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ГруппаОС")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОсновноеСредство")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("АмортизационнаяГруппа")
		ИЛИ ОбновитьВсе Тогда
		
		ТребуетсяНастройкаОтраженияРасходовПоНалогам = ВнеоборотныеАктивы.ТребуетсяНастройкаОтраженияРасходовПоНалогам(
															Объект.Организация, 
															Объект.Дата, 
															Объект.ОС.Выгрузить(, "ОсновноеСредство").ВыгрузитьКолонку("ОсновноеСредство"),
															Объект.ГруппаОС,
															Объект.АмортизационнаяГруппа);
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ ОбновитьВсе Тогда
		
		Элементы.ВариантОтраженияВУчете.Видимость = ВнеоборотныеАктивыСлужебный.ДоступенВыборОтраженияВУчетах(Объект.Дата);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Организация") 
		ИЛИ ОбновитьВсе Тогда
		
		ЕстьСвязанныеОрганизации = Справочники.Организации.ОрганизацияВзаимосвязанаСДругимиОрганизациями(Объект.Организация);
		УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Организация));
		
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтаФорма, ИзмененныеРеквизиты);
	
КонецПроцедуры

&НаКлиенте
Функция ТребуетсяВызовСервераДляНастройкиЭлементовФормы(СтруктураИзмененныхРеквизитов)

	Если СтруктураИзмененныхРеквизитов.Количество() = 0
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Дата") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ГруппаОС") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("АмортизационнаяГруппа") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ХозяйственнаяОперация") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете") 
		
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаНУ")  
			И Объект.ПорядокУчетаНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету")
			И ЗначениеЗаполнено(Объект.СтатьяРасходовБУ)
			
		Тогда
			
		Возврат Истина;
	КонецЕсли; 
	
	Возврат Ложь;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаполнитьРеквизитыВзависимостиОтСвойств(Объект, ПараметрыРеквизитовОбъекта)

	ИзмененныеРеквизиты = Новый Массив;
	
	Для каждого ПараметрыРеквизита Из ПараметрыРеквизитовОбъекта Цикл
		
		Если НЕ ЗначениеЗаполнено(ПараметрыРеквизита.ИмяРеквизита)
			ИЛИ СтрРазделить(ПараметрыРеквизита.ИмяРеквизита, ".").ВГраница() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Действие = ВнеоборотныеАктивыКлиентСервер.ОчиститьИлиЗаполнить(Объект, ПараметрыРеквизита);
		
		Если НЕ ЗначениеЗаполнено(Действие) Тогда
			Продолжить;
		КонецЕсли;
		
		#Область СтраницаОсновное
		
		Если ПараметрыРеквизита.ИмяРеквизита = "ДокументОснование" 
			ИЛИ ПараметрыРеквизита.ИмяРеквизита = "ОбъектСтроительства" Тогда
			Если Действие = "Очистить" Тогда
				Объект[ПараметрыРеквизита.ИмяРеквизита] = Неопределено;
				ИзмененныеРеквизиты.Добавить(ПараметрыРеквизита.ИмяРеквизита);
			КонецЕсли; 
		КонецЕсли;
		
		Если ПараметрыРеквизита.ИмяРеквизита = "ВариантПримененияЦелевогоФинансирования" 
			И Действие = "Заполнить" Тогда
			Объект[ПараметрыРеквизита.ИмяРеквизита] = ПредопределенноеЗначение("Перечисление.ВариантыПримененияЦелевогоФинансирования.НеИспользуется");
			ИзмененныеРеквизиты.Добавить(ПараметрыРеквизита.ИмяРеквизита);
		КонецЕсли;
		
		#КонецОбласти
		
		#Область СтраницаУчет
		
		Если ПараметрыРеквизита.ИмяРеквизита = "НачислятьАмортизациюБУ"
			ИЛИ ПараметрыРеквизита.ИмяРеквизита = "НачислятьАмортизациюНУ"
			ИЛИ ПараметрыРеквизита.ИмяРеквизита = "НачислятьАмортизациюУУ" Тогда
			
			Объект[ПараметрыРеквизита.ИмяРеквизита] = ?(Действие = "Заполнить", Истина, Ложь);
			ИзмененныеРеквизиты.Добавить(ПараметрыРеквизита.ИмяРеквизита);
		КонецЕсли;
		
		//
		Если ПараметрыРеквизита.ИмяРеквизита = "ПорядокУчетаБУ"
			И Действие = "Заполнить" Тогда
			Объект[ПараметрыРеквизита.ИмяРеквизита] = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации");
			ИзмененныеРеквизиты.Добавить(ПараметрыРеквизита.ИмяРеквизита);
		КонецЕсли;
		Если ПараметрыРеквизита.ИмяРеквизита = "ПорядокУчетаНУ"
			И Действие = "Заполнить" Тогда
			Объект[ПараметрыРеквизита.ИмяРеквизита] = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации");
			ИзмененныеРеквизиты.Добавить(ПараметрыРеквизита.ИмяРеквизита);
		КонецЕсли;
		Если ПараметрыРеквизита.ИмяРеквизита = "ПорядокУчетаУУ"
			И Действие = "Заполнить" Тогда
			Объект[ПараметрыРеквизита.ИмяРеквизита] = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию");
			ИзмененныеРеквизиты.Добавить(ПараметрыРеквизита.ИмяРеквизита);
		КонецЕсли;
		
		//
		Если ПараметрыРеквизита.ИмяРеквизита = "МетодНачисленияАмортизацииБУ"
			И Действие = "Заполнить" Тогда
			Объект[ПараметрыРеквизита.ИмяРеквизита] = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.Линейный");
			ИзмененныеРеквизиты.Добавить(ПараметрыРеквизита.ИмяРеквизита);
		КонецЕсли;
		Если ПараметрыРеквизита.ИмяРеквизита = "МетодНачисленияАмортизацииУУ"
			И Действие = "Заполнить" Тогда
			Объект[ПараметрыРеквизита.ИмяРеквизита] = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.Линейный");
			ИзмененныеРеквизиты.Добавить(ПараметрыРеквизита.ИмяРеквизита);
		КонецЕсли;
		
		//
		Если ПараметрыРеквизита.ИмяРеквизита = "ГрафикАмортизации" Тогда
			Если Действие = "Очистить" Тогда
				Объект[ПараметрыРеквизита.ИмяРеквизита] = Неопределено;
				ИзмененныеРеквизиты.Добавить(ПараметрыРеквизита.ИмяРеквизита);
			КонецЕсли; 
		КонецЕсли;
		
		Если ПараметрыРеквизита.ИмяРеквизита = "ВключитьАмортизационнуюПремиюВСоставРасходов" Тогда
			Если Действие = "Очистить" Тогда
				Объект.ВключитьАмортизационнуюПремиюВСоставРасходов = Ложь;
				Объект.ПроцентКапитальныхВложенийВключаемыхВРасходыНУ = 0;
				ИзмененныеРеквизиты.Добавить("ВключитьАмортизационнуюПремиюВСоставРасходов");
				ИзмененныеРеквизиты.Добавить("ПроцентКапитальныхВложенийВключаемыхВРасходыНУ");
			КонецЕсли; 
		КонецЕсли;
		
		#КонецОбласти
		
		#Область СтраницаОтражениеРасходов
		
		Если ПараметрыРеквизита.ИмяРеквизита = "СтатьяРасходовБУ" Тогда
			Если Действие = "Очистить" Тогда
				Объект.СтатьяРасходовБУ = Неопределено;
				Объект.АналитикаРасходовБУ = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыРеквизита.ИмяРеквизита = "СтатьяРасходовУУ" Тогда
			Если Действие = "Очистить" Тогда
				Объект.СтатьяРасходовУУ = Неопределено;
				Объект.АналитикаРасходовУУ = Неопределено;
				ИзмененныеРеквизиты.Добавить("СтатьяРасходовУУ");
				ИзмененныеРеквизиты.Добавить("АналитикаРасходовУУ");
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыРеквизита.ИмяРеквизита = "СтатьяРасходовНалог" Тогда
			Если Действие = "Очистить" Тогда
				Объект.СтатьяРасходовНалог = Неопределено;
				Объект.АналитикаРасходовНалог = Неопределено;
				ИзмененныеРеквизиты.Добавить("СтатьяРасходовНалог");
				ИзмененныеРеквизиты.Добавить("АналитикаРасходовНалог");
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыРеквизита.ИмяРеквизита = "СтатьяДоходов" Тогда
			Если Действие = "Очистить" Тогда
				Объект.СтатьяДоходов = Неопределено;
				Объект.АналитикаДоходов = Неопределено;
				ИзмененныеРеквизиты.Добавить("СтатьяДоходов");
				ИзмененныеРеквизиты.Добавить("АналитикаДоходов");
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыРеквизита.ИмяРеквизита = "СтатьяРасходовАмортизационнойПремии" Тогда
			Если Действие = "Очистить" Тогда
				Объект.СтатьяРасходовАмортизационнойПремии = Неопределено;
				Объект.АналитикаРасходовАмортизационнойПремии = Неопределено;
				ИзмененныеРеквизиты.Добавить("СтатьяРасходовАмортизационнойПремии");
				ИзмененныеРеквизиты.Добавить("АналитикаРасходовАмортизационнойПремии");
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыРеквизита.ИмяРеквизита = "ПередаватьРасходыВДругуюОрганизацию" Тогда
			Если Действие = "Очистить" Тогда
				Объект.ПередаватьРасходыВДругуюОрганизацию = Ложь;
				Объект.ОрганизацияПолучательРасходов = Неопределено;
				ИзмененныеРеквизиты.Добавить("ПередаватьРасходыВДругуюОрганизацию");
				ИзмененныеРеквизиты.Добавить("ОрганизацияПолучательРасходов");
			КонецЕсли;
		КонецЕсли;
		
		#КонецОбласти
		
		#Область СтраницаЦелевоеФинансирование
		
		Если ПараметрыРеквизита.ИмяРеквизита = "ЦелевоеФинансирование" Тогда
			Если Действие = "Очистить" Тогда
				Объект.ЦелевоеФинансирование.Очистить();
				Объект.СтатьяДоходов = Неопределено;
				Объект.АналитикаДоходов = Неопределено;
				ИзмененныеРеквизиты.Добавить("СтатьяДоходов");
				ИзмененныеРеквизиты.Добавить("АналитикаДоходов");
				ИзмененныеРеквизиты.Добавить("ЦелевоеФинансирование");
			КонецЕсли; 
		КонецЕсли;
		
		Если ПараметрыРеквизита.ИмяРеквизита = "ЦелевоеФинансирование.Сумма" И Действие = "Очистить" Тогда
			Для каждого ДанныеСтроки Из Объект.ЦелевоеФинансирование Цикл
				ДанныеСтроки.Сумма = 0;
			КонецЦикла;
		КонецЕсли;
		
		#КонецОбласти
		
	КонецЦикла; 
	
	Возврат СтрСоединить(ИзмененныеРеквизиты, ",");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСрокиИспользованияСовпадают(Форма)

	Форма.СрокиИспользованияСовпадают = (НЕ Форма.Объект.ОтражатьВРеглУчете ИЛИ (Форма.Объект.СрокИспользованияБУ = Форма.Объект.СрокИспользованияНУ))
									И (НЕ Форма.Объект.ОтражатьВУпрУчете ИЛИ (Форма.Объект.СрокИспользованияБУ = Форма.Объект.СрокИспользованияУУ));

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначенияПолейКонтактнойИнформацииСервер(Знач Представление, Знач ВидКонтактнойИнформации)
	
	Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Представление, ВидКонтактнойИнформации);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИсточникиФинансированияНаСервере()
	
	Объект.ЦелевоеФинансирование.Загрузить(УчетОСВызовСервера.ДанныеЗаполненияЦелевогоФинансирования(Объект));
	
КонецПроцедуры

&НаСервере
Процедура ЦелевоеФинансированиеЗаполнитьСлужебныеРеквизиты(Строка=Неопределено)
	УчетОСВызовСервера.ЗаполнитьСлужебныеРеквизитыВТаблицеЦелевогоФинансирования(Объект, Строка);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюВПодвале()

	ЗаголовокНадписи = ВнеоборотныеАктивыСлужебный.ИнформацияОДокументеВДругомУчете(Объект);
	Если ПредварительнаяСтоимостьОтличаетсяОтФактической() Тогда
		Если ЗаголовокНадписи.Количество() <> 0 Тогда
			ЗаголовокНадписи.Добавить(Символы.ПС);
		КонецЕсли;
		ЗаголовокНадписи.Добавить(НСтр("ru = 'Стоимость, указанная в документе, отличается от фактической.'"));
	КонецЕсли; 

	Если ЗаголовокНадписи.Количество() <> 0 Тогда
		Элементы.Информация.Заголовок = Новый ФорматированнаяСтрока(ЗаголовокНадписи);
		Элементы.КартинкаИнформация.Видимость = Истина;
		Элементы.Информация.Видимость = Истина;
	Иначе
		Элементы.КартинкаИнформация.Видимость = Ложь;
		Элементы.Информация.Видимость = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ПредварительнаяСтоимостьОтличаетсяОтФактической()

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.СтоимостьБУ КАК СтоимостьБУ,
	|	ТаблицаОС.СтоимостьУУ КАК СтоимостьУУ
	|ПОМЕСТИТЬ втТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
	|ИЗ
	|	втТаблицаОС КАК ТаблицаОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОС КАК СтоимостьОС
	|		ПО (СтоимостьОС.Регистратор = &Ссылка)
	|			И ТаблицаОС.ОсновноеСредство = СтоимостьОС.ОсновноеСредство
	|			И (СтоимостьОС.РасчетСтоимости)
	|			И (СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОС.ОсновноеСредство
	|
	|ИМЕЮЩИЕ
	|	(&ОтражатьВРеглУчете
	|			И СУММА(ТаблицаОС.СтоимостьБУ) <> СУММА(СтоимостьОС.СтоимостьРегл)
	|		ИЛИ &ОтражатьВУпрУчете
	|			И СУММА(ТаблицаОС.СтоимостьУУ) <> СУММА(СтоимостьОС.Стоимость))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТаблицаОС", Объект.ОС.Выгрузить());
	Запрос.УстановитьПараметр("ОтражатьВРеглУчете", Объект.ОтражатьВРеглУчете);
	Запрос.УстановитьПараметр("ОтражатьВУпрУчете", Объект.ОтражатьВУпрУчете);
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();

КонецФункции

&НаКлиенте
Процедура ЗаполнитьЗначенияРеквизитовОСДоИзменения()

	ЗначенияРеквизитовДоИзменения = Новый Структура;
	ЗначенияРеквизитовДоИзменения.Вставить("СтоимостьУУ", 0);
	ЗначенияРеквизитовДоИзменения.Вставить("СтоимостьБУ", 0);
	ЗначенияРеквизитовДоИзменения.Вставить("СтоимостьНУ", 0);
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ЗначенияРеквизитовДоИзменения, ТекущиеДанные);
	КонецЕсли;
	
	ЗначенияРеквизитовОСДоИзменения = Новый ФиксированнаяСтруктура(ЗначенияРеквизитовДоИзменения);

КонецПроцедуры

&НаКлиенте
Процедура ДокументНаОснованииПриИзмененииЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		Объект.ДокументОснование = РезультатЗакрытия;
	Иначе
		Объект.ДокументНаОсновании = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстВопроса = НСтр("ru = 'Заполнить документ по данным документа-основания?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоДаннымОснованияЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет); 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДаннымОснованияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоДаннымОснованияНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДаннымОснованияНаСервере()

	Объект.ОС.Очистить();
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПринятиеКУчетуОСпоИнвентаризации Тогда
		Документы.ПринятиеКУчетуОС2_4.ЗаполнитьНаОснованииИнвентаризацииОС(Объект);
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПринятиеКУчетуОСПоДоговоруЛизинга Тогда
		Документы.ПринятиеКУчетуОС2_4.ЗаполнитьНаОснованииПоступленияПредметовЛизинга(Объект);
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПроцентКапитальныхВложенийВключаемыхВРасходыНУ()

	ПроцентКапитальныхВложенийВключаемыхВРасходыНУ = ВнеоборотныеАктивы.ПроцентКапитальныхВложенийВключаемыхВРасходыНУ(Объект.АмортизационнаяГруппа);
	Если ПроцентКапитальныхВложенийВключаемыхВРасходыНУ < Объект.ПроцентКапитальныхВложенийВключаемыхВРасходыНУ
		ИЛИ Объект.ПроцентКапитальныхВложенийВключаемыхВРасходыНУ = 0 Тогда
		Объект.ПроцентКапитальныхВложенийВключаемыхВРасходыНУ = ПроцентКапитальныхВложенийВключаемыхВРасходыНУ;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
