&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

/////////////////////////////////////////////////////////////////////////
&НаСервере
Функция ПолучитьЗначениеРеквизитаНаСервере(тОбъект, ИмяРевизита)
	
	Возврат тОбъект[ИмяРевизита];
	
КонецФункции

&НаСервере
Функция ПолучитьЗначениеПеречисленияНаСервере(ИмяПеречисления, ИмяЗначения)
	
	Возврат Перечисления[ИмяПеречисления][ИмяЗначения];
	
КонецФункции

/////////////////////////////////////////////////////////////////////////
// Стандартное (почти)

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

#Область ОбработчикиКомандФормы
// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	//МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	//ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

#КонецОбласти

/////////////////////////////////////////////////////////////////////////
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать

	//ВводНаОсновании.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюСоздатьНаОсновании);
	
	//МенюОтчеты.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюОтчеты);
	
	// ИнтеграцияС1СДокументооборотом
	//ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокТехникиОсновноеСредствоПриИзменении(Элемент)
	СписокТехникиОсновноеСредствоПриИзмененииНаСервере(Элементы.СписокТехники.ТекущиеДанные.ОсновноеСредство, Элементы.СписокТехники.ТекущиеДанные.РегистрационныйНомер, Элементы.СписокТехники.ТекущиеДанные.ДатаПостановкиНаУчет);
КонецПроцедуры

&НаСервере
Процедура СписокТехникиОсновноеСредствоПриИзмененииНаСервере(тОсновноеСредство, тРегистрационныйНомер, тДатаПостановкиНаУчет)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	пкПостановкаНаУчетВРостехнадзореСрезПоследних.ОсновноеСредство КАК ОсновноеСредство1,
	|	пкПостановкаНаУчетВРостехнадзореСрезПоследних.РегистрационныйНомер,
	|	пкПостановкаНаУчетВРостехнадзореСрезПоследних.ДатаПостановкиНаУчет,
	|	ОбъектыЭксплуатации.Ссылка КАК ОсновноеСредство,
	|	ЕстьNULL(пкПостановкаНаУчетВРостехнадзореСрезПоследних.ПостановкаНаУчет,Ложь) как ПостановкаНаУчет
	|ИЗ
	|	Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкПостановкаНаУчетВРостехнадзоре.СрезПоследних(
	|				&МоментВремениДокумента,
	|				Организация = &Организация
	|					И ОсновноеСредство В (&МассивОС)) КАК пкПостановкаНаУчетВРостехнадзореСрезПоследних
	|		ПО (пкПостановкаНаУчетВРостехнадзореСрезПоследних.ОсновноеСредство = ОбъектыЭксплуатации.Ссылка)
	|ГДЕ
	|	ОбъектыЭксплуатации.Ссылка В(&МассивОС)";

	Запрос.УстановитьПараметр("МассивОС", тОсновноеСредство);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("МоментВремениДокумента", Неопределено);

	Результат = Запрос.Выполнить();
	ТаблицаОС = Результат.Выгрузить();

	Для каждого СтрокаОС Из ТаблицаОС Цикл
		Если СтрокаОС.ПостановкаНаУчет Тогда
			тРегистрационныйНомер = СтрокаОС.РегистрационныйНомер;
			тДатаПостановкиНаУчет = СтрокаОС.ДатаПостановкиНаУчет;
		Иначе
			тРегистрационныйНомер = Неопределено;
			тДатаПостановкиНаУчет = Неопределено;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ТекстОшибки	= ПроверитьОС(Отказ);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Сообщить(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьОС(Отказ)
	
	МассивОС	= Объект.СписокТехники.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	пкПостановкаНаУчетВРостехнадзореСрезПоследних.ОсновноеСредство КАК ОсновноеСредство1,
	|	пкПостановкаНаУчетВРостехнадзореСрезПоследних.РегистрационныйНомер КАК РегистрационныйНомер,
	|	пкПостановкаНаУчетВРостехнадзореСрезПоследних.ДатаПостановкиНаУчет КАК ДатаПостановкиНаУчет,
	|	ОбъектыЭксплуатации.Ссылка КАК ОсновноеСредство,
	|	ЕСТЬNULL(пкПостановкаНаУчетВРостехнадзореСрезПоследних.ПостановкаНаУчет, ЛОЖЬ) КАК ПостановкаНаУчет,
	|	пкПостановкаНаУчетВРостехнадзореСрезПоследних.Регион
	|ИЗ
	|	Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкПостановкаНаУчетВРостехнадзоре.СрезПоследних(
	|				&ДатаДокумента,
	|				Организация = &Организация
	|					И ОсновноеСредство В (&МассивОС)) КАК пкПостановкаНаУчетВРостехнадзореСрезПоследних
	|		ПО (пкПостановкаНаУчетВРостехнадзореСрезПоследних.ОсновноеСредство = ОбъектыЭксплуатации.Ссылка)
	|ГДЕ
	|	ОбъектыЭксплуатации.Ссылка В(&МассивОС)";
	
	Запрос.УстановитьПараметр("МассивОС", МассивОС);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Запрос.УстановитьПараметр("ДатаДокумента", НачалоДня(Объект.Дата) - 1);
	Иначе	
		Запрос.УстановитьПараметр("ДатаДокумента", ТекущаяДата());
	КонецЕсли;	
	
	Результат = Запрос.Выполнить();
	ТаблицаОС = Результат.Выгрузить();
	
	СтрокаОшибки	= "";
	
	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		Если Не Объект.СнятиеСУчета И СтрокаОС.ПостановкаНаУчет Тогда
			СтрокаОшибки	= СтрокаОшибки + ?(СтрокаОшибки = "", "", Символы.ПС) +
								Строка(СтрокаОС.ОсновноеСредство) + " уже принято на учет! Рег. номер:" + Строка(СтрокаОС.РегистрационныйНомер);
			Отказ	= Истина;
		ИначеЕсли Объект.СнятиеСУчета И Не СтрокаОС.ПостановкаНаУчет Тогда
			СтрокаОшибки	= СтрокаОшибки + ?(СтрокаОшибки = "", "", Символы.ПС) +
								Строка(СтрокаОС.ОсновноеСредство) + " не состоит на учете! Рег. номер:" + Строка(СтрокаОС.РегистрационныйНомер);
			Отказ	= Истина;
		КонецЕсли	
	КонецЦикла;
	
	Возврат СтрокаОшибки;
	
КонецФункции // ()
 
///////////////////////////////////////////////////////////////////////////////