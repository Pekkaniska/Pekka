
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	об = РеквизитФормыВЗначение("Объект");
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(об, Отказ, СтандартнаяОбработка, ЭтаФорма, ДопПараметрыОткрытие);
	ЗначениеВРеквизитФормы(Об,"Объект");
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	уатОбщегоНазначенияСервер.ЗаполнитьШапкуДокумента(
		Объект,
		,
		Параметры.ЗначениеКопирования,
		Параметры.Основание,
		,
		,
		,
		Параметры.ЗначенияЗаполнения
	);
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	// Заполнение из обработки "Планирование работы ТС"
	Если Объект.Ссылка.Пустая() И Параметры.ЗначенияЗаполнения.Свойство("НоваяСтрока") Тогда
		НоваяСтрока = Объект.Разнарядка.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Параметры.ЗначенияЗаполнения.НоваяСтрока);
	КонецЕсли;
	
	ОбновитьНомерТСвТЧ();
	ОбновитьНомерПрицепа1вТЧ();
	ОбновитьНомерПрицепа2вТЧ();
	ОбновитьСтатусыЗанятостиСервер();
	
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.Подразделение, "Объект.Организация");
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.РазнарядкаПодразделение, "Объект.Организация");
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.РазнарядкаПодразделение2, "Объект.Организация");
	
	// УправлениеПредприятием.СлужебныеПодсистемы
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	// Конец УправлениеПредприятием.СлужебныеПодсистемы
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Объект.Проведен Тогда
		ТолькоПросмотр = Истина;
		Элементы.РазнарядкаЗаполнитьПодготовку.Доступность = Ложь;
		Элементы.РазнарядкаОбновитьСтатусыЗанятостиТС.Доступность = Ложь;
	КонецЕсли;
	
	Модифицированность = Ложь;
	
	ОтобразитьСкрытьДопИнформацию();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьНомерТСвТЧ();
	ОбновитьНомерПрицепа1вТЧ();
	ОбновитьНомерПрицепа2вТЧ();
	ОбновитьСтатусыЗанятостиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			//Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	СформироватьПодготовку();
КонецПроцедуры

&НаКлиенте
Процедура КолоннаПриИзменении(Элемент)
	СформироватьПодготовку();
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	СформироватьПодготовку();
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура ПанельДопИнформацииПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Разнарядка.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначенияКлиент.ПанельДопИнформацииПоТСПриНажатии(
		ЭтотОбъект, 
		Элемент, 
		ДанныеСобытия, 
		СтандартнаяОбработка,
		ТекущиеДанные.ТС
	);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРазнарядка

&НаКлиенте
Процедура РазнарядкаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекСтрока = Элементы.Разнарядка.ТекущиеДанные;
	Если НоваяСтрока Тогда
		ТекСтрока.ДатаВыезда = НачалоДня(Объект.Дата);
		Если НЕ Копирование Тогда
			Попытка
				ТекСтрока.Контрагент = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.ТекущийПользователь(), "ОсновнойПокупатель");
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьСписокВыбораЭкипажа();
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаВодительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Элементы.Разнарядка.ТекущиеДанные.Водитель, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаВодительОткрытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Элементы.Разнарядка.ТекущиеДанные.Водитель, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаВодительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаВодительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаВодитель2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Элементы.Разнарядка.ТекущиеДанные.Водитель2, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаВодитель2Открытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Элементы.Разнарядка.ТекущиеДанные.Водитель2, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаВодитель2АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаВодитель2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаКондукторНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Элементы.Разнарядка.ТекущиеДанные.Кондуктор, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаКондукторОткрытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Элементы.Разнарядка.ТекущиеДанные.Кондуктор, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаКондукторАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаКондукторОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаКондуктор2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Элементы.Разнарядка.ТекущиеДанные.Кондуктор2, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаКондуктор2Открытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Элементы.Разнарядка.ТекущиеДанные.Кондуктор2, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаКондуктор2АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаКондуктор2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаНомерТСПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Разнарядка.ТекущиеДанные;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСПриИзменении(ТекСтрока.ТС, ТекСтрока.НомерТС, Объект.Организация);
	
	ТекСтрока.РежимРаботыТС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.ТС, "уатОсновнойРежимРаботы");
	
	ОбновитьНомерТСвТЧ(Элементы.Разнарядка.ТекущаяСтрока);
	ОбновитьСписокВыбораЭкипажа();
	
	//заполняем водителей
	СтруктураЭкипаж = уатЗащищенныеФункцииСервер.ЭкипажТСсУчетомГрафика(ТекСтрока.ТС, ТекСтрока.ДатаВыезда, Объект.Организация);
	ТекСтрока.Водитель = СтруктураЭкипаж.Водитель;
	ТекСтрока.Водитель2 = СтруктураЭкипаж.Водитель2;
	ТекСтрока.Кондуктор = СтруктураЭкипаж.Сотрудник;
	ТекСтрока.Кондуктор2 = СтруктураЭкипаж.Сотрудник2;
	
	ОбновитьСтатусыЗанятостиСервер(ТекСтрока.НомерСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаНомерТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("уатОрганизация", Объект.Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		СтруктураОтбора.Вставить("уатПодразделение", Объект.Подразделение);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Колонна) Тогда
		СтруктураОтбора.Вставить("уатКолонна", Объект.Колонна);
	КонецЕсли;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСНачалоВыбора(Элемент, Элементы.Разнарядка.ТекущиеДанные.ТС, СтруктураОтбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаНомерТСОчистка(Элемент, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОчистка(Элементы.Разнарядка.ТекущиеДанные.ТС);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаНомерТСОткрытие(Элемент, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОткрытие(Элементы.Разнарядка.ТекущиеДанные.ТС, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаНомерТСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекСтрока = Элементы.Разнарядка.ТекущиеДанные;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОбработкаВыбора(ТекСтрока.ТС, ТекСтрока.НомерТС, ВыбранноеЗначение, СтандартнаяОбработка, Объект.Организация);
	
	ТекСтрока.РежимРаботыТС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.ТС, "уатОсновнойРежимРаботы");
	
	ОбновитьСписокВыбораЭкипажа();
	
	СоставТС = уатОбщегоНазначения.уатСоставТС(ТекСтрока.ТС);
	тСч = 0;
	Для Каждого тПрицеп из СоставТС Цикл
		тСч = тСч + 1;
		Если тСч = 1 Тогда 
			ТекСтрока.Прицеп1 = тПрицеп;
		ИначеЕсли тСч = 2 Тогда
			ТекСтрока.Прицеп2 = тПрицеп;
		Иначе	
			Прервать; 
		КонецЕсли;
	КонецЦикла;	
	
	Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ТекСтрока.РежимРаботыТС) Тогда
		ТекСтрока.ДатаВыезда = НачалоДня(Объект.Дата) + (уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВремяВыездаПЛ")) - '00010101');
		ТекСтрока.ДатаВозвращения = НачалоДня(Объект.Дата) + (уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВремяВозращенияПЛ")) - '00010101');
	Иначе	
		РежимРаботыТС_НачалоРаботы = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.РежимРаботыТС, "НачалоРаботы");
		РежимРаботыТС_КонецРаботы = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.РежимРаботыТС, "КонецРаботы");
		ТекСтрока.ДатаВыезда = НачалоДня(Объект.Дата) + (РежимРаботыТС_НачалоРаботы - НачалоДня(РежимРаботыТС_НачалоРаботы));
		ТекСтрока.ДатаВозвращения = НачалоДня(Объект.Дата) + (РежимРаботыТС_КонецРаботы - НачалоДня(РежимРаботыТС_КонецРаботы));
	КонецЕсли;	
	Если ТекСтрока.ДатаВозвращения <= ТекСтрока.ДатаВыезда Тогда
		ТекСтрока.ДатаВозвращения = НачалоДня(Объект.Дата) + 86400 + (ТекСтрока.ДатаВозвращения - НачалоДня(ТекСтрока.ДатаВозвращения));
	КонецЕсли;	
	
	//заполняем водителей
	СтруктураЭкипаж = уатЗащищенныеФункцииСервер.ЭкипажТСсУчетомГрафика(ТекСтрока.ТС, ТекСтрока.ДатаВыезда, Объект.Организация);
	ТекСтрока.Водитель = СтруктураЭкипаж.Водитель;
	ТекСтрока.Водитель2 = СтруктураЭкипаж.Водитель2;
	ТекСтрока.Кондуктор = СтруктураЭкипаж.Сотрудник;
	ТекСтрока.Кондуктор2 = СтруктураЭкипаж.Сотрудник2;
	
	ОбновитьНомерПрицепа1вТЧ(ТекСтрока.НомерСтроки);
	ОбновитьНомерПрицепа2вТЧ(ТекСтрока.НомерСтроки);
	ОбновитьСтатусыЗанятостиСервер(ТекСтрока.НомерСтроки);
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаНомерТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаНомерТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаВодительПриИзменении(Элемент)
	
	ОбновитьСтатусыЗанятостиСервер(Элементы.Разнарядка.ТекущиеДанные.НомерСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаВодитель2ПриИзменении(Элемент)
	
	ОбновитьСтатусыЗанятостиСервер(Элементы.Разнарядка.ТекущиеДанные.НомерСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаНомерПрицепа1ПриИзменении(Элемент)
	ТекСтрока = Элементы.Разнарядка.ТекущиеДанные;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСПриИзменении(ТекСтрока.Прицеп1, ТекСтрока.НомерПрицепа1, Объект.Организация);
	
	ОбновитьНомерПрицепа1вТЧ(ТекСтрока.НомерСтроки);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаНомерПрицепа1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("уатОрганизация", Объект.Организация);
	КонецЕсли;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСНачалоВыбора(Элемент, Элементы.Разнарядка.ТекущиеДанные.Прицеп1, СтруктураОтбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаНомерПрицепа1Очистка(Элемент, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОчистка(Элементы.Разнарядка.ТекущиеДанные.Прицеп1);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаНомерПрицепа1Открытие(Элемент, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОткрытие(Элементы.Разнарядка.ТекущиеДанные.Прицеп1, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаНомерПрицепа1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекСтрока = Элементы.Разнарядка.ТекущиеДанные;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОбработкаВыбора(ТекСтрока.Прицеп1, ТекСтрока.НомерПрицепа1, ВыбранноеЗначение, СтандартнаяОбработка, Объект.Организация);
		
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаНомерПрицепа1АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаНомерПрицепа1ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаНомерПрицепа2ПриИзменении(Элемент)
	ТекСтрока = Элементы.Разнарядка.ТекущиеДанные;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСПриИзменении(ТекСтрока.Прицеп2, ТекСтрока.НомерПрицепа2, Объект.Организация);
	
	ОбновитьНомерПрицепа2вТЧ(ТекСтрока.НомерСтроки);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаНомерПрицепа2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("уатОрганизация", Объект.Организация);
	КонецЕсли;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСНачалоВыбора(Элемент, Элементы.Разнарядка.ТекущиеДанные.Прицеп2, СтруктураОтбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаНомерПрицепа2Очистка(Элемент, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОчистка(Элементы.Разнарядка.ТекущиеДанные.Прицеп2);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаНомерПрицепа2Открытие(Элемент, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОткрытие(Элементы.Разнарядка.ТекущиеДанные.Прицеп2, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаНомерПрицепа2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекСтрока = Элементы.Разнарядка.ТекущиеДанные;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОбработкаВыбора(ТекСтрока.Прицеп2, ТекСтрока.НомерПрицепа2, ВыбранноеЗначение, СтандартнаяОбработка, Объект.Организация);
		
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаНомерПрицепа2АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаНомерПрицепа2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаГруз1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораГруза(Элемент,Элементы.Разнарядка.ТекущиеДанные.Груз1,Элемент,СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаГруз2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораГруза(Элемент,Элементы.Разнарядка.ТекущиеДанные.Груз2,Элемент,СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаВремяВыездаПриИзменении(Элемент)
	ТекСтрока = Элементы.Разнарядка.ТекущиеДанные;
	тДатаВыезда = НачалоДня(Объект.Дата) + (ТекСтрока.ДатаВыезда - НачалоДня(ТекСтрока.ДатаВыезда));
	Если ТекСтрока.ДатаВозвращения < тДатаВыезда Тогда
		ТекСтрока.ДатаВозвращения = НачалоДня(Объект.Дата) + 86400 + (ТекСтрока.ДатаВозвращения - НачалоДня(ТекСтрока.ДатаВозвращения));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаДатаВозвращенияПриИзменении(Элемент)
	ТекСтрока =  Элементы.Разнарядка.ТекущиеДанные;
	тДатаВыезда = НачалоДня(Объект.Дата) + (ТекСтрока.ДатаВыезда - НачалоДня(ТекСтрока.ДатаВыезда));
	Если ТекСтрока.ДатаВозвращения < тДатаВыезда Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Дата и время возвращения не может быть раньше даты и времени выезда!");
		ТекСтрока.ДатаВозвращения = тДатаВыезда;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаВремяВозвращенияПриИзменении(Элемент)
	ТекСтрока =  Элементы.Разнарядка.ТекущиеДанные;
	тДатаВыезда = НачалоДня(Объект.Дата) + (ТекСтрока.ДатаВыезда - НачалоДня(ТекСтрока.ДатаВыезда));
	Если ТекСтрока.ДатаВозвращения < тДатаВыезда Тогда
		Сообщить("Дата и время возвращения не может быть раньше даты и времени выезда!");
		ТекСтрока.ДатаВозвращения = тДатаВыезда;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаМаршрут1ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Разнарядка.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	мМаршрут = ТекущиеДанные.Маршрут1;
	мМаршрутЭтапы = ЭтапыМаршрута(мМаршрут);
	Если мМаршрутЭтапы.Количество() > 0 Тогда
		ТекущиеДанные.АдресПрибытия = мМаршрутЭтапы[0].ПунктОтправления;
		Если уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(мМаршрут, "ПредставлениеМаршрутаОднимПунктом") Тогда
			ТекущиеДанные.АдресУбытия1 = мМаршрутЭтапы[мМаршрутЭтапы.Количество()-1].ПунктОтправления;
		Иначе
			ТекущиеДанные.АдресУбытия1 = мМаршрутЭтапы[мМаршрутЭтапы.Количество()-1].ПунктПрибытия;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаМаршрут2ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Разнарядка.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	мМаршрут = ТекущиеДанные.Маршрут2;
	мМаршрутЭтапы = ЭтапыМаршрута(мМаршрут);
	Если мМаршрутЭтапы.Количество() > 0 Тогда
		ТекущиеДанные.АдресПрибытия2 = мМаршрутЭтапы[0].ПунктОтправления;
		Если уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(мМаршрут, "ПредставлениеМаршрутаОднимПунктом") Тогда
			ТекущиеДанные.АдресУбытия2 = мМаршрутЭтапы[мМаршрутЭтапы.Количество()-1].ПунктОтправления;
		Иначе
			ТекущиеДанные.АдресУбытия2 = мМаршрутЭтапы[мМаршрутЭтапы.Количество()-1].ПунктПрибытия;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// УправлениеПредприятием.СлужебныеПодсистемы
&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
КонецПроцедуры
// Конец УправлениеПредприятием.СлужебныеПодсистемы

&НаКлиенте
Процедура ЗаполнитьПодготовку(Команда)
	СформироватьПодготовку();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусыЗанятостиТС(Команда)
	ОбновитьСтатусыЗанятостиСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДокументы(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Оповещение = Новый ОписаниеОповещения("ПроверитьДокументыЗавершение", ЭтотОбъект);
		ТекстВопроса = "Перед выполнением данной операции необходимо записать текущий документ. Продолжить?";
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе 
		ПроверитьДокументыФрагмент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДокументыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Попытка
			Записать();
		Исключение
			Возврат;
		КонецПопытки;
	Иначе
		Возврат;
	КонецЕсли;
	Если Объект.Ссылка.Пустая() Тогда 
		Возврат;
	КонецЕсли;
	
	ПроверитьДокументыФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДокументыФрагмент()
	
	Если Объект.Разнарядка.Количество() > 0 Тогда
		уатОбщегоНазначенияКлиент.ОткрытьОтчетПоДокументамТСиВодителей(Объект.Ссылка);
	Иначе
		ТекстОшибки = "Табличная часть ""Разнарядка"" пустая. Невозможно проверить документы.";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Объект.Разнарядка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДопИнформацию(Команда)
	Элементы.РазнарядкаПоказатьДопИнформацию.Пометка = НЕ Элементы.РазнарядкаПоказатьДопИнформацию.Пометка;
	ОтобразитьСкрытьДопИнформацию();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ОтобразитьСкрытьДопИнформацию()
	
	флПоказатьДопИнфо = Элементы.РазнарядкаПоказатьДопИнформацию.Пометка;
	Если флПоказатьДопИнфо И Не Элементы.ПанельДопИнформации.Видимость Тогда
		Элементы.ПанельДопИнформации.Видимость = Истина;
		
	ИначеЕсли Не флПоказатьДопИнфо И Элементы.ПанельДопИнформации.Видимость Тогда 
		Элементы.ПанельДопИнформации.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("РазностьДат", уатОбщегоНазначенияСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая,
		ДатаПередИзменением));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаКлиенте
Процедура СформироватьПодготовку()
	Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(Объект.Организация) Тогда
		Сообщить("Не указана организация!");
		Возврат;
	КонецЕсли;
	
	#Если Клиент Тогда
		Если Объект.Разнарядка.Количество() > 0 Тогда
			Ответ = Неопределено;

			ПоказатьВопрос(Новый ОписаниеОповещения("СформироватьПодготовкуЗавершение", ЭтотОбъект), "Перед заполнением табличная часть будет очищена! Продолжить?", РежимДиалогаВопрос.ДаНет);
            Возврат;
		КонецЕсли;
	#КонецЕсли
		
	СформироватьПодготовкуФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПодготовкуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    СформироватьПодготовкуФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура СформироватьПодготовкуФрагмент()
    
    СформироватьПодготовкуСервер();
    Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура СформироватьПодготовкуСервер()
	Объект.Разнарядка.Очистить();
	ПредставлениеТСКакГосНомер = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ПредставлениеТСКакГосНомер);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СправочникТранспортныеСредства.уатМодель КАК Модель,
	|	СправочникТранспортныеСредства.уатГаражныйНомер КАК ГарНомер,
	|	СправочникТранспортныеСредства.Код КАК ГосНомер,
	|	СправочникТранспортныеСредства.уатГараж КАК Гараж,
	|	СправочникТранспортныеСредства.Ссылка КАК ТС,
	|	уатМестонахождениеТССрезПоследних.Организация КАК Организация,
	|	уатМестонахождениеТССрезПоследних.Колонна КАК Колонна,
	|	СправочникТранспортныеСредства.уатОсновнойРежимРаботы КАК РежимРаботыТС
	|ИЗ
	|	Справочник.ТранспортныеСредства КАК СправочникТранспортныеСредства
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних(&ДатаНач, ) КАК уатМестонахождениеТССрезПоследних
	|		ПО СправочникТранспортныеСредства.Ссылка = уатМестонахождениеТССрезПоследних.ТС
	|ГДЕ
	|	уатМестонахождениеТССрезПоследних.Организация = &Организация
	|	И СправочникТранспортныеСредства.уатМодель.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Автотранспорт)
	|	И (СправочникТранспортныеСредства.Тип = &ПустойТипТС
	|			ИЛИ (НЕ СправочникТранспортныеСредства.Тип.уатВидТС В (&СписокПрицепов)))
	|	И (СправочникТранспортныеСредства.уатДатаВыбытия = &ПустаяДата
	|			ИЛИ СправочникТранспортныеСредства.уатДатаВыбытия > &ДатаДокумента)";
	
	Если ЗначениеЗаполнено(Объект.Колонна) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И уатМестонахождениеТССрезПоследних.Колонна В Иерархии (&Колонна)";
		Запрос.УстановитьПараметр("Колонна", Объект.Колонна);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И уатМестонахождениеТССрезПоследних.Подразделение В Иерархии (&Подразделение)";
		Запрос.УстановитьПараметр("Подразделение",Объект.Подразделение);
	КонецЕсли;
	Запрос.УстановитьПараметр("ПустойТипТС", Справочники.ТипыТранспортныхСредств.ПустаяСсылка());
	Запрос.УстановитьПараметр("СписокПрицепов", уатОбщегоНазначения.уатСписокВидовТСПрицепов());
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаДокумента", Объект.Дата);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	
	тблРазнарядка = Объект.Разнарядка.Выгрузить();
	тблРазнарядка.Колонки.Добавить("ГарНомер");
	тблРазнарядка.Колонки.Добавить("ГосНомер");
	Для Каждого ТекСтрока Из Запрос.Выполнить().Выгрузить() Цикл
		НоваяСтрока = тблРазнарядка.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		Если ПредставлениеТСКакГосНомер = Истина Тогда 
			НоваяСтрока.НомерТС = НоваяСтрока.ГосНомер;
		Иначе 
			НоваяСтрока.НомерТС = НоваяСтрока.ГарНомер;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекСтрока из тблРазнарядка Цикл
		// Заполняем прицепы по умолчанию
		тСч = 0;
		СоставТС = уатОбщегоНазначения.уатСоставТС(ТекСтрока.ТС);
		Для Каждого тПрицеп из СоставТС Цикл
			тСч = тСч + 1;
			Если тСч = 1 Тогда 
				ТекСтрока.Прицеп1 = тПрицеп;
			ИначеЕсли тСч = 2 Тогда
				ТекСтрока.Прицеп2 = тПрицеп;
			Иначе	
				Прервать; 
			КонецЕсли;
		КонецЦикла;	
		
		Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ТекСтрока.РежимРаботыТС) Тогда
			ТекСтрока.ДатаВыезда = НачалоДня(Объект.Дата) + (уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ВремяВыездаПЛ) - '00010101');
			ТекСтрока.ДатаВозвращения = НачалоДня(Объект.Дата) + (уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ВремяВозращенияПЛ) - '00010101');
		Иначе	
			ТекСтрока.ДатаВыезда = НачалоДня(Объект.Дата) + (ТекСтрока.РежимРаботыТС.НачалоРаботы - НачалоДня(ТекСтрока.РежимРаботыТС.НачалоРаботы));
			ТекСтрока.ДатаВозвращения = НачалоДня(Объект.Дата) + (ТекСтрока.РежимРаботыТС.КонецРаботы - НачалоДня(ТекСтрока.РежимРаботыТС.КонецРаботы));
		КонецЕсли;	
		Если ТекСтрока.ДатаВозвращения <= ТекСтрока.ДатаВыезда Тогда
			ТекСтрока.ДатаВозвращения = НачалоДня(Объект.Дата) + 86400 + (ТекСтрока.ДатаВозвращения - НачалоДня(ТекСтрока.ДатаВозвращения));
		КонецЕсли;	
		
		//заполняем водителей
		СтруктураЭкипаж = уатЗащищенныеФункцииСервер.ЭкипажТСсУчетомГрафика(ТекСтрока.ТС, ТекСтрока.ДатаВыезда, Объект.Организация);
		ТекСтрока.Водитель = СтруктураЭкипаж.Водитель;
		ТекСтрока.Водитель2 = СтруктураЭкипаж.Водитель2;
		ТекСтрока.Кондуктор = СтруктураЭкипаж.Сотрудник;
		ТекСтрока.Кондуктор2 = СтруктураЭкипаж.Сотрудник2;
	КонецЦикла;
	
	Если ПредставлениеТСКакГосНомер = Истина Тогда
		тблРазнарядка.Сортировать("ДатаВыезда, ГосНомер");
	Иначе
		тблРазнарядка.Сортировать("ДатаВыезда, ГарНомер");
	КонецЕсли;
	
	Объект.Разнарядка.Загрузить(тблРазнарядка);
	
	//дописываем статусы
	ОбновитьСтатусыЗанятостиСервер();
	ОбновитьНомерПрицепа1вТЧ();
	ОбновитьНомерПрицепа2вТЧ();
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусыЗанятостиСервер(ТекСтрокаНомер = Неопределено)
	уатОбщегоНазначения.ОбновитьСтатусыЗанятости(Объект.Разнарядка, Объект.Дата, Объект.Организация, ТекСтрокаНомер);
КонецПроцедуры

&НаСервере
Процедура ОбновитьНомерТСвТЧ(Знач ТекСтрока = Неопределено)
	Если ТекСтрока <> Неопределено Тогда
		ТекСтрока = Объект.Разнарядка.НайтиПоИдентификатору(ТекСтрока);
	КонецЕсли;
	
	ИмяТЧ = "Разнарядка";
	Если ТекСтрока = Неопределено Тогда
		Для Каждого ТекСтрокаТЧ Из Объект[ИмяТЧ] Цикл
			ТекСтрокаТЧ.НомерТС = уатОбщегоНазначения.уатПредставлениеТС(ТекСтрокаТЧ.ТС, Объект.Организация);
		КонецЦикла;
	Иначе
		ТекСтрока.НомерТС = уатОбщегоНазначения.уатПредставлениеТС(ТекСтрока.ТС, Объект.Организация);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьНомерПрицепа1вТЧ(НомерСтроки = Неопределено)
	Если НомерСтроки <> Неопределено Тогда
		ТекСтрока = Объект.Разнарядка[НомерСтроки-1];
	КонецЕсли;
	
	ИмяТЧ = "Разнарядка";
	Если ТекСтрока = Неопределено Тогда
		Для Каждого ТекСтрокаТЧ Из Объект[ИмяТЧ] Цикл
			ТекСтрокаТЧ.НомерПрицепа1 = уатОбщегоНазначения.уатПредставлениеТС(ТекСтрокаТЧ.Прицеп1, Объект.Организация);
		КонецЦикла;
	Иначе
		ТекСтрока.НомерПрицепа1 = уатОбщегоНазначения.уатПредставлениеТС(ТекСтрока.Прицеп1, Объект.Организация);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьНомерПрицепа2вТЧ(НомерСтроки = Неопределено)
	Если НомерСтроки <> Неопределено Тогда
		ТекСтрока = Объект.Разнарядка[НомерСтроки-1];
	КонецЕсли;
	
	ИмяТЧ = "Разнарядка";
	Если ТекСтрока = Неопределено Тогда
		Для Каждого ТекСтрокаТЧ Из Объект[ИмяТЧ] Цикл
			ТекСтрокаТЧ.НомерПрицепа2 = уатОбщегоНазначения.уатПредставлениеТС(ТекСтрокаТЧ.Прицеп2, Объект.Организация);
		КонецЦикла;
	Иначе
		ТекСтрока.НомерПрицепа2 = уатОбщегоНазначения.уатПредставлениеТС(ТекСтрока.Прицеп2, Объект.Организация);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокВыбораЭкипажа()
	ТекСтрока = Элементы.Разнарядка.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.РазнарядкаВодитель.СписокВыбора.Очистить();
	Элементы.РазнарядкаВодитель2.СписокВыбора.Очистить();
	Элементы.РазнарядкаКондуктор.СписокВыбора.Очистить();
	Элементы.РазнарядкаКондуктор2.СписокВыбора.Очистить();
	
	ЭкипажТССписок = уатЗащищенныеФункцииСервер.ЭкипажТССписок(ТекСтрока.ТС);
	ЭкипажТССписок_Количество = ЭкипажТССписок.Количество();
	
	Элементы.РазнарядкаВодитель.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	Элементы.РазнарядкаВодитель2.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	Элементы.РазнарядкаКондуктор.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	Элементы.РазнарядкаКондуктор2.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	
	Если ЭкипажТССписок_Количество = 0 Тогда	
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСотр Из ЭкипажТССписок Цикл
		Элементы.РазнарядкаВодитель.СписокВыбора.Добавить(ТекСотр.Значение);
		Элементы.РазнарядкаВодитель2.СписокВыбора.Добавить(ТекСотр.Значение);
		Элементы.РазнарядкаКондуктор.СписокВыбора.Добавить(ТекСотр.Значение);
		Элементы.РазнарядкаКондуктор2.СписокВыбора.Добавить(ТекСотр.Значение);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтапыМаршрута(спрМаршрут)
	
	массивЭтапов = Новый Массив();
	Для Каждого ТекЭтап Из спрМаршрут.Этапы Цикл
		массивЭтапов.Добавить(Новый Структура("ПунктОтправления, ПунктПрибытия", ТекЭтап.ПунктОтправления, ТекЭтап.ПунктПрибытия));
	КонецЦикла;
	
	Возврат массивЭтапов;
	
КонецФункции

#КонецОбласти
