
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура перезаполняет таблицу Разнарядки
Процедура ЗаполнитьТаблицы() Экспорт
	Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация!");
		Возврат;
	КонецЕсли;
	
	Разнарядка.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СправочникТранспортныеСредства.уатМодель КАК Модель,
	|	СправочникТранспортныеСредства.уатГаражныйНомер КАК ГарНомер,
	|	СправочникТранспортныеСредства.Код КАК ГосНомер,
	|	СправочникТранспортныеСредства.уатГараж КАК Гараж,
	|	СправочникТранспортныеСредства.Ссылка КАК ТС,
	|	уатМестонахождениеТССрезПоследних.Организация КАК Организация,
	|	уатМестонахождениеТССрезПоследних.Колонна КАК Колонна,
	|	СправочникТранспортныеСредства.уатОсновнойРежимРаботы КАК РежимРаботыТС
	|ИЗ
	|	Справочник.ТранспортныеСредства КАК СправочникТранспортныеСредства
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних(&ДатаНач, ) 
	|			КАК уатМестонахождениеТССрезПоследних
	|		ПО СправочникТранспортныеСредства.Ссылка = уатМестонахождениеТССрезПоследних.ТС
	|ГДЕ
	|	уатМестонахождениеТССрезПоследних.Организация = &Организация
	|	И СправочникТранспортныеСредства.уатМодель.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Автотранспорт)
	|	И (СправочникТранспортныеСредства.Тип = &ПустойТипТС
	|			ИЛИ (НЕ СправочникТранспортныеСредства.Тип.уатВидТС В (&СписокПрицепов)))
	|	И (СправочникТранспортныеСредства.уатДатаВыбытия = &ПустаяДата
	|			ИЛИ СправочникТранспортныеСредства.уатДатаВыбытия > &ДатаДокумента)";
	
	Если ЗначениеЗаполнено(Колонна) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И уатМестонахождениеТССрезПоследних.Колонна В Иерархии (&Колонна)";
		Запрос.УстановитьПараметр("Колонна", Колонна);
	КонецЕсли;				   
	
	Запрос.УстановитьПараметр("ПустойТипТС", Справочники.ТипыТранспортныхСредств.ПустаяСсылка());
	Запрос.УстановитьПараметр("СписокПрицепов", уатОбщегоНазначения.уатСписокВидовТСПрицепов());
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(Дата));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(Дата));
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	
	тблРазнарядка = Разнарядка.Выгрузить();
	тблРазнарядка.Колонки.Добавить("ГарНомер");
	тблРазнарядка.Колонки.Добавить("ГосНомер");
	Для Каждого ТекСтрока Из Запрос.Выполнить().Выгрузить() Цикл
		НоваяСтрока = тблРазнарядка.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
	Для каждого ТекСтрока из тблРазнарядка Цикл
		// Заполняем прицепы по умолчанию
		тСч = 0;
		СоставТС = уатОбщегоНазначения.уатСоставТС(ТекСтрока.ТС);
		Для Каждого тСтрока из СоставТС Цикл
			тСч = тСч + 1;
			Если тСч = 1 Тогда 
				ТекСтрока.Прицеп1 = тСтрока.ТС;
			ИначеЕсли тСч = 2 Тогда
				ТекСтрока.Прицеп2 = тСтрока.ТС;
			Иначе	
				Прервать; 
			КонецЕсли;
		КонецЦикла;	
		
		Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ТекСтрока.РежимРаботыТС) Тогда
			#Если Клиент Тогда
				ТекСтрока.ДатаВыезда = НачалоДня(Дата) + (уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
					Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ВремяВыездаПЛ) - '00010101');
				ТекСтрока.ДатаВозвращения = НачалоДня(Дата) + (уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
					Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ВремяВозращенияПЛ) - '00010101');
			#КонецЕсли
		Иначе	
			ТекСтрока.ДатаВыезда = НачалоДня(Дата) + (ТекСтрока.РежимРаботыТС.НачалоРаботы - НачалоДня(
				ТекСтрока.РежимРаботыТС.НачалоРаботы));
			ТекСтрока.ДатаВозвращения = НачалоДня(Дата) + (ТекСтрока.РежимРаботыТС.КонецРаботы - НачалоДня(
				ТекСтрока.РежимРаботыТС.КонецРаботы));
		КонецЕсли;	
		Если ТекСтрока.ДатаВозвращения <= ТекСтрока.ДатаВыезда Тогда
			ТекСтрока.ДатаВозвращения = НачалоДня(Дата) + 86400 + (ТекСтрока.ДатаВозвращения - НачалоДня(
				ТекСтрока.ДатаВозвращения));
		КонецЕсли;	
		
		//заполняем водителей
		СтруктураЭкипаж = уатЗащищенныеФункцииСервер.ЭкипажТСсУчетомГрафика(ТекСтрока.ТС, ТекСтрока.ДатаВыезда, Организация);
		ТекСтрока.Водитель = СтруктураЭкипаж.Водитель;
		ТекСтрока.Водитель2 = СтруктураЭкипаж.Водитель2;
		ТекСтрока.Кондуктор = СтруктураЭкипаж.Сотрудник;
		ТекСтрока.Кондуктор2 = СтруктураЭкипаж.Сотрудник2;
	КонецЦикла;
	
	Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
			ПланыВидовХарактеристик.уатПраваИНастройки.ПредставлениеТСКакГосНомер) = Истина Тогда
		тблРазнарядка.Сортировать("ДатаВыезда, ГосНомер");
	Иначе
		тблРазнарядка.Сортировать("ДатаВыезда, ГарНомер");
	КонецЕсли;
	
	Разнарядка.Загрузить(тблРазнарядка);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Инициализация дополнительных свойств для проведения документа.
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.уатРазнарядка.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	уатПроведение.ОтразитьСостояниеТС(ДополнительныеСвойства, Движения, Отказ);
	
	// Запись наборов записей.
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.уатРазнарядка.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль
	Документы.уатРазнарядка.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ЭтотОбъект);
	
	//проверка ТС на признак автотранспорта
	Для Каждого ТекСтрока Из Разнарядка Цикл
		Если НЕ ТекСтрока.ТС.уатВидМоделиТС = Перечисления.уатВидыМоделейТС.Автотранспорт Тогда
			ТекстСообщения = "В строке №" + ТекСтрока.НомерСтроки + " ТС не является автотранспортом (выбрано оборудование)!";
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;
	
	//проверка на пересечения занятости (состояния) ТС по времени
	Для Каждого ТекСтрока Из Разнарядка Цикл
		Для Каждого ТекСтрокаВлож Из Разнарядка Цикл
			Если Разнарядка.Индекс(ТекСтрокаВлож) <= Разнарядка.Индекс(ТекСтрока) ИЛИ ТекСтрока.ТС <> ТекСтрокаВлож.ТС Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекСтрока.ДатаВыезда < ТекСтрокаВлож.ДатаВозвращения И
					ТекСтрока.ДатаВозвращения > ТекСтрокаВлож.ДатаВыезда Тогда
				ТекстСообщения = "В строках №" + ТекСтрока.НомерСтроки + " и " + ТекСтрокаВлож.НомерСтроки +
					" обнаружено пересечение периодов занятости (состояние ТС) одного и того же ТС!";
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры
