#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область СозданиеНаОсновании

// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании, НастройкиФормы) Экспорт
	
	Документы.пкЗаправочнаяВедомость.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	СозданиеНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСоздатьНаОсновании);
	
КонецПроцедуры

// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
 
	//Если ПравоДоступа("Добавление", Метаданные.Документы.пкЗаправочнаяВедомость) Тогда
	//	КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
	//	КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.пкЗаправочнаяВедомость.ПолноеИмя();
	//	КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.пкЗаправочнаяВедомость);
	//	КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
	//	
	//	Возврат КомандаСоздатьНаОсновании;
	//КонецЕсли;

	Возврат Неопределено;
КонецФункции

#КонецОбласти 
#КонецОбласти 

// Определяет реквизиты выбранного документа
//
// Параметры:
//	ДокументСсылка - Ссылка на документа
//
// Возвращаемое значение:
//	Структура - реквизиты выбранного документа
//
Функция РеквизитыДокумента(ДокументСсылка) Экспорт
	
	СтруктураРеквизитов = Новый Структура();
	
	Возврат СтруктураРеквизитов;

КонецФункции

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		Если ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь() Тогда
			//СтандартнаяОбработка = Ложь;
			//ВыбраннаяФорма = "ФормаДокументаСамообслуживание";
		КонецЕсли;
	ИначеЕсли ВидФормы = "ФормаСписка" Тогда
		Если ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь() Тогда
			//СтандартнаяОбработка = Ложь;
			//ВыбраннаяФорма = "ФормаСпискаСамообслуживание";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблица_пкРасходыПоЛогистике(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблица_уатВыработкаТС(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблица_уатОстаткиГСМнаТС(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблица_уатРасходГСМнаТС(Запрос, ТекстыЗапроса, Регистры);
	ПроведениеСерверУТ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.Дата КАК Период,
	|	ДанныеДокумента.ФормироватьДвиженияПоТС,
	|	ДанныеДокумента.ПериодРегистрации
	|ИЗ
	|	Документ.пкЗаправочнаяВедомость КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",						Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация",				Реквизиты.Организация);
	Запрос.УстановитьПараметр("Подразделение",				Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("ФормироватьДвиженияПоТС",	Реквизиты.ФормироватьДвиженияПоТС);
	Запрос.УстановитьПараметр("ПериодРегистрации",			КонецМесяца(Реквизиты.ПериодРегистрации));
	
КонецПроцедуры

Функция ТекстЗапросаТаблица_пкРасходыПоЛогистике(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "пкРасходыПоЛогистике";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&ПериодРегистрации КАК Период,
	|	&Подразделение КАК Регион,
	|	ЗНАЧЕНИЕ(Перечисление.пкСпособыПеревозки.Собственные) КАК СпособПеревозки,
	|	ЗНАЧЕНИЕ(Справочник.пкСтатьиДоходовРасходовЛогистика.Fuel) КАК СтатьяАктиваПассива,
	|	РасходыПоТранспорту.Транспорт КАК ТранспортноеСредство,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СтоимостьГСМ.РасходФакт, 0) = 0
	|			ТОГДА РасходыПоТранспорту.РасходФакт * ЕСТЬNULL(СтоимостьГСМ.СуммаБезНДС, 0)
	|		ИНАЧЕ РасходыПоТранспорту.РасходФакт * ЕСТЬNULL(СтоимостьГСМ.СуммаБезНДС, 0) / ЕСТЬNULL(СтоимостьГСМ.РасходФакт, 1)
	|	КОНЕЦ КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		пкЗаправочнаяВедомостьГСМ.Автомобиль КАК Транспорт,
	|		пкЗаправочнаяВедомостьГСМ.МаркаТоплива КАК МаркаТоплива,
	|		СУММА(пкЗаправочнаяВедомостьГСМ.РасходФакт) КАК РасходФакт
	|	ИЗ
	|		Документ.пкЗаправочнаяВедомость.ГСМ КАК пкЗаправочнаяВедомостьГСМ
	|	ГДЕ
	|		пкЗаправочнаяВедомостьГСМ.Ссылка = &Ссылка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		пкЗаправочнаяВедомостьГСМ.Автомобиль,
	|		пкЗаправочнаяВедомостьГСМ.МаркаТоплива) КАК РасходыПоТранспорту
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			пкЗаправочнаяВедомостьСтоимостьГСМ.МаркаТоплива КАК МаркаТоплива,
	|			СУММА(пкЗаправочнаяВедомостьСтоимостьГСМ.СуммаСНДС - пкЗаправочнаяВедомостьСтоимостьГСМ.СуммаНДС) КАК СуммаБезНДС,
	|			СУММА(пкЗаправочнаяВедомостьСтоимостьГСМ.РасходФакт) КАК РасходФакт
	|		ИЗ
	|			Документ.пкЗаправочнаяВедомость.СтоимостьГСМ КАК пкЗаправочнаяВедомостьСтоимостьГСМ
	|		ГДЕ
	|			пкЗаправочнаяВедомостьСтоимостьГСМ.Ссылка = &Ссылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			пкЗаправочнаяВедомостьСтоимостьГСМ.МаркаТоплива) КАК СтоимостьГСМ
	|		ПО РасходыПоТранспорту.МаркаТоплива = СтоимостьГСМ.МаркаТоплива";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура Отразить_пкРасходыПоЛогистике(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицапкРасходыПоЛогистике;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.пкРасходыПоЛогистике.Записывать = Истина;
	Движения.пкРасходыПоЛогистике.Загрузить(Таблица);
	
КонецПроцедуры

Функция ТекстЗапросаТаблица_уатВыработкаТС(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "уатВыработкаТС";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&ПериодРегистрации КАК Период,
	|	&Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПробегОбщий) КАК ПараметрВыработки,
	|	пкЗаправочнаяВедомостьГСМ.Автомобиль КАК ТС,
	|	пкЗаправочнаяВедомостьГСМ.Колонна КАК Колонна,
	|	СУММА(пкЗаправочнаяВедомостьГСМ.Пробег) КАК Количество
	|ИЗ
	|	Документ.пкЗаправочнаяВедомость.ГСМ КАК пкЗаправочнаяВедомостьГСМ
	|ГДЕ
	|	пкЗаправочнаяВедомостьГСМ.Ссылка = &Ссылка
	|	И пкЗаправочнаяВедомостьГСМ.Пробег <> 0
	|	И НЕ пкЗаправочнаяВедомостьГСМ.Автомобиль.пкНеУчитыватьВыработку
	|	И &ФормироватьДвиженияПоТС
	|
	|СГРУППИРОВАТЬ ПО
	|	пкЗаправочнаяВедомостьГСМ.Автомобиль,
	|	пкЗаправочнаяВедомостьГСМ.Колонна";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура Отразить_уатВыработкаТС(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицауатВыработкаТС;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.уатВыработкаТС.Записывать = Истина;
	Движения.уатВыработкаТС.Загрузить(Таблица);
	
КонецПроцедуры

Функция ТекстЗапросаТаблица_уатОстаткиГСМнаТС(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "уатОстаткиГСМнаТС";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&ПериодРегистрации КАК Период,
	|	РасходыПоТранспорту.МаркаТоплива КАК ГСМ,
	|	РасходыПоТранспорту.Колонна КАК Колонна,
	|	РасходыПоТранспорту.Транспорт КАК ТС,
	|	РасходыПоТранспорту.Заправлено КАК Количество,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СтоимостьГСМ.РасходФакт, 0) = 0
	|			ТОГДА РасходыПоТранспорту.Заправлено * ЕСТЬNULL(СтоимостьГСМ.СуммаБезНДС, 0)
	|		ИНАЧЕ РасходыПоТранспорту.Заправлено * ЕСТЬNULL(СтоимостьГСМ.СуммаБезНДС, 0) / ЕСТЬNULL(СтоимостьГСМ.РасходФакт, 1)
	|	КОНЕЦ КАК Стоимость,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СтоимостьГСМ.РасходФакт, 0) = 0
	|			ТОГДА РасходыПоТранспорту.Заправлено * ЕСТЬNULL(СтоимостьГСМ.СуммаБезНДС, 0)
	|		ИНАЧЕ РасходыПоТранспорту.Заправлено * ЕСТЬNULL(СтоимостьГСМ.СуммаБезНДС, 0) / ЕСТЬNULL(СтоимостьГСМ.РасходФакт, 1)
	|	КОНЕЦ КАК СтоимостьУпр
	|ИЗ
	|	(ВЫБРАТЬ
	|		пкЗаправочнаяВедомостьГСМ.Автомобиль КАК Транспорт,
	|		пкЗаправочнаяВедомостьГСМ.МаркаТоплива КАК МаркаТоплива,
	|		СУММА(пкЗаправочнаяВедомостьГСМ.ЗаправленоКарта 
//++ Рарус Лимаренко 02.11.2017
	|   + пкЗаправочнаяВедомостьГСМ.ЗаправленоПерваяКарта + пкЗаправочнаяВедомостьГСМ.ЗаправленоВтораяКарта 
	|   + пкЗаправочнаяВедомостьГСМ.ЗаправленоТретьяКарта	
//-- Рарус Лимаренко 02.11.2017	
	|   + пкЗаправочнаяВедомостьГСМ.ЗаправленоНал) КАК Заправлено,
	|		пкЗаправочнаяВедомостьГСМ.Колонна КАК Колонна
	|	ИЗ
	|		Документ.пкЗаправочнаяВедомость.ГСМ КАК пкЗаправочнаяВедомостьГСМ
	|	ГДЕ
	|		пкЗаправочнаяВедомостьГСМ.Ссылка = &Ссылка
	|		И НЕ пкЗаправочнаяВедомостьГСМ.Автомобиль.пкНеУчитыватьВыработку
	|		И &ФормироватьДвиженияПоТС
	|	
	|	СГРУППИРОВАТЬ ПО
	|		пкЗаправочнаяВедомостьГСМ.Автомобиль,
	|		пкЗаправочнаяВедомостьГСМ.МаркаТоплива,
	|		пкЗаправочнаяВедомостьГСМ.Колонна) КАК РасходыПоТранспорту
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			пкЗаправочнаяВедомостьСтоимостьГСМ.МаркаТоплива КАК МаркаТоплива,
	|			СУММА(пкЗаправочнаяВедомостьСтоимостьГСМ.СуммаСНДС - пкЗаправочнаяВедомостьСтоимостьГСМ.СуммаНДС) КАК СуммаБезНДС,
	|			СУММА(пкЗаправочнаяВедомостьСтоимостьГСМ.РасходФакт) КАК РасходФакт
	|		ИЗ
	|			Документ.пкЗаправочнаяВедомость.СтоимостьГСМ КАК пкЗаправочнаяВедомостьСтоимостьГСМ
	|		ГДЕ
	|			пкЗаправочнаяВедомостьСтоимостьГСМ.Ссылка = &Ссылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			пкЗаправочнаяВедомостьСтоимостьГСМ.МаркаТоплива) КАК СтоимостьГСМ
	|		ПО РасходыПоТранспорту.МаркаТоплива = СтоимостьГСМ.МаркаТоплива
	|ГДЕ
	|	(РасходыПоТранспорту.Заправлено <> 0
	|			ИЛИ ВЫБОР
	|				КОГДА ЕСТЬNULL(СтоимостьГСМ.РасходФакт, 0) = 0
	|					ТОГДА РасходыПоТранспорту.Заправлено * ЕСТЬNULL(СтоимостьГСМ.СуммаБезНДС, 0)
	|				ИНАЧЕ РасходыПоТранспорту.Заправлено * ЕСТЬNULL(СтоимостьГСМ.СуммаБезНДС, 0) / ЕСТЬNULL(СтоимостьГСМ.РасходФакт, 1)
	|			КОНЕЦ <> 0
	|			ИЛИ ВЫБОР
	|				КОГДА ЕСТЬNULL(СтоимостьГСМ.РасходФакт, 0) = 0
	|					ТОГДА РасходыПоТранспорту.Заправлено * ЕСТЬNULL(СтоимостьГСМ.СуммаБезНДС, 0)
	|				ИНАЧЕ РасходыПоТранспорту.Заправлено * ЕСТЬNULL(СтоимостьГСМ.СуммаБезНДС, 0) / ЕСТЬNULL(СтоимостьГСМ.РасходФакт, 1)
	|			КОНЕЦ <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	&ПериодРегистрации,
	|	РасходыПоТранспорту.МаркаТоплива,
	|	NULL,
	|	РасходыПоТранспорту.Транспорт,
	|	РасходыПоТранспорту.РасходФакт,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СтоимостьГСМ.РасходФакт, 0) = 0
	|			ТОГДА РасходыПоТранспорту.РасходФакт * ЕСТЬNULL(СтоимостьГСМ.СуммаБезНДС, 0)
	|		ИНАЧЕ РасходыПоТранспорту.РасходФакт * ЕСТЬNULL(СтоимостьГСМ.СуммаБезНДС, 0) / ЕСТЬNULL(СтоимостьГСМ.РасходФакт, 1)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СтоимостьГСМ.РасходФакт, 0) = 0
	|			ТОГДА РасходыПоТранспорту.РасходФакт * ЕСТЬNULL(СтоимостьГСМ.СуммаБезНДС, 0)
	|		ИНАЧЕ РасходыПоТранспорту.РасходФакт * ЕСТЬNULL(СтоимостьГСМ.СуммаБезНДС, 0) / ЕСТЬNULL(СтоимостьГСМ.РасходФакт, 1)
	|	КОНЕЦ
	|ИЗ
	|	(ВЫБРАТЬ
	|		пкЗаправочнаяВедомостьГСМ.Автомобиль КАК Транспорт,
	|		пкЗаправочнаяВедомостьГСМ.МаркаТоплива КАК МаркаТоплива,
	|		СУММА(пкЗаправочнаяВедомостьГСМ.РасходФакт) КАК РасходФакт
	|	ИЗ
	|		Документ.пкЗаправочнаяВедомость.ГСМ КАК пкЗаправочнаяВедомостьГСМ
	|	ГДЕ
	|		пкЗаправочнаяВедомостьГСМ.Ссылка = &Ссылка
	|		И НЕ пкЗаправочнаяВедомостьГСМ.Автомобиль.пкНеУчитыватьВыработку
	|		И &ФормироватьДвиженияПоТС
	|	
	|	СГРУППИРОВАТЬ ПО
	|		пкЗаправочнаяВедомостьГСМ.Автомобиль,
	|		пкЗаправочнаяВедомостьГСМ.МаркаТоплива) КАК РасходыПоТранспорту
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			пкЗаправочнаяВедомостьСтоимостьГСМ.МаркаТоплива КАК МаркаТоплива,
	|			СУММА(пкЗаправочнаяВедомостьСтоимостьГСМ.СуммаСНДС - пкЗаправочнаяВедомостьСтоимостьГСМ.СуммаНДС) КАК СуммаБезНДС,
	|			СУММА(пкЗаправочнаяВедомостьСтоимостьГСМ.РасходФакт) КАК РасходФакт
	|		ИЗ
	|			Документ.пкЗаправочнаяВедомость.СтоимостьГСМ КАК пкЗаправочнаяВедомостьСтоимостьГСМ
	|		ГДЕ
	|			пкЗаправочнаяВедомостьСтоимостьГСМ.Ссылка = &Ссылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			пкЗаправочнаяВедомостьСтоимостьГСМ.МаркаТоплива) КАК СтоимостьГСМ
	|		ПО РасходыПоТранспорту.МаркаТоплива = СтоимостьГСМ.МаркаТоплива
	|ГДЕ
	|	(РасходыПоТранспорту.РасходФакт <> 0
	|			ИЛИ ВЫБОР
	|				КОГДА ЕСТЬNULL(СтоимостьГСМ.РасходФакт, 0) = 0
	|					ТОГДА РасходыПоТранспорту.РасходФакт * ЕСТЬNULL(СтоимостьГСМ.СуммаБезНДС, 0)
	|				ИНАЧЕ РасходыПоТранспорту.РасходФакт * ЕСТЬNULL(СтоимостьГСМ.СуммаБезНДС, 0) / ЕСТЬNULL(СтоимостьГСМ.РасходФакт, 1)
	|			КОНЕЦ <> 0
	|			ИЛИ ВЫБОР
	|				КОГДА ЕСТЬNULL(СтоимостьГСМ.РасходФакт, 0) = 0
	|					ТОГДА РасходыПоТранспорту.РасходФакт * ЕСТЬNULL(СтоимостьГСМ.СуммаБезНДС, 0)
	|				ИНАЧЕ РасходыПоТранспорту.РасходФакт * ЕСТЬNULL(СтоимостьГСМ.СуммаБезНДС, 0) / ЕСТЬNULL(СтоимостьГСМ.РасходФакт, 1)
	|			КОНЕЦ <> 0)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура Отразить_уатОстаткиГСМнаТС(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицауатОстаткиГСМнаТС;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.уатОстаткиГСМнаТС.Записывать = Истина;
	Движения.уатОстаткиГСМнаТС.Загрузить(Таблица);
	
КонецПроцедуры

Функция ТекстЗапросаТаблица_уатРасходГСМнаТС(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "уатРасходГСМнаТС";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&ПериодРегистрации КАК Период,
	|	ТекущиеКадровыеДанныеСотрудников.Сотрудник КАК Водитель,
	|	пкЗаправочнаяВедомостьГСМ.МаркаТоплива КАК ГСМ,
	|	&Организация КАК Организация,
	|	пкЗаправочнаяВедомостьГСМ.Колонна КАК Колонна,
	|	пкЗаправочнаяВедомостьГСМ.Автомобиль КАК ТС,
	|	СУММА(пкЗаправочнаяВедомостьГСМ.РасходНорма) КАК РасходПоНорме,
	|	СУММА(пкЗаправочнаяВедомостьГСМ.РасходФакт) КАК РасходПоФакту
	|ИЗ
	|	Документ.пкЗаправочнаяВедомость.ГСМ КАК пкЗаправочнаяВедомостьГСМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|		ПО пкЗаправочнаяВедомостьГСМ.Водитель = ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо
	|			И (&Организация = ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация)
	|ГДЕ
	|	пкЗаправочнаяВедомостьГСМ.Ссылка = &Ссылка
	|	И НЕ пкЗаправочнаяВедомостьГСМ.Автомобиль.пкНеУчитыватьВыработку
	|	И &ФормироватьДвиженияПоТС
	|	И НЕ ТекущиеКадровыеДанныеСотрудников.Сотрудник ЕСТЬ NULL
	|	И (пкЗаправочнаяВедомостьГСМ.РасходНорма <> 0
	|			ИЛИ пкЗаправочнаяВедомостьГСМ.РасходФакт <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	пкЗаправочнаяВедомостьГСМ.Автомобиль,
	|	пкЗаправочнаяВедомостьГСМ.МаркаТоплива,
	|	ТекущиеКадровыеДанныеСотрудников.Сотрудник,
	|	пкЗаправочнаяВедомостьГСМ.Колонна";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура Отразить_уатРасходГСМнаТС(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицауатРасходГСМнаТС;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.уатРасходГСМнаТС.Записывать = Истина;
	Движения.уатРасходГСМнаТС.Загрузить(Таблица);
	
КонецПроцедуры

#КонецОбласти

#Область Отчеты

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, НастройкиФормы) Экспорт

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти 

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если ПравоДоступа("Изменение", Метаданные.Документы.пкЗаправочнаяВедомость) Тогда
		// Заправочная Ведомость
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "пкЗаправочнаяВедомость";
		КомандаПечати.Представление = НСтр("ru = 'Заправочная ведомость'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КонецЕсли;

КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КомплектДокументов") Тогда
		
		КоллекцияПечатныхФорм.Очистить();
		СформироватьКомплектПечатныхФорм(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "пкЗаправочнаяВедомость") Тогда
		
		СтруктураТипов = Новый Соответствие;
		СтруктураТипов.Вставить("Документ.пкЗаправочнаяВедомость", МассивОбъектов);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"пкЗаправочнаяВедомость",
			НСтр("ru = 'Заправочная ведомость'"),
			СформироватьПечатнуюФормуЗаправочнаяВедомость(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

Функция СформироватьКомплектПечатныхФорм(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати) Экспорт
	
	Перем АдресКомплектаПечатныхФорм;
	
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура") И ПараметрыПечати.Свойство("АдресКомплектаПечатныхФорм", АдресКомплектаПечатныхФорм) Тогда
		
		КомплектПечатныхФорм = ПолучитьИзВременногоХранилища(АдресКомплектаПечатныхФорм);
		
	Иначе
		
		КомплектПечатныхФорм = РегистрыСведений.НастройкиПечатиОбъектов.КомплектПечатныхФорм(
			Метаданные.Документы.пкЗаправочнаяВедомость.ПолноеИмя(),
			МассивОбъектов, Неопределено);
		
	КонецЕсли;
		
	Если КомплектПечатныхФорм = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураТипов = Новый Соответствие;
	СтруктураТипов.Вставить("Документ.пкЗаправочнаяВедомость", МассивОбъектов);
	
	//Заправочная ведомость
	ИмяМакета = "пкЗаправочнаяВедомость";
	ТекущийКомплект = КомплектПечатныхФорм.Скопировать(Новый Структура("Имя,Печатать,",ИмяМакета,Истина));
	Если ТекущийКомплект.Количество() > 0 Тогда
		Если ТекущийКомплект.Колонки.Найти("Ссылка") <> Неопределено И ЗначениеЗаполнено(ТекущийКомплект[0].Ссылка) Тогда
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекциюОдинЭкземпляр(КоллекцияПечатныхФорм, ИмяМакета);
			ТаблицаСсылок = ТекущийКомплект.Скопировать(,"Ссылка");
			ТаблицаСсылок.Свернуть("Ссылка");
			ТекущаяСтруктураТипов = Новый Соответствие;
			ТекущаяСтруктураТипов.Вставить("Документ.пкЗаправочнаяВедомость", ТаблицаСсылок.ВыгрузитьКолонку("Ссылка"));
		Иначе
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, ТекущийКомплект[0]);
			ТекущаяСтруктураТипов = СтруктураТипов;
		КонецЕсли;
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			ИмяМакета,
			ТекущийКомплект[0].Представление,
			СформироватьПечатнуюФормуЗаправочнаяВедомость(ТекущаяСтруктураТипов, ОбъектыПечати, Новый Структура, ТекущийКомплект));

	КонецЕсли;
	
	РегистрыСведений.НастройкиПечатиОбъектов.СформироватьКомплектВнешнихПечатныхФорм(
		"Документ.пкЗаправочнаяВедомость",
		МассивОбъектов,
		ПараметрыПечати,
		КоллекцияПечатныхФорм,
		ОбъектыПечати);
	
КонецФункции

Функция КомплектПечатныхФорм() Экспорт
	
	КомплектПечатныхФорм = РегистрыСведений.НастройкиПечатиОбъектов.ПодготовитьКомплектПечатныхФорм();
	
	//Заправочная ведомость
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "пкЗаправочнаяВедомость", НСтр("ru = 'Заправочная ведомость'"), 0);
	
	Возврат КомплектПечатныхФорм;
	
КонецФункции

Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
КонецПроцедуры

Функция ДоступныеДляШаблоновПечатныеФормы() Экспорт

	МассивДоступныхПечатныхФорм = Новый Массив;
	ШаблоныСообщенийСервер.ДобавитьВМассивПечатныеФормыСчета(МассивДоступныхПечатныхФорм);
	
	Возврат МассивДоступныхПечатныхФорм

КонецФункции

#Область Печать_пкЗаправочнаяВедомость

Функция СформироватьПечатнуюФормуЗаправочнаяВедомость(СтруктураТипов, ОбъектыПечати, ПараметрыПечати, КомплектыПечати = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_пкЗаправочнаяВедомость";
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
			
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ДанныеДляПечати = ПолучитьДанныеДляПечатнойФормыЗаправочнаяВедомость(
			СтруктураОбъектов.Значение);
		
		// Сформированный тбаличный документ
		ЗаполнитьТабличныйДокументЗаправочнаяВедомость(
			ТабличныйДокумент,
			ДанныеДляПечати,
			ОбъектыПечати,
			КомплектыПечати,
			"Ведомость");
			
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыЗаправочнаяВедомость(МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	пкЗаправочнаяВедомость.Ссылка КАК Ссылка,
	|	пкЗаправочнаяВедомость.Дата КАК Дата,
	|	пкЗаправочнаяВедомость.Номер КАК Номер,
	|	пкЗаправочнаяВедомость.Организация КАК Организация,
	|	пкЗаправочнаяВедомость.Подразделение КАК Подразделение,
	|	пкЗаправочнаяВедомость.ВидОперации КАК ВидОперации,
	|	пкЗаправочнаяВедомость.ПериодРегистрации КАК ПериодРегистрации,
	|	пкЗаправочнаяВедомость.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	пкЗаправочнаяВедомость.Ответственный КАК Ответственный
	|ИЗ
	|	Документ.пкЗаправочнаяВедомость КАК пкЗаправочнаяВедомость
	|ГДЕ
	|	пкЗаправочнаяВедомость.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	пкЗаправочнаяВедомость.Ссылка,
	|	пкЗаправочнаяВедомость.Дата,
	|	пкЗаправочнаяВедомость.Ответственный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	пкЗаправочнаяВедомостьГСМ.Ссылка КАК Ссылка,
	|	пкЗаправочнаяВедомостьГСМ.НомерСтроки КАК НомерСтроки,
	|	пкЗаправочнаяВедомостьГСМ.Автомобиль КАК Автомобиль,
	|	пкЗаправочнаяВедомостьГСМ.Колонна КАК Колонна,
	|	пкЗаправочнаяВедомостьГСМ.Водитель КАК Водитель,
	|	пкЗаправочнаяВедомостьГСМ.ГосНомер КАК ГосНомер,
	|	пкЗаправочнаяВедомостьГСМ.СпидометрНаНачало КАК СпидометрНаНачало,
	|	пкЗаправочнаяВедомостьГСМ.СпидометрНаКонец КАК СпидометрНаКонец,
	|	пкЗаправочнаяВедомостьГСМ.Пробег КАК Пробег,
	|	пкЗаправочнаяВедомостьГСМ.СМЧНаНачало КАК СМЧНаНачало,
	|	пкЗаправочнаяВедомостьГСМ.СМЧНаКонец КАК СМЧНаКонец,
	|	пкЗаправочнаяВедомостьГСМ.СМЧПробег КАК СМЧПробег,
	|	пкЗаправочнаяВедомостьГСМ.МаркаТоплива КАК МаркаТоплива,
	|	пкЗаправочнаяВедомостьГСМ.НормаРасхода КАК НормаРасхода,
	|	пкЗаправочнаяВедомостьГСМ.РасходНормаСМЧ КАК РасходНормаСМЧ,
	|	пкЗаправочнаяВедомостьГСМ.ВБакеНаНачало КАК ВБакеНаНачало,
	|	пкЗаправочнаяВедомостьГСМ.ВБакеНаКонец КАК ВБакеНаКонец,
	|	пкЗаправочнаяВедомостьГСМ.ЗаправленоКарта
//++ Рарус Лимаренко 02.11.2017
	|   + пкЗаправочнаяВедомостьГСМ.ЗаправленоПерваяКарта + пкЗаправочнаяВедомостьГСМ.ЗаправленоВтораяКарта 
	|   + пкЗаправочнаяВедомостьГСМ.ЗаправленоТретьяКарта	
//-- Рарус Лимаренко 02.11.2017	
	|КАК ЗаправленоКарта,
	|	пкЗаправочнаяВедомостьГСМ.НомерТопливнойКарты КАК НомерТопливнойКарты,
//++ Рарус Лимаренко 02.11.2017
	|   пкЗаправочнаяВедомостьГСМ.НомерПервойТопливнойКарты КАК НомерПервойТопливнойКарты,
	|   пкЗаправочнаяВедомостьГСМ.НомерВторойТопливнойКарты КАК НомерВторойТопливнойКарты,
	|   пкЗаправочнаяВедомостьГСМ.НомерТретьейТопливнойКарты КАК НомерТретьейТопливнойКарты,
//-- Рарус Лимаренко 02.11.2017  
	|	пкЗаправочнаяВедомостьГСМ.ЗаправленоНал КАК ЗаправленоНал,
	|	пкЗаправочнаяВедомостьГСМ.РасходНорма КАК РасходНорма,
	|	пкЗаправочнаяВедомостьГСМ.РасходФакт КАК РасходФакт,
	|	пкЗаправочнаяВедомостьГСМ.РасходДопОборудование КАК РасходДопОборудование
	|ИЗ
	|	Документ.пкЗаправочнаяВедомость.ГСМ КАК пкЗаправочнаяВедомостьГСМ
	|ГДЕ
	|	пкЗаправочнаяВедомостьГСМ.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	пкЗаправочнаяВедомостьГСМ.Ссылка,
	|	пкЗаправочнаяВедомостьГСМ.НомерСтроки,
	|	пкЗаправочнаяВедомостьГСМ.Автомобиль,
	|	пкЗаправочнаяВедомостьГСМ.Колонна,
	|	пкЗаправочнаяВедомостьГСМ.Водитель,
	|	пкЗаправочнаяВедомостьГСМ.ГосНомер,
	|	пкЗаправочнаяВедомостьГСМ.СпидометрНаНачало,
	|	пкЗаправочнаяВедомостьГСМ.СпидометрНаКонец,
	|	пкЗаправочнаяВедомостьГСМ.Пробег,
	|	пкЗаправочнаяВедомостьГСМ.СМЧНаНачало,
	|	пкЗаправочнаяВедомостьГСМ.СМЧНаКонец,
	|	пкЗаправочнаяВедомостьГСМ.СМЧПробег,
	|	пкЗаправочнаяВедомостьГСМ.МаркаТоплива,
	|	пкЗаправочнаяВедомостьГСМ.НормаРасхода,
	|	пкЗаправочнаяВедомостьГСМ.РасходНормаСМЧ,
	|	пкЗаправочнаяВедомостьГСМ.ВБакеНаНачало,
	|	пкЗаправочнаяВедомостьГСМ.ВБакеНаКонец,
	|	пкЗаправочнаяВедомостьГСМ.ЗаправленоКарта,
	|	пкЗаправочнаяВедомостьГСМ.НомерТопливнойКарты,
//++ Рарус Лимаренко 02.11.2017
	|   пкЗаправочнаяВедомостьГСМ.НомерПервойТопливнойКарты,
	|   пкЗаправочнаяВедомостьГСМ.НомерВторойТопливнойКарты,
	|   пкЗаправочнаяВедомостьГСМ.НомерТретьейТопливнойКарты,
//-- Рарус Лимаренко 02.11.2017
	|	пкЗаправочнаяВедомостьГСМ.ЗаправленоНал,
	|	пкЗаправочнаяВедомостьГСМ.РасходНорма,
//++ Рарус Лимаренко 02.11.2017
	|   пкЗаправочнаяВедомостьГСМ.ЗаправленоПерваяКарта,
	|   пкЗаправочнаяВедомостьГСМ.ЗаправленоВтораяКарта, 
	|   пкЗаправочнаяВедомостьГСМ.ЗаправленоТретьяКарта,	
//-- Рарус Лимаренко 02.11.2017	
	|	пкЗаправочнаяВедомостьГСМ.РасходФакт,
	|	пкЗаправочнаяВедомостьГСМ.РасходДопОборудование";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке", ПакетРезультатовЗапроса[0]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти", ПакетРезультатовЗапроса[1]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументЗаправочнаяВедомость(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, КомплектыПечати, ИмяМакета)
	
	ДанныеПечати		= ДанныеДляПечати.РезультатПоШапке.Выбрать();
	СтрокиТЧ			= ДанныеДляПечати.РезультатПоТабличнойЧасти.Выгрузить();
	
	ШаблонОшибкиСтроки	= "";
	
	ПервыйДокумент		= Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Макет = ПолучитьМакет("Ведомость");
		
		// Для печати комплектов
		Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено Тогда
			
			КомплектПечатиПоСсылке = КомплектыПечати.Найти(ДанныеПечати.Ссылка, "Ссылка");
			
			Если КомплектПечатиПоСсылке = Неопределено Тогда
				КомплектПечатиПоСсылке = КомплектыПечати[0];
			КонецЕсли;
			
			Если КомплектПечатиПоСсылке.Экземпляров = 0 Тогда
				Продолжить
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
#Область ОбластиМакета
		
		ОбластьШапка				= Макет.ПолучитьОбласть("Шапка");
		ОбластьЗаголовокТаблицы		= Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ОбластьСтрока				= Макет.ПолучитьОбласть("Строка");
		ОбластьПодвалЗаголовок		= Макет.ПолучитьОбласть("ПодвалЗаголовок");
		ОбластьПодвалСтрокаТопливо	= Макет.ПолучитьОбласть("ПодвалСтрокаТопливо");
		ОбластьПодвалСтрокаКолонна	= Макет.ПолучитьОбласть("ПодвалСтрокаКолонна");
		
#КонецОбласти
		
#Область ВыводШапки
		
		// ШАПКА - ЗАГОЛОВОК
		
		//УстановитьПараметр(ОбластьШапка, "Организация", ДанныеПечати.Организация);
		УстановитьПараметр(ОбластьШапка, "Дата", Формат(ДанныеПечати.Дата, "ДЛФ=Д"));
		УстановитьПараметр(ОбластьШапка, "ПериодРегистрации", Формат(ДанныеПечати.ПериодРегистрации, "ДФ='MMMM yyyy'"));
		УстановитьПараметр(ОбластьШапка, "Регион", СокрЛП(ДанныеПечати.Подразделение));
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
#КонецОбласти

		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		
		ТаблицаСтрок = СтрокиТЧ.НайтиСтроки(СтруктураПоиска);
		
		Если ТаблицаСтрок.Количество() = 0 Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибкиСтроки,
				ДанныеПечати.Ссылка,
				НСтр("ru='Нет строк для приемки или возврата'"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДанныеПечати.Ссылка);
			Продолжить;
			
		КонецЕсли;
		
#Область ВыводЗаголовкаТаблицы

		ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
		
#КонецОбласти
		
#Область ВыводТаблицыТовары

		НомСтраницы = 1;
		КолСтрок    = 0;

        Для Каждого СтрокаТовары Из ТаблицаСтрок Цикл
			
			УстановитьПараметр(ОбластьСтрока, "Номер", 				СтрокаТовары.НомерСтроки);
			УстановитьПараметр(ОбластьСтрока, "ГосНомер", 			СтрокаТовары.Автомобиль.Код);
			УстановитьПараметр(ОбластьСтрока, "Автомобиль", 		СтрокаТовары.Автомобиль.уатМодель);
			УстановитьПараметр(ОбластьСтрока, "ПоказСпидНачало",	СтрокаТовары.СпидометрНаНачало);
			УстановитьПараметр(ОбластьСтрока, "ПоказСпидКонец", 	СтрокаТовары.СпидометрНаКонец);
			УстановитьПараметр(ОбластьСтрока, "Пробег", 			СтрокаТовары.Пробег);
			УстановитьПараметр(ОбластьСтрока, "МаркаТопл", 			СтрокаТовары.МаркаТоплива);
			УстановитьПараметр(ОбластьСтрока, "НормаРасх", 			СтрокаТовары.НормаРасхода);
			УстановитьПараметр(ОбластьСтрока, "НачМес", 			СтрокаТовары.ВБакеНаНачало);
			УстановитьПараметр(ОбластьСтрока, "КонМес", 			СтрокаТовары.ВБакеНаКонец);
			УстановитьПараметр(ОбластьСтрока, "Безнал", 			СтрокаТовары.ЗаправленоКарта);
			УстановитьПараметр(ОбластьСтрока, "Топливо", 			СтрокаТовары.РасходФакт);
			УстановитьПараметр(ОбластьСтрока, "Нал", 				СтрокаТовары.ЗаправленоНал);
			УстановитьПараметр(ОбластьСтрока, "НомерКарты", 		СтрокаТовары.НомерТопливнойКарты +" "+ 
			СокрЛП(Строка(СтрокаТовары.НомерПервойТопливнойКарты))+" "+СокрЛП(Строка(СтрокаТовары.НомерВторойТопливнойКарты))+" "+ СокрЛП(Строка(СтрокаТовары.НомерТретьейТопливнойКарты)));
			Если НомСтраницы = 1 И КолСтрок = 10 Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				КолСтрок  = 1;
				НомСтраницы = 2;
			ИначеЕсли НомСтраницы > 1 И КолСтрок = 16 Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				КолСтрок  = 1;
				НомСтраницы = НомСтраницы + 1;
			Иначе
				КолСтрок  = КолСтрок + 1;	
			КонецЕсли;	
			
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			
		КонецЦикла;
		
#КонецОбласти
		
#Область ВыводПодвала
		
		ТабличныйДокумент.Вывести(ОбластьПодвалЗаголовок);
		
		МаркиТоплива = ДанныеПечати.Ссылка.ГСМ.Выгрузить();
		МаркиТоплива.Свернуть("МаркаТоплива", "");
		
		Колонны = ДанныеПечати.Ссылка.ГСМ.Выгрузить();
		Колонны.Свернуть("Колонна", "");
		
		Для Каждого МаркаТоплива Из МаркиТоплива Цикл
			
			ВБакеНаНачало	= 0;
			ВБакеНаКонец	= 0;
			РасходФакт		= 0;
			Заправлено		= 0;
			ЗаправленоНал	= 0;
			
			Для Каждого СтрокаТовары Из ТаблицаСтрок Цикл
				
				Если МаркаТоплива.МаркаТоплива <> СтрокаТовары.МаркаТоплива Тогда
					Продолжить;
				КонецЕсли;
				
				ВБакеНаНачало	= ВБакеНаНачало + СтрокаТовары.ВБакеНаНачало;
				ВБакеНаКонец	= ВБакеНаКонец + СтрокаТовары.ВБакеНаКонец;
				РасходФакт		= РасходФакт + СтрокаТовары.РасходФакт;
				Заправлено		= Заправлено + СтрокаТовары.ЗаправленоКарта +
//++ Рарус Лимаренко 02.11.2017
				//СтрокаТовары.ЗаправленоПерваяКарта + СтрокаТовары.ЗаправленоВтораяКарта + СтрокаТовары.ЗаправленоТретьяКарта +
//-- Рарус Лимаренко 02.11.2017
				СтрокаТовары.ЗаправленоНал;
				ЗаправленоНал	= ЗаправленоНал + СтрокаТовары.ЗаправленоНал;
				
			КонецЦикла;
		
			УстановитьПараметр(ОбластьПодвалСтрокаТопливо, "Топливо",		МаркаТоплива.МаркаТоплива);
			УстановитьПараметр(ОбластьПодвалСтрокаТопливо, "ВБакеНаНачало",	ВБакеНаНачало);
			УстановитьПараметр(ОбластьПодвалСтрокаТопливо, "ВБакеНаКонец",	ВБакеНаКонец);
			УстановитьПараметр(ОбластьПодвалСтрокаТопливо, "РасходФакт",	РасходФакт);
			УстановитьПараметр(ОбластьПодвалСтрокаТопливо, "Заправлено",	Заправлено);
			УстановитьПараметр(ОбластьПодвалСтрокаТопливо, "ЗаправленоНал",	ЗаправленоНал);
			ТабличныйДокумент.Вывести(ОбластьПодвалСтрокаТопливо);
		
			Для Каждого Колонна Из Колонны Цикл
				
				ВБакеНаНачало	= 0;
				ВБакеНаКонец	= 0;
				РасходФакт		= 0;
				Заправлено		= 0;
				ЗаправленоНал	= 0;
				
				ЕстьКолоннаВТопливе = Ложь;
				
				Для Каждого СтрокаТовары Из ТаблицаСтрок Цикл
					
					Если МаркаТоплива.МаркаТоплива <> СтрокаТовары.МаркаТоплива Тогда
						Продолжить;
					КонецЕсли;
					
					Если Колонна.Колонна <> СтрокаТовары.Колонна Тогда
						Продолжить;
					КонецЕсли;
					
					ВБакеНаНачало	= ВБакеНаНачало + СтрокаТовары.ВБакеНаНачало;
					ВБакеНаКонец	= ВБакеНаКонец + СтрокаТовары.ВБакеНаКонец;
					РасходФакт		= РасходФакт + СтрокаТовары.РасходФакт;
					Заправлено		= Заправлено + СтрокаТовары.ЗаправленоКарта +
//++ Рарус Лимаренко 02.11.2017
					//СтрокаТовары.ЗаправленоПерваяКарта + СтрокаТовары.ЗаправленоВтораяКарта + СтрокаТовары.ЗаправленоТретьяКарта +
//-- Рарус Лимаренко 02.11.2017
					СтрокаТовары.ЗаправленоНал;
					ЗаправленоНал	= ЗаправленоНал + СтрокаТовары.ЗаправленоНал;
					
					ЕстьКолоннаВТопливе = Истина;
				КонецЦикла;
			
				Если ЕстьКолоннаВТопливе Тогда
					УстановитьПараметр(ОбластьПодвалСтрокаКолонна, "Колонна",		?(ЗначениеЗаполнено(Колонна.Колонна), Колонна.Колонна, "Без колонны"));
					УстановитьПараметр(ОбластьПодвалСтрокаКолонна, "ВБакеНаНачало",	ВБакеНаНачало);
					УстановитьПараметр(ОбластьПодвалСтрокаКолонна, "ВБакеНаКонец",	ВБакеНаКонец);
					УстановитьПараметр(ОбластьПодвалСтрокаКолонна, "РасходФакт",	РасходФакт);
					УстановитьПараметр(ОбластьПодвалСтрокаКолонна, "Заправлено",	Заправлено);
					УстановитьПараметр(ОбластьПодвалСтрокаКолонна, "ЗаправленоНал",	ЗаправленоНал);
					ТабличныйДокумент.Вывести(ОбластьПодвалСтрокаКолонна);
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	
#КонецОбласти
		
		// Выведем нужное количество экземпляров (при печати комплектов)
		Если КомплектыПечати <> Неопределено
			И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено
			И КомплектПечатиПоСсылке.Экземпляров > 1 Тогда
			
			ОбластьКопирования = ТабличныйДокумент.ПолучитьОбласть(
				НомерСтрокиНачало,
				,
				ТабличныйДокумент.ВысотаТаблицы);
			
			Для Итератор = 2 По КомплектПечатиПоСсылке.Экземпляров Цикл
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьКопирования);
				
			КонецЦикла;
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПараметр(ОбластьМакета, ИмяПараметра, ЗначениеПараметра)
	ОбластьМакета.Параметры.Заполнить(Новый Структура(ИмяПараметра, ЗначениеПараметра));
КонецПроцедуры

#КонецОбласти
#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Функция ПолноеИмяОбъекта()
	
	Возврат "Документ.пкЗаправочнаяВедомость";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли

