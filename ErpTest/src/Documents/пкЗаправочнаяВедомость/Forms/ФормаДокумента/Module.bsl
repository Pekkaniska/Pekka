&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

/////////////////////////////////////////////////////////////////////////
&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизитаНаСервере(тОбъект, ИмяРевизита)
	
	Возврат тОбъект[ИмяРевизита];
	
КонецФункции

&НаСервере
Функция ПолучитьЗначениеПеречисленияНаСервере(ИмяПеречисления, ИмяЗначения)
	
	Возврат Перечисления[ИмяПеречисления][ИмяЗначения];
	
КонецФункции

/////////////////////////////////////////////////////////////////////////
// Стандартное (почти)

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

#Область ОбработчикиКомандФормы


// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

//++ Рарус Лимаренко 02.11.2017

&НаКлиенте
Процедура ГСМЗаправленоПерваяКартаПриИзменении(Элемент)
	ТекСтрока = Элементы.ГСМ.ТекущиеДанные;
	//ТекСтрока.ВБакеНаКонец	= ТекСтрока.ВБакеНаНачало + ТекСтрока.ЗаправленоКарта + ТекСтрока.ЗаправленоНал;
	ТекСтрока.РасходФакт	= ТекСтрока.ВБакеНаНачало + ТекСтрока.ЗаправленоКарта + 
//++ Рарус Лимаренко 02.11.2017
	 ТекСтрока.ЗаправленоПерваяКарта +  ТекСтрока.ЗаправленоВтораяКарта +  ТекСтрока.ЗаправленоТретьяКарта +
//-- Рарус Лимаренко 02.11.2017
	 ТекСтрока.ЗаправленоНал - ТекСтрока.ВБакеНаКонец;
КонецПроцедуры

&НаКлиенте
Процедура ГСМЗаправленоВтораяКартаПриИзменении(Элемент)
		ТекСтрока = Элементы.ГСМ.ТекущиеДанные;
	//ТекСтрока.ВБакеНаКонец	= ТекСтрока.ВБакеНаНачало + ТекСтрока.ЗаправленоКарта + ТекСтрока.ЗаправленоНал;
	ТекСтрока.РасходФакт	= ТекСтрока.ВБакеНаНачало + ТекСтрока.ЗаправленоКарта + 
//++ Рарус Лимаренко 02.11.2017
	 ТекСтрока.ЗаправленоПерваяКарта +  ТекСтрока.ЗаправленоВтораяКарта +  ТекСтрока.ЗаправленоТретьяКарта +
//-- Рарус Лимаренко 02.11.2017
	 ТекСтрока.ЗаправленоНал - ТекСтрока.ВБакеНаКонец;

КонецПроцедуры

&НаКлиенте
Процедура ГСМЗаправленоТретьяКартаПриИзменении(Элемент)
		ТекСтрока = Элементы.ГСМ.ТекущиеДанные;
	//ТекСтрока.ВБакеНаКонец	= ТекСтрока.ВБакеНаНачало + ТекСтрока.ЗаправленоКарта + ТекСтрока.ЗаправленоНал;
	ТекСтрока.РасходФакт	= ТекСтрока.ВБакеНаНачало + ТекСтрока.ЗаправленоКарта + 
//++ Рарус Лимаренко 02.11.2017
	 ТекСтрока.ЗаправленоПерваяКарта +  ТекСтрока.ЗаправленоВтораяКарта +  ТекСтрока.ЗаправленоТретьяКарта +
//-- Рарус Лимаренко 02.11.2017
	 ТекСтрока.ЗаправленоНал - ТекСтрока.ВБакеНаКонец;

КонецПроцедуры

//-- Рарус Лимаренко 02.11.2017

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработк

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

/////////////////////////////////////////////////////////////////////////
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	РасчитатьДопПоля();
	ОбновлениеОтображения();
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	РасчитатьДопПоля();
	ОбновлениеОтображения();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ЗаданиеНаПеревозку", ПараметрыЗаписи, Объект.Ссылка);

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
	РасчитатьДопПоля();
	ОбновлениеОтображения();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
&НаСервере
Процедура РасчитатьДопПоля()
	
	Для Каждого ТекСтрока Из Объект.ГСМ Цикл
		ТекСтрока.НормаРасходаРасчетная	= ?(ТекСтрока.Пробег = 0, 0, ТекСтрока.РасходФакт * 100 / ТекСтрока.Пробег);
		ТекСтрока.ПерерасходЭкономия	= ТекСтрока.РасходФакт - ТекСтрока.РасходНорма - ТекСтрока.РасходДопОборудование;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСтоимостьГСМ()
	
	тОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.пкЗаправочнаяВедомость"));
	
	Для каждого ТекСтрока Из тОбъект.СтоимостьГСМ Цикл
		ТекСтрока.РасходФакт	= 0;
		ТекСтрока.Заправлено	= 0;
	КонецЦикла;	
	
	ИтогиГСМ = тОбъект.ГСМ.Выгрузить();
	ИтогиГСМ.Свернуть("МаркаТоплива", "РасходФакт, ЗаправленоКарта,
//++ Рарус Лимаренко 02.11.2017
	|ЗаправленоПерваяКарта,ЗаправленоВтораяКарта, ЗаправленоТретьяКарта,
//-- Рарус Лимаренко 02.11.2017
	|ЗаправленоНал");
	Для каждого Строка Из ИтогиГСМ Цикл
		
		Если Не ЗначениеЗаполнено(Строка.МаркаТоплива) Тогда
			Продолжить;
		КонецЕсли;
		
		НайденныеСтоимости = тОбъект.СтоимостьГСМ.НайтиСтроки(Новый Структура("МаркаТоплива", Строка.МаркаТоплива));
		Если НайденныеСтоимости.Количество() = 0 Тогда
			ТекСтрока = тОбъект.СтоимостьГСМ.Добавить();
			ТекСтрока.МаркаТоплива =  Строка.МаркаТоплива;
		Иначе
			ТекСтрока =  НайденныеСтоимости[0];
		КонецЕсли;
		
		ТекСтрока.РасходФакт	= Строка.РасходФакт;
		ТекСтрока.Заправлено	= Строка.ЗаправленоКарта + 
//++ Рарус Лимаренко 02.11.2017
			 Строка.ЗаправленоПерваяКарта +  Строка.ЗаправленоВтораяКарта +  Строка.ЗаправленоТретьяКарта +
//-- Рарус Лимаренко 02.11.2017
		Строка.ЗаправленоНал;
		
		ТекСтрока.Сумма			= ТекСтрока.Цена * ТекСтрока.Заправлено;
		
		ТекПроцентНДС			= ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ТекСтрока.СтавкаНДС);
		ТекСтрока.СуммаНДС		= ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(ТекСтрока.Сумма, ТекПроцентНДС, Объект.ЦенаВключаетНДС);
		
		Если Объект.ЦенаВключаетНДС Тогда
			ТекСтрока.СуммаСНДС	= ТекСтрока.Сумма;
		Иначе
			ТекСтрока.СуммаСНДС	= ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
		КонецЕсли;
	КонецЦикла;	
	
	ЗначениеВДанныеФормы(тОбъект, Объект);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокиИтогов()
	
	СтруктураИтогов = Новый Структура;

	Колонны = Объект.ГСМ.Выгрузить();
	Колонны.Свернуть("Колонна", "");
	
	СтрокиГСМ = Объект.ГСМ.Выгрузить();
	СтрокиГСМ.Свернуть("МаркаТоплива, Колонна", "ВБакеНаНачало, ВБакеНаКонец, РасходФакт, ЗаправленоКарта,
//++ Рарус Лимаренко 02.11.2017
	|ЗаправленоПерваяКарта,ЗаправленоВтораяКарта, ЗаправленоТретьяКарта,
//-- Рарус Лимаренко 02.11.2017
	|ЗаправленоНал");
	
	СтрокаТекста = "В баке на начало итого: ";
	Для Каждого Колонна Из Колонны Цикл
		НайденныеСтроки = СтрокиГСМ.НайтиСтроки(Новый Структура("Колонна", Колонна.Колонна));
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаТекста = СтрокаТекста + ?(ЗначениеЗаполнено(Колонна.Колонна), Строка(Колонна.Колонна), "Без колонны") + " - ";
		КонецЕсли;
		Для Каждого Строка Из НайденныеСтроки Цикл //В баке на начало
			Если ЗначениеЗаполнено(Строка.МаркаТоплива) Тогда
				СтрокаТекста = СтрокаТекста + Строка(Строка.МаркаТоплива) + " = " + Строка(Строка.ВБакеНаНачало) + "  "; 
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	СтруктураИтогов.Вставить("ВБакеНаНачало", СтрокаТекста);

	СтрокаТекста = "В баке на конец итого: ";
	Для Каждого Колонна Из Колонны Цикл
		НайденныеСтроки = СтрокиГСМ.НайтиСтроки(Новый Структура("Колонна", Колонна.Колонна));
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаТекста = СтрокаТекста + ?(ЗначениеЗаполнено(Колонна.Колонна), Строка(Колонна.Колонна), "Без колонны") + " - ";
		КонецЕсли;
		Для Каждого Строка Из НайденныеСтроки Цикл //В баке на конец
			Если ЗначениеЗаполнено(Строка.МаркаТоплива) Тогда
				СтрокаТекста = СтрокаТекста + Строка(Строка.МаркаТоплива) + " = " + Строка(Строка.ВБакеНаКонец) + "  "; 
			КонецЕсли;	 
		КонецЦикла;	 
	КонецЦикла;
	СтруктураИтогов.Вставить("ВБакеНаКонец", СтрокаТекста);

	СтрокаТекста = "Фактический расход итого: ";
	Для Каждого Колонна Из Колонны Цикл
		НайденныеСтроки = СтрокиГСМ.НайтиСтроки(Новый Структура("Колонна", Колонна.Колонна));
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаТекста = СтрокаТекста + ?(ЗначениеЗаполнено(Колонна.Колонна), Строка(Колонна.Колонна), "Без колонны") + " - ";
		КонецЕсли;
		Для Каждого Строка Из НайденныеСтроки Цикл //Расход факт
			Если ЗначениеЗаполнено(Строка.МаркаТоплива) Тогда
				СтрокаТекста = СтрокаТекста + Строка(Строка.МаркаТоплива) + " = " + Строка(Строка.РасходФакт) + "  "; 
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	СтруктураИтогов.Вставить("РасходФакт", СтрокаТекста);

	СтрокаТекста = "Заправлено итого: ";
	Для Каждого Колонна Из Колонны Цикл
		НайденныеСтроки = СтрокиГСМ.НайтиСтроки(Новый Структура("Колонна", Колонна.Колонна));
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаТекста = СтрокаТекста + ?(ЗначениеЗаполнено(Колонна.Колонна), Строка(Колонна.Колонна), "Без колонны") + " - ";
		КонецЕсли;
		Для Каждого Строка Из НайденныеСтроки Цикл //Заправлено карта
			Если ЗначениеЗаполнено(Строка.МаркаТоплива) Тогда
				СтрокаТекста = СтрокаТекста + Строка(Строка.МаркаТоплива) + " = " + Строка(Строка.ЗаправленоКарта +
//++ Рарус Лимаренко 02.11.2017
			 Строка.ЗаправленоПерваяКарта + Строка.ЗаправленоВтораяКарта + Строка.ЗаправленоТретьяКарта +
//-- Рарус Лимаренко 02.11.2017
				 Строка.ЗаправленоНал) + " (в т.ч. за наличку " + Строка(Строка.ЗаправленоНал) + ") "; 
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	СтруктураИтогов.Вставить("Заправлено", СтрокаТекста);

	Возврат СтруктураИтогов;
	
КонецФункции	

&НаСервере
Процедура СформироватьТабИтоги()
	
	ТабИтоги.Очистить();
	Макет = Документы.пкЗаправочнаяВедомость.ПолучитьМакет("Итоги");
	
	МаркиТоплива = Объект.ГСМ.Выгрузить();
	МаркиТоплива.Свернуть("МаркаТоплива", "");
	
	Колонны = Объект.ГСМ.Выгрузить();
	Колонны.Свернуть("Колонна", "");
	
	СтрокиГСМ = Объект.ГСМ.Выгрузить();
	СтрокиГСМ.Свернуть("МаркаТоплива, Колонна", "ВБакеНаНачало, ВБакеНаКонец, РасходФакт, ЗаправленоКарта,
//++ Рарус Лимаренко 02.11.2017
	|ЗаправленоПерваяКарта,ЗаправленоВтораяКарта, ЗаправленоТретьяКарта,
//-- Рарус Лимаренко 02.11.2017
	|ЗаправленоНал");
	
	ОбластьЗаголовокДанные			= Макет.ПолучитьОбласть("Заголовок|Данные");
	ОбластьЗаголовокТопливоКолонна	= Макет.ПолучитьОбласть("Заголовок|ТопливоКолонна");
	ОбластьЗаголовокКолонна			= Макет.ПолучитьОбласть("Заголовок|Колонна");
	ОбластьЗаголовокИтогоТопливо	= Макет.ПолучитьОбласть("Заголовок|ИтогоТопливо");
	ОбластьЗаголовокВсего			= Макет.ПолучитьОбласть("Заголовок|Всего");
	
	ТабИтоги.Вывести(ОбластьЗаголовокДанные);
	Для Каждого МаркаТоплива Из МаркиТоплива Цикл
		ПерваяКолонна		= Истина;
		КоличествоКолонн	= 0;
		Для Каждого Колонна Из Колонны Цикл
			НайденныеСтроки = СтрокиГСМ.НайтиСтроки(Новый Структура("МаркаТоплива, Колонна", МаркаТоплива.МаркаТоплива, Колонна.Колонна));
			Для Каждого Строка Из НайденныеСтроки Цикл
				КоличествоКолонн	= КоличествоКолонн + 1;
				Если ПерваяКолонна Тогда
					ОбластьЗаголовокТопливоКолонна.Параметры.Топливо = МаркаТоплива.МаркаТоплива;
					ОбластьЗаголовокТопливоКолонна.Параметры.Колонна = ?(ЗначениеЗаполнено(Колонна.Колонна), Колонна.Колонна, "Без колонны");
					ТабИтоги.Присоединить(ОбластьЗаголовокТопливоКолонна);
					ПерваяКолонна = Ложь;
				Иначе
					ОбластьЗаголовокКолонна.Параметры.Колонна = ?(ЗначениеЗаполнено(Колонна.Колонна), Колонна.Колонна, "Без колонны");
					ТабИтоги.Присоединить(ОбластьЗаголовокКолонна);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Если КоличествоКолонн > 1 Тогда
			ТабИтоги.Присоединить(ОбластьЗаголовокИтогоТопливо);
		КонецЕсли;
	КонецЦикла;
	ТабИтоги.Присоединить(ОбластьЗаголовокВсего);

	ОбластьСтрокаДанные			= Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСтрокаТопливоКолонна	= Макет.ПолучитьОбласть("Строка|ТопливоКолонна");
	ОбластьСтрокаКолонна		= Макет.ПолучитьОбласть("Строка|Колонна");
	ОбластьСтрокаИтогоТопливо	= Макет.ПолучитьОбласть("Строка|ИтогоТопливо");
	ОбластьСтрокаВсего			= Макет.ПолучитьОбласть("Строка|Всего");
	
	ОбластьСтрокаДанные.Параметры.ТекстСтрокиИтога	= "В баке на начало";
	ТабИтоги.Вывести(ОбластьСтрокаДанные);
	ВсегоПоСтроке = 0;
	Для Каждого МаркаТоплива Из МаркиТоплива Цикл
		ПерваяКолонна		= Истина;
		КоличествоКолонн	= 0;
		ИтогоПоТопливу		= 0;
		Для Каждого Колонна Из Колонны Цикл
			НайденныеСтроки = СтрокиГСМ.НайтиСтроки(Новый Структура("МаркаТоплива, Колонна", МаркаТоплива.МаркаТоплива, Колонна.Колонна));
			Для Каждого Строка Из НайденныеСтроки Цикл
				КоличествоКолонн	= КоличествоКолонн + 1;
					
				тЗначение = Строка.ВБакеНаНачало;
					
				Если ПерваяКолонна Тогда
					ОбластьСтрокаТопливоКолонна.Параметры.ЗначКолонна = тЗначение;
					ТабИтоги.Присоединить(ОбластьСтрокаТопливоКолонна);
					ПерваяКолонна	= Ложь;
				Иначе
					ОбластьСтрокаКолонна.Параметры.ЗначКолонна = тЗначение;
					ТабИтоги.Присоединить(ОбластьСтрокаКолонна);
				КонецЕсли;
				ВсегоПоСтроке	= ВсегоПоСтроке + тЗначение;
				ИтогоПоТопливу	= ИтогоПоТопливу + тЗначение;
			КонецЦикла;
		КонецЦикла;
		Если КоличествоКолонн > 1 Тогда
			ОбластьСтрокаИтогоТопливо.Параметры.ЗначТопливо = ИтогоПоТопливу;
			ТабИтоги.Присоединить(ОбластьСтрокаИтогоТопливо);
		КонецЕсли;
	КонецЦикла;
	ОбластьСтрокаВсего.Параметры.ЗначВсего= ВсегоПоСтроке;
	ТабИтоги.Присоединить(ОбластьСтрокаВсего);
	
	ОбластьСтрокаДанные.Параметры.ТекстСтрокиИтога	= "В баке на конец";
	ТабИтоги.Вывести(ОбластьСтрокаДанные);
	ВсегоПоСтроке = 0;
	Для Каждого МаркаТоплива Из МаркиТоплива Цикл
		ПерваяКолонна		= Истина;
		КоличествоКолонн	= 0;
		ИтогоПоТопливу		= 0;
		Для Каждого Колонна Из Колонны Цикл
			НайденныеСтроки = СтрокиГСМ.НайтиСтроки(Новый Структура("МаркаТоплива, Колонна", МаркаТоплива.МаркаТоплива, Колонна.Колонна));
			Для Каждого Строка Из НайденныеСтроки Цикл
				КоличествоКолонн	= КоличествоКолонн + 1;
					
				тЗначение = Строка.ВБакеНаКонец;
					
				Если ПерваяКолонна Тогда
					ОбластьСтрокаТопливоКолонна.Параметры.ЗначКолонна = тЗначение;
					ТабИтоги.Присоединить(ОбластьСтрокаТопливоКолонна);
					ПерваяКолонна	= Ложь;
				Иначе
					ОбластьСтрокаКолонна.Параметры.ЗначКолонна = тЗначение;
					ТабИтоги.Присоединить(ОбластьСтрокаКолонна);
				КонецЕсли;
				ВсегоПоСтроке	= ВсегоПоСтроке + тЗначение;
				ИтогоПоТопливу	= ИтогоПоТопливу + тЗначение;
			КонецЦикла;
		КонецЦикла;
		Если КоличествоКолонн > 1 Тогда
			ОбластьСтрокаИтогоТопливо.Параметры.ЗначТопливо = ИтогоПоТопливу;
			ТабИтоги.Присоединить(ОбластьСтрокаИтогоТопливо);
		КонецЕсли;
	КонецЦикла;
	ОбластьСтрокаВсего.Параметры.ЗначВсего= ВсегоПоСтроке;
	ТабИтоги.Присоединить(ОбластьСтрокаВсего);

	ОбластьСтрокаДанные.Параметры.ТекстСтрокиИтога	= "Фактический расход";
	ТабИтоги.Вывести(ОбластьСтрокаДанные);
	ВсегоПоСтроке = 0;
	Для Каждого МаркаТоплива Из МаркиТоплива Цикл
		ПерваяКолонна		= Истина;
		КоличествоКолонн	= 0;
		ИтогоПоТопливу		= 0;
		Для Каждого Колонна Из Колонны Цикл
			НайденныеСтроки = СтрокиГСМ.НайтиСтроки(Новый Структура("МаркаТоплива, Колонна", МаркаТоплива.МаркаТоплива, Колонна.Колонна));
			Для Каждого Строка Из НайденныеСтроки Цикл
				КоличествоКолонн	= КоличествоКолонн + 1;
					
				тЗначение = Строка.РасходФакт;
					
				Если ПерваяКолонна Тогда
					ОбластьСтрокаТопливоКолонна.Параметры.ЗначКолонна = тЗначение;
					ТабИтоги.Присоединить(ОбластьСтрокаТопливоКолонна);
					ПерваяКолонна	= Ложь;
				Иначе
					ОбластьСтрокаКолонна.Параметры.ЗначКолонна = тЗначение;
					ТабИтоги.Присоединить(ОбластьСтрокаКолонна);
				КонецЕсли;
				ВсегоПоСтроке	= ВсегоПоСтроке + тЗначение;
				ИтогоПоТопливу	= ИтогоПоТопливу + тЗначение;
			КонецЦикла;
		КонецЦикла;
		Если КоличествоКолонн > 1 Тогда
			ОбластьСтрокаИтогоТопливо.Параметры.ЗначТопливо = ИтогоПоТопливу;
			ТабИтоги.Присоединить(ОбластьСтрокаИтогоТопливо);
		КонецЕсли;
	КонецЦикла;
	ОбластьСтрокаВсего.Параметры.ЗначВсего= ВсегоПоСтроке;
	ТабИтоги.Присоединить(ОбластьСтрокаВсего);

	ОбластьСтрокаДанные.Параметры.ТекстСтрокиИтога	= "Заправлено";
	ТабИтоги.Вывести(ОбластьСтрокаДанные);
	ВсегоПоСтроке = 0;
	Для Каждого МаркаТоплива Из МаркиТоплива Цикл
		ПерваяКолонна		= Истина;
		КоличествоКолонн	= 0;
		ИтогоПоТопливу		= 0;
		Для Каждого Колонна Из Колонны Цикл
			НайденныеСтроки = СтрокиГСМ.НайтиСтроки(Новый Структура("МаркаТоплива, Колонна", МаркаТоплива.МаркаТоплива, Колонна.Колонна));
			Для Каждого Строка Из НайденныеСтроки Цикл
				КоличествоКолонн	= КоличествоКолонн + 1;
					
				тЗначение = Строка.ЗаправленоКарта +
//++ Рарус Лимаренко 02.11.2017
			 Строка.ЗаправленоПерваяКарта + Строка.ЗаправленоВтораяКарта + Строка.ЗаправленоТретьяКарта +
//-- Рарус Лимаренко 02.11.2017
				Строка.ЗаправленоНал;
					
				Если ПерваяКолонна Тогда
					ОбластьСтрокаТопливоКолонна.Параметры.ЗначКолонна = тЗначение;
					ТабИтоги.Присоединить(ОбластьСтрокаТопливоКолонна);
					ПерваяКолонна	= Ложь;
				Иначе
					ОбластьСтрокаКолонна.Параметры.ЗначКолонна = тЗначение;
					ТабИтоги.Присоединить(ОбластьСтрокаКолонна);
				КонецЕсли;
				ВсегоПоСтроке	= ВсегоПоСтроке + тЗначение;
				ИтогоПоТопливу	= ИтогоПоТопливу + тЗначение;
			КонецЦикла;
		КонецЦикла;
		Если КоличествоКолонн > 1 Тогда
			ОбластьСтрокаИтогоТопливо.Параметры.ЗначТопливо = ИтогоПоТопливу;
			ТабИтоги.Присоединить(ОбластьСтрокаИтогоТопливо);
		КонецЕсли;
	КонецЦикла;
	ОбластьСтрокаВсего.Параметры.ЗначВсего= ВсегоПоСтроке;
	ТабИтоги.Присоединить(ОбластьСтрокаВсего);
	
	ОбластьСтрокаДанные.Параметры.ТекстСтрокиИтога	= "(в т.ч. за наличку)";
	ТабИтоги.Вывести(ОбластьСтрокаДанные);
	ВсегоПоСтроке = 0;
	Для Каждого МаркаТоплива Из МаркиТоплива Цикл
		ПерваяКолонна		= Истина;
		КоличествоКолонн	= 0;
		ИтогоПоТопливу		= 0;
		Для Каждого Колонна Из Колонны Цикл
			НайденныеСтроки = СтрокиГСМ.НайтиСтроки(Новый Структура("МаркаТоплива, Колонна", МаркаТоплива.МаркаТоплива, Колонна.Колонна));
			Для Каждого Строка Из НайденныеСтроки Цикл
				КоличествоКолонн	= КоличествоКолонн + 1;
					
				тЗначение = Строка.ЗаправленоНал;
					
				Если ПерваяКолонна Тогда
					ОбластьСтрокаТопливоКолонна.Параметры.ЗначКолонна = тЗначение;
					ТабИтоги.Присоединить(ОбластьСтрокаТопливоКолонна);
					ПерваяКолонна	= Ложь;
				Иначе
					ОбластьСтрокаКолонна.Параметры.ЗначКолонна = тЗначение;
					ТабИтоги.Присоединить(ОбластьСтрокаКолонна);
				КонецЕсли;
				ВсегоПоСтроке	= ВсегоПоСтроке + тЗначение;
				ИтогоПоТопливу	= ИтогоПоТопливу + тЗначение;
			КонецЦикла;
		КонецЦикла;
		Если КоличествоКолонн > 1 Тогда
			ОбластьСтрокаИтогоТопливо.Параметры.ЗначТопливо = ИтогоПоТопливу;
			ТабИтоги.Присоединить(ОбластьСтрокаИтогоТопливо);
		КонецЕсли;
	КонецЦикла;
	ОбластьСтрокаВсего.Параметры.ЗначВсего= ВсегоПоСтроке;
	ТабИтоги.Присоединить(ОбластьСтрокаВсего);

	ОбластьСтрокаДанные.Параметры.ТекстСтрокиИтога	= "Сумма расхода";
	ТабИтоги.Вывести(ОбластьСтрокаДанные);
	ВсегоПоСтроке = 0;
	Для Каждого МаркаТоплива Из МаркиТоплива Цикл
		
		Стоимость	= 0;
		РасходФакт	= 0;
		НайденныеСтрокиСтоимости = Объект.СтоимостьГСМ.НайтиСтроки(Новый Структура("МаркаТоплива", МаркаТоплива.МаркаТоплива));
		Для Каждого текСтрокаСтоимости Из НайденныеСтрокиСтоимости Цикл
			Стоимость	= Стоимость + текСтрокаСтоимости.СуммаСНДС - текСтрокаСтоимости.СуммаНДС;
			РасходФакт	= РасходФакт + текСтрокаСтоимости.РасходФакт;
		КонецЦикла;
		
		ЦенаТоплива = ?(РасходФакт = 0, Стоимость, Стоимость/РасходФакт);
		
		ПерваяКолонна		= Истина;
		КоличествоКолонн	= 0;
		ИтогоПоТопливу		= 0;
		Для Каждого Колонна Из Колонны Цикл
			НайденныеСтроки = СтрокиГСМ.НайтиСтроки(Новый Структура("МаркаТоплива, Колонна", МаркаТоплива.МаркаТоплива, Колонна.Колонна));
			Для Каждого Строка Из НайденныеСтроки Цикл
				КоличествоКолонн	= КоличествоКолонн + 1;
					
				тЗначение = Окр(Строка.РасходФакт * ЦенаТоплива, 2);
					
				Если ПерваяКолонна Тогда
					ОбластьСтрокаТопливоКолонна.Параметры.ЗначКолонна = тЗначение;
					ТабИтоги.Присоединить(ОбластьСтрокаТопливоКолонна);
					ПерваяКолонна	= Ложь;
				Иначе
					ОбластьСтрокаКолонна.Параметры.ЗначКолонна = тЗначение;
					ТабИтоги.Присоединить(ОбластьСтрокаКолонна);
				КонецЕсли;
				ВсегоПоСтроке	= ВсегоПоСтроке + тЗначение;
				ИтогоПоТопливу	= ИтогоПоТопливу + тЗначение;
			КонецЦикла;
		КонецЦикла;
		Если КоличествоКолонн > 1 Тогда
			ОбластьСтрокаИтогоТопливо.Параметры.ЗначТопливо = ИтогоПоТопливу;
			ТабИтоги.Присоединить(ОбластьСтрокаИтогоТопливо);
		КонецЕсли;
	КонецЦикла;
	ОбластьСтрокаВсего.Параметры.ЗначВсего= ВсегоПоСтроке;
	ТабИтоги.Присоединить(ОбластьСтрокаВсего);

КонецПроцедуры

&НаСервере
Процедура ОбновлениеОтображения()
	
	//СтруктураИтогов = ПолучитьСтрокиИтогов();
	//ТекстВБакеНаНачало	= СтруктураИтогов.ВБакеНаНачало;
	//ТекстВБакеНаКонец	= СтруктураИтогов.ВБакеНаКонец;
	//ТекстРасходФакт		= СтруктураИтогов.РасходФакт;
	//Заправлено			= СтруктураИтогов.Заправлено;
	СформироватьТабИтоги();
	Если Объект.ВидОперации = Перечисления.пкВидыВедомостейПоГСМ.Краны Тогда
		Элементы.ГСМРасходНормаСМЧ.Видимость	= Истина;
		Элементы.ГСМСМЧНаКонец.Видимость		= Истина;
        Элементы.ГСМСМЧНаНачало.Видимость		= Истина;
        Элементы.ГСМСМЧПробег.Видимость			= Истина;
	Иначе
		Элементы.ГСМРасходНормаСМЧ.Видимость	= Ложь;
		Элементы.ГСМСМЧНаКонец.Видимость		= Ложь;
        Элементы.ГСМСМЧНаНачало.Видимость		= Ложь;
        Элементы.ГСМСМЧПробег.Видимость			= Ложь;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура КомандаЗаполнить(Команда)
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		тСообщение = Новый СообщениеПользователю;
		тСообщение.Текст = НСтр("ru='Не указана Организация!'");
		тСообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Подразделение) Тогда
		тСообщение = Новый СообщениеПользователю;
		тСообщение.Текст = НСтр("ru='Не указано Подразделение!'");
		тСообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
		тСообщение = Новый СообщениеПользователю;
		тСообщение.Текст = НСтр("ru='Не определен период!'");
		тСообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	КомандаЗаполнитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура КомандаЗаполнитьНаСервере()
	
	тОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.пкЗаправочнаяВедомость"));
	
	тОбъект.ГСМ.Очистить();
	тОбъект.СтоимостьГСМ.Очистить();
	
	//Легковой транспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПутевойЛист.Ссылка КАК Ссылка,
	|	уатПутевойЛист.ТранспортноеСредство КАК Автомобиль,
	|	уатПутевойЛист.Водитель1.ФизическоеЛицо КАК Водитель,
	|	уатПутевойЛист.СпидометрВыезда КАК СпидометрНачало,
	|	уатПутевойЛист.СпидометрВозвращения КАК СпидометрКонец,
	|	уатПутевойЛистРасходГСМ.ГСМ КАК ГСМ,
	|	уатПутевойЛистРасходГСМ.ОстатокПриВыезде КАК ОстатокПриВыезде,
	|	уатПутевойЛистРасходГСМ.ОстатокПриВозвращении КАК ОстатокПриВозвращении,
	|	уатПутевойЛистРасходГСМ.Выдано КАК Выдано,
	|	уатПутевойЛистРасходГСМ.Пробег КАК Пробег,
	|	уатПутевойЛистРасходГСМ.РасходПоНорме КАК РасходПоНорме,
	|	уатПутевойЛистРасходГСМ.РасходПоФакту КАК РасходПоФакту,
	|	уатПутевойЛистРасходГСМ.Сдано КАК Сдано
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатПутевойЛист.РасходГСМ КАК уатПутевойЛистРасходГСМ
	|		ПО (уатПутевойЛистРасходГСМ.Ссылка = уатПутевойЛист.Ссылка)
	|ГДЕ
	|	уатПутевойЛист.ДатаВозвращения МЕЖДУ &ДатаНачала И &ДатаКонца
	|	И уатПутевойЛист.пкИспользоватьВЗаправочнойВедомости
	|	И уатПутевойЛист.Подразделение = &Подразделение
	|	И НЕ уатПутевойЛист.ПометкаУдаления
	|	И уатПутевойЛист.Организация = &Организация";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(тОбъект.ПериодРегистрации));
	Запрос.УстановитьПараметр("ДатаКонца",  КонецМесяца(тОбъект.ПериодРегистрации));
	Запрос.УстановитьПараметр("Подразделение",  тОбъект.Подразделение);
	Запрос.УстановитьПараметр("Организация",  тОбъект.Организация);
	
	РезЗапроса = Запрос.Выполнить().Выгрузить();
	Для каждого Строка Из РезЗапроса Цикл
		
		Если Не ЗначениеЗаполнено(Строка.ГСМ) Тогда
			Продолжить;
		КонецЕсли;
		
		НовСтрока = тОбъект.ГСМ.Добавить();
		НовСтрока.Автомобиль			= Строка.Автомобиль;
		Если ЗначениеЗаполнено(НовСтрока.Автомобиль) Тогда
			НовСтрока.Колонна		= Строка.Автомобиль.уатКолонна;
		КонецЕсли;
		НовСтрока.Водитель				= Строка.Водитель;
		НовСтрока.ГосНомер				= Строка.Автомобиль.Код;
		
		НовСтрока.СпидометрНаНачало		= Строка.СпидометрНачало;
		НовСтрока.СпидометрНаКонец		= Строка.СпидометрКонец;
		
		НовСтрока.Пробег				= Строка.СпидометрКонец - Строка.СпидометрНачало;
		НовСтрока.СМЧНаНачало			= 0;
		НовСтрока.СМЧНаКонец			= 0;
		НовСтрока.СМЧПробег				= 0;
		
		НовСтрока.МаркаТоплива			= Строка.ГСМ;
		НовСтрока.НормаРасхода			= ?(НовСтрока.Пробег = 0, 0, Строка.РасходПоНорме * 100 / НовСтрока.Пробег);
		НовСтрока.РасходНормаСМЧ		= 0;
		
		НовСтрока.ВБакеНаНачало			= Строка.ОстатокПриВыезде;
		НовСтрока.ВБакеНаКонец			= Строка.ОстатокПриВозвращении;
		
		НовСтрока.ЗаправленоКарта		= 0;
//++ Рарус Лимаренко 02.11.2017
		НовСтрока.ЗаправленоПерваяКарта = 0;
		НовСтрока.ЗаправленоВтораяКарта = 0;
		НовСтрока.ЗаправленоТретьяКарта = 0;
//-- Рарус Лимаренко 02.11.2017

		НовСтрока.НомерТопливнойКарты	= 0;
		НовСтрока.ЗаправленоНал			= 0;
		
		НайденныеСтоимости = тОбъект.СтоимостьГСМ.НайтиСтроки(Новый Структура("МаркаТоплива", НовСтрока.МаркаТоплива));
		Если НайденныеСтоимости.Количество() = 0 Тогда
			СтрокаСтоимости = тОбъект.СтоимостьГСМ.Добавить();
			СтрокаСтоимости.МаркаТоплива =  НовСтрока.МаркаТоплива;
		Иначе
			СтрокаСтоимости =  НайденныеСтоимости[0];
		КонецЕсли;
		
		тблЗаправки = ПолучитьЗаправкиДляПЛ(Строка.Ссылка);
		Для Каждого текЗаправка Из тблЗаправки Цикл
			
			Если НовСтрока.МаркаТоплива <> текЗаправка.ГСМ Тогда
				Продолжить;
			КонецЕсли;
			
			Разделитель = "";
			Если ЗначениеЗаполнено(текЗаправка.ПластиковаяКарта) Тогда
				НовСтрока.НомерТопливнойКарты	= НовСтрока.НомерТопливнойКарты + Разделитель + Строка(текЗаправка.ПластиковаяКарта);
				Разделитель = ", ";
				
				НовСтрока.ЗаправленоКарта		= НовСтрока.ЗаправленоКарта +
//++ Рарус Лимаренко 02.11.2017
			 НовСтрока.ЗаправленоПерваяКарта + НовСтрока.ЗаправленоВтораяКарта + НовСтрока.ЗаправленоТретьяКарта +
//-- Рарус Лимаренко 02.11.2017
				текЗаправка.Количество;
			Иначе
				НовСтрока.ЗаправленоНал			= НовСтрока.ЗаправленоНал + текЗаправка.Количество;
			КонецЕсли;
			
			СтрокаСтоимости.СтавкаНДС = текЗаправка.СтавкаНДС;
			
			Если тОбъект.ЦенаВключаетНДС Тогда
				Если текЗаправка.СуммаВключаетНДС Тогда
					СтрокаСтоимости.Сумма		= СтрокаСтоимости.Сумма + текЗаправка.Сумма;
					СтрокаСтоимости.СуммаНДС	= СтрокаСтоимости.СуммаНДС + текЗаправка.СуммаНДС;
					СтрокаСтоимости.СуммаСНДС	= СтрокаСтоимости.СуммаСНДС + текЗаправка.Сумма;
				Иначе
					СтрокаСтоимости.Сумма		= СтрокаСтоимости.Сумма + текЗаправка.Сумма + текЗаправка.СуммаНДС;
					СтрокаСтоимости.СуммаНДС	= СтрокаСтоимости.СуммаНДС + текЗаправка.СуммаНДС;
					СтрокаСтоимости.СуммаСНДС	= СтрокаСтоимости.СуммаСНДС + текЗаправка.Сумма + текЗаправка.СуммаНДС;
				КонецЕсли;
			Иначе
				Если текЗаправка.СуммаВключаетНДС Тогда
					СтрокаСтоимости.Сумма		= СтрокаСтоимости.Сумма + текЗаправка.Сумма - текЗаправка.СуммаНДС;
					СтрокаСтоимости.СуммаНДС	= СтрокаСтоимости.СуммаНДС + текЗаправка.СуммаНДС;
					СтрокаСтоимости.СуммаСНДС	= СтрокаСтоимости.СуммаСНДС + текЗаправка.Сумма;
				Иначе
					СтрокаСтоимости.Сумма		= СтрокаСтоимости.Сумма + текЗаправка.Сумма;
					СтрокаСтоимости.СуммаНДС	= СтрокаСтоимости.СуммаНДС + текЗаправка.СуммаНДС;
					СтрокаСтоимости.СуммаСНДС	= СтрокаСтоимости.СуммаСНДС + текЗаправка.Сумма + текЗаправка.СуммаНДС;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		СтрокаСтоимости.РасходФакт = СтрокаСтоимости.РасходФакт + Строка.РасходПоФакту;
		СтрокаСтоимости.Заправлено = СтрокаСтоимости.Заправлено + НовСтрока.ЗаправленоКарта +
//++ Рарус Лимаренко 02.11.2017
			 НовСтрока.ЗаправленоПерваяКарта + НовСтрока.ЗаправленоВтораяКарта + НовСтрока.ЗаправленоТретьяКарта +
//-- Рарус Лимаренко 02.11.2017
		+ НовСтрока.ЗаправленоНал;
		
		НовСтрока.РасходНорма			= Строка.РасходПоНорме;
		НовСтрока.РасходФакт			= Строка.РасходПоФакту;
		НовСтрока.РасходДопОборудование	= 0;
		
	КонецЦикла;	
	
	Для Каждого ТекСтрока Из тОбъект.СтоимостьГСМ Цикл
		Если ТекСтрока.Цена = 0 
			И ТекСтрока.Заправлено <> 0
		Тогда
			ТекСтрока.Цена = ТекСтрока.Сумма / ТекСтрока.Заправлено;
		Иначе
			ТекСтрока.Цена = ТекСтрока.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВДанныеФормы(тОбъект, Объект);
	
	//ПересчитатьСтоимостьГСМ();
	РасчитатьДопПоля();
	ОбновлениеОтображения();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗаправкиДляПЛ(ПутевойЛист) ЭКСПОРТ
	
	Запрос=Новый Запрос();
	ТекстЗапроса=
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаправкаГСМЗаправки.Дата КАК Дата,
	|	уатЗаправкаГСМЗаправки.Ссылка.Номер,
	|	уатЗаправкаГСМЗаправки.Ссылка.ВидДвиженияГСМ,
	|	уатЗаправкаГСМЗаправки.Ссылка.АЗС,
	|	уатЗаправкаГСМЗаправки.Ссылка.Страна,
	|	уатЗаправкаГСМЗаправки.ТС,
	|	уатЗаправкаГСМЗаправки.ГСМ,
	|	уатЗаправкаГСМЗаправки.Цена,
	|	уатЗаправкаГСМЗаправки.Количество,
	|	уатЗаправкаГСМЗаправки.Водитель,
	|	уатЗаправкаГСМЗаправки.ПластиковаяКарта,
	|	уатЗаправкаГСМЗаправки.Сумма,
	|	уатЗаправкаГСМЗаправки.Валюта,
	|	уатЗаправкаГСМЗаправки.СтавкаНДС,
	|	уатЗаправкаГСМЗаправки.СуммаНДС,
	|	уатЗаправкаГСМЗаправки.ПутевойЛист,
	|	уатЗаправкаГСМЗаправки.Ссылка,
	|	уатЗаправкаГСМЗаправки.НомерСтроки,
	|	уатЗаправкаГСМЗаправки.НомераТалонов,
	|	уатЗаправкаГСМЗаправки.Ссылка.Соглашение КАК Соглашение,
	|	уатЗаправкаГСМЗаправки.ВидЦеныПоставщика,
	|	уатЗаправкаГСМЗаправки.Ссылка.СуммаВключаетНДС
	|ИЗ
	|	Документ.уатЗаправкаГСМ.Заправки КАК уатЗаправкаГСМЗаправки
	|ГДЕ
	|	уатЗаправкаГСМЗаправки.ПутевойЛист = &ПутевойЛист
	|	И уатЗаправкаГСМЗаправки.ПутевойЛист <> &ПустойПутевойЛист";
	
	Запрос.Текст=ТекстЗапроса;
	Запрос.УстановитьПараметр("ПутевойЛист",ПутевойЛист);
	Запрос.УстановитьПараметр("ПустойПутевойЛист",Документы.уатПутевойЛист.ПустаяСсылка());
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьЗаправкиДляПЛ

///////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура КомандаПериодНазад(Команда)
	
	Объект.ПериодРегистрации = НачалоМесяца(ДобавитьМесяц(Объект.ПериодРегистрации, -1));
	Объект.Дата = КонецМесяца(Объект.ПериодРегистрации);
	
//++ Рарус Лимаренко 02.11.17
	Для каждого Строка Из Объект.ГСМ  Цикл
	     Строка.СпидометрНаКонец = 0;
	 КонецЦикла;
//-- Рарус Лимаренко 02.11.17
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПериодВперед(Команда)
	
	Объект.ПериодРегистрации = НачалоМесяца(ДобавитьМесяц(Объект.ПериодРегистрации, 1));
	Объект.Дата = КонецМесяца(Объект.ПериодРегистрации);
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

&НаКлиенте
Процедура ГСМПриИзменении(Элемент)
	
	ПересчитатьСтоимостьГСМ();
	РасчитатьДопПоля();
	ОбновлениеОтображения();
	
КонецПроцедуры

&НаКлиенте
Процедура ГСМАвтомобильПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ГСМ.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекСтрока.Автомобиль) Тогда
		ТекСтрока.ГосНомер				= ПолучитьЗначениеРеквизитаНаСервере(ТекСтрока.Автомобиль, "Код");
		ТекСтрока.Колонна				= ПолучитьЗначениеРеквизитаНаСервере(ТекСтрока.Автомобиль, "уатКолонна");
		ТекСтрока.НомерТопливнойКарты	= ПолучитьНомерТопливнойКарты(ТекСтрока.Автомобиль);
		//ТекСтрока.Водитель
		
		ТекСтрока.МаркаТоплива			= ПолучитьМаркуТопливаПоТС(ТекСтрока.Автомобиль);
		ТекСтрока.НормаРасхода			= ПолучитьНормуПоТС(ТекСтрока.Автомобиль, ТекСтрока.МаркаТоплива, Объект.ПериодРегистрации);
		ТекСтрока.СпидометрНаНачало		= ПолучитьСпидометрНаНачало(ТекСтрока.Автомобиль, НачалоМесяца(Объект.ПериодРегистрации));
		
	Иначе
		ТекСтрока.ГосНомер				= "";
		ТекСтрока.Колонна				= "";
		ТекСтрока.НомерТопливнойКарты	= "";
		//ТекСтрока.Водитель
		
		ТекСтрока.МаркаТоплива			= "";
		ТекСтрока.НормаРасхода			= 0;
		ТекСтрока.СпидометрНаНачало		= 0;
	КонецЕсли;
	
	ТекСтрока.СпидометрНаКонец		= ТекСтрока.СпидометрНаНачало;
	ТекСтрока.Пробег				= 0;
	
	ТекСтрока.ВБакеНаНачало			= 0;
	ТекСтрока.ВБакеНаКонец			= 0;
	ТекСтрока.ЗаправленоКарта		= 0;
//++ Рарус Лимаренко 02.11.2017
	ТекСтрока.ЗаправленоПерваяКарта  = 0;
	ТекСтрока.ЗаправленоВтораяКарта  = 0;
	ТекСтрока.ЗаправленоТретьяКарта  = 0;
//-- Рарус Лимаренко 02.11.2017
	
	ТекСтрока.ЗаправленоНал			= 0;
	
	ТекСтрока.РасходНорма			= 0;
	ТекСтрока.РасходФакт			= 0;
	ТекСтрока.РасходДопОборудование	= 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ГСМВБакеНаНачалоПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ГСМ.ТекущиеДанные;
	ТекСтрока.РасходФакт = ТекСтрока.ВБакеНаНачало + ТекСтрока.ЗаправленоКарта +
//++ Рарус Лимаренко 02.11.2017
	 ТекСтрока.ЗаправленоПерваяКарта + ТекСтрока.ЗаправленоВтораяКарта + ТекСтрока.ЗаправленоТретьяКарта +
//-- Рарус Лимаренко 02.11.2017
	ТекСтрока.ЗаправленоНал - ТекСтрока.ВБакеНаКонец;
	
КонецПроцедуры

&НаКлиенте
Процедура ГСМВБакеНаКонецПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ГСМ.ТекущиеДанные;
	ТекСтрока.РасходФакт = ТекСтрока.ВБакеНаНачало + ТекСтрока.ЗаправленоКарта +
//++ Рарус Лимаренко 02.11.2017
			 ТекСтрока.ЗаправленоПерваяКарта + ТекСтрока.ЗаправленоВтораяКарта + ТекСтрока.ЗаправленоТретьяКарта +
//-- Рарус Лимаренко 02.11.2017
	ТекСтрока.ЗаправленоНал - ТекСтрока.ВБакеНаКонец;
	
КонецПроцедуры

&НаКлиенте
Процедура ГСМСпидометрНаНачалоПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ГСМ.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекСтрока.СпидометрНаНачало) И ЗначениеЗаполнено(ТекСтрока.СпидометрНаКонец) Тогда
	   ТекСтрока.Пробег = ТекСтрока.СпидометрНаКонец - ТекСтрока.СпидометрНаНачало;
	   //ТекСтрока.РасходНорма = ТекСтрока.Пробег/100 * ТекСтрока.НормаРасхода;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекСтрока.СМЧНаНачало) И ЗначениеЗаполнено(ТекСтрока.СМЧНаКонец) Тогда
	   ТекСтрока.СМЧПробег = ТекСтрока.СМЧНаНачало - ТекСтрока.СМЧНаНачало; 
	КонецЕсли;

	ТекСтрока.РасходНорма = ТекСтрока.Пробег/100 * ТекСтрока.НормаРасхода + ТекСтрока.СМЧПробег * ТекСтрока.РасходНормаСМЧ;

КонецПроцедуры

&НаКлиенте
Процедура ГСМСпидометрНаКонецПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ГСМ.ТекущиеДанные;

	Если ЗначениеЗаполнено(ТекСтрока.СпидометрНаНачало) И ЗначениеЗаполнено(ТекСтрока.СпидометрНаКонец) Тогда
	   ТекСтрока.Пробег = ТекСтрока.СпидометрНаКонец - ТекСтрока.СпидометрНаНачало;
	   //ТекСтрока.РасходНорма = ТекСтрока.Пробег/100 * ТекСтрока.НормаРасхода;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекСтрока.СМЧНаНачало) И ЗначениеЗаполнено(ТекСтрока.СМЧНаКонец) Тогда
	   ТекСтрока.СМЧПробег = ТекСтрока.СМЧНаНачало - ТекСтрока.СМЧНаНачало; 
	КонецЕсли;

	ТекСтрока.РасходНорма = ТекСтрока.Пробег/100 * ТекСтрока.НормаРасхода + ТекСтрока.СМЧПробег * ТекСтрока.РасходНормаСМЧ;

КонецПроцедуры

&НаКлиенте
Процедура ГСМПробегПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ГСМ.ТекущиеДанные;

	Если ЗначениеЗаполнено(ТекСтрока.СпидометрНаНачало) И ЗначениеЗаполнено(ТекСтрока.СпидометрНаКонец) Тогда
	   ТекСтрока.СпидометрНаКонец = ТекСтрока.СпидометрНаНачало + ТекСтрока.Пробег;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекСтрока.СМЧНаНачало) И ЗначениеЗаполнено(ТекСтрока.СМЧНаКонец) Тогда
	   ТекСтрока.СМЧНаНачало = ТекСтрока.СМЧНаНачало + ТекСтрока.СМЧПробег; 
	КонецЕсли;

	ТекСтрока.РасходНорма = ТекСтрока.Пробег/100 * ТекСтрока.НормаРасхода + ТекСтрока.СМЧПробег * ТекСтрока.РасходНормаСМЧ;

КонецПроцедуры

&НаКлиенте
Процедура ГСМСМЧНаНачалоПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ГСМ.ТекущиеДанные;

	Если ЗначениеЗаполнено(ТекСтрока.СпидометрНаНачало) И ЗначениеЗаполнено(ТекСтрока.СпидометрНаКонец) Тогда
	   ТекСтрока.Пробег = ТекСтрока.СпидометрНаКонец - ТекСтрока.СпидометрНаНачало;
	   //ТекСтрока.РасходНорма = ТекСтрока.Пробег/100 * ТекСтрока.НормаРасхода;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекСтрока.СМЧНаНачало) И ЗначениеЗаполнено(ТекСтрока.СМЧНаКонец) Тогда
	   ТекСтрока.СМЧПробег = ТекСтрока.СМЧНаКонец - ТекСтрока.СМЧНаНачало; 
	КонецЕсли;

	ТекСтрока.РасходНорма = ТекСтрока.Пробег/100 * ТекСтрока.НормаРасхода + ТекСтрока.СМЧПробег * ТекСтрока.РасходНормаСМЧ;

КонецПроцедуры

&НаКлиенте
Процедура ГСМСМЧНаКонецПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ГСМ.ТекущиеДанные;

	Если ЗначениеЗаполнено(ТекСтрока.СпидометрНаНачало) И ЗначениеЗаполнено(ТекСтрока.СпидометрНаКонец) Тогда
	   ТекСтрока.Пробег = ТекСтрока.СпидометрНаКонец - ТекСтрока.СпидометрНаНачало;
	   //ТекСтрока.РасходНорма = ТекСтрока.Пробег/100 * ТекСтрока.НормаРасхода;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекСтрока.СМЧНаНачало) И ЗначениеЗаполнено(ТекСтрока.СМЧНаКонец) Тогда
	   ТекСтрока.СМЧПробег = ТекСтрока.СМЧНаКонец - ТекСтрока.СМЧНаНачало;
	КонецЕсли;

	ТекСтрока.РасходНорма = ТекСтрока.Пробег/100 * ТекСтрока.НормаРасхода + ТекСтрока.СМЧПробег * ТекСтрока.РасходНормаСМЧ;

КонецПроцедуры

&НаКлиенте
Процедура ГСМЗаправленоКартаПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ГСМ.ТекущиеДанные;
	//ТекСтрока.ВБакеНаКонец	= ТекСтрока.ВБакеНаНачало + ТекСтрока.ЗаправленоКарта + ТекСтрока.ЗаправленоНал;
	ТекСтрока.РасходФакт	= ТекСтрока.ВБакеНаНачало + ТекСтрока.ЗаправленоКарта + 
//++ Рарус Лимаренко 02.11.2017
	 ТекСтрока.ЗаправленоПерваяКарта +  ТекСтрока.ЗаправленоВтораяКарта +  ТекСтрока.ЗаправленоТретьяКарта +
//-- Рарус Лимаренко 02.11.2017
	 + ТекСтрока.ЗаправленоНал - ТекСтрока.ВБакеНаКонец;
	
КонецПроцедуры

&НаКлиенте
Процедура ГСМЗаправленоНалПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ГСМ.ТекущиеДанные;
	//ТекСтрока.ВБакеНаКонец	= ТекСтрока.ВБакеНаНачало + ТекСтрока.ЗаправленоКарта + ТекСтрока.ЗаправленоНал;
	ТекСтрока.РасходФакт	= ТекСтрока.ВБакеНаНачало + ТекСтрока.ЗаправленоКарта +  
//++ Рарус Лимаренко 02.11.2017
	 ТекСтрока.ЗаправленоПерваяКарта +  ТекСтрока.ЗаправленоВтораяКарта +  ТекСтрока.ЗаправленоТретьяКарта +
//-- Рарус Лимаренко 02.11.2017	
	+ ТекСтрока.ЗаправленоНал - ТекСтрока.ВБакеНаКонец;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура СтоимостьГСМЗаправленоПриИзменении(Элемент)
	
	ТекСтрока = Элементы.СтоимостьГСМ.ТекущиеДанные;

	ТекСтрока.Сумма		= ТекСтрока.Цена * ТекСтрока.Заправлено;
	
	ТекПроцентНДС		= ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ТекСтрока.СтавкаНДС);
	ТекСтрока.СуммаНДС	= ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(ТекСтрока.Сумма, ТекПроцентНДС, Объект.ЦенаВключаетНДС);
	
	Если Объект.ЦенаВключаетНДС Тогда
		ТекСтрока.СуммаСНДС	= ТекСтрока.Сумма;
	Иначе
		ТекСтрока.СуммаСНДС	= ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьГСМЦенаПриИзменении(Элемент)
	
	ТекСтрока = Элементы.СтоимостьГСМ.ТекущиеДанные;

	ТекСтрока.Сумма		= ТекСтрока.Цена * ТекСтрока.Заправлено;
	
	ТекПроцентНДС		= ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ТекСтрока.СтавкаНДС);
	ТекСтрока.СуммаНДС	= ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(ТекСтрока.Сумма, ТекПроцентНДС, Объект.ЦенаВключаетНДС);
	
	Если Объект.ЦенаВключаетНДС Тогда
		ТекСтрока.СуммаСНДС	= ТекСтрока.Сумма;
	Иначе
		ТекСтрока.СуммаСНДС	= ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьГСМСуммаПриИзменении(Элемент)
	
	ТекСтрока = Элементы.СтоимостьГСМ.ТекущиеДанные;

	ТекПроцентНДС		= ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ТекСтрока.СтавкаНДС);
	ТекСтрока.СуммаНДС	= ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(ТекСтрока.Сумма, ТекПроцентНДС, Объект.ЦенаВключаетНДС);
	
	Если Объект.ЦенаВключаетНДС Тогда
		ТекСтрока.СуммаСНДС	= ТекСтрока.Сумма;
	Иначе
		ТекСтрока.СуммаСНДС	= ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
	КонецЕсли;
	
	Если ТекСтрока.Заправлено <> 0 Тогда
		ТекСтрока.Цена = ТекСтрока.Сумма / ТекСтрока.Заправлено;
	Иначе	
		ТекСтрока.Цена = ТекСтрока.Сумма;
	КонецЕсли;
		 
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьГСМСтавкаНДСПриИзменении(Элемент)
	
	ТекСтрока = Элементы.СтоимостьГСМ.ТекущиеДанные;

	ТекПроцентНДС		= ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ТекСтрока.СтавкаНДС);
	ТекСтрока.СуммаНДС	= ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(ТекСтрока.Сумма, ТекПроцентНДС, Объект.ЦенаВключаетНДС);
	
	Если Объект.ЦенаВключаетНДС Тогда
		ТекСтрока.СуммаСНДС	= ТекСтрока.Сумма;
	Иначе
		ТекСтрока.СуммаСНДС	= ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
	КонецЕсли;
	
	//Если ТекСтрока.Заправлено <> 0 Тогда
	//	ТекСтрока.Цена = ТекСтрока.Сумма / ТекСтрока.Заправлено;
	//Иначе	
	//	ТекСтрока.Цена = ТекСтрока.Сумма;
	//КонецЕсли;
		 
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьГСМСуммаНДСПриИзменении(Элемент)
	
	ТекСтрока = Элементы.СтоимостьГСМ.ТекущиеДанные;

	Если Объект.ЦенаВключаетНДС Тогда
		ТекСтрока.СуммаСНДС	= ТекСтрока.Сумма;
	Иначе
		ТекСтрока.СуммаСНДС	= ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
	КонецЕсли;
	
	//Если ТекСтрока.Заправлено <> 0 Тогда
	//	ТекСтрока.Цена = ТекСтрока.Сумма / ТекСтрока.Заправлено;
	//Иначе	
	//	ТекСтрока.Цена = ТекСтрока.Сумма;
	//КонецЕсли;
		 
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьГСМСуммаСНДСПриИзменении(Элемент)
	
	ТекСтрока = Элементы.СтоимостьГСМ.ТекущиеДанные;

	Если Объект.ЦенаВключаетНДС Тогда
		ТекСтрока.Сумма	= ТекСтрока.СуммаСНДС;
	Иначе
		ТекСтрока.Сумма	= ТекСтрока.СуммаСНДС - ТекСтрока.СуммаНДС;
	КонецЕсли;
	
	Если ТекСтрока.Заправлено <> 0 Тогда
		ТекСтрока.Цена = ТекСтрока.Сумма / ТекСтрока.Заправлено;
	Иначе	
		ТекСтрока.Цена = ТекСтрока.Сумма;
	КонецЕсли;
		 
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	Для каждого ТекСтрока Из Объект.СтоимостьГСМ Цикл
		
		Если Не ЗначениеЗаполнено(ТекСтрока.МаркаТоплива) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Объект.ЦенаВключаетНДС Тогда
			ТекСтрока.Сумма	= ТекСтрока.СуммаСНДС;
		Иначе
			ТекСтрока.Сумма	= ТекСтрока.СуммаСНДС - ТекСтрока.СуммаНДС;
		КонецЕсли;
		
		Если ТекСтрока.Заправлено <> 0 Тогда
			ТекСтрока.Цена = ТекСтрока.Сумма / ТекСтрока.Заправлено;
		Иначе	
			ТекСтрока.Цена = ТекСтрока.Сумма;
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
&НаСервере
Процедура КомандаЗаполнитьСуммыПоПоступлениямНаСервере()
	
	тОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.пкЗаправочнаяВедомость"));
	
	ЗапросПоступления = Новый Запрос;
	ЗапросПоступления.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступленияГСМ.Номенклатура КАК МаркаТоплива,
	|	СУММА(ПоступленияГСМ.Количество) КАК Количество,
	|	СУММА(ПоступленияГСМ.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(ПоступленияГСМ.Сумма) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		КлючиАналитикиУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|		СУММА(ЗакупкиОбороты.КоличествоОборот) КАК Количество,
	|		СУММА(ЗакупкиОбороты.СуммаБезНДСОборот) КАК СуммаБезНДС,
	|		СУММА(ЗакупкиОбороты.СуммаОборот) КАК Сумма
	|	ИЗ
	|		РегистрНакопления.Закупки.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор, ) КАК ЗакупкиОбороты
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК КлючиАналитикиУчетаНоменклатуры
	|			ПО ЗакупкиОбороты.АналитикаУчетаНоменклатуры = КлючиАналитикиУчетаНоменклатуры.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|				ПО Склады.Подразделение = СтруктураПредприятия.Ссылка
	|			ПО ЗакупкиОбороты.Склад = Склады.Ссылка
	|	ГДЕ
	|		(СтруктураПредприятия.Ссылка В ИЕРАРХИИ (&Регион)
	|				ИЛИ СтруктураПредприятия.Ссылка = &Регион)
	|		И КлючиАналитикиУчетаНоменклатуры.Номенклатура В(&Номенклатура)
	|		И ТИПЗНАЧЕНИЯ(ЗакупкиОбороты.Регистратор) = ЗНАЧЕНИЕ(Документ.ПриобретениеТоваровУслуг)
	|		И ЗакупкиОбороты.Организация = &Организация
	|	
	|	СГРУППИРОВАТЬ ПО
	|		КлючиАналитикиУчетаНоменклатуры.Номенклатура) КАК ПоступленияГСМ
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступленияГСМ.Номенклатура";
	ЗапросПоступления.УстановитьПараметр("ДатаНачала", НачалоМесяца(тОбъект.ПериодРегистрации));
	ЗапросПоступления.УстановитьПараметр("ДатаОкончания", КонецМесяца(тОбъект.ПериодРегистрации));
	ЗапросПоступления.УстановитьПараметр("Регион", тОбъект.Подразделение);
	ЗапросПоступления.УстановитьПараметр("Номенклатура", тОбъект.СтоимостьГСМ.Выгрузить(,"МаркаТоплива"));
	ЗапросПоступления.УстановитьПараметр("Организация", тОбъект.Организация);
	ПоступленияГСМ = ЗапросПоступления.Выполнить().Выгрузить();
	
	Для Каждого ТекСтрока Из тОбъект.СтоимостьГСМ Цикл
		
		ТекСтрока.Заправлено	= 0;
		ТекСтрока.Сумма			= 0;
		ТекСтрока.СтавкаНДС		= ТекСтрока.МаркаТоплива.СтавкаНДС;
		
		НайденныеСтроки = ПоступленияГСМ.НайтиСтроки(Новый Структура("МаркаТоплива", текСтрока.МаркаТоплива));
		Для Каждого текПоступление Из НайденныеСтроки Цикл
			ТекСтрока.Заправлено	= ТекСтрока.Заправлено + текПоступление.Количество;
			Если тОбъект.ЦенаВключаетНДС Тогда
				ТекСтрока.Сумма			= ТекСтрока.Сумма + текПоступление.Сумма;
			Иначе
				ТекСтрока.Сумма			= ТекСтрока.Сумма + текПоступление.СуммаБезНДС;
			КонецЕсли;
		КонецЦикла;
		
		ТекПроцентНДС		= ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ТекСтрока.СтавкаНДС);
		ТекСтрока.СуммаНДС	= ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(ТекСтрока.Сумма, ТекПроцентНДС, тОбъект.ЦенаВключаетНДС);
		
		Если Объект.ЦенаВключаетНДС Тогда
			ТекСтрока.СуммаСНДС	= ТекСтрока.Сумма;
		Иначе
			ТекСтрока.СуммаСНДС	= ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
		КонецЕсли;
		
		Если ТекСтрока.Заправлено <> 0 Тогда
			ТекСтрока.Цена = ТекСтрока.Сумма / ТекСтрока.Заправлено;
		Иначе	
			ТекСтрока.Цена = ТекСтрока.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВДанныеФормы(тОбъект, Объект);
	
	РасчитатьДопПоля();
	ОбновлениеОтображения();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьСуммыПоПоступлениям(Команда)
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		тСообщение = Новый СообщениеПользователю;
		тСообщение.Текст = НСтр("ru='Не указана Организация!'");
		тСообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Подразделение) Тогда
		тСообщение = Новый СообщениеПользователю;
		тСообщение.Текст = НСтр("ru='Не указано Подразделение!'");
		тСообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
		тСообщение = Новый СообщениеПользователю;
		тСообщение.Текст = НСтр("ru='Не определен период!'");
		тСообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	КомандаЗаполнитьСуммыПоПоступлениямНаСервере();
	
	ПересчитатьСтоимостьГСМ();
	РасчитатьДопПоля();
	ОбновлениеОтображения();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДокумент()
	
	тОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.пкЗаправочнаяВедомость"));
	
	Если Не тОбъект.ФормироватьДвиженияПоТС Тогда
		тОбъект.ФормироватьДвиженияПоТС = Истина;
	КонецЕсли;
	
	Для Каждого текСтрока Из тОбъект.ГСМ Цикл
		
//++ Рарус Лимаренко 02.11.17		
		Если текСтрока.СпидометрНаКонец <> 0 Тогда	
			текСтрока.СпидометрНаНачало		= текСтрока.СпидометрНаКонец;		
		КонецЕсли;
//-- Рарус Лимаренко 02.11.17
		
		текСтрока.Пробег				= 0;
		
		текСтрока.СМЧНаНачало			= текСтрока.СМЧНаКонец;
		текСтрока.СМЧПробег				= 0;
		
		текСтрока.ВБакеНаНачало			= текСтрока.ВБакеНаКонец;
		текСтрока.ВБакеНаКонец			= 0;
		
		текСтрока.ЗаправленоКарта		= 0;
//++ Рарус Лимаренко 02.11.2017
		 ТекСтрока.ЗаправленоПерваяКарта = 0;
		 ТекСтрока.ЗаправленоВтораяКарта = 0;
		 ТекСтрока.ЗаправленоТретьяКарта = 0;
//-- Рарус Лимаренко 02.11.2017
		
		текСтрока.ЗаправленоНал			= 0;
		
		текСтрока.РасходНорма			= 0;
		текСтрока.РасходФакт			= 0;
		текСтрока.РасходДопОборудование	= 0;
		
//++ Рарус Лимаренко 02.11.17
		текСтрока.СпидометрНаКонец		= 0;
//-- Рарус Лимаренко 02.11.17
		
		текСтрока.НормаРасхода			= ПолучитьНормуПоТС(текСтрока.Автомобиль, текСтрока.МаркаТоплива, тОбъект.ПериодРегистрации);
		
	КонецЦикла;
	
	тОбъект.СтоимостьГСМ.Очистить();
	
	ЗначениеВДанныеФормы(тОбъект, Объект);
	
	ПересчитатьСтоимостьГСМ();
	КомандаЗаполнитьСуммыПоПоступлениямНаСервере();
	РасчитатьДопПоля();
	ОбновлениеОтображения();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьНормыРасхода(Команда)
	
	Для Каждого текСтрока Из Объект.ГСМ Цикл
		текСтрока.НормаРасхода			= ПолучитьНормуПоТС(текСтрока.Автомобиль, текСтрока.МаркаТоплива, Объект.ПериодРегистрации);
	КонецЦикла;
	
	Модифицированность = Истина;
	
	ПересчитатьСтоимостьГСМ();
	РасчитатьДопПоля();
	ОбновлениеОтображения();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьИзменениеНормыРасхода(Команда)
	ОткрытьФорму("Обработка.пкИзменениеНормРасходаГСМ.Форма.Форма", Новый Структура("Период, Подразделение", НачалоМесяца(Объект.ПериодРегистрации), Объект.Подразделение), ЭтаФорма, УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.пкИзменениеНормРасходаГСМ.Форма.Форма" Тогда
		КомандаОбновитьНормыРасхода(Неопределено);
    КонецЕсли;
    
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
&НаСервереБезКонтекста
Функция ПолучитьНормуПоТС(тАвтомобиль, тМаркаТоплива, тПериодРегистрации)
	
	Норма = 0;
	
	Если Не ЗначениеЗаполнено(тАвтомобиль) Тогда
		Возврат Норма;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(тМаркаТоплива) Тогда
		Возврат Норма;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(тПериодРегистрации) Тогда
		Возврат Норма;
	КонецЕсли;
	
	ЗапросНорма = Новый Запрос;
	ЗапросНорма.Текст = 
	"ВЫБРАТЬ
	|	уатНормыРасходаГСМСрезПоследних.Период,
	|	уатНормыРасходаГСМСрезПоследних.ГСМ,
	|	уатНормыРасходаГСМСрезПоследних.МодельТС,
	|	уатНормыРасходаГСМСрезПоследних.ЛинейнаяНорма,
	|	уатНормыРасходаГСМСрезПоследних.СезоннаяНадбавка
	|ИЗ
	|	РегистрСведений.уатНормыРасходаГСМ.СрезПоследних(
	|			&ПериодРегистрации,
	|			МодельТС = &Автомобиль
	|				И ГСМ = &МаркаТоплива) КАК уатНормыРасходаГСМСрезПоследних";
	ЗапросНорма.УстановитьПараметр("ПериодРегистрации", КонецМесяца(тПериодРегистрации));
	ЗапросНорма.УстановитьПараметр("Автомобиль", тАвтомобиль);
	ЗапросНорма.УстановитьПараметр("МаркаТоплива", тМаркаТоплива);
	РезЗапроса = ЗапросНорма.Выполнить().Выбрать();
	Если РезЗапроса.Следующий() Тогда
		Норма = РезЗапроса.ЛинейнаяНорма * (100 + РезЗапроса.СезоннаяНадбавка)/100;
	КонецЕсли;
	
	Возврат Норма;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМаркуТопливаПоТС(тАвтомобиль)
	
	Марка = Справочники.Номенклатура.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(тАвтомобиль) Тогда
		Возврат Марка;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(тАвтомобиль.уатМодель) Тогда
		Возврат Марка;
	КонецЕсли;
	
	Возврат тАвтомобиль.уатМодель.ОсновноеТопливо;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСпидометрНаНачало(тАвтомобиль, тПериодРегистрации)
	
	Счетчик = 0;
	
	Если Не ЗначениеЗаполнено(тАвтомобиль) Тогда
		Возврат Счетчик;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(тПериодРегистрации) Тогда
		Возврат Счетчик;
	КонецЕсли;
	
	ЗапросСчетчик = Новый Запрос;
	ЗапросСчетчик.Текст = 
	"ВЫБРАТЬ
	|	уатСчетчикиТССрезПоследних.Значение
	|ИЗ
	|	РегистрСведений.уатСчетчикиТС.СрезПоследних(
	|			&ПериодРегистрации,
	|			ТС = &Автомобиль
	|				И ТипСчетчика = ЗНАЧЕНИЕ(Перечисление.уатТипыСчетчиковТС.Спидометр)) КАК уатСчетчикиТССрезПоследних";
	ЗапросСчетчик.УстановитьПараметр("ПериодРегистрации", тПериодРегистрации - 1);
	ЗапросСчетчик.УстановитьПараметр("Автомобиль", тАвтомобиль);
	РезЗапроса = ЗапросСчетчик.Выполнить().Выбрать();
	Если РезЗапроса.Следующий() Тогда
		Счетчик = РезЗапроса.Значение;
	КонецЕсли;
	
	Возврат Счетчик;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНомерТопливнойКарты(тАвтомобиль)
	
	тНомер = "";
	
	Если Не ЗначениеЗаполнено(тАвтомобиль) Тогда
		Возврат тНомер;
	КонецЕсли;
	
	ЗапросТК = Новый Запрос;
	ЗапросТК.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	уатТопливныеКарты.Код
	|ИЗ
	|	Справочник.уатТопливныеКарты КАК уатТопливныеКарты
	|ГДЕ
	|	уатТопливныеКарты.КомуВыдана = &Автомобиль";
	ЗапросТК.УстановитьПараметр("Автомобиль", тАвтомобиль);
	РезЗапроса = ЗапросТК.Выполнить().Выбрать();
	Если РезЗапроса.Следующий() Тогда
		тНомер = РезЗапроса.Код;
	КонецЕсли;
	
	Возврат тНомер;
	
КонецФункции



