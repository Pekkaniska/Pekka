
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		
	КонецЕсли;
	
	ИнициализацияФормыПриСозданииНаСервере();	
	
	#Область УниверсальныеМеханизмы
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	#КонецОбласти
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();

	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ИзменениеПараметровОС2_4", ПараметрыЗаписи, Объект.Ссылка);

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьСлужебныеРеквзиитыТабличныхЧастей();
	ЗаполнитьИнформациюВПодвале();
	ЗаполнитьТекущиеЗначенияПараметров();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ИзменениеПараметровОС2_4" Тогда
		ЗаполнитьИнформациюВПодвале();
	КонецЕсли;
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если (Объект.ОС.Количество() > 0)
		ИЛИ (ЗначениеЗаполнено(Объект.ДокументОснование)
			И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПринятиеКУчетуОС2_4")) Тогда
		
		ДатаПриИзмененииНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтраженияВУчетеПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ВариантОтраженияВУчете) Тогда
		ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомУчете");
	КонецЕсли; 
	
	Объект.ОтражатьВУпрУчете = 
		(ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомУчете")
			ИЛИ ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомИРегламентированномУчетах"));
			
	Объект.ОтражатьВРеглУчете = 
		(ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.РегламентированномУчете")
			ИЛИ ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомИРегламентированномУчетах"));
			
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ОтражатьВУпрУчете,ОтражатьВРеглУчете");
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОДокументеВДругомУчетеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "#СоздатьДокумент" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
		ОткрытьФорму("Документ.ИзменениеПараметровОС2_4.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеАмортизационныхРасходовФлагПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеАмортизационнойПремииФлагПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, Элемент);
	
КонецПроцедуры

#Область СтраницаУчет

&НаКлиенте
Процедура НачислятьАмортизациюФлагБУПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИспользованияБУФлагПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИспользованияБУПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, Элемент);		
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИспользованияУУПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, Элемент);		
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИспользованияНУПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, Элемент);		
	
КонецПроцедуры

&НаКлиенте
Процедура КоэффициентАмортизацииБУФлагПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикАмортизацииФлагПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КоэффициентУскоренияБУФлагПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокУчетаФлагУУПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура МетодНачисленияАмортизацииФлагУУПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИспользованияФлагУУПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КоэффициентУскоренияФлагУУПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокУчетаФлагНУПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИспользованияНУФлагПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СпециальныйКоэффициентНУФлагПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаФинансовогоУчетаФлагПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказательНаработкиФлагПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛиквидационнаяСтоимостьФлагПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъемНаработкиФлагПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, Элемент);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОС

&НаКлиенте
Процедура ОСПриИзменении(Элемент)
	
	Если Объект.ОС.Количество() <> 0 Тогда
		ЗаполнитьТекущиеЗначенияПараметров();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВнеоборотныеАктивыКлиентСервер.ОбработкаВыбораЭлемента(Объект.ОС, "ОсновноеСредство", ВыбранноеЗначение).Количество() <> 0 Тогда
		ЗаполнитьТекущиеЗначенияПараметров();
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАмортизация

&НаКлиенте
Процедура АмортизацияСтатьяРасходовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Амортизация.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТаблицы.СтатьяРасходов) Тогда
		АмортизацияСтатьяРасходовПриИзмененииНаСервере(КэшированныеЗначения);
	Иначе
		СтрокаТаблицы.АналитикаРасходов = Неопределено;
		СтрокаТаблицы.АналитикаРасходовОбязательна = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АмортизацияПередаватьРасходыВДругуюОрганизациюПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Амортизация.ТекущиеДанные;
	Если Не СтрокаТаблицы.ПередаватьРасходыВДругуюОрганизацию Тогда
		СтрокаТаблицы.ОрганизацияПолучательРасходов = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАмортизационнаяПремия

&НаКлиенте
Процедура АмортизационнаяПремияСтатьяРасходовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.АмортизационнаяПремия.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТаблицы.СтатьяРасходов) Тогда
		АмортизационнаяПремияСтатьяРасходовПриИзмененииНаСервере(КэшированныеЗначения);
	Иначе
		СтрокаТаблицы.АналитикаРасходов = Неопределено;
		СтрокаТаблицы.АналитикаРасходовОбязательна = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АмортизационнаяПремияПередаватьРасходыВДругуюОрганизациюПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.АмортизационнаяПремия.ТекущиеДанные;
	Если Не СтрокаТаблицы.ПередаватьРасходыВДругуюОрганизацию Тогда
		СтрокаТаблицы.ОрганизацияПолучательРасходов = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подобрать(Команда)
	
	ПараметрыПодбора = ВнеоборотныеАктивыКлиент.ПараметрыПодбора(Элементы.ОСОсновноеСредство, ЭтаФорма);
	
	ОткрытьФорму("Справочник.ОбъектыЭксплуатации.ФормаВыбора", 
					ПараметрыПодбора, Элементы.ОС,,,,, 
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТекущиеЗначения(Команда)
	
	ПоказатьТекущиеЗначенияНаСервере();
	
КонецПроцедуры

#Область ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)

	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Организация));
	
	ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "Организация");
	
	ЗаполнитьТекущиеЗначенияПараметров();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ЗаполнитьИнформациюВПодвале();
	
	ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "Дата");
	ЗаполнитьТекущиеЗначенияПараметров();
	
КонецПроцедуры

&НаСервере
Процедура АмортизацияСтатьяРасходовПриИзмененииНаСервере(КэшированныеЗначения)
	
	СтрокаТаблицы = Объект.Амортизация.НайтиПоИдентификатору(
		Элементы.Амортизация.ТекущаяСтрока);
	
	ДоходыИРасходыСервер.СтатьяРасходовПриИзменении(
		Объект,
		СтрокаТаблицы.СтатьяРасходов,
		СтрокаТаблицы.АналитикаРасходов);
		
	СтруктураДействий = Новый Структура("ЗаполнитьПризнакАналитикаРасходовОбязательна");
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура АмортизационнаяПремияСтатьяРасходовПриИзмененииНаСервере(КэшированныеЗначения)
	
	СтрокаТаблицы = Объект.АмортизационнаяПремия.НайтиПоИдентификатору(
		Элементы.Амортизация.ТекущаяСтрока);
	
	ДоходыИРасходыСервер.СтатьяРасходовПриИзменении(
		Объект,
		СтрокаТаблицы.СтатьяРасходов,
		СтрокаТаблицы.АналитикаРасходов);
		
	СтруктураДействий = Новый Структура("ЗаполнитьПризнакАналитикаРасходовОбязательна");
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()

	ЗаполнитьТекущиеЗначенияПараметров();
	
	Элементы.ДокументОснование.Видимость = ЗначениеЗаполнено(Объект.ДокументОснование);

	ЗаполнитьРеквизитыПоДокументуОснованию();
	
	ЕстьСвязанныеОрганизации = Справочники.Организации.ОрганизацияВзаимосвязанаСДругимиОрганизациями(Объект.Организация);
	ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	
	Если Объект.ОтражатьВУпрУчете И Объект.ОтражатьВРеглУчете Тогда
		ВариантОтраженияВУчете = Перечисления.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомИРегламентированномУчетах;
	ИначеЕсли Объект.ОтражатьВУпрУчете Тогда
		ВариантОтраженияВУчете = Перечисления.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомУчете;
	ИначеЕсли Объект.ОтражатьВРеглУчете Тогда
		ВариантОтраженияВУчете = Перечисления.ВариантыОтраженияВУчетеВнеоборотныхАктивов.РегламентированномУчете;
	КонецЕсли; 
	
	ЗаполнитьСлужебныеРеквзиитыТабличныхЧастей();
	
	ЗаполнитьИнформациюВПодвале();
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоДокументуОснованию()

	ВключитьАмортизационнуюПремиюВСоставРасходов = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПринятиеКУчетуОС2_4") Тогда
		
			ВключитьАмортизационнуюПремиюВСоставРасходов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Объект.ДокументОснование, "ВключитьАмортизационнуюПремиюВСоставРасходов");
				
		ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ИзменениеПараметровОС") Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	1
			|ИЗ
			|	Документ.ИзменениеПараметровОС КАК ИзменениеПараметровОС
			|ГДЕ
			|	ИзменениеПараметровОС.Ссылка = &ДокументОснование
			|	И ИзменениеПараметровОС.ДокументОснование ССЫЛКА Документ.ПринятиеКУчетуОС
			|	И ВЫРАЗИТЬ(ИзменениеПараметровОС.ДокументОснование КАК Документ.ПринятиеКУчетуОС).ВключитьАмортизационнуюПремиюВСоставРасходов";
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("ДокументОснование", Объект.ДокументОснование);
			
			ВключитьАмортизационнуюПремиюВСоставРасходов = НЕ Запрос.Выполнить().Пустой();
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры
 
&НаСервере
Процедура ИнициализацияФормыПриСозданииНаСервере()

	ВалютаУпр = Строка(Константы.ВалютаУправленческогоУчета.Получить());
	Элементы.ЛиквидационнаяСтоимостьВалюта.Заголовок = ВалютаУпр;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквзиитыТабличныхЧастей()

	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(
		Объект.Амортизация,
		"СтатьяРасходов, АналитикаРасходов");
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(
		Объект.АмортизационнаяПремия,
		"СтатьяРасходов, АналитикаРасходов");
		
КонецПроцедуры
 
&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	#Область АналитикиРасходов
	
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(
		УсловноеОформление,
		Новый Структура(
			"Амортизация",
			"СтатьяРасходов, АналитикаРасходов"));
	
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(
		УсловноеОформление,
		Новый Структура(
			"АмортизационнаяПремия",
			"СтатьяРасходов, АналитикаРасходов"));
	
	#КонецОбласти
	
	#Область ПередачаРасходовВДругуюОрганизацию
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АмортизацияОрганизацияПолучательРасходов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Амортизация.ПередаватьРасходыВДругуюОрганизацию");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АмортизационнаяПремияОрганизацияПолучательРасходов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.АмортизационнаяПремия.ПередаватьРасходыВДругуюОрганизацию");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	#КонецОбласти
	
	#Область Подразделение
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АмортизацияПодразделение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Амортизация.Подразделение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Местонахождение ОС>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АмортизационнаяПремияПодразделение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.АмортизационнаяПремия.Подразделение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Местонахождение ОС>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	
	#КонецОбласти
	
	#Область ОСГрафикАмортизации
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОСГрафикАмортизации.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОС.ГрафикАмортизации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОС.ПринятКУчетуРегл");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<без графика>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	
	#КонецОбласти
	
	#Область НеПринятКУчету_Регл
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОСНачислятьАмортизациюБУ.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОССрокИспользованияБУ.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОСКоэффициентАмортизацииБУ.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОСГрафикАмортизации.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОСКоэффициентУскоренияБУ.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОСНачислятьАмортизациюНУ.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОССрокИспользованияНУ.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОССпециальныйКоэффициентНУ.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОС.ПринятКУчетуРегл");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не принято к учету>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	#КонецОбласти
	
	#Область НеПринятКУчету_Упр
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОСНачислятьАмортизациюУУ.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОСМетодНачисленияАмортизацииУУ.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОССрокИспользованияУУ.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОСКоэффициентУскоренияУУ.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОСЛиквидационнаяСтоимость.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОС.ПринятКУчетуУпр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не принято к учету>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	#КонецОбласти
	
	#Область НеПринятКУчету_Обще
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОСГруппаФинансовогоУчета.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОСПоказательНаработки.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОСОбъемНаработки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОС.ПринятКУчетуУпр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОС.ПринятКУчетуРегл");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не принято к учету>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюВПодвале()

	ЗаголовокНадписи = ВнеоборотныеАктивыСлужебный.ИнформацияОДокументеВДругомУчете(Объект, Ложь);

	Если ?(Объект.Дата <> '000101010000', Объект.Дата, ТекущаяДатаСеанса()) < Константы.ДатаНачалаУчетаВнеоборотныхАктивов2_4.Получить() Тогда
		Если ЗаголовокНадписи.Количество() <> 0 Тогда
			ЗаголовокНадписи.Добавить(Символы.ПС);
		КонецЕсли;
		ЗаголовокНадписи.Добавить(НСтр("ru = 'Документ введен для перехода на учет внеоборотных активов версии 2.4'"));
	КонецЕсли; 
	
	Если ЗаголовокНадписи.Количество() <> 0 Тогда
		Элементы.Информация.Заголовок = Новый ФорматированнаяСтрока(ЗаголовокНадписи);
		Элементы.КартинкаИнформация.Видимость = Истина;
		Элементы.Информация.Видимость = Истина;
	Иначе
		Элементы.КартинкаИнформация.Видимость = Ложь;
		Элементы.Информация.Видимость = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, Знач ИзмененныеРеквизитыИлиЭлемент = "")

	Если ТипЗнч(ИзмененныеРеквизитыИлиЭлемент) = Тип("Строка") Тогда
		ИзмененныеРеквизиты = ИзмененныеРеквизитыИлиЭлемент;
	Иначе
		ИзмененныеРеквизиты = ИзмененныеРеквизитыИлиЭлемент.Имя;
	КонецЕсли;
	
	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ВспомогательныеРеквизиты = Новый Структура;
	ВспомогательныеРеквизиты.Вставить("ЕстьСвязанныеОрганизации", Форма.ЕстьСвязанныеОрганизации);
	ВспомогательныеРеквизиты.Вставить("ПлательщикНалогаНаПрибыль", Форма.ПлательщикНалогаНаПрибыль);
	ПараметрыРеквизитовОбъекта = ВнеоборотныеАктивыКлиентСервер.ЗначенияСвойствЗависимыхРеквизитов_ИзменениеПараметровОС(
									Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты);
									
	ВнеоборотныеАктивыКлиентСервер.НастроитьЗависимыеЭлементыФормы(Форма, ПараметрыРеквизитовОбъекта);

	Если НЕ ОбновитьВсе Тогда
		ИзмененныеРеквизиты = ВнеоборотныеАктивыКлиентСервер.ЗаполнитьРеквизитыВзависимостиОтСвойств_ИзменениеПараметровОС(
				Объект, ПараметрыРеквизитовОбъекта);
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураИзмененныхРеквизитов, Новый Структура(ИзмененныеРеквизиты), Истина);				
	КонецЕсли;
	
	#Область ОС
	
	УстановитьВидимостьТекущихЗначений(Форма, ОбновитьВсе, СтруктураИзмененныхРеквизитов);
	
	#КонецОбласти
	
	#Область Учет
	
	Если СтруктураИзмененныхРеквизитов.Свойство("НачислятьАмортизациюБУФлаг")
		ИЛИ ОбновитьВсе Тогда
		
		Если Объект.НачислятьАмортизациюБУФлаг Тогда
			Элементы.НачислятьАмортизациюБУ.ФорматРедактирования = "БЛ=Остановлено; БИ=Действует";
		Иначе
			Элементы.НачислятьАмортизациюБУ.ФорматРедактирования = "БЛ=; БИ=Действует";
		КонецЕсли; 
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("НачислятьАмортизациюУУФлаг")
		ИЛИ ОбновитьВсе Тогда
		
		Если Объект.НачислятьАмортизациюУУФлаг Тогда
			Элементы.НачислятьАмортизациюУУ.ФорматРедактирования = "БЛ=Остановлено; БИ=Действует";
		Иначе
			Элементы.НачислятьАмортизациюУУ.ФорматРедактирования = "БЛ=; БИ=Действует";
		КонецЕсли; 
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("НачислятьАмортизациюНУФлаг")
		ИЛИ ОбновитьВсе Тогда
		
		Если Объект.НачислятьАмортизациюНУФлаг Тогда
			Элементы.НачислятьАмортизациюНУ.ФорматРедактирования = "БЛ=Остановлено; БИ=Действует";
		Иначе
			Элементы.НачислятьАмортизациюНУ.ФорматРедактирования = "БЛ=; БИ=Действует";
		КонецЕсли; 
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ГрафикАмортизацииФлаг")
		ИЛИ ОбновитьВсе Тогда
		
		Если Объект.ГрафикАмортизацииФлаг Тогда
			Элементы.ГрафикАмортизации.ПодсказкаВвода = НСтр("ru = '<без графика>'");
		Иначе
			Элементы.ГрафикАмортизации.ПодсказкаВвода = "";
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("СрокИспользованияБУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("СрокИспользованияБУФлаг")
		ИЛИ ОбновитьВсе Тогда
		
		Форма.СрокИспользованияБУРасшифровка = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(
			Объект.СрокИспользованияБУ);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("СрокИспользованияНУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("СрокИспользованияНУФлаг")
		ИЛИ ОбновитьВсе Тогда
		
		Форма.СрокИспользованияНУРасшифровка = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(
			Объект.СрокИспользованияНУ);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("СрокИспользованияУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("СрокИспользованияНУФлаг")
		ИЛИ ОбновитьВсе Тогда
		
		Форма.СрокИспользованияУУРасшифровка = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(
			Объект.СрокИспользованияУУ);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		ИЛИ ОбновитьВсе Тогда
		Элементы.ГруппаПараметрыУУ.ОтображатьЗаголовок = (Объект.ОтражатьВРеглУчете);
		Элементы.ГруппаОбщее.ОтображатьЗаголовок = (Объект.ОтражатьВРеглУчете);
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ ОбновитьВсе Тогда
		Элементы.ЛиквидационнаяСтоимостьВалюта.Видимость = Элементы.ЛиквидационнаяСтоимость.Видимость;
	КонецЕсли;
	
	#КонецОбласти
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ДокументОснование")
		ИЛИ ОбновитьВсе Тогда
		
		Элементы.АмортизационнаяПремия.Видимость = Форма.ВключитьАмортизационнуюПремиюВСоставРасходов;
		Элементы.ОтражениеАмортизационнойПремииФлаг.Видимость = Форма.ВключитьАмортизационнуюПремиюВСоставРасходов;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьТекущихЗначений(Форма, ОбновитьВсе, СтруктураИзмененныхРеквизитов)

	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	СвойстваБУ  = Новый Структура("КоэффициентУскоренияБУ,ГрафикАмортизации,КоэффициентАмортизацииБУ,СрокИспользованияБУ,НачислятьАмортизациюБУ");
	СвойстваНУ  = Новый Структура("СпециальныйКоэффициентНУ,СрокИспользованияНУ,НачислятьАмортизациюНУ");
	СвойстваУУ  = Новый Структура("КоэффициентУскоренияУУ,СрокИспользованияУУ,МетодНачисленияАмортизацииУУ,НачислятьАмортизациюУУ,ЛиквидационнаяСтоимость");
	СвойстваОбщ = Новый Структура("ОбъемНаработки,ПоказательНаработки,ГруппаФинансовогоУчета");
	
	КоличествоСвойствБУ = 0;
	КоличествоСвойствНУ = 0;
	КоличествоСвойствУУ = 0;
	КоличествоСвойствОбщ = 0;
	Для каждого КлючИЗначение Из СвойстваБУ Цикл
		УстановитьВидимостьТекущегоЗначенияПараметра(Форма, КлючИЗначение.Ключ, ОбновитьВсе, СтруктураИзмененныхРеквизитов);
		КоличествоСвойствБУ = КоличествоСвойствБУ + ?(Объект[КлючИЗначение.Ключ + "Флаг"], 1, 0);
	КонецЦикла;
	Для каждого КлючИЗначение Из СвойстваНУ Цикл
		УстановитьВидимостьТекущегоЗначенияПараметра(Форма, КлючИЗначение.Ключ, ОбновитьВсе, СтруктураИзмененныхРеквизитов);
		КоличествоСвойствНУ = КоличествоСвойствНУ + ?(Объект[КлючИЗначение.Ключ + "Флаг"], 1, 0);
	КонецЦикла;
	Для каждого КлючИЗначение Из СвойстваУУ Цикл
		УстановитьВидимостьТекущегоЗначенияПараметра(Форма, КлючИЗначение.Ключ, ОбновитьВсе, СтруктураИзмененныхРеквизитов);
		КоличествоСвойствУУ = КоличествоСвойствУУ + ?(Объект[КлючИЗначение.Ключ + "Флаг"], 1, 0);
	КонецЦикла;
	Для каждого КлючИЗначение Из СвойстваОбщ Цикл
		УстановитьВидимостьТекущегоЗначенияПараметра(Форма, КлючИЗначение.Ключ, ОбновитьВсе, СтруктураИзмененныхРеквизитов);
		КоличествоСвойствОбщ = КоличествоСвойствОбщ + ?(Объект[КлючИЗначение.Ключ + "Флаг"], 1, 0);
	КонецЦикла;
	
	Если Форма.ПоказатьТекущиеЗначения Тогда
		
		ОтображатьВШапке = КоличествоСвойствНУ <> 0 ИЛИ КоличествоСвойствУУ <> 0 ИЛИ КоличествоСвойствОбщ <> 0;
		Если Элементы.ОСГруппаБУ.ОтображатьВШапке <> ОтображатьВШапке Тогда
			Элементы.ОСГруппаБУ.ОтображатьВШапке = ОтображатьВШапке;
		КонецЕсли;
		
		ОтображатьВШапке = КоличествоСвойствБУ <> 0 ИЛИ КоличествоСвойствУУ <> 0 ИЛИ КоличествоСвойствОбщ <> 0;
		Если Элементы.ОСГруппаНУ.ОтображатьВШапке <> ОтображатьВШапке Тогда
			Элементы.ОСГруппаНУ.ОтображатьВШапке = ОтображатьВШапке;
		КонецЕсли;
		
		ОтображатьВШапке = КоличествоСвойствБУ <> 0 ИЛИ КоличествоСвойствНУ <> 0 ИЛИ КоличествоСвойствОбщ <> 0;
		Если Элементы.ОСГруппаУУ.ОтображатьВШапке <> ОтображатьВШапке Тогда
			Элементы.ОСГруппаУУ.ОтображатьВШапке = ОтображатьВШапке;
		КонецЕсли;
		
		ОтображатьВШапке = КоличествоСвойствБУ <> 0 ИЛИ КоличествоСвойствНУ <> 0 ИЛИ КоличествоСвойствУУ <> 0;
		Если Элементы.ОСГруппаОбщее.ОтображатьВШапке <> ОтображатьВШапке Тогда
			Элементы.ОСГруппаОбщее.ОтображатьВШапке = ОтображатьВШапке;
		КонецЕсли;
		
	КонецЕсли;

	Форма.КоличествоИзмененныхСвойств = КоличествоСвойствБУ + КоличествоСвойствНУ + КоличествоСвойствУУ + КоличествоСвойствОбщ;
	
	Если Форма.ПоказатьТекущиеЗначения 
		И Форма.КоличествоИзмененныхСвойств > 0
		И Элементы.ОСОсновноеСредство.ФиксацияВТаблице <> ФиксацияВТаблице.Лево Тогда
		
		Элементы.ОСОсновноеСредство.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
		
	ИначеЕсли (НЕ Форма.ПоказатьТекущиеЗначения 
				ИЛИ Форма.КоличествоИзмененныхСвойств = 0)
		И Элементы.ОСОсновноеСредство.ФиксацияВТаблице <> ФиксацияВТаблице.Нет Тогда
		
		Элементы.ОСОсновноеСредство.ФиксацияВТаблице = ФиксацияВТаблице.Нет;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьТекущегоЗначенияПараметра(Форма, ИмяПараметра, ОбновитьВсе, СтруктураИзмененныхРеквизитов)

	Если ОбновитьВсе 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПоказатьТекущиеЗначения") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство(ИмяПараметра + "Флаг") Тогда
		Форма.Элементы["ОС" + ИмяПараметра].Видимость = Форма.Объект[ИмяПараметра + "Флаг"] И Форма.ПоказатьТекущиеЗначения;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПоказатьТекущиеЗначенияНаСервере()

	ПоказатьТекущиеЗначения = НЕ ПоказатьТекущиеЗначения;
	Элементы.ОСПоказатьТекущиеЗначения.Пометка = ПоказатьТекущиеЗначения;
	
	ЗаполнитьТекущиеЗначенияПараметров();
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ПоказатьТекущиеЗначения");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекущиеЗначенияПараметров()
	
	Если Объект.ОС.Количество() = 0 ИЛИ НЕ ПоказатьТекущиеЗначения Тогда
		Возврат;
	КонецЕсли;

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОбъектыЭксплуатации.Ссылка КАК ОсновноеСредство,
	|	ЕСТЬNULL(ПорядокУчетаОССрезПоследних.ГруппаФинансовогоУчета, НЕОПРЕДЕЛЕНО) КАК ГруппаФинансовогоУчета,
	|	ЕСТЬNULL(ПорядокУчетаОССрезПоследних.ПоказательНаработки, НЕОПРЕДЕЛЕНО) КАК ПоказательНаработки,
	|	ЕСТЬNULL(ПорядокУчетаОССрезПоследних.ОбъемНаработки, НЕОПРЕДЕЛЕНО) КАК ОбъемНаработки,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСУУСрезПоследних.СрокИспользования, 0) КАК СрокИспользованияУУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСУУСрезПоследних.КоэффициентУскорения, 0) КАК КоэффициентУскоренияУУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСУУСрезПоследних.МетодНачисленияАмортизации, НЕОПРЕДЕЛЕНО) КАК МетодНачисленияАмортизацииУУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСУУСрезПоследних.ЛиквидационнаяСтоимость, 0) КАК ЛиквидационнаяСтоимость,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБУСрезПоследних.СрокПолезногоИспользованияБУ, 0) КАК СрокИспользованияБУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБУСрезПоследних.СрокПолезногоИспользованияНУ, 0) КАК СрокИспользованияНУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБУСрезПоследних.КоэффициентАмортизацииБУ, 0) КАК КоэффициентАмортизацииБУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБУСрезПоследних.КоэффициентУскорения, 0) КАК КоэффициентУскоренияБУ,
	|	ЕСТЬNULL(ГрафикиАмортизацииОСБухгалтерскийУчетСрезПоследних.ГрафикАмортизации, НЕОПРЕДЕЛЕНО) КАК ГрафикАмортизации,
	|	ЕСТЬNULL(ПорядокУчетаОСУУСрезПоследних.НачислятьАмортизациюУУ, ЛОЖЬ) КАК НачислятьАмортизациюУУ,
	|	ЕСТЬNULL(ПорядокУчетаОСБУСрезПоследних.НачислятьАмортизациюБУ, ЛОЖЬ) КАК НачислятьАмортизациюБУ,
	|	ЕСТЬNULL(ПорядокУчетаОСБУСрезПоследних.НачислятьАмортизациюНУ, ЛОЖЬ) КАК НачислятьАмортизациюНУ,
	|	ЕСТЬNULL(НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчетСрезПоследних.СпециальныйКоэффициент, 0) КАК СпециальныйКоэффициент,
	|	ЕСТЬNULL(ПервоначальныеСведенияОССрезПоследних.ДатаВводаВЭксплуатациюБУ, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1) КАК ПринятКУчетуРегл,
	|	ЕСТЬNULL(ПервоначальныеСведенияОССрезПоследних.ДатаВводаВЭксплуатациюУУ, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1) КАК ПринятКУчетуУпр
	|ИЗ
	|	Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСУУ.СрезПоследних(
	|				&Период,
	|				Организация = &Организация
	|					И Регистратор <> &Ссылка
	|					И ОсновноеСредство В (&СписокОС)) КАК ПараметрыАмортизацииОСУУСрезПоследних
	|		ПО (ПараметрыАмортизацииОСУУСрезПоследних.ОсновноеСредство = ОбъектыЭксплуатации.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБУ.СрезПоследних(
	|				&Период,
	|				Организация = &Организация
	|					И Регистратор <> &Ссылка
	|					И ОсновноеСредство В (&СписокОС)) КАК ПараметрыАмортизацииОСБУСрезПоследних
	|		ПО (ПараметрыАмортизацииОСБУСрезПоследних.ОсновноеСредство = ОбъектыЭксплуатации.Ссылка)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|				&Период,
	|				Организация = &Организация
	|					И Регистратор <> &Ссылка
	|					И ОсновноеСредство В (&СписокОС)) КАК ГрафикиАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ПО (ГрафикиАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ОбъектыЭксплуатации.Ссылка)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОС.СрезПоследних(
	|				&Период,
	|				Регистратор <> &Ссылка
	|					И ОсновноеСредство В (&СписокОС)) КАК ПорядокУчетаОССрезПоследних
	|		ПО (ПорядокУчетаОССрезПоследних.ОсновноеСредство = ОбъектыЭксплуатации.Ссылка)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ.СрезПоследних(
	|				&Период,
	|				Организация = &Организация
	|					И Регистратор <> &Ссылка
	|					И ОсновноеСредство В (&СписокОС)) КАК ПорядокУчетаОСУУСрезПоследних
	|		ПО (ПорядокУчетаОСУУСрезПоследних.ОсновноеСредство = ОбъектыЭксплуатации.Ссылка)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСБУ.СрезПоследних(
	|				&Период,
	|				Организация = &Организация
	|					И Регистратор <> &Ссылка
	|					И ОсновноеСредство В (&СписокОС)) КАК ПорядокУчетаОСБУСрезПоследних
	|		ПО (ПорядокУчетаОСБУСрезПоследних.ОсновноеСредство = ОбъектыЭксплуатации.Ссылка)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет.СрезПоследних(
	|				&Период,
	|				Организация = &Организация
	|					И Регистратор <> &Ссылка
	|					И ОсновноеСредство В (&СписокОС)) КАК НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчетСрезПоследних
	|		ПО (НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчетСрезПоследних.ОсновноеСредство = ОбъектыЭксплуатации.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(
	|				,
	|				Организация = &Организация
	|					И ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияОССрезПоследних
	|		ПО (ПервоначальныеСведенияОССрезПоследних.ОсновноеСредство = ОбъектыЭксплуатации.Ссылка)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокОС", Объект.ОС.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство"));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Период", КонецДня(?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса())));
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Для каждого ДанныеСтроки Из Объект.ОС Цикл
		ТекущиеЗначения = Результат.Найти(ДанныеСтроки.ОсновноеСредство, "ОсновноеСредство");
		Если ТекущиеЗначения <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеЗначения);
		Иначе
			ДанныеСтроки.ПринятКУчетуРегл = Ложь;
			ДанныеСтроки.ПринятКУчетуУпр = Ложь;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
