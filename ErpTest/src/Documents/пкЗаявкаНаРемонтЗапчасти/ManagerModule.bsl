#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область СозданиеНаОсновании

// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании, НастройкиФормы) Экспорт
	
	Документы.пкЗаявкаНаРемонтЗапчасти.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	Документы.ПриобретениеТоваровУслуг.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	СозданиеНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСоздатьНаОсновании);
	
КонецПроцедуры

// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
 
	//Если ПравоДоступа("Добавление", Метаданные.Документы.пкСудебныйИск) Тогда
	//	КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
	//	КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.пкСудебныйИск.ПолноеИмя();
	//	КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.пкСудебныйИск);
	//	КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
	//	
	//	Возврат КомандаСоздатьНаОсновании;
	//КонецЕсли;

	Возврат Неопределено;
КонецФункции

#КонецОбласти 

#КонецОбласти 

// Определяет реквизиты выбранного документа
//
// Параметры:
//	ДокументСсылка - Ссылка на документа
//
// Возвращаемое значение:
//	Структура - реквизиты выбранного документа
//
Функция РеквизитыДокумента(ДокументСсылка) Экспорт
	
	СтруктураРеквизитов = Новый Структура();
	
	Возврат СтруктураРеквизитов;

КонецФункции

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		Если ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь() Тогда
			//СтандартнаяОбработка = Ложь;
			//ВыбраннаяФорма = "ФормаДокументаСамообслуживание";
		КонецЕсли;
	ИначеЕсли ВидФормы = "ФормаСписка" Тогда
		Если ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь() Тогда
			//СтандартнаяОбработка = Ложь;
			//ВыбраннаяФорма = "ФормаСпискаСамообслуживание";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблица_пкРемонтЗапчастей(Запрос, ТекстыЗапроса, Регистры);
	ПроведениеСерверУТ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Функция ТекстЗапросаТаблица_пкРемонтЗапчастей(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "пкРемонтЗапчастей";
	
	//ТекстЗапроса = 
	//"ВЫБРАТЬ
	//|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	//|	&Период КАК Период,
	//|	&Организация КАК Организация,
	//|	&Подразделение КАК Подразделение,
	//|	&Партнер КАК Партнер,
	//|	&Контрагент КАК Контрагент,
	//|	ТаблицаРемонты.ВидРемонта КАК ВидРемонта,
	//|	ТаблицаРемонты.ТС КАК ТС,
	//|	ТаблицаРемонты.Сумма КАК Сумма,
	//|	ТаблицаРемонты.ДатаВремяНачалаРемонта КАК ДатаВремяНачалаРемонта,
	//|	ТаблицаРемонты.ДатаВремяОкончанияРемонта КАК ДатаВремяОкончанияРемонта
	//|ИЗ
	//|	Документ.пкЗаявкаНаРемонтУДилера.Ремонты КАК ТаблицаРемонты
	//|ГДЕ
	//|	ТаблицаРемонты.Ссылка = &Ссылка
	//|";
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	пкЗаявкаНаРемонтЗапчастиТовары.Ссылка.Организация,
	|	пкЗаявкаНаРемонтЗапчастиТовары.Ссылка.Контрагент,
	|	пкЗаявкаНаРемонтЗапчастиТовары.Ссылка.Партнер,
	|	пкЗаявкаНаРемонтЗапчастиТовары.Ссылка.Подразделение,
	|	пкЗаявкаНаРемонтЗапчастиТовары.Номенклатура,
	|	пкЗаявкаНаРемонтЗапчастиТовары.Характеристика,
	|	пкЗаявкаНаРемонтЗапчастиТовары.Количество
	|ИЗ
	|	Документ.пкЗаявкаНаРемонтЗапчасти.Товары КАК пкЗаявкаНаРемонтЗапчастиТовары
	|ГДЕ
	|	пкЗаявкаНаРемонтЗапчастиТовары.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	//Запрос.Текст =
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	пкПретензияРасшифровка.Счет,
	//|	""Состояние"" КАК Состояние
	//|ИЗ
	//|	Документ.пкПретензия.Расшифровка КАК пкПретензияРасшифровка
	//|ГДЕ
	//|	пкПретензияРасшифровка.Ссылка = &Ссылка";
	//Реквизиты = Запрос.Выполнить().Выбрать();
	//Реквизиты.Следующий();
	
	//Запрос.УстановитьПараметр("Период",                                   Реквизиты.Период);
	//Запрос.УстановитьПараметр("Организация",                              Реквизиты.Организация);
	//Запрос.УстановитьПараметр("Подразделение",                            Реквизиты.Подразделение);
	
КонецПроцедуры

#КонецОбласти

#Область Отчеты

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);

КонецПроцедуры

#КонецОбласти 

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Реестр номеров ГТД
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.Идентификатор = "ПретензияАренда";
	//КомандаПечати.Представление = НСтр("ru = 'Претензия по аренде'");
	//КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	//КомандаПечати.Порядок = 1;
	//КомандаПечати.ФункциональныеОпции = "ЗаполнятьПараметры";

	//+++DubI Рарус-СПб 26.01.2017
	// МХ-1 
	КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.МенеджерПечати = "Обработка.ПечатьОбщихФорм";
	КомандаПечати.Идентификатор = "МХ1";
	КомандаПечати.Представление = НСтр("ru='Акт о приеме-передаче ТМЦ на хранение (МХ-1)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	//---DubI Рарус-СПб
	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КомплектДокументов") Тогда
		КоллекцияПечатныхФорм.Очистить();
		СформироватьКомплектПечатныхФорм(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати);
	КонецЕсли;
	
	//+++DubI Рарус-СПб 26.01.2017
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "МХ1") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "МХ1", НСтр("ru='Акт о приеме-передаче ТМЦ на хранение (МХ-1)'"), СформироватьПечатнуюФормуМХ1(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	//---DubI Рарус-СПб
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

//+++DubI Рарус-СПб 26.01.2017
// Формирует печатную форму МХ-1
//
Функция СформироватьПечатнуюФормуМХ1(МассивОбъектов, ОбъектыПечати) 
	
	КолонкаКодов = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	Если Не ЗначениеЗаполнено(КолонкаКодов) Тогда
		КолонкаКодов = "Код";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Номер КАК Номер,
	|	Документ.Дата КАК Дата,
	|	Документ.Дата КАК ДатаДокумента,
	|	Документ.Организация КАК Организация,
	|	Документ.Организация.Префикс КАК Префикс,
	|	Документ.Контрагент,
	|	Документ.Подразделение,
	|	Документ.Ответственный,
	|	Документ.Договор.Номер,
	|	Документ.Договор.Дата,
	|	Документ.Ответственный.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Документ.пкЗаявкаНаРемонтЗапчасти КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивДокументов)
	|	И Документ.Ссылка.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения1 КАК ЕдиницаИзмеренияНаименование,
	|	&ТекстЗапросаКодЕдиницыИзмерения1 КАК ЕдиницаИзмеренияКод,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения1 КАК ВидУпаковки,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.Количество КАК Количество,
	|	Товары.Номенклатура.Код
	|ИЗ
	|	Документ.пкЗаявкаНаРемонтЗапчасти.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В(&МассивДокументов)
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаНаименованиеЕдиницыИзмерения1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование", "Товары.Упаковка", "Товары.Номенклатура"));
			
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКодЕдиницыИзмерения1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код", "Товары.Упаковка", "Товары.Номенклатура"));
			
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_МХ1";
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.пкЗаявкаНаРемонтЗапчасти.ПФ_MXL_МХ1");
	
	МассивРезультатов 		= Запрос.ВыполнитьПакет();
	ДанныеПечати			= МассивРезультатов[0].Выбрать();
	ВыборкаПоДокументам 	= МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	Пока ДанныеПечати.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ВыборкаПоДокументам.Сбросить();
		Если НЕ ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска) Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе %1 отсутствуют товары. Печать акта не требуется'"),
				ДанныеПечати.Ссылка);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
			
			Продолжить;
			
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		// Выводим общие реквизиты шапки
		СведенияОПоклажедержателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
		СведенияОПоклажедателе    = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(
		ТабличныйДокумент,
		Макет,
		ОбластьМакета,
		ДанныеПечати.Ссылка);
		
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		
		СтруктураПараметров = Новый Структура;
		СписокПараметров = "ПолноеНаименование,ФактическийАдрес,Телефоны";
		СтруктураПараметров.Вставить("НомерДокумента", ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеПечати.Номер));
		СтруктураПараметров.Вставить("ПредставлениеПоклажедержателя", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоклажедержателе,СписокПараметров));
		СтруктураПараметров.Вставить("ПредставлениеСклада", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоклажедержателе,СписокПараметров));
		СтруктураПараметров.Вставить("ПредставлениеПоклажедателя", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоклажедателе,СписокПараметров) + ", " + ДанныеПечати.Подразделение);
		СтруктураПараметров.Вставить("ПоклажедержательПоОКПО", СведенияОПоклажедержателе.КодПоОКПО);
		СтруктураПараметров.Вставить("ВидДеятельностиПоОКДП", СведенияОПоклажедержателе.КодОКВЭД);
		СтруктураПараметров.Вставить("ПоклажедательПоОКПО", СведенияОПоклажедателе.КодПоОКПО);
		
		ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим заголовок таблицы
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
		
		НомерСтраницы   = 1;
		
		// Создаем массив для проверки вывода
		МассивВыводимыхОбластей = Новый Массив;
		
		// Выводим многострочную часть документа
		ОбластьМакета           = Макет.ПолучитьОбласть("Строка");
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьВсего            = Макет.ПолучитьОбласть("Всего");
		ОбластьПодвала          = Макет.ПолучитьОбласть("Подвал");
		
		НомерСтроки = 0;
		ИтогоКоличество = 0;
		ИтогоКоличествоНаСтранице = 0;
		
		СтрокаТовары = ВыборкаПоДокументам.Выбрать();
		КоличествоСтрок = СтрокаТовары.Количество();
		Пока СтрокаТовары.Следующий() Цикл
			
			НомерСтроки = НомерСтроки + 1;
			СтруктураПараметров = Новый Структура("НомерСтроки,ИтогоКоличествоНаСтранице", НомерСтроки,ИтогоКоличествоНаСтранице);
			ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
			ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьМакета);
			МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
			
			Если НомерСтроки = КоличествоСтрок Тогда
				МассивВыводимыхОбластей.Добавить(ОбластьВсего);
				МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
			КонецЕсли;
			
			Если НЕ ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
				ОбластьИтоговПоСтранице.Параметры.Заполнить(СтруктураПараметров);
				ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
				ИтогоКоличествоНаСтранице = 0;
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
			КонецЕсли;
			
			ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице + СтрокаТовары.Количество;
			ИтогоКоличество = ИтогоКоличество + СтрокаТовары.Количество;
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЦикла;
		
		СтруктураПараметров = Новый Структура("ИтогоКоличество,ИтогоКоличествоНаСтранице", ИтогоКоличество,ИтогоКоличествоНаСтранице);
		
		// Выводим итоги по последней странице
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьИтоговПоСтранице.Параметры.Заполнить(СтруктураПараметров);
		ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
		
		// Выводим итоги по документу в целом
		ОбластьВсего.Параметры.Заполнить(СтруктураПараметров);
		ТабличныйДокумент.Вывести(ОбластьВсего);
		
		ОбластьМакета = Макет.ПолучитьОбласть("УсловияХраненияПустые");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ОсобыеОтметкиПустые");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим итоги по документу
		ОбластьПодвала.Параметры.Заполнить(ДанныеПечати);
		СтруктураПараметров = Новый Структура("МОЛ", ?(ЗначениеЗаполнено(ДанныеПечати.ФизическоеЛицо), ДанныеПечати.ФизическоеЛицо, ДанныеПечати.Ответственный));
		ОбластьПодвала.Параметры.Заполнить(СтруктураПараметров);
		ТабличныйДокумент.Вывести(ОбластьПодвала);
			
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
	
КонецФункции
//---DubI Рарус-СПб

Функция СформироватьКомплектПечатныхФорм(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати) Экспорт
	
	Перем АдресКомплектаПечатныхФорм;
	
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура") И ПараметрыПечати.Свойство("АдресКомплектаПечатныхФорм", АдресКомплектаПечатныхФорм) Тогда
		
		КомплектПечатныхФорм = ПолучитьИзВременногоХранилища(АдресКомплектаПечатныхФорм);
		
	Иначе
		
		КомплектПечатныхФорм = РегистрыСведений.НастройкиПечатиОбъектов.КомплектПечатныхФорм(
			Метаданные.Документы.пкЗаявкаНаРемонтЗапчасти.ПолноеИмя(),
			МассивОбъектов, Неопределено);
		
	КонецЕсли;
		
	Если КомплектПечатныхФорм = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураТипов = Новый Соответствие;
	СтруктураТипов.Вставить("Документ.пкЗаявкаНаРемонтЗапчасти", МассивОбъектов);
	
	РегистрыСведений.НастройкиПечатиОбъектов.СформироватьКомплектВнешнихПечатныхФорм(
		"Документ.пкЗаявкаНаРемонтЗапчасти",
		МассивОбъектов,
		ПараметрыПечати,
		КоллекцияПечатныхФорм,
		ОбъектыПечати);
	
КонецФункции

Функция КомплектПечатныхФорм() Экспорт
	
	КомплектПечатныхФорм = РегистрыСведений.НастройкиПечатиОбъектов.ПодготовитьКомплектПечатныхФорм();
	
	Возврат КомплектПечатныхФорм;
	
КонецФункции

Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
КонецПроцедуры

Функция ДоступныеДляШаблоновПечатныеФормы() Экспорт

	МассивДоступныхПечатныхФорм = Новый Массив;
	//ШаблоныСообщенийСервер.ДобавитьВМассивПечатныеФормыСчета(МассивДоступныхПечатныхФорм);
	
	Возврат МассивДоступныхПечатныхФорм

КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Функция ПолноеИмяОбъекта()
	
	Возврат "Документ.пкЗаявкаНаРемонтЗапчасти";
	
КонецФункции

#КонецОбласти

#КонецОбласти

Процедура ПрочееОприходованиеТоваровНаСервере(ОбъектФормы, Объект) Экспорт
	//ДокументСоздания=Документы.ВнутреннееПотреблениеТоваров.СоздатьДокумент();
	ДокументСоздания = ДанныеФормыВЗначение(ОбъектФормы, Тип("ДокументОбъект.ПрочееОприходованиеТоваров"));
	ЗаполнитьЗначенияСвойств(ДокументСоздания, Объект,,"Дата,Номер");
	ДокументСоздания.Организация = Справочники.Организации.УправленческаяОрганизация;
	ДокументСоздания.пкДокументОснование = Объект.Ссылка;  
	
	ДокументСоздания.ХозяйственнаяОперация=Перечисления.ХозяйственныеОперации.ОприходованиеЗаСчетДоходов;
	ДокументСоздания.Склад=Объект.СкладПолучатель;
	ДокументСоздания.Ответственный = Пользователи.ТекущийПользователь();
	ДокументСоздания.ВидЦены = Справочники.Склады.УчетныйВидЦены(ДокументСоздания.Склад);
	
	//ДокументСоздания.ДатаРаспоряжения = ТекущаяДата();
	//ТекущийВидДеятельностиОрганизации = Справочники.Организации.ЗакупкаПодДеятельность(ДокументСоздания.Организация, ДокументСоздания.Склад);
	//Если ТекущийВидДеятельностиОрганизации = Перечисления.ТипыНалогообложенияНДС.ПоФактическомуИспользованию Тогда
	//	
	//	ДокументСоздания.ПотреблениеДляДеятельности = Справочники.Организации.НалогообложениеНДС(
	//		ДокументСоздания.Организация,
	//		ДокументСоздания.Склад,
	//		ДокументСоздания.Дата);
	//Иначе
	//	ДокументСоздания.ПотреблениеДляДеятельности=Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	//КонецЕсли;
	
	Для каждого СтрокаТоварыОснования Из Объект.Товары Цикл
		ТекущаяСтрока=ДокументСоздания.Товары.Добавить();
		ТекущаяСтрока.Номенклатура = СтрокаТоварыОснования.Номенклатура;
		ТекущаяСтрока.Характеристика = СтрокаТоварыОснования.ХарактеристикаПринято;
		ТекущаяСтрока.Упаковка = СтрокаТоварыОснования.Упаковка;
		ТекущаяСтрока.Количество = СтрокаТоварыОснования.КоличествоПринято*(СтрокаТоварыОснования.Количество/СтрокаТоварыОснования.КоличествоУпаковок);
		ТекущаяСтрока.КоличествоУпаковок = СтрокаТоварыОснования.КоличествоПринято;
		
		//ПарамСтатьи = Новый Структура;
		//ПарамСтатьи.Вставить("Организация", ДокументСоздания.Организация);
		//ПарамСтатьи.Вставить("Подразделение", ДокументСоздания.Подразделение);
		//ПарамСтатьи.Вставить("ХозяйственнаяОперация", ДокументСоздания.ХозяйственнаяОперация);
		//СтруктураДействий = Новый Структура;
		//СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
		//СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
		//СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		//СтруктураДействий.Вставить("ЗаполнитьПризнакАналитикаРасходовОбязательна");
		//СтруктураДействий.Вставить("ЗаполнитьПризнакРаспределениеНДС");
		//СтруктураДействий.Вставить("ЗаполнитьСтатьюАналитикуРасходовПоУмолчанию", Истина);
		//СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		//СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		//НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
		//
		//СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		//	ЭтаФорма.ИмяФормы, "Товары"));
		//ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, неопределено);
		
		//+rarus_spb_b.mihail 2018.09.19
		// Обновление: адаптация под релиз 2.4.5
		//ДоходыИРасходыСервер.ЗаполнитьСтатьюАналитикуРасходовПоУмолчанию(ДокументСоздания.ХозяйственнаяОперация,
		//																 ДокументСоздания.Организация,
		//																 ДокументСоздания.Подразделение,
		//																 ТекущаяСтрока);
		СтатьяАналитика = ДоходыИРасходыСервер.СтатьяАналитикаРасходовПоУмолчанию(
													ДокументСоздания.ХозяйственнаяОперация,
													ДокументСоздания.Организация,
													ДокументСоздания.Подразделение,
													ТекущаяСтрока.Номенклатура);
		
		Если СтатьяАналитика.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтатьяАналитика);
		КонецЕсли;
		//-rarus_spb_b.mihail 2018.09.19
																		 
	КонецЦикла;   
	
   	ЗначениеВДанныеФормы(ДокументСоздания, ОбъектФормы);
КонецПроцедуры

Процедура ПоступлениеТоваровУслугНаСервереНаСервере(ОбъектФормы, Объект) Экспорт

	ДокументСоздания	= ДанныеФормыВЗначение(ОбъектФормы, Тип("ДокументОбъект.ПриобретениеТоваровУслуг"));
		
	ЗаполнитьЗначенияСвойств(ДокументСоздания, Объект,,"Дата,Номер");
	////ДокументСоздания.Организация			= Справочники.Организации.УправленческаяОрганизация;
	//ДокументСоздания.Организация			= Объект.Организация;
	ДокументСоздания.пкДокументОснование	= Объект.Ссылка;  
	////ДокументСоздания.Приоритет			= Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(ДокументСоздания.Приоритет);
	ДокументСоздания.ХозяйственнаяОперация	= Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	ДокументСоздания.Склад					= Объект.СкладОтправитель;
	ДокументСоздания.Автор					= Пользователи.ТекущийПользователь();
	
	Для каждого Строка Из Объект.Товары Цикл
	    СтрДокументСоздания = ДокументСоздания.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрДокументСоздания,Строка);	
	КонецЦикла; 
	
	//ЗакупкиСервер.УстановитьДоступностьДоговора(ОбъектФормы, Форма.Элементы.Договор.Доступность, Форма.Элементы.Договор.Видимость, ОбъектФормы.Договор);
	
	//ДокументСоздания.ФормаОплатыЗаявки		= Перечисления.ФормыОплаты.Безналичная;
	//ДокументСоздания.Статус					= Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована;
	//ДокументСоздания.ЖелательнаяДатаПлатежа	= Объект.ДатаПоДаннымКлиента;
	//
	//СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	//СтруктураПараметров.Организация		= ДокументСоздания.Организация;
	//СтруктураПараметров.ФормаОплаты		= ДокументСоздания.ФормаОплатыЗаявки;
	//СтруктураПараметров.БанковскийСчет	= ДокументСоздания.БанковскийСчет;
	//ДокументСоздания.БанковскийСчет		= ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	//
	//СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
	//СтруктураПараметров.Организация	= ДокументСоздания.Организация;
	//СтруктураПараметров.ФормаОплаты	= ДокументСоздания.ФормаОплатыЗаявки;
	//СтруктураПараметров.Касса		= ДокументСоздания.Касса;
	//ДокументСоздания.Касса			= ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
	//
	//ДокументСоздания.БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(
	//			ДокументСоздания.Контрагент,
	//			ДокументСоздания.Валюта);
	//Если ДокументСоздания.РасшифровкаПлатежа.Количество()>0 Тогда
	//	НоваяРасшифровка	= ДокументСоздания.РасшифровкаПлатежа[0];
	//Иначе	
	//	НоваяРасшифровка	= ДокументСоздания.РасшифровкаПлатежа.Добавить();
	//КонецЕсли;
	//НоваяРасшифровка.Заказ							= Объект.Договор;
	//НоваяРасшифровка.Партнер						= Объект.Партнер;
	//НоваяРасшифровка.ВалютаВзаиморасчетов			= Объект.Валюта;
	//НоваяРасшифровка.СуммаВзаиморасчетов			= Объект.СуммаДокумента;
	//НоваяРасшифровка.Сумма							= Объект.СуммаДокумента;
	//НоваяРасшифровка.СтавкаНДС						= Объект.СтавкаНДС;
	//НоваяРасшифровка.СуммаНДС						= Объект.СуммаНДС;
	//НоваяРасшифровка.СтатьяДвиженияДенежныхСредств	= Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщику;
		
	ЗначениеВДанныеФормы(ДокументСоздания, ОбъектФормы);	

КонецПроцедуры

Процедура ЗаявкаНаРасходываниеСредствНаСервере(ОбъектФормы, Объект) Экспорт
	
	ДокументСоздания	= ДанныеФормыВЗначение(ОбъектФормы, Тип("ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств"));
	ЗаполнитьЗначенияСвойств(ДокументСоздания, Объект,,"Дата,Номер");
	//ДокументСоздания.Организация			= Справочники.Организации.УправленческаяОрганизация;
	ДокументСоздания.Организация			= Объект.Организация;
	ДокументСоздания.пкДокументОснование	= Объект.Ссылка;  
	//ДокументСоздания.Приоритет			= Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(ДокументСоздания.Приоритет);
	ДокументСоздания.ХозяйственнаяОперация	= Перечисления.ХозяйственныеОперации.ОплатаПоставщику;
	ДокументСоздания.Автор					= Пользователи.ТекущийПользователь();
	ДокументСоздания.ФормаОплатыЗаявки		= Перечисления.ФормыОплаты.Безналичная;
	ДокументСоздания.Статус					= Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована;
	ДокументСоздания.ЖелательнаяДатаПлатежа	= Объект.ДатаПоДаннымКлиента;
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация		= ДокументСоздания.Организация;
	СтруктураПараметров.ФормаОплаты		= ДокументСоздания.ФормаОплатыЗаявки;
	СтруктураПараметров.БанковскийСчет	= ДокументСоздания.БанковскийСчет;
	ДокументСоздания.БанковскийСчет		= ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация	= ДокументСоздания.Организация;
	СтруктураПараметров.ФормаОплаты	= ДокументСоздания.ФормаОплатыЗаявки;
	СтруктураПараметров.Касса		= ДокументСоздания.Касса;
	ДокументСоздания.Касса			= ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
	
	ДокументСоздания.БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(
				ДокументСоздания.Контрагент,
				ДокументСоздания.Валюта);
	Если ДокументСоздания.РасшифровкаПлатежа.Количество()>0 Тогда
		НоваяРасшифровка	= ДокументСоздания.РасшифровкаПлатежа[0];
	Иначе	
		НоваяРасшифровка	= ДокументСоздания.РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	НоваяРасшифровка.Заказ							= Объект.Договор;
	НоваяРасшифровка.Партнер						= Объект.Партнер;
	НоваяРасшифровка.ВалютаВзаиморасчетов			= Объект.Валюта;
	НоваяРасшифровка.СуммаВзаиморасчетов			= Объект.СуммаДокумента;
	НоваяРасшифровка.Сумма							= Объект.СуммаДокумента;
	НоваяРасшифровка.СтавкаНДС						= Объект.СтавкаНДС;
	НоваяРасшифровка.СуммаНДС						= Объект.СуммаНДС;
	НоваяРасшифровка.СтатьяДвиженияДенежныхСредств	= Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщику;
	
	//НовоеРаспределение	= ДокументСоздания.РаспределениеПоСчетам.Добавить();
	//НовоеРаспределение.БанковскийСчетКасса	= ДокументСоздания.БанковскийСчет;
	//НовоеРаспределение.Сумма					= Объект.СуммаДокумента;
	
	ЗначениеВДанныеФормы(ДокументСоздания, ОбъектФормы);
	
КонецПроцедуры

Процедура СоздатьСписаниеНаРасходыНаСервере(ОбъектФормы, Объект) Экспорт
	
	ДокументВнутреннегоПотребления = ДанныеФормыВЗначение(ОбъектФормы, Тип("ДокументОбъект.ВнутреннееПотреблениеТоваров"));
	//ДокументВнутреннегоПотребления=Документы.ВнутреннееПотреблениеТоваров.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(ДокументВнутреннегоПотребления, Объект,,"Дата,Номер");
	ДокументВнутреннегоПотребления.Организация		= Справочники.Организации.УправленческаяОрганизация;
	ДокументВнутреннегоПотребления.пкЗаявкаНаРемонт	= Объект.Ссылка;  
	
	ДокументВнутреннегоПотребления.ХозяйственнаяОперация	= Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
	ДокументВнутреннегоПотребления.Склад					= Объект.СкладОтправитель;
	ДокументВнутреннегоПотребления.Ответственный			= Пользователи.ТекущийПользователь();
	ДокументВнутреннегоПотребления.ДатаРаспоряжения			= ТекущаяДата();
	ДокументВнутреннегоПотребления.ВидЦены					= Справочники.Склады.УчетныйВидЦены(ДокументВнутреннегоПотребления.Склад);
	
	ТекущийВидДеятельностиОрганизации = Справочники.Организации.ЗакупкаПодДеятельность(ДокументВнутреннегоПотребления.Организация, ДокументВнутреннегоПотребления.Склад, ДокументВнутреннегоПотребления.ДатаРаспоряжения);
	Если ТекущийВидДеятельностиОрганизации = Перечисления.ТипыНалогообложенияНДС.ПоФактическомуИспользованию Тогда
		ДокументВнутреннегоПотребления.ПотреблениеДляДеятельности = Справочники.Организации.НалогообложениеНДС(
			ДокументВнутреннегоПотребления.Организация,
			ДокументВнутреннегоПотребления.Склад,
			ДокументВнутреннегоПотребления.Дата);
	Иначе
		ДокументВнутреннегоПотребления.ПотреблениеДляДеятельности=Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	КонецЕсли;
	
	Для каждого СтрокаТоварыОснования Из Объект.Товары Цикл
		ТекущаяСтрока	= ДокументВнутреннегоПотребления.Товары.Добавить();
		ТекущаяСтрока.Номенклатура			= СтрокаТоварыОснования.Номенклатура;
		ТекущаяСтрока.Характеристика		= СтрокаТоварыОснования.Характеристика;
		ТекущаяСтрока.Упаковка				= СтрокаТоварыОснования.Упаковка;
		ТекущаяСтрока.Количество			= СтрокаТоварыОснования.Количество;
		ТекущаяСтрока.КоличествоУпаковок	= СтрокаТоварыОснования.КоличествоУпаковок;
		
		ПарамСтатьи = Новый Структура;
		ПарамСтатьи.Вставить("Организация", ДокументВнутреннегоПотребления.Организация);
		ПарамСтатьи.Вставить("Подразделение", ДокументВнутреннегоПотребления.Подразделение);
		ПарамСтатьи.Вставить("ХозяйственнаяОперация", ДокументВнутреннегоПотребления.ХозяйственнаяОперация);
		
		//СтруктураДействий = Новый Структура;
		//СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
		//СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
		//СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		//СтруктураДействий.Вставить("ЗаполнитьПризнакАналитикаРасходовОбязательна");
		//СтруктураДействий.Вставить("ЗаполнитьПризнакРаспределениеНДС");
		//СтруктураДействий.Вставить("ЗаполнитьСтатьюАналитикуРасходовПоУмолчанию", Истина);
		//СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		//СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		//НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
		//
		//СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		//	ЭтаФорма.ИмяФормы, "Товары"));
		//ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, неопределено);
		
		//+rarus_spb_b.mihail 2018.09.19
		// Обновление: адаптация под релиз 2.4.5
		//ДоходыИРасходыСервер.ЗаполнитьСтатьюАналитикуРасходовПоУмолчанию(ДокументВнутреннегоПотребления.ХозяйственнаяОперация,
		//																 ДокументВнутреннегоПотребления.Организация,
		//																 ДокументВнутреннегоПотребления.Подразделение,
		//																 ТекущаяСтрока);
		СтатьяАналитика = ДоходыИРасходыСервер.СтатьяАналитикаРасходовПоУмолчанию(
													ДокументВнутреннегоПотребления.ХозяйственнаяОперация,
													ДокументВнутреннегоПотребления.Организация,
													ДокументВнутреннегоПотребления.Подразделение,
													ТекущаяСтрока.Номенклатура);
		
		Если СтатьяАналитика.Следующий() Тогда
			ТекущаяСтрока.СтатьяРасходов    = СтатьяАналитика.СтатьяРасходов;
			ТекущаяСтрока.АналитикаРасходов	= СтатьяАналитика.АналитикаРасходов;
		КонецЕсли;
		//-rarus_spb_b.mihail 2018.09.19
																		 
	КонецЦикла;   
	
   	ЗначениеВДанныеФормы(ДокументВнутреннегоПотребления, ОбъектФормы);
	
КонецПроцедуры

// Возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект
// см. ОбщегоНазначения.ЗначениеРеквизитаОбъекта()
// Если полученное значение не имеет тип булево, возвращается значение Ложь.
//
Функция ЗначениеРеквизитаОбъектаТипаБулево(Ссылка, ИмяРеквизита) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	Если ТипЗнч(Результат) <> Тип("Булево") Тогда
		Результат = Ложь;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);	
	Возврат Результат
КонецФункции

#КонецЕсли
