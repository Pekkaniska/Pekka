&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

/////////////////////////////////////////////////////////////////////////
&НаСервере
Функция ПолучитьЗначениеРеквизитаНаСервере(тОбъект, ИмяРевизита)
	
	Возврат тОбъект[ИмяРевизита];
	
КонецФункции

&НаСервере
Функция ПолучитьЗначениеПеречисленияНаСервере(ИмяПеречисления, ИмяЗначения)
	
	Возврат Перечисления[ИмяПеречисления][ИмяЗначения];
	
КонецФункции

/////////////////////////////////////////////////////////////////////////
// Стандартное (почти)

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

#Область ОбработчикиКомандФормы
// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
		
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
	ОписаниеКоманды = ПодключаемыеКомандыКлиентПовтИсп.ОписаниеКоманды(Команда.Имя, ЭтаФорма.ПараметрыПодключаемыхКоманд.АдресТаблицыКоманд);
	Если ОписаниеКоманды.Свойство("Вид") И ОписаниеКоманды.Вид = "СозданиеНаОсновании" И ОписаниеКоманды.Представление = "Приобретение товаров и услуг" Тогда 
		ЕстьРазныеДоговора = ПроверитьРазныеДоговора(Объект.Ссылка);
		
		Если ЕстьРазныеДоговора Тогда	
			ТекстПредупреждения = НСтр("ru = 'В табличной части обнаружены разные договора,
			|поэтому будет взят договор из шапки документа! '");
			Обработчик = Новый ОписаниеОповещения("ПродолжитьВыполнениеКомандыПослеПредупреждения", ЭтотОбъект, Команда);
	        ПоказатьПредупреждение(Обработчик,ТекстПредупреждения,,);
			Возврат;
		КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры


&НаКлиенте
Процедура ПродолжитьВыполнениеКомандыПослеПредупреждения(Команда) Экспорт

	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);	

КонецПроцедуры


&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

#КонецОбласти

/////////////////////////////////////////////////////////////////////////
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать

	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	ЗаполнитьНаСервере();
КонецПроцедуры

&НаСервере
Функция ПолучитьМакетСервер(МакетИмя)
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьМакет(МакетИмя);
КонецФункции

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ПриИзмененииОрганизацииСервер();
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизацииСервер()
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	КонтрагентПриИзмененииСервер();
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	ДокументЗакупки = РеквизитФормыВЗначение("Объект");
	ДокументЗакупки.ЗаполнитьУсловияЗакупокПоУмолчанию(Ложь);
	ЗначениеВРеквизитФормы(ДокументЗакупки, "Объект");
	
	ЗакупкиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	//Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
	//	ЗаполнитьДоговорПоУмолчанию();
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	ДоговорПриИзмененииСервер();
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииСервер()
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(ОбъектСсылка, ИмяРеквизита)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, ИмяРеквизита);
	
КонецФункции

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	КэшированныеЗначения = Неопределено;
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	//Если ЗначениеЗаполнено(ТекущаяСтрока.Упаковка) Тогда
	//	ТекущаяСтрока.Упаковка = ПолучитьЗначениеРеквизита(ТекущаяСтрока.Номенклатура, "ЕдиницаИзмерения");
	//	СтруктураДействий = Новый Структура;
	//	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	//	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	//	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
	//		ЭтаФорма.ИмяФормы, "Товары"));
	//	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//КонецЕсли; 	

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	КэшированныеЗначения = Неопределено;
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	КэшированныеЗначения = Неопределено;
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	КэшированныеЗначения = Неопределено;
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	КэшированныеЗначения=Неопределено;
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	ПартнерПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПартнерПриИзмененииНаСервере()
	ДокументЗакупки = РеквизитФормыВЗначение("Объект");
	ДокументЗакупки.ЗаполнитьУсловияЗакупокПоУмолчанию(Ложь);
	ЗначениеВРеквизитФормы(ДокументЗакупки, "Объект");
	ЗакупкиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
КонецПроцедуры

&НаКлиенте
Процедура СкладОтправительПриИзменении(Элемент)
	СкладОтправительПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СкладОтправительПриИзмененииНаСервере()
	Объект.СкладПолучатель = Объект.СкладОтправитель;
КонецПроцедуры

&НаКлиенте
Процедура СуммаПриИзменении(Элемент)
	СуммаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СуммаПриИзмененииНаСервере()
	ТекПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(Объект.СтавкаНДС);
	Объект.СуммаНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(Объект.Сумма, ТекПроцентНДС, Объект.ЦенаВключаетНДС,Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС);
	Если не Объект.ЦенаВключаетНДС Тогда
		Объект.СуммаДокумента=Объект.Сумма+Объект.СуммаНДС;	
	Иначе
		Объект.СуммаДокумента=Объект.Сумма;	
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	СуммаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСписаниеНаРасходы(Команда)
	Если ЭтаФорма.Модифицированность Тогда
		Сообщить("Сначала сохраните документ!");
		Возврат;	
	КонецЕсли; 
	Форма = ПолучитьФорму("Документ.ВнутреннееПотреблениеТоваров.ФормаОбъекта");
	ОбъектФормы = Форма.Объект;
	СоздатьСписаниеНаРасходыНаСервере(ОбъектФормы);
	КопироватьДанныеФормы(ОбъектФормы, Форма.Объект);
	Форма.ПриЧтенииСозданииНаСервере();
	Форма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ПрочееОприходованиеТоваров(Команда)
	Если ЭтаФорма.Модифицированность Тогда
		Сообщить("Сначала сохраните документ!");
		Возврат;	
	КонецЕсли; 
	Форма = ПолучитьФорму("Документ.ПрочееОприходованиеТоваров.ФормаОбъекта");
	ОбъектФормы = Форма.Объект;
	ПрочееОприходованиеТоваровНаСервере(ОбъектФормы);
	КопироватьДанныеФормы(ОбъектФормы, Форма.Объект);
	Форма.ПриЧтенииСозданииНаСервере();
	Форма.Открыть();
	
КонецПроцедуры

&НаСервере
Процедура  ПрочееОприходованиеТоваровПриЧтенииФормы(ДанныеФормыКоллекцияТовары)

	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить(
		"ЗаполнитьПризнакХарактеристикиИспользуются",
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	ПараметрыЗаполненияРеквизитов.Вставить(
		"ЗаполнитьПризнакАртикул",
		Новый Структура("Номенклатура", "Артикул"));
	ПараметрыЗаполненияРеквизитов.Вставить(
		"ЗаполнитьПризнакТипНоменклатуры",
		Новый Структура("Номенклатура", "ТипНоменклатуры"));
	ПараметрыЗаполненияРеквизитов.Вставить(
		"ЗаполнитьПризнакВедетсяУчетПоГТД",
		Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(ДанныеФормыКоллекцияТовары,ПараметрыЗаполненияРеквизитов);

КонецПроцедуры
 
&НаСервере
Процедура ПрочееОприходованиеТоваровНаСервере(ОбъектФормы)
	Документы.пкЗаявкаНаРемонтЗапчасти.ПрочееОприходованиеТоваровНаСервере(ОбъектФормы,Объект.Ссылка);
КонецПроцедуры


&НаСервере
Процедура СоздатьСписаниеНаРасходыНаСервере(ОбъектФормы)
	Документы.пкЗаявкаНаРемонтЗапчасти.СоздатьСписаниеНаРасходыНаСервере(ОбъектФормы,Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРасходываниеСредств(Команда)
	Если ЭтаФорма.Модифицированность Тогда
		Сообщить("Сначала сохраните документ!");
		Возврат;	
	КонецЕсли; 
	Форма = ПолучитьФорму("Документ.ЗаявкаНаРасходованиеДенежныхСредств.ФормаОбъекта");
	ОбъектФормы = Форма.Объект;
	ЗаявкаНаРасходываниеСредствНаСервере(ОбъектФормы);
	КопироватьДанныеФормы(ОбъектФормы, Форма.Объект);
	Форма.Открыть();
КонецПроцедуры
&НаСервере
Процедура ЗаявкаНаРасходываниеСредствНаСервере(ОбъектФормы)
	Документы.пкЗаявкаНаРемонтЗапчасти.ЗаявкаНаРасходываниеСредствНаСервере(ОбъектФормы,Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ТекстСообщения=ПроверитьНаСервереКоличество (Отказ);
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		Сообщить(ТекстСообщения,СтатусСообщения.Внимание);
	КонецЕсли; 
КонецПроцедуры

Функция ПроверитьНаСервереКоличество (Отказ)

	Если  Объект.Статус=Перечисления.пкСтатусыЗаявкиНаРемонтЗапчасти.Выполнен или Объект.Статус=Перечисления.пкСтатусыЗаявкиНаРемонтЗапчасти.Закрыт Тогда
		Для каждого СтрокаТовары Из Объект.Товары Цикл
			Если Не ЗначениеЗаполнено(СтрокаТовары.КоличествоПринято) Тогда
				Отказ=Истина;
				Возврат "При данном статусе требуется заполнение колонки ""Кол-во принято""!";
			КонецЕсли; 
		КонецЦикла; 	
	КонецЕсли; 
	
	Возврат "";
	
КонецФункции // ()

&НаСервере
Процедура ЦенаВключаетНДСПриИзмененииНаСервере()
	СуммаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	ЦенаВключаетНДСПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПоступлениеТоваровУслугНаСервере(ОбъектФормы)
	Документы.пкЗаявкаНаРемонтЗапчасти.ПоступлениеТоваровУслугНаСервереНаСервере(ОбъектФормы,Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеТоваровУслуг(Команда)
	Если ЭтаФорма.Модифицированность Тогда
		Сообщить("Сначала сохраните документ!");
		Возврат;	
	КонецЕсли;
	Форма = ПолучитьФорму("Документ.ПриобретениеТоваровУслуг.ФормаОбъекта");
	ОбъектФормы = Форма.Объект;
	ПоступлениеТоваровУслугНаСервере(ОбъектФормы);
	КопироватьДанныеФормы(ОбъектФормы, Форма.Объект);
	ВидимостьДоступностьДоговора = ОпределитьВидимостьДоговора(ОбъектФормы);
	Форма.Элементы.Договор.Видимость = ВидимостьДоступностьДоговора.ВидимостьЭлемента;
	Форма.Элементы.Договор.Доступность = ВидимостьДоступностьДоговора.ДоступностьЭлемента;
	Форма.Открыть();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьВидимостьДоговора(ОбъектФормы)

	ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	ИспользуютсяДоговорыКонтрагентов     = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками");
	
	ЗаполненыВлияющиеПоля = 
		ЗначениеЗаполнено(ОбъектФормы.Партнер)
		И (ЗначениеЗаполнено(ОбъектФормы.Контрагент) Или ИспользоватьПартнеровКакКонтрагентов)
		И ЗначениеЗаполнено(ОбъектФормы.Организация);
		
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ОбъектФормы, "Соглашение")
		И ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками") Тогда
		
		Если ЗначениеЗаполнено(ОбъектФормы.Соглашение) Тогда
			ИспользуютсяДоговорыКонтрагентов =
				ИспользуютсяДоговорыКонтрагентов
				И ОбщегоНазначенияУТ.ЗначениеРеквизитаОбъектаТипаБулево(ОбъектФормы.Соглашение, "ИспользуютсяДоговорыКонтрагентов");
		КонецЕсли;
		
	КонецЕсли;
	
	ДоступностьЭлемента = ЗаполненыВлияющиеПоля И ИспользуютсяДоговорыКонтрагентов;
	
	ВидимостьЭлемента = ИспользуютсяДоговорыКонтрагентов;

	Возврат Новый Структура("ДоступностьЭлемента,ВидимостьЭлемента",ДоступностьЭлемента,ВидимостьЭлемента);
	
КонецФункции // ОпределитьВидимотсьДоговора()

&НаСервере
Функция ПроверитьРазныеДоговора(Ссылка)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ пкЗаявкаНаРемонтЗапчастиТовары.СтрДоговор) КАК КоличествоДоговоров
		|ПОМЕСТИТЬ ВтДоговора
		|ИЗ
		|	Документ.пкЗаявкаНаРемонтЗапчасти.Товары КАК пкЗаявкаНаРемонтЗапчастиТовары
		|ГДЕ
		|	пкЗаявкаНаРемонтЗапчастиТовары.Ссылка = &Ссылка
		|	И пкЗаявкаНаРемонтЗапчастиТовары.СтрДоговор <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДоговора.КоличествоДоговоров КАК КоличествоДоговоров
		|ИЗ
		|	ВтДоговора КАК ВтДоговора
		|ГДЕ
		|	ВтДоговора.КоличествоДоговоров > 1";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой()Тогда
	
		Возврат Ложь;
	
	Иначе
	
		 Возврат Истина;
	
	КонецЕсли;
		
КонецФункции



