#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

///////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если Статус=Перечисления.пкСтатусыЗаявкиНаРемонтЗапчасти.Выполнен или Статус=Перечисления.пкСтатусыЗаявкиНаРемонтЗапчасти.Закрыт Тогда
		
		Для каждого СтрокаТовары Из Товары Цикл
			Если Не ЗначениеЗаполнено(СтрокаТовары.КоличествоПринято) Тогда
				Отказ=Истина;	
			КонецЕсли; 
		КонецЦикла; 	
	КонецЕсли; 
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	Если ЭтоНовый() И НЕ ЗначениеЗаполнено(Номер) Тогда
		УстановитьНовыйНомер();
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ПроверяемыеРеквизиты.Добавить("Организация");
	//ПроверяемыеРеквизиты.Добавить("Подразделение");
	//ПроверяемыеРеквизиты.Добавить("ТопливныеКарты.Сотрудник");
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	//ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	//Документы.пкЗаявкаНаРемонтЗапчасти.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	//ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	//
	//СформироватьСписокРегистровДляКонтроля();
	//ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	//ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	//ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	//
	//РегистрыСведений.пкРемонтЗапчастей.СформироватьЗаписи(Отказ, РежимПроведения, ЭтотОбъект);
	
	//{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	// регистр пкРемонтЗапчастей 
	Движения.пкРемонтЗапчастей.Записывать = Истина;
	Для Каждого ТекСтрокаТовары Из Товары Цикл
		Движение = Движения.пкРемонтЗапчастей.Добавить();
		Движение.Период = Дата;
		Движение.Организация = Организация;
		Движение.Партнер = Партнер;
		Движение.Контрагент = Контрагент;
		Движение.Подразделение = Подразделение;
		Движение.Номенклатура = ТекСтрокаТовары.Номенклатура;
		Движение.Характеристика = ТекСтрокаТовары.Характеристика;
		Движение.КоличествоОтдано = ТекСтрокаТовары.Количество;
		Если ТекСтрокаТовары.КоличествоПринято>0 Тогда
			ДвижениеПринято = Движения.пкРемонтЗапчастей.Добавить();
			ЗаполнитьЗначенияСвойств(ДвижениеПринято,Движение);
			ДвижениеПринято.Характеристика=ТекСтрокаТовары.ХарактеристикаПринято;
			ДвижениеПринято.КоличествоПринято = ТекСтрокаТовары.КоличествоПринято;
			ДвижениеПринято.КоличествоОтдано = 0;
		КонецЕсли; 
	КонецЦикла;

	//}}__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	СформироватьСписокРегистровДляКонтроля();
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Организация				= ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Подразделение			= ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Пользователи.ТекущийПользователь());
	Ответственный			= Пользователи.ТекущийПользователь();
	Автор 					= Пользователи.ТекущийПользователь();
	ОтветственныеЛица 		= ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(Организация, ТекущаяДата());
	Подписывает				= ОтветственныеЛица.Руководитель;
	Валюта                	= ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета(Валюта);
	Менеджер              	= Пользователи.ТекущийПользователь();
	СкладОтправитель      	= ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(СкладОтправитель,Ложь);
	СкладПолучатель			= СкладОтправитель;	
	Статус             		= Перечисления.пкСтатусыЗаявкиНаРемонтЗапчасти.Запланирован;
	ЦенаВключаетНДС			= Истина;
	СтавкаНДС				= Перечисления.СтавкиНДС.НДС18;
	ЗаполнениеСвойствПоСтатистикеСервер.ЗаполнитьСвойстваОбъекта(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура СформироватьСписокРегистровДляКонтроля()
	
	Массив = Новый Массив;
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

Процедура ЗаполнитьУсловияЗакупокПоУмолчанию(ПересчитатьЦены = Истина) Экспорт
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(ЭтотОбъект, Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика
	//, Новый Структура("ВалютаВзаиморасчетов",Валюта)
	);
	
	//ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчет);
	//ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Партнер, КонтактноеЛицо);
	//АдресДоставкиДляПоставщика = ФормированиеПечатныхФорм.ПолучитьАдресИзКонтактнойИнформации(Организация, "Фактический");

КонецПроцедуры

