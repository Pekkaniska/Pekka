////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБЪЕКТА

Перем ПризнакФормированияТиповыхДокументов Экспорт; // Если Истина, то при проведении будут формироваться типовые док.
Перем ПризнакФормированияТиповыхДокументовТолькоДляНовых Экспорт; // Если Истина, то при формировании типовых
//документов, они будут формироваться только для тех документов УАТ, для которых еще не были сформированы типовые.
Перем ПризнакРедактированияИзПутевогоЛиста Экспорт; // Если документ вводится/редактируется из путевого листа
Перем ПризнакРедактированияИзПутевогоЛистаСсылка Экспорт; // Если документ вводится/редактируется из путевого листа, ссылка на путевой лист


// Проверим соответствие типа АЗС и вида заправки
// 
Функция КонтрольТипаАЗС(СтрокаСообщения) Экспорт
	Результат = Истина;
	
	Если НЕ ЗначениеЗаполнено(АЗС) Тогда
		Возврат Истина;
	КонецЕсли;
		
	Если (НЕ АЗС.ЭтоАЗССклад) И (ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаСклад
		ИЛИ ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад
		ИЛИ ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаТалоны) Тогда
		
		СтрокаСообщения = "Должна быть выбрана АЗС - склад!";
		Результат = Ложь;
	КонецЕсли;
	
	Если АЗС.ЭтоАЗССклад И (ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПоставщик
		ИЛИ ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта
		ИЛИ ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаНаличные) Тогда
		
		СтрокаСообщения = "Должна быть выбрана АЗС - контрагент!";
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Функция проверяет, есть ли рассчитанные путевые листы, содержащие данную заправку
Функция ЕстьПутевыеЛисты()
	флЕстьРассчитанныйПутевойЛист = Ложь;
	Для Каждого ТекСтрока Из Заправки Цикл
		Если ТекСтрока.ПутевойЛист.Проведен И ТекСтрока.ПутевойЛист.Рассчитан И
					ПризнакРедактированияИзПутевогоЛистаСсылка <> ТекСтрока.ПутевойЛист Тогда
			флЕстьРассчитанныйПутевойЛист = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат флЕстьРассчитанныйПутевойЛист;
КонецФункции

// Процедура вызывается при изменении ГСМ
Процедура ЗаправкиПриИзмененииГСМ(ТекСтрока) Экспорт
	Если ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаНаличные
		ИЛИ ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПоставщик
		ИЛИ ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта
		ИЛИ ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад Тогда
		
		СтруктураЦенаВалюта = уатОбщегоНазначения.уатНайтиЦенуНоменклатуры(ТекСтрока.Дата, ТекСтрока.ГСМ,
			ТекСтрока.ВидЦеныПоставщика, АЗС, Соглашение, Ложь);
		
		Если ЗначениеЗаполнено(СтруктураЦенаВалюта.Цена) Тогда
			ТекСтрока.Цена = СтруктураЦенаВалюта.Цена;
			ТекСтрока.Сумма = ТекСтрока.Цена * ТекСтрока.Количество;
			уатОбщегоНазначенияТиповыеСервер.уатРассчитатьСуммуНДСТабЧасти(ТекСтрока, ЭтотОбъект);
			ТекСтрока.Валюта = СтруктураЦенаВалюта.Валюта;
		КонецЕсли;
	Иначе
		ТекСтрока.Цена = 0;
		ТекСтрока.Сумма = 0;
		ТекСтрока.СуммаНДС = 0;
		ТекСтрока.СтавкаНДС = Неопределено;
		ТекСтрока.Валюта = Неопределено;
	КонецЕсли;
КонецПроцедуры

Функция ЗаправкаПоОдномуПЛ(ТекПЛ)
	тблЗаправки = Заправки.Выгрузить().Скопировать();
	НоваяСтрока = тблЗаправки.Добавить();
	НоваяСтрока.ПутевойЛист = ТекПЛ;
	тблЗаправки.Свернуть("ПутевойЛист");
	
	Возврат тблЗаправки.Количество() <= 1;
КонецФункции


//==================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ОчиститьСтоимостьНоменклатурыГСМ()
	Для Каждого ТекСтрока Из Заправки Цикл
		ТекСтрока.Сумма = 0;
		ТекСтрока.СуммаНДС = 0;
	КонецЦикла;
КонецПроцедуры


//==================================================================================
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) 
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
		СтандартнаяОбработка = Ложь;
		
		Если Ссылка.Пустая() Тогда 
			Организация   = ДанныеЗаполнения.Организация;
			Ответственный = ДанныеЗаполнения.Ответственный;
			Дата          = ДанныеЗаполнения.ДатаВыезда;
			
			уатОбщегоНазначенияТиповые.ЗаполнитьШапкуДокумента(ЭтотОбъект, ПользователиКлиентСервер.ТекущийПользователь());
			
			Если ЗначениеЗаполнено(ДанныеЗаполнения.ТранспортноеСредство) И НЕ ЗначениеЗаполнено(Колонна) Тогда
				Колонна = уатОбщегоНазначения.МестонахождениеТС(ДанныеЗаполнения.ТранспортноеСредство, Дата).Колонна;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(АЗС) Тогда
				АЗС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
						ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнаяАЗС);
				Если ТипЗнч(АЗС.Контрагент_Склад) = Тип("СправочникСсылка.Контрагенты") Тогда
					ДоговорКонтрагента = уатЗаполнениеДокументов.ПолучитьОсновнойДоговорКонтрагента(АЗС.Контрагент_Склад, "СПоставщиком");
					Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("ТипДоговора", "ДоговорыКонтрагентов") Тогда
						Если ДоговорКонтрагента.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СКомитентом") Тогда
							ОтражатьВНалоговомУчете = Ложь;
						КонецЕсли;
					Иначе
						Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
							ОтражатьВНалоговомУчете = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ВидДвиженияГСМ) Тогда
				ВидДвиженияГСМ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
									ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойВидЗаправки);
			КонецЕсли;
			
			//если заправка введена по нескольким ПЛ, то нельзя менять дату и некоторые другие реквизиты шапки
			ЗаправкаПоОдномуПЛ = ЗаправкаПоОдномуПЛ(ДанныеЗаполнения);
			Если ЗаправкаПоОдномуПЛ ИЛИ НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
				ДокументОснование = ДанныеЗаполнения;
			КонецЕсли;
			Если ЗаправкаПоОдномуПЛ ИЛИ НЕ ЗначениеЗаполнено(Организация) Тогда
				Организация = ДанныеЗаполнения.Организация;
			КонецЕсли;
			Если ЗаправкаПоОдномуПЛ ИЛИ НЕ ЗначениеЗаполнено(Ответственный) Тогда
				Ответственный = ДанныеЗаполнения.Ответственный;
			КонецЕсли;
			Если ЗаправкаПоОдномуПЛ ИЛИ НЕ ЗначениеЗаполнено(Дата) Тогда
				Дата = ДанныеЗаполнения.ДатаВыезда;
			КонецЕсли;
		КонецЕсли;
		
		//добавим основной ТС
		НоваяСтрока = Заправки.Добавить();
		НоваяСтрока.ПутевойЛист = ДанныеЗаполнения.Ссылка;
		НоваяСтрока.ТС          = ДанныеЗаполнения.ТранспортноеСредство;
		НоваяСтрока.Дата        = ДанныеЗаполнения.ДатаВыезда;
		НоваяСтрока.Водитель    = ДанныеЗаполнения.Водитель1;
		Если ВидДвиженияГСМ <> Перечисления.уатВидыДвиженияГСМ.ЗаправкаТалоны Тогда
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.ГСМ) И ЗначениеЗаполнено(ДанныеЗаполнения.ТранспортноеСредство) Тогда
				НоваяСтрока.ГСМ = ДанныеЗаполнения.ТранспортноеСредство.уатМодель.ОсновноеТопливо;
				ЗаправкиПриИзмененииГСМ(НоваяСтрока);
			КонецЕсли;	
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.ПластиковаяКарта) И
						(ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта
						ИЛИ ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад) Тогда
				НоваяСтрока.ПластиковаяКарта = уатОбщегоНазначения.уатПластиковаяКартаТСВодителя(НоваяСтрока.ТС,
												НоваяСтрока.Водитель);
			КонецЕсли;	
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.Валюта) Тогда
			НоваяСтрока.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
		КонецЕсли;
		НоваяСтрока.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
		уатОбщегоНазначенияТиповыеСервер.уатРассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	флОтражатьВПартиях = (ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаСклад
		ИЛИ	ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад
		ИЛИ	ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаТалоны);
		
	// Инициализация дополнительных свойств для проведения документа.
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
		
	// Заполняем цены номенклатуры, если конфигурация объединена с типовой и складской учет ведется также типовой
	Если флОтражатьВПартиях Тогда
		тблЗаправки = Заправки.Выгрузить().Скопировать();
		тблЗаправки.Колонки.ГСМ.Имя = "Номенклатура";
		Для Каждого ТекСтрока Из тблЗаправки Цикл
			Если ТекСтрока.Плотность <> 0 Тогда
				ТекСтрока.Количество = ТекСтрока.Количество * ТекСтрока.Плотность;
			КонецЕсли;
		КонецЦикла;
		
		#Если Сервер Тогда
			уатИнтерфейсВзаимодействияСERPСервер.уатЗаполнитьЦеныНоменклатуры(ЭтотОбъект, "Заправки", ЭтотОбъект.АЗС.Контрагент_Склад);
		#КонецЕсли
		
		Записать();
	КонецЕсли;
	
	// Инициализация данных документа - остальные (все кроме партий)
    Документы.уатЗаправкаГСМ.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
    // Подготовка наборов записей.
    уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
    
    // Отражение в разделах учета.
	уатПроведение.ОтразитьОстаткиГСМНаТС(ДополнительныеСвойства, Движения, Отказ);
	уатПроведение.ОтразитьПартииТЖ(ДополнительныеСвойства, Движения, Отказ);
	уатПроведение.ОтразитьОборотыПоЗаправкамГСМ(ДополнительныеСвойства, Движения, Отказ);
	уатПроведение.ОтразитьРасходТЖ(ДополнительныеСвойства, Движения, Отказ);

    // Запись наборов записей.
    уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
    
    Если Отказ И флОтражатьВПартиях Тогда
		ОчиститьСтоимостьНоменклатурыГСМ();
	КонецЕсли;
КонецПроцедуры

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	СтрокаСообщения = "";

	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ЭтотОбъект);
	
	Если (НЕ Отказ) И (НЕ КонтрольТипаАЗС(СтрокаСообщения)) Тогда
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если (ПометкаУдаления ИЛИ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения) И ЕстьПутевыеЛисты() Тогда
		Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ЭтотОбъект);
		ТекстСообщения = "Не удалось записать: существуют рассчитанные путевые листы, содержащие данную заправку!";
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъект);
	КоличествоДокумента = Заправки.Итог("Количество");
КонецПроцедуры // ПередЗаписью

// Процедура вызывается перед удалением документа
//
Процедура ПередУдалением(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьПутевыеЛисты() Тогда
		Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ЭтотОбъект);
		ТекстСообщения = "Не удалось удалить: существуют рассчитанные путевые листы, содержащие данную заправку!";
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
	КонецЕсли;
КонецПроцедуры // ПередЗаписью

Процедура ПриКопировании(ОбъектКопирования)
	Для Каждого ТекСтрока Из Заправки Цикл
		Если ТекСтрока.ПутевойЛист.Рассчитан Тогда
			ТекСтрока.ПутевойЛист = Неопределено;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ЭтотОбъект);
	
	Если ЭтотОбъект.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаНаличные 
		Или ЭтотОбъект.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПоставщик Тогда 
		
		ПроверяемыеРеквизиты.Добавить("ДоговорКонтрагента");
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Если ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаНаличные
			ИЛИ ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта
			ИЛИ ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад
			ИЛИ ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПоставщик Тогда
			
			СтруктураПолей = Новый Структура();
			Если ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта
				ИЛИ ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад Тогда
				СтруктураПолей.Вставить("ПластиковаяКарта");
			КонецЕсли;
			//СтруктураПолей.Вставить("Цена");
			//СтруктураПолей.Вставить("Сумма");
			
			Если (ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаНаличные
				ИЛИ ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПоставщик
				ИЛИ ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта)
				И УчитыватьНДС Тогда
				
				СтруктураПолей.Вставить("СтавкаНДС");
			КонецЕсли;
			
			Если ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаНаличные Тогда
				СтруктураПолей.Вставить("Водитель");
			КонецЕсли;
			
			уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Заправки", СтруктураПолей, Отказ,
				Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	//проверка по наличию бака в ТС
	Если НЕ Отказ Тогда
		Для Каждого СтрокаТаблицы Из Заправки Цикл
			Если ЗначениеЗаполнено(Колонна) И Колонна <> уатОбщегоНазначения.МестонахождениеТС(СтрокаТаблицы.ТС, СтрокаТаблицы.Дата).Колонна Тогда
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке("В строке """ + СтрокаТаблицы.НомерСтроки + """ табличной части ""Заправки""
												| колонна ТС не совпадает с указанной в шапке документа!", Отказ, Заголовок);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицы.ТС) И (НЕ СтрокаТаблицы.ТС.уатМодель.НаличиеТопливногоБака) Тогда
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке("В строке """ + СтрокаТаблицы.НомерСтроки + """ табличной части ""Заправки""
												| указано ТС/Оборудование у которого отсутствует топливный бак!", Отказ, Заголовок);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтрокаСообщения = "";
	Если (НЕ Отказ) И (НЕ КонтрольТипаАЗС(СтрокаСообщения)) Тогда
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Для Каждого ТекСтрока Из Заправки Цикл
			Если ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта
				ИЛИ ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад Тогда
				Если ТекСтрока.ПластиковаяКарта.ДатаОкончания <> Дата(1,1,1) Тогда
					Если ТекСтрока.ПластиковаяКарта.ДатаОкончания < ТекСтрока.Дата Тогда 
						уатОбщегоНазначенияТиповые.СообщитьОбОшибке("В строке №" + ТекСтрока.НомерСтроки + " топливная карта просрочена", Отказ, Заголовок);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если ТекСтрока.Количество < 0 ИЛИ ТекСтрока.Сумма < 0 Тогда
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке("В строке №" + ТекСтрока.НомерСтроки + " указано отрицательное значение количества или суммы", Отказ, Заголовок);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	// Инициализация дополнительных свойств для проведения документа
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	// Контроль
	Документы.уатЗаправкаГСМ.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
	// Очищаем цены ГСМ
	Если НЕ Отказ И (ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаСклад ИЛИ
		ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаТалоны) Тогда
		
		ОчиститьСтоимостьНоменклатурыГСМ();
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

ПризнакРедактированияИзПутевогоЛиста = Ложь;
ПризнакРедактированияИзПутевогоЛистаСсылка = Документы.уатПутевойЛист.ПустаяСсылка();