
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	об = РеквизитФормыВЗначение("Объект");
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(об, Отказ, СтандартнаяОбработка, ЭтаФорма, ДопПараметрыОткрытие);
	ЗначениеВРеквизитФормы(Об,"Объект");
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	//фильтруем программно по виду договора - сделано для корректной отработки фильтра в объед. конф. БП3+Стд2
	мсвПараметрыВыбора = Новый Массив;
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("ТипДоговора", "ДоговорыКонтрагентов") Тогда
		мсвПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ТипДоговора", ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПоставщиком")));
	Иначе
		мсвПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком")));
	КонецЕсли;
	Элементы.ДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(мсвПараметрыВыбора);
	
	уатОбщегоНазначенияСервер.ЗаполнитьШапкуДокумента(
		Объект,
		,
		Параметры.ЗначениеКопирования,
		Параметры.Основание,
		,
		,
		,
		Параметры.ЗначенияЗаполнения
	);
	
	//заполнение при вводе из путевого листа
	Если Параметры.Свойство("ДобавлениеЗаправкиИзПЛ") И Параметры.ДобавлениеЗаправкиИзПЛ = Истина Тогда
		ДобавлениеЗаправкиИзПЛ = Истина;
		ПризнакРедактированияИзПутевогоЛиста = Истина;
		ПризнакРедактированияИзПутевогоЛистаСсылка = Параметры.ПутевойЛист;
		ДокОбъект = РеквизитФормыВЗначение("Объект");
		ДокОбъект.ПризнакРедактированияИзПутевогоЛиста = Истина;
		ДокОбъект.ПризнакРедактированияИзПутевогоЛистаСсылка = Параметры.ПутевойЛист;
		
		ДокОбъект.Заполнить(Параметры.ПутевойЛист);
		
		Если Параметры.Свойство("ЗаправкаКопирование") И ТипЗнч(Параметры.ЗаправкаКопирование) = Тип("Структура") Тогда
			ДокОбъект.Заправки.Очистить();
			НоваяЗаправка = ДокОбъект.Заправки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗаправка, Параметры.ЗаправкаКопирование);
			НоваяЗаправка.ПутевойЛист = Параметры.ПутевойЛист;
			ДокОбъект.АЗС = Параметры.ЗаправкаКопирование.АЗС;
			ДокОбъект.ВидДвиженияГСМ = Параметры.ЗаправкаКопирование.ВидДвиженияГСМ;
			ДокОбъект.ДоговорКонтрагента = Параметры.ЗаправкаКопирование.Договор;
		КонецЕсли;
		
		ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	КонецЕсли;
	
	//заполнение при редактировании из путевого листа
	Если Параметры.Свойство("РедактированиеЗаправкиИзПЛ") И Параметры.РедактированиеЗаправкиИзПЛ = Истина Тогда
		РедактированиеЗаправкиИзПЛ = Истина;
		ПризнакРедактированияИзПутевогоЛиста = Истина;
		ПризнакРедактированияИзПутевогоЛистаСсылка = Параметры.ПутевойЛист;
		ДокОбъект = РеквизитФормыВЗначение("Объект");
		ДокОбъект.ПризнакРедактированияИзПутевогоЛиста = Истина;
		ДокОбъект.ПризнакРедактированияИзПутевогоЛистаСсылка = Параметры.ПутевойЛист;
		ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	КонецЕсли;
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	ДатаДокумента = уатОбщегоНазначения.уатДатаБезСекунд(ДатаДокумента);
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если Объект.Ссылка.Пустая() Тогда
		СтруктураОбъектовНастроек = Новый Структура;
		СтруктураОбъектовНастроек.Вставить("Организация", Объект.Организация);
		СтруктураОбъектовНастроек.Вставить("Подразделение", Объект.ПодразделениеОрганизации);
		Если НЕ ЗначениеЗаполнено(Объект.АЗС) Тогда
			Объект.АЗС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек,
				ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнаяАЗС);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ВидДвиженияГСМ) тогда
			Объект.ВидДвиженияГСМ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек,
				ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойВидЗаправки);
		КонецЕсли;
		
		Если Объект.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаСклад
			ИЛИ Объект.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаТалоны
			ИЛИ Объект.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад Тогда
			
			Объект.УчитыватьНДС = Ложь;
			Объект.СуммаВключаетНДС = Ложь;
		Иначе
			Объект.УчитыватьНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, "УчитыватьНДС");
			Объект.СуммаВключаетНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, "СуммаВключаетНДС");
		КонецЕсли;
				
		Если Объект.Заправки.Количество() = 0 Тогда
			НоваяСтрока = Объект.Заправки.Добавить();
			НоваяСтрока.Дата      = ДатаДокумента;
			Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
				мТекущаяВалютаВзаиморасчетов = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ДоговорКонтрагента,
				"ВалютаВзаиморасчетов");
				НоваяСтрока.Валюта    = мТекущаяВалютаВзаиморасчетов;
			Иначе
				НоваяСтрока.Валюта    = ВалютаРегламентированногоУчета;
			КонецЕсли;
			НоваяСтрока.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			ПользователиКлиентСервер.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
			
			Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
				НоваяСтрока.ПутевойЛист = Объект.ДокументОснование;
				НоваяСтрока.ТС = Объект.ДокументОснование.ТранспортноеСредство;
				НоваяСтрока.Дата = Объект.ДокументОснование.ДатаВыезда;
				НоваяСтрока.Водитель = Объект.ДокументОснование.Водитель1;
				
				Если Объект.ВидДвиженияГСМ <> Перечисления.уатВидыДвиженияГСМ.ЗаправкаТалоны Тогда
					НоваяСтрока.ГСМ = Объект.ДокументОснование.ТранспортноеСредство.уатМодель.ОсновноеТопливо;
				КонецЕсли;
			Иначе
				НоваяСтрока.Водитель = Справочники.Сотрудники.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Заправки.Количество() = 0 Тогда
		НоваяСтрока = Объект.Заправки.Добавить();
		Элементы.Заправки.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	Иначе
		Элементы.Заправки.ТекущаяСтрока = Объект.Заправки[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	Если Параметры.Свойство("ОткрытИзПЛ") И Параметры.ОткрытИзПЛ Тогда
		ТекущийЭлемент = Элементы.ЗаправкиКоличество;
		Если Объект.Заправки.Количество() > 0 Тогда
			Элементы.Заправки.ТекущаяСтрока = 0;
		КонецЕсли;
		ТекущийЭлемент.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.ПодразделениеОрганизации, "Объект.Организация");
	
	ОбновитьНомерТСвТЧ();
	
	ИспользоватьСоглашенияСПоставщиками = уатИнтерфейсВзаимодействияСERPВызовСервера.уатЗначениеФункциональнойОпции("ИспользоватьСоглашенияСПоставщиками");
	
	// УправлениеПредприятием.СлужебныеПодсистемы
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	// Конец УправлениеПредприятием.СлужебныеПодсистемы
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	мТиповойДокумент = Неопределено;
	мОписаниеПредупреждения = "";
	Если НЕ Объект.Ссылка.Пустая() И уатТиповыеДокументы.НайтиТиповойДокументДляДокументаУАТ(Объект.Ссылка, мТиповойДокумент, мОписаниеПредупреждения) Тогда
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект), мОписаниеПредупреждения, 10);
		Возврат;
	КонецЕсли;
	
	ПриОткрытииФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(ДополнительныеПараметры) Экспорт
    
    ТолькоПросмотр = Истина;
    Элементы.ЗаправкиГруппаЗаполнить.Доступность = Ложь;
    
    ПриОткрытииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииФрагмент()
    
    Перем СтруктураНадписи, ТекВидЗаправки;
    
    Если Объект.Ссылка.Пустая() Тогда
        Если ЗначениеЗаполнено(Объект.АЗС) Тогда
            АЗСПриИзменении(Неопределено);
        КонецЕсли;
        Если ЗначениеЗаполнено(Объект.ВидДвиженияГСМ) Тогда
            ВидДвиженияГСМПриИзменении(Неопределено);
        КонецЕсли;
    КонецЕсли;
    
    Элементы.ВидДвиженияГСМ.СписокВыбора.Очистить();
    Для Каждого ТекВидЗаправки Из уатОбщегоНазначения.СписокВидовЗаправок() Цикл
        Элементы.ВидДвиженияГСМ.СписокВыбора.Добавить(ТекВидЗаправки.Значение, ТекВидЗаправки.Представление);
    КонецЦикла;
    
    УстановитьТипЗаправки();
    УстановитьОтборАЗС();
    УстановитьОтборДоговора();
    
    ОбновитьВсегоВТЧЗаправки();
    ОбновитьСписокВыбораВалюты();
	ОбновитьСписокПластиковыхКарт();
    
    Если Объект.Заправки.Количество()>1 Тогда
        СпособРедактирования = 1;
    Иначе
        СпособРедактирования = 0;
    КонецЕсли;
    
    УстановитьВидимость();
    
    // Сформируем надпись Налоги.
    СтруктураНадписи = Новый Структура;
    СтруктураНадписи.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
    СтруктураНадписи.Вставить("УчитыватьНДС", Объект.УчитыватьНДС);
    Налоги = СформироватьНадписьНалоги(СтруктураНадписи);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ДобавлениеЗаправкиИзПЛ Тогда
		Оповестить("ДобавлениеЗаправкиИзПЛ", Объект.Ссылка);
	КонецЕсли;
	Если РедактированиеЗаправкиИзПЛ Тогда
		Оповестить("РедактированиеЗаправкиИзПЛ", Объект.Ссылка);
	КонецЕсли;
	
	#Если Клиент Тогда
		Оповестить("ЗаправкаГСМ_Запись", Объект.Ссылка, ЭтотОбъект);
	#КонецЕсли
	
	ОбновитьВсегоВТЧЗаправки();
	
	Если ПараметрыЗаписи.Свойство("ПревышениеУровняТоплива") Тогда
		ПоказатьПредупреждение(Неопределено, ПараметрыЗаписи.ПревышениеУровняТоплива);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьНомерТСвТЧ();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьНомерТСвТЧ();
	
	// Проверим не превышает ли заправка уровень топлива в баке
	Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекущийОбъект.Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.ПредупреждатьПриПревышенииУровняТопливаВБаке) Тогда
		
		ПроверитьПревышениеУровняТопливаВБаке(ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			//Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	СтруктураОбъектовНастроек = Новый Структура;
	СтруктураОбъектовНастроек.Вставить("Организация", Объект.Организация);
	СтруктураОбъектовНастроек.Вставить("Подразделение", Объект.ПодразделениеОрганизации);
	
	Объект.АЗС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ОсновнаяАЗС"));
	АЗСПриИзменении(Неопределено);
	
	Объект.ВидДвиженияГСМ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ОсновнойВидЗаправки"));
	ВидДвиженияГСМПриИзменении(Неопределено);
	
	Объект.УчитыватьНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
	ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС"));
	Объект.СуммаВключаетНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
	ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.СуммаВключаетНДС"));
	
	РассчитатьСуммуНДСвТабЧасти();
	ОбновитьВсегоВТЧЗаправки();
	
	СтруктураНадписи = Новый Структура;
	
	СтруктураНадписи.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураНадписи.Вставить("УчитыватьНДС", Объект.УчитыватьНДС);
	Налоги = СформироватьНадписьНалоги(СтруктураНадписи);
	
	УстановитьВидимость();

КонецПроцедуры

&НаКлиенте
Процедура ВидДвиженияГСМПриИзменении(Элемент)
	УстановитьТипЗаправки();
	
	Если Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаСклад")
		ИЛИ Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны")
		ИЛИ Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад") Тогда
		
		Объект.УчитыватьНДС = Ложь;
		Объект.СуммаВключаетНДС = Ложь;
	Иначе
		Объект.УчитыватьНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, "УчитыватьНДС");
		Объект.СуммаВключаетНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, "СуммаВключаетНДС");
	КонецЕсли;
	
	СтрокаСообщения = "";
	Если НЕ КонтрольТипаАЗС(СтрокаСообщения) тогда
		Объект.АЗС = Неопределено;
	КонецЕсли;
	
	Если Объект.Заправки.Количество() Тогда
		мТС = Объект.Заправки[0].ТС;
	Иначе
		Возврат;
	КонецЕсли;
	
	//ТекСтрокаЗаправки = Элементы.Заправки.ТекущиеДанные;
	
	Для Каждого ТекСтрокаЗаправки из Объект.Заправки Цикл 
		ТекСтрокаЗаправки.Плотность = Неопределено;
		Если Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта")
			ИЛИ Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад") Тогда
			
			Если мТС = Неопределено Тогда
				ТекСтрокаЗаправки.ГСМ = Неопределено;
				ТекСтрокаЗаправки.ПластиковаяКарта = Неопределено;
			Иначе
				ТекСтрокаЗаправки.ГСМ = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
					уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(мТС, "уатМодель"), "ОсновноеТопливо");
				ТекСтрокаЗаправки.ПластиковаяКарта = 
					уатОбщегоНазначения.уатПластиковаяКартаТСВодителя(мТС, ТекСтрокаЗаправки.Водитель);
			КонецЕсли;		
		Иначе
			ТекСтрокаЗаправки.ПластиковаяКарта = Неопределено;
		КонецЕсли;
		Если Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаСклад") 
			ИЛИ Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад") Тогда
			ТекСтрокаЗаправки.Плотность = уатОбщегоНазначения.уатПрочитатьРеквизитГСМ(ТекСтрокаЗаправки.ГСМ).Плотность;
		КонецЕсли;
		
	КонецЦикла;

	Если Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаСклад")
		ИЛИ Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны") Тогда
		Объект.ДоговорКонтрагента = Неопределено;
	КонецЕсли;
	
	УстановитьОтборАЗС();
КонецПроцедуры

&НаКлиенте
Процедура АЗСПриИзменении(Элемент)
	УстановитьОтборДоговора();
	
	СтрокаСообщения = "";
	Если Не КонтрольТипаАЗС(СтрокаСообщения) Тогда
		ПоказатьПредупреждение(, СтрокаСообщения, 30);
		Объект.АЗС = Неопределено;
	Иначе
		Контрагент_Склад = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.АЗС, "Контрагент_Склад");
		Если ТипЗнч(Контрагент_Склад) = Тип("СправочникСсылка.Контрагенты") Тогда
			Объект.Партнер = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Контрагент_Склад, "Партнер");
			Если уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ДоговорКонтрагента, "Контрагент") <> Контрагент_Склад Тогда
				Объект.ДоговорКонтрагента = уатЗаполнениеДокументов.ПолучитьОсновнойДоговорКонтрагента(Контрагент_Склад, "СПоставщиком");
				ПриИзмененииДоговора();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)
	ПриИзмененииСоглашенияСервер();
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСоглашенияСервер()
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		Если Объект.Партнер <> Объект.Соглашение.Партнер Тогда
			Объект.Партнер = Объект.Соглашение.Партнер;
		КонецЕсли;
		Если Объект.АЗС.Контрагент_Склад <> Объект.Соглашение.Контрагент Тогда
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	уатАЗС.Ссылка
			|ИЗ
			|	Справочник.уатАЗС КАК уатАЗС
			|ГДЕ
			|	уатАЗС.Контрагент_Склад = &Контрагент_Склад
			|	И НЕ уатАЗС.ПометкаУдаления");
			Запрос.УстановитьПараметр("Контрагент_Склад", Объект.Соглашение.Контрагент);
			ВыборкаАЗС = Запрос.Выполнить().Выбрать();
			Если ВыборкаАЗС.Следующий() Тогда
				Объект.АЗС = ВыборкаАЗС.Ссылка;
			Иначе
				Объект.АЗС = Неопределено;
			КонецЕсли;
		КонецЕсли;
		Для Каждого ТекСтрока Из Объект.Заправки Цикл
			ТекСтрока.ВидЦеныПоставщика = Объект.Соглашение.ВидЦеныПоставщика;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатИнтерфейсВзаимодействияСERPКлиент.уатНачалоВыбораСоглашенияСПоставщиком(
		Элемент,
		СтандартнаяОбработка,
		Объект.Партнер,
		Объект.Соглашение,
		Объект.Дата,
		Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	ПриИзмененииДоговора();
КонецПроцедуры

&НаКлиенте
Процедура ВодительПриИзменении(Элемент)
	Если Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта")
		ИЛИ Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад") Тогда
		Элементы.Заправки.ТекущиеДанные.ПластиковаяКарта = уатОбщегоНазначения.уатПластиковаяКартаТСВодителя(
		Элементы.Заправки.ТекущиеДанные.ТС, Элементы.Заправки.ТекущиеДанные.Водитель);
	КонецЕсли;
	ОбновитьСписокПластиковыхКарт();
КонецПроцедуры

&НаКлиенте
Процедура ВодительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекСтрока = Элементы.Заправки.ТекущиеДанные;
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, ТекСтрока.Водитель, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ГСМНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны") Тогда
		мГруппаГСМ = ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Талон");
	Иначе	
		мГруппаГСМ = ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Топливо");
	КонецЕсли;
	
	ДопПараметры = Новый Структура("ТопливоДоИзменения, ИмяПроцедурыОписаниеОповещения", Элементы.Заправки.ТекущиеДанные.ГСМ, "ОписаниеОповещенияВыбораГСМ");
	уатЗащищенныеФункцииКлиент.СписокГСМдляТС(Объект.Организация, Элементы.Заправки.ТекущиеДанные.ТС, мГруппаГСМ,, Истина, ЭтаФорма, ДопПараметры);
КонецПроцедуры

// Подключаемый динамически обработчик оповещения
&НаКлиенте
Процедура ОписаниеОповещенияВыбораГСМ(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ТекСтрока = Элементы.Заправки.ТекущиеДанные;
		ТекСтрока.ГСМ = Результат;
		Если Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаСклад") 
			Или  Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад") Тогда
			ТекСтрока.Плотность = уатОбщегоНазначения.уатПрочитатьРеквизитГСМ(Результат).Плотность;
		КонецЕсли;
		ГСМПриИзменении(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГСМОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекГСМ = Объект.Заправки[0].ГСМ;
	Если ЗначениеЗаполнено(ТекГСМ) Тогда
		ОткрытьФорму("РегистрСведений.уатНоменклатураГСМ.ФормаЗаписи", Новый Структура("Ключ",
		ПолучитьКлючЗаписиГСМ(ТекГСМ)), Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГСМПриИзменении(Элемент)
	ТекСтрока = Объект.Заправки[0];
	
	СтруктураЦенаВалюта = уатОбщегоНазначения.уатНайтиЦенуНоменклатуры(ТекСтрока.Дата, ТекСтрока.ГСМ,
		ТекСтрока.ВидЦеныПоставщика, Объект.АЗС, Объект.Соглашение, Ложь);
		
	Если ЗначениеЗаполнено(СтруктураЦенаВалюта.Цена) Тогда
		мЦена			= СтруктураЦенаВалюта.Цена;
		ТекСтрока.Цена	= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(мЦена,
			СтруктураЦенаВалюта.Валюта,
			ТекСтрока.Валюта,
			Объект.Дата, Объект.Дата);
		ЦенаПриИзменении(Неопределено);
	КонецЕсли;
	
	Если Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаСклад")
		ИЛИ Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад") Тогда
		ТекСтрока.Плотность = уатОбщегоНазначения.уатПрочитатьРеквизитГСМ(ТекСтрока.ГСМ).Плотность;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПластиковаяКартаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВладельцев = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Элементы.Заправки.ТекущиеДанные.ТС) Тогда
		СписокВладельцев.Добавить(Элементы.Заправки.ТекущиеДанные.ТС);
	КонецЕсли;
	Если ЗначениеЗаполнено(Элементы.Заправки.ТекущиеДанные.Водитель) Тогда
		СписокВладельцев.Добавить(Элементы.Заправки.ТекущиеДанные.Водитель);
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура();
	Если СписокВладельцев.Количество() <> 0 Тогда
		СтруктураОтбора.Вставить("КомуВыдана", СписокВладельцев);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.АЗС) Тогда
		СтруктураОтбора.Вставить("КемВыдана", Объект.АЗС);
	КонецЕсли;

	ПарамВыбора = Новый Структура("Отбор", СтруктураОтбора);

	ОткрытьФорму("Справочник.уатТопливныеКарты.ФормаВыбора",ПарамВыбора, Элемент,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПриИзменении(Элемент)
	РассчитатьСумму(Объект.Заправки[0]);
	РассчитатьСуммуНДС(Объект.Заправки[0]);
КонецПроцедуры

&НаКлиенте
Процедура ЦенаПриИзменении(Элемент)
	РассчитатьСумму(Объект.Заправки[0]);
	РассчитатьСуммуНДС(Объект.Заправки[0]);
КонецПроцедуры

&НаКлиенте
Процедура СуммаПриИзменении(Элемент)
	ПриИзмененииСуммы(Объект.Заправки[0]);
	РассчитатьСуммуНДС(Объект.Заправки[0]);
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	РассчитатьСуммуНДС(Объект.Заправки[0]);
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	СтруктураОбъектовНастроек = Новый Структура;
	СтруктураОбъектовНастроек.Вставить("Организация", Объект.Организация);
	СтруктураОбъектовНастроек.Вставить("Подразделение", Объект.ПодразделениеОрганизации);
	
	ОснВидЗаправки = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ОсновнойВидЗаправки"));
	Если ЗначениеЗаполнено(ОснВидЗаправки) И Объект.ВидДвиженияГСМ <> ОснВидЗаправки Тогда
		Объект.ВидДвиженияГСМ = ОснВидЗаправки;
		ВидДвиженияГСМПриИзменении(Неопределено);
	КонецЕсли;
	ОснАЗС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ОсновнаяАЗС"));
	Если ЗначениеЗаполнено(ОснАЗС) И Объект.АЗС <> ОснАЗС Тогда
		Объект.АЗС = ОснАЗС;
		АЗСПриИзменении(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СпособРедактрованияПриИзменении(Элемент)
	Если Не Булево(СпособРедактирования) И Объект.Заправки.Количество()>1 Тогда
		
		ТекстВопроса = "Все строки заправок, кроме первой, будут удалены.
		|Продолжить?";
		
		Ответ = Неопределено;

		
		ПоказатьВопрос(Новый ОписаниеОповещения("СпособРедактрованияПриИзмененииЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
        Возврат;
		
	Иначе
		
		Если Объект.Заправки.Количество()  = 0 Тогда
			НоваяЗаправка = Объект.Заправки.Добавить();
			НоваяЗаправка.Дата = ТекущаяДата();
		КонецЕсли;
		
		Элементы.Заправки.ТекущаяСтрока = Объект.Заправки[0].ПолучитьИдентификатор();
		СтрокаЗаправки = Элементы.Заправки.ТекущиеДанные;
		
	КонецЕсли;
	
	СпособРедактрованияПриИзмененииФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура СпособРедактрованияПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        СпособРедактирования = 1;
        Возврат;
    КонецЕсли;
    
    Пока Объект.Заправки.Количество()>1 Цикл
        СтрокаУдаления = Объект.Заправки[1];
        Объект.Заправки.Удалить(СтрокаУдаления);
    КонецЦикла;
    
    Элементы.Заправки.ТекущаяСтрока = Объект.Заправки[0].ПолучитьИдентификатор();
    СтрокаЗаправки = Элементы.Заправки.ТекущиеДанные;
    
    СтрокаЗаправки.Сумма = Объект.СуммаДокумента;
    
    РассчитатьСуммуНДС(СтрокаЗаправки);
    
    
    СпособРедактрованияПриИзмененииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура СпособРедактрованияПриИзмененииФрагмент()
    
    УстановитьВидимость();
	ОбновитьСписокПластиковыхКарт();

КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛистПриИзменении(Элемент)
	ТекСтрока = Элементы.Заправки.ТекущиеДанные;
	Если ТекСтрока = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ТекСтрока.ПутевойЛист) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекСтрока.ТС) Тогда
		мсвТС = ПолучитьТСИПрицепыПоПутевомуЛисту(ТекСтрока.ПутевойЛист);
		Если мсвТС.Найти(ТекСтрока.ТС) = Неопределено Тогда
			ТекСтрока.ТС = ПолучитьТСПоПутевомуЛисту(ТекСтрока.ПутевойЛист);
			ОбновитьНомерТСвТЧ(ТекСтрока.ПолучитьИдентификатор());
			ЗаправкиНомерТСПриИзменении(Элемент);
		КонецЕсли;
	Иначе
		ТекСтрока.ТС = ПолучитьТСПоПутевомуЛисту(ТекСтрока.ПутевойЛист);
		ОбновитьНомерТСвТЧ(ТекСтрока.ПолучитьИдентификатор());
		ЗаправкиНомерТСПриИзменении(Элемент);
	КонецЕсли;
	
	УстановитьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛистНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Элементы.Заправки.ТекущиеДанные.ТС) Тогда
		СтандартнаяОбработка = Ложь;
		мсвПутевыхЛистов = ПолучитьПутевыеЛистыПоТС(Элементы.Заправки.ТекущиеДанные.ТС);
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Ссылка", мсвПутевыхЛистов);
		ПараметрыФормы = Новый Структура("Отбор", СтруктураОтбора);
		ОткрытьФорму("Документ.уатПутевойЛист.ФормаВыбора", ПараметрыФормы, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛистОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекСтрока = Элементы.Заправки.ТекущиеДанные;
	Если ТекСтрока = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ТекСтрока.ПутевойЛист) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекСтрока.ТС) Тогда
		мсвТС = ПолучитьТСИПрицепыПоПутевомуЛисту(ТекСтрока.ПутевойЛист);
		Если мсвТС.Найти(ТекСтрока.ТС) = Неопределено Тогда
			ТекСтрока.ТС = ПолучитьТСПоПутевомуЛисту(ТекСтрока.ПутевойЛист);
			ОбновитьНомерТСвТЧ(ТекСтрока.ПолучитьИдентификатор());
			ЗаправкиНомерТСПриИзменении(Элемент);
		КонецЕсли;
	Иначе
		ТекСтрока.ТС = ПолучитьТСПоПутевомуЛисту(ТекСтрока.ПутевойЛист);
		ОбновитьНомерТСвТЧ(ТекСтрока.ПолучитьИдентификатор());
		ЗаправкиНомерТСПриИзменении(Элемент);
	КонецЕсли;
	
	УстановитьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаправки

&НаКлиенте
Процедура ЗаправкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекСтрока = Элементы.Заправки.ТекущиеДанные;
	Если Поле.Имя = "ЗаправкиПутевойЛист" И уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.ПутевойЛист, "Рассчитан") Тогда
		Попытка
			ПоказатьЗначение(, ТекСтрока.ПутевойЛист);
		Исключение
		КонецПопытки;
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиПередНачаломИзменения(Элемент, Отказ)
	мПутевойЛист = Элементы.Заправки.ТекущиеДанные.ПутевойЛист;
	Если уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(мПутевойЛист, "Проведен") И
		уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(мПутевойЛист, "Рассчитан") Тогда
		Если ПризнакРедактированияИзПутевогоЛиста И ПризнакРедактированияИзПутевогоЛистаСсылка = мПутевойЛист Тогда
		Иначе
			Отказ = Истина;
			ПоказатьПредупреждение(Новый ОписаниеОповещения("ЗаправкиПередНачаломИзмененияЗавершение", ЭтотОбъект, Новый Структура("мПутевойЛист, Элемент", мПутевойЛист, Элемент)), "Нельзя изменить заправку для закрытого путевого листа!");
			Возврат;
		КонецЕсли;
		
		ЗаправкиПередНачаломИзмененияФрагмент(мПутевойЛист, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиПередНачаломИзмененияЗавершение(ДополнительныеПараметры) Экспорт
	
	ЗаправкиПередНачаломИзмененияФрагмент(ДополнительныеПараметры.мПутевойЛист, ДополнительныеПараметры.Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиПередНачаломИзмененияФрагмент(Знач мПутевойЛист, Знач Элемент)
	
	Если Элемент.ТекущийЭлемент.Имя = "ЗаправкиПутевойЛист" Тогда
		ПоказатьЗначение(Неопределено, мПутевойЛист);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиПередУдалением(Элемент, Отказ)
	Если Объект.Заправки.Количество() = 1 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	//получили пут. лист
	мПутевойЛист = Элементы.Заправки.ТекущиеДанные.ПутевойЛист;
	Если уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(мПутевойЛист, "Проведен") И
		уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(мПутевойЛист, "Рассчитан") Тогда
		Если ПризнакРедактированияИзПутевогоЛиста И ПризнакРедактированияИзПутевогоЛистаСсылка = мПутевойЛист Тогда
		Иначе
			Отказ = Истина;
			ПоказатьПредупреждение(Неопределено, "Нельзя изменить заправку для закрытого путевого листа!");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если (НЕ ОтменаРедактирования) Тогда
		мПутевойЛист = Элементы.Заправки.ТекущиеДанные.ПутевойЛист;
		Если уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(мПутевойЛист, "Проведен") И
			уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(мПутевойЛист, "Рассчитан") Тогда
			Если ПризнакРедактированияИзПутевогоЛиста И ПризнакРедактированияИзПутевогоЛистаСсылка = мПутевойЛист Тогда
			Иначе
				Отказ = Истина;
				ПоказатьПредупреждение(Неопределено, "Нельзя добавить/изменить заправку для закрытого путевого листа!");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	мСписок = Новый СписокЗначений;
	
	Если НоваяСтрока Тогда
		ТекСтрока = Элементы.Заправки.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Валюта) Тогда
			ТекСтрока.Валюта = ?(ЗначениеЗаполнено(мТекущаяВалютаВзаиморасчетов), мТекущаяВалютаВзаиморасчетов, ВалютаРегламентированногоУчета);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекСтрока.СтавкаНДС) Тогда
			ТекСтрока.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			ПользователиКлиентСервер.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			СтруктураРеквизитовОснование = уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(
			Объект.ДокументОснование, "ТранспортноеСредство, ДатаВыезда, Водитель1");
			
			ТекСтрока.ПутевойЛист = Объект.ДокументОснование;
			ТекСтрока.ТС = СтруктураРеквизитовОснование.ТранспортноеСредство;
			ТекСтрока.НомерТС = уатОбщегоНазначения.уатПредставлениеТС(СтруктураРеквизитовОснование.ТранспортноеСредство, Объект.Организация);
			ТекСтрока.ПластиковаяКарта = уатОбщегоНазначения.уатПластиковаяКартаТСВодителя(ТекСтрока.ТС, ТекСтрока.Водитель);
			Если НЕ ЗначениеЗаполнено(ТекСтрока.Дата) Тогда 
				ТекСтрока.Дата = СтруктураРеквизитовОснование.ДатаВыезда;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ТекСтрока.Водитель) Тогда
				ТекСтрока.Водитель = СтруктураРеквизитовОснование.Водитель1;
			КонецЕсли;
			Если Объект.ВидДвиженияГСМ <> ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны") И
				НЕ ЗначениеЗаполнено(ТекСтрока.ГСМ) Тогда
				ТекСтрока.ГСМ = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
					СтруктураРеквизитовОснование.ТранспортноеСредство, "уатМодель"), "ОсновноеТопливо");
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Дата) Тогда
			ТекСтрока.Дата = Объект.Дата;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ТекСтрока.СтавкаНДС) Тогда
			ТекСтрока.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.АЗС) И ЗначениеЗаполнено(ТекСтрока.ГСМ) Тогда
			 ЗаправкиГСМПриИзменении(Элемент);
	 	КонецЕсли;
		Если НЕ Копирование Тогда
			ТекСтрока.Водитель = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьСписокВыбораЭкипажа();
	ОбновитьСписокПластиковыхКарт();
	
	//уатИнтерфейсВводаТС.ТабличноеПолеПриНачалеРедактирования(ЭлементыФормы.Заправки.ТекущаяСтрока.ТС,
	//	ЭлементыФормы.Заправки.Колонки.НомерТС, Организация);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьВсегоВТЧЗаправки();
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиПослеУдаления(Элемент)
	ОбновитьВсегоВТЧЗаправки();
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны") Тогда
		мГруппаГСМ = ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Талон");
	Иначе	
		мГруппаГСМ = ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Топливо");
	КонецЕсли;
	
	ДопПараметры = Новый Структура("ТопливоДоИзменения, ИмяПроцедурыОписаниеОповещения", Элементы.Заправки.ТекущиеДанные.ГСМ, "ОписаниеОповещенияВыбораЗаправкиГСМ");
	уатЗащищенныеФункцииКлиент.СписокГСМдляТС(Объект.Организация, Элементы.Заправки.ТекущиеДанные.ТС, мГруппаГСМ,, Истина, ЭтаФорма, ДопПараметры);
КонецПроцедуры

// Подключаемый динамически обработчик оповещения
&НаКлиенте
Процедура ОписаниеОповещенияВыбораЗаправкиГСМ(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ТекСтрока = Элементы.Заправки.ТекущиеДанные;
		ТекСтрока.ГСМ = Результат;
		Если Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаСклад")
			ИЛИ Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад") Тогда
			ТекСтрока.Плотность = уатОбщегоНазначения.уатПрочитатьРеквизитГСМ(Результат).Плотность;
		КонецЕсли;	
		ЗаправкиГСМПриИзменении(Неопределено);
	КонецЕсли;
	
	Если Элементы.Заправки.ТекущиеДанные.ГСМ <> ДопПараметры.ТопливоДоИзменения Тогда 
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекГСМ = Элементы.Заправки.ТекущиеДанные.ГСМ;
	Если ЗначениеЗаполнено(ТекГСМ) Тогда
		ОткрытьФорму("РегистрСведений.уатНоменклатураГСМ.ФормаЗаписи", Новый Структура("Ключ",
		ПолучитьКлючЗаписиГСМ(ТекГСМ)), Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМПриИзменении(Элемент)
	ТекСтрока = Элементы.Заправки.ТекущиеДанные;
	
	СтруктураЦенаВалюта = уатОбщегоНазначения.уатНайтиЦенуНоменклатуры(ТекСтрока.Дата, ТекСтрока.ГСМ,
		ТекСтрока.ВидЦеныПоставщика, Объект.АЗС, Объект.Соглашение, Ложь);
		
	Если ЗначениеЗаполнено(СтруктураЦенаВалюта.Цена) Тогда
		мЦена			= СтруктураЦенаВалюта.Цена;
		ТекСтрока.Цена	= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(мЦена,
			СтруктураЦенаВалюта.Валюта,
			ТекСтрока.Валюта,
			Объект.Дата, Объект.Дата);
		ЗаправкиЦенаПриИзменении(Неопределено);
	КонецЕсли;
	Если Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаСклад")
		ИЛИ Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад") Тогда
		ТекСтрока.Плотность = уатОбщегоНазначения.уатПрочитатьРеквизитГСМ(ТекСтрока.ГСМ).Плотность;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиНомерТСПриИзменении(Элемент)
	ТекСтрока = Элементы.Заправки.ТекущиеДанные;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСПриИзменении(ТекСтрока.ТС, ТекСтрока.НомерТС, Объект.Организация);
	ОбновитьНомерТСвТЧ(Элементы.Заправки.ТекущаяСтрока);
	ПредГСМ = ТекСтрока.ГСМ;
	УстановитьТС(ТекСтрока.ТС);
	Если ТекСтрока.ГСМ <> ПредГСМ Тогда
		ЗаправкиГСМПриИзменении(Элемент);
	КонецЕсли;
	Если Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта")
		ИЛИ Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад") Тогда
		
		Если ЗначениеЗаполнено(ТекСтрока.ТС) и ЗначениеЗаполнено(ТекСтрока.ПутевойЛист)  Тогда
			ПластиковаяКарта = уатОбщегоНазначения.уатПластиковаяКартаТСВодителя(ТекСтрока.ТС,ТекСтрока.Водитель);
			Если ЗначениеЗаполнено(ПластиковаяКарта) Тогда
				ТекСтрока.ПластиковаяКарта = ПластиковаяКарта;
			Иначе
				ТС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.ПутевойЛист,"ТранспортноеСредство");
				ТекСтрока.ПластиковаяКарта  = уатОбщегоНазначения.уатПластиковаяКартаТСВодителя(ТС,ТекСтрока.Водитель);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ОбновитьСписокВыбораЭкипажа();
	ОбновитьСписокПластиковыхКарт();
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиНомерТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("уатОрганизация", Объект.Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Колонна) Тогда 
		СтруктураОтбора.Вставить("уатКолонна", Объект.Колонна);
	КонецЕсли;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСНачалоВыбора(Элемент, Элементы.Заправки.ТекущиеДанные.ТС, СтруктураОтбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиНомерТСОчистка(Элемент, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОчистка(Элементы.Заправки.ТекущиеДанные.ТС);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиНомерТСОткрытие(Элемент, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОткрытие(Элементы.Заправки.ТекущиеДанные.ТС, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиНомерТСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекСтрока = Элементы.Заправки.ТекущиеДанные;
	
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОбработкаВыбора(ТекСтрока.ТС, ТекСтрока.НомерТС, ВыбранноеЗначение, СтандартнаяОбработка, Объект.Организация);
	ЗаправкиНомерТСПриИзменении(Элемент);
	
	ПредГСМ = ТекСтрока.ГСМ;
	УстановитьТС(ТекСтрока.ТС);
	Если ТекСтрока.ГСМ <> ПредГСМ Тогда
		ЗаправкиГСМПриИзменении(Элемент);
	КонецЕсли;
	ОбновитьСписокВыбораЭкипажа();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиНомерТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиНомерТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиПутевойЛистНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Элементы.Заправки.ТекущиеДанные.ТС) Тогда
		СтандартнаяОбработка = Ложь;
		мсвПутевыхЛистов = ПолучитьПутевыеЛистыПоТС(Элементы.Заправки.ТекущиеДанные.ТС);
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Ссылка", мсвПутевыхЛистов);
		ПараметрыФормы = Новый Структура("Отбор", СтруктураОтбора);
		ОткрытьФорму("Документ.уатПутевойЛист.ФормаВыбора", ПараметрыФормы, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиПутевойЛистОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекСтрока = Элементы.Заправки.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекСтрока.ТС) Тогда
		мсвТС = ПолучитьТСИПрицепыПоПутевомуЛисту(ТекСтрока.ПутевойЛист);
		Если мсвТС.Найти(ТекСтрока.ТС) = Неопределено Тогда
			ТекСтрока.ТС = ПолучитьТСПоПутевомуЛисту(ТекСтрока.ПутевойЛист);
			ОбновитьНомерТСвТЧ(ТекСтрока.ПолучитьИдентификатор());
			ЗаправкиНомерТСПриИзменении(Элемент);
		КонецЕсли;
	Иначе
		ТекСтрока.ТС = ПолучитьТСПоПутевомуЛисту(ТекСтрока.ПутевойЛист);
		ОбновитьНомерТСвТЧ(ТекСтрока.ПолучитьИдентификатор());
		ЗаправкиНомерТСПриИзменении(Элемент);
	КонецЕсли;
	
	УстановитьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиПутевойЛистПриИзменении(Элемент)
	ТекСтрока = Элементы.Заправки.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекСтрока.ТС) Тогда
		мсвТС = ПолучитьТСИПрицепыПоПутевомуЛисту(ТекСтрока.ПутевойЛист);
		Если мсвТС.Найти(ТекСтрока.ТС) = Неопределено Тогда
			ТекСтрока.ТС = ПолучитьТСПоПутевомуЛисту(ТекСтрока.ПутевойЛист);
			ОбновитьНомерТСвТЧ(ТекСтрока.ПолучитьИдентификатор());
			ЗаправкиНомерТСПриИзменении(Элемент);
		КонецЕсли;
	Иначе
		ТекСтрока.ТС = ПолучитьТСПоПутевомуЛисту(ТекСтрока.ПутевойЛист);
		ОбновитьНомерТСвТЧ(ТекСтрока.ПолучитьИдентификатор());
		ЗаправкиНомерТСПриИзменении(Элемент);
	КонецЕсли;
	
	УстановитьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
 	Если Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны") Тогда
		мГруппаГСМ = ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Талон");
	Иначе	
		мГруппаГСМ = ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Топливо");
	КонецЕсли;
	
	ДанныеВыбора = уатГСМ.ПолучитьСписокГСМПоГруппе(мГруппаГСМ);

КонецПроцедуры

&НаКлиенте
Процедура ГСМОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	Параметры.СтрокаПоиска = "";
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиВодительПриИзменении(Элемент)
	Если Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта")
		ИЛИ Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад") Тогда
		Элементы.Заправки.ТекущиеДанные.ПластиковаяКарта = уатОбщегоНазначения.уатПластиковаяКартаТСВодителя(
			Элементы.Заправки.ТекущиеДанные.ТС, Элементы.Заправки.ТекущиеДанные.Водитель);
	КонецЕсли;
	ОбновитьСписокПластиковыхКарт();
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиВодительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Элементы.Заправки.ТекущиеДанные.Водитель, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиВодительОткрытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Элементы.Заправки.ТекущиеДанные.Водитель, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиВодительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элементы.Заправки.ТекущиеДанные;
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, ТекСтрока.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиВодительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ТекСтрока = Элементы.Заправки.ТекущиеДанные;
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, ТекСтрока.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиПластиковаяКартаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВладельцев = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Элементы.Заправки.ТекущиеДанные.ТС) Тогда
		СписокВладельцев.Добавить(Элементы.Заправки.ТекущиеДанные.ТС);
	КонецЕсли;
	Если ЗначениеЗаполнено(Элементы.Заправки.ТекущиеДанные.Водитель) Тогда
		СписокВладельцев.Добавить(Элементы.Заправки.ТекущиеДанные.Водитель);
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура();
	Если СписокВладельцев.Количество() <> 0 Тогда
		СтруктураОтбора.Вставить("КомуВыдана", СписокВладельцев);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.АЗС) Тогда
		СтруктураОтбора.Вставить("КемВыдана", Объект.АЗС);
	КонецЕсли;

	ПарамВыбора = Новый Структура("Отбор", СтруктураОтбора);
	
	ОткрытьФорму("Справочник.уатТопливныеКарты.ФормаВыбора",ПарамВыбора, Элемент,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиКоличествоПриИзменении(Элемент)
	РассчитатьСумму(Элементы.Заправки.ТекущиеДанные);
	РассчитатьСуммуНДС(Элементы.Заправки.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиЦенаПриИзменении(Элемент)
	РассчитатьСумму(Элементы.Заправки.ТекущиеДанные);
	РассчитатьСуммуНДС(Элементы.Заправки.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиСуммаПриИзменении(Элемент)
	ПриИзмененииСуммы(Элементы.Заправки.ТекущиеДанные);
	РассчитатьСуммуНДС(Элементы.Заправки.ТекущиеДанные);
	РассчитатьСуммуВсегоВстрокеТЧ(Элементы.Заправки.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиСтавкаНДСПриИзменении(Элемент)
	РассчитатьСуммуНДС(Элементы.Заправки.ТекущиеДанные);
	РассчитатьСуммуВсегоВстрокеТЧ(Элементы.Заправки.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиПриАктивизацииСтроки(Элемент)
	СтрокаЗаправки = Элементы.Заправки.ТекущиеДанные;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// УправлениеПредприятием.СлужебныеПодсистемы
&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
КонецПроцедуры
// Конец УправлениеПредприятием.СлужебныеПодсистемы

// Процедура - обработчик команды РедактироватьСписком.
//
&НаКлиенте
Процедура РедактироватьСписком(Команда)
	
	УстановитьВозможностьРедактированияСписком();
	
КонецПроцедуры // РедактироватьСписком()

&НаКлиенте
Процедура ЗаполнитьПоПутевомуЛисту(Команда)
	Если Объект.Заправки.Количество() > 0 Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоПутевомуЛистуЗавершение", ЭтотОбъект), "Табличная часть не пуста. Очистить?", Режим, 0, КодВозвратаДиалога.Нет);
        Возврат;
	КонецЕсли;
	
	ЗаполнитьПоПутевомуЛистуФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПутевомуЛистуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ЗаполнитьПоПутевомуЛистуФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПутевомуЛистуФрагмент()
    
    Перем СтруктураЦенаВалюта, ТекСтрока;
    
    ТекстОшибки = ЗаполнитьЗаправкиПоПЛ();
	Если ТекстОшибки = "" Тогда
		Для Каждого ТекСтрока Из Объект.Заправки Цикл
			СтруктураЦенаВалюта = уатОбщегоНазначения.уатНайтиЦенуНоменклатуры(ТекСтрока.Дата, ТекСтрока.ГСМ,
			ТекСтрока.ВидЦеныПоставщика, Объект.АЗС, Объект.Соглашение, Ложь);
			
			Если ЗначениеЗаполнено(СтруктураЦенаВалюта.Цена) Тогда
				мЦена = СтруктураЦенаВалюта.Цена;
				ТекСтрока.Цена = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(мЦена,
				СтруктураЦенаВалюта.Валюта,
				ТекСтрока.Валюта,
				Объект.Дата, Объект.Дата);
			КонецЕсли;
		КонецЦикла;
		Элементы.Заправки.ТекущаяСтрока = 1;
		Модифицированность = Истина;
	Иначе
		ПоказатьПредупреждение(Неопределено,ТекстОшибки, 5);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервереБезКонтекста
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("РазностьДат", уатОбщегоНазначенияСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая,
	ДатаПередИзменением));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура - устанавливает возможность редактирования списком.
//
&НаКлиенте
Процедура УстановитьВозможностьРедактированияСписком()
	Элементы.РедактироватьСписком.Пометка = НЕ Элементы.РедактироватьСписком.Пометка;
	
	КоличествоСтрок = Объект.Заправки.Количество();
	
	Если НЕ Элементы.РедактироватьСписком.Пометка И Объект.Заправки.Количество() > 1 Тогда
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьВозможностьРедактированияСпискомЗавершение", ЭтотОбъект, Новый Структура("КоличествоСтрок", КоличествоСтрок)), НСтр("ru='Все строки кроме первой будут удалены. Продолжить?'"),
		РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
	//Если Элементы.РедактироватьСписком.Пометка Тогда
	//	Элементы.Страницы.ТекущаяСтраница = Элементы.Списком;
	//Иначе
	//	Элементы.Страницы.ТекущаяСтраница = Элементы.ОднаСтрока;
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВозможностьРедактированияСпискомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    КоличествоСтрок = ДополнительныеПараметры.КоличествоСтрок;
    
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Элементы.РедактироватьСписком.Пометка = Истина;
        Возврат;
    КонецЕсли;
    
    Пока КоличествоСтрок > 1 Цикл
        Объект.Заправки.Удалить(Объект.Заправки[КоличествоСтрок - 1]);
        КоличествоСтрок = КоличествоСтрок - 1;
    КонецЦикла;
    Элементы.Заправки.ТекущаяСтрока = Объект.Заправки[0].ПолучитьИдентификатор();

КонецПроцедуры // УстановитьВозможностьРедактированияСписком()

&НаКлиенте
Процедура УстановитьТипЗаправки()
	Для Каждого ТекСтрока Из Объект.Заправки Цикл
		мГруппаГСМ = уатОбщегоНазначения.уатПрочитатьРеквизитГСМ(ТекСтрока.ГСМ, "ГруппаГСМ");
		Если (Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны") И 
			мГруппаГСМ <> ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Талон")) ИЛИ
			(Объект.ВидДвиженияГСМ <> ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны") И 
			мГруппаГСМ = ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Талон")) Тогда
			ТекСтрока.ГСМ = "";
		КонецЕсли;
	КонецЦикла;
	
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТС(мТС)
	ТекСтрокаЗаправки = Элементы.Заправки.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекСтрокаЗаправки.ПутевойЛист) ИЛИ
		уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрокаЗаправки.ПутевойЛист, "ТранспортноеСредство") <> мТС Тогда
		мДатаНачала = ДобавитьМесяц(Объект.Дата, -1);
		УстановитьТССервер(ТекСтрокаЗаправки.ПутевойЛист, ТекСтрокаЗаправки.Водитель, мТС, мДатаНачала, Объект.Дата,
		ТекСтрокаЗаправки.Дата, Объект.Организация);
	КонецЕсли;
	
	Если мТС = Неопределено Тогда
		ТекСтрокаЗаправки.ГСМ = Неопределено;
		ТекСтрокаЗаправки.ПластиковаяКарта = Неопределено;
	Иначе
		Если Объект.ВидДвиженияГСМ <> ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны") Тогда
			ТекСтрокаЗаправки.ГСМ = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
				уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(мТС, "уатМодель"), "ОсновноеТопливо");
			
			Если Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта")
				ИЛИ Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад") Тогда
				
				ТекСтрокаЗаправки.ПластиковаяКарта = уатОбщегоНазначения.уатПластиковаяКартаТСВодителя(мТС,	ТекСтрокаЗаправки.Водитель);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьТССервер(мПутевойЛист, мВодитель, мТС, мДатаНачала, мДата, ДатаЗаправки, Организация)
	ТаблицаПЛ = уатОбщегоНазначения.уатПутевыеЛисты(мТС, мДатаНачала, КонецДня(мДата),, Ложь);
	Если ТаблицаПЛ.Количество() > 0 Тогда
		мПутевойЛист = ТаблицаПЛ[0].Ссылка;
		мВодитель = мПутевойЛист.Водитель1;
	Иначе
		//заполняем водителей
		Если ЗначениеЗаполнено(мТС) Тогда
			СтруктураЭкипаж = уатЗащищенныеФункцииСервер.ЭкипажТСсУчетомГрафика(мТС, ДатаЗаправки, Организация);
			мВодитель = СтруктураЭкипаж.Водитель;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаЗаправки;
	Если Булево(СпособРедактирования) Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.Списком;
	Иначе
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ОднаСтрока;
	КонецЕсли;
	
	флЗаправкаПластикКарта = (Объект.ВидДвиженияГСМ = 
	ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта"));
	флЗаправкаТалоны       = (Объект.ВидДвиженияГСМ = 
	ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны"));
	флЗаправкаНаличные     = (Объект.ВидДвиженияГСМ = 
	ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаНаличные"));
	флЗаправкаПоставщик    = (Объект.ВидДвиженияГСМ = 
	ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПоставщик"));
	флЗаправкаСклад        = (Объект.ВидДвиженияГСМ = 
	ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаСклад"));
	флЗаправкаПластикКартаСклад = (Объект.ВидДвиженияГСМ = 
	ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад"));
	
	Элементы.ЗаправкиПластиковаяКарта.Видимость = флЗаправкаПластикКарта ИЛИ флЗаправкаПластикКартаСклад;
	Элементы.ПластиковаяКарта.Видимость = флЗаправкаПластикКарта ИЛИ флЗаправкаПластикКартаСклад;
	Элементы.НомераТалонов.Видимость = флЗаправкаТалоны;
	
	Элементы.ДоговорКонтрагента.Видимость = (флЗаправкаНаличные ИЛИ флЗаправкаПластикКарта ИЛИ флЗаправкаПоставщик); 
	Элементы.Соглашение.Видимость = Элементы.ДоговорКонтрагента.Видимость И ИспользоватьСоглашенияСПоставщиками;
	Элементы.Партнер.Видимость = Элементы.ДоговорКонтрагента.Видимость;
	
	//все что относится к НДС
	мВидимостьРеквизитовНДС = Элементы.ДоговорКонтрагента.Видимость;
	//Элементы.Налоги.Видимость = мВидимостьРеквизитовНДС;
	Элементы.РедактирорватьНалоги.Видимость = мВидимостьРеквизитовНДС;
	
	мВидимостьРеквизитовНДС = Объект.УчитыватьНДС И мВидимостьРеквизитовНДС;
	
	Элементы.ЗаправкиСтавкаНДС.Видимость = мВидимостьРеквизитовНДС;
	Элементы.ЗаправкиСуммаНДС.Видимость = мВидимостьРеквизитовНДС;
	Элементы.ЗаправкиВсего.Видимость = мВидимостьРеквизитовНДС;
	Элементы.СтавкаНДС.Видимость = мВидимостьРеквизитовНДС;
	Элементы.СуммаНДС.Видимость = мВидимостьРеквизитовНДС;
	Элементы.ИтогоСуммаНДС.Видимость = мВидимостьРеквизитовНДС;
	Элементы.ИтогоСумма.Видимость = Элементы.ДоговорКонтрагента.Видимость;
	Элементы.ЗаправкиВидЦеныПоставщика.Видимость = Элементы.ДоговорКонтрагента.Видимость;
	Элементы.ВидЦен.Видимость = Элементы.ДоговорКонтрагента.Видимость;
	
	Если флЗаправкаНаличные	ИЛИ флЗаправкаПоставщик ИЛИ флЗаправкаПластикКарта Тогда
		Элементы.ЗаправкиЦена.Видимость = Истина;
		Элементы.ЗаправкиСумма.Видимость = Истина;
		Элементы.ЗаправкиВалюта.Видимость = Истина;
		//Элементы.ЗаправкиВсего.Видимость = Истина;
		Элементы.ЗаправкиНомераТалонов.Видимость = Ложь;
		Элементы.НомераТалонов.Видимость = Ложь;
		Элементы.ЗаправкиПлотность.Видимость = Ложь;
		Элементы.Цена.Видимость = Истина;
		Элементы.Валюта.Видимость = Истина;
		Элементы.Плотность.Видимость = Ложь;
		Элементы.Сумма.Видимость = Истина;
		//Элементы.Всего.Видимость = Истина;
		//Элементы.НадписьВсего.Видимость = Истина;
	Иначе	
		Элементы.ЗаправкиЦена.Видимость   = Ложь;
		Элементы.ЗаправкиСумма.Видимость  = Ложь;
		Элементы.ЗаправкиВалюта.Видимость = Ложь;
		//Элементы.ЗаправкиВсего.Видимость 	= Ложь;
		Элементы.Цена.Видимость = Ложь;
		Элементы.Сумма.Видимость = Ложь;
		Элементы.Валюта.Видимость = Ложь;
		//Элементы.Всего.Видимость = Ложь;
		//Элементы.НадписьВсего.Видимость = Ложь;
		
		Если флЗаправкаСклад ИЛИ флЗаправкаПластикКартаСклад Тогда
			Элементы.ЗаправкиНомераТалонов.Видимость = Ложь;
			Элементы.НомераТалонов.Видимость = Ложь;
			Элементы.ЗаправкиПлотность.Видимость = Истина;
			Элементы.Плотность.Видимость = Истина;
		Иначе	
			Элементы.ЗаправкиНомераТалонов.Видимость = Истина;
			Элементы.НомераТалонов.Видимость = Истина;
			Элементы.ЗаправкиПлотность.Видимость = Ложь;
			Элементы.Плотность.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если флЗаправкаНаличные Тогда
		Элементы.Водитель.АвтоОтметкаНезаполненного = Истина;
		Элементы.ЗаправкиВодитель.АвтоОтметкаНезаполненного = Истина;
		//Элементы.Водитель.ОтметкаНезаполненного = НЕ ЗначениеЗаполнено(Объект.Заправки[0].Водитель);
		//Элементы.ЗаправкиВодитель.ОтметкаНезаполненного = НЕ ЗначениеЗаполнено(Объект.Заправки[0].Водитель);
	Иначе
		Элементы.Водитель.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ЗаправкиВодитель.АвтоОтметкаНезаполненного = Ложь;
		//Элементы.Водитель.ОтметкаНезаполненного = Ложь;
		//Элементы.ЗаправкиВодитель.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
			
	//автоотметка обязательных для заполнения
	Если Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаНаличные") Тогда
		Элементы.Водитель.АвтоОтметкаНезаполненного = Истина;
		//Элементы.Водитель.ОтметкаНезаполненного = НЕ ЗначениеЗаполнено(Заправки[0].Водитель);
		Элементы.ЗаправкиВодитель.АвтоОтметкаНезаполненного = Истина;
	Иначе
		Элементы.Водитель.АвтоОтметкаНезаполненного = Ложь;
		//ЭлементыФормы.Водитель.ОтметкаНезаполненного = Ложь;
		Элементы.ЗаправкиВодитель.АвтоОтметкаНезаполненного = Ложь;
	КонецЕсли;
	УстановитьДоступность();
КонецПроцедуры   

&НаКлиенте
Процедура УстановитьОтборАЗС()
	МассивПарамВыбора = Новый Массив();
	Если Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаСклад")
		ИЛИ Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад")
		ИЛИ Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны") Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ЭтоАЗССклад", Истина);
		МассивПарамВыбора.Добавить(НовыйПараметр);
	Иначе
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ЭтоАЗССклад", Ложь);
		МассивПарамВыбора.Добавить(НовыйПараметр);
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Партнер", Объект.Партнер);
		МассивПарамВыбора.Добавить(НовыйПараметр);
	КонецЕсли;
	
	Элементы.АЗС.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПарамВыбора);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборДоговора()
	МассивПарамВыбора = Новый Массив();
	МассивПарамВыбора.Добавить(Новый ПараметрВыбора("Отбор.Контрагент",
		уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.АЗС, "Контрагент_Склад")));
	
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("ТипДоговора", "ДоговорыКонтрагентов") Тогда
		МассивПарамВыбора.Добавить(Новый ПараметрВыбора("Отбор.ТипДоговора",
			ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПоставщиком")));
	Иначе
		МассивПарамВыбора.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора",
			ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком")));
	КонецЕсли;
	
	Элементы.ДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПарамВыбора);
КонецПроцедуры

&НаСервере
Функция ЗаполнитьЗаправкиПоПЛ()
	
	ТаблицаЗаправок = Объект.Заправки.Выгрузить();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СписокЗаправок.Дата КАК Дата,
	               |	СписокЗаправок.ТС КАК ТС
	               |ПОМЕСТИТЬ СписокЗаправок
	               |ИЗ
	               |	&ТаблицаЗаправок КАК СписокЗаправок
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	уатПутевойЛист.Водитель1 КАК Водитель,
	               |	уатПутевойЛист.ВыдатьГорючее КАК ГСМ,
	               |	уатПутевойЛист.Ссылка КАК ПутевойЛист,
	               |	уатПутевойЛист.ТранспортноеСредство КАК ТС,
	               |	ПРЕДСТАВЛЕНИЕ(уатПутевойЛист.ТранспортноеСредство) КАК НомерТС,
	               |	СписокЗаправок.Дата КАК Дата,
	               |	&СтавкаНДС КАК СтавкаНДС,
	               |	&Валюта КАК Валюта
	               |ИЗ
	               |	СписокЗаправок КАК СписокЗаправок
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатПутевойЛист КАК уатПутевойЛист
	               |		ПО (СписокЗаправок.Дата МЕЖДУ уатПутевойЛист.ДатаВыезда И уатПутевойЛист.ДатаВозвращения)
	               |			И (ВЫБОР
	               |				КОГДА СписокЗаправок.ТС <> ЗНАЧЕНИЕ(Справочник.ТранспортныеСредства.ПустаяСсылка)
	               |					ТОГДА СписокЗаправок.ТС = уатПутевойЛист.ТранспортноеСредство
	               |				ИНАЧЕ ИСТИНА
	               |			КОНЕЦ)
	               |			И (НЕ уатПутевойЛист.ПометкаУдаления)
	               |			И (НЕ уатПутевойЛист.Рассчитан)
	               |			И (ВЫБОР
	               |				КОГДА СписокЗаправок.ТС <> ЗНАЧЕНИЕ(Справочник.ТранспортныеСредства.ПустаяСсылка)
	               |					ТОГДА уатПутевойЛист.ТранспортноеСредство.уатМодель.НаличиеТопливногоБака = ИСТИНА
	               |				ИНАЧЕ ИСТИНА
	               |			КОНЕЦ)
	               |			И (уатПутевойЛист.Организация = &Организация)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	уатПутевойЛистПрицепы.Ссылка.Водитель1,
	               |	уатПутевойЛистПрицепы.ТС.уатМодель.ОсновноеТопливо,
	               |	уатПутевойЛистПрицепы.Ссылка,
	               |	уатПутевойЛистПрицепы.ТС,
	               |	ПРЕДСТАВЛЕНИЕ(уатПутевойЛистПрицепы.ТС),
	               |	СписокЗаправок.Дата,
	               |	&СтавкаНДС,
	               |	&Валюта
	               |ИЗ
	               |	СписокЗаправок КАК СписокЗаправок
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатПутевойЛист.Прицепы КАК уатПутевойЛистПрицепы
	               |		ПО (СписокЗаправок.Дата МЕЖДУ уатПутевойЛистПрицепы.Ссылка.ДатаВыезда И уатПутевойЛистПрицепы.Ссылка.ДатаВозвращения)
	               |			И (НЕ уатПутевойЛистПрицепы.Ссылка.ПометкаУдаления)
	               |			И (НЕ уатПутевойЛистПрицепы.Ссылка.Рассчитан)
	               |			И (ВЫБОР
	               |				КОГДА СписокЗаправок.ТС <> ЗНАЧЕНИЕ(Справочник.ТранспортныеСредства.ПустаяСсылка)
	               |					ТОГДА уатПутевойЛистПрицепы.ТС.уатМодель.НаличиеТопливногоБака = ИСТИНА
	               |				ИНАЧЕ ИСТИНА
	               |			КОНЕЦ)
	               |			И (ВЫБОР
	               |				КОГДА СписокЗаправок.ТС <> ЗНАЧЕНИЕ(Справочник.ТранспортныеСредства.ПустаяСсылка)
	               |					ТОГДА СписокЗаправок.ТС = уатПутевойЛистПрицепы.ТС
	               |				ИНАЧЕ ИСТИНА
	               |			КОНЕЦ)
	               |			И (уатПутевойЛистПрицепы.Ссылка.Организация = &Организация)";
	
	СтруктураОбъектовНастроек = Новый Структура;
	СтруктураОбъектовНастроек.Вставить("Организация", Объект.Организация);
	СтруктураОбъектовНастроек.Вставить("Подразделение", Объект.ПодразделениеОрганизации);
	
	СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
	
	Запрос.УстановитьПараметр("ТаблицаЗаправок", ТаблицаЗаправок);
	Запрос.УстановитьПараметр("Валюта",    ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("СтавкаНДС", СтавкаНДС);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Объект.Заправки.Очистить();
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			НСтрока = Объект.Заправки.Добавить();
			ЗаполнитьЗначенияСвойств(НСтрока,Выборка);
		КонецЦикла;
		
		Для Каждого ТекСтрока Из ТаблицаЗаправок Цикл
			СтруктураПоиска = Новый Структура("Дата", ТекСтрока.Дата);
			Если ЗначениеЗаполнено(ТекСтрока.ТС) Тогда
				СтруктураПоиска.Вставить("ТС", ТекСтрока.ТС);
				ПустыеПЛ = Объект.Заправки.НайтиСтроки(СтруктураПоиска);
				Если НЕ ПустыеПЛ.Количество() Тогда
					Сообщение = Новый СообщениеПользователю;
					ТестСообщенияТС = СтрШаблон("Заправка ""%1"" от %2. Путевые листы не найдены!", ТекСтрока.НомерТС, ТекСтрока.Дата);
					Сообщение.Текст = ТестСообщенияТС;
					Сообщение.Сообщить();
				КонецЕсли;
			Иначе;
				ПустыеПЛ = Объект.Заправки.НайтиСтроки(СтруктураПоиска);
				Если НЕ ПустыеПЛ.Количество() Тогда
					Сообщение = Новый СообщениеПользователю;
					ТестСообщенияТС = СтрШаблон("Заправка от %1. Путевые листы не найдены!", Выборка.Дата);
					Сообщение.Текст = ТестСообщенияТС;
					Сообщение.Сообщить();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Возврат "";
	Иначе
		Возврат НСтр("ru = 'Путевые листы не найдены!'");
	КонецЕсли;
	
КонецФункции

// Проверим соответствие типа АЗС и вида заправки
//
&НаКлиенте
Функция КонтрольТипаАЗС(СтрокаСообщения)
	Результат = Истина;
	
	ЭтоАЗССклад = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.АЗС, "ЭтоАЗССклад");
	
	Если (НЕ ЭтоАЗССклад) И (Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаСклад")
		ИЛИ Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад")
		ИЛИ Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны")) Тогда
		
		СтрокаСообщения = "Должна быть выбрана АЗС - склад!";
		Результат = Ложь;
	КонецЕсли;
	
	Если ЭтоАЗССклад И (Объект.ВидДвиженияГСМ = 
		ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПоставщик") ИЛИ
		Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта") ИЛИ
		Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаНаличные")) Тогда
		
		СтрокаСообщения = "Должна быть выбрана АЗС - контрагент!";
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ПриИзмененииДоговора()
	
	мТекущаяВалютаВзаиморасчетов = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ДоговорКонтрагента,
	"ВалютаВзаиморасчетов");
	//УстановитьЗаголовкиПоДоговору();
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Для Каждого ТекЗаправка Из Объект.Заправки Цикл
			ТекЗаправка.Цена = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекЗаправка.Цена,
			ТекЗаправка.Валюта,
			мТекущаяВалютаВзаиморасчетов,
			Объект.Дата, Объект.Дата);
			ТекЗаправка.Валюта = мТекущаяВалютаВзаиморасчетов;
			РассчитатьСумму(ТекЗаправка);
			РассчитатьСуммуНДС(ТекЗаправка);
		КонецЦикла;
	КонецЕсли;

	//УстановитьВидимость();
	//УстановитьАвтоотметку();
	ОбновитьСписокВыбораВалюты();
КонецПроцедуры // ПриИзмененииДоговора()

&НаСервере
Процедура РассчитатьСуммуНДСвТабЧасти()
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	Для Каждого ТекСтрока Из Объект.Заправки Цикл
		уатОбщегоНазначенияТиповыеСервер.уатРассчитатьСуммуНДСТабЧасти(ТекСтрока, ДокОбъект);
	КонецЦикла;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКлючЗаписиГСМ(ТекГСМ)
	КлючЗаписиГСМ = РегистрыСведений.уатНоменклатураГСМ.СоздатьКлючЗаписи(Новый Структура("Номенклатура", ТекГСМ));
	Возврат КлючЗаписиГСМ;
КонецФункции

&НаКлиенте
Процедура РассчитатьСумму(СтрокаТабличнойЧасти) Экспорт
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	СтрокаТабличнойЧасти.СуммаНДС = уатОбщегоНазначенияТиповые.уатРассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
	Объект.УчитыватьНДС, Объект.СуммаВключаетНДС,
	уатОбщегоНазначенияТиповые.уатПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСуммы(СтрокаТабличнойЧасти)
	Если СтрокаТабличнойЧасти.Количество = 0 Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	Иначе	
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокВыбораВалюты()
	Элементы.ЗаправкиВалюта.СписокВыбора.Очистить();
	Элементы.Валюта.СписокВыбора.Очистить();
	
	мВалютаДоговора = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	
	Если ЗначениеЗаполнено(мВалютаДоговора) Тогда
		Элементы.ЗаправкиВалюта.СписокВыбора.Добавить(мВалютаДоговора);
		Элементы.Валюта.СписокВыбора.Добавить(мВалютаДоговора);
	КонецЕсли;
	Если ЗначениеЗаполнено(ВалютаРегламентированногоУчета) И ВалютаРегламентированногоУчета <> мВалютаДоговора Тогда
		Элементы.ЗаправкиВалюта.СписокВыбора.Добавить(ВалютаРегламентированногоУчета);
		Элементы.Валюта.СписокВыбора.Добавить(ВалютаРегламентированногоУчета);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьНомерТСвТЧ(Знач ТекСтрока = Неопределено)
	Если ТекСтрока <> Неопределено Тогда
		ТекСтрока = Объект.Заправки.НайтиПоИдентификатору(ТекСтрока);
	КонецЕсли;
	
	ИмяТЧ = "Заправки";
	Если ТекСтрока = Неопределено Тогда
		Для Каждого ТекСтрокаТЧ Из Объект[ИмяТЧ] Цикл
			ТекСтрокаТЧ.НомерТС = уатОбщегоНазначения.уатПредставлениеТС(ТекСтрокаТЧ.ТС, Объект.Организация);
		КонецЦикла;
	Иначе
		ТекСтрока.НомерТС = уатОбщегоНазначения.уатПредставлениеТС(ТекСтрока.ТС, Объект.Организация);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсегоВТЧЗаправки()
	Для Каждого СтрокаТабличнойЧасти Из Объект.Заправки Цикл
		РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти)
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
КонецПроцедуры

&НаСервере
Функция ПолучитьТСПоПутевомуЛисту(ПутевойЛист)
	Возврат ПутевойЛист.ТранспортноеСредство;
КонецФункции

&НаСервере
Функция ПолучитьТСИПрицепыПоПутевомуЛисту(ПутевойЛист)
	мсвТС = Новый Массив;
	мсвТС.Добавить(ПутевойЛист.ТранспортноеСредство);
	Для Каждого ТекПрицеп Из ПутевойЛист.Прицепы Цикл
		Если ТекПрицеп.ТС.уатМодель.НаличиеТопливногоБака И мсвТС.Найти(ТекПрицеп.ТС) = Неопределено Тогда
			мсвТС.Добавить(ТекПрицеп.ТС);
		КонецЕсли;
	КонецЦикла;
	//для Проф добавляем прицепы/оборудование из задания
	Если Метаданные.Документы.уатПутевойЛист.ТабличныеЧасти.Задание.Реквизиты.Найти("Прицеп1") <> Неопределено Тогда
		Для Каждого ТекЗадание Из ПутевойЛист.Задание Цикл
			Если ТекЗадание.Прицеп1.уатМодель.НаличиеТопливногоБака И мсвТС.Найти(ТекЗадание.Прицеп1) = Неопределено Тогда
				мсвТС.Добавить(ТекЗадание.Прицеп1);
			КонецЕсли;
			Если ТекЗадание.Прицеп2.уатМодель.НаличиеТопливногоБака И мсвТС.Найти(ТекЗадание.Прицеп2) = Неопределено Тогда
				мсвТС.Добавить(ТекЗадание.Прицеп2);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат мсвТС;
КонецФункции

&НаСервере
Функция ПолучитьПутевыеЛистыПоТС(ТС)
	мДатаНачала = ДобавитьМесяц(Объект.Дата, -1);
	мДата = Объект.Дата;
	ТаблицаПЛ = уатОбщегоНазначения.уатПутевыеЛисты(ТС, мДатаНачала, КонецДня(мДата),, Ложь);
	
	Рез = ТаблицаПЛ.ВыгрузитьКолонку("Ссылка");
	
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура ОбновитьСписокВыбораЭкипажа()
	ТекСтрока = Элементы.Заправки.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ЗаправкиВодитель.СписокВыбора.Очистить();
	Элементы.Водитель.СписокВыбора.Очистить();
	
	ЭкипажТССписок = уатЗащищенныеФункцииСервер.ЭкипажТССписок(ТекСтрока.ТС);
	ЭкипажТССписок_Количество = ЭкипажТССписок.Количество();
	
	Элементы.ЗаправкиВодитель.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	Элементы.Водитель.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	
	Если ЭкипажТССписок_Количество = 0 Тогда	
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСотр Из ЭкипажТССписок Цикл
		Элементы.ЗаправкиВодитель.СписокВыбора.Добавить(ТекСотр.Значение);
		Элементы.Водитель.СписокВыбора.Добавить(ТекСотр.Значение);
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьДоступность()
	Если Объект.Заправки.Количество() = 0 Тогда
		мТолькоПросмотр = Ложь;
	Иначе
		мПутевойЛист = Объект.Заправки[0].ПутевойЛист;
		мТолькоПросмотр = ЗначениеЗаполнено(мПутевойЛист) И 
		уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(мПутевойЛист, "Проведен") И 
		уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(мПутевойЛист, "Рассчитан") И
		(НЕ ПризнакРедактированияИзПутевогоЛиста);
	КонецЕсли;
	
	Элементы.ДатаЗаправки.ТолькоПросмотр              = мТолькоПросмотр;
	//Элементы.ПолеВводаНомерТС.ТолькоПросмотр          = мТолькоПросмотр;
	Элементы.ТС.ТолькоПросмотр                        = мТолькоПросмотр;
	Элементы.Водитель.ТолькоПросмотр                  = мТолькоПросмотр;
	Элементы.ГСМ.ТолькоПросмотр                       = мТолькоПросмотр;
	Элементы.Количество.ТолькоПросмотр                = мТолькоПросмотр;
	Элементы.Плотность.ТолькоПросмотр                 = мТолькоПросмотр;
	Элементы.ПутевойЛист.ТолькоПросмотр               = мТолькоПросмотр;
	Элементы.ПластиковаяКарта.ТолькоПросмотр          = мТолькоПросмотр;
	Элементы.НомераТалонов.ТолькоПросмотр             = мТолькоПросмотр;
	Элементы.Цена.ТолькоПросмотр                      = мТолькоПросмотр;
	Элементы.Сумма.ТолькоПросмотр                     = мТолькоПросмотр;
	Элементы.СтавкаНДС.ТолькоПросмотр                 = мТолькоПросмотр;
	Элементы.СуммаНДС.ТолькоПросмотр                  = мТолькоПросмотр;
	//Элементы.Валюта.ТолькоПросмотр                    = мТолькоПросмотр;
	НадписьЗапретИзменения                            = ?(мТолькоПросмотр, 
	"Запрещено изменение заправки для закрытого путевого листа!", "");
	Элементы.Дата.ТолькоПросмотр                      = мТолькоПросмотр;
	Элементы.Организация.ТолькоПросмотр               = мТолькоПросмотр;
	Элементы.ВидДвиженияГСМ.ТолькоПросмотр            = мТолькоПросмотр;
	Элементы.АЗС.ТолькоПросмотр                       = мТолькоПросмотр;
	Элементы.ДоговорКонтрагента.ТолькоПросмотр        = мТолькоПросмотр;
	Элементы.Колонна.ТолькоПросмотр                   = мТолькоПросмотр;
	Элементы.РедактироватьСписком.Доступность         = НЕ мТолькоПросмотр;
	Элементы.ПодразделениеОрганизации.ТолькоПросмотр  = мТолькоПросмотр;
	Элементы.Страна.ТолькоПросмотр                    = мТолькоПросмотр;
	Элементы.Ответственный.ТолькоПросмотр             = мТолькоПросмотр;
	Элементы.Комментарий.ТолькоПросмотр               = мТолькоПросмотр;
КонецПроцедуры

&НаКлиенте
Процедура РедактирорватьНалоги(Команда)
	ОбработатьИзмененияПоКнопкеНалоги();
КонецПроцедуры

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Налоги".Выполняется пересчет колонок: цена, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеНалоги()
	
	// 1. Формируем структуру параметров для заполнения формы "Налоги".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",			  Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",		  Объект.Дата);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",  Ложь);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",      Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НалогообложениеНДС",	  Объект.УчитыватьНДС);
	
	// 2. Открываем форму "Цены и Валюта".
	ОписаниеОповещенияЦеныИВалюта = Новый ОписаниеОповещения("ЦеныИВалютаОбработкаОповещения", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров, ЭтаФорма,,,, ОписаниеОповещенияЦеныИВалюта);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаКлиенте
Процедура ЦеныИВалютаОбработкаОповещения(СтруктураНалоги, ДопПараметры) Экспорт
	
	Если ТипЗнч(СтруктураНалоги) <> Тип("Структура") ИЛИ НЕ СтруктураНалоги.БылиВнесеныИзменения Тогда
		Возврат;
	КонецЕсли;
	
	// 3. Перезаполняем табличную часть "Номенклатура", если были внесены изменения в форме "Цены и Валюта".
	Объект.СуммаВключаетНДС		   = СтруктураНалоги.СуммаВключаетНДС;
	Объект.УчитыватьНДС			   = СтруктураНалоги.НалогообложениеНДС;
	
	// Пересчитываем сумму если изменился признак Налогообложение НДС.
	Если СтруктураНалоги.НалогообложениеНДС <> СтруктураНалоги.ПредНалогообложениеНДС Тогда
		УстановитьВидимость();
		РассчитатьСуммуНДСвТабЧасти();
	КонецЕсли;
	
	// Пересчитываем сумму если изменился признак "Сумма включает НДС".
	Если СтруктураНалоги.СуммаВключаетНДС <> СтруктураНалоги.ПредСуммаВключаетНДС Тогда
		Для Каждого ТекСтрока Из Объект.Заправки Цикл 
			ТекСтрока.ВидЦеныПоставщика = Неопределено;
		КонецЦикла;
		РассчитатьСуммуНДСвТабЧасти();
	КонецЕсли;
	
	// Сформируем надпись Налоги.
	СтруктураНадписи = Новый Структура;
	
	СтруктураНадписи.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураНадписи.Вставить("УчитыватьНДС", Объект.УчитыватьНДС);
	Налоги = СформироватьНадписьНалоги(СтруктураНадписи);
	
	ОбновитьВсегоВТЧЗаправки();
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНадписьНалоги(СтруктураНадписи)
	
	ТекстНадписи = "";
	
	// Налогообложение НДС.
	Если ПустаяСтрока(ТекстНадписи) Тогда
		ТекстНадписи = ТекстНадписи + НСтр("ru = '%НалогообложениеНДС%'");
	Иначе
		ТекстНадписи = ТекстНадписи + НСтр("ru = '; %НалогообложениеНДС%'");
	КонецЕсли;
	ТекстНадписи = СтрЗаменить(ТекстНадписи, "%НалогообложениеНДС%", ?(СтруктураНадписи.УчитыватьНДС, "Учитывать НДС",
																	"Не учитывать НДС"));
	
	// Флаг сумма включает НДС.
	Если СтруктураНадписи.УчитыватьНДС Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%СуммаВключаетНДС%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = '; %СуммаВключаетНДС%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%СуммаВключаетНДС%", ?(СтруктураНадписи.СуммаВключаетНДС,
																		"Сумма вкл. НДС", "Сумма не вкл. НДС"));
	КонецЕсли;
	
	Возврат ТекстНадписи;
	
КонецФункции // СформироватьНадписьЦеныИВалюта()

// Процедура проверяет факт превышения количество топлива в баке после заправки
//
&НаСервере
Процедура ПроверитьПревышениеУровняТопливаВБаке(ПараметрыЗаписи)
	ТаблицаТС = Объект.Заправки.Выгрузить();	
	ТаблицаТС.Свернуть("Дата, ТС, ГСМ, ПутевойЛист", "Количество");
	ТекстПревышение = "";
	Для Каждого ТекСтрока Из ТаблицаТС Цикл
		ОбъемБака = ТекСтрока.ТС.уатМодель.ОбъемБака;
		Если ОбъемБака = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		//если количество заправки больше объема бака, то сразу выдается ошибка
		Если ТекСтрока.Количество > ОбъемБака Тогда
			ТекстПревышение = ТекстПревышение + "
				|Превышение уровня топлива в баке ТС """ + уатОбщегоНазначения.уатПредставлениеТС(ТекСтрока.ТС, Объект.Организация) + """";
			Продолжить;
		КонецЕсли;
		
		ОстатокГСМНаТС = уатОбщегоНазначения.уатОстатокГСМнаТС(Новый Граница(ТекСтрока.Дата, ВидГраницы.Исключая), ТекСтрока.ТС, ТекСтрока.ТС.уатМодель.ОсновноеТопливо);
		
		РасходГСМ = 0;
		Если ЗначениеЗаполнено(ТекСтрока.ПутевойЛист) Тогда
			мсвСтрокиРасход = ТекСтрока.ПутевойЛист.РасходГСМ.НайтиСтроки(Новый Структура("ТС, ГСМ, Активен", ТекСтрока.ТС, ТекСтрока.ГСМ, Истина));
			Для Каждого ТекСтрокаРасход Из мсвСтрокиРасход Цикл
				РасходГСМ = РасходГСМ + ТекСтрокаРасход.РасходПоФакту;
			КонецЦикла;
		КонецЕсли;
			
		Если (ОстатокГСМНаТС + ТекСтрока.Количество - РасходГСМ) > ОбъемБака Тогда
			ТекстПревышение = ТекстПревышение + "
				|Превышение уровня топлива в баке ТС """ + уатОбщегоНазначения.уатПредставлениеТС(ТекСтрока.ТС, Объект.Организация) + """";
		КонецЕсли;
	КонецЦикла;
	
	Если ТекстПревышение <> "" Тогда
		ТекстПревышение = Сред(ТекстПревышение, 2);
		ПараметрыЗаписи.Вставить("ПревышениеУровняТоплива", ТекстПревышение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокПластиковыхКарт()
	ВладельцыКарт = Новый СписокЗначений();
	ВладельцыКарт.Добавить(Элементы.Заправки.ТекущиеДанные.ТС);
	ВладельцыКарт.Добавить(Элементы.Заправки.ТекущиеДанные.Водитель);
	Если СпособРедактирования = 0 Тогда
		Элементы.ПластиковаяКарта.СписокВыбора.ЗагрузитьЗначения(СписокПластикКарт(ВладельцыКарт).ВыгрузитьЗначения());
	Иначе
		Элементы.ЗаправкиПластиковаяКарта.СписокВыбора.ЗагрузитьЗначения(СписокПластикКарт(ВладельцыКарт).ВыгрузитьЗначения());
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокПластикКарт(ВладельцыКарт)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатТопливныеКарты.Ссылка
	|ИЗ
	|	Справочник.уатТопливныеКарты КАК уатТопливныеКарты
	|ГДЕ
	|	уатТопливныеКарты.КомуВыдана В(&ВладельцыКарт)
	|	И НЕ уатТопливныеКарты.ПометкаУдаления");
	Запрос.УстановитьПараметр("ВладельцыКарт", ВладельцыКарт);
	
	списокПК = Новый СписокЗначений;
	списокПК.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат списокПК;
КонецФункции

#КонецОбласти
