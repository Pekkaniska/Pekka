// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	СформироватьТаблицаГСМ(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаТЖ(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаОборотыГСМ(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаОборотыТЖ(ДокументСсылка, СтруктураДополнительныеСвойства);
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаГСМ(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	// получим результат запроса по товарной таблице
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатЗаправкаГСМЗаправки.ТС,
	|	ВЫБОР
	|		КОГДА уатНоменклатураГСМ.ГруппаГСМ = &ГруппаГСМТалоны
	|			ТОГДА уатНоменклатураГСМ.ГСМТалона
	|		ИНАЧЕ уатНоменклатураГСМ.Номенклатура
	|	КОНЕЦ КАК ГСМ,
	|	уатНоменклатураГСМ.ГруппаГСМ,
	|	уатЗаправкаГСМЗаправки.Количество,
	|	ВЫБОР
	|		КОГДА уатЗаправкаГСМЗаправки.Ссылка.СуммаВключаетНДС
	|			ТОГДА уатЗаправкаГСМЗаправки.Сумма - уатЗаправкаГСМЗаправки.СуммаНДС
	|		ИНАЧЕ уатЗаправкаГСМЗаправки.Сумма
	|	КОНЕЦ КАК Сумма,
	|	уатЗаправкаГСМЗаправки.Валюта,
	|	уатЗаправкаГСМЗаправки.ВидЦеныПоставщика,
	|	ВЫБОР
	|		КОГДА уатЗаправкаГСМЗаправки.ПутевойЛист <> ЗНАЧЕНИЕ(Документ.уатПутевойЛист.ПустаяСсылка)
	|				И уатЗаправкаГСМЗаправки.Дата < уатЗаправкаГСМЗаправки.ПутевойЛист.ДатаВыезда
	|			ТОГДА уатЗаправкаГСМЗаправки.ПутевойЛист.ДатаВыезда
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатЗаправкаГСМЗаправки.ПутевойЛист <> ЗНАЧЕНИЕ(Документ.уатПутевойЛист.ПустаяСсылка)
	|						И уатЗаправкаГСМЗаправки.ПутевойЛист.ДатаВозвращения <> ДАТАВРЕМЯ(1, 1, 1)
	|						И уатЗаправкаГСМЗаправки.Дата > уатЗаправкаГСМЗаправки.ПутевойЛист.ДатаВозвращения
	|					ТОГДА уатЗаправкаГСМЗаправки.ПутевойЛист.ДатаВозвращения
	|				ИНАЧЕ уатЗаправкаГСМЗаправки.Дата
	|			КОНЕЦ
	|	КОНЕЦ КАК Дата,
	|	уатЗаправкаГСМЗаправки.ПутевойЛист,
	|	уатЗаправкаГСМЗаправки.ПластиковаяКарта,
	|	уатЗаправкаГСМЗаправки.Ссылка.АЗС КАК АЗС,
	|	уатЗаправкаГСМЗаправки.Ссылка.ВидДвиженияГСМ,
	|	уатЗаправкаГСМЗаправки.ГСМ КАК ГСМ1,
	|	уатЗаправкаГСМЗаправки.Ссылка.Соглашение КАК Соглашение
	|ИЗ
	|	Документ.уатЗаправкаГСМ.Заправки КАК уатЗаправкаГСМЗаправки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
	|		ПО уатЗаправкаГСМЗаправки.ГСМ = уатНоменклатураГСМ.Номенклатура
	|			И (уатНоменклатураГСМ.ГруппаГСМ <> &ГруппаГСМТЖ)
	|ГДЕ
	|	уатЗаправкаГСМЗаправки.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ГруппаГСМТалоны", Перечисления.уатГруппыГСМ.Талон);
	Запрос.УстановитьПараметр("ГруппаГСМТЖ", Перечисления.уатГруппыГСМ.ПрисадкиИТехническиеЖидкости);
	
	тблГСМ = Запрос.Выполнить().Выгрузить();
	
	//управляемая блокировка
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатОстаткиГСМнаТС");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = тблГСМ;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ГСМ", "ГСМ");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТС", "ТС");
	Блокировка.Заблокировать();
	
	Для Каждого ТекСтрока Из тблГСМ Цикл
		Если ТекСтрока.ГруппаГСМ = Перечисления.уатГруппыГСМ.Талон Тогда
			СтруктураОтбора = Новый Структура("Контрагент, ГСМ, ВидЦеныПоставщика, Соглашение, Валюта",
				ТекСтрока.АЗС,
				ТекСтрока.ГСМ1,
				ТекСтрока.ВидЦеныПоставщика,
				ТекСтрока.Соглашение,
				ТекСтрока.Валюта);
			
			ТекСтрока.Количество = уатОбщегоНазначения.уатКоличествоЛитровТалонаГСМ(ТекСтрока.Дата, СтруктураОтбора, ТекСтрока.Количество);
		КонецЕсли;	
	КонецЦикла;
	
	//округляем до точности хранения остатков ГСМ в ТС
	мТочностьОстатковГСМ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ТочностьОстатковТоплива);
	Для Каждого ТекСтрока Из тблГСМ Цикл
		ТекСтрока.Количество = Окр(ТекСтрока.Количество, мТочностьОстатковГСМ);
	КонецЦикла;
	
	тблГСМ.Колонки.Добавить("ВидДвижения");
	тблГСМ.Колонки.Добавить("Партия");
	тблГСМ.Колонки.Добавить("Регистратор");
	тблГСМ.Колонки.Добавить("Стоимость");
	тблГСМ.Колонки.Добавить("СтоимостьУпр");
	тблГСМ.Колонки.Дата.Имя = "Период";
	
	//колонны ТС (УАТ ПРОФ)
	тблГСМ.Колонки.Добавить("Колонна");
	
	мВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	Если уатОбщегоНазначенияТиповые.уатЕстьКонстанта("ВалютаУправленческогоУчета") Тогда 
		мВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	Иначе
		мВалютаУпр = мВалютаРегл;
	КонецЕсли;
	мКурсВалютыРеглСтруктура = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(мВалютаРегл, ДокументСсылка.Дата);
	мКурсВалютыРегл = ?(мКурсВалютыРеглСтруктура.Кратность = 0, 0, мКурсВалютыРеглСтруктура.Курс / мКурсВалютыРеглСтруктура.Кратность);
	мКурсВалютыУпрСтруктура = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(мВалютаУпр, ДокументСсылка.Дата);
	мКурсВалютыУпр = ?(мКурсВалютыУпрСтруктура.Кратность = 0, 0, мКурсВалютыУпрСтруктура.Курс / мКурсВалютыУпрСтруктура.Кратность);
	
	Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.СпособОценкиМПЗ) <> Перечисления.СпособыОценки.ПоСредней Тогда
		ТекПартия = ДокументСсылка;
	Иначе
		ТекПартия = Неопределено;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из тблГСМ Цикл
		ТекСтрока.Регистратор = ДокументСсылка;
		ТекСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
		ТекСтрока.Партия = ТекПартия;
		
		ТекСтрока.Стоимость = 0;
		ТекСтрока.СтоимостьУпр = 0;
		Если ТекСтрока.Сумма > 0 Тогда
			мКурсТекВалютыСтруктура = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ТекСтрока.Валюта, ДокументСсылка.Дата);
			мКурсТекВалюты = ?(мКурсТекВалютыСтруктура.Кратность = 0, 0, мКурсТекВалютыСтруктура.Курс / мКурсТекВалютыСтруктура.Кратность);
			
			ТекСтрока.СтоимостьУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма,
				ТекСтрока.Валюта, мВалютаУпр, мКурсТекВалюты, мКурсВалютыУпр);
			ТекСтрока.Стоимость = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма,
				ТекСтрока.Валюта, мВалютаРегл, мКурсТекВалюты, мКурсВалютыРегл);
		КонецЕсли;
			
		//колонны ТС (УАТ ПРОФ)	
		Если ЗначениеЗаполнено(ДокументСсылка.Колонна) Тогда
			ТекСтрока.Колонна = ДокументСсылка.Колонна;
		Иначе
			СтруктураМестонахождение = уатОбщегоНазначения.МестонахождениеТС(ТекСтрока.ТС, ТекСтрока.Период);
			ТекСтрока.Колонна = СтруктураМестонахождение.Колонна;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаГСМ", тблГСМ);
	
КонецПроцедуры // СформироватьТаблицаГСМ()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаТЖ(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	// получим результат запроса по товарной таблице
	Запрос = Новый Запрос();
	ТекстЗапроса=
	"ВЫБРАТЬ
	|	уатЗаправкаГСМЗаправки.ТС,
	|	уатНоменклатураГСМ.Номенклатура КАК ТЖ,
	|	уатЗаправкаГСМЗаправки.Количество,
	|	ВЫБОР
	|		КОГДА уатЗаправкаГСМЗаправки.Ссылка.СуммаВключаетНДС
	|			ТОГДА уатЗаправкаГСМЗаправки.Сумма - уатЗаправкаГСМЗаправки.СуммаНДС
	|		ИНАЧЕ уатЗаправкаГСМЗаправки.Сумма
	|	КОНЕЦ КАК Сумма,
	|	уатЗаправкаГСМЗаправки.Валюта,
	|	ВЫБОР
	|		КОГДА уатЗаправкаГСМЗаправки.ПутевойЛист <> ЗНАЧЕНИЕ(Документ.уатПутевойЛист.ПустаяСсылка)
	|				И уатЗаправкаГСМЗаправки.Дата < уатЗаправкаГСМЗаправки.ПутевойЛист.ДатаВыезда
	|			ТОГДА уатЗаправкаГСМЗаправки.ПутевойЛист.ДатаВыезда
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатЗаправкаГСМЗаправки.ПутевойЛист <> ЗНАЧЕНИЕ(Документ.уатПутевойЛист.ПустаяСсылка)
	|						И уатЗаправкаГСМЗаправки.ПутевойЛист.ДатаВозвращения <> ДАТАВРЕМЯ(1, 1, 1)
	|						И уатЗаправкаГСМЗаправки.Дата > уатЗаправкаГСМЗаправки.ПутевойЛист.ДатаВозвращения
	|					ТОГДА уатЗаправкаГСМЗаправки.ПутевойЛист.ДатаВозвращения
	|				ИНАЧЕ уатЗаправкаГСМЗаправки.Дата
	|			КОНЕЦ
	|	КОНЕЦ КАК Дата
	|ИЗ
	|	Документ.уатЗаправкаГСМ.Заправки КАК уатЗаправкаГСМЗаправки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
	|		ПО уатЗаправкаГСМЗаправки.ГСМ = уатНоменклатураГСМ.Номенклатура
	|			И уатНоменклатураГСМ.ВестиУчетОстатковТЖ
	|ГДЕ
	|	уатЗаправкаГСМЗаправки.Ссылка = &Ссылка";
	Запрос.Текст=ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ГруппаГСМТЖ", Перечисления.уатГруппыГСМ.ПрисадкиИТехническиеЖидкости);
	
	тблТЖ = Запрос.Выполнить().Выгрузить();
	
	//управляемая блокировка
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатОстаткиТЖнаТС");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = тблТЖ;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТЖ", "ТЖ");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТС", "ТС");
	Блокировка.Заблокировать();
	
	тблТЖ.Колонки.Добавить("ВидДвижения");
	тблТЖ.Колонки.Добавить("Партия");
	тблТЖ.Колонки.Добавить("Колонна");
	тблТЖ.Колонки.Добавить("Регистратор");
	тблТЖ.Колонки.Добавить("Стоимость");
	тблТЖ.Колонки.Добавить("СтоимостьУпр");
	тблТЖ.Колонки.Дата.Имя = "Период";
	
	мВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	Если уатОбщегоНазначенияТиповые.уатЕстьКонстанта("ВалютаУправленческогоУчета") Тогда 
		мВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	Иначе
		мВалютаУпр = мВалютаРегл;
	КонецЕсли;
	мКурсВалютыРеглСтруктура = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(мВалютаРегл, ДокументСсылка.Дата);
	мКурсВалютыРегл = ?(мКурсВалютыРеглСтруктура.Кратность = 0, 0, мКурсВалютыРеглСтруктура.Курс / мКурсВалютыРеглСтруктура.Кратность);
	мКурсВалютыУпрСтруктура = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(мВалютаУпр, ДокументСсылка.Дата);
	мКурсВалютыУпр = ?(мКурсВалютыУпрСтруктура.Кратность = 0, 0, мКурсВалютыУпрСтруктура.Курс / мКурсВалютыУпрСтруктура.Кратность);
	
	Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.СпособОценкиМПЗ) <> Перечисления.СпособыОценки.ПоСредней Тогда
		ТекПартия = ДокументСсылка;
	Иначе
		ТекПартия = Неопределено;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из тблТЖ Цикл
		ТекСтрока.Регистратор = ДокументСсылка;
		ТекСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
		ТекСтрока.Партия = ТекПартия;
		
		ТекСтрока.Стоимость = 0;
		ТекСтрока.СтоимостьУпр = 0;
		Если ТекСтрока.Сумма > 0 Тогда
			мКурсТекВалютыСтруктура = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ТекСтрока.Валюта, ДокументСсылка.Дата);
			мКурсТекВалюты = ?(мКурсТекВалютыСтруктура.Кратность = 0, 0, мКурсТекВалютыСтруктура.Курс / мКурсТекВалютыСтруктура.Кратность);
			
			ТекСтрока.СтоимостьУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма,
				ТекСтрока.Валюта, мВалютаУпр, мКурсТекВалюты, мКурсВалютыУпр);
			ТекСтрока.Стоимость = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма,
				ТекСтрока.Валюта, мВалютаРегл, мКурсТекВалюты, мКурсВалютыРегл);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПартииТЖ", тблТЖ);
	
КонецПроцедуры // СформироватьТаблицаТЖ()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОборотыГСМ(ДокументСсылка, СтруктураДополнительныеСвойства)
	// получим результат запроса по таблице ГСМ
	Запрос = Новый Запрос();
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	уатЗаправкаГСМЗаправки.Ссылка КАК Регистратор,
	|	ВЫБОР
	|		КОГДА уатЗаправкаГСМЗаправки.ПутевойЛист <> ЗНАЧЕНИЕ(Документ.уатПутевойЛист.ПустаяСсылка)
	|				И уатЗаправкаГСМЗаправки.Дата < уатЗаправкаГСМЗаправки.ПутевойЛист.ДатаВыезда
	|			ТОГДА уатЗаправкаГСМЗаправки.ПутевойЛист.ДатаВыезда
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатЗаправкаГСМЗаправки.ПутевойЛист <> ЗНАЧЕНИЕ(Документ.уатПутевойЛист.ПустаяСсылка)
	|						И уатЗаправкаГСМЗаправки.ПутевойЛист.ДатаВозвращения <> ДАТАВРЕМЯ(1, 1, 1)
	|						И уатЗаправкаГСМЗаправки.Дата > уатЗаправкаГСМЗаправки.ПутевойЛист.ДатаВозвращения
	|					ТОГДА уатЗаправкаГСМЗаправки.ПутевойЛист.ДатаВозвращения
	|				ИНАЧЕ уатЗаправкаГСМЗаправки.Дата
	|			КОНЕЦ
	|	КОНЕЦ КАК Период,
	|	уатЗаправкаГСМЗаправки.Ссылка.Колонна КАК Колонна,
	|	уатЗаправкаГСМЗаправки.ТС КАК ТС,
	|	ВЫБОР
	|		КОГДА уатНоменклатураГСМ.ГруппаГСМ = ЗНАЧЕНИЕ(Перечисление.уатГруппыГСМ.Талон)
	|			ТОГДА уатЗаправкаГСМЗаправки.ГСМ
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК НоменклатураТалонов,
	|	ВЫБОР
	|		КОГДА уатНоменклатураГСМ.ГруппаГСМ = ЗНАЧЕНИЕ(Перечисление.уатГруппыГСМ.Талон)
	|			ТОГДА уатНоменклатураГСМ.ГСМТалона
	|		ИНАЧЕ уатЗаправкаГСМЗаправки.ГСМ
	|	КОНЕЦ КАК ГСМ,
	|	уатНоменклатураГСМ.ГруппаГСМ КАК ГруппаГСМ,
	|	уатЗаправкаГСМЗаправки.Ссылка.АЗС КАК АЗС,
	|	уатЗаправкаГСМЗаправки.Ссылка.ВидДвиженияГСМ КАК ВидЗаправки,
	|	уатЗаправкаГСМЗаправки.Водитель КАК Водитель,
	|	уатЗаправкаГСМЗаправки.ПластиковаяКарта КАК ПластиковаяКарта,
	|	ВЫБОР
	|		КОГДА уатЗаправкаГСМЗаправки.Ссылка.СуммаВключаетНДС
	|			ТОГДА уатЗаправкаГСМЗаправки.Сумма
	|		ИНАЧЕ уатЗаправкаГСМЗаправки.Сумма + уатЗаправкаГСМЗаправки.СуммаНДС
	|	КОНЕЦ КАК Стоимость,
	|	ВЫБОР
	|		КОГДА уатЗаправкаГСМЗаправки.Ссылка.СуммаВключаетНДС
	|			ТОГДА уатЗаправкаГСМЗаправки.Сумма
	|		ИНАЧЕ уатЗаправкаГСМЗаправки.Сумма + уатЗаправкаГСМЗаправки.СуммаНДС
	|	КОНЕЦ КАК СтоимостьУпр,
	|	уатЗаправкаГСМЗаправки.СуммаНДС КАК СуммаНДС,
	|	уатЗаправкаГСМЗаправки.Валюта КАК Валюта,
	|	уатЗаправкаГСМЗаправки.Ссылка.Организация КАК Организация,
	|	уатЗаправкаГСМЗаправки.Ссылка.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	уатЗаправкаГСМЗаправки.ПутевойЛист КАК ПутевойЛист,
	|	уатЗаправкаГСМЗаправки.НомераТалонов,
	|	уатЗаправкаГСМЗаправки.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА уатНоменклатураГСМ.ГруппаГСМ = ЗНАЧЕНИЕ(Перечисление.уатГруппыГСМ.Талон)
	|			ТОГДА уатЗаправкаГСМЗаправки.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоТалонов,
	|	уатЗаправкаГСМЗаправки.ВидЦеныПоставщика,
	|	уатЗаправкаГСМЗаправки.Ссылка.Соглашение КАК Соглашение
	|ИЗ
	|	Документ.уатЗаправкаГСМ.Заправки КАК уатЗаправкаГСМЗаправки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
	|		ПО уатЗаправкаГСМЗаправки.ГСМ = уатНоменклатураГСМ.Номенклатура
	|ГДЕ
	|	уатЗаправкаГСМЗаправки.Ссылка = &Ссылка";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	тблГСМ = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекСтрока Из тблГСМ Цикл
		Если ТекСтрока.ГруппаГСМ = Перечисления.уатГруппыГСМ.Талон Тогда
			СтруктураОтбора = Новый Структура("Контрагент, ГСМ, ВидЦеныПоставщика, Соглашение, Валюта",
				ТекСтрока.АЗС,
				ТекСтрока.НоменклатураТалонов,
				ТекСтрока.ВидЦеныПоставщика,
				ТекСтрока.Соглашение,
				ТекСтрока.Валюта);
			ТекСтрока.Количество = уатОбщегоНазначения.уатКоличествоЛитровТалонаГСМ(ТекСтрока.Период, СтруктураОтбора, ТекСтрока.Количество);
		КонецЕсли;
		
		Если ТекСтрока.Стоимость <> 0 ИЛИ ТекСтрока.СтоимостьУпр <> 0 Тогда
			мКурсВалютыСтруктура = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ТекСтрока.Валюта, ТекСтрока.Период);
		КонецЕсли;
		
		Если ТекСтрока.Стоимость <> 0 И СтруктураДополнительныеСвойства.ВалютаРеглУчета <> ТекСтрока.Валюта тогда
			ТекСтрока.Стоимость = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Стоимость, ТекСтрока.Валюта, 
			СтруктураДополнительныеСвойства.ВалютаРеглУчета,
			мКурсВалютыСтруктура.Курс, 
			СтруктураДополнительныеСвойства.КурсРегл,
			мКурсВалютыСтруктура.Кратность,  
			СтруктураДополнительныеСвойства.КратностьРегл);
		КонецЕсли;
		
		Если ТекСтрока.СтоимостьУпр <> 0 И СтруктураДополнительныеСвойства.Свойство("ВалютаУпрУчета") И СтруктураДополнительныеСвойства.ВалютаУпрУчета <> ТекСтрока.Валюта тогда
			ТекСтрока.СтоимостьУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СтоимостьУпр, ТекСтрока.Валюта,
			СтруктураДополнительныеСвойства.ВалютаУпрУчета, 
			мКурсВалютыСтруктура.Курс, 
			СтруктураДополнительныеСвойства.КурсУпр,
			мКурсВалютыСтруктура.Кратность,  
			СтруктураДополнительныеСвойства.КратностьУпр);
		КонецЕсли;
		
		Если ТекСтрока.СуммаНДС <> 0 И СтруктураДополнительныеСвойства.ВалютаРеглУчета <> ТекСтрока.Валюта тогда
			ТекСтрока.СуммаНДС = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДС, ТекСтрока.Валюта, 
			СтруктураДополнительныеСвойства.ВалютаРеглУчета,
			мКурсВалютыСтруктура.Курс, 
			СтруктураДополнительныеСвойства.КурсРегл,
			мКурсВалютыСтруктура.Кратность,  
			СтруктураДополнительныеСвойства.КратностьРегл);
		КонецЕсли;
		
		ТекКолонна = уатОбщегоНазначения.МестонахождениеТС(ТекСтрока.ТС, ТекСтрока.Период).Колонна;
		Если ЗначениеЗаполнено(ТекКолонна) Тогда
			ТекСтрока.Колонна = ТекКолонна;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОборотыПоЗаправкамГСМ", тблГСМ);
КонецПроцедуры // СформироватьТаблицаОборотыГСМ()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОборотыТЖ(ДокументСсылка, СтруктураДополнительныеСвойства)
	// получим результат запроса по таблице ГСМ
	Запрос = Новый Запрос();
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	уатЗаправкаГСМЗаправки.Ссылка КАК Регистратор,
	|	ВЫБОР
	|		КОГДА уатЗаправкаГСМЗаправки.ПутевойЛист <> ЗНАЧЕНИЕ(Документ.уатПутевойЛист.ПустаяСсылка)
	|				И уатЗаправкаГСМЗаправки.Дата < уатЗаправкаГСМЗаправки.ПутевойЛист.ДатаВыезда
	|			ТОГДА уатЗаправкаГСМЗаправки.ПутевойЛист.ДатаВыезда
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатЗаправкаГСМЗаправки.ПутевойЛист <> ЗНАЧЕНИЕ(Документ.уатПутевойЛист.ПустаяСсылка)
	|						И уатЗаправкаГСМЗаправки.ПутевойЛист.ДатаВозвращения <> ДАТАВРЕМЯ(1, 1, 1)
	|						И уатЗаправкаГСМЗаправки.Дата > уатЗаправкаГСМЗаправки.ПутевойЛист.ДатаВозвращения
	|					ТОГДА уатЗаправкаГСМЗаправки.ПутевойЛист.ДатаВозвращения
	|				ИНАЧЕ уатЗаправкаГСМЗаправки.Дата
	|			КОНЕЦ
	|	КОНЕЦ КАК Период,
	|	уатЗаправкаГСМЗаправки.Ссылка.Колонна КАК Колонна,
	|	уатЗаправкаГСМЗаправки.ТС КАК ТС,
	|	уатЗаправкаГСМЗаправки.ГСМ КАК ГСМ,
 	|	ЗНАЧЕНИЕ(Перечисление.уатВидыОперацийСТехническимиЖидкостями.ДоливПоАкту) КАК ВидОперации,
	|	уатЗаправкаГСМЗаправки.Водитель КАК Водитель,
	|	уатЗаправкаГСМЗаправки.Ссылка.Организация КАК Организация,
	|	уатЗаправкаГСМЗаправки.Количество КАК КоличествоПриход
	|ИЗ
	|	Документ.уатЗаправкаГСМ.Заправки КАК уатЗаправкаГСМЗаправки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
	|		ПО уатЗаправкаГСМЗаправки.ГСМ = уатНоменклатураГСМ.Номенклатура
	|			И уатНоменклатураГСМ.ВестиУчетОстатковТЖ
	|ГДЕ
	|	уатЗаправкаГСМЗаправки.Ссылка = &Ссылка";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	тблТЖ = Запрос.Выполнить().Выгрузить();
	
	//проставляем колонну, если не заполнена
	Если НЕ ЗначениеЗаполнено(ДокументСсылка.Колонна) Тогда
		Для Каждого ТекСтрока Из тблТЖ Цикл
			ТекСтрока.Колонна = уатОбщегоНазначения.МестонахождениеТС(ТекСтрока.ТС, ТекСтрока.Период).Колонна;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасходТЖ", тблТЖ);
КонецПроцедуры // СформироватьТаблицаОборотыТЖ()

// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	Заглушка = Истина;
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати – ТаблицаЗначений – состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	Заглушка = Истина;
КонецПроцедуры

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	Заглушка = Истина;
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
