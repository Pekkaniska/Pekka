#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//	Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область СозданиеНаОсновании

// Добавляет команду создания документа "Списание товаров с хранения".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.СписаниеПринятыхНаХранениеТоваров) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.СписаниеПринятыхНаХранениеТоваров.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(
			Метаданные.Документы.СписаниеПринятыхНаХранениеТоваров);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	СозданиеНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСозданияНаОсновании);
	
	СписаниеПринятыхНаХранениеТоваровЛокализация.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры);

КонецПроцедуры

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	
	
	Отчеты.ОстаткиТоваровОрганизаций.ДобавитьКомандуОтчета(КомандыОтчетов);
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
	СписаниеПринятыхНаХранениеТоваровЛокализация.ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры);

КонецПроцедуры

#КонецОбласти

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий.
//
// Возвращаемое значение:
//	Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	ИменаРеквизитов = "МестоХранения,ХозяйственнаяОперация,Дата";
	
	Возврат ИменаРеквизитов;
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры
//	Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
// Возвращаемое значение
//	Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровХранящихсяНаСкладе Тогда
		ПараметрыСерий = СкладыСервер.ИспользованиеСерийНаСкладе(Объект.МестоХранения, Ложь);
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПереданныхВПроизводство Тогда
		ПараметрыСерий = СкладыСервер.ИспользованиеСерийВПодразделении(Объект.МестоХранения);
	КонецЕсли;
	
	ПараметрыСерийСклада = СкладыСервер.ИспользованиеСерийНаСкладе(Объект.МестоХранения, Ложь);
	
	ПараметрыУказанияСерий.ПолноеИмяОбъекта               = ПолноеИмяОбъекта();
	ПараметрыУказанияСерий.ИмяПоляСклад                   = "МестоХранения";
	ПараметрыУказанияСерий.ИмяТЧСерии                     = "Товары";
	ПараметрыУказанияСерий.Дата                           = Объект.Дата;
	ПараметрыУказанияСерий.ЭтоНакладная                   = Истина;
	ПараметрыУказанияСерий.ТолькоСерииДляСебестоимости    = Истина;
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;
	
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("Назначение");
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ДвижениеВФинансовомУчете);
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий.
//
// Параметры:
//	ПараметрыУказанияСерий - Структура - состав полей задается в функции
//		НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
// Возвращаемое значение:
//	Строка - текст запроса.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.НомерСтроки         КАК НомерСтроки,
	|	Товары.Номенклатура        КАК Номенклатура,
	|	Товары.Характеристика      КАК Характеристика,
	|	Товары.Серия               КАК Серия,
	|	Товары.Количество          КАК Количество,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий
	|
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки         КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|					ТОГДА
	|						ВЫБОР
	|							КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|								ТОГДА 14
	|							ИНАЧЕ 13
	|						КОНЕЦ
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ                      КАК СтатусУказанияСерий
	|
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|			ПО ПолитикиУчетаСерий.Склад = Склады.Ссылка
	|		ПО (ПолитикиУчетаСерий.Склад = &Склад)
	|			И (ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки         КАК НомерСтроки,
	|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	Статусы.СтатусУказанияСерий <> Статусы.СтарыйСтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Назначения

// Возвращает текст запроса для получениях доступных назначений.
//
// Параметры:
//	ПараметрыФормированияЗапроса - Структура - параметры для формирования текстов запросов.
//
// Возвращаемое значение:
//	Строка - текст запроса.
//
Функция ТекстЗапросаДоступныхНазначений(ПараметрыФормированияЗапроса) Экспорт
	
	Если ПараметрыФормированияЗапроса.РежимВыбора = "Расширенный" Тогда
		Возврат Справочники.Назначения.ТекстЗапросаНазначенийРасширенный();
	Иначе
		Возврат Справочники.Назначения.ТекстЗапросаВсехНазначений(ПараметрыФормированияЗапроса);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

//++ НЕ УТ
#Область ПроводкиРеглУчета

// Функция возвращает текст запроса для отражения документа в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстОтраженияВРеглУчете() Экспорт

	Возврат СписаниеПринятыхНаХранениеТоваровЛокализация.ТекстОтраженияВРеглУчете();

КонецФункции

// Функция возвращает текст запроса дополнительных временных таблиц,
// необходимых для отражения в регламетированном учете.
//
Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт

	Возврат СписаниеПринятыхНаХранениеТоваровЛокализация.ТекстЗапросаВТОтраженияВРеглУчете();

КонецФункции

#КонецОбласти
//-- НЕ УТ

Функция МетаданныеДокумента() Экспорт
	
	СтруктураОбъекта = НаправленияДеятельностиСервер.СтруктураОбъекта();
	СтруктураОбъекта.ОформляетсяПоЗаказу = Ложь;
	
	Возврат СтруктураОбъекта;
	
КонецФункции

// Инициализирует параметры, обслуживающие выбор назначений в формах документа.
//
//  Возвращаемое значение:
//  Структура - структура параметров, см. Справочники.Назначения.МакетФормыВыбораНазначений().
//
Функция МакетФормыВыбораНазначений() Экспорт
	
	МакетФормы = Справочники.Назначения.МакетФормыВыбораНазначений();
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы);
	ШаблонНазначения.НаправлениеДеятельности  = "Объект.НаправлениеДеятельности";
	ШаблонНазначения.ДвиженияПоСкладскимРегистрам = "ИСТИНА";
	
	// В наличии на складе / в подразделении
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказов", Истина, "Объект.Товары.Назначение", "ОбеспечениеПоСкладу");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("ВНаличии").Пометка = Истина;
	ОписаниеКолонок.КолонкиПоУмолчанию.Добавить("ВНаличии");
	
	ОписаниеКолонок.УсловиеИспользования = "Объект.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеТоваровХранящихсяНаСкладе)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура   = "Объект.Товары.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика = "Объект.Товары.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Склад          = "Объект.МестоХранения";
	
	// В наличии в подразделении
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказов", Истина, "Объект.Товары.Назначение", "ОбеспечениеПоПодразделению");
	КолонкаВНаличии = ОписаниеКолонок.Колонки.НайтиПоЗначению("ВНаличии");
	КолонкаВНаличии.Пометка = Истина;
	КолонкаВНаличии.Представление = НСтр("ru = 'В наличии в подразделении ""%ОбеспечениеПоПодразделению_Склад%""'");
	ОписаниеКолонок.КолонкиПоУмолчанию.Добавить("ВНаличии");
	
	ОписаниеКолонок.УсловиеИспользования = "Объект.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеТоваровПереданныхВПроизводство)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура   = "Объект.Товары.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика = "Объект.Товары.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Склад          = "Объект.МестоХранения";
	
	Возврат МакетФормы;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(МестоХранения)
	|	И ЗначениеРазрешено(Партнер)
	|	И ЗначениеРазрешено(Подразделение)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт
	
	ИсточникиДанных = Новый Соответствие;
	
	Возврат ИсточникиДанных;
	
КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создание запроса инициализации движений и заполенение его параметров.
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	// Формирование текста запроса.
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстЗапросаТаблицаТоварыКОформлениюИзлишковНедостач(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыНаСкладах(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыПринятые(Запрос, ТекстыЗапроса, Регистры);
	
	// Выполение запроса и выгрузка полученных таблиц для формирования движений
	ПроведениеСерверУТ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений,
		Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                  КАК Ссылка,
	|	ДанныеДокумента.Номер                   КАК Номер,
	|	ДанныеДокумента.Дата                    КАК Период,
	|	ДанныеДокумента.Партнер                 КАК Партнер,
	|	ДанныеДокумента.Контрагент              КАК Контрагент,
	|	ДанныеДокумента.Договор                 КАК Договор,
	|	ДанныеДокумента.Соглашение              КАК Соглашение,
	|	ДанныеДокумента.Организация             КАК Организация,
	|	ДанныеДокумента.Подразделение           КАК Подразделение,
	|	ДанныеДокумента.МестоХранения           КАК Склад,
	|	ДанныеДокумента.ХозяйственнаяОперация   КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Менеджер                КАК Менеджер,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДанныеДокумента.Комментарий             КАК Комментарий,
	|	ДанныеДокумента.Проведен                КАК Проведен,
	|	ДанныеДокумента.ПометкаУдаления         КАК ПометкаУдаления,
	|	ВЫБОР КОГДА ДанныеДокумента.МестоХранения ССЫЛКА Справочник.Склады
	|			И ДанныеДокумента.МестоХранения.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
	|			И ДанныеДокумента.Дата >= ДанныеДокумента.МестоХранения.ДатаНачалаОрдернойСхемыПриОтраженииИзлишковНедостач
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                   КАК ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
	|ИЗ
	|	Документ.СписаниеПринятыхНаХранениеТоваров КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	НомерНаПечать                          = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Реквизиты.Номер);
	ИдентификаторМетаданных                = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяОбъекта());
	УчитыватьСебестоимостьТоваровПоЗапасам = ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьТоваровПоВидамЗапасов");
	
	Если ЗначениеЗаполнено(Реквизиты.Договор) Тогда
		ИнформацияПоДоговору = НСтр("ru='По договору ""%Договор%""'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ИнформацияПоДоговору = СтрЗаменить(ИнформацияПоДоговору, "%Договор%", Реквизиты.Договор);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Номер",                   Реквизиты.Номер);
	Запрос.УстановитьПараметр("Период",                  Реквизиты.Период);
	Запрос.УстановитьПараметр("Партнер",                 Реквизиты.Партнер);
	Запрос.УстановитьПараметр("Контрагент",              Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("Договор",                 Реквизиты.Договор);
	Запрос.УстановитьПараметр("Соглашение",              Реквизиты.Соглашение);
	Запрос.УстановитьПараметр("Организация",             Реквизиты.Организация);
	Запрос.УстановитьПараметр("Подразделение",           Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("Склад",                   Реквизиты.Склад);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",   Реквизиты.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("Менеджер",                Реквизиты.Менеджер);
	Запрос.УстановитьПараметр("НаправлениеДеятельности", Реквизиты.НаправлениеДеятельности);
	Запрос.УстановитьПараметр("ИспользуетсяНазначение",  УчитыватьСебестоимостьТоваровПоЗапасам);
	Запрос.УстановитьПараметр("Комментарий",             Реквизиты.Комментарий);
	Запрос.УстановитьПараметр("Проведен",                Реквизиты.Проведен);
	Запрос.УстановитьПараметр("ПометкаУдаления",         Реквизиты.ПометкаУдаления);
	Запрос.УстановитьПараметр("ИдентификаторМетаданных", ИдентификаторМетаданных);
	Запрос.УстановитьПараметр("ИнформацияПоДоговору",    ИнформацияПоДоговору);
	Запрос.УстановитьПараметр("НомерНаПечать",           НомерНаПечать);
	Запрос.УстановитьПараметр("УчитыватьСебестоимостьТоваровПоВидамЗапасов", УчитыватьСебестоимостьТоваровПоЗапасам);
	Запрос.УстановитьПараметр("ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач", Реквизиты.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач);
		
	УниверсальныеМеханизмыПартийИСебестоимости.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаТоварыКОформлениюИзлишковНедостач(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыКОформлениюИзлишковНедостач";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Склад                                 КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаТовары.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                  КАК Назначение,
	|	ТаблицаТовары.Серия                    КАК Серия,
	|	ТаблицаТовары.Количество               КАК КОформлениюАктов
	|ИЗ
	|	Документ.СписаниеПринятыхНаХранениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеТоваровХранящихсяНаСкладе)
	|	И &ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
	|	И ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Количество <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияСерийТоваров";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Ссылка                                                    КАК Документ,
	|	&Период                                                    КАК Период,
	|	&Ссылка                                                    КАК Регистратор,
	|	ТаблицаСерии.Номенклатура                                  КАК Номенклатура,
	|	ТаблицаСерии.Характеристика                                КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСерии.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаСерии.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                                      КАК Назначение,
	|	ТаблицаСерии.Серия                                         КАК Серия,
	|	ТаблицаСерии.Количество                                    КАК Количество,
	|	&Склад                                                     КАК Отправитель,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ОтражениеНедостач) КАК СкладскаяОперация,
	|	НЕ &ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач  КАК ЭтоСкладскоеДвижение
	|ИЗ
	|	Документ.СписаниеПринятыхНаХранениеТоваров.Товары КАК ТаблицаСерии
	|ГДЕ
	|	ТаблицаСерии.Ссылка = &Ссылка
	|	И ТаблицаСерии.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОбеспечениеЗаказов";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Склад                                 КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Назначение               КАК Назначение,
	|	ТаблицаТовары.Количество               КАК НаличиеПодЗаказ,
	|	-ТаблицаТовары.Количество              КАК КЗаказу
	|ИЗ
	|	Документ.СписаниеПринятыхНаХранениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеТоваровХранящихсяНаСкладе)
	|	И (НЕ &ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач)
	|	И ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И ТаблицаТовары.Количество <> 0";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
		
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Ссылка                  КАК Ссылка,
	|	&Период                  КАК ДатаДокументаИБ,
	|	&Номер                   КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных КАК ТипСсылки,
	|	&Организация             КАК Организация,
	|	&ХозяйственнаяОперация   КАК ХозяйственнаяОперация,
	|	&Партнер                 КАК Партнер,
	|	&Контрагент              КАК Контрагент,
	|	&НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	&Склад                   КАК МестоХранения,
	|	&Подразделение           КАК Подразделение,
	|	&Менеджер                КАК Ответственный,
	|	ВЫРАЗИТЬ(&Комментарий КАК СТРОКА(100))
	|	                         КАК Комментарий,
	|	НЕОПРЕДЕЛЕНО             КАК Валюта,
	|	0                        КАК Сумма,
	|	НЕОПРЕДЕЛЕНО             КАК Статус,
	|	&Проведен                КАК Проведен,
	|	&ПометкаУдаления         КАК ПометкаУдаления,
	|	ЛОЖЬ                     КАК ДополнительнаяЗапись,
	|	&ИнформацияПоДоговору    КАК Дополнительно,
	|	&Период                  КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать           КАК НомерПервичногоДокумента,
	|	&Период   КАК ДатаОтраженияВУчете
	|ИЗ
	|	Документ.СписаниеПринятыхНаХранениеТоваров КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "СвободныеОстатки";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
	|	&Период                                КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Склад                                 КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Количество               КАК ВНаличии,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			ТОГДА ТаблицаТовары.Количество
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ                                  КАК ВРезервеПодЗаказ
	|ИЗ
	|	Документ.СписаниеПринятыхНаХранениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеТоваровХранящихсяНаСкладе)
	|	И (НЕ &ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач)
	|	И ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Количество <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	ИмяРегистра = "СебестоимостьТоваров";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	УстановитьПараметрЗапросаАналитикаУчетаПоПартнерам(Запрос);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	1                                      КАК Порядок,
	|	ВидыЗапасов.НомерСтроки                КАК НомерСтрокиДокумента,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|
	|	ВЫБОР КОГДА &ИспользуетсяНазначение
	|		ТОГДА ВидыЗапасов.АналитикаУчетаНоменклатуры
	|		ИНАЧЕ ВидыЗапасов.АналитикаУчетаНоменклатурыБезНазначения
	|	КОНЕЦ                           КАК АналитикаУчетаНоменклатуры,
	|
	|	&Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаХраненииСПравомПродажи) КАК РазделУчета,
	|
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов
	|		ТОГДА ВидыЗапасов.ВидЗапасов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                            КАК ВидЗапасов,
	|
	//	партионный учет версии 2.2
	|	НЕОПРЕДЕЛЕНО													КАК Партия,
	|	НЕОПРЕДЕЛЕНО													КАК АналитикаУчетаПартий,
	|
	|	НЕОПРЕДЕЛЕНО													КАК КорВидЗапасов,
	|	НЕОПРЕДЕЛЕНО													КАК КорПартия,
	|	НЕОПРЕДЕЛЕНО													КАК КорРазделУчета,
	|	НЕОПРЕДЕЛЕНО													КАК КорАналитикаУчетаПартий,
	|
	|	0																КАК СтоимостьЗабалансовая,
	|	0																КАК СтоимостьЗабалансоваяРегл,
	|	0																КАК Стоимость,
	|	0																КАК СтоимостьБезНДС,
	|	0																КАК СтоимостьРегл,
	|	ВидыЗапасов.Количество											КАК Количество,
	|	0																КАК ПостояннаяРазница,
	|	0																КАК ВременнаяРазница,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Потребление) 			КАК ТипЗаписи,
	|	&ХозяйственнаяОперация 											КАК ХозяйственнаяОперация
	|ИЗ
	|	ВтВидыЗапасов КАК ВидыЗапасов
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиДокумента
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыНаСкладах(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыНаСкладах";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Склад                                 КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаТовары.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                  КАК Назначение,
	|	ТаблицаТовары.Серия                    КАК Серия,
	|	ТаблицаТовары.Количество               КАК ВНаличии
	|ИЗ
	|	Документ.СписаниеПринятыхНаХранениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеТоваровХранящихсяНаСкладе)
	|	И (НЕ &ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач)
	|	И ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Количество <> 0";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыОрганизаций";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки                КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)        КАК ВидДвижения,
	|	&Период                                       КАК Период,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	&Организация                                  КАК Организация,
	|	ТаблицаВидыЗапасов.ВидЗапасов                 КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД                   КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество                 КАК Количество,
	|	&ХозяйственнаяОперация                        КАК ХозяйственнаяОперация,
	|	ТаблицаВидыЗапасов.Номенклатура               КАК Номенклатура,
	|	ТаблицаВидыЗапасов.Характеристика             КАК Характеристика,
	|	ЗНАЧЕНИЕ (Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС) КАК НалогообложениеНДС
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыПринятые(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыПринятые";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Партнер                               КАК Владелец,
	|	&Договор                               КАК Договор,
	|	ТаблицаВидыЗапасов.Номенклатура        КАК Номенклатура,
	|	ТаблицаВидыЗапасов.Характеристика      КАК Характеристика,
	|	ТаблицаВидыЗапасов.Назначение          КАК Назначение,
	|	ТаблицаВидыЗапасов.Серия               КАК Серия,
	|	ТаблицаВидыЗапасов.ВидЗапасов          КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД            КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество          КАК Получено
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтВидыЗапасов";
	
	ИнициализироватьКлючиАналитикиНоменклатуры(Запрос);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки                                 КАК НомерСтроки,
	|	Аналитика.Номенклатура                                         КАК Номенклатура,
	|	Аналитика.Номенклатура.ТипНоменклатуры                         КАК ТипНоменклатуры,
	|	Аналитика.Характеристика                                       КАК Характеристика,
	|	Аналитика.Назначение                                           КАК Назначение,
	|	Аналитика.Серия                                                КАК Серия,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры                  КАК АналитикаУчетаНоменклатуры,
	|	АналитикаБезНазначения.КлючАналитики                           КАК АналитикаУчетаНоменклатурыБезНазначения,
	|	АналитикаКомитента.КлючАналитики                               КАК АналитикаУчетаКомитента,
	|	ВЫБОР
	|		КОГДА СправочникВидЗапасов.ВладелецТовара ССЫЛКА Справочник.Организации
	|			ТОГДА АналитикаРасчетовИнтеркампани.КлючАналитики
	|		ИНАЧЕ АналитикаРасчетов.КлючАналитики
	|	КОНЕЦ                                                          КАК АналитикаРасчетовСКомитентом,
	|	ЕСТЬNULL(Назначения.НаправлениеДеятельности,
	|		ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)) КАК НаправлениеДеятельности,
	|	СправочникВидЗапасов.РеализацияЗапасовДругойОрганизации        КАК РеализацияЗапасовДругойОрганизации,
	|	СправочникВидЗапасов.ВидЗапасовВладельца                       КАК ВидЗапасовВладельца,
	|	ТаблицаВидыЗапасов.ВидЗапасов                                  КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.ВидЗапасов.ТипЗапасов                       КАК ТипЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД                                    КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество                                  КАК Количество,
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки                         КАК ИдентификаторСтроки
	|
	|ПОМЕСТИТЬ ВтВидыЗапасов
	|ИЗ
	|	Документ.СписаниеПринятыхНаХранениеТоваров.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК СправочникВидЗапасов
	|		ПО ТаблицаВидыЗапасов.ВидЗапасов = СправочникВидЗапасов.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|		ПО Аналитика.Номенклатура                          = АналитикаБезНазначения.Номенклатура
	|			И Аналитика.Характеристика                     = АналитикаБезНазначения.Характеристика
	|			И Аналитика.Серия                              = АналитикаБезНазначения.Серия
	|			И Аналитика.Склад                              = АналитикаБезНазначения.Склад
	|			И ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) = АналитикаБезНазначения.Назначение
	|			И Аналитика.СтатьяКалькуляции                  = АналитикаБезНазначения.СтатьяКалькуляции
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаКомитента
	|		ПО Аналитика.Номенклатура                                 = АналитикаКомитента.Номенклатура
	|			И Аналитика.Характеристика                            = АналитикаКомитента.Характеристика
	|			И ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)        = АналитикаКомитента.Назначение
	|			И ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) = АналитикаКомитента.Серия
	|			И ТаблицаВидыЗапасов.ВидЗапасов.ВладелецТовара        = АналитикаКомитента.Склад
	|			И Аналитика.СтатьяКалькуляции                         = АналитикаКомитента.СтатьяКалькуляции
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаРасчетов
	|		ПО АналитикаРасчетов.Организация   = &Организация
	|			И АналитикаРасчетов.Партнер    = СправочникВидЗапасов.ВладелецТовара
	|			И АналитикаРасчетов.Контрагент = СправочникВидЗапасов.Контрагент
	|			И АналитикаРасчетов.Договор    = СправочникВидЗапасов.Договор
	|			И АналитикаРасчетов.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаРасчетовИнтеркампани
	|		ПО АналитикаРасчетовИнтеркампани.Организация   = &Организация
	|			И АналитикаРасчетовИнтеркампани.Партнер    = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|			И АналитикаРасчетовИнтеркампани.Контрагент = СправочникВидЗапасов.Контрагент
	|			И АналитикаРасчетовИнтеркампани.Договор    = СправочникВидЗапасов.Договор
	|			И АналитикаРасчетовИнтеркампани.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК Назначения
	|		ПО Аналитика.Назначение = Назначения.Ссылка
	|ГДЕ
	|	ТаблицаВидыЗапасов.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ИнициализироватьКлючиАналитикиНоменклатуры(Запрос)
	
	ЗапросАналитик = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ключи.Склад          КАК Склад,
	|	Ключи.Номенклатура   КАК Номенклатура,
	|	Ключи.Характеристика КАК Характеристика,
	|	&ПустоеНазначение    КАК Назначение,
	|	Ключи.Серия          КАК Серия
	|ИЗ
	|	Документ.СписаниеПринятыхНаХранениеТоваров.ВидыЗапасов КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Ключи
	|		ПО Товары.АналитикаУчетаНоменклатуры = Ключи.КлючАналитики
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО Ключи.Номенклатура            = Аналитика.Номенклатура
	|			И Ключи.Характеристика       = Аналитика.Характеристика
	|			И &ПустоеНазначение          = Аналитика.Назначение
	|			И Ключи.Склад                = Аналитика.Склад
	|			И Ключи.Серия                = Аналитика.Серия
	|ГДЕ
	|	Аналитика.КлючАналитики ЕСТЬ NULL
	|	И Товары.Ссылка = &Ссылка
	|	И НЕ &ИспользуетсяНазначение
	|");
	
	ЗапросАналитик.УстановитьПараметр("Ссылка",                 Запрос.Параметры.Ссылка);
	ЗапросАналитик.УстановитьПараметр("Склад",                  Запрос.Параметры.Склад);
	ЗапросАналитик.УстановитьПараметр("ПустоеНазначение",       Справочники.Назначения.ПустаяСсылка());
	ЗапросАналитик.УстановитьПараметр("ИспользуетсяНазначение", Запрос.Параметры.ИспользуетсяНазначение);
	
	Выборка = ЗапросАналитик.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.АналитикаУчетаНоменклатуры.СоздатьКлючАналитики(Выборка)
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПараметрЗапросаАналитикаУчетаПоПартнерам(Запрос)
	
	Если Запрос.Параметры.Свойство("АналитикаУчетаПоПартнерам") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыАналитики = Новый Структура;
	ПараметрыАналитики.Вставить("Партнер",                 Запрос.Параметры.Партнер);
	ПараметрыАналитики.Вставить("Контрагент",              Запрос.Параметры.Контрагент);
	ПараметрыАналитики.Вставить("Организация",             Запрос.Параметры.Организация);
	ПараметрыАналитики.Вставить("Договор",                 Запрос.Параметры.Договор);
	ПараметрыАналитики.Вставить("НаправлениеДеятельности", Запрос.Параметры.НаправлениеДеятельности);
	
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам",
		РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(ПараметрыАналитики));
	
КонецПроцедуры

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента      = "Документ.СписаниеПринятыхНаХранениеТоваров";
	СинонимТаблицыДокумента = "";
	ВЗапросеЕстьИсточник    = Истина;
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("НомерНаПечать",        """""");
	ПереопределениеРасчетаПараметров.Вставить("ИнформацияПоДоговору", """""");
	ПереопределениеРасчетаПараметров.Вставить("Склад",                "ДанныеДокумента.Ссылка.МестоХранения");
	
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяДокумента));
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ДанныеДокумента";
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", 	ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", 		ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ВЗапросеЕстьИсточник,
			ПереопределениеРасчетаПараметров);
		
	Иначе
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ПереопределениеРасчетаПараметров);
		
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//	КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Акт о списании принятых на хранение товаров
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор                  = "АктСписанияПринятыхНаХранениеТоваров";
	КомандаПечати.Представление                  = НСтр("ru = 'Акт о списании принятых на хранение товаров'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	СписаниеПринятыхНаХранениеТоваровЛокализация.ДобавитьКомандыПечати(КомандыПечати);

КонецПроцедуры

// Формирует печатные формы объекта.
//
// Параметры:
//	МассивОбъектов        - Массив           - массив ссылок на объекты которые нужно распечатать,
//	ПараметрыПечати       - Структура        - структура дополнительных параметров печати,
//	КоллекцияПечатныхФорм - Таблица значений - сформированные табличные документы,
//	ОбъектыПечати         - СписокЗначений   - список объектов печати,
//	ПараметрыВывода       - Структура        - параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктСписанияПринятыхНаХранениеТоваров") Тогда
		ИмяМакета     = "АктСписанияПринятыхНаХранениеТоваров";
		СинонимМакета = НСтр("ru = 'Акт о списании принятых на хранение товаров'");
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИмяМакета, СинонимМакета,
		СформироватьПечатнуюФормуАктСписанияПринятыхНаХранениеТоваров(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
		
	СписаниеПринятыхНаХранениеТоваровЛокализация.Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
КонецПроцедуры

// Функция формирует печатную форму документов списания принятых на хранение товаров.
//
// Параметры:
//	МассивОбъектов  - Массив         - массив ссылок на объекты которые нужно распечатать,
//	ОбъектыПечати   - СписокЗначений - список объектов печати.
//
// Возвращаемое значение:
//	ТабличныйДокумент - печатная форма документов списания принятых на хранение товаров.
//
Функция СформироватьПечатнуюФормуАктСписанияПринятыхНаХранениеТоваров(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДопКолонка         = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	ВыводитьДопКолонку = ЗначениеЗаполнено(ДопКолонка);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписаниеТоваров.Ссылка                                  КАК Ссылка,
	|	СписаниеТоваров.Номер                                   КАК Номер,
	|	СписаниеТоваров.Дата                                    КАК Дата,
	|	СписаниеТоваров.Контрагент                              КАК Поставщик,
	|	СписаниеТоваров.Соглашение                              КАК Соглашение,
	|	СписаниеТоваров.Организация                             КАК Организация,
	|	СписаниеТоваров.Организация.НаименованиеСокращенное     КАК ОрганизацияПредставление,
	|	СписаниеТоваров.ХозяйственнаяОперация                   КАК ХозяйственнаяОперация,
	|	СписаниеТоваров.Подразделение                           КАК Подразделение,
	|	ПРЕДСТАВЛЕНИЕ(СписаниеТоваров.Подразделение)            КАК ПодразделениеПредставление,
	|	СписаниеТоваров.МестоХранения                           КАК МестоХранения,
	|	ПРЕДСТАВЛЕНИЕ(СписаниеТоваров.МестоХранения)            КАК МестоХраненияПредставление,
	|	СписаниеТоваров.Организация.Префикс                     КАК Префикс,
	|	ВЫБОР
	|		КОГДА СписаниеТоваров.МестоХранения ССЫЛКА Справочник.Склады
	|			ТОГДА СписаниеТоваров.МестоХранения.ТекущийОтветственный
	|		ИНАЧЕ """"
	|	КОНЕЦ                                                   КАК Кладовщик,
	|	ВЫБОР
	|		КОГДА СписаниеТоваров.МестоХранения ССЫЛКА Справочник.Склады
	|			ТОГДА СписаниеТоваров.МестоХранения.ТекущаяДолжностьОтветственного
	|		ИНАЧЕ """"
	|	КОНЕЦ                                                   КАК ДолжностьКладовщика,
	|	СписаниеТоваров.Менеджер.ФизическоеЛицо                 КАК Ответственный
	|ИЗ
	|	Документ.СписаниеПринятыхНаХранениеТоваров КАК СписаниеТоваров
	|ГДЕ
	|	СписаниеТоваров.Ссылка В (&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписываемыеТовары.Ссылка                                       КАК Ссылка,
	|	СписываемыеТовары.НомерСтроки                                  КАК НомерСтроки,
	|	" + ?(ВыводитьДопКолонку, "СписываемыеТовары.Номенклатура." + ДопКолонка + " КАК ДопКолонка,", "") + "
	|	СписываемыеТовары.Номенклатура                                 КАК Номенклатура,
	|	СписываемыеТовары.Номенклатура.НаименованиеПолное              КАК НоменклатураПредставление,
	|	СписываемыеТовары.Характеристика                               КАК Характеристика,
	|	СписываемыеТовары.Характеристика.НаименованиеПолное            КАК ХарактеристикаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(СписываемыеТовары.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
	|	СписываемыеТовары.Серия                                        КАК Серия,
	|	ПРЕДСТАВЛЕНИЕ(СписываемыеТовары.Серия)                         КАК СерияПредставление,
	|	СписываемыеТовары.Количество                                   КАК Количество
	|ИЗ
	|	Документ.СписаниеПринятыхНаХранениеТоваров.Товары КАК СписываемыеТовары
	|ГДЕ
	|	СписываемыеТовары.Ссылка В (&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Результаты          = Запрос.ВыполнитьПакет();
	ВыборкаПоДокументам = Результаты[0].Выбрать();
	ВыборкаПоТоварам    = Результаты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента   = НСтр("ru='Акт о списании принятых на хранение товаров'");
	СтруктураДопКолонки = Новый Структура("ДопКолонка", ДопКолонка);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати =
		"ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеПринятыхНаХранениеТоваров_АктОСпианииПринятыхНаХранениеТоваров";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы(
		"Документ.СписаниеПринятыхНаХранениеТоваров.ПФ_MXL_АктОСписанииПринятыхНаХранениеТоваров");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения") Тогда
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	Иначе
		ОбластьЗаголовок = Макет.ПолучитьОбласть("ЗаголовокБезПодразделения");
	КонецЕсли;
	
	ОбластьНомераШапка = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодовШапка  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьТоварШапка  = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
	ОбластьДанныеШапка = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	
	Если Не ВыводитьДопКолонку Тогда
		Макет.Область("Товар").ШиринаКолонки = Макет.Область("Товар").ШиринаКолонки +
			Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
		
	ОбластьНомераСтрока = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодовСтрока  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьТоварСтрока  = Макет.ПолучитьОбласть("Строка|Товар");
	ОбластьДанныхСтрока = Макет.ПолучитьОбласть("Строка|Данные");
	
	ОбластьНомераПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы|НомерСтроки");
	ОбластьКодовПодвалТаблицы  = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
	ОбластьТоварПодвалТаблицы  = Макет.ПолучитьОбласть("ПодвалТаблицы|Товар");
	ОбластьДанныхПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы|Данные");
	
	ОбластьПодписьОтветственного = Макет.ПолучитьОбласть("ПодписьОтветственный");
	ОбластьПодписьКладовщика     = Макет.ПолучитьОбласть("ПодписьКладовщик");
	ОбластьКоличествоВсего       = Макет.ПолучитьОбласть("КоличествоВсего");
	
	ПервыйДокумент = Истина;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		// Вывод шапки документа
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		
		ОбластьЗаголовок.Параметры.Заполнить(ВыборкаПоДокументам);
		
		ТекстЗаголовка         = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента,
			СинонимДокумента);
		ПоставщикПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(
			ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ВыборкаПоДокументам.Поставщик, РеквизитыДокумента.Дата),
			"ПолноеНаименование");
		СкладПредставление     = СкладыСервер.ПолучитьПредставлениеСклада(ВыборкаПоДокументам.МестоХраненияПредставление);
		
		СтруктураДанныхЗаголовка = Новый Структура;
		СтруктураДанныхЗаголовка.Вставить("ТекстЗаголовка",         ТекстЗаголовка);
		СтруктураДанныхЗаголовка.Вставить("ПоставщикПредставление", ПоставщикПредставление);
		СтруктураДанныхЗаголовка.Вставить("СкладПредставление",     СкладПредставление);
		
		ОбластьЗаголовок.Параметры.Заполнить(СтруктураДанныхЗаголовка);
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабДокумент, Макет, ОбластьЗаголовок,
			ВыборкаПоДокументам.Ссылка);
		
		ТабДокумент.Вывести(ОбластьЗаголовок);
		
		// Вывод строк.
		ОтборПоДокументу = Новый Структура("Ссылка", ВыборкаПоДокументам.Ссылка);
		
		Если НЕ ВыборкаПоТоварам.НайтиСледующий(ОтборПоДокументу) Тогда
			Продолжить;
		КонецЕсли;
		
		// Вывод шапки таблицы.
		ТабДокумент.Вывести(ОбластьНомераШапка);
		
		Если ВыводитьДопКолонку Тогда
			ОбластьКодовШапка.Параметры.Заполнить(СтруктураДопКолонки);
			ТабДокумент.Присоединить(ОбластьКодовШапка);
		КонецЕсли;
		
		ТабДокумент.Присоединить(ОбластьТоварШапка);
		ТабДокумент.Присоединить(ОбластьДанныеШапка);
		
		ВсегоНаименований = 0;
		
		ВыборкаПоСтрокам = ВыборкаПоТоварам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоСтрокам.Следующий() Цикл
			
			ОбластьНомераСтрока.Параметры.Заполнить(ВыборкаПоСтрокам);
			ТабДокумент.Вывести(ОбластьНомераСтрока);
			
			Если ВыводитьДопКолонку Тогда
				ОбластьКодовСтрока.Параметры.Заполнить(ВыборкаПоСтрокам);
				ТабДокумент.Присоединить(ОбластьКодовСтрока);
			КонецЕсли;
			
			// Номенклатура.
			Номенклатура              = ВыборкаПоСтрокам.Номенклатура;
			НоменклатураПредставление = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				ВыборкаПоСтрокам.НоменклатураПредставление,
				ВыборкаПоСтрокам.ХарактеристикаПредставление,
				ВыборкаПоСтрокам.СерияПредставление);
			
			СтруктураДанныхТовара = Новый Структура("Номенклатура, НоменклатураПредставление", Номенклатура,
				НоменклатураПредставление);
			
			ОбластьТоварСтрока.Параметры.Заполнить(СтруктураДанныхТовара);
			ТабДокумент.Присоединить(ОбластьТоварСтрока);
			
			// Данные количестве.
			ОбластьДанныхСтрока.Параметры.Заполнить(ВыборкаПоСтрокам);
			ТабДокумент.Присоединить(ОбластьДанныхСтрока);
			
			ВсегоНаименований = ВсегоНаименований + 1;
			
		КонецЦикла;
		
		// Вывод итогов.
		ТабДокумент.Вывести(ОбластьНомераПодвалТаблицы);
		
		Если ВыводитьДопКолонку Тогда
			ТабДокумент.Присоединить(ОбластьКодовПодвалТаблицы);
		КонецЕсли;
		
		ТабДокумент.Присоединить(ОбластьТоварПодвалТаблицы);
		ТабДокумент.Присоединить(ОбластьДанныхПодвалТаблицы);
		
		ТекстИтоговойСтроки = НСтр("ru = 'Всего наименований %ВсегоНаименований%'");
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%ВсегоНаименований%", ВсегоНаименований);
		
		СтруктураДанныхИтогов = Новый Структура("ИтоговаяСтрока", ТекстИтоговойСтроки);
		
		ОбластьКоличествоВсего.Параметры.Заполнить(СтруктураДанныхИтогов);
		ТабДокумент.Вывести(ОбластьКоличествоВсего);
		
		// Вывод подписей.
		Ответственный      = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Ответственный,
			ВыборкаПоДокументам.Дата);
		
		СтруктураПодписиОтветственного = Новый Структура("Ответственный", Ответственный);
		
		ОбластьПодписьОтветственного.Параметры.Заполнить(СтруктураПодписиОтветственного);
		ТабДокумент.Вывести(ОбластьПодписьОтветственного);
		
		Если ВыборкаПоДокументам.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровХранящихсяНаСкладе Тогда
			Кладовщик          = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Кладовщик,
				ВыборкаПоДокументам.Дата);
			ДолжностьКладовщика = СкладыСервер.ДолжностьОтветственногоЛицаСклада(ВыборкаПоДокументам.ДолжностьКладовщика);
			
			СтруктураПодписиКладовщика = Новый Структура("Кладовщик, КладовщикДолжность", Кладовщик, ДолжностьКладовщика);
			
			ОбластьПодписьКладовщика.Параметры.Заполнить(СтруктураПодписиКладовщика);
			ТабДокумент.Вывести(ОбластьПодписьКладовщика);
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати,
			ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ПолноеИмяОбъекта()
	
	Возврат "Документ.СписаниеПринятыхНаХранениеТоваров";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
