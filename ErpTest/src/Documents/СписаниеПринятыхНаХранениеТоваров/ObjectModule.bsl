#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция формирует временные таблицы с данными документа.
// Используется для заполнения видов запасов.
//
// Возвращаемое значение:
//	МенеджерВременныхТаблиц - менеджер временных таблиц.
//
Функция ВременныеТаблицыДанныхДокумента() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	&Дата                                                      КАК Дата,
	|	&Партнер                                                   КАК Партнер,
	|	&Контрагент                                                КАК Контрагент,
	|	&Соглашение                                                КАК Соглашение,
	|	&Договор                                                   КАК Договор,
	|	&Организация                                               КАК Организация,
	|	&Склад                                                     КАК Склад,
	|	&МестоХранения                                             КАК МестоХранения,
	|	&ХозяйственнаяОперация                                     КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                                               КАК Валюта,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка) КАК НалогообложениеНДС,
	|	ЛОЖЬ                                                       КАК ЕстьСделкиВТабличнойЧасти,
	|   &Подразделение                                             КАК Подразделение,
	|   &Менеджер                                                  КАК Менеджер,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ТоварНаХраненииСПравомПродажи) КАК ТипЗапасов
	|ПОМЕСТИТЬ ТаблицаДанныхДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки                КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура               КАК Номенклатура,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Характеристика             КАК Характеристика,
	|	ТаблицаТоваров.Назначение                 КАК Назначение,
	|	ТаблицаТоваров.Серия КАК Серия,
	|	ТаблицаТоваров.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ТаблицаТоваров.Упаковка                   КАК Упаковка,
	|	ТаблицаТоваров.Количество                 КАК Количество
	|
	|ПОМЕСТИТЬ ВтТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки                         КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура                        КАК Номенклатура,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры 		   КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Характеристика                      КАК Характеристика,
	|	ТаблицаТоваров.Серия                               КАК Серия,
	|	ТаблицаТоваров.СтатусУказанияСерий                 КАК СтатусУказанияСерий,
	|	ТаблицаТоваров.Назначение                          КАК Назначение,
	|	ТаблицаТоваров.Количество                          КАК Количество,
	|	&Склад                                             КАК Склад,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка)      КАК СтавкаНДС,
	|	ТаблицаТоваров.Упаковка                            КАК Упаковка,
	|	0                                                  КАК Цена,
	|	0                                                  КАК СуммаНДС,
	|	0                                                  КАК СуммаСНДС,
	|	0                                                  КАК СуммаВознаграждения,
	|	0                                                  КАК СуммаНДСВознаграждения,
	|	ИСТИНА                                             КАК ПодбиратьВидыЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)        КАК НомерГТД
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	ВтТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки                     КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры      КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов                      КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД                        КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество                      КАК Количество,
	|	ТаблицаВидыЗапасов.Упаковка                        КАК Упаковка
	|
	|ПОМЕСТИТЬ ВтВидыЗапасов
	|ИЗ
	|	&ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки                     КАК НомерСтроки,
	|	НЕОПРЕДЕЛЕНО                                       КАК ДокументРеализации,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры      КАК АналитикаУчетаНоменклатуры,
	|	Аналитика.Номенклатура                             КАК Номенклатура,
	|	Аналитика.Характеристика                           КАК Характеристика,
	|	Аналитика.Серия                                    КАК Серия,
	|	ТаблицаВидыЗапасов.ВидЗапасов                      КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД                        КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество                      КАК Количество,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка)      КАК СтавкаНДС,
	|	0                                                  КАК Цена,
	|	ТаблицаВидыЗапасов.Упаковка                        КАК Упаковка,
	|	0                                                  КАК СуммаСНДС,
	|	0                                                  КАК СуммаНДС,
	|	0                                                  КАК СуммаВознаграждения,
	|	0                                                  КАК СуммаНДСВознаграждения,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)           КАК СкладОтгрузки,
	|	Аналитика.Склад                                    КАК Склад,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка) КАК Сделка,
	|	ЛОЖЬ                         					   КАК ВидыЗапасовУказаныВручную
	|
	|ПОМЕСТИТЬ ТаблицаВидыЗапасов
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры
	|");
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка",                    Ссылка);
	Запрос.УстановитьПараметр("Дата",                      Дата);
	Запрос.УстановитьПараметр("Партнер",                   Партнер);
	Запрос.УстановитьПараметр("Контрагент",                Контрагент);
	Запрос.УстановитьПараметр("Соглашение",                Соглашение);
	Запрос.УстановитьПараметр("Договор",                   Договор);
	Запрос.УстановитьПараметр("Организация",               Организация);
	Запрос.УстановитьПараметр("Склад",                     МестоХранения);
	Запрос.УстановитьПараметр("МестоХранения",             МестоХранения);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",     ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("Менеджер",                  Менеджер);
	Запрос.УстановитьПараметр("ТаблицаТоваров",            Товары);
	Запрос.УстановитьПараметр("ТаблицаВидыЗапасов",        ВидыЗапасов);
	Запрос.УстановитьПараметр("Подразделение",             Подразделение);
	
	ЗапасыСервер.ДополнитьВременныеТаблицыОбязательнымиКолонками(Запрос);
	
	Запрос.Выполнить();
	
	Возврат Запрос.МенеджерВременныхТаблиц;
	
КонецФункции

// Процедура формирует временную таблицу товаров с аналитикой обособленного учета.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц.
//
Процедура СформироватьВременнуюТаблицуТоваровИАналитики(МенеджерВременныхТаблиц) Экспорт
	
	Запрос                         = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры                  КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Номенклатура                                КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика                              КАК Характеристика,
	|	ТаблицаТоваров.Назначение                                  КАК Назначение,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.СтатусУказанияСерий = 14
	|			ТОГДА ТаблицаТоваров.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Серия,
	|	ТаблицаТоваров.Количество                                  КАК Количество,
	|	ТаблицаДанныхДокумента.Партнер                             КАК Партнер,
	|	ТаблицаДанныхДокумента.Соглашение                          КАК Соглашение,
	|	ТаблицаДанныхДокумента.Подразделение                       КАК Подразделение,
	|	ТаблицаТоваров.Склад                                       КАК Склад,
	|	ТаблицаДанныхДокумента.Менеджер                            КАК Менеджер,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка)         КАК Сделка,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка) КАК НалогообложениеНДС
	|
	|ПОМЕСТИТЬ ТаблицаТоваровИАналитики
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДанныхДокумента КАК ТаблицаДанныхДокумента
	|		ПО (ИСТИНА)";
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Заполняет условия закупок по умолчанию в документе списания принятых на хранение товаров.
//
Процедура ЗаполнитьУсловияЗакупокПоУмолчанию() Экспорт
	
	Если ЗначениеЗаполнено(Соглашение) Тогда
		Соглашение = Справочники.СоглашенияСПоставщиками.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Партнер) Тогда
		
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("ТолькоДействующее",                       Истина);
		ПараметрыОтбора.Вставить("УчитыватьГруппыСкладов",                  Истина);
		ПараметрыОтбора.Вставить("ИсключитьГруппыСкладовДоступныеВЗаказах", Истина);
		ПараметрыОтбора.Вставить("ВыбранноеСоглашение",                     Соглашение);
		ПараметрыОтбора.Вставить("ХозяйственныеОперации", Перечисления.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи);
		
		УсловияЗакупокПоУмолчанию = ЗакупкиСервер.ПолучитьУсловияЗакупокПоУмолчанию(Партнер, ПараметрыОтбора);
		
		Если УсловияЗакупокПоУмолчанию <> Неопределено Тогда
			
			Если Соглашение <> УсловияЗакупокПоУмолчанию.Соглашение
				И ЗначениеЗаполнено(УсловияЗакупокПоУмолчанию.Соглашение) Тогда
				
				Соглашение = УсловияЗакупокПоУмолчанию.Соглашение;
				ЗаполнитьУсловияЗакупок(УсловияЗакупокПоУмолчанию);
				
			Иначе
				Соглашение = УсловияЗакупокПоУмолчанию.Соглашение;
				ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
			КонецЕсли;
			
		Иначе
			Соглашение = Неопределено;
			ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет условия закупок по соглашению в документе списания принятых на хранение товаров.
//
Процедура ЗаполнитьУсловияЗакупокПоСоглашению() Экспорт
	
	УсловияЗакупок = ЗакупкиСервер.ПолучитьУсловияЗакупок(Соглашение);
	ЗаполнитьУсловияЗакупок(УсловияЗакупок);
	
КонецПроцедуры

// Заполняет условия закупок в документе списания принятых на хранение товаров по заданным параметрам.
//
// Параметры:
//	УсловияЗакупок - Структура - структура для заполнения реквизитов документа.
//
Процедура ЗаполнитьУсловияЗакупок(Знач УсловияЗакупок) Экспорт
	
	Если УсловияЗакупок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаправлениеДеятельности = УсловияЗакупок.НаправлениеДеятельности;
	
	Если ЗначениеЗаполнено(УсловияЗакупок.Организация)
		И УсловияЗакупок.Организация <> Организация Тогда
		
		Организация = УсловияЗакупок.Организация;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияЗакупок.Контрагент)
		И УсловияЗакупок.Контрагент <> Контрагент Тогда
		
		Контрагент = УсловияЗакупок.Контрагент;
		
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровХранящихсяНаСкладе
		И ЗначениеЗаполнено(УсловияЗакупок.Склад) Тогда
		
		МестоХранения = УсловияЗакупок.Склад;
		
	КонецЕсли;
	
	ХозяйственнаяОперацияДоговора = УсловияЗакупок.ХозяйственнаяОперация;
	
	Если УсловияЗакупок.ИспользуютсяДоговорыКонтрагентов <> Неопределено
		И УсловияЗакупок.ИспользуютсяДоговорыКонтрагентов Тогда
		
		Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(ЭтотОбъект, ХозяйственнаяОперацияДоговора);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетЗатратПоНаправлениямДеятельности") Тогда
			НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(НаправлениеДеятельности, Соглашение, Договор);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет табличную часть документа по остаткам к оформлению излишков и недостач.
//
Процедура ЗаполнитьТабличнуюЧастьТовары(ДокументОснование = Неопределено, ИнтерактивноеЗаполнение = Ложь) Экспорт
	
	ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач = 
		СкладыСервер.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач(МестоХранения, Дата);
	
	Если Не ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач Тогда
		
		Если ИнтерактивноеЗаполнение Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ордерная схема при отражении излишков и недостач в месте хранения ""%1"" на дату %2 не используется.'"),
				СокрЛП(МестоХранения),
				Формат(Дата, "ДЛФ=D"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект);
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ТоварыПринятые.Номенклатура           КАК Номенклатура,
	|	ТоварыПринятые.Характеристика         КАК Характеристика,
	|	ТоварыПринятые.Назначение             КАК Назначение,
	|	ТоварыПринятые.Серия                  КАК Серия,
	|	СУММА(ТоварыПринятые.ПолученоОстаток) КАК Количество
	|
	|ПОМЕСТИТЬ ТоварыПринятые
	|ИЗ
	|	РегистрНакопления.ТоварыПринятые.Остатки(,
	|		Договор = &Договор
	|		И Владелец = &Партнер) КАК ТоварыПринятые
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыПринятые.Номенклатура,
	|	ТоварыПринятые.Характеристика,
	|	ТоварыПринятые.Назначение,
	|	ТоварыПринятые.Серия
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыПринятые.ПолученоОстаток) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура                    КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика                  КАК Характеристика,
	|	ТоварыКОформлению.Назначение                      КАК Назначение,
	|	ТоварыКОформлению.Серия                           КАК Серия,
	|	СУММА(-ТоварыКОформлению.КОформлениюАктовОстаток) КАК Количество
	|
	|ПОМЕСТИТЬ ТоварыНедостач
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюИзлишковНедостач.Остатки(, Склад = &Склад) КАК ТоварыКОформлению
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Назначение,
	|	ТоварыКОформлению.Серия
	|
	|ИМЕЮЩИЕ
	|	СУММА(-ТоварыКОформлению.КОформлениюАктовОстаток) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура      КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика    КАК Характеристика,
	|	ТоварыКОформлению.Назначение        КАК Назначение,
	|	ТоварыКОформлению.Серия             КАК Серия,
	|	СУММА(ТоварыКОформлению.Количество) КАК Количество
	|
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыПринятые.Номенклатура   КАК Номенклатура,
	|		ТоварыПринятые.Характеристика КАК Характеристика,
	|		ТоварыПринятые.Назначение     КАК Назначение,
	|		ТоварыПринятые.Серия          КАК Серия,
	|		ВЫБОР
	|			КОГДА ТоварыПринятые.Количество <= ТоварыНедостач.Количество
	|				ТОГДА ТоварыПринятые.Количество
	|			ИНАЧЕ ТоварыНедостач.Количество
	|		КОНЕЦ                         КАК Количество
	|	ИЗ
	|		ТоварыПринятые КАК ТоварыПринятые
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыНедостач КАК ТоварыНедостач
	|			ПО ТоварыПринятые.Номенклатура      = ТоварыНедостач.Номенклатура
	|				И ТоварыПринятые.Характеристика = ТоварыНедостач.Характеристика
	|				И ТоварыПринятые.Назначение     = ТоварыНедостач.Назначение
	|				И ТоварыПринятые.Серия          = ТоварыНедостач.Серия
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыКСписанию.Номенклатура,
	|		ТоварыКСписанию.Характеристика,
	|		ТоварыКСписанию.Назначение,
	|		ТоварыКСписанию.Серия,
	|		ТоварыКСписанию.КОформлениюАктов
	|	ИЗ
	|		РегистрНакопления.ТоварыКОформлениюИзлишковНедостач КАК ТоварыКСписанию
	|	ГДЕ
	|		ТоварыКСписанию.Регистратор  = &СписаниеПринятыхТоваров
	|		И ТоварыКСписанию.Активность = ИСТИНА) КАК ТоварыКОформлению
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Назначение,
	|	ТоварыКОформлению.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыКОформлению.Номенклатура   КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика КАК Характеристика,
	|	ТоварыКОформлению.Назначение     КАК Назначение,
	|	ТоварыКОформлению.Серия          КАК Серия,
	|	ТоварыКОформлению.Количество     КАК Количество,
	|	ТоварыКОформлению.Количество     КАК КоличествоУпаковок
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОрдерНаОтражениеНедостачТоваров.Товары КАК ОрдерНаОтражениеНедостачТоваровТовары
	|		ПО (&НаОснованииОрдера)
	|			И ТоварыКОформлению.Номенклатура = ОрдерНаОтражениеНедостачТоваровТовары.Номенклатура
	|			И ТоварыКОформлению.Характеристика = ОрдерНаОтражениеНедостачТоваровТовары.Характеристика
	|			И ТоварыКОформлению.Назначение = ОрдерНаОтражениеНедостачТоваровТовары.Назначение
	|			И (ОрдерНаОтражениеНедостачТоваровТовары.СтатусУказанияСерий <> 14
	|				ИЛИ ТоварыКОформлению.Серия = ОрдерНаОтражениеНедостачТоваровТовары.Серия)
	|ГДЕ
	|	НЕ &НаОснованииОрдера
	|		ИЛИ &НаОснованииОрдера
	|			И НЕ ОрдерНаОтражениеНедостачТоваровТовары.Номенклатура ЕСТЬ NULL
	|			И ОрдерНаОтражениеНедостачТоваровТовары.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Серия";
	
	НаОснованииОрдера = ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОрдерНаОтражениеНедостачТоваров");
	
	Запрос.УстановитьПараметр("СписаниеПринятыхТоваров", Ссылка);
	Запрос.УстановитьПараметр("Партнер",                 Партнер);
	Запрос.УстановитьПараметр("Склад",                   МестоХранения);
	Запрос.УстановитьПараметр("Договор",                 Договор);
	Запрос.УстановитьПараметр("ДокументОснование",       ДокументОснование);
	Запрос.УстановитьПараметр("НаОснованииОрдера",       НаОснованииОрдера);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не Результат.Пустой() Тогда
		
		Товары.Загрузить(Результат.Выгрузить());
		
	ИначеЕсли ЗначениеЗаполнено(ДокументОснование) Тогда
		
		ТекстСообщения = НСтр("ru = 'В документе ""%ДокументОснование%"" отсутствуют товары, по которым необходимо оформить списание.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДокументОснование%", ДокументОснование);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект);
		
	ИначеЕсли ИнтерактивноеЗаполнение Тогда
		
		ТекстСообщения = НСтр("ru='Отсутствуют остатки товаров, по которым необходимо оформить списание.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет аналитики учета номенклатуры. Используется в отчете ОстаткиТоваровОрганизаций.
Процедура ЗаполнитьАналитикиУчетаНоменклатуры() Экспорт
	
	ЭтоСписаниеТоваровСоСклада = ЭтоСписаниеТоваровСоСклада(ХозяйственнаяОперация);
		
	СкладСписания         = ?(ЭтоСписаниеТоваровСоСклада, МестоХранения, Справочники.Склады.ПустаяСсылка());
	ПодразделениеСписания = ?(Не ЭтоСписаниеТоваровСоСклада, МестоХранения,
		Справочники.СтруктураПредприятия.ПустаяСсылка());
			
	МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(ХозяйственнаяОперация, СкладСписания,
	ПодразделениеСписания, Партнер);
	РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(Товары, МестаУчета);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ДокументОснование = Неопределено;
	ЗаполнитьТабличнуюЧастьТовары = Истина;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("АктОРасхождениях") 
			И ДанныеЗаполнения.Свойство("ОснованиеАкта") Тогда
			
			ЗаполнитьДокументНаОснованииАктаПриемки(ДанныеЗаполнения);
			
			ДокументОснование             = ДанныеЗаполнения.АктОРасхождениях;
			ЗаполнитьТабличнуюЧастьТовары = Ложь;
			
		Иначе
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
			ЗаполнитьДокументПоОтбору(ДанныеЗаполнения);
			
			ЗаполнитьТабличнуюЧастьТовары =
				ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровХранящихсяНаСкладе
				И ЗначениеЗаполнено(МестоХранения)
				И Не ДанныеЗаполнения.Свойство("НеЗаполнятьТаблинуюЧастьТовары");
		КонецЕсли;
		
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ДанныеЗаполнения))
		И ДанныеЗаполнения <> Неопределено Тогда
		
		ДокументОснование = ДанныеЗаполнения;
		
	КонецЕсли;
	
	ИнициализироватьДокумент();
	
	ОтветственныеЛицаСервер.ОтветственныеЛицаДокументаОбработкаЗаполнения(Ссылка, ДанныеЗаполнения, СтандартнаяОбработка);
	
	Если ЗаполнитьТабличнуюЧастьТовары Тогда
		ЗаполнитьТабличнуюЧастьТовары(ДокументОснование);
	КонецЕсли;
	
	СписаниеПринятыхНаХранениеТоваровЛокализация.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, СтандартнаяОбработка);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	ПараметрыУказанияСерий        = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект,
		Документы.СписаниеПринятыхНаХранениеТоваров);
	
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ);
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект, ПараметрыУказанияСерий, Отказ,
		МассивНепроверяемыхРеквизитов);
	
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	
	Если ЗначениеЗаполнено(НаправлениеДеятельности)
		Или Не НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(ХозяйственнаяОперация) Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("НаправлениеДеятельности");
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	СписаниеПринятыхНаХранениеТоваровЛокализация.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект,
		Документы.СписаниеПринятыхНаХранениеТоваров);
	
	ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи);
	
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыУказанияСерий);
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ЗаполнитьАналитикиУчетаНоменклатуры();
		ЗаполнитьВидыЗапасов(Отказ);
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(ВидыЗапасов);
		
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ЗакупкиСервер.СвязатьНоменклатуруСНоменклатуройПоставщика(Товары, Отказ);
	КонецЕсли;
	
	Если ЭтоНовый()
		И Не ЗначениеЗаполнено(Номер) Тогда
		
		УстановитьНовыйНомер();
		
	КонецЕсли;
	
	СписаниеПринятыхНаХранениеТоваровЛокализация.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	Документы.СписаниеПринятыхНаХранениеТоваров.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ДоходыИРасходыСервер.ОтразитьСебестоимостьТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьСвободныеОстатки(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыКОформлениюИзлишковНедостач(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьРезервыТоваровОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыПринятые(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьОбеспечениеЗаказов(ДополнительныеСвойства, Движения, Отказ);
	СкладыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();
	
	СписаниеПринятыхНаХранениеТоваровЛокализация.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения);

	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.ЗаписатьПодчиненныеНаборамЗаписейДанные(ЭтотОбъект, Отказ);
	
	РегистрыСведений.РеестрДокументов.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СформироватьСписокРегистровДляКонтроля();
	
	ЗапасыСервер.ПодготовитьЗаписьТоваровОрганизаций(ЭтотОбъект, РежимЗаписиДокумента.ОтменаПроведения);
	
	СписаниеПринятыхНаХранениеТоваровЛокализация.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ);

	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПараметрыЗаполнения = ПараметрыЗаполненияВидовЗапасов();
	ЗапасыСервер.СформироватьРезервыПоТоварамОрганизаций(ЭтотОбъект, Отказ, ПараметрыЗаполнения);
	
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.ЗаписатьПодчиненныеНаборамЗаписейДанные(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Отказ
		И Не ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
		
	КонецЕсли;
	
	СписаниеПринятыхНаХранениеТоваровЛокализация.ПриЗаписи(ЭтотОбъект, Отказ);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ИнициализироватьДокумент();
	ОтветственныеЛицаСервер.ОтветственныеЛицаДокументаПриКопировании(Ссылка, ОбъектКопирования);
	
	Если ВидыЗапасов.Количество() > 0 Тогда
		ВидыЗапасов.Очистить();
	КонецЕсли;
	
	СписаниеПринятыхНаХранениеТоваровЛокализация.ПриКопировании(ЭтотОбъект, ОбъектКопирования);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ЗаполнитьДокументНаОснованииАктаПриемки(ДанныеЗаполнения)
	
	ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач =
		СкладыСервер.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач(ДанныеЗаполнения.Склад);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АктОРасхожденияхПослеПриемки.Ссылка                              КАК АктОРасхождениях,
	|	АктОРасхожденияхПослеПриемки.Партнер                             КАК Партнер,
	|	АктОРасхожденияхПослеПриемки.Контрагент                          КАК Контрагент,
	|	АктОРасхожденияхПослеПриемки.Соглашение                          КАК Соглашение,
	|	АктОРасхожденияхПослеПриемки.Организация                         КАК Организация,
	|	АктОРасхожденияхПослеПриемки.Договор                             КАК Договор,
	|	&Склад                                                           КАК Склад,
	|	АктОРасхожденияхПослеПриемки.Менеджер                            КАК Менеджер,
	|	АктОРасхожденияхПослеПриемки.Подразделение                       КАК Подразделение,
	|	&АктОРасхождениях                                                КАК Основание,
	|	НЕ АктОРасхожденияхПослеПриемки.Проведен                         КАК ЕстьОшибкиПроведенАктОРасхождениях,
	|	АктОРасхожденияхПослеПриемки.Статус                              КАК СтатусАктаОРасхождениях,
	|	НЕ АктОРасхожденияхПослеПриемки.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыАктаОРасхождениях.Отработано),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыАктаОРасхождениях.КВыполнению)) КАК ЕстьОшибкиСтатусАкт
	|ИЗ
	|	Документ.АктОРасхожденияхПослеПриемки КАК АктОРасхожденияхПослеПриемки
	|ГДЕ
	|	АктОРасхожденияхПослеПриемки.Ссылка = &АктОРасхождениях
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктОРасхожденияхПослеПриемкиТовары.Номенклатура           КАК Номенклатура,
	|	АктОРасхожденияхПослеПриемкиТовары.НоменклатураПоставщика КАК НоменклатураПоставщика,
	|	АктОРасхожденияхПослеПриемкиТовары.Характеристика         КАК Характеристика,
	|	АктОРасхожденияхПослеПриемкиТовары.Назначение             КАК Назначение,
	|	АктОРасхожденияхПослеПриемкиТовары.КоличествоПоДокументу -
	|		АктОРасхожденияхПослеПриемкиТовары.Количество          КАК КоличествоУпаковок,
	|	АктОРасхожденияхПослеПриемкиТовары.КоличествоПоДокументу -
	|		АктОРасхожденияхПослеПриемкиТовары.Количество          КАК Количество,
	|	АктОРасхожденияхПослеПриемкиТовары.Серия                   КАК Серия,
	|	АктОРасхожденияхПослеПриемкиТовары.СтатусУказанияСерий     КАК СтатусУказанияСерий
	|ИЗ
	|	Документ.АктОРасхожденияхПослеПриемки.Товары КАК АктОРасхожденияхПослеПриемкиТовары
	|ГДЕ
	|	АктОРасхожденияхПослеПриемкиТовары.Ссылка = &АктОРасхождениях
	|	И АктОРасхожденияхПослеПриемкиТовары.КоличествоПоДокументу - АктОРасхожденияхПослеПриемкиТовары.Количество > 0
	|	И АктОРасхожденияхПослеПриемкиТовары.Склад = &Склад
	|	И АктОРасхожденияхПослеПриемкиТовары.Действие = ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиНедостачуНаПрочиеРасходы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	АктОРасхожденияхПослеПриемкиТовары.НомерСтроки";;
	
	Запрос.УстановитьПараметр("АктОРасхождениях", ДанныеЗаполнения.АктОРасхождениях);
	Запрос.УстановитьПараметр("Склад",            ДанныеЗаполнения.Склад);
	Запрос.УстановитьПараметр("Основание",        ДанныеЗаполнения.АктОРасхождениях);
	
	УстановитьПривилегированныйРежим(Истина);
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыборкаШапка = ПакетЗапросов[0].Выбрать();
	
	ВыборкаШапка.Следующий();
	
	// По акту о расхождениях после приемки.
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(ВыборкаШапка.АктОРасхождениях,
		ВыборкаШапка.СтатусАктаОРасхождениях,
		ВыборкаШапка.ЕстьОшибкиПроведенАктОРасхождениях,
		ВыборкаШапка.ЕстьОшибкиСтатусАкт,
		РасхожденияСервер.МассивДопустимыхСтатусовАктовОРасхожденияхПриСозданииНаОсновании());
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	
	МестоХранения         = ДанныеЗаполнения.Склад;
	ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровХранящихсяНаСкладе;
	
	Если Не ПакетЗапросов[1].Пустой() Тогда
		Товары.Загрузить(ПакетЗапросов[1].Выгрузить());
	ИначеЕсли ЗначениеЗаполнено(ДанныеЗаполнения.АктОРасхождениях) Тогда
		ТекстСообщения = НСтр("ru = 'В документе ""%ДокументОснование%"" отсутствуют товары, по которым необходимо оформить списание.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДокументОснование%", ДанныеЗаполнения.АктОРасхождениях);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоОтбору(Знач ДанныеЗаполнения)
	
	Если ДанныеЗаполнения.Свойство("Партнер") Тогда
		Партнер = ДанныеЗаполнения.Партнер;
		
		ЗаполнитьУсловияЗакупокПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьДокумент()
	
	Менеджер    = Пользователи.ТекущийПользователь();
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	
	ЭтоСписаниеТоваровСоСклада = ЭтоСписаниеТоваровСоСклада(ХозяйственнаяОперация);
	
	МестоХранения = ?(ЭтоСписаниеТоваровСоСклада,
		ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(МестоХранения),
		ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Менеджер, Подразделение));
	
	Если ЭтоСписаниеТоваровСоСклада
		И ЗначениеЗаполнено(МестоХранения)
		И Не ЗначениеЗаполнено(ИсточникИнформацииОЦенахДляПечати) Тогда
		
		ИсточникИнформацииОЦенахДляПечати = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МестоХранения,
			"ИсточникИнформацииОЦенахДляПечати");
		
		Если Не ЗначениеЗаполнено(ИсточникИнформацииОЦенахДляПечати)
			И Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовЦен") Тогда
			
			ИсточникИнформацииОЦенахДляПечати = Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПоСебестоимости;
			
		КонецЕсли;
		
		Если ИсточникИнформацииОЦенахДляПечати = Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПоСебестоимости Тогда
			ВидЦеныПоставщика = Неопределено;
		Иначе
			
			Если ЗначениеЗаполнено(Соглашение) Тогда
				ВидЦеныПоСоглашению = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Соглашение, "ВидЦеныПоставщика");
				ВидЦеныПоставщика   = ВидЦеныПоСоглашению;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВидыЗапасов

Процедура ЗаполнитьВидыЗапасов(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерВременныхТаблиц  = ВременныеТаблицыДанныхДокумента();
	ПерезаполнитьВидыЗапасов = ДополнительныеСвойства.Свойство("ПерезаполнитьВидыЗапасов");
	
	Если Не Проведен
		Или ПерезаполнитьВидыЗапасов
		Или ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц)
		Или ЗапасыСервер.ПроверитьИзменениеТоваровПоКоличеству(МенеджерВременныхТаблиц) Тогда
		
		ПараметрыЗаполнения = ПараметрыЗаполненияВидовЗапасов();
		ЗапасыСервер.ЗаполнитьВидыЗапасовПоТоварамОрганизаций(ЭтотОбъект, МенеджерВременныхТаблиц, Отказ, ПараметрыЗаполнения);
		
		ВидыЗапасов.Свернуть("АналитикаУчетаНоменклатуры, ВидЗапасов, НомерГТД", "Количество");
		ЗаполнитьДопКолонкиВидовЗапасов();
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыЗаполненияВидовЗапасов()
	ПараметрыЗаполнения = ЗапасыСервер.ПараметрыЗаполненияВидовЗапасов();
	ПараметрыЗаполнения.ПодбиратьВидыЗапасовПоИнтеркампани = Ложь;
	
	ОтборыВидовЗапасов = ПараметрыЗаполнения.ОтборыВидовЗапасов;
	ОтборыВидовЗапасов.Организация = Организация;
	ОтборыВидовЗапасов.ВладелецТовара = Партнер;
	ОтборыВидовЗапасов.Договор = Договор;
	ОтборыВидовЗапасов.ТипЗапасов = Перечисления.ТипыЗапасов.ТоварНаХраненииСПравомПродажи;
	
	Возврат ПараметрыЗаполнения;
КонецФункции

Функция ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц)
	
	ИменаРеквизитов = "Организация, Дата, Партнер, МестоХранения";
	
	Возврат ЗапасыСервер.ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц, Ссылка, ИменаРеквизитов);
	
КонецФункции

// Процедура заполняет дополнительные колонки табличной части 'ВидыЗапасов' документа.
//
Процедура ЗаполнитьДопКолонкиВидовЗапасов() Экспорт
	
	ТаблицаТовары = Товары.Выгрузить(, "АналитикаУчетаНоменклатуры, Упаковка, КоличествоУпаковок, Количество");
	ТаблицаТовары.Свернуть("АналитикаУчетаНоменклатуры, Упаковка", "Количество, КоличествоУпаковок");
	
	СтруктураПоиска = Новый Структура("АналитикаУчетаНоменклатуры");
	
	Для Каждого СтрокаТоваров Из ТаблицаТовары Цикл
		
		КоличествоТоваров  = СтрокаТоваров.Количество;
		КоличествоУпаковок = СтрокаТоваров.КоличествоУпаковок;
		
		Если КоличествоТоваров = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТоваров);
		
		Для Каждого СтрокаЗапасов Из ВидыЗапасов.НайтиСтроки(СтруктураПоиска) Цикл
			
			Если СтрокаЗапасов.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Количество = Мин(КоличествоТоваров, СтрокаЗапасов.Количество);
			
			НоваяСтрока = ВидыЗапасов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗапасов);
			
			НоваяСтрока.Упаковка            = СтрокаТоваров.Упаковка;
			НоваяСтрока.КоличествоУпаковок  = КоличествоУпаковок * Количество / КоличествоТоваров;
			НоваяСтрока.Количество          = Количество;
			
			СтрокаЗапасов.Количество = СтрокаЗапасов.Количество - НоваяСтрока.Количество;
			
			КоличествоТоваров       = КоличествоТоваров - НоваяСтрока.Количество;
			КоличествоУпаковок      = КоличествоУпаковок - НоваяСтрока.КоличествоУпаковок;
			
			Если КоличествоТоваров = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Отбор = Новый Структура("Количество", 0);
	МассивУдаляемыхСтрок = ВидыЗапасов.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаТаблицы Из МассивУдаляемыхСтрок Цикл
		ВидыЗапасов.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура СформироватьСписокРегистровДляКонтроля()
	
	Массив = Новый Массив;
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);
	
КонецПроцедуры

Функция ЭтоСписаниеТоваровСоСклада(ХозяйственнаяОперация)
	
	Если Не ЗначениеЗаполнено(ХозяйственнаяОперация) Тогда
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровХранящихсяНаСкладе;
	КонецЕсли;
	
	Возврат ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровХранящихсяНаСкладе;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
