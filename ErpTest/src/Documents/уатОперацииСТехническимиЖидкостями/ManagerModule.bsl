#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	СформироватьТаблицаПартииТЖ(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаРасходТЖ(ДокументСсылка, СтруктураДополнительныеСвойства);
КонецПроцедуры // ИнициализироватьДанныеДокумента()

// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	ЭтоПриходТЖ = (ДокументСсылка.ВидОперации = Перечисления.уатВидыОперацийСТехническимиЖидкостями.ДоливПоАкту
		ИЛИ ДокументСсылка.ВидОперации = Перечисления.уатВидыОперацийСТехническимиЖидкостями.ДоливПоТО
		ИЛИ ДокументСсылка.ВидОперации = Перечисления.уатВидыОперацийСТехническимиЖидкостями.ДоливПрочее);
		
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ДокументСсылка);
	
	Если НЕ ЭтоПриходТЖ Тогда
		тблТЖ = ДокументСсылка.ТехническиеЖидкости.Выгрузить();
		тблТЖ.Свернуть("ТС, Номенклатура");
		Для Каждого ТекСтрока Из тблТЖ Цикл
			КоличествоОстаток = уатГСМ.ОстатокТЖнаТС(ТекСтрока.ТС, ТекСтрока.Номенклатура, ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
			
			Если КоличествоОстаток < 0 Тогда
				ТекстСообщения = "ТЖ """ + ТекСтрока.Номенклатура + """, ТС """ + уатОбщегоНазначения.уатПредставлениеТС(ТекСтрока.ТС, ДокументСсылка.Организация) + """ ";
				ТекстСообщения = ТекстСообщения + " - отрицательный остаток ТЖ на ТС.";
				ТекстСообщения = ТекстСообщения + Символы.ПС + "Остаток на ТС: " + КоличествоОстаток + ".";
				
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
			КонецЕсли;
			
			//проверим остатки без указания текущей даты
			КоличествоОстатокБезДаты = уатГСМ.ОстатокТЖнаТС(ТекСтрока.ТС, ТекСтрока.Номенклатура, Дата(3999,12,31,23,59,59));
			
			Если КоличествоОстатокБезДаты < 0 Тогда
				ТекстСообщения = "ТЖ """ + ТекСтрока.Номенклатура + """, ТС """ + уатОбщегоНазначения.уатПредставлениеТС(ТекСтрока.ТС, ДокументСсылка.Организация) + """ ";
				ТекстСообщения = ТекстСообщения + " - отрицательный остаток ТЖ на ТС.";
				ТекстСообщения = ТекстСообщения + Символы.ПС + "Остаток на ТС: " + КоличествоОстатокБезДаты + ".";
				
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	Заглушка = Истина;
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатОперацииСТехническимиЖидкостями";
	КомандаПечати.Идентификатор = "ОперацииСТЖ";
	КомандаПечати.Представление = НСтр("ru = 'Операции с ТЖ'");
	
КонецПроцедуры

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если НЕ уатОбщегоНазначенияСервер.РазрешениеПечатиНепроведенногоДокумента(МассивОбъектов) Тогда
		Возврат;
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОперацииСТЖ") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ОперацииСТЖ",
			"Операции с техническими жидкостями", ПечатьОперацииСТЖ(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.УстановитьРедактированиеПечатныхФормДокумента(КоллекцияПечатныхФорм);
	
КонецПроцедуры // Печать

// Процедура осуществляет печать формы "ОперацииСТЖ"
//
Функция ПечатьОперацииСТЖ(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОперацииСТЖ";
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатОперацииСТехническимиЖидкостями.ПФ_MXL_ОперацииСТЖ");
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ТекущийДокумент, "Операции с техническими жидкостями");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ВидОперации");
		ОбластьМакета.Параметры.ВидОперации = ТекущийДокумент.ВидОперации;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Склад = ТекущийДокумент.Склад;
		ОбластьМакета.Параметры.Подразделение = ТекущийДокумент.Подразделение;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		НомерСтроки = 0;
		Для Каждого СтрокаТабличнойЧасти Из ТекущийДокумент.ТехническиеЖидкости Цикл	
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьСтроки.Параметры.Заполнить(СтрокаТабличнойЧасти);
			
			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда 
				ОбластьСтроки.Параметры.Заполнить(Новый Структура("ЕдиницаИзмерения", СтрокаТабличнойЧасти.Номенклатура.ЕдиницаИзмерения));
			КонецЕсли;
			
			ОбластьСтроки.Параметры.ТСПредставление = уатОбщегоНазначения.уатПредставлениеТС(СтрокаТабличнойЧасти.ТС, ТекущийДокумент.Организация);
			
			ТабДокумент.Вывести(ОбластьСтроки);
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(ТекущийДокумент);
		ТабДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
	КонецЦикла;
	
	ТабДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабДокумент;
	
КонецФункции //ПечатьОперацииСТЖ()

Функция ПолучитьДанныеПечати(знач МассивДокументов, знач МассивИменМакетов) Экспорт
	
	ДанныеПоВсемОбъектам = Новый Соответствие;
	ОписаниеОбластей = Новый Соответствие;
	ДвоичныеДанныеМакетов = Новый Соответствие;
	ТипыМакетов = Новый Соответствие;
	
	Возврат Новый Структура("Данные, Макеты",
	ДанныеПоВсемОбъектам,
	Новый Структура("ОписаниеОбластей, ТипыМакетов, ДвоичныеДанныеМакетов",
	ОписаниеОбластей,
	ТипыМакетов,
	ДвоичныеДанныеМакетов));
	
КонецФункции


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПартииТЖ(ДокументСсылка, СтруктураДополнительныеСвойства)
		
	ЭтоПриходТЖ = (ДокументСсылка.ВидОперации = Перечисления.уатВидыОперацийСТехническимиЖидкостями.ДоливПоАкту
		ИЛИ ДокументСсылка.ВидОперации = Перечисления.уатВидыОперацийСТехническимиЖидкостями.ДоливПоТО
		ИЛИ ДокументСсылка.ВидОперации = Перечисления.уатВидыОперацийСТехническимиЖидкостями.ДоливПрочее);
		
	Если ЭтоПриходТЖ Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	уатОперацииСТЖ.Ссылка.Дата КАК Период,
		|	уатОперацииСТЖ.Ссылка.ВидОперации КАК ВидОперации,
		|	уатОперацииСТЖ.Ссылка КАК Партия,
		|	уатОперацииСТЖ.ТС КАК ТС,
		|	уатОперацииСТЖ.Водитель КАК Водитель,
		|	уатОперацииСТЖ.Номенклатура КАК ТЖ,
		|	уатОперацииСТЖ.Ссылка.Организация КАК Организация,
		|	уатМестонахождениеТС.Колонна КАК Колонна,
		|	уатОперацииСТЖ.Количество *
		|	ВЫБОР КОГДА уатОперацииСТЖ.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1)
		|	КОНЕЦ КАК Количество
		|ИЗ
		|	Документ.уатОперацииСТехническимиЖидкостями.ТехническиеЖидкости КАК уатОперацииСТЖ
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.уатМестонахождениеТС.СрезПоследних(&ДатаСреза) КАК уатМестонахождениеТС
		|	ПО уатОперацииСТЖ.ТС = уатМестонахождениеТС.ТС
		|ГДЕ
		|	уатОперацииСТЖ.Ссылка = &ДокументСсылка");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"уатОперацииСТЖ.ЕдиницаИзмерения",
		"уатОперацииСТЖ.Номенклатура"));
		
		Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
		Запрос.УстановитьПараметр("ДатаСреза", ДокументСсылка.Дата);
		тблДвижений = Запрос.Выполнить().Выгрузить();
		
	Иначе //при расходе ТЖ получаем таблицу партий ТЖ на ТС
		мЗапрос = новый Запрос;
		мЗапрос.Текст = 
		"ВЫБРАТЬ
		|	уатОперацииСТехническимиЖидкостями.ТС,
		|	уатОперацииСТехническимиЖидкостями.Номенклатура КАК ТЖ
		|ИЗ
		|	Документ.уатОперацииСТехническимиЖидкостями.ТехническиеЖидкости КАК уатОперацииСТехническимиЖидкостями
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
		|		ПО (уатОперацииСТехническимиЖидкостями.Номенклатура = уатНоменклатураГСМ.Номенклатура
		|				И уатНоменклатураГСМ.ВестиУчетОстатковТЖ)
		|ГДЕ
		|	уатОперацииСТехническимиЖидкостями.Ссылка = &Ссылка";
		мЗапрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатОстаткиТЖнаТС");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = мЗапрос.Выполнить();
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТС" , "ТС");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТЖ", "ТЖ");
		Блокировка.Заблокировать();
		
		тблДвижений = Неопределено;
		ВсеОК =	уатГСМ.ПодготовитьТаблицуСписанияТЖ(ДокументСсылка, тблДвижений, Истина);
		
		тблДвижений.Колонки.Добавить("Регистратор");
		тблДвижений.ЗаполнитьЗначения(ДокументСсылка, "Регистратор");
		тблДвижений.Колонки.Добавить("Период");
		тблДвижений.ЗаполнитьЗначения(ДокументСсылка.Дата, "Период");
		тблДвижений.Колонки.Добавить("ВидДвижения");
		тблДвижений.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");
		
	КонецЕсли;
		
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПартииТЖ", тблДвижений);
КонецПроцедуры // СформироватьТаблицаОстаткиТЖ()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаРасходТЖ(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	ЭтоПриходТЖ = (ДокументСсылка.ВидОперации = Перечисления.уатВидыОперацийСТехническимиЖидкостями.ДоливПоАкту
		ИЛИ ДокументСсылка.ВидОперации = Перечисления.уатВидыОперацийСТехническимиЖидкостями.ДоливПоТО
		ИЛИ ДокументСсылка.ВидОперации = Перечисления.уатВидыОперацийСТехническимиЖидкостями.ДоливПрочее);
		
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатОперацииСТЖ.Ссылка.Дата КАК Период,
	|	уатОперацииСТЖ.Ссылка.ВидОперации КАК ВидОперации,
	|	уатОперацииСТЖ.ТС КАК ТС,
	|	уатОперацииСТЖ.Водитель КАК Водитель,
	|	уатОперацииСТЖ.Номенклатура КАК ГСМ,
	|	уатОперацииСТЖ.Ссылка.Организация КАК Организация,
	|	уатМестонахождениеТС.Колонна КАК Колонна,
	|	уатОперацииСТЖ.Количество *
	|	ВЫБОР КОГДА уатОперацииСТЖ.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1)
	|	КОНЕЦ КАК КоличествоПриход
	|ИЗ
	|	Документ.уатОперацииСТехническимиЖидкостями.ТехническиеЖидкости КАК уатОперацииСТЖ
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.уатМестонахождениеТС.СрезПоследних(&ДатаСреза) КАК уатМестонахождениеТС
	|	ПО уатОперацииСТЖ.ТС = уатМестонахождениеТС.ТС
	|ГДЕ
	|	уатОперацииСТЖ.Ссылка = &ДокументСсылка");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"уатОперацииСТЖ.ЕдиницаИзмерения",
			"уатОперацииСТЖ.Номенклатура"));
			
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ДатаСреза", ДокументСсылка.Дата);
	тблДвижений = Запрос.Выполнить().Выгрузить();
	
	Если НЕ ЭтоПриходТЖ Тогда
		тблДвижений.Колонки.КоличествоПриход.Имя = "КоличествоРасход";
	КонецЕсли;
		
	тблДвижений.Свернуть("Период, ТС, Водитель, ГСМ, Колонна, Организация, ВидОперации",
		?(ЭтоПриходТЖ, "КоличествоПриход", "КоличествоРасход"));
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасходТЖ", тблДвижений);
КонецПроцедуры // СформироватьТаблицаРасходТЖ()

#КонецОбласти

#КонецЕсли