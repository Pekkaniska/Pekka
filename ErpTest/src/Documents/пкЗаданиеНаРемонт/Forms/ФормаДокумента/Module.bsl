
&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    ///////////////	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Если Параметры.Свойство("ОбъектЭксплуатации") Тогда
        Объект.ОбъектЭксплуатации = Параметры.ОбъектЭксплуатации;    
    КонецЕсли; 
    
    Если Параметры.Свойство("Организация") Тогда
        Объект.Организация = Параметры.Организация;    
	КонецЕсли;
	
		
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
			
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		//+++DubI Рарус-СПб 20.04.2017
		//ЗапросРабот = Новый Запрос("ВЫБРАТЬ
		//                           |	пкЗаданияНаРемонтОбороты.Работа,
		//                           |	пкЗаданияНаРемонтОбороты.Регистратор
		//                           |ИЗ
		//                           |	РегистрНакопления.пкЗаданияНаРемонт.Обороты(, , Регистратор, ЗаданиеНаРемонт = &Задание) КАК пкЗаданияНаРемонтОбороты
		//                           |ГДЕ
		//                           |	пкЗаданияНаРемонтОбороты.КоличествоРасход > 0");
		//ЗапросРабот.УстановитьПараметр("Задание",Объект.Ссылка);
		//Результат = ЗапросРабот.Выполнить();
		//Если Не Результат.Пустой() Тогда 
		//	Выборка = Результат.Выбрать();
		//	Для Каждого Стр Из Объект.ПланируемыеРаботы Цикл
		//		Выборка.Сбросить();
		//		Если Выборка.НайтиСледующий(Стр.Работа,"Работа") Тогда
		//			Стр.ЗаказНаряд = Выборка.Регистратор;
		//			//+++DubI Рарус-СПб 31.03.2017
		//			Стр.СтатусЗаказНаряда = Выборка.Регистратор.Статус;
		//			//---DubI Рарус-СПб
		//		КонецЕсли;
		//	КонецЦикла;
		//КонецЕсли;
		ЗапросРабот = Новый Запрос("ВЫБРАТЬ
		                           |	пкРаботыВЗаказНаряде.Работа,
		                           |	пкРаботыВЗаказНаряде.Регистратор
		                           |ИЗ
		                           |	РегистрСведений.пкРаботыВЗаказНаряде КАК пкРаботыВЗаказНаряде
		                           |ГДЕ
		                           |	пкРаботыВЗаказНаряде.Количество > 0
		                           |	И пкРаботыВЗаказНаряде.ЗаданиеНаРемонт = &Задание");
		ЗапросРабот.УстановитьПараметр("Задание",Объект.Ссылка);
		Результат = ЗапросРабот.Выполнить();
		Если Не Результат.Пустой() Тогда 
			Выборка = Результат.Выбрать();
			Для Каждого Стр Из Объект.ПланируемыеРаботы Цикл
				Выборка.Сбросить();
				Если Выборка.НайтиСледующий(Стр.Работа,"Работа") Тогда
					Стр.ЗаказНаряд = Выборка.Регистратор;
					Стр.СтатусЗаказНаряда = Выборка.Регистратор.Статус;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
		//---DubI Рарус-СПб	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды	
КонецПроцедуры

&НаКлиенте
Процедура ПланируемыеРаботыРаботаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПланируемыеРаботы.ТекущиеДанные;
	
	ТекущаяСтрока.ЕдиницаИзмерения = ПолучитьЗначениеРеквизита(ТекущаяСтрока.Работа, "ЕдиницаИзмерения");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(ОбъектСсылка, ИмяРеквизита)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, ИмяРеквизита);
	
КонецФункции

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ТипЗнч(ВладелецФормы) = Тип("УправляемаяФорма") И ВладелецФормы.ИмяФормы = "Обработка.пкУправлениеРемонтами.Форма.Форма" Тогда
		Оповестить("ОбновитьДерево");
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОбъектЭксплуатацииПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ОбъектЭксплуатацииПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ОбъектЭксплуатации) Тогда 
//Рарус Владимир Подрезов 04.10.2017
//Всегда на текущую дату!
//		МестоположениеТ = ПодобратьКлиентаПоМестоположению(Объект.ОбъектЭксплуатации, ?(ЗначениеЗаполнено(Объект.Дата),Объект.Дата,ТекущаяДата()));
		МестоположениеТ = ПодобратьКлиентаПоМестоположению(Объект.ОбъектЭксплуатации, ТекущаяДата());
//Рарус Владимир Подрезов Конец
		Если МестоположениеТ <> Неопределено И Объект.МестоРемонта <> ПредопределенноеЗначение("Перечисление.пкМестоРемонта.УКлиента") Тогда 
			ПараметрыОповещения = Новый Структура;
			Оповещение = Новый ОписаниеОповещения("ОбработкаВопросаМестоРемонта", ЭтаФорма, ПараметрыОповещения);
			ПоказатьВопрос(Оповещение, "Техника находится в аренде. Изменить место ремонта?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
			КонецЕсли;
		Если МестоположениеТ <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Объект, МестоположениеТ);
			Если ЗначениеЗаполнено(Объект.Клиент) тогда
				КлиентПриИзмененииНаСервере();	
			КонецЕсли;
		КонецЕсли;
		Если МестоположениеТ <> Неопределено И Объект.МестоРемонта = ПредопределенноеЗначение("Перечисление.пкМестоРемонта.УКлиента") Тогда		
			ПоследнийМенеджер = ОпределитьПоследнегоМенеджераПоТехнике(Объект.ОбъектЭксплуатации);
			Если ЗначениеЗаполнено(ПоследнийМенеджер) Тогда
				ЭтаФорма.Объект.Менеджер = ПоследнийМенеджер;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьПоследнегоМенеджераПоТехнике(Техника)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	пкВыгрузкаСостоянияТехники.ЗаявкаНаАрендуТехники.Менеджер КАК Менеджер
		|ИЗ
		|	РегистрСведений.пкВыгрузкаСостоянияТехники КАК пкВыгрузкаСостоянияТехники
		|ГДЕ
		|	пкВыгрузкаСостоянияТехники.Техника = &Техника";
	
	Запрос.УстановитьПараметр("Техника", Техника);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();		

	Возврат ВыборкаДетальныеЗаписи.Менеджер; 
	

КонецФункции

&НаСервереБезКонтекста
Функция ПодобратьКлиентаПоМестоположению(Техника, Период)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	пкСостояниеТехникиСрезПоследних.Значение КАК ОбъектСтроительства,
	                      |	ВЫБОР
	                      |		КОГДА пкСостояниеТехникиСрезПоследних.Регистратор ССЫЛКА Документ.пкПогрузкаВыгрузкаПоДоставке
	                      |			ТОГДА пкСостояниеТехникиСрезПоследних.Регистратор.ЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники.Партнер
	                      |		ИНАЧЕ пкСостояниеТехникиСрезПоследних.Значение.Заказчик.Партнер
	                      |	КОНЕЦ КАК Клиент
	                      |ИЗ
	                      |	РегистрСведений.пкСостояниеТехники.СрезПоследних(
	                      |			&Дата,
	                      |			Техника = &Техника
	                      |				И Показатель = ЗНАЧЕНИЕ(ПланВидовХарактеристик.пкПоказателиСостоянияТехники.Местонахождения)) КАК пкСостояниеТехникиСрезПоследних
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.пкСтатусыТехники.СрезПоследних(&Дата, Техника = &Техника) КАК пкСтатусыТехникиСрезПоследних
	                      |		ПО пкСостояниеТехникиСрезПоследних.Техника = пкСтатусыТехникиСрезПоследних.Техника
	                      |ГДЕ
	                      |	пкСтатусыТехникиСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.пкСтатусыТехники.ВАренде)");
	Запрос.УстановитьПараметр("Дата", Период);
	Запрос.УстановитьПараметр("Техника", Техника);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда 
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		СтруктураВозврата = Новый Структура("Клиент,ОбъектСтроительства");
		ЗаполнитьЗначенияСвойств(СтруктураВозврата,Выборка);
		Возврат СтруктураВозврата;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВопросаМестоРемонта(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.МестоРемонта = ПредопределенноеЗначение("Перечисление.пкМестоРемонта.УКлиента");
		//МестоРемонтаПриИзменении(Элементы.МестоРемонта);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КлиентПриИзмененииНаСервере()
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КонтактныеЛицаПартнеров.Ссылка,
	                      |	КонтактныеЛицаПартнеров.Владелец
	                      |ИЗ
	                      |	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	                      |ГДЕ
	                      |	КонтактныеЛицаПартнеров.Владелец = &Владелец
	                      |	И КонтактныеЛицаПартнеров.ПометкаУдаления = ЛОЖЬ");
	Запрос.УстановитьПараметр("Владелец", Объект.Клиент);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество()=1 Тогда 
		Выборка.Следующий();
		Объект.КонтактноеЛицо=Выборка.Ссылка;
	Иначе	
		Объект.КонтактноеЛицо=Неопределено;
	КонецЕсли;
	Объект.Менеджер = Объект.Клиент.ОсновнойМенеджер;
КонецПроцедуры

&НаКлиенте
Процедура КлиентПриИзменении(Элемент)
	КлиентПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядыПоТехнике(Команда)
//Рарус Владимир Подрезов 27.02.2017
//Закомментировано
	////++IA не работает без добавления своей настройки в ВариантыОтчетов
	////ДополнительныеПараметры=Новый Структура;
	////ДополнительныеПараметры.Вставить("ИмяКоманды","ДанныеПоТехнике");
	////
	////ПараметрыФормы=Новый Структура;
	////ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов",Ложь);
	////ПараметрыФормы.Вставить("КлючВарианта","Основной");
	////ПараметрыФормы.Вставить("КлючНазначенияИспользования","Основной");
	////ПараметрыФормы.Вставить("СформироватьПриОткрытии",Истина);
	////
	////СтруктураПараметров = Новый Структура;
	////СтруктураПараметров.Вставить("ПараметрКоманды", Объект.Техника);
	////СтруктураПараметров.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	////СтруктураПараметров.Вставить("ПараметрыФормы", ПараметрыФормы);
	////
	////МенюОтчетыКлиент.ВыполнитьКомандуОтчет("Отчет.пкАрендаТехники.ФормаОбъекта",
	////		Объект.Техника, ЭтаФорма, СтруктураПараметров);
	//
	//ФормаОтчета = ПолучитьФорму("Отчет.пкЗаказНаряды.ФормаОбъекта",Новый Структура("СформироватьПриОткрытии",Истина),ЭтаФорма);
	//КомпоновщикНастроек = ФормаОтчета.Отчет.КомпоновщикНастроек;
	////СхемаКомпоновкиДанных=Неопределено;
	////ЗаказНарядыПоТехникеНаСервере(СхемаКомпоновкиДанных);
	////КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.ВариантыНастроек.Найти("ЗаказНаряды").Настройки);
	//Настройки = КомпоновщикНастроек.Настройки.Отбор;
	//
	//Поиск=Ложь;
	//Для каждого ТекОтбор Из Настройки.Элементы Цикл
	//    
	//    Если Строка(ТекОтбор.ЛевоеЗначение) = "Техника" Тогда
	//		Элемент = ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ТекОтбор.ИдентификаторПользовательскойНастройки);
	//		Если Элемент <> Неопределено Тогда
	//		    Элемент.Использование = ЗначениеЗаполнено(Объект.ОбъектЭксплуатации);
	//		    Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//		    Элемент.ПравоеЗначение = Объект.ОбъектЭксплуатации;
	//		КонецЕсли;
	//		//ТекОтбор.Использование = ЗначениеЗаполнено(Объект.Техника);
	//		//ТекОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//		//ТекОтбор.ПравоеЗначение = Объект.Техника;
	//		Поиск=Истина;
	//    КонецЕсли;
	//	
	//КонецЦикла;
	//Если не Поиск тогда
	//    ЭлОтбора = ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//    ЭлОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//    ЭлОтбора.Использование = ЗначениеЗаполнено(Объект.ОбъектЭксплуатации);
	//    ЭлОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Техника");
	//    ЭлОтбора.ПравоеЗначение = Объект.ОбъектЭксплуатации;
	//КОнецЕсли;	
	//ФормаОтчета.Открыть();
	ОткрытьФорму("Отчет.пкЗаказНаряды.ФормаОбъекта",
		Новый Структура("КлючВарианта, КлючНазначенияИспользования, Отбор, СформироватьПриОткрытии, ВидимостьКомандВариантовОтчетов", 
			"ЗаказНаряды",
			, 
			Новый Структура("Техника", Объект.ОбъектЭксплуатации), 
			Истина,
			Ложь));
//Рарус Владимир Подрезов Конец
	
КонецПроцедуры

&НаСервере
Процедура ЗаказНарядыПоТехникеНаСервере(СхемаКомпоновкиДанных)
	СхемаКомпоновкиДанных=Отчеты.пкЗаказНаряды.Создать().СхемаКомпоновкиДанных;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектСтроительстваНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
    СтандартнаяОбработка = Ложь;
        
    ОбъектыСтроительства = пкОбщегоНазначенияСервер.ПолучитьОбъектыСтроительстваКлиента(Объект.Клиент);
    
    Отбор = Новый Структура("Ссылка", ОбъектыСтроительства);
    
    ПараметрыФормы = Новый Структура("Отбор", Отбор);
        
    ОткрытьФорму("Справочник.СМ_ОбъектыСтроительства.Форма.ФормаВыбора", ПараметрыФормы, ЭтаФорма, , , , 
        Новый ОписаниеОповещения("ОбъектСтроительстваНачалоВыбораЗавершение", ЭтаФорма));

КонецПроцедуры

Процедура ОбъектСтроительстваНачалоВыбораЗавершение(ВыбранноеЗначение, ДопПараметры) Экспорт
    
    Если ВыбранноеЗначение <> Неопределено Тогда
        Объект.ОбъектСтроительства = ВыбранноеЗначение;
    КонецЕсли;    
    
КонецПроцедуры    

//++ Рарус Лимаренко 01.08.2018 Задача№13519
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не ЗначениеЗаполнено(Объект.ДатаОбращения) Тогда
		 Объект.ДатаОбращения = ТекущаяДата();	
	КонецЕсли;	
	
	ПодразделениеСПБ            = Константы.пкПодразделениеСанктПетербург.Получить();
	ПодразделениеМосква         = Константы.пкПодразделениеМосква.Получить();
	
	Если (Объект.Подразделение = ПодразделениеМосква И Объект.Организация = Объект.Организация.ГоловнаяОрганизация)
		ИЛИ (Объект.Подразделение <> ПодразделениеМосква И НЕ Объект.Организация = Объект.Организация.ГоловнаяОрганизация) Тогда
		
		Ошибки = Неопределено;
          
        ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Объект.Подразделение", НСтр("ru='Организация не соответствует подразделению.'"), Неопределено);    
        
        ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьКонтактноеЛицоНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактныеЛицаПартнеров.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		|ГДЕ
		|	КонтактныеЛицаПартнеров.Владелец = &Владелец
		|	И КонтактныеЛицаПартнеров.Наименование ПОДОБНО &Наименование";
	
	Запрос.УстановитьПараметр("Владелец", Объект.Клиент);
	Запрос.УстановитьПараметр("Наименование", Объект.Комментарий);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда	
		 Возврат "Существует";
	КонецЕсли;
	
	КонтактоеЛицо 				= Справочники.КонтактныеЛицаПартнеров.СоздатьЭлемент();
	КонтактоеЛицо.Автор	 		= Пользователи.ТекущийПользователь();
	КонтактоеЛицо.Владелец		= Объект.Клиент;
	КонтактоеЛицо.Наименование	= Объект.Комментарий;
	Попытка
		КонтактоеЛицо.Записать();			
		Возврат КонтактоеЛицо.Ссылка;
	Исключение
	    Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
		
КонецФункции

&НаКлиенте
Процедура СоздатьКонтактноеЛицо(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Клиент) Тогда	
		ПоказатьПредупреждение(,НСтр("ru='Надо заполнить клиента!'"));
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.Комментарий) Тогда
		ПоказатьПредупреждение(,НСтр("ru='Поле комментарий пусто!'"));	
	    Возврат;
	КонецЕсли;
	
	КонтактоеЛицо = СоздатьКонтактноеЛицоНаСервере();
	
	Если КонтактоеЛицо = "Существует" Тогда
		ПоказатьПредупреждение(,"Такое контактное лицо уже существует!");
		Возврат;
	КонецЕсли;
	
	Если КонтактоеЛицо <> Неопределено Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		СтруктураПараметры = Новый Структура("КонтактоеЛицо",КонтактоеЛицо);
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтаФорма, СтруктураПараметры);
		ПоказатьВопрос(Оповещение,НСтр("ru = 'Контактное лицо успешно создано, открыть его форму?';"
     	+ " en = 'Do you want to open?'"), Режим, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да И Параметры <> Неопределено И Параметры.КонтактоеЛицо <> Неопределено Тогда
		ОткрытьЗначение(Параметры.КонтактоеЛицо);		
	КонецЕсли;

КонецПроцедуры

//-- Рарус Лимаренко 01.08.2018 Задача№13519

#КонецОбласти
