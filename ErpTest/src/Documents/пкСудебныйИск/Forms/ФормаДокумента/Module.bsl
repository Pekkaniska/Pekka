&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

/////////////////////////////////////////////////////////////////////////
&НаСервере
Функция ПолучитьЗначениеРеквизитаНаСервере(тОбъект, ИмяРевизита)
	
	Возврат тОбъект[ИмяРевизита];
	
КонецФункции

&НаСервере
Функция ПолучитьЗначениеПеречисленияНаСервере(ИмяПеречисления, ИмяЗначения)
	
	Возврат Перечисления[ИмяПеречисления][ИмяЗначения];
	
КонецФункции

/////////////////////////////////////////////////////////////////////////
// Стандартное (почти)

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

#Область ОбработчикиКомандФормы
//// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

//&НаКлиенте
//Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
//	
//	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
//		РезультатВыполнения = Неопределено;
//		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
//		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
//	
//	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
//	
//КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


#КонецОбласти

/////////////////////////////////////////////////////////////////////////
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	//ТаблицаПретензии=Объект.Претензия.Расшифровка.Выгрузить();
	//ТаблицаПретензии.Свернуть("Счет,Валюта,СуммаСчета","СуммаЗадолженности");
	//
	//Запрос=Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	РасчетыСКлиентамиПоДокументамОбороты.ЗаказКлиента КАК Счет,
	//               |	РасчетыСКлиентамиПоДокументамОбороты.РасчетныйДокумент КАК РасчетныйДокумент,
	//               |	РасчетыСКлиентамиПоДокументамОбороты.Регистратор,
	//               |	РасчетыСКлиентамиПоДокументамОбороты.Период КАК Период,
	//               |	СУММА(РасчетыСКлиентамиПоДокументамОбороты.ДолгОборот) КАК ДолгОборот,
	//               |	СУММА(РасчетыСКлиентамиПоДокументамОбороты.ДолгРасход) КАК ДолгРасход,
	//               |	СУММА(РасчетыСКлиентамиПоДокументамОбороты.ДолгПриход) КАК ДолгПриход,
	//               |	СУММА(РасчетыСКлиентамиПоДокументамОбороты.ДолгУпрОборот) КАК ДолгУпрОборот,
	//               |	СУММА(РасчетыСКлиентамиПоДокументамОбороты.ДолгУпрПриход) КАК ДолгУпрПриход,
	//               |	СУММА(РасчетыСКлиентамиПоДокументамОбороты.ДолгУпрРасход) КАК ДолгУпрРасход,
	//               |	СУММА(РасчетыСКлиентамиПоДокументамОбороты.ПредоплатаОборот) КАК ПредоплатаОборот,
	//               |	СУММА(РасчетыСКлиентамиПоДокументамОбороты.ПредоплатаПриход) КАК ПредоплатаПриход,
	//               |	СУММА(РасчетыСКлиентамиПоДокументамОбороты.ПредоплатаРасход) КАК ПредоплатаРасход,
	//               |	СУММА(РасчетыСКлиентамиПоДокументамОбороты.ПредоплатаУпрОборот) КАК ПредоплатаУпрОборот,
	//               |	СУММА(РасчетыСКлиентамиПоДокументамОбороты.ПредоплатаУпрПриход) КАК ПредоплатаУпрПриход,
	//               |	СУММА(РасчетыСКлиентамиПоДокументамОбороты.ПредоплатаУпрРасход) КАК ПредоплатаУпрРасход
	//               |ИЗ
	//               |	РегистрНакопления.РасчетыСКлиентамиПоДокументам.Обороты(, , Регистратор, ЗаказКлиента В (&СписокСчетов)) КАК РасчетыСКлиентамиПоДокументамОбороты
	//               |ГДЕ
	//               |	(РасчетыСКлиентамиПоДокументамОбороты.ДолгРасход > 0
	//               |			ИЛИ РасчетыСКлиентамиПоДокументамОбороты.ПредоплатаРасход > 0)
	//               |	И РасчетыСКлиентамиПоДокументамОбороты.Период > &ДатаПретензии
	//               |
	//               |СГРУППИРОВАТЬ ПО
	//               |	РасчетыСКлиентамиПоДокументамОбороты.ЗаказКлиента,
	//               |	РасчетыСКлиентамиПоДокументамОбороты.Регистратор,
	//               |	РасчетыСКлиентамиПоДокументамОбороты.Период,
	//               |	РасчетыСКлиентамиПоДокументамОбороты.РасчетныйДокумент
	//               |
	//               |УПОРЯДОЧИТЬ ПО
	//               |	РасчетыСКлиентамиПоДокументамОбороты.ЗаказКлиента,
	//               |	Период";
	//			   
	//Запрос.УстановитьПараметр("СписокСчетов", ТаблицаПретензии.ВыгрузитьКолонку("Счет"));	
	//Запрос.УстановитьПараметр("ДатаПретензии", Объект.Претензия.Дата);	
	////Запрос.УстановитьПараметр("Организация", Объект.Организация);	
	////Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);	
	////Запрос.УстановитьПараметр("Договор", Объект.Договор);	
	////Запрос.УстановитьПараметр("ДатаНачала", Объект.ДатаНачала);	
	////Запрос.УстановитьПараметр("ДатаОкончания", Объект.ДатаОкончания);	
	//
	//ВалютаРегл=Константы.ВалютаРегламентированногоУчета.Получить();
	//
	//ТаблицаОплат=Запрос.Выполнить().Выгрузить();
	//
	////Объект.ПогашениеДолга.Загрузить(ТаблицаПретензии);
	//Объект.ПогашениеДолга.Очистить();
	//
	////Для каждого СтрокаСчета Из Объект.ПогашениеДолга Цикл
	//Для каждого СтрокаСчета Из ТаблицаПретензии Цикл
	//	//СтрокаСчета.Остаток=СтрокаСчета.СуммаЗадолженности;	
	//	СтруктураОтбора=Новый Структура("Счет",СтрокаСчета.Счет);
	//	СтрокиОплат=ТаблицаОплат.НайтиСтроки(СтруктураОтбора);
	//	Если СтрокиОплат.Количество()=0 Тогда
	//		НовоеПогашение=Объект.ПогашениеДолга.Добавить();
	//		ЗаполнитьЗначенияСвойств(НовоеПогашение,СтрокаСчета);
	//		НовоеПогашение.Остаток=СтрокаСчета.СуммаЗадолженности;	
	//	Иначе
	//		НовоеПогашение=Неопределено;
	//		Для каждого СтрокаОплат Из СтрокиОплат Цикл
	//			//СтрокаСчета.СуммаОплат=СтрокаСчета.СуммаОплат+СтрокаОплат.ДолгРасход+СтрокаОплат.ПредоплатаПриход;
	//			//СтрокаСчета.ДатаОплат=Формат(СтрокаОплат.Период,"ДФ=dd.MM.yyyy");
	//			//СтрокаСчета.Остаток=СтрокаСчета.Остаток-СтрокаОплат.ДолгРасход-СтрокаОплат.ПредоплатаПриход;
	//			Если НовоеПогашение=Неопределено тогда
	//				ТекОстаток=СтрокаСчета.СуммаЗадолженности;	
	//			Иначе	
	//				ТекОстаток=НовоеПогашение.Остаток;	
	//			КонецЕсли;	
	//			НовоеПогашение=Объект.ПогашениеДолга.Добавить();
	//			ЗаполнитьЗначенияСвойств(НовоеПогашение,СтрокаСчета);
	//			НовоеПогашение.СуммаОплат=СтрокаСчета.СуммаОплат+СтрокаОплат.ДолгРасход+СтрокаОплат.ПредоплатаРасход;
	//			НовоеПогашение.ДатаОплат=Формат(СтрокаОплат.Период,"ДФ=dd.MM.yyyy");
	//			НовоеПогашение.Остаток=ТекОстаток-СтрокаОплат.ДолгРасход-СтрокаОплат.ПредоплатаРасход;
	//		КонецЦикла;
	//	КонецЕсли;	
	//КонецЦикла;
	
	ТаблицаПретензии=Объект.Претензия.Расшифровка.Выгрузить();
	ТаблицаПретензии.Свернуть("Счет,Валюта,СуммаСчета","СуммаЗадолженности");
	
	Запрос=Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РасчетыСКлиентамиОстаткиИОбороты.ЗаказКлиента КАК Счет,
	               |	РасчетыСКлиентамиОстаткиИОбороты.Валюта,
	               |	РасчетыСКлиентамиОстаткиИОбороты.КОплатеПриход,
	               |	РасчетыСКлиентамиОстаткиИОбороты.КОплатеКонечныйОстаток
	               |ПОМЕСТИТЬ ТаблицаЗаказов
	               |ИЗ
	               |	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(
	               |			,
	               |			,
	               |			,
	               |			,
	               |			(АналитикаУчетаПоПартнерам.Контрагент = &Контрагент
	               |				ИЛИ ЗаказКлиента.Контрагент = &Контрагент)
	               |				И (&Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	               |					ИЛИ АналитикаУчетаПоПартнерам.Договор = &Договор
	               |					ИЛИ ЗаказКлиента.Контрагент = &Договор)
	               |				И (АналитикаУчетаПоПартнерам.Организация = &Организация
	               |					ИЛИ ЗаказКлиента.Организация = &Организация)) КАК РасчетыСКлиентамиОстаткиИОбороты
	               |ГДЕ
	               |	(РасчетыСКлиентамиОстаткиИОбороты.ЗаказКлиента В (&СписокСчетов)
	               |			ИЛИ РасчетыСКлиентамиОстаткиИОбороты.КОплатеКонечныйОстаток <> 0)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РасчетыСКлиентамиОбороты.ЗаказКлиента КАК Счет,
	               |	МАКСИМУМ(РасчетыСКлиентамиОбороты.Период) КАК Период,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РасчетыСКлиентамиОбороты.Регистратор) КАК Регистратор,
	               |	СУММА(РасчетыСКлиентамиОбороты.КОплатеРасход) КАК КОплатеРасход,
	               |	РасчетыСКлиентамиОбороты.Валюта
	               |ПОМЕСТИТЬ ТаблицаОплат
	               |ИЗ
	               |	ТаблицаЗаказов КАК ТаблицаЗаказов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Обороты(, , Регистратор, ) КАК РасчетыСКлиентамиОбороты
	               |		ПО ТаблицаЗаказов.Валюта = РасчетыСКлиентамиОбороты.Валюта
	               |			И ТаблицаЗаказов.Счет = РасчетыСКлиентамиОбороты.ЗаказКлиента
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РасчетыСКлиентамиОбороты.ЗаказКлиента,
	               |	РасчетыСКлиентамиОбороты.Валюта
	               |
	               |ИМЕЮЩИЕ
	               |	СУММА(РасчетыСКлиентамиОбороты.КОплатеРасход) > 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаЗаказов.Счет КАК Счет,
	               |	ТаблицаЗаказов.Счет.Дата КАК СчетДата,
	               |	ТаблицаЗаказов.Валюта,
	               |	ТаблицаЗаказов.КОплатеПриход КАК СуммаСчета,
	               |	ТаблицаЗаказов.КОплатеКонечныйОстаток КАК Остаток,
	               |	ТаблицаОплат.Регистратор КАК КоличествоОплат,
	               |	ТаблицаОплат.Период КАК ДатаОплат,
	               |	ТаблицаОплат.КОплатеРасход КАК СуммаОплат
	               |ИЗ
	               |	ТаблицаЗаказов КАК ТаблицаЗаказов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОплат КАК ТаблицаОплат
	               |		ПО ТаблицаЗаказов.Валюта = ТаблицаОплат.Валюта
	               |			И ТаблицаЗаказов.Счет = ТаблицаОплат.Счет
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СчетДата";
				   
	Запрос.УстановитьПараметр("СписокСчетов", ТаблицаПретензии.ВыгрузитьКолонку("Счет"));	
	Запрос.УстановитьПараметр("ДатаПретензии", Объект.Претензия.Дата);	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);	
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);	
	Запрос.УстановитьПараметр("Договор", Объект.Договор);	
	//Запрос.УстановитьПараметр("ДатаНачала", Объект.ДатаНачала);	
	//Запрос.УстановитьПараметр("ДатаОкончания", Объект.ДатаОкончания);	
	
	ВалютаРегл=Константы.ВалютаРегламентированногоУчета.Получить();
	
	ТаблицаОплат=Запрос.Выполнить().Выгрузить();
	
	//Объект.ПогашениеДолга.Загрузить(ТаблицаОплат);
	Объект.ПогашениеДолга.Очистить();
	
	Для каждого СтрокаСчета Из ТаблицаОплат Цикл
		НовоеПогашение=Объект.ПогашениеДолга.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеПогашение,СтрокаСчета);
		НовоеПогашение.ДатаОплат=Формат(СтрокаСчета.ДатаОплат,"ДФ=dd.MM.yyyy");
		СтруктураОтбора=Новый Структура("Счет",СтрокаСчета.Счет);
		СтрокиПретензий=ТаблицаПретензии.НайтиСтроки(СтруктураОтбора);
		Если СтрокиПретензий.Количество()=0 Тогда
		Иначе
		НовоеПогашение.СуммаЗадолженности=СтрокиПретензий[0].СуммаЗадолженности;	
		КонецЕсли;	
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	ЗаполнитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДолгПриИзменении(Элемент)
	ДолгПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДолгПриИзмененииНаСервере()
	Объект.СуммаДокумента = Объект.ДолгОборудование+Объект.ДолгАренда+Объект.Пени+Объект.Госпошлина;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ДокументОснование.Видимость = ДокументОснованиеЭтоИск(); 
	
КонецПроцедуры

&НаСервере
Функция ДокументОснованиеЭтоИск()

	Если ЗначениеЗаполнено(Объект.ДокументОснование) и ТипЗнч(Объект.ДокументОснование)=Тип("ДокументСсылка.пкСудебныйИск") Тогда
		Возврат Истина;
	Иначе	
		Возврат Ложь;
	КонецЕсли; 	

КонецФункции // ДокументОснованиеЭтоИск()
 
///////////////////////////////////////////////////////////////////////////////




///////////////////////////////////////////////////////////////////////////////
