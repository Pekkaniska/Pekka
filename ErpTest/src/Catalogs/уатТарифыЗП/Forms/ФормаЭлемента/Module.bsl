
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	об = РеквизитФормыВЗначение("Объект");
	//уатЗащищенныеФункцииСервер.уатСправочникФормаЭлементаПриСозданииНаСервере(Об, Отказ, СтандартнаяОбработка, ЭтаФорма, ДопПараметрыОткрытие);
	ЗначениеВРеквизитФормы(Об,"Объект");
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	ОснОрганизацияПользователя = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.ТекущийПользователь(), "ОсновнаяОрганизация");
	
	ЗаполнитьПредставлениеТС();
	
	// УправлениеПредприятием.СлужебныеПодсистемы
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	// Конец УправлениеПредприятием.СлужебныеПодсистемы
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ЗаполнитьПредставлениеТС();
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ЗаполнитьПредставлениеТС();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//уатЗащищенныеФункцииКлиент.уатСправочникФормаЭлементаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СпособРасчетаОплатыТрудаПриИзменении(Неопределено);
	
	Модифицированность = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СпособРасчетаОплатыТрудаПриИзменении(Элемент)
	Если Объект.СпособРасчетаОплатыТруда <> ПредопределенноеЗначение(
			"Перечисление.уатСпособыРасчетаОплатыТруда.СдельныйЗаработок") Тогда
		Если Объект.РасчетПоСтрокам Тогда
			Объект.РасчетПоСтрокам = Ложь;
		КонецЕсли;
		Если Объект.СложныйТариф Тогда
			Объект.СложныйТариф = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьСписокТиповОбласти();
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ПараметрВыработкиПриИзменении(Элемент)
	Если (НЕ ПараметрВыработкиПрименимДляПострочногоРасчета()) И Объект.РасчетПоСтрокам Тогда
		Объект.РасчетПоСтрокам = Ложь;
	КонецЕсли;
	
	УстановитьСписокТиповОбласти();
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ПараметрВыработкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	Отбор = Новый Структура;
	Отбор.Вставить("ДействуетНаСотрудников", Истина);
	ПараметрыФормы.Вставить("Отбор", Отбор);
		
	ОткрытьФорму("Справочник.уатПараметрыВыработки.ФормаВыбора", ПараметрыФормы, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СложныйТарифПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура РасчетПоСтрокамПриИзменении(Элемент)
	УстановитьСписокТиповОбласти();
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаТарифа1ПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаТарифа2ПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаТарифа3ПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ВидНачисленияПриИзменении(Элемент)
	УстановитьСписокТиповОбласти();
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ОбластиДействияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекСтрока = Элементы.ОбластиДействия.ТекущиеДанные;
	УстановитьТипОбласти(ТекСтрока.ВидОбластиДействия);
КонецПроцедуры

&НаКлиенте
Процедура ОбластиДействияВидОбластиДействияПриИзменении(Элемент)
	ТекСтрока = Элементы.ОбластиДействия.ТекущиеДанные;
	ТекСтрока.ЗначениеОбластиДействия = Неопределено;
	УстановитьТипОбласти(ТекСтрока.ВидОбластиДействия);
КонецПроцедуры

&НаКлиенте
Процедура ОбластиДействияЗначениеОбластиДействияПриИзменении(Элемент)
	ЗаполнитьПредставлениеТС();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// УправлениеПредприятием.СлужебныеПодсистемы
&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
КонецПроцедуры
// Конец УправлениеПредприятием.СлужебныеПодсистемы

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПредставлениеТС()
	Для Каждого ТекСтрока Из Объект.ОбластиДействия Цикл
		Если ТекСтрока.ТипОбласти = "ТС" Тогда
			ПредставлениеТС_ = уатОбщегоНазначения.уатПредставлениеТС(ТекСтрока.ОбластьДействия, ОснОрганизацияПользователя);
		Иначе
			ПредставлениеТС_ = "";
		КонецЕсли;
		Если ТекСтрока.ПредставлениеТС <> ПредставлениеТС_ Тогда
			ТекСтрока.ПредставлениеТС = ПредставлениеТС_;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПараметрВыработкиПрименимДляПострочногоРасчета()
	мсвПараметровВыработки = Новый Массив;
	мсвПараметровВыработки.Добавить(Справочники.уатПараметрыВыработки.ВесГруза);
	мсвПараметровВыработки.Добавить(Справочники.уатПараметрыВыработки.Объем);
	мсвПараметровВыработки.Добавить(Справочники.уатПараметрыВыработки.ВремяВРаботе);
	мсвПараметровВыработки.Добавить(Справочники.уатПараметрыВыработки.КоличествоЕздок);
	мсвПараметровВыработки.Добавить(Справочники.уатПараметрыВыработки.КоличествоОпераций);
	мсвПараметровВыработки.Добавить(Справочники.уатПараметрыВыработки.КоличествоПассажиров);
	мсвПараметровВыработки.Добавить(Справочники.уатПараметрыВыработки.ПогрузочноРазгрузочныеРаботы);
	мсвПараметровВыработки.Добавить(Справочники.уатПараметрыВыработки.Подача);
	мсвПараметровВыработки.Добавить(Справочники.уатПараметрыВыработки.ПробегСГрузом);
	мсвПараметровВыработки.Добавить(Справочники.уатПараметрыВыработки.ПробегПорожний);
	мсвПараметровВыработки.Добавить(Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы);
	мсвПараметровВыработки.Добавить(Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы2);
	мсвПараметровВыработки.Добавить(Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы3);
	мсвПараметровВыработки.Добавить(Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы4);
	мсвПараметровВыработки.Добавить(Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы5);
	мсвПараметровВыработки.Добавить(Справочники.уатПараметрыВыработки.ПростойПодПогрузкой);
	мсвПараметровВыработки.Добавить(Справочники.уатПараметрыВыработки.ПростойПодРазгрузкой);
	мсвПараметровВыработки.Добавить(Справочники.уатПараметрыВыработки.ТнКм);
	мсвПараметровВыработки.Добавить(Справочники.уатПараметрыВыработки.ОбъемКм);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатПараметрыВыработки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|ГДЕ
	|	НЕ уатПараметрыВыработки.ПометкаУдаления
	|	И НЕ уатПараметрыВыработки.Предопределенный
	|	И уатПараметрыВыработки.СпособРасчетаПараметровВыработки = &СпособРасчетаПараметровВыработки");
	Запрос.УстановитьПараметр("СпособРасчетаПараметровВыработки", Перечисления.уатСпособРасчетаПараметровВыработки.ПоЗаданию);
	мсвДопПараметры = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Для Каждого ТекДопПараметр Из мсвДопПараметры Цикл
		мсвПараметровВыработки.Добавить(ТекДопПараметр);
	КонецЦикла;
	
	Возврат мсвПараметровВыработки.Найти(Объект.ПараметрВыработки) <> Неопределено;
КонецФункции

&НаКлиенте
Процедура УстановитьВидимость()
	ЭтоСдельныйЗаработок = ЗначениеЗаполнено(Объект.ВидНачисления) И (Объект.СпособРасчетаОплатыТруда = 
		ПредопределенноеЗначение("Перечисление.уатСпособыРасчетаОплатыТруда.СдельныйЗаработок"));
	
	Если Объект.СпособРасчетаОплатыТруда = ПредопределенноеЗначение("Перечисление.уатСпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы")
		ИЛИ Объект.СпособРасчетаОплатыТруда = ПредопределенноеЗначение("Перечисление.уатСпособыРасчетаОплатыТруда.ПроцентомОтВидовНачислений")
		ИЛИ Объект.СпособРасчетаОплатыТруда = ПредопределенноеЗначение("Перечисление.уатСпособыРасчетаОплатыТруда.ПроцентомОтВыручки") Тогда
		Элементы.Тариф.Заголовок = "Тариф, %";
	Иначе
		Элементы.Тариф.Заголовок = "Тариф";
	КонецЕсли;
	
	Если Не Объект.СложныйТариф Тогда
		Элементы.ГруппаТаблицаРасчета.Видимость = Ложь;
		Если Объект.ТаблицаРасчета.Количество() > 0 Тогда
			Объект.ТаблицаРасчета.Очистить();
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ГруппировкаТарифа1) Тогда
			Объект.ГруппировкаТарифа1 = Неопределено;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ГруппировкаТарифа2) Тогда
			Объект.ГруппировкаТарифа2 = Неопределено;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ГруппировкаТарифа3) Тогда
			Объект.ГруппировкаТарифа3 = Неопределено;
		КонецЕсли;
		
		Элементы.Тариф.Видимость = Истина;
	Иначе	
		Элементы.ГруппаТаблицаРасчета.Видимость = Истина;
		Элементы.Тариф.Видимость = Ложь;
		Если Объект.Тариф <> 0 Тогда
			Объект.Тариф = 0;
		КонецЕсли;
		
		Элементы.ТаблицаРасчетаЗнакГруппировки1.Видимость	  = ЗначениеЗаполнено(Объект.ГруппировкаТарифа1);
		Элементы.ТаблицаРасчетаЗначениеГруппировки1.Видимость = Элементы.ТаблицаРасчетаЗнакГруппировки1.Видимость;
		Элементы.ТаблицаРасчетаЗначениеГруппировки1.Заголовок = Объект.ГруппировкаТарифа1;
		Элементы.ТаблицаРасчетаЗнакГруппировки2.Видимость	  = ЗначениеЗаполнено(Объект.ГруппировкаТарифа2);
		Элементы.ТаблицаРасчетаЗначениеГруппировки2.Видимость = Элементы.ТаблицаРасчетаЗнакГруппировки2.Видимость;
		Элементы.ТаблицаРасчетаЗначениеГруппировки2.Заголовок = Объект.ГруппировкаТарифа2;		
		Элементы.ТаблицаРасчетаЗнакГруппировки3.Видимость	  = ЗначениеЗаполнено(Объект.ГруппировкаТарифа3);
		Элементы.ТаблицаРасчетаЗначениеГруппировки3.Видимость = Элементы.ТаблицаРасчетаЗнакГруппировки3.Видимость;
		Элементы.ТаблицаРасчетаЗначениеГруппировки3.Заголовок = Объект.ГруппировкаТарифа3;		
		Если НЕ ЗначениеЗаполнено(Объект.ВидНачисления) Тогда
			Элементы.ТаблицаРасчетаТариф.Видимость = Ложь;
		Иначе	
			Элементы.ТаблицаРасчетаТариф.Видимость = Истина;
		КонецЕсли;
		
		Если Элементы.ТаблицаРасчетаЗначениеГруппировки1.Видимость Тогда
			Если Объект.ГруппировкаТарифа1 = ПредопределенноеЗначение("Перечисление.уатГруппировкиТарифов.КлассГруза") Тогда
				Элементы.ТаблицаРасчетаЗначениеГруппировки1.Формат = "ЧДЦ = 1; ЧЦ = 2";
				Элементы.ТаблицаРасчетаЗначениеГруппировки1.ФорматРедактирования = "ЧДЦ = 1; ЧЦ = 2";
				Элементы.ТаблицаРасчетаЗначениеГруппировки1.МинимальноеЗначение = 0;
			Иначе
				Элементы.ТаблицаРасчетаЗначениеГруппировки1.Формат = "ЧДЦ = 3; ЧЦ = 10";
				Элементы.ТаблицаРасчетаЗначениеГруппировки1.ФорматРедактирования = "ЧДЦ = 3; ЧЦ = 10";
				Элементы.ТаблицаРасчетаЗначениеГруппировки1.МинимальноеЗначение = Неопределено;
			КонецЕсли;
		КонецЕсли;
		Если Элементы.ТаблицаРасчетаЗначениеГруппировки2.Видимость Тогда
			Если Объект.ГруппировкаТарифа2 = ПредопределенноеЗначение("Перечисление.уатГруппировкиТарифов.КлассГруза") Тогда
				Элементы.ТаблицаРасчетаЗначениеГруппировки2.Формат = "ЧДЦ = 1; ЧЦ = 2";
				Элементы.ТаблицаРасчетаЗначениеГруппировки2.ФорматРедактирования = "ЧДЦ = 1; ЧЦ = 2";
				Элементы.ТаблицаРасчетаЗначениеГруппировки2.МинимальноеЗначение = 0;
			Иначе
				Элементы.ТаблицаРасчетаЗначениеГруппировки2.Формат = "ЧДЦ = 3; ЧЦ = 10";
				Элементы.ТаблицаРасчетаЗначениеГруппировки2.ФорматРедактирования = "ЧДЦ = 3; ЧЦ = 10";
				Элементы.ТаблицаРасчетаЗначениеГруппировки2.МинимальноеЗначение = Неопределено;
			КонецЕсли;
		КонецЕсли;
		Если Элементы.ТаблицаРасчетаЗначениеГруппировки3.Видимость Тогда
			Если Объект.ГруппировкаТарифа3 = ПредопределенноеЗначение("Перечисление.уатГруппировкиТарифов.КлассГруза") Тогда
				Элементы.ТаблицаРасчетаЗначениеГруппировки3.Формат = "ЧДЦ = 1; ЧЦ = 2";
				Элементы.ТаблицаРасчетаЗначениеГруппировки3.ФорматРедактирования = "ЧДЦ = 1; ЧЦ = 2";
				Элементы.ТаблицаРасчетаЗначениеГруппировки3.МинимальноеЗначение = 0;
			Иначе
				Элементы.ТаблицаРасчетаЗначениеГруппировки3.Формат = "ЧДЦ = 3; ЧЦ = 10";
				Элементы.ТаблицаРасчетаЗначениеГруппировки3.ФорматРедактирования = "ЧДЦ = 3; ЧЦ = 10";
				Элементы.ТаблицаРасчетаЗначениеГруппировки3.МинимальноеЗначение = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СложныйТариф.Видимость		 = ЭтоСдельныйЗаработок;
	Элементы.ПараметрВыработки.Видимость = ЭтоСдельныйЗаработок;
	Элементы.РасчетПоСтрокам.Видимость	 = ЭтоСдельныйЗаработок И ПараметрВыработкиПрименимДляПострочногоРасчета();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТипОбласти(ТипОбласти)
	Если НЕ ЗначениеЗаполнено(ТипОбласти) Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("Неопределено");
	ИначеЕсли ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.Тягач") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ТранспортныеСредства");
	ИначеЕсли ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.МодельТягача") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатМоделиТС");
	ИначеЕсли ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.ТипТягача") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ТипыТранспортныхСредств");
	ИначеЕсли ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.Контрагент") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	ИначеЕсли ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.Подразделение") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
	ИначеЕсли ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.ОбъектСтроительства") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СМ_ОбъектыСтроительства");
	ИначеЕсли ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.ВидПеревозки") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатВидыПеревозок");
	ИначеЕсли ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.Маршрут") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатМаршруты");
	ИначеЕсли ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.ПунктОтправления") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения");
	ИначеЕсли ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.ПунктНазначения") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения");
	ИначеЕсли ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.Номенклатура") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	КонецЕсли;
	
	Элементы.ОбластиДействияЗначениеОбластиДействия.ОграничениеТипа = ТекОграничениеТипа;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСписокТиповОбласти()
	Элементы.ОбластиДействияВидОбластиДействия.СписокВыбора.Очистить();
	Элементы.ОбластиДействияВидОбластиДействия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.Тягач"), "ТС");
	Элементы.ОбластиДействияВидОбластиДействия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.МодельТягача"), "Модель ТС");
	Элементы.ОбластиДействияВидОбластиДействия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.ТипТягача"), "Тип ТС");
	
	Если Объект.СпособРасчетаОплатыТруда = ПредопределенноеЗначение("Перечисление.уатСпособыРасчетаОплатыТруда.ПроцентомОтВыручки") Тогда
		Элементы.ОбластиДействияВидОбластиДействия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.Маршрут"));
		Элементы.ОбластиДействияВидОбластиДействия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.Контрагент"));
		
	ИначеЕсли Объект.РасчетПоСтрокам Тогда
		Элементы.ОбластиДействияВидОбластиДействия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.Контрагент"));
		Элементы.ОбластиДействияВидОбластиДействия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.Подразделение"));
		Элементы.ОбластиДействияВидОбластиДействия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.ОбъектСтроительства"));
		Элементы.ОбластиДействияВидОбластиДействия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.ВидПеревозки"));
		Элементы.ОбластиДействияВидОбластиДействия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.Маршрут"));
		Элементы.ОбластиДействияВидОбластиДействия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.ПунктОтправления"));
		Элементы.ОбластиДействияВидОбластиДействия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.ПунктНазначения"));
		Элементы.ОбластиДействияВидОбластиДействия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.Номенклатура"));
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
