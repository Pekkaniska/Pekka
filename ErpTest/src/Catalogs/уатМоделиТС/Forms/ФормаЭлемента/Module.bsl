
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	об = РеквизитФормыВЗначение("Объект");
	//уатЗащищенныеФункцииСервер.уатСправочникФормаЭлементаПриСозданииНаСервере(Об, Отказ, СтандартнаяОбработка, ЭтаФорма, ДопПараметрыОткрытие);
	ЗначениеВРеквизитФормы(Об,"Объект");
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	Если Объект.Ссылка.Пустая() И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		Объект.ВидМоделиТС           = Перечисления.уатВидыМоделейТС.Автотранспорт;
		Объект.НаличиеТопливногоБака = Истина;
		Объект.НаличиеСпидометра     = Истина;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НормыРасходаГСМ.Отбор, "МодельТС", Объект.Ссылка,,,Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НормыРасходаТЖ.Отбор, "МодельТС", Объект.Ссылка,,,Истина);
	
//Рарус Владимир Подрезов УАТ 3.1.1 09.08.2016
//	СпидометрСчетчикМЧ = ?(НЕ Объект.НаличиеСпидометра, 1, 0);
	СпидометрСчетчикМЧ = ?(Объект.пкБезСчетчика, 2, ?(НЕ Объект.НаличиеСпидометра, 1, 0));
//Рарус Владимир Подрезов Конец
	
	ЗагрузитьМакетТС();
	
	// Сохраним старое значение Вида модели ТС
	Если Параметры.Ключ.Пустая() Тогда 
		ВидМоделиТСДоИзменения = Перечисления.уатВидыМоделейТС.ПустаяСсылка();
	Иначе 
		ВидМоделиТСДоИзменения = Объект.ВидМоделиТС;
	КонецЕсли;
	
	Если НЕ ПравоДоступа("Редактирование", Метаданные.Справочники.уатМоделиТС) Тогда
		Элементы.СпидометрСчетчикМЧ.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	// УправлениеПредприятием.СлужебныеПодсистемы
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	// Конец УправлениеПредприятием.СлужебныеПодсистемы
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//уатЗащищенныеФункцииКлиент.уатСправочникФормаЭлементаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПриИзмененииПризнакаСпидометра();
	
	УправлениеВидимостью();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НормыРасходаГСМ.Отбор, "МодельТС", Объект.Ссылка,,,Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НормыРасходаТЖ.Отбор, "МодельТС", Объект.Ссылка,,,Истина);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НормыРасходаГСМПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	уатОбщегоНазначенияКлиент.ПроверитьЗаписьНовогоОбъектаВФорме(ЭтаФорма, Объект.Ссылка,,, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	Если НЕ Копирование Тогда
		Отказ = Истина;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("МодельТС"	, Объект.Ссылка);
		СтруктураОтбора.Вставить("ГСМ"		, Объект.ОсновноеТопливо);
		ОткрытьФорму("РегистрСведений.уатНормыРасходаГСМ.ФормаЗаписи", Новый Структура("ЗначенияЗаполнения", 
			СтруктураОтбора));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НормыРасходаГСМПередНачаломИзменения(Элемент, Отказ)
	Если Модифицированность Тогда
		Ответ = Неопределено;
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("НормыРасходаГСМПередНачаломИзмененияЗавершение", ЭтотОбъект), "Перед изменением норм расход ГСМ необходимо записать элемент. Продолжить?", РежимДиалогаВопрос.ОКОтмена);
   	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НормыРасходаГСМПередНачаломИзмененияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Попытка
			Записать();
		Исключение
			Возврат;
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОсновноеТопливоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДопПараметры = Новый Структура("ЗначениеГСМДоИзменения, ИмяПроцедурыОписаниеОповещения", Объект.ОсновноеТопливо, "ОписаниеОповещенияВыбораГСМ");
	уатЗащищенныеФункцииКлиент.ВыбратьГСМ(ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Топливо"), ЭтаФорма, ДопПараметры);
КонецПроцедуры

// Подключаемый динамически обработчик оповещения
&НаКлиенте
Процедура ОписаниеОповещенияВыбораГСМ(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ОсновноеТопливо = Результат;
	
	Если Объект.ОсновноеТопливо <> ДопПараметры.ЗначениеГСМДоИзменения Тогда 
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительноеТопливоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДопПараметры = Новый Структура("ЗначениеГСМДоИзменения, ИмяПроцедурыОписаниеОповещения", Объект.ДополнительноеТопливо, "ОписаниеОповещенияВыбораГСМДоп");
	уатЗащищенныеФункцииКлиент.ВыбратьГСМ(ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Топливо"), ЭтаФорма, ДопПараметры);
КонецПроцедуры

// Подключаемый динамически обработчик оповещения
&НаКлиенте
Процедура ОписаниеОповещенияВыбораГСМДоп(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДополнительноеТопливо = Результат;
	
	Если Объект.ДополнительноеТопливо <> ДопПараметры.ЗначениеГСМДоИзменения Тогда 
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТипДвигателяПриИзменении(Элемент)
	Если Объект.ВидМоделиТС = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Автотранспорт") И НЕ ЗначениеЗаполнено(Объект.ТипДвигателя) Тогда
		Объект.ОсновноеТопливо = Неопределено;
		Объект.ДополнительноеТопливо = Неопределено;
	КонецЕсли;
	УправлениеВидимостью();
КонецПроцедуры

&НаКлиенте
Процедура ВидМоделиТСПриИзменении(Элемент)
	Если Объект.ВидМоделиТС = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Автотранспорт") И НЕ ЗначениеЗаполнено(Объект.ТипДвигателя) Тогда
		Объект.ОсновноеТопливо = Неопределено;
		Объект.ДополнительноеТопливо = Неопределено;
	КонецЕсли;
	УправлениеВидимостью();
КонецПроцедуры

&НаКлиенте
Процедура ТипТСПриИзменении(Элемент)
	УправлениеВидимостью();
КонецПроцедуры

&НаКлиенте
Процедура НаличиеТопливногоБакаПриИзменении(Элемент)
	УправлениеВидимостью();
	Если НЕ Объект.НаличиеТопливногоБака тогда
		Объект.ОбъемБака = 0;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НормативыОбслуживанияВидОбслуживанияПриИзменении(Элемент)
	СтрокТабличнойЧасти = Элементы.НормативыОбслуживания.ТекущиеДанные;
	ПроверитьНаДублиТО(СтрокТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура НормативыОбслуживанияПараметрВыработкиПриИзменении(Элемент)
	СтрокТабличнойЧасти = Элементы.НормативыОбслуживания.ТекущиеДанные;
	ПроверитьНаДублиТО(СтрокТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура СпидометрСчетчикМЧПриИзменении(Элемент)
	Объект.НаличиеСпидометра = ?(СпидометрСчетчикМЧ = 0, Истина, Ложь);
//Рарус Владимир Подрезов УАТ 3.1.1 09.08.2016
	Объект.пкБезСчетчика = ?(СпидометрСчетчикМЧ = 2, Истина, Ложь);
//Рарус Владимир Подрезов Конец
	ПриИзмененииПризнакаСпидометра();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НормыРасходаТЖПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	#Если ВебКлиент Тогда
		Если НЕ Копирование Тогда
			Отказ = Истина;
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("МодельТС", Объект.Ссылка);
			ОткрытьФорму("РегистрСведений.уатНормыРасходаТехническихЖидкостей.ФормаЗаписи", Новый Структура("ЗначенияЗаполнения", СтруктураОтбора));
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура МакетТСПриИзменении(Элемент)
	Если НЕ ОтрисовываетсяМакет Тогда
		ЗагрузитьМакетТС();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Описание");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// УправлениеПредприятием.СлужебныеПодсистемы
&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
КонецПроцедуры
// Конец УправлениеПредприятием.СлужебныеПодсистемы

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ПриИзмененииПризнакаСпидометра()
	Элементы.НормыРасходаГСМЛинейнаяНорма.Видимость						= Объект.НаличиеСпидометра;
	Элементы.НормыРасходаГСМНормаНаИзменениеСобственногоВеса.Видимость	= Объект.НаличиеСпидометра;
	Элементы.НормыРасходаГСМНормаНаТранспортнуюРаботу.Видимость			= Объект.НаличиеСпидометра;
	Элементы.НормыРасходаГСМНормаСпециальнаяНаМоточас.Видимость			= НЕ Объект.НаличиеСпидометра;
	Если Объект.НаличиеСпидометра Тогда
		мКолонка = Элементы.НормыРасходаГСМНормаНаПростойСВклДвигателем;
		мКолонка.Заголовок = "Норма пробега на 1 час простоя с вкл. двигателем, км";
		мКолонка.Подсказка = "Норма пробега на 1 час простоя с вкл. двигателем, км";
	Иначе
		мКолонка = Элементы.НормыРасходаГСМНормаНаПростойСВклДвигателем;
		мКолонка.Заголовок = "Норма на простой с вкл. двигателем, л/ч";
		мКолонка.Подсказка = "Норма на простой с вкл. двигателем, л/ч";
	КонецЕсли;	
//Рарус Владимир Подрезов УАТ 3.1.1 09.08.2016
	Элементы.НормыРасходаГСМЛинейнаяНорма.Видимость						= НЕ Объект.пкБезСчетчика;
	Элементы.НормыРасходаГСМНормаНаИзменениеСобственногоВеса.Видимость	= НЕ Объект.пкБезСчетчика;
	Элементы.НормыРасходаГСМНормаНаТранспортнуюРаботу.Видимость			= НЕ Объект.пкБезСчетчика;
	Элементы.НормыРасходаГСМНормаСпециальнаяНаМоточас.Видимость			= НЕ Объект.пкБезСчетчика;
	
	Элементы.СтраницаНормыРасходаГСМ.Видимость							= НЕ Объект.пкБезСчетчика;
	Элементы.СтраницаНормыРасходаТехническихЖидкостей.Видимость			= НЕ Объект.пкБезСчетчика;
	Элементы.НормыТО.Видимость											= НЕ Объект.пкБезСчетчика;
	
	Элементы.Страницы.Видимость											= НЕ Объект.пкБезСчетчика;
//Рарус Владимир Подрезов Конец
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостью()
	ЭтоАвтотранспорт = ?(Объект.ВидМоделиТС = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Автотранспорт"), 
		Истина, Ложь);
	ЭтоПрицеп		 = ?(Объект.ВидМоделиТС = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Прицеп"), Истина, Ложь);
	
	Если ЭтоАвтотранспорт Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ТипДвигателя) Тогда
			Элементы.МодельДвигателя.Доступность 		= Ложь;
			Элементы.ОсновноеТопливо.Доступность 		= Ложь;
			Элементы.ДополнительноеТопливо.Доступность	= Ложь;
		Иначе	
			Элементы.МодельДвигателя.Доступность 		= Истина;
			Элементы.ОсновноеТопливо.Доступность 		= Истина;
			Элементы.ДополнительноеТопливо.Доступность	= Истина;
		КонецЕсли;	
	Иначе	
		Элементы.МодельДвигателя.Доступность 			= Истина;
		Элементы.ОсновноеТопливо.Доступность 			= Истина;
		Элементы.ДополнительноеТопливо.Доступность		= Ложь;
	КонецЕсли;	
	
	Элементы.ТипТС.Видимость			= ЭтоАвтотранспорт ИЛИ ЭтоПрицеп;
	Элементы.КатегорияАТСЕЭК.Видимость	= ЭтоАвтотранспорт ИЛИ ЭтоПрицеп;
	Элементы.ОбъемБака.Видимость		= Объект.НаличиеТопливногоБака;
	Элементы.ГруппаСамосвал.Видимость  	= ЭтоТипТССамосвал(Объект.ТипТС);
	КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаДублиТО(СтрокаТабличнойЧасти)
	мВидТО				=  СтрокаТабличнойЧасти.ВидОбслуживания;
	мПараметрВыработки	=  СтрокаТабличнойЧасти.ПараметрВыработки;
	
	мКолвоВидовТО = 0;
	Для Каждого СтрокаТЧ Из Объект.НормативыОбслуживания Цикл
		Если (мВидТО = СтрокаТч.ВидОбслуживания) И (мПараметрВыработки = СтрокаТч.ПараметрВыработки)  Тогда
			мКолвоВидовТО = мКолвоВидовТО + 1;
		КонецЕсли;
	КонецЦикла;
	Если мКолвоВидовТО > 1 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Нельзя вводить две строки с одинаковым видом ТО'");
		Сообщение.Сообщить();
		СтрокаТабличнойЧасти.ВидОбслуживания = ПредопределенноеЗначение("Справочник.уатВидыОбслуживанияТС.ПустаяСсылка"); 
	Иначе
		СтрокаТабличнойЧасти.Плановый = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
			СтрокаТабличнойЧасти.ВидОбслуживания, "ИспользоватьВПланированииТО")
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьМакетТС()
	ДопМакет = Справочники.уатМакетыТС.ПолучитьМакет("Макет");
	
	Если ЗначениеЗаполнено(Объект.МакетТС) Тогда
		КешНастройкаРисункаТС = Объект.МакетТС.ДеревоМакета.Получить();
		Если КешНастройкаРисункаТС = Неопределено Тогда
			Возврат; 
		КонецЕсли;
		
		Корпус = КешНастройкаРисункаТС.Строки.Найти("КорпусАвто");
		ОтрисоватьКорпус(Корпус, Объект.МакетТС, ДопМакет);
		
		КШины  = КешНастройкаРисункаТС.Строки.Найти("Шины");
		Для Каждого Шина Из КШины.Строки Цикл
			Если Шина.Строки.Найти("Установлено").Значение Тогда
				ОтрисоватьШину(Шина, ДопМакет);
			КонецЕсли;
		КонецЦикла; 
	Иначе
	КонецЕсли;
	
	ТабДок = ДопМакет;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоТипТССамосвал(ТипТС) Экспорт 
	
	Если ЗначениеЗаполнено(ТипТС) 
		И ЗначениеЗаполнено(ТипТС.уатВидТС)
		И ТипТС.уатВидТС = Перечисления.уатВидыТС.Самосвал Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
			
КонецФункции // ЭтоСамосвал

&НаСервере
Процедура ОтрисоватьШину(СтрокаШины, МакетВывода)
	ОтрисовываетсяМакет = Истина;
	
	НоваяКартинка = МакетВывода.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	НоваяКартинка.Лево = СтрокаШины.Строки.Найти("Кордината X").Значение;
	НоваяКартинка.Верх = СтрокаШины.Строки.Найти("Кордината Y").Значение;
	НоваяКартинка.Ширина = СтрокаШины.Строки.Найти("Ширина").Значение;
	НоваяКартинка.Высота = СтрокаШины.Строки.Найти("Высота").Значение;
	НоваяКартинка.РазмерКартинки = РазмерКартинки.Пропорционально;
	НоваяКартинка.ЦветЛинии = ЦветаСтиля.ЦветРамки;
	НоваяКартинка.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная, 2);
	НоваяКартинка.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
	
	ОтрисовываетсяМакет = Ложь;
КонецПроцедуры

&НаСервере
Процедура ОтрисоватьКорпус(СтрокаКорпус, Макет, МакетВывода)
	ОтрисовываетсяМакет = Истина;
	
	НоваяКартинка = МакетВывода.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	НоваяКартинка.Лево = СтрокаКорпус.Строки.Найти("Кордината X").Значение;
	НоваяКартинка.Верх = СтрокаКорпус.Строки.Найти("Кордината Y").Значение;
	НоваяКартинка.Ширина = СтрокаКорпус.Строки.Найти("Ширина").Значение;
	НоваяКартинка.Высота = СтрокаКорпус.Строки.Найти("Высота").Значение;
	НоваяКартинка.РазмерКартинки = РазмерКартинки.Пропорционально;
	НоваяКартинка.ГраницаСлева = Ложь;
	НоваяКартинка.ГраницаСправа = Ложь;
	НоваяКартинка.ГраницаСверху = Ложь;
	НоваяКартинка.ГраницаСнизу = Ложь;
	
	Если Макет.ХранитьМакетВоВнешнемФайле Тогда
		Попытка
			ПолноеИмяФайла = СтрокаКорпус.Строки.Найти("Путь").Значение;
			ФайлНаДиске = Новый Файл(ПолноеИмяФайла);
			Если ФайлНаДиске.Существует() Тогда
				НоваяКартинка.Картинка = Новый Картинка(ПолноеИмяФайла);   			  
			КонецЕсли;
		Исключение
			Сообщить("Ошибка открытия файла картинки: " + ИнформацияОбОшибке().Описание + " по причине " + ИнформацияОбОшибке().Причина, СтатусСообщения.Внимание)
		КонецПопытки;
	Иначе
		Попытка
			НоваяКартинка.Картинка = Макет.ХранилищеМакета.Получить();
		Исключение
			Сообщить("Ошибка отображения картинки: " + ИнформацияОбОшибке().Описание + " по причине " + ИнформацияОбОшибке().Причина, СтатусСообщения.Внимание)
		КонецПопытки;
	КонецЕсли;
	
	ОтрисовываетсяМакет = Ложь;
КонецПроцедуры

#КонецОбласти
