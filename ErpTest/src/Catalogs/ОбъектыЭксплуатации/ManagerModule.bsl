
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

//++ НЕ УТКА

// Возвращает описание реквизитов объекта эксплуатации
//
// Возвращаемое значение:
//		ТаблицаЗначений - Таблица с описанием реквизитов элемента справочника объектов эксплуатации.
//
Функция СоставРеквизитов() Экспорт
	
	// Описание формата возвращаемой таблицы реквизитов
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Синоним", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ОбязателенДляЗаполнения", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ТолькоПросмотрОбязательности", Новый ОписаниеТипов("Булево"));
	
	// Значения заполняемые по-умолчанию в строку каждого из реквизитов
	ЗначенияПоУмолчанию = Новый Структура;
	ЗначенияПоУмолчанию.Вставить("Имя", "");
	ЗначенияПоУмолчанию.Вставить("Синоним", "");
	ЗначенияПоУмолчанию.Вставить("ОбязателенДляЗаполнения", "Ложь");
	ЗначенияПоУмолчанию.Вставить("ТолькоПросмотрОбязательности", "Ложь");
	
	// Описания реквизитов, со значениями параметров отличающихся от "по-умолчанию"
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ДатаСведений", Новый Структура("ТолькоПросмотрОбязательности", Истина));
	СтруктураРеквизитов.Вставить("Статус", Новый Структура("ТолькоПросмотрОбязательности", Истина));
	СтруктураРеквизитов.Вставить("Класс", Новый Структура("ТолькоПросмотрОбязательности", Истина));
	СтруктураРеквизитов.Вставить("Подкласс", Новый Структура("ОбязателенДляЗаполнения, ТолькоПросмотрОбязательности", Ложь, Истина));
	
	// Список реквизитов, которые должны быть исключены: служебные, не используемые, предназначенные для удаления, булевы признаки
	// 		или любые другие не предназначенные для интерактивной настройки пользователем.
	СтопЛист = Новый Структура(
		"ГруппаОСМеждународныйУчет,
		|Комментарий,
		|ОбъектБытовогоНазначения,
		|ОбъектБытовогоНазначения,
		|ДатаСведений,
		|ЗарегистрированоВРеестреСистемыПлатон,
		|НедвижимоеИмущество,
		|РеквизитНедвижимоеИмуществоОбновлен,
		|Удалить_ГруппаОС,
		|Удалить_КодПоОКОФ,
		|Удалить_ШифрПоЕНАОФ,
		|Удалить_КадастровыйНомер,
		|Удалить_АмортизационнаяГруппа,
		|Удалить_Помещение,
		|Удалить_КадастровыйНомер,
//+++rarus-spb_zlov 09.09.2016    
		|пкЭтоТехника,
//---rarus-spb_zlov 09.09.2016 
		|Удалить_КодРегиона");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьМеждународныйФинансовыйУчет") Тогда
		СтопЛист.Удалить("ГруппаОСМеждународныйУчет");
	КонецЕсли;
	
	// Получение таблицы реквизитов из описания метаданных
	СтруктураСправочника = Метаданные.Справочники.ОбъектыЭксплуатации;
	Для Каждого Реквизит Из СтруктураСправочника.Реквизиты Цикл
		
		Если СтопЛист.Свойство(Реквизит.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРеквизита = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРеквизита, ЗначенияПоУмолчанию);
		ЗаполнитьЗначенияСвойств(СтрокаРеквизита, Реквизит);
		
		СтрокаРеквизита.ОбязателенДляЗаполнения = (Реквизит.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку);
		
		Если СтруктураРеквизитов.Свойство(Реквизит.Имя) Тогда
			ЗаполнитьЗначенияСвойств(СтрокаРеквизита, СтруктураРеквизитов[Реквизит.Имя]);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

// Возвращает структуру по-умолчанию передаваемую в качестве параметра в процедуру проверки "ПроверитьЗаполнение".
//
// Возвращаемое значение:
// 		Структура - Структура параметров проверки заполнения.
//
Функция ПараметрыПроверкиЗаполнения() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("ПотокОшибок", Новый Структура);
	ОбъектыЭксплуатации.ИнициализироватьПотокОшибок(Параметры.ПотокОшибок);
	
	Параметры.Вставить("СообщатьОшибки", Истина);
	Параметры.Вставить("Форма", Неопределено);
	
	Параметры.Вставить("ИспользоватьУзлыОбъектовЭксплуатации", ПолучитьФункциональнуюОпцию("ИспользоватьУзлыОбъектовЭксплуатации"));
	
	Параметры.Вставить("ПроверятьУзлы", Истина);
	Параметры.Вставить("ПараметрыПроверкиУзлов", Справочники.УзлыОбъектовЭксплуатации.ПараметрыПроверкиЗаполнения());
	Параметры.ПараметрыПроверкиУзлов.Вставить("СообщатьОшибки", Ложь);
	
	Возврат Параметры;
	
КонецФункции

// Выполняет проверку заполнения переданного объекта проверки по заданным параметрам
//
// Параметры:
// 		ОбъектПроверки - ДанныеФормыСтруктура, СправочникОбъект.ОбъектыЭксплуатации, СправочникСсылка.ОбъектыЭксплуатации, Массив
// 			- Объект, ссылка или массив ссылок на объекты эксплуатации, которые необходимо проверить на корректность заполнения
// 		ПараметрыПроверки - Структура - Структура с описанием параметров проверки заполнения, состав полей описан в функции "ПараметрыПроверкиЗаполнения"
// 		Отказ - Булево - Возвращаемый параметр, признак наличия ошибок при проверки.
//
Процедура ПроверитьЗаполнение(ОбъектПроверки, ПараметрыПроверки, Отказ=Ложь) Экспорт
	
	КэшированныеЗначения = Неопределено;
	ОбъектыЭксплуатации.ИнициализироватьКэшированныеЗначенияПроверкиЗаполнения(КэшированныеЗначения);
	
	ТипОбъекта = ТипЗнч(ОбъектПроверки);
	
	МассивОбъектовЭксплуатации = Новый Массив;
	
	Если ТипОбъекта = Тип("СправочникСсылка.ОбъектыЭксплуатации")
		Или ТипОбъекта = Тип("Массив") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОбъектыЭксплуатации", ОбъектПроверки);
		СформироватьЗапросПроверкиЗаполнения(Запрос.Текст);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат;
		КонецЕсли;
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ПроверитьОбъектЭксплуатации(
				Выборка,
				ПараметрыПроверки,
				КэшированныеЗначения);
			
			МассивОбъектовЭксплуатации.Добавить(Выборка.Ссылка);
			
		КонецЦикла;
		
	Иначе
		
		ПроверитьОбъектЭксплуатации(
			ОбъектПроверки,
			ПараметрыПроверки,
			КэшированныеЗначения);
		
		МассивОбъектовЭксплуатации.Добавить(ОбъектПроверки.Ссылка);
		
	КонецЕсли;
	
	ПараметрыПроверки.Вставить("ОтказПроверкиУзлов", Ложь);
	
	Если ПараметрыПроверки.ИспользоватьУзлыОбъектовЭксплуатации
		И ПараметрыПроверки.ПроверятьУзлы Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОбъектыЭксплуатации", МассивОбъектовЭксплуатации);
		СформироватьЗапросПроверкиЗаполненияУзлов(Запрос.Текст);
		
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Справочники.УзлыОбъектовЭксплуатации.ПроверитьЗаполнение(
					Выборка,
					ПараметрыПроверки.ПараметрыПроверкиУзлов,
					ПараметрыПроверки.ОтказПроверкиУзлов, // Отказ
					КэшированныеЗначения);
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыПроверки.ПотокОшибок.СписокОшибок.Количество() <> 0 Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если ПараметрыПроверки.ПараметрыПроверкиУзлов.ПотокОшибок.СписокОшибок.Количество() <> 0 Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если ПараметрыПроверки.СообщатьОшибки Тогда
		ОбъектыЭксплуатации.СообщитьОшибкиПроверкиЗаполнения(ПараметрыПроверки.ПотокОшибок, Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет разблокировку объекта эксплуатации для разрешения возможности интерактивного редактирования.
//
// Параметры:
// 		ОбъектЭксплуатации - СправочникСсылка.ОбъектЭксплуатации - Ссылка на элемент справочника
// 		Отказ - Булево - Возвращаемый параметр, признак наличия ошибок во время выполнения.
//
Процедура РазблокироватьОбъектЭксплуатации(ОбъектЭксплуатации, Отказ=Ложь) Экспорт
	
	ДанныеЗаполнения = Новый Структура("Статус", Перечисления.СтатусыОбъектовЭксплуатации.Редактируется);
	
	ОбъектСправочника = ОбъектЭксплуатации.ПолучитьОбъект();
	
	ЗаполнитьЗначенияСвойств(ОбъектСправочника, ДанныеЗаполнения);
	Попытка
		ОбъектСправочника.Записать();
	Исключение
		Отказ = Истина;
		ВызватьИсключение НСтр("ru='Ошибка при попытке записи объекта эксплуатации:'") + " " + ИнформацияОбОшибке().Описание;
	КонецПопытки;
	
КонецПроцедуры

//-- НЕ УТКА

// Формирует сведения об учете основного средства
//
// Параметры:
//  ОсновноеСредство - СправочникСсылка.ОбъектыЭксплуатации - Основное средство для которого нужно получить сведения.
// 
// Возвращаемое значение:
//  Структура - Содержит сведения об учете.
//
Функция СведенияОбУчете(ОсновноеСредство) Экспорт

	Если НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестонахождениеОС)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПервоначальныеСведенияОС)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОС)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОСУУ)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОСБУ)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПараметрыАмортизацииОСБУ)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПараметрыАмортизацииОСУУ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюБУ, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВводаВЭксплуатациюБУ,
	|	ЕСТЬNULL(ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюУУ, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВводаВЭксплуатациюУУ,
	|	ЕСТЬNULL(ПервоначальныеСведенияОС.ДокументВводаВЭксплуатациюБУ, НЕОПРЕДЕЛЕНО) КАК ДокументВводаВЭксплуатациюБУ,
	|	ЕСТЬNULL(ПервоначальныеСведенияОС.ДокументВводаВЭксплуатациюУУ, НЕОПРЕДЕЛЕНО) КАК ДокументВводаВЭксплуатациюУУ,
	|	ЕСТЬNULL(ПервоначальныеСведенияОС.ДокументСнятияСУчета, НЕОПРЕДЕЛЕНО) КАК ДокументСнятияСУчета,
	|	ЕСТЬNULL(ПервоначальныеСведенияОС.ДокументСнятияСУчета.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаСнятияСУчета,
	|	ЕСТЬNULL(ПорядокУчетаОССрезПоследних.ГруппаФинансовогоУчета, НЕОПРЕДЕЛЕНО) КАК ГруппаФинансовогоУчета,
	|	ЕСТЬNULL(ПорядокУчетаОССрезПоследних.ГруппаФинансовогоУчета.Представление, """") КАК ГруппаФинансовогоУчетаПредставление,
	|	ЕСТЬNULL(ПорядокУчетаОСБУСрезПоследних.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) КАК СостояниеБУ,
	|	ЕСТЬNULL(ПорядокУчетаОСУУСрезПоследних.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) КАК СостояниеУУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСУУСрезПоследних.СрокИспользования, 0) КАК СрокИспользованияУУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБУСрезПоследних.СрокПолезногоИспользованияБУ, 0) КАК СрокИспользованияБУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБУСрезПоследних.СрокПолезногоИспользованияНУ, 0) КАК СрокИспользованияНУ,
	|	МестонахождениеОССрезПоследних.Период КАК ПериодСведенийОМестонахождении,
	|	МестонахождениеОССрезПоследних.Организация КАК Организация,
	|	ЕСТЬNULL(МестонахождениеОССрезПоследних.Организация.Представление, """") КАК ОрганизацияПредставление,
	|	МестонахождениеОССрезПоследних.МОЛ КАК МОЛ,
	|	ЕСТЬNULL(МестонахождениеОССрезПоследних.МОЛ.Представление, """") КАК МОЛПредставление,
	|	МестонахождениеОССрезПоследних.Местонахождение КАК Подразделение,
	|	ЕСТЬNULL(МестонахождениеОССрезПоследних.Местонахождение.Представление, """") КАК ПодразделениеПредставление,
	|	МестонахождениеОССрезПоследних.АдресМестонахождения КАК АдресМестонахождения
	|ИЗ
	|	РегистрСведений.МестонахождениеОС.СрезПоследних(, ОсновноеСредство = &Ссылка) КАК МестонахождениеОССрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(, ОсновноеСредство = &Ссылка) КАК ПервоначальныеСведенияОС
	|		ПО (ПервоначальныеСведенияОС.ОсновноеСредство = МестонахождениеОССрезПоследних.ОсновноеСредство)
	|			И (ПервоначальныеСведенияОС.Организация = МестонахождениеОССрезПоследних.Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОС.СрезПоследних(, ОсновноеСредство = &Ссылка) КАК ПорядокУчетаОССрезПоследних
	|		ПО (ПорядокУчетаОССрезПоследних.ОсновноеСредство = МестонахождениеОССрезПоследних.ОсновноеСредство)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ.СрезПоследних(, ОсновноеСредство = &Ссылка) КАК ПорядокУчетаОСУУСрезПоследних
	|		ПО (ПорядокУчетаОСУУСрезПоследних.ОсновноеСредство = МестонахождениеОССрезПоследних.ОсновноеСредство)
	|			И (ПорядокУчетаОСУУСрезПоследних.Организация = МестонахождениеОССрезПоследних.Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСБУ.СрезПоследних(, ОсновноеСредство = &Ссылка) КАК ПорядокУчетаОСБУСрезПоследних
	|		ПО (ПорядокУчетаОСБУСрезПоследних.ОсновноеСредство = МестонахождениеОССрезПоследних.ОсновноеСредство)
	|			И (ПорядокУчетаОСБУСрезПоследних.Организация = МестонахождениеОССрезПоследних.Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБУ.СрезПоследних(, ОсновноеСредство = &Ссылка) КАК ПараметрыАмортизацииОСБУСрезПоследних
	|		ПО (ПараметрыАмортизацииОСБУСрезПоследних.ОсновноеСредство = МестонахождениеОССрезПоследних.ОсновноеСредство)
	|			И (ПараметрыАмортизацииОСБУСрезПоследних.Организация = МестонахождениеОССрезПоследних.Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСУУ.СрезПоследних(, ОсновноеСредство = &Ссылка) КАК ПараметрыАмортизацииОСУУСрезПоследних
	|		ПО (ПараметрыАмортизацииОСУУСрезПоследних.ОсновноеСредство = МестонахождениеОССрезПоследних.ОсновноеСредство)
	|			И (ПараметрыАмортизацииОСУУСрезПоследних.Организация = МестонахождениеОССрезПоследних.Организация)";

	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ОсновноеСредство);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СведенияОбУчете = Новый Структура;
	Для каждого КолонкаЗапроса Из Результат.Колонки Цикл
		СведенияОбУчете.Вставить(КолонкаЗапроса.Имя);
	КонецЦикла; 
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(СведенияОбУчете, Выборка);
	
	Возврат СведенияОбУчете;

КонецФункции

// Возвращает сведения об основном средстве.
//
// Параметры:
//  ОсновноеСредство - СправочникСсылка.ОбъектыЭксплуатации	 - Основное средство для которого нужно получить сведения.
//  Период			 - Дата - На какую дату нужно получить сведения.
// 
// Возвращаемое значение:
//  Структура - Содержит сведения об основном средстве.
//
Функция ПервоначальныеСведения(ОсновноеСредство, Период = '000101010000') Экспорт
	
	ПервоначальныеСведения = Новый Структура;
	ПервоначальныеСведения.Вставить("Организация", Неопределено);
	ПервоначальныеСведения.Вставить("Местонахождение", Неопределено);
	ПервоначальныеСведения.Вставить("МОЛ", Неопределено);
	ПервоначальныеСведения.Вставить("ДатаВводаВЭксплуатациюБУ", '000101010000');
	ПервоначальныеСведения.Вставить("ДатаВводаВЭксплуатациюУУ", '000101010000');
	ПервоначальныеСведения.Вставить("ДокументВводаВЭксплуатациюБУ", Неопределено);
	ПервоначальныеСведения.Вставить("ДокументВводаВЭксплуатациюУУ", Неопределено);
	ПервоначальныеСведения.Вставить("СостояниеУУ", Перечисления.СостоянияОС.НеПринятоКУчету);
	ПервоначальныеСведения.Вставить("СостояниеБУ", Перечисления.СостоянияОС.НеПринятоКУчету);
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестонахождениеОС)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПервоначальныеСведенияОС)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОСУУ)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОСБУ) Тогда
		
		Возврат ПервоначальныеСведения;
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МестонахождениеОС.Организация,
	|	МестонахождениеОС.Местонахождение,
	|	МестонахождениеОС.МОЛ,
	|	ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюБУ,
	|	ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюУУ,
	|	ПервоначальныеСведенияОС.ДокументВводаВЭксплуатациюБУ,
	|	ПервоначальныеСведенияОС.ДокументВводаВЭксплуатациюУУ,
	|	ПервоначальныеСведенияОС.ДоговорЛизинга,
	|	ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) КАК СостояниеУУ,
	|	ЕСТЬNULL(ПорядокУчетаОСБУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) КАК СостояниеБУ
	|ИЗ
	|	РегистрСведений.МестонахождениеОС.СрезПоследних(&Период, ОсновноеСредство = &Ссылка) КАК МестонахождениеОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(&Период, ОсновноеСредство = &Ссылка) КАК ПервоначальныеСведенияОС
	|		ПО МестонахождениеОС.ОсновноеСредство = ПервоначальныеСведенияОС.ОсновноеСредство
	|			И МестонахождениеОС.Организация = ПервоначальныеСведенияОС.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ.СрезПоследних(&Период, ОсновноеСредство = &Ссылка) КАК ПорядокУчетаОСУУ
	|		ПО МестонахождениеОС.ОсновноеСредство = ПорядокУчетаОСУУ.ОсновноеСредство
	|			И МестонахождениеОС.Организация = ПорядокУчетаОСУУ.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСБУ.СрезПоследних(&Период, ОсновноеСредство = &Ссылка) КАК ПорядокУчетаОСБУ
	|		ПО МестонахождениеОС.ОсновноеСредство = ПорядокУчетаОСБУ.ОсновноеСредство
	|			И МестонахождениеОС.Организация = ПорядокУчетаОСБУ.Организация";

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ОсновноеСредство);
	Запрос.УстановитьПараметр("Период", Период);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ПервоначальныеСведения;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ПервоначальныеСведения, Выборка);
	
	Возврат ПервоначальныеСведения;

КонецФункции

Функция ПредставлениеСведенийОбУчете(СведенияОбУчете, ВключитьНезаполненные = Истина) Экспорт

	СведенияПринятКУчету1 = Новый Массив;
	СведенияПринятКУчету2 = Новый Массив;
	СведенияСрокИспользования1 = Новый Массив;
	СведенияСрокИспользования2 = Новый Массив;
	СведенияСрокИспользования3 = Новый Массив;
	СведенияСнятСУчета = Новый Массив;
	СведенияГФУ = Новый Массив;
	
	СведенияМестонахождениеОрганизация = Новый Массив;
	СведенияМестонахождениеПодразделение = Новый Массив;
	СведенияМестонахождениеМОЛ = Новый Массив;
	СведенияМестонахождениеАдрес = Новый Массив;
	Период = '000101010000';
	
	#Область ОбщиеСведения
	
	Если СведенияОбУчете <> Неопределено Тогда
		
		ДоступенВыборОтраженияВУчетах = ВнеоборотныеАктивыСлужебный.ДоступенВыборОтраженияВУчетах();
		
		Если СведенияОбУчете.СостояниеУУ = Перечисления.СостоянияОС.ПринятоКУчету
			ИЛИ СведенияОбУчете.СостояниеБУ = Перечисления.СостоянияОС.ПринятоКУчету
			ИЛИ СведенияОбУчете.СостояниеУУ = Перечисления.СостоянияОС.СнятоСУчета
			ИЛИ СведенияОбУчете.СостояниеБУ = Перечисления.СостоянияОС.СнятоСУчета Тогда
		
			Если ЗначениеЗаполнено(СведенияОбУчете.ДатаВводаВЭксплуатациюУУ) 
					И ЗначениеЗаполнено(СведенияОбУчете.ДатаВводаВЭксплуатациюБУ)
					И СведенияОбУчете.ДатаВводаВЭксплуатациюУУ = СведенияОбУчете.ДатаВводаВЭксплуатациюБУ
				ИЛИ ЗначениеЗаполнено(СведенияОбУчете.ДатаВводаВЭксплуатациюУУ) 
					И НЕ ДоступенВыборОтраженияВУчетах Тогда
				
				СведенияПринятКУчету1.Добавить(НСтр("ru = 'Дата принятия к учету:'"));
				СведенияПринятКУчету1.Добавить(" ");
				ДатаДокумента = Формат(СведенияОбУчете.ДатаВводаВЭксплуатациюУУ, "ДЛФ=D");
				Если ЗначениеЗаполнено(СведенияОбУчете.ДокументВводаВЭксплуатациюУУ) Тогда
					СсылкаНаОбъект = ПолучитьНавигационнуюСсылку(СведенияОбУчете.ДокументВводаВЭксплуатациюУУ);
				Иначе
					СсылкаНаОбъект = Неопределено;
				КонецЕсли;
				СведенияПринятКУчету1.Добавить(Новый ФорматированнаяСтрока(ДатаДокумента,,,, СсылкаНаОбъект));
				
			Иначе
				
				Если ДоступенВыборОтраженияВУчетах
					И (СведенияОбУчете.СостояниеУУ <> Перечисления.СостоянияОС.СнятоСУчета 
						ИЛИ ЗначениеЗаполнено(СведенияОбУчете.ДатаВводаВЭксплуатациюБУ)) Тогда
						
					СведенияПринятКУчету1.Добавить(НСтр("ru = 'Дата принятия в регл. учете:'"));
					СведенияПринятКУчету1.Добавить(" ");
					Если ЗначениеЗаполнено(СведенияОбУчете.ДатаВводаВЭксплуатациюБУ) Тогда
						ДатаДокумента = Формат(СведенияОбУчете.ДатаВводаВЭксплуатациюБУ, "ДЛФ=D");
						Если ЗначениеЗаполнено(СведенияОбУчете.ДокументВводаВЭксплуатациюБУ) Тогда
							СсылкаНаОбъект = ПолучитьНавигационнуюСсылку(СведенияОбУчете.ДокументВводаВЭксплуатациюБУ);
						Иначе
							СсылкаНаОбъект = Неопределено;
						КонецЕсли;
						СведенияПринятКУчету1.Добавить(Новый ФорматированнаяСтрока(ДатаДокумента,,,, СсылкаНаОбъект));
					Иначе	
						СведенияПринятКУчету1.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'принять к учету'"),,,, "#Создать"));
					КонецЕсли; 
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СведенияОбУчете.ДатаВводаВЭксплуатациюУУ)
					ИЛИ СведенияОбУчете.ДокументВводаВЭксплуатациюБУ <> Тип("ДокументСсылка.ПоступлениеАрендованныхОС")
						И СведенияОбУчете.СостояниеБУ <> Перечисления.СостоянияОС.СнятоСУчета Тогда
					
					СведенияПринятКУчету2.Добавить(НСтр("ru = 'Дата принятия в упр. учете:'"));
					СведенияПринятКУчету2.Добавить(" ");
					Если ЗначениеЗаполнено(СведенияОбУчете.ДатаВводаВЭксплуатациюУУ) Тогда
						ДатаДокумента = Формат(СведенияОбУчете.ДатаВводаВЭксплуатациюУУ, "ДЛФ=D");
						Если ЗначениеЗаполнено(СведенияОбУчете.ДокументВводаВЭксплуатациюУУ) Тогда
							СсылкаНаОбъект = ПолучитьНавигационнуюСсылку(СведенияОбУчете.ДокументВводаВЭксплуатациюУУ);
						Иначе
							СсылкаНаОбъект = Неопределено;
						КонецЕсли;
						СведенияПринятКУчету2.Добавить(Новый ФорматированнаяСтрока(ДатаДокумента,,,, СсылкаНаОбъект));
					Иначе
						СведенияПринятКУчету2.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'принять к учету'"),,,, "#Создать"));
					КонецЕсли; 
				КонецЕсли; 
				
			КонецЕсли;
			
			СрокИспользованияУУ = ВнеоборотныеАктивы.РасшифровкаСрокаПолезногоИспользования(СведенияОбУчете.СрокИспользованияУУ);
			СрокИспользованияБУ = ВнеоборотныеАктивы.РасшифровкаСрокаПолезногоИспользования(СведенияОбУчете.СрокИспользованияБУ);
			СрокИспользованияНУ = ВнеоборотныеАктивы.РасшифровкаСрокаПолезногоИспользования(СведенияОбУчете.СрокИспользованияНУ);
			
			Если СведенияОбУчете.СрокИспользованияБУ = СведенияОбУчете.СрокИспользованияНУ
					И СведенияОбУчете.СрокИспользованияБУ = СведенияОбУчете.СрокИспользованияУУ 
					И СведенияОбУчете.СрокИспользованияУУ <> 0
				ИЛИ СведенияОбУчете.СрокИспользованияУУ <> 0
					И СведенияОбУчете.СрокИспользованияБУ = 0
					И СведенияОбУчете.СрокИспользованияБУ = 0 Тогда
				
				СведенияСрокИспользования1.Добавить(СтрШаблон(НСтр("ru = 'Срок использования: %1'"), СрокИспользованияУУ));
				
			ИначеЕсли СведенияОбУчете.СрокИспользованияБУ <> 0
				И СведенияОбУчете.СрокИспользованияУУ = 0
				И (СведенияОбУчете.СрокИспользованияНУ = 0
					ИЛИ СведенияОбУчете.СрокИспользованияНУ = СведенияОбУчете.СрокИспользованияБУ) Тогда
					
				СведенияСрокИспользования1.Добавить(СтрШаблон(НСтр("ru = 'Срок использования: %1'"), СрокИспользованияБУ));
				
			ИначеЕсли СведенияОбУчете.СрокИспользованияНУ <> 0
				И СведенияОбУчете.СрокИспользованияУУ = 0
				И (СведенияОбУчете.СрокИспользованияБУ = 0
					ИЛИ СведенияОбУчете.СрокИспользованияБУ = СведенияОбУчете.СрокИспользованияНУ) Тогда				
					
				СведенияСрокИспользования1.Добавить(СтрШаблон(НСтр("ru = 'Срок использования: %1'"), СрокИспользованияНУ));
				
			Иначе
				
				Если СведенияОбУчете.СрокИспользованияБУ <> 0 Тогда
					СведенияСрокИспользования1.Добавить(СтрШаблон(НСтр("ru = 'Срок использования (БУ):  %1'"), СрокИспользованияБУ));
				КонецЕсли;
				Если СведенияОбУчете.СрокИспользованияНУ <> 0 Тогда
					СведенияСрокИспользования2.Добавить(СтрШаблон(НСтр("ru = 'Срок использования (НУ):  %1'"), СрокИспользованияНУ));
				КонецЕсли;
				Если СведенияОбУчете.СрокИспользованияУУ <> 0 Тогда
					СведенияСрокИспользования3.Добавить(СтрШаблон(НСтр("ru = 'Срок использования (УУ):  %1'"), СрокИспользованияУУ));
				КонецЕсли;
				
			КонецЕсли;
				
			//
			Если СведенияОбУчете.СостояниеУУ = Перечисления.СостоянияОС.СнятоСУчета
				ИЛИ СведенияОбУчете.СостояниеБУ = Перечисления.СостоянияОС.СнятоСУчета Тогда
				СведенияСнятСУчета.Добавить(НСтр("ru = 'Дата снятия с учета:'"));
				СведенияСнятСУчета.Добавить(" ");
				ДатаДокумента = Формат(СведенияОбУчете.ДатаСнятияСУчета, "ДЛФ=D");
				Если ЗначениеЗаполнено(СведенияОбУчете.ДокументСнятияСУчета) Тогда
					СсылкаНаОбъект = ПолучитьНавигационнуюСсылку(СведенияОбУчете.ДокументСнятияСУчета);
					СведенияСнятСУчета.Добавить(Новый ФорматированнаяСтрока(ДатаДокумента,,,, СсылкаНаОбъект));
				Иначе
					СведенияСнятСУчета.Добавить(ДатаДокумента);
				КонецЕсли;
			КонецЕсли; 
			
			СведенияГФУ.Добавить(НСтр("ru = 'Группа финансового учета:'"));
			СведенияГФУ.Добавить(" ");
			Если ЗначениеЗаполнено(СведенияОбУчете.ГруппаФинансовогоУчета) Тогда
				СсылкаНаОбъект = ПолучитьНавигационнуюСсылку(СведенияОбУчете.ГруппаФинансовогоУчета);
			Иначе
				СсылкаНаОбъект = Неопределено;
			КонецЕсли;
			СведенияГФУ.Добавить(Новый ФорматированнаяСтрока(СведенияОбУчете.ГруппаФинансовогоУчетаПредставление,,,, СсылкаНаОбъект));
		
		ИначеЕсли СведенияОбУчете.СостояниеБУ = Перечисления.СостоянияОС.ПринятоКЗабалансовомуУчету
			ИЛИ СведенияОбУчете.СостояниеУУ = Перечисления.СостоянияОС.ПринятоКЗабалансовомуУчету Тогда
			
			СведенияПринятКУчету1.Добавить(НСтр("ru = 'Дата принятия к забалансовому учету:'"));
			СведенияПринятКУчету1.Добавить(" ");
			ДатаДокумента = Формат(СведенияОбУчете.ДатаВводаВЭксплуатациюБУ, "ДЛФ=D");
			Если ЗначениеЗаполнено(СведенияОбУчете.ДокументВводаВЭксплуатациюБУ) Тогда
				СсылкаНаОбъект = ПолучитьНавигационнуюСсылку(СведенияОбУчете.ДокументВводаВЭксплуатациюБУ);
			Иначе
				СсылкаНаОбъект = Неопределено;
			КонецЕсли;
			СведенияПринятКУчету1.Добавить(Новый ФорматированнаяСтрока(ДатаДокумента,,,, СсылкаНаОбъект));
			
		КонецЕсли; 
		
	Иначе
		СведенияПринятКУчету1.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Принять к учету'"),,,, "#Создать"));
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Местонахождение
	
	Если СведенияОбУчете <> Неопределено Тогда
		
		Период = СведенияОбУчете.ПериодСведенийОМестонахождении; 
		
		СведенияМестонахождениеОрганизация.Добавить(СтрШаблон(НСтр("ru = 'Организация: %1'"), СведенияОбУчете.ОрганизацияПредставление));
		СведенияМестонахождениеПодразделение.Добавить(СтрШаблон(НСтр("ru = 'Подразделение: %1'"), СведенияОбУчете.ПодразделениеПредставление));
		
		СведенияМестонахождениеМОЛ.Добавить(НСтр("ru = 'МОЛ:'"));
		СведенияМестонахождениеМОЛ.Добавить(" ");
		Если ЗначениеЗаполнено(СведенияОбУчете.МОЛ) Тогда
			СсылкаНаОбъект = ПолучитьНавигационнуюСсылку(СведенияОбУчете.МОЛ);
			СведенияМестонахождениеМОЛ.Добавить(Новый ФорматированнаяСтрока(СведенияОбУчете.МОЛПредставление,,,, СсылкаНаОбъект));
		ИначеЕсли ВключитьНезаполненные Тогда
			СведенияМестонахождениеМОЛ.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'не указан'"),, ЦветаСтиля.НезаполненноеПолеТаблицы));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СведенияОбУчете.АдресМестонахождения) Тогда
			СведенияМестонахождениеАдрес.Добавить(НСтр("ru = 'Адрес:'"));
			СведенияМестонахождениеАдрес.Добавить(" ");
			СведенияМестонахождениеАдрес.Добавить(СведенияОбУчете.АдресМестонахождения);
			СведенияМестонахождениеАдрес.Добавить(" ");
			СведенияМестонахождениеАдрес.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.ПоказатьНаКарте,,,, СведенияОбУчете.АдресМестонахождения));
		ИначеЕсли ВключитьНезаполненные Тогда
			СведенияМестонахождениеАдрес.Добавить(НСтр("ru = 'Адрес:'"));
			СведенияМестонахождениеАдрес.Добавить(" ");
			СведенияМестонахождениеАдрес.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'не указан'"),, ЦветаСтиля.НезаполненноеПолеТаблицы));
		КонецЕсли; 
		
	КонецЕсли; 
	
	#КонецОбласти
	
	ПредставлениеСведений = Новый Структура;
	ПредставлениеСведений.Вставить("Период", Период);
	ПредставлениеСведений.Вставить("СведенияПринятКУчету1", СведенияПринятКУчету1);
	ПредставлениеСведений.Вставить("СведенияПринятКУчету2", СведенияПринятКУчету2);
	ПредставлениеСведений.Вставить("СведенияСрокИспользования1", СведенияСрокИспользования1);
	ПредставлениеСведений.Вставить("СведенияСрокИспользования2", СведенияСрокИспользования2);
	ПредставлениеСведений.Вставить("СведенияСрокИспользования3", СведенияСрокИспользования3);
	ПредставлениеСведений.Вставить("СведенияСнятСУчета", СведенияСнятСУчета);
	ПредставлениеСведений.Вставить("СведенияГФУ", СведенияГФУ);
	ПредставлениеСведений.Вставить("СведенияМестонахождениеОрганизация", СведенияМестонахождениеОрганизация);
	ПредставлениеСведений.Вставить("СведенияМестонахождениеПодразделение", СведенияМестонахождениеПодразделение);
	ПредставлениеСведений.Вставить("СведенияМестонахождениеМОЛ", СведенияМестонахождениеМОЛ);
	ПредставлениеСведений.Вставить("СведенияМестонахождениеАдрес", СведенияМестонахождениеАдрес);
	
	Возврат ПредставлениеСведений;

КонецФункции
 
// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП
//
// Возвращаемое значение:
// 		Массив - имена блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("ГруппаОС");
	Результат.Добавить("АмортизационнаяГруппа");
	Результат.Добавить("НаправлениеДеятельности");
	Результат.Добавить("ШифрПоЕНАОФ");
	Результат.Добавить("КодПоОКОФ");
	Результат.Добавить("ГруппаОСМеждународныйУчет");
	Результат.Добавить("НедвижимоеИмущество");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаВыбора" 
		И ВнеоборотныеАктивыВызовСервера.ДоступенВыборОбъектовЭксплуатации2_4(Параметры) Тогда
		
		// В концепции 2.4 своя форма выбора
		ВыбраннаяФорма = "ФормаВыбора2_4";
		СтандартнаяОбработка = Ложь;
		Возврат;

	КонецЕсли;
	
	Если ВидФормы = "ФормаВыбора" Тогда
		
		Если Не Параметры.Свойство("Отбор") Тогда
			Параметры.Вставить("Отбор", Новый Структура);
		КонецЕсли;
		
		//++ НЕ УТКА
		ВнеоборотныеАктивыВызовСервера.ЗаполнитьОтборыОСМФУ(Параметры);
		//-- НЕ УТКА
		
		Если Параметры.Отбор.Свойство("ГруппаОС") Тогда
			Параметры.Отбор.Вставить("БУГруппаОС", Параметры.Отбор.ГруппаОС);
		ИначеЕсли Параметры.Свойство("БУГруппаОС") Тогда
			Параметры.Отбор.Вставить("ГруппаОС", Параметры.Отбор.БУГруппаОС);
		КонецЕсли;
		Если Параметры.Отбор.Свойство("АмортизационнаяГруппа") Тогда
			Параметры.Отбор.Вставить("БУАмортизационнаяГруппа", Параметры.Отбор.АмортизационнаяГруппа);
		ИначеЕсли Параметры.Свойство("БУАмортизационнаяГруппа") Тогда
			Параметры.Отбор.Вставить("АмортизационнаяГруппа", Параметры.Отбор.БУАмортизационнаяГруппа);
		КонецЕсли;
		
		Если Параметры.Свойство("ДоговорЛизинга") И ЗначениеЗаполнено(Параметры.ДоговорЛизинга) Тогда
			Параметры.Отбор.Вставить("НаправлениеДеятельности", ВнеоборотныеАктивыВызовСервера.НаправлениеДеятельности(Параметры.ДоговорЛизинга));
		КонецЕсли;
		
		Если Параметры.Свойство("ВариантПримененияЦелевогоФинансирования")
			И Параметры.ВариантПримененияЦелевогоФинансирования = ПредопределенноеЗначение("Перечисление.ВариантыПримененияЦелевогоФинансирования.НеИспользуется") Тогда
			Параметры.Отбор.Удалить("НаправлениеДеятельности");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ДанныеВыбора = ВнеоборотныеАктивыВызовСервера.ДанныеВыбораОбъектовЭксплуатации(Параметры, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Функция ОписаниеЗапросаДляВыбора(Параметры, УстановитьВсеОтборы = Ложь) Экспорт

	Если Параметры.Свойство("Контекст") Тогда
		ДоступныеКонтексты = Новый Структура(Параметры.Контекст);
	Иначе
		ДоступныеКонтексты = Новый Структура("БУ,УУ"); // По умолчанию доступны все контексты.
	КонецЕсли;
	
	ОтборСписка = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Отбор", Новый Структура);
	
	Если ОтборСписка.Свойство("ОтражатьВРеглУчете")
		И НЕ ОтборСписка.ОтражатьВРеглУчете
		И ДоступныеКонтексты.Свойство("БУ") Тогда
		ДоступныеКонтексты.Удалить("БУ"); // Доступен выбор отражения в учете и в регл. учете нет отражения.
	КонецЕсли; 
	
	Если ОтборСписка.Свойство("ОтражатьВУпрУчете")
		И НЕ ОтборСписка.ОтражатьВУпрУчете
		И ДоступныеКонтексты.Свойство("УУ") Тогда
		ДоступныеКонтексты.Удалить("УУ"); // Доступен выбор отражения в учете и в упр. учете нет отражения.
	КонецЕсли; 
	
	Если ОтборСписка.Свойство("АмортизационнаяГруппа") Тогда
		Если ЗначениеЗаполнено(ОтборСписка.АмортизационнаяГруппа) Тогда
			СписокВыбора = Новый Массив;
			СписокВыбора.Добавить(ОтборСписка.АмортизационнаяГруппа);
			СписокВыбора.Добавить(Перечисления.АмортизационныеГруппы.ПустаяСсылка());
			ОтборСписка.Вставить("АмортизационнаяГруппа", СписокВыбора);
		Иначе
			ОтборСписка.Удалить("АмортизационнаяГруппа");
		КонецЕсли; 
	КонецЕсли; 
	
	Если ОтборСписка.Свойство("ГруппаОС") Тогда
		Если ЗначениеЗаполнено(ОтборСписка.ГруппаОС) Тогда
			СписокВыбора = Новый Массив;
			СписокВыбора.Добавить(ОтборСписка.ГруппаОС);
			СписокВыбора.Добавить(Перечисления.ГруппыОС.ПустаяСсылка());
			ОтборСписка.Вставить("ГруппаОС", СписокВыбора);
		Иначе
			ОтборСписка.Удалить("ГруппаОС");
		КонецЕсли; 
	КонецЕсли; 
	
	Если Параметры.Свойство("ВариантПримененияЦелевогоФинансирования")
		И Параметры.ВариантПримененияЦелевогоФинансирования = Перечисления.ВариантыПримененияЦелевогоФинансирования.НеИспользуется Тогда
		ОтборСписка.Удалить("НаправлениеДеятельности");
	КонецЕсли;
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестонахождениеОС) Тогда
		ОтборСписка.Удалить("Подразделение");
		ОтборСписка.Удалить("Организация");
		ОтборСписка.Удалить("МОЛ");
	КонецЕсли;
	
	ДополнительныеПоля = "";
	ТекстСоединения = "";
	ТекстОтборы = "";
	ПараметрыЗапроса = Новый Структура;
	ДоступныеПоля = Новый Массив;
	
	Если (ДоступныеКонтексты.Свойство("БУ") ИЛИ ДоступныеКонтексты.Свойство("УУ"))
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестонахождениеОС) Тогда
		
		ПолеОрганизация = "ЕСТЬNULL(МестонахождениеОС.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))";
		ПолеМОЛ = "ЕСТЬNULL(МестонахождениеОС.МОЛ, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))";
		ПолеПодразделение = "ЕСТЬNULL(МестонахождениеОС.Местонахождение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))";
		ПолеАдресМестонахождения = "ЕСТЬNULL(МестонахождениеОС.АдресМестонахождения, """""""")";
		
		ТекстСоединения = ТекстСоединения + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОС.СрезПоследних(//ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ//) КАК МестонахождениеОС
		|		ПО СправочникОбъектыЭксплуатации.Ссылка = МестонахождениеОС.ОсновноеСредство";
		
	Иначе
		
		ПолеОрганизация = "ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
		ПолеМОЛ = "ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)";
		ПолеПодразделение = "ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)";
		ПолеАдресМестонахождения = """""";
		
	КонецЕсли;
	
	Если (ДоступныеКонтексты.Свойство("БУ") ИЛИ ДоступныеКонтексты.Свойство("УУ"))
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОС) Тогда
		
		ПолеГФУ = "ЕСТЬNULL(ПорядокУчетаОС.ГруппаФинансовогоУчета, ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаВнеоборотныхАктивов.ПустаяСсылка))";
		
		ТекстСоединения = ТекстСоединения + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОС.СрезПоследних(//ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ//) КАК ПорядокУчетаОС
		|		ПО СправочникОбъектыЭксплуатации.Ссылка = ПорядокУчетаОС.ОсновноеСредство";
		
	Иначе
		
		ПолеГФУ = "ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаВнеоборотныхАктивов.ПустаяСсылка)";
		
	КонецЕсли;
	
	ДополнительныеПоля = ДополнительныеПоля + "
		|,%1 КАК Организация
		|,%2 КАК МОЛ
		|,%3 КАК Подразделение
		|,%4 КАК АдресМестонахождения
		|,%5 КАК ГруппаФинансовогоУчета";
	
	ДополнительныеПоля = СтрШаблон(ДополнительныеПоля, ПолеОрганизация, ПолеМОЛ, ПолеПодразделение, ПолеАдресМестонахождения, ПолеГФУ);
	
	Если ДоступныеКонтексты.Свойство("БУ") 
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОСБУ) Тогда
		
		ДоступныеПоля.Добавить("СостояниеБУ");
		ДополнительныеПоля = ДополнительныеПоля + "
			|,ЕСТЬNULL(ПорядокУчетаОСБУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) КАК СостояниеБУ";
		
		ТекстСоединения = ТекстСоединения + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСБУ.СрезПоследних(//ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ//) КАК ПорядокУчетаОСБУ
		|		ПО СправочникОбъектыЭксплуатации.Ссылка = ПорядокУчетаОСБУ.ОсновноеСредство
		|			И ПорядокУчетаОСБУ.Организация = МестонахождениеОС.Организация";
		
	Иначе
		
		ДополнительныеПоля = ДополнительныеПоля + ",ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету) КАК СостояниеБУ";
		
	КонецЕсли; 
	
	Если ДоступныеКонтексты.Свойство("УУ")
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОСУУ) Тогда
		
		ДополнительныеПоля = ДополнительныеПоля + "
			|,ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) КАК СостояниеУУ";
		
		ТекстСоединения = ТекстСоединения + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ.СрезПоследних(//ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ//) КАК ПорядокУчетаОСУУ
		|		ПО СправочникОбъектыЭксплуатации.Ссылка = ПорядокУчетаОСУУ.ОсновноеСредство
		|			И ПорядокУчетаОСУУ.Организация = МестонахождениеОС.Организация";
		
		
	Иначе
		
		ДополнительныеПоля = ДополнительныеПоля + ",ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету) КАК СостояниеУУ";
		
	КонецЕсли;
	
	ПараметрыСрезаПоследних = "";
	Если Параметры.Свойство("ДатаСведений") Тогда
		ПараметрыСрезаПоследних = "&ДатаСведений";
		ПараметрыЗапроса.Вставить("ДатаСведений", КонецДня(Параметры.ДатаСведений));
	КонецЕсли; 
	Если Параметры.Свойство("ТекущийРегистратор") Тогда
		ПараметрыСрезаПоследних = ПараметрыСрезаПоследних 
			+ ",Регистратор <> &ТекущийРегистратор";
		ПараметрыЗапроса.Вставить("ТекущийРегистратор", Параметры.ТекущийРегистратор);
	КонецЕсли; 
	ТекстСоединения = СтрЗаменить(ТекстСоединения, "//ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ//", ПараметрыСрезаПоследних);
	
	ДоступенВыборУчета = ОтборСписка.Свойство("ОтражатьВРеглУчете") ИЛИ ОтборСписка.Свойство("ОтражатьВУпрУчете");
	
	Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОСУУ) 
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОСБУ) Тогда
		
		Если ОтборСписка.Свойство("Состояние") Тогда
				
			Если ДоступныеКонтексты.Свойство("БУ") И ДоступныеКонтексты.Свойство("УУ") Тогда
				Если ДоступенВыборУчета Тогда
					ТекстОтборы = "
					|	ЕСТЬNULL(ПорядокУчетаОСБУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) В(&Состояние)
					|	И ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) В(&Состояние)";
				Иначе
					ТекстОтборы = "
					|	(ЕСТЬNULL(ПорядокУчетаОСБУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) В(&Состояние)
					|		ИЛИ ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) В(&Состояние))";
				КонецЕсли; 
			ИначеЕсли ДоступныеКонтексты.Свойство("БУ") Тогда
				ТекстОтборы = "
				|	ЕСТЬNULL(ПорядокУчетаОСБУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) В(&Состояние)";
			ИначеЕсли ДоступныеКонтексты.Свойство("УУ") Тогда
				ТекстОтборы = "
				|	ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) В(&Состояние)";
			КонецЕсли;
			Если ТипЗнч(ОтборСписка.Состояние) = Тип("ФиксированныйМассив") Тогда
				ПараметрыЗапроса.Вставить("Состояние", Новый Массив(ОтборСписка.Состояние));
			Иначе
				ПараметрыЗапроса.Вставить("Состояние", ОтборСписка.Состояние);
			КонецЕсли;
			Параметры.Отбор.Удалить("Состояние");
			
		Иначе
			
			Если ДоступныеКонтексты.Свойство("БУ") И ДоступныеКонтексты.Свойство("УУ") Тогда
				ТекстОтборы = "
				|	(ЕСТЬNULL(ПорядокУчетаОСБУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) = &Состояние
				|		ИЛИ ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) = &Состояние
				|		ИЛИ &Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПустаяСсылка))";
			ИначеЕсли ДоступныеКонтексты.Свойство("БУ") Тогда
				ТекстОтборы = "
				|	(ЕСТЬNULL(ПорядокУчетаОСБУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) = &Состояние
				|		ИЛИ &Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПустаяСсылка))";
			ИначеЕсли ДоступныеКонтексты.Свойство("УУ") Тогда
				ТекстОтборы = "
				|	(ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) = &Состояние
				|		ИЛИ &Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПустаяСсылка))";
			КонецЕсли;
			Если ТекстОтборы <> "" Тогда
				ПараметрыЗапроса.Вставить("Состояние", Перечисления.СостоянияОС.ПустаяСсылка());
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли; 
	
	Если ОтборСписка.Свойство("ВидНалога") Тогда
		ТекстОтборы = ТекстОтборы 
			+ Символы.ПС 
			+ ?(ТекстОтборы <> "", "И ","")
			+ ВнеоборотныеАктивыЛокализация.УсловияОтбораПоВидуНалога("СправочникОбъектыЭксплуатации"); 
		ПараметрыЗапроса.Вставить("ВидНалога", ОтборСписка.ВидНалога);
	КонецЕсли; 
	
	Если УстановитьВсеОтборы Тогда
		
		Для каждого КлючИЗначение Из ОтборСписка Цикл
			
			Если НЕ ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			Если КлючИЗначение.Ключ = "Организация" Тогда
				ПутьКПолю = ПолеОрганизация;
			ИначеЕсли КлючИЗначение.Ключ = "Подразделение" Тогда
				ПутьКПолю = ПолеПодразделение;
			ИначеЕсли КлючИЗначение.Ключ = "МОЛ" Тогда
				ПутьКПолю = ПолеМОЛ;
			ИначеЕсли КлючИЗначение.Ключ = "АмортизационнаяГруппа"
				ИЛИ КлючИЗначение.Ключ = "ГруппаОС"
				ИЛИ КлючИЗначение.Ключ = "НаправлениеДеятельности" Тогда
				
				ПутьКПолю = "СправочникОбъектыЭксплуатации." + КлючИЗначение.Ключ;
			Иначе
				Продолжить;
			КонецЕсли;
			
			ЭтоМассив = ТипЗнч(КлючИЗначение.Значение) = Тип("ФиксированныйМассив") 
						ИЛИ ТипЗнч(КлючИЗначение.Значение) = Тип("Массив");
						
			ТекстОтборы = ТекстОтборы 
							+ Символы.ПС 
							+ ?(ТекстОтборы <> "", "И ","")
							+ ПутьКПолю 
							+ ?(ЭтоМассив, " В (&" + КлючИЗначение.Ключ + ")", " = &" + КлючИЗначение.Ключ);
							
			ПараметрыЗапроса.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла; 
		
	КонецЕсли; 
	
	ТекстПервые = "";
	Если Параметры.Свойство("СтрокаПоиска") Тогда
		ТекстОтборы = ТекстОтборы + "
		|" + ?(ТекстОтборы <> "", "И ","")
		+ "СправочникОбъектыЭксплуатации.Наименование ПОДОБНО &СтрокаПоиска
			|	И НЕ СправочникОбъектыЭксплуатации.ЭтоГруппа
			|	И НЕ СправочникОбъектыЭксплуатации.ПометкаУдаления";
		ТекстПервые = "РАЗРЕШЕННЫЕ ПЕРВЫЕ 10";
		ПараметрыЗапроса.Вставить("СтрокаПоиска", "%" + Параметры.СтрокаПоиска + "%");
	КонецЕсли;
	
	Если ТекстОтборы <> "" Тогда
		ТекстОтборы = "
		|ГДЕ
		|" + ТекстОтборы;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ //ПЕРВЫЕ//
	|	СправочникОбъектыЭксплуатации.Ссылка,
	|	СправочникОбъектыЭксплуатации.ПометкаУдаления,
	|	СправочникОбъектыЭксплуатации.Родитель,
	|	СправочникОбъектыЭксплуатации.ЭтоГруппа,
	|	СправочникОбъектыЭксплуатации.Код,
	|	СправочникОбъектыЭксплуатации.Наименование,
	|	СправочникОбъектыЭксплуатации.ИнвентарныйНомер,
	|	СправочникОбъектыЭксплуатации.ГруппаОС,
	|	СправочникОбъектыЭксплуатации.ГруппаОСМеждународныйУчет,
	|	СправочникОбъектыЭксплуатации.КодПоОКОФ,
	|	СправочникОбъектыЭксплуатации.ШифрПоЕНАОФ,
	|	СправочникОбъектыЭксплуатации.ДатаВыпуска,
	|	СправочникОбъектыЭксплуатации.ЗаводскойНомер,
	|	СправочникОбъектыЭксплуатации.Изготовитель,
	|	СправочникОбъектыЭксплуатации.Класс,
	|	СправочникОбъектыЭксплуатации.Модель,
	|	СправочникОбъектыЭксплуатации.НаименованиеПолное,
	|	СправочникОбъектыЭксплуатации.НомерПаспорта,
	|	СправочникОбъектыЭксплуатации.ОбъектБытовогоНазначения,
	|	СправочникОбъектыЭксплуатации.Подкласс,
	|	СправочникОбъектыЭксплуатации.Расположение,
	|	СправочникОбъектыЭксплуатации.РемонтирующееПодразделение,
	|	СправочникОбъектыЭксплуатации.СерийныйНомер,
	|	СправочникОбъектыЭксплуатации.Статус,
	|	СправочникОбъектыЭксплуатации.НаправлениеДеятельности,
	|	СправочникОбъектыЭксплуатации.АмортизационнаяГруппа,
	|	СправочникОбъектыЭксплуатации.НедвижимоеИмущество,
	|	СправочникОбъектыЭксплуатации.Комментарий
	|	//ДОПОЛНИТЕЛЬНЫЕ_ПОЛЯ//
	|ИЗ
	|	Справочник.ОбъектыЭксплуатации КАК СправочникОбъектыЭксплуатации
	|	//СОЕДИНЕНИЯ//
	|	//ОТБОРЫ//";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДОПОЛНИТЕЛЬНЫЕ_ПОЛЯ//", ДополнительныеПоля);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//СОЕДИНЕНИЯ//", ТекстСоединения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ОТБОРЫ//", ТекстОтборы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ПЕРВЫЕ//", ТекстПервые);

	Возврат Новый Структура("ТекстЗапроса,ПараметрыЗапроса,ДоступныеПоля", ТекстЗапроса, ПараметрыЗапроса, ДоступныеПоля);
	
КонецФункции

//++ НЕ УТКА

#Область ПроверкаЗаполненияОбъектовЭксплуатации

Процедура СформироватьЗапросПроверкиЗаполнения(ТекстЗапроса)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ОбъектыЭксплуатации.*
		|ИЗ
		|	Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
		|ГДЕ
		|	ОбъектыЭксплуатации.Ссылка В (&ОбъектыЭксплуатации)";
	
КонецПроцедуры

Процедура СформироватьЗапросПроверкиЗаполненияУзлов(ТекстЗапроса)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	УзлыОбъектовЭксплуатации.*
		|ИЗ
		|	Справочник.УзлыОбъектовЭксплуатации КАК УзлыОбъектовЭксплуатации
		|ГДЕ
		|	УзлыОбъектовЭксплуатации.Владелец В(&ОбъектыЭксплуатации)
		|	И УзлыОбъектовЭксплуатации.Владелец <> ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка)
		|	И НЕ УзлыОбъектовЭксплуатации.ПометкаУдаления
		|	И УзлыОбъектовЭксплуатации.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовЭксплуатации.ВЭксплуатации), ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовЭксплуатации.ПустаяСсылка))";
	
КонецПроцедуры

Функция ПолучитьОбязательныеРеквизиты(Класс, КэшированныеЗначения)
	
	ОбязательныеРеквизиты = КэшированныеЗначения.ОбязательныеРеквизиты.Получить(Класс);
	
	Если ОбязательныеРеквизиты = Неопределено Тогда
		
		Запрос = Новый Запрос;
		
		Если ЗначениеЗаполнено(Класс) Тогда
			Запрос.Текст =
				"ВЫБРАТЬ
				|	РеквизитыДляКонтроляОбъектов.Имя,
				|	РеквизитыДляКонтроляОбъектов.Синоним
				|ИЗ
				|	Справочник.КлассыОбъектовЭксплуатации.РеквизитыДляКонтроля КАК Реквизиты
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РеквизитыОбъектов КАК РеквизитыДляКонтроляОбъектов
				|		ПО Реквизиты.ИмяРеквизита = РеквизитыДляКонтроляОбъектов.Имя
				|ГДЕ
				|	Реквизиты.Ссылка = &Класс
				|	И Реквизиты.ОбязателенДляЗаполнения";
		Иначе
			Запрос.Текст =
				"ВЫБРАТЬ
				|	Реквизиты.Имя,
				|	Реквизиты.Синоним
				|ИЗ
				|	РеквизитыОбъектов КАК Реквизиты
				|ГДЕ
				|	Реквизиты.ОбязателенДляЗаполнения";
			
		КонецЕсли;
		Запрос.МенеджерВременныхТаблиц = КэшированныеЗначения.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Класс", Класс);
		
		ОбязательныеРеквизиты = Запрос.Выполнить().Выгрузить();
		
		КэшированныеЗначения.ОбязательныеРеквизиты.Вставить(Класс, ОбязательныеРеквизиты);
		
	КонецЕсли;
	
	Возврат ОбязательныеРеквизиты;
	
КонецФункции

Функция ПолучитьОбязательныеДопРеквизиты(Класс, КэшированныеЗначения)
	
	ОбязательныеДопРеквизиты = КэшированныеЗначения.ОбязательныеДопРеквизиты.Получить(Класс);
	
	Если ОбязательныеДопРеквизиты = Неопределено Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДопРеквизиты.Свойство
			|ИЗ
			|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДопРеквизиты
			|ГДЕ
			|	ДопРеквизиты.Ссылка = ВЫРАЗИТЬ(&Класс КАК Справочник.КлассыОбъектовЭксплуатации).НаборСвойств
			|	И (ДопРеквизиты.Свойство.ЗаполнятьОбязательно)
			|	И НЕ ДопРеквизиты.Свойство В
			|				(ВЫБРАТЬ
			|					ОбщиеДопРеквизитыОбъектов.Свойство
			|				ИЗ
			|					ОбщиеДопРеквизитыОбъектов КАК ОбщиеДопРеквизитыОбъектов)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДопРеквизиты.Свойство
			|ИЗ
			|	ОбщиеДопРеквизитыОбъектов КАК ДопРеквизиты
			|ГДЕ
			|	ДопРеквизиты.ЗаполнятьОбязательно");
		
		Запрос.МенеджерВременныхТаблиц = КэшированныеЗначения.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Класс", Класс);
		
		ОбязательныеДопРеквизиты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Свойство");
		
		КэшированныеЗначения.ОбязательныеДопРеквизиты.Вставить(Класс, ОбязательныеДопРеквизиты);
		
	КонецЕсли;
	
	Возврат ОбязательныеДопРеквизиты;
	
КонецФункции

Функция ПолучитьПараметрыУчетаНаработок(Класс, КэшированныеЗначения)
	
	ПараметрыУчетаНаработок = КэшированныеЗначения.ПараметрыУчетаНаработок.Получить(Класс);
	
	Если ПараметрыУчетаНаработок = Неопределено Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Параметры.ПоказательНаработки КАК ПоказательНаработки,
			|	Параметры.РассчитыватьОстаточныйРесурс КАК ЗаполнятьНазначенныйРесурс,
			|	Параметры.РегистрироватьОтИсточника КАК ЗаполнятьИсточник
			|ИЗ
			|	Справочник.КлассыОбъектовЭксплуатации.ПоказателиНаработки КАК Параметры
			|ГДЕ
			|	Параметры.Ссылка = &Класс
			|	И (Параметры.РегистрироватьОтИсточника
			|			ИЛИ Параметры.РассчитыватьОстаточныйРесурс)");
		Запрос.МенеджерВременныхТаблиц = КэшированныеЗначения.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Класс", Класс);
		
		ПараметрыУчетаНаработок = Запрос.Выполнить().Выгрузить();
		
		КэшированныеЗначения.ПараметрыУчетаНаработок.Вставить(Класс, ПараметрыУчетаНаработок);
		
	КонецЕсли;
	
	Возврат ПараметрыУчетаНаработок;
	
КонецФункции

Процедура ПроверитьОбъектЭксплуатации(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения)
	
	ПроверитьРеквизиты(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения);
	ПроверитьДопРеквизиты(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения);
	ПроверитьРабочиеЦентры(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения);
	ПроверитьПараметрыУчетаНаработок(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения);
	
КонецПроцедуры

Процедура ПроверитьРеквизиты(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения)
	
	ОбязательныеРеквизиты = ПолучитьОбязательныеРеквизиты(ОбъектПроверки.Класс, КэшированныеЗначения);
	
	Для Каждого Реквизит Из ОбязательныеРеквизиты Цикл
		
		Если Не ЗначениеЗаполнено(ОбъектПроверки[СокрЛП(Реквизит.Имя)]) Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Поле ""%1"" не заполнено.'"),
				СокрЛП(Реквизит.Синоним));
			
			ОбъектыЭксплуатации.ДобавитьОшибкуПользователю(
				ПараметрыПроверки.ПотокОшибок,
				ОбъектПроверки.Ссылка,
				"Объект."+Реквизит.Имя,
				ТекстОшибки,
				"Реквизиты",
				0,
				ТекстОшибки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьДопРеквизиты(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения)
	
	Если ПараметрыПроверки.Форма = Неопределено Тогда
		
		ОбязательныеДопРеквизиты = ПолучитьОбязательныеДопРеквизиты(ОбъектПроверки.Класс, КэшированныеЗначения);
		
		ТаблицаДопРеквизитов = ОбъектПроверки.ДополнительныеРеквизиты.Выгрузить();
		
		Для Каждого Свойство Из ОбязательныеДопРеквизиты Цикл
			
			Если ТаблицаДопРеквизитов.Найти(Свойство, "Свойство") = Неопределено Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Поле ""%1"" не заполнено.'"),
					Свойство);
				
				ОбъектыЭксплуатации.ДобавитьОшибкуПользователю(
					ПараметрыПроверки.ПотокОшибок,
					ОбъектПроверки.Ссылка,
					"ГруппаДополнительныеРеквизиты",
					ТекстОшибки,
					"ДопРеквизиты",
					0,
					ТекстОшибки);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Если Не (ПараметрыПроверки.Форма.Свойства_ИспользоватьСвойства И ПараметрыПроверки.Форма.Свойства_ИспользоватьДопРеквизиты) Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого Строка Из ПараметрыПроверки.Форма.Свойства_ОписаниеДополнительныхРеквизитов Цикл
			Если Строка.ЗаполнятьОбязательно Тогда
				
				Если НЕ ЗначениеЗаполнено(ПараметрыПроверки.Форма[Строка.ИмяРеквизитаЗначение]) Тогда
					
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Поле ""%1"" не заполнено.'"),
						Строка.Наименование);
					
					ОбъектыЭксплуатации.ДобавитьОшибкуПользователю(
						ПараметрыПроверки.ПотокОшибок,
						ОбъектПроверки.Ссылка,
						Строка.ИмяРеквизитаЗначение,
						ТекстОшибки,
						"ДопРеквизиты",
						0,
						ТекстОшибки);
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьРабочиеЦентры(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения)
	
	РабочиеЦентры = ОбъектПроверки.РабочиеЦентры.Выгрузить();
	Для ТекИндекс=0 По РабочиеЦентры.Количество()-1 Цикл
		
		Строка = РабочиеЦентры[ТекИндекс];
		
		Если Не ЗначениеЗаполнено(Строка["РабочийЦентр"]) Тогда
			
			ОбъектыЭксплуатации.ДобавитьОшибкуПользователю(
				ПараметрыПроверки.ПотокОшибок,
				ОбъектПроверки.Ссылка,
				"Объект.РабочиеЦентры[%1].РабочийЦентр",
				НСтр("ru = 'Не заполнено поле ""Рабочий центр""'"),
				"РабочиеЦентры",
				ТекИндекс,
				НСтр("ru = 'Не заполнена колонка ""Рабочий центр"" в строке %1 списка ""Рабочие центры""'"));
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьПараметрыУчетаНаработок(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения)
	
	Если ПараметрыПроверки.Форма = Неопределено Тогда
		
		ПараметрыУчетаНаработки = ПолучитьПараметрыУчетаНаработок(ОбъектПроверки.Класс, КэшированныеЗначения);
		
		ТаблицаПараметров = ОбъектПроверки.ПараметрыУчетаНаработок.Выгрузить();
		
		Для Каждого НастройкаПоказателя Из ПараметрыУчетаНаработки Цикл
			
			Строка = ТаблицаПараметров.Найти(НастройкаПоказателя.ПоказательНаработки, "ПоказательНаработки");
			
			Если Строка = Неопределено Или (НастройкаПоказателя.ЗаполнятьНазначенныйРесурс И Не ЗначениеЗаполнено(Строка.НазначенныйРесурс)) Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Назначенный ресурс показателя наработки ""%1"" не заполнен'"),
					НастройкаПоказателя.ПоказательНаработки);
				
				ОбъектыЭксплуатации.ДобавитьОшибкуПользователю(
					ПараметрыПроверки.ПотокОшибок,
					ОбъектПроверки.Ссылка,
					"ПараметрыУчетаНаработок",
					ТекстОшибки,
					"ПараметрыУчетаНаработок",
					0,
					ТекстОшибки);
				
			КонецЕсли;
			
			Если Строка = Неопределено Или (НастройкаПоказателя.ЗаполнятьИсточник И Не ЗначениеЗаполнено(Строка.Источник)) Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Источник текущих значений показателя наработки ""%1"" не заполнен'"),
					НастройкаПоказателя.ПоказательНаработки);
				
				ОбъектыЭксплуатации.ДобавитьОшибкуПользователю(
					ПараметрыПроверки.ПотокОшибок,
					ОбъектПроверки.Ссылка,
					"ПараметрыУчетаНаработок",
					ТекстОшибки,
					"ПараметрыУчетаНаработок",
					0,
					ТекстОшибки);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Если ПараметрыПроверки.Форма.ПараметрыУчетаНаработок.Количество()=0 Тогда
			Возврат;
		КонецЕсли;
		
		Для ТекИндекс=0 По ПараметрыПроверки.Форма.ПараметрыУчетаНаработок.Количество()-1 Цикл
			
			Строка = ПараметрыПроверки.Форма.ПараметрыУчетаНаработок[ТекИндекс];
			
			Если Строка.ЗаполнятьНазначенныйРесурс И Не ЗначениеЗаполнено(Строка.НазначенныйРесурс) Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Назначенный ресурс показателя наработки ""%1"" не заполнен'"),
					Строка.ПоказательНаработки);
				
				ОбъектыЭксплуатации.ДобавитьОшибкуПользователю(
					ПараметрыПроверки.ПотокОшибок,
					ОбъектПроверки.Ссылка,
					"ПараметрыУчетаНаработок[%1].НазначенныйРесурс",
					ТекстОшибки,
					"ПараметрыУчетаНаработок",
					ТекИндекс,
					ТекстОшибки);
				
			КонецЕсли;
			Если Строка.ЗаполнятьИсточник И Не ЗначениеЗаполнено(Строка.Источник) Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Источник текущих значений показателя наработки ""%1"" не заполнен'"),
					Строка.ПоказательНаработки);
				
				ОбъектыЭксплуатации.ДобавитьОшибкуПользователю(
					ПараметрыПроверки.ПотокОшибок,
					ОбъектПроверки.Ссылка,
					"ПараметрыУчетаНаработок[%1].Источник",
					ТекстОшибки,
					"ПараметрыУчетаНаработок",
					ТекИндекс,
					ТекстОшибки);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//-- НЕ УТКА

#Область ПодключаемыеКоманды

Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если ПравоДоступа("Изменение", Метаданные.Справочники.ОбъектыЭксплуатации)
		И ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ОС6";
		КомандаПечати.Представление = НСтр("ru = 'Инвентарная карточка ОС (ОС-6)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
		КомандаПечати.СписокФорм = "ФормаЭлемента,ФормаСпискаБУ";
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Команда = Документы.ПринятиеКУчетуОС.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаБУ";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.ПринятиеКУчетуОС2_4.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаБУ";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.ИзменениеСостоянияОС.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаБУ";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.ИзменениеПараметровОС.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаБУ";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.ИзменениеПараметровОС2_4.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаБУ";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.МодернизацияОС2_4.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаБУ";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.ПереоценкаОС2_4.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаБУ";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.ПеремещениеОС2_4.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаБУ";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.ПодготовкаКПередачеОС2_4.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаБУ";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.ПередачаОСАрендатору2_4.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаБУ";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.ВозвратОСОтАрендатора2_4.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаБУ";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.СписаниеОС.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаБУ";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.СписаниеОС2_4.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаБУ";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.РегистрацияНаработок.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСписка, ФормаСпискаБУ";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.РазукомплектацияОС.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаБУ";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	//++ НЕ УТКА
	Команда = Документы.ЗаказНаРемонт.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСписка";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.УстановкаЗначенийНаработки.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСписка";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.ПринятиеКУчетуОСМеждународныйУчет.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаМФУ";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.ПеремещениеОСМеждународныйУчет.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаМФУ";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.СписаниеОСМеждународныйУчет.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаМФУ";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	//-- НЕ УТКА
	
КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	//++ НЕ УТКА
	
	Команда = Отчеты.КарточкаОбъектаЭксплуатации.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСписка";
	КонецЕсли;
	
	Команда = Отчеты.КарточкаОСМеждународныйУчет.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаМФУ";
	КонецЕсли;
	
	Команда = Отчеты.СравнениеОС.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаМФУ";
	КонецЕсли;
	
	//-- НЕ УТКА
	Возврат; // В КА обработчик пустой
	
КонецПроцедуры

#КонецОбласти

#Область Печать

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОС6") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ОС6",
			НСтр("ru = 'Инвентарная карточка ОС (ОС-6)'"),
			ПечатьОС6_2003(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьОС6_2003(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОсновныеСредства_ОС6";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.ОбъектыЭксплуатации.ПФ_MXL_ОС6");
	
	Шапка = Макет.ПолучитьОбласть("Шапка");
	ШапкаРазделов1и2 = Макет.ПолучитьОбласть("ШапкаРазделов1и2");
	ШапкаРаздела3 = Макет.ПолучитьОбласть("ШапкаРаздела3");
	СтрокиРаздела3 = Макет.ПолучитьОбласть("СтрокиРаздела3");
	ШапкаРаздела4 = Макет.ПолучитьОбласть("ШапкаРаздела4");
	СтрокаРаздела4 = Макет.ПолучитьОбласть("СтрокаРаздела4");
	ПодвалСтраницы1 = Макет.ПолучитьОбласть("ПодвалСтраницы1");
	ШапкаРазделов5и6 = Макет.ПолучитьОбласть("ШапкаРазделов5и6");
	СтрокаРазделов5и6 = Макет.ПолучитьОбласть("СтрокаРазделов5и6");
	ШапкаРаздела7_1 = Макет.ПолучитьОбласть("ШапкаРаздела7_1");
	СтрокиРаздела7_1 = Макет.ПолучитьОбласть("СтрокиРаздела7_1");
	ШапкаРаздела7_2 = Макет.ПолучитьОбласть("ШапкаРаздела7_2");
	ПодвалСтраницы2 = Макет.ПолучитьОбласть("ПодвалСтраницы2");
	
	Если ПараметрыПечати.Свойство("ДатаСведений") Тогда
		ДатаСведений = ПараметрыПечати.ДатаСведений;
	Иначе
		ДатаСведений = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ДанныеПечатнойФормы = ДанныеПечатнойФормыОС6_2003(МассивОбъектов, ДатаСведений);
	
	ТекстЗапросаТекущиеСведения = ТекстЗапросаТекущиеСведения(ДатаСведений);
	
	ИспользоватьУчетДМ = ПолучитьФункциональнуюОпцию("ИспользоватьУчетДрагоценныхМатериалов");
	ЕстьПереоценки = Не ДанныеПечатнойФормы.ПоПереоценкам.Пустой();
	
	ПервыйДокумент = Истина;
	
	СведенияАктуальны = Истина;
	
	ВыборкаПереоценок = ДанныеПечатнойФормы.ПоПереоценкам.Выбрать();
	
	ВыборкаОбъектов = ДанныеПечатнойФормы.ПоОбъектам.Выбрать();
	Пока ВыборкаОбъектов.Следующий() Цикл
		
		Запрос = Новый Запрос();
		Запрос.Текст = ТекстЗапросаТекущиеСведения;
		Запрос.УстановитьПараметр("Организация", ВыборкаОбъектов.Организация);
		Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений);
		Запрос.УстановитьПараметр("ОсновноеСредство", ВыборкаОбъектов.Ссылка);
		Запрос.УстановитьПараметр("СубконтоОС", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
		
		ТекущиеСведенияОС = Запрос.Выполнить().Выбрать();
		ТекущиеСведенияОС.Следующий();
		
		Если НЕ ПервыйДокумент Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
		
		СчетУчетаСтоимостиБУ = ТекущиеСведенияОС.СчетУчета;
		СрокИспользования   = ТекущиеСведенияОС.СрокПолезногоИспользования;
		
		Отбор  = Новый Структура( "ОсновноеСредство", ВыборкаОбъектов.Ссылка);
		Подразделение  = ТекущиеСведенияОС.МестонахождениеНаименование;
		
		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ВыборкаОбъектов.Организация, ТекущаяДатаСеанса());
		
		Шапка.Параметры.Заполнить(ВыборкаОбъектов);
		Шапка.Параметры.Заполнить(ТекущиеСведенияОС);
		
		Шапка.Параметры.Организация = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм");
		Шапка.Параметры.КодПоОКПО = ВыборкаОбъектов.Организация.КодПоОКПО;
		Шапка.Параметры.Подразделение = Подразделение;
		Шапка.Параметры.НаименованиеОС = ?(НЕ ЗначениеЗаполнено(ВыборкаОбъектов.НаименованиеПолное), ВыборкаОбъектов.Наименование, ВыборкаОбъектов.НаименованиеПолное);
		
		Шапка.Параметры.НомерДок = ТекущиеСведенияОС.ИнвентарныйНомер;
		Шапка.Параметры.ДатаДок = Формат(ДатаСведений,"ДЛФ=D");
		Шапка.Параметры.МестоНахождениеОС = Подразделение;
		Шапка.Параметры.ИзготовительОС = ВыборкаОбъектов.Изготовитель;
		Шапка.Параметры.НомерГруппы = ТекущиеСведенияОС.АмортизационнаяГруппа;
		Если ТекущиеСведенияОС.АмортизационнаяГруппа = 11 Тогда
			Шапка.Параметры.НомерГруппы = НСтр("ru='Отдельная'");
		КонецЕсли;
		Шапка.Параметры.НомерПаспорта = ВыборкаОбъектов.НомерПаспорта;
		Шапка.Параметры.ЗаводскойНомер = ВыборкаОбъектов.ЗаводскойНомер;
		Шапка.Параметры.ИнвентарныйНомер = ТекущиеСведенияОС.ИнвентарныйНомер;
		Шапка.Параметры.СубСчет = Строка(СчетУчетаСтоимостиБУ);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостоянияОСОрганизаций.Состояние КАК Состояние,
		|	СостоянияОСОрганизаций.ДатаСостояния КАК ДатаСостояния,
		|	СобытияОСОрганизаций.НазваниеДокумента КАК НазваниеДокумента,
		|	СобытияОСОрганизаций.НомерДокумента КАК НомерДокумента,
		|	СобытияОСОрганизаций.Событие КАК Событие,
		|	СостоянияОСОрганизаций.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.СобытияОСОрганизаций КАК СобытияОСОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|		ПО СобытияОСОрганизаций.Период = СостоянияОСОрганизаций.ДатаСостояния
		|			И СобытияОСОрганизаций.Регистратор = СостоянияОСОрганизаций.Регистратор
		|			И СобытияОСОрганизаций.Организация = СостоянияОСОрганизаций.Организация
		|			И СобытияОСОрганизаций.ОсновноеСредство = СостоянияОСОрганизаций.ОсновноеСредство
		|ГДЕ
		|	СобытияОСОрганизаций.ОсновноеСредство = &ОсновноеСредство
		|	И СобытияОСОрганизаций.Период >= &ДатаВводаВЭксплуатациюБУ
		|	И НЕ СобытияОСОрганизаций.Регистратор ССЫЛКА Документ.ПеремещениеОС
		|	И НЕ СобытияОСОрганизаций.Регистратор ССЫЛКА Документ.ПеремещениеОС2_4
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	СобытияОСОрганизацийСрезПоследних.Период,
		|	СобытияОСОрганизацийСрезПоследних.НазваниеДокумента,
		|	СобытияОСОрганизацийСрезПоследних.НомерДокумента,
		|	СобытияОСОрганизацийСрезПоследних.Событие,
		|	СобытияОСОрганизацийСрезПоследних.Регистратор
		|ИЗ
		|	РегистрСведений.СобытияОСОрганизаций.СрезПоследних(
		|			&ДатаСведений,
		|			ОсновноеСредство = &ОсновноеСредство
		|				И Событие.ВидСобытияОС В (&МодернизацияИКапРемонт)) КАК СобытияОСОрганизацийСрезПоследних
		|ГДЕ
		|	СобытияОСОрганизацийСрезПоследних.Период >= &ДатаВводаВЭксплуатациюБУ";
		
		Запрос.УстановитьПараметр("Организация", ВыборкаОбъектов.Организация);
		Запрос.УстановитьПараметр("ОсновноеСредство", ВыборкаОбъектов.Ссылка);
		Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений);
		Запрос.УстановитьПараметр("ДатаВводаВЭксплуатациюБУ", ВыборкаОбъектов.ДатаВводаВЭксплуатациюБУ);
		
		ВидыСобытий = Новый СписокЗначений;
		ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.Модернизация);
		ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.Достройка);
		ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.Дооборудование);
		ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.КапитальныйРемонт);
		
		Запрос.УстановитьПараметр("МодернизацияИКапРемонт", ВидыСобытий);
		Выборка = Запрос.Выполнить().Выбрать();
		
		ДатаПринятия = '00010101';
		ДокументПринятия = "";
		
		ДатаВвода = '00010101';
		ДокументВвода = "";
		ДокументВводаНомер = "";
		
		ДатаСписания = '00010101';
		ДокументСписания = "";
		РегистраторСписания = Неопределено;
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.Состояние   = Перечисления.СостоянияОС.ПринятоКУчету Тогда
				ДатаПринятия = Выборка.ДатаСостояния;
				ДокументПринятия = Выборка.НазваниеДокумента;
				ДокументПринятияНомер = Выборка.НомерДокумента;
			ИначеЕсли Выборка.Состояние = Перечисления.СостоянияОС.СнятоСУчета Тогда
				ДатаСписания        = Выборка.ДатаСостояния;
				ДокументСписания    = Выборка.НазваниеДокумента;
				РегистраторСписания = Выборка.Регистратор;
			Иначе
				ДатаПоследнейМодернизации     = Выборка.ДатаСостояния;
				ДокументПоследнейМодернизации = Выборка.НазваниеДокумента;
			КонецЕсли; 
		КонецЦикла;
		
		Шапка.Параметры.ДатаВвода    = ДатаПринятия;
		Шапка.Параметры.ДатаСписания = ДатаСписания;
		
		ТабДок.Вывести(Шапка);
		
		// Балансовая стоимость ОС на момент поступления и первоначально принятый срок полезного использования.
		ШапкаРазделов1и2.Параметры.Заполнить(ВыборкаОбъектов);
		ШапкаРазделов1и2.Параметры.Заполнить(ТекущиеСведенияОС);
		ШапкаРазделов1и2.Параметры.ПервоначальнаяСтоимость= ТекущиеСведенияОС.ПервоначальнаяСтоимость;
		ШапкаРазделов1и2.Параметры.СрокПолезногоИспользования = ОбъектыЭксплуатации.КоличествоМесяцевСтрокой(СрокИспользования);
		Если ЗначениеЗаполнено(ДатаПринятия) Тогда
			ШапкаРазделов1и2.Параметры.ДокументВвода = ДокументПринятия;
			ШапкаРазделов1и2.Параметры.ДокументВводаДата = ДатаПринятия;
			ШапкаРазделов1и2.Параметры.ДокументВводаНомер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДокументПринятияНомер, Истина, Ложь);
			ШапкаРазделов1и2.Параметры.ДатаКапремонта = ДатаПоследнейМодернизации;
			ШапкаРазделов1и2.Параметры.СрокЭксплуатации = ОбъектыЭксплуатации.КоличествоМесяцевСтрокой(
				УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(
					ДатаПринятия, ?(ЗначениеЗаполнено(ДатаСписания), ДатаСписания, ТекущаяДатаСеанса())));
		КонецЕсли;
		
		ТабДок.Вывести(ШапкаРазделов1и2);
		
		// Переоценки
		ТабДок.Вывести(ШапкаРаздела3);
		Если ЕстьПереоценки Тогда
			ВосстановительнаяСтоимость = ТекущиеСведенияОС.ПервоначальнаяСтоимость;
			ЗаполненныхПереоценок = 0;
			СтруктураПустойСтроки = Новый Структура(
				"ДатаПереоценки1, КоэффициентПереоценки1, ВосстановительнаяСтоимостьПереоценки1,
				|ДатаПереоценки2, КоэффициентПереоценки2, ВосстановительнаяСтоимостьПереоценки2,
				|ДатаПереоценки3, КоэффициентПереоценки3, ВосстановительнаяСтоимостьПереоценки3");
			
			Пока Истина Цикл
				
				Если ЗаполненныхПереоценок = 3 Тогда
					ТабДок.Вывести(СтрокиРаздела3);
					ЗаполненныхПереоценок = 0;
					СтрокиРаздела3.Параметры.Заполнить(СтруктураПустойСтроки);
				КонецЕсли;
				
				Если ВыборкаПереоценок.НайтиСледующий(Отбор) Тогда
					ЗаполненныхПереоценок = ЗаполненныхПереоценок + 1;
					СтрокиРаздела3.Параметры["ДатаПереоценки" + ЗаполненныхПереоценок] = ВыборкаПереоценок.ДатаПереоценки;
					
					СтрокиРаздела3.Параметры["ВосстановительнаяСтоимостьПереоценки" + ЗаполненныхПереоценок] = 
						ВыборкаПереоценок.ВосстановительнаяСтоимостьПереоценки;
					
					СтрокиРаздела3.Параметры["КоэффициентПереоценки" + ЗаполненныхПереоценок] =
						Формат(ВыборкаПереоценок.ВосстановительнаяСтоимостьПереоценки / ВосстановительнаяСтоимость, "ЧЦ=15; ЧДЦ=3");
					
					ВосстановительнаяСтоимость = ВыборкаПереоценок.ВосстановительнаяСтоимостьПереоценки;
				Иначе
					Если ЗаполненныхПереоценок > 0 Тогда
						ТабДок.Вывести(СтрокиРаздела3);
					КонецЕсли;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			ТабДок.Вывести(СтрокиРаздела3);
		КонецЕсли;
		
		// Сведения о приемке, внутренних перемещениях и выбытии	
		ТабДок.Вывести(ШапкаРаздела4);
		
		ВыборкаЗаписей = ВыборкаПриемкаПеремещениеВыбытие(ДатаСведений, ВыборкаОбъектов);
		Пока ВыборкаЗаписей.Следующий() Цикл
			
			ТекущаяОперация = ВыборкаЗаписей.Событие;
			
			СтрокаРаздела4.Параметры.Регистратор = ВыборкаЗаписей.Регистратор;
			
			СтрокаРаздела4.Параметры.ДатаНомерДокумента = СтрШаблон(
				НСтр("ru='%1 № %2 от %3'"),
				Строка(ВыборкаЗаписей.НазваниеДокумента),
				ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаЗаписей.НомерДокумента),
				Формат(ВыборкаЗаписей.Период,"ДЛФ=D"));
			
			СтрокаРаздела4.Параметры.ВидОперации = ТекущаяОперация;
			СтрокаРаздела4.Параметры.ФИОМОЛДвижения = "";
			СтрокаРаздела4.Параметры.Подразделение = "";
			СтрокаРаздела4.Параметры.ФИОМОЛДвижения = ВыборкаЗаписей.МОЛ;
			СтрокаРаздела4.Параметры.Подразделение = ВыборкаЗаписей.Местонахождение;
				
			Если ВыборкаЗаписей.СтоимостьОборот = NULL И ВыборкаЗаписей.АмортизацияОборот = NULL Тогда // ввод начальных остатков
				
				СтрокаРаздела4.Параметры.ОстаточнаяСтоимость = ТекущиеСведенияОС.ПервоначальнаяСтоимость;
				
			Иначе
				
				СтрокаРаздела4.Параметры.ОстаточнаяСтоимость = ВыборкаЗаписей.ОстаточнаяСтоимость;
				
			КонецЕсли;
			
			ТабДок.Вывести(СтрокаРаздела4);
			
		КонецЦикла;
		
		ТабДок.Вывести(ПодвалСтраницы1);
		
		// Модернизация ОС и ремонт
		ТабДок.Вывести(ШапкаРазделов5и6);
		
		СписокМодернизаций = Новый Массив;
		СписокМодернизаций.Добавить(Перечисления.ВидыСобытийОС.Модернизация);
		СписокМодернизаций.Добавить(Перечисления.ВидыСобытийОС.Достройка);
		СписокМодернизаций.Добавить(Перечисления.ВидыСобытийОС.Реконструкция);
		СписокМодернизаций.Добавить(Перечисления.ВидыСобытийОС.Дооборудование);
		СписокМодернизаций.Добавить(Перечисления.ВидыСобытийОС.ЧастичнаяЛиквидация);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", ВыборкаОбъектов.Организация);
		Запрос.УстановитьПараметр("ОсновноеСредство", ВыборкаОбъектов.Ссылка);
		Запрос.УстановитьПараметр("УсловиеМодернизаций", СписокМодернизаций);
		Запрос.УстановитьПараметр("ТекстМодернизация", НСтр("ru = 'Модернизация'"));
		Запрос.УстановитьПараметр("ТекстРазукомплектация", НСтр("ru = 'Разукомплектация'"));
		Запрос.УстановитьПараметр("ТекстЧастичнаяЛиквидация", НСтр("ru = 'Частичная ликвидация'"));
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СобытияОСОрганизаций.СуммаЗатратБУ КАК СуммаЗатратБУМодернизаций,
		|	СобытияОСОрганизаций.Регистратор КАК Регистратор,
		|	СобытияОСОрганизаций.Период КАК Период,
		|	СобытияОСОрганизаций.Событие КАК Операция,
		|	СобытияОСОрганизаций.НомерДокумента КАК НомерДокумента,
		|	ВЫРАЗИТЬ(СобытияОСОрганизаций.НазваниеДокумента КАК СТРОКА(200)) КАК НазваниеДокумента
		|ИЗ
		|	РегистрСведений.СобытияОСОрганизаций КАК СобытияОСОрганизаций
		|ГДЕ
		|	СобытияОСОрганизаций.Организация = &Организация
		|	И СобытияОСОрганизаций.Событие.ВидСобытияОС В (&УсловиеМодернизаций)
		|	И СобытияОСОрганизаций.ОсновноеСредство = &ОсновноеСредство
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СобытияОСОрганизаций.СуммаЗатратБУ КАК СуммаЗатратБУМодернизаций,
		|	СобытияОСОрганизаций.Регистратор КАК Регистратор,
		|	СобытияОСОрганизаций.Период КАК Период,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.МодернизацияОС2_4)
		|			ТОГДА &ТекстМодернизация 
		|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.СписаниеОС2_4)
		|			ТОГДА &ТекстЧастичнаяЛиквидация 
		|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.РазукомплектацияОС)
		|			ТОГДА &ТекстРазукомплектация 
		|	КОНЕЦ КАК Операция,
		|	СобытияОСОрганизаций.НомерДокумента КАК НомерДокумента,
		|	ВЫРАЗИТЬ(СобытияОСОрганизаций.НазваниеДокумента КАК СТРОКА(200)) КАК НазваниеДокумента
		|ИЗ
		|	РегистрСведений.СобытияОСОрганизаций КАК СобытияОСОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РазукомплектацияОС КАК РазукомплектацияОС
		|		ПО РазукомплектацияОС.Ссылка = СобытияОСОрганизаций.Регистратор
		|			И РазукомплектацияОС.ОсновноеСредство = СобытияОСОрганизаций.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеОС2_4 КАК СписаниеОС2_4
		|		ПО СписаниеОС2_4.Ссылка = СобытияОСОрганизаций.Регистратор
		|ГДЕ
		|	СобытияОСОрганизаций.Организация = &Организация
		|	И СобытияОСОрганизаций.ОсновноеСредство = &ОсновноеСредство
		|	И (ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.МодернизацияОС2_4)
		|		ИЛИ ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.РазукомплектацияОС)
		|			И НЕ РазукомплектацияОС.ОсновноеСредство ЕСТЬ NULL
		|		ИЛИ ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.СписаниеОС2_4)
		|			И СписаниеОС2_4.ЧастичнаяЛиквидация)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период,
		|	Регистратор";
		
		Результат = Запрос.Выполнить();
		
		ТаблицаИзмененияСтоимости = Новый ТаблицаЗначений;
		ТаблицаИзмененияСтоимости.Колонки.Добавить("Модернизация");
		ТаблицаИзмененияСтоимости.Колонки.Добавить("ДокМодернизации");
		ТаблицаИзмененияСтоимости.Колонки.Добавить("ДокМодернизацииДата");
		ТаблицаИзмененияСтоимости.Колонки.Добавить("ДокМодернизацииНомер");
		ТаблицаИзмененияСтоимости.Колонки.Добавить("ЗатратыНаМодернизацию");
		
		ВыборкаРегистраторов = Результат.Выбрать();
		Пока ВыборкаРегистраторов.Следующий() Цикл
			
			НоваяСтрока = ТаблицаИзмененияСтоимости.Добавить();
			НоваяСтрока.Модернизация = ВыборкаРегистраторов.Операция;
			НоваяСтрока.ДокМодернизации = ВыборкаРегистраторов.НазваниеДокумента;
			НоваяСтрока.ДокМодернизацииНомер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаРегистраторов.НомерДокумента);
			НоваяСтрока.ДокМодернизацииДата = Формат(ВыборкаРегистраторов.Период, "ДЛФ=D");
			НоваяСтрока.ЗатратыНаМодернизацию = ВыборкаРегистраторов.СуммаЗатратБУМодернизаций;
			
		КонецЦикла;
		
		КоличествоСтрок = ТаблицаИзмененияСтоимости.Количество(); 
		
		//++ НЕ УТКА
		СтруктураПоиска = Новый Структура("ОбъектЭксплуатации", ВыборкаОбъектов.Ссылка);
		ТаблицаРемонтов = ДанныеПечатнойФормы.ЗатратыНаРемонт.Скопировать(СтруктураПоиска);
		ТаблицаРемонтов.Сортировать("ДокРемонтаДата,ДокРемонтаНомер");
		Для каждого ДанныеРемонт Из ТаблицаРемонтов Цикл
			ДанныеРемонт.ДокРемонтаНомер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеРемонт.ДокРемонтаНомер);
		КонецЦикла;
		
		КоличествоСтрок = Макс(ТаблицаИзмененияСтоимости.Количество(), ТаблицаРемонтов.Количество(),1); 
		//-- НЕ УТКА
		
		Для СчетСтрок = 1 По КоличествоСтрок Цикл
			
			ПараметрыОбласти = Новый Структура(
			"Модернизация,ДокМодернизации,ДокМодернизацииДата,ДокМодернизацииНомер,ЗатратыНаМодернизацию,
			|Ремонт,ДокРемонта,ДокРемонтаНаименование,ДокРемонтаДата,ДокРемонтаНомер,ЗатратыНаРемонт");
			
			Если СчетСтрок <= ТаблицаИзмененияСтоимости.Количество() Тогда
				СтрокаТаблицы = ТаблицаИзмененияСтоимости.Получить(СчетСтрок - 1);
				ЗаполнитьЗначенияСвойств(ПараметрыОбласти, СтрокаТаблицы);
			КонецЕсли;
			
			//++ НЕ УТКА
			Если СчетСтрок <= ТаблицаРемонтов.Количество() Тогда
				СтрокаТаблицы = ТаблицаРемонтов.Получить(СчетСтрок - 1);
				ЗаполнитьЗначенияСвойств(ПараметрыОбласти, СтрокаТаблицы);
			КонецЕсли;
			//-- НЕ УТКА
			
			СтрокаРазделов5и6.Параметры.Заполнить(ПараметрыОбласти);
			
			ТабДок.Вывести(СтрокаРазделов5и6);
			
		КонецЦикла;
		
		ТабДок.Вывести(ШапкаРаздела7_1);
		ТаблицаДМ = ВыборкаОбъектов.ДрагоценныеМатериалы.Выгрузить();
		Если ИспользоватьУчетДМ И ТаблицаДМ.Количество() <> 0 Тогда
			Для Каждого Строка Из ТаблицаДМ Цикл
				СтрокиРаздела7_1.Параметры.Заполнить(Строка);
				ТабДок.Вывести(СтрокиРаздела7_1);
			КонецЦикла;
		Иначе
			Для к=0 По 6 Цикл // Вывод пустых строк для заполнения вручную
				ТабДок.Вывести(СтрокиРаздела7_1);
			КонецЦикла;
		КонецЕсли;
		ТабДок.Вывести(ШапкаРаздела7_2);
		ТабДок.Вывести(ПодвалСтраницы2);
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, ВыборкаОбъектов.Ссылка);
		
		Если НЕ ВыборкаОбъектов.СведенияАктуальны Тогда
			СведенияАктуальны = Ложь;
		КонецЕсли; 
		
	КонецЦикла;
	
	ВнеоборотныеАктивы.ДобавитьПредупреждениеЕслиСведенияНеАктуальны(СведенияАктуальны, ТабДок);
	
	Возврат ТабДок;
	
КонецФункции

Функция ДанныеПечатнойФормыОС6_2003(МассивОбъектов, ДатаСведений)

	СписокЗапросов = Новый Массив;
	
	//++ НЕ УТКА
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗаказНаРемонт.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ЗаказыНаРемонт
	|ИЗ
	|	Документ.ЗаказНаРемонт КАК ЗаказНаРемонт
	|ГДЕ
	|	ЗаказНаРемонт.ОбъектЭксплуатации В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатьиРасходов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СтатьиРасходовНаЗаказыНаРемонт
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|ГДЕ
	|	СтатьиРасходов.РасходыНаЗаказыНаРемонт
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНаРемонт.Ссылка КАК ДокРемонта,
	|	ЗаказНаРемонт.Дата КАК ДокРемонтаДата,
	|	ЗаказНаРемонт.Номер КАК ДокРемонтаНомер,
	|	ЗаказНаРемонт.ОбъектЭксплуатации КАК ОбъектЭксплуатации,
	|	ЗаказНаРемонт.ОбщийВидРемонта КАК Ремонт,
	|	&НаименованиеДокРемонта КАК ДокРемонтаНаименование,
	|	СУММА(ПрочиеРасходыОбороты.СуммаРеглПриход) КАК ЗатратыНаРемонт
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходы.Обороты(
	|			,
	|			&ДатаСведений,
	|			,
	|			СтатьяРасходов В
	|					(ВЫБРАТЬ
	|						СтатьиРасходовНаЗаказыНаРемонт.Ссылка
	|					ИЗ
	|						СтатьиРасходовНаЗаказыНаРемонт)
	|				И АналитикаРасходов В
	|					(ВЫБРАТЬ
	|						ЗаказыНаРемонт.Ссылка
	|					ИЗ
	|						ЗаказыНаРемонт)) КАК ПрочиеРасходыОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаРемонт КАК ЗаказНаРемонт
	|		ПО (ЗаказНаРемонт.Ссылка = ПрочиеРасходыОбороты.АналитикаРасходов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказНаРемонт.Ссылка,
	|	ЗаказНаРемонт.ОбъектЭксплуатации,
	|	ЗаказНаРемонт.ОбщийВидРемонта,
	|	ЗаказНаРемонт.Дата,
	|	ЗаказНаРемонт.Номер
	|
	|ИМЕЮЩИЕ
	|	СУММА(ПрочиеРасходыОбороты.СуммаРеглПриход) <> 0";
	СписокЗапросов.Добавить(ТекстЗапроса);
	//-- НЕ УТКА
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СведенияПоОрганизации.ОсновноеСредство КАК ОС,
	|	СведенияПоОрганизации.Организация КАК Организация,
	|	ЕСТЬNULL(ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюБУ, ДАТАВРЕМЯ(1,1,1)) КАК ДатаВводаВЭксплуатациюБУ
	|ПОМЕСТИТЬ СведенияПоОрганизации
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&ДатаСведений, ОсновноеСредство В (&МассивОбъектов)) КАК СведенияПоОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(&ДатаСведений, ОсновноеСредство В (&МассивОбъектов)) КАК ПервоначальныеСведенияОС
	|		ПО СведенияПоОрганизации.ОсновноеСредство = ПервоначальныеСведенияОС.ОсновноеСредство
	|			И СведенияПоОрганизации.Организация = ПервоначальныеСведенияОС.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОсновныеСредства.Ссылка КАК Ссылка,
	|	ОсновныеСредства.Код КАК Код,
	|	ОсновныеСредства.Наименование КАК Наименование,
	|	ОсновныеСредства.ДатаВыпуска КАК ДатаВыпуска,
	|	ОсновныеСредства.ЗаводскойНомер КАК ЗаводскойНомер,
	|	ОсновныеСредства.Изготовитель КАК Изготовитель,
	|	ОсновныеСредства.НаименованиеПолное КАК НаименованиеПолное,
	|	ОсновныеСредства.НомерПаспорта КАК НомерПаспорта,
	|	ЕСТЬNULL(СведенияПоОрганизации.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
	|	СведенияПоОрганизации.ДатаВводаВЭксплуатациюБУ КАК ДатаВводаВЭксплуатациюБУ,
	|	НЕ ОсновныеСредства.Ссылка В (&ОбъектыДляКоторыхСведенияНеАктуальны) КАК СведенияАктуальны,
	|	ОсновныеСредства.ДрагоценныеМатериалы.(
	|		ДрагоценныйМатериал КАК ДрагоценныйМатериал,
	|		Количество КАК Количество,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	) КАК ДрагоценныеМатериалы
	|ИЗ
	|	Справочник.ОбъектыЭксплуатации КАК ОсновныеСредства
	|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияПоОрганизации КАК СведенияПоОрганизации
	|		ПО ОсновныеСредства.Ссылка = СведенияПоОрганизации.ОС
	|ГДЕ
	|	ОсновныеСредства.Ссылка В(&МассивОбъектов)
	|	И ОсновныеСредства.ЭтоГруппа = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Переоценка.Дата КАК ДатаПереоценки,
	|	ПереоценкаТЧ.ОсновноеСредство КАК ОсновноеСредство,
	|	ПереоценкаТЧ.Стоимость КАК ВосстановительнаяСтоимостьПереоценки
	|ИЗ
	|	СведенияПоОрганизации КАК СведенияПоОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СобытияОСОрганизаций КАК СобытияОСОрганизаций
	|		ПО СведенияПоОрганизации.ОС = СобытияОСОрганизаций.ОсновноеСредство
	|			И СведенияПоОрганизации.Организация = СобытияОСОрганизаций.Организация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПереоценкаОС.ОС КАК ПереоценкаТЧ
	|		ПО (СобытияОСОрганизаций.Регистратор = ПереоценкаТЧ.Ссылка)
	|			И (СобытияОСОрганизаций.ОсновноеСредство = ПереоценкаТЧ.ОсновноеСредство)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПереоценкаОС КАК Переоценка
	|		ПО (СобытияОСОрганизаций.Регистратор = Переоценка.Ссылка)
	|ГДЕ
	|	СобытияОСОрганизаций.Событие.ВидСобытияОС = &ВидСобытияПереоценки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Переоценка.Дата КАК ДатаПереоценки,
	|	ПереоценкаТЧ.ОсновноеСредство КАК ОсновноеСредство,
	|	ПереоценкаТЧ.СтоимостьБУ КАК ВосстановительнаяСтоимостьПереоценки
	|ИЗ
	|	СведенияПоОрганизации КАК СведенияПоОрганизации
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СобытияОСОрганизаций КАК СобытияОСОрганизаций
	|		ПО СобытияОСОрганизаций.ОсновноеСредство = СведенияПоОрганизации.ОС
	|			И СобытияОСОрганизаций.Период >= СведенияПоОрганизации.ДатаВводаВЭксплуатациюБУ
	|			И СобытияОСОрганизаций.Регистратор ССЫЛКА Документ.ПереоценкаОС2_4
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПереоценкаОС2_4.ОС КАК ПереоценкаТЧ
	|		ПО (СобытияОСОрганизаций.Регистратор = ПереоценкаТЧ.Ссылка)
	|			И (СобытияОСОрганизаций.ОсновноеСредство = ПереоценкаТЧ.ОсновноеСредство)
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПереоценкаОС2_4 КАК Переоценка
	|		ПО (СобытияОСОрганизаций.Регистратор = Переоценка.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновноеСредство,
	|	ДатаПереоценки";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ВидСобытияПереоценки", Перечисления.ВидыСобытийОС.Переоценка);
	Запрос.УстановитьПараметр("НаименованиеДокРемонта", НСтр("ru = 'Заказ на ремонт'"));
	
	ОбъектыДляКоторыхСведенияНеАктуальны = ВнеоборотныеАктивы.ОбъектыДляКоторыхСведенияНеАктуальны(МассивОбъектов, ДатаСведений);
	Запрос.УстановитьПараметр("ОбъектыДляКоторыхСведенияНеАктуальны", ОбъектыДляКоторыхСведенияНеАктуальны);
	
	Пакет = Запрос.ВыполнитьПакет();

	ДанныеПечатнойФормы = Новый Структура;
	ДанныеПечатнойФормы.Вставить("ПоОбъектам", Пакет[Пакет.ВГраница()-1]);
	ДанныеПечатнойФормы.Вставить("ПоПереоценкам", Пакет[Пакет.ВГраница()]);
	//++ НЕ УТКА
	ДанныеПечатнойФормы.Вставить("ЗатратыНаРемонт", Пакет[2].Выгрузить());
	ДанныеПечатнойФормы.ЗатратыНаРемонт.Индексы.Добавить("ОбъектЭксплуатации");
	//-- НЕ УТКА
	
	Возврат ДанныеПечатнойФормы;
	
КонецФункции

Функция ТекстЗапросаТекущиеСведения(ДатаСведений)

	СписокЗапросов = Новый Массив;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СчетаБухгалтерскогоУчета.ОсновноеСредство КАК ОсновноеСредство,
	|	ВЫБОР
	|		КОГДА СчетаБухгалтерскогоУчета.ГруппаФинансовогоУчета <> ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаВнеоборотныхАктивов.ПустаяСсылка)
	|			ТОГДА СчетаБухгалтерскогоУчета.ГруппаФинансовогоУчета.СчетУчета
	|		ИНАЧЕ СчетаБухгалтерскогоУчета.СчетУчета
	|	КОНЕЦ КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА СчетаБухгалтерскогоУчета.ГруппаФинансовогоУчета <> ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаВнеоборотныхАктивов.ПустаяСсылка)
	|			ТОГДА СчетаБухгалтерскогоУчета.ГруппаФинансовогоУчета.СчетУчетаАмортизации
	|		ИНАЧЕ СчетаБухгалтерскогоУчета.СчетНачисленияАмортизации
	|	КОНЕЦ КАК СчетНачисленияАмортизации
	|ПОМЕСТИТЬ втСчетаУчета
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&ДатаСведений,
	|			Организация = &Организация
	|				И ОсновноеСредство = &ОсновноеСредство) КАК СчетаБухгалтерскогоУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПервоначальныеСведения.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаПервоначальныеСведения.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ТаблицаПервоначальныеСведения.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	|	ТаблицаПервоначальныеСведения.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ТаблицаПервоначальныеСведения.ГруппаОС КАК ГруппаОС,
	|	ТаблицаПервоначальныеСведения.КодПоОКОФ.Код КАК КодПоОКОФ,
	|	ТаблицаПервоначальныеСведения.ШифрПоЕНАОФ КАК ШифрПоЕНАОФ,
	|	ТаблицаПервоначальныеСведения.АмортизационнаяГруппа.Порядок + 1 КАК АмортизационнаяГруппа
	|ПОМЕСТИТЬ ТаблицаПервоначальныеСведения
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			&ДатаСведений,
	|			Организация = &Организация
	|				И ОсновноеСредство = &ОсновноеСредство) КАК ТаблицаПервоначальныеСведения
	|ГДЕ
	|	ТаблицаПервоначальныеСведения.Организация = &Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПараметрыАмортизации.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаПараметрыАмортизации.СтоимостьДляВычисленияАмортизации КАК СтоимостьДляВычисленияАмортизации,
	|	ТаблицаПараметрыАмортизации.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ТаблицаПараметрыАмортизации.КоэффициентАмортизации КАК КоэффициентАмортизации,
	|	ТаблицаПараметрыАмортизации.КоэффициентУскорения КАК КоэффициентУскорения,
	|	ТаблицаПараметрыАмортизации.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	ТаблицаПараметрыАмортизации.Период КАК Период
	|ПОМЕСТИТЬ ТаблицаПараметрыАмортизации
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&ДатаСведений,
	|			Организация = &Организация
	|				И ОсновноеСредство = &ОсновноеСредство) КАК ТаблицаПараметрыАмортизации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаМестонахождение.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаМестонахождение.Местонахождение КАК Местонахождение,
	|	ТаблицаМестонахождение.МОЛ КАК МОЛ
	|ПОМЕСТИТЬ ТаблицаМестонахождение
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|			&ДатаСведений,
	|			Организация = &Организация
	|				И ОсновноеСредство = &ОсновноеСредство) КАК ТаблицаМестонахождение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСостоянияОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаСостоянияОС.Состояние КАК Состояние
	|ПОМЕСТИТЬ ТаблицаСостоянияОС
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
	|			&ДатаСведений,
	|			Организация = &Организация
	|				И ОсновноеСредство = &ОсновноеСредство) КАК ТаблицаСостоянияОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
	Если ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(ДатаСведений) Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаСтоимость.ОсновноеСредство КАК ОсновноеСредство,
		|	НЕОПРЕДЕЛЕНО КАК СчетУчета,
		|	ТаблицаСтоимость.СтоимостьРеглОстаток + ТаблицаСтоимость.СтоимостьЦФОстаток КАК СуммаОстаток
		|ПОМЕСТИТЬ ТаблицаСтоимость
		|ИЗ
		|	РегистрНакопления.СтоимостьОС.Остатки(
		|			&ДатаСведений,
		|			Организация = &Организация
		|				И ОсновноеСредство = &ОсновноеСредство) КАК ТаблицаСтоимость
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаАмортизация.ОсновноеСредство КАК ОсновноеСредство,
		|	НЕОПРЕДЕЛЕНО КАК СчетНачисленияАмортизации,
		|	-ТаблицаАмортизация.АмортизацияРеглОстаток -ТаблицаАмортизация.АмортизацияЦФОстаток КАК СуммаОстаток
		|ПОМЕСТИТЬ ТаблицаАмортизация
		|ИЗ
		|	РегистрНакопления.АмортизацияОС.Остатки(
		|			&ДатаСведений,
		|			Организация = &Организация
		|				И ОсновноеСредство = &ОсновноеСредство) КАК ТаблицаАмортизация
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство";
		
		СписокЗапросов.Добавить(ТекстЗапроса);
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстаткиСчетУчета.Субконто1 КАК ОсновноеСредство,
		|	ХозрасчетныйОстаткиСчетУчета.Счет КАК СчетУчета,
		|	ХозрасчетныйОстаткиСчетУчета.СуммаОстаток КАК СуммаОстаток
		|ПОМЕСТИТЬ ТаблицаСтоимость
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ДатаСведений,
		|			Счет В
		|				(ВЫБРАТЬ
		|					втСчетаУчета.СчетУчета
		|				ИЗ
		|					втСчетаУчета КАК втСчетаУчета),
		|			&СубконтоОС,
		|			Организация = &Организация
		|				И Субконто1 = &ОсновноеСредство) КАК ХозрасчетныйОстаткиСчетУчета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство,
		|	СчетУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстаткиСчетАмортизации.Субконто1 КАК ОсновноеСредство,
		|	ХозрасчетныйОстаткиСчетАмортизации.Счет КАК СчетНачисленияАмортизации,
		|	-ХозрасчетныйОстаткиСчетАмортизации.СуммаОстаток КАК СуммаОстаток
		|ПОМЕСТИТЬ ТаблицаАмортизация
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ДатаСведений,
		|			Счет В
		|				(ВЫБРАТЬ
		|					втСчетаУчета.СчетНачисленияАмортизации
		|				ИЗ
		|					втСчетаУчета КАК втСчетаУчета),
		|			&СубконтоОС,
		|			Организация = &Организация
		|				И Субконто1 = &ОсновноеСредство) КАК ХозрасчетныйОстаткиСчетАмортизации
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство,
		|	СчетНачисленияАмортизации";
		
		СписокЗапросов.Добавить(ТекстЗапроса);
		
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаПараметрыАмортизации.СтоимостьДляВычисленияАмортизации КАК СтоимостьДляВычисленияАмортизации,
	|	ТаблицаПараметрыАмортизации.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ТаблицаПараметрыАмортизации.КоэффициентАмортизации КАК КоэффициентАмортизации,
	|	ТаблицаПараметрыАмортизации.КоэффициентУскорения КАК КоэффициентУскорения,
	|	ТаблицаПараметрыАмортизации.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	ТаблицаПараметрыАмортизации.Период КАК Период,
	|	ТаблицаСчетаБухгалтерскогоУчета.СчетУчета КАК СчетУчета,
	|	ТаблицаСчетаБухгалтерскогоУчета.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации,
	|	ТаблицаМестонахождение.Местонахождение КАК Местонахождение,
	|	ТаблицаМестонахождение.МОЛ КАК МОЛ,
	|	ТаблицаМестонахождение.Местонахождение.Наименование КАК МестонахождениеНаименование,
	|	ТаблицаПервоначальныеСведения.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ТаблицаПервоначальныеСведения.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	|	ТаблицаПервоначальныеСведения.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаПервоначальныеСведения.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ТаблицаПервоначальныеСведения.ГруппаОС КАК ГруппаОС,
	|	ТаблицаПервоначальныеСведения.КодПоОКОФ КАК КодПоОКОФ,
	|	ТаблицаПервоначальныеСведения.ШифрПоЕНАОФ КАК ШифрПоЕНАОФ,
	|	ТаблицаПервоначальныеСведения.АмортизационнаяГруппа КАК АмортизационнаяГруппа,
	|	ВЫБОР
	|		КОГДА ТаблицаСостоянияОС.Состояние В (
	|				ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету),
	|				ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКЗабалансовомуУчету))
	|			ТОГДА ЕСТЬNULL(ТаблицаСтоимость.СуммаОстаток, 0) - ЕСТЬNULL(ТаблицаАмортизация.СуммаОстаток, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОстаточнаяСтоимость,
	|	ЕСТЬNULL(ТаблицаАмортизация.СуммаОстаток, 0) КАК СуммаНачисленнойАмортизации
	|ИЗ
	|	ТаблицаПервоначальныеСведения КАК ТаблицаПервоначальныеСведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПараметрыАмортизации КАК ТаблицаПараметрыАмортизации
	|		ПО ТаблицаПервоначальныеСведения.ОсновноеСредство = ТаблицаПараметрыАмортизации.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСчетаУчета КАК ТаблицаСчетаБухгалтерскогоУчета
	|		ПО ТаблицаПервоначальныеСведения.ОсновноеСредство = ТаблицаСчетаБухгалтерскогоУчета.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаМестонахождение КАК ТаблицаМестонахождение
	|		ПО ТаблицаПервоначальныеСведения.ОсновноеСредство = ТаблицаМестонахождение.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСостоянияОС КАК ТаблицаСостоянияОС
	|		ПО ТаблицаПервоначальныеСведения.ОсновноеСредство = ТаблицаСостоянияОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСтоимость КАК ТаблицаСтоимость
	|		ПО (ТаблицаСчетаБухгалтерскогоУчета.ОсновноеСредство = ТаблицаСтоимость.ОсновноеСредство)
	|			И (ТаблицаСчетаБухгалтерскогоУчета.СчетУчета = ТаблицаСтоимость.СчетУчета
	|				ИЛИ ТаблицаСтоимость.СчетУчета = НЕОПРЕДЕЛЕНО)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаАмортизация КАК ТаблицаАмортизация
	|		ПО (ТаблицаСчетаБухгалтерскогоУчета.ОсновноеСредство = ТаблицаАмортизация.ОсновноеСредство)
	|			И (ТаблицаСчетаБухгалтерскогоУчета.СчетНачисленияАмортизации = ТаблицаАмортизация.СчетНачисленияАмортизации
	|				ИЛИ ТаблицаАмортизация.СчетНачисленияАмортизации = НЕОПРЕДЕЛЕНО)";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВыборкаПриемкаПеремещениеВыбытие(ДатаСведений, ВыборкаОбъектов)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Период", ДатаСведений);
	Запрос.УстановитьПараметр("Организация", ВыборкаОбъектов.Организация);
	Запрос.УстановитьПараметр("ОсновноеСредство", ВыборкаОбъектов.Ссылка);
	Запрос.УстановитьПараметр("ДатаВводаВЭксплуатациюБУ", ВыборкаОбъектов.ДатаВводаВЭксплуатациюБУ);
	Запрос.УстановитьПараметр("ТекстПринятиеКУчету",      НСтр("ru = 'Принятие к учету'"));
	Запрос.УстановитьПараметр("ТекстПеремещение",         НСтр("ru = 'Внутреннее перемещение'"));
	Запрос.УстановитьПараметр("ТекстСписание",            НСтр("ru = 'Списание'"));
	Запрос.УстановитьПараметр("ТекстПодготовкаКПередаче", НСтр("ru = 'Подготовка к передаче'"));
	Запрос.УстановитьПараметр("ТекстРазукомплектацияОС",  НСтр("ru = 'Разукомплектация'"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СобытияОС.Ссылка
	|ПОМЕСТИТЬ втСписокСобытий
	|ИЗ
	|	Справочник.СобытияОС КАК СобытияОС
	|ГДЕ
	|	СобытияОС.ВидСобытияОС В (
	|		ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ПринятиеКУчету), 
	|		ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ПринятиеКУчетуСВводомВЭксплуатацию), 
	|		ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ВнутреннееПеремещение), 
	|		ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Списание), 
	|		ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Передача))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СобытияОСОрганизаций.Организация КАК Организация,
	|	СобытияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
	|	СобытияОСОрганизаций.НазваниеДокумента КАК НазваниеДокумента,
	|	СобытияОСОрганизаций.НомерДокумента КАК НомерДокумента,
	|	СобытияОСОрганизаций.Период КАК Период,
	|	СобытияОСОрганизаций.Период КАК ПериодОстатков,
	|	СобытияОСОрганизаций.Событие КАК Событие,
	|	СобытияОСОрганизаций.Событие.ВидСобытияОС КАК ВидСобытияОС,
	|	СобытияОСОрганизаций.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ СобытияОС
	|ИЗ
	|	РегистрСведений.СобытияОСОрганизаций КАК СобытияОСОрганизаций
	|ГДЕ
	|	СобытияОСОрганизаций.ОсновноеСредство = &ОсновноеСредство
	|	И СобытияОСОрганизаций.Период < &Период
	|	И СобытияОСОрганизаций.Событие В (
	|		ВЫБРАТЬ
	|			СобытияОС.Ссылка
	|		ИЗ
	|			втСписокСобытий КАК СобытияОС)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СобытияОСОрганизаций.Организация КАК Организация,
	|	СобытияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
	|	СобытияОСОрганизаций.НазваниеДокумента КАК НазваниеДокумента,
	|	СобытияОСОрганизаций.НомерДокумента КАК НомерДокумента,
	|	СобытияОСОрганизаций.Период КАК Период,
	|	СобытияОСОрганизаций.Период КАК ПериодОстатков,
	|	ВЫБОР  
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ПринятиеКУчетуОС)
	|			ТОГДА &ТекстПринятиеКУчету
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ПринятиеКУчетуОС2_4)
	|			ТОГДА &ТекстПринятиеКУчету
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.РазукомплектацияОС)
	|				И РазукомплектацияОС.ОсновноеСредство ЕСТЬ NULL
	|			ТОГДА &ТекстПринятиеКУчету
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.РазукомплектацияОС)
	|				И НЕ РазукомплектацияОС.ОсновноеСредство ЕСТЬ NULL
	|			ТОГДА &ТекстРазукомплектацияОС
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ВводОстатковВнеоборотныхАктивов)
	|			ТОГДА &ТекстПринятиеКУчету
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ВводОстатковВнеоборотныхАктивов2_4)
	|			ТОГДА &ТекстПринятиеКУчету
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ПеремещениеОС)
	|			ТОГДА &ТекстПеремещение
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ПеремещениеОС2_4)
	|			ТОГДА &ТекстПеремещение
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.СписаниеОС)
	|			ТОГДА &ТекстСписание
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.СписаниеОС2_4)
	|			ТОГДА &ТекстСписание
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ПодготовкаКПередачеОС)
	|			ТОГДА &ТекстПодготовкаКПередаче
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ПодготовкаКПередачеОС2_4)
	|			ТОГДА &ТекстПодготовкаКПередаче
	|	КОНЕЦ КАК Событие,
	|	ВЫБОР  
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ПринятиеКУчетуОС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ПринятиеКУчету)
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ПринятиеКУчетуОС2_4)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ПринятиеКУчету)
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.РазукомплектацияОС)
	|				И РазукомплектацияОС.ОсновноеСредство ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ПринятиеКУчету)
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ВводОстатковВнеоборотныхАктивов)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ПринятиеКУчету)
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ВводОстатковВнеоборотныхАктивов2_4)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ПринятиеКУчету)
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ПеремещениеОС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ВнутреннееПеремещение)
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ПеремещениеОС2_4)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ВнутреннееПеремещение)
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.СписаниеОС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Списание)
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.СписаниеОС2_4)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Списание)
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ПодготовкаКПередачеОС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Передача)
	|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.ПодготовкаКПередачеОС2_4)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Передача)
	|	КОНЕЦ КАК ВидСобытияОС,
	|	СобытияОСОрганизаций.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.СобытияОСОрганизаций КАК СобытияОСОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РазукомплектацияОС КАК РазукомплектацияОС
	|		ПО РазукомплектацияОС.Ссылка = СобытияОСОрганизаций.Регистратор
	|			И РазукомплектацияОС.ОсновноеСредство = СобытияОСОрганизаций.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеОС КАК СписаниеОС
	|		ПО СписаниеОС.Ссылка = СобытияОСОрганизаций.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеОС2_4 КАК СписаниеОС24
	|		ПО СписаниеОС24.Ссылка = СобытияОСОрганизаций.Регистратор
	|		
	|ГДЕ
	|	СобытияОСОрганизаций.ОсновноеСредство = &ОсновноеСредство
	|	И СобытияОСОрганизаций.Период < &Период
	|	И СобытияОСОрганизаций.Период >= &ДатаВводаВЭксплуатациюБУ
	|	И СобытияОСОрганизаций.Событие = ЗНАЧЕНИЕ(Справочник.СобытияОС.ПустаяСсылка)
	|	И (ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) В (
	|			ТИП(Документ.ПринятиеКУчетуОС),
	|			ТИП(Документ.ПринятиеКУчетуОС2_4),
	|			ТИП(Документ.РазукомплектацияОС),
	|			ТИП(Документ.ВводОстатковВнеоборотныхАктивов),
	|			ТИП(Документ.ВводОстатковВнеоборотныхАктивов2_4),
	|			ТИП(Документ.ПеремещениеОС),
	|			ТИП(Документ.ПеремещениеОС2_4),
	|			ТИП(Документ.ПодготовкаКПередачеОС),
	|			ТИП(Документ.ПодготовкаКПередачеОС2_4))
	|		ИЛИ ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.СписаниеОС)
	|			И НЕ СписаниеОС.ЧастичнаяЛиквидация
	|		ИЛИ ТИПЗНАЧЕНИЯ(СобытияОСОрганизаций.Регистратор) = ТИП(Документ.СписаниеОС2_4)
	|			И НЕ СписаниеОС24.ЧастичнаяЛиквидация
	|	)";
	
	Запрос.Выполнить();
	
	СписокЗапросов = Новый Массив;
	
	Если ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(ДатаСведений) Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СобытияОС.Регистратор КАК Ссылка,
		|	ЕСТЬNULL(ВводОстатков.Дата, ЕСТЬNULL(ВводОстатков2_4.Дата, СобытияОС.Период)) КАК Дата,
		|	СобытияОС.Организация КАК Организация,
		|	СобытияОС.ОсновноеСредство КАК ОсновноеСредство
		|ПОМЕСТИТЬ втОбъектыДокументов
		|ИЗ
		|	СобытияОС КАК СобытияОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковВнеоборотныхАктивов КАК ВводОстатков
		|		ПО ВводОстатков.Ссылка = СобытияОС.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковВнеоборотныхАктивов2_4 КАК ВводОстатков2_4
		|		ПО ВводОстатков2_4.Ссылка = СобытияОС.Регистратор
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство,
		|	Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СобытияОС.Регистратор КАК Регистратор
		|ИЗ
		|	СобытияОС КАК СобытияОС";
		
		Результат = Запрос.Выполнить();
		
		ВнеоборотныеАктивы.ПолучитьСведенияОбОсновныхСредствахВДокументах(
			Запрос.МенеджерВременныхТаблиц, 
			Результат.Выгрузить().ВыгрузитьКолонку("Регистратор"));
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТИПЗНАЧЕНИЯ(СобытияОС.Регистратор) КАК НазваниеДокумента,
		|	СобытияОС.НомерДокумента КАК НомерДокумента,
		|	СобытияОС.Период КАК Период,
		|	СобытияОС.Событие КАК Событие,
		|	СобытияОС.Регистратор КАК Регистратор,
		|	втСведенияОбъектовДокументов.МОЛ КАК МОЛ,
		|	втСведенияОбъектовДокументов.Местонахождение КАК Местонахождение,
		|	втСведенияОбъектовДокументов.СтоимостьОборот КАК СтоимостьОборот,
		|	втСведенияОбъектовДокументов.АмортизацияОборот КАК АмортизацияОборот,
		|	ВЫБОР
		|		КОГДА СобытияОС.ВидСобытияОС = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Списание)
		|			ТОГДА ЕСТЬNULL(втСведенияОбъектовДокументов.СтоимостьРасход, 0) - ЕСТЬNULL(втСведенияОбъектовДокументов.АмортизацияРасход, 0)
		|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОС.Регистратор) = ТИП(Документ.ПодготовкаКПередачеОС)
		|			ТОГДА ЕСТЬNULL(втСведенияОбъектовДокументов.СтоимостьРасход, 0) - ЕСТЬNULL(втСведенияОбъектовДокументов.АмортизацияРасход, 0)
		|		КОГДА ТИПЗНАЧЕНИЯ(СобытияОС.Регистратор) = ТИП(Документ.ПодготовкаКПередачеОС2_4)
		|			ТОГДА ЕСТЬNULL(втСведенияОбъектовДокументов.ОстаточнаяСтоимость, 0)
		|		ИНАЧЕ ЕСТЬNULL(втСведенияОбъектовДокументов.ОстаточнаяСтоимость, 0)
		|	КОНЕЦ КАК ОстаточнаяСтоимость
		|ИЗ
		|	СобытияОС КАК СобытияОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОбъектовДокументов КАК втСведенияОбъектовДокументов
		|		ПО СобытияОС.Регистратор = втСведенияОбъектовДокументов.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период,
		|	НомерДокумента";

		СписокЗапросов.Добавить(ТекстЗапроса);
		
	Иначе	
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	МестонахождениеОСБухгалтерскийУчет.Период КАК Период,
		|	МестонахождениеОСБухгалтерскийУчет.МОЛ КАК МОЛ,
		|	МестонахождениеОСБухгалтерскийУчет.Местонахождение КАК Местонахождение
		|ПОМЕСТИТЬ МестонахождениеОСБухгалтерскийУчет
		|ИЗ
		|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет КАК МестонахождениеОСБухгалтерскийУчет
		|ГДЕ
		|	МестонахождениеОСБухгалтерскийУчет.ОсновноеСредство = &ОсновноеСредство
		|	И МестонахождениеОСБухгалтерскийУчет.Организация = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СобытияОС.Период КАК Период,
		|	МАКСИМУМ(МестонахождениеОСБухгалтерскийУчет.Период) КАК ПоследнийПериод
		|ПОМЕСТИТЬ МестонахождениеОСБухгалтерскийУчетСрезПоследнихПериодов
		|ИЗ
		|	СобытияОС КАК СобытияОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ МестонахождениеОСБухгалтерскийУчет КАК МестонахождениеОСБухгалтерскийУчет
		|		ПО СобытияОС.Период >= МестонахождениеОСБухгалтерскийУчет.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	СобытияОС.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследнихПериодов.Период КАК Период,
		|	МестонахождениеОСБухгалтерскийУчет.МОЛ КАК МОЛ,
		|	МестонахождениеОСБухгалтерскийУчет.Местонахождение КАК Местонахождение
		|ПОМЕСТИТЬ МестонахождениеОСБухгалтерскийУчетСрезПоследних
		|ИЗ
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследнихПериодов КАК МестонахождениеОСБухгалтерскийУчетСрезПоследнихПериодов
		|		ЛЕВОЕ СОЕДИНЕНИЕ МестонахождениеОСБухгалтерскийУчет КАК МестонахождениеОСБухгалтерскийУчет
		|		ПО МестонахождениеОСБухгалтерскийУчетСрезПоследнихПериодов.ПоследнийПериод = МестонахождениеОСБухгалтерскийУчет.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетаБухгалтерскогоУчетаОС.Период КАК Период,
		|	ВЫБОР 
		|		КОГДА СчетаБухгалтерскогоУчетаОС.ГруппаФинансовогоУчета <> ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаВнеоборотныхАктивов.ПустаяСсылка)
		|			ТОГДА СчетаБухгалтерскогоУчетаОС.ГруппаФинансовогоУчета.СчетУчета
		|		ИНАЧЕ СчетаБухгалтерскогоУчетаОС.СчетУчета
		|	КОНЕЦ КАК СчетУчета,
		|	ВЫБОР 
		|		КОГДА СчетаБухгалтерскогоУчетаОС.ГруппаФинансовогоУчета <> ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаВнеоборотныхАктивов.ПустаяСсылка)
		|			ТОГДА СчетаБухгалтерскогоУчетаОС.ГруппаФинансовогоУчета.СчетУчетаАмортизации
		|		ИНАЧЕ СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации
		|	КОНЕЦ КАК СчетНачисленияАмортизации
		|ПОМЕСТИТЬ СчетаБухгалтерскогоУчетаОС
		|ИЗ
		|	РегистрСведений.СчетаБухгалтерскогоУчетаОС КАК СчетаБухгалтерскогоУчетаОС
		|ГДЕ
		|	СчетаБухгалтерскогоУчетаОС.ОсновноеСредство = &ОсновноеСредство
		|	И СчетаБухгалтерскогоУчетаОС.Организация = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СобытияОС.ПериодОстатков КАК ПериодОстатков,
		|	МАКСИМУМ(СчетаБухгалтерскогоУчетаОС.Период) КАК ПоследнийПериод
		|ПОМЕСТИТЬ СчетаБухгалтерскогоУчетаОССрезПоследнихПериодов
		|ИЗ
		|	СобытияОС КАК СобытияОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаБухгалтерскогоУчетаОС КАК СчетаБухгалтерскогоУчетаОС
		|		ПО СобытияОС.ПериодОстатков >= СчетаБухгалтерскогоУчетаОС.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	СобытияОС.ПериодОстатков
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетаБухгалтерскогоУчетаОССрезПоследнихПериодов.ПериодОстатков КАК ПериодОстатков,
		|	СчетаБухгалтерскогоУчетаОС.СчетУчета КАК СчетУчета,
		|	СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации
		|ПОМЕСТИТЬ СчетаБухгалтерскогоУчетаОССрезПоследних
		|ИЗ
		|	СчетаБухгалтерскогоУчетаОССрезПоследнихПериодов КАК СчетаБухгалтерскогоУчетаОССрезПоследнихПериодов
		|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаБухгалтерскогоУчетаОС КАК СчетаБухгалтерскогоУчетаОС
		|		ПО СчетаБухгалтерскогоУчетаОССрезПоследнихПериодов.ПоследнийПериод = СчетаБухгалтерскогоУчетаОС.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Период КАК Период,
		|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СуммаКонечныйОстатокДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СуммаКонечныйОстатокКт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК СуммаОборотДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК СуммаОборотКт
		|ПОМЕСТИТЬ ХозрасчетныйОстаткиИОбороты
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		|			,
		|			&Период,
		|			Регистратор,
		|			,
		|			Счет В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета
		|				ИЗ
		|					СчетаБухгалтерскогоУчетаОССрезПоследних
		|			
		|				ОБЪЕДИНИТЬ ВСЕ
		|			
		|				ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисленияАмортизации
		|				ИЗ
		|					СчетаБухгалтерскогоУчетаОССрезПоследних),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
		|			Организация = &Организация
		|				И Субконто1 = &ОсновноеСредство) КАК ХозрасчетныйОстаткиИОбороты
		|ГДЕ
		|	НЕ ХозрасчетныйОстаткиИОбороты.Регистратор = НЕОПРЕДЕЛЕНО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СобытияОС.ПериодОстатков КАК ПериодОстатков,
		|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
		|	МАКСИМУМ(ХозрасчетныйОстаткиИОбороты.Период) КАК ПоследнийПериод
		|ПОМЕСТИТЬ ХозрасчетныйОстаткиИОборотыСрезПоследнихПериодов
		|ИЗ
		|	СобытияОС КАК СобытияОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстаткиИОбороты КАК ХозрасчетныйОстаткиИОбороты
		|		ПО СобытияОС.ПериодОстатков >= ХозрасчетныйОстаткиИОбороты.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	СобытияОС.ПериодОстатков,
		|	ХозрасчетныйОстаткиИОбороты.Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОборотыСрезПоследнихПериодов.ПериодОстатков КАК ПериодОстатков,
		|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СуммаКонечныйОстатокДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СуммаКонечныйОстатокКт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК СуммаОборотДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК СуммаОборотКт
		|ПОМЕСТИТЬ ХозрасчетныйОстаткиИОборотыСрезПоследних
		|ИЗ
		|	ХозрасчетныйОстаткиИОборотыСрезПоследнихПериодов КАК ХозрасчетныйОстаткиИОборотыСрезПоследнихПериодов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстаткиИОбороты КАК ХозрасчетныйОстаткиИОбороты
		|		ПО ХозрасчетныйОстаткиИОборотыСрезПоследнихПериодов.ПоследнийПериод = ХозрасчетныйОстаткиИОбороты.Период
		|			И ХозрасчетныйОстаткиИОборотыСрезПоследнихПериодов.Счет = ХозрасчетныйОстаткиИОбороты.Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТИПЗНАЧЕНИЯ(СобытияОС.Регистратор) КАК НазваниеДокумента,
		|	СобытияОС.НомерДокумента КАК НомерДокумента,
		|	СобытияОС.Период КАК Период,
		|	СобытияОС.Событие КАК Событие,
		|	СобытияОС.Регистратор КАК Регистратор,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.МОЛ КАК МОЛ,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК Местонахождение,
		|	СтоимостьОС.СуммаОборотКт КАК СтоимостьОборот,
		|	АмортизацияОС.СуммаОборотДт КАК АмортизацияОборот,
		|	ВЫБОР
		|		КОГДА СобытияОС.ВидСобытияОС В (ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Списание), ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Передача))
		|			ТОГДА ЕСТЬNULL(СтоимостьОС.СуммаОборотКт, 0) - ЕСТЬNULL(АмортизацияОС.СуммаОборотДт, 0)
		|		ИНАЧЕ ЕСТЬNULL(СтоимостьОС.СуммаКонечныйОстатокДт, 0) - ЕСТЬNULL(АмортизацияОС.СуммаКонечныйОстатокКт, 0)
		|	КОНЕЦ КАК ОстаточнаяСтоимость
		|ИЗ
		|	СобытияОС КАК СобытияОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ МестонахождениеОСБухгалтерскийУчетСрезПоследних КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
		|		ПО СобытияОС.Период = МестонахождениеОСБухгалтерскийУчетСрезПоследних.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаБухгалтерскогоУчетаОССрезПоследних КАК СчетаБухгалтерскогоУчетаОССрезПоследних
		|		ПО СобытияОС.ПериодОстатков = СчетаБухгалтерскогоУчетаОССрезПоследних.ПериодОстатков
		|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстаткиИОборотыСрезПоследних КАК СтоимостьОС
		|		ПО (СчетаБухгалтерскогоУчетаОССрезПоследних.ПериодОстатков = СтоимостьОС.ПериодОстатков)
		|			И (СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета = СтоимостьОС.Счет)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстаткиИОборотыСрезПоследних КАК АмортизацияОС
		|		ПО (СчетаБухгалтерскогоУчетаОССрезПоследних.ПериодОстатков = АмортизацияОС.ПериодОстатков)
		|			И (СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисленияАмортизации = АмортизацияОС.Счет)";

		СписокЗапросов.Добавить(ТекстЗапроса);
		
	КонецЕсли; 
	
	Запрос.Текст = СтрСоединить(СписокЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;

КонецФункции
 
#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбъектыЭксплуатации.Ссылка
	|ИЗ
	|	Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних КАК ПервоначальныеСведенияОС
	|		ПО ОбъектыЭксплуатации.Ссылка = ПервоначальныеСведенияОС.ОсновноеСредство
	|ГДЕ
	|	ОбъектыЭксплуатации.ГруппаОС = ЗНАЧЕНИЕ(Перечисление.ГруппыОС.ПустаяСсылка)
	|				И ПервоначальныеСведенияОС.ГруппаОС <> ЗНАЧЕНИЕ(Перечисление.ГруппыОС.ПустаяСсылка)
	|			ИЛИ ОбъектыЭксплуатации.АмортизационнаяГруппа = ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ПустаяСсылка)
	|				И ПервоначальныеСведенияОС.АмортизационнаяГруппа <> ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ПустаяСсылка)
	|			ИЛИ ОбъектыЭксплуатации.ИнвентарныйНомер = """"
	|				И ПервоначальныеСведенияОС.ИнвентарныйНомер <> """"
	|			ИЛИ ОбъектыЭксплуатации.КодПоОКОФ = ЗНАЧЕНИЕ(Справочник.ОбщероссийскийКлассификаторОсновныхФондов.ПустаяСсылка)
	|				И ПервоначальныеСведенияОС.КодПоОКОФ <> ЗНАЧЕНИЕ(Справочник.ОбщероссийскийКлассификаторОсновныхФондов.ПустаяСсылка)
	|			ИЛИ ОбъектыЭксплуатации.ШифрПоЕНАОФ = ЗНАЧЕНИЕ(Справочник.ЕдиныеНормыАмортизационныхОтчисленийОсновныхФондов.ПустаяСсылка)
	|				И ПервоначальныеСведенияОС.ШифрПоЕНАОФ <> ЗНАЧЕНИЕ(Справочник.ЕдиныеНормыАмортизационныхОтчисленийОсновныхФондов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТЧДрагоценныеМатериалы.Ссылка
	|ИЗ
	|	Справочник.ОбъектыЭксплуатации.ДрагоценныеМатериалы КАК ТЧДрагоценныеМатериалы
	|ГДЕ
	|	ТЧДрагоценныеМатериалы.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|	И ТЧДрагоценныеМатериалы.ДрагоценныйМатериал <> ЗНАЧЕНИЕ(Справочник.ДрагоценныеМатериалы.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОбъектыЭксплуатации.Ссылка
	|ИЗ
	|	Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
	|ГДЕ
	|	НЕ ОбъектыЭксплуатации.РеквизитНедвижимоеИмуществоОбновлен";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.ОбъектыЭксплуатации";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПараметрыТаблицыДляОбработки = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(
										Параметры.Очередь, ПолноеИмяОбъекта, МенеджерВременныхТаблиц);

	Если НЕ ПараметрыТаблицыДляОбработки.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ ПараметрыТаблицыДляОбработки.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПервоначальныеСведенияОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОС.ГруппаОС КАК ГруппаОС,
	|	ПервоначальныеСведенияОС.АмортизационнаяГруппа КАК АмортизационнаяГруппа,
	|	ПервоначальныеСведенияОС.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ПервоначальныеСведенияОС.КодПоОКОФ КАК КодПоОКОФ,
	|	ПервоначальныеСведенияОС.ШифрПоЕНАОФ КАК ШифрПоЕНАОФ,
	|	ЗаблокированныеДанные.Регистратор ЕСТЬ NULL КАК ЧитаемыеДанныеОбновлены
	|ПОМЕСТИТЬ ПервоначальныеСведенияОС
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			,
	|			ОсновноеСредство В
	|				(ВЫБРАТЬ
	|					ДанныеДляОбработки.Ссылка
	|				ИЗ
	|					ВТДляОбработки КАК ДанныеДляОбработки)) КАК ПервоначальныеСведенияОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокировано_ПервоначальныеСведения КАК ЗаблокированныеДанные
	|		ПО (ЗаблокированныеДанные.Регистратор = ПервоначальныеСведенияОС.Регистратор)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДляОбработки.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТЗаблокировано_ДрагоценныеМатериалы_Ссылки
	|ИЗ
	|	ВТДляОбработки КАК ДанныеДляОбработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыЭксплуатации.ДрагоценныеМатериалы КАК ТЧДрагоценныеМатериалы
	|		ПО (ТЧДрагоценныеМатериалы.Ссылка = ДанныеДляОбработки.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаблокировано_ДрагоценныеМатериалы КАК ЗаблокированныеДанные
	|		ПО (ЗаблокированныеДанные.Ссылка = ТЧДрагоценныеМатериалы.ДрагоценныйМатериал)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧДрагоценныеМатериалы.ДрагоценныйМатериал КАК ДрагоценныйМатериал,
	|	ТЧДрагоценныеМатериалы.ДрагоценныйМатериал.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	ВТДляОбработки КАК ДанныеДляОбработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыЭксплуатации.ДрагоценныеМатериалы КАК ТЧДрагоценныеМатериалы
	|		ПО (ТЧДрагоценныеМатериалы.Ссылка = ДанныеДляОбработки.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокировано_ДрагоценныеМатериалы КАК ЗаблокированныеДанные
	|		ПО (ЗаблокированныеДанные.Ссылка = ТЧДрагоценныеМатериалы.ДрагоценныйМатериал)
	|ГДЕ
	|	ЗаблокированныеДанные.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляОбработки.Ссылка КАК Ссылка,
	|	ОбъектыЭксплуатации.ВерсияДанных КАК ВерсияДанных,
	|	ПервоначальныеСведенияОС.ГруппаОС КАК ГруппаОС,
	|	ПервоначальныеСведенияОС.АмортизационнаяГруппа КАК АмортизационнаяГруппа,
	|	ПервоначальныеСведенияОС.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ПервоначальныеСведенияОС.КодПоОКОФ КАК КодПоОКОФ,
	|	ПервоначальныеСведенияОС.ШифрПоЕНАОФ КАК ШифрПоЕНАОФ
	|ИЗ
	|	ВТДляОбработки КАК ДанныеДляОбработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
	|		ПО (ОбъектыЭксплуатации.Ссылка = ДанныеДляОбработки.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияОС КАК ПервоначальныеСведенияОС
	|		ПО (ПервоначальныеСведенияОС.ОсновноеСредство = ДанныеДляОбработки.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокировано_ДрагоценныеМатериалы_Ссылки КАК ВТЗаблокировано_ДрагоценныеМатериалы_Ссылки
	|		ПО (ВТЗаблокировано_ДрагоценныеМатериалы_Ссылки.Ссылка = ДанныеДляОбработки.Ссылка)
	|ГДЕ
	|	ЕСТЬNULL(ПервоначальныеСведенияОС.ЧитаемыеДанныеОбновлены, ИСТИНА)
	|	И ВТЗаблокировано_ДрагоценныеМатериалы_Ссылки.Ссылка ЕСТЬ NULL";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТДляОбработки", ПараметрыТаблицыДляОбработки.ИмяВременнойТаблицы);
	
	СписокЧитаемыхДанных = Новый СписокЗначений;
	СписокЧитаемыхДанных.Добавить("РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет", "ВТЗаблокировано_ПервоначальныеСведения");
	СписокЧитаемыхДанных.Добавить("Справочник.ДрагоценныеМатериалы", "ВТЗаблокировано_ДрагоценныеМатериалы");
	Для каждого ЭлементСписка Из СписокЧитаемыхДанных Цикл
		ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
		ДополнительныеПараметры.ИмяВременнойТаблицы = ЭлементСписка.Представление;
		ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(
				Параметры.Очередь, 
				ЭлементСписка.Значение, 
				МенеджерВременныхТаблиц, 
				ДополнительныеПараметры);
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаДрагоценныеМатериалы = Результат[Результат.ВГраница()-1].Выгрузить();
	ТаблицаДрагоценныеМатериалы.Индексы.Добавить("ДрагоценныйМатериал");
	
	Выборка = Результат[Результат.ВГраница()].Выбрать();
 	Пока Выборка.Следующий() Цикл
 		
 		НачатьТранзакцию();
		
 		Попытка
			
 			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ОбъектыЭксплуатации");
 			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			
 			Блокировка.Заблокировать();
 			
			ДанныеОбъекта = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(Выборка.Ссылка, Выборка.ВерсияДанных, Параметры.Очередь);
			Если ДанныеОбъекта = Неопределено Тогда
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеОбъекта.ГруппаОС)
				И ЗначениеЗаполнено(Выборка.ГруппаОС) Тогда
				ДанныеОбъекта.ГруппаОС = Выборка.ГруппаОС;
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(ДанныеОбъекта.АмортизационнаяГруппа)
				И ЗначениеЗаполнено(Выборка.АмортизационнаяГруппа)Тогда
				ДанныеОбъекта.АмортизационнаяГруппа = Выборка.АмортизационнаяГруппа;
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(ДанныеОбъекта.ИнвентарныйНомер)
				И ЗначениеЗаполнено(Выборка.ИнвентарныйНомер)Тогда
				ДанныеОбъекта.ИнвентарныйНомер = Выборка.ИнвентарныйНомер;
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(ДанныеОбъекта.КодПоОКОФ)
				И ЗначениеЗаполнено(Выборка.КодПоОКОФ)Тогда
				ДанныеОбъекта.КодПоОКОФ = Выборка.КодПоОКОФ;
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(ДанныеОбъекта.ШифрПоЕНАОФ)
				И ЗначениеЗаполнено(Выборка.ШифрПоЕНАОФ)Тогда
				ДанныеОбъекта.ШифрПоЕНАОФ = Выборка.ШифрПоЕНАОФ;
			КонецЕсли; 
			
			Для каждого ДанныеСтроки Из ДанныеОбъекта.ДрагоценныеМатериалы Цикл
				Если ЗначениеЗаполнено(ДанныеСтроки.ДрагоценныйМатериал)
					И НЕ ЗначениеЗаполнено(ДанныеСтроки.ЕдиницаИзмерения) Тогда
					СтрокаЕдИзм = ТаблицаДрагоценныеМатериалы.Найти(ДанныеСтроки.ДрагоценныйМатериал, "ДрагоценныйМатериал");
					Если СтрокаЕдИзм <> Неопределено Тогда
						ДанныеСтроки.ЕдиницаИзмерения = СтрокаЕдИзм.ЕдиницаИзмерения;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ ДанныеОбъекта.РеквизитНедвижимоеИмуществоОбновлен Тогда
				
				ДанныеОбъекта.НедвижимоеИмущество = ВнеоборотныеАктивыЛокализацияКлиентСервер.ЭтоНедвижимоеИмущество(ДанныеОбъекта.ГруппаОС);
				ДанныеОбъекта.РеквизитНедвижимоеИмуществоОбновлен = Истина;
				
			КонецЕсли;
			
			Если ДанныеОбъекта.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДанныеОбъекта);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
 		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать объект: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									Выборка.Ссылка.Метаданные(),
									Выборка.Ссылка,
									ТекстСообщения);
									
 		КонецПопытки;
 
 	КонецЦикла;
 		
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли