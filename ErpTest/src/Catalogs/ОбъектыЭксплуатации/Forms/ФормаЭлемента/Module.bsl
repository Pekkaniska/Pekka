
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Ложь);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		Элементы.ДекорацияЗаголовокБУ.Видимость = Ложь;
		Элементы.ДекорацияЗаголовокНУ.Видимость = Ложь;
		Элементы.ДекорацияЗаголовокПР.Видимость = Ложь;
		Элементы.ДекорацияЗаголовокВР.Видимость = Ложь;
	КонецЕсли; 
	
	//++ НЕ УТКА
	Если Параметры.Свойство("СообщитьОбОшибках") И Параметры.СообщитьОбОшибках Тогда
		
		ВыполнитьПроверкуЗаполненияНаСервере();
		
	КонецЕсли;
	//-- НЕ УТКА
	
	#Область УниверсальныеМеханизмы
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
//++ Рарус Лимаренко 21.11.2017
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
//-- Рарус Лимаренко 21.11.2017
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	#КонецОбласти
	
	УстановитьВидимостьКомандВводаНаОсновании();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	//++ НЕ УТКА
	Если ИспользоватьУправлениеРемонтами Тогда
		
		Если ПроверитьЗаполнениеПриЗаписи Тогда
			
			ВыполнитьПроверкуЗаполненияНаСервере(Отказ);
			
		КонецЕсли
		
	КонецЕсли;
	//-- НЕ УТКА
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ТекущийОбъект.ОбъектБытовогоНазначения = Булево(КлассификацияДМ4);
	
	ТекущийОбъект.ПараметрыУчетаНаработок.Загрузить(
		ПараметрыУчетаНаработок.Выгрузить( , "ПоказательНаработки, НазначенныйРесурс, Источник"));
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПроверитьЗаполнениеПриЗаписи = Ложь;
	ЕстьОшибкиВПодчиненных = Ложь;
	
	ЗаполнитьПараметрыОтображения(ТекущийОбъект);
	
	//++ НЕ УТКА
	ЗаполнитьПараметрыУчетаНаработок(ТекущийОбъект.ПараметрыУчетаНаработок, ТекущийОбъект.Класс);
	//-- НЕ УТКА
	
	УстановитьДоступностьЭлементовНаСервере();
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "РазблокировкаОбъектаЭксплуатации" Тогда
		Если Параметр.ОбъектЭксплуатации = Объект.Ссылка Тогда
			Редактируется = Истина;
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьФорму", 1);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Запись_КлассыОбъектовЭксплуатации" Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьФорму", 1);
	ИначеЕсли ИмяСобытия = "Запись_ПринятиеКУчетуОС"
		ИЛИ ИмяСобытия = "Запись_ПринятиеКУчетуОСМеждународныйУчет"
		ИЛИ ИмяСобытия = "Запись_СписаниеОС"
		ИЛИ ИмяСобытия = "Запись_СписаниеОСМеждународныйУчет"
		ИЛИ ИмяСобытия = "Запись_ПринятиеКУчетуОС2_4" 
		ИЛИ ИмяСобытия = "Запись_ПеремещениеОС2_4" 
		ИЛИ ИмяСобытия = "Запись_ПоступлениеАрендованныхОС"
		ИЛИ ИмяСобытия = "Запись_СписаниеОС2_4" Тогда
		ПриИзмененииДокументовОС();
	КонецЕсли;
	
	Если ИмяСобытия = "ВыборАмортизационнойГруппыОС" И Источник = ЭтаФорма.УникальныйИдентификатор Тогда
		
		ОбработатьВыборКодаПоОКОФ(Параметр);
		
	КонецЕсли;
	
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Справочник.ОбъектыЭксплуатации.Форма.РазблокированиеРеквизитов") Тогда
		ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(ЭтотОбъект, ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	Оповестить("Запись_ОбъектыЭксплуатации", ПараметрыЗаписи, Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЕстьОшибкиВПодчиненныхНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//++ НЕ УТКА
	Если ЗначениеЗаполнено(УзелСОшибками) Тогда
		
		ОткрытьФорму(
			"Справочник.УзлыОбъектовЭксплуатации.ФормаОбъекта",
			Новый Структура(
				"Ключ, СообщитьОбОшибках",
				УзелСОшибками, Истина));
		
	Иначе
		
		ОткрытьФорму(
			"Отчет.КонтрольКорректностиЗаполненияОбъектовЭксплуатации.Форма",
			Новый Структура(
				"ОбъектЭксплуатации",
				Объект.Ссылка));
		
	КонецЕсли;
	//-- НЕ УТКА
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Элементы.НаименованиеПолное.СписокВыбора.Очистить();
	Элементы.НаименованиеПолное.СписокВыбора.Добавить(Объект.Наименование);
	
	Если Не ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КлассПриИзменении(Элемент)
	
	КлассПриИзмененииНаСервере();
	ОчиститьСообщения();
	
КонецПроцедуры

&НаСервере
Процедура КлассПриИзмененииНаСервере()
	
	ОбновитьЭлементыДополнительныхРеквизитов();
	ИспользуютсяПодклассы = Ложь;
	
	//++ НЕ УТКА
	Если ЗначениеЗаполнено(Объект.Класс) Тогда
		ИспользуютсяПодклассы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Класс, "ИспользуютсяПодклассы");
		СоставРеквизитов.Загрузить(СоставРеквизитовПоКлассуОбъектаЭксплуатации());
	Иначе
		ИспользуютсяПодклассы = Ложь;
		СоставРеквизитов.Загрузить(Справочники.ОбъектыЭксплуатации.СоставРеквизитов());
	КонецЕсли;
	
	ЗаполнитьПараметрыУчетаНаработок(ПараметрыУчетаНаработок, Объект.Класс);
	//-- НЕ УТКА
	
	УстановитьДоступностьЭлементовНаСервере();
	//++ НЕ УТКА
	НастроитьЭлементыФормыПоКлассуОбъекта();
	//-- НЕ УТКА
	
КонецПроцедуры

&НаКлиенте
Процедура СведенияПринятКУчетуОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если СтрНайти(НавигационнаяСсылкаФорматированнойСтроки, "#Создать") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
		ОткрытьФорму("Документ.ПринятиеКУчетуОС2_4.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СведенияМестонахождениеАдресОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформациейКлиент.ПоказатьАдресНаКарте(НавигационнаяСсылкаФорматированнойСтроки, "Яндекс.Карты");
	
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКОФПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.АмортизационнаяГруппа) И ЗначениеЗаполнено(Объект.КодПоОКОФ) Тогда
		КодОКОФПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКОФНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("КодПоОКОФ", Объект.КодПоОКОФ);
	ПараметрыОткрытия.Вставить("АмортизационнаяГруппа", Объект.АмортизационнаяГруппа);
	
	ОткрытьФорму("Справочник.ОбъектыЭксплуатации.Форма.ФормаВыбораАмортизационнойГруппы", ПараметрыОткрытия, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаОСПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ГруппаОС) Тогда
		Объект.НедвижимоеИмущество = ВнеоборотныеАктивыЛокализацияКлиентСервер.ЭтоНедвижимоеИмущество(Объект.ГруппаОС);
	КонецЕсли; 
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДрагоценныеМатериалы

&НаКлиенте
Процедура ДрагоценныеМатериалыДрагоценныйМатериалПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДрагоценныеМатериалы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДрагоценныйМатериал) Тогда
		ТекущиеДанные.ЕдиницаИзмерения = ЕдиницаИзмерения(ТекущиеДанные.ДрагоценныйМатериал);
	Иначе
		ТекущиеДанные.ЕдиницаИзмерения = ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка");
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьПроверкуЗаполнения(Команда)
	
	//++ НЕ УТКА
	Отказ = Ложь;
	ОчиститьСообщения();
	ВыполнитьПроверкуЗаполненияНаСервере(Отказ);
	Если Не Отказ Тогда
		
		ПоказатьОповещениеПользователя(
			НСтр("ru='Проверка выполнена'"),
			,
			НСтр("ru='Ошибок заполнения реквизитов не обнаружено'"),
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	//-- НЕ УТКА
	
	Возврат; // Пустой обработчик для УТ и КА
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусВЭксплуатации(Команда)
	
	ПроверитьЗаполнениеПриЗаписи = Истина;
	УстановитьНовыйСтатусИЗаписать(СтатусВЭксплуатации);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЛиквидирован(Команда)
	
	ПроверитьЗаполнениеПриЗаписи = Истина;
	УстановитьНовыйСтатусИЗаписать(СтатусЛиквидирован);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусРедактируется(Команда)
	
	УстановитьНовыйСтатусИЗаписать(СтатусРедактируется);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИнвентарныйНомер(Команда)
	
	Объект.ИнвентарныйНомер = Объект.Код;
	
КонецПроцедуры

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	ЗаблокированныеРеквизиты = ЗапретРедактированияРеквизитовОбъектовКлиент.Реквизиты(ЭтотОбъект);
	Если ЗаблокированныеРеквизиты.Количество() > 0 Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
		ПараметрыФормы.Вставить("ЗаблокированныеРеквизиты", ЗаблокированныеРеквизиты);
		ОткрытьФорму(
			"Справочник.ОбъектыЭксплуатации.Форма.РазблокированиеРеквизитов",
			ПараметрыФормы,
			ЭтотОбъект);
	Иначе
		ЗапретРедактированияРеквизитовОбъектовКлиент.ПоказатьПредупреждениеВсеВидимыеРеквизитыРазблокированы();
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ИспользоватьПроизводство = Ложь;
	ИспользоватьУправлениеРемонтами = Ложь;
	//++ НЕ УТКА
	ИспользоватьПроизводство = ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство");
	ИспользоватьУправлениеРемонтами = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеРемонтами");
	//-- НЕ УТКА
	
	ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	Если ВалютаУпр <> ВалютаРегл Тогда
		Элементы.ДекорацияЗаголовокУУ.Заголовок = СтрШаблон(НСтр("ru = 'УУ (%1):'"), Строка(ВалютаУпр));
		Элементы.ДекорацияЗаголовокБУ.Заголовок = СтрШаблон(НСтр("ru = 'БУ (%1):'"), Строка(ВалютаРегл));
		Элементы.ДекорацияЗаголовокНУ.Заголовок = СтрШаблон(НСтр("ru = 'НУ (%1):'"), Строка(ВалютаРегл));
		Элементы.ДекорацияЗаголовокПР.Заголовок = СтрШаблон(НСтр("ru = 'ПР (%1):'"), Строка(ВалютаРегл));
		Элементы.ДекорацияЗаголовокВР.Заголовок = СтрШаблон(НСтр("ru = 'ВР (%1):'"), Строка(ВалютаРегл));
	КонецЕсли; 
	
	КлассификацияДМ4 = Число(Объект.ОбъектБытовогоНазначения);
	
	СтатусВЭксплуатации = Перечисления.СтатусыОбъектовЭксплуатации.ВЭксплуатации;
	СтатусЛиквидирован = Перечисления.СтатусыОбъектовЭксплуатации.Ликвидирован;
	СтатусРедактируется = Перечисления.СтатусыОбъектовЭксплуатации.Редактируется;
	ПроверитьЗаполнениеПриЗаписи = Ложь;
	ЕстьОшибкиВПодчиненных = Ложь;
	
	Элементы.НаименованиеПолное.СписокВыбора.Очистить();
	Элементы.НаименованиеПолное.СписокВыбора.Добавить(Объект.Наименование);
	
	ЗаполнитьПараметрыОтображения(Объект);
	
	//++ НЕ УТКА
	ЗаполнитьПараметрыУчетаНаработок(Объект.ПараметрыУчетаНаработок, Объект.Класс);
	//-- НЕ УТКА
	
	УстановитьДоступностьЭлементовНаСервере();
	
	//++ НЕ УТКА
	НастроитьЭлементыФормыПоКлассуОбъекта();
	//-- НЕ УТКА
	
	ЗаполнитьПодсказкуКодОКОФ();
	
	ЗаполнитьСведенияОбУчете();
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДокументовОС()

	УстановитьВидимостьКомандВводаНаОсновании();
	ЗаполнитьСведенияОбУчете();
	
КонецПроцедуры
 
&НаСервере
Процедура УстановитьВидимостьКомандВводаНаОсновании()

	АдресНастроек = ЭтаФорма.ПараметрыПодключаемыхКоманд.АдресТаблицыКоманд;
	ТаблицаКоманд = ПолучитьИзВременногоХранилища(АдресНастроек);
	
	Если ПолучитьФункциональнуюОпцию("ОтображатьВнеоборотныеАктивы2_2") Тогда
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Организация = УчетОСВызовСервера.ОрганизацияВКоторойОСПринятоКУчету(Объект.Ссылка);
			ПринятКУчету = ЗначениеЗаполнено(Организация);
			//++ НЕ УТКА
			Организация = МеждународныйУчетВнеоборотныеАктивы.ОрганизацияВКоторойОСПринятоКУчету(Объект.Ссылка);
			ПринятКЧетуМФУ = ЗначениеЗаполнено(Организация);
			//-- НЕ УТКА
		Иначе
			ПринятКУчету = Ложь;
			ПринятКЧетуМФУ = Ложь;
		КонецЕсли;
		
		Если ПравоДоступа("Добавление", Метаданные.Документы.ПринятиеКУчетуОС) Тогда
			УстановитьВидимостьКомандыВводаНаОсновании("ПринятиеКУчетуОС", ТаблицаКоманд, НЕ ПринятКУчету);
		КонецЕсли;
		Если ПравоДоступа("Добавление", Метаданные.Документы.ИзменениеСостоянияОС) Тогда
			УстановитьВидимостьКомандыВводаНаОсновании("ИзменениеСостоянияОС", ТаблицаКоманд, ПринятКУчету);
		КонецЕсли;
		Если ПравоДоступа("Добавление", Метаданные.Документы.ИзменениеПараметровОС) Тогда
			УстановитьВидимостьКомандыВводаНаОсновании("ИзменениеПараметровОС", ТаблицаКоманд, ПринятКУчету);
		КонецЕсли;
		Если ПравоДоступа("Добавление", Метаданные.Документы.СписаниеОС) Тогда
			УстановитьВидимостьКомандыВводаНаОсновании("СписаниеОС", ТаблицаКоманд, ПринятКУчету);
		КонецЕсли;
		
		//++ НЕ УТКА
		Если ПравоДоступа("Добавление", Метаданные.Документы.ПринятиеКУчетуОСМеждународныйУчет) Тогда
			УстановитьВидимостьКомандыВводаНаОсновании("ПринятиеКУчетуОСМеждународныйУчет", ТаблицаКоманд, НЕ ПринятКЧетуМФУ);
		КонецЕсли; 
		Если ПравоДоступа("Добавление", Метаданные.Документы.СписаниеОСМеждународныйУчет) Тогда
			УстановитьВидимостьКомандыВводаНаОсновании("СписаниеОСМеждународныйУчет", ТаблицаКоманд, ПринятКЧетуМФУ);
		КонецЕсли; 
		Если ПравоДоступа("Добавление", Метаданные.Документы.ПеремещениеОСМеждународныйУчет) Тогда
			УстановитьВидимостьКомандыВводаНаОсновании("ПеремещениеОСМеждународныйУчет", ТаблицаКоманд, ПринятКЧетуМФУ);
		КонецЕсли; 
		//-- НЕ УТКА
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") Тогда
	
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ПервоначальныеСведения = Справочники.ОбъектыЭксплуатации.ПервоначальныеСведения(Объект.Ссылка);
			МожноПринятьКУчету = ПервоначальныеСведения.ДатаВводаВЭксплуатациюБУ = '000101010000'
								ИЛИ ПервоначальныеСведения.ДатаВводаВЭксплуатациюУУ = '000101010000';
			ПринятКУчету = ПервоначальныеСведения.ДатаВводаВЭксплуатациюБУ <> '000101010000'
								ИЛИ ПервоначальныеСведения.ДатаВводаВЭксплуатациюУУ <> '000101010000';
			ПринятоКЗабалансовомуУчету = 
				ПервоначальныеСведения.СостояниеБУ = Перечисления.СостоянияОС.ПринятоКЗабалансовомуУчету
				ИЛИ ПервоначальныеСведения.СостояниеУУ = Перечисления.СостоянияОС.ПринятоКЗабалансовомуУчету;
		Иначе
			МожноПринятьКУчету = Ложь;
			ПринятКУчету = Ложь;
			ПринятоКЗабалансовомуУчету = Ложь;
		КонецЕсли;
		
		Если ПравоДоступа("Добавление", Метаданные.Документы.ПринятиеКУчетуОС2_4) Тогда
			УстановитьВидимостьКомандыВводаНаОсновании("ПринятиеКУчетуОС2_4", ТаблицаКоманд, МожноПринятьКУчету);
		КонецЕсли; 
		Если ПравоДоступа("Добавление", Метаданные.Документы.ИзменениеПараметровОС2_4) Тогда
			УстановитьВидимостьКомандыВводаНаОсновании("ИзменениеПараметровОС2_4", ТаблицаКоманд, ПринятКУчету И НЕ ПринятоКЗабалансовомуУчету);
		КонецЕсли; 
		Если ПравоДоступа("Добавление", Метаданные.Документы.ПеремещениеОС2_4) Тогда
			УстановитьВидимостьКомандыВводаНаОсновании("ПеремещениеОС2_4", ТаблицаКоманд, ПринятКУчету И НЕ ПринятоКЗабалансовомуУчету);
		КонецЕсли; 
		Если ПравоДоступа("Добавление", Метаданные.Документы.СписаниеОС2_4) Тогда
			УстановитьВидимостьКомандыВводаНаОсновании("СписаниеОС2_4", ТаблицаКоманд, ПринятКУчету И НЕ ПринятоКЗабалансовомуУчету);
		КонецЕсли; 
		Если ПравоДоступа("Добавление", Метаданные.Документы.МодернизацияОС2_4) Тогда
			УстановитьВидимостьКомандыВводаНаОсновании("МодернизацияОС2_4", ТаблицаКоманд, ПринятКУчету И НЕ ПринятоКЗабалансовомуУчету);
		КонецЕсли; 
		Если ПравоДоступа("Добавление", Метаданные.Документы.ПодготовкаКПередачеОС2_4) Тогда
			УстановитьВидимостьКомандыВводаНаОсновании("ПодготовкаКПередачеОС2_4", ТаблицаКоманд, ПринятКУчету И НЕ ПринятоКЗабалансовомуУчету);
		КонецЕсли; 
		Если ПравоДоступа("Добавление", Метаданные.Документы.ПереоценкаОС2_4) Тогда
			УстановитьВидимостьКомандыВводаНаОсновании("ПереоценкаОС2_4", ТаблицаКоманд, ПринятКУчету И НЕ ПринятоКЗабалансовомуУчету);
		КонецЕсли; 
	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКомандыВводаНаОсновании(ИмяДокумента, ТаблицаКоманд, ВидимостьКоманды)

	ТекСтрока = ТаблицаКоманд.Найти("Документ." + ИмяДокумента, "Менеджер");
	Если ТекСтрока <> Неопределено Тогда
		Элементы[ТекСтрока.ИмяВФорме].Видимость = ВидимостьКоманды;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьНовыйСтатусИЗаписать(Статус)
	
	ОчиститьСообщения();
	
	ТекущийСтатус = Объект.Статус;
	Объект.Статус = Статус;
	
	Если Не Записать() Тогда
		Объект.Статус = ТекущийСтатус;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовНаСервере()
	
	МассивЭлементов = Новый Массив();
	// Элементы управления шапки
	МассивЭлементов.Добавить("ДатаСведений");
	МассивЭлементов.Добавить("Родитель");
	МассивЭлементов.Добавить("Код");
	МассивЭлементов.Добавить("Наименование");
	МассивЭлементов.Добавить("НаименованиеПолное");
	МассивЭлементов.Добавить("ГруппаОсновныеРеквизиты");
	МассивЭлементов.Добавить("Описание");
	// Табличные части
	МассивЭлементов.Добавить("РабочиеЦентры");
	МассивЭлементов.Добавить("ПараметрыУчетаНаработок");
	МассивЭлементов.Добавить("КлассификацияДМ4");
	МассивЭлементов.Добавить("ДрагоценныеМатериалы");
	
	// Дополнительные реквизиты
	МассивЭлементов.Добавить("ГруппаДополнительныеРеквизиты");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", Не Редактируется);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Подкласс", "Видимость", ИспользуютсяПодклассы);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницаРабочиеЦентры", "Видимость", ИспользоватьПроизводство И ИспользоватьУправлениеРемонтами);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияКартинкаЕстьОшибкиПодчиненных", "Видимость", ЕстьОшибкиВПодчиненных);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УстановитьСтатусРедактируется", "Доступность", Объект.Статус<>СтатусРедактируется);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УстановитьСтатусВЭксплуатации", "Доступность", Объект.Статус<>СтатусВЭксплуатации);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УстановитьСтатусЛиквидирован", "Доступность", Объект.Статус<>СтатусЛиквидирован);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницаПараметрыУчетаНаработок", "Видимость", ПараметрыУчетаНаработок.Количество()>0);
	
	Элементы.КоманднаяПанельСтатус.Видимость = ДоступноИзменениеСтатуса;
	
	Элементы.ГруппаСтатус.Видимость = ИспользоватьУправлениеРемонтами;
	
	УстановитьДоступностьПоСостояниюОС();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоСостояниюОС()

	Элементы.ИнвентарныйНомер.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	
	Если НЕ ЗначениеЗаполнено(Объект.ИнвентарныйНомер)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат
	КонецЕсли; 

	Если ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(ТекущаяДатаСеанса()) Тогда
		ПервоначальныеСведения = Справочники.ОбъектыЭксплуатации.ПервоначальныеСведения(Объект.Ссылка);
		ПринятКУчету = ПервоначальныеСведения.СостояниеУУ = Перечисления.СостоянияОС.ПринятоКУчету 
						ИЛИ ПервоначальныеСведения.СостояниеБУ = Перечисления.СостоянияОС.ПринятоКУчету
						ИЛИ ПервоначальныеСведения.СостояниеБУ = Перечисления.СостоянияОС.ПринятоКЗабалансовомуУчету;
	Иначе
		ОрганизацияОС = УчетОСВызовСервера.ОрганизацияВКоторойОСПринятоКУчету(Объект.Ссылка);
		ПринятКУчету = ЗначениеЗаполнено(ОрганизацияОС);
	КонецЕсли;
	
	Элементы.ЗаполнитьИнвентарныйНомер.Видимость = НЕ ПринятКУчету;
	
	Элементы.ИнвентарныйНомер.ОтображениеПредупрежденияПриРедактировании = 
		?(ПринятКУчету, ОтображениеПредупрежденияПриРедактировании.Отображать, ОтображениеПредупрежденияПриРедактировании.НеОтображать);
	
КонецПроцедуры

// Возвращает структуру с параметрами отображения элемента справочника в форме
//
&НаСервере
Процедура ЗаполнитьПараметрыОтображения(ОбъектЗаполнения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтатусЗаписанногоОбъекта = ОбъектЗаполнения.Статус;
	
	Редактируется = (Не ИспользоватьУправлениеРемонтами) Или (Не ЗначениеЗаполнено(ОбъектЗаполнения.Статус) Или ОбъектЗаполнения.Статус = СтатусРедактируется);
	ИспользуютсяПодклассы = Ложь;
	//++ НЕ УТКА
	Если ИспользоватьУправлениеРемонтами И ЗначениеЗаполнено(Объект.Класс) Тогда
		ИспользуютсяПодклассы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектЗаполнения.Класс, "ИспользуютсяПодклассы");
		СоставРеквизитов.Загрузить(СоставРеквизитовПоКлассуОбъектаЭксплуатации());
	Иначе
		ИспользуютсяПодклассы = Ложь;
		СоставРеквизитов.Загрузить(Справочники.ОбъектыЭксплуатации.СоставРеквизитов());
	КонецЕсли;
	//-- НЕ УТКА
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ДоступноИзменениеСтатуса = ПравоДоступа("Изменение", Метаданные.Справочники.ОбъектыЭксплуатации);
	
КонецПроцедуры

//++ НЕ УТКА

&НаСервере
Процедура НастроитьЭлементыФормыПоКлассуОбъекта()
	
	Для Каждого Реквизит Из СоставРеквизитов Цикл
		
		Имя = СокрЛП(Реквизит.Имя);
		
		//++ Рарус Лимаренко 22.06.2018
		Если Имя = "пкЭтоСервиснаяТехника" Или Имя = "пкЗапретАренды" Тогда	
			Продолжить;		
		КонецЕсли;
		//-- Рарус Лимаренко 22.06.2018
		
		Элемент = Элементы.Найти(Имя);
		Если Элемент <> Неопределено Тогда
			
			Элемент.АвтоОтметкаНезаполненного = Реквизит.ОбязателенДляЗаполнения;
			Элемент.ОтметкаНезаполненного = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура проверки заполнения
//
&НаСервере
Процедура ВыполнитьПроверкуЗаполненияНаСервере(Отказ=Ложь)
	
	ПараметрыПроверки = Справочники.ОбъектыЭксплуатации.ПараметрыПроверкиЗаполнения();
	ПараметрыПроверки.Форма = ЭтаФорма;
	ПараметрыПроверки.СообщатьОшибки = Ложь;
	
	Справочники.ОбъектыЭксплуатации.ПроверитьЗаполнение(Объект, ПараметрыПроверки, Отказ);
	
	Если Отказ Тогда
		
		ЕстьОшибкиВПодчиненных = ПараметрыПроверки.ОтказПроверкиУзлов;
		
		ОбъектыЭксплуатации.СообщитьОшибкиПроверкиЗаполнения(ПараметрыПроверки.ПотокОшибок);
		
	КонецЕсли;
	
	Если ЕстьОшибкиВПодчиненных Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Есть ошибки заполнения подчиненных узлов'"),
			,
			"ЕстьОшибкиВПодчиненных");
		
		УзелСОшибками = Справочники.УзлыОбъектовЭксплуатации.ПустаяСсылка();
		Если ПараметрыПроверки.ПараметрыПроверкиУзлов.ПотокОшибок.СчетчикОшибок.Количество() = 1 Тогда
			Для Каждого ОбъектОшибок Из ПараметрыПроверки.ПараметрыПроверкиУзлов.ПотокОшибок.СчетчикОшибок Цикл
				УзелСОшибками = ОбъектОшибок.Ключ;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДекорацияКартинкаЕстьОшибкиПодчиненных",
		"Видимость",
		ЕстьОшибкиВПодчиненных);
	
КонецПроцедуры

&НаСервере
Функция СоставРеквизитовПоКлассуОбъектаЭксплуатации()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(СоставРеквизитов.Имя КАК СТРОКА(255)) КАК Имя,
		|	ВЫРАЗИТЬ(СоставРеквизитов.Синоним КАК СТРОКА(255)) КАК Синоним,
		|	ВЫРАЗИТЬ(СоставРеквизитов.ОбязателенДляЗаполнения КАК БУЛЕВО) КАК ОбязателенДляЗаполнения,
		|	ВЫРАЗИТЬ(СоставРеквизитов.ТолькоПросмотрОбязательности КАК БУЛЕВО) КАК ТолькоПросмотрОбязательности
		|ПОМЕСТИТЬ РеквизитыОбъектов
		|ИЗ
		|	&СоставРеквизитовОбъекта КАК СоставРеквизитов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Реквизиты.ИмяРеквизита КАК Имя,
		|	Реквизиты.ОбязателенДляЗаполнения КАК ОбязателенДляЗаполнения
		|ПОМЕСТИТЬ РеквизитыОбъектовКласса
		|ИЗ
		|	Справочник.КлассыОбъектовЭксплуатации.РеквизитыДляКонтроля КАК Реквизиты
		|ГДЕ
		|	Реквизиты.Ссылка = &Класс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(Реквизиты.Имя, РеквизитыДляКонтроляОбъектов.Имя) КАК Имя,
		|	ЕСТЬNULL(Реквизиты.ОбязателенДляЗаполнения, ЛОЖЬ) КАК ОбязателенДляЗаполнения
		|ИЗ
		|	РеквизитыОбъектовКласса КАК Реквизиты
		|		ПОЛНОЕ СОЕДИНЕНИЕ РеквизитыОбъектов КАК РеквизитыДляКонтроляОбъектов
		|		ПО Реквизиты.Имя = РеквизитыДляКонтроляОбъектов.Имя"
	);
	Запрос.УстановитьПараметр("СоставРеквизитовОбъекта", Справочники.ОбъектыЭксплуатации.СоставРеквизитов());
	Запрос.УстановитьПараметр("Класс", Объект.Класс);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Заполняет таблицу параметров учета наработки по данным выбранного класса и текущих заполненных значений.
//
&НаСервере
Процедура ЗаполнитьПараметрыУчетаНаработок(ТаблицаЗаполнения, КлассЗаполнения)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаЗаполнения.ПоказательНаработки,
		|	ТаблицаЗаполнения.НазначенныйРесурс,
		|	ТаблицаЗаполнения.Источник
		|ПОМЕСТИТЬ ТаблицаЗаполнения
		|ИЗ
		|	&ТаблицаЗаполнения КАК ТаблицаЗаполнения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоказателиНаработкиПоКлассификации.ПоказательНаработки КАК ПоказательНаработки,
		|	ТаблицаЗаполнения.НазначенныйРесурс КАК НазначенныйРесурс,
		|	ТаблицаЗаполнения.Источник КАК Источник,
		|	ПоказателиНаработкиПоКлассификации.РассчитыватьОстаточныйРесурс КАК ЗаполнятьНазначенныйРесурс,
		|	ПоказателиНаработкиПоКлассификации.РегистрироватьОтИсточника КАК ЗаполнятьИсточник
		|ИЗ
		|	Справочник.КлассыОбъектовЭксплуатации.ПоказателиНаработки КАК ПоказателиНаработкиПоКлассификации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЗаполнения КАК ТаблицаЗаполнения
		|		ПО ПоказателиНаработкиПоКлассификации.ПоказательНаработки = ТаблицаЗаполнения.ПоказательНаработки
		|ГДЕ
		|	ПоказателиНаработкиПоКлассификации.Ссылка = &Класс
		|	И (ПоказателиНаработкиПоКлассификации.РассчитыватьОстаточныйРесурс
		|			ИЛИ ПоказателиНаработкиПоКлассификации.РегистрироватьОтИсточника)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПоказателиНаработкиПоКлассификации.НомерСтроки");
	Запрос.УстановитьПараметр("ТаблицаЗаполнения", ТаблицаЗаполнения.Выгрузить(, "ПоказательНаработки, НазначенныйРесурс, Источник"));
	Запрос.УстановитьПараметр("Класс", КлассЗаполнения);
	
	ПараметрыУчетаНаработок.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

//-- НЕ УТКА

&НаКлиенте
Процедура Подключаемый_ОбновитьФорму()
	
	Если ЭтаФорма.ВводДоступен() Тогда
		
		ОтключитьОбработчикОжидания("Подключаемый_ОбновитьФорму");
		
		ЭтаФорма.Прочитать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//++ НЕ УТКА
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПараметрыУчетаНаработокНазначенныйРесурс.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПараметрыУчетаНаработок.ЗаполнятьНазначенныйРесурс");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '< не требуется >'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПараметрыУчетаНаработокИсточник.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПараметрыУчетаНаработок.ЗаполнятьИсточник");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '< не требуется >'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПараметрыУчетаНаработокНазначенныйРесурс.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПараметрыУчетаНаработок.ЗаполнятьНазначенныйРесурс");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПараметрыУчетаНаработок.НазначенныйРесурс");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПараметрыУчетаНаработокИсточник.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПараметрыУчетаНаработок.ЗаполнятьИсточник");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПараметрыУчетаНаработок.Источник");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДрагоценныеМатериалыРасположение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДрагоценныеМатериалы.ДрагоценныйМатериал");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Справочники.ДрагоценныеМатериалы.Алмазы;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<не требуется>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	//-- НЕ УТКА
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбУчете()

	Если НЕ ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4()
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестонахождениеОС)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПервоначальныеСведенияОС)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОСУУ)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОСБУ)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.СтоимостьОС)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.АмортизацияОС) Тогда
		Элементы.СтраницаСведения.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	СведенияОбУчете = Справочники.ОбъектыЭксплуатации.СведенияОбУчете(Объект.Ссылка);
	Если СведенияОбУчете = Неопределено Тогда
		Элементы.СтраницыСведенияОС.ТекущаяСтраница = Элементы.СтраницаСведенияОНеПринятомКУчету;
		Возврат;
	КонецЕсли;
	
	Элементы.СтраницыСведенияОС.ТекущаяСтраница = Элементы.СтраницаСведенияОПринятомКУчету;
	
	ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(СведенияОбУчете.Организация, ТекущаяДатаСеанса());
	
	ПредставлениеСведений = Справочники.ОбъектыЭксплуатации.ПредставлениеСведенийОбУчете(СведенияОбУчете);
	ДоступенВыборОтраженияВУчетах = ВнеоборотныеАктивыСлужебный.ДоступенВыборОтраженияВУчетах();
	
	ВнеоборотныеАктивыКлиентСервер.ЗаполнитьСведенияЭлемента(Элементы.СведенияПринятКУчету1, ПредставлениеСведений.СведенияПринятКУчету1);
	ВнеоборотныеАктивыКлиентСервер.ЗаполнитьСведенияЭлемента(Элементы.СведенияПринятКУчету2, ПредставлениеСведений.СведенияПринятКУчету2);
	ВнеоборотныеАктивыКлиентСервер.ЗаполнитьСведенияЭлемента(Элементы.СведенияСрокИспользования1, ПредставлениеСведений.СведенияСрокИспользования1);
	ВнеоборотныеАктивыКлиентСервер.ЗаполнитьСведенияЭлемента(Элементы.СведенияСрокИспользования2, ПредставлениеСведений.СведенияСрокИспользования2);
	ВнеоборотныеАктивыКлиентСервер.ЗаполнитьСведенияЭлемента(Элементы.СведенияСрокИспользования3, ПредставлениеСведений.СведенияСрокИспользования3);
	ВнеоборотныеАктивыКлиентСервер.ЗаполнитьСведенияЭлемента(Элементы.СведенияСнятСУчета, ПредставлениеСведений.СведенияСнятСУчета);
	ВнеоборотныеАктивыКлиентСервер.ЗаполнитьСведенияЭлемента(Элементы.СведенияГФУ, ПредставлениеСведений.СведенияГФУ);
		
	ЗаголовокСведений = СтрШаблон(НСтр("ru = 'Местонахождение (сведения от %1)'"), Формат(СведенияОбУчете.ПериодСведенийОМестонахождении, "ДЛФ=D"));
	Элементы.ГруппаМестонахождение.Заголовок = ЗаголовокСведений;
	
	ВнеоборотныеАктивыКлиентСервер.ЗаполнитьСведенияЭлемента(Элементы.СведенияМестонахождениеОрганизация, ПредставлениеСведений.СведенияМестонахождениеОрганизация);
	ВнеоборотныеАктивыКлиентСервер.ЗаполнитьСведенияЭлемента(Элементы.СведенияМестонахождениеПодразделение, ПредставлениеСведений.СведенияМестонахождениеПодразделение);
	ВнеоборотныеАктивыКлиентСервер.ЗаполнитьСведенияЭлемента(Элементы.СведенияМестонахождениеМОЛ, ПредставлениеСведений.СведенияМестонахождениеМОЛ);
	ВнеоборотныеАктивыКлиентСервер.ЗаполнитьСведенияЭлемента(Элементы.СведенияМестонахождениеАдрес, ПредставлениеСведений.СведенияМестонахождениеАдрес);

	#Область Суммы

	СтоимостьИАмортизация = ВнеоборотныеАктивы.СтоимостьИАмортизацияОС(Объект.Ссылка);
	
	Если СведенияОбУчете <> Неопределено
		И СведенияОбУчете.СостояниеБУ = Перечисления.СостоянияОС.ПринятоКЗабалансовомуУчету Тогда
		
		ВосстановительнаяСтоимостьБУ = СтоимостьИАмортизация.ЗалоговаяСтоимость;
	Иначе	
		ВосстановительнаяСтоимостьБУ = СтоимостьИАмортизация.СтоимостьРегл;
	КонецЕсли; 
	
	ВосстановительнаяСтоимостьБУЦФ = СтоимостьИАмортизация.СтоимостьЦФ;
	ВосстановительнаяСтоимостьВР   = СтоимостьИАмортизация.СтоимостьВР;
	ВосстановительнаяСтоимостьВРЦФ = СтоимостьИАмортизация.СтоимостьВРЦФ;
	ВосстановительнаяСтоимостьНУ   = СтоимостьИАмортизация.СтоимостьНУ;
	ВосстановительнаяСтоимостьНУЦФ = СтоимостьИАмортизация.СтоимостьНУЦФ;
	ВосстановительнаяСтоимостьПР   = СтоимостьИАмортизация.СтоимостьПР;
	ВосстановительнаяСтоимостьПРЦФ = СтоимостьИАмортизация.СтоимостьПРЦФ;
	ВосстановительнаяСтоимостьУУ   = СтоимостьИАмортизация.Стоимость;
	ВосстановительнаяСтоимостьУУЦФ = 0;
	
	НакопленнаяАмортизацияБУ   = СтоимостьИАмортизация.АмортизацияРегл;
	НакопленнаяАмортизацияБУЦФ = СтоимостьИАмортизация.АмортизацияЦФ;
	НакопленнаяАмортизацияВР   = СтоимостьИАмортизация.АмортизацияВР;
	НакопленнаяАмортизацияВРЦФ = СтоимостьИАмортизация.АмортизацияВРЦФ;
	НакопленнаяАмортизацияНУ   = СтоимостьИАмортизация.АмортизацияНУ;
	НакопленнаяАмортизацияНУЦФ = СтоимостьИАмортизация.АмортизацияНУЦФ;
	НакопленнаяАмортизацияПР   = СтоимостьИАмортизация.АмортизацияПР;
	НакопленнаяАмортизацияПРЦФ = СтоимостьИАмортизация.АмортизацияПРЦФ;
	НакопленнаяАмортизацияУУ   = СтоимостьИАмортизация.Амортизация;
	НакопленнаяАмортизацияУУЦФ = 0;
	
	Если СведенияОбУчете <> Неопределено
		И СведенияОбУчете.СостояниеБУ = Перечисления.СостоянияОС.ПринятоКЗабалансовомуУчету Тогда
		
		ОстаточнаяСтоимостьБУ = СтоимостьИАмортизация.ЗалоговаяСтоимость;
	Иначе
		ОстаточнаяСтоимостьБУ = СтоимостьИАмортизация.СтоимостьРегл - СтоимостьИАмортизация.АмортизацияРегл;
	КонецЕсли;
	
	ОстаточнаяСтоимостьБУЦФ = СтоимостьИАмортизация.СтоимостьЦФ   - СтоимостьИАмортизация.АмортизацияЦФ;
	ОстаточнаяСтоимостьВР   = СтоимостьИАмортизация.СтоимостьВР   - СтоимостьИАмортизация.АмортизацияВР;
	ОстаточнаяСтоимостьВРЦФ = СтоимостьИАмортизация.СтоимостьВРЦФ - СтоимостьИАмортизация.АмортизацияВРЦФ;
	ОстаточнаяСтоимостьНУ   = СтоимостьИАмортизация.СтоимостьНУ   - СтоимостьИАмортизация.АмортизацияНУ;
	ОстаточнаяСтоимостьНУЦФ = СтоимостьИАмортизация.СтоимостьНУЦФ - СтоимостьИАмортизация.АмортизацияНУЦФ;
	ОстаточнаяСтоимостьПР   = СтоимостьИАмортизация.СтоимостьПР   - СтоимостьИАмортизация.АмортизацияПР;
	ОстаточнаяСтоимостьПРЦФ = СтоимостьИАмортизация.СтоимостьПРЦФ - СтоимостьИАмортизация.АмортизацияПРЦФ;
	ОстаточнаяСтоимостьУУ   = СтоимостьИАмортизация.Стоимость     - СтоимостьИАмортизация.Амортизация;
	ОстаточнаяСтоимостьУУЦФ = 0;
	
	Если НЕ ПлательщикНалогаНаПрибыль Тогда
		Элементы.ВосстановительнаяСтоимостьНУ.Видимость   = Ложь;
		Элементы.ВосстановительнаяСтоимостьПР.Видимость   = Ложь;
		Элементы.ВосстановительнаяСтоимостьВР.Видимость   = Ложь;
		Элементы.НакопленнаяАмортизацияНУ.Видимость       = Ложь;
		Элементы.НакопленнаяАмортизацияПР.Видимость       = Ложь;
		Элементы.НакопленнаяАмортизацияВР.Видимость       = Ложь;
		Элементы.ОстаточнаяСтоимостьНУ.Видимость          = Ложь;
		Элементы.ОстаточнаяСтоимостьПР.Видимость          = Ложь;
		Элементы.ОстаточнаяСтоимостьВР.Видимость          = Ложь;
		Элементы.ДекорацияЗаголовокНУ.Видимость           = Ложь;
		Элементы.ДекорацияЗаголовокВР.Видимость           = Ложь;
		Элементы.ДекорацияЗаголовокПР.Видимость           = Ложь;
	КонецЕсли; 
	
	Если СтоимостьИАмортизация.СтоимостьЦФ <> 0
		ИЛИ СтоимостьИАмортизация.СтоимостьВРЦФ <> 0
		ИЛИ СтоимостьИАмортизация.СтоимостьНУЦФ <> 0
		ИЛИ СтоимостьИАмортизация.СтоимостьПРЦФ <> 0
		ИЛИ СтоимостьИАмортизация.АмортизацияЦФ <> 0
		ИЛИ СтоимостьИАмортизация.АмортизацияВРЦФ <> 0
		ИЛИ СтоимостьИАмортизация.АмортизацияНУЦФ <> 0
		ИЛИ СтоимостьИАмортизация.АмортизацияПРЦФ <> 0 Тогда
		
		Элементы.ГруппаТекущаяСтоимостьЗаголовок.Заголовок       = НСтр("ru = 'Собственные средства:'");
		Элементы.ГруппаНакопленнаяАмортизацияЗаголовок.Заголовок = НСтр("ru = 'Собственные средства:'");
		Элементы.ГруппаОстаточнаяСтоимостьЗаголовок.Заголовок    = НСтр("ru = 'Собственные средства:'");
		
		Элементы.ГруппаТекущаяСтоимость.ОтображатьЗаголовок        = Истина;
		Элементы.ГруппаНакопленнаяАмортизация.ОтображатьЗаголовок  = Истина;
		Элементы.ГруппаОстаточнаяСтоимость.ОтображатьЗаголовок     = Истина;
		
		Элементы.ГруппаТекущаяСтоимостьЗаголовокЦФ.Видимость       = Истина;
		Элементы.ГруппаНакопленнаяАмортизацияЗаголовокЦФ.Видимость = Истина;
		Элементы.ГруппаОстаточнаяСтоимостьЗаголовокЦФ.Видимость    = Истина;
		
		Элементы.ВосстановительнаяСтоимостьУУЦФ.Видимость   = Истина;
		Элементы.ВосстановительнаяСтоимостьБУЦФ.Видимость   = Истина;
		Элементы.ВосстановительнаяСтоимостьНУЦФ.Видимость   = ПлательщикНалогаНаПрибыль;
		Элементы.ВосстановительнаяСтоимостьПРЦФ.Видимость   = ПлательщикНалогаНаПрибыль;
		Элементы.ВосстановительнаяСтоимостьВРЦФ.Видимость   = ПлательщикНалогаНаПрибыль;
		Элементы.НакопленнаяАмортизацияВРЦФ.Видимость       = ПлательщикНалогаНаПрибыль;
		Элементы.НакопленнаяАмортизацияПРЦФ.Видимость       = ПлательщикНалогаНаПрибыль;
		Элементы.НакопленнаяАмортизацияНУЦФ.Видимость       = ПлательщикНалогаНаПрибыль;
		Элементы.НакопленнаяАмортизацияБУЦФ.Видимость       = Истина;
		Элементы.НакопленнаяАмортизацияУУЦФ.Видимость       = Истина;
		Элементы.ОстаточнаяСтоимостьУУЦФ.Видимость          = Истина;
		Элементы.ОстаточнаяСтоимостьБУЦФ.Видимость          = Истина;
		Элементы.ОстаточнаяСтоимостьНУЦФ.Видимость          = ПлательщикНалогаНаПрибыль;
		Элементы.ОстаточнаяСтоимостьПРЦФ.Видимость          = ПлательщикНалогаНаПрибыль;
		Элементы.ОстаточнаяСтоимостьВРЦФ.Видимость          = ПлательщикНалогаНаПрибыль;
		
	Иначе
		
		Элементы.ГруппаТекущаяСтоимостьЗаголовок.Заголовок       = НСтр("ru = 'Восстановительная стоимость:'");
		Элементы.ГруппаНакопленнаяАмортизацияЗаголовок.Заголовок = НСтр("ru = 'Накопленная амортизация:'");
		Элементы.ГруппаОстаточнаяСтоимостьЗаголовок.Заголовок    = НСтр("ru = 'Остаточная стоимость:'");
		
		Элементы.ГруппаТекущаяСтоимость.ОтображатьЗаголовок        = Ложь;
		Элементы.ГруппаНакопленнаяАмортизация.ОтображатьЗаголовок  = Ложь;
		Элементы.ГруппаОстаточнаяСтоимость.ОтображатьЗаголовок     = Ложь;
		
		Элементы.ГруппаТекущаяСтоимостьЗаголовокЦФ.Видимость       = Ложь;
		Элементы.ГруппаНакопленнаяАмортизацияЗаголовокЦФ.Видимость = Ложь;
		Элементы.ГруппаОстаточнаяСтоимостьЗаголовокЦФ.Видимость    = Ложь;
		
		Элементы.ВосстановительнаяСтоимостьУУЦФ.Видимость   = Ложь;
		Элементы.ВосстановительнаяСтоимостьБУЦФ.Видимость   = Ложь;
		Элементы.ВосстановительнаяСтоимостьНУЦФ.Видимость   = Ложь;
		Элементы.ВосстановительнаяСтоимостьПРЦФ.Видимость   = Ложь;
		Элементы.ВосстановительнаяСтоимостьВРЦФ.Видимость   = Ложь;
		Элементы.НакопленнаяАмортизацияВРЦФ.Видимость       = Ложь;
		Элементы.НакопленнаяАмортизацияПРЦФ.Видимость       = Ложь;
		Элементы.НакопленнаяАмортизацияНУЦФ.Видимость       = Ложь;
		Элементы.НакопленнаяАмортизацияБУЦФ.Видимость       = Ложь;
		Элементы.НакопленнаяАмортизацияУУЦФ.Видимость       = Ложь;
		Элементы.ОстаточнаяСтоимостьУУЦФ.Видимость          = Ложь;
		Элементы.ОстаточнаяСтоимостьБУЦФ.Видимость          = Ложь;
		Элементы.ОстаточнаяСтоимостьНУЦФ.Видимость          = Ложь;
		Элементы.ОстаточнаяСтоимостьПРЦФ.Видимость          = Ложь;
		Элементы.ОстаточнаяСтоимостьВРЦФ.Видимость          = Ложь;
		
	КонецЕсли; 
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура КодОКОФПриИзмененииНаСервере()

	Объект.АмортизационнаяГруппа = ПолучитьАмортизационнуюГруппу(Объект.КодПоОКОФ);
	
	ЗаполнитьПодсказкуКодОКОФ();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодсказкуКодОКОФ()

	ТекстПодсказки = НСтр("ru = 'Код по классификатору основных фондов'");
	
	Если ЗначениеЗаполнено(Объект.КодПоОКОФ) Тогда
		ТекстПодсказки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КодПоОКОФ, "Наименование");
	КонецЕсли; 
	
	Элементы.КодПоОКОФ.Подсказка = ТекстПодсказки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьАмортизационнуюГруппу(КодПоОКОФ)
	
	Возврат РегистрыСведений.АмортизационныеГруппыОКОФ.ПолучитьАмортизационнуюГруппу(КодПоОКОФ);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВыборКодаПоОКОФ(ВыбранноеЗначение)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СтарыйОКОФ = Объект.КодПоОКОФ;
	СтараяАмортизационнаяГруппа = Объект.АмортизационнаяГруппа;
	
	КодПоОКОФ = ВыбранноеЗначение.ОКОФ;
	АмортизационнаяГруппа = ВыбранноеЗначение.АмортизационнаяГруппа;
	
	Объект.КодПоОКОФ = КодПоОКОФ;
	Объект.АмортизационнаяГруппа = АмортизационнаяГруппа;
	
	ЭтаФорма.Модифицированность =
		ЭтаФорма.Модифицированность
		Или СтарыйОКОФ <> КодПоОКОФ
		Или СтараяАмортизационнаяГруппа <> АмортизационнаяГруппа;
		
	ЗаполнитьПодсказкуКодОКОФ();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, ИзмененныеРеквизитыИлиЭлемент = "")

	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если ТипЗнч(ИзмененныеРеквизитыИлиЭлемент) = Тип("Строка") Тогда
		ИзмененныеРеквизиты = ИзмененныеРеквизитыИлиЭлемент;
	Иначе
		ИзмененныеРеквизиты = ИзмененныеРеквизитыИлиЭлемент.Имя;
	КонецЕсли;
	
	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = ЗначенияСвойствЗависимыхРеквизитов(Объект, ИзмененныеРеквизиты);
									
	ВнеоборотныеАктивыКлиентСервер.НастроитьЗависимыеЭлементыФормы(Форма, ПараметрыРеквизитовОбъекта);
	ВнеоборотныеАктивыКлиентСервер.ОчиститьНеиспользуемыеРеквизиты(Объект, ПараметрыРеквизитовОбъекта);
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ГруппаОС")
		ИЛИ ОбновитьВсе Тогда
		
		ВнеоборотныеАктивыКлиентСервер.УстановитьВидимостьЗначенияСпискаВыбора(
			Элементы.ГруппаОС.СписокВыбора,
			Объект.ГруппаОС = ПредопределенноеЗначение("Перечисление.ГруппыОС.КапитальныеВложенияВАрендованноеИмущество"),
			ПредопределенноеЗначение("Перечисление.ГруппыОС.КапитальныеВложенияВАрендованноеИмущество"),
			11);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗначенияСвойствЗависимыхРеквизитов(Объект, ИзмененныеРеквизиты)

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ГруппаОС")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			(Объект.ГруппаОС = ПредопределенноеЗначение("Перечисление.ГруппыОС.ТранспортныеСредства")
				ИЛИ Объект.ГруппаОС = ПредопределенноеЗначение("Перечисление.ГруппыОС.МашиныИОборудование"));
				
		ВнеоборотныеАктивыКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ЗарегистрированоВРеестреСистемыПлатон", 
			"ЗарегистрированоВРеестреСистемыПлатон", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства = 
			Объект.ГруппаОС <> ПредопределенноеЗначение("Перечисление.ГруппыОС.ПустаяСсылка")
			И Объект.ГруппаОС <> ПредопределенноеЗначение("Перечисление.ГруппыОС.РабочийСкот")
			И Объект.ГруппаОС <> ПредопределенноеЗначение("Перечисление.ГруппыОС.ПродуктивныйСкот");
			
		ВнеоборотныеАктивыКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НедвижимоеИмущество", 
			"НедвижимоеИмущество", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ВнеоборотныеАктивыКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ДекорацияОтступНедвижимоеИмущество", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		//
		ЗначениеСвойства = Объект.ГруппаОС = ПредопределенноеЗначение("Перечисление.ГруппыОС.ЗемельныеУчастки");
			
		ВнеоборотныеАктивыКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НедвижимоеИмущество", 
			"НедвижимоеИмущество", 
			"ТолькоПросмотрБезОчистки", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;

	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕдиницаИзмерения(Знач ДрагоценныйМатериал)

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДрагоценныйМатериал, "ЕдиницаИзмерения");

КонецФункции

#КонецОбласти

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// Процедура обновления элементов дополнительных реквизитов объекта в форме
//
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
