#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Добавляет команду создания объекта.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Справочники.ДоговорыКонтрагентов) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Справочники.ДоговорыКонтрагентов.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Справочники.ДоговорыКонтрагентов);
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Устанавливает статус договоров.
//
// Параметры:
//	Договоры - Массив - Массив ссылок на договоры;
//	Статус - ПеречислениеСсылка.СтатусыДоговоровКонтрагентов - Статус, который будет установлен у договоров.
//
// Возвращаемое значение:
//	Число - Количество обработанных объектов.
//
Функция УстановитьСтатус(Договоры, Статус) Экспорт
	
	МассивСсылок = Новый Массив();
	КоличествоОбработанных = 0;
	
	Для Каждого Договор Из Договоры Цикл
		
		Если ТипЗнч(Договор) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСсылок.Добавить(Договор);
		
	КонецЦикла;
	
	Если МассивСсылок = 0 Тогда
		Возврат КоличествоОбработанных;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
	|	ДоговорыКонтрагентов.ПометкаУдаления КАК ПометкаУдаления,
	|	ВЫБОР
	|		КОГДА ДоговорыКонтрагентов.Статус = &Статус
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтатусСовпадает
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка В(&МассивСсылок)");
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.УстановитьПараметр("Статус", Статус);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ПометкаУдаления Тогда
			
			ТекстОшибки = НСтр("ru='Договор %Договор% помечен на удаление. Невозможно изменить статус'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Договор%", Выборка.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			Продолжить;
			
		КонецЕсли;
		
		Если Выборка.СтатусСовпадает Тогда
			
			ТекстОшибки = НСтр("ru='Договору %Договор% уже присвоен статус ""%Статус%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Договор%", Выборка.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", Статус);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			Продолжить;
			
		КонецЕсли;
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			
			ТекстОшибки = НСтр("ru='Не удалось заблокировать %Договор%. %ОписаниеОшибки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Договор%", Выборка.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			
		КонецПопытки;
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.Статус = Статус;
		
		Если Статус = Перечисления.СтатусыДоговоровКонтрагентов.НеСогласован Тогда
			Если Объект.Согласован Тогда
				Объект.Согласован = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если Не Объект.ПроверитьЗаполнение() Тогда
			Продолжить;
		КонецЕсли;
			
		Попытка
			
			Объект.Записать();
			КоличествоОбработанных = КоличествоОбработанных + 1;
			
		Исключение
			
			ТекстОшибки = НСтр("ru='Не удалось записать %Договор%. %ОписаниеОшибки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Договор%", Выборка.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			
		КонецПопытки
		
	КонецЦикла;
	
	Возврат КоличествоОбработанных;
	
КонецФункции

// Процедура заполняет банковские счета документа по договору.
//
// Параметры:
//	Договор - СправочникСсылка.ДоговорыКонтрагентов - Договор, указанный в документе;
//	БанковскийСчетОрганизации - СправочникСсылка.БанковскиеСчетаОрганизаций - Реквизит документа "Банковский счет организации";
//	БанковскийСчетКонтрагента - СправочникСсылка.БанковскиеСчетаКонтрагентов - Реквизит документа "Банковский счет контрагента".
//
Процедура ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчетОрганизации, БанковскийСчетКонтрагента) Экспорт
	
	ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "БанковскийСчет, БанковскийСчетКонтрагента"); 
		
	Если БанковскийСчетОрганизации <> Неопределено И ЗначениеЗаполнено(ДанныеДоговора.БанковскийСчет) Тогда
		БанковскийСчетОрганизации = ДанныеДоговора.БанковскийСчет;
	КонецЕсли;
	Если БанковскийСчетКонтрагента <> Неопределено И ЗначениеЗаполнено(ДанныеДоговора.БанковскийСчетКонтрагента) Тогда
		БанковскийСчетКонтрагента = ДанныеДоговора.БанковскийСчетКонтрагента;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет статью движения денежных средств по договору
//
// Параметры:
//	Договор - СправочникСсылка.ДоговорыКонтрагентов - Договор, указанный в документе;
//	СтатьяДвиженияДенежныхСредств - СправочникСсылка.СтатьиДвиженияДенежныхСредств - Реквизит документа "Статья движения денежных средств";
//
Процедура ЗаполнитьСтатьюДвиженияДенежныхСредствПоДоговору(Договор, СтатьяДвиженияДенежныхСредств) Экспорт
	
	Если ЗначениеЗаполнено(Договор) Тогда
		СтатьяДвиженияДенежныхСредств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "СтатьяДвиженияДенежныхСредств"); 
	КонецЕсли;
	
КонецПроцедуры

// Возвращает хозяйственную операцию по умолчанию
//
// Параметры:
//  ТипДоговора - ПеречислениеСсылка.ТипыДоговоров - Тип договора, для которого определяется хозяйственная операция.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ХозяйственныеОперации - хозяйственная операция.
//
Функция ХозяйственнаяОперация(ТипДоговора, ВариантОформленияЗакупок) Экспорт
	Типы = Перечисления.ТипыДоговоров;
	Операции = Перечисления.ХозяйственныеОперации;
	
	//++ НЕ УТ
	Если ТипДоговора = Типы.СДавальцем Тогда
		Возврат Операции.ПроизводствоИзДавальческогоСырья;
	ИначеЕсли ТипДоговора = Типы.СПереработчиком Тогда
		Возврат Операции.ПроизводствоУПереработчика;
	ИначеЕсли ТипДоговора = Типы.СПоклажедателем Тогда
		Возврат Операции.ПриемНаХранениеСПравомПродажи;
	КонецЕсли;
	//-- НЕ УТ
	
	ТоварыВПути = (ВариантОформленияЗакупок = Перечисления.ВариантыОформленияЗакупок.ТоварыВПути);
	НеотфактурованныеПоставки = (ВариантОформленияЗакупок = Перечисления.ВариантыОформленияЗакупок.НеотфактурованныеПоставки);
	
	ОперацияЗакупкаУПоставщика = Операции.ЗакупкаУПоставщика;
	ОперацияЗакупкаУПоставщика = 
		?(ТоварыВПути, Операции.ЗакупкаУПоставщикаТоварыВПути, ОперацияЗакупкаУПоставщика);
	ОперацияЗакупкаУПоставщика = 
		?(НеотфактурованныеПоставки, Операции.ЗакупкаУПоставщикаФактуровкаПоставки, ОперацияЗакупкаУПоставщика);
		
	ОперацияЗакупкаПоИмпорту = Операции.ЗакупкаПоИмпорту;
	ОперацияЗакупкаПоИмпорту = 
		?(ТоварыВПути, Операции.ЗакупкаПоИмпортуТоварыВПути, ОперацияЗакупкаПоИмпорту);
		
	ОперацияЗакупкаВСтранахЕАЭС = Операции.ЗакупкаВСтранахЕАЭС;
	ОперацияЗакупкаВСтранахЕАЭС = 
		?(ТоварыВПути, Операции.ЗакупкаВСтранахЕАЭСТоварыВПути, ОперацияЗакупкаВСтранахЕАЭС);
	ОперацияЗакупкаВСтранахЕАЭС = 
		?(НеотфактурованныеПоставки, Операции.ЗакупкаВСтранахЕАЭСФактуровкаПоставки, ОперацияЗакупкаВСтранахЕАЭС);
	
	ХозяйственнаяОперация = 
		?(ТипДоговора = Типы.СПоставщиком,    ОперацияЗакупкаУПоставщика,
		?(ТипДоговора = Типы.Импорт,          ОперацияЗакупкаПоИмпорту,
		?(ТипДоговора = Типы.ВвозИзЕАЭС,      ОперацияЗакупкаВСтранахЕАЭС,
		?(ТипДоговора = Типы.СПокупателем,    Операции.РеализацияКлиенту,
		?(ТипДоговора = Типы.СКомиссионером,  Операции.ПередачаНаКомиссию,
		?(ТипДоговора = Типы.СКомитентом,     Операции.ПриемНаКомиссию,
		Неопределено))))));
	
	Возврат ХозяйственнаяОперация;
	
КонецФункции

// Возвращает тип договора по умолчанию
//
// Параметры:
// ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция, для которой определяется
//                                                                    тип договора.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыДоговоров - тип договора.
//
Функция ТипДоговора(ХозяйственнаяОперация) Экспорт
	
	Типы = Перечисления.ТипыДоговоров;
	Операции = Перечисления.ХозяйственныеОперации;
	
	//++ НЕ УТ
	Если ХозяйственнаяОперация = Операции.ПроизводствоИзДавальческогоСырья Тогда
		Возврат Типы.СДавальцем;
	ИначеЕсли ХозяйственнаяОперация = Операции.ПроизводствоУПереработчика Тогда
		Возврат Типы.СПереработчиком;
	ИначеЕсли ХозяйственнаяОперация = Операции.ПриемНаХранениеСПравомПродажи
			И ПолучитьФункциональнуюОпцию("ИспользоватьОтветственноеХранениеВПроцессеЗакупки") Тогда
		Возврат Типы.СПоклажедателем;
	КонецЕсли;
	//-- НЕ УТ
	
	ОперацииЗакупки = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	ОперацииИмпорта = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
	ОперацииВСтранахЕАЭС = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС);
	
	Возврат
		?(ХозяйственнаяОперация = Операции.РеализацияКлиенту 
			И ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами"), Типы.СПокупателем,
		?(ХозяйственнаяОперация = Операции.ПередачаНаКомиссию, Типы.СКомиссионером,
		?(ОперацииЗакупки.Найти(ХозяйственнаяОперация) <> Неопределено
			И ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками"), Типы.СПоставщиком,
		?(ХозяйственнаяОперация = Операции.ПриемНаКомиссию, Типы.СКомитентом,
		?(ОперацииИмпорта.Найти(ХозяйственнаяОперация) <> Неопределено, Типы.Импорт,
		?(ОперацииВСтранахЕАЭС.Найти(ХозяйственнаяОперация) <> Неопределено, Типы.ВвозИзЕАЭС,
		Неопределено))))));
	
КонецФункции

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП.
//
// Возвращаемое значение:
//	Массив - имена блокируемых реквизитов.
//
// Возвращаемое значение:
//  Массив - имена блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	Результат = Новый Массив;
	Результат.Добавить("ТипДоговора");
	Результат.Добавить("Партнер");
	Результат.Добавить("Контрагент");
	Результат.Добавить("Организация");
	Результат.Добавить("ПорядокОплаты");
	Результат.Добавить("ВалютаВзаиморасчетов");
	Результат.Добавить("ПорядокРасчетов");
	Результат.Добавить("НаправлениеДеятельности");
	Результат.Добавить("Подразделение");
	Результат.Добавить("ГруппаФинансовогоУчета");
	Результат.Добавить("ВариантОформленияЗакупок; ВариантОформленияЗакупок, ВариантОформленияЗакупокДвумяДокументами");
	Результат.Добавить("ВариантПриемкиТоваров; ОформлениеОрдера, ПриемкаТоваров");
	
	Возврат Результат;
КонецФункции

// Определяет реквизиты выбранного элемента справочника
//
// Параметры:
//	Ссылка - Ссылка на элемент справочника.
//
// Возвращаемое значение:
//	Структура - реквизиты выбранного элемента справочника.
//
Функция РеквизитыОбъекта(Ссылка) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Данные.Дата КАК Дата,
	|	Данные.Организация КАК Организация,
	|	Данные.Партнер КАК Партнер,
	|	Данные.Контрагент КАК Контрагент,
	|	Данные.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Данные.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Данные.Сумма КАК СуммаДокумента,
	|	Данные.Сумма КАК СуммаВзаиморасчетов,
	|	&Ссылка КАК Договор,
	|	Данные.ПорядокРасчетов КАК ПорядокРасчетов,
	|	НЕ Данные.ПометкаУдаления КАК Проведен
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК Данные
	|ГДЕ
	|	Данные.Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Дата = Выборка.Дата;
		Организация = Выборка.Организация;
		Партнер = Выборка.Партнер;
		Контрагент = Выборка.Контрагент;
		Договор = Выборка.Договор;
		ПорядокРасчетов = Выборка.ПорядокРасчетов;
		ВалютаВзаиморасчетов = Выборка.ВалютаВзаиморасчетов;
		ХозяйственнаяОперация = ?(ЗначениеЗаполнено(Выборка.ХозяйственнаяОперация), Выборка.ХозяйственнаяОперация, Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
		СуммаДокумента = Выборка.СуммаДокумента;
		СуммаВзаиморасчетов = ?(Выборка.Проведен, Выборка.СуммаВзаиморасчетов, 0);
	Иначе
		Дата = Дата(1,1,1);
		Организация = Справочники.Организации.ПустаяСсылка();
		Партнер = Справочники.Партнеры.ПустаяСсылка();
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПустаяСсылка();
		ВалютаВзаиморасчетов = Справочники.Валюты.ПустаяСсылка();
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
		СуммаДокумента = 0;
		СуммаВзаиморасчетов = 0;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("Дата", Дата);
	СтруктураРеквизитов.Вставить("Организация", Организация);
	СтруктураРеквизитов.Вставить("Партнер", Партнер);
	СтруктураРеквизитов.Вставить("Контрагент", Контрагент);
	СтруктураРеквизитов.Вставить("Договор", Договор);
	СтруктураРеквизитов.Вставить("ПорядокРасчетов", ПорядокРасчетов);
	СтруктураРеквизитов.Вставить("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
	СтруктураРеквизитов.Вставить("ХозяйственнаяОперация", ХозяйственнаяОперация);
	СтруктураРеквизитов.Вставить("СуммаДокумента", СуммаДокумента);
	СтруктураРеквизитов.Вставить("СуммаВзаиморасчетов", СуммаВзаиморасчетов);
	
	Возврат СтруктураРеквизитов;

КонецФункции

// Возвращает признак использования как агрегирующей сущности в товарах к поступлению.
//
// Параметры:
//  ВариантПриемкиТоваров - ПеречислениеСсылка.ВариантыПриемкиТоваров - ссылка на вариант приемки.
//
// Возвращаемое значение:
//  Булево - используется или нет договор при приемке.
//
Функция ДоговорИспользуетсяПриПриемке(Знач ВариантПриемкиТоваров) Экспорт
	
	Если Не ЗначениеЗаполнено(ВариантПриемкиТоваров) Тогда
		ВариантПриемкиТоваров = Константы.ВариантПриемкиТоваров.Получить();
	КонецЕсли;
	
	Результат = Ложь;
	Если ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.ПоДоговорамБезЗаказовИНакладных
		Или ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.ПоДоговорамПослеЗаказовИлиНакладных 
		Или ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.ПоДоговорамПослеНакладных Тогда

		Результат = Истина;

	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает структуру параметров для заполнения налогообложения НДС продажи.
//
// Параметры:
//  Объект - СправочникОбъект.ДоговорыКонтрагентов - договор, по которому необходимо сформировать параметры.
//
// Возвращаемое значение:
//  Структура - Параметры заполнения, описание параметров см. УчетНДСУПКлиентСервер.ПараметрыЗаполненияНалогообложенияНДСПродажи();
//
Функция ПараметрыЗаполненияНалогообложенияНДСПродажи(Объект) Экспорт
	
	ПараметрыЗаполнения = УчетНДСУПКлиентСервер.ПараметрыЗаполненияНалогообложенияНДСПродажи();
	
	ПараметрыЗаполнения.Организация = Объект.Организация;
	ПараметрыЗаполнения.НаправлениеДеятельности = Объект.НаправлениеДеятельности;

	Если Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем Тогда
		
		ПараметрыЗаполнения.РеализацияТоваров = Истина;
		ПараметрыЗаполнения.РеализацияРаботУслуг = Истина;
		
	ИначеЕсли Объект.ТипДоговора = Перечисления.ТипыДоговоров.СКомиссионером Тогда
		
		ПараметрыЗаполнения.ПередачаНаКомиссию = Истина;
		ПараметрыЗаполнения.ОтчетКомиссионера = Истина;
		
	ИначеЕсли Объект.ТипДоговора = Перечисления.ТипыДоговоров.СДавальцем Тогда
		
		ПараметрыЗаполнения.ОтчетДавальцу = Истина;
		
	КонецЕсли;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Возвращает структуру параметров для заполнения налогообложения НДС закупки.
//
// Параметры:
//  Объект - СправочникОбъект.ДоговорыКонтрагентов - договор, по которому необходимо сформировать параметры.
//
// Возвращаемое значение:
//  Структура - Параметры заполнения, описание параметров см. УчетНДСУПКлиентСервер.ПараметрыЗаполненияНалогообложенияНДСЗакупки();
//
Функция ПараметрыЗаполненияНалогообложенияНДСЗакупки(Объект) Экспорт
	
	ПараметрыЗаполнения = УчетНДСУПКлиентСервер.ПараметрыЗаполненияНалогообложенияНДСЗакупки();
	
	ПараметрыЗаполнения.Контрагент = Объект.Контрагент;

	Если Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком Тогда
		
		ПараметрыЗаполнения.ПриобретениеТоваров = Истина;
		ПараметрыЗаполнения.ПриобретениеРабот = Истина;
		
	ИначеЕсли Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПоклажедателем Тогда
		
		ПараметрыЗаполнения.ПриобретениеТоваров = Истина;
		 
	ИначеЕсли Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПереработчиком Тогда
		
		ПараметрыЗаполнения.ПриобретениеРабот = Истина;
	
	ИначеЕсли Объект.ТипДоговора = Перечисления.ТипыДоговоров.СКомитентом Тогда
		
		ПараметрыЗаполнения.ПриемНаКомиссию = Истина;
		
	ИначеЕсли Объект.ТипДоговора = Перечисления.ТипыДоговоров.ВвозИзЕАЭС Тогда
		
		ПараметрыЗаполнения.ВвозТоваровИзТаможенногоСоюза = Истина;
		
	ИначеЕсли Объект.ТипДоговора = Перечисления.ТипыДоговоров.Импорт Тогда
		
		ПараметрыЗаполнения.ИмпортТоваров = Истина;
		
	КонецЕсли;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Возвращает структуру параметров для заполнения вида деятельности НДС.
//
// Параметры:
//  Объект - СправочникОбъект.ДоговорыКонтрагентов
//
// Возвращаемое значение:
//  Структура - Параметры заполнения, описание параметров см. УчетНДСУПКлиентСервер.ПараметрыЗаполненияВидаДеятельностиНДС();
//
Функция ПараметрыЗаполненияВидаДеятельностиНДС(Объект) Экспорт

	ПараметрыЗаполнения = УчетНДСУПКлиентСервер.ПараметрыЗаполненияВидаДеятельностиНДС();
	ПараметрыЗаполнения.Организация = Объект.Организация;
	ПараметрыЗаполнения.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
	
	Если Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком Тогда
		
		ПараметрыЗаполнения.ПриобретениеТоваров = Истина;
		ПараметрыЗаполнения.ПриобретениеРабот = Истина;
		
	ИначеЕсли Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПоклажедателем Тогда
		
		ПараметрыЗаполнения.ПриобретениеТоваров = Истина;
		 
	ИначеЕсли Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПереработчиком Тогда
		
		ПараметрыЗаполнения.ПриобретениеРабот = Истина;
		
	ИначеЕсли Объект.ТипДоговора = Перечисления.ТипыДоговоров.ВвозИзЕАЭС Тогда
		
		ПараметрыЗаполнения.ПриобретениеТоваров = Истина;
		
	ИначеЕсли Объект.ТипДоговора = Перечисления.ТипыДоговоров.Импорт Тогда
		
		ПараметрыЗаполнения.ПриобретениеТоваров = Истина;
		
	КонецЕсли;
	
	Возврат ПараметрыЗаполнения;

КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК Т
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияПартнеров КАК Т2 
	|	ПО Т2.Родитель = Т.Партнер
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Т2.Партнер)
	|	И ЗначениеРазрешено(Т.Организация)
	|	И ЗначениеРазрешено(Т.ХозяйственнаяОперация)";
	
	Ограничение.ТекстДляВнешнихПользователей =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК ЭтотСписок
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВнешниеПользователи КАК ВнешниеПользователиПартнеры
	|	ПО ВнешниеПользователиПартнеры.ОбъектАвторизации = ЭтотСписок.Партнер
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|	ПО КонтактныеЛицаПартнеров.Владелец = ЭтотСписок.Партнер
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВнешниеПользователи КАК ВнешниеПользователиКонтактныеЛица
	|	ПО ВнешниеПользователиКонтактныеЛица.ОбъектАвторизации = КонтактныеЛицаПартнеров.Ссылка
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ВнешниеПользователиПартнеры.Ссылка)
	|	ИЛИ ЗначениеРазрешено(ВнешниеПользователиКонтактныеЛица.Ссылка)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Запрос = Новый Запрос;
	
	ТекстСоединений = "";
	ТекстУсловий    = "";
	НомерОтбора     = 0;
	
	Если Параметры.Свойство("Партнер") Тогда
		
		Запрос.УстановитьПараметр("Партнер", Параметры.Партнер);
		
		ТекстСоединений = ТекстСоединений + "
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияПартнеров КАК ИерархияПартнеров
		|	ПО Договоры.Партнер = ИерархияПартнеров.Родитель
		|		И ИерархияПартнеров.Партнер = &Партнер";
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
	Если Параметры.Свойство("Соглашение") Тогда
		
		ПоСоглашениюИспользуютсяДоговорыКонтрагентов = Ложь;
		Если ЗначениеЗаполнено(Параметры.Соглашение) Тогда
			УстановитьПривилегированныйРежим(Истина);
			ПоСоглашениюИспользуютсяДоговорыКонтрагентов = ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъекта(Параметры.Соглашение, "ИспользуютсяДоговорыКонтрагентов");
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;	
		
		Если ПоСоглашениюИспользуютсяДоговорыКонтрагентов = Ложь Тогда
			Запрос.УстановитьПараметр("Соглашение", Параметры.Соглашение);
			
			Если ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами")
				И Тип("СправочникСсылка.СоглашенияСКлиентами") = ТипЗнч(Параметры.Соглашение) Тогда
				
				ТекстСоединений = ТекстСоединений + "
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
				|	ПО Договоры.ПорядокОплаты = СоглашенияСКлиентами.ПорядокОплаты
				|		И СоглашенияСКлиентами.Ссылка = &Соглашение";
				
				СтандартнаяОбработка = Ложь;
				
			ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками")
				И Тип("СправочникСсылка.СоглашенияСПоставщиками") = ТипЗнч(Параметры.Соглашение)
				И ЗначениеЗаполнено(Параметры.Соглашение) Тогда
			
				ТекстСоединений = ТекстСоединений + "
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
				|	ПО Договоры.ПорядокОплаты = СоглашенияСПоставщиками.ПорядокОплаты
				|		И СоглашенияСПоставщиками.Ссылка = &Соглашение";
				
				СтандартнаяОбработка = Ложь;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.Свойство("НалогообложениеНДС") Тогда
		
		Запрос.УстановитьПараметр("УчетАгентскогоНДС", 
			Параметры.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НалоговыйАгентПоНДС);
		
		ТекстУсловий = ТекстУсловий + "
		|	И Договоры.УчетАгентскогоНДС = &УчетАгентскогоНДС";
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
	Если Параметры.Свойство("Отбор") Тогда
		
		Для Каждого ТекущийОтбор Из Параметры.Отбор Цикл
			
			Если ТекущийОтбор.Ключ = "Контрагент" И ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
				
				Если Не Запрос.Параметры.Свойство("Партнер") Тогда
					
					Запрос.УстановитьПараметр("Контрагент", ТекущийОтбор.Значение);
					
					ТекстСоединений = ТекстСоединений + "
					|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
					|	ПО Договоры.Партнер = Контрагенты.Партнер
					|		И Контрагенты.Ссылка = &Контрагент";
					
					СтандартнаяОбработка = Ложь;
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			Если ТекущийОтбор.Ключ = "ХозяйственнаяОперация" 
				И ТекущийОтбор.Значение = Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности Тогда
				
				ТекстУсловий = ТекстУсловий + "
				|	И Договоры.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)";
				
				СтандартнаяОбработка = Ложь;
				
				Продолжить;
				
			КонецЕсли;
			
			Если ТекущийОтбор.Ключ = "ХозяйственнаяОперация" И
				(ТекущийОтбор.Значение = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика
					Или ТекущийОтбор.Значение = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути
					Или ТекущийОтбор.Значение = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки)
				И Параметры.Свойство("ПоказыватьЗакупкуПоИмпорту") Тогда
				
				ТекстУсловий = ТекстУсловий + "
				|	И Договоры.ХозяйственнаяОперация В (
				|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту),
				|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути),
				|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика),
				|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути),
				|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки),
				|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоУПереработчика)
				|		)";
				
				СтандартнаяОбработка = Ложь;
				
				Продолжить;
				
			КонецЕсли;
			
			НомерОтбора = НомерОтбора + 1;
			
			ТекстУсловий = ТекстУсловий + "
			|	И Договоры." + ТекущийОтбор.Ключ + " В (&ЗначениеОтбора" + СокрЛП(НомерОтбора) + ")";
			
			Запрос.УстановитьПараметр("ЗначениеОтбора" + СокрЛП(НомерОтбора), ТекущийОтбор.Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не СтандартнаяОбработка Тогда
		
		//Текст запроса содержит литералы для переопределения/подстановки //ТекстСоединений //ТекстУсловий
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	Договоры.Ссылка КАК Ссылка,
		               |	Договоры.Наименование КАК Наименование,
		               |	Договоры.Наименование КАК Совпадение,
		               |	1 КАК Порядок
		               |ПОМЕСТИТЬ ДоговорыПоиск 
					   |ИЗ
		               |	Справочник.ДоговорыКонтрагентов КАК Договоры
					   |
					   |//ТекстСоединений
					   |
		               |ГДЕ
		               |	Договоры.Наименование ПОДОБНО &СтрокаПоиска
					   |	//ТекстУсловий
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	Договоры.Ссылка,
		               |	Договоры.Наименование,
		               |	Договоры.Номер,
		               |	2
		               |ИЗ
		               |	Справочник.ДоговорыКонтрагентов КАК Договоры
					   |
					   |//ТекстСоединений
					   |
		               |ГДЕ
		               |	Договоры.Номер ПОДОБНО &СтрокаПоиска
					   |	//ТекстУсловий
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ДоговорыПоиск.Ссылка КАК Ссылка,
		               |	МИНИМУМ(ДоговорыПоиск.Порядок) КАК Порядок
		               |ПОМЕСТИТЬ ДоговорыПоПорядку
		               |ИЗ
		               |	ДоговорыПоиск КАК ДоговорыПоиск
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ДоговорыПоиск.Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ЕСТЬNULL(ДоговорыПоиск.Ссылка, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК Ссылка,
		               |	ЕСТЬNULL(ДоговорыПоиск.Наименование, """") КАК Наименование,
		               |	ЕСТЬNULL(ДоговорыПоиск.Совпадение, """") КАК Совпадение,
		               |	ЕСТЬNULL(ДоговорыПоиск.Порядок, 0) КАК Порядок
		               |ИЗ
		               |	ДоговорыПоПорядку КАК ДоговорыПоПорядку
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ДоговорыПоиск КАК ДоговорыПоиск
		               |		ПО ДоговорыПоПорядку.Ссылка = ДоговорыПоиск.Ссылка
		               |			И ДоговорыПоПорядку.Порядок = ДоговорыПоиск.Порядок
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ЕСТЬNULL(ДоговорыПоиск.Порядок, 0),
		               |	ЕСТЬNULL(ДоговорыПоиск.Совпадение, """"),
		               |	ЕСТЬNULL(ДоговорыПоиск.Наименование, """")";
		
		Если Не ПустаяСтрока(ТекстСоединений) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстСоединений", ТекстСоединений);
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТекстУсловий) Тогда
			
			ТекстУсловий = Сред(ТекстУсловий, 3);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстУсловий", ТекстУсловий);
			
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("СтрокаПоиска", Параметры.СтрокаПоиска + "%");
		
		ДанныеВыбора = Новый СписокЗначений;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТекстЗначение = ?(
				Выборка.Порядок = 1,
				Выборка.Наименование,
				СокрП(Выборка.Совпадение) + " (" + Выборка.Наименование + ")");
				
			ДанныеВыбора.Добавить(Выборка.Ссылка, ТекстЗначение);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Назначения

//++ НЕ УТ

// Возвращает шаблон для генерации назначения
//
// Параметры:
// 		Объект - СправочникОбъект.ДоговорыКонтрагентов, ДанныеФормыСтруктура - объект по которому необходимо получить шаблон назначения.
//
// Возвращаемое значение:
// 		Структура - (см. функцию Справочники.Назначения.ШаблонНового).
//
Функция ШаблонНазначения(Объект) Экспорт
	
	ШаблонНазначения = Справочники.Назначения.ШаблонНового();
	
	Если Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПереработчиком Тогда
		
		Если НаправленияДеятельностиСервер.ЭтоНаправлениеДеятельностиСОбособлениемТоваровИРабот(Объект.НаправлениеДеятельности) Тогда
			ШаблонНазначения.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
		КонецЕсли;
		
		ШаблонНазначения.Партнер = Объект.Партнер;
		ШаблонНазначения.Договор = Объект.Ссылка;
		
	ИначеЕсли Объект.ТипДоговора = Перечисления.ТипыДоговоров.СДавальцем Тогда
		
		Если НаправленияДеятельностиСервер.ЭтоНаправлениеДеятельностиСОбособлениемТоваровИРабот(Объект.НаправлениеДеятельности) Тогда
			ШаблонНазначения.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
		КонецЕсли;
		
		ШаблонНазначения.Партнер       = Объект.Партнер;
		ШаблонНазначения.Договор       = Объект.Ссылка;
		ШаблонНазначения.ТипНазначения = Перечисления.ТипыНазначений.ДавальческоеМатериалы22;
		
	КонецЕсли;
	
	Возврат ШаблонНазначения;
	
КонецФункции

//-- НЕ УТ

#КонецОбласти

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
// Описание параметров процедуры см. в ТекущиеДелаСлужебный.НоваяТаблицаТекущихДел().
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСлужебный.ОбщиеПараметрыЗапросов();
	
	ЗаполнитьДелоДоговорыСКлиентами(ТекущиеДела, ОбщиеПараметрыЗапросов);
	ЗаполнитьДелоДоговорыСПоставщиками(ТекущиеДела, ОбщиеПараметрыЗапросов);
	
КонецПроцедуры

Процедура ЗаполнитьДелоДоговорыСКлиентами(ТекущиеДела, ОбщиеПараметрыЗапросов)
	
	ИмяФормы = "Справочник.ДоговорыКонтрагентов.Форма.ФормаСпискаПродажи";
	
	// Определим доступны ли текущему пользователю показатели группы
	Доступность =
		(ОбщиеПараметрыЗапросов.ЭтоПолноправныйПользователь
			Или ПравоДоступа("Просмотр", Метаданные.Справочники.ДоговорыКонтрагентов))
		И ДоступныДоговорыСКлиентами();
	
	Если НЕ Доступность Тогда
		Возврат;
	КонецЕсли;
	
	// Расчет показателей
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА ДоговорСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.НеСогласован)
	|				ТОГДА ДоговорСКлиентом.Ссылка
	|		КОНЕЦ) КАК ДоговорыСКлиентамиНаСогласовании,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА ДоговорСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.НеСогласован)
	|					И (ДоговорСКлиентом.ДатаНачалаДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|							И ДоговорСКлиентом.ДатаНачалаДействия < &ДатаАктуальности
	|						ИЛИ ДоговорСКлиентом.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|							И ДоговорСКлиентом.ДатаОкончанияДействия < &ДатаАктуальности)
	|				ТОГДА ДоговорСКлиентом.Ссылка
	|			КОГДА ДоговорСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|					И ДоговорСКлиентом.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ДоговорСКлиентом.ДатаОкончанияДействия < &ДатаАктуальности
	|				ТОГДА ДоговорСКлиентом.Ссылка
	|		КОНЕЦ) КАК ДоговорыСКлиентамиПросроченные
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорСКлиентом
	|ГДЕ
	|	ДоговорСКлиентом.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Закрыт)
	|	И (ДоговорСКлиентом.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|			ИЛИ ДоговорСКлиентом.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию))
	|	И ДоговорСКлиентом.Менеджер = &Пользователь
	|	И (НЕ ДоговорСКлиентом.ПометкаУдаления)";
	
	Результат = ТекущиеДелаСлужебный.ЧисловыеПоказателиТекущихДел(Запрос, ОбщиеПараметрыЗапросов);
	
	// Заполнение дел.
	// ДоговорыСКлиентами
	ДелоРодитель = ТекущиеДела.Добавить();
	ДелоРодитель.Идентификатор  = "ДоговорыСКлиентами";
	ДелоРодитель.Представление  = НСтр("ru = 'Договоры с клиентами'");
	ДелоРодитель.Владелец       = Метаданные.Подсистемы.Продажи;
	
	// ДоговорыСКлиентамиНаСогласовании
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Состояние", Перечисления.СостоянияДоговоровКонтрагентов.ОжидаетсяСогласование);
	ПараметрыОтбора.Вставить("Актуальность", "");
	ПараметрыОтбора.Вставить("ДатаСобытия", ОбщиеПараметрыЗапросов.ПустаяДата);
	ПараметрыОтбора.Вставить("Менеджер", ОбщиеПараметрыЗапросов.Пользователь);
	ПараметрыОтбора.Вставить("Организация", Неопределено);
	ПараметрыОтбора.Вставить("Контрагент", Неопределено);
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ДоговорыСКлиентамиНаСогласовании";
	Дело.ЕстьДела       = Результат.ДоговорыСКлиентамиНаСогласовании > 0;
	Дело.Представление  = НСтр("ru = 'Договоры на согласовании'");
	Дело.Количество     = Результат.ДоговорыСКлиентамиНаСогласовании;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	Дело.Владелец       = "ДоговорыСКлиентами";
	
	// ДоговорыСКлиентамиПросроченные
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Состояние", Неопределено);
	ПараметрыОтбора.Вставить("Актуальность", "Просроченные");
	ПараметрыОтбора.Вставить("ДатаСобытия", ОбщиеПараметрыЗапросов.ПустаяДата);
	ПараметрыОтбора.Вставить("Менеджер", ОбщиеПараметрыЗапросов.Пользователь);
	ПараметрыОтбора.Вставить("Организация", Неопределено);
	ПараметрыОтбора.Вставить("Контрагент", Неопределено);
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ДоговорыСКлиентамиПросроченные";
	Дело.ЕстьДела       = Результат.ДоговорыСКлиентамиПросроченные > 0;
	Дело.Представление  = НСтр("ru = 'Просроченные договоры'");
	Дело.Количество     = Результат.ДоговорыСКлиентамиПросроченные;
	Дело.Важное         = Истина;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	Дело.Владелец       = "ДоговорыСКлиентами";
	
	Если Результат.ДоговорыСКлиентамиНаСогласовании > 0
		Или Результат.ДоговорыСКлиентамиПросроченные > 0 Тогда
		ДелоРодитель.ЕстьДела = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДелоДоговорыСПоставщиками(ТекущиеДела, ОбщиеПараметрыЗапросов)
	
	ИмяФормы = "Справочник.ДоговорыКонтрагентов.Форма.ФормаСпискаЗакупки";
	
	// Определим доступны ли текущему пользователю показатели группы
	Доступность =
		(ОбщиеПараметрыЗапросов.ЭтоПолноправныйПользователь
			Или ПравоДоступа("Просмотр", Метаданные.Справочники.ДоговорыКонтрагентов))
		И ДоступныДоговорыСПоставщиками();
	
	Если НЕ Доступность Тогда
		Возврат;
	КонецЕсли;
	
	// Расчет показателей
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА ДоговорСПоставщиком.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.НеСогласован)
	|				ТОГДА ДоговорСПоставщиком.Ссылка
	|		КОНЕЦ) КАК ДоговорыСПоставщикамиНаСогласовании,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА ДоговорСПоставщиком.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.НеСогласован)
	|					И (ДоговорСПоставщиком.ДатаНачалаДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|							И ДоговорСПоставщиком.ДатаНачалаДействия < &ДатаАктуальности
	|						ИЛИ ДоговорСПоставщиком.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|							И ДоговорСПоставщиком.ДатаОкончанияДействия < &ДатаАктуальности)
	|				ТОГДА ДоговорСПоставщиком.Ссылка
	|			КОГДА ДоговорСПоставщиком.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|					И ДоговорСПоставщиком.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ДоговорСПоставщиком.ДатаОкончанияДействия < &ДатаАктуальности
	|				ТОГДА ДоговорСПоставщиком.Ссылка
	|		КОНЕЦ) КАК ДоговорыСПоставщикамиПросроченные
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорСПоставщиком
	|ГДЕ
	|	ДоговорСПоставщиком.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Закрыт)
	|	И (ДоговорСПоставщиком.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
	|	ИЛИ ДоговорСПоставщиком.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути)
	|	ИЛИ ДоговорСПоставщиком.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки)
	|	ИЛИ ДоговорСПоставщиком.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту)
	|	ИЛИ ДоговорСПоставщиком.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути)
	|	ИЛИ ДоговорСПоставщиком.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС)
	|	ИЛИ ДоговорСПоставщиком.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
	|	ИЛИ ДоговорСПоставщиком.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи))
	|	И ДоговорСПоставщиком.Менеджер = &Пользователь
	|	И (НЕ ДоговорСПоставщиком.ПометкаУдаления)";
	
	Результат = ТекущиеДелаСлужебный.ЧисловыеПоказателиТекущихДел(Запрос, ОбщиеПараметрыЗапросов);
	
	// Заполнение дел.
	// ДоговорыСПоставщиками
	ДелоРодитель = ТекущиеДела.Добавить();
	ДелоРодитель.Идентификатор  = "ДоговорыСПоставщиками";
	ДелоРодитель.Представление  = НСтр("ru = 'Договоры с поставщиками'");
	ДелоРодитель.Владелец       = Метаданные.Подсистемы.Закупки;
	
	// ДоговорыСПоставщикамиНаСогласовании
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Состояние", Перечисления.СостоянияДоговоровКонтрагентов.ОжидаетсяСогласование);
	ПараметрыОтбора.Вставить("Актуальность", "");
	ПараметрыОтбора.Вставить("ДатаСобытия", ОбщиеПараметрыЗапросов.ПустаяДата);
	ПараметрыОтбора.Вставить("Менеджер", ОбщиеПараметрыЗапросов.Пользователь);
	ПараметрыОтбора.Вставить("Организация", Неопределено);
	ПараметрыОтбора.Вставить("Контрагент", Неопределено);
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ДоговорыСПоставщикамиНаСогласовании";
	Дело.ЕстьДела       = Результат.ДоговорыСПоставщикамиНаСогласовании > 0;
	Дело.Представление  = НСтр("ru = 'Договоры на согласовании'");
	Дело.Количество     = Результат.ДоговорыСПоставщикамиНаСогласовании;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	Дело.Владелец       = "ДоговорыСПоставщиками";
	
	// ДоговорыСПоставщикамиПросроченные
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Состояние", Неопределено);
	ПараметрыОтбора.Вставить("Актуальность", "Просроченные");
	ПараметрыОтбора.Вставить("ДатаСобытия", ОбщиеПараметрыЗапросов.ПустаяДата);
	ПараметрыОтбора.Вставить("Менеджер", ОбщиеПараметрыЗапросов.Пользователь);
	ПараметрыОтбора.Вставить("Организация", Неопределено);
	ПараметрыОтбора.Вставить("Контрагент", Неопределено);
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ДоговорыСПоставщикамиПросроченные";
	Дело.ЕстьДела       = Результат.ДоговорыСПоставщикамиПросроченные > 0;
	Дело.Представление  = НСтр("ru = 'Просроченные договоры'");
	Дело.Количество     = Результат.ДоговорыСПоставщикамиПросроченные;
	Дело.Важное         = Истина;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	Дело.Владелец       = "ДоговорыСПоставщиками";
	
	Если Результат.ДоговорыСПоставщикамиНаСогласовании > 0
		Или Результат.ДоговорыСПоставщикамиПросроченные > 0 Тогда
		ДелоРодитель.ЕстьДела = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ДоступныДоговорыСКлиентами()
	
	МассивХозяйственныхОпераций = Новый Массив;
	МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
	МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	
	Возврат ЕстьПравоНаИзменениеДоговоров(МассивХозяйственныхОпераций);
	
КонецФункции

Функция ДоступныДоговорыСПоставщиками()
	
	МассивХозяйственныхОпераций = Новый Массив;
	МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
	МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи);
	
	Возврат ЕстьПравоНаИзменениеДоговоров(МассивХозяйственныхОпераций);
	
КонецФункции

Функция ЕстьПравоНаИзменениеДоговоров(МассивХозяйственныхОпераций)
	
	ТаблицаНаборы = УправлениеДоступом.ТаблицаНаборыЗначенийДоступа();
	
	// Заполним наборы значений доступа к договорам
	Сч = 1;
	Для Каждого ХозяйственнаяОперация Из МассивХозяйственныхОпераций Цикл
		СтрокаТаб = ТаблицаНаборы.Добавить();
		СтрокаТаб.НомерНабора     = Сч;
		СтрокаТаб.ЗначениеДоступа = ХозяйственнаяОперация;
		Сч = Сч+1;
	КонецЦикла;
	
	Возврат УправлениеДоступом.ЕстьРоль("ДобавлениеИзменениеДоговоровКонтрагентов", ТаблицаНаборы);
	
КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
	КомандаОтчет = Отчеты.РасчетыСПартнерами.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.ВидимостьВФормах = "ФормаЭлемента,ФормаСпискаПродажи";
	КонецЕсли;
	
	//++ НЕ УТ
	КомандаОтчет = Отчеты.ПаспортКонтракта.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаОтчет, "ПлатежиПо275ФЗ", Истина, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли; 
	
	КомандаОтчет = Отчеты.СведенияОКооперации.ДобавитьКомандуСведенияОКооперацииПриложение1(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаОтчет, "ПлатежиПо275ФЗ", Истина, ВидСравненияКомпоновкиДанных.Равно);
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаОтчет, "ТипДоговора", 
															Перечисления.ТипыДоговоров.СПокупателем, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
	КомандаОтчет = Отчеты.СведенияОКооперации.ДобавитьКомандуСведенияОКооперацииПриложения2и3(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаОтчет, "ПлатежиПо275ФЗ", Истина, ВидСравненияКомпоновкиДанных.Равно);
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаОтчет, "ТипДоговора", 
															Перечисления.ТипыДоговоров.СПокупателем, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	//-- НЕ УТ
	
КонецПроцедуры

// Рассчитывает текущее состояние оплаты и отгрузки по договору
//
// Параметры:
//	Договор                 - СправочникСсылка.ДоговорыКонтрагентов    - Договор с контрагентом
//	СостояниеРасчетов       - УправляемаяФорма - Форма, в реквизиты которой будет помещено рассчитанное состояние.
//
Процедура РассчитатьСостояние(Знач Договор, СостояниеРасчетов) Экспорт
	
	ЗаполнитьЗначенияСвойств(СостояниеРасчетов, СтруктураСостоянияРасчетов());
	
	Если ЗначениеЗаполнено(Договор) И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСКлиентами) Тогда
	
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЕСТЬNULL(РасчетыСКлиентами.КОплатеРасход, 0) КАК СуммаОплаты,
		|	ВЫБОР КОГДА ДанныеОбъекта.Сумма <> 0 ТОГДА
		|		ЕСТЬNULL(РасчетыСКлиентами.КОплатеРасход, 0) * 100 / ДанныеОбъекта.Сумма
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК ПроцентОплаты,
		|	
		|	ЕСТЬNULL(РасчетыСКлиентами.КОтгрузкеПриход, 0) КАК СуммаОтгрузки,
		|	ВЫБОР КОГДА ДанныеОбъекта.Сумма <> 0 ТОГДА
		|		ЕСТЬNULL(РасчетыСКлиентами.КОтгрузкеПриход, 0) * 100 / ДанныеОбъекта.Сумма
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК ПроцентОтгрузки
		|	
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДанныеОбъекта
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(,,,, ЗаказКлиента = &Договор) КАК РасчетыСКлиентами
		|	ПО
		|		ИСТИНА
		|	
		|ГДЕ
		|	ДанныеОбъекта.Ссылка = &Договор
		|	И ДанныеОбъекта.ПорядокРасчетов = &ПорядокРасчетов
		|	И ДанныеОбъекта.ТипДоговора В (
		|		ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПокупателем),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СДавальцем)
		|	)
		|	
		|ОБЪЕДИНИТЬ ВСЕ
		|	
		|ВЫБРАТЬ
		|	ЕСТЬNULL(РасчетыСПоставщиками.КОплатеПриход, 0) КАК СуммаОплаты,
		|	ВЫБОР КОГДА ДанныеОбъекта.Сумма <> 0 ТОГДА
		|		ЕСТЬNULL(РасчетыСПоставщиками.КОплатеПриход, 0) * 100 / ДанныеОбъекта.Сумма
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК ПроцентОплаты,
		|	
		|	ЕСТЬNULL(РасчетыСПоставщиками.КПоступлениюРасход, 0) КАК СуммаОтгрузки,
		|	ВЫБОР КОГДА ДанныеОбъекта.Сумма <> 0 ТОГДА
		|		ЕСТЬNULL(РасчетыСПоставщиками.КПоступлениюРасход, 0) * 100 / ДанныеОбъекта.Сумма
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК ПроцентОтгрузки
		|	
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДанныеОбъекта
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрНакопления.РасчетыСПоставщиками.ОстаткиИОбороты(,,,, ЗаказПоставщику = &Договор) КАК РасчетыСПоставщиками
		|	ПО
		|		ИСТИНА
		|	
		|ГДЕ
		|	ДанныеОбъекта.Ссылка = &Договор
		|	И ДанныеОбъекта.ПорядокРасчетов = &ПорядокРасчетов
		|	И ДанныеОбъекта.ТипДоговора В (
		|		ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПоставщиком),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.Импорт),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.ВвозИзЕАЭС),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПереработчиком)
		|	)
		|";
		
		Запрос.УстановитьПараметр("Договор", Договор);
		Запрос.УстановитьПараметр("ПорядокРасчетов", Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(СостояниеРасчетов, Выборка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - СправочникСсылка - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * ВариантОтправки - Строка - Варианты отправки письма: "Кому", "Копия", "СкрытаяКопия", "ОбратныйАдреса";
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Осуществляет инициализацию структуры состояния расчетов
//
// Возвращаемое значение:
//	СтруктураСостоянияРасчетов - Структура - Необходимые поля состояния расчетов.
//
Функция СтруктураСостоянияРасчетов()
	
	СтруктураСостоянияРасчетов = Новый Структура;
	СтруктураСостоянияРасчетов.Вставить("СуммаОплаты", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаОтгрузки", 0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентОплаты", 0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентОтгрузки", 0);
	
	Возврат СтруктураСостоянияРасчетов;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

//++ НЕ УТ
Процедура ЗарегистрироватьДанныеКОбработкеДляГенерацииНазначений(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК Назначения
	|		ПО Таблица.Ссылка = Назначения.Договор
	|			И Таблица.Партнер = Назначения.Партнер
	|			И (ВЫБОР
	|				КОГДА ЕСТЬNULL(Таблица.НаправлениеДеятельности.УчетЗатрат, ИСТИНА)
	|					ТОГДА Таблица.НаправлениеДеятельности
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|			КОНЕЦ = Назначения.НаправлениеДеятельности)
	|			И Назначения.Заказ = НЕОПРЕДЕЛЕНО
	|			И Назначения.ТипНазначения В (ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Собственное),
	|										  ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.УдалитьПереработчик))
	|ГДЕ
	|	Таблица.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И Назначения.Ссылка ЕСТЬ NULL
	|	И Таблица.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПереработчиком)
	|
	//++ НЕ УТКА
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК Назначения
	|		ПО Таблица.Ссылка = Назначения.Договор
	|			И Таблица.Партнер = Назначения.Партнер
	|			И (ВЫБОР
	|				КОГДА ЕСТЬNULL(Таблица.НаправлениеДеятельности.УчетЗатрат, ИСТИНА)
	|					ТОГДА Таблица.НаправлениеДеятельности
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|			КОНЕЦ = Назначения.НаправлениеДеятельности)
	|			И Назначения.Заказ = НЕОПРЕДЕЛЕНО
	|			И Назначения.ТипНазначения В (ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалы22),
	|										  ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ПустаяСсылка))
	|ГДЕ
	|	Таблица.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И Назначения.Ссылка ЕСТЬ NULL
	|	И Таблица.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СДавальцем)
	//-- НЕ УТКА
	|";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляГенерацииНазначений(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.ДоговорыКонтрагентов";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДопПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДопПараметры.ИмяВременнойТаблицы = "ВТСсылкиДляОбработки";
	ДопПараметры.ДополнительныеИсточникиДанных.Вставить("НаправлениеДеятельности");
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта,
		МенеджерВременныхТаблиц, ДопПараметры);
	
	Если Не Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если Не Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	Если Не ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, "Справочник.Назначения") Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КОбработке.Ссылка КАК Ссылка,
	|	КОбработке.Ссылка.ВерсияДанных КАК ВерсияДанных,
	|	КОбработке.Ссылка.Партнер КАК Партнер,
	|	ВЫБОР
	|		КОГДА КОбработке.Ссылка.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПереработчиком) ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Собственное)
	//++ НЕ УТКА
	|		КОГДА КОбработке.Ссылка.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СДавальцем) ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалы22)
	//-- НЕ УТКА
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ПустаяСсылка)
	|	КОНЕЦ КАК ТипНазначения,
	|	ЕСТЬNULL(НаправленияДеятельности.Ссылка, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)) КАК НаправлениеДеятельности
	|ИЗ
	|	ВТСсылкиДляОбработки КАК КОбработке
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияДеятельности КАК НаправленияДеятельности
	|		ПО КОбработке.Ссылка.НаправлениеДеятельности = НаправленияДеятельности.Ссылка
	|			И (НаправленияДеятельности.УчетЗатрат)");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			
			ЭлементБлокировки = Блокировка.Добавить("Справочник.Назначения");
			ЭлементБлокировки.УстановитьЗначение("НаправлениеДеятельности", Выборка.НаправлениеДеятельности);
			ЭлементБлокировки.УстановитьЗначение("Заказ",                   Неопределено);
			ЭлементБлокировки.УстановитьЗначение("Партнер",                 Выборка.Партнер);
			ЭлементБлокировки.УстановитьЗначение("Договор",                 Выборка.Ссылка);
			ЭлементБлокировки.УстановитьЗначение("ТипНазначения",           Выборка.ТипНазначения);
			
			Блокировка.Заблокировать();
			
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если Объект <> Неопределено Тогда
				
				Если Не ЗначениеЗаполнено(Объект.Назначение) И Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПереработчиком Тогда
					
					ШаблонНазначения = Справочники.Назначения.ШаблонНового();
					ШаблонНазначения.НаправлениеДеятельности = Выборка.НаправлениеДеятельности;
					ШаблонНазначения.Партнер                 = Объект.Партнер;
					ШаблонНазначения.Договор                 = Объект.Ссылка;
					
					Назначение = Справочники.Назначения.НайтиПоШаблону(ШаблонНазначения);
					
					Если Не ЗначениеЗаполнено(Назначение) Тогда
						
						НазначениеОбъект = Справочники.Назначения.СоздатьЭлемент();
						ЗаполнитьЗначенияСвойств(НазначениеОбъект, ШаблонНазначения);
						
						НазначениеОбъект.Наименование                = Справочники.Назначения.ПредставлениеНазначения(ШаблонНазначения, Неопределено);
						НазначениеОбъект.ПометкаУдаления             = Объект.ПометкаУдаления;
						НазначениеОбъект.КонтролироватьТолькоНаличие = Истина;
						НазначениеОбъект.ДвиженияПоСкладскимРегистрам = Истина;
						
						ОбновлениеИнформационнойБазы.ЗаписатьДанные(НазначениеОбъект, Истина)
						
					КонецЕсли;
					
				КонецЕсли;
				
				//++ НЕ УТКА
				Если Не ЗначениеЗаполнено(Объект.Назначение) И Объект.ТипДоговора = Перечисления.ТипыДоговоров.СДавальцем Тогда
					
					ШаблонНазначения = Справочники.Назначения.ШаблонНового();
					ШаблонНазначения.НаправлениеДеятельности = Выборка.НаправлениеДеятельности;
					ШаблонНазначения.Партнер                 = Объект.Партнер;
					ШаблонНазначения.Договор                 = Объект.Ссылка;
					ШаблонНазначения.ТипНазначения           = Перечисления.ТипыНазначений.ДавальческоеМатериалы22;
					
					Назначение = Справочники.Назначения.НайтиПоШаблону(ШаблонНазначения);
					
					Если Не ЗначениеЗаполнено(Назначение) Тогда
						
						НазначениеОбъект = Справочники.Назначения.СоздатьЭлемент();
						ЗаполнитьЗначенияСвойств(НазначениеОбъект, ШаблонНазначения);
						
						НазначениеОбъект.Наименование                = Справочники.Назначения.ПредставлениеНазначения(ШаблонНазначения, Неопределено);
						НазначениеОбъект.ПометкаУдаления             = Объект.ПометкаУдаления;
						НазначениеОбъект.КонтролироватьТолькоНаличие = Истина;
						НазначениеОбъект.ДвиженияПоСкладскимРегистрам = Истина;
						
						ОбновлениеИнформационнойБазы.ЗаписатьДанные(НазначениеОбъект, Истина)
						
					КонецЕсли;
					
				КонецЕсли;
				//-- НЕ УТКА
				
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры
//-- НЕ УТ

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.Импорт)
	|	И ДоговорыКонтрагентов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ВариантОформленияЗакупок = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияЗакупок.ПустаяСсылка)
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПустаяСсылка)
	|
	//++ НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК Таблица
	|ГДЕ
	|	Таблица.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И Таблица.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПереработчиком)
	//-- НЕ УТ
	|
	//++ НЕ УТКА
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК Таблица
	|ГДЕ
	|	Таблица.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И Таблица.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СДавальцем)
	//-- НЕ УТКА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ХозяйственнаяОперация В (&ОперацииОдноходовки)
	|	И ДоговорыКонтрагентов.ВариантОформленияЗакупок В (
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияЗакупок.ТоварыВПути),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияЗакупок.НеотфактурованныеПоставки))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	(ДоговорыКонтрагентов.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|		И НЕ ДоговорыКонтрагентов.НалогообложениеНДСОпределяетсяВДокументе)
	|	ИЛИ (ДоговорыКонтрагентов.ЗакупкаПодДеятельность = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|			И НЕ ДоговорыКонтрагентов.ЗакупкаПодДеятельностьОпределяетсяВДокументе)
	|";
	
	ОперацииОдноходовки = Новый Массив();
	ОперацииОдноходовки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	ОперацииОдноходовки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
	ОперацииОдноходовки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС);
	
	Запрос.УстановитьПараметр("ОперацииОдноходовки", ОперацииОдноходовки);
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.ДоговорыКонтрагентов";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДопПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДопПараметры.ИмяВременнойТаблицы = "ВТСсылкиДляОбработки";
	ДопПараметры.ДополнительныеИсточникиДанных.Вставить("НаправлениеДеятельности");
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта,
		МенеджерВременныхТаблиц, ДопПараметры);
	
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КОбработке.Ссылка КАК Ссылка,
	|	КОбработке.Ссылка.ВерсияДанных КАК ВерсияДанных,
	|	ЕСТЬNULL(НаправленияДеятельности.Ссылка, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)) КАК НаправлениеДеятельности
	|ИЗ
	|	ВТСсылкиДляОбработки КАК КОбработке
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияДеятельности КАК НаправленияДеятельности
	|		ПО КОбработке.Ссылка.НаправлениеДеятельности = НаправленияДеятельности.Ссылка
	|			И (НаправленияДеятельности.УчетЗатрат)");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ВариантПриемкиКонстанта = Константы.ВариантПриемкиТоваров.Получить();
	
	ОперацииОдноходовки = Новый Массив();
	ОперацииОдноходовки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	ОперацииОдноходовки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
	ОперацииОдноходовки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			Объект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(Выборка.Ссылка, Выборка.ВерсияДанных, Параметры.Очередь);
			
			Если Объект <> Неопределено Тогда
				
				ОбъектИзменен = Ложь;
				
				//++ НЕ УТ
				Если Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПереработчиком И Объект.Назначение.Пустая() Тогда
					
					ШаблонНазначения = Справочники.Назначения.ШаблонНового();
					ШаблонНазначения.НаправлениеДеятельности = Выборка.НаправлениеДеятельности;
					ШаблонНазначения.Партнер                 = Объект.Партнер;
					ШаблонНазначения.Договор                 = Объект.Ссылка;
					
					Назначение = Справочники.Назначения.НайтиПоШаблону(ШаблонНазначения);
					
					Если ЗначениеЗаполнено(Назначение) Тогда
						Объект.Назначение = Назначение;
					Иначе
						ВызватьИсключение НСтр("ru = 'В информационной базе не обнаружено нужное назначение'");
					КонецЕсли;
					
					ОбъектИзменен = Истина;
					
				КонецЕсли;
				//-- НЕ УТ
				
				//++ НЕ УТКА
				Если Объект.ТипДоговора = Перечисления.ТипыДоговоров.СДавальцем И Объект.Назначение.Пустая() Тогда
					
					ШаблонНазначения = Справочники.Назначения.ШаблонНового();
					ШаблонНазначения.НаправлениеДеятельности = Выборка.НаправлениеДеятельности;
					ШаблонНазначения.Партнер                 = Объект.Партнер;
					ШаблонНазначения.Договор                 = Объект.Ссылка;
					ШаблонНазначения.ТипНазначения           = Перечисления.ТипыНазначений.ДавальческоеМатериалы22;
					
					Назначение = Справочники.Назначения.НайтиПоШаблону(ШаблонНазначения);
					
					Если ЗначениеЗаполнено(Назначение) Тогда
						Объект.Назначение = Назначение;
					Иначе
						ВызватьИсключение НСтр("ru = 'В информационной базе не обнаружено нужное назначение'");
					КонецЕсли;
					
					ОбъектИзменен = Истина;
					
				КонецЕсли;
				//-- НЕ УТКА
				
				Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС
					И Объект.ТипДоговора <> Перечисления.ТипыДоговоров.ВвозИзЕАЭС Тогда
					Объект.ТипДоговора = Перечисления.ТипыДоговоров.ВвозИзЕАЭС;
					ОбъектИзменен = Истина;
				КонецЕсли;
				
				Если Объект.ВариантОформленияЗакупок = Перечисления.ВариантыОформленияЗакупок.ПустаяСсылка() Тогда
					Объект.ВариантОформленияЗакупок = Перечисления.ВариантыОформленияЗакупок.НеРазделять;
					ОбъектИзменен = Истина;
				КонецЕсли;
				
				Если Объект.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.ПустаяСсылка() Тогда
					Объект.ВариантПриемкиТоваров = ВариантПриемкиКонстанта;
					ОбъектИзменен = Истина;
				КонецЕсли;
				
				Если Объект.СпособДоставки = Перечисления.СпособыДоставки.ПустаяСсылка() Тогда
					Объект.СпособДоставки = Перечисления.СпособыДоставки.ОпределяетсяВРаспоряжении;
					ОбъектИзменен = Истина;
				КонецЕсли;
				
				Если Объект.ВариантОформленияЗакупок = Перечисления.ВариантыОформленияЗакупок.ТоварыВПути
					И ОперацииОдноходовки.Найти(Объект.ХозяйственнаяОперация) <> Неопределено
					И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика Тогда
					Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути;
					ОбъектИзменен = Истина;
				ИначеЕсли Объект.ВариантОформленияЗакупок = Перечисления.ВариантыОформленияЗакупок.ТоварыВПути
					И ОперацииОдноходовки.Найти(Объект.ХозяйственнаяОперация) <> Неопределено
					И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту Тогда
					Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути;
					ОбъектИзменен = Истина;
				ИначеЕсли Объект.ВариантОформленияЗакупок = Перечисления.ВариантыОформленияЗакупок.ТоварыВПути
					И ОперацииОдноходовки.Найти(Объект.ХозяйственнаяОперация) <> Неопределено
					И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС Тогда
					Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути;
					ОбъектИзменен = Истина;
				ИначеЕсли Объект.ВариантОформленияЗакупок = Перечисления.ВариантыОформленияЗакупок.НеотфактурованныеПоставки
					И ОперацииОдноходовки.Найти(Объект.ХозяйственнаяОперация) <> Неопределено
					И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика Тогда
					Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки;
					ОбъектИзменен = Истина;
				ИначеЕсли Объект.ВариантОформленияЗакупок = Перечисления.ВариантыОформленияЗакупок.НеотфактурованныеПоставки
					И ОперацииОдноходовки.Найти(Объект.ХозяйственнаяОперация) <> Неопределено
					И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС Тогда
					Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки;
					ОбъектИзменен = Истина;
				КонецЕсли;
				
				Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка()
					И Не Объект.НалогообложениеНДСОпределяетсяВДокументе Тогда
					
					Объект.НалогообложениеНДСОпределяетсяВДокументе = Истина;
					ОбъектИзменен = Истина;
					
				КонецЕсли;
				
				Если Объект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка()
					И Не Объект.ЗакупкаПодДеятельностьОпределяетсяВДокументе Тогда
					
					Объект.ЗакупкаПодДеятельностьОпределяетсяВДокументе = Истина;
					ОбъектИзменен = Истина;
					
				КонецЕсли;
				
				Если ОбъектИзменен Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Объект);
				КонецЕсли;
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
