#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает партию производства с полями, соответствующими указанным.
//
// Параметры:
//	ПоляПартии - Структура, СтрокаТаблицыЗначений - поля партии производства.
//		Обязательными для заполнения полями выступают "Документ", "Организация", "Номенклатура",
//		остальные поля являются необязательными и в случае отсутствия будут заполнены пустыми значениями.
//	ПроверятьПередСозданием	- Булево - флаг необходимости поиска партии производства перед созданием новой.
//	ОбновлятьСуществующие	- Булево - флаг необходимости обновления полей существующих партий производства.
//
// Возвращаемое значение:
//	СправочникСсылка.ПартииПроизводства - найденная или сформированная партия производства.
//
Функция ПолучитьПартиюПроизводства(ПоляПартии = Неопределено,
								ПроверятьПередСозданием = Истина,
								ОбновлятьСуществующие = Ложь) Экспорт
	
	КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	
	// Заполним все реквизиты партии производства.
	СтруктураРеквизитовПартии = Новый Структура("Код, Документ, Ссылка", 0, Неопределено, Неопределено);
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитовПартии, ПоляПартии);
	
	Для Каждого МетаРеквизит Из Метаданные.Справочники.ПартииПроизводства.Реквизиты Цикл
		
		СтруктураРеквизита = Новый Структура(МетаРеквизит.Имя);
		ЗаполнитьЗначенияСвойств(СтруктураРеквизита, ПоляПартии); // в ПоляПартии такого свойства может и не быть
		
		СтруктураРеквизитовПартии.Вставить(
			МетаРеквизит.Имя,
			МетаРеквизит.Тип.ПривестиЗначение(СтруктураРеквизита[МетаРеквизит.Имя])); // а в СтруктураРеквизита такое свойство точно есть
		
	КонецЦикла;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ПартииПроизводства");
		ЭлементБлокировки.УстановитьЗначение("Код", СтруктураРеквизитовПартии.Код);
		ЭлементБлокировки.УстановитьЗначение("Документ", СтруктураРеквизитовПартии.Документ);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		// Если необходимо - попытаемся найти подходящую партию.
		ДанныеПартии = Новый Структура;
		ДанныеПартии.Вставить("ПартияПроизводства", Справочники.ПартииПроизводства.ПустаяСсылка());
		
		Если ПроверятьПередСозданием Тогда
			СтруктураОтбора = Новый Структура(ПоляИдентификацииПартииПроизводства());
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтруктураРеквизитовПартии);
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Таблица.Ссылка КАК ПартияПроизводства
			|ИЗ
			|	Справочник.ПартииПроизводства КАК Таблица
			|ГДЕ
			|	НЕ Таблица.ПометкаУдаления
			|	И &УсловиеЗапроса
			|";
			
			УсловиеЗапроса = "ИСТИНА";
			
			Для Каждого КлючИЗначение Из СтруктураОтбора Цикл
				
				Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
				УсловиеЗапроса = УсловиеЗапроса + "
					|	И Таблица." + КлючИЗначение.Ключ + " = &" + КлючИЗначение.Ключ;
				
			КонецЦикла;
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеЗапроса", УсловиеЗапроса);
			
			УстановитьПривилегированныйРежим(Истина);
			Выборка = Запрос.Выполнить().Выбрать();
			УстановитьПривилегированныйРежим(Ложь);
			
			Если Выборка.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(ДанныеПартии, Выборка);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеПартии.ПартияПроизводства)
			ИЛИ ОбновлятьСуществующие Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			Если НЕ ЗначениеЗаполнено(ДанныеПартии.ПартияПроизводства) Тогда
				
				// Партии производства нет в справочнике - создадим элемент справочника.
				СправочникОбъект = Справочники.ПартииПроизводства.СоздатьЭлемент();
				
				Если ЗначениеЗаполнено(СтруктураРеквизитовПартии.Ссылка) Тогда
					СправочникОбъект.УстановитьСсылкуНового(СтруктураРеквизитовПартии.Ссылка);
				КонецЕсли;
				
			Иначе
				СправочникОбъект = ДанныеПартии.ПартияПроизводства.ПолучитьОбъект();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СправочникОбъект, СтруктураРеквизитовПартии);
			СправочникОбъект.Записать();
			
			УстановитьПривилегированныйРежим(Ложь);
			
			ДанныеПартии.ПартияПроизводства = СправочникОбъект.Ссылка;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		Возврат ДанныеПартии.ПартияПроизводства;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ПредставлениеГруппыЗатрат = ГруппыЗатратСервер.ПредставлениеГруппыЗатрат(СтруктураРеквизитовПартии);
		НаименованиеПартии = НаименованиеПартииПроизводства(СтруктураРеквизитовПартии, ПредставлениеГруппыЗатрат);
		
		ТекстСообщения = НСтр("ru = 'Не удалось создать партию производства с параметрами: %ПартияПроизводства% по причине: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПартияПроизводства%", НаименованиеПартии);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Справочник.ПартииПроизводства.ПолучитьПартиюПроизводства'", КодОсновногоЯзыка),
								УровеньЖурналаРегистрации.Ошибка,
								Метаданные.Справочники.ПартииПроизводства,
								,
								ТекстСообщения);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

// Создает или обновляет данные партии производства при записи документа.
//
// Параметры:
//  ПартияПроизводства		 - СправочникСсылка.ПартииПроизводства	 - ссылка на партию производства.
//  ПоляПартии				 - Структура							 - описание партии производства.
//  ОбновлятьСуществующие	 - Булево								 - признак, необходимо обновлять существующие партии.
//  НоваяПартияПроизводства	 - Булево								 - возвращаемое значение, признак, партия производства новая.
//  НомерПартииПроизводства	 - Число								 - возвращаемое значение, номер партии производства.
//
Процедура СоздатьОбновитьПартиюПроизводства(ПартияПроизводства,
											ПоляПартии = Неопределено,
											ОбновлятьСуществующие = Истина,
											ПометкаУдаления = Ложь,
											НоваяПартияПроизводства = Ложь,
											НомерПартииПроизводства = 0) Экспорт
	
	Если Не ЗначениеЗаполнено(ПартияПроизводства) Тогда
		Возврат;
	КонецЕсли;
	
	ИменаРеквизитов = Новый Структура("Код, Документ, Ссылка, ПометкаУдаления");
	
	СтруктураРеквизитовПартии = Новый Структура;
	СтруктураРеквизитовПартии.Вставить("Код", 0);
	СтруктураРеквизитовПартии.Вставить("Документ", Неопределено);
	СтруктураРеквизитовПартии.Вставить("Ссылка", Неопределено);
	СтруктураРеквизитовПартии.Вставить("ПометкаУдаления", ПометкаУдаления);
	
	Для каждого МетаРеквизит Из Метаданные.Справочники.ПартииПроизводства.Реквизиты Цикл
		
		ИменаРеквизитов.Вставить(МетаРеквизит.Имя);
		
		СтруктураРеквизита = Новый Структура(МетаРеквизит.Имя);
		ЗаполнитьЗначенияСвойств(СтруктураРеквизита, ПоляПартии);
		
		СтруктураРеквизитовПартии.Вставить(
			МетаРеквизит.Имя,
			МетаРеквизит.Тип.ПривестиЗначение(СтруктураРеквизита[МетаРеквизит.Имя]));
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	РеквизитыПартии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПартияПроизводства, ИменаРеквизитов);
	УстановитьПривилегированныйРежим(Ложь);
	
	НомерПартииПроизводства = РеквизитыПартии.Код;
	НоваяПартияПроизводства = (РеквизитыПартии.Код = Неопределено);
	
	Если НЕ НоваяПартияПроизводства
		И (НЕ ОбновлятьСуществующие ИЛИ СтруктурыРеквизитовПартийРавны(РеквизитыПартии, СтруктураРеквизитовПартии)) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Если НоваяПартияПроизводства Тогда
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ПартииПроизводства");
		ЭлементБлокировки.УстановитьЗначение("Документ", СтруктураРеквизитовПартии.Документ);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(Таблица.Код), 0) + 1 КАК НомерПартииПроизводства
		|ИЗ
		|	Справочник.ПартииПроизводства КАК Таблица
		|ГДЕ
		|	Таблица.Документ = &Документ
		|");
		Запрос.УстановитьПараметр("Документ", СтруктураРеквизитовПартии.Документ);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		НомерПартииПроизводства = Выборка.НомерПартииПроизводства;
		
		СправочникОбъект = Справочники.ПартииПроизводства.СоздатьЭлемент();
		СправочникОбъект.УстановитьСсылкуНового(ПартияПроизводства);
		
	Иначе
		СправочникОбъект = ПартияПроизводства.ПолучитьОбъект();
	КонецЕсли;
	
	СтруктураРеквизитовПартии.Код				= НомерПартииПроизводства;
	
	ЗаполнитьЗначенияСвойств(СправочникОбъект, СтруктураРеквизитовПартии);
	СправочникОбъект.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Заполняет партию производства в коллекции.
//
// Параметры:
//	Коллекция - ТаблицаЗначений	- Обязательными для заполнения полями выступают "Документ", "Организация", "Номенклатура".
//	ПроверятьПередСозданием		- Булево - флаг необходимости поиска партии производства перед созданием новой.
//	ОбновлятьСуществующие		- Булево - флаг необходимости обновления полей существующих партий производства.
//
Процедура ЗаполнитьПартиюПроизводстваВКоллекции(Коллекция,
												ПроверятьПередСозданием = Истина,
												ОбновлятьСуществующие = Ложь) Экспорт
	
	// Если значение колонки равняется Неопределено, то описание типов значений этой колонки будет пустым.
	// В этом случае в запросах платформа не сможет выбрать значения из нетипизированной колонки.
	// Для обхода этой ситуации создадим в таблице колонку с "правильным" типом значений и подменим ей исходную колонку.
	Коллекция.Колонки.Добавить("ДокументТипизированный",
		Метаданные.Справочники.ПартииПроизводства.Реквизиты.Документ.Тип);
	
	Для Каждого ТекСтр Из Коллекция Цикл
		ТекСтр.ПартияПроизводства = ПолучитьПартиюПроизводства(ТекСтр, ПроверятьПередСозданием, ОбновлятьСуществующие);
		ТекСтр.ДокументТипизированный = ТекСтр.Документ;
	КонецЦикла;
	
	Коллекция.Колонки.Удалить("Документ");
	Коллекция.Колонки.ДокументТипизированный.Имя = "Документ";
	
КонецПроцедуры

// Процедура получает данные для формирования партий производства и формирует их.
// 
// Параметры:
//	Запрос							- Запрос - запрос, с установленными для формирования партий параметрами.
//	ТекстВыборкаПолейПартий			- Строка - текст запроса формирования временной таблицы ВТПоляПартийПроизводства с полями:
//		- Документ
//		- ГруппировкаЗатрат
//		- НомерГруппыЗатрат
//		- Организация
//		- ТипПроцесса
//		- НаправлениеДеятельности
//		- ВидДеятельностиНДС
//		- ОсновноеИзделиеНоменклатура
//		- ОсновноеИзделиеХарактеристика
//		- Номенклатура
//		- Характеристика
//		- ГруппаПродукции
//		- Спецификация
//		- Назначение
//	ТаблицаПродукцииСформирована	- Булево - флаг необходимости формирования таблицы продукции.
//	ПроверятьПередСозданием			- Булево - флаг необходимости поиска партии производства перед созданием новой.
//	ОбновлятьСуществующие			- Булево - флаг необходимости обновления полей существующих партий производства.
//
// Возвращаемое значение:
//	Строка - текст запроса для создания ВтТаблицаПартийПроизводства.
//
Процедура СформироватьПартииПроизводства(Запрос,
										ТекстВыборкаПолейПартий,
										ПроверятьПередСозданием = Истина,
										ОбновлятьСуществующие = Ложь) Экспорт
	
	МассивТекстовЗапросов = Новый Массив;
	МассивТекстовЗапросов.Добавить(ТекстЗапросаНомераСтрокОсновныхИзделий());
	МассивТекстовЗапросов.Добавить(ТекстВыборкаПолейПартий);
	МассивТекстовЗапросов.Добавить(ТекстЗапросаКорректныеПоляПартийПроизводства());
	МассивТекстовЗапросов.Добавить(ТекстЗапросаТаблицаПартийПроизводстваПредварительная());
	МассивТекстовЗапросов.Добавить(ТекстЗапросаТаблицаПартийПроизводстваКОбработке(ОбновлятьСуществующие));
	
	Запрос.Текст = СтрСоединить(МассивТекстовЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос.УстановитьПараметр("АналитическийУчетПоГруппамПродукции",
		ПолучитьФункциональнуюОпцию("АналитическийУчетПоГруппамПродукции"));
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаПартийКОбработке = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗаполнитьПартиюПроизводстваВКоллекции(ТаблицаПартийКОбработке, ПроверятьПередСозданием, ОбновлятьСуществующие);
	
КонецПроцедуры

// Возвращает номер партии производства.
//
// Параметры:
//  ПартияПроизводства		 - СправочникСсылка.ПартияПроизводства	 - партия производства.
// 
// Возвращаемое значение:
//  Число - номер партии производства.
//
Функция НомерПартииПроизводства(ПартияПроизводства) Экспорт
	
	НомерПартии = -1;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Таблица.Код КАК НомерПартии
	|ИЗ
	|	Справочник.ПартииПроизводства КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ПартияПроизводства);

	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		НоваяПартияПроизводства = Ложь;
		НомерПартии = Выборка.НомерПартии;
		
	КонецЕсли;
	
	Возврат НомерПартии;
	
КонецФункции

// Возвращает наименование партии производства.
//
// Параметры:
//  СтруктураПартии				- СправочникОбъект.ПартияПроизводства, Структура - партия производства.
//  ПредставлениеГруппыЗатрат	- Строка - представление группы затрат партии производства.
// 
// Возвращаемое значение:
//  Строка - наименование партии производства.
//
Функция НаименованиеПартииПроизводства(СтруктураПартии, ПредставлениеГруппыЗатрат = "") Экспорт
	
	Если Не ЗначениеЗаполнено(ПредставлениеГруппыЗатрат) Тогда
		ПредставлениеГруппыЗатрат = ГруппыЗатратСервер.ПредставлениеГруппыЗатрат(СтруктураПартии);
	КонецЕсли;
	
	СписокРеквизитов = "Номер, Дата";
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураПартии.Документ, СписокРеквизитов);
	РеквизитыДокумента.Вставить("Представление", Строка(СтруктураПартии.Документ));
	
	ПредставлениеДокумента = ОбщегоНазначенияУТКлиентСервер.ПредставлениеОбъектаИзПредставленияСсылки(РеквизитыДокумента);
	НомерДокумента = ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(РеквизитыДокумента.Номер);
	
	ПредставлениеПартии = НСтр("ru = '%ПредставлениеДокумента% (%Номер%.%НомерГруппы%, %Дата%);'");
	Если ЗначениеЗаполнено(СтруктураПартии.ГруппировкаЗатрат) Тогда
		ПредставлениеПартии = ПредставлениеПартии + " " + НСтр("ru = 'Группа затрат: %ГруппаЗатрат%'");
	КонецЕсли;
	
	ПредставлениеПартии = СтрЗаменить(ПредставлениеПартии, "%ПредставлениеДокумента%",	ПредставлениеДокумента);
	ПредставлениеПартии = СтрЗаменить(ПредставлениеПартии, "%Номер%",					НомерДокумента);
	ПредставлениеПартии = СтрЗаменить(ПредставлениеПартии, "%НомерГруппы%",				Строка(СтруктураПартии.Код));
	ПредставлениеПартии = СтрЗаменить(ПредставлениеПартии, "%Дата%",					Формат(РеквизитыДокумента.Дата, "ДЛФ=D"));
	ПредставлениеПартии = СтрЗаменить(ПредставлениеПартии, "%ГруппаЗатрат%",			ПредставлениеГруппыЗатрат);
	
	Возврат ПредставлениеПартии;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает перечень полей, идентифицирующих партию производства
//
// Возвращаемое значение:
//	Строка - перечень полей, идентифицирующих партию производства.
//
Функция ПоляИдентификацииПартииПроизводства() Экспорт
	
	Возврат "Документ, Код";
	
КонецФункции

// Формирует структуру для описания полей партии производства
// 
// Возвращаемое значение:
//  Структура - структура полей партии производства
//
Функция ОписаниеПартииПроизводства() Экспорт
	
	СтруктураРеквизитовПартии = Новый Структура;
	
	Для каждого МетаРеквизит Из Метаданные.Справочники.ПартииПроизводства.Реквизиты Цикл
		
		СтруктураРеквизитовПартии.Вставить(
			МетаРеквизит.Имя,
			МетаРеквизит.Тип.ПривестиЗначение(Неопределено));
		
	КонецЦикла;
	
	Возврат СтруктураРеквизитовПартии;
	
КонецФункции

Функция СтруктурыРеквизитовПартийРавны(Структура1, Структура2)
	
	Для каждого ТекРеквизит Из Структура1 Цикл
		
		ИмяРеквизита = ТекРеквизит.Ключ;
		
		Если ИмяРеквизита = "Код"
			ИЛИ ИмяРеквизита = "Ссылка"
			ИЛИ ИмяРеквизита = "Наименование"
			ИЛИ ИмяРеквизита = "ГруппаЗатрат" Тогда
			Продолжить;
		КонецЕсли;
		
		Если Структура1[ИмяРеквизита] <> Структура2[ИмяРеквизита] Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ТекстЗапросаНомераСтрокОсновныхИзделий()
	
	Возврат
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаТовары.НомерСтроки)	КАК НомерСтроки,
	|	ТаблицаТовары.НомерГруппыЗатрат		КАК НомерГруппыЗатрат
	|ПОМЕСТИТЬ НомераСтрокОсновныхИзделий
	|ИЗ
	|	ТаблицаПродукция КАК ТаблицаТовары
	|
	|ГДЕ
	|	НЕ &ГруппировкаЗатрат = ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.НомерГруппыЗатрат
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерГруппыЗатрат
	|";
	
КонецФункции

Функция ТекстЗапросаКорректныеПоляПартийПроизводства()
	
	Возврат
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.Документ) В (ТИП(Документ.ОтчетПереработчика),
	//++ НЕ УТКА
	|										ТИП(Документ.ЗаказНаПроизводство2_2),
	//-- НЕ УТКА
	|										ТИП(Документ.ПроизводствоБезЗаказа))
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Т.Документ
	|	КОНЕЦ						КАК Документ,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.ГруппировкаЗатрат) В (ТИП(Перечисление.ГруппировкиЗатратВЗаказеПереработчику),
	|													ТИП(Перечисление.ГруппировкиЗатратВПроизводствеБезЗаказа))
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Т.ГруппировкаЗатрат
	|	КОНЕЦ						КАК ГруппировкаЗатрат,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.НомерГруппыЗатрат) = ТИП(Число)
	|			ТОГДА 0
	|		ИНАЧЕ Т.НомерГруппыЗатрат
	|	КОНЕЦ						КАК НомерГруппыЗатрат,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.Организация) = ТИП(Справочник.Организации)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		ИНАЧЕ Т.Организация
	|	КОНЕЦ						КАК Организация,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.ТипПроцесса) = ТИП(Перечисление.ТипыПроизводственныхПроцессов)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.ПустаяСсылка)
	|		ИНАЧЕ Т.ТипПроцесса
	|	КОНЕЦ						КАК ТипПроцесса,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.НаправлениеДеятельности) = ТИП(Справочник.НаправленияДеятельности)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|		ИНАЧЕ Т.НаправлениеДеятельности
	|	КОНЕЦ						КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.ВидДеятельностиНДС) = ТИП(Перечисление.ТипыНалогообложенияНДС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|		ИНАЧЕ Т.ВидДеятельностиНДС
	|	КОНЕЦ						КАК ВидДеятельностиНДС,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.ОсновноеИзделиеНоменклатура) = ТИП(Справочник.Номенклатура)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		ИНАЧЕ Т.ОсновноеИзделиеНоменклатура
	|	КОНЕЦ						КАК ОсновноеИзделиеНоменклатура,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.ОсновноеИзделиеХарактеристика) = ТИП(Справочник.ХарактеристикиНоменклатуры)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		ИНАЧЕ Т.ОсновноеИзделиеХарактеристика
	|	КОНЕЦ						КАК ОсновноеИзделиеХарактеристика,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.Номенклатура) = ТИП(Справочник.Номенклатура)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		ИНАЧЕ Т.Номенклатура
	|	КОНЕЦ						КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.Характеристика) = ТИП(Справочник.ХарактеристикиНоменклатуры)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		ИНАЧЕ Т.Характеристика
	|	КОНЕЦ						КАК Характеристика,
	|	ВЫБОР
	|		КОГДА НЕ &АналитическийУчетПоГруппамПродукции
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.ГруппаПродукции) = ТИП(Справочник.ГруппыАналитическогоУчетаНоменклатуры)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)
	|		ИНАЧЕ Т.ГруппаПродукции
	|	КОНЕЦ						КАК ГруппаПродукции,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.Спецификация) = ТИП(Справочник.РесурсныеСпецификации)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|		ИНАЧЕ Т.Спецификация
	|	КОНЕЦ						КАК Спецификация,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.Назначение) = ТИП(Справочник.Назначения)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		ИНАЧЕ Т.Назначение
	|	КОНЕЦ						КАК Назначение
	|ПОМЕСТИТЬ ВТКорректныеПоляПартийПроизводства
	|ИЗ
	|	ВТПоляПартийПроизводства КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.Документ) В (ТИП(Документ.ОтчетПереработчика),
	//++ НЕ УТКА
	|										ТИП(Документ.ЗаказНаПроизводство2_2),
	//-- НЕ УТКА
	|										ТИП(Документ.ПроизводствоБезЗаказа))
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Т.Документ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.ГруппировкаЗатрат) В (ТИП(Перечисление.ГруппировкиЗатратВЗаказеПереработчику),
	|													ТИП(Перечисление.ГруппировкиЗатратВПроизводствеБезЗаказа))
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Т.ГруппировкаЗатрат
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.НомерГруппыЗатрат) = ТИП(Число)
	|			ТОГДА 0
	|		ИНАЧЕ Т.НомерГруппыЗатрат
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.Организация) = ТИП(Справочник.Организации)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		ИНАЧЕ Т.Организация
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.ТипПроцесса) = ТИП(Перечисление.ТипыПроизводственныхПроцессов)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.ПустаяСсылка)
	|		ИНАЧЕ Т.ТипПроцесса
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.НаправлениеДеятельности) = ТИП(Справочник.НаправленияДеятельности)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|		ИНАЧЕ Т.НаправлениеДеятельности
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.ВидДеятельностиНДС) = ТИП(Перечисление.ТипыНалогообложенияНДС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|		ИНАЧЕ Т.ВидДеятельностиНДС
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.ОсновноеИзделиеНоменклатура) = ТИП(Справочник.Номенклатура)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		ИНАЧЕ Т.ОсновноеИзделиеНоменклатура
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.ОсновноеИзделиеХарактеристика) = ТИП(Справочник.ХарактеристикиНоменклатуры)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		ИНАЧЕ Т.ОсновноеИзделиеХарактеристика
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.Номенклатура) = ТИП(Справочник.Номенклатура)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		ИНАЧЕ Т.Номенклатура
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.Характеристика) = ТИП(Справочник.ХарактеристикиНоменклатуры)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		ИНАЧЕ Т.Характеристика
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ &АналитическийУчетПоГруппамПродукции
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.ГруппаПродукции) = ТИП(Справочник.ГруппыАналитическогоУчетаНоменклатуры)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)
	|		ИНАЧЕ Т.ГруппаПродукции
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.Спецификация) = ТИП(Справочник.РесурсныеСпецификации)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|		ИНАЧЕ Т.Спецификация
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.Назначение) = ТИП(Справочник.Назначения)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		ИНАЧЕ Т.Назначение
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ,
	|	НомерГруппыЗатрат
	|";
КонецФункции

Функция ТекстЗапросаТаблицаПартийПроизводстваПредварительная()
	
	Возврат
	"ВЫБРАТЬ
	|	Т.Документ						КАК Документ,
	|	Т.ГруппировкаЗатрат				КАК ГруппировкаЗатрат,
	|	Т.НомерГруппыЗатрат				КАК НомерГруппыЗатрат,
	|	Т.Организация					КАК Организация,
	|	Т.ТипПроцесса					КАК ТипПроцесса,
	|	Т.НаправлениеДеятельности		КАК НаправлениеДеятельности,
	|	Т.ВидДеятельностиНДС			КАК ВидДеятельностиНДС,
	|	Т.ОсновноеИзделиеНоменклатура	КАК ОсновноеИзделиеНоменклатура,
	|	Т.ОсновноеИзделиеХарактеристика	КАК ОсновноеИзделиеХарактеристика,
	|	Т.Номенклатура					КАК Номенклатура,
	|	Т.Характеристика				КАК Характеристика,
	|	Т.ГруппаПродукции				КАК ГруппаПродукции,
	|	Т.Спецификация					КАК Спецификация,
	|	Т.Назначение					КАК Назначение,
	|	ЕСТЬNULL(СпрПартииПроизводства.Ссылка,
	|		ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)) КАК ПартияПроизводства
	|ПОМЕСТИТЬ ВтТаблицаПартийПроизводстваПредварительная
	|ИЗ
	|	ВТКорректныеПоляПартийПроизводства КАК Т
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПартииПроизводства КАК СпрПартииПроизводства
	|		ПО СпрПартииПроизводства.Документ = Т.Документ
	|		И СпрПартииПроизводства.Код = Т.НомерГруппыЗатрат
	|		И НЕ СпрПартииПроизводства.ПометкаУдаления
	|";
	
КонецФункции

Функция ТекстЗапросаТаблицаПартийПроизводстваКОбработке(ОбновлятьСуществующие = Ложь)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Т.Документ						КАК Документ,
	|	Т.ГруппировкаЗатрат				КАК ГруппировкаЗатрат,
	|	Т.НомерГруппыЗатрат				КАК Код,
	|	Т.Организация					КАК Организация,
	|	Т.ТипПроцесса					КАК ТипПроцесса,
	|	Т.НаправлениеДеятельности		КАК НаправлениеДеятельности,
	|	Т.ВидДеятельностиНДС			КАК ВидДеятельностиНДС,
	|	Т.ОсновноеИзделиеНоменклатура	КАК ОсновноеИзделиеНоменклатура,
	|	Т.ОсновноеИзделиеХарактеристика	КАК ОсновноеИзделиеХарактеристика,
	|	Т.Номенклатура					КАК Номенклатура,
	|	Т.Характеристика				КАК Характеристика,
	|	Т.ГруппаПродукции				КАК ГруппаПродукции,
	|	Т.Спецификация					КАК Спецификация,
	|	Т.Назначение					КАК Назначение,
	|	Т.ПартияПроизводства			КАК ПартияПроизводства
	|ИЗ
	|	ВтТаблицаПартийПроизводстваПредварительная КАК Т
	|ГДЕ
	|	&УсловиеОбновлятьСуществующие
	|";
	
	Если ОбновлятьСуществующие Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОбновлятьСуществующие", "ИСТИНА");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОбновлятьСуществующие", "Т.ПартияПроизводства = ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

#Область ОбработчикГенерацияПартийПроизводства_2_4_6

Процедура ЗарегистрироватьДанныеКОбработкеДляГенерацииПартийПроизводства(Параметры) Экспорт
	
	ТекстыЗапроса = Новый Массив;
	
	#Область ВтТаблицаТоваров
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПартииПроизводства.ПартияПроизводства				КАК ПартияПроизводства,
	|	ПартииПроизводства.АналитикаУчетаПартийПроизводства	КАК АналитикаУчетаПартийПроизводства
	|ПОМЕСТИТЬ ВтТаблицаТоваров
	|ИЗ
	|	(
	// Распределение возвратных отходов
	|	ВЫБРАТЬ
	|		ТаблицаТовары.ПартияПроизводства						КАК ПартияПроизводства,
	|		ТаблицаТовары.УдалитьАналитикаУчетаПартийПроизводства	КАК АналитикаУчетаПартийПроизводства
	|	ИЗ
	|		Документ.РаспределениеВозвратныхОтходов.ПартииПроизводства КАК ТаблицаТовары
	|
	|	ГДЕ
	|		ТаблицаТовары.ПартияПроизводства = ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
	|		И НЕ ТаблицаТовары.УдалитьПартияПроизводства = НЕОПРЕДЕЛЕНО
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Распределение материалов и работ
	|	ВЫБРАТЬ
	|		ТаблицаТовары.ПартияПроизводства						КАК ПартияПроизводства,
	|		ТаблицаТовары.УдалитьАналитикаУчетаПартийПроизводства	КАК АналитикаУчетаПартийПроизводства
	|	ИЗ
	|		Документ.РаспределениеПроизводственныхЗатрат.ПартииПроизводства КАК ТаблицаТовары
	|
	|	ГДЕ
	|		ТаблицаТовары.ПартияПроизводства = ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
	|		И НЕ ТаблицаТовары.УдалитьПартияПроизводства = НЕОПРЕДЕЛЕНО
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Распределение расходов на себестоимость продукции
	|	ВЫБРАТЬ
	|		ТаблицаТовары.ПартияПроизводства						КАК ПартияПроизводства,
	|		ТаблицаТовары.УдалитьАналитикаУчетаПартийПроизводства	КАК АналитикаУчетаПартийПроизводства
	|	ИЗ
	|		Документ.РаспределениеПрочихЗатрат.ПартииПроизводства КАК ТаблицаТовары
	|
	|	ГДЕ
	|		ТаблицаТовары.ПартияПроизводства = ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
	|		И НЕ ТаблицаТовары.УдалитьПартияПроизводства = НЕОПРЕДЕЛЕНО
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Себестоимость товаров (Партия)
	|	ВЫБРАТЬ
	|		Движения.Партия										КАК ПартияПроизводства,
	|		Движения.УдалитьАналитикаУчетаПартийПроизводства	КАК АналитикаУчетаПартийПроизводства
	|	ИЗ
	|		РегистрНакопления.СебестоимостьТоваров КАК Движения
	|
	|	ГДЕ
	|		НЕ ТИПЗНАЧЕНИЯ(Движения.Партия) = ТИП(Справочник.ПартииПроизводства)
	|		И НЕ Движения.Партия = НЕОПРЕДЕЛЕНО
	|		И НЕ ЕСТЬNULL(Движения.АналитикаУчетаНоменклатуры.СтатьяКалькуляции,
	|			ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)) =
	|				ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Себестоимость товаров (Кор. партия)
	|	ВЫБРАТЬ
	|		Движения.КорПартия									КАК ПартияПроизводства,
	|		Движения.УдалитьАналитикаУчетаПартийПроизводства	КАК АналитикаУчетаПартийПроизводства
	|	ИЗ
	|		РегистрНакопления.СебестоимостьТоваров КАК Движения
	|
	|	ГДЕ
	|		НЕ ТИПЗНАЧЕНИЯ(Движения.КорПартия) = ТИП(Справочник.ПартииПроизводства)
	|		И НЕ Движения.КорПартия = НЕОПРЕДЕЛЕНО
	|		И НЕ ЕСТЬNULL(Движения.КорАналитикаУчетаНоменклатуры.СтатьяКалькуляции,
	|			ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)) =
	|				ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Прочие расходы НЗП
	|	ВЫБРАТЬ
	|		Движения.УдалитьПартияПроизводства	КАК ПартияПроизводства,
	|		Движения.АналитикаПартииВыпуска		КАК АналитикаУчетаПартийПроизводства
	|	ИЗ
	|		РегистрНакопления.ПрочиеРасходыНезавершенногоПроизводства КАК Движения
	|
	|	ГДЕ
	|		Движения.ПартияПроизводства = ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
	|		И НЕ Движения.УдалитьПартияПроизводства = НЕОПРЕДЕЛЕНО
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Трудозатраты НЗП
	|	ВЫБРАТЬ
	|		Движения.УдалитьПартияПроизводства					КАК ПартияПроизводства,
	|		Движения.УдалитьАналитикаУчетаПартийПроизводства	КАК АналитикаУчетаПартийПроизводства
	|	ИЗ
	|		РегистрНакопления.ТрудозатратыНезавершенногоПроизводства КАК Движения
	|
	|	ГДЕ
	|		Движения.ПартияПроизводства = ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
	|		И НЕ Движения.УдалитьПартияПроизводства = НЕОПРЕДЕЛЕНО
	|	) КАК ПартииПроизводства
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииПроизводства.ПартияПроизводства,
	|	ПартииПроизводства.АналитикаУчетаПартийПроизводства
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПартияПроизводства,
	|	АналитикаУчетаПартийПроизводства
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	ТекстыЗапроса.Добавить(ГруппыЗатратСервер.ТекстЗапросаВтНомераГруппЗатратПартийПроизводства());
	
	#Область КОбработке
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КОбработке.Ссылка КАК Ссылка
	|ИЗ
	|	(
	// Производство без заказа
	|	ВЫБРАТЬ
	|		Реквизиты.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ПроизводствоБезЗаказа.ВыходныеИзделия КАК ТаблицаТовары
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПроизводствоБезЗаказа КАК Реквизиты
	|		ПО Реквизиты.Ссылка = ТаблицаТовары.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПартииПроизводства КАК СпрПартииПроизводства
	|		ПО СпрПартииПроизводства.Документ = ТаблицаТовары.Ссылка
	|		И СпрПартииПроизводства.Код = ТаблицаТовары.НомерГруппыЗатрат
	|		И НЕ СпрПартииПроизводства.ПометкаУдаления
	|
	|	ГДЕ
	|		СпрПартииПроизводства.Ссылка ЕСТЬ NULL
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Отчеты переработчика без этапов
	|	ВЫБРАТЬ
	|		ТаблицаТовары.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ОтчетПереработчика.Продукция КАК ТаблицаТовары
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК Константы
	|		ПО ИСТИНА
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетПереработчика КАК Реквизиты
	|		ПО Реквизиты.Ссылка = ТаблицаТовары.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПартииПроизводства КАК СпрПартииПроизводства
	|		ПО СпрПартииПроизводства.Документ = ТаблицаТовары.Ссылка
	|		И СпрПартииПроизводства.Код = ТаблицаТовары.НомерГруппыЗатрат
	|		И НЕ СпрПартииПроизводства.ПометкаУдаления
	|
	|	ГДЕ
	|		Константы.ПартионныйУчетВерсии22
	|		И Реквизиты.Дата >= Константы.ДатаПереходаНаПартионныйУчетВерсии22
	|		И НЕ Реквизиты.ГруппировкаЗатрат = ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства)
	|		И СпрПартииПроизводства.Ссылка ЕСТЬ NULL
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Распределение возвратных отходов
	|	ВЫБРАТЬ
	|		ТаблицаТовары.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.РаспределениеВозвратныхОтходов.ПартииПроизводства КАК ТаблицаТовары
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ НомераГруппЗатратПартийПроизводства КАК НомераГруппЗатрат
	|		ПО НомераГруппЗатрат.ПартияВыпуска = ТаблицаТовары.ПартияПроизводства
	|		И НомераГруппЗатрат.АналитикаУчетаПартийПроизводства = ТаблицаТовары.УдалитьАналитикаУчетаПартийПроизводства
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПартииПроизводства КАК СпрПартииПроизводства
	|		ПО СпрПартииПроизводства.Документ = НомераГруппЗатрат.ПартияПроизводства
	|		И СпрПартииПроизводства.Код = НомераГруппЗатрат.НомерГруппыЗатрат
	|		И НЕ СпрПартииПроизводства.ПометкаУдаления
	|
	|	ГДЕ
	|		ТаблицаТовары.ПартияПроизводства = ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
	|		И НЕ ТаблицаТовары.УдалитьПартияПроизводства = НЕОПРЕДЕЛЕНО
	|		И СпрПартииПроизводства.Ссылка ЕСТЬ NULL
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Распределение материалов и работ
	|	ВЫБРАТЬ
	|		ТаблицаТовары.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.РаспределениеПроизводственныхЗатрат.ПартииПроизводства КАК ТаблицаТовары
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ НомераГруппЗатратПартийПроизводства КАК НомераГруппЗатрат
	|		ПО НомераГруппЗатрат.ПартияВыпуска = ТаблицаТовары.ПартияПроизводства
	|		И НомераГруппЗатрат.АналитикаУчетаПартийПроизводства = ТаблицаТовары.УдалитьАналитикаУчетаПартийПроизводства
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПартииПроизводства КАК СпрПартииПроизводства
	|		ПО СпрПартииПроизводства.Документ = НомераГруппЗатрат.ПартияПроизводства
	|		И СпрПартииПроизводства.Код = НомераГруппЗатрат.НомерГруппыЗатрат
	|		И НЕ СпрПартииПроизводства.ПометкаУдаления
	|
	|	ГДЕ
	|		ТаблицаТовары.ПартияПроизводства = ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
	|		И НЕ ТаблицаТовары.УдалитьПартияПроизводства = НЕОПРЕДЕЛЕНО
	|		И СпрПартииПроизводства.Ссылка ЕСТЬ NULL
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Распределение расходов на себестоимость продукции
	|	ВЫБРАТЬ
	|		ТаблицаТовары.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.РаспределениеПрочихЗатрат.ПартииПроизводства КАК ТаблицаТовары
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ НомераГруппЗатратПартийПроизводства КАК НомераГруппЗатрат
	|		ПО НомераГруппЗатрат.ПартияВыпуска = ТаблицаТовары.ПартияПроизводства
	|		И НомераГруппЗатрат.АналитикаУчетаПартийПроизводства = ТаблицаТовары.УдалитьАналитикаУчетаПартийПроизводства
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПартииПроизводства КАК СпрПартииПроизводства
	|		ПО СпрПартииПроизводства.Документ = НомераГруппЗатрат.ПартияПроизводства
	|		И СпрПартииПроизводства.Код = НомераГруппЗатрат.НомерГруппыЗатрат
	|		И НЕ СпрПартииПроизводства.ПометкаУдаления
	|
	|	ГДЕ
	|		ТаблицаТовары.ПартияПроизводства = ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
	|		И НЕ ТаблицаТовары.УдалитьПартияПроизводства = НЕОПРЕДЕЛЕНО
	|		И СпрПартииПроизводства.Ссылка ЕСТЬ NULL
	//++ НЕ УТКА
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Этапы производства
	|	ВЫБРАТЬ
	|		Реквизиты.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2 КАК Реквизиты
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПартииПроизводства КАК СпрПартииПроизводства
	|		ПО СпрПартииПроизводства.Документ = Реквизиты.Распоряжение
	|		И СпрПартииПроизводства.Код = Реквизиты.НомерПартииЗапуска
	|		И НЕ СпрПартииПроизводства.ПометкаУдаления
	|
	|	ГДЕ
	|		СпрПартииПроизводства.Ссылка ЕСТЬ NULL
	|		И НЕ Реквизиты.УдалитьИдентификаторЦепочки = ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
	//-- НЕ УТКА
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Себестоимость товаров (Партия)
	|	ВЫБРАТЬ
	|		Движения.Регистратор КАК Ссылка
	|	ИЗ
	|		РегистрНакопления.СебестоимостьТоваров КАК Движения
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ НомераГруппЗатратПартийПроизводства КАК НомераГруппЗатрат
	|		ПО НомераГруппЗатрат.ПартияВыпуска = Движения.Партия
	|		И НомераГруппЗатрат.АналитикаУчетаПартийПроизводства = Движения.УдалитьАналитикаУчетаПартийПроизводства
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПартииПроизводства КАК СпрПартииПроизводства
	|		ПО СпрПартииПроизводства.Документ = НомераГруппЗатрат.ПартияПроизводства
	|		И СпрПартииПроизводства.Код = НомераГруппЗатрат.НомерГруппыЗатрат
	|		И НЕ СпрПартииПроизводства.ПометкаУдаления
	|	
	|	ГДЕ
	|		НЕ ТИПЗНАЧЕНИЯ(Движения.Партия) = ТИП(Справочник.ПартииПроизводства)
	|		И НЕ Движения.Партия = НЕОПРЕДЕЛЕНО
	|		И НЕ ЕСТЬNULL(Движения.АналитикаУчетаНоменклатуры.СтатьяКалькуляции,
	|			ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)) =
	|				ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	|		И СпрПартииПроизводства.Ссылка ЕСТЬ NULL
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Себестоимость товаров (Кор. партия)
	|	ВЫБРАТЬ
	|		Движения.Регистратор КАК Ссылка
	|	ИЗ
	|		РегистрНакопления.СебестоимостьТоваров КАК Движения
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ НомераГруппЗатратПартийПроизводства КАК КорНомераГруппЗатрат
	|		ПО КорНомераГруппЗатрат.ПартияВыпуска = Движения.КорПартия
	|		И КорНомераГруппЗатрат.АналитикаУчетаПартийПроизводства = Движения.УдалитьАналитикаУчетаПартийПроизводства
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПартииПроизводства КАК КорСпрПартииПроизводства
	|		ПО КорСпрПартииПроизводства.Документ = КорНомераГруппЗатрат.ПартияПроизводства
	|		И КорСпрПартииПроизводства.Код = КорНомераГруппЗатрат.НомерГруппыЗатрат
	|		И НЕ КорСпрПартииПроизводства.ПометкаУдаления
	|	
	|	ГДЕ
	|		НЕ ТИПЗНАЧЕНИЯ(Движения.КорПартия) = ТИП(Справочник.ПартииПроизводства)
	|		И НЕ Движения.КорПартия = НЕОПРЕДЕЛЕНО
	|		И НЕ ЕСТЬNULL(Движения.КорАналитикаУчетаНоменклатуры.СтатьяКалькуляции,
	|			ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)) =
	|				ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	|		И КорСпрПартииПроизводства.Ссылка ЕСТЬ NULL
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Прочие расходы НЗП
	|	ВЫБРАТЬ
	|		Движения.Регистратор КАК Ссылка
	|	ИЗ
	|		РегистрНакопления.ПрочиеРасходыНезавершенногоПроизводства КАК Движения
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ НомераГруппЗатратПартийПроизводства КАК НомераГруппЗатрат
	|		ПО НомераГруппЗатрат.ПартияВыпуска = Движения.УдалитьПартияПроизводства
	|		И НомераГруппЗатрат.АналитикаУчетаПартийПроизводства = Движения.АналитикаПартииВыпуска
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПартииПроизводства КАК СпрПартииПроизводства
	|		ПО СпрПартииПроизводства.Документ = НомераГруппЗатрат.ПартияПроизводства
	|		И СпрПартииПроизводства.Код = НомераГруппЗатрат.НомерГруппыЗатрат
	|		И НЕ СпрПартииПроизводства.ПометкаУдаления
	|
	|	ГДЕ
	|		Движения.ПартияПроизводства = ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
	|		И НЕ Движения.УдалитьПартияПроизводства = НЕОПРЕДЕЛЕНО
	|		И СпрПартииПроизводства.Ссылка ЕСТЬ NULL
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Трудозатраты НЗП
	|	ВЫБРАТЬ
	|		ДанныеРегистра.Регистратор КАК Ссылка
	|	ИЗ
	|		РегистрНакопления.ТрудозатратыНезавершенногоПроизводства КАК ДанныеРегистра
	|	ГДЕ
	|		ДанныеРегистра.ПартияПроизводства = ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
	|		И НЕ ДанныеРегистра.УдалитьПартияПроизводства = НЕОПРЕДЕЛЕНО
	|	) КАК КОбработке
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПартииПроизводства КАК СпрПартииПроизводства
	|	ПО СпрПартииПроизводства.Документ = КОбработке.Ссылка
	//++ НЕ УТКА
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК РеквизитыЭтапа
	|	ПО РеквизитыЭтапа.Ссылка = КОбработке.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК РеквизитыПартииЭтапа
	|	ПО РеквизитыПартииЭтапа.Ссылка = РеквизитыЭтапа.УдалитьИдентификаторЦепочки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ОсновныеИзделия
	|	ПО ОсновныеИзделия.Ссылка = РеквизитыПартииЭтапа.УдалитьОсновноеИзделиеНоменклатура
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПартииПроизводства КАК СпрПартииПроизводстваЭтапов
	|	ПО СпрПартииПроизводстваЭтапов.Документ = РеквизитыЭтапа.Распоряжение
	//-- НЕ УТКА
	|
	|ГДЕ
	|	СпрПартииПроизводства.Ссылка ЕСТЬ NULL
	//++ НЕ УТКА
	|	И СпрПартииПроизводстваЭтапов.Ссылка ЕСТЬ NULL
	//-- НЕ УТКА
	|
	|СГРУППИРОВАТЬ ПО
	|	КОбработке.Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	ДокументыКОбработке = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, ДокументыКОбработке);
	
КонецПроцедуры

Процедура СгенерироватьПартииПроизводстваПриПереходеНаНовуюВерсию(Параметры) Экспорт
	
	#Область ШаблонКОбработке
	
	ШаблонКОбработке =
	"ВЫБРАТЬ
	//++ НЕ УТКА
	|	РеквизитыПартииЭтапа.Распоряжение							КАК Распоряжение,
	|	РеквизитыПартииЭтапа.НомерПартииЗапуска						КАК Код,
	|	РеквизитыПартииЭтапа.НазначениеПродукция					КАК НазначениеПродукция,
	|	РеквизитыПартииЭтапа.УдалитьОсновноеИзделиеНоменклатура		КАК Номенклатура,
	|	РеквизитыПартииЭтапа.УдалитьОсновноеИзделиеХарактеристика	КАК Характеристика,
	|	РеквизитыПартииЭтапа.ТипПроизводственногоПроцесса			КАК ТипПроизводственногоПроцесса,
	|	РеквизитыПартииЭтапа.Спецификация							КАК Спецификация,
	|	ОсновныеИзделия.ГруппаАналитическогоУчета					КАК ГруппаПродукции,
	//-- НЕ УТКА
	|	КОбработке.Ссылка											КАК Ссылка
	|ИЗ
	|	ВТДокументыДляОбработки КАК КОбработке
	//++ НЕ УТКА
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК РеквизитыЭтапа
	|	ПО РеквизитыЭтапа.Ссылка = КОбработке.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК РеквизитыПартииЭтапа
	|	ПО РеквизитыПартииЭтапа.Ссылка = РеквизитыЭтапа.УдалитьИдентификаторЦепочки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ОсновныеИзделия
	|	ПО ОсновныеИзделия.Ссылка = РеквизитыПартииЭтапа.УдалитьОсновноеИзделиеНоменклатура
	//-- НЕ УТКА
	|
	|СГРУППИРОВАТЬ ПО
	//++ НЕ УТКА
	|	РеквизитыПартииЭтапа.Распоряжение,
	|	РеквизитыПартииЭтапа.НомерПартииЗапуска,
	|	РеквизитыПартииЭтапа.НазначениеПродукция,
	|	РеквизитыПартииЭтапа.УдалитьОсновноеИзделиеНоменклатура,
	|	РеквизитыПартииЭтапа.УдалитьОсновноеИзделиеХарактеристика,
	|	РеквизитыПартииЭтапа.ТипПроизводственногоПроцесса,
	|	РеквизитыПартииЭтапа.Спецификация,
	|	ОсновныеИзделия.ГруппаАналитическогоУчета,
	//-- НЕ УТКА
	|	КОбработке.Ссылка
	|";
	
	#КонецОбласти
	
	#Область ОбрабатываемыеДокументы
	
	ИменаДокументов = Новый Соответствие();
	
	НаборЗаписей = РегистрыНакопления.ПрочиеРасходыНезавершенногоПроизводства.СоздатьНаборЗаписей();
	ТипыРегистратора = НаборЗаписей.Отбор.Регистратор.ТипЗначения.Типы();
	
	Для Каждого ТекТип Из ТипыРегистратора Цикл
		ИменаДокументов.Вставить(ТекТип, Метаданные.НайтиПоТипу(ТекТип).ПолноеИмя());
	КонецЦикла;
	
	НаборЗаписей = РегистрыНакопления.СебестоимостьТоваров.СоздатьНаборЗаписей();
	ТипыРегистратора = НаборЗаписей.Отбор.Регистратор.ТипЗначения.Типы();
	
	Для Каждого ТекТип Из ТипыРегистратора Цикл
		ИменаДокументов.Вставить(ТекТип, Метаданные.НайтиПоТипу(ТекТип).ПолноеИмя());
	КонецЦикла;
	
	НаборЗаписей = РегистрыНакопления.ТрудозатратыНезавершенногоПроизводства.СоздатьНаборЗаписей();
	ТипыРегистратора = НаборЗаписей.Отбор.Регистратор.ТипЗначения.Типы();
	
	Для Каждого ТекТип Из ТипыРегистратора Цикл
		ИменаДокументов.Вставить(ТекТип, Метаданные.НайтиПоТипу(ТекТип).ПолноеИмя());
	КонецЦикла;
	
	#КонецОбласти
	
	Параметры.ОбработкаЗавершена = Истина;
	
	Для Каждого ТекДокумент Из ИменаДокументов Цикл
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Результат =
			ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(
				Параметры.Очередь,
				ТекДокумент.Значение,
				МенеджерВременныхТаблиц);
		
		Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
			Параметры.ОбработкаЗавершена = Параметры.ОбработкаЗавершена И Истина;
			Продолжить;
		КонецЕсли;
		
		Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
			Параметры.ОбработкаЗавершена = Параметры.ОбработкаЗавершена И Ложь;
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ШаблонКОбработке, "ВТДокументыДляОбработки", Результат.ИмяВременнойТаблицы);
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НачатьТранзакцию();
			
			Попытка
				
				ИмяДокумента = ИменаДокументов[ТипЗнч(Выборка.Ссылка)];
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(ИмяДокумента);
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				
				Блокировка.Заблокировать();
				
				Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ОтчетПереработчика")
					//++ НЕ УТКА
					ИЛИ ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ЭтапПроизводства2_2")
					//-- НЕ УТКА
					ИЛИ ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ПроизводствоБезЗаказа") Тогда
					
					СгенерироватьПартиюПроизводстваПриПереходеНаНовуюВерсию(Выборка);
					
				ИначеЕсли ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.РаспределениеВозвратныхОтходов")
					ИЛИ ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.РаспределениеПроизводственныхЗатрат")
					ИЛИ ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.РаспределениеПрочихЗатрат") Тогда
					
					СгенерироватьПартииПроизводстваДокумента(Запрос, Выборка.Ссылка, ИменаДокументов, ИмяДокумента);
					СгенерироватьПартииПроизводстваРегистра(Запрос, Выборка.Ссылка, ИменаДокументов);
					
				Иначе
					СгенерироватьПартииПроизводстваРегистра(Запрос, Выборка.Ссылка, ИменаДокументов);
				КонецЕсли;
				
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Ссылка% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Предупреждение,
					Выборка.Ссылка.Метаданные(),
					Выборка.Ссылка,
					ТекстСообщения);
				Продолжить;
				
			КонецПопытки;
			
		КонецЦикла;
		
		Параметры.ОбработкаЗавершена =
			Параметры.ОбработкаЗавершена И
			Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ТекДокумент.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СгенерироватьПартииПроизводстваДокумента(Запрос, Ссылка, ИменаДокументов, ИмяДокумента)
	
	#Область ШаблонПартииПроизводстваДокумента
	
	ШаблонПартииПроизводстваДокумента =
	"ВЫБРАТЬ
	//++ НЕ УТКА
	|	РеквизитыЭтапа.Распоряжение							КАК Распоряжение,
	|	РеквизитыЭтапа.НомерПартииЗапуска					КАК Код,
	|	РеквизитыЭтапа.НазначениеПродукция					КАК НазначениеПродукция,
	|	РеквизитыЭтапа.УдалитьОсновноеИзделиеНоменклатура	КАК Номенклатура,
	|	РеквизитыЭтапа.УдалитьОсновноеИзделиеХарактеристика	КАК Характеристика,
	|	РеквизитыЭтапа.ТипПроизводственногоПроцесса			КАК ТипПроизводственногоПроцесса,
	|	РеквизитыЭтапа.Спецификация							КАК Спецификация,
	|	ОсновныеИзделия.ГруппаАналитическогоУчета			КАК ГруппаПродукции,
	//-- НЕ УТКА
	|	ТаблицаПартий.УдалитьПартияПроизводства				КАК Ссылка
	|ИЗ
	|	&ПартииПроизводства КАК ТаблицаПартий
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПартииПроизводства КАК СпрПартииПроизводства
	|	ПО СпрПартииПроизводства.Документ = ТаблицаПартий.УдалитьПартияПроизводства
	//++ НЕ УТКА
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК РеквизитыЭтапа
	|	ПО РеквизитыЭтапа.Ссылка = ТаблицаПартий.УдалитьПартияПроизводства
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ОсновныеИзделия
	|	ПО ОсновныеИзделия.Ссылка = РеквизитыЭтапа.УдалитьОсновноеИзделиеНоменклатура
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПартииПроизводства КАК СпрПартииПроизводстваЭтапов
	|	ПО СпрПартииПроизводстваЭтапов.Документ = РеквизитыЭтапа.Распоряжение
	//-- НЕ УТКА
	|
	|ГДЕ
	|	ТаблицаПартий.Ссылка = &Ссылка
	|	И НЕ ТаблицаПартий.УдалитьПартияПроизводства = НЕОПРЕДЕЛЕНО
	|	И СпрПартииПроизводства.Ссылка ЕСТЬ NULL
	//++ НЕ УТКА
	|	И СпрПартииПроизводстваЭтапов.Ссылка ЕСТЬ NULL
	//-- НЕ УТКА
	|
	|СГРУППИРОВАТЬ ПО
	//++ НЕ УТКА
	|	РеквизитыЭтапа.Распоряжение,
	|	РеквизитыЭтапа.НомерПартииЗапуска,
	|	РеквизитыЭтапа.НазначениеПродукция,
	|	РеквизитыЭтапа.УдалитьОсновноеИзделиеНоменклатура,
	|	РеквизитыЭтапа.УдалитьОсновноеИзделиеХарактеристика,
	|	РеквизитыЭтапа.ТипПроизводственногоПроцесса,
	|	РеквизитыЭтапа.Спецификация,
	|	ОсновныеИзделия.ГруппаАналитическогоУчета,
	//-- НЕ УТКА
	|	ТаблицаПартий.УдалитьПартияПроизводства
	|";
	
	#КонецОбласти
	
	Запрос.Текст = СтрЗаменить(ШаблонПартииПроизводстваДокумента, "&ПартииПроизводства", ИмяДокумента + ".ПартииПроизводства");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	ВыборкаПартии = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПартии.Следующий() Цикл
		
		ИмяДокумента = ИменаДокументов[ТипЗнч(ВыборкаПартии.Ссылка)];
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(ИмяДокумента);
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаПартии.Ссылка);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		СгенерироватьПартиюПроизводстваПриПереходеНаНовуюВерсию(ВыборкаПартии);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СгенерироватьПартииПроизводстваРегистра(Запрос, Ссылка, ИменаДокументов)
	
	#Область ШаблонПартииПроизводстваРегистра
	
	ШаблонПартииПроизводстваРегистра =
	"ВЫБРАТЬ
	//++ НЕ УТКА
	|	РеквизитыЭтапа.Распоряжение							КАК Распоряжение,
	|	РеквизитыЭтапа.НомерПартииЗапуска					КАК Код,
	|	РеквизитыЭтапа.НазначениеПродукция					КАК НазначениеПродукция,
	|	РеквизитыЭтапа.УдалитьОсновноеИзделиеНоменклатура	КАК Номенклатура,
	|	РеквизитыЭтапа.УдалитьОсновноеИзделиеХарактеристика	КАК Характеристика,
	|	РеквизитыЭтапа.ТипПроизводственногоПроцесса			КАК ТипПроизводственногоПроцесса,
	|	РеквизитыЭтапа.Спецификация							КАК Спецификация,
	|	ОсновныеИзделия.ГруппаАналитическогоУчета			КАК ГруппаПродукции,
	//-- НЕ УТКА
	|	ТаблицаПартий.ПартияПроизводства					КАК Ссылка
	|ИЗ
	|	(
	// Себестоимость товаров (Партия)
	|	ВЫБРАТЬ
	|		Движения.Партия КАК ПартияПроизводства
	|	ИЗ
	|		РегистрНакопления.СебестоимостьТоваров КАК Движения
	|	ГДЕ
	|		Движения.Регистратор = &Ссылка
	|		И НЕ ТИПЗНАЧЕНИЯ(Движения.Партия) = ТИП(Справочник.ПартииПроизводства)
	|		И НЕ Движения.Партия = НЕОПРЕДЕЛЕНО
	|		И НЕ ЕСТЬNULL(Движения.АналитикаУчетаНоменклатуры.СтатьяКалькуляции,
	|			ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)) =
	|				ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Себестоимость товаров (Кор. партия)
	|	ВЫБРАТЬ
	|		Движения.КорПартия КАК ПартияПроизводства
	|	ИЗ
	|		РегистрНакопления.СебестоимостьТоваров КАК Движения
	|	ГДЕ
	|		Движения.Регистратор = &Ссылка
	|		И НЕ ТИПЗНАЧЕНИЯ(Движения.КорПартия) = ТИП(Справочник.ПартииПроизводства)
	|		И НЕ Движения.КорПартия = НЕОПРЕДЕЛЕНО
	|		И НЕ ЕСТЬNULL(Движения.КорАналитикаУчетаНоменклатуры.СтатьяКалькуляции,
	|			ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)) =
	|				ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Прочие расходы НЗП
	|	ВЫБРАТЬ
	|		Движения.УдалитьПартияПроизводства КАК ПартияПроизводства
	|	ИЗ
	|		РегистрНакопления.ПрочиеРасходыНезавершенногоПроизводства КАК Движения
	|	ГДЕ
	|		Движения.Регистратор = &Ссылка
	|		И Движения.ПартияПроизводства = ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
	|		И НЕ Движения.УдалитьПартияПроизводства = НЕОПРЕДЕЛЕНО
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Трудозатраты НЗП
	|	ВЫБРАТЬ
	|		Движения.УдалитьПартияПроизводства КАК ПартияПроизводства
	|	ИЗ
	|		РегистрНакопления.ТрудозатратыНезавершенногоПроизводства КАК Движения
	|	ГДЕ
	|		Движения.Регистратор = &Ссылка
	|		И Движения.ПартияПроизводства = ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
	|		И НЕ Движения.УдалитьПартияПроизводства = НЕОПРЕДЕЛЕНО
	|	) КАК ТаблицаПартий
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПартииПроизводства КАК СпрПартииПроизводства
	|	ПО СпрПартииПроизводства.Документ = ТаблицаПартий.ПартияПроизводства
	//++ НЕ УТКА
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК РеквизитыЭтапа
	|	ПО РеквизитыЭтапа.Ссылка = ТаблицаПартий.ПартияПроизводства
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ОсновныеИзделия
	|	ПО ОсновныеИзделия.Ссылка = РеквизитыЭтапа.УдалитьОсновноеИзделиеНоменклатура
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПартииПроизводства КАК СпрПартииПроизводстваЭтапов
	|	ПО СпрПартииПроизводстваЭтапов.Документ = РеквизитыЭтапа.Распоряжение
	//-- НЕ УТКА
	|
	|ГДЕ
	|	СпрПартииПроизводства.Ссылка ЕСТЬ NULL
	//++ НЕ УТКА
	|	И СпрПартииПроизводстваЭтапов.Ссылка ЕСТЬ NULL
	//-- НЕ УТКА
	|
	|СГРУППИРОВАТЬ ПО
	//++ НЕ УТКА
	|	РеквизитыЭтапа.Распоряжение,
	|	РеквизитыЭтапа.НомерПартииЗапуска,
	|	РеквизитыЭтапа.НазначениеПродукция,
	|	РеквизитыЭтапа.УдалитьОсновноеИзделиеНоменклатура,
	|	РеквизитыЭтапа.УдалитьОсновноеИзделиеХарактеристика,
	|	РеквизитыЭтапа.ТипПроизводственногоПроцесса,
	|	РеквизитыЭтапа.Спецификация,
	|	ОсновныеИзделия.ГруппаАналитическогоУчета,
	//-- НЕ УТКА
	|	ТаблицаПартий.ПартияПроизводства
	|";
	
	#КонецОбласти
	
	Запрос.Текст = ШаблонПартииПроизводстваРегистра;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	ВыборкаПартии = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПартии.Следующий() Цикл
		
		ИмяДокумента = ИменаДокументов[ТипЗнч(ВыборкаПартии.Ссылка)];
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(ИмяДокумента);
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаПартии.Ссылка);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		СгенерироватьПартиюПроизводстваПриПереходеНаНовуюВерсию(ВыборкаПартии);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СгенерироватьПартиюПроизводстваПриПереходеНаНовуюВерсию(Выборка)
	
	Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ОтчетПереработчика") Тогда
		Документы.ОтчетПереработчика.СформироватьПартииПроизводства(Выборка.Ссылка);
	ИначеЕсли ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ПроизводствоБезЗаказа") Тогда
		Документы.ПроизводствоБезЗаказа.СформироватьПартииПроизводства(Выборка.Ссылка);
	//++ НЕ УТКА
	ИначеЕсли ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ЭтапПроизводства2_2")
		И ЗначениеЗаполнено(Выборка.Распоряжение) Тогда
		
		РеквизитыПартии =
			"Распоряжение, НазначениеПродукция, Номенклатура,
			|Характеристика, ТипПроизводственногоПроцесса, Спецификация,
			|ГруппаПродукции";
		
		СтруктураПартии = Новый Структура(РеквизитыПартии);
		ЗаполнитьЗначенияСвойств(СтруктураПартии, Выборка);
		
		ПоляПартии = Документы.ЭтапПроизводства2_2.ПоляПартии(СтруктураПартии, СтруктураПартии);
		ПоляПартии.Вставить("Код", Выборка.Код);
		
		Справочники.ПартииПроизводства.ПолучитьПартиюПроизводства(ПоляПартии, Истина, Истина);
		
	//-- НЕ УТКА
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли