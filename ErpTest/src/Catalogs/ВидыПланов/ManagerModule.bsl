#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Получает реквизиты объекта, которые необходимо блокировать от изменения
//
// Возвращаемое значение:
//	Массив - блокируемые реквизиты объекта.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт

	Результат = Новый Массив;
	Результат.Добавить("Владелец");
	Результат.Добавить("ТипПлана");
	Результат.Добавить("ЗаполнятьПодразделение");
	Результат.Добавить("ЗаполнятьПартнераВТЧ");
	Результат.Добавить("ЗаполнятьСоглашениеВТЧ");
	Результат.Добавить("ЗаполнятьНазначениеВТЧ");
	Результат.Добавить("ЗаполнятьСкладВТЧ; ВариантЗаполненияСкладФорматМагазина");
	Результат.Добавить("ЗаполнятьПартнера; ЗаполнятьПартнера,ЗаполнятьПартнераПродажи,ЗаполнятьПартнераЗакупки");
	Результат.Добавить("ЗаполнятьСклад; ВариантЗаполненияСкладФорматМагазина, ЗаполнятьСклад,ЗаполнятьСкладВТЧ");
	Результат.Добавить("ЗаполнятьСоглашение;ЗаполнятьСоглашение,ЗаполнятьСоглашениеВТЧПродажи,ЗаполнятьСоглашениеВТЧЗакупки");
	Результат.Добавить("ЗаполнятьПланОплат");
	Результат.Добавить("ЗаполнятьПоФормуле; ЗаполнятьПоФормуле");
	Результат.Добавить("Замещающий; Замещающий");
	Результат.Добавить("ЗаполнятьМенеджера");
	Результат.Добавить("ЗаполнятьФорматМагазина; ВариантЗаполненияСкладФорматМагазина");
	
	//++ НЕ УТ
	Результат.Добавить("ОтражаетсяВБюджетировании");
	Результат.Добавить("СтатьяБюджетов");
	Результат.Добавить("ОтражаетсяВБюджетированииОплаты");
	Результат.Добавить("СтатьяБюджетовОплат");
	Результат.Добавить("ОтражаетсяВБюджетированииОплатыКредит");
	Результат.Добавить("СтатьяБюджетовОплатКредит");
	Результат.Добавить("ПланироватьПолуфабрикатыАвтоматически; ПланироватьПолуфабрикатыАвтоматически");
	Результат.Добавить("ТипПроизводственногоПроцесса");
	//-- НЕ УТ
	
	Возврат Результат;

КонецФункции

//++ НЕ УТ

// Возвращает Истина если для вида плана настроено автоматическое планирование полуфабрикатов.
//
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПланов - вид плана.
// 
Функция ПланироватьПолуфабрикатыАвтоматически(ВидПлана) Экспорт
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ВидПлана,
		"ТипПроизводственногоПроцесса, ПланироватьПолуфабрикатыАвтоматически");
	
	Если Реквизиты.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка Тогда
		Возврат Ложь;
	Иначе
		Возврат Реквизиты.ПланироватьПолуфабрикатыАвтоматически;
	КонецЕсли;
	
КонецФункции

//-- НЕ УТ

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВидыПланов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыПланов КАК ВидыПланов,
		|	Константа.КомплекснаяАвтоматизация КАК КомплекснаяАвтоматизация
		|ГДЕ
		//++ НЕ УТ
		|	(ВидыПланов.ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланПроизводства)
		|	И ВидыПланов.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.ПустаяСсылка)) ИЛИ
		|	(ВидыПланов.ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланПроизводства)
		|	И ВидыПланов.ЗаполнятьПодразделение И КомплекснаяАвтоматизация.Значение) ИЛИ
		//-- НЕ УТ
		|	ВидыПланов.КоличествоПериодов = 0");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.ВидыПланов";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(
		Параметры.Очередь, ПолноеИмяОбъекта, МенеджерВременныхТаблиц);
	
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	КомплекснаяАвтоматизация = ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация");
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	КОбработке.Ссылка КАК Ссылка,
		|	КОбработке.Ссылка.ВерсияДанных КАК ВерсияДанных
		|ИЗ
		|	ВТСсылкиДляОбработки КАК КОбработке";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТСсылкиДляОбработки", Результат.ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			Объект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(
				Выборка.Ссылка, Выборка.ВерсияДанных, Параметры.Очередь);
			
			Если Объект <> Неопределено Тогда
			
				ОбъектИзменен = Ложь;
				
				//++ НЕ УТ
				Если Объект.ТипПлана = Перечисления.ТипыПланов.ПланПроизводства
					И Объект.ТипПроизводственногоПроцесса.Пустая() Тогда
					
					Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка;
					ОбъектИзменен = Истина;
					
				КонецЕсли;
				//-- НЕ УТ
				
				//++ НЕ УТ
				Если Объект.ТипПлана = Перечисления.ТипыПланов.ПланПроизводства
					И Объект.ЗаполнятьПодразделение И КомплекснаяАвтоматизация Тогда
					
					Объект.ЗаполнятьПодразделение = Ложь;
					ОбъектИзменен = Истина;
					
				КонецЕсли;
				//-- НЕ УТ
				
				Если Объект.КоличествоПериодов = 0 Тогда
					
					Объект.КоличествоПериодов = 1;
					ОбъектИзменен = Истина;
					
				КонецЕсли;
				
				Если ОбъектИзменен Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Объект);
				КонецЕсли;
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли