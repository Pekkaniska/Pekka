
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Объект") Тогда 
		ЗаполнитьРеквизитыСвойств(Параметры.Объект);
	КонецЕсли;
	
	//уатЗащищенныеФункцииСервер.уатСправочникФормаЭлементаПриСозданииНаСервере(, Отказ, СтандартнаяОбработка, ЭтаФорма, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Если Не Метаданные.Константы.Найти("ИспользоватьУправлениеДоставкой") = Неопределено Тогда 
		Если Не Константы.ИспользоватьУправлениеДоставкой.Получить() Тогда 
			Отказ = Истина;
			ТекстОшибки = "Для использования справочника ""Транспортные средства"" необходимо включить использование подсистемы ""Управление доставкой"" в панели ""Администрирование"", раздел ""Склад и доставка"".";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			УстановитьПривилегированныйРежим(Ложь);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	ТекОрг = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.ТекущийПользователь(), "ОсновнаяОрганизация");
	
	//установка параметров для отображения флага просроч. документов ТС
	мВремяДоОкончанияДействияДокументовТС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекОрг, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ДниДоОкончанияДействияДокументовТС"));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ДокументыТС, "ДниДоОкончанияДействияДокументовТС", мВремяДоОкончанияДействияДокументовТС);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ДокументыТС, "ДатаОкончания", НачалоДня(ТекущаяДата()));
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПластиковыеКарты, "ТекОрг", ТекОрг);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПластиковыеКарты, "ТекущаяДата", НачалоДня(ТекущаяДата()));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПластиковыеКарты, "ДатаОкончания", ТекущаяДата());

	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПластиковыеКарты, "ДниДоОкончанияДействияТопливныхКарт",
		уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекОрг, ПредопределенноеЗначение(
		"ПланВидовХарактеристик.уатПраваИНастройки.ДниДоОкончанияДействияТопливныхКарт")));
		
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.Подразделение, "Организация");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//уатЗащищенныеФункцииКлиент.уатСправочникФормаЭлементаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьСтраницуНачальногоПробегаНаработки();
	
	ОбновитьСвязанныеДанныеПоТС();
	
	Если ВидМоделиТС = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Автотранспорт") Тогда
		Если Не уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, 
				ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ПредставлениеТСКакГосНомер")) Тогда
			Элементы.ГаражныйНомер.АвтоОтметкаНезаполненного = Истина;
			Если Не ЗначениеЗаполнено(ГаражныйНомер) Тогда
				Элементы.ГаражныйНомер.ОтметкаНезаполненного = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьСтраницуGPS();
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "Изменен регистр агрегаты ТС" Тогда
		ОтобразитьАгрегатыТС();
		
	ИначеЕсли ИмяСобытия = "ОбновитьФорму" И ТипЗнч(Источник) = Тип("СправочникСсылка.ТранспортныеСредства") 
		И Параметр.Свойство("Организация") И Параметр.Свойство("Подразделение") Тогда
		
		Организация   = Параметр.Организация;
		Подразделение = Параметр.Подразделение;
		Колонна       = Параметр.Колонна;
		
	ИначеЕсли ИмяСобытия = "ОбновитьФорму_МестонахождениеТС" И ТипЗнч(Источник) = Тип("Массив")
		И Источник.Найти(Ссылка) <> Неопределено Тогда
		
		ВладелецФормы.Прочитать();
		ЗаполнитьРеквизитыСвойств(ВладелецФормы.Объект);
		ОбновитьСвязанныеДанныеПоТС();
		УстановитьВидимость();
		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МодельПриИзменении(Элемент)
	ЗаполнитьРеквизитыТСПоМоделиТС();
КонецПроцедуры

&НаКлиенте
Процедура СостояниеТСОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДокументСостояние = ПолучитьДокументСостоянияТС(Ссылка);
	Если ЗначениеЗаполнено(ДокументСостояние) Тогда
		ПоказатьЗначение(Неопределено, ДокументСостояние);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДокументСостоянияТС(Ссылка)
	Возврат уатОбщегоНазначения.уатСостояниеТС(Ссылка, ТекущаяДата()).Документ;
КонецФункции

&НаКлиенте
Процедура СоставТСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле = Элементы.СоставТСТСМодель Тогда
		СтандартнаяОбработка = Ложь;
		СпрСсылка = ВернутьСсылкуНаОбъектПоКлючу("СоставТС", ВыбраннаяСтрока);
		ПоказатьЗначение(, СпрСсылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоставТСПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Ложь;
	уатОбщегоНазначенияКлиент.ПроверитьЗаписьНовогоОбъектаВФорме(ЭтаФорма, Ссылка,,, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		Если НЕ Копирование Тогда
			Отказ = Истина;
			ПараметрыОткрытия = Новый Структура("ВСоставе", Ссылка);
			ОткрытьФорму("РегистрСведений.уатСоставТС.ФормаЗаписи", ПараметрыОткрытия, ЭтотОбъект,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПластиковыеКартыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Ложь;
	уатОбщегоНазначенияКлиент.ПроверитьЗаписьНовогоОбъектаВФорме(ЭтаФорма, Ссылка,,, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		Если НЕ Копирование Тогда
			Отказ = Истина;
	    	ПараметрыОткрытия = Новый Структура("КомуВыдана", Ссылка);
			ОткрытьФорму("Справочник.уатПластиковыеКарты.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкипажПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Ложь;
	уатОбщегоНазначенияКлиент.ПроверитьЗаписьНовогоОбъектаВФорме(ЭтаФорма, Ссылка,,, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		Если НЕ Копирование Тогда
			Отказ = Истина;
			ПараметрыОткрытия = Новый Структура("ТС", Ссылка);
			ОткрытьФорму("РегистрСведений.уатЭкипажТС.ФормаЗаписи", ПараметрыОткрытия, ЭтотОбъект,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыТСПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Ложь;
	уатОбщегоНазначенияКлиент.ПроверитьЗаписьНовогоОбъектаВФорме(ЭтаФорма, Ссылка,,, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		Если НЕ Копирование Тогда
			Отказ = Истина;
		ПараметрыОткрытия = Новый Структура("ТС", Ссылка);
			ОткрытьФорму("РегистрСведений.уатДокументыТС.ФормаЗаписи", ПараметрыОткрытия, ЭтотОбъект,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ШиныВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СпрСсылка = ВернутьСсылкуНаОбъектПоКлючу("Агрегаты", ВыбраннаяСтрока);	
	ПоказатьЗначение(Неопределено, СпрСсылка);
КонецПроцедуры

&НаКлиенте
Процедура АккумуляторыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СпрСсылка = ВернутьСсылкуНаОбъектПоКлючу("Агрегаты", ВыбраннаяСтрока);	
	ПоказатьЗначение(Неопределено, СпрСсылка);
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеАгрегатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СпрСсылка = ВернутьСсылкуНаОбъектПоКлючу("Агрегаты", ВыбраннаяСтрока);	
	ПоказатьЗначение(Неопределено, СпрСсылка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОМестонахождении()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатМестонахождениеТССрезПоследних.Организация,
	               |	уатМестонахождениеТССрезПоследних.Подразделение,
	               |	уатМестонахождениеТССрезПоследних.Колонна
	               |ИЗ
	               |	РегистрСведений.уатМестонахождениеТС.СрезПоследних(, ТС = &ТС) КАК уатМестонахождениеТССрезПоследних";
	  
	Запрос.УстановитьПараметр("ТС", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Организация   = Выборка.Организация;
		Подразделение = Выборка.Подразделение;
		Колонна       = Выборка.Колонна;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИспользуемаяСистемаGPSПриИзменении(Элемент)
	ИДвСистемеНавигации = "";
	УстановитьСтраницуGPS();
КонецПроцедуры

&НаКлиенте
Процедура ЦветМаршрутаЦСМПриИзменении(Элемент)
	УстановитьЦветМаршрутаНаКарте(ЦветМаршрутаЦСМ);
	ОбновитьЦветИИконку();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИконкаНаКартеПриИзменении(Элемент)
	ОбновитьЦветИИконку();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура флГПСПриИзменении(Элемент)
	Если НЕ флГПС тогда
		ИДвСистемеНавигации = "";
	КонецЕсли;
	УстановитьВидимостьГПС();
	ДоступностьКнопкиЗаполнитьIDDynafleet();
КонецПроцедуры

&НаКлиенте
Процедура НормыРасходаГСМПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	
	ТекСтрока = Элементы.НормыРасходаГСМ.ТекущиеДанные;
	
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("Период", ТекСтрока.Период);
	СтруктураЗаписи.Вставить("МодельТС", ТекСтрока.МодельТС);
	СтруктураЗаписи.Вставить("ГСМ", ТекСтрока.ГСМ);
	СтруктураЗаписи.Вставить("Организация", ТекСтрока.Организация);
	
	Если ТипЗнч(ТекСтрока.МодельТС) = Тип("СправочникСсылка.уатМоделиТС") Тогда //для модели запрещаем изменения всех данных
		ПараметрыФормы = Новый Структура("Ключ, ТолькоПросмотр", КлючЗаписиНормыРасходаГСМ(СтруктураЗаписи), Истина);
	Иначе //для ТС запрещаем изменение ТС
		ПараметрыФормы = Новый Структура("Ключ, ТолькоПросмотрМодели", КлючЗаписиНормыРасходаГСМ(СтруктураЗаписи), Истина);
	КонецЕсли;
	
	ОткрытьФорму("РегистрСведений.уатНормыРасходаГСМ.ФормаЗаписи", ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаСервереБезКонтекста
Функция КлючЗаписиНормыРасходаГСМ(СтруктураЗаписи)
	Возврат РегистрыСведений.уатНормыРасходаГСМ.СоздатьКлючЗаписи(СтруктураЗаписи);
КонецФункции

&НаКлиенте
Процедура НормыРасходаГСМПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Ложь;
	уатОбщегоНазначенияКлиент.ПроверитьЗаписьНовогоОбъектаВФорме(ЭтаФорма, Ссылка,,, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Копирование Тогда
		Отказ = Истина;
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения, ТолькоПросмотрМодели", Новый Структура("Период, МодельТС, ГСМ, Организация",
			ТекущаяДата(), Ссылка, уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Модель, "ОсновноеТопливо"), Организация), Истина);
		ОткрытьФорму("РегистрСведений.уатНормыРасходаГСМ.ФормаЗаписи", ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
	Если Копирование И ТипЗнч(Элементы.НормыРасходаГСМ.ТекущиеДанные.МодельТС) = Тип("СправочникСсылка.уатМоделиТС") Тогда
		Отказ = Истина;
		ПараметрыФормы = Новый Структура("ТолькоПросмотрМодели", Истина);
		Форма = ПолучитьФорму("РегистрСведений.уатНормыРасходаГСМ.ФормаЗаписи", ПараметрыФормы, ЭтаФорма);
		ЗаполнитьЗначенияСвойств(Форма.Запись, Элементы.НормыРасходаГСМ.ТекущиеДанные,, "Период, МодельТС");
		Форма.Запись.Период   = ТекущаяДата();
		Форма.Запись.МодельТС = Ссылка;
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НормыРасходаГСМПередУдалением(Элемент, Отказ)
	ТекСтрока = Элементы.НормыРасходаГСМ.ТекущиеДанные;
	Если ТипЗнч(ТекСтрока.МодельТС) = Тип("СправочникСсылка.уатМоделиТС") Тогда 
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НормыРасходаГСМПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ТекСтрока = Элементы.НормыРасходаГСМ.ТекущиеДанные;
		ТекСтрока.МодельТС = Ссылка;
		ТекСтрока.ГСМ = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Модель, "ОсновноеТопливо");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НормыРасходаТЖПередНачаломИзменения(Элемент, Отказ)
	ТекСтрока = Элементы.НормыРасходаТЖ.ТекущиеДанные;
	Если ТипЗнч(ТекСтрока.МодельТС) = Тип("СправочникСсылка.уатМоделиТС") Тогда
		Отказ = Истина;
		
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("Период", ТекСтрока.Период);
		СтруктураЗаписи.Вставить("МодельТС", ТекСтрока.МодельТС);
		СтруктураЗаписи.Вставить("ГСМ", ТекСтрока.ГСМ);
		
		ПараметрыФормы = Новый Структура("Ключ, ТолькоПросмотр", КлючЗаписиНормыРасходаТЖ(СтруктураЗаписи), Истина);
		ОткрытьФорму("РегистрСведений.уатНормыРасходаТехническихЖидкостей.ФормаЗаписи", ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция КлючЗаписиНормыРасходаТЖ(СтруктураЗаписи)
	Возврат РегистрыСведений.уатНормыРасходаТехническихЖидкостей.СоздатьКлючЗаписи(СтруктураЗаписи);
КонецФункции

&НаКлиенте
Процедура НормыРасходаТЖПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Ложь;
	уатОбщегоНазначенияКлиент.ПроверитьЗаписьНовогоОбъектаВФорме(ЭтаФорма, Ссылка,,, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Копирование Тогда
		Отказ = Истина;
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения, ТолькоПросмотрМодели", Новый Структура("Период, МодельТС",
			ТекущаяДата(), Ссылка), Истина);
		ОткрытьФорму("РегистрСведений.уатНормыРасходаТехническихЖидкостей.ФормаЗаписи", ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Комментарий");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоМоделиТС(Команда)
	ЗаполнитьРеквизитыТСПоМоделиТС();
КонецПроцедуры

&НаКлиенте
Процедура ВводВЭксплуатацию(Команда)
	
	Если ВладелецФормы.Объект.Ссылка.Пустая() Тогда
		ТекстВопроса = "Для выполнения данной операции необходимо записать элемент. Продолжить?";
		
		ОповещениеЗаписатьОбъект = Новый ОписаниеОповещения("ВводВЭксплуатациюПродолжение", ЭтотОбъект);
		
		ПоказатьВопрос(ОповещениеЗаписатьОбъект, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ПараметрыФормы = Новый Структура("ТС", ВладелецФормы.Объект.Ссылка);
		ОткрытьФорму("Документ.уатВводВЭксплуатациюТСиОборудования.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВводВЭксплуатациюПродолжение(Результат, ДопПараметры) Экспорт 
	
	Если Не Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	Иначе
		Если Не ВладелецФормы.ПроверитьЗаполнение() Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			Если ВладелецФормы.Записать() Тогда 
				ПараметрыФормы = Новый Структура("ТС", ВладелецФормы.Объект.Ссылка);
				ОткрытьФорму("Документ.уатВводВЭксплуатациюТСиОборудования.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			КонецЕсли;
		Исключение
			ТекстСообщения = ИнформацияОбОшибке().Описание;
			ТекПричина = ИнформацияОбОшибке().Причина;
			Сч = 1; МаксСч = 10;
			Пока ТекПричина <> Неопределено И Сч <= МаксСч Цикл
				ТекстСообщения = ТекстСообщения + " \ " + ТекПричина.Описание;
				ТекПричина = ТекПричина.Причина;
				Сч = Сч + 1;
			КонецЦикла;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеремещениеТС(Команда)
	
	Отказ = Ложь;
	уатОбщегоНазначенияКлиент.ПроверитьЗаписьНовогоОбъектаВФорме(ЭтаФорма, Ссылка,,, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ТС", Ссылка);
	ОткрытьФорму("Документ.уатПеремещениеТСиОборудования.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура ВыбытиеТС(Команда)
	
	Отказ = Ложь;
	уатОбщегоНазначенияКлиент.ПроверитьЗаписьНовогоОбъектаВФорме(ЭтаФорма, Ссылка,,, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ТС", Ссылка);
	ОткрытьФорму("Документ.уатВыбытиеТСиОборудования.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура История(Команда)
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаМестонахождение;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьIDDynafleet(Команда)
	
	ЗаполнитьIDDynafleetНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ЗаписатьРеквизитыВФормеВладельце();
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	ЗаписатьРеквизитыВФормеВладельце();
	
	Ссылка = ВладелецФормы.Объект.Ссылка;
	флЗаписьНовогоТС = Ссылка.Пустая();
	ОбновитьСвязанныеДанныеПоТС();
	УстановитьВидимость();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьРеквизитыСвойств(Знач ОбъектИсточник)
	
	Ссылка = ОбъектИсточник.Ссылка;
	Наименование = ОбъектИсточник.Наименование;
	ТипТС = ОбъектИсточник.Тип;
	VIN = ОбъектИсточник.уатVIN;
	АвтоматическиСписыватьРасходТопливаНаЗапуск = ОбъектИсточник.уатАвтоматическиСписыватьРасходТопливаНаЗапуск;
	БалансоваяСтоимость = ОбъектИсточник.уатБалансоваяСтоимость;
	ВидМоделиТС = ОбъектИсточник.уатВидМоделиТС;
	ГабаритныйРазмерВысота = ОбъектИсточник.уатГабаритныйРазмерВысота;
	ГабаритныйРазмерДлина = ОбъектИсточник.уатГабаритныйРазмерДлина;
	ГабаритныйРазмерШирина = ОбъектИсточник.уатГабаритныйРазмерШирина;
	Гараж = ОбъектИсточник.Удалить_уатГараж;
	ГаражныйНомер = ОбъектИсточник.уатГаражныйНомер;
	ГодВыпуска = ОбъектИсточник.уатГодВыпуска;
	ДатаВводаВЭксплуатацию = ОбъектИсточник.уатДатаВводаВЭксплуатацию;
	ДатаВыбытия = ОбъектИсточник.уатДатаВыбытия;
	ДатаПостановкиНаУчетГИБДД = ОбъектИсточник.уатДатаПостановкиНаУчетГИБДД;
	ЗаполнятьПутевойЛистСпискомОборудования = ОбъектИсточник.уатЗаполнятьПутевойЛистСпискомОборудования;
	ИДвСистемеНавигации = ОбъектИсточник.уатИДвСистемеНавигации;
	уатИконкаНаКарте = ОбъектИсточник.уатИконкаНаКарте;
	ИспользуемаяСистемаGPS = ОбъектИсточник.уатИспользуемаяСистемаGPS;
	КодПоКлассификатору = ОбъектИсточник.уатКодПоКлассификатору;
	Колонна = ОбъектИсточник.уатКолонна;
	Комментарий = ОбъектИсточник.уатКомментарий;
	Модель = ОбъектИсточник.уатМодель;
	МодельДвигателя = ОбъектИсточник.уатМодельДвигателя;
	МощностьДвигателяКВт = ОбъектИсточник.уатМощностьДвигателяКВт;
	МощностьДвигателяЛС = ОбъектИсточник.уатМощностьДвигателяЛС;
	НачальнаяНаработка = ОбъектИсточник.уатНачальнаяНаработка;
	НачальныйПробег = ОбъектИсточник.уатНачальныйПробег;
	НомерДвигателя = ОбъектИсточник.уатНомерДвигателя;
	НомерКПП = ОбъектИсточник.уатНомерКПП;
	НомерКузова = ОбъектИсточник.уатНомерКузова;
	НомерШасси = ОбъектИсточник.уатНомерШасси;
	Организация = ОбъектИсточник.уатОрганизация;
	ОбъектЭксплуатации = ОбъектИсточник.уатОбъектЭксплуатации;
	ОсновноеУсловиеРаботы = ОбъектИсточник.уатОсновноеУсловиеРаботы;
	ОсновнойВидПЛ = ОбъектИсточник.уатОсновнойВидПЛ;
	ОсновнойРежимРаботы = ОбъектИсточник.уатОсновнойРежимРаботы;
	Подразделение = ОбъектИсточник.уатПодразделение;
	ПолезныйРазмерВысота = ОбъектИсточник.уатПолезныйРазмерВысота;
	ПолезныйРазмерДлина = ОбъектИсточник.уатПолезныйРазмерДлина;
	ПолезныйРазмерШирина = ОбъектИсточник.уатПолезныйРазмерШирина;
	СобственныйВес = ОбъектИсточник.уатСобственныйВес;
	СрокИспользования = ОбъектИсточник.уатСрокИспользования;
	ТипТСПоВоенкомату = ОбъектИсточник.уатТипТСПоВоенкомату;
	ЦветКузова = ОбъектИсточник.уатЦветКузова;
	ЦветМаршрутаНаКарте = ОбъектИсточник.уатЦветМаршрутаНаКарте;
	КоэффициентИзмененияНормТоплива = ОбъектИсточник.уатКоэффициентИзмененияНормТоплива;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьРеквизитыВФормеВладельце()
	
	ВладелецФормы.Объект.уатVIN = VIN;
	ВладелецФормы.Объект.уатАвтоматическиСписыватьРасходТопливаНаЗапуск = АвтоматическиСписыватьРасходТопливаНаЗапуск;
	ВладелецФормы.Объект.уатБалансоваяСтоимость = БалансоваяСтоимость;
	ВладелецФормы.Объект.уатВидМоделиТС = ВидМоделиТС;
	ВладелецФормы.Объект.уатГабаритныйРазмерВысота = ГабаритныйРазмерВысота;
	ВладелецФормы.Объект.уатГабаритныйРазмерДлина = ГабаритныйРазмерДлина;
	ВладелецФормы.Объект.уатГабаритныйРазмерШирина = ГабаритныйРазмерШирина;
	ВладелецФормы.Объект.Удалить_уатГараж = Гараж;
	ВладелецФормы.Объект.уатГаражныйНомер = ГаражныйНомер;
	ВладелецФормы.Объект.уатГодВыпуска = ГодВыпуска;
	ВладелецФормы.Объект.уатДатаВводаВЭксплуатацию = ДатаВводаВЭксплуатацию;
	ВладелецФормы.Объект.уатДатаВыбытия = ДатаВыбытия;
	ВладелецФормы.Объект.уатДатаПостановкиНаУчетГИБДД = ДатаПостановкиНаУчетГИБДД;
	ВладелецФормы.Объект.уатЗаполнятьПутевойЛистСпискомОборудования = ЗаполнятьПутевойЛистСпискомОборудования;
	ВладелецФормы.Объект.уатИДвСистемеНавигации = ИДвСистемеНавигации;
	ВладелецФормы.Объект.уатИконкаНаКарте = уатИконкаНаКарте;
	ВладелецФормы.Объект.уатИспользуемаяСистемаGPS = ИспользуемаяСистемаGPS;
	ВладелецФормы.Объект.уатКодПоКлассификатору = КодПоКлассификатору;
	ВладелецФормы.Объект.уатКолонна = Колонна;
	ВладелецФормы.Объект.уатКомментарий = Комментарий;
	ВладелецФормы.Объект.уатМодель = Модель;
	ВладелецФормы.Объект.уатМодельДвигателя = МодельДвигателя;
	ВладелецФормы.Объект.уатМощностьДвигателяКВт = МощностьДвигателяКВт;
	ВладелецФормы.Объект.уатМощностьДвигателяЛС = МощностьДвигателяЛС;
	ВладелецФормы.Объект.уатНачальнаяНаработка = НачальнаяНаработка;
	ВладелецФормы.Объект.уатНачальныйПробег = НачальныйПробег;
	ВладелецФормы.Объект.уатНомерДвигателя = НомерДвигателя;
	ВладелецФормы.Объект.уатНомерКПП = НомерКПП;
	ВладелецФормы.Объект.уатНомерКузова = НомерКузова;
	ВладелецФормы.Объект.уатНомерШасси = НомерШасси;
	ВладелецФормы.Объект.уатОрганизация = Организация;
	ВладелецФормы.Объект.уатОбъектЭксплуатации = ОбъектЭксплуатации;
	ВладелецФормы.Объект.уатОсновноеУсловиеРаботы = ОсновноеУсловиеРаботы;
	ВладелецФормы.Объект.уатОсновнойВидПЛ = ОсновнойВидПЛ;
	ВладелецФормы.Объект.уатОсновнойРежимРаботы = ОсновнойРежимРаботы;
	ВладелецФормы.Объект.уатПодразделение = Подразделение;
	ВладелецФормы.Объект.уатПолезныйРазмерВысота = ПолезныйРазмерВысота;
	ВладелецФормы.Объект.уатПолезныйРазмерДлина = ПолезныйРазмерДлина;
	ВладелецФормы.Объект.уатПолезныйРазмерШирина = ПолезныйРазмерШирина;
	ВладелецФормы.Объект.уатСобственныйВес = СобственныйВес;
	ВладелецФормы.Объект.уатСрокИспользования = СрокИспользования;
	ВладелецФормы.Объект.уатТипТСПоВоенкомату = ТипТСПоВоенкомату;
	ВладелецФормы.Объект.уатЦветКузова = ЦветКузова;
	ВладелецФормы.Объект.уатЦветМаршрутаНаКарте = ЦветМаршрутаНаКарте;
	ВладелецФормы.Объект.Тип = ТипТС;
	ВладелецФормы.Объект.уатКоэффициентИзмененияНормТоплива = КоэффициентИзмененияНормТоплива;
	
	ВладелецФормы.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтраницуНачальногоПробегаНаработки()
	
	Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(Модель)
		Или уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Модель, "НаличиеСпидометра") = Истина Тогда
		Элементы.ГруппаНачПробегНадпись.ТекущаяСтраница = Элементы.ГруппаНачПробегНадписьПробег;
	Иначе
		Элементы.ГруппаНачПробегНадпись.ТекущаяСтраница = Элементы.ГруппаНачПробегНадписьНаработка;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьСостояниеТС(Ссылка)
	СтруктураВозврата = Новый Структура;
	
	СтруктураВозврата.Вставить("СостояниеТС", уатОбщегоНазначения.уатСостояниеТС(Ссылка, ТекущаяДата()).Состояние);
	
	Возврат СтруктураВозврата;
КонецФункции

&НаКлиенте
Процедура ОбновитьСвязанныеДанныеПоТС()
	СтруктураДанных = ОбновитьСостояниеТС(Ссылка);
	СостояниеТС = СтруктураДанных.СостояниеТС;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Экипаж.Отбор, "ТС", Ссылка,,,Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(МестонахождениеТС.Отбор, "ТС", Ссылка,,,Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ПластиковыеКарты.Отбор, "КомуВыдана", Ссылка,,,Истина);
	Если (ВидМоделиТС = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Автотранспорт")) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СоставТС.Отбор, "ВСоставе", Ссылка,,,Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СоставТС.Отбор, "ТС",,,,Ложь);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СоставТС.Отбор, "ВСоставе",,,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СоставТС.Отбор, "ТС", Ссылка,,,Истина);
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ДокументыТС.Отбор, "ТС", Ссылка,,,Истина);
	ОбновитьДанныеОМестонахождении();
	ОтобразитьАгрегатыТС();
	
	СписокМодельТС = Новый СписокЗначений;
	СписокМодельТС.Добавить(Ссылка);
	СписокМодельТС.Добавить(Модель);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НормыРасходаГСМ.Отбор, "МодельТС", СписокМодельТС, ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НормыРасходаТЖ.Отбор, "МодельТС", СписокМодельТС, ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьАгрегатыТС()
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Шины, "Дата", ТекущаяДата(), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Шины, "ТС", Ссылка, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Аккумуляторы, "Дата", ТекущаяДата(), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Аккумуляторы, "ТС", Ссылка, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПрочиеАгрегаты, "Дата", ТекущаяДата(), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПрочиеАгрегаты, "ТС", Ссылка, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	ЭтоАвтотранспорт = (ВидМоделиТС = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Автотранспорт"));
	ЭтоПрицеп = (ВидМоделиТС = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Прицеп"));
	
	Если ЭтоАвтотранспорт Тогда
		Заголовок = Наименование + " (Транспортное средство)";
	ИначеЕсли ЭтоПрицеп Тогда
		Заголовок = Наименование + " (Прицеп)";
	Иначе
		Заголовок = Наименование + " (Оборудование)";
	КонецЕсли;
	
	Элементы.ГруппаДопПараметрыПодвал.Видимость = ЭтоАвтотранспорт;
	
	Элементы.Организация.ТолькоПросмотр = НЕ флЗаписьНовогоТС;
	Элементы.Подразделение.ТолькоПросмотр = НЕ флЗаписьНовогоТС;
	Элементы.Колонна.ТолькоПросмотр = НЕ флЗаписьНовогоТС;
	
	Элементы.СоставТСВСоставе.Видимость = НЕ ЭтоАвтотранспорт;
	Элементы.СоставТСТС.Видимость = ЭтоАвтотранспорт;
	
	Элементы.СтраницаЭкипаж.Видимость			= ЭтоАвтотранспорт;
	Элементы.СтраницаПластиковыеКарты.Видимость = ЭтоАвтотранспорт;
	
	ВидимостьВводВЭксплуатацию = (ДатаВводаВЭксплуатацию = '00010101') И Не ТолькоПросмотр;
	Если Элементы.ВводВЭксплуатацию.Видимость <> ВидимостьВводВЭксплуатацию Тогда
		Элементы.ВводВЭксплуатацию.Видимость = ВидимостьВводВЭксплуатацию;
	КонецЕсли;
	ВидимостьПеремещениеВыбытие = (ДатаВводаВЭксплуатацию <> '00010101' И ДатаВыбытия = '00010101') И Не ТолькоПросмотр;
	Если Элементы.ПеремещениеТС.Видимость <> ВидимостьПеремещениеВыбытие Тогда
		Элементы.ПеремещениеТС.Видимость = ВидимостьПеремещениеВыбытие;
	КонецЕсли;
	Если Элементы.ВыбытиеТС.Видимость <> ВидимостьПеремещениеВыбытие Тогда
		Элементы.ВыбытиеТС.Видимость = ВидимостьПеремещениеВыбытие;
	КонецЕсли;
	
	Если СистемыСпутниковогоМониторингаИспользуются() Тогда 
		Элементы.СтраницыССМ.ТекущаяСтраница = Элементы.ССМИспользуется;
	Иначе 
		Элементы.СтраницыССМ.ТекущаяСтраница = Элементы.ССМНеИспользуется;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыТСПоМоделиТС()
	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьРеквизитыТСПоМоделиТСЗавершение", ЭтотОбъект), "Перезаполнить реквизиты, соответствующие модели ТС?", РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыТСПоМоделиТСЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ТипТС",                  Неопределено);
	СтруктураРеквизитов.Вставить("ВидМоделиТС",            Неопределено);
	СтруктураРеквизитов.Вставить("МодельДвигателя",        Неопределено);
	СтруктураРеквизитов.Вставить("МощностьДвигателяЛС",    Неопределено);
	СтруктураРеквизитов.Вставить("МощностьДвигателяКВт",   Неопределено);
	СтруктураРеквизитов.Вставить("СобственныйВес",         Неопределено);
	СтруктураРеквизитов.Вставить("ГабаритныйРазмерДлина",  Неопределено);
	СтруктураРеквизитов.Вставить("ГабаритныйРазмерВысота", Неопределено);
	СтруктураРеквизитов.Вставить("ГабаритныйРазмерШирина", Неопределено);
	СтруктураРеквизитов.Вставить("ПолезныйРазмерДлина",    Неопределено);
	СтруктураРеквизитов.Вставить("ПолезныйРазмерВысота",   Неопределено);
	СтруктураРеквизитов.Вставить("ПолезныйРазмерШирина",   Неопределено);
	
	СтруктураЗначенияРекв = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначенияРеквизитов(Модель, СтруктураРеквизитов);
	
	Если ТипЗнч(СтруктураЗначенияРекв) = Тип("Структура") Тогда 
		Для Каждого ТекРекв Из СтруктураЗначенияРекв Цикл
			ЭтотОбъект[ТекРекв.Ключ] = ТекРекв.Значение;
		КонецЦикла;
	Иначе
		Для Каждого ТекРекв Из СтруктураРеквизитов Цикл
			ЭтотОбъект[ТекРекв.Ключ] = ТекРекв.Значение;
		КонецЦикла;
	КонецЕсли;
	
	Модель_Грузоподъемность = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Модель, "Грузоподъемность");
	Если ЗначениеЗаполнено(Модель_Грузоподъемность) Тогда
		ВладелецФормы.Объект.ГрузоподъемностьВТоннах = Модель_Грузоподъемность;
	КонецЕсли;
	
	Модель_ОбъемКузова = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Модель, "ОбъемКузова");
	Если ЗначениеЗаполнено(Модель_ОбъемКузова) Тогда
		ВладелецФормы.Объект.ВместимостьВКубическихМетрах = Модель_ОбъемКузова;
	КонецЕсли;
	
	УстановитьВидимость();
	ПриИзмененииВидаМоделиТС();

	УстановитьСтраницуНачальногоПробегаНаработки();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьСсылкуНаОбъектПоКлючу(ИмяСписка, ВыбраннаяСтрока, ФлагТС = Ложь)
	Если ИмяСписка = "СоставТС" Тогда
		Если ФлагТС Тогда
			Возврат ВыбраннаяСтрока.ТС;
		Иначе
			Возврат ВыбраннаяСтрока.ТС.уатМодель;
		КонецЕсли;
	ИначеЕсли ИмяСписка = "Агрегаты" Тогда
		Возврат ВыбраннаяСтрока.СерияНоменклатуры;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ПриИзмененииВидаМоделиТС()
	Если ВидМоделиТС <> ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Автотранспорт") Тогда
		ОсновнойВидПЛ = Неопределено;
		ОсновнойРежимРаботы = Неопределено;
		ОсновноеУсловиеРаботы = Неопределено;
		АвтоматическиСписыватьРасходТопливаНаЗапуск = Ложь;
		КоэффициентИзмененияНормТоплива = 0;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтраницуGPS()
	Если ИспользуемаяСистемаGPS = ПредопределенноеЗначение("Перечисление.уатСистемаGPS._1СЦСМ") Тогда
		Элементы.СтраницыGPS.ТекущаяСтраница = Элементы.ЦСМ;
		СписокВыбора = Элементы.ИконкаНаКарте.СписокВыбора;
		СписокВыбора.Очистить();
		СписокВыбора.Добавить("ItobИконкаАвтомобильЛегковой"   , "Автомобиль легковой");
		СписокВыбора.Добавить("ItobИконкаАвтомобильЗеленый"    , "Автомобиль зеленый");
		СписокВыбора.Добавить("ItobИконкаАвтомобильСпортивный" , "Автомобиль спортивный");
		СписокВыбора.Добавить("ItobИконкаВертолет"             , "Вертолет");
		СписокВыбора.Добавить("ItobИконкаВрач"           , "Врач");
		СписокВыбора.Добавить("ItobИконкаГрузовик"       , "Грузовик");
		СписокВыбора.Добавить("ItobИконкаГрузовикЖелтый" , "Грузовик желтый");
		СписокВыбора.Добавить("ItobИконкаКабриолет"      , "Кабриолет");
		СписокВыбора.Добавить("ItobИконкаКорабль"        , "Корабль");
		СписокВыбора.Добавить("ItobИконкаМикроавтобус"   , "Микроавтобус");
		СписокВыбора.Добавить("ItobИконкаМилиционер"     , "Милиционер");
		СписокВыбора.Добавить("ItobИконкаМилиция"        , "Милиция");
		СписокВыбора.Добавить("ItobИконкаПожарнаяМашина" , "Пожарная машина");
		СписокВыбора.Добавить("ItobИконкаСкораяПомощь"   , "Скорая помощь");
		СписокВыбора.Добавить("ItobИконкаЧеловек"        , "Человек");
		
		ТекТерминал = ПрочитатьТерминал(Ссылка);
		Если ТекТерминал <> Неопределено Тогда
			Терминал = ТекТерминал;
		КонецЕсли;
		
		ОбновитьЦветИИконку();
		
	ИначеЕсли ЗначениеЗаполнено(ИспользуемаяСистемаGPS) Тогда
		Элементы.СтраницыGPS.ТекущаяСтраница = Элементы.GPSобщее;
		флГПС = ЗначениеЗаполнено(ИДвСистемеНавигации);
		УстановитьВидимостьГПС();
		
	Иначе
		Элементы.СтраницыGPS.ТекущаяСтраница = Элементы.Пустая;
		
	КонецЕсли;
	
	ДоступностьКнопкиЗаполнитьIDDynafleet();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрочитатьТерминал(Ссылка)
	СтруктураПривязки = РегистрыСведений.ItobПривязкиТерминалов.ПолучитьПоследнее(ТекущаяДата(), Новый Структура("Объект", Ссылка));
	Если СтруктураПривязки.ТерминалУстановлен = Истина Тогда
		Возврат СтруктураПривязки.Терминал;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура УстановитьЦветМаршрутаНаКарте(НовыйЦвет)
	Если НовыйЦвет.Вид = ВидЦвета.Абсолютный Тогда
		ЦветМаршрутаНаКарте = ItobОбщегоНазначенияКлиентСервер.ПолучитьЗначениеХраненияЦвета(НовыйЦвет.Красный, НовыйЦвет.Зеленый, НовыйЦвет.Синий);
		
	ИначеЕсли НовыйЦвет.Вид = ВидЦвета.WebЦвет Тогда
		ДанныеМакетаДляЦветаСервер = ДанныеМакетаДляЦветаСервер(НовыйЦвет);
		Если ДанныеМакетаДляЦветаСервер <> Неопределено Тогда
			ЦветМаршрутаНаКарте = ItobОбщегоНазначенияКлиентСервер.ПолучитьЗначениеХраненияЦвета(
				ДанныеМакетаДляЦветаСервер.Текст2, 
				ДанныеМакетаДляЦветаСервер.Текст3, 
				ДанныеМакетаДляЦветаСервер.Текст4);
		КонецЕсли;
		
	Иначе
		Сообщить("Данный вид цвета не поддерживается (выберите web-цвет или RGB)!");
		
	КонецЕсли;			
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеМакетаДляЦветаСервер(НовыйЦвет)
	Макет = ПолучитьОбщийМакет("ItobWebЦвета");
	Для НомСтроки = 1 По Макет.ВысотаТаблицы Цикл
		Если НовыйЦвет = WebЦвета[Макет.Область(НомСтроки, 1).Текст] Тогда
			Возврат Новый Структура("Текст1, Текст2, Текст3, Текст4",
				Макет.Область(НомСтроки, 1).Текст,
				Макет.Область(НомСтроки, 2).Текст,
				Макет.Область(НомСтроки, 3).Текст,
				Макет.Область(НомСтроки, 4).Текст);
		КонецЕсли;			
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура ОбновитьЦветИИконку()
	
	Синий = Цел(ЦветМаршрутаНаКарте/(256*256));
	Зеленый = Цел((ЦветМаршрутаНаКарте - Синий*256*256)/256);
	Красный = ЦветМаршрутаНаКарте - Синий*256*256 - Зеленый*256;
	
	ЦветМаршрутаЦСМ = Новый Цвет(Красный, Зеленый, Синий);
	
	Если ЗначениеЗаполнено(ИконкаНаКарте) Тогда
		ИконкаНаКарте = БиблиотекаКартинок[ИконкаНаКарте];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьГПС()
	Элементы.ИДвСистемеНавигации.Видимость = флГПС;
КонецПроцедуры

&НаКлиенте
Процедура ДоступностьКнопкиЗаполнитьIDDynafleet()
	Если ИспользуемаяСистемаGPS = ПредопределенноеЗначение("Перечисление.уатСистемаGPS.Dynafleet") И флГПС Тогда 
		Элементы.ЗаполнитьIDDynafleet.Видимость = Истина;
	Иначе 
		Элементы.ЗаполнитьIDDynafleet.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьIDDynafleetНаСервере()
	
	Если Константы.уатИспользоватьDynafleet.Получить() Тогда 
		Если ИспользуемаяСистемаGPS = Перечисления.уатСистемаGPS.Dynafleet Тогда 
			Если ЗначениеЗаполнено(VIN) Тогда 
				ТекстОшибки = "";
				IDТС        = "";
				Логин       = Константы.уатЛогинВСистемеDynafleet.Получить();
				Пароль      = Константы.уатПарольВСистемеDynafleet.Получить();
				Если уатЗащищенныеФункцииСервер_проф.ПолучитьIDТСПоVINDynafleet(Логин, Пароль, VIN, IDТС, ТекстОшибки) Тогда 
					Сообщить(ТекстОшибки);
				Иначе 
					ИДвСистемеНавигации = IDТС;
				КонецЕсли;
			Иначе 
				Сообщить("Необходимо заполнить поле ""VIN"" на закладке ""Основное""");
			КонецЕсли;
		Иначе 
			Сообщить("Для ТС указана система GPS: <" + ИспользуемаяСистемаGPS + ">" + "Необходимо выбрать систему GPS ""Dynafleet""");
		КонецЕсли;
	Иначе 
		Сообщить("Система GPS ""Dynafleet"" отключена.");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СистемыСпутниковогоМониторингаИспользуются()
	
	УстановитьПривилегированныйРежим(Истина);
	ИспользуетсяМониторинг = Константы.уатИспользоватьМониторинг.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ИспользуетсяМониторинг;
	
КонецФункции

#КонецОбласти
