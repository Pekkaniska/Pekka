// Выгружаем изменения, зарегистрированные в узле обмена //
// Не забываем про фильтры номенклатуры, а также про то, что нужно отфильтровывать неактуальную и ненужную информацию //
// Запись XML должна быть уже инициализирована //
Процедура ВыгрузитьИзмененные (СтруктураДанных, Запись, УзелОбмена,  ТолькоИзмененные, НомерСообщения = 0) Экспорт
	Сообщить("Начало выгрузки: " + ТекущаяДата());
	
	Если ТолькоИзмененные И Не ЗначениеЗаполнено(УзелОбмена) Тогда
		ВызватьИсключение "Не задан узел обмена!"; 
	КонецЕсли;	
	
	Если СтруктураДанных.ИмяТипа = "РегистрСведений" Тогда
		Мета = Метаданные.РегистрыСведений[СтруктураДанных.ИмяТаблицы];
	ИначеЕсли СтруктураДанных.ИмяТипа = "Справочник" Тогда
		Мета = Метаданные.Справочники[СтруктураДанных.ИмяТаблицы];
	ИначеЕсли СтруктураДанных.ИмяТипа = "Документ" Тогда
		Мета = Метаданные.Документы[СтруктураДанных.ИмяТаблицы];
	Иначе 
		Возврат;	
	КонецЕсли;	
	
	СЧВыгруженных = 0;
	
	// Если выгрузка стандартная - то не будем делать запрос, сэкономим ресурсы //
	Если ЛОЖЬ И ТолькоИзмененные И СтруктураДанных.СтандартнаяВыборка Тогда
		ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелОбмена,НомерСообщения,Мета);
		
		Пока ВыборкаИзменений.Следующий() Цикл
			СЧВыгруженных = СЧВыгруженных + 1;
			#ЕСЛИ КЛИЕНТ ТОГДА
				Если СЧВыгруженных % 100 = 0 Тогда
					Состояние("Выгружаю: " + СтруктураДанных.Наименование + " : " + СЧВыгруженных);
				КонецЕсли;	
			#КОНЕЦЕСЛИ	
			ЗаписатьXML(Запись,ВыборкаИзменений.Получить());
		КонецЦикла;
		
	Иначе
		
		ТекстВыбор = "";
		
		СтруктураДанныхЭлемента = Новый Структура;
		СтруктураДанныхГруппы   = Новый Структура;
		СоответствиеДопТЧ       = Новый Соответствие;
		
		Для Каждого СтрокаРекв ИЗ СтруктураДанных.Реквизиты.НайтиСтроки(Новый Структура("Выгружать",Истина)) Цикл 
			Если СтрокаРекв.Использование = 0 Или СтрокаРекв.Использование = 1 Тогда
				СтруктураДанныхЭлемента.Вставить(СтрокаРекв.ИмяУзла,СтрокаРекв.СоставнойТип);
			КонецЕсли;	
			Если СтрокаРекв.Использование = 0 Или СтрокаРекв.Использование = 2 Тогда
				СтруктураДанныхГруппы.Вставить(СтрокаРекв.ИмяУзла,СтрокаРекв.СоставнойТип);
			КонецЕсли;	
			ТекстВыбор = ТекстВыбор + ? (ПустаяСтрока(ТекстВыбор),"","," + Символы.ПС) + "ТЧ." + СтрокаРекв.ИмяРеквизита + " КАК " + СтрокаРекв.ИмяУзла;		
		КонецЦикла;	
		
		Для Каждого СтрокаТЧ ИЗ СтруктураДанных.ТабличныеЧасти.НайтиСтроки(Новый Структура("Выгружать",Истина)) Цикл
			ТекстТЧ = "";
			СтруктураДанныхСтрокиТЧ = Новый Структура;
			Для Каждого СтрокаРекв ИЗ СтруктураДанных.РеквизитыТабличныхЧастей.НайтиСтроки(Новый Структура("ИмяТабличнойЧасти,Выгружать",СтрокаТЧ.ИмяТабличнойЧасти,Истина)) Цикл 
				ТекстТЧ = ТекстТЧ + ? (ПустаяСтрока(ТекстТЧ),"","," + Символы.ПС) + СтрокаРекв.ИмяРеквизита + " КАК " + СтрокаРекв.ИмяУзла ;		
				СтруктураДанныхСтрокиТЧ.Вставить(СтрокаРекв.ИмяУзла,СтрокаРекв.СоставнойТип);
			КонецЦикла;	
			Если СтрокаТЧ.ПолучитьИзДополнительныхДанных Тогда
				СоответствиеДопТЧ.Вставить(СтрокаТЧ.ИмяТабличнойЧасти,Новый Структура("ИмяУзла,СтруктураДанных",СтрокаТЧ.ИмяУзла,СтруктураДанныхСтрокиТЧ));
			Иначе	
				СтруктураДанныхЭлемента.Вставить(СтрокаТЧ.ИмяУзла,СтруктураДанныхСтрокиТЧ);
				СтруктураДанныхГруппы.Вставить(СтрокаТЧ.ИмяУзла  ,СтруктураДанныхСтрокиТЧ);
			КонецЕсли;	
			ТекстВыбор = ТекстВыбор + ? (ПустаяСтрока(ТекстВыбор),"","," + Символы.ПС) + "ТЧ." + СтрокаТЧ.ИмяТабличнойЧасти + ".(
			| " + ТекстТЧ + ")";
		КонецЦикла;	
		
		Запрос = СформироватьЗапросСОтборами(СтруктураДанных, УзелОбмена, ТолькоИзмененные);
		РЗ     = Запрос.ВыполнитьПакет();
		
		// Разделяем основную таблицу выгрузки и дополнительные таб. части //	
		ИскомыеСтрокиТЗ = СтруктураДанных.ТабличныеЧасти.НайтиСтроки(Новый Структура("Выгружать,ПолучитьИзДополнительныхДанных",Истина,Истина));
		МассивРезультатов = Новый Массив;
		Для Каждого Эл Из РЗ Цикл
			МассивРезультатов.Добавить(Эл.Выгрузить());
		КонецЦикла;	
		Рез = МассивРезультатов[МассивРезультатов.ВГраница() - ИскомыеСтрокиТЗ.Количество()];
		
		МассивОбъектовДляЗаписиИзменений = Новый Массив;
		
		// Если у нас регистр сведений, то нам нужны фильтры //
		Если СтруктураДанных.ИмяТипа = "РегистрСведений" Тогда
						
			Мета        = Метаданные.РегистрыСведений[СтруктураДанных.ИмяТаблицы];
			ТекстОтбора = "";
			
			Для Каждого Поле Из СтруктураДанных.Реквизиты Цикл 
				Если Поле.ОсновнойОтборВПриемнике Тогда
					ТекстОтбора = ТекстОтбора + ?(ПустаяСтрока(ТекстОтбора),"",",") + Поле.ИмяРеквизита;
				КонецЕсли;	
			КонецЦикла;	
			
			Если ПустаяСтрока(ТекстОтбора) Тогда
				Если Мета.ОсновнойОтборПоПериоду Тогда	
					ТекстОтбора = "Period";			
				КонецЕсли;
				
				Для Каждого Измерение Из Мета.Измерения Цикл
					Если Измерение.ОсновнойОтбор Тогда
						ТекстОтбора = ТекстОтбора + ?(ПустаяСтрока(ТекстОтбора),"",",") + Измерение.Имя;
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;
			
			ТЗФильтры = Рез.Скопировать(,ТекстОтбора);
			ТЗФильтры.Свернуть(ТекстОтбора);
			
			//Глебов Тест
			Если Рез.Колонки.Найти("DeletionMark") <> Неопределено Тогда
				Рез = Рез.Скопировать(Новый Структура("DeletionMark", Ложь));
			КонецЕсли;
			//\\			
			
			СтруктураФильтра = Новый Структура;
			СтруктураПоиска  = Новый Структура;
			Для Каждого Колонка Из ТЗФильтры.Колонки Цикл
				СтруктураФильтра.Вставить(Колонка.Имя,(Колонка.ТипЗначения.Типы().Количество() > 2));
				СтруктураПоиска.Вставить(Колонка.Имя);
				Рез.Индексы.Добавить(Колонка.Имя);
			КонецЦикла;	
			
			//Глебов Добавим индекс по пометке удаления
			Если Рез.Колонки.Найти("DeletionMark") <> Неопределено Тогда
				Рез.Индексы.Добавить("DeletionMark");
			КонецЕсли;
			//\\
			
			Запись.ЗаписатьКомментарий("Нетиповая выгрузка");
			
			Для Каждого СтрокаФильтр Из ТЗФильтры Цикл
				
				СЧВыгруженных = СЧВыгруженных + 1;
				#ЕСЛИ КЛИЕНТ ТОГДА
					Если СЧВыгруженных % 100 = 0 Тогда
						Состояние("Выгружаю: " + СтруктураДанных.Наименование + " : " + СЧВыгруженных);
					КонецЕсли;	
				#КОНЕЦЕСЛИ				
				
				Если Не СтруктураДанных.СтандартнаяВыборка Тогда
					Запись.ЗаписатьНачалоЭлемента(СтруктураДанных.ИмяУзла);
					Запись.ЗаписатьНачалоЭлемента("Filter");
					ЗаполнитьЗначенияСвойств(СтруктураФильтра,СтрокаФильтр);
					ЗаписатьАтрибутыСтрокиXML(Запись,СтрокаФильтр,СтруктураФильтра);
					Запись.ЗаписатьКонецЭлемента();
					ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаФильтр);
					
					Запись.ЗаписатьНачалоЭлемента("Records");
					
					Если Рез.Колонки.Найти("DeletionMark") <> Неопределено Тогда
						СтруктураПоиска.Вставить("DeletionMark",ЛОЖЬ);
					КонецЕсли;	
					
					ИскомыеСтроки = Рез.НайтиСтроки(СтруктураПоиска);
					Для Каждого ИскомаяСтрока Из ИскомыеСтроки Цикл 
						Записывать = ИСТИНА;
						Для Каждого Колонка Из Рез.Колонки Цикл
							Если ИскомаяСтрока[Колонка.Имя] = NULL Тогда
								Записывать = ЛОЖЬ;
							КонецЕсли;	
						КонецЦикла;
						Если Записывать Тогда
							Запись.ЗаписатьНачалоЭлемента("Record");
							ЗаписатьАтрибутыСтрокиXML(Запись,ИскомаяСтрока,СтруктураДанныхЭлемента);
							Запись.ЗаписатьКонецЭлемента(); // Row
						КонецЕсли;
					КонецЦикла;	
					Запись.ЗаписатьКонецЭлемента(); // Records			
					
					Запись.ЗаписатьКонецЭлемента(); // Recordset
					
					// Для регистрации изменений //
					ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаФильтр);
					Набор = РегистрыСведений[СтруктураДанных.ИмяТаблицы].СоздатьНаборЗаписей();
					Для Каждого Эл ИЗ СтруктураПоиска Цикл
						Если Эл.Ключ <> "DeletionMark" Тогда 
							Набор.Отбор[Эл.Ключ].Установить(Эл.Значение);
						КонецЕсли;
					КонецЦикла;
					МассивОбъектовДляЗаписиИзменений.Добавить(Набор);
					// 
					
				Иначе
					ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаФильтр);
					Набор = РегистрыСведений[СтруктураДанных.ИмяТаблицы].СоздатьНаборЗаписей();
					Для Каждого Эл ИЗ СтруктураПоиска Цикл
						Набор.Отбор[Эл.Ключ].Установить(Эл.Значение);
					КонецЦикла;
					Набор.Прочитать();
					//Пока Набор.Количество() > 1 Цикл
					//	Набор.Удалить(Набор[Набор.Количество() - 1]);
					//КонецЦикла;	
					ЗаписатьXML(Запись,Набор);
					МассивОбъектовДляЗаписиИзменений.Добавить(Набор);
				КонецЕсли;
			КонецЦикла;	
		Иначе	
			Для Каждого СтрокаТЧ Из Рез Цикл
				СЧВыгруженных = СЧВыгруженных + 1;
				#ЕСЛИ КЛИЕНТ ТОГДА
					Если СЧВыгруженных % 100 = 0 Тогда
						Состояние("Выгружаю: " + СтруктураДанных.Наименование + " : " + СЧВыгруженных);
					КонецЕсли;	
				#КОНЕЦЕСЛИ	
				Если ИСТИНА = СтрокаТЧ.DeletionMark Тогда
					Объект = Новый УдалениеОбъекта(СтрокаТЧ.ref);
					ЗаписатьXML(Запись,Объект);					
				ИНачеЕсли НЕ СтруктураДанных.СтандартнаяВыборка Тогда
					Запись.ЗаписатьНачалоЭлемента(СтруктураДанных.ИмяУзла);
					Стр = Новый Структура("IsFolder",Ложь);
					ЗаполнитьЗначенияСвойств(Стр,СтрокаТЧ);
					ЗаписатьАтрибутыСтрокиXML(Запись,СтрокаТЧ,?(Стр.IsFolder,СтруктураДанныхГруппы,СтруктураДанныхЭлемента));				
					// Выгрузим дополнительные табличные части //
					СЧТаблиц        = 0;
					Для Каждого ИскомаяСтрока Из ИскомыеСтрокиТЗ Цикл
						СЧТаблиц           = СЧТаблиц + 1;
						ТаблицаДляВыгрузки = МассивРезультатов[МассивРезультатов.ВГраница() - ИскомыеСтрокиТЗ.Количество() + СЧТаблиц].Скопировать(Новый Структура("Ref",СтрокаТЧ.Ref));	
						СтруктураДляТЗ     = СоответствиеДопТЧ.Получить("Таблица" + СЧТаблиц);
						
						Запись.ЗаписатьНачалоЭлемента(СтруктураДляТЗ.ИмяУзла);
						
						Для Каждого СтрокаПодч Из ТаблицаДляВыгрузки Цикл
							Запись.ЗаписатьНачалоЭлемента("Row");
							ЗаписатьАтрибутыСтрокиXML(Запись,СтрокаПодч,СтруктураДляТЗ.СтруктураДанных);
							Запись.ЗаписатьКонецЭлемента();
						КонецЦикла;	
						Запись.ЗаписатьКонецЭлемента();
					КонецЦикла;					
					Запись.ЗаписатьКонецЭлемента();
				Иначе	
					ЗаписатьXML(Запись,СтрокаТЧ.ref.ПолучитьОбъект());
				КонецЕсли;
				
				МассивОбъектовДляЗаписиИзменений.Добавить(СтрокаТЧ.ref);				
			КонецЦикла;		
		КонецЕсли;	
		
		Если ТолькоИзмененные И НомерСообщения > 0 Тогда
			//ПланыОбмена.ВыбратьИзменения(УзелОбмена,НомерСообщения,Мета);
			// Запишем удаление объектов //
			Если Метаданные.Справочники.Содержит(Мета) Или Метаданные.Документы.Содержит(Мета) Тогда
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ТЧ.Ссылка
				|ИЗ
				|	" + Мета.ПолноеИмя() + ".Изменения КАК ТЧ
				|ГДЕ
				|	ТЧ.Узел = &Узел
				|	И ТЧ.Ссылка.ПометкаУдаления ЕСТЬ NULL "; 
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					Удаление = Новый УдалениеОбъекта(Выборка.Ссылка);
					ЗаписатьXML(Запись,Удаление);
					МассивОбъектовДляЗаписиИзменений.Добавить(Выборка.Ссылка);
				КонецЦикла;	
			КонецЕсли;	
			Если МассивОбъектовДляЗаписиИзменений.Количество() > 0 Тогда
				ПланыОбмена.ВыбратьИзменения(УзелОбмена,НомерСообщения,МассивОбъектовДляЗаписиИзменений);
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	Сообщить("Окончание выгрузки: " + ТекущаяДата() + ", выгружено: " + СЧВыгруженных + " объектов");

КонецПроцедуры	

Функция ЗаписатьАтрибутыСтрокиXML (Запись, СтрокаТЧ, Колонки)
	Для Каждого Колонка Из Колонки Цикл
		мЗначение = СтрокаТЧ[Колонка.Ключ];
		Если ТипЗнч(мЗначение) = Тип ("ТаблицаЗначений") Тогда
			Запись.ЗаписатьНачалоЭлемента(Колонка.Ключ);
			Для Каждого СтрокаПодч Из мЗначение Цикл
				Запись.ЗаписатьНачалоЭлемента("Row");
				ЗаписатьАтрибутыСтрокиXML(Запись,СтрокаПодч,Колонка.Значение);
				Запись.ЗаписатьКонецЭлемента();
			КонецЦикла;	
			Запись.ЗаписатьКонецЭлемента();
		Иначе
			Если Колонка.Ключ = "Owner" Или Истина = Колонка.Значение Тогда
				НазначениеТипа = НазначениеТипаXML.Явное;
			Иначе
				НазначениеТипа = НазначениеТипаXML.Неявное;
			КонецЕсли;	
			ЗаписатьXML(Запись,мЗначение,Колонка.Ключ,НазначениеТипа);
		КонецЕсли;
	КонецЦикла;	
КонецФункции	

Функция ПолучитьИмяОбъектаАнглПоТипу (ИмяОбъекта) Экспорт
	Если ИмяОбъекта = "Справочник" Тогда
		Возврат "CatalogObject";
	ИначеЕсли ИмяОбъекта = "Документ" Тогда
		Возврат "DocumentObject";
	ИначеЕсли ИмяОбъекта = "РегистрСведений" Тогда
		Возврат "InformationRegisterRecordSet"; 
	КонецЕсли;		
КонецФункции	

Функция ПолучитьИменаГруппМетаданных() Экспорт
	Рез = Новый Структура;
	
	Рез.Вставить("Справочник"     ,"Справочники");
	Рез.Вставить("Документ"       ,"Документы");
	Рез.Вставить("РегистрСведений","РегистрыСведений");
	Рез.Вставить("ТабличныеДанные","ТабличныеДанные");
	
	Возврат Рез;
КонецФункции	

Функция СформироватьЗапросСОтборами (СтруктураДанных, УзелОбмена ,ТолькоИзмененные) Экспорт
	
	Если СтруктураДанных.ИмяТипа = "РегистрСведений" Тогда
		Мета = Метаданные.РегистрыСведений[СтруктураДанных.ИмяТаблицы];
	ИначеЕсли СтруктураДанных.ИмяТипа = "Справочник" Тогда
		Мета = Метаданные.Справочники[СтруктураДанных.ИмяТаблицы];
	ИначеЕсли СтруктураДанных.ИмяТипа = "Документ" Тогда
		Мета = Метаданные.Документы[СтруктураДанных.ИмяТаблицы];
	КонецЕсли;
	
	СтруктураДанныхЭлемента = Новый Структура;
	СтруктураДанныхГруппы   = Новый Структура;
	СоответствиеДопТЧ       = Новый Соответствие;
	
	ТекстВыбор = "";
	
	Для Каждого СтрокаРекв ИЗ СтруктураДанных.Реквизиты.НайтиСтроки(Новый Структура("Выгружать",Истина)) Цикл 
		Если СтрокаРекв.Использование = 0 Или СтрокаРекв.Использование = 1 Тогда
			СтруктураДанныхЭлемента.Вставить(СтрокаРекв.ИмяУзла,СтрокаРекв.СоставнойТип);
		КонецЕсли;	
		Если СтрокаРекв.Использование = 0 Или СтрокаРекв.Использование = 2 Тогда
			СтруктураДанныхГруппы.Вставить(СтрокаРекв.ИмяУзла,СтрокаРекв.СоставнойТип);
		КонецЕсли;	
		Если СтруктураДанных.ИмяТипа = "РегистрСведений" Тогда
			Если Мета.ОсновнойОтборПоПериоду И НРег(СтрокаРекв.ИмяРеквизита) = "период" Тогда
				ИмяТаб = "ТЧ.";
			ИначеЕсли Мета.Измерения.Найти(СтрокаРекв.ИмяРеквизита) <> Неопределено И Мета.Измерения[СтрокаРекв.ИмяРеквизита].ОсновнойОтбор Тогда
				ИмяТаб = "ТЧ.";
			ИначеЕсли ТолькоИзмененные Тогда
				ИмяТаб = "ОсновнаяТаблица.";
			КонецЕсли;
			ТекстВыбор = ТекстВыбор + ? (ПустаяСтрока(ТекстВыбор),"","," + Символы.ПС) + ИмяТаб + СтрокаРекв.ИмяРеквизита + " КАК " + СтрокаРекв.ИмяУзла;	
		Иначе	
			ТекстВыбор = ТекстВыбор + ? (ПустаяСтрока(ТекстВыбор),"","," + Символы.ПС) + "ТЧ." + СтрокаРекв.ИмяРеквизита + " КАК " + СтрокаРекв.ИмяУзла;	
		КонецЕсли;
	КонецЦикла;	
	
	Для Каждого СтрокаТЧ ИЗ СтруктураДанных.ТабличныеЧасти.НайтиСтроки(Новый Структура("Выгружать",Истина)) Цикл
		ТекстТЧ = "";
		СтруктураДанныхСтрокиТЧ = Новый Структура;
		Для Каждого СтрокаРекв ИЗ СтруктураДанных.РеквизитыТабличныхЧастей.НайтиСтроки(Новый Структура("ИмяТабличнойЧасти,Выгружать",СтрокаТЧ.ИмяТабличнойЧасти,Истина)) Цикл 
			ТекстТЧ = ТекстТЧ + ? (ПустаяСтрока(ТекстТЧ),"","," + Символы.ПС) + СтрокаРекв.ИмяРеквизита + " КАК " + СтрокаРекв.ИмяУзла ;		
			СтруктураДанныхСтрокиТЧ.Вставить(СтрокаРекв.ИмяУзла,СтрокаРекв.СоставнойТип);
		КонецЦикла;	
		Если СтрокаТЧ.ПолучитьИзДополнительныхДанных Тогда
			СоответствиеДопТЧ.Вставить(СтрокаТЧ.ИмяТабличнойЧасти,Новый Структура("ИмяУзла,СтруктураДанных",СтрокаТЧ.ИмяУзла,СтруктураДанныхСтрокиТЧ));
		Иначе	
			СтруктураДанныхЭлемента.Вставить(СтрокаТЧ.ИмяУзла,СтруктураДанныхСтрокиТЧ);
			СтруктураДанныхГруппы.Вставить(СтрокаТЧ.ИмяУзла  ,СтруктураДанныхСтрокиТЧ);
		КонецЕсли;	
		ТекстВыбор = ТекстВыбор + ? (ПустаяСтрока(ТекстВыбор),"","," + Символы.ПС) + "ТЧ." + СтрокаТЧ.ИмяТабличнойЧасти + ".(
		| " + ТекстТЧ + ")";
	КонецЦикла;	
	
	// Формирование запроса для выбора всех измененных данных с учетом "Правил обмена" //
	Запрос     = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	
	ТекстУсловие    = "ИСТИНА";
	ТекстСоединение = "";
	Если ТолькоИзмененные Тогда
		Если СтруктураДанных.ИмяТипа = "Справочник" Или СтруктураДанных.ИмяТипа = "Документ" Тогда
			ТекстУсловие = ?(ПустаяСтрока(СтруктураДанных.ИмяПоляУсловие),"Ссылка",СтруктураДанных.ИмяПоляУсловие) + " В (Выбрать ТЧ.Ссылка Из " + СтруктураДанных.ИмяТипа + "." + СтруктураДанных.ИмяТаблицы + ".Изменения Как ТЧ Где ТЧ.Узел = &Узел)" 
		ИначеЕсли СтруктураДанных.ИмяТипа = "РегистрСведений" Тогда 
			//ТекстОтбора = "";
			Если Мета.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
				ТекстОтбора = "ТЧ.Регистратор = ОсновнаяТаблица.Регистратор";		
			Иначе 	
				ТекстОтбора = "";
				Если Мета.ОсновнойОтборПоПериоду Тогда
					ТекстОтбора = "Период";	
					ТекстСоединение = "ТЧ.Период = ОсновнаяТаблица.Период";
				КонецЕсли;
				Для Каждого Измерение Из Мета.Измерения Цикл
					Если Измерение.ОсновнойОтбор Тогда
						ТекстОтбора     = ТекстОтбора + ?(ПустаяСтрока(ТекстОтбора),"",",") + Измерение.Имя;
						ТекстСоединение = ТекстСоединение + ?(ПустаяСтрока(ТекстСоединение),"",Символы.ПС + " И ") + "ТЧ." + Измерение.Имя + " = ОсновнаяТаблица." + Измерение.Имя;
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;
			ТекстУсловие = ?(ПустаяСтрока(СтруктураДанных.ИмяПоляУсловие),"(" + ТекстОтбора + ")",СтруктураДанных.ИмяПоляУсловие) + " В (Выбрать " + ТекстОтбора + " Из " + СтруктураДанных.ИмяТипа + "." + СтруктураДанных.ИмяТаблицы + ".Изменения Как ТЧ Где ТЧ.Узел = &Узел)" 
			//ТекстУсловие = "ТЧ.Узел = &Узел";
		КонецЕсли;	
	КонецЕсли;	
	
	Если СтруктураДанных.ПроизвольныйЗапрос Тогда
		Запрос.Текст = СтруктураДанных.ТекстЗапроса; 
		Если ТолькоИзмененные Тогда
			Если Найти(Запрос.Текст,"&ФильтрПоИзмененным") = 0 Тогда
				ВызватьИсключение "Невозможно выбрать измененные данные";
			КонецЕсли;	
			Запрос.УстановитьПараметр("Узел",УзелОбмена);
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ФильтрПоИзмененным",ТекстУсловие);
		Для Каждого СтрокаПарам Из СтруктураДанных.ЗначенияПараметров Цикл
			Запрос.УстановитьПараметр(СтрокаПарам.ИмяПараметра,СтрокаПарам.ЗначениеПараметра);			
		КонецЦикла;	
	Иначе 
		Если ТолькоИзмененные И СтруктураДанных.ИмяТипа = "РегистрСведений" Тогда
			Запрос.Текст = "ВЫБРАТЬ " + Символы.ПС + ТекстВыбор + "
			|	ИЗ " + СтруктураДанных.ИмяТипа + "." + СтруктураДанных.ИмяТаблицы + ".Изменения КАК ТЧ 
			|		ЛЕВОЕ СОЕДИНЕНИЕ " + СтруктураДанных.ИмяТипа + "." + СтруктураДанных.ИмяТаблицы + " КАК ОсновнаяТаблица 
			|	ПО
			|	" + ТекстСоединение + "
			|	ГДЕ 
			|	" + ТекстУсловие;
		Иначе	
			Запрос.Текст = "ВЫБРАТЬ " + Символы.ПС + ТекстВыбор + "
			|	ИЗ " + СтруктураДанных.ИмяТипа + "." + СтруктураДанных.ИмяТаблицы + " КАК ТЧ 
			|	ГДЕ 
			|	" + ТекстУсловие;
		КонецЕсли;
		Запрос.УстановитьПараметр("Узел",УзелОбмена);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Узел",УзелОбмена);
	
	Для Каждого СтрокаТЧ Из СтруктураДанных.ФильтрыОтбора Цикл
		мФильтр      = СтрокаТЧ.Фильтр;
		ИмяФильтра   = "&" + мФильтр.Наименование;
		
		Если СтрокаТЧ.Использование Тогда
			ТекстФильтра = мФильтр.ТекстФильтра;
		Иначе
			ТекстФильтра = "ИСТИНА";
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(СтрокаТЧ.ИмяПоляФильтра) Тогда
			ТекстФильтра = СтрЗаменить(ТекстФильтра,"ТЧ",СтрокаТЧ.ИмяПоляФильтра);
			Если СтруктураДанных.ПроизвольныйЗапрос Тогда
				Если Найти(Запрос.Текст,ИмяФильтра) > 0 Тогда
					Запрос.Текст = СтрЗаменить(Запрос.Текст,ИмяФильтра,ТекстФильтра);
				Иначе
					Сообщить("" + СтруктураДанных.Наименование + ":" + " в запросе не найден фильтр " + ИмяФильтра);
				КонецЕсли;
			Иначе
				Если ТолькоИзмененные Тогда
					Если СтруктураДанных.ИмяТипа = "РегистрСведений" Тогда
						Запрос.Текст = СтрЗаменить(Запрос.Текст,ТекстВыбор,ТекстВыбор + "," + Символы.ПС + "НЕ (" + ТекстФильтра + ")  КАК DeletionMark");
					Иначе	
						Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТЧ.ПометкаУдаления КАК DeletionMark","ТЧ.ПометкаУдаления ИЛИ НЕ (" + ТекстФильтра + ")  КАК DeletionMark");
					КонецЕсли;	
				Иначе 
					Запрос.Текст = Запрос.Текст + Символы.ПС + " И " + ТекстФильтра;
				КонецЕсли;					
			КонецЕсли;		
		КонецЕсли;
		
		мТекстВременнойТаблицы = мФильтр.ТекстВременнойТаблицы;
		
		Если Не ПустаяСтрока(мТекстВременнойТаблицы) Тогда
			ИмяВременнойТаблицы    = "//" + мФильтр.Наименование + "//";
			Если Найти(Запрос.Текст,ИмяВременнойТаблицы) > 0 Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст,ИмяВременнойТаблицы,мТекстВременнойТаблицы);
			Иначе
				Запрос.Текст = мТекстВременнойТаблицы + Символы.ПС + Запрос.Текст;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат Запрос;
	
КонецФункции	

Процедура ЗарегистрироватьИзмененияПоСтруктуреДанных (СтруктураДанных, УзелОбмена) Экспорт
	Запрос        = СформироватьЗапросСОтборами(СтруктураДанных,УзелОбмена, ЛОЖЬ);
	
	Попытка
		РЗ = Запрос.ВыполнитьПакет();
	Исключение
		Инфо = ИнформацияОбОшибке();
		ТекстПредставления = СтруктураДанных.Наименование + ":" + ПодробноеПредставлениеОшибки(Инфо);
		ВызватьИсключение ТекстПредставления;
	КонецПопытки;
	
	// Разделяем основную таблицу выгрузки и дополнительные таб. части //	
	ИскомыеСтрокиТЗ = СтруктураДанных.ТабличныеЧасти.НайтиСтроки(Новый Структура("Выгружать,ПолучитьИзДополнительныхДанных",Истина,Истина));
	МассивРезультатов = Новый Массив;
	Для Каждого Эл Из РЗ Цикл
		МассивРезультатов.Добавить(Эл.Выгрузить());
	КонецЦикла;	
	Рез = МассивРезультатов[МассивРезультатов.ВГраница() - ИскомыеСтрокиТЗ.Количество()];
	
	СЧВыгруженных = 0;
	
	Если СтруктураДанных.ИмяТипа = "РегистрСведений" Тогда
		Мета        = Метаданные.РегистрыСведений[СтруктураДанных.ИмяТаблицы];
		ТекстОтбора = "";
		
		Если Мета.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
			ТекстОтбора = "Регистратор";			
		Иначе	
			Если Мета.ОсновнойОтборПоПериоду Тогда
				ТекстОтбора = "Period";			
			КонецЕсли;
			Для Каждого Измерение Из Мета.Измерения Цикл
				Если Измерение.ОсновнойОтбор Тогда
					ТекстОтбора = ТекстОтбора + ?(ПустаяСтрока(ТекстОтбора),"",",") + Измерение.Имя;
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;	
		
		// byse {
		Если Рез.Колонки.Найти("DeletionMark") <> Неопределено Тогда 
			Рез = Рез.Скопировать(Новый Структура("DeletionMark",ЛОЖЬ));
		КонецЕсли;	
		// byse }
		
		ТЗФильтры = Рез.Скопировать(,ТекстОтбора);
		ТЗФильтры.Свернуть(ТекстОтбора);
		
		СтруктураФильтра = Новый Структура;
		СтруктураПоиска  = Новый Структура;
		Для Каждого Колонка Из ТЗФильтры.Колонки Цикл
			СтруктураФильтра.Вставить(Колонка.Имя,(Колонка.ТипЗначения.Типы().Количество() > 2));
			СтруктураПоиска.Вставить(Колонка.Имя);
			Рез.Индексы.Добавить(Колонка.Имя);
		КонецЦикла;	
		
		Для Каждого СтрокаФильтр Из ТЗФильтры Цикл
			СЧВыгруженных = СЧВыгруженных + 1;
			#ЕСЛИ КЛИЕНТ ТОГДА
				Если СЧВыгруженных % 100 = 0 Тогда
					Состояние("Выгружаю: " + СтруктураДанных.Наименование + " : " + СЧВыгруженных);
				КонецЕсли;	
			#КОНЕЦЕСЛИ				
			Набор = РегистрыСведений[СтруктураДанных.ИмяТаблицы].СоздатьНаборЗаписей();
			ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаФильтр);
			Для Каждого Эл ИЗ СтруктураПоиска Цикл
				Набор.Отбор[Эл.Ключ].Установить(Эл.Значение);
			КонецЦикла;
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена,Набор);
		КонецЦикла;	
	Иначе	
		Для Каждого СтрокаТЧ Из Рез.НайтиСтроки(Новый Структура("DeletionMark",ЛОЖЬ)) Цикл
			СЧВыгруженных = СЧВыгруженных + 1;
			#ЕСЛИ КЛИЕНТ ТОГДА
				Если СЧВыгруженных % 100 = 0 Тогда
					Состояние("Выгружаю: " + СтруктураДанных.Наименование + " : " + СЧВыгруженных);
				КонецЕсли;	
			#КОНЕЦЕСЛИ				
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена,СтрокаТЧ.ref);
		КонецЦикла;
	КонецЕсли;	
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Зарегистрировано " + СЧВыгруженных + " изменений " + СтруктураДанных + " для узла " + УзелОбмена);
КонецПроцедуры	

#ОБЛАСТЬ ПРОИЗВОЛЬНЫЕЗАПРОСЫ 

Функция ПолучитьЗапросСПараметрами (СтруктураДанных,Параметры) Экспорт
	Запрос       = Новый Запрос;
	Запрос.Текст = СтруктураДанных.ТекстЗапроса;
	Для Каждого Парам Из Параметры Цикл
		Запрос.УстановитьПараметр(Парам.Ключ,Парам.Значение);
	КонецЦикла;
	Возврат Запрос;
КонецФункции	

#КОНЕЦОБЛАСТИ