#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция ШаблонИспользуетсяВДокументах(Знач Шаблон, Знач ДокументИсключение = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Шаблон) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументИсключение) Тогда
		ДокументИсключение = Документы.УстановкаЗначенийНефинансовыхПоказателей.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	ДокументУстановкаЗначений.Ссылка
	                      |ИЗ
	                      |	Документ.УстановкаЗначенийНефинансовыхПоказателей КАК ДокументУстановкаЗначений
	                      |ГДЕ
	                      |	ДокументУстановкаЗначений.ШаблонВвода = &ШаблонВвода
	                      |	И НЕ ДокументУстановкаЗначений.Ссылка = &Исключение");
	
	Запрос.УстановитьПараметр("ШаблонВвода", Шаблон);
	Запрос.УстановитьПараметр("Исключение", ДокументИсключение);
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

#Область Обработчики_2_4_2

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПустыеЗначенияДляОбработки = БюджетированиеВызовСервера.ЗаменяемыеПустыеЗначенияАналитики();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ШаблоныВводаНефинансовыхПоказателей.ЗначенияСложнойТаблицыПоУмолчанию КАК Таблица
		|ГДЕ
		|	Таблица.Значение В(&ПустыеЗначенияДляОбработки)
		|	И Таблица.Аналитика <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.АналитикиСтатейБюджетов.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ПустыеЗначенияДляОбработки", ПустыеЗначенияДляОбработки);
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяМетаданных = "Справочник.ШаблоныВводаНефинансовыхПоказателей";
	МетаданныеОбъекта = Метаданные.Справочники.ШаблоныВводаНефинансовыхПоказателей;
	
	ПустыеЗначенияДляОбработки = БюджетированиеВызовСервера.ЗаменяемыеПустыеЗначенияАналитики();
	ЗначениеЗамены = БюджетированиеКлиентСервер.ПустоеЗначениеАналитики();
	
	
	ЗапросПоТипамАналитик = Новый Запрос;
	ЗапросПоТипамАналитик.Текст =
	"ВЫБРАТЬ
		|	АналитикиСтатейБюджетов.Ссылка КАК Ссылка,
		|	АналитикиСтатейБюджетов.ТипЗначения КАК ТипЗначения
		|ИЗ
		|	ПланВидовХарактеристик.АналитикиСтатейБюджетов КАК АналитикиСтатейБюджетов";
	
	ТипыАналитик = Новый Соответствие;
	ВыборкаТиповАналитик = ЗапросПоТипамАналитик.Выполнить().Выбрать();
	Пока ВыборкаТиповАналитик.Следующий() Цикл
		ТипыАналитик.Вставить(ВыборкаТиповАналитик.Ссылка, ВыборкаТиповАналитик.ТипЗначения);
	КонецЦикла;
	
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(
		Параметры.Очередь, ПолноеИмяМетаданных, МенеджерВременныхТаблиц);
		
	Параметры.ОбработкаЗавершена = НЕ Результат.ЕстьДанныеДляОбработки;
	Если Параметры.ОбработкаЗавершена Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбъектыДляОбработки.Ссылка                      КАК Ссылка
		|ИЗ
		|	ВТОбъектыДляОбработки КАК ОбъектыДляОбработки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТОбъектыДляОбработки", Результат.ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяМетаданных);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если НЕ Объект = Неопределено Тогда
				Объект.Заблокировать();
				
				ОбъектИзменен = Ложь;
				
				Объект.ОбменДанными.Загрузка = Истина;
				Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
				
				ОбъектИзменен = Ложь;
				
				Для каждого СтрокаТабличнойЧасти Из Объект.ЗначенияСложнойТаблицыПоУмолчанию Цикл
					
					Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Аналитика) Тогда
						ТипАналитики = ТипыАналитик.Получить(СтрокаТабличнойЧасти.Аналитика);
						Значение = БюджетированиеКлиентСервер.ПриведенноеЗначениеАналитики(
						СтрокаТабличнойЧасти.Значение, ТипАналитики);
						Если СтрокаТабличнойЧасти.Значение <> Значение Тогда
							СтрокаТабличнойЧасти.Значение = Значение;
							ОбъектИзменен = Истина;
						КонецЕсли;
					КонецЕсли;
				
				КонецЦикла;
				
				Если ОбъектИзменен Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				КонецЕсли;
				
			Иначе
				
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
			Продолжить;
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяМетаданных);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли