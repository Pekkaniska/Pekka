
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЭтоГруппа ИЛИ
	|	ЗначениеРазрешено(Владелец)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

// Регистрирует данные для обработчика обновления
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	
	Данные = ДанныеКОбработкеДляПереходаНаНовуюВерсию();
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Данные, ДополнительныеПараметры);
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ИнициализироватьПараметрыОбработкиДляПереходаНаНовуюВерсию(Параметры);
	
	МетаданныеОбъекта = Метаданные.Справочники.НоменклатураПоставщиков;
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	ПараметрыОтметкиВыполнения = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ОбработанныхОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	ПараметрыВыборки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта, ПараметрыВыборки);
	
	НаборСсылок = Новый Массив;
	Пока Выборка.Следующий() Цикл
		НаборСсылок.Добавить(Выборка.Ссылка);
	КонецЦикла;
	РеквизитыОбъектов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		НаборСсылок, "Владелец,Идентификатор,Наименование,Артикул,Номенклатура,Характеристика,Упаковка");
	
	Для каждого СсылкаНаОбъект Из НаборСсылок Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СсылкаНаОбъект);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			Блокировка.Заблокировать();
			
			ОбработатьДанные_ПеренестиНоменклатуруКонтрагентов(СсылкаНаОбъект, РеквизитыОбъектов[СсылкаНаОбъект]);
			
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(СсылкаНаОбъект, ПараметрыОтметкиВыполнения);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ШаблонСообщения = НСтр("ru = 'Не удалось обработать номенклатуру поставщика: %1 по причине:'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СсылкаНаОбъект) + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеОбъекта, СсылкаНаОбъект, ТекстСообщения);
				
			Продолжить;
		КонецПопытки;
			
		ОбработанныхОбъектов = ОбработанныхОбъектов + 1;
		
	КонецЦикла;
	
	Если ОбработанныхОбъектов = 0 И ПроблемныхОбъектов <> 0 Тогда
		ШаблонСообщения = НСтр("ru = 'Не удалось обработать некоторую номенклатуру поставщиков (пропущены): %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ШаблонСообщения = НСтр("ru = 'Обработана очередная порция номенклатуры поставщиков: %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбработанныхОбъектов);
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			МетаданныеОбъекта,, ТекстСообщения);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов  = Параметры.ПрогрессВыполнения.ОбработаноОбъектов  + ОбработанныхОбъектов;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
		Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Параметры.Отбор.Свойство("Номенклатура") Тогда
		Номенклатура = Параметры.Отбор.Номенклатура;
		Параметры.Отбор.Удалить("Номенклатура");
	КонецЕсли;
	
	Если Параметры.Отбор.Свойство("Характеристика") Тогда
		Характеристика = Параметры.Отбор.Характеристика;
		Параметры.Отбор.Удалить("Характеристика");
	КонецЕсли;
	
	Если Параметры.Отбор.Свойство("Упаковка") Тогда
		Упаковка = Параметры.Отбор.Упаковка;
		Параметры.Отбор.Удалить("Упаковка");
	КонецЕсли;
	
	Если Параметры.Отбор.Свойство("Владелец") Тогда
		Владелец = Параметры.Отбор.Владелец;
	КонецЕсли;
	
	Если Параметры.Отбор.Свойство("ТипНоменклатуры") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТипНоменклатуры = Параметры.Отбор.ТипНоменклатуры;
		СтрокаПоиска = СокрЛП(Параметры.СтрокаПоиска);
		
		Запрос = Новый Запрос;
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НоменклатураПоставщиков.Ссылка
		|ИЗ
		|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|ГДЕ
		|	НЕ НоменклатураПоставщиков.ПометкаУдаления
		|	И НоменклатураПоставщиков.Номенклатура.ТипНоменклатуры В(&ТипНоменклатуры)
		|	И (НоменклатураПоставщиков.Артикул ПОДОБНО &СтрокаПоиска
		|		ИЛИ НоменклатураПоставщиков.Код ПОДОБНО &СтрокаПоиска
		|		ИЛИ НоменклатураПоставщиков.Наименование ПОДОБНО &СтрокаПоиска)
		|	//%ПрочиеУсловия";
		
		Запрос.УстановитьПараметр("ТипНоменклатуры", ТипНоменклатуры);
		Запрос.УстановитьПараметр("СтрокаПоиска", ?(СтрокаПоиска = Неопределено, "", СтрокаПоиска) + "%");
		
		ПрочиеУсловия = "";
		ЧастьУсловия = " И НоменклатураПоставщиков.%Параметр = &%Параметр";
		Если ЗначениеЗаполнено(Владелец) Тогда
			Запрос.УстановитьПараметр("Владелец", Владелец);
			ПрочиеУсловия = ПрочиеУсловия + СтрЗаменить(ЧастьУсловия, "%Параметр", "Владелец");
		КонецЕсли;
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
			ПрочиеУсловия = ПрочиеУсловия + СтрЗаменить(ЧастьУсловия, "%Параметр", "Номенклатура");
		КонецЕсли;
		Если ЗначениеЗаполнено(Характеристика) Тогда
			Запрос.УстановитьПараметр("Характеристика", Характеристика);
			ПрочиеУсловия = ПрочиеУсловия + СтрЗаменить(ЧастьУсловия, "%Параметр", "Характеристика");
		КонецЕсли;
		Если ЗначениеЗаполнено(Упаковка) Тогда
			Запрос.УстановитьПараметр("Упаковка", Упаковка);
			ПрочиеУсловия = ПрочиеУсловия + СтрЗаменить(ЧастьУсловия, "%Параметр", "Упаковка");
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(ТекстЗапроса,"//%ПрочиеУсловия", ПрочиеУсловия);
		
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// ЭлектронноеВзаимодействие.РаботаСНоменклатурой

Функция ДанныеКОбработкеДляПереходаНаНовуюВерсию() 
	
	Результат = ДанныеКОбработке_ПеренестиНоменклатуруКонтрагентов();
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеКОбработке_ПеренестиНоменклатуруКонтрагентов() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НоменклатураПоставщиков.Владелец КАК Владелец,
	|	НоменклатураПоставщиков.Идентификатор КАК Идентификатор,
	|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура,
	|	НоменклатураПоставщиков.Характеристика КАК Характеристика,
	|	НоменклатураПоставщиков.Упаковка КАК Упаковка
	|ИЗ
	|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|ГДЕ
	|	НоменклатураПоставщиков.Идентификатор <> """"
	|	И НоменклатураПоставщиков.Владелец <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)";
	
	ТаблицаОтбора = Запрос.Выполнить().Выгрузить();
	МенеджерТаблиц = Новый МенеджерВременныхТаблиц;
	
	ОбменСКонтрагентами.СоздатьВременнуюТаблицуСоответствияНоменклатуры(ТаблицаОтбора, "втНоменклатураКонтрагентов", МенеджерТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НоменклатураПоставщиков.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНоменклатураКонтрагентов КАК втНоменклатураКонтрагентов
	|		ПО НоменклатураПоставщиков.Владелец = втНоменклатураКонтрагентов.Владелец
	|			И НоменклатураПоставщиков.Идентификатор = втНоменклатураКонтрагентов.Идентификатор
	|ГДЕ
	|	втНоменклатураКонтрагентов.Идентификатор ЕСТЬ NULL
	|	И НоменклатураПоставщиков.Идентификатор <> """"
	|	И НоменклатураПоставщиков.Владелец <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Процедура ИнициализироватьПараметрыОбработкиДляПереходаНаНовуюВерсию(Параметры)
	
	// Определим общее количество объектов к обработке.
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		ПараметрыВыборки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
		ПараметрыВыборки.ВыбиратьПорциями = Ложь;
		Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, "Справочник.НоменклатураПоставщиков", ПараметрыВыборки);
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьДанные_ПеренестиНоменклатуруКонтрагентов(СсылкаНаОбъект, Реквизиты)
	
	Если Не (ЗначениеЗаполнено(Реквизиты.Владелец) И ЗначениеЗаполнено(Реквизиты.Идентификатор)) Тогда
		Возврат;
	КонецЕсли;
	
	Набор = РегистрыСведений.НоменклатураКонтрагентовБЭД.СоздатьНаборЗаписей();
	Набор.Отбор.Владелец.Установить(Реквизиты.Владелец);
	Набор.Отбор.Идентификатор.Установить(Реквизиты.Идентификатор);
	
	Набор.Прочитать();
	Если ЗначениеЗаполнено(Набор) Тогда
		Возврат;
	КонецЕсли;
	
	Запись = Набор.Добавить();
	Запись.Владелец = Реквизиты.Владелец;
	Запись.Идентификатор = Реквизиты.Идентификатор;
	Запись.Наименование = Реквизиты.Наименование;
	Запись.Артикул = Реквизиты.Артикул;
	Запись.Номенклатура = Реквизиты.Номенклатура;
	Запись.Характеристика = Реквизиты.Характеристика;
	Запись.Упаковка = Реквизиты.Упаковка;
	
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой

#КонецОбласти

#КонецЕсли
