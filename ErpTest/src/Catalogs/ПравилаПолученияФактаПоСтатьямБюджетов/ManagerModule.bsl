#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

//++ НЕ УТКА

// Запускает фоновое задание для регистрации документов к отражению факта
// 
// Параметры:
// 	Ссылка - СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджета - Правило получения факта. 
// 	НачалоПериода - Дата - Начало периода.
// 	КонецПериода - Дата - Окончание периода.
// 	РеквизитыСравнения - Структура - ДействуетС, ДействуетПо ПравилПолученияФакта до записи.
//
Процедура ЗапуститьРегистрациюДокументовДляОтраженияФоном(Ссылка,НачалоПериода,КонецПериода,РеквизитыСравнения=Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(РеквизитыСравнения) И РеквизитыСравнения.Свойство("ДействуетС") Тогда
		Если РеквизитыСравнения.ДействуетС <> НачалоПериода Тогда
			НачалоПериода = Мин(НачалоПериода, РеквизитыСравнения.ДействуетС);
		КонецЕсли;
		
		Если РеквизитыСравнения.ДействуетПо <> КонецПериода Тогда
			КонецПериода = Макс(КонецПериода, РеквизитыСравнения.ДействуетПо);
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеПравила = Ссылка.ПолучитьОбъект(); 
	ВидыДокументов = ФактическиеДанныеБюджетированияСервер.ОпределитьИменаВидовДокументовПоСКД(ОписаниеПравила).ВыгрузитьКолонку("ИмяВидаДокумента");
	
	Ключ = "РегистрацияДокументовДляОтраженияФакта" + Строка(Ссылка.УникальныйИдентификатор());
	
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", Ключ);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Если АктивныеЗадания.Количество() > 0 Тогда
		Для Каждого АктивноеЗадание Из АктивныеЗадания Цикл
			АктивноеЗадание.Отменить();
		КонецЦикла;
	КонецЕсли;
	
	НаименованиеЗадания = НСтр("ru = 'Выполняется регистрация документов для отражения факта'");
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив();
	ПараметрыЭкспортнойПроцедуры.Добавить(ВидыДокументов);
	ПараметрыЭкспортнойПроцедуры.Добавить(Ссылка);
	ПараметрыЭкспортнойПроцедуры.Добавить(НачалоПериода);
	ПараметрыЭкспортнойПроцедуры.Добавить(КонецПериода);
	
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить("Справочники.ПравилаПолученияФактаПоСтатьямБюджетов.ЗарегистрироватьДокументыДляОтражения");
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	ФоновоеЗадание = ФоновыеЗадания.Выполнить("ОбщегоНазначения.ВыполнитьМетодКонфигурации", ПараметрыЗадания, Ключ, НаименованиеЗадания);
	
КонецПроцедуры

// Процедура регистрирует документы к отражению факта.
// 
// Параметры:
//	ВидыДокументов - Массив - Массив имен видов документов из метаданных.
//	Ссылка - СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов - Правило получения факта.
//	НачалоПериода - Дата - Необязательный. Начало периода.
//  КонецПериода - Дата - Необязательный. Окончание периода.
//
Процедура ЗарегистрироватьДокументыДляОтражения(ВидыДокументов, Ссылка, НачалоПериода = Неопределено, КонецПериода = Неопределено) Экспорт
	
	СброситьКэшБюджетов(Ссылка);
	
	Если ВидыДокументов.Количество() = 1 И ВидыДокументов[0] = "" Тогда
		ВидыДокументов = Новый Массив;
		Для Каждого Документ Из Метаданные.Документы Цикл
			ВидыДокументов.Добавить(Документ.Имя);
		КонецЦикла;
	КонецЕсли;
	
	Разделитель = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Документ,
		|	Таблица.Дата КАК ПериодЗаписи,
		|	&ТекстВидДокумента КАК ИмяВидаДокумента
		|ИЗ
		|	&Таблица КАК Таблица
		|ГДЕ
		|	&ТекстУсловия";
	
	ТекстыЗапроса = Новый Массив;
	Для каждого ВидДокумента Из ВидыДокументов Цикл
		
		ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&Таблица", "Документ." + ВидДокумента);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВидДокумента", """" + ВидДокумента + """");
		
		Если Метаданные.Документы[ВидДокумента].Проведение = 
				Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
			ТекстУсловия = "Таблица.Проведен";
		Иначе
			ТекстУсловия = "НЕ Таблица.ПометкаУдаления";
		КонецЕсли;
		Если ЗначениеЗаполнено(НачалоПериода) И ЗначениеЗаполнено(КонецПериода) Тогда
			ТекстУсловия = ТекстУсловия + Символы.ПС + "И Таблица.Дата МЕЖДУ &НачалоПериода И &КонецПериода";
		ИначеЕсли ЗначениеЗаполнено(НачалоПериода) Тогда
			ТекстУсловия = ТекстУсловия + Символы.ПС + "И Таблица.Дата >= &НачалоПериода";
		ИначеЕсли ЗначениеЗаполнено(КонецПериода) Тогда
			ТекстУсловия = ТекстУсловия + Символы.ПС + "И Таблица.Дата <= &КонецПериода";
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстУсловия", ТекстУсловия);
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
	КонецЦикла;
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, Разделитель);
	ТекстЗапроса = СхемыЗапросов.УстановитьПомещениеВоВременнуюТаблицу(ТекстЗапроса, "ТаблицаДокументов");
	
	НачатьТранзакцию();
	
	Попытка
	
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Константа.НомерЗаданияКОтражениюВБюджетировании");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		ТекстЗапроса = ТекстЗапроса + ";
		| ВЫБРАТЬ * ИЗ ТаблицаДокументов";
		
		Ключ = "ОтражениеДокументовВБюджетировании";
		
		Отбор = Новый Структура();
		Отбор.Вставить("Ключ", Ключ);
		Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
		
		АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		Если АктивныеЗадания.Количество() = 0 Тогда
			ТекстЗапроса = ТекстЗапроса + "
			| ГДЕ НЕ Документ В (ВЫБРАТЬ РАЗЛИЧНЫЕ Документ ИЗ РегистрСведений.ЗаданияКОтражениюВБюджетировании)";
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
		
		ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
		
		ТекущийНомерЗадания = Константы.НомерЗаданияКОтражениюВБюджетировании.Получить();
		
		НомерЗадания = Константы.НомерЗаданияКОтражениюВБюджетировании.Получить();
		НомерЗадания = НомерЗадания + 1;
		Константы.НомерЗаданияКОтражениюВБюджетировании.Установить(НомерЗадания + 1);
	
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru= 'Регистрация документов для отражения факта'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
			
	Для Каждого Стр Из ТаблицаДокументов Цикл
		НаборЗаписей = РегистрыСведений.ЗаданияКОтражениюВБюджетировании.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.НомерЗадания.Установить(НомерЗадания);
		НаборЗаписей.Отбор.Документ.Установить(Стр.Документ);
		
		НачатьТранзакцию();
		
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить();
			ЭлементБлокировки.Область = "РегистрСведений.ЗаданияКОтражениюВБюджетировании";
			ЭлементБлокировки.УстановитьЗначение("НомерЗадания",	НомерЗадания);
			ЭлементБлокировки.УстановитьЗначение("Документ",		Стр.Документ);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			ЗаписьОтражения = НаборЗаписей.Добавить();
			ЗаписьОтражения.НомерЗадания = НомерЗадания;
			ЗаполнитьЗначенияСвойств(ЗаписьОтражения,Стр);
			НаборЗаписей.Записать(Истина);
		
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(
				НСтр("ru= 'Регистрация документов для отражения факта'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	//++ НЕ УТ
	Отчеты.РезультатРаботыПравилПолученияФактическихДанных.ДобавитьКомандуОтчетаПоСтатьеБюджетов(КомандыОтчетов);
	//-- НЕ УТ
	
	Возврат; // Не используется в УТ.
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПустыеЗначенияДляОбработки = БюджетированиеВызовСервера.ЗаменяемыеПустыеЗначенияАналитики();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПравилаПолученияФактаПоСтатьямБюджетов КАК Таблица
		|ГДЕ
		|	(Таблица.ЗначениеАналитики1 В (&ПустыеЗначенияДляОбработки)
		|			ИЛИ Таблица.ЗначениеАналитики2 В (&ПустыеЗначенияДляОбработки)
		|			ИЛИ Таблица.ЗначениеАналитики3 В (&ПустыеЗначенияДляОбработки)
		|			ИЛИ Таблица.ЗначениеАналитики4 В (&ПустыеЗначенияДляОбработки)
		|			ИЛИ Таблица.ЗначениеАналитики5 В (&ПустыеЗначенияДляОбработки)
		|			ИЛИ Таблица.ЗначениеАналитики6 В (&ПустыеЗначенияДляОбработки)
		|			ИЛИ НЕ Таблица.УдалитьХешиПересчитаны_2_4_3)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПравилаПолученияФактаПоСтатьямБюджетов КАК Таблица
		|ГДЕ
		|	Таблица.РазделИсточникаДанных <> ЗНАЧЕНИЕ(Перечисление.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные)
		|	И Таблица.ХешСхемыКомпоновкиДанных <> """"";
	
	Запрос.УстановитьПараметр("ПустыеЗначенияДляОбработки", ПустыеЗначенияДляОбработки);
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеСправочника = Метаданные.Справочники.ПравилаРаспределенияРасходов;
	ПолноеИмяОбъекта = "Справочник.ПравилаПолученияФактаПоСтатьямБюджетов";
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
	ПустыеЗначенияДляОбработки = БюджетированиеВызовСервера.ЗаменяемыеПустыеЗначенияАналитики();
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	ЗначениеЗамены = БюджетированиеКлиентСервер.ПустоеЗначениеАналитики();
	
	РеквизитыПоиска = Новый Массив;
	Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
		РеквизитыПоиска.Добавить("ЗначениеАналитики" + Сч);
	КонецЦикла;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
		
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Если СправочникОбъект = Неопределено Тогда
				
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				
			Иначе
				
				ОбъектИзменен = Ложь;
				
				Если НЕ СправочникОбъект.УдалитьХешиПересчитаны_2_4_1
					ИЛИ (ЗначениеЗаполнено(СправочникОбъект.ХешСхемыКомпоновкиДанных)
					   И СправочникОбъект.РазделИсточникаДанных <> Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные) Тогда
					
					// Сделаем слепок настроек и схемы для будущего сравнения их между собой без анализа каждого элемента.
					БюджетированиеСервер.ЗаполнитьРеквизитыХешейНастроекИСхемы(СправочникОбъект);
					СправочникОбъект.УдалитьХешиПересчитаны_2_4_3 = Истина;
					ОбъектИзменен = Истина;
				КонецЕсли;
				
				БюджетированиеВызовСервера.ВыполнитьЗаменыЗначенийВОбъекте(СправочникОбъект,
					                                                       РеквизитыПоиска,
					                                                       ПустыеЗначенияДляОбработки,
					                                                       ЗначениеЗамены,
					                                                       ОбъектИзменен);
				
				Если ОбъектИзменен Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект, Истина);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				КонецЕсли;
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			КодЯзыка       = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось записать справочник: %1 по причине: %2'", КодЯзыка),
				Выборка.Ссылка);
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеСправочника,
				Выборка.Ссылка,
				ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

//++ НЕ УТКА
#Область СлужебныеПроцедурыИФункции
	
// Очищает вспомогательный кэш видов бюджетов
// 
// Параметры
//   Ссылка - СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов.
//
Процедура СброситьКэшБюджетов(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Ссылка
		|ПОМЕСТИТЬ ЭлементыФинансовойОтчетности
		|ИЗ
		|	Справочник.ЭлементыФинансовыхОтчетов.РеквизитыВидаЭлемента КАК ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента
		|ГДЕ
		|	ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Реквизит = &Реквизит
		|	И ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Значение = &Значение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Справочник.Владелец КАК Ссылка
		|ИЗ
		|	ЭлементыФинансовойОтчетности КАК ЭлементыФинансовойОтчетности
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭлементыФинансовыхОтчетов КАК Справочник
		|		ПО ЭлементыФинансовойОтчетности.Ссылка = Справочник.Ссылка";
		
	РеквизитыСравнения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "СтатьяБюджетов");

	Запрос.УстановитьПараметр("Значение", РеквизитыСравнения.СтатьяБюджетов);
	Запрос.УстановитьПараметр("Реквизит", ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.СтатьяБюджетов);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.КэшВспомогательныхДанныхВидаБюджета.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидБюджета.Установить(ВыборкаДетальныеЗаписи.Ссылка);
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 
//-- НЕ УТКА

#КонецЕсли
