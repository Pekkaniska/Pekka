#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП
//
// Возвращаемое значение:
//	Массив - имена блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	Результат = Новый Массив;
	Результат.Добавить("НазначениеПравила");
	Результат.Добавить("НаправлениеРаспределения");
	Результат.Добавить("БазаРаспределения");
	Возврат Результат;
КонецФункции

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		
		НаПартии = ПредопределенноеЗначение("Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеСтатейРасходовПоЭтапамПроизводства");
		ПоПодразделениям = ПредопределенноеЗначение("Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеСтатейРасходовПоПодразделениям");
		
		Ключ = Неопределено;
		Если Параметры.Свойство("Ключ", Ключ) Тогда
			
			ЗначенияРеквизитов = ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъекта(Ключ, "НазначениеПравила, Устаревшее");
			
			Если ЗначенияРеквизитов.НазначениеПравила = НаПартии
				И Не ЗначенияРеквизитов.Устаревшее Тогда
				
				СтандартнаяОбработка = Ложь;
				ВыбраннаяФорма = "ФормаНастроек";
				
				Возврат;
				
			КонецЕсли;
			
			Если ЗначенияРеквизитов.НазначениеПравила = ПоПодразделениям
				И Не ЗначенияРеквизитов.Устаревшее Тогда
				
				СтандартнаяОбработка = Ложь;
				ВыбраннаяФорма = "ФормаПоказателя";
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если (Параметры.Свойство("ЗначенияЗаполнения")
			И Параметры.ЗначенияЗаполнения.Свойство("НазначениеПравила")
			И Параметры.ЗначенияЗаполнения.НазначениеПравила = НаПартии)
			Или (Параметры.Свойство("ЗначениеКопирования")
			И Параметры.ЗначениеКопирования.НазначениеПравила = НаПартии) Тогда
			
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "ФормаНастроек";
			
		КонецЕсли;
		
		Если (Параметры.Свойство("ЗначенияЗаполнения")
			И Параметры.ЗначенияЗаполнения.Свойство("НазначениеПравила")
			И Параметры.ЗначенияЗаполнения.НазначениеПравила = ПоПодразделениям)
			Или (Параметры.Свойство("ЗначениеКопирования")
			И Параметры.ЗначениеКопирования.НазначениеПравила = ПоПодразделениям) Тогда
			
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "ФормаПоказателя";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область Прочее

Функция ПредставлениеОтобранныхПозиций(ОтобранныеПозиции, ПараметрыПредметаИсчисления = Неопределено) Экспорт

	Если ОтобранныеПозиции.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Если ОтобранныеПозиции.Количество() = 1 Тогда
		Возврат СокрЛП(ОтобранныеПозиции[0]);
	КонецЕсли;
	
	Если ПараметрыПредметаИсчисления = Неопределено Тогда
		ПредметИсчисления = "позиция, позиции, позиций";
	Иначе
		ПредметИсчисления = ПараметрыПредметаИсчисления;
	КонецЕсли;
	
	КоличествоПозиций = ОтобранныеПозиции.Количество() - 1;
	ДляСклонения = ЧислоПрописью(КоличествоПозиций, "Л = ru_RU;", ПредметИсчисления);
	
	НачалоПредмета = СтрНайти(ДляСклонения, Лев(ПредметИсчисления, 3));
	СклоненныйПредмет = Сред(ДляСклонения, НачалоПредмета, СтрНайти(ДляСклонения, " ",, НачалоПредмета) - НачалоПредмета);
	
	Представление = НСтр("ru = '%1 и еще %2 %3'");
	
	Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Представление, 
		СокрЛП(ОтобранныеПозиции[0]), КоличествоПозиций, 
		СклоненныйПредмет);
		
	Возврат Представление;
	
КонецФункции

Функция ПолучитьПредставлениеПравила(Материалы, ВидыРабот, Продукция, БазаРаспределения) Экспорт
	
	Если ТипЗнч(Материалы) = Тип("Массив") Тогда
		
		ПредставлениеОтобранныхПозиций = ПредставлениеОтобранныхПозиций(Материалы);
		ПредставлениеОтобранныхПозиций = ПредставлениеОтобранныхПозиций 
			+ ПредставлениеОтобранныхПозиций(ВидыРабот);
		ПредставлениеОтобранныхПозиций = ПредставлениеОтобранныхПозиций 
			+ ПредставлениеОтобранныхПозиций(Продукция);
		
	Иначе	
			
		ПредставлениеОтобранныхПозиций = ПредставлениеОтобранныхПозиций(Материалы.ВыгрузитьКолонку("Материал"));
		ПредставлениеОтобранныхПозиций = ПредставлениеОтобранныхПозиций 
			+ ПредставлениеОтобранныхПозиций(ВидыРабот.ВыгрузитьКолонку("ВидРабот"));
		ПредставлениеОтобранныхПозиций = ПредставлениеОтобранныхПозиций 
			+ ПредставлениеОтобранныхПозиций(Продукция.ВыгрузитьКолонку("Продукция"));
			
	КонецЕсли;
		
	ПредставлениеПравила = "";
	Если БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.КоличествоРаботУказанныхВидов Тогда
		ПредставлениеПравила = НСтр("ru='Количество работ:'");
	ИначеЕсли БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.НормативыОплатыТруда Тогда
		ПредставлениеПравила = НСтр("ru='Нормативная стоимость работ:'");
	ИначеЕсли БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.СуммаРасходовНаОплатуТруда Тогда
		ПредставлениеПравила = НСтр("ru='Стоимость работ:'");
	ИначеЕсли БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.КоличествоУказанныхМатериалов Тогда
		ПредставлениеПравила = НСтр("ru='Количество материалов:'");
	ИначеЕсли БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ОбъемУказанныхМатериалов Тогда
		ПредставлениеПравила = НСтр("ru='Объем материалов:'");
	ИначеЕсли БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.СуммаМатериальныхЗатрат Тогда
		ПредставлениеПравила = НСтр("ru='Стоимость материалов:'");
	ИначеЕсли БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ВесУказанныхМатериалов Тогда
		ПредставлениеПравила = НСтр("ru='Вес материалов:'");
	ИначеЕсли БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ВесПродукции Тогда
		ПредставлениеПравила = НСтр("ru='Вес продукции:'");
	ИначеЕсли БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.КоличествоПродукции Тогда
		ПредставлениеПравила = НСтр("ru='Количество продукции:'");
	ИначеЕсли БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ОбъемПродукции Тогда
		ПредставлениеПравила = НСтр("ru='Объем продукции:'");
	ИначеЕсли БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ПлановаяСтоимостьПродукции Тогда
		ПредставлениеПравила = НСтр("ru='Плановая стоимость продукции:'");
	КонецЕсли;
	
	Возврат СокрЛП(ПредставлениеПравила + " " + ПредставлениеОтобранныхПозиций);
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Регистрирует данные для обработчика обновления.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.Ссылка КАК Ссылка
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПравилаРаспределенияРасходовОтборПоМатериалам.Ссылка КАК Ссылка
		|	ИЗ
		|		Справочник.ПравилаРаспределенияРасходов.ОтборПоМатериалам КАК ПравилаРаспределенияРасходовОтборПоМатериалам
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаРаспределенияРасходов КАК ПравилаРаспределенияРасходов
		|			ПО ПравилаРаспределенияРасходовОтборПоМатериалам.Ссылка = ПравилаРаспределенияРасходов.Ссылка
		|	ГДЕ
		|		ПравилаРаспределенияРасходов.ПредставлениеПравила ПОДОБНО """"
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПравилаРаспределенияРасходовОтборПоВидамРабот.Ссылка
		|	ИЗ
		|		Справочник.ПравилаРаспределенияРасходов.ОтборПоВидамРабот КАК ПравилаРаспределенияРасходовОтборПоВидамРабот
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаРаспределенияРасходов КАК ПравилаРаспределенияРасходов
		|			ПО ПравилаРаспределенияРасходовОтборПоВидамРабот.Ссылка = ПравилаРаспределенияРасходов.Ссылка
		|	ГДЕ
		|		ПравилаРаспределенияРасходов.ПредставлениеПравила ПОДОБНО """"
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПравилаРаспределенияРасходовОтборПоПродукции.Ссылка
		|	ИЗ
		|		Справочник.ПравилаРаспределенияРасходов.ОтборПоПродукции КАК ПравилаРаспределенияРасходовОтборПоПродукции
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаРаспределенияРасходов КАК ПравилаРаспределенияРасходов
		|			ПО ПравилаРаспределенияРасходовОтборПоПродукции.Ссылка = ПравилаРаспределенияРасходов.Ссылка
		|	ГДЕ
		|		ПравилаРаспределенияРасходов.ПредставлениеПравила ПОДОБНО """"
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПравилаРаспределенияРасходов.Ссылка
		|	ИЗ
		|		Справочник.ПравилаРаспределенияРасходов КАК ПравилаРаспределенияРасходов
		|	ГДЕ
		|		НЕ ПравилаРаспределенияРасходов.РаспределятьНаСтатьи
		|		И НЕ ПравилаРаспределенияРасходов.РаспределятьПоПартиям
		|		И НЕ ПравилаРаспределенияРасходов.Устаревшее
		|		И ПравилаРаспределенияРасходов.НазначениеПравила В (ЗНАЧЕНИЕ(Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеСтатейРасходовПоЭтапамПроизводства), ЗНАЧЕНИЕ(Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеСтатейРасходовПоПодразделениям))
		|		И НЕ ПравилаРаспределенияРасходов.БазаРаспределения В (ЗНАЧЕНИЕ(Перечисление.ТипыБазыРаспределенияРасходов.ВводитсяПриИзменении), ЗНАЧЕНИЕ(Перечисление.ТипыБазыРаспределенияРасходов.ВводитсяЕжемесячно))) КАК ВложенныйЗапрос";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

// Обработка данных для перехода на новую версию.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеСправочника = Метаданные.Справочники.ПравилаРаспределенияРасходов;
	ПолноеИмяОбъекта = "Справочник.ПравилаРаспределенияРасходов";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(
		Параметры.Очередь, ПолноеИмяОбъекта, МенеджерВременныхТаблиц);
		
	Параметры.ОбработкаЗавершена = НЕ Результат.ЕстьДанныеДляОбработки;
	Если Параметры.ОбработкаЗавершена Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ОбъектыДляОбработки.Ссылка КАК Ссылка,
		|	ОбъектыДляОбработки.Ссылка.ВерсияДанных КАК ВерсияДанных
		|ИЗ
		|	ВТОбъектыДляОбработки КАК ОбъектыДляОбработки";
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ВТОбъектыДляОбработки", Результат.ИмяВременнойТаблицы);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			СправочникОбъект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(
				Выборка.Ссылка, Выборка.ВерсияДанных, Параметры.Очередь);
			Если СправочникОбъект = Неопределено Тогда
				
				ЗафиксироватьТранзакцию();
				Продолжить;
				
			КонецЕсли;
			
			Если СправочникОбъект.ОтборПоМатериалам.Количество()
				Или СправочникОбъект.ОтборПоВидамРабот.Количество()
				Или СправочникОбъект.ОтборПоПродукции.Количество() Тогда
				СправочникОбъект.ПредставлениеПравила = ПолучитьПредставлениеПравила(
					СправочникОбъект.ОтборПоМатериалам, СправочникОбъект.ОтборПоВидамРабот, 
					СправочникОбъект.ОтборПоПродукции, СправочникОбъект.БазаРаспределения);
			КонецЕсли;
			
			СправочникОбъект.Устаревшее = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
