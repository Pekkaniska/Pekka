

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("Владелец", МодельБюджетирования) Тогда
		ТекстСообщения = НСтр("ru='Непосредственное открытие этой формы не предусмотрено. Для открытия формы можно воспользоваться командой ""Добавить по виду бюджета"" в форме списка правил лимитов по данным бюджетирования.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ВидыБюджета, "Владелец", МодельБюджетирования);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ВидыБюджета, "ИспользоватьДляВводаПлана", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормы

&НаКлиенте
Процедура ВидыБюджетаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Далее(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЭлементовВидаБюджетаФлагВыбораПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоЭлементовВидаБюджета.ТекущиеДанные;
	УстановитьФлагРекурсивно(ТекущиеДанные.ПолучитьЭлементы(), ТекущиеДанные.ФлагВыбора);
	
	РодительСтроки = ФинансоваяОтчетностьКлиентСервер.РодительСтроки(ТекущиеДанные);
	Пока РодительСтроки <> Неопределено Цикл
		ФлагВыбора = Ложь;
		ПодчиненныеЭлементыРодителя = РодительСтроки.ПолучитьЭлементы();
		Для Каждого ПодчиненныйЭлемент Из ПодчиненныеЭлементыРодителя Цикл
			ФлагВыбора = ПодчиненныйЭлемент.ФлагВыбора;
			Если ФлагВыбора Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		РодительСтроки.ФлагВыбора = ФлагВыбора;
		РодительСтроки = ФинансоваяОтчетностьКлиентСервер.РодительСтроки(РодительСтроки);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Далее(Команда)
	
	Элементы.ФормаДалее.Заголовок = "Далее >>>";
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя = "ВыборВидаБюджета" Тогда
		ТекущиеДанные = Элементы.ВидыБюджета.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено ИЛИ
			Не ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Не выбран вид бюджета'"));
			Возврат;
		КонецЕсли;
		Если ТекущиеДанные.ЭтоГруппа Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Создать лимиты по группе видов бюджета нельзя. Выберите вид бюджета.'"));
			Возврат;
		КонецЕсли;
		ВидБюджета = ТекущиеДанные.Ссылка;
		ЗаполнитьДеревоДоступныхКСозданиюЭлементов();
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ВыборЭлементовВидаБюджета;
		Для Каждого СтрокаДерева Из ДеревоЭлементовВидаБюджета.ПолучитьЭлементы() Цикл
			Элементы.ДеревоЭлементовВидаБюджета.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя = "ВыборЭлементовВидаБюджета" Тогда
		ПравилаСозданы = ВыполненоСозданиеПравилНаСервере();
		Если ПравилаСозданы Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ВыборЭлементовСоздано;
		Иначе
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ВыборЭлементовОшибка;
		КонецЕсли;
		Элементы.ФормаДалее.Заголовок = "Закрыть";
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя = "ВыборЭлементовСоздано"
	      ИЛИ Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя = "ВыборЭлементовОшибка" Тогда
		Закрыть(Истина);
	КонецЕсли;
	
	Элементы.ФормаНазад.Доступность = Элементы.ГруппаСтраницы.ТекущаяСтраница <> Элементы.ВыборВидаБюджета
	                                И Элементы.ГруппаСтраницы.ТекущаяСтраница <> Элементы.ВыборЭлементовСоздано
	                                И Элементы.ГруппаСтраницы.ТекущаяСтраница <> Элементы.ВыборЭлементовОшибка;
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя = "ВыборЭлементовВидаБюджета" Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ВыборВидаБюджета;
	КонецЕсли;
	
	Элементы.ФормаНазад.Доступность = Элементы.ГруппаСтраницы.ТекущаяСтраница <> Элементы.ВыборВидаБюджета
	                                И Элементы.ГруппаСтраницы.ТекущаяСтраница <> Элементы.ВыборЭлементовСоздано
	                                И Элементы.ГруппаСтраницы.ТекущаяСтраница <> Элементы.ВыборЭлементовОшибка;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	
	УстановитьФлагРекурсивно(ДеревоЭлементовВидаБюджета.ПолучитьЭлементы(), Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсе(Команда)
	
	УстановитьФлагРекурсивно(ДеревоЭлементовВидаБюджета.ПолучитьЭлементы(), Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьФлагРекурсивно(СтрокиДерева, ФлагВыбора)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		СтрокаДерева.ФлагВыбора = ФлагВыбора;
		УстановитьФлагРекурсивно(СтрокаДерева.ПолучитьЭлементы(), ФлагВыбора);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоДоступныхКСозданиюЭлементов()
	
	СтруктураКолонок = БюджетнаяОтчетностьРасчетКэшаСервер.КолонкиТаблицыДанных(ВидБюджета);
	СтруктураОписанияОтчета = БюджетнаяОтчетностьРасчетКэшаСервер.ОписаниеОтчета(
		ВидБюджета,
		СтруктураКолонок,
		Перечисления.РежимыФормированияБюджетныхОтчетов.Документ);
	
	ДеревоЭлементовВидаБюджета.ПолучитьЭлементы().Очистить();
	
	КопияСтруктурыЯчеек = СтруктураОписанияОтчета.СтруктураЯчеек.СкопироватьКолонки("Строка, СтатьяБюджетов");
	КопияСтруктурыЯчеек.Колонки.Добавить("СоставИзмерений", ОбщегоНазначения.ОписаниеТипаСтрока(500));
	
	МассивАналитик = Новый Структура;
	ОсновныеЭлементы = СтруктураОписанияОтчета.СтруктураЯчеек.НайтиСтроки(Новый Структура("ОсновнойЭлемент", Истина));
	
	Для Каждого СтрокаСтруктурыЯчеек Из ОсновныеЭлементы Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаСтруктурыЯчеек.СтатьяБюджетов) Тогда
			Продолжить;
		КонецЕсли;
		
		ВидыАналитик = "";
		Для Каждого ВидАналитики Из СтруктураКолонок.ВидыАналитик Цикл
			ИмяВидаАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
			МассивАналитик.Вставить(ИмяВидаАналитики, ВидАналитики);
			Если ЗначениеЗаполнено(СтрокаСтруктурыЯчеек["Флаг" + ИмяВидаАналитики]) Тогда
				ВидыАналитик = ВидыАналитик + ?(ПустаяСтрока(ВидыАналитик), "", ",") + ИмяВидаАналитики;
			КонецЕсли;
		КонецЦикла;
		
		НоваяСтрока = КопияСтруктурыЯчеек.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСтруктурыЯчеек);
		НоваяСтрока.СоставИзмерений = ВидыАналитик;
		
	КонецЦикла;
	
	КопияСтруктурыЯчеек.Свернуть("Строка, СтатьяБюджетов, СоставИзмерений");
	
	ИзмеренияШапки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидБюджета, "АналитикиШапки").Выгрузить();
	
	Для Каждого СтрокаСтруктурыЯчеек Из КопияСтруктурыЯчеек Цикл
		
		Для Каждого ИзмерениеШапки Из ИзмеренияШапки Цикл
			ИмяВидаАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ИзмерениеШапки.ВидАналитики);
			СтрокаСтруктурыЯчеек.СоставИзмерений = СтрокаСтруктурыЯчеек.СоставИзмерений + 
								?(ПустаяСтрока(СтрокаСтруктурыЯчеек.СоставИзмерений), "", ",") + ИмяВидаАналитики;
			МассивАналитик.Вставить(ИмяВидаАналитики, ИзмерениеШапки.ВидАналитики);
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Строка,
	|	Таблица.СоставИзмерений,
	|	Таблица.СтатьяБюджетов
	|ПОМЕСТИТЬ ТаблицаПоказателей
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаПоказателей.СоставИзмерений,
	|	ЭлементыФинансовыхОтчетов.Ссылка КАК ЭлементОтчета,
	|	ТаблицаПоказателей.СтатьяБюджетов
	|ИЗ
	|	Справочник.ЭлементыФинансовыхОтчетов КАК ЭлементыФинансовыхОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПоказателей КАК ТаблицаПоказателей
	|		ПО ЭлементыФинансовыхОтчетов.Ссылка = ТаблицаПоказателей.Строка
	|ГДЕ
	|	НЕ ТаблицаПоказателей.Строка ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭлементОтчета
	|ИТОГИ ПО
	|	ЭлементОтчета ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("Таблица", КопияСтруктурыЯчеек);
	ДеревоЭлементов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АналитикиСтатейБюджетов.Ссылка,
	|	АналитикиСтатейБюджетов.Наименование
	|ИЗ
	|	ПланВидовХарактеристик.АналитикиСтатейБюджетов КАК АналитикиСтатейБюджетов";
	
	РезультатЗапроса = Запрос.Выполнить();
	КэшИменАналитик = РезультатЗапроса.Выгрузить();
	КэшИменАналитик.Индексы.Добавить("Ссылка");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭлементыФинансовыхОтчетов.Ссылка,
	|	ЭлементыФинансовыхОтчетов.ВидЭлемента,
	|	ЭлементыФинансовыхОтчетов.НаименованиеДляПечати,
	|	ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Значение КАК СтатьяБюджетов,
	|	ПРЕДСТАВЛЕНИЕ(ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Значение) КАК СтатьяБюджетовПредставление
	|ИЗ
	|	Справочник.ЭлементыФинансовыхОтчетов КАК ЭлементыФинансовыхОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭлементыФинансовыхОтчетов.РеквизитыВидаЭлемента КАК ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента
	|		ПО (ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Ссылка = ЭлементыФинансовыхОтчетов.Ссылка)
	|			И (ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Реквизит = &Реквизит)
	|ГДЕ
	|	ЭлементыФинансовыхОтчетов.Владелец = &ВидБюджета";
	
	Запрос.УстановитьПараметр("Реквизит", ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.СтатьяБюджетов);
	Запрос.УстановитьПараметр("ВидБюджета", ВидБюджета);
	КэшВидовЭлементов = Запрос.Выполнить().Выгрузить();
	КэшВидовЭлементов.Индексы.Добавить("Ссылка");
	
	ДобавленныеЭлементы = Новый Соответствие;
	
	ОбойтиЗаполнитьДеревоЭлементов(ДеревоЭлементов,
	                               ДеревоЭлементовВидаБюджета.ПолучитьЭлементы(),
	                               МассивАналитик,
	                               КэшИменАналитик,
	                               КэшВидовЭлементов,
	                               ДобавленныеЭлементы);
	
КонецПроцедуры

&НаСервере
Функция ОбойтиЗаполнитьДеревоЭлементов(ДеревоЭлементов, ЭлементыДобавления, МассивАналитик,
                                       КэшИменАналитик, КэшВидовЭлементов, ДобавленныеЭлементы)
	
	Добавлено = 0;
	Для Каждого Выборка Из ДеревоЭлементов.Строки Цикл
		
		НоваяСтрока = Неопределено;
		ЭтоСтатьяБюджетов = Ложь;
		
		ПараметрыСтроки = КэшВидовЭлементов.Найти(Выборка.ЭлементОтчета);
		
		Если ПараметрыСтроки.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках
			ИЛИ ПараметрыСтроки.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках
			ИЛИ ПараметрыСтроки.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная Тогда
			
			ВыводитьЗаголовок = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(Выборка.ЭлементОтчета, "ВыводитьЗаголовокЭлемента");
			
			Если ВыводитьЗаголовок = Истина Тогда
				
				НоваяСтрока = ЭлементыДобавления.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыСтроки);
				НоваяСтрока.НестандартнаяКартинка = ФинансоваяОтчетностьПовтИсп.НестандартнаяКартинка(ПараметрыСтроки.ВидЭлемента, "");
				Добавлено = Добавлено + 1;
			
			КонецЕсли;
			
		ИначеЕсли ПараметрыСтроки.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов
			Или ЗначениеЗаполнено(Выборка.СтатьяБюджетов) Тогда
			
			СтатьяБюджетов = ?(ЗначениеЗаполнено(Выборка.СтатьяБюджетов), Выборка.СтатьяБюджетов, ПараметрыСтроки.СтатьяБюджетов);
			
			НоваяСтрока = ДобавленныеЭлементы[СтатьяБюджетов];
			ЭтоСтатьяБюджетов = Истина;
			
			Если НоваяСтрока = Неопределено Тогда
				НоваяСтрока = ЭлементыДобавления.Добавить();
				МассивВидовАналитик = Новый Массив;
				ДобавленныеЭлементы.Вставить(СтатьяБюджетов, НоваяСтрока);
				НоваяСтрока.НаименованиеДляПечати = Строка(СтатьяБюджетов);
				НоваяСтрока.СтатьяБюджетов = СтатьяБюджетов;
				НоваяСтрока.НестандартнаяКартинка = ФинансоваяОтчетностьПовтИсп.НестандартнаяКартинка(
					Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов, "");
				
				Добавлено = Добавлено + 1;
			Иначе
				МассивВидовАналитик = ПолучитьИзВременногоХранилища(НоваяСтрока.АдресМассиваИзмерений);
			КонецЕсли;
			
			МассивИзмерений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Выборка.СоставИзмерений);
			Для Каждого Измерение Из МассивИзмерений Цикл
				ВидАналитики = МассивАналитик[Измерение];
				МассивВидовАналитик.Добавить(ВидАналитики);
			КонецЦикла;
			МассивВидовАналитик = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивВидовАналитик);
			
			НоваяСтрока.АдресМассиваИзмерений = ПоместитьВоВременноеХранилище(МассивВидовАналитик, УникальныйИдентификатор);
			
			НоваяСтрока.Измерения = "";
			Для Каждого ВидАналитики Из МассивВидовАналитик Цикл
				НаименованиеАналитики = КэшИменАналитик.Найти(ВидАналитики, "Ссылка");
				НоваяСтрока.Измерения = НоваяСтрока.Измерения + ?(ПустаяСтрока(НоваяСтрока.Измерения), "", ", ") + НаименованиеАналитики.Наименование;
			КонецЦикла;
			
		КонецЕсли;
		
		Если НоваяСтрока = Неопределено Тогда
			СтрокаДобавления = ЭлементыДобавления;
		Иначе
			СтрокаДобавления = НоваяСтрока.ПолучитьЭлементы();
		КонецЕсли;
		
		ДобавленоНаПодчиненныхУровнях =
			ОбойтиЗаполнитьДеревоЭлементов(Выборка,
			                               СтрокаДобавления,
			                               МассивАналитик,
			                               КэшИменАналитик,
			                               КэшВидовЭлементов,
			                               ДобавленныеЭлементы);
		
		Если Не ДобавленоНаПодчиненныхУровнях Тогда
			Если Не ЭтоСтатьяБюджетов Тогда
				Если НоваяСтрока <> Неопределено Тогда
					ЭлементыДобавления.Удалить(НоваяСтрока);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Добавлено = Добавлено + ДобавленоНаПодчиненныхУровнях;
		
	КонецЦикла;
	
	Возврат Добавлено;
	
КонецФункции

&НаСервере
Процедура ОбойтиСоздатьЭлементыДерева(ДеревоЭлементов, КорневойЭлемент, Создано)
	
	Для Каждого Строка Из ДеревоЭлементов.Строки Цикл
		
		Если Не Строка.ФлагВыбора Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.СтатьяБюджетов) Тогда
			
			НовыйЭлемент = Справочники.ПравилаЛимитовПоДаннымБюджетирования.СоздатьЭлемент();
			НовыйЭлемент.Наименование = Строка(Строка.СтатьяБюджетов);
			НовыйЭлемент.СтатьяБюджета = Строка.СтатьяБюджетов;
			НовыйЭлемент.Периодичность = ВидБюджета.Периодичность;
			НовыйЭлемент.ТипЛимита = Перечисления.ТипыЛимитовРасходованияДС.РазрешающийВПределахЛимита;
			
			Если МодельБюджетирования.БюджетыПоОрганизациям Тогда
				НоваяСтрока = НовыйЭлемент.ИспользуемыеАналитики.Добавить();
				НоваяСтрока.ИмяИзмерения = "Организация";
			КонецЕсли;
			
			Если МодельБюджетирования.БюджетыПоПодразделениям Тогда
				НоваяСтрока = НовыйЭлемент.ИспользуемыеАналитики.Добавить();
				НоваяСтрока.ИмяИзмерения = "Подразделение";
			КонецЕсли;
			
			ВидыАналитик = ПолучитьИзВременногоХранилища(Строка.АдресМассиваИзмерений);
			Для Каждого ВидАналитики Из ВидыАналитик Цикл
				НоваяСтрока = НовыйЭлемент.ИспользуемыеАналитики.Добавить();
				НоваяСтрока.ВидАналитики = ВидАналитики;
			КонецЦикла;
			
			НовыйЭлемент.Владелец = МодельБюджетирования;
			НовыйЭлемент.Родитель = КорневойЭлемент;
			НовыйЭлемент.Записать();
			Создано = Создано + 1;
			
		Иначе 
			
			Группа = Справочники.ПравилаЛимитовПоДаннымБюджетирования.СоздатьГруппу();
			Группа.Наименование = Строка.НаименованиеДляПечати;
			Группа.Владелец = МодельБюджетирования;
			Группа.Родитель = КорневойЭлемент;
			Группа.Записать();
			
			ОбойтиСоздатьЭлементыДерева(Строка, Группа.Ссылка, Создано);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВыполненоСозданиеПравилНаСервере()
	ПравилаСозданы = Истина;
	КодОсновногоЯзыка   = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	ПредставлениеОшибки = "";
	ДеревоЭлементов     = РеквизитФормыВЗначение("ДеревоЭлементовВидаБюджета");
	НайденныеСтроки     = ДеревоЭлементов.Строки.НайтиСтроки(Новый Структура("ФлагВыбора", Истина), Истина);
	Если НайденныеСтроки.Количество() Тогда
		
		НачатьТранзакцию();
		Попытка
			Создано = 0;
			КорневойЭлемент = Справочники.ПравилаЛимитовПоДаннымБюджетирования.СоздатьГруппу();
			КорневойЭлемент.Наименование = Строка(ВидБюджета);
			КорневойЭлемент.Владелец = МодельБюджетирования;
			КорневойЭлемент.Записать();
			ОбойтиСоздатьЭлементыДерева(ДеревоЭлементов, КорневойЭлемент.Ссылка, Создано);
			ПравилаСозданы = Истина;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстОшибки = НСтр("ru = 'Не удалось создать правила лимитов для вида бюджета: %1 модели бюджетирования: %2, по причине: %3'",
				КодОсновногоЯзыка);
			ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
			                                                                      Строка(ВидБюджета),
			                                                                      Строка(МодельБюджетирования),
			                                                                      ПредставлениеОшибки);
			ЗаписьЖурналаРегистрации(НСтр("ru = 'ПравилаЛимитовПоДаннымБюджетирования.СозданиеПравил'", КодОсновногоЯзыка),
				УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
			
			ПравилаСозданы = Ложь;
		КонецПопытки;
		Если ПравилаСозданы Тогда
			ЗаголовокДекорации = НСтр("ru = 'Правила созданы успешно'", КодОсновногоЯзыка)
			                   + Символы.ПС + НСтр("ru = 'Создано правил лимитов: %1'", КодОсновногоЯзыка);
			Элементы.ДекорацияСоздано.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокДекорации,
				Создано);
		Иначе
			ЗаголовокДекорации = НСтр("ru = 'Не удалось создать правила по причине:'", КодОсновногоЯзыка)
			                   + Символы.ПС + "%1";
			Элементы.ДекорацияОшибка.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокДекорации,
				ПредставлениеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПравилаСозданы;
	
КонецФункции

#КонецОбласти

