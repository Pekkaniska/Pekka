
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьУчет2_4 = ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4")
							И ТекущаяДатаСеанса() >= Константы.ДатаНачалаУчетаВнеоборотныхАктивов2_4.Получить();
							
	УстановитьТекстЗапросаСписок();
	
	Элементы.СтраницыСведения.ТекущаяСтраница = Элементы.СтраницаСведенияНеВыбранНМА;
	
	Если ИспользоватьУчет2_4 Тогда
		
		Список.Параметры.УстановитьЗначениеПараметра("Состояние", Перечисления.ВидыСостоянийНМА.ПустаяСсылка());
		
		Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
			Элементы.СписокСостояниеУпр.Заголовок = НСтр("ru = 'Состояние'");
			Элементы.СписокСостояниеРегл.Видимость = Ложь;
		КонецЕсли; 
	
		Если Константы.ВалютаРегламентированногоУчета.Получить() = Константы.ВалютаУправленческогоУчета.Получить() Тогда
			Элементы.СведенияТаблицаСумм2_4Валюта.Видимость = Ложь;
		КонецЕсли;
	
	Иначе
		Элементы.СписокСостояниеРегл.Заголовок = НСтр("ru = 'Состояние'");
		Элементы.СписокСостояниеУпр.Видимость = Ложь;
	КонецЕсли;
	
	ПоказатьСведения = Ложь;
	ЗаполнитьСвойстваЭлементовСведений();
	
	МожноРедактировать = ПравоДоступа("Редактирование", Метаданные.Справочники.НематериальныеАктивы);
	Элементы.ИзменитьВыделенные.Видимость = МожноРедактировать;
	Элементы.СписокКонтекстноеМенюИзменитьВыделенные.Видимость = МожноРедактировать;
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	СохраненноеЗначение = Настройки.Получить("ПоказатьСведения");
	ПоказатьСведения = ?(ЗначениеЗаполнено(СохраненноеЗначение), СохраненноеЗначение, Истина);
	ЗаполнитьСвойстваЭлементовСведений();
	
	УстановитьОтборПоСостоянию(ЭтаФорма);
	
	ОтборОрганизация = Настройки.Получить("ОтборОрганизация");
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Организация",
		ОтборОрганизация,
		ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(ОтборОрганизация));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОтборСостояниеПриИзменении(Элемент)
	
	УстановитьОтборПоСостоянию(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Организация",
		ОтборОрганизация,
		ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(ОтборОрганизация));
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// Из-за серверного вызова активизация строки выполняется два раза.
	Если ПредыдущаяТекущаяСтрока <> Элементы.Список.ТекущаяСтрока Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ЗаполнитьСведения", 0.2, Истина);
	КонецЕсли;
	
	ПредыдущаяТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура СведенияПринятКУчетуОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если СтрНайти(НавигационнаяСсылкаФорматированнойСтроки, "#Создать") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура("Основание", Элементы.Список.ТекущаяСтрока);
		ОткрытьФорму("Документ.ПринятиеКУчетуНМА2_4.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли; 
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);

КонецПроцедуры

&НаКлиенте
Процедура Сведения(Команда)
	
	ПоказатьСведения = Не ПоказатьСведения;
	Элементы.ГруппаСведения.Видимость = ПоказатьСведения;
	
	Если ПоказатьСведения Тогда
		Элементы.КнопкаСведения.Заголовок = НСтр("ru='Скрыть сведения'");
		ПодключитьОбработчикОжидания("Подключаемый_ЗаполнитьСведения", 0.2, Истина);
	Иначе
		Элементы.КнопкаСведения.Заголовок = НСтр("ru='Показать сведения'");
	КонецЕсли;
	
КонецПроцедуры

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьТекстЗапросаСписок()

	Если ИспользоватьУчет2_4 Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СправочникНематериальныеАктивы.Ссылка,
		|	СправочникНематериальныеАктивы.ПометкаУдаления,
		|	СправочникНематериальныеАктивы.Родитель,
		|	СправочникНематериальныеАктивы.ЭтоГруппа,
		|	СправочникНематериальныеАктивы.Код,
		|	СправочникНематериальныеАктивы.Наименование,
		|	СправочникНематериальныеАктивы.НаименованиеПолное,
		|	СправочникНематериальныеАктивы.ВидНМА,
		|	СправочникНематериальныеАктивы.АмортизационнаяГруппа,
		|	СправочникНематериальныеАктивы.ПрочиеСведения,
		|	СправочникНематериальныеАктивы.ВидОбъектаУчета,
		|	СправочникНематериальныеАктивы.Предопределенный,
		|	СправочникНематериальныеАктивы.ИмяПредопределенныхДанных,
		|	ЕСТЬNULL(МестоУчетаНМА.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
		|	ЕСТЬNULL(ПорядокУчетаНМАБУ.Состояние, ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.НеПринятКУчету)) КАК СостояниеРегл,
		|	ЕСТЬNULL(ПорядокУчетаНМАУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.НеПринятКУчету)) КАК СостояниеУпр,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПринятияКУчету
		|ИЗ
		|	Справочник.НематериальныеАктивы КАК СправочникНематериальныеАктивы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоУчетаНМА.СрезПоследних КАК МестоУчетаНМА
		|		ПО (МестоУчетаНМА.НематериальныйАктив = СправочникНематериальныеАктивы.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАБУ.СрезПоследних КАК ПорядокУчетаНМАБУ
		|		ПО (ПорядокУчетаНМАБУ.НематериальныйАктив = МестоУчетаНМА.НематериальныйАктив)
		|			И (ПорядокУчетаНМАБУ.Организация = МестоУчетаНМА.Организация)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАУУ.СрезПоследних КАК ПорядокУчетаНМАУУ
		|		ПО (ПорядокУчетаНМАУУ.НематериальныйАктив = МестоУчетаНМА.НематериальныйАктив)
		|			И (ПорядокУчетаНМАУУ.Организация = МестоУчетаНМА.Организация)
		|ГДЕ
		|	(&Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПустаяСсылка)
		|		ИЛИ ЕСТЬNULL(ПорядокУчетаНМАБУ.Состояние, ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.НеПринятКУчету)) = &Состояние
		|		ИЛИ ЕСТЬNULL(ПорядокУчетаНМАУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.НеПринятКУчету)) = &Состояние)";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СправочникНематериальныеАктивы.Ссылка,
		|	СправочникНематериальныеАктивы.ПометкаУдаления,
		|	СправочникНематериальныеАктивы.Родитель,
		|	СправочникНематериальныеАктивы.ЭтоГруппа,
		|	СправочникНематериальныеАктивы.Код,
		|	СправочникНематериальныеАктивы.Наименование,
		|	СправочникНематериальныеАктивы.НаименованиеПолное,
		|	СправочникНематериальныеАктивы.ВидНМА,
		|	СправочникНематериальныеАктивы.АмортизационнаяГруппа,
		|	СправочникНематериальныеАктивы.ПрочиеСведения,
		|	СправочникНематериальныеАктивы.ВидОбъектаУчета,
		|	СправочникНематериальныеАктивы.Предопределенный,
		|	СправочникНематериальныеАктивы.ИмяПредопределенныхДанных,
		|	ЕСТЬNULL(СостоянияНМАОрганизацийСрезПоследних.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
		|	ЕСТЬNULL(СостоянияНМАОрганизацийСрезПоследних.Состояние, ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.НеПринятКУчету)) КАК СостояниеРегл,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПустаяСсылка) КАК СостояниеУпр,
		|	ВЫБОР ЕСТЬNULL(СостоянияНМАОрганизацийСрезПоследних.Состояние, ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.НеПринятКУчету))
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПринятКУчету)
		|			ТОГДА СостоянияНМАОрганизацийСрезПоследних.Период
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	КОНЕЦ КАК ДатаПринятияКУчету
		|ИЗ
		|	Справочник.НематериальныеАктивы КАК СправочникНематериальныеАктивы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних КАК ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних
		|		ПО СправочникНематериальныеАктивы.Ссылка = ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних КАК СостоянияНМАОрганизацийСрезПоследних
		|		ПО (ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив = СостоянияНМАОрганизацийСрезПоследних.НематериальныйАктив)
		|			И (ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.Организация = СостоянияНМАОрганизацийСрезПоследних.Организация)";

	КонецЕсли; 

	Список.ТекстЗапроса = ТекстЗапроса;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСвойстваЭлементовСведений()
	
	Элементы.ГруппаСведения.Видимость = ПоказатьСведения;
	Если ПоказатьСведения Тогда
		Элементы.КнопкаСведения.Заголовок = НСтр("ru='Скрыть сведения'");
	Иначе
		Элементы.КнопкаСведения.Заголовок = НСтр("ru='Показать сведения'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаСуммСуммаБУ1.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СведенияТаблицаСумм.Представление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='БУ'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаСуммСуммаНУ1.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СведенияТаблицаСумм.Представление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='НУ'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаСуммСуммаПР1.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СведенияТаблицаСумм.Представление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='ПР'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаСуммСуммаВР1.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СведенияТаблицаСумм.Представление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='ВР'"));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоСостоянию(Форма)

	Если Форма.ИспользоватьУчет2_4 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Форма.Список,
			"Состояние",
			Форма.ОтборСостояние);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.Список,
			"СостояниеРегл",
			Форма.ОтборСостояние,
			ВидСравненияКомпоновкиДанных.Равно,,
			ЗначениеЗаполнено(Форма.ОтборСостояние));
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаполнитьСведения()

	ЗаполнитьСведения(ЭтаФорма);

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСведения(Форма)
	
	Если НЕ Форма.ПоказатьСведения Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
	ТекущиеДанные = Неопределено;
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = Элементы.Список.ДанныеСтроки(ТекущаяСтрока);
		Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ЭтоГруппа Тогда
			ТекущиеДанные = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		Элементы.СтраницыСведения.ТекущаяСтраница = Элементы.СтраницаСведенияНеВыбранНМА;
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ВидОбъектаУчета = ПредопределенноеЗначение("Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР") Тогда
		Элементы.ГруппаСведения.Заголовок = НСтр("ru = 'Сведения о расходах на НИОКР'");
	Иначе
		Элементы.ГруппаСведения.Заголовок = НСтр("ru = 'Сведения о нематериальном активе'");
	КонецЕсли;
	
	Если Форма.ИспользоватьУчет2_4 Тогда
		
		Элементы.СтраницыСведения.ТекущаяСтраница = Элементы.СтраницаСведения2_4;
		
		Форма.СведенияТаблицаСумм2_4.Очистить();
		ПредставлениеСведений = Неопределено;
		
		ЕстьСуммы = Ложь;
		ТекущаяСтрока = Форма.Элементы.Список.ТекущаяСтрока;
		Сведения2_4 = ПолучитьСведения2_4(ТекущиеДанные.Ссылка);
	
		Для Каждого ЭлМассива Из Сведения2_4.Суммы Цикл
			ЗаполнитьЗначенияСвойств(Форма.СведенияТаблицаСумм2_4.Добавить(), ЭлМассива);
			ЕстьСуммы = ЭлМассива.ВосстановительнаяСтоимость <> 0 
							ИЛИ ЭлМассива.НакопленнаяАмортизация <> 0 
							ИЛИ ЭлМассива.ОстаточнаяСтоимость <> 0 
							ИЛИ ЕстьСуммы;
		КонецЦикла;
		
		ПредставлениеСведений = Сведения2_4.ПредставлениеСведений;
		Если ПредставлениеСведений <> Неопределено Тогда
			
			Элементы.ОбщаяКомандаДокументыПоНематериальномуАктиву.Видимость = ПредставлениеСведений.Период <> '000101010000';
			
			ВнеоборотныеАктивыКлиентСервер.ЗаполнитьСведенияЭлемента(
				Элементы.СведенияПринятКУчету1, ПредставлениеСведений.СведенияПринятКУчету1);
				
			ВнеоборотныеАктивыКлиентСервер.ЗаполнитьСведенияЭлемента(
				Элементы.СведенияПринятКУчету2, ПредставлениеСведений.СведенияПринятКУчету2);
				
			ВнеоборотныеАктивыКлиентСервер.ЗаполнитьСведенияЭлемента(
				Элементы.СведенияМестоУчетаОрганизация, ПредставлениеСведений.СведенияМестоУчетаОрганизация);
				
			ВнеоборотныеАктивыКлиентСервер.ЗаполнитьСведенияЭлемента(
				Элементы.СведенияМестоУчетаПодразделение, ПредставлениеСведений.СведенияМестоУчетаПодразделение);
				
			ВнеоборотныеАктивыКлиентСервер.ЗаполнитьСведенияЭлемента(
				Элементы.СведенияАмортизационнаяГруппа, Сведения2_4.СведенияАмортизационнаяГруппа);
			
			ВнеоборотныеАктивыКлиентСервер.ЗаполнитьСведенияЭлемента(
				Элементы.СведенияСрокИспользования1, ПредставлениеСведений.СведенияСрокИспользования1);
				
			ВнеоборотныеАктивыКлиентСервер.ЗаполнитьСведенияЭлемента(
				Элементы.СведенияСрокИспользования2, ПредставлениеСведений.СведенияСрокИспользования2);
				
			ВнеоборотныеАктивыКлиентСервер.ЗаполнитьСведенияЭлемента(
				Элементы.СведенияСрокИспользования3, ПредставлениеСведений.СведенияСрокИспользования3);
				
		Иначе
			
			Элементы.ОбщаяКомандаДокументыПоНематериальномуАктиву.Видимость = Ложь;
			Элементы.СведенияПринятКУчету1.Видимость = Ложь;
			Элементы.СведенияПринятКУчету2.Видимость = Ложь;
			Элементы.СведенияМестоУчетаОрганизация.Видимость = Ложь;
			Элементы.СведенияМестоУчетаПодразделение.Видимость = Ложь;
			Элементы.СведенияАмортизационнаяГруппа.Видимость = Ложь;
			Элементы.СведенияСрокИспользования1.Видимость = Ложь;
			Элементы.СведенияСрокИспользования2.Видимость = Ложь;
			Элементы.СведенияСрокИспользования3.Видимость = Ложь;
			
		КонецЕсли;
		
		Если ТекущиеДанные.ВидОбъектаУчета = ПредопределенноеЗначение("Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР") Тогда
			Элементы.СведенияТаблицаСумм2_4ВосстановительнаяСтоимость.Заголовок = НСтр("ru = 'Первоначальная
                                                                                        |стоимость'");
			Элементы.СведенияТаблицаСумм2_4НакопленнаяАмортизация.Заголовок = НСтр("ru = 'Погашенная
                                                                                    |стоимость'");
		Иначе
			Элементы.СведенияТаблицаСумм2_4ВосстановительнаяСтоимость.Заголовок = НСтр("ru = 'Восстано-
                                                                                        |вительная
                                                                                        |стоимость'");
			Элементы.СведенияТаблицаСумм2_4НакопленнаяАмортизация.Заголовок = НСтр("ru = 'Накопленная
                                                                                    |амортизация'");
		КонецЕсли; 
		
	Иначе	
		
		Элементы.СтраницыСведения.ТекущаяСтраница = Элементы.СтраницаСведения2_2;
		
		Форма.СведенияТаблицаСумм.Очистить();
		Если Элементы.Список.ВыделенныеСтроки.Количество() <> 0 Тогда
			Массив = ПолучитьСведения2_2(Элементы.Список.ТекущаяСтрока);
			Для Каждого Эл Из Массив Цикл
				ЗаполнитьЗначенияСвойств(Форма.СведенияТаблицаСумм.Добавить(), Эл);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСведения2_2(ВнеоборотныйАктив)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗначенияПоУмолчанию = Новый Структура;
	ЗначенияПоУмолчанию.Вставить("СтоимостьБУ", 0);
	ЗначенияПоУмолчанию.Вставить("СтоимостьНУ", 0);
	ЗначенияПоУмолчанию.Вставить("СтоимостьПР", 0);
	ЗначенияПоУмолчанию.Вставить("СтоимостьВР", 0);
	ЗначенияПоУмолчанию.Вставить("АмортизацияБУ", 0);
	ЗначенияПоУмолчанию.Вставить("АмортизацияНУ", 0);
	ЗначенияПоУмолчанию.Вставить("АмортизацияПР", 0);
	ЗначенияПоУмолчанию.Вставить("АмортизацияВР", 0);
	ЗначенияПоУмолчанию.Вставить("ЭтоНИОКР", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВнеоборотныйАктив", ВнеоборотныйАктив);
	Запрос.Текст=
	"ВЫБРАТЬ
	|	НематериальныеАктивы.Ссылка КАК ОбъектУчета,
	|	СчетаОтражения.СчетУчета КАК СчетУчета,
	|	СчетаОтражения.СчетНачисленияАмортизации КАК СчетАмортизации,
	|	ЕСТЬNULL(ПараметрыЦелевогоФинансирования.ПрименениеЦелевогоФинансирования, ЛОЖЬ) КАК ПрименениеЦелевогоФинансирования,
	|	ПараметрыЦелевогоФинансирования.СчетУчета КАК СчетУчетаЦФ,
	|	ПараметрыЦелевогоФинансирования.СчетАмортизации КАК СчетАмортизацииЦФ,
	|	ВЫБОР
	|		КОГДА НематериальныеАктивы.ВидОбъектаУчета = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоНИОКР
	|ПОМЕСТИТЬ втАктивыИСчетаУчета
	|ИЗ
	|	Справочник.НематериальныеАктивы КАК НематериальныеАктивы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(, НематериальныйАктив = &ВнеоборотныйАктив) КАК СчетаОтражения
	|		ПО НематериальныеАктивы.Ссылка = СчетаОтражения.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыЦелевогоФинансированияНМА.СрезПоследних(, НематериальныйАктив = &ВнеоборотныйАктив) КАК ПараметрыЦелевогоФинансирования
	|		ПО НематериальныеАктивы.Ссылка = ПараметрыЦелевогоФинансирования.НематериальныйАктив
	|ГДЕ
	|	НематериальныеАктивы.Ссылка = &ВнеоборотныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктивыИСчетаУчета.СчетУчета КАК Счет
	|ПОМЕСТИТЬ втСчетаОстатков
	|ИЗ
	|	втАктивыИСчетаУчета КАК АктивыИСчетаУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктивыИСчетаУчета.СчетАмортизации
	|ИЗ
	|	втАктивыИСчетаУчета КАК АктивыИСчетаУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктивыИСчетаУчета.СчетУчетаЦФ
	|ИЗ
	|	втАктивыИСчетаУчета КАК АктивыИСчетаУчета
	|ГДЕ
	|	АктивыИСчетаУчета.ПрименениеЦелевогоФинансирования
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктивыИСчетаУчета.СчетАмортизацииЦФ
	|ИЗ
	|	втАктивыИСчетаУчета КАК АктивыИСчетаУчета
	|ГДЕ
	|	АктивыИСчетаУчета.ПрименениеЦелевогоФинансирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК ОбъектУчета,
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаБУ,
	|	ХозрасчетныйОстатки.СуммаНУОстаток КАК СуммаНУ,
	|	ХозрасчетныйОстатки.СуммаПРОстаток КАК СуммаПР,
	|	ХозрасчетныйОстатки.СуммаВРОстаток КАК СуммаВР
	|ПОМЕСТИТЬ втОстатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			,
	|			Счет В
	|				(ВЫБРАТЬ
	|					Т.Счет
	|				ИЗ
	|					втСчетаОстатков КАК Т),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы),
	|			Субконто1 В (&ВнеоборотныйАктив)) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Стоимость.СуммаБУ, 0) + ЕСТЬNULL(СтоимостьЦФ.СуммаБУ, 0) КАК СтоимостьБУ,
	|	ЕСТЬNULL(Стоимость.СуммаНУ, 0) + ЕСТЬNULL(СтоимостьЦФ.СуммаНУ, 0) КАК СтоимостьНУ,
	|	ЕСТЬNULL(Стоимость.СуммаПР, 0) + ЕСТЬNULL(СтоимостьЦФ.СуммаПР, 0) КАК СтоимостьПР,
	|	ЕСТЬNULL(Стоимость.СуммаВР, 0) + ЕСТЬNULL(СтоимостьЦФ.СуммаВР, 0) КАК СтоимостьВР,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Стоимость.СуммаВР + Стоимость.СуммаПР + СтоимостьЦФ.СуммаВР + СтоимостьЦФ.СуммаПР, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ (ЕСТЬNULL(Стоимость.СуммаПР, 0) + ЕСТЬNULL(СтоимостьЦФ.СуммаПР, 0)) / (ЕСТЬNULL(Стоимость.СуммаВР + Стоимость.СуммаПР, 0) + ЕСТЬNULL(СтоимостьЦФ.СуммаВР + СтоимостьЦФ.СуммаПР, 0))
	|	КОНЕЦ КАК ДоляПР,
	|	ЕСТЬNULL(-Амортизация.СуммаБУ, 0) + ЕСТЬNULL(-АмортизацияЦФ.СуммаБУ, 0) КАК АмортизацияБУ,
	|	ЕСТЬNULL(-Амортизация.СуммаНУ, 0) + ЕСТЬNULL(-АмортизацияЦФ.СуммаНУ, 0) КАК АмортизацияНУ,
	|	ЕСТЬNULL(-Амортизация.СуммаПР, 0) + ЕСТЬNULL(-АмортизацияЦФ.СуммаПР, 0) КАК АмортизацияПР,
	|	ЕСТЬNULL(-Амортизация.СуммаВР, 0) + ЕСТЬNULL(-АмортизацияЦФ.СуммаВР, 0) КАК АмортизацияВР,
	|	втАктивыИСчетаУчета.ЭтоНИОКР КАК ЭтоНИОКР,
	|	ЕСТЬNULL(СведенияБУ.ПервоначальнаяСтоимость, 0) КАК ПервоначальнаяСтоимостьБУ,
	|	ЕСТЬNULL(СведенияНУ.ПервоначальнаяСтоимостьНУ, 0) КАК ПервоначальнаяСтоимостьНУ
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	втАктивыИСчетаУчета КАК втАктивыИСчетаУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(, НематериальныйАктив В (&ВнеоборотныйАктив)) КАК СведенияБУ
	|		ПО втАктивыИСчетаУчета.ОбъектУчета = СведенияБУ.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчет.СрезПоследних(, НематериальныйАктив В (&ВнеоборотныйАктив)) КАК СведенияНУ
	|		ПО втАктивыИСчетаУчета.ОбъектУчета = СведенияНУ.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК Стоимость
	|		ПО втАктивыИСчетаУчета.ОбъектУчета = Стоимость.ОбъектУчета
	|			И втАктивыИСчетаУчета.СчетУчета = Стоимость.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК Амортизация
	|		ПО втАктивыИСчетаУчета.ОбъектУчета = Амортизация.ОбъектУчета
	|			И втАктивыИСчетаУчета.СчетАмортизации = Амортизация.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК СтоимостьЦФ
	|		ПО втАктивыИСчетаУчета.ОбъектУчета = СтоимостьЦФ.ОбъектУчета
	|			И втАктивыИСчетаУчета.СчетУчетаЦФ = СтоимостьЦФ.Счет
	|			И (втАктивыИСчетаУчета.ПрименениеЦелевогоФинансирования)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК АмортизацияЦФ
	|		ПО втАктивыИСчетаУчета.ОбъектУчета = АмортизацияЦФ.ОбъектУчета
	|			И втАктивыИСчетаУчета.СчетАмортизацииЦФ = АмортизацияЦФ.Счет
	|			И (втАктивыИСчетаУчета.ПрименениеЦелевогоФинансирования)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблица.ЭтоНИОКР КАК ЭтоНИОКР,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблица.ЭтоНИОКР
	|			ТОГДА ВременнаяТаблица.ПервоначальнаяСтоимостьБУ
	|		ИНАЧЕ ВременнаяТаблица.СтоимостьБУ
	|	КОНЕЦ КАК СтоимостьБУ,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблица.ЭтоНИОКР
	|			ТОГДА ВременнаяТаблица.ПервоначальнаяСтоимостьНУ
	|		ИНАЧЕ ВременнаяТаблица.СтоимостьНУ
	|	КОНЕЦ КАК СтоимостьНУ,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблица.ЭтоНИОКР
	|				И ВременнаяТаблица.СтоимостьБУ = ВременнаяТаблица.СтоимостьНУ
	|			ТОГДА 0
	|		КОГДА ВременнаяТаблица.ЭтоНИОКР
	|			ТОГДА (ВременнаяТаблица.ПервоначальнаяСтоимостьБУ - ВременнаяТаблица.ПервоначальнаяСтоимостьНУ) * (ВременнаяТаблица.СтоимостьПР / (ВременнаяТаблица.СтоимостьБУ - ВременнаяТаблица.СтоимостьНУ))
	|		ИНАЧЕ ВременнаяТаблица.СтоимостьПР
	|	КОНЕЦ КАК СтоимостьПР,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблица.ЭтоНИОКР
	|				И ВременнаяТаблица.СтоимостьБУ = ВременнаяТаблица.СтоимостьНУ
	|			ТОГДА 0
	|		КОГДА ВременнаяТаблица.ЭтоНИОКР
	|			ТОГДА (ВременнаяТаблица.ПервоначальнаяСтоимостьБУ - ВременнаяТаблица.ПервоначальнаяСтоимостьНУ) * (1 - ВременнаяТаблица.СтоимостьПР / (ВременнаяТаблица.СтоимостьБУ - ВременнаяТаблица.СтоимостьНУ))
	|		ИНАЧЕ ВременнаяТаблица.СтоимостьВР
	|	КОНЕЦ КАК СтоимостьВР,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблица.ЭтоНИОКР
	|			ТОГДА ВременнаяТаблица.ПервоначальнаяСтоимостьБУ - ВременнаяТаблица.СтоимостьБУ
	|		ИНАЧЕ ВременнаяТаблица.АмортизацияБУ
	|	КОНЕЦ КАК АмортизацияБУ,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблица.ЭтоНИОКР
	|			ТОГДА ВременнаяТаблица.ПервоначальнаяСтоимостьНУ - ВременнаяТаблица.СтоимостьНУ
	|		ИНАЧЕ ВременнаяТаблица.АмортизацияНУ
	|	КОНЕЦ КАК АмортизацияНУ,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблица.ЭтоНИОКР
	|			ТОГДА ВЫРАЗИТЬ((ВременнаяТаблица.ПервоначальнаяСтоимостьБУ - ВременнаяТаблица.ПервоначальнаяСтоимостьНУ - (ВременнаяТаблица.СтоимостьБУ - ВременнаяТаблица.СтоимостьНУ)) * ВременнаяТаблица.ДоляПР КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ВременнаяТаблица.АмортизацияПР
	|	КОНЕЦ КАК АмортизацияПР,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблица.ЭтоНИОКР
	|			ТОГДА ВременнаяТаблица.ПервоначальнаяСтоимостьБУ - ВременнаяТаблица.ПервоначальнаяСтоимостьНУ - (ВременнаяТаблица.СтоимостьБУ - ВременнаяТаблица.СтоимостьНУ) - (ВЫРАЗИТЬ((ВременнаяТаблица.ПервоначальнаяСтоимостьБУ - ВременнаяТаблица.ПервоначальнаяСтоимостьНУ - (ВременнаяТаблица.СтоимостьБУ - ВременнаяТаблица.СтоимостьНУ)) * ВременнаяТаблица.ДоляПР КАК ЧИСЛО(15, 2)))
	|		ИНАЧЕ ВременнаяТаблица.АмортизацияВР
	|	КОНЕЦ КАК АмортизацияВР
	|ИЗ
	|	ВременнаяТаблица КАК ВременнаяТаблица";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ЗначенияПоУмолчанию, Выборка);
	КонецЕсли;
	
	ЗаголовокВалюты = Строка(Константы.ВалютаРегламентированногоУчета.Получить());
	
	Поля = "Представление, СуммаБУ, СуммаНУ, СуммаПР, СуммаВР";
	
	Массив = Новый Массив;
	
	Заголовок = НСтр("ru='Восстановительная стоимость (%1):'");
	Если ЗначенияПоУмолчанию.ЭтоНИОКР Тогда
		Заголовок = НСтр("ru='Первоначальная стоимость (%1):'");
	КонецЕсли;
	Строка = Новый Структура(Поля);
	Строка.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Заголовок, ЗаголовокВалюты);
	Строка.СуммаБУ = ЗначенияПоУмолчанию.СтоимостьБУ;
	Строка.СуммаНУ = ЗначенияПоУмолчанию.СтоимостьНУ;
	Строка.СуммаПР = ЗначенияПоУмолчанию.СтоимостьПР;
	Строка.СуммаВР = ЗначенияПоУмолчанию.СтоимостьВР;
	Массив.Добавить(Строка);
	
	Заголовок = НСтр("ru='Накопленная амортизация (%1):'");
	Если ЗначенияПоУмолчанию.ЭтоНИОКР Тогда
		Заголовок = НСтр("ru='Погашенная стоимость (%1):'");
	КонецЕсли;
	Строка = Новый Структура(Поля);
	Строка.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Заголовок, ЗаголовокВалюты);
	Строка.СуммаБУ = ЗначенияПоУмолчанию.АмортизацияБУ;
	Строка.СуммаНУ = ЗначенияПоУмолчанию.АмортизацияНУ;
	Строка.СуммаПР = ЗначенияПоУмолчанию.АмортизацияПР;
	Строка.СуммаВР = ЗначенияПоУмолчанию.АмортизацияВР;
	Массив.Добавить(Строка);
	
	Заголовок = НСтр("ru='Остаточная стоимость (%1):'");
	Строка = Новый Структура(Поля);
	Строка.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Заголовок, ЗаголовокВалюты);
	Строка.СуммаБУ = ЗначенияПоУмолчанию.СтоимостьБУ-ЗначенияПоУмолчанию.АмортизацияБУ;
	Строка.СуммаНУ = ЗначенияПоУмолчанию.СтоимостьНУ-ЗначенияПоУмолчанию.АмортизацияНУ;
	Строка.СуммаПР = ЗначенияПоУмолчанию.СтоимостьПР-ЗначенияПоУмолчанию.АмортизацияПР;
	Строка.СуммаВР = ЗначенияПоУмолчанию.СтоимостьВР-ЗначенияПоУмолчанию.АмортизацияВР;
	Массив.Добавить(Строка);
	
	Возврат Массив;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСведения2_4(Знач ВнеоборотныйАктив)

	СведенияОбУчете = Справочники.НематериальныеАктивы.СведенияОбУчете(ВнеоборотныйАктив);
	СтоимостьИАмортизация = ВнеоборотныеАктивы.СтоимостьИАмортизацияНМА(ВнеоборотныйАктив);

	Если СведенияОбУчете <> Неопределено Тогда
		ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(СведенияОбУчете.Организация, ТекущаяДатаСеанса());
	Иначе
		ПлательщикНалогаНаПрибыль = Ложь;
	КонецЕсли; 
	
	Массив = Новый Массив;
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	ВалютаУпр  = Константы.ВалютаУправленческогоУчета.Получить();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		
		// БУ
		ДанныеУчета = Новый Структура;
		ДанныеУчета.Вставить("Учет", "БУ");
		ДанныеУчета.Вставить("Валюта", ВалютаРегл);
		ДанныеУчета.Вставить("ВосстановительнаяСтоимость", СтоимостьИАмортизация.СтоимостьРегл + СтоимостьИАмортизация.СтоимостьЦФ);
		ДанныеУчета.Вставить("НакопленнаяАмортизация", СтоимостьИАмортизация.АмортизацияРегл + СтоимостьИАмортизация.АмортизацияЦФ);
		
		ДанныеУчета.Вставить("ОстаточнаяСтоимость", СтоимостьИАмортизация.СтоимостьРегл 
														+ СтоимостьИАмортизация.СтоимостьЦФ 
														- СтоимостьИАмортизация.АмортизацияРегл 
														- СтоимостьИАмортизация.АмортизацияЦФ);
		Массив.Добавить(ДанныеУчета);
		
		Если ПлательщикНалогаНаПрибыль Тогда
			
			// НУ
			ДанныеУчета = Новый Структура;
			ДанныеУчета.Вставить("Учет", "НУ");
			ДанныеУчета.Вставить("Валюта", ВалютаРегл);
			ДанныеУчета.Вставить("ВосстановительнаяСтоимость", СтоимостьИАмортизация.СтоимостьНУ + СтоимостьИАмортизация.СтоимостьНУЦФ);
			ДанныеУчета.Вставить("НакопленнаяАмортизация", СтоимостьИАмортизация.АмортизацияНУ + СтоимостьИАмортизация.АмортизацияНУЦФ);
			
			ДанныеУчета.Вставить("ОстаточнаяСтоимость", СтоимостьИАмортизация.СтоимостьНУ 
															+ СтоимостьИАмортизация.СтоимостьНУЦФ 
															- СтоимостьИАмортизация.АмортизацияНУ 
															- СтоимостьИАмортизация.АмортизацияНУЦФ);
			Массив.Добавить(ДанныеУчета);
			
			Если ПолучитьФункциональнуюОпцию("ПоддержкаПБУ18") Тогда
				
				// ПР
				ДанныеУчета = Новый Структура;
				ДанныеУчета.Вставить("Учет", "ПР");
				ДанныеУчета.Вставить("Валюта", ВалютаРегл);
				ДанныеУчета.Вставить("ВосстановительнаяСтоимость", СтоимостьИАмортизация.СтоимостьПР + СтоимостьИАмортизация.СтоимостьПРЦФ);
				ДанныеУчета.Вставить("НакопленнаяАмортизация", СтоимостьИАмортизация.АмортизацияПР + СтоимостьИАмортизация.АмортизацияПРЦФ);
				
				ДанныеУчета.Вставить("ОстаточнаяСтоимость", СтоимостьИАмортизация.СтоимостьПР 
																+ СтоимостьИАмортизация.СтоимостьПРЦФ 
																- СтоимостьИАмортизация.АмортизацияПР 
																- СтоимостьИАмортизация.АмортизацияПРЦФ);
				Массив.Добавить(ДанныеУчета);
				
				// ВР
				ДанныеУчета = Новый Структура;
				ДанныеУчета.Вставить("Учет", "ВР");
				ДанныеУчета.Вставить("Валюта", ВалютаРегл);
				ДанныеУчета.Вставить("ВосстановительнаяСтоимость", СтоимостьИАмортизация.СтоимостьВР + СтоимостьИАмортизация.СтоимостьВРЦФ);
				ДанныеУчета.Вставить("НакопленнаяАмортизация", СтоимостьИАмортизация.АмортизацияВР + СтоимостьИАмортизация.АмортизацияВРЦФ);
				ДанныеУчета.Вставить("ОстаточнаяСтоимость", СтоимостьИАмортизация.СтоимостьВР 
																+ СтоимостьИАмортизация.СтоимостьВРЦФ 
																- СтоимостьИАмортизация.АмортизацияВР 
																- СтоимостьИАмортизация.АмортизацияВРЦФ);
				Массив.Добавить(ДанныеУчета);
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	// УУ
	ДанныеУчета = Новый Структура;
	ДанныеУчета.Вставить("Учет", "УУ");
	ДанныеУчета.Вставить("Валюта", ВалютаУпр);
	ДанныеУчета.Вставить("ВосстановительнаяСтоимость", СтоимостьИАмортизация.Стоимость);
	ДанныеУчета.Вставить("НакопленнаяАмортизация", СтоимостьИАмортизация.Амортизация);
	ДанныеУчета.Вставить("ОстаточнаяСтоимость", СтоимостьИАмортизация.Стоимость - СтоимостьИАмортизация.Амортизация);
	Массив.Добавить(ДанныеУчета);
	
	ПредставлениеСведений = Справочники.НематериальныеАктивы.ПредставлениеСведенийОбУчете(СведенияОбУчете, Ложь);
	
	Сведения = Новый Структура;
	Сведения.Вставить("ПредставлениеСведений", ПредставлениеСведений);
	Сведения.Вставить("Суммы", Массив);
	
	РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВнеоборотныйАктив, "ВидОбъектаУчета,АмортизационнаяГруппа");
	Если ЗначениеЗаполнено(РеквизитыОбъекта.АмортизационнаяГруппа) Тогда
		ТекстСтроки = СтрШаблон(НСтр("ru = 'Амортизационная группа: %1'"), РеквизитыОбъекта.АмортизационнаяГруппа);
		СведенияАмортизационнаяГруппа = Новый ФорматированнаяСтрока(ТекстСтроки);
		Сведения.Вставить("СведенияАмортизационнаяГруппа", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СведенияАмортизационнаяГруппа));
	Иначе
		Сведения.Вставить("СведенияАмортизационнаяГруппа", Неопределено);
	КонецЕсли; 

	Возврат Сведения;
	
КонецФункции

#КонецОбласти