
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	ЦветНедоступногоТекста = ЦветаСтиля.ЦветНедоступногоТекста;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		Элементы.ДекорацияЗаголовокБУ.Видимость = Ложь;
		Элементы.ДекорацияЗаголовокНУ.Видимость = Ложь;
		Элементы.ДекорацияЗаголовокПР.Видимость = Ложь;
		Элементы.ДекорацияЗаголовокВР.Видимость = Ложь;
	КонецЕсли; 
	
	мФормироватьНаименованиеПолноеАвтоматически = УстановитьФлагФормироватьНаименованиеПолноеАвтоматически(
		Объект.НаименованиеПолное,Объект.Наименование);
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьВидимостьКомандВводаНаОсновании();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_ПринятиеКУчетуНМА2_4"
		ИЛИ ИмяСобытия = "Запись_СписаниеНМА2_4"
		ИЛИ ИмяСобытия = "Запись_ПеремещениеНМА2_4" Тогда
		ЗаполнитьСведенияОбУчете();
	КонецЕсли;
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	СформироватьНаименованиеПолноеАвтоматически();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	
	мФормироватьНаименованиеПолноеАвтоматически = УстановитьФлагФормироватьНаименованиеПолноеАвтоматически(
		Элементы.НаименованиеПолное, Элементы.Наименование);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Список = Новый СписокЗначений();
	Список.Добавить(Объект.Наименование);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НаименованиеПолноеНачалоВыбораЗавершение", ЭтотОбъект);
	
	ПоказатьВыборИзСписка(ОписаниеОповещения, Список, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Объект.НаименованиеПолное = ВыбранныйЭлемент.Значение;
		мФормироватьНаименованиеПолноеАвтоматически = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОбъектаУчетаПриИзменении(Элемент)
	
	Если Объект.ВидОбъектаУчета = ПредопределенноеЗначение("Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР") Тогда
		Объект.ВидНМА = ПредопределенноеЗначение("Перечисление.ВидыНМА.ПустаяСсылка");
		Объект.АмортизационнаяГруппа = ПредопределенноеЗначение("Перечисление.АмортизационныеГруппы.ПустаяСсылка");
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы("ВидОбъектаУчета");
	
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СведенияПринятКУчетуОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если СтрНайти(НавигационнаяСсылкаФорматированнойСтроки, "#Создать") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
		ОткрытьФорму("Документ.ПринятиеКУчетуНМА2_4.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КодОКВЭД2ПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы("КодОКВЭД2");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументРегистрацииНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДокументРегистрацииНаименование", Объект.ДокументРегистрацииНаименование);
	ПараметрыФормы.Вставить("ДокументРегистрацииДата", Объект.ДокументРегистрацииДата);
	ПараметрыФормы.Вставить("ДокументРегистрацииНомер", Объект.ДокументРегистрацииНомер);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводСведенийОДокументеРегистрацииЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.НематериальныеАктивы.Форма.ДокументРегистрации", ПараметрыФормы,,,,,ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()

	ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	Если ВалютаУпр <> ВалютаРегл Тогда
		Элементы.ДекорацияЗаголовокУУ.Заголовок = СтрШаблон(НСтр("ru = 'УУ (%1):'"), Строка(ВалютаУпр));
		Элементы.ДекорацияЗаголовокБУ.Заголовок = СтрШаблон(НСтр("ru = 'БУ (%1):'"), Строка(ВалютаРегл));
		Элементы.ДекорацияЗаголовокНУ.Заголовок = СтрШаблон(НСтр("ru = 'НУ (%1):'"), Строка(ВалютаРегл));
		Элементы.ДекорацияЗаголовокПР.Заголовок = СтрШаблон(НСтр("ru = 'ПР (%1):'"), Строка(ВалютаРегл));
		Элементы.ДекорацияЗаголовокВР.Заголовок = СтрШаблон(НСтр("ru = 'ВР (%1):'"), Строка(ВалютаРегл));
	КонецЕсли; 
	
	НастроитьЗависимыеЭлементыФормыНаСервере();
	СформироватьНадписьДокументРегистрации(ЭтаФорма);
	ЗаполнитьСведенияОбУчете();
	
КонецПроцедуры
 
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УстановитьФлагФормироватьНаименованиеПолноеАвтоматически(НаименованиеПолное, Наименование)

	Возврат (ПустаяСтрока(НаименованиеПолное) ИЛИ НаименованиеПолное = Наименование);

КонецФункции

&НаКлиенте
Процедура СформироватьНаименованиеПолноеАвтоматически()
	
	Если мФормироватьНаименованиеПолноеАвтоматически Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));

КонецПроцедуры

&НаКлиенте
Процедура НастроитьЗависимыеЭлементыФормы(ИзмененныеРеквизиты = "")
	
	Если ТребуетсяВызовСервераДляНастройкиЭлементовФормы(ИзмененныеРеквизиты) Тогда
		НастроитьЗависимыеЭлементыФормыНаСервере(ИзмененныеРеквизиты);
	Иначе
		НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтаФорма, ИзмененныеРеквизиты);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЗависимыеЭлементыФормыНаСервере(Знач ИзмененныеРеквизиты = "")

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("КодОКВЭД2")
		ИЛИ ОбновитьВсе Тогда
		
		Элементы.КодОКВЭД2РасширеннаяПодсказка.Заголовок =
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КодОКВЭД2, "Наименование");
		
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтаФорма, ИзмененныеРеквизиты);

КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(Форма, Знач ИзмененныеРеквизиты = "")
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ВидОбъектаУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЭтоНМА = Объект.ВидОбъектаУчета = ПредопределенноеЗначение("Перечисление.ВидыОбъектовУчетаНМА.НематериальныйАктив");
		
		Если ЭтоНМА Тогда
			Элементы.СтраницаСведения.Заголовок = НСтр("ru = 'Сведения об НМА'");
		Иначе
			Элементы.СтраницаСведения.Заголовок = НСтр("ru = 'Сведения о расходах на НИОКР'");
		КонецЕсли; 
		
		Элементы.ВидНМА.Видимость = ЭтоНМА;
		Элементы.АмортизационнаяГруппа.Видимость = ЭтоНМА;
		
		Элементы.ДокументРегистрацииНадпись.Видимость = ЭтоНМА;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ТребуетсяВызовСервераДляНастройкиЭлементовФормы(ИзмененныеРеквизиты)

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	
	Если СтруктураИзмененныхРеквизитов.Количество() = 0
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("КодОКВЭД2") Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Возврат Ложь;

КонецФункции

&НаСервере
Процедура УстановитьВидимостьКомандВводаНаОсновании()

	АдресНастроек = ЭтаФорма.ПараметрыПодключаемыхКоманд.АдресТаблицыКоманд;
	ТаблицаКоманд = ПолучитьИзВременногоХранилища(АдресНастроек);
	
	Если ПолучитьФункциональнуюОпцию("ОтображатьВнеоборотныеАктивы2_2") Тогда
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Организация = УчетНМА.ОрганизацияВКоторойНМАПринятКУчету(Объект.Ссылка);
			ПринятКУчету = ЗначениеЗаполнено(Организация);
			//++ НЕ УТКА
			Организация = МеждународныйУчетВнеоборотныеАктивы.ОрганизацияВКоторойНМАПринятКУчету(Объект.Ссылка);
			ПринятКЧетуМФУ = ЗначениеЗаполнено(Организация);
			//-- НЕ УТКА
		Иначе
			ПринятКУчету = Ложь;
			ПринятКЧетуМФУ = Ложь;
		КонецЕсли;
		
		ТекСтрока = ТаблицаКоманд.Найти("Документ.ПринятиеКУчетуНМА", "Менеджер");
		Если ТекСтрока <> Неопределено Тогда
			Элементы[ТекСтрока.ИмяВФорме].Видимость = НЕ ПринятКУчету;
		КонецЕсли;
		
		ТекСтрока = ТаблицаКоманд.Найти("Документ.ИзменениеПараметровНМА", "Менеджер");
		Если ТекСтрока <> Неопределено Тогда
			Элементы[ТекСтрока.ИмяВФорме].Видимость = ПринятКУчету;
		КонецЕсли;
		
		ТекСтрока = ТаблицаКоманд.Найти("Документ.СписаниеНМА", "Менеджер");
		Если ТекСтрока <> Неопределено Тогда
			Элементы[ТекСтрока.ИмяВФорме].Видимость = ПринятКУчету;
		КонецЕсли;
		
		//++ НЕ УТКА
		ТекСтрока = ТаблицаКоманд.Найти("Документ.ПринятиеКУчетуНМАМеждународныйУчет", "Менеджер");
		Если ТекСтрока <> Неопределено Тогда
			Элементы[ТекСтрока.ИмяВФорме].Видимость = НЕ ПринятКЧетуМФУ;
		КонецЕсли;
		
		ТекСтрока = ТаблицаКоманд.Найти("Документ.ИзменениеПараметровНМАМеждународныйУчет", "Менеджер");
		Если ТекСтрока <> Неопределено Тогда
			Элементы[ТекСтрока.ИмяВФорме].Видимость = ПринятКЧетуМФУ;
		КонецЕсли;
		
		ТекСтрока = ТаблицаКоманд.Найти("Документ.СписаниеНМАМеждународныйУчет", "Менеджер");
		Если ТекСтрока <> Неопределено Тогда
			Элементы[ТекСтрока.ИмяВФорме].Видимость = ПринятКЧетуМФУ;
		КонецЕсли;
		//-- НЕ УТКА
	
	КонецЕсли; 
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") Тогда
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ПервоначальныеСведения = Справочники.НематериальныеАктивы.ПервоначальныеСведения(Объект.Ссылка);
			МожноПринятьКУчету = ПервоначальныеСведения.ДатаПринятияКУчетуБУ = '000101010000'
								ИЛИ ПервоначальныеСведения.ДатаПринятияКУчетуУУ = '000101010000';
			ПринятКУчету = ПервоначальныеСведения.ДатаПринятияКУчетуБУ <> '000101010000'
								ИЛИ ПервоначальныеСведения.ДатаПринятияКУчетуУУ <> '000101010000';
		Иначе
			МожноПринятьКУчету = Ложь;
			ПринятКУчету = Ложь;
		КонецЕсли;
		
		Если ПравоДоступа("Добавление", Метаданные.Документы.ПринятиеКУчетуНМА2_4) Тогда
			УстановитьВидимостьКомандыВводаНаОсновании("ПринятиеКУчетуНМА2_4", ТаблицаКоманд, МожноПринятьКУчету);
		КонецЕсли; 
		Если ПравоДоступа("Добавление", Метаданные.Документы.ИзменениеПараметровНМА2_4) Тогда
			УстановитьВидимостьКомандыВводаНаОсновании("ИзменениеПараметровНМА2_4", ТаблицаКоманд, ПринятКУчету);
		КонецЕсли; 
		Если ПравоДоступа("Добавление", Метаданные.Документы.ПеремещениеОС2_4) Тогда
			УстановитьВидимостьКомандыВводаНаОсновании("ПеремещениеНМА2_4", ТаблицаКоманд, ПринятКУчету);
		КонецЕсли; 
		Если ПравоДоступа("Добавление", Метаданные.Документы.СписаниеНМА2_4) Тогда
			УстановитьВидимостьКомандыВводаНаОсновании("СписаниеНМА2_4", ТаблицаКоманд, ПринятКУчету);
		КонецЕсли; 
		Если ПравоДоступа("Добавление", Метаданные.Документы.ПереоценкаОС2_4) Тогда
			УстановитьВидимостьКомандыВводаНаОсновании("ПереоценкаНМА2_4", ТаблицаКоманд, ПринятКУчету);
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКомандыВводаНаОсновании(ИмяДокумента, ТаблицаКоманд, ВидимостьКоманды)

	ТекСтрока = ТаблицаКоманд.Найти("Документ." + ИмяДокумента, "Менеджер");
	Если ТекСтрока <> Неопределено Тогда
		Элементы[ТекСтрока.ИмяВФорме].Видимость = ВидимостьКоманды;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбУчете()

	Если НЕ ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4()
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестоУчетаНМА)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПервоначальныеСведенияНМА)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаНМАУУ)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаНМАБУ)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.СтоимостьНМА)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.АмортизацияНМА) Тогда
		Элементы.СтраницаСведения.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	СведенияОбУчете = Справочники.НематериальныеАктивы.СведенияОбУчете(Объект.Ссылка);
	Если СведенияОбУчете = Неопределено Тогда
		Элементы.СтраницыСведенияНМА.ТекущаяСтраница = Элементы.СтраницаСведенияОНеПринятомКУчету;
		Возврат;
	КонецЕсли;
	
	Элементы.СтраницыСведенияНМА.ТекущаяСтраница = Элементы.СтраницаСведенияОПринятомКУчету;
	
	ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(СведенияОбУчете.Организация, ТекущаяДатаСеанса());
	
	ПредставлениеСведений = Справочники.НематериальныеАктивы.ПредставлениеСведенийОбУчете(СведенияОбУчете);
	ДоступенВыборОтраженияВУчетах = ВнеоборотныеАктивыСлужебный.ДоступенВыборОтраженияВУчетах();
	
	ВнеоборотныеАктивыКлиентСервер.ЗаполнитьСведенияЭлемента(Элементы.СведенияПринятКУчету1, ПредставлениеСведений.СведенияПринятКУчету1);
	ВнеоборотныеАктивыКлиентСервер.ЗаполнитьСведенияЭлемента(Элементы.СведенияПринятКУчету2, ПредставлениеСведений.СведенияПринятКУчету2);
	ВнеоборотныеАктивыКлиентСервер.ЗаполнитьСведенияЭлемента(Элементы.СведенияСрокИспользования1, ПредставлениеСведений.СведенияСрокИспользования1);
	ВнеоборотныеАктивыКлиентСервер.ЗаполнитьСведенияЭлемента(Элементы.СведенияСрокИспользования2, ПредставлениеСведений.СведенияСрокИспользования2);
	ВнеоборотныеАктивыКлиентСервер.ЗаполнитьСведенияЭлемента(Элементы.СведенияСрокИспользования3, ПредставлениеСведений.СведенияСрокИспользования3);
	ВнеоборотныеАктивыКлиентСервер.ЗаполнитьСведенияЭлемента(Элементы.СведенияСнятСУчета, ПредставлениеСведений.СведенияСнятСУчета);
	ВнеоборотныеАктивыКлиентСервер.ЗаполнитьСведенияЭлемента(Элементы.СведенияГФУ, ПредставлениеСведений.СведенияГФУ);
	
	Если СведенияОбУчете <> Неопределено Тогда
		
		ЗаголовокСведений = СтрШаблон(НСтр("ru = 'Место учета (сведения от %1)'"), Формат(СведенияОбУчете.ПериодСведенийОМестеУчета, "ДЛФ=D"));
		Элементы.ГруппаМестонахождение.Заголовок = ЗаголовокСведений;
		
	КонецЕсли; 
	
	ВнеоборотныеАктивыКлиентСервер.ЗаполнитьСведенияЭлемента(Элементы.СведенияМестоУчетаОрганизация, ПредставлениеСведений.СведенияМестоУчетаОрганизация);
	ВнеоборотныеАктивыКлиентСервер.ЗаполнитьСведенияЭлемента(Элементы.СведенияМестоУчетаПодразделение, ПредставлениеСведений.СведенияМестоУчетаПодразделение);

	#Область Суммы

	СтоимостьИАмортизация = ВнеоборотныеАктивы.СтоимостьИАмортизацияНМА(Объект.Ссылка);
	
	ВосстановительнаяСтоимостьБУ   = СтоимостьИАмортизация.СтоимостьРегл;
	ВосстановительнаяСтоимостьБУЦФ = СтоимостьИАмортизация.СтоимостьЦФ;
	ВосстановительнаяСтоимостьВР   = СтоимостьИАмортизация.СтоимостьВР;
	ВосстановительнаяСтоимостьВРЦФ = СтоимостьИАмортизация.СтоимостьВРЦФ;
	ВосстановительнаяСтоимостьНУ   = СтоимостьИАмортизация.СтоимостьНУ;
	ВосстановительнаяСтоимостьНУЦФ = СтоимостьИАмортизация.СтоимостьНУЦФ;
	ВосстановительнаяСтоимостьПР   = СтоимостьИАмортизация.СтоимостьПР;
	ВосстановительнаяСтоимостьПРЦФ = СтоимостьИАмортизация.СтоимостьПРЦФ;
	ВосстановительнаяСтоимостьУУ   = СтоимостьИАмортизация.Стоимость;
	ВосстановительнаяСтоимостьУУЦФ = 0;
	
	НакопленнаяАмортизацияБУ   = СтоимостьИАмортизация.АмортизацияРегл;
	НакопленнаяАмортизацияБУЦФ = СтоимостьИАмортизация.АмортизацияЦФ;
	НакопленнаяАмортизацияВР   = СтоимостьИАмортизация.АмортизацияВР;
	НакопленнаяАмортизацияВРЦФ = СтоимостьИАмортизация.АмортизацияВРЦФ;
	НакопленнаяАмортизацияНУ   = СтоимостьИАмортизация.АмортизацияНУ;
	НакопленнаяАмортизацияНУЦФ = СтоимостьИАмортизация.АмортизацияНУЦФ;
	НакопленнаяАмортизацияПР   = СтоимостьИАмортизация.АмортизацияПР;
	НакопленнаяАмортизацияПРЦФ = СтоимостьИАмортизация.АмортизацияПРЦФ;
	НакопленнаяАмортизацияУУ   = СтоимостьИАмортизация.Амортизация;
	НакопленнаяАмортизацияУУЦФ = 0;
	
	ОстаточнаяСтоимостьБУ   = СтоимостьИАмортизация.СтоимостьРегл - СтоимостьИАмортизация.АмортизацияРегл;
	ОстаточнаяСтоимостьБУЦФ = СтоимостьИАмортизация.СтоимостьЦФ   - СтоимостьИАмортизация.АмортизацияЦФ;
	ОстаточнаяСтоимостьВР   = СтоимостьИАмортизация.СтоимостьВР   - СтоимостьИАмортизация.АмортизацияВР;
	ОстаточнаяСтоимостьВРЦФ = СтоимостьИАмортизация.СтоимостьВРЦФ - СтоимостьИАмортизация.АмортизацияВРЦФ;
	ОстаточнаяСтоимостьНУ   = СтоимостьИАмортизация.СтоимостьНУ   - СтоимостьИАмортизация.АмортизацияНУ;
	ОстаточнаяСтоимостьНУЦФ = СтоимостьИАмортизация.СтоимостьНУЦФ - СтоимостьИАмортизация.АмортизацияНУЦФ;
	ОстаточнаяСтоимостьПР   = СтоимостьИАмортизация.СтоимостьПР   - СтоимостьИАмортизация.АмортизацияПР;
	ОстаточнаяСтоимостьПРЦФ = СтоимостьИАмортизация.СтоимостьПРЦФ - СтоимостьИАмортизация.АмортизацияПРЦФ;
	ОстаточнаяСтоимостьУУ   = СтоимостьИАмортизация.Стоимость     - СтоимостьИАмортизация.Амортизация;
	ОстаточнаяСтоимостьУУЦФ = 0;
	
	Если НЕ ПлательщикНалогаНаПрибыль Тогда
		Элементы.ВосстановительнаяСтоимостьНУ.Видимость   = Ложь;
		Элементы.ВосстановительнаяСтоимостьПР.Видимость   = Ложь;
		Элементы.ВосстановительнаяСтоимостьВР.Видимость   = Ложь;
		Элементы.НакопленнаяАмортизацияНУ.Видимость       = Ложь;
		Элементы.НакопленнаяАмортизацияПР.Видимость       = Ложь;
		Элементы.НакопленнаяАмортизацияВР.Видимость       = Ложь;
		Элементы.ОстаточнаяСтоимостьНУ.Видимость          = Ложь;
		Элементы.ОстаточнаяСтоимостьПР.Видимость          = Ложь;
		Элементы.ОстаточнаяСтоимостьВР.Видимость          = Ложь;
		Элементы.ДекорацияЗаголовокНУ.Видимость           = Ложь;
		Элементы.ДекорацияЗаголовокВР.Видимость           = Ложь;
		Элементы.ДекорацияЗаголовокПР.Видимость           = Ложь;
	КонецЕсли; 
	
	Если СтоимостьИАмортизация.СтоимостьЦФ <> 0
		ИЛИ СтоимостьИАмортизация.СтоимостьВРЦФ <> 0
		ИЛИ СтоимостьИАмортизация.СтоимостьНУЦФ <> 0
		ИЛИ СтоимостьИАмортизация.СтоимостьПРЦФ <> 0
		ИЛИ СтоимостьИАмортизация.АмортизацияЦФ <> 0
		ИЛИ СтоимостьИАмортизация.АмортизацияВРЦФ <> 0
		ИЛИ СтоимостьИАмортизация.АмортизацияНУЦФ <> 0
		ИЛИ СтоимостьИАмортизация.АмортизацияПРЦФ <> 0 Тогда
		
		Элементы.ГруппаТекущаяСтоимостьЗаголовок.Заголовок       = НСтр("ru = 'Собственные средства:'");
		Элементы.ГруппаНакопленнаяАмортизацияЗаголовок.Заголовок = НСтр("ru = 'Собственные средства:'");
		Элементы.ГруппаОстаточнаяСтоимостьЗаголовок.Заголовок    = НСтр("ru = 'Собственные средства:'");
		
		Элементы.ГруппаТекущаяСтоимость.ОтображатьЗаголовок        = Истина;
		Элементы.ГруппаНакопленнаяАмортизация.ОтображатьЗаголовок  = Истина;
		Элементы.ГруппаОстаточнаяСтоимость.ОтображатьЗаголовок     = Истина;
		
		Элементы.ГруппаТекущаяСтоимостьЗаголовокЦФ.Видимость       = Истина;
		Элементы.ГруппаНакопленнаяАмортизацияЗаголовокЦФ.Видимость = Истина;
		Элементы.ГруппаОстаточнаяСтоимостьЗаголовокЦФ.Видимость    = Истина;
		
		Элементы.ВосстановительнаяСтоимостьУУЦФ.Видимость   = Истина;
		Элементы.ВосстановительнаяСтоимостьБУЦФ.Видимость   = Истина;
		Элементы.ВосстановительнаяСтоимостьНУЦФ.Видимость   = ПлательщикНалогаНаПрибыль;
		Элементы.ВосстановительнаяСтоимостьПРЦФ.Видимость   = ПлательщикНалогаНаПрибыль;
		Элементы.ВосстановительнаяСтоимостьВРЦФ.Видимость   = ПлательщикНалогаНаПрибыль;
		Элементы.НакопленнаяАмортизацияВРЦФ.Видимость       = ПлательщикНалогаНаПрибыль;
		Элементы.НакопленнаяАмортизацияПРЦФ.Видимость       = ПлательщикНалогаНаПрибыль;
		Элементы.НакопленнаяАмортизацияНУЦФ.Видимость       = ПлательщикНалогаНаПрибыль;
		Элементы.НакопленнаяАмортизацияБУЦФ.Видимость       = Истина;
		Элементы.НакопленнаяАмортизацияУУЦФ.Видимость       = Истина;
		Элементы.ОстаточнаяСтоимостьУУЦФ.Видимость          = Истина;
		Элементы.ОстаточнаяСтоимостьБУЦФ.Видимость          = Истина;
		Элементы.ОстаточнаяСтоимостьНУЦФ.Видимость          = ПлательщикНалогаНаПрибыль;
		Элементы.ОстаточнаяСтоимостьПРЦФ.Видимость          = ПлательщикНалогаНаПрибыль;
		Элементы.ОстаточнаяСтоимостьВРЦФ.Видимость          = ПлательщикНалогаНаПрибыль;
		
	Иначе
		
		Если Объект.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
			Элементы.ГруппаТекущаяСтоимостьЗаголовок.Заголовок       = НСтр("ru = 'Первоначальная стоимость:'");
			Элементы.ГруппаНакопленнаяАмортизацияЗаголовок.Заголовок = НСтр("ru = 'Погашенная стоимость:'");
			Элементы.ГруппаОстаточнаяСтоимостьЗаголовок.Заголовок    = НСтр("ru = 'Остаточная стоимость:'");
		Иначе
			Элементы.ГруппаТекущаяСтоимостьЗаголовок.Заголовок       = НСтр("ru = 'Восстановительная стоимость:'");
			Элементы.ГруппаНакопленнаяАмортизацияЗаголовок.Заголовок = НСтр("ru = 'Накопленная амортизация:'");
			Элементы.ГруппаОстаточнаяСтоимостьЗаголовок.Заголовок    = НСтр("ru = 'Остаточная стоимость:'");
		КонецЕсли; 
		
		Элементы.ГруппаТекущаяСтоимость.ОтображатьЗаголовок        = Ложь;
		Элементы.ГруппаНакопленнаяАмортизация.ОтображатьЗаголовок  = Ложь;
		Элементы.ГруппаОстаточнаяСтоимость.ОтображатьЗаголовок     = Ложь;
		
		Элементы.ГруппаТекущаяСтоимостьЗаголовокЦФ.Видимость       = Ложь;
		Элементы.ГруппаНакопленнаяАмортизацияЗаголовокЦФ.Видимость = Ложь;
		Элементы.ГруппаОстаточнаяСтоимостьЗаголовокЦФ.Видимость    = Ложь;
		
		Элементы.ВосстановительнаяСтоимостьУУЦФ.Видимость   = Ложь;
		Элементы.ВосстановительнаяСтоимостьБУЦФ.Видимость   = Ложь;
		Элементы.ВосстановительнаяСтоимостьНУЦФ.Видимость   = Ложь;
		Элементы.ВосстановительнаяСтоимостьПРЦФ.Видимость   = Ложь;
		Элементы.ВосстановительнаяСтоимостьВРЦФ.Видимость   = Ложь;
		Элементы.НакопленнаяАмортизацияВРЦФ.Видимость       = Ложь;
		Элементы.НакопленнаяАмортизацияПРЦФ.Видимость       = Ложь;
		Элементы.НакопленнаяАмортизацияНУЦФ.Видимость       = Ложь;
		Элементы.НакопленнаяАмортизацияБУЦФ.Видимость       = Ложь;
		Элементы.НакопленнаяАмортизацияУУЦФ.Видимость       = Ложь;
		Элементы.ОстаточнаяСтоимостьУУЦФ.Видимость          = Ложь;
		Элементы.ОстаточнаяСтоимостьБУЦФ.Видимость          = Ложь;
		Элементы.ОстаточнаяСтоимостьНУЦФ.Видимость          = Ложь;
		Элементы.ОстаточнаяСтоимостьПРЦФ.Видимость          = Ложь;
		Элементы.ОстаточнаяСтоимостьВРЦФ.Видимость          = Ложь;
		
	КонецЕсли; 
	
	#КонецОбласти
	
КонецПроцедуры

&НаКлиенте
Процедура ВводСведенийОДокументеРегистрацииЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		Объект.ДокументРегистрацииНаименование = РезультатЗакрытия.ДокументРегистрацииНаименование;
		Объект.ДокументРегистрацииДата = РезультатЗакрытия.ДокументРегистрацииДата;
		Объект.ДокументРегистрацииНомер = РезультатЗакрытия.ДокументРегистрацииНомер;
		Модифицированность = Истина;
		СформироватьНадписьДокументРегистрации(ЭтаФорма);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьДокументРегистрации(Форма)

	Объект = Форма.Объект;
	
	Если ЗначениеЗаполнено(Объект.ДокументРегистрацииНаименование)
		ИЛИ ЗначениеЗаполнено(Объект.ДокументРегистрацииДата) 
		ИЛИ ЗначениеЗаполнено(Объект.ДокументРегистрацииНомер) Тогда
		
		Если НЕ Форма.ТолькоПросмотр Тогда
			СтрокаСТегами = НСтр("ru = '%1 №%2 от %3 <a href = ""#Изменить"">изменить</a>'");
		Иначе
			СтрокаСТегами = НСтр("ru = '%1 №%2 от %3'");
		КонецЕсли;
		
		СтрокаСТегами = СтрШаблон(
							СтрокаСТегами, 
							Объект.ДокументРегистрацииНаименование,
							Объект.ДокументРегистрацииНомер,
							Формат(Объект.ДокументРегистрацииДата, "ДЛФ=D"));
							
		ТекстНадписи = СтроковыеФункцииКлиентСервер.ФорматированнаяСтрока(СтрокаСТегами);
							
	Иначе
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'не заполнен'"),, Форма.ЦветНедоступногоТекста));
		
		Если НЕ Форма.ТолькоПросмотр Тогда
			МассивСтрок.Добавить(" ");
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'изменить'"),,,, "#Изменить"));
		КонецЕсли;
		
		ТекстНадписи = Новый ФорматированнаяСтрока(МассивСтрок);
		
	КонецЕсли;
	
	Форма.ДокументРегистрацииНадпись = ТекстНадписи;

КонецПроцедуры

#КонецОбласти
