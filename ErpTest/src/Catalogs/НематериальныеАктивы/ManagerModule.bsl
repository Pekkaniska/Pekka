#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает сведения о нематериальном активе.
//
// Параметры:
//  НематериальныйАктив - СправочникСсылка.НематериальныеАктивы	 - Нематериальный актив для которого нужно получить сведения.
//  Период			 - Дата - На какую дату нужно получить сведения.
// 
// Возвращаемое значение:
//  Структура - Содержит сведения о нематериальном активе.
//
Функция ПервоначальныеСведения(НематериальныйАктив, Период = '000101010000') Экспорт
	
	ПервоначальныеСведения = Новый Структура;
	ПервоначальныеСведения.Вставить("Организация", Неопределено);
	ПервоначальныеСведения.Вставить("ДатаПринятияКУчетуУУ", '000101010000');
	ПервоначальныеСведения.Вставить("ДатаПринятияКУчетуБУ", '000101010000');
	ПервоначальныеСведения.Вставить("ДокументПринятияКУчетуУУ", Неопределено);
	ПервоначальныеСведения.Вставить("ДокументПринятияКУчетуБУ", Неопределено);
	ПервоначальныеСведения.Вставить("СостояниеУУ", Перечисления.ВидыСостоянийНМА.НеПринятКУчету);
	ПервоначальныеСведения.Вставить("СостояниеБУ", Перечисления.ВидыСостоянийНМА.НеПринятКУчету);
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПервоначальныеСведенияНМА)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаНМАУУ)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаНМАБУ) Тогда
		
		Возврат ПервоначальныеСведения;
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПервоначальныеСведения.Организация,
	|	ПервоначальныеСведения.ДатаПринятияКУчетуУУ,
	|	ПервоначальныеСведения.ДатаПринятияКУчетуБУ,
	|	ПервоначальныеСведения.ДокументПринятияКУчетуУУ,
	|	ПервоначальныеСведения.ДокументПринятияКУчетуБУ,
	|	ЕСТЬNULL(ПорядокУчетаУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.НеПринятКУчету)) КАК СостояниеУУ,
	|	ЕСТЬNULL(ПорядокУчетаБУ.Состояние, ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.НеПринятКУчету)) КАК СостояниеБУ
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМА.СрезПоследних(&Период, НематериальныйАктив = &Ссылка) КАК ПервоначальныеСведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАУУ.СрезПоследних(&Период, НематериальныйАктив = &Ссылка) КАК ПорядокУчетаУУ
	|		ПО ПервоначальныеСведения.НематериальныйАктив = ПорядокУчетаУУ.НематериальныйАктив
	|			И ПервоначальныеСведения.Организация = ПорядокУчетаУУ.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАБУ.СрезПоследних(&Период, НематериальныйАктив = &Ссылка) КАК ПорядокУчетаБУ
	|		ПО ПервоначальныеСведения.НематериальныйАктив = ПорядокУчетаБУ.НематериальныйАктив
	|			И ПервоначальныеСведения.Организация = ПорядокУчетаБУ.Организация";

	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", НематериальныйАктив);
	Запрос.УстановитьПараметр("Период", Период);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ПервоначальныеСведения;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ПервоначальныеСведения, Выборка);
	
	Возврат ПервоначальныеСведения;

КонецФункции

// Формирует сведения об учете нематериального актива
//
// Параметры:
//  НематериальныйАктив - СправочникСсылка.НематериальныеАктивы - Нематериальный актив для которого нужно получить сведения.
// 
// Возвращаемое значение:
//  Структура - Содержит свойства ОбщиеСведения,МестоУчета.
//
Функция СведенияОбУчете(НематериальныйАктив) Экспорт

	Если НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестоУчетаНМА)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПервоначальныеСведенияНМА)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаНМА)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаНМАУУ)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаНМАБУ)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПараметрыАмортизацииНМАБУ)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПараметрыАмортизацииНМАУУ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ПервоначальныеСведения.ДатаПринятияКУчетуБУ, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПринятияКУчетуБУ,
	|	ЕСТЬNULL(ПервоначальныеСведения.ДатаПринятияКУчетуУУ, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПринятияКУчетуУУ,
	|	ЕСТЬNULL(ПервоначальныеСведения.ДокументПринятияКУчетуБУ, НЕОПРЕДЕЛЕНО) КАК ДокументПринятияКУчетуБУ,
	|	ЕСТЬNULL(ПервоначальныеСведения.ДокументПринятияКУчетуУУ, НЕОПРЕДЕЛЕНО) КАК ДокументПринятияКУчетуУУ,
	|	ЕСТЬNULL(ПервоначальныеСведения.ДокументСписания, НЕОПРЕДЕЛЕНО) КАК ДокументСписания,
	|	ЕСТЬNULL(ПервоначальныеСведения.ДокументСписания.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаСнятияСУчета,
	|	ЕСТЬNULL(ПервоначальныеСведения.ПервоначальнаяСтоимостьБУ, 0) КАК ПервоначальнаяСтоимостьБУ,
	|	ЕСТЬNULL(ПервоначальныеСведения.ПервоначальнаяСтоимостьНУ, 0) КАК ПервоначальнаяСтоимостьНУ,
	|	ЕСТЬNULL(ПорядокУчетаНМА.ГруппаФинансовогоУчета, НЕОПРЕДЕЛЕНО) КАК ГруппаФинансовогоУчета,
	|	ЕСТЬNULL(ПорядокУчетаНМА.ГруппаФинансовогоУчета.Представление, """") КАК ГруппаФинансовогоУчетаПредставление,
	|	ЕСТЬNULL(ПорядокУчетаНМАБУ.Состояние, ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.НеПринятКУчету)) КАК СостояниеБУ,
	|	ЕСТЬNULL(ПорядокУчетаНМАУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.НеПринятКУчету)) КАК СостояниеУУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииНМАУУ.СрокИспользования, 0) КАК СрокИспользованияУУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииНМАБУ.СрокПолезногоИспользованияБУ, 0) КАК СрокИспользованияБУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииНМАБУ.СрокПолезногоИспользованияНУ, 0) КАК СрокИспользованияНУ,
	|	МестоУчетаНМА.Период КАК ПериодСведенийОМестеУчета,
	|	МестоУчетаНМА.Организация КАК Организация,
	|	ЕСТЬNULL(МестоУчетаНМА.Организация.Представление, """") КАК ОрганизацияПредставление,
	|	МестоУчетаНМА.Подразделение КАК Подразделение,
	|	МестоУчетаНМА.НематериальныйАктив.ВидОбъектаУчета КАК ВидОбъектаУчета,
	|	ЕСТЬNULL(МестоУчетаНМА.Подразделение.Представление, """") КАК ПодразделениеПредставление
	|ИЗ
	|	РегистрСведений.МестоУчетаНМА.СрезПоследних(, НематериальныйАктив = &Ссылка) КАК МестоУчетаНМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМА.СрезПоследних(, НематериальныйАктив = &Ссылка) КАК ПервоначальныеСведения
	|		ПО (ПервоначальныеСведения.НематериальныйАктив = МестоУчетаНМА.НематериальныйАктив)
	|			И (ПервоначальныеСведения.Организация = МестоУчетаНМА.Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМА.СрезПоследних(, НематериальныйАктив = &Ссылка) КАК ПорядокУчетаНМА
	|		ПО (ПорядокУчетаНМА.НематериальныйАктив = МестоУчетаНМА.НематериальныйАктив)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАУУ.СрезПоследних(, НематериальныйАктив = &Ссылка) КАК ПорядокУчетаНМАУУ
	|		ПО (ПорядокУчетаНМАУУ.НематериальныйАктив = МестоУчетаНМА.НематериальныйАктив)
	|			И (ПорядокУчетаНМАУУ.Организация = МестоУчетаНМА.Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАБУ.СрезПоследних(, НематериальныйАктив = &Ссылка) КАК ПорядокУчетаНМАБУ
	|		ПО (ПорядокУчетаНМАБУ.НематериальныйАктив = МестоУчетаНМА.НематериальныйАктив)
	|			И (ПорядокУчетаНМАБУ.Организация = МестоУчетаНМА.Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииНМАБУ.СрезПоследних(, НематериальныйАктив = &Ссылка) КАК ПараметрыАмортизацииНМАБУ
	|		ПО (ПараметрыАмортизацииНМАБУ.НематериальныйАктив = МестоУчетаНМА.НематериальныйАктив)
	|			И (ПараметрыАмортизацииНМАБУ.Организация = МестоУчетаНМА.Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииНМАУУ.СрезПоследних(, НематериальныйАктив = &Ссылка) КАК ПараметрыАмортизацииНМАУУ
	|		ПО (ПараметрыАмортизацииНМАУУ.НематериальныйАктив = МестоУчетаНМА.НематериальныйАктив)
	|			И (ПараметрыАмортизацииНМАУУ.Организация = МестоУчетаНМА.Организация)";

	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", НематериальныйАктив);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СведенияОбУчете = Новый Структура;
	Для каждого КолонкаЗапроса Из Результат.Колонки Цикл
		СведенияОбУчете.Вставить(КолонкаЗапроса.Имя);
	КонецЦикла; 
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(СведенияОбУчете, Выборка);
	
	Возврат СведенияОбУчете;

КонецФункции

Функция ПредставлениеСведенийОбУчете(СведенияОбУчете, ВключитьНезаполненные = Истина) Экспорт

	СведенияПринятКУчету1 = Новый Массив;
	СведенияПринятКУчету2 = Новый Массив;
	СведенияСрокИспользования1 = Новый Массив;
	СведенияСрокИспользования2 = Новый Массив;
	СведенияСрокИспользования3 = Новый Массив;
	СведенияСнятСУчета = Новый Массив;
	СведенияГФУ = Новый Массив;
	
	СведенияМестоУчетаОрганизация = Новый Массив;
	СведенияМестоУчетаПодразделение = Новый Массив;
	Период = '000101010000';
	
	#Область ОбщиеСведения
	
	Если СведенияОбУчете <> Неопределено Тогда
		
		ДоступенВыборОтраженияВУчетах = ВнеоборотныеАктивыСлужебный.ДоступенВыборОтраженияВУчетах();
		
		Если СведенияОбУчете.СостояниеУУ = Перечисления.ВидыСостоянийНМА.ПринятКУчету
			ИЛИ СведенияОбУчете.СостояниеБУ = Перечисления.ВидыСостоянийНМА.ПринятКУчету
			ИЛИ СведенияОбУчете.СостояниеУУ = Перечисления.ВидыСостоянийНМА.Списан
			ИЛИ СведенияОбУчете.СостояниеБУ = Перечисления.ВидыСостоянийНМА.Списан Тогда
		
			Если ЗначениеЗаполнено(СведенияОбУчете.ДатаПринятияКУчетуУУ) 
					И ЗначениеЗаполнено(СведенияОбУчете.ДатаПринятияКУчетуБУ)
					И СведенияОбУчете.ДатаПринятияКУчетуУУ = СведенияОбУчете.ДатаПринятияКУчетуБУ
				ИЛИ ЗначениеЗаполнено(СведенияОбУчете.ДатаПринятияКУчетуУУ) 
					И НЕ ДоступенВыборОтраженияВУчетах Тогда
				
				СведенияПринятКУчету1.Добавить(НСтр("ru = 'Дата принятия к учету:'"));
				СведенияПринятКУчету1.Добавить(" ");
				ДатаДокумента = Формат(СведенияОбУчете.ДатаПринятияКУчетуУУ, "ДЛФ=D");
				Если ЗначениеЗаполнено(СведенияОбУчете.ДокументПринятияКУчетуУУ) Тогда
					СсылкаНаОбъект = ПолучитьНавигационнуюСсылку(СведенияОбУчете.ДокументПринятияКУчетуУУ);
				Иначе
					СсылкаНаОбъект = Неопределено;
				КонецЕсли;
				СведенияПринятКУчету1.Добавить(Новый ФорматированнаяСтрока(ДатаДокумента,,,, СсылкаНаОбъект));
				
			Иначе
				
				Если ДоступенВыборОтраженияВУчетах Тогда
					СведенияПринятКУчету1.Добавить(НСтр("ru = 'Дата принятия в регл. учете:'"));
					СведенияПринятКУчету1.Добавить(" ");
					Если ЗначениеЗаполнено(СведенияОбУчете.ДатаПринятияКУчетуБУ) Тогда
						ДатаДокумента = Формат(СведенияОбУчете.ДатаПринятияКУчетуБУ, "ДЛФ=D");
						Если ЗначениеЗаполнено(СведенияОбУчете.ДокументПринятияКУчетуБУ) Тогда
							СсылкаНаОбъект = ПолучитьНавигационнуюСсылку(СведенияОбУчете.ДокументПринятияКУчетуБУ);
						Иначе
							СсылкаНаОбъект = Неопределено;
						КонецЕсли;
						СведенияПринятКУчету1.Добавить(Новый ФорматированнаяСтрока(ДатаДокумента,,,, СсылкаНаОбъект));
					Иначе	
						СведенияПринятКУчету1.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'принять к учету'"),,,, "#Создать"));
					КонецЕсли; 
				КонецЕсли;
				
				СведенияПринятКУчету2.Добавить(НСтр("ru = 'Дата принятия в упр. учете:'"));
				СведенияПринятКУчету2.Добавить(" ");
				Если ЗначениеЗаполнено(СведенияОбУчете.ДатаПринятияКУчетуУУ) Тогда
					ДатаДокумента = Формат(СведенияОбУчете.ДатаПринятияКУчетуУУ, "ДЛФ=D");
					Если ЗначениеЗаполнено(СведенияОбУчете.ДокументПринятияКУчетуУУ) Тогда
						СсылкаНаОбъект = ПолучитьНавигационнуюСсылку(СведенияОбУчете.ДокументПринятияКУчетуУУ);
					Иначе
						СсылкаНаОбъект = Неопределено;
					КонецЕсли;
					СведенияПринятКУчету2.Добавить(Новый ФорматированнаяСтрока(ДатаДокумента,,,, СсылкаНаОбъект));
				Иначе
					СведенияПринятКУчету2.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'принять к учету'"),,,, "#Создать"));
				КонецЕсли; 
				
			КонецЕсли;
			
			СрокИспользованияУУ = ВнеоборотныеАктивы.РасшифровкаСрокаПолезногоИспользования(СведенияОбУчете.СрокИспользованияУУ);
			СрокИспользованияБУ = ВнеоборотныеАктивы.РасшифровкаСрокаПолезногоИспользования(СведенияОбУчете.СрокИспользованияБУ);
			СрокИспользованияНУ = ВнеоборотныеАктивы.РасшифровкаСрокаПолезногоИспользования(СведенияОбУчете.СрокИспользованияНУ);
			
			Если СведенияОбУчете.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
				ШаблонСрок = НСтр("ru = 'Срок списания: %1'");
			Иначе
				ШаблонСрок = НСтр("ru = 'Срок использования: %1'");
			КонецЕсли; 
			
			Если СведенияОбУчете.СрокИспользованияБУ = СведенияОбУчете.СрокИспользованияНУ
					И СведенияОбУчете.СрокИспользованияБУ = СведенияОбУчете.СрокИспользованияУУ 
					И СведенияОбУчете.СрокИспользованияУУ <> 0
				ИЛИ СведенияОбУчете.СрокИспользованияУУ <> 0
					И СведенияОбУчете.СрокИспользованияБУ = 0
					И СведенияОбУчете.СрокИспользованияБУ = 0 Тогда
				
				СведенияСрокИспользования1.Добавить(СтрШаблон(ШаблонСрок, СрокИспользованияУУ));
				
			ИначеЕсли СведенияОбУчете.СрокИспользованияБУ <> 0
				И СведенияОбУчете.СрокИспользованияУУ = 0
				И (СведенияОбУчете.СрокИспользованияНУ = 0
					ИЛИ СведенияОбУчете.СрокИспользованияНУ = СведенияОбУчете.СрокИспользованияБУ) Тогда
					
				СведенияСрокИспользования1.Добавить(СтрШаблон(ШаблонСрок, СрокИспользованияБУ));
				
			ИначеЕсли СведенияОбУчете.СрокИспользованияНУ <> 0
				И СведенияОбУчете.СрокИспользованияУУ = 0
				И (СведенияОбУчете.СрокИспользованияБУ = 0
					ИЛИ СведенияОбУчете.СрокИспользованияБУ = СведенияОбУчете.СрокИспользованияНУ) Тогда				
					
				СведенияСрокИспользования1.Добавить(СтрШаблон(ШаблонСрок, СрокИспользованияНУ));
				
			Иначе
				
				Если СведенияОбУчете.СрокИспользованияБУ <> 0 Тогда
					Если СведенияОбУчете.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
						СведенияСрокИспользования1.Добавить(СтрШаблон(НСтр("ru = 'Срок списания (БУ):  %1'"), СрокИспользованияБУ));
					Иначе
						СведенияСрокИспользования1.Добавить(СтрШаблон(НСтр("ru = 'Срок использования (БУ):  %1'"), СрокИспользованияБУ));
					КонецЕсли;
				КонецЕсли;
				Если СведенияОбУчете.СрокИспользованияНУ <> 0 Тогда
					Если СведенияОбУчете.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
						СведенияСрокИспользования2.Добавить(СтрШаблон(НСтр("ru = 'Срок списания (НУ):  %1'"), СрокИспользованияНУ));
					Иначе
						СведенияСрокИспользования2.Добавить(СтрШаблон(НСтр("ru = 'Срок использования (НУ):  %1'"), СрокИспользованияНУ));
					КонецЕсли;
				КонецЕсли;
				Если СведенияОбУчете.СрокИспользованияУУ <> 0 Тогда
					Если СведенияОбУчете.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
						СведенияСрокИспользования3.Добавить(СтрШаблон(НСтр("ru = 'Срок списания (УУ):  %1'"), СрокИспользованияУУ));
					Иначе
						СведенияСрокИспользования3.Добавить(СтрШаблон(НСтр("ru = 'Срок использования (УУ):  %1'"), СрокИспользованияУУ));
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
				
			//
			Если СведенияОбУчете.СостояниеУУ = Перечисления.ВидыСостоянийНМА.Списан
				ИЛИ СведенияОбУчете.СостояниеБУ = Перечисления.ВидыСостоянийНМА.Списан Тогда
				СведенияСнятСУчета.Добавить(НСтр("ru = 'Дата списания:'"));
				СведенияСнятСУчета.Добавить(" ");
				ДатаДокумента = Формат(СведенияОбУчете.ДатаСнятияСУчета, "ДЛФ=D");
				Если ЗначениеЗаполнено(СведенияОбУчете.ДокументСписания) Тогда
					СсылкаНаОбъект = ПолучитьНавигационнуюСсылку(СведенияОбУчете.ДокументСписания);
				Иначе
					СсылкаНаОбъект = Неопределено;
				КонецЕсли;
				СведенияСнятСУчета.Добавить(Новый ФорматированнаяСтрока(ДатаДокумента,,,, СсылкаНаОбъект));
			КонецЕсли; 
			
			СведенияГФУ.Добавить(НСтр("ru = 'Группа финансового учета:'"));
			СведенияГФУ.Добавить(" ");
			Если ЗначениеЗаполнено(СведенияОбУчете.ГруппаФинансовогоУчета) Тогда
				СсылкаНаОбъект = ПолучитьНавигационнуюСсылку(СведенияОбУчете.ГруппаФинансовогоУчета);
			Иначе
				СсылкаНаОбъект = Неопределено;
			КонецЕсли;
			СведенияГФУ.Добавить(Новый ФорматированнаяСтрока(СведенияОбУчете.ГруппаФинансовогоУчетаПредставление,,,, СсылкаНаОбъект));
		
		КонецЕсли; 
		
	Иначе
		СведенияПринятКУчету1.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Принять к учету'"),,,, "#Создать"));
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Местонахождение
	
	Если СведенияОбУчете <> Неопределено Тогда
		
		Период = СведенияОбУчете.ПериодСведенийОМестеУчета; 
		
		СведенияМестоУчетаОрганизация.Добавить(СтрШаблон(НСтр("ru = 'Организация: %1'"), СведенияОбУчете.ОрганизацияПредставление));
		СведенияМестоУчетаПодразделение.Добавить(СтрШаблон(НСтр("ru = 'Подразделение: %1'"), СведенияОбУчете.ПодразделениеПредставление));
		
	КонецЕсли; 
	
	#КонецОбласти
	
	ПредставлениеСведений = Новый Структура;
	ПредставлениеСведений.Вставить("Период", Период);
	ПредставлениеСведений.Вставить("СведенияПринятКУчету1", СведенияПринятКУчету1);
	ПредставлениеСведений.Вставить("СведенияПринятКУчету2", СведенияПринятКУчету2);
	ПредставлениеСведений.Вставить("СведенияСрокИспользования1", СведенияСрокИспользования1);
	ПредставлениеСведений.Вставить("СведенияСрокИспользования2", СведенияСрокИспользования2);
	ПредставлениеСведений.Вставить("СведенияСрокИспользования3", СведенияСрокИспользования3);
	ПредставлениеСведений.Вставить("СведенияСнятСУчета", СведенияСнятСУчета);
	ПредставлениеСведений.Вставить("СведенияГФУ", СведенияГФУ);
	ПредставлениеСведений.Вставить("СведенияМестоУчетаОрганизация", СведенияМестоУчетаОрганизация);
	ПредставлениеСведений.Вставить("СведенияМестоУчетаПодразделение", СведенияМестоУчетаПодразделение);
	
	Возврат ПредставлениеСведений;

КонецФункции

#Область Команды

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Команда = Документы.ПринятиеКУчетуНМА.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаБУ";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.ПринятиеКУчетуНМА2_4.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаБУ";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.ИзменениеПараметровНМА.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаБУ";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.ИзменениеПараметровНМА2_4.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаБУ";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.ПеремещениеНМА2_4.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаБУ";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.ПереоценкаНМА2_4.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаБУ";
		Команда.РежимЗаписи = "";
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ВидОбъектаУчета", Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив);
	КонецЕсли;
	
	Команда = Документы.ПодготовкаКПередачеНМА2_4.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаБУ";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.СписаниеНМА.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаБУ";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.СписаниеНМА2_4.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаБУ";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	//++ НЕ УТКА
	
	Команда = Документы.ПринятиеКУчетуНМАМеждународныйУчет.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаМФУ";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.ИзменениеПараметровНМАМеждународныйУчет.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаМФУ";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.СписаниеНМАМеждународныйУчет.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаМФУ";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	//-- НЕ УТКА
	
КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	//++ НЕ УТКА
	
	Команда = Отчеты.КарточкаНМАМеждународныйУчет.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаМФУ";
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		Команда = Отчеты.СравнениеНМА.ДобавитьКомандуОтчета(КомандыОтчетов);
		Если Команда <> Неопределено Тогда
			Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаМФУ";
		КонецЕсли;
	КонецЕсли;
	
	//-- НЕ УТКА
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет")
		И ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4()
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПервоначальныеСведенияНМА)
		И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.СтоимостьНМА)
		И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.АмортизацияНМА) Тогда
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "НМА1";
		КомандаПечати.Представление = НСтр("ru = 'Карточка учета НМА (НМА-1)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
		КомандаПечати.СписокФорм = "ФормаЭлемента,ФормаСпискаБУ";
		
		УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(
			КомандаПечати, 
			"ВидОбъектаУчета", 
			Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаВыбора" И ВнеоборотныеАктивыВызовСервера.ДоступенВыборНематериальныхАктивов2_4(Параметры) Тогда
		
		// В концепции 2.4 своя форма выбора
		ВыбраннаяФорма = "ФормаВыбора2_4";
		СтандартнаяОбработка = Ложь;
		Возврат;

	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ДанныеВыбора = ВнеоборотныеАктивыВызовСервера.ДанныеВыбораНематериальныхАктивов(Параметры, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Печать

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НМА1") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"НМА1",
			НСтр("ru = 'Карточка учета НМА (НМА-1)'"),
			ПечатьНМА1(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьНМА1(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_НематериальныеАктивы_НМА1";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.НематериальныеАктивы.ПФ_MXL_НМА1");
	
	Шапка = Макет.ПолучитьОбласть("Шапка");
	ОборотнаяСторона = Макет.ПолучитьОбласть("ОборотнаяСторона");
	
	Если ПараметрыПечати.Свойство("ДатаСведений") Тогда
		ДатаСведений = ПараметрыПечати.ДатаСведений;
	Иначе
		ДатаСведений = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ДанныеПечатнойФормы = ДанныеПечатнойФормыНМА1(МассивОбъектов, ДатаСведений);
	
	ПараметрыШапки = Новый Структура(
	"ВидДеятельности,
	|ДатаСоставления,
	|ДатаПринятияКУчету,
	|ДокументВыбытияДата,
	|ДокументВыбытияНомер,
	|ДокументПринятияКУчету,
	|ДокументПринятияКУчетуДата,
	|ДокументПринятияКУчетуНомер,
	|ДокументРегистрации,
	|ДокументСписания,
	|КодПоОКПО,
	|НаименованиеНМА,
	|НомерКарточки,
	|Норма,
	|ОрганизацияНаименование,
	|ПервоначальнаяСтоимость,
	|Подразделение,
	|ПодразделениеНаименование,
	|ПричинаВыбытия,
	|СпособПоступления,
	|СрокПолезногоИспользования,
	|СуммаНачисленнойАмортизации,
	|СуммаРеализации,
	|СчетУчетаАмортизации,
	|СчетУчета");
	
	ПервыйДокумент = Истина;
	
	СведенияАктуальны = Истина;
	
	ВыборкаОбъектов = ДанныеПечатнойФормы.Выбрать();
	Пока ВыборкаОбъектов.Следующий() Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
		
		ЗаполнитьЗначенияСвойств(ПараметрыШапки, ВыборкаОбъектов); 
		
		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ВыборкаОбъектов.Организация, ДатаСведений);
		ПараметрыШапки.ОрганизацияНаименование = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм");
		
		ПараметрыШапки.ДатаСоставления = ДатаСведений;
		
		ПараметрыШапки.НомерКарточки = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
			ВыборкаОбъектов.НомерКарточки, Истина, Ложь);
			
		Если ЗначениеЗаполнено(ВыборкаОбъектов.ДокументПринятияКУчетуНомер) Тогда
			ПараметрыШапки.ДокументПринятияКУчетуНомер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
				ВыборкаОбъектов.ДокументПринятияКУчетуНомер, Истина, Ложь);
		КонецЕсли;
			
		Если ЗначениеЗаполнено(ВыборкаОбъектов.ДокументВыбытияНомер) Тогда
			ПараметрыШапки.ДокументВыбытияНомер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
				ВыборкаОбъектов.ДокументВыбытияНомер, Истина, Ложь);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаОбъектов.СрокПолезногоИспользования) Тогда
			ПараметрыШапки.Норма = 
				СтрШаблон(НСтр("ru = '%1%% в мес.'"), Окр(1/ВыборкаОбъектов.СрокПолезногоИспользования*100, 3));
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ВыборкаОбъектов.ДокументРегистрацииНаименование) Тогда
			ПараметрыШапки.ДокументРегистрации = 
				СтрШаблон(НСтр("ru = '%1 №%2 от %3'"),
								ВыборкаОбъектов.ДокументРегистрацииНаименование,
								ВыборкаОбъектов.ДокументРегистрацииНомер,
								Формат(ВыборкаОбъектов.ДокументРегистрацииДата, "ДЛФ=D"));
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ВыборкаОбъектов.Сумма) Тогда
			ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
			Если ВыборкаОбъектов.Валюта <> ВалютаРегламентированногоУчета Тогда
				ПараметрыШапки.СуммаРеализации = РаботаСКурсамиВалютУТ.ПересчитатьСуммуДокументаВВалюту(
														ВыборкаОбъектов.Сумма,
														ВыборкаОбъектов.Валюта,
														ВалютаРегламентированногоУчета,
														ВыборкаОбъектов.ДатаРеализации);
				
			Иначе
				ПараметрыШапки.СуммаРеализации = ВыборкаОбъектов.Сумма;
			КонецЕсли; 
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ВыборкаОбъектов.СрокПолезногоИспользования) Тогда
			ПараметрыШапки.СрокПолезногоИспользования = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(
				ВыборкаОбъектов.СрокПолезногоИспользования);
		КонецЕсли;
			
		Шапка.Параметры.Заполнить(ПараметрыШапки);
		
		ТабДок.Вывести(Шапка);
		
		// Оборотная сторона
		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		ТабДок.Вывести(ОборотнаяСторона);
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, ВыборкаОбъектов.Ссылка);
		
		Если НЕ ВыборкаОбъектов.СведенияАктуальны Тогда
			СведенияАктуальны = Ложь;
		КонецЕсли; 
		
	КонецЦикла;
	
	ВнеоборотныеАктивы.ДобавитьПредупреждениеЕслиСведенияНеАктуальны(СведенияАктуальны, ТабДок);
	
	Возврат ТабДок;
	
КонецФункции

Функция ДанныеПечатнойФормыНМА1(МассивОбъектов, ДатаСведений)

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПервоначальныеСведения.НематериальныйАктив КАК НематериальныйАктив,
	|	ПервоначальныеСведения.СпособПоступления КАК СпособПоступления,
	|	ПервоначальныеСведения.ПервоначальнаяСтоимостьБУ КАК ПервоначальнаяСтоимостьБУ,
	|	ПервоначальныеСведения.ДатаПринятияКУчетуБУ КАК ДатаПринятияКУчетуБУ,
	|	ПервоначальныеСведения.ДокументПринятияКУчетуБУ КАК ДокументПринятияКУчетуБУ,
	|	ПервоначальныеСведения.ДокументСписания КАК ДокументСписания
	|ПОМЕСТИТЬ втПервоначальныеСведения
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМА.СрезПоследних(&ДатаСведений, НематериальныйАктив В (&МассивОбъектов)) КАК ПервоначальныеСведения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыАмортизации.НематериальныйАктив КАК НематериальныйАктив,
	|	ПараметрыАмортизации.СрокПолезногоИспользованияБУ КАК СрокПолезногоИспользования
	|ПОМЕСТИТЬ втПараметрыАмортизации
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииНМАБУ.СрезПоследних(&ДатаСведений, НематериальныйАктив В (&МассивОбъектов)) КАК ПараметрыАмортизации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПорядокУчета.НематериальныйАктив КАК НематериальныйАктив,
	|	ПорядокУчета.ГруппаФинансовогоУчета.СчетУчета КАК СчетУчета,
	|	ПорядокУчета.ГруппаФинансовогоУчета.СчетУчета КАК СчетУчетаЦФ,
	|	ПорядокУчета.ГруппаФинансовогоУчета.СчетУчетаАмортизации КАК СчетУчетаАмортизации,
	|	ПорядокУчета.ГруппаФинансовогоУчета.СчетУчетаАмортизации КАК СчетУчетаАмортизацииЦФ
	|ПОМЕСТИТЬ втПорядокУчета
	|ИЗ
	|	РегистрСведений.ПорядокУчетаНМА.СрезПоследних(&ДатаСведений, НематериальныйАктив В (&МассивОбъектов)) КАК ПорядокУчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МестоУчета.НематериальныйАктив КАК НематериальныйАктив,
	|	МестоУчета.Организация КАК Организация,
	|	МестоУчета.Подразделение КАК Подразделение,
	|	МестоУчета.Организация.КодПоОКПО КАК ОрганизацияКодПоОКПО
	|ПОМЕСТИТЬ втМестоУчета
	|ИЗ
	|	РегистрСведений.МестоУчетаНМА.СрезПоследних(&ДатаСведений, НематериальныйАктив В (&МассивОбъектов)) КАК МестоУчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АмортизацияНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	СУММА(АмортизацияНМА.Амортизация) КАК Амортизация
	|ПОМЕСТИТЬ втАмортизация
	|ИЗ
	|	(ВЫБРАТЬ
	|		АмортизацияНМА.НематериальныйАктив КАК НематериальныйАктив,
	|		-(АмортизацияНМА.АмортизацияРеглОстаток + АмортизацияНМА.АмортизацияЦФОстаток) КАК Амортизация
	|	ИЗ
	|		РегистрНакопления.АмортизацияНМА.Остатки(&ДатаСведений, НематериальныйАктив В (&МассивОбъектов)) КАК АмортизацияНМА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		АмортизацияНМА.НематериальныйАктив,
	|		ВЫБОР
	|			КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 1
	|			ИНАЧЕ -1
	|		КОНЕЦ * (АмортизацияНМА.АмортизацияРегл + АмортизацияНМА.АмортизацияЦФ)
	|	ИЗ
	|		РегистрНакопления.АмортизацияНМА КАК АмортизацияНМА
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеНМА2_4 КАК СписаниеНМА2_4
	|			ПО (СписаниеНМА2_4.Ссылка = АмортизацияНМА.Регистратор)
	|	ГДЕ
	|		АмортизацияНМА.Период <= &ДатаСведений
	|		И АмортизацияНМА.НематериальныйАктив В(&МассивОбъектов)
	|		И (АмортизацияНМА.Регистратор ССЫЛКА Документ.ПодготовкаКПередачеНМА2_4
	|				ИЛИ АмортизацияНМА.Регистратор ССЫЛКА Документ.СписаниеНМА2_4
	|					И НЕ СписаниеНМА2_4.ЧастичнаяЛиквидация)) КАК АмортизацияНМА
	|
	|СГРУППИРОВАТЬ ПО
	|	АмортизацияНМА.НематериальныйАктив
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыПоНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	МАКСИМУМ(ДокументыПоНМА.Ссылка) КАК Ссылка
	|ПОМЕСТИТЬ втРеализацияВнеоборотныхАктивов
	|ИЗ
	|	РегистрСведений.ДокументыПоНМА КАК ДокументыПоНМА
	|ГДЕ
	|	ДокументыПоНМА.ТипСсылки = &ТипРеализацияУслугПрочихАктивов
	|	И ДокументыПоНМА.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияВнеоборотныхАктивов)
	|	И ДокументыПоНМА.НематериальныйАктив В(&МассивОбъектов)
	|	И ДокументыПоНМА.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыПоНМА.НематериальныйАктив
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НематериальныеАктивы.Ссылка КАК Ссылка,
	|	НематериальныеАктивы.Код КАК НомерКарточки,
	|	НематериальныеАктивы.ДокументРегистрацииНаименование КАК ДокументРегистрацииНаименование,
	|	НематериальныеАктивы.ДокументРегистрацииДата КАК ДокументРегистрацииДата,
	|	НематериальныеАктивы.ДокументРегистрацииНомер КАК ДокументРегистрацииНомер,
	|	ЕСТЬNULL(НематериальныеАктивы.КодОКВЭД2.Наименование, """") КАК ВидДеятельности,
	|	ВЫБОР
	|		КОГДА НематериальныеАктивы.НаименованиеПолное <> """"
	|			ТОГДА НематериальныеАктивы.НаименованиеПолное
	|		ИНАЧЕ НематериальныеАктивы.Наименование
	|	КОНЕЦ КАК НаименованиеНМА,
	|	втПервоначальныеСведения.СпособПоступления КАК СпособПоступления,
	|	втПервоначальныеСведения.ПервоначальнаяСтоимостьБУ КАК ПервоначальнаяСтоимость,
	|	втПервоначальныеСведения.ДатаПринятияКУчетуБУ КАК ДатаПринятияКУчету,
	|	втПервоначальныеСведения.ДокументПринятияКУчетуБУ КАК ДокументПринятияКУчетуБУ,
	|	втПервоначальныеСведения.ДокументСписания КАК ДокументСписания,
	|	втПараметрыАмортизации.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	втПорядокУчета.СчетУчета КАК СчетУчета,
	|	втПорядокУчета.СчетУчетаАмортизации КАК СчетУчетаАмортизации,
	|	втМестоУчета.Организация КАК Организация,
	|	втМестоУчета.ОрганизацияКодПоОКПО КАК КодПоОКПО,
	|	втМестоУчета.Подразделение.Наименование КАК ПодразделениеНаименование,
	|	ЕСТЬNULL(втАмортизация.Амортизация, 0) КАК СуммаНачисленнойАмортизации,
	|	ДокументПринятияКУчету.Ссылка КАК ДокументПринятияКУчету,
	|	ДокументПринятияКУчету.НомерПервичногоДокумента КАК ДокументПринятияКУчетуНомер,
	|	ДокументПринятияКУчету.ДатаПервичногоДокумента КАК ДокументПринятияКУчетуДата,
	|	ЕСТЬNULL(РеализацияУслугПрочихАктивов.СуммаДокумента, 0) КАК Сумма,
	|	ЕСТЬNULL(РеализацияУслугПрочихАктивов.Дата, 0) КАК ДатаРеализации,
	|	РеализацияУслугПрочихАктивов.Валюта КАК Валюта,
	|	ВЫБОР
	|		КОГДА втПервоначальныеСведения.ДокументСписания ССЫЛКА Документ.ПодготовкаКПередачеНМА2_4
	|			ТОГДА РеализацияУслугПрочихАктивов.Дата
	|		ИНАЧЕ ДокументВыбытия.ДатаПервичногоДокумента
	|	КОНЕЦ КАК ДокументВыбытияДата,
	|	ВЫБОР
	|		КОГДА втПервоначальныеСведения.ДокументСписания ССЫЛКА Документ.ПодготовкаКПередачеНМА2_4
	|			ТОГДА РеализацияУслугПрочихАктивов.Номер
	|		ИНАЧЕ ДокументВыбытия.НомерПервичногоДокумента
	|	КОНЕЦ КАК ДокументВыбытияНомер,
	|	ВЫРАЗИТЬ(ДокументВыбытия.Договор КАК Справочник.ДоговорыКонтрагентов).Наименование КАК ПричинаВыбытия,
	|	НЕ НематериальныеАктивы.Ссылка В (&ОбъектыДляКоторыхСведенияНеАктуальны) КАК СведенияАктуальны
	|ИЗ
	|	Справочник.НематериальныеАктивы КАК НематериальныеАктивы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПервоначальныеСведения КАК втПервоначальныеСведения
	|		ПО НематериальныеАктивы.Ссылка = втПервоначальныеСведения.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПараметрыАмортизации КАК втПараметрыАмортизации
	|		ПО НематериальныеАктивы.Ссылка = втПараметрыАмортизации.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПорядокУчета КАК втПорядокУчета
	|		ПО НематериальныеАктивы.Ссылка = втПорядокУчета.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ втМестоУчета КАК втМестоУчета
	|		ПО НематериальныеАктивы.Ссылка = втМестоУчета.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ втАмортизация КАК втАмортизация
	|		ПО НематериальныеАктивы.Ссылка = втАмортизация.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК ДокументПринятияКУчету
	|		ПО (ДокументПринятияКУчету.Ссылка = втПервоначальныеСведения.ДокументПринятияКУчетуБУ)
	|			И (НЕ ДокументПринятияКУчету.ДополнительнаяЗапись)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК ДокументВыбытия
	|		ПО (ДокументВыбытия.Ссылка = втПервоначальныеСведения.ДокументСписания)
	|			И (НЕ ДокументВыбытия.ДополнительнаяЗапись)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втРеализацияВнеоборотныхАктивов КАК втРеализацияВнеоборотныхАктивов
	|		ПО НематериальныеАктивы.Ссылка = втРеализацияВнеоборотныхАктивов.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияУслугПрочихАктивов КАК РеализацияУслугПрочихАктивов
	|		ПО (РеализацияУслугПрочихАктивов.Ссылка = втРеализацияВнеоборотныхАктивов.Ссылка)
	|ГДЕ
	|	НематериальныеАктивы.Ссылка В(&МассивОбъектов)
	|	И НематериальныеАктивы.ВидОбъектаУчета = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовУчетаНМА.НематериальныйАктив)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НематериальныеАктивы.Наименование";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений);
	
	Запрос.УстановитьПараметр("ТипРеализацияУслугПрочихАктивов", 
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.РеализацияУслугПрочихАктивов"));
		
	ОбъектыДляКоторыхСведенияНеАктуальны = ВнеоборотныеАктивы.ОбъектыДляКоторыхСведенияНеАктуальны(МассивОбъектов, ДатаСведений);
	Запрос.УстановитьПараметр("ОбъектыДляКоторыхСведенияНеАктуальны", ОбъектыДляКоторыхСведенияНеАктуальны);
		
	Результат = Запрос.Выполнить();
	
	Возврат Результат;

КонецФункции
	
#КонецОбласти

#Область Прочее

Функция ОписаниеЗапросаДляВыбора(Параметры, УстановитьВсеОтборы = Ложь) Экспорт

	ДоступныеКонтексты = Новый Структура("БУ,УУ"); // По умолчанию доступны все контексты.
	Если Параметры.Свойство("Контекст") Тогда
		ДоступныеКонтексты = Новый Структура(Параметры.Контекст);
	КонецЕсли;
	
	ОтборСписка = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Отбор", Новый Структура);
	
	Если ОтборСписка.Свойство("ОтражатьВРеглУчете")
		И НЕ ОтборСписка.ОтражатьВРеглУчете
		И ДоступныеКонтексты.Свойство("БУ") Тогда
		ДоступныеКонтексты.Удалить("БУ"); // Доступен выбор отражения в учете и в регл. учете нет отражения.
	КонецЕсли; 
	
	Если ОтборСписка.Свойство("ОтражатьВУпрУчете")
		И НЕ ОтборСписка.ОтражатьВУпрУчете
		И ДоступныеКонтексты.Свойство("УУ") Тогда
		ДоступныеКонтексты.Удалить("УУ"); // Доступен выбор отражения в учете и в упр. учете нет отражения.
	КонецЕсли; 
	
	Если Параметры.Свойство("ВариантПримененияЦелевогоФинансирования")
		И Параметры.ВариантПримененияЦелевогоФинансирования = Перечисления.ВариантыПримененияЦелевогоФинансирования.НеИспользуется Тогда
		ОтборСписка.Удалить("НаправлениеДеятельности");
	КонецЕсли;
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестоУчетаНМА) Тогда
		ОтборСписка.Удалить("Подразделение");
		ОтборСписка.Удалить("Организация");
	КонецЕсли;
	
	ДополнительныеПоля = "";
	ТекстСоединения = "";
	ТекстОтборы = "";
	ПараметрыЗапроса = Новый Структура;
	ДоступныеПоля = Новый Массив;
	
	Если (ДоступныеКонтексты.Свойство("БУ") ИЛИ ДоступныеКонтексты.Свойство("УУ"))
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестоУчетаНМА)
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаНМА) Тогда
		
		ПолеОрганизация = "ЕСТЬNULL(МестоУчетаНМА.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))";
		ПолеПодразделение = "ЕСТЬNULL(МестоУчетаНМА.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))";
		ПолеГФУ = "ЕСТЬNULL(ПорядокУчетаНМА.ГруппаФинансовогоУчета, ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаВнеоборотныхАктивов.ПустаяСсылка))";
		
		ТекстСоединения = ТекстСоединения + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоУчетаНМА.СрезПоследних(//ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ//) КАК МестоУчетаНМА
		|		ПО СправочникНематериальныеАктивы.Ссылка = МестоУчетаНМА.НематериальныйАктив
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМА.СрезПоследних(//ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ//) КАК ПорядокУчетаНМА
		|		ПО СправочникНематериальныеАктивы.Ссылка = ПорядокУчетаНМА.НематериальныйАктив
		|			И ПорядокУчетаНМА.Организация = МестоУчетаНМА.Организация";
		
	Иначе
		
		ПолеОрганизация = "ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
		ПолеПодразделение = "ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)";
		ПолеГФУ = "ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаВнеоборотныхАктивов.ПустаяСсылка)";
		
	КонецЕсли; 
	
	ДополнительныеПоля = ДополнительныеПоля + "
		|,%1 КАК Организация
		|,%2 КАК Подразделение
		|,%3 КАК ГруппаФинансовогоУчета";
	ДополнительныеПоля = СтрШаблон(ДополнительныеПоля, ПолеОрганизация, ПолеПодразделение, ПолеГФУ);
		
	Если ДоступныеКонтексты.Свойство("БУ")
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаНМАБУ) Тогда
		
		ДоступныеПоля.Добавить("СостояниеБУ");
		ДополнительныеПоля = ДополнительныеПоля + "
			|,ЕСТЬNULL(ПорядокУчетаНМАБУ.Состояние, ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.НеПринятКУчету)) КАК СостояниеБУ";
		
		ТекстСоединения = ТекстСоединения + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАБУ.СрезПоследних(//ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ//) КАК ПорядокУчетаНМАБУ
		|		ПО СправочникНематериальныеАктивы.Ссылка = ПорядокУчетаНМАБУ.НематериальныйАктив
		|			И ПорядокУчетаНМАБУ.Организация = МестоУчетаНМА.Организация";
		
	Иначе
		
		ДополнительныеПоля = ДополнительныеПоля + ",ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.НеПринятКУчету) КАК СостояниеБУ";
		
	КонецЕсли; 
	
	Если ДоступныеКонтексты.Свойство("УУ")
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаНМАУУ) Тогда
		
		ДополнительныеПоля = ДополнительныеПоля + "
			|,ЕСТЬNULL(ПорядокУчетаНМАУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.НеПринятКУчету)) КАК СостояниеУУ";
		
		ТекстСоединения = ТекстСоединения + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАУУ.СрезПоследних(//ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ//) КАК ПорядокУчетаНМАУУ
		|		ПО СправочникНематериальныеАктивы.Ссылка = ПорядокУчетаНМАУУ.НематериальныйАктив
		|			И ПорядокУчетаНМАУУ.Организация = МестоУчетаНМА.Организация";
		
		
	Иначе
		
		ДополнительныеПоля = ДополнительныеПоля + ",ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.НеПринятКУчету) КАК СостояниеУУ";
		
	КонецЕсли;
	
	ПараметрыСрезаПоследних = "";
	Если Параметры.Свойство("ДатаСведений") Тогда
		ПараметрыСрезаПоследних = "&ДатаСведений";
		ПараметрыЗапроса.Вставить("ДатаСведений", КонецДня(Параметры.ДатаСведений));
	КонецЕсли; 
	Если Параметры.Свойство("ТекущийРегистратор") Тогда
		ПараметрыСрезаПоследних = ПараметрыСрезаПоследних 
			+ ?(ПараметрыСрезаПоследних <> "", ", ", "") 
			+ "Регистратор <> &ТекущийРегистратор";
		ПараметрыЗапроса.Вставить("ТекущийРегистратор", Параметры.ТекущийРегистратор);
	КонецЕсли; 
	ТекстСоединения = СтрЗаменить(ТекстСоединения, "//ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ//", ПараметрыСрезаПоследних);
	
	ДоступенВыборУчета = ОтборСписка.Свойство("ОтражатьВРеглУчете") ИЛИ ОтборСписка.Свойство("ОтражатьВУпрУчете");
	
	Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаНМАУУ) 
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаНМАБУ) Тогда
	
		Если ОтборСписка.Свойство("Состояние") Тогда
			Если ДоступныеКонтексты.Свойство("БУ") И ДоступныеКонтексты.Свойство("УУ") Тогда
				Если ДоступенВыборУчета Тогда
					ТекстОтборы = "
					|	ЕСТЬNULL(ПорядокУчетаНМАБУ.Состояние, ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.НеПринятКУчету)) В(&Состояние)
					|	И ЕСТЬNULL(ПорядокУчетаНМАУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.НеПринятКУчету)) В(&Состояние)";
				Иначе
					ТекстОтборы = "
					|	(ЕСТЬNULL(ПорядокУчетаНМАБУ.Состояние, ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.НеПринятКУчету)) В(&Состояние)
					|		ИЛИ ЕСТЬNULL(ПорядокУчетаНМАУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.НеПринятКУчету)) В(&Состояние))";
				КонецЕсли; 
			ИначеЕсли ДоступныеКонтексты.Свойство("БУ") Тогда
				ТекстОтборы = "
				|	ЕСТЬNULL(ПорядокУчетаНМАБУ.Состояние, ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.НеПринятКУчету)) В(&Состояние)";
			ИначеЕсли ДоступныеКонтексты.Свойство("УУ") Тогда
				ТекстОтборы = "
				|	ЕСТЬNULL(ПорядокУчетаНМАУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.НеПринятКУчету)) В(&Состояние)";
			КонецЕсли;
			Если ТипЗнч(ОтборСписка.Состояние) = Тип("ФиксированныйМассив") Тогда
				ПараметрыЗапроса.Вставить("Состояние", Новый Массив(ОтборСписка.Состояние));
			Иначе
				ПараметрыЗапроса.Вставить("Состояние", ОтборСписка.Состояние);
			КонецЕсли;
			Параметры.Отбор.Удалить("Состояние");
		Иначе
			Если ДоступныеКонтексты.Свойство("БУ") И ДоступныеКонтексты.Свойство("УУ") Тогда
				ТекстОтборы = "
				|	(ЕСТЬNULL(ПорядокУчетаНМАБУ.Состояние, ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.НеПринятКУчету)) = &Состояние
				|		ИЛИ ЕСТЬNULL(ПорядокУчетаНМАУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.НеПринятКУчету)) = &Состояние
				|		ИЛИ &Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПустаяСсылка))";
			ИначеЕсли ДоступныеКонтексты.Свойство("БУ") Тогда
				ТекстОтборы = "
				|	(ЕСТЬNULL(ПорядокУчетаНМАБУ.Состояние, ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.НеПринятКУчету)) = &Состояние
				|		ИЛИ &Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПустаяСсылка))";
			ИначеЕсли ДоступныеКонтексты.Свойство("УУ") Тогда
				ТекстОтборы = "
				|	(ЕСТЬNULL(ПорядокУчетаНМАУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.НеПринятКУчету)) = &Состояние
				|		ИЛИ &Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПустаяСсылка))";
			КонецЕсли;
			Если ТекстОтборы <> "" Тогда
				ПараметрыЗапроса.Вставить("Состояние", Перечисления.ВидыСостоянийНМА.ПустаяСсылка());
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если УстановитьВсеОтборы Тогда
		
		Для каждого КлючИЗначение Из ОтборСписка Цикл
			
			Если НЕ ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			Если КлючИЗначение.Ключ = "Организация" Тогда
				ПутьКПолю = ПолеОрганизация;
			ИначеЕсли КлючИЗначение.Ключ = "Подразделение" Тогда
				ПутьКПолю = ПолеПодразделение;
			ИначеЕсли КлючИЗначение.Ключ = "ВидОбъектаУчета"
				ИЛИ КлючИЗначение.Ключ = "НаправлениеДеятельности" Тогда
				
				ПутьКПолю = "СправочникНематериальныеАктивы." + КлючИЗначение.Ключ;
			Иначе
				Продолжить;
			КонецЕсли;
			
			ЭтоМассив = ТипЗнч(КлючИЗначение.Значение) = Тип("ФиксированныйМассив") 
						ИЛИ ТипЗнч(КлючИЗначение.Значение) = Тип("Массив");
						
			ТекстОтборы = ТекстОтборы 
							+ Символы.ПС 
							+ ?(ТекстОтборы <> "", "И ","")
							+ ПутьКПолю 
							+ ?(ЭтоМассив, " В (&" + КлючИЗначение.Ключ + ")", " = &" + КлючИЗначение.Ключ);
							
			ПараметрыЗапроса.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла; 
		
	КонецЕсли; 
	
	ТекстПервые = "";
	Если Параметры.Свойство("СтрокаПоиска") Тогда
		ТекстОтборы = ТекстОтборы + "
		|" + ?(ТекстОтборы <> "", "И ","")
		+ "СправочникНематериальныеАктивы.Наименование ПОДОБНО &СтрокаПоиска
			|	И НЕ СправочникНематериальныеАктивы.ЭтоГруппа
			|	И НЕ СправочникНематериальныеАктивы.ПометкаУдаления";
		ТекстПервые = "РАЗРЕШЕННЫЕ ПЕРВЫЕ 10";
		ПараметрыЗапроса.Вставить("СтрокаПоиска", "%" + Параметры.СтрокаПоиска + "%");
	КонецЕсли;
	
	Если ТекстОтборы <> "" Тогда
		ТекстОтборы = "
		|ГДЕ
		|" + ТекстОтборы;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ //ПЕРВЫЕ//
	|	СправочникНематериальныеАктивы.Ссылка,
	|	СправочникНематериальныеАктивы.ПометкаУдаления,
	|	СправочникНематериальныеАктивы.Родитель,
	|	СправочникНематериальныеАктивы.ЭтоГруппа,
	|	СправочникНематериальныеАктивы.Код,
	|	СправочникНематериальныеАктивы.Наименование,
	|	СправочникНематериальныеАктивы.НаименованиеПолное,
	|	СправочникНематериальныеАктивы.ВидНМА,
	|	СправочникНематериальныеАктивы.АмортизационнаяГруппа,
	|	СправочникНематериальныеАктивы.ПрочиеСведения,
	|	СправочникНематериальныеАктивы.ВидОбъектаУчета,
	|	СправочникНематериальныеАктивы.ГруппаНМАМеждународныйУчет,
	|	СправочникНематериальныеАктивы.НаправлениеДеятельности
	|	//ДОПОЛНИТЕЛЬНЫЕ_ПОЛЯ//
	|ИЗ
	|	Справочник.НематериальныеАктивы КАК СправочникНематериальныеАктивы
	|	//СОЕДИНЕНИЯ//
	|	//ОТБОРЫ//";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДОПОЛНИТЕЛЬНЫЕ_ПОЛЯ//", ДополнительныеПоля);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//СОЕДИНЕНИЯ//", ТекстСоединения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ОТБОРЫ//", ТекстОтборы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ПЕРВЫЕ//", ТекстПервые);

	Возврат Новый Структура("ТекстЗапроса,ПараметрыЗапроса,ДоступныеПоля", ТекстЗапроса, ПараметрыЗапроса, ДоступныеПоля);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли