#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП
//	Возвращаемое значение:
//		Массив - имена блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт

	Результат = Новый Массив;
	Результат.Добавить("Валюта");
	Результат.Добавить("Периодичность");
	Результат.Добавить("ПланЗакупокПланироватьПоСумме;ПланЗакупокПланировать");
	Результат.Добавить("ПланПродажПланироватьПоСумме;ПланПродажПланировать");
	Результат.Добавить("ПланированиеПоНазначениям");
	
	Результат.Добавить("ИспользоватьВПланированииЗакупок");
	Результат.Добавить("ИспользоватьВПланированииОстатков");
	Результат.Добавить("ИспользоватьДляЗаказовПоставщику");
	Результат.Добавить("ИспользоватьВПланированииПродажПоКатегориям");
	Результат.Добавить("ИспользоватьРасчетПоСкоростиПродаж");
	Результат.Добавить("ИспользоватьВПланированииПродаж");
	Результат.Добавить("ИспользоватьВПланированииПроизводства");
	Результат.Добавить("ИспользоватьВПланированииСборкиРазборки");
	Результат.Добавить("ИспользоватьДляЗаказовНаСборкуРазборку");
	Результат.Добавить("ИспользоватьДляЗаказовНаПроизводство");
	Результат.Добавить("ИспользоватьДляЗаказовНаВнутреннееПотребление");
	Результат.Добавить("ИспользоватьДляПланированияМатериалов");
	Результат.Добавить("ПолучатьДанныеПлановВСтатусе");
	Результат.Добавить("Календарь");
	Результат.Добавить("СпособРасчетаПотребностейВМатериалах");
	//++ НЕ УТ
	Результат.Добавить("ОтражаетсяВБюджетировании");
	//-- НЕ УТ
	
	Возврат Результат;

КонецФункции

// Список статусов планов по сценарию
//
// Параметры:
//  Сценарий - СправочникСсылка.СценарииТоварногоПланирования	 - Сценарий по которому необходимо получать данные.
// 
// Возвращаемое значение:
//  СписокЗначений - Список статусов планов, которые разрешено получать.
//
Функция СписокСтатусовПланов(Сценарий) Экспорт 
	
	Если ЗначениеЗаполнено(Сценарий) Тогда
	
		Статус = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сценарий, "ПолучатьДанныеПлановВСтатусе");
	
	Иначе
	
		Статус = Перечисления.СтатусыПланов.ПустаяСсылка();
	
	КонецЕсли; 
	
	СписокСтатусов = Новый СписокЗначений;
	
	Если Статус = Перечисления.СтатусыПланов.Отменен Тогда
	
		СписокСтатусов.Добавить(Перечисления.СтатусыПланов.Отменен);
		СписокСтатусов.Добавить(Перечисления.СтатусыПланов.ВПодготовке);
		СписокСтатусов.Добавить(Перечисления.СтатусыПланов.НаУтверждении);
		
		
	ИначеЕсли Статус = Перечисления.СтатусыПланов.ВПодготовке Тогда
	
		СписокСтатусов.Добавить(Перечисления.СтатусыПланов.ВПодготовке);
		СписокСтатусов.Добавить(Перечисления.СтатусыПланов.НаУтверждении);
		
		
	ИначеЕсли Статус = Перечисления.СтатусыПланов.НаУтверждении Тогда
	
		СписокСтатусов.Добавить(Перечисления.СтатусыПланов.НаУтверждении);
		
	КонецЕсли; 
	
	СписокСтатусов.Добавить(Перечисления.СтатусыПланов.Утвержден);
	
	Возврат СписокСтатусов;

КонецФункции 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

//++ НЕ УТ

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СценарииТоварногоПланирования.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СценарииТоварногоПланирования КАК СценарииТоварногоПланирования
		|ГДЕ
		|	СценарииТоварногоПланирования.ИспользоватьДляПланированияМатериалов
		|	И СценарииТоварногоПланирования.СпособРасчетаПотребностейВМатериалах = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаМатериалов.ПустаяСсылка)");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.СценарииТоварногоПланирования";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(
		Параметры.Очередь, ПолноеИмяОбъекта, МенеджерВременныхТаблиц);
	
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	КОбработке.Ссылка КАК Ссылка,
		|	КОбработке.Ссылка.ВерсияДанных КАК ВерсияДанных
		|ИЗ
		|	ВТСсылкиДляОбработки КАК КОбработке";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТСсылкиДляОбработки", Результат.ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			Объект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(
				Выборка.Ссылка, Выборка.ВерсияДанных, Параметры.Очередь);
			
			Если Объект <> Неопределено Тогда
			
				ОбъектИзменен = Ложь;
				
				Если Объект.ИспользоватьДляПланированияМатериалов
					И Объект.СпособРасчетаПотребностейВМатериалах.Пустая() Тогда
					
					Объект.СпособРасчетаПотребностейВМатериалах = Перечисления.СпособыРасчетаМатериалов.ВероятноеПотребление;
					ОбъектИзменен = Истина;
					
				КонецЕсли;
				
				Если ОбъектИзменен Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Объект);
				КонецЕсли;
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

//-- НЕ УТ

#КонецОбласти

#КонецОбласти

#КонецЕсли
