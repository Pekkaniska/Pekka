
Функция Registration(Data)
	
	СтрТел = пкДесериализовать(Data.Получить());
	
	Ответ = Новый Структура;
	Ответ.Вставить("Ошибка"    ,пкСтруктураОшибки());
	Ответ.Вставить("Информация","");
	
	Попытка
		//НачатьТранзакцию();
		пкПроверкаКонфигурации(СтрТел,Ответ);
		
		МобильноеУстройство = Справочники.пкМобильныеУстройства.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрТел.ИнформацияОКонфигурации.ID));
	    СтрТел.Вставить("МобУстр",МобильноеУстройство);
		
		Если СтрТел.ТипРегистрации = "Новая регистрация" Тогда
			пкРегистрацияУстройства(СтрТел,Ответ);
		ИначеЕсли СтрТел.ТипРегистрации = "Подтверждение регистрации" Тогда
			пкПроверкаКодаАвторизации(СтрТел,Ответ);
		ИначеЕсли СтрТел.ТипРегистрации = "Отключение устройства" Тогда
			Ответ.Вставить("УстройствоОтвязано",ЛОЖЬ);
			пкОтключитьУстройство(СтрТел,Ответ);
		ИначеЕсли СтрТел.ТипРегистрации = "ОбновитьПараметрыПодключения" Тогда
			пкОбновитьПараметрыПодключения(СтрТел,Ответ);
		ИначеЕсли СтрТел.ТипРегистрации = "Проверка соединения" Тогда
			пкПроверкаСоединения(СтрТел,Ответ);
		ИначеЕсли СтрТел.ТипРегистрации = "Полная загрузка" Тогда
			пкПолнаяЗагрузка(СтрТел,Ответ);
		Иначе
			пкОбщийМодульСервер.пкЗаписатьОшибку(Ответ,"Не определен код операции код операции """ + СтрТел.ТипРегистрации + """, (код 1.2)",ОписаниеОшибки(),Истина);
		КонецЕсли;	
		//ЗафиксироватьТранзакцию();
	Исключение
		//Если ТранзакцияАктивна() Тогда
		//	ОтменитьТранзакцию();
		//КонецЕсли;	
		Инфо        = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(Инфо);
		пкОбщийМодульСервер.пкЗаписатьОшибку(Ответ,"Во время регистрации произошла ошибка (код 1.1)",ТекстОшибки,Истина);
	КонецПопытки;
	
	Возврат Новый ХранилищеЗначения(пкСериализовать(Ответ), Новый СжатиеДанных(9));
	
КонецФункции

Функция GetFile(Data)
	Рез              = пкДесериализовать(Data.Получить());
	мКаталог         = Константы.пкКаталогВременныхФайлов.Получить();
	
	Если Не ЗначениеЗаполнено(мКаталог) Тогда
		мКаталог = КаталогВременныхФайлов();
	КонецЕсли;	
	
	ТекПользователь  = ПользователиИнформационнойБазы.ТекущийПользователь();
	СпрПользователь  = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ",ТекПользователь.УникальныйИдентификатор);
	
	Если ЗначениеЗаполнено(СпрПользователь) Тогда
		ИмяФайла = пкПолучитьСвободноеИмяФайла(мКаталог + "\" + СпрПользователь,"xml","part");
	Иначе
		ИмяФайла = пкПолучитьСвободноеИмяФайла(мКаталог,"xml","part");
	КонецЕсли;	
	
	ДД       = Рез.Данные;
	ФайлЗаписан = ЛОЖЬ;
	СЧ = 0;
	Пока Не ФайлЗаписан Цикл
		Попытка
			ДД.Записать(ИмяФайла);
			ФайлЗаписан = Истина;
		Исключение
			СЧ       = СЧ + 1;
			ИмяФайла = пкПолучитьСвободноеИмяФайла(мКаталог,"xml","part",,СЧ);
		КонецПопытки;	
	КонецЦикла;
	
	ИмяФайла = СтрЗаменить(ИмяФайла,"\","/");
	
	Стр = Новый Структура("ИмяФайла",ИмяФайла);
	
	Возврат Новый ХранилищеЗначения (пкСериализовать(Стр),Новый СжатиеДанных(9));
КонецФункции

Процедура УстановитьПараметрСеансаПоТекущемуПользователю ()  Экспорт
	ТекПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	Если ТекПользователь <> Неопределено Тогда
		ТекПользовательМП = Справочники.пкПользователиМП.НайтиПоРеквизиту("ИдентификаторПользователяИБ",ТекПользователь.УникальныйИдентификатор);
		Если ТекПользовательМП <> Неопределено Тогда
			Пользователь = ТекПользовательМП.Пользователь;
			Если ЗначениеЗаполнено(Пользователь) Тогда
				ПараметрыСеанса.ТекущийПользователь = Пользователь;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры	

#ОБЛАСТЬ ПОЛНАЯЗАГРУЗКА 

Процедура пкПолнаяЗагрузка (СтрТел,Ответ)
	Попытка
		//Выборка = РегистрыСведений.пкМобильныеКонфигурации.Выбрать(Новый Структура("МобильноеУстройство", СтрТел.МобУстр)); 
		пкМобильныеУстройства.пкСоздатьНачальныйОбраз(СтрТел.МобУстр);
		Ответ.Вставить("Информация","Данные зарегистрированы, выполните синхронизацию!");	
	Исключение
		ЗаписьЖурналаРегистрации(ОписаниеОшибки());
		пкОбщийМодульСервер.пкЗаписатьОшибку(Ответ, "Не удалось выполнить регистрацию изменений для обмена!"); 
	КонецПопытки;
КонецПроцедуры	

#КОНЕЦОБЛАСТИ

#ОБЛАСТЬ ВСПОМОГАТЕЛЬНЫЕФУНКЦИИ 

Функция пкСтруктураОшибки ()
	Структура = Новый Структура;
	Структура.Вставить("ЕстьОшибка", Ложь); 
	Структура.Вставить("ТекстОшибки",""); 
	Возврат Структура;
КонецФункции	

Процедура пкПроверкаКонфигурации(СтрТел,Ответ)
	Если СтрТел.ИнформацияОКонфигурации.Конфигурация = "PekkaniskaMobile" Тогда 
		
		НомерВерсии      = СтрТел.ИнформацияОКонфигурации.ВерсияПриложения;
		АктуальнаяВерсия = Константы.пкМинимальнаяВерсияМП.Получить();
		
		Если пкТребуетсяОбновление(НомерВерсии,АктуальнаяВерсия) Тогда 
			пкОбщийМодульСервер.пкЗаписатьОшибку(Ответ, "Версия вашей конфигурации старая! Обновите конфигурацию! (Код 2-2)");	
		ИначеЕсли Константы.пкНедоступенДоступенОбмен.Получить() Тогда
			пкОбщийМодульСервер.пкЗаписатьОшибку(Ответ, "Обмен с мобильными устройствами временно заблокирован!"); 
		Иначе
			Соединения = ПолучитьСоединенияИнформационнойБазы();
			Для Каждого Соединение Из Соединения Цикл
				Если Соединение.Пользователь.Имя = "Exchange" И Соединение.ИмяПриложения = "COMConnection" Тогда
					пкОбщийМодульСервер.пкЗаписатьОшибку(Ответ, "Обмен с мобильными устройствами временно заблокирован - происходит обмен с ЦБ!"); 	
				ИначеЕсли Соединение.ИмяПриложения = "WebServerExtension" И ПользователиИнформационнойбазы.ТекущийПользователь() = Соединение.Пользователь
					И  ПользователиИнформационнойбазы.НомерСеанса <> НомерСеансаИнформационнойБазы() Тогда
					пкОбщийМодульСервер.пкЗаписатьОшибку(Ответ, "Уже производится обмен с данным устройством в фоновом режиме!"); 	
				КонецЕсли;
     		КонецЦикла;
		КонецЕсли;
		
		Запрос              = Новый Запрос;
		МобильноеУстройство = Справочники.пкМобильныеУстройства.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрТел.ИнформацияОКонфигурации.ID));
		Запрос.УстановитьПараметр("МобильноеУстройство",МобильноеУстройство);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЧ.МобильноеУстройство,
		|	ТЧ.Конфигурация,
		|	ТЧ.ВерсияКонфигурации,
		|	ТЧ.Пользователь,
		|	ТЧ.КодПодтверждения,
		|	ТЧ.Почта,
		|	ТЧ.ДатаРегистрации,
		|	ТЧ.Узел
		|ИЗ
		|	РегистрСведений.пкМобильныеКонфигурации КАК ТЧ
		|ГДЕ
		|	ТЧ.МобильноеУстройство = &МобильноеУстройство";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.Конфигурация <> СтрТел.ИнформацияОКонфигурации.Конфигурация Или  Выборка.ВерсияКонфигурации <> СтрТел.ИнформацияОКонфигурации.ВерсияПриложения Тогда
				Запись                     = РегистрыСведений.пкМобильныеКонфигурации.СоздатьМенеджерЗаписи();
				Запись.МобильноеУстройство = МобильноеУстройство;
				Запись.Прочитать();
				ЗаполнитьЗначенияСвойств(Запись,Выборка);
				Запись.Конфигурация        = СтрТел.ИнформацияОКонфигурации.Конфигурация;
				Запись.ВерсияКонфигурации  = СтрТел.ИнформацияОКонфигурации.ВерсияПриложения;
				Запись.Записать(Истина);
			КонецЕсли;	
		КонецЕсли;	
		
		Ответ.Вставить("АктуальнаяВерсия",Константы.пкАктуальнаяВерсияМП.Получить());
	Иначе 
		пкОбщийМодульСервер.пкЗаписатьОшибку(Ответ, "Ваша конфигурация не поддерживается этим сервером! (Код 2-1)"); 
	КонецЕсли; 
	//тут же можно проверить что угодно, в том числе операционную систему, версию платформы и т.д.
КонецПроцедуры

Процедура пкПроверкаСоединения(СтрТел,Ответ) 
	Выборка = РегистрыСведений.пкМобильныеКонфигурации.Выбрать(Новый Структура("МобильноеУстройство", СтрТел.МобУстр)); 
	Если НЕ Выборка.Следующий() Тогда 
		Ответ.Информация = "Соединение установлено! Но текущее устройство не зарегистрировано в системе (Код 5-1)"; 
	Иначе 
		Ответ.Информация = "Соединение установлено! Устройство готово к работе!" + Символы.ПС + 
		"Устройство зарегистрировано на " + Выборка.Пользователь; 
	КонецЕсли; 
КонецПроцедуры

Функция пкТребуетсяОбновление (ВерсияПриложения, АктуальнаяВерсия)
	НомераВерсииПриложения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВерсияПриложения,".");
	НомераАктуальнойВерсии = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(АктуальнаяВерсия,".");
	
	Если НомераАктуальнойВерсии.Количество() <> 3 Или НомераВерсииПриложения.Количество() <> 3 Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Для СЧ = 0 По 2 Цикл
		Если Число(НомераВерсииПриложения[Сч]) < Число(НомераАктуальнойВерсии[СЧ]) Тогда
			Возврат Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Ложь;	
КонецФункции	

#КОНЕЦОБЛАСТИ    

#ОБЛАСТЬ РЕГИСТРАЦИЯУСТРОЙСТВА  

Процедура пкРегистрацияУстройства (СтрТел, Ответ)
	Если СтрТел.ИнформацияОКонфигурации.Свойство("СтарыйID") Тогда
		пкОтключитьУстройство(СтрТел,Ответ);
	КонецЕсли;
	
	Пользователь        = пкСинхронизацияСерверПереопределяемый.пкНайтиПользователя(СтрТел.АвторизационныеДанные,Ответ);
	МобильноеУстройство = СтрТел.МобУстр;
	
	Если ЗначениеЗаполнено(МобильноеУстройство.Код) Тогда
		МобУстр = МобильноеУстройство.ПолучитьОбъект();
	Иначе
		МобУстр = Справочники.пкМобильныеУстройства.СоздатьЭлемент();
		МобУстр.УстановитьСсылкуНового(МобильноеУстройство);
	КонецЕсли;	
	
	МобУстр.Наименование = "" + СтрТел.ИнформацияОКонфигурации.ID + " " + СтрТел.ИнформацияОКонфигурации.Конфигурация;
	
	ЗаполнитьЗначенияСвойств(МобУстр,СтрТел.СистемнаяИнформация);
	
	МобУстр.Записать();
	
	// Записываем информацию в регистр //
	Отбор      = Новый Структура("МобильноеУстройство", МобУстр.Ссылка); 
	ВыборкаТел = РегистрыСведений.пкМобильныеКонфигурации.Выбрать(Отбор); 
	Если ВыборкаТел.Следующий() Тогда 
		//если ID уже есть в базе, то мы считаем, что человек получил устройство в наследство 
		//закрываем доступ к текущему ID. 
		Рег = ВыборкаТел.ПолучитьМенеджерЗаписи(); 
	Иначе 
		Рег = РегистрыСведений.пкМобильныеКонфигурации.СоздатьМенеджерЗаписи(); 
	КонецЕсли; 
	#Область ЗаписываемДанныеВРегистр 
	Рег.МобильноеУстройство = МобУстр.Ссылка; 
	Рег.ВерсияКонфигурации  = СтрТел.ИнформацияОКонфигурации.ВерсияПриложения; 
	Рег.Конфигурация        = СтрТел.ИнформацияОКонфигурации.Конфигурация; 
	//тут генерируем специально число, таким образом реализуя двух факторную авторизацию 
	Если пкСинхронизацияСерверПереопределяемый.пкИспользоватьДвухФакторнуюАвторизацию() Тогда
		ГСЧ                  = Новый ГенераторСлучайныхЧисел; 
		КодПодтверждения     = ГСЧ.СлучайноеЧисло(100000,999999); 
		Рег.КодПодтверждения = КодПодтверждения;
	КонецЕсли;
	Рег.Пользователь     = Пользователь; 
	//Рег.НомерТелефона    = СтрТел.АвторизационныеДанные.НомерТелефона; 
	Рег.Почта            = СтрТел.АвторизационныеДанные.Почта; 
	Рег.Узел             = ПланыОбмена.пкОбменСМобильнымиУстройствами.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрТел.ИнформацияОКонфигурации.ID));
	Рег.Записать(); 
	#КонецОбласти
	
	Если пкСинхронизацияСерверПереопределяемый.пкИспользоватьДвухФакторнуюАвторизацию() Тогда
		Если СтрТел.АвторизационныеДанные.КодСотрудника <> "AUTO" Тогда
			#Область ОтправкаПочтыИлиСМС 
			//Теперь отправим письмо по почте с кодом авторизации 
			ПочтаФизЛица = пкСинхронизацияСерверПереопределяемый.пкНайтиПочтуПользователя(Пользователь, Ответ);
			МассивПочт   = Новый Массив; 
			МассивПочт.Добавить(ПочтаФизЛица); 
			пкОтправкаЭлектроннойПочты(МассивПочт, "Код доступа", Формат(Рег.КодПодтверждения,"ЧГ=0"), Новый Массив, Ответ); 
			#КонецОбласти
		Иначе
			Ответ.Вставить("КодАвторизации",КодПодтверждения);
		КонецЕсли;
	Иначе
		// СОЗДАНИЕ УЗЛА МОБИЛЬНОГО УСТРОЙСТВА //
		пкСозданиеУзлаМобильногоУстройства(Ответ,СтрТел);
		//пкМобильныеУстройства.пкСоздатьНачальныйОбраз(СтрТел.МобУстр);
		
		
//++ Рарус Лимаренко 31.01.2019
		Параметры = Новый Массив;
		Параметры.Добавить(СтрТел.МобУстр);
		
		ФоновыеЗадания.Выполнить("пкМобильныеУстройства.пкСоздатьНачальныйОбраз",Параметры,
		Новый УникальныйИдентификатор,"Создание начального образа для"+" "+Строка(Пользователь));
		
//-- Рарус Лимаренко 31.01.2019

		Выборка = РегистрыСведений.пкМобильныеКонфигурации.Выбрать(Новый Структура("МобильноеУстройство", СтрТел.МобУстр)); 
		//тут мы уверены что запись 100% есть в регистре. Записываем все что нам нужно, удаляем лишнее. 
		Выборка.Следующий(); 
		ЗапРег                  = Выборка.ПолучитьМенеджерЗаписи(); 
		ЗапРег.ДатаРегистрации  = ТекущаяУниверсальнаяДата();
		ЗапРег.КодПодтверждения = ""; 
		ЗапРег.Записать();
	
		СтруктураПодключения              = пкСтруктураСоединенияСЦентральнойБазой(); 
		СтруктураПодключения.Пользователь = СокрЛП(Пользователь.Наименование); 
		//СтруктураПодключения.Пароль       = Пароль; 
	
		//Если у нас все прошло без ошибок, то мы тогда возвращаем человеку его данные подключения к ЦБ. 
		Ответ.Вставить("СтруктураСоединенияСЦентральнойБазой",СтруктураПодключения);
		Ответ.Информация = "Код авторизации подтвержден!";
	КонецЕсли;
	
	Ответ.Вставить("Пользователь",Пользователь);

	Ответ.Информация = "Устройство зарегистрировано!";
КонецПроцедуры

Функция пкОтправкаЭлектроннойПочты(ПолучателиЭлПочты, ТемаЭлПочты, ТекстЭлПочты, СписокВложенийЭлПочты, Ответ) Экспорт 
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	Профиль       = пкОбщийМодульСервер.пкПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	
	Почта  = Новый ИнтернетПочта; 
	Письмо = Новый ИнтернетПочтовоеСообщение; 
	Текст  = Письмо.Тексты.Добавить("Введите этот код в мобильном устройстве. " + ТекстЭлПочты); 
	
	Текст.ТипТекста       = ТипТекстаПочтовогоСообщения.ПростойТекст; 
	Письмо.Тема           = "Регистрация мобильного устройства"; 
	Письмо.Отправитель    = УчетнаяЗапись.АдресЭлектроннойПочты; 
	Письмо.ИмяОтправителя = "Сервисная почта"; 
	
	Для Каждого Стр Из ПолучателиЭлПочты Цикл 
		Письмо.Получатели.Добавить(Стр); 
	КонецЦикла; 
	
	Попытка 
		Почта.Подключиться(Профиль); 
		Почта.Послать(Письмо); 
	Исключение 
		пкОбщийМодульСервер.пкЗаписатьОшибку(Ответ, "Ошибка отправки почты. (Код 3-1)",ОписаниеОшибки()); 
	КонецПопытки;
	
	Почта.Отключиться(); 
КонецФункции

Процедура пкСозданиеУзлаМобильногоУстройства (Ответ,СтрТел)
	УстановитьПривилегированныйРежим(Истина);
	
	ЭтотУзел = ПланыОбмена.пкОбменСМобильнымиУстройствами.ЭтотУзел(); 
	Если Не ЗначениеЗаполнено(ЭтотУзел.Код) Тогда
		Объект              = ЭтотУзел.ПолучитьОбъект();
		Объект.Код          = "ЦБ";
		Объект.Наименование = "Центральная база данных";
		Объект.Записать();
	КонецЕсли;	
	
	СтрОбм = Новый Структура;
	СтрОбм.Вставить("КодГлавногоУзла",ЭтотУзел.Код);
	
	СтруктураУзлаГлавнойБазы = Новый Структура("Наименование,Код,ПометкаУдаления");
	ЗаполнитьЗначенияСвойств(СтруктураУзлаГлавнойБазы,ЭтотУзел);
	СтруктураУзлаГлавнойБазы.Вставить("УникальныйИдентификатор",ЭтотУзел.УникальныйИдентификатор());
	СтрОбм.Вставить("УзелГлавнойБазы",СтруктураУзлаГлавнойБазы);
	
	ДлинаКодаУзла = 4;
	
	КодНовогоУзла = Формат(1,"ЧЦ=" + ДлинаКодаУзла + "; ЧВН=; ЧГ=0");
	КодУзла       = "";
	
	Выборка = ПланыОбмена.пкОбменСМобильнымиУстройствами.Выбрать(,"Код Убыв");
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка = ЭтотУзел Тогда
			Продолжить;
		КонецЕсли;
		КодУзла = Формат(Число(Выборка.Код) + 1,"ЧЦ=" + ДлинаКодаУзла + "; ЧВН=; ЧГ=0");
		Прервать;		
	КонецЦикла;	
	
	мМаксКод = Константы.пкМаксимальныйНомерУзлаОбмена.Получить();
	Если Не ПустаяСтрока(мМаксКод) Тогда
		КодУзла = Макс(КодУзла, Формат(Число(мМаксКод) + 1,"ЧЦ=" + ДлинаКодаУзла + "; ЧВН=; ЧГ=0"));
	КонецЕсли;	
	
	Если ПустаяСтрока(КодУзла) Тогда 
		КодУзла = КодНовогоУзла;
	КонецЕсли;	
	
	Константы.пкМаксимальныйНомерУзлаОбмена.Установить(КодУзла);
	
	СсылкаНаУзел = ПланыОбмена.пкОбменСМобильнымиУстройствами.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрТел.ИнформацияОКонфигурации.ID));
	Если СсылкаНаУзел.ПолучитьОбъект() = Неопределено Тогда
		НовыйУзел              = ПланыОбмена.пкОбменСМобильнымиУстройствами.СоздатьУзел();
		НовыйУзел.УстановитьСсылкуНового(СсылкаНаУзел);
		НовыйУзел.Код          = КодУзла;
		НовыйУзел.Наименование = СтрТел.ИнформацияОКонфигурации.ID;
		НовыйУзел.Записать();
	//Иначе
	//	пкОбщийМодульСервер.пкЗаписатьОшибку(Ответ,"Текущее устройство уже подключено! (код ошибки 2.11)");
	КонецЕсли;	
	
	СтрОбм.Вставить("КодУзлаМобУстр"         ,СсылкаНаУзел.Код);
	Ответ.Вставить("ДанныеДляНастройкиОбмена",СтрОбм);
	
	УстановитьПривилегированныйРежим(ЛОЖЬ);
	
КонецПроцедуры	

#КОНЕЦОБЛАСТИ    

#ОБЛАСТЬ ОТКЛЮЧЕНИЕУСТРОЙСТВА

Процедура пкОтключитьУстройство (СтрТел, Ответ)
	СтарыйID = "";
	СтрТел.ИнформацияОКонфигурации.Свойство("СтарыйID",СтарыйID);
	Если ЗначениеЗаполнено(СтарыйID) Тогда
 		// Удаляем всю связанную информацию//
		мУстройство       = Справочники.пкМобильныеУстройства.ПолучитьСсылку(Новый УникальныйИдентификатор(СтарыйID));
		мУстройствоОбъект = мУстройство.ПолучитьОбъект();
		Если мУстройствоОбъект <> Неопределено Тогда
			мУстройствоОбъект.ОбменДанными.Загрузка = Истина;
			мНабор                       = РегистрыСведений.пкМобильныеКонфигурации.СоздатьНаборЗаписей();
			мНабор.ОбменДанными.Загрузка = Истина;
			мНабор.Отбор.МобильноеУстройство.Установить(мУстройство);
			мНабор.Прочитать();
			Для Каждого Запись Из мНабор Цикл
				Запись.Узел = Неопределено;
			КонецЦикла;	
			мНабор.Записать(Истина);
		КонецЕсли;
		мУзел = ПланыОбмена.пкОбменСМобильнымиУстройствами.ПолучитьСсылку(Новый УникальныйИдентификатор(СтарыйID));
		мУзелОбъект = мУзел.ПолучитьОбъект();
		Если мУзелОбъект <> Неопределено Тогда
			УстановитьПривилегированныйРежим(Истина);
			мУзелОбъект.Удалить();
			УстановитьПривилегированныйРежим(ЛОЖЬ);
		КонецЕсли;	
	КонецЕсли;	
	Ответ.Вставить("УстройствоОтвязано",Истина);
КонецПроцедуры	

#КОНЕЦОБЛАСТИ

#ОБЛАСТЬ ПОДТВЕРЖДЕНИЕРЕГИСТРАЦИИ 

Процедура пкПроверкаКодаАвторизации (СтрТел,Ответ)
	
	Запрос = Новый Запрос; 
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МобильныеУстройства.Пользователь
	|ИЗ
	|	РегистрСведений.пкМобильныеКонфигурации КАК МобильныеУстройства
	|ГДЕ
	|	МобильныеУстройства.МобильноеУстройство = &МобильноеУстройство
	|	И МобильныеУстройства.КодПодтверждения = &КодПодтверждения"; 
	Запрос.УстановитьПараметр("МобильноеУстройство", СтрТел.МобУстр); 
	Запрос.УстановитьПараметр("КодПодтверждения", СтрТел.КодПодтверждения); 
	РезультатЗапроса = Запрос.Выполнить().Выгрузить(); 
	//Нам нужен пользователь, ему мы будем менять пароль, если не найденно ни одной строки - значит код не верный 
	//Ну или не было предварительной авторизации устройства. 
	Если РезультатЗапроса.Количество() <> 1 Тогда 
		пкОбщийМодульСервер.пкЗаписатьОшибку(Ответ, "Ошибка подтверждения. Возможно указан не верный код подтверждения. (Код 4-1)"); 
	КонецЕсли;
	
	Пользователь = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(РезультатЗапроса[0].Пользователь.ИдентификаторПользователяИБ); 
	Если Пользователь = Неопределено ИЛИ Пользователь.Имя = "" Тогда //разные результаты у разных платформ 
		пкОбщийМодульСервер.пкЗаписатьОшибку(Ответ, "Не найден пользователь. Обратитесь к администратору! (Код 4-2)"); 
	КонецЕсли;
	
	Если пкСинхронизацияСерверПереопределяемый.пкДоступнаРегистрацияПользователей() Тогда
		//Если у найденного пользователя стандартная аутенфикация, то мы меняем ему пароль. 
		//Если же у него отключена стандартная аутенфикация, то значит либо он отключен, либо юзает виндовс авторизацию. 
		//По любому - нас другие случаи не интересуют. 
		Пароль = ""; 
		Если Пользователь.АутентификацияСтандартная Тогда 
			ГСЧ                 = Новый ГенераторСлучайныхЧисел(); 
			Пароль              = Формат(ГСЧ.СлучайноеЧисло(10000000, 99999999),"ЧГ="); 
			Пользователь.Пароль = Пароль; 
			Пользователь.Записать(); 
		Иначе 
			пкОбщийМодульСервер.пкЗаписатьОшибку(Ответ, "Ваш пользователь заблокирован. Обратитесь к администратору(Код 4-3)"); 
		КонецЕсли;
	КонецЕсли;
	
	пкСозданиеУзлаМобильногоУстройства(Ответ,СтрТел);
	
	пкМобильныеУстройства.пкСоздатьНачальныйОбраз(СтрТел.МобУстр);
			
	Выборка = РегистрыСведений.пкМобильныеКонфигурации.Выбрать(Новый Структура("МобильноеУстройство", СтрТел.МобУстр)); 
	//тут мы уверены что запись 100% есть в регистре. Записываем все что нам нужно, удаляем лишнее. 
	Выборка.Следующий(); 
	ЗапРег                  = Выборка.ПолучитьМенеджерЗаписи(); 
	ЗапРег.ДатаРегистрации  = ТекущаяУниверсальнаяДата();
	ЗапРег.КодПодтверждения = ""; 
	ЗапРег.Записать();
	
	СтруктураПодключения              = пкСтруктураСоединенияСЦентральнойБазой(); 
	СтруктураПодключения.Пользователь = СокрЛП(Пользователь.Имя); 
	СтруктураПодключения.Пароль       = Пароль; 
	
	//Если у нас все прошло без ошибок, то мы тогда возвращаем человеку его данные подключения к ЦБ. 
	Ответ.Вставить("СтруктураСоединенияСЦентральнойБазой",СтруктураПодключения);
	Ответ.Информация = "Код авторизации подтвержден!";
КонецПроцедуры	

Функция пкСтруктураСоединенияСЦентральнойБазой() 
	Структура = Новый Структура; 
	
	//Тут мы можем или всем давать один и тот же логин пароль, или избирать их. 
	//Мы рассматриваем более сложный случай - когда у каждого пользователя свой пароль. 
	Структура.Вставить("Пользователь",""); 
	Структура.Вставить("Пароль"      ,""); 
	
	//Так же - можно и указать куда подключать пользователя. На данный момент - у нас все происходит в одной и той же базе. 
	//Однако, можно сделать так, что эта база - будет авторизационная, а перенаправлять будет - в реальную. 
	//Но мы этот момент пропустим. 
	Мета = Метаданные.WebСервисы.пкDataTransfer;
	
	Структура.Вставить("Адрес"                     ,Константы.пкАдресРабочегоСервиса.Получить()); 
	Структура.Вставить("URIПространстваИменСервиса",Мета.ПространствоИмен); 
	Структура.Вставить("ИмяСервиса"                ,Мета.Имя); 
	Структура.Вставить("ИмяФункции"                ,"Sync"); 
	
	Возврат Структура; 
КонецФункции

Процедура пкОбновитьПараметрыПодключения (СтрТел,Ответ)
	Запрос = Новый Запрос; 
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МобильныеУстройства.Пользователь
	|ИЗ
	|	РегистрСведений.пкМобильныеКонфигурации КАК МобильныеУстройства
	|ГДЕ
	|	МобильныеУстройства.МобильноеУстройство = &МобильноеУстройство"; 
	Запрос.УстановитьПараметр("МобильноеУстройство", СтрТел.МобУстр); 
	РезультатЗапроса = Запрос.Выполнить().Выгрузить(); 
	//Нам нужен пользователь, ему мы будем менять пароль, если не найденно ни одной строки - значит код не верный 
	//Ну или не было предварительной авторизации устройства. 
	Если РезультатЗапроса.Количество() <> 1 Тогда 
		пкОбщийМодульСервер.пкЗаписатьОшибку(Ответ, "Ошибка подтверждения. Возможно указан не верный код подтверждения. (Код 4-1)"); 
	КонецЕсли;
	
	Пользователь = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(РезультатЗапроса[0].Пользователь.ИдентификаторПользователяИБ); 
	Если Пользователь = Неопределено ИЛИ Пользователь.Имя = "" Тогда //разные результаты у разных платформ 
		пкОбщийМодульСервер.пкЗаписатьОшибку(Ответ, "Не найден пользователь. Обратитесь к администратору! (Код 4-2)"); 
	КонецЕсли;
	
	//Если у найденного пользователя стандартная аутенфикация, то мы меняем ему пароль. 
	//Если же у него отключена стандартная аутенфикация, то значит либо он отключен, либо юзает виндовс авторизацию. 
	//По любому - нас другие случаи не интересуют. 
	Пароль = ""; 
	//Пользователь.АутентификацияСтандартная = Истина;
	Если Пользователь.АутентификацияСтандартная Тогда 
		ГСЧ                 = Новый ГенераторСлучайныхЧисел(); 
		Пароль              = Формат(ГСЧ.СлучайноеЧисло(10000000, 99999999),"ЧГ="); 
		Пользователь.Пароль = Пароль; 
		Пользователь.Записать(); 
	Иначе 
		пкОбщийМодульСервер.пкЗаписатьОшибку(Ответ, "Ваш пользователь заблокирован. Обратитесь к администратору(Код 4-3)"); 
	КонецЕсли;
	
	Выборка = РегистрыСведений.пкМобильныеКонфигурации.Выбрать(Новый Структура("МобильноеУстройство", СтрТел.МобУстр)); 
	//тут мы уверенны что запись 100% есть в регистре. Записываем все что нам нужно, удаляем лишнее. 
	Выборка.Следующий(); 
	ЗапРег                  = Выборка.ПолучитьМенеджерЗаписи(); 
	ЗапРег.КодПодтверждения = ""; 
	ЗапРег.Записать();
	
	СтруктураПодключения              = пкСтруктураСоединенияСЦентральнойБазой(); 
	СтруктураПодключения.Пользователь = СокрЛП(Пользователь.Имя); 
	СтруктураПодключения.Пароль       = Пароль; 
	
	//Если у нас все прошло без ошибок, то мы тогда возвращаем человеку его данные подключения к ЦБ. 
	Ответ.Вставить("СтруктураСоединенияСЦентральнойБазой",СтруктураПодключения);
	Ответ.Информация = "Параметры подключения обновлены!";
КонецПроцедуры	

#КОНЕЦОБЛАСТИ

Функция Sync(Data)
	
	УстановитьПривилегированныйРежим(Истина);	
	
	мЗапрос = Data.Получить();
	
	СтрТел = пкДесериализовать(мЗапрос);
	
	Ответ = Новый Структура;
	Ответ.Вставить("Ошибка",пкСтруктураОшибки());
	Ответ.Вставить("Информация","");
	
	Если ТипЗнч(СтрТел) = Тип ("Массив") Тогда
		Если СтрТел.Количество() > 0 Тогда
			Попытка
				ИмяВФ = ПолучитьИмяВременногоФайла("xml");
				ОбъединитьФайлы(СтрТел,ИмяВФ);
				Для Каждого Файл Из СтрТел Цикл
					УдалитьФайлы(Файл);
				КонецЦикла;	
				Чтение = Новый ЧтениеТекста;
				Чтение.Открыть(ИмяВФ);
				Рез    = Чтение.Прочитать();
				Данные = пкДесериализовать(Рез);
				СтрТел = пкДесериализовать(Данные.Данные.Получить());
				Чтение.Закрыть();
				УдалитьФайлы(ИмяВФ);
				ЭтоМассив = Истина;
			Исключение
				мОшибка = ИнформацияОбОшибке();
				ЗаписьЖурналаРегистрации(ПодробноеПредставлениеОшибки(мОшибка),УровеньЖурналаРегистрации.Ошибка);
				ВызватьИсключение "Файлы не переданы на сервер!";			
			КонецПопытки;
		КонецЕсли;
	Иначе
		ЭтоМассив = ЛОЖЬ;
	КонецЕсли;	
	
	
//++ Рарус Лимаренко 31.01.2019	
	МассивФоновых = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Состояние,Наименование",
	СостояниеФоновогоЗадания.Активно,"Создание начального образа для"+" "+Строка(СтрТел.ТекПользователь)));
	
	Если МассивФоновых.Количество() > 0 Тогда
	
		пкОбщийМодульСервер.пкЗаписатьОшибку(Ответ,"Не закончился этап формирования первичного снимка в Центральной базе, попробуйте позже",ОписаниеОшибки(),Истина);	
		мОтвет = пкСериализовать(Ответ);
		
		пкЛогироватьСообщение(мОтвет,СтрТел, "OUT");
		Возврат Новый ХранилищеЗначения(мОтвет,Новый СжатиеДанных(9));
	КонецЕсли;
//-- Рарус Лимаренко 31.01.2019
	
	Попытка
		пкПроверкаКонфигурации(СтрТел,Ответ);
		МобильноеУстройство = Справочники.пкМобильныеУстройства.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрТел.ИнформацияОКонфигурации.ID));
		
		УстановитьПараметрСеансаПоТекущемуПользователю();
		//НачатьТранзакцию();
	
		СтрТел.Вставить("МобУстр",МобильноеУстройство);
		СтрТел.Вставить("Узел"   ,ПланыОбмена.пкОбменСМобильнымиУстройствами.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрТел.ИнформацияОКонфигурации.ID)));
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	пкМобильныеКонфигурации.Пользователь
		               |ИЗ
		               |	РегистрСведений.пкМобильныеКонфигурации КАК пкМобильныеКонфигурации
		               |ГДЕ
		               |	пкМобильныеКонфигурации.МобильноеУстройство = &МобильноеУстройство";
		Запрос.УстановитьПараметр("МобильноеУстройство",МобильноеУстройство);
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		СтрТел.Вставить("ТекПользователь",Выборка.Пользователь);
		
		ПараметрыСеанса.ТекущийПользователь = Выборка.Пользователь.Пользователь;
		
		Если ЭтоМассив Тогда
			пкЛогироватьСообщение(Рез    ,СтрТел,"IN");	
		Иначе	
			пкЛогироватьСообщение(мЗапрос,СтрТел,"IN");	
		КонецЕсли;
		
		пкОчиститьЛишниеЛоги(СтрТел);
		
#ОБЛАСТЬ ЗАГРУЗКАДАННЫХ		
		// Rarus-spb byse {
		ИменаПоПодсистемам = ИменаДокументовПоПодсистемам();
		// Rarus-spb byse }
		УзелОбмена = СтрТел.Узел;
		Для Каждого Эл Из СтрТел.ПакетОбмена Цикл
			Если Справочники.ТипВсеСсылки().СодержитТип(Эл.Ключ) Тогда 			
#ОБЛАСТЬ ПОДГОТОВКАКЗАГРУЗКЕСПРАВОЧНИКОВ			
				Мета     = Метаданные.НайтиПоТипу(Эл.Ключ);
				
				СтруктураРеквизитов = Новый Соответствие;
				СтруктураРеквизитовЭлемента = "";
				СтруктураРеквизитовГруппы   = "";
				
				Для Каждого Реквизит Из Мета.Реквизиты Цикл 
					Если Эл.Значение.Колонки.Найти(Реквизит.Имя) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					Если Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента Тогда
						СтруктураРеквизитовЭлемента = СтруктураРеквизитовЭлемента + Реквизит.Имя + ",";
					ИначеЕсли Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы Тогда
						СтруктураРеквизитовГруппы   = СтруктураРеквизитовГруппы + Реквизит.Имя + ",";
					Иначе 
						СтруктураРеквизитовЭлемента = СтруктураРеквизитовЭлемента + Реквизит.Имя + ",";
						СтруктураРеквизитовГруппы   = СтруктураРеквизитовГруппы + Реквизит.Имя + ",";
					КонецЕсли;	
				КонецЦикла;	
				
				Для Каждого Реквизит Из Мета.СтандартныеРеквизиты Цикл 
					Если Эл.Значение.Колонки.Найти(Реквизит.Имя) = Неопределено 
						Или Найти("Ссылка,ВерсияДанных,ЭтоГруппа,ИмяПредопределенныхДанных,Предопределенный",Реквизит.Имя) > 0 Тогда
						Продолжить;
					КонецЕсли;	
					
					СтруктураРеквизитовЭлемента = СтруктураРеквизитовЭлемента + Реквизит.Имя + ",";
					СтруктураРеквизитовГруппы   = СтруктураРеквизитовГруппы   + Реквизит.Имя + ",";
				КонецЦикла;		
				
				СтруктураРеквизитов.Вставить(Истина, Лев(СтруктураРеквизитовГруппы  ,СтрДлина(СтруктураРеквизитовГруппы) - 1));
				СтруктураРеквизитов.Вставить(Ложь  , Лев(СтруктураРеквизитовЭлемента,СтрДлина(СтруктураРеквизитовЭлемента) - 1));
				#КОНЕЦОБЛАСТИ			
				пкЗагрузкаСправочника(Эл.Значение,Эл.Ключ,СтруктураРеквизитов,СтрТел.МобУстр,УзелОбмена);
			ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(Эл.Ключ) Тогда
				// Rarus-spb byse {
				Мета       = Метаданные.НайтиПоТипу(Эл.Ключ);
				Пропустить = Истина;
				Для Каждого ИмяПодсистемы Из ИменаПоПодсистемам Цикл
					Если СтрТел.ТекПользователь[ИмяПодсистемы.Ключ] Тогда
						Если ИмяПодсистемы.Значение.Найти(Мета.ПолноеИмя()) <> Неопределено Тогда
							Пропустить = ЛОЖЬ;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;	
				Если Пропустить Тогда
					Продолжить;
				КонецЕсли;	
				// Rarus-spb byse }
				пкЗагрузкаДокумента(Эл.Значение,Эл.Ключ,СтруктураРеквизитов,СтрТел.МобУстр,УзелОбмена);	
			КонецЕсли;	
		КонецЦикла;	
		Ответ.Вставить("Логи",пкСформироватьЛоги(СтрТел));
#КОНЕЦОБЛАСТИ

#ОБЛАСТЬ ВЫГРУЗКАДАННЫХ		
		// Выгрузка данных //
		пкПринятьИзмененияПоПлану(СтрТел.ИнформацияПроОбмен);
		Ответ.Вставить("ОтветЛогов"        ,пкСформироватьОтветЛогов(СтрТел));
		Ответ.Вставить("ИнформацияПроОбмен",пкСформироватьПакетОбменаДляКлиента(СтрТел));		
		//ЗафиксироватьТранзакцию();
#КОНЕЦОБЛАСТИ

	Исключение
		//Если ТранзакцияАктивна() Тогда
		//	ОтменитьТранзакцию();
		//КонецЕсли;	
		пкОбщийМодульСервер.пкЗаписатьОшибку(Ответ,"Во время синхронизации произошла ошибка (код 5.1)",ОписаниеОшибки(),Истина);
	КонецПопытки;
	
	мОтвет = пкСериализовать(Ответ);
		
	пкЛогироватьСообщение(мОтвет,СтрТел, "OUT");
	
	УстановитьПривилегированныйРежим(ЛОЖЬ);
	
	Возврат Новый ХранилищеЗначения(мОтвет,Новый СжатиеДанных(9));
КонецФункции

#ОБЛАСТЬ ОБМЕН 

Функция пкСформироватьОтветЛогов(СтрТел)
	Если СтрТел.Свойство("Логи") Тогда
		Попытка
			Рег = РегистрыСведений.пкЛоги.СоздатьНаборЗаписей();
			Рег.Отбор.МобильноеУстройство.Установить(СтрТел.МобУстр);
			Рег.Отбор.НаправлениеОбмена.Установить(Перечисления.пкНаправлениеОбмена.НаКлиент);
			Для Каждого СтрокаТЧ Из СтрТел.Логи Цикл 
				Если ЗначениеЗаполнено(СтрокаТЧ.Описание) Тогда
					Запись = Рег.Добавить();
					Запись.Объект              = СтрокаТЧ.Объект;
					Запись.МобильноеУстройство = СтрТел.МобУстр;
					Запись.ДатаОбмена          = СтрокаТЧ.ДатаОбмена;
					Запись.Описание            = СтрокаТЧ.Описание;
					Запись.НаправлениеОбмена   = СтрокаТЧ.НаправлениеОбмена;
					ПланыОбмена.ЗарегистрироватьИзменения(СтрТел.Узел,СтрокаТЧ.Объект);
				КонецЕсли;
			КонецЦикла;	
			Рег.Записать(Истина);
		Исключение
			ЗаписьЖурналаРегистрации("" + ОписаниеОшибки(),УровеньЖурналаРегистрации.Ошибка);
		КонецПопытки;
	КонецЕсли;
	
	Возврат "Логи загружены";
КонецФункции

Функция пкСформироватьПакетОбменаДляКлиента (СтрТел)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СЧ     = 0;
	Предел = Константы.пкКоличествоОбъектовВПакете.Получить();
	Если Предел = 0 Тогда
		Предел = 1000;
	КонецЕсли;		
	
	Запись   = Новый ЗаписьXML;
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	Запись.ОткрытьФайл(ИмяФайла,"UTF-8");
	
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьСообщения.НачатьЗапись(Запись,СтрТел.Узел);
	
	ОсновныеДанные       = Новый Массив;
	ДополнительныеДанные = Новый Массив;
	мКонстанты            = Новый Массив;
	Для Каждого Эл Из Метаданные.ПланыОбмена.пкОбменСМобильнымиУстройствами.Состав Цикл
		Мета = ЭЛ.Метаданные;
		Если Найти(Мета.ПолноеИмя(),"РегистрСведений.") > 0 И Мета.ПолноеИмя() <> "РегистрСведений.ОграчениеОтгрузокВозвратообразущейПродукции" Тогда
			ДополнительныеДанные.Добавить(Мета);
		ИначеЕсли Найти(Мета.ПолноеИмя(),"Константа.") > 0 Тогда
			мКонстанты.Добавить(Мета);			
		Иначе
			ОсновныеДанные.Добавить(Мета);
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого Мета Из мКонстанты Цикл
		ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(СтрТел.Узел,ЗаписьСообщения.НомерСообщения,Мета);	
		Пока ВыборкаИзменений.Следующий() Цикл
			ИзмененныйОбъект = ВыборкаИзменений.Получить();
			ЗаписатьXML(Запись,ИзмененныйОбъект);
		КонецЦикла;	
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураДанных.Ссылка
	|ИЗ
	|	Справочник.пкСтруктураДанных КАК СтруктураДанных
	|ГДЕ
	|	СтруктураДанных.Активность";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Справочники.пкСтруктураДанных.ВыгрузитьИзмененные(Выборка.Ссылка,Запись,СтрТел.Узел,Истина,ЗаписьСообщения.НомерСообщения);
	КонецЦикла;	
	
	ЗаписьСообщения.ЗакончитьЗапись();
	
	Запись.Закрыть();
	
	//ИмяПреобразованногоФайла = ПреобразованиеСообщения(ИмяФайла);	
	МассивФайлов             = РазделитьФайл(ИмяФайла,10 * 1024 * 1024);
	
	УдалитьФайлы(ИмяФайла);
	//УдалитьФайлы(ИмяПреобразованногоФайла);
	
	МассивФайловДляРезультата = Новый Массив;
	Для Каждого Файл Из МассивФайлов Цикл
		ДД = Новый ДвоичныеДанные(Файл);
		МассивФайловДляРезультата.Добавить(Новый ХранилищеЗначения(ДД, Новый СжатиеДанных(9)));
		УдалитьФайлы(Файл);	
	КонецЦикла;	
	
	Результат = Новый Структура;
	Результат.Вставить("МассивФайлов", МассивФайловДляРезультата);
	
	УстановитьПривилегированныйРежим(ЛОЖЬ);
	
	Возврат Новый ХранилищеЗначения(Результат,Новый СжатиеДанных(9));
	
КонецФункции	

Функция пкПринятьИзмененияПоПлану (СтрокаСообщения)
	Если ТипЗнч(СтрокаСообщения) = Тип ("Массив") Тогда
		// Это массив файлов, их нужно объединить //
		МассивФайловДляОбъединения = Новый Массив;
		Для Каждого Эл Из СтрокаСообщения Цикл
			ДД = Эл.Получить();
			ИмяВФ = ПолучитьИмяВременногоФайла("tmp");
			ДД.Записать(ИмяВФ);
			МассивФайловДляОбъединения.Добавить(ИмяВФ);
		КонецЦикла;	
		ИмяВФ = ПолучитьИмяВременногоФайла("xml");
		ОбъединитьФайлы(МассивФайловДляОбъединения,ИмяВФ);
		Чтение = Новый ЧтениеXML;
		Чтение.ОткрытьФайл(ИмяВФ,,,"UTF-8");		
	Иначе
		Чтение = Новый ЧтениеXML;
		Чтение.УстановитьСтроку(СокрЛП(СтрокаСообщения));
	КонецЕсли;	
	//НачатьТранзакцию();
	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
	Попытка
		ЧтениеСообщения.НачатьЧтение(Чтение);
	Исключение
		мОшибка = ИнформацияОбОшибке();
		//ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации("Ошибка синхронизации",,,ПодробноеПредставлениеОшибки(мОшибка));
		// Откатим номер сообщения - мало ли что бывает.
		Если мОшибка.Причина.Описание = "Номер сообщения меньше или равен номеру ранее принятого сообщения" Тогда
			Парам = Новый Массив;
			Парам.Добавить(СтрокаСообщения);
			ФоновыеЗадания.Выполнить("пкОбщийМодульСервер.пкУстановитьНомерПринятогоСообщения",Парам);
		КонецЕсли;	
		Возврат Неопределено;
	КонецПопытки;	
	мОтправитель = ЧтениеСообщения.Отправитель; 
	Пока ВозможностьЧтенияXML(Чтение) Цикл
		Данные = ПрочитатьXML(Чтение);
		Если Данные <> Неопределено Тогда
			Данные.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
			Данные.ОбменДанными.Загрузка    = Истина;
			Данные.Записать();
		КонецЕсли;	
	КонецЦикла;	
	ПланыОбмена.УдалитьРегистрациюИзменений(мОтправитель,ЧтениеСообщения.НомерПринятого);
	мУзел                = мОтправитель.ПолучитьОбъект();
	мУзел.НомерПринятого = ЧтениеСообщения.НомерСообщения;
	мУзел.Записать();
	//ЧтениеСообщения.ЗакончитьЧтение();
	Чтение.Закрыть();
	//ЗафиксироватьТранзакцию();
	
	Если ТипЗнч(СтрокаСообщения) = Тип ("Массив") Тогда
		УдалитьФайлы(ИмяВФ);
		Для Каждого ИмяВФ Из МассивФайловДляОбъединения Цикл
			УдалитьФайлы(ИмяВФ);
		КонецЦикла;	
	КонецЕсли;	
КонецФункции	

Функция пкПреобразованиеСообщения(НачальныйXML)
	Если ПустаяСтрока(НачальныйXML) Тогда
		Возврат НачальныйXML;
	КонецЕсли;	
	
	ОписаниеХSL = "<xsl:stylesheet version='1.0' xmlns:xsl='http://www.w3.org/1999/XSL/Transform' xmlns:v8msg='http://v8.1c.ru/messages'>
	|	<xsl:output method='xml' indent='yes' encoding='UTF-8'/>
	|	<xsl:template match='node()|@*'>
	|		<xsl:copy>
	|			<xsl:apply-templates select='@*' />
	|			<xsl:apply-templates />
	|		</xsl:copy>
	|	</xsl:template>
	|	<xsl:template match='v8msg:Message/v8msg:Body/InformationRegisterRecordSet.Штрихкоды/Filter/ТипШтрихкода' />
	|	<xsl:template match='v8msg:Message/v8msg:Body/InformationRegisterRecordSet.Штрихкоды/Records/Record/ТипШтрихкода' />
	|	<xsl:template match='v8msg:Message/v8msg:Body/InformationRegisterRecordSet.Штрихкоды/Records/Record/ТипШтрихкода' />
	|	<xsl:template match='v8msg:Message/v8msg:Body/InformationRegisterRecordSet.Штрихкоды/Records/Record/СерияНоменклатуры' />
	|	<xsl:template match='v8msg:Message/v8msg:Body/InformationRegisterRecordSet.Штрихкоды/Records/Record/Качество' />
	|	<xsl:template match='v8msg:Message/v8msg:Body/InformationRegisterRecordSet.Штрихкоды/Records/Record/УдалитьКод' />
	|	<xsl:template match='v8msg:Message/v8msg:Body/InformationRegisterRecordSet.Штрихкоды/Records/Record/УдалитьШтрихкод' />
	|	<xsl:template match='v8msg:Message/v8msg:Body/InformationRegisterRecordSet.Штрихкоды/Records/Record/УдалитьВладелец' />
	|	<xsl:template match='v8msg:Message/v8msg:Body/InformationRegisterRecordSet.Штрихкоды/Records/Record/УдалитьЕдиницаИзмерения' />
	|	<xsl:template match='v8msg:Message/v8msg:Body/InformationRegisterRecordSet.Штрихкоды/Records/Record/УдалитьХарактеристикаНоменклатуры' />
	|	<xsl:template match='v8msg:Message/v8msg:Body/InformationRegisterRecordSet.Штрихкоды/Records/Record/УдалитьСерияНоменклатуры' />
	|	<xsl:template match='v8msg:Message/v8msg:Body/InformationRegisterRecordSet.Штрихкоды/Records/Record/УдалитьКачество' />
	|	<xsl:template match='v8msg:Message/v8msg:Body/InformationRegisterRecordSet.Штрихкоды/Records/Record/ПредставлениеШтрихкода' />
	|	<xsl:template match='v8msg:Message/v8msg:Body/InformationRegisterRecordSet.Штрихкоды/Records/Record/УдалитьТипШтрихкода' />
	// ДОПОЛНИТЕЛЬНО //
	// ВИДЫ КОНТАКТНОЙ ИНФОРМАЦИИ //
	|	<xsl:template match='v8msg:Message/v8msg:Body/CatalogObject.ВидыКонтактнойИнформации/АдресТолькоРоссийский' />
	|	<xsl:template match='v8msg:Message/v8msg:Body/CatalogObject.ВидыКонтактнойИнформации/ВключатьСтрануВПредставление' />
	|	<xsl:template match='v8msg:Message/v8msg:Body/CatalogObject.ВидыКонтактнойИнформации/ЗапрещатьВводНекорректного' />
	|	<xsl:template match='v8msg:Message/v8msg:Body/CatalogObject.ВидыКонтактнойИнформации/МожноИзменятьСпособРедактирования' />
	|	<xsl:template match='v8msg:Message/v8msg:Body/CatalogObject.ВидыКонтактнойИнформации/ОбязательноеЗаполнение' />
	|	<xsl:template match='v8msg:Message/v8msg:Body/CatalogObject.ВидыКонтактнойИнформации/Подсказка' />
	|	<xsl:template match='v8msg:Message/v8msg:Body/CatalogObject.ВидыКонтактнойИнформации/ПроверятьКорректность' />
	|	<xsl:template match='v8msg:Message/v8msg:Body/CatalogObject.ВидыКонтактнойИнформации/ПроверятьПоФИАС' />
	|	<xsl:template match='v8msg:Message/v8msg:Body/CatalogObject.ВидыКонтактнойИнформации/РазрешитьВводНесколькихЗначений' />
	|	<xsl:template match='v8msg:Message/v8msg:Body/CatalogObject.ВидыКонтактнойИнформации/РедактированиеТолькоВДиалоге' />
	|	<xsl:template match='v8msg:Message/v8msg:Body/CatalogObject.ВидыКонтактнойИнформации/РеквизитДопУпорядочивания' />
	|	<xsl:template match='v8msg:Message/v8msg:Body/CatalogObject.ВидыКонтактнойИнформации/СкрыватьНеактуальныеАдреса' />
	|	<xsl:template match='v8msg:Message/v8msg:Body/CatalogObject.ВидыКонтактнойИнформации/ЗапретитьРедактированиеПользователем' />
	// НОМЕНКЛАТУРА //
	//|	<xsl:template match='v8msg:Message/v8msg:Body/CatalogObject.Номенклатура/ПозицияВПрайсе' />	
	// НОМЕНКЛАТУРНЫЕ ГРУППЫ //
	|	<xsl:template match='v8msg:Message/v8msg:Body/CatalogObject.НоменклатурныеГруппы/ЕдиницаХраненияОстатков' />
	|	<xsl:template match='v8msg:Message/v8msg:Body/CatalogObject.НоменклатурныеГруппы/СтавкаНДС' />
	// ПОЛЬЗОВАТЕЛИ //
	|	<xsl:template match='v8msg:Message/v8msg:Body/CatalogObject.Пользователи/Недействителен' />
	|	<xsl:template match='v8msg:Message/v8msg:Body/CatalogObject.Пользователи/Комментарий' />
	|	<xsl:template match='v8msg:Message/v8msg:Body/CatalogObject.Пользователи/Служебный' />
	|	<xsl:template match='v8msg:Message/v8msg:Body/CatalogObject.Пользователи/Подготовлен' />
	|	<xsl:template match='v8msg:Message/v8msg:Body/CatalogObject.Пользователи/ИдентификаторПользователяИБ' />
	|	<xsl:template match='v8msg:Message/v8msg:Body/CatalogObject.Пользователи/ИдентификаторПользователяСервиса' />
	|	<xsl:template match='v8msg:Message/v8msg:Body/CatalogObject.Пользователи/СвойстваПользователяИБ' />
	|	<xsl:template match='v8msg:Message/v8msg:Body/CatalogObject.Пользователи/ДополнительныеРеквизиты' />
	|	<xsl:template match='v8msg:Message/v8msg:Body/CatalogObject.Пользователи/КонтактнаяИнформация' />
	// ЦЕНЫ НОМЕНКЛАТУРЫ //
	|	<xsl:template match='v8msg:Message/v8msg:Body/DocumentObject.ЦеныНоменклатуры/Представление' />
	|</xsl:stylesheet>";
	
	Преобразование = Новый ПреобразованиеXSL; 
	Преобразование.ЗагрузитьИзСтроки(ОписаниеХSL); 
	
	ИмяВФ = ПолучитьИмяВременногоФайла("xml");
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяВФ,"UTF-8");
	Преобразование.ПреобразоватьИзФайла(НачальныйXML,ЗаписьXML); 
	
	ЗаписьXML.Закрыть();
	
	Возврат ИмяВФ;	
КонецФункции

#КОНЕЦОБЛАСТИ

#ОБЛАСТЬ ЗАГРУЗКАДАННЫХ 

Процедура пкЗагрузкаСправочника (ТЗ, ТипСправочника,СтрРеквизитов,МобильноеУстройство,УзелОбмена = Неопределено)
	Мета      = Метаданные.НайтиПоТипу(ТипСправочника);
	Для Каждого СтрокаТЧ Из ТЗ Цикл	
		Попытка
			ЭтоГруппа = ТЗ.Колонки.Найти("ЭтоГруппа") <> Неопределено И СтрокаТЧ.ЭтоГруппа;
			Менеджер  = Справочники[Мета.Имя];
			НовыйЭл   = СтрокаТЧ.Ссылка.ПолучитьОбъект();
			Если НовыйЭл = Неопределено Тогда
				НовыйЭл   = ?(ЭтоГруппа,Менеджер.СоздатьГруппу(),Менеджер.СоздатьЭлемент());
				НовыйЭл.УстановитьСсылкуНового(СтрокаТЧ.Ссылка);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(НовыйЭл,СтрокаТЧ,СтрРеквизитов.Получить(ЭтоГруппа));

			Если ТипЗнч(НовыйЭл) = Тип ("СправочникОбъект.Партнеры") И НовыйЭл.ЭтоНовый() Тогда
				НовыйЭл.НаименованиеПолное = НовыйЭл.Наименование;
				НовыйЭл.Клиент             = Истина;
				НовыйЭл.Комментарий        = НовыйЭл.Комментарий + Символы.ПС + "#Загружен из МП";
				
				НоваяЗапись          = РегистрыСведений.ИерархияПартнеров.СоздатьМенеджерЗаписи();
				НоваяЗапись.Партнер  = СтрокаТЧ.Ссылка;
				НоваяЗапись.Родитель = СтрокаТЧ.Ссылка;
				НоваяЗапись.Записать(Истина);
				
			ИначеЕсли ТипЗнч(НовыйЭл) = Тип ("СправочникОбъект.КонтактныеЛицаПартнеров") И НовыйЭл.ЭтоНовый() Тогда
				Эл = Справочники.пкПользователиМП.НайтиПоРеквизиту("ИдентификаторПользователяИБ",ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
				Если ЗначениеЗаполнено(Эл) Тогда
					НовыйЭл.Автор = Эл.Пользователь;
				КонецЕсли;	
				
			ИначеЕсли ТипЗнч(НовыйЭл) = Тип ("СправочникОбъект.Контрагенты") И НовыйЭл.ЭтоНовый() Тогда
				
			ИначеЕсли ТипЗнч(НовыйЭл) = Тип ("СправочникОбъект.СМ_ОбъектыСтроительства") И НовыйЭл.ЭтоНовый() Тогда
				
			КонецЕсли;
			
			Если УзелОбмена <> Неопределено Тогда
				НовыйЭл.ОбменДанными.Отправитель = УзелОбмена;
			КонецЕсли;	
			НовыйЭл.Записать();
			пкЗаписьЛога(СтрокаТЧ.Ссылка,МобильноеУстройство,"");
		Исключение
			Описание = ОписаниеОшибки();
			пкЗаписьЛога(СтрокаТЧ.Ссылка,МобильноеУстройство,Описание);
		КонецПопытки;
	КонецЦикла;	
КонецПроцедуры	

Процедура пкЗагрузкаДокумента(ТЗ, ТипСправочника ,СтрРеквизитов, МобильноеУстройство,УзелОбмена = Неопределено) 
	Мета      = Метаданные.НайтиПоТипу(ТипСправочника);
	
	Для Каждого СтрокаТЧ Из ТЗ Цикл	
		Попытка
			Менеджер  = Документы[Мета.Имя];
			НовыйЭл   = СтрокаТЧ.Ссылка.ПолучитьОбъект();
			Если НовыйЭл = Неопределено Тогда
				НовыйЭл  = Менеджер.СоздатьДокумент();
				НовыйЭл.УстановитьСсылкуНового(СтрокаТЧ.Ссылка);
			Иначе
				Если Мета.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
					НовыйЭл.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Иначе
					НовыйЭл.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(НовыйЭл,СтрокаТЧ,,"Ссылка");
			
			Для Каждого ТЧ Из Мета.ТабличныеЧасти Цикл
				Если ТипЗнч(НовыйЭл) <> Тип ("ДокументОбъект.пкЗаказНаряд") Тогда
					Если ТЗ.Колонки.Найти(ТЧ.Имя) <> Неопределено Тогда
						НовыйЭл[ТЧ.Имя].Загрузить(СтрокаТЧ[ТЧ.Имя]);
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;	
			
			Если УзелОбмена <> Неопределено Тогда
				НовыйЭл.ОбменДанными.Отправитель = УзелОбмена;
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	пкМобильныеКонфигурации.Пользователь
				|ИЗ
				|	РегистрСведений.пкМобильныеКонфигурации КАК пкМобильныеКонфигурации
				|ГДЕ
				|	пкМобильныеКонфигурации.Узел = &Узел";   
				Запрос.УстановитьПараметр("Узел",УзелОбмена);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					мПользователь = Выборка.Пользователь;
				Иначе
					мПользователь = Справочники.пкПользователиМП.ПустаяСсылка();
				КонецЕсли;
			Иначе	
				мПользователь = Справочники.пкПользователиМП.ПустаяСсылка();
			КонецЕсли;		                                                      			
			
			пкСинхронизацияСерверПереопределяемый.пкПриЗагрузкеДокумента(СтрокаТЧ, НовыйЭл, УзелОбмена);
			
			Если Мета.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда 
				НовыйЭл.Записать(?(СтрокаТЧ.Проведен,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись));
			Иначе
				НовыйЭл.Записать();
			КонецЕсли;
			пкЗаписьЛога(СтрокаТЧ.Ссылка,МобильноеУстройство,"");
		Исключение
			пкЗаписьЛога(СтрокаТЧ.Ссылка,МобильноеУстройство,ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;	
КонецПроцедуры	

Процедура пкЗаписьЛога (Объект, МобильноеУстройство, ОписаниеОшибки)
	Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
		ЗаписьЖурналаРегистрации("Ошибка обмена",УровеньЖурналаРегистрации.Ошибка,,ОписаниеОшибки);
	КонецЕсли;
	Запись                     = РегистрыСведений.пкЛоги.СоздатьМенеджерЗаписи();
	Запись.МобильноеУстройство = МобильноеУстройство;
	Запись.Объект              = Объект;    
	Запись.НаправлениеОбмена   = Перечисления.пкНаправлениеОбмена.НаСервер;
	Запись.ДатаОбмена          = ТекущаяУниверсальнаяДата();
	Запись.Описание            = ОписаниеОшибки;
	Запись.Записать(Истина);
КонецПроцедуры	

Функция пкСформироватьЛоги (СтрТел)
	Запрос = Новый Запрос; 
	Запрос.УстановитьПараметр("МобильноеУстройство",СтрТел.МобУстр);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	пкЛоги.Объект,
	|	пкЛоги.НаправлениеОбмена,
	|	пкЛоги.ДатаОбмена,
	|	пкЛоги.НомерСообщения,
	|	пкЛоги.Описание,
	|	пкЛоги.МобильноеУстройство
	|ИЗ
	|	РегистрСведений.пкЛоги КАК пкЛоги
	|ГДЕ
	|	пкЛоги.НаправлениеОбмена = ЗНАЧЕНИЕ(Перечисление.пкНаправлениеОбмена.НаСервер)
	|	И пкЛоги.МобильноеУстройство = &МобильноеУстройство";
	Рез = Запрос.Выполнить().Выгрузить();
	Рез.Колонки.Удалить(Рез.Колонки.МобильноеУстройство);
	
	Возврат Рез;
КонецФункции

Процедура пкОчиститьЛишниеЛоги (СтрТел)
	Запрос   = Новый Запрос; 
	Запрос.УстановитьПараметр("МобильноеУстройство",СтрТел.МобУстр);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	пкЛоги.Объект,
	|	пкЛоги.НаправлениеОбмена,
	|	пкЛоги.ДатаОбмена,
	|	пкЛоги.НомерСообщения,
	|	пкЛоги.Описание,
	|	пкЛоги.МобильноеУстройство
	|ИЗ
	|	РегистрСведений.пкЛоги КАК пкЛоги
	|ГДЕ
	|	пкЛоги.НаправлениеОбмена = ЗНАЧЕНИЕ(Перечисление.пкНаправлениеОбмена.НаСервер)
	|	И пкЛоги.МобильноеУстройство = &МобильноеУстройство";
	Рез = Запрос.Выполнить().Выгрузить();
	
	ИскомыеСтроки = Рез.НайтиСтроки(Новый Структура("Описание",""));
	Для Каждого ИскомаяСтрока Из ИскомыеСтроки Цикл
		Менеджер = РегистрыСведений.пкЛоги.СоздатьМенеджерЗаписи();
		Менеджер.Объект              = ИскомаяСтрока.Объект;
		Менеджер.МобильноеУстройство = ИскомаяСтрока.МобильноеУстройство;
		Менеджер.НаправлениеОбмена   = ИскомаяСтрока.НаправлениеОбмена;
		Менеджер.Удалить();
	КонецЦикла;
	
КонецПроцедуры

Функция ИменаДокументовПоПодсистемам ()
	
	Рез = Новый Структура;
	
	Массив = Новый Массив;
	Массив.Добавить("Документ.пкЗаявкаНаАрендуТехники");
	Массив.Добавить("Документ.ТелефонныйЗвонок");
	Массив.Добавить("Документ.Встреча");
	Массив.Добавить("Документ.пкКоммерческоеПредложениеНаАрендуТехники");
	
	Рез.Вставить("ДоступностьПодсистемыАрендаТехники", Массив);
	
	Массив = Новый Массив;
	Массив.Добавить("Документ.пкЗаявкаНаВыездМеханика");
	Массив.Добавить("Документ.пкЗаказНаряд");
	Массив.Добавить("Документ.пкЗаданиеНаРемонт");
	
	Рез.Вставить("ДоступностьПодсистемыСервис", Массив);
	
	Массив = Новый Массив;
	Массив.Добавить("Документ.пкЗаданиеНаПеревозку");
	Массив.Добавить("Документ.пкДоставка");
	Массив.Добавить("Документ.пкПогрузкаВыгрузкаПоДоставке");
	
	Рез.Вставить("ДоступностьПодсистемыЛогистика", Массив);
	
	Возврат Рез;	
	
КонецФункции	

#КОНЕЦОБЛАСТИ

#ОБЛАСТЬ ЛОГИРОВАНИЕ_СООБЩЕНИЙ

Процедура пкЛогироватьСообщение (ТекстСообщения, СтрТел, Префикс)
	мКаталог = Константы.пкКаталогВременныхФайлов.Получить();
	
	Если Не ЗначениеЗаполнено(мКаталог) Тогда
		Возврат;
	КонецЕсли;
	
	КаталогДляЗаписи = мКаталог + "\" + СтрТел.ТекПользователь + "\" + СтрТел.Узел;
	
	Файл = Новый Файл(КаталогДляЗаписи);
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(КаталогДляЗаписи);
	КонецЕсли;
	
	Попытка
		Если ТипЗнч(ТекстСообщения) = Тип ("Строка") Тогда			
			Запись = Новый ЗаписьТекста;
			ИмяВФ  = пкПолучитьСвободноеИмяФайла(КаталогДляЗаписи,Префикс,"xml",ТекстСообщения);
			Запись.Открыть(ИмяВФ,КодировкаТекста.UTF8);
			Запись.Записать(ТекстСообщения);
			Запись.Закрыть();
		ИначеЕсли ТипЗнч(ТекстСообщения) = Тип ("ХранилищеЗначения") Тогда
			ИмяВФ = пкПолучитьСвободноеИмяФайла(КаталогДляЗаписи,Префикс,"хз"); 
			ЗначениеВФайл(ИмяВФ,ТекстСообщения);
		КонецЕсли;	
		ИмяФайлаЗИП = пкПолучитьСвободноеИмяФайла(КаталогДляЗаписи,Префикс,"zip",ТекстСообщения);
		ЗаписьЗИП   = Новый ЗаписьZipФайла();
		ЗаписьЗИП.Открыть(ИмяФайлаЗИП,,,МетодСжатияZIP.Сжатие,УровеньСжатияZIP.Максимальный);
		ЗаписьЗИП.Добавить(ИмяВФ);
		ЗаписьЗИП.Записать();
		УдалитьФайлы(ИмяВФ);
	Исключение
		ЗаписьЖурналаРегистрации(ОписаниеОшибки(),УровеньЖурналаРегистрации.Ошибка);
	КонецПопытки;
КонецПроцедуры	

#КОНЕЦОБЛАСТИ

#ОБЛАСТЬ ОБНОВЛЕНИЕ

Функция GetActualVersion()
	Возврат АктуальнаяВерсия();	
КонецФункции

Функция АктуальнаяВерсия ()
	Возврат Константы.пкАктуальнаяВерсияМП.Получить();
КонецФункции	

Функция GetUpdate(Data)
	ИмяКаталога  = Константы.пкКаталогВременныхФайлов.Получить() + "\UPDATE\" + АктуальнаяВерсия();
	СписокФайлов = НайтиФайлы(ИмяКаталога,"*" + Data + ".apk");
	Для Каждого ОписаниеФайла Из СписокФайлов Цикл
		Если ОписаниеФайла.Существует() Тогда
			Возврат Новый ХранилищеЗначения(Новый ДвоичныеДанные(ОписаниеФайла.ПолноеИмя), Новый СжатиеДанных(9));
		КонецЕсли;	
	КонецЦикла;
	//ИмяФайла    = ИмяКаталога + "\evgeniy.v.bystrov.torgpred-" + Data + ".apk";
КонецФункции

#КОНЕЦОБЛАСТИ

#ОБЛАСТЬ ДАННЫЕДЛЯОТЧЕТОВ 

Функция GetData(Data)
	мЗапрос   = Data.Получить();
	СтрТел    = пкДесериализовать(мЗапрос);
	УстановитьПривилегированныйРежим(Истина);
	Рез       = Новый Структура; 
	Попытка
		СтрДанных = Справочники.пкСтруктураДанных.НайтиПоНаименованию(СтрТел.ИмяЗапроса);
		Запрос    = Справочники.пкСтруктураДанных.ПолучитьЗапросСПараметрами(СтрДанных,СтрТел.Параметры);
		Рез       = Запрос.ВыполнитьПакет();
		ЭтоДерево = Найти(НРег(Запрос.Текст),"итоги") > 0;
		МассивРезультатов = Новый Массив;
		Для Каждого Эл Из Рез Цикл
			Если ЭтоДерево Тогда
				МассивРезультатов.Добавить(Эл.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией));
			Иначе	
				МассивРезультатов.Добавить(Эл.Выгрузить());
			КонецЕсли;
		КонецЦикла;
		Рез = Новый Структура("Результаты",МассивРезультатов);
		Рез.Вставить("Ошибка",Новый Структура("ЕстьОшибка,ТекстОшибки",Ложь,""));
	Исключение
		мОшибка = ИнформацияОбОшибке();
		Рез.Вставить("Ошибка",Новый Структура("ЕстьОшибка,ТекстОшибки",Истина,ПодробноеПредставлениеОшибки(мОшибка)));
	КонецПопытки;
	
	Возврат Новый ХранилищеЗначения(пкСериализовать(Рез),Новый СжатиеДанных(9));
КонецФункции

#КОНЕЦОБЛАСТИ 

#ОБЛАСТЬ ПЕЧАТЬ

Функция GetPriceList(Data)
	
	мЗапрос   = Data.Получить();
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтрТел    = пкДесериализовать(мЗапрос);
	
	ПрайсЛист = СтрТел.Параметры.ПрайсЛист;
	Валюта    = СтрТел.Параметры.Валюта;
	Дата      = СтрТел.Параметры.Дата;
	
	МассивНоменклатуры = СтрТел.Параметры.МассивНоменклатуры;
	
	Запрос       = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура",МассивНоменклатуры);
    Запрос.Текст = 
    "ВЫБРАТЬ
    |	КурсВидаЦен.Валюта,
    |	КурсВидаЦен.Курс,
    |	КурсВидаЦен.Кратность
    |ПОМЕСТИТЬ ВТКурсыВалютВидаЦен
    |ИЗ
    |	РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсВидаЦен
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	КурсыДокумента.Валюта,
    |	КурсыДокумента.Курс,
    |	КурсыДокумента.Кратность
    |ПОМЕСТИТЬ ВТКурсыВалютыДокумента
    |ИЗ
    |	РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыДокумента
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	Цены.Номенклатура,
    |	Цены.ВидЦены,
    |	Цены.Цена,
    |	Цены.Упаковка,
    |	Цены.Валюта
    |ПОМЕСТИТЬ ВТЦеныНоменклатуры
    |ИЗ
    |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
    |			&Период, 
	|" + ?(МассивНоменклатуры = Неопределено,"","Номенклатура В (&МассивНоменклатуры) И ") + "
    |			(ВидЦены = &ВидЦенКраткосрочная
    |				ИЛИ ВидЦены = &ВидЦенКраткосрочнаяМинимальная
    |				ИЛИ ВидЦены = &ВидЦенДолгосрочная
    |				ИЛИ ВидЦены = &ВидЦенДолгосрочнаяМинимальная)
    |				И Номенклатура.пкЭтоТехника) КАК Цены
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ВТЦеныНоменклатуры.Номенклатура,
    |	МАКСИМУМ(ВЫБОР
    |			КОГДА ВТЦеныНоменклатуры.ВидЦены = &ВидЦенКраткосрочная
    |				ТОГДА ВТЦеныНоменклатуры.Цена * ЕСТЬNULL(ВТКурсыЦен.Курс, 1) * ЕСТЬNULL(ВТКурсыЦен.Кратность, 1) / ВЫБОР
    |						КОГДА ЕСТЬNULL(ВТКурсыДокумента.Курс, 1) = 0
    |							ТОГДА 1
    |						ИНАЧЕ ЕСТЬNULL(ВТКурсыДокумента.Курс, 1)
    |					КОНЕЦ / ВЫБОР
    |						КОГДА ЕСТЬNULL(ВТКурсыДокумента.Кратность, 1) = 0
    |							ТОГДА 1
    |						ИНАЧЕ ЕСТЬNULL(ВТКурсыДокумента.Кратность, 1)
    |					КОНЕЦ
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК ЦенаКраткосрочнаяПрайс,
    |	МАКСИМУМ(ВЫБОР
    |			КОГДА ВТЦеныНоменклатуры.ВидЦены = &ВидЦенКраткосрочнаяМинимальная
    |				ТОГДА ВТЦеныНоменклатуры.Цена * ЕСТЬNULL(ВТКурсыЦен.Курс, 1) * ЕСТЬNULL(ВТКурсыЦен.Кратность, 1) / ВЫБОР
    |						КОГДА ЕСТЬNULL(ВТКурсыДокумента.Курс, 1) = 0
    |							ТОГДА 1
    |						ИНАЧЕ ЕСТЬNULL(ВТКурсыДокумента.Курс, 1)
    |					КОНЕЦ / ВЫБОР
    |						КОГДА ЕСТЬNULL(ВТКурсыДокумента.Кратность, 1) = 0
    |							ТОГДА 1
    |						ИНАЧЕ ЕСТЬNULL(ВТКурсыДокумента.Кратность, 1)
    |					КОНЕЦ
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК ЦенаКраткосрочнаяМинимальная,
    |	МАКСИМУМ(ВЫБОР
    |			КОГДА ВТЦеныНоменклатуры.ВидЦены = &ВидЦенДолгосрочная
    |				ТОГДА ВТЦеныНоменклатуры.Цена * ЕСТЬNULL(ВТКурсыЦен.Курс, 1) * ЕСТЬNULL(ВТКурсыЦен.Кратность, 1) / ВЫБОР
    |						КОГДА ЕСТЬNULL(ВТКурсыДокумента.Курс, 1) = 0
    |							ТОГДА 1
    |						ИНАЧЕ ЕСТЬNULL(ВТКурсыДокумента.Курс, 1)
    |					КОНЕЦ / ВЫБОР
    |						КОГДА ЕСТЬNULL(ВТКурсыДокумента.Кратность, 1) = 0
    |							ТОГДА 1
    |						ИНАЧЕ ЕСТЬNULL(ВТКурсыДокумента.Кратность, 1)
    |					КОНЕЦ
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК ЦенаДолгосрочнаяПрайс,
    |	МАКСИМУМ(ВЫБОР
    |			КОГДА ВТЦеныНоменклатуры.ВидЦены = &ВидЦенДолгосрочнаяМинимальная
    |				ТОГДА ВТЦеныНоменклатуры.Цена * ЕСТЬNULL(ВТКурсыЦен.Курс, 1) * ЕСТЬNULL(ВТКурсыЦен.Кратность, 1) / ВЫБОР
    |						КОГДА ЕСТЬNULL(ВТКурсыДокумента.Курс, 1) = 0
    |							ТОГДА 1
    |						ИНАЧЕ ЕСТЬNULL(ВТКурсыДокумента.Курс, 1)
    |					КОНЕЦ / ВЫБОР
    |						КОГДА ЕСТЬNULL(ВТКурсыДокумента.Кратность, 1) = 0
    |							ТОГДА 1
    |						ИНАЧЕ ЕСТЬNULL(ВТКурсыДокумента.Кратность, 1)
    |					КОНЕЦ
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК ЦенаДолгосрочнаяМинимальная,
    |	МАКСИМУМ(ВЫБОР
    |			КОГДА ВТЦеныНоменклатуры.ВидЦены = &ВидЦенКраткосрочная
    |					ИЛИ ВТЦеныНоменклатуры.ВидЦены = &ВидЦенКраткосрочнаяМинимальная
    |				ТОГДА ВТЦеныНоменклатуры.Упаковка
    |			ИНАЧЕ НЕОПРЕДЕЛЕНО
    |		КОНЕЦ) КАК ЕдиницаИзмеренияКраткосрочнойЦены,
    |	МАКСИМУМ(ВЫБОР
    |			КОГДА ВТЦеныНоменклатуры.ВидЦены = &ВидЦенДолгосрочная
    |					ИЛИ ВТЦеныНоменклатуры.ВидЦены = &ВидЦенДолгосрочнаяМинимальная
    |				ТОГДА ВТЦеныНоменклатуры.Упаковка
    |			ИНАЧЕ НЕОПРЕДЕЛЕНО
    |		КОНЕЦ) КАК ЕдиницаИзмеренияДолгосрочнойЦены,
    |	ИСТИНА КАК Активность,
    |	ВТЦеныНоменклатуры.Номенклатура.пкТипТехники КАК ТипТехники,
    |	ВТЦеныНоменклатуры.Номенклатура.Артикул КАК Артикул
    |ИЗ
    |	ВТЦеныНоменклатуры КАК ВТЦеныНоменклатуры
    |		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалютВидаЦен КАК ВТКурсыЦен
    |		ПО ВТЦеныНоменклатуры.Валюта = ВТКурсыЦен.Валюта
    |		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалютыДокумента КАК ВТКурсыДокумента
    |		ПО (ВТКурсыЦен.Валюта = &Валюта)
    |
    |СГРУППИРОВАТЬ ПО
    |	ВТЦеныНоменклатуры.Номенклатура,
    |	ВТЦеныНоменклатуры.Номенклатура.пкТипТехники,
    |	ВТЦеныНоменклатуры.Номенклатура.Артикул";
    
    Запрос.УстановитьПараметр("Период",                         Дата);
    Запрос.УстановитьПараметр("ВидЦенКраткосрочная",            ПрайсЛист.ВидЦенКраткосрочная);
    Запрос.УстановитьПараметр("ВидЦенКраткосрочнаяМинимальная", ПрайсЛист.ВидЦенКраткосрочнаяМинимальная);
    Запрос.УстановитьПараметр("ВидЦенДолгосрочная",             ПрайсЛист.ВидЦенДолгосрочная);
    Запрос.УстановитьПараметр("ВидЦенДолгосрочнаяМинимальная",  ПрайсЛист.ВидЦенДолгосрочнаяМинимальная);
    Запрос.УстановитьПараметр("Валюта",                         Валюта);
	Запрос.УстановитьПараметр("МассивНоменклатуры",             МассивНоменклатуры);
	
	РЗ  = Запрос.Выполнить().Выгрузить();
	
	Рез = Новый Структура("Результат,Ошибка",РЗ,Новый Структура("ЕстьОшибка,ТекстОшибки",Ложь,""));
	
	УстановитьПривилегированныйРежим(ЛОЖЬ);
	
	Возврат Новый ХранилищеЗначения(пкСериализовать(Рез),Новый СжатиеДанных(9));
  
КонецФункции

Функция PrintPriceList(Data)
	
	мЗапрос   = Data.Получить();
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтрТел    = пкДесериализовать(мЗапрос);
	
	ДанныеПрайсЛиста = СтрТел.Параметры.ТЗПрайсЛиста;
	ИдУстройства     = СтрТел.Параметры.ИДУстройства;
	
	Попытка
		пкЗагрузкаДокумента(ДанныеПрайсЛиста,Тип("ДокументСсылка.пкКоммерческоеПредложениеНаАрендуТехники"),Новый Структура,Справочники.пкМобильныеУстройства.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДУстройства)));
	Исключение
		ЗаписьЖурналаРегистрации(ОписаниеОшибки(),УровеньЖурналаРегистрации.Ошибка);
	КонецПопытки;
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(ДанныеПрайсЛиста[0].Ссылка);
	
	КоллекцияПечФорм = Новый ТаблицаЗначений;
	КоллекцияПечФорм.Колонки.Добавить("ИмяВРЕГ");
	КоллекцияПечФорм.Колонки.Добавить("ТабличныйДокумент");
	КоллекцияПечФорм.Колонки.Добавить("СинонимМакета");
	КоллекцияПечФорм.Колонки.Добавить("Картинка");
	КоллекцияПечФорм.Колонки.Добавить("ПолныйПутьКМакету");
	КоллекцияПечФорм.Колонки.Добавить("ИмяФайлаПечатнойФормы");
	
	НоваяСтрока         = КоллекцияПечФорм.Добавить();
	НоваяСтрока.ИмяВРег = ВРег("КоммерческоеПредложение");
	
	Документы.пкКоммерческоеПредложениеНаАрендуТехники.Печать(МассивОбъектов,Неопределено,КоллекцияПечФорм,Новый СписокЗначений,Новый Структура("ПараметрыОтправки",Новый Структура));
	
	Для Каждого СтрокаТЧ ИЗ КоллекцияПечФорм Цикл
		ТабДок = СтрокаТЧ.ТабличныйДокумент;
		ИмяВФ  = ПолучитьИмяВременногоФайла("pdf");
		ТабДок.Записать(ИмяВФ,ТипФайлаТабличногоДокумента.PDF);
		ДД     = Новый ДвоичныеДанные(ИмяВФ);
		УдалитьФайлы(ИмяВФ);
	КонецЦикла;	
	
	Рез = Новый Структура("ПечатнаяФорма,Ошибка",Новый ХранилищеЗначения(ДД, Новый СжатиеДанных(9)),Новый Структура("ЕстьОшибка,ТекстОшибки",ЛОЖЬ,""));
	
	УстановитьПривилегированныйРежим(ЛОЖЬ);
	
	Возврат Новый ХранилищеЗначения(пкСериализовать(Рез), Новый СжатиеДанных(9));
	
КонецФункции

Функция GetPrintFormsList(Data)
	
	мЗапрос   = Data.Получить();
	УстановитьПривилегированныйРежим(Истина);
	СтрТел    = пкДесериализовать(мЗапрос);
	
	ИмяФормы  = СтрТел.Параметры.ИмяФормы;
	
	КомандыПечати = УправлениеПечатью.КомандыПечатиФормы(ИмяФормы, Неопределено).Скопировать();
	
	Рез = Новый Структура("КомандыПечати,Ошибка",КомандыПечати,Новый Структура("ЕстьОшибка,ТекстОшибки",ЛОЖЬ,""));
	
	УстановитьПривилегированныйРежим(ЛОЖЬ);

	Возврат Новый ХранилищеЗначения(пкСериализовать(Рез), Новый СжатиеДанных(9));
	
КонецФункции

Функция GetPrintForm(Data)
	
	мЗапрос   = Data.Получить();
	
	УстановитьПривилегированныйРежим(Истина);
	
	УстановитьПараметрСеансаПоТекущемуПользователю();
	
	СтрТел    = пкДесериализовать(мЗапрос);
	
	Документ           = СтрТел.Параметры.Документ;
	ИмяПечатнойФормы   = СтрТел.Параметры.ИмяПечатнойФормы;
	ИмяМенеджераПечати = СтрТел.Параметры.ИмяМенеджераПечати;
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Документ);
	
	КоллекцияПечФорм = УправлениеПечатью.СформироватьПечатныеФормы(ИмяМенеджераПечати, ИмяПечатнойФормы, МассивОбъектов, Неопределено);
	ПредставлениеПФ  = "";
	
	Для Каждого СтрокаТЧ ИЗ КоллекцияПечФорм.КоллекцияПечатныхФорм Цикл
		ТабДок          = СтрокаТЧ.ТабличныйДокумент;
		ИмяВФ           = ПолучитьИмяВременногоФайла("pdf");
		ТабДок.Записать(ИмяВФ,ТипФайлаТабличногоДокумента.PDF);
		ДД              = Новый ДвоичныеДанные(ИмяВФ);
		ПредставлениеПФ = СтрокаТЧ.СинонимМакета + " №" + СокрЛП(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Документ.Номер,Истина,Истина)) + " от " + Формат(Документ.Дата,"ДФ=дд.ММ.гг");
		УдалитьФайлы(ИмяВФ);
	КонецЦикла;	
	
	Рез = Новый Структура("ПечатнаяФорма,Представление,Ошибка",Новый ХранилищеЗначения(ДД, Новый СжатиеДанных(9)),ПредставлениеПФ,Новый Структура("ЕстьОшибка,ТекстОшибки",ЛОЖЬ,""));
	
	УстановитьПривилегированныйРежим(ЛОЖЬ);
	
	Возврат Новый ХранилищеЗначения(пкСериализовать(Рез), Новый СжатиеДанных(9));
	
КонецФункции

#КОНЕЦОБЛАСТИ

#ОБЛАСТЬ СТАТУСЗНР 

Функция SetState(Data)
	мЗапрос   = Data.Получить();
	УстановитьПривилегированныйРежим(Истина);
	СтрТел    = пкДесериализовать(мЗапрос);
	ТекДата   = ТекущаяДата();
	Рез       = Документы.пкЗаказНаряд.УстановитьСтатус(СтрТел.Документ,СтрТел.Статус,ТекДата);
	Рез.Вставить("Дата",ТекДата);
	УстановитьПривилегированныйРежим(ЛОЖЬ);
	Возврат Новый ХранилищеЗначения(пкСериализовать(Рез));
КонецФункции

Функция SetTechnics(Data)
	мЗапрос   = Data.Получить();
	УстановитьПривилегированныйРежим(Истина);
	СтрТел    = пкДесериализовать(мЗапрос);
	ТекДата   = ТекущаяДата();
	
	Рез       = Документы.пкЗаданиеНаПеревозку.УстановитьТехнику(СтрТел.Документ,СтрТел.Техника);
	
	Возврат Новый ХранилищеЗначения(пкСериализовать(Рез));
КонецФункции

Функция SetTechnicsState(Data)
	
	мЗапрос   = Data.Получить();
	УстановитьПривилегированныйРежим(Истина);
	СтрТел    = пкДесериализовать(мЗапрос);
	ТекДата   = ТекущаяДата();
	
	Рез       = УстановитьСостояниеИсправностиТехники(СтрТел.Документ,СтрТел.Повреждена,СтрТел.Повреждения);
	
	Возврат Новый ХранилищеЗначения(пкСериализовать(Рез));
	
КонецФункции

// Проставляет технику в документ и проводит его. Возвращает структуру (ДокументПроведен, ОписаниеОшибки)
//
Функция УстановитьСостояниеИсправностиТехники(ДокументСсылка, Повреждена, Повреждения) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ДокументПроведен");
	СтруктураВозврата.Вставить("ОписаниеОшибки");
	
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда 
		Если Повреждена <> ДокументСсылка.Повреждена ИЛИ Повреждения <> ДокументСсылка.Повреждения Тогда 
			ДокументОбъект             = ДокументСсылка.ПолучитьОбъект();
			ДокументОбъект.Повреждена  = Повреждена;
			ДокументОбъект.Повреждения = Повреждения;
			Попытка
				Если ДокументСсылка.Проведен Тогда
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				Иначе
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
				СтруктураВозврата.ДокументПроведен = ДокументОбъект.Проведен;
			Исключение
				СтруктураВозврата.ДокументПроведен = Ложь;
				СтруктураВозврата.ОписаниеОшибки = ОписаниеОшибки();
			КонецПопытки;
		Иначе
			СтруктураВозврата.ДокументПроведен = Ложь;
			СтруктураВозврата.ОписаниеОшибки = "Данные не изменились!";
		КонецЕсли;
	Иначе
		СтруктураВозврата.ДокументПроведен = Ложь;
		СтруктураВозврата.ОписаниеОшибки = "Документ не найден!";
	КонецЕсли;	

	Возврат СтруктураВозврата;
	
КонецФункции

#КОНЕЦОБЛАСТИ

#ОБЛАСТЬ ДОБАВЛЕНИЕКИ

Функция AddContactData(Data)
	мЗапрос   = Data.Получить();
	УстановитьПривилегированныйРежим(Истина);
	СтрТел    = пкДесериализовать(мЗапрос);
	ТекДата   = ТекущаяДата();

	мОбъект = СтрТел.Объект.ПолучитьОбъект();
	Если мОбъект <> Неопределено Тогда
		Для Каждого Стр Из СтрТел.МассивСтрок Цикл
			НоваяСтрока = мОбъект.КонтактнаяИнформация.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
		КонецЦикла;	
		мОбъект.Записать();
	КонецЕсли;	
	
	Рез = Новый Структура;
	Рез.Вставить("Дата",ТекДата); 
	Рез.Вставить("ОписаниеОшибки","");
	
	УстановитьПривилегированныйРежим(ЛОЖЬ);
	Возврат Новый ХранилищеЗначения(пкСериализовать(Рез));
КонецФункции

#КОНЕЦОБЛАСТИ

#ОБЛАСТЬ РАБОТАСКОНТРАГЕНТАМИ

Функция AddPartners(Data)
	мЗапрос   = Data.Получить();
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтрТел   = пкДесериализовать(мЗапрос);
	Менеджер = СтрТел.Менеджер;
	
	Запрос       = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Партнеры.Ссылка
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.Код В(&МассивКодов)";	
	Запрос.УстановитьПараметр("МассивКодов",СтрТел.МассивКодов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Эл = Выборка.Ссылка.ПолучитьОбъект();
		Если Эл.пкМенеджеры.Найти(Менеджер) = Неопределено Тогда
			НоваяСтрока = Эл.пкМенеджеры.Добавить();
			НоваяСтрока.Менеджер = Менеджер;
			Эл.Записать();
		КонецЕсли;	
	КонецЦикла;	
	
	Рез = Новый Структура("Результат,Ошибка","",Новый Структура("ЕстьОшибка,ТекстОшибки",Ложь,""));
	
	УстановитьПривилегированныйРежим(ЛОЖЬ);
	
	Возврат Новый ХранилищеЗначения(пкСериализовать(Рез),Новый СжатиеДанных(9));
	
КонецФункции

#КОНЕЦОБЛАСТИ

#ОБЛАСТЬ УСТАНОВИТЬ_ДАТЫ_ПРОДАЖИ

Функция SetDeliveryDates(Data)
 	
	мЗапрос   = Data.Получить();
	
	УстановитьПривилегированныйРежим(Истина);
	
	УстановитьПараметрСеансаПоТекущемуПользователю();
	
	СтрТел    = пкДесериализовать(мЗапрос);
	
	ТехникаКДоставке = СтрТел.Параметры.ТехникаКДоставке;
	ВидДоставки      = СтрТел.Параметры.ВидДоставки;
	
	Попытка
		Для Каждого Строка ИЗ ТехникаКДоставке Цикл
			Если Строка.ДатаДоставки <> Строка.ДатаДоставкиДоИзменения ИЛИ Строка.ДатаАренды <> Строка.ДатаАрендыДоИзменения Тогда
				Если ЗначениеЗаполнено(Строка.ЗаданиеНаПеревозку) Тогда
					ЗаданиеНаПеревозку = Строка.ЗаданиеНаПеревозку.ПолучитьОбъект();
					ЗаданиеНаПеревозку.ДатаОтгрузки = Строка.ДатаДоставки;
					ЗаданиеНаПеревозку.ДатаАренды   = Строка.ДатаАренды;
					ЗаданиеНаПеревозку.Записать(РежимЗаписиДокумента.Проведение);
				Иначе
					ОформитьЗаданиеНаПеревозку(Строка.ЗаявкаНаАрендуТехники, Строка.Модель, ВидДоставки, Строка.ДатаДоставки, Строка.ДатаАренды);   
				КонецЕсли;    
			КонецЕсли;    
		КонецЦикла; 
		Рез = Новый Структура("Результат,Ошибка","",Новый Структура("ЕстьОшибка,ТекстОшибки",Ложь,""));
	Исключение
		Рез = Новый Структура("Результат,Ошибка","",Новый Структура("ЕстьОшибка,ТекстОшибки",Истина,ОписаниеОшибки()));
	КонецПопытки;
	
	
	УстановитьПривилегированныйРежим(ЛОЖЬ);
	
	Возврат Новый ХранилищеЗначения(пкСериализовать(Рез), Новый СжатиеДанных(9));
	
КонецФункции

Процедура ОформитьЗаданиеНаПеревозку(ЗаявкаНаАрендуТехники, Модель, ВидДоставки, ДатаДоставки, ДатаАренды)
            
    ЗаданиеНаПеревозку = Документы.пкЗаданиеНаПеревозку.СоздатьДокумент();
    
    ЗаданиеНаПеревозку.Дата                  = ТекущаяДата();
    ЗаданиеНаПеревозку.Статус                = Перечисления.пкСтатусыЗаданийНаПеревозку.Запланировано;
    
    ЗаданиеНаПеревозку.ВидОперации           = ?(ВидДоставки = "Отгрузка", Перечисления.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту, 
        Перечисления.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента);
    
    ЗаданиеНаПеревозку.ДатаОтгрузки          = ДатаДоставки;
    ЗаданиеНаПеревозку.ДатаАренды            = ДатаАренды;
    ЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники = ЗаявкаНаАрендуТехники;
    ЗаданиеНаПеревозку.Модель                = Модель;
    ЗаданиеНаПеревозку.АдресДоставки         = ЗаявкаНаАрендуТехники.АдресДоставки;
    ЗаданиеНаПеревозку.ВремяДоставкиС        = ЗаявкаНаАрендуТехники.ВремяДоставкиС;
    ЗаданиеНаПеревозку.ВремяДоставкиПо       = ЗаявкаНаАрендуТехники.ВремяДоставкиПо;
    ЗаданиеНаПеревозку.СпособДоставки        = ЗаявкаНаАрендуТехники.СпособДоставки;
    ЗаданиеНаПеревозку.Подразделение         = ЗаявкаНаАрендуТехники.Подразделение;
    
    Если ВидДоставки = "Возврат" Тогда
        ЗаданиеНаПеревозку.СкладПолучатель   = ЗаданиеНаПеревозку.Подразделение.пкСкладТехники;      
    КонецЕсли;
    
    ЗаданиеНаПеревозку.Записать(РежимЗаписиДокумента.Проведение);                
КонецПроцедуры    

Функция CreateDeliveryOrders(Data)
	мЗапрос   = Data.Получить();
	
	УстановитьПривилегированныйРежим(Истина);
	
	УстановитьПараметрСеансаПоТекущемуПользователю();
	
	СтрТел           = пкДесериализовать(мЗапрос);
	
	ТехникаКДоставке = СтрТел.Параметры.ТехникаКДоставке;
	
	Попытка
		Для Каждого Строка ИЗ ТехникаКДоставке Цикл
			ОсталосьОформить = ОформитьЗапланированныеЗадания(Строка.ЗаявкаНаАрендуТехники, Строка.Модель, Строка.ВидОперации, Строка.Количество);
			Если ОсталосьОформить > 0 Тогда
				ОформитьЗаданияБезТехники(Строка.ЗаявкаНаАрендуТехники, Строка.Модель, Строка.ВидОперации, ОсталосьОформить, Строка.ДатаОтгрузки, Строка.ДатаАренды);
			КонецЕсли;
		КонецЦикла;
		Рез = Новый Структура("Результат,Ошибка","",Новый Структура("ЕстьОшибка,ТекстОшибки",Ложь,""));
	Исключение
		Рез = Новый Структура("Результат,Ошибка","",Новый Структура("ЕстьОшибка,ТекстОшибки",Истина,ОписаниеОшибки()));
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(ЛОЖЬ);
	
	Возврат Новый ХранилищеЗначения(пкСериализовать(Рез), Новый СжатиеДанных(9));
	
КонецФункции

Функция ОформитьЗапланированныеЗадания(ЗаявкаНаАрендуТехники, Модель, ВидПеревозки, Количество, ЗаменаТехники = Ложь)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаданиеНаПеревозку
    |ИЗ
    |   РегистрНакопления.пкМоделиКДоставкеПоЗаявкамНаАрендуТехники.Остатки(
    |           ,
    |           ЗаданиеНаПеревозку <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |               И ЗаявкаНаАрендуТехники = &ЗаявкаНаАрендуТехники
    |               И Модель = &Модель) КАК пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки
    |ГДЕ
    |   ВЫБОР
    |           КОГДА &ВидПеревозки = ""Отгрузка""
    |               ТОГДА пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.КОтгрузкеОстаток > 0
    |           ИНАЧЕ пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.КВозвратуОстаток > 0
    |       КОНЕЦ
    |
    |УПОРЯДОЧИТЬ ПО
    |   пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаданиеНаПеревозку.Техника УБЫВ";
    
    Запрос.УстановитьПараметр("ЗаявкаНаАрендуТехники", ЗаявкаНаАрендуТехники);
    Запрос.УстановитьПараметр("Модель",                Модель);
    Запрос.УстановитьПараметр("ВидПеревозки",          ВидПеревозки);
        
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
        
    Пока Выборка.Следующий() Цикл
        Если Количество = 0 Тогда
            Прервать
        КонецЕсли;
        
        ЗаданиеНаПеревозку               = Выборка.ЗаданиеНаПеревозку.ПолучитьОбъект();
        ЗаданиеНаПеревозку.Статус        = Перечисления.пкСтатусыЗаданийНаПеревозку.КДоставке;
        ЗаданиеНаПеревозку.ЗаменаТехники = ЗаменаТехники;
        
        Попытка
            ЗаданиеНаПеревозку.Записать(РежимЗаписиДокумента.Проведение);        
        Исключение
        КонецПопытки;
        
        Если ЗаменаТехники Тогда
            ЗаданиеНаПеревозкуЗамена = ЗаданиеНаПеревозку.Скопировать();
            ЗаданиеНаПеревозкуЗамена.Дата          = ЗаданиеНаПеревозку.Дата; 
            ЗаданиеНаПеревозкуЗамена.ЗаменаТехники = Ложь;
            ЗаданиеНаПеревозкуЗамена.ВидОперации   = Перечисления.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту;
            
            Попытка
                ЗаданиеНаПеревозкуЗамена.Записать(РежимЗаписиДокумента.Проведение);        
            Исключение
            КонецПопытки;
        КонецЕсли;    
        
        Количество = Количество - 1;
    КонецЦикла;
    
    Возврат Количество;
    
КонецФункции    

Процедура ОформитьЗаданияБезТехники(ЗаявкаНаАрендуТехники, Модель, ВидПеревозки, Количество, ДатаОтгрузки, ДатаАренды, ЗаменаТехники = Ложь)
        
    Для Счетчик = 1 По Количество Цикл
        
        ЗаданиеНаПеревозку = Документы.пкЗаданиеНаПеревозку.СоздатьДокумент();
        
        ЗаданиеНаПеревозку.Дата                  = ТекущаяДата();
        ЗаданиеНаПеревозку.Статус                = Перечисления.пкСтатусыЗаданийНаПеревозку.КДоставке;
        
        ЗаданиеНаПеревозку.ВидОперации           = ?(ВидПеревозки = "Отгрузка", Перечисления.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту, 
            Перечисления.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента);
            
        ЗаданиеНаПеревозку.ДатаОтгрузки          = ДатаОтгрузки;
        ЗаданиеНаПеревозку.ДатаАренды            = ДатаАренды;
        ЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники = ЗаявкаНаАрендуТехники;
        ЗаданиеНаПеревозку.Модель                = Модель;
        ЗаданиеНаПеревозку.АдресДоставки         = ЗаявкаНаАрендуТехники.АдресДоставки;
        ЗаданиеНаПеревозку.ВремяДоставкиС        = ЗаявкаНаАрендуТехники.ВремяДоставкиС;
        ЗаданиеНаПеревозку.ВремяДоставкиПо       = ЗаявкаНаАрендуТехники.ВремяДоставкиПо;
        ЗаданиеНаПеревозку.СпособДоставки        = ЗаявкаНаАрендуТехники.СпособДоставки;
        ЗаданиеНаПеревозку.Подразделение         = ЗаявкаНаАрендуТехники.Подразделение;
        ЗаданиеНаПеревозку.ЗаменаТехники         = ЗаменаТехники;
        
        Если ВидПеревозки = "Возврат" Тогда
            ЗаданиеНаПеревозку.СкладПолучатель   = ЗаданиеНаПеревозку.Подразделение.пкСкладТехники;      
        КонецЕсли;
        
        Попытка
            ЗаданиеНаПеревозку.Записать(РежимЗаписиДокумента.Проведение);        
        Исключение
        КонецПопытки;
        
        Если ЗаменаТехники Тогда
            ЗаданиеНаПеревозкуЗамена = ЗаданиеНаПеревозку.Скопировать();
            ЗаданиеНаПеревозкуЗамена.Дата          = ЗаданиеНаПеревозку.Дата; 
            ЗаданиеНаПеревозкуЗамена.ЗаменаТехники = Ложь;
            ЗаданиеНаПеревозкуЗамена.ВидОперации   = Перечисления.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту;
            
            Попытка
                ЗаданиеНаПеревозкуЗамена.Записать(РежимЗаписиДокумента.Проведение);        
            Исключение
            КонецПопытки;
        КонецЕсли;    
    КонецЦикла;    
    
КонецПроцедуры 

#КОНЕЦОБЛАСТИ

#ОБЛАСТЬ ПОГРУЗКА_ВЫГРУЗКА 

Функция UpdateLoadOperations(Data)
	
	мЗапрос   = Data.Получить();
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтрТел                  = пкДесериализовать(мЗапрос);

	ДанныеПогрузкиРазгрузки = СтрТел.Параметры.ДанныеПогрузкиРазгрузки;
	ИдУстройства            = СтрТел.Параметры.ИДУстройства;
	
	Попытка
		пкЗагрузкаДокумента(ДанныеПогрузкиРазгрузки,Тип("ДокументСсылка.пкПогрузкаВыгрузкаПоДоставке"),Новый Структура,Справочники.пкМобильныеУстройства.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДУстройства)));
		Рез = Новый Структура("Успех,Ошибка",Истина, Новый Структура("ЕстьОшибка,ТекстОшибки",ЛОЖЬ,""));
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(ТекстОшибки,УровеньЖурналаРегистрации.Ошибка);
		Рез = Новый Структура("Успех,Ошибка",ЛОЖЬ, Новый Структура("ЕстьОшибка,ТекстОшибки",Истина,ТекстОшибки));
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(ЛОЖЬ);
	
	Возврат Новый ХранилищеЗначения(пкСериализовать(Рез), Новый СжатиеДанных(9));
	
КонецФункции

#КОНЕЦОБЛАСТИ

#ОБЛАСТЬ ПЕЧАТЬ_СПИСКА_СЧЕТОВ 

Функция PrintBillsList(Data)
	
	мЗапрос = Data.Получить();	
	УстановитьПривилегированныйРежим(Истина);
	
	СтрТел  = пкДесериализовать(мЗапрос);
	ТаблицаСчетов = СтрТел.Параметры.ТаблицаСчетов;
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.АвтоМасштаб        = Истина;
	ТабДок.ОтображатьСетку    = Ложь;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	Макет   = Справочники.пкСтруктураДанных.ПолучитьМакет("СписокСчетов");
	Область = Макет.ПолучитьОбласть("Шапка");
	ТабДок.Вывести(Область);
	Область = Макет.ПолучитьОбласть("Строка");
	СЧ = 0;
	Для Каждого СтрокаТЧ Из ТаблицаСчетов Цикл
		СЧ = СЧ + 1;
		Область.Параметры.Заполнить(СтрокаТЧ);
		Область.Параметры.НомерСтроки = СЧ;
		ТабДок.Вывести(Область);
	КонецЦикла;
	Область = Макет.ПолучитьОбласть("Подвал"); 
	мСписокКолонок = Новый Массив;
	мСписокКолонок.Добавить("Сумма");
	мСписокКолонок.Добавить("Оплата");
	мСписокКолонок.Добавить("НеОтгружено");
	мСписокКолонок.Добавить("СуммаДолга");
	Для Каждого Колонка Из мСписокКолонок Цикл
		Область.Параметры[Колонка] = Формат(ТаблицаСчетов.Итог(Колонка),"ЧДЦ=2");
	КонецЦикла;		
	ТабДок.Вывести(Область);
	
	ИмяВФ           = ПолучитьИмяВременногоФайла("xlsx");
	ТабДок.Записать(ИмяВФ,ТипФайлаТабличногоДокумента.XLSX);
	ДД              = Новый ДвоичныеДанные(ИмяВФ);
	ПредставлениеПФ = "Список счетов.pdf";
	УдалитьФайлы(ИмяВФ);
	
	Рез = Новый Структура("ПечатнаяФорма,Представление,Ошибка",Новый ХранилищеЗначения(ДД, Новый СжатиеДанных(9)),ПредставлениеПФ,Новый Структура("ЕстьОшибка,ТекстОшибки",ЛОЖЬ,""));
	
	УстановитьПривилегированныйРежим(ЛОЖЬ);
	
	Возврат Новый ХранилищеЗначения(пкСериализовать(Рез), Новый СжатиеДанных(9));
	
КонецФункции

#КОНЕЦОБЛАСТИ

#ОБЛАСТЬ ОБНОВЛЕНИЕ_ЗАЯВКИ_НА_РДС 

Функция UpdateExpenceRequest(Data)
	мЗапрос   = Data.Получить();
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтрТел       = пкДесериализовать(мЗапрос);
	
	УстановитьПараметрСеансаПоТекущемуПользователю();

	ИдЗаявки                    = СтрТел.Параметры.ИдЗаявки;
	пкСтатьяРасходовПоЛогистике = СтрТел.Параметры.пкСтатьяРасходовПоЛогистике;
	пкТранспортныеСредства      = СтрТел.Параметры.пкТранспортныеСредства;
	СтавкаНДС                   = СтрТел.Параметры.СтавкаНДС;
	Сумма                       = СтрТел.Параметры.Сумма;
	СуммаНДС                    = СтрТел.Параметры.СуммаНДС;
	
	ДокСсылка = Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдЗаявки));
	
	Док = ДокСсылка.ПолучитьОбъект();
	
	Рез = Новый Структура;
	
	Если Док = Неопределено Тогда
		Рез.Вставить("Ошибка",Новый Структура("ЕстьОшибка,ТекстОшибки",Истина,"Заявка не найдена в Центральной базе!"));
	ИначеЕсли Док.РасшифровкаПлатежа.Количество() <> 1 Тогда
		Рез.Вставить("Ошибка",Новый Структура("ЕстьОшибка,ТекстОшибки",Истина,"В расшифровке платежа более одной строки! Изменение таких заявок не поддерживается!"));
	Иначе
		Попытка
			Док.пкСтатьяРасходовПоЛогистике = пкСтатьяРасходовПоЛогистике;
			Док.пкТранспортныеСредства.Загрузить(пкТранспортныеСредства);
			
			СтрокаРасшифровки                     = Док.РасшифровкаПлатежа[0];
			СтрокаРасшифровки.СтавкаНДС           = СтавкаНДС;
			СтрокаРасшифровки.СуммаВзаиморасчетов = Сумма;
			СтрокаРасшифровки.Сумма               = Сумма;
			СтрокаРасшифровки.СуммаНДС            = СуммаНДС;
			
			Док.СуммаДокумента = Сумма;
			Док.пкСтавкаНДС    = СтавкаНДС;
			Док.пкСуммаБезНДС  = Сумма - СуммаНДС;
			
			Если Док.Проведен Тогда
				Док.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			Иначе
				Док.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			Рез.Вставить("Ошибка",Новый Структура("ЕстьОшибка,ТекстОшибки",ЛОЖЬ,""));
		Исключение
			Рез.Вставить("Ошибка",Новый Структура("ЕстьОшибка,ТекстОшибки",Истина,ОписаниеОшибки()));
		КонецПопытки;
	КонецЕсли;	
	
	Возврат Новый ХранилищеЗначения(пкСериализовать(Рез), Новый СжатиеДанных(9));
	
	УстановитьПривилегированныйРежим(ЛОЖЬ);
КонецФункции

#КОНЕЦОБЛАСТИ

#ОБЛАСТЬ ОТМЕНА_ЗАДАНИЯ 

Функция CancelDelivery(Data)
	мЗапрос = Data.Получить();
	УстановитьПривилегированныйРежим(Истина);
	УстановитьПараметрСеансаПоТекущемуПользователю();
	
	СтрТел = пкДесериализовать(мЗапрос);
	
	Рез = Новый Структура;
	
	Док = СтрТел.Параметры.Доставка.ПолучитьОбъект();
	Если Док = Неопределено Тогда
		Рез.Вставить("Ошибка",Новый Структура("ЕстьОшибка,ТекстОшибки",Истина,"Доставка не найдена в Центральной базе!"));
	Иначе	
		ЗаданиеНаПеревозку = СтрТел.Параметры.ЗаданиеНаПеревозку;
		ИскомаяСтрока      = Док.ЗаданияНаПеревозку.Найти(ЗаданиеНаПеревозку);
		Если ИскомаяСтрока <> Неопределено Тогда
			Попытка
				ИскомаяСтрока.Отменено = СтрТел.Параметры.ЗаданиеОтменено;
				Если Док.Проведен Тогда
					Док.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				Иначе
					Док.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
				Если СтрТел.Параметры.ЗаданиеОтменено Тогда
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	ТЧ.Ссылка
					|ИЗ
					|	Документ.пкПогрузкаВыгрузкаПоДоставке КАК ТЧ
					|ГДЕ
					|	ТЧ.Проведен
					|	И ТЧ.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозку
					|	И ТЧ.Доставка = &Доставка";
					Запрос.УстановитьПараметр("ЗаданиеНаПеревозку",ЗаданиеНаПеревозку);
					Запрос.УстановитьПараметр("Доставка"          ,Док.Ссылка);
					Выборка = Запрос.Выполнить().Выбрать();
					Пока Выборка.Следующий() Цикл
						Выборка.Ссылка.ПолучитьОбъект().Записать(РежимЗаписиДокумента.ОтменаПроведения);
					КонецЦикла;	
				КонецЕсли;
				Рез.Вставить("Ошибка",Новый Структура("ЕстьОшибка,ТекстОшибки",ЛОЖЬ,""));
			Исключение
				Рез.Вставить("Ошибка",Новый Структура("ЕстьОшибка,ТекстОшибки",Истина,ОписаниеОшибки()));
			КонецПопытки;
		Иначе	
			Рез.Вставить("Ошибка",Новый Структура("ЕстьОшибка,ТекстОшибки",Истина,"Доставка не найдена в Центральной базе!"));
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(ЛОЖЬ);
	
	Возврат Новый ХранилищеЗначения(пкСериализовать(Рез), Новый СжатиеДанных(9));
КонецФункции

#КОНЕЦОБЛАСТИ

#ОБЛАСТЬ СМЕНА_ПАРОЛЯ

Функция UpdatePassword(Data)
	мЗапрос = Data.Получить();
	СтрТел  = пкДесериализовать(мЗапрос);
	УстановитьПривилегированныйРежим(Истина);
	Рез     = Новый Структура;
	Попытка	
		Пользователь        = СтрТел.Пользователь.ПолучитьОбъект();
		Пользователь.Пароль = СтрТел.Пароль;
		Пользователь.Записать();
		Рез.Вставить("Ошибка",Новый Структура("ЕстьОшибка,ТекстОшибки",ЛОЖЬ,""));
	Исключение
		Рез.Вставить("Ошибка",Новый Структура("ЕстьОшибка,ТекстОшибки",Истина,ОписаниеОшибки()));
	КонецПопытки;	
	УстановитьПривилегированныйРежим(ЛОЖЬ);
	Возврат Новый ХранилищеЗначения(пкСериализовать(Рез), Новый СжатиеДанных(9));
КонецФункции

#КОНЕЦОБЛАСТИ