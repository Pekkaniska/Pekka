#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// Обработчик обновления КА 2.4.1.
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт

	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрНакопления.ВыпускПродукции";
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДанныеРегистра.Регистратор КАК Ссылка
	|	ИЗ
	|		РегистрНакопления.ВыпускПродукции КАК ДанныеРегистра
	|	ГДЕ
	|		ДанныеРегистра.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	//++ НЕ УТКА
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДанныеРегистра.Регистратор КАК Ссылка
	|	ИЗ
	|		РегистрНакопления.ВыпускПродукции КАК ДанныеРегистра
	|	ГДЕ
	|		(ДанныеРегистра.Распоряжение = ЗНАЧЕНИЕ(Документ.МаршрутныйЛистПроизводства.ПустаяСсылка)
	|				ИЛИ ДанныеРегистра.Распоряжение = ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
	|				ИЛИ ДанныеРегистра.Распоряжение = НЕОПРЕДЕЛЕНО
	|				ИЛИ ДанныеРегистра.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|				ИЛИ ДанныеРегистра.Спецификация <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка))
	|		И ДанныеРегистра.Регистратор Ссылка Документ.ЭтапПроизводства2_2
	//-- НЕ УТКА
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДанныеРегистра.Регистратор КАК Ссылка
	|	ИЗ
	|		РегистрНакопления.ВыпускПродукции КАК ДанныеРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитики
	|		ПО ДанныеРегистра.АналитикаУчетаНоменклатуры = Аналитики.КлючАналитики
	|	ГДЕ
	|		(ДанныеРегистра.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|				ИЛИ ДанныеРегистра.Спецификация <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|				ИЛИ ТИПЗНАЧЕНИЯ(Аналитики.Склад) = ТИП(Справочник.СтруктураПредприятия)
	|					И ДанныеРегистра.СтатьяРасходов = НЕОПРЕДЕЛЕНО)
	|		И ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.ПроизводствоБезЗаказа)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Поступление от переработчика при ПУ 2.2 больше не делает движений по регистру Выпуск продукции.
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДанныеРегистра.Регистратор КАК Ссылка
	|	ИЗ
	|		РегистрНакопления.ВыпускПродукции КАК ДанныеРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеОтПереработчика КАК Реквизиты
	|		ПО ДанныеРегистра.Регистратор = Реквизиты.Ссылка
	|	ГДЕ
	|		&ПартионныйУчетВерсии22
	|		И Реквизиты.Дата >= &ДатаПереходаНаПартионныйУчетВерсии22
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// при ПУ 2.2 движения по регистру Выпуск продукции делает отчет переработчика
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Реквизиты.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ОтчетПереработчика КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВыпускПродукции КАК ДанныеРегистра
	|			ПО ДанныеРегистра.Регистратор = Реквизиты.Ссылка
	|	ГДЕ
	|		&ПартионныйУчетВерсии22
	|		И Реквизиты.Дата >= &ДатаПереходаНаПартионныйУчетВерсии22
	|		И Реквизиты.Проведен
	|		И ДанныеРегистра.Регистратор ЕСТЬ NULL
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// обновление аналитики учета номенклатуры честных складов для производства без заказа
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДанныеРегистра.Регистратор КАК Ссылка
	|	ИЗ
	|		РегистрНакопления.ВыпускПродукции КАК ДанныеРегистра
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПроизводствоБезЗаказа КАК ДокументыДвижения
	|		ПО ДокументыДвижения.Ссылка = ДанныеРегистра.Регистратор
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитики
	|		ПО ДанныеРегистра.АналитикаУчетаНоменклатуры = Аналитики.КлючАналитики
	|
	|	ГДЕ
	|		ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.ПроизводствоБезЗаказа)
	|		И ТИПЗНАЧЕНИЯ(Аналитики.Склад) = ТИП(Справочник.Склады)
	|		И НЕ Аналитики.Склад.ЦеховаяКладовая
	|	) КАК ДанныеРегистра
	|");
	
	Запрос.УстановитьПараметр(
		"ДатаПереходаНаПартионныйУчетВерсии22",
		УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ДатаПереходаНаПартионныйУчетВерсии22());
	Запрос.УстановитьПараметр(
		"ПартионныйУчетВерсии22",
		УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВерсии22(НачалоМесяца(ТекущаяДатаСеанса())));
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
	
КонецПроцедуры

// Обработчик обновления КА 2.4.1.
// Очищается вид запасов с типом запасов Услуга.
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт

	ПолноеИмяРегистра = "РегистрНакопления.ВыпускПродукции";
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ВыпускПродукции;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	
	
	Регистраторы = Новый Массив;
	//++ НЕ УТКА
	Регистраторы.Добавить("Документ.ЭтапПроизводства2_2");
	//-- НЕ УТКА
	Регистраторы.Добавить("Документ.ПроизводствоБезЗаказа");
	Регистраторы.Добавить("Документ.ПоступлениеОтПереработчика");
	Регистраторы.Добавить("Документ.ОтчетПереработчика");
	
	ОбработкаЗавершена = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(Регистраторы,
	                                                                                  ПолноеИмяРегистра,
	                                                                                  Параметры.Очередь);
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(Параметры.Очередь, Неопределено, ПолноеИмяРегистра);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Движения.Регистратор                   КАК Регистратор,
	|	Движения.Период                        КАК Период,
	|	Движения.Организация                   КАК Организация,
	|	Движения.АналитикаУчетаНоменклатуры    КАК АналитикаУчетаНоменклатуры,
	|	Движения.Распоряжение                  КАК Распоряжение,
	|	Движения.КодСтроки                     КАК КодСтроки,
	|	Движения.Заказ                         КАК Заказ,
	|	ВЫБОР КОГДА Движения.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		ИНАЧЕ Движения.ВидЗапасов
	|	КОНЕЦ                                  КАК ВидЗапасов,
	|	Движения.Спецификация                  КАК Спецификация,
	|	Движения.Подразделение                 КАК Подразделение,
	|	Движения.СтатьяРасходов                КАК СтатьяРасходов,
	|	Движения.АналитикаРасходов             КАК АналитикаРасходов,
	|	Движения.Количество                    КАК Количество,
	|	Движения.АналитикаУчетаПродукции       КАК АналитикаУчетаПродукции
	|
	|ИЗ
	|	РегистрНакопления.ВыпускПродукции КАК Движения
	|ГДЕ
	|	Движения.Регистратор = &Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	Пока Выборка.Следующий() Цикл
		
		Регистратор = Выборка.Регистратор;
		
		// Данные документы должны быть обработаны стандартной процедурой ПерезаписатьДвиженияИзОчереди 
		//  с проверкой блокировки документов другими очередями.
		Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПоступлениеОтПереработчика")
			Или ТипЗнч(Регистратор) = Тип("ДокументСсылка.ОтчетПереработчика")
			//++ НЕ УТКА
			Или ТипЗнч(Регистратор) = Тип("ДокументСсылка.ЭтапПроизводства2_2")
			//-- НЕ УТКА
			Или ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПроизводствоБезЗаказа") Тогда
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Регистратор", Регистратор);
			
			Набор = РегистрыНакопления.ВыпускПродукции.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			
			Результат = Запрос.Выполнить().Выгрузить();
			Если Результат.Количество() = 0 Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Регистратор, ДополнительныеПараметры);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Набор.Загрузить(Результат);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Регистратор% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", Регистратор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
				Регистратор.Метаданные(), ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли