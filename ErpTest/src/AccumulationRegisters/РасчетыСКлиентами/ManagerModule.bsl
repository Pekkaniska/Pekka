#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК Т
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Т1 
	|	ПО Т.АналитикаУчетаПоПартнерам = Т1.КлючАналитики
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Т1.Организация)
	|	И ЗначениеРазрешено(Т1.Партнер)";
	
	Ограничение.ТекстДляВнешнихПользователей =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК ЭтотСписок
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|	ПО АналитикаУчетаПоПартнерам.КлючАналитики = ЭтотСписок.АналитикаУчетаПоПартнерам
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВнешниеПользователи КАК ВнешниеПользователиПартнеры
	|	ПО ВнешниеПользователиПартнеры.ОбъектАвторизации = АналитикаУчетаПоПартнерам.Партнер
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ВнешниеПользователиПартнеры.Ссылка)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// Регистрирует данные для многопоточного обработчика обновления
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.РасчетыСКлиентами";
	
	ПараметрыВыборки 						= Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров 	= ПолноеИмяРегистра;
	ПараметрыВыборки.ПолныеИменаОбъектов 	= ТипыДокументовКОбработке();
	ПараметрыВыборки.СпособВыборки 			= ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКлиентами.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|ГДЕ
	//Обработчик 2.4.2
	|	(((РасчетыСКлиентами.Сумма <> 0
	|			ИЛИ РасчетыСКлиентами.КОплате <> 0)
	|	И РасчетыСКлиентами.Регистратор ССЫЛКА Документ.ВводОстатков
	|	И РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ТИПЗНАЧЕНИЯ(РасчетыСКлиентами.ЗаказКлиента) НЕ В (&ТипыДокументов)
	|	И ТИПЗНАЧЕНИЯ(РасчетыСКлиентами.ЗаказКлиента) НЕ В (ТИП(Справочник.ДоговорыКонтрагентов),ТИП(Справочник.ДоговорыМеждуОрганизациями))
	|	И РасчетыСКлиентами.РасчетныйДокумент = Неопределено
	|	И РасчетыСКлиентами.ЗаказКлиента <> НЕОПРЕДЕЛЕНО)
	//Обработчик 2.4.6
	//Порядок расчетов
	|	ИЛИ (((РасчетыСКлиентами.ПорядокОперации = """" 
	|			ИЛИ РасчетыСКлиентами.ПорядокЗачетаПоДатеПлатежа = """")
	|		И (РасчетыСКлиентами.Сумма <> 0 ИЛИ РасчетыСКлиентами.КОплате <> 0 ИЛИ РасчетыСКлиентами.КОтгрузке <> 0))
	//Связанный документ Корректировки реализации
	|		ИЛИ РасчетыСКлиентами.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|			И РасчетыСКлиентами.СвязанныйДокумент = Неопределено
	//Хозяйственная операция
	|		ИЛИ РасчетыСКлиентами.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
	|			И НЕ РасчетыСКлиентами.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	//Пустые варианты оплаты
	|		ИЛИ РасчетыСКлиентами.КОплате <> 0
	|			И ВидДвижения = Значение(ВидДвиженияНакопления.Приход)
	|			И ТИПЗНАЧЕНИЯ(РасчетыСКлиентами.Регистратор) В (&ТипыДокументов)
	|			И РасчетыСКлиентами.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.ПустаяСсылка)
	//Отрицательные отчеты комиссионеров
	|		ИЛИ РасчетыСКлиентами.Сумма < 0
	|			И РасчетыСКлиентами.КОплате > 0
	|			И РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	//Дата регистратора необходима для порядка расчетов
	|		ИЛИ РасчетыСКлиентами.ДатаРегистратора = ДАТАВРЕМЯ(1, 1, 1)
	//++ НЕ УТКА
	//Заполнить продажа по заказу давальца
	|		ИЛИ РасчетыСКлиентами.Регистратор ССЫЛКА Документ.ОтчетДавальцу
	|			И ВЫРАЗИТЬ(РасчетыСКлиентами.Регистратор КАК Документ.ОтчетДавальцу).ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|			И РасчетыСКлиентами.ПродажаПоЗаказу = Неопределено
	|			И (РасчетыСКлиентами.Сумма <> 0 ИЛИ РасчетыСКлиентами.КОплате <> 0 ИЛИ РасчетыСКлиентами.КОтгрузке <> 0)
	//-- НЕ УТКА
	//ХО Удержания вознаграждения
	|		ИЛИ РасчетыСКлиентами.Регистратор ССЫЛКА Документ.ОтчетКомиссионера
	|			И РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И РасчетыСКлиентами.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УдержаниеВознагражденияКомиссионера)
	//Валюта документа 
	|		ИЛИ РасчетыСКлиентами.ВалютаДокумента = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	//КорОбъектРасчетов
	|	ИЛИ (ТИПЗНАЧЕНИЯ(РасчетыСКлиентами.ЗаказКлиента) В (ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств),
	|															ТИП(Документ.ПриходныйКассовыйОрдер),
	|															ТИП(Документ.ОперацияПоПлатежнойКарте))
	|			ИЛИ ТИПЗНАЧЕНИЯ(РасчетыСКлиентами.ЗаказКлиента) = ТИП(Документ.ПервичныйДокумент)
	|				И ВЫРАЗИТЬ(РасчетыСКлиентами.ЗаказКлиента КАК Документ.ПервичныйДокумент).ТипПервичногоДокумента = 
	|					ЗНАЧЕНИЕ(Перечисление.ТипыПервичныхДокументов.ОплатаПоставщику))
	|			И РасчетыСКлиентами.КорОбъектРасчетов = Неопределено
	|			И РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И РасчетыСКлиентами.Сумма <> 0
	//Перезаполенине Хоз операции для отражения возвратов по расшифровке платежа.
	|	ИЛИ ТИПЗНАЧЕНИЯ(РасчетыСКлиентами.Регистратор) = ТИП(Документ.ВозвратТоваровОтКлиента)
	|		И РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И РасчетыСКлиентами.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности)
	|)
	| И НЕ РасчетыСКлиентами.Регистратор ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств
	| И НЕ РасчетыСКлиентами.Регистратор ССЫЛКА Документ.КорректировкаРегистров)
	|");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ТипыДокументов", ПолучитьТипыДокументов());
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, 
																Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор"),
																ПолноеИмяРегистра);
	
КонецПроцедуры

Функция ТипыДокументовКОбработке()
	
	Возврат
		"Документ.ГрафикИсполненияДоговора,
		
		//++ НЕ УТКА
		|Документ.ЗаказДавальца,
		|Документ.ОтчетДавальцу,
		//-- НЕ УТКА
		
		|Документ.ЗаказКлиента,
		|Документ.ЗаявкаНаВозвратТоваровОтКлиента,
		|Документ.АктВыполненныхРабот,
		|Документ.ВводОстатков,
		|Документ.ВзаимозачетЗадолженности,
		|Документ.ВозвратТоваровМеждуОрганизациями,
		|Документ.ВозвратТоваровОтКлиента,
		|Документ.ВыкупВозвратнойТарыКлиентом,
		|Документ.КорректировкаРеализации,
		|Документ.ОперацияПоПлатежнойКарте,
		|Документ.ОперацияПоЯндексКассе,
		|Документ.ОтчетКомиссионера,
		|Документ.ОтчетКомиссионераОСписании,
		|Документ.ОтчетКомитенту,
		|Документ.ОтчетПоКомиссииМеждуОрганизациями,
		|Документ.ОтчетПоКомиссииМеждуОрганизациямиОСписании,
		|Документ.ПередачаТоваровМеждуОрганизациями,
		|Документ.ПоступлениеБезналичныхДенежныхСредств,
		|Документ.ПриходныйКассовыйОрдер,
		|Документ.РасходныйКассовыйОрдер,
		|Документ.РеализацияТоваровУслуг,
		|Документ.РеализацияУслугПрочихАктивов,
		|Документ.СписаниеБезналичныхДенежныхСредств,
		|Документ.СписаниеЗадолженности";
	
КонецФункции

Функция ПолучитьТипыДокументов()

	ТекстТиповДокументов = ""; 
	
	//++ НЕ УТКА
	ТекстТиповДокументов = ТекстТиповДокументов + "ТИП(Документ.ЗаказПереработчику), ";
	//-- НЕ УТКА
	
	ТекстТиповДокументов = ТекстТиповДокументов + "ТИП(Документ.ЗаявкаНаВозвратТоваровОтКлиента), ";
	ТекстТиповДокументов = ТекстТиповДокументов + "ТИП(Документ.ЗаказКлиента)";
	
	Возврат ТекстТиповДокументов;
	
КонецФункции

// Обработчик обновления УТ 11.4.3
// Заполняет реквизит РасчетныйДокумент.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.РасчетыСКлиентами";
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазыУТ.ДополнительныеПараметрыПерезаписиДвиженийИзОчереди();
	ДополнительныеПараметры.НужнаДополнительнаяОбработкаЗаписей = Истина;
	ДополнительныеПараметры.ОбновляемыеДанные = Параметры.ОбновляемыеДанные;
	
	ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(Неопределено, ПолноеИмяРегистра, Параметры.Очередь, ДополнительныеПараметры);
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

// Регистрирует данные для обновления данных движений документа Корректировка регистров
Процедура ЗарегистрироватьДанныеКорректировокРегистровКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.РасчетыСКлиентами";
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКлиентами.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|ГДЕ
	//Обработчик 2.4.6
	//Порядок расчетов
	|	(РасчетыСКлиентами.ПорядокОперации = """" 
	|		ИЛИ РасчетыСКлиентами.ПорядокЗачетаПоДатеПлатежа = """"
	//Дата регистратора необходима для порядка расчетов
	|		ИЛИ РасчетыСКлиентами.ДатаРегистратора = ДАТАВРЕМЯ(1, 1, 1))
	|	И РасчетыСКлиентами.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, 
																Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор"),
																ПолноеИмяРегистра);
	
КонецПроцедуры

// Обработчик обновления УТ 11.4.6
// Заполняет реквизиты ПорядокОперации, ДатаРегистратора, ДатаПлатежа, ПорядокЗачетаПоДатеПлатежа
// по движениям, сделанным документом Корректировка регистров в не многопоточном режиме
//
Процедура ОбработатьДанныеКорректировокРегистровДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.РасчетыСКлиентами";
	
	//Корректировки регистров.
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(Параметры.Очередь,
		"Документ.КорректировкаРегистров", ПолноеИмяРегистра);
	
	ТипДокумента = Тип("ДокументСсылка.КорректировкаРегистров");
	ВидТипДокумента = ОперативныеВзаиморасчетыСервер.ВидТипДокумента(ТипДокумента);
	
	Пока Выборка.Следующий() Цикл
		
		Регистратор = Выборка.Регистратор;
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.КорректировкаРегистров");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			Блокировка.Заблокировать();
			
			РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.Регистратор,"Дата,Номер");
			
			Набор = РегистрыНакопления.РасчетыСКлиентами.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			Набор.Прочитать();
			
			ОбъектИзменен = Ложь;
			
			Для Каждого Запись Из Набор Цикл
				Если Не ЗначениеЗаполнено(Запись.ДатаРегистратора) Тогда
					Запись.ДатаРегистратора = РеквизитыДокумента.Дата;
					ОбъектИзменен = Истина;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Запись.ДатаПлатежа) И Запись.КОплате <> 0 Тогда
					Запись.ДатаПлатежа = РеквизитыДокумента.Дата;
					ОбъектИзменен = Истина;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Запись.ПорядокЗачетаПоДатеПлатежа) ИЛИ Не ЗначениеЗаполнено(Запись.ПорядокОперации) Тогда
					Если Запись.Сумма = 0 И Запись.КОплате <> 0 Тогда
						Запись.ПорядокОперации = ОперативныеВзаиморасчетыСервер.Порядок(Запись.ДатаРегистратора, РеквизитыДокумента.Номер, ВидТипДокумента);
						Запись.ПорядокЗачетаПоДатеПлатежа   = ОперативныеВзаиморасчетыСервер.Порядок(Запись.Период, РеквизитыДокумента.Номер, ВидТипДокумента);
					ИначеЕсли Запись.ВидДвижения = ВидДвиженияНакопления.Приход И Запись.Сумма > 0 
							ИЛИ Запись.ВидДвижения = ВидДвиженияНакопления.Расход И Запись.Сумма < 0 Тогда 
						Запись.ПорядокОперации = ОперативныеВзаиморасчетыСервер.Порядок(Запись.Период, РеквизитыДокумента.Номер, ВидТипДокумента);
						Запись.ПорядокЗачетаПоДатеПлатежа   = Запись.ПорядокОперации;
					Иначе
						Запись.ПорядокОперации = ОперативныеВзаиморасчетыСервер.Порядок(Запись.ДатаРегистратора, РеквизитыДокумента.Номер,,ТипДокумента, Запись.ВидДвижения);
						Запись.ПорядокЗачетаПоДатеПлатежа   = ОперативныеВзаиморасчетыСервер.Порядок(
							?(ЗначениеЗаполнено(Запись.ДатаПлатежа),Запись.ДатаПлатежа,Запись.ДатаРегистратора), РеквизитыДокумента.Номер,, ТипДокумента, Запись.ВидДвижения);
					КонецЕсли;
					ОбъектИзменен = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Регистратор, ДополнительныеПараметры);
			Иначе
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать движения документа ""%1"" по причине:
					|%2'"),
				Регистратор,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Регистратор.Метаданные(),
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли