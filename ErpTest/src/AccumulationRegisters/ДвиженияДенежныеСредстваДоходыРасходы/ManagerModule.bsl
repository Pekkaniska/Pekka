#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

//++ НЕ УТ
#Область ПрограммныйИнтерфейс
//++ НЕ УТКА

// Определяет источники уточнения счета, доступные в регистре и их свойства.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.ИсточникиУточненияСчета().
//
// Параметры:
//  СвойстваИсточника - Строка - "ИмяПоля" - имя атрибута регистра накопления, из которого планируется получать источник
//                               уточнения счета.
//
// Возвращаемое значение:
//  Соответствие - Ключ - название источника уточнения счета. 
//                 Значение - структура свойств источника уточнения счета.
//
Функция ИсточникиУточненияСчета(СвойстваИсточника) Экспорт
	
	ИсточникиУточненияСчета = Новый Соответствие;
	
	ИсточникиУточненияСчета.Вставить(Перечисления.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаДенежныхСредств,
		Новый Структура(СвойстваИсточника, "ГФУДенежныхСредств"));
		
	ИсточникиУточненияСчета.Вставить(Перечисления.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаДоходовРасходов,
		Новый Структура(СвойстваИсточника, "ГФУДоходовРасходов"));
		
	Возврат ИсточникиУточненияСчета;
	
КонецФункции

// Определяет источники подразделений регистра и их свойства.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.ИсточникиПодразделений().
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя источника. 
//                 Значение - структура свойств источника. 
//
Функция ИсточникиПодразделений() Экспорт

	ИсточникиПодразделений = Новый Соответствие;
	
	ИсточникиПодразделений.Вставить(Перечисления.ИсточникиПодразделенийАналитическихРегистров.ХозяйственнаяОперация, "ПодразделениеДоходовРасходов");
	ИсточникиПодразделений.Вставить(Перечисления.ИсточникиПодразделенийАналитическихРегистров.АналитикаУчетаДенежныхСредств, "ДенежныеСредстваПодразделение");
	ИсточникиПодразделений.Вставить(Перечисления.ИсточникиПодразделенийАналитическихРегистров.АналитикаУчетаДоходовРасходов, "АналитикаДоходовРасходовПодразделение");
	
    Возврат ИсточникиПодразделений;
	
КонецФункции

// Определяет источники направлений регистра и их свойства.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.ИсточникиНаправлений().
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя источника. 
//                 Значение - структура свойств источника. 
//
Функция ИсточникиНаправлений() Экспорт

	Результат = Новый Соответствие;
	
	ИсточникиНаправлений = Перечисления.ИсточникиНаправленийДеятельностиАналитическихРегистров;
	Результат.Вставить(ИсточникиНаправлений.НаправлениеДеятельностиДС, "НаправлениеДеятельностиДС");
	Результат.Вставить(ИсточникиНаправлений.НаправлениеДеятельностиСтатьи, "НаправлениеДеятельностиСтатьи");

	Возврат Результат;

КонецФункции

// Определяет источники заполнения субконто.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.ИсточникиСубконто().
//
// Возвращаемое значение:
//  Массив - массив атрибутов регистра.
//
Функция ИсточникиСубконто() Экспорт

	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить("ДенежныеСредства");
	МассивСубконто.Добавить("ТипДенежныхСредств");
	МассивСубконто.Добавить("СтатьяДвиженияДенежныхСредств");
	МассивСубконто.Добавить("СтатьяДоходовРасходов");
	МассивСубконто.Добавить("АналитикаДоходов");
	МассивСубконто.Добавить("АналитикаРасходов");

	Возврат Новый Структура("СубконтоДт, СубконтоКт", МассивСубконто, МассивСубконто);
	
КонецФункции

// Определяет показатели в валюте регистра.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.ПоказателиВВалюте().
//
// Параметры:
//  СвойстваПоказателей - Строка - "ИсточникВалюты" - источник валюты для показателя регистра.
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя показателя.
//                 Значение - структура свойств показателя.
//
Функция ПоказателиВВалюте(СвойстваПоказателей) Экспорт

	ПоказателиВВалюте = Новый Соответствие;
	
	ПоказателиВВалюте.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаВВалюте, Новый Структура(СвойстваПоказателей, "Валюта"));
	
	Возврат ПоказателиВВалюте;

КонецФункции

// Определяет документы отражаемые в международном учете.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.ДокументыКОтражениюВМФУ().
//
// Возвращаемое значение:
//  Массив - массив регистраторов регистра отражаемых в международном учете.
//
Функция ДокументыКОтражениюВМеждународномУчете() Экспорт

	ДокументыКОтражению = Новый Массив;
	ДокументыКОтражению.Добавить("АвансовыйОтчет");
	ДокументыКОтражению.Добавить("НачисленияКредитовИДепозитов");
	ДокументыКОтражению.Добавить("ВыбытиеДенежныхДокументов");
	ДокументыКОтражению.Добавить("РасчетКурсовыхРазниц");
	ДокументыКОтражению.Добавить("ПриходныйКассовыйОрдер");
	ДокументыКОтражению.Добавить("РасходныйКассовыйОрдер");
	ДокументыКОтражению.Добавить("ПоступлениеБезналичныхДенежныхСредств");
	ДокументыКОтражению.Добавить("СписаниеБезналичныхДенежныхСредств");
	ДокументыКОтражению.Добавить("ОтражениеРасхожденийПриИнкассацииДенежныхСредств");
	ДокументыКОтражению.Добавить("ИнвентаризацияНаличныхДенежныхСредств");
	
	Возврат ДокументыКОтражению;

КонецФункции
//-- НЕ УТКА

// Определяет показатели регистра.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.Показатели().
//
// Параметры:
//  Свойства - Структура - содержащая ключи СвойстваПоказателей, СвойстваРесурсов.
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя показателя.
//                 Значение - структура свойств показателя.
//
Функция Показатели(Свойства) Экспорт

	Показатели = Новый Соответствие;
	
	СвойстваПоказателей = Свойства.СвойстваПоказателей;
	СвойстваРесурсов = Свойства.СвойстваРесурсов;
	
	// Массив содержит не только ресурсы регистров, но и производные от них поля в запросах.
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "Сумма", "ВалютаУпр"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаРегл", "ВалютаРегл"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаВВалюте", "Валюта"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.Сумма, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДС", "ВалютаУпр"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДСРегл", "ВалютаРегл"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДСВВалютеПлатежа", "Валюта"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаНДС, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаБезНДС", "ВалютаУпр"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаРеглБезНДС", "ВалютаРегл"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаБезНДСВВалютеПлатежа", "Валюта"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаБезНДС, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаКВыплатеВРамкахЛимита", "Валюта"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаКВыплатеВРамкахЛимита, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаКВыплатеСверхЛимита", "Валюта"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаКВыплатеСверхЛимита, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаКВыплате", "Валюта"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаКВыплате, Новый Структура(СвойстваПоказателей, МассивРесурсов));

	Возврат Показатели;
	
КонецФункции

#КонецОбласти
//-- НЕ УТ

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(ПодразделениеДоходовРасходов)
	|	И( ВЫБОР КОГДА ТипЗначения(ДенежныеСредства) = Тип(Справочник.Кассы) ТОГДА ЗначениеРазрешено(ДенежныеСредства)
	|	КОГДА ТипЗначения(ДенежныеСредства) = Тип(Справочник.КассыККМ) ТОГДА ЗначениеРазрешено(ДенежныеСредства)
	|	КОГДА ТипЗначения(ДенежныеСредства) = Тип(Справочник.ФизическиеЛица) ТОГДА ЗначениеРазрешено(ДенежныеСредства)
	|	ИНАЧЕ ИСТИНА КОНЕЦ) ";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Обработчик обновления УТ 11.4.1
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ДвиженияДенежныеСредстваДоходыРасходы;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	
	// Проверяем, что в выборку не попадают записи базы узла РИБ, в которую мигрируют записи без регистратора.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Заявки.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА Заявки.ДатаПлатежа <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА Заявки.ДатаПлатежа
	|		КОГДА Заявки.ЖелательнаяДатаПлатежа <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА Заявки.ЖелательнаяДатаПлатежа
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(Заявки.Дата, ДЕНЬ)
	|	КОНЕЦ КАК Период
	|ПОМЕСТИТЬ Регистраторы
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявки
	|ГДЕ
	|	Заявки.Проведен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДвиженияДенежныеСредстваДоходыРасходы.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваДоходыРасходы КАК ДвиженияДенежныеСредстваДоходыРасходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Регистраторы КАК Регистраторы
	|		ПО ДвиженияДенежныеСредстваДоходыРасходы.Период = Регистраторы.Период
	|			И ДвиженияДенежныеСредстваДоходыРасходы.Регистратор = Регистраторы.Ссылка
	|ГДЕ
	|	ДвиженияДенежныеСредстваДоходыРасходы.Регистратор ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств
	|	И Регистраторы.Ссылка ЕСТЬ NULL
	|	И (ДвиженияДенежныеСредстваДоходыРасходы.СуммаКВыплатеВРамкахЛимита <> 0
	|			ИЛИ ДвиженияДенежныеСредстваДоходыРасходы.СуммаКВыплатеСверхЛимита <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|		ПО ДанныеДокумента.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
	|ГДЕ
	|	ДанныеДокумента.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймаСотруднику), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаЛизингодателю))
	|	И ДанныеДокумента.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате))
	|	И ДанныеДокумента.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ТаблицаРасшифровкаПлатежа.Ссылка) > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДвиженияДенежныеСредстваДоходыРасходы.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваДоходыРасходы КАК ДвиженияДенежныеСредстваДоходыРасходы
	|ГДЕ
	|	ДвиженияДенежныеСредстваДоходыРасходы.Регистратор ССЫЛКА Документ.РасчетКурсовыхРазниц
	|	И ДвиженияДенежныеСредстваДоходыРасходы.ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.ДенежныеСредстваВпути)
	|	И ДвиженияДенежныеСредстваДоходыРасходы.ДенежныеСредства В (
	|		ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка),
	//++ НЕ УТ
	|		ЗНАЧЕНИЕ(Справочник.ДенежныеДокументы.ПустаяСсылка),
	//-- НЕ УТ
	|		ЗНАЧЕНИЕ(Справочник.ДоговорыКредитовИДепозитов.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Справочник.КассыККМ.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Справочник.ЭквайринговыеТерминалы.ПустаяСсылка),
	|		НЕОПРЕДЕЛЕНО
	|	)";
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
	
КонецПроцедуры

// Обработчик обновления УТ 11.4.1.
// Период записей документа ЗаявкаНаРасходованиеДенежныхСредств приводится к началу дня, вместо начала месяца.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ДвиженияДенежныеСредстваДоходыРасходы;
	ПолноеИмяРегистра  = МетаданныеРегистра.ПолноеИмя();
	ПолноеИмяЗаявки    = Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПолноеИмя();
	МенеджерДокумента  = Документы.ЗаявкаНаРасходованиеДенежныхСредств;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	Регистраторы = Новый Массив;
	Регистраторы.Добавить("Документ.РасчетКурсовыхРазниц");
	
	ОбработкаЗавершена = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(Регистраторы, ПолноеИмяРегистра, Параметры.Очередь);
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(Параметры.Очередь, ПолноеИмяЗаявки, ПолноеИмяРегистра);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
		|	Движения.Период КАК ПериодПредыдущееЗначение,
		|	Движения.Регистратор КАК Регистратор,
		|	Движения.НомерСтроки КАК НомерСтроки,
		|	Движения.Активность КАК Активность,
		|	Движения.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	Движения.Организация КАК Организация,
		|	Движения.Подразделение КАК Подразделение,
		|	Движения.НаправлениеДеятельностиДС КАК НаправлениеДеятельностиДС,
		|	Движения.ПодразделениеДоходовРасходов КАК ПодразделениеДоходовРасходов,
		|	Движения.ДенежныеСредства КАК ДенежныеСредства,
		|	Движения.ТипДенежныхСредств КАК ТипДенежныхСредств,
		|	Движения.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	Движения.СтатьяКалькуляции КАК СтатьяКалькуляции,
		|	Движения.ТипПлатежаФЗ275 КАК ТипПлатежаФЗ275,
		|	Движения.Валюта КАК Валюта,
		|	Движения.НаправлениеДеятельностиСтатьи КАК НаправлениеДеятельностиСтатьи,
		|	Движения.СтатьяДоходовРасходов КАК СтатьяДоходовРасходов,
		|	Движения.АналитикаДоходов КАК АналитикаДоходов,
		|	Движения.АналитикаРасходов КАК АналитикаРасходов,
		|	Движения.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
		|	Движения.Сумма КАК Сумма,
		|	Движения.СуммаРегл КАК СуммаРегл,
		|	Движения.СуммаВВалюте КАК СуммаВВалюте,
		|	Движения.СуммаКВыплатеВРамкахЛимита КАК СуммаКВыплатеВРамкахЛимита,
		|	Движения.СуммаКВыплатеСверхЛимита КАК СуммаКВыплатеСверхЛимита,
		|	Движения.СуммаНДС КАК СуммаНДС,
		|	Движения.СуммаНДСРегл КАК СуммаНДСРегл,
		|	Движения.СуммаНДСВВалютеПлатежа КАК СуммаНДСВВалютеПлатежа,
		|	Движения.ИсточникГФУДенежныхСредств КАК ИсточникГФУДенежныхСредств,
		|	Движения.ИсточникГФУДоходовРасходов КАК ИсточникГФУДоходовРасходов,
		|	Движения.СтавкаНДС КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА Движения.СуммаКВыплатеВРамкахЛимита = 0
		|				И Движения.СуммаКВыплатеСверхЛимита = 0
		|			ТОГДА Движения.Период
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ВЫРАЗИТЬ(Движения.Регистратор КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).ДатаПлатежа <> ДАТАВРЕМЯ(1, 1, 1)
		|					ТОГДА ВЫРАЗИТЬ(Движения.Регистратор КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).ДатаПлатежа
		|				КОГДА ВЫРАЗИТЬ(Движения.Регистратор КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).ЖелательнаяДатаПлатежа <> ДАТАВРЕМЯ(1, 1, 1)
		|					ТОГДА ВЫРАЗИТЬ(Движения.Регистратор КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).ЖелательнаяДатаПлатежа
		|				ИНАЧЕ НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Движения.Регистратор КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).Дата, ДЕНЬ)
		|			КОНЕЦ
		|	КОНЕЦ КАК Период
		|ИЗ
		|	РегистрНакопления.ДвиженияДенежныеСредстваДоходыРасходы КАК Движения
		|ГДЕ
		|	Движения.Регистратор = &Регистратор";
	
	Пока Выборка.Следующий() Цикл
		
		Регистратор = Выборка.Регистратор;
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			ЭлементБлокировки = Блокировка.Добавить("Документ.ЗаявкаНаРасходованиеДенежныхСредств");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			
			Блокировка.Заблокировать();
			
			Набор = РегистрыНакопления.ДвиженияДенежныеСредстваДоходыРасходы.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			
			ХозОперация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Регистратор, "ХозяйственнаяОперация");
			
			Если ХозОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику
			 ИЛИ ХозОперация = Перечисления.ХозяйственныеОперации.ОплатаЛизингодателю Тогда
				ДопСвойства = Новый Структура;
				ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Регистратор, ДопСвойства);
				МенеджерДокумента.ИнициализироватьДанныеДокумента(Регистратор, ДопСвойства, "ДвиженияДенежныеСредстваДоходыРасходы");
			
				Набор.Загрузить(ДопСвойства.ТаблицыДляДвижений.ТаблицаДвиженияДенежныеСредстваДоходыРасходы);
			Иначе
				Запрос.УстановитьПараметр("Регистратор", Регистратор);
				Набор.Загрузить(Запрос.Выполнить().Выгрузить());
			КонецЕсли;
			
			Если Набор.Количество() = 0 Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Регистратор, ДополнительныеПараметры);
			Иначе
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать движения документа ""%1"" по причине:
					|%2'"),
				Регистратор,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Регистратор.Метаданные(),
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = НЕ ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
