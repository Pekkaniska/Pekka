#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПланыПроизводства.Регистратор КАК Ссылка
		|ИЗ
		|	РегистрНакопления.ПланыПроизводства КАК ПланыПроизводства
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПланыВыпускаИзделий КАК ПланыВыпускаИзделий
		|		ПО ПланыПроизводства.Период = ПланыВыпускаИзделий.ДатаПроизводства
		|			И ПланыПроизводства.ПланПроизводства = ПланыВыпускаИзделий.ПланПроизводства
		|			И ПланыПроизводства.Спецификация = ПланыВыпускаИзделий.СпецификацияПродукции
		|			И ПланыПроизводства.Назначение = ПланыВыпускаИзделий.НазначениеПродукции
		|ГДЕ
		|	ПланыПроизводства.ТипПроизводственногоПроцесса <> ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
		|	И ПланыВыпускаИзделий.ПланПроизводства ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПланыВыпускаИзделий.Регистратор
		|ИЗ
		|	РегистрНакопления.ПланыВыпускаИзделий КАК ПланыВыпускаИзделий,
		|	Константа.КомплекснаяАвтоматизация КАК КомплекснаяАвтоматизация
		|ГДЕ
		|	КомплекснаяАвтоматизация.Значение И 
		|	ПланыВыпускаИзделий.ПодразделениеДиспетчер <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)");
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрНакопления.ПланыВыпускаИзделий";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
		Параметры,
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"),
		ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт

	ПолноеИмяРегистра = "РегистрНакопления.ПланыВыпускаИзделий";
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	
	ВТРегистраторы = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуРегистраторовРегистраДляОбработки(
		Параметры.Очередь,
		"Документ.ПланПроизводства",
		ПолноеИмяРегистра,
		МенеджерВременныхТаблиц);
		
	Если Не ВТРегистраторы.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если Не ВТРегистраторы.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	БлокировкиПланыПроизводства = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(
		Параметры.Очередь,
		"РегистрНакопления.ПланыПроизводства",
		МенеджерВременныхТаблиц);
		
	БлокировкиЭтапыПроизводства = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(
		Параметры.Очередь,
		"Справочник.ЭтапыПроизводства",
		МенеджерВременныхТаблиц);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТРегистраторы.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТБлокировкиПоЭтапам
		|ИЗ
		|	&ВТРегистраторы КАК ВТРегистраторы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПланыПроизводства КАК ПланыПроизводства
		|		ПО ВТРегистраторы.Регистратор = ПланыПроизводства.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
		|		ПО (ПланыПроизводства.Спецификация = ЭтапыПроизводства.Владелец)
		|			И (ЭтапыПроизводства.НомерСледующегоЭтапа = 0)
		|			И (НЕ ЭтапыПроизводства.ПометкаУдаления)
		|		ЛЕВОЕ СОЕДИНЕНИЕ &ВТБлокировкиЭтапыПроизводства КАК ВТБлокировкиСсылки
		|		ПО (ЭтапыПроизводства.Ссылка = ВТБлокировкиСсылки.Ссылка)
		|ГДЕ
		|	ВТБлокировкиСсылки.Ссылка ЕСТЬ НЕ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТРегистраторы.Регистратор КАК Регистратор
		|ИЗ
		|	&ВТРегистраторы КАК ВТРегистраторы
		|		ЛЕВОЕ СОЕДИНЕНИЕ &ВТБлокировкиПланыПроизводства КАК ВТБлокировкиРегистраторы
		|		ПО ВТРегистраторы.Регистратор = ВТБлокировкиРегистраторы.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБлокировкиПоЭтапам КАК ВТБлокировкиПоЭтапам
		|		ПО ВТРегистраторы.Регистратор = ВТБлокировкиПоЭтапам.Регистратор
		|ГДЕ
		|	ВТБлокировкиРегистраторы.Регистратор ЕСТЬ NULL
		|	И ВТБлокировкиПоЭтапам.Регистратор ЕСТЬ NULL";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ВТРегистраторы",
		ВТРегистраторы.ИмяВременнойТаблицы);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ВТБлокировкиПланыПроизводства",
		БлокировкиПланыПроизводства.ИмяВременнойТаблицы);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ВТБлокировкиЭтапыПроизводства",
		БлокировкиЭтапыПроизводства.ИмяВременнойТаблицы);
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Выборка = Запрос.Выполнить().Выбрать();
	
	МенеджерВременныхТаблиц.Закрыть();
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПланыПроизводства.Сценарий КАК Сценарий,
		|	ПланыПроизводства.Статус КАК Статус,
		|	ПланыПроизводства.Номенклатура КАК Номенклатура,
		|	ПланыПроизводства.Характеристика КАК Характеристика,
		|	ПланыПроизводства.Назначение КАК Назначение,
		|	ПланыПроизводства.Подразделение КАК ПодразделениеДиспетчер,
		|	ЭтапыПроизводства.Подразделение КАК ПодразделениеИсполнитель,
		|	ПланыПроизводства.ПланПроизводства КАК ПланПроизводства,
		|	ПланыПроизводства.Спецификация КАК Спецификация,
		|	ВЫБОР
		|		КОГДА ПланыПроизводства.ЭтоПолуфабрикат
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыВыпусковПлановПроизводства.Полуфабрикат)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыВыпусковПлановПроизводства.Основной)
		|	КОНЕЦ КАК ТипВыпуска,
		|	ПланыПроизводства.Период КАК ДатаПроизводства,
		|	ПланыПроизводства.Спецификация КАК СпецификацияПродукции,
		|	ПланыПроизводства.Назначение КАК НазначениеПродукции,
		|	ПланыПроизводства.Номенклатура КАК НоменклатураПродукции,
		|	ПланыПроизводства.Характеристика КАК ХарактеристикаПродукции,
		|	ПланыПроизводства.Количество КАК Количество,
		|	ПланыПроизводства.Период КАК Период
		|ИЗ
		|	РегистрНакопления.ПланыПроизводства КАК ПланыПроизводства
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПланыВыпускаИзделий КАК ПланыВыпускаИзделий
		|		ПО ПланыПроизводства.Период = ПланыВыпускаИзделий.ДатаПроизводства
		|			И ПланыПроизводства.ПланПроизводства = ПланыВыпускаИзделий.ПланПроизводства
		|			И ПланыПроизводства.Спецификация = ПланыВыпускаИзделий.СпецификацияПродукции
		|			И ПланыПроизводства.Назначение = ПланыВыпускаИзделий.НазначениеПродукции
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
		|		ПО ПланыПроизводства.Спецификация = ЭтапыПроизводства.Владелец
		|			И (ЭтапыПроизводства.НомерСледующегоЭтапа = 0)
		|			И (НЕ ЭтапыПроизводства.ПометкаУдаления)
		|ГДЕ
		|	ПланыПроизводства.Регистратор = &Регистратор
		|	И ПланыПроизводства.ТипПроизводственногоПроцесса <> ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
		|	И ПланыВыпускаИзделий.ПланПроизводства ЕСТЬ NULL";
	
	КомплекснаяАвтоматизация = ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация");
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПланыПроизводства.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			
			Блокировка.Заблокировать();
			
			Запрос.УстановитьПараметр("Регистратор", Выборка.Регистратор);
			
			Движения = Запрос.Выполнить().Выгрузить();
			НаборИзменен = Ложь;
			
			Если Движения.Количество() <> 0 Тогда
				
				НаборЗаписей = РегистрыНакопления.ПланыВыпускаИзделий.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
				НаборЗаписей.Загрузить(Движения);
				
				НаборИзменен = Истина;
				
			Иначе
				
				НаборЗаписей = РегистрыНакопления.ПланыВыпускаИзделий.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
				НаборЗаписей.Прочитать();
				
				Для каждого Запись Из НаборЗаписей Цикл
					
					Если КомплекснаяАвтоматизация
						И Запись.ПодразделениеДиспетчер <> Справочники.СтруктураПредприятия.ПустаяСсылка()Тогда
						
						Запись.ПодразделениеДиспетчер = Справочники.СтруктураПредприятия.ПустаяСсылка();
						
						НаборИзменен = Истина;
						
					КонецЕсли;
					
				КонецЦикла;
					
			КонецЕсли;
			
			Если НаборИзменен Тогда
				
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
				
			Иначе
				
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Регистратор, ДополнительныеПараметры);
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Регистратор);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли	