#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)
	|	И ЗначениеРазрешено(СтатьяБюджетов)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

#Область ОбработчикиОбновления_2_4_2

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрНакопления.ФактическиеДанныеБюджетирования";
	
	ПустыеЗначенияДляОбработки = БюджетированиеВызовСервера.ЗаменяемыеПустыеЗначенияАналитики();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
		|	Таблица.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.ФактическиеДанныеБюджетирования КАК Таблица
		|ГДЕ
		|	(Таблица.Аналитика1 В (&ПустыеЗначенияДляОбработки)
		|			ИЛИ Таблица.Аналитика2 В (&ПустыеЗначенияДляОбработки)
		|			ИЛИ Таблица.Аналитика3 В (&ПустыеЗначенияДляОбработки)
		|			ИЛИ Таблица.Аналитика4 В (&ПустыеЗначенияДляОбработки)
		|			ИЛИ Таблица.Аналитика5 В (&ПустыеЗначенияДляОбработки)
		|			ИЛИ Таблица.Аналитика6 В (&ПустыеЗначенияДляОбработки))";
	
	Запрос.УстановитьПараметр("ПустыеЗначенияДляОбработки", ПустыеЗначенияДляОбработки);
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ФактическиеДанныеБюджетирования;
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	
	ПустыеЗначенияДляОбработки = БюджетированиеВызовСервера.ЗаменяемыеПустыеЗначенияАналитики();
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	ЗначениеЗамены = БюджетированиеКлиентСервер.ПустоеЗначениеАналитики();
	
	РеквизитыПоиска = Новый Массив;
	Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
		РеквизитыПоиска.Добавить("Аналитика" + Сч);
	КонецЦикла;
	
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	ТипыДокументовКОбработке = ТипыДокументовКОбработке();
	
	Для Каждого ПолноеИмяДокумента Из ТипыДокументовКОбработке Цикл
		
		Выборка = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(Параметры.Очередь, ПолноеИмяДокумента, ПолноеИмяРегистра);
		
		Пока Выборка.Следующий() Цикл
			
			Регистратор = Выборка.Регистратор;
			
			НачатьТранзакцию();
			
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
				ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				
				Блокировка.Заблокировать();
				
				Набор = РегистрыНакопления.ОборотыБюджетов.СоздатьНаборЗаписей();
				Набор.Отбор.Регистратор.Установить(Регистратор);
				Набор.Прочитать();
				
				Если Набор.Количество() = 0 Тогда
					
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Регистратор, ДополнительныеПараметры);
					
				Иначе
					
					ОбъектИзменен = Ложь;
					
					Для каждого Запись Из Набор Цикл
						
						БюджетированиеВызовСервера.ВыполнитьЗаменыЗначенийВОбъекте(Запись,
						                                                           РеквизитыПоиска,
						                                                           ПустыеЗначенияДляОбработки,
						                                                           ЗначениеЗамены,
						                                                           ОбъектИзменен);
						
					КонецЦикла;
					
					Если ОбъектИзменен Тогда
						ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
					Иначе
						ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Регистратор, ДополнительныеПараметры);
					КонецЕсли;
					
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Регистратор% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", Регистратор);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Регистратор.Метаданные(),
				ТекстСообщения);
				
			КонецПопытки;
			
		КонецЦикла;
		
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

Функция ТипыДокументовКОбработке()
	
	МассивТипов = Новый Массив;
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ФактическиеДанныеБюджетирования;
	ТипыРегистраторов = МетаданныеРегистра.СтандартныеРеквизиты.Регистратор.Тип.Типы();
	
	Для каждого ТипРегистратора Из ТипыРегистраторов Цикл
		
		МетаданныеРегистратора = Метаданные.НайтиПоТипу(ТипРегистратора);
		МассивТипов.Добавить(МетаданныеРегистратора.ПолноеИмя());
		
	КонецЦикла;
	
	Возврат МассивТипов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли