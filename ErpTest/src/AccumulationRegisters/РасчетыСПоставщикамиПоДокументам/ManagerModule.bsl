#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

//++ НЕ УТ
#Область ОписаниеИсточника
//++ НЕ УТКА

// Определяет источники уточнения счета, доступные в регистре и их свойства.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.ИсточникиУточненияСчета().
//
// Параметры:
//  СвойстваИсточника - Строка - "ИмяПоля" - имя атрибута регистра накопления, из которого планируется получать источник
//                               уточнения счета.
//
// Возвращаемое значение:
//  Соответствие - Ключ - название источника уточнения счета. 
//                 Значение - структура свойств источника уточнения счета.
//
Функция ИсточникиУточненияСчета(СвойстваИсточника) Экспорт
	
	ИсточникиУточненияСчета = Новый Соответствие;
	
	ИсточникиУточненияСчета.Вставить(Перечисления.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаРасчетов,
		Новый Структура(СвойстваИсточника, "ГФУРасчетов"));
		
	Возврат ИсточникиУточненияСчета;
	
КонецФункции

// Определяет источники подразделений регистра и их свойства.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.ИсточникиПодразделений().
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя источника. 
//                 Значение - структура свойств источника. 
//
Функция ИсточникиПодразделений() Экспорт

	ИсточникиПодразделений = Новый Соответствие;
	
	ИсточникиПодразделений.Вставить(Перечисления.ИсточникиПодразделенийАналитическихРегистров.Заказ, "Подразделение");

	Возврат ИсточникиПодразделений;

КонецФункции

// Определяет источники направлений регистра и их свойства.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.ИсточникиНаправлений().
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя источника. 
//                 Значение - структура свойств источника. 
//
Функция ИсточникиНаправлений() Экспорт

	Результат = Новый Соответствие;
	
	ИсточникиНаправлений = Перечисления.ИсточникиНаправленийДеятельностиАналитическихРегистров;
	Результат.Вставить(ИсточникиНаправлений.НаправлениеДеятельностиКонтрагента, "НаправлениеДеятельностиКонтрагента");

	Возврат Результат;

КонецФункции

// Определяет источники заполнения субконто.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.ИсточникиСубконто().
//
// Возвращаемое значение:
//  Массив - массив атрибутов регистра.
//
Функция ИсточникиСубконто() Экспорт

	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить("Партнер");
	МассивСубконто.Добавить("Контрагент");
	МассивСубконто.Добавить("Заказ");
	МассивСубконто.Добавить("Договор");

	Возврат Новый Структура("СубконтоДт, СубконтоКт", МассивСубконто, МассивСубконто);

КонецФункции

// Определяет показатели в валюте регистра.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.ПоказателиВВалюте().
//
// Параметры:
//  СвойстваПоказателей - Строка - "ИсточникВалюты" - источник валюты для показателя регистра.
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя показателя.
//                 Значение - структура свойств показателя.
//
Функция ПоказателиВВалюте(СвойстваПоказателей) Экспорт

	ПоказателиВВалюте = Новый Соответствие;
	
	ПоказателиВВалюте.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаВВалютеВзаиморасчетов, Новый Структура(СвойстваПоказателей, "Валюта"));
	
	Возврат ПоказателиВВалюте;

КонецФункции
//-- НЕ УТКА

// Определяет показатели регистра.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.Показатели().
//
// Параметры:
//  Свойства - Структура - содержащая ключи СвойстваПоказателей, СвойстваРесурсов.
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя показателя.
//                 Значение - структура свойств показателя.
//
Функция Показатели(Свойства) Экспорт

	Показатели = Новый Соответствие;
	
	СвойстваПоказателей = Свойства.СвойстваПоказателей;
	СвойстваРесурсов = Свойства.СвойстваРесурсов;
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "ПредоплатаУпр", "ВалютаУпр"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "ПредоплатаРегл", "ВалютаРегл"));
    МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "Предоплата", "Валюта"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.Сумма, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	Возврат Показатели;
	
КонецФункции

#КонецОбласти
//-- НЕ УТ

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК Т
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Т1 
	|	ПО Т.АналитикаУчетаПоПартнерам = Т1.КлючАналитики
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Т1.Организация)
	|	И ЗначениеРазрешено(Т1.Партнер)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Регистрирует данные для обработчика обновления
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ИмяРегистра       = "РасчетыСПоставщикамиПоДокументам";
	ПолноеИмяРегистра = "РегистрНакопления." + ИмяРегистра;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	Ключи.Ссылка КАК АналитикаУчетаПоПартнерам
	|ПОМЕСТИТЬ ВтАналитики
	|ИЗ
	|	Справочник.КлючиАналитикиУчетаПоПартнерам КАК Ключи
	|ГДЕ
	|	Ключи.Договор.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПоклажедателем)
	|;
	|
	|ВЫБРАТЬ
	|	РасчетыСПоставщиками.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РасчетыСПоставщиками
	|ГДЕ
	|	Регистратор ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|	И ВЫРАЗИТЬ(Регистратор КАК Документ.ПриобретениеТоваровУслуг).ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|	И ЗаказПоставщику = Неопределено
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РасчетыСПоставщиками.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РасчетыСПоставщиками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтАналитики КАК Аналитики
	|			ПО Аналитики.АналитикаУчетаПоПартнерам = РасчетыСПоставщиками.АналитикаУчетаПоПартнерам
	|ГДЕ
	|	РасчетыСПоставщиками.РасчетныйДокумент = Неопределено
	|");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, 
																Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор"),
																ПолноеИмяРегистра);
	
КонецПроцедуры

// Обработчик обновления УТ 11.4.6
// Заполняет реквизит РасчетныйДокумент.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.РасчетыСПоставщикамиПоДокументам";
	МетаданныеРегистра = Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоДокументам;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуРегистраторовРегистраДляОбработки(Параметры.Очередь, Неопределено, ПолноеИмяРегистра, МенеджерВременныхТаблиц);
	
	Если Не Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ 
	|	Ключи.Ссылка КАК АналитикаУчетаПоПартнерам
	|ПОМЕСТИТЬ ВтАналитики
	|ИЗ
	|	Справочник.КлючиАналитикиУчетаПоПартнерам КАК Ключи
	|ГДЕ
	|	Ключи.Договор.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПоклажедателем)
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.ЗаказПоставщику КАК ЗаказПоставщику,
	|	Расчеты.Валюта КАК Валюта,
	|	Расчеты.УдалитьДатаПлатежа КАК УдалитьДатаПлатежа
	|ПОМЕСТИТЬ ВтИзмерения
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыДляОбработки КАК ДокументыДляОбработки
	|			ПО ДокументыДляОбработки.Регистратор = Расчеты.Регистратор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтАналитики КАК Аналитики
	|			ПО Расчеты.АналитикаУчетаПоПартнерам = Аналитики.АналитикаУчетаПоПартнерам
	|;
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВЫБОР 
	|				КОГДА ТИПЗНАЧЕНИЯ(Расчеты.ЗаказПоставщику) В (&ТипВыкуп)
	|					ТОГДА Расчеты.ЗаказПоставщику 
	|				ИНАЧЕ Расчеты.Регистратор
	|			КОНЕЦ)                        КАК РасчетныйДокумент,
	|	ВтИзмерения.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ВтИзмерения.ЗаказПоставщику           КАК ЗаказПоставщику,
	|	ВтИзмерения.Валюта                    КАК Валюта,
	|	ВтИзмерения.УдалитьДатаПлатежа        КАК УдалитьДатаПлатежа
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтИзмерения КАК ВтИзмерения
	|			ПО ВтИзмерения.АналитикаУчетаПоПартнерам = ВтИзмерения.АналитикаУчетаПоПартнерам
	|			И ВтИзмерения.ЗаказПоставщику = ВтИзмерения.ЗаказПоставщику
	|			И ВтИзмерения.Валюта = ВтИзмерения.Валюта
	|			И ВтИзмерения.УдалитьДатаПлатежа = ВтИзмерения.УдалитьДатаПлатежа
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(Расчеты.Регистратор) В (&ТипВыкуп)
	|СГРУППИРОВАТЬ ПО
	|	ВтИзмерения.АналитикаУчетаПоПартнерам,
	|	ВтИзмерения.ЗаказПоставщику,
	|	ВтИзмерения.Валюта,
	|	ВтИзмерения.УдалитьДатаПлатежа
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегистраторыДляОбработки.Регистратор КАК Регистратор
	|ИЗ
	|	ВТДокументыДляОбработки КАК РегистраторыДляОбработки
	|";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ВТДокументыДляОбработки", Результат.ИмяВременнойТаблицы);
	
	СписокТипов = Новый СписокЗначений;
	//++ НЕ УТ
	СписокТипов.Добавить(Тип("ДокументСсылка.ВыкупПринятыхНаХранениеТоваров"));
	//-- НЕ УТ
	Запрос.УстановитьПараметр("ТипВыкуп", СписокТипов);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ТаблицаРасчетныхДокументов = Результаты[2].Выгрузить();
	ТаблицаРасчетныхДокументов.Индексы.Добавить("АналитикаУчетаПоПартнерам");
	ТаблицаРасчетныхДокументов.Индексы.Добавить("ЗаказПоставщику");
	ТаблицаРасчетныхДокументов.Индексы.Добавить("Валюта");
	ТаблицаРасчетныхДокументов.Индексы.Добавить("УдалитьДатаПлатежа");
	
	ВыборкаРегистраторов = Результаты[3].Выбрать();
	
	Пока ВыборкаРегистраторов.Следующий() Цикл
		
		Регистратор = ВыборкаРегистраторов.Регистратор;
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			Набор = РегистрыНакопления.РасчетыСПоставщикамиПоДокументам.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			Набор.Прочитать();
			
			СтруктураПоиска = Новый Структура("АналитикаУчетаПоПартнерам, ЗаказПоставщику, Валюта, УдалитьДатаПлатежа");
			
			БылиИзменения = Ложь;
			
			Для Каждого Запись Из Набор Цикл
				Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") И НЕ ЗначениеЗаполнено(Запись.ЗаказПоставщику) Тогда
					Запись.ЗаказПоставщику = Запись.Регистратор;
					БылиИзменения = Истина;
				ИначеЕсли Запись.РасчетныйДокумент = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, Запись);
					СтрокиРасчетныхДокументов = ТаблицаРасчетныхДокументов.НайтиСтроки(СтруктураПоиска);
					Если СтрокиРасчетныхДокументов.Количество() = 1 Тогда
						Запись.РасчетныйДокумент = СтрокиРасчетныхДокументов[0].РасчетныйДокумент;
						БылиИзменения = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если БылиИзменения Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Регистратор, ДополнительныеПараметры);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Регистратор% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", Регистратор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Регистратор.Метаданные(),
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли