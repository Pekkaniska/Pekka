#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает список полуфабрикатов/продукции, потреблеющих заданный полуфабрикат.
//
// Параметры:
//  Полуфабрикат - Структура - параметры полуфабриката.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - данные о потребителях полуфабриката.
//
Функция ПотребителиПолуфабриката(Полуфабрикат) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПланыПотребленияМатериалов.Сценарий КАК Сценарий,
		|	ПланыПотребленияМатериалов.Статус КАК Статус,
		|	ПланыПотребленияМатериалов.НоменклатураПродукции КАК Номенклатура,
		|	ПланыПотребленияМатериалов.ХарактеристикаПродукции КАК Характеристика,
		|	ПланыПотребленияМатериалов.ПодразделениеДиспетчер КАК Подразделение,
		|	ПланыПотребленияМатериалов.ПланПроизводства КАК ПланПроизводства,
		|	ПланыПотребленияМатериалов.Спецификация КАК Спецификация,
		|	ПланыПотребленияМатериалов.НазначениеПродукции КАК Назначение,
		|	ПланыПотребленияМатериалов.ДатаПроизводства КАК Период
		|ИЗ
		|	РегистрНакопления.ПланыПотребленияМатериалов КАК ПланыПотребленияМатериалов
		|ГДЕ
		|	ПланыПотребленияМатериалов.Сценарий = &Сценарий
		|	И ПланыПотребленияМатериалов.Статус = &Статус
		|	И ПланыПотребленияМатериалов.Номенклатура = &Номенклатура
		|	И ПланыПотребленияМатериалов.Характеристика = &Характеристика
		|	И ПланыПотребленияМатериалов.Назначение = &Назначение
		|	И ПланыПотребленияМатериалов.ПодразделениеДиспетчер = &Подразделение
		|	И ПланыПотребленияМатериалов.ПланПроизводства = &ПланПроизводства
		|	И ПланыПотребленияМатериалов.Период = &ДатаВыпускаПолуфабриката
		|	И ПланыПотребленияМатериалов.ЭтоПолуфабрикат = ИСТИНА");
	
	Запрос.УстановитьПараметр("Сценарий", Полуфабрикат.Сценарий);
	Запрос.УстановитьПараметр("Статус", Полуфабрикат.Статус);
	Запрос.УстановитьПараметр("Номенклатура", Полуфабрикат.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Полуфабрикат.Характеристика);
	Запрос.УстановитьПараметр("Назначение", Полуфабрикат.Назначение);
	Запрос.УстановитьПараметр("Подразделение", Полуфабрикат.Подразделение);
	Запрос.УстановитьПараметр("ПланПроизводства", Полуфабрикат.ПланПроизводства);
	Запрос.УстановитьПараметр("ДатаВыпускаПолуфабриката", Полуфабрикат.ДатаВыпускаПолуфабриката);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ПланыПотребленияМатериалов";
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПланыПотребленияМатериалов.Регистратор КАК Ссылка
		|ИЗ
		|	РегистрНакопления.ПланыПотребленияМатериалов КАК ПланыПотребленияМатериалов
		|ГДЕ
		|	ПланыПотребленияМатериалов.Регистратор ССЫЛКА Документ.ПланПроизводства
		|	И ПланыПотребленияМатериалов.ЭтоПолуфабрикат = ЛОЖЬ
		|	И ПланыПотребленияМатериалов.УдалитьСпецификацияПолуфабриката <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПланыПотребленияМатериалов.Регистратор
		|ИЗ
		|	РегистрНакопления.ПланыПотребленияМатериалов КАК ПланыПотребленияМатериалов,
		|	Константа.КомплекснаяАвтоматизация КАК КомплекснаяАвтоматизация
		|ГДЕ
		|	КомплекснаяАвтоматизация.Значение И 
		|	ПланыПотребленияМатериалов.ПодразделениеДиспетчер <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)");
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры,
		Регистраторы,
		ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ПланыПотребленияМатериалов";
	ПолноеИмяДокумента = "Документ.ПланПроизводства";
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(
		Параметры.Очередь,
		ПолноеИмяДокумента,
		ПолноеИмяРегистра);
	
	КомплекснаяАвтоматизация = ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация");
	
	Пока Выборка.Следующий() Цикл
		
		Регистратор = Выборка.Регистратор;
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыНакопления.ПланыПотребленияМатериалов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
			НаборЗаписей.Прочитать();
			
			НаборИзменен = Ложь;
			
			Для каждого Запись Из НаборЗаписей Цикл
				
				Если НЕ Запись.УдалитьСпецификацияПолуфабриката.Пустая()
					И НЕ Запись.ЭтоПолуфабрикат Тогда
					
					Запись.ЭтоПолуфабрикат = Истина;
					Запись.УдалитьСпецификацияПолуфабриката = Неопределено;
					
					НаборИзменен = Истина;
					
				КонецЕсли;
				
				Если КомплекснаяАвтоматизация
					И Запись.ПодразделениеДиспетчер <> Справочники.СтруктураПредприятия.ПустаяСсылка()Тогда
					
					Запись.ПодразделениеДиспетчер = Справочники.СтруктураПредприятия.ПустаяСсылка();
					
					НаборИзменен = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НаборИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось перезаписать движения в регистр %ИмяРегистра% по документу %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Регистратор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРегистра%", ПолноеИмяРегистра);
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.НайтиПоПолномуИмени(ПолноеИмяРегистра), 
				Регистратор,
				ТекстСообщения);
			
		КонецПопытки;

	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(
		Параметры.Очередь,
		ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли