#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

//++ НЕ УТ
#Область ПрограммныйИнтерфейс

//++ НЕ УТКА

// Определяет источники уточнения счета, доступные в регистре и их свойства.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.ИсточникиУточненияСчета().
//
// Параметры:
//  СвойстваИсточника - Строка - "ИмяПоля" - имя атрибута регистра накопления, из которого планируется получать источник
//                               уточнения счета.
//
// Возвращаемое значение:
//  Соответствие - Ключ - название источника уточнения счета. 
//                 Значение - структура свойств источника уточнения счета.
//
Функция ИсточникиУточненияСчета(СвойстваИсточника) Экспорт
	
	ИсточникиУточненияСчета = Новый Соответствие;
	
	ИсточникиУточненияСчета.Вставить(Перечисления.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаНоменклатурыКредита,
		Новый Структура(СвойстваИсточника, "ГФУНоменклатуры"));
	
	ИсточникиУточненияСчета.Вставить(Перечисления.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаНоменклатурыДебета,
		Новый Структура(СвойстваИсточника, "КорГФУНоменклатуры"));
	
	Возврат ИсточникиУточненияСчета;
	
КонецФункции

// Определяет источники подразделений регистра и их свойства.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.ИсточникиПодразделений().
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя источника. 
//                 Значение - структура свойств источника. 
//
Функция ИсточникиПодразделений() Экспорт

	ИсточникиПодразделений = Новый Соответствие;
	
	ИсточникиПодразделений.Вставить(Перечисления.ИсточникиПодразделенийАналитическихРегистров.ХозяйственнаяОперация, "Подразделение");
	ИсточникиПодразделений.Вставить(Перечисления.ИсточникиПодразделенийАналитическихРегистров.АналитикаУчетаНоменклатуры, "СкладПодразделение");
	ИсточникиПодразделений.Вставить(Перечисления.ИсточникиПодразделенийАналитическихРегистров.АналитикаУчетаНоменклатуры, "КорСкладПодразделение");
	
	Возврат ИсточникиПодразделений;
	
КонецФункции

// Определяет источники направлений регистра и их свойства.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.ИсточникиНаправлений().
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя источника. 
//                 Значение - структура свойств источника. 
//
Функция ИсточникиНаправлений() Экспорт

	Результат = Новый Соответствие;
	
	ИсточникиНаправлений = Перечисления.ИсточникиНаправленийДеятельностиАналитическихРегистров;
	Результат.Вставить(ИсточникиНаправлений.НаправлениеДеятельности, "НаправлениеДеятельности");
	Результат.Вставить(ИсточникиНаправлений.КорНаправлениеДеятельности, "КорНаправлениеДеятельности");

	Возврат Результат;

КонецФункции

// Определяет источники заполнения субконто.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.ИсточникиСубконто().
//
// Возвращаемое значение:
//  Массив - массив атрибутов регистра.
//
Функция ИсточникиСубконто() Экспорт

	МассивСубконтоКт = Новый Массив;
	МассивСубконтоКт.Добавить("Номенклатура");
	МассивСубконтоКт.Добавить("Характеристика");
	МассивСубконтоКт.Добавить("Склад");
	МассивСубконтоКт.Добавить("ТипЗапасов");
	МассивСубконтоКт.Добавить("ВидЗапасов");
	МассивСубконтоКт.Добавить("ГФУНоменклатуры");
	МассивСубконтоКт.Добавить("ТипНоменклатуры");
	МассивСубконтоКт.Добавить("КорОрганизация");
	МассивСубконтоКт.Добавить("Поставщик");
	
	МассивСубконтоДт = Новый Массив;
	МассивСубконтоДт.Добавить("КорНоменклатура");
	МассивСубконтоДт.Добавить("КорХарактеристика");
	МассивСубконтоДт.Добавить("КорСклад");
	МассивСубконтоДт.Добавить("КорТипЗапасов");
	МассивСубконтоДт.Добавить("КорВидЗапасов");
	МассивСубконтоДт.Добавить("КорГФУНоменклатуры");
	МассивСубконтоДт.Добавить("КорТипНоменклатуры");
	МассивСубконтоДт.Добавить("КорОрганизация");
	МассивСубконтоДт.Добавить("КорПоставщик");

	Возврат Новый Структура("СубконтоДт, СубконтоКт", МассивСубконтоДт, МассивСубконтоКт);
	
КонецФункции

// Определяет показатели в валюте регистра.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.ПоказателиВВалюте().
//
// Параметры:
//  СвойстваПоказателей - Строка - "ИсточникВалюты" - источник валюты для показателя регистра.
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя показателя.
//                 Значение - структура свойств показателя.
//
Функция ПоказателиВВалюте(СвойстваПоказателей) Экспорт

	ПоказателиВВалюте = Новый Соответствие;
	
	// НЕ ТРЕБУЕТСЯ
	
	Возврат ПоказателиВВалюте;

КонецФункции

// Определяет документы отражаемые в международном учете.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.ДокументыКОтражениюВМФУ().
//
// Возвращаемое значение:
//  Массив - массив регистраторов регистра отражаемых в международном учете.
//
Функция ДокументыКОтражениюВМеждународномУчете() Экспорт

	ДокументыКОтражению = Новый Массив;
	ДокументыКОтражению.Добавить("ВнутреннееПотреблениеТоваров");
	ДокументыКОтражению.Добавить("ВозвратМатериаловИзПроизводства");
	ДокументыКОтражению.Добавить("ВозвратСырьяОтПереработчика");
	ДокументыКОтражению.Добавить("ВозвратТоваровМеждуОрганизациями");
	ДокументыКОтражению.Добавить("ВозвратТоваровОтКлиента");
	ДокументыКОтражению.Добавить("ВыпускПродукции");
	ДокументыКОтражению.Добавить("ДвижениеПродукцииИМатериалов");
	ДокументыКОтражению.Добавить("КорректировкаНазначенияТоваров");
	ДокументыКОтражению.Добавить("ПередачаМатериаловВПроизводство");
	ДокументыКОтражению.Добавить("ПередачаТоваровМеждуОрганизациями");
	ДокументыКОтражению.Добавить("ПередачаСырьяПереработчику");
	ДокументыКОтражению.Добавить("ПеремещениеТоваров");
	ДокументыКОтражению.Добавить("ПересортицаТоваров");
	ДокументыКОтражению.Добавить("ПорчаТоваров");
	ДокументыКОтражению.Добавить("ПоступлениеТоваров");
	ДокументыКОтражению.Добавить("ПрочееОприходованиеТоваров");
	ДокументыКОтражению.Добавить("РеализацияТоваровУслуг");
	ДокументыКОтражению.Добавить("СборкаТоваров");
	ДокументыКОтражению.Добавить("ЭтапПроизводства2_2");
	
	Возврат ДокументыКОтражению;

КонецФункции

//-- НЕ УТКА

// Определяет показатели регистра.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.Показатели().
//
// Параметры:
//  Свойства - Структура - содержащая ключи СвойстваПоказателей, СвойстваРесурсов.
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя показателя.
//                 Значение - структура свойств показателя.
//
Функция Показатели(Свойства) Экспорт

	Показатели = Новый Соответствие;
	
	СвойстваПоказателей = Свойства.СвойстваПоказателей;
	СвойстваРесурсов = Свойства.СвойстваРесурсов;
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СтоимостьУпр", "ВалютаУпр"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СтоимостьРегл", "ВалютаРегл"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.Сумма, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СтоимостьБезНДС", "ВалютаУпр"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаБезНДС, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СтоимостьРегл", "ВалютаРегл"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаРегл, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	Возврат Показатели;
	
КонецФункции

#КонецОбласти
//-- НЕ УТ

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)
	|	И(( ВЫБОР КОГДА ТипЗначения(Склад) = Тип(Справочник.Склады) ТОГДА ЗначениеРазрешено(Склад)
	|	КОГДА ТипЗначения(Склад) = Тип(Справочник.Партнеры) ТОГДА ЗначениеРазрешено(Склад)
	|	КОГДА ТипЗначения(Склад) = Тип(Справочник.СтруктураПредприятия) ТОГДА ЗначениеРазрешено(Склад)
	|	ИНАЧЕ Склад <> Неопределено КОНЕЦ)ИЛИ( ВЫБОР КОГДА ТипЗначения(КорСклад) = Тип(Справочник.Склады) ТОГДА ЗначениеРазрешено(КорСклад)
	|	КОГДА ТипЗначения(КорСклад) = Тип(Справочник.Партнеры) ТОГДА ЗначениеРазрешено(КорСклад)
	|	КОГДА ТипЗначения(КорСклад) = Тип(Справочник.СтруктураПредприятия) ТОГДА ЗначениеРазрешено(КорСклад)
	|	ИНАЧЕ КорСклад <> Неопределено КОНЕЦ)) ";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Функция ПолноеИмяРегистра()
	Возврат "РегистрНакопления.ДвиженияНоменклатураНоменклатура";
КонецФункции

// Обработчик обновления УП 2.4.1.
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	МассивТекстовЗапросов = Новый Массив;
	
	//++ НЕ УТ
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПередачаМатериалов.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПередачаМатериаловВПроизводство КАК ПередачаМатериалов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДвиженияНоменклатураНоменклатура КАК ДанныеРегистра
	|		ПО (ДанныеРегистра.Регистратор = ПередачаМатериалов.Ссылка)
	|ГДЕ
	|	&ИспользуютсяВидыЗапасов
	|	И ДанныеРегистра.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|	И ДанныеРегистра.КорВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДвижениеПродукции.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ДвижениеПродукцииИМатериалов КАК ДвижениеПродукции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДвиженияНоменклатураНоменклатура КАК ДанныеРегистра
	|		ПО (ДанныеРегистра.Регистратор = ДвижениеПродукции.Ссылка)
	|ГДЕ
	|	&ИспользуютсяВидыЗапасов
	|	И ДанныеРегистра.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|	И ДанныеРегистра.КорВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДвижениеПродукции.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ДвижениеПродукцииИМатериалов КАК ДвижениеПродукции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДвиженияНоменклатураНоменклатура КАК ДанныеРегистра
	|		ПО (ДанныеРегистра.Регистратор = ДвижениеПродукции.Ссылка)
	|ГДЕ
	|	ДанныеРегистра.ДокументДвижения = НЕОПРЕДЕЛЕНО";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	//-- НЕ УТ
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДвиженияНоменклатураНоменклатура.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ДвиженияНоменклатураНоменклатура КАК ДвиженияНоменклатураНоменклатура
	|ГДЕ
	|	&ИспользуютсяВидыЗапасов
	|	И (ДвиженияНоменклатураНоменклатура.КорВидЗапасов.РеализацияЗапасовДругойОрганизации
	|			ИЛИ ДвиженияНоменклатураНоменклатура.КорВидЗапасов = ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка))
	|	И ДвиженияНоменклатураНоменклатура.Регистратор ССЫЛКА Документ.ПеремещениеТоваров";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	
	Запрос.Текст = СтрСоединить(МассивТекстовЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении(Истина));
	Запрос.УстановитьПараметр("ИспользуютсяВидыЗапасов", Константы.УчитыватьСебестоимостьТоваровПоВидамЗапасов.Получить());
	
	ДополнительныеПараметрыОтметки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметрыОтметки.ЭтоДвижения = Истина;
	ДополнительныеПараметрыОтметки.ПолноеИмяРегистра = ПолноеИмяРегистра();
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"), ДополнительныеПараметрыОтметки);
	
КонецПроцедуры

// Обработчик обновления УП 2.4.1:
// чищаются виды запасов для товаров выкупленных у комитента.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = ПолноеИмяРегистра();
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ДвиженияНоменклатураНоменклатура;
	
	//++ НЕ УТ
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Движения.Регистратор КАК Регистратор,
	|	Движения.Период КАК Период,
	|	Движения.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Движения.Организация КАК Организация,
	|	Движения.Подразделение КАК Подразделение,
	|	Движения.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Движения.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Движения.Склад КАК Склад,
	|	Движения.ТипЗапасов КАК ТипЗапасов,
	|	Движения.ВидЗапасов КАК ВидЗапасов,
	|	Движения.КорНаправлениеДеятельности КАК КорНаправлениеДеятельности,
	|	Движения.КорАналитикаУчетаНоменклатуры КАК КорАналитикаУчетаНоменклатуры,
	|	Движения.КорСклад КАК КорСклад,
	|	Движения.КорТипЗапасов КАК КорТипЗапасов,
	|	ВЫБОР
	|		КОГДА Движения.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|				И Движения.КорВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|				И &ИспользуютсяВидыЗапасов
	|				И ТИПЗНАЧЕНИЯ(Движения.Регистратор) В (ЗНАЧЕНИЕ(Документ.ДвижениеПродукцииИМатериалов), ЗНАЧЕНИЕ(Документ.ПередачаМатериаловВПроизводство))
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Движения.КорВидЗапасов
	|	КОНЕЦ КАК КорВидЗапасов,
	|
	|	Движения.Количество КАК Количество,
	|	Движения.КорКоличество КАК КорКоличество,
	|
	|	Движения.Стоимость КАК Стоимость,
	|	Движения.СтоимостьБезНДС КАК СтоимостьБезНДС,
	|	Движения.СтоимостьУпр КАК СтоимостьУпр,
	|	Движения.СтоимостьРегл КАК СтоимостьРегл,
	|	Движения.СтоимостьЗабалансовая КАК СтоимостьЗабалансовая,
	|	Движения.СтоимостьЗабалансоваяРегл КАК СтоимостьЗабалансоваяРегл,
	|	Движения.ДопРасходы КАК ДопРасходы,
	|	Движения.ДопРасходыБезНДС КАК ДопРасходыБезНДС,
	|	Движения.ДопРасходыУпр КАК ДопРасходыУпр,
	|	Движения.ДопРасходыРегл КАК ДопРасходыРегл,
	|	Движения.ПостатейныеПостоянныеСНДС КАК ПостатейныеПостоянныеСНДС,
	|	Движения.ПостатейныеПостоянныеБезНДС КАК ПостатейныеПостоянныеБезНДС,
	|	Движения.ПостатейныеПостоянныеУпр КАК ПостатейныеПостоянныеУпр,
	|	Движения.ПостатейныеПостоянныеРегл КАК ПостатейныеПостоянныеРегл,
	|	Движения.Трудозатраты КАК Трудозатраты,
	|	Движения.ТрудозатратыУпр КАК ТрудозатратыУпр,
	|	Движения.ТрудозатратыРегл КАК ТрудозатратыРегл,
	|	Движения.ПостатейныеПеременныеСНДС КАК ПостатейныеПеременныеСНДС,
	|	Движения.ПостатейныеПеременныеБезНДС КАК ПостатейныеПеременныеБезНДС,
	|	Движения.ПостатейныеПеременныеУпр КАК ПостатейныеПеременныеУпр,
	|	Движения.ПостатейныеПеременныеРегл КАК ПостатейныеПеременныеРегл,
	|	Движения.ПостояннаяРазница КАК ПостояннаяРазница,
	|	Движения.ВременнаяРазница КАК ВременнаяРазница,
	|
	|	Движения.ИсточникГФУНоменклатуры КАК ИсточникГФУНоменклатуры,
	|	Движения.КорИсточникГФУНоменклатуры КАК КорИсточникГФУНоменклатуры,
	|	Движения.ДокументДвижения КАК ДокументДвижения,
	|	Движения.КорОрганизация КАК КорОрганизация,
	|	Движения.РасчетСебестоимости КАК РасчетСебестоимости
	|ИЗ
	|	РегистрНакопления.ДвиженияНоменклатураНоменклатура КАК Движения
	|ГДЕ
	|	Движения.Регистратор = &Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Движения.НомерСтроки";
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(Параметры.Очередь, Неопределено, ПолноеИмяРегистра);
	Пока Выборка.Следующий() Цикл
		
		Регистратор = Выборка.Регистратор;
		
		Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

			Блокировка.Заблокировать();
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Регистратор", Регистратор);
			Запрос.УстановитьПараметр("ИспользуютсяВидыЗапасов", Константы.УчитыватьСебестоимостьТоваровПоВидамЗапасов.Получить());
			
			Набор = РегистрыНакопления.ДвиженияНоменклатураНоменклатура.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			
			Результат = Запрос.Выполнить().Выгрузить();
			Если Результат.Количество() = 0 Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Регистратор, ДополнительныеПараметры);
			Иначе
				Набор.Загрузить(Результат);
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Регистратор% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", Регистратор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
				Регистратор.Метаданные(), ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	//-- НЕ УТ
	
	Регистраторы = Новый Массив;
	Регистраторы.Добавить("Документ.ПеремещениеТоваров");
	
	ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(Регистраторы,
		 ПолноеИмяРегистра, Параметры.Очередь);
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
