#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Обработчик обновления УТ 11.4.1
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрНакопления.ТоварыОрганизаций";
	
	Запрос = Новый Запрос;
	МассивТекстовЗапроса = Новый Массив;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|	И ДанныеРегистра.КорВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)";
	
	МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	
	//++ НЕ УТ
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Движения.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций КАК Движения
	|ГДЕ
	|	Движения.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад),
	|									ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение))
	|	И Движения.Регистратор Ссылка Документ.ПроизводствоБезЗаказа
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Движения.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций КАК Движения
	|ГДЕ
	|	Движения.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
	|	И Движения.РасчетПартий
	|	И (Движения.Регистратор Ссылка Документ.ПроизводствоБезЗаказа
	//++ НЕ УТКА
	|		ИЛИ Движения.Регистратор Ссылка Документ.ЭтапПроизводства2_2
	//-- НЕ УТКА
	|		)";
	
	МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	//-- НЕ УТ
	
	
	//++ НЕ УТКА
	ТекстЗапроса = 
	// очистка ошибочно установленного признака Первичное
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Движения.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций КАК Движения
	|ГДЕ
	|	(Движения.Первичное
	|			ИЛИ Движения.УдалитьПартияПроизводства <> НЕОПРЕДЕЛЕНО)
	|	И Движения.Регистратор ССЫЛКА Документ.ЭтапПроизводства2_2";
	
	МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	//-- НЕ УТКА
	
	// удаление движений для номенклатуры с типом "Работа"
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Движения.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций КАК Движения
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК КлючиАналитики
	|	ПО Движения.АналитикаУчетаНоменклатуры = КлючиАналитики.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|	ПО СпрНоменклатура.Ссылка = КлючиАналитики.Номенклатура
	|	И СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	
	// исправление расхождения количества с документом сборки
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Регистратор КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыОрганизаций.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ТоварыОрганизаций.Количество КАК Количество,
	|		ТоварыОрганизаций.Регистратор КАК Регистратор
	|	ИЗ
	|		РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизаций
	|	ГДЕ
	|		ТоварыОрганизаций.Регистратор ССЫЛКА Документ.СборкаТоваров
	|		И ТоварыОрганизаций.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СборкаТоваров.АналитикаУчетаНоменклатуры,
	|		-СборкаТоваров.Количество,
	|		СборкаТоваров.Ссылка
	|	ИЗ
	|		Документ.СборкаТоваров КАК СборкаТоваров
	|	ГДЕ
	|		СборкаТоваров.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)
	|		И ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрНакопления.ТоварыОрганизаций КАК Движения
	|				ГДЕ
	|					Движения.Регистратор = СборкаТоваров.Ссылка
	|					И Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СборкаТоваровТовары.АналитикаУчетаНоменклатуры,
	|		-СборкаТоваровТовары.Количество,
	|		СборкаТоваровТовары.Ссылка
	|	ИЗ
	|		Документ.СборкаТоваров.Товары КАК СборкаТоваровТовары
	|	ГДЕ
	|		СборкаТоваровТовары.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров)
	|		И ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрНакопления.ТоварыОрганизаций КАК Движения
	|				ГДЕ
	|					Движения.Регистратор = СборкаТоваровТовары.Ссылка
	|					И Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Регистратор,
	|	ВложенныйЗапрос.АналитикаУчетаНоменклатуры
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВложенныйЗапрос.Количество) <> 0";
	МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТоварыОрганизаций.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизаций
	|ГДЕ
	|	(ТоварыОрганизаций.Регистратор ССЫЛКА Документ.ПеремещениеТоваров
	//++ НЕ УТ
	|	ИЛИ ТоварыОрганизаций.Регистратор ССЫЛКА Документ.ДвижениеПродукцииИМатериалов
	//-- НЕ УТ
	|	ИЛИ ТоварыОрганизаций.Регистратор ССЫЛКА Документ.КорректировкаНазначенияТоваров)
	|	И (ТоварыОрганизаций.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|				И ТоварыОрганизаций.ВидЗапасов = ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|			ИЛИ ТоварыОрганизаций.ВидЗапасов.РеализацияЗапасовДругойОрганизации)";
	МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	
	Запрос.Текст = СтрСоединить(МассивТекстовЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении(Истина));
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
	
	ИмяРегистра = "ТоварыОрганизаций";
	ПолноеИмяРегистра = "РегистрНакопления.ТоварыОрганизаций";
	
	СписокДокументов = Новый Массив();
	СписокДокументов.Добавить("Документ.ТаможеннаяДекларацияИмпорт");
	
	Для Каждого ПолноеИмяДокумента Из СписокДокументов Цикл
		ИмяДокумента = СтрРазделить(ПолноеИмяДокумента, ".")[1];
		ТекстЗапросаМеханизмаПроведения = Документы[ИмяДокумента].АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра);
		Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(
								ТекстЗапросаМеханизмаПроведения,
								ПолноеИмяРегистра,
								ПолноеИмяДокумента);
								
		ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления УТ 11.4.1 в движениях регистра.
// Очищается кор.вид запасов для комиссионного товара.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	ПолноеИмяРегистра = "РегистрНакопления.ТоварыОрганизаций";
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ТоварыОрганизаций;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(Параметры.Очередь, Неопределено, ПолноеИмяРегистра);
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Движения.Регистратор                   КАК Регистратор,
	|	Движения.Период                        КАК Период,
	|	Движения.ВидДвижения                   КАК ВидДвижения,
	|	Движения.АналитикаУчетаНоменклатуры    КАК АналитикаУчетаНоменклатуры,
	|	Движения.Организация                   КАК Организация,
	|	Движения.ВидЗапасов                    КАК ВидЗапасов,
	|	Движения.НомерГТД                      КАК НомерГТД,
	|	Движения.Количество                    КАК Количество,
	|	ВЫБОР
	|		КОГДА Движения.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад),
	|										ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение))
	//++ НЕ УТ
	|			И Движения.Регистратор Ссылка Документ.ПроизводствоБезЗаказа
	//-- НЕ УТ
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции)
	//++ НЕ УТ
	|		КОГДА Движения.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
	|				И Движения.РасчетПартий
	|				И (Движения.Регистратор Ссылка Документ.ПроизводствоБезЗаказа
	//++ НЕ УТКА
	|					ИЛИ Движения.Регистратор Ссылка Документ.ЭтапПроизводства2_2
	//-- НЕ УТКА
	|					)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства)
	//-- НЕ УТ
	|		ИНАЧЕ Движения.ХозяйственнаяОперация
	|	КОНЕЦ                                  КАК ХозяйственнаяОперация,
	|	ВЫБОР
	//++ НЕ УТКА
	|		КОГДА Движения.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
	|				И Движения.РасчетПартий
	|				И Движения.Регистратор Ссылка Документ.ЭтапПроизводства2_2
	|				ТОГДА Реквизиты.ВыпускПодДеятельность
	//-- НЕ УТКА
	|		КОГДА ИСТИНА
	|			ТОГДА Движения.НалогообложениеНДС
	|	КОНЕЦ                                  КАК НалогообложениеНДС,
	|	Движения.КорАналитикаУчетаНоменклатуры КАК КорАналитикаУчетаНоменклатуры,
	|	ВЫБОР
	|		КОГДА Движения.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|		И Движения.КорВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|		И Движения.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
	|		И Движения.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию)
	|		И Движения.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаПереработчику)
	|		И Движения.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВПроизводство)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	//++ НЕ УТКА
	|		КОГДА Движения.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
	|				И Движения.РасчетПартий
	|				И Движения.Регистратор Ссылка Документ.ЭтапПроизводства2_2
	|				ТОГДА Движения.ВидЗапасов
	//-- НЕ УТКА
	|		ИНАЧЕ Движения.КорВидЗапасов
	|	КОНЕЦ                                  КАК КорВидЗапасов,
	|	Движения.ОрганизацияОтгрузки           КАК ОрганизацияОтгрузки,
	|	Движения.ДокументРеализации            КАК ДокументРеализации,
	|	Движения.СтатьяРасходов                КАК СтатьяРасходов,
	|	Движения.АналитикаРасходов             КАК АналитикаРасходов,
	|	ВЫБОР
	//++ НЕ УТКА
	|		КОГДА Движения.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
	|				И Движения.РасчетПартий
	|				И Движения.Регистратор Ссылка Документ.ЭтапПроизводства2_2
	|				ТОГДА Аналитика.Номенклатура
	//-- НЕ УТКА
	|		КОГДА ИСТИНА
	|			ТОГДА Движения.Номенклатура
	|	КОНЕЦ                                  КАК Номенклатура,
	|	ВЫБОР
	//++ НЕ УТКА
	|		КОГДА Движения.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
	|				И Движения.РасчетПартий
	|				И Движения.Регистратор Ссылка Документ.ЭтапПроизводства2_2
	|				ТОГДА Аналитика.Характеристика
	//-- НЕ УТКА
	|		КОГДА ИСТИНА
	|			ТОГДА Движения.Характеристика
	|	КОНЕЦ                                  КАК Характеристика,
	|	ВЫБОР
	//++ НЕ УТКА
	|		КОГДА Движения.Регистратор Ссылка Документ.ЭтапПроизводства2_2
	|			ТОГДА ЛОЖЬ
	//-- НЕ УТКА
	|		КОГДА ИСТИНА
	|			ТОГДА Движения.Первичное
	|	КОНЕЦ                                  КАК Первичное,
	|	ВЫБОР
	//++ НЕ УТКА
	|		КОГДА Движения.Регистратор Ссылка Документ.ЭтапПроизводства2_2
	|			ТОГДА ЛОЖЬ
	//-- НЕ УТКА
	|		КОГДА ИСТИНА
	|			ТОГДА Движения.РасчетПартий
	|	КОНЕЦ                                  КАК РасчетПартий,
	|	НЕОПРЕДЕЛЕНО                           КАК УдалитьПартияПроизводства
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций КАК Движения
	//++ НЕ УТКА
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК Реквизиты
	|	ПО Движения.Регистратор = Реквизиты.Ссылка
	//-- НЕ УТКА
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|	ПО Движения.АналитикаУчетаНоменклатуры = Аналитика.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|	ПО СпрНоменклатура.Ссылка = Аналитика.Номенклатура
	|ГДЕ
	|	Движения.Регистратор = &Регистратор
	|	И НЕ СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	Пока Выборка.Следующий() Цикл
		
		Регистратор = Выборка.Регистратор;
		
		Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт")
			Или ТипЗнч(Регистратор) = Тип("ДокументСсылка.СборкаТоваров")
			Или ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПеремещениеТоваров")
			//++ НЕ УТ
			Или ТипЗнч(Регистратор) = Тип("ДокументСсылка.ДвижениеПродукцииИМатериалов")
			//-- НЕ УТ
			Или ТипЗнч(Регистратор) = Тип("ДокументСсылка.КорректировкаНазначенияТоваров") Тогда
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

			Блокировка.Заблокировать();
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Регистратор", Регистратор);
			
			Набор = РегистрыНакопления.ТоварыОрганизаций.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			
			Результат = Запрос.Выполнить().Выгрузить();
			Набор.Загрузить(Результат);
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Регистратор% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", Регистратор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
				Регистратор.Метаданные(), ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Регистраторы = Новый Массив;
	Регистраторы.Добавить("Документ.ТаможеннаяДекларацияИмпорт");
	Регистраторы.Добавить("Документ.СборкаТоваров");
	Регистраторы.Добавить("Документ.ПеремещениеТоваров");
	Регистраторы.Добавить("Документ.КорректировкаНазначенияТоваров");
	//++ НЕ УТ
	Регистраторы.Добавить("Документ.ДвижениеПродукцииИМатериалов");
	//-- НЕ УТ
	
	ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(Регистраторы,
		"РегистрНакопления.ТоварыОрганизаций", Параметры.Очередь);
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

//++ НЕ УТКА

Процедура ЗарегистрироватьСгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме(Параметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхеме(Параметры) Экспорт
	
	Если Не ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, "РегистрНакопления.ТоварыОрганизаций") Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ИспользуетсяПроизводство2_2 = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2");
	
	ТекстРазделителяЗапросов = 
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	ТекстЗапросаОстатковТоваровОрганизаций =
	"ВЫБРАТЬ ПЕРВЫЕ 500
	|	ТоварыОрганизацийОстатки.АналитикаУчетаНоменклатуры,
	|	ИСТИНА КАК ИсходноеНазначениеДвиженияПоСкладскимРегистрам,
	|	ТоварыОрганизацийОстатки.Организация КАК Организация,
	|	ТоварыОрганизацийОстатки.ВидЗапасов,
	|	ТоварыОрганизацийОстатки.НомерГТД,
	|	ТоварыОрганизацийОстатки.КоличествоОстаток КАК Количество,
	|	ТоварыОрганизацийОстатки.КоличествоОстаток КАК КоличествоУпаковок,
	|	ТоварыОрганизацийОстатки.ВидЗапасов.ВладелецТовара КАК Партнер,
	|	ТоварыОрганизацийОстатки.ВидЗапасов.Договор КАК Договор,
	|	ТоварыОрганизацийОстатки.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТоварыОрганизацийОстатки.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|	ТоварыОрганизацийОстатки.АналитикаУчетаНоменклатуры.Серия КАК Серия,
	|	ТоварыОрганизацийОстатки.АналитикаУчетаНоменклатуры.Склад КАК Склад,
	|	ТоварыОрганизацийОстатки.АналитикаУчетаНоменклатуры.СтатьяКалькуляции КАК СтатьяКалькуляции
	|ПОМЕСТИТЬ ВтТоварыОрганизаций
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(
	|			,
	|			АналитикаУчетаНоменклатуры.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|					И ВидЗапасов.ТипЗапасов В
	|						(ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.МатериалДавальца),
	|						 ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца))) КАК ТоварыОрганизацийОстатки
	|ГДЕ
	|	ТоварыОрганизацийОстатки.АналитикаУчетаНоменклатуры.Склад ССЫЛКА Справочник.Склады";
	
	Если ИспользуетсяПроизводство2_2 Тогда
		
		// В качестве новых назначений - назначения давальца "в целом"
		
		ТекстЗапросаБазовыеНазначения = 
		"ВЫБРАТЬ
		|	ВтТоварыОрганизаций.Партнер        КАК Партнер,
		|	ВтТоварыОрганизаций.Договор        КАК Договор,
		|	МАКСИМУМ(ТаблицаНазначения.Ссылка) КАК Назначение
		|ПОМЕСТИТЬ ВТБазовыеНазначенияДавальцев
		|ИЗ
		|	Справочник.Назначения КАК ТаблицаНазначения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТоварыОрганизаций КАК ВтТоварыОрганизаций
		|		ПО ТаблицаНазначения.Партнер = ВтТоварыОрганизаций.Партнер
		|			И ТаблицаНазначения.Договор = ВтТоварыОрганизаций.Договор
		|			И ТаблицаНазначения.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
		|			И ТаблицаНазначения.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалы22)
		|ГДЕ
		|	НЕ ТаблицаНазначения.Ссылка.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтТоварыОрганизаций.Партнер,
		|	ВтТоварыОрганизаций.Договор";
	Иначе
		
		// В качестве новых назначений - первое вхождение назначения заказа давальца
		
		ТекстЗапросаБазовыеНазначения = 
		"ВЫБРАТЬ
		|	ВтТоварыОрганизаций.Партнер        КАК Партнер,
		|	ВтТоварыОрганизаций.Договор        КАК Договор,
		|	МАКСИМУМ(ТаблицаНазначения.Ссылка) КАК Назначение
		|ПОМЕСТИТЬ ВТБазовыеНазначенияДавальцев
		|ИЗ
		|	Справочник.Назначения КАК ТаблицаНазначения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТоварыОрганизаций КАК ВтТоварыОрганизаций
		|		ПО ВтТоварыОрганизаций.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|			И ТаблицаНазначения.Заказ ССЫЛКА Документ.ЗаказДавальца
		|			И ВЫРАЗИТЬ(ТаблицаНазначения.Заказ КАК Документ.ЗаказДавальца).Партнер = ВтТоварыОрганизаций.Партнер
		|			И ВЫРАЗИТЬ(ТаблицаНазначения.Заказ КАК Документ.ЗаказДавальца).Договор = ВтТоварыОрганизаций.Договор
		|			И ТаблицаНазначения.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
		|ГДЕ
		|	НЕ ТаблицаНазначения.Ссылка.ПометкаУдаления
		|	И НЕ ВЫРАЗИТЬ(ТаблицаНазначения.Заказ КАК Документ.ЗаказДавальца).ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтТоварыОрганизаций.Партнер,
		|	ВтТоварыОрганизаций.Договор";
	КонецЕсли;
	
	ТекстЗапросаВыборка = 
	"ВЫБРАТЬ
	|	ВтТоварыОрганизаций.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ИСТИНА                                         КАК ИсходноеНазначениеДвиженияПоСкладскимРегистрам,
	|	ВтТоварыОрганизаций.Организация                КАК Организация,
	|	ВтТоварыОрганизаций.ВидЗапасов                 КАК ВидЗапасов,
	|	ВтТоварыОрганизаций.НомерГТД                   КАК НомерГТД,
	|	ВтТоварыОрганизаций.Количество                 КАК Количество,
	|	ВтТоварыОрганизаций.КоличествоУпаковок         КАК КоличествоУпаковок,
	|	ВтТоварыОрганизаций.Партнер                    КАК Партнер,
	|	ВтТоварыОрганизаций.Договор                    КАК Договор,
	|	ВтТоварыОрганизаций.Номенклатура               КАК Номенклатура,
	|	ВтТоварыОрганизаций.Характеристика             КАК Характеристика,
	|	ВтТоварыОрганизаций.Серия                      КАК Серия,
	|	ВтТоварыОрганизаций.Склад                      КАК Склад,
	|	ВтТоварыОрганизаций.СтатьяКалькуляции          КАК СтатьяКалькуляции,
	|	МАКСИМУМ(ЕСТЬNULL(ВТБазовыеНазначенияДавальцев.Назначение,
	|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)))
	|	                                               КАК Назначение
	|ИЗ
	|	ВтТоварыОрганизаций КАК ВтТоварыОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБазовыеНазначенияДавальцев
	|		ПО ВтТоварыОрганизаций.Партнер = ВТБазовыеНазначенияДавальцев.Партнер
	|			И ВтТоварыОрганизаций.Договор = ВТБазовыеНазначенияДавальцев.Договор
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтТоварыОрганизаций.АналитикаУчетаНоменклатуры,
	|	ВтТоварыОрганизаций.Организация,
	|	ВтТоварыОрганизаций.ВидЗапасов,
	|	ВтТоварыОрганизаций.НомерГТД,
	|	ВтТоварыОрганизаций.Количество,
	|	ВтТоварыОрганизаций.КоличествоУпаковок,
	|	ВтТоварыОрганизаций.Партнер,
	|	ВтТоварыОрганизаций.Договор,
	|	ВтТоварыОрганизаций.Номенклатура,
	|	ВтТоварыОрганизаций.Характеристика,
	|	ВтТоварыОрганизаций.Серия,
	|	ВтТоварыОрганизаций.Склад,
	|	ВтТоварыОрганизаций.СтатьяКалькуляции
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Партнер";
	
	ТекстЗапроса = 
		ТекстЗапросаОстатковТоваровОрганизаций
		+ ТекстРазделителяЗапросов
		+ ТекстЗапросаБазовыеНазначения
		+ ТекстРазделителяЗапросов
		+ ТекстЗапросаВыборка;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ТекущаяОрганизация = Неопределено;
	ТекущийПартнер     = Неопределено;
	НовыйДокумент      = Неопределено;
	НазначениеПартнера = Неопределено;
	
	КоличествоИндексовСтрок = РезультатЗапроса.Количество() - 1;
	
	Для ИндексСтроки = 0 По КоличествоИндексовСтрок Цикл
		
		ТекущаяСтрока = РезультатЗапроса[ИндексСтроки];
		
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.Назначение)
			И Не ИспользуетсяПроизводство2_2 Тогда
			Продолжить;
			// При отсутствии в БД подходящего назначения, можно создать новое только при включенном производстве 2.2.
		КонецЕсли;
		
		Если ТекущаяОрганизация <> ТекущаяСтрока.Организация
			Или ТекущийПартнер <> ТекущаяСтрока.Партнер Тогда
			
			ТекущаяОрганизация = ТекущаяСтрока.Организация;
			ТекущийПартнер = ТекущаяСтрока.Партнер;
			НазначениеПартнера = Неопределено;
			
			НовыйДокумент = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
			НовыйДокумент.Организация = ТекущаяСтрока.Организация;
			НовыйДокумент.Дата = ТекущаяДатаСеанса();
			НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.ПроизвольнаяКорректировкаНазначений;
			НовыйДокумент.ВидыЗапасовУказаныВручную = Истина;
			НовыйДокумент.ДополнительныеСвойства.Вставить("ПрограммноеСозданиеДокумента");
			
			НомерВерсии = "2.4.2";
			Комментарий = НСтр("ru = 'Документ создан автоматически при переходе на версию %1. Организация: %2, Партнер: %3.'");
			Комментарий = СтрШаблон(Комментарий, НомерВерсии, ТекущаяОрганизация, ТекущийПартнер);
			
			НовыйДокумент.Комментарий = Комментарий;
			
		КонецЕсли;
		
		// Довычисление полей
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Назначение) Тогда
			НазначениеПартнера = ТекущаяСтрока.Назначение;
		ИначеЕсли Не ЗначениеЗаполнено(ТекущаяСтрока.Назначение)
			И ЗначениеЗаполнено(НазначениеПартнера) Тогда
			// НазначениеПартнера уже создано в предыдущей итерации - оставить как есть.
		Иначе
			
			ПараметрыНазначения = Новый Структура();
			ПараметрыНазначения.Вставить("НаправлениеДеятельности", Справочники.НаправленияДеятельности.ПустаяСсылка());
			ПараметрыНазначения.Вставить("Партнер",                 ТекущаяСтрока.Партнер);
			ПараметрыНазначения.Вставить("Договор",                 ТекущаяСтрока.Договор);
			// Только с этой настройкой можно создать назначение под давальца в целом
			ПараметрыНазначения.Вставить("УправлениеПроизводством2_2", Истина);
			
			ШаблонНазначенияДавальца = Документы.ЗаказДавальца.ШаблонНазначенияМатериалы(ПараметрыНазначения);
			
			НачатьТранзакцию();
			Попытка
				// Перед созданием нового назначения убедимся, что его все еще нет в базе
				Справочники.Назначения.УстановитьБлокировкуПоШаблону(ШаблонНазначенияДавальца);
				НазначениеПартнера = Справочники.Назначения.НайтиПоШаблону(ШаблонНазначенияДавальца);
				
				Если Не ЗначениеЗаполнено(НазначениеПартнера) Тогда
				
					ПредставлениеНазначения = Справочники.Назначения.ПредставлениеНазначения(ШаблонНазначенияДавальца, Неопределено);
					
					НовоеНазначение = Справочники.Назначения.СоздатьЭлемент();
					
					ЗаполнитьЗначенияСвойств(НовоеНазначение, ШаблонНазначенияДавальца);
					НовоеНазначение.Наименование = ПредставлениеНазначения;
					НовоеНазначение.КонтролироватьТолькоНаличие = Истина;
					
					СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхемеЗаписьНазначения(НовоеНазначение);
					
					НазначениеПартнера = НовоеНазначение.Ссылка;
					
				КонецЕсли;
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ТекстСообщения = НСтр("ru = 'Не удалось создать или заблокировать назначение по шаблону: Партнер: %1, Договор: %2 по причине: %3'");
				ТекстСообщения = СтрШаблон(ТекстСообщения,
					ТекущаяСтрока.Партнер,
					ТекущаяСтрока.Договор,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
										УровеньЖурналаРегистрации.Предупреждение,
										Метаданные.Справочники.Назначения,
										,
										ТекстСообщения);
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		
		ВидЗапасовОприходование = ТекущаяСтрока.ВидЗапасов;
		
		ПараметрыАналитики = Новый Структура("Номенклатура, Характеристика, Склад, СтатьяКалькуляции, Назначение");
		ЗаполнитьЗначенияСвойств(ПараметрыАналитики, ТекущаяСтрока);
		ПараметрыАналитики.Назначение = НазначениеПартнера;
		
		АналитикаУчетаНоменклатурыОприходование = РегистрыСведений.АналитикаУчетаНоменклатуры.ЗначениеКлючаАналитики(ПараметрыАналитики);
		
		// Заполнение ТЧ Товары
		
		НоваяСтрока = НовыйДокумент.Товары.Добавить();
		
		ПоляСтрокиТовары = "Номенклатура, Характеристика, Склад, Серия, Количество, КоличествоУпаковок, АналитикаУчетаНоменклатуры";
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока, ПоляСтрокиТовары);
		НоваяСтрока.НовоеНазначение = НазначениеПартнера;
		НоваяСтрока.АналитикаУчетаНоменклатурыОприходование = АналитикаУчетаНоменклатурыОприходование;
		
		// Заполнение ТЧ ВидыЗапасов
		
		НоваяСтрокаВидЗапаса = НовыйДокумент.ВидыЗапасов.Добавить();
		
		ПоляСтрокиВидЗапасов = "ВидЗапасов, АналитикаУчетаНоменклатуры, НомерГТД, Количество";
		ЗаполнитьЗначенияСвойств(НоваяСтрокаВидЗапаса, ТекущаяСтрока, ПоляСтрокиВидЗапасов);
		НоваяСтрокаВидЗапаса.ВидЗапасовОприходование = ВидЗапасовОприходование;
		НоваяСтрокаВидЗапаса.АналитикаУчетаНоменклатурыОприходование = АналитикаУчетаНоменклатурыОприходование;
		
		// Сторнирование корректировок назначений, которые сняли давальческий резерв (давальческий тип запасов).
		Если ТекущаяСтрока.Количество < 0 Тогда
			
			НоваяСтрока.Количество = -ТекущаяСтрока.Количество;
			НоваяСтрока.КоличествоУпаковок = -ТекущаяСтрока.КоличествоУпаковок;
			НоваяСтрокаВидЗапаса.Количество = -ТекущаяСтрока.Количество;
			
			ПоменятьПоляМестами(НоваяСтрока, "НовоеНазначение", "ИсходноеНазначение");
			ПоменятьПоляМестами(НоваяСтрока, "АналитикаУчетаНоменклатурыОприходование", "АналитикаУчетаНоменклатуры");
			
			ПоменятьПоляМестами(НоваяСтрокаВидЗапаса, "ВидЗапасовОприходование", "ВидЗапасов");
			ПоменятьПоляМестами(НоваяСтрокаВидЗапаса, "АналитикаУчетаНоменклатурыОприходование", "АналитикаУчетаНоменклатуры");
			
		КонецЕсли;
		
		ОрганизацияСледующейСтроки = Неопределено;
		ПартнерСледующейСтроки     = Неопределено;
		Если ИндексСтроки + 1 <= КоличествоИндексовСтрок Тогда
			СледующаяСтрока = РезультатЗапроса[ИндексСтроки + 1];
			ОрганизацияСледующейСтроки = СледующаяСтрока.Организация;
			ПартнерСледующейСтроки = СледующаяСтрока.Партнер;
		КонецЕсли;
		
		// Другая аналитика следующей строки, либо последняя итерация
		Если ТекущаяОрганизация <> ОрганизацияСледующейСтроки
			Или ТекущийПартнер <> ПартнерСледующейСтроки Тогда
			
			ТаблицаДляРасчетаПомещенийЯчеек = НовыйДокумент.Товары.Выгрузить();
			ТаблицаДляРасчетаПомещенийЯчеек.Колонки.Добавить("Отметка", Новый ОписаниеТипов("Булево"));
			ТаблицаДляРасчетаПомещенийЯчеек.Колонки.Добавить("ВНаличии", Новый ОписаниеТипов("Число"));
			ТаблицаДляРасчетаПомещенийЯчеек.Колонки.Добавить("СвободныйОстаток", Новый ОписаниеТипов("Число"));
			
			ТаблицаПомещенияЯчейки = Документы.КорректировкаНазначенияТоваров.ТаблицаПомещенияЯчейкиПоТоварам(
				ТаблицаДляРасчетаПомещенийЯчеек,
				НовыйДокумент.Ссылка,
				Ложь);
			
			Документы.КорректировкаНазначенияТоваров.СлитьТаблицыПоСкладуИПомещениям(ТаблицаДляРасчетаПомещенийЯчеек, ТаблицаПомещенияЯчейки);
			
			Индексов = ТаблицаДляРасчетаПомещенийЯчеек.Количество() - 1;
			Для Инд = 0 По Индексов Цикл
				ТекСтрока = ТаблицаДляРасчетаПомещенийЯчеек[Индексов - Инд];
				Если ТекСтрока.Количество = 0 Тогда
					ТаблицаДляРасчетаПомещенийЯчеек.Удалить(ТекСтрока);
				КонецЕсли;
			КонецЦикла;
			
			НовыйДокумент.Товары.Загрузить(ТаблицаДляРасчетаПомещенийЯчеек);
			
			ПоляСвертки = "ВидЗапасов, АналитикаУчетаНоменклатурыОприходование, НомерГТД, ВидЗапасовОприходование, АналитикаУчетаНоменклатуры";
			НовыйДокумент.ВидыЗапасов.Свернуть(ПоляСвертки, "Количество");
			
			ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(
				НоменклатураСервер.ПараметрыУказанияСерий(НовыйДокумент,
				Документы.КорректировкаНазначенияТоваров));
			
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(НовыйДокумент, ПараметрыУказанияСерий);
			
			НачатьТранзакцию();
			Попытка
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НовыйДокумент, Неопределено, Ложь, РежимЗаписиДокумента.Проведение);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), НовыйДокумент);
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	КоличествоОставшихсяСтрокКОбработке = Запрос.Выполнить().Выбрать().Количество();
	
	// Неуменьшаемое количество строк к обработке (при производстве 2.1) означает, что
	// нет назначения на которое можно было бы переместить остаток.
	// Такие ситуации должны быть решены пользователем в интерактивном режиме.
	ОбработкаЗавершена = КоличествоОставшихсяСтрокКОбработке = 0
						 Или (Не ИспользуетсяПроизводство2_2
							  И КоличествоОставшихсяСтрокКОбработке = КоличествоИндексовСтрок + 1);
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры

Процедура СгенерироватьДокументыДляПереброскиОстатковСПустогоНазначенияПоДавальческойСхемеЗаписьНазначения(НовоеНазначение)
	
	НачатьТранзакцию();
	Попытка
		НовоеНазначение.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), НовоеНазначение);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ПоменятьПоляМестами(Строка, Поле1, Поле2)
	
	Кеш = Строка[Поле1];
	Строка[Поле1] = Строка[Поле2];
	Строка[Поле2] = Кеш;
	
КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти

#КонецЕсли