#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

//++ НЕ УТКА

// Обработчик обновления 2.4.6
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт

	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = ТипыДокументовКОбработке();
	ПараметрыВыборки.ПолныеИменаРегистров = Метаданные.РегистрыНакопления.ТрудозатратыНезавершенногоПроизводства.ПолноеИмя();
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Регистратор.Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Регистратор");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПараметрыВыборки.ПолныеИменаРегистров;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	// Перенос партии производства в новое измерение
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ТрудозатратыНезавершенногоПроизводства КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ПартияПроизводства = ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
	|	И ТИПЗНАЧЕНИЯ(ДанныеРегистра.УдалитьПартияПроизводства) = ТИП(Документ.ЭтапПроизводства2_2)
	|";
		
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
	
КонецПроцедуры

// Обработчик обновления 2.4.6
// - заполняет направление деятельности производства без заказа в аналитике учета партий производства.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ТрудозатратыНезавершенногоПроизводства;
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() > 0 Тогда
		
	#Область ЗапросДляРегистраторов
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Движения.Период								КАК Период,
		|	Движения.НомерСтроки						КАК НомерСтроки,
		|	Движения.Регистратор						КАК Регистратор,
		|	Движения.ВидДвижения						КАК ВидДвижения,
		|	Движения.Организация						КАК Организация,
		|	Движения.Подразделение						КАК Подразделение,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(Движения.УдалитьПартияПроизводства) = ТИП(Документ.ЭтапПроизводства2_2)
		|			ТОГДА СпрПартииПроизводства.Ссылка
		|		ИНАЧЕ Движения.ПартияПроизводства
		|	КОНЕЦ										КАК ПартияПроизводства,
		|	Движения.ЗаказНаПроизводство				КАК ЗаказНаПроизводство,
		|	Движения.КодСтрокиПродукция					КАК КодСтрокиПродукция,
		|	Движения.Этап								КАК Этап,
		|	Движения.СтатьяКалькуляции					КАК СтатьяКалькуляции,
		|	Движения.ВидРабот							КАК ВидРабот,
		|	Движения.ГруппаПродукции					КАК ГруппаПродукции,
		|	Движения.ВидФондаВзносов					КАК ВидФондаВзносов,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(Движения.УдалитьПартияПроизводства) = ТИП(Документ.ЭтапПроизводства2_2)
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		КОГДА ИСТИНА
		|			ТОГДА Движения.УдалитьПартияПроизводства
		|	КОНЕЦ										КАК УдалитьПартияПроизводства,
		|	Движения.Количество							КАК Количество,
		|	Движения.НормативнаяСтоимость				КАК НормативнаяСтоимость,
		|	Движения.Стоимость							КАК Стоимость,
		|	Движения.СтоимостьРегл						КАК СтоимостьРегл,
		|	Движения.Продукция							КАК Продукция,
		|	Движения.ХарактеристикаПродукции			КАК ХарактеристикаПродукции,
		|	Движения.КоличествоПродукции				КАК КоличествоПродукции,
		|	Движения.Сотрудник							КАК Сотрудник,
		|	Движения.КорАналитикаУчетаПродукции			КАК КорАналитикаУчетаПродукции,
		|	Движения.КорРазделУчета						КАК КорРазделУчета,
		|	Движения.КорВидЗапасовПродукции				КАК КорВидЗапасовПродукции,
		|	Движения.СтатьяКалькуляцииБезЗаказа			КАК СтатьяКалькуляцииБезЗаказа,
		|	Движения.ДокументВыпуска					КАК ДокументВыпуска,
		|	Движения.КодСтроки							КАК КодСтроки,
		|	Движения.РасчетПартий						КАК РасчетПартий,
		|	Движения.УдалитьАналитикаУчетаПартийПроизводства КАК УдалитьАналитикаУчетаПартийПроизводства,
		|	Движения.КорАналитикаУчетаПартий			КАК КорАналитикаУчетаПартий,
		|	Движения.РасчетНеЗавершен					КАК РасчетНеЗавершен
		|ИЗ
		|	РегистрНакопления.ТрудозатратыНезавершенногоПроизводства КАК Движения
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК РеквизитыЭтапа
		|	ПО РеквизитыЭтапа.Ссылка = Движения.УдалитьПартияПроизводства
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПартииПроизводства КАК СпрПартииПроизводства
		|	ПО СпрПартииПроизводства.Документ = РеквизитыЭтапа.Распоряжение
		|	И СпрПартииПроизводства.Код = РеквизитыЭтапа.НомерПартииЗапуска
		|	И НЕ СпрПартииПроизводства.ПометкаУдаления
		|
		|ГДЕ
		|	Движения.Регистратор = &Регистратор
		|
		|УПОРЯДОЧИТЬ ПО
		|	Движения.НомерСтроки
		|";
		
	#КонецОбласти
		
		Для Каждого ТекДанные Из ОбновляемыеДанные Цикл
			
			Регистратор = ТекДанные.Регистратор;
			
			НачатьТранзакцию();
			
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
				ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

				Блокировка.Заблокировать();
				
				Запрос.УстановитьПараметр("Регистратор", Регистратор);
				
				Набор = РегистрыНакопления.ТрудозатратыНезавершенногоПроизводства.СоздатьНаборЗаписей();
				Набор.Отбор.Регистратор.Установить(Регистратор);
				
				ТаблицаДвижений = Запрос.Выполнить().Выгрузить();
				Набор.Загрузить(ТаблицаДвижений);
				
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Регистратор, ДополнительныеПараметры);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Регистратор% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", Регистратор);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(
					ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,
					Регистратор.Метаданные(),
					ТекстСообщения);
				
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

Функция ТипыДокументовКОбработке()
	
	Возврат
		"Документ.КорректировкаРегистров,
		|Документ.ОтражениеЗарплатыВФинансовомУчете,
		|Документ.СписаниеЗатратНаВыпуск,
		|Документ.НачислениеОценочныхОбязательствПоОтпускам,
		|Документ.ВыработкаСотрудников,
		|Документ.ОтчетПереработчика,
		|Документ.ВыпускПродукции,
		|Документ.ПроизводствоБезЗаказа,
		|Документ.ПоступлениеОтПереработчика,
		|Документ.ЭтапПроизводства2_2,
		|Документ.ОтчетДавальцу
		|";
	
КонецФункции

//-- НЕ УТКА

#КонецОбласти

#КонецОбласти

#КонецЕсли
