#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// Обработчик обновления КА 2.4.1.11
// Очищает поле ВидЗапасов для типов запасов соответствующим услугам.
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = ТипыДокументовКОбработке();
	ПараметрыВыборки.ПолныеИменаРегистров = Метаданные.РегистрыНакопления.ПрочиеРасходыНезавершенногоПроизводства.ПолноеИмя();
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Регистратор.Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Регистратор");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПараметрыВыборки.ПолныеИменаРегистров;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Регистратор
	|ИЗ
	|	(
	// Очистка вида запасов услуг
	|	ВЫБРАТЬ
	|		ДанныеРегистра.Регистратор КАК Регистратор
	|	ИЗ
	|		РегистрНакопления.ПрочиеРасходыНезавершенногоПроизводства КАК ДанныеРегистра
	|	ГДЕ
	|		ДанныеРегистра.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	//++ НЕ УТКА
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Перенос партии производства в новое измерение
	|	ВЫБРАТЬ
	|		ДанныеРегистра.Регистратор КАК Регистратор
	|	ИЗ
	|		РегистрНакопления.ПрочиеРасходыНезавершенногоПроизводства КАК ДанныеРегистра
	|	ГДЕ
	|		ДанныеРегистра.ПартияПроизводства = ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
	|		И ТИПЗНАЧЕНИЯ(ДанныеРегистра.УдалитьПартияПроизводства) = ТИП(Документ.ЭтапПроизводства2_2)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеРегистра.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходыНезавершенногоПроизводства КАК ДанныеРегистра
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.УдалитьПартияПроизводства) = ТИП(Документ.ЭтапПроизводства2_2)
	|	И НЕ ДанныеРегистра.УдалитьПартияПроизводства = ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
	|	И ДанныеРегистра.Активность
	|	И НЕ ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.КорректировкаРегистров)
	|	И НЕ ВЫРАЗИТЬ(ДанныеРегистра.УдалитьПартияПроизводства КАК Документ.ЭтапПроизводства2_2).НаправлениеДеятельности = ДанныеРегистра.НаправлениеДеятельности
	//-- НЕ УТКА
	|	) КАК ДанныеРегистра
	|");
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
	
КонецПроцедуры

// Обработчик обновления КА 2.4.1.12
// Очищает поле ВидЗапасов для типов запасов соответствующим услугам.
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт

	МетаданныеРегистра = Метаданные.РегистрыНакопления.ПрочиеРасходыНезавершенногоПроизводства;
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() > 0 Тогда
		
		#Область ЗапросДляРегистраторов
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Движения.Период КАК Период,
		|	Движения.Регистратор КАК Регистратор,
		|	Движения.ВидДвижения КАК ВидДвижения,
		|	Движения.Организация КАК Организация,
		|	Движения.Подразделение КАК Подразделение,
		|	Движения.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
		|	Движения.КодСтрокиПродукция КАК КодСтрокиПродукция,
		|	ВЫБОР
		//++ НЕ УТКА
		|		КОГДА ТИПЗНАЧЕНИЯ(Движения.УдалитьПартияПроизводства) = ТИП(Документ.ЭтапПроизводства2_2)
		|			ТОГДА СпрПартииПроизводства.Ссылка
		//-- НЕ УТКА
		|		КОГДА ИСТИНА
		|			ТОГДА Движения.ПартияПроизводства
		|	КОНЕЦ                                КАК ПартияПроизводства,
		|	ВЫБОР
		//++ НЕ УТКА
		|		КОГДА ТИПЗНАЧЕНИЯ(Движения.УдалитьПартияПроизводства) = ТИП(Документ.ЭтапПроизводства2_2)
		|				И НЕ Движения.УдалитьПартияПроизводства = ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(Движения.УдалитьПартияПроизводства.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))
		//-- НЕ УТКА
		|		КОГДА ИСТИНА
		|			ТОГДА Движения.НаправлениеДеятельности
		|	КОНЕЦ КАК НаправлениеДеятельности,
		|	Движения.Этап КАК Этап,
		|	Движения.СтатьяКалькуляции КАК СтатьяКалькуляции,
		|	Движения.СтатьяРасходов КАК СтатьяРасходов,
		|	Движения.АналитикаРасходов КАК АналитикаРасходов,
		|	Движения.ГруппаПродукции КАК ГруппаПродукции,
		|	Движения.ПравилоОтнесенияНаВыпуск КАК ПравилоОтнесенияНаВыпуск,
		|	ВЫБОР
		//++ НЕ УТКА
		|		КОГДА ТИПЗНАЧЕНИЯ(Движения.УдалитьПартияПроизводства) = ТИП(Документ.ЭтапПроизводства2_2)
		|			ТОГДА НЕОПРЕДЕЛЕНО
		//-- НЕ УТКА
		|		КОГДА ИСТИНА
		|			ТОГДА Движения.УдалитьПартияПроизводства
		|	КОНЕЦ КАК УдалитьПартияПроизводства,
		|	Движения.Стоимость КАК Стоимость,
		|	Движения.СтоимостьБезНДС КАК СтоимостьБезНДС,
		|	Движения.СтоимостьРегл КАК СтоимостьРегл,
		|	Движения.ПостояннаяРазница КАК ПостояннаяРазница,
		|	Движения.ВременнаяРазница КАК ВременнаяРазница,
		|	Движения.ДоляСтоимости КАК ДоляСтоимости,
		|	Движения.СтоимостьУпр КАК СтоимостьУпр,
		|	Движения.УдалитьПоказательОтнесенияНаВыпуск КАК УдалитьПоказательОтнесенияНаВыпуск,
		|	Движения.УдалитьПоказательОтнесенияНаВыпускБезНДС КАК УдалитьПоказательОтнесенияНаВыпускБезНДС,
		|	Движения.УдалитьПоказательОтнесенияНаВыпускРегл КАК УдалитьПоказательОтнесенияНаВыпускРегл,
		|	Движения.УдалитьПоказательОтнесенияНаВыпускУпр КАК УдалитьПоказательОтнесенияНаВыпускУпр,
		|	Движения.Продукция КАК Продукция,
		|	Движения.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
		|	Движения.КоличествоПродукции КАК КоличествоПродукции,
		|	Движения.АналитикаУчетаПродукции КАК АналитикаУчетаПродукции,
		|	Движения.РазделУчета КАК РазделУчета,
		|	ВЫБОР
		|		КОГДА Движения.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
		|		ИНАЧЕ Движения.ВидЗапасов
		|	КОНЕЦ КАК ВидЗапасов,
		|	Движения.ДокументДвижения КАК ДокументДвижения,
		|	Движения.ДокументИсточник КАК ДокументИсточник,
		|	Движения.ДокументВыпуска КАК ДокументВыпуска,
		|	Движения.РасчетСебестоимости КАК РасчетСебестоимости,
		|	Движения.РасчетПартий КАК РасчетПартий,
		|	Движения.ПоказательОтнесенияНаПартию КАК ПоказательОтнесенияНаПартию,
		|	Движения.ПоказательОтнесенияНаПартиюБезНДС КАК ПоказательОтнесенияНаПартиюБезНДС,
		|	Движения.ПоказательОтнесенияНаПартиюРегл КАК ПоказательОтнесенияНаПартиюРегл,
		|	Движения.ПоказательОтнесенияНаПартиюУпр КАК ПоказательОтнесенияНаПартиюУпр,
		|	Движения.КорАналитикаУчетаПартий КАК КорАналитикаУчетаПартий
		|ИЗ
		|	РегистрНакопления.ПрочиеРасходыНезавершенногоПроизводства КАК Движения
		//++ НЕ УТКА
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК РеквизитыЭтапа
		|	ПО РеквизитыЭтапа.Ссылка = Движения.УдалитьПартияПроизводства
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПартииПроизводства КАК СпрПартииПроизводства
		|	ПО СпрПартииПроизводства.Документ = РеквизитыЭтапа.Распоряжение
		|	И СпрПартииПроизводства.Код = РеквизитыЭтапа.НомерПартииЗапуска
		|	И НЕ СпрПартииПроизводства.ПометкаУдаления
		//-- НЕ УТКА
		|
		|ГДЕ
		|	Движения.Регистратор = &Регистратор
		|
		|УПОРЯДОЧИТЬ ПО
		|	Движения.НомерСтроки";
		
		#КонецОбласти
		
		Для Каждого ТекДанные Из ОбновляемыеДанные Цикл
			
			Регистратор = ТекДанные.Регистратор;
			
			НачатьТранзакцию();
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
				ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				Блокировка.Заблокировать();
				
				Запрос = Новый Запрос(ТекстЗапроса);
				Запрос.УстановитьПараметр("Регистратор", Регистратор);
				
				Набор = РегистрыНакопления.ПрочиеРасходыНезавершенногоПроизводства.СоздатьНаборЗаписей();
				Набор.Отбор.Регистратор.Установить(Регистратор);
				
				ТаблицаДвижений = Запрос.Выполнить().Выгрузить();
				Набор.Загрузить(ТаблицаДвижений);
				
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Регистратор, ДополнительныеПараметры);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Регистратор% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", Регистратор);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(
					ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,
					Регистратор.Метаданные(),
					ТекстСообщения);
				
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

Функция ТипыДокументовКОбработке()
	
	Возврат
	"Документ.КорректировкаРегистров,
	|Документ.РасчетСебестоимостиТоваров,
	//++ НЕ УТ
	|Документ.РаспределениеПрочихЗатрат,
	|Документ.ОтчетПереработчика,
	|Документ.ВыпускПродукции,
	|Документ.ПроизводствоБезЗаказа,
	|Документ.ПоступлениеОтПереработчика,
	//-- НЕ УТ
	//++ НЕ УТКА
	|Документ.ЭтапПроизводства2_2,
	|Документ.ОтчетДавальцу
	//-- НЕ УТКА
	|";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли