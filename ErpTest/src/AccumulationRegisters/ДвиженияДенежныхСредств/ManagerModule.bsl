#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

//++ НЕ УТ
#Область ПрограммныйИнтерфейс
//++ НЕ УТКА

// Определяет источники уточнения счета, доступные в регистре и их свойства.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.ИсточникиУточненияСчета().
//
// Параметры:
//  СвойстваИсточника - Строка - "ИмяПоля" - имя атрибута регистра накопления, из которого планируется получать источник
//                               уточнения счета.
//
// Возвращаемое значение:
//  Соответствие - Ключ - название источника уточнения счета. 
//                 Значение - структура свойств источника уточнения счета.
//
Функция ИсточникиУточненияСчета(СвойстваИсточника) Экспорт
	
	ИсточникиУточненияСчета = Новый Соответствие;
	
	ИсточникиУточненияСчета.Вставить(Перечисления.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаДенежныхСредствКредита,
		Новый Структура(СвойстваИсточника, "ГФУДенежныхСредств"));
		
	ИсточникиУточненияСчета.Вставить(Перечисления.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаДенежныхСредствДебета,
		Новый Структура(СвойстваИсточника, "КорГФУДенежныхСредств"));
		
	Возврат ИсточникиУточненияСчета;
	
КонецФункции

// Определяет источники подразделений регистра и их свойства.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.ИсточникиПодразделений().
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя источника. 
//                 Значение - структура свойств источника. 
//
Функция ИсточникиПодразделений() Экспорт

	ИсточникиПодразделений = Новый Соответствие;
	
	ИсточникиПодразделений.Вставить(Перечисления.ИсточникиПодразделенийАналитическихРегистров.ХозяйственнаяОперация, "Подразделение");
	ИсточникиПодразделений.Вставить(Перечисления.ИсточникиПодразделенийАналитическихРегистров.АналитикаУчетаДенежныхСредствОтправителя, "ДенежныеСредстваПодразделение");
	ИсточникиПодразделений.Вставить(Перечисления.ИсточникиПодразделенийАналитическихРегистров.АналитикаУчетаДенежныхСредствПолучателя, "КорДенежныеСредстваПодразделение");
	
    Возврат ИсточникиПодразделений;
	
КонецФункции

// Определяет источники направлений регистра и их свойства.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.ИсточникиНаправлений().
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя источника. 
//                 Значение - структура свойств источника. 
//
Функция ИсточникиНаправлений() Экспорт

	Результат = Новый Соответствие;
	
	ИсточникиНаправлений = Перечисления.ИсточникиНаправленийДеятельностиАналитическихРегистров;
	Результат.Вставить(ИсточникиНаправлений.НаправлениеДеятельности, "НаправлениеДеятельности");
	Результат.Вставить(ИсточникиНаправлений.КорНаправлениеДеятельности, "КорНаправлениеДеятельности");

	Возврат Результат;

КонецФункции

// Определяет источники заполнения субконто.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.ИсточникиСубконто().
//
// Возвращаемое значение:
//  Массив - массив атрибутов регистра.
//
Функция ИсточникиСубконто() Экспорт

	МассивСубконтоДт = Новый Массив;
	МассивСубконтоДт.Добавить("КорДенежныеСредства");
	МассивСубконтоДт.Добавить("КорТипДенежныхСредств");
	МассивСубконтоДт.Добавить("СтатьяДвиженияДенежныхСредств");
	
	МассивСубконтоКт = Новый Массив;
	МассивСубконтоКт.Добавить("ДенежныеСредства");
	МассивСубконтоКт.Добавить("ТипДенежныхСредств");
	МассивСубконтоКт.Добавить("СтатьяДвиженияДенежныхСредств");

	Возврат Новый Структура("СубконтоДт, СубконтоКт", МассивСубконтоДт, МассивСубконтоКт);
	
КонецФункции

// Определяет показатели в валюте регистра.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.ПоказателиВВалюте().
//
// Параметры:
//  СвойстваПоказателей - Строка - "ИсточникВалюты" - источник валюты для показателя регистра.
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя показателя.
//                 Значение - структура свойств показателя.
//
Функция ПоказателиВВалюте(СвойстваПоказателей) Экспорт

	ПоказателиВВалюте = Новый Соответствие;
	
	ПоказателиВВалюте.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаВВалюте, Новый Структура(СвойстваПоказателей, "Валюта"));
	ПоказателиВВалюте.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаВКорВалюте, Новый Структура(СвойстваПоказателей, "КорВалюта"));
	
	Возврат ПоказателиВВалюте;

КонецФункции

// Определяет документы отражаемые в международном учете.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.ДокументыКОтражениюВМФУ().
//
// Возвращаемое значение:
//  Массив - массив регистраторов регистра отражаемых в международном учете.
//
Функция ДокументыКОтражениюВМеждународномУчете() Экспорт

	ДокументыКОтражению = Новый Массив;
	ДокументыКОтражению.Добавить("ВнесениеДенежныхСредствВКассуККМ");
	ДокументыКОтражению.Добавить("ВыбытиеДенежныхДокументов");
	ДокументыКОтражению.Добавить("ВыемкаДенежныхСредствИзКассыККМ");
	ДокументыКОтражению.Добавить("ПоступлениеДенежныхДокументов");
	ДокументыКОтражению.Добавить("ПриходныйКассовыйОрдер");
	ДокументыКОтражению.Добавить("РасходныйКассовыйОрдер");
	ДокументыКОтражению.Добавить("ПоступлениеБезналичныхДенежныхСредств");
	ДокументыКОтражению.Добавить("СписаниеБезналичныхДенежныхСредств");
	
	Возврат ДокументыКОтражению;

КонецФункции
//-- НЕ УТКА

// Определяет показатели регистра.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.Показатели().
//
// Параметры:
//  Свойства - Структура - содержащая ключи СвойстваПоказателей, СвойстваРесурсов.
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя показателя.
//                 Значение - структура свойств показателя.
//
Функция Показатели(Свойства) Экспорт

	Показатели = Новый Соответствие;
	
	СвойстваПоказателей = Свойства.СвойстваПоказателей;
	СвойстваРесурсов = Свойства.СвойстваРесурсов;
	
	// Массив содержит не только ресурсы регистров, но и производные от них поля в запросах.
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "Сумма", "ВалютаУпр"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаРегл", "ВалютаРегл"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаВВалюте", "Валюта"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаВКорВалюте", "КорВалюта"));
	
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.Сумма, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаКВыплатеВРамкахЛимита", "Валюта"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаКВыплатеВРамкахЛимита, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаКВыплатеСверхЛимита", "Валюта"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаКВыплатеСверхЛимита, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаКВыплате", "Валюта"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаКВыплате, Новый Структура(СвойстваПоказателей, МассивРесурсов));

	Возврат Показатели;
	
КонецФункции

#КонецОбласти
//-- НЕ УТ

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)
	|	И( ВЫБОР КОГДА ТипЗначения(ДенежныеСредства) = Тип(Справочник.Кассы) ТОГДА ЗначениеРазрешено(ДенежныеСредства)
	|	КОГДА ТипЗначения(ДенежныеСредства) = Тип(Справочник.КассыККМ) ТОГДА ЗначениеРазрешено(ДенежныеСредства)
	|	КОГДА ТипЗначения(ДенежныеСредства) = Тип(Справочник.ФизическиеЛица) ТОГДА ЗначениеРазрешено(ДенежныеСредства)
	|	ИНАЧЕ ИСТИНА КОНЕЦ) ";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ДвиженияДенежныхСредств";
	
	// Проверяем, что в выборку не попадают записи базы узла РИБ, в которую мигрируют записи без регистратора.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
		|	Заявки.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА Заявки.ДатаПлатежа <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА Заявки.ДатаПлатежа
		|		КОГДА Заявки.ЖелательнаяДатаПлатежа <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА Заявки.ЖелательнаяДатаПлатежа
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(Заявки.Дата, ДЕНЬ)
		|	КОНЕЦ КАК Период
		|ПОМЕСТИТЬ Регистраторы
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявки
		|ГДЕ
		|	Заявки.Проведен
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеРегистра.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.ДвиженияДенежныхСредств КАК ДанныеРегистра
		|ГДЕ
		|	ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте)
		|	И ДанныеРегистра.ДенежныеСредства = НЕОПРЕДЕЛЕНО
		|	И ДанныеРегистра.Регистратор ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ДвиженияДенежныхСредств.Регистратор
		|ИЗ
		|	РегистрНакопления.ДвиженияДенежныхСредств КАК ДвиженияДенежныхСредств
		|		ЛЕВОЕ СОЕДИНЕНИЕ Регистраторы КАК Регистраторы
		|		ПО ДвиженияДенежныхСредств.Период = Регистраторы.Период
		|			И ДвиженияДенежныхСредств.Регистратор = Регистраторы.Ссылка
		|ГДЕ
		|	ДвиженияДенежныхСредств.Регистратор ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств
		|	И Регистраторы.Ссылка ЕСТЬ NULL
		|	И (ДвиженияДенежныхСредств.СуммаКВыплатеВРамкахЛимита <> 0
		|			ИЛИ ДвиженияДенежныхСредств.СуммаКВыплатеСверхЛимита <> 0)";
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ДвиженияДенежныхСредств";
	ПолноеИмяЗаявки   = "Документ.ЗаявкаНаРасходованиеДенежныхСредств";
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(Параметры.Очередь, ПолноеИмяЗаявки, ПолноеИмяРегистра);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
		|	Движения.Период КАК ПериодПредыдущееЗначение,
		|	Движения.Регистратор КАК Регистратор,
		|	Движения.НомерСтроки КАК НомерСтроки,
		|	Движения.Активность КАК Активность,
		|	Движения.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	Движения.Организация КАК Организация,
		|	Движения.Подразделение КАК Подразделение,
		|	Движения.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	Движения.ДенежныеСредства КАК ДенежныеСредства,
		|	Движения.ТипДенежныхСредств КАК ТипДенежныхСредств,
		|	Движения.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	Движения.СтатьяКалькуляции КАК СтатьяКалькуляции,
		|	Движения.ТипПлатежаФЗ275 КАК ТипПлатежаФЗ275,
		|	Движения.Валюта КАК Валюта,
		|	Движения.КорДенежныеСредства КАК КорДенежныеСредства,
		|	Движения.КорТипДенежныхСредств КАК КорТипДенежныхСредств,
		|	Движения.КорНаправлениеДеятельности КАК КорНаправлениеДеятельности,
		|	Движения.КорВалюта КАК КорВалюта,
		|	Движения.Сумма КАК Сумма,
		|	Движения.СуммаРегл КАК СуммаРегл,
		|	Движения.СуммаВВалюте КАК СуммаВВалюте,
		|	Движения.СуммаКВыплатеВРамкахЛимита КАК СуммаКВыплатеВРамкахЛимита,
		|	Движения.СуммаКВыплатеСверхЛимита КАК СуммаКВыплатеСверхЛимита,
		|	Движения.СуммаВКорВалюте КАК СуммаВКорВалюте,
		|	Движения.ИсточникГФУДенежныхСредств КАК ИсточникГФУДенежныхСредств,
		|	Движения.ИсточникКорГФУДенежныхСредств КАК ИсточникКорГФУДенежныхСредств,
		|	ВЫБОР
		|		КОГДА Движения.СуммаКВыплатеВРамкахЛимита = 0
		|				И Движения.СуммаКВыплатеСверхЛимита = 0
		|			ТОГДА Движения.Период
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ВЫРАЗИТЬ(Движения.Регистратор КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).ДатаПлатежа <> ДАТАВРЕМЯ(1, 1, 1)
		|					ТОГДА ВЫРАЗИТЬ(Движения.Регистратор КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).ДатаПлатежа
		|				КОГДА ВЫРАЗИТЬ(Движения.Регистратор КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).ЖелательнаяДатаПлатежа <> ДАТАВРЕМЯ(1, 1, 1)
		|					ТОГДА ВЫРАЗИТЬ(Движения.Регистратор КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).ЖелательнаяДатаПлатежа
		|				ИНАЧЕ НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(Движения.Регистратор КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).Дата, ДЕНЬ)
		|			КОНЕЦ
		|	КОНЕЦ КАК Период
		|ИЗ
		|	РегистрНакопления.ДвиженияДенежныхСредств КАК Движения
		|ГДЕ
		|	Движения.Регистратор = &Регистратор";
	
	Пока Выборка.Следующий() Цикл
		
		Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
			Регистратор = Выборка.Регистратор;
			
			Запрос.УстановитьПараметр("Регистратор", Регистратор);
			
			НачатьТранзакцию();
			
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
				ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				
				ЭлементБлокировки = Блокировка.Добавить("Документ.ЗаявкаНаРасходованиеДенежныхСредств");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Регистратор);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
				
				Блокировка.Заблокировать();
				
				Набор = РегистрыНакопления.ДвиженияДенежныхСредств.СоздатьНаборЗаписей();
				Набор.Отбор.Регистратор.Установить(Регистратор);
				Набор.Загрузить(Запрос.Выполнить().Выгрузить());
				
				Если Набор.Количество() = 0 Тогда
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Регистратор, ДополнительныеПараметры);
				Иначе
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось обработать движения документа ""%1"" по причине:
						|%2'"),
					Регистратор,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(
					ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,
					Регистратор.Метаданные(),
					ТекстСообщения);
				
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	Регистраторы = Новый Массив;
	Регистраторы.Добавить("Документ.ПоступлениеБезналичныхДенежныхСредств");
	
	ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(
		Регистраторы,
		ПолноеИмяРегистра,
		Параметры.Очередь);
	
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
