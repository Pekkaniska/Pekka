
&НаСервере
Процедура СформироватьНаСервере()
	
	ТЗДеклараций = Объект.Декларации.Выгрузить();
	
	СтрокаОсновнойДекларации = Неопределено;
	Для каждого СтрокаДекларации Из ТЗДеклараций Цикл
		Если СтрокаДекларации.ОсновнаяДекларация Тогда
			СтрокаОсновнойДекларации = СтрокаДекларации;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(СтрокаОсновнойДекларации) Тогда
		Возврат;
	КонецЕсли;
	
	СводнаяДекларация = СтрокаОсновнойДекларации.Декларация.ПолучитьОбъект().Скопировать();
	СводнаяДекларация.Дата = СтрокаОсновнойДекларации.Декларация.Дата;
	СводнаяДекларация.Комментарий = "Сводная декларация за период: " + Формат(СводнаяДекларация.ДатаНачала, "ДФ=dd.MM.yyyy") + " - " + Формат(СводнаяДекларация.ДатаОкончания, "ДФ=dd.MM.yyyy");
	СводнаяДекларация.Записать();
	
	ДанныеСводнойДекларации = СводнаяДекларация.ДанныеОтчета.Получить();
	
	ДанныеМногостраничныхРазделовСД = Неопределено;
	ДанныеМногострочныхРазделовСД = Неопределено;
	ПоказателиОтчетаСД = Неопределено;
	РасшифровкаСД = Неопределено;
	
	Попытка ДанныеМногостраничныхРазделовСД = ДанныеСводнойДекларации.ДанныеМногостраничныхРазделов; Исключение	КонецПопытки;  //структура
	Попытка ДанныеМногострочныхРазделовСД = ДанныеСводнойДекларации.ДанныеМногострочныхРазделов; Исключение	КонецПопытки;  //структура
	Попытка ПоказателиОтчетаСД = ДанныеСводнойДекларации.ПоказателиОтчета; Исключение КонецПопытки; //структура
	//Попытка РасшифровкаСД = ДанныеСводнойДекларации.Расшифровка; Исключение КонецПопытки; //ТЗ
	
	Для каждого СтрокаДекларации Из ТЗДеклараций Цикл
		Если СтрокаДекларации = СтрокаОсновнойДекларации Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяДекларация = СтрокаДекларации.Декларация;
		ДанныеТекущейДекларации = ТекущаяДекларация.ДанныеОтчета.Получить();
		
		ДанныеМногостраничныхРазделовТД = Неопределено;
		ДанныеМногострочныхРазделовТД = Неопределено;
		ПоказателиОтчетаТД = Неопределено;
		РасшифровкаТД = Неопределено;
		
		Попытка ДанныеМногостраничныхРазделовТД = ДанныеТекущейДекларации.ДанныеМногостраничныхРазделов; Исключение	КонецПопытки;
		Попытка ДанныеМногострочныхРазделовТД = ДанныеТекущейДекларации.ДанныеМногострочныхРазделов; Исключение	КонецПопытки;
		Попытка ПоказателиОтчетаТД = ДанныеТекущейДекларации.ПоказателиОтчета; Исключение КонецПопытки;
		Попытка РасшифровкаТД = ДанныеТекущейДекларации.Расшифровка; Исключение КонецПопытки;
		
		Если ЗначениеЗаполнено(ДанныеМногостраничныхРазделовТД) Тогда
			Если Не ЗначениеЗаполнено(ДанныеМногостраничныхРазделовСД) Тогда
				ДанныеСводнойДекларации.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделовТД);
				ДанныеМногостраничныхРазделовСД = ДанныеСводнойДекларации.ДанныеМногостраничныхРазделов;
			Иначе
				ЗагрузитьДанныеМногостраничныхРазделов(ДанныеМногостраничныхРазделовТД, ДанныеМногостраничныхРазделовСД);
			КонецЕсли; 
		КонецЕсли;
			
		Если ЗначениеЗаполнено(ДанныеМногострочныхРазделовТД) Тогда
			Если Не ЗначениеЗаполнено(ДанныеМногострочныхРазделовСД) Тогда
				ДанныеСводнойДекларации.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделовТД);
				ДанныеМногострочныхРазделовСД = ДанныеСводнойДекларации.ДанныеМногострочныхРазделов;
			Иначе
				ЗагрузитьДанныеМногострочныхРазделов(ДанныеМногострочныхРазделовТД, ДанныеМногострочныхРазделовСД);
			КонецЕсли; 
		КонецЕсли;
			
		Если ЗначениеЗаполнено(ПоказателиОтчетаТД) Тогда
			Если Не ЗначениеЗаполнено(ПоказателиОтчетаСД) Тогда
				ДанныеСводнойДекларации.Вставить("ПоказателиОтчета", ПоказателиОтчетаТД);
				ПоказателиОтчетаСД = ДанныеСводнойДекларации.ПоказателиОтчета;
			Иначе
				ЗагрузитьПоказателиОтчета(ПоказателиОтчетаТД, ПоказателиОтчетаСД);
			КонецЕсли; 
		КонецЕсли;
		
		ХранилищеДанных = Новый ХранилищеЗначения(ДанныеСводнойДекларации);
		СводнаяДекларация.ДанныеОтчета = ХранилищеДанных;
		
		СводнаяДекларация.Записать();
		
		ДанныеСводнойДекларации = СводнаяДекларация.ДанныеОтчета.Получить();
		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеМногостраничныхРазделов(СтруктураИсточник, СтруктураПриемник)

	Для каждого ЭлементСтруктуры Из СтруктураИсточник Цикл
		
		ПоказателиСравнения = Новый Массив;
		ПоказателиСложение = Новый Массив;
		
		Если ЭлементСтруктуры.Ключ = "Раздел1_1" Тогда
			ПоказателиСложение.Добавить("П000110004003");
			ПоказателиСложение.Добавить("П000110005003");
			ПоказателиСложение.Добавить("П000110007003");
			ПоказателиСложение.Добавить("П000110008003");
			
		ИначеЕсли ЭлементСтруктуры.Ключ = "Раздел1_2" Тогда
			ПоказателиСложение.Добавить("П000120012003");
			ПоказателиСложение.Добавить("П000120013003");
			ПоказателиСложение.Добавить("П000120014003");
			ПоказателиСложение.Добавить("П000120022003");
			ПоказателиСложение.Добавить("П000120023003");
			ПоказателиСложение.Добавить("П000120024003");
			
		ИначеЕсли ЭлементСтруктуры.Ключ = "Раздел1_3" Тогда
			ПоказателиСложение.Добавить("П000130004003_1");
			
		ИначеЕсли ЭлементСтруктуры.Ключ = "Лист02" Тогда
			ПоказателиСравнения.Добавить("П000200000100");
			
			ПоказателиСложение.Добавить("П000200001003");
			ПоказателиСложение.Добавить("П000200002003");
			ПоказателиСложение.Добавить("П000200003003");
			ПоказателиСложение.Добавить("П000200004003");
			ПоказателиСложение.Добавить("П000200005003");
			ПоказателиСложение.Добавить("П000200006003");
			ПоказателиСложение.Добавить("П000200007003");
			ПоказателиСложение.Добавить("П000200008003");
			ПоказателиСложение.Добавить("П000200009003");
			ПоказателиСложение.Добавить("П000200010003");
			ПоказателиСложение.Добавить("П000200011003");
			ПоказателиСложение.Добавить("П000200012003");
			ПоказателиСложение.Добавить("П000200013003");
			ПоказателиСложение.Добавить("П000200018003");
			ПоказателиСложение.Добавить("П000200019003");
			ПоказателиСложение.Добавить("П000200020003");
			ПоказателиСложение.Добавить("П000200021003");
			ПоказателиСложение.Добавить("П000200022003");
			ПоказателиСложение.Добавить("П000200023003");
			ПоказателиСложение.Добавить("П000200024003");
			ПоказателиСложение.Добавить("П000200025003");
			ПоказателиСложение.Добавить("П000200026003");
			ПоказателиСложение.Добавить("П000200027003");
			ПоказателиСложение.Добавить("П000200028003");
			ПоказателиСложение.Добавить("П000200029003");
			ПоказателиСложение.Добавить("П000200030003");
			ПоказателиСложение.Добавить("П000200031003");
			ПоказателиСложение.Добавить("П000200032003");
			ПоказателиСложение.Добавить("П000200033003");
			ПоказателиСложение.Добавить("П000200034003");
			
		ИначеЕсли ЭлементСтруктуры.Ключ = "Лист02_1" Тогда
			ПоказателиСравнения.Добавить("П000210000100");
			
			ПоказателиСложение.Добавить("П000210001003");
			ПоказателиСложение.Добавить("П000210001103");
			ПоказателиСложение.Добавить("П000210001203");
			ПоказателиСложение.Добавить("П000210001303");
			ПоказателиСложение.Добавить("П000210001403");
			ПоказателиСложение.Добавить("П000210002003");
			ПоказателиСложение.Добавить("П000210002103");
			ПоказателиСложение.Добавить("П000210002203");
			ПоказателиСложение.Добавить("П000210002303");
			ПоказателиСложение.Добавить("П000210002403");
			ПоказателиСложение.Добавить("П000210002703");
			ПоказателиСложение.Добавить("П000210003003");
			ПоказателиСложение.Добавить("П000210004003");
			ПоказателиСложение.Добавить("П000210010003");
			ПоказателиСложение.Добавить("П000210010103");
			ПоказателиСложение.Добавить("П000210010203");
			ПоказателиСложение.Добавить("П000210010303");
			ПоказателиСложение.Добавить("П000210010403");
			ПоказателиСложение.Добавить("П000210010503");
			ПоказателиСложение.Добавить("П000210010603");
			ПоказателиСложение.Добавить("П000210010703");
			
		ИначеЕсли ЭлементСтруктуры.Ключ = "Лист02_2" Тогда
			ПоказателиСравнения.Добавить("П000220000100");
			ПоказателиСравнения.Добавить("П000220040101");
			ПоказателиСравнения.Добавить("П000220040201");
			ПоказателиСравнения.Добавить("П000220040301");
			
			ПоказателиСложение.Добавить("П000220001003");
			ПоказателиСложение.Добавить("П000220002003");
			ПоказателиСложение.Добавить("П000220003003");
			ПоказателиСложение.Добавить("П000220004003");
			ПоказателиСложение.Добавить("П000220004103");
			ПоказателиСложение.Добавить("П000220004203");
			ПоказателиСложение.Добавить("П000220004303");
			ПоказателиСложение.Добавить("П000220004503");
			ПоказателиСложение.Добавить("П000220004603");
			ПоказателиСложение.Добавить("П000220004703");
			ПоказателиСложение.Добавить("П000220004803");
			ПоказателиСложение.Добавить("П000220004903");
			ПоказателиСложение.Добавить("П000220005003");
			ПоказателиСложение.Добавить("П000220005103");
			ПоказателиСложение.Добавить("П000220005203");
			ПоказателиСложение.Добавить("П000220005303");
			ПоказателиСложение.Добавить("П000220005403");
			ПоказателиСложение.Добавить("П000220005503");
			ПоказателиСложение.Добавить("П000220005903");
			ПоказателиСложение.Добавить("П000220006003");
			ПоказателиСложение.Добавить("П000220006103");
			ПоказателиСложение.Добавить("П000220007003");
			ПоказателиСложение.Добавить("П000220007103");
			ПоказателиСложение.Добавить("П000220007203");
			ПоказателиСложение.Добавить("П000220007303");
			ПоказателиСложение.Добавить("П000220008003");
			ПоказателиСложение.Добавить("П000220009003");
			ПоказателиСложение.Добавить("П000220010003");
			ПоказателиСложение.Добавить("П000220011003");
			ПоказателиСложение.Добавить("П000220012003");
			ПоказателиСложение.Добавить("П000220013003");
			ПоказателиСложение.Добавить("П000220013103");
			ПоказателиСложение.Добавить("П000220013203");
			ПоказателиСложение.Добавить("П000220013303");
			ПоказателиСложение.Добавить("П000220013403");
			ПоказателиСложение.Добавить("П000220020003");
			ПоказателиСложение.Добавить("П000220020103");
			ПоказателиСложение.Добавить("П000220020203");
			ПоказателиСложение.Добавить("П000220020303");
			ПоказателиСложение.Добавить("П000220020403");
			ПоказателиСложение.Добавить("П000220020503");
			ПоказателиСложение.Добавить("П000220020603");
			ПоказателиСложение.Добавить("П000220030003");
			ПоказателиСложение.Добавить("П000220030103");
			ПоказателиСложение.Добавить("П000220030203");
			ПоказателиСложение.Добавить("П000220040003");
			ПоказателиСложение.Добавить("П000220040103");
			ПоказателиСложение.Добавить("П000220040203");
			ПоказателиСложение.Добавить("П000220040303");
			
		ИначеЕсли ЭлементСтруктуры.Ключ = "Лист02_3" Тогда
			ПоказателиСравнения.Добавить("П000230000100");
			
			ПоказателиСложение.Добавить("П000230001003");
			ПоказателиСложение.Добавить("П000230002003");
			ПоказателиСложение.Добавить("П000230003003");
			ПоказателиСложение.Добавить("П000230004003");
			ПоказателиСложение.Добавить("П000230005003");
			ПоказателиСложение.Добавить("П000230006003");
			ПоказателиСложение.Добавить("П000230010003");
			ПоказателиСложение.Добавить("П000230011003");
			ПоказателиСложение.Добавить("П000230012003");
			ПоказателиСложение.Добавить("П000230013003");
			ПоказателиСложение.Добавить("П000230014003");
			ПоказателиСложение.Добавить("П000230015003");
			ПоказателиСложение.Добавить("П000230016003");
			ПоказателиСложение.Добавить("П000230017003");
			ПоказателиСложение.Добавить("П000230018003");
			ПоказателиСложение.Добавить("П000230019003");
			ПоказателиСложение.Добавить("П000230020003");
			ПоказателиСложение.Добавить("П000230020103");
			ПоказателиСложение.Добавить("П000230021003");
			ПоказателиСложение.Добавить("П000230021103");
			ПоказателиСложение.Добавить("П000230022003");
			ПоказателиСложение.Добавить("П000230022103");
			ПоказателиСложение.Добавить("П000230023003");
			ПоказателиСложение.Добавить("П000230024003");
			ПоказателиСложение.Добавить("П000230025003");
			ПоказателиСложение.Добавить("П000230026003");
			ПоказателиСложение.Добавить("П000230034003");
			ПоказателиСложение.Добавить("П000230035003");
			ПоказателиСложение.Добавить("П000230036003");
			
		ИначеЕсли ЭлементСтруктуры.Ключ = "Лист02_4" Тогда
			ПоказателиСравнения.Добавить("П000240000100");
			ПоказателиСравнения.Добавить("П000240004001");
			ПоказателиСравнения.Добавить("П000240005001");
			ПоказателиСравнения.Добавить("П000240006001");
			ПоказателиСравнения.Добавить("П000240007001");
			ПоказателиСравнения.Добавить("П000240008001");
			ПоказателиСравнения.Добавить("П000240009001");
			ПоказателиСравнения.Добавить("П000240010001");
			ПоказателиСравнения.Добавить("П000240011001");
			ПоказателиСравнения.Добавить("П000240012001");
			ПоказателиСравнения.Добавить("П000240013001");
			
			ПоказателиСложение.Добавить("П000240001003");
			ПоказателиСложение.Добавить("П000240004003");
			ПоказателиСложение.Добавить("П000240005003");
			ПоказателиСложение.Добавить("П000240006003");
			ПоказателиСложение.Добавить("П000240007003");
			ПоказателиСложение.Добавить("П000240008003");
			ПоказателиСложение.Добавить("П000240009003");
			ПоказателиСложение.Добавить("П000240010003");
			ПоказателиСложение.Добавить("П000240011003");
			ПоказателиСложение.Добавить("П000240012003");
			ПоказателиСложение.Добавить("П000240013003");
			ПоказателиСложение.Добавить("П000240013503");
			ПоказателиСложение.Добавить("П000240013603");
			ПоказателиСложение.Добавить("П000240014003");
			ПоказателиСложение.Добавить("П000240015003");
			ПоказателиСложение.Добавить("П000240015103");
			ПоказателиСложение.Добавить("П000240016003");
			ПоказателиСложение.Добавить("П000240016103");
			
		ИначеЕсли ЭлементСтруктуры.Ключ = "Лист02_5" Тогда
			ПоказателиСравнения.Добавить("П000250000100");
			
			ПоказателиСложение.Добавить("П000250003003");
			ПоказателиСложение.Добавить("П000250003103");
			ПоказателиСложение.Добавить("П000250005003");
			ПоказателиСложение.Добавить("П000250007003");
			ПоказателиСложение.Добавить("П000250008003");
			ПоказателиСложение.Добавить("П000250009003");
			ПоказателиСложение.Добавить("П000250010003");
			ПоказателиСложение.Добавить("П000250011003");
			ПоказателиСложение.Добавить("П000250012003");
			ПоказателиСложение.Добавить("П000250012103");
			
		ИначеЕсли ЭлементСтруктуры.Ключ = "Лист02_6" Тогда
			ПоказателиСложение.Добавить("П000260003003");
			ПоказателиСложение.Добавить("П000260003103");
			ПоказателиСложение.Добавить("П000260005003");
			ПоказателиСложение.Добавить("П000260005103");
			ПоказателиСложение.Добавить("П000260007003");
			ПоказателиСложение.Добавить("П000260008003");
			ПоказателиСложение.Добавить("П000260009003");
			ПоказателиСложение.Добавить("П000260010003");
			ПоказателиСложение.Добавить("П000260012003");
			ПоказателиСложение.Добавить("П000260012103");
			
		ИначеЕсли ЭлементСтруктуры.Ключ = "Лист02_6а" Тогда
			ПоказателиСравнения.Добавить("П000270000501");
			
			ПоказателиСложение.Добавить("П000270003003");
			ПоказателиСложение.Добавить("П000270003103");
			ПоказателиСложение.Добавить("П000270003203");
			ПоказателиСложение.Добавить("П000270005003");
			ПоказателиСложение.Добавить("П000270005103");
			ПоказателиСложение.Добавить("П000270007003");
			
		ИначеЕсли ЭлементСтруктуры.Ключ = "Лист03А" Тогда
			ПоказателиСравнения.Добавить("П000310000100");
			ПоказателиСравнения.Добавить("П000310000200");
			ПоказателиСравнения.Добавить("П000310000300");
			
			ПоказателиСложение.Добавить("П000310000103");
			ПоказателиСложение.Добавить("П000310001003");
			ПоказателиСложение.Добавить("П000310002003");
			ПоказателиСложение.Добавить("П000310002103");
			ПоказателиСложение.Добавить("П000310002203");
			ПоказателиСложение.Добавить("П000310002303");
			ПоказателиСложение.Добавить("П000310002403");
			ПоказателиСложение.Добавить("П000310003003");
			ПоказателиСложение.Добавить("П000310004003");
			ПоказателиСложение.Добавить("П000310005003");
			ПоказателиСложение.Добавить("П000310005103");
			ПоказателиСложение.Добавить("П000310005203");
			ПоказателиСложение.Добавить("П000310005303");
			ПоказателиСложение.Добавить("П000310005403");
			ПоказателиСложение.Добавить("П000310006003");
			ПоказателиСложение.Добавить("П000310007003");
			ПоказателиСложение.Добавить("П000310008003");
			ПоказателиСложение.Добавить("П000310008103");
			ПоказателиСложение.Добавить("П000310009003");
			ПоказателиСложение.Добавить("П000310009103");
			ПоказателиСложение.Добавить("П000310010003");
			ПоказателиСложение.Добавить("П000310011003");
			ПоказателиСложение.Добавить("П000310012003");
			
		ИначеЕсли ЭлементСтруктуры.Ключ = "Лист03Б" Тогда
			ПоказателиСравнения.Добавить("П000320000200");
			ПоказателиСравнения.Добавить("П000320002003");
			
			ПоказателиСложение.Добавить("П000320001003");
			ПоказателиСложение.Добавить("П000320003003");
			ПоказателиСложение.Добавить("П000320004003");
			ПоказателиСложение.Добавить("П000320005003");
			
		ИначеЕсли ЭлементСтруктуры.Ключ = "Лист04" Тогда
			ПоказателиСравнения.Добавить("П000400000200");
			ПоказателиСравнения.Добавить("П000400003003");
			
			ПоказателиСложение.Добавить("П000400001003");
			ПоказателиСложение.Добавить("П000400002003");
			ПоказателиСложение.Добавить("П000400004003");
			ПоказателиСложение.Добавить("П000400005003");
			ПоказателиСложение.Добавить("П000400006003");
			ПоказателиСложение.Добавить("П000400007003");
			ПоказателиСложение.Добавить("П000400008003");
			
		ИначеЕсли ЭлементСтруктуры.Ключ = "Лист05" Тогда
			ПоказателиСравнения.Добавить("П000500000200");
			
			ПоказателиСложение.Добавить("П000500001003");
			ПоказателиСложение.Добавить("П000500001103");
			ПоказателиСложение.Добавить("П000500001203");
			ПоказателиСложение.Добавить("П000500001303");
			ПоказателиСложение.Добавить("П000500001403");
			ПоказателиСложение.Добавить("П000500002003");
			ПоказателиСложение.Добавить("П000500002103");
			ПоказателиСложение.Добавить("П000500002203");
			ПоказателиСложение.Добавить("П000500002303");
			ПоказателиСложение.Добавить("П000500002403");
			ПоказателиСложение.Добавить("П000500004003");
			ПоказателиСложение.Добавить("П000500005003");
			ПоказателиСложение.Добавить("П000500006003");
			ПоказателиСложение.Добавить("П000500008003");
			ПоказателиСложение.Добавить("П000500010003");
			
		ИначеЕсли ЭлементСтруктуры.Ключ = "Приложение2" Тогда
			ПоказателиСравнения.Добавить("П000020000201");
			ПоказателиСравнения.Добавить("П000020000202");
			ПоказателиСравнения.Добавить("П000020001003");
			ПоказателиСравнения.Добавить("П000020004001_1");
			ПоказателиСравнения.Добавить("П000020004201_1");
			ПоказателиСравнения.Добавить("П000020004202_1");
			ПоказателиСравнения.Добавить("П000020004203_1");
			ПоказателиСравнения.Добавить("П000020004204_1");
			ПоказателиСравнения.Добавить("П000020004205_1");
			ПоказателиСравнения.Добавить("П000020005101_1");
			
			ПоказателиСложение.Добавить("П000020002003");
			ПоказателиСложение.Добавить("П000020002003");
			ПоказателиСложение.Добавить("П000020002103");
			ПоказателиСложение.Добавить("П000020002203");
			ПоказателиСложение.Добавить("П000020003003");
			ПоказателиСложение.Добавить("П000020003103");
			ПоказателиСложение.Добавить("П000020003203");
			ПоказателиСложение.Добавить("П000020003303");
			ПоказателиСложение.Добавить("П000020003403");
			ПоказателиСложение.Добавить("П000020004101_1");
			ПоказателиСложение.Добавить("П000020004301_1");
			ПоказателиСложение.Добавить("П000020004302_1");
			ПоказателиСложение.Добавить("П000020004303_1");
			ПоказателиСложение.Добавить("П000020004304_1");
			ПоказателиСложение.Добавить("П000020004305_1");
			ПоказателиСложение.Добавить("П000020005201_1");
			
		КонецЕсли;
		
		Если Не ПоказателиСложение.Количество() = 0 Тогда
			СложитьДобавить("Данные", ЭлементСтруктуры.Ключ, ПоказателиСравнения, ПоказателиСложение, СтруктураИсточник, СтруктураПриемник);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СложитьДобавить(ИмяСтруктурыДанных, ИмяРаздела, ПоказателиСравнения, ПоказателиСложение, СтруктураИсточник, СтруктураПриемник) //многостраничные

	РазделИсточник = СтруктураИсточник[ИмяРаздела];
	РазделПриемник = СтруктураПриемник[ИмяРаздела];
	
	Для каждого СтрокаИсточник Из РазделИсточник Цикл
		ДобавляемДанные = Ложь;
		ДанныеИсточника = СтрокаИсточник[ИмяСтруктурыДанных];
		Для каждого ЭлементСложения Из ПоказателиСложение Цикл
			Если ЗначениеЗаполнено(ДанныеИсточника[ЭлементСложения]) Тогда
				ДобавляемДанные = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		
		Если ДобавляемДанные Тогда
			КорректируемаяСтрокаПриемник = Неопределено;
			
			Если Не ПоказателиСравнения.Количество() = 0 Тогда
				Для каждого СтрокаПриемник Из РазделПриемник Цикл
					КорректируемаяСтрокаПриемник = СтрокаПриемник;
					ДанныеПриемника = СтрокаПриемник[ИмяСтруктурыДанных];
					
					Для каждого ЭлементСравнения Из ПоказателиСравнения Цикл
						Если Не ДанныеИсточника[ЭлементСравнения] = ДанныеПриемника[ЭлементСравнения] Тогда
							КорректируемаяСтрокаПриемник = Неопределено;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
			Иначе
				КорректируемаяСтрокаПриемник = РазделПриемник[0];
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(КорректируемаяСтрокаПриемник) Тогда
				ЗаполнитьЗначенияСвойств(РазделПриемник.Добавить(), СтрокаИсточник);
			Иначе
				
				ДанныеПриемника = КорректируемаяСтрокаПриемник[ИмяСтруктурыДанных];
				
				Для каждого ЭлементСложения Из ПоказателиСложение Цикл
					Если ЗначениеЗаполнено(ДанныеИсточника[ЭлементСложения]) Тогда
						ДанныеПриемника[ЭлементСложения] = ДанныеПриемника[ЭлементСложения] + ДанныеИсточника[ЭлементСложения];
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли; 
		
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеМногострочныхРазделов(СтруктураИсточник, СтруктураПриемник)

	Для каждого ЭлементСтруктуры Из СтруктураИсточник Цикл
		
		ЗначениеЭлемента = ЭлементСтруктуры.Значение;
		
		Если ТипЗнч(ЗначениеЭлемента) = Тип("ТаблицаЗначений") Тогда
			
			КолонкиТаблицы = ЗначениеЭлемента.Колонки;
			
			Для каждого СтрокаТаблицы Из ЗначениеЭлемента Цикл
				
				ДобавитьСтроку = Ложь;
				
				Для каждого КолонкаТаблицы Из КолонкиТаблицы Цикл
					Если ЗначениеЗаполнено(СтрокаТаблицы[КолонкаТаблицы.Имя]) Тогда
						ДобавитьСтроку = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			    Если ДобавитьСтроку Тогда
					Если СтруктураПриемник.Свойство(ЭлементСтруктуры.Ключ) Тогда
						ЭлементСтруктурыПриемник = СтруктураПриемник[ЭлементСтруктуры.Ключ];
					Иначе
						СтруктураПриемник.Вставить(ЭлементСтруктуры.Ключ, ЗначениеЭлемента);
						Прервать;
					КонецЕсли;
					
					Если Не ТипЗнч(ЭлементСтруктурыПриемник.Значение) = Тип("ТаблицаЗначений") Тогда
						Продолжить;
					КонецЕсли; 
					
					ЗаполнитьЗначенияСвойств(ЭлементСтруктурыПриемник.Значение.Добавить(),СтрокаТаблицы);
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПоказателиОтчета(СтруктураИсточник, СтруктураПриемник)
	
	Для каждого ЭлементСтруктуры Из СтруктураИсточник Цикл
		
		Если ЭлементСтруктуры.Ключ = "ПолеТабличногоДокументаТитульный" Тогда
			Продолжить;
		Иначе	
			ЗначениеЭлемента = ЭлементСтруктуры.Значение;
			
			Если ТипЗнч(ЗначениеЭлемента) = Тип("Структура") Тогда
				ЗагружаемДанные = Ложь;
				
				Для каждого ЭлементПодчиненнойСтруктуры Из ЗначениеЭлемента Цикл
					Если ЗначениеЗаполнено(ЭлементПодчиненнойСтруктуры.Значение) Тогда
						ЗагружаемДанные = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если ЗагружаемДанные Тогда
					
					Если СтруктураПриемник.Свойство(ЭлементСтруктуры.Ключ) Тогда
						ЭлементСтруктурыПриемник = СтруктураПриемник[ЭлементСтруктуры.Ключ];
					Иначе
						СтруктураПриемник.Вставить(ЭлементСтруктуры.Ключ, ЗначениеЭлемента);
						Прервать;
					КонецЕсли;
					
					Если Не ТипЗнч(ЭлементСтруктурыПриемник.Значение) = Тип("Структура") Тогда
						Продолжить;
					КонецЕсли; 
					
					ЗначениеЭлементаПриемник = ЭлементСтруктурыПриемник.Значение;
					
					Для каждого ЭлементПодчиненнойСтруктуры Из ЗначениеЭлемента Цикл
					    НомерСимвола_ = СтрНайти(ЭлементПодчиненнойСтруктуры.Ключ, "_");
						Если Не НомерСимвола_ = 0 Тогда
							Продолжить;
						Иначе
							Если ЗначениеЭлементаПриемник.Свойство(ЭлементПодчиненнойСтруктуры.Ключ) Тогда
								Если ТипЗнч(ЭлементПодчиненнойСтруктуры.Значение) = Тип("Число")
									и ТипЗнч(ЗначениеЭлементаПриемник[ЭлементПодчиненнойСтруктуры].Значение) = Тип("Число") Тогда
								
									ЗначениеЭлементаПриемник[ЭлементПодчиненнойСтруктуры].Значение = ЗначениеЭлементаПриемник[ЭлементПодчиненнойСтруктуры].Значение + ЭлементПодчиненнойСтруктуры.Значение;
								
								КонецЕсли;
							Иначе
								 ЗначениеЭлементаПриемник.Вставить(ЭлементПодчиненнойСтруктуры.Ключ, ЭлементПодчиненнойСтруктуры.Значение);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	
	ЕстьОшибки = Ложь;
	СформироватьТаблицуПроверок();
	
	Если ТаблицаПроверок.Количество() = 0 Тогда
		Текст = Нстр("ru = 'Необходимо заполнить список деклараций!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "Объект.Декларации");
		ЕстьОшибки = Истина;
	Иначе
		
		ПустыеСтроки = ТаблицаПроверок.НайтиСтроки(Новый Структура("ДекларацияНеВыбрана", 1));
		Для каждого ПустаяСтрока Из ПустыеСтроки Цикл
			Текст = Нстр("ru = 'Не указана декларация!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "Объект.Декларации["+ПустаяСтрока.ИсходныйНомерСтроки+"].Декларация");
			ЕстьОшибки = Истина;
		КонецЦикла;
		
		Если ТаблицаПроверок.Итог("ЭтоГоловнаяОрганизация") = 0 Тогда
			Текст = Нстр("ru = 'Нет деклараций по головной организации!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "Объект.Декларации");
			ЕстьОшибки = Истина;
		ИначеЕсли ТаблицаПроверок.Итог("ЭтоГоловнаяОрганизация") > 1 Тогда
			СтрокиГоловныхОрганизаций = ТаблицаПроверок.НайтиСтроки(Новый Структура("ЭтоГоловнаяОрганизация", 1));
			
			ТекстСтрокОшибок = "";
			Для каждого СтрокаГО Из СтрокиГоловныхОрганизаций Цикл
				ТекстСтрокОшибок = ТекстСтрокОшибок + ?(ЗначениеЗаполнено(ТекстСтрокОшибок), ", ", "") + Строка(СтрокаГО.ИсходныйНомерСтроки+1);
			КонецЦикла; 
			Текст = Нстр("ru = 'В строках: " + ТекстСтрокОшибок + " указаны головные организации. Строка головной организации должна быть одна!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "Объект.Декларации");
			ЕстьОшибки = Истина;
			
		Иначе
			СтрокаГО = ТаблицаПроверок.НайтиСтроки(Новый Структура("ЭтоГоловнаяОрганизация", 1))[0];
			Объект.Декларации[СтрокаГО.ИсходныйНомерСтроки].ОсновнаяДекларация = Истина;
		КонецЕсли;
		
		СтрокиОГО = ТаблицаПроверок.НайтиСтроки(Новый Структура("ОтличаетсяГоловнаяОрганизация", 1));
		Для каждого СтрокаОГО Из СтрокиОГО Цикл
			Текст = Нстр("ru = 'Отличается головная организация!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "Объект.Декларации["+СтрокаОГО.ИсходныйНомерСтроки+"].Декларация");
			ЕстьОшибки = Истина;
		КонецЦикла;
		
		СтрокиПовтор = ТаблицаПроверок.НайтиСтроки(Новый Структура("ДекларацияПовторяется", 1));
		Для каждого СтрокаПовтор Из СтрокиПовтор Цикл
			Текст = Нстр("ru = 'Повтор декларации!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "Объект.Декларации["+СтрокаПовтор.ИсходныйНомерСтроки+"].Декларация");
			ЕстьОшибки = Истина;
		КонецЦикла;
		
		СтрокиОтличие = ТаблицаПроверок.НайтиСтроки(Новый Структура("ОтличающиесяДекларации", 1));
		Для каждого СтрокаОтличие Из СтрокиОтличие Цикл
			Текст = Нстр("ru = 'В декларации необходимо проверить период и вид отчета!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "Объект.Декларации["+СтрокаОтличие.ИсходныйНомерСтроки+"].Декларация");
			ЕстьОшибки = Истина;
		КонецЦикла;
	КонецЕсли; 
	
	
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьНаСервере();
КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицуПроверок()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Декларации", Объект.Декларации.Выгрузить());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Декларации.Декларация КАК Документ.РегламентированныйОтчет) КАК Декларация,
	|	ВЫРАЗИТЬ(Декларации.НомерСтроки - 1 КАК ЧИСЛО(10, 0)) КАК ИсходныйНомерСтроки
	|ПОМЕСТИТЬ ВТДекларации
	|ИЗ
	|	&Декларации КАК Декларации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДекларации.ИсходныйНомерСтроки,
	|	ВТДекларации.Декларация.Организация КАК Организация,
	|	ВТДекларации.Декларация
	|ПОМЕСТИТЬ ВТДекларацииГоловныхОрганизаций
	|ИЗ
	|	ВТДекларации КАК ВТДекларации
	|ГДЕ
	|	ВТДекларации.Декларация.Организация.ГоловнаяОрганизация = ВТДекларации.Декларация.Организация
	|	И НЕ ВТДекларации.Декларация = ЗНАЧЕНИЕ(Документ.РегламентированныйОтчет.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДекларации.ИсходныйНомерСтроки
	|ПОМЕСТИТЬ ВТОтличаютсяГоловныеОрганизации
	|ИЗ
	|	ВТДекларации КАК ВТДекларации
	|ГДЕ
	|	НЕ ВТДекларации.Декларация.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И НЕ ВТДекларации.Декларация.Организация.ГоловнаяОрганизация В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ВТДекларацииГоловныхОрганизаций.Организация
	|				ИЗ
	|					ВТДекларацииГоловныхОрганизаций КАК ВТДекларацииГоловныхОрганизаций)
	|	И НЕ ВТДекларации.Декларация = ЗНАЧЕНИЕ(Документ.РегламентированныйОтчет.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДекларации.ИсходныйНомерСтроки
	|ПОМЕСТИТЬ ВТПовторяющиесяДекларации
	|ИЗ
	|	ВТДекларации КАК ВТДекларации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДекларации КАК ВТДекларации1
	|		ПО ВТДекларации.Декларация = ВТДекларации1.Декларация
	|			И ВТДекларации.ИсходныйНомерСтроки <> ВТДекларации1.ИсходныйНомерСтроки
	|			И (НЕ ВТДекларации.Декларация = ЗНАЧЕНИЕ(Документ.РегламентированныйОтчет.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДекларации.ИсходныйНомерСтроки
	|ПОМЕСТИТЬ ВТРазныеДекларации
	|ИЗ
	|	ВТДекларацииГоловныхОрганизаций КАК ВТДекларацииГоловныхОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДекларации КАК ВТДекларации
	|		ПО ВТДекларацииГоловныхОрганизаций.Организация = ВТДекларации.Декларация.Организация.ГоловнаяОрганизация
	|			И (НЕ ВТДекларацииГоловныхОрганизаций.Декларация.ДатаНачала = ВТДекларации.Декларация.ДатаНачала
	|				ИЛИ НЕ ВТДекларацииГоловныхОрганизаций.Декларация.ДатаОкончания = ВТДекларации.Декларация.ДатаОкончания
	|				ИЛИ НЕ ПОДСТРОКА(ВТДекларацииГоловныхОрганизаций.Декларация.ВыбраннаяФорма, 1, 100) = ПОДСТРОКА(ВТДекларации.Декларация.ВыбраннаяФорма, 1, 100)
	|				ИЛИ НЕ ВТДекларацииГоловныхОрганизаций.Декларация.НаименованиеОтчета = ВТДекларации.Декларация.НаименованиеОтчета)
	|			И ВТДекларацииГоловныхОрганизаций.ИсходныйНомерСтроки <> ВТДекларации.ИсходныйНомерСтроки
	|			И (НЕ ВТДекларации.Декларация = ЗНАЧЕНИЕ(Документ.РегламентированныйОтчет.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДекларации.Декларация,
	|	ВТДекларации.ИсходныйНомерСтроки,
	|	ВЫБОР
	|		КОГДА ВТДекларации.Декларация = ЗНАЧЕНИЕ(Документ.РегламентированныйОтчет.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДекларацияНеВыбрана,
	|	ВЫБОР
	|		КОГДА НЕ ВТДекларацииГоловныхОрганизаций.ИсходныйНомерСтроки ЕСТЬ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЭтоГоловнаяОрганизация,
	|	ВЫБОР
	|		КОГДА НЕ ВТОтличаютсяГоловныеОрганизации.ИсходныйНомерСтроки ЕСТЬ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОтличаетсяГоловнаяОрганизация,
	|	ВЫБОР
	|		КОГДА НЕ ВТПовторяющиесяДекларации.ИсходныйНомерСтроки ЕСТЬ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДекларацияПовторяется,
	|	ВЫБОР
	|		КОГДА НЕ ВТРазныеДекларации.ИсходныйНомерСтроки ЕСТЬ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОтличающиесяДекларации
	|ИЗ
	|	ВТДекларации КАК ВТДекларации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДекларацииГоловныхОрганизаций КАК ВТДекларацииГоловныхОрганизаций
	|		ПО ВТДекларации.ИсходныйНомерСтроки = ВТДекларацииГоловныхОрганизаций.ИсходныйНомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтличаютсяГоловныеОрганизации КАК ВТОтличаютсяГоловныеОрганизации
	|		ПО ВТДекларации.ИсходныйНомерСтроки = ВТОтличаютсяГоловныеОрганизации.ИсходныйНомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПовторяющиесяДекларации КАК ВТПовторяющиесяДекларации
	|		ПО ВТДекларации.ИсходныйНомерСтроки = ВТПовторяющиесяДекларации.ИсходныйНомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРазныеДекларации КАК ВТРазныеДекларации
	|		ПО ВТДекларации.ИсходныйНомерСтроки = ВТРазныеДекларации.ИсходныйНомерСтроки";
	
	ТаблицаПроверок.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ДекларацииДекларацияПриИзменении(Элемент)
	СтрокаТЧ = Элементы.Декларации.ТекущиеДанные;
	СтрокаТЧ.ОсновнаяДекларация = Ложь;
КонецПроцедуры
