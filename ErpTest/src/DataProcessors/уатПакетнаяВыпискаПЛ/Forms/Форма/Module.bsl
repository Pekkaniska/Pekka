
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура ИнициализацияКомпоновщика()
	СхемаКомпоновкиДанных = РеквизитФормыВЗначение("Объект").ПолучитьМакет("КомпоновкаДанных");
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	КомпоновщикДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	КомпоновщикДанных.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	НастройкиПорядка = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.уатПакетнаяВыпискаПЛ.Форма.ОсновнаяФорма", "уатПакетнаяВыпискаПЛ_НастройкиКомпоновщика_Порядок");
	Если НастройкиПорядка = Неопределено 
		ИЛИ ТипЗнч(НастройкиПорядка) <> Тип("ХранилищеЗначения") 
		ИЛИ НастройкиПорядка.Получить() = Неопределено Тогда 
		
		// сортировка по-умолчанию по времени выезда
		ПорядокПоНомеру = КомпоновщикДанных.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПорядокПоНомеру.Использование = Истина;
		ПорядокПоНомеру.Поле = Новый ПолеКомпоновкиДанных("ДатаВыезда");
		ПорядокПоНомеру.РежимОтображения  = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
		ПорядокПоНомеру.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		// сортировка по-умолчанию по номеру ТС
		ПорядокПоНомеру = КомпоновщикДанных.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПорядокПоНомеру.Использование = Истина;
		Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ПредставлениеТСКакГосНомер) = Истина Тогда
			ПорядокПоНомеру.Поле = Новый ПолеКомпоновкиДанных("ГосНомер");
		Иначе
			ПорядокПоНомеру.Поле = Новый ПолеКомпоновкиДанных("ГарНомер");
		КонецЕсли;
		ПорядокПоНомеру.РежимОтображения  = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
		ПорядокПоНомеру.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
	Иначе 
		Для Каждого ТекПорядок Из НастройкиПорядка.Получить().Элементы Цикл 
			НовыйПорядок = КомпоновщикДанных.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовыйПорядок, ТекПорядок);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	УстановитьПривилегированныйРежим(Истина);
	
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.уатПакетнаяВыпискаПЛ.Форма.ОсновнаяФорма",
		"уатПакетнаяВыпискаПЛ_НастройкиКомпоновщика_Порядок",
		Новый ХранилищеЗначения(КомпоновщикДанных.Настройки.Порядок));
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ОтображатьДопИнфо", Элементы.ФормаПоказатьДопИнформацию.Пометка);
	
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.уатПакетнаяВыпискаПЛ.Форма.ОсновнаяФорма", "ОбщиеНастройки", СтруктураНастроек);
	
КонецПроцедуры

&НаКлиенте
Функция СтруктураСтроки(ТекСтрока)
	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("ПризнакВыбора");
	СтруктураСтроки.Вставить("НомерСтроки");
	СтруктураСтроки.Вставить("ЗанятостьТС");
	СтруктураСтроки.Вставить("ДанныеИзменены");
	СтруктураСтроки.Вставить("МаршрутныйЛист");
	СтруктураСтроки.Вставить("ЗаказНаТС");
	СтруктураСтроки.Вставить("ТС");
	СтруктураСтроки.Вставить("ПЛ");
	СтруктураСтроки.Вставить("ПЛЗакрыт");
	СтруктураСтроки.Вставить("РежимРаботыТС");
	СтруктураСтроки.Вставить("Прицеп1");
	СтруктураСтроки.Вставить("Прицеп2");
	СтруктураСтроки.Вставить("Водитель");
	СтруктураСтроки.Вставить("Водитель2");
	СтруктураСтроки.Вставить("ДатаВыезда");
	СтруктураСтроки.Вставить("ДатаВозвращения");
	СтруктураСтроки.Вставить("Груз1");
	СтруктураСтроки.Вставить("Груз2");
	СтруктураСтроки.Вставить("ВесБрутто1");
	СтруктураСтроки.Вставить("ВесБрутто2");
	СтруктураСтроки.Вставить("Объем1");
	СтруктураСтроки.Вставить("Объем2");
	СтруктураСтроки.Вставить("Контрагент");
	СтруктураСтроки.Вставить("Контрагент2");
	СтруктураСтроки.Вставить("Подразделение");
	СтруктураСтроки.Вставить("Подразделение2");
	СтруктураСтроки.Вставить("АдресПрибытия");
	СтруктураСтроки.Вставить("АдресПрибытия2");
	СтруктураСтроки.Вставить("АдресУбытия1");
	СтруктураСтроки.Вставить("АдресУбытия2");
	СтруктураСтроки.Вставить("ВремяПрибытия");
	СтруктураСтроки.Вставить("ВремяПрибытия2");
	СтруктураСтроки.Вставить("ВремяУбытия");
	СтруктураСтроки.Вставить("ВремяУбытия2");
	СтруктураСтроки.Вставить("Кондуктор");
	СтруктураСтроки.Вставить("Кондуктор2");
	СтруктураСтроки.Вставить("Маршрут1");
	СтруктураСтроки.Вставить("Маршрут2");
	
	ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекСтрока);
	Возврат СтруктураСтроки;
КонецФункции

&НаКлиенте
Процедура СформироватьПодготовку()
	СформироватьПодготовкуСервер();
КонецПроцедуры

&НаСервере
Процедура СформироватьПодготовкуСервер()
	Подготовка.Очистить();
	
	ВремяВыездаПЛ_УчПолитика = (уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ВремяВыездаПЛ));
	ВремяВозращенияПЛ_УчПолитика = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ВремяВозращенияПЛ);
	
	НастройкиКомпоновки = КомпоновщикДанных.ПолучитьНастройки();
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	
	//установка параметров
	Если Объект.ЗаполнятьПоДокументам И Объект.ТипЗаполнения = 0 Тогда //Разнарядки
		ТипЗаполнения = 1;
	ИначеЕсли Объект.ЗаполнятьПоДокументам И Объект.ТипЗаполнения = 1 Тогда //МЛ
		ТипЗаполнения = 2;
	ИначеЕсли Объект.ЗаполнятьПоДокументам И Объект.ТипЗаполнения = 2 Тогда //Заказы ТС
		ТипЗаполнения = 3;
	Иначе //все ТС
		ТипЗаполнения = 0;
	КонецЕсли;
	СхемаКомпоновкиДанных.Параметры.ТипЗаполнения.Значение = ТипЗаполнения;
	СхемаКомпоновкиДанных.Параметры.ДатаНач.Значение = НачалоДня(Объект.ДатаФормирования);
	СхемаКомпоновкиДанных.Параметры.ДатаКон.Значение = КонецДня(Объект.ДатаФормирования);
	СхемаКомпоновкиДанных.Параметры.Организация.Значение = Объект.Организация;
	СхемаКомпоновкиДанных.Параметры.Колонна.Значение = ?(ЗначениеЗаполнено(Объект.Колонна), Объект.Колонна, Неопределено);
	СхемаКомпоновкиДанных.Параметры.Подразделение.Значение = ?(ЗначениеЗаполнено(Объект.Подразделение), Объект.Подразделение, Неопределено);
	СхемаКомпоновкиДанных.Параметры.Гараж.Значение = ?(ЗначениеЗаполнено(Объект.Гараж), Объект.Гараж, Неопределено);
	СхемаКомпоновкиДанных.Параметры.Модель.Значение = ?(ЗначениеЗаполнено(Объект.МодельТС), Объект.МодельТС, Неопределено);
	СхемаКомпоновкиДанных.Параметры.СписокПрицепов.Значение = уатОбщегоНазначения.уатСписокВидовТСПрицепов();
	
	//выполнение запроса с помощью компоновщика
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	тблЗапрос = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(тблЗапрос);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	тблПодготовка = Подготовка.Выгрузить();
	тблПодготовка.Колонки.Добавить("ГосНомер");
	тблПодготовка.Колонки.Добавить("ГарНомер");
	Для Каждого ТекСтрока Из тблЗапрос Цикл
		НоваяСтрока = тблПодготовка.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
				
	тСостояние = "";
	Если ТипЗаполнения = 1 Тогда // Если берем данные из разнарядки
		Для каждого ТекСтрока Из тблПодготовка Цикл
			Если ЗначениеЗаполнено(ТекСтрока.ПЛ) Тогда
				ТекСтрока.Прицеп1 = "";
				ТекСтрока.Прицеп2 = "";
				Если ТекСтрока.ПЛ.Прицепы.Количество() > 0 Тогда
					ТекСтрока.Прицеп1 = ТекСтрока.ПЛ.Прицепы[0].ТС;
				КонецЕсли;	
				Если ТекСтрока.ПЛ.Прицепы.Количество() > 1 Тогда
					ТекСтрока.Прицеп2 = ТекСтрока.ПЛ.Прицепы[1].ТС;
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Объект.ЗаполнятьПоДокументам И Объект.ТипЗаполнения = 1 Тогда // Если берем данные из маршрутного листа
		//отбор по плановому времени выполнения
		мсвСтрокиУдаления = Новый Массив;
		Для Каждого ТекСтрока Из тблПодготовка Цикл
			ПлановоеВремяМЛ = Документы.уатМаршрутныйЛист.ПолучитьВремяОтправленияПлан(ТекСтрока.МаршрутныйЛист);
			Если ЗначениеЗаполнено(ПлановоеВремяМЛ) Тогда
				Если НачалоДня(ПлановоеВремяМЛ) <> НачалоДня(Объект.ДатаФормирования) Тогда
					мсвСтрокиУдаления.Добавить(ТекСтрока);
				КонецЕсли;
			ИначеЕсли НачалоДня(ТекСтрока.МаршрутныйЛист.Дата) <> НачалоДня(Объект.ДатаФормирования) Тогда
				 мсвСтрокиУдаления.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ТекСтрокаУдалить Из мсвСтрокиУдаления Цикл
			тблПодготовка.Удалить(ТекСтрокаУдалить);
		КонецЦикла;
		
		Для каждого ТекСтрока из тблПодготовка Цикл
			Если ЗначениеЗаполнено(ТекСтрока.ПЛ) Тогда
				// Заполняем прицепы по умолчанию
				тСч = 0;
				СоставТС = уатОбщегоНазначения.уатСоставТС(ТекСтрока.ТС);
				Для Каждого ТекПрицеп из СоставТС Цикл
					тСч = тСч + 1;
					Если тСч = 1 Тогда 
						ТекСтрока.Прицеп1 = ТекПрицеп;
					ИначеЕсли тСч = 2 Тогда
						ТекСтрока.Прицеп2 = ТекПрицеп;
					Иначе	
						Прервать; 
					КонецЕсли;
				КонецЦикла;	
				
				//заполняем водителей
				СтруктураЭкипаж = уатЗащищенныеФункцииСервер.ЭкипажТСсУчетомГрафика(ТекСтрока.ТС, ТекСтрока.ДатаВыезда, Объект.Организация);
				ТекСтрока.Водитель = СтруктураЭкипаж.Водитель;
				ТекСтрока.Водитель2 = СтруктураЭкипаж.Водитель2;
				
			Иначе
				ТекСтрока.Прицеп1 = "";
				ТекСтрока.Прицеп2 = "";
				Если ТекСтрока.ПЛ.Прицепы.Количество() > 0 Тогда
					ТекСтрока.Прицеп1 = ТекСтрока.ПЛ.Прицепы[0].ТС;
				КонецЕсли;	
				Если ТекСтрока.ПЛ.Прицепы.Количество() > 1 Тогда
					ТекСтрока.Прицеп2 = ТекСтрока.ПЛ.Прицепы[1].ТС;
				КонецЕсли;	
				
				//заполняем грузы
				Если ЗначениеЗаполнено(ТекСтрока.МаршрутныйЛист) Тогда
					тблГруз = ТекСтрока.МаршрутныйЛист.Заказы;
					счСтрокПогр = 1;
					счСтрокРазгр = 1;
					Для Каждого ТекСтрокаЗаказыМЛ Из ТекСтрока.МаршрутныйЛист.Заказы Цикл
						Если ТекСтрокаЗаказыМЛ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда
							Если ЗначениеЗаполнено(ТекСтрокаЗаказыМЛ.ЗаказГрузоотправителя) Тогда
								Если счСтрокПогр = 1 Тогда
									ТекСтрока.Контрагент = ТекСтрокаЗаказыМЛ.ЗаказГрузоотправителя.Контрагент;
								ИначеЕсли счСтрокПогр = 2 Тогда
									ТекСтрока.Контрагент2 = ТекСтрокаЗаказыМЛ.ЗаказГрузоотправителя.Контрагент;
								КонецЕсли;
							КонецЕсли;
							Если ЗначениеЗаполнено(ТекСтрокаЗаказыМЛ.Номенклатура) Тогда
								Если счСтрокПогр = 1 Тогда
									ТекСтрока.Груз1 = ТекСтрокаЗаказыМЛ.Номенклатура;
									ТекСтрока.ВесБрутто1 = ТекСтрокаЗаказыМЛ.ВесБрутто/1000;
									ТекСтрока.Объем1 = ТекСтрокаЗаказыМЛ.Объем;
								ИначеЕсли счСтрокПогр = 2 Тогда
									ТекСтрока.Груз2 = ТекСтрокаЗаказыМЛ.Номенклатура;
									ТекСтрока.ВесБрутто2 = ТекСтрокаЗаказыМЛ.ВесБрутто/1000;
									ТекСтрока.Объем2 = ТекСтрокаЗаказыМЛ.Объем;
								КонецЕсли;
							КонецЕсли;
							
							Если счСтрокПогр = 1 Тогда
								ТекСтрока.АдресПрибытия = ТекСтрокаЗаказыМЛ.Пункт;
								//ТекСтрока.ВремяПрибытия = ТекСтрокаЗаказыМЛ.ПрибытиеФакт;
								//ТекСтрока.ВремяУбытия = ТекСтрокаЗаказыМЛ.УбытиеФакт;
								ТекСтрока.ВремяПрибытия = ТекСтрокаЗаказыМЛ.УбытиеФакт;
							ИначеЕсли счСтрокПогр = 2 Тогда
								ТекСтрока.АдресПрибытия2 = ТекСтрокаЗаказыМЛ.Пункт;
								//ТекСтрока.ВремяПрибытия2 = ТекСтрокаЗаказыМЛ.ПрибытиеФакт;
								//ТекСтрока.ВремяУбытия2 = ТекСтрокаЗаказыМЛ.УбытиеФакт;
								ТекСтрока.ВремяПрибытия2 = ТекСтрокаЗаказыМЛ.УбытиеФакт;
							КонецЕсли;
							
							счСтрокПогр = счСтрокПогр + 1;
						Иначе
							Если счСтрокРазгр = 1 Тогда
								ТекСтрока.АдресУбытия1 = ТекСтрокаЗаказыМЛ.Пункт;
								//ТекСтрока.ВремяПрибытия = ТекСтрокаЗаказыМЛ.ПрибытиеФакт;
								//ТекСтрока.ВремяУбытия = ТекСтрокаЗаказыМЛ.УбытиеФакт;
								ТекСтрока.ВремяУбытия = ТекСтрокаЗаказыМЛ.ПрибытиеФакт;
							ИначеЕсли счСтрокРазгр = 2 Тогда
								ТекСтрока.АдресУбытия2 = ТекСтрокаЗаказыМЛ.Пункт;
								//ТекСтрока.ВремяПрибытия2 = ТекСтрокаЗаказыМЛ.ПрибытиеФакт;
								//ТекСтрока.ВремяУбытия2 = ТекСтрокаЗаказыМЛ.УбытиеФакт;
								ТекСтрока.ВремяУбытия2 = ТекСтрокаЗаказыМЛ.ПрибытиеФакт;
							КонецЕсли;
							
							счСтрокРазгр = счСтрокРазгр + 1;
						КонецЕсли;
						
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекСтрока.РежимРаботыТС) Тогда
				ТекСтрока.ДатаВыезда = НачалоДня(Объект.ДатаФормирования) + (ТекСтрока.РежимРаботыТС.НачалоРаботы - НачалоДня(ТекСтрока.РежимРаботыТС.НачалоРаботы));
				ТекСтрока.ДатаВозвращения = НачалоДня(Объект.ДатаФормирования) + (ТекСтрока.РежимРаботыТС.КонецРаботы - НачалоДня(ТекСтрока.РежимРаботыТС.КонецРаботы));
			Иначе
				ПлановоеВремяВыездаМЛ = Документы.уатМаршрутныйЛист.ПолучитьВремяОтправленияПлан(ТекСтрока.МаршрутныйЛист);
				ПлановоеВремяВозвратаМЛ = Документы.уатМаршрутныйЛист.ПолучитьВремяВозвратаПлан(ТекСтрока.МаршрутныйЛист);
				Если ЗначениеЗаполнено(ПлановоеВремяВыездаМЛ) И ЗначениеЗаполнено(ПлановоеВремяВозвратаМЛ) Тогда
					ТекСтрока.ДатаВыезда = ПлановоеВремяВыездаМЛ;
					ТекСтрока.ДатаВозвращения = ПлановоеВремяВозвратаМЛ;
				Иначе
					ТекСтрока.ДатаВыезда = НачалоДня(Объект.ДатаФормирования) + (ВремяВыездаПЛ_УчПолитика - '00010101');
					ТекСтрока.ДатаВозвращения = НачалоДня(Объект.ДатаФормирования) + (ВремяВозращенияПЛ_УчПолитика - '00010101');
				КонецЕсли;
			КонецЕсли;	
			Если ТекСтрока.ДатаВозвращения <= ТекСтрока.ДатаВыезда Тогда
				ТекСтрока.ДатаВозвращения = НачалоДня(Объект.ДатаФормирования) + 86400 + (ТекСтрока.ДатаВозвращения - НачалоДня(ТекСтрока.ДатаВозвращения));
			КонецЕсли;	
			
		КонецЦикла;
		
	ИначеЕсли Объект.ЗаполнятьПоДокументам И Объект.ТипЗаполнения = 2 Тогда // Если берем данные из заказа на ТС
		ПредЗаказНаТС = Неопределено;
		Для Каждого ТекСтрока ИЗ тблПодготовка Цикл
			Если ПредЗаказНаТС = ТекСтрока.ЗаказНаТС Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекСтрока.ПЛ) Тогда
				ПутевойЛистПрицепы = ТекСтрока.ПЛ.Прицепы;
				Если ПутевойЛистПрицепы.Количество() > 0 Тогда
					ТекСтрока.Прицеп1 = ПутевойЛистПрицепы[0].ТС;
				КонецЕсли;
				Если ПутевойЛистПрицепы.Количество() > 1 Тогда
					ТекСтрока.Прицеп2 = ПутевойЛистПрицепы[1].ТС;
				КонецЕсли;
				ПутевойЛистЗадание = ТекСтрока.ПЛ.Задание;
				Если ПутевойЛистЗадание.Количество() > 0 Тогда
					ТекСтрока.Контрагент = ПутевойЛистЗадание[0].Контрагент;
					ТекСтрока.Подразделение = ПутевойЛистЗадание[0].Подразделение;
					ТекСтрока.Груз1 = ПутевойЛистЗадание[0].Номенклатура;
					ТекСтрока.АдресПрибытия = ПутевойЛистЗадание[0].АдресПрибытия;
					ТекСтрока.АдресУбытия1 = ПутевойЛистЗадание[0].АдресУбытия;
					ТекСтрока.ВремяПрибытия = ПутевойЛистЗадание[0].ВремяПрибытия;
					ТекСтрока.ВремяУбытия = ПутевойЛистЗадание[0].ВремяУбытия;
				КонецЕсли;
				Если ПутевойЛистЗадание.Количество() > 1 Тогда
					ТекСтрока.Контрагент2 = ПутевойЛистЗадание[1].Контрагент;
					ТекСтрока.Подразделение2 = ПутевойЛистЗадание[1].Подразделение;
					ТекСтрока.Груз2 = ПутевойЛистЗадание[1].Номенклатура;
					ТекСтрока.АдресПрибытия2 = ПутевойЛистЗадание[1].АдресПрибытия;
					ТекСтрока.АдресУбытия2 = ПутевойЛистЗадание[1].АдресУбытия;
					ТекСтрока.ВремяПрибытия2 = ПутевойЛистЗадание[1].ВремяПрибытия;
					ТекСтрока.ВремяУбытия2 = ПутевойЛистЗадание[1].ВремяУбытия;
				КонецЕсли;
				ТекСтрока.ДатаВыезда = ТекСтрока.ДатаВыезда;
				ТекСтрока.ДатаВозвращения = ТекСтрока.ДатаВозвращения;
				
			Иначе
				ТекСтрока.АдресПрибытия = ТекСтрока.АдресПрибытия;
				ТекСтрока.АдресУбытия1 = ТекСтрока.АдресУбытия1;
				
				ТекСтрока.ДатаВыезда = Объект.ДатаФормирования + (ВремяВыездаПЛ_УчПолитика - '00010101');
				ТекСтрока.ДатаВозвращения = Объект.ДатаФормирования + (ВремяВозращенияПЛ_УчПолитика - '00010101');
				
				//для ночных смен
				Если ТекСтрока.ДатаВыезда > ТекСтрока.ДатаВозвращения Тогда
					ТекСтрока.ДатаВозвращения = Объект.ДатаФормирования + 86400 + (ТекСтрока.ДатаВозвращения - НачалоДня(ТекСтрока.ДатаВозвращения));
				КонецЕсли;
				
				ТекСтрока.ВремяПрибытия = ТекСтрока.ДатаВыезда;
				ТекСтрока.ВремяУбытия = ТекСтрока.ДатаВозвращения;
				
				Если ЗначениеЗаполнено(ТекСтрока.Контрагент) Тогда
					Если ТипЗнч(ТекСтрока.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
						ТекСтрока.Контрагент = ТекСтрока.Контрагент;
					Иначе
						ТекСтрока.Подразделение = ТекСтрока.Контрагент;
					КонецЕсли;
				КонецЕсли;
				
				Заказы = ТекСтрока.ЗаказНаТС.Товары;
				Если Заказы.Количество() > 0 Тогда
					ТекСтрока.Груз1 = Заказы[0].Номенклатура;
					ТекСтрока.ВесБрутто1 = Заказы[0].ВесБрутто;
					ТекСтрока.Объем1 = Заказы[0].Объем;
					Если Заказы.Количество() > 1 Тогда
						ТекСтрока.Груз2 = Заказы[1].Номенклатура;
						ТекСтрока.ВесБрутто2 = Заказы[1].ВесБрутто;
						ТекСтрока.Объем2 = Заказы[1].Объем;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ПредЗаказНаТС = ТекСтрока.ЗаказНаТС;
		КонецЦикла;
				
	Иначе // Если формируем данные без учета документов
		Для каждого ТекСтрока из тблПодготовка Цикл
			Если НЕ ЗначениеЗаполнено(ТекСтрока.ПЛ) Тогда
				// Заполняем прицепы по умолчанию
				тСч = 0;
				СоставТС = уатОбщегоНазначения.уатСоставТС(ТекСтрока.ТС);
				Для Каждого ТекПрицеп из СоставТС Цикл
					тСч = тСч + 1;
					Если тСч = 1 Тогда 
						ТекСтрока.Прицеп1 = ТекПрицеп;
					ИначеЕсли тСч = 2 Тогда
						ТекСтрока.Прицеп2 = ТекПрицеп;
					Иначе	
						Прервать; 
					КонецЕсли;
				КонецЦикла;	
				
				Если ЗначениеЗаполнено(ТекСтрока.РежимРаботыТС) Тогда
					ТекСтрока.ДатаВыезда = Объект.ДатаФормирования + (ТекСтрока.РежимРаботыТС.НачалоРаботы - НачалоДня(ТекСтрока.РежимРаботыТС.НачалоРаботы));
					ТекСтрока.ДатаВозвращения = Объект.ДатаФормирования + (ТекСтрока.РежимРаботыТС.КонецРаботы - НачалоДня(ТекСтрока.РежимРаботыТС.КонецРаботы));
				Иначе	
					ТекСтрока.ДатаВыезда = Объект.ДатаФормирования + (ВремяВыездаПЛ_УчПолитика - '00010101');
					ТекСтрока.ДатаВозвращения = Объект.ДатаФормирования + (ВремяВозращенияПЛ_УчПолитика - '00010101');
				КонецЕсли;
				
				//для ночных смен
				Если ТекСтрока.РежимРаботыТС.НачалоРаботы > ТекСтрока.РежимРаботыТС.КонецРаботы Тогда
					ТекСтрока.ДатаВозвращения = Объект.ДатаФормирования + 86400 + (ТекСтрока.ДатаВозвращения - НачалоДня(ТекСтрока.ДатаВозвращения));
				КонецЕсли;
				
				//заполняем водителей
				СтруктураЭкипаж = уатЗащищенныеФункцииСервер.ЭкипажТСсУчетомГрафика(ТекСтрока.ТС, ТекСтрока.ДатаВыезда, Объект.Организация);
				ТекСтрока.Водитель = СтруктураЭкипаж.Водитель;
				ТекСтрока.Водитель2 = СтруктураЭкипаж.Водитель2;
			Иначе
				ТекСтрока.Прицеп1 = "";
				ТекСтрока.Прицеп2 = "";
				Если ТекСтрока.ПЛ.Прицепы.Количество() > 0 Тогда
					ТекСтрока.Прицеп1 = ТекСтрока.ПЛ.Прицепы[0].ТС;
				КонецЕсли;	
				Если ТекСтрока.ПЛ.Прицепы.Количество() > 1 Тогда
					ТекСтрока.Прицеп2 = ТекСтрока.ПЛ.Прицепы[1].ТС;
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Подготовка.Загрузить(тблПодготовка);
	
	//нумеруем строки и формируем представление документов
	Сч = 1;
	Для Каждого ТекСтрока Из Подготовка Цикл
		Если ЗначениеЗаполнено(ТекСтрока.МаршрутныйЛист) Тогда
			ТекСтрока.МЛПредставление = "№" + ТекСтрока.МаршрутныйЛист.Номер + " от " + Формат(ТекСтрока.МаршрутныйЛист.Дата, "ДФ=dd.MM.yyyy");
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрока.ЗаказНаТС) Тогда
			ТекСтрока.ЗаказПредставление = "№" + ТекСтрока.ЗаказНаТС.Номер + " от " + Формат(ТекСтрока.ЗаказНаТС.Дата, "ДФ=dd.MM.yyyy");
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрока.ПЛ) Тогда
			ТекСтрока.ПЛПредставление = "№" + ТекСтрока.ПЛ.Номер + " от " + Формат(ТекСтрока.ПЛ.Дата, "ДФ=dd.MM.yyyy");
		КонецЕсли;
		
		ТекСтрока.НомерСтроки = Сч;
		Сч = Сч + 1;
	КонецЦикла;
	
	//дописываем статусы
	ОбновитьСтатусыЗанятостиСервер();
	ОбновитьНомерТСвТЧ();
	ОбновитьНомерПрицепа1вТЧ();
	ОбновитьНомерПрицепа2вТЧ();
	
	ТекущийЭлемент = Элементы.Подготовка;
КонецПроцедуры

&НаКлиенте
Функция СформироватьПЛ(ТекСтрока, СообщениеПредыдущийПЛ = "")
	Возврат СформироватьПЛСервер(СтруктураСтроки(ТекСтрока), СообщениеПредыдущийПЛ);
КонецФункции

&НаСервере
Функция ПолучитьПризнакНачисленияЗППЛ(мСотрудник, мОрганизация)
	
	Возврат Истина;
	
КонецФункции // ПолучитьПризнакНачисленияЗППЛ()

&НаСервере
Функция СформироватьПЛСервер(ТекСтрока, СообщениеПредыдущийПЛ = "")
	докПЛ = Документы.уатПутевойЛист.СоздатьДокумент();
	
	докПЛ.ТранспортноеСредство = ТекСтрока.ТС;
	докПЛ.ВидПЛ = ТекСтрока.ТС.уатОсновнойВидПЛ;
	
	докПЛ.Дата = НачалоДня(Объект.ДатаФормирования) + (ТекСтрока.ДатаВыезда - НачалоДня(ТекСтрока.ДатаВыезда));
	докПЛ.ДатаВыезда = уатОбщегоНазначения.уатДатаБезСекунд(докПЛ.Дата);
	докПЛ.ДатаВозвращения = уатОбщегоНазначения.уатДатаБезСекунд(ТекСтрока.ДатаВозвращения);
	докПЛ.ДатаЗакрытия = докПЛ.ДатаВозвращения-1;
	докПЛ.Организация = Объект.Организация;
	
	СтруктураОбъектовНастроек = Новый Структура;
	СтруктураОбъектовНастроек.Вставить("Организация", докПЛ.Организация);
	СтруктураОбъектовНастроек.Вставить("Подразделение", уатОбщегоНазначения.МестонахождениеТС(докПЛ.ТранспортноеСредство).Подразделение);
	СтруктураОбъектовНастроек.Вставить("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
	
	Если НЕ ЗначениеЗаполнено(докПЛ.ВидПЛ) Тогда
		докПЛ.ВидПЛ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойВидПЛ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(докПЛ.Подразделение) Тогда
		докПЛ.Подразделение = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(СтруктураОбъектовНастроек.Пользователь,"ОсновноеПодразделениеОрганизации");
	КонецЕсли;

	ПодразделениеТС = СтруктураОбъектовНастроек.Подразделение;
	Если ЗначениеЗаполнено(ПодразделениеТС) И докПЛ.Подразделение <> ПодразделениеТС Тогда
		докПЛ.Подразделение = ПодразделениеТС;
	КонецЕсли;
	
	докПЛ.РежимРасчетаВыработки = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойРежимРасчетаВыработкиПЛ);
	
	докПЛ.ОсмотрелВрач    = ?(НЕ ЗначениеЗаполнено(Объект.ОсмотрелВрач), уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойВрач), Объект.ОсмотрелВрач);
	докПЛ.ВыдалДиспетчер  = ?(НЕ ЗначениеЗаполнено(Объект.ВыдалДиспетчер), уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойДиспетчер), Объект.ВыдалДиспетчер);
	докПЛ.ВыпустилМеханик = ?(НЕ ЗначениеЗаполнено(Объект.ВыпустилМеханик), уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойМеханик), Объект.ВыпустилМеханик);
	докПЛ.ПринялДиспетчер = ?(НЕ ЗначениеЗаполнено(Объект.ПринялДиспетчер), уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойДиспетчер), Объект.ПринялДиспетчер);
	докПЛ.ПринялМеханик   = ?(НЕ ЗначениеЗаполнено(Объект.ПринялМеханик), уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойМеханик), Объект.ПринялМеханик);
	
	докПЛ.РасчетФактРасходаГСМ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.РасчетФактРасходаГСМ);
	
	уатОбщегоНазначения.УстановитьОграничениеТипаСотрудников(докПЛ);
	
	докПЛ.НачислятьЗПВодителю1 = ПолучитьПризнакНачисленияЗППЛ(ТекСтрока.Водитель,  Объект.Организация);
	докПЛ.НачислятьЗПВодителю2 = ПолучитьПризнакНачисленияЗППЛ(ТекСтрока.Водитель2, Объект.Организация);
	
	уатОбщегоНазначенияТиповые.ЗаполнитьШапкуДокумента(докПЛ, ПользователиКлиентСервер.ТекущийПользователь());
	
	тСоставТС = Новый Массив;
	Если ЗначениеЗаполнено(ТекСтрока.Прицеп1) Тогда
		тСоставТС.Добавить(ТекСтрока.Прицеп1);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекСтрока.Прицеп2) Тогда
		тСоставТС.Добавить(ТекСтрока.Прицеп2);
	КонецЕсли;
	
	докПЛ.ИнициализацияДанныхАвтомобиля(,тСоставТС);
	докПЛ.Водитель1  = ТекСтрока.Водитель;
	докПЛ.Водитель2  = ТекСтрока.Водитель2;
	Если ЗначениеЗаполнено(ТекСтрока.Кондуктор) Тогда
		докПЛ.Сотрудник1 = ТекСтрока.Кондуктор;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекСтрока.Кондуктор2) Тогда
		докПЛ.Сотрудник2 = ТекСтрока.Кондуктор2;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(докПЛ.Сотрудник1) Тогда
		докПЛ.НачислятьЗПСотруднику1 = ПолучитьПризнакНачисленияЗППЛ(докПЛ.Сотрудник1,  Объект.Организация);
	Иначе 
		докПЛ.НачислятьЗПСотруднику1 = Ложь;
	КонецЕсли;
	Если ЗначениеЗаполнено(докПЛ.Сотрудник2) Тогда
		докПЛ.НачислятьЗПСотруднику2 = ПолучитьПризнакНачисленияЗППЛ(докПЛ.Сотрудник2,  Объект.Организация);
	Иначе
		докПЛ.НачислятьЗПСотруднику2 = Ложь;
	КонецЕсли;
	докПЛ.Температура = Объект.Температура;
	докПЛ.РежимРаботыТС = ТекСтрока.РежимРаботыТС;
	Если Объект.ЗаполнятьПоДокументам И Объект.ТипЗаполнения = 2 Тогда
		докПЛ.ДокументОснование = ТекСтрока.ЗаказНаТС;
	ИначеЕсли Объект.ЗаполнятьПоДокументам И Объект.ТипЗаполнения = 1 Тогда
		докПЛ.ДокументОснование = ТекСтрока.МаршрутныйЛист;
	КонецЕсли;
	
	Если Объект.ЗаполнятьПоДокументам И Объект.ТипЗаполнения = 1 Тогда
		ДокПЛ.Заполнить(ТекСтрока.МаршрутныйЛист);
		
		Если ЗначениеЗаполнено(ТекСтрока.Контрагент) Или ЗначениеЗаполнено(ТекСтрока.Груз1) Или ЗначениеЗаполнено(ТекСтрока.Маршрут1)
				Или ЗначениеЗаполнено(ТекСтрока.АдресПрибытия) Или ЗначениеЗаполнено(ТекСтрока.АдресУбытия1)
				Или ЗначениеЗаполнено(ТекСтрока.ВремяПрибытия) Или ЗначениеЗаполнено(ТекСтрока.ВремяУбытия) Тогда
			Если докПЛ.Задание.Количество() = 0 Тогда
				НоваяСтрокаЗадание = докПЛ.Задание.Добавить();
			Иначе
				НоваяСтрокаЗадание = докПЛ.Задание[0];
			КонецЕсли;
			НоваяСтрокаЗадание.Контрагент     = ТекСтрока.Контрагент;
			НоваяСтрокаЗадание.Номенклатура   = ТекСтрока.Груз1;
			НоваяСтрокаЗадание.КоличествоТонн = ТекСтрока.ВесБрутто1;
			НоваяСтрокаЗадание.Объем          = ТекСтрока.Объем1;
			НоваяСтрокаЗадание.Маршрут        = ТекСтрока.Маршрут1;
			НоваяСтрокаЗадание.АдресПрибытия  = ТекСтрока.АдресПрибытия;
			НоваяСтрокаЗадание.АдресУбытия    = ТекСтрока.АдресУбытия1;
			НоваяСтрокаЗадание.ВремяПрибытия  = ТекСтрока.ВремяПрибытия;
			НоваяСтрокаЗадание.ВремяУбытия    = ТекСтрока.ВремяУбытия;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекСтрока.Контрагент2) Или ЗначениеЗаполнено(ТекСтрока.Груз2) Или ЗначениеЗаполнено(ТекСтрока.Маршрут2) 
				Или ЗначениеЗаполнено(ТекСтрока.АдресПрибытия2) Или ЗначениеЗаполнено(ТекСтрока.АдресУбытия2)
				Или ЗначениеЗаполнено(ТекСтрока.ВремяПрибытия2) Или ЗначениеЗаполнено(ТекСтрока.ВремяУбытия2) Тогда
			Если докПЛ.Задание.Количество() <= 1 Тогда
				НоваяСтрокаЗадание = докПЛ.Задание.Добавить();
			Иначе
				НоваяСтрокаЗадание = докПЛ.Задание[1];
			КонецЕсли;
			НоваяСтрокаЗадание.Контрагент     = ТекСтрока.Контрагент2;
			НоваяСтрокаЗадание.Номенклатура   = ТекСтрока.Груз2;
			НоваяСтрокаЗадание.КоличествоТонн = ТекСтрока.ВесБрутто2;
			НоваяСтрокаЗадание.Объем          = ТекСтрока.Объем2;
			НоваяСтрокаЗадание.Маршрут        = ТекСтрока.Маршрут2;
			НоваяСтрокаЗадание.АдресПрибытия  = ТекСтрока.АдресПрибытия2;
			НоваяСтрокаЗадание.АдресУбытия    = ТекСтрока.АдресУбытия2;
			НоваяСтрокаЗадание.ВремяПрибытия  = ТекСтрока.ВремяПрибытия2;
			НоваяСтрокаЗадание.ВремяУбытия    = ТекСтрока.ВремяУбытия2;
		КонецЕсли;
		
	ИначеЕсли Объект.КопироватьЗаданияСПредыдущегоПЛ И НЕ (Объект.ЗаполнятьПоДокументам И Объект.ТипЗаполнения <> 0) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	уатПутевойЛист.Дата КАК Дата,
		|	уатПутевойЛист.Ссылка
		|ИЗ
		|	Документ.уатПутевойЛист КАК уатПутевойЛист
		|ГДЕ
		|	уатПутевойЛист.Дата < &Дата
		|	И уатПутевойЛист.Проведен = ИСТИНА
		|	И уатПутевойЛист.ТранспортноеСредство = &ТС
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
		Запрос.УстановитьПараметр("Дата", ДокПЛ.Дата);
		Запрос.УстановитьПараметр("ТС", ДокПЛ.ТранспортноеСредство);
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			ПредДок = Результат.Ссылка.ПолучитьОбъект();
			ТабЗначений = ПредДок.Задание.Выгрузить();
			ДокПЛ.Задание.Загрузить(ТабЗначений);
		КонецЕсли;
		
	Иначе
		// Первая Строка
		новСтр = докПЛ.Задание.Добавить();
		новСтр.Контрагент = ТекСтрока.Контрагент;
		новСтр.Подразделение   = ТекСтрока.Подразделение;
		новСтр.Маршрут         = ТекСтрока.Маршрут1;
		новСтр.АдресПрибытия   = ТекСтрока.АдресПрибытия;
		новСтр.ВремяПрибытия   = ТекСтрока.ВремяПрибытия;
		новСтр.ВремяУбытия     = ТекСтрока.ВремяУбытия;
		новСтр.КоличествоЕздок = 1;
		новСтр.Номенклатура    = ТекСтрока.Груз1;
		новСтр.КоличествоТонн  = ТекСтрока.ВесБрутто1;
		новСтр.Объем           = ТекСтрока.Объем1;
		новСтр.АдресУбытия     = ТекСтрока.АдресУбытия1;
		
		// ВтораяСтрока
		Если ЗначениеЗаполнено(ТекСтрока.Контрагент2) Или ЗначениеЗаполнено(ТекСтрока.Подразделение2) Или ЗначениеЗаполнено(ТекСтрока.Груз2) Тогда
			новСтр = докПЛ.Задание.Добавить();
			новСтр.Контрагент      = ТекСтрока.Контрагент2;
			новСтр.Подразделение   = ТекСтрока.Подразделение2;
			новСтр.Маршрут         = ТекСтрока.Маршрут2;
			новСтр.АдресПрибытия   = ТекСтрока.АдресПрибытия2;
			новСтр.ВремяПрибытия   = ТекСтрока.ВремяПрибытия2;
			новСтр.ВремяУбытия     = ТекСтрока.ВремяУбытия2;
			новСтр.КоличествоЕздок = 1;
			новСтр.Номенклатура    = ТекСтрока.Груз2;
			новСтр.КоличествоТонн  = ТекСтрока.ВесБрутто2;
			новСтр.Объем           = ТекСтрока.Объем2;
			новСтр.АдресУбытия     = ТекСтрока.АдресУбытия2;
		КонецЕсли;
	КонецЕсли;
	
	Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(докПЛ.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ВестиУчетЗатрат) Тогда
		Если Не уатОбщегоНазначения.уатНайтиПланЗатрат(докПЛ.ПланЗатрат, докПЛ.Организация, докПЛ.ТранспортноеСредство, докПЛ.ТранспортноеСредство.уатКолонна) Тогда 
			Сообщить("Не найден план затрат (ТС """ + уатОбщегоНазначения.уатПредставлениеТС(докПЛ.ТранспортноеСредство, докПЛ.Организация)
				+ """, колонна """ + докПЛ.ТранспортноеСредство.уатКолонна + """)");
		КонецЕсли;
	КонецЕсли;
	
	СтруктураОбъектовНастроек = Новый Структура;
	СтруктураОбъектовНастроек.Вставить("Организация",   Объект.Организация);
	СтруктураОбъектовНастроек.Вставить("Подразделение", Объект.Подразделение);
	
	мСрокДействияПутевогоЛиста = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.СрокДействияПутевогоЛиста"));
	мСрокДействияПутевогоЛиста = ?(мСрокДействияПутевогоЛиста <> Неопределено, мСрокДействияПутевогоЛиста, 0);
	
	докПЛ.ДействителенДо = КонецДня(докПЛ.Дата + мСрокДействияПутевогоЛиста * 3600 * 24 + 1);
	
	//сброс начальных показаний спидометра, если предыдущий ПЛ не рассчитан
	ПредПЛ_номер = Неопределено;
	ПредПЛ_дата = Неопределено;
	Если уатОбщегоНазначения.ПредыдущийПЛНеРассчитан(докПЛ.ТранспортноеСредство, докПЛ.ДатаВыезда, ПредПЛ_номер, ПредПЛ_дата, докПЛ.Ссылка) Тогда
		докПЛ.СпидометрВыезда = 0;
		Для Каждого ТекСтрокаРасходГСМ Из докПЛ.РасходГСМ Цикл
			Если ТекСтрокаРасходГСМ.ТС = докПЛ.ТранспортноеСредство Тогда
				ТекСтрокаРасходГСМ.ОстатокПриВыезде = 0;
				ТекСтрокаРасходГСМ.РасходПоФакту = ТекСтрокаРасходГСМ.ОстатокПриВыезде - ТекСтрокаРасходГСМ.ОстатокПриВозвращении
					+ ТекСтрокаРасходГСМ.Выдано - ТекСтрокаРасходГСМ.Сдано;
			КонецЕсли;
		КонецЦикла;
		
		СообщениеПредыдущийПЛ = СообщениеПредыдущийПЛ + ", " + ТекСтрока.НомерСтроки;
	КонецЕсли;
	
	Попытка
		докПЛ.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
	КонецПопытки;
	
	Возврат докПЛ.Ссылка;
КонецФункции

&НаКлиенте
Функция ЕстьИзмененияПЛ(ТекСтрока)
	Возврат	ЕстьИзмененияПЛСервер(СтруктураСтроки(ТекСтрока));
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьИзмененияПЛСервер(ТекСтрока)
	ПЛ = ТекСтрока.ПЛ;
	Рез = ЛОЖЬ;
	Рез = Рез ИЛИ (ПЛ.Водитель1 <> ТекСтрока.Водитель);
	Рез = Рез ИЛИ (ПЛ.Водитель2 <> ТекСтрока.Водитель2);
	Рез = Рез ИЛИ (ПЛ.РежимРаботыТС <> ТекСтрока.РежимРаботыТС);
	Рез = Рез ИЛИ (ПЛ.ДатаВыезда <> ТекСтрока.ДатаВыезда);
	Рез = Рез ИЛИ (ПЛ.ДатаВозвращения <> ТекСтрока.ДатаВозвращения);
	Если ПЛ.Прицепы.Количество() = 0 И (ТекСтрока.Прицеп1 <> Неопределено ИЛИ ТекСтрока.Прицеп2 <> Неопределено) Тогда
		Рез = ИСТИНА;
	ИначеЕсли ПЛ.Прицепы.Количество() > 0 И
		(ЗначениеЗаполнено(ТекСтрока.Прицеп1) И ПЛ.Прицепы.Найти(ТекСтрока.Прицеп1, "ТС") = Неопределено ИЛИ 
		ЗначениеЗаполнено(ТекСтрока.Прицеп2) И ПЛ.Прицепы.Найти(ТекСтрока.Прицеп2, "ТС") = Неопределено) Тогда
		
		Рез = ИСТИНА;
	КонецЕсли;
	
	Если ПЛ.Задание.Количество() = 0 Тогда
		Если ЗначениеЗаполнено(ТекСтрока.Контрагент) ИЛИ ЗначениеЗаполнено(ТекСтрока.Подразделение)
			ИЛИ ЗначениеЗаполнено(ТекСтрока.АдресПрибытия) ИЛИ ТекСтрока.ВремяПрибытия <> '00010101'
			ИЛИ ТекСтрока.ВремяУбытия <> '00010101' Тогда
			
			Рез = ИСТИНА;
		КонецЕсли;
		
	ИначеЕсли ПЛ.Задание.Количество() = 1 Тогда
		Если ЗначениеЗаполнено(ТекСтрока.Контрагент2) ИЛИ ЗначениеЗаполнено(ТекСтрока.Подразделение2)
			ИЛИ ЗначениеЗаполнено(ТекСтрока.АдресПрибытия2) ИЛИ ТекСтрока.ВремяПрибытия2 <> '00010101'
			ИЛИ ТекСтрока.ВремяУбытия2 <> '00010101'
			ИЛИ ТекСтрока.Контрагент <> ПЛ.Задание[0].Контрагент ИЛИ ТекСтрока.Подразделение <> ПЛ.Задание[0].Подразделение
			ИЛИ ТекСтрока.АдресПрибытия <> ПЛ.Задание[0].АдресПрибытия
			ИЛИ ТекСтрока.ВремяПрибытия <> ('00010101' + (ПЛ.Задание[0].ВремяПрибытия - НачалоДня(ПЛ.Задание[0].ВремяПрибытия)))
			ИЛИ ТекСтрока.ВремяУбытия <> ('00010101' + (ПЛ.Задание[0].ВремяУбытия - НачалоДня(ПЛ.Задание[0].ВремяУбытия))) Тогда
			
			Рез = ИСТИНА;
		КонецЕсли;
		
	Иначе
		Если ТекСтрока.Контрагент2 <> ПЛ.Задание[1].Контрагент ИЛИ ТекСтрока.Подразделение2 <> ПЛ.Задание[1].Подразделение
			ИЛИ ТекСтрока.АдресПрибытия2 <> ПЛ.Задание[1].АдресПрибытия
			ИЛИ ТекСтрока.ВремяПрибытия2 <> ('00010101' + (ПЛ.Задание[1].ВремяПрибытия - НачалоДня(ПЛ.Задание[1].ВремяПрибытия)))
			ИЛИ ТекСтрока.ВремяУбытия2 <> ('00010101' + (ПЛ.Задание[1].ВремяУбытия - НачалоДня(ПЛ.Задание[1].ВремяУбытия))) Тогда
			
			Рез = ИСТИНА;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

&НаСервере
Процедура ОбновитьСтатусыЗанятостиСервер(ТекСтрокаНомер = Неопределено)
	уатОбщегоНазначения.ОбновитьСтатусыЗанятости(Подготовка, Объект.ДатаФормирования, Объект.Организация, ТекСтрокаНомер);
КонецПроцедуры

&НаСервере
Процедура ВидимостьТипаЗаполнения()
	Элементы.ГруппаТипЗаполненияСтраницы.ТекущаяСтраница = ?(Объект.ЗаполнятьПоДокументам,
		Элементы.ГруппаТипЗаполненияСтраницыДоступно, Элементы.ГруппаТипЗаполненияСтраницыНедоступно);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗначенияОтветственных()
	СтруктураОбъектовНастроек = Новый Структура;
	СтруктураОбъектовНастроек.Вставить("Организация", Объект.Организация);
	СтруктураОбъектовНастроек.Вставить("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
	
	ОсмотрелВрач_ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ОсновнойВрач"));
	Если ЗначениеЗаполнено(ОсмотрелВрач_) Тогда
		Объект.ОсмотрелВрач = ОсмотрелВрач_;
	Иначе
		Объект.ОсмотрелВрач = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	КонецЕсли;
	ВыдалДиспетчер_ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ОсновнойДиспетчер"));
	Если ЗначениеЗаполнено(ВыдалДиспетчер_) Тогда
		Объект.ВыдалДиспетчер = ВыдалДиспетчер_;
	Иначе
		Объект.ВыдалДиспетчер = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	КонецЕсли;
	ВыпустилМеханик_ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ОсновнойМеханик"));
	Если ЗначениеЗаполнено(ВыпустилМеханик_) Тогда
		Объект.ВыпустилМеханик = ВыпустилМеханик_;
	Иначе
		Объект.ВыпустилМеханик = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	КонецЕсли;
	ПринялДиспетчер_ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ОсновнойДиспетчер"));
	Если ЗначениеЗаполнено(ПринялДиспетчер_) Тогда
		Объект.ПринялДиспетчер = ПринялДиспетчер_;
	Иначе
		Объект.ПринялДиспетчер = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	КонецЕсли;
	ПринялМеханик_ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ОсновнойМеханик"));
	Если ЗначениеЗаполнено(ПринялМеханик_) Тогда
		Объект.ПринялМеханик = ПринялМеханик_;
	Иначе
		Объект.ПринялМеханик = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВидимостьПриКопированииСПредПЛ()
	Если НЕ Объект.ЗаполнятьПоДокументам ИЛИ Объект.ТипЗаполнения = 0 Тогда
		Элементы.ПодготовкаКонтрагент.Видимость = НЕ Объект.КопироватьЗаданияСПредыдущегоПЛ;
		Элементы.ПодготовкаКонтрагент2.Видимость = НЕ Объект.КопироватьЗаданияСПредыдущегоПЛ;
		Элементы.ПодготовкаПодразделение.Видимость = НЕ Объект.КопироватьЗаданияСПредыдущегоПЛ;
		Элементы.ПодготовкаПодразделение2.Видимость = НЕ Объект.КопироватьЗаданияСПредыдущегоПЛ;
		Элементы.ПодготовкаАдресПрибытия.Видимость = НЕ Объект.КопироватьЗаданияСПредыдущегоПЛ;
		Элементы.ПодготовкаАдресПрибытия2.Видимость = НЕ Объект.КопироватьЗаданияСПредыдущегоПЛ;
		Элементы.ПодготовкаВремяПрибытия.Видимость = НЕ Объект.КопироватьЗаданияСПредыдущегоПЛ;
		Элементы.ПодготовкаВремяПрибытия2.Видимость = НЕ Объект.КопироватьЗаданияСПредыдущегоПЛ;
		Элементы.ПодготовкаВремяУбытия.Видимость = НЕ Объект.КопироватьЗаданияСПредыдущегоПЛ;
		Элементы.ПодготовкаВремяУбытия2.Видимость = НЕ Объект.КопироватьЗаданияСПредыдущегоПЛ;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВидимостьКолонокПоДокументам()
	Элементы.КопироватьЗаданияСПредыдущегоПЛ.Доступность = (НЕ Объект.ЗаполнятьПоДокументам) ИЛИ Объект.ТипЗаполнения = 0;
	Элементы.ПодготовкаМаршрутныйЛист.Видимость = Объект.ЗаполнятьПоДокументам И Объект.ТипЗаполнения = 1;
	Элементы.ПодготовкаЗаказНаТС.Видимость = Объект.ЗаполнятьПоДокументам И Объект.ТипЗаполнения = 2;
	//Элементы.ПодготовкаКонтрагент.Видимость = НЕ Объект.ЗаполнятьПоДокументам ИЛИ Объект.ТипЗаполнения = 0 ИЛИ Объект.ТипЗаполнения = 2;
	//Элементы.ПодготовкаКонтрагент2.Видимость = НЕ Объект.ЗаполнятьПоДокументам ИЛИ Объект.ТипЗаполнения = 0 ИЛИ Объект.ТипЗаполнения = 2;
	Элементы.ПодготовкаПодразделение.Видимость = НЕ Объект.ЗаполнятьПоДокументам ИЛИ Объект.ТипЗаполнения = 0 ИЛИ Объект.ТипЗаполнения = 2;
	Элементы.ПодготовкаПодразделение2.Видимость = НЕ Объект.ЗаполнятьПоДокументам ИЛИ Объект.ТипЗаполнения = 0 ИЛИ Объект.ТипЗаполнения = 2;
	//Элементы.ПодготовкаАдресПрибытия.Видимость = НЕ Объект.ЗаполнятьПоДокументам ИЛИ Объект.ТипЗаполнения = 0 ИЛИ Объект.ТипЗаполнения = 2;
	//Элементы.ПодготовкаАдресПрибытия2.Видимость = НЕ Объект.ЗаполнятьПоДокументам ИЛИ Объект.ТипЗаполнения = 0 ИЛИ Объект.ТипЗаполнения = 2;
	//Элементы.ПодготовкаВремяПрибытия.Видимость = НЕ Объект.ЗаполнятьПоДокументам ИЛИ Объект.ТипЗаполнения = 0 ИЛИ Объект.ТипЗаполнения = 2;
	//Элементы.ПодготовкаВремяПрибытия2.Видимость = НЕ Объект.ЗаполнятьПоДокументам ИЛИ Объект.ТипЗаполнения = 0 ИЛИ Объект.ТипЗаполнения = 2;
	//Элементы.ПодготовкаВремяУбытия.Видимость = НЕ Объект.ЗаполнятьПоДокументам ИЛИ Объект.ТипЗаполнения = 0 ИЛИ Объект.ТипЗаполнения = 2;
	//Элементы.ПодготовкаВремяУбытия2.Видимость = НЕ Объект.ЗаполнятьПоДокументам ИЛИ Объект.ТипЗаполнения = 0 ИЛИ Объект.ТипЗаполнения = 2;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФорму()
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Сообщить("Не выбрана организация!");
		Возврат;
	КонецЕсли;
	СформироватьПодготовку();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВодителей(ТекСтрока)
	//заполняем водителей
	СтруктураЭкипаж = уатЗащищенныеФункцииСервер.ЭкипажТСсУчетомГрафика(ТекСтрока.ТС, ТекСтрока.ДатаВыезда, Объект.Организация);
	ТекСтрока.Водитель = СтруктураЭкипаж.Водитель;
	ТекСтрока.Водитель2 = СтруктураЭкипаж.Водитель2;
КонецПроцедуры

&НаСервере
Процедура ОбновитьНомерТСвТЧ(Знач ТекСтрока = Неопределено)
	Если ТекСтрока <> Неопределено Тогда
		ТекСтрока = Подготовка.НайтиПоИдентификатору(ТекСтрока);
	КонецЕсли;
	
	Если ТекСтрока = Неопределено Тогда
		Для Каждого ТекСтрокаТЧ Из Подготовка Цикл
			ТекСтрокаТЧ.НомерТС = уатОбщегоНазначения.уатПредставлениеТС(ТекСтрокаТЧ.ТС, Объект.Организация);
		КонецЦикла;
	Иначе
		ТекСтрока.НомерТС = уатОбщегоНазначения.уатПредставлениеТС(ТекСтрока.ТС, Объект.Организация);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьНомерПрицепа1вТЧ(Знач ТекСтрока = Неопределено)
	Если ТекСтрока <> Неопределено Тогда
		ТекСтрока = Подготовка.НайтиПоИдентификатору(ТекСтрока);
	КонецЕсли;
	
	Если ТекСтрока = Неопределено Тогда
		Для Каждого ТекСтрокаТЧ Из Подготовка Цикл
			ТекСтрокаТЧ.НомерПрицепа1 = уатОбщегоНазначения.уатПредставлениеТС(ТекСтрокаТЧ.Прицеп1, Объект.Организация);
		КонецЦикла;
	Иначе
		ТекСтрока.НомерПрицепа1 = уатОбщегоНазначения.уатПредставлениеТС(ТекСтрока.Прицеп1, Объект.Организация);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьНомерПрицепа2вТЧ(Знач ТекСтрока = Неопределено)
	Если ТекСтрока <> Неопределено Тогда
		ТекСтрока = Подготовка.НайтиПоИдентификатору(ТекСтрока);
	КонецЕсли;
	
	Если ТекСтрока = Неопределено Тогда
		Для Каждого ТекСтрокаТЧ Из Подготовка Цикл
			ТекСтрокаТЧ.НомерПрицепа2 = уатОбщегоНазначения.уатПредставлениеТС(ТекСтрокаТЧ.Прицеп2, Объект.Организация);
		КонецЦикла;
	Иначе
		ТекСтрока.НомерПрицепа2 = уатОбщегоНазначения.уатПредставлениеТС(ТекСтрока.Прицеп2, Объект.Организация);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПечатьБезПросмотра(МассивПечДокументов)
	
	Если МассивПечДокументов.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекОбъект Из МассивПечДокументов Цикл 
		
		// Получить необходимое количество копий
		Если ТекОбъект.КоличествоЭкземпляров < 1 Тогда
			ТекОбъект.КоличествоЭкземпляров = 1;
		КонецЕсли;
		
		Если Не ТекОбъект.АвтоМасштаб И уатОбщегоНазначения.уатЗначениеНеЗаполнено(ТекОбъект.ИмяПринтера) Тогда
			ТекОбъект.АвтоМасштаб = Истина;
		КонецЕсли;
		
		ТекОбъект.Напечатать();
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СформироватьМакетПечати(мСписок, ОбъектыПечати)
	
	ОбъектыДляПечати = Новый Массив;
	
	Если Объект.ВариантПечати = "Лицевая сторона" Тогда
		ОбъектыДляПечати.Добавить(Документы.уатПутевойЛист.ПечататьЛицСторону(мСписок, ОбъектыПечати));
		
	ИначеЕсли Объект.ВариантПечати = "Лицевая, затем оборотная сторона" Тогда
		ОбъектыДляПечати.Добавить(Документы.уатПутевойЛист.ПечататьЛицСторону(мСписок, ОбъектыПечати));
		ОбъектыДляПечати.Добавить(Документы.уатПутевойЛист.ПечататьОбрСторону(мСписок, ОбъектыПечати));
		
	ИначеЕсли Объект.ВариантПечати = "Весь путевой лист" Тогда
		ОбъектыДляПечати.Добавить(Документы.уатПутевойЛист.ПечатьВесьДокумент(мСписок, ОбъектыПечати));
		
	КонецЕсли;
	
	Возврат ОбъектыДляПечати;
	
КонецФункции // СформироватьМакетПечати()

&НаКлиенте
Процедура ОбновитьСписокВыбораЭкипажа()
	ТекСтрока = Элементы.Подготовка.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ПодготовкаВодитель.СписокВыбора.Очистить();
	Элементы.ПодготовкаВодитель2.СписокВыбора.Очистить();
	Элементы.ПодготовкаКондуктор.СписокВыбора.Очистить();
	Элементы.ПодготовкаКондуктор2.СписокВыбора.Очистить();
	
	ЭкипажТССписок = уатЗащищенныеФункцииСервер.ЭкипажТССписок(ТекСтрока.ТС);
	ЭкипажТССписок_Количество = ЭкипажТССписок.Количество();
	
	Элементы.ПодготовкаВодитель.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	Элементы.ПодготовкаВодитель2.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	Элементы.ПодготовкаКондуктор.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	Элементы.ПодготовкаКондуктор2.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	
	Если ЭкипажТССписок_Количество = 0 Тогда	
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСотр Из ЭкипажТССписок Цикл
		Элементы.ПодготовкаВодитель.СписокВыбора.Добавить(ТекСотр.Значение);
		Элементы.ПодготовкаВодитель2.СписокВыбора.Добавить(ТекСотр.Значение);
		Элементы.ПодготовкаКондуктор.СписокВыбора.Добавить(ТекСотр.Значение);
		Элементы.ПодготовкаКондуктор2.СписокВыбора.Добавить(ТекСотр.Значение);
	КонецЦикла;
КонецПроцедуры

//Функция формирует массив из массивов различных видов ПЛ
//
&НаСервере
Функция СформироватьСпискиДляПечати(Список)
	МассивОбщий = Новый Массив;
	ТаблицаПЛ = Новый ТаблицаЗначений;
	ТаблицаПЛ.Колонки.Добавить("ПЛ");
	ТаблицаПЛ.Колонки.Добавить("ВидПЛ");
	ТаблицаПЛ.Колонки.Добавить("Включен");
	
	//Формируем таблицу значений из полученного массива ПЛ  
	Для Каждого ТекСтрока Из Список Цикл
		НоваяСтрока = ТаблицаПЛ.Добавить();
		НоваяСтрока.ПЛ = ТекСтрока;
		НоваяСтрока.ВидПЛ = ТекСтрока.ВидПЛ;
		НоваяСтрока.Включен = Ложь;
	КонецЦикла;
	
	//Формируем массив, который состоит из массивов различных видовПЛ
	Для Каждого ТекСтрокаТабл Из ТаблицаПЛ Цикл
		Если Не ТекСтрокаТабл.Включен  Тогда
			ПараметрОтбора = Новый Структура("ВидПЛ,Включен",ТекСтрокаТабл.ВидПЛ,Ложь);
			МассивСтрок = ТаблицаПЛ.НайтиСтроки(ПараметрОтбора);
			ТекСтрокаТабл.Включен = Истина;
			Если МассивСтрок.Количество() > 0 Тогда
				Список = Новый Массив;
				Для Каждого ТекСтрокаМассива из МассивСтрок Цикл
					ТекСтрокаМассива.Включен = Истина;
					Список.Добавить(ТекСтрокаМассива.ПЛ);
				КонецЦикла;
				МассивОбщий.Добавить(Список);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивОбщий;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтапыМаршрута(спрМаршрут)
	
	массивЭтапов = Новый Массив();
	Для Каждого ТекЭтап Из спрМаршрут.Этапы Цикл
		массивЭтапов.Добавить(Новый Структура("ПунктОтправления, ПунктПрибытия", ТекЭтап.ПунктОтправления, ТекЭтап.ПунктПрибытия));
	КонецЦикла;
	
	Возврат массивЭтапов;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьПодготовку(Команда)
	СформироватьПодготовку();
		
	ОбновитьНомерТСвТЧ();
	ОбновитьНомерПрицепа1вТЧ();
	ОбновитьНомерПрицепа2вТЧ();
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьДату(Команда)
	Объект.ДатаФормирования = НачалоДня(Объект.ДатаФормирования + 86400);
	ОбновитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура УменьшитьДату(Команда)
	Объект.ДатаФормирования = НачалоДня(Объект.ДатаФормирования - 86400);
	ОбновитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусыЗанятостиТС(Команда)
	ОбновитьСтатусыЗанятостиСервер();
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсе(Команда)
	Для Каждого ТекСтрока Из Подготовка Цикл
		ТекСтрока.ПризнакВыбора = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	Для Каждого ТекСтрока Из Подготовка Цикл
		ТекСтрока.ПризнакВыбора = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	ЕстьВыбранные = Ложь;
	СообщениеПредыдущийПЛ = "";
	
	Для Каждого ТекСтрока из Подготовка Цикл
		Если ТекСтрока.ПризнакВыбора = Истина Тогда
			Если ЗначениеЗаполнено(ТекСтрока.ПЛ) Тогда
				Сообщить("Для ТС в строке №" + Строка(ТекСтрока.НомерСтроки) + " уже создан путевой лист!");
			Иначе
				ТекСтрока.ПЛ = СформироватьПЛ(ТекСтрока, СообщениеПредыдущийПЛ);
				Если ЗначениеЗаполнено(ТекСтрока.ПЛ) Тогда
					//С000532025:
					//признак не снимается для того, чтобы после записи была возможность отправить на печать выделенные строки
					//ТекСтрока.ПризнакВыбора = Ложь;
					ТекСтрока.ПЛпредставление = "№" + уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.ПЛ, "Номер")
						+ " от " + уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.ПЛ, "Дата");
				КонецЕсли;
				ЕстьВыбранные = Истина;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
	Если СообщениеПредыдущийПЛ <> "" Тогда
		Сообщить("Найдены предыдущие нерассчитанные путевые листы (строки подготовки №" + Сред(СообщениеПредыдущийПЛ, 3) + ")!
			|В созданных путевых листах остатки топлива и показания спидометра (счетчика) при выезде обнулены!");
	КонецЕсли;
		
	Если Не ЕстьВыбранные Тогда
		ПоказатьПредупреждение(Неопределено, "Нет выбранных строк!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Напечатать(Команда)
	ЕстьВыбранные = Ложь;
	мСписок = Новый Массив;
	
	Для Каждого ТекСтрока из Подготовка Цикл
		Если НЕ ТекСтрока.ПризнакВыбора Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ПЛ) Тогда
			Сообщить("Для автомобиля в строке №" + Строка(ТекСтрока.НомерСтроки) + " не создан путевой лист!");
			Продолжить;
		КонецЕсли;
		
		мСписок.Добавить(ТекСтрока.ПЛ);
		
		ЕстьВыбранные = Истина;
	КонецЦикла;
	
	МассивСписковДляПечати = СформироватьСпискиДляПечати(мСписок);
	//вДок = ТекСтрока.ПЛ.ПолучитьОбъект();
	Если ПечатьСПредпросмотром Тогда
		Для Каждого ТекСтрокаМассива из МассивСписковДляПечати Цикл
			
			Если Объект.ВариантПечати = "Лицевая сторона" Тогда
				УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.уатПутевойЛист", "ПечататьЛицСторону", ТекСтрокаМассива, Неопределено);
				
			ИначеЕсли Объект.ВариантПечати = "Лицевая, затем оборотная сторона" Тогда
				УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.уатПутевойЛист", "ПечататьЛицСторону", ТекСтрокаМассива, Неопределено);
				УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.уатПутевойЛист", "ПечататьОбрСторону", ТекСтрокаМассива, Неопределено);
				
			ИначеЕсли Объект.ВариантПечати = "Весь путевой лист" Тогда
				УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.уатПутевойЛист", "ПечатьВесьДокумент", ТекСтрокаМассива, Неопределено);
				
			КонецЕсли;
		КонецЦикла;
		
	Иначе 
		Для Каждого ТекСтрокаМассива из МассивСписковДляПечати Цикл
			ОбъектыПечати = Новый СписокЗначений;
			ПечатьБезПросмотра(СформироватьМакетПечати(ТекСтрокаМассива, ОбъектыПечати));
		КонецЦикла;
		
	КонецЕсли;
	
	//Если Объект.ВариантПечати = "Лицевая, затем оборотная сторона" Тогда
	//	Ответ = Вопрос("Для печати оборотной стороны нажмите ""ОК""", РежимДиалогаВопрос.ОКОтмена, 0);
	//	Если Ответ = КодВозвратаДиалога.ОК Тогда
	//		Для каждого вТекДок из мСписок Цикл
	//			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.уатПутевойЛист", "ПечататьОбрСторону", вТекДок, Неопределено);
	//		КонецЦикла;	
	//	КонецЕсли;
	//КонецЕсли;
	
	Если Не ЕстьВыбранные Тогда
		ПоказатьПредупреждение(Неопределено, "Нет выбранных строк!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Сортировка(Команда)
	ОткрытьФорму("Обработка.уатПакетнаяВыпискаПЛ.Форма.ФормаСортировки",, ЭтаФорма,,,,
		Новый ОписаниеОповещения("СоздатьСортировкуЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСортировкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("КоллекцияЭлементовПорядкаКомпоновкиДанных") Тогда
		КомпоновщикДанных.Настройки.Порядок.Элементы.Очистить();    
		Для Каждого ТекЭлемент Из Результат Цикл
			ТекНастройка = КомпоновщикДанных.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(ТекНастройка, ТекЭлемент);	
		КонецЦикла;
		
		СформироватьПодготовку();
	КонецЕсли;
	
	УстановитьИконкуСортировки();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИконкуСортировки()
	
	ЕстьСортировка = Ложь;
	
	Для Каждого ТекСтрока Из КомпоновщикДанных.Настройки.Порядок.Элементы Цикл
		Если ТекСтрока.Использование Тогда 
			ЕстьСортировка = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ФормаСортировка.Картинка = ?(ЕстьСортировка, БиблиотекаКартинок.уатСортировкаУстановлена, БиблиотекаКартинок.уатСортировкаНеУстановлена);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

&НаКлиенте
Процедура ТипЗаполненияПриИзменении(Элемент)
	ВидимостьКолонокПоДокументам();
	ВидимостьТипаЗаполнения();
	ИнициализацияКомпоновщика();
КонецПроцедуры

&НаКлиенте
Процедура ДатаФормированияПриИзменении(Элемент)
	ОбновитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	СтруктураОбъектовНастроек = Новый Структура;
	СтруктураОбъектовНастроек.Вставить("Организация",   Объект.Организация);
	СтруктураОбъектовНастроек.Вставить("Подразделение", Объект.Подразделение);
	
	мСрокДействияПутевогоЛиста = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.СрокДействияПутевогоЛиста"));
	мСрокДействияПутевогоЛиста = ?(мСрокДействияПутевогоЛиста <> Неопределено, мСрокДействияПутевогоЛиста, 0);
	
	ЗаполнитьЗначенияОтветственных();
	
	ОбновитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура КолоннаПриИзменении(Элемент)
	ОбновитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	ОбновитьФорму();
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьИзменениеДанныхПЛ()
	ТекСтрока = Элементы.Подготовка.ТекущиеДанные;
	Если НЕ ТекСтрока.ПЛ.Пустая() И ЕстьИзмененияПЛ(ТекСтрока) Тогда
		ТекСтрока.ДанныеИзменены = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнятьПоДокументамПриИзменении(Элемент)
	ВидимостьКолонокПоДокументам();
	ВидимостьТипаЗаполнения();
КонецПроцедуры

&НаКлиенте
Процедура КопироватьЗаданияСПредыдущегоПЛПриИзменении(Элемент)
	ВидимостьПриКопированииСПредПЛ();
КонецПроцедуры

&НаКлиенте
Процедура ОсмотрелВрачНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.ОсмотрелВрач, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОсмотрелВрачОткрытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.ОсмотрелВрач, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВыдалДиспетчерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.ВыдалДиспетчер, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВыдалДиспетчерОткрытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.ВыдалДиспетчер, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВыпустилМеханикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.ВыпустилМеханик, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВыпустилМеханикОткрытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.ВыпустилМеханик, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПринялМеханикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.ПринялМеханик, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПринялМеханикОткрытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.ПринялМеханик, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПринялДиспетчерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.ПринялДиспетчер, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПринялДиспетчерОткрытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.ПринялДиспетчер, СтандартнаяОбработка);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ ТАБЛИЦЫ ПОДГОТОВКА

&НаКлиенте
Процедура ПодготовкаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекСтрока = Элементы.Подготовка.ТекущиеДанные;
	Если Поле.Имя = "ПодготовкаПЛ" Тогда
		ПоказатьЗначение(Неопределено, ТекСтрока.ПЛ);
	ИначеЕсли Поле.Имя = "ПодготовкаТСгосномер" Тогда
		ПоказатьЗначение(Неопределено, ТекСтрока.ТС);
	ИначеЕсли Поле.Имя = "ПодготовкаМодельТС" Тогда
		ПоказатьЗначение(Неопределено, уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.ТС, "уатМодель"));
	ИначеЕсли Поле.Имя = "ПодготовкаМаршрутныйЛист" Тогда
		ПоказатьЗначение(Неопределено, ТекСтрока.МаршрутныйЛист);
	ИначеЕсли Поле.Имя = "ПодготовкаЗаказНаТС" Тогда
		ПоказатьЗначение(Неопределено, ТекСтрока.ЗаказНаТС);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ОбновитьСписокВыбораЭкипажа();
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаРежимРаботыТСПриИзменении(Элемент)
	ОбновитьИзменениеДанныхПЛ();
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаВодительПриИзменении(Элемент)
	ОбновитьСтатусыЗанятостиСервер(Элементы.Подготовка.ТекущиеДанные.НомерСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаВодитель2ПриИзменении(Элемент)
	ОбновитьСтатусыЗанятостиСервер(Элементы.Подготовка.ТекущиеДанные.НомерСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаВодительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Элементы.Подготовка.ТекущиеДанные.Водитель, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаВодительОткрытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Элементы.Подготовка.ТекущиеДанные.Водитель, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаВодительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.ДатаФормирования);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаВодительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.ДатаФормирования);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаВодитель2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Элементы.Подготовка.ТекущиеДанные.Водитель2, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаВодитель2Открытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Элементы.Подготовка.ТекущиеДанные.Водитель2, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаВодитель2АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.ДатаФормирования);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаВодитель2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.ДатаФормирования);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаКондукторПриИзменении(Элемент)
	ОбновитьИзменениеДанныхПЛ();
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаКондукторНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Элементы.Подготовка.ТекущиеДанные.Кондуктор,
		Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаКондукторОткрытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Элементы.Подготовка.ТекущиеДанные.Кондуктор, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаКондукторАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.ДатаФормирования);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаКондукторОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.ДатаФормирования);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаКондуктор2ПриИзменении(Элемент)
	ОбновитьИзменениеДанныхПЛ();
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаКондуктор2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Элементы.Подготовка.ТекущиеДанные.Кондуктор2,
		Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаКондуктор2Открытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Элементы.Подготовка.ТекущиеДанные.Кондуктор2, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаКондуктор2АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.ДатаФормирования);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаКондуктор2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.ДатаФормирования);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаДатаВыездаПриИзменении(Элемент)
	ОбновитьИзменениеДанныхПЛ();
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаДатаВозвращенияПриИзменении(Элемент)
	ОбновитьИзменениеДанныхПЛ();
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаГруз1ПриИзменении(Элемент)
	ОбновитьИзменениеДанныхПЛ();
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаГруз1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораГруза(Элемент,Элементы.Подготовка.ТекущиеДанные.Груз1,Элемент,СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаВесБрутто1ПриИзменении(Элемент)
	ОбновитьИзменениеДанныхПЛ();
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаОбъем1ПриИзменении(Элемент)
	ОбновитьИзменениеДанныхПЛ();
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаГруз2ПриИзменении(Элемент)
	ОбновитьИзменениеДанныхПЛ();
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаГруз2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораГруза(Элемент,Элементы.Подготовка.ТекущиеДанные.Груз2,Элемент,СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаВесБрутто2ПриИзменении(Элемент)
	ОбновитьИзменениеДанныхПЛ();
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаОбъем2ПриИзменении(Элемент)
	ОбновитьИзменениеДанныхПЛ();
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаКонтрагентПриИзменении(Элемент)
	ОбновитьИзменениеДанныхПЛ();
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаПодразделениеПриИзменении(Элемент)
	ОбновитьИзменениеДанныхПЛ();
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаАдресПрибытияПриИзменении(Элемент)
	ОбновитьИзменениеДанныхПЛ();
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаАдресУбытия1ПриИзменении(Элемент)
	ОбновитьИзменениеДанныхПЛ();
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаВремяПрибытияПриИзменении(Элемент)
	ОбновитьИзменениеДанныхПЛ();
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаВремяУбытияПриИзменении(Элемент)
	ОбновитьИзменениеДанныхПЛ();
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаКонтрагент2ПриИзменении(Элемент)
	ОбновитьИзменениеДанныхПЛ();
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаПодразделение2ПриИзменении(Элемент)
	ОбновитьИзменениеДанныхПЛ();
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаАдресПрибытия2ПриИзменении(Элемент)
	ОбновитьИзменениеДанныхПЛ();
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаАдресУбытия2ПриИзменении(Элемент)
	ОбновитьИзменениеДанныхПЛ();
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаВремяПрибытия2ПриИзменении(Элемент)
	ОбновитьИзменениеДанныхПЛ();
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаВремяУбытия2ПриИзменении(Элемент)
	ОбновитьИзменениеДанныхПЛ();
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаНомерТСПриИзменении(Элемент)
	ТекСтрока = Элементы.Подготовка.ТекущиеДанные;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСПриИзменении(ТекСтрока.ТС, ТекСтрока.НомерТС, Объект.Организация);
	
	ОбновитьНомерТСвТЧ(Элементы.Подготовка.ТекущаяСтрока);
	
	ТекСтрока.РежимРаботыТС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.ТС, "уатОсновнойРежимРаботы");
	ПодготовкаРежимРаботыТСПриИзменении(Неопределено);
	ЗаполнитьВодителей(ТекСтрока);
	
	ОбновитьИзменениеДанныхПЛ();
	ОбновитьСписокВыбораЭкипажа();
	ОбновитьСтатусыЗанятостиСервер(ТекСтрока.НомерСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаНомерТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("уатОрганизация", Объект.Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		СтруктураОтбора.Вставить("уатПодразделение", Объект.Подразделение);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Колонна) Тогда
		СтруктураОтбора.Вставить("уатКолонна", Объект.Колонна);
	КонецЕсли;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСНачалоВыбора(Элемент, Элементы.Подготовка.ТекущиеДанные.ТС, СтруктураОтбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаНомерТСОчистка(Элемент, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОчистка(Элементы.Подготовка.ТекущиеДанные.ТС);
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаНомерТСОткрытие(Элемент, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОткрытие(Элементы.Подготовка.ТекущиеДанные.ТС, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаНомерТСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекСтрока = Элементы.Подготовка.ТекущиеДанные;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОбработкаВыбора(ТекСтрока.ТС, ТекСтрока.НомерТС, ВыбранноеЗначение, СтандартнаяОбработка, Объект.Организация);
		
	Модифицированность = Истина;
	
	ТекСтрока.РежимРаботыТС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.ТС, "уатОсновнойРежимРаботы");
	ПодготовкаРежимРаботыТСПриИзменении(Элементы.ПодготовкаРежимРаботыТС);
	ЗаполнитьВодителей(ТекСтрока);
	
	ОбновитьИзменениеДанныхПЛ();
	ОбновитьСписокВыбораЭкипажа();
	ОбновитьСтатусыЗанятостиСервер(ТекСтрока.НомерСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаНомерТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаНомерТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаНомерПрицепа1ПриИзменении(Элемент)
	ТекСтрока = Элементы.Подготовка.ТекущиеДанные;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСПриИзменении(ТекСтрока.Прицеп1, ТекСтрока.НомерПрицепа1, Объект.Организация);
	
	ОбновитьНомерПрицепа1вТЧ(Элементы.Подготовка.ТекущаяСтрока);
	
	ОбновитьИзменениеДанныхПЛ();
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаНомерПрицепа1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("уатОрганизация", Объект.Организация);
	КонецЕсли;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСНачалоВыбора(Элемент, Элементы.Подготовка.ТекущиеДанные.Прицеп1, СтруктураОтбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаНомерПрицепа1Очистка(Элемент, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОткрытие(Элементы.Подготовка.ТекущиеДанные.Прицеп1, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаНомерПрицепа1Открытие(Элемент, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОткрытие(Элементы.Подготовка.ТекущиеДанные.Прицеп1, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаНомерПрицепа1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекСтрока = Элементы.Подготовка.ТекущиеДанные;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОбработкаВыбора(ТекСтрока.Прицеп1, ТекСтрока.НомерПрицепа1, ВыбранноеЗначение, СтандартнаяОбработка, Объект.Организация);
		
	Модифицированность = Истина;
	
	ОбновитьИзменениеДанныхПЛ();
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаНомерПрицепа1АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаНомерПрицепа1ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаНомерПрицепа2ПриИзменении(Элемент)
	ТекСтрока = Элементы.Подготовка.ТекущиеДанные;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСПриИзменении(ТекСтрока.Прицеп2, ТекСтрока.НомерПрицепа2, Объект.Организация);
	
	ОбновитьНомерПрицепа2вТЧ(Элементы.Подготовка.ТекущаяСтрока);
	
	ОбновитьИзменениеДанныхПЛ();
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаНомерПрицепа2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("уатОрганизация", Объект.Организация);
	КонецЕсли;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСНачалоВыбора(Элемент, Элементы.Подготовка.ТекущиеДанные.Прицеп2, СтруктураОтбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаНомерПрицепа2Очистка(Элемент, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОткрытие(Элементы.Подготовка.ТекущиеДанные.Прицеп2, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаНомерПрицепа2Открытие(Элемент, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОткрытие(Элементы.Подготовка.ТекущиеДанные.Прицеп2, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаНомерПрицепа2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекСтрока = Элементы.Подготовка.ТекущиеДанные;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОбработкаВыбора(ТекСтрока.Прицеп1, ТекСтрока.НомерПрицепа2, ВыбранноеЗначение, СтандартнаяОбработка, Объект.Организация);
		
	Модифицированность = Истина;
	
	ОбновитьИзменениеДанныхПЛ();
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаНомерПрицепа2АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаНомерПрицепа2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаМаршрут1ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Подготовка.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	мМаршрут = ТекущиеДанные.Маршрут1;
	мМаршрутЭтапы = ЭтапыМаршрута(мМаршрут);
	Если мМаршрутЭтапы.Количество() > 0 Тогда
		ТекущиеДанные.АдресПрибытия = мМаршрутЭтапы[0].ПунктОтправления;
		Если уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(мМаршрут, "ПредставлениеМаршрутаОднимПунктом") Тогда
			ТекущиеДанные.АдресУбытия1 = мМаршрутЭтапы[мМаршрутЭтапы.Количество()-1].ПунктОтправления;
		Иначе
			ТекущиеДанные.АдресУбытия1 = мМаршрутЭтапы[мМаршрутЭтапы.Количество()-1].ПунктПрибытия;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаМаршрут2ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Подготовка.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	мМаршрут = ТекущиеДанные.Маршрут2;
	мМаршрутЭтапы = ЭтапыМаршрута(мМаршрут);
	Если мМаршрутЭтапы.Количество() > 0 Тогда
		ТекущиеДанные.АдресПрибытия2 = мМаршрутЭтапы[0].ПунктОтправления;
		Если уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(мМаршрут, "ПредставлениеМаршрутаОднимПунктом") Тогда
			ТекущиеДанные.АдресУбытия2 = мМаршрутЭтапы[мМаршрутЭтапы.Количество()-1].ПунктОтправления;
		Иначе
			ТекущиеДанные.АдресУбытия2 = мМаршрутЭтапы[мМаршрутЭтапы.Количество()-1].ПунктПрибытия;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДопИнформацию(Команда)
	Элементы.ФормаПоказатьДопИнформацию.Пометка = НЕ Элементы.ФормаПоказатьДопИнформацию.Пометка;
	ОтобразитьСкрытьДопИнформацию();
	СохранитьНастройки();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВосстановитьНастройки()
	СтруктураНастроек = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.уатПакетнаяВыпискаПЛ.Форма.ОсновнаяФорма", "ОбщиеНастройки");
	
	Возврат СтруктураНастроек;
КонецФункции

&НаКлиенте
Процедура ОтобразитьСкрытьДопИнформацию()
	
	флПоказатьДопИнфо = Элементы.ФормаПоказатьДопИнформацию.Пометка;
	Если флПоказатьДопИнфо И Не Элементы.ПанельДопИнформации.Видимость Тогда
		Элементы.ПанельДопИнформации.Видимость = Истина;
		
	ИначеЕсли Не флПоказатьДопИнфо И Элементы.ПанельДопИнформации.Видимость Тогда 
		Элементы.ПанельДопИнформации.Видимость = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПанельДопИнформацииПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Подготовка.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначенияКлиент.ПанельДопИнформацииПоТСПриНажатии(
		ЭтотОбъект, 
		Элемент, 
		ДанныеСобытия, 
		СтандартнаяОбработка,
		ТекущиеДанные.ТС
	);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	уатЗащищенныеФункцииСервер.уатОбработкаФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка,ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.Подразделение, "Объект.Организация");
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.ПодготовкаПодразделение, "Объект.Организация");
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.ПодготовкаПодразделение2, "Объект.Организация");
	
	ИнициализацияКомпоновщика();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	уатЗащищенныеФункцииКлиент.уатОбработкаФормаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаФормирования) Тогда
		Объект.ДатаФормирования = ТекущаяДата();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.ТекущийПользователь(), "ОсновнаяОрганизация");
	КонецЕсли;
	
	СтруктураОбъектовНастроек = Новый Структура;
	СтруктураОбъектовНастроек.Вставить("Организация",   Объект.Организация);
	СтруктураОбъектовНастроек.Вставить("Подразделение", Объект.Подразделение);
	
	мСрокДействияПутевогоЛиста = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.СрокДействияПутевогоЛиста"));
	мСрокДействияПутевогоЛиста = ?(мСрокДействияПутевогоЛиста <> Неопределено, мСрокДействияПутевогоЛиста, 0);
	
	Если Объект.ВариантПечати = "Двусторонняя печать" Тогда
		Объект.ВариантПечати = "Весь путевой лист";
	КонецЕсли;
	
	Элементы.ВариантПечати.СписокВыбора.Очистить();
	Элементы.ВариантПечати.СписокВыбора.Добавить("Лицевая сторона", "Лицевая сторона");
	Элементы.ВариантПечати.СписокВыбора.Добавить("Лицевая, затем оборотная сторона", "Лицевая, затем оборотная сторона");
	Элементы.ВариантПечати.СписокВыбора.Добавить("Весь путевой лист", "Весь путевой лист");
	
	Если НЕ ЗначениеЗаполнено(Объект.ВариантПечати) ИЛИ Объект.ВариантПечати = "Не печатать" Тогда
		Объект.ВариантПечати = "Весь путевой лист";
	КонецЕсли;	
	ТипЗаполненияПриИзменении(Неопределено);
	ВидимостьПриКопированииСПредПЛ();
	
	//ОбновитьСтатусыТС();
	ВидимостьТипаЗаполнения();
	
	ЗаполнитьЗначенияОтветственных();
	
	УстановитьИконкуСортировки();
	
	СтруктураНастроек = ВосстановитьНастройки();
	НастройкиНекорректны = (СтруктураНастроек = Неопределено ИЛИ ТипЗнч(СтруктураНастроек) <> Тип("Структура"));
	
	//отображение строки доп. информации
	Если НастройкиНекорректны ИЛИ (НЕ СтруктураНастроек.Свойство("ОтображатьДопИнфо")) Тогда
		ОтображатьДопИнфо = Ложь;
	Иначе
		ОтображатьДопИнфо = СтруктураНастроек.ОтображатьДопИнфо;
	КонецЕсли;
	Элементы.ФормаПоказатьДопИнформацию.Пометка = ОтображатьДопИнфо;
	ОтобразитьСкрытьДопИнформацию();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	ОбновитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда 
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

мСрокДействияПутевогоЛиста = 0;