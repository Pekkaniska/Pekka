&НаКлиенте
Перем КэшированныеЗначения; //текущая номенклатура для передачи в обработчики ожидания

&НаКлиенте
Перем ВыполняетсяЗакрытие Экспорт;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
    //Если Параметры.Документ = Неопределено Тогда
    //	ВызватьИсключение НСтр("ru='Предусмотрено открытие обработки только из документов.'");
    //КонецЕсли;
    	
    пкПодборТехникиСервер.ПриСозданииФормыПодбораНаСервере(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    
    КомпоновщикНастроек              = ЭтаФорма.СписокТехники.КомпоновщикНастроек; 
    ЭлементыПользовательскихНастроек = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
    
    Если ЭлементыПользовательскихНастроек.Количество() > 0 Тогда
        ЭлементыПользовательскихНастроек[0].Элементы.Очистить();
    КонецЕсли;
	
    пкПодборТехникиКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	пкПодборТехникиКлиент.ПередЗакрытиемФормыПодбораТоваров(ЭтаФорма, Объект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	//СохранитьНастройкиФормыНаСервере();
	Если Не ЗавершениеРаботы Тогда
		АдресТоваровВХранилище = АдресТоваровВХранилище();
		
		Если ПеренестиВДокумент И АдресТоваровВХранилище <> Неопределено Тогда
			Структура = Новый Структура("АдресТоваровВХранилище", АдресТоваровВХранилище);
			ОповеститьОВыборе(Структура);
	    ИначеЕсли ИзменениеСтроки Тогда
	        Если ЗначениеЗаполнено(ВыбраннаяМодель) И ЗначениеЗаполнено(ВыбраннаяТехника) Тогда
	            СтруктураВыбора = Новый Структура("ВыбраннаяМодель, ВыбраннаяТехника", ВыбраннаяМодель, ВыбраннаяТехника);
	            ОповеститьОВыборе(СтруктураВыбора);
	        ИначеЕсли ЗначениеЗаполнено(ВыбраннаяМодель) Тогда
	            ОповеститьОВыборе(ВыбраннаяМодель);
	        ИначеЕсли ЗначениеЗаполнено(ВыбраннаяТехника) Тогда
	            ОповеститьОВыборе(ВыбраннаяТехника);
	        КонецЕсли;    
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбработчикиСобытийСтрокПоиска

&НаКлиенте
Процедура СтрокаПоискаНоменклатураПриИзменении(Элемент)
	
	ВыполнитьПоискНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаПоискаНоменклатура = "";
	
	СнятьОтборПоСтрокеПоискаНоменклатурыНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФлаговТочногоСоответствия

&НаКлиенте
Процедура НайтиНоменклатуруПоТочномуСоответствиюПриИзменении(Элемент)
	
	ВыполнитьПоискНоменклатуры();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ВидНоменклатурыПриИзменении(Элемент)
	
	ВидНоменклатурыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидНоменклатурыОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяНадписьНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	пкПодборТехникиКлиент.ПриНажатииНаИнформационнуюНадпись(ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяНадписьТехникаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	пкПодборТехникиКлиент.ПриНажатииНаИнформационнуюНадписьТехника(ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяНадписьНастройкаОтборовНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	пкПодборТехникиКлиент.ПриНажатииНаИнформационнуюНадписьНастройкаОтборов(ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяНадписьМодельНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	пкПодборТехникиКлиент.ПриНажатииНаИнформационнуюНадписьМодель(ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьФильтрыПриИзменении(Элемент)
	
	ИспользоватьФильтрыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСтатусамТехникиПриИзменении(Элемент)
    
    УстановитьОтборПоСтатусамТехники();
        
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКорзина

&НаКлиенте
Процедура КорзинаНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	СтруктураЗаполненияЦены = Новый Структура;
	
	СтруктураЗаполненияЦены.Вставить("Дата",   ТекущаяДата());
			
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	пкПодборТехникиКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	пкПодборТехникиКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата", ТекущаяДата());
		
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	пкПодборТехникиКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ПеретащитьВКорзинуНаСервере(ПараметрыПеретаскивания.Значение);
		
КонецПроцедуры

&НаКлиенте
Процедура КорзинаПриИзменении(Элемент)
	
	пкПодборТехникиКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаАрендыПриИзменении(Элемент)
    ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
    
    Если ЗначениеЗаполнено(ТекущаяСтрока.ДатаНачалаАренды) И ЗначениеЗаполнено(ТекущаяСтрока.ДатаОкончанияАренды) Тогда
        ТекущаяСтрока.КоличествоУпаковок = (НачалоДня(ТекущаяСтрока.ДатаОкончанияАренды) - НачалоДня(ТекущаяСтрока.ДатаНачалаАренды)) / (3600 * 24);
        
        СтруктураДействий = Новый Структура;
	    СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	    ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	    пкПодборТехникиКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
    КонецЕсли;    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоОтборов

&НаКлиенте
Процедура ДеревоОтборовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	пкПодборТехникиКлиент.ДеревоОтборовВыбор(ЭтаФорма, Новый ОписаниеОповещения("ДеревоОтборовПриИзмененииЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ДеревоОтборовОтборПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовОтборПриИзменении(Элемент)
	
	пкПодборТехникиКлиент.ДеревоОтборовОтборПриИзменении(ЭтаФорма, Новый ОписаниеОповещения("ДеревоОтборовПриИзмененииЗавершение", ЭтотОбъект));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИерархияНоменклатуры

&НаКлиенте
Процедура ИерархияНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияНоменклатурыПриАктивизацииСтроки(Элемент)
	
	пкПодборТехникиКлиент.ПриАктивизацииСтрокиИерархииНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияНоменклатурыПриАктивизацииСтрокиОбработчикОжидания()
	
	пкПодборТехникиКлиент.ОбработчикАктивизацииСтрокиИерархииНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура ПодборТаблицаНоменклатураПриАктивизацииСтроки(Элемент)
    
    Если КодФормы <> "СостояниеТехники" Тогда
	    пкПодборТехникиКлиент.ПриАктивизацииСтрокиТаблицыНоменклатуры(ЭтаФорма, Элемент);
    КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокТехникиПриАктивизацииСтроки(Элемент)
    
	пкПодборТехникиКлиент.ПриАктивизацииСтрокиТаблицыТехники(ЭтаФорма, Элемент);
    
КонецПроцедуры

&НаКлиенте
Процедура ПодборТаблицаНоменклатураВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//+++pavelk
	Если КодФормы = "Заказ-наряд" Тогда
		Возврат;
	КонецЕсли;	
	//---pavelk
	
    Если КодФормы <> "СостояниеТехники" Тогда
    	// Проверить выбранную строку номенклатуры.
    	Оповещение = Новый ОписаниеОповещения("ПодборТаблицаНоменклатураВыборЗавершение", ЭтотОбъект, 
    		Новый Структура("Элемент", Элемент));
    	пкПодборТехникиКлиент.ПриВыбореСтрокиТаблицыНоменклатуры(ЭтаФорма, Оповещение);
    Иначе
        ОтборМодель.Добавить(Элемент.ТекущиеДанные.Ссылка);
        ОтборМодельПриИзменении(Неопределено);
    КонецЕсли;    
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТаблицаНоменклатураВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтрокаТаблицыНоменклатуры = ДополнительныеПараметры.Элемент.ТекущиеДанные;
	
	Если СтрокаТаблицыНоменклатуры.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
		
    Если ИзменениеСтроки Тогда
        ВыбраннаяМодель = СтрокаТаблицыНоменклатуры.Номенклатура;
	    Закрыть();
    Иначе
        ПараметрыТовара = пкПодборТехникиКлиентСервер.ПараметрыТовара(СтрокаТаблицыНоменклатуры.Номенклатура);
    
        ЗаполнитьЗначенияСвойств(ПараметрыТовара, СтрокаТаблицыНоменклатуры);
        
        ПараметрыТовара.КоличествоУпаковок = 1;
        ПараметрыТовара.КоличествоПоМодели = 1;

        ДобавитьВКорзину(ПараметрыТовара);
    КонецЕсли;    

КонецПроцедуры

&НаКлиенте
Процедура СписокТехникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СписокТехники.ТекущиеДанные;
	
	Если Поле.Имя = "СписокТехникиКомментарий" Тогда
		Комментарий = пкУправлениеТехникойСервер.ПолучитьКомменатрииПоЗаявке(ТекущиеДанные.ЗаявкаНаАрендуТехники, ТекущиеДанные.Ссылка);
		
		ПоказатьВводСтроки(Новый ОписаниеОповещения("ВводКомментарияЗавершение", ЭтаФорма, 
		Новый Структура("ЗаявкаНаАрендуТехники, Техника", ТекущиеДанные.ЗаявкаНаАрендуТехники, ТекущиеДанные.Ссылка)), Комментарий);
	ИначеЕсли Поле.Имя = "СписокТехникиПримечание" Тогда
		Примечание = пкУправлениеТехникойСервер.ПолучитьКомменатрииПоЗаявке(ТекущиеДанные.ЗаявкаНаАрендуТехники, ТекущиеДанные.Ссылка, Ложь);
		
		ПоказатьВводСтроки(Новый ОписаниеОповещения("ВводПримечанияЗавершение", ЭтаФорма, 
		Новый Структура("ЗаявкаНаАрендуТехники, Техника", ТекущиеДанные.ЗаявкаНаАрендуТехники, ТекущиеДанные.Ссылка)), Примечание);
		//Рарус Владимир Подрезов 29.09.2017
	ИначеЕсли Поле.Имя = "СписокТехникиПаспорт" Тогда
		ПодключитьОбработчикОжидания("ИзменитьОтметкуПаспорта", 0.1, Истина);
	ИначеЕсли Поле.Имя = "СписокТехникиВахтенныйЖурнал" Тогда
		ПодключитьОбработчикОжидания("ИзменитьОтметкуВахтенныйЖурнал", 0.1, Истина);
		//Рарус Владимир Подрезов Конец
	ИначеЕсли Поле.Родитель.Имя = "СписокТехникиГруппаРемонт" И ЗначениеЗаполнено(ТекущиеДанные.ДокументРемонта) Тогда
		
		ОткрытьФорму("Документ.пкЗаказНаряд.Форма.ФормаДокумента", НайтиДокументРемонтаПоНомеру(ТекущиеДанные.ДокументРемонта,ТекущиеДанные.Модель));
	ИначеЕсли КодФормы = "СостояниеТехники" Тогда
		
//++ Рарус Лимаренко 18.10.17 6592
		Если ЗначениеЗаполнено(ТекущиеДанные.ЗаявкаНаАрендуТехники) Тогда
			ОткрытьФорму("Документ.пкЗаявкаНаАрендуТехники.Форма.ФормаДокумента", Новый Структура("Ключ", ТекущиеДанные.ЗаявкаНаАрендуТехники));
		Иначе
			пкПодборТехникиКлиент.ОткрытьКарточкуТехники(ЭтаФорма);
		КонецЕсли;
//-- Рарус Лимаренко 18.10.17 6592        
		
	Иначе        
		// Проверить выбранную строку номенклатуры.
		Оповещение = Новый ОписаниеОповещения("ПодборТаблицаТехникиВыборЗавершение", ЭтотОбъект, 
		Новый Структура("Элемент", Элемент));
		пкПодборТехникиКлиент.ПриВыбореСтрокиТаблицыТехники(ЭтаФорма, Оповещение);
		
	КонецЕсли;    
	
КонецПроцедуры

//++ Рарус Лимаренко 18.10.17 6592
&НаСервереБезКонтекста
Функция НайтиДокументРемонтаПоНомеру(НомерДокумента,Модель)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	пкЗаказНаряд.Ссылка
		|ИЗ
		|	Документ.пкЗаказНаряд КАК пкЗаказНаряд
		|ГДЕ
		|	пкЗаказНаряд.Техника.пкМодель = &Модель
		|	И пкЗаказНаряд.Номер = &Номер";
	
	Запрос.УстановитьПараметр("Номер", НомерДокумента);
	Запрос.УстановитьПараметр("Модель", Модель);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();	
		
	Возврат Новый Структура("Ключ",ВыборкаДетальныеЗаписи.Ссылка);	

КонецФункции // НайтиДокументРемонтаПоНомеру()
//-- Рарус Лимаренко 18.10.17 6592 

//Рарус Владимир Подрезов 29.09.2017
&НаКлиенте
Процедура ИзменитьОтметкуПаспорта()
	
	ТекущиеДанные = Элементы.СписокТехники.ТекущиеДанные;
    
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ЗаявкаНаАрендуТехники) Тогда
		Возврат;
	КонецЕсли;
    
	ТекущиеДанные.Паспорт = Не ТекущиеДанные.Паспорт;
	пкУправлениеТехникойСервер.ЗаписатьПаспортПоЗаявке(ТекущиеДанные.ЗаявкаНаАрендуТехники, ТекущиеДанные.Ссылка, ТекущиеДанные.Паспорт); 
	Элементы.СписокТехники.Обновить();
	
КонецПроцедуры 

&НаКлиенте
Процедура ИзменитьОтметкуВахтенныйЖурнал()
	
	ТекущиеДанные = Элементы.СписокТехники.ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ЗаявкаНаАрендуТехники) Тогда
		Возврат;
	КонецЕсли;
    
	ТекущиеДанные.ВахтенныйЖурнал = Не ТекущиеДанные.ВахтенныйЖурнал;
	пкУправлениеТехникойСервер.ЗаписатьВахтенныйЖурналПоЗаявке(ТекущиеДанные.ЗаявкаНаАрендуТехники, ТекущиеДанные.Ссылка, ТекущиеДанные.ВахтенныйЖурнал); 
	Элементы.СписокТехники.Обновить();
	
КонецПроцедуры 
//Рарус Владимир Подрезов Конец

Процедура ВводКомментарияЗавершение(ВведенноеЗначение, ДопПараметры) Экспорт
    
    Если ВведенноеЗначение <> Неопределено Тогда
        пкУправлениеТехникойСервер.ЗаписатьКомментарийПоЗаявке(ДопПараметры.ЗаявкаНаАрендуТехники, ДопПараметры.Техника, ВведенноеЗначение); 
        
        Элементы.СписокТехники.Обновить();
    КонецЕсли; 
    
КонецПроцедуры 

Процедура ВводПримечанияЗавершение(ВведенноеЗначение, ДопПараметры) Экспорт
    
    Если ВведенноеЗначение <> Неопределено Тогда
        пкУправлениеТехникойСервер.ЗаписатьПримечаниеПоЗаявке(ДопПараметры.ЗаявкаНаАрендуТехники, ДопПараметры.Техника, ВведенноеЗначение); 
        
        Элементы.СписокТехники.Обновить();
    КонецЕсли; 
    
КонецПроцедуры 

&НаКлиенте
Процедура ПодборТаблицаТехникиВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтрокаТаблицыТехники = ДополнительныеПараметры.Элемент.ТекущиеДанные;
			    
    Если ИзменениеСтроки Тогда
        Если ЗначениеЗаполнено(Модель) Тогда
            ВыбраннаяТехника = СтрокаТаблицыТехники.Ссылка;
            Закрыть();
        Иначе
            ВыбраннаяМодель  = СтрокаТаблицыТехники.Модель;
            ВыбраннаяТехника = СтрокаТаблицыТехники.Ссылка;
            Закрыть();
        КонецЕсли;    
    Иначе
        ПараметрыТовара = пкПодборТехникиКлиентСервер.ПараметрыТовара(СтрокаТаблицыТехники.Модель);
    
        ЗаполнитьЗначенияСвойств(ПараметрыТовара, СтрокаТаблицыТехники);
        
        ПараметрыТовара.Номенклатура = СтрокаТаблицыТехники.Модель;
        ПараметрыТовара.Техника      = СтрокаТаблицыТехники.Ссылка;
        
        ПараметрыТовара.КоличествоУпаковок = 1;
        ПараметрыТовара.КоличествоПоМодели  = 1;

        ДобавитьВКорзину(ПараметрыТовара, ?(КодФормы = "Отгрузка" ИЛИ КодФормы = "Возврат", Истина, Ложь));
    КонецЕсли;    

КонецПроцедуры

&НаКлиенте
Процедура СписокНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
	
	пкПодборТехникиКлиент.ПолучитьДанныеПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьТекущийЭлементНавигация(Команда)
	
	пкПодборТехникиКлиент.УстановитьТекущийЭлементНавигация(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементСписокТоваров(Команда)
	
	пкПодборТехникиКлиент.УстановитьТекущийЭлементСписокТоваров(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементКорзина(Команда)
	
	пкПодборТехникиКлиент.УстановитьТекущийЭлементКорзина(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементСтрокаПоиска(Команда)
	
	пкПодборТехникиКлиент.УстановитьТекущийЭлементСтрокаПоиска(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗапрашиватьКоличество(Команда)
	
	ЗапрашиватьКоличество = Не ЗапрашиватьКоличество;
	Элементы.ЗапрашиватьКоличествоЦену.Пометка = ЗапрашиватьКоличество;
	
КонецПроцедуры

&НаКлиенте
Процедура Поиск(Команда)
	
	ТекущееСообщениеПользователю = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
    
	ПеренестиВДокумент = Истина;
	Закрыть(КодВозвратаДиалога.OK);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуТовара(Команда)
	
	пкПодборТехникиКлиент.ОткрытьКарточкуТовара(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуТехники(Команда)
    
	пкПодборТехникиКлиент.ОткрытьКарточкуТехники(ЭтаФорма);
    
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияМодельНажатие(Элемент)
    
	пкПодборТехникиКлиент.ОткрытьКарточкуМодели(Модель);
    
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКлиентНажатие(Элемент)
    
	пкПодборТехникиКлиент.ОткрытьКарточкуКлиента(Клиент);
    
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОбъектСтроительстваНажатие(Элемент)
    
	пкПодборТехникиКлиент.ОткрытьКарточкуОбъектаСтроительства(ОбъектСтроительства);
    
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНоменклатуру(Команда)
	
	пкПодборТехникиКлиент.ОткрытьКарточкуТовара(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураСАналогичнымиСвойствами(Команда)
	
	НоменклатураСАналогичнымиСвойствамиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовуюНоменклатуру(Команда)
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", ПараметрыСозданияНовойНоменклатурыНаСервере(), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьОтборыПоСвойствам(Команда)
	
	СброситьОтборыПоСвойствамНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

    УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтрокаПоискаНоменклатура.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПоискНоменклатурыНеУдачный");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ПолеСОшибкойФон);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставлениеОтбора.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоОтборов.ФиксированноеЗначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылки);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.DefaultGUIFont, , , Ложь, Ложь, Истина, Ложь, ));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставление.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоОтборов.Отбор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.DefaultGUIFont, , , Истина, Ложь, Ложь, Ложь, ));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборов.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИерархияНоменклатуры.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыНоменклатуры.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьФильтры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.FormBackColor);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	//

    //Элемент = УсловноеОформление.Элементы.Добавить();

    //ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
    //ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставление.Имя);

    //ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
    //ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставлениеОтбора.Имя);

    //ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
    //ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

    //ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    //ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВариантНавигации");
    //ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
    //СписокВариантовНавигации = Новый СписокЗначений;
    //СписокВариантовНавигации.Добавить(Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам);
    //СписокВариантовНавигации.Добавить(Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам);
    //ОтборЭлемента.ПравоеЗначение = СписокВариантовНавигации;

    //ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    //ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьФильтры");
    //ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
    //ОтборЭлемента.ПравоеЗначение = Истина;

    //Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидНоменклатуры.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьФильтры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//
    
    Элемент = УсловноеОформление.Элементы.Добавить();

    Для Каждого ЭлементСпискаТехники ИЗ Элементы Цикл
        Если Найти(ЭлементСпискаТехники.Имя, "СписокТехники") > 0 Тогда
	        ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	        ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементСпискаТехники.Имя);
        КонецЕсли;    
    КонецЦикла;
        
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокТехники.НадписьЕстьРезерв");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Резерв";

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
    
    //
    
	пкПодборТехникиСервер.УстановитьУсловноеОформлениеДинамическихСписков(ЭтаФорма);
	
КонецПроцедуры

#Область ПодборыИОбработкаПроверкиКоличества

&НаКлиенте
Процедура ПодборТаблицаПриАктивизацииСтрокиОбработчикОжидания()
	
	пкПодборТехникиКлиент.ПолучитьИнформациюОТовареПриПродаже(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция ДобавитьВКорзинуНаКлиенте(ПараметрыТовара, НовыеСтроки, ВыбранаТехника = Ложь)
    
    Если ВыбранаТехника Тогда
    	Отбор = Новый Структура("Номенклатура, Техника");
        
        Для Каждого НоваяСтрока Из НовыеСтроки Цикл
    		
    		ЗаполнитьЗначенияСвойств(Отбор, НоваяСтрока);
    		    		
    		РезультатПоиска = Объект.Корзина.НайтиСтроки(Отбор);
    		
    		Если РезультатПоиска.Количество() = 0 ИЛИ НоваяСтрока.Погрешность <> 0 Тогда
    			
    			ТекущаяСтрока = Объект.Корзина.Добавить();
    			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Отбор);
    						
            Иначе
                ТексСообщения = "Выбранная техника уже подобрана";
                Возврат ТексСообщения;
            КонецЕсли;
            
    		ТекущаяСтрока.КоличествоПоМодели = 1;
    		ТекущаяСтрока.КоличествоУпаковок = 1;
                				
        КонецЦикла;
    Иначе
    	Отбор = Новый Структура("Номенклатура, Техника, Упаковка, ДатаНачалаАренды, ДатаОкончанияАренды");
    	
    	СтруктураДействий = Новый Структура;
    	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
    	
    	Для Каждого НоваяСтрока Из НовыеСтроки Цикл
    		
    		ЗаполнитьЗначенияСвойств(Отбор, НоваяСтрока);
    		
    		Отбор.Вставить("Техника", ПредопределенноеЗначение("Справочник.ОбъектыЭксплуатации.ПустаяСсылка"));
    		
    		РезультатПоиска = Объект.Корзина.НайтиСтроки(Отбор);
    		
    		Если РезультатПоиска.Количество() = 0 ИЛИ НоваяСтрока.Погрешность <> 0 Тогда
    			
    			ТекущаяСтрока = Объект.Корзина.Добавить();
    			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Отбор);
    						
    		Иначе
    			ТекущаяСтрока = РезультатПоиска[0];
            КонецЕсли;
            
    		ТекущаяСтрока.КоличествоПоМодели = ТекущаяСтрока.КоличествоПоМодели + НоваяСтрока.КоличествоПоМодели;
    		ТекущаяСтрока.КоличествоУпаковок = НоваяСтрока.КоличествоУпаковок;
            
    		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
    				
        КонецЦикла;
        
    КонецЕсли;
    	
    Если НовыеСтроки.Количество() > 0 Тогда
        Элементы.Корзина.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
    КонецЕсли;
    
    Возврат "";
	
КонецФункции

&НаКлиенте
Процедура ДобавитьВКорзину(ПараметрыТовара, ВыбранаТехника = Ложь)
	
	Если Не ЗначениеЗаполнено(ПараметрыТовара) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ВыбранаТехника Тогда
		
		ПараметрыФормы = Новый Структура;
		
		ПараметрыФормы.Вставить("Номенклатура",                      ПараметрыТовара.Номенклатура);
		ПараметрыФормы.Вставить("Упаковка",                          ПараметрыТовара.Упаковка);
		
		АдресВоВременномХранилище = Неопределено;
		
		ПараметрыФормы.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
		
		ИмяФормыЗапросаКоличества = "Обработка.пкПодборТехники.Форма.ЗапросКоличества";
		
		ОткрытьФорму(
			ИмяФормыЗапросаКоличества, 
			ПараметрыФормы, 
			ЭтаФорма,
			,
			,
			,
			Новый ОписаниеОповещения("ДобавитьВКорзинуПослеВыбораКоличества", ЭтотОбъект, ПараметрыТовара),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
		
	Иначе
		
		НовыеСтроки = Новый Массив;
					
        НоваяСтрока = пкПодборТехникиКлиентСервер.ПараметрыТовара();
        ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыТовара);
        
        Если Не ЗначениеЗаполнено(НоваяСтрока.Упаковка) Тогда
            НоваяСтрока.Упаковка = пкПодборТехникиВызовСервера.ПолучитьУпаковкуХранения(НоваяСтрока.Номенклатура);
        КонецЕсли;
        
        НовыеСтроки.Добавить(НоваяСтрока);
		
	КонецЕсли;
	
	ДобавитьВКорзинуЗавершение(ПараметрыТовара, НовыеСтроки, ВыбранаТехника);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКорзинуПослеВыбораКоличества(ПодобранныеТовары, ДополнительныеПараметры) Экспорт 
	
	Если ПодобранныеТовары = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыеСтроки = Новый Массив;
	
	Для Каждого ПодобранныйТовар Из ПодобранныеТовары Цикл
		
		НоваяСтрока = пкПодборТехникиКлиентСервер.ПараметрыТовара();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДополнительныеПараметры);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПодобранныйТовар);
		
		НовыеСтроки.Добавить(НоваяСтрока);
		
	КонецЦикла;
//Рарус Владимир Подрезов 09.09.2016	
	//ДобавитьВКорзинуЗавершение(ДополнительныеПараметры, НовыеСтроки);
	ДобавитьВКорзинуЗавершение(ДополнительныеПараметры, НовыеСтроки, 
		(ЗначениеЗаполнено(ДополнительныеПараметры) И ДополнительныеПараметры.Свойство("Техника") И ЗначениеЗаполнено(ДополнительныеПараметры.Техника)));
//Рарус Владимир Подрезов 09.09.2016 Конец
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКорзинуЗавершение(ПараметрыТовара, НовыеСтроки, ВыбранаТехника = Ложь)
	
	ТекстОповещения = ДобавитьВКорзинуНаКлиенте(ПараметрыТовара, НовыеСтроки, ВыбранаТехника);
	
	Если Не ПоказыватьПодобранныеТовары Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Техника добавлена'"), , ТекстОповещения);
	КонецЕсли;
	
	пкПодборТехникиКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
	// Если добавление товара в корзину производилось при заполненной строке поиска,
	// то вернуть фокус ввода на строку поиска.
	ИмяТекущегоЭлементаСтрокиПоиска = пкПодборТехникиКлиент.ИмяТекущегоЭлементаСтрокиПоиска(ЭтаФорма);
	Если ЗначениеЗаполнено(ЭтаФорма[ИмяТекущегоЭлементаСтрокиПоиска]) Тогда
		пкПодборТехникиКлиент.УстановитьТекущийЭлементСтрокаПоиска(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеретащитьВКорзинуНаСервере(Данные)
	
	НовыеСтроки = Новый Массив;
	Для Каждого ПараметрыТовара Из Данные Цикл
		НовыеСтроки.Добавить(ПараметрыТовара);
	КонецЦикла;
	
	Для Каждого НоваяСтрока Из НовыеСтроки Цикл
		
		Если НоваяСтрока.Упаковка.Пустая() Тогда 
			НоваяСтрока.Упаковка = пкПодборТехникиВызовСервера.ПолучитьУпаковкуХранения(НоваяСтрока.Номенклатура);
		КонецЕсли;
		
		Отбор = Новый Структура;
		
		Отбор.Вставить("Номенклатура",               НоваяСтрока.Номенклатура);
		Отбор.Вставить("Упаковка",                   НоваяСтрока.Упаковка);
		
		Если ИспользоватьДатыОтгрузки Тогда
			Отбор.Вставить("ДатаОтгрузки", НоваяСтрока.ДатаОтгрузки);
		КонецЕсли;
				
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		
		РезультатПоиска = Объект.Корзина.НайтиСтроки(Отбор);
		
		Если РезультатПоиска.Количество() = 0 ИЛИ НоваяСтрока.Погрешность <> 0 Тогда
			ТекущаяСтрока = Объект.Корзина.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Отбор);
		Иначе
			ТекущаяСтрока = РезультатПоиска[0];
		КонецЕсли;
		
		ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок + НоваяСтрока.КоличествоУпаковок;
		ТекущаяСтрока.ИндексНабора = ?(ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора), 1, 0);
		
		ПараметрыСтроки = Новый Структура("Номенклатура, Упаковка, Количество, КоличествоУпаковок");
		ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ТекущаяСтрока);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ПараметрыСтроки, СтруктураДействий, Неопределено);
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ПараметрыСтроки);
		
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область Поиск

&НаКлиенте
Процедура ВыполнитьПоискНоменклатуры()
	
	пкПодборТехникиКлиент.ВыполнениеРасширенногоПоискаВозможно(ЭтаФорма, 
		Новый ОписаниеОповещения("ВыполнитьПоискНоменклатурыЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискНоменклатурыЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ВыполнитьПоискНоменклатурыНаСервере();
	
	пкПодборТехникиКлиент.ПослеВыполненияПоискаНоменклатуры(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискНоменклатурыНаСервере()
	
	пкПодборТехникиСервер.ВыполнитьПоискНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СнятьОтборПоСтрокеПоискаНоменклатурыНаСервере()
	
	пкПодборТехникиКлиентСервер.СнятьОтборПоСтрокеПоискаНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеВариантомНавигации

&НаКлиенте
Процедура ВидыНоменклатурыПриАктивизацииСтроки(Элемент)
 	пкПодборТехникиКлиент.ПриАктивизацииСтрокиСпискаВидыНоменклатуры(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВидыНоменклатурыПриАктивизацииСтрокиОбработчикОжидания()
	
	ТекущиеДанные = Элементы.ВидыНоменклатуры.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
	
		ВидНоменклатурыПриИзмененииНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьВариантНавигацииНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	НадписьВариантНавигацииНавигационнойСсылкиНаСервере(НавигационнаяСсылка, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура НадписьВариантНавигацииНавигационнойСсылкиНаСервере(НавигационнаяСсылка, СтандартнаяОбработка)
	пкПодборТехникиСервер.НадписьВариантНавигацииНавигационнойСсылки(ЭтаФорма, НавигационнаяСсылка, СтандартнаяОбработка)
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВариантНавигации(Команда)
	пкПодборТехникиКлиент.ИзменитьВариантНавигации(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВариантНавигацииЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено 
		Или ВариантНавигации = Результат.Значение Тогда
		Возврат;
	КонецЕсли;
	
	ВариантНавигации = Результат.Значение;
	ВариантНавигацииПриИзмененииНаСервере();	
	
КонецПроцедуры

&НаСервере
Процедура ВариантНавигацииПриИзмененииНаСервере()
	
	пкПодборТехникиСервер.ПриИзмененииВариантаНавигации(ЭтаФорма);
	  
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Функция ПоместитьТоварыВХранилище()
	
	Товары = Объект.Корзина.Выгрузить();
	АдресТоваровВХранилище = ПоместитьВоВременноеХранилище(Товары, УникальныйИдентификатор);
	
	Возврат АдресТоваровВХранилище;
	
КонецФункции

&НаСервере
Функция АдресТоваровВХранилище()
	
	АдресВХранилище = Неопределено;
	
	Если ПеренестиВДокумент Тогда
		АдресВХранилище = ПоместитьТоварыВХранилище();
	КонецЕсли;
	
	Возврат АдресВХранилище;
	
КонецФункции

&НаКлиенте
Процедура НастроитьПоиск(Команда)
	
	пкПодборТехникиКлиент.НастроитьПоиск(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийНаСервере

&НаСервере
Процедура СохранитьНастройкиФормыНаСервере()
	
	пкПодборТехникиСервер.СохранитьНастройкиФормыПодбора(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьФильтрыПриИзмененииНаСервере()
	
	пкПодборТехникиСервер.ПриИзмененииИспользованияФильтров(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВидНоменклатурыПриИзмененииНаСервере()
	
	пкПодборТехникиСервер.ПриИзмененииВидаНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоСтатусамТехники()
    
    пкПодборТехникиСервер.УстановитьОтборПоСтатусамТехникиНаСервере(ЭтаФорма);
    
КонецПроцедуры    

&НаСервере
Процедура ДеревоОтборовОтборПриИзмененииНаСервере()
	
	пкПодборТехникиСервер.ДеревоОтборовОтборПриИзменении(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура НоменклатураСАналогичнымиСвойствамиНаСервере()
	
	пкПодборТехникиСервер.ПриИзмененииОтображенияНоменклатураСАналогичнымиСвойствами(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКорзиныНаСервере()
	
	пкПодборТехникиСервер.ПриИзмененииКорзины(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СброситьОтборыПоСвойствамНаСервере()
	
	пкПодборТехникиСервер.СброситьОтборыПоСвойствам(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНовойНоменклатурыНаСервере(НовыйЭлементНоменклатуры)
	
	пкПодборТехникиСервер.ПриЗаписиНовойНоменклатуры(ЭтаФорма, НовыйЭлементНоменклатуры);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыСозданияНовойНоменклатурыНаСервере()
	
	Возврат пкПодборТехникиСервер.ПараметрыСозданияНовойНоменклатуры(ЭтаФорма);
	
КонецФункции

&НаКлиенте
Процедура ПодборПерейтиКСпискуНоменклатурыРасширенныйПоиск(Команда)
	
	пкПодборТехникиКлиент.ПерейтиКСпискуНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПерейтиКСпискуНоменклатурыСтандартныйПоиск(Команда)
	
	пкПодборТехникиКлиент.ПерейтиКСпискуНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаКоличествоПоМоделиПриИзменении(Элемент)
    ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
    
    Если ЗначениеЗаполнено(ТекущаяСтрока.Техника) Тогда
        ТекущаяСтрока.КоличествоПоМодели = 1;         
    КонецЕсли;    
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСтатусамПриИзменении(Элемент)
    
    //УстановитьОтборПоСтатусамТехники();
    
КонецПроцедуры

&НаКлиенте
Процедура ОтборМодельПриИзменении(Элемент)
    
    Если НЕ ЗначениеЗаполнено(ОтборМодель) Тогда
         ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    СписокТехники, "Модель", , , , Ложь);
    Иначе
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    СписокТехники, "Модель", ОтборМодель, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
        
    Если КодФормы = "ЗаявкаНаАрендуТехники" ИЛИ КодФормы = "Заказ-наряд" Тогда    
        СписокНоменклатура.Параметры.УстановитьЗначениеПараметра("Подразделение", ОтборПодразделение);   
    КонецЕсли;
    
    Если Элементы.СтраницыТехникаМодели.ТекущаяСтраница = Элементы.СтраницаТехника Тогда
        Если НЕ ЗначениеЗаполнено(ОтборПодразделение) Тогда
             ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
    		    СписокТехники, "Подразделение", , , , Ложь);
        Иначе
            ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
    		    СписокТехники, "Подразделение", ОтборПодразделение, , , Истина);
        КонецЕсли;
    Иначе
        пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(ПланированиеПоМоделям, "Подразделение", ОтборПодразделение);
        пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(ПланированиеПоМоделям, "Местонахождения", 
                ?(ЗначениеЗаполнено(ОтборПодразделение), пкОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ОтборПодразделение, "пкСкладТехники"), Неопределено));
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ОтборМестонахожденияПриИзменении(Элемент)
    
    Если НЕ ЗначениеЗаполнено(ОтборМестонахождения) Тогда
         ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    СписокТехники, "Местонахождения", , , , Ложь);
    Иначе
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    СписокТехники, "Местонахождения", ОтборМестонахождения, , , Истина);
    КонецЕсли;
        
КонецПроцедуры 

&НаКлиенте
Процедура ОтборЗакрепленаЗаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ОтборЗакрепленаЗа) Тогда
         ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    СписокТехники, "ЗакрепленаЗа", , , , Ложь);
    Иначе
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    СписокТехники, "ЗакрепленаЗа", ОтборЗакрепленаЗа, , , Истина);
    КонецЕсли;
        
КонецПроцедуры

//Рарус Владимир Подрезов 31.08.2017
&НаКлиенте
Процедура ОтборЗапретАрендыПриИзменении(Элемент)
	
//Рарус Владимир Подрезов 31.08.2017
	Если ОтборЗапретАренды = 1 Тогда //Только доступные
	    ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    СписокТехники, "ЗапретАренды", Ложь, , "ЗапретАренды", Истина);
	ИначеЕсли ОтборЗапретАренды = 2 Тогда //Только НЕ доступные
	    ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    СписокТехники, "ЗапретАренды", Истина, , "ЗапретАренды", Истина);
	Иначе //Все, фильтр отключаем
	    ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    СписокТехники, "ЗапретАренды", Истина, , "ЗапретАренды", Ложь);
	КонецЕсли;
		
	Если Элементы.СтраницыТехникаМодели.ТекущаяСтраница = Элементы.СтраницаПланированиеПоМоделям Тогда
		ОбновитьПланированиеПоМоделямНаСервере();	
	КонецЕсли;
//Рарус Владимир Подрезов Конец
        
КонецПроцедуры
//Рарус Владимир Подрезов Конец

&НаКлиенте
Процедура ОтборКлиентПриИзменении(Элемент)
    
    Если НЕ ЗначениеЗаполнено(ОтборКлиент) Тогда
         ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    СписокТехники, "Клиент", , , , Ложь);
    Иначе
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    СписокТехники, "Клиент", ОтборКлиент, , , Истина);
    КонецЕсли;
        
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеПродажиПриИзменении(Элемент)
    
    Если НЕ ЗначениеЗаполнено(ОтборПодразделениеПродажи) Тогда
         ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    СписокТехники, "ПодразделениеПродажи", , , , Ложь);
    Иначе
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    СписокТехники, "ПодразделениеПродажи", ОтборПодразделениеПродажи, , , Истина);
    КонецЕсли;
        
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеОтгрузкиПриИзменении(Элемент)
    
    Если НЕ ЗначениеЗаполнено(ОтборПодразделениеОтгрузки) Тогда
         ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    СписокТехники, "ПодразделениеОтгрузки", , , , Ложь);
    Иначе
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    СписокТехники, "ПодразделениеОтгрузки", ОтборПодразделениеОтгрузки, , , Истина);
    КонецЕсли;
        
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗаявкаНаАрендуТехникиПриИзменении(Элемент)
    
    Если НЕ ЗначениеЗаполнено(ОтборЗаявкаНаАрендуТехники) Тогда
         ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    СписокТехники, "ЗаявкаНаАрендуТехники", , , , Ложь);
    Иначе
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    СписокТехники, "ЗаявкаНаАрендуТехники", ОтборЗаявкаНаАрендуТехники, , , Истина);
    КонецЕсли;
        
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеОтгрузкиПриИзменении(Элемент)
    
    пкПодборТехникиКлиент.ОтображениеОтгрузкиПриИзменении(ЭтаФорма); 
    
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокТехникиНаСервере()
    
    пкПодборТехникиСервер.ОбновитьСписокТехники(ЭтаФорма);
    
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокТехники(Команда)
    
	// {Рарус ilkond 2017.04.10 techlab@rarus.ru
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремениСКомментарием(
		"Обработка.пкПодборТехники.Форма: ОбновитьСписокТехники", "Нажатие на кнопку ""Обновить""");
	// }Рарус ilkond 2017.04.10 techlab@rarus.ru 
    ОбновитьСписокТехникиНаСервере();
    
КонецПроцедуры

&НаКлиенте
Процедура ОтборНаБазеПриИзменении(Элемент)
    
    Если НЕ ОтборНаБазе И НЕ ОтборВАренде Тогда
        ОтборВАренде = Истина;     
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ОтборВАрендеПриИзменении(Элемент)
    
    Если НЕ ОтборНаБазе И НЕ ОтборВАренде Тогда
        ОтборНаБазе = Истина;     
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ОтборВРемонтеПриИзменении(Элемент)
    
    Если НЕ ОтборВРемонте И НЕ ОтборНеВРемонте Тогда
        ОтборНеВРемонте = Истина;     
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ОтборНеВРемонтеПриИзменении(Элемент)
    
    Если НЕ ОтборВРемонте И НЕ ОтборНеВРемонте Тогда
        ОтборВРемонте = Истина;     
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура ОбновитьПланированиеПоМоделямНаСервере()
    
    пкПодборТехникиСервер.ОбновитьПланированиеПоМоделямНаСервере(ЭтаФорма);   
    
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПланированиеПоМоделям(Команда)
    
	// {Рарус ilkond 2017.04.10 techlab@rarus.ru
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремениСКомментарием(
		"Обработка.пкПодборТехники.Форма: ОбновитьПланированиеПоМоделям", "Нажатие на кнопку ""Обновить""");
	// }Рарус ilkond 2017.04.10 techlab@rarus.ru 
    ОбновитьПланированиеПоМоделямНаСервере();
    
КонецПроцедуры

&НаКлиенте
Процедура СтраницыТехникаМоделиПриСменеСтраницы(Элемент, ТекущаяСтраница)
    
	// {Рарус ilkond 2017.04.10 techlab@rarus.ru
	Если Элементы.СтраницыТехникаМодели.ТекущаяСтраница = Элементы.СтраницаПланированиеПоМоделям Тогда
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремениСКомментарием(
			"Обработка.пкПодборТехники.Форма: ОбновитьПланированиеПоМоделям", "Переключение вкладок");
	Иначе
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремениСКомментарием(
			"Обработка.пкПодборТехники.Форма: ОбновитьСписокТехники", "Переключение вкладок");
	КонецЕсли;
	// }Рарус ilkond 2017.04.10 techlab@rarus.ru	
    СтраницыТехникаМоделиПриСменеСтраницыНаСервере();
    
КонецПроцедуры

&НаСервере
Процедура СтраницыТехникаМоделиПриСменеСтраницыНаСервере()
    
    Если Элементы.СтраницыТехникаМодели.ТекущаяСтраница = Элементы.СтраницаПланированиеПоМоделям Тогда
        ОбновитьПланированиеПоМоделямНаСервере();    
    Иначе
        ОбновитьСписокТехникиНаСервере();    
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#КонецОбласти

&НаКлиенте
Процедура ПланированиеПоМоделямВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если СтрНайти(Поле.Имя, "ПланированиеПоМоделямКОтгрузке") > 0 
		ИЛИ СтрНайти(Поле.Имя, "ПланированиеПоМоделямКВозврату") > 0
	Тогда
		ТекущиеДанные = Элементы.ПланированиеПоМоделям.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			
			текИмяФормы = "Обработка.пкПланДоставки.Форма.Форма";
			текПараметры = Новый Структура;
			текПараметры.Вставить("Модель", ТекущиеДанные.Модель);
			
			Если ЗначениеЗаполнено(ОтборПодразделение) Тогда
				текПараметры.Вставить("Подразделение", ОтборПодразделение);
			КонецЕсли;
			
	        ПервыйДень    = НачалоДня(ТекущаяДата());
	        ВторойДень    = ПервыйДень + 3600 * 24;
	        ТретийДень    = ВторойДень + 3600 * 24;
	        ЧетвертыйДень = ТретийДень + 3600 * 24;
	        ПятыйДень     = ЧетвертыйДень + 3600 * 24;
			
			Если Поле.Имя = "ПланированиеПоМоделямКОтгрузкеПервыйДень" 
				ИЛИ Поле.Имя = "ПланированиеПоМоделямКВозвратуПервыйДень" Тогда
				текПараметры.Вставить("ПериодОтгрузкиНачало", НачалоДня(ПервыйДень));
				текПараметры.Вставить("ПериодОтгрузкиОкончание", КонецДня(ПервыйДень));
			ИначеЕсли Поле.Имя = "ПланированиеПоМоделямКОтгрузкеВторойДень" 
				ИЛИ Поле.Имя = "ПланированиеПоМоделямКВозвратуВторойДень" Тогда
				текПараметры.Вставить("ПериодОтгрузкиНачало", НачалоДня(ВторойДень));
				текПараметры.Вставить("ПериодОтгрузкиОкончание", КонецДня(ВторойДень));
			ИначеЕсли Поле.Имя = "ПланированиеПоМоделямКОтгрузкеТретийДень" 
				ИЛИ Поле.Имя = "ПланированиеПоМоделямКВозвратуТретийДень" Тогда
				текПараметры.Вставить("ПериодОтгрузкиНачало", НачалоДня(ТретийДень));
				текПараметры.Вставить("ПериодОтгрузкиОкончание", КонецДня(ТретийДень));
			ИначеЕсли Поле.Имя = "ПланированиеПоМоделямКОтгрузкеЧетвертыйДень" 
				ИЛИ Поле.Имя = "ПланированиеПоМоделямКВозвратуЧетвертыйДень" Тогда
				текПараметры.Вставить("ПериодОтгрузкиНачало", НачалоДня(ЧетвертыйДень));
				текПараметры.Вставить("ПериодОтгрузкиОкончание", КонецДня(ЧетвертыйДень));
			ИначеЕсли Поле.Имя = "ПланированиеПоМоделямКОтгрузкеПятыйДень" 
				ИЛИ Поле.Имя = "ПланированиеПоМоделямКВозвратуПятыйДень" Тогда
				текПараметры.Вставить("ПериодОтгрузкиНачало", НачалоДня(ПятыйДень));
				текПараметры.Вставить("ПериодОтгрузкиОкончание", КонецДня(ПятыйДень));
			КонецЕсли;
			
			ОткрытьФорму(текИмяФормы, текПараметры);
			
        КонецЕсли;
        
    ИначеЕсли Поле.Имя = "ПланированиеПоМоделямВРемонте" Тогда
        
        ТекущиеДанные = Элементы.ПланированиеПоМоделям.ТекущиеДанные;
        
        Если ТекущиеДанные <> Неопределено Тогда
            МассивЗаказНарядов = ПолучитьЗаказНаряды(ТекущиеДанные.Модель);
                        
            ПараметрыОткрытия = Новый Структура("МассивЗаказНарядов,ОтборПодразделение", МассивЗаказНарядов,ОтборПодразделение);
            
            ОткрытьФорму("Обработка.пкУправлениеРемонтами.Форма.Форма", ПараметрыОткрытия);
			
        КонецЕсли;
        
    ИначеЕсли Поле.Имя = "ПланированиеПоМоделямМодель" Тогда
        
        ТекущиеДанные = Элементы.ПланированиеПоМоделям.ТекущиеДанные;
        
        Если ТекущиеДанные <> Неопределено Тогда
            ОтборМодель.Очистить();
            ОтборМодель.Добавить(ТекущиеДанные.Модель);
            
            Элементы.СтраницыТехникаМодели.ТекущаяСтраница = Элементы.СтраницаТехника;
            
            ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
    		    СписокТехники, "Модель", ОтборМодель, , , Истина);
        КонецЕсли;
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетАрендаТехники(Команда)
	
	тВариант = "Основной";
	тОтбор = Новый Структура;
	
	Если ЗначениеЗаполнено(ОтборКлиент) Тогда
		тВариант = "ПоКлиенту";
		тОтбор.Вставить("Клиент", ОтборКлиент);
	КонецЕсли;
	
	ОткрытьФорму("Отчет.пкАрендаТехники.ФормаОбъекта",
		Новый Структура("КлючВарианта, КлючНазначенияИспользования, Параметры, Отбор, СформироватьПриОткрытии, ВидимостьКомандВариантовОтчетов", 
			тВариант,
			, 
			Новый Структура("Период", Новый СтандартныйПериод(НачалоМесяца(ТекущаяДата()), КонецМесяца(ТекущаяДата()))),
			тОтбор, 
			Истина,
			Истина));
			
КонецПроцедуры
        
&НаСервере
Функция ПолучитьЗаказНаряды(МодельТехники)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   пкСтатусыРемонтаТехникиСрезПоследних.Регистратор КАК ЗаказНаряд
    |ИЗ
    |   РегистрСведений.пкСтатусыРемонтаТехники.СрезПоследних(
    |           &Дата,
    |           ВЫБОР
    |               КОГДА Регистратор ССЫЛКА Документ.пкЗаказНаряд
    |                   ТОГДА (Регистратор.Подразделение = &Подразделение
    |                           ИЛИ &Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
    |                           И Техника.пкМодель = &Модель
    |               ИНАЧЕ ЛОЖЬ
    |           КОНЕЦ) КАК пкСтатусыРемонтаТехникиСрезПоследних
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкСтатусыТехники.СрезПоследних(&Дата, ) КАК пкСтатусыТехникиСрезПоследних
    |       ПО пкСтатусыРемонтаТехникиСрезПоследних.Техника = пкСтатусыТехникиСрезПоследних.Техника
    |ГДЕ
    |   (пкСтатусыРемонтаТехникиСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.пкСтатусыРемонтаТехники.ВРемонте)
    |           ИЛИ пкСтатусыРемонтаТехникиСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.пкСтатусыРемонтаТехники.КРемонту))
    |   И пкСтатусыТехникиСрезПоследних.Статус <> ЗНАЧЕНИЕ(Перечисление.пкСтатусыТехники.Недоступен)
    |   И ВЫБОР
    |           КОГДА пкСтатусыРемонтаТехникиСрезПоследних.Регистратор ССЫЛКА Документ.пкЗаказНаряд
    |               ТОГДА ВЫБОР
    |                       КОГДА пкСтатусыРемонтаТехникиСрезПоследних.Регистратор.ВидРемонта.ОбщийВидРемонта.пкТипРемонта = ЗНАЧЕНИЕ(Перечисление.пкТипыРемонтов.Долгосрочный)
    |                               ИЛИ пкСтатусыРемонтаТехникиСрезПоследних.Регистратор.Статус = ЗНАЧЕНИЕ(Перечисление.пкСтатусыЗаказНарядов.Отложен)
    |                           ТОГДА ИСТИНА
    |                       ИНАЧЕ ЛОЖЬ
    |                   КОНЕЦ
    |           ИНАЧЕ ЛОЖЬ
    |       КОНЕЦ
    |   И ВЫБОР
    |           КОГДА &УчитыватьПлановуюДатуОкончанияРемонта
    |               ТОГДА НАЧАЛОПЕРИОДА(пкСтатусыРемонтаТехникиСрезПоследних.Регистратор.ДатаОкончания, ДЕНЬ) <> НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
    |           ИНАЧЕ ИСТИНА
    |       КОНЕЦ";
    
    Запрос.УстановитьПараметр("Дата",          ТекущаяДата());
    Запрос.УстановитьПараметр("Подразделение", ОтборПодразделение);   
    Запрос.УстановитьПараметр("Модель",        МодельТехники);   
    Запрос.УстановитьПараметр("УчитыватьПлановуюДатуОкончанияРемонта", УчитыватьПлановуюДатуОкончанияРемонта); 
    
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    МассивЗаказНарядов = Новый Массив();
    
    Пока Выборка.Следующий() Цикл
        МассивЗаказНарядов.Добавить(Выборка.ЗаказНаряд);
    КонецЦикла;
    
    Возврат МассивЗаказНарядов;

КонецФункции            

&НаКлиенте
Процедура УчитыватьПлановуюДатуОкончанияРемонтаПриИзменении(Элемент)
    
    пкПодборТехникиКлиентСервер.УстановитьПараметрДинамическогоСписка(ПланированиеПоМоделям, "УчитыватьПлановуюДатуОкончанияРемонта", УчитыватьПлановуюДатуОкончанияРемонта);
    
КонецПроцедуры   

//++ Рарус Лимаренко 02.11.2017
&НаКлиенте
Процедура ОткрытьОтчетТехникаНаБазе(Команда)
	
		
	Если ЗначениеЗаполнено(ОтборПодразделение) Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Отбор",Новый Структура("Склад",ОпределитьСклад(ОтборПодразделение)));
		
		ОткрытьФорму("Отчет.пкТехникаНаБазе.ФормаОбъекта",Отбор);
		
	КонецЕсли;
		
КонецПроцедуры
//-- Рарус Лимаренко 02.11.2017

&НаСервере
Функция ОпределитьСклад(ОтборПодразделение)

 Возврат ОтборПодразделение.пкСкладТехники;	

КонецФункции // ОпределитьСклад()



ВыполняетсяЗакрытие = Ложь;