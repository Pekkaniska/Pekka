&НаКлиенте
Перем НужноЗакрытьФорму;


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиенте
Процедура ИнициализацияМаршрутныйЛист()
	МаршрутныйЛистВодитель = Неопределено;
	МаршрутныйЛистДата = ТекущаяДата();
	МаршрутныйЛистТС = Неопределено;
	ОбновитьНомерТС();
	МаршрутныйЛистЗаказы.Очистить();
	
	СписокУчитываемыхЗаказов.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияРазнарядка()
	РазнарядкаДата = ТекущаяДата();
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьОтборСпискаЗаказовНаТС_СписокАктуальныхЗаказов()
	//обновление списка актуальных заказов
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатЗаказГрузоотправителя.Ссылка КАК ЗаказНаТС
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	(НЕ уатЗаказГрузоотправителя.Проведен)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатЗаказыНаТСОстатки.ЗаказГрузоотправителя
	|ИЗ
	|	РегистрНакопления.уатЗаказыГрузоотправителей.Остатки(&ДатаКон, ) КАК уатЗаказыНаТСОстатки
	|ГДЕ
	|	уатЗаказыНаТСОстатки.КоличествоОстаток > 0";
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДата()));
	
	СписокАктуальныхЗаказовНаТС = Новый СписокЗначений();
	СписокАктуальныхЗаказовНаТС.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЗаказНаТС"));
	
	Возврат СписокАктуальныхЗаказовНаТС;
КонецФункции

&НаКлиенте
Процедура УстановитьОтборСпискаЗаказовНаТС()
	СписокСсылокЗаказов = Новый СписокЗначений;
	
	СписокАктуальныхЗаказовНаТС = УстановитьОтборСпискаЗаказовНаТС_СписокАктуальныхЗаказов();
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокЗаказовНаТС, "ДатаНач", НачалоДня(ТекущаяДата()));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокЗаказовНаТС, "ДатаКон", КонецДня(ТекущаяДата()));
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокЗаказовНаТС, "Актуальность", ФлажокАктуальныеЗаказы);
	флИспользоватьОтборПоСсылке = Ложь;
	
	//учет закрытых заказов
	Если НЕ ФлажокЗакрытыеЗаказы Тогда
		СписокСсылокЗаказов = СписокАктуальныхЗаказовНаТС;
		флИспользоватьОтборПоСсылке = Истина;
	КонецЕсли;
		
	//установим отбор по ссылке - по списку документов
	Если флИспользоватьОтборПоСсылке Тогда
		уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(СписокЗаказовНаТС.Отбор, "Ссылка", СписокСсылокЗаказов, ВидСравненияКомпоновкиДанных.ВСписке);
	Иначе
		уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(СписокЗаказовНаТС.Отбор, "Ссылка", СписокСсылокЗаказов,, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция Заказ_ТЧтовары(ТекЗаказ)
	тблТовары = ТекЗаказ.Товары.Выгрузить();
	мсвСтрок = уатОбщегоНазначенияСервер.ПреобразоватьТаблицувМассивСтрок(тблТовары);
	Возврат мсвСтрок;
КонецФункции

&НаКлиенте
Процедура ВыбратьЗаказ()
	ТекСтрока = Элементы.СписокЗаказовНаТС.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекЗаказ = ТекСтрока.Ссылка;
	
	Если СписокУчитываемыхЗаказов.НайтиСтроки(Новый Структура("Заказ", ТекЗаказ)).Количество()  = 0 Тогда
		СтрокаТз = СписокУчитываемыхЗаказов.Добавить();
		СтрокаТз.Заказ = ТекЗаказ;
		СтрокаТз.Контрагент = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекЗаказ, "Контрагент");
		СтрокаТз.Объем = 0;	
		СтрокаТз.Вес = 0;
		СтрокаТз.ТребованиеКТС = ТекСтрока.ТребованиеКТС;
		СтрокаТз.ТребованиеКТСТипТС = ТекСтрока.ТребованиеКТСТипТС;
		
		мсвСтрокТовары = Заказ_ТЧтовары(ТекЗаказ);
		Для Каждого СтрокаТовары Из мсвСтрокТовары Цикл
			Если СтрокаТовары.ВесБрутто = 0 ИЛИ СтрокаТовары.Объем = 0 Тогда
				ВесОбъем = уатОбщегоНазначения.ПолучитьВесОбъемНоменклатуры(СтрокаТовары.Номенклатура, СтрокаТовары.ЕдиницаИзмерения);
			КонецЕсли;
			Если СтрокаТовары.ВесБрутто = 0 Тогда
				СтрокаТз.Вес = СтрокаТз.Вес + ВесОбъем.Вес * СтрокаТовары.Количество;
			Иначе
				СтрокаТз.Вес = СтрокаТз.Вес + СтрокаТовары.ВесБрутто/1000;
			КонецЕсли;
			Если СтрокаТовары.Объем = 0 Тогда
				СтрокаТз.Объем = СтрокаТз.Объем + ВесОбъем.Объем * СтрокаТовары.Количество;
			Иначе
				СтрокаТз.Объем = СтрокаТз.Объем + СтрокаТовары.Объем;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	УстановитьОтборТС();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборТС()
	флПодходящиеТС = (Элементы.СписокТСПоказатьПодходящиеТС.Пометка И СписокУчитываемыхЗаказов.Количество() > 0);
	
	Если флПодходящиеТС Тогда
		уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(СписокТС.Отбор, "Грузоподъемность",
			СписокУчитываемыхЗаказов.Итог("Вес"), ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
		уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(СписокТС.Отбор, "ОбъемКузова",
			СписокУчитываемыхЗаказов.Итог("Объем"), ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
	Иначе
		уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(СписокТС.Отбор, "Грузоподъемность", 0,, Ложь);
		уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(СписокТС.Отбор, "ОбъемКузова", 0,, Ложь);
	КонецЕсли;
	
	УстановитьОтборТСпоТребованиюКТС(флПодходящиеТС);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборТСпоТребованиюКТС(флПодходящиеТС)
	//очистка старых отборов
	Сч = СписокТС.Отбор.Элементы.Количество()-1;
	Пока Сч >= 0 Цикл
		ТекОтбор = СписокТС.Отбор.Элементы[Сч];
		Если ТекОтбор.Представление = "ОтборТребованиеТС" Тогда
			СписокТС.Отбор.Элементы.Удалить(ТекОтбор);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
	//установка новых отборов
	Если флПодходящиеТС Тогда
		Для Каждого ТекСтрока Из СписокУчитываемыхЗаказов Цикл
			Если ЗначениеЗаполнено(ТекСтрока.ТребованиеКТС) Тогда
				НовыйОтбор = СписокТС.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйОтбор.Представление = "ОтборТребованиеТС";
				НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Модель");
				НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				НовыйОтбор.ПравоеЗначение = ТекСтрока.ТребованиеКТС;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекСтрока.ТребованиеКТСТипТС) Тогда
				НовыйОтбор = СписокТС.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйОтбор.Представление = "ОтборТребованиеТС";
				НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипТС");
				НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				НовыйОтбор.ПравоеЗначение = ТекСтрока.ТребованиеКТСТипТС;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияДанныхАвтомобиляВФорме()
	//заполняем водителя
	СтруктураЭкипаж = уатЗащищенныеФункцииСервер.ЭкипажТСсУчетомГрафика(МаршрутныйЛистТС, МаршрутныйЛистДата, ТекОрганизация);
	МаршрутныйЛистВодитель = СтруктураЭкипаж.Водитель;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНомерТС()
	МаршрутныйЛистНомерТС = уатОбщегоНазначения.уатПредставлениеТС(МаршрутныйЛистТС, ТекОрганизация);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПЛ()
	Если ЗначениеЗаполнено(ПутевыеЛисты_ОтборОрганизация) Тогда
		уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(СписокПутевыхЛистов.Отбор, "Организация", ПутевыеЛисты_ОтборОрганизация);
	Иначе
		уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(СписокПутевыхЛистов.Отбор, "Организация", ПутевыеЛисты_ОтборОрганизация,, Ложь);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПутевыеЛисты_ОтборТС) Тогда
		уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(СписокПутевыхЛистов.Отбор, "ТранспортноеСредство", ПутевыеЛисты_ОтборТС);
	Иначе
		уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(СписокПутевыхЛистов.Отбор, "ТранспортноеСредство", ПутевыеЛисты_ОтборТС,, Ложь);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПутевыеЛисты_ОтборВодитель) Тогда
		уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(СписокПутевыхЛистов.Отбор, "Водитель1", ПутевыеЛисты_ОтборВодитель);
	Иначе
		уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(СписокПутевыхЛистов.Отбор, "Водитель1", ПутевыеЛисты_ОтборВодитель,, Ложь);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПутевыеЛисты_ОтборВидПЛ) Тогда
		уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(СписокПутевыхЛистов.Отбор, "ВидПЛ", ПутевыеЛисты_ОтборВидПЛ);
	Иначе
		уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(СписокПутевыхЛистов.Отбор, "ВидПЛ", ПутевыеЛисты_ОтборВидПЛ,, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМЛПоСпискуЗаказов()
	Сч = 1;
	МаршрутныйЛистЗаказы.Очистить();
	Для Каждого СтрТз Из СписокУчитываемыхЗаказов Цикл
		Для Каждого ТекЗаказ Из Заказ_ТЧтовары(СтрТз.Заказ) Цикл
			РеквизитыЗаказа = уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(СтрТз.Заказ, "АдресОтправления, АдресНазначения, ОтправлениеС, ОтправлениеПо, ДоставкаС, ДоставкаПо");
			
			Стр = МаршрутныйЛистЗаказы.Добавить();
			Стр.НомерСтроки = Сч;
			Стр.Заказ	          = СтрТз.Заказ;
			Стр.Номенклатура      = ТекЗаказ.Номенклатура;
			Стр.ЕдиницаИзмерения  = ТекЗаказ.ЕдиницаИзмерения;
			Стр.ЕдиницаИзмеренияПоЗаказу = ТекЗаказ.ЕдиницаИзмерения;
			Стр.Количество        = ТекЗаказ.Количество;
			Стр.ВесБрутто = ТекЗаказ.ВесБрутто;
			Стр.Объем = ТекЗаказ.Объем;
			Стр.КоличествоМест = ТекЗаказ.КоличествоМест;
			
			Стр.АдресОтправления = РеквизитыЗаказа.АдресОтправления;
			Стр.АдресНазначения = РеквизитыЗаказа.АдресНазначения;
			Стр.ОтправлениеС = РеквизитыЗаказа.ОтправлениеС;
			Стр.ОтправлениеПо = РеквизитыЗаказа.ОтправлениеПо;
			Стр.ДоставкаС = РеквизитыЗаказа.ДоставкаС;
			Стр.ДоставкаПо = РеквизитыЗаказа.ДоставкаПо;
			
			Сч = Сч + 1;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйМаршрутныйЛист()
	МаршрутныйЛистДата = ТекущаяДата();
	МаршрутныйЛистВодитель = Неопределено;
	МаршрутныйЛистТС = Неопределено;
	ОбновитьНомерТС();
	МаршрутныйЛистЗаказы.Очистить();
	
	СписокУчитываемыхЗаказов.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйРазнарядка()
	РазнарядкаДата = ТекущаяДата();
	РазнарядкаКолонна = Неопределено;
	РазнарядкаПодразделение = Неопределено;
	РазнарядкаРазнарядка.Очистить();
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайденныеПЛ(ПоискПо, ПоискСДаты, ПоискЗначение)
	Запрос = Новый Запрос;
	
	Если ПоискПо="ПоКонтрагенту" Тогда
		Запрос.Текст=
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	уатПутевойЛистЗадание.Ссылка КАК ПутевойЛист
		|ИЗ
		|	Документ.уатПутевойЛист.Задание КАК уатПутевойЛистЗадание
		|ГДЕ
		|	уатПутевойЛистЗадание.Контрагент = &Контрагент
		|	И уатПутевойЛистЗадание.Ссылка.ДатаВыезда >= &ДатаПоиска";
		Запрос.УстановитьПараметр("Контрагент", ПоискЗначение);
		
	ИначеЕсли ПоискПо="ПоПодразделению" Тогда
		Запрос.Текст=
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	уатПутевойЛистЗадание.Ссылка КАК ПутевойЛист
		|ИЗ
		|	Документ.уатПутевойЛист.Задание КАК уатПутевойЛистЗадание
		|ГДЕ
		|	уатПутевойЛистЗадание.Подразделение = &Подразделение
		|	И уатПутевойЛистЗадание.Ссылка.ДатаВыезда >= &ДатаПоиска";
		Запрос.УстановитьПараметр("Подразделение", ПоискЗначение);
		
	ИначеЕсли ПоискПо="ПоМаршруту" Тогда
		Запрос.Текст=
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	уатПутевойЛистЗадание.Ссылка КАК ПутевойЛист
		|ИЗ
		|	Документ.уатПутевойЛист.Задание КАК уатПутевойЛистЗадание
		|ГДЕ
		|	уатПутевойЛистЗадание.Маршрут = &Маршрут
		|	И уатПутевойЛистЗадание.Ссылка.ДатаВыезда >= &ДатаПоиска";
		Запрос.УстановитьПараметр("Маршрут", ПоискЗначение);
		
	ИначеЕсли ПоискПо="ПоАдресуПрибытия" Тогда
		Запрос.Текст=
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	уатПутевойЛистЗадание.Ссылка КАК ПутевойЛист
		|ИЗ
		|	Документ.уатПутевойЛист.Задание КАК уатПутевойЛистЗадание
		|ГДЕ
		|	уатПутевойЛистЗадание.АдресПрибытия = &АдресПрибытия
		|	И уатПутевойЛистЗадание.Ссылка.ДатаВыезда >= &ДатаПоиска";
		Запрос.УстановитьПараметр("АдресПрибытия", ПоискЗначение);
		
	ИначеЕсли ПоискПо="ПоАдресуУбытия" Тогда
		Запрос.Текст=
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	уатПутевойЛистЗадание.Ссылка КАК ПутевойЛист
		|ИЗ
		|	Документ.уатПутевойЛист.Задание КАК уатПутевойЛистЗадание
		|ГДЕ
		|	уатПутевойЛистЗадание.АдресУбытия = &АдресУбытия
		|	И уатПутевойЛистЗадание.Ссылка.ДатаВыезда >= &ДатаПоиска";
		Запрос.УстановитьПараметр("АдресУбытия", ПоискЗначение);
		
	ИначеЕсли ПоискПо="ПоОборудованию" Тогда
		Запрос.Текст=
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПутевойЛист
		|ИЗ
		|(ВЫБРАТЬ
		|	ПутевойЛистПрицепы.Ссылка КАК ПутевойЛист
		|ИЗ
		|	Документ.уатПутевойЛист.Прицепы КАК ПутевойЛистПрицепы
		|ГДЕ
		|	ПутевойЛистПрицепы.ТС = &Оборудование
		|	И ПутевойЛистПрицепы.Ссылка.ДатаВыезда >= &ДатаПоиска
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	ПутевойЛистЗадание.Ссылка
		|ИЗ
		|	Документ.уатПутевойЛист.Задание КАК ПутевойЛистЗадание
		|ГДЕ
		|	(ПутевойЛистЗадание.Прицеп1 = &Оборудование
		|	ИЛИ ПутевойЛистЗадание.Прицеп2 = &Оборудование)
		|	И ПутевойЛистЗадание.Ссылка.ДатаВыезда >= &ДатаПоиска) КАК тбл";
		Запрос.УстановитьПараметр("Оборудование", ПоискЗначение);
		
	ИначеЕсли ПоискПо="ПоГрузу" Тогда
		Запрос.Текст=
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	уатПутевойЛистЗадание.Ссылка КАК ПутевойЛист
		|ИЗ
		|	Документ.уатПутевойЛист.Задание КАК уатПутевойЛистЗадание
		|ГДЕ
		|	уатПутевойЛистЗадание.Номенклатура = &Номенклатура
		|	И уатПутевойЛистЗадание.Ссылка.ДатаВыезда >= &ДатаПоиска";
		Запрос.УстановитьПараметр("Номенклатура", ПоискЗначение);
		
	ИначеЕсли ПоискПо="ПоОбъектуСтроительства" Тогда
		Запрос.Текст=
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	уатПутевойЛистЗадание.Ссылка КАК ПутевойЛист
		|ИЗ
		|	Документ.уатПутевойЛист.Задание КАК уатПутевойЛистЗадание
		|ГДЕ
		|	уатПутевойЛистЗадание.ОбъектСтроительства = &ОбъектСтроительства
		|	И уатПутевойЛистЗадание.Ссылка.ДатаВыезда >= &ДатаПоиска";
		Запрос.УстановитьПараметр("ОбъектСтроительства", ПоискЗначение);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаПоиска", ПоискСДаты);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПутевойЛист");
КонецФункции

&НаСервереБезКонтекста
Процедура СоздатьМаршрутныйЛистСервер(РеквизитыШапки, ТЧзаказы, МЛссылка, ПЛссылка, СоздаватьМЛ, СоздаватьПЛ, ТекПользователь, ТекОрганизация, ДатаДокумента = Неопределено)
	ДокОбъект = Документы.уатМаршрутныйЛист.СоздатьДокумент();
	
	//заполняем шапку документа
	ДокОбъект.Организация = ТекОрганизация;
	уатОбщегоНазначенияСервер.ЗаполнитьШапкуДокумента(ДокОбъект,, Неопределено, Неопределено,,,, Новый Структура("Организация", ТекОрганизация));
	
	//заполняем водителей
	СтруктураЭкипаж = уатЗащищенныеФункцииСервер.ЭкипажТСсУчетомГрафика(РеквизитыШапки.ТС, РеквизитыШапки.Дата, ТекОрганизация);
	ДокОбъект.Водитель1 = РеквизитыШапки.Водитель;
	ДокОбъект.Водитель2 = СтруктураЭкипаж.Водитель2;
	ДокОбъект.Сотрудник1 = СтруктураЭкипаж.Сотрудник;
	ДокОбъект.Сотрудник2 = СтруктураЭкипаж.Сотрудник2;
	
	//заполняем реквизиты маршрутного листа в любом случае
	Если ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДокОбъект.Дата = ДатаДокумента - Секунда(ДатаДокумента);            	
	Иначе
		ДокОбъект.Дата = ТекущаяДата();
	КонецЕсли;
	ДокОбъект.ДатаИВремяВыполнения = РеквизитыШапки.Дата;
	ДокОбъект.ТС = РеквизитыШапки.ТС;
	ДокОбъект.ВидОперации = Перечисления.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя;
	
	ДокОбъект.Контрагент = уатОбщегоНазначения.МестонахождениеТС(РеквизитыШапки.ТС).Организация;
	Для каждого ТекСтрока ИЗ ТЧзаказы цикл
		НовСтрока = ДокОбъект.Заказы.Добавить();
		НовСтрока.Пункт 					= ТекСтрока.Заказ.АдресОтправления;
		НовСтрока.ТипТочкиМаршрута			= Перечисления.уатТипыТочекМаршрута.Погрузка;
		НовСтрока.ЗаказГрузоотправителя		= ТекСтрока.Заказ;
		НовСтрока.Номенклатура 				= ТекСтрока.Номенклатура;
		НовСтрока.ЕдиницаИзмерения  		= ТекСтрока.ЕдиницаИзмерения;
		НовСтрока.ЕдиницаИзмеренияПоЗаказу	= ТекСтрока.единицаИзмеренияПоЗаказу;
		НовСтрока.Количество 				= ТекСтрока.Количество;
		НовСтрока.КоличествоМест 			= ТекСтрока.КоличествоМест;
		НовСтрока.ВесБрутто                 = ТекСтрока.ВесБрутто;
		НовСтрока.Объем                     = ТекСтрока.Объем;
		НовСтрока.Стоянка                   = ТекСтрока.Заказ.СтоянкаПунктОтправления;
		НовСтрока.ПрибытиеПлан              = ТекСтрока.Заказ.ОтправлениеС;
	КонецЦикла;
	Для каждого ТекСтрока ИЗ ТЧзаказы цикл
		НовСтрока = ДокОбъект.Заказы.Добавить();
		НовСтрока.Пункт 					= ТекСтрока.Заказ.АдресНазначения;
		НовСтрока.ТипТочкиМаршрута			= Перечисления.уатТипыТочекМаршрута.Разгрузка;
		НовСтрока.ЗаказГрузоотправителя     = ТекСтрока.Заказ;
		НовСтрока.Номенклатура 				= ТекСтрока.Номенклатура;
		НовСтрока.ЕдиницаИзмерения  		= ТекСтрока.ЕдиницаИзмерения;
		НовСтрока.ЕдиницаИзмеренияПоЗаказу	= ТекСтрока.ЕдиницаИзмеренияПоЗаказу;
		НовСтрока.Количество 				= ТекСтрока.Количество;
		НовСтрока.КоличествоМест 			= ТекСтрока.КоличествоМест;
		НовСтрока.ВесБрутто                 = ТекСтрока.ВесБрутто;
		НовСтрока.Объем                     = ТекСтрока.Объем;
		НовСтрока.Стоянка                   = ТекСтрока.Заказ.СтоянкаПунктНазначения;
		НовСтрока.ПрибытиеПлан              = ТекСтрока.Заказ.ДоставкаС;
	КонецЦикла;
	
	Если ДокОбъект.Заказы.Количество() Тогда 
		ДокОбъект.ДатаИВремяОтправленияПлан = уатЗащищенныеФункцииСервер.СложитьВремя(ДокОбъект.Заказы[0].ПрибытиеПлан, ДокОбъект.Заказы[0].Стоянка);
	КонецЕсли;
	
	//а записываем маршрутный лист, только если установлен флаг
	Если СоздаватьМЛ Тогда
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			МЛссылка = ДокОбъект.Ссылка;
		Исключение
			Сообщить("Не удалось записать документ " + ДокОбъект, СтатусСообщения.Внимание);
			Возврат;
		КонецПопытки;
		
		ЗаписатьУчтенныеЗаказы(ДокОбъект, ТЧзаказы);
	КонецЕсли;
	
	Если СоздаватьПЛ Тогда 
		Пл = СоздатьПЛсервер(ДокОбъект, ТекПользователь);
		Попытка
			Пл.Записать(РежимЗаписиДокумента.Проведение);
			ПЛссылка = Пл.Ссылка;
		Исключение
			Сообщить("Не удалось записать документ " + Пл, СтатусСообщения.Внимание);
			Возврат;
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьПЛсервер(МаршрутныйЛист, ТекПользователь)
	Пл = Документы.уатПутевойЛист.СоздатьДокумент();
	
	//заполняем шапку документа
	Пл.Организация = МаршрутныйЛист.Организация;
	уатОбщегоНазначенияСервер.ЗаполнитьШапкуДокумента(Пл,, Неопределено, Неопределено,,,, Неопределено);
	
	//заполняем на осн. МЛ
	Пл.Заполнить(МаршрутныйЛист);
	
	Пл.Дата = МаршрутныйЛист.Дата;
	
	//Если НЕ ЗначениеЗаполнено(Пл.ДатаЗакрытия) Тогда
	//	Пл.ДатаЗакрытия = ТекущаяДата();
	//КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Пл.ДействителенДо) Тогда
		Пл.УстановитьДействителенДоПоУмолчанию();
	КонецЕсли;
	
	СтруктураОбъектовНастроек = Новый Структура;
	СтруктураОбъектовНастроек.Вставить("Организация", Пл.Организация);
	СтруктураОбъектовНастроек.Вставить("Подразделение", уатОбщегоНазначения.МестонахождениеТС(Пл.ТранспортноеСредство).Подразделение);
	СтруктураОбъектовНастроек.Вставить("Пользователь", ТекПользователь);
	Пл.ВидПЛ                 = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, "ОсновнойВидПЛ");
	Пл.РежимРасчетаВыработки = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, "ОсновнойРежимРасчетаВыработкиПЛ");
	Пл.ОсмотрелВрач          = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, "ОсновнойВрач");
	Пл.ВыдалДиспетчер        = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, "ОсновнойДиспетчер");
	Пл.ВыпустилМеханик       = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, "ОсновнойМеханик");
	Пл.ПринялДиспетчер       = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, "ОсновнойДиспетчер");
	Пл.ПринялМеханик         = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, "ОсновнойМеханик");
	Пл.РасчетФактРасходаГСМ  = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, "РасчетФактРасходаГСМ");
	Пл.Смена                 = 1;
	
	мОстатокТопливаВыезд = 0;
	мСоставТС = уатОбщегоНазначения.уатСоставТС(Пл.ТранспортноеСредство);
	флЗаполнитьВодителейПоУмолчанию = Ложь;
	Пл.ИнициализацияДанныхАвтомобиля(мОстатокТопливаВыезд, мСоставТС, флЗаполнитьВодителейПоУмолчанию);
	
	Возврат Пл;
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьУчтенныеЗаказы(МаршрутныйЛист, ТЧзаказы)
	Для Каждого СтрТЗ Из ТЧзаказы Цикл
		МенеджерЗаписи = РегистрыСведений.уатУчтенныеЗаказыПокупателя.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ЗаказПокупателя = СтрТЗ.Заказ;
		МенеджерЗаписи.МаршрутныйЛист = МаршрутныйЛист.Ссылка;
		Попытка
			МенеджерЗаписи.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Функция ПреобразоватьТЧвМассивСтрок(ТЧ, мсвКолонкиТЧ)
	мсвРез = Новый Массив;
	
	Для Каждого ТекСтрока Из ТЧ Цикл
		СтруктураСтроки = Новый Структура;
		Для Каждого ТекКолонка Из мсвКолонкиТЧ Цикл
			СтруктураСтроки.Вставить(ТекКолонка, ТекСтрока[ТекКолонка]);
		КонецЦикла;
		
		мсвРез.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат мсвРез;
КонецФункции

&НаКлиенте
Процедура СформироватьПодготовку()
	Если НЕ ЗначениеЗаполнено(ТекОрганизация) Тогда
		Сообщить("Не указана организация Разнарядки (организация заполняется из персональных настроек пользователя)!");
		Возврат;
	КонецЕсли;
	
	Если РазнарядкаРазнарядка.Количество() > 0 Тогда
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("СформироватьПодготовкуЗавершение", ЭтотОбъект), "Перед заполнением табличная часть будет очищена! Продолжить?", РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	СформироватьПодготовкуФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПодготовкуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    СформироватьПодготовкуФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура СформироватьПодготовкуФрагмент()
    
    Перем мсвПодготовка, НоваяСтрокаРазнарядка, ТекСтрока;
    
    РазнарядкаРазнарядка.Очистить();
    
    мсвПодготовка = СформироватьПодготовкуСервер(РазнарядкаДата, РазнарядкаКолонна, ТекОрганизация, мПредставлениеТСКакГосНомер);
    
    Для Каждого ТекСтрока Из мсвПодготовка Цикл
        НоваяСтрокаРазнарядка = РазнарядкаРазнарядка.Добавить();
        ЗаполнитьЗначенияСвойств(НоваяСтрокаРазнарядка, ТекСтрока);
    КонецЦикла;
    
    ПронумероватьРазнарядку();
    
    ОбновитьНомерТСвТЧ();
    ОбновитьНомерПрицепа1вТЧ();
    ОбновитьНомерПрицепа2вТЧ();
    
    //дописываем статусы
    ОбновитьСтатусыЗанятостиСервер();

КонецПроцедуры

&НаКлиенте
Процедура ПронумероватьРазнарядку()
	НомСтр = 1;
	Для Каждого ТекСтрока Из РазнарядкаРазнарядка Цикл
		ТекСтрока.НомерСтроки = НомСтр;
		НомСтр = НомСтр + 1;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьПодготовкуСервер(РазнарядкаДата, РазнарядкаКолонна, Организация, ПредставлениеТСКакГосНомер)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СправочникТранспортныеСредства.уатМодель КАК Модель,
	|	ВЫБОР
	|		КОГДА &ПредставлениеТСКакГосНомер
	|			ТОГДА СправочникТранспортныеСредства.Код
	|		ИНАЧЕ СправочникТранспортныеСредства.уатГаражныйНомер
	|	КОНЕЦ КАК НомерТС,
	|	СправочникТранспортныеСредства.уатГараж КАК Гараж,
	|	СправочникТранспортныеСредства.Ссылка КАК ТС,
	|	уатМестонахождениеТССрезПоследних.Организация КАК Организация,
	|	уатМестонахождениеТССрезПоследних.Колонна КАК Колонна,
	|	СправочникТранспортныеСредства.уатОсновнойРежимРаботы КАК РежимРаботыТС
	|ИЗ
	|	Справочник.ТранспортныеСредства КАК СправочникТранспортныеСредства
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних(&ДатаНач) КАК уатМестонахождениеТССрезПоследних
	|		ПО СправочникТранспортныеСредства.Ссылка = уатМестонахождениеТССрезПоследних.ТС
	|ГДЕ
	|	уатМестонахождениеТССрезПоследних.Организация = &Организация
	|	И СправочникТранспортныеСредства.уатМодель.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Автотранспорт)
	|	И (СправочникТранспортныеСредства.Тип = &ПустойТипТС
	|			ИЛИ НЕ СправочникТранспортныеСредства.Тип.уатВидТС В (&СписокПрицепов))
	|	И (СправочникТранспортныеСредства.уатДатаВыбытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ СправочникТранспортныеСредства.уатДатаВыбытия > &ДатаДокумента)";
	
	Если ЗначениеЗаполнено(РазнарядкаКолонна) Тогда
		Запрос.Текст = Запрос.Текст + "
			|	И уатМестонахождениеТССрезПоследних.Колонна В Иерархии (&Колонна)";
		Запрос.УстановитьПараметр("Колонна", РазнарядкаКолонна);
	КонецЕсли;				   
	
	Запрос.УстановитьПараметр("ПустойТипТС", Справочники.ТипыТранспортныхСредств.ПустаяСсылка());
	Запрос.УстановитьПараметр("СписокПрицепов", уатОбщегоНазначения.уатСписокВидовТСПрицепов());
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(РазнарядкаДата));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(РазнарядкаДата));
	Запрос.УстановитьПараметр("ДатаДокумента", РазнарядкаДата);
	Запрос.УстановитьПараметр("ПредставлениеТСКакГосНомер", ПредставлениеТСКакГосНомер);
	
	тблРазнарядка = Запрос.Выполнить().Выгрузить();
	тблРазнарядка.Колонки.Добавить("ДатаВыезда");
	тблРазнарядка.Колонки.Добавить("ДатаВозвращения");
	тблРазнарядка.Колонки.Добавить("Прицеп1");
	тблРазнарядка.Колонки.Добавить("Прицеп2");
	тблРазнарядка.Колонки.Добавить("Водитель");
	тблРазнарядка.Колонки.Добавить("Водитель2");
	тблРазнарядка.Колонки.Добавить("Кондуктор");
	тблРазнарядка.Колонки.Добавить("Кондуктор2");
	
	Для каждого ТекСтрока из тблРазнарядка Цикл
		// Заполняем прицепы по умолчанию
		тСч = 0;
		СоставТС = уатОбщегоНазначения.уатСоставТС(ТекСтрока.ТС);
		Для Каждого тПрицеп из СоставТС Цикл
			тСч = тСч + 1;
			Если тСч = 1 Тогда 
				ТекСтрока.Прицеп1 = тПрицеп;
			ИначеЕсли тСч = 2 Тогда
				ТекСтрока.Прицеп2 = тПрицеп;
			Иначе	
				Прервать; 
			КонецЕсли;
		КонецЦикла;	
		
		Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ТекСтрока.РежимРаботыТС) Тогда
			ТекСтрока.ДатаВыезда = НачалоДня(РазнарядкаДата) + (уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, "ВремяВыездаПЛ") - '00010101');
			ТекСтрока.ДатаВозвращения = НачалоДня(РазнарядкаДата) + (уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, "ВремяВозращенияПЛ") - '00010101');
		Иначе	
			ТекСтрока.ДатаВыезда = НачалоДня(РазнарядкаДата) + (ТекСтрока.РежимРаботыТС.НачалоРаботы - НачалоДня(ТекСтрока.РежимРаботыТС.НачалоРаботы));
			ТекСтрока.ДатаВозвращения = НачалоДня(РазнарядкаДата) + (ТекСтрока.РежимРаботыТС.КонецРаботы - НачалоДня(ТекСтрока.РежимРаботыТС.КонецРаботы));
		КонецЕсли;	
		Если ТекСтрока.ДатаВозвращения <= ТекСтрока.ДатаВыезда Тогда
			ТекСтрока.ДатаВозвращения = НачалоДня(РазнарядкаДата) + 86400 + (ТекСтрока.ДатаВозвращения - НачалоДня(ТекСтрока.ДатаВозвращения));
		КонецЕсли;	
		
		//заполняем водителей
		СтруктураЭкипаж = уатЗащищенныеФункцииСервер.ЭкипажТСсУчетомГрафика(ТекСтрока.ТС, ТекСтрока.ДатаВыезда, Организация);
		ТекСтрока.Водитель = СтруктураЭкипаж.Водитель;
		ТекСтрока.Водитель2 = СтруктураЭкипаж.Водитель2;
		ТекСтрока.Кондуктор = СтруктураЭкипаж.Сотрудник;
		ТекСтрока.Кондуктор2 = СтруктураЭкипаж.Сотрудник2;
	КонецЦикла;
	
	тблРазнарядка.Сортировать("НомерТС");
	
	//преобразуем в массив строк
	мсвРез = уатОбщегоНазначенияСервер.ПреобразоватьТаблицувМассивСтрок(тблРазнарядка);
	
	Возврат мсвРез;
КонецФункции

&НаСервере
Процедура ОбновитьСтатусыЗанятостиСервер(ТекСтрокаНомер = Неопределено)
	уатОбщегоНазначения.ОбновитьСтатусыЗанятости(РазнарядкаРазнарядка, РазнарядкаДата, ТекОрганизация, ТекСтрокаНомер);
КонецПроцедуры

&НаСервере
Процедура ОбновитьНомерТСвТЧ(Знач ТекСтрока = Неопределено)
	Если ТекСтрока <> Неопределено Тогда
		ТекСтрока = РазнарядкаРазнарядка.НайтиПоИдентификатору(ТекСтрока);
	КонецЕсли;
	
	Если ТекСтрока = Неопределено Тогда
		Для Каждого ТекСтрокаТЧ Из РазнарядкаРазнарядка Цикл
			ТекСтрокаТЧ.НомерТС = уатОбщегоНазначения.уатПредставлениеТС(ТекСтрокаТЧ.ТС, ТекОрганизация);
		КонецЦикла;
	Иначе
		ТекСтрока.НомерТС = уатОбщегоНазначения.уатПредставлениеТС(ТекСтрока.ТС, ТекОрганизация);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьНомерПрицепа1вТЧ(Знач ТекСтрока = Неопределено)
	Если ТекСтрока <> Неопределено Тогда
		ТекСтрока = РазнарядкаРазнарядка.НайтиПоИдентификатору(ТекСтрока);
	КонецЕсли;
	
	Если ТекСтрока = Неопределено Тогда
		Для Каждого ТекСтрокаТЧ Из РазнарядкаРазнарядка Цикл
			ТекСтрокаТЧ.НомерПрицепа1 = уатОбщегоНазначения.уатПредставлениеТС(ТекСтрокаТЧ.Прицеп1, ТекОрганизация);
		КонецЦикла;
	Иначе
		ТекСтрока.НомерПрицепа1 = уатОбщегоНазначения.уатПредставлениеТС(ТекСтрока.Прицеп1, ТекОрганизация);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьНомерПрицепа2вТЧ(Знач ТекСтрока = Неопределено)
	Если ТекСтрока <> Неопределено Тогда
		ТекСтрока = РазнарядкаРазнарядка.НайтиПоИдентификатору(ТекСтрока);
	КонецЕсли;
	
	Если ТекСтрока = Неопределено Тогда
		Для Каждого ТекСтрокаТЧ Из РазнарядкаРазнарядка Цикл
			ТекСтрокаТЧ.НомерПрицепа2 = уатОбщегоНазначения.уатПредставлениеТС(ТекСтрокаТЧ.Прицеп2, ТекОрганизация);
		КонецЦикла;
	Иначе
		ТекСтрока.НомерПрицепа2 = уатОбщегоНазначения.уатПредставлениеТС(ТекСтрока.Прицеп2, ТекОрганизация);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокВидовКонтактовСервер()
	СписокВидовКонтактов = Новый СписокЗначений;
	
	Выборка = Справочники.ВидыКонтактнойИнформации.Выбрать(Справочники.ВидыКонтактнойИнформации.СправочникКонтрагенты);
	Пока Выборка.Следующий() Цикл
		Если Выборка.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес
			И СписокВидовКонтактов.НайтиПоЗначению(Выборка.Ссылка) = Неопределено Тогда
			
			СписокВидовКонтактов.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокВидовКонтактов;
КонецФункции

&НаКлиенте
Процедура ОбновитьСписокВыбораЭкипажаМЛ()
	Элементы.МаршрутныйЛистВодитель.СписокВыбора.Очистить();
	
	ЭкипажТССписок = уатЗащищенныеФункцииСервер.ЭкипажТССписок(МаршрутныйЛистТС);
	ЭкипажТССписок_Количество = ЭкипажТССписок.Количество();
	
	Элементы.МаршрутныйЛистВодитель.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	
	Если ЭкипажТССписок_Количество = 0 Тогда	
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСотр Из ЭкипажТССписок Цикл
		Элементы.МаршрутныйЛистВодитель.СписокВыбора.Добавить(ТекСотр.Значение);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокВыбораЭкипажаРазнарядка()
	ТекСтрока = Элементы.РазнарядкаРазнарядка.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.РазнарядкаРазнарядкаВодитель.СписокВыбора.Очистить();
	Элементы.РазнарядкаРазнарядкаВодитель2.СписокВыбора.Очистить();
	Элементы.РазнарядкаРазнарядкаКондуктор.СписокВыбора.Очистить();
	Элементы.РазнарядкаРазнарядкаКондуктор2.СписокВыбора.Очистить();
	
	ЭкипажТССписок = уатЗащищенныеФункцииСервер.ЭкипажТССписок(ТекСтрока.ТС);
	ЭкипажТССписок_Количество = ЭкипажТССписок.Количество();
	
	Элементы.РазнарядкаРазнарядкаВодитель.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	Элементы.РазнарядкаРазнарядкаВодитель2.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	Элементы.РазнарядкаРазнарядкаКондуктор.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	Элементы.РазнарядкаРазнарядкаКондуктор2.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	
	Если ЭкипажТССписок_Количество = 0 Тогда	
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСотр Из ЭкипажТССписок Цикл
		Элементы.РазнарядкаРазнарядкаВодитель.СписокВыбора.Добавить(ТекСотр.Значение);
		Элементы.РазнарядкаРазнарядкаВодитель2.СписокВыбора.Добавить(ТекСотр.Значение);
		Элементы.РазнарядкаРазнарядкаКондуктор.СписокВыбора.Добавить(ТекСотр.Значение);
		Элементы.РазнарядкаРазнарядкаКондуктор2.СписокВыбора.Добавить(ТекСотр.Значение);
	КонецЦикла;
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПоказатьПодходящиеТС(Команда)
	Элементы.СписокТСПоказатьПодходящиеТС.Пометка = НЕ Элементы.СписокТСПоказатьПодходящиеТС.Пометка;
	УстановитьОтборТС();
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеЗаказыОчистить(Команда)
	Если СписокУчитываемыхЗаказов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;    	  
	ПоказатьВопрос(Новый ОписаниеОповещения("ВыбранныеЗаказыОчиститьЗавершение", ЭтотОбъект), "Очистить список заказов?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеЗаказыОчиститьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    СписокУчитываемыхЗаказов.Очистить();
    МаршрутныйЛистЗаказы.Очистить();
    
    УстановитьОтборТС();

КонецПроцедуры

&НаКлиенте
Процедура СоздатьМаршрутныйЛист(Команда)
	
	Если НЕ СоздаватьМЛ И НЕ СоздаватьПЛ Тогда
		ПоказатьПредупреждение(Неопределено, "Не выбраны документы для создания!", 10);
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьМаршрутныйЛистЗавершение", ЭтотОбъект), "Создать документы?", РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьМаршрутныйЛистЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(МаршрутныйЛистВодитель) Тогда
		ТекстОшибки = "Не указан водитель.";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "МаршрутныйЛистВодитель");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекОрганизация) Тогда
		ТекстОшибки = НСтр("ru = 'Не указана организация.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "ТекОрганизация");
		Возврат;
	КонецЕсли;

	
	МЛссылка = Неопределено;
	ПЛСсылка = Неопределено;
	РеквизитыШапки = Новый Структура("Дата, ТС, Водитель", МаршрутныйЛистДата, МаршрутныйЛистТС, МаршрутныйЛистВодитель);
	
	мсвКолонкиТЧ = Новый Массив;
	мсвКолонкиТЧ.Добавить("ДатаВыполнения");
	мсвКолонкиТЧ.Добавить("Заказ");
	мсвКолонкиТЧ.Добавить("Номенклатура");
	мсвКолонкиТЧ.Добавить("Количество");
	мсвКолонкиТЧ.Добавить("КоличествоМест");
	мсвКолонкиТЧ.Добавить("ЕдиницаИзмерения");
	мсвКолонкиТЧ.Добавить("ЕдиницаИзмеренияПоЗаказу");
	мсвКолонкиТЧ.Добавить("АдресОтправления");
	мсвКолонкиТЧ.Добавить("АдресНазначения");
	мсвКолонкиТЧ.Добавить("ОтправлениеС");
	мсвКолонкиТЧ.Добавить("ОтправлениеПо");
	мсвКолонкиТЧ.Добавить("ДоставкаС");
	мсвКолонкиТЧ.Добавить("ДоставкаПо");
	мсвКолонкиТЧ.Добавить("ВесБрутто");
	мсвКолонкиТЧ.Добавить("Объем");
	ТЧзаказы = ПреобразоватьТЧвМассивСтрок(МаршрутныйЛистЗаказы, мсвКолонкиТЧ);
	
	СоздатьМаршрутныйЛистСервер(РеквизитыШапки, ТЧзаказы, МЛссылка, ПЛСсылка, СоздаватьМЛ, СоздаватьПЛ, ТекПользователь, ТекОрганизация, МаршрутныйЛистДата);
	
	Элементы.СписокМаршрутныхЛистов.Обновить();
	Элементы.СписокПутевыхЛистов.Обновить();
	
	Если ЗначениеЗаполнено(МЛссылка) Тогда
		Если ОткрыватьДокументыПриСоздании Тогда
			ПоказатьЗначение(Неопределено, МЛссылка);
		КонецЕсли;
		Если ПечататьМЛ Тогда
			мсвДок = Новый Массив;
			мсвДок.Добавить(МЛссылка);
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.уатМаршрутныйЛист", "МаршрутныйЛист", мсвДок, ЭтотОбъект);
		КонецЕСли;
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.МаршрутныеЛисты;
		Элементы.СписокМаршрутныхЛистов.ТекущаяСтрока = МЛссылка;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПЛСсылка) Тогда
		Если ОткрыватьДокументыПриСоздании Тогда
			ПоказатьЗначение(Неопределено, ПЛСсылка);
		КонецЕсли;
		Если ПечататьПЛ Тогда
			мсвДок = Новый Массив;
			мсвДок.Добавить(ПЛссылка);
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.уатПутевойЛист", "ПечатьВесьДокумент", мсвДок, ЭтотОбъект);
		КонецЕСли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МЛссылка) Или ЗначениеЗаполнено(ПЛСсылка) Тогда
		СоздатьНовыйМаршрутныйЛист(); 
		ИнициализацияДанныхАвтомобиляВФорме();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьМаршрутныйЛист(Команда)
	ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьМаршрутныйЛистЗавершение", ЭтотОбъект), "Очистить текущий документ?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьМаршрутныйЛистЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    СоздатьНовыйМаршрутныйЛист();
    ИнициализацияДанныхАвтомобиляВФорме();

КонецПроцедуры

&НаКлиенте
Процедура ПутевыеЛистыПоиск(Команда)
	Если НЕ ЗначениеЗаполнено(ПутевыеЛисты_ПоискПо) ИЛИ НЕ ЗначениеЗаполнено(ПутевыеЛисты_ПоискЗначение) Тогда 
		Возврат; 
	КонецЕсли;
	
	мсвДок = НайденныеПЛ(ПутевыеЛисты_ПоискПо, ПутевыеЛисты_ПоискСДаты, ПутевыеЛисты_ПоискЗначение);
	СписокДокументов = Новый СписокЗначений;
	СписокДокументов.ЗагрузитьЗначения(мсвДок);
	
	Если СписокДокументов.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, "По указанным критериям ничего не найдено!", 10);
	Иначе
		ВыбранныйДокумент = Неопределено;

		СписокДокументов.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ПутевыеЛистыПоискЗавершение", ЭтотОбъект), "Результаты поиска");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПутевыеЛистыПоискЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
    
    ВыбранныйДокумент = ВыбранныйЭлемент;
    Если ВыбранныйДокумент <> Неопределено Тогда
        ТекущийЭлемент = Элементы.СписокПутевыхЛистов;
        Элементы.СписокПутевыхЛистов.ТекущаяСтрока = ВыбранныйДокумент.Значение;
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПакетнаяВыписка(Команда)
	ОткрытьФорму("Обработка.уатПакетнаяВыпискаПЛ.Форма");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодготовку(Команда)
	СформироватьПодготовку();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусыЗанятостиТС(Команда)
	ОбновитьСтатусыЗанятостиСервер();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРазнарядку(Команда)
	ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьРазнарядкуЗавершение", ЭтотОбъект), "Создать документ Разнарядка?", РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРазнарядкуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    РазнарядкаСсылка = Неопределено;
    РеквизитыШапки = Новый Структура("Дата, Колонна, Подразделение, Организация", РазнарядкаДата, РазнарядкаКолонна, РазнарядкаПодразделение, ТекОрганизация);
    мсвКолонкиТЧ = Новый Массив;
    мсвКолонкиТЧ.Добавить("ТС");
    мсвКолонкиТЧ.Добавить("Прицеп1");
    мсвКолонкиТЧ.Добавить("Прицеп2");
    мсвКолонкиТЧ.Добавить("Водитель");
    мсвКолонкиТЧ.Добавить("Водитель2");
    мсвКолонкиТЧ.Добавить("Кондуктор");
    мсвКолонкиТЧ.Добавить("Кондуктор2");
    мсвКолонкиТЧ.Добавить("РежимРаботыТС");
    мсвКолонкиТЧ.Добавить("ДатаВозвращения");
    мсвКолонкиТЧ.Добавить("ДатаВыезда");
    мсвКолонкиТЧ.Добавить("Груз1");
    мсвКолонкиТЧ.Добавить("Груз2");
    мсвКолонкиТЧ.Добавить("Контрагент");
    мсвКолонкиТЧ.Добавить("Подразделение");
    мсвКолонкиТЧ.Добавить("АдресПрибытия");
    мсвКолонкиТЧ.Добавить("АдресУбытия1");
    мсвКолонкиТЧ.Добавить("ВремяПрибытия");
    мсвКолонкиТЧ.Добавить("ВремяУбытия");
    мсвКолонкиТЧ.Добавить("Контрагент2");
    мсвКолонкиТЧ.Добавить("Подразделение2");
    мсвКолонкиТЧ.Добавить("АдресПрибытия2");
    мсвКолонкиТЧ.Добавить("АдресУбытия2");
    мсвКолонкиТЧ.Добавить("ВремяПрибытия2");
    мсвКолонкиТЧ.Добавить("ВремяУбытия2");
    ТЧразнарядка = ПреобразоватьТЧвМассивСтрок(РазнарядкаРазнарядка, мсвКолонкиТЧ);;
    СоздатьРазнарядкуСервер(РеквизитыШапки, ТЧразнарядка, РазнарядкаСсылка, ТекПользователь, ТекОрганизация);
	
	Если ЗначениеЗаполнено(РазнарядкаСсылка) Тогда
		Если ОткрыватьДокументыРазнарядкаПриСоздании Тогда
			ПоказатьЗначение(Неопределено, РазнарядкаСсылка);
		Иначе
			ТекстОшибки = "Создан документ: " + РазнарядкаСсылка;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
		Если ПечататьРазнарядку Тогда
			мсвДок = Новый Массив;
			мсвДок.Добавить(РазнарядкаСсылка);
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.уатРазнарядка", "Разнарядка", мсвДок, Неопределено, Неопределено);
		КонецЕСли;
		Если ОчищатьПриСозданииРазнарядки Тогда
			СоздатьНовыйРазнарядка();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьРазнарядкуСервер(РеквизитыШапки, ТЧразнарядка, РазнарядкаСсылка, ТекПользователь, ТекОрганизация)
	ДокОбъект = Документы.уатРазнарядка.СоздатьДокумент();
	
	//заполняем шапку документа
	уатОбщегоНазначенияСервер.ЗаполнитьШапкуДокумента(ДокОбъект,, Неопределено, Неопределено,,,, Неопределено);
	
	//заполняем реквизиты документа в любом случае
	ДокОбъект.Дата = РеквизитыШапки.Дата;
	ДокОбъект.Колонна = РеквизитыШапки.Колонна;
	ДокОбъект.Подразделение = РеквизитыШапки.Подразделение;
	ДокОбъект.Организация = РеквизитыШапки.Организация;
	
	Для каждого ТекСтрока ИЗ ТЧразнарядка цикл
		НовСтрока = ДокОбъект.Разнарядка.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
	КонецЦикла;
			
	//записываем
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		РазнарядкаСсылка = ДокОбъект.Ссылка;
	Исключение
		Сообщить("Не удалось записать документ " + ДокОбъект, СтатусСообщения.Внимание);
		Возврат;
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРазнарядку(Команда)
	ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьРазнарядкуЗавершение", ЭтотОбъект), "Очистить текущий документ?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРазнарядкуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    СоздатьНовыйРазнарядка();

КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.МаршрутныйЛист Тогда
		Элементы.ТекОрганизация.АвтоОтметкаНезаполненного = Истина;
		ЗаполнитьМЛПоСпискуЗаказов();
	ИначеЕсли ТекущаяСтраница = Элементы.ПутевыеЛисты Тогда
		Элементы.ТекОрганизация.АвтоОтметкаНезаполненного = Ложь;
		УстановитьОтборПЛ();
	Иначе
		Элементы.ТекОрганизация.АвтоОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	Элементы.ТекОрганизация.ОтметкаНезаполненного = Элементы.ТекОрганизация.АвтоОтметкаНезаполненного;

КонецПроцедуры

&НаКлиенте
Процедура ФлажокАктуальныеЗаказыПриИзменении(Элемент)
	УстановитьОтборСпискаЗаказовНаТС();
КонецПроцедуры

&НаКлиенте
Процедура ФлажокЗакрытыеЗаказыПриИзменении(Элемент)
	УстановитьОтборСпискаЗаказовНаТС();
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаказовНаТСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Поле.Имя = "СписокЗаказовНаТСТребованиеКТС" Тогда
		ПоказатьЗначение(Неопределено, Элементы.СписокЗаказовНаТС.ТекущиеДанные.ТребованиеКТС);
	ИначеЕсли Поле.Имя = "СписокЗаказовНаТСТребованиеКТСТипТС" Тогда
		ПоказатьЗначение(Неопределено, Элементы.СписокЗаказовНаТС.ТекущиеДанные.ТребованиеКТСТипТС);
	Иначе
		ВыбратьЗаказ();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокУчитываемыхЗаказовПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ПоказатьЗначение(Неопределено, 	Элементы.СписокУчитываемыхЗаказов.ТекущиеДанные.Заказ);
КонецПроцедуры

&НаКлиенте
Процедура СписокУчитываемыхЗаказовПослеУдаления(Элемент)
	УстановитьОтборТС();
КонецПроцедуры

&НаКлиенте
Процедура СписокТСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	МаршрутныйЛистТС = ВыбраннаяСтрока;
	ОбновитьНомерТС();
	ОбновитьСписокВыбораЭкипажаМЛ();
	ИнициализацияДанныхАвтомобиляВФорме();
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.МаршрутныйЛист;
	ГруппаСтраницыПриСменеСтраницы(Элементы.ГруппаСтраницы, Элементы.МаршрутныйЛист);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутныйЛистНомерТСПриИзменении(Элемент)
	уатИнтерфейсВводаТС.НомерТСПриИзменении(МаршрутныйЛистНомерТС, МаршрутныйЛистТС, ТекОрганизация);
	ОбновитьНомерТС();
	ОбновитьСписокВыбораЭкипажаМЛ();
	ИнициализацияДанныхАвтомобиляВФорме();
КонецПроцедуры

&НаКлиенте
Процедура МаршрутныйЛистНомерТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(ТекОрганизация) Тогда
		СтруктураОтбора.Вставить("уатОрганизация", ТекОрганизация);
		СтруктураОтбора.Вставить("уатВидМоделиТС", ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Автотранспорт"));
	КонецЕсли;
	уатИнтерфейсВводаТС.НомерТСНачалоВыбора(Элемент, МаршрутныйЛистТС, СтруктураОтбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутныйЛистНомерТСОчистка(Элемент, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.НомерТСОчистка(МаршрутныйЛистТС);
	ИнициализацияДанныхАвтомобиляВФорме();
КонецПроцедуры

&НаКлиенте
Процедура МаршрутныйЛистНомерТСОткрытие(Элемент, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.НомерТСОткрытие(МаршрутныйЛистТС, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутныйЛистНомерТСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.НомерТСОбработкаВыбора(МаршрутныйЛистНомерТС, МаршрутныйЛистТС, ВыбранноеЗначение, СтандартнаяОбработка, ТекОрганизация);
	ИнициализацияДанныхАвтомобиляВФорме();
	ОбновитьСписокВыбораЭкипажаМЛ();
КонецПроцедуры

&НаКлиенте
Процедура МаршрутныйЛистНомерТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.НомерТСАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, ТекОрганизация);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутныйЛистНомерТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.НомерТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, ТекОрганизация);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутныйЛистВодительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, МаршрутныйЛистВодитель, Новый Структура("Организация", ТекОрганизация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутныйЛистВодительОткрытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(МаршрутныйЛистВодитель, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутныйЛистВодительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", ТекОрганизация, МаршрутныйЛистДата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутныйЛистВодительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", ТекОрганизация, МаршрутныйЛистДата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ПутевыеЛисты_ОтборОрганизацияПриИзменении(Элемент)
	УстановитьОтборПЛ();
КонецПроцедуры

&НаКлиенте
Процедура ПутевыеЛисты_ОтборВидПЛПриИзменении(Элемент)
	УстановитьОтборПЛ();
КонецПроцедуры

&НаКлиенте
Процедура ПутевыеЛисты_ОтборТСПриИзменении(Элемент)
	УстановитьОтборПЛ();
КонецПроцедуры

&НаКлиенте
Процедура ПутевыеЛисты_ОтборВодительПриИзменении(Элемент)
	УстановитьОтборПЛ();
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоПриИзменении(Элемент)
	Если ПутевыеЛисты_ПоискПо = "ПоКонтрагенту" Тогда
		ПутевыеЛисты_ПоискЗначение = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		
	ИначеЕсли ПутевыеЛисты_ПоискПо = "ПоПодразделению" Тогда
		ПутевыеЛисты_ПоискЗначение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
		
	ИначеЕсли ПутевыеЛисты_ПоискПо = "ПоМаршруту" Тогда
		ПутевыеЛисты_ПоискЗначение = ПредопределенноеЗначение("Справочник.уатМаршруты.ПустаяСсылка");
		
	ИначеЕсли ПутевыеЛисты_ПоискПо = "ПоАдресуПрибытия" Тогда
		ПутевыеЛисты_ПоискЗначение = ПредопределенноеЗначение("Справочник.уатПунктыНазначения.ПустаяСсылка");
		
	ИначеЕсли ПутевыеЛисты_ПоискПо = "ПоАдресуУбытия" Тогда
		ПутевыеЛисты_ПоискЗначение = ПредопределенноеЗначение("Справочник.уатПунктыНазначения.ПустаяСсылка");
		
	ИначеЕсли ПутевыеЛисты_ПоискПо = "ПоОборудованию" Тогда
		ПутевыеЛисты_ПоискЗначение = ПредопределенноеЗначение("Справочник.ТранспортныеСредства.ПустаяСсылка");
		
	ИначеЕсли ПутевыеЛисты_ПоискПо = "ПоГрузу" Тогда
		ПутевыеЛисты_ПоискЗначение = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
		
	ИначеЕсли ПутевыеЛисты_ПоискПо = "ПоОбъектуСтроительства" Тогда
		ПутевыеЛисты_ПоискЗначение = ПредопределенноеЗначение("Справочник.СМ_ОбъектыСтроительства.ПустаяСсылка");
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоискЗначениеПриИзменении(Элемент)
	Если ПутевыеЛисты_ПоискЗначение = Неопределено Тогда
		ПоискПоПриИзменении(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоискЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ПутевыеЛисты_ПоискПо = "ПоОборудованию" Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("уатВидМоделиТС", Новый Структура("Значение, ВидСравнения",
			ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Автотранспорт"), ВидСравнения.НеРавно));
		Если ЗначениеЗаполнено(ПутевыеЛисты_ОтборОрганизация) Тогда
			СтруктураОтбора.Вставить("уатОрганизация", ПутевыеЛисты_ОтборОрганизация);
		КонецЕсли;
		уатИнтерфейсВводаТС.НомерТСНачалоВыбора(Элемент, ПутевыеЛисты_ПоискЗначение, СтруктураОтбора, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаКолоннаПриИзменении(Элемент)
	СформироватьПодготовку();
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаРазнарядкаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекСтрока = Элементы.РазнарядкаРазнарядка.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекСтрока.НомерСтроки = РазнарядкаРазнарядка.Количество();
		ТекСтрока.ДатаВыезда = НачалоДня(РазнарядкаДата);
		Если НЕ Копирование Тогда
			Попытка
				ТекСтрока.Контрагент = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекПользователь, "ОсновнойПокупатель");
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьСписокВыбораЭкипажаРазнарядка();
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаРазнарядкаВодительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Элементы.РазнарядкаРазнарядка.ТекущиеДанные.Водитель, Новый Структура("Организация", ТекОрганизация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаРазнарядкаВодительОткрытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Элементы.РазнарядкаРазнарядка.ТекущиеДанные.Водитель, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаРазнарядкаВодитель2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Элементы.РазнарядкаРазнарядка.ТекущиеДанные.Водитель2, Новый Структура("Организация", ТекОрганизация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаРазнарядкаВодитель2Открытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Элементы.РазнарядкаРазнарядка.ТекущиеДанные.Водитель2, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаРазнарядкаКондукторНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Элементы.РазнарядкаРазнарядка.ТекущиеДанные.Кондуктор, Новый Структура("Организация", ТекОрганизация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаРазнарядкаКондукторОткрытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Элементы.РазнарядкаРазнарядка.ТекущиеДанные.Кондуктор, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаРазнарядкаКондуктор2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Элементы.РазнарядкаРазнарядка.ТекущиеДанные.Кондуктор2, Новый Структура("Организация", ТекОрганизация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаРазнарядкаКондуктор2Открытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Элементы.РазнарядкаРазнарядка.ТекущиеДанные.Кондуктор2, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаРазнарядкаГруз1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораГруза(Элемент, Элементы.РазнарядкаРазнарядка.ТекущиеДанные.Груз1, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаРазнарядкаГруз2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораГруза(Элемент, Элементы.РазнарядкаРазнарядка.ТекущиеДанные.Груз2, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаРазнарядкаТСПриИзменении(Элемент)
	
	ТекСтрока = Элементы.РазнарядкаРазнарядка.ТекущиеДанные;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСПриИзменении(ТекСтрока.ТС, ТекСтрока.НомерТС, ТекОрганизация);
	
	ТекСтрока.РежимРаботыТС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.ТС, "уатОсновнойРежимРаботы");
	
	ОбновитьНомерТСвТЧ(Элементы.РазнарядкаРазнарядка.ТекущаяСтрока);
	ОбновитьСписокВыбораЭкипажаРазнарядка();
	
	//заполняем водителей
	СтруктураЭкипаж = уатЗащищенныеФункцииСервер.ЭкипажТСсУчетомГрафика(ТекСтрока.ТС, ТекСтрока.ДатаВыезда, ТекОрганизация);
	ТекСтрока.Водитель = СтруктураЭкипаж.Водитель;
	ТекСтрока.Водитель2 = СтруктураЭкипаж.Водитель2;
	ТекСтрока.Кондуктор = СтруктураЭкипаж.Сотрудник;
	ТекСтрока.Кондуктор2 = СтруктураЭкипаж.Сотрудник2;
	
	ОбновитьСтатусыЗанятостиСервер(ТекСтрока.НомерСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаРазнарядкаТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(ТекОрганизация) Тогда
		СтруктураОтбора.Вставить("уатОрганизация", ТекОрганизация);
	КонецЕсли;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСНачалоВыбора(Элемент, Элементы.РазнарядкаРазнарядка.ТекущиеДанные.ТС, СтруктураОтбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаРазнарядкаТСОчистка(Элемент, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОчистка(Элементы.РазнарядкаРазнарядка.ТекущиеДанные.ТС);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаРазнарядкаТСОткрытие(Элемент, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОткрытие(Элементы.РазнарядкаРазнарядка.ТекущиеДанные.ТС, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаРазнарядкаТСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекСтрока = Элементы.РазнарядкаРазнарядка.ТекущиеДанные;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОбработкаВыбора(ТекСтрока.ТС, ТекСтрока.НомерТС, ВыбранноеЗначение, СтандартнаяОбработка, ТекОрганизация);
	
	ТекСтрока.РежимРаботыТС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.ТС, "уатОсновнойРежимРаботы");
	
	ОбновитьСписокВыбораЭкипажаРазнарядка();
	
	//заполняем водителей
	СтруктураЭкипаж = уатЗащищенныеФункцииСервер.ЭкипажТСсУчетомГрафика(ТекСтрока.ТС, ТекСтрока.ДатаВыезда, ТекОрганизация);
	ТекСтрока.Водитель = СтруктураЭкипаж.Водитель;
	ТекСтрока.Водитель2 = СтруктураЭкипаж.Водитель2;
	ТекСтрока.Кондуктор = СтруктураЭкипаж.Сотрудник;
	ТекСтрока.Кондуктор2 = СтруктураЭкипаж.Сотрудник2;
	
	ОбновитьСтатусыЗанятостиСервер(ТекСтрока.НомерСтроки);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаРазнарядкаТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, ТекОрганизация);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаРазнарядкаТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, ТекОрганизация);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаРазнарядкаВодительПриИзменении(Элемент)
	
	ОбновитьСтатусыЗанятостиСервер(Элементы.РазнарядкаРазнарядка.ТекущиеДанные.НомерСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаРазнарядкаВодитель2ПриИзменении(Элемент)
	
	ОбновитьСтатусыЗанятостиСервер(Элементы.РазнарядкаРазнарядка.ТекущиеДанные.НомерСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаРазнарядкаПрицеп1ПриИзменении(Элемент)
	ТекСтрока = Элементы.РазнарядкаРазнарядка.ТекущиеДанные;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСПриИзменении(ТекСтрока.Прицеп1, ТекСтрока.НомерПрицепа1, ТекОрганизация);
	
	ОбновитьНомерПрицепа1вТЧ(Элементы.РазнарядкаРазнарядка.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаРазнарядкаПрицеп1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(ТекОрганизация) Тогда
		СтруктураОтбора.Вставить("уатОрганизация", ТекОрганизация);
	КонецЕсли;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСНачалоВыбора(Элемент, Элементы.РазнарядкаРазнарядка.ТекущиеДанные.Прицеп1, СтруктураОтбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаРазнарядкаПрицеп1Очистка(Элемент, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОчистка(Элементы.РазнарядкаРазнарядка.ТекущиеДанные.Прицеп1);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаРазнарядкаПрицеп1Открытие(Элемент, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОткрытие(Элементы.РазнарядкаРазнарядка.ТекущиеДанные.Прицеп1, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаРазнарядкаПрицеп1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекСтрока = Элементы.РазнарядкаРазнарядка.ТекущиеДанные;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОбработкаВыбора(ТекСтрока.Прицеп1, ТекСтрока.НомерПрицепа1, ВыбранноеЗначение, СтандартнаяОбработка, ТекОрганизация);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаРазнарядкаПрицеп1АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, ТекОрганизация);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаРазнарядкаПрицеп1ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, ТекОрганизация);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаРазнарядкаПрицеп2ПриИзменении(Элемент)
	ТекСтрока = Элементы.РазнарядкаРазнарядка.ТекущиеДанные;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСПриИзменении(ТекСтрока.Прицеп2, ТекСтрока.НомерПрицепа2, ТекОрганизация);
	
	ОбновитьНомерПрицепа2вТЧ(Элементы.РазнарядкаРазнарядка.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаРазнарядкаПрицеп2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(ТекОрганизация) Тогда
		СтруктураОтбора.Вставить("уатОрганизация", ТекОрганизация);
	КонецЕсли;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСНачалоВыбора(Элемент, Элементы.РазнарядкаРазнарядка.ТекущиеДанные.Прицеп2, СтруктураОтбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаРазнарядкаПрицеп2Очистка(Элемент, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОчистка(Элементы.РазнарядкаРазнарядка.ТекущиеДанные.Прицеп2);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаРазнарядкаПрицеп2Открытие(Элемент, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОткрытие(Элементы.РазнарядкаРазнарядка.ТекущиеДанные.Прицеп2, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаРазнарядкаПрицеп2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекСтрока = Элементы.РазнарядкаРазнарядка.ТекущиеДанные;
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОбработкаВыбора(ТекСтрока.Прицеп1, ТекСтрока.НомерПрицепа2, ВыбранноеЗначение, СтандартнаяОбработка, ТекОрганизация);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаРазнарядкаПрицеп2АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, ТекОрганизация);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаРазнарядкаПрицеп2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.ТабличноеПолеНомерТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, ТекОрганизация);
КонецПроцедуры

&НаКлиенте
Процедура ПанельДопИнформацииПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.РазнарядкаРазнарядка.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначенияКлиент.ПанельДопИнформацииПоТСПриНажатии(
		ЭтотОбъект, 
		Элемент, 
		ДанныеСобытия, 
		СтандартнаяОбработка,
		ТекущиеДанные.ТС
	);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекстДопИнформации(ДатаДокумента, РежимРаботыТС, ТекТС, Водитель1, Водитель2, Организация)
	
	уатНачалоРаботы = РежимРаботыТС.НачалоРаботы;
	ДатаПолученияЗанятости = ДатаДокумента + ?(НЕ ЗначениеЗаполнено(РежимРаботыТС), 0, уатНачалоРаботы - НачалоДня(уатНачалоРаботы));
	
	ДопускДней = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
		Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ДниДоОкончанияДействияДокументовТС")
	);
	
	ДниДоОкончанияДействияТК = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
		Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ДниДоОкончанияДействияТопливныхКарт")
	);
	
	Возврат уатОбщегоНазначения.СформироватьТекстДопИнформацииПоТС(
		ТекТС,
		Водитель1,
		Водитель2,
		ДатаПолученияЗанятости,
		ДопускДней,
		ДниДоОкончанияДействияТК
	);
	
КонецФункции

&НаКлиенте
Процедура ОтобразитьСкрытьДопИнформацию()
	
	флПоказатьДопИнфо = Элементы.РазнарядкаПоказатьДопИнформацию.Пометка;
	Если флПоказатьДопИнфо И Не Элементы.ПанельДопИнформации.Видимость Тогда
		Элементы.ПанельДопИнформации.Видимость = Истина;
		
	ИначеЕсли Не флПоказатьДопИнфо И Элементы.ПанельДопИнформации.Видимость Тогда 
		Элементы.ПанельДопИнформации.Видимость = Ложь;
	КонецЕсли;
	
	Если флПоказатьДопИнфо Тогда
		ТекущиеДанные = Элементы.РазнарядкаРазнарядка.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ОбновитьСтатусыЗанятостиСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДопИнформацию(Команда)
	Элементы.РазнарядкаПоказатьДопИнформацию.Пометка = НЕ Элементы.РазнарядкаПоказатьДопИнформацию.Пометка;
	ОтобразитьСкрытьДопИнформацию();
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		АвтоТест = Истина;
	КонецЕсли;

	уатЗащищенныеФункцииСервер.уатОбработкаФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка,ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	ТекПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ТекОрганизация = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекПользователь, "ОсновнаяОрганизация");
	РазнарядкаПодразделение = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекПользователь, "ОсновноеПодразделениеОрганизации");
	мДниДоОкончанияДействияДокументовТС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекОрганизация, "ДниДоОкончанияДействияДокументовТС");
	мДниДоОкончанияДействияТопливныхКарт = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекОрганизация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ДниДоОкончанияДействияТопливныхКарт"));
	мПредставлениеТСКакГосНомер = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекОрганизация, "ПредставлениеТСКакГосНомер");
	
	Если НЕ СоздаватьМЛ И НЕ СоздаватьПЛ Тогда
		СоздаватьМЛ = Истина;
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.РазнарядкаРазнарядкаПодразделение, "ТекОрганизация");
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.РазнарядкаРазнарядкаПодразделение2, "ТекОрганизация");
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.РазнарядкаПодразделение, "ТекОрганизация");
	
	ИспользоватьУпаковки = ПолучитьФункциональнуюОпцию("уатИспользоватьУпаковкиНоменклатуры");
	Если НЕ ИспользоватьУпаковки Тогда
		Элементы.МаршрутныйЛистЗаказыЕдиницаИзмерения.Видимость = Ложь;
		Элементы.МаршрутныйЛистЗаказыЕдиницаИзмеренияПоЗаказу.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	уатЗащищенныеФункцииКлиент.уатОбработкаФормаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализацияМаршрутныйЛист();
	ИнициализацияРазнарядка();
	
	УстановитьОтборСпискаЗаказовНаТС();
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокТС, "ДниДоОкончанияДействияДокументовТС", мДниДоОкончанияДействияДокументовТС);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокТС, "ДниДоОкончанияДействияТопливныхКарт", мДниДоОкончанияДействияТопливныхКарт);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокТС, "ТекДата", ТекущаяДата());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокТС, "ТекущаяДата", НачалоДня(ТекущаяДата()));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокМаршрутныхЛистов, "ПредставлениеТСКакГосНомер", мПредставлениеТСКакГосНомер);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПутевыхЛистов, "ПредставлениеТСКакГосНомер", мПредставлениеТСКакГосНомер);
	
	Элементы.ПутевыеЛисты_ОтборВидПЛ.СписокВыбора.Очистить();
	Для Каждого ТекДоступныйВидПЛ Из уатОбщегоНазначения.уатВидыПЛ() Цикл
		Элементы.ПутевыеЛисты_ОтборВидПЛ.СписокВыбора.Добавить(ТекДоступныйВидПЛ.Значение, ТекДоступныйВидПЛ.Представление);
	КонецЦикла;
	
	ОтобразитьСкрытьДопИнформацию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда 
		НужноЗакрытьФорму = Истина;
		Возврат;
		
	ИначеЕсли Не АвтоТест Тогда 
		Если НужноЗакрытьФорму <> Истина Тогда
			Отказ = Истина;
			СтандартнаяОбработка = Ложь;
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтаФорма, Параметры);
			ПоказатьВопрос(Оповещение,"АРМ Диспетчера будет закрыт. Продолжить?", Режим, 0);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		НужноЗакрытьФорму = Неопределено;
	Иначе
		НужноЗакрытьФорму = Истина;
		Закрыть();
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	//обработка изменения заказа
	Если ИмяСобытия = "Изменен заказ грузоотправителя" Тогда
		ПодключитьОбработчикОжидания("УстановитьОтборСпискаЗаказовНаТС", 0.5, Истина);
	ИначеЕсли ИмяСобытия = "ПередЗавершениемРаботыСистемы" Тогда
		НужноЗакрытьФорму = ИСТИНА;
		Закрыть();
	КонецЕсли;
КонецПроцедуры
