
&НаСервере
Процедура ВыполнитьОбработку(ВыполнятьЗапись)
	ОбработанныеДокументы.Очистить();
	
	СКД = Обработки.уатВосстановлениеПоследовательностиПЛпоГСМиПоказаниямСпидометров.ПолучитьМакет("Отбор");
	
	ПостроительОтчета.Настройки.ПараметрыДанных.Элементы.Найти("ДатаНач").Использование = Истина;
	ПостроительОтчета.Настройки.ПараметрыДанных.Элементы.Найти("ДатаНач").Значение = ДатаНач;
	ПостроительОтчета.Настройки.ПараметрыДанных.Элементы.Найти("ДатаКон").Использование = Истина;
	ПостроительОтчета.Настройки.ПараметрыДанных.Элементы.Найти("ДатаКон").Значение = ?(ДатаКон = '00010101', '39991231', КонецДня(ДатаКон));
	ПостроительОтчета.Настройки.ПараметрыДанных.Элементы.Найти("Организация").Использование = Истина;
	ПостроительОтчета.Настройки.ПараметрыДанных.Элементы.Найти("Организация").Значение = Организация;
	
	Настройки = ПостроительОтчета.ПолучитьНастройки();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СКД,ПостроительОтчета.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	
	Колич = ТаблицаРезультат.Количество(); Сч = 0;
	Для Каждого Выборка из ТаблицаРезультат Цикл 
		Сч = Сч + 1;
		//	
		Если Выборка.Ссылка.ДатаВыезда = Выборка.Ссылка.ДатаВозвращения Тогда
			Сообщить("Документ <" + Выборка.Ссылка + "> имеет некорректные данные: дата выезда = дате возвращения!", СтатусСообщения.Внимание);
			Продолжить;
		КонецЕсли;
		//	
		ТекДок = Выборка.Ссылка.ПолучитьОбъект();
		
		рсТранспортноеСредство = ТекДок.ТранспортноеСредство;
		
		Если ВариантОбработки = 0 Тогда
			Отказ_ = Ложь;
			ТекДок.РасчетИтогов(Отказ_, Ложь);
			Если НЕ Отказ_ Тогда
				Попытка
					ТекДок.Записать(РежимЗаписиДокумента.Проведение);
					
					НовСтрока = ОбработанныеДокументы.Добавить();
					НовСтрока.Документ = ТекДок.Ссылка;
				Исключение
				КонецПопытки;
			КонецЕсли;
		Иначе
			флГСМТС = Ложь;
			флГСМПрицепы = Ложь;
			флСпидометрТС = Ложь;
			флСчетчикиПрицепы = Ложь;
			
			//основное ТС: ГСМ основное топливо
			ОстатокТопливаВыезд = уатОбщегоНазначения.уатОстатокГСМнаТС(ТекДок.ДатаВыезда, ТекДок.ТранспортноеСредство, рсТранспортноеСредство.уатМодель.ОсновноеТопливо, ТекДок.ссылка);
			Для Каждого ТекСтрокаРасходГСМ Из ТекДок.РасходГСМ Цикл
				Если ТекДок.ТранспортноеСредство = ТекСтрокаРасходГСМ.ТС И рсТранспортноеСредство.уатМодель.ОсновноеТопливо = ТекСтрокаРасходГСМ.ГСМ Тогда
					Если ТекСтрокаРасходГСМ.ОстатокПриВыезде <> ОстатокТопливаВыезд Тогда
						ТекСтрокаРасходГСМ.ОстатокПриВыезде = ОстатокТопливаВыезд;
						ТекСтрокаРасходГСМ.ОстатокПриВозвращении = ТекСтрокаРасходГСМ.ОстатокПриВыезде - ТекСтрокаРасходГСМ.РасходПоФакту + ТекСтрокаРасходГСМ.Выдано;
						флГСМТС = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			//		
			//основное ТС: ГСМ доп. топливо
			Если ЗначениеЗаполнено(рсТранспортноеСредство.уатМодель.ДополнительноеТопливо) Тогда
				Для Каждого ТекСтрокаРасходГСМ Из ТекДок.РасходГСМ Цикл
					Если ТекДок.ТранспортноеСредство = ТекСтрокаРасходГСМ.ТС И рсТранспортноеСредство.уатМодель.ДополнительноеТопливо = ТекСтрокаРасходГСМ.ГСМ Тогда
						ТекОстатокПриВыезде = уатОбщегоНазначения.уатОстатокГСМнаТС(ТекДок.ДатаВыезда, ТекДок.ТранспортноеСредство, ТекСтрокаРасходГСМ.ГСМ, ТекДок.Ссылка);
						Если ТекСтрокаРасходГСМ.ОстатокПриВыезде <> ТекОстатокПриВыезде Тогда
							ТекСтрокаРасходГСМ.ОстатокПриВыезде = ТекОстатокПриВыезде;
							ТекСтрокаРасходГСМ.ОстатокПриВозвращении = ТекСтрокаРасходГСМ.ОстатокПриВыезде - ТекСтрокаРасходГСМ.РасходПоФакту + ТекСтрокаРасходГСМ.Выдано;
							флГСМТС = Истина;
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;
			//		
			//основное ТС: показания спидометра
			Если рсТранспортноеСредство.уатМодель.НаличиеСпидометра Тогда
				СпидометрВыезда = уатОбщегоНазначения.уатТекущийСпидометр(ТекДок.ТранспортноеСредство, ТекДок.ДатаВыезда);
			Иначе
				СпидометрВыезда = уатОбщегоНазначения.уатТекущийСчетчикМЧ(ТекДок.ТранспортноеСредство, ТекДок.ДатаВыезда);
			КонецЕсли;
			Если ТекДок.СпидометрВыезда <> СпидометрВыезда Тогда
				РазницаСпидометров = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(ТекДок.СпидометрВыезда, ТекДок.СпидометрВозвращения);
				ТекДок.СпидометрВыезда = СпидометрВыезда;
				ТекДок.СпидометрВозвращения = ТекДок.СпидометрВыезда + РазницаСпидометров;
				флСпидометрТС = Истина;
			КонецЕсли;
			//		
			//прицепы и оборудование
			Для Каждого ТекСтрока Из ТекДок.Прицепы Цикл
				// показания счетчиков
				СчетчикМЧВыезда = уатОбщегоНазначения.уатТекущийСчетчикМЧ(ТекСтрока.ТС, ТекДок.ДатаВыезда);
				Если ТекСтрока.СчетчикМЧВыезда <> СчетчикМЧВыезда Тогда
					РазницаСпидометров = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(ТекСтрока.СчетчикМЧВыезда, ТекСтрока.СчетчикМЧВозвращения);
					ТекСтрока.СчетчикМЧВыезда = СчетчикМЧВыезда;
					ТекСтрока.СчетчикМЧВозвращения = ТекСтрока.СчетчикМЧВыезда + РазницаСпидометров;
					флСчетчикиПрицепы = Истина;
				КонецЕсли;
				
				// ГСМ
				мМодельПрицепа = ТекСтрока.ТС.уатМодель;
				Если ЗначениеЗаполнено(мМодельПрицепа.ОсновноеТопливо) и мМодельПрицепа.НаличиеТопливногоБака Тогда
					Для Каждого ТекСтрокаГСМ Из ТекДок.РасходГСМ Цикл
						Если ТекСтрока.ТС = ТекСтрокаГСМ.ТС И мМодельПрицепа.ОсновноеТопливо = ТекСтрокаГСМ.ГСМ Тогда
							ТекОстатокПриВыезде = уатОбщегоНазначения.уатОстатокГСМнаТС(ТекДок.ДатаВыезда, ТекСтрокаГСМ.ТС, ТекСтрокаГСМ.ГСМ, ТекДок.Ссылка);
							
							Если ТекСтрокаГСМ.ОстатокПриВыезде <> ТекОстатокПриВыезде Тогда
								ТекСтрокаГСМ.ОстатокПриВыезде = ТекОстатокПриВыезде;
								ТекСтрокаГСМ.ОстатокПриВозвращении = ТекСтрокаГСМ.ОстатокПриВыезде - ТекСтрокаГСМ.РасходПоФакту + ТекСтрокаГСМ.Выдано;
								флГСМПрицепы = Истина;
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;	
				КонецЕсли;	
			КонецЦикла;
			
			Если флГСМТС ИЛИ флГСМПрицепы ИЛИ флСпидометрТС ИЛИ флСчетчикиПрицепы Тогда
			
				Попытка
					Если ВыполнятьЗапись = 1 Тогда
						ТекДок.Записать(РежимЗаписиДокумента.Проведение);
					КонецЕсли;
					НовСтрока = ОбработанныеДокументы.Добавить();
					НовСтрока.Документ = ТекДок.Ссылка;
					НовСтрока.ГСМТС = флГСМТС;
					НовСтрока.ГСМПрицепы = флГСМПрицепы;
					НовСтрока.СпидометрТС = флСпидометрТС;
					НовСтрока.СпидометрПрицепы = флСчетчикиПрицепы;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	Если сч <> 0  Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Обработано документов: "  + Сч);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьНастроек()
	Элементы.КонтрольЗаписьДокументов.Доступность = (ВариантОбработки = 1);
	Элементы.НадписьВнимание.Доступность = (ВариантОбработки = 1);
КонецПроцедуры

&НаКлиенте
Процедура КнопкаВыполнитьНажатие(Кнопка)
	ОчиститьСообщения();
	ВыполнитьОбработку(КонтрольЗаписьДокументов);
КонецПроцедуры

&НаКлиенте
Процедура ВариантОбработкиПриИзменении(Элемент)
	УстановитьВидимостьНастроек();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаНастройкаПериодаНажатие(Элемент)
	ДиалогПериода = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогПериода.Период.ДатаНачала = ДатаНач;
	ДиалогПериода.Период.ДатаОкончания = ДатаКон;
	ДиалогПериода.Показать(Новый ОписаниеОповещения("КнопкаНастройкаПериодаНажатиеЗавершение", ЭтотОбъект, Новый Структура("ДиалогПериода", ДиалогПериода)));
КонецПроцедуры

&НаКлиенте
Процедура КнопкаНастройкаПериодаНажатиеЗавершение(Период, ДополнительныеПараметры) Экспорт
    
    ДиалогПериода = ДополнительныеПараметры.ДиалогПериода;
    
	Если Не Период = Неопределено Тогда
		ДатаНач = Период.ДатаНачала;
		ДатаКон = Период.ДатаОкончания;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	
	Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	Если ДатаНач = '00010101' Тогда
		ДатаНач = НачалоМесяца(ТекущаяДата());
	КонецЕсли;
	Если ДатаКон = '00010101' Тогда
		ДатаКон = КонецМесяца(ТекущаяДата());
	КонецЕсли;
	Организация = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнаяОрганизация");
	
	НастроитьКомпоновщикОтбора();
	НовыйЭлементОтбора = ПостроительОтчета.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора = Новый ПолеКомпоновкиДанных("ТранспортноеСредство");
	НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
	НовыйЭлементОтбора.Использование = Ложь;
	НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	НовыйЭлементОтбора.ПравоеЗначение = Справочники.ТранспортныеСредства.ПустаяСсылка();

	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимостьНастроек();
КонецПроцедуры

&НаСервере
Процедура  НастроитьКомпоновщикОтбора()
	СКД = Обработки.уатВосстановлениеПоследовательностиПЛпоГСМиПоказаниямСпидометров.ПолучитьМакет("Отбор");
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификатор);
	
	ПостроительОтчета.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	Настройки = СКД.НастройкиПоУмолчанию;
	ПостроительОтчета.ЗагрузитьНастройки(Настройки);

КонецПроцедуры

&НаКлиенте
Процедура ПостроительОтчетаНастройкиОтборПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры



