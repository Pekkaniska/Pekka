#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Печать

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	СтруктураТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивОбъектов);
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Доставка_МаршрутныйЛист") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"Доставка_МаршрутныйЛист",
			НСтр("ru = 'Маршрутный лист'"),
			СформироватьПечатнуюФормуДоставка_МаршрутныйЛист(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Доставка_АктПриемкиВовзвратаА4") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"Доставка_АктПриемкиВовзвратаА4",
			НСтр("ru = 'Акт приемки/возврата для печати на А4 (2016)'"),
			СформироватьПечатнуюФормуДоставка_АктПриемкиВовзвратаА4(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Доставка_АктПриемкиВовзвратаА42017") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"Доставка_АктПриемкиВовзвратаА42017",
			НСтр("ru = 'Акт приемки/возврата для печати на А4'"),
			СформироватьПечатнуюФормуДоставка_АктПриемкиВовзвратаА42017(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Доставка_АктПриемкиВовзвратаА4Москва") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"Доставка_АктПриемкиВовзвратаА4Москва",
			НСтр("ru = 'Акт приемки/возврата для печати на А4 для Москвы'"),
			СформироватьПечатнуюФормуДоставка_АктПриемкиВовзвратаА4Москва(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Доставка_АктПриемкиВовзвратаА5") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"Доставка_АктПриемкиВовзвратаА5",
			НСтр("ru = 'Акт приемки/возврата для печати на А5 (2016)'"),
			СформироватьПечатнуюФормуДоставка_АктПриемкиВовзвратаА5(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Доставка_АктПриемкиВовзвратаА52017") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"Доставка_АктПриемкиВовзвратаА52017",
			НСтр("ru = 'Акт приемки/возврата для печати на А5'"),
			СформироватьПечатнуюФормуДоставка_АктПриемкиВовзвратаА52017(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Доставка_АктПриемкиВовзвратаА5Москва") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"Доставка_АктПриемкиВовзвратаА5Москва",
			НСтр("ru = 'Акт приемки/возврата для печати на А5 для Москвы'"),
			СформироватьПечатнуюФормуДоставка_АктПриемкиВовзвратаА5Москва(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Доставка_Доверенность") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"Доставка_Доверенность",
			НСтр("ru = 'Доверенность'"),
			СформироватьПечатнуюФормуДоставка_Доверенность(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
			
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Доставка_ДоверенностьСПодписями") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"Доставка_ДоверенностьСПодписями",
			НСтр("ru = 'Доверенность с подписями'"),
			СформироватьПечатнуюФормуДоставка_Доверенность(СтруктураТипов, ОбъектыПечати, ПараметрыПечати,,Истина));	
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Доставка_ТТН") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"Доставка_ТТН",
			НСтр("ru = 'ТН (форма 1208)'"),
			СформироватьПечатнуюФормуДоставка_ТТН(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
	
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, СтруктураТипов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

#Область Печать_Доставка_МаршрутныйЛист

Функция СформироватьПечатнуюФормуДоставка_МаршрутныйЛист(СтруктураТипов, ОбъектыПечати, ПараметрыПечати, КомплектыПечати = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_МаршрутныйЛист";
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
			
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ДанныеДляПечати = ПолучитьДанныеДляПечатнойФормыДоставка_МаршрутныйЛист(
			СтруктураОбъектов.Значение);
		
		// Сформированный тбаличный документ
		ЗаполнитьТабличныйДокументДоставка_МаршрутныйЛист(
			ТабличныйДокумент,
			ДанныеДляПечати,
			ОбъектыПечати,
			КомплектыПечати,
			"пкДоставка");
			
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыДоставка_МаршрутныйЛист(МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	пкДоставка.Ссылка КАК Ссылка,
	|	пкДоставка.Номер КАК Номер,
	|	пкДоставка.Дата КАК Дата,
	|	пкДоставка.Организация КАК Организация,
	|	пкДоставка.НачалоРейсаПлан КАК НачалоРейсаПлан,
	|	пкДоставка.НачалоРейсаФакт КАК НачалоРейсаФакт,
	|	пкДоставка.ОкончаниеРейсаПлан КАК ОкончаниеРейсаПлан,
	|	пкДоставка.ОкончаниеРейсаФакт КАК ОкончаниеРейсаФакт,
	|	пкДоставка.Статус КАК Статус,
	|	пкДоставка.Подразделение КАК Подразделение,
	|	пкДоставка.Автор КАК Автор,
	|	пкДоставка.ДоставкуВыполняет КАК ДоставкуВыполняет,
	|	пкДоставка.ТранспортноеСредство КАК ТранспортноеСредство,
	|	пкДоставка.Водитель КАК Водитель,
	|	пкДоставка.ДатаНачалаДействияДовернности КАК ДатаНачалаДействияДовернности,
	|	пкДоставка.ДатаОкончанияДействияДовернности КАК ДатаОкончанияДействияДовернности,
	|	пкДоставка.СпособДоставки КАК СпособДоставки,
	|	пкДоставка.Перевозчик КАК Перевозчик,
	|	пкДоставка.Ответственный КАК Ответственный,
	|	ПОДСТРОКА(пкДоставка.Комментарий, 1, 150) КАК Комментарий,
	|	пкДоставка.МаксимальныйВес КАК МаксимальныйВес,
	|	пкДоставка.МаксимальныйОбъем КАК МаксимальныйОбъем,
	|	пкДоставка.КоэффициентЗагрузкиТС КАК КоэффициентЗагрузкиТС,
	|	пкДоставка.УникальныйКод
	|ИЗ
	|	Документ.пкДоставка КАК пкДоставка
	|ГДЕ
	|	пкДоставка.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	пкДоставка.Ссылка,
	|	пкДоставка.Номер,
	|	пкДоставка.Дата,
	|	пкДоставка.Организация,
	|	пкДоставка.НачалоРейсаПлан,
	|	пкДоставка.НачалоРейсаФакт,
	|	пкДоставка.ОкончаниеРейсаПлан,
	|	пкДоставка.ОкончаниеРейсаФакт,
	|	пкДоставка.Статус,
	|	пкДоставка.Подразделение,
	|	пкДоставка.Автор,
	|	пкДоставка.ДоставкуВыполняет,
	|	пкДоставка.ТранспортноеСредство,
	|	пкДоставка.Водитель,
	|	пкДоставка.ДатаНачалаДействияДовернности,
	|	пкДоставка.ДатаОкончанияДействияДовернности,
	|	пкДоставка.СпособДоставки,
	|	пкДоставка.Перевозчик,
	|	пкДоставка.Ответственный,
	|	ПОДСТРОКА(пкДоставка.Комментарий, 1, 150),
	|	пкДоставка.МаксимальныйВес,
	|	пкДоставка.МаксимальныйОбъем,
	|	пкДоставка.КоэффициентЗагрузкиТС,
	|	пкДоставка.УникальныйКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	пкДоставкаЗаданияНаПеревозку.Ссылка КАК Ссылка,
	|	пкЗаданиеНаПеревозку.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ВЫБОР
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
	|			ТОГДА ""Приемка""
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
	|			ТОГДА ""Возврат""
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА ""Возврат""
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА ""Приемка""
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
	|			ТОГДА ""Приемка""
	|	КОНЕЦ КАК ПриемкаВозврат,
	|	ПОДСТРОКА(пкЗаданиеНаПеревозку.АдресДоставки, 1, 150) КАК АдресДоставки,
	|	ВЫБОР
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
	|			ТОГДА пкЗаявкаНаАрендуТехники.Партнер
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
	|			ТОГДА пкЗаявкаНаАрендуТехники.Партнер
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА пкЗаявкаНаАрендуТехники.Партнер
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА пкЗаявкаНаАрендуТехники.Партнер
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
	|			ТОГДА пкЗаданиеНаПеревозку.РегионПолучатель
	|	КОНЕЦ КАК Партнер,
	|	пкЗаявкаНаАрендуТехники.Договор КАК Договор,
	|	ВЫБОР
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
	|			ТОГДА пкЗаявкаНаАрендуТехники.ОбъектСтроительства
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
	|			ТОГДА пкЗаявкаНаАрендуТехники.ОбъектСтроительства
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА пкЗаявкаНаАрендуТехники.ОбъектСтроительства
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА пкЗаявкаНаАрендуТехники.ОбъектСтроительства
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
	|			ТОГДА пкЗаданиеНаПеревозку.СкладПолучатель
	|	КОНЕЦ КАК ОбъектСтроительства,
	|	пкЗаданиеНаПеревозку.КонтактноеЛицо КАК КонтактноеЛицо,
	|	пкЗаданиеНаПеревозку.Модель КАК Модель,
	|	пкЗаданиеНаПеревозку.Техника КАК Техника,
	|	ВЫБОР
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
	|			ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
	|			ТОГДА """"
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА """"
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
	|			ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
	|	КОНЕЦ КАК ДатаНачалаАренды,
	|	ВЫБОР
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
	|			ТОГДА пкЗаявкаНаАрендуТехникиТовары.ДатаВозврата
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
	|			ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА пкЗаявкаНаАрендуТехникиТовары.ДатаВозврата
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
	|			ТОГДА """"
	|	КОНЕЦ КАК ДатаВозврата,
	|	пкДоставкаЗаданияНаПеревозку.ТочкаМаршрута КАК ТочкаМаршрута,
	|	пкДоставкаЗаданияНаПеревозку.ПланируемоеВремяДоставки КАК ПланируемоеВремяДоставки,
	|	СУММА(1) КАК Количество,
	|	пкДоставкаЗаданияНаПеревозку.НомерХодки КАК НомерХодки
	|ИЗ
	|	Документ.пкДоставка.ЗаданияНаПеревозку КАК пкДоставкаЗаданияНаПеревозку
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкЗаданиеНаПеревозку КАК пкЗаданиеНаПеревозку
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкЗаявкаНаАрендуТехники.Товары КАК пкЗаявкаНаАрендуТехникиТовары
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкЗаявкаНаАрендуТехники КАК пкЗаявкаНаАрендуТехники
	|				ПО пкЗаявкаНаАрендуТехникиТовары.Ссылка = пкЗаявкаНаАрендуТехники.Ссылка
	|			ПО пкЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники = пкЗаявкаНаАрендуТехникиТовары.Ссылка
	|				И пкЗаданиеНаПеревозку.Модель = пкЗаявкаНаАрендуТехникиТовары.Номенклатура
	|		ПО пкДоставкаЗаданияНаПеревозку.ЗаданиеНаПеревозку = пкЗаданиеНаПеревозку.Ссылка
	|			И (пкДоставкаЗаданияНаПеревозку.Ссылка В (&МассивОбъектов))
	|ГДЕ
	|	пкДоставкаЗаданияНаПеревозку.Ссылка В(&МассивОбъектов)
	|	И НЕ пкДоставкаЗаданияНаПеревозку.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
	|			ТОГДА пкЗаявкаНаАрендуТехникиТовары.ДатаВозврата
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
	|			ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА пкЗаявкаНаАрендуТехникиТовары.ДатаВозврата
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
	|			ТОГДА """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
	|			ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
	|			ТОГДА """"
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА """"
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
	|			ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
	|	КОНЕЦ,
	|	пкЗаданиеНаПеревозку.ДатаОтгрузки,
	|	ПОДСТРОКА(пкЗаданиеНаПеревозку.АдресДоставки, 1, 150),
	|	пкДоставкаЗаданияНаПеревозку.Ссылка,
	|	пкЗаданиеНаПеревозку.КонтактноеЛицо,
	|	пкЗаявкаНаАрендуТехники.Договор,
	|	пкЗаданиеНаПеревозку.Техника,
	|	пкЗаданиеНаПеревозку.Модель,
	|	ВЫБОР
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
	|			ТОГДА ""Приемка""
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
	|			ТОГДА ""Возврат""
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА ""Возврат""
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА ""Приемка""
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
	|			ТОГДА ""Приемка""
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
	|			ТОГДА пкЗаявкаНаАрендуТехники.Партнер
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
	|			ТОГДА пкЗаявкаНаАрендуТехники.Партнер
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА пкЗаявкаНаАрендуТехники.Партнер
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА пкЗаявкаНаАрендуТехники.Партнер
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
	|			ТОГДА пкЗаданиеНаПеревозку.РегионПолучатель
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
	|			ТОГДА пкЗаявкаНаАрендуТехники.ОбъектСтроительства
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
	|			ТОГДА пкЗаявкаНаАрендуТехники.ОбъектСтроительства
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА пкЗаявкаНаАрендуТехники.ОбъектСтроительства
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА пкЗаявкаНаАрендуТехники.ОбъектСтроительства
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
	|			ТОГДА пкЗаданиеНаПеревозку.СкладПолучатель
	|	КОНЕЦ,
	|	пкДоставкаЗаданияНаПеревозку.ПланируемоеВремяДоставки,
	|	пкДоставкаЗаданияНаПеревозку.ТочкаМаршрута,
	|	пкДоставкаЗаданияНаПеревозку.НомерХодки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерХодки,
	|	ТочкаМаршрута,
	|	ПланируемоеВремяДоставки";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ПредставлениеДокумента",	НСтр("ru = 'Задание на первеозку'"));
	Запрос.УстановитьПараметр("ПредставлениеВОшибке",	НСтр("ru = 'Задание на первеозку'"));
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке", ПакетРезультатовЗапроса[0]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти", ПакетРезультатовЗапроса[1]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументДоставка_МаршрутныйЛист(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, КомплектыПечати, ИмяМакета)
	
	ДанныеПечати		= ДанныеДляПечати.РезультатПоШапке.Выбрать();
	СтрокиТЧ			= ДанныеДляПечати.РезультатПоТабличнойЧасти.Выгрузить();
	
	ШаблонОшибкиСтроки	= "";
	
	ПервыйДокумент		= Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Макет = ПолучитьМакет("МаршрутныйЛист");
		
		// Для печати комплектов
		Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено Тогда
			
			КомплектПечатиПоСсылке = КомплектыПечати.Найти(ДанныеПечати.Ссылка, "Ссылка");
			
			Если КомплектПечатиПоСсылке = Неопределено Тогда
				КомплектПечатиПоСсылке = КомплектыПечати[0];
			КонецЕсли;
			
			Если КомплектПечатиПоСсылке.Экземпляров = 0 Тогда
				Продолжить
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
#Область ОбластиМакета
		
		ОбластьШапка				= Макет.ПолучитьОбласть("Шапка");
		ОбластьДоставка				= Макет.ПолучитьОбласть("Доставка");
		ОбластьСтрокаЗаездНаБазу	= Макет.ПолучитьОбласть("ЗаездНаБазу");
		ОбластьСтрокаТаблицыКлиенту	= Макет.ПолучитьОбласть("СтрокаТаблицыКлиенту");
		ОбластьСтрокаТаблицыВозврат	= Макет.ПолучитьОбласть("СтрокаТаблицыВозврат");
		ОбластьПодвал				= Макет.ПолучитьОбласть("Подвал");
		
#КонецОбласти
		
#Область ВыводШапки
		
		// ШАПКА - ЗАГОЛОВОК
		
		//ФормированиеПечатныхФорм.ВывестиЛоготипВТабличныйДокумент(Макет, ОбластьШапка, "Шапка", ДанныеПечати.Организация);
		//
		//УстановитьПараметр(ОбластьШапка, "ТекстЗаголовка", ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(
		//	ДанныеПечати,
		//	ДанныеПечати.ПредставлениеДокумента));
		//
		//ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(
		//	ТабличныйДокумент,
		//	Макет,
		//	ОбластьШапка,
		//	ДанныеПечати.Ссылка);
		
		СтрокаПодключения		= СокрЛП(Константы.пкСтрокаПубликацииМП_ДляУдаленногоУправленияДоставкой.Получить());
		ПользовательПодключения	= Константы.пкПользовательУУД.Получить();
		ПарольПодключения		= Константы.пкПарольУУД.Получить();
		Если СтрокаПодключения <> "" Тогда
			QRСтрока = СтрокаПодключения + "?" + 
				?(ЗначениеЗаполнено(ПользовательПодключения), "&N=" + ПользовательПодключения,"") +
				?(ЗначениеЗаполнено(ПарольПодключения), "&P=" + ПарольПодключения,"") +
				"&C=ID_DELIVERY_" + ДанныеПечати.УникальныйКод;
				
			тСообщение = Новый СообщениеПользователю;
			тСообщение.Текст = QRСтрока;
			тСообщение.Сообщить();
			
			ТекстОшибки = "";
			ДанныеQRКода = УправлениеПечатью.ДанныеQRКода(QRСтрока, 0, 190);

			Если ТипЗнч(ДанныеQRКода) = Тип("ДвоичныеДанные") Тогда
				КартинкаQRКода = Новый Картинка(ДанныеQRКода);
				ОбластьШапка.Рисунки.QRКод.Картинка = КартинкаQRКода;
			Иначе
				ОбластьШапка.Рисунки.QRКод.Высота = 0;
				ОбластьШапка.Рисунки.QRКод.Ширина = 0;
			КонецЕсли;
			
		Иначе
			ОбластьШапка.Рисунки.QRКод.Высота = 0;
			ОбластьШапка.Рисунки.QRКод.Ширина = 0;
		КонецЕсли;
		
		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		
		УстановитьПараметр(ОбластьШапка, "ПредставлениеДаты", ВРЕГ(Формат(ДанныеПечати.НачалоРейсаПлан, "ДФ='дд ММММ дддд'")));
		УстановитьПараметр(ОбластьШапка, "Организация", СведенияОбОрганизации.НаименованиеДляПечатныхФорм + Символы.ПС + СведенияОбОрганизации.ФактическийАдрес);
		ТабличныйДокумент.Вывести(ОбластьШапка);
#КонецОбласти

		Если ДанныеПечати.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчика Тогда
			УстановитьПараметр(ОбластьДоставка, "АвтомобильВодитель", ВРЕГ("Самовывоз"));
		ИначеЕсли ДанныеПечати.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз Тогда
			УстановитьПараметр(ОбластьДоставка, "АвтомобильВодитель", ВРЕГ(ДанныеПечати.ТранспортноеСредство) + " " + 
			    ?(ТипЗнч(ДанныеПечати.Водитель) = Тип("Строка"), ВРЕГ(ДанныеПечати.Водитель),
				ВРЕГ(ДанныеПечати.Водитель) + " (" + 
				ВРЕГ(ПолучитьТелефонИзКонтактнойИнформации(ДанныеПечати.Водитель)) + ")"));
		Иначе
			УстановитьПараметр(ОбластьДоставка, "АвтомобильВодитель", ВРЕГ(ДанныеПечати.ТранспортноеСредство) + " " + 
			    ?(ТипЗнч(ДанныеПечати.Водитель) = Тип("Строка"), ВРЕГ(ДанныеПечати.Водитель),
				ВРЕГ(ДанныеПечати.Водитель) + " (" + 
				ВРЕГ(ПолучитьТелефонИзКонтактнойИнформации(ДанныеПечати.Водитель)) + ")"));
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьДоставка);
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		
		ТаблицаСтрок = СтрокиТЧ.НайтиСтроки(СтруктураПоиска);
		
		Если ТаблицаСтрок.Количество() = 0 Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибкиСтроки,
				ДанныеПечати.Ссылка,
				НСтр("ru='Нет строк для маршрута'"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДанныеПечати.Ссылка);
			Продолжить;
			
		КонецЕсли;
		
#Область ВыводТаблицыТовары
		
		НомерСтроки = 0;
		НомерХодки	= -1;
		Для Каждого СтрокаТовары Из ТаблицаСтрок Цикл
			
			Если НомерХодки <> СтрокаТовары.НомерХодки Тогда
				НомерХодки = СтрокаТовары.НомерХодки;
				
				УстановитьПараметр(ОбластьСтрокаЗаездНаБазу, "ТекстЗаездНаБазу", "Выезд " + Строка(НомерХодки) + ":");
				
				ТабличныйДокумент.Вывести(ОбластьСтрокаЗаездНаБазу);
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			Если СтрокаТовары.ПриемкаВозврат = "Возврат" Тогда
				
				УстановитьПараметр(ОбластьСтрокаТаблицыВозврат, "НПП", НомерСтроки);
				УстановитьПараметр(ОбластьСтрокаТаблицыВозврат, "ОписаниеЗаданияПоМодели", СокрЛП(СтрокаТовары.Модель) + 
					?(НЕ ЗначениеЗаполнено(СтрокаТовары.Техника),"", " (" + СокрЛП(СтрокаТовары.Техника)+ ")") + " - " +
					СтрокаТовары.Количество + "шт." + " - " +
					СокрЛП(СтрокаТовары.Партнер	) + " (" + СокрЛП(СтрокаТовары.АдресДоставки) + ")");
				УстановитьПараметр(ОбластьСтрокаТаблицыВозврат, "ВремяДоставки", Формат(СтрокаТовары.ПланируемоеВремяДоставки,"ДФ=HH:mm"));
				
				ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицыВозврат);
				
			Иначе
				
				УстановитьПараметр(ОбластьСтрокаТаблицыКлиенту, "НПП", НомерСтроки);
				УстановитьПараметр(ОбластьСтрокаТаблицыКлиенту, "ОписаниеЗаданияПоМодели", СокрЛП(СтрокаТовары.Модель) + 
					?(НЕ ЗначениеЗаполнено(СтрокаТовары.Техника),"", " (" + СокрЛП(СтрокаТовары.Техника)+ ")") + " - " +
					СтрокаТовары.Количество + "шт." + " - " +
					СокрЛП(СтрокаТовары.Партнер	) + " (" + СокрЛП(СтрокаТовары.АдресДоставки) + ")");
				УстановитьПараметр(ОбластьСтрокаТаблицыКлиенту, "ВремяДоставки", Формат(СтрокаТовары.ПланируемоеВремяДоставки,"ДФ=HH:mm"));
				
				ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицыКлиенту);
				
			КонецЕсли;
			
		КонецЦикла;
		
#КонецОбласти
		
#Область ВыводПодвала
		ПодписьСПБ = 
		//"Руководитель службы логистики ЗАО «Автокран Аренда»"+Символы.ПС+"И. Плюшкевич";
		"Специалист по логистике ТЭО-СПб ЗАО «Автокран Аренда»"+Символы.ПС+" Александров Е.В.";
		ПодписьМСК = "Начальник транспортно-экспедиционного отдела филиала ЗАО «Автокран Аренда» по г. Москве и Московской области"+Символы.ПС+"Е. Виноградов";
			Если Строка(ДанныеПечати.Подразделение) = "Москва" Тогда
				УстановитьПараметр(ОбластьПодвал, "Подпись",ПодписьМСК);	
			ИначеЕсли Строка(ДанныеПечати.Подразделение) = "Санкт-Петербург" Тогда	
			    УстановитьПараметр(ОбластьПодвал, "Подпись",ПодписьСПБ);
			КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьПодвал);			
#КонецОбласти
			
		ОбластьКопирования = ТабличныйДокумент.ПолучитьОбласть(
			НомерСтрокиНачало,
			,
			ТабличныйДокумент.ВысотаТаблицы);
		
		// Выведем нужное количество экземпляров (при печати комплектов)
		Если КомплектыПечати <> Неопределено
			И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено
			И КомплектПечатиПоСсылке.Экземпляров > 1 Тогда
			
			ОбластьКопирования = ТабличныйДокумент.ПолучитьОбласть(
				НомерСтрокиНачало,
				,
				ТабличныйДокумент.ВысотаТаблицы);
			
			Для Итератор = 2 По КомплектПечатиПоСсылке.Экземпляров Цикл
				
				Если (Итератор - 1)/2 = Окр((Итератор - 1)/2,0) Тогда 
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц(); //- на одной странице
				КонецЕсли;
				ТабличныйДокумент.Вывести(ОбластьКопирования);
				
			КонецЦикла;
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Печать_Доставка_АктПриемкиВовзвратаА4

Функция СформироватьПечатнуюФормуДоставка_АктПриемкиВовзвратаА4(СтруктураТипов, ОбъектыПечати, ПараметрыПечати, КомплектыПечати = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_АктПриемкиВовзвратаА4";
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
			
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ДанныеДляПечати = ПолучитьДанныеДляПечатнойФормыДоставка_АктПриемкиВовзвратаА4(
			СтруктураОбъектов.Значение);
		
		// Сформированный тбаличный документ
		ЗаполнитьТабличныйДокументДоставка_АктПриемкиВовзвратаА4(
			ТабличныйДокумент,
			ДанныеДляПечати,
			ОбъектыПечати,
			КомплектыПечати,
			"АктПриемкиА4");
			
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыДоставка_АктПриемкиВовзвратаА4(МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	пкАктПриемкиВозврата.Ссылка КАК Ссылка,
	|	пкАктПриемкиВозврата.Дата КАК ДатаОтгрузки,
	|	пкАктПриемкиВозврата.ПриемкаВозврат КАК ПриемкаВозврат,
	|	пкДоставка.Подразделение КАК Подразделение,
	|	пкДоставка.Организация КАК Организация,
	|	пкДоставка.ТранспортноеСредство КАК ТранспортноеСредство,
	|	пкДоставка.Водитель КАК Водитель,
	|	пкДоставка.Перевозчик КАК Перевозчик,
	|	ПОДСТРОКА(пкАктПриемкиВозврата.АдресДоставки, 1, 150) КАК АдресДоставки,
	|	пкАктПриемкиВозврата.Партнер КАК Партнер,
	|	пкАктПриемкиВозврата.Договор КАК Договор,
	|	пкАктПриемкиВозврата.ОбъектСтроительства КАК ОбъектСтроительства,
	|	пкАктПриемкиВозврата.КонтактноеЛицо КАК КонтактноеЛицо,
	|	пкАктПриемкиВозврата.Ответственный КАК Ответственный,
	|	пкДоставка.СпособДоставки,
	|	пкДоставка.ДоставкуВыполняет
	|ИЗ
	|	Документ.пкАктПриемкиВозврата КАК пкАктПриемкиВозврата
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкДоставка КАК пкДоставка
	|		ПО пкАктПриемкиВозврата.Доставка = пкДоставка.Ссылка
	|			И (пкАктПриемкиВозврата.Ссылка В (&МассивОбъектов))
	|ГДЕ
	|	пкАктПриемкиВозврата.Ссылка В(&МассивОбъектов)
	|	И НЕ пкАктПриемкиВозврата.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	пкАктПриемкиВозврата.Ссылка,
	|	пкАктПриемкиВозврата.Дата,
	|	пкАктПриемкиВозврата.ПриемкаВозврат,
	|	пкДоставка.Подразделение,
	|	пкДоставка.Организация,
	|	пкДоставка.ТранспортноеСредство,
	|	пкДоставка.Водитель,
	|	пкДоставка.Перевозчик,
	|	ПОДСТРОКА(пкАктПриемкиВозврата.АдресДоставки, 1, 150),
	|	пкАктПриемкиВозврата.Партнер,
	|	пкАктПриемкиВозврата.Договор,
	|	пкАктПриемкиВозврата.ОбъектСтроительства,
	|	пкАктПриемкиВозврата.КонтактноеЛицо,
	|	пкАктПриемкиВозврата.Ответственный,
	|	пкДоставка.СпособДоставки,
	|	пкДоставка.ДоставкуВыполняет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка КАК Ссылка,
	|	пкЗаданиеНаПеревозку.ДатаОтгрузки КАК ДатаОтгрузки,
	|	пкАктПриемкиВозврата.ПриемкаВозврат КАК ПриемкаВозврат,
	|	ПОДСТРОКА(пкАктПриемкиВозврата.АдресДоставки, 1, 150) КАК АдресДоставки,
	|	пкАктПриемкиВозврата.Партнер КАК Партнер,
	|	пкЗаявкаНаАрендуТехники.Ссылка КАК Заявка,
	|	пкЗаявкаНаАрендуТехники.Договор КАК Договор,
	|	пкАктПриемкиВозврата.ОбъектСтроительства КАК ОбъектСтроительства,
	|	пкАктПриемкиВозврата.КонтактноеЛицо КАК КонтактноеЛицо,
	|	пкЗаданиеНаПеревозку.Модель КАК Модель,
	|	пкЗаданиеНаПеревозку.Техника КАК Техника,
	|	ВЫБОР
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
	|			ТОГДА ВЫБОР
	|					КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
	|						ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
	|					ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
	|				КОНЕЦ
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
	|			ТОГДА """"
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА """"
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
	|						ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
	|					ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
	|				КОНЕЦ
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
	|			ТОГДА ВЫБОР
	|					КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
	|						ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
	|					ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
	|				КОНЕЦ
	|	КОНЕЦ КАК ДатаНачалаАренды,
	|	ВЫБОР
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
	|			ТОГДА пкЗаявкаНаАрендуТехникиТовары.ДатаВозврата
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
	|			ТОГДА ВЫБОР
	|					КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
	|						ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
	|					ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
	|				КОНЕЦ
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
	|						ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
	|					ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
	|				КОНЕЦ
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА пкЗаявкаНаАрендуТехникиТовары.ДатаВозврата
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
	|			ТОГДА """"
	|	КОНЕЦ КАК ДатаВозврата,
	|	пкАктПриемкиВозврата.ТочкаМаршрута КАК ТочкаМаршрута,
	|	СУММА(1) КАК Количество,
	|	пкАктПриемкиВозврата.НомерХодки КАК НомерХодки,
	|	пкЗаданиеНаПеревозку.ДатаАренды КАК ДатаАренды,
	|	пкЗаявкаНаАрендуТехники.КонтактноеЛицо КАК КонтактноеЛицоЗаявки,
	|	пкЗаявкаНаАрендуТехники.ВтороеКонтактноеЛицо КАК ВтороеКонтактноеЛицо,
	|	пкЗаявкаНаАрендуТехники.Менеджер КАК МенеджерЗаявки,
	|	пкАктПриемкиВозвратаЗаданияНаПеревозку.Транспортировка КАК Транспортировка,
	|	пкАктПриемкиВозвратаЗаданияНаПеревозку.СтоимостьАренды КАК СтоимостьАренды,
	|	пкАктПриемкиВозвратаЗаданияНаПеревозку.НомерСтроки,
	|	пкЗаявкаНаАрендуТехникиТовары.ЗамененнаяМодель
	|ИЗ
	|	Документ.пкАктПриемкиВозврата.ЗаданияНаПеревозку КАК пкАктПриемкиВозвратаЗаданияНаПеревозку
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкАктПриемкиВозврата КАК пкАктПриемкиВозврата
	|		ПО пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка = пкАктПриемкиВозврата.Ссылка
	|			И (пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка В (&МассивОбъектов))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкЗаданиеНаПеревозку КАК пкЗаданиеНаПеревозку
	|		ПО пкАктПриемкиВозвратаЗаданияНаПеревозку.ЗаданиеНаПеревозку = пкЗаданиеНаПеревозку.Ссылка
	|			И (пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка В (&МассивОбъектов))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкЗаявкаНаАрендуТехники.Товары КАК пкЗаявкаНаАрендуТехникиТовары
	|		ПО пкАктПриемкиВозвратаЗаданияНаПеревозку.ЗаявкаНаАрендуТехники = пкЗаявкаНаАрендуТехникиТовары.Ссылка
	|			И (пкЗаданиеНаПеревозку.Модель = пкЗаявкаНаАрендуТехникиТовары.Номенклатура)
	|			И (пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка В (&МассивОбъектов))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкЗаявкаНаАрендуТехники КАК пкЗаявкаНаАрендуТехники
	|		ПО пкАктПриемкиВозвратаЗаданияНаПеревозку.ЗаявкаНаАрендуТехники = пкЗаявкаНаАрендуТехники.Ссылка
	|			И (пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка В (&МассивОбъектов))
	|ГДЕ
	|	пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка В(&МассивОбъектов)
	|	И НЕ пкАктПриемкиВозврата.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка,
	|	пкЗаданиеНаПеревозку.ДатаОтгрузки,
	|	пкАктПриемкиВозврата.ПриемкаВозврат,
	|	ПОДСТРОКА(пкАктПриемкиВозврата.АдресДоставки, 1, 150),
	|	пкАктПриемкиВозврата.Партнер,
	|	пкЗаявкаНаАрендуТехники.Ссылка,
	|	пкЗаявкаНаАрендуТехники.Договор,
	|	пкАктПриемкиВозврата.ОбъектСтроительства,
	|	пкАктПриемкиВозврата.КонтактноеЛицо,
	|	пкЗаданиеНаПеревозку.Модель,
	|	пкЗаданиеНаПеревозку.Техника,
	|	пкАктПриемкиВозврата.ТочкаМаршрута,
	|	пкАктПриемкиВозврата.НомерХодки,
	|	пкЗаданиеНаПеревозку.ДатаАренды,
	|	пкАктПриемкиВозвратаЗаданияНаПеревозку.Транспортировка,
	|	пкАктПриемкиВозвратаЗаданияНаПеревозку.СтоимостьАренды,
	|	ВЫБОР
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
	|			ТОГДА ВЫБОР
	|					КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
	|						ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
	|					ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
	|				КОНЕЦ
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
	|			ТОГДА """"
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА """"
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
	|						ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
	|					ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
	|				КОНЕЦ
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
	|			ТОГДА ВЫБОР
	|					КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
	|						ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
	|					ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
	|				КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
	|			ТОГДА пкЗаявкаНаАрендуТехникиТовары.ДатаВозврата
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
	|			ТОГДА ВЫБОР
	|					КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
	|						ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
	|					ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
	|				КОНЕЦ
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
	|						ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
	|					ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
	|				КОНЕЦ
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА пкЗаявкаНаАрендуТехникиТовары.ДатаВозврата
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
	|			ТОГДА """"
	|	КОНЕЦ,
	|	пкЗаявкаНаАрендуТехники.КонтактноеЛицо,
	|	пкЗаявкаНаАрендуТехники.ВтороеКонтактноеЛицо,
	|	пкЗаявкаНаАрендуТехники.Менеджер,
	|	пкАктПриемкиВозвратаЗаданияНаПеревозку.НомерСтроки,
	|	пкЗаявкаНаАрендуТехникиТовары.ЗамененнаяМодель
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерХодки,
	|	ТочкаМаршрута";
	
	МассивАктов = Новый Массив;
	Для Каждого текСтрока Из МассивОбъектов Цикл
		Если ТипЗнч(текСтрока) = Тип("ДокументСсылка.пкАктПриемкиВозврата") Тогда
			МассивАктов.Добавить(текСтрока);
		КонецЕсли;
	КонецЦикла;
	
	ЗапросД = Новый Запрос;
	ЗапросД.Текст = 
	"ВЫБРАТЬ
	|	пкАктПриемкиВозврата.Ссылка
	|ИЗ
	|	Документ.пкАктПриемкиВозврата КАК пкАктПриемкиВозврата
	|ГДЕ
	|	пкАктПриемкиВозврата.Доставка В(&МассивОбъектов)";
	ЗапросД.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	РезЗапроса = ЗапросД.Выполнить().Выбрать();
	Пока РезЗапроса.Следующий() Цикл
		МассивАктов.Добавить(РезЗапроса.Ссылка);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивАктов);
	Запрос.УстановитьПараметр("ПредставлениеДокумента",	НСтр("ru = 'Акт приемки/возврата'"));
	Запрос.УстановитьПараметр("ПредставлениеВОшибке",	НСтр("ru = 'Акт приемки/возврата'"));
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке", ПакетРезультатовЗапроса[0]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти", ПакетРезультатовЗапроса[1]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументДоставка_АктПриемкиВовзвратаА4(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, КомплектыПечати, ИмяМакета)
	
	ДанныеПечати		= ДанныеДляПечати.РезультатПоШапке.Выбрать();
	СтрокиТЧ			= ДанныеДляПечати.РезультатПоТабличнойЧасти.Выгрузить();
	
	ШаблонОшибкиСтроки	= "";
	
	ПервыйДокумент		= Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Макет = ПолучитьМакет(?(ДанныеПечати.ПриемкаВозврат = Перечисления.пкПриемкаВозврат.Приемка, "АктПриемкиА4", "АктВозвратаА4"));
		
		// Для печати комплектов
		Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено Тогда
			
			КомплектПечатиПоСсылке = КомплектыПечати.Найти(ДанныеПечати.Ссылка, "Ссылка");
			
			Если КомплектПечатиПоСсылке = Неопределено Тогда
				КомплектПечатиПоСсылке = КомплектыПечати[0];
			КонецЕсли;
			
			Если КомплектПечатиПоСсылке.Экземпляров = 0 Тогда
				Продолжить
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
#Область ОбластиМакета
		
		ОбластьШапка			= Макет.ПолучитьОбласть("Шапка");
		ОбластьДопСтрока		= Макет.ПолучитьОбласть("ДопСтрока");
		ОбластьТабЧасть			= Макет.ПолучитьОбласть("ТабЧасть");
		ОбластьПустаяТабЧасть	= Макет.ПолучитьОбласть("ПустаяТабЧасть");
		ОбластьПодвал			= Макет.ПолучитьОбласть("Подвал");
		
#КонецОбласти
		
#Область ВыводШапки
		
		// ШАПКА - ЗАГОЛОВОК
		
		ШтрихкодированиеПечатныхФорм.кнВывестиШтрихкодEANВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьШапка, ДанныеПечати.Ссылка, "Акт приемки/возврата");
		
		//УстановитьПараметр(ОбластьШапка, "Организация", ДанныеПечати.Организация);
		УстановитьПараметр(ОбластьШапка, "Дата", Формат(ДанныеПечати.ДатаОтгрузки, "ДЛФ=Д"));
		УстановитьПараметр(ОбластьШапка, "Время", "");//Формат('00010101', "ДЛФ=T"));
		УстановитьПараметр(ОбластьШапка, "Номер", ?(ЗначениеЗаполнено(ДанныеПечати.Договор),СокрЛП(ДанныеПечати.Договор.Номер) + " от " + Формат(ДанныеПечати.Договор.Дата,"ДЛФ=Д"), ""));
		УстановитьПараметр(ОбластьШапка, "Контрагент", ?(ЗначениеЗаполнено(ДанныеПечати.Партнер) И ТипЗнч(ДанныеПечати.Партнер) = Тип("СправочникСсылка.Партнеры"), ДанныеПечати.Партнер.НаименованиеПолное, ДанныеПечати.Партнер));
		УстановитьПараметр(ОбластьШапка, "Объект", ?(ЗначениеЗаполнено(ДанныеПечати.ОбъектСтроительства), ДанныеПечати.ОбъектСтроительства, "")	);
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
#КонецОбласти

		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		
		ТаблицаСтрок = СтрокиТЧ.НайтиСтроки(СтруктураПоиска);
		
		Если ТаблицаСтрок.Количество() = 0 Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибкиСтроки,
				ДанныеПечати.Ссылка,
				НСтр("ru='Нет строк для приемки или возврата'"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДанныеПечати.Ссылка);
			Продолжить;
			
		КонецЕсли;
		
#Область ВыводЗаголовкаТаблицы

		Если ТаблицаСтрок.Количество() > 1 Тогда
			УстановитьПараметр(ОбластьДопСтрока, "ДопСтрока", "Подъемники стреловые:");
		Иначе
			УстановитьПараметр(ОбластьДопСтрока, "ДопСтрока", "Подъемник стреловой:");
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьДопСтрока);
		
#КонецОбласти
		
#Область ВыводТаблицыТовары

		КонтактноеЛицо	     = "";
		ВтороеКонтактноеЛицо = "";
		Ответственный	     = "";

		НомерСтроки = 0;
        
        Транспортировка = "";
                
        Для Каждого СтрокаТовары Из ТаблицаСтрок Цикл
            			
			НомерСтроки = НомерСтроки + 1;
            
            Если ДанныеПечати.ПриемкаВозврат = Перечисления.пкПриемкаВозврат.Приемка И НомерСтроки = 1 Тогда
				
				Если ЗначениеЗаполнено(СтрокаТовары.Заявка) Тогда
					
					Заявка = СтрокаТовары.Заявка; 
                
	                Если Заявка.СтоимостьТранспортировки > 0 И Заявка.КоличествоХодок > 0 Тогда
                        Транспортировка = Строка(Заявка.СтоимостьТранспортировки) + " " + ?(ЗначениеЗаполнено(Заявка.Договор.пкВалютаТарифа), Заявка.Договор.пкВалютаТарифа, "RUB") 
                            + " * " + ?(Заявка.КоличествоХодок < 2, Строка(Заявка.КоличествоХодок), "2") + ?(Заявка.СНДС, " + НДС", "");       
	                КонецЕсли;    
				КонецЕсли;
            КонецЕсли; 
            
			УстановитьПараметр(ОбластьТабЧасть, "Н", НомерСтроки);
			УстановитьПараметр(ОбластьТабЧасть, "Номенклатура", СтрокаТовары.Модель);
			УстановитьПараметр(ОбластьТабЧасть, "СерийныйНомер", ?(ЗначениеЗаполнено(СтрокаТовары.Техника), СокрЛП(СтрокаТовары.Техника.Код), ""));
			УстановитьПараметр(ОбластьТабЧасть, "АрендаДата", Формат(СтрокаТовары.ДатаНачалаАренды,"ДЛФ=Д"));
			УстановитьПараметр(ОбластьТабЧасть, "Дата", Формат(СтрокаТовары.ДатаВозврата,"ДЛФ=Д"));
			
			СтоимостьАренды	= ?(СокрЛП(СтрокаТовары.СтоимостьАренды) = "", "по договору", СокрЛП(СтрокаТовары.СтоимостьАренды));
			СтоимостьАренды	= СтоимостьАренды + ?(ЗначениеЗаполнено(СтрокаТовары.ЗамененнаяМодель), 
								?(СтоимостьАренды = "", "", Символы.ПС) + "как " + СтрокаТовары.ЗамененнаяМодель, 
								"");
			УстановитьПараметр(ОбластьТабЧасть, "СтоимостьАренды", СтоимостьАренды);
            
            Если Транспортировка <> "" И НомерСтроки = 1 Тогда
			    УстановитьПараметр(ОбластьТабЧасть, "Транспортировка", Транспортировка);
            ИначеЕсли Транспортировка <> "" Тогда
			    УстановитьПараметр(ОбластьТабЧасть, "Транспортировка", "");
            Иначе    
			    УстановитьПараметр(ОбластьТабЧасть, "Транспортировка", ?(ДанныеПечати.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз 
                    ИЛИ ДанныеПечати.ДоставкуВыполняет = Перечисления.ТипыИсполнителейЗаданийНаПеревозку.Самовывоз, "самовывоз", 
                    ?(СокрЛП(СтрокаТовары.Транспортировка) = "", "по договору", СокрЛП(СтрокаТовары.Транспортировка))));
            КонецЕсли;    
			
			ТабличныйДокумент.Вывести(ОбластьТабЧасть);
			
			Если НЕ ЗначениеЗаполнено(КонтактноеЛицо) Тогда
				КонтактноеЛицо	= СтрокаТовары.КонтактноеЛицоЗаявки;
            КонецЕсли;
            
			Если НЕ ЗначениеЗаполнено(ВтороеКонтактноеЛицо) Тогда
				ВтороеКонтактноеЛицо = СтрокаТовары.ВтороеКонтактноеЛицо;
            КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
				Ответственный	= СтрокаТовары.МенеджерЗаявки;
			КонецЕсли;

		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			КонтактноеЛицо	= ДанныеПечати.КонтактноеЛицо;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
			Ответственный	= ДанныеПечати.Ответственный;
		КонецЕсли;
		
		Пока НомерСтроки < 10 Цикл
			
			НомерСтроки = НомерСтроки + 1;
			УстановитьПараметр(ОбластьПустаяТабЧасть, "НП", НомерСтроки);
			
			ТабличныйДокумент.Вывести(ОбластьПустаяТабЧасть);
			
		КонецЦикла;
		
#КонецОбласти
		
#Область ВыводПодвала
		
		Если ДанныеПечати.ПриемкаВозврат = Перечисления.пкПриемкаВозврат.Возврат Тогда
			УстановитьПараметр(ОбластьПодвал, "Паспорт", "1. Паспорт (копия)");
			УстановитьПараметр(ОбластьПодвал, "ВахтенныйЖурнал", "2. Вахтенный журнал");
		КонецЕсли;
		
		УстановитьПараметр(ОбластьПодвал, "КонтактноеЛицо", ?(ЗначениеЗаполнено(КонтактноеЛицо), КонтактноеЛицо.Наименование, "") + " Тел: " + ПолучитьТелефонИзКонтактнойИнформации(КонтактноеЛицо) 
            + ?(ЗначениеЗаполнено(ВтороеКонтактноеЛицо), ", " + ВтороеКонтактноеЛицо.Наименование + " Тел: " + ПолучитьТелефонИзКонтактнойИнформации(ВтороеКонтактноеЛицо), ""));
		УстановитьПараметр(ОбластьПодвал, "Ответственный", ?(ЗначениеЗаполнено(Ответственный), Ответственный.Наименование, "") + " Тел: " + ПолучитьТелефонИзКонтактнойИнформации(Ответственный));
		
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		
#КонецОбласти
		
		// Выведем нужное количество экземпляров (при печати комплектов)
		Если КомплектыПечати <> Неопределено
			И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено
			И КомплектПечатиПоСсылке.Экземпляров > 1 Тогда
			
			ОбластьКопирования = ТабличныйДокумент.ПолучитьОбласть(
				НомерСтрокиНачало,
				,
				ТабличныйДокумент.ВысотаТаблицы);
			
			Для Итератор = 2 По КомплектПечатиПоСсылке.Экземпляров Цикл
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьКопирования);
				
			КонецЦикла;
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Печать_Доставка_АктПриемкиВовзвратаА42017

Функция СформироватьПечатнуюФормуДоставка_АктПриемкиВовзвратаА42017(СтруктураТипов, ОбъектыПечати, ПараметрыПечати, КомплектыПечати = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_АктПриемкиВовзвратаА42017";
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
			
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ДанныеДляПечати = ПолучитьДанныеДляПечатнойФормыДоставка_АктПриемкиВовзвратаА42017(
			СтруктураОбъектов.Значение);
		
		// Сформированный тбаличный документ
		ЗаполнитьТабличныйДокументДоставка_АктПриемкиВовзвратаА42017(
			ТабличныйДокумент,
			ДанныеДляПечати,
			ОбъектыПечати,
			КомплектыПечати,
			"АктПриемкиА4");
			
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыДоставка_АктПриемкиВовзвратаА42017(МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
    |   пкАктПриемкиВозврата.Ссылка КАК Ссылка,
    |   пкАктПриемкиВозврата.Дата КАК ДатаОтгрузки,
    |   пкАктПриемкиВозврата.ПриемкаВозврат КАК ПриемкаВозврат,
    |   пкДоставка.Подразделение КАК Подразделение,
    |   пкДоставка.Организация КАК Организация,
    |   пкДоставка.ТранспортноеСредство КАК ТранспортноеСредство,
    |   пкДоставка.Водитель КАК Водитель,
    |   пкДоставка.Перевозчик КАК Перевозчик,
    |   ПОДСТРОКА(пкАктПриемкиВозврата.АдресДоставки, 1, 150) КАК АдресДоставки,
    |   пкАктПриемкиВозврата.Партнер КАК Партнер,
    |   пкАктПриемкиВозврата.Договор КАК Договор,
    |   пкАктПриемкиВозврата.ОбъектСтроительства КАК ОбъектСтроительства,
    |   пкАктПриемкиВозврата.КонтактноеЛицо КАК КонтактноеЛицо,
    |   пкАктПриемкиВозврата.Ответственный КАК Ответственный,
    |   пкДоставка.СпособДоставки,
    |   пкДоставка.ДоставкуВыполняет
    |ИЗ
    |   Документ.пкАктПриемкиВозврата КАК пкАктПриемкиВозврата
    |       ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкДоставка КАК пкДоставка
    |       ПО пкАктПриемкиВозврата.Доставка = пкДоставка.Ссылка
    |           И (пкАктПриемкиВозврата.Ссылка В (&МассивОбъектов))
    |ГДЕ
    |   пкАктПриемкиВозврата.Ссылка В(&МассивОбъектов)
    |   И НЕ пкАктПриемкиВозврата.ПометкаУдаления
    |
    |СГРУППИРОВАТЬ ПО
    |   пкАктПриемкиВозврата.Ссылка,
    |   пкАктПриемкиВозврата.Дата,
    |   пкАктПриемкиВозврата.ПриемкаВозврат,
    |   пкДоставка.Подразделение,
    |   пкДоставка.Организация,
    |   пкДоставка.ТранспортноеСредство,
    |   пкДоставка.Водитель,
    |   пкДоставка.Перевозчик,
    |   ПОДСТРОКА(пкАктПриемкиВозврата.АдресДоставки, 1, 150),
    |   пкАктПриемкиВозврата.Партнер,
    |   пкАктПриемкиВозврата.Договор,
    |   пкАктПриемкиВозврата.ОбъектСтроительства,
    |   пкАктПриемкиВозврата.КонтактноеЛицо,
    |   пкАктПриемкиВозврата.Ответственный,
    |   пкДоставка.СпособДоставки,
    |   пкДоставка.ДоставкуВыполняет
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
    |   пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка КАК Ссылка,
    |   пкЗаданиеНаПеревозку.ДатаОтгрузки КАК ДатаОтгрузки,
    |   пкАктПриемкиВозврата.ПриемкаВозврат КАК ПриемкаВозврат,
    |   ПОДСТРОКА(пкАктПриемкиВозврата.АдресДоставки, 1, 150) КАК АдресДоставки,
    |   пкАктПриемкиВозврата.Партнер КАК Партнер,
    |   пкЗаявкаНаАрендуТехники.Ссылка КАК Заявка,
    |   пкЗаявкаНаАрендуТехники.Договор КАК Договор,
    |   пкАктПриемкиВозврата.ОбъектСтроительства КАК ОбъектСтроительства,
    |   пкАктПриемкиВозврата.КонтактноеЛицо КАК КонтактноеЛицо,
    |   пкЗаданиеНаПеревозку.Модель КАК Модель,
    |   пкЗаданиеНаПеревозку.Техника КАК Техника,
    |   ВЫБОР
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
    |           ТОГДА """"
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
    |               И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |           ТОГДА """"
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
    |               И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |   КОНЕЦ КАК ДатаНачалаАренды,
    |   ВЫБОР
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
    |           ТОГДА пкЗаявкаНаАрендуТехникиТовары.ДатаВозврата
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
    |               И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
    |               И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |           ТОГДА пкЗаявкаНаАрендуТехникиТовары.ДатаВозврата
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
    |           ТОГДА """"
    |   КОНЕЦ КАК ДатаВозврата,
    |   пкАктПриемкиВозврата.ТочкаМаршрута КАК ТочкаМаршрута,
    |   СУММА(1) КАК Количество,
    |   пкАктПриемкиВозврата.НомерХодки КАК НомерХодки,
    |   пкЗаданиеНаПеревозку.ДатаАренды КАК ДатаАренды,
    |   пкЗаявкаНаАрендуТехники.КонтактноеЛицо КАК КонтактноеЛицоЗаявки,
    |   пкЗаявкаНаАрендуТехники.ВтороеКонтактноеЛицо КАК ВтороеКонтактноеЛицо,
    |   пкЗаявкаНаАрендуТехники.Менеджер КАК МенеджерЗаявки,
    |   пкАктПриемкиВозвратаЗаданияНаПеревозку.Транспортировка КАК Транспортировка,
    |   пкАктПриемкиВозвратаЗаданияНаПеревозку.СтоимостьАренды КАК СтоимостьАренды,
	|	пкАктПриемкиВозвратаЗаданияНаПеревозку.НомерСтроки,
	|	пкЗаявкаНаАрендуТехникиТовары.ЗамененнаяМодель
    |ИЗ
    |   Документ.пкАктПриемкиВозврата.ЗаданияНаПеревозку КАК пкАктПриемкиВозвратаЗаданияНаПеревозку
    |       ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкАктПриемкиВозврата КАК пкАктПриемкиВозврата
    |       ПО пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка = пкАктПриемкиВозврата.Ссылка
    |           И (пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка В (&МассивОбъектов))
    |       ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкЗаданиеНаПеревозку КАК пкЗаданиеНаПеревозку
    |       ПО пкАктПриемкиВозвратаЗаданияНаПеревозку.ЗаданиеНаПеревозку = пкЗаданиеНаПеревозку.Ссылка
    |           И (пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка В (&МассивОбъектов))
    |       ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкЗаявкаНаАрендуТехники.Товары КАК пкЗаявкаНаАрендуТехникиТовары
    |       ПО пкАктПриемкиВозвратаЗаданияНаПеревозку.ЗаявкаНаАрендуТехники = пкЗаявкаНаАрендуТехникиТовары.Ссылка
    |           И (пкЗаданиеНаПеревозку.Модель = пкЗаявкаНаАрендуТехникиТовары.Номенклатура)
    |           И (пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка В (&МассивОбъектов))
    |       ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкЗаявкаНаАрендуТехники КАК пкЗаявкаНаАрендуТехники
    |       ПО пкАктПриемкиВозвратаЗаданияНаПеревозку.ЗаявкаНаАрендуТехники = пкЗаявкаНаАрендуТехники.Ссылка
    |           И (пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка В (&МассивОбъектов))
    |ГДЕ
    |   пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка В(&МассивОбъектов)
    |   И НЕ пкАктПриемкиВозврата.ПометкаУдаления
    |
    |СГРУППИРОВАТЬ ПО
    |   пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка,
    |   пкЗаданиеНаПеревозку.ДатаОтгрузки,
    |   пкАктПриемкиВозврата.ПриемкаВозврат,
    |   ПОДСТРОКА(пкАктПриемкиВозврата.АдресДоставки, 1, 150),
    |   пкАктПриемкиВозврата.Партнер,
    |   пкЗаявкаНаАрендуТехники.Ссылка,
    |   пкЗаявкаНаАрендуТехники.Договор,
    |   пкАктПриемкиВозврата.ОбъектСтроительства,
    |   пкАктПриемкиВозврата.КонтактноеЛицо,
    |   пкЗаданиеНаПеревозку.Модель,
    |   пкЗаданиеНаПеревозку.Техника,
    |   пкАктПриемкиВозврата.ТочкаМаршрута,
    |   пкАктПриемкиВозврата.НомерХодки,
    |   пкЗаданиеНаПеревозку.ДатаАренды,
    |   пкАктПриемкиВозвратаЗаданияНаПеревозку.Транспортировка,
    |   пкАктПриемкиВозвратаЗаданияНаПеревозку.СтоимостьАренды,
    |   ВЫБОР
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
    |           ТОГДА """"
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
    |               И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |           ТОГДА """"
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
    |               И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |   КОНЕЦ,
    |   ВЫБОР
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
    |           ТОГДА пкЗаявкаНаАрендуТехникиТовары.ДатаВозврата
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
    |               И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
    |               И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |           ТОГДА пкЗаявкаНаАрендуТехникиТовары.ДатаВозврата
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
    |           ТОГДА """"
    |   КОНЕЦ,
    |   пкЗаявкаНаАрендуТехники.КонтактноеЛицо,
    |   пкЗаявкаНаАрендуТехники.ВтороеКонтактноеЛицо,
    |   пкЗаявкаНаАрендуТехники.Менеджер,
	|	пкАктПриемкиВозвратаЗаданияНаПеревозку.НомерСтроки,
	|	пкЗаявкаНаАрендуТехникиТовары.ЗамененнаяМодель
    |
    |УПОРЯДОЧИТЬ ПО
    |   НомерХодки,
    |   ТочкаМаршрута";
	
	МассивАктов = Новый Массив;
	Для Каждого текСтрока Из МассивОбъектов Цикл
		Если ТипЗнч(текСтрока) = Тип("ДокументСсылка.пкАктПриемкиВозврата") Тогда
			МассивАктов.Добавить(текСтрока);
		КонецЕсли;
	КонецЦикла;
	
	ЗапросД = Новый Запрос;
	ЗапросД.Текст = 
	"ВЫБРАТЬ
	|	пкАктПриемкиВозврата.Ссылка
	|ИЗ
	|	Документ.пкАктПриемкиВозврата КАК пкАктПриемкиВозврата
	|ГДЕ
	|	пкАктПриемкиВозврата.Доставка В(&МассивОбъектов)";
	ЗапросД.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	РезЗапроса = ЗапросД.Выполнить().Выбрать();
	Пока РезЗапроса.Следующий() Цикл
		МассивАктов.Добавить(РезЗапроса.Ссылка);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивАктов);
	Запрос.УстановитьПараметр("ПредставлениеДокумента",	НСтр("ru = 'Акт приемки/возврата'"));
	Запрос.УстановитьПараметр("ПредставлениеВОшибке",	НСтр("ru = 'Акт приемки/возврата'"));
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке", ПакетРезультатовЗапроса[0]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти", ПакетРезультатовЗапроса[1]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументДоставка_АктПриемкиВовзвратаА42017(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, КомплектыПечати, ИмяМакета)
	
	ДанныеПечати		= ДанныеДляПечати.РезультатПоШапке.Выбрать();
	СтрокиТЧ			= ДанныеДляПечати.РезультатПоТабличнойЧасти.Выгрузить();
	
	ШаблонОшибкиСтроки	= "";
	
	ПервыйДокумент		= Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Макет = ПолучитьМакет(?(ДанныеПечати.ПриемкаВозврат = Перечисления.пкПриемкаВозврат.Приемка, "АктПриемкиА42017", "АктВозвратаА42017"));
		
		// Для печати комплектов
		Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено Тогда
			
			КомплектПечатиПоСсылке = КомплектыПечати.Найти(ДанныеПечати.Ссылка, "Ссылка");
			
			Если КомплектПечатиПоСсылке = Неопределено Тогда
				КомплектПечатиПоСсылке = КомплектыПечати[0];
			КонецЕсли;
			
			Если КомплектПечатиПоСсылке.Экземпляров = 0 Тогда
				Продолжить
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
#Область ОбластиМакета
		
		ОбластьШапка			= Макет.ПолучитьОбласть("Шапка");
		ОбластьДопСтрока		= Макет.ПолучитьОбласть("ДопСтрока");
		ОбластьТабЧасть			= Макет.ПолучитьОбласть("ТабЧасть");
		ОбластьПустаяТабЧасть	= Макет.ПолучитьОбласть("ПустаяТабЧасть");
		ОбластьПодвал			= Макет.ПолучитьОбласть("Подвал");
		
#КонецОбласти
		
#Область ВыводШапки
		
		// ШАПКА - ЗАГОЛОВОК
		
		ШтрихкодированиеПечатныхФорм.кнВывестиШтрихкодEANВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьШапка, ДанныеПечати.Ссылка, "Акт приемки/возврата");
		
		//УстановитьПараметр(ОбластьШапка, "Организация", ДанныеПечати.Организация);
		УстановитьПараметр(ОбластьШапка, "Дата", Формат(ДанныеПечати.ДатаОтгрузки, "ДЛФ=Д"));
		УстановитьПараметр(ОбластьШапка, "Время", "");//Формат('00010101', "ДЛФ=T"));
		УстановитьПараметр(ОбластьШапка, "Номер", ?(ЗначениеЗаполнено(ДанныеПечати.Договор),СокрЛП(ДанныеПечати.Договор.Номер) + " от " + Формат(ДанныеПечати.Договор.Дата,"ДЛФ=Д"), "_________________"));
		УстановитьПараметр(ОбластьШапка, "Контрагент", ?(ЗначениеЗаполнено(ДанныеПечати.Партнер) И ТипЗнч(ДанныеПечати.Партнер) = Тип("СправочникСсылка.Партнеры"), ДанныеПечати.Партнер.НаименованиеПолное, ДанныеПечати.Партнер));
		УстановитьПараметр(ОбластьШапка, "Объект", ?(ЗначениеЗаполнено(ДанныеПечати.ОбъектСтроительства), ДанныеПечати.ОбъектСтроительства, "")	);
		
		УстановитьПараметр(ОбластьШапка, "Подразделение", ?(ЗначениеЗаполнено(ДанныеПечати.Подразделение), ДанныеПечати.Подразделение, "________________"));
		ДиректорДепартамента	= "_____________________, действующего на основании _____________________";
		Если ЗначениеЗаполнено(ДанныеПечати.Подразделение) Тогда
	        СтрокаРеквизитов = ПолучитьРеквизитыДоговора(ДанныеПечати.ДатаОтгрузки, ДанныеПечати.Подразделение);
	        Если СтрокаРеквизитов <> Неопределено Тогда
		        ДиректорДепартамента	= СокрЛП(СтрокаРеквизитов.ТекстШапки);
	        КонецЕсли;	
		КонецЕсли;
		УстановитьПараметр(ОбластьШапка, "ДиректорДепартамента", ДиректорДепартамента);
		
        Контрагент     = "_______________________";
		КонтактноеЛицо = "_______________________";
		Если ЗначениеЗаполнено(ДанныеПечати.Договор) И ЗначениеЗаполнено(ДанныеПечати.Договор.Контрагент) Тогда
	        Контрагент     = ДанныеПечати.Договор.Контрагент.НаименованиеПолное;
			Если ЗначениеЗаполнено(ДанныеПечати.Договор.КонтактноеЛицо) Тогда
				ДолжностьПоВизитке = СклонениеПредставленийОбъектов.ПросклонятьПредставлениеПоВсемПадежам(ДанныеПечати.Договор.КонтактноеЛицо.ДолжностьПоВизитке).РодительныйПадеж;
				КонтактноеЛицо = ?(ДолжностьПоВизитке = Неопределено,"",ДолжностьПоВизитке + " ") + 
					СклонениеПредставленийОбъектов.ПросклонятьПредставлениеПоВсемПадежам(ДанныеПечати.Договор.КонтактноеЛицо.Наименование, Истина).РодительныйПадеж;
			КонецЕсли;
		КонецЕсли;
        ПодписантАрендатора = "________________________";
		Если ЗначениеЗаполнено(ДанныеПечати.Партнер) Тогда
	        ПодписантАрендатора = ?(ЗначениеЗаполнено(ДанныеПечати.Партнер.Комментарий), ДанныеПечати.Партнер.Комментарий, КонтактноеЛицо);
		КонецЕсли;
		УстановитьПараметр(ОбластьШапка, "Арендатор", Контрагент + ", именуемое в дальнейшем Арендатор, в лице " + ПодписантАрендатора);
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
#КонецОбласти

		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		
		ТаблицаСтрок = СтрокиТЧ.НайтиСтроки(СтруктураПоиска);
		
		Если ТаблицаСтрок.Количество() = 0 Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибкиСтроки,
				ДанныеПечати.Ссылка,
				НСтр("ru='Нет строк для приемки или возврата'"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДанныеПечати.Ссылка);
			Продолжить;
			
		КонецЕсли;
		
#Область ВыводЗаголовкаТаблицы

		//Если ТаблицаСтрок.Количество() > 1 Тогда
		//	УстановитьПараметр(ОбластьДопСтрока, "ДопСтрока", "Подъемники стреловые:");
		//Иначе
		//	УстановитьПараметр(ОбластьДопСтрока, "ДопСтрока", "Подъемник стреловой:");
		//КонецЕсли;
		//ТабличныйДокумент.Вывести(ОбластьДопСтрока);
		//
#КонецОбласти
		
#Область ВыводТаблицыТовары

		КонтактноеЛицо	     = "";
		ВтороеКонтактноеЛицо = "";
		Ответственный	     = "";

		НомерСтроки = 0;
        
        Транспортировка = "";
                
        Для Каждого СтрокаТовары Из ТаблицаСтрок Цикл
            			
			НомерСтроки = НомерСтроки + 1;
            
            Если ДанныеПечати.ПриемкаВозврат = Перечисления.пкПриемкаВозврат.Приемка И НомерСтроки = 1 Тогда
				
				Если ЗначениеЗаполнено(СтрокаТовары.Заявка) Тогда
					
					Заявка = СтрокаТовары.Заявка; 
                
	                Если Заявка.СтоимостьТранспортировки > 0 И Заявка.КоличествоХодок > 0 Тогда
                        Транспортировка = Строка(Заявка.СтоимостьТранспортировки) + " " + ?(ЗначениеЗаполнено(Заявка.Договор.пкВалютаТарифа), Заявка.Договор.пкВалютаТарифа, "RUB") 
                            + " * " + ?(Заявка.КоличествоХодок < 2, Строка(Заявка.КоличествоХодок), "2") + ?(Заявка.СНДС, " + НДС", "");       
	                КонецЕсли;    
				КонецЕсли;
            КонецЕсли; 
            
			УстановитьПараметр(ОбластьТабЧасть, "Н", НомерСтроки);
			УстановитьПараметр(ОбластьТабЧасть, "Номенклатура", СтрокаТовары.Модель);
			УстановитьПараметр(ОбластьТабЧасть, "СерийныйНомер", ?(ЗначениеЗаполнено(СтрокаТовары.Техника), СокрЛП(СтрокаТовары.Техника.Код), ""));
			УстановитьПараметр(ОбластьТабЧасть, "ЗаводскойНомер", ?(ЗначениеЗаполнено(СтрокаТовары.Техника), СокрЛП(СтрокаТовары.Техника.ЗаводскойНомер), ""));
			УстановитьПараметр(ОбластьТабЧасть, "АрендаДата", Формат(СтрокаТовары.ДатаНачалаАренды,"ДЛФ=Д"));
			УстановитьПараметр(ОбластьТабЧасть, "Дата", Формат(СтрокаТовары.ДатаВозврата,"ДЛФ=Д"));
			
			СтоимостьАренды	= ?(СокрЛП(СтрокаТовары.СтоимостьАренды) = "", "по договору", СокрЛП(СтрокаТовары.СтоимостьАренды));
			СтоимостьАренды	= СтоимостьАренды + ?(ЗначениеЗаполнено(СтрокаТовары.ЗамененнаяМодель), 
								?(СтоимостьАренды = "", "", Символы.ПС) + "как " + СтрокаТовары.ЗамененнаяМодель, 
								"");
			УстановитьПараметр(ОбластьТабЧасть, "СтоимостьАренды", СтоимостьАренды);
            
            Если Транспортировка <> "" И НомерСтроки = 1 Тогда
			    УстановитьПараметр(ОбластьТабЧасть, "Транспортировка", Транспортировка);
            ИначеЕсли Транспортировка <> "" Тогда
			    УстановитьПараметр(ОбластьТабЧасть, "Транспортировка", "");
            Иначе    
			    УстановитьПараметр(ОбластьТабЧасть, "Транспортировка", ?(ДанныеПечати.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз 
                    ИЛИ ДанныеПечати.ДоставкуВыполняет = Перечисления.ТипыИсполнителейЗаданийНаПеревозку.Самовывоз, "самовывоз", 
                    ?(СокрЛП(СтрокаТовары.Транспортировка) = "", "по договору", СокрЛП(СтрокаТовары.Транспортировка))));
            КонецЕсли;    
			
			ТабличныйДокумент.Вывести(ОбластьТабЧасть);
			
			Если НЕ ЗначениеЗаполнено(КонтактноеЛицо) Тогда
				КонтактноеЛицо	= СтрокаТовары.КонтактноеЛицоЗаявки;
            КонецЕсли;
            
			Если НЕ ЗначениеЗаполнено(ВтороеКонтактноеЛицо) Тогда
				ВтороеКонтактноеЛицо = СтрокаТовары.ВтороеКонтактноеЛицо;
            КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
				Ответственный	= СтрокаТовары.МенеджерЗаявки;
			КонецЕсли;

		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			КонтактноеЛицо	= ДанныеПечати.КонтактноеЛицо;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
			Ответственный	= ДанныеПечати.Ответственный;
		КонецЕсли;
		
		Пока НомерСтроки < 10 Цикл
			
			НомерСтроки = НомерСтроки + 1;
			УстановитьПараметр(ОбластьПустаяТабЧасть, "НП", НомерСтроки);
			
			ТабличныйДокумент.Вывести(ОбластьПустаяТабЧасть);
			
		КонецЦикла;
		
#КонецОбласти
		
#Область ВыводПодвала
		
		Если ДанныеПечати.ПриемкаВозврат = Перечисления.пкПриемкаВозврат.Возврат Тогда
			УстановитьПараметр(ОбластьПодвал, "Паспорт", "1. Паспорт (копия)");
			УстановитьПараметр(ОбластьПодвал, "ВахтенныйЖурнал", "2. Вахтенный журнал");
		КонецЕсли;
		
		УстановитьПараметр(ОбластьПодвал, "КонтактноеЛицо", ?(ЗначениеЗаполнено(КонтактноеЛицо), КонтактноеЛицо.Наименование, "") + " Тел: " + ПолучитьТелефонИзКонтактнойИнформации(КонтактноеЛицо) 
            + ?(ЗначениеЗаполнено(ВтороеКонтактноеЛицо), ", " + ВтороеКонтактноеЛицо.Наименование + " Тел: " + ПолучитьТелефонИзКонтактнойИнформации(ВтороеКонтактноеЛицо), ""));
		УстановитьПараметр(ОбластьПодвал, "Ответственный", ?(ЗначениеЗаполнено(Ответственный), Ответственный.Наименование, "") + " Тел: " + ПолучитьТелефонИзКонтактнойИнформации(Ответственный));
		
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		
#КонецОбласти
		
		// Выведем нужное количество экземпляров (при печати комплектов)
		Если КомплектыПечати <> Неопределено
			И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено
			И КомплектПечатиПоСсылке.Экземпляров > 1 Тогда
			
			ОбластьКопирования = ТабличныйДокумент.ПолучитьОбласть(
				НомерСтрокиНачало,
				,
				ТабличныйДокумент.ВысотаТаблицы);
			
			Для Итератор = 2 По КомплектПечатиПоСсылке.Экземпляров Цикл
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьКопирования);
				
			КонецЦикла;
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Печать_Доставка_АктПриемкиВовзвратаА4Москва

Функция СформироватьПечатнуюФормуДоставка_АктПриемкиВовзвратаА4Москва(СтруктураТипов, ОбъектыПечати, ПараметрыПечати, КомплектыПечати = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_АктПриемкиВовзвратаА4ДляМосквы";
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
			
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ДанныеДляПечати = ПолучитьДанныеДляПечатнойФормыДоставка_АктПриемкиВовзвратаА4Москва(
			СтруктураОбъектов.Значение);
		
		// Сформированный тбаличный документ
		ЗаполнитьТабличныйДокументДоставка_АктПриемкиВовзвратаА4Москва(
			ТабличныйДокумент,
			ДанныеДляПечати,
			ОбъектыПечати,
			КомплектыПечати,
			"АктПриемки");
			
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыДоставка_АктПриемкиВовзвратаА4Москва(МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
    |   пкАктПриемкиВозврата.Ссылка КАК Ссылка,
    |   пкАктПриемкиВозврата.Дата КАК ДатаОтгрузки,
    |   пкАктПриемкиВозврата.ПриемкаВозврат КАК ПриемкаВозврат,
    |   пкДоставка.Подразделение КАК Подразделение,
    |   пкДоставка.Организация КАК Организация,
    |   пкДоставка.ТранспортноеСредство КАК ТранспортноеСредство,
    |   пкДоставка.Водитель КАК Водитель,
    |   пкДоставка.Перевозчик КАК Перевозчик,
    |   ПОДСТРОКА(пкАктПриемкиВозврата.АдресДоставки, 1, 150) КАК АдресДоставки,
    |   пкАктПриемкиВозврата.Партнер КАК Партнер,
    |   пкАктПриемкиВозврата.Договор КАК Договор,
    |   пкАктПриемкиВозврата.ОбъектСтроительства КАК ОбъектСтроительства,
    |   пкАктПриемкиВозврата.КонтактноеЛицо КАК КонтактноеЛицо,
    |   пкАктПриемкиВозврата.Ответственный КАК Ответственный,
    |   пкДоставка.СпособДоставки,
    |   пкДоставка.ДоставкуВыполняет
    |ИЗ
    |   Документ.пкАктПриемкиВозврата КАК пкАктПриемкиВозврата
    |       ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкДоставка КАК пкДоставка
    |       ПО пкАктПриемкиВозврата.Доставка = пкДоставка.Ссылка
    |           И (пкАктПриемкиВозврата.Ссылка В (&МассивОбъектов))
    |ГДЕ
    |   пкАктПриемкиВозврата.Ссылка В(&МассивОбъектов)
    |   И НЕ пкАктПриемкиВозврата.ПометкаУдаления
    |
    |СГРУППИРОВАТЬ ПО
    |   пкАктПриемкиВозврата.Ссылка,
    |   пкАктПриемкиВозврата.Дата,
    |   пкАктПриемкиВозврата.ПриемкаВозврат,
    |   пкДоставка.Подразделение,
    |   пкДоставка.Организация,
    |   пкДоставка.ТранспортноеСредство,
    |   пкДоставка.Водитель,
    |   пкДоставка.Перевозчик,
    |   ПОДСТРОКА(пкАктПриемкиВозврата.АдресДоставки, 1, 150),
    |   пкАктПриемкиВозврата.Партнер,
    |   пкАктПриемкиВозврата.Договор,
    |   пкАктПриемкиВозврата.ОбъектСтроительства,
    |   пкАктПриемкиВозврата.КонтактноеЛицо,
    |   пкАктПриемкиВозврата.Ответственный,
    |   пкДоставка.СпособДоставки,
    |   пкДоставка.ДоставкуВыполняет
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
    |   пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка КАК Ссылка,
    |   пкЗаданиеНаПеревозку.ДатаОтгрузки КАК ДатаОтгрузки,
    |   пкАктПриемкиВозврата.ПриемкаВозврат КАК ПриемкаВозврат,
    |   ПОДСТРОКА(пкАктПриемкиВозврата.АдресДоставки, 1, 150) КАК АдресДоставки,
    |   пкАктПриемкиВозврата.Партнер КАК Партнер,
    |   пкЗаявкаНаАрендуТехники.Ссылка КАК Заявка,
    |   пкЗаявкаНаАрендуТехники.Договор КАК Договор,
    |   пкАктПриемкиВозврата.ОбъектСтроительства КАК ОбъектСтроительства,
    |   пкАктПриемкиВозврата.КонтактноеЛицо КАК КонтактноеЛицо,
    |   пкЗаданиеНаПеревозку.Модель КАК Модель,
    |   пкЗаданиеНаПеревозку.Техника КАК Техника,
    |   ВЫБОР
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
    |           ТОГДА """"
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
    |               И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |           ТОГДА """"
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
    |               И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |   КОНЕЦ КАК ДатаНачалаАренды,
    |   ВЫБОР
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
    |           ТОГДА пкЗаявкаНаАрендуТехникиТовары.ДатаВозврата
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
    |               И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
    |               И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |           ТОГДА пкЗаявкаНаАрендуТехникиТовары.ДатаВозврата
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
    |           ТОГДА """"
    |   КОНЕЦ КАК ДатаВозврата,
    |   пкАктПриемкиВозврата.ТочкаМаршрута КАК ТочкаМаршрута,
    |   СУММА(1) КАК Количество,
    |   пкАктПриемкиВозврата.НомерХодки КАК НомерХодки,
    |   пкЗаданиеНаПеревозку.ДатаАренды КАК ДатаАренды,
    |   пкЗаявкаНаАрендуТехники.КонтактноеЛицо КАК КонтактноеЛицоЗаявки,
    |   пкЗаявкаНаАрендуТехники.ВтороеКонтактноеЛицо КАК ВтороеКонтактноеЛицо,
    |   пкЗаявкаНаАрендуТехники.Менеджер КАК МенеджерЗаявки,
    |   пкАктПриемкиВозвратаЗаданияНаПеревозку.Транспортировка КАК Транспортировка,
    |   пкАктПриемкиВозвратаЗаданияНаПеревозку.СтоимостьАренды КАК СтоимостьАренды,
	|	пкАктПриемкиВозвратаЗаданияНаПеревозку.НомерСтроки,
	|	пкЗаявкаНаАрендуТехникиТовары.ЗамененнаяМодель
    |ИЗ
    |   Документ.пкАктПриемкиВозврата.ЗаданияНаПеревозку КАК пкАктПриемкиВозвратаЗаданияНаПеревозку
    |       ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкАктПриемкиВозврата КАК пкАктПриемкиВозврата
    |       ПО пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка = пкАктПриемкиВозврата.Ссылка
    |           И (пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка В (&МассивОбъектов))
    |       ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкЗаданиеНаПеревозку КАК пкЗаданиеНаПеревозку
    |       ПО пкАктПриемкиВозвратаЗаданияНаПеревозку.ЗаданиеНаПеревозку = пкЗаданиеНаПеревозку.Ссылка
    |           И (пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка В (&МассивОбъектов))
    |       ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкЗаявкаНаАрендуТехники.Товары КАК пкЗаявкаНаАрендуТехникиТовары
    |       ПО пкАктПриемкиВозвратаЗаданияНаПеревозку.ЗаявкаНаАрендуТехники = пкЗаявкаНаАрендуТехникиТовары.Ссылка
    |           И (пкЗаданиеНаПеревозку.Модель = пкЗаявкаНаАрендуТехникиТовары.Номенклатура)
    |           И (пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка В (&МассивОбъектов))
    |       ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкЗаявкаНаАрендуТехники КАК пкЗаявкаНаАрендуТехники
    |       ПО пкАктПриемкиВозвратаЗаданияНаПеревозку.ЗаявкаНаАрендуТехники = пкЗаявкаНаАрендуТехники.Ссылка
    |           И (пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка В (&МассивОбъектов))
    |ГДЕ
    |   пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка В(&МассивОбъектов)
    |   И НЕ пкАктПриемкиВозврата.ПометкаУдаления
    |
    |СГРУППИРОВАТЬ ПО
    |   пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка,
    |   пкЗаданиеНаПеревозку.ДатаОтгрузки,
    |   пкАктПриемкиВозврата.ПриемкаВозврат,
    |   ПОДСТРОКА(пкАктПриемкиВозврата.АдресДоставки, 1, 150),
    |   пкАктПриемкиВозврата.Партнер,
    |   пкЗаявкаНаАрендуТехники.Ссылка,
    |   пкЗаявкаНаАрендуТехники.Договор,
    |   пкАктПриемкиВозврата.ОбъектСтроительства,
    |   пкАктПриемкиВозврата.КонтактноеЛицо,
    |   пкЗаданиеНаПеревозку.Модель,
    |   пкЗаданиеНаПеревозку.Техника,
    |   пкАктПриемкиВозврата.ТочкаМаршрута,
    |   пкАктПриемкиВозврата.НомерХодки,
    |   пкЗаданиеНаПеревозку.ДатаАренды,
    |   пкАктПриемкиВозвратаЗаданияНаПеревозку.Транспортировка,
    |   пкАктПриемкиВозвратаЗаданияНаПеревозку.СтоимостьАренды,
    |   ВЫБОР
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
    |           ТОГДА """"
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
    |               И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |           ТОГДА """"
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
    |               И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |   КОНЕЦ,
    |   ВЫБОР
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
    |           ТОГДА пкЗаявкаНаАрендуТехникиТовары.ДатаВозврата
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
    |               И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
    |               И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |           ТОГДА пкЗаявкаНаАрендуТехникиТовары.ДатаВозврата
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
    |           ТОГДА """"
    |   КОНЕЦ,
    |   пкЗаявкаНаАрендуТехники.КонтактноеЛицо,
    |   пкЗаявкаНаАрендуТехники.ВтороеКонтактноеЛицо,
    |   пкЗаявкаНаАрендуТехники.Менеджер,
	|	пкАктПриемкиВозвратаЗаданияНаПеревозку.НомерСтроки,
	|	пкЗаявкаНаАрендуТехникиТовары.ЗамененнаяМодель
    |
    |УПОРЯДОЧИТЬ ПО
    |   НомерХодки,
    |   ТочкаМаршрута";
	
	МассивАктов = Новый Массив;
	Для Каждого текСтрока Из МассивОбъектов Цикл
		Если ТипЗнч(текСтрока) = Тип("ДокументСсылка.пкАктПриемкиВозврата") Тогда
			МассивАктов.Добавить(текСтрока);
		КонецЕсли;
	КонецЦикла;
	
	ЗапросД = Новый Запрос;
	ЗапросД.Текст = 
	"ВЫБРАТЬ
	|	пкАктПриемкиВозврата.Ссылка
	|ИЗ
	|	Документ.пкАктПриемкиВозврата КАК пкАктПриемкиВозврата
	|ГДЕ
	|	пкАктПриемкиВозврата.Доставка В(&МассивОбъектов)";
	ЗапросД.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	РезЗапроса = ЗапросД.Выполнить().Выбрать();
	Пока РезЗапроса.Следующий() Цикл
		МассивАктов.Добавить(РезЗапроса.Ссылка);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивАктов);
	Запрос.УстановитьПараметр("ПредставлениеДокумента",	НСтр("ru = 'Акт приемки/возврата'"));
	Запрос.УстановитьПараметр("ПредставлениеВОшибке",	НСтр("ru = 'Акт приемки/возврата'"));
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке", ПакетРезультатовЗапроса[0]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти", ПакетРезультатовЗапроса[1]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументДоставка_АктПриемкиВовзвратаА4Москва(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, КомплектыПечати, ИмяМакета)
	
	ДанныеПечати		= ДанныеДляПечати.РезультатПоШапке.Выбрать();
	СтрокиТЧ			= ДанныеДляПечати.РезультатПоТабличнойЧасти.Выгрузить();
	
	ШаблонОшибкиСтроки	= "";
	
	ПервыйДокумент		= Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Макет = ПолучитьМакет(?(ДанныеПечати.ПриемкаВозврат = Перечисления.пкПриемкаВозврат.Приемка, "АктПриемкиА4Москва", "АктВозвратаА4Москва"));
		
		// Для печати комплектов
		Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено Тогда
			
			КомплектПечатиПоСсылке = КомплектыПечати.Найти(ДанныеПечати.Ссылка, "Ссылка");
			
			Если КомплектПечатиПоСсылке = Неопределено Тогда
				КомплектПечатиПоСсылке = КомплектыПечати[0];
			КонецЕсли;
			
			Если КомплектПечатиПоСсылке.Экземпляров = 0 Тогда
				Продолжить
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
#Область ОбластиМакета
		
		ОбластьШапка			= Макет.ПолучитьОбласть("Шапка");
		ОбластьДопСтрока		= Макет.ПолучитьОбласть("ДопСтрока");
		ОбластьТабЧасть			= Макет.ПолучитьОбласть("ТабЧасть");
		ОбластьПустаяТабЧасть	= Макет.ПолучитьОбласть("ПустаяТабЧасть");
		ОбластьПодвал			= Макет.ПолучитьОбласть("Подвал");
		
#КонецОбласти
		
#Область ВыводШапки
		
		// ШАПКА - ЗАГОЛОВОК
		
		ШтрихкодированиеПечатныхФорм.кнВывестиШтрихкодEANВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьШапка, ДанныеПечати.Ссылка, "Акт приемки/возврата");
		
		//УстановитьПараметр(ОбластьШапка, "Организация", ДанныеПечати.Организация);
		УстановитьПараметр(ОбластьШапка, "Дата", Формат(ДанныеПечати.ДатаОтгрузки, "ДЛФ=Д"));
		УстановитьПараметр(ОбластьШапка, "Время", "");//Формат('00010101', "ДЛФ=T"));
		УстановитьПараметр(ОбластьШапка, "Номер", ?(ЗначениеЗаполнено(ДанныеПечати.Договор),СокрЛП(ДанныеПечати.Договор.Номер) + " от " + Формат(ДанныеПечати.Договор.Дата,"ДЛФ=Д"), ""));
		УстановитьПараметр(ОбластьШапка, "Контрагент", ?(ЗначениеЗаполнено(ДанныеПечати.Партнер) И ТипЗнч(ДанныеПечати.Партнер) = Тип("СправочникСсылка.Партнеры"), ДанныеПечати.Партнер.НаименованиеПолное, ДанныеПечати.Партнер));
		УстановитьПараметр(ОбластьШапка, "Объект", ?(ЗначениеЗаполнено(ДанныеПечати.ОбъектСтроительства), Строка(ДанныеПечати.ОбъектСтроительства), "")	);
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
#КонецОбласти

		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		
		ТаблицаСтрок = СтрокиТЧ.НайтиСтроки(СтруктураПоиска);
		
		Если ТаблицаСтрок.Количество() = 0 Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибкиСтроки,
				ДанныеПечати.Ссылка,
				НСтр("ru='Нет строк для приемки или возврата'"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДанныеПечати.Ссылка);
			Продолжить;
			
		КонецЕсли;
		
#Область ВыводЗаголовкаТаблицы

		//Если ТаблицаСтрок.Количество() > 1 Тогда
		//	УстановитьПараметр(ОбластьДопСтрока, "ДопСтрока", "Подъемники стреловые:");
		//Иначе
		//	УстановитьПараметр(ОбластьДопСтрока, "ДопСтрока", "Подъемник стреловой:");
		//КонецЕсли;
		//ТабличныйДокумент.Вывести(ОбластьДопСтрока);
		
#КонецОбласти
		
#Область ВыводТаблицыТовары
		
		КонтактноеЛицо	     = "";
        ВтороеКонтактноеЛицо = "";
		Ответственный	     = "";

		НомерСтроки = 0;
        
        Транспортировка = "";

		Для Каждого СтрокаТовары Из ТаблицаСтрок Цикл
			
			НомерСтроки = НомерСтроки + 1;
            
            Если ДанныеПечати.ПриемкаВозврат = Перечисления.пкПриемкаВозврат.Приемка И НомерСтроки = 1 Тогда
				
				Если ЗначениеЗаполнено(СтрокаТовары.Заявка) Тогда
					
	                Заявка = СтрокаТовары.Заявка; 
	                
	                Если Заявка.СтоимостьТранспортировки > 0 И Заявка.КоличествоХодок > 0 Тогда
                        Транспортировка = Строка(Заявка.СтоимостьТранспортировки) + " " + ?(ЗначениеЗаполнено(Заявка.Договор.пкВалютаТарифа), Заявка.Договор.пкВалютаТарифа, "RUB") 
                            + " * " + ?(Заявка.КоличествоХодок < 2, Строка(Заявка.КоличествоХодок), "2") + ?(Заявка.СНДС, " + НДС", "");       
	                КонецЕсли;    
				КонецЕсли;
            КонецЕсли; 

			УстановитьПараметр(ОбластьТабЧасть, "Н", НомерСтроки);
			УстановитьПараметр(ОбластьТабЧасть, "Номенклатура", СтрокаТовары.Модель);
			УстановитьПараметр(ОбластьТабЧасть, "СерийныйНомер", ?(ЗначениеЗаполнено(СтрокаТовары.Техника), СокрЛП(СтрокаТовары.Техника.Код), ""));
			УстановитьПараметр(ОбластьТабЧасть, "АрендаДата", Формат(СтрокаТовары.ДатаНачалаАренды,"ДЛФ=Д"));
			Если ДанныеПечати.ПриемкаВозврат = Перечисления.пкПриемкаВозврат.Возврат Тогда
				УстановитьПараметр(ОбластьТабЧасть, "Дата", Формат(СтрокаТовары.ДатаВозврата,"ДЛФ=Д"));
			Иначе
				Если НомерСтроки = 1 Тогда
					УстановитьПараметр(ОбластьТабЧасть, "Дата", "Согласно");
				ИначеЕсли НомерСтроки = 2 Тогда
					УстановитьПараметр(ОбластьТабЧасть, "Дата", "договора");
				Иначе
					УстановитьПараметр(ОбластьТабЧасть, "Дата", "");
				КонецЕсли;
			КонецЕсли;
            
			СтоимостьАренды	= ?(СокрЛП(СтрокаТовары.СтоимостьАренды) = "", "по договору", СокрЛП(СтрокаТовары.СтоимостьАренды));
			СтоимостьАренды	= СтоимостьАренды + ?(ЗначениеЗаполнено(СтрокаТовары.ЗамененнаяМодель), 
								?(СтоимостьАренды = "", "", Символы.ПС) + "как " + СтрокаТовары.ЗамененнаяМодель, 
								"");
			УстановитьПараметр(ОбластьТабЧасть, "СтоимостьАренды", СтоимостьАренды);
            
            Если Транспортировка <> "" И НомерСтроки = 1 Тогда
			    УстановитьПараметр(ОбластьТабЧасть, "Транспортировка", Транспортировка);
            ИначеЕсли Транспортировка <> "" Тогда
			    УстановитьПараметр(ОбластьТабЧасть, "Транспортировка", "");
            Иначе    
			    УстановитьПараметр(ОбластьТабЧасть, "Транспортировка", ?(ДанныеПечати.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз 
                    ИЛИ ДанныеПечати.ДоставкуВыполняет = Перечисления.ТипыИсполнителейЗаданийНаПеревозку.Самовывоз, "самовывоз", 
                    ?(СокрЛП(СтрокаТовары.Транспортировка) = "", "по договору", СокрЛП(СтрокаТовары.Транспортировка))));
            КонецЕсли;    
			
			ТабличныйДокумент.Вывести(ОбластьТабЧасть);
			
			Если НЕ ЗначениеЗаполнено(КонтактноеЛицо) Тогда
				КонтактноеЛицо	= СтрокаТовары.КонтактноеЛицоЗаявки;
            КонецЕсли;
            
			Если НЕ ЗначениеЗаполнено(ВтороеКонтактноеЛицо) Тогда
				ВтороеКонтактноеЛицо = СтрокаТовары.ВтороеКонтактноеЛицо;
            КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
				Ответственный	= СтрокаТовары.МенеджерЗаявки;
			КонецЕсли;

		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			КонтактноеЛицо	= ДанныеПечати.КонтактноеЛицо;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
			Ответственный	= ДанныеПечати.Ответственный;
		КонецЕсли;
		
		Пока НомерСтроки < 10 Цикл
			
			НомерСтроки = НомерСтроки + 1;
			УстановитьПараметр(ОбластьПустаяТабЧасть, "НП", НомерСтроки);
			
			ТабличныйДокумент.Вывести(ОбластьПустаяТабЧасть);
			
		КонецЦикла;
		
#КонецОбласти
		
#Область ВыводПодвала
		
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ТекФизЛицо = Ответственный.ФизическоеЛицо;
			Если ТаблицаСтрок.Количество() > 0 Тогда
				Если ЗначениеЗаполнено(ТаблицаСтрок[0].Заявка)
					И ЗначениеЗаполнено(ТаблицаСтрок[0].Заявка.Менеджер) 
					И ЗначениеЗаполнено(ТаблицаСтрок[0].Заявка.Менеджер.ФизическоеЛицо) 
				Тогда
					Ответственный = ТаблицаСтрок[0].Заявка.Менеджер.ФизическоеЛицо;
				Иначе
					Ответственный = ТекФизЛицо;
				КонецЕсли;
			Иначе
				Ответственный = ТекФизЛицо;
			КонецЕсли;	
			ТелефонОтветственного = ПолучитьТелефонИзКонтактнойИнформации(Ответственный);
		Иначе
			Ответственный = "_______________";
			ТелефонОтветственного = "______________";
		КонецЕсли;
		
		Если ДанныеПечати.ПриемкаВозврат = Перечисления.пкПриемкаВозврат.Возврат Тогда
			УстановитьПараметр(ОбластьПодвал, "Паспорт", "1. Паспорт (копия)");
			УстановитьПараметр(ОбластьПодвал, "ВахтенныйЖурнал", "2. Вахтенный журнал");
		КонецЕсли;
		
		УстановитьПараметр(ОбластьПодвал, "КонтактноеЛицо", ?(ЗначениеЗаполнено(КонтактноеЛицо), КонтактноеЛицо.Наименование, "") + " Тел: " + ПолучитьТелефонИзКонтактнойИнформации(КонтактноеЛицо) 
            + ?(ЗначениеЗаполнено(ВтороеКонтактноеЛицо), ", " + ВтороеКонтактноеЛицо.Наименование + " Тел: " + ПолучитьТелефонИзКонтактнойИнформации(ВтороеКонтактноеЛицо), ""));
		УстановитьПараметр(ОбластьПодвал, "Ответственный", Строка(Ответственный) + " Тел: " + ТелефонОтветственного);
		
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		
#КонецОбласти
		
		// Выведем нужное количество экземпляров (при печати комплектов)
		Если КомплектыПечати <> Неопределено
			И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено
			И КомплектПечатиПоСсылке.Экземпляров > 1 Тогда
			
			ОбластьКопирования = ТабличныйДокумент.ПолучитьОбласть(
				НомерСтрокиНачало,
				,
				ТабличныйДокумент.ВысотаТаблицы);
			
			Для Итератор = 2 По КомплектПечатиПоСсылке.Экземпляров Цикл
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьКопирования);
				
			КонецЦикла;
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Печать_Доставка_АктПриемкиВовзвратаА5

Функция СформироватьПечатнуюФормуДоставка_АктПриемкиВовзвратаА5(СтруктураТипов, ОбъектыПечати, ПараметрыПечати, КомплектыПечати = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_АктПриемкиВовзвратаА5";
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
			
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ДанныеДляПечати = ПолучитьДанныеДляПечатнойФормыДоставка_АктПриемкиВовзвратаА5(
			СтруктураОбъектов.Значение);
		
		// Сформированный тбаличный документ
		ЗаполнитьТабличныйДокументДоставка_АктПриемкиВовзвратаА5(
			ТабличныйДокумент,
			ДанныеДляПечати,
			ОбъектыПечати,
			КомплектыПечати,
			"пкДоставка");
			
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыДоставка_АктПриемкиВовзвратаА5(МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
    |   пкАктПриемкиВозврата.Ссылка КАК Ссылка,
    |   пкАктПриемкиВозврата.Дата КАК ДатаОтгрузки,
    |   пкАктПриемкиВозврата.ПриемкаВозврат КАК ПриемкаВозврат,
    |   пкДоставка.Подразделение КАК Подразделение,
    |   пкДоставка.Организация КАК Организация,
    |   пкДоставка.ТранспортноеСредство КАК ТранспортноеСредство,
    |   пкДоставка.Водитель КАК Водитель,
    |   пкДоставка.Перевозчик КАК Перевозчик,
    |   ПОДСТРОКА(пкАктПриемкиВозврата.АдресДоставки, 1, 150) КАК АдресДоставки,
    |   пкАктПриемкиВозврата.Партнер КАК Партнер,
    |   пкАктПриемкиВозврата.Договор КАК Договор,
    |   пкАктПриемкиВозврата.ОбъектСтроительства КАК ОбъектСтроительства,
    |   пкАктПриемкиВозврата.КонтактноеЛицо КАК КонтактноеЛицо,
    |   пкАктПриемкиВозврата.Ответственный КАК Ответственный,
    |   пкДоставка.СпособДоставки,
    |   пкДоставка.ДоставкуВыполняет
    |ИЗ
    |   Документ.пкАктПриемкиВозврата КАК пкАктПриемкиВозврата
    |       ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкДоставка КАК пкДоставка
    |       ПО пкАктПриемкиВозврата.Доставка = пкДоставка.Ссылка
    |           И (пкАктПриемкиВозврата.Ссылка В (&МассивОбъектов))
    |ГДЕ
    |   пкАктПриемкиВозврата.Ссылка В(&МассивОбъектов)
    |   И НЕ пкАктПриемкиВозврата.ПометкаУдаления
    |
    |СГРУППИРОВАТЬ ПО
    |   пкАктПриемкиВозврата.Ссылка,
    |   пкАктПриемкиВозврата.Дата,
    |   пкАктПриемкиВозврата.ПриемкаВозврат,
    |   пкДоставка.Подразделение,
    |   пкДоставка.Организация,
    |   пкДоставка.ТранспортноеСредство,
    |   пкДоставка.Водитель,
    |   пкДоставка.Перевозчик,
    |   ПОДСТРОКА(пкАктПриемкиВозврата.АдресДоставки, 1, 150),
    |   пкАктПриемкиВозврата.Партнер,
    |   пкАктПриемкиВозврата.Договор,
    |   пкАктПриемкиВозврата.ОбъектСтроительства,
    |   пкАктПриемкиВозврата.КонтактноеЛицо,
    |   пкАктПриемкиВозврата.Ответственный,
    |   пкДоставка.СпособДоставки,
    |   пкДоставка.ДоставкуВыполняет
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
    |   пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка КАК Ссылка,
    |   пкЗаданиеНаПеревозку.ДатаОтгрузки КАК ДатаОтгрузки,
    |   пкАктПриемкиВозврата.ПриемкаВозврат КАК ПриемкаВозврат,
    |   ПОДСТРОКА(пкАктПриемкиВозврата.АдресДоставки, 1, 150) КАК АдресДоставки,
    |   пкАктПриемкиВозврата.Партнер КАК Партнер,
    |   пкЗаявкаНаАрендуТехники.Ссылка КАК Заявка,
    |   пкЗаявкаНаАрендуТехники.Договор КАК Договор,
    |   пкАктПриемкиВозврата.ОбъектСтроительства КАК ОбъектСтроительства,
    |   пкАктПриемкиВозврата.КонтактноеЛицо КАК КонтактноеЛицо,
    |   пкЗаданиеНаПеревозку.Модель КАК Модель,
    |   пкЗаданиеНаПеревозку.Техника КАК Техника,
    |   ВЫБОР
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
    |           ТОГДА """"
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
    |               И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |           ТОГДА """"
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
    |               И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |   КОНЕЦ КАК ДатаНачалаАренды,
    |   ВЫБОР
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
    |           ТОГДА пкЗаявкаНаАрендуТехникиТовары.ДатаВозврата
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
    |               И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
    |               И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |           ТОГДА пкЗаявкаНаАрендуТехникиТовары.ДатаВозврата
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
    |           ТОГДА """"
    |   КОНЕЦ КАК ДатаВозврата,
    |   пкАктПриемкиВозврата.ТочкаМаршрута КАК ТочкаМаршрута,
    |   СУММА(1) КАК Количество,
    |   пкАктПриемкиВозврата.НомерХодки КАК НомерХодки,
    |   пкЗаданиеНаПеревозку.ДатаАренды КАК ДатаАренды,
    |   пкЗаявкаНаАрендуТехники.КонтактноеЛицо КАК КонтактноеЛицоЗаявки,
    |   пкЗаявкаНаАрендуТехники.ВтороеКонтактноеЛицо КАК ВтороеКонтактноеЛицо,
    |   пкЗаявкаНаАрендуТехники.Менеджер КАК МенеджерЗаявки,
    |   пкАктПриемкиВозвратаЗаданияНаПеревозку.Транспортировка КАК Транспортировка,
    |   пкАктПриемкиВозвратаЗаданияНаПеревозку.СтоимостьАренды КАК СтоимостьАренды,
	|	пкАктПриемкиВозвратаЗаданияНаПеревозку.НомерСтроки,
	|	пкЗаявкаНаАрендуТехникиТовары.ЗамененнаяМодель
    |ИЗ
    |   Документ.пкАктПриемкиВозврата.ЗаданияНаПеревозку КАК пкАктПриемкиВозвратаЗаданияНаПеревозку
    |       ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкАктПриемкиВозврата КАК пкАктПриемкиВозврата
    |       ПО пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка = пкАктПриемкиВозврата.Ссылка
    |           И (пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка В (&МассивОбъектов))
    |       ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкЗаданиеНаПеревозку КАК пкЗаданиеНаПеревозку
    |       ПО пкАктПриемкиВозвратаЗаданияНаПеревозку.ЗаданиеНаПеревозку = пкЗаданиеНаПеревозку.Ссылка
    |           И (пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка В (&МассивОбъектов))
    |       ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкЗаявкаНаАрендуТехники.Товары КАК пкЗаявкаНаАрендуТехникиТовары
    |       ПО пкАктПриемкиВозвратаЗаданияНаПеревозку.ЗаявкаНаАрендуТехники = пкЗаявкаНаАрендуТехникиТовары.Ссылка
    |           И (пкЗаданиеНаПеревозку.Модель = пкЗаявкаНаАрендуТехникиТовары.Номенклатура)
    |           И (пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка В (&МассивОбъектов))
    |       ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкЗаявкаНаАрендуТехники КАК пкЗаявкаНаАрендуТехники
    |       ПО пкАктПриемкиВозвратаЗаданияНаПеревозку.ЗаявкаНаАрендуТехники = пкЗаявкаНаАрендуТехники.Ссылка
    |           И (пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка В (&МассивОбъектов))
    |ГДЕ
    |   пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка В(&МассивОбъектов)
    |   И НЕ пкАктПриемкиВозврата.ПометкаУдаления
    |
    |СГРУППИРОВАТЬ ПО
    |   пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка,
    |   пкЗаданиеНаПеревозку.ДатаОтгрузки,
    |   пкАктПриемкиВозврата.ПриемкаВозврат,
    |   ПОДСТРОКА(пкАктПриемкиВозврата.АдресДоставки, 1, 150),
    |   пкАктПриемкиВозврата.Партнер,
    |   пкЗаявкаНаАрендуТехники.Ссылка,
    |   пкЗаявкаНаАрендуТехники.Договор,
    |   пкАктПриемкиВозврата.ОбъектСтроительства,
    |   пкАктПриемкиВозврата.КонтактноеЛицо,
    |   пкЗаданиеНаПеревозку.Модель,
    |   пкЗаданиеНаПеревозку.Техника,
    |   пкАктПриемкиВозврата.ТочкаМаршрута,
    |   пкАктПриемкиВозврата.НомерХодки,
    |   пкЗаданиеНаПеревозку.ДатаАренды,
    |   пкАктПриемкиВозвратаЗаданияНаПеревозку.Транспортировка,
    |   пкАктПриемкиВозвратаЗаданияНаПеревозку.СтоимостьАренды,
    |   ВЫБОР
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
    |           ТОГДА """"
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
    |               И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |           ТОГДА """"
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
    |               И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |   КОНЕЦ,
    |   ВЫБОР
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
    |           ТОГДА пкЗаявкаНаАрендуТехникиТовары.ДатаВозврата
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
    |               И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
    |               И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |           ТОГДА пкЗаявкаНаАрендуТехникиТовары.ДатаВозврата
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
    |           ТОГДА """"
    |   КОНЕЦ,
    |   пкЗаявкаНаАрендуТехники.КонтактноеЛицо,
    |   пкЗаявкаНаАрендуТехники.ВтороеКонтактноеЛицо,
    |   пкЗаявкаНаАрендуТехники.Менеджер,
	|	пкАктПриемкиВозвратаЗаданияНаПеревозку.НомерСтроки,
	|	пкЗаявкаНаАрендуТехникиТовары.ЗамененнаяМодель
    |
    |УПОРЯДОЧИТЬ ПО
    |   НомерХодки,
    |   ТочкаМаршрута";
	
	МассивАктов = Новый Массив;
	Для Каждого текСтрока Из МассивОбъектов Цикл
		Если ТипЗнч(текСтрока) = Тип("ДокументСсылка.пкАктПриемкиВозврата") Тогда
			МассивАктов.Добавить(текСтрока);
		КонецЕсли;
	КонецЦикла;
	
	ЗапросД = Новый Запрос;
	ЗапросД.Текст = 
	"ВЫБРАТЬ
	|	пкАктПриемкиВозврата.Ссылка
	|ИЗ
	|	Документ.пкАктПриемкиВозврата КАК пкАктПриемкиВозврата
	|ГДЕ
	|	пкАктПриемкиВозврата.Доставка В(&МассивОбъектов)";
	ЗапросД.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	РезЗапроса = ЗапросД.Выполнить().Выбрать();
	Пока РезЗапроса.Следующий() Цикл
		МассивАктов.Добавить(РезЗапроса.Ссылка);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивАктов);
	Запрос.УстановитьПараметр("ПредставлениеДокумента",	НСтр("ru = 'Акт приемки/возврата'"));
	Запрос.УстановитьПараметр("ПредставлениеВОшибке",	НСтр("ru = 'Акт приемки/возврата'"));
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке", ПакетРезультатовЗапроса[0]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти", ПакетРезультатовЗапроса[1]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументДоставка_АктПриемкиВовзвратаА5(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, КомплектыПечати, ИмяМакета)
	
	ДанныеПечати		= ДанныеДляПечати.РезультатПоШапке.Выбрать();
	СтрокиТЧ			= ДанныеДляПечати.РезультатПоТабличнойЧасти.Выгрузить();
	
	ШаблонОшибкиСтроки	= "";
	
	ПервыйДокумент		= Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Макет = ПолучитьМакет(?(ДанныеПечати.ПриемкаВозврат = Перечисления.пкПриемкаВозврат.Приемка, "АктПриемкиА5", "АктВозвратаА5"));
		
		// Для печати комплектов
		Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено Тогда
			
			КомплектПечатиПоСсылке = КомплектыПечати.Найти(ДанныеПечати.Ссылка, "Ссылка");
			
			Если КомплектПечатиПоСсылке = Неопределено Тогда
				КомплектПечатиПоСсылке = КомплектыПечати[0];
			КонецЕсли;
			
			Если КомплектПечатиПоСсылке.Экземпляров = 0 Тогда
				Продолжить
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
#Область ОбластиМакета
		
		ОбластьШапка			= Макет.ПолучитьОбласть("Шапка");
		ОбластьДопСтрока		= Макет.ПолучитьОбласть("ДопСтрока");
		ОбластьТабЧасть			= Макет.ПолучитьОбласть("ТабЧасть");
		ОбластьПустаяТабЧасть	= Макет.ПолучитьОбласть("ПустаяТабЧасть");
		ОбластьПодвал			= Макет.ПолучитьОбласть("Подвал");
		ОбластьРазрез			= Макет.ПолучитьОбласть("Разрез");
		
#КонецОбласти
		
#Область ВыводШапки
		
		// ШАПКА - ЗАГОЛОВОК
		
		ШтрихкодированиеПечатныхФорм.кнВывестиШтрихкодEANВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьШапка, ДанныеПечати.Ссылка, "Акт приемки/возврата");
		
		//УстановитьПараметр(ОбластьШапка, "Организация", ДанныеПечати.Организация);
		УстановитьПараметр(ОбластьШапка, "Дата", Формат(ДанныеПечати.ДатаОтгрузки, "ДЛФ=Д"));
		УстановитьПараметр(ОбластьШапка, "Время", "");//Формат('00010101', "ДЛФ=T"));
		УстановитьПараметр(ОбластьШапка, "Номер", ?(ЗначениеЗаполнено(ДанныеПечати.Договор),СокрЛП(ДанныеПечати.Договор.Номер) + " от " + Формат(ДанныеПечати.Договор.Дата,"ДЛФ=Д"), ""));
		УстановитьПараметр(ОбластьШапка, "Контрагент", ?(ЗначениеЗаполнено(ДанныеПечати.Партнер) И ТипЗнч(ДанныеПечати.Партнер) = Тип("СправочникСсылка.Партнеры"), ДанныеПечати.Партнер.НаименованиеПолное, ДанныеПечати.Партнер));
		УстановитьПараметр(ОбластьШапка, "Объект", ?(ЗначениеЗаполнено(ДанныеПечати.ОбъектСтроительства), ДанныеПечати.ОбъектСтроительства, "")	);
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
#КонецОбласти

		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		
		ТаблицаСтрок = СтрокиТЧ.НайтиСтроки(СтруктураПоиска);
		
		Если ТаблицаСтрок.Количество() = 0 Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибкиСтроки,
				ДанныеПечати.Ссылка,
				НСтр("ru='Нет строк для приемки или возврата'"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДанныеПечати.Ссылка);
			Продолжить;
			
		КонецЕсли;
		
#Область ВыводЗаголовкаТаблицы

		Если ТаблицаСтрок.Количество() > 1 Тогда
			УстановитьПараметр(ОбластьДопСтрока, "ДопСтрока", "Подъемники стреловые:");
		Иначе
			УстановитьПараметр(ОбластьДопСтрока, "ДопСтрока", "Подъемник стреловой:");
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьДопСтрока);
		
#КонецОбласти
		
#Область ВыводТаблицыТовары
		
		КонтактноеЛицо	     = "";
        ВтороеКонтактноеЛицо = "";
		Ответственный	     = "";

		НомерСтроки = 0;
        
        Транспортировка = "";

		Для Каждого СтрокаТовары Из ТаблицаСтрок Цикл
			
			НомерСтроки = НомерСтроки + 1;
            
			Если ДанныеПечати.ПриемкаВозврат = Перечисления.пкПриемкаВозврат.Приемка И НомерСтроки = 1 Тогда
				
				Если ЗначениеЗаполнено(СтрокаТовары.Заявка) Тогда
					
					Заявка = СтрокаТовары.Заявка; 
	                
	                Если Заявка.СтоимостьТранспортировки > 0 И Заявка.КоличествоХодок > 0 Тогда
                        Транспортировка = Строка(Заявка.СтоимостьТранспортировки) + " " + ?(ЗначениеЗаполнено(Заявка.Договор.пкВалютаТарифа), Заявка.Договор.пкВалютаТарифа, "RUB") 
                            + " * " + ?(Заявка.КоличествоХодок < 2, Строка(Заявка.КоличествоХодок), "2") + ?(Заявка.СНДС, " + НДС", "");       
	                КонецЕсли;    
				КонецЕсли;
				
            КонецЕсли; 

			УстановитьПараметр(ОбластьТабЧасть, "Н", НомерСтроки);
			УстановитьПараметр(ОбластьТабЧасть, "Номенклатура", СтрокаТовары.Модель);
			УстановитьПараметр(ОбластьТабЧасть, "СерийныйНомер", ?(ЗначениеЗаполнено(СтрокаТовары.Техника), СокрЛП(СтрокаТовары.Техника.Код), ""));
			УстановитьПараметр(ОбластьТабЧасть, "АрендаДата", Формат(СтрокаТовары.ДатаНачалаАренды,"ДЛФ=Д"));
			УстановитьПараметр(ОбластьТабЧасть, "Дата", Формат(СтрокаТовары.ДатаВозврата,"ДЛФ=Д"));
			
			СтоимостьАренды	= ?(СокрЛП(СтрокаТовары.СтоимостьАренды) = "", "по договору", СокрЛП(СтрокаТовары.СтоимостьАренды));
			СтоимостьАренды	= СтоимостьАренды + ?(ЗначениеЗаполнено(СтрокаТовары.ЗамененнаяМодель), 
								?(СтоимостьАренды = "", "", Символы.ПС) + "как " + СтрокаТовары.ЗамененнаяМодель, 
								"");
			УстановитьПараметр(ОбластьТабЧасть, "СтоимостьАренды", СтоимостьАренды);
            
            Если Транспортировка <> "" И НомерСтроки = 1 Тогда
			    УстановитьПараметр(ОбластьТабЧасть, "Транспортировка", Транспортировка);
            ИначеЕсли Транспортировка <> "" Тогда
			    УстановитьПараметр(ОбластьТабЧасть, "Транспортировка", "");
            Иначе    
			    УстановитьПараметр(ОбластьТабЧасть, "Транспортировка", ?(ДанныеПечати.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз 
                    ИЛИ ДанныеПечати.ДоставкуВыполняет = Перечисления.ТипыИсполнителейЗаданийНаПеревозку.Самовывоз, "самовывоз", 
                    ?(СокрЛП(СтрокаТовары.Транспортировка) = "", "по договору", СокрЛП(СтрокаТовары.Транспортировка))));
            КонецЕсли;    
			
			ТабличныйДокумент.Вывести(ОбластьТабЧасть);
			
			Если НЕ ЗначениеЗаполнено(КонтактноеЛицо) Тогда
				КонтактноеЛицо	= СтрокаТовары.КонтактноеЛицоЗаявки;
            КонецЕсли;
            
			Если НЕ ЗначениеЗаполнено(ВтороеКонтактноеЛицо) Тогда
				ВтороеКонтактноеЛицо = СтрокаТовары.ВтороеКонтактноеЛицо;
            КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
				Ответственный	= СтрокаТовары.МенеджерЗаявки;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			КонтактноеЛицо	= ДанныеПечати.КонтактноеЛицо;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
			Ответственный	= ДанныеПечати.Ответственный;
		КонецЕсли;
		
		Пока НомерСтроки < 2 Цикл
			
			НомерСтроки = НомерСтроки + 1;
			УстановитьПараметр(ОбластьПустаяТабЧасть, "НП", НомерСтроки);
			
			ТабличныйДокумент.Вывести(ОбластьПустаяТабЧасть);
			
		КонецЦикла;
		
#КонецОбласти
		
#Область ВыводПодвала
		
		Если ДанныеПечати.ПриемкаВозврат = Перечисления.пкПриемкаВозврат.Возврат Тогда
			УстановитьПараметр(ОбластьПодвал, "Паспорт", "1. Паспорт (копия)");
			УстановитьПараметр(ОбластьПодвал, "ВахтенныйЖурнал", "2. Вахтенный журнал");
		КонецЕсли;
		
		УстановитьПараметр(ОбластьПодвал, "КонтактноеЛицо", ?(ЗначениеЗаполнено(КонтактноеЛицо), КонтактноеЛицо.Наименование, "") + " Тел: " + ПолучитьТелефонИзКонтактнойИнформации(КонтактноеЛицо) 
            + ?(ЗначениеЗаполнено(ВтороеКонтактноеЛицо), ", " + ВтороеКонтактноеЛицо.Наименование + " Тел: " + ПолучитьТелефонИзКонтактнойИнформации(ВтороеКонтактноеЛицо), ""));
		УстановитьПараметр(ОбластьПодвал, "Ответственный", ?(ЗначениеЗаполнено(Ответственный), Ответственный.Наименование, "") + " Тел: " + ПолучитьТелефонИзКонтактнойИнформации(Ответственный));
		
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		
#КонецОбласти
		
			
		ОбластьКопирования = ТабличныйДокумент.ПолучитьОбласть(
			НомерСтрокиНачало,
			,
			ТабличныйДокумент.ВысотаТаблицы);
		
		КоличествоЭкземпляров = 2;	
		Для Итератор = 2 По КоличествоЭкземпляров Цикл
			
			Если (Итератор - 1)/2 = Окр((Итератор - 1)/2,0) Тогда 
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц(); //- только перед нечетнм
			Иначе
				ТабличныйДокумент.Вывести(ОбластьРазрез);
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьКопирования);
				
		КонецЦикла;
		
		// Выведем нужное количество экземпляров (при печати комплектов)
		Если КомплектыПечати <> Неопределено
			И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено
			И КомплектПечатиПоСсылке.Экземпляров > 1 Тогда
			
			ОбластьКопирования = ТабличныйДокумент.ПолучитьОбласть(
				НомерСтрокиНачало,
				,
				ТабличныйДокумент.ВысотаТаблицы);
			
			Для Итератор = 2 По КомплектПечатиПоСсылке.Экземпляров Цикл
				
				Если (Итератор - 1)/2 = Окр((Итератор - 1)/2,0) Тогда 
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц(); //- на одной странице
				КонецЕсли;
				ТабличныйДокумент.Вывести(ОбластьКопирования);
				
			КонецЦикла;
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Печать_Доставка_АктПриемкиВовзвратаА52017

Функция СформироватьПечатнуюФормуДоставка_АктПриемкиВовзвратаА52017(СтруктураТипов, ОбъектыПечати, ПараметрыПечати, КомплектыПечати = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_АктПриемкиВовзвратаА52017";
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
			
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ДанныеДляПечати = ПолучитьДанныеДляПечатнойФормыДоставка_АктПриемкиВовзвратаА52017(
			СтруктураОбъектов.Значение);
		
		// Сформированный тбаличный документ
		ЗаполнитьТабличныйДокументДоставка_АктПриемкиВовзвратаА52017(
			ТабличныйДокумент,
			ДанныеДляПечати,
			ОбъектыПечати,
			КомплектыПечати,
			"пкДоставка");
			
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыДоставка_АктПриемкиВовзвратаА52017(МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
    |   пкАктПриемкиВозврата.Ссылка КАК Ссылка,
    |   пкАктПриемкиВозврата.Дата КАК ДатаОтгрузки,
    |   пкАктПриемкиВозврата.ПриемкаВозврат КАК ПриемкаВозврат,
    |   пкДоставка.Подразделение КАК Подразделение,
    |   пкДоставка.Организация КАК Организация,
    |   пкДоставка.ТранспортноеСредство КАК ТранспортноеСредство,
    |   пкДоставка.Водитель КАК Водитель,
    |   пкДоставка.Перевозчик КАК Перевозчик,
    |   ПОДСТРОКА(пкАктПриемкиВозврата.АдресДоставки, 1, 150) КАК АдресДоставки,
    |   пкАктПриемкиВозврата.Партнер КАК Партнер,
    |   пкАктПриемкиВозврата.Договор КАК Договор,
    |   пкАктПриемкиВозврата.ОбъектСтроительства КАК ОбъектСтроительства,
    |   пкАктПриемкиВозврата.КонтактноеЛицо КАК КонтактноеЛицо,
    |   пкАктПриемкиВозврата.Ответственный КАК Ответственный,
    |   пкДоставка.СпособДоставки,
    |   пкДоставка.ДоставкуВыполняет
    |ИЗ
    |   Документ.пкАктПриемкиВозврата КАК пкАктПриемкиВозврата
    |       ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкДоставка КАК пкДоставка
    |       ПО пкАктПриемкиВозврата.Доставка = пкДоставка.Ссылка
    |           И (пкАктПриемкиВозврата.Ссылка В (&МассивОбъектов))
    |ГДЕ
    |   пкАктПриемкиВозврата.Ссылка В(&МассивОбъектов)
    |   И НЕ пкАктПриемкиВозврата.ПометкаУдаления
    |
    |СГРУППИРОВАТЬ ПО
    |   пкАктПриемкиВозврата.Ссылка,
    |   пкАктПриемкиВозврата.Дата,
    |   пкАктПриемкиВозврата.ПриемкаВозврат,
    |   пкДоставка.Подразделение,
    |   пкДоставка.Организация,
    |   пкДоставка.ТранспортноеСредство,
    |   пкДоставка.Водитель,
    |   пкДоставка.Перевозчик,
    |   ПОДСТРОКА(пкАктПриемкиВозврата.АдресДоставки, 1, 150),
    |   пкАктПриемкиВозврата.Партнер,
    |   пкАктПриемкиВозврата.Договор,
    |   пкАктПриемкиВозврата.ОбъектСтроительства,
    |   пкАктПриемкиВозврата.КонтактноеЛицо,
    |   пкАктПриемкиВозврата.Ответственный,
    |   пкДоставка.СпособДоставки,
    |   пкДоставка.ДоставкуВыполняет
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
    |   пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка КАК Ссылка,
    |   пкЗаданиеНаПеревозку.ДатаОтгрузки КАК ДатаОтгрузки,
    |   пкАктПриемкиВозврата.ПриемкаВозврат КАК ПриемкаВозврат,
    |   ПОДСТРОКА(пкАктПриемкиВозврата.АдресДоставки, 1, 150) КАК АдресДоставки,
    |   пкАктПриемкиВозврата.Партнер КАК Партнер,
    |   пкЗаявкаНаАрендуТехники.Ссылка КАК Заявка,
    |   пкЗаявкаНаАрендуТехники.Договор КАК Договор,
    |   пкАктПриемкиВозврата.ОбъектСтроительства КАК ОбъектСтроительства,
    |   пкАктПриемкиВозврата.КонтактноеЛицо КАК КонтактноеЛицо,
    |   пкЗаданиеНаПеревозку.Модель КАК Модель,
    |   пкЗаданиеНаПеревозку.Техника КАК Техника,
    |   ВЫБОР
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
    |           ТОГДА """"
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
    |               И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |           ТОГДА """"
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
    |               И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |   КОНЕЦ КАК ДатаНачалаАренды,
    |   ВЫБОР
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
    |           ТОГДА пкЗаявкаНаАрендуТехникиТовары.ДатаВозврата
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
    |               И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
    |               И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |           ТОГДА пкЗаявкаНаАрендуТехникиТовары.ДатаВозврата
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
    |           ТОГДА """"
    |   КОНЕЦ КАК ДатаВозврата,
    |   пкАктПриемкиВозврата.ТочкаМаршрута КАК ТочкаМаршрута,
    |   СУММА(1) КАК Количество,
    |   пкАктПриемкиВозврата.НомерХодки КАК НомерХодки,
    |   пкЗаданиеНаПеревозку.ДатаАренды КАК ДатаАренды,
    |   пкЗаявкаНаАрендуТехники.КонтактноеЛицо КАК КонтактноеЛицоЗаявки,
    |   пкЗаявкаНаАрендуТехники.ВтороеКонтактноеЛицо КАК ВтороеКонтактноеЛицо,
    |   пкЗаявкаНаАрендуТехники.Менеджер КАК МенеджерЗаявки,
    |   пкАктПриемкиВозвратаЗаданияНаПеревозку.Транспортировка КАК Транспортировка,
    |   пкАктПриемкиВозвратаЗаданияНаПеревозку.СтоимостьАренды КАК СтоимостьАренды,
	|	пкАктПриемкиВозвратаЗаданияНаПеревозку.НомерСтроки,
	|	пкЗаявкаНаАрендуТехникиТовары.ЗамененнаяМодель
    |ИЗ
    |   Документ.пкАктПриемкиВозврата.ЗаданияНаПеревозку КАК пкАктПриемкиВозвратаЗаданияНаПеревозку
    |       ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкАктПриемкиВозврата КАК пкАктПриемкиВозврата
    |       ПО пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка = пкАктПриемкиВозврата.Ссылка
    |           И (пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка В (&МассивОбъектов))
    |       ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкЗаданиеНаПеревозку КАК пкЗаданиеНаПеревозку
    |       ПО пкАктПриемкиВозвратаЗаданияНаПеревозку.ЗаданиеНаПеревозку = пкЗаданиеНаПеревозку.Ссылка
    |           И (пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка В (&МассивОбъектов))
    |       ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкЗаявкаНаАрендуТехники.Товары КАК пкЗаявкаНаАрендуТехникиТовары
    |       ПО пкАктПриемкиВозвратаЗаданияНаПеревозку.ЗаявкаНаАрендуТехники = пкЗаявкаНаАрендуТехникиТовары.Ссылка
    |           И (пкЗаданиеНаПеревозку.Модель = пкЗаявкаНаАрендуТехникиТовары.Номенклатура)
    |           И (пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка В (&МассивОбъектов))
    |       ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкЗаявкаНаАрендуТехники КАК пкЗаявкаНаАрендуТехники
    |       ПО пкАктПриемкиВозвратаЗаданияНаПеревозку.ЗаявкаНаАрендуТехники = пкЗаявкаНаАрендуТехники.Ссылка
    |           И (пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка В (&МассивОбъектов))
    |ГДЕ
    |   пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка В(&МассивОбъектов)
    |   И НЕ пкАктПриемкиВозврата.ПометкаУдаления
    |
    |СГРУППИРОВАТЬ ПО
    |   пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка,
    |   пкЗаданиеНаПеревозку.ДатаОтгрузки,
    |   пкАктПриемкиВозврата.ПриемкаВозврат,
    |   ПОДСТРОКА(пкАктПриемкиВозврата.АдресДоставки, 1, 150),
    |   пкАктПриемкиВозврата.Партнер,
    |   пкЗаявкаНаАрендуТехники.Ссылка,
    |   пкЗаявкаНаАрендуТехники.Договор,
    |   пкАктПриемкиВозврата.ОбъектСтроительства,
    |   пкАктПриемкиВозврата.КонтактноеЛицо,
    |   пкЗаданиеНаПеревозку.Модель,
    |   пкЗаданиеНаПеревозку.Техника,
    |   пкАктПриемкиВозврата.ТочкаМаршрута,
    |   пкАктПриемкиВозврата.НомерХодки,
    |   пкЗаданиеНаПеревозку.ДатаАренды,
    |   пкАктПриемкиВозвратаЗаданияНаПеревозку.Транспортировка,
    |   пкАктПриемкиВозвратаЗаданияНаПеревозку.СтоимостьАренды,
    |   ВЫБОР
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
    |           ТОГДА """"
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
    |               И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |           ТОГДА """"
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
    |               И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |   КОНЕЦ,
    |   ВЫБОР
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
    |           ТОГДА пкЗаявкаНаАрендуТехникиТовары.ДатаВозврата
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
    |               И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
    |               И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |           ТОГДА пкЗаявкаНаАрендуТехникиТовары.ДатаВозврата
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
    |           ТОГДА """"
    |   КОНЕЦ,
    |   пкЗаявкаНаАрендуТехники.КонтактноеЛицо,
    |   пкЗаявкаНаАрендуТехники.ВтороеКонтактноеЛицо,
    |   пкЗаявкаНаАрендуТехники.Менеджер,
	|	пкАктПриемкиВозвратаЗаданияНаПеревозку.НомерСтроки,
	|	пкЗаявкаНаАрендуТехникиТовары.ЗамененнаяМодель
    |
    |УПОРЯДОЧИТЬ ПО
    |   НомерХодки,
    |   ТочкаМаршрута";
	
	МассивАктов = Новый Массив;
	Для Каждого текСтрока Из МассивОбъектов Цикл
		Если ТипЗнч(текСтрока) = Тип("ДокументСсылка.пкАктПриемкиВозврата") Тогда
			МассивАктов.Добавить(текСтрока);
		КонецЕсли;
	КонецЦикла;
	
	ЗапросД = Новый Запрос;
	ЗапросД.Текст = 
	"ВЫБРАТЬ
	|	пкАктПриемкиВозврата.Ссылка
	|ИЗ
	|	Документ.пкАктПриемкиВозврата КАК пкАктПриемкиВозврата
	|ГДЕ
	|	пкАктПриемкиВозврата.Доставка В(&МассивОбъектов)";
	ЗапросД.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	РезЗапроса = ЗапросД.Выполнить().Выбрать();
	Пока РезЗапроса.Следующий() Цикл
		МассивАктов.Добавить(РезЗапроса.Ссылка);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивАктов);
	Запрос.УстановитьПараметр("ПредставлениеДокумента",	НСтр("ru = 'Акт приемки/возврата'"));
	Запрос.УстановитьПараметр("ПредставлениеВОшибке",	НСтр("ru = 'Акт приемки/возврата'"));
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке", ПакетРезультатовЗапроса[0]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти", ПакетРезультатовЗапроса[1]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументДоставка_АктПриемкиВовзвратаА52017(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, КомплектыПечати, ИмяМакета)
	
	ДанныеПечати		= ДанныеДляПечати.РезультатПоШапке.Выбрать();
	СтрокиТЧ			= ДанныеДляПечати.РезультатПоТабличнойЧасти.Выгрузить();
	
	ШаблонОшибкиСтроки	= "";
	
	ПервыйДокумент		= Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Макет = ПолучитьМакет(?(ДанныеПечати.ПриемкаВозврат = Перечисления.пкПриемкаВозврат.Приемка, "АктПриемкиА52017", "АктВозвратаА52017"));
		
		// Для печати комплектов
		Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено Тогда
			
			КомплектПечатиПоСсылке = КомплектыПечати.Найти(ДанныеПечати.Ссылка, "Ссылка");
			
			Если КомплектПечатиПоСсылке = Неопределено Тогда
				КомплектПечатиПоСсылке = КомплектыПечати[0];
			КонецЕсли;
			
			Если КомплектПечатиПоСсылке.Экземпляров = 0 Тогда
				Продолжить
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
#Область ОбластиМакета
		
		ОбластьШапка			= Макет.ПолучитьОбласть("Шапка");
		ОбластьДопСтрока		= Макет.ПолучитьОбласть("ДопСтрока");
		ОбластьТабЧасть			= Макет.ПолучитьОбласть("ТабЧасть");
		ОбластьПустаяТабЧасть	= Макет.ПолучитьОбласть("ПустаяТабЧасть");
		ОбластьПодвал			= Макет.ПолучитьОбласть("Подвал");
		ОбластьРазрез			= Макет.ПолучитьОбласть("Разрез");
		
#КонецОбласти
		
#Область ВыводШапки
		
		// ШАПКА - ЗАГОЛОВОК
		
		ШтрихкодированиеПечатныхФорм.кнВывестиШтрихкодEANВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьШапка, ДанныеПечати.Ссылка, "Акт приемки/возврата");
		
		//УстановитьПараметр(ОбластьШапка, "Организация", ДанныеПечати.Организация);
		УстановитьПараметр(ОбластьШапка, "Дата", Формат(ДанныеПечати.ДатаОтгрузки, "ДЛФ=Д"));
		УстановитьПараметр(ОбластьШапка, "Время", "");//Формат('00010101', "ДЛФ=T"));
		УстановитьПараметр(ОбластьШапка, "Номер", ?(ЗначениеЗаполнено(ДанныеПечати.Договор),СокрЛП(ДанныеПечати.Договор.Номер) + " от " + Формат(ДанныеПечати.Договор.Дата,"ДЛФ=Д"), ""));
		УстановитьПараметр(ОбластьШапка, "Контрагент", ?(ЗначениеЗаполнено(ДанныеПечати.Партнер) И ТипЗнч(ДанныеПечати.Партнер) = Тип("СправочникСсылка.Партнеры"), ДанныеПечати.Партнер.НаименованиеПолное, ДанныеПечати.Партнер));
		УстановитьПараметр(ОбластьШапка, "Объект", ?(ЗначениеЗаполнено(ДанныеПечати.ОбъектСтроительства), ДанныеПечати.ОбъектСтроительства, "")	);
		
		УстановитьПараметр(ОбластьШапка, "Подразделение", ?(ЗначениеЗаполнено(ДанныеПечати.Подразделение), ДанныеПечати.Подразделение, "________________"));
		ДиректорДепартамента	= "______________________, действующего на основании _______________________";
		Если ЗначениеЗаполнено(ДанныеПечати.Подразделение) Тогда
	        СтрокаРеквизитов = ПолучитьРеквизитыДоговора(ДанныеПечати.ДатаОтгрузки, ДанныеПечати.Подразделение);
	        Если СтрокаРеквизитов <> Неопределено Тогда
		        ДиректорДепартамента	= СокрЛП(СтрокаРеквизитов.ТекстШапки);
	        КонецЕсли;	
		КонецЕсли;
		УстановитьПараметр(ОбластьШапка, "ДиректорДепартамента", ДиректорДепартамента);
		
        Контрагент     = "________________________";
		КонтактноеЛицо = "________________________";
		Если ЗначениеЗаполнено(ДанныеПечати.Договор) И ЗначениеЗаполнено(ДанныеПечати.Договор.Контрагент) Тогда
	        Контрагент     = ДанныеПечати.Договор.Контрагент.НаименованиеПолное;
			//Если ЗначениеЗаполнено(ДанныеПечати.Договор.КонтактноеЛицо) Тогда
			//	КонтактноеЛицо = СклонениеПредставленийОбъектов.ПросклонятьПредставлениеПоВсемПадежам(ДанныеПечати.Договор.КонтактноеЛицо.ДолжностьПоВизитке).РодительныйПадеж + " " + 
			//		СклонениеПредставленийОбъектов.ПросклонятьПредставлениеПоВсемПадежам(ДанныеПечати.Договор.КонтактноеЛицо.Наименование, Истина).РодительныйПадеж;
			//КонецЕсли;
		КонецЕсли;
        ПодписантАрендатора = "________________________";
		Если ЗначениеЗаполнено(ДанныеПечати.Партнер) Тогда
	        ПодписантАрендатора = ?(ЗначениеЗаполнено(ДанныеПечати.Партнер.Комментарий), ДанныеПечати.Партнер.Комментарий, КонтактноеЛицо);
		КонецЕсли;
		УстановитьПараметр(ОбластьШапка, "Арендатор", Контрагент + ", именуемое в дальнейшем Арендатор, в лице " + ПодписантАрендатора);
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
#КонецОбласти

		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		
		ТаблицаСтрок = СтрокиТЧ.НайтиСтроки(СтруктураПоиска);
		
		Если ТаблицаСтрок.Количество() = 0 Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибкиСтроки,
				ДанныеПечати.Ссылка,
				НСтр("ru='Нет строк для приемки или возврата'"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДанныеПечати.Ссылка);
			Продолжить;
			
		КонецЕсли;
		
#Область ВыводЗаголовкаТаблицы

		//Если ТаблицаСтрок.Количество() > 1 Тогда
		//	УстановитьПараметр(ОбластьДопСтрока, "ДопСтрока", "Подъемники стреловые:");
		//Иначе
		//	УстановитьПараметр(ОбластьДопСтрока, "ДопСтрока", "Подъемник стреловой:");
		//КонецЕсли;
		//ТабличныйДокумент.Вывести(ОбластьДопСтрока);
		
#КонецОбласти
		
#Область ВыводТаблицыТовары
		
		КонтактноеЛицо	     = "";
        ВтороеКонтактноеЛицо = "";
		Ответственный	     = "";

		НомерСтроки = 0;
        
        Транспортировка = "";

		Для Каждого СтрокаТовары Из ТаблицаСтрок Цикл
			
			НомерСтроки = НомерСтроки + 1;
            
			Если ДанныеПечати.ПриемкаВозврат = Перечисления.пкПриемкаВозврат.Приемка И НомерСтроки = 1 Тогда
				
				Если ЗначениеЗаполнено(СтрокаТовары.Заявка) Тогда
					
					Заявка = СтрокаТовары.Заявка; 
	                
	                Если Заявка.СтоимостьТранспортировки > 0 И Заявка.КоличествоХодок > 0 Тогда
                        Транспортировка = Строка(Заявка.СтоимостьТранспортировки) + " " + ?(ЗначениеЗаполнено(Заявка.Договор.пкВалютаТарифа), Заявка.Договор.пкВалютаТарифа, "RUB") 
                            + " * " + ?(Заявка.КоличествоХодок < 2, Строка(Заявка.КоличествоХодок), "2") + ?(Заявка.СНДС, " + НДС", "");       
	                КонецЕсли;    
				КонецЕсли;
				
            КонецЕсли; 

			УстановитьПараметр(ОбластьТабЧасть, "Н", НомерСтроки);
			УстановитьПараметр(ОбластьТабЧасть, "Номенклатура", СтрокаТовары.Модель);
			УстановитьПараметр(ОбластьТабЧасть, "СерийныйНомер", ?(ЗначениеЗаполнено(СтрокаТовары.Техника), СокрЛП(СтрокаТовары.Техника.Код), ""));
			УстановитьПараметр(ОбластьТабЧасть, "ЗаводскойНомер", ?(ЗначениеЗаполнено(СтрокаТовары.Техника), СокрЛП(СтрокаТовары.Техника.ЗаводскойНомер), ""));
			УстановитьПараметр(ОбластьТабЧасть, "АрендаДата", Формат(СтрокаТовары.ДатаНачалаАренды,"ДЛФ=Д"));
			УстановитьПараметр(ОбластьТабЧасть, "Дата", Формат(СтрокаТовары.ДатаВозврата,"ДЛФ=Д"));
			
			СтоимостьАренды	= ?(СокрЛП(СтрокаТовары.СтоимостьАренды) = "", "по договору", СокрЛП(СтрокаТовары.СтоимостьАренды));
			СтоимостьАренды	= СтоимостьАренды + ?(ЗначениеЗаполнено(СтрокаТовары.ЗамененнаяМодель), 
								?(СтоимостьАренды = "", "", Символы.ПС) + "как " + СтрокаТовары.ЗамененнаяМодель, 
								"");
			УстановитьПараметр(ОбластьТабЧасть, "СтоимостьАренды", СтоимостьАренды);
            
            Если Транспортировка <> "" И НомерСтроки = 1 Тогда
			    УстановитьПараметр(ОбластьТабЧасть, "Транспортировка", Транспортировка);
            ИначеЕсли Транспортировка <> "" Тогда
			    УстановитьПараметр(ОбластьТабЧасть, "Транспортировка", "");
            Иначе    
			    УстановитьПараметр(ОбластьТабЧасть, "Транспортировка", ?(ДанныеПечати.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз 
                    ИЛИ ДанныеПечати.ДоставкуВыполняет = Перечисления.ТипыИсполнителейЗаданийНаПеревозку.Самовывоз, "самовывоз", 
                    ?(СокрЛП(СтрокаТовары.Транспортировка) = "", "по договору", СокрЛП(СтрокаТовары.Транспортировка))));
            КонецЕсли;    
			
			ТабличныйДокумент.Вывести(ОбластьТабЧасть);
			
			Если НЕ ЗначениеЗаполнено(КонтактноеЛицо) Тогда
				КонтактноеЛицо	= СтрокаТовары.КонтактноеЛицоЗаявки;
            КонецЕсли;
            
			Если НЕ ЗначениеЗаполнено(ВтороеКонтактноеЛицо) Тогда
				ВтороеКонтактноеЛицо = СтрокаТовары.ВтороеКонтактноеЛицо;
            КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
				Ответственный	= СтрокаТовары.МенеджерЗаявки;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			КонтактноеЛицо	= ДанныеПечати.КонтактноеЛицо;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
			Ответственный	= ДанныеПечати.Ответственный;
		КонецЕсли;
		
		Пока НомерСтроки < 3 Цикл
			
			НомерСтроки = НомерСтроки + 1;
			УстановитьПараметр(ОбластьПустаяТабЧасть, "НП", НомерСтроки);
			
			ТабличныйДокумент.Вывести(ОбластьПустаяТабЧасть);
			
		КонецЦикла;
		
#КонецОбласти
		
#Область ВыводПодвала
		
		Если ДанныеПечати.ПриемкаВозврат = Перечисления.пкПриемкаВозврат.Возврат Тогда
			УстановитьПараметр(ОбластьПодвал, "Паспорт", "1. Паспорт (копия)");
			УстановитьПараметр(ОбластьПодвал, "ВахтенныйЖурнал", "2. Вахтенный журнал");
		КонецЕсли;
		
		УстановитьПараметр(ОбластьПодвал, "КонтактноеЛицо", ?(ЗначениеЗаполнено(КонтактноеЛицо), КонтактноеЛицо.Наименование, "") + " Тел: " + ПолучитьТелефонИзКонтактнойИнформации(КонтактноеЛицо) 
            + ?(ЗначениеЗаполнено(ВтороеКонтактноеЛицо), ", " + ВтороеКонтактноеЛицо.Наименование + " Тел: " + ПолучитьТелефонИзКонтактнойИнформации(ВтороеКонтактноеЛицо), ""));
		УстановитьПараметр(ОбластьПодвал, "Ответственный", ?(ЗначениеЗаполнено(Ответственный), Ответственный.Наименование, "") + " Тел: " + ПолучитьТелефонИзКонтактнойИнформации(Ответственный));
		
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		
#КонецОбласти
		
			
		ОбластьКопирования = ТабличныйДокумент.ПолучитьОбласть(
			НомерСтрокиНачало,
			,
			ТабличныйДокумент.ВысотаТаблицы);
		
		КоличествоЭкземпляров = 2;	
		Для Итератор = 2 По КоличествоЭкземпляров Цикл
			
			Если (Итератор - 1)/2 = Окр((Итератор - 1)/2,0) Тогда 
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц(); //- только перед нечетнм
			Иначе
				ТабличныйДокумент.Вывести(ОбластьРазрез);
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьКопирования);
				
		КонецЦикла;
		
		// Выведем нужное количество экземпляров (при печати комплектов)
		Если КомплектыПечати <> Неопределено
			И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено
			И КомплектПечатиПоСсылке.Экземпляров > 1 Тогда
			
			ОбластьКопирования = ТабличныйДокумент.ПолучитьОбласть(
				НомерСтрокиНачало,
				,
				ТабличныйДокумент.ВысотаТаблицы);
			
			Для Итератор = 2 По КомплектПечатиПоСсылке.Экземпляров Цикл
				
				Если (Итератор - 1)/2 = Окр((Итератор - 1)/2,0) Тогда 
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц(); //- на одной странице
				КонецЕсли;
				ТабличныйДокумент.Вывести(ОбластьКопирования);
				
			КонецЦикла;
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Печать_Доставка_АктПриемкиВовзвратаА5Москва

Функция СформироватьПечатнуюФормуДоставка_АктПриемкиВовзвратаА5Москва(СтруктураТипов, ОбъектыПечати, ПараметрыПечати, КомплектыПечати = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_АктПриемкиВовзвратаА5Москва";
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
			
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ДанныеДляПечати = ПолучитьДанныеДляПечатнойФормыДоставка_АктПриемкиВовзвратаА5Москва(
			СтруктураОбъектов.Значение);
		
		// Сформированный тбаличный документ
		ЗаполнитьТабличныйДокументДоставка_АктПриемкиВовзвратаА5Москва(
			ТабличныйДокумент,
			ДанныеДляПечати,
			ОбъектыПечати,
			КомплектыПечати,
			"АктПриемки");
			
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыДоставка_АктПриемкиВовзвратаА5Москва(МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
    |   пкАктПриемкиВозврата.Ссылка КАК Ссылка,
    |   пкАктПриемкиВозврата.Дата КАК ДатаОтгрузки,
    |   пкАктПриемкиВозврата.ПриемкаВозврат КАК ПриемкаВозврат,
    |   пкДоставка.Подразделение КАК Подразделение,
    |   пкДоставка.Организация КАК Организация,
    |   пкДоставка.ТранспортноеСредство КАК ТранспортноеСредство,
    |   пкДоставка.Водитель КАК Водитель,
    |   пкДоставка.Перевозчик КАК Перевозчик,
    |   ПОДСТРОКА(пкАктПриемкиВозврата.АдресДоставки, 1, 150) КАК АдресДоставки,
    |   пкАктПриемкиВозврата.Партнер КАК Партнер,
    |   пкАктПриемкиВозврата.Договор КАК Договор,
    |   пкАктПриемкиВозврата.ОбъектСтроительства КАК ОбъектСтроительства,
    |   пкАктПриемкиВозврата.КонтактноеЛицо КАК КонтактноеЛицо,
    |   пкАктПриемкиВозврата.Ответственный КАК Ответственный,
    |   пкДоставка.СпособДоставки,
    |   пкДоставка.ДоставкуВыполняет
    |ИЗ
    |   Документ.пкАктПриемкиВозврата КАК пкАктПриемкиВозврата
    |       ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкДоставка КАК пкДоставка
    |       ПО пкАктПриемкиВозврата.Доставка = пкДоставка.Ссылка
    |           И (пкАктПриемкиВозврата.Ссылка В (&МассивОбъектов))
    |ГДЕ
    |   пкАктПриемкиВозврата.Ссылка В(&МассивОбъектов)
    |   И НЕ пкАктПриемкиВозврата.ПометкаУдаления
    |
    |СГРУППИРОВАТЬ ПО
    |   пкАктПриемкиВозврата.Ссылка,
    |   пкАктПриемкиВозврата.Дата,
    |   пкАктПриемкиВозврата.ПриемкаВозврат,
    |   пкДоставка.Подразделение,
    |   пкДоставка.Организация,
    |   пкДоставка.ТранспортноеСредство,
    |   пкДоставка.Водитель,
    |   пкДоставка.Перевозчик,
    |   ПОДСТРОКА(пкАктПриемкиВозврата.АдресДоставки, 1, 150),
    |   пкАктПриемкиВозврата.Партнер,
    |   пкАктПриемкиВозврата.Договор,
    |   пкАктПриемкиВозврата.ОбъектСтроительства,
    |   пкАктПриемкиВозврата.КонтактноеЛицо,
    |   пкАктПриемкиВозврата.Ответственный,
    |   пкДоставка.СпособДоставки,
    |   пкДоставка.ДоставкуВыполняет
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
    |   пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка КАК Ссылка,
    |   пкЗаданиеНаПеревозку.ДатаОтгрузки КАК ДатаОтгрузки,
    |   пкАктПриемкиВозврата.ПриемкаВозврат КАК ПриемкаВозврат,
    |   ПОДСТРОКА(пкАктПриемкиВозврата.АдресДоставки, 1, 150) КАК АдресДоставки,
    |   пкАктПриемкиВозврата.Партнер КАК Партнер,
    |   пкЗаявкаНаАрендуТехники.Ссылка КАК Заявка,
    |   пкЗаявкаНаАрендуТехники.Договор КАК Договор,
    |   пкАктПриемкиВозврата.ОбъектСтроительства КАК ОбъектСтроительства,
    |   пкАктПриемкиВозврата.КонтактноеЛицо КАК КонтактноеЛицо,
    |   пкЗаданиеНаПеревозку.Модель КАК Модель,
    |   пкЗаданиеНаПеревозку.Техника КАК Техника,
    |   ВЫБОР
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
    |           ТОГДА """"
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
    |               И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |           ТОГДА """"
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
    |               И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |   КОНЕЦ КАК ДатаНачалаАренды,
    |   ВЫБОР
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
    |           ТОГДА пкЗаявкаНаАрендуТехникиТовары.ДатаВозврата
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
    |               И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
    |               И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |           ТОГДА пкЗаявкаНаАрендуТехникиТовары.ДатаВозврата
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
    |           ТОГДА """"
    |   КОНЕЦ КАК ДатаВозврата,
    |   пкАктПриемкиВозврата.ТочкаМаршрута КАК ТочкаМаршрута,
    |   СУММА(1) КАК Количество,
    |   пкАктПриемкиВозврата.НомерХодки КАК НомерХодки,
    |   пкЗаданиеНаПеревозку.ДатаАренды КАК ДатаАренды,
    |   пкЗаявкаНаАрендуТехники.КонтактноеЛицо КАК КонтактноеЛицоЗаявки,
    |   пкЗаявкаНаАрендуТехники.ВтороеКонтактноеЛицо КАК ВтороеКонтактноеЛицо,
    |   пкЗаявкаНаАрендуТехники.Менеджер КАК МенеджерЗаявки,
    |   пкАктПриемкиВозвратаЗаданияНаПеревозку.Транспортировка КАК Транспортировка,
    |   пкАктПриемкиВозвратаЗаданияНаПеревозку.СтоимостьАренды КАК СтоимостьАренды,
	|	пкАктПриемкиВозвратаЗаданияНаПеревозку.НомерСтроки,
	|	пкЗаявкаНаАрендуТехникиТовары.ЗамененнаяМодель
    |ИЗ
    |   Документ.пкАктПриемкиВозврата.ЗаданияНаПеревозку КАК пкАктПриемкиВозвратаЗаданияНаПеревозку
    |       ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкАктПриемкиВозврата КАК пкАктПриемкиВозврата
    |       ПО пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка = пкАктПриемкиВозврата.Ссылка
    |           И (пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка В (&МассивОбъектов))
    |       ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкЗаданиеНаПеревозку КАК пкЗаданиеНаПеревозку
    |       ПО пкАктПриемкиВозвратаЗаданияНаПеревозку.ЗаданиеНаПеревозку = пкЗаданиеНаПеревозку.Ссылка
    |           И (пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка В (&МассивОбъектов))
    |       ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкЗаявкаНаАрендуТехники.Товары КАК пкЗаявкаНаАрендуТехникиТовары
    |       ПО пкАктПриемкиВозвратаЗаданияНаПеревозку.ЗаявкаНаАрендуТехники = пкЗаявкаНаАрендуТехникиТовары.Ссылка
    |           И (пкЗаданиеНаПеревозку.Модель = пкЗаявкаНаАрендуТехникиТовары.Номенклатура)
    |           И (пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка В (&МассивОбъектов))
    |       ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкЗаявкаНаАрендуТехники КАК пкЗаявкаНаАрендуТехники
    |       ПО пкАктПриемкиВозвратаЗаданияНаПеревозку.ЗаявкаНаАрендуТехники = пкЗаявкаНаАрендуТехники.Ссылка
    |           И (пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка В (&МассивОбъектов))
    |ГДЕ
    |   пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка В(&МассивОбъектов)
    |   И НЕ пкАктПриемкиВозврата.ПометкаУдаления
    |
    |СГРУППИРОВАТЬ ПО
    |   пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка,
    |   пкЗаданиеНаПеревозку.ДатаОтгрузки,
    |   пкАктПриемкиВозврата.ПриемкаВозврат,
    |   ПОДСТРОКА(пкАктПриемкиВозврата.АдресДоставки, 1, 150),
    |   пкАктПриемкиВозврата.Партнер,
    |   пкЗаявкаНаАрендуТехники.Ссылка,
    |   пкЗаявкаНаАрендуТехники.Договор,
    |   пкАктПриемкиВозврата.ОбъектСтроительства,
    |   пкАктПриемкиВозврата.КонтактноеЛицо,
    |   пкЗаданиеНаПеревозку.Модель,
    |   пкЗаданиеНаПеревозку.Техника,
    |   пкАктПриемкиВозврата.ТочкаМаршрута,
    |   пкАктПриемкиВозврата.НомерХодки,
    |   пкЗаданиеНаПеревозку.ДатаАренды,
    |   пкАктПриемкиВозвратаЗаданияНаПеревозку.Транспортировка,
    |   пкАктПриемкиВозвратаЗаданияНаПеревозку.СтоимостьАренды,
    |   ВЫБОР
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
    |           ТОГДА """"
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
    |               И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |           ТОГДА """"
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
    |               И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |   КОНЕЦ,
    |   ВЫБОР
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
    |           ТОГДА пкЗаявкаНаАрендуТехникиТовары.ДатаВозврата
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
    |               И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |           ТОГДА ВЫБОР
    |                   КОГДА пкЗаданиеНаПеревозку.ДатаАренды = ДАТАВРЕМЯ(1, 1, 1)
    |                       ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
    |                   ИНАЧЕ пкЗаданиеНаПеревозку.ДатаАренды
    |               КОНЕЦ
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
    |               И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
    |           ТОГДА пкЗаявкаНаАрендуТехникиТовары.ДатаВозврата
    |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
    |           ТОГДА """"
    |   КОНЕЦ,
    |   пкЗаявкаНаАрендуТехники.КонтактноеЛицо,
    |   пкЗаявкаНаАрендуТехники.ВтороеКонтактноеЛицо,
    |   пкЗаявкаНаАрендуТехники.Менеджер,
	|	пкАктПриемкиВозвратаЗаданияНаПеревозку.НомерСтроки,
	|	пкЗаявкаНаАрендуТехникиТовары.ЗамененнаяМодель
    |
    |УПОРЯДОЧИТЬ ПО
    |   НомерХодки,
    |   ТочкаМаршрута";
	
	МассивАктов = Новый Массив;
	Для Каждого текСтрока Из МассивОбъектов Цикл
		Если ТипЗнч(текСтрока) = Тип("ДокументСсылка.пкАктПриемкиВозврата") Тогда
			МассивАктов.Добавить(текСтрока);
		КонецЕсли;
	КонецЦикла;
	
	ЗапросД = Новый Запрос;
	ЗапросД.Текст = 
	"ВЫБРАТЬ
	|	пкАктПриемкиВозврата.Ссылка
	|ИЗ
	|	Документ.пкАктПриемкиВозврата КАК пкАктПриемкиВозврата
	|ГДЕ
	|	пкАктПриемкиВозврата.Доставка В(&МассивОбъектов)";
	ЗапросД.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	РезЗапроса = ЗапросД.Выполнить().Выбрать();
	Пока РезЗапроса.Следующий() Цикл
		МассивАктов.Добавить(РезЗапроса.Ссылка);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивАктов);
	Запрос.УстановитьПараметр("ПредставлениеДокумента",	НСтр("ru = 'Акт приемки/возврата'"));
	Запрос.УстановитьПараметр("ПредставлениеВОшибке",	НСтр("ru = 'Акт приемки/возврата'"));
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке", ПакетРезультатовЗапроса[0]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти", ПакетРезультатовЗапроса[1]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументДоставка_АктПриемкиВовзвратаА5Москва(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, КомплектыПечати, ИмяМакета)
	
	ДанныеПечати		= ДанныеДляПечати.РезультатПоШапке.Выбрать();
	СтрокиТЧ			= ДанныеДляПечати.РезультатПоТабличнойЧасти.Выгрузить();
	
	ШаблонОшибкиСтроки	= "";
	
	ПервыйДокумент		= Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		// Для печати комплектов
		Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено Тогда
			
			КомплектПечатиПоСсылке = КомплектыПечати.Найти(ДанныеПечати.Ссылка, "Ссылка");
			
			Если КомплектПечатиПоСсылке = Неопределено Тогда
				КомплектПечатиПоСсылке = КомплектыПечати[0];
			КонецЕсли;
			
			Если КомплектПечатиПоСсылке.Экземпляров = 0 Тогда
				Продолжить
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если ДанныеПечати.ПриемкаВозврат = Перечисления.пкПриемкаВозврат.Приемка Тогда
//ПЕРВЫЙ Экземпляр		
			
			Макет = ПолучитьМакет("АктПриемкиА5Москва");
			
			ОбластьШапка			= Макет.ПолучитьОбласть("Шапка");
			ОбластьДопСтрока		= Макет.ПолучитьОбласть("ДопСтрока");
			ОбластьТабЧасть			= Макет.ПолучитьОбласть("ТабЧасть");
			ОбластьПустаяТабЧасть	= Макет.ПолучитьОбласть("ПустаяТабЧасть");
			ОбластьПодвал			= Макет.ПолучитьОбласть("Подвал");
			
			// ШАПКА - ЗАГОЛОВОК
		
			ШтрихкодированиеПечатныхФорм.кнВывестиШтрихкодEANВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьШапка, ДанныеПечати.Ссылка, "Акт приемки/возврата");
			
			//УстановитьПараметр(ОбластьШапка, "Организация", ДанныеПечати.Организация);
			УстановитьПараметр(ОбластьШапка, "Дата", Формат(ДанныеПечати.ДатаОтгрузки, "ДЛФ=Д"));
			УстановитьПараметр(ОбластьШапка, "Время", "");//Формат('00010101', "ДЛФ=T"));
			УстановитьПараметр(ОбластьШапка, "Номер", ?(ЗначениеЗаполнено(ДанныеПечати.Договор),СокрЛП(ДанныеПечати.Договор.Номер) + " от " + Формат(ДанныеПечати.Договор.Дата,"ДЛФ=Д"), ""));
			УстановитьПараметр(ОбластьШапка, "Контрагент", ?(ЗначениеЗаполнено(ДанныеПечати.Партнер) И ТипЗнч(ДанныеПечати.Партнер) = Тип("СправочникСсылка.Партнеры"), ДанныеПечати.Партнер.НаименованиеПолное, ДанныеПечати.Партнер));
			УстановитьПараметр(ОбластьШапка, "Объект", ?(ЗначениеЗаполнено(ДанныеПечати.ОбъектСтроительства), Строка(ДанныеПечати.ОбъектСтроительства), "")	);
			
			ТабличныйДокумент.Вывести(ОбластьШапка);
			
			СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
			
			ТаблицаСтрок = СтрокиТЧ.НайтиСтроки(СтруктураПоиска);
			
			Если ТаблицаСтрок.Количество() = 0 Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонОшибкиСтроки,
					ДанныеПечати.Ссылка,
					НСтр("ru='Нет строк для приемки или возврата'"));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДанныеПечати.Ссылка);
				Продолжить;
				
			КонецЕсли;
			
			//Если ТаблицаСтрок.Количество() > 1 Тогда
			//	УстановитьПараметр(ОбластьДопСтрока, "ДопСтрока", "Подъемники стреловые:");
			//Иначе
			//	УстановитьПараметр(ОбластьДопСтрока, "ДопСтрока", "Подъемник стреловой:");
			//КонецЕсли;
			//ТабличныйДокумент.Вывести(ОбластьДопСтрока);
			
			КонтактноеЛицо	     = "";
			ВтороеКонтактноеЛицо = "";
			Ответственный	     = "";

			НомерСтроки = 0;
            
            Транспортировка = "";

			Для Каждого СтрокаТовары Из ТаблицаСтрок Цикл
				
				НомерСтроки = НомерСтроки + 1;
                
                Если НомерСтроки = 1 Тогда
				
					Если ЗначениеЗаполнено(СтрокаТовары.Заявка) Тогда
						
	                    Заявка = СтрокаТовары.Заявка; 
	                    
	                    Если Заявка.СтоимостьТранспортировки > 0 И Заявка.КоличествоХодок > 0 Тогда
                            Транспортировка = Строка(Заявка.СтоимостьТранспортировки) + " " + ?(ЗначениеЗаполнено(Заявка.Договор.пкВалютаТарифа), Заявка.Договор.пкВалютаТарифа, "RUB") 
                                + " * " + ?(Заявка.КоличествоХодок < 2, Строка(Заявка.КоличествоХодок), "2") + ?(Заявка.СНДС, " + НДС", "");       
	                    КонецЕсли;    
					КонецЕсли;
                КонецЕсли; 

				УстановитьПараметр(ОбластьТабЧасть, "Н", НомерСтроки);
				УстановитьПараметр(ОбластьТабЧасть, "Номенклатура", СтрокаТовары.Модель);
				УстановитьПараметр(ОбластьТабЧасть, "СерийныйНомер", ?(ЗначениеЗаполнено(СтрокаТовары.Техника), СокрЛП(СтрокаТовары.Техника.Код), ""));
				УстановитьПараметр(ОбластьТабЧасть, "АрендаДата", Формат(СтрокаТовары.ДатаНачалаАренды,"ДЛФ=Д"));
				Если ДанныеПечати.ПриемкаВозврат = Перечисления.пкПриемкаВозврат.Возврат Тогда
					УстановитьПараметр(ОбластьТабЧасть, "Дата", Формат(СтрокаТовары.ДатаВозврата,"ДЛФ=Д"));
				Иначе
					Если НомерСтроки = 1 Тогда
						УстановитьПараметр(ОбластьТабЧасть, "Дата", "Согласно");
					ИначеЕсли НомерСтроки = 2 Тогда
						УстановитьПараметр(ОбластьТабЧасть, "Дата", "договора");
					Иначе
						УстановитьПараметр(ОбластьТабЧасть, "Дата", "");
					КонецЕсли;
				КонецЕсли;
				
				СтоимостьАренды	= ?(СокрЛП(СтрокаТовары.СтоимостьАренды) = "", "по договору", СокрЛП(СтрокаТовары.СтоимостьАренды));
				СтоимостьАренды	= СтоимостьАренды + ?(ЗначениеЗаполнено(СтрокаТовары.ЗамененнаяМодель), 
									?(СтоимостьАренды = "", "", Символы.ПС) + "как " + СтрокаТовары.ЗамененнаяМодель, 
									"");
				УстановитьПараметр(ОбластьТабЧасть, "СтоимостьАренды", СтоимостьАренды);
                
                Если Транспортировка <> "" И НомерСтроки = 1 Тогда
    			    УстановитьПараметр(ОбластьТабЧасть, "Транспортировка", Транспортировка);
                ИначеЕсли Транспортировка <> "" Тогда
    			    УстановитьПараметр(ОбластьТабЧасть, "Транспортировка", "");
                Иначе    
    			    УстановитьПараметр(ОбластьТабЧасть, "Транспортировка", ?(ДанныеПечати.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз 
                        ИЛИ ДанныеПечати.ДоставкуВыполняет = Перечисления.ТипыИсполнителейЗаданийНаПеревозку.Самовывоз, "самовывоз", 
                        ?(СокрЛП(СтрокаТовары.Транспортировка) = "", "по договору", СокрЛП(СтрокаТовары.Транспортировка))));
                КонецЕсли;    
				
				ТабличныйДокумент.Вывести(ОбластьТабЧасть);
				
				Если НЕ ЗначениеЗаполнено(КонтактноеЛицо) Тогда
					КонтактноеЛицо	= СтрокаТовары.КонтактноеЛицоЗаявки;
                КонецЕсли;
                
                Если НЕ ЗначениеЗаполнено(ВтороеКонтактноеЛицо) Тогда
				    ВтороеКонтактноеЛицо = СтрокаТовары.ВтороеКонтактноеЛицо;
                КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
					Ответственный	= СтрокаТовары.МенеджерЗаявки;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ ЗначениеЗаполнено(КонтактноеЛицо) Тогда
				КонтактноеЛицо	= ДанныеПечати.КонтактноеЛицо;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
				Ответственный	= ДанныеПечати.Ответственный;
			КонецЕсли;
			
			Пока НомерСтроки < 2 Цикл
				
				НомерСтроки = НомерСтроки + 1;
				УстановитьПараметр(ОбластьПустаяТабЧасть, "НП", НомерСтроки);
				
				Если НомерСтроки = 1 Тогда
					УстановитьПараметр(ОбластьПустаяТабЧасть, "Дата", "Согласно");
				ИначеЕсли НомерСтроки = 2 Тогда
					УстановитьПараметр(ОбластьПустаяТабЧасть, "Дата", "договора");
				Иначе
					УстановитьПараметр(ОбластьПустаяТабЧасть, "Дата", "");
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьПустаяТабЧасть);
				
			КонецЦикла;
			
			Если ЗначениеЗаполнено(Ответственный) Тогда
				ТекФизЛицо = Ответственный.ФизическоеЛицо;
				Если ТаблицаСтрок.Количество() > 0 Тогда
					Если ЗначениеЗаполнено(ТаблицаСтрок[0].Заявка)
						И ЗначениеЗаполнено(ТаблицаСтрок[0].Заявка.Менеджер) 
						И ЗначениеЗаполнено(ТаблицаСтрок[0].Заявка.Менеджер.ФизическоеЛицо) 
					Тогда
						Ответственный = ТаблицаСтрок[0].Заявка.Менеджер.ФизическоеЛицо;
					Иначе
						Ответственный = ТекФизЛицо;
					КонецЕсли;
				Иначе
					Ответственный = ТекФизЛицо;
				КонецЕсли;	
				ТелефонОтветственного = ПолучитьТелефонИзКонтактнойИнформации(Ответственный);
			Иначе
				Ответственный = "_______________";
				ТелефонОтветственного = "______________";
			КонецЕсли;
			
			Если ДанныеПечати.ПриемкаВозврат = Перечисления.пкПриемкаВозврат.Возврат Тогда
				УстановитьПараметр(ОбластьПодвал, "Паспорт", "1. Паспорт (копия)");
				УстановитьПараметр(ОбластьПодвал, "ВахтенныйЖурнал", "2. Вахтенный журнал");
			КонецЕсли;
			
    		УстановитьПараметр(ОбластьПодвал, "КонтактноеЛицо", ?(ЗначениеЗаполнено(КонтактноеЛицо), КонтактноеЛицо.Наименование, "") + " Тел: " + ПолучитьТелефонИзКонтактнойИнформации(КонтактноеЛицо) 
                + ?(ЗначениеЗаполнено(ВтороеКонтактноеЛицо), ", " + ВтороеКонтактноеЛицо.Наименование + " Тел: " + ПолучитьТелефонИзКонтактнойИнформации(ВтороеКонтактноеЛицо), ""));
			УстановитьПараметр(ОбластьПодвал, "Ответственный", Строка(Ответственный) + " Тел: " + ТелефонОтветственного);
			
			ТабличныйДокумент.Вывести(ОбластьПодвал);
			
			ОбластьКопирования = ТабличныйДокумент.ПолучитьОбласть(
				НомерСтрокиНачало,
				,
				ТабличныйДокумент.ВысотаТаблицы);
//Второй Экземпляр на той же странице
			ТабличныйДокумент.Вывести(ОбластьКопирования);
//Третий экземпляр на другой странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабличныйДокумент.Вывести(ОбластьКопирования);
//Четвертый (Возврат) на той же странице
			НомерСтрокиНачалоВозврата = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			Макет = ПолучитьМакет("АктВозвратаА5Москва");
			
			ОбластьШапка			= Макет.ПолучитьОбласть("Шапка");
			ОбластьДопСтрока		= Макет.ПолучитьОбласть("ДопСтрока");
			ОбластьТабЧасть			= Макет.ПолучитьОбласть("ТабЧасть");
			ОбластьПустаяТабЧасть	= Макет.ПолучитьОбласть("ПустаяТабЧасть");
			ОбластьПодвал			= Макет.ПолучитьОбласть("Подвал");
			
			// ШАПКА - ЗАГОЛОВОК
		
			ШтрихкодированиеПечатныхФорм.кнВывестиШтрихкодEANВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьШапка, ДанныеПечати.Ссылка, "Акт приемки/возврата");
			
			//УстановитьПараметр(ОбластьШапка, "Организация", ДанныеПечати.Организация);
			УстановитьПараметр(ОбластьШапка, "Дата", Формат(ДанныеПечати.ДатаОтгрузки, "ДЛФ=Д"));
			УстановитьПараметр(ОбластьШапка, "Время", "");//Формат('00010101', "ДЛФ=T"));
			УстановитьПараметр(ОбластьШапка, "Номер", ?(ЗначениеЗаполнено(ДанныеПечати.Договор),СокрЛП(ДанныеПечати.Договор.Номер) + " от " + Формат(ДанныеПечати.Договор.Дата,"ДЛФ=Д"), ""));
			УстановитьПараметр(ОбластьШапка, "Контрагент", ?(ЗначениеЗаполнено(ДанныеПечати.Партнер) И ТипЗнч(ДанныеПечати.Партнер) = Тип("СправочникСсылка.Партнеры"), ДанныеПечати.Партнер.НаименованиеПолное, ДанныеПечати.Партнер));
			УстановитьПараметр(ОбластьШапка, "Объект", ?(ЗначениеЗаполнено(ДанныеПечати.ОбъектСтроительства), Строка(ДанныеПечати.ОбъектСтроительства), "")	);
			
			ТабличныйДокумент.Вывести(ОбластьШапка);
			
			СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
			
			ТаблицаСтрок = СтрокиТЧ.НайтиСтроки(СтруктураПоиска);
			
			Если ТаблицаСтрок.Количество() = 0 Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонОшибкиСтроки,
					ДанныеПечати.Ссылка,
					НСтр("ru='Нет строк для приемки или возврата'"));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДанныеПечати.Ссылка);
				Продолжить;
				
			КонецЕсли;
			
			//Если ТаблицаСтрок.Количество() > 1 Тогда
			//	УстановитьПараметр(ОбластьДопСтрока, "ДопСтрока", "Подъемники стреловые:");
			//Иначе
			//	УстановитьПараметр(ОбластьДопСтрока, "ДопСтрока", "Подъемник стреловой:");
			//КонецЕсли;
			//ТабличныйДокумент.Вывести(ОбластьДопСтрока);
			
			КонтактноеЛицо	     = "";
			ВтороеКонтактноеЛицо = "";
			Ответственный	     = "";

			НомерСтроки = 0;
            
            Транспортировка = "";

			Для Каждого СтрокаТовары Из ТаблицаСтрок Цикл
				
				НомерСтроки = НомерСтроки + 1;
                
                Если НомерСтроки = 1 Тогда
				
					Если ЗначениеЗаполнено(СтрокаТовары.Заявка) Тогда
						
	                    Заявка = СтрокаТовары.Заявка; 
	                    
	                    Если Заявка.СтоимостьТранспортировки > 0 И Заявка.КоличествоХодок > 0 Тогда
                            Транспортировка = Строка(Заявка.СтоимостьТранспортировки) + " " + ?(ЗначениеЗаполнено(Заявка.Договор.пкВалютаТарифа), Заявка.Договор.пкВалютаТарифа, "RUB") 
                                + " * " + ?(Заявка.КоличествоХодок < 2, Строка(Заявка.КоличествоХодок), "2") + ?(Заявка.СНДС, " + НДС", "");       
	                    КонецЕсли;    
					КонецЕсли;
                КонецЕсли; 

				УстановитьПараметр(ОбластьТабЧасть, "Н", НомерСтроки);
				УстановитьПараметр(ОбластьТабЧасть, "Номенклатура", СтрокаТовары.Модель);
				УстановитьПараметр(ОбластьТабЧасть, "СерийныйНомер", ?(ЗначениеЗаполнено(СтрокаТовары.Техника), СокрЛП(СтрокаТовары.Техника.Код), ""));
				УстановитьПараметр(ОбластьТабЧасть, "АрендаДата", Формат(СтрокаТовары.ДатаНачалаАренды,"ДЛФ=Д"));
				УстановитьПараметр(ОбластьТабЧасть, "Дата", Формат(СтрокаТовары.ДатаВозврата,"ДЛФ=Д"));
				
				СтоимостьАренды	= ?(СокрЛП(СтрокаТовары.СтоимостьАренды) = "", "по договору", СокрЛП(СтрокаТовары.СтоимостьАренды));
				СтоимостьАренды	= СтоимостьАренды + ?(ЗначениеЗаполнено(СтрокаТовары.ЗамененнаяМодель), 
									?(СтоимостьАренды = "", "", Символы.ПС) + "как " + СтрокаТовары.ЗамененнаяМодель, 
									"");
				УстановитьПараметр(ОбластьТабЧасть, "СтоимостьАренды", СтоимостьАренды);
                
                Если Транспортировка <> "" И НомерСтроки = 1 Тогда
    			    УстановитьПараметр(ОбластьТабЧасть, "Транспортировка", Транспортировка);
                ИначеЕсли Транспортировка <> "" Тогда
    			    УстановитьПараметр(ОбластьТабЧасть, "Транспортировка", "");
                Иначе    
    			    УстановитьПараметр(ОбластьТабЧасть, "Транспортировка", ?(ДанныеПечати.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз 
                        ИЛИ ДанныеПечати.ДоставкуВыполняет = Перечисления.ТипыИсполнителейЗаданийНаПеревозку.Самовывоз, "самовывоз", 
                        ?(СокрЛП(СтрокаТовары.Транспортировка) = "", "по договору", СокрЛП(СтрокаТовары.Транспортировка))));
                КонецЕсли;    
				
				ТабличныйДокумент.Вывести(ОбластьТабЧасть);
				
				Если НЕ ЗначениеЗаполнено(КонтактноеЛицо) Тогда
					КонтактноеЛицо	= СтрокаТовары.КонтактноеЛицоЗаявки;
                КонецЕсли;
                
                Если НЕ ЗначениеЗаполнено(ВтороеКонтактноеЛицо) Тогда
				    ВтороеКонтактноеЛицо = СтрокаТовары.ВтороеКонтактноеЛицо;
                КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
					Ответственный	= СтрокаТовары.МенеджерЗаявки;
				КонецЕсли;
			КонецЦикла;
				
			Если НЕ ЗначениеЗаполнено(КонтактноеЛицо) Тогда
				КонтактноеЛицо	= ДанныеПечати.КонтактноеЛицо;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
				Ответственный	= ДанныеПечати.Ответственный;
			КонецЕсли;
			
			Пока НомерСтроки < 2 Цикл
				
				НомерСтроки = НомерСтроки + 1;
				УстановитьПараметр(ОбластьПустаяТабЧасть, "НП", НомерСтроки);
				
				ТабличныйДокумент.Вывести(ОбластьПустаяТабЧасть);
				
			КонецЦикла;
			
			Если ЗначениеЗаполнено(Ответственный) Тогда
				ТекФизЛицо = Ответственный.ФизическоеЛицо;
				Если ТаблицаСтрок.Количество() > 0 Тогда
					Если ЗначениеЗаполнено(ТаблицаСтрок[0].Заявка)
						И ЗначениеЗаполнено(ТаблицаСтрок[0].Заявка.Менеджер) 
						И ЗначениеЗаполнено(ТаблицаСтрок[0].Заявка.Менеджер.ФизическоеЛицо) 
					Тогда
						Ответственный = ТаблицаСтрок[0].Заявка.Менеджер.ФизическоеЛицо;
					Иначе
						Ответственный = ТекФизЛицо;
					КонецЕсли;
				Иначе
					Ответственный = ТекФизЛицо;
				КонецЕсли;	
				ТелефонОтветственного = ПолучитьТелефонИзКонтактнойИнформации(Ответственный);
			Иначе
				Ответственный = "_______________";
				ТелефонОтветственного = "______________";
			КонецЕсли;
			
			Если ДанныеПечати.ПриемкаВозврат = Перечисления.пкПриемкаВозврат.Возврат Тогда
				УстановитьПараметр(ОбластьПодвал, "Паспорт", "1. Паспорт (копия)");
				УстановитьПараметр(ОбластьПодвал, "ВахтенныйЖурнал", "2. Вахтенный журнал");
			КонецЕсли;
			
    		УстановитьПараметр(ОбластьПодвал, "КонтактноеЛицо", ?(ЗначениеЗаполнено(КонтактноеЛицо), КонтактноеЛицо.Наименование, "") + " Тел: " + ПолучитьТелефонИзКонтактнойИнформации(КонтактноеЛицо) 
                + ?(ЗначениеЗаполнено(ВтороеКонтактноеЛицо), ", " + ВтороеКонтактноеЛицо.Наименование + " Тел: " + ПолучитьТелефонИзКонтактнойИнформации(ВтороеКонтактноеЛицо), ""));
			УстановитьПараметр(ОбластьПодвал, "Ответственный", Строка(Ответственный) + " Тел: " + ТелефонОтветственного);
			
			ТабличныйДокумент.Вывести(ОбластьПодвал);
			
			ОбластьКопированияВозврата = ТабличныйДокумент.ПолучитьОбласть(
				НомерСтрокиНачалоВозврата,
				,
				ТабличныйДокумент.ВысотаТаблицы);
//Пятый Экземпляр на другой странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабличныйДокумент.Вывести(ОбластьКопирования);
//Шестой экземпляр на той же странице
			ТабличныйДокумент.Вывести(ОбластьКопированияВозврата);

		Иначе
			
			Макет = ПолучитьМакет(?(ДанныеПечати.ПриемкаВозврат = Перечисления.пкПриемкаВозврат.Приемка, "АктПриемкиА5Москва", "АктВозвратаА5Москва"));
			
			ОбластьШапка			= Макет.ПолучитьОбласть("Шапка");
			ОбластьДопСтрока		= Макет.ПолучитьОбласть("ДопСтрока");
			ОбластьТабЧасть			= Макет.ПолучитьОбласть("ТабЧасть");
			ОбластьПустаяТабЧасть	= Макет.ПолучитьОбласть("ПустаяТабЧасть");
			ОбластьПодвал			= Макет.ПолучитьОбласть("Подвал");
			
			// ШАПКА - ЗАГОЛОВОК
		
			ШтрихкодированиеПечатныхФорм.кнВывестиШтрихкодEANВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьШапка, ДанныеПечати.Ссылка, "Акт приемки/возврата");
			
			//УстановитьПараметр(ОбластьШапка, "Организация", ДанныеПечати.Организация);
			УстановитьПараметр(ОбластьШапка, "Дата", Формат(ДанныеПечати.ДатаОтгрузки, "ДЛФ=Д"));
			УстановитьПараметр(ОбластьШапка, "Время", "");//Формат('00010101', "ДЛФ=T"));
			УстановитьПараметр(ОбластьШапка, "Номер", ?(ЗначениеЗаполнено(ДанныеПечати.Договор),СокрЛП(ДанныеПечати.Договор.Номер) + " от " + Формат(ДанныеПечати.Договор.Дата,"ДЛФ=Д"), ""));
			УстановитьПараметр(ОбластьШапка, "Контрагент", ?(ЗначениеЗаполнено(ДанныеПечати.Партнер) И ТипЗнч(ДанныеПечати.Партнер) = Тип("СправочникСсылка.Партнеры"), ДанныеПечати.Партнер.НаименованиеПолное, ДанныеПечати.Партнер));
			УстановитьПараметр(ОбластьШапка, "Объект", ?(ЗначениеЗаполнено(ДанныеПечати.ОбъектСтроительства), Строка(ДанныеПечати.ОбъектСтроительства), "")	);
			
			ТабличныйДокумент.Вывести(ОбластьШапка);
			
			СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
			
			ТаблицаСтрок = СтрокиТЧ.НайтиСтроки(СтруктураПоиска);
			
			Если ТаблицаСтрок.Количество() = 0 Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонОшибкиСтроки,
					ДанныеПечати.Ссылка,
					НСтр("ru='Нет строк для приемки или возврата'"));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДанныеПечати.Ссылка);
				Продолжить;
				
			КонецЕсли;
			
			//Если ТаблицаСтрок.Количество() > 1 Тогда
			//	УстановитьПараметр(ОбластьДопСтрока, "ДопСтрока", "Подъемники стреловые:");
			//Иначе
			//	УстановитьПараметр(ОбластьДопСтрока, "ДопСтрока", "Подъемник стреловой:");
			//КонецЕсли;
			//ТабличныйДокумент.Вывести(ОбластьДопСтрока);
			
			КонтактноеЛицо	     = "";
			ВтороеКонтактноеЛицо = "";
			Ответственный	     = "";

			НомерСтроки = 0;
			Для Каждого СтрокаТовары Из ТаблицаСтрок Цикл
				
				НомерСтроки = НомерСтроки + 1;
                
				УстановитьПараметр(ОбластьТабЧасть, "Н", НомерСтроки);
				УстановитьПараметр(ОбластьТабЧасть, "Номенклатура", СтрокаТовары.Модель);
				УстановитьПараметр(ОбластьТабЧасть, "СерийныйНомер", ?(ЗначениеЗаполнено(СтрокаТовары.Техника), СокрЛП(СтрокаТовары.Техника.Код), ""));
				УстановитьПараметр(ОбластьТабЧасть, "АрендаДата", Формат(СтрокаТовары.ДатаНачалаАренды,"ДЛФ=Д"));
				УстановитьПараметр(ОбластьТабЧасть, "Дата", Формат(СтрокаТовары.ДатаВозврата,"ДЛФ=Д"));
				
				СтоимостьАренды	= ?(СокрЛП(СтрокаТовары.СтоимостьАренды) = "", "по договору", СокрЛП(СтрокаТовары.СтоимостьАренды));
				СтоимостьАренды	= СтоимостьАренды + ?(ЗначениеЗаполнено(СтрокаТовары.ЗамененнаяМодель), 
									?(СтоимостьАренды = "", "", Символы.ПС) + "как " + СтрокаТовары.ЗамененнаяМодель, 
									"");
				УстановитьПараметр(ОбластьТабЧасть, "СтоимостьАренды", СтоимостьАренды);
				
				УстановитьПараметр(ОбластьТабЧасть, "Транспортировка", ?(ДанныеПечати.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз, "самовывоз", 
                    ?(СокрЛП(СтрокаТовары.Транспортировка) = "", "по договору", СокрЛП(СтрокаТовары.Транспортировка))));
                
                ТабличныйДокумент.Вывести(ОбластьТабЧасть);
				
				Если НЕ ЗначениеЗаполнено(КонтактноеЛицо) Тогда
					КонтактноеЛицо	= СтрокаТовары.КонтактноеЛицоЗаявки;
                КонецЕсли;
                
                Если НЕ ЗначениеЗаполнено(ВтороеКонтактноеЛицо) Тогда
				    ВтороеКонтактноеЛицо = СтрокаТовары.ВтороеКонтактноеЛицо;
                КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
					Ответственный	= СтрокаТовары.МенеджерЗаявки;
				КонецЕсли;
			КонецЦикла;
				
			Если НЕ ЗначениеЗаполнено(КонтактноеЛицо) Тогда
				КонтактноеЛицо	= ДанныеПечати.КонтактноеЛицо;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
				Ответственный	= ДанныеПечати.Ответственный;
			КонецЕсли;
			
			Пока НомерСтроки < 2 Цикл
				
				НомерСтроки = НомерСтроки + 1;
				УстановитьПараметр(ОбластьПустаяТабЧасть, "НП", НомерСтроки);
				
				ТабличныйДокумент.Вывести(ОбластьПустаяТабЧасть);
				
			КонецЦикла;
			
			Если ЗначениеЗаполнено(Ответственный) Тогда
				ТекФизЛицо = Ответственный.ФизическоеЛицо;
				Если ТаблицаСтрок.Количество() > 0 Тогда
					Если ЗначениеЗаполнено(ТаблицаСтрок[0].Заявка)
						И ЗначениеЗаполнено(ТаблицаСтрок[0].Заявка.Менеджер) 
						И ЗначениеЗаполнено(ТаблицаСтрок[0].Заявка.Менеджер.ФизическоеЛицо) 
					Тогда
						Ответственный = ТаблицаСтрок[0].Заявка.Менеджер.ФизическоеЛицо;
					Иначе
						Ответственный = ТекФизЛицо;
					КонецЕсли;
				Иначе
					Ответственный = ТекФизЛицо;
				КонецЕсли;	
				ТелефонОтветственного = ПолучитьТелефонИзКонтактнойИнформации(Ответственный);
			Иначе
				Ответственный = "_______________";
				ТелефонОтветственного = "______________";
			КонецЕсли;
			
			Если ДанныеПечати.ПриемкаВозврат = Перечисления.пкПриемкаВозврат.Возврат Тогда
				УстановитьПараметр(ОбластьПодвал, "Паспорт", "1. Паспорт (копия)");
				УстановитьПараметр(ОбластьПодвал, "ВахтенныйЖурнал", "2. Вахтенный журнал");
			КонецЕсли;
			
    		УстановитьПараметр(ОбластьПодвал, "КонтактноеЛицо", ?(ЗначениеЗаполнено(КонтактноеЛицо), КонтактноеЛицо.Наименование, "") + " Тел: " + ПолучитьТелефонИзКонтактнойИнформации(КонтактноеЛицо) 
                + ?(ЗначениеЗаполнено(ВтороеКонтактноеЛицо), ", " + ВтороеКонтактноеЛицо.Наименование + " Тел: " + ПолучитьТелефонИзКонтактнойИнформации(ВтороеКонтактноеЛицо), ""));
			УстановитьПараметр(ОбластьПодвал, "Ответственный", Строка(Ответственный) + " Тел: " + ТелефонОтветственного);
			
			ТабличныйДокумент.Вывести(ОбластьПодвал);
			
		КонецЕсли;
		
		// Выведем нужное количество экземпляров (при печати комплектов)
		Если КомплектыПечати <> Неопределено
			И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено
			И КомплектПечатиПоСсылке.Экземпляров > 1 Тогда
			
			ОбластьКопирования = ТабличныйДокумент.ПолучитьОбласть(
				НомерСтрокиНачало,
				,
				ТабличныйДокумент.ВысотаТаблицы);
			
			Для Итератор = 2 По КомплектПечатиПоСсылке.Экземпляров Цикл
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьКопирования);
				
			КонецЦикла;
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Печать_Доставка_Доверенность

Функция СформироватьПечатнуюФормуДоставка_Доверенность(СтруктураТипов, ОбъектыПечати, ПараметрыПечати, КомплектыПечати = Неопределено, ПечатьСПодписями = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	
	Если ПечатьСПодписями Тогда
		ТабличныйДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_ДоверенностьСПодписями";	
	Иначе
		ТабличныйДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_Доверенность";
	КонецЕсли;	
		
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
			
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ДанныеДляПечати = ПолучитьДанныеДляПечатнойФормыДоставка_Доверенность(
			СтруктураОбъектов.Значение);
		
		// Сформированный тбаличный документ
		ЗаполнитьТабличныйДокументДоставка_Доверенность(
			ТабличныйДокумент,
			ДанныеДляПечати,
			ОбъектыПечати,
			КомплектыПечати,
			"Доверенность");
			
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыДоставка_Доверенность(МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	пкАктПриемкиВозврата.Ссылка КАК Ссылка,
	|	пкДоставка.НачалоРейсаПлан КАК ДатаОтгрузки,
	|	пкАктПриемкиВозврата.ПриемкаВозврат КАК ПриемкаВозврат,
	|	пкДоставка.Подразделение КАК Подразделение,
	|	пкДоставка.Организация КАК Организация,
	|	пкДоставка.ТранспортноеСредство КАК ТранспортноеСредство,
	|	пкДоставка.Водитель КАК Водитель,
	|	пкДоставка.Перевозчик КАК Перевозчик,
	|	ПОДСТРОКА(пкАктПриемкиВозврата.АдресДоставки, 1, 150) КАК АдресДоставки,
	|	пкАктПриемкиВозврата.Партнер КАК Партнер,
	|	пкАктПриемкиВозврата.Договор КАК Договор,
	|	пкАктПриемкиВозврата.ОбъектСтроительства КАК ОбъектСтроительства,
	|	пкАктПриемкиВозврата.КонтактноеЛицо КАК КонтактноеЛицо,
	|	пкАктПриемкиВозврата.Ответственный КАК Ответственный,
	|	пкДоставка.ДатаНачалаДействияДовернности,
	|	пкДоставка.ДатаОкончанияДействияДовернности,
	|	пкДоставка.Д_Водитель,
	|	пкДоставка.Д_Документ,
	|	пкДоставка.Д_ВодительПодпись,
	|	пкДоставка.Д_Водитель КАК Д_Водитель1,
	|	пкДоставка.Д_Документ КАК Д_Документ1,
	|	пкДоставка.Д_ВодительПодпись КАК Д_ВодительПодпись1
	|ИЗ
	|	Документ.пкАктПриемкиВозврата КАК пкАктПриемкиВозврата
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкДоставка КАК пкДоставка
	|		ПО пкАктПриемкиВозврата.Доставка = пкДоставка.Ссылка
	|			И (пкАктПриемкиВозврата.Ссылка В (&МассивОбъектов))
	|ГДЕ
	|	пкАктПриемкиВозврата.Ссылка В(&МассивОбъектов)
	|	И НЕ пкАктПриемкиВозврата.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	пкАктПриемкиВозврата.Ссылка,
	|	пкДоставка.НачалоРейсаПлан,
	|	пкАктПриемкиВозврата.ПриемкаВозврат,
	|	пкДоставка.Подразделение,
	|	пкДоставка.Организация,
	|	пкДоставка.ТранспортноеСредство,
	|	пкДоставка.Водитель,
	|	пкДоставка.Перевозчик,
	|	ПОДСТРОКА(пкАктПриемкиВозврата.АдресДоставки, 1, 150),
	|	пкАктПриемкиВозврата.Партнер,
	|	пкАктПриемкиВозврата.Договор,
	|	пкАктПриемкиВозврата.ОбъектСтроительства,
	|	пкАктПриемкиВозврата.КонтактноеЛицо,
	|	пкАктПриемкиВозврата.Ответственный,
	|	пкДоставка.ДатаОкончанияДействияДовернности,
	|	пкДоставка.ДатаНачалаДействияДовернности,
	|	пкДоставка.Д_ВодительПодпись,
	|	пкДоставка.Д_Водитель,
	|	пкДоставка.Д_Документ,
	|	пкДоставка.Д_Водитель,
	|	пкДоставка.Д_Документ,
	|	пкДоставка.Д_ВодительПодпись
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТранспортноеСредство,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка КАК Ссылка,
	|	пкЗаданиеНаПеревозку.ДатаОтгрузки КАК ДатаОтгрузки,
	|	пкАктПриемкиВозврата.ПриемкаВозврат КАК ПриемкаВозврат,
	|	ПОДСТРОКА(пкАктПриемкиВозврата.АдресДоставки, 1, 150) КАК АдресДоставки,
	|	пкАктПриемкиВозврата.Партнер КАК Партнер,
	|	пкЗаявкаНаАрендуТехники.Ссылка КАК Заявка,
	|	пкЗаявкаНаАрендуТехники.Договор КАК Договор,
	|	пкАктПриемкиВозврата.ОбъектСтроительства КАК ОбъектСтроительства,
	|	пкАктПриемкиВозврата.КонтактноеЛицо КАК КонтактноеЛицо,
	|	пкЗаданиеНаПеревозку.Модель КАК Модель,
	|	пкЗаданиеНаПеревозку.Техника КАК Техника,
	|	ВЫБОР
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
	|			ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
	|			ТОГДА """"
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА """"
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
	|			ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
	|	КОНЕЦ КАК ДатаНачалаАренды,
	|	ВЫБОР
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
	|			ТОГДА пкЗаявкаНаАрендуТехникиТовары.ДатаВозврата
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
	|			ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА пкЗаявкаНаАрендуТехникиТовары.ДатаВозврата
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
	|			ТОГДА """"
	|	КОНЕЦ КАК ДатаВозврата,
	|	пкАктПриемкиВозврата.ТочкаМаршрута КАК ТочкаМаршрута,
	|	пкАктПриемкиВозврата.НомерХодки КАК НомерХодки,
	|	КОЛИЧЕСТВО(пкЗаданиеНаПеревозку.Ссылка) КАК Количество
	|ИЗ
	|	Документ.пкАктПриемкиВозврата.ЗаданияНаПеревозку КАК пкАктПриемкиВозвратаЗаданияНаПеревозку
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкАктПриемкиВозврата КАК пкАктПриемкиВозврата
	|		ПО пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка = пкАктПриемкиВозврата.Ссылка
	|			И (пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка В (&МассивОбъектов))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкЗаданиеНаПеревозку КАК пкЗаданиеНаПеревозку
	|		ПО пкАктПриемкиВозвратаЗаданияНаПеревозку.ЗаданиеНаПеревозку = пкЗаданиеНаПеревозку.Ссылка
	|			И (пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка В (&МассивОбъектов))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкЗаявкаНаАрендуТехники.Товары КАК пкЗаявкаНаАрендуТехникиТовары
	|		ПО пкАктПриемкиВозвратаЗаданияНаПеревозку.ЗаявкаНаАрендуТехники = пкЗаявкаНаАрендуТехникиТовары.Ссылка
	|			И (пкЗаданиеНаПеревозку.Модель = пкЗаявкаНаАрендуТехникиТовары.Номенклатура)
	|			И (пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка В (&МассивОбъектов))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкЗаявкаНаАрендуТехники КАК пкЗаявкаНаАрендуТехники
	|		ПО пкАктПриемкиВозвратаЗаданияНаПеревозку.ЗаявкаНаАрендуТехники = пкЗаявкаНаАрендуТехники.Ссылка
	|			И (пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка В (&МассивОбъектов))
	|ГДЕ
	|	пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка В(&МассивОбъектов)
	|	И НЕ пкАктПриемкиВозврата.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка,
	|	пкЗаданиеНаПеревозку.ДатаОтгрузки,
	|	пкАктПриемкиВозврата.ПриемкаВозврат,
	|	ПОДСТРОКА(пкАктПриемкиВозврата.АдресДоставки, 1, 150),
	|	пкАктПриемкиВозврата.Партнер,
	|	пкЗаявкаНаАрендуТехники.Ссылка,
	|	пкЗаявкаНаАрендуТехники.Договор,
	|	пкАктПриемкиВозврата.ОбъектСтроительства,
	|	пкАктПриемкиВозврата.КонтактноеЛицо,
	|	пкЗаданиеНаПеревозку.Модель,
	|	пкЗаданиеНаПеревозку.Техника,
	|	ВЫБОР
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
	|			ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
	|			ТОГДА """"
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА """"
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
	|			ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
	|			ТОГДА пкЗаявкаНаАрендуТехникиТовары.ДатаВозврата
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
	|			ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА пкЗаявкаНаАрендуТехникиТовары.ДатаВозврата
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
	|			ТОГДА """"
	|	КОНЕЦ,
	|	пкАктПриемкиВозврата.ТочкаМаршрута,
	|	пкАктПриемкиВозврата.НомерХодки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерХодки,
	|	ТочкаМаршрута";
	
	МассивАктов = Новый Массив;
	Для Каждого текСтрока Из МассивОбъектов Цикл
		Если ТипЗнч(текСтрока) = Тип("ДокументСсылка.пкАктПриемкиВозврата") Тогда
			МассивАктов.Добавить(текСтрока);
		КонецЕсли;
	КонецЦикла;
	
	ЗапросД = Новый Запрос;
	ЗапросД.Текст = 
	"ВЫБРАТЬ
	|	пкАктПриемкиВозврата.Ссылка
	|ИЗ
	|	Документ.пкАктПриемкиВозврата КАК пкАктПриемкиВозврата
	|ГДЕ
	|	пкАктПриемкиВозврата.Доставка В(&МассивОбъектов)";
	ЗапросД.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	РезЗапроса = ЗапросД.Выполнить().Выбрать();
	Пока РезЗапроса.Следующий() Цикл
		МассивАктов.Добавить(РезЗапроса.Ссылка);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивАктов);
	Запрос.УстановитьПараметр("ПредставлениеДокумента",	НСтр("ru = 'Доверенность'"));
	Запрос.УстановитьПараметр("ПредставлениеВОшибке",	НСтр("ru = 'Доверенность'"));
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке", ПакетРезультатовЗапроса[0]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти", ПакетРезультатовЗапроса[1]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументДоставка_Доверенность(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, КомплектыПечати, ИмяМакета)
	
	ДанныеПечати		= ДанныеДляПечати.РезультатПоШапке.Выбрать();
	СтрокиТЧ			= ДанныеДляПечати.РезультатПоТабличнойЧасти.Выгрузить();
	
	ПечатьСПодписями = НЕ (ТабличныйДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_Доверенность");
	
	ШаблонОшибкиСтроки	= "";
	
	ПервыйДокумент		= Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Если ПечатьСПодписями Тогда	
			Макет = ПолучитьМакет("ДоверенностьСПодписями");
		Иначе
			Макет = ПолучитьМакет("Доверенность");		
		КонецЕсли;
		
		
		// Для печати комплектов
		Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено Тогда
			
			КомплектПечатиПоСсылке = КомплектыПечати.Найти(ДанныеПечати.Ссылка, "Ссылка");
			
			Если КомплектПечатиПоСсылке = Неопределено Тогда
				КомплектПечатиПоСсылке = КомплектыПечати[0];
			КонецЕсли;
			
			Если КомплектПечатиПоСсылке.Экземпляров = 0 Тогда
				Продолжить
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
#Область ОбластиМакета
		
		ОбластьШапка			= Макет.ПолучитьОбласть("Шапка");
		ОбластьСтрока			= Макет.ПолучитьОбласть("Строка");
		ОбластьВеземОбратно		= Макет.ПолучитьОбласть("ВеземОбратно");
		ОбластьВеземТуда		= Макет.ПолучитьОбласть("ВеземТуда");
		ОбластьПодвал			= Макет.ПолучитьОбласть("Подвал");
		
#КонецОбласти
		
#Область ВыводШапки
		
		// ШАПКА - ЗАГОЛОВОК
		
		Регион = ДанныеПечати.Подразделение;
		ДолжностьРуководитель	=  "";
		ФИОРуководитель			=  "";
		НомерТелефона			=  "";
			
		Если Регион.Наименование = "Санкт-Петербург" Тогда
			ДолжностьРуководитель =  "Директор по развитию бизнеса";
			ФИОРуководитель =  "Попель М.В.";
			НомерТелефона     =  "(812) 320-82-55";
		ИначеЕсли Регион.Наименование = "Москва" Тогда
			ДолжностьРуководитель =  "Директор филиала ЗАО ""Автокран Аренда"" в городе Москве и Московской области";
			ФИОРуководитель =  "Сахиллиоглу С.";
			НомерТелефона     =  "+7 495 926 18 94";
		ИначеЕсли Регион.Наименование = "Екатеринбург" Тогда
			ДолжностьРуководитель =  "Директор ОП ""Екатеринбург""";
			ФИОРуководитель =  "Елаев А.Б.";
			НомерТелефона     =  "+7 343 345 72 29";
		ИначеЕсли Регион.Наименование = "Нижний Новгород" Тогда
			ДолжностьРуководитель =  "Директор ОП ""Нижний Новгород""";
			ФИОРуководитель =  "Понамарев Е.С.";
			НомерТелефона     =  "(831) 437 17 58";
		ИначеЕсли Регион.Наименование = "Новосибирск" Тогда
			ДолжностьРуководитель =  "Директор ОП ""Новосибирск""";
			ФИОРуководитель =  "Пискарев А.Ю.";
			НомерТелефона     =  "+7 383 233 59 00";
		ИначеЕсли Регион.Наименование = "Ростов-на-Дону" Тогда
			ДолжностьРуководитель =  "Директор ОП ""Ростов-на-Дону""";
			ФИОРуководитель =  "Гаврилов М.В.";
			НомерТелефона     =  "+7 921 961 30 34";
		ИначеЕсли Регион.Наименование = "Тольятти" Тогда
			ДолжностьРуководитель =  "Директор ОП ""Тольятти""";
			ФИОРуководитель =  "Баранов О.Е.";
			НомерТелефона     =  "+7 986 955 00 39";	
		КонецЕсли;
	
		УстановитьПараметр(ОбластьШапка, "Регион", Регион.Наименование);
		УстановитьПараметр(ОбластьШапка, "Дата", Формат(ДанныеПечати.ДатаОтгрузки, "ДЛФ=Д"));
		УстановитьПараметр(ОбластьШапка, "ВодительШапка", ?(ЗначениеЗаполнено(ДанныеПечати.Д_Водитель), ДанныеПечати.Д_Водитель, ДанныеПечати.Водитель));
		УстановитьПараметр(ОбластьШапка, "Документ", ДанныеПечати.Д_Документ);
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
#КонецОбласти

		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		
		ТаблицаСтрок = СтрокиТЧ.НайтиСтроки(СтруктураПоиска);
		
		Если ТаблицаСтрок.Количество() = 0 Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибкиСтроки,
				ДанныеПечати.Ссылка,
				НСтр("ru='Нет строк для доверенности'"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДанныеПечати.Ссылка);
			Продолжить;
			
		КонецЕсли;
		
#Область ВыводСтрок
		
		НомерСтроки = 0;
		Для Каждого СтрокаТовары Из ТаблицаСтрок Цикл
			
			НомерСтроки = НомерСтроки + 1;
			СтрокаТехники = Строка(НомерСтроки) + "." + " Площадки для подъёма людей " + ?(ЗначениеЗаполнено(СтрокаТовары.Техника), СтрокаТовары.Техника.Наименование, СтрокаТовары.Модель.Наименование) + " - 1 ед.";
			
			УстановитьПараметр(ОбластьСтрока, "СтрокаТехники", СтрокаТехники);
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			
		КонецЦикла;
		
#КонецОбласти
		
#Область ВыводВезем
		
		Если ДанныеПечати.ПриемкаВозврат = Перечисления.пкПриемкаВозврат.Возврат Тогда
			
			УстановитьПараметр(ОбластьВеземОбратно, "АдресТерритории", ДанныеПечати.АдресДоставки);
			УстановитьПараметр(ОбластьВеземОбратно, "АдресПодразделения", ДанныеПечати.Подразделение.пкАдресБазы);
			
			ТабличныйДокумент.Вывести(ОбластьВеземОбратно);
			
		Иначе	
			
			УстановитьПараметр(ОбластьВеземТуда, "АдресТерритории", ДанныеПечати.АдресДоставки);
			УстановитьПараметр(ОбластьВеземТуда, "АдресПодразделения", ДанныеПечати.Подразделение.пкАдресБазы);
			
			ТабличныйДокумент.Вывести(ОбластьВеземТуда);
			
		КонецЕсли;
		
#КонецОбласти
		
#Область ВыводПодвала

Если ПечатьСПодписями Тогда
	
	ОбластьПодвалБезПодписей = Макет.ПолучитьОбласть("ПодвалБезПодписей");
	
	УстановитьПараметр(ОбластьПодвалБезПодписей, "МодельТС", Лев(ДанныеПечати.ТранспортноеСредство, Найти(ДанныеПечати.ТранспортноеСредство, ";") - 1));
	УстановитьПараметр(ОбластьПодвалБезПодписей, "НомерТС", Прав(ДанныеПечати.ТранспортноеСредство, СтрДлина(ДанныеПечати.ТранспортноеСредство) - Найти(ДанныеПечати.ТранспортноеСредство, ";")));
	УстановитьПараметр(ОбластьПодвалБезПодписей, "ДоверенностьС", Формат(ДанныеПечати.ДатаНачалаДействияДовернности, "ДФ=dd.MM.yy"));
	УстановитьПараметр(ОбластьПодвалБезПодписей, "ДоверенностьПо", Формат(ДанныеПечати.ДатаОкончанияДействияДовернности, "ДФ=dd.MM.yy"));
	УстановитьПараметр(ОбластьПодвалБезПодписей, "ВодительПодпись", ?(ЗначениеЗаполнено(ДанныеПечати.Д_ВодительПодпись), ДанныеПечати.Д_ВодительПодпись, ДанныеПечати.Водитель));

	ТабличныйДокумент.Вывести(ОбластьПодвалБезПодписей);
	
	ОбластьПодписи = пкОбщегоНазначенияСервер.ПолучитьМакетПодписи(ДанныеПечати.ДатаОтгрузки, ДанныеПечати.Подразделение, Перечисления.пкВидыПечатныхФормДляШаблоновПодписей.Доставка, Ложь);
	
	Если ОбластьПодписи <> Неопределено Тогда
		// Получить расширение файла.
		РасширениеВременногоФайла = ".mxl";
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(РасширениеВременногоФайла);
		
		Макет = ОбластьПодписи.Получить();
		
		// Сохранить файл на диске
		Попытка
			Макет.Записать(ИмяВременногоФайла);
		Исключение
			Сообщить("Запись НЕ прошла " + ИмяВременногоФайла);
		КонецПопытки;
		
		ОбластьПодвал = Новый ТабличныйДокумент;
		ОбластьПодвал.Прочитать(ИмяВременногоФайла);
		УдалитьФайлы(ИмяВременногоФайла);	
	КонецЕсли;
	
	Если ОбластьПодвал <> Неопределено тогда
		ТабличныйДокумент.Вывести(ОбластьПодвал);
	Иначе
		Сообщить("Не удалось определить макет доставки.", СтатусСообщения.Важное);
	КонецЕсли;
Иначе
	УстановитьПараметр(ОбластьПодвал, "МодельТС", Лев(ДанныеПечати.ТранспортноеСредство, Найти(ДанныеПечати.ТранспортноеСредство, ";") - 1));
	УстановитьПараметр(ОбластьПодвал, "НомерТС", Прав(ДанныеПечати.ТранспортноеСредство, СтрДлина(ДанныеПечати.ТранспортноеСредство) - Найти(ДанныеПечати.ТранспортноеСредство, ";")));
	УстановитьПараметр(ОбластьПодвал, "ДоверенностьС", Формат(ДанныеПечати.ДатаНачалаДействияДовернности, "ДФ=dd.MM.yy"));
	УстановитьПараметр(ОбластьПодвал, "ДоверенностьПо", Формат(ДанныеПечати.ДатаОкончанияДействияДовернности, "ДФ=dd.MM.yy"));
	УстановитьПараметр(ОбластьПодвал, "ВодительПодпись", ?(ЗначениеЗаполнено(ДанныеПечати.Д_ВодительПодпись), ДанныеПечати.Д_ВодительПодпись, ДанныеПечати.Водитель));
	УстановитьПараметр(ОбластьПодвал, "ДолжностьРуководитель", ДолжностьРуководитель);
	УстановитьПараметр(ОбластьПодвал, "ФИОРуководитель", ФИОРуководитель);
	
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
КонецЕсли;
#КонецОбласти
		
		// Выведем нужное количество экземпляров (при печати комплектов)
		Если КомплектыПечати <> Неопределено
			И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено
			И КомплектПечатиПоСсылке.Экземпляров > 1 Тогда
			
			ОбластьКопирования = ТабличныйДокумент.ПолучитьОбласть(
				НомерСтрокиНачало,
				,
				ТабличныйДокумент.ВысотаТаблицы);
			
			Для Итератор = 2 По КомплектПечатиПоСсылке.Экземпляров Цикл
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьКопирования);
				
			КонецЦикла;
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Печать_Доставка_ТТН

Функция СформироватьПечатнуюФормуДоставка_ТТН(СтруктураТипов, ОбъектыПечати, ПараметрыПечати, КомплектыПечати = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_ТТН";
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
			
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ДанныеДляПечати = ПолучитьДанныеДляПечатнойФормыДоставка_ТТН(
			СтруктураОбъектов.Значение);
		
		// Сформированный тбаличный документ
		ЗаполнитьТабличныйДокументДоставка_ТТН(
			ТабличныйДокумент,
			ДанныеДляПечати,
			ОбъектыПечати,
			КомплектыПечати,
			"ТТН");
			
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыДоставка_ТТН(МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	пкАктПриемкиВозврата.Ссылка КАК Ссылка,
	|	пкДоставка.НачалоРейсаПлан КАК Дата,
	|	пкАктПриемкиВозврата.Дата КАК ДатаОтгрузки,
	|	пкАктПриемкиВозврата.ПриемкаВозврат КАК ПриемкаВозврат,
	|	пкДоставка.Подразделение КАК Подразделение,
	|	пкДоставка.Организация КАК Организация,
	|	пкДоставка.ТранспортноеСредство КАК ТранспортноеСредство,
	|	пкДоставка.Водитель КАК Водитель,
	|	пкДоставка.Перевозчик КАК Перевозчик,
	|	ПОДСТРОКА(пкАктПриемкиВозврата.АдресДоставки, 1, 150) КАК АдресДоставки,
	|	пкАктПриемкиВозврата.Партнер КАК Партнер,
	|	пкАктПриемкиВозврата.Договор КАК Договор,
	|	пкАктПриемкиВозврата.ОбъектСтроительства КАК ОбъектСтроительства,
	|	пкАктПриемкиВозврата.КонтактноеЛицо КАК КонтактноеЛицо,
	|	пкАктПриемкиВозврата.Ответственный КАК Ответственный,
	|	пкДоставка.ДатаНачалаДействияДовернности КАК ДатаНачалаДействияДовернности,
	|	пкДоставка.ДатаОкончанияДействияДовернности КАК ДатаОкончанияДействияДовернности,
	|	пкДоставка.СпособДоставки КАК СпособДоставки,
	|	пкДоставка.ДоставкуВыполняет КАК ДоставкуВыполняет
	|ИЗ
	|	Документ.пкАктПриемкиВозврата КАК пкАктПриемкиВозврата
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкДоставка КАК пкДоставка
	|		ПО пкАктПриемкиВозврата.Доставка = пкДоставка.Ссылка
	|			И (пкАктПриемкиВозврата.Ссылка В (&МассивОбъектов))
	|ГДЕ
	|	пкАктПриемкиВозврата.Ссылка В(&МассивОбъектов)
	|	И НЕ пкАктПриемкиВозврата.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	пкАктПриемкиВозврата.Ссылка,
	|	пкДоставка.НачалоРейсаПлан,
	|	пкАктПриемкиВозврата.ПриемкаВозврат,
	|	пкДоставка.Подразделение,
	|	пкДоставка.Организация,
	|	пкДоставка.ТранспортноеСредство,
	|	пкДоставка.Водитель,
	|	пкДоставка.Перевозчик,
	|	ПОДСТРОКА(пкАктПриемкиВозврата.АдресДоставки, 1, 150),
	|	пкАктПриемкиВозврата.Партнер,
	|	пкАктПриемкиВозврата.Договор,
	|	пкАктПриемкиВозврата.ОбъектСтроительства,
	|	пкАктПриемкиВозврата.КонтактноеЛицо,
	|	пкАктПриемкиВозврата.Ответственный,
	|	пкДоставка.ДатаОкончанияДействияДовернности,
	|	пкДоставка.ДатаНачалаДействияДовернности,
	|	пкАктПриемкиВозврата.Дата,
	|	пкДоставка.Ссылка,
	|	пкДоставка.СпособДоставки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТранспортноеСредство,
	|	ДатаОтгрузки,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка КАК Ссылка,
	|	пкЗаданиеНаПеревозку.ДатаОтгрузки КАК ДатаОтгрузки,
	|	пкАктПриемкиВозврата.ПриемкаВозврат КАК ПриемкаВозврат,
	|	ПОДСТРОКА(пкАктПриемкиВозврата.АдресДоставки, 1, 150) КАК АдресДоставки,
	|	пкАктПриемкиВозврата.Партнер КАК Партнер,
	|	пкЗаявкаНаАрендуТехники.Ссылка КАК Заявка,
	|	пкЗаявкаНаАрендуТехники.Договор КАК Договор,
	|	пкАктПриемкиВозврата.ОбъектСтроительства КАК ОбъектСтроительства,
	|	пкАктПриемкиВозврата.КонтактноеЛицо КАК КонтактноеЛицо,
	|	пкЗаданиеНаПеревозку.Модель КАК Модель,
	|	пкЗаданиеНаПеревозку.Техника КАК Техника,
	|	ВЫБОР
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
	|			ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
	|			ТОГДА """"
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА """"
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
	|			ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
	|	КОНЕЦ КАК ДатаНачалаАренды,
	|	ВЫБОР
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
	|			ТОГДА пкЗаявкаНаАрендуТехникиТовары.ДатаВозврата
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
	|			ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА пкЗаявкаНаАрендуТехникиТовары.ДатаВозврата
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
	|			ТОГДА """"
	|	КОНЕЦ КАК ДатаВозврата,
	|	пкАктПриемкиВозврата.ТочкаМаршрута КАК ТочкаМаршрута,
	|	пкЗаданиеНаПеревозку.Ссылка КАК Количество,
	|	пкАктПриемкиВозврата.НомерХодки КАК НомерХодки
	|ИЗ
	|	Документ.пкАктПриемкиВозврата.ЗаданияНаПеревозку КАК пкАктПриемкиВозвратаЗаданияНаПеревозку
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкАктПриемкиВозврата КАК пкАктПриемкиВозврата
	|		ПО пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка = пкАктПриемкиВозврата.Ссылка
	|			И (пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка В (&МассивОбъектов))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкЗаданиеНаПеревозку КАК пкЗаданиеНаПеревозку
	|		ПО пкАктПриемкиВозвратаЗаданияНаПеревозку.ЗаданиеНаПеревозку = пкЗаданиеНаПеревозку.Ссылка
	|			И (пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка В (&МассивОбъектов))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкЗаявкаНаАрендуТехники.Товары КАК пкЗаявкаНаАрендуТехникиТовары
	|		ПО пкАктПриемкиВозвратаЗаданияНаПеревозку.ЗаявкаНаАрендуТехники = пкЗаявкаНаАрендуТехникиТовары.Ссылка
	|			И (пкЗаданиеНаПеревозку.Модель = пкЗаявкаНаАрендуТехникиТовары.Номенклатура)
	|			И (пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка В (&МассивОбъектов))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкЗаявкаНаАрендуТехники КАК пкЗаявкаНаАрендуТехники
	|		ПО пкАктПриемкиВозвратаЗаданияНаПеревозку.ЗаявкаНаАрендуТехники = пкЗаявкаНаАрендуТехники.Ссылка
	|			И (пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка В (&МассивОбъектов))
	|ГДЕ
	|	пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка В(&МассивОбъектов)
	|	И НЕ пкАктПриемкиВозврата.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка,
	|	пкЗаданиеНаПеревозку.ДатаОтгрузки,
	|	пкАктПриемкиВозврата.ПриемкаВозврат,
	|	ПОДСТРОКА(пкАктПриемкиВозврата.АдресДоставки, 1, 150),
	|	пкАктПриемкиВозврата.Партнер,
	|	пкЗаявкаНаАрендуТехники.Ссылка,
	|	пкЗаявкаНаАрендуТехники.Договор,
	|	пкАктПриемкиВозврата.ОбъектСтроительства,
	|	пкАктПриемкиВозврата.КонтактноеЛицо,
	|	пкЗаданиеНаПеревозку.Модель,
	|	пкЗаданиеНаПеревозку.Техника,
	|	ВЫБОР
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
	|			ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
	|			ТОГДА """"
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА """"
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
	|			ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
	|			ТОГДА пкЗаявкаНаАрендуТехникиТовары.ДатаВозврата
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
	|			ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА пкЗаданиеНаПеревозку.ДатаОтгрузки
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И ЕСТЬNULL(пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА пкЗаявкаНаАрендуТехникиТовары.ДатаВозврата
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
	|			ТОГДА """"
	|	КОНЕЦ,
	|	пкАктПриемкиВозврата.ТочкаМаршрута,
	|	пкАктПриемкиВозврата.НомерХодки,
	|	пкЗаданиеНаПеревозку.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерХодки,
	|	ТочкаМаршрута";
	
	МассивАктов = Новый Массив;
	Для Каждого текСтрока Из МассивОбъектов Цикл
		Если ТипЗнч(текСтрока) = Тип("ДокументСсылка.пкАктПриемкиВозврата") Тогда
			МассивАктов.Добавить(текСтрока);
		КонецЕсли;
	КонецЦикла;
	
	ЗапросД = Новый Запрос;
	ЗапросД.Текст = 
	"ВЫБРАТЬ
	|	пкАктПриемкиВозврата.Ссылка
	|ИЗ
	|	Документ.пкАктПриемкиВозврата КАК пкАктПриемкиВозврата
	|ГДЕ
	|	пкАктПриемкиВозврата.Доставка В(&МассивОбъектов)";
	ЗапросД.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	РезЗапроса = ЗапросД.Выполнить().Выбрать();
	Пока РезЗапроса.Следующий() Цикл
		МассивАктов.Добавить(РезЗапроса.Ссылка);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивАктов);
	Запрос.УстановитьПараметр("ПредставлениеДокумента",	НСтр("ru = 'Доверенность'"));
	Запрос.УстановитьПараметр("ПредставлениеВОшибке",	НСтр("ru = 'Доверенность'"));
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке", ПакетРезультатовЗапроса[0]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти", ПакетРезультатовЗапроса[1]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументДоставка_ТТН(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, КомплектыПечати, ИмяМакета)
	
	ДанныеПечати		= ДанныеДляПечати.РезультатПоШапке.Выбрать();
	СтрокиТЧ			= ДанныеДляПечати.РезультатПоТабличнойЧасти.Выгрузить();
	
	ШаблонОшибкиСтроки	= "";
	
	ПервыйДокумент		= Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Макет = ПолучитьМакет("ТТНПриложение4");
		
		// Для печати комплектов
		Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено Тогда
			
			КомплектПечатиПоСсылке = КомплектыПечати.Найти(ДанныеПечати.Ссылка, "Ссылка");
			
			Если КомплектПечатиПоСсылке = Неопределено Тогда
				КомплектПечатиПоСсылке = КомплектыПечати[0];
			КонецЕсли;
			
			Если КомплектПечатиПоСсылке.Экземпляров = 0 Тогда
				Продолжить
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
#Область ОбластиМакета
		
		ОбластьШапка			= Макет.ПолучитьОбласть("Шапка");
		
#КонецОбласти
		
#Область ВыводШапки

		АдресОрганизации_Раздел_7 = "";
		Если ЗначениеЗаполнено(ДанныеПечати.Подразделение) Тогда
			АдресОрганизации_Раздел_7 = СокрЛП(ДанныеПечати.Подразделение.пкАдресБазы);
		КонецЕсли;
		
		ОрганизацияКонтакты	= ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата); 
		ОрганизацияИнфо			= ОрганизацияКонтакты["ПолноеНаименование"] + ", " + ОрганизацияКонтакты["ИНН"] + ", " + ОрганизацияКонтакты["Телефоны"] + ", " + 
									"р/с " + ОрганизацияКонтакты["НомерСчета"] + ", " + "в " + ОрганизацияКонтакты["Банк"] + ", " + 
									"БИК " + ОрганизацияКонтакты["БИК"] + ", " + 
									"корр/с " + ОрганизацияКонтакты["КоррСчет"];
		ОрганизацияИнфоСокрл	= ОрганизацияКонтакты["Представление"] + ", " + ОрганизацияКонтакты.ФактическийАдрес + ", " + ОрганизацияКонтакты["Телефоны"];
		Если НЕ ЗначениеЗаполнено(АдресОрганизации_Раздел_7) Тогда
			АдресОрганизации_Раздел_7 = ОрганизацияКонтакты.ФактическийАдрес;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеПечати.Партнер) Тогда
			КонтрагентКонтакты	= ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ПолучитьКонтрагентаПартнера(ДанныеПечати.Партнер), ДанныеПечати.Дата); 
			КонтрагентИнфо		= КонтрагентКонтакты["ПолноеНаименование"] + ", " + КонтрагентКонтакты["ИНН"] + ", " + КонтрагентКонтакты["Телефоны"] + ", " + 
										"р/с " + КонтрагентКонтакты["НомерСчета"] + ", " + "в "+КонтрагентКонтакты["Банк"] + ", " + 
										"БИК " + КонтрагентКонтакты["БИК"] + ", " + 
										"корр/с " + КонтрагентКонтакты["КоррСчет"];
			КонтрагентИнфоСокрл	= КонтрагентКонтакты["ПолноеНаименование"] + ", " + КонтрагентКонтакты.ФактическийАдрес + ", " + КонтрагентКонтакты["Телефоны"];
		Иначе//Везем себе
			КонтрагентИнфо			= ОрганизацияКонтакты["ПолноеНаименование"] + ", " + ОрганизацияКонтакты["ИНН"] + ", " + ОрганизацияКонтакты["Телефоны"] + ", " + 
										"р/с " + ОрганизацияКонтакты["НомерСчета"] + ", " + "в " + ОрганизацияКонтакты["Банк"] + ", " + 
										"БИК " + ОрганизацияКонтакты["БИК"] + ", " + 
										"корр/с " + ОрганизацияКонтакты["КоррСчет"];
			КонтрагентИнфоСокрл	= ОрганизацияКонтакты["Представление"] + ", " + ДанныеПечати.АдресДоставки + ", " + ОрганизацияКонтакты["Телефоны"];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеПечати.Перевозчик) Тогда
			Если ТипЗнч(ДанныеПечати.Перевозчик) = Тип("СправочникСсылка.Партнеры") ИЛИ ТипЗнч(ДанныеПечати.Перевозчик) = Тип("СправочникСсылка.Контрагенты") Тогда
				ПеревозчикКонтакты =  ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ПолучитьКонтрагентаПартнера(ДанныеПечати.Перевозчик), ДанныеПечати.Дата);
				ПеревозчикИнфо      = ПеревозчикКонтакты["Представление"]+", "+ПеревозчикКонтакты.ФактическийАдрес+", "+ПеревозчикКонтакты["Телефоны"];
			Иначе
				ПеревозчикИнфо      = ДанныеПечати.Перевозчик;
			КонецЕсли;
		Иначе
			ПеревозчикИнфо      = "";
		КонецЕсли;
		
	//++ Рарус Лимаренко 20.11.2017		
	Если ЗначениеЗаполнено(ДанныеПечати.СпособДоставки) Тогда
		Если ДанныеПечати.СпособДоставки <> Перечисления.СпособыДоставки.Самовывоз Тогда
		
			Если ЗначениеЗаполнено(ДанныеПечати.Перевозчик) Тогда
				УстановитьПараметр(ОбластьШапка, "Пункт10_2", ПеревозчикИнфо);
			
			Иначе	
				УстановитьПараметр(ОбластьШапка, "Пункт10_2", ОрганизацияИнфоСокрл);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//-- Рарус Лимаренко 20.11.2017
	//++ Рарус Лимаренко 14.12.2018
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	пкНастройкиПечатиЛогистики.Подразделение КАК Подразделение,
		|	пкНастройкиПечатиЛогистики.ТекстСопроводительныеДокументы КАК ТекстСопроводительныеДокументы,
		|	пкНастройкиПечатиЛогистики.ПечатьАвтораДокумента КАК ПечатьАвтораДокумента
		|ИЗ
		|	РегистрСведений.пкНастройкиПечатиЛогистики КАК пкНастройкиПечатиЛогистики
		|ГДЕ
		|	пкНастройкиПечатиЛогистики.Подразделение = &Подразделение";
		
		Запрос.УстановитьПараметр("Подразделение", ДанныеПечати.Подразделение);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			УстановитьПараметр(ОбластьШапка, "Пункт4_1","Доверенность на водителя"); 
			//?(ДанныеПечати.ДоставкуВыполняет = Перечисления.ТипыИсполнителейЗаданийНаПеревозку.НашаТранспортнаяСлужба,"","Доверенность на водителя"));
			Если (НЕ ДанныеПечати.Водитель = Неопределено) И ЗначениеЗаполнено(ДанныеПечати.Водитель) Тогда
				УстановитьПараметр(ОбластьШапка, "Пункт1_3", ?(ТипЗнч(ДанныеПечати.Водитель) = Тип("Строка"), ВРЕГ(ДанныеПечати.Водитель),
				Строка(ДанныеПечати.Водитель) + " (" + ПолучитьТелефонИзКонтактнойИнформации(ДанныеПечати.Водитель) + ")")); 
			Иначе
				УстановитьПараметр(ОбластьШапка, "Пункт1_3", "");
			КонецЕсли;
		Иначе	
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			ВыборкаДетальныеЗаписи.Следующий();
			УстановитьПараметр(ОбластьШапка, "Пункт4_1",ВыборкаДетальныеЗаписи.ТекстСопроводительныеДокументы);
			Если ВыборкаДетальныеЗаписи.ПечатьАвтораДокумента И ДанныеПечати.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиента Тогда
				УстановитьПараметр(ОбластьШапка, "Пункт1_3",ДанныеПечати.Ответственный); 
			Иначе
				Если (НЕ ДанныеПечати.Водитель = Неопределено) И ЗначениеЗаполнено(ДанныеПечати.Водитель) Тогда
					УстановитьПараметр(ОбластьШапка, "Пункт1_3", ?(ТипЗнч(ДанныеПечати.Водитель) = Тип("Строка"), ВРЕГ(ДанныеПечати.Водитель),
					Строка(ДанныеПечати.Водитель) + " (" + ПолучитьТелефонИзКонтактнойИнформации(ДанныеПечати.Водитель) + ")")); 
				Иначе
					УстановитьПараметр(ОбластьШапка, "Пункт1_3", "");
				КонецЕсли;	 
			КонецЕсли;
		КонецЕсли;
		//-- Рарус Лимаренко 14.12.2018
	
		УстановитьПараметр(ОбластьШапка, "Пункт0_1", ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеПечати.Ссылка.Номер));
        УстановитьПараметр(ОбластьШапка, "Пункт0_2", Формат(ДанныеПечати.Дата,"ДЛФ=Д"));
		//Если ДанныеПечати.ПриемкаВозврат = Перечисления.пкПриемкаВозврат.Приемка Тогда
		//	УстановитьПараметр(ОбластьШапка, "Пункт1_1", ОрганизацияИнфоСокрл);
		//КонецЕсли;	
		Если ДанныеПечати.ПриемкаВозврат = Перечисления.пкПриемкаВозврат.Приемка Тогда
			УстановитьПараметр(ОбластьШапка, "Пункт1_2", ОрганизацияИнфоСокрл);
		Иначе
			УстановитьПараметр(ОбластьШапка, "Пункт1_2", КонтрагентИнфоСокрл);
		КонецЕсли;				
		Если ДанныеПечати.ПриемкаВозврат = Перечисления.пкПриемкаВозврат.Приемка Тогда
	        УстановитьПараметр(ОбластьШапка, "Пункт2_2", КонтрагентИнфоСокрл); 
		Иначе
	        УстановитьПараметр(ОбластьШапка, "Пункт2_2", ОрганизацияИнфоСокрл); 
		КонецЕсли;
	
		СтрокаГрузов = "";
		СтрокаМест   = 0;
		СтрокаМассы  = 0;
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ТаблицаСтрок = СтрокиТЧ.НайтиСтроки(СтруктураПоиска);
		НомерСтроки = 0;
		Для Каждого СтрокаТовары Из ТаблицаСтрок Цикл
			НомерСтроки = НомерСтроки + 1;
			
			Если ЗначениеЗаполнено(СтрокаТовары.Техника) Тогда
				СтрокаГрузов = СтрокаГрузов + СтрокаТовары.Модель.Наименование + "(" + СокрЛП(СтрокаТовары.Техника.Код) + " зав.№" + СокрЛП(СтрокаТовары.Техника.ЗаводскойНомер) + ")" + ", ";
			Иначе
				СтрокаГрузов = СтрокаГрузов + СтрокаТовары.Модель.Наименование + "(             )" + ", ";
			КонецЕсли;
			СтрокаМест   = СтрокаМест + 1;
			СтрокаМассы  = СтрокаМассы + СтрокаТовары.Модель.пкВес * 1000;
		КонецЦикла;
		
		УстановитьПараметр(ОбластьШапка, "Пункт3_1", СтрокаГрузов);
		УстановитьПараметр(ОбластьШапка, "Пункт3_2", Строка(СтрокаМест) + " (" + ЧислоПрописью(СтрокаМест, ,",,,,,,,,0") + "), " + "без упаковки");
		УстановитьПараметр(ОбластьШапка, "Пункт3_3", Строка(СтрокаМассы));		
		
		Если ДанныеПечати.ПриемкаВозврат = Перечисления.пкПриемкаВозврат.Приемка Тогда
			УстановитьПараметр(ОбластьШапка, "Пункт6_1", АдресОрганизации_Раздел_7);
			УстановитьПараметр(ОбластьШапка, "Пункт7_1", ?(ЗначениеЗаполнено(ДанныеПечати.ОбъектСтроительства), ДанныеПечати.ОбъектСтроительства, ДанныеПечати.АдресДоставки));
		Иначе
			УстановитьПараметр(ОбластьШапка, "Пункт6_1", ?(ЗначениеЗаполнено(ДанныеПечати.ОбъектСтроительства), ДанныеПечати.ОбъектСтроительства, ДанныеПечати.АдресДоставки));
			УстановитьПараметр(ОбластьШапка, "Пункт7_1", АдресОрганизации_Раздел_7);
		КонецЕсли;
		УстановитьПараметр(ОбластьШапка, "Пункт6_2", Формат(ДанныеПечати.Дата,"ДЛФ=Д"));
		УстановитьПараметр(ОбластьШапка, "Пункт7_2", Формат(ДанныеПечати.Дата,"ДЛФ=Д"));
		

		УстановитьПараметр(ОбластьШапка, "Пункт10_3", ОбластьШапка.Параметры.Пункт1_3);
		
		Если ДанныеПечати.ТранспортноеСредство <> Неопределено 
			И ЗначениеЗаполнено(ДанныеПечати.ТранспортноеСредство) 
		Тогда
			Если ТипЗнч(ДанныеПечати.ТранспортноеСредство) = Тип("СправочникСсылка.ТранспортныеСредства") Тогда
			
				Пункт11_1	= Строка(ДанныеПечати.ТранспортноеСредство.уатМодель); 
				Пункт11_2	= ДанныеПечати.ТранспортноеСредство.Код;
				
				ЕстьСостав = Ложь;
				мсвСоставТС = уатОбщегоНазначения.уатСоставТС(ДанныеПечати.ТранспортноеСредство);
			    Для Каждого ТекПрицеп Из мсвСоставТС Цикл
					Если ЗначениеЗаполнено(ТекПрицеп) Тогда
						ЕстьСостав = Истина;
						Пункт11_1	= Пункт11_1 + " / " + ТекПрицеп.Марка; 
						Пункт11_2	= Пункт11_2 + " / " + ТекПрицеп.Код;
					КонецЕсли;
				КонецЦикла;
				
				Если (Не ЕстьСостав) И ЗначениеЗаполнено(ДанныеПечати.ТранспортноеСредство.Прицеп) Тогда
					Пункт11_1	= Пункт11_1 + " / " + ДанныеПечати.ТранспортноеСредство.Прицеп; 
					Пункт11_2	= Пункт11_2 + " / " + ДанныеПечати.ТранспортноеСредство.ГосударственныйНомерПрицепа;
				КонецЕсли;
				
				УстановитьПараметр(ОбластьШапка, "Пункт11_1", Пункт11_1); 
				УстановитьПараметр(ОбластьШапка, "Пункт11_2", Пункт11_2);
			Иначе
				Автомобиль = Лев(ДанныеПечати.ТранспортноеСредство, Найти(ДанныеПечати.ТранспортноеСредство,";") -1);
				ГосНомер   = Прав(ДанныеПечати.ТранспортноеСредство, СтрДлина(ДанныеПечати.ТранспортноеСредство)- Найти(ДанныеПечати.ТранспортноеСредство,";"));
				УстановитьПараметр(ОбластьШапка, "Пункт11_1", Автомобиль); 
				УстановитьПараметр(ОбластьШапка, "Пункт11_2", ГосНомер);
			КонецЕсли;
		КонецЕсли;
		
		УстановитьПараметр(ОбластьШапка, "Пункт16_1", Формат(ДанныеПечати.Дата,"ДЛФ=Д"));
		УстановитьПараметр(ОбластьШапка, "Пункт16_2", Формат(ДанныеПечати.Дата,"ДЛФ=Д"));
		
		//++ Рарус Лимаренко 14.12.2018		
		Если РезультатЗапроса.Пустой() Тогда
			УстановитьПараметр(ОбластьШапка, "Пункт16_3", "");		
		Иначе
			Если ВыборкаДетальныеЗаписи.ПечатьАвтораДокумента И ДанныеПечати.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиента Тогда
				УстановитьПараметр(ОбластьШапка, "Пункт1_3",ДанныеПечати.Ответственный); 
			Иначе
				Если (НЕ ДанныеПечати.Водитель = Неопределено) И ЗначениеЗаполнено(ДанныеПечати.Водитель) Тогда
					УстановитьПараметр(ОбластьШапка, "Пункт16_3", ?(ТипЗнч(ДанныеПечати.Водитель) = Тип("Строка"), ВРЕГ(ДанныеПечати.Водитель),
					Строка(ДанныеПечати.Водитель) + " (" + ПолучитьТелефонИзКонтактнойИнформации(ДанныеПечати.Водитель) + ")")); 
				Иначе
					УстановитьПараметр(ОбластьШапка, "Пункт16_3", "");
				КонецЕсли;	 
			КонецЕсли;
		КонецЕсли;
		//-- Рарус Лимаренко 14.12.2018

		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		//ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
#КонецОбласти
		
		// Выведем нужное количество экземпляров (при печати комплектов)
		Если КомплектыПечати <> Неопределено
			И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено
			И КомплектПечатиПоСсылке.Экземпляров > 1 Тогда
			
			ОбластьКопирования = ТабличныйДокумент.ПолучитьОбласть(
				НомерСтрокиНачало,
				,
				ТабличныйДокумент.ВысотаТаблицы);
			
			Для Итератор = 2 По КомплектПечатиПоСсылке.Экземпляров Цикл
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьКопирования);
				
			КонецЦикла;
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Прочее

Процедура УстановитьПараметр(ОбластьМакета, ИмяПараметра, ЗначениеПараметра)
	ОбластьМакета.Параметры.Заполнить(Новый Структура(ИмяПараметра, ЗначениеПараметра));
КонецПроцедуры

// Функция находит актуальное значение телефона в контакной информации.
//
// Параметры:
//  Объект - СправочникСсылка, объект контактной информации
//
// Возвращаемое значение
//  Строка - представление найденного телефона
//
Функция ПолучитьТелефонИзКонтактнойИнформации(Объект)

	Если ЗначениеЗаполнено(Объект) Тогда
	
		Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
			Окончание = "Организации";
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
			Окончание = "Контрагента";
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Партнеры") Тогда
			Окончание = "Партнера";
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Склады") Тогда
			Окончание = "Склада";
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Пользователи") Тогда
			Окончание = "Пользователя";
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Окончание = "РабочийФизическиеЛица";
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			Окончание = "КонтактногоЛица";
		КонецЕсли;
		
		ВладелецКонтактнойИнформации = Объект;
		
		ВидТелефона = Справочники.ВидыКонтактнойИнформации["Телефон" + Окончание].Ссылка;
		
		ТабЗн           = ВладелецКонтактнойИнформации.КонтактнаяИнформация.Выгрузить();
		НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Телефон, ВидТелефона));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Возврат НайденныеСтроки[0].Представление;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // ПолучитьТелефонИзКонтактнойИнформации()

Функция ПолучитьКонтрагентаПартнера(тПартнер)
	
	тРезультат = Справочники.Контрагенты.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(тПартнер) Тогда
		
		ЗапросК = Новый Запрос;
		ЗапросК.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Партнер = &Партнер";
		ЗапросК.УстановитьПараметр("Партнер", тПартнер);
		РезЗапроса = ЗапросК.Выполнить().Выбрать();
		Если РезЗапроса.Следующий() Тогда
			тРезультат = РезЗапроса.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат тРезультат;
	
КонецФункции

Функция ПолучитьРеквизитыДоговора(Дата, Подразделение)
    
     Запрос = Новый Запрос;
     Запрос.Текст = 
     "ВЫБРАТЬ
     |  пкРеквизитыПечатныхФорм.Подразделение,
     |  пкРеквизитыПечатныхФорм.Руководитель,
     |  пкРеквизитыПечатныхФорм.НомерДоверенности,
     |  пкРеквизитыПечатныхФорм.ДатаДоверенности,
     |  пкРеквизитыПечатныхФорм.Должность,
     |  пкРеквизитыПечатныхФорм.ТекстШапки,
     |  пкРеквизитыПечатныхФорм.ТекстШапкиАнгл,
     |  пкРеквизитыПечатныхФорм.НомерТелефона,
     |  пкРеквизитыПечатныхФорм.ЭлектронныйАдрес,
     |  пкРеквизитыПечатныхФорм.ЭлектронныйАдрес1,
     |  пкРеквизитыПечатныхФорм.ГородСуда,
     |  пкРеквизитыПечатныхФорм.ГородСудаАнгл,
     |  пкРеквизитыПечатныхФорм.ГородВыезда,
     |  пкРеквизитыПечатныхФорм.ГородВыездаАнгл,
     |  пкРеквизитыПечатныхФорм.АдресПередачи,
     |  пкРеквизитыПечатныхФорм.ДопПодписьГлБух,
     |  пкРеквизитыПечатныхФорм.ДопПодписьРуководитель
     |ИЗ
     |  РегистрСведений.пкРеквизитыПечатныхФорм.СрезПоследних(&ДатаАнализа, ) КАК пкРеквизитыПечатныхФорм
     |ГДЕ
     |  пкРеквизитыПечатныхФорм.Подразделение = &ТекПодразделение";
     
     Запрос.УстановитьПараметр("ДатаАнализа",      Дата);
     Запрос.УстановитьПараметр("ТекПодразделение", Подразделение);
     
     РезЗапроса = Запрос.Выполнить().Выгрузить();
     Если РезЗапроса.Количество() > 0 Тогда
         Возврат РезЗапроса[0];
     Иначе
         Возврат Неопределено;
     КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
