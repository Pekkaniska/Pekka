
&НаКлиенте
Процедура МодельНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
    СтандартнаяОбработка = Ложь;
    
    Отбор = Новый Структура("пкЭтоТехника", Истина);
    
    ПараметрыФормы = Новый Структура("Отбор", Отбор);
    
    //ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы, , , , , Новый ОписаниеОповещения("МодельНачалоВыбораЗавершение", ЭтаФорма));
    ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы, Элемент, , , , );
    
КонецПроцедуры

&НаКлиенте
Процедура МодельНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
    
    Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
        Модель = ВыбранноеЗначение; 
        
        Если ЗначениеЗаполнено(Модель) Тогда
            ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
                СписокТехники, "Модель", Модель, , , Истина);
        Иначе
            ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
                СписокТехники, "Модель", , , , Ложь);
        КонецЕсли;        
    КонецЕсли;    
    
КонецПроцедуры  
    
&НаКлиенте
Процедура МодельПриИзменении(Элемент)
    
    Если ЗначениеЗаполнено(Модель) Тогда
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
            СписокТехники, "Модель", Модель, , , Истина);
    Иначе
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
            СписокТехники, "Модель", , , , Ложь);
    КонецЕсли;    
    
КонецПроцедуры

&НаСервере
Процедура ПодразделениеПриИзмененииНаСервере()
    
    Если ЗначениеЗаполнено(Подразделение) Тогда
		Если ТипЗнч(Подразделение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда 
			ОрганизацияИсточник = Подразделение.Владелец;
		Иначе
			ОрганизацияИсточник = "";
		КонецЕсли;
		Если ЗначениеЗаполнено(ОрганизацияИсточник) Тогда
			Организация = ОрганизацияИсточник;
		КонецЕсли;
    КонецЕсли;    
        
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
    
    Если ЗначениеЗаполнено(Подразделение) Тогда
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
            СписокТехники, "Подразделение", Подразделение, , , Истина);
			
		ПодразделениеПриИзмененииНаСервере();
	Иначе
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
            СписокТехники, "Подразделение", , , , Ложь);
    КонецЕсли;    
        
КонецПроцедуры

&НаКлиенте
Процедура МестонахожденияПриИзменении(Элемент)
    
    Если ЗначениеЗаполнено(Местонахождения) Тогда
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
            СписокТехники, "Местонахождения", Местонахождения, , , Истина);
    Иначе
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
            СписокТехники, "Местонахождения", , , , Ложь);
    КонецЕсли; 
        
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСтатусамТехникиПриИзменении(Элемент)
    
    УстановитьОтборПоСтатусамТехникиНаСервере();
        
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоСтатусамТехникиНаСервере()
        
    Если ОтборПоСтатусамТехники = 0 Тогда
                
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    СписокТехники, "Статус", Перечисления.пкСтатусыТехники.НаБазе, , , Истина);
            
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    СписокТехники, "СтатусРемонта", , , , Ложь);
        
    ИначеЕсли ОтборПоСтатусамТехники = 1 Тогда
        
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    СписокТехники, "Статус", , , , Ложь);
            
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    СписокТехники, "СтатусРемонта", Перечисления.пкСтатусыРемонтаТехники.ВРемонте, , , Истина);

        
    ИначеЕсли ОтборПоСтатусамТехники = 2 Тогда
        
        СписокСтатусов = Новый СписокЗначений();

        СписокСтатусов.Добавить(Перечисления.пкСтатусыТехники.ВПути);
        СписокСтатусов.Добавить(Перечисления.пкСтатусыТехники.КОтгрузке);
        СписокСтатусов.Добавить(Перечисления.пкСтатусыТехники.ВАренде);
        СписокСтатусов.Добавить(Перечисления.пкСтатусыТехники.КВозврату);
        
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    СписокТехники, "Статус", СписокСтатусов, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
            
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    СписокТехники, "СтатусРемонта", , , , Ложь);
        
    Иначе
        
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    СписокТехники, "Статус", , , , Ложь);
            
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    СписокТехники, "СтатусРемонта", , , , Ложь);
            
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
    УстановитьОтборПоСтатусамТехникиНаСервере();
    
    Подразделение = Пользователи.ТекущийПользователь().Подразделение;
    
    Если ЗначениеЗаполнено(Подразделение) Тогда
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
            СписокТехники, "Подразделение", Подразделение, , , Истина);
    КонецЕсли;        
	
//Рарус Владимир Подрезов 28.03.2017
	Если Объект.ПланируемыеРаботы.Количество() = 0 Тогда
		УстановитьПривилегированныйРежим(Истина);
		тРабота = Константы.пкРаботаНанесениеQRСтикера.Получить();
		УстановитьПривилегированныйРежим(Ложь);
		Если ЗначениеЗаполнено(тРабота) Тогда
			тОбъект = ДанныеФормыВЗначение(Объект, Тип("ОбработкаОбъект.пкПечатьСтикеровТехники"));
			НоваяСтрока = тОбъект.ПланируемыеРаботы.Добавить();
			НоваяСтрока.Работа				= тРабота;
			НоваяСтрока.Количество			= 0.1;
			НоваяСтрока.ЕдиницаИзмерения	= НоваяСтрока.Работа.ЕдиницаИзмерения;
			ЗначениеВДанныеФормы(тОбъект, Объект);
		КонецЕсли;
	КонецЕсли;
	Если Объект.ПланируемыеРаботы.Количество() > 0 
		И Не ЗначениеЗаполнено(Объект.ПричинаОбращения) Тогда
		тРабота = Объект.ПланируемыеРаботы[0].Работа;
		Если ЗначениеЗаполнено(тРабота) Тогда
			Объект.ПричинаОбращения = ?(ЗначениеЗаполнено(тРабота.НаименованиеПолное), тРабота.НаименованиеПолное, тРабота.Наименование);
		КонецЕсли;
	КонецЕсли;
	Если Объект.ПланируемыеРаботы.Количество() > 0 
		И Не ЗначениеЗаполнено(Объект.ПричинаОбращения) Тогда
		тРабота = Объект.ПланируемыеРаботы.Работа;
		Если ЗначениеЗаполнено(тРабота) Тогда
			Объект.ПричинаОбращения = ?(ЗначениеЗаполнено(тРабота.НаименованиеПолное), тРабота.НаименованиеПолное, тРабота.Наименование);
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.МестоРемонта) Тогда
		Объект.МестоРемонта = Перечисления.пкМестоРемонта.НаБазе;
	КонецЕсли;
//Рарус Владимир Подрезов Конец
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЭтикеток(Команда)
	МакетПретензия=ПечатьЭтикетокСервер();
	уатОбщегоНазначенияТиповыеКлиент.уатНапечататьДокумент(МакетПретензия, 1, Ложь, "QR-стикеры техники ");
	//МакетПретензия.Показать();	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЭтикетокПоВыделенным(Команда)
	МассивТехники = Новый Массив;
	Для Каждого СтрокаВыделенная из Элементы.СписокТехники.ВыделенныеСтроки Цикл
		МассивТехники.Добавить(СтрокаВыделенная);	
	КонецЦикла;
	МакетПретензия=ПечатьЭтикетокСервер(МассивТехники);
	уатОбщегоНазначенияТиповыеКлиент.уатНапечататьДокумент(МакетПретензия, 1, Ложь, "QR-стикеры техники ");
КонецПроцедуры

&НаСервере
Функция ПечатьЭтикетокСервер(МассивТехники=Неопределено)
	Если МассивТехники=Неопределено Тогда
		МассивТехники=ПолучитьМассивТехники();
	КонецЕсли; 
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьТабличныйДокумент_ТехникаЭтикетки(ТабличныйДокумент,МассивТехники);
	
	Возврат ТабличныйДокумент;
КонецФункции

&НаСервере
Функция ПолучитьМассивТехники() Экспорт
    Схема = Элементы.СписокТехники.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
    Настройки = Элементы.СписокТехники.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	//ЕстьСсылка=Ложь;
	//Для каждого ЭлементПоля из Настройки.УсловноеОформление.Элементы Цикл
	//	Если СтрНайти(Строка(Настройки.Условноеоформление.Элементы[0].Поля),"Ссылка")>0 Тогда
	//		ЕстьСсылка=Истина;	
	//	КонецЕсли;
	//КонецЦикла;	
	//Если не ЕстьСсылка Тогда
	//Элемент = Настройки.УсловноеОформление.Элементы.Добавить();
	//ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	//ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
	//КонецЕсли;

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
    МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений ;
    ТЗ=Новый ТаблицаЗначений;
    ПроцессорВывода.УстановитьОбъект(ТЗ); 
    ПроцессорВывода.Вывести(ПроцессорКомпоновки);	
	//СхемаДС=ЭтаФорма.СписокТехники.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	МассивТехники=ТЗ.ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивТехники;
КонецФункции	

&НаКлиенте
Процедура СоздатьЗаданияНаРемонт(Команда)
	МассивТехники=ПолучитьМассивТехники();
	СоздатьЗаданияНаРемонтНаСервере(МассивТехники);
КонецПроцедуры

&НаСервере
Процедура СоздатьЗаданияНаРемонтНаСервере(МассивТехники)
	
	Для Каждого тТехника Из МассивТехники Цикл
		СоздатьДокументЗаданиеНаРемонт(тТехника);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаданияНаРемонтПоВыделеннымСтрокам(Команда)
	МассивТехники = Новый Массив;
	Для Каждого СтрокаВыделенная из Элементы.СписокТехники.ВыделенныеСтроки Цикл
		МассивТехники.Добавить(СтрокаВыделенная);	
	КонецЦикла;
	СоздатьЗаданияНаРемонтНаСервере(МассивТехники);
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументЗаданиеНаРемонт(тТехника)
	
	НовоеЗадание = Документы.пкЗаданиеНаРемонт.СоздатьДокумент();
	//Если ТипЗнч(ЭтаФорма.Подразделение.Источник) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда 
	//	НовоеЗадание.Организация = ЭтаФорма.Подразделение.Источник.Владелец;
	//Иначе
	//	НовоеЗадание.Организация = ЭтаФорма.Подразделение.Источник;
	//КонецЕсли;
	НовоеЗадание.Организация		= Организация;
	НовоеЗадание.Подразделение		= Подразделение;
	НовоеЗадание.ВидРемонта			= Объект.ВидРемонта;
	НовоеЗадание.Ответственный		= Пользователи.ТекущийПользователь();
	НовоеЗадание.Дата				= ТекущаяДата();
	НовоеЗадание.ОбъектЭксплуатации	= тТехника;
	//НовоеЗадание.ТребуемаяДата	= ТекущаяДата() + ?(ДнейДоТО < 0, 0, ДнейДоТО) * 24*60*60;
	НовоеЗадание.ПричинаОбращения	= Объект.ПричинаОбращения;
	НовоеЗадание.МестоРемонта		= Объект.МестоРемонта;
	
	НовоеЗадание.ПланируемыеРаботы.Загрузить(Объект.ПланируемыеРаботы.Выгрузить());
	
	МестоположениеТ = ПодобратьКлиентаПоМестоположению(НовоеЗадание.ОбъектЭксплуатации, ?(ЗначениеЗаполнено(НовоеЗадание.Дата), НовоеЗадание.Дата, ТекущаяДата()));
	Если МестоположениеТ <> Неопределено тогда
		ЗаполнитьЗначенияСвойств(НовоеЗадание, МестоположениеТ);
	КонецЕсли;
	Если ЗначениеЗаполнено(НовоеЗадание.Клиент) тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	КонтактныеЛицаПартнеров.Ссылка,
		                      |	КонтактныеЛицаПартнеров.Владелец
		                      |ИЗ
		                      |	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		                      |ГДЕ
		                      |	КонтактныеЛицаПартнеров.Владелец = &Владелец
		                      |	И КонтактныеЛицаПартнеров.ПометкаУдаления = ЛОЖЬ");
		Запрос.УстановитьПараметр("Владелец", НовоеЗадание.Клиент);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 1 Тогда 
			Выборка.Следующий();
			НовоеЗадание.КонтактноеЛицо	= Выборка.Ссылка;
		Иначе	
			НовоеЗадание.КонтактноеЛицо	= Неопределено;
		КонецЕсли;
		НовоеЗадание.Менеджер	= НовоеЗадание.Клиент.ОсновнойМенеджер;
	КонецЕсли;
	
	Попытка
		НовоеЗадание.Записать(РежимЗаписиДокумента.Запись);
		СтрокаЗадания = Объект.СозданныеЗадания.Добавить(); 
		СтрокаЗадания.ЗаданиеНаРемонт = НовоеЗадание.Ссылка;
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось создать документ ""Задание на ремонт"" по причине: " + ОписаниеОшибки();
		Сообщение.Сообщить();
	КонецПопытки;	
	Попытка
		НовоеЗадание.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось провести документ " + НовоеЗадание.Ссылка + " по причине: " + ОписаниеОшибки();
		Сообщение.Сообщить();
	КонецПопытки;	
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПодобратьКлиентаПоМестоположению(тТехника, Период)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	пкСостояниеТехникиСрезПоследних.Значение КАК ОбъектСтроительства,
	                      |	ВЫБОР
	                      |		КОГДА пкСостояниеТехникиСрезПоследних.Регистратор ССЫЛКА Документ.пкПогрузкаВыгрузкаПоДоставке
	                      |			ТОГДА пкСостояниеТехникиСрезПоследних.Регистратор.ЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники.Партнер
	                      |		ИНАЧЕ пкСостояниеТехникиСрезПоследних.Значение.Заказчик.Партнер
	                      |	КОНЕЦ КАК Клиент
	                      |ИЗ
	                      |	РегистрСведений.пкСостояниеТехники.СрезПоследних(
	                      |			&Дата,
	                      |			Техника = &Техника
	                      |				И Показатель = ЗНАЧЕНИЕ(ПланВидовХарактеристик.пкПоказателиСостоянияТехники.Местонахождения)) КАК пкСостояниеТехникиСрезПоследних
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.пкСтатусыТехники.СрезПоследних(&Дата, Техника = &Техника) КАК пкСтатусыТехникиСрезПоследних
	                      |		ПО пкСостояниеТехникиСрезПоследних.Техника = пкСтатусыТехникиСрезПоследних.Техника
	                      |ГДЕ
	                      |	пкСтатусыТехникиСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.пкСтатусыТехники.ВАренде)");
	Запрос.УстановитьПараметр("Дата", Период);
	Запрос.УстановитьПараметр("Техника", тТехника);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда 
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		СтруктураВозврата = Новый Структура("Клиент,ОбъектСтроительства");
		ЗаполнитьЗначенияСвойств(СтруктураВозврата,Выборка);
		Возврат СтруктураВозврата;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Процедура ПланируемыеРаботыРаботаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПланируемыеРаботы.ТекущиеДанные;
	
	ТекущаяСтрока.ЕдиницаИзмерения = ПолучитьЗначениеРеквизита(ТекущаяСтрока.Работа, "ЕдиницаИзмерения");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(ОбъектСсылка, ИмяРеквизита)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, ИмяРеквизита);
	
КонецФункции

&НаКлиенте
Процедура ТехникаПриИзменении(Элемент)
    Если Техника.Количество() > 0 Тогда
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
            СписокТехники, "Ссылка", Техника, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
    Иначе
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
            СписокТехники, "Ссылка", , , , Ложь);
    КонецЕсли;    
КонецПроцедуры



