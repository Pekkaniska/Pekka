////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура ЗаполнитьСоставПланаСервер(флОчищать)
	Если (НЕ Объект.РасчитыватьПоЗаказамНаТС) И (НЕ Объект.РасчитыватьПоВыработкеТС) И (НЕ Объект.РасчитыватьПоПроданнымБилетам) Тогда
		Возврат;
	КонецЕсли;
	
	Если флОчищать Тогда
		Объект.СоставПлана.Очистить();
	КонецЕсли;
	
	Сценарий_ДетализацияПланирования = Объект.Сценарий.ДетализацияПланирования;
	
	ПолныйТекстЗапроса = "";
	Запрос = Новый Запрос();
	Если Объект.РасчитыватьПоЗаказамНаТС Тогда
		Текст =  "ВЫБРАТЬ
		|	ВложенныйЗапрос.ДетализацияПланирования КАК ДетализацияПланирования,
		|	NULL КАК ПараметрВыработки,
		|	СУММА(КоличествоПриход)КАК Количество,
		|	уатЗаказыНаТСОбороты.Номенклатура КАК Номенклатура,
		|	уатЗаказыНаТСОбороты.Контрагент КАК Контрагент,
		|	уатЗаказыНаТСОбороты.ДоговорКонтрагента КАК Договор,
		|	ЗНАЧЕНИЕ(Справочник.уатМаршруты.ПустаяСсылка) КАК Маршрут,
		|	ЗНАЧЕНИЕ(Справочник.уатВидыБилетов.ПустаяСсылка) КАК ВидБилета";
		Если НЕ Объект.НеЗаполнятьПолеЗаказ Тогда
			Текст =  Текст + ",
			|	уатЗаказыНаТСОбороты.ЗаказГрузоотправителя КАК Заказ";
		КонецЕсли;
		Текст =  Текст + "
		|ИЗ
		|	(ВЫБРАТЬ
		|		уатЗаказГрузоотправителя.ТребованиеКТС КАК  ДетализацияПланирования,
		|       уатЗаказГрузоотправителя.Ссылка КАК  Ссылка
		|	ИЗ
		|		Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя) КАК ВложенныйЗапрос
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.уатЗаказыГрузоотправителей.Обороты(&ДатаНач, &ДатаКон, ,) КАК уатЗаказыНаТСОбороты
		|		ПО ВложенныйЗапрос.Ссылка = уатЗаказыНаТСОбороты.ЗаказГрузоотправителя
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.ДетализацияПланирования,
		|	уатЗаказыНаТСОбороты.Номенклатура,
		|	уатЗаказыНаТСОбороты.Контрагент,
		|	уатЗаказыНаТСОбороты.ДоговорКонтрагента,
		|	уатЗаказыНаТСОбороты.ЗаказГрузоотправителя";
		
		ПолныйТекстЗапроса = Текст;
		Запрос.Параметры.Вставить("ДатаНач", НачалоДня(Объект.НачалоРасчетаПоЗаказамНаТС));
		Запрос.Параметры.Вставить("ДатаКон", ?(Объект.КонецРасчетаПоЗаказамНаТС = '00010101', '39991231', КонецДня(Объект.КонецРасчетаПоЗаказамНаТС)));
	КонецЕсли;
	
	Если Объект.РасчитыватьПоВыработкеТС Тогда 
		Текст =  "ВЫБРАТЬ
		|	&ВыработкаДетализацияПланирования КАК ДетализацияПланирования,
		|	уатВыработкаОбороты.ПараметрВыработки КАК ПараметрВыработки,
		|	СУММА(ВЫБОР КОГДА уатВыработкаОбороты.ПараметрВыработки.Временный ТОГДА уатВыработкаОбороты.КоличествоОборот/3600 ИНАЧЕ уатВыработкаОбороты.КоличествоОборот КОНЕЦ) КАК Количество,
		|	NULL КАК Номенклатура,
		|	уатВыработкаОбороты.Контрагент КАК Контрагент,
		|	NULL КАК Договор,
		|	уатВыработкаОбороты.Маршрут КАК Маршрут,
		|	NULL КАК ВидБилета";
		Если НЕ Объект.НеЗаполнятьПолеЗаказ Тогда
			Текст =  Текст + ",
			|	NULL КАК Заказ";
		КонецЕсли;
		Текст =  Текст + " 
		|ИЗ
		|	РегистрНакопления.уатВыработкаТС.Обороты(&ДатаНач1, &ДатаКон1, , ПараметрВыработки.ИспользоватьПриПланировании) КАК уатВыработкаОбороты
		|СГРУППИРОВАТЬ ПО
		|	ДетализацияПланированияГруппа,
		|	уатВыработкаОбороты.ПараметрВыработки,
		|	уатВыработкаОбороты.Контрагент,
		|	уатВыработкаОбороты.Маршрут";
		
		Если Сценарий_ДетализацияПланирования = Перечисления.уатДетализацияПланирования.МодельТС тогда
			Текст = СтрЗаменить(Текст,"&ВыработкаДетализацияПланирования","уатВыработкаОбороты.ТС.уатМодель");
			Текст = СтрЗаменить(Текст,"ДетализацияПланированияГруппа"    ,"уатВыработкаОбороты.ТС.уатМодель");
		ИначеЕсли Сценарий_ДетализацияПланирования = Перечисления.уатДетализацияПланирования.ТипТС тогда
			Текст = СтрЗаменить(Текст,"&ВыработкаДетализацияПланирования","уатВыработкаОбороты.ТС.Тип");
			Текст = СтрЗаменить(Текст,"ДетализацияПланированияГруппа"    ,"уатВыработкаОбороты.ТС.Тип");
		ИначеЕсли Сценарий_ДетализацияПланирования = Перечисления.уатДетализацияПланирования.ТС тогда
			Текст = СтрЗаменить(Текст,"&ВыработкаДетализацияПланирования","уатВыработкаОбороты.ТС");
			Текст = СтрЗаменить(Текст,"ДетализацияПланированияГруппа"    ,"уатВыработкаОбороты.ТС");
		КонецЕсли;

		ПолныйТекстЗапроса = ?(НЕ ЗначениеЗаполнено(ПолныйТекстЗапроса), "", ПолныйТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|") + Текст;
		Запрос.Параметры.Вставить("ДатаНач1", НачалоДня(Объект.НачалоРасчетаПоВыработкеТС));
		Запрос.Параметры.Вставить("ДатаКон1", ?(Объект.КонецРасчетаПоВыработкеТС = '00010101', '39991231', КонецДня(Объект.КонецРасчетаПоВыработкеТС)));
	КонецЕсли;
	
	// по билетам
	Если Объект.РасчитыватьПоПроданнымБилетам Тогда 
		Текст =  "ВЫБРАТЬ
		|	&ВыработкаДетализацияПланирования КАК ДетализацияПланирования,
		|	NULL КАК ПараметрВыработки,
		|	СУММА(уатВыручкаОбороты.КоличествоОборот) КАК Количество,
		|	NULL КАК Номенклатура,
		|	NULL КАК Контрагент,
		|	NULL КАК Договор,
		|	уатВыручкаОбороты.Маршрут КАК Маршрут,
		|	уатВыручкаОбороты.Билет.ВидБилета КАК ВидБилета";
		Если НЕ Объект.НеЗаполнятьПолеЗаказ Тогда
			Текст =  Текст + ",
			|	NULL КАК Заказ";
		КонецЕсли;
		Текст =  Текст + " 
		|ИЗ
		|	РегистрНакопления.уатВыручка.Обороты(&ДатаНач1, &ДатаКон1, , ) КАК уатВыручкаОбороты
		|СГРУППИРОВАТЬ ПО
		|	ДетализацияПланированияГруппа,
		|	уатВыручкаОбороты.Маршрут,
		|	уатВыручкаОбороты.Билет.ВидБилета";
		
		Если Сценарий_ДетализацияПланирования = Перечисления.уатДетализацияПланирования.МодельТС тогда
			Текст = СтрЗаменить(Текст,"&ВыработкаДетализацияПланирования","уатВыручкаОбороты.ТС.уатМодель");
			Текст = СтрЗаменить(Текст,"ДетализацияПланированияГруппа"    ,"уатВыручкаОбороты.ТС.уатМодель");
		ИначеЕсли Сценарий_ДетализацияПланирования = Перечисления.уатДетализацияПланирования.ТипТС тогда
			Текст = СтрЗаменить(Текст,"&ВыработкаДетализацияПланирования","уатВыручкаОбороты.ТС.Тип");
			Текст = СтрЗаменить(Текст,"ДетализацияПланированияГруппа"    ,"уатВыручкаОбороты.ТС.Тип");
		ИначеЕсли Сценарий_ДетализацияПланирования = Перечисления.уатДетализацияПланирования.ТС тогда
			Текст = СтрЗаменить(Текст,"&ВыработкаДетализацияПланирования","уатВыручкаОбороты.ТС");
			Текст = СтрЗаменить(Текст,"ДетализацияПланированияГруппа"    ,"уатВыручкаОбороты.ТС");
		КонецЕсли;

		ПолныйТекстЗапроса = ?(НЕ ЗначениеЗаполнено(ПолныйТекстЗапроса), "", ПолныйТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|") + Текст;
		Запрос.Параметры.Вставить("ДатаНач1", НачалоДня(Объект.НачалоРасчетаПоПроданнымБилетам));
		Запрос.Параметры.Вставить("ДатаКон1", ?(Объект.КонецРасчетаПоВыработкеТС = '00010101', '39991231', КонецДня(Объект.КонецРасчетаПоПроданнымБилетам)));
	КонецЕсли;
	
	Запрос.Текст = ПолныйТекстЗапроса;
	Рез = Запрос.Выполнить().Выгрузить();
	
	Рез.Колонки.Добавить("ДетализацияПланирования1");
	
	Для Каждого ТекСтрока Из Рез Цикл
		Если Сценарий_ДетализацияПланирования = Перечисления.уатДетализацияПланирования.МодельТС Тогда
			Если ТипЗнч(ТекСтрока.ДетализацияПланирования) = Тип("СправочникСсылка.ТранспортныеСредства") Тогда
				ТекСтрока.ДетализацияПланирования1 = ТекСтрока.ДетализацияПланирования.уатМодель;
			Иначе
				ТекСтрока.ДетализацияПланирования1 = ТекСтрока.ДетализацияПланирования;
			КонецЕсли;
		ИначеЕсли Сценарий_ДетализацияПланирования = Перечисления.уатДетализацияПланирования.ТипТС Тогда
			Если ТипЗнч(ТекСтрока.ДетализацияПланирования) = Тип("СправочникСсылка.ТранспортныеСредства") Тогда
				мМодельТС = ТекСтрока.ДетализацияПланирования.уатМодель;
				ТекСтрока.ДетализацияПланирования1 = мМодельТС.ТипТС;
			ИначеЕсли ТипЗнч(ТекСтрока.ДетализацияПланирования) = Тип("СправочникСсылка.уатМоделиТС") Тогда
				ТекСтрока.ДетализацияПланирования1 = ТекСтрока.ДетализацияПланирования.ТипТС;
			Иначе
				ТекСтрока.ДетализацияПланирования1 = ТекСтрока.ДетализацияПланирования;
			КонецЕсли;
		Иначе // ТС
			ТекСтрока.ДетализацияПланирования1 = ТекСтрока.ДетализацияПланирования;
		КонецЕсли;
	КонецЦикла;
	
	Рез.Колонки.Удалить("ДетализацияПланирования");
	Рез.Колонки.ДетализацияПланирования1.Имя = "ДетализацияПланирования";
	
	Если Объект.НеЗаполнятьПолеЗаказ Тогда
		Рез.Свернуть("ДетализацияПланирования, ПараметрВыработки, Номенклатура, Контрагент, Договор, Маршрут, ВидБилета", "Количество");
	Иначе
		Рез.Свернуть("ДетализацияПланирования, ПараметрВыработки, Номенклатура, Контрагент, Договор, Заказ, Маршрут, ВидБилета", "Количество");
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Рез Цикл
		НоваяСтрока = Объект.СоставПлана.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстКолонкиДетализация()
	ДетПланир = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.Сценарий, "ДетализацияПланирования");
	Если ДетПланир = ПредопределенноеЗначение("Перечисление.уатДетализацияПланирования.МодельТС") Тогда
		Элементы.СоставПланаДетализацияПланирования.Заголовок = "Модель ТС";
	ИначеЕсли ДетПланир = ПредопределенноеЗначение("Перечисление.уатДетализацияПланирования.ТипТС") Тогда
		Элементы.СоставПланаДетализацияПланирования.Заголовок = "Тип ТС";
	ИначеЕсли ДетПланир = ПредопределенноеЗначение("Перечисление.уатДетализацияПланирования.ТС") Тогда
		Элементы.СоставПланаДетализацияПланирования.Заголовок = "ТС";
	Иначе
		Элементы.СоставПланаДетализацияПланирования.Заголовок = "Детализация";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	Элементы.ГруппаПериод2.Доступность = Объект.РасчитыватьПоЗаказамНаТС;
	Элементы.ГруппаПериод3.Доступность = Объект.РасчитыватьПоВыработкеТС;
	Элементы.ГруппаПериод4.Доступность = Объект.РасчитыватьПоПроданнымБилетам;
	
	Если НЕ УчитыватьНДС Тогда
		Элементы.СоставПланаСтавкаНДС.Видимость = Ложь;
		Элементы.СоставПланаСуммаНДС.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураСтрокиСостава()
	СтруктураСтроки = Новый Структура;
	Для Каждого ТекПоле Из Метаданные.Обработки.уатПомощникПланированияРаботыТС.ТабличныеЧасти.СоставПлана.Реквизиты Цикл
		СтруктураСтроки.Вставить(ТекПоле.Имя);
	КонецЦикла;
	
	Возврат СтруктураСтроки;
КонецФункции

&НаКлиенте
Процедура ОбновитьПараметрВыработкиВременный()
	Для Каждого ТекСтрокаТЧ Из Объект.СоставПлана Цикл
		ТекСтрокаТЧ.ПараметрВыработкиВременный = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрокаТЧ.ПараметрВыработки, "Временный");
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОграничениеТипаДетализации()
	ДетПланир = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.Сценарий, "ДетализацияПланирования");
	Если ДетПланир = ПредопределенноеЗначение("Перечисление.уатДетализацияПланирования.МодельТС") Тогда
		Элементы.СоставПланаДетализацияПланирования.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатМоделиТС");
	ИначеЕсли ДетПланир = ПредопределенноеЗначение("Перечисление.уатДетализацияПланирования.ТипТС") Тогда
		Элементы.СоставПланаДетализацияПланирования.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ТипыТранспортныхСредств");
	ИначеЕсли ДетПланир = ПредопределенноеЗначение("Перечисление.уатДетализацияПланирования.ТС") Тогда
		Элементы.СоставПланаДетализацияПланирования.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ТранспортныеСредства");
	Иначе
		Элементы.СоставПланаДетализацияПланирования.ОграничениеТипа = Новый ОписаниеТипов("Неопределено");
	КонецЕсли; 
КонецПроцедуры

// Процедура рассчитывает сумму в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.ПараметрВыработкиВременный Тогда
		Колич = Цел(СтрокаТабличнойЧасти.Количество) + (СтрокаТабличнойЧасти.Количество - Цел(СтрокаТабличнойЧасти.Количество))/60*100;
	Иначе
		Колич = СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	СтрокаТабличнойЧасти.Сумма = Колич * СтрокаТабличнойЧасти.Цена;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

// Рассчитывается сумма НДС в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	
	СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(СуммаВключаетНДС, 
	СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
	СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	
КонецПроцедуры // РассчитатьСуммуНДС()


////////////////////////////////////////////////////////////////////////////////
// ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаКлиенте
Процедура ВыполнитьОбработку(Команда)
	мсвСтрок = Новый Массив;
	Для Каждого ТекСтрока Из Объект.СоставПлана Цикл
		СтруктураСтроки = СтруктураСтрокиСостава();
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекСтрока);
		мсвСтрок.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Закрыть(мсвСтрок);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСоставПлана(Команда)
	Если (НЕ Объект.РасчитыватьПоЗаказамНаТС) И (НЕ Объект.РасчитыватьПоВыработкеТС) И (НЕ Объект.РасчитыватьПоПроданнымБилетам) Тогда
		Возврат;
	КонецЕсли;
	
	флОчищать = Ложь;
	Если Объект.СоставПлана.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьСоставПланаЗавершение", ЭтотОбъект),
			"Табличная часть не пуста! Очистить?", РежимДиалогаВопрос.ДаНетОтмена);
        Возврат;
	КонецЕсли;
	
	ЗаполнитьСоставПланаФрагмент(флОчищать);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСоставПланаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Отмена Тогда
        Возврат;
    ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
        флОчищать = Истина;
    КонецЕсли;
    
    ЗаполнитьСоставПланаФрагмент(флОчищать);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСоставПланаФрагмент(Знач флОчищать)
    
    ЗаполнитьСоставПланаСервер(флОчищать);
    
    ОбновитьПараметрВыработкиВременный();

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСоставПлана(Команда)
	Если Объект.СоставПлана.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьСоставПланаЗавершение", ЭтотОбъект),
		"Состав плана будет очищен! Продолжить?", РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСоставПланаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.ОК Тогда
        Объект.СоставПлана.Очистить();
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериодЗаказы(Команда)
	ПроизвольныйПериод               = Новый СтандартныйПериод;
	ПроизвольныйПериод.Вариант       = ВариантСтандартногоПериода.ПроизвольныйПериод;
	ПроизвольныйПериод.ДатаНачала    = Объект.НачалоРасчетаПоЗаказамНаТС;
	ПроизвольныйПериод.ДатаОкончания = Объект.КонецРасчетаПоЗаказамНаТС;

	ДиалогВыбораПериода        = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогВыбораПериода.Период = ПроизвольныйПериод;
	
	ДиалогВыбораПериода.Показать(Новый ОписаниеОповещения("УстановитьПериодЗаказыЗавершение", ЭтотОбъект, Новый Структура("ДиалогВыбораПериода", ДиалогВыбораПериода)));
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериодЗаказыЗавершение(Период, ДополнительныеПараметры) Экспорт
    
    ДиалогВыбораПериода = ДополнительныеПараметры.ДиалогВыбораПериода;
    
    
    Если Период <> Неопределено Тогда
        ПроизвольныйПериод = ДиалогВыбораПериода.Период;
        Объект.НачалоРасчетаПоЗаказамНаТС = ПроизвольныйПериод.ДатаНачала;
        Объект.КонецРасчетаПоЗаказамНаТС = ПроизвольныйПериод.ДатаОкончания;
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериодВыработка(Команда)
	ПроизвольныйПериод               = Новый СтандартныйПериод;
	ПроизвольныйПериод.Вариант       = ВариантСтандартногоПериода.ПроизвольныйПериод;
	ПроизвольныйПериод.ДатаНачала    = Объект.НачалоРасчетаПоВыработкеТС;
	ПроизвольныйПериод.ДатаОкончания = Объект.КонецРасчетаПоВыработкеТС;

	ДиалогВыбораПериода        = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогВыбораПериода.Период = ПроизвольныйПериод;
	
	ДиалогВыбораПериода.Показать(Новый ОписаниеОповещения("УстановитьПериодВыработкаЗавершение", ЭтотОбъект, Новый Структура("ДиалогВыбораПериода", ДиалогВыбораПериода)));
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериодВыработкаЗавершение(Период, ДополнительныеПараметры) Экспорт
    
    ДиалогВыбораПериода = ДополнительныеПараметры.ДиалогВыбораПериода;
    
    
    Если Период <> Неопределено Тогда
        ПроизвольныйПериод = ДиалогВыбораПериода.Период;
        Объект.НачалоРасчетаПоВыработкеТС = ПроизвольныйПериод.ДатаНачала;
        Объект.КонецРасчетаПоВыработкеТС = ПроизвольныйПериод.ДатаОкончания;
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериодБилеты(Команда)
	ПроизвольныйПериод               = Новый СтандартныйПериод;
	ПроизвольныйПериод.Вариант       = ВариантСтандартногоПериода.ПроизвольныйПериод;
	ПроизвольныйПериод.ДатаНачала    = Объект.НачалоРасчетаПоПроданнымБилетам;
	ПроизвольныйПериод.ДатаОкончания = Объект.КонецРасчетаПоПроданнымБилетам;

	ДиалогВыбораПериода        = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогВыбораПериода.Период = ПроизвольныйПериод;
	
	ДиалогВыбораПериода.Показать(Новый ОписаниеОповещения("УстановитьПериодБилетыЗавершение", ЭтотОбъект, Новый Структура("ДиалогВыбораПериода", ДиалогВыбораПериода)));
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериодБилетыЗавершение(Период, ДополнительныеПараметры) Экспорт
    
    ДиалогВыбораПериода = ДополнительныеПараметры.ДиалогВыбораПериода;
    
    
    Если Период <> Неопределено Тогда
        ПроизвольныйПериод = ДиалогВыбораПериода.Период;
        Объект.НачалоРасчетаПоПроданнымБилетам = ПроизвольныйПериод.ДатаНачала;
        Объект.КонецРасчетаПоПроданнымБилетам = ПроизвольныйПериод.ДатаОкончания;
    КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура РасчитыватьПоЗаказамНаТСПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура РасчитыватьПоВыработкеТСПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура РасчитыватьПоПроданнымБилетамПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура СоставПланаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если НЕ ЗначениеЗаполнено(уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.Сценарий, "ДетализацияПланирования")) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, "Не указана детализация планирования у сценария
			|или не заполнен сценарий!", 10);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоставПланаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекСтрока = Элементы.СоставПлана.ТекущиеДанные;
	Если НоваяСтрока И НЕ ЗначениеЗаполнено(ТекСтрока.ДетализацияПланирования) Тогда
		ДетПланирования = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.Сценарий, "ДетализацияПланирования");
		Если ДетПланирования = ПредопределенноеЗначение("Перечисление.уатДетализацияПланирования.МодельТС") Тогда
			ТекСтрока.ДетализацияПланирования = ПредопределенноеЗначение("Справочник.уатМоделиТС.ПустаяСсылка");
		ИначеЕсли ДетПланирования = ПредопределенноеЗначение("Перечисление.уатДетализацияПланирования.ТипТС") Тогда
			ТекСтрока.ДетализацияПланирования = ПредопределенноеЗначение("Справочник.ТипыТранспортныхСредств.ПустаяСсылка");
		ИначеЕсли ДетПланирования = ПредопределенноеЗначение("Перечисление.уатДетализацияПланирования.ТС") Тогда
			ТекСтрока.ДетализацияПланирования = ПредопределенноеЗначение("Справочник.ТранспортныеСредства.ПустаяСсылка");
		Иначе
			ТекСтрока.ДетализацияПланирования = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекСтрока.ПараметрВыработкиВременный Тогда
		Элементы.СоставПланаКоличество.ФорматРедактирования = "ЧДЦ=2; ЧРД=:";
	Иначе
		Элементы.СоставПланаКоличество.ФорматРедактирования = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоставПланаПараметрВыработкиПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.СоставПлана.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВидБилета) И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ПараметрВыработки) Тогда
		СтрокаТабличнойЧасти.ВидБилета = ПредопределенноеЗначение("Справочник.уатВидыБилетов.ПустаяСсылка");
	КонецЕсли;
	
	ОбновитьПараметрВыработкиВременный();
	
	Если СтрокаТабличнойЧасти.ПараметрВыработкиВременный Тогда
		Элементы.СоставПланаКоличество.ФорматРедактирования = "ЧДЦ=2; ЧРД=:";
	Иначе
		Элементы.СоставПланаКоличество.ФорматРедактирования = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоставПланаНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораГруза(Элемент, Элементы.СоставПлана.ТекущиеДанные.Номенклатура, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СоставПланаКоличествоПриИзменении(Элемент)
	ТекСтрока = Элементы.СоставПлана.ТекущиеДанные;
	Если ТекСтрока.ПараметрВыработкиВременный Тогда
		уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрока.Количество);
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура СоставПланаЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.СоставПлана.ТекущиеДанные;
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура СоставПланаСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.СоставПлана.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура СоставПланаСтавкаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.СоставПлана.ТекущиеДанные;
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура СоставПланаВидБилетаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.СоставПлана.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ПараметрВыработки) И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВидБилета) Тогда
		СтрокаТабличнойЧасти.ПараметрВыработки = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		АвтоТест = Истина;
		Возврат;
	КонецЕсли;

	уатЗащищенныеФункцииСервер.уатОбработкаФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("Сценарий") Тогда
		Объект.Сценарий = Параметры.Сценарий;
	КонецЕсли;
	Если Параметры.Свойство("Организация") Тогда
		Объект.Организация = Параметры.Организация;
	КонецЕсли;
	Если Параметры.Свойство("Подразделение") Тогда
		Объект.Подразделение = Параметры.Подразделение;
	КонецЕсли;
	Если Параметры.Свойство("ДатаНач") Тогда
		Объект.ДатаНач = Параметры.ДатаНач;
	КонецЕсли;
	Если Параметры.Свойство("ДатаКон") Тогда
		Объект.ДатаКон = Параметры.ДатаКон;
	КонецЕсли;
	Если Параметры.Свойство("СуммаВключаетНДС") Тогда
		СуммаВключаетНДС = Параметры.СуммаВключаетНДС;
	КонецЕсли;
	Если Параметры.Свойство("УчитыватьНДС") Тогда
		УчитыватьНДС = Параметры.УчитыватьНДС;
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.Подразделение, "Объект.Организация");
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если АвтоТест Тогда
		Возврат;
	КонецЕсли;
	
	Если ВладелецФормы = Неопределено Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, "Данная обработка вызывается только из документа ""Планирование работы ТС""", 10);
		Возврат;
	КонецЕсли;
	
	уатЗащищенныеФункцииКлиент.уатОбработкаФормаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	УстановитьОграничениеТипаДетализации();
	УстановитьТекстКолонкиДетализация();
	УстановитьВидимостьДоступность();
	ОбновитьПараметрВыработкиВременный();
КонецПроцедуры
