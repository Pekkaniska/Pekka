
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатОбработкаФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка,ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	ДатаИзменения = ТекущаяДата();
	
	флИзменятьНормуОснТоплива = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	уатЗащищенныеФункцииКлиент.уатОбработкаФормаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ФлажокЛинейныеНормыПриИзменении(Элемент)
	Элементы.Группа1.Доступность = ФлажокЛинейныеНормы;
	ПереключательПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательПроцентПриИзменении(Элемент)
	ПереключательПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ФлажокСезонныеНадбавкиПриИзменении(Элемент)
	Элементы.Группа3.Доступность = ФлажокСезонныеНадбавки;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекВключатьПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоНастроек.ТекущиеДанные;
	ТекущиеДанные.Включать = ТекущиеДанные.Включать % 2;
	ПроставитьПометкиВниз(ТекущиеДанные);
	ПроставитьПометкиВверх(ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ТопливоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДопПараметры = Новый Структура("ЗначениеГСМДоИзменения, ИмяПроцедурыОписаниеОповещения", Топливо, "ОписаниеОповещенияВыбораГСМ");
	уатЗащищенныеФункцииКлиент.ВыбратьГСМ(ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Топливо"), ЭтаФорма, ДопПараметры);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	УстановитьПометки(1);
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	УстановитьПометки(0);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНастройки(Команда)
	ЗаполнитьТабЧасть();
КонецПроцедуры

&НаКлиенте
Процедура ДействиеВыполнить(Команда)
	Если ДеревоНастроек.ПолучитьЭлементы().Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, "Не заполнен список моделей!");
		Возврат;
	КонецЕсли;
	
	Если Не ФлажокЛинейныеНормы И Не ФлажокСезонныеНадбавки Тогда
		ПоказатьПредупреждение(Неопределено, "Должен быть включен хотя бы один из флажков 
		|""Изменить линейные нормы расхода топлива"" или
		|""Изменить сезонные надбавки"" !");
		Возврат;
	КонецЕсли;
	
	Если Не флИзменятьНормуОснТоплива И Не флИзменятьНормуДопТоплива Тогда 
		ПоказатьПредупреждение(Неопределено, "Должен быть включен хотя бы один из флажков 
		|""Изменять норму основного топлива"" или
		|""Изменять норму дополнительного топлива"" !");
		Возврат;
	КонецЕсли;
	
	Если ФлажокЛинейныеНормы Тогда
		Если ПереключательПроцент = 0 Тогда
			Если ЗначениеПроцента = 0 Тогда
				ПоказатьПредупреждение(Неопределено, "Не указан процент изменения!");
				Возврат;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаГруппы Из ДеревоНастроек.ПолучитьЭлементы() Цикл
		Если СтрокаГруппы.ЭтоГруппа Тогда
			Для Каждого Строка Из СтрокаГруппы.ПолучитьЭлементы() Цикл
				РассчитатьИзменениеНормыРасходаТоплива(Строка);
			КонецЦикла;	
		Иначе
			РассчитатьИзменениеНормыРасходаТоплива(СтрокаГруппы);
		КонецЕсли;	
	КонецЦикла;
	
	ЗаполнитьТабЧастьСервер();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПереключательПриИзменении()
	Элементы.ЗначениеПроцента.Доступность = (ПереключательПроцент = 0);
	Элементы.ЗначениеНормы.Доступность = (ПереключательПроцент = 1);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабЧастьСервер()
	
	ДеревоНастроек_ = РеквизитФормыВЗначение("ДеревоНастроек");
	ДеревоНастроек_.Строки.Очистить();
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА уатМоделиТС.Родитель.Наименование = """"
	|			ТОГДА """"
	|		ИНАЧЕ уатМоделиТС.Родитель.Наименование
	|	КОНЕЦ КАК Группа,
	|	уатМоделиТС.Ссылка
	|ИЗ
	|	РегистрСведений.уатНормыРасходаГСМ.СрезПоследних КАК уатНормыРасходаГСМСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатМоделиТС КАК уатМоделиТС
	|		ПО уатНормыРасходаГСМСрезПоследних.МодельТС = уатМоделиТС.Ссылка
	|ГДЕ
	|	НЕ уатМоделиТС.ПометкаУдаления";
	   
	Если ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И уатНормыРасходаГСМСрезПоследних.Организация = &Организация";
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;   
	
	Если ЗначениеЗаполнено(МодельТС) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И уатМоделиТС.Ссылка В Иерархии (&МодельТС)";
		Если ТипЗнч(МодельТС) = Тип("СправочникСсылка.уатМоделиТС") Тогда
			Запрос.УстановитьПараметр("МодельТС", МодельТС);
		Иначе 
			Запрос.УстановитьПараметр("МодельТС", МодельТС.уатМодель);
		КонецЕсли;
	КонецЕсли;   
	
	Если Не ТипДвигателя.Пустая() Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И уатМоделиТС.ТипДвигателя В Иерархии (&ТипДвигателя)";
		Запрос.УстановитьПараметр("ТипДвигателя", ТипДвигателя);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипТС) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И уатМоделиТС.ТипТС В Иерархии (&ТипТС)";
		Запрос.УстановитьПараметр("ТипТС", ТипТС);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Топливо) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И (уатМоделиТС.ОсновноеТопливо = &Топливо ИЛИ уатМоделиТС.ДополнительноеТопливо = &Топливо)";
		Запрос.УстановитьПараметр("Топливо", Топливо);
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "                  
		|УПОРЯДОЧИТЬ ПО
		|	Группа,
		|	Ссылка";
	
	Результат = Запрос.Выполнить().Выбрать();
	Родитель = "";
	Пока Результат.Следующий() Цикл
		спр = Результат.Ссылка;
    	Если Не спр.ЭтоГруппа Тогда
			Если спр.Родитель <> Родитель И Не спр.Родитель.Пустая() Тогда
				СтрокаГруппы = ДеревоНастроек_.Строки.Добавить();
				СтрокаГруппы.Настройка = спр.Родитель.Наименование;
				СтрокаГруппы.Включать  = Ложь;
				СтрокаГруппы.ЭтоГруппа = спр.Родитель.ЭтоГруппа;
				Родитель = спр.Родитель;
			КонецЕсли;
			
			Если Не спр.Родитель.Пустая() Тогда
				СтрокаНастройки = СтрокаГруппы.Строки.Добавить();
			Иначе
				СтрокаНастройки = ДеревоНастроек_.Строки.Добавить();
			КонецЕсли;
			СтрокаНастройки.Настройка = спр.Наименование;
			СтрокаНастройки.Включать  = Ложь;
			СтрокаНастройки.ЭтоГруппа = спр.ЭтоГруппа;
			СтрокаНастройки.Значение  = спр;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоНастроек_, "ДеревоНастроек");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабЧасть()
	
	Если Не ЗначениеЗаполнено(МодельТС) И Не ЗначениеЗаполнено(Топливо) 
			И Не ЗначениеЗаполнено(ТипДвигателя) И Не ЗначениеЗаполнено(ТипТС) И Не ЗначениеЗаполнено(Организация) Тогда
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ЗаполнитьТабЧастьЗавершение", ЭтотОбъект),
			НСтр("ru = 'Значения будут изменены для всего справочника.'") + Символы.ПС + НСтр("ru = 'Продолжить?'"),
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Нет
		);
	Иначе 
		ЗаполнитьТабЧастьФрагмент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабЧастьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;	
    
    ЗаполнитьТабЧастьФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабЧастьФрагмент()
    
    ЗаполнитьТабЧастьСервер();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(флПометка)
	СтрокиДерева = ДеревоНастроек.ПолучитьЭлементы();
	Для Каждого ТекСтрока Из СтрокиДерева Цикл
		ТекСтрока.Включать = флПометка;
		ПроставитьПометкиВниз(ТекСтрока);
		ПроставитьПометкиВверх(ТекСтрока);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкиВниз(ТекущиеДанные)
	Потомки = ТекущиеДанные.ПолучитьЭлементы();
	Значение = ТекущиеДанные.Включать;
	Для каждого Потомок из Потомки Цикл
		Потомок.Включать = Значение;
		ПроставитьПометкиВниз(Потомок);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкиВверх(ТекущиеДанные)
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда
		ВсеИстина = Истина;
		НеВсеЛожь = Ложь;
		Потомки = Родитель.ПолучитьЭлементы();
		Для каждого Потомок из Потомки Цикл
			ВсеИстина = ВсеИстина И (Потомок.Включать = 1);
			НеВсеЛожь = НеВсеЛожь ИЛИ Булево(Потомок.Включать);
		КонецЦикла;
		Если ВсеИстина Тогда
			Родитель.Включать = 1;
		ИначеЕсли НеВсеЛожь Тогда
			Родитель.Включать = 2;
		Иначе
			Родитель.Включать = 0;
		КонецЕсли;
		ПроставитьПометкиВверх(Родитель);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьНормуТоплива(СписокНорм, ДатаИзменения, ФлажокЛинейныеНормы, ПереключательПроцент, ЗначениеНормы, ЗначениеПроцента, ФлажокСезонныеНадбавки, СезоннаяНадбавка)
	
	Для Каждого Норма Из СписокНорм Цикл 
		ЛинейнаяНорма                                  = 0;
		НормаНаОтопитель                               = 0;
		НормаНаИзменениеСобственногоВеса               = 0;
		НормаНаТранспортнуюРаботу                      = 0;
		НормаСпециальнаяНаМоточас                      = 0;
		НормаНаСпециальнуюРаботу1                      = 0;
		НормаНаСпециальнуюРаботу2                      = 0;
		НормаНаСпециальнуюРаботу3                      = 0;
		НормаНаСпециальнуюРаботу4                      = 0;
		НормаНаСпециальнуюРаботу5                      = 0;
		НормаНаСпециальнуюРаботу6                      = 0;
		НормаНаСпециальнуюРаботу7                      = 0;
		НормаНаСпециальнуюРаботу8                      = 0;
		НормаНаСпециальнуюРаботу9                      = 0;
		НормаНаСпециальнуюРаботу10                     = 0;
		СпециальнаяРабота1                             = Неопределено;
		СпециальнаяРабота2                             = Неопределено;
		СпециальнаяРабота3                             = Неопределено;
		СпециальнаяРабота4                             = Неопределено;
		СпециальнаяРабота5                             = Неопределено;
		СпециальнаяРабота6                             = Неопределено;
		СпециальнаяРабота7                             = Неопределено;
		СпециальнаяРабота8                             = Неопределено;
		СпециальнаяРабота9                             = Неопределено;
		СпециальнаяРабота10                            = Неопределено;
		НормаНаЕздку                                   = 0;
		НормаНаОперацию                                = 0;
		НормаНаЗапуск                                  = 0;
		НормаНаПростойСВклДвигателем                   = 0;
		НормаСезоннаяНадбавка                          = 0;
		НормаНаПростойСВклДвигателемПроцентомОтБазовой = 0;
		УчитыватьПростоиДляРасчетаНормыМоточасов       = Ложь;
		
		Если ФлажокЛинейныеНормы И Норма.МодельТС.НаличиеСпидометра = Истина Тогда
			Если ПереключательПроцент = 0 Тогда
				Если ЗначениеПроцента > 0 Тогда
					ЛинейнаяНорма = Норма.ЛинейнаяНорма + Норма.ЛинейнаяНорма * ЗначениеПроцента / 100;
				Иначе
					Процент = -ЗначениеПроцента;
					ЛинейнаяНорма = Норма.ЛинейнаяНорма - Норма.ЛинейнаяНорма * Процент /(100+Процент);
				КонецЕсли;
			Иначе
				ЛинейнаяНорма = ЗначениеНормы;
			КонецЕсли;
			
		Иначе
			ЛинейнаяНорма = Норма.ЛинейнаяНорма;
		КонецЕсли;
		
		НормаНаОтопитель                               = Норма.НормаНаОтопитель;
		НормаНаИзменениеСобственногоВеса               = Норма.НормаНаИзменениеСобственногоВеса;
		НормаНаТранспортнуюРаботу                      = Норма.НормаНаТранспортнуюРаботу;
		НормаСпециальнаяНаМоточас                      = Норма.НормаСпециальнаяНаМоточас;
		НормаНаСпециальнуюРаботу1                      = Норма.НормаНаСпециальнуюРаботу1;
		НормаНаСпециальнуюРаботу2                      = Норма.НормаНаСпециальнуюРаботу2;
		НормаНаСпециальнуюРаботу3                      = Норма.НормаНаСпециальнуюРаботу3;
		НормаНаСпециальнуюРаботу4                      = Норма.НормаНаСпециальнуюРаботу4;
		НормаНаСпециальнуюРаботу5                      = Норма.НормаНаСпециальнуюРаботу5;
		НормаНаСпециальнуюРаботу6                      = Норма.НормаНаСпециальнуюРаботу6;
		НормаНаСпециальнуюРаботу7                      = Норма.НормаНаСпециальнуюРаботу7;
		НормаНаСпециальнуюРаботу8                      = Норма.НормаНаСпециальнуюРаботу8;
		НормаНаСпециальнуюРаботу9                      = Норма.НормаНаСпециальнуюРаботу9;
		НормаНаСпециальнуюРаботу10                     = Норма.НормаНаСпециальнуюРаботу10;
		СпециальнаяРабота1                             = Норма.СпециальнаяРабота1;
		СпециальнаяРабота2                             = Норма.СпециальнаяРабота2;
		СпециальнаяРабота3                             = Норма.СпециальнаяРабота3;
		СпециальнаяРабота4                             = Норма.СпециальнаяРабота4;
		СпециальнаяРабота5                             = Норма.СпециальнаяРабота5;
		СпециальнаяРабота6                             = Норма.СпециальнаяРабота6;
		СпециальнаяРабота7                             = Норма.СпециальнаяРабота7;
		СпециальнаяРабота8                             = Норма.СпециальнаяРабота8;
		СпециальнаяРабота9                             = Норма.СпециальнаяРабота9;
		СпециальнаяРабота10                            = Норма.СпециальнаяРабота10;
		НормаНаЕздку                                   = Норма.НормаНаЕздку;
		НормаНаОперацию                                = Норма.НормаНаОперацию;
		НормаНаЗапуск                                  = Норма.НормаНаЗапуск;
		НормаНаПростойСВклДвигателем                   = Норма.НормаНаПростойСВклДвигателем;
		НормаНаПростойСВклДвигателемПроцентомОтБазовой = Норма.НормаНаПростойСВклДвигателемПроцентомОтБазовой;
		УчитыватьПростоиДляРасчетаНормыМоточасов       = Норма.УчитыватьПростоиДляРасчетаНормыМоточасов;
		
		Если ФлажокСезонныеНадбавки Тогда
			НормаСезоннаяНадбавка = СезоннаяНадбавка;
		Иначе
			НормаСезоннаяНадбавка = Норма.СезоннаяНадбавка;
		КонецЕсли;
		
		рсНаборЗаписей = РегистрыСведений.уатНормыРасходаГСМ.СоздатьНаборЗаписей();
		рсНаборЗаписей.Отбор.МодельТС.Установить(Норма.МодельТС);
		рсНаборЗаписей.Отбор.ГСМ.Установить(Норма.ГСМ);
		рсНаборЗаписей.Отбор.Организация.Установить(Норма.Организация);
		рсНаборЗаписей.Отбор.Период.Установить(НачалоДня(ДатаИзменения));
		рсНаборЗаписей.Прочитать();
		
		Если рсНаборЗаписей.Количество() Тогда
			НоваяНорма = рсНаборЗаписей[0];
		Иначе
			НоваяНорма = рсНаборЗаписей.Добавить();
		КонецЕсли;
		
		НоваяНорма.Период                                         = ДатаИзменения;
		НоваяНорма.МодельТС                                       = Норма.МодельТС;
		НоваяНорма.ГСМ                                            = Норма.ГСМ;
		НоваяНорма.Организация                                    = Норма.Организация;
		НоваяНорма.ЛинейнаяНорма                                  = ЛинейнаяНорма;
		НоваяНорма.НормаНаОтопитель                               = НормаНаОтопитель;
		НоваяНорма.НормаНаИзменениеСобственногоВеса               = НормаНаИзменениеСобственногоВеса;
		НоваяНорма.НормаНаТранспортнуюРаботу                      = НормаНаТранспортнуюРаботу;
		НоваяНорма.НормаСпециальнаяНаМоточас                      = НормаСпециальнаяНаМоточас;
		НоваяНорма.НормаНаСпециальнуюРаботу1                      = НормаНаСпециальнуюРаботу1;
		НоваяНорма.НормаНаСпециальнуюРаботу2                      = НормаНаСпециальнуюРаботу2;
		НоваяНорма.НормаНаСпециальнуюРаботу3                      = НормаНаСпециальнуюРаботу3;
		НоваяНорма.НормаНаСпециальнуюРаботу4                      = НормаНаСпециальнуюРаботу4;
		НоваяНорма.НормаНаСпециальнуюРаботу5                      = НормаНаСпециальнуюРаботу5;
		НоваяНорма.НормаНаСпециальнуюРаботу6                      = НормаНаСпециальнуюРаботу6;
		НоваяНорма.НормаНаСпециальнуюРаботу7                      = НормаНаСпециальнуюРаботу7;
		НоваяНорма.НормаНаСпециальнуюРаботу8                      = НормаНаСпециальнуюРаботу8;
		НоваяНорма.НормаНаСпециальнуюРаботу9                      = НормаНаСпециальнуюРаботу9;
		НоваяНорма.НормаНаСпециальнуюРаботу10                     = НормаНаСпециальнуюРаботу10;
		НоваяНорма.СпециальнаяРабота1                             = СпециальнаяРабота1;
		НоваяНорма.СпециальнаяРабота2                             = СпециальнаяРабота2;
		НоваяНорма.СпециальнаяРабота3                             = СпециальнаяРабота3;
		НоваяНорма.СпециальнаяРабота4                             = СпециальнаяРабота4;
		НоваяНорма.СпециальнаяРабота5                             = СпециальнаяРабота5;
		НоваяНорма.СпециальнаяРабота6                             = СпециальнаяРабота6;
		НоваяНорма.СпециальнаяРабота7                             = СпециальнаяРабота7;
		НоваяНорма.СпециальнаяРабота8                             = СпециальнаяРабота8;
		НоваяНорма.СпециальнаяРабота9                             = СпециальнаяРабота9;
		НоваяНорма.СпециальнаяРабота10                            = СпециальнаяРабота10;
		НоваяНорма.НормаНаЕздку                                   = НормаНаЕздку;
		НоваяНорма.НормаНаОперацию                                = НормаНаОперацию;
		НоваяНорма.НормаНаЗапуск                                  = НормаНаЗапуск;
		НоваяНорма.НормаНаПростойСВклДвигателем                   = НормаНаПростойСВклДвигателем;
		НоваяНорма.СезоннаяНадбавка                               = НормаСезоннаяНадбавка;
		НоваяНорма.НормаНаПростойСВклДвигателемПроцентомОтБазовой = НормаНаПростойСВклДвигателемПроцентомОтБазовой;
		НоваяНорма.УчитыватьПростоиДляРасчетаНормыМоточасов       = УчитыватьПростоиДляРасчетаНормыМоточасов;
		
		Попытка
			рсНаборЗаписей.Записать();
		Исключение
			ТекстОшибки = "Не удалось записать изменения.";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНормуТоплива(Мод, Топл, ДатаИзменения, Организация)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Дата",        НачалоДня(ДатаИзменения));
	Запрос.УстановитьПараметр("Модель",      Мод);
	Запрос.УстановитьПараметр("Топливо",     Топл);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатНормыРасходаГСМСрезПоследних.МодельТС,
	|	уатНормыРасходаГСМСрезПоследних.ГСМ,
	|	уатНормыРасходаГСМСрезПоследних.Организация,
	|	уатНормыРасходаГСМСрезПоследних.ЛинейнаяНорма,
	|	уатНормыРасходаГСМСрезПоследних.НормаНаОтопитель,
	|	уатНормыРасходаГСМСрезПоследних.НормаНаИзменениеСобственногоВеса,
	|	уатНормыРасходаГСМСрезПоследних.НормаНаТранспортнуюРаботу,
	|	уатНормыРасходаГСМСрезПоследних.НормаСпециальнаяНаМоточас,
	|	уатНормыРасходаГСМСрезПоследних.НормаНаЕздку,
	|	уатНормыРасходаГСМСрезПоследних.НормаНаОперацию,
	|	уатНормыРасходаГСМСрезПоследних.НормаНаЗапуск,
	|	уатНормыРасходаГСМСрезПоследних.НормаНаПростойСВклДвигателем,
	|	уатНормыРасходаГСМСрезПоследних.СезоннаяНадбавка,
	|	уатНормыРасходаГСМСрезПоследних.НормаНаПростойСВклДвигателемПроцентомОтБазовой,
	|	уатНормыРасходаГСМСрезПоследних.УчитыватьПростоиДляРасчетаНормыМоточасов,
	|	уатНормыРасходаГСМСрезПоследних.СпециальнаяРабота1,
	|	уатНормыРасходаГСМСрезПоследних.СпециальнаяРабота2,
	|	уатНормыРасходаГСМСрезПоследних.СпециальнаяРабота3,
	|	уатНормыРасходаГСМСрезПоследних.СпециальнаяРабота4,
	|	уатНормыРасходаГСМСрезПоследних.СпециальнаяРабота5,
	|	уатНормыРасходаГСМСрезПоследних.СпециальнаяРабота6,
	|	уатНормыРасходаГСМСрезПоследних.СпециальнаяРабота7,
	|	уатНормыРасходаГСМСрезПоследних.СпециальнаяРабота8,
	|	уатНормыРасходаГСМСрезПоследних.СпециальнаяРабота9,
	|	уатНормыРасходаГСМСрезПоследних.СпециальнаяРабота10,
	|	уатНормыРасходаГСМСрезПоследних.НормаНаСпециальнуюРаботу1,
	|	уатНормыРасходаГСМСрезПоследних.НормаНаСпециальнуюРаботу2,
	|	уатНормыРасходаГСМСрезПоследних.НормаНаСпециальнуюРаботу3,
	|	уатНормыРасходаГСМСрезПоследних.НормаНаСпециальнуюРаботу4,
	|	уатНормыРасходаГСМСрезПоследних.НормаНаСпециальнуюРаботу5,
	|	уатНормыРасходаГСМСрезПоследних.НормаНаСпециальнуюРаботу6,
	|	уатНормыРасходаГСМСрезПоследних.НормаНаСпециальнуюРаботу7,
	|	уатНормыРасходаГСМСрезПоследних.НормаНаСпециальнуюРаботу8,
	|	уатНормыРасходаГСМСрезПоследних.НормаНаСпециальнуюРаботу9,
	|	уатНормыРасходаГСМСрезПоследних.НормаНаСпециальнуюРаботу10
	|ИЗ
	|	РегистрСведений.уатНормыРасходаГСМ.СрезПоследних(
	|			&Дата,
	|			МодельТС = &Модель
	|				И ГСМ = &Топливо
	|				И ВЫБОР
	|					КОГДА &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Организация = &Организация
	|				КОНЕЦ) КАК уатНормыРасходаГСМСрезПоследних";
	   
	Результат = Новый Массив();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		ДанныеНормы = Новый Структура();
		ДанныеНормы.Вставить("МодельТС",                                       Выборка.МодельТС);
		ДанныеНормы.Вставить("ГСМ",                                            Выборка.ГСМ);
		ДанныеНормы.Вставить("Организация",                                    Выборка.Организация);
		ДанныеНормы.Вставить("ЛинейнаяНорма",                                  Выборка.ЛинейнаяНорма);
		ДанныеНормы.Вставить("НормаНаОтопитель",                               Выборка.НормаНаОтопитель);
		ДанныеНормы.Вставить("НормаНаИзменениеСобственногоВеса",               Выборка.НормаНаИзменениеСобственногоВеса);
		ДанныеНормы.Вставить("НормаНаТранспортнуюРаботу",                      Выборка.НормаНаТранспортнуюРаботу);
		ДанныеНормы.Вставить("НормаСпециальнаяНаМоточас",                      Выборка.НормаСпециальнаяНаМоточас);
		ДанныеНормы.Вставить("НормаНаЕздку",                                   Выборка.НормаНаЕздку);
		ДанныеНормы.Вставить("НормаНаОперацию",                                Выборка.НормаНаОперацию);
		ДанныеНормы.Вставить("НормаНаЗапуск",                                  Выборка.НормаНаЗапуск);
		ДанныеНормы.Вставить("НормаНаПростойСВклДвигателем",                   Выборка.НормаНаПростойСВклДвигателем);
		ДанныеНормы.Вставить("СезоннаяНадбавка",                               Выборка.СезоннаяНадбавка);
		ДанныеНормы.Вставить("НормаНаПростойСВклДвигателемПроцентомОтБазовой", Выборка.НормаНаПростойСВклДвигателемПроцентомОтБазовой);
		ДанныеНормы.Вставить("УчитыватьПростоиДляРасчетаНормыМоточасов",       Выборка.УчитыватьПростоиДляРасчетаНормыМоточасов);
		ДанныеНормы.Вставить("СпециальнаяРабота1",                             Выборка.СпециальнаяРабота1);
		ДанныеНормы.Вставить("СпециальнаяРабота2",                             Выборка.СпециальнаяРабота2);
		ДанныеНормы.Вставить("СпециальнаяРабота3",                             Выборка.СпециальнаяРабота3);
		ДанныеНормы.Вставить("СпециальнаяРабота4",                             Выборка.СпециальнаяРабота4);
		ДанныеНормы.Вставить("СпециальнаяРабота5",                             Выборка.СпециальнаяРабота5);
		ДанныеНормы.Вставить("СпециальнаяРабота6",                             Выборка.СпециальнаяРабота6);
		ДанныеНормы.Вставить("СпециальнаяРабота7",                             Выборка.СпециальнаяРабота7);
		ДанныеНормы.Вставить("СпециальнаяРабота8",                             Выборка.СпециальнаяРабота8);
		ДанныеНормы.Вставить("СпециальнаяРабота9",                             Выборка.СпециальнаяРабота9);
		ДанныеНормы.Вставить("СпециальнаяРабота10",                            Выборка.СпециальнаяРабота10);
		ДанныеНормы.Вставить("НормаНаСпециальнуюРаботу1",                      Выборка.НормаНаСпециальнуюРаботу1);
		ДанныеНормы.Вставить("НормаНаСпециальнуюРаботу2",                      Выборка.НормаНаСпециальнуюРаботу2);
		ДанныеНормы.Вставить("НормаНаСпециальнуюРаботу3",                      Выборка.НормаНаСпециальнуюРаботу3);
		ДанныеНормы.Вставить("НормаНаСпециальнуюРаботу4",                      Выборка.НормаНаСпециальнуюРаботу4);
		ДанныеНормы.Вставить("НормаНаСпециальнуюРаботу5",                      Выборка.НормаНаСпециальнуюРаботу5);
		ДанныеНормы.Вставить("НормаНаСпециальнуюРаботу6",                      Выборка.НормаНаСпециальнуюРаботу6);
		ДанныеНормы.Вставить("НормаНаСпециальнуюРаботу7",                      Выборка.НормаНаСпециальнуюРаботу7);
		ДанныеНормы.Вставить("НормаНаСпециальнуюРаботу8",                      Выборка.НормаНаСпециальнуюРаботу8);
		ДанныеНормы.Вставить("НормаНаСпециальнуюРаботу9",                      Выборка.НормаНаСпециальнуюРаботу9);
		ДанныеНормы.Вставить("НормаНаСпециальнуюРаботу10",                     Выборка.НормаНаСпециальнуюРаботу10);
		
		Результат.Добавить(ДанныеНормы);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура РассчитатьИзменениеНормыРасходаТоплива(Строка1)
	
	Если Строка1.Включать = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Модель = Строка1.Значение;
	ОснТопливо = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Модель, "ОсновноеТопливо");
	ДопТопливо = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Модель, "ДополнительноеТопливо");
	
	Если Не ЗначениеЗаполнено(Топливо) Тогда
		Если флИзменятьНормуОснТоплива И Не уатОбщегоНазначения.уатЗначениеНеЗаполнено(ОснТопливо) Тогда
			СписокНорм = ПолучитьНормуТоплива(Модель, ОснТопливо, ДатаИзменения, Организация);
			ИзменитьНормуТоплива(СписокНорм, ДатаИзменения, ФлажокЛинейныеНормы, ПереключательПроцент, ЗначениеНормы, ЗначениеПроцента, ФлажокСезонныеНадбавки, СезоннаяНадбавка);
		КонецЕсли;
		
		Если флИзменятьНормуДопТоплива И Не уатОбщегоНазначения.уатЗначениеНеЗаполнено(ДопТопливо) Тогда
			СписокНорм = ПолучитьНормуТоплива(Модель, ДопТопливо, ДатаИзменения, Организация);
			ИзменитьНормуТоплива(СписокНорм, ДатаИзменения, ФлажокЛинейныеНормы, ПереключательПроцент, ЗначениеНормы, ЗначениеПроцента, ФлажокСезонныеНадбавки, СезоннаяНадбавка);
		КонецЕсли;
	Иначе
		Если (ОснТопливо = Топливо И флИзменятьНормуОснТоплива) Или (ДопТопливо = Топливо И флИзменятьНормуДопТоплива) Тогда
			СписокНорм = ПолучитьНормуТоплива(Модель, Топливо, ДатаИзменения, Организация);
			ИзменитьНормуТоплива(СписокНорм, ДатаИзменения, ФлажокЛинейныеНормы, ПереключательПроцент, ЗначениеНормы, ЗначениеПроцента, ФлажокСезонныеНадбавки, СезоннаяНадбавка);
		Иначе
			ПоказатьПредупреждение(
				,
				НСтр("ru = 'Вид топлива в отборе не соответствует виду топлива для изменения.'")
			);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОповещенияВыбораГСМ(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Топливо = Результат;
КонецПроцедуры

#КонецОбласти
