///////////////////////////////////////////////////////////////////////////////
// Стандартное

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(ПодключаемоеОборудованиеУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	//ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	//МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеСлужебныйКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.пкДоставка.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		Элементы.Список.ТекущаяСтрока = МассивСсылок[0];
		ПоказатьЗначение(Неопределено, МассивСсылок[0]);
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти
///////////////////////////////////////////////////////////////////////////////
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма, "ФормаСписка");
	
	// СтандартныеПодсистемы.Печать
	СписокОбъектов = Новый Массив;
	СписокОбъектов.Добавить(Метаданные.Документы.пкДоставка);
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать, СписокОбъектов);
	// Конец СтандартныеПодсистемы.Печать

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаГлобальныеКоманды);
	// Конец ИнтеграцияС1СДокументооборотом

	// Подсистема "ОбменСКонтрагентами".
	ПараметрыПриСозданииНаСервере = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСписка();
	ПараметрыПриСозданииНаСервере.Форма = ЭтотОбъект;
	ПараметрыПриСозданииНаСервере.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаСписка(ПараметрыПриСозданииНаСервере);
	// Конец подсистема "ОбменСКонтрагентами".
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ОбъектыМетаданных = Новый Массив;
	ОбъектыМетаданных.Добавить(Метаданные.Документы.пкДоставка);
	
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = ОбъектыМетаданных;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Если Не ЗначениеЗаполнено(Объект.ДатаДоставки) Тогда
		Объект.ДатаДоставки = ТекущаяДата() + 1 * 24*60*60;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Объект.Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Пользователи.ТекущийПользователь());
	КонецЕсли;
	
	ОбновитьДанныеТаблицыЗаданияНаПеревозку();
	ОбновитьДанныеТаблицыФормированиеДоставки();
	УстановитьОтборПоПодразделениюДляСписка();
	
	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.ФормированиеДоставкиПланируемоеВремяДоставки, 60);
	УстановитьВидимостьЗаданийНаПеревозку();
	УстановитьВидимостьВесоГабаритов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	
	текПодразделение	= Объект.Подразделение;
	текДатаДоставки		= Объект.ДатаДоставки;
	
	ОтобразитьПанелиНастроекСписка();
	
	КомандаБезГруппировки("");	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьЗаданий(Команда)
	Элементы.ВидимостьЗаданий.Пометка = Не Элементы.ВидимостьЗаданий.Пометка;
	УстановитьВидимостьЗаданийНаПеревозку();
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЗаданийНаПеревозку()
	
	Элементы.ГруппаЗаданияНаПеревозку.Видимость			= Элементы.ВидимостьЗаданий.Пометка;
	Элементы.ГруппаУправлениеФормированием.Видимость	= Элементы.ВидимостьЗаданий.Пометка;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизитаНаСервере(тОбъект, ИмяРевизита)
	
	Возврат тОбъект[ИмяРевизита];
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Формирование исходных таблиц значений

&НаКлиенте
Процедура ОбновитьДанныеТекущихЗаданийНаПеревозку(Команда)
	
	тТранспорт = ОпределитьЗначениеРеквизитаРодителя(Элементы.ФормированиеДоставки.ТекущиеДанные, "Транспорт");
	
	ОбновитьДанныеТаблицыЗаданияНаПеревозку();
	ОбновитьДанныеТаблицыФормированиеДоставки();
	ЭтаФорма.ОбновитьОтображениеДанных();
	
	текЭлементы = ФормированиеДоставкиДерево.ПолучитьЭлементы();
	Для Каждого текЭлемент из текЭлементы Цикл
		Элементы.ФормированиеДоставки.Развернуть(текЭлемент.ПолучитьИдентификатор(), Ложь);
		Если тТранспорт <> Неопределено И ЗначениеЗаполнено(тТранспорт) И текЭлемент.Транспорт = тТранспорт Тогда
			Элементы.ФормированиеДоставки.ТекущаяСтрока = текЭлемент.ПолучитьИдентификатор(); //Активируем строку транспорта до обновления
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеТаблицыЗаданияНаПеревозку()
	
	ПараметрЗапроса = ЗаданияНаПеревозку.Параметры.Элементы.Найти("ДатаДоставки");
//Рарус Владимир Подрезов 15.09.2017 5723
	//ПараметрЗапроса.Значение		= ?(ЗначениеЗаполнено(Объект.ДатаДоставки), Объект.ДатаДоставки, ТекущаяДата());
	ПараметрЗапроса.Значение		= КонецДня(?(ЗначениеЗаполнено(Объект.ДатаДоставки), Объект.ДатаДоставки, ТекущаяДата()));
//Рарус Владимир Подрезов Конец
	ПараметрЗапроса.Использование	= Истина;
	ПараметрЗапроса = ЗаданияНаПеревозку.Параметры.Элементы.Найти("Подразделение");
	ПараметрЗапроса.Значение		= Объект.Подразделение;
	ПараметрЗапроса.Использование	= Истина;
	Элементы.ЗаданияНаПеревозку.Обновить();
	
	Элементы.ЗаданияНаПеревозкуЗаданиеНаПеревозкуОтгрузкаПодтверждена.Видимость = ЗначениеЗаполнено(Объект.Подразделение) И Объект.Подразделение.пкТребуетсяПодтверждениеОтгрузки;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеТаблицыФормированиеДоставки()
	
	ИнфоНаличиеНезаконченнойДоставки = ""; РазделительС = "";
	
	ЗапросФормирование = Новый Запрос;
	ЗапросФормирование.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	пкФормированиеДоставки.ДатаДоставки
	|ИЗ
	|	РегистрСведений.пкФормированиеДоставки КАК пкФормированиеДоставки
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(пкФормированиеДоставки.ДатаДоставки, ДЕНЬ) <> &ДатаДоставки
	|	И пкФормированиеДоставки.Подразделение = &Подразделение";
	ЗапросФормирование.УстановитьПараметр("ДатаДоставки", НачалоДня(Объект.ДатаДоставки));
	ЗапросФормирование.УстановитьПараметр("Подразделение", Объект.Подразделение);
	РезЗапроса = ЗапросФормирование.Выполнить().Выбрать();
	Пока РезЗапроса.Следующий() Цикл
		
		Если РазделительС = "" Тогда
			ИнфоНаличиеНезаконченнойДоставки = НСтр("ru='Не Добавлено в доставку: '");
		КонецЕсли;
		
		ИнфоНаличиеНезаконченнойДоставки = ИнфоНаличиеНезаконченнойДоставки + РазделительС + Формат(РезЗапроса.ДатаДоставки, "ДЛФ=D"); 
		РазделительС = ", ";
		
	КонецЦикла;;
	
	тФормированиеДоставкиДерево = ДанныеФормыВЗначение(ФормированиеДоставкиДерево, Тип("ДеревоЗначений"));
	тФормированиеДоставкиДерево.Строки.Очистить();
	
	ЗапросФормирование = Новый Запрос;
	ЗапросФормирование.Текст = 
	"ВЫБРАТЬ
	|	&ДатаДоставки КАК ДатаДоставки,
	|	&Подразделение КАК Подразделение,
	|	ТранспортныеСредства.Ссылка КАК Транспорт,
	|	ВЫБОР
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
	|			ТОГДА ""Отправка""
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
	|			ТОГДА ""Возврат""
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА ""Возврат""
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
	|				И пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
	|			ТОГДА ""Отправка""
	|		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами)
	|			ТОГДА ""Перемещение""
	|	КОНЕЦ КАК ВидОперации,
	|	пкЗаданиеНаПеревозку.Модель КАК Модель,
	|	пкЗаявкаНаАрендуТехники.Партнер КАК Клиент,
	|	пкЗаявкаНаАрендуТехники.КонтактноеЛицо КАК КонтактноеЛицо,
	|	пкЗаявкаНаАрендуТехники.ВтороеКонтактноеЛицо КАК ВтороеКонтактноеЛицо,
	|	пкЗаявкаНаАрендуТехники.ОбъектСтроительства КАК ОбъектСтроительства,
	|	пкФормированиеДоставки.Водитель КАК Водитель,
	|	пкФормированиеДоставки.Перевозчик КАК Перевозчик,
	|	пкФормированиеДоставки.НомерХодки КАК НомерХодки,
	|	пкФормированиеДоставки.ТочкаМаршрута КАК ТочкаМаршрута,
	|	ПОДСТРОКА(пкЗаданиеНаПеревозку.АдресДоставки, 1, 1000) КАК АдресДоставки,
	|	пкФормированиеДоставки.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку,
	|	пкФормированиеДоставки.ЗаданиеНаПеревозку.ВремяДоставкиПо КАК ДоставитьДо,
	|	пкФормированиеДоставки.ЗаданиеНаПеревозку.Модель.пкВес КАК Вес,
	|	пкФормированиеДоставки.ЗаданиеНаПеревозку.Модель.пкТранспортнаяДлина * пкФормированиеДоставки.ЗаданиеНаПеревозку.Модель.пкТранспортнаяШирина * пкФормированиеДоставки.ЗаданиеНаПеревозку.Модель.пкТранспортнаяВысота КАК Объем,
	|	уатМестонахождениеТССрезПоследних.Подразделение КАК ПодразделениеТС
	|ИЗ
	|	Справочник.ТранспортныеСредства КАК ТранспортныеСредства
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкФормированиеДоставки КАК пкФормированиеДоставки
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкЗаданиеНаПеревозку КАК пкЗаданиеНаПеревозку
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкЗаявкаНаАрендуТехники КАК пкЗаявкаНаАрендуТехники
	|				ПО пкЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники = пкЗаявкаНаАрендуТехники.Ссылка
	|			ПО пкФормированиеДоставки.ЗаданиеНаПеревозку = пкЗаданиеНаПеревозку.Ссылка
	|		ПО (пкФормированиеДоставки.Транспорт = ТранспортныеСредства.Ссылка)
	|			И (НАЧАЛОПЕРИОДА(пкФормированиеДоставки.ДатаДоставки, ДЕНЬ) = &ДатаДоставки)
	|			И (пкФормированиеДоставки.Подразделение = &Подразделение)
//Рарус Владимир Подрезов 15.09.2017 5723
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних(&ДатаДоставки, ) КАК уатМестонахождениеТССрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних(КОНЕЦПЕРИОДА(&ДатаДоставки, ДЕНЬ), ) КАК уатМестонахождениеТССрезПоследних
//Рарус Владимир Подрезов Конец
	|		ПО (уатМестонахождениеТССрезПоследних.ТС = ТранспортныеСредства.Ссылка)
	|ГДЕ
	|	уатМестонахождениеТССрезПоследних.Подразделение = &Подразделение" + ?(ЗначениеЗаполнено(Константы.пкГрузоваяКолонна.Получить()), " И ТранспортныеСредства.уатКолонна = &Колонна", "")+"
	|УПОРЯДОЧИТЬ ПО
	|	Транспорт,
	|	НомерХодки,
	|	ДоставитьДо
	|ИТОГИ ПО
	|	Транспорт,
	|	НомерХодки,
	|	ДоставитьДо,
	|	ВидОперации,
	|	Модель,
	|	Клиент,
	|	ОбъектСтроительства,
	|	АдресДоставки";
	
	ЗапросФормирование.УстановитьПараметр("ДатаДоставки", НачалоДня(Объект.ДатаДоставки));
	ЗапросФормирование.УстановитьПараметр("Подразделение", Объект.Подразделение);
	ЗапросФормирование.УстановитьПараметр("Колонна", Константы.пкГрузоваяКолонна.Получить());
    
    //ТаблицаМоделейНаОдинАдрес = Новый ТаблицаЗначений();
    //ТаблицаМоделейНаОдинАдрес.Колонки.Добавить("Модель",     Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
    //ТаблицаМоделейНаОдинАдрес.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	
	ВыборкаПоТранспорту = ЗапросФормирование.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоТранспорту.Следующий() Цикл
		
		СтрокаТранспорта = тФормированиеДоставкиДерево.Строки.Добавить();
		СтрокаТранспорта.Транспорт = ВыборкаПоТранспорту.Транспорт;
		
		ВыборкаПоНомерХодки = ВыборкаПоТранспорту.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоНомерХодки.Следующий() Цикл
			ВыборкаПоДоставитьДо = ВыборкаПоНомерХодки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоДоставитьДо.Следующий() Цикл
				ВыборкаПоВидОперации = ВыборкаПоДоставитьДо.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоВидОперации.Следующий() Цикл
					ВыборкаПоМодель = ВыборкаПоВидОперации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаПоМодель.Следующий() Цикл
						ВыборкаПоКлиент = ВыборкаПоМодель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ВыборкаПоКлиент.Следующий() Цикл
							ВыборкаПоОбъектСтроительства = ВыборкаПоКлиент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
							Пока ВыборкаПоОбъектСтроительства.Следующий() Цикл
								ВыборкаПоАдресДоставки = ВыборкаПоОбъектСтроительства.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
								Пока ВыборкаПоАдресДоставки.Следующий() Цикл
					
									СтрокаАдреса = "";
					                
									ВсеПодтверждены			= Истина;
									ОбщееВремя				= '00010101';
									КомментарийВодителю		= "";
									КоличествоЗаданий		= 0;
									КонтактноеЛицо			= "";
									ВтороеКонтактноеЛицо	= "";
									
									ВыборкаПоЗаданиям = ВыборкаПоАдресДоставки.Выбрать();
									Пока ВыборкаПоЗаданиям.Следующий() Цикл
										
										Если ВыборкаПоЗаданиям.ЗаданиеНаПеревозку = Null Тогда
											Продолжить;
					                    КонецЕсли;
										
										Если СтрокаАдреса = "" Тогда
											СтрокаАдреса = СтрокаТранспорта.Строки.Добавить();
										КонецЕсли;
						                
										СтрокаТранспорта.Водитель	= ВыборкаПоЗаданиям.Водитель;
										СтрокаТранспорта.Перевозчик	= ВыборкаПоЗаданиям.Перевозчик;
										СтрокаАдреса.АдресДоставки	= ВыборкаПоЗаданиям.АдресДоставки;
										СтрокаАдреса.ТочкаМаршрута	= ВыборкаПоЗаданиям.ТочкаМаршрута;
										
										СтрокаЗадания = СтрокаАдреса.Строки.Добавить();
										СтрокаЗадания.ЗаданиеНаПеревозку			= ВыборкаПоЗаданиям.ЗаданиеНаПеревозку;
										
										СтрокаЗадания.ПланируемоеВремяДоставки		= ВыборкаПоЗаданиям.ЗаданиеНаПеревозку.ВремяДоставкиПо;
										СтрокаЗадания.ПредставлениеСтрокиДоставки	= "";
										СтрокаЗадания.ПодтвержденоКлиентом			= ВыборкаПоЗаданиям.ЗаданиеНаПеревозку.ПодтвержденоКлиентом;
										СтрокаЗадания.КомментарийВодителю			= ВыборкаПоЗаданиям.ЗаданиеНаПеревозку.КомментарийВодителю;
										СтрокаЗадания.Партнер						= ВыборкаПоКлиент.Клиент;
										
										СтрокаЗадания.НомерХодки					= ВыборкаПоНомерХодки.НомерХодки;
										СтрокаЗадания.ТочкаМаршрута					= ВыборкаПоЗаданиям.ТочкаМаршрута;
										СтрокаЗадания.Вес							= ВыборкаПоЗаданиям.Вес;
										СтрокаЗадания.Объем							= ВыборкаПоЗаданиям.Объем;
										
										ВсеПодтверждены			= ВсеПодтверждены И СтрокаЗадания.ПодтвержденоКлиентом;
										КоличествоЗаданий		= КоличествоЗаданий + 1;
										
										ОбщееВремя				= СтрокаЗадания.ПланируемоеВремяДоставки;
										КомментарийВодителю 	= СтрокаЗадания.КомментарийВодителю;
										
										КонтактноеЛицо			= ВыборкаПоЗаданиям.КонтактноеЛицо;
										ВтороеКонтактноеЛицо	= ВыборкаПоЗаданиям.ВтороеКонтактноеЛицо;
										
										СтрокаЗадания.Контакт1						= ?(ЗначениеЗаполнено(КонтактноеЛицо), КонтактноеЛицо.Наименование, "") + " Тел: " + ПолучитьТелефонИзКонтактнойИнформации(КонтактноеЛицо);
								        СтрокаЗадания.Контакт2						= ?(ЗначениеЗаполнено(ВтороеКонтактноеЛицо), ", " + ВтороеКонтактноеЛицо.Наименование + " Тел: " + ПолучитьТелефонИзКонтактнойИнформации(ВтороеКонтактноеЛицо), "");
											
									КонецЦикла;
									
									Если СтрокаАдреса <> "" Тогда
										СтрокаАдреса.ПодтвержденоКлиентом			= ВсеПодтверждены;
										СтрокаАдреса.ПредставлениеСтрокиДоставки	= СокрЛП(ВыборкаПоВидОперации.ВидОперации) + ", " +
																						СокрЛП(ВыборкаПоМодель.Модель) + " - " + КоличествоЗаданий + " шт.," +
																						СокрЛП(ВыборкаПоКлиент.Клиент) + ", (" +
																						СокрЛП(ВыборкаПоОбъектСтроительства.ОбъектСтроительства) + ")";
																						
										СтрокаАдреса.НомерХодки						= ВыборкаПоНомерХодки.НомерХодки;
										СтрокаАдреса.ПланируемоеВремяДоставки		= ОбщееВремя;
										СтрокаАдреса.КомментарийВодителю			= КомментарийВодителю;
										СтрокаАдреса.Модель							= ВыборкаПоМодель.Модель;
										СтрокаАдреса.КоличествоЗаданий				= КоличествоЗаданий;
										
										СтрокаАдреса.Контакт1						= ?(ЗначениеЗаполнено(КонтактноеЛицо), КонтактноеЛицо.Наименование, "") + " Тел: " + ПолучитьТелефонИзКонтактнойИнформации(КонтактноеЛицо);
								        СтрокаАдреса.Контакт2						= ?(ЗначениеЗаполнено(ВтороеКонтактноеЛицо), ", " + ВтороеКонтактноеЛицо.Наименование + " Тел: " + ПолучитьТелефонИзКонтактнойИнформации(ВтороеКонтактноеЛицо), "");
											
										Если ВыборкаПоВидОперации.ВидОперации = "Отправка" Тогда 
											СтрокаАдреса.НомерКартинки = 1;
											СтрокаАдреса.ДоставкаВозврат = 1;
										ИначеЕсли ВыборкаПоВидОперации.ВидОперации = "Возврат" Тогда
											СтрокаАдреса.НомерКартинки = 2;
											СтрокаАдреса.ДоставкаВозврат = 2;
										ИначеЕсли ВыборкаПоВидОперации.ВидОперации = "Перемещение" Тогда
											СтрокаАдреса.НомерКартинки = 1;
											СтрокаАдреса.ДоставкаВозврат = 1;
										КонецЕсли;
										
									КонецЕсли;
								КонецЦикла;
							КонецЦикла;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(СтрокаТранспорта.Водитель) Тогда
			ЗапросВодитель = Новый Запрос;
			ЗапросВодитель.Текст = 
			"ВЫБРАТЬ
			|	уатЭкипажТС.Сотрудник
			|ИЗ
			|	РегистрСведений.уатЭкипажТС КАК уатЭкипажТС
			|ГДЕ
			|	уатЭкипажТС.ТС = &ТС
			|	И уатЭкипажТС.ЧленЭкипажа = &ЧленЭкипажа";
			ЗапросВодитель.УстановитьПараметр("ТС", СтрокаТранспорта.Транспорт);
			ЗапросВодитель.УстановитьПараметр("ЧленЭкипажа", Перечисления.уатЧленыЭкипажа.ОсновнойВодитель);
			РезЗапроса = ЗапросВодитель.Выполнить().Выбрать();
			Если РезЗапроса.Следующий() Тогда
				СтрокаТранспорта.Водитель = РезЗапроса.Сотрудник.ФизическоеЛицо;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СписокДляУдаления = Новый СписокЗначений;
	Для Каждого текСтрока Из тФормированиеДоставкиДерево.Строки Цикл
		Если ЗначениеЗаполнено(текСтрока.Транспорт)
				И ТипЗНЧ(текСтрока.Транспорт) = Тип("СправочникСсылка.ТранспортныеСредства")
			    И текСтрока.Транспорт.пкНеИспользоватьВЛогистике
				И текСтрока.Строки.Количество() = 0 
		Тогда
			СписокДляУдаления.Добавить(текСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого текСтрока Из СписокДляУдаления Цикл
		тФормированиеДоставкиДерево.Строки.Удалить(текСтрока.Значение);
	КонецЦикла;
	
	ЗначениеВДанныеФормы(тФормированиеДоставкиДерево, ФормированиеДоставкиДерево);
	ЗаполнитьДополнительныеДанныеТранспорта();
	Элементы.ФормированиеДоставки.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительныеДанныеТранспорта()
	
	тФормированиеДоставкиДерево = ДанныеФормыВЗначение(ФормированиеДоставкиДерево, Тип("ДеревоЗначений"));
	
	//В Первом проходе определяем вес в Точках Маршрута: по принципу что в машине по направлению к точке
	Для Каждого текТранспорт Из тФормированиеДоставкиДерево.Строки Цикл
		
		Если Не ЗначениеЗаполнено(текТранспорт.Транспорт) Тогда
			Продолжить;
		КонецЕсли;
		
		текТранспорт.Объем	= ?(текТранспорт.Транспорт.пкКоэффициентЗагрузкиТС <> 0, текТранспорт.Транспорт.пкКоэффициентЗагрузкиТС, 1) * текТранспорт.Транспорт.ВместимостьВКубическихМетрах;
		текТранспорт.Вес	= текТранспорт.Транспорт.ГрузоподъемностьВТоннах;
		
		текНомерХодки = -1;
		ВесВозврата		= 0;
		ОбъемВозврата	= 0;
			
		Для Каждого текСтрока Из текТранспорт.Строки Цикл
			
			//Обнулим счетчики при изменении Номера ходки
			Если текНомерХодки <> текСтрока.НомерХодки Тогда
				
				текНомерХодки 	= текСтрока.НомерХодки;
				
				ВесВозврата		= 0;
				ОбъемВозврата	= 0;
				
				текСтрока.Вес			= ВесВозврата;
				текСтрока.Объем			= ОбъемВозврата;
				текСтрока.ПеревесИнфо	= "";
				Разделитель				= "";
				
				Если (?(текТранспорт.Транспорт.пкКоэффициентЗагрузкиТС <> 0, текТранспорт.Транспорт.пкКоэффициентЗагрузкиТС, 1) * текТранспорт.Транспорт.ВместимостьВКубическихМетрах < ОбъемВозврата) Тогда
					текСтрока.ПеревесИнфо	= текСтрока.ПеревесИнфо + Разделитель + НСтр("ru='Превышен объем возврата (с учетом коэффициента вместимости)'");
					Разделитель = ", ";
				КонецЕсли;
				
				Если (текТранспорт.Транспорт.ГрузоподъемностьВТоннах < ВесВозврата) Тогда
					текСтрока.ПеревесИнфо	= текСтрока.ПеревесИнфо + Разделитель + НСтр("ru='Превышен максимальный Вес возврата'");
					Разделитель = ", ";
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			ВесПоТочке		= 0;
			ОбъемПоТочке	= 0;
			
			Для Каждого текТочка Из текТранспорт.Строки Цикл
				
				Если текТочка.НомерХодки <> текСтрока.НомерХодки Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого текСтрокаЗаданий Из текТочка.Строки Цикл
					
					Если Не ЗначениеЗаполнено(текСтрокаЗаданий.ЗаданиеНаПеревозку) Тогда
						Продолжить;
					КонецЕсли;
					
					Если текСтрокаЗаданий.НомерХодки <> текСтрока.НомерХодки Тогда
						Продолжить;
					КонецЕсли;
					
					Если текСтрокаЗаданий.ТочкаМаршрута < текСтрока.ТочкаМаршрута Тогда
						
						Если текСтрокаЗаданий.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента Тогда
							//Техника, которая раньше была забрана для возврата
							ВесПоТочке 		= ВесПоТочке + текСтрокаЗаданий.Вес;
							ОбъемПоТочке	= ОбъемПоТочке + текСтрокаЗаданий.Объем;
						КонецЕсли;
						
						Если (текСтрокаЗаданий.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.Перекат 
							И НЕ ЗначениеЗаполнено(текСтрокаЗаданий.ЗаданиеНаПеревозку.ЗаданиеНаПеревозку))
						Тогда
							//Техника, которая раньше была забрана для Переката
							ПерекатЗакончен = Ложь;
							Для Каждого ТочкаКонецПереката Из текТранспорт.Строки Цикл
								Если ТочкаКонецПереката.НомерХодки <> текСтрока.НомерХодки Тогда
									Продолжить;
								КонецЕсли;
								
								Если ТочкаКонецПереката.ТочкаМаршрута > текСтрока.ТочкаМаршрута ИЛИ ПерекатЗакончен = Истина Тогда
									Прервать; //нет смысла дальше смотреть - оно или точно еще в машине, или уже точно нет)
								КонецЕсли;
								Для Каждого КонецПереката Из ТочкаКонецПереката.Строки Цикл
									Если КонецПереката.ЗаданиеНаПеревозку.ЗаданиеНаПеревозку = текСтрокаЗаданий.ЗаданиеНаПеревозку Тогда
										ПерекатЗакончен = Истина;
										Прервать;
									КонецЕсли;
								КонецЦикла;
							КонецЦикла;
							Если Не ПерекатЗакончен Тогда
								//Оно еще в машине!?)
								ВесПоТочке 		= ВесПоТочке + текСтрокаЗаданий.Вес;
								ОбъемПоТочке	= ОбъемПоТочке + текСтрокаЗаданий.Объем;
							КонецЕсли;
						КонецЕсли;
						
					ИначеЕсли текСтрокаЗаданий.ТочкаМаршрута = текСтрока.ТочкаМаршрута Тогда
						
						Если текСтрокаЗаданий.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту
							ИЛИ текСтрокаЗаданий.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами
							ИЛИ (текСтрокаЗаданий.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.Перекат И ЗначениеЗаполнено(текСтрокаЗаданий.ЗаданиеНаПеревозку.ЗаданиеНаПеревозку))
						Тогда
							//Техника, которая должна быть отгружена именно в данной точке маршрута
							ВесПоТочке 		= ВесПоТочке + текСтрокаЗаданий.Вес;
							ОбъемПоТочке	= ОбъемПоТочке + текСтрокаЗаданий.Объем;
						ИначеЕсли текСтрокаЗаданий.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента Тогда
							ВесВозврата		= ВесВозврата + текСтрокаЗаданий.Вес;
							ОбъемВозврата	= ОбъемВозврата + текСтрокаЗаданий.Объем;
						КонецЕсли;
						
					ИначеЕсли текСтрокаЗаданий.ТочкаМаршрута > текСтрока.ТочкаМаршрута Тогда
						
						Если текСтрокаЗаданий.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту
							ИЛИ текСтрокаЗаданий.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами
						Тогда
							//Техника, которая едет с базы и должна быть отгружена позже
							ВесПоТочке 		= ВесПоТочке + текСтрокаЗаданий.Вес;
							ОбъемПоТочке	= ОбъемПоТочке + текСтрокаЗаданий.Объем;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если НЕ ЕстьДоступныеСпособыПогрузки(текСтрокаЗаданий.ЗаданиеНаПеревозку, текТранспорт.Транспорт) Тогда
					текСтрокаЗаданий.ПеревесИнфо	= НСтр("ru='Нет доступного способа погрузки/разгрузки'");
					Разделитель = ", ";
				КонецЕсли;
			КонецЦикла;
			
			текСтрока.Вес			= ВесПоТочке;
			текСтрока.Объем			= ОбъемПоТочке;
			текСтрока.ПеревесИнфо	= "";
			Разделитель				= "";
			
			Если (?(текТранспорт.Транспорт.пкКоэффициентЗагрузкиТС <> 0, текТранспорт.Транспорт.пкКоэффициентЗагрузкиТС, 1) * текТранспорт.Транспорт.ВместимостьВКубическихМетрах < текСтрока.Объем) Тогда
				текСтрока.ПеревесИнфо	= текСтрока.ПеревесИнфо + Разделитель + НСтр("ru='Превышен объем (с учетом коэффициента вместимости)'");
				Разделитель = ", ";
			КонецЕсли;
			
			Если (текТранспорт.Транспорт.ГрузоподъемностьВТоннах < текСтрока.Вес) Тогда
				текСтрока.ПеревесИнфо	= текСтрока.ПеревесИнфо + Разделитель + НСтр("ru='Превышен максимальный Вес'");
				Разделитель = ", ";
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого текТранспорт Из тФормированиеДоставкиДерево.Строки Цикл
        Для Каждого текТочка Из текТранспорт.Строки Цикл
            
            //ДоставкаВозврат = 0;
			
			ОсобыеУсловияТочка	= 0;
			
			ОбщийКомментарийСписок	= Новый СписокЗначений;
			РазделительК		= "";
			ОсобыеУсловияСписок	= Новый СписокЗначений;
			РазделительОУК		= "";
			МаксимальныйСрок	= 0;
			
			Для Каждого текСтрокаЗаданий Из текТочка.Строки Цикл
				
				Если Не ЗначениеЗаполнено(текСтрокаЗаданий.ЗаданиеНаПеревозку) Тогда
					Продолжить;
				КонецЕсли;
				
				Если текСтрокаЗаданий.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту Тогда 
					текСтрокаЗаданий.НомерКартинки = 1;
				ИначеЕсли текСтрокаЗаданий.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента Тогда
					текСтрокаЗаданий.НомерКартинки = 2;
				ИначеЕсли текСтрокаЗаданий.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.Перекат
					И НЕ ЗначениеЗаполнено(текСтрокаЗаданий.ЗаданиеНаПеревозку.ЗаданиеНаПеревозку) Тогда
					текСтрокаЗаданий.НомерКартинки = 4;
				ИначеЕсли текСтрокаЗаданий.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.Перекат 
					И ЗначениеЗаполнено(текСтрокаЗаданий.ЗаданиеНаПеревозку.ЗаданиеНаПеревозку) Тогда
					текСтрокаЗаданий.НомерКартинки = 3;
				ИначеЕсли текСтрокаЗаданий.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами Тогда
					текСтрокаЗаданий.НомерКартинки = 1;
				КонецЕсли;
				
				Если текСтрокаЗаданий.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту Тогда 
					текСтрокаЗаданий.ДоставкаВозврат = 1;
                    //ДоставкаВозврат = 1;
				ИначеЕсли текСтрокаЗаданий.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента Тогда
					текСтрокаЗаданий.ДоставкаВозврат = 2;
                    //ДоставкаВозврат = 2;
				ИначеЕсли текСтрокаЗаданий.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.Перекат
					И НЕ ЗначениеЗаполнено(текСтрокаЗаданий.ЗаданиеНаПеревозку.ЗаданиеНаПеревозку) Тогда
					текСтрокаЗаданий.ДоставкаВозврат = 2;
                    //ДоставкаВозврат = 2;
				ИначеЕсли текСтрокаЗаданий.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.Перекат 
					И ЗначениеЗаполнено(текСтрокаЗаданий.ЗаданиеНаПеревозку.ЗаданиеНаПеревозку) Тогда
					текСтрокаЗаданий.ДоставкаВозврат = 1;
                    //ДоставкаВозврат = 1;
				ИначеЕсли текСтрокаЗаданий.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами Тогда
					текСтрокаЗаданий.ДоставкаВозврат = 1;
                    //ДоставкаВозврат = 1;
				КонецЕсли;
				
				//Картинка особых условий и в строку адреса отправим тоже
				текСтрокаЗаданий.ОсобыеУсловия = 0;
				Если ЗначениеЗаполнено(текСтрокаЗаданий.ЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники)
					И текСтрокаЗаданий.ЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники.ОсобыеУсловияПеревозки Тогда
					текСтрокаЗаданий.ОсобыеУсловия = 3;
				КонецЕсли;
				ОсобыеУсловияТочка = Макс(ОсобыеУсловияТочка, текСтрокаЗаданий.ОсобыеУсловия);
				
				//Найдем акт и заполним номер, если есть
				Если ЗначениеЗаполнено(текСтрокаЗаданий.ЗаданиеНаПеревозку) Тогда
					текСтрокаЗаданий.Акт	= АктПоЗаданию(текСтрокаЗаданий.ЗаданиеНаПеревозку);
					Если ЗначениеЗаполнено(текСтрокаЗаданий.Акт) Тогда
						текСтрокаЗаданий.НомерАкта	= текСтрокаЗаданий.Акт.Номер;
					КонецЕсли;
				КонецЕсли;
				
				//Отобразим Срок Аренды из Заявки
				текСтрокаЗаданий.СрокАренды = 0;
				Если ЗначениеЗаполнено(текСтрокаЗаданий.ЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники) Тогда
					Для Каждого текСтрокаЗаявки Из текСтрокаЗаданий.ЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники.Товары Цикл
						Если текСтрокаЗаданий.ЗаданиеНаПеревозку.Модель = текСтрокаЗаявки.Номенклатура Тогда
							текСтрокаЗаданий.СрокАренды = текСтрокаЗаявки.КоличествоУпаковок;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				МаксимальныйСрок = Макс(МаксимальныйСрок, текСтрокаЗаданий.СрокАренды);
				
				текСтрокаЗаданий.Погружено = ЕстьПогрузка(текСтрокаЗаданий.ЗаданиеНаПеревозку);
				текСтрокаЗаданий.Выгружено = ЕстьВыгрузка(текСтрокаЗаданий.ЗаданиеНаПеревозку);
				
				тКомментарий	= "";
				Если ЗначениеЗаполнено(текСтрокаЗаданий.КомментарийВодителю) Тогда
					тКомментарий	= текСтрокаЗаданий.КомментарийВодителю;
				КонецЕсли;
				Если тКомментарий <> "" И ОбщийКомментарийСписок.НайтиПоЗначению(Лев(тКомментарий, 250)) = Неопределено Тогда
					ОбщийКомментарийСписок.Добавить(Лев(тКомментарий, 250));
				КонецЕсли;
				
				тКомментарий	= "";
				Если ЗначениеЗаполнено(текСтрокаЗаданий.ЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники)
					И текСтрокаЗаданий.ЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники.ОсобыеУсловияПеревозки Тогда
					тКомментарий	= текСтрокаЗаданий.ЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники.ОсобыеУсловияПеревозкиОписание;
					текСтрокаЗаданий.КомментарийЛогисту	= тКомментарий;
				КонецЕсли;
				Если тКомментарий <> "" И ОсобыеУсловияСписок.НайтиПоЗначению(Лев(тКомментарий, 250)) = Неопределено Тогда
					ОсобыеУсловияСписок.Добавить(Лев(тКомментарий, 250));
				КонецЕсли;
				
			КонецЦикла;
            
			текТочка.ОсобыеУсловия			= ОсобыеУсловияТочка;
			текТочка.СрокАренды				= МаксимальныйСрок;
			
			ОбщийКомментарий	= "";
			РазделительК		= "";
			Для Каждого текСтрокаКомент Из ОбщийКомментарийСписок Цикл
				ОбщийКомментарий	= ОбщийКомментарий + РазделительК + СокрЛП(текСтрокаКомент.Значение);
				РазделительК = ", ";
			КонецЦикла;
			текТочка.КомментарийВодителю	= ОбщийКомментарий;
			
			ОсобыеУсловия	= "";
			РазделительОУК	= "";
			Для Каждого текСтрокаКомент Из ОсобыеУсловияСписок Цикл
				ОсобыеУсловия	= ОсобыеУсловия + РазделительОУК + СокрЛП(текСтрокаКомент.Значение);
				РазделительОУК = ", ";
			КонецЦикла;
			текТочка.КомментарийЛогисту	= ОсобыеУсловия;
			
            //текТочка.ДоставкаВозврат = ДоставкаВозврат;
		КонецЦикла;
	КонецЦикла;
					
	ЗначениеВДанныеФормы(тФормированиеДоставкиДерево, ФормированиеДоставкиДерево); 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АктПоЗаданию(тЗаданиеНаПеревозку)
	
	Если Не ЗначениеЗаполнено(тЗаданиеНаПеревозку) Тогда
		Возврат Документы.пкАктПриемкиВозврата.ПустаяСсылка();
	КонецЕсли;
	
	ЗапросАкты = Новый Запрос;
	ЗапросАкты.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка
	|ИЗ
	|	Документ.пкАктПриемкиВозврата.ЗаданияНаПеревозку КАК пкАктПриемкиВозвратаЗаданияНаПеревозку
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкАктПриемкиВозврата КАК пкАктПриемкиВозврата
	|		ПО пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка = пкАктПриемкиВозврата.Ссылка
	|ГДЕ
	|	пкАктПриемкиВозвратаЗаданияНаПеревозку.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозку";
	ЗапросАкты.УстановитьПараметр("ЗаданиеНаПеревозку", тЗаданиеНаПеревозку);
	РезЗапроса = ЗапросАкты.Выполнить().Выбрать();
	
	Если РезЗапроса.Следующий() Тогда
		Возврат РезЗапроса.Ссылка;
	Иначе
		Возврат Документы.пкАктПриемкиВозврата.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЕстьПогрузка(лЗаданиеНаПеревозку)
	
	ЗапросП = Новый Запрос;
	ЗапросП.Текст = 
	"ВЫБРАТЬ
	|	пкПогрузкаВыгрузкаПоДоставке.Ссылка
	|ИЗ
	|	Документ.пкПогрузкаВыгрузкаПоДоставке КАК пкПогрузкаВыгрузкаПоДоставке
	|ГДЕ
	|	пкПогрузкаВыгрузкаПоДоставке.Проведен
	|	И пкПогрузкаВыгрузкаПоДоставке.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозку
	|	И пкПогрузкаВыгрузкаПоДоставке.Операция = ЗНАЧЕНИЕ(Перечисление.пкОперацииПогрузкаВыгрузка.Погрузка)";
	ЗапросП.УстановитьПараметр("ЗаданиеНаПеревозку", лЗаданиеНаПеревозку);
	РезЗапроса = ЗапросП.Выполнить().Выбрать();
	
	Возврат РезЗапроса.Следующий();
	
КонецФункции

&НаСервере
Функция ЕстьВыгрузка(лЗаданиеНаПеревозку)
	
	ЗапросП = Новый Запрос;
	ЗапросП.Текст = 
	"ВЫБРАТЬ
	|	пкПогрузкаВыгрузкаПоДоставке.Ссылка
	|ИЗ
	|	Документ.пкПогрузкаВыгрузкаПоДоставке КАК пкПогрузкаВыгрузкаПоДоставке
	|ГДЕ
	|	пкПогрузкаВыгрузкаПоДоставке.Проведен
	|	И пкПогрузкаВыгрузкаПоДоставке.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозку
	|	И пкПогрузкаВыгрузкаПоДоставке.Операция = ЗНАЧЕНИЕ(Перечисление.пкОперацииПогрузкаВыгрузка.Выгрузка)";
	ЗапросП.УстановитьПараметр("ЗаданиеНаПеревозку", лЗаданиеНаПеревозку);
	РезЗапроса = ЗапросП.Выполнить().Выбрать();
	
	Возврат РезЗапроса.Следующий();
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура КомандаБезГруппировки(Команда)
	
	Элементы.ЗаданияНаПеревозкуКомандаБезГруппировки.Пометка	= НЕ Элементы.ЗаданияНаПеревозкуКомандаБезГруппировки.Пометка;
	Если Элементы.ЗаданияНаПеревозкуКомандаБезГруппировки.Пометка Тогда
		
		Элементы.ЗаданияНаПеревозкуКомандаПоАдресам.Пометка			= Ложь;
		Элементы.ЗаданияНаПеревозкуКомандаПоДатеДоставки.Пометка	= Ложь;
		Элементы.ЗаданияНаПеревозкуКомандаПоТипам.Пометка			= Ложь;
		Элементы.ЗаданияНаПеревозкуКомандаПоМоделям.Пометка			= Ложь;
		
		ЗаданияНаПеревозку.Группировка.Элементы.Очистить();
		
	КонецЕсли;
	
	ОбновитьДанныеТаблицыЗаданияНаПеревозку();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоКлиентам(Команда)
	
	ПолеГруппировки = "ЗаявкаНаАрендуТехники.Партнер";
	Элементы.ЗаданияНаПеревозкуКомандаПоКлиентам.Пометка	= НЕ Элементы.ЗаданияНаПеревозкуКомандаПоКлиентам.Пометка;
	Если Элементы.ЗаданияНаПеревозкуКомандаПоКлиентам.Пометка Тогда
		
		Элементы.ЗаданияНаПеревозкуКомандаБезГруппировки.Пометка = Ложь;
		
		НовыйЭлемент = ЗаданияНаПеревозку.Группировка.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		НовыйЭлемент.Поле 			= Новый ПолеКомпоновкиДанных(ПолеГруппировки);
		НовыйЭлемент.Использование	= Истина;
		
	Иначе
		СписокДляУдаления = Новый СписокЗначений;
		
		Для Каждого текГруппировка Из ЗаданияНаПеревозку.Группировка.Элементы Цикл
			Если текГруппировка.Поле = Новый ПолеКомпоновкиДанных(ПолеГруппировки) Тогда
				Если СписокДляУдаления.НайтиПоЗначению(текГруппировка) = Неопределено Тогда
					СписокДляУдаления.Добавить(текГруппировка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого текГруппировка Из СписокДляУдаления Цикл
			ЗаданияНаПеревозку.Группировка.Элементы.Удалить(текГруппировка.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновитьДанныеТаблицыЗаданияНаПеревозку();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоАдресам(Команда)
	
	ПолеГруппировки = "АдресДоставки";
	Элементы.ЗаданияНаПеревозкуКомандаПоАдресам.Пометка	= НЕ Элементы.ЗаданияНаПеревозкуКомандаПоАдресам.Пометка;
	Если Элементы.ЗаданияНаПеревозкуКомандаПоАдресам.Пометка Тогда
		
		Элементы.ЗаданияНаПеревозкуКомандаБезГруппировки.Пометка = Ложь;
		
		НовыйЭлемент = ЗаданияНаПеревозку.Группировка.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		НовыйЭлемент.Поле 			= Новый ПолеКомпоновкиДанных(ПолеГруппировки);
		НовыйЭлемент.Использование	= Истина;
		
	Иначе
		СписокДляУдаления = Новый СписокЗначений;
		
		Для Каждого текГруппировка Из ЗаданияНаПеревозку.Группировка.Элементы Цикл
			Если текГруппировка.Поле = Новый ПолеКомпоновкиДанных(ПолеГруппировки) Тогда
				Если СписокДляУдаления.НайтиПоЗначению(текГруппировка) = Неопределено Тогда
					СписокДляУдаления.Добавить(текГруппировка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого текГруппировка Из СписокДляУдаления Цикл
			ЗаданияНаПеревозку.Группировка.Элементы.Удалить(текГруппировка.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновитьДанныеТаблицыЗаданияНаПеревозку();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоДатеДоставки(Команда)
	
	ПолеГруппировки = "ДатаОтгрузки";
	Элементы.ЗаданияНаПеревозкуКомандаПоДатеДоставки.Пометка	= НЕ Элементы.ЗаданияНаПеревозкуКомандаПоДатеДоставки.Пометка;
	Если Элементы.ЗаданияНаПеревозкуКомандаПоДатеДоставки.Пометка Тогда
		
		Элементы.ЗаданияНаПеревозкуКомандаБезГруппировки.Пометка = Ложь;
		
		НовыйЭлемент = ЗаданияНаПеревозку.Группировка.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		НовыйЭлемент.Поле 			= Новый ПолеКомпоновкиДанных(ПолеГруппировки);
		НовыйЭлемент.Использование	= Истина;
		
	Иначе
		СписокДляУдаления = Новый СписокЗначений;
		
		Для Каждого текГруппировка Из ЗаданияНаПеревозку.Группировка.Элементы Цикл
			Если текГруппировка.Поле = Новый ПолеКомпоновкиДанных(ПолеГруппировки) Тогда
				Если СписокДляУдаления.НайтиПоЗначению(текГруппировка) = Неопределено Тогда
					СписокДляУдаления.Добавить(текГруппировка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого текГруппировка Из СписокДляУдаления Цикл
			ЗаданияНаПеревозку.Группировка.Элементы.Удалить(текГруппировка.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновитьДанныеТаблицыЗаданияНаПеревозку();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоМоделям(Команда)
	
	ПолеГруппировки = "Модель";
	Элементы.ЗаданияНаПеревозкуКомандаПоМоделям.Пометка	= НЕ Элементы.ЗаданияНаПеревозкуКомандаПоМоделям.Пометка;
	Если Элементы.ЗаданияНаПеревозкуКомандаПоМоделям.Пометка Тогда
		
		Элементы.ЗаданияНаПеревозкуКомандаБезГруппировки.Пометка = Ложь;
		
		НовыйЭлемент = ЗаданияНаПеревозку.Группировка.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		НовыйЭлемент.Поле 			= Новый ПолеКомпоновкиДанных(ПолеГруппировки);
		НовыйЭлемент.Использование	= Истина;
		
	Иначе
		СписокДляУдаления = Новый СписокЗначений;
		
		Для Каждого текГруппировка Из ЗаданияНаПеревозку.Группировка.Элементы Цикл
			Если текГруппировка.Поле = Новый ПолеКомпоновкиДанных(ПолеГруппировки) Тогда
				Если СписокДляУдаления.НайтиПоЗначению(текГруппировка) = Неопределено Тогда
					СписокДляУдаления.Добавить(текГруппировка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого текГруппировка Из СписокДляУдаления Цикл
			ЗаданияНаПеревозку.Группировка.Элементы.Удалить(текГруппировка.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновитьДанныеТаблицыЗаданияНаПеревозку();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоТипам(Команда)
	
	ПолеГруппировки = "ВидОперации";
	Элементы.ЗаданияНаПеревозкуКомандаПоТипам.Пометка	= НЕ Элементы.ЗаданияНаПеревозкуКомандаПоТипам.Пометка;
	Если Элементы.ЗаданияНаПеревозкуКомандаПоТипам.Пометка Тогда
		
		Элементы.ЗаданияНаПеревозкуКомандаБезГруппировки.Пометка = Ложь;
		
		НовыйЭлемент = ЗаданияНаПеревозку.Группировка.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		НовыйЭлемент.Поле 			= Новый ПолеКомпоновкиДанных(ПолеГруппировки);
		НовыйЭлемент.Использование	= Истина;
		
	Иначе
		СписокДляУдаления = Новый СписокЗначений;
		
		Для Каждого текГруппировка Из ЗаданияНаПеревозку.Группировка.Элементы Цикл
			Если текГруппировка.Поле = Новый ПолеКомпоновкиДанных(ПолеГруппировки) Тогда
				Если СписокДляУдаления.НайтиПоЗначению(текГруппировка) = Неопределено Тогда
					СписокДляУдаления.Добавить(текГруппировка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого текГруппировка Из СписокДляУдаления Цикл
			ЗаданияНаПеревозку.Группировка.Элементы.Удалить(текГруппировка.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновитьДанныеТаблицыЗаданияНаПеревозку();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Функция ОпределитьЗначениеРеквизитаРодителя(тТекущиеДанные, ИмяРеквизита)
	
	Если тТекущиеДанные = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(тТекущиеДанные[ИмяРеквизита]) Тогда
		Возврат тТекущиеДанные[ИмяРеквизита];
	Иначе
		текЗначение = ОпределитьЗначениеРеквизитаРодителя(тТекущиеДанные.ПолучитьРодителя(), ИмяРеквизита);
		Возврат ?(ЗначениеЗаполнено(текЗначение), текЗначение, тТекущиеДанные[ИмяРеквизита]);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьЗаданиеВМаршрут(тЗаданиеНаПеревозку, тДата, тПодразделение, тТранспорт, тВодитель, тПеревозчик, тНомерХодки)
	
	РегистрыСведений.пкФормированиеДоставки.ДобавитьЗаданиеНаПеревозкуВДоставку(тЗаданиеНаПеревозку, 
		Новый Структура("ДатаДоставки,
						|Подразделение,
						|Транспорт,
						|Водитель,
						|Перевозчик,
						|НомерХодки",
						тДата,
						тПодразделение,
						тТранспорт, 
						тВодитель, 
						тПеревозчик,
						тНомерХодки));

КонецПроцедуры
					
&НаСервереБезКонтекста
Процедура ИсключитьЗаданиеИзДоставки(тЗаданиеНаПеревозку)
	
	РегистрыСведений.пкФормированиеДоставки.ИсключитьЗаданиеИзДоставки(тЗаданиеНаПеревозку);

КонецПроцедуры	
	
&НаСервереБезКонтекста
Процедура ИсключитьЗаданиеИзАкта(тЗаданиеНаПеревозку)
	
	Если Не ЗначениеЗаполнено(тЗаданиеНаПеревозку) Тогда
		Возврат;
	КонецЕсли;

	тАкт = АктПоЗаданию(тЗаданиеНаПеревозку);
	
	Если Не ЗначениеЗаполнено(тАкт) Тогда
		//Задание не связано актом
		Возврат;
	КонецЕсли;
	
	тОбъект = тАкт.ПолучитьОбъект();
	
	СписокУдаления = Новый СписокЗначений;
	Для Каждого текСтрокаАкта Из тОбъект.ЗаданияНаПеревозку Цикл
		Если текСтрокаАкта.ЗаданиеНаПеревозку <> тЗаданиеНаПеревозку Тогда
			Продолжить;
		КонецЕсли;
		СписокУдаления.Добавить(текСтрокаАкта);
	КонецЦикла;
	
	Для Каждого текСтрока Из СписокУдаления Цикл
		тОбъект.ЗаданияНаПеревозку.Удалить(текСтрока.Значение);
	КонецЦикла;
	
	Попытка
		тОбъект.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
	Исключение
		тСообщение = Новый СообщениеПользователю;
		тСОобщение.Текст = ОписаниеОшибки();
		тСообщение.Сообщить();
	КонецПопытки;
	
КонецПроцедуры	
	
&НаСервере
Процедура ПроверитьАктЗадания(текЗадание, ВыделенныеСтроки, СписокСвязанныхНеВыбранных)
	
	тАкт = АктПоЗаданию(текЗадание);
	
	Если Не ЗначениеЗаполнено(тАкт) Тогда
		//Задание не связано актом
		Возврат;
	КонецЕсли;
	
	Для Каждого текСтрокаАкта Из тАкт.ЗаданияНаПеревозку Цикл
		Если текСтрокаАкта.ЗаданиеНаПеревозку = текЗадание Тогда
			Продолжить;
		КонецЕсли;
	
		ЕстьСредиВыбранных = Ложь;
		Для Каждого текЗаданиеДругоеЗадание Из ВыделенныеСтроки Цикл
			Если текСтрокаАкта.ЗаданиеНаПеревозку = текЗаданиеДругоеЗадание Тогда
				ЕстьСредиВыбранных = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЕстьСредиВыбранных Тогда
			СписокСвязанныхНеВыбранных.Добавить(текЗадание);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаФормированиеДобавитьЗадание(Команда)
	
	Если Элементы.ЗаданияНаПеревозку.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ФормированиеДоставки.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МаксимальныйНомерХодки = ОпределитьМаксимальныйНомерХодки(Элементы.ФормированиеДоставки.ТекущиеДанные);
	
	Если МаксимальныйНомерХодки = 0 Тогда
		МаксимальныйНомерХодки = 1;
	КонецЕсли;
	
	//Проверим нет-ли не выбранных заданий, связанных с выбранными Актами
	
	ВыделенныеСтроки = Новый Массив;
	Для Каждого текЗадание Из Элементы.ЗаданияНаПеревозку.ВыделенныеСтроки Цикл
		ВыделенныеСтроки.Добавить(текЗадание);
	КонецЦикла;
	
	СписокСвязанныхНеВыбранных = Новый Массив;
	Для Каждого текЗадание Из ВыделенныеСтроки Цикл
		ПроверитьАктЗадания(текЗадание, ВыделенныеСтроки, СписокСвязанныхНеВыбранных);
	КонецЦикла;

	Если СписокСвязанныхНеВыбранных.Количество() > 0 Тогда
	    ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаРезультатаДобавитьЗаданиеЗавершение", ЭтаФорма, 
			Новый Структура("СписокИсключений, МассивВыбранных, Строка", 
				СписокСвязанныхНеВыбранных, 
				ВыделенныеСтроки,
				Элементы.ФормированиеДоставки.ТекущиеДанные.ПолучитьИдентификатор())), 
			НСтр("ru='Выбраны задания связанные Актами с другими, не выбранными заданиями." + 
				Символы.ПС + "Исключать выбранные задания из Актов(Да) или перенести (Нет)?'"), 
			РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ДобавитьЗаданияПоМассиву(ВыделенныеСтроки,
			Элементы.ФормированиеДоставки.ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаДобавитьЗаданиеЗавершение(Результат, ПараметрыОповещения) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		Для Каждого текСтрока Из ПараметрыОповещения.СписокИсключений Цикл
			ИсключитьЗаданиеИзАкта(текСтрока);
		КонецЦикла;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		
		Для Каждого текСтрока Из ПараметрыОповещения.СписокИсключений Цикл
			ИндексЗначения = ПараметрыОповещения.МассивВыбранных.Найти(текСтрока);
			Если ИндексЗначения <> Неопределено Тогда 
				ПараметрыОповещения.МассивВыбранных.Удалить(ИндексЗначения);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ДобавитьЗаданияПоМассиву(ПараметрыОповещения.МассивВыбранных, ПараметрыОповещения.Строка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаданияПоМассиву(МассивВыбранных, ИдСтрока)
	
	тТекущиеДанные	= ФормированиеДоставкиДерево.НайтиПоИдентификатору(ИдСтрока);
	МаксимальныйНомерХодки = ОпределитьМаксимальныйНомерХодки(тТекущиеДанные);
	
	тТранспорт	= ОпределитьЗначениеРеквизитаРодителя(Элементы.ФормированиеДоставки.ТекущиеДанные, "Транспорт");
	тВодитель	= ОпределитьЗначениеРеквизитаРодителя(Элементы.ФормированиеДоставки.ТекущиеДанные, "Водитель");
	тПеревозчик	= ОпределитьЗначениеРеквизитаРодителя(Элементы.ФормированиеДоставки.ТекущиеДанные, "Перевозчик");
	
	Для Каждого текЗадание Из МассивВыбранных Цикл
		
//Рарус Владимир Подрезов 10.10.2017 5099
		текСпособ = ПолучитьЗначениеРеквизитаНаСервере(тТранспорт, "пкСпособДоставки");
		Если Не ЗначениеЗаполнено(текСпособ) Тогда
			Если ЗначениеЗаполнено(Элементы.ФормированиеДоставки.ТекущиеДанные.ЗаданиеНаПеревозку) Тогда
				текСпособ = ПолучитьЗначениеРеквизитаНаСервере(Элементы.ФормированиеДоставки.ТекущиеДанные.ЗаданиеНаПеревозку, "СпособДоставки");
			КонецЕсли;
		КонецЕсли;
		Если текСпособ <> ПолучитьЗначениеРеквизитаНаСервере(текЗадание, "СпособДоставки") Тогда
			тСообщение = Новый СообщениеПользователю;
			тСообщение.Текст = НСтр("ru='Внимание!: Способ доставки отличается от способа на Транспорте: '") + СокрЛП(текСпособ) + " " + СокрЛП(текЗадание);
			тСообщение.Сообщить();
		КонецЕсли;
		
		Если НачалоДня(Объект.ДатаДоставки) <> НачалоДня(ПолучитьЗначениеРеквизитаНаСервере(текЗадание, "ДатаОтгрузки")) Тогда
			тСообщение = Новый СообщениеПользователю;
			тСообщение.Текст = НСтр("ru='Внимание!: дата отгрузки задания отличается от планируемой!'") + " " + СокрЛП(текЗадание);
			тСообщение.Сообщить();
		КонецЕсли;
//Рарус Владимир Подрезов Конец

		Если ЗначениеЗаполнено(Элементы.ФормированиеДоставки.ТекущиеДанные.ЗаданиеНаПеревозку) Тогда
			//Добавляем в текущую ходку Задания
			ДобавитьЗаданиеВМаршрут(текЗадание, 
				Объект.ДатаДоставки, 
				Объект.Подразделение, 
				тТранспорт,
				тВодитель,
				тПеревозчик,
				МаксимальныйНомерХодки);
				
		ИначеЕсли (НЕ ЗначениеЗаполнено(Элементы.ФормированиеДоставки.ТекущиеДанные.Транспорт)) И (НЕ Элементы.ФормированиеДоставки.ТекущиеДанные.ЭтоЗаездНаБазу) Тогда
			//Добавляем в текущую ходку адреса
			ДобавитьЗаданиеВМаршрут(текЗадание, 
				Объект.ДатаДоставки, 
				Объект.Подразделение, 
				тТранспорт,
				тВодитель,
				тПеревозчик,
				МаксимальныйНомерХодки);
				
		Иначе
			//Если на транспорте или конце ходки, 
			//	Проверим наличие ходок и если еще нет добавляем в 1-ую, 
			//	иначе НЕ спросим нужно ли создать
			
			//Добавляем в текущую ходку адреса
			ДобавитьЗаданиеВМаршрут(текЗадание, 
				Объект.ДатаДоставки, 
				Объект.Подразделение, 
				тТранспорт,
				тВодитель,
				тПеревозчик,
				МаксимальныйНомерХодки);
			//ПараметрыОповещения = Новый Структура("НомерХодки,
			//						|Транспорт,
			//						|Водитель,
			//						|Перевозчик,
			//						|ЗаданиеНаПеревозку,
			//						|Строка", 
			//						МаксимальныйНомерХодки,
			//						тТранспорт,
			//						тВодитель,
			//						тПеревозчик,
			//						текЗадание,
			//						Элементы.ФормированиеДоставки.ТекущиеДанные.ПолучитьИдентификатор());
			//						
			////Если МаксимальныйНомерХодки = 0 Тогда //Нечего спрашивать - первая ходка
			//	ОбработкаРезультатаДобавитьЗавершение(КодВозвратаДиалога.Нет, ПараметрыОповещения);
			////Иначе
			////    ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаРезультатаДобавитьЗавершение", ЭтаФорма, ПараметрыОповещения), 
			////		НСтр("ru='Добавить задание в новую ходку(Да) или добавить в последнюю (Нет)?'"), 
			////		РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			////КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
		
	ОбновитьДанныеТекущихЗаданийНаПеревозку("");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаФормированиеДобавитьВНовуюХодку(Команда)
	
	Если Элементы.ЗаданияНаПеревозку.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ФормированиеДоставки.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МаксимальныйНомерХодки = ОпределитьМаксимальныйНомерХодки(Элементы.ФормированиеДоставки.ТекущиеДанные);
	
	тТранспорт	= ОпределитьЗначениеРеквизитаРодителя(Элементы.ФормированиеДоставки.ТекущиеДанные, "Транспорт");
	тВодитель	= ОпределитьЗначениеРеквизитаРодителя(Элементы.ФормированиеДоставки.ТекущиеДанные, "Водитель");
	тПеревозчик	= ОпределитьЗначениеРеквизитаРодителя(Элементы.ФормированиеДоставки.ТекущиеДанные, "Перевозчик");
	
	Для Каждого текЗадание Из Элементы.ЗаданияНаПеревозку.ВыделенныеСтроки Цикл
		
		ДобавитьЗаданиеВМаршрут(текЗадание, 
			Объект.ДатаДоставки, 
			Объект.Подразделение, 
			тТранспорт,
			тВодитель,
			тПеревозчик,
			МаксимальныйНомерХодки + 1);
			
	КонецЦикла;
		
	ОбновитьДанныеТекущихЗаданийНаПеревозку("");
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьМаксимальныйНомерХодки(тТекущиеДанные)
	
	Если тТекущиеДанные = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	СтрокиТранспорта = "";
	
	Если ЗначениеЗаполнено(тТекущиеДанные.ЗаданиеНаПеревозку) Тогда
		СтрокиТранспорта = тТекущиеДанные.ПолучитьРодителя().ПолучитьРодителя().ПолучитьЭлементы();
	ИначеЕсли НЕ ЗначениеЗаполнено(тТекущиеДанные.Транспорт) Тогда
		СтрокиТранспорта = тТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
	Иначе
		СтрокиТранспорта = тТекущиеДанные.ПолучитьЭлементы();
	КонецЕсли;
	
	МаксНомер = 0;
	Для Каждого текСтрока Из СтрокиТранспорта Цикл
		Если текСтрока.ЭтоЗаездНаБазу Тогда
			Продолжить;
		КонецЕсли;
		МаксНомер = Макс(МаксНомер, текСтрока.НомерХодки);
	КонецЦикла;
	
	Возврат МаксНомер;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаРезультатаДобавитьЗавершение(Результат, ПараметрыОповещения) Экспорт

	тТекущиеДанные	= ФормированиеДоставкиДерево.НайтиПоИдентификатору(ПараметрыОповещения.Строка);
	МаксимальныйНомерХодки = ОпределитьМаксимальныйНомерХодки(тТекущиеДанные);
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ДобавитьЗаданиеВМаршрут(ПараметрыОповещения.ЗаданиеНаПеревозку, 
			Объект.ДатаДоставки, 
			Объект.Подразделение, 
			ПараметрыОповещения.Транспорт,
			ПараметрыОповещения.Водитель,
			ПараметрыОповещения.Перевозчик,
			МаксимальныйНомерХодки + 1);
			
	Иначе
		
		ДобавитьЗаданиеВМаршрут(ПараметрыОповещения.ЗаданиеНаПеревозку, 
			Объект.ДатаДоставки, 
			Объект.Подразделение, 
			ПараметрыОповещения.Транспорт,
			ПараметрыОповещения.Водитель,
			ПараметрыОповещения.Перевозчик,
			?(ПараметрыОповещения.НомерХодки > 0, ПараметрыОповещения.НомерХодки, 
				?(МаксимальныйНомерХодки > 0, МаксимальныйНомерХодки, МаксимальныйНомерХодки + 1)));
			
	КонецЕсли;
	
	ОбновитьДанныеТекущихЗаданийНаПеревозку("");
		
КонецПроцедуры    

&НаКлиенте
Процедура КомандаФормированиеУдалитьЗадание(Команда)
	
	Если Элементы.ФормированиеДоставки.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого текЗадание Из Элементы.ФормированиеДоставки.ВыделенныеСтроки Цикл
		
		тТекущиеДанные = ФормированиеДоставкиДерево.НайтиПоИдентификатору(текЗадание);
		
		Если тТекущиеДанные.Погружено ИЛИ тТекущиеДанные.Выгружено Тогда
			тСообщение = Новый СообщениеПользователю;
			тСообщение.Текст = НСтр("ru='По заданию уже отмечены операции погрузки выгрузки техники. Необходимо сначала отменить их.'");
			тСообщение.Сообщить();
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(тТекущиеДанные.ЗаданиеНаПеревозку) Тогда
			ИсключитьЗаданиеИзДоставки(тТекущиеДанные.ЗаданиеНаПеревозку);
		ИначеЕсли ЗначениеЗаполнено(тТекущиеДанные.ПредставлениеСтрокиДоставки) Тогда
			ТекСтроки = тТекущиеДанные.ПолучитьЭлементы();
			Для Каждого текСтрока Из ТекСтроки Цикл
				ИсключитьЗаданиеИзДоставки(текСтрока.ЗаданиеНаПеревозку);
			КонецЦикла;
		ИначеЕсли ЗначениеЗаполнено(тТекущиеДанные.Транспорт) Тогда
			ТекСтрокиГруппы = тТекущиеДанные.ПолучитьЭлементы();
			Для Каждого текСтрокаГруппа Из ТекСтрокиГруппы Цикл
				ТекСтроки = текСтрокаГруппа.ПолучитьЭлементы();
				Для Каждого текСтрока Из ТекСтроки Цикл
					ИсключитьЗаданиеИзДоставки(текСтрока.ЗаданиеНаПеревозку);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	ОбновитьДанныеТекущихЗаданийНаПеревозку("");
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура ЗаданияНаПеревозкуНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	ИсточникПеретаскивания = "ЗаданияНаПеревозку";
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ИсточникПеретаскивания = "ФормированиеДоставки" Тогда
		
		Для Каждого текСтрока Из ПараметрыПеретаскивания.Значение Цикл
			Если ЗначениеЗаполнено(текСтрока.ЗаданиеНаПеревозку) Тогда
				ИсключитьЗаданиеИзДоставки(текСтрока.ЗаданиеНаПеревозку);
			КонецЕсли;
		КонецЦикла;
		
		ОбновитьДанныеТекущихЗаданийНаПеревозку("");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	ИсточникПеретаскивания = "";
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеДоставкиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Выполнение = Элементы.ФормированиеДоставки.ТекущиеДанные <> Неопределено 
					И Не (Элементы.ФормированиеДоставки.ТекущиеДанные.Погружено 
							ИЛИ Элементы.ФормированиеДоставки.ТекущиеДанные.Выгружено);
	ИсточникПеретаскивания = "ФормированиеДоставки";
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеДоставкиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ИсточникПеретаскивания = "ЗаданияНаПеревозку" Тогда
		
		тТекущиеДанные			= ФормированиеДоставкиДерево.НайтиПоИдентификатору(Строка);
		Спрашивали				= Ложь;
		Для Каждого текСтрока Из ПараметрыПеретаскивания.Значение Цикл
			Если НЕ ЗначениеЗаполнено(текСтрока) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(тТекущиеДанные.ЗаданиеНаПеревозку) Тогда
				//Добавляем в текущую ходку
				ДобавитьЗаданиеВМаршрут(текСтрока, 
					Объект.ДатаДоставки, 
					Объект.Подразделение, 
					ОпределитьЗначениеРеквизитаРодителя(тТекущиеДанные, "Транспорт"),
					ОпределитьЗначениеРеквизитаРодителя(тТекущиеДанные, "Водитель"),
					ОпределитьЗначениеРеквизитаРодителя(тТекущиеДанные, "Перевозчик"),
					тТекущиеДанные.НомерХодки);
					
				ОбновитьДанныеТекущихЗаданийНаПеревозку("");
				
			ИначеЕсли (НЕ ЗначениеЗаполнено(тТекущиеДанные.Транспорт)) И (НЕ тТекущиеДанные.ЭтоЗаездНаБазу) Тогда
				//Добавляем в текущую ходку адреса
				ДобавитьЗаданиеВМаршрут(текСтрока, 
					Объект.ДатаДоставки, 
					Объект.Подразделение, 
					ОпределитьЗначениеРеквизитаРодителя(тТекущиеДанные, "Транспорт"),
					ОпределитьЗначениеРеквизитаРодителя(тТекущиеДанные, "Водитель"),
					ОпределитьЗначениеРеквизитаРодителя(тТекущиеДанные, "Перевозчик"),
					тТекущиеДанные.НомерХодки);
					
				ОбновитьДанныеТекущихЗаданийНаПеревозку("");
				
			Иначе
				//Если на транспорте или конце ходки, 
				//	Проверим наличие ходок и если еще нет добавляем в 1-ую, 
				//	иначе спросим нужно ли создать
				
				МаксимальныйНомерХодки	= ОпределитьМаксимальныйНомерХодки(тТекущиеДанные);
				ПараметрыОповещения = Новый Структура("НомерХодки,
									|Транспорт,
									|Водитель,
									|Перевозчик,
									|ЗаданиеНаПеревозку,
									|Строка", 
									МаксимальныйНомерХодки,
									ОпределитьЗначениеРеквизитаРодителя(тТекущиеДанные, "Транспорт"),
									ОпределитьЗначениеРеквизитаРодителя(тТекущиеДанные, "Водитель"),
									ОпределитьЗначениеРеквизитаРодителя(тТекущиеДанные, "Перевозчик"),
									текСтрока,
									Строка);
									
				Если МаксимальныйНомерХодки = 0 ИЛИ Спрашивали Тогда
					ОбработкаРезультатаДобавитьЗавершение(КодВозвратаДиалога.Нет, ПараметрыОповещения);
				Иначе
					Спрашивали = Истина;
					ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаРезультатаДобавитьЗавершение", ЭтаФорма, ПараметрыОповещения), 
						НСтр("ru='Добавить задание в новую ходку(Да) или добавить в последнюю (Нет)?'"), 
						РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
				КонецЕсли;

			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ИсточникПеретаскивания = "ФормированиеДоставки" Тогда
		
		Изменяли  = Ложь;
		
		Для Каждого текСтрока Из ПараметрыПеретаскивания.Значение Цикл
			
			тТекущиеДанные	= ФормированиеДоставкиДерево.НайтиПоИдентификатору(текСтрока);
			тЗадание 		= тТекущиеДанные.ЗаданиеНаПеревозку;
			тТранспорт		= ОпределитьЗначениеРеквизитаРодителя(тТекущиеДанные, "Транспорт");
			тНомерХодки		= ОпределитьЗначениеРеквизитаРодителя(тТекущиеДанные, "НомерХодки");
			
			тНовыеДанные	= ФормированиеДоставкиДерево.НайтиПоИдентификатору(Строка);
			НовыйТранспорт	= ОпределитьЗначениеРеквизитаРодителя(тНовыеДанные, "Транспорт");
			Если тНовыеДанные.ЭтоЗаездНаБазу Тогда
				НовыйНомерХодки	= ОпределитьЗначениеРеквизитаРодителя(тНовыеДанные, "НомерХодки") + 1;
			Иначе
				НовыйНомерХодки	= ОпределитьЗначениеРеквизитаРодителя(тНовыеДанные, "НомерХодки");
			КонецЕсли;
			Если НовыйНомерХодки = 0 Тогда
				НовыйНомерХодки	= 1;
			КонецЕсли;
			тВодитель		= ОпределитьЗначениеРеквизитаРодителя(тНовыеДанные, "Водитель");
			тПеревозчик		= ОпределитьЗначениеРеквизитаРодителя(тНовыеДанные, "Перевозчик");
			
			Если ЗначениеЗаполнено(тЗадание) Тогда
				
				Если ЗначениеЗаполнено(тТранспорт) И ЗначениеЗаполнено(НовыйТранспорт) И (тТранспорт <> НовыйТранспорт ИЛИ тНомерХодки <> НовыйНомерХодки)Тогда
					ДобавитьЗаданиеВМаршрут(тЗадание, 
						Объект.ДатаДоставки, 
						Объект.Подразделение, 
						НовыйТранспорт,
						тВодитель,
						тПеревозчик,
						НовыйНомерХодки);
						
					Изменяли = Истина;
					
				КонецЕсли;
			ИначеЕсли НЕ ЗначениеЗаполнено(тТекущиеДанные.Транспорт) Тогда
				
				текСтроки = тТекущиеДанные.ПолучитьЭлементы();
				
				Для Каждого тЗаданиеСтроки Из текСтроки Цикл
					Если ЗначениеЗаполнено(тТранспорт) И ЗначениеЗаполнено(НовыйТранспорт) И (тТранспорт <> НовыйТранспорт ИЛИ тНомерХодки <> НовыйНомерХодки) Тогда
						ДобавитьЗаданиеВМаршрут(тЗаданиеСтроки.ЗаданиеНаПеревозку, 
							Объект.ДатаДоставки, 
							Объект.Подразделение, 
							НовыйТранспорт,
							тВодитель,
							тПеревозчик,
							НовыйНомерХодки);
							
						Изменяли = Истина;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Если Изменяли Тогда
			ОбновитьДанныеТекущихЗаданийНаПеревозку("");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеДоставкиОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	ИсточникПеретаскивания = "";
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеДоставкиЗаданиеНаПеревозкуЗаявкаНаАрендуТехникиНомерИнфоНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.ФормированиеДоставки.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	текИмяФормы = "Документ.пкЗаявкаНаАрендуТехники.Форма.ФормаДокумента";
	текОбъект	= ПолучитьЗначениеРеквизитаНаСервере(Элементы.ФормированиеДоставки.ТекущиеДанные.ЗаданиеНаПеревозку, "ЗаявкаНаАрендуТехники");
	
	Если ЗначениеЗаполнено(текОбъект) Тогда
		ОткрытьФорму(текИмяФормы, Новый Структура("Ключ", текОбъект));
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Интерактив Общий

&НаКлиенте
Процедура ГиперСсылкаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (Поле.Имя = "ЗаданияНаПеревозкуНомер")
		ИЛИ (Поле.Имя = "ФормированиеДоставкиЗаданиеНаПеревозкуНомер")
	Тогда
	
		текИмяФормы = "Документ.пкЗаданиеНаПеревозку.Форма.ФормаДокумента";
		текОбъект	= Элемент.ТекущиеДанные.ЗаданиеНаПеревозку;
		
		Если ЗначениеЗаполнено(текОбъект) Тогда
			ОткрытьФорму(текИмяФормы, Новый Структура("Ключ", текОбъект));
		КонецЕсли;
		
	//ИначеЕсли (Поле.Имя = "ЗаданияНаПеревозкуМодель") Тогда
	//
	//	текИмяФормы = "Справочник.Номенклатура.Форма.ФормаЭлемента";
	//	текОбъект	= Элемент.ТекущиеДанные.Модель;
	//	
	//	Если ЗначениеЗаполнено(текОбъект) Тогда
	//		ОткрытьФорму(текИмяФормы, Новый Структура("Ключ", текОбъект));
	//	КонецЕсли;
	//	
	//ИначеЕсли (Поле.Имя = "ЗаданияНаПеревозкуТехника") Тогда
	//
	//	текИмяФормы = "Справочник.ОбъектыЭксплуатации.Форма.ФормаЭлемента";
	//	текОбъект	= Элемент.ТекущиеДанные.Техника;
	//	
	//	Если ЗначениеЗаполнено(текОбъект) Тогда
	//		ОткрытьФорму(текИмяФормы, Новый Структура("Ключ", текОбъект));
	//	КонецЕсли;
	//	
	ИначеЕсли (Поле.Имя = "ЗаданияНаПеревозкуЗаявкаНаАрендуТехникиНомер") Тогда
	
		текИмяФормы = "Документ.пкЗаявкаНаАрендуТехники.Форма.ФормаДокумента";
		текОбъект	= Элемент.ТекущиеДанные.ЗаявкаНаАрендуТехники;
		
		Если ЗначениеЗаполнено(текОбъект) Тогда
			ОткрытьФорму(текИмяФормы, Новый Структура("Ключ", текОбъект));
		КонецЕсли;
		
	//ИначеЕсли (Поле.Имя = "ЗаданияНаПеревозкуЗаявкаНаАрендуТехникиПартнер") Тогда
	//	
	//	текИмяФормы = "Справочник.Партнеры.Форма.ФормаЭлемента";
	//	текОбъект	= ПолучитьЗначениеРеквизитаНаСервере(Элемент.ТекущиеДанные.ЗаявкаНаАрендуТехники, "Партнер");
	//	
	//	Если ЗначениеЗаполнено(текОбъект) Тогда
	//		ОткрытьФорму(текИмяФормы, Новый Структура("Ключ", текОбъект));
	//	КонецЕсли;
	//	
	//ИначеЕсли (Поле.Имя = "ЗаданияНаПеревозкуЗаявкаНаАрендуТехникиОбъектСтроительства") Тогда
	//	
	//	текИмяФормы = "Справочник.СМ_ОбъектыСтроительства.Форма.ФормаЭлемента";
	//	текОбъект	= ПолучитьЗначениеРеквизитаНаСервере(Элемент.ТекущиеДанные.ЗаявкаНаАрендуТехники, "ОбъектСтроительства");
	//	
	//	Если ЗначениеЗаполнено(текОбъект) Тогда
	//		ОткрытьФорму(текИмяФормы, Новый Структура("Ключ", текОбъект));
	//	КонецЕсли;
	//	
	//ИначеЕсли (Поле.Имя = "ЗаданияНаПеревозкуРегионПолучатель") Тогда
	//	
	//	текИмяФормы = "Справочник.СтруктураПредприятия.Форма.ФормаЭлемента";
	//	текОбъект	= Элемент.ТекущиеДанные.РегионПолучатель;
	//	
	//	Если ЗначениеЗаполнено(текОбъект) Тогда
	//		ОткрытьФорму(текИмяФормы, Новый Структура("Ключ", текОбъект));
	//	КонецЕсли;
	//
	//ИначеЕсли (Поле.Имя = "ФормированиеДоставкиТранспорт") Тогда
	//
	//	текИмяФормы = "Справочник.ТранспортныеСредства.Форма.ФормаЭлемента";
	//	текОбъект	= Элемент.ТекущиеДанные.Транспорт;
	//	
	//	Если ЗначениеЗаполнено(текОбъект) Тогда
	//		ОткрытьФорму(текИмяФормы, Новый Структура("Ключ", текОбъект));
	//	Иначе
	//		
	//		текИмяФормы = "Документ.пкЗаданиеНаПеревозку.Форма.ФормаДокумента";
	//		текОбъект	= Элемент.ТекущиеДанные.ЗаданиеНаПеревозку;
	//		Если ЗначениеЗаполнено(текОбъект) Тогда
	//			ОткрытьФорму(текИмяФормы, Новый Структура("Ключ", текОбъект));
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//ИначеЕсли (Поле.Имя = "ФормированиеДоставкиВодитель") Тогда
	//	
	//	СтандартнаяОбработка = (Элементы.ФормированиеДоставки.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.ФормированиеДоставки.ТекущиеДанные.Транспорт));
	//	
	//ИначеЕсли (Поле.Имя = "ФормированиеДоставкиПеревозчик") Тогда
	//	
	//	СтандартнаяОбработка = (Элементы.ФормированиеДоставки.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.ФормированиеДоставки.ТекущиеДанные.Транспорт));
	//	
	ИначеЕсли (Поле.Имя = "ФормированиеДоставкиПланируемоеВремяДоставки") Тогда
		
		СтандартнаяОбработка = (Элементы.ФормированиеДоставки.ТекущиеДанные <> Неопределено И (ЗначениеЗаполнено(Элементы.ФормированиеДоставки.ТекущиеДанные.ЗаданиеНаПеревозку) ИЛИ (Элементы.ФормированиеДоставки.ТекущиеДанные.ПредставлениеСтрокиДоставки <> "")));
		
	//ИначеЕсли (Поле.Имя = "ФормированиеДоставкиЗаданиеНаПеревозкуМодель") Тогда
	//
	//	текИмяФормы = "Справочник.Номенклатура.Форма.ФормаЭлемента";
	//	текОбъект	= ПолучитьЗначениеРеквизитаНаСервере(Элемент.ТекущиеДанные.ЗаданиеНаПеревозку, "Модель");
	//	
	//	Если ЗначениеЗаполнено(текОбъект) Тогда
	//		ОткрытьФорму(текИмяФормы, Новый Структура("Ключ", текОбъект));
	//	КонецЕсли;
	//	
	//ИначеЕсли (Поле.Имя = "ФормированиеДоставкиЗаданиеНаПеревозкуТехника") Тогда
	//
	//	текИмяФормы = "Справочник.ОбъектыЭксплуатации.Форма.ФормаЭлемента";
	//	текОбъект	= ПолучитьЗначениеРеквизитаНаСервере(Элемент.ТекущиеДанные.ЗаданиеНаПеревозку, "Техника");
	//	
	//	Если ЗначениеЗаполнено(текОбъект) Тогда
	//		ОткрытьФорму(текИмяФормы, Новый Структура("Ключ", текОбъект));
	//	КонецЕсли;
	//	
	ИначеЕсли (Поле.Имя = "ФормированиеДоставкиКомментарийВодителю") Тогда
		
		СтандартнаяОбработка = (Элементы.ФормированиеДоставки.ТекущиеДанные <> Неопределено И (ЗначениеЗаполнено(Элементы.ФормированиеДоставки.ТекущиеДанные.ЗаданиеНаПеревозку) ИЛИ (Элементы.ФормированиеДоставки.ТекущиеДанные.ПредставлениеСтрокиДоставки <> "")));
		
	ИначеЕсли (Поле.Имя = "ФормированиеДоставкиНомерХодки") Тогда
		
		СтандартнаяОбработка = (Элементы.ФормированиеДоставки.ТекущиеДанные <> Неопределено И (ЗначениеЗаполнено(Элементы.ФормированиеДоставки.ТекущиеДанные.ЗаданиеНаПеревозку) ИЛИ (Элементы.ФормированиеДоставки.ТекущиеДанные.ПредставлениеСтрокиДоставки <> "")));
		
	ИначеЕсли (Поле.Имя = "ФормированиеДоставкиЗаданиеНаПеревозкуЗаявкаНаАрендуТехникиНомер") Тогда
	
		текИмяФормы = "Документ.пкЗаявкаНаАрендуТехники.Форма.ФормаДокумента";
		текОбъект	= ПолучитьЗначениеРеквизитаНаСервере(Элемент.ТекущиеДанные.ЗаданиеНаПеревозку, "ЗаявкаНаАрендуТехники");
		
		Если ЗначениеЗаполнено(текОбъект) Тогда
			ОткрытьФорму(текИмяФормы, Новый Структура("Ключ", текОбъект));
		КонецЕсли;
		
	//ИначеЕсли (Поле.Имя = "ФормированиеДоставкиЗаданиеНаПеревозкуЗаявкаНаАрендуТехникиПартнер") Тогда
	//
	//	текИмяФормы = "Справочник.Партнеры.Форма.ФормаЭлемента";
	//	текОбъект	= ПолучитьЗначениеРеквизитаНаСервере(ПолучитьЗначениеРеквизитаНаСервере(Элемент.ТекущиеДанные.ЗаданиеНаПеревозку, "ЗаявкаНаАрендуТехники"), "Партнер");
	//	
	//	Если ЗначениеЗаполнено(текОбъект) Тогда
	//		ОткрытьФорму(текИмяФормы, Новый Структура("Ключ", текОбъект));
	//	КонецЕсли;
	//	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ГиперСсылкаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаДоставкиПриИзменении(Элемент)
	
	ОбновитьДанныеТекущихЗаданийНаПеревозку("");

КонецПроцедуры

&НаКлиенте
Процедура ДатаДоставкиОчистка(Элемент, СтандартнаяОбработка)
	
	ОбновитьДанныеТекущихЗаданийНаПеревозку("");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ОбновитьДанныеТекущихЗаданийНаПеревозку("");
	УстановитьОтборПоПодразделениюДляСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОчистка(Элемент, СтандартнаяОбработка)
	
	ОбновитьДанныеТекущихЗаданийНаПеревозку("");
	УстановитьОтборПоПодразделениюДляСписка();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоПодразделениюДляСписка()
	
	текОтбор = "";
	
	Для Каждого текСтрока Из Список.Отбор.Элементы Цикл
		Если текСтрока.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") Тогда
			текОтбор = текСтрока;
			Прервать;
		КонецЕсли;		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Если текОтбор = "" Тогда
			текОтбор = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		КонецЕсли;
		текОтбор.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных("Подразделение");
		текОтбор.ПравоеЗначение	= Объект.Подразделение;
		текОтбор.ВидСравнения	= ВидСравненияКомпоновкиДанных.Равно;
		текОтбор.Использование	= Истина;
	ИначеЕсли текОтбор <> "" Тогда
		Список.Отбор.Элементы.Удалить(текОтбор);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура ФормированиеДоставкиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеДоставкиВодительПриИзменении(Элемент)
	
	Если Элементы.ФормированиеДоставки.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	тТекущиеДанные	= ФормированиеДоставкиДерево.НайтиПоИдентификатору(Элементы.ФормированиеДоставки.ТекущиеДанные.ПолучитьИдентификатор());
	ДанныеТранспортаПриИзмененииНаСервере(ОпределитьЗначениеРеквизитаРодителя(тТекущиеДанные, "Транспорт"),
		ОпределитьЗначениеРеквизитаРодителя(тТекущиеДанные, "Водитель"),
		ОпределитьЗначениеРеквизитаРодителя(тТекущиеДанные, "Перевозчик"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеДоставкиПеревозчикПриИзменении(Элемент)
	
	Если Элементы.ФормированиеДоставки.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	тТекущиеДанные	= ФормированиеДоставкиДерево.НайтиПоИдентификатору(Элементы.ФормированиеДоставки.ТекущиеДанные.ПолучитьИдентификатор());
	ДанныеТранспортаПриИзмененииНаСервере(ОпределитьЗначениеРеквизитаРодителя(тТекущиеДанные, "Транспорт"),
		ОпределитьЗначениеРеквизитаРодителя(тТекущиеДанные, "Водитель"),
		ОпределитьЗначениеРеквизитаРодителя(тТекущиеДанные, "Перевозчик"));
	
КонецПроцедуры

&НаСервере
Процедура ДанныеТранспортаПриИзмененииНаСервере(тТранспорт, тВодитель, тПеревозчик)
	
	тФормированиеДоставкиДерево = ДанныеФормыВЗначение(ФормированиеДоставкиДерево, Тип("ДеревоЗначений"));
	
	Для Каждого текТранспорт Из тФормированиеДоставкиДерево.Строки Цикл
		Если текТранспорт.Транспорт <> тТранспорт Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого текТочка Из текТранспорт.Строки Цикл
			Для Каждого текЗадание Из текТочка.Строки Цикл
				РегистрыСведений.пкФормированиеДоставки.ЗаписатьПараметрыДляЗадания(текЗадание.ЗаданиеНаПеревозку, 
					Новый Структура("ДатаДоставки,
									|Подразделение,
									|Транспорт,
									|Водитель,
									|Перевозчик,
									|НомерХодки,
									|ТочкаМаршрута",
									Объект.ДатаДоставки,
									Объект.Подразделение,
									тТранспорт, 
									тВодитель, 
									тПеревозчик,
									текЗадание.НомерХодки,
									текЗадание.ТочкаМаршрута));
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
&НаСервере
Функция ЕстьНарушениеОчередностиПерекатаИзТочкиИЛИВТочку(тТранспорт, тНомерХодки, тТочкаМаршрута, НоваяТочка)
	
	ЕстьНарушения = Ложь;
	
	тФормированиеДоставкиДерево = ДанныеФормыВЗначение(ФормированиеДоставкиДерево, Тип("ДеревоЗначений"));
	
	Для Каждого текТранспорт Из тФормированиеДоставкиДерево.Строки Цикл
		
		Если текТранспорт.Транспорт <> тТранспорт Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого текТочка Из текТранспорт.Строки Цикл
			Для Каждого текСтрока Из текТочка.Строки Цикл
				Если текСтрока.НомерХодки = тНомерХодки
					И текСтрока.ТочкаМаршрута = тТочкаМаршрута
					И ЗначениеЗаполнено(текСтрока.ЗаданиеНаПеревозку)
					И текСтрока.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.Перекат
				Тогда
					Если ЗначениеЗаполнено(текСтрока.ЗаданиеНаПеревозку.ЗаданиеНаПеревозку) Тогда
						//Задание - Оконание Перката: Не должно быть отправителя раньше новой точки
						Для Каждого текКонечнаяТочка Из текТранспорт.Строки Цикл
							Для Каждого текКонечнаяСтрока Из текКонечнаяТочка.Строки Цикл
								
								Если ЗначениеЗаполнено(текКонечнаяСтрока.ЗаданиеНаПеревозку)
									И текКонечнаяСтрока.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.Перекат
									И текКонечнаяСтрока.ЗаданиеНаПеревозку = текСтрока.ЗаданиеНаПеревозку.ЗаданиеНаПеревозку 
								Тогда
								
									ЕстьНарушения = ЕстьНарушения ИЛИ (НЕ текКонечнаяСтрока.ТочкаМаршрута < НоваяТочка);
									
								КонецЕсли;
							КонецЦикла;	
						КонецЦикла;	
					Иначе
						//Задание - Начало перката: Все окончательные должны быть позже новой точки
						Для Каждого текКонечнаяТочка Из текТранспорт.Строки Цикл
							Для Каждого текКонечнаяСтрока Из текКонечнаяТочка.Строки Цикл
								Если  ЗначениеЗаполнено(текКонечнаяСтрока.ЗаданиеНаПеревозку)
									И текКонечнаяСтрока.ЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.Перекат
									И текКонечнаяСтрока.ЗаданиеНаПеревозку.ЗаданиеНаПеревозку = текСтрока.ЗаданиеНаПеревозку 
								Тогда
								
									ЕстьНарушения = ЕстьНарушения ИЛИ (НЕ текКонечнаяСтрока.ТочкаМаршрута > НоваяТочка);
									
								КонецЕсли;
							КонецЦикла;	
						КонецЦикла;	
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла;	
	КонецЦикла;	
		
	Возврат ЕстьНарушения;
	
КонецФункции

&НаКлиенте
Процедура КомандаТочкуМаршрутаРаньше(Команда)
	
	Если Элементы.ФормированиеДоставки.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (Не ЗначениеЗаполнено(Элементы.ФормированиеДоставки.ТекущиеДанные.АдресДоставки))
		И(Не ЗначениеЗаполнено(Элементы.ФормированиеДоставки.ТекущиеДанные.ЗаданиеНаПеревозку))
	Тогда
		Возврат;
	КонецЕсли;
	
	текНомерХодки		= ОпределитьЗначениеРеквизитаРодителя(Элементы.ФормированиеДоставки.ТекущиеДанные, "НомерХодки");
	текТочкаМаршрута	= ОпределитьЗначениеРеквизитаРодителя(Элементы.ФормированиеДоставки.ТекущиеДанные, "ТочкаМаршрута");
	текТранспорт 		= ОпределитьЗначениеРеквизитаРодителя(Элементы.ФормированиеДоставки.ТекущиеДанные, "Транспорт");
	
	Если Элементы.ФормированиеДоставки.ТекущиеДанные.ЭтоЗаездНаБазу Тогда
		СдвинутьХодкуРаньшеНаСервере(текНомерХодки, текТранспорт);
	Иначе
		СдвинутьТочкуМаршрутаРаньшеНаСервере(текНомерХодки, текТочкаМаршрута, текТранспорт);
	КонецЕсли;
	
	ОбновитьДанныеТекущихЗаданийНаПеревозку("");
	
КонецПроцедуры

&НаСервере
Процедура СдвинутьХодкуРаньшеНаСервере(текНомерХодки, текТранспорт)
	
	тФормированиеДоставкиДерево = ДанныеФормыВЗначение(ФормированиеДоставкиДерево, Тип("ДеревоЗначений"));
	
	Для Каждого тТранспорт из тФормированиеДоставкиДерево.Строки Цикл
		
		Если тТранспорт.Транспорт <> текТранспорт Тогда
			Продолжить;
		КонецЕсли;
		
		МинХодка	= 1;
		МаксХодка	= 1;
		Для Каждого текСтрока из тТранспорт.Строки Цикл
			МинХодка	= Мин(МинХодка, текСтрока.НомерХодки);
			МаксХодка	= Макс(МаксХодка, текСтрока.НомерХодки);
		КонецЦикла;
		
		Если текНомерХодки = МинХодка Тогда
			Возврат; //некуда двигать
		КонецЕсли;
		
		Для Каждого текСтрока Из тТранспорт.Строки Цикл
			
			Если текСтрока.НомерХодки = текНомерХодки Тогда
				текСтрока.НомерХодки = текНомерХодки - 1;
				Для Каждого текСтрокаЗадания Из текСтрока.Строки Цикл
					текСтрокаЗадания.НомерХодки = текСтрока.НомерХодки;
					РегистрыСведений.пкФормированиеДоставки.ЗаписатьПараметрыДляЗадания(текСтрокаЗадания.ЗаданиеНаПеревозку, 
						Новый Структура("ДатаДоставки,
										|Подразделение,
										|Транспорт,
										|Водитель,
										|Перевозчик,
										|НомерХодки,
										|ТочкаМаршрута",
										Объект.ДатаДоставки,
										Объект.Подразделение,
										текТранспорт,
										тТранспорт.Водитель,
										тТранспорт.Перевозчик,
										текСтрокаЗадания.НомерХодки,
										текСтрокаЗадания.ТочкаМаршрута));
				КонецЦикла;
			ИначеЕсли текСтрока.НомерХодки = текНомерХодки - 1 Тогда
				текСтрока.НомерХодки = текНомерХодки;
				Для Каждого текСтрокаЗадания Из текСтрока.Строки Цикл
					текСтрокаЗадания.НомерХодки = текСтрока.НомерХодки;
					РегистрыСведений.пкФормированиеДоставки.ЗаписатьПараметрыДляЗадания(текСтрокаЗадания.ЗаданиеНаПеревозку, 
						Новый Структура("ДатаДоставки,
										|Подразделение,
										|Транспорт,
										|Водитель,
										|Перевозчик,
										|НомерХодки,
										|ТочкаМаршрута",
										Объект.ДатаДоставки,
										Объект.Подразделение,
										текТранспорт,
										тТранспорт.Водитель,
										тТранспорт.Перевозчик,
										текСтрокаЗадания.НомерХодки,
										текСтрокаЗадания.ТочкаМаршрута));
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СдвинутьТочкуМаршрутаРаньшеНаСервере(текНомерХодки, текТочкаМаршрута, текТранспорт)
	
	тФормированиеДоставкиДерево = ДанныеФормыВЗначение(ФормированиеДоставкиДерево, Тип("ДеревоЗначений"));
	
	Для Каждого тТранспорт из тФормированиеДоставкиДерево.Строки Цикл
		
		Если тТранспорт.Транспорт <> текТранспорт Тогда
			Продолжить;
		КонецЕсли;
		
		МинТочка = 1;
		Для Каждого текСтрока из тТранспорт.Строки Цикл
			Если текНомерХодки <> текСтрока.НомерХодки Тогда
				Продолжить;
			КонецЕсли;
			МинТочка = Мин(МинТочка, текСтрока.ТочкаМаршрута);
		КонецЦикла;
		
		Если текТочкаМаршрута = МинТочка Тогда
			Возврат; //некуда двигать
		КонецЕсли;
		
		//Проверить возможность сдвига по заданиям по перекату
		Если ЕстьНарушениеОчередностиПерекатаИзТочкиИЛИВТочку(текТранспорт, текНомерХодки, текТочкаМаршрута, текТочкаМаршрута - 1) Тогда
			тСообщение = Новый СообщениеПользователю;
			тСообщение.Текст = НСтр("ru='Между точками маршрута осуществляется перекат техники, для перекатов движение может быть только в одном направлении.'");
			тСообщение.Сообщить();
			Возврат;
		КонецЕсли;
		
		Для Каждого текСтрока Из тТранспорт.Строки Цикл
			
			Если текСтрока.ТочкаМаршрута = текТочкаМаршрута Тогда
				текСтрока.ТочкаМаршрута = текТочкаМаршрута - 1;
				Для Каждого текСтрокаЗадания Из текСтрока.Строки Цикл
					текСтрокаЗадания.ТочкаМаршрута = текСтрока.ТочкаМаршрута;
					РегистрыСведений.пкФормированиеДоставки.ЗаписатьПараметрыДляЗадания(текСтрокаЗадания.ЗаданиеНаПеревозку, 
						Новый Структура("ДатаДоставки,
										|Подразделение,
										|Транспорт,
										|Водитель,
										|Перевозчик,
										|НомерХодки,
										|ТочкаМаршрута",
										Объект.ДатаДоставки,
										Объект.Подразделение,
										текТранспорт,
										тТранспорт.Водитель,
										тТранспорт.Перевозчик,
										текСтрокаЗадания.НомерХодки,
										текСтрокаЗадания.ТочкаМаршрута));
				КонецЦикла;
			ИначеЕсли текСтрока.ТочкаМаршрута = текТочкаМаршрута - 1 Тогда
				текСтрока.ТочкаМаршрута = текТочкаМаршрута;
				Для Каждого текСтрокаЗадания Из текСтрока.Строки Цикл
					текСтрокаЗадания.ТочкаМаршрута = текСтрока.ТочкаМаршрута;
					РегистрыСведений.пкФормированиеДоставки.ЗаписатьПараметрыДляЗадания(текСтрокаЗадания.ЗаданиеНаПеревозку, 
						Новый Структура("ДатаДоставки,
										|Подразделение,
										|Транспорт,
										|Водитель,
										|Перевозчик,
										|НомерХодки,
										|ТочкаМаршрута",
										Объект.ДатаДоставки,
										Объект.Подразделение,
										текТранспорт,
										тТранспорт.Водитель,
										тТранспорт.Перевозчик,
										текСтрокаЗадания.НомерХодки,
										текСтрокаЗадания.ТочкаМаршрута));
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура КомандаТочкуМаршрутаПозже(Команда)
	
	Если Элементы.ФормированиеДоставки.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (Не ЗначениеЗаполнено(Элементы.ФормированиеДоставки.ТекущиеДанные.АдресДоставки))
		И(Не ЗначениеЗаполнено(Элементы.ФормированиеДоставки.ТекущиеДанные.ЗаданиеНаПеревозку))
	Тогда
		Возврат;
	КонецЕсли;
	
	текНомерХодки		= ОпределитьЗначениеРеквизитаРодителя(Элементы.ФормированиеДоставки.ТекущиеДанные, "НомерХодки");
	текТочкаМаршрута	= ОпределитьЗначениеРеквизитаРодителя(Элементы.ФормированиеДоставки.ТекущиеДанные, "ТочкаМаршрута");
	текТранспорт 		= ОпределитьЗначениеРеквизитаРодителя(Элементы.ФормированиеДоставки.ТекущиеДанные, "Транспорт");
	
	Если Элементы.ФормированиеДоставки.ТекущиеДанные.ЭтоЗаездНаБазу Тогда
		СдвинутьХодкуПозжеНаСервере(текНомерХодки, текТранспорт);
	Иначе
		СдвинутьТочкуМаршрутаПозжеНаСервере(текНомерХодки, текТочкаМаршрута, текТранспорт);
	КонецЕсли;
	
	ОбновитьДанныеТекущихЗаданийНаПеревозку("");
	
КонецПроцедуры

&НаСервере
Процедура СдвинутьХодкуПозжеНаСервере(текНомерХодки, текТранспорт)
	
	тФормированиеДоставкиДерево = ДанныеФормыВЗначение(ФормированиеДоставкиДерево, Тип("ДеревоЗначений"));
	
	Для Каждого тТранспорт из тФормированиеДоставкиДерево.Строки Цикл
		
		Если тТранспорт.Транспорт <> текТранспорт Тогда
			Продолжить;
		КонецЕсли;
		
		МинХодка	= 1;
		МаксХодка	= 1;
		Для Каждого текСтрока из тТранспорт.Строки Цикл
			МинХодка	= Мин(МинХодка, текСтрока.НомерХодки);
			МаксХодка	= Макс(МаксХодка, текСтрока.НомерХодки);
		КонецЦикла;
		
		Если текНомерХодки = МаксХодка Тогда
			Возврат; //некуда двигать
		КонецЕсли;
		
		Для Каждого текСтрока Из тТранспорт.Строки Цикл
			
			Если текСтрока.НомерХодки = текНомерХодки Тогда
				текСтрока.НомерХодки = текНомерХодки + 1;
				Для Каждого текСтрокаЗадания Из текСтрока.Строки Цикл
					текСтрокаЗадания.НомерХодки = текСтрока.НомерХодки;
					РегистрыСведений.пкФормированиеДоставки.ЗаписатьПараметрыДляЗадания(текСтрокаЗадания.ЗаданиеНаПеревозку, 
						Новый Структура("ДатаДоставки,
										|Подразделение,
										|Транспорт,
										|Водитель,
										|Перевозчик,
										|НомерХодки,
										|ТочкаМаршрута",
										Объект.ДатаДоставки,
										Объект.Подразделение,
										текТранспорт,
										тТранспорт.Водитель,
										тТранспорт.Перевозчик,
										текСтрокаЗадания.НомерХодки,
										текСтрокаЗадания.ТочкаМаршрута));
				КонецЦикла;
			ИначеЕсли текСтрока.НомерХодки = текНомерХодки + 1 Тогда
				текСтрока.НомерХодки = текНомерХодки;
				Для Каждого текСтрокаЗадания Из текСтрока.Строки Цикл
					текСтрокаЗадания.НомерХодки = текСтрока.НомерХодки;
					РегистрыСведений.пкФормированиеДоставки.ЗаписатьПараметрыДляЗадания(текСтрокаЗадания.ЗаданиеНаПеревозку, 
						Новый Структура("ДатаДоставки,
										|Подразделение,
										|Транспорт,
										|Водитель,
										|Перевозчик,
										|НомерХодки,
										|ТочкаМаршрута",
										Объект.ДатаДоставки,
										Объект.Подразделение,
										текТранспорт,
										тТранспорт.Водитель,
										тТранспорт.Перевозчик,
										текСтрокаЗадания.НомерХодки,
										текСтрокаЗадания.ТочкаМаршрута));
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СдвинутьТочкуМаршрутаПозжеНаСервере(текНомерХодки, текТочкаМаршрута, текТранспорт)
	
	тФормированиеДоставкиДерево = ДанныеФормыВЗначение(ФормированиеДоставкиДерево, Тип("ДеревоЗначений"));
	
	Для Каждого тТранспорт из тФормированиеДоставкиДерево.Строки Цикл
		
		Если тТранспорт.Транспорт <> текТранспорт Тогда
			Продолжить;
		КонецЕсли;
		
		МаксТочка = 1;
		Для Каждого текСтрока из тТранспорт.Строки Цикл
			Если текНомерХодки <> текСтрока.НомерХодки Тогда
				Продолжить;
			КонецЕсли;
			МаксТочка = Макс(МаксТочка, текСтрока.ТочкаМаршрута);
		КонецЦикла;
		
		Если текТочкаМаршрута = МаксТочка Тогда
			Возврат; //некуда двигать
		КонецЕсли;
		
		//Проверить возможность сдвига по заданиям по перекату
		Если ЕстьНарушениеОчередностиПерекатаИзТочкиИЛИВТочку(текТранспорт, текНомерХодки, текТочкаМаршрута, текТочкаМаршрута + 1) Тогда
			тСообщение = Новый СообщениеПользователю;
			тСообщение.Текст = НСтр("ru='Между точками маршрута осуществляется перекат техники, для перекатов движение может быть только в одном направлении.'");
			тСообщение.Сообщить();
			Возврат;
		КонецЕсли;
		
		Для Каждого текСтрока Из тТранспорт.Строки Цикл
			
			Если текСтрока.ТочкаМаршрута = текТочкаМаршрута Тогда
				текСтрока.ТочкаМаршрута = текТочкаМаршрута + 1;
				Для Каждого текСтрокаЗадания Из текСтрока.Строки Цикл
					текСтрокаЗадания.ТочкаМаршрута = текСтрока.ТочкаМаршрута;
					РегистрыСведений.пкФормированиеДоставки.ЗаписатьПараметрыДляЗадания(текСтрокаЗадания.ЗаданиеНаПеревозку, 
						Новый Структура("ДатаДоставки,
										|Подразделение,
										|Транспорт,
										|Водитель,
										|Перевозчик,
										|НомерХодки,
										|ТочкаМаршрута",
										Объект.ДатаДоставки,
										Объект.Подразделение,
										текТранспорт,
										тТранспорт.Водитель,
										тТранспорт.Перевозчик,
										текСтрокаЗадания.НомерХодки,
										текСтрокаЗадания.ТочкаМаршрута));
				КонецЦикла;
			ИначеЕсли текСтрока.ТочкаМаршрута = текТочкаМаршрута + 1 Тогда
				текСтрока.ТочкаМаршрута = текТочкаМаршрута;
				Для Каждого текСтрокаЗадания Из текСтрока.Строки Цикл
					текСтрокаЗадания.ТочкаМаршрута = текСтрока.ТочкаМаршрута;
					РегистрыСведений.пкФормированиеДоставки.ЗаписатьПараметрыДляЗадания(текСтрокаЗадания.ЗаданиеНаПеревозку, 
						Новый Структура("ДатаДоставки,
										|Подразделение,
										|Транспорт,
										|Водитель,
										|Перевозчик,
										|НомерХодки,
										|ТочкаМаршрута",
										Объект.ДатаДоставки,
										Объект.Подразделение,
										текТранспорт,
										тТранспорт.Водитель,
										тТранспорт.Перевозчик,
										текСтрокаЗадания.НомерХодки,
										текСтрокаЗадания.ТочкаМаршрута));
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Формирование итоговых документов Доставка по строкам табличной части

&НаСервере
Функция ЕстьДоступныеСпособыПогрузки(тЗаданиеНаПеревозку, тТранспорт, Сообщать = Ложь)
	
	Доступно = Истина;
	
	Если Не ЗначениеЗаполнено(тЗаданиеНаПеревозку) Тогда
		Возврат Доступно;
	КонецЕсли;
			
	Если Не ЗначениеЗаполнено(тТранспорт) Тогда
		Возврат Доступно;
	КонецЕсли;
			
	тМодель = тЗаданиеНаПеревозку.Модель;
	
	Если тЗаданиеНаПеревозку.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.ПеремещениеМеждуРегионами Тогда
		тОбъектСтроительства	= "";
	ИначеЕсли ЗначениеЗаполнено(тЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники) Тогда
		тОбъектСтроительства	= тЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники.ОбъектСтроительства;
	КонецЕсли;
	
	ЗапросДоступность = Новый Запрос;
	ЗапросДоступность.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоступностьДляМодели.СпособПогрузкиРазгрузки
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		пкДоступностьСпособовПогрузкиИРазгрузкиТехники.СпособПогрузкиРазгрузки КАК СпособПогрузкиРазгрузки
	|	ИЗ
	|		РегистрСведений.пкДоступностьСпособовПогрузкиИРазгрузкиТехники КАК пкДоступностьСпособовПогрузкиИРазгрузкиТехники
	|	ГДЕ
	|		пкДоступностьСпособовПогрузкиИРазгрузкиТехники.Доступен
	|		И пкДоступностьСпособовПогрузкиИРазгрузкиТехники.Объект = &Модель) КАК ДоступностьДляМодели
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкДоступностьСпособовПогрузкиИРазгрузкиТехники КАК ДоступностьДляОбъектаСтроительства
	|		ПО ДоступностьДляМодели.СпособПогрузкиРазгрузки = ДоступностьДляОбъектаСтроительства.СпособПогрузкиРазгрузки
	|			И (ДоступностьДляОбъектаСтроительства.Объект = &ОбъектСтроительства)
	|			И (ДоступностьДляОбъектаСтроительства.Доступен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкДоступностьСпособовПогрузкиИРазгрузкиТехники КАК ДоступностьДляТранспорта
	|		ПО ДоступностьДляМодели.СпособПогрузкиРазгрузки = ДоступностьДляТранспорта.СпособПогрузкиРазгрузки
	|			И (ДоступностьДляТранспорта.Объект = &Транспорт)
	|			И (ДоступностьДляТранспорта.Доступен)
	|ГДЕ
	|	НЕ(ДоступностьДляОбъектаСтроительства.СпособПогрузкиРазгрузки ЕСТЬ NULL) 
	|				ИЛИ НЕ(ДоступностьДляТранспорта.СпособПогрузкиРазгрузки ЕСТЬ NULL )";
	ЗапросДоступность.УстановитьПараметр("Модель", тМодель);
	ЗапросДоступность.УстановитьПараметр("ОбъектСтроительства", тОбъектСтроительства);
	ЗапросДоступность.УстановитьПараметр("Транспорт", тТранспорт);
	РезЗапроса = ЗапросДоступность.Выполнить().Выбрать();
	
	Если Не РезЗапроса.Следующий() Тогда
		
		Доступно = Ложь;
		
		Если Сообщать Тогда
			тСообщение = Новый СообщениеПользователю;
			тСообщение.Текст = НСтр("ru='Не найдено доступного способа погрузки/разгрузки:'") + 
				тЗаданиеНаПеревозку + " / " + тТранспорт;
			тСообщение.Сообщить();
		КонецЕсли;
		
	КонецЕсли;
			
	Возврат Доступно;
	
КонецФункции

&НаКлиенте
Процедура КомандаСформироватьДоставкуПоТекущемуТрансопрту(Команда)
	
	Если Элементы.ФормированиеДоставки.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	тТранспорт = ОпределитьЗначениеРеквизитаРодителя(Элементы.ФормированиеДоставки.ТекущиеДанные, "Транспорт");
	Если Не ЗначениеЗаполнено(тТранспорт) Тогда
		Возврат;
	КонецЕсли;
	
	КорректноСформированныДоставки(тТранспорт);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСформироватьДоставку(Команда)
	
	КорректноСформированныДоставки();
	
КонецПроцедуры

&НаКлиенте
Функция КорректноСформированныДоставки(тТранспорт = Неопределено)
	
	Корректно = КорректноСформированныДоставкиНаСервере(тТранспорт);
	Если Не Корректно Тогда
	    ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаРезультатаПроверкиЗавершение", ЭтаФорма, 
			Новый Структура("Транспорт", тТранспорт)), 
			НСтр("ru='Не все данные по формируемым доставкам указаны корректно. 
			|Создать документы несмотря на это(Да) или вернуться и скорректировать данные (Нет)?'"), 
				РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Иначе
		ОбработкаРезультатаПроверкиЗавершение(КодВозвратаДиалога.Да, Новый Структура("Транспорт", тТранспорт));
	КонецЕсли;
	
	Возврат Корректно;
	
КонецФункции
	
&НаСервере
Функция КорректноСформированныДоставкиНаСервере(тТранспорт = Неопределено)
	
	Корректно = Истина;
	
	тФормированиеДоставкиДерево = ДанныеФормыВЗначение(ФормированиеДоставкиДерево, Тип("ДеревоЗначений"));
	
	//1. Проверим заполенность Транспорта и водителей в строках будущих Доставок
	Для Каждого текТранспорт Из тФормированиеДоставкиДерево.Строки Цикл
		
		Если тТранспорт <> Неопределено Тогда
			Если текТранспорт.Транспорт <> тТранспорт Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(текТранспорт.Транспорт) Тогда
			
			Корректно = Ложь;
			
			тСообщение = Новый СообщениеПользователю;
			тСообщение.Текст = НСтр("ru='Не указано Транспортное средство для:'") + текТранспорт.Транспорт;
			тСообщение.Сообщить();
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(текТранспорт.Водитель) Тогда
			
			Корректно = Ложь;
			
			тСообщение = Новый СообщениеПользователю;
			тСообщение.Текст = НСтр("ru='Не указан Водитель или Перевозчик для:'") + текТранспорт.Транспорт;
			тСообщение.Сообщить();
			
		КонецЕсли;
		
		Для Каждого текТочка Из текТранспорт.Строки Цикл
		
			Если Не ЗначениеЗаполнено(текТочка.ТочкаМаршрута) Тогда
				
				Корректно = Ложь;
				
				тСообщение = Новый СообщениеПользователю;
				тСообщение.Текст = НСтр("ru='Не верно определен маршрут для:'") + 
					текТочка.АдресДоставки + " / " + текТранспорт.Транспорт;
				тСообщение.Сообщить();
				
			КонецЕсли;
			
			Для Каждого текЗадание Из текТочка.Строки Цикл
				
				Если Не ЗначениеЗаполнено(текЗадание.ЗаданиеНаПеревозку) Тогда
					
					Корректно = Ложь;
					
					тСообщение = Новый СообщениеПользователю;
					тСообщение.Текст = НСтр("ru='Не указан документ Задание на перевозку для строки:'") + текЗадание.НомерСтроки;
					тСообщение.Сообщить();
				Иначе
					Если Не ЗначениеЗаполнено(текЗадание.ЗаданиеНаПеревозку.СпособДоставки) Тогда
					
						Корректно = Ложь;
						
						тСообщение = Новый СообщениеПользователю;
						тСообщение.Текст = НСтр("ru='Не указан способ доставки для:'") + 
							текЗадание.ЗаданиеНаПеревозку + " / " + текТранспорт.Транспорт;
						тСообщение.Сообщить();
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	//2. Проверим перевес/перегабарит по точкам маршрута
	Для Каждого текТранспорт Из тФормированиеДоставкиДерево.Строки Цикл
		
		Если тТранспорт <> Неопределено Тогда
			Если текТранспорт.Транспорт <> тТранспорт Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого текСтрока Из текТранспорт.Строки Цикл
			
			Если (?(текТранспорт.Транспорт.пкКоэффициентЗагрузкиТС <> 0, 
					текТранспорт.Транспорт.пкКоэффициентЗагрузкиТС, 1) * 
						текТранспорт.Транспорт.ВместимостьВКубическихМетрах < текСтрока.Объем)
				ИЛИ (текТранспорт.Транспорт.ГрузоподъемностьВТоннах * 1000 < текСтрока.Вес)
			Тогда
			
				Корректно = Ложь;
				
				тСообщение = Новый СообщениеПользователю;
				тСообщение.Текст = НСтр("ru='Первышены значения весо-габаритных характеристик для:'") + текТранспорт.Транспорт + " / " + текСтрока.АдресДоставки;
				тСообщение.Сообщить();
				
			КонецЕсли;
						
			Для Каждого текСтрокаЗадания Из текСтрока.Строки Цикл
				Корректно = Корректно И ЕстьДоступныеСпособыПогрузки(текСтрокаЗадания.ЗаданиеНаПеревозку, текТранспорт.Транспорт, Истина);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Корректно;
	
КонецФункции
	
&НаКлиенте
Процедура ОбработкаРезультатаПроверкиЗавершение(Результат, ПараметрыОповещения) Экспорт

    Если Результат = КодВозвратаДиалога.Да Тогда
		ПроверитьНаличиеДоставокНаДатуПоТранспорту(ПараметрыОповещения.Транспорт);		
	КонецЕсли;
	
КонецПроцедуры    

&НаКлиенте
Процедура ПроверитьНаличиеДоставокНаДатуПоТранспорту(тТранспорт) Экспорт

	Если ЕстьДоставкиПоТранспортуНаДату(тТранспорт) Тогда
	    ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаРезультатаВопросоОДобавлении", ЭтаФорма, 
			Новый Структура("Транспорт", тТранспорт)), 
			НСтр("ru='На день доставки уже существуют формируемые или подготовленные Доставки. 
			|Добавить в ранее созданные(Да) или создать новые Доставки (Нет)?'"), 
				РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		
		СформироватьДокументыДоставки(Ложь, тТранспорт);
		ОбновитьДанныеТекущихЗаданийНаПеревозку("");
		
	КонецЕсли;
	
КонецПроцедуры    

&НаСервере
Функция ЕстьДоставкиПоТранспортуНаДату(тТранспорт)
	
	ЕстьДоставки = Ложь;
	
	Если тТранспорт = Неопределено Тогда
	
		ЗапросД = Новый Запрос;
		ЗапросД.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	пкДоставка.Ссылка,
		|	пкДоставка.ТранспортноеСредство
		|ИЗ
		|	Документ.пкДоставка КАК пкДоставка
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(пкДоставка.НачалоРейсаПлан, ДЕНЬ) = &ДатаДоставки
		|	И пкДоставка.Подразделение = &Подразделение
		|	И НЕ пкДоставка.ПометкаУдаления
		//|	И пкДоставка.Проведен
		|	И пкДоставка.Статус = ЗНАЧЕНИЕ(Перечисление.пкСтатусыДоставки.Открыто)";
		ЗапросД.УстановитьПараметр("ДатаДоставки", НачалоДня(Объект.ДатаДоставки));
		ЗапросД.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Иначе
		
		ЗапросД = Новый Запрос;
		ЗапросД.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	пкДоставка.Ссылка,
		|	пкДоставка.ТранспортноеСредство
		|ИЗ
		|	Документ.пкДоставка КАК пкДоставка
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(пкДоставка.НачалоРейсаПлан, ДЕНЬ) = &ДатаДоставки
		|	И пкДоставка.Подразделение = &Подразделение
		|	И НЕ пкДоставка.ПометкаУдаления
		//|	И пкДоставка.Проведен
		|	И пкДоставка.Статус = ЗНАЧЕНИЕ(Перечисление.пкСтатусыДоставки.Открыто)
		|	И пкДоставка.ТранспортноеСредство = &ТранспортноеСредство";
		ЗапросД.УстановитьПараметр("ДатаДоставки", НачалоДня(Объект.ДатаДоставки));
		ЗапросД.УстановитьПараметр("Подразделение", Объект.Подразделение);
		ЗапросД.УстановитьПараметр("ТранспортноеСредство", тТранспорт);

	КонецЕсли;
	
	РезЗапроса = ЗапросД.Выполнить().Выбрать();
	Если РезЗапроса.Следующий() Тогда
		ЕстьДоставки = Истина;
	КонецЕсли;
	
	Возврат ЕстьДоставки;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаРезультатаВопросоОДобавлении(Результат, ПараметрыОповещения) Экспорт

	СформироватьДокументыДоставки(Результат = КодВозвратаДиалога.Да, ПараметрыОповещения.Транспорт);	
	ОбновитьДанныеТекущихЗаданийНаПеревозку("");
	
КонецПроцедуры    

&НаСервере
Процедура СформироватьДокументыДоставки(Добавлять, тТранспорт = Неопределено)
	
	тФормированиеДоставкиДерево = ДанныеФормыВЗначение(ФормированиеДоставкиДерево, Тип("ДеревоЗначений"));
	
	Для Каждого текТранспорт Из тФормированиеДоставкиДерево.Строки Цикл
			
		Если тТранспорт <> Неопределено Тогда
			Если текТранспорт.Транспорт <> тТранспорт Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если текТранспорт.Строки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Отказ = Ложь;
		
		Если Добавлять Тогда
			
			ЗапросД = Новый Запрос;
			ЗапросД.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	пкДоставка.Ссылка
			|ИЗ
			|	Документ.пкДоставка КАК пкДоставка
			|ГДЕ
			|	НАЧАЛОПЕРИОДА(пкДоставка.НачалоРейсаПлан, ДЕНЬ) = &ДатаДоставки
			|	И пкДоставка.Подразделение = &Подразделение
			|	И пкДоставка.ТранспортноеСредство = &Транспорт
			|	И НЕ пкДоставка.ПометкаУдаления
			//|	И пкДоставка.Проведен
			|	И пкДоставка.Статус = ЗНАЧЕНИЕ(Перечисление.пкСтатусыДоставки.Открыто)";
			ЗапросД.УстановитьПараметр("ДатаДоставки", НачалоДня(Объект.ДатаДоставки));
			ЗапросД.УстановитьПараметр("Транспорт", текТранспорт.Транспорт);
			ЗапросД.УстановитьПараметр("Подразделение", Объект.Подразделение);
			
			РезЗапроса = ЗапросД.Выполнить().Выбрать();
			Если РезЗапроса.Следующий() Тогда
				тОбъект = РезЗапроса.Ссылка.ПолучитьОбъект();
			Иначе
				
				тОбъект = Документы.пкДоставка.СоздатьДокумент();
				
				тОбъект.Дата 					= ТекущаяДата();
				тОбъект.УстановитьНовыйНомер();
				
				тОбъект.НачалоРейсаПлан			= Объект.ДатаДоставки;
				
				тОбъект.Автор					= Пользователи.ТекущийПользователь();
				тОбъект.Ответственный			= Пользователи.ТекущийПользователь();
				тОбъект.Комментарий				= НСтр("ru='Документ создан обработкой Управление логистикой:'")  + 
					ТекущаяДата() + " " + Пользователи.ТекущийПользователь();
					
			КонецЕсли;
		Иначе
			
			тОбъект = Документы.пкДоставка.СоздатьДокумент();
			
			тОбъект.Дата 					= ТекущаяДата();
			тОбъект.УстановитьНовыйНомер();
			
			тОбъект.НачалоРейсаПлан			= Объект.ДатаДоставки;
			тОбъект.ОкончаниеРейсаПлан		= КонецДня(тОбъект.НачалоРейсаПлан);
			
			тОбъект.Автор					= Пользователи.ТекущийПользователь();
			тОбъект.Ответственный			= Пользователи.ТекущийПользователь();
			тОбъект.Комментарий				= НСтр("ru='Документ создан обработкой Управление логистикой:'")  + 
				ТекущаяДата() + " " + Пользователи.ТекущийПользователь();
				
		КонецЕсли;
			
		тОбъект.ТранспортноеСредство	= текТранспорт.Транспорт;
		Если ЗначениеЗаполнено(тОбъект.ТранспортноеСредство) Тогда
			тОбъект.МаксимальныйВес			= тОбъект.ТранспортноеСредство.ГрузоподъемностьВТоннах;
			тОбъект.КоэффициентЗагрузкиТС	= ?(тОбъект.ТранспортноеСредство.пкКоэффициентЗагрузкиТС <> 0, тОбъект.ТранспортноеСредство.пкКоэффициентЗагрузкиТС, 1);
			тОбъект.МаксимальныйОбъем		= тОбъект.ТранспортноеСредство.ВместимостьВКубическихМетрах * тОбъект.КоэффициентЗагрузкиТС;
		Иначе
			тОбъект.МаксимальныйВес			= 0;
			тОбъект.КоэффициентЗагрузкиТС	= 1;
			тОбъект.МаксимальныйОбъем		= 0;
		КонецЕсли;
		
		тОбъект.Водитель				= текТранспорт.Водитель;
		Если ЗначениеЗаполнено(тОбъект.Водитель) Тогда
			Если ТипЗнч(тОбъект.Водитель) <> Тип("Строка") Тогда
				тОбъект.Д_Водитель	= СклонениеПредставленийОбъектов.ПросклонятьПредставлениеПоВсемПадежам(тОбъект.Водитель.Наименование, Истина).ДательныйПадеж;
				тОбъект.Д_Документ	= "";
				ЗапросД = Новый Запрос;
				ЗапросД.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
				|	ДокументыФизическихЛицСрезПоследних.Серия,
				|	ДокументыФизическихЛицСрезПоследних.Номер,
				|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи,
				|	ДокументыФизическихЛицСрезПоследних.КемВыдан,
				|	ДокументыФизическихЛицСрезПоследних.Представление
				|ИЗ
				|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(&ДатаДокумента, Физлицо = &Физлицо) КАК ДокументыФизическихЛицСрезПоследних";
				ЗапросД.УстановитьПараметр("ДатаДокумента", КонецДня(тОбъект.Дата));
				ЗапросД.УстановитьПараметр("Физлицо", тОбъект.Водитель);
				РезЗапроса = ЗапросД.Выполнить().Выбрать();
				Если РезЗапроса.Следующий() Тогда
					тОбъект.Д_Документ	= РезЗапроса.Представление;
				КонецЕсли;
			Иначе
				тОбъект.Д_Водитель	= СклонениеПредставленийОбъектов.ПросклонятьПредставлениеПоВсемПадежам(тОбъект.Водитель, Истина).ДательныйПадеж;
				тОбъект.Д_Документ	= "";
			КонецЕсли;
		Иначе
			тОбъект.Д_Водитель	= "";
			тОбъект.Д_Документ	= "";
		КонецЕсли;
		
		тОбъект.Перевозчик				= текТранспорт.Перевозчик;
		тОбъект.ДоставкуВыполняет		= ?(ЗначениеЗаполнено(текТранспорт.Перевозчик), 
			Перечисления.ТипыИсполнителейЗаданийНаПеревозку.Перевозчик, 
			Перечисления.ТипыИсполнителейЗаданийНаПеревозку.НашаТранспортнаяСлужба);
		
		тОбъект.Подразделение			= Объект.Подразделение;
		тОбъект.Статус					= Перечисления.пкСтатусыДоставки.Открыто;
		
		Для Каждого текТочка Из текТранспорт.Строки Цикл
			Для Каждого текСтрока Из текТочка.Строки Цикл
				
				тОбъект.СпособДоставки					= текСтрока.ЗаданиеНаПеревозку.СпособДоставки;
				
				НоваяСтрока = тОбъект.ЗаданияНаПеревозку.Добавить();
				НоваяСтрока.ЗаданиеНаПеревозку 			= текСтрока.ЗаданиеНаПеревозку;
				НоваяСтрока.ПланируемоеВремяДоставки	= ?(ЗначениеЗаполнено(текСтрока.ПланируемоеВремяДоставки), текСтрока.ПланируемоеВремяДоставки, НачалоДня(Объект.ДатаДоставки) + (текСтрока.ЗаданиеНаПеревозку.ВремяДоставкиПо - '00010101'));
				НоваяСтрока.НомерХодки					= текСтрока.НомерХодки;
				НоваяСтрока.ТочкаМаршрута				= текСтрока.ТочкаМаршрута;
		
			КонецЦикла;
		КонецЦикла;
		
		тОбъект.ЗаданияНаПеревозку.Сортировать("ПланируемоеВремяДоставки, НомерСтроки");
		
		//Заполним маршрут и Проверим нет ли двух строк с одним адресом точкой маршрута, но разными адресами
		//Упорядочим по ТочкиМаршрута, План время доставки
		тОбъект.ЗаданияНаПеревозку.Сортировать("ТочкаМаршрута, ПланируемоеВремяДоставки");
		
		//Попытка
		//	тОбъект.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
		//	
		//	тСообщение = Новый СообщениеПользователю;
		//	тСообщение.Текст = НСтр("ru='Создан новый документ:'") + тОбъект.Ссылка;
		//	тСообщение.Сообщить();
		//Исключение
		//	Отказ = Истина;
		//	тСообщение = Новый СообщениеПользователю;
		//	тСообщение.Текст = ОписаниеОшибки();
		//	тСообщение.Сообщить();
		//КонецПопытки;
		
		Если тОбъект.ПроверитьЗаполнение() Тогда
			Попытка
				тОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			
				тСообщение = Новый СообщениеПользователю;
				тСообщение.Текст = НСтр("ru='Создан новый документ:'") + тОбъект.Ссылка;
				тСообщение.Сообщить();
			Исключение
				Отказ = Истина;
				тСообщение = Новый СообщениеПользователю;
				тСообщение.Текст = НСтр("ru='Не удалось создать документа:'") + тОбъект.Ссылка + "(" + ОписаниеОшибки() + ")";
				тСообщение.Сообщить();
			КонецПопытки;
			Если Не Отказ Тогда
				тОбъект.СформироватьАктыПриемаПередачи(Отказ);
			КонецЕсли;
		КонецЕсли;
		
		
		Если Не Отказ Тогда
			Для Каждого текТочка Из текТранспорт.Строки Цикл
				Для Каждого текСтрока Из текТочка.Строки Цикл
					РегистрыСведений.пкФормированиеДоставки.ИсключитьЗаданиеИзДоставки(текСтрока.ЗаданиеНаПеревозку);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура КомандаРасформироватьДоставку(Команда)
	
	Если Элементы.ФормированиеДоставки.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	тТранспорт = ОпределитьЗначениеРеквизитаРодителя(Элементы.ФормированиеДоставки.ТекущиеДанные, "Транспорт");
	Если Не ЗначениеЗаполнено(тТранспорт) Тогда
		Возврат;
	КонецЕсли;
	
	тСписокДоставок = СфоримроватьСписокДоставокНаДату(Объект.ДатаДоставки, Объект.Подразделение, тТранспорт);
	
	Если тСписокДоставок.Количество() > 0 Тогда
	    ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаРезультатаВопросРасформированияДоставок", ЭтаФорма, 
			Новый Структура("СписокДоставок", тСписокДоставок)), 
			НСтр("ru='Данные документов доставок будут перенесены в буфер формирования доставок. 
			|Продолжить?'"), 
				РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Иначе
		ПоказатьОповещениеПользователя(НСтр("ru='Для выбранного транспорта на указанную дату не сформированны доставки!'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СфоримроватьСписокДоставокНаДату(тДатаДоставки, тПодразделение, тТранспорт)
	
	СписокДоставок = Новый СписокЗначений;
	
	ЗапросД = Новый Запрос;
	ЗапросД.Текст = 
	"ВЫБРАТЬ
	|	пкДоставка.Ссылка
	|ИЗ
	|	Документ.пкДоставка КАК пкДоставка
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(пкДоставка.НачалоРейсаПлан, ДЕНЬ) = &ДатаДоставки
	|	И пкДоставка.Подразделение = &Подразделение
	|	И НЕ пкДоставка.ПометкаУдаления
	|	И пкДоставка.ТранспортноеСредство = &ТранспортноеСредство";
	
	ЗапросД.УстановитьПараметр("ДатаДоставки", НачалоДня(тДатаДоставки));
	ЗапросД.УстановитьПараметр("Подразделение", тПодразделение);
	ЗапросД.УстановитьПараметр("ТранспортноеСредство", тТранспорт);
	РезЗапроса = ЗапросД.Выполнить().Выгрузить();
	
	Для Каждого текСтрока Из РезЗапроса Цикл
		Если СписокДоставок.НайтиПоЗначению(текСтрока.Ссылка) = Неопределено Тогда
			СписокДоставок.Добавить(текСтрока.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокДоставок;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаРезультатаВопросРасформированияДоставок(Результат, ПараметрыОповещения) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		РасформироватьДоставкиВБуферНаСервере(ПараметрыОповещения.СписокДоставок);	
	КонецЕсли;
	
	ОбновитьДанныеТекущихЗаданийНаПеревозку("");
	
КонецПроцедуры    

&НаСервереБезКонтекста
Процедура РасформироватьДоставкиВБуферНаСервере(тСписокДоставок)
	
	НачатьТранзакцию();
	Отказ = Ложь;
	
	Для Каждого текСтрока Из тСписокДоставок Цикл
		Если Не ЗначениеЗаполнено(текСтрока.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		тОбъект = текСтрока.Значение.ПолучитьОбъект();
		
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
		
		Для Каждого текЗадание Из тОбъект.ЗаданияНаПеревозку Цикл
			РегистрыСведений.пкФормированиеДоставки.ДобавитьЗаданиеНаПеревозкуВДоставку(текЗадание.ЗаданиеНаПеревозку, 
				Новый Структура("ДатаДоставки,
								|Подразделение,
								|Транспорт,
								|Водитель,
								|Перевозчик,
								|НомерХодки,
								|ТочкаМаршрута",
								тОбъект.НачалоРейсаПлан,
								тОбъект.Подразделение,
								тОбъект.ТранспортноеСредство, 
								тОбъект.Водитель, 
								тОбъект.Перевозчик,
								текЗадание.НомерХодки,
								текЗадание.ТочкаМаршрута));
		КонецЦикла;
		
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
		
		тОбъект.ЗаданияНаПеревозку.Очистить();
		
		тОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			тОбъект.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
		Исключение
			тСообщение = новый СообщениеПользователю;
			тСообщение.Текст = ОписаниеОшибки();
			тСообщение.Сообщить();
			Отказ = Истина;
		КонецПопытки;
		
		Если тОбъект.Проведен Тогда
			тОбъект.ОбменДанными.Загрузка = Ложь;
			Попытка
				тОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения, РежимПроведенияДокумента.Неоперативный);
			Исключение
				тСообщение = новый СообщениеПользователю;
				тСообщение.Текст = ОписаниеОшибки();
				тСообщение.Сообщить();
				Отказ = Истина;
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры
	
///////////////////////////////////////////////////////////////////////////////
&НаСервере
Процедура УстановитьСтатус(тСтатус)
	
	Если Не ЗначениеЗаполнено(тСтатус) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого текИндекс Из Элементы.Список.ВыделенныеСтроки Цикл
		
		Если ТипЗнч(текИндекс) <> Тип("ДокументСсылка.пкДоставка") Тогда
			Продолжить;
		КонецЕсли;
			
		тОбъект = текИндекс.ПолучитьОбъект();
		тОбъект.Статус = тСтатус;

		Если тОбъект.ПроверитьЗаполнение() Тогда
			Попытка
				тОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			Исключение
				тСообщение = Новый СообщениеПользователю;
				тСообщение.Текст = НСтр("ru='Не удалось выполнить проведение документа:'") + тОбъект.Ссылка + "(" + ОписаниеОшибки() + ")";
				тСообщение.Сообщить();
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
	
&НаКлиенте
Процедура КомандаУстановитьСтатусОткрыто(Команда)
	
	УстановитьСтатус(ПредопределенноеЗначение("Перечисление.пкСтатусыДоставки.Открыто"));
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтатусЗакрыто(Команда)
	
	УстановитьСтатус(ПредопределенноеЗначение("Перечисление.пкСтатусыДоставки.Закрыто"));
	Элементы.Список.Обновить();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
&НаСервере
Процедура ОтобразитьПанелиНастроекСписка()
	
	Элементы.СписокГруппировка.Видимость = Элементы.СписокПоказыватьНастройкиСписка.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьНастройкиСписка(Команда)
	Элементы.СписокПоказыватьНастройкиСписка.Пометка = Не Элементы.СписокПоказыватьНастройкиСписка.Пометка;
	ОтобразитьПанелиНастроекСписка();
КонецПроцедуры

&НаСервере
Процедура ОтменитьЗаданиеНаСервере(ЗаданиеНаПеревозку, ПричинаОтмены)
    
    ЗаданиеНаПеревозкуОбъект = ЗаданиеНаПеревозку.ПолучитьОбъект();
    ЗаданиеНаПеревозкуОбъект.Статус			= Перечисления.пкСтатусыЗаданийНаПеревозку.Запланировано;
    ЗаданиеНаПеревозкуОбъект.Комментарий	= ?(ЗаданиеНаПеревозкуОбъект.Комментарий <> "", ЗаданиеНаПеревозкуОбъект.Комментарий + Символы.ПС, "") + ПричинаОтмены;
//Рарус Владимир Подрезов 09.10.2017 5501
	ЗаданиеНаПеревозкуОбъект.Техника		= Справочники.ОбъектыЭксплуатации.ПустаяСсылка();
//Рарус Владимир Подрезов Конец
	
    Попытка
        ЗаданиеНаПеревозкуОбъект.Записать(РежимЗаписиДокумента.Проведение);        
    Исключение
    КонецПопытки;
    
    Элементы.ЗаданияНаПеревозку.Обновить();
    
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗаданиеЗавершение(Результат, ДопПараметры) Экспорт
    
    ТекущиеДанные = Элементы.ЗаданияНаПеревозку.ТекущиеДанные;
    
    Если ТекущиеДанные <> Неопределено Тогда
    
        ПричинаОтмены = "";
        
        Если Результат <> Неопределено И Результат <> "" Тогда
            ПричинаОтмены = Результат;  
            ОтменитьЗаданиеНаСервере(ТекущиеДанные.ЗаданиеНаПеревозку, ПричинаОтмены);
        КонецЕсли; 
        
    КонецЕсли;    
        
КонецПроцедуры    

&НаКлиенте
Процедура ОтменитьЗадание(Команда)
    
    ПоказатьВводСтроки(Новый ОписаниеОповещения("ОтменитьЗаданиеЗавершение", ЭтаФорма), , "Укажите причину отмены", , Истина);
    
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
&НаСервереБезКонтекста
Функция ПолучитьТелефонИзКонтактнойИнформации(тОбъект)

	Если ЗначениеЗаполнено(тОбъект) Тогда
	
		Если ТипЗнч(тОбъект) = Тип("СправочникСсылка.Организации") Тогда
			Окончание = "Организации";
		ИначеЕсли ТипЗнч(тОбъект) = Тип("СправочникСсылка.Контрагенты") Тогда
			Окончание = "Контрагента";
		ИначеЕсли ТипЗнч(тОбъект) = Тип("СправочникСсылка.Партнеры") Тогда
			Окончание = "Партнера";
		ИначеЕсли ТипЗнч(тОбъект) = Тип("СправочникСсылка.Склады") Тогда
			Окончание = "Склада";
		ИначеЕсли ТипЗнч(тОбъект) = Тип("СправочникСсылка.Пользователи") Тогда
			Окончание = "Пользователя";
		ИначеЕсли ТипЗнч(тОбъект) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Окончание = "РабочийФизическиеЛица";
		ИначеЕсли ТипЗнч(тОбъект) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			Окончание = "КонтактногоЛица";
		Иначе
			Возврат "";
		КонецЕсли;
		
		ВладелецКонтактнойИнформации = тОбъект;
		
		ВидТелефона = Справочники.ВидыКонтактнойИнформации["Телефон" + Окончание].Ссылка;
		
		ТабЗн           = ВладелецКонтактнойИнформации.КонтактнаяИнформация.Выгрузить();
		НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Телефон, ВидТелефона));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Возврат НайденныеСтроки[0].Представление;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // ПолучитьТелефонИзКонтактнойИнформации()

&НаСервереБезКонтекста
Функция ПолучитьМобильныйТелефонИзКонтактнойИнформации(тОбъект)

	Если ЗначениеЗаполнено(тОбъект) Тогда
	
		Если ТипЗнч(тОбъект) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			Окончание = "КонтактногоЛица";
		Иначе
			Возврат "";
		КонецЕсли;
		
		ВладелецКонтактнойИнформации = тОбъект;
		
		ВидТелефона = Справочники.ВидыКонтактнойИнформации["МобильныйТелефон" + Окончание].Ссылка;
		
		ТабЗн           = ВладелецКонтактнойИнформации.КонтактнаяИнформация.Выгрузить();
		НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Телефон, ВидТелефона));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Возврат НайденныеСтроки[0].Представление;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // ПолучитьТелефонИзКонтактнойИнформации()

&НаКлиенте
Процедура ОтображатьВесаГабориты(Команда)
	
	Элементы.ОтображатьВесаГабориты.Пометка = Не Элементы.ОтображатьВесаГабориты.Пометка;
	УстановитьВидимостьВесоГабаритов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьВесоГабаритов()
	
	ВидимостьВесоГабаритов = Элементы.ОтображатьВесаГабориты.Пометка;
	
	Элементы.ФормированиеДоставкиГруппаВесОбъем.Видимость	= ВидимостьВесоГабаритов;
	Элементы.ФормированиеДоставкиПеревесИнфо.Видимость		= ВидимостьВесоГабаритов;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеДоставкиПередНачаломИзменения(Элемент, Отказ)
	
	Если Элементы.ФормированиеДоставки.ТекущиеДанные = Неопределено
			ИЛИ НЕ(ЗначениеЗаполнено(Элементы.ФормированиеДоставки.ТекущиеДанные.ЗаданиеНаПеревозку) 
					ИЛИ ЗначениеЗаполнено(Элементы.ФормированиеДоставки.ТекущиеДанные.ПредставлениеСтрокиДоставки))
	Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеДоставкиПланируемоеВремяДоставкиПриИзменении(Элемент)
	
	Если Элементы.ФормированиеДоставки.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ВремяДоставкиПо", Элементы.ФормированиеДоставки.ТекущиеДанные.ПланируемоеВремяДоставки);
	ЗаписатьИзмененияСтрокиНаСервере(Элементы.ФормированиеДоставки.ТекущаяСтрока, СтруктураДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеДоставкиПодтвержденоКлиентомПриИзменении(Элемент)
	
	Если Элементы.ФормированиеДоставки.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ПодтвержденоКлиентом", Элементы.ФормированиеДоставки.ТекущиеДанные.ПодтвержденоКлиентом);
	ЗаписатьИзмененияСтрокиНаСервере(Элементы.ФормированиеДоставки.ТекущаяСтрока, СтруктураДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеДоставкиЗаданиеНаПеревозкуКомментарийВодителюПриИзменении(Элемент)
	
	Если Элементы.ФормированиеДоставки.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("КомментарийВодителю", Элементы.ФормированиеДоставки.ТекущиеДанные.КомментарийВодителю);
	ЗаписатьИзмененияСтрокиНаСервере(Элементы.ФормированиеДоставки.ТекущаяСтрока, СтруктураДанных);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзмененияСтрокиНаСервере(идТекущаяСтрока, СтруктураДанных)
	
	ТекущаяСтрока = ФормированиеДоставкиДерево.НайтиПоИдентификатору(идТекущаяСтрока);
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ЗаданиеНаПеревозку) Тогда
		Если ЗаписатьИзмененияВЗаданиеНаСервере(ТекущаяСтрока.ЗаданиеНаПеревозку, СтруктураДанных) Тогда
			ТекущаяСтрока.ПланируемоеВремяДоставки	= ТекущаяСтрока.ЗаданиеНаПеревозку.ВремяДоставкиПо;
			ТекущаяСтрока.ПодтвержденоКлиентом		= ТекущаяСтрока.ЗаданиеНаПеревозку.ПодтвержденоКлиентом;
			ТекущаяСтрока.КомментарийВодителю		= ТекущаяСтрока.ЗаданиеНаПеревозку.КомментарийВодителю;
		КонецЕсли;
	ИначеЕсли ТекущаяСтрока.ПредставлениеСтрокиДоставки <> "" Тогда
		СтрокиЗаданий = ТекущаяСтрока.ПолучитьЭлементы();
		Для Каждого текСтрока Из СтрокиЗаданий Цикл
			Если ЗаписатьИзмененияВЗаданиеНаСервере(текСтрока.ЗаданиеНаПеревозку, СтруктураДанных) Тогда
				текСтрока.ПланируемоеВремяДоставки	= текСтрока.ЗаданиеНаПеревозку.ВремяДоставкиПо;
				текСтрока.ПодтвержденоКлиентом		= текСтрока.ЗаданиеНаПеревозку.ПодтвержденоКлиентом;
				текСтрока.КомментарийВодителю		= текСтрока.ЗаданиеНаПеревозку.КомментарийВодителю;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьИзмененияВЗаданиеНаСервере(тЗадание, СтруктураДанных)
	
	Отказ = Ложь;
	
	тОбъект = тЗадание.ПолучитьОбъект();
	
	Изменили = ложь;
	Для Каждого текЗначение Из СтруктураДанных Цикл
		Если тОбъект[текЗначение.Ключ] <> текЗначение.Значение Тогда
			тОбъект[текЗначение.Ключ] = текЗначение.Значение;
			Изменили = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Изменили Тогда
		тОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			тОбъект.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
		Исключение
			тСообщение = Новый СообщениеПользователю;
			тСообщение.Текст = ОписаниеОшибки();
			тСообщение.Сообщить();
			Отказ = Истина;
		КонецПопытки;
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции

&НаКлиенте
Процедура ФормированиеДоставкиНомерХодкиПриИзменении(Элемент)
	
	Если Элементы.ФормированиеДоставки.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ФормированиеДоставкиДерево.НайтиПоИдентификатору(Элементы.ФормированиеДоставки.ТекущаяСтрока);
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ЗаданиеНаПеревозку) Тогда
		ДобавитьЗаданиеВМаршрут(Элементы.ФормированиеДоставки.ТекущиеДанные.ЗаданиеНаПеревозку, 
			Объект.ДатаДоставки, 
			Объект.Подразделение, 
			ОпределитьЗначениеРеквизитаРодителя(Элементы.ФормированиеДоставки.ТекущиеДанные, "Транспорт"),
			ОпределитьЗначениеРеквизитаРодителя(Элементы.ФормированиеДоставки.ТекущиеДанные, "Водитель"),
			ОпределитьЗначениеРеквизитаРодителя(Элементы.ФормированиеДоставки.ТекущиеДанные, "Перевозчик"),
			Элементы.ФормированиеДоставки.ТекущиеДанные.НомерХодки);
	ИначеЕсли ТекущаяСтрока.ПредставлениеСтрокиДоставки <> "" Тогда
		СтрокиЗаданий = ТекущаяСтрока.ПолучитьЭлементы();
		Для Каждого текСтрока Из СтрокиЗаданий Цикл
			ДобавитьЗаданиеВМаршрут(текСтрока.ЗаданиеНаПеревозку, 
				Объект.ДатаДоставки, 
				Объект.Подразделение, 
				ОпределитьЗначениеРеквизитаРодителя(текСтрока, "Транспорт"),
				ОпределитьЗначениеРеквизитаРодителя(текСтрока, "Водитель"),
				ОпределитьЗначениеРеквизитаРодителя(текСтрока, "Перевозчик"),
				Элементы.ФормированиеДоставки.ТекущиеДанные.НомерХодки);
		КонецЦикла;
	КонецЕсли;
		
	ОбновитьДанныеТекущихЗаданийНаПеревозку(Элементы.ФормированиеДоставки.ТекущиеДанные.НомерХодки);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура КомандаОтчетОбщийПланПеревозок(Команда)
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаДоставки) Тогда
		тСообщение = Новый СообщениеПользователю;
		тСообщение.Текст = НСтр("ru='Не указана дата доставки!'");
		тСообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Подразделение) Тогда
		тСообщение = Новый СообщениеПользователю;
		тСообщение.Текст = НСтр("ru='Не указан Регион!'");
		тСообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Отчет.пкОбщийПланПеревозок.ФормаОбъекта",
		Новый Структура("КлючВарианта, КлючНазначенияИспользования, Параметры, Период, Отбор, СформироватьПриОткрытии, ВидимостьКомандВариантовОтчетов", 
			"ОбщийПланПеревозок",
			, 
			Новый СтандартныйПериод(НачалоДня(ТекущаяДата()), КонецДня(ТекущаяДата())),
			Новый Структура("Период", Новый СтандартныйПериод(НачалоДня(ТекущаяДата()), КонецДня(ТекущаяДата()))),
			Новый Структура("Подразделение", Объект.Подразделение), 
			Истина,
			Истина));
	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПечатьФормированияДоставки(Команда)
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаДоставки) Тогда
		тСообщение = Новый СообщениеПользователю;
		тСообщение.Текст = НСтр("ru='Не указана дата доставки!'");
		тСообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Подразделение) Тогда
		тСообщение = Новый СообщениеПользователю;
		тСообщение.Текст = НСтр("ru='Не указан Регион!'");
		тСообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТабДокумент = Новый ТабличныйДокумент;
	СформироватьПланТранспортировкиНаДень(ТабДокумент);
	ТабДокумент.Показать();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПланТранспортировкиНаДень(ТабДокумент)
	
	МакетПлана	= Обработки.пкУправлениеЛогистикой.ПолучитьМакет("ПланПеревозки");
	
	ОбластьШапка			= МакетПлана.ПолучитьОбласть("Шапка");
	ОбластьТранспорт		= МакетПлана.ПолучитьОбласть("Транспорт");
	ОбластьЗаданиеПриемка	= МакетПлана.ПолучитьОбласть("ЗаданиеПриемка");
	ОбластьЗаданиеВозврат	= МакетПлана.ПолучитьОбласть("ЗаданиеВозврат");
	
	ОбластьШапка.Параметры.ДатаОтгрузки = ВРег(Формат(Объект.ДатаДоставки, "ДФ='dd MMMM dddd'"));
	ОбластьШапка.Параметры.Подразделение = Объект.Подразделение;
	ТабДокумент.Вывести(ОбластьШапка);
	
	тФормированиеДоставкиДерево = ДанныеФормыВЗначение(ФормированиеДоставкиДерево, Тип("ДеревоЗначений"));
	Для Каждого текТранспорт Из тФормированиеДоставкиДерево.Строки Цикл
		СтрокиДоставки = текТранспорт.Строки;
		Если СтрокиДоставки.Количество() > 0 Тогда
			СтрокиДоставки.Сортировать("ПланируемоеВремяДоставки");
			ОбластьТранспорт.Параметры.Транспорт = СокрЛП(текТранспорт.Транспорт) + " " + текТранспорт.Водитель + " " + ПолучитьТелефонИзКонтактнойИнформации(текТранспорт.Водитель);
			ТабДокумент.Вывести(ОбластьТранспорт);
			НомерПП = 0;
			Для Каждого текСтрока Из СтрокиДоставки Цикл
				НомерПП = НомерПП + 1;
				СтрокаТехники = ""; Разделитель = "";
				СтрокиТехники = текСтрока.Строки;
				Для Каждого текТехника Из СтрокиТехники Цикл
					Если ЗначениеЗаполнено(текТехника.ЗаданиеНаПеревозку) И ЗначениеЗаполнено(текТехника.ЗаданиеНаПеревозку.Техника) Тогда
						СтрокаТехники = СтрокаТехники + Разделитель + СокрЛП(текТехника.ЗаданиеНаПеревозку.Техника.Код);
						Разделитель = ", ";
					КонецЕсли;
				КонецЦикла;
				ПредставлениеСтрокиДоставки = текСтрока.ПредставлениеСтрокиДоставки;
				Если СтрокаТехники <> "" Тогда
					ПредставлениеСтрокиДоставки = СтрЗаменить(ПредставлениеСтрокиДоставки, 
						СокрЛП(текСтрока.Модель) + " - " + текСтрока.КоличествоЗаданий + " шт.,",
						СокрЛП(текСтрока.Модель) + " - " + текСтрока.КоличествоЗаданий + " шт.," + " (" + СтрокаТехники + ") ");
				КонецЕсли;
				
				Если текСтрока.ДоставкаВозврат = 1 Тогда
					ОбластьЗаданиеПриемка.Параметры.НомерПП		= НомерПП;
					ОбластьЗаданиеПриемка.Параметры.ТекстСтроки	= ПредставлениеСтрокиДоставки;
					ОбластьЗаданиеПриемка.Параметры.Время		= Формат(текСтрока.ПланируемоеВремяДоставки, "ДФ=ЧЧ:мм");
					ТабДокумент.Вывести(ОбластьЗаданиеПриемка);
				ИначеЕсли текСтрока.ДоставкаВозврат = 2 Тогда 
					ОбластьЗаданиеВозврат.Параметры.НомерПП		= НомерПП;
					ОбластьЗаданиеВозврат.Параметры.ТекстСтроки	= ПредставлениеСтрокиДоставки;
					ОбластьЗаданиеВозврат.Параметры.Время		= Формат(текСтрока.ПланируемоеВремяДоставки, "ДФ=ЧЧ:мм");
					ТабДокумент.Вывести(ОбластьЗаданиеВозврат);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////
&НаСервереБезКонтекста
Функция АктПоЗаданию(тЗаданиеНаПеревозку)
	
	Если Не ЗначениеЗаполнено(тЗаданиеНаПеревозку) Тогда
		Возврат Документы.пкАктПриемкиВозврата.ПустаяСсылка();
	КонецЕсли;
	
	ЗапросАкты = Новый Запрос;
	ЗапросАкты.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка
	|ИЗ
	|	Документ.пкАктПриемкиВозврата.ЗаданияНаПеревозку КАК пкАктПриемкиВозвратаЗаданияНаПеревозку
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкАктПриемкиВозврата КАК пкАктПриемкиВозврата
	|		ПО пкАктПриемкиВозвратаЗаданияНаПеревозку.Ссылка = пкАктПриемкиВозврата.Ссылка
	|ГДЕ
	|	пкАктПриемкиВозвратаЗаданияНаПеревозку.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозку";
	ЗапросАкты.УстановитьПараметр("ЗаданиеНаПеревозку", тЗаданиеНаПеревозку);
	РезЗапроса = ЗапросАкты.Выполнить().Выбрать();
	
	Если РезЗапроса.Следующий() Тогда
		Возврат РезЗапроса.Ссылка;
	Иначе
		Возврат Документы.пкАктПриемкиВозврата.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции
