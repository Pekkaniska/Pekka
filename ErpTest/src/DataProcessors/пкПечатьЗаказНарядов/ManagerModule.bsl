#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Печать

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	СтруктураТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивОбъектов);
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "пкАктРемонтаИТехобслуживания") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"пкАктРемонтаИТехобслуживания",
			НСтр("ru = 'Акт ремонта и техобслуживания'"),
			СформироватьПечатнуюФормупкАктРемонтаИТехобслуживания(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "пкАктТехническогоОбслуживания") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"пкАктТехническогоОбслуживания",
			НСтр("ru = 'Акт технического обслуживания'"),
			СформироватьПечатнуюФормупкАктТехническогоОбслуживания(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "пкБланкПроведенияТехОсвидетельствования") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"пкБланкПроведенияТехОсвидетельствования",
			НСтр("ru = 'Бланк проведения полного/частичного технического освидетельствования'"),
			СформироватьПечатнуюФормупкБланкПроведенияТехОсвидетельствования(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "пкПредварительнаяКалькуляция") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"пкПредварительнаяКалькуляция",
			НСтр("ru = 'Предварительная калькуляция'"),
			СформироватьПечатнуюФормупкПредварительнаяКалькуляция(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "пкКалькуляция") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"пкКалькуляция",
			НСтр("ru = 'Калькуляция'"),
			СформироватьПечатнуюФормупкКалькуляция(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "пкКалькуляцияПлановая") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"пкКалькуляцияПлановая",
			НСтр("ru = 'Калькуляция (плановая)'"),
			СформироватьПечатнуюФормупкКалькуляцияПлановая(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, СтруктураТипов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

#Область Печать_пкАктРемонтаИТехобслуживания

Функция СформироватьПечатнуюФормупкАктРемонтаИТехобслуживания(СтруктураТипов, ОбъектыПечати, ПараметрыПечати, КомплектыПечати = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_АктРемонтаИТехобслуживания";
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ДанныеДляПечати = ПолучитьДанныеДляПечатнойФормыпкАктРемонтаИТехобслуживания(
			СтруктураОбъектов.Значение);
		
		// Сформированный тбаличный документ
		ЗаполнитьТабличныйДокументпкАктРемонтаИТехобслуживания(
			ТабличныйДокумент,
			ДанныеДляПечати,
			ОбъектыПечати,
			КомплектыПечати,
			"пкАктРемонтаИТехобслуживания");
			
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыпкАктРемонтаИТехобслуживания(МассивОбъектов) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	пкЗаказНаряд.Дата,
	|	пкЗаказНаряд.Техника КАК Оборудование,
	|	пкЗаказНаряд.Ответственный КАК Сотрудник,
	|	пкЗаказНаряд.Техника.ЗаводскойНомер КАК ЗаводскойНомер,
	|	пкЗаказНаряд.Техника.Код КАК НоменклатурныйНомер,
	|	пкЗаказНаряд.Моточасы,
	|	пкЗаказНаряд.Ссылка
	|ИЗ
	|	Документ.пкЗаказНаряд КАК пкЗаказНаряд
	|ГДЕ
	|	пкЗаказНаряд.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	пкЗаказНарядМатериалы.Номенклатура,
	|	пкЗаказНарядМатериалы.Количество,
	|	пкЗаказНарядМатериалы.Ссылка
	|ИЗ
	|	Документ.пкЗаказНаряд.Материалы КАК пкЗаказНарядМатериалы
	|ГДЕ
	|	пкЗаказНарядМатериалы.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	пкЗаказНарядРаботы.Номенклатура КАК ВидРабот,
	|	пкЗаказНарядРаботы.Сотрудник КАК Исполнитель,
	|	пкЗаказНарядРаботы.Количество КАК ВремяРемонта,
	|	пкЗаказНарядРаботы.ДатаНачала,
	|	пкЗаказНарядРаботы.ДатаОкончания,
	|	пкЗаказНарядРаботы.Ссылка
	|ИЗ
	|	Документ.пкЗаказНаряд.Работы КАК пкЗаказНарядРаботы
	|ГДЕ
	|	пкЗаказНарядРаботы.Ссылка В(&МассивОбъектов)";
		
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке", ПакетРезультатовЗапроса[0]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоМатериалам", ПакетРезультатовЗапроса[1]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоРаботам", ПакетРезультатовЗапроса[2]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументпкАктРемонтаИТехобслуживания(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, КомплектыПечати, ИмяМакета)
	
	ДанныеПечати	= ДанныеДляПечати.РезультатПоШапке.Выбрать();
	СтрокиМатериалы	= ДанныеДляПечати.РезультатПоМатериалам.Выгрузить();
	СтрокиРаботы	= ДанныеДляПечати.РезультатПоРаботам.Выгрузить();
	
	ПервыйДокумент	= Истина;
	
	Пока ДанныеПечати.Следующий() Цикл

		Макет = ПолучитьМакет(ИмяМакета);
		
		// Для печати комплектов
		Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено Тогда
			
			КомплектПечатиПоСсылке = КомплектыПечати.Найти(ДанныеПечати.Ссылка, "Ссылка");
			
			Если КомплектПечатиПоСсылке = Неопределено Тогда
				КомплектПечатиПоСсылке = КомплектыПечати[0];
			КонецЕсли;
			
			Если КомплектПечатиПоСсылке.Экземпляров = 0 Тогда
				Продолжить
			КонецЕсли;
			
		КонецЕсли;
			
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		ОбластьЗаголовок			= Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрокаНоменклатура	= Макет.ПолучитьОбласть("СтрокаНоменклатура");
		ОбластьПодписи				= Макет.ПолучитьОбласть("ПодписиКладовщикМеханик");
		ОбластьЗаголовокРемонт		= Макет.ПолучитьОбласть("ЗаголовокРемРаботы");
		ОбластьСтрокаРабота			= Макет.ПолучитьОбласть("СтрокаРемРаботы");
		ОбластьПодвал				= Макет.ПолучитьОбласть("Подвал");
		
		ЗаполнитьЗначенияСвойств(ОбластьЗаголовок.Параметры, ДанныеПечати);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);

		НомерН = 1;
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ТаблицаСтрок = СтрокиМатериалы.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаТовары Из ТаблицаСтрок Цикл
			ЗаполнитьЗначенияСвойств(ОбластьСтрокаНоменклатура.Параметры, СтрокаТовары);
			ОбластьСтрокаНоменклатура.Параметры.Номер = НомерН;
			НомерН = НомерН + 1;
			ТабличныйДокумент.Вывести(ОбластьСтрокаНоменклатура);
		КонецЦикла;	
		
		ТабличныйДокумент.Вывести(ОбластьПодписи);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовокРемонт);
		
		НомерН = 1;
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ТаблицаСтрок = СтрокиРаботы.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаТовары Из ТаблицаСтрок Цикл
			ЗаполнитьЗначенияСвойств(ОбластьСтрокаРабота.Параметры, СтрокаТовары);
			ОбластьСтрокаРабота.Параметры.Номер = НомерН;
			НомерН = НомерН + 1;
			//ОбластьСтрокаРабота.Параметры.ВремяРемонта = Строка(СтрокаТовары.ДатаНачала) + " - " + Строка(СтрокаТовары.ДатаОкончания);
			ТабличныйДокумент.Вывести(ОбластьСтрокаРабота);
		КонецЦикла;	
		
		ТабличныйДокумент.Вывести(ОбластьПодвал);
	
		// Выведем нужное количество экземпляров (при печати комплектов)
		Если КомплектыПечати <> Неопределено
			И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено
			И КомплектПечатиПоСсылке.Экземпляров > 1 Тогда
			
			ОбластьКопирования = ТабличныйДокумент.ПолучитьОбласть(
				НомерСтрокиНачало,
				,
				ТабличныйДокумент.ВысотаТаблицы);
			
			Для Итератор = 2 По КомплектПечатиПоСсылке.Экземпляров Цикл
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьКопирования);
				
			КонецЦикла;
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Печать_пкАктТехническогоОбслуживания

Функция СформироватьПечатнуюФормупкАктТехническогоОбслуживания(СтруктураТипов, ОбъектыПечати, ПараметрыПечати, КомплектыПечати = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_АктТехническогоОбслуживания";
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
			
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ДанныеДляПечати = ПолучитьДанныеДляПечатнойФормыпкАктТехническогоОбслуживания(
			СтруктураОбъектов.Значение);
		
		// Сформированный тбаличный документ
		ЗаполнитьТабличныйДокументпкАктТехническогоОбслуживания(
			ТабличныйДокумент,
			ДанныеДляПечати,
			ОбъектыПечати,
			КомплектыПечати,
			"пкАктТехническогоОбслуживания");
			
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыпкАктТехническогоОбслуживания(МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	пкЗаказНаряд.Ссылка,
	|	пкЗаказНаряд.Дата,
	|	пкЗаказНаряд.Номер,
	|	пкЗаказНаряд.Техника КАК ПодъемникНомер,
	|	пкЗаказНаряд.Ответственный КАК Сотрудник,
	|	пкЗаказНаряд.Техника.ЗаводскойНомер КАК НомерЗаводской,
	|	пкЗаказНаряд.Техника.Код КАК НомерНоменклатурный,
	|	пкЗаказНаряд.Моточасы,
	|	пкЗаказНаряд.Техника.пкМодель.пкГрузоподъемность КАК Грузоподъемность,
	|	пкЗаказНаряд.Техника.пкМодель.пкТипТехники КАК Подъемник
	|ИЗ
	|	Документ.пкЗаказНаряд КАК пкЗаказНаряд
	|ГДЕ
	|	пкЗаказНаряд.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	пкЗаказНаряд.Ссылка,
	|	пкЗаказНаряд.Техника.пкМодель
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	Документ.пкЗаказНаряд КАК пкЗаказНаряд
	|ГДЕ
	|	пкЗаказНаряд.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	пкЗаказНарядАктТехническогоОбслуживания.Ссылка,
	|	пкЗаказНарядАктТехническогоОбслуживания.НомерСтроки,
	|	пкЗаказНарядАктТехническогоОбслуживания.НаименованиеОграничителей,
	|	пкЗаказНарядАктТехническогоОбслуживания.Тип,
	|	пкЗаказНарядАктТехническогоОбслуживания.Заключение,
	|	пкЗаказНарядАктТехническогоОбслуживания.Примечание КАК Примечание
	|ПОМЕСТИТЬ ВТ1
	|ИЗ
	|	ВТ КАК ВТ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.пкЗаказНаряд.АктТехническогоОбслуживания КАК пкЗаказНарядАктТехническогоОбслуживания
	|		ПО ВТ.Ссылка = пкЗаказНарядАктТехническогоОбслуживания.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Ссылка,
	|	пкАктТехническогоОбслуживания.НаименованиеОграничителей,
	|	пкАктТехническогоОбслуживания.Тип,
	|	пкАктТехническогоОбслуживания.Заключение,
	|	пкАктТехническогоОбслуживания.НН КАК НН,
	|	"""" КАК Примечание
	|ИЗ
	|	ВТ КАК ВТ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.пкАктТехническогоОбслуживания КАК пкАктТехническогоОбслуживания
	|		ПО ВТ.ТехникапкМодель = пкАктТехническогоОбслуживания.Модель
	|ГДЕ
	|	НЕ ВТ.Ссылка В
	|				(ВЫБРАТЬ
	|					ВТ1.Ссылка
	|				ИЗ
	|					ВТ1 КАК ВТ1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ1.Ссылка,
	|	ВТ1.НаименованиеОграничителей,
	|	ВТ1.Тип,
	|	ВТ1.Заключение,
	|	ВТ1.НомерСтроки,
	|	ВТ1.Примечание
	|ИЗ
	|	ВТ1 КАК ВТ1
	|
	|УПОРЯДОЧИТЬ ПО
	|	НН";

	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке", ПакетРезультатовЗапроса[0]);
	СтруктураДанныхДляПечати.Вставить("РезультатТЧ", ПакетРезультатовЗапроса[3]);
	//СтруктураДанныхДляПечати.Вставить("РезультатПоРаботам", ПакетРезультатовЗапроса[2]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументпкАктТехническогоОбслуживания(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, КомплектыПечати, ИмяМакета)
	
	ДанныеПечати	= ДанныеДляПечати.РезультатПоШапке.Выбрать();
	СтрокиТЧ		= ДанныеДляПечати.РезультатТЧ.Выгрузить();
	
	ПервыйДокумент	= Истина;
	
	Пока ДанныеПечати.Следующий() Цикл

		Макет = ПолучитьМакет(ИмяМакета);
		
		// Для печати комплектов
		Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено Тогда
			
			КомплектПечатиПоСсылке = КомплектыПечати.Найти(ДанныеПечати.Ссылка, "Ссылка");
			
			Если КомплектПечатиПоСсылке = Неопределено Тогда
				КомплектПечатиПоСсылке = КомплектыПечати[0];
			КонецЕсли;
			
			Если КомплектПечатиПоСсылке.Экземпляров = 0 Тогда
				Продолжить
			КонецЕсли;
			
		КонецЕсли;
			
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		ОбластьЗаголовок	= Макет.ПолучитьОбласть("Шапка");
		ОбластьТЧ			= Макет.ПолучитьОбласть("ТЧ");
		ОбластьПодвал		= Макет.ПолучитьОбласть("Подвал");
		ОбластьТЧ1			= Макет.ПолучитьОбласть("ТЧ1");
		ОбластьПодвал		= Макет.ПолучитьОбласть("Подвал1");
		
		ЗаполнитьЗначенияСвойств(ОбластьЗаголовок.Параметры, ДанныеПечати);
		//ОбластьЗаголовок.Параметры.Дата = ФОРМАТ(ДанныеПечати, "ДЛФ=Д");
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);

		ЗаполнитьЗначенияСвойств(ОбластьТЧ.Параметры, ДанныеПечати);
		ТабличныйДокумент.Вывести(ОбластьТЧ);
		
		ЗаполнитьЗначенияСвойств(ОбластьПодвал.Параметры, ДанныеПечати);
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		НомерН = 1;
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ТаблицаСтрок = СтрокиТЧ.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаТовары Из ТаблицаСтрок Цикл
			
			ЗаполнитьЗначенияСвойств(ОбластьТЧ1.Параметры, СтрокаТовары);
			ОбластьТЧ1.Параметры.НН = НомерН;
			НомерН = НомерН + 1;
			ТабличныйДокумент.Вывести(ОбластьТЧ1);
			
		КонецЦикла;	
		
		ТабличныйДокумент.Вывести(ОбластьПодвал);
	
		// Выведем нужное количество экземпляров (при печати комплектов)
		Если КомплектыПечати <> Неопределено
			И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено
			И КомплектПечатиПоСсылке.Экземпляров > 1 Тогда
			
			ОбластьКопирования = ТабличныйДокумент.ПолучитьОбласть(
				НомерСтрокиНачало,
				,
				ТабличныйДокумент.ВысотаТаблицы);
			
			Для Итератор = 2 По КомплектПечатиПоСсылке.Экземпляров Цикл
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьКопирования);
				
			КонецЦикла;
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Печать_пкБланкПроведенияТехОсвидетельствования

Функция СформироватьПечатнуюФормупкБланкПроведенияТехОсвидетельствования(СтруктураТипов, ОбъектыПечати, ПараметрыПечати, КомплектыПечати = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_БланкПроведенияТехОсвидетельствования";
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
			
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ДанныеДляПечати = ПолучитьДанныеДляПечатнойФормыпкБланкПроведенияТехОсвидетельствования(
			СтруктураОбъектов.Значение);
		
		// Сформированный тбаличный документ
		ЗаполнитьТабличныйДокументпкБланкПроведенияТехОсвидетельствования(
			ТабличныйДокумент,
			ДанныеДляПечати,
			ОбъектыПечати,
			КомплектыПечати,
			"пкБланкПроведенияТехОсвидетельствования");
			
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыпкБланкПроведенияТехОсвидетельствования(МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	пкЗаказНаряд.Ссылка,
	|	пкЗаказНаряд.Дата,
	|	пкЗаказНаряд.Номер,
	|	пкЗаказНаряд.Ответственный КАК Исполнитель,
	|	пкЗаказНаряд.ОбъектСтроительства КАК НаименованиеОбъекта,
	|	пкЗаказНаряд.Техника КАК Оборудование,
	|	пкЗаказНаряд.Техника.ЗаводскойНомер КАК ЗаводскойНомер,
	|	пкЗаказНаряд.Техника.Код КАК НоменклатурныйНомер,
	|	пкЗаказНаряд.Моточасы
	|ИЗ
	|	Документ.пкЗаказНаряд КАК пкЗаказНаряд
	|ГДЕ
	|	пкЗаказНаряд.Ссылка В(&МассивОбъектов)";

	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке", ПакетРезультатовЗапроса[0]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументпкБланкПроведенияТехОсвидетельствования(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, КомплектыПечати, ИмяМакета)
	
	ДанныеПечати	= ДанныеДляПечати.РезультатПоШапке.Выбрать();
	
	ПервыйДокумент	= Истина;
	
	Пока ДанныеПечати.Следующий() Цикл

		Макет = ПолучитьМакет(ИмяМакета);
		
		// Для печати комплектов
		Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено Тогда
			
			КомплектПечатиПоСсылке = КомплектыПечати.Найти(ДанныеПечати.Ссылка, "Ссылка");
			
			Если КомплектПечатиПоСсылке = Неопределено Тогда
				КомплектПечатиПоСсылке = КомплектыПечати[0];
			КонецЕсли;
			
			Если КомплектПечатиПоСсылке.Экземпляров = 0 Тогда
				Продолжить
			КонецЕсли;
			
		КонецЕсли;
			
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		
		ЗаполнитьЗначенияСвойств(ОбластьЗаголовок.Параметры, ДанныеПечати);
		Если ЗначениеЗаполнено(ДанныеПечати.НаименованиеОбъекта) Тогда
			ОбластьЗаголовок.Параметры.Объект = "Х";
		Иначе	
			ОбластьЗаголовок.Параметры.База = "Х";
		КонецЕсли;	
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
		Если КомплектыПечати <> Неопределено
			И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено
			И КомплектПечатиПоСсылке.Экземпляров > 1 Тогда
			
			ОбластьКопирования = ТабличныйДокумент.ПолучитьОбласть(
				НомерСтрокиНачало,
				,
				ТабличныйДокумент.ВысотаТаблицы);
			
			Для Итератор = 2 По КомплектПечатиПоСсылке.Экземпляров Цикл
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьКопирования);
				
			КонецЦикла;
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Печать_пкПредварительнаяКалькуляция

Функция СформироватьПечатнуюФормупкПредварительнаяКалькуляция(СтруктураТипов, ОбъектыПечати, ПараметрыПечати, КомплектыПечати = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_ПредварительнаяКалькуляция";
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
			
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ДанныеДляПечати = ПолучитьДанныеДляПечатнойФормыпкПредварительнаяКалькуляция(
			СтруктураОбъектов.Значение);
		
		// Сформированный тбаличный документ
		ЗаполнитьТабличныйДокументпкПредварительнаяКалькуляция(
			ТабличныйДокумент,
			ДанныеДляПечати,
			ОбъектыПечати,
			КомплектыПечати,
			"пкПредварительнаяКалькуляция");
			
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыпкПредварительнаяКалькуляция(МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	пкЗаказНаряд.Ссылка КАК Ссылка,
	|	пкЗаказНаряд.Дата КАК Дата,
	|	пкЗаказНаряд.Номер КАК Номер,
	|	пкЗаказНаряд.Ответственный КАК Исполнитель,
	|	пкЗаказНаряд.ОбъектСтроительства КАК НаименованиеОбъекта,
	|	пкЗаказНаряд.Техника КАК Оборудование,
	|	пкЗаказНаряд.ЗаводскойНомерТехники КАК ЗаводскойНомер,
	|	пкЗаказНаряд.Техника.Код КАК НоменклатурныйНомер,
	|	пкЗаказНаряд.Моточасы КАК Моточасы,
	|	пкЗаказНаряд.Подразделение КАК Подразделение,
	|	пкЗаказНаряд.Техника КАК Техника,
	|	пкЗаказНаряд.Организация КАК Поставщик,
	|	пкЗаказНаряд.Клиент КАК Покупатель,
	|	пкЗаказНаряд.Механик КАК Механик,
	|	пкЗаказНаряд.ОбъектСтроительства КАК МестоРемонта,
	|	ВЫБОР
	|		КОГДА пкЗаказНаряд.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьНДС,
	|	пкЗаказНаряд.ЦенаВключаетНДС КАК СуммаВключаетНДС,
	|	ИСТИНА КАК ВыводитьКоды,
	|	ЛОЖЬ КАК ЕстьСкидки,
	|	пкЗаказНаряд.Валюта КАК ВалютаДокумента,
	|	пкЗаказНаряд.Организация,
	|	пкЗаказНаряд.Клиент,
	|	пкЗаказНаряд.ТехникаКлиента,
	|	пкЗаказНаряд.Комментарий
	|ИЗ
	|	Документ.пкЗаказНаряд КАК пкЗаказНаряд
	|ГДЕ
	|	пкЗаказНаряд.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	пкЗаказНарядМатериалы.Ссылка КАК Ссылка,
	|	1 КАК Порядок,
	|	пкЗаказНарядМатериалы.Номенклатура КАК Номенклатура,
	|	пкЗаказНарядМатериалы.НомерСтроки КАК НомерСтроки,
	|	пкЗаказНарядМатериалы.Номенклатура.Артикул КАК Артикул,
	|	ПОДСТРОКА(пкЗаказНарядМатериалы.Номенклатура.НаименованиеПолное, 1, 1000) КАК Товар,
	|	пкЗаказНарядМатериалы.Количество КАК Количество,
	|	пкЗаказНарядМатериалы.Упаковка КАК ЕдиницаИзмерения,
	|	пкЗаказНарядМатериалы.Цена КАК Цена,
	|	пкЗаказНарядМатериалы.Сумма КАК СуммаБезСкидки,
	|	пкЗаказНарядМатериалы.Сумма КАК Сумма,
	|	пкЗаказНарядМатериалы.СуммаНДС КАК СуммаНДС,
	|	0 КАК Скидка
	|ИЗ
	|	Документ.пкЗаказНаряд.Материалы КАК пкЗаказНарядМатериалы
	|ГДЕ
	|	пкЗаказНарядМатериалы.Ссылка В(&МассивОбъектов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	пкЗаказНарядРаботы.Ссылка,
	|	2,
	|	пкЗаказНарядРаботы.Номенклатура,
	|	пкЗаказНарядРаботы.НомерСтроки,
	|	пкЗаказНарядРаботы.Номенклатура.Артикул,
	|	ПОДСТРОКА(пкЗаказНарядРаботы.Номенклатура.НаименованиеПолное, 1, 1000),
	|	пкЗаказНарядРаботы.КоличествоРеализация,
	|	пкЗаказНарядРаботы.Номенклатура.ЕдиницаИзмерения,
	|	пкЗаказНарядРаботы.Цена,
	|	пкЗаказНарядРаботы.Сумма,
	|	пкЗаказНарядРаботы.Сумма,
	|	пкЗаказНарядРаботы.СуммаНДС,
	|	0
	|ИЗ
	|	Документ.пкЗаказНаряд.Работы КАК пкЗаказНарядРаботы
	|ГДЕ
	|	пкЗаказНарядРаботы.Ссылка В(&МассивОбъектов)
	|	И пкЗаказНарядРаботы.КоличествоРеализация <> 0";

	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке", ПакетРезультатовЗапроса[0]);
	СтруктураДанныхДляПечати.Вставить("ТабличнаяЧасть", ПакетРезультатовЗапроса[1]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументпкПредварительнаяКалькуляция(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, КомплектыПечати, ИмяМакета)
	
	ДанныеПечати	= ДанныеДляПечати.РезультатПоШапке.Выбрать();
	СтрокиТаблицы	= ДанныеДляПечати.ТабличнаяЧасть.Выгрузить();
	
	ПервыйДокумент	= Истина;
	
	Пока ДанныеПечати.Следующий() Цикл

		Макет = ПолучитьМакет(ИмяМакета);
		
		// Для печати комплектов
		Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено Тогда
			
			КомплектПечатиПоСсылке = КомплектыПечати.Найти(ДанныеПечати.Ссылка, "Ссылка");
			
			Если КомплектПечатиПоСсылке = Неопределено Тогда
				КомплектПечатиПоСсылке = КомплектыПечати[0];
			КонецЕсли;
			
			Если КомплектПечатиПоСсылке.Экземпляров = 0 Тогда
				Продолжить
			КонецЕсли;
			
		КонецЕсли;
			
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		
		ШтрихкодированиеПечатныхФорм.кнВывестиШтрихкодEANВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьШапка, ДанныеПечати.Ссылка, "Заказ-наряд");
		
		ОбластьШапка.Параметры.Дата					= Формат(ДанныеПечати.Дата, "ДФ=""дд ММММ гггг 'г.'""");
		ОбластьШапка.Параметры.Оборудование			= ДанныеПечати.Техника;
		ОбластьШапка.Параметры.Моточасы				= ДанныеПечати.Моточасы;
		ОбластьШапка.Параметры.НоменклатурныйНомер	= ?(ЗначениеЗаполнено(ДанныеПечати.Техника), ДанныеПечати.Техника.Код, "");
		ОбластьШапка.Параметры.ЗаводскойНомер		= ?(ЗначениеЗаполнено(ДанныеПечати.Техника), ДанныеПечати.Техника.ЗаводскойНомер, ДанныеПечати.ЗаводскойНомер);
		
		//Если ЗначениеЗаполнено(ДанныеПечати.Техника) Тогда
		//	Запрос = Новый Запрос;
		//	Запрос.УстановитьПараметр("Подъемник", ДанныеПечати.Техника);
		//	Запрос.Текст = 
		//	"ВЫБРАТЬ
		//	|	усСтрокиОтгрузки.Номенклатура,
		//	|	усСтрокиОтгрузки.Владелец.ЗаказНаОтгрузку.ЗаказНаряд КАК ЗаказНаряд,
		//	|	усСтрокиОтгрузки.Качество КАК Качество,
		//	|	усСтрокиОтгрузки.Количество
		//	|ПОМЕСТИТЬ ТаблицаЗапчасти
		//	|ИЗ
		//	|	РегистрСведений.усСтрокиОтгрузки КАК усСтрокиОтгрузки
		//	|ГДЕ
		//	|	ЕСТЬNULL(усСтрокиОтгрузки.Владелец.ЗаказНаОтгрузку.ЗаказНаряд, ЗНАЧЕНИЕ(Документ.АА_ЗаказНаряд.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.АА_ЗаказНаряд.ПустаяСсылка)
		//	|	И ЕСТЬNULL(усСтрокиОтгрузки.СтатусВыполнено, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
		//	|
		//	|ОБЪЕДИНИТЬ ВСЕ
		//	|
		//	|ВЫБРАТЬ
		//	|	усСтрокиПриемки.Номенклатура,
		//	|	усСтрокиПриемки.Владелец.ЗаказНаряд,
		//	|	усСтрокиПриемки.Качество,
		//	|	-усСтрокиПриемки.Количество
		//	|ИЗ
		//	|	РегистрСведений.усСтрокиПриемки КАК усСтрокиПриемки
		//	|ГДЕ
		//	|	ЕСТЬNULL(усСтрокиПриемки.Владелец.ЗаказНаряд, ЗНАЧЕНИЕ(Документ.АА_ЗаказНаряд.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.АА_ЗаказНаряд.ПустаяСсылка)
		//	|	И ЕСТЬNULL(усСтрокиПриемки.СтатусВыполнено, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
		//	|;
		//	|
		//	|////////////////////////////////////////////////////////////////////////////////
		//	|ВЫБРАТЬ
		//	|	АА_ЗаказНаряд.Ссылка КАК ЗаказНаряд,
		//	|	ТаблицаЗапчасти.Номенклатура.Наименование КАК Номенклатура,
		//	|	ТаблицаЗапчасти.Количество КАК Количество,
		//	|	ТаблицаЗапчасти.Качество КАК Качество,
		//	|	ТаблицаЗапчасти.Количество * ЕСТЬNULL(табЦеныНоменклатуры.Цена, 0) * ВЫБОР
		//	|		КОГДА ТаблицаЗапчасти.Качество <> ЗНАЧЕНИЕ(Справочник.усКачество.Кондиция)
		//	|			ТОГДА 0.3
		//	|		ИНАЧЕ 1
		//	|	КОНЕЦ КАК Стоимость,
		//	|	АА_ЗаказНаряд.Дата КАК Дата
		//	|ИЗ
		//	|	Документ.АА_ЗаказНаряд КАК АА_ЗаказНаряд
		//	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЗапчасти КАК ТаблицаЗапчасти
		//	|		ПО (ТаблицаЗапчасти.ЗаказНаряд = АА_ЗаказНаряд.Ссылка)
		//	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		//	|			АА_ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		//	|			АА_ЦеныНоменклатурыСрезПоследних.Цена * ЕСТЬNULL(КурсыВалют.Курс, 1) КАК Цена
		//	|		ИЗ
		//	|			РегистрСведений.АА_ЦеныНоменклатуры.СрезПоследних(, ТипЦены = ЗНАЧЕНИЕ(Справочник.Аа_ТипыЦен.ЦенаПоставщика)) КАК АА_ЦеныНоменклатурыСрезПоследних
		//	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалют
		//	|				ПО (КурсыВалют.Валюта = АА_ЦеныНоменклатурыСрезПоследних.Валюта)) КАК табЦеныНоменклатуры
		//	|		ПО (ТаблицаЗапчасти.Номенклатура = табЦеныНоменклатуры.Номенклатура)
		//	|ГДЕ
		//	|	АА_ЗаказНаряд.Подъемник = &Подъемник
		//	|
		//	|ОБЪЕДИНИТЬ ВСЕ
		//	|
		//	|ВЫБРАТЬ
		//	|	АА_ЗаказНарядРаботы.Ссылка,
		//	|	АА_ЗаказНарядРаботы.ВидРабот.Наименование,
		//	|	АА_ЗаказНарядРаботы.Количество,
		//	|	NULL,
		//	|	АА_ЗаказНарядРаботы.Количество * &СтоимостьЧаса,
		//	|	АА_ЗаказНарядРаботы.Ссылка.Дата
		//	|ИЗ
		//	|	Документ.АА_ЗаказНаряд.Работы КАК АА_ЗаказНарядРаботы
		//	|ГДЕ
		//	|	АА_ЗаказНарядРаботы.Ссылка.Подъемник = &Подъемник
		//	|
		//	|УПОРЯДОЧИТЬ ПО
		//	|	Дата
		//	|ИТОГИ
		//	|	СУММА(Стоимость),
		//	|	МИНИМУМ(Дата)
		//	|ПО
		//	|	ОБЩИЕ";
		//	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		//	Если Выборка.Следующий() Тогда
		//		
		//		ОбластьШапка.Параметры.ДатаПервогоЗН	= Выборка.Дата;
		//		ОбластьШапка.Параметры.Сумма			= Выборка.Стоимость;
		//		
		//		масЗН = Новый Массив;
		//		ВыборкаДетали = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		//		Пока ВыборкаДетали.Следующий() Цикл
		//			Если масЗН.Найти(ВыборкаДетали.ЗаказНаряд) = Неопределено Тогда
		//				масЗН.Добавить(ВыборкаДетали.ЗаказНаряд);
		//				ОбластьШапка.Параметры.НомерЗН	= "" + СокрЛП(ОбластьШапка.Параметры.НомерЗН)+?(ЗначениеЗаполнено(ОбластьШапка.Параметры.НомерЗН),";","")
		//					+СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(СокрЛП(ВыборкаДетали.ЗаказНаряд.Номер), "0");
		//			КонецЕсли;
		//		КонецЦикла;
		//	КонецЦикла;	
		//КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
	
		тНомер  	= 0;
		ИтогСумма	= 0;
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ТаблицаСтрок = СтрокиТаблицы.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаТовары Из ТаблицаСтрок Цикл

			Если НЕ ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;

			тНомер = тНомер + 1;
			
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			ОбластьСтрока.Параметры.Номер			= тНомер;
			ОбластьСтрока.Параметры.Номенклатура	= ?(Найти(СтрокаТовары.Номенклатура.Наименование, СтрокаТовары.Номенклатура.Артикул) = 0, СтрокаТовары.Номенклатура.Артикул + ", ", "") + СтрокаТовары.Номенклатура;
			ОбластьСтрока.Параметры.Количество		= СтрокаТовары.Количество;
			ОбластьСтрока.Параметры.Сумма			= СтрокаТовары.Сумма;
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			
			ИтогСумма = ИтогСумма + СтрокаТовары.Сумма;
			
		КонецЦикла;	
		
		Подвал = Макет.ПолучитьОбласть("Подвал");
		Подвал.Параметры.ИтогоСумма	= ИтогСумма;
		//лкИ=1;
		//Пока Выборка.Следующий() Цикл
		//	Картинка = Выборка.Хранилище.Получить();
		//	Подвал.Рисунки["Фото"+лкИ].Картинка = Картинка; 
		//	лкИ=лкИ+1;
		//КонецЦикла;
		//////////////////////////////////////////////
		//Нужно искать в ДО прикрепленные файлы!!!
		//////////////////////////////////////////////
		Подвал.Параметры.Замечания	= ДанныеПечати.Комментарий;
		Подвал.Параметры.Сотрудник	= ДанныеПечати.Механик;
		ТабличныйДокумент.Вывести(Подвал);
		
		Если КомплектыПечати <> Неопределено
			И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено
			И КомплектПечатиПоСсылке.Экземпляров > 1 Тогда
			
			ОбластьКопирования = ТабличныйДокумент.ПолучитьОбласть(
				НомерСтрокиНачало,
				,
				ТабличныйДокумент.ВысотаТаблицы);
			
			Для Итератор = 2 По КомплектПечатиПоСсылке.Экземпляров Цикл
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьКопирования);
				
			КонецЦикла;
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Печать_пкКалькуляцияПлановая

Функция СформироватьПечатнуюФормупкКалькуляцияПлановая(СтруктураТипов, ОбъектыПечати, ПараметрыПечати, КомплектыПечати = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_КалькуляцияПлановая";
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
			
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ДанныеДляПечати = ПолучитьДанныеДляПечатнойФормыпкКалькуляцияПлановая(
			СтруктураОбъектов.Значение);
		
		// Сформированный тбаличный документ
		ЗаполнитьТабличныйДокументпкКалькуляцияПлановая(
			ТабличныйДокумент,
			ДанныеДляПечати,
			ОбъектыПечати,
			КомплектыПечати,
			"пкКалькуляцияПлановая");
			
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыпкКалькуляцияПлановая(МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	пкЗаказНаряд.Ссылка КАК Ссылка,
	|	пкЗаказНаряд.Дата КАК Дата,
	|	пкЗаказНаряд.Номер КАК Номер,
	|	пкЗаказНаряд.Ответственный КАК Исполнитель,
	|	пкЗаказНаряд.ОбъектСтроительства КАК НаименованиеОбъекта,
	|	пкЗаказНаряд.Техника КАК Оборудование,
	|	пкЗаказНаряд.ЗаводскойНомерТехники КАК ЗаводскойНомер,
	|	пкЗаказНаряд.Техника.Код КАК НоменклатурныйНомер,
	|	пкЗаказНаряд.Моточасы КАК Моточасы,
	|	пкЗаказНаряд.Подразделение КАК Подразделение,
	|	пкЗаказНаряд.Техника КАК Техника,
	|	пкЗаказНаряд.Организация КАК Поставщик,
	|	пкЗаказНаряд.Клиент КАК Покупатель,
	|	пкЗаказНаряд.Механик КАК Механик,
	|	пкЗаказНаряд.ОбъектСтроительства КАК МестоРемонта,
	|	ИСТИНА КАК УчитыватьНДС,
	|	пкЗаказНаряд.ЦенаВключаетНДС КАК СуммаВключаетНДС,
	|	ИСТИНА КАК ВыводитьКоды,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВложенныйЗапрос.СуммаРучнойСкидки, 0) > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьСкидки,
	|	пкЗаказНаряд.Валюта КАК ВалютаДокумента,
	|	пкЗаказНаряд.Организация,
	|	пкЗаказНаряд.Клиент,
	|	пкЗаказНаряд.ТехникаКлиента
	|ИЗ
	|	Документ.пкЗаказНаряд КАК пкЗаказНаряд
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВложенныйЗапрос.Ссылка КАК Ссылка,
	|			СУММА(ВложенныйЗапрос.СуммаРучнойСкидки) КАК СуммаРучнойСкидки
	|		ИЗ
	|			(ВЫБРАТЬ
	|				пкЗаказНарядПлановыеМатериалы.Ссылка КАК Ссылка,
	|				пкЗаказНарядПлановыеМатериалы.СуммаРучнойСкидки КАК СуммаРучнойСкидки
	|			ИЗ
	|				Документ.пкЗаказНаряд.ПлановыеМатериалы КАК пкЗаказНарядПлановыеМатериалы
	|			ГДЕ
	|				пкЗаказНарядПлановыеМатериалы.Ссылка В(&МассивОбъектов)
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				пкЗаказНарядПлановыеРаботы.Ссылка,
	|				пкЗаказНарядПлановыеРаботы.СуммаРучнойСкидки
	|			ИЗ
	|				Документ.пкЗаказНаряд.ПлановыеРаботы КАК пкЗаказНарядПлановыеРаботы
	|			ГДЕ
	|				пкЗаказНарядПлановыеРаботы.Ссылка В(&МассивОбъектов)) КАК ВложенныйЗапрос
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВложенныйЗапрос.Ссылка) КАК ВложенныйЗапрос
	|		ПО пкЗаказНаряд.Ссылка = ВложенныйЗапрос.Ссылка
	|ГДЕ
	|	пкЗаказНаряд.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	пкЗаказНарядПлановыеМатериалы.Ссылка КАК Ссылка,
	|	1 КАК Порядок,
	|	пкЗаказНарядПлановыеМатериалы.Номенклатура КАК Номенклатура,
	|	пкЗаказНарядПлановыеМатериалы.НомерСтроки КАК НомерСтроки,
	|	пкЗаказНарядПлановыеМатериалы.Номенклатура.Артикул КАК Артикул,
	|	ПОДСТРОКА(пкЗаказНарядПлановыеМатериалы.Номенклатура.НаименованиеПолное, 1, 1000) КАК Товар,
	|	пкЗаказНарядПлановыеМатериалы.Количество КАК Количество,
	|	пкЗаказНарядПлановыеМатериалы.Упаковка КАК ЕдиницаИзмерения,
	|	пкЗаказНарядПлановыеМатериалы.Цена КАК Цена,
	|	пкЗаказНарядПлановыеМатериалы.Сумма КАК СуммаБезСкидки,
	|	пкЗаказНарядПлановыеМатериалы.Сумма КАК Сумма,
	|	пкЗаказНарядПлановыеМатериалы.СуммаНДС КАК СуммаНДС,
	|	пкЗаказНарядПлановыеМатериалы.СуммаРучнойСкидки КАК Скидка
	|ИЗ
	|	Документ.пкЗаказНаряд.ПлановыеМатериалы КАК пкЗаказНарядПлановыеМатериалы
	|ГДЕ
	|	пкЗаказНарядПлановыеМатериалы.Ссылка В(&МассивОбъектов)
	|	И пкЗаказНарядПлановыеМатериалы.Цена <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	пкЗаказНарядПлановыеРаботы.Ссылка,
	|	2,
	|	пкЗаказНарядПлановыеРаботы.Номенклатура,
	|	пкЗаказНарядПлановыеРаботы.НомерСтроки,
	|	пкЗаказНарядПлановыеРаботы.Номенклатура.Артикул,
	|	ПОДСТРОКА(пкЗаказНарядПлановыеРаботы.Номенклатура.НаименованиеПолное, 1, 1000),
	|	пкЗаказНарядПлановыеРаботы.Количество,
	|	пкЗаказНарядПлановыеРаботы.ЕдиницаИзмерения,
	|	пкЗаказНарядПлановыеРаботы.Цена,
	|	пкЗаказНарядПлановыеРаботы.Сумма,
	|	пкЗаказНарядПлановыеРаботы.Сумма,
	|	пкЗаказНарядПлановыеРаботы.СуммаНДС,
	|	пкЗаказНарядПлановыеРаботы.СуммаРучнойСкидки
	|ИЗ
	|	Документ.пкЗаказНаряд.ПлановыеРаботы КАК пкЗаказНарядПлановыеРаботы
	|ГДЕ
	|	пкЗаказНарядПлановыеРаботы.Ссылка В(&МассивОбъектов)
	|	И пкЗаказНарядПлановыеРаботы.Количество <> 0
	|	И пкЗаказНарядПлановыеРаботы.Цена <> 0";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке", ПакетРезультатовЗапроса[0]);
	СтруктураДанныхДляПечати.Вставить("ТабличнаяЧасть", ПакетРезультатовЗапроса[1]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументпкКалькуляцияПлановая(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, КомплектыПечати, ИмяМакета)
	
	ДанныеПечати	= ДанныеДляПечати.РезультатПоШапке.Выбрать();
	СтрокиТаблицы	= ДанныеДляПечати.ТабличнаяЧасть.Выгрузить();
	
	ПервыйДокумент	= Истина;
	
	Пока ДанныеПечати.Следующий() Цикл

		Макет = ПолучитьМакет(ИмяМакета);
		
		// Для печати комплектов
		Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено Тогда
			
			КомплектПечатиПоСсылке = КомплектыПечати.Найти(ДанныеПечати.Ссылка, "Ссылка");
			
			Если КомплектПечатиПоСсылке = Неопределено Тогда
				КомплектПечатиПоСсылке = КомплектыПечати[0];
			КонецЕсли;
			
			Если КомплектПечатиПоСсылке.Экземпляров = 0 Тогда
				Продолжить
			КонецЕсли;
			
		КонецЕсли;
			
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		// Выводим шапку накладной

		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ДатаДок = Формат(ДанныеПечати.Дата, "ДЛФ=DD");
	    //ОбластьМакета.Параметры.ТехническийДиректор = Строка(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнойТехническийДиректор"));
		Если ДанныеПечати.Подразделение.Наименование = "Нижний Новгород" Тогда
			ОбластьМакета.Параметры.ТекстОтветственныйДолжность = "Старший механик";
			ОбластьМакета.Параметры.ТекстОП = "ОП Нижний Новгород";
		Иначе
			ОбластьМакета.Параметры.ТекстОтветственныйДолжность = "Руководитель сервисной службы";
			ОбластьМакета.Параметры.ТекстОП = "";
		КонецЕсли;	
		//ОбластьМакета.Параметры.НомерДок = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеПечати.Ссылка.Номер);
		ОбластьМакета.Параметры.НомерДок = ДанныеПечати.Ссылка.Номер;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.ТекстПоставщик			= "Исполнитель:";
		ОбластьМакета.Параметры.ПредставлениеПоставщика	= ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.ТекстПокупатель			= "Заказчик:";
		ОбластьМакета.Параметры.ПредставлениеПолучателя	= ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ОсновнойКонтрагентПартнера(ДанныеПечати.Клиент), ДанныеПечати.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Техника");
		Если ДанныеПечати.ТехникаКлиента Тогда
			ОбластьМакета.Параметры.ПредставлениеТехники = СокрЛП(Строка(ДанныеПечати.ЗаводскойНомер)) + 
															", собственник " + Строка(ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ОсновнойКонтрагентПартнера(ДанныеПечати.Клиент), ДанныеПечати.Дата), "ПолноеНаименование"));
		Иначе
			ОбластьМакета.Параметры.ПредставлениеТехники = СокрЛП(Строка(ДанныеПечати.Техника.пкМодель)) + 
															" номер " + СокрЛП(Строка(ДанныеПечати.Техника.Код)) + 
															", собственник " + Строка(ДанныеПечати.Организация.НаименованиеПолное);
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	    ОбластьМакета = Макет.ПолучитьОбласть("Объект");
		ОбластьМакета.Параметры.ПредставлениеМестаРемонта = ДанныеПечати.МестоРемонта;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

		ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
		Если Не ДанныеПечати.ВыводитьКоды И ДанныеПечати.ЕстьСкидки Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|ТоварБезКодов");
		ИначеЕсли НЕ ДанныеПечати.ЕстьСкидки И ДанныеПечати.ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|ТоварБезСкидок");
		ИначеЕсли НЕ ДанныеПечати.ЕстьСкидки И НЕ ДанныеПечати.ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|ТоварБезКодовИСкидок");
		КонецЕсли;

		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ДанныеПечати.ВыводитьКоды Тогда
			ОбластьКодов.Параметры.ИмяКолонкиКодов = "Артикул";
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ОбластьТовар.Параметры.Товар = "Товары (работы, услуги)";
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		Если ДанныеПечати.ЕстьСкидки Тогда
			ТабличныйДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		
		ОбластьСуммы.Параметры.ТекстСумма = ?(ДанныеПечати.СуммаВключаетНДС, "Сумма", "Сумма без НДС");
		ТабличныйДокумент.Присоединить(ОбластьСуммы);

		// Увеличим ширину колонки Товар на ширину неиспользуемых колонок
		ОбластьКолонкаТовар = Макет.Область("Товар");
		Если Не ДанныеПечати.ВыводитьКоды И ДанныеПечати.ЕстьСкидки Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.5;
		ИначеЕсли НЕ ДанныеПечати.ЕстьСкидки И ДанныеПечати.ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 2.125;
		ИначеЕсли НЕ ДанныеПечати.ЕстьСкидки И НЕ ДанныеПечати.ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 2.625;
		КонецЕсли;

		ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

		ОбластьТовар = Макет.ПолучитьОбласть("Строка|Товар");
		Если Не ДанныеПечати.ВыводитьКоды И ДанныеПечати.ЕстьСкидки Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("Строка|ТоварБезКодов");
		ИначеЕсли НЕ ДанныеПечати.ЕстьСкидки И ДанныеПечати.ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("Строка|ТоварБезСкидок");
		ИначеЕсли НЕ ДанныеПечати.ЕстьСкидки И НЕ ДанныеПечати.ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("Строка|ТоварБезКодовИСкидок");
		КонецЕсли;

		Всего		= 0;
		СуммаНДС	= 0;
		ВсегоСкидок	= 0;
		ВсегоСтрок	= 0;
		тНомер  	= 0;
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ТаблицаСтрок = СтрокиТаблицы.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаТовары Из ТаблицаСтрок Цикл

			Если НЕ ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;

			тНомер = тНомер + 1;
			
			ОбластьНомера.Параметры.Заполнить(СтрокаТовары);
			ОбластьНомера.Параметры.НомерСтроки = тНомер;
			ТабличныйДокумент.Вывести(ОбластьНомера);

			Если ДанныеПечати.ВыводитьКоды Тогда
				ОбластьКодов.Параметры.Заполнить(СтрокаТовары);
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;

			ОбластьТовар.Параметры.Заполнить(СтрокаТовары);
			ТабличныйДокумент.Присоединить(ОбластьТовар);
			ОбластьДанных.Параметры.Заполнить(СтрокаТовары);
			ТабличныйДокумент.Присоединить(ОбластьДанных);

			Если ДанныеПечати.ЕстьСкидки Тогда
				ОбластьСкидок.Параметры.Заполнить(СтрокаТовары);
				ТабличныйДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;

			ОбластьСуммы.Параметры.Заполнить(СтрокаТовары);
			ТабличныйДокумент.Присоединить(ОбластьСуммы);
			
			Всего		= Всего       + СтрокаТовары.Сумма;
			СуммаНДС	= СуммаНДС    + СтрокаТовары.СуммаНДС;
			ВсегоСкидок	= ВсегоСкидок + СтрокаТовары.Скидка;
			ВсегоСтрок	= ВсегоСтрок  + 1;
			
		КонецЦикла;

		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

		ОбластьТовар = Макет.ПолучитьОбласть("Итого|Товар");
		Если Не ДанныеПечати.ВыводитьКоды И ДанныеПечати.ЕстьСкидки Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("Итого|ТоварБезКодов");
		ИначеЕсли НЕ ДанныеПечати.ЕстьСкидки И ДанныеПечати.ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("Итого|ТоварБезСкидок");
		ИначеЕсли НЕ ДанныеПечати.ЕстьСкидки И НЕ ДанныеПечати.ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("Итого|ТоварБезКодовИСкидок");
		КонецЕсли;

		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ДанныеПечати.ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		Если ДанныеПечати.ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		
		//ОбластьСуммы.Параметры.Всего = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
		//ОбластьСуммы.Параметры.Всего = Число(ДанныеПечати.ВсегоНДС) + Число(ДанныеПечати.Всего); 
		ОбластьСкидок.Параметры.ВсегоСкидок		= ВсегоСкидок;
		ОбластьСкидок.Параметры.ВсегоБезСкидок	= Всего + ВсегоСкидок;
		ОбластьСуммы.Параметры.Всего			= Всего;
		ТабличныйДокумент.Присоединить(ОбластьСуммы);

		// Вывести ИтогоНДС
		Если ДанныеПечати.УчитыватьНДС Тогда
			ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
			ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|Товар");
			Если Не ДанныеПечати.ВыводитьКоды И ДанныеПечати.ЕстьСкидки Тогда
				ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезКодов");
			ИначеЕсли НЕ ДанныеПечати.ЕстьСкидки И ДанныеПечати.ВыводитьКоды Тогда
				ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезСкидок");
			ИначеЕсли НЕ ДанныеПечати.ЕстьСкидки И НЕ ДанныеПечати.ВыводитьКоды Тогда
				ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезКодовИСкидок");
			КонецЕсли;

			ТабличныйДокумент.Вывести(ОбластьНомера);
			Если ДанныеПечати.ВыводитьКоды Тогда
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьТовар.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Присоединить(ОбластьТовар);
			
			ОбластьДанных.Параметры.НДС	= ?(ДанныеПечати.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			
			Если ДанныеПечати.ЕстьСкидки Тогда
				ТабличныйДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			
			ОбластьСуммы.Параметры.Заполнить(ДанныеПечати);
			ОбластьСуммы.Параметры.ВсегоНДС	= СуммаНДС;
			ТабличныйДокумент.Присоединить(ОбластьСуммы);
			
		КонецЕсли;

		// Вывести Сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		
		СуммаКПрописи = Всего + ?(ДанныеПечати.СуммаВключаетНДС, 0, СуммаНДС);
		ОбластьМакета.Параметры.ИтоговаяСтрока	= "Всего наименований " + ВсегоСтрок +
													", на сумму " + ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, ДанныеПечати.ВалютаДокумента);
		ОбластьМакета.Параметры.СуммаПрописью	= РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, ДанныеПечати.ВалютаДокумента);
		ТабличныйДокумент.Вывести(ОбластьМакета);

		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
		//+++DubI Рарус-СПб 31.03.2017
		//ОбластьМакета.Параметры.ФИОИсполнителя	= Строка(ДанныеПечати.Механик);
		ОбластьМакета.Параметры.ФИОИсполнителя	= "";//Строка(ДанныеПечати.Механик);
		//---DubI Рарус-СПб
		//ОбластьМакета.Параметры.ФИОЗаказчика	= Строка(ДанныеПечати.Механник);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если КомплектыПечати <> Неопределено
			И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено
			И КомплектПечатиПоСсылке.Экземпляров > 1 Тогда
			
			ОбластьКопирования = ТабличныйДокумент.ПолучитьОбласть(
				НомерСтрокиНачало,
				,
				ТабличныйДокумент.ВысотаТаблицы);
			
			Для Итератор = 2 По КомплектПечатиПоСсылке.Экземпляров Цикл
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьКопирования);
				
			КонецЦикла;
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Печать_пкКалькуляция

Функция СформироватьПечатнуюФормупкКалькуляция(СтруктураТипов, ОбъектыПечати, ПараметрыПечати, КомплектыПечати = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_Калькуляция";
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
			
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ДанныеДляПечати = ПолучитьДанныеДляПечатнойФормыпкКалькуляция(
			СтруктураОбъектов.Значение);
		
		// Сформированный тбаличный документ
		ЗаполнитьТабличныйДокументпкКалькуляция(
			ТабличныйДокумент,
			ДанныеДляПечати,
			ОбъектыПечати,
			КомплектыПечати,
			"пкКалькуляция");
			
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыпкКалькуляция(МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	пкЗаказНаряд.Ссылка КАК Ссылка,
	|	пкЗаказНаряд.Дата КАК Дата,
	|	пкЗаказНаряд.Номер КАК Номер,
	|	пкЗаказНаряд.Ответственный КАК Исполнитель,
	|	пкЗаказНаряд.ОбъектСтроительства КАК НаименованиеОбъекта,
	|	пкЗаказНаряд.Техника КАК Оборудование,
	|	пкЗаказНаряд.ЗаводскойНомерТехники КАК ЗаводскойНомер,
	|	пкЗаказНаряд.Техника.Код КАК НоменклатурныйНомер,
	|	пкЗаказНаряд.Моточасы КАК Моточасы,
	|	пкЗаказНаряд.Подразделение КАК Подразделение,
	|	пкЗаказНаряд.Техника КАК Техника,
	|	пкЗаказНаряд.Организация КАК Поставщик,
	|	пкЗаказНаряд.Клиент КАК Покупатель,
	|	пкЗаказНаряд.Механик КАК Механик,
	|	пкЗаказНаряд.ОбъектСтроительства КАК МестоРемонта,
	|	ИСТИНА КАК УчитыватьНДС,
	|	пкЗаказНаряд.ЦенаВключаетНДС КАК СуммаВключаетНДС,
	|	ИСТИНА КАК ВыводитьКоды,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВложенныйЗапрос.СуммаРучнойСкидки, 0) > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьСкидки,
	|	пкЗаказНаряд.Валюта КАК ВалютаДокумента,
	|	пкЗаказНаряд.Организация,
	|	пкЗаказНаряд.Клиент,
	|	пкЗаказНаряд.ТехникаКлиента
	|ИЗ
	|	Документ.пкЗаказНаряд КАК пкЗаказНаряд
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВложенныйЗапрос.Ссылка КАК Ссылка,
	|			СУММА(ВложенныйЗапрос.СуммаРучнойСкидки) КАК СуммаРучнойСкидки
	|		ИЗ
	|			(ВЫБРАТЬ
	|				пкЗаказНарядМатериалы.Ссылка КАК Ссылка,
	|				пкЗаказНарядМатериалы.СуммаРучнойСкидки КАК СуммаРучнойСкидки
	|			ИЗ
	|				Документ.пкЗаказНаряд.Материалы КАК пкЗаказНарядМатериалы
	|			ГДЕ
	|				пкЗаказНарядМатериалы.Ссылка В(&МассивОбъектов)
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				пкЗаказНарядРаботы.Ссылка,
	|				пкЗаказНарядРаботы.СуммаРучнойСкидки
	|			ИЗ
	|				Документ.пкЗаказНаряд.Работы КАК пкЗаказНарядРаботы
	|			ГДЕ
	|				пкЗаказНарядРаботы.Ссылка В(&МассивОбъектов)) КАК ВложенныйЗапрос
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВложенныйЗапрос.Ссылка) КАК ВложенныйЗапрос
	|		ПО пкЗаказНаряд.Ссылка = ВложенныйЗапрос.Ссылка
	|ГДЕ
	|	пкЗаказНаряд.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	пкЗаказНарядМатериалы.Ссылка КАК Ссылка,
	|	1 КАК Порядок,
	|	пкЗаказНарядМатериалы.Номенклатура КАК Номенклатура,
	|	пкЗаказНарядМатериалы.НомерСтроки КАК НомерСтроки,
	|	пкЗаказНарядМатериалы.Номенклатура.Артикул КАК Артикул,
	|	ПОДСТРОКА(пкЗаказНарядМатериалы.Номенклатура.НаименованиеПолное, 1, 1000) КАК Товар,
	|	пкЗаказНарядМатериалы.Количество КАК Количество,
	|	пкЗаказНарядМатериалы.Упаковка КАК ЕдиницаИзмерения,
	|	пкЗаказНарядМатериалы.Цена КАК Цена,
	|	пкЗаказНарядМатериалы.Сумма КАК СуммаБезСкидки,
	|	пкЗаказНарядМатериалы.Сумма КАК Сумма,
	|	пкЗаказНарядМатериалы.СуммаНДС КАК СуммаНДС,
	|	пкЗаказНарядМатериалы.СуммаРучнойСкидки КАК Скидка
	|ИЗ
	|	Документ.пкЗаказНаряд.Материалы КАК пкЗаказНарядМатериалы
	|ГДЕ
	|	пкЗаказНарядМатериалы.Ссылка В(&МассивОбъектов)
	|	И пкЗаказНарядМатериалы.Цена <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	пкЗаказНарядРаботы.Ссылка,
	|	2,
	|	пкЗаказНарядРаботы.Номенклатура,
	|	пкЗаказНарядРаботы.НомерСтроки,
	|	пкЗаказНарядРаботы.Номенклатура.Артикул,
	|	ПОДСТРОКА(пкЗаказНарядРаботы.Номенклатура.НаименованиеПолное, 1, 1000),
	|	пкЗаказНарядРаботы.КоличествоРеализация,
	|	пкЗаказНарядРаботы.Номенклатура.ЕдиницаИзмерения,
	|	пкЗаказНарядРаботы.Цена,
	|	пкЗаказНарядРаботы.Сумма,
	|	пкЗаказНарядРаботы.Сумма,
	|	пкЗаказНарядРаботы.СуммаНДС,
	|	пкЗаказНарядРаботы.СуммаРучнойСкидки
	|ИЗ
	|	Документ.пкЗаказНаряд.Работы КАК пкЗаказНарядРаботы
	|ГДЕ
	|	пкЗаказНарядРаботы.Ссылка В(&МассивОбъектов)
	|	И пкЗаказНарядРаботы.КоличествоРеализация <> 0
	|	И пкЗаказНарядРаботы.Цена <> 0";

	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке", ПакетРезультатовЗапроса[0]);
	СтруктураДанныхДляПечати.Вставить("ТабличнаяЧасть", ПакетРезультатовЗапроса[1]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументпкКалькуляция(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, КомплектыПечати, ИмяМакета)
	
	ДанныеПечати	= ДанныеДляПечати.РезультатПоШапке.Выбрать();
	СтрокиТаблицы	= ДанныеДляПечати.ТабличнаяЧасть.Выгрузить();
	
	ПервыйДокумент	= Истина;
	
	Пока ДанныеПечати.Следующий() Цикл

		Макет = ПолучитьМакет(ИмяМакета);
		
		// Для печати комплектов
		Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено Тогда
			
			КомплектПечатиПоСсылке = КомплектыПечати.Найти(ДанныеПечати.Ссылка, "Ссылка");
			
			Если КомплектПечатиПоСсылке = Неопределено Тогда
				КомплектПечатиПоСсылке = КомплектыПечати[0];
			КонецЕсли;
			
			Если КомплектПечатиПоСсылке.Экземпляров = 0 Тогда
				Продолжить
			КонецЕсли;
			
		КонецЕсли;
			
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		// Выводим шапку накладной

		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ДатаДок = Формат(ДанныеПечати.Дата, "ДЛФ=DD");
	    //ОбластьМакета.Параметры.ТехническийДиректор = Строка(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнойТехническийДиректор"));
		Если ДанныеПечати.Подразделение.Наименование = "Нижний Новгород" Тогда
			ОбластьМакета.Параметры.ТекстОтветственныйДолжность = "Старший механик";
			ОбластьМакета.Параметры.ТекстОП = "ОП Нижний Новгород";
		Иначе
			ОбластьМакета.Параметры.ТекстОтветственныйДолжность = "Руководитель сервисной службы";
			ОбластьМакета.Параметры.ТекстОП = "";
		КонецЕсли;	
		//ОбластьМакета.Параметры.НомерДок = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеПечати.Ссылка.Номер);
		ОбластьМакета.Параметры.НомерДок = ДанныеПечати.Ссылка.Номер;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.ТекстПоставщик			= "Исполнитель:";
		ОбластьМакета.Параметры.ПредставлениеПоставщика	= ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.ТекстПокупатель			= "Заказчик:";
		ОбластьМакета.Параметры.ПредставлениеПолучателя	= ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ОсновнойКонтрагентПартнера(ДанныеПечати.Клиент), ДанныеПечати.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Техника");
		Если ДанныеПечати.ТехникаКлиента Тогда
			ОбластьМакета.Параметры.ПредставлениеТехники = СокрЛП(Строка(ДанныеПечати.ЗаводскойНомер)) + 
															", собственник " + Строка(ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ОсновнойКонтрагентПартнера(ДанныеПечати.Клиент), ДанныеПечати.Дата), "ПолноеНаименование"));
		Иначе
			ОбластьМакета.Параметры.ПредставлениеТехники = СокрЛП(Строка(ДанныеПечати.Техника.пкМодель)) + 
															" номер " + СокрЛП(Строка(ДанныеПечати.Техника.Код)) + 
															", собственник " + Строка(ДанныеПечати.Организация.НаименованиеПолное);
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	    ОбластьМакета = Макет.ПолучитьОбласть("Объект");
		ОбластьМакета.Параметры.ПредставлениеМестаРемонта = ДанныеПечати.МестоРемонта;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

		ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
		Если Не ДанныеПечати.ВыводитьКоды И ДанныеПечати.ЕстьСкидки Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|ТоварБезКодов");
		ИначеЕсли НЕ ДанныеПечати.ЕстьСкидки И ДанныеПечати.ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|ТоварБезСкидок");
		ИначеЕсли НЕ ДанныеПечати.ЕстьСкидки И НЕ ДанныеПечати.ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|ТоварБезКодовИСкидок");
		КонецЕсли;

		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ДанныеПечати.ВыводитьКоды Тогда
			ОбластьКодов.Параметры.ИмяКолонкиКодов = "Артикул";
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ОбластьТовар.Параметры.Товар = "Товары (работы, услуги)";
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		Если ДанныеПечати.ЕстьСкидки Тогда
			ТабличныйДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		
		ОбластьСуммы.Параметры.ТекстСумма = ?(ДанныеПечати.СуммаВключаетНДС, "Сумма", "Сумма без НДС");
		ТабличныйДокумент.Присоединить(ОбластьСуммы);

		// Увеличим ширину колонки Товар на ширину неиспользуемых колонок
		ОбластьКолонкаТовар = Макет.Область("Товар");
		Если Не ДанныеПечати.ВыводитьКоды И ДанныеПечати.ЕстьСкидки Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.5;
		ИначеЕсли НЕ ДанныеПечати.ЕстьСкидки И ДанныеПечати.ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 2.125;
		ИначеЕсли НЕ ДанныеПечати.ЕстьСкидки И НЕ ДанныеПечати.ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 2.625;
		КонецЕсли;

		ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

		ОбластьТовар = Макет.ПолучитьОбласть("Строка|Товар");
		Если Не ДанныеПечати.ВыводитьКоды И ДанныеПечати.ЕстьСкидки Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("Строка|ТоварБезКодов");
		ИначеЕсли НЕ ДанныеПечати.ЕстьСкидки И ДанныеПечати.ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("Строка|ТоварБезСкидок");
		ИначеЕсли НЕ ДанныеПечати.ЕстьСкидки И НЕ ДанныеПечати.ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("Строка|ТоварБезКодовИСкидок");
		КонецЕсли;

		Всего		= 0;
		СуммаНДС	= 0;
		ВсегоСкидок	= 0;
		ВсегоСтрок	= 0;
		тНомер  	= 0;
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ТаблицаСтрок = СтрокиТаблицы.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаТовары Из ТаблицаСтрок Цикл

			Если НЕ ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;

			тНомер = тНомер + 1;
			
			ОбластьНомера.Параметры.Заполнить(СтрокаТовары);
			ОбластьНомера.Параметры.НомерСтроки = тНомер;
			ТабличныйДокумент.Вывести(ОбластьНомера);

			Если ДанныеПечати.ВыводитьКоды Тогда
				ОбластьКодов.Параметры.Заполнить(СтрокаТовары);
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;

			ОбластьТовар.Параметры.Заполнить(СтрокаТовары);
			ТабличныйДокумент.Присоединить(ОбластьТовар);
			ОбластьДанных.Параметры.Заполнить(СтрокаТовары);
			ТабличныйДокумент.Присоединить(ОбластьДанных);

			Если ДанныеПечати.ЕстьСкидки Тогда
				ОбластьСкидок.Параметры.Заполнить(СтрокаТовары);
				ТабличныйДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;

			ОбластьСуммы.Параметры.Заполнить(СтрокаТовары);
			ТабличныйДокумент.Присоединить(ОбластьСуммы);
			
			Всего		= Всего       + СтрокаТовары.Сумма;
			СуммаНДС	= СуммаНДС    + СтрокаТовары.СуммаНДС;
			ВсегоСкидок	= ВсегоСкидок + СтрокаТовары.Скидка;
			ВсегоСтрок	= ВсегоСтрок  + 1;
			
		КонецЦикла;

		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

		ОбластьТовар = Макет.ПолучитьОбласть("Итого|Товар");
		Если Не ДанныеПечати.ВыводитьКоды И ДанныеПечати.ЕстьСкидки Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("Итого|ТоварБезКодов");
		ИначеЕсли НЕ ДанныеПечати.ЕстьСкидки И ДанныеПечати.ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("Итого|ТоварБезСкидок");
		ИначеЕсли НЕ ДанныеПечати.ЕстьСкидки И НЕ ДанныеПечати.ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("Итого|ТоварБезКодовИСкидок");
		КонецЕсли;

		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ДанныеПечати.ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		Если ДанныеПечати.ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		
		//ОбластьСуммы.Параметры.Всего = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
		//ОбластьСуммы.Параметры.Всего = Число(ДанныеПечати.ВсегоНДС) + Число(ДанныеПечати.Всего); 
		ОбластьСкидок.Параметры.ВсегоСкидок		= ВсегоСкидок;
		ОбластьСкидок.Параметры.ВсегоБезСкидок	= Всего + ВсегоСкидок;
		ОбластьСуммы.Параметры.Всего			= Всего;
		ТабличныйДокумент.Присоединить(ОбластьСуммы);

		// Вывести ИтогоНДС
		Если ДанныеПечати.УчитыватьНДС Тогда
			ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
			ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|Товар");
			Если Не ДанныеПечати.ВыводитьКоды И ДанныеПечати.ЕстьСкидки Тогда
				ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезКодов");
			ИначеЕсли НЕ ДанныеПечати.ЕстьСкидки И ДанныеПечати.ВыводитьКоды Тогда
				ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезСкидок");
			ИначеЕсли НЕ ДанныеПечати.ЕстьСкидки И НЕ ДанныеПечати.ВыводитьКоды Тогда
				ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезКодовИСкидок");
			КонецЕсли;

			ТабличныйДокумент.Вывести(ОбластьНомера);
			Если ДанныеПечати.ВыводитьКоды Тогда
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьТовар.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Присоединить(ОбластьТовар);
			
			ОбластьДанных.Параметры.НДС	= ?(ДанныеПечати.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			
			Если ДанныеПечати.ЕстьСкидки Тогда
				ТабличныйДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			
			ОбластьСуммы.Параметры.Заполнить(ДанныеПечати);
			ОбластьСуммы.Параметры.ВсегоНДС	= СуммаНДС;
			ТабличныйДокумент.Присоединить(ОбластьСуммы);
			
		КонецЕсли;

		// Вывести Сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		
		СуммаКПрописи = Всего + ?(ДанныеПечати.СуммаВключаетНДС, 0, СуммаНДС);
		ОбластьМакета.Параметры.ИтоговаяСтрока	= "Всего наименований " + ВсегоСтрок +
													", на сумму " + ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, ДанныеПечати.ВалютаДокумента);
		ОбластьМакета.Параметры.СуммаПрописью	= РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, ДанныеПечати.ВалютаДокумента);
		ТабличныйДокумент.Вывести(ОбластьМакета);

		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
		//+++DubI Рарус-СПб 31.03.2017
		//ОбластьМакета.Параметры.ФИОИсполнителя	= Строка(ДанныеПечати.Механик);
		ОбластьМакета.Параметры.ФИОИсполнителя	= "";//Строка(ДанныеПечати.Механик);
		//---DubI Рарус-СПб
		//ОбластьМакета.Параметры.ФИОЗаказчика	= Строка(ДанныеПечати.Механник);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если КомплектыПечати <> Неопределено
			И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено
			И КомплектПечатиПоСсылке.Экземпляров > 1 Тогда
			
			ОбластьКопирования = ТабличныйДокумент.ПолучитьОбласть(
				НомерСтрокиНачало,
				,
				ТабличныйДокумент.ВысотаТаблицы);
			
			Для Итератор = 2 По КомплектПечатиПоСсылке.Экземпляров Цикл
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьКопирования);
				
			КонецЦикла;
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Прочее

Процедура УстановитьПараметр(ОбластьМакета, ИмяПараметра, ЗначениеПараметра)
	ОбластьМакета.Параметры.Заполнить(Новый Структура(ИмяПараметра, ЗначениеПараметра));
КонецПроцедуры

// Функция находит актуальное значение телефона в контакной информации.
//
// Параметры:
//  Объект - СправочникСсылка, объект контактной информации
//
// Возвращаемое значение
//  Строка - представление найденного телефона
//
Функция ПолучитьТелефонИзКонтактнойИнформации(Объект)

	Если ЗначениеЗаполнено(Объект) Тогда
	
		Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
			Окончание = "Организации";
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
			Окончание = "Контрагента";
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Партнеры") Тогда
			Окончание = "Партнера";
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Склады") Тогда
			Окончание = "Склада";
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Пользователи") Тогда
			Окончание = "Пользователя";
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Окончание = "РабочийФизическиеЛица";
			
		КонецЕсли;
		
		ВладелецКонтактнойИнформации = Объект;
		
		ВидТелефона = Справочники.ВидыКонтактнойИнформации["Телефон" + Окончание].Ссылка;
		
		ТабЗн           = ВладелецКонтактнойИнформации.КонтактнаяИнформация.Выгрузить();
		НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Телефон, ВидТелефона));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Возврат НайденныеСтроки[0].Представление;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // ПолучитьТелефонИзКонтактнойИнформации()

Функция ОсновнойКонтрагентПартнера(Партнер)

	Если НЕ ЗначениеЗаполнено(Партнер) Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	ЗапросК = Новый Запрос;
	ЗапросК.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Партнер = &Партнер";
	ЗапросК.УстановитьПараметр("Партнер", Партнер);
	
	РезЗапроса = ЗапросК.Выполнить().Выбрать();
	Если РезЗапроса.Следующий() Тогда
		Возврат РезЗапроса.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.Контрагенты.ПустаяСсылка();
	
КонецФункции // ПолучитьТелефонИзКонтактнойИнформации()

#КонецОбласти

#КонецОбласти

#КонецЕсли
