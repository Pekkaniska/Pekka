
//&НаСервере
//Процедура ЗаполнитьНаСервере()
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ РАЗЛИЧНЫЕ
//	|	ИСТИНА КАК Пометка,
//	|	ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники КАК ЗаявкаНаАрендуТехники,
//	|	ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники.Партнер КАК Клиент,
//	|	ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники.Договор КАК Договор,
//	|	ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники.ОбъектСтроительства КАК ОбъектСтроительства,
//	|	ДанныеНачалаАрендыЗаявки.Модель КАК Модель,
//	|	МАКСИМУМ(ЕСТЬNULL(ЕСТЬNULL(ЕСТЬNULL(ДанныеНачалаАрендыЗадания.Техника, ДанныеОкончанияАрендыЗадания.Техника), ДанныеНачалаАрендыЗаказы.Техника), ДанныеНачалаАрендыЗаявки.Техника)) КАК Техника,
//	|	МАКСИМУМ(ЕСТЬNULL(ДанныеНачалаАрендыЗаказы.Период, ЕСТЬNULL(ДанныеНачалаАрендыЗадания.Период, ДанныеНачалаАрендыЗаявки.Период))) КАК ДатаНачалаПоСчету,
//	|	МАКСИМУМ(ЕСТЬNULL(ЕСТЬNULL(ДанныеОкончанияАрендыЗадания.Период, ДанныеОкончанияАренды.Период), КОНЕЦПЕРИОДА(ЕСТЬNULL(ДанныеНачалаАрендыЗаказы.Период, ДанныеНачалаАрендыЗаявки.Период), МЕСЯЦ))) КАК ДатаОкончанияПоСчету,
//	|	МАКСИМУМ(ДанныеНачалаАрендыЗаявки.Период) КАК ДатаНачалаАренды,
//	|	МАКСИМУМ(ДанныеОкончанияАренды.Период) КАК ДатаОкончанияАренды,
//	|	ДанныеНачалаАрендыЗаявки.НомерМодели КАК НомерМодели,
//	|	МИНИМУМ(НАЧАЛОПЕРИОДА(ДанныеПоПервомуЗаказу.Период, ДЕНЬ)) КАК ДатаПервогоЗаказа,
//	|	ДанныеНачалаАрендыЗадания.ЗаявкаНаАрендуТехники.Дата КАК ДатаЗаявки
//	|ПОМЕСТИТЬ ВТ_СрокиАренды
//	|ИЗ
//	|	РегистрСведений.пкСрокиАренды.СрезПоследних(
//	|			,
//	|			ТипДокумента = ЗНАЧЕНИЕ(Перечисление.пкТипыДокументовДляСроковАренды.ЗаданиеНаПеревозку)
//	|				И НЕ ЭтоОкончаниеАренды
//	|				И НЕ ЗаявкаНаАрендуТехники.ИсключитьИзУСР) КАК ДанныеНачалаАрендыЗаявки
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкСрокиАренды.СрезПоследних(
//	|				,
//	|				ЭтоОкончаниеАренды
//	|					И ТипДокумента = ЗНАЧЕНИЕ(Перечисление.пкТипыДокументовДляСроковАренды.ЗаданиеНаПеревозку)
//	|					И НЕ ЗаявкаНаАрендуТехники.ИсключитьИзУСР
//	|					И ЭтоВозврат) КАК ДанныеОкончанияАрендыЗадания
//	|		ПО ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники = ДанныеОкончанияАрендыЗадания.ЗаявкаНаАрендуТехники
//	|			И ДанныеНачалаАрендыЗаявки.Модель = ДанныеОкончанияАрендыЗадания.Модель
//	|			И ДанныеНачалаАрендыЗаявки.НомерМодели = ДанныеОкончанияАрендыЗадания.НомерМодели
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкСрокиАренды.СрезПоследних(
//	|				,
//	|				ЭтоОкончаниеАренды
//	|					И ТипДокумента = ЗНАЧЕНИЕ(Перечисление.пкТипыДокументовДляСроковАренды.ЗаявкаНаАрендуТехники)
//	|					И НЕ ЗаявкаНаАрендуТехники.ИсключитьИзУСР) КАК ДанныеОкончанияАренды
//	|		ПО ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники = ДанныеОкончанияАренды.ЗаявкаНаАрендуТехники
//	|			И ДанныеНачалаАрендыЗаявки.Модель = ДанныеОкончанияАренды.Модель
//	|			И ДанныеНачалаАрендыЗаявки.НомерМодели = ДанныеОкончанияАренды.НомерМодели
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкСрокиАренды.СрезПоследних(
//	|				,
//	|				ТипДокумента = ЗНАЧЕНИЕ(Перечисление.пкТипыДокументовДляСроковАренды.ЗаказКлиента)
//	|					И ЭтоОкончаниеАренды
//	|					И НЕ ЗаявкаНаАрендуТехники.ИсключитьИзУСР) КАК ДанныеНачалаАрендыЗаказы
//	|		ПО ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники = ДанныеНачалаАрендыЗаказы.ЗаявкаНаАрендуТехники
//	|			И ДанныеНачалаАрендыЗаявки.Модель = ДанныеНачалаАрендыЗаказы.Модель
//	|			И ДанныеНачалаАрендыЗаявки.НомерМодели = ДанныеНачалаАрендыЗаказы.НомерМодели
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкСрокиАренды.СрезПоследних(
//	|				,
//	|				ТипДокумента = ЗНАЧЕНИЕ(Перечисление.пкТипыДокументовДляСроковАренды.ЗаданиеНаПеревозку)
//	|					И НЕ ЭтоОкончаниеАренды
//	|					И НЕ ЗаявкаНаАрендуТехники.ИсключитьИзУСР) КАК ДанныеНачалаАрендыЗадания
//	|		ПО ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники = ДанныеНачалаАрендыЗадания.ЗаявкаНаАрендуТехники
//	|			И ДанныеНачалаАрендыЗаявки.Модель = ДанныеНачалаАрендыЗадания.Модель
//	|			И ДанныеНачалаАрендыЗаявки.НомерМодели = ДанныеНачалаАрендыЗадания.НомерМодели
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкСрокиАренды.СрезПервых(
//	|				,
//	|				ТипДокумента = ЗНАЧЕНИЕ(Перечисление.пкТипыДокументовДляСроковАренды.ЗаказКлиента)
//	|					И НЕ ЭтоОкончаниеАренды
//	|					И НЕ ЗаявкаНаАрендуТехники.ИсключитьИзУСР) КАК ДанныеПоПервомуЗаказу
//	|		ПО ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники = ДанныеПоПервомуЗаказу.ЗаявкаНаАрендуТехники
//	|			И ДанныеНачалаАрендыЗаявки.Модель = ДанныеПоПервомуЗаказу.Модель
//	|			И ДанныеНачалаАрендыЗаявки.НомерМодели = ДанныеПоПервомуЗаказу.НомерМодели
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ДанныеНачалаАрендыЗаявки.Модель,
//	|	ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники,
//	|	ДанныеНачалаАрендыЗаявки.НомерМодели,
//	|	ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники.Партнер,
//	|	ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники.Договор,
//	|	ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники.ОбъектСтроительства,
//	|	ДанныеНачалаАрендыЗадания.ЗаявкаНаАрендуТехники.Дата
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	НАЧАЛОПЕРИОДА(пкСрокиАренды.Период, ДЕНЬ) КАК Нач,
//	|	пкСрокиАренды.ЭтоОкончаниеАренды КАК ЭтоОкончаниеАренды,
//	|	ВТ_СрокиАренды.ЗаявкаНаАрендуТехники КАК ЗаявкаНаАрендуТехники,
//	|	ВТ_СрокиАренды.Модель КАК Модель,
//	|	пкСрокиАренды.НомерМодели КАК НомерМодели,
//	|	ВТ_СрокиАренды.Пометка КАК Пометка,
//	|	ВТ_СрокиАренды.Клиент КАК Клиент,
//	|	ВТ_СрокиАренды.Договор КАК Договор,
//	|	ВТ_СрокиАренды.ОбъектСтроительства КАК ОбъектСтроительства,
//	|	ВТ_СрокиАренды.Техника КАК Техника,
//	|	ВТ_СрокиАренды.ДатаНачалаАренды КАК ДатаНачалаАренды,
//	|	ВТ_СрокиАренды.ДатаОкончанияАренды КАК ДатаОкончанияАренды,
//	|	ВТ_СрокиАренды.ДатаПервогоЗаказа КАК ДатаПервогоЗаказа,
//	|	ВТ_СрокиАренды.ДатаЗаявки КАК ДатаЗаявки
//	|ПОМЕСТИТЬ НачалаАренды
//	|ИЗ
//	|	ВТ_СрокиАренды КАК ВТ_СрокиАренды
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкСрокиАренды КАК пкСрокиАренды
//	|		ПО ВТ_СрокиАренды.ЗаявкаНаАрендуТехники = пкСрокиАренды.ЗаявкаНаАрендуТехники
//	|			И ВТ_СрокиАренды.Модель = пкСрокиАренды.Модель
//	|			И ВТ_СрокиАренды.НомерМодели = пкСрокиАренды.НомерМодели
//	|ГДЕ
//	|	пкСрокиАренды.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.пкТипыДокументовДляСроковАренды.ЗаказКлиента)
//	|	И НЕ пкСрокиАренды.ЗаявкаНаАрендуТехники.ИсключитьИзУСР
//	|	И пкСрокиАренды.ЭтоОкончаниеАренды = ЛОЖЬ
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	пкСрокиАренды.Период КАК Кон,
//	|	пкСрокиАренды.ЭтоОкончаниеАренды КАК ЭтоОкончаниеАренды,
//	|	ВТ_СрокиАренды.ЗаявкаНаАрендуТехники КАК ЗаявкаНаАрендуТехники,
//	|	ВТ_СрокиАренды.Модель КАК Модель,
//	|	пкСрокиАренды.НомерМодели КАК НомерМодели
//	|ПОМЕСТИТЬ ОкончаниеАренды
//	|ИЗ
//	|	ВТ_СрокиАренды КАК ВТ_СрокиАренды
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкСрокиАренды КАК пкСрокиАренды
//	|		ПО ВТ_СрокиАренды.ЗаявкаНаАрендуТехники = пкСрокиАренды.ЗаявкаНаАрендуТехники
//	|			И ВТ_СрокиАренды.Модель = пкСрокиАренды.Модель
//	|			И ВТ_СрокиАренды.НомерМодели = пкСрокиАренды.НомерМодели
//	|ГДЕ
//	|	пкСрокиАренды.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.пкТипыДокументовДляСроковАренды.ЗаказКлиента)
//	|	И НЕ пкСрокиАренды.ЗаявкаНаАрендуТехники.ИсключитьИзУСР
//	|	И пкСрокиАренды.ЭтоОкончаниеАренды = ИСТИНА
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	МАКСИМУМ(НачалаАренды.Нач) КАК Нач,
//	|	ОкончаниеАренды.Кон КАК Кон,
//	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НачалаАренды.Нач) КАК Нач1,
//	|	НачалаАренды.ЗаявкаНаАрендуТехники КАК ЗаявкаНаАрендуТехники,
//	|	НачалаАренды.Модель КАК Модель,
//	|	НачалаАренды.НомерМодели КАК НомерМодели,
//	|	НачалаАренды.Пометка КАК Пометка,
//	|	НачалаАренды.Клиент КАК Клиент,
//	|	НачалаАренды.Договор КАК Договор,
//	|	НачалаАренды.ОбъектСтроительства КАК ОбъектСтроительства,
//	|	НачалаАренды.Техника КАК Техника,
//	|	НачалаАренды.ДатаНачалаАренды КАК ДатаНачалаАренды,
//	|	НачалаАренды.ДатаОкончанияАренды КАК ДатаОкончанияАренды,
//	|	НачалаАренды.ДатаПервогоЗаказа КАК ДатаПервогоЗаказа,
//	|	НачалаАренды.ДатаЗаявки КАК ДатаЗаявки
//	|ПОМЕСТИТЬ Интервалы
//	|ИЗ
//	|	НачалаАренды КАК НачалаАренды
//	|		ЛЕВОЕ СОЕДИНЕНИЕ ОкончаниеАренды КАК ОкончаниеАренды
//	|		ПО НачалаАренды.ЗаявкаНаАрендуТехники = ОкончаниеАренды.ЗаявкаНаАрендуТехники
//	|			И НачалаАренды.Модель = ОкончаниеАренды.Модель
//	|			И НачалаАренды.НомерМодели = ОкончаниеАренды.НомерМодели
//	|			И НачалаАренды.Нач < ОкончаниеАренды.Кон
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ОкончаниеАренды.Кон,
//	|	НачалаАренды.ЗаявкаНаАрендуТехники,
//	|	НачалаАренды.Модель,
//	|	НачалаАренды.НомерМодели,
//	|	НачалаАренды.Пометка,
//	|	НачалаАренды.Клиент,
//	|	НачалаАренды.Договор,
//	|	НачалаАренды.ОбъектСтроительства,
//	|	НачалаАренды.Техника,
//	|	НачалаАренды.ДатаНачалаАренды,
//	|	НачалаАренды.ДатаОкончанияАренды,
//	|	НачалаАренды.ДатаПервогоЗаказа,
//	|	НачалаАренды.ДатаЗаявки
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
//	|	Интервалы.ЗаявкаНаАрендуТехники КАК ЗаявкаНаАрендуТехники,
//	|	Интервалы.Модель КАК Модель,
//	|	Интервалы.НомерМодели КАК НомерМодели,
//	|	Интервалы.Кон КАК ДатаНачалаПоСчету,
//	|	ВЫБОР
//	|		КОГДА ДОБАВИТЬКДАТЕ(Интервалы2.Нач, ДЕНЬ, -1) > КОНЕЦПЕРИОДА(&ДатаСчетов, ДЕНЬ)
//	|			ТОГДА КОНЕЦПЕРИОДА(&ДатаСчетов, ДЕНЬ)
//	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(Интервалы2.Нач, ДЕНЬ, -1)
//	|	КОНЕЦ КАК ДатаОкончанияПоСчету,
//	|	Интервалы.Пометка КАК Пометка,
//	|	Интервалы.Клиент КАК Клиент,
//	|	Интервалы.Договор КАК Договор,
//	|	Интервалы.ОбъектСтроительства КАК ОбъектСтроительства,
//	|	Интервалы.Техника КАК Техника,
//	|	Интервалы.ДатаНачалаАренды КАК ДатаНачалаАренды,
//	|	Интервалы.ДатаОкончанияАренды КАК ДатаОкончанияАренды,
//	|	Интервалы.ДатаПервогоЗаказа КАК ДатаПервогоЗаказа,
//	|	Интервалы.ДатаЗаявки КАК ДатаЗаявки
//	|ПОМЕСТИТЬ Результат
//	|ИЗ
//	|	Интервалы КАК Интервалы
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Интервалы КАК Интервалы2
//	|		ПО (Интервалы2.Нач <> Интервалы.Кон)
//	|			И (Интервалы2.Нач1 - Интервалы.Нач1 = 1)
//	|			И Интервалы.ЗаявкаНаАрендуТехники = Интервалы2.ЗаявкаНаАрендуТехники
//	|			И Интервалы.НомерМодели = Интервалы2.НомерМодели
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
//	|	ВТ_СрокиАренды.ЗаявкаНаАрендуТехники,
//	|	ВТ_СрокиАренды.Модель,
//	|	ВТ_СрокиАренды.НомерМодели,
//	|	ВТ_СрокиАренды.ДатаНачалаПоСчету,
//	|	ВЫБОР
//	|		КОГДА ВТ_СрокиАренды.ДатаОкончанияПоСчету > КОНЕЦПЕРИОДА(&ДатаСчетов, ДЕНЬ)
//	|				И &ДатаСчетов <> &ПустаяДата
//	|			ТОГДА КОНЕЦПЕРИОДА(&ДатаСчетов, ДЕНЬ)
//	|		ИНАЧЕ ВТ_СрокиАренды.ДатаОкончанияПоСчету
//	|	КОНЕЦ,
//	|	ВТ_СрокиАренды.Пометка,
//	|	ВТ_СрокиАренды.Клиент,
//	|	ВТ_СрокиАренды.Договор,
//	|	ВТ_СрокиАренды.ОбъектСтроительства,
//	|	ВТ_СрокиАренды.Техника,
//	|	ВТ_СрокиАренды.ДатаНачалаАренды,
//	|	ВТ_СрокиАренды.ДатаОкончанияАренды,
//	|	ВТ_СрокиАренды.ДатаПервогоЗаказа,
//	|	ВТ_СрокиАренды.ДатаЗаявки
//	|ИЗ
//	|	ВТ_СрокиАренды КАК ВТ_СрокиАренды
//	|ГДЕ
//	|	ВТ_СрокиАренды.ДатаНачалаПоСчету < ВЫБОР
//	|			КОГДА ВТ_СрокиАренды.ДатаОкончанияПоСчету > КОНЕЦПЕРИОДА(&ДатаСчетов, ДЕНЬ)
//	|					И &ДатаСчетов <> &ПустаяДата
//	|				ТОГДА КОНЕЦПЕРИОДА(&ДатаСчетов, ДЕНЬ)
//	|			ИНАЧЕ ВТ_СрокиАренды.ДатаОкончанияПоСчету
//	|		КОНЕЦ
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	ВТ_СрокиАренды.ЗаявкаНаАрендуТехники,
//	|	ВТ_СрокиАренды.Модель,
//	|	ВТ_СрокиАренды.НомерМодели,
//	|	ВТ_СрокиАренды.ДатаНачалаАренды,
//	|	ДОБАВИТЬКДАТЕ(ВТ_СрокиАренды.ДатаПервогоЗаказа, ДЕНЬ, -1),
//	|	ВТ_СрокиАренды.Пометка,
//	|	ВТ_СрокиАренды.Клиент,
//	|	ВТ_СрокиАренды.Договор,
//	|	ВТ_СрокиАренды.ОбъектСтроительства,
//	|	ВТ_СрокиАренды.Техника,
//	|	ВТ_СрокиАренды.ДатаНачалаАренды,
//	|	ВТ_СрокиАренды.ДатаОкончанияАренды,
//	|	ВТ_СрокиАренды.ДатаПервогоЗаказа,
//	|	ВТ_СрокиАренды.ДатаЗаявки
//	|ИЗ
//	|	ВТ_СрокиАренды КАК ВТ_СрокиАренды
//	|ГДЕ
//	|	РАЗНОСТЬДАТ(ВТ_СрокиАренды.ДатаНачалаАренды, ВТ_СрокиАренды.ДатаПервогоЗаказа, ДЕНЬ) > 1
//	|	И ВТ_СрокиАренды.ДатаНачалаАренды < ДОБАВИТЬКДАТЕ(ВТ_СрокиАренды.ДатаПервогоЗаказа, ДЕНЬ, -1)
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|УНИЧТОЖИТЬ ВТ_СрокиАренды
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
//	|	Результат.ЗаявкаНаАрендуТехники КАК ЗаявкаНаАрендуТехники,
//	|	Результат.Модель КАК Модель,
//	|	Результат.НомерМодели КАК НомерМодели,
//	|	Результат.ДатаНачалаПоСчету КАК ДатаНачалаПоСчету,
//	|	Результат.ДатаОкончанияПоСчету КАК ДатаОкончанияПоСчету,
//	|	Результат.Пометка КАК Пометка,
//	|	Результат.Клиент КАК Клиент,
//	|	Результат.Договор КАК Договор,
//	|	Результат.ОбъектСтроительства КАК ОбъектСтроительства,
//	|	Результат.Техника КАК Техника,
//	|	Результат.ДатаНачалаАренды КАК ДатаНачалаАренды,
//	|	Результат.ДатаОкончанияАренды КАК ДатаОкончанияАренды,
//	|	Результат.ДатаПервогоЗаказа КАК ДатаПервогоЗаказа,
//	|	Результат.ДатаЗаявки КАК ДатаЗаявки
//	|ИЗ
//	|	Результат КАК Результат
//	|ГДЕ
//	|	Результат.ДатаНачалаПоСчету > &ДатаЗапускаСистемы
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	ДатаЗаявки,
//	|	НомерМодели
//	|ИТОГИ ПО
//	|	ЗаявкаНаАрендуТехники";
//	
//	
//	Запрос.УстановитьПараметр("Подразделение",       Подразделение);
//	Запрос.УстановитьПараметр("Клиент",              Клиент);
//	Запрос.УстановитьПараметр("ОбъектСтроительства", ОбъектСтроительства);
//	Запрос.УстановитьПараметр("Менеджер",            Менеджер);
//	Запрос.УстановитьПараметр("ДатаСчетов",          ДатаСчетов);
//	Запрос.УстановитьПараметр("ПустаяДата",			 '00010101');
//	//Рарус Владимир Подрезов 06.06.2017
//	УстановитьПривилегированныйРежим(Истина);
//	Запрос.УстановитьПараметр("ДатаЗапускаСистемы",	 Константы.пкДатаЗапускаСистемы.Получить());
//	УстановитьПривилегированныйРежим(Ложь);
//	//Рарус Владимир Подрезов Конец
//	
//	ЗаменаВЗапросе = ") КАК ДанныеНачалаАрендыЗаявки";
//	Если ЗначениеЗаполнено(Подразделение) Тогда	
//		ЗаменаВЗапросе = " И ЗаявкаНаАрендуТехники.Подразделение = &Подразделение "+ЗаменаВЗапросе;
//	КонецЕсли;
//	Если ЗначениеЗаполнено(Клиент) Тогда
//		ЗаменаВЗапросе = " И ЗаявкаНаАрендуТехники.Партнер = &Клиент"+ЗаменаВЗапросе;	
//	КонецЕсли;
//	Если ЗначениеЗаполнено(ОбъектСтроительства) Тогда
//		ЗаменаВЗапросе = " И ЗаявкаНаАрендуТехники.ОбъектСтроительства = &ОбъектСтроительства"+ЗаменаВЗапросе;	
//	КонецЕсли;
//	Если ЗначениеЗаполнено(Менеджер) Тогда
//		ЗаменаВЗапросе = " И ЗаявкаНаАрендуТехники.Менеджер = &Менеджер"+ЗаменаВЗапросе;	
//	КонецЕсли;
//	
//	Запрос.Текст = СтрЗаменить(Запрос.Текст,") КАК ДанныеНачалаАрендыЗаявки",ЗаменаВЗапросе);
//	
//	ВыборкаЗаявки = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//	
//	Заявки = ЗаявкиНаАрендуТехники.ПолучитьЭлементы(); 
//	Заявки.Очистить();
//	
//	Пока ВыборкаЗаявки.Следующий() Цикл
//		СтрокаЗаявки = Заявки.Добавить();    
//		СтрокаЗаявки.ЗаявкаНаАрендуТехники = ВыборкаЗаявки.ЗаявкаНаАрендуТехники;
//		СтрокаЗаявки.Клиент                = ВыборкаЗаявки.ЗаявкаНаАрендуТехники.Партнер;
//		СтрокаЗаявки.Договор               = ВыборкаЗаявки.ЗаявкаНаАрендуТехники.Договор;
//		СтрокаЗаявки.ОбъектСтроительства   = ВыборкаЗаявки.ЗаявкаНаАрендуТехники.ОбъектСтроительства;
//		
//		СтрокаЗаявки.Пометка               = Истина;
//		
//		Выборка = ВыборкаЗаявки.Выбрать();
//		
//		ДанныеПоЗаявкам = СтрокаЗаявки.ПолучитьЭлементы();
//		
//		Пока Выборка.Следующий() Цикл
//			НоваяСтрока = ДанныеПоЗаявкам.Добавить();
//			
//			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
//			
//			НоваяСтрока.Количество = (КонецДня(НоваяСтрока.ДатаОкончанияПоСчету) + 1 - НачалоДня(НоваяСтрока.ДатаНачалаПоСчету)) / (3600 * 24);
//		КонецЦикла;    
//	КонецЦикла;    
//	
//КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	ИСТИНА КАК Пометка,
	//|	ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники КАК ЗаявкаНаАрендуТехники,
	//|	ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники.Партнер КАК Клиент,
	//|	ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники.Договор КАК Договор,
	//|	ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники.ОбъектСтроительства КАК ОбъектСтроительства,
	//|	ДанныеНачалаАрендыЗаявки.Модель КАК Модель,
	//|	МАКСИМУМ(ЕСТЬNULL(ЕСТЬNULL(ЕСТЬNULL(ДанныеНачалаАрендыЗадания.Техника, ДанныеОкончанияАрендыЗадания.Техника), ДанныеНачалаАрендыЗаказы.Техника), ДанныеНачалаАрендыЗаявки.Техника)) КАК Техника,
	//|	МАКСИМУМ(ЕСТЬNULL(ДанныеНачалаАрендыЗаказы.Период, ЕСТЬNULL(ДанныеНачалаАрендыЗадания.Период, ДанныеНачалаАрендыЗаявки.Период))) КАК ДатаНачалаПоСчету,
	//|	МАКСИМУМ(ЕСТЬNULL(ЕСТЬNULL(ДанныеОкончанияАрендыЗадания.Период, ДанныеОкончанияАренды.Период), КОНЕЦПЕРИОДА(ЕСТЬNULL(ДанныеНачалаАрендыЗаказы.Период, ДанныеНачалаАрендыЗаявки.Период), МЕСЯЦ))) КАК ДатаОкончанияПоСчету,
	//|	МАКСИМУМ(ДанныеНачалаАрендыЗаявки.Период) КАК ДатаНачалаАренды,
	//|	МАКСИМУМ(ДанныеОкончанияАренды.Период) КАК ДатаОкончанияАренды,
	//|	ДанныеНачалаАрендыЗаявки.НомерМодели КАК НомерМодели,
	//|	МИНИМУМ(НАЧАЛОПЕРИОДА(ДанныеПоПервомуЗаказу.Период, ДЕНЬ)) КАК ДатаПервогоЗаказа,
	//|	ДанныеНачалаАрендыЗадания.ЗаявкаНаАрендуТехники.Дата КАК ДатаЗаявки
	//|ПОМЕСТИТЬ ВТ_СрокиАренды
	//|ИЗ
	//|	РегистрСведений.пкСрокиАренды.СрезПоследних(
	//|			,
	//|			ТипДокумента = ЗНАЧЕНИЕ(Перечисление.пкТипыДокументовДляСроковАренды.ЗаявкаНаАрендуТехники)
	//|				И НЕ ЭтоОкончаниеАренды
	//|				И НЕ ЗаявкаНаАрендуТехники.ИсключитьИзУСР"
	//+ ?(ЗначениеЗаполнено(Подразделение), " И ЗаявкаНаАрендуТехники.Подразделение = &Подразделение", "")
	//+ ?(ЗначениеЗаполнено(Клиент), " И ЗаявкаНаАрендуТехники.Партнер = &Клиент", "")
	//+ ?(ЗначениеЗаполнено(ОбъектСтроительства), " И ЗаявкаНаАрендуТехники.ОбъектСтроительства = &ОбъектСтроительства", "")
	//+ ?(ЗначениеЗаполнено(Менеджер), " И ЗаявкаНаАрендуТехники.Менеджер = &Менеджер", "") + ") КАК ДанныеНачалаАрендыЗаявки	
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкСрокиАренды.СрезПоследних(
	//|				,
	//|				ЭтоОкончаниеАренды
	//|					И ТипДокумента = ЗНАЧЕНИЕ(Перечисление.пкТипыДокументовДляСроковАренды.ЗаданиеНаПеревозку)
	//|					И НЕ ЗаявкаНаАрендуТехники.ИсключитьИзУСР
	//|					И ЭтоВозврат) КАК ДанныеОкончанияАрендыЗадания
	//|		ПО (ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники = ДанныеОкончанияАрендыЗадания.ЗаявкаНаАрендуТехники)
	//|			И (ДанныеНачалаАрендыЗаявки.Модель = ДанныеОкончанияАрендыЗадания.Модель)
	//|			И (ДанныеНачалаАрендыЗаявки.НомерМодели = ДанныеОкончанияАрендыЗадания.НомерМодели)
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкСрокиАренды.СрезПоследних(
	//|				,
	//|				ЭтоОкончаниеАренды
	//|					И ТипДокумента = ЗНАЧЕНИЕ(Перечисление.пкТипыДокументовДляСроковАренды.ЗаявкаНаАрендуТехники)
	//|					И НЕ ЗаявкаНаАрендуТехники.ИсключитьИзУСР) КАК ДанныеОкончанияАренды
	//|		ПО (ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники = ДанныеОкончанияАренды.ЗаявкаНаАрендуТехники)
	//|			И (ДанныеНачалаАрендыЗаявки.Модель = ДанныеОкончанияАренды.Модель)
	//|			И (ДанныеНачалаАрендыЗаявки.НомерМодели = ДанныеОкончанияАренды.НомерМодели)
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкСрокиАренды.СрезПоследних(
	//|				,
	//|				ТипДокумента = ЗНАЧЕНИЕ(Перечисление.пкТипыДокументовДляСроковАренды.ЗаказКлиента)
	//|					И ЭтоОкончаниеАренды
	//|					И НЕ ЗаявкаНаАрендуТехники.ИсключитьИзУСР) КАК ДанныеНачалаАрендыЗаказы
	//|		ПО (ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники = ДанныеНачалаАрендыЗаказы.ЗаявкаНаАрендуТехники)
	//|			И (ДанныеНачалаАрендыЗаявки.Модель = ДанныеНачалаАрендыЗаказы.Модель)
	//|			И (ДанныеНачалаАрендыЗаявки.НомерМодели = ДанныеНачалаАрендыЗаказы.НомерМодели)
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкСрокиАренды.СрезПоследних(
	//|				,
	//|				ТипДокумента = ЗНАЧЕНИЕ(Перечисление.пкТипыДокументовДляСроковАренды.ЗаданиеНаПеревозку)
	//|					И НЕ ЭтоОкончаниеАренды
	//|					И НЕ ЗаявкаНаАрендуТехники.ИсключитьИзУСР) КАК ДанныеНачалаАрендыЗадания
	//|		ПО (ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники = ДанныеНачалаАрендыЗадания.ЗаявкаНаАрендуТехники)
	//|			И (ДанныеНачалаАрендыЗаявки.Модель = ДанныеНачалаАрендыЗадания.Модель)
	//|			И (ДанныеНачалаАрендыЗаявки.НомерМодели = ДанныеНачалаАрендыЗадания.НомерМодели)
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкСрокиАренды.СрезПервых(
	//|				,
	//|				ТипДокумента = ЗНАЧЕНИЕ(Перечисление.пкТипыДокументовДляСроковАренды.ЗаказКлиента)
	//|					И НЕ ЭтоОкончаниеАренды
	//|					И НЕ ЗаявкаНаАрендуТехники.ИсключитьИзУСР) КАК ДанныеПоПервомуЗаказу
	//|		ПО (ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники = ДанныеПоПервомуЗаказу.ЗаявкаНаАрендуТехники)
	//|			И (ДанныеНачалаАрендыЗаявки.Модель = ДанныеПоПервомуЗаказу.Модель)
	//|			И (ДанныеНачалаАрендыЗаявки.НомерМодели = ДанныеПоПервомуЗаказу.НомерМодели)
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ДанныеНачалаАрендыЗаявки.Модель,
	//|	ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники,
	//|	ДанныеНачалаАрендыЗаявки.НомерМодели,
	//|	ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники.Партнер,
	//|	ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники.Договор,
	//|	ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники.ОбъектСтроительства,
	//|	ДанныеНачалаАрендыЗадания.ЗаявкаНаАрендуТехники.Дата
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	НАЧАЛОПЕРИОДА(пкСрокиАренды.Период, ДЕНЬ) КАК Нач,
	//|	пкСрокиАренды.ЭтоОкончаниеАренды КАК ЭтоОкончаниеАренды,
	//|	ВТ_СрокиАренды.ЗаявкаНаАрендуТехники КАК ЗаявкаНаАрендуТехники,
	//|	ВТ_СрокиАренды.Модель КАК Модель,
	//|	пкСрокиАренды.НомерМодели КАК НомерМодели,
	//|	ВТ_СрокиАренды.Пометка КАК Пометка,
	//|	ВТ_СрокиАренды.Клиент КАК Клиент,
	//|	ВТ_СрокиАренды.Договор КАК Договор,
	//|	ВТ_СрокиАренды.ОбъектСтроительства КАК ОбъектСтроительства,
	//|	ВТ_СрокиАренды.Техника КАК Техника,
	//|	ВТ_СрокиАренды.ДатаНачалаАренды КАК ДатаНачалаАренды,
	//|	ВТ_СрокиАренды.ДатаОкончанияАренды КАК ДатаОкончанияАренды,
	//|	ВТ_СрокиАренды.ДатаПервогоЗаказа КАК ДатаПервогоЗаказа,
	//|	ВТ_СрокиАренды.ДатаЗаявки КАК ДатаЗаявки
	//|ПОМЕСТИТЬ НачалаАренды
	//|ИЗ
	//|	ВТ_СрокиАренды КАК ВТ_СрокиАренды
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкСрокиАренды КАК пкСрокиАренды
	//|		ПО ВТ_СрокиАренды.ЗаявкаНаАрендуТехники = пкСрокиАренды.ЗаявкаНаАрендуТехники
	//|			И ВТ_СрокиАренды.Модель = пкСрокиАренды.Модель
	//|			И ВТ_СрокиАренды.НомерМодели = пкСрокиАренды.НомерМодели
	//|ГДЕ
	//|	пкСрокиАренды.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.пкТипыДокументовДляСроковАренды.ЗаказКлиента)
	//|	И НЕ пкСрокиАренды.ЗаявкаНаАрендуТехники.ИсключитьИзУСР
	//|	И пкСрокиАренды.ЭтоОкончаниеАренды = ЛОЖЬ
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	пкСрокиАренды.Период КАК Кон,
	//|	пкСрокиАренды.ЭтоОкончаниеАренды КАК ЭтоОкончаниеАренды,
	//|	ВТ_СрокиАренды.ЗаявкаНаАрендуТехники КАК ЗаявкаНаАрендуТехники,
	//|	ВТ_СрокиАренды.Модель КАК Модель,
	//|	пкСрокиАренды.НомерМодели КАК НомерМодели
	//|ПОМЕСТИТЬ ОкончаниеАренды
	//|ИЗ
	//|	ВТ_СрокиАренды КАК ВТ_СрокиАренды
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкСрокиАренды КАК пкСрокиАренды
	//|		ПО ВТ_СрокиАренды.ЗаявкаНаАрендуТехники = пкСрокиАренды.ЗаявкаНаАрендуТехники
	//|			И ВТ_СрокиАренды.Модель = пкСрокиАренды.Модель
	//|			И ВТ_СрокиАренды.НомерМодели = пкСрокиАренды.НомерМодели
	//|ГДЕ
	//|	пкСрокиАренды.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.пкТипыДокументовДляСроковАренды.ЗаказКлиента)
	//|	И НЕ пкСрокиАренды.ЗаявкаНаАрендуТехники.ИсключитьИзУСР
	//|	И пкСрокиАренды.ЭтоОкончаниеАренды = ИСТИНА
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	МАКСИМУМ(НачалаАренды.Нач) КАК Нач,
	//|	ОкончаниеАренды.Кон КАК Кон,
	//|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НачалаАренды.Нач) КАК Нач1,
	//|	НачалаАренды.ЗаявкаНаАрендуТехники КАК ЗаявкаНаАрендуТехники,
	//|	НачалаАренды.Модель КАК Модель,
	//|	НачалаАренды.НомерМодели КАК НомерМодели,
	//|	НачалаАренды.Пометка КАК Пометка,
	//|	НачалаАренды.Клиент КАК Клиент,
	//|	НачалаАренды.Договор КАК Договор,
	//|	НачалаАренды.ОбъектСтроительства КАК ОбъектСтроительства,
	//|	НачалаАренды.Техника КАК Техника,
	//|	НачалаАренды.ДатаНачалаАренды КАК ДатаНачалаАренды,
	//|	НачалаАренды.ДатаОкончанияАренды КАК ДатаОкончанияАренды,
	//|	НачалаАренды.ДатаПервогоЗаказа КАК ДатаПервогоЗаказа,
	//|	НачалаАренды.ДатаЗаявки КАК ДатаЗаявки
	//|ПОМЕСТИТЬ Интервалы
	//|ИЗ
	//|	НачалаАренды КАК НачалаАренды
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ОкончаниеАренды КАК ОкончаниеАренды
	//|		ПО НачалаАренды.ЗаявкаНаАрендуТехники = ОкончаниеАренды.ЗаявкаНаАрендуТехники
	//|			И НачалаАренды.Модель = ОкончаниеАренды.Модель
	//|			И НачалаАренды.НомерМодели = ОкончаниеАренды.НомерМодели
	//|			И НачалаАренды.Нач < ОкончаниеАренды.Кон
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ОкончаниеАренды.Кон,
	//|	НачалаАренды.ЗаявкаНаАрендуТехники,
	//|	НачалаАренды.Модель,
	//|	НачалаАренды.НомерМодели,
	//|	НачалаАренды.Пометка,
	//|	НачалаАренды.Клиент,
	//|	НачалаАренды.Договор,
	//|	НачалаАренды.ОбъектСтроительства,
	//|	НачалаАренды.Техника,
	//|	НачалаАренды.ДатаНачалаАренды,
	//|	НачалаАренды.ДатаОкончанияАренды,
	//|	НачалаАренды.ДатаПервогоЗаказа,
	//|	НачалаАренды.ДатаЗаявки
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	Интервалы.ЗаявкаНаАрендуТехники КАК ЗаявкаНаАрендуТехники,
	//|	Интервалы.Модель КАК Модель,
	//|	Интервалы.НомерМодели КАК НомерМодели,
	//|	Интервалы.Кон КАК ДатаНачалаПоСчету,
	//|	ВЫБОР
	//|		КОГДА ДОБАВИТЬКДАТЕ(Интервалы2.Нач, ДЕНЬ, -1) > КОНЕЦПЕРИОДА(&ДатаСчетов, ДЕНЬ)
	//|			ТОГДА КОНЕЦПЕРИОДА(&ДатаСчетов, ДЕНЬ)
	//|		ИНАЧЕ ДОБАВИТЬКДАТЕ(Интервалы2.Нач, ДЕНЬ, -1)
	//|	КОНЕЦ КАК ДатаОкончанияПоСчету,
	//|	Интервалы.Пометка КАК Пометка,
	//|	Интервалы.Клиент КАК Клиент,
	//|	Интервалы.Договор КАК Договор,
	//|	Интервалы.ОбъектСтроительства КАК ОбъектСтроительства,
	//|	Интервалы.Техника КАК Техника,
	//|	Интервалы.ДатаНачалаАренды КАК ДатаНачалаАренды,
	//|	Интервалы.ДатаОкончанияАренды КАК ДатаОкончанияАренды,
	//|	Интервалы.ДатаПервогоЗаказа КАК ДатаПервогоЗаказа,
	//|	Интервалы.ДатаЗаявки КАК ДатаЗаявки
	//|ИЗ
	//|	Интервалы КАК Интервалы
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Интервалы КАК Интервалы2
	//|		ПО (Интервалы2.Нач <> Интервалы.Кон)
	//|			И (Интервалы2.Нач1 - Интервалы.Нач1 = 1)
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	ВТ_СрокиАренды.ЗаявкаНаАрендуТехники,
	//|	ВТ_СрокиАренды.Модель,
	//|	ВТ_СрокиАренды.НомерМодели,
	//|	ВТ_СрокиАренды.ДатаНачалаПоСчету,
	//|	ВЫБОР
	//|		КОГДА ВТ_СрокиАренды.ДатаОкончанияПоСчету > КОНЕЦПЕРИОДА(&ДатаСчетов, ДЕНЬ)
	//|				И &ДатаСчетов <> &ПустаяДата
	//|			ТОГДА КОНЕЦПЕРИОДА(&ДатаСчетов, ДЕНЬ)
	//|		ИНАЧЕ ВТ_СрокиАренды.ДатаОкончанияПоСчету
	//|	КОНЕЦ,
	//|	ВТ_СрокиАренды.Пометка,
	//|	ВТ_СрокиАренды.Клиент,
	//|	ВТ_СрокиАренды.Договор,
	//|	ВТ_СрокиАренды.ОбъектСтроительства,
	//|	ВТ_СрокиАренды.Техника,
	//|	ВТ_СрокиАренды.ДатаНачалаАренды,
	//|	ВТ_СрокиАренды.ДатаОкончанияАренды,
	//|	ВТ_СрокиАренды.ДатаПервогоЗаказа,
	//|	ВТ_СрокиАренды.ДатаЗаявки
	//|ИЗ
	//|	ВТ_СрокиАренды КАК ВТ_СрокиАренды
	//|ГДЕ
	//|	ВТ_СрокиАренды.ДатаНачалаПоСчету < ВЫБОР
	//|			КОГДА ВТ_СрокиАренды.ДатаОкончанияПоСчету > КОНЕЦПЕРИОДА(&ДатаСчетов, ДЕНЬ)
	//|					И &ДатаСчетов <> &ПустаяДата
	//|				ТОГДА КОНЕЦПЕРИОДА(&ДатаСчетов, ДЕНЬ)
	//|			ИНАЧЕ ВТ_СрокиАренды.ДатаОкончанияПоСчету
	//|		КОНЕЦ
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	ВТ_СрокиАренды.ЗаявкаНаАрендуТехники,
	//|	ВТ_СрокиАренды.Модель,
	//|	ВТ_СрокиАренды.НомерМодели,
	//|	ВТ_СрокиАренды.ДатаНачалаАренды,
	//|	ДОБАВИТЬКДАТЕ(ВТ_СрокиАренды.ДатаПервогоЗаказа, ДЕНЬ, -1),
	//|	ВТ_СрокиАренды.Пометка,
	//|	ВТ_СрокиАренды.Клиент,
	//|	ВТ_СрокиАренды.Договор,
	//|	ВТ_СрокиАренды.ОбъектСтроительства,
	//|	ВТ_СрокиАренды.Техника,
	//|	ВТ_СрокиАренды.ДатаНачалаАренды,
	//|	ВТ_СрокиАренды.ДатаОкончанияАренды,
	//|	ВТ_СрокиАренды.ДатаПервогоЗаказа,
	//|	ВТ_СрокиАренды.ДатаЗаявки
	//|ИЗ
	//|	ВТ_СрокиАренды КАК ВТ_СрокиАренды
	//|ГДЕ
	//|	РАЗНОСТЬДАТ(ВТ_СрокиАренды.ДатаПервогоЗаказа, ВТ_СрокиАренды.ДатаНачалаАренды, ДЕНЬ) > 2
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	ДатаЗаявки,
	//|	НомерМодели
	//|ИТОГИ ПО
	//|	ЗаявкаНаАрендуТехники";
	
		"ВЫБРАТЬ
		|	ИСТИНА КАК Пометка,
		|	ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники КАК ЗаявкаНаАрендуТехники,
		|	ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники.Партнер КАК Клиент,
		|	ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники.Договор КАК Договор,
		|	ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники.ОбъектСтроительства КАК ОбъектСтроительства,
		|	ДанныеНачалаАрендыЗаявки.Модель КАК Модель,
		|	МАКСИМУМ(ЕСТЬNULL(ЕСТЬNULL(ЕСТЬNULL(ДанныеНачалаАрендыЗадания.Техника, ДанныеОкончанияАрендыЗадания.Техника), ДанныеНачалаАрендыЗаказы.Техника), ДанныеНачалаАрендыЗаявки.Техника)) КАК Техника,
		|	МАКСИМУМ(ЕСТЬNULL(ДанныеНачалаАрендыЗаказы.Период, ЕСТЬNULL(ДанныеНачалаАрендыЗадания.Период, ДанныеНачалаАрендыЗаявки.Период))) КАК ДатаНачалаПоСчету,
		|	МАКСИМУМ(ЕСТЬNULL(ЕСТЬNULL(ДанныеОкончанияАрендыЗадания.Период, ДанныеОкончанияАренды.Период), КОНЕЦПЕРИОДА(ЕСТЬNULL(ДанныеНачалаАрендыЗаказы.Период, ДанныеНачалаАрендыЗаявки.Период), МЕСЯЦ))) КАК ДатаОкончанияПоСчету,
		|	МАКСИМУМ(ДанныеНачалаАрендыЗаявки.Период) КАК ДатаНачалаАренды,
		|	МАКСИМУМ(ДанныеОкончанияАренды.Период) КАК ДатаОкончанияАренды,
		|	ДанныеНачалаАрендыЗаявки.НомерМодели КАК НомерМодели,
		|	ЗаказКлиентаТовары.пкЗамененнаяМодель КАК пкЗамененнаяМодель
		|ПОМЕСТИТЬ ВТ_СрокиАренды
		|ИЗ
		|	РегистрСведений.пкСрокиАренды.СрезПоследних(
		|			,
		|			ТипДокумента = ЗНАЧЕНИЕ(Перечисление.пкТипыДокументовДляСроковАренды.ЗаявкаНаАрендуТехники)
		|				И НЕ ЭтоОкончаниеАренды
		|				И НЕ ЗаявкаНаАрендуТехники.ИсключитьИзУСР"
	+ ?(ЗначениеЗаполнено(Подразделение), " И ЗаявкаНаАрендуТехники.Подразделение = &Подразделение", "")
	+ ?(ЗначениеЗаполнено(Клиент), " И ЗаявкаНаАрендуТехники.Партнер = &Клиент", "")
	+ ?(ЗначениеЗаполнено(ОбъектСтроительства), " И ЗаявкаНаАрендуТехники.ОбъектСтроительства = &ОбъектСтроительства", "")
	+ ?(ЗначениеЗаполнено(Менеджер), " И ЗаявкаНаАрендуТехники.Менеджер = &Менеджер", "") + ") КАК ДанныеНачалаАрендыЗаявки	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкСрокиАренды.СрезПоследних(
		|				,
		|				ЭтоОкончаниеАренды
		|					И ТипДокумента = ЗНАЧЕНИЕ(Перечисление.пкТипыДокументовДляСроковАренды.ЗаданиеНаПеревозку)
		|					И НЕ ЗаявкаНаАрендуТехники.ИсключитьИзУСР
		|					И ЭтоВозврат) КАК ДанныеОкончанияАрендыЗадания
		|		ПО ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники = ДанныеОкончанияАрендыЗадания.ЗаявкаНаАрендуТехники
		|			И ДанныеНачалаАрендыЗаявки.Модель = ДанныеОкончанияАрендыЗадания.Модель
		|			И ДанныеНачалаАрендыЗаявки.НомерМодели = ДанныеОкончанияАрендыЗадания.НомерМодели
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкСрокиАренды.СрезПоследних(
		|				,
		|				ЭтоОкончаниеАренды
		|					И ТипДокумента = ЗНАЧЕНИЕ(Перечисление.пкТипыДокументовДляСроковАренды.ЗаявкаНаАрендуТехники)
		|					И НЕ ЗаявкаНаАрендуТехники.ИсключитьИзУСР) КАК ДанныеОкончанияАренды
		|		ПО ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники = ДанныеОкончанияАренды.ЗаявкаНаАрендуТехники
		|			И ДанныеНачалаАрендыЗаявки.Модель = ДанныеОкончанияАренды.Модель
		|			И ДанныеНачалаАрендыЗаявки.НомерМодели = ДанныеОкончанияАренды.НомерМодели
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкСрокиАренды.СрезПоследних(
		|				,
		|				ТипДокумента = ЗНАЧЕНИЕ(Перечисление.пкТипыДокументовДляСроковАренды.ЗаказКлиента)
		|					И ЭтоОкончаниеАренды
		|					И НЕ ЗаявкаНаАрендуТехники.ИсключитьИзУСР) КАК ДанныеНачалаАрендыЗаказы
		|		ПО ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники = ДанныеНачалаАрендыЗаказы.ЗаявкаНаАрендуТехники
		|			И ДанныеНачалаАрендыЗаявки.Модель = ДанныеНачалаАрендыЗаказы.Модель
		|			И ДанныеНачалаАрендыЗаявки.НомерМодели = ДанныеНачалаАрендыЗаказы.НомерМодели
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкСрокиАренды.СрезПоследних(
		|				,
		|				ТипДокумента = ЗНАЧЕНИЕ(Перечисление.пкТипыДокументовДляСроковАренды.ЗаданиеНаПеревозку)
		|					И НЕ ЭтоОкончаниеАренды
		|					И НЕ ЗаявкаНаАрендуТехники.ИсключитьИзУСР) КАК ДанныеНачалаАрендыЗадания
		|		ПО ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники = ДанныеНачалаАрендыЗадания.ЗаявкаНаАрендуТехники
		|			И ДанныеНачалаАрендыЗаявки.Модель = ДанныеНачалаАрендыЗадания.Модель
		|			И ДанныеНачалаАрендыЗаявки.НомерМодели = ДанныеНачалаАрендыЗадания.НомерМодели
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		|		ПО ДанныеНачалаАрендыЗаявки.ЗаказКлиента = ЗаказКлиентаТовары.Ссылка
		|			И ДанныеНачалаАрендыЗаявки.Модель = ЗаказКлиентаТовары.Номенклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеНачалаАрендыЗаявки.Модель,
		|	ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники,
		|	ДанныеНачалаАрендыЗаявки.НомерМодели,
		|	ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники.Партнер,
		|	ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники.Договор,
		|	ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники.ОбъектСтроительства,
		|	ЗаказКлиентаТовары.пкЗамененнаяМодель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СрокиАренды.Пометка КАК Пометка,
		|	ВТ_СрокиАренды.ЗаявкаНаАрендуТехники КАК ЗаявкаНаАрендуТехники,
		|	ВТ_СрокиАренды.Клиент КАК Клиент,
		|	ВТ_СрокиАренды.Договор КАК Договор,
		|	ВТ_СрокиАренды.ОбъектСтроительства КАК ОбъектСтроительства,
		|	ВТ_СрокиАренды.Модель КАК Модель,
		|	ВТ_СрокиАренды.Техника КАК Техника,
		|	ВЫБОР
		|		КОГДА ВТ_СрокиАренды.ДатаНачалаПоСчету >= &ДатаЗапускаСистемы
		|			ТОГДА ВТ_СрокиАренды.ДатаНачалаПоСчету
		|		ИНАЧЕ &ДатаЗапускаСистемы
		|	КОНЕЦ КАК ДатаНачалаПоСчету,
		|	ВЫБОР
		|		КОГДА ВТ_СрокиАренды.ДатаОкончанияПоСчету > КОНЕЦПЕРИОДА(&ДатаСчетов, ДЕНЬ)
		|				И &ДатаСчетов <> &ПустаяДата
		|			ТОГДА КОНЕЦПЕРИОДА(&ДатаСчетов, ДЕНЬ)
		|		ИНАЧЕ ВТ_СрокиАренды.ДатаОкончанияПоСчету
		|	КОНЕЦ КАК ДатаОкончанияПоСчету,
		|	ВТ_СрокиАренды.ДатаНачалаАренды КАК ДатаНачалаАренды,
		|	ВТ_СрокиАренды.ДатаОкончанияАренды КАК ДатаОкончанияАренды,
		|	пкКомментарииПоЗаявке.Комментарий КАК Комментарий,
		|	пкКомментарииПоЗаявке.Примечание КАК Примечание,
		|	пкКомментарииПоЗаявке.Паспорт КАК Паспорт,
		|	пкКомментарииПоЗаявке.ВахтенныйЖурнал КАК ВахтенныйЖурнал,
		|	ВТ_СрокиАренды.НомерМодели КАК НомерМодели,
		|	ВТ_СрокиАренды.пкЗамененнаяМодель КАК пкЗамененнаяМодель
		|ИЗ
		|	ВТ_СрокиАренды КАК ВТ_СрокиАренды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкКомментарииПоЗаявке КАК пкКомментарииПоЗаявке
		|		ПО ВТ_СрокиАренды.ЗаявкаНаАрендуТехники = пкКомментарииПоЗаявке.ЗаявкаНаАрендуТехники
		|			И ВТ_СрокиАренды.Техника = пкКомментарииПоЗаявке.Техника
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ВТ_СрокиАренды.ДатаНачалаПоСчету >= &ДатаЗапускаСистемы
		|				ТОГДА ВТ_СрокиАренды.ДатаНачалаПоСчету
		|			ИНАЧЕ &ДатаЗапускаСистемы
		|		КОНЕЦ < ВЫБОР
		|			КОГДА ВТ_СрокиАренды.ДатаОкончанияПоСчету > КОНЕЦПЕРИОДА(&ДатаСчетов, ДЕНЬ)
		|					И &ДатаСчетов <> &ПустаяДата
		|				ТОГДА КОНЕЦПЕРИОДА(&ДатаСчетов, ДЕНЬ)
		|			ИНАЧЕ ВТ_СрокиАренды.ДатаОкончанияПоСчету
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_СрокиАренды.ЗаявкаНаАрендуТехники.Дата,
		|	ВТ_СрокиАренды.ЗаявкаНаАрендуТехники.Номер
		|ИТОГИ ПО
		|	ЗаявкаНаАрендуТехники";
	
	//"ВЫБРАТЬ
	//|	ИСТИНА КАК Пометка,
	//|	ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники КАК ЗаявкаНаАрендуТехники,
	//|	ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники.Партнер КАК Клиент,
	//|	ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники.Договор КАК Договор,
	//|	ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники.ОбъектСтроительства КАК ОбъектСтроительства,
	//|	ДанныеНачалаАрендыЗаявки.Модель КАК Модель,
	//|	МАКСИМУМ(ЕСТЬNULL(ЕСТЬNULL(ЕСТЬNULL(ДанныеНачалаАрендыЗадания.Техника, ДанныеОкончанияАрендыЗадания.Техника), ДанныеНачалаАрендыЗаказы.Техника), ДанныеНачалаАрендыЗаявки.Техника)) КАК Техника,
	//|	МАКСИМУМ(ЕСТЬNULL(ДанныеНачалаАрендыЗаказы.Период, ЕСТЬNULL(ДанныеНачалаАрендыЗадания.Период, ДанныеНачалаАрендыЗаявки.Период))) КАК ДатаНачалаПоСчету,
	//|	МАКСИМУМ(ЕСТЬNULL(ЕСТЬNULL(ДанныеОкончанияАрендыЗадания.Период, ДанныеОкончанияАренды.Период), КОНЕЦПЕРИОДА(ЕСТЬNULL(ДанныеНачалаАрендыЗаказы.Период, ДанныеНачалаАрендыЗаявки.Период), МЕСЯЦ))) КАК ДатаОкончанияПоСчету,
	//|	МАКСИМУМ(ДанныеНачалаАрендыЗаявки.Период) КАК ДатаНачалаАренды,
	//|	МАКСИМУМ(ДанныеОкончанияАренды.Период) КАК ДатаОкончанияАренды,
	//|	ДанныеНачалаАрендыЗаявки.НомерМодели КАК НомерМодели,
	//|	МИНИМУМ(НАЧАЛОПЕРИОДА(ДанныеПоПервомуЗаказу.Период, ДЕНЬ)) КАК ДатаПервогоЗаказа
	//|ПОМЕСТИТЬ ВТ_СрокиАренды
	//|ИЗ
	//|	РегистрСведений.пкСрокиАренды.СрезПоследних(
	//|			,
	//|			ТипДокумента = ЗНАЧЕНИЕ(Перечисление.пкТипыДокументовДляСроковАренды.ЗаявкаНаАрендуТехники)
	//|				И НЕ ЭтоОкончаниеАренды
	//|				И НЕ ЗаявкаНаАрендуТехники.ИсключитьИзУСР"
	//+ ?(ЗначениеЗаполнено(Подразделение), " И ЗаявкаНаАрендуТехники.Подразделение = &Подразделение", "")
	//+ ?(ЗначениеЗаполнено(Клиент), " И ЗаявкаНаАрендуТехники.Партнер = &Клиент", "")
	//+ ?(ЗначениеЗаполнено(ОбъектСтроительства), " И ЗаявкаНаАрендуТехники.ОбъектСтроительства = &ОбъектСтроительства", "")
	//+ ?(ЗначениеЗаполнено(Менеджер), " И ЗаявкаНаАрендуТехники.Менеджер = &Менеджер", "") + ") КАК ДанныеНачалаАрендыЗаявки	
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкСрокиАренды.СрезПоследних(
	//|				,
	//|				ЭтоОкончаниеАренды
	//|					И ТипДокумента = ЗНАЧЕНИЕ(Перечисление.пкТипыДокументовДляСроковАренды.ЗаданиеНаПеревозку)
	//|					И НЕ ЗаявкаНаАрендуТехники.ИсключитьИзУСР
	//|					И ЭтоВозврат) КАК ДанныеОкончанияАрендыЗадания
	//|		ПО (ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники = ДанныеОкончанияАрендыЗадания.ЗаявкаНаАрендуТехники)
	//|			И (ДанныеНачалаАрендыЗаявки.Модель = ДанныеОкончанияАрендыЗадания.Модель)
	//|			И (ДанныеНачалаАрендыЗаявки.НомерМодели = ДанныеОкончанияАрендыЗадания.НомерМодели)
	//|			И (ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники = ДанныеОкончанияАрендыЗадания.ЗаявкаНаАрендуТехники)
	//|			И (ДанныеНачалаАрендыЗаявки.Модель = ДанныеОкончанияАрендыЗадания.Модель)
	//|			И (ДанныеНачалаАрендыЗаявки.НомерМодели = ДанныеОкончанияАрендыЗадания.НомерМодели)
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкСрокиАренды.СрезПоследних(
	//|				,
	//|				ЭтоОкончаниеАренды
	//|					И ТипДокумента = ЗНАЧЕНИЕ(Перечисление.пкТипыДокументовДляСроковАренды.ЗаявкаНаАрендуТехники)
	//|					И НЕ ЗаявкаНаАрендуТехники.ИсключитьИзУСР) КАК ДанныеОкончанияАренды
	//|		ПО (ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники = ДанныеОкончанияАренды.ЗаявкаНаАрендуТехники)
	//|			И (ДанныеНачалаАрендыЗаявки.Модель = ДанныеОкончанияАренды.Модель)
	//|			И (ДанныеНачалаАрендыЗаявки.НомерМодели = ДанныеОкончанияАренды.НомерМодели)
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкСрокиАренды.СрезПоследних(
	//|				,
	//|				ТипДокумента = ЗНАЧЕНИЕ(Перечисление.пкТипыДокументовДляСроковАренды.ЗаказКлиента)
	//|					И ЭтоОкончаниеАренды
	//|					И НЕ ЗаявкаНаАрендуТехники.ИсключитьИзУСР) КАК ДанныеНачалаАрендыЗаказы
	//|		ПО (ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники = ДанныеНачалаАрендыЗаказы.ЗаявкаНаАрендуТехники)
	//|			И (ДанныеНачалаАрендыЗаявки.Модель = ДанныеНачалаАрендыЗаказы.Модель)
	//|			И (ДанныеНачалаАрендыЗаявки.НомерМодели = ДанныеНачалаАрендыЗаказы.НомерМодели)
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкСрокиАренды.СрезПоследних(
	//|				,
	//|				ТипДокумента = ЗНАЧЕНИЕ(Перечисление.пкТипыДокументовДляСроковАренды.ЗаданиеНаПеревозку)
	//|					И НЕ ЭтоОкончаниеАренды
	//|					И НЕ ЗаявкаНаАрендуТехники.ИсключитьИзУСР) КАК ДанныеНачалаАрендыЗадания
	//|		ПО (ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники = ДанныеНачалаАрендыЗадания.ЗаявкаНаАрендуТехники)
	//|			И (ДанныеНачалаАрендыЗаявки.Модель = ДанныеНачалаАрендыЗадания.Модель)
	//|			И (ДанныеНачалаАрендыЗаявки.НомерМодели = ДанныеНачалаАрендыЗадания.НомерМодели)
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкСрокиАренды.СрезПервых(
	//|				,
	//|				ТипДокумента = ЗНАЧЕНИЕ(Перечисление.пкТипыДокументовДляСроковАренды.ЗаказКлиента)
	//|					И НЕ ЭтоОкончаниеАренды
	//|					И НЕ ЗаявкаНаАрендуТехники.ИсключитьИзУСР) КАК ДанныеПоПервомуЗаказу
	//|		ПО (ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники = ДанныеПоПервомуЗаказу.ЗаявкаНаАрендуТехники)
	//|			И (ДанныеНачалаАрендыЗаявки.Модель = ДанныеПоПервомуЗаказу.Модель)
	//|			И (ДанныеНачалаАрендыЗаявки.НомерМодели = ДанныеПоПервомуЗаказу.НомерМодели)
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ДанныеНачалаАрендыЗаявки.Модель,
	//|	ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники,
	//|	ДанныеНачалаАрендыЗаявки.НомерМодели,
	//|	ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники.Партнер,
	//|	ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники.Договор,
	//|	ДанныеНачалаАрендыЗаявки.ЗаявкаНаАрендуТехники.ОбъектСтроительства
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТ_СрокиАренды.Пометка КАК Пометка,
	//|	ВТ_СрокиАренды.ЗаявкаНаАрендуТехники КАК ЗаявкаНаАрендуТехники,
	//|	ВТ_СрокиАренды.Клиент КАК Клиент,
	//|	ВТ_СрокиАренды.Договор КАК Договор,
	//|	ВТ_СрокиАренды.ОбъектСтроительства КАК ОбъектСтроительства,
	//|	ВТ_СрокиАренды.Модель КАК Модель,
	//|	ВТ_СрокиАренды.Техника КАК Техника,
	//|	ВЫБОР
	//|	КОГДА ВТ_СрокиАренды.ДатаПервогоЗаказа <> &ПустаяДата
	//|			И РАЗНОСТЬДАТ(ВТ_СрокиАренды.ДатаНачалаАренды, ВТ_СрокиАренды.ДатаПервогоЗаказа, ДЕНЬ) > 1
	//|		ТОГДА ВТ_СрокиАренды.ДатаНачалаАренды
	//|	ИНАЧЕ ВТ_СрокиАренды.ДатаНачалаПоСчету
	//|	КОНЕЦ КАК ДатаНачалаПоСчету,
	//|ВЫБОР
	//|	КОГДА ВТ_СрокиАренды.ДатаОкончанияПоСчету > КОНЕЦПЕРИОДА(&ДатаСчетов, ДЕНЬ)
	//|			И ЕстьNull(ВТ_СрокиАренды.ДатаПервогоЗаказа,ВТ_СрокиАренды.ДатаНачалаПоСчету) > КОНЕЦПЕРИОДА(&ДатаСчетов, ДЕНЬ)
	//|			И &ДатаСчетов <> &ПустаяДата
	//|		ТОГДА КОНЕЦПЕРИОДА(&ДатаСчетов, ДЕНЬ)
	//|	ИНАЧЕ ВЫБОР
	//|			КОГДА ВТ_СрокиАренды.ДатаПервогоЗаказа <> &ПустаяДата
	//|					И РАЗНОСТЬДАТ(ВТ_СрокиАренды.ДатаНачалаАренды, ВТ_СрокиАренды.ДатаПервогоЗаказа, ДЕНЬ) > 1
	//|				ТОГДА ДОБАВИТЬКДАТЕ(ВТ_СрокиАренды.ДатаПервогоЗаказа, СЕКУНДА, -1)
	//|			ИНАЧЕ ВТ_СрокиАренды.ДатаОкончанияПоСчету
	//|		КОНЕЦ
	//|КОНЕЦ КАК ДатаОкончанияПоСчету,
	//|	ВТ_СрокиАренды.ДатаНачалаАренды КАК ДатаНачалаАренды,
	//|	ВТ_СрокиАренды.ДатаОкончанияАренды КАК ДатаОкончанияАренды,
	//|	пкКомментарииПоЗаявке.Комментарий КАК Комментарий,
	//|	пкКомментарииПоЗаявке.Примечание КАК Примечание,
	//|	пкКомментарииПоЗаявке.Паспорт КАК Паспорт,
	//|	пкКомментарииПоЗаявке.ВахтенныйЖурнал КАК ВахтенныйЖурнал,
	//|	ВТ_СрокиАренды.НомерМодели КАК НомерМодели
	//|ИЗ
	//|	ВТ_СрокиАренды КАК ВТ_СрокиАренды
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкКомментарииПоЗаявке КАК пкКомментарииПоЗаявке
	//|		ПО ВТ_СрокиАренды.ЗаявкаНаАрендуТехники = пкКомментарииПоЗаявке.ЗаявкаНаАрендуТехники
	//|			И ВТ_СрокиАренды.Техника = пкКомментарииПоЗаявке.Техника
	//|ГДЕ
	//|			ВТ_СрокиАренды.ДатаНачалаПоСчету < ВЫБОР
	//|			КОГДА ВТ_СрокиАренды.ДатаОкончанияПоСчету > КОНЕЦПЕРИОДА(&ДатаСчетов, ДЕНЬ)				
	//|					И &ДатаСчетов <> &ПустаяДата
	//|				ТОГДА КОНЕЦПЕРИОДА(&ДатаСчетов, ДЕНЬ)
	//|			ИНАЧЕ ВТ_СрокиАренды.ДатаОкончанияПоСчету
	//|		КОНЕЦ
	//|	ИЛИ РАЗНОСТЬДАТ(ВТ_СрокиАренды.ДатаНачалаАренды, ВТ_СрокиАренды.ДатаПервогоЗаказа, ДЕНЬ) > 1
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	ВТ_СрокиАренды.ЗаявкаНаАрендуТехники.Дата,
	//|	ВТ_СрокиАренды.ЗаявкаНаАрендуТехники.Номер
	//|ИТОГИ ПО
	//|	ЗаявкаНаАрендуТехники";
	
	Запрос.УстановитьПараметр("Подразделение",       Подразделение);
	Запрос.УстановитьПараметр("Клиент",              Клиент);
	Запрос.УстановитьПараметр("ОбъектСтроительства", ОбъектСтроительства);
	Запрос.УстановитьПараметр("Менеджер",            Менеджер);
	Запрос.УстановитьПараметр("ДатаСчетов",          ДатаСчетов);
	Запрос.УстановитьПараметр("ПустаяДата",			 '00010101');
	//Рарус Владимир Подрезов 06.06.2017
	УстановитьПривилегированныйРежим(Истина);
	Запрос.УстановитьПараметр("ДатаЗапускаСистемы",	 Константы.пкДатаЗапускаСистемы.Получить());
	УстановитьПривилегированныйРежим(Ложь);
	//Рарус Владимир Подрезов Конец
	
	ВыборкаЗаявки = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Заявки = ЗаявкиНаАрендуТехники.ПолучитьЭлементы(); 
	Заявки.Очистить();
	
	Пока ВыборкаЗаявки.Следующий() Цикл
		СтрокаЗаявки = Заявки.Добавить();    
		СтрокаЗаявки.ЗаявкаНаАрендуТехники = ВыборкаЗаявки.ЗаявкаНаАрендуТехники;
		СтрокаЗаявки.Клиент                = ВыборкаЗаявки.ЗаявкаНаАрендуТехники.Партнер;
		СтрокаЗаявки.Договор               = ВыборкаЗаявки.ЗаявкаНаАрендуТехники.Договор;
		СтрокаЗаявки.ОбъектСтроительства   = ВыборкаЗаявки.ЗаявкаНаАрендуТехники.ОбъектСтроительства;
		
		СтрокаЗаявки.Пометка               = Истина;
		
		Выборка = ВыборкаЗаявки.Выбрать();
		
		ДанныеПоЗаявкам = СтрокаЗаявки.ПолучитьЭлементы();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ДанныеПоЗаявкам.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.пкЗамененнаяМодель = ОпределитьЗамененнуюМодель(СтрокаЗаявки.ЗаявкаНаАрендуТехники, Выборка.Модель);
			НоваяСтрока.Количество = (КонецДня(НоваяСтрока.ДатаОкончанияПоСчету) + 1 - НачалоДня(НоваяСтрока.ДатаНачалаПоСчету)) / (3600 * 24);
		КонецЦикла;    
	КонецЦикла;    
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
    
    ЗаполнитьНаСервере();
//Рарус Владимир Подрезов 28.09.2017
	Если Объект.РазворачиватьФормирования Тогда
		Для Каждого текСтрока Из ЗаявкиНаАрендуТехники.ПолучитьЭлементы() Цикл
	    	Элементы.ЗаявкиНаАрендуТехники.Развернуть(текСтрока.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
	КонецЕсли;
//Рарус Владимир Подрезов Конец
КонецПроцедуры

&НаСервере
Процедура СформироватьСчетаНаСервере()
    
    Для Каждого Строка ИЗ ЗаказыКлиентов Цикл
        ЗаказКлиента = Строка.ЗаказКлиента.ПолучитьОбъект();
        ЗаказКлиента.Удалить();
    КонецЦикла;   
    
    ЗаказыКлиентов.Очистить();
    
    СтруктураДействий = Новый Структура();
    
    СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
    СтруктураДействий.Вставить("ПересчитатьСумму");
    
    СтруктураПолейТЧ = Новый Структура;
    СтруктураПолейТЧ.Вставить("Номенклатура");
    СтруктураПолейТЧ.Вставить("Характеристика");
    СтруктураПолейТЧ.Вставить("ВидЦены");
    СтруктураПолейТЧ.Вставить("Упаковка");
    СтруктураПолейТЧ.Вставить("Цена", 0);
    СтруктураПолейТЧ.Вставить("КоличествоУпаковок", 0);
    СтруктураПолейТЧ.Вставить("Количество", 0);
    СтруктураПолейТЧ.Вставить("пкЗаявкаНаАрендуТехники");
    СтруктураПолейТЧ.Вставить("пкТехника");
    СтруктураПолейТЧ.Вставить("пкВидТарифа");
    СтруктураПолейТЧ.Вставить("Сумма"    , 0);
    СтруктураПолейТЧ.Вставить("СтавкаНДС", 0);
    СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
    СтруктураПолейТЧ.Вставить("СуммаСНДС", 0);
	СтруктураПолейТЧ.Вставить("пкЗамененнаяМодель");
    
    Дата = пкОбщегоНазначенияСервер.ПолучитьРабочуюДатуПользователя(Пользователи.ТекущийПользователь());
    
    Если Дата = Неопределено Тогда
        Дата = ТекущаяДата();    
    КонецЕсли;    

    Если ФормироватьОтдельныеСчета Тогда
        ТаблицаЗаявокНаАрендуТехники = Новый ТаблицаЗначений();
        ТаблицаЗаявокНаАрендуТехники.Колонки.Добавить("ЗаявкаНаАрендуТехники", Новый ОписаниеТипов("ДокументСсылка.пкЗаявкаНаАрендуТехники"));
        
        Заявки = ЗаявкиНаАрендуТехники.ПолучитьЭлементы();
        
        Для Каждого СтрокаЗаявки ИЗ Заявки Цикл
            Если СтрокаЗаявки.Пометка Тогда
                СтрокаДанныеЗаявок = СтрокаЗаявки.ПолучитьЭлементы();
            
                Для Каждого Строка ИЗ СтрокаДанныеЗаявок Цикл
                    Если Строка.Пометка Тогда
                        НоваяСтрока = ТаблицаЗаявокНаАрендуТехники.Добавить();
                    
                        ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
                    КонецЕсли;
                КонецЦикла;  
            КонецЕсли;
        КонецЦикла;    
        
        ТаблицаЗаявокНаАрендуТехники.Свернуть("ЗаявкаНаАрендуТехники");
        
        Для Каждого Строка ИЗ ТаблицаЗаявокНаАрендуТехники Цикл
            
            ЗаказКлиента = Документы.ЗаказКлиента.СоздатьДокумент();
            ЗаказКлиента.Заполнить(Строка.ЗаявкаНаАрендуТехники);
//Рарус Владимир Подрезов 14.01.2018 7744
			Если ЗначениеЗаполнено(Строка.ЗаявкаНаАрендуТехники) Тогда
				ЗаказКлиента.Подразделение	= Строка.ЗаявкаНаАрендуТехники.Подразделение;
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗаказКлиента.Подразделение) Тогда
            	ЗаказКлиента.Склад			= ЗаказКлиента.Подразделение.пкСкладТехники;
			КонецЕсли;
//Рарус Владимир Подрезов Конец
            
            ЗаказКлиента.Товары.Очистить();
            
            ЗаказКлиента.Дата         = Дата;
            ЗаказКлиента.ДатаОтгрузки = Дата;
            
            СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЗаказКлиента);
            СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
            СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
            СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",   
//++ Рарус Лимаренко 07.12.2018
			Новый Структура("НалогообложениеНДС, Дата",ЗначениеНастроекПовтИсп.НалогообложениеНДС(Строка.ЗаявкаНаАрендуТехники.Организация, ЗаказКлиента.Склад, ЗаказКлиента.Договор, ЗаказКлиента.НаправлениеДеятельности, ЗаказКлиента.Дата),Дата));
//-- Рарус Лимаренко 07.12.2018
            СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(ЗаказКлиента));
            
            Для Каждого СтрокаЗаявки ИЗ Заявки Цикл
                Если СтрокаЗаявки.Пометка И СтрокаЗаявки.ЗаявкаНаАрендуТехники = Строка.ЗаявкаНаАрендуТехники Тогда
                    СтрокаДанныеЗаявок = СтрокаЗаявки.ПолучитьЭлементы();
            
                    Для Каждого СтрокаДанныеЗаявки ИЗ СтрокаДанныеЗаявок Цикл
                        Если СтрокаДанныеЗаявки.Пометка Тогда
                            НоваяСтрока = ЗаказКлиента.Товары.Добавить();
                            
                            НоваяСтрока.Номенклатура            = СтрокаДанныеЗаявки.Модель;
                            НоваяСтрока.пкТехника               = СтрокаДанныеЗаявки.Техника;
                            НоваяСтрока.пкЗаявкаНаАрендуТехники = СтрокаДанныеЗаявки.ЗаявкаНаАрендуТехники;
                            НоваяСтрока.пкДатаНачалаАренды      = СтрокаДанныеЗаявки.ДатаНачалаПоСчету;
                            НоваяСтрока.пкДатаОкончанияАренды   = СтрокаДанныеЗаявки.ДатаОкончанияПоСчету;
                            НоваяСтрока.пкПримечаниеДляПечати   = пкУправлениеТехникойСервер.СформироватьПримечаниеДляПечатиПоТехнике(СтрокаДанныеЗаявки.Модель, СтрокаДанныеЗаявки.Техника);
                            НоваяСтрока.КоличествоУпаковок      = СтрокаДанныеЗаявки.Количество;
							//НоваяСтрока.пкЗамененнаяМодель      = СтрокаДанныеЗаявки.пкЗамененнаяМодель;
//Рарус Владимир Подрезов 27.03.2017
                            НоваяСтрока.пкЗамененнаяМодель		= ОпределитьЗамененнуюМодель(НоваяСтрока.пкЗаявкаНаАрендуТехники, НоваяСтрока.Номенклатура);
//Рарус Владимир Подрезов Конец
	
                            ЗаполнитьЗначенияСвойств(СтруктураПолейТЧ, НоваяСтрока);
                            
                            ОбработкаТабличнойЧастиВызовСервера.ОбработатьСтрокуТЧ(СтруктураПолейТЧ, СтруктураДействий, Неопределено);
                            
                            ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПолейТЧ);

//++ Рарус Лимаренко 30.07.2018					
							   ЗаказКлиента.ЗаполнитьЭтапыГрафикаОплаты();
//-- Рарус Лимаренко 30.07.2018

                        КонецЕсли;    
                    КонецЦикла;
                    
                    Если ЗаказКлиента.Товары.Количество() > 0 Тогда
                        Попытка
                            ЗаказКлиента.Записать();
                            
                            НоваяСтрока = ЗаказыКлиентов.Добавить();
                            
                            НоваяСтрока.ЗаказКлиента = ЗаказКлиента.Ссылка;
                            НоваяСтрока.Пометка      = Истина;
                        Исключение
                        КонецПопытки;    
                    КонецЕсли; 
                КонецЕсли;
            КонецЦикла;       
        КонецЦикла; 
    Иначе
        ТаблицаЗаявокНаАрендуТехники = Новый ТаблицаЗначений();
        ТаблицаЗаявокНаАрендуТехники.Колонки.Добавить("Клиент",  Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
        ТаблицаЗаявокНаАрендуТехники.Колонки.Добавить("Договор", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
        ТаблицаЗаявокНаАрендуТехники.Колонки.Добавить("ОбъектСтроительства", Новый ОписаниеТипов("СправочникСсылка.СМ_ОбъектыСтроительства"));

        Заявки = ЗаявкиНаАрендуТехники.ПолучитьЭлементы();
        
        Для Каждого СтрокаЗаявки ИЗ Заявки Цикл
            Если СтрокаЗаявки.Пометка Тогда
                СтрокаДанныеЗаявок = СтрокаЗаявки.ПолучитьЭлементы();
            
                Для Каждого Строка ИЗ СтрокаДанныеЗаявок Цикл
                    Если Строка.Пометка Тогда
                        НоваяСтрока = ТаблицаЗаявокНаАрендуТехники.Добавить();
                    
                        ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
                    КонецЕсли;
                КонецЦикла;  
            КонецЕсли;
        КонецЦикла;    
        
        ТаблицаЗаявокНаАрендуТехники.Свернуть("Клиент, Договор, ОбъектСтроительства");
                
        Для Каждого Строка ИЗ ТаблицаЗаявокНаАрендуТехники Цикл   
            ЗаказКлиента = Документы.ЗаказКлиента.ПустаяСсылка();
            
            Для Каждого СтрокаЗаявки ИЗ Заявки Цикл
                Если СтрокаЗаявки.Пометка И СтрокаЗаявки.Клиент = Строка.Клиент
                  И СтрокаЗаявки.Договор = Строка.Договор И СтрокаЗаявки.ОбъектСтроительства = Строка.ОбъектСтроительства Тогда
                    СтрокаДанныеЗаявок = СтрокаЗаявки.ПолучитьЭлементы();
            
                    Для Каждого СтрокаДанныеЗаявки ИЗ СтрокаДанныеЗаявок Цикл
                        Если СтрокаДанныеЗаявки.Пометка Тогда
                            Если ЗаказКлиента = Документы.ЗаказКлиента.ПустаяСсылка() Тогда
                                ЗаказКлиента = Документы.ЗаказКлиента.СоздатьДокумент();
                                ЗаказКлиента.Заполнить(СтрокаДанныеЗаявки.ЗаявкаНаАрендуТехники);
//Рарус Владимир Подрезов 14.01.2018 7744
								Если ЗначениеЗаполнено(СтрокаДанныеЗаявки.ЗаявкаНаАрендуТехники) Тогда
									ЗаказКлиента.Подразделение	= СтрокаДанныеЗаявки.ЗаявкаНаАрендуТехники.Подразделение;
								КонецЕсли;
								Если ЗначениеЗаполнено(ЗаказКлиента.Подразделение) Тогда
					            	ЗаказКлиента.Склад			= ЗаказКлиента.Подразделение.пкСкладТехники;
								КонецЕсли;
//Рарус Владимир Подрезов Конец
                                
                                ЗаказКлиента.Товары.Очистить();
                                
                                ЗаказКлиента.Дата         = Дата;
                                ЗаказКлиента.ДатаОтгрузки = Дата;
                                
                                СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЗаказКлиента);
                                СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
                                СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
                                СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",   
//++ Рарус Лимаренко 07.12.2018
								Новый Структура("НалогообложениеНДС, Дата",ЗначениеНастроекПовтИсп.НалогообложениеНДС(СтрокаДанныеЗаявки.ЗаявкаНаАрендуТехники.Организация, ЗаказКлиента.Склад, ЗаказКлиента.Договор, ЗаказКлиента.НаправлениеДеятельности, ЗаказКлиента.Дата),Дата));
//-- Рарус Лимаренко 07.12.2018
								СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(ЗаказКлиента));
																
							КонецЕсли;    
                            
                            НоваяСтрока = ЗаказКлиента.Товары.Добавить();
                            
                            НоваяСтрока.Номенклатура            = СтрокаДанныеЗаявки.Модель;
                            НоваяСтрока.пкТехника               = СтрокаДанныеЗаявки.Техника;
                            НоваяСтрока.пкЗаявкаНаАрендуТехники = СтрокаДанныеЗаявки.ЗаявкаНаАрендуТехники;
                            НоваяСтрока.пкДатаНачалаАренды      = СтрокаДанныеЗаявки.ДатаНачалаПоСчету;
                            НоваяСтрока.пкДатаОкончанияАренды   = СтрокаДанныеЗаявки.ДатаОкончанияПоСчету;
                            НоваяСтрока.пкПримечаниеДляПечати   = пкУправлениеТехникойСервер.СформироватьПримечаниеДляПечатиПоТехнике(СтрокаДанныеЗаявки.Модель, СтрокаДанныеЗаявки.Техника);
                            НоваяСтрока.КоличествоУпаковок      = СтрокаДанныеЗаявки.Количество;

							//Рарус Владимир Подрезов 27.03.2017
                            НоваяСтрока.пкЗамененнаяМодель		= ОпределитьЗамененнуюМодель(НоваяСтрока.пкЗаявкаНаАрендуТехники, НоваяСтрока.Номенклатура);
//Рарус Владимир Подрезов Конец

							
							ЗаполнитьЗначенияСвойств(СтруктураПолейТЧ, НоваяСтрока);
                            
                            ОбработкаТабличнойЧастиВызовСервера.ОбработатьСтрокуТЧ(СтруктураПолейТЧ, СтруктураДействий, Неопределено);
                            
                            ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПолейТЧ);
																						
//++ Рарус Лимаренко 30.07.2018					
							   ЗаказКлиента.ЗаполнитьЭтапыГрафикаОплаты();
//-- Рарус Лимаренко 30.07.2018

                        КонецЕсли;    
                    КонецЦикла; 
                 КонецЕсли;
            КонецЦикла;
                    
            Если ЗаказКлиента.Товары.Количество() > 0 Тогда
                Попытка
                    ЗаказКлиента.Записать();
                    
                    НоваяСтрока = ЗаказыКлиентов.Добавить();
                    
                    НоваяСтрока.ЗаказКлиента = ЗаказКлиента.Ссылка;
                    НоваяСтрока.Пометка      = Истина;
                Исключение
                КонецПопытки;    
            КонецЕсли;    
        КонецЦикла; 
    КонецЕсли;
    
    Если ЗаказыКлиентов.Количество() > 0 Тогда
        Элементы.ГруппаСчетаИРеализации.ТекущаяСтраница = Элементы.ГруппаСчета;
    КонецЕсли;
        
КонецПроцедуры    

&НаКлиенте
Процедура СформироватьСчетаЗавершение(Результат, ДопПараметры) Экспорт
    
    Если Результат = КодВозвратаДиалога.Да Тогда
        СформироватьСчетаНаСервере();   
    КонецЕсли;        
    
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСчета(Команда)
    
    Если ЗаказыКлиентов.Количество() > 0 Тогда
        ПоказатьВопрос(Новый ОписаниеОповещения("СформироватьСчетаЗавершение", ЭтаФорма), "Есть неподтвержденные счета, которые будут удалены, продолжить?", РежимДиалогаВопрос.ДаНет); 
        Возврат;
    КонецЕсли; 
    
    СформироватьСчетаНаСервере();
    
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
    УстановитьУсловноеОформление();
    
    ДатаКурса      = ТекущаяДата();
    ДатаСчетов     = КонецМесяца(ТекущаяДата());
    ДатаРеализаций = КонецМесяца(ТекущаяДата());
    
    ТаблицаСчетов.Параметры.УстановитьЗначениеПараметра("ДатаКурса",  ДатаКурса);
    
    //Менеджер = Пользователи.ТекущийПользователь();
    
    Если ЗначениеЗаполнено(Менеджер) Тогда
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
    		    ТаблицаСчетов, "ЗаказКлиента.Менеджер", Менеджер, , , Истина);
    КонецЕсли;
                            
    УстановитьОтборПоПериодуОплаты();  
	
//Рарус Владимир Подрезов 04.09.2017
	УстановитьОтборТолькоВзаимозачет();
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 09.06.2017
    РассчитатьИтогиНаСервере();
//Рарус Владимир Подрезов КОНЕЦ
КонецПроцедуры

//Рарус Владимир Подрезов 04.09.2017
&НаКлиенте
Процедура ОтборТолькоВзаимозачетПриИзменении(Элемент)
	
	УстановитьОтборТолькоВзаимозачет();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборТолькоВзаимозачет()
    
    ТаблицаСчетов.Параметры.УстановитьЗначениеПараметра("ОтборТолькоВзаимозачет", ОтборТолькоВзаимозачет);
    
КонецПроцедуры    
//Рарус Владимир Подрезов Конец

&НаКлиенте
Процедура ОткрытьЗаявку(Команда)
    
    ТекущиеДанные = Элементы.ЗаявкиНаАрендуТехники.ТекущиеДанные;
    
    Если ТекущиеДанные <> Неопределено Тогда
        ОткрытьФорму("Документ.пкЗаявкаНаАрендуТехники.Форма.ФормаДокумента", Новый Структура("Ключ", ТекущиеДанные.ЗаявкаНаАрендуТехники));    
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсе(Команда)
    
    Если Элементы.ГруппаСчетаИРеализации.ТекущаяСтраница = Элементы.ГруппаПодборЗаявок Тогда
        Заявки = ЗаявкиНаАрендуТехники.ПолучитьЭлементы();
        
        Для Каждого СтрокаЗаявки ИЗ Заявки Цикл
            СтрокаЗаявки.Пометка = Истина; 
            
            СтрокаДанныеЗаявок = СтрокаЗаявки.ПолучитьЭлементы();
            
            Для Каждого Строка ИЗ СтрокаДанныеЗаявок Цикл
                Строка.Пометка = Истина; 
            КонецЦикла;    
        КонецЦикла;
    ИначеЕсли Элементы.ГруппаСчетаИРеализации.ТекущаяСтраница = Элементы.ГруппаСчета Тогда
        Для Каждого Строка ИЗ ЗаказыКлиентов Цикл
            Строка.Пометка = Истина;    
        КонецЦикла;
    ИначеЕсли Элементы.ГруппаСчетаИРеализации.ТекущаяСтраница = Элементы.ГруппаПодборЗаказов Тогда
        Заказы = ЗаказыКлиентовДляРеализаций.ПолучитьЭлементы();
        
        Для Каждого СтрокаЗаказы ИЗ Заказы Цикл
            СтрокаЗаказы.Пометка = Истина; 
            
            СтрокаДанныеЗаказов = СтрокаЗаказы.ПолучитьЭлементы();
            
            Для Каждого Строка ИЗ СтрокаДанныеЗаказов Цикл
                Строка.Пометка = Истина; 
            КонецЦикла;    
        КонецЦикла;
    ИначеЕсли Элементы.ГруппаСчетаИРеализации.ТекущаяСтраница = Элементы.ГруппаПодготовленныеРеализации Тогда
        Для Каждого Строка ИЗ РеализацииТоваровУслуг Цикл
            Строка.Пометка = Истина;  
        КонецЦикла;
    КонецЕсли;    
    
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
    
    Если Элементы.ГруппаСчетаИРеализации.ТекущаяСтраница = Элементы.ГруппаПодборЗаявок Тогда
        Заявки = ЗаявкиНаАрендуТехники.ПолучитьЭлементы();
        
        Для Каждого СтрокаЗаявки ИЗ Заявки Цикл
            СтрокаЗаявки.Пометка = Ложь; 
            
            СтрокаДанныеЗаявок = СтрокаЗаявки.ПолучитьЭлементы();
            
            Для Каждого Строка ИЗ СтрокаДанныеЗаявок Цикл
                Строка.Пометка = Ложь; 
            КонецЦикла;    
        КонецЦикла;
    ИначеЕсли Элементы.ГруппаСчетаИРеализации.ТекущаяСтраница = Элементы.ГруппаСчета Тогда  
        Для Каждого Строка ИЗ ЗаказыКлиентов Цикл
            Строка.Пометка = Ложь;    
        КонецЦикла;
    ИначеЕсли Элементы.ГруппаСчетаИРеализации.ТекущаяСтраница = Элементы.ГруппаПодборЗаказов Тогда
        Заказы = ЗаказыКлиентовДляРеализаций.ПолучитьЭлементы();
        
        Для Каждого СтрокаЗаказы ИЗ Заказы Цикл
            СтрокаЗаказы.Пометка = Ложь; 
            
            СтрокаДанныеЗаказов = СтрокаЗаказы.ПолучитьЭлементы();
            
            Для Каждого Строка ИЗ СтрокаДанныеЗаказов Цикл
                Строка.Пометка = Ложь; 
            КонецЦикла;    
        КонецЦикла;
    ИначеЕсли Элементы.ГруппаСчетаИРеализации.ТекущаяСтраница = Элементы.ГруппаПодготовленныеРеализации Тогда
        Для Каждого Строка ИЗ РеализацииТоваровУслуг Цикл
            Строка.Пометка = Ложь;  
        КонецЦикла;
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УдалитьЗаказыКлиентовНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);

    Для Каждого Строка ИЗ ЗаказыКлиентов Цикл
        ЗаказКлиента = Строка.ЗаказКлиента.ПолучитьОбъект();
        ЗаказКлиента.Удалить();
    КонецЦикла; 
	
	УстановитьПривилегированныйРежим(Ложь);
	
    ЗаказыКлиентов.Очистить();
    
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗаказыКлиентовЗавершение(Результат, ДопПараметры) Экспорт
    
    Если Результат = КодВозвратаДиалога.Да Тогда
        УдалитьЗаказыКлиентовНаСервере();
    КонецЕсли;    
    
КонецПроцедуры    

&НаКлиенте
Процедура УдалитьЗаказыКлиентов(Команда)
    
    ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьЗаказыКлиентовЗавершение", ЭтаФорма), "Все сформированные счета на оплату будут удалены, продолжить?", РежимДиалогаВопрос.ДаНет);
    
КонецПроцедуры

&НаСервере
Процедура УдалитьРеализацииНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
    Для Каждого Строка ИЗ РеализацииТоваровУслуг Цикл
        РеализацияТоваровУслуг = Строка.РеализацияТоваровУслуг.ПолучитьОбъект();
        РеализацияТоваровУслуг.Удалить();
	КонецЦикла; 
	
	УстановитьПривилегированныйРежим(Ложь);
    
    РеализацииТоваровУслуг.Очистить();
    
КонецПроцедуры

&НаКлиенте
Процедура УдалитьРеализацииЗавершение(Результат, ДопПараметры) Экспорт
    
    Если Результат = КодВозвратаДиалога.Да Тогда
        УдалитьРеализацииНаСервере();
    КонецЕсли;    
    
КонецПроцедуры    

&НаКлиенте
Процедура УдалитьРеализации(Команда)
    
    ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьРеализацииЗавершение", ЭтаФорма), "Все сформированные реализации услуг будут удалены, продолжить?", РежимДиалогаВопрос.ДаНет);
    
КонецПроцедуры

&НаКлиенте
Процедура ДатыПоСчетуПриИзменении(Элемент)
    
	ТекущаяСтрока = Элементы.ЗаявкиНаАрендуТехники.ТекущиеДанные;
    
    Если ЗначениеЗаполнено(ТекущаяСтрока.ДатаНачалаПоСчету) И ЗначениеЗаполнено(ТекущаяСтрока.ДатаОкончанияПоСчету) Тогда
        ТекущаяСтрока.Количество = (КонецДня(ТекущаяСтрока.ДатаОкончанияПоСчету) + 1 - НачалоДня(ТекущаяСтрока.ДатаНачалаПоСчету)) / (3600 * 24);
    КонецЕсли;   
    
КонецПроцедуры

&НаСервере
Процедура ПодтвердитьВыбранныеСчетаНаСервере()
        
    Пока ЗаказыКлиентов.Количество() > 0 Цикл
        ЗаказКлиента = ЗаказыКлиентов[0].ЗаказКлиента.ПолучитьОбъект();

        Если НЕ ЗаказыКлиентов[0].Пометка Тогда
            ЗаказКлиента.Удалить();
            ЗаказыКлиентов.Удалить(ЗаказыКлиентов[0]);
        Иначе
            Попытка
                ЗаказКлиента.Записать(РежимЗаписиДокумента.Проведение);
                ЗаказыКлиентов.Удалить(ЗаказыКлиентов[0]);
            Исключение
                Сообщить("Не удалось провести счет """ + ЗаказКлиента + """");  
                ЗаказыКлиентов.Удалить(ЗаказыКлиентов[0]);
            КонецПопытки;    
        КонецЕсли;
    КонецЦикла; 
    
    ЗаполнитьНаСервере();
    
КонецПроцедуры

&НаКлиенте    
Процедура ПодтвердитьВыбранныеСчетаЗавершение(Результат, ДопПараметры) Экспорт
    
    Если Результат = КодВозвратаДиалога.Да Тогда
        ПодтвердитьВыбранныеСчетаНаСервере();        
//Рарус Владимир Подрезов 28.09.2017
		Если Объект.РазворачиватьФормирования Тогда
			Для Каждого текСтрока Из ЗаявкиНаАрендуТехники.ПолучитьЭлементы() Цикл
		    	Элементы.ЗаявкиНаАрендуТехники.Развернуть(текСтрока.ПолучитьИдентификатор(), Истина);
			КонецЦикла;
		КонецЕсли;
//Рарус Владимир Подрезов Конец
    КонецЕсли;    
    
КонецПроцедуры    

&НаКлиенте
Процедура ПодтвердитьВыбранныеСчета(Команда)
    
    ЕстьНевыбранные = Ложь;
    
    Для Каждого Строка ИЗ ЗаказыКлиентов Цикл
        Если НЕ Строка.Пометка Тогда
            ЕстьНевыбранные = Истина; 
            Прервать;
        КонецЕсли;    
    КонецЦикла; 
    
    Если ЕстьНевыбранные Тогда
        ПоказатьВопрос(Новый ОписаниеОповещения("ПодтвердитьВыбранныеСчетаЗавершение", ЭтаФорма), "Есть невыбранные счета, которые будут удалены, продолжить?", РежимДиалогаВопрос.ДаНет); 
        Возврат;
    КонецЕсли;    
    
    ПодтвердитьВыбранныеСчетаНаСервере();
    
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
    
    Если НЕ ЗначениеЗаполнено(Подразделение) Тогда
         ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    ТаблицаСчетов, "Подразделение", , , , Ложь);
    Иначе
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    ТаблицаСчетов, "Подразделение", Подразделение, , , Истина);
    КонецЕсли;
        
    Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПодготовкаДокументов Тогда
        Если Элементы.ГруппаСчетаИРеализации.ТекущаяСтраница = Элементы.ГруппаПодборЗаявок Тогда
            ЗаполнитьНаСервере();
//Рарус Владимир Подрезов 28.09.2017
			Если Объект.РазворачиватьФормирования Тогда
				Для Каждого текСтрока Из ЗаявкиНаАрендуТехники.ПолучитьЭлементы() Цикл
			    	Элементы.ЗаявкиНаАрендуТехники.Развернуть(текСтрока.ПолучитьИдентификатор(), Истина);
				КонецЦикла;
			КонецЕсли;
//Рарус Владимир Подрезов Конец
        ИначеЕсли Элементы.ГруппаСчетаИРеализации.ТекущаяСтраница = Элементы.ГруппаПодборЗаказов Тогда 
            ЗаполнитьЗаказыНаСервере();
//Рарус Владимир Подрезов 28.09.2017
			Если Объект.РазворачиватьФормирования Тогда
				Для Каждого текСтрока Из ЗаказыКлиентовДляРеализаций.ПолучитьЭлементы() Цикл
			    	Элементы.ЗаказыКлиентовДляРеализаций.Развернуть(текСтрока.ПолучитьИдентификатор(), Истина);
				КонецЦикла;
			КонецЕсли;
//Рарус Владимир Подрезов Конец
        КонецЕсли;
    КонецЕсли;

//Рарус Владимир Подрезов 09.06.2017
    РассчитатьИтогиНаСервере();
//Рарус Владимир Подрезов КОНЕЦ
КонецПроцедуры

&НаКлиенте
Процедура ОбъектСтроительстваПриИзменении(Элемент)
    
    Если НЕ ЗначениеЗаполнено(ОбъектСтроительства) Тогда
         ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    ТаблицаСчетов, "ЗаказКлиента.пкОбъектСтроительства", , , , Ложь);
    Иначе
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    ТаблицаСчетов, "ЗаказКлиента.пкОбъектСтроительства", ОбъектСтроительства, , , Истина);
    КонецЕсли;
        
    Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПодготовкаДокументов Тогда
        Если Элементы.ГруппаСчетаИРеализации.ТекущаяСтраница = Элементы.ГруппаПодборЗаявок Тогда
            ЗаполнитьНаСервере();
//Рарус Владимир Подрезов 28.09.2017
			Если Объект.РазворачиватьФормирования Тогда
				Для Каждого текСтрока Из ЗаявкиНаАрендуТехники.ПолучитьЭлементы() Цикл
			    	Элементы.ЗаявкиНаАрендуТехники.Развернуть(текСтрока.ПолучитьИдентификатор(), Истина);
				КонецЦикла;
			КонецЕсли;
//Рарус Владимир Подрезов Конец
        ИначеЕсли Элементы.ГруппаСчетаИРеализации.ТекущаяСтраница = Элементы.ГруппаПодборЗаказов Тогда 
            ЗаполнитьЗаказыНаСервере();
//Рарус Владимир Подрезов 28.09.2017
			Если Объект.РазворачиватьФормирования Тогда
				Для Каждого текСтрока Из ЗаказыКлиентовДляРеализаций.ПолучитьЭлементы() Цикл
			    	Элементы.ЗаказыКлиентовДляРеализаций.Развернуть(текСтрока.ПолучитьИдентификатор(), Истина);
				КонецЦикла;
			КонецЕсли;
//Рарус Владимир Подрезов Конец
        КонецЕсли;
    КонецЕсли;
    
//Рарус Владимир Подрезов 09.06.2017
    РассчитатьИтогиНаСервере();
//Рарус Владимир Подрезов КОНЕЦ
КонецПроцедуры

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
    
    Если НЕ ЗначениеЗаполнено(Менеджер) Тогда
         ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    ТаблицаСчетов, "ЗаказКлиента.Менеджер", , , , Ложь);
    Иначе
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    ТаблицаСчетов, "ЗаказКлиента.Менеджер", Менеджер, , , Истина);
    КонецЕсли;
        
    Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПодготовкаДокументов Тогда
        Если Элементы.ГруппаСчетаИРеализации.ТекущаяСтраница = Элементы.ГруппаПодборЗаявок Тогда
            ЗаполнитьНаСервере();
//Рарус Владимир Подрезов 28.09.2017
			Если Объект.РазворачиватьФормирования Тогда
				Для Каждого текСтрока Из ЗаявкиНаАрендуТехники.ПолучитьЭлементы() Цикл
			    	Элементы.ЗаявкиНаАрендуТехники.Развернуть(текСтрока.ПолучитьИдентификатор(), Истина);
				КонецЦикла;
			КонецЕсли;
//Рарус Владимир Подрезов Конец
        ИначеЕсли Элементы.ГруппаСчетаИРеализации.ТекущаяСтраница = Элементы.ГруппаПодборЗаказов Тогда 
            ЗаполнитьЗаказыНаСервере();
//Рарус Владимир Подрезов 28.09.2017
			Если Объект.РазворачиватьФормирования Тогда
				Для Каждого текСтрока Из ЗаказыКлиентовДляРеализаций.ПолучитьЭлементы() Цикл
			    	Элементы.ЗаказыКлиентовДляРеализаций.Развернуть(текСтрока.ПолучитьИдентификатор(), Истина);
				КонецЦикла;
			КонецЕсли;
//Рарус Владимир Подрезов Конец
        КонецЕсли;
    КонецЕсли;
    
//Рарус Владимир Подрезов 09.06.2017
    РассчитатьИтогиНаСервере();
//Рарус Владимир Подрезов КОНЕЦ
КонецПроцедуры

&НаКлиенте
Процедура КлиентПриИзменении(Элемент)
    
    Если НЕ ЗначениеЗаполнено(Клиент) Тогда
         ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    ТаблицаСчетов, "Партнер", , , , Ложь);
    Иначе
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    ТаблицаСчетов, "Партнер", Клиент, , , Истина);
    КонецЕсли;
        
    Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПодготовкаДокументов Тогда
        Если Элементы.ГруппаСчетаИРеализации.ТекущаяСтраница = Элементы.ГруппаПодборЗаявок Тогда
            ЗаполнитьНаСервере();
//Рарус Владимир Подрезов 28.09.2017
			Если Объект.РазворачиватьФормирования Тогда
				Для Каждого текСтрока Из ЗаявкиНаАрендуТехники.ПолучитьЭлементы() Цикл
			    	Элементы.ЗаявкиНаАрендуТехники.Развернуть(текСтрока.ПолучитьИдентификатор(), Истина);
				КонецЦикла;
			КонецЕсли;
//Рарус Владимир Подрезов Конец
        ИначеЕсли Элементы.ГруппаСчетаИРеализации.ТекущаяСтраница = Элементы.ГруппаПодборЗаказов Тогда 
            ЗаполнитьЗаказыНаСервере();
//Рарус Владимир Подрезов 28.09.2017
			Если Объект.РазворачиватьФормирования Тогда
				Для Каждого текСтрока Из ЗаказыКлиентовДляРеализаций.ПолучитьЭлементы() Цикл
			    	Элементы.ЗаказыКлиентовДляРеализаций.Развернуть(текСтрока.ПолучитьИдентификатор(), Истина);
				КонецЦикла;
			КонецЕсли;
//Рарус Владимир Подрезов Конец
        КонецЕсли;
    КонецЕсли;
    
//Рарус Владимир Подрезов 09.06.2017
    РассчитатьИтогиНаСервере();
//Рарус Владимир Подрезов КОНЕЦ
КонецПроцедуры

&НаКлиенте
Процедура ДатаКурсаПриИзменении(Элемент)
    
    ТаблицаСчетов.Параметры.УстановитьЗначениеПараметра("ДатаКурса", ДатаКурса);
    
КонецПроцедуры

&НаСервере
Процедура СформироватьРеализацииНаСервере()
    
    Для Каждого Строка ИЗ РеализацииТоваровУслуг Цикл
        РеализацияТоваровУслуг = Строка.РеализацияТоваровУслуг.ПолучитьОбъект();
        РеализацияТоваровУслуг.Удалить();
    КонецЦикла;   
    
    РеализацииТоваровУслуг.Очистить();
    
    СтруктураДействий = Новый Структура();
    
    СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
    СтруктураДействий.Вставить("ПересчитатьСумму");
    
    СтруктураПолейТЧ = Новый Структура;
    СтруктураПолейТЧ.Вставить("Номенклатура");
    СтруктураПолейТЧ.Вставить("Характеристика");
    СтруктураПолейТЧ.Вставить("ВидЦены");
    СтруктураПолейТЧ.Вставить("Упаковка");
    СтруктураПолейТЧ.Вставить("Цена", 0);
    СтруктураПолейТЧ.Вставить("КоличествоУпаковок", 0);
    СтруктураПолейТЧ.Вставить("Количество", 0);
    СтруктураПолейТЧ.Вставить("пкЗаявкаНаАрендуТехники");
    СтруктураПолейТЧ.Вставить("пкТехника");
    СтруктураПолейТЧ.Вставить("пкВидТарифа");
    СтруктураПолейТЧ.Вставить("Сумма"    , 0);
    СтруктураПолейТЧ.Вставить("СтавкаНДС", 0);
    СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
    СтруктураПолейТЧ.Вставить("СуммаСНДС", 0);
//Рарус Владимир Подрезов 25.11.2017
    СтруктураПолейТЧ.Вставить("пкЗамененнаяМодель");
//Рарус Владимир Подрезов Конец
    
    Дата = пкОбщегоНазначенияСервер.ПолучитьРабочуюДатуПользователя(Пользователи.ТекущийПользователь());
    
    Если Дата = Неопределено Тогда
        Дата = ТекущаяДата();    
    КонецЕсли;    
    
    Если ФормироватьОтдельныеРеализации Тогда
        
        ТаблицаЗаказовКлиентов = Новый ТаблицаЗначений();
        ТаблицаЗаказовКлиентов.Колонки.Добавить("ЗаказКлиента", Новый ОписаниеТипов("ДокументСсылка.ЗаказКлиента"));
        
        Заказы = ЗаказыКлиентовДляРеализаций.ПолучитьЭлементы();
        
        Для Каждого СтрокаЗаказы ИЗ Заказы Цикл
            Если СтрокаЗаказы.Пометка Тогда
                СтрокаДанныеЗаказов = СтрокаЗаказы.ПолучитьЭлементы();
            
                Для Каждого Строка ИЗ СтрокаДанныеЗаказов Цикл
                    Если Строка.Пометка Тогда
                        НоваяСтрока = ТаблицаЗаказовКлиентов.Добавить();
                    
                        ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
                    КонецЕсли;
                КонецЦикла;  
            КонецЕсли;
        КонецЦикла;    
        
        ТаблицаЗаказовКлиентов.Свернуть("ЗаказКлиента");
                
        Для Каждого Строка ИЗ ТаблицаЗаказовКлиентов Цикл
            
            РеализацияТоваровУслуг = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
            РеализацияТоваровУслуг.Заполнить(Строка.ЗаказКлиента);
//Рарус Владимир Подрезов 14.01.2018 7744
			Если ЗначениеЗаполнено(Строка.ЗаказКлиента) Тогда
                РеализацияТоваровУслуг.ЗаказКлиента		= Строка.ЗаказКлиента;
				РеализацияТоваровУслуг.Подразделение	= Строка.ЗаказКлиента.Подразделение;
            	РеализацияТоваровУслуг.Склад			= Строка.ЗаказКлиента.Склад;
			КонецЕсли;
//Рарус Владимир Подрезов Конец
            
            РеализацияТоваровУслуг.Менеджер              = Строка.ЗаказКлиента.Менеджер;
            РеализацияТоваровУслуг.пкОбъектСтроительства = Строка.ЗаказКлиента.пкОбъектСтроительства;
            
            РеализацияТоваровУслуг.Товары.Очистить();
            
            РеализацияТоваровУслуг.Дата = Дата;
            
            СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(РеализацияТоваровУслуг);
            СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
            СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
//++ Рарус Лимаренко 07.12.2018			
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",   
			Новый Структура("НалогообложениеНДС, Дата",ЗначениеНастроекПовтИсп.НалогообложениеНДС(Строка.ЗаказКлиента.Организация, РеализацияТоваровУслуг.Склад, РеализацияТоваровУслуг.Договор, РеализацияТоваровУслуг.НаправлениеДеятельности, РеализацияТоваровУслуг.Дата),Дата));			
//-- Рарус Лимаренко 07.12.2018
			
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(РеализацияТоваровУслуг));
            
            Для Каждого СтрокаЗаказы ИЗ Заказы Цикл
                Если СтрокаЗаказы.Пометка И СтрокаЗаказы.ЗаказКлиента = Строка.ЗаказКлиента Тогда
                    СтрокаДанныеЗаказов = СтрокаЗаказы.ПолучитьЭлементы();
                    
                    Для Каждого СтрокаДанныеЗаказа ИЗ СтрокаДанныеЗаказов Цикл
                        Если СтрокаДанныеЗаказа.Пометка Тогда
                            НоваяСтрока = РеализацияТоваровУслуг.Товары.Добавить();
                            
                            НоваяСтрока.ЗаказКлиента            = СтрокаДанныеЗаказа.ЗаказКлиента;
                            НоваяСтрока.Номенклатура            = СтрокаДанныеЗаказа.Модель;
                            НоваяСтрока.пкТехника               = СтрокаДанныеЗаказа.Техника;
                            НоваяСтрока.пкЗаявкаНаАрендуТехники = СтрокаДанныеЗаказа.ЗаявкаНаАрендуТехники;
                            НоваяСтрока.пкДатаНачалаАренды      = СтрокаДанныеЗаказа.ДатаНачалаПоРеализации;
                            НоваяСтрока.пкДатаОкончанияАренды   = СтрокаДанныеЗаказа.ДатаОкончанияПоРеализации;
                            НоваяСтрока.КоличествоУпаковок      = СтрокаДанныеЗаказа.Количество;
                            НоваяСтрока.пкПримечаниеДляПечати   = СтрокаДанныеЗаказа.ПримечаниеДляПечати;
                            НоваяСтрока.КодСтроки               = СтрокаДанныеЗаказа.КодСтроки;
//Рарус Владимир Подрезов 25.11.2017
                            НоваяСтрока.пкЗамененнаяМодель		= СтрокаДанныеЗаказа.пкЗамененнаяМодель;
//Рарус Владимир Подрезов Конец
							//++ Рарус Лимаренко 25.10.2018 № 14625	
							НоваяСтрока.пкВидТарифа            = СтрокаДанныеЗаказа.пкВидТарифа;
							//-- Рарус Лимаренко 25.10.2018 № 14625	
							

							Если СтрокаДанныеЗаказа.Модель <> Неопределено И ЗначениеЗаполнено(СтрокаДанныеЗаказа.Модель.ВидНоменклатуры)
									И СтрокаДанныеЗаказа.Модель.ВидНоменклатуры.пкЭтоУслугаТранспортировки Тогда
									НоваяСтрока.Цена = СтрокаДанныеЗаказа.Цена;
							КонецЕсли;


                            ЗаполнитьЗначенияСвойств(СтруктураПолейТЧ, НоваяСтрока);
                            
                            ОбработкаТабличнойЧастиВызовСервера.ОбработатьСтрокуТЧ(СтруктураПолейТЧ, СтруктураДействий, Неопределено);
                            
                            ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПолейТЧ);
                        КонецЕсли;    
                    КонецЦикла;
                КонецЕсли;
            КонецЦикла; 
            РеализацияТоваровУслуг.ЭтапыГрафикаОплаты.Очистить();
            Если РеализацияТоваровУслуг.Товары.Количество() > 0 Тогда
                Попытка
                    РеализацияТоваровУслуг.Записать();
                    
                    НоваяСтрока = РеализацииТоваровУслуг.Добавить();
                    
                    НоваяСтрока.РеализацияТоваровУслуг = РеализацияТоваровУслуг.Ссылка;
                    НоваяСтрока.Пометка                = Истина;
                Исключение
                КонецПопытки;    
            КонецЕсли;    
        КонецЦикла;    
    Иначе
        ТаблицаЗаказовКлиентов = Новый ТаблицаЗначений();
        ТаблицаЗаказовКлиентов.Колонки.Добавить("Клиент",  Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
        ТаблицаЗаказовКлиентов.Колонки.Добавить("Договор", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
        ТаблицаЗаказовКлиентов.Колонки.Добавить("ОбъектСтроительства", Новый ОписаниеТипов("СправочникСсылка.СМ_ОбъектыСтроительства"));
        
        Заказы = ЗаказыКлиентовДляРеализаций.ПолучитьЭлементы();
        
        Для Каждого СтрокаЗаказы ИЗ Заказы Цикл
            Если СтрокаЗаказы.Пометка Тогда
                СтрокаДанныеЗаказов = СтрокаЗаказы.ПолучитьЭлементы();
            
                Для Каждого Строка ИЗ СтрокаДанныеЗаказов Цикл
                    Если Строка.Пометка Тогда
                        НоваяСтрока = ТаблицаЗаказовКлиентов.Добавить();
                    
                        ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
                    КонецЕсли;
                КонецЦикла;  
            КонецЕсли;
        КонецЦикла;    
        
        ТаблицаЗаказовКлиентов.Свернуть("Клиент, Договор, ОбъектСтроительства");
        
        Для Каждого Строка ИЗ ТаблицаЗаказовКлиентов Цикл   
            РеализацияТоваровУслуг = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
            
            Для Каждого СтрокаЗаказы ИЗ Заказы Цикл
                Если СтрокаЗаказы.Пометка И СтрокаЗаказы.Клиент = Строка.Клиент
                  И СтрокаЗаказы.Договор = Строка.Договор И СтрокаЗаказы.ОбъектСтроительства = Строка.ОбъектСтроительства Тогда
                    СтрокаДанныеЗаказов = СтрокаЗаказы.ПолучитьЭлементы();
                    
                    Для Каждого СтрокаДанныеЗаказа ИЗ СтрокаДанныеЗаказов Цикл
                        Если СтрокаДанныеЗаказа.Пометка Тогда
                            Если РеализацияТоваровУслуг = Документы.РеализацияТоваровУслуг.ПустаяСсылка() Тогда
                                РеализацияТоваровУслуг = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
                                РеализацияТоваровУслуг.Заполнить(СтрокаДанныеЗаказа.ЗаказКлиента);
//Рарус Владимир Подрезов 14.01.2018 7744
                                РеализацияТоваровУслуг.ЗаказКлиента	= СтрокаДанныеЗаказа.ЗаказКлиента;
								Если ЗначениеЗаполнено(СтрокаДанныеЗаказа.ЗаказКлиента) Тогда
									РеализацияТоваровУслуг.Подразделение	= СтрокаДанныеЗаказа.ЗаказКлиента.Подразделение;
					            	РеализацияТоваровУслуг.Склад			= СтрокаДанныеЗаказа.ЗаказКлиента.Склад;
								КонецЕсли;
//Рарус Владимир Подрезов Конец
                                
                                РеализацияТоваровУслуг.Менеджер              = СтрокаДанныеЗаказа.ЗаказКлиента.Менеджер;
                                РеализацияТоваровУслуг.пкОбъектСтроительства = СтрокаДанныеЗаказа.ЗаказКлиента.пкОбъектСтроительства;
                                
                                РеализацияТоваровУслуг.Товары.Очистить();
                                
                                РеализацияТоваровУслуг.Дата = Дата;
                                
                                СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(РеализацияТоваровУслуг);
                                СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
                                СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
                                СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",   
//++ Рарус Лимаренко 07.12.2018
								Новый Структура("НалогообложениеНДС, Дата",ЗначениеНастроекПовтИсп.НалогообложениеНДС(СтрокаДанныеЗаказа.ЗаказКлиента.Организация, РеализацияТоваровУслуг.Склад, РеализацияТоваровУслуг.Договор, РеализацияТоваровУслуг.НаправлениеДеятельности, РеализацияТоваровУслуг.Дата),Дата));
//-- Рарус Лимаренко 07.12.2018	
                                СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(РеализацияТоваровУслуг));
                            КонецЕсли;    
                            
                            НоваяСтрока = РеализацияТоваровУслуг.Товары.Добавить();
                            
                            НоваяСтрока.ЗаказКлиента            = СтрокаДанныеЗаказа.ЗаказКлиента;
                            НоваяСтрока.Номенклатура            = СтрокаДанныеЗаказа.Модель;
                            НоваяСтрока.пкТехника               = СтрокаДанныеЗаказа.Техника;
                            НоваяСтрока.пкЗаявкаНаАрендуТехники = СтрокаДанныеЗаказа.ЗаявкаНаАрендуТехники;
                            НоваяСтрока.пкДатаНачалаАренды      = СтрокаДанныеЗаказа.ДатаНачалаПоРеализации;
                            НоваяСтрока.пкДатаОкончанияАренды   = СтрокаДанныеЗаказа.ДатаОкончанияПоРеализации;
                            НоваяСтрока.КоличествоУпаковок      = СтрокаДанныеЗаказа.Количество;
                            НоваяСтрока.пкПримечаниеДляПечати   = СтрокаДанныеЗаказа.ПримечаниеДляПечати;
                            НоваяСтрока.КодСтроки               = СтрокаДанныеЗаказа.КодСтроки;
//Рарус Владимир Подрезов 25.11.2017
                            НоваяСтрока.пкЗамененнаяМодель		= СтрокаДанныеЗаказа.пкЗамененнаяМодель;
//Рарус Владимир Подрезов Конец
//++ Рарус Лимаренко 25.10.2018 № 14625	
							НоваяСтрока.пкВидТарифа            = СтрокаДанныеЗаказа.пкВидТарифа;
//-- Рарус Лимаренко 25.10.2018 № 14625	
							 Если СтрокаДанныеЗаказа.Модель <> Неопределено И ЗначениеЗаполнено(СтрокаДанныеЗаказа.Модель.ВидНоменклатуры)
									И СтрокаДанныеЗаказа.Модель.ВидНоменклатуры.пкЭтоУслугаТранспортировки Тогда
									НоваяСтрока.Цена = СтрокаДанныеЗаказа.Цена;
							КонецЕсли;

                            ЗаполнитьЗначенияСвойств(СтруктураПолейТЧ, НоваяСтрока);
                            
                            ОбработкаТабличнойЧастиВызовСервера.ОбработатьСтрокуТЧ(СтруктураПолейТЧ, СтруктураДействий, Неопределено);
                            
                            ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПолейТЧ);
                        КонецЕсли;    
                    КонецЦикла; 
                КонецЕсли;
            КонецЦикла; 
            РеализацияТоваровУслуг.ЭтапыГрафикаОплаты.Очистить();
            Если РеализацияТоваровУслуг.Товары.Количество() > 0 Тогда
                Попытка
                    РеализацияТоваровУслуг.Записать();
                    
                    НоваяСтрока = РеализацииТоваровУслуг.Добавить();
                    
                    НоваяСтрока.РеализацияТоваровУслуг = РеализацияТоваровУслуг.Ссылка;
                    НоваяСтрока.Пометка                = Истина;
                Исключение
                КонецПопытки;    
            КонецЕсли; 
        КонецЦикла;        
    КонецЕсли;
    
    Если РеализацииТоваровУслуг.Количество() > 0 Тогда
        Элементы.ГруппаСчетаИРеализации.ТекущаяСтраница = Элементы.ГруппаПодготовленныеРеализации;
    КонецЕсли;
        
КонецПроцедуры    

&НаКлиенте
Процедура СформироватьРеализацииЗавершение(Результат, ДопПараметры) Экспорт
    
    Если Результат = КодВозвратаДиалога.Да Тогда
        СформироватьРеализацииНаСервере();   
    КонецЕсли;        
    
КонецПроцедуры

&НаКлиенте
Процедура СформироватьРеализации(Команда)
    
    Если РеализацииТоваровУслуг.Количество() > 0 Тогда
        ПоказатьВопрос(Новый ОписаниеОповещения("СформироватьРеализацииЗавершение", ЭтаФорма), "Есть неподтвержденные реализации, которые будут удалены, продолжить?", РежимДиалогаВопрос.ДаНет); 
        Возврат;
    КонецЕсли; 
    
    СформироватьРеализацииНаСервере();
    
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСчет(Команда)
    
    ТекущиеДанные = Элементы.ЗаказыКлиентовДляРеализаций.ТекущиеДанные;
    
    Если ТекущиеДанные <> Неопределено Тогда
        ОткрытьФорму("Документ.ЗаказКлиента.Форма.ФормаДокумента", Новый Структура("Ключ", ТекущиеДанные.ЗаказКлиента));    
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаказыНаСервере()
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   ИСТИНА КАК Пометка,
    |   ДанныеНачалаАренды.ЗаказКлиента КАК СчетНаОплату,
    |   ДанныеНачалаАренды.ЗаказКлиента.Партнер КАК Клиент,
    |   ДанныеНачалаАренды.ЗаказКлиента.Договор КАК Договор,
    |   ДанныеНачалаАренды.ЗаказКлиента.пкОбъектСтроительства КАК ОбъектСтроительства,
    |   ДанныеНачалаАренды.ЗаявкаНаАрендуТехники КАК ЗаявкаНаАрендуТехники,
    |   ДанныеНачалаАренды.Модель КАК Модель,
    |   ДанныеНачалаАренды.Техника КАК Техника,
//Рарус Владимир Подрезов 05.09.2017
//    |   ДанныеНачалаАренды.Период КАК ДатаНачалаПоСчету,
	|	ВЫБОР 
	|		КОГДА ДанныеНачалаАренды.Период >= &ДатаЗапускаСистемы 
	|			ТОГДА ДанныеНачалаАренды.Период
	|		ИНАЧЕ &ДатаЗапускаСистемы 
	|	КОНЕЦ КАК ДатаНачалаПоСчету,
//Рарус Владимир Подрезов Конец
    |   ДОБАВИТЬКДАТЕ(ДанныеОкончанияАренды.Период, СЕКУНДА, -1) КАК ДатаОкончанияПоСчету,
    |   ДанныеНачалаАренды.Период КАК ДатаНачалаПоРеализации,
    |   ВЫБОР
    |       КОГДА ДОБАВИТЬКДАТЕ(ДанныеОкончанияАренды.Период, СЕКУНДА, -1) > КОНЕЦПЕРИОДА(&ДатаРеализаций, ДЕНЬ)
    |               И &ДатаРеализаций <> &ПустаяДата
    |           ТОГДА КОНЕЦПЕРИОДА(&ДатаРеализаций, ДЕНЬ)
    |       ИНАЧЕ ДОБАВИТЬКДАТЕ(ДанныеОкончанияАренды.Период, СЕКУНДА, -1)
    |   КОНЕЦ КАК ДатаОкончанияПоРеализации,
    |   ДанныеНачалаАренды.НомерМодели
    |ПОМЕСТИТЬ ВТ_ДанныеСчетовНаОплату
    |ИЗ
    |   РегистрСведений.пкСрокиАренды.СрезПоследних(
    |           ,
    |           (ТипДокумента = ЗНАЧЕНИЕ(Перечисление.пкТипыДокументовДляСроковАренды.ЗаказКлиента)
    |               ИЛИ ТипДокумента = ЗНАЧЕНИЕ(Перечисление.пкТипыДокументовДляСроковАренды.РеализацияТоваровУслуг))
    |               И НЕ ЭтоОкончаниеАренды И НЕ ЗаказКлиента.пкИсключитьИзУСР"
	+ ?(ЗначениеЗаполнено(Подразделение), " И ЗаказКлиента.Подразделение = &Подразделение", "")
	+ ?(ЗначениеЗаполнено(Клиент), " И ЗаказКлиента.Партнер = &Клиент", "")
	+ ?(ЗначениеЗаполнено(ОбъектСтроительства), " И ЗаказКлиента.пкОбъектСтроительства = &ОбъектСтроительства", "")
	+ ?(ЗначениеЗаполнено(Менеджер), " И ЗаказКлиента.Менеджер = &Менеджер", "") + ") КАК ДанныеНачалаАренды
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкСрокиАренды.СрезПоследних(
    |               ,
    |               ЭтоОкончаниеАренды
    |                   И ТипДокумента = ЗНАЧЕНИЕ(Перечисление.пкТипыДокументовДляСроковАренды.ЗаказКлиента)) КАК ДанныеОкончанияАренды
    |       ПО ДанныеНачалаАренды.ЗаявкаНаАрендуТехники = ДанныеОкончанияАренды.ЗаявкаНаАрендуТехники
    |           И ДанныеНачалаАренды.Модель = ДанныеОкончанияАренды.Модель
    |           И ДанныеНачалаАренды.НомерМодели = ДанныеОкончанияАренды.НомерМодели
    |           И ДанныеНачалаАренды.ЗаказКлиента = ДанныеОкончанияАренды.ЗаказКлиента
    |ГДЕ
//Рарус Владимир Подрезов 05.09.2017
    //|   ДанныеНачалаАренды.Период < ВЫБОР
	|	ВЫБОР 
	|		КОГДА ДанныеНачалаАренды.Период >= &ДатаЗапускаСистемы 
	|			ТОГДА ДанныеНачалаАренды.Период
	|		ИНАЧЕ &ДатаЗапускаСистемы 
	|	КОНЕЦ <= ВЫБОР
//Рарус Владимир Подрезов Конец
    |           КОГДА ДОБАВИТЬКДАТЕ(ДанныеОкончанияАренды.Период, СЕКУНДА, -1) > КОНЕЦПЕРИОДА(&ДатаРеализаций, ДЕНЬ)
    |                   И &ДатаРеализаций <> &ПустаяДата
    |               ТОГДА КОНЕЦПЕРИОДА(&ДатаРеализаций, ДЕНЬ)
    |           ИНАЧЕ ДОБАВИТЬКДАТЕ(ДанныеОкончанияАренды.Период, СЕКУНДА, -1)
    |       КОНЕЦ
//Рарус Владимир Подрезов 03.10.2017
    |		И (&НеТолькоПоПДА
    |			ИЛИ ДОБАВИТЬКДАТЕ(ДанныеОкончанияАренды.Период, СЕКУНДА, -1) <= КОНЕЦПЕРИОДА(&ДатаРеализаций, ДЕНЬ)
    |				И &ДатаРеализаций <> &ПустаяДата)
//Рарус Владимир Подрезов Конец
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |   ЗаказКлиентаТовары.Ссылка,
    |   ЗаказКлиентаТовары.Номенклатура,
    |   ЗаказКлиентаТовары.пкЗаявкаНаАрендуТехники,
    |   ЗаказКлиентаТовары.Упаковка,
    |   ЗаказКлиентаТовары.КоличествоУпаковок,
    |   ЗаказКлиентаТовары.Цена,
    |   ЗаказКлиентаТовары.КодСтроки,
    |   ЗаказКлиентаТовары.пкВидТарифа,
    |   ЗаказКлиентаТовары.пкТехника,
    |   ЗаказКлиентаТовары.НомерСтроки,
//Рарус Владимир Подрезов 25.11.2017
    |   ЗаказКлиентаТовары.пкЗамененнаяМодель,
//Рарус Владимир Подрезов Конец
    |   ПОДСТРОКА(ЗаказКлиентаТовары.пкПримечаниеДляПечати, 1, 250) КАК ПримечаниеДляПечати
    |ПОМЕСТИТЬ ВТ_ТоварыПоСчету
    |ИЗ
    |   Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
    |ГДЕ
    |   ЗаказКлиентаТовары.Ссылка В
    |           (ВЫБРАТЬ
    |               ВТ_ДанныеСчетовНаОплату.СчетНаОплату
    |           ИЗ
    |               ВТ_ДанныеСчетовНаОплату КАК ВТ_ДанныеСчетовНаОплату)
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |   ВТ_ДанныеСчетовНаОплату.Пометка,
    |   ВТ_ДанныеСчетовНаОплату.СчетНаОплату,
    |   ВТ_ДанныеСчетовНаОплату.Клиент,
    |   ВТ_ДанныеСчетовНаОплату.Договор,
    |   ВТ_ДанныеСчетовНаОплату.ОбъектСтроительства,
    |   ВТ_ДанныеСчетовНаОплату.ЗаявкаНаАрендуТехники,
    |   ВТ_ДанныеСчетовНаОплату.Модель,
    |   0 КАК Количество,
    |   ВТ_ДанныеСчетовНаОплату.Техника,
    |   ВТ_ДанныеСчетовНаОплату.ДатаНачалаПоСчету,
    |   ВТ_ДанныеСчетовНаОплату.ДатаОкончанияПоСчету,
    |   ВТ_ДанныеСчетовНаОплату.ДатаНачалаПоРеализации,
    |   ВТ_ДанныеСчетовНаОплату.ДатаОкончанияПоРеализации,
    |   ВТ_ДанныеСчетовНаОплату.НомерМодели,
//Рарус Владимир Подрезов 25.11.2017
    |   МАКСИМУМ(ВТ_ТоварыПоСчету.пкЗамененнаяМодель),
//Рарус Владимир Подрезов Конец
    |   МАКСИМУМ(ВТ_ТоварыПоСчету.НомерСтроки),
    |   МАКСИМУМ(ВТ_ТоварыПоСчету.ПримечаниеДляПечати),
    |   МАКСИМУМ(ВТ_ТоварыПоСчету.КодСтроки),
	|   0 КАК Цена,
	|   ВТ_ТоварыПоСчету.пкВидТарифа КАК пкВидТарифа
	|ПОМЕСТИТЬ ВТ_СчетаНаАрендуИДопУслуги
    |ИЗ
    |   ВТ_ДанныеСчетовНаОплату КАК ВТ_ДанныеСчетовНаОплату
    |       ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТоварыПоСчету КАК ВТ_ТоварыПоСчету
    |       ПО ВТ_ДанныеСчетовНаОплату.Модель = ВТ_ТоварыПоСчету.Номенклатура
    |           И ВТ_ДанныеСчетовНаОплату.ЗаявкаНаАрендуТехники = ВТ_ТоварыПоСчету.пкЗаявкаНаАрендуТехники
    |           И ВТ_ДанныеСчетовНаОплату.Техника = ВТ_ТоварыПоСчету.пкТехника
    |           И ВТ_ДанныеСчетовНаОплату.СчетНаОплату = ВТ_ТоварыПоСчету.Ссылка
    |
    |СГРУППИРОВАТЬ ПО
    |   ВТ_ДанныеСчетовНаОплату.Пометка,
    |   ВТ_ДанныеСчетовНаОплату.СчетНаОплату,
    |   ВТ_ДанныеСчетовНаОплату.Клиент,
    |   ВТ_ДанныеСчетовНаОплату.Договор,
    |   ВТ_ДанныеСчетовНаОплату.ОбъектСтроительства,
    |   ВТ_ДанныеСчетовНаОплату.ЗаявкаНаАрендуТехники,
    |   ВТ_ДанныеСчетовНаОплату.Модель,
    |   ВТ_ДанныеСчетовНаОплату.Техника,
    |   ВТ_ДанныеСчетовНаОплату.ДатаНачалаПоСчету,
    |   ВТ_ДанныеСчетовНаОплату.ДатаОкончанияПоСчету,
    |   ВТ_ДанныеСчетовНаОплату.ДатаНачалаПоРеализации,
    |   ВТ_ДанныеСчетовНаОплату.ДатаОкончанияПоРеализации,
    |   ВТ_ДанныеСчетовНаОплату.НомерМодели,
	|	ВТ_ТоварыПоСчету.пкВидТарифа
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |   ИСТИНА,
    |   ВТ_ТоварыПоСчету.Ссылка,
    |   ВТ_ТоварыПоСчету.Ссылка.Партнер,
    |   ВТ_ТоварыПоСчету.Ссылка.Договор,
    |   ВТ_ТоварыПоСчету.Ссылка.пкОбъектСтроительства,
    |   ВТ_ТоварыПоСчету.пкЗаявкаНаАрендуТехники,
    |   ВТ_ТоварыПоСчету.Номенклатура,
    |   ВТ_ТоварыПоСчету.КоличествоУпаковок,
    |   НЕОПРЕДЕЛЕНО,
    |   НЕОПРЕДЕЛЕНО,
    |   НЕОПРЕДЕЛЕНО,
    |   НЕОПРЕДЕЛЕНО,
    |   НЕОПРЕДЕЛЕНО,
    |   НЕОПРЕДЕЛЕНО,
//Рарус Владимир Подрезов 25.11.2017
    |   НЕОПРЕДЕЛЕНО,
//Рарус Владимир Подрезов Конец
    |   ВТ_ТоварыПоСчету.НомерСтроки,
    |   ВТ_ТоварыПоСчету.ПримечаниеДляПечати,
    |   ВТ_ТоварыПоСчету.КодСтроки,
	|   ВТ_ТоварыПоСчету.Цена,
	|   ВТ_ТоварыПоСчету.пкВидТарифа  
    |ИЗ
    |   ВТ_ТоварыПоСчету КАК ВТ_ТоварыПоСчету
    |ГДЕ
    |   НЕ ВТ_ТоварыПоСчету.Номенклатура.пкЭтоТехника
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |   ВТ_СчетаНаАрендуИДопУслуги.Пометка,
    |   ВТ_СчетаНаАрендуИДопУслуги.СчетНаОплату КАК СчетНаОплату,
    |   ВТ_СчетаНаАрендуИДопУслуги.Клиент,
    |   ВТ_СчетаНаАрендуИДопУслуги.Договор,
    |   ВТ_СчетаНаАрендуИДопУслуги.ОбъектСтроительства,
    |   ВТ_СчетаНаАрендуИДопУслуги.ЗаявкаНаАрендуТехники,
    |   ВТ_СчетаНаАрендуИДопУслуги.Модель,
    |   ВТ_СчетаНаАрендуИДопУслуги.Техника,
    |   ВТ_СчетаНаАрендуИДопУслуги.ДатаНачалаПоСчету,
    |   ВТ_СчетаНаАрендуИДопУслуги.ДатаОкончанияПоСчету,
    |   ВТ_СчетаНаАрендуИДопУслуги.ДатаНачалаПоРеализации,
    |   ВТ_СчетаНаАрендуИДопУслуги.ДатаОкончанияПоРеализации,
    |   ВТ_СчетаНаАрендуИДопУслуги.НомерМодели,
//Рарус Владимир Подрезов 25.11.2017
    |   ВТ_СчетаНаАрендуИДопУслуги.Количество,
    |   ВТ_СчетаНаАрендуИДопУслуги.пкЗамененнаяМодель,
//Рарус Владимир Подрезов Конец
    |   ВТ_СчетаНаАрендуИДопУслуги.НомерСтроки,
    |   ВТ_СчетаНаАрендуИДопУслуги.ПримечаниеДляПечати,
//Рарус Владимир Подрезов 30.09.2017
    |   пкКомментарииПоЗаявке.Комментарий КАК Комментарий,
    |   пкКомментарииПоЗаявке.Примечание КАК Примечание,
    |   пкКомментарииПоЗаявке.Паспорт КАК Паспорт,
    |   пкКомментарииПоЗаявке.ВахтенныйЖурнал КАК ВахтенныйЖурнал,
//Рарус Владимир Подрезов Конец
    |   ВТ_СчетаНаАрендуИДопУслуги.КодСтроки,
	|	ВТ_СчетаНаАрендуИДопУслуги.Цена,
	|	ВТ_СчетаНаАрендуИДопУслуги.пкВидТарифа
    |ИЗ
    |   ВТ_СчетаНаАрендуИДопУслуги КАК ВТ_СчетаНаАрендуИДопУслуги
//Рарус Владимир Подрезов 30.09.2017
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкКомментарииПоЗаявке КАК пкКомментарииПоЗаявке
    |       ПО ВТ_СчетаНаАрендуИДопУслуги.ЗаявкаНаАрендуТехники = пкКомментарииПоЗаявке.ЗаявкаНаАрендуТехники
    |       	И ВТ_СчетаНаАрендуИДопУслуги.Техника = пкКомментарииПоЗаявке.Техника
//Рарус Владимир Подрезов Конец
    |УПОРЯДОЧИТЬ ПО
    |   НомерСтроки
    |ИТОГИ ПО
    |   СчетНаОплату";
    
    Запрос.УстановитьПараметр("Подразделение",			Подразделение);
    Запрос.УстановитьПараметр("Клиент",					Клиент);
    Запрос.УстановитьПараметр("ОбъектСтроительства",	ОбъектСтроительства);
    Запрос.УстановитьПараметр("Менеджер",				Менеджер);
    Запрос.УстановитьПараметр("ДатаРеализаций",			ДатаРеализаций);
	Запрос.УстановитьПараметр("ПустаяДата",				'00010101');
//Рарус Владимир Подрезов 05.09.2017
	УстановитьПривилегированныйРежим(Истина);
	Запрос.УстановитьПараметр("ДатаЗапускаСистемы",		Константы.пкДатаЗапускаСистемы.Получить());
	УстановитьПривилегированныйРежим(Ложь);
//Рарус Владимир Подрезов Конец
//Рарус Владимир Подрезов 03.10.2017
	Запрос.УстановитьПараметр("НеТолькоПоПДА",	 		НЕ ФормироватТолькоПоПДА);
//Рарус Владимир Подрезов Конец
    
    ВыборкаЗаказы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
    
    Заказы = ЗаказыКлиентовДляРеализаций.ПолучитьЭлементы(); 
    Заказы.Очистить();
        
    Пока ВыборкаЗаказы.Следующий() Цикл
        СтрокаЗаказы = Заказы.Добавить();    
        СтрокаЗаказы.ЗаказКлиента        = ВыборкаЗаказы.СчетНаОплату;
        СтрокаЗаказы.Клиент              = ВыборкаЗаказы.СчетНаОплату.Партнер;
        СтрокаЗаказы.Договор             = ВыборкаЗаказы.СчетНаОплату.Договор;
        СтрокаЗаказы.ОбъектСтроительства = ВыборкаЗаказы.СчетНаОплату.пкОбъектСтроительства;
        
        СтрокаЗаказы.Пометка             = Истина;
        
        Выборка = ВыборкаЗаказы.Выбрать();
        
        ДанныеПоЗаказам = СтрокаЗаказы.ПолучитьЭлементы();
        
        Пока Выборка.Следующий() Цикл
            НоваяСтрока = ДанныеПоЗаказам.Добавить();
            
            ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
            
            НоваяСтрока.ЗаказКлиента = ВыборкаЗаказы.СчетНаОплату;
            
            Если НоваяСтрока.Модель.пкЭтоТехника Тогда
                НоваяСтрока.Количество = (КонецДня(НоваяСтрока.ДатаОкончанияПоРеализации) + 1 - НачалоДня(НоваяСтрока.ДатаНачалаПоРеализации)) / (3600 * 24);
            КонецЕсли;
        КонецЦикла;    
    КонецЦикла;    
        
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаказы(Команда)
    
    ЗаполнитьЗаказыНаСервере();
    
//Рарус Владимир Подрезов 28.09.2017
	Если Объект.РазворачиватьФормирования Тогда
		Для Каждого текСтрока Из ЗаказыКлиентовДляРеализаций.ПолучитьЭлементы() Цикл
	    	Элементы.ЗаказыКлиентовДляРеализаций.Развернуть(текСтрока.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
	КонецЕсли;
//Рарус Владимир Подрезов Конец
КонецПроцедуры

&НаСервере
Процедура ПодтвердитьВыбранныеРеализацииНаСервере()
    
    Пока РеализацииТоваровУслуг.Количество() > 0 Цикл
        РеализацияТоваровУслуг = РеализацииТоваровУслуг[0].РеализацияТоваровУслуг.ПолучитьОбъект();

        Если НЕ РеализацииТоваровУслуг[0].Пометка Тогда
            РеализацияТоваровУслуг.Удалить();
            РеализацииТоваровУслуг.Удалить(РеализацииТоваровУслуг[0]);
        Иначе
            Попытка
                РеализацияТоваровУслуг.Записать(РежимЗаписиДокумента.Проведение);
                РеализацииТоваровУслуг.Удалить(РеализацииТоваровУслуг[0]);
            Исключение
                Сообщить("Не удалось провести реализацию """ + РеализацияТоваровУслуг + """"); 
                РеализацииТоваровУслуг.Удалить(РеализацииТоваровУслуг[0]);
            КонецПопытки;    
        КонецЕсли;
    КонецЦикла; 
    
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьВыбранныеРеализацииЗавершение(Результат, ДопПараметры) Экспорт
    
    Если Результат = КодВозвратаДиалога.Да Тогда
        ПодтвердитьВыбранныеРеализацииНаСервере();        
    КонецЕсли; 
    
КонецПроцедуры    

&НаКлиенте
Процедура ПодтвердитьВыбранныеРеализации(Команда)
    
    ЕстьНевыбранные = Ложь;
    
    Для Каждого Строка ИЗ РеализацииТоваровУслуг Цикл
        Если НЕ Строка.Пометка Тогда
            ЕстьНевыбранные = Истина; 
            Прервать;
        КонецЕсли;    
    КонецЦикла; 
    
    Если ЕстьНевыбранные Тогда
        ПоказатьВопрос(Новый ОписаниеОповещения("ПодтвердитьВыбранныеРеализацииЗавершение", ЭтаФорма), "Есть невыбранные реализации, которые будут удалены, продолжить?", РежимДиалогаВопрос.ДаНет); 
        Возврат;
    КонецЕсли;    
    
    ПодтвердитьВыбранныеРеализацииНаСервере();
    
КонецПроцедуры

&НаКлиенте
Процедура ДатыПоРеализацииПриИзменении(Элемент)
    
	ТекущаяСтрока = Элементы.ЗаказыКлиентовДляРеализаций.ТекущиеДанные;
    
    Если ЗначениеЗаполнено(ТекущаяСтрока.ДатаНачалаПоРеализации) И ЗначениеЗаполнено(ТекущаяСтрока.ДатаОкончанияПоРеализации) Тогда
        ТекущаяСтрока.Количество = (КонецДня(ТекущаяСтрока.ДатаОкончанияПоРеализации) + 1 - НачалоДня(ТекущаяСтрока.ДатаНачалаПоРеализации)) / (3600 * 24);
    КонецЕсли;   
    
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
    
    ТекущиеДанные = Элементы.ТаблицаСчетов.ТекущиеДанные;
    
    Если Элемент.ТекущийЭлемент.Имя = "ТаблицаСчетовПретензия" Тогда
        СтандартнаяОбработка = Ложь;
        ОткрытьФорму("Документ.пкПретензия.Форма.ФормаДокумента", Новый Структура("Ключ", ТекущиеДанные.Претензия));  
    ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТаблицаСчетовСудебныйИск" Тогда
        СтандартнаяОбработка = Ложь;
        ОткрытьФорму("Документ.пкСудебныйИск.Форма.ФормаДокумента", Новый Структура("Ключ", ТекущиеДанные.СудебныйИск));  
    ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТаблицаСчетовЗаказКлиентаДоговорНомер" Тогда
        СтандартнаяОбработка = Ложь;
        ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаЭлемента", Новый Структура("Ключ", пкОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЗаказКлиента, "Договор")));  
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
			
    ЕстьНевыбранные = Ложь;
    
    Если РеализацииТоваровУслуг.Количество() > 0 ИЛИ ЗаказыКлиентов.Количество() > 0 Тогда
        ЕстьНевыбранные = Истина; 
    КонецЕсли;    
    
    Если ЕстьНевыбранные Тогда
        ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтаФорма), "Есть неподтвержденные реализации и счета, которые будут удалены, продолжить?", РежимДиалогаВопрос.ДаНет); 
        Отказ = Истина;
        Возврат;
	КонецЕсли;
	
	Если не СохранитьДанныеФормы Тогда
		ЭтаФорма.АвтоматическоеСохранениеДанныхВНастройках = АвтоматическоеСохранениеДанныхФормыВНастройках.НеИспользовать;
	КонецЕсли;
        
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДопПараметры) Экспорт
    
    Если Результат = КодВозвратаДиалога.Да Тогда
        УдалитьЗаказыКлиентовНаСервере();
        УдалитьРеализацииНаСервере(); 
        
        Закрыть();
    КонецЕсли;
    
КонецПроцедуры    

&НаКлиенте
Процедура ЗаявкиНаАрендуТехникиПометкаПриИзменении(Элемент)
    
    ТекущаяСтрока = Элементы.ЗаявкиНаАрендуТехники.ТекущаяСтрока;
    
    ЗаявкиНаАрендуТехникиПометкаПриИзмененииНаСервере(ТекущаяСтрока);
    
КонецПроцедуры

&НаСервере
Процедура ЗаявкиНаАрендуТехникиПометкаПриИзмененииНаСервере(НомерСтроки)
    
    ТекущаяСтрока = ЗаявкиНаАрендуТехники.НайтиПоИдентификатору(НомерСтроки);
    
    СтрокаЗаявки = ТекущаяСтрока.ПолучитьРодителя();
    
    Если СтрокаЗаявки = Неопределено Тогда
        СтрокаДанныеЗаявки = ТекущаяСтрока.ПолучитьЭлементы(); 
    
        Для Каждого Строка ИЗ СтрокаДанныеЗаявки Цикл
            Строка.Пометка = ТекущаяСтрока.Пометка;        
        КонецЦикла;
    Иначе
        СтрокаДанныеЗаявки = СтрокаЗаявки.ПолучитьЭлементы();
        
        ЕстьПометка = Ложь;
        
        Для Каждого Строка ИЗ СтрокаДанныеЗаявки Цикл
            Если Строка.Пометка Тогда
                ЕстьПометка = Истина;
                Прервать;
            КонецЕсли;    
        КонецЦикла;

        СтрокаЗаявки.Пометка = ЕстьПометка;    
    КонецЕсли;    
    
КонецПроцедуры    

&НаКлиенте
Процедура ЗаказыКлиентовДляРеализацийПометкаПриИзменении(Элемент)
    
    ТекущаяСтрока = Элементы.ЗаказыКлиентовДляРеализаций.ТекущаяСтрока;
    
    ЗаказыКлиентовДляРеализацийПометкаПриИзмененииНаСервере(ТекущаяСтрока);
    
КонецПроцедуры

&НаСервере
Процедура ЗаказыКлиентовДляРеализацийПометкаПриИзмененииНаСервере(НомерСтроки)
    
    ТекущаяСтрока = ЗаказыКлиентовДляРеализаций.НайтиПоИдентификатору(НомерСтроки);
    
    СтрокаЗаказы = ТекущаяСтрока.ПолучитьРодителя();
    
    Если СтрокаЗаказы = Неопределено Тогда
        СтрокаДанныеЗаказа = ТекущаяСтрока.ПолучитьЭлементы(); 
    
        Для Каждого Строка ИЗ СтрокаДанныеЗаказа Цикл
            Строка.Пометка = ТекущаяСтрока.Пометка;        
        КонецЦикла;
    Иначе
        СтрокаДанныеЗаказа = СтрокаЗаказы.ПолучитьЭлементы();
        
        ЕстьПометка = Ложь;
        
        Для Каждого Строка ИЗ СтрокаДанныеЗаказа Цикл
            Если Строка.Пометка Тогда
                ЕстьПометка = Истина;
                Прервать;
            КонецЕсли;    
        КонецЦикла;

        СтрокаЗаказы.Пометка = ЕстьПометка;    
    КонецЕсли;  
    
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(ЭтотОбъект, 
		Новый Структура("ДатаНачала, ДатаОкончания", "ПериодОплатыНачало", "ПериодОплатыОкончание"),
        Новый ОписаниеОповещения("РедактироватьПериодЗавершение", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьПериодЗавершение(ВыбранныйПериод, ДополнительныеПараметры) Экспорт
    
    УстановитьОтборПоПериодуОплаты();  
    
КонецПроцедуры    

&НаКлиенте
Процедура ПериодОплатыПриИзменении(Элемент)
    
    УстановитьОтборПоПериодуОплаты();        
    
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоПериодуОплаты()
    
    ТаблицаСчетов.Параметры.УстановитьЗначениеПараметра("ПериодОплатыНачало",    ПериодОплатыНачало);
    ТаблицаСчетов.Параметры.УстановитьЗначениеПараметра("ПериодОплатыОкончание", ?(ЗначениеЗаполнено(ПериодОплатыОкончание), КонецДня(ПериодОплатыОкончание), КонецДня(ТекущаяДата())));
    ТаблицаСчетов.Параметры.УстановитьЗначениеПараметра("ОтборПоОплате",         ?(ЗначениеЗаполнено(ПериодОплатыНачало) ИЛИ ЗначениеЗаполнено(ПериодОплатыОкончание), Истина, Ложь));
    
КонецПроцедуры    

&НаКлиенте
Процедура НеоплаченныеСчетаПриИзменении(Элемент)
    
    Если НеоплаченныеСчета Тогда
        СчетаСПереплатой = Ложь;    
    КонецЕсли;
    
    Если НеоплаченныеСчета Тогда
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    ТаблицаСчетов, "ОсталосьОплатить", 0, ВидСравненияКомпоновкиДанных.Больше, , Истина);
    Иначе
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    ТаблицаСчетов, "ОсталосьОплатить", , , , Ложь);
    КонецЕсли;
        
//Рарус Владимир Подрезов 09.06.2017
    РассчитатьИтогиНаСервере();
//Рарус Владимир Подрезов КОНЕЦ
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
    
    УсловноеОформление.Элементы.Очистить();
    
    Элемент = УсловноеОформление.Элементы.Добавить();

    Для Каждого ЭлементСпискаСчетов ИЗ Элементы Цикл
        Если Найти(ЭлементСпискаСчетов.Имя, "ТаблицаСчетов") > 0 Тогда
	        ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	        ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементСпискаСчетов.Имя);
        КонецЕсли;    
    КонецЦикла;
        
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаСчетов.ОсталосьОплатить");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
    
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Желтый);
    
    Элемент = УсловноеОформление.Элементы.Добавить();

    Для Каждого ЭлементСпискаСчетов ИЗ Элементы Цикл
        Если Найти(ЭлементСпискаСчетов.Имя, "ТаблицаСчетов") > 0 Тогда
	        ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	        ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементСпискаСчетов.Имя);
        КонецЕсли;    
    КонецЦикла;
    
    ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаСчетов.пкЗакрыт");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Желтый);
    
    Элемент = УсловноеОформление.Элементы.Добавить();

    ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
    ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаСчетовОсталосьОплатить.Имя);
        
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаСчетов.ОсталосьОплатить");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Красный);
    
КонецПроцедуры    

&НаКлиенте
Процедура СчетаСПереплатойПриИзменении(Элемент)
    
    Если СчетаСПереплатой Тогда
        НеоплаченныеСчета = Ложь;    
    КонецЕсли;    
    
    Если СчетаСПереплатой Тогда
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    ТаблицаСчетов, "ОсталосьОплатить", 0, ВидСравненияКомпоновкиДанных.Меньше, , Истина);
    Иначе
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    ТаблицаСчетов, "ОсталосьОплатить", , , , Ложь);
    КонецЕсли;
        
//Рарус Владимир Подрезов 09.06.2017
    РассчитатьИтогиНаСервере();
//Рарус Владимир Подрезов КОНЕЦ
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    
    Если ЗначениеЗаполнено(Менеджер) Тогда
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
    		    ТаблицаСчетов, "ЗаказКлиента.Менеджер", Менеджер, , , Истина);
//Рарус Владимир Подрезов 09.06.2017
	    РассчитатьИтогиНаСервере();
//Рарус Владимир Подрезов КОНЕЦ
    КонецЕсли;
            
КонецПроцедуры

&НаСервере
Процедура РассчитатьИтогиНаСервере()
	
	СхемаКомпоновкиДанных		= Элементы.ТаблицаСчетов.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	НастройкиКомпоновкиДанных	= Элементы.ТаблицаСчетов.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	КомпоновщикМакета	= Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки		= КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных
													,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки	= Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ТаблицаЗначений	= Новый ТаблицаЗначений;
	
	ПроцессорВывода	= Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
//Рарус Владимир Подрезов 03.10.2017
//	СуммаПоСчетуВсего		= ТаблицаЗначений.Итог("СуммаПоСчету");
//	ОплаченоВсего			= ТаблицаЗначений.Итог("Оплачено");
//	ОсталосьОплатитьВсего	= ТаблицаЗначений.Итог("ОсталосьОплатить");
//	ОсталосьОтгрузитьВсего	= ТаблицаЗначений.Итог("ОсталосьОтгрузить");
////Рарус Владимир Подрезов 09.06.2017
//	СуммаДолгаВсего			= ТаблицаЗначений.Итог("СуммаДолга");
////Рарус Владимир Подрезов КОНЕЦ
	СуммаПоСчетуВсего		= 0;
	ОплаченоВсего			= 0;
	ОсталосьОплатитьВсего	= 0;
	ОсталосьОтгрузитьВсего	= 0;
	СуммаДолгаВсего			= 0;
	Если ТаблицаЗначений.Количество() > 0 Тогда
		Если ТаблицаЗначений.Колонки.Найти("СуммаПоСчету") <> Неопределено Тогда
			СуммаПоСчетуВсего		= ТаблицаЗначений.Итог("СуммаПоСчету");
		КонецЕсли;
		Если ТаблицаЗначений.Колонки.Найти("Оплачено") <> Неопределено Тогда
			ОплаченоВсего			= ТаблицаЗначений.Итог("Оплачено");
		КонецЕсли;
		Если ТаблицаЗначений.Колонки.Найти("ОсталосьОплатить") <> Неопределено Тогда
			ОсталосьОплатитьВсего	= ТаблицаЗначений.Итог("ОсталосьОплатить");
		КонецЕсли;
		Если ТаблицаЗначений.Колонки.Найти("ОсталосьОтгрузить") <> Неопределено Тогда
			ОсталосьОтгрузитьВсего	= ТаблицаЗначений.Итог("ОсталосьОтгрузить");
		КонецЕсли;
		Если ТаблицаЗначений.Колонки.Найти("СуммаДолга") <> Неопределено Тогда
			СуммаДолгаВсего			= ТаблицаЗначений.Итог("СуммаДолга");
		КонецЕсли;
	КонецЕсли;
//Рарус Владимир Подрезов Конец
	
    
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицуСчетов(Команда)
	
	// {Рарус koteld 2017.02 techlab@rarus.ru 
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("Обработка.УправлениеСчетамиИРеализациямиУслуг.ОбновитьТаблицуСчетов");
    // }Рарус koteld 2017.02 techlab@rarus.ru 

    Элементы.ТаблицаСчетов.Обновить();
    
    РассчитатьИтогиНаСервере();
    
КонецПроцедуры

&НаСервере
Процедура ИсключитьЗаявкуИзУСРНаСервере(ЗаявкаНаАрендуТехники)
    
    ЗаявкаНаАрендуТехникиОбъект = ЗаявкаНаАрендуТехники.ПолучитьОбъект();
    ЗаявкаНаАрендуТехникиОбъект.ИсключитьИзУСР = Истина;
    
    Попытка
        ЗаявкаНаАрендуТехникиОбъект.Записать(РежимЗаписиДокумента.Проведение);
    Исключение
    КонецПопытки;
    
    ЗаполнитьНаСервере();
    
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьЗаявкуИзУСР(Команда)
    
    ТекущиеДанные = Элементы.ЗаявкиНаАрендуТехники.ТекущиеДанные;
    
    Если ТекущиеДанные <> Неопределено Тогда
        ИсключитьЗаявкуИзУСРНаСервере(ТекущиеДанные.ЗаявкаНаАрендуТехники);
//Рарус Владимир Подрезов 28.09.2017
		Если Объект.РазворачиватьФормирования Тогда
			Для Каждого текСтрока Из ЗаявкиНаАрендуТехники.ПолучитьЭлементы() Цикл
		    	Элементы.ЗаявкиНаАрендуТехники.Развернуть(текСтрока.ПолучитьИдентификатор(), Истина);
			КонецЦикла;
		КонецЕсли;
//Рарус Владимир Подрезов Конец
    КонецЕсли;    
    
КонецПроцедуры

&НаСервере
Процедура ИсключитьСчетИзУСРНаСервере(ЗаказКлиента)
    
    ЗаказКлиентаОбъект = ЗаказКлиента.ПолучитьОбъект();
    ЗаказКлиентаОбъект.пкИсключитьИзУСР = Истина;
    ЗаказКлиентаОбъект.ОбменДанными.Загрузка = Истина;
    Попытка
        //ЗаказКлиентаОбъект.Записать(РежимЗаписиДокумента.Проведение);
        ЗаказКлиентаОбъект.Записать(РежимЗаписиДокумента.Запись);
    Исключение
    КонецПопытки;
    
    ЗаполнитьЗаказыНаСервере();
    
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьСчетИзУСР(Команда)
    
    ТекущиеДанные = Элементы.ЗаказыКлиентовДляРеализаций.ТекущиеДанные;
    
    Если ТекущиеДанные <> Неопределено Тогда
        ИсключитьСчетИзУСРНаСервере(ТекущиеДанные.ЗаказКлиента);
//Рарус Владимир Подрезов 28.09.2017
		Если Объект.РазворачиватьФормирования Тогда
			Для Каждого текСтрока Из ЗаказыКлиентовДляРеализаций.ПолучитьЭлементы() Цикл
		    	Элементы.ЗаказыКлиентовДляРеализаций.Развернуть(текСтрока.ПолучитьИдентификатор(), Истина);
			КонецЦикла;
		КонецЕсли;
//Рарус Владимир Подрезов Конец
    КонецЕсли;
    
КонецПроцедуры

//Рарус Владимир Подрезов 27.03.2017
&НаСервереБезКонтекста
Функция ОпределитьЗамененнуюМодель(тЗаявкаНаАрендуТехники, тМодель)
    
    тЗамененнаяМодель = Справочники.Номенклатура.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(тЗаявкаНаАрендуТехники) И ЗначениеЗаполнено(тМодель) Тогда
		Для Каждого текСтрока Из тЗаявкаНаАрендуТехники.Товары Цикл
			Если текСтрока.Номенклатура = тМодель Тогда
				тЗамененнаяМодель = текСтрока.ЗамененнаяМодель;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат тЗамененнаяМодель;
	
КонецФункции
//Рарус Владимир Подрезов Конец

//Рарус Владимир Подрезов 31.08.2017
&НаКлиенте
Процедура УстановитьКомментарийСчета(Команда)
	
	Если Элементы.ТаблицаСчетов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Обработка.пкУправлениеСчетамиИРеализациямиУслуг.Форма.ФормаКомментироватьСчет", 
		Новый Структура("Счет", Элементы.ТаблицаСчетов.ТекущиеДанные.Ссылка), 
		ЭтаФорма,
		,
		,
		,
		Новый ОписаниеОповещения("УстановитьКомментарийСчетаЗавершение", ЭтаФорма), 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКомментарийСчетаЗавершение(РезультатОбработки, ДополнительныеПараметры) Экспорт
	
	Если РезультатОбработки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если РезультатОбработки.свойство("Счет")
		И РезультатОбработки.Свойство("Комментарий") 
		И РезультатОбработки.Свойство("Примечание") 
	Тогда
		ЗаписатьКомментарийСчетаНаСервере(РезультатОбработки.Счет, РезультатОбработки.Комментарий, РезультатОбработки.Примечание);
	КонецЕсли;
	
    Элементы.ТаблицаСчетов.Обновить();
    //РассчитатьИтогиНаСервере();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьКомментарийСчетаНаСервере(тСчет, тКомментарий, тПримечание)
	
	Если Не ЗначениеЗаполнено(тСчет) Тогда
		Возврат;
	КонецЕсли;
	
	тОбъект = тСчет.ПолучитьОбъект();
	тОбъект.Комментарий		= тКомментарий;
	тОбъект.пкПримечание	= тПримечание;
	тОбъект.ОбменДанными.Загрузка = Истина;
	Попытка
		тОбъект.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
	Исключение
		тОписание = ОписаниеОшибки();
		тСообщение = Новый СообщениеПользователю;
		тСообщение.Текст = тОписание;
		тСообщение.Сообщить();
	КонецПопытки;
	
КонецПроцедуры


&НаКлиенте
Процедура СохранитьДанныеФормыПриИзменении(Элемент)
	
	Если СохранитьДанныеФормы Тогда
		ЭтаФорма.АвтоматическоеСохранениеДанныхВНастройках = АвтоматическоеСохранениеДанныхФормыВНастройках.Использовать;
	Иначе	
		ЭтаФорма.АвтоматическоеСохранениеДанныхВНастройках = АвтоматическоеСохранениеДанныхФормыВНастройках.НеИспользовать;	
	КонецЕсли;

КонецПроцедуры
//Рарус Владимир Подрезов Конец
