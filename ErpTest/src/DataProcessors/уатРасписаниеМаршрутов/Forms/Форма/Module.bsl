
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		АвтоТест = Истина;
	КонецЕсли;
	
	уатЗащищенныеФункцииСервер.уатОбработкаФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	уатЗащищенныеФункцииКлиент.уатОбработкаФормаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТекРодитель = Элементы.ТабличноеПолеДеревоМаршрутов.ТекущиеДанные;
	Если ТекРодитель <> Неопределено Тогда
		ТекРодитель = ТекРодитель.Ссылка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекРодитель) Тогда
		уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(ТабличноеПолеМаршруты.Отбор, "Родитель", ТекРодитель, ВидСравненияКомпоновкиДанных.ВИерархии);
	Иначе
		уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(ТабличноеПолеМаршруты.Отбор, "Родитель",,, Ложь);
	КонецЕсли;
	
	ТекущийМаршрут = Элементы.ТабличноеПолеДеревоМаршрутов.ТекущиеДанные;
	Если ТекущийМаршрут <> Неопределено Тогда
		ТекущийМаршрут = ТекущийМаршрут.Ссылка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийМаршрут) Тогда
		уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(ТабличноеПолеВыходы.Отбор, "МаршрутВыхода", ТекущийМаршрут);
	Иначе
		уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(ТабличноеПолеВыходы.Отбор, "МаршрутВыхода",,, Ложь);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТабличноеПолеДеревоМаршрутовПриАктивизацииСтроки(Элемент)
	ТекРодитель = Элементы.ТабличноеПолеДеревоМаршрутов.ТекущиеДанные;
	Если ТекРодитель <> Неопределено Тогда
		ТекРодитель = ТекРодитель.Ссылка;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекРодитель) Тогда
		уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(ТабличноеПолеМаршруты.Отбор, "Родитель", ТекРодитель, ВидСравненияКомпоновкиДанных.ВИерархии);
	Иначе
		уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(ТабличноеПолеМаршруты.Отбор, "Родитель",,, Ложь);
		//уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(ТабличноеПолеВыходы.Отбор, "Владелец", Неопределено);
	КонецЕсли;
	
	Если Элементы.ТабличноеПолеМаршруты.ТекущаяСтрока = Неопределено Тогда
		Попытка
			Элементы.ТабличноеПолеМаршруты.ТекущаяСтрока = ПолучитьМаршрутПриОткрытииФормы(Элементы.ТабличноеПолеДеревоМаршрутов.ТекущиеДанные.Ссылка);
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеМаршрутыПриАктивизацииСтроки(Элемент)
	
	ТекСтрока = Элементы.ТабличноеПолеВыходы.ТекущиеДанные;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Объект.Маршрут = Неопределено;
		Объект.Выход = Неопределено;
	Иначе
		Объект.Маршрут = Элемент.ТекущиеДанные.Ссылка;
		Если ЕстьВыходыДляМаршрута(Объект.Маршрут)
			И ТекСтрока <> Неопределено Тогда
			
			Объект.Выход = ТекСтрока.Ссылка;
		Иначе
			Объект.Выход = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьРейсы();
	
	ТекущийМаршрут = ?(Элементы.ТабличноеПолеМаршруты.ТекущиеДанные = Неопределено,
		Неопределено, Элементы.ТабличноеПолеМаршруты.ТекущиеДанные.Ссылка);
		
	уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(ТабличноеПолеВыходы.Отбор, "Владелец", ТекущийМаршрут);
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеВыходыПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Объект.Выход = Элемент.ТекущиеДанные.Ссылка;
		ЗаполнитьРейсы();
	Иначе
		Объект.Выход = Неопределено;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеВыходыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)
	Если Копирование Тогда
		Отказ = Истина;
		КоманднаяПанельВыходыСкопировать(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеРейсовВыбор(Элемент, Область, СтандартнаяОбработка)
	мсвИзменитьЗаписиРегистра = Новый Массив;
	
	Для СчСтрока = Область.Верх По Область.Низ Цикл
		Для СчСтолбец = Область.Лево По Область.Право Цикл
			ТекОбласть = РасписаниеРейсов.Область(СчСтрока, СчСтолбец, СчСтрока, СчСтолбец);
			
			//проверяем вхождение области в границы таблицы
			Если ТекОбласть.Лево <= 2
				ИЛИ ТекОбласть.Верх = 1
				ИЛИ ТекОбласть.Лево > РасписаниеРейсов.ШиринаТаблицы
				ИЛИ ТекОбласть.Низ > РасписаниеРейсов.ВысотаТаблицы-1 Тогда
				Продолжить;
			КонецЕсли;
			
			НомерДняНедели = (ТекОбласть.Лево-2)%9;
			флДеньНедели = Ложь;
			Если НомерДняНедели = 3 ИЛИ НомерДняНедели = 4 ИЛИ НомерДняНедели = 5 ИЛИ НомерДняНедели = 6
				ИЛИ НомерДняНедели = 7 ИЛИ НомерДняНедели = 8 ИЛИ НомерДняНедели = 0 Тогда 
				флДеньНедели = Истина;
			КонецЕсли;
			
			Если НЕ флДеньНедели Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекОбласть.Верх > 2 Тогда //меняем флажок текущей ячейки
				ТекОбласть.Значение = НЕ ТекОбласть.Значение;
				мсвИзменитьЗаписиРегистра.Добавить(Новый Структура("Лево, Низ", ТекОбласть.Лево, ТекОбласть.Низ));
				
			ИначеЕсли ТекОбласть.Верх = 2 Тогда //ставим флажок всего столбца
				флУстановить = Ложь;
				Для НомТекСтроки = 3 По РасписаниеРейсов.ВысотаТаблицы-1 Цикл
					Если НЕ РасписаниеРейсов.Область(НомТекСтроки, ТекОбласть.Лево, НомТекСтроки, ТекОбласть.Лево).Значение Тогда
						флУстановить = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Для НомТекСтроки = 3 По РасписаниеРейсов.ВысотаТаблицы-1 Цикл
					ТекОбласть2 = РасписаниеРейсов.Область(НомТекСтроки, ТекОбласть.Лево, НомТекСтроки, ТекОбласть.Лево);
					ТекОбласть2.Значение = флУстановить;
					мсвИзменитьЗаписиРегистра.Добавить(Новый Структура("Лево, Низ", ТекОбласть2.Лево, ТекОбласть2.Низ));
				КонецЦикла;
				
			КонецЕсли;
			
			СтандартнаяОбработка = Ложь;
		КонецЦикла;
	КонецЦикла;
	
	ИзменитьЗаписиРегистра(мсвИзменитьЗаписиРегистра);
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеРейсовПриИзмененииСодержимогоОбласти(Элемент, Область)
	Если Область.СодержитЗначение И ТипЗнч(Область.Значение) = Тип("Дата") Тогда //время выезда/возвращения
		мсвИзменитьЗаписиРегистра = Новый Массив;
		мсвИзменитьЗаписиРегистра.Добавить(Новый Структура("Лево, Низ", Область.Лево, Область.Низ));
		ИзменитьЗаписиРегистра(мсвИзменитьЗаписиРегистра);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КоманднаяПанельПунктыНовыйПункт(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Маршрут) ИЛИ уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.Маршрут, "ЭтоГруппа") Тогда
		ПоказатьПредупреждение(, "Не выбран маршрут!");
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Маршрут, Пункт, УИДПункта, ЭтоНовый", Объект.Маршрут,,, Истина);
	ОповещениеЗакрытиеФормы = Новый ОписаниеОповещения("НовыйПунктЗакрытиеФормыПункта", ЭтотОбъект);
	ОткрытьФорму("Обработка.уатРасписаниеМаршрутов.Форма.ФормаПункта", ПараметрыФормы, ЭтаФорма,,,,ОповещениеЗакрытиеФормы, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура НовыйПунктЗакрытиеФормыПункта(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ЗаполнитьРейсы();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельПунктыИзменитьПункт(Команда)
	Если Не ЗначениеЗаполнено(Объект.Маршрут) Тогда
		ПоказатьПредупреждение(, "Не выбран маршрут!");
		Возврат;
	КонецЕсли;
	
	мОбласти = РасписаниеРейсов.ВыделенныеОбласти;
	Если мОбласти.Количество() > 0 Тогда 
		
		мОбласть = мОбласти[0];
		мНомерСтроки = мОбласть.Верх - 2;
		
		ПунктОтправления = НайтиПунктОтправленияЭтапаМаршрута(Объект.Маршрут, мНомерСтроки);
		Если ПунктОтправления <> Неопределено Тогда
			ПараметрыФормы = Новый Структура("Маршрут, Пункт, УИДПункта, ЭтоНовый", Объект.Маршрут, ПунктОтправления, мНомерСтроки, Ложь);
			ОповещениеЗакрытиеФормы = Новый ОписаниеОповещения("ИзменитьПунктЗакрытиеФормыПункта", ЭтотОбъект);
			ОткрытьФорму("Обработка.уатРасписаниеМаршрутов.Форма.ФормаПункта", ПараметрыФормы, ЭтаФорма,,,,ОповещениеЗакрытиеФормы, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ПоказатьПредупреждение(, "Не выбран пункт!")
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПунктЗакрытиеФормыПункта(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ЗаполнитьРейсы();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельПунктыУдалитьПункт(Команда)
	Перем Отказ;
	
	Если Не ЗначениеЗаполнено(Объект.Маршрут) Тогда
		ПоказатьПредупреждение(, "Не выбран маршрут!");
		Возврат;
	КонецЕсли;
	
	мОбласти = РасписаниеРейсов.ВыделенныеОбласти;
	Если мОбласти.Количество() > 0 Тогда 
		
		мОбласть = мОбласти[0];
		мНомерСтроки = мОбласть.Верх - 2;
		
		Если ЕстьЭтапМаршрутаПоУИД(Объект.Маршрут, мНомерСтроки) Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("КоманднаяПанельПунктыУдалитьПунктЗавершение", ЭтотОбъект, Новый Структура("мНомерСтроки", мНомерСтроки)), "Удалить пункт?", РежимДиалогаВопрос.ОКОтмена);
		Иначе
			ПоказатьПредупреждение(, "Не выбран пункт!")
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры
&НаКлиенте
Процедура КоманднаяПанельПунктыУдалитьПунктЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    мНомерСтроки = ДополнительныеПараметры.мНомерСтроки;
    
    Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
        ПунктМаршрутаУдалить(Объект.Маршрут, мНомерСтроки);
        ЗаполнитьРейсы();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельПунктыУстановитьФлажки(Команда)
	Если Объект.Маршрут <> Неопределено И Объект.Выход <> Неопределено Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("КоманднаяПанельПунктыУстановитьФлажкиЗавершение", ЭтотОбъект),
		"Будут отмечены все дни недели по всем рейсам!
		|Маршрут """ + Объект.Маршрут + """, выход """ + Объект.Выход + """
		|Продолжить?", РежимДиалогаВопрос.ОКОтмена);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельПунктыУстановитьФлажкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.ОК Тогда
        КоманднаяПанельПунктыУстановитьФлажки_Сервер();
        ЗаполнитьРейсы();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельПунктыСнятьФлажки(Команда)
	Если Объект.Маршрут <> Неопределено И Объект.Выход <> Неопределено Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("КоманднаяПанельПунктыСнятьФлажкиЗавершение", ЭтотОбъект),
		"Будут сняты отметки со всех дней недели по всем рейсам!
		|Маршрут """ + Объект.Маршрут + """, выход """ + Объект.Выход + """
		|Продолжить?", РежимДиалогаВопрос.ОКОтмена);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельПунктыСнятьФлажкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.ОК Тогда
        КоманднаяПанельПунктыСнятьФлажки_Сервер();
        ЗаполнитьРейсы();
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура КоманднаяПанельПунктыПеречитатьРасписание(Команда)
	ЗаполнитьРейсы();
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельМаршрутыПечатьМаршрута(Команда)
	
	ТабличныйДокументМаршруты=ПечатьМаршрута_Вызов_Функции(Объект.Маршрут, Объект.Выход);
	ТабличныйДокументМаршруты.Показать();
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельВыходыСкопировать(Команда)
	
	Перем мВремя;
	
	Если Не ЗначениеЗаполнено(Объект.Выход) Тогда
		ПоказатьПредупреждение(, "Не выбран выход!");
		Возврат;
	КонецЕсли;
	
	//мОбласти = ЭлементыФормы.РасписаниеРейсов.ВыделенныеОбласти;
	//Если мОбласти.Количество() > 0 Тогда 
	//	
	//	мРейс = мОбласти[0].Расшифровка;
	//	Если Тип("СправочникСсылка.уатРейсыМаршрутов") = ТипЗнч(мРейс) Тогда
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыходыСкопироватьЗакрытиеФормы", ЭтотОбъект);
	ОткрытьФорму("Обработка.уатРасписаниеМаршрутов.Форма.ФормаВводаВремениПриКопировании",, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	//	Иначе
	//		
	//		ПоказатьПредупреждение(, "Не выбран рейс!")
	//		
	//	КонецЕсли;	
	//	
	//КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходыСкопироватьЗакрытиеФормы(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		КоманднаяПанельВыходыСкопировать_Сервер(Результат);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельРасписаниеРейсовДобавитьРейс(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Маршрут) Тогда
		ПоказатьПредупреждение(, "Не выбран маршрут!");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Выход) Тогда
		ПоказатьПредупреждение(, "Не выбран выход!");
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Маршрут, Рейс, ЭтоНовый", Объект.Маршрут,, Истина);
	ОповещениеЗакрытиеФормы = Новый ОписаниеОповещения("ДобавитьРейсЗакрытиеФормы", ЭтотОбъект);
	ОткрытьФорму("Обработка.уатРасписаниеМаршрутов.Форма.ФормаРейса", ПараметрыФормы, ЭтаФорма,,,,ОповещениеЗакрытиеФормы, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРейсЗакрытиеФормы(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ЗаполнитьРейсы();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельРасписаниеРейсовИзменитьРейс(Команда)
	//Если ЗначениеНеЗаполнено(Маршрут) Тогда
	//	ПоказатьПредупреждение(, "Не выбран маршрут!");
	//	Возврат;
	//КонецЕсли;
	
	мОбласти = РасписаниеРейсов.ВыделенныеОбласти;
	Если мОбласти.Количество() > 0 Тогда 
		мРейс = мОбласти[0].Расшифровка;
		Если Тип("СправочникСсылка.уатРейсыМаршрутов") = ТипЗнч(мРейс) Тогда
			ПараметрыФормы = Новый Структура("Маршрут, Рейс, ЭтоНовый", Объект.Маршрут, мРейс, Ложь);
			ОповещениеЗакрытиеФормы = Новый ОписаниеОповещения("ИзменитьРейсЗакрытиеФормы", ЭтотОбъект);
			ОткрытьФорму("Обработка.уатРасписаниеМаршрутов.Форма.ФормаРейса", ПараметрыФормы, ЭтаФорма,,,,ОповещениеЗакрытиеФормы, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ПоказатьПредупреждение(, "Не выбран рейс!")
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРейсЗакрытиеФормы(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ЗаполнитьРейсы();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельРасписаниеРейсовУдалитьРейс(Команда)
	//Если ЗначениеНеЗаполнено(Маршрут) Тогда
	//	ПоказатьПредупреждение(, "Не выбран маршрут!");
	//	Возврат;
	//КонецЕсли;
	
	мОбласти = РасписаниеРейсов.ВыделенныеОбласти;
	Если мОбласти.Количество() > 0 Тогда 
		мРейс = мОбласти[0].Расшифровка;
		Если Тип("СправочникСсылка.уатРейсыМаршрутов") = ТипЗнч(мРейс) Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("КоманднаяПанельРасписаниеРейсовУдалитьРейсЗавершение", ЭтотОбъект, Новый Структура("мРейс", мРейс)), "Удалить рейс?", РежимДиалогаВопрос.ОКОтмена);
		Иначе
			ПоказатьПредупреждение(, "Не выбран рейс!", 5)
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельРасписаниеРейсовУдалитьРейсЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    мРейс = ДополнительныеПараметры.мРейс;
    
    Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
        РейсУдалить(мРейс);
        ЗаполнитьРейсы();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельРасписаниеРейсовСкопироватьРейс(Команда)
	
	//Если ЗначениеНеЗаполнено(Маршрут) Тогда
	//	ПоказатьПредупреждение(, "Не выбран маршрут!");
	//	Возврат;
	//КонецЕсли;
	
	Перем мВремя;
	
	мОбласти = РасписаниеРейсов.ВыделенныеОбласти;
	Если мОбласти.Количество() > 0 Тогда 
		
		мРейс = мОбласти[0].Расшифровка;
		Если Тип("СправочникСсылка.уатРейсыМаршрутов") = ТипЗнч(мРейс) Тогда
			
			ПоказатьВводДаты(Новый ОписаниеОповещения("КоманднаяПанельРасписаниеРейсовСкопироватьРейсЗавершение", ЭтотОбъект, Новый Структура("мРейс, мВремя", мРейс, мВремя)), мВремя, "Продолжительность", ЧастиДаты.Время);
			
		Иначе
			
			ПоказатьПредупреждение(, "Не выбран рейс!")
			
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельРасписаниеРейсовСкопироватьРейсЗавершение(Дата, ДополнительныеПараметры) Экспорт
    
    мРейс = ДополнительныеПараметры.мРейс;
    мВремя = ?(Дата = Неопределено, ДополнительныеПараметры.мВремя, Дата);
    
    
    Если (Дата <> Неопределено) Тогда
        СкопироватьРейс_Вызов_Функции(Объект.Выход, мРейс, мВремя);
        ЗаполнитьРейсы();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельРасписаниеРейсовПересчитатьВремяОтправления(Команда)
	Перем мВремя;
	
	Если Не ЗначениеЗаполнено(Объект.Маршрут) Тогда
		ПоказатьПредупреждение(, "Не выбран маршрут!");
		Возврат;
	КонецЕсли;
	
	мОбласти = РасписаниеРейсов.ВыделенныеОбласти;
	Если мОбласти.Количество() > 0 Тогда 
		мРейс = мОбласти[0].Расшифровка;
		Если Тип("СправочникСсылка.уатРейсыМаршрутов") = ТипЗнч(мРейс) Тогда
			ПоказатьВводДаты(Новый ОписаниеОповещения("КоманднаяПанельРасписаниеРейсовПересчитатьВремяОтправленияЗавершение", ЭтотОбъект, Новый Структура("мРейс, мВремя", мРейс, мВремя)), мВремя, "Укажите временную разницу", ЧастиДаты.Время);
		Иначе
			ПоказатьПредупреждение(, "Не выбран рейс!")
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельРасписаниеРейсовПересчитатьВремяОтправленияЗавершение(Дата, ДополнительныеПараметры) Экспорт
    
    мРейс = ДополнительныеПараметры.мРейс;
    мВремя = ?(Дата = Неопределено, ДополнительныеПараметры.мВремя, Дата);
    
    Если ПересчитатьВремяОтправления_Вызов_Функции(Объект.Маршрут, Объект.Выход, мРейс, мВремя) Тогда
        ЗаполнитьРейсы();
    КонецЕсли;

КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьМаршрутПриОткрытииФормы(СсылкаГруппы)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	             |	СправочникуатМаршруты.Ссылка
	             |ИЗ
	             |	Справочник.уатМаршруты КАК СправочникуатМаршруты
	             |ГДЕ
	             |	СправочникуатМаршруты.Родитель = &ГруппаМаршрутов";
	
	Запрос.Параметры.Вставить("ГруппаМаршрутов", СсылкаГруппы);
	РезультатЗапроса=Запрос.Выполнить();
	Возврат ?(РезультатЗапроса.Пустой(), Справочники.уатМаршруты.ПустаяСсылка(), РезультатЗапроса.Выгрузить()[0].Ссылка);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРейсы()
	
	Если ЗначениеЗаполнено(Объект.Маршрут) И ЗначениеЗаполнено(Объект.Выход) Тогда
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "Расписание_Маршрутов";
	
		ЗаполнитьРейсыМаршрута_Вызов_Функции(ТабДокумент, Объект.Маршрут, Объект.Выход, Истина);
		РасписаниеРейсов = ТабДокумент;
		
		РамкаГруппыРейсы = "Пункты и рейсы (" + Объект.Маршрут + ", " + Объект.Выход + ")";
		
	Иначе
		РасписаниеРейсов.Очистить();
		РамкаГруппыРейсы = "Пункты и рейсы";
	
	КонецЕсли;
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьВыходыДляМаршрута(Маршрут)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатВыходыМаршрутов.Ссылка
	|ИЗ
	|	Справочник.уатВыходыМаршрутов КАК уатВыходыМаршрутов
	|ГДЕ
	|	уатВыходыМаршрутов.Владелец = &Владелец");
	Запрос.УстановитьПараметр("Владелец", Маршрут);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции

&НаСервере
Функция НайтиПунктОтправленияЭтапаМаршрута(МаршрутПоиска, мУИДПункта)
	Если Не ЗначениеЗаполнено(МаршрутПоиска) Тогда Возврат Неопределено; КонецЕсли;
	ЭтапМаршрута=МаршрутПоиска.Этапы.Найти(мУИДПункта, "УИД");
	Возврат ?(ЭтапМаршрута=Неопределено, Неопределено, ЭтапМаршрута.ПунктОтправления);
КонецФункции

&НаСервере
Функция ЕстьЭтапМаршрутаПоУИД(МаршрутПоиска, мУИДПункта)
	Если Не ЗначениеЗаполнено(МаршрутПоиска) Тогда Возврат Неопределено; КонецЕсли;
	Возврат ?(МаршрутПоиска.Этапы.Найти(мУИДПункта, "УИД")=Неопределено, Ложь, Истина);
КонецФункции

&НаСервере
Функция ПунктМаршрутаУдалить(МаршрутУдаления, мУИДПункта)
	спрМаршрут 	= МаршрутУдаления.ПолучитьОбъект();
	УдалитьПункт(МаршрутУдаления, мУИДПункта);
	ЭтапУдаления=спрМаршрут.Этапы.Найти(мУИДПункта, "УИД");
	спрМаршрут.Этапы.Удалить(спрМаршрут.Этапы.Индекс(ЭтапУдаления));
	спрМаршрут.Записать();
КонецФункции

&НаСервере
// Процедура удаляет пункт маршрута по регистру уатРасписаниеРейсов. Только для решения УАТ ПП.
//
Процедура УдалитьПункт(спрМаршрут, мУИДПункта) Экспорт
	
	Если уатРаботаСМетаданными.уатЕстьРегистрСведений("уатРасписаниеРейсов") Тогда
		
		НаборЗаписей = РегистрыСведений.уатРасписаниеРейсов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Маршрут.Значение = спрМаршрут;
		НаборЗаписей.Отбор.Маршрут.Использование = Истина;
		НаборЗаписей.Отбор.УИДПункта.Значение = мУИДПункта;
		НаборЗаписей.Отбор.УИДПункта.Использование = Истина;
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0 Тогда
			
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
			
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура РейсУдалить(мРейс)
	мОбъектРейс	= мРейс.ПолучитьОбъект();
	мОбъектРейс.Удалить();
КонецПроцедуры

&НаСервере
Функция КоманднаяПанельВыходыСкопировать_Сервер(мВремя)
	Если ЗначениеЗаполнено(мВремя) Тогда
		мНовыйВыход	= Объект.Выход.ПолучитьОбъект().Скопировать();
		мНовыйВыход.УстановитьНовыйКод();
		мНовыйВыход.ВыездИзГаража = Объект.Выход.ВыездИзГаража + (мВремя - '00010101');
		мНовыйВыход.ПрибытиеНаНачальныйПункт = Объект.Выход.ПрибытиеНаНачальныйПункт + (мВремя - '00010101');
		мНовыйВыход.ВыездИзКонечногоПункта = Объект.Выход.ВыездИзКонечногоПункта + (мВремя - '00010101');
		мНовыйВыход.ВозвращениеВГараж = Объект.Выход.ВозвращениеВГараж + (мВремя - '00010101');
		мНовыйВыход.Записать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	уатРасписаниеРейсов.Маршрут,
		|	уатРасписаниеРейсов.Выход,
		|	уатРасписаниеРейсов.Рейс,
		|	уатРасписаниеРейсов.УИДПункта,
		|	уатРасписаниеРейсов.ВремяПрибытия,
		|	уатРасписаниеРейсов.ВремяУбытия,
		|	уатРасписаниеРейсов.Пн,
		|	уатРасписаниеРейсов.Вт,
		|	уатРасписаниеРейсов.Ср,
		|	уатРасписаниеРейсов.Чт,
		|	уатРасписаниеРейсов.Пт,
		|	уатРасписаниеРейсов.Сб,
		|	уатРасписаниеРейсов.Вс
		|ИЗ
		|	РегистрСведений.уатРасписаниеРейсов КАК уатРасписаниеРейсов
		|ГДЕ
		|	уатРасписаниеРейсов.Выход = &Выход";
		
		Запрос.УстановитьПараметр("Выход", Объект.Выход);
		ВыборкаЗаписей = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаЗаписей.Следующий() Цикл
			
			мЗапись = РегистрыСведений.уатРасписаниеРейсов.СоздатьМенеджерЗаписи();
			мЗапись.ВремяПрибытия	= ВыборкаЗаписей.ВремяПрибытия + (мВремя - '00010101');
			мЗапись.ВремяУбытия		= ВыборкаЗаписей.ВремяУбытия + (мВремя - '00010101');
			мЗапись.Маршрут			= ВыборкаЗаписей.Маршрут;
			мЗапись.Рейс			= ВыборкаЗаписей.Рейс;
			мЗапись.Выход			= мНовыйВыход.Ссылка;
			мЗапись.УИДПункта		= ВыборкаЗаписей.УИДПункта;
			мЗапись.Пн = ВыборкаЗаписей.Пн;
			мЗапись.Вт = ВыборкаЗаписей.Вт;
			мЗапись.Ср = ВыборкаЗаписей.Ср;
			мЗапись.Чт = ВыборкаЗаписей.Чт;
			мЗапись.Пт = ВыборкаЗаписей.Пт;
			мЗапись.Сб = ВыборкаЗаписей.Сб;
			мЗапись.Вс = ВыборкаЗаписей.Вс;
			мЗапись.Записать();
			
		КонецЦикла;
		
		ЗаполнитьРейсы();
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ИзменитьЗаписиРегистра(мсвЗаписиРегистра)
	Для Каждого ТекЗапись Из мсвЗаписиРегистра Цикл
		ТекОбластьЛево = ТекЗапись.Лево;
		ТекОбластьНиз = ТекЗапись.Низ;
		
		НомерРейса = Цел((ТекОбластьЛево-3)/9); //начинается с 0!
		мРейс = РасписаниеРейсов.Область(1, 3 + 9*НомерРейса, 1, 11 + 9*НомерРейса).Расшифровка;
		
		мПункт = РасписаниеРейсов.Область(ТекОбластьНиз, 1, ТекОбластьНиз, 1).Расшифровка;
		
		МенеджерЗаписиРейсы = РегистрыСведений.уатРасписаниеРейсов.СоздатьМенеджерЗаписи();
		МенеджерЗаписиРейсы.Маршрут = Объект.Маршрут;
		МенеджерЗаписиРейсы.Выход = Объект.Выход;
		МенеджерЗаписиРейсы.УИДПункта = мПункт;
		МенеджерЗаписиРейсы.Рейс = мРейс;
		
		МенеджерЗаписиРейсы.ВремяПрибытия = РасписаниеРейсов.Область(ТекОбластьНиз, 3 + 9*НомерРейса, ТекОбластьНиз, 3 + 9*НомерРейса).Значение;
		МенеджерЗаписиРейсы.ВремяУбытия = РасписаниеРейсов.Область(ТекОбластьНиз, 4 + 9*НомерРейса, ТекОбластьНиз, 4 + 9*НомерРейса).Значение;
		
		МенеджерЗаписиРейсы.Пн = РасписаниеРейсов.Область(ТекОбластьНиз, 5 + 9*НомерРейса, ТекОбластьНиз, 5 + 9*НомерРейса).Значение;
		МенеджерЗаписиРейсы.Вт = РасписаниеРейсов.Область(ТекОбластьНиз, 6 + 9*НомерРейса, ТекОбластьНиз, 6 + 9*НомерРейса).Значение;
		МенеджерЗаписиРейсы.Ср = РасписаниеРейсов.Область(ТекОбластьНиз, 7 + 9*НомерРейса, ТекОбластьНиз, 7 + 9*НомерРейса).Значение;
		МенеджерЗаписиРейсы.Чт = РасписаниеРейсов.Область(ТекОбластьНиз, 8 + 9*НомерРейса, ТекОбластьНиз, 8 + 9*НомерРейса).Значение;
		МенеджерЗаписиРейсы.Пт = РасписаниеРейсов.Область(ТекОбластьНиз, 9 + 9*НомерРейса, ТекОбластьНиз, 9 + 9*НомерРейса).Значение;
		МенеджерЗаписиРейсы.Сб = РасписаниеРейсов.Область(ТекОбластьНиз, 10 + 9*НомерРейса, ТекОбластьНиз, 10 + 9*НомерРейса).Значение;
		МенеджерЗаписиРейсы.Вс = РасписаниеРейсов.Область(ТекОбластьНиз, 11 + 9*НомерРейса, ТекОбластьНиз, 11 + 9*НомерРейса).Значение;
		
		Попытка
			МенеджерЗаписиРейсы.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция КоманднаяПанельПунктыУстановитьФлажки_Сервер()
	//прочитаем регистр с отбором по маршруту и выходу
	НЗ = РегистрыСведений.уатРасписаниеРейсов.СоздатьНаборЗаписей();
	НЗ.Отбор.Маршрут.Установить(Объект.Маршрут);
	НЗ.Отбор.Выход.Установить(Объект.Выход);
	НЗ.Прочитать();
	тблРасписаниеРегистр = НЗ.Выгрузить();
	
	//добавляем в таблицу регистра недостающие пункты из ТЧ Этапы спр. Маршруты
	ВыборкаРейсы = Справочники.уатРейсыМаршрутов.Выбрать(, Объект.Маршрут);
	Пока ВыборкаРейсы.Следующий() Цикл
		Для Каждого ТекЭтап Из Объект.Маршрут.Этапы Цикл
			Если НЕ ЗначениеЗаполнено(ТекЭтап.УИД) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура("Маршрут, Выход, Рейс, УИДПункта", Объект.Маршрут, Объект.Выход, ВыборкаРейсы.Ссылка, ТекЭтап.УИД);
			мсвЗаписи = тблРасписаниеРегистр.НайтиСтроки(СтруктураПоиска);
			Если мсвЗаписи.Количество() = 0 Тогда
				НоваяЗапись = тблРасписаниеРегистр.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураПоиска);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	//отмечаем все дни недели по всем записям
	Для Каждого ТекСтрока Из тблРасписаниеРегистр Цикл
		ТекСтрока.Пн = Истина;
		ТекСтрока.Вт = Истина;
		ТекСтрока.Ср = Истина;
		ТекСтрока.Чт = Истина;
		ТекСтрока.Пт = Истина;
		ТекСтрока.Сб = Истина;
		ТекСтрока.Вс = Истина;
	КонецЦикла;
	НЗ.Загрузить(тблРасписаниеРегистр);
	
	НЗ.Записать();
КонецФункции

&НаСервере
Функция КоманднаяПанельПунктыСнятьФлажки_Сервер()
	НЗ = РегистрыСведений.уатРасписаниеРейсов.СоздатьНаборЗаписей();
	НЗ.Отбор.Маршрут.Установить(Объект.Маршрут);
	НЗ.Отбор.Выход.Установить(Объект.Выход);
	НЗ.Прочитать();
	Для Каждого ТекСтрока Из НЗ Цикл
		ТекСтрока.Пн = Ложь;
		ТекСтрока.Вт = Ложь;
		ТекСтрока.Ср = Ложь;
		ТекСтрока.Чт = Ложь;
		ТекСтрока.Пт = Ложь;
		ТекСтрока.Сб = Ложь;
		ТекСтрока.Вс = Ложь;
	КонецЦикла;
	НЗ.Записать();
КонецФункции

&НаСервере
Функция ЗаполнитьРейсыМаршрута_Вызов_Функции(ТабДокумент, Маршрут, Выход, Индикатор)
	пОбъект=РеквизитФормыВЗначение("Объект");
	пОбъект.ЗаполнитьРейсыМаршрута(ТабДокумент, Маршрут, Выход, Индикатор);
	ЗначениеВРеквизитФормы(пОбъект, "Объект");
КонецФункции

&НаСервере
Функция СкопироватьРейс_Вызов_Функции(мВыход, мРейс, мВремя)
	пОбъект=РеквизитФормыВЗначение("Объект");
	пОбъект.СкопироватьРейс(мВыход, мРейс, мВремя);
КонецФункции

&НаСервере
Функция ПересчитатьВремяОтправления_Вызов_Функции(мМаршрут, мВыход, мРейс, мВремя)
	пОбъект=РеквизитФормыВЗначение("Объект");
	результат = пОбъект.ПересчитатьВремяОтправления(мМаршрут, мВыход, мРейс, мВремя);
	ЗначениеВРеквизитФормы(пОбъект, "Объект");
	Возврат результат;
КонецФункции

&НаСервере
Функция ПечатьМаршрута_Вызов_Функции(мМаршрут, мВыход)
	пОбъект=РеквизитФормыВЗначение("Объект");
	ТабличныйДокументМаршруты=пОбъект.ПечатьМаршрута(мМаршрут, мВыход);
	Возврат ТабличныйДокументМаршруты;
КонецФункции

#КонецОбласти
