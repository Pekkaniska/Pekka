
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	УстановитьТекстЗапросовДинамическихСписков();
	
	Список.Параметры.УстановитьЗначениеПараметра("ДатаНачалаУчета", Константы.ДатаНачалаУчетаВнеоборотныхАктивов2_4.Получить());
	СписокДетально.Параметры.УстановитьЗначениеПараметра("ДатаНачалаУчета", Константы.ДатаНачалаУчетаВнеоборотныхАктивов2_4.Получить());
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	Если ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя())
		ИЛИ ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, Метаданные.РегистрыСведений.ДокументыПоОС.ПолноеИмя()) Тогда
		ОбновлениеИнформационнойБазыУТ.СообщитьЧтоРаботаСФормойВременноОграничена();
	КонецЕсли;
	
	ЗаполнитьСоответствиеДокументов();
	
	Если Не Параметры.Свойство("КлючНазначенияФормы")
		Или ПустаяСтрока(Параметры.КлючНазначенияФормы) Тогда
		КлючНазначенияИспользования = Обработки.ЖурналДокументовОС2_4.КлючНазначенияФормыПоУмолчанию();
		КлючНастроек = "";
	Иначе
		КлючНазначенияИспользования = Параметры.КлючНазначенияФормы;
		КлючНастроек                = Параметры.КлючНазначенияФормы;
	КонецЕсли;
	
	Если Параметры.Свойство("ОтборыФормыСписка") Тогда
		ФормыОткрытаПоГиперссылке = Истина;
		ОтборТипыДокументов = Параметры.ОтборыФормыСписка.ОтборТипыДокументов;
		ОтборХозяйственныеОперации = Параметры.ОтборыФормыСписка.ОтборХозяйственныеОперации;
		
		Если КлючНастроек = "ПомощникПерехода" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Список,
				"СозданДляПереходаНаВерсию24",
				1,
				ВидСравненияКомпоновкиДанных.Равно,,
				Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокДетально,
				"СозданДляПереходаНаВерсию24",
				1,
				ВидСравненияКомпоновкиДанных.Равно,,
				Истина);
				
			АвтоЗаголовок = Ложь;
			Заголовок = НСтр("ru = 'Документы по ОС, созданные для перехода на учет внеоборотных активов версии 2.4'");
			Элементы.ОтборОрганизацияАмортизация.Видимость = Ложь;
			Элементы.ОтборОсновноеСредствоАмортизация.Видимость = Ложь;
			Элементы.СписокАмортизация.Видимость = Ложь;
			Элементы.ГруппаПользовательскиеНастройкиСписокАмортизация.Видимость = Ложь;
		КонецЕсли; 
		
	ИначеЕсли Параметры.Свойство("ОбъектЭксплуатации") Тогда
		ФормыОткрытаПоГиперссылке = Истина;
		ОтборОсновноеСредство = Параметры.ОбъектЭксплуатации;
		Элементы.Список.Видимость = Ложь;
		Элементы.ОтборОрганизация.Видимость = Ложь;
		Элементы.ИнформационнаяНадписьОтбор.Видимость = Ложь;
		Элементы.ОтборОсновноеСредство.Видимость = Ложь;
		Элементы.ОтборОсновноеСредствоАмортизация.Видимость = Ложь;
		Элементы.СписокДетальноОсновноеСредство.Видимость = Ложь;
		Элементы.ГруппаПользовательскиеНастройкиСписок.Видимость = Ложь;
		УстановитьТекстЗапросовДинамическихСписков();
		АвтоЗаголовок = Ложь;
		Заголовок = СтрШаблон(НСтр("ru = 'Документы по основному средству %1'"), Строка(ОтборОсновноеСредство));
	Иначе
		ВосстановитьНастройки();
	КонецЕсли;
	
	// ПроверкаДокументовВРеглУчете
	ТекстЗапроса = Список.ТекстЗапроса;
	ПроверкаДокументовСервер.ДоработатьЗапросДинамическогоСпискаЖурналаДокументов(ТекстЗапроса, "РеестрДокументов");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтатусПроверки КАК СтатусПроверки", "НЕОПРЕДЕЛЕНО КАК УдаленСтатусПроверки");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫРАЗИТЬ(&ИндикаторПроверки КАК БУЛЕВО) КАК ИндикаторПроверки", "ЛОЖЬ КАК УдаленИндикаторПроверки");
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ТекстЗапроса = ТекстЗапроса;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.Список, СвойстваСписка);
	// Конец ПроверкаДокументовВРеглУчете
	
	ДополнительныеПараметры = Новый Структура("МестоРазмещенияДанныхПроверкиРегл", Элементы.СписокГруппаРеглПроверка);
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры);
	
	ЗаполнитьРеквизитыФормыПриСоздании();
	НастроитьЭлементыФормыПриСоздании();
	
	ОбщегоНазначенияУТ.СформироватьНадписьОтбор(
		ИнформационнаяНадписьОтбор, 
		ХозяйственныеОперацииИДокументы, 
		ОтборТипыДокументов, 
		ОтборХозяйственныеОперации);
		
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		Элементы.СписокУУ.Видимость = Ложь;
		Элементы.СписокБУ.Видимость = Ложь;
		Элементы.СписокДетальноОтражатьВУпрУчете.Видимость = Ложь;
		Элементы.СписокДетальноОтражатьВРеглУчете.Видимость = Ложь;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	СписокТипов = Новый Массив;
	Для каждого ОписаниеОперации Из ХозяйственныеОперацииИДокументы Цикл
		СписокТипов.Добавить(Тип("ДокументСсылка." + СтрРазделить(ОписаниеОперации.ПолноеИмяДокумента, ".")[1]));
	КонецЦикла;
	Для каждого СтрокаДокумент Из СоответствиеДокументов Цикл
		СписокТипов.Добавить(Тип("ДокументСсылка." + СтрокаДокумент.СтарыйДокументИмя));
	КонецЦикла; 
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = Новый ОписаниеТипов(СписокТипов);
	ПараметрыРазмещения.КоманднаяПанель = Элементы.СписокКоманднаяПанель;
	ПараметрыРазмещения.ПрефиксГрупп = "Список";
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = Новый ОписаниеТипов(СписокТипов);
	ПараметрыРазмещения.КоманднаяПанель = Элементы.СписокДетальноКоманднаяПанель;
	ПараметрыРазмещения.ПрефиксГрупп = "СписокДетально";
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	
	СписокТипов = Новый Массив;
	Для каждого ОписаниеОперации Из ХозяйственныеОперацииИДокументыАмортизация Цикл
		СписокТипов.Добавить(Тип("ДокументСсылка." + СтрРазделить(ОписаниеОперации.ПолноеИмяДокумента, ".")[1]));
	КонецЦикла; 
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = Новый ОписаниеТипов(СписокТипов);
	ПараметрыРазмещения.КоманднаяПанель = Элементы.СписокАмортизацияКоманднаяПанель;
	ПараметрыРазмещения.ПрефиксГрупп = "СписокАмортизация";
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "Запись_ВводОстатковВнеоборотныхАктивов"
		ИЛИ ИмяСобытия = "Запись_ВводОстатковВнеоборотныхАктивов2_4" Тогда
		
		// Документы ввода остатков включаются в журнал другим способом.
		Элементы.Список.Обновить();
		Элементы.СписокДетально.Обновить();
		
	ИначеЕсли СтрНайти(ИмяСобытия, "Запись_") <> 0 Тогда
	
		Для каждого СтрокаДокумент Из ХозяйственныеОперацииИДокументы Цикл
			ИмяСобытияЗаписьДокумента = СтрЗаменить(СтрокаДокумент.ПолноеИмяДокумента, "Документ.", "Запись_");
			Если ИмяСобытияЗаписьДокумента = ИмяСобытия Тогда
				Элементы.Список.Обновить();
				Элементы.СписокДетально.Обновить();
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		Для каждого СтрокаДокумент Из ХозяйственныеОперацииИДокументыАмортизация Цикл
			ИмяСобытияЗаписьДокумента = СтрЗаменить(СтрокаДокумент.ПолноеИмяДокумента, "Документ.", "Запись_");
			Если ИмяСобытияЗаписьДокумента = ИмяСобытия Тогда
				Элементы.СписокАмортизация.Обновить();
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		Для каждого СтрокаДокумент Из СоответствиеДокументов Цикл
			ИмяСобытияЗаписьДокумента = "Запись_" + СтрокаДокумент.СтарыйДокументИмя;
			Если ИмяСобытияЗаписьДокумента = ИмяСобытия Тогда
				Элементы.Список.Обновить();
				Элементы.СписокДетально.Обновить();
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОсновноеСредствоПриИзменении(Элемент)
	
	ОтборОсновноеСредствоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяНадписьОтборОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДоступныеХозяйственныеОперацииИДокументы", ПоместитьВоВременноеХранилищеХозяйственныеОперацииИДокументы());
	
	ПараметрыФормы.Вставить("КлючНастроек", КлючНазначенияИспользования);
	ПараметрыФормы.Вставить("КлючФормы", КлючНазначенияФормыПоУмолчанию());
	
	ОткрытьФорму("Справочник.НастройкиХозяйственныхОпераций.Форма.ФормаУстановкиОтбора",
	ПараметрыФормы,,,,,Новый ОписаниеОповещения("УстановитьОтборыПоХозОперациямИДокументам", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	Если Элементы.СписокГруппаСоздатьГенерируемая.ПодчиненныеЭлементы.Количество() <> 0 Тогда 
		Если Копирование Тогда
			ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элемент);
		ИначеЕсли ОтборТипыДокументов.Количество() = 1 И ОтборХозяйственныеОперации.Количество() = 1 Тогда 
			СтруктураКоманды = Новый Структура("Имя", Элементы.СписокГруппаСоздатьГенерируемая.ПодчиненныеЭлементы[0].Имя);
			Подключаемый_СоздатьДокумент(СтруктураКоманды);
		Иначе
			Подключаемый_СоздатьДокументЧерезФормуВыбора(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элемент, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокДетально

&НаКлиенте
Процедура СписокДетальноПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДетальноВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДетальноПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	Если Элементы.СписокДетальноГруппаСоздатьГенерируемая.ПодчиненныеЭлементы.Количество() <> 0 Тогда 
		Если Копирование Тогда
			ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элемент);
		ИначеЕсли ОтборТипыДокументов.Количество() = 1 И ОтборХозяйственныеОперации.Количество() = 1 Тогда 
			СтруктураКоманды = Новый Структура("Имя", Элементы.СписокДетальноГруппаСоздатьГенерируемая.ПодчиненныеЭлементы[0].Имя);
			Подключаемый_СоздатьДокумент(СтруктураКоманды);
		Иначе
			Подключаемый_СоздатьДокументЧерезФормуВыбора(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДетальноПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДетальноПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элемент, Заголовок);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокАмортизация

&НаКлиенте
Процедура СписокАмортизацияПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАмортизацияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАмортизацияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	Если Элементы.СписокАмортизацияГруппаСоздатьГенерируемая.ПодчиненныеЭлементы.Количество() <> 0 Тогда 
		Если Копирование Тогда
			ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элемент);
		ИначеЕсли ОтборТипыДокументов.Количество() = 1 И ОтборХозяйственныеОперации.Количество() = 1 Тогда 
			СтруктураКоманды = Новый Структура("Имя", Элементы.СписокАмортизацияГруппаСоздатьГенерируемая.ПодчиненныеЭлементы[0].Имя);
			Подключаемый_СоздатьДокумент(СтруктураКоманды);
		Иначе
			Подключаемый_СоздатьДокументЧерезФормуВыбора(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАмортизацияПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАмортизацияПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элемент, Заголовок);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область Список

&НаКлиенте
Процедура СписокУстановитьИнтервал(Команда)
	
	Оповещение = Новый ОписаниеОповещения("УстановитьИнтервалЗавершение", ЭтотОбъект);
	
	ОбщегоНазначенияУтКлиент.РедактироватьПериод(СписокИнтервал,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСкопировать(Команда)
	
	ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОтменаПроведения(Команда)
	
	ОбщегоНазначенияУТКлиент.ОтменаПроведения(Элементы.Список, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПровести(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиДокументы(Элементы.Список, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокУстановитьСнятьПометкуУдаления(Команда)
	
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элементы.Список, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПроводкиМеждународногоУчета(Команда)
	
	//++ НЕ УТКА
	Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
		ВнеоборотныеАктивыКлиент.ПроводкиМеждународногоУчета(Элементы.Список.ТекущиеДанные.Ссылка);
	КонецЕсли; 
	//-- НЕ УТКА
	
	Возврат; // В КА пустой обработчик.
	
КонецПроцедуры

#КонецОбласти

#Область СписокДетально

&НаКлиенте
Процедура СписокДетальноОтменаПроведения(Команда)
	
	ОбщегоНазначенияУТКлиент.ОтменаПроведения(Элементы.СписокДетально, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДетальноПровести(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиДокументы(Элементы.СписокДетально, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДетальноСкопировать(Команда)
	
	ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элементы.СписокДетально);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДетальноУстановитьИнтервал(Команда)
	
	Оповещение = Новый ОписаниеОповещения("УстановитьИнтервалЗавершение", ЭтотОбъект);
	
	ОбщегоНазначенияУтКлиент.РедактироватьПериод(СписокДетальноИнтервал,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДетальноУстановитьСнятьПометкуУдаления(Команда)
	
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элементы.СписокДетально, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДетальноПроводкиМеждународногоУчета(Команда)
	
	//++ НЕ УТКА
	Если Элементы.СписокДетально.ТекущиеДанные <> Неопределено Тогда
		ВнеоборотныеАктивыКлиент.ПроводкиМеждународногоУчета(Элементы.СписокДетально.ТекущиеДанные.Ссылка);
	КонецЕсли; 
	//-- НЕ УТКА
	
	Возврат; // В КА пустой обработчик.
	
КонецПроцедуры

#КонецОбласти

#Область СписокАмортизация

&НаКлиенте
Процедура СписокАмортизацияОтменаПроведения(Команда)
	
	ОбщегоНазначенияУТКлиент.ОтменаПроведения(Элементы.СписокАмортизация, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАмортизацияПровести(Команда)
	
	ВнеоборотныеАктивыКлиент.ПровестиДокументыВФономЗадании(
		Элементы.СписокАмортизация, "Документ.АмортизацияОС2_4.Форма.РасчетАмортизации");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАмортизацияСкопировать(Команда)
	
	ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элементы.СписокАмортизация);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАмортизацияУстановитьИнтервал(Команда)
	
	Оповещение = Новый ОписаниеОповещения("УстановитьИнтервалЗавершение", ЭтотОбъект);
	
	ОбщегоНазначенияУтКлиент.РедактироватьПериод(СписокАмортизацияИнтервал,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАмортизацияУстановитьСнятьПометкуУдаления(Команда)
	
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элементы.СписокАмортизация, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАмортизацияПроводкиМеждународногоУчета(Команда)
	
	//++ НЕ УТКА
	Если Элементы.СписокАмортизация.ТекущиеДанные <> Неопределено Тогда
		ВнеоборотныеАктивыКлиент.ПроводкиМеждународногоУчета(Элементы.СписокАмортизация.ТекущиеДанные.Ссылка);
	КонецЕсли; 
	//-- НЕ УТКА
	
	Возврат; // В КА пустой обработчик.
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_СоздатьДокумент(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаДокументыДетально Тогда
		СтруктураОтборы = Новый Структура("Организация,ОсновноеСредство", ОтборОрганизация, ОтборОсновноеСредство);
	Иначе
		СтруктураОтборы = Новый Структура("Организация", ОтборОрганизация);
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.СоздатьДокументЧерезКоманду(Команда.Имя, СтруктураОтборы);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоздатьДокументЧерезФормуВыбора(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаДокументыДетально Тогда
		СтруктураОтборы = Новый Структура("Организация,ОсновноеСредство", ОтборОрганизация, ОтборОсновноеСредство);
	Иначе
		СтруктураОтборы = Новый Структура("Организация", ОтборОрганизация);
	КонецЕсли;
	
	КлючФормы = КлючНазначенияФормыПоУмолчанию();
	АдресХозяйственныеОперацииИДокументы = ПоместитьВоВременноеХранилищеХозяйственныеОперацииИДокументы();
	ОбщегоНазначенияУТКлиент.СоздатьДокументЧерезФормуВыбора(АдресХозяйственныеОперацииИДокументы,
		КлючФормы, КлючНазначенияИспользования, СтруктураОтборы);
		
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, ТекущийСписок(ЭтаФорма));
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, ТекущийСписок(ЭтаФорма), Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, ТекущийСписок(ЭтаФорма));
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВосстановитьНастройки()
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.ЖурналДокументовОС2_4.Форма.ДокументыПоОС", КлючНазначенияИспользования);
	
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
	
		СписокИнтервал = Настройки.СписокИнтервал;
		СписокДетальноИнтервал = Настройки.СписокДетальноИнтервал;
		СписокАмортизацияИнтервал = Настройки.СписокАмортизацияИнтервал;
		ОтборОрганизация = Настройки.ОтборОрганизация;
		ОтборОсновноеСредство = Настройки.ОтборОсновноеСредство;
		
		Настройки.Свойство("ОтборХозяйственныеОперации", ОтборХозяйственныеОперации);
		Настройки.Свойство("ОтборТипыДокументов", ОтборТипыДокументов);
		
		УстановитьТекстЗапросовДинамическихСписков();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	Если ФормыОткрытаПоГиперссылке Тогда
		Возврат;
	КонецЕсли;
	
	ИменаСохраняемыхРеквизитов =
		"СписокИнтервал,СписокДетальноИнтервал,СписокАмортизацияИнтервал,
		|ОтборОрганизация,
		|ОтборОсновноеСредство,
		|ОтборХозяйственныеОперации,
		|ОтборТипыДокументов";
	
	Настройки = Новый Структура(ИменаСохраняемыхРеквизитов);
	ЗаполнитьЗначенияСвойств(Настройки, ЭтаФорма);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.ЖурналДокументовОС2_4.Форма.ДокументыПоОС", КлючНазначенияИспользования, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФормыПриСоздании()
	
	ТаблицаЗначенийДоступно = Обработки.ЖурналДокументовОС2_4.ИнициализироватьХозяйственныеОперацииИДокументы(
		ХозяйственныеОперацииИДокументы.Выгрузить(),
		ОтборХозяйственныеОперации,
		ОтборТипыДокументов,
		КлючНастроек);
	
	ХозяйственныеОперацииИДокументы.Загрузить(ТаблицаЗначенийДоступно);
	
	//
	ТаблицаЗначенийДоступно = Обработки.ЖурналДокументовОС2_4.ИнициализироватьХозяйственныеОперацииИДокументыАмортизации(
		ХозяйственныеОперацииИДокументыАмортизация.Выгрузить(),
		ОтборХозяйственныеОперацииАмортизация,
		ОтборТипыДокументовАмортизация,
		КлючНастроек);
	
	ХозяйственныеОперацииИДокументыАмортизация.Загрузить(ТаблицаЗначенийДоступно);
	
	УстановитьОтборыДинамическогоСписка();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормыПриСоздании()
	
	Если Параметры.Свойство("СтруктураБыстрогоОтбора") Тогда
		Если Параметры.СтруктураБыстрогоОтбора.Свойство("ПолноеИмяДокумента") Тогда
						
			Отбор = Новый Структура();
			Отбор.Вставить("ПолноеИмяДокумента", Параметры.СтруктураБыстрогоОтбора.ПолноеИмяДокумента);
			
			НайденныеСтроки = ХозяйственныеОперацииИДокументы.НайтиСтроки(Отбор);
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.Отбор = Истина;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	НастроитьФормуПоНастройкамХозяйственныхОперацийИДокументов();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоНастройкамХозяйственныхОперацийИДокументов()
	
	ДанныеРабочегоМеста = ОбщегоНазначенияУТ.ДанныеРабочегоМеста(
		ХозяйственныеОперацииИДокументы.Выгрузить(), 
		КлючНазначенияФормыПоУмолчанию(), 
		НСтр("ru = 'все'"));
	
	НастроитьКнопкиУправленияДокументами();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыДинамическогоСписка()
	
	ОтборТипыДокументовДляОтбора = ДополнитьТипыДокументовДляОтбора(ОтборТипыДокументов);
	ОтборХозяйственныеОперацииДляОтбора = ДополнитьХозОперацииДляОтбора(ОтборХозяйственныеОперации);
	
	#Область Список
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"ХозяйственнаяОперация",
		ОтборХозяйственныеОперацииДляОтбора,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Истина);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"ТипСсылки",
		ОтборТипыДокументовДляОтбора,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Истина);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Организация",
		ОтборОрганизация,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ОтборОрганизация));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"ДополнительнаяЗапись",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		НЕ ЗначениеЗаполнено(ОтборОрганизация));
		
	Список.Параметры.УстановитьЗначениеПараметра("НачалоПериода", СписокИнтервал.ДатаНачала);
	
	Список.Параметры.УстановитьЗначениеПараметра("КонецПериода", 
		?(ЗначениеЗаполнено(СписокИнтервал.ДатаОкончания),
			КонецДня(СписокИнтервал.ДатаОкончания),
			СписокИнтервал.ДатаОкончания));
			
	Элементы.СписокУстановитьИнтервал.Пометка = 
		ЗначениеЗаполнено(СписокИнтервал.ДатаНачала) ИЛИ ЗначениеЗаполнено(СписокИнтервал.ДатаОкончания);
	#КонецОбласти
	
	#Область СписокДетально
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокДетально,
		"ХозяйственнаяОперация",
		ОтборХозяйственныеОперацииДляОтбора,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Истина);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокДетально,
		"ТипСсылки",
		ОтборТипыДокументовДляОтбора,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Истина);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокДетально,
		"Организация",
		ОтборОрганизация,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ОтборОрганизация));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокДетально,
		"ДополнительнаяЗапись",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		НЕ ЗначениеЗаполнено(ОтборОрганизация));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокДетально,
		"ОсновноеСредство",
		ОтборОсновноеСредство,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ОтборОсновноеСредство));
		
	СписокДетально.Параметры.УстановитьЗначениеПараметра("НачалоПериода", СписокДетальноИнтервал.ДатаНачала);
	
	СписокДетально.Параметры.УстановитьЗначениеПараметра("КонецПериода", 
		?(ЗначениеЗаполнено(СписокДетальноИнтервал.ДатаОкончания),
			КонецДня(СписокДетальноИнтервал.ДатаОкончания),
			СписокДетальноИнтервал.ДатаОкончания));
			
	Элементы.СписокДетальноУстановитьИнтервал.Пометка = 
		ЗначениеЗаполнено(СписокДетальноИнтервал.ДатаНачала) ИЛИ ЗначениеЗаполнено(СписокДетальноИнтервал.ДатаОкончания);
	#КонецОбласти
	
	#Область СписокАмортизация
	ОтборТипыДокументовДляОтбора = ДополнитьТипыДокументовДляОтбора(ОтборТипыДокументовАмортизация);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокАмортизация,
		"ТипСсылки",
		ОтборТипыДокументовДляОтбора,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокАмортизация,
		"Организация",
		ОтборОрганизация,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ОтборОрганизация));
		
	СписокАмортизация.Параметры.УстановитьЗначениеПараметра("НачалоПериода", СписокАмортизацияИнтервал.ДатаНачала);
	
	СписокАмортизация.Параметры.УстановитьЗначениеПараметра("КонецПериода", 
		?(ЗначениеЗаполнено(СписокАмортизацияИнтервал.ДатаОкончания),
			КонецДня(СписокАмортизацияИнтервал.ДатаОкончания),
			СписокАмортизацияИнтервал.ДатаОкончания));
			
	Элементы.СписокАмортизацияУстановитьИнтервал.Пометка = 
		ЗначениеЗаполнено(СписокАмортизацияИнтервал.ДатаНачала) ИЛИ ЗначениеЗаполнено(СписокАмортизацияИнтервал.ДатаОкончания);
	#КонецОбласти

КонецПроцедуры

&НаСервере
Функция ДополнитьТипыДокументовДляОтбора(ОтборТипыДокументовСписка)

	Если СоответствиеДокументов.Количество() = 0 Тогда
		Возврат ОтборТипыДокументовСписка;
	КонецЕсли; 
	
	ОтборТипыДокументовКопия = ОтборТипыДокументовСписка.Скопировать();

	Для каждого ЭлементКоллекции Из ОтборТипыДокументовСписка Цикл
		СтруктураПоиска = Новый Структура("НовыйДокумент", ЭлементКоллекции.Значение);
		СписокСтрок = СоответствиеДокументов.НайтиСтроки(СтруктураПоиска);
		Для каждого ДанныеСтроки Из СписокСтрок Цикл
			ОтборТипыДокументовКопия.Добавить(ДанныеСтроки.СтарыйДокумент);
		КонецЦикла; 
	КонецЦикла; 
	
	Возврат ОтборТипыДокументовКопия;
	
КонецФункции

&НаСервере
Функция ДополнитьХозОперацииДляОтбора(ОтборХозяйственныеОперации)

	ОтборХозяйственныеОперацииКопия = ОтборХозяйственныеОперации.Скопировать();

	Если ОтборХозяйственныеОперацииКопия.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.РеализацияВнеоборотныхАктивов) <> Неопределено Тогда
		ОтборХозяйственныеОперацииКопия.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту); 
	КонецЕсли; 
	Если ОтборХозяйственныеОперацииКопия.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.РеализацияОСсОтложеннымПереходомПрав) <> Неопределено Тогда
		ОтборХозяйственныеОперацииКопия.Добавить(Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности); 
	КонецЕсли;
	
	Возврат ОтборХозяйственныеОперацииКопия;
	
КонецФункции

&НаСервере
Процедура УстановитьТекстЗапросовДинамическихСписков()

	Если ОтборОсновноеСредство.Пустая() Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РеестрДокументов.ТипСсылки,
		|	ТИПЗНАЧЕНИЯ(РеестрДокументов.Ссылка) КАК ТипСсылкиДокумента,
		|	РеестрДокументов.Ссылка,
		|	РеестрДокументов.ПометкаУдаления,
		|	РеестрДокументов.НомерДокументаИБ КАК Номер,
		|	РеестрДокументов.ДатаДокументаИБ КАК Дата,
		|	РеестрДокументов.Проведен,
		|	РеестрДокументов.Организация,
		|	ЕСТЬNULL(АмортизацияОС2_4.НомерПакета, 0) КАК НомерПакета,
		|	РеестрДокументов.Комментарий,
		|	РеестрДокументов.Ответственный,
		|	ВЫБОР
		|		КОГДА РеестрДокументов.Проведен
		|			ТОГДА 0
		|		КОГДА РеестрДокументов.ПометкаУдаления
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК НестандартнаяКартинка
		|ИЗ
		|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АмортизацияОС2_4 КАК АмортизацияОС2_4
		|		ПО (АмортизацияОС2_4.Ссылка = РеестрДокументов.Ссылка)
		|{ГДЕ
		|	РеестрДокументов.Ссылка.* КАК Ссылка,
		|	РеестрДокументов.Организация.* КАК Организация,
		|	РеестрДокументов.ДатаДокументаИБ КАК Дата,
		|	РеестрДокументов.НомерДокументаИБ КАК Номер,
		|	РеестрДокументов.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	РеестрДокументов.Подразделение.* КАК Подразделение,
		|	РеестрДокументов.Ответственный.* КАК Ответственный,
		|	РеестрДокументов.Дополнительно КАК Дополнительно,
		|	РеестрДокументов.Комментарий КАК Комментарий,
		|	РеестрДокументов.Проведен КАК Проведен,
		|	РеестрДокументов.ПометкаУдаления КАК ПометкаУдаления,
		|	((РеестрДокументов.ДатаДокументаИБ >= &НачалоПериода
		|			ИЛИ &НачалоПериода = ДАТАВРЕМЯ(1, 1, 1))
		|			И (РеестрДокументов.ДатаДокументаИБ <= &КонецПериода
		|				ИЛИ &КонецПериода = ДАТАВРЕМЯ(1, 1, 1)))}";
		
		СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
		СвойстваСписка.ТекстЗапроса = ТекстЗапроса;
		ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.СписокАмортизация, СвойстваСписка);
		
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РеестрДокументов.ТипСсылки,
		|	ТИПЗНАЧЕНИЯ(РеестрДокументов.Ссылка) КАК ТипСсылкиДокумента,
		|	РеестрДокументов.Ссылка,
		|	РеестрДокументов.ПометкаУдаления,
		|	РеестрДокументов.НомерДокументаИБ КАК Номер,
		|	РеестрДокументов.ДатаДокументаИБ КАК Дата,
		|	РеестрДокументов.Проведен,
		|	РеестрДокументов.Организация,
		|	ЕСТЬNULL(АмортизацияОС2_4.НомерПакета, 0) КАК НомерПакета,
		|	РеестрДокументов.Комментарий,
		|	РеестрДокументов.Ответственный,
		|	ВЫБОР
		|		КОГДА РеестрДокументов.Проведен
		|			ТОГДА 0
		|		КОГДА РеестрДокументов.ПометкаУдаления
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК НестандартнаяКартинка
		|ИЗ
		|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АмортизацияОС2_4 КАК АмортизацияОС2_4
		|		ПО (АмортизацияОС2_4.Ссылка = РеестрДокументов.Ссылка)
		|ГДЕ
		|	РеестрДокументов.Ссылка В
		|			(ВЫБРАТЬ
		|				РегистрАмортизацияОС.Регистратор
		|			ИЗ
		|				РегистрНакопления.АмортизацияОС КАК РегистрАмортизацияОС
		|			ГДЕ
		|				РегистрАмортизацияОС.ОсновноеСредство = &ОсновноеСредство)
		|{ГДЕ
		|	РеестрДокументов.Ссылка.* КАК Ссылка,
		|	РеестрДокументов.Организация.* КАК Организация,
		|	РеестрДокументов.ДатаДокументаИБ КАК Дата,
		|	РеестрДокументов.НомерДокументаИБ КАК Номер,
		|	РеестрДокументов.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	РеестрДокументов.Подразделение.* КАК Подразделение,
		|	РеестрДокументов.Ответственный.* КАК Ответственный,
		|	РеестрДокументов.Дополнительно КАК Дополнительно,
		|	РеестрДокументов.Комментарий КАК Комментарий,
		|	РеестрДокументов.Проведен КАК Проведен,
		|	РеестрДокументов.ПометкаУдаления КАК ПометкаУдаления,
		|	((РеестрДокументов.ДатаДокументаИБ >= &НачалоПериода
		|			ИЛИ &НачалоПериода = ДАТАВРЕМЯ(1, 1, 1))
		|			И (РеестрДокументов.ДатаДокументаИБ <= &КонецПериода
		|				ИЛИ &КонецПериода = ДАТАВРЕМЯ(1, 1, 1)))}";
		
		СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
		СвойстваСписка.ТекстЗапроса = ТекстЗапроса;
		ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.СписокАмортизация, СвойстваСписка);
		
		СписокАмортизация.Параметры.УстановитьЗначениеПараметра("ОсновноеСредство", ОтборОсновноеСредство);
		
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоответствиеДокументов()

	Если ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_2") Тогда
		ДобавитьНовоеСоответствиеДокументов("ВводОстатковВнеоборотныхАктивов2_4", "ВводОстатковВнеоборотныхАктивов");
		ДобавитьНовоеСоответствиеДокументов("ВозвратОСОтАрендатора2_4", "ВозвратОСОтАрендатора");
		ДобавитьНовоеСоответствиеДокументов("ИзменениеПараметровОС2_4", "ИзменениеПараметровОС");
		ДобавитьНовоеСоответствиеДокументов("МодернизацияОС2_4", "МодернизацияОС");
		ДобавитьНовоеСоответствиеДокументов("ПередачаОСАрендатору2_4", "ПередачаОСАрендатору");
		ДобавитьНовоеСоответствиеДокументов("ПеремещениеОС2_4", "ПеремещениеОС");
		ДобавитьНовоеСоответствиеДокументов("ПереоценкаОС2_4", "ПереоценкаОС");
		ДобавитьНовоеСоответствиеДокументов("ПодготовкаКПередачеОС2_4", "ПодготовкаКПередачеОС");
		ДобавитьНовоеСоответствиеДокументов("ПринятиеКУчетуОС2_4", "ПринятиеКУчетуОС");
		ДобавитьНовоеСоответствиеДокументов("СписаниеОС2_4", "СписаниеОС");
		ДобавитьНовоеСоответствиеДокументов("АмортизацияОС2_4", "АмортизацияОС");
		//++ НЕ УТКА
		ДобавитьНовоеСоответствиеДокументов("ВводОстатковВнеоборотныхАктивов2_4", "ВводОстатковОСМеждународныйУчет");
		ДобавитьНовоеСоответствиеДокументов("ПринятиеКУчетуОС2_4", "ПринятиеКУчетуОСМеждународныйУчет");
		ДобавитьНовоеСоответствиеДокументов("ИзменениеПараметровОС2_4", "ИзменениеПараметровОСМеждународныйУчет");
		ДобавитьНовоеСоответствиеДокументов("ИзменениеПараметровОС2_4", "ПереводОсновныхСредствИнвестиционногоИмуществаМеждународныйУчет");
		ДобавитьНовоеСоответствиеДокументов("ПеремещениеОС2_4", "ПеремещениеОСМеждународныйУчет");
		ДобавитьНовоеСоответствиеДокументов("СписаниеОС2_4", "СписаниеОСМеждународныйУчет");
		//-- НЕ УТКА
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНовоеСоответствиеДокументов(НовыйДокумент, СтарыйДокумент)

	НовоеСоответствие = СоответствиеДокументов.Добавить();
	НовоеСоответствие.НовыйДокумент  = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ." + НовыйДокумент);
	НовоеСоответствие.СтарыйДокумент = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ." + СтарыйДокумент);
	НовоеСоответствие.СтарыйДокументИмя = СтарыйДокумент;

КонецПроцедуры

&НаСервере
Процедура ОтборОсновноеСредствоПриИзмененииНаСервере()

	УстановитьТекстЗапросовДинамическихСписков();
	ПриИзмененииОтбора();

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючНазначенияФормыПоУмолчанию()
	
	Возврат "ДокументыОС";
	
КонецФункции

&НаСервере
Процедура ПриИзмененииОтбора()
	
	СохранитьНастройки();
	УстановитьОтборыДинамическогоСписка();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьКнопкиУправленияДокументами()
	
	СтруктураПараметров = ОбщегоНазначенияУТ.СтруктураПараметровНастройкиКнопокУправленияДокументами();
	СтруктураПараметров.Форма 												= ЭтаФорма;
	СтруктураПараметров.ИмяГруппыСоздать                                    = "СписокГруппаСоздатьГенерируемая";
	СтруктураПараметров.ИмяГруппыСоздатьКонтекст                            = "СписокГруппаСоздатьГенерируемаяКонтекст";
	СтруктураПараметров.ИмяКнопкиСкопировать                                = "СписокСкопировать";
	СтруктураПараметров.ИмяКнопкиСкопироватьКонтекстноеМеню                 = "СписокСкопироватьКонтекст";
	СтруктураПараметров.ИмяКнопкиИзменить                                   = "СписокИзменить";
	СтруктураПараметров.ИмяКнопкиИзменитьКонтекстноеМеню                    = "СписокИзменитьКонтекст";
	СтруктураПараметров.ИмяКнопкиПровести                                   = "СписокПровести";
	СтруктураПараметров.ИмяКнопкиПровестиКонтекстноеМеню                    = "СписокПровестиКонтекст";
	СтруктураПараметров.ИмяКнопкиОтменаПроведения                           = "СписокОтменаПроведения";
	СтруктураПараметров.ИмяКнопкиОтменаПроведенияКонтекстноеМеню            = "СписокОтменаПроведенияКонтекст";
	СтруктураПараметров.ИмяКнопкиУстановитьПометкуУдаления                  = "СписокУстановитьПометкуУдаления";
	СтруктураПараметров.ИмяКнопкиУстановитьПометкуУдаленияКонтекстноеМеню   = "СписокУстановитьПометкуУдаленияКонтекст";
	
	ОбщегоНазначенияУТ.НастроитьКнопкиУправленияДокументами(СтруктураПараметров);

	//
	СтруктураПараметров = ОбщегоНазначенияУТ.СтруктураПараметровНастройкиКнопокУправленияДокументами();
	СтруктураПараметров.Форма 												= ЭтаФорма;
	СтруктураПараметров.ИмяГруппыСоздать                                    = "СписокДетальноГруппаСоздатьГенерируемая";
	СтруктураПараметров.ИмяГруппыСоздатьКонтекст                            = "СписокДетальноГруппаСоздатьГенерируемаяКонтекст";
	СтруктураПараметров.ИмяКнопкиСкопировать                                = "СписокДетальноСкопировать";
	СтруктураПараметров.ИмяКнопкиСкопироватьКонтекстноеМеню                 = "СписокДетальноСкопироватьКонтекст";
	СтруктураПараметров.ИмяКнопкиИзменить                                   = "СписокДетальноИзменить";
	СтруктураПараметров.ИмяКнопкиИзменитьКонтекстноеМеню                    = "СписокДетальноИзменитьКонтекст";
	СтруктураПараметров.ИмяКнопкиПровести                                   = "СписокДетальноПровести";
	СтруктураПараметров.ИмяКнопкиПровестиКонтекстноеМеню                    = "СписокДетальноПровестиКонтекст";
	СтруктураПараметров.ИмяКнопкиОтменаПроведения                           = "СписокДетальноОтменаПроведения";
	СтруктураПараметров.ИмяКнопкиОтменаПроведенияКонтекстноеМеню            = "СписокДетальноОтменаПроведенияКонтекст";
	СтруктураПараметров.ИмяКнопкиУстановитьПометкуУдаления                  = "СписокДетальноУстановитьПометкуУдаления";
	СтруктураПараметров.ИмяКнопкиУстановитьПометкуУдаленияКонтекстноеМеню   = "СписокДетальноУстановитьПометкуУдаленияКонтекст";
	СтруктураПараметров.ПрефиксЭлементов                                    = "СписокДетально";
	
	ОбщегоНазначенияУТ.НастроитьКнопкиУправленияДокументами(СтруктураПараметров);
	
	//
	СтруктураПараметров = ОбщегоНазначенияУТ.СтруктураПараметровНастройкиКнопокУправленияДокументами();
	СтруктураПараметров.Форма 												= ЭтаФорма;
	СтруктураПараметров.ИмяГруппыСоздать                                    = "СписокАмортизацияГруппаСоздатьГенерируемая";
	СтруктураПараметров.ИмяГруппыСоздатьКонтекст                            = "СписокАмортизацияГруппаСоздатьГенерируемаяКонтекст";
	СтруктураПараметров.ИмяКнопкиСкопировать                                = "СписокАмортизацияСкопировать";
	СтруктураПараметров.ИмяКнопкиСкопироватьКонтекстноеМеню                 = "СписокАмортизацияСкопироватьКонтекст";
	СтруктураПараметров.ИмяКнопкиИзменить                                   = "СписокАмортизацияИзменить";
	СтруктураПараметров.ИмяКнопкиИзменитьКонтекстноеМеню                    = "СписокАмортизацияИзменитьКонтекст";
	СтруктураПараметров.ИмяКнопкиПровести                                   = "СписокАмортизацияПровести";
	СтруктураПараметров.ИмяКнопкиПровестиКонтекстноеМеню                    = "СписокАмортизацияПровестиКонтекст";
	СтруктураПараметров.ИмяКнопкиОтменаПроведения                           = "СписокАмортизацияОтменаПроведения";
	СтруктураПараметров.ИмяКнопкиОтменаПроведенияКонтекстноеМеню            = "СписокАмортизацияОтменаПроведенияКонтекст";
	СтруктураПараметров.ИмяКнопкиУстановитьПометкуУдаления                  = "СписокАмортизацияУстановитьПометкуУдаления";
	СтруктураПараметров.ИмяКнопкиУстановитьПометкуУдаленияКонтекстноеМеню   = "СписокАмортизацияУстановитьПометкуУдаленияКонтекст";
	СтруктураПараметров.ПрефиксЭлементов                                    = "СписокАмортизация";
	СтруктураПараметров.ИмяТаблицыХозяйственныхОперацийИДокументов          = "ХозяйственныеОперацииИДокументыАмортизация";
	
	ОбщегоНазначенияУТ.НастроитьКнопкиУправленияДокументами(СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список.Дата", "СписокДата");
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СписокДетально.Дата", "СписокДетальноДата");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборыПоХозОперациямИДокументам(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		СтандартнаяОбработка = Ложь;
		
		АдресДоступныхХозяйственныхОперацийИДокументов = ВыбранноеЗначение;
		
		ОтборОперацияТипОбработкаВыбораСервер(АдресДоступныхХозяйственныхОперацийИДокументов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтборОперацияТипОбработкаВыбораСервер(АдресДоступныхХозяйственныхОперацийИДокументов)
	
	ТаблицаХозяйственныеОперацииИДокументы = ПолучитьИзВременногоХранилища(АдресДоступныхХозяйственныхОперацийИДокументов);
	ХозяйственныеОперацииИДокументы.Загрузить(ТаблицаХозяйственныеОперацииИДокументы);
	
	ОбщегоНазначенияУТ.ЗаполнитьОтборыПоТаблицеХозОперацийИТиповДокументов(
		ТаблицаХозяйственныеОперацииИДокументы, ОтборХозяйственныеОперации, ОтборТипыДокументов);
	
	НастроитьФормуПоНастройкамХозяйственныхОперацийИДокументов();
	
	ПриИзмененииОтбора();
	
	ОбщегоНазначенияУТ.СформироватьНадписьОтбор(
		ИнформационнаяНадписьОтбор, ХозяйственныеОперацииИДокументы, ОтборТипыДокументов, ОтборХозяйственныеОперации);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВоВременноеХранилищеХозяйственныеОперацииИДокументы()
	Возврат ПоместитьВоВременноеХранилище(ХозяйственныеОперацииИДокументы.Выгрузить(), УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Процедура УстановитьИнтервалЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииОтбора();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекущийСписок(Форма)

	Если Форма.Элементы.Страницы.ТекущаяСтраница = Форма.Элементы.СтраницаДокументыДетально Тогда
		Возврат Форма.Элементы.СписокДетально;
	ИначеЕсли Форма.Элементы.Страницы.ТекущаяСтраница = Форма.Элементы.СтраницаАмортизация Тогда
		Возврат Форма.Элементы.СписокАмортизация;
	Иначе
		Возврат Форма.Элементы.Список;
	КонецЕсли; 

КонецФункции

#Область ШтрихкодыИТорговоеОборудование

&НаСервере
Функция ДанныеПоШтрихКодуПечатнойФормы(Штрихкод)
	
	ДанныеПоШтрихКоду = ОбщегоНазначенияУТ.ДанныеПоШтрихКодуПечатнойФормы(Штрихкод, ХозяйственныеОперацииИДокументы.Выгрузить());	
	
	Возврат ДанныеПоШтрихКоду;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	Состояние(НСтр("ru = 'Выполняется поиск документа по штрихкоду...'"));
	ДанныеПоШтрихКоду = ДанныеПоШтрихКодуПечатнойФормы(Данные.Штрихкод);
	ОбщегоНазначенияУТКлиент.ОбработатьШтрихкоды(Данные.Штрихкод, ДанныеПоШтрихКоду, ЭтаФорма, "Список");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
