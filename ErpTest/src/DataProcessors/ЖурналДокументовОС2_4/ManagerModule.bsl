#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Определяет состав документов и хозяйственных операций, доступных для отображения в рабочем месте.
//
// Параметры:
//  ХозяйственныеОперацииИДокументы	 - ТаблицаЗначений - таблица значений с колонками:
//     * ХозяйственнаяОперация					 - ПеречислениеСсылка.ХозяйственныеОперации
//     * ИдентификаторОбъектаМетаданных			 - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//     * Отбор									 - Булево
//     * ДокументПредставление					 - Строка
//     * ПолноеИмяДокумента						 - Строка
//     * Накладная								 - Булево
//     * ИспользуетсяРаспоряжение				 - Булево
//     * ИспользуютсяСтатусы					 - Булево
//     * ПоНесколькимЗаказам					 - Булево
//     * ПриходныйОрдерНевозможен				 - Булево
//     * РазделятьДокументыПоПодразделению		 - Булево
//     * ПолноеИмяНакладной						 - Строка
//     * КлючНазначенияИспользования			 - Строка
//     * ПравоДоступаДобавление					 - Булево
//     * ПравоДоступаИзменение					 - Булево
//     * ЗаголовокРабочегоМеста					 - Строка
//     * ИменаЭлементовСУправляемойВидимостью	 - Строка
//     * ИменаЭлементовРабочегоМеста			 - Строка
//     * ИменаОтображаемыхЭлементов				 - Строка
//     * МенеджерРасчетаГиперссылкиКОформлению	 - Строка
//  ОтборХозяйственныеОперации		 - СписокЗначений - список значений типа ПеречислениеСсылка.ХозяйственныеОперации
//  ОтборТипыДокументов				 - СписокЗначений - список значений типа СправочникСсылка.ИдентификаторыОбъектовМетаданных
//  КлючНазначенияИспользования		 - Строка - ключ рабочего места для которого вызывается функция
//  ДокументыКОформлению			 - Булево - признак вызова метода для формы "ФормаСпискаКОформлению".
// 
// Возвращаемое значение:
//   - ТаблицаЗначений - таблица значений с колонками:
//     * ХозяйственнаяОперация					 - ПеречислениеСсылка.ХозяйственныеОперации
//     * ИдентификаторОбъектаМетаданных			 - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//     * Отбор									 - Булево
//     * ДокументПредставление					 - Строка
//     * ПолноеИмяДокумента						 - Строка
//     * Накладная								 - Булево
//     * ИспользуетсяРаспоряжение				 - Булево
//     * ИспользуютсяСтатусы					 - Булево
//     * ПоНесколькимЗаказам					 - Булево
//     * ПриходныйОрдерНевозможен				 - Булево
//     * РазделятьДокументыПоПодразделению		 - Булево
//     * ПолноеИмяНакладной						 - Строка
//     * КлючНазначенияИспользования			 - Строка
//     * ПравоДоступаДобавление					 - Булево
//     * ПравоДоступаИзменение					 - Булево
//     * ЗаголовокРабочегоМеста					 - Строка
//     * ИменаЭлементовСУправляемойВидимостью	 - Строка
//     * ИменаЭлементовРабочегоМеста			 - Строка
//     * ИменаОтображаемыхЭлементов				 - Строка
//     * МенеджерРасчетаГиперссылкиКОформлению	 - Строка.
//
//
Функция ИнициализироватьХозяйственныеОперацииИДокументы(ХозяйственныеОперацииИДокументы, ОтборХозяйственныеОперации, ОтборТипыДокументов, КлючНазначенияИспользования, ДокументыКОформлению = Ложь) Экспорт
	
	ИспользоватьЛизинг = ПолучитьФункциональнуюОпцию("ИспользоватьЛизинг");
	ИспользоватьРеглУчет = ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет");
	
	ВнеоборотныеАктивыСлужебный.ИнициализироватьХозяйственныеОперацииИДокументыВнеоборотныхАктивов(ХозяйственныеОперацииИДокументы);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОтгрузкуБезПереходаПраваСобственности") Тогда
		Строка = ХозяйственныеОперацииИДокументы.Добавить();
		Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.РеализацияОСсОтложеннымПереходомПрав;
		Строка.ПолноеИмяДокумента			= Метаданные.Документы.РеализацияУслугПрочихАктивов.ПолноеИмя();
		Строка.КлючНазначенияИспользования 	= "РеализацияВнеоборотныхАктивов";
		Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'реализация услуг и прочих активов'");
		Строка.ДобавитьКнопкуСоздать        = Истина;
	КонецЕсли; 
	
	#Область ПринятиеКУчетуОС2_4
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПринятиеКУчетуОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПринятиеКУчетуОС2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "ПринятиеКУчетуОС";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'принятие к учету ОС'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	//
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПринятиеКУчетуОСпоИнвентаризации;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПринятиеКУчетуОС2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "ПринятиеКУчетуОС";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'принятие к учету ОС'");
	
	//
	Если ИспользоватьЛизинг Тогда
		Строка = ХозяйственныеОперацииИДокументы.Добавить();
		Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПринятиеКУчетуОСПоДоговоруЛизинга;
		Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПринятиеКУчетуОС2_4.ПолноеИмя();
		Строка.КлючНазначенияИспользования 	= "ПринятиеКУчетуОС";
		Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'принятие к учету ОС'");
		Строка.ДобавитьКнопкуСоздать        = Истина;
	КонецЕсли;
	#КонецОбласти
	
	#Область СписаниеОС
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.СписаниеОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.СписаниеОС2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "СписаниеОС";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Списание ОС'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	#КонецОбласти
	
	#Область ПеремещениеОС2_4
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПеремещениеОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПеремещениеОС2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "ПеремещениеОС";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'перемещение ОС'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		Строка = ХозяйственныеОперацииИДокументы.Добавить();
		Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПеремещениеОСвПодразделениеВыделенноеНаБаланс;
		Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПеремещениеОС2_4.ПолноеИмя();
		Строка.КлючНазначенияИспользования 	= "ПеремещениеОС";
		Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'перемещение ОС'");
		Строка.ДобавитьКнопкуСоздать        = Истина;
	КонецЕсли; 
	
	#КонецОбласти
	
	#Область Прочее
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВозвратОСотАрендатора;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВозвратОСОтАрендатора2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "ВозвратОСОтАрендатора";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'возврат ОС от арендатора'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ИзменениеПараметровОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ИзменениеПараметровОС2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "ИзменениеПараметровОС";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'изменение параметров ОС'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Если ИспользоватьРеглУчет Тогда
		Строка = ХозяйственныеОперацииИДокументы.Добавить();
		Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ИзменениеСпособаОтраженияИмущественныхНалогов;
		Строка.ПолноеИмяДокумента			= Метаданные.Документы.ИзменениеСпособаОтраженияИмущественныхНалогов.ПолноеИмя();
		Строка.КлючНазначенияИспользования 	= "ИзменениеСпособаОтраженияИмущественныхНалогов";
		Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'изменение способа отражения имущественных налогов'");
		Строка.ДобавитьКнопкуСоздать        = Истина;
	КонецЕсли; 
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ИнвентаризацияОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ИнвентаризацияОС.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "ИнвентаризацияОС";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'инвентаризация ОС'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.МодернизацияОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.МодернизацияОС2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "МодернизацияОС";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'модернизация ОС'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Если ИспользоватьРеглУчет Тогда
		Строка = ХозяйственныеОперацииИДокументы.Добавить();
		Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ОтменаРегистрацииЗемельныхУчастков;
		Строка.ПолноеИмяДокумента			= Метаданные.Документы.ОтменаРегистрацииЗемельныхУчастков.ПолноеИмя();
		Строка.КлючНазначенияИспользования 	= "ОтменаРегистрацииЗемельныхУчастков";
		Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'отмена регистрации земельных участков'");
		Строка.ДобавитьКнопкуСоздать        = Истина;
	
		Строка = ХозяйственныеОперацииИДокументы.Добавить();
		Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ОтменаРегистрацииТранспортныхСредств;
		Строка.ПолноеИмяДокумента			= Метаданные.Документы.ОтменаРегистрацииТранспортныхСредств.ПолноеИмя();
		Строка.КлючНазначенияИспользования 	= "ОтменаРегистрацииТранспортныхСредств";
		Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'отмена регистрации транспортных средств'");
		Строка.ДобавитьКнопкуСоздать        = Истина;
	КонецЕсли;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПередачаОСАрендатору;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПередачаОСАрендатору2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "ПередачаОСАрендатору";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'передача ОС арендатору'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПереоценкаОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПереоценкаОС2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "ПереоценкаОС";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'переоценка ОС'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПодготовкаКПередачеОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПодготовкаКПередачеОС2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "ПодготовкаКПередачеОС";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'подготовка к передаче ОС'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Если ИспользоватьЛизинг Тогда
	
		Строка = ХозяйственныеОперацииИДокументы.Добавить();
		Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПоступлениеПредметовЛизинга;
		Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПоступлениеПредметовЛизинга.ПолноеИмя();
		Строка.КлючНазначенияИспользования 	= "ПоступлениеПредметовЛизинга";
		Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'поступление предметов лизинга'");
		Строка.ДобавитьКнопкуСоздать        = Истина;
		
	КонецЕсли;
	
	Если ИспользоватьРеглУчет Тогда
		Строка = ХозяйственныеОперацииИДокументы.Добавить();
		Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.РегистрацияЗемельныхУчастков;
		Строка.ПолноеИмяДокумента			= Метаданные.Документы.РегистрацияЗемельныхУчастков.ПолноеИмя();
		Строка.КлючНазначенияИспользования 	= "РегистрацияЗемельныхУчастков";
		Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'регистрация земельных участков'");
		Строка.ДобавитьКнопкуСоздать        = Истина;
		
		Строка = ХозяйственныеОперацииИДокументы.Добавить();
		Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.РегистрацияПорядкаНалогообложенияПоНалогуНаИмущество;
		Строка.ПолноеИмяДокумента			= Метаданные.Документы.РегистрацияПорядкаНалогообложенияПоНалогуНаИмущество.ПолноеИмя();
		Строка.КлючНазначенияИспользования 	= "РегистрацияПорядкаНалогообложенияПоНалогуНаИмущество";
		Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'регистрация порядка налогообложения по налогу на имущество'");
		Строка.ДобавитьКнопкуСоздать        = Истина;
		
		Строка = ХозяйственныеОперацииИДокументы.Добавить();
		Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.РегистрацияТранспортныхСредств;
		Строка.ПолноеИмяДокумента			= Метаданные.Документы.РегистрацияТранспортныхСредств.ПолноеИмя();
		Строка.КлючНазначенияИспользования 	= "РегистрацияТранспортныхСредств";
		Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'регистрация транспортных средств'");
		Строка.ДобавитьКнопкуСоздать        = Истина;
	КонецЕсли;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПоступлениеАрендованныхОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПоступлениеАрендованныхОС.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "ПоступлениеАрендованныхОС";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'поступление арендованных ОС'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВыбытиеАрендованныхОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВыбытиеАрендованныхОС.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "ВыбытиеАрендованныхОС";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'выбытие арендованных ОС'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.РегистрацияНаработок;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.РегистрацияНаработок.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "РегистрацияНаработок";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'регистрация наработок'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	// ОтчетОператораСистемыПлатон
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПлатежейВПлатон") Тогда
		Строка = ХозяйственныеОперацииИДокументы.Добавить();
		Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
		Строка.ПолноеИмяДокумента			= "Документ.ОтчетОператораСистемыПлатон";
		Строка.КлючНазначенияИспользования 	= "ОтчетОператораСистемыПлатон";
		Строка.ЗаголовокРабочегоМеста       = НСтр("ru = 'отчеты оператора ""Платон""'");
		Строка.ДобавитьКнопкуСоздать		= Истина;
	КонецЕсли;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.РазукомплектацияОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.РазукомплектацияОС.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "РазукомплектацияОС";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'разукомплектация ОС'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	#КонецОбласти
	
	#Область ВводОстатков
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВводОстатковОсновныхСредств;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВводОстатковВнеоборотныхАктивов2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "ВводОстатковВнеоборотныхАктивов";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Ввод начальных остатков основных средств'");
	Строка.ДобавитьКнопкуСоздать        = Ложь;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВводОстатковВнеоборотныхАктивов2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "ВводОстатковВнеоборотныхАктивов";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Ввод начальных остатков переданных в аренду основных средств'");
	Строка.ДобавитьКнопкуСоздать        = Ложь;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВводОстатковАрендованныхОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВводОстатковВнеоборотныхАктивов2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "ВводОстатковВнеоборотныхАктивов";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Ввод начальных остатков полученных в аренду основных средств'");
	Строка.ДобавитьКнопкуСоздать        = Ложь;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВводОстатковВложенийВоВнеоборотныеАктивы;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВводОстатковВнеоборотныхАктивов2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "ВводОстатковВнеоборотныхАктивов";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Ввод начальных остатков вложений во внеоборотные активы'");
	Строка.ДобавитьКнопкуСоздать        = Ложь;
	
	Если ИспользоватьЛизинг Тогда
		
		Строка = ХозяйственныеОперацииИДокументы.Добавить();
		Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВводОстатковПредметовЛизингаНаБалансе;
		Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВводОстатковВнеоборотныхАктивов2_4.ПолноеИмя();
		Строка.КлючНазначенияИспользования 	= "ВводОстатковВнеоборотныхАктивов";
		Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Ввод начальных остатков предметов лизинга на балансе'");
		Строка.ДобавитьКнопкуСоздать        = Ложь;
		
		Строка = ХозяйственныеОперацииИДокументы.Добавить();
		Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуПредметовЛизингаНаБалансе;
		Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВводОстатковВнеоборотныхАктивов2_4.ПолноеИмя();
		Строка.КлючНазначенияИспользования 	= "ВводОстатковВнеоборотныхАктивов";
		Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Ввод начальных остатков переданных в аренду предметов лизинга на балансе'");
		Строка.ДобавитьКнопкуСоздать        = Ложь;
		
		Строка = ХозяйственныеОперацииИДокументы.Добавить();
		Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВводОстатковПредметовЛизингаЗаБалансом;
		Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВводОстатковВнеоборотныхАктивов2_4.ПолноеИмя();
		Строка.КлючНазначенияИспользования 	= "ВводОстатковВнеоборотныхАктивов";
		Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Ввод начальных остатков предметов лизинга за балансом'");
		Строка.ДобавитьКнопкуСоздать        = Ложь;
		
	КонецЕсли; 
	
	#КонецОбласти
	
	#Область Документы2_2
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_2") Тогда
		
		Строка = ХозяйственныеОперацииИДокументы.Добавить();
		Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ИзменениеСостоянияОС;
		Строка.ПолноеИмяДокумента			= Метаданные.Документы.ИзменениеСостоянияОС.ПолноеИмя();
		Строка.КлючНазначенияИспользования 	= "ИзменениеСостоянияОС";
		Строка.ДобавитьКнопкуСоздать        = Ложь;
		
	КонецЕсли; 
	#КонецОбласти
	
	//++ НЕ УТКА
	#Область МеждународныйУчет
	
	// ИзменениеПараметровОСМеждународныйУчет
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ИзменениеПараметровОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ИзменениеПараметровОСМеждународныйУчет.ПолноеИмя();
	Строка.ДокументПредставление        = НСтр("ru = 'Изменение параметров ОС (международный учет)'");
	Строка.КлючНазначенияИспользования 	= "МеждународныйУчет";
	Строка.ДобавитьКнопкуСоздать        = Ложь;
	
	// ПереводОсновныхСредствИнвестиционногоИмуществаМеждународныйУчет
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПереводОсновныхСредствИнвестиционногоИмущества;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПереводОсновныхСредствИнвестиционногоИмуществаМеждународныйУчет.ПолноеИмя();
	Строка.ДокументПредставление        = НСтр("ru = 'Перевод основных средств и инвестиционного имущества (международный учет)'");
	Строка.КлючНазначенияИспользования 	= "МеждународныйУчет";
	Строка.ДобавитьКнопкуСоздать        = Ложь;
	
	// ПеремещениеОСМеждународныйУчет
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПеремещениеОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПеремещениеОСМеждународныйУчет.ПолноеИмя();
	Строка.ДокументПредставление        = НСтр("ru = 'Перемещение ОС (международный учет)'");
	Строка.КлючНазначенияИспользования 	= "МеждународныйУчет";
	Строка.ДобавитьКнопкуСоздать        = Ложь;
	
	// ПринятиеКУчетуОСМеждународныйУчет
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПринятиеКУчетуОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПринятиеКУчетуОСМеждународныйУчет.ПолноеИмя();
	Строка.ДокументПредставление        = НСтр("ru = 'Принятие к учету ОС (международный учет)'");
	Строка.КлючНазначенияИспользования 	= "МеждународныйУчет";
	Строка.ДобавитьКнопкуСоздать        = Ложь;
	
	// СписаниеОСМеждународныйУчет
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.СписаниеОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.СписаниеОСМеждународныйУчет.ПолноеИмя();
	Строка.ДокументПредставление        = НСтр("ru = 'Списание ОС (международный учет)'");
	Строка.КлючНазначенияИспользования 	= "МеждународныйУчет";
	Строка.ДобавитьКнопкуСоздать        = Ложь;
	
	// ВводОстатковОСМеждународныйУчет
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВводОстатковОсновныхСредств;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВводОстатковОСМеждународныйУчет.ПолноеИмя();
	Строка.ДокументПредставление        = НСтр("ru = 'Ввод начальных остатков основных средств (международный учет)'");
	Строка.КлючНазначенияИспользования 	= "МеждународныйУчет";
	Строка.ДобавитьКнопкуСоздать        = Ложь;
	#КонецОбласти
	//-- НЕ УТКА
	
	ТаблицаЗначенийДоступно = ОбщегоНазначенияУТ.ДоступныеХозяйственныеОперацииИДокументы(
								ХозяйственныеОперацииИДокументы, 
								ОтборХозяйственныеОперации, 
								ОтборТипыДокументов, 
								КлючНазначенияИспользования);
	
	Возврат ТаблицаЗначенийДоступно;
		
КонецФункции

// Определяет состав документов и хозяйственных операций, доступных для отображения в рабочем месте.
//
// Параметры:
//  ХозяйственныеОперацииИДокументы	 - ТаблицаЗначений - таблица значений с колонками:
//     * ХозяйственнаяОперация					 - ПеречислениеСсылка.ХозяйственныеОперации
//     * ИдентификаторОбъектаМетаданных			 - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//     * Отбор									 - Булево
//     * ДокументПредставление					 - Строка
//     * ПолноеИмяДокумента						 - Строка
//     * Накладная								 - Булево
//     * ИспользуетсяРаспоряжение				 - Булево
//     * ИспользуютсяСтатусы					 - Булево
//     * ПоНесколькимЗаказам					 - Булево
//     * ПриходныйОрдерНевозможен				 - Булево
//     * РазделятьДокументыПоПодразделению		 - Булево
//     * ПолноеИмяНакладной						 - Строка
//     * КлючНазначенияИспользования			 - Строка
//     * ПравоДоступаДобавление					 - Булево
//     * ПравоДоступаИзменение					 - Булево
//     * ЗаголовокРабочегоМеста					 - Строка
//     * ИменаЭлементовСУправляемойВидимостью	 - Строка
//     * ИменаЭлементовРабочегоМеста			 - Строка
//     * ИменаОтображаемыхЭлементов				 - Строка
//     * МенеджерРасчетаГиперссылкиКОформлению	 - Строка
//  ОтборХозяйственныеОперации		 - СписокЗначений - список значений типа ПеречислениеСсылка.ХозяйственныеОперации
//  ОтборТипыДокументов				 - СписокЗначений - список значений типа СправочникСсылка.ИдентификаторыОбъектовМетаданных
//  КлючНазначенияИспользования		 - Строка - ключ рабочего места для которого вызывается функция
//  ДокументыКОформлению			 - Булево - признак вызова метода для формы "ФормаСпискаКОформлению".
// 
// Возвращаемое значение:
//   - ТаблицаЗначений - таблица значений с колонками:
//     * ХозяйственнаяОперация					 - ПеречислениеСсылка.ХозяйственныеОперации
//     * ИдентификаторОбъектаМетаданных			 - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//     * Отбор									 - Булево
//     * ДокументПредставление					 - Строка
//     * ПолноеИмяДокумента						 - Строка
//     * Накладная								 - Булево
//     * ИспользуетсяРаспоряжение				 - Булево
//     * ИспользуютсяСтатусы					 - Булево
//     * ПоНесколькимЗаказам					 - Булево
//     * ПриходныйОрдерНевозможен				 - Булево
//     * РазделятьДокументыПоПодразделению		 - Булево
//     * ПолноеИмяНакладной						 - Строка
//     * КлючНазначенияИспользования			 - Строка
//     * ПравоДоступаДобавление					 - Булево
//     * ПравоДоступаИзменение					 - Булево
//     * ЗаголовокРабочегоМеста					 - Строка
//     * ИменаЭлементовСУправляемойВидимостью	 - Строка
//     * ИменаЭлементовРабочегоМеста			 - Строка
//     * ИменаОтображаемыхЭлементов				 - Строка
//     * МенеджерРасчетаГиперссылкиКОформлению	 - Строка.
//
//
Функция ИнициализироватьХозяйственныеОперацииИДокументы2_2(ХозяйственныеОперацииИДокументы, ОтборХозяйственныеОперации, ОтборТипыДокументов, КлючНазначенияИспользования, ДокументыКОформлению = Ложь) Экспорт
	
	// ВнутреннееПотреблениеТоваров
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВнутреннееПотреблениеТоваров.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "РегламентированныйУчет";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	// ВозвратОСОтАрендатора
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВозвратОСотАрендатора;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВозвратОСОтАрендатора.ПолноеИмя();
	Строка.ДокументПредставление        = НСтр("ru = 'Возврат ОС от арендатора'");
	Строка.КлючНазначенияИспользования 	= "РегламентированныйУчет";
	Строка.ДобавитьКнопкуСоздать        = Истина;

	// ВыбытиеАрендованныхОС
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВыбытиеАрендованныхОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВыбытиеАрендованныхОС.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "РегламентированныйУчет";
	Строка.ДобавитьКнопкуСоздать        = Истина;

 	// ИзменениеПараметровОС
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ИзменениеПараметровОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ИзменениеПараметровОС.ПолноеИмя();
	Строка.ДокументПредставление        = НСтр("ru = 'Изменение параметров ОС'");
	Строка.КлючНазначенияИспользования 	= "РегламентированныйУчет";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	// ИзменениеСостоянияОС
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ИзменениеСостоянияОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ИзменениеСостоянияОС.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "РегламентированныйУчет";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	// ИзменениеСпособаОтраженияИмущественныхНалогов
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ИзменениеСпособаОтраженияИмущественныхНалогов;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ИзменениеСпособаОтраженияИмущественныхНалогов.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "РегламентированныйУчет";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	// ИнвентаризацияОС
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ИнвентаризацияОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ИнвентаризацияОС.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "РегламентированныйУчет";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	// МодернизацияОС
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.МодернизацияОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.МодернизацияОС.ПолноеИмя();
	Строка.ДокументПредставление        = НСтр("ru = 'Модернизация ОС'");
	Строка.КлючНазначенияИспользования 	= "РегламентированныйУчет";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	// ОтменаРегистрацииЗемельныхУчастков
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ОтменаРегистрацииЗемельныхУчастков;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ОтменаРегистрацииЗемельныхУчастков.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "РегламентированныйУчет";
	Строка.ДобавитьКнопкуСоздать        = Истина;

	// ОтменаРегистрацииТранспортныхСредств
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ОтменаРегистрацииТранспортныхСредств;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ОтменаРегистрацииТранспортныхСредств.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "РегламентированныйУчет";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	// ОтчетОператораСистемыПлатон
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	Строка.ПолноеИмяДокумента			= "Документ.ОтчетОператораСистемыПлатон";
	Строка.КлючНазначенияИспользования 	= "РегламентированныйУчет";
	Строка.ДобавитьКнопкуСоздать		= Истина;
	
	// ПередачаОСАрендатору
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПередачаОСАрендатору;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПередачаОСАрендатору.ПолноеИмя();
	Строка.ДокументПредставление        = НСтр("ru = 'Передача ОС арендатору'");
	Строка.КлючНазначенияИспользования 	= "РегламентированныйУчет";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	// ПеремещениеОС
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПеремещениеОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПеремещениеОС.ПолноеИмя();
	Строка.ДокументПредставление        = НСтр("ru = 'Перемещение ОС'");
	Строка.КлючНазначенияИспользования 	= "РегламентированныйУчет";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПеремещениеОСвПодразделениеВыделенноеНаБаланс;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПеремещениеОС.ПолноеИмя();
	Строка.ДокументПредставление        = НСтр("ru = 'Перемещение ОС'");
	Строка.КлючНазначенияИспользования 	= "РегламентированныйУчет";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	// ПереоценкаОС
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПереоценкаОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПереоценкаОС.ПолноеИмя();
	Строка.ДокументПредставление        = НСтр("ru = 'Переоценка ОС'");
	Строка.КлючНазначенияИспользования 	= "РегламентированныйУчет";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	// ПодготовкаКПередачеОС
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПодготовкаКПередачеОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПодготовкаКПередачеОС.ПолноеИмя();
	Строка.ДокументПредставление        = НСтр("ru = 'Подготовка к передаче ОС'");
	Строка.КлючНазначенияИспользования 	= "РегламентированныйУчет";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	// ПоступлениеАрендованныхОС
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПоступлениеАрендованныхОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПоступлениеАрендованныхОС.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "РегламентированныйУчет";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	// ПоступлениеПредметовЛизинга
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПоступлениеПредметовЛизинга;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПоступлениеПредметовЛизинга.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "РегламентированныйУчет";
	Строка.ДобавитьКнопкуСоздать        = Истина;
		
	// ПринятиеКУчетуОС
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПринятиеКУчетуОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПринятиеКУчетуОС.ПолноеИмя();
	Строка.ДокументПредставление        = НСтр("ru = 'Принятие к учету ОС'");
	Строка.КлючНазначенияИспользования 	= "РегламентированныйУчет";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	// ПриобретениеУслугПрочихАктивов
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПриобретениеУслугПрочихАктивов.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "РегламентированныйУчет";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	// РеализацияУслугПрочихАктивов
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.РеализацияУслугПрочихАктивов.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "РегламентированныйУчет";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	// РегистрацияЗемельныхУчастков
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.РегистрацияЗемельныхУчастков;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.РегистрацияЗемельныхУчастков.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "РегламентированныйУчет";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	// РегистрацияНаработок
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.РегистрацияНаработок;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.РегистрацияНаработок.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "РегламентированныйУчет";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	// РегистрацияПорядкаНалогообложенияПоНалогуНаИмущество
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.РегистрацияПорядкаНалогообложенияПоНалогуНаИмущество;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.РегистрацияПорядкаНалогообложенияПоНалогуНаИмущество.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "РегламентированныйУчет";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	// РегистрацияТранспортныхСредств
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.РегистрацияТранспортныхСредств;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.РегистрацияТранспортныхСредств.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "РегламентированныйУчет";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	// СписаниеОС
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.СписаниеОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.СписаниеОС.ПолноеИмя();
	Строка.ДокументПредставление        = НСтр("ru = 'Списание ОС'");
	Строка.КлючНазначенияИспользования 	= "РегламентированныйУчет";
	Строка.ДобавитьКнопкуСоздать        = Истина;

	ТаблицаЗначенийДоступно = ОбщегоНазначенияУТ.ДоступныеХозяйственныеОперацииИДокументы(
								ХозяйственныеОперацииИДокументы, 
								ОтборХозяйственныеОперации, 
								ОтборТипыДокументов, 
								КлючНазначенияИспользования);
	
	Возврат ТаблицаЗначенийДоступно;
		
КонецФункции

#Область Команды

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	// Список "Документы"
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.МестоРазмещения = "СписокПодменюОтчеты";
		КомандаОтчет.Важность = "СмТакже";
		КомандаОтчет.ИмяСписка = "Список";
		КомандаОтчет.ВидимостьВФормах = "ДокументыПоОС";
	КонецЕсли; 
	
	// Список "Документы с детализацией по ОС"
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.МестоРазмещения = "СписокДетальноПодменюОтчеты";
		КомандаОтчет.Важность = "ПодменюОтчетыСмТакжеДетально";
		КомандаОтчет.ИмяСписка = "СписокДетально";
		КомандаОтчет.ВидимостьВФормах = "ДокументыПоОС";
	КонецЕсли; 
	
	// Версия 2.2
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.ВидимостьВФормах = "ДокументыПоОС2_2";
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "Форма" И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") Тогда
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "ДокументыПоОС2_2"
	КонецЕсли; 
	
КонецПроцедуры

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Функция ИнициализироватьХозяйственныеОперацииИДокументыАмортизации(ХозяйственныеОперацииИДокументы, ОтборХозяйственныеОперации, ОтборТипыДокументов, КлючНазначенияИспользования) Экспорт
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.АмортизацияОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.АмортизацияОС2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "АмортизацияОС";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Амортизация'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Если КлючНазначенияИспользования = КлючНазначенияФормыПоУмолчанию() Тогда
		КлючНастроек = "";
	Иначе
		КлючНастроек = КлючНазначенияИспользования;
	КонецЕсли;
	
	ТаблицаЗначенийДоступно = ОбщегоНазначенияУТ.ДоступныеХозяйственныеОперацииИДокументы(
								ХозяйственныеОперацииИДокументы, 
								ОтборХозяйственныеОперации, 
								ОтборТипыДокументов, 
								КлючНастроек);
								
	Возврат ТаблицаЗначенийДоступно;
	
КонецФункции

Функция КлючНазначенияФормыПоУмолчанию() Экспорт
	
	Возврат "ДокументыОС";
	
КонецФункции

Функция КлючНазначенияФормыПоУмолчанию2_2() Экспорт
	
	Возврат "РегламентированныйУчет";
	
КонецФункции

#КонецОбласти

#КонецЕсли
