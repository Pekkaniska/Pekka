
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	Если ПолучитьФункциональнуюОпцию("ВыполнятьРасчетЗарплатыПоПодразделениям") Тогда
		ВРазрезеПодразделений = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("СозданиеВедомостейНаВыплатуЗарплаты", "ВРазрезеПодразделений", Истина);
	Иначе
		ВРазрезеПодразделений = Ложь;
	КонецЕсли;	
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиРасходовЗарплата") Тогда
		ВРазрезеИсточников = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("СозданиеВедомостейНаВыплатуЗарплаты", "ВРазрезеИсточников", Истина);
	Иначе
		ВРазрезеИсточников = Ложь;
	КонецЕсли;	
	
	Если ПолучитьФункциональнуюОпцию("ПроверятьЗаполнениеФинансированияВВедомостях") Тогда
		ВРазрезеИсточников = Истина;
		Элементы.ВРазрезеИсточников.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("РасчетныйДокумент", РасчетныйДокумент) Тогда
		
		Элементы.РасчетныйДокумент.ТолькоПросмотр = Истина;
		Элементы.РасчетныйДокумент.КнопкаОткрытия = Ложь;
		Элементы.РасчетныйДокумент.КнопкаВыбора   = Ложь;
		
		РасчетныйДокументПриИзмененииНаСервере()
		
	Иначе
		
		Элементы.РасчетныйДокумент.ТолькоПросмотр = Ложь;
		Элементы.РасчетныйДокумент.КнопкаОткрытия = Истина;
		Элементы.РасчетныйДокумент.КнопкаВыбора   = Истина;
		
		ТипыРасчетныхДокументов = Новый Массив;
		НачисленияУдержанияПоСотрудникамМетаданные = Метаданные.РегистрыНакопления.НачисленияУдержанияПоСотрудникам;
		ЗарплатаКВыплатеМетаданные = Метаданные.РегистрыНакопления.ЗарплатаКВыплате;
		Для Каждого ДокументМетаданные Из Метаданные.Документы Цикл
			Если ДокументМетаданные.Движения.Содержит(НачисленияУдержанияПоСотрудникамМетаданные) 
				И ДокументМетаданные.Движения.Содержит(ЗарплатаКВыплатеМетаданные) Тогда
				ТипыРасчетныхДокументов.Добавить(Тип("ДокументСсылка."+ДокументМетаданные.Имя))
			КонецЕсли	
		КонецЦикла;	
		Элементы.РасчетныйДокумент.ОграничениеТипа = Новый ОписаниеТипов(ТипыРасчетныхДокументов);
		
		ДатаВыплаты = ТекущаяДатаСеанса();
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимостьКолонокТаблицыВедомости()
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РасчетныйДокументПриИзменении(Элемент)
	РасчетныйДокументПриИзмененииНаСервере()	
КонецПроцедуры

&НаКлиенте
Процедура СпособВыплатыПриИзменении(Элемент)
	СоздатьВедомости()
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	СоздатьВедомости();
КонецПроцедуры

&НаКлиенте
Процедура ВРазрезеПодразделенийПриИзменении(Элемент)
	УстановитьВидимостьКолонокТаблицыВедомости();
	СоздатьВедомости()
КонецПроцедуры

&НаКлиенте
Процедура ВРазрезеИсточниковПриИзменении(Элемент)
	УстановитьВидимостьКолонокТаблицыВедомости();
	СоздатьВедомости()
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура ВедомостиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьТекущуюВедомость();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьВедомости(Команда)
	СоздатьВедомости(Истина)
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВедомость(Команда)
	ОткрытьТекущуюВедомость();
КонецПроцедуры

&НаКлиенте
Процедура ПровестиВедомостиВыполнить(Команда)
	Если ПровестиВедомостиВыполнитьНаСервере() Тогда
		Закрыть();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаВыполнить(Команда)
	Закрыть();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьВидимостьКолонокТаблицыВедомости()
	Элементы.ВедомостиПодразделение.Видимость  = ВРазрезеПодразделений;
	Элементы.ВедомостиФинансирование.Видимость = ВРазрезеИсточников;
КонецПроцедуры	
	
&НаСервере
Процедура РасчетныйДокументПриИзмененииНаСервере()
	
	ВидДокумента = Перечисления.ВидыДокументовМежрасчетныхНачислений.ПоДокументу(РасчетныйДокумент);
	
	ПараметрВыбораСпособаВыплаты = Новый ПараметрВыбора("Отбор.ВидДокументаОснования", ВидДокумента);
	ПараметрыВыбораСпособаВыплаты = Новый Массив();
	ПараметрыВыбораСпособаВыплаты.Добавить(ПараметрВыбораСпособаВыплаты);
	Элементы.СпособВыплаты.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораСпособаВыплаты);
	
	СпособВыплаты = ВзаиморасчетыССотрудниками.СпособВыплатыПоРасчетномуДокументу(РасчетныйДокумент);
	Если РасчетныйДокумент.Метаданные().Реквизиты.Найти("ПланируемаяДатаВыплаты") <> Неопределено Тогда
		ДатаВыплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РасчетныйДокумент, "ПланируемаяДатаВыплаты");
	Иначе	
		ДатаВыплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РасчетныйДокумент, "Дата");
	КонецЕсли;
	
	СоздатьВедомостиНаСервере(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВедомости(СообщитьПользователю = Ложь)
	ОчиститьСообщения();
	СоздатьВедомостиНаСервере(СообщитьПользователю);
КонецПроцедуры

&НаСервере
Процедура СоздатьВедомостиНаСервере(СообщитьПользователю)
	
	ПравилаПроверки = Новый СписокЗначений;
	ПравилаПроверки.Добавить("РасчетныйДокумент",	НСтр("ru='Не выбран документ'"));
	ПравилаПроверки.Добавить("СпособВыплаты",		НСтр("ru='Не указан способ выплаты'"));
	ПравилаПроверки.Добавить("ДатаВыплаты",			НСтр("ru='Не задана дата выплаты'"));

	МожноСоздатьВедомости = ЗарплатаКадрыКлиентСервер.СвойстваФормыЗаполнены(ЭтаФорма, ПравилаПроверки, СообщитьПользователю);

	Если МожноСоздатьВедомости Тогда
		
		ПараметрыСозданияВедомостей = Обработки.СозданиеВедомостейНаВыплатуЗарплаты.ПараметрыСозданияВедомостейПоРасчетномуДокументу();
		ПараметрыСозданияВедомостей.СпособВыплаты			= СпособВыплаты;
		ПараметрыСозданияВедомостей.ДатаВыплаты				= ДатаВыплаты;
		ПараметрыСозданияВедомостей.ВРазрезеПодразделений	= ВРазрезеПодразделений;
		ПараметрыСозданияВедомостей.ВРазрезеИсточников		= ВРазрезеИсточников;
		
		ВедомостиПоРасчетномуДокументу = 
			Обработки.СозданиеВедомостейНаВыплатуЗарплаты.СоздатьВедомостиПоРасчетномуДокументу(
				РасчетныйДокумент, 
				ПараметрыСозданияВедомостей);
		
		ЗаполнитьСписокВедомостей(ВедомостиПоРасчетномуДокументу);
		
	КонецЕсли	
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьСписокВедомостей(ВедомостиПоРасчетномуДокументу)
	
	Ведомости.Очистить();
	
	ПоказыватьСтатьиРасходов		= ВРазрезеИсточников И ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиРасходовЗарплата");
	ПоказыватьСтатьиФинансирования	= ВРазрезеИсточников И ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата");
	
	Для Каждого Ведомость Из ВедомостиПоРасчетномуДокументу Цикл
		
		Строка = Ведомости.Добавить();
		
		Строка.Адрес = 
			ПоместитьВоВременноеХранилище(
				ОбщегоНазначения.ЗначениеВСтрокуXML(Ведомость), 
				УникальныйИдентификатор);
				
		Строка.Ссылка = Ведомость.ПолучитьСсылкуНового();
		
		Строка.Тип = Ведомость.Метаданные().Синоним;
		
		Строка.Подразделение        = Ведомость.Подразделение;
		
		Если ПоказыватьСтатьиФинансирования И ПоказыватьСтатьиРасходов Тогда
			Строка.Финансирование = 
				СтрШаблон(
					НСтр("ru = '%1(%2)'"),
					ВедомостьНаВыплатуЗарплатыФормыПовтИсп.ПредставленияСтатейФинансирования()[Ведомость.СтатьяФинансирования],
					ВедомостьНаВыплатуЗарплатыФормыПовтИсп.ПредставленияСтатейРасходов()[Ведомость.СтатьяРасходов]);
		ИначеЕсли ПоказыватьСтатьиФинансирования Тогда
			Строка.Финансирование = 
				ВедомостьНаВыплатуЗарплатыФормыПовтИсп.ПредставленияСтатейФинансирования()[Ведомость.СтатьяФинансирования];
		ИначеЕсли ПоказыватьСтатьиРасходов Тогда
			Строка.Финансирование = 
				ВедомостьНаВыплатуЗарплатыФормыПовтИсп.ПредставленияСтатейРасходов()[Ведомость.СтатьяРасходов];
		Иначе
			Строка.Финансирование = "";
		КонецЕсли;
		
		Строка.Сумма = Ведомость.Зарплата.Итог("КВыплате");
		
		Сотрудники = Ведомость.Зарплата.Выгрузить(, "Сотрудник");
		Сотрудники.Свернуть("Сотрудник");
		Сотрудники = Сотрудники.ВыгрузитьКолонку("Сотрудник");
		
		Если Сотрудники.Количество() <= 3 Тогда
			Строка.Сотрудники  = СтрСоединить(Сотрудники, Символы.ПС);
		Иначе	
			Строка.Сотрудники  = ЗарплатаКадры.КраткийСоставСотрудников(Сотрудники, Ведомость.Дата);
		КонецЕсли;	
				
	КонецЦикла	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТекущуюВедомость()
	
	ТекущиеДанные = Элементы.Ведомости.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы = Новый Структура("АдресВоВременномХранилище", ТекущиеДанные.Адрес);
		ОткрытьФорму("Обработка.СозданиеВедомостейНаВыплатуЗарплаты.Форма.Ведомость", ПараметрыФормы, ЭтаФорма);
	КонецЕсли	
	
КонецПроцедуры

&НаСервере
Функция ПровестиВедомостиВыполнитьНаСервере()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("СозданиеВедомостейНаВыплатуЗарплаты", "ВРазрезеПодразделений",ВРазрезеПодразделений);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("СозданиеВедомостейНаВыплатуЗарплаты", "ВРазрезеИсточников",	ВРазрезеИсточников);
	
	Если СохранитьВедомости(РежимЗаписиДокумента.Проведение) Тогда
		Возврат Истина;
	Иначе
		ОбработатьСообщенияПользователю();
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции

&НаСервере
Функция СохранитьВедомости(РежимЗаписи)	
	
	ВедомостиПоРасчетномуДокументу = Новый Массив;
	Для Каждого Строка Из Ведомости Цикл
		СтрокаXML = ПолучитьИзВременногоХранилища(Строка.Адрес);
		Ведомость = ОбщегоНазначения.ЗначениеИзСтрокиXML(СтрокаXML);
		ВедомостиПоРасчетномуДокументу.Добавить(Ведомость);
	КонецЦикла;
	
	Возврат 
		Обработки.СозданиеВедомостейНаВыплатуЗарплаты.ПроверитьВедомости(ВедомостиПоРасчетномуДокументу)
		И Обработки.СозданиеВедомостейНаВыплатуЗарплаты.СохранитьВедомости(ВедомостиПоРасчетномуДокументу, РежимЗаписи)
	
КонецФункции	

&НаСервере
Процедура ОбработатьСообщенияПользователю()
	
	Сообщения = ПолучитьСообщенияПользователю(Ложь);
	
	Для Каждого Сообщение Из Сообщения Цикл
		Строка = Ведомости.НайтиСтроки(Новый Структура("Ссылка", Сообщение.КлючДанных))[0];
		Сообщение.КлючДанных = Неопределено;
		Сообщение.Поле = СтрШаблон("Ведомости[%1].Тип", Ведомости.Индекс(Строка));
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
