
&НаСервере
Процедура ЗаполнитьТаблицуСчетовНаСервере()
	
	Объект.ТаблицаСчетов.Очистить();
	
	// Вставить содержимое обработчика.
	Запрос = Новый Запрос;
	Запрос.Текст=
	//"ВЫБРАТЬ
	//|	ТаблицаЗаказыКлиентовОбороты.ЗаказКлиента.Контрагент КАК Контрагент,
	//|	ТаблицаЗаказыКлиентовОбороты.ЗаказКлиента.Договор КАК Договор,
	//|	ТаблицаЗаказыКлиентовОбороты.ЗаказКлиента.Менеджер КАК Менеджер,
	//|	ТаблицаЗаказыКлиентовОбороты.ЗаказКлиента КАК Счет,
	//|	ЗаказКлиентаТовары.Номенклатура.ВидНоменклатуры КАК ВидСчета,
	//|	ТаблицаЗаказыКлиентовОбороты.СуммаПриход КАК СуммаСчета,
	//|	ЕСТЬNULL(РасчетыСКлиентамиОстаткиИОбороты.СуммаРасход, 0) КАК СуммаОплат,
	//|	ТаблицаЗаказыКлиентовОбороты.СуммаПриход - ЕСТЬNULL(РасчетыСКлиентамиОстаткиИОбороты.СуммаРасход, 0) КАК Задолженность,
	//|	ТаблицаЗаказыКлиентовОбороты.ЗаказКлиента.АдресДоставки КАК Объект,
	//|	ТаблицаЗаказыКлиентовОбороты.СуммаПриход * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 1) КАК СуммаСчетаРегл,
	//|	ЕСТЬNULL(ЗаказКлиентаЭтапыГрафикаОплаты.СуммаПлатежа,0) КАК СуммаПлатежа,
	//|	ЕСТЬNULL(ЗаказКлиентаЭтапыГрафикаОплаты.ДатаПлатежа, ТаблицаЗаказыКлиентовОбороты.ЗаказКлиента.Дата) КАК ДатаПлатежа,
	//|	РАЗНОСТЬДАТ(ЕСТЬNULL(ЗаказКлиентаЭтапыГрафикаОплаты.ДатаПлатежа, ТаблицаЗаказыКлиентовОбороты.ЗаказКлиента.Дата), &ДатаАнализа, ДЕНЬ) КАК КоличествоДнейПросрочки
	//|ИЗ
	//|	РегистрНакопления.ЗаказыКлиентов.Обороты КАК ТаблицаЗаказыКлиентовОбороты
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(, , , , ) КАК РасчетыСКлиентамиОстаткиИОбороты
	//|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалютСрезПоследних
	//|			ПО РасчетыСКлиентамиОстаткиИОбороты.Валюта = КурсыВалютСрезПоследних.Валюта
	//|		ПО ТаблицаЗаказыКлиентовОбороты.ЗаказКлиента = РасчетыСКлиентамиОстаткиИОбороты.ЗаказКлиента
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	//|		ПО ТаблицаЗаказыКлиентовОбороты.ЗаказКлиента = ЗаказКлиентаТовары.Ссылка
	//|			И (1 = ЗаказКлиентаТовары.НомерСтроки)
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.ЭтапыГрафикаОплаты КАК ЗаказКлиентаЭтапыГрафикаОплаты
	//|		ПО ТаблицаЗаказыКлиентовОбороты.ЗаказКлиента = ЗаказКлиентаЭтапыГрафикаОплаты.Ссылка
	//|ГДЕ
	//|	ТаблицаЗаказыКлиентовОбороты.ЗаказКлиента <> НЕОПРЕДЕЛЕНО
	//|	И ТаблицаЗаказыКлиентовОбороты.СуммаПриход - ЕСТЬNULL(РасчетыСКлиентамиОстаткиИОбороты.СуммаРасход, 0) > 0
	//|	И (&НетСписокКонтрагентов = Истина
	//|			ИЛИ ТаблицаЗаказыКлиентовОбороты.ЗаказКлиента.Контрагент В (&СписокКонтрагентов))
	//|	И (&Менеджер = НЕОПРЕДЕЛЕНО
	//|			ИЛИ ТаблицаЗаказыКлиентовОбороты.ЗаказКлиента.Менеджер = &Менеджер)
	//|	И (&Регион = НЕОПРЕДЕЛЕНО
	//|			ИЛИ ТаблицаЗаказыКлиентовОбороты.ЗаказКлиента.АдресДоставки = &Регион)
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	Контрагент,
	//|	ТаблицаЗаказыКлиентовОбороты.ЗаказКлиента.Дата,
	//|	ЗаказКлиентаЭтапыГрафикаОплаты.НомерСтроки";
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументыЗаказКлиента.Ссылка КАК ЗаказКлиента,
	|	ДокументыЗаказКлиента.СуммаДокумента КАК СуммаПриход
	|ПОМЕСТИТЬ ТаблицаЗаказов
	|ИЗ
	|	Документ.ЗаказКлиента КАК ДокументыЗаказКлиента
	|ГДЕ
	|	ДокументыЗаказКлиента.ПометкаУдаления = ЛОЖЬ
	|	И НЕ ДокументыЗаказКлиента.пкЗакрыт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЗаказов.ЗаказКлиента.Контрагент КАК Контрагент,
	|	ТаблицаЗаказов.ЗаказКлиента.Договор КАК Договор,
	|	ТаблицаЗаказов.ЗаказКлиента.Менеджер КАК Менеджер,
	|	ТаблицаЗаказов.ЗаказКлиента КАК Счет,
	|	ЗаказКлиентаТовары.Номенклатура.ВидНоменклатуры КАК ВидСчета,
	|	ТаблицаЗаказов.СуммаПриход КАК СуммаСчета,
	|	ЕСТЬNULL(РасчетыСКлиентамиОстаткиИОбороты.КОплатеРасход, 0) КАК СуммаОплат,
//++ Рарус Лимаренко КА Заявка №6594	
	|	ВЫБОР
	|		КОГДА ТаблицаЗаказов.СуммаПриход - ЕСТЬNULL(РасчетыСКлиентамиОстаткиИОбороты.СуммаРасход, 0) > 0
	|			ТОГДА ТаблицаЗаказов.СуммаПриход - ЕСТЬNULL(РасчетыСКлиентамиОстаткиИОбороты.СуммаРасход, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Задолженность,
	//|  ТаблицаЗаказов.СуммаПриход - ЕСТЬNULL(РасчетыСКлиентамиОстаткиИОбороты.СуммаРасход, 0) КАК Задолженность,
//-- Рарус Лимаренко КА Заявка №6594
	|	ТаблицаЗаказов.ЗаказКлиента.АдресДоставки КАК Объект,
	|	ТаблицаЗаказов.СуммаПриход * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 1) КАК СуммаСчетаРегл,
	|	ЕСТЬNULL(ЗаказКлиентаЭтапыГрафикаОплаты.СуммаПлатежа, 0) КАК СуммаПлатежа,
	|	ЕСТЬNULL(ЗаказКлиентаЭтапыГрафикаОплаты.ДатаПлатежа, ТаблицаЗаказов.ЗаказКлиента.Дата) КАК ДатаПлатежа,
	|	РАЗНОСТЬДАТ(ЕСТЬNULL(ЗаказКлиентаЭтапыГрафикаОплаты.ДатаПлатежа, ТаблицаЗаказов.ЗаказКлиента.Дата), &ДатаАнализа, ДЕНЬ) КАК КоличествоДнейПросрочки,
	|	ТаблицаЗаказов.ЗаказКлиента.Номер КАК НомерСчета,
//++ Рарус Лимаренко КА Заявка №6594 
	|	ВЫБОР
	|		КОГДА ТаблицаЗаказов.СуммаПриход - ЕСТЬNULL(РасчетыСКлиентамиОстаткиИОбороты.СуммаРасход, 0) < 0
	|			ТОГДА -1*(ТаблицаЗаказов.СуммаПриход - ЕСТЬNULL(РасчетыСКлиентамиОстаткиИОбороты.СуммаРасход, 0))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Переплата
//-- Рарус Лимаренко КА Заявка №6594 	
	|ИЗ
	|	ТаблицаЗаказов КАК ТаблицаЗаказов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(,&ДатаАнализа , , , ) КАК РасчетыСКлиентамиОстаткиИОбороты
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаАнализа) КАК КурсыВалютСрезПоследних
	|			ПО РасчетыСКлиентамиОстаткиИОбороты.Валюта = КурсыВалютСрезПоследних.Валюта
	|		ПО ТаблицаЗаказов.ЗаказКлиента = РасчетыСКлиентамиОстаткиИОбороты.ЗаказКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|		ПО ТаблицаЗаказов.ЗаказКлиента = ЗаказКлиентаТовары.Ссылка
	|			И (1 = ЗаказКлиентаТовары.НомерСтроки)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.ЭтапыГрафикаОплаты КАК ЗаказКлиентаЭтапыГрафикаОплаты
	|		ПО ТаблицаЗаказов.ЗаказКлиента = ЗаказКлиентаЭтапыГрафикаОплаты.Ссылка
	|ГДЕ
	|	ТаблицаЗаказов.ЗаказКлиента <> НЕОПРЕДЕЛЕНО
//++ Рарус Лимаренко КА Заявка №6594 
	|	И ТаблицаЗаказов.СуммаПриход - ЕСТЬNULL(РасчетыСКлиентамиОстаткиИОбороты.СуммаРасход, 0) <> 0
//-- Рарус Лимаренко КА Заявка №6594
	|	И (&НетСписокКонтрагентов = ИСТИНА
	|			ИЛИ ТаблицаЗаказов.ЗаказКлиента.Контрагент В (&СписокКонтрагентов))
	|	И (&Менеджер = НЕОПРЕДЕЛЕНО
	|			ИЛИ ТаблицаЗаказов.ЗаказКлиента.Менеджер = &Менеджер)
	|	И (&Регион = НЕОПРЕДЕЛЕНО
	|			ИЛИ ТаблицаЗаказов.ЗаказКлиента.Подразделение = &Регион)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент,
	|	ТаблицаЗаказов.ЗаказКлиента.Дата,
	|	ЗаказКлиентаЭтапыГрафикаОплаты.НомерСтроки";
	Запрос.УстановитьПараметр("СписокКонтрагентов", ?(Объект.СписокКонтрагентов.Количество()>0,Объект.СписокКонтрагентов.Выгрузить(,"Значение"),Неопределено));
	Запрос.УстановитьПараметр("НетСписокКонтрагентов", ?(Объект.СписокКонтрагентов.Количество()>0,Ложь,Истина));
	Запрос.УстановитьПараметр("Менеджер",?(ЗначениеЗаполнено(Объект.Менеджер),Объект.Менеджер,Неопределено));
	Запрос.УстановитьПараметр("Регион",?(ЗначениеЗаполнено(Объект.Регион),Объект.Регион,Неопределено));
	Запрос.УстановитьПараметр("ДатаАнализа",?(ЗначениеЗаполнено(Объект.ДатаАнализа),Объект.ДатаАнализа,ТекущаяДата()));
	
	ТаблицаРезультат=Запрос.Выполнить().Выгрузить();
	ПоследнийДобавленныйСчет=Неопределено;
	НакопленнаяСуммаОплатПланируемая=0;
	Для каждого СтрокаТаблицаРезультат Из ТаблицаРезультат Цикл
		Если СтрокаТаблицаРезультат.Счет = ПоследнийДобавленныйСчет Тогда
			Продолжить;
		КонецЕсли; 
		НакопленнаяСуммаОплатПланируемая=НакопленнаяСуммаОплатПланируемая+СтрокаТаблицаРезультат.СуммаПлатежа;
		//Если (НакопленнаяСуммаОплатПланируемая>СтрокаТаблицаРезультат.СуммаОплат или СтрокаТаблицаРезультат.СуммаПлатежа=0) Тогда
			Если СтрокаТаблицаРезультат.КоличествоДнейПросрочки>=Объект.КоличествоДнейПросрочки Тогда
			НоваяСтрока=Объект.ТаблицаСчетов.Добавить();				
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицаРезультат);
			КонецЕсли; 
		    ПоследнийДобавленныйСчет=СтрокаТаблицаРезультат.счет;
			НакопленнаяСуммаОплатПланируемая=0;
		//КонецЕсли; 
	КонецЦикла;  
	Элементы.ТаблицаСчетов.Обновить();	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуСчетов(Команда)
	Если Не ЗначениеЗаполнено(Объект.ДатаАнализа) Тогда
		Объект.ДатаАнализа = ТекущаяДата();	
	КонецЕсли; 
	ЗаполнитьТаблицуСчетовНаСервере();
	Элементы.ТаблицаСчетов.Обновить();	
КонецПроцедуры

&НаСервере
Функция СоздатьПисьмоНаСервере(КонтрагентДляПисьма)
	КонтрагентЕмаил=УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(КонтрагентДляПисьма, Справочники.ВидыКонтактнойИнформации.EmailКонтрагента);
	
	Если не ЗначениеЗаполнено(КонтрагентЕмаил) Тогда
		КонтрагентЕмаил=УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(КонтрагентДляПисьма.Партнер, Справочники.ВидыКонтактнойИнформации.EmailПартнера);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(КонтрагентЕмаил) Тогда
		НовоеПисьмо=Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();
		НовоеПисьмо.Заполнить(КонтрагентДляПисьма);
		НовоеПисьмо.Дата=ТекущаяДата();
		НовоеПисьмо.УстановитьНовыйНомер();
		Если ЗначениеЗаполнено(Объект.ТемаПисьма) Тогда
			НовоеПисьмо.Тема=Объект.ТемаПисьма;
		Иначе	
			НовоеПисьмо.Тема="Информационное письмо";
		КонецЕсли; 
		
		Если не Объект.УчетнаяЗапись.Пустая() Тогда
			НовоеПисьмо.УчетнаяЗапись = Объект.УчетнаяЗапись;
		ИначеЕсли НовоеПисьмо.УчетнаяЗапись.Пустая() Тогда 	
			НовоеПисьмо.УчетнаяЗапись=УправлениеЭлектроннойПочтой.ПолучитьУчетнуюЗаписьДляОтправкиПоУмолчанию()
		КонецЕсли;
		Если НовоеПисьмо.УчетнаяЗапись.Пустая() Тогда
			НовоеПисьмо.УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
		КонецЕсли;
		Если ЗначениеЗаполнено(НовоеПисьмо.УчетнаяЗапись.ИмяПользователя) Тогда
			НовоеПисьмо.ОтправительПредставление=НовоеПисьмо.УчетнаяЗапись.ИмяПользователя + " <" + НовоеПисьмо.УчетнаяЗапись.АдресЭлектроннойПочты + ">";
		Иначе	
			НовоеПисьмо.ОтправительПредставление=НовоеПисьмо.УчетнаяЗапись.АдресЭлектроннойПочты;
		КонецЕсли; 
		
//Рарус Владимир Подрезов 24.05.2017
		НовоеПисьмо.СтатусПисьма	= Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик;
//Рарус Владимир Подрезов Конец

		НовыйПолучатель=НовоеПисьмо.ПолучателиПисьма.Добавить();
		НовыйПолучатель.Адрес=КонтрагентЕмаил;
		НовыйПолучатель.Контакт=КонтрагентДляПисьма.Партнер;
		НовыйПолучатель.Представление=КонтрагентДляПисьма.Наименование;
		НовоеПисьмо.СформироватьПредставленияКонтактов();
		
		НовоеПисьмо.ТипТекста=Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст;
		Если ЗначениеЗаполнено(Объект.ТекстПисьма) Тогда
			НовоеПисьмо.Текст=Объект.ТекстПисьма;
			НовоеПисьмо.Текст=СтрЗаменить(НовоеПисьмо.Текст,"<КонтрагентДляПисьмаНаименование>",КонтрагентДляПисьма.Наименование);
			НовоеПисьмо.Текст=СтрЗаменить(НовоеПисьмо.Текст,"<ДатаАнализа>",Формат(Объект.ДатаАнализа,"ДФ=dd.MM.yyyy"));
			НовоеПисьмо.Текст=СтрЗаменить(НовоеПисьмо.Текст,"<СрокВыполнения>",Формат(Объект.ДатаАнализа + 604800, "ДФ=dd.MM.yyyy"));
		Иначе	
			НовоеПисьмо.Текст="Руководителю / Финансовому директору "+КонтрагентДляПисьма.Наименование+"."+Символы.ПС;
			НовоеПисьмо.Текст=НовоеПисьмо.Текст+"Уважаемый Арендатор!"+Символы.ПС;
			НовоеПисьмо.Текст=НовоеПисьмо.Текст+"Напоминаем о необходимости оплатить счета за аренду строительного оборудования."+Символы.ПС;
			НовоеПисьмо.Текст=НовоеПисьмо.Текст+"Данные по неоплаченным счетам приведены во вложении по состоянию на "+Формат(Объект.ДатаАнализа,"ДФ=dd.MM.yyyy")+"."+Символы.ПС;
			НовоеПисьмо.Текст=НовоеПисьмо.Текст+"В случае невыполнения обязательств по оплате аренды и иных платежей (п. 3.2.2 Договора)  в срок до "+Формат(Объект.ДатаАнализа + 604800, "ДФ=dd.MM.yyyy")+" мы будем вынуждены воспользоваться правом приостановить работу оборудования, либо произвести возврат арендованного оборудования (п. 5.2. Договора)."+Символы.ПС;
			НовоеПисьмо.Текст=НовоеПисьмо.Текст+"Директор по развитию бизнеса Попель М.В.";
		КонецЕсли; 
		
		НовоеПисьмо.Записать(РежимЗаписиДокумента.Запись);
		
		Для каждого СтрокаТаблицы Из Объект.ТаблицаСчетов Цикл
			Если СтрокаТаблицы.Контрагент=КонтрагентДляПисьма Тогда
				Если ЗначениеЗаполнено(СтрокаТаблицы.Письмо) Тогда
					ПисьмоДляУдаления=СтрокаТаблицы.Письмо.ПолучитьОбъект();
					ПисьмоДляУдаления.ПометкаУдаления = Истина;
					Попытка
						ПисьмоДляУдаления.Записать(РежимЗаписиДокумента.Запись);
					Исключение
					
					КонецПопытки; 
				КонецЕсли; 
				СтрокаТаблицы.Письмо=НовоеПисьмо.Ссылка;
			КонецЕсли; 
		КонецЦикла;  	
		
		Возврат НовоеПисьмо.Ссылка.УникальныйИдентификатор();
		
	Иначе	
		Сообщить(КонтрагентДляПисьма.Наименование+" не имеет email!");
		Возврат "";
	КонецЕсли; 
КонецФункции

&НаКлиенте
Процедура СоздатьПисьма(Команда)
	МассивДляРаботы = ПолучитьМассивКлиентовДляРаботыСервер();	
	
	Для каждого КонтрагентДляПисьма Из МассивДляРаботы Цикл
		УИД_письма=СоздатьПисьмоНаСервере(КонтрагентДляПисьма);			
		
		Если Не ЗначениеЗаполнено(УИД_письма) Тогда
			Продолжить;
		КонецЕсли; 
		
		МассивПутейФайлов = ПолучитьМассивПутейФайловСервер(КонтрагентДляПисьма);
		
		Для каждого ПутьДоФайла Из МассивПутейФайлов Цикл
			Если не ЗначениеЗаполнено(ПутьДоФайла) Тогда
				Продолжить;
			КонецЕсли;
			ПроверкаФайла = Новый Файл(ПутьДоФайла);
		  	Если не ПроверкаФайла.Существует() Тогда
				Продолжить;	
			КонецЕсли; 
			Данные = Новый ДвоичныеДанные(ПутьДоФайла);
			АдресВоВременномХранилище=ПоместитьВоВременноеХранилище(Данные, "");
			Размер = Данные.Размер();
			ИмяФайлаВыделенное=Прав(ПутьДоФайла,СтрДлина(ПутьДоФайла)-СтрНайти(ПутьДоФайла,"\",НаправлениеПоиска.СКонца));
			
			ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилищаСервер(УИД_письма,АдресВоВременномХранилище, ИмяФайлаВыделенное, Размер); 	
		КонецЦикла;  
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилищаСервер(УИД_письма,АдресВоВременномХранилище, ИмяФайлаВыделенное, Размер)

	УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
		Документы.ЭлектронноеПисьмоИсходящее.ПолучитьСсылку(УИД_письма), АдресВоВременномХранилище, ИмяФайлаВыделенное, Размер);

КонецПроцедуры
 
&НаСервере                                   
Функция ПолучитьМассивПутейФайловСервер(КонтрагентДляПисьма)
	МассивПутейФайлов=Новый Массив;
	//Теперь вложения
	СтруктураОтбора=Новый Структура;
	СтруктураОтбора.Вставить("Контрагент",КонтрагентДляПисьма);
	ТаблицаДляСвертки=Объект.ТаблицаСчетов.Выгрузить(СтруктураОтбора,"Контрагент,ИмяФайла");
	ТаблицаДляСвертки.Свернуть("Контрагент,ИмяФайла");
	Для каждого СтрокаТаблицы Из ТаблицаДляСвертки Цикл
		МассивПутейФайлов.Добавить(СтрокаТаблицы.ИмяФайла);
	КонецЦикла;

	Возврат МассивПутейФайлов;	
КонецФункции
 

&НаСервере
Функция ПолучитьМассивКлиентовДляРаботыСервер()
	ТаблицаДляСвертки=Объект.ТаблицаСчетов.Выгрузить();
	ТаблицаДляСвертки.Свернуть("Контрагент");
	Возврат ТаблицаДляСвертки.ВыгрузитьКолонку("Контрагент");	
КонецФункции // ()

&НаСервере
Функция ПолучитьМакетНаСервере(ЭлементЗапроса=Неопределено)
	АктивнаяСтрока=ЭлементЗапроса;
	
	Если ЭлементЗапроса=Неопределено Тогда
		АктивнаяСтрока=Элементы.ТаблицаСчетов.ТекущаяСтрока;
		
	Иначе
		СтруктураОтбора=Новый Структура;
		Если Объект.Разбивать тогда	
			СтруктураОтбора.Вставить("Счет",ЭлементЗапроса);	
		Иначе	
			СтруктураОтбора.Вставить("Контрагент",ЭлементЗапроса);	
		КонецЕсли; 
		МассивСтрок=Объект.ТаблицаСчетов.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрок.Количество()>0 Тогда
			АктивнаяСтрока=МассивСтрок[0];	
		КонецЕсли; 
	КонецЕсли;
	
	Если АктивнаяСтрока<>Неопределено Тогда
		ЭтаОбработка=РеквизитФормыВЗначение("Объект");
		МакетПретензия=ЭтаОбработка.ПечатьМакет(АктивнаяСтрока, ВариантЗаполнения);
		Возврат МакетПретензия
	Иначе
		Возврат Новый ТабличныйДокумент;
	КонецЕсли; 
КонецФункции

&НаКлиенте
Процедура ПолучитьМакет(Команда)
	
//Рарус Владимир Подрезов 05.10.2017
	Если Элементы.ТаблицаСчетов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
//Рарус Владимир Подрезов КОнец
	
	ИндексСтроки	= Элементы.ТаблицаСчетов.ТекущиеДанные.НомерСтроки - 1;
	МакетПретензия	= ПолучитьМакетНаСервере(ИндексСтроки);
	МакетПретензия.Показать();
	
	КаталогНаДиске	= Новый Файл(Объект.КаталогВыгрузки);
  	Если Не КаталогНаДиске.Существует() Тогда
		Объект.КаталогВыгрузки	= КаталогВременныхФайлов();	
	КонецЕсли;	
	
	ИмяВременногоКаталога		= КаталогВременныхФайлов();
	ТекКаталогВыгрузкиКлиент	= ЗаписатьИмяФайлаНаСервере(ИндексСтроки,ИмяВременногоКаталога);
	Если Не ТекКаталогВыгрузкиКлиент = "" Тогда
		МакетПретензия.Записать(ТекКаталогВыгрузкиКлиент, ТипФайлаТабличногоДокумента.XLS97);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Функция ЗаписатьИмяФайлаНаСервере(ЭлементЗапроса=Неопределено,ИмяВременногоКаталога="")
	АктивнаяСтрока=ЭлементЗапроса;
	Если АктивнаяСтрока=Неопределено Тогда
		ИндексТекСтроки=Элементы.ТаблицаСчетов.ТекущаяСтрока;
		Если ИндексТекСтроки<>Неопределено Тогда
			АктивнаяСтрока=Объект.ТаблицаСчетов[ИндексТекСтроки];	
		КонецЕсли; 
	ИначеЕсли ТипЗнч(АктивнаяСтрока)=Тип("Число") Тогда
		АктивнаяСтрока=Объект.ТаблицаСчетов[АктивнаяСтрока];	
	Иначе
		СтруктураОтбора=Новый Структура;
		Если Объект.Разбивать тогда	
			СтруктураОтбора.Вставить("Счет",ЭлементЗапроса);	
		Иначе	
			СтруктураОтбора.Вставить("Контрагент",ЭлементЗапроса);	
		КонецЕсли; 
		МассивСтрок=Объект.ТаблицаСчетов.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрок.Количество()>0 Тогда
			АктивнаяСтрока=МассивСтрок[0];	
		КонецЕсли; 
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.КаталогВыгрузки) Тогда
		Если ИмяВременногоКаталога="" Тогда
			ИмяВременногоКаталога=КаталогВременныхФайлов();
		КонецЕсли; 	
		Объект.КаталогВыгрузки=ИмяВременногоКаталога;
	КонецЕсли; 	
	Если АктивнаяСтрока=Неопределено Тогда
		Возврат "";
	Иначе	
		//ТекКаталогВыгрузки=Объект.КаталогВыгрузки + "\" + СтрЗаменить(Объект.ТаблицаСчетов[ИндексТекСтроки].Контрагент.Наименование," ", "")
		//+?(Объект.Разбивать,"_"+Объект.ТаблицаСчетов[ИндексТекСтроки].Счет.Номер,"")+ ".xls";
		Если Объект.Разбивать Тогда
			ТекКаталогВыгрузки=Объект.КаталогВыгрузки + ?(Прав(Объект.КаталогВыгрузки,1)="\","","\")
			+ СтрЗаменить(ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(Строка(АктивнаяСтрока.Контрагент))," ", "")
			+"_"+АктивнаяСтрока.НомерСчета+ ".xls";
			АктивнаяСтрока.ИмяФайла=ТекКаталогВыгрузки;
		Иначе
			ТекКаталогВыгрузки=Объект.КаталогВыгрузки  + ?(Прав(Объект.КаталогВыгрузки,1)="\","","\")
			+ СтрЗаменить(ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(Строка(АктивнаяСтрока.Контрагент))," ", "")
			+ ".xls";
			Для каждого СтрокаТаблицы Из Объект.ТаблицаСчетов Цикл
				Если СтрокаТаблицы.Контрагент=АктивнаяСтрока.Контрагент Тогда
					СтрокаТаблицы.ИмяФайла=ТекКаталогВыгрузки;
				КонецЕсли; 
			КонецЦикла;  	
		КонецЕсли; 
		
		Возврат ТекКаталогВыгрузки;
	КонецЕсли; 
КонецФункции

&НаКлиенте
Процедура КаталогВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Если Диалог.Выбрать() Тогда      
		ДиалогПолноеИмяФайла=Диалог.Каталог;	
		ЗагрузитьКаталогВРеквизит(ДиалогПолноеИмяФайла);
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьКаталогВРеквизит(ДиалогПолноеИмяФайла)
	Объект.КаталогВыгрузки = ДиалогПолноеИмяФайла;
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаСчетовИмяФайлаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ПутьКФайлу=ПолучитьПутьКФайлуСтроки();
	Если ЗначениеЗаполнено(ПутьКФайлу) Тогда
		ЗапуститьПриложение(ПутьКФайлу);
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Функция ПолучитьПутьКФайлуСтроки()
	ИндексТекСтроки=Элементы.ТаблицаСчетов.ТекущаяСтрока;
	Если ИндексТекСтроки<>Неопределено Тогда
		Возврат Объект.ТаблицаСчетов[ИндексТекСтроки].ИмяФайла;
	Иначе
		ВозВрат "";
	КонецЕсли; 
КонецФункции

&НаСервере
Функция СформироватьПисьмаНаСервере()
	// Вставить содержимое обработчика.
КонецФункции

&НаКлиенте
Процедура СформироватьПисьма(Команда)
	СформироватьПисьмаНаСервере();
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивДляРаботыСервер()
	Если Объект.Разбивать Тогда
		Возврат Объект.ТаблицаСчетов.Выгрузить().ВыгрузитьКолонку("Счет");	
	Иначе	
		ТаблицаДляСвертки=Объект.ТаблицаСчетов.Выгрузить();
		ТаблицаДляСвертки.Свернуть("Контрагент");
		Возврат ТаблицаДляСвертки.ВыгрузитьКолонку("Контрагент");	
	КонецЕсли; 
КонецФункции // ()

&НаКлиенте
Процедура СформироватьПечФормы(Команда)
	МассивДляРаботы=ПолучитьМассивДляРаботыСервер();
	КаталогНаДиске = Новый Файл(Объект.КаталогВыгрузки);
  	Если не КаталогНаДиске.Существует() Тогда
		Объект.КаталогВыгрузки=КаталогВременныхФайлов();	
	КонецЕсли;	
	ИмяВременногоКаталога=КаталогВременныхФайлов();
	Для каждого ЭлементЗапроса Из МассивДляРаботы Цикл
		МакетПретензия=ПолучитьМакетНаСервере(ЭлементЗапроса);
	
		ТекКаталогВыгрузкиКлиент = ЗаписатьИмяФайлаНаСервере(ЭлементЗапроса,ИмяВременногоКаталога);
		Если не ТекКаталогВыгрузкиКлиент="" Тогда
			МакетПретензия.Записать(ТекКаталогВыгрузкиКлиент, ТипФайлаТабличногоДокумента.XLS97);
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Процедура ОтправитьПисьмаНаСервере()
	ТаблицаДляСвертки=Объект.ТаблицаСчетов.Выгрузить(,"Письмо");
	ТаблицаДляСвертки.Свернуть("Письмо");
	
	Для каждого СтрокаПисьма Из ТаблицаДляСвертки Цикл
		Если Не СтрокаПисьма.Письмо.Пустая() и СтрокаПисьма.Письмо.СтатусПисьма=Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик Тогда
			ПисьмоОбъект=СтрокаПисьма.Письмо.ПолучитьОбъект();
			ПисьмоОбъект.СтатусПисьма=Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее;
			//ПисьмоОбъект.ДатаКогдаОтправить=ТекущаяДата();
			ПисьмоОбъект.Записать();
			БылаОшибка=Ложь;
			Попытка
				ИдентификаторПисьма = Взаимодействия.ВыполнитьОтправкуПисьма(ПисьмоОбъект);
			Исключение
				Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				БылаОшибка=Истина;
			КонецПопытки;
			
			Если НЕ ПисьмоОбъект.УдалятьПослеОтправки Тогда
				
				ПисьмоОбъект.ИдентификаторСообщения = ИдентификаторПисьма;
				ПисьмоОбъект.СтатусПисьма    = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено;
				ПисьмоОбъект.ДатаОтправления = ТекущаяДатаСеанса();
				ПисьмоОбъект.Записать(РежимЗаписиДокумента.Запись);
				
				ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(
					ПисьмоОбъект.Ссылка, Взаимодействия.ОпределитьПапкуДляПисьма(ПисьмоОбъект.Ссылка));
				
			Иначе
				
				ПисьмоОбъект.Прочитать();
				ПисьмоОбъект.Удалить();
				
			КонецЕсли;
			
		КонецЕсли; 	
	КонецЦикла; 	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПисьма(Команда)
	ОтправитьПисьмаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЗаполнитьТекстПисьмаВариант1(Неопределено); 
КонецПроцедуры
 
&НаКлиенте
Процедура ЗаполнитьТекстПисьмаВариант1(Команда)
	
	ВариантЗаполнения = 1;
	
	Если Объект.ТемаПисьма="" Тогда
		Объект.ТемаПисьма="Информационное письмо";
	КонецЕсли; 
	
	Объект.ТекстПисьма="Руководителю / Финансовому директору "+"<КонтрагентДляПисьмаНаименование>"+"."+Символы.ПС;
	Объект.ТекстПисьма=Объект.ТекстПисьма+"Уважаемый Арендатор!"+Символы.ПС;
	Объект.ТекстПисьма=Объект.ТекстПисьма+"Напоминаем о необходимости оплатить счета за аренду строительного оборудования."+Символы.ПС;
	Объект.ТекстПисьма=Объект.ТекстПисьма+"Данные по неоплаченным счетам приведены во вложении по состоянию на <ДатаАнализа>."+Символы.ПС;
	Объект.ТекстПисьма=Объект.ТекстПисьма+"В случае невыполнения обязательств по оплате аренды и иных платежей (п. 3.2.2 Договора)  в срок до <СрокВыполнения> мы будем вынуждены воспользоваться правом приостановить работу оборудования, либо произвести возврат арендованного оборудования (п. 5.2. Договора)."+Символы.ПС;
	Объект.ТекстПисьма=Объект.ТекстПисьма+"Директор по развитию бизнеса Попель М.В.";
		
КонецПроцедуры
 
&НаКлиенте
Процедура ЗаполнитьТекстПисьмаВариант2(Команда)
	
	ВариантЗаполнения = 2;
	
	Если Объект.ТемаПисьма="" Тогда
		Объект.ТемаПисьма="Информационное письмо";
	КонецЕсли; 
	
	Объект.ТекстПисьма="Руководителю / Финансовому директору "+"<КонтрагентДляПисьмаНаименование>"+"."+Символы.ПС;
	Объект.ТекстПисьма=Объект.ТекстПисьма+"Уважаемый Арендатор!"+Символы.ПС;
	Объект.ТекстПисьма=Объект.ТекстПисьма+"Напоминаем о необходимости оплатить счета за аренду строительного оборудования."+Символы.ПС;
	Объект.ТекстПисьма=Объект.ТекстПисьма+"Данные по неоплаченным счетам приведены во вложении по состоянию на <ДатаАнализа>."+Символы.ПС;
	Объект.ТекстПисьма=Объект.ТекстПисьма+"В случае невыполнения обязательств по оплате аренды и иных платежей (п. 3.2.2 Договора)  в срок до <СрокВыполнения> мы будем вынуждены воспользоваться правом немедленного расторжения договора (возврата оборудования) /обратиться в Арбитражный суд с иском о невыполнении условий Договора (пункты 4.1, 9.3., 10.3 Договора)."+Символы.ПС;
	Объект.ТекстПисьма=Объект.ТекстПисьма+"Директор по развитию бизнеса Попель М.В.";
		
КонецПроцедуры
