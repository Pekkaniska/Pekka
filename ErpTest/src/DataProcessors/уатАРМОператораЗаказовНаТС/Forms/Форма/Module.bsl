
#Область ОписаниеПеременных

&НаКлиенте
Перем НужноЗакрытьФорму;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		АвтоТест = Истина;
	КонецЕсли;
	
	уатЗащищенныеФункцииСервер.уатОбработкаФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка,ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	ОбъектМетаданных = Метаданные.Документы.Найти("ЗаказПокупателя");
	Если ОбъектМетаданных = Неопределено 
	 ИЛИ ОбъектМетаданных.ОсновнаяФормаОбъекта = Неопределено 
	 ИЛИ ОбъектМетаданных.Реквизиты.Количество() < 5 Тогда
		мЕстьЗаказыПокупателей = Ложь;
	Иначе
		мЕстьЗаказыПокупателей = Истина;
	КонецЕсли;
	
	ОбъектМетаданных = Метаданные.Документы.Найти("РеализацияТоваровУслуг");
	Если ОбъектМетаданных = Неопределено 
	 ИЛИ ОбъектМетаданных.ОсновнаяФормаОбъекта = Неопределено 
	 ИЛИ ОбъектМетаданных.Реквизиты.Количество() < 5 Тогда
		мЕстьРеализацияТоваровУслуг = Ложь;
	Иначе
		мЕстьРеализацияТоваровУслуг = Истина;
	КонецЕсли;
	
	ТекПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ТекОрганизация = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекПользователь, "ОсновнаяОрганизация");
	
	уатОбщегоНазначенияСервер.НастроитьПолеДоговорКонтрагента(Элементы.ЗаказДоговор, "ТекОрганизация", "ЗаказКонтрагент", "СПокупателем");
	
	уатОбщегоНазначенияСервер.НастроитьПолеКонтактноеЛицо(Элементы.ЗаказКонтактноеЛицоГрузоотправителя);
	уатОбщегоНазначенияСервер.НастроитьПолеКонтактноеЛицо(Элементы.ЗаказКонтактноеЛицоГрузополучателя);
	уатОбщегоНазначенияСервер.НастроитьПолеКонтактноеЛицо(Элементы.ЗаказКонтактноеЛицоГрузополучателя);
	
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.ЗаказПодразделение, "ТекОрганизация");
	
	Элементы.ЗаказКонтрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	
	ИспользоватьУпаковки = ПолучитьФункциональнуюОпцию("уатИспользоватьУпаковкиНоменклатуры");
	Если НЕ ИспользоватьУпаковки Тогда
		Элементы.ЗаказТоварыЕдиницаИзмерения.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	уатЗащищенныеФункцииКлиент.уатОбработкаФормаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьДоступностьПолейНовогоЗаказа(Ложь);
		
	уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(СписокЗаказовНаТС.Отбор, "Организация", Неопределено,, Ложь);
	уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(СписокЗаказовНаТС.Отбор, "Контрагент", Неопределено,, Ложь);
	уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(СписокЗаказовНаТС.Отбор, "ДоговорКонтрагента", Неопределено,, Ложь);
	уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(СписокЗаказовНаТС.Отбор, "НомерПоУчетуЗаказчика", Неопределено, ВидСравненияКомпоновкиДанных.Содержит, Ложь);
	уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(СписокЗаказовНаТС.Отбор, "Ответственный", Неопределено,, Ложь);
	
	Если мЕстьЗаказыПокупателей ИЛИ мЕстьРеализацияТоваровУслуг тогда
		ОбновитьСписокЗаявок();
		АдресОтправленияСписокЗаявок = "";
	Иначе
		Элементы.СтраницаСписокЗаявок.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда 
		НужноЗакрытьФорму = Истина;
		Возврат;
		
	ИначеЕсли Не АвтоТест И НужноЗакрытьФорму <> Истина Тогда
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтаФорма, Параметры);
		ПоказатьВопрос(Оповещение,"АРМ Оператора заказов будет закрыт. Продолжить?", Режим, 0);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТекОрганизацияПриИзменении(Элемент)
	ПриИзмененииКонтрагентаИлиОрганизации();
КонецПроцедуры

&НаКлиенте
Процедура ЗаказКонтрагентПриИзменении(Элемент)
	ПриИзмененииКонтрагентаИлиОрганизации();
КонецПроцедуры

&НаКлиенте
Процедура ЗаказОтКонтрагентаПриИзменении(Элемент)
	ЗаказКонтрагент = Неопределено;
	Если ЗаказВнешнегоКонтрагента = 1 И ЗначениеЗаполнено(ЗаказДоговор) Тогда
		ЗаказДоговор = Неопределено;
	КонецЕсли;
	
	Элементы.ЗаказКонтрагент.Видимость = Не ЗаказВнешнегоКонтрагента;
	Элементы.ЗаказДоговор.Видимость = Не ЗаказВнешнегоКонтрагента;
	Элементы.ЗаказПодразделение.Видимость = ЗаказВнешнегоКонтрагента;
КонецПроцедуры

&НаКлиенте
Процедура ЗаказАдресОтправленияПриИзменении(Элемент)
	ЗаказАдресОтправленияСтрока = ЗаказАдресОтправления;
КонецПроцедуры

&НаКлиенте
Процедура ЗаказАдресОтправленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатОбщегоНазначенияКлиент.ПунктНачалоВыбора(Элемент, СтандартнаяОбработка, ЗаказАдресОтправления);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказАдресОтправленияОчистка(Элемент, СтандартнаяОбработка)
	ЗаказЛатОтправления = 0;
	ЗаказЛонОтправления = 0;
КонецПроцедуры

&НаКлиенте
Процедура ЗаказАдресОтправленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	мВремяС  = 0; 
	мВремяПо = 0; 
	мСтоянка = 0; 
	мЛат     = 0; 
	мЛон     = 0;	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") тогда
		мВыбЗнач = ВыбранноеЗначение;		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.уатПунктыНазначения") тогда 
		мВыбЗнач = ВыбранноеЗначение;
		мВремяС  = ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "ВремяДоступностиС");
		мВремяПо = ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "ВремяДоступностиПО");
		мЛат     = ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Лат");
		мЛон     = ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Лон");
		мСтоянка = ПолучитьВремяСтоянкиВПункте(ВыбранноеЗначение);
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СтрокаДереваЗначений") тогда
		мВыбЗнач = ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Значение");
		мВремяС  = ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "ВремяДоступностиС");
		мВремяПо = ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "ВремяДоступностиПО");
		мЛат 	 = ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Лат");
		мЛон 	 = ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Лон");
		мСтоянка = ПолучитьВремяСтоянкиВПункте(ВыбранноеЗначение);
	Иначе
		Возврат;
	КонецЕсли;
	ЗаказОтправлениеС            = мВремяС;
	ЗаказОтправлениеПо	         = ?(ЗначениеЗаполнено(мВремяПо), мВремяПо, '00010101235900');
	ЗаказСтоянкаПунктОтправления = мСтоянка;
	ЗаказЛатОтправления          = мЛат;
	ЗаказЛонОтправления          = мЛон;
	
	уатОбщегоНазначенияКлиент.ПунктОбработкаВыбора(ЗаказАдресОтправления, мВыбЗнач, СтандартнаяОбработка);
	ЗаказАдресОтправленияПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказАдресОтправленияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	СписокАдреса = ПодобратьАдреса(Текст);
	Если СписокАдреса.Количество() = 0 Тогда
	Иначе
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокАдреса;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаказАдресОтправленияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	СписокАдреса = ПодобратьАдреса(Текст);
	Если СписокАдреса.Количество() = 0 Тогда
		ЗаказАдресОтправления = Текст;
		ЗаказАдресОтправленияПриИзменении(Элемент);
	Иначе
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокАдреса;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаказАдресНазначенияПриИзменении(Элемент)
	ЗаказАдресНазначенияСтрока = ЗаказАдресНазначения;
КонецПроцедуры

&НаКлиенте
Процедура ЗаказАдресНазначенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатОбщегоНазначенияКлиент.ПунктНачалоВыбора(Элемент, СтандартнаяОбработка, ЗаказАдресНазначения);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказАдресНазначенияОчистка(Элемент, СтандартнаяОбработка)
	ЗаказЛатДоставки = 0;
	ЗаказЛонДоставки = 0;
КонецПроцедуры

&НаКлиенте
Процедура ЗаказАдресНазначенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	мВремяС  = 0;
	мВремяПо = 0;
	мСтоянка = 0;
	мЛат = 0;
	мЛон = 0;	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") тогда
		мВыбЗнач = ВыбранноеЗначение;		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.уатПунктыНазначения") тогда 
		мВыбЗнач = ВыбранноеЗначение;
		мВремяС  = ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "ВремяДоступностиС");
		мВремяПо = ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "ВремяДоступностиПО");
		мЛат     = ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Лат");
		мЛон     = ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Лон");
		мСтоянка = ПолучитьВремяСтоянкиВПункте(ВыбранноеЗначение);
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СтрокаДереваЗначений") тогда
		мВыбЗнач = ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Значение");
		мВремяС  = ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "ВремяДоступностиС");
		мВремяПо = ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "ВремяДоступностиПО");
		мЛат 	 = ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Лат");
		мЛон 	 = ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Лон");
		мСтоянка = ПолучитьВремяСтоянкиВПункте(ВыбранноеЗначение);
	Иначе
		Возврат;
	КонецЕсли;
	ЗаказДоставкаС	 		    = мВремяС;
	ЗаказДоставкаПо		   	    = ?(ЗначениеЗаполнено(мВремяПо), мВремяПо, '00010101235900');
	ЗаказСтоянкаПунктНазначения = мСтоянка;
	ЗаказЛатДоставки			= мЛат;
	ЗаказЛонДоставки 		    = мЛон;
	
	уатОбщегоНазначенияКлиент.ПунктОбработкаВыбора(ЗаказАдресНазначения, мВыбЗнач, СтандартнаяОбработка);
	ЗаказАдресНазначенияПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказАдресНазначенияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	СписокАдреса = ПодобратьАдреса(Текст);
	Если СписокАдреса.Количество() = 0 Тогда
	Иначе
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокАдреса;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаказАдресНазначенияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	СписокАдреса = ПодобратьАдреса(Текст);
	Если СписокАдреса.Количество() = 0 Тогда
		ЗаказАдресНазначения = Текст;
		ЗаказАдресНазначенияПриИзменении(Элемент);
	Иначе
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокАдреса;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаказГрузоотправительПриИзменении(Элемент)
	ГрузоотправительПриИзмененииСервер(ЗаказГрузоотправитель, ЗаказАдресОтправления, ЗаказКонтактноеЛицоГрузоотправителя);
	ЗаказАдресОтправленияПриИзменении(Элементы.ЗаказАдресОтправления);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказГрузополучательПриИзменении(Элемент)
	ГрузополучательПриИзмененииСервер(ЗаказГрузополучатель, ЗаказАдресНазначения, ЗаказКонтактноеЛицоГрузополучателя);
	ЗаказАдресНазначенияПриИзменении(Элементы.ЗаказАдресНазначения);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказСтоянкаПунктОтправленияПриИзменении(Элемент)
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ЗаказСтоянкаПунктОтправления);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказСтоянкаПунктНазначенияПриИзменении(Элемент)
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ЗаказСтоянкаПунктНазначения);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказТоварыПриИзменении(Элемент)
	Сч = 1;
	Для Каждого ТекСтрока Из ЗаказТовары Цикл
		ТекСтрока.НомерСтроки = Сч;
		Сч = Сч + 1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаказТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекДанные = Элементы.ЗаказТовары.ТекущиеДанные;
	
 	Если НоваяСтрока И НЕ Копирование Тогда
		ТекДанные.ЕдиницаИзмерения = ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка");
		ТекДанные.ПараметрВыработки = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.КоличествоЕздок");
		ТекДанные.КоличествоПараметрВыработки = 1;
		ТекДанные.КоличествоМест = 1;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТекДанные.НомерСтроки = ЗаказТовары.Количество();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаказТоварыНоменклатураПриИзменении(Элемент)
	ТекДанные = Элементы.ЗаказТовары.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.Номенклатура) тогда
		уатОбщегоНазначения.ЗаполнитьУпаковкуНоменклатурыПоУмолчанию(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения);
		ВесОбъем = уатОбщегоНазначения.ПолучитьВесОбъемНоменклатуры(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения);
		Если ВесОбъем.Вес <> 0 Тогда
			ТекДанные.ВесБрутто	= ВесОбъем.Вес * ТекДанные.Количество;
		КонецЕсли;
		Если ВесОбъем.Объем <> 0 Тогда
			ТекДанные.Объем = ВесОбъем.Объем * ТекДанные.Количество;
		КонецЕсли;
		Если ВесОбъем.КоличествоМест <> 0 Тогда
			ТекДанные.КоличествоМест = ВесОбъем.КоличествоМест * ТекДанные.Количество;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаказТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораГруза(Элемент, Элементы.ЗаказТовары.ТекущиеДанные.Номенклатура, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	ТекДанные = Элементы.ЗаказТовары.ТекущиеДанные;
	ВесОбъем = уатОбщегоНазначения.ПолучитьВесОбъемНоменклатуры(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения);
	Если ВесОбъем.Вес <> 0 Тогда
		ТекДанные.ВесБрутто	= ВесОбъем.Вес * ТекДанные.Количество;
	КонецЕсли;
	Если ВесОбъем.Объем <> 0 Тогда
		ТекДанные.Объем = ВесОбъем.Объем * ТекДанные.Количество;
	КонецЕсли;
	Если ВесОбъем.КоличествоМест <> 0 Тогда
		ТекДанные.КоличествоМест = ВесОбъем.КоличествоМест * ТекДанные.Количество;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаказТоварыКоличествоПриИзменении(Элемент)
	ТекДанные = Элементы.ЗаказТовары.ТекущиеДанные;
	ВесОбъем = уатОбщегоНазначения.ПолучитьВесОбъемНоменклатуры(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения);
	Если ВесОбъем.Вес <> 0 Тогда
		ТекДанные.ВесБрутто	= ВесОбъем.Вес * ТекДанные.Количество;
	КонецЕсли;
	Если ВесОбъем.Объем <> 0 Тогда
		ТекДанные.Объем = ВесОбъем.Объем * ТекДанные.Количество;
	КонецЕсли;
	Если ВесОбъем.КоличествоМест <> 0 Тогда
		ТекДанные.КоличествоМест = ВесОбъем.КоличествоМест * ТекДанные.Количество;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Заявка

&НаКлиенте
Процедура ЗаявкаАдресОтправленияПриИзменении(Элемент)
	ЗаявкаАдресОтправленияСтрока = ЗаявкаАдресОтправления;
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаАдресОтправленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатОбщегоНазначенияКлиент.ПунктНачалоВыбора(Элемент, СтандартнаяОбработка, ЗаявкаАдресОтправления);
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаАдресОтправленияОчистка(Элемент, СтандартнаяОбработка)
	Для Каждого ТекСтрока ИЗ Заявки Цикл
		ТекСтрока.ЛатОтправления = 0;
		ТекСтрока.ЛонОтправления = 0;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаАдресОтправленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	мВремяС  = 0; 
	мВремяПо = 0; 
	мСтоянка = 0; 
	мЛат     = 0; 
	мЛон     = 0;	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") тогда
		мВыбЗнач = ВыбранноеЗначение;		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.уатПунктыНазначения") тогда 
		мВыбЗнач = ВыбранноеЗначение;
		мВремяС  = ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "ВремяДоступностиС");
		мВремяПо = ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "ВремяДоступностиПО");
		мЛат     = ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Лат");
		мЛон     = ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Лон");
		мСтоянка = ПолучитьВремяСтоянкиВПункте(ВыбранноеЗначение);
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СтрокаДереваЗначений") тогда
		мВыбЗнач = ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Значение");
		мВремяС  = ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "ВремяДоступностиС");
		мВремяПо = ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "ВремяДоступностиПО");
		мЛат 	 = ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Лат");
		мЛон 	 = ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Лон");
		мСтоянка = ПолучитьВремяСтоянкиВПункте(ВыбранноеЗначение);
	Иначе
		Возврат;
	КонецЕсли;
	ЗаявкаВремяОтправленияС = мВремяС;
	ЗаявкаВремяОтправленияПо = ?(ЗначениеЗаполнено(мВремяПо), мВремяПо, '00010101235900');
	ЗаявкаСтоянка = мСтоянка;
	Для Каждого ТекСтрока ИЗ Заявки Цикл
		ТекСтрока.ЛатОтправления = мЛат;
		ТекСтрока.ЛонОтправления = мЛон;
	КонецЦикла;
	
	уатОбщегоНазначенияКлиент.ПунктОбработкаВыбора(ЗаявкаАдресОтправления, мВыбЗнач, СтандартнаяОбработка);
	ЗаявкаАдресОтправленияПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаАдресОтправленияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	СписокАдреса = ПодобратьАдреса(Текст);
	Если СписокАдреса.Количество() = 0 Тогда
	Иначе
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокАдреса;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаАдресОтправленияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	СписокАдреса = ПодобратьАдреса(Текст);
	Если СписокАдреса.Количество() = 0 Тогда
		ЗаявкаАдресОтправления = Текст;
		ЗаявкаАдресОтправленияПриИзменении(Элемент);
	Иначе
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокАдреса;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиАдресДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекСтрока = Элементы.Заявки.ТекущиеДанные;
	уатОбщегоНазначенияКлиент.ПунктНачалоВыбора(Элемент, СтандартнаяОбработка, ТекСтрока.АдресДоставки);
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиАдресДоставкиПриИзменении(Элемент)
	ТекСтрока = Элементы.заявки.ТекущиеДанные;
	ТекСтрока.АдресДоставкиСтрока = ТекСтрока.АдресДоставки;
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиАдресДоставкиОчистка(Элемент, СтандартнаяОбработка)
	ТекСтрока = Элементы.заявки.ТекущиеДанные;
	ТекСтрока.ЛатОтправления = 0;
	ТекСтрока.ЛонОтправления = 0;
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиАдресДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекСтрока = Элементы.Заявки.ТекущиеДанные;
	
	мВремяС  = 0; 
	мВремяПо = 0; 
	мСтоянка = 0; 
	мЛат     = 0; 
	мЛон     = 0;	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") тогда
		мВыбЗнач = ВыбранноеЗначение;		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.уатПунктыНазначения") тогда 
		мВыбЗнач = ВыбранноеЗначение;
		мВремяС  = ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "ВремяДоступностиС");
		мВремяПо = ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "ВремяДоступностиПО");
		мЛат     = ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Лат");
		мЛон     = ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Лон");
		мСтоянка = ПолучитьВремяСтоянкиВПункте(ВыбранноеЗначение);
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СтрокаДереваЗначений") тогда
		мВыбЗнач = ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Значение");
		мВремяС  = ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "ВремяДоступностиС");
		мВремяПо = ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "ВремяДоступностиПО");
		мЛат 	 = ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Лат");
		мЛон 	 = ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Лон");
		мСтоянка = ПолучитьВремяСтоянкиВПункте(ВыбранноеЗначение);
	Иначе
		Возврат;
	КонецЕсли;
	ТекСтрока.ВремяДоставкиС = мВремяС;
	ТекСтрока.ВремяДоставкиПо = ?(ЗначениеЗаполнено(мВремяПо), мВремяПо, '00010101235900');
	ТекСтрока.Стоянка = мСтоянка;
	ТекСтрока.ЛатОтправления = мЛат;
	ТекСтрока.ЛонОтправления = мЛон;
	
	уатОбщегоНазначенияКлиент.ПунктОбработкаВыбора(ТекСтрока.АдресДоставки, мВыбЗнач, СтандартнаяОбработка);
	ЗаявкиАдресДоставкиПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиАдресДоставкиАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	СписокАдреса = ПодобратьАдреса(Текст);
	Если СписокАдреса.Количество() = 0 Тогда
	Иначе
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокАдреса;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиАдресДоставкиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	СписокАдреса = ПодобратьАдреса(Текст);
	Если СписокАдреса.Количество() = 0 Тогда
		ТекСтрока = Элементы.заявки.ТекущиеДанные;
	
		ТекСтрока.АдресДоставки = Текст;
		ЗаявкиАдресДоставкиПриИзменении(Элемент);
	Иначе
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокАдреса;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработанныеЗаявкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекСтрока = Элементы.ОбработанныеЗаявки.ТекущиеДанные;
	Если Поле = Элементы.ОбработанныеЗаявкиДокументЗаявка Тогда
		ПоказатьЗначение(Неопределено, ТекСтрока.ДокументЗаявка);
	ИначеЕсли Поле = Элементы.ОбработанныеЗаявкиЗаказНаТС Тогда
		ПоказатьЗначение(Неопределено, ТекСтрока.ЗаказНаТС);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтклоненныеЗаявкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекСтрока = Элементы.ОтклоненныеЗаявки.ТекущиеДанные;
	Если Поле = Элементы.ОтклоненныеЗаявкиДокументЗаявка Тогда
		ПоказатьЗначение(Неопределено, ТекСтрока.ДокументЗаявка);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьЗаказ(Команда)
	Если ЗначениеЗаполнено(ЗаказКонтрагент) ИЛИ ЗначениеЗаполнено(ЗаказГрузоотправитель)
		ИЛИ ЗначениеЗаполнено(ЗаказГрузополучатель) ИЛИ ЗаказТовары.Количество() > 0 Тогда
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьЗаказЗавершение", ЭтотОбъект), "Введенные данные по заказу будут очищены! Продолжить?", РежимДиалогаВопрос.ОК,, КодВозвратаДиалога.ОК);
        Возврат;
	Иначе
		ОчиститьЗаказНаТС();
	КонецЕсли;
	
	СоздатьЗаказФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЗаказ(Команда)
	ЗаказСсылка = Неопределено;
	
	РеквизитыШапки = Новый Структура;
	РеквизитыШапки.Вставить("Организация", ТекОрганизация);
	РеквизитыШапки.Вставить("Ответственный", ТекПользователь);
	РеквизитыШапки.Вставить("Контрагент", ЗаказКонтрагент);
	РеквизитыШапки.Вставить("ДоговорКонтрагента", ЗаказДоговор);
	РеквизитыШапки.Вставить("НомерПоУчетуЗаказчика", ЗаказНомерПоУчетуЗаказчика);
	РеквизитыШапки.Вставить("ТребованиеКТС", ЗаказТребованиеКТС);
	РеквизитыШапки.Вставить("АдресОтправления", ЗаказАдресОтправления);
	РеквизитыШапки.Вставить("АдресНазначения", ЗаказАдресНазначения);
	РеквизитыШапки.Вставить("Грузоотправитель", ЗаказГрузоотправитель);
	РеквизитыШапки.Вставить("Грузополучатель", ЗаказГрузополучатель);
	РеквизитыШапки.Вставить("КонтактноеЛицоГрузоотправителя", ЗаказКонтактноеЛицоГрузоотправителя);
	РеквизитыШапки.Вставить("КонтактноеЛицоГрузополучателя", ЗаказКонтактноеЛицоГрузополучателя);
	РеквизитыШапки.Вставить("ОтправлениеС", ЗаказОтправлениеС);
	РеквизитыШапки.Вставить("ОтправлениеПо", ЗаказОтправлениеПо);
	РеквизитыШапки.Вставить("СтоянкаПунктОтправления", ЗаказСтоянкаПунктОтправления);
	РеквизитыШапки.Вставить("ДоставкаС", ЗаказДоставкаС);
	РеквизитыШапки.Вставить("ДоставкаПо", ЗаказДоставкаПо);
	РеквизитыШапки.Вставить("СтоянкаПунктНазначения", ЗаказСтоянкаПунктНазначения);
	
	мсвКолонкиТЧ = Новый Массив;
	мсвКолонкиТЧ.Добавить("НомерСтроки");
	мсвКолонкиТЧ.Добавить("Номенклатура");
	мсвКолонкиТЧ.Добавить("ЕдиницаИзмерения");
	мсвКолонкиТЧ.Добавить("Количество");
	мсвКолонкиТЧ.Добавить("ПараметрВыработки");
	мсвКолонкиТЧ.Добавить("КоличествоПараметрВыработки");
	мсвКолонкиТЧ.Добавить("ВесБрутто");
	мсвКолонкиТЧ.Добавить("Объем");
	мсвКолонкиТЧ.Добавить("Комментарий");
	ТЧзаказы = ПреобразоватьТЧвМассивСтрок(ЗаказТовары, мсвКолонкиТЧ);
	
	СоздатьЗаказСервер(РеквизитыШапки, ТЧзаказы, ЗаказСсылка);
	
	Если ЗначениеЗаполнено(ЗаказСсылка) Тогда
		Если ОткрыватьДокументыПриСоздании Тогда
			ПоказатьЗначение(Новый ОписаниеОповещения("ЗаписатьЗаказЗавершение", ЭтотОбъект), ЗаказСсылка);
            Возврат;
		КонецЕсли;
		
		ЗаписатьЗаказФрагмент();
 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗаказ(Команда)
	Если ЗначениеЗаполнено(ЗаказКонтрагент) ИЛИ ЗначениеЗаполнено(ЗаказГрузоотправитель)
		ИЛИ ЗначениеЗаполнено(ЗаказГрузополучатель) ИЛИ ЗаказТовары.Количество() > 0 Тогда
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьЗаказЗавершение", ЭтотОбъект), "Очистить данные о старом заказе",РежимДиалогаВопрос.ДаНет,0);
        Возврат;
	Иначе
		ОчиститьЗаказНаТС();
	КонецЕсли;
	
	ОчиститьЗаказФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьАдресОтправления(Команда)
	СтандартнаяОбработка_ = Ложь;
	уатОбщегоНазначенияКлиент.ПунктНачалоВыбора(Элементы.ЗаказАдресОтправления, СтандартнаяОбработка_, ЗаказАдресОтправления);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьАдресНазначения(Команда)
	СтандартнаяОбработка_ = Ложь;
	уатОбщегоНазначенияКлиент.ПунктНачалоВыбора(Элементы.ЗаказАдресНазначения, СтандартнаяОбработка_, ЗаказАдресНазначения);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзКИотправления(Команда)
	ОбъектКИ = ?(Не ЗначениеЗаполнено(ЗаказГрузоотправитель), ЗаказКонтрагент, ЗаказГрузоотправитель);
	ВыбратьАдресИзКонтактнойИнформации(Элементы.ЗаказАдресОтправления, ОбъектКИ, "ЗаказАдресОтправления");
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзКИназначения(Команда)
	ОбъектКИ = ?(НЕ ЗначениеЗаполнено(ЗаказГрузополучатель), ЗаказКонтрагент, ЗаказГрузополучатель);
	ВыбратьАдресИзКонтактнойИнформации(Элементы.ЗаказАдресНазначения, ОбъектКИ, "ЗаказАдресНазначения");
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаявки(Команда)
	СформироватьЗаказыНаТСПоЗаявкам();
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьЗаявки(Команда)
	мсвЗаявки = Новый Массив;
	Для Каждого ТекСтрока Из Заявки Цикл
		Если НЕ ТекСтрока.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		мсвЗаявки.Добавить(ТекСтрока.ДокументЗаявка);
	КонецЦикла;
	
	ОтклонитьЗаявкиСервер(мсвЗаявки);
	
	ОбновитьСписокЗаявок();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаявки(Команда)
	ОбновитьСписокЗаявок();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОтклонениеЗаявок(Команда)
	мсвОтклЗаявки = Новый Массив;
	Для Каждого ТекСтрока Из ОтклоненныеЗаявки Цикл
		Если НЕ ТекСтрока.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		мсвОтклЗаявки.Добавить(ТекСтрока.ДокументЗаявка);
	КонецЦикла;
		
	ОтменитьОтклонениеЗаявокСервер(мсвОтклЗаявки);
	
	ОбновитьСписокЗаявок();
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсеОтклоненныеЗаявки(Команда)
	Для Каждого ТекСтрока Из ОтклоненныеЗаявки Цикл
		ТекСтрока.Использование = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеОтклоненныеЗаявки(Команда)
	Для Каждого ТекСтрока Из ОтклоненныеЗаявки Цикл
		ТекСтрока.Использование = Ложь;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПреобразоватьТЧвМассивСтрок(ТЧ, мсвКолонкиТЧ)
	мсвРез = Новый Массив;
	
	Для Каждого ТекСтрока Из ТЧ Цикл
		СтруктураСтроки = Новый Структура;
		Для Каждого ТекКолонка Из мсвКолонкиТЧ Цикл
			СтруктураСтроки.Вставить(ТекКолонка, ТекСтрока[ТекКолонка]);
		КонецЦикла;
		
		мсвРез.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат мсвРез;
КонецФункции

&НаСервереБезКонтекста
Функция ПреобразоватьТаблицувМассивСтрок(тбл)
	мсвРез = Новый Массив;
	
	Для Каждого ТекСтрока Из тбл Цикл
		СтруктураСтроки = Новый Структура;
		Для Каждого ТекКолонка Из тбл.Колонки Цикл
			СтруктураСтроки.Вставить(ТекКолонка.Имя, ТекСтрока[ТекКолонка.Имя]);
		КонецЦикла;
		
		мсвРез.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат мсвРез;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка, ИмяРеквизита)
	Возврат уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Ссылка, ИмяРеквизита);
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьПолейНовогоЗаказа(ФлагДоступности) 
	Элементы.ГруппаЗаказВерхняя.Доступность = ФлагДоступности;
	Элементы.ГруппаЗаказШапка.Доступность = ФлагДоступности;
	Элементы.ГруппаЗаказТовары.Доступность = ФлагДоступности;
	
	ЗаказВнешнегоКонтрагента = 0;
	
	Элементы.СоздатьЗаказ.Доступность = НЕ ФлагДоступности;
	Элементы.ЗаписатьЗаказ.Доступность = ФлагДоступности;
	Элементы.ОчиститьЗаказ.Доступность = ФлагДоступности;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокАдресовКонтрагентаИзКИ(Контрагент)
	Рез = Новый СписокЗначений;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.Представление,
	|	КонтрагентыКонтактнаяИнформация.Вид
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Тип = &ТипКИ
	|	И КонтрагентыКонтактнаяИнформация.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Контрагент);
	Запрос.УстановитьПараметр("ТипКИ", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Рез.Добавить(Выборка.Представление, Выборка.Представление + " (" + Выборка.Вид + ")");
	КонецЦикла;
	
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура ВыбратьАдресИзКонтактнойИнформации(Элемент, ОбъектКИ, ИмяРеквизита)
	
	Если НЕ ЗначениеЗаполнено(ОбъектКИ) ИЛИ ТипЗнч(ОбъектКИ) <> Тип("СправочникСсылка.Контрагенты") тогда
		Возврат;
	КонецЕсли;
	
	СписокАдресовКИ = СписокАдресовКонтрагентаИзКИ(ОбъектКИ);
	ДопПараметры = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	ОписаниеОповещенияОВыбореАдресаИзКИ = Новый ОписаниеОповещения("ВыбратьАдресИзКонтактнойИнформацииПродолжение", ЭтотОбъект, ДопПараметры);
	СписокАдресовКИ.ПоказатьВыборЭлемента(ОписаниеОповещенияОВыбореАдресаИзКИ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьАдресИзКонтактнойИнформацииПродолжение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ДопПараметры = Неопределено И ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("ИмяРеквизита") Тогда 
		ЭтотОбъект[ДопПараметры.ИмяРеквизита+"Строка"] = Результат.Значение;
		ЭтотОбъект[ДопПараметры.ИмяРеквизита] = Результат.Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьЗаказСервер(РеквизитыШапки, ТЧзаказы, ЗаказСсылка)
	ДокОбъект = Документы.уатЗаказГрузоотправителя.СоздатьДокумент();
	
	//заполняем шапку документа
	уатОбщегоНазначенияСервер.ЗаполнитьШапкуДокумента(ДокОбъект,, Неопределено, Неопределено,,,, Неопределено);
	
	//заполняем реквизиты маршрутного листа в любом случае
	ДокОбъект.ВидОперации = Перечисления.уатВидыОперацийЗаказГрузоотправителя.МестнаяДоставка;
	ДокОбъект.Дата = ТекущаяДата();
	
	//заполняем реквизиты из шапки
	ЗаполнитьЗначенияСвойств(ДокОбъект, РеквизитыШапки);
	
	//Заполняем табличную часть
	Для каждого ТекНоменклатура ИЗ ТЧзаказы Цикл
		НовСтрока = ДокОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, ТекНоменклатура);
	КонецЦикла;
	
	Если НЕ ДокОбъект.ПроверитьЗаполнение() Тогда
		Сообщить("Не удалось записать документ " + ДокОбъект, СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ЗаказСсылка = ДокОбъект.Ссылка;
	Исключение
		Сообщить("Не удалось записать документ " + ДокОбъект, СтатусСообщения.Внимание);
		Возврат;
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаказыНаТСПоЗаявкам() 
	Если НЕ ЗначениеЗаполнено(ЗаявкаАдресОтправления) Тогда
		Сообщить("Перед формированием Заказов на ТС необходимо указать адрес пункта отправления", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;

	Для каждого ТекЗаявка ИЗ Заявки цикл
		Если НЕ ТекЗаявка.Использование Тогда  
			Продолжить;
		КонецЕсли;
		
		ЗаказСсылка = Неопределено;
		
		РеквизитыШапки = Новый Структура;
		РеквизитыШапки.Вставить("Организация", ТекЗаявка.Организация);
		РеквизитыШапки.Вставить("Контрагент", ПолучитьЗначениеРеквизита(ТекЗаявка.ДокументЗаявка, "Контрагент"));
		РеквизитыШапки.Вставить("ДоговорКонтрагента", ПолучитьЗначениеРеквизита(ТекЗаявка.ДокументЗаявка, "Договор"));
		РеквизитыШапки.Вставить("КонтактноеЛицоГрузоотправителя", ЗаявкаКонтактноеЛицоОтправителя);
		РеквизитыШапки.Вставить("НомерПоУчетуЗаказчика", ТекЗаявка.НомерПоУчетуЗаказчика);
		РеквизитыШапки.Вставить("ТребованиеКТС", ТекЗаявка.ТребованиеКТС);
		РеквизитыШапки.Вставить("АдресОтправления", ЗаявкаАдресОтправления);
		РеквизитыШапки.Вставить("ОтправлениеС", ЗаявкаВремяОтправленияС);
		РеквизитыШапки.Вставить("ОтправлениеПо", ЗаявкаВремяОтправленияПо);
		РеквизитыШапки.Вставить("СтоянкаПунктОтправления", ЗаявкаСтоянка);
		РеквизитыШапки.Вставить("АдресНазначения", ТекЗаявка.АдресДоставки);
		РеквизитыШапки.Вставить("ДоставкаС", ТекЗаявка.ВремяДоставкиС);
		РеквизитыШапки.Вставить("ДоставкаПо", ТекЗаявка.ВремяДоставкиПо);
		РеквизитыШапки.Вставить("ЛатОтправления", ЗаказЛатОтправления);
		РеквизитыШапки.Вставить("ЛонОтправления", ЗаказЛонОтправления);
		РеквизитыШапки.Вставить("ЛатДоставки", ЗаказЛатДоставки);
		РеквизитыШапки.Вставить("ЛонДоставки", ЗаказЛонДоставки);
		РеквизитыШапки.Вставить("СтоянкаПунктНазначения", ТекЗаявка.Стоянка);
		РеквизитыШапки.Вставить("Комментарий", ТекЗаявка.Комментарий);
		
		СоздатьЗаказТСПоЗаявкеСервер(РеквизитыШапки, ЗаказСсылка, ТекЗаявка.ДокументЗаявка);
		
		Если ОткрыватьЗаявкиПриСоздании тогда
			ПоказатьЗначение(Новый ОписаниеОповещения("СформироватьЗаказыНаТСПоЗаявкамЗавершение", ЭтотОбъект), ЗаказСсылка);
            Возврат;
		КонецЕсли;
	КонецЦикла;
	
	СформироватьЗаказыНаТСПоЗаявкамФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаказыНаТСПоЗаявкамЗавершение(ДополнительныеПараметры) Экспорт
    
    СформироватьЗаказыНаТСПоЗаявкамФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаказыНаТСПоЗаявкамФрагмент()
    
    ОбновитьСписокЗаявок();

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьЗаказТСПоЗаявкеСервер(РеквизитыШапки, ЗаказСсылка, ТекЗаявка)
	ДокОбъект = Документы.уатЗаказГрузоотправителя.СоздатьДокумент();
	
	//заполняем шапку документа
	уатОбщегоНазначенияСервер.ЗаполнитьШапкуДокумента(ДокОбъект,, Неопределено, Неопределено,,,, Неопределено);
	
	//заполняем реквизиты маршрутного листа в любом случае
	ДокОбъект.ВидОперации = Перечисления.уатВидыОперацийЗаказГрузоотправителя.МестнаяДоставка;
	ДокОбъект.Дата = ТекущаяДата();
	
	//заполняем реквизиты из шапки
	ЗаполнитьЗначенияСвойств(ДокОбъект, РеквизитыШапки);
	
	//Заполняем табличную часть
	Для каждого ТекНоменклатура ИЗ ТекЗаявка.Товары цикл
		НовСтрока = ДокОбъект.Товары.Добавить();
		НовСТрока.Номенклатура					= ТекНоменклатура.Номенклатура;
		НовСТрока.ЕдиницаИзмерения				= ТекНоменклатура.Упаковка;
		НовСтрока.Количество					= ТекНоменклатура.Количество;
	КонецЦикла;
		
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ЗаказСсылка = ДокОбъект.Ссылка;
	Исключение
		Сообщить("Не удалось записать документ " + ДокОбъект, СтатусСообщения.Внимание);
		Возврат;
	КонецПопытки;
	
	//и сразу же пишем в РС заявки
	НовЗапись = РегистрыСведений.уатРегистрацияОснованийДляЗаказовНаТС.СоздатьМенеджерЗаписи();
	НовЗапись.Период	= ТекущаяДата();
	НовЗапись.Документ	= ТекЗаявка;
	НовЗапись.Статус	= Перечисления.уатСтатусыЗаявокЗаказГрузоотправителя.СформированЗаказНаТС;
	НовЗапись.ЗаказГрузоотправителя = ЗаказСсылка;
	Попытка
		НовЗапись.Записать();
	Исключение
		Сообщить("Не удалось зарегистрировать заказ на ТС на основании заявки " + ТекЗаявка.ДокументЗаявка, СтатусСообщения.Внимание);
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокЗаявок()
	ОбновитьСписокНеобработанныхЗаявок();
	ОбновитьСписокОтклоненныхЗаявок();
	ОбновитьСписокОбработанныхЗаявок();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокНеобработанныхЗаявок()
	Если НЕ мЕстьЗаказыПокупателей И НЕ мЕстьРеализацияТоваровУслуг тогда
		Возврат;
	КонецЕсли;
	
	Заявки.Очистить();
	
	мсвЗаявки = ПолучитьТблНеобработанныхЗаявокСервер();
	
	Для Каждого ТекСтрока Из мсвЗаявки Цикл
		НовЗаявка = Заявки.Добавить();
		НовЗаявка.ДокументЗаявка = ТекСтрока.Документ;
		НовЗаявка.Контрагент = ТекСтрока.ДокументКонтрагент;
		НовЗаявка.Организация = ТекСтрока.ДокументОрганизация;
		НовЗаявка.ДатаВыполнения = ТекСтрока.ДокументДата;
		НовЗаявка.АдресДоставки = ?(ТекСтрока.АдресДоставки = "", ТекСтрока.ДокументАдресДоставки, ТекСтрока.АдресДоставки);
		НовЗаявка.ВремяДоставкиС = ТекСтрока.ВремяДоступностиС;
		НовЗаявка.ВремяДоставкиПО = ?(ЗначениеЗаполнено(ТекСтрока.ВремяДоступностиПо), ТекСтрока.ВремяДоступностиПо, '00010101235900');
		НовЗаявка.Стоянка = ТекСтрока.Стоянка;
		НовЗаявка.Комментарий = ТекСтрока.ДокументКомментарий;
	КонецЦикла;
конецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТблНеобработанныхЗаявокСервер()
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатРегистрацияОснованийДляЗаказовНаТССрезПоследних.Документ,
	|	уатРегистрацияОснованийДляЗаказовНаТССрезПоследних.Документ.Контрагент КАК ДокументКонтрагент,
	|	уатРегистрацияОснованийДляЗаказовНаТССрезПоследних.Документ.Организация КАК ДокументОрганизация,
	|	уатРегистрацияОснованийДляЗаказовНаТССрезПоследних.Документ.Дата КАК ДокументДата,
	|	уатРегистрацияОснованийДляЗаказовНаТССрезПоследних.Документ.АдресДоставки КАК ДокументАдресДоставки,
	|	уатРегистрацияОснованийДляЗаказовНаТССрезПоследних.Документ.Комментарий КАК ДокументКомментарий,
	|	уатРегистрацияОснованийДляЗаказовНаТССрезПоследних.Статус,
	|	"""" КАК АдресДоставки,
	|	0 КАК ВремяДоступностиС,
	|	0 КАК ВремяДоступностиПо,
	|	0 КАК Стоянка
	|ИЗ
	|	РегистрСведений.уатРегистрацияОснованийДляЗаказовНаТС.СрезПоследних КАК уатРегистрацияОснованийДляЗаказовНаТССрезПоследних
	|ГДЕ
	|	уатРегистрацияОснованийДляЗаказовНаТССрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.уатСтатусыЗаявокЗаказГрузоотправителя.Открыта)
	|	И (НЕ уатРегистрацияОснованийДляЗаказовНаТССрезПоследних.Документ.ПометкаУдаления)");
	
	мсвСтрок = ПреобразоватьТаблицувМассивСтрок(Запрос.Выполнить().Выгрузить());
	Возврат мсвСтрок;
КонецФункции

&НаКлиенте
Процедура ОбновитьСписокОтклоненныхЗаявок()
	Если НЕ мЕстьЗаказыПокупателей И НЕ мЕстьРеализацияТоваровУслуг тогда
		Возврат;
	КонецЕсли;
	
	ОтклоненныеЗаявки.Очистить();
	
	мсвЗаявки = ПолучитьТблОтлоненныхЗаявокСервер();
	
	Для Каждого ТекСтрока Из мсвЗаявки Цикл
		НовСтрока = ОтклоненныеЗаявки.Добавить();
		НовСтрока.ДокументЗаявка = ТекСтрока.Документ;
		НовСтрока.Дата 	   		 = ТекСтрока.Период;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТблОтлоненныхЗаявокСервер()
	Запрос = Новый Запрос( 
	"ВЫБРАТЬ
	|	уатРегистрацияОснованийДляЗаказовНаТССрезПоследних.Документ,
	|	уатРегистрацияОснованийДляЗаказовНаТССрезПоследних.Период
	|ИЗ
	|	РегистрСведений.уатРегистрацияОснованийДляЗаказовНаТС.СрезПоследних КАК уатРегистрацияОснованийДляЗаказовНаТССрезПоследних
	|ГДЕ
	|	уатРегистрацияОснованийДляЗаказовНаТССрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.уатСтатусыЗаявокЗаказГрузоотправителя.Отклонена)
	|	И (НЕ уатРегистрацияОснованийДляЗаказовНаТССрезПоследних.Документ.ПометкаУдаления)");
	
	мсвСтрок = ПреобразоватьТаблицувМассивСтрок(Запрос.Выполнить().Выгрузить());
	Возврат мсвСтрок;
КонецФункции

&НаКлиенте
Процедура ОбновитьСписокОбработанныхЗаявок()
	Если НЕ мЕстьЗаказыПокупателей И НЕ  мЕстьРеализацияТоваровУслуг тогда
		Возврат;
	КонецЕсли;	
	
	ОбработанныеЗаявки.Очистить();
	
	мсвЗаявки = ПолучитьТблОбработанныхЗаявокСервер();
	
	Для Каждого ТекСтрока Из мсвЗаявки Цикл
		НовСтрока = ОбработанныеЗаявки.Добавить();
		НовСтрока.ДокументЗаявка = ТекСтрока.Документ;
		НовСтрока.ЗаказНаТС		 = ТекСтрока.ЗаказГрузоотправителя;
		НовСтрока.Дата 	   		 = ТекСтрока.Период;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТблОбработанныхЗаявокСервер()
	Запрос = Новый Запрос( 
	"ВЫБРАТЬ
	|	уатРегистрацияОснованийДляЗаказовНаТССрезПоследних.Документ,
	|	уатРегистрацияОснованийДляЗаказовНаТССрезПоследних.Период,
	|	уатРегистрацияОснованийДляЗаказовНаТССрезПоследних.ЗаказГрузоотправителя
	|ИЗ
	|	РегистрСведений.уатРегистрацияОснованийДляЗаказовНаТС.СрезПоследних КАК уатРегистрацияОснованийДляЗаказовНаТССрезПоследних
	|ГДЕ
	|	уатРегистрацияОснованийДляЗаказовНаТССрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.уатСтатусыЗаявокЗаказГрузоотправителя.СформированЗаказНаТС)
	|	И (НЕ уатРегистрацияОснованийДляЗаказовНаТССрезПоследних.Документ.ПометкаУдаления)");
	
	мсвСтрок = ПреобразоватьТаблицувМассивСтрок(Запрос.Выполнить().Выгрузить());
	Возврат мсвСтрок;
КонецФункции

&НаСервереБезКонтекста
Процедура ОтклонитьЗаявкиСервер(мсвЗаявки)
	Если мсвЗаявки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.уатРегистрацияОснованийДляЗаказовНаТС.СоздатьНаборЗаписей();
	
	Для каждого ТекЗаявка ИЗ мсвЗаявки цикл
		НовЗапись = НаборЗаписей.Добавить();
		НовЗапись.Документ = ТекЗаявка;
		НовЗапись.Статус   = Перечисления.уатСтатусыЗаявокЗаказГрузоотправителя.Отклонена;
		НовЗапись.Период   = ТекущаяДата();
	КонецЦикла;
	
	НаборЗаписей.Записать(Ложь);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтменитьОтклонениеЗаявокСервер(мсвОтклЗаявки)
	Если мсвОтклЗаявки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.уатРегистрацияОснованийДляЗаказовНаТС.СоздатьНаборЗаписей();
	
	Для каждого ТекЗаявка ИЗ мсвОтклЗаявки цикл
		НовЗапись = НаборЗаписей.Добавить();
		НовЗапись.Документ 	= ТекЗаявка;
		НовЗапись.Статус	= Перечисления.уатСтатусыЗаявокЗаказГрузоотправителя.Открыта;
		НовЗапись.Период	= ТекущаяДата();
	конецЦикла;
	
	НаборЗаписей.Записать(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКонтрагентаИлиОрганизации()
	
	ДанныеОбменаССервером = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, Дата", ТекОрганизация, ЗаказКонтрагент, ЗаказДоговор, ЗаказОтправлениеС);
	
	// Получим данные с сервера
	ДанныеОбменаССервером.ДоговорКонтрагента = ЗаказДоговор;
	ЗначенияДляЗаполнения = ИзменениеКонтрагентаСервер(ДанныеОбменаССервером);
	ЗаказДоговор = ЗначенияДляЗаполнения.ДоговорКонтрагента;
			
КонецПроцедуры // ПриИзмененииКонтрагентаИлиОрганизации()

&НаСервереБезКонтекста
Функция ИзменениеКонтрагентаСервер(ДанныеДляЗаполнения)
	СтруктураПараметровДляПолученияДоговора =
		уатЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПродажи();
	
	ЗначенияДляЗаполнения = уатОбщегоНазначенияСервер.ПриИзмененииЗначенияКонтрагента(ДанныеДляЗаполнения,
							СтруктураПараметровДляПолученияДоговора);
	Возврат ЗначенияДляЗаполнения;
КонецФункции

&НаСервереБезКонтекста
Функция ПодобратьАдреса(Знач Текст)
	Рез = Новый СписокЗначений;
	
	Если НЕ ЗначениеЗаполнено(Текст) Тогда
		Возврат Рез;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
	|	уатПунктыНазначения.Ссылка
	|ИЗ
	|	Справочник.уатПунктыНазначения КАК уатПунктыНазначения
	|ГДЕ
	|	(НЕ уатПунктыНазначения.ПометкаУдаления)
	|	И уатПунктыНазначения.Наименование ПОДОБНО &парамТекст");
	
	// заменим спецсимволы
	Текст = СтрЗаменить(Текст, "~", "~~");
	Текст = СтрЗаменить(Текст, "%", "~%");
	Текст = СтрЗаменить(Текст, "_", "~_");
	Текст = СтрЗаменить(Текст, "[", "~[");
	Текст = СтрЗаменить(Текст, "-", "~-");
	Текст = сокрЛП(Текст)+"%";

	Запрос.УстановитьПараметр("парамТекст", Текст);
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		Рез.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура СоздатьЗаказЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.ОК тогда
        ОчиститьЗаказНаТС();
    Иначе
        Возврат;
    КонецЕсли;
    
    СоздатьЗаказФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаказФрагмент()
    
    ТекущийЭлемент = Элементы.ЗаказКонтрагент;
    
    УстановитьДоступностьПолейНовогоЗаказа(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЗаказЗавершение(ДополнительныеПараметры) Экспорт
    
    ЗаписатьЗаказФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЗаказФрагмент()
    
    ОчиститьЗаказНаТС();
    УстановитьДоступностьПолейНовогоЗаказа(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗаказЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Да тогда
        ОчиститьЗаказНаТС();
    Иначе
        Возврат;
    КОнецЕсли;
    
    ОчиститьЗаказФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗаказФрагмент()
    
    УстановитьДоступностьПолейНовогоЗаказа(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗаказНаТС()
	
	ЗаказОтправлениеС  = ТекущаяДата();
	ЗаказОтправлениеПо = ЗаказОтправлениеС;
	ЗаказДоставкаС     = ЗаказОтправлениеС;
	ЗаказДоставкаПо    = ЗаказОтправлениеС;
	
	ЗаказВнешнегоКонтрагента = 0;
	ЗаказОтКонтрагентаПриИзменении(Неопределено);
	ЗаказКонтрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	ЗаказДоговор = Неопределено;
	ЗаказНомерПоУчетуЗаказчика = Неопределено;
	ЗаказТребованиеКТС = Неопределено;
	ЗаказГрузоотправитель = Неопределено;
	ЗаказГрузополучатель = Неопределено;
	ЗаказАдресОтправления = "";
	ЗаказАдресОтправленияСтрока = "";
	ЗаказАдресНазначения = "";
	ЗаказАдресНазначенияСтрока = "";
	ЗаказКонтактноеЛицоГрузоотправителя = "";
	ЗаказКонтактноеЛицоГрузополучателя  = "";
	ЗаказОтправлениеС = Неопределено;
	ЗаказОтправлениеПо = Неопределено;
	ЗаказСтоянкаПунктОтправления = Неопределено;
	ЗаказДоставкаС = Неопределено;
	ЗаказДоставкаПо = Неопределено;
	ЗаказСтоянкаПунктНазначения = Неопределено;
	
	ЗаказТовары.Очистить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ГрузоотправительПриИзмененииСервер(ЗаказГрузоотправитель, ЗаказАдресОтправления, ЗаказКонтактноеЛицоГрузоотправителя)
	Если ЗначениеЗаполнено(ЗаказГрузоотправитель) Тогда
		АдресОтправления = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ЗаказГрузоотправитель,
							Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, '39991231');
		Если НЕ ЗначениеЗаполнено(АдресОтправления) Тогда
			АдресОтправления = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ЗаказГрузоотправитель,
								Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, '39991231');
		КонецЕсли;
		Если ЗначениеЗаполнено(АдресОтправления) Тогда
			ЗаказАдресОтправления = АдресОтправления;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ГрузополучательПриИзмененииСервер(ЗаказГрузополучатель, ЗаказАдресНазначения, ЗаказКонтактноеЛицоГрузополучателя)
	Если ЗначениеЗаполнено(ЗаказГрузополучатель) Тогда 
		АдресНазначения = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ЗаказГрузополучатель,
							Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, '39991231');
		Если НЕ ЗначениеЗаполнено(АдресНазначения) Тогда
			АдресНазначения = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ЗаказГрузополучатель,
								Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, '39991231');
		КонецЕсли;
		Если ЗначениеЗаполнено(АдресНазначения) Тогда 
			ЗаказАдресНазначения = АдресНазначения;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		НужноЗакрытьФорму = Неопределено;
	Иначе
		НужноЗакрытьФорму = Истина;
		Закрыть();
    КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВремяСтоянкиВПункте(ПунктНазначения)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ПунктНазначения", ПунктНазначения);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатТипыПунктов.Стоянка КАК Стоянка
	|ИЗ
	|	Справочник.уатПунктыНазначения КАК уатПунктыНазначения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатТипыПунктов КАК уатТипыПунктов
	|		ПО уатПунктыНазначения.ТипПункта = уатТипыПунктов.Ссылка
	|			И (уатПунктыНазначения.Ссылка = &ПунктНазначения)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Стоянка;
	Иначе 
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьВремяСтоянкиВПункте()

#КонецОбласти
