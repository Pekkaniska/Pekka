
#Область ПеременныеМодуля

&НаКлиенте
Перем мМассивТочекВыбора;          // Точки выбора при подборе маршрута
&НаКлиенте
Перем мСчетчикДокументСформирован; // Счетчик срабатывания процедуры "ПолеHTMLДокументСформирован"
&НаКлиенте
Перем мТекстОтложеннойКоманды;     // Текст кода, который выполняется
&НаКлиенте
Перем мПредыдущийРежим;            // Режим работы диалога, сохранение промежуточных значений

&НаСервере
Перем мВыборкаСтатусыОбъектов;
&НаСервере
Перем мСоответствиеПолейДатчиковСтатусы;
	
#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Сохранение настроек пользователя
//
&НаСервере
Процедура СохранитьНастройкуПользователя(Раздел, Настройка, ЗначениеНастройки)

	ХранилищеОбщихНастроек.Сохранить(Раздел, Настройка, ЗначениеНастройки);		

КонецПроцедуры

// Заполнение дерева объектов
//
&НаСервере
Процедура ЗаполнитьДеревоОбъектовМониторинга()
	
	ДеревоОбъектов = РеквизитФормыВЗначение("ДеревоОбъектовМониторинга");
		
	// Сохраним состояние пометок
	КопияДерева = ДеревоОбъектов.Скопировать();	
	
	Запрос = Новый Запрос;
	
	// Учет статусов объектов
	СтрокаСоединенияЗапроса = "";
	СтрокаВыборкаЗапроса    = "";
	
	Если мСоответствиеПолейДатчиковСтатусы = Неопределено Тогда
		ИнициализироватьУсловноеОформление();	
	
	КонецЕсли;
	
	Для каждого ЭлементСоответствия Из мСоответствиеПолейДатчиковСтатусы Цикл
		ТекИмяКолонки = ЭлементСоответствия.Значение;
		
		СтрокаВыборкаЗапроса = СтрокаВыборкаЗапроса + "
			|	ЕСТЬNULL(ItobТерминалыДатчики"+ТекИмяКолонки+".Датчик.Код,0) КАК КодДатчикаНазначение"+ТекИмяКолонки+",";
		
		СтрокаСоединенияЗапроса = СтрокаСоединенияЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ItobТерминалы.Датчики КАК ItobТерминалыДатчики"+ТекИмяКолонки+"
			|ПО (ItobАктуальностьДанныхТерминалов.Терминал = ItobТерминалыДатчики"+ТекИмяКолонки+".Ссылка)
			|	И (ItobТерминалыДатчики"+ТекИмяКолонки+".Назначение = &Назначение"+ТекИмяКолонки+")";
					
		Запрос.УстановитьПараметр("Назначение"+ТекИмяКолонки, ЭлементСоответствия.Ключ);
	
	КонецЦикла;
					
	ПараметрыСдвигаВремени = ItobОперативныйМониторинг.ПолучитьПараметрыСдвигаВремени();
	
	Запрос.УстановитьПараметр("СдвигВремени", ПараметрыСдвигаВремени.СдвигВремени);
	Запрос.УстановитьПараметр("ВариантПереводаНаЛетнееВремя", ПараметрыСдвигаВремени.ВариантПереводаВремени);
	Запрос.УстановитьПараметр("СдвигЛетнееВремя", ПараметрыСдвигаВремени.СдвигЛетнееВремя);	
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ПериодUTC0", ТекущаяУниверсальнаяДата());	
	Запрос.УстановитьПараметр("МинимальнаяСкоростьДвижения", Константы.ItobМинимальнаяСкоростьДвижения.Получить());
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВЫБОР
	               |		КОГДА ItobПривязкиТерминаловСрезПоследних.Объект ССЫЛКА Справочник.ItobВодители
	               |			ТОГДА &ЛитералВодители
	               |		ИНАЧЕ &ЛитералТранспортныеСредства
	               |	КОНЕЦ КАК ВидОбъекта,
	               |	ItobПривязкиТерминаловСрезПоследних.Объект КАК Объект,
				   |	ПРЕДСТАВЛЕНИЕ(ItobПривязкиТерминаловСрезПоследних.Объект) КАК ОбъектПредставление,
	               |	1 КАК Картинка,
				   |	ЛОЖЬ КАК ЭтоГруппа,
	               |	0 КАК Пометка,
	               |	ВЫБОР
	               |		КОГДА ItobАктуальностьДанныхТерминалов.ДатаВремя ЕСТЬ NULL 
	               |			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	               |		ИНАЧЕ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ItobАктуальностьДанныхТерминалов.ДатаВремя, СЕКУНДА, &СдвигВремени), СЕКУНДА, ВЫБОР
	               |					КОГДА &ВариантПереводаНаЛетнееВремя = ЗНАЧЕНИЕ(Перечисление.ItobВариантыПереводаВремени.Европейский)
	               |						ТОГДА ВЫБОР
	               |								КОГДА ItobАктуальностьДанныхТерминалов.ДатаВремя МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ItobАктуальностьДанныхТерминалов.ДатаВремя, ГОД), МЕСЯЦ, 3), НЕДЕЛЯ), НЕДЕЛЯ, -1), ДЕНЬ), ЧАС, 2) И ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ItobАктуальностьДанныхТерминалов.ДатаВремя, ГОД), МЕСЯЦ, 10), НЕДЕЛЯ), НЕДЕЛЯ, -1), ДЕНЬ), ЧАС, 2)
	               |									ТОГДА &СдвигЛетнееВремя
	               |								ИНАЧЕ 0
	               |							КОНЕЦ
	               |					КОГДА &ВариантПереводаНаЛетнееВремя = ЗНАЧЕНИЕ(Перечисление.ItobВариантыПереводаВремени.Американский)
	               |						ТОГДА ВЫБОР
	               |								КОГДА ItobАктуальностьДанныхТерминалов.ДатаВремя МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ItobАктуальностьДанныхТерминалов.ДатаВремя, ГОД), МЕСЯЦ, 2), НЕДЕЛЯ), НЕДЕЛЯ, 1), ДЕНЬ), ЧАС, 2) И ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ItobАктуальностьДанныхТерминалов.ДатаВремя, ГОД), МЕСЯЦ, 10), НЕДЕЛЯ), НЕДЕЛЯ, 0), ДЕНЬ), ЧАС, 2)
	               |									ТОГДА &СдвигЛетнееВремя
	               |								ИНАЧЕ 0
	               |							КОНЕЦ
	               |					ИНАЧЕ 0
	               |				КОНЕЦ)
	               |	КОНЕЦ КАК АктуальностьДанных,
	               |	ItobПривязкиТерминаловСрезПоследних.Терминал,
				   |	ItobПривязкиТерминаловСрезПоследних.Терминал.Код КАК КодТерминала,
	               |	ЕСТЬNULL(ItobАктуальностьДанныхТерминалов.Широта, 0) КАК Широта,
	               |	ЕСТЬNULL(ItobАктуальностьДанныхТерминалов.Долгота, 0) КАК Долгота,
	               |	ЕСТЬNULL(ItobАктуальностьДанныхТерминалов.Скорость, 0) КАК Скорость,
	               |	ЕСТЬNULL(ItobАктуальностьДанныхТерминалов.Направление, 0) КАК Направление,
				   |	ВЫБОР КОГДА ЕСТЬNULL(ItobАктуальностьДанныхТерминалов.Скорость, 0) >= &МинимальнаяСкоростьДвижения
				   |		ТОГДА ЗНАЧЕНИЕ(Перечисление.ItobСостоянияТерминалов.Движение) 
			       |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ItobСостоянияТерминалов.Стоянка) 
				   |	КОНЕЦ КАК Состояние,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ItobАктуальностьДанныхТерминалов.Скорость, 0) >= &МинимальнаяСкоростьДвижения
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ОбъектВДвижении,
				   |	РАЗНОСТЬДАТ(ItobАктуальностьДанныхТерминалов.ДатаВремя,&ПериодUTC0,МИНУТА) КАК ОтсутствуютДанныеМинуты,
				   |	РАЗНОСТЬДАТ(ItobАктуальностьДанныхТерминалов.ДатаВремя,&ПериодUTC0,ЧАС) КАК ОтсутствуютДанныеЧасы,
	               |	ItobАктуальностьДанныхТерминалов.ДатаВремя КАК ПериодUTC0,
				   |	ЕСТЬNULL(ItobАктуальностьДанныхТерминалов.ДанныеДатчиков,"""") КАК ДанныеДатчиков,
				   |	ЕСТЬNULL(ItobАктуальностьДанныхТерминалов.КрайниеТочки,"""") КАК КрайниеТочки,
				   |	ItobНастройкиОтображенияОбъектов.ИконкаНаКарте КАК ИконкаНаКарте,
				   |	ЕСТЬNULL(ItobНастройкиОтображенияОбъектов.НеПоказыватьСтрелкуНаправленияДвижения,ЛОЖЬ) КАК НеПоказыватьСтрелкуНаправленияДвижения,
				   |	"+СтрокаВыборкаЗапроса+"
				   |	ЕСТЬNULL(ItobНастройкиОтображенияОбъектов.ЦветМаршрутаНаКарте,0) КАК ЦветМаршрутаНаКарте,
	               |	ИСТИНА КАК ПоказатьОбъект
	               |ИЗ
	               |	РегистрСведений.ItobПривязкиТерминалов.СрезПоследних(&Период, ТерминалУстановлен) КАК ItobПривязкиТерминаловСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ItobАктуальностьДанныхТерминалов КАК ItobАктуальностьДанныхТерминалов
	               |		ПО ItobПривязкиТерминаловСрезПоследних.Терминал = ItobАктуальностьДанныхТерминалов.Терминал
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ItobНастройкиОтображенияОбъектов КАК ItobНастройкиОтображенияОбъектов
	               |		ПО ItobПривязкиТерминаловСрезПоследних.Объект = ItobНастройкиОтображенияОбъектов.Объект
				   |		"+СтрокаСоединенияЗапроса+"
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВидОбъекта,
	               |	Объект
	               |ИТОГИ ПО
	               |	ВидОбъекта,
	               |	Объект ТОЛЬКО ИЕРАРХИЯ
	               |АВТОУПОРЯДОЧИВАНИЕ";
				   
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"ItobВодители", ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("Водители"));
	Запрос.УстановитьПараметр("ЛитералВодители", НСтр("ru = 'Водители'"));
	Запрос.УстановитьПараметр("ЛитералТранспортныеСредства", НСтр("ru = 'Транспортные средства'"));	
	
	ДеревоОбъектов.Строки.Очистить();
		
	ТабРезультат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Для Каждого СтрокаРезультата Из ТабРезультат.Строки Цикл
		НовСтрокаДерева = ДеревоОбъектов.Строки.Добавить();
		НовСтрокаДерева.Объект = СтрокаРезультата.ВидОбъекта;
		НовСтрокаДерева.Картинка = 0;
		НовСтрокаДерева.ЭтоГруппа = Истина;
		
		ЗаполнитьСтрокиДереваОбъектов(СтрокаРезультата.Строки, НовСтрокаДерева.Строки);
	КонецЦикла;
			
	// Установим значения сохраненных пометок
	Если ТекущийРежим = 100 И МассивОтмеченныхОбъектов <> Неопределено Тогда
		
		Для Каждого ТекОбъект Из МассивОтмеченныхОбъектов Цикл
			
			СтрокаПоиска = ДеревоОбъектов.Строки.Найти(ТекОбъект.Значение, "Объект", Истина);
			Если СтрокаПоиска <> Неопределено Тогда
				СтрокаПоиска.Пометка = 1;	
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Если КопияДерева.Колонки.Количество() > 0 И КопияДерева.Строки.Количество() > 0 Тогда
			
			ТаблицаОбъектовСПометкой = Новый ТаблицаЗначений;
			ТаблицаОбъектовСПометкой.Колонки.Добавить("Объект");
			ТаблицаОбъектовСПометкой.Колонки.Добавить("Пометка");
			
			ЗаполнитьТаблицуОбъектовСПометкой(КопияДерева.Строки, ТаблицаОбъектовСПометкой);
			
			Для Каждого СтрокаОбъектов Из ТаблицаОбъектовСПометкой Цикл
				
				СтрокаПоиска = ДеревоОбъектов.Строки.Найти(СтрокаОбъектов.Объект, "Объект", Истина);
				Если СтрокаПоиска <> Неопределено Тогда
					СтрокаПоиска.Пометка = СтрокаОбъектов.Пометка;	
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	
	КонецЕсли;
		
	ЗначениеВРеквизитФормы(ДеревоОбъектов, "ДеревоОбъектовМониторинга");		
	ТабАктуальности.Очистить();
	ЗаполнитьТаблицуАктуальности(ДеревоОбъектовМониторинга);
	
	
КонецПроцедуры // ЗаполнитьДеревоОбъектовМониторинга

&НаСервере
Процедура ЗаполнитьТаблицуАктуальности(Родитель)
	
	Для каждого СтрокаДерева Из Родитель.ПолучитьЭлементы() Цикл
		Если (НЕ СтрокаДерева.ЭтоГруппа) Тогда			
			НовСтрокаАктуальности = ТабАктуальности.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрокаАктуальности, СтрокаДерева);
			НовСтрокаАктуальности.ИдДереваОбъектов = СтрокаДерева.ПолучитьИдентификатор();
			
		ИначеЕсли СтрокаДерева.ПолучитьЭлементы().Количество() > 0 Тогда
			ЗаполнитьТаблицуАктуальности(СтрокаДерева);	
		
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры // ОбновитьОбъектыДерева()

&НаСервере
Процедура ОбновитьОбъектыДерева(Родитель, ТабНовыхДанных, ЕстьИзменения)
	
	Для каждого СтрокаДерева Из Родитель.ПолучитьЭлементы() Цикл
		Если (НЕ СтрокаДерева.ЭтоГруппа) Тогда
			НайденнаяСтрокаНовДанных = ТабНовыхДанных.Найти(СтрокаДерева.Объект, "Объект");
			Если НЕ НайденнаяСтрокаНовДанных = Неопределено Тогда
				Если НайденнаяСтрокаНовДанных.АктуальностьДанных <> СтрокаДерева.АктуальностьДанных Тогда
					ЗаполнитьЗначенияСвойств(СтрокаДерева, НайденнаяСтрокаНовДанных);					
					ЕстьИзменения = Истина;
					
				КонецЕсли;				
			КонецЕсли;
			
		ИначеЕсли СтрокаДерева.ПолучитьЭлементы().Количество() > 0 Тогда
			ОбновитьОбъектыДерева(СтрокаДерева, ТабНовыхДанных, ЕстьИзменения);	
		
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры // ОбновитьОбъектыДерева()

// Обновление данных дерева объектов
//
&НаСервере
Процедура ОбновитьДанныеДереваОбъектовМониторинга(ЕстьИзменения)
	
	ТабАктуальностиЗнач = РеквизитФормыВЗначение("ТабАктуальности");
	ТабАктуальностиЗнач.Индексы.Добавить("ИдДереваОбъектов");
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
                   |    Таб.Терминал,
				   |    Таб.ИдДереваОбъектов,
				   |    Таб.ПериодUTC0
                   |ПОМЕСТИТЬ ВТДанныеАктуальности
                   |ИЗ
                   |    &ДанныеАктуальности КАК Таб";
	Запрос.УстановитьПараметр("ДанныеАктуальности",ТабАктуальностиЗнач);
	Результат = Запрос.Выполнить();
	
	// Учет статусов объектов
	СтрокаСоединенияЗапроса = "";
	СтрокаВыборкаЗапроса    = "";
	
	Если мСоответствиеПолейДатчиковСтатусы = Неопределено Тогда
		ИнициализироватьУсловноеОформление();	
	
	КонецЕсли;
	
	Для каждого ЭлементСоответствия Из мСоответствиеПолейДатчиковСтатусы Цикл
		ТекИмяКолонки = ЭлементСоответствия.Значение;
		
		СтрокаВыборкаЗапроса = СтрокаВыборкаЗапроса + "
			|	ЕСТЬNULL(ItobТерминалыДатчики"+ТекИмяКолонки+".Датчик.Код,0) КАК КодДатчикаНазначение"+ТекИмяКолонки+",";
		
		СтрокаСоединенияЗапроса = СтрокаСоединенияЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ItobТерминалы.Датчики КАК ItobТерминалыДатчики"+ТекИмяКолонки+"
			|ПО (ItobАктуальностьДанныхТерминалов.Терминал = ItobТерминалыДатчики"+ТекИмяКолонки+".Ссылка)
			|	И (ItobТерминалыДатчики"+ТекИмяКолонки+".Назначение = &Назначение"+ТекИмяКолонки+")";
					
		Запрос.УстановитьПараметр("Назначение"+ТекИмяКолонки, ЭлементСоответствия.Ключ);
	
	КонецЦикла;
					
	ПараметрыСдвигаВремени = ItobОперативныйМониторинг.ПолучитьПараметрыСдвигаВремени();
	
	Запрос.УстановитьПараметр("СдвигВремени", ПараметрыСдвигаВремени.СдвигВремени);
	Запрос.УстановитьПараметр("ВариантПереводаНаЛетнееВремя", ПараметрыСдвигаВремени.ВариантПереводаВремени);
	Запрос.УстановитьПараметр("СдвигЛетнееВремя", ПараметрыСдвигаВремени.СдвигЛетнееВремя);	
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ПериодUTC0", ТекущаяУниверсальнаяДата());	
	Запрос.УстановитьПараметр("МинимальнаяСкоростьДвижения", Константы.ItobМинимальнаяСкоростьДвижения.Получить());
	Запрос.УстановитьПараметр("ТранспортныеСредства", НСтр("ru = 'Транспортные средства'"));
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВЫБОР
	               |		КОГДА ItobПривязкиТерминаловСрезПоследних.Объект ССЫЛКА Справочник.ItobВодители
	               |			ТОГДА ""Водители""
	               |		ИНАЧЕ &ТранспортныеСредства
	               |	КОНЕЦ КАК ВидОбъекта,
	               |	ItobПривязкиТерминаловСрезПоследних.Объект КАК Объект,
	               |	ПРЕДСТАВЛЕНИЕ(ItobПривязкиТерминаловСрезПоследних.Объект) КАК ОбъектПредставление,
	               |	1 КАК Картинка,
	               |	ЛОЖЬ КАК ЭтоГруппа,
	               |	0 КАК Пометка,
	               |	ВЫБОР
	               |		КОГДА ItobАктуальностьДанныхТерминалов.ДатаВремя ЕСТЬ NULL 
	               |			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	               |		ИНАЧЕ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ItobАктуальностьДанныхТерминалов.ДатаВремя, СЕКУНДА, &СдвигВремени), СЕКУНДА, ВЫБОР
	               |					КОГДА &ВариантПереводаНаЛетнееВремя = ЗНАЧЕНИЕ(Перечисление.ItobВариантыПереводаВремени.Европейский)
	               |						ТОГДА ВЫБОР
	               |								КОГДА ItobАктуальностьДанныхТерминалов.ДатаВремя МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ItobАктуальностьДанныхТерминалов.ДатаВремя, ГОД), МЕСЯЦ, 3), НЕДЕЛЯ), НЕДЕЛЯ, -1), ДЕНЬ), ЧАС, 2) И ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ItobАктуальностьДанныхТерминалов.ДатаВремя, ГОД), МЕСЯЦ, 10), НЕДЕЛЯ), НЕДЕЛЯ, -1), ДЕНЬ), ЧАС, 2)
	               |									ТОГДА &СдвигЛетнееВремя
	               |								ИНАЧЕ 0
	               |							КОНЕЦ
	               |					КОГДА &ВариантПереводаНаЛетнееВремя = ЗНАЧЕНИЕ(Перечисление.ItobВариантыПереводаВремени.Американский)
	               |						ТОГДА ВЫБОР
	               |								КОГДА ItobАктуальностьДанныхТерминалов.ДатаВремя МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ItobАктуальностьДанныхТерминалов.ДатаВремя, ГОД), МЕСЯЦ, 2), НЕДЕЛЯ), НЕДЕЛЯ, 1), ДЕНЬ), ЧАС, 2) И ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ItobАктуальностьДанныхТерминалов.ДатаВремя, ГОД), МЕСЯЦ, 10), НЕДЕЛЯ), НЕДЕЛЯ, 0), ДЕНЬ), ЧАС, 2)
	               |									ТОГДА &СдвигЛетнееВремя
	               |								ИНАЧЕ 0
	               |							КОНЕЦ
	               |					ИНАЧЕ 0
	               |				КОНЕЦ)
	               |	КОНЕЦ КАК АктуальностьДанных,
	               |	ItobПривязкиТерминаловСрезПоследних.Терминал,
	               |	ItobПривязкиТерминаловСрезПоследних.Терминал.Код КАК КодТерминала,
	               |	ЕСТЬNULL(ItobАктуальностьДанныхТерминалов.Широта, 0) КАК Широта,
	               |	ЕСТЬNULL(ItobАктуальностьДанныхТерминалов.Долгота, 0) КАК Долгота,
	               |	ЕСТЬNULL(ItobАктуальностьДанныхТерминалов.Скорость, 0) КАК Скорость,
	               |	ЕСТЬNULL(ItobАктуальностьДанныхТерминалов.Направление, 0) КАК Направление,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ItobАктуальностьДанныхТерминалов.Скорость, 0) >= &МинимальнаяСкоростьДвижения
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ItobСостоянияТерминалов.Движение)
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ItobСостоянияТерминалов.Стоянка)
	               |	КОНЕЦ КАК Состояние,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ItobАктуальностьДанныхТерминалов.Скорость, 0) >= &МинимальнаяСкоростьДвижения
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ОбъектВДвижении,
	               |	РАЗНОСТЬДАТ(ItobАктуальностьДанныхТерминалов.ДатаВремя, &ПериодUTC0, МИНУТА) КАК ОтсутствуютДанныеМинуты,
	               |	РАЗНОСТЬДАТ(ItobАктуальностьДанныхТерминалов.ДатаВремя, &ПериодUTC0, ЧАС) КАК ОтсутствуютДанныеЧасы,
	               |	ItobАктуальностьДанныхТерминалов.ДатаВремя КАК ПериодUTC0,
	               |	ЕСТЬNULL(ItobАктуальностьДанныхТерминалов.ДанныеДатчиков, """") КАК ДанныеДатчиков,
	               |	ЕСТЬNULL(ItobАктуальностьДанныхТерминалов.КрайниеТочки, """") КАК КрайниеТочки,
	               |	ItobНастройкиОтображенияОбъектов.ИконкаНаКарте КАК ИконкаНаКарте,
				   |	"+СтрокаВыборкаЗапроса+"
	               |	ItobНастройкиОтображенияОбъектов.ЦветМаршрутаНаКарте КАК ЦветМаршрутаНаКарте,
	               |	ВТДанныеАктуальности.ИдДереваОбъектов КАК ИдДереваОбъектов
	               |ИЗ
	               |	РегистрСведений.ItobПривязкиТерминалов.СрезПоследних(&Период, ТерминалУстановлен) КАК ItobПривязкиТерминаловСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ItobАктуальностьДанныхТерминалов КАК ItobАктуальностьДанныхТерминалов
	               |		ПО ItobПривязкиТерминаловСрезПоследних.Терминал = ItobАктуальностьДанныхТерминалов.Терминал
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеАктуальности КАК ВТДанныеАктуальности
	               |		ПО ItobПривязкиТерминаловСрезПоследних.Терминал = ВТДанныеАктуальности.Терминал
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ItobНастройкиОтображенияОбъектов КАК ItobНастройкиОтображенияОбъектов
	               |		ПО ItobПривязкиТерминаловСрезПоследних.Объект = ItobНастройкиОтображенияОбъектов.Объект
				   |		"+СтрокаСоединенияЗапроса+"
	               |ГДЕ
	               |	ItobАктуальностьДанныхТерминалов.ДатаВремя > ВТДанныеАктуальности.ПериодUTC0
	               |	И НЕ ВТДанныеАктуальности.ИдДереваОбъектов ЕСТЬ NULL ";
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"ItobВодители", ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("Водители"));
	
	ТабРезультат = Запрос.Выполнить().Выгрузить();
		
	ЕстьИзменения = Ложь;	
	
	Для каждого СтрРез Из ТабРезультат Цикл
		СтрДерева = ДеревоОбъектовМониторинга.НайтиПоИдентификатору(СтрРез.ИдДереваОбъектов);
		ТекПометка = СтрДерева.Пометка;
		ЗаполнитьЗначенияСвойств(СтрДерева, СтрРез);
		СтрДерева.Пометка = ТекПометка;
		ЕстьИзменения = Истина;
		
		НайденнаяСтрокаАктуальности = ТабАктуальностиЗнач.Найти(СтрРез.ИдДереваОбъектов,"ИдДереваОбъектов");
		Если НайденнаяСтрокаАктуальности <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(НайденнаяСтрокаАктуальности, СтрРез);		
		КонецЕсли;
	
	КонецЦикла;
	
	Если ЕстьИзменения Тогда
		ЗначениеВРеквизитФормы(ТабАктуальностиЗнач, "ТабАктуальности");

	КонецЕсли;
		
КонецПроцедуры // ЗаполнитьДеревоОбъектовМониторинга

// Заполнение строка дерева объектов
//
&НаСервере
Процедура ЗаполнитьСтрокиДереваОбъектов(Результат, Строки)
	
	Для Каждого СтрокаРезультата Из Результат Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаРезультата.Объект) Тогда
			// элементы первого уровня
			ЗаполнитьСтрокиДереваОбъектов(СтрокаРезультата.Строки, Строки);
			Продолжить;
		
		КонецЕсли;
		
		НовСтрокаДерева = Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрокаДерева, СтрокаРезультата);
		НовСтрокаДерева.ЭтоГруппа = СтрокаРезультата.ЭтоГруппа;
		
		// Значения датчиков для статуса вычисляем
		Если (НЕ НовСтрокаДерева.ЭтоГруппа) И мСоответствиеПолейДатчиковСтатусы.Количество() > 0 Тогда
			СтруктураДанныеДатчиков = ItobОбщегоНазначенияКлиентСервер.ПреобразоватьСтрокуВДанныеДатчиков(СтрокаРезультата.ДанныеДатчиков);
			Для каждого ЭлементСтруктуры Из мСоответствиеПолейДатчиковСтатусы Цикл
				ЗначениеДатчика = СтруктураДанныеДатчиков[СтрокаРезультата["КодДатчикаНазначение"+ЭлементСтруктуры.Значение]];
				НовСтрокаДерева[ЭлементСтруктуры.Значение] = ?(ЗначениеДатчика=Неопределено,-1,ЗначениеДатчика);
			КонецЦикла;			
		
		КонецЕсли;		
				
		Если СтрокаРезультата.ЭтоГруппа Тогда
			Если СтрокаРезультата.Родитель.Объект = СтрокаРезультата.Объект Тогда
				Строки.Удалить(НовСтрокаДерева);
				ЗаполнитьСтрокиДереваОбъектов(СтрокаРезультата.Строки, Строки);		
		    Иначе
				ЗаполнитьСтрокиДереваОбъектов(СтрокаРезультата.Строки, НовСтрокаДерева.Строки);		
		    КонецЕсли; 
			
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСтрокиДереваОбъектов()

// Заполнение дерева объектов - объекты с пометкой 
//
&НаСервере
Процедура ЗаполнитьТаблицуОбъектовСПометкой(СтрокиДерева, ТаблицаОбъектовСПометкой)
	
	Для Каждого СтрокаКопииДерева Из СтрокиДерева Цикл
		
		Если СтрокаКопииДерева.Пометка > 0 Тогда
			НовСтрокаОбъектов = ТаблицаОбъектовСПометкой.Добавить();
			НовСтрокаОбъектов.Объект = СтрокаКопииДерева.Объект;
			НовСтрокаОбъектов.Пометка = СтрокаКопииДерева.Пометка;			
		
		КонецЕсли;		
		
		Если СтрокаКопииДерева.Строки.Количество() > 0 Тогда
			ЗаполнитьТаблицуОбъектовСПометкой(СтрокаКопииДерева.Строки, ТаблицаОбъектовСПометкой)	
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицуОбъектовСПометкой()

&НаСервере
Функция ПолучитьДеталиДатчика(Данные)
	
	ТабДеталей = Новый ТаблицаЗначений;
	ТабДеталей.Колонки.Добавить("Показатель");
	ТабДеталей.Колонки.Добавить("Значение");
	ТабДеталей.Колонки.Добавить("Датчик");
	ТабДеталей.Колонки.Добавить("ТипДатчика");
	
	НовСтрокаДетали = ТабДеталей.Добавить();
	НовСтрокаДетали.Показатель = "Актуальность";
	НовСтрокаДетали.Значение = ?(НачалоДня(ТекущаяДатаСеанса())=НачалоДня(Данные.АктуальностьДанных),
		Формат(Данные.АктуальностьДанных,"ДФ=HH:mm:ss"),
		Формат(Данные.АктуальностьДанных,"ДФ='dd.MM.yyyy HH:mm:ss'")) ;
	
	НовСтрокаДетали = ТабДеталей.Добавить();
	НовСтрокаДетали.Показатель = "Местоположение";
	Если НЕ (Данные.Широта=0 И Данные.Долгота=0) Тогда
		НовСтрокаДетали.Значение = ItobОперативныйМониторинг.НайтиБлижайшийАдрес(Данные.Широта, Данные.Долгота);	
	Иначе
		НовСтрокаДетали.Значение = "";
	КонецЕсли;	
	
	НовСтрокаДетали = ТабДеталей.Добавить();
	НовСтрокаДетали.Показатель = "Скорость";
	НовСтрокаДетали.Значение = ""+Данные.Скорость+" км/ч";
			
	НовСтрокаДетали = ТабДеталей.Добавить();
	НовСтрокаДетали.Показатель = "Направление";
	НовСтрокаДетали.Значение = ""+Данные.Направление+"°";
		
	НовСтрокаДетали = ТабДеталей.Добавить();
	НовСтрокаДетали.Показатель = "Терминал";
	НовСтрокаДетали.Значение = Данные.Терминал;
		
	// Датчики
	СтруктураДанныеДатчиков = ItobОбщегоНазначенияКлиентСервер.ПреобразоватьСтрокуВДанныеДатчиков(Данные.ДанныеДатчиков);
	
	ДатчикОснПитание = Данные.Терминал.Модель.ОсновноеПитание;
	МинимальноеЗначениеОсновногоПитания = Данные.Терминал.Модель.МинимальноеЗначениеОсновногоПитания;
	
	ЗапросДатчики = Новый Запрос("ВЫБРАТЬ
	                             |	ItobТерминалыДатчики.Назначение КАК Показатель,
	                             |	ItobТерминалыДатчики.Датчик.ТипДатчика КАК ТипДатчика,
	                             |	ItobТерминалыДатчики.Датчик КАК Датчик,
	                             |	ItobТерминалыДатчики.Датчик.Код КАК КодДатчика,
	                             |	ItobТерминалыДатчики.КалибровочныйГрафик КАК КалибровочныйГрафик,
	                             |	ItobТерминалыДатчики.Ссылка КАК Терминал
	                             |ИЗ
	                             |	Справочник.ItobТерминалы.Датчики КАК ItobТерминалыДатчики
	                             |ГДЕ
	                             |	ItobТерминалыДатчики.Ссылка = &Терминал
	                             |
	                             |УПОРЯДОЧИТЬ ПО
	                             |	ItobТерминалыДатчики.НомерСтроки");								 
								 
	ЗапросДатчики.УстановитьПараметр("Период", Данные.ПериодUTC0);
	ЗапросДатчики.УстановитьПараметр("Терминал", Данные.Терминал);
	ВыборкаДатчики = ЗапросДатчики.Выполнить().Выбрать();
	Пока ВыборкаДатчики.Следующий() Цикл
		
		ЗначениеДатчика = СтруктураДанныеДатчиков[ВыборкаДатчики.КодДатчика];
		Если ЗначениеДатчика = Неопределено Тогда
			Продолжить;
		КонецЕсли;		
		
		НоваяСтрокаДатчики = ТабДеталей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаДатчики, ВыборкаДатчики);
		НоваяСтрокаДатчики.Значение = ЗначениеДатчика; 
		
		Если ВыборкаДатчики.ТипДатчика = ПредопределенноеЗначение("Перечисление.ItobТипыДатчиков.Дискретный") Тогда
			НайденнаяСтрокаРасшифровки = ВыборкаДатчики.Показатель.РасшифровкаПоказаний.Найти(ЗначениеДатчика,"Показание");
			Если НайденнаяСтрокаРасшифровки <> Неопределено Тогда
				НоваяСтрокаДатчики.Значение = НайденнаяСтрокаРасшифровки.Расшифровка;	
			
			КонецЕсли;
		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаДатчики.КалибровочныйГрафик) Тогда
			
			НоваяСтрокаДатчики.Значение = "Неопределено";
			Для Счетчик = 0 По ВыборкаДатчики.КалибровочныйГрафик.Показатели.Количество()-2 Цикл
				Если ЗначениеДатчика >= ВыборкаДатчики.КалибровочныйГрафик.Показатели[Счетчик].Вход
					И ЗначениеДатчика <= ВыборкаДатчики.КалибровочныйГрафик.Показатели[Счетчик+1].Вход Тогда
					
					СтрКалибровки1 = ВыборкаДатчики.КалибровочныйГрафик.Показатели[Счетчик];
					СтрКалибровки2 = ВыборкаДатчики.КалибровочныйГрафик.Показатели[Счетчик+1];
					
					Преобразование = (СтрКалибровки1.Выход-СтрКалибровки2.Выход)/(СтрКалибровки1.Вход-СтрКалибровки2.Вход)*ЗначениеДатчика
						+ (СтрКалибровки1.Вход*СтрКалибровки2.Выход-СтрКалибровки2.Вход*СтрКалибровки1.Выход)/(СтрКалибровки1.Вход-СтрКалибровки2.Вход);
					НоваяСтрокаДатчики.Значение = ""+Окр(Преобразование,1);
				
				КонецЕсли; 
			
			КонецЦикла;
		
		КонецЕсли;
		
		Если ВыборкаДатчики.Датчик = ДатчикОснПитание Тогда
			НовСтрокаДетали = ТабДеталей.Вставить(2);
			НовСтрокаДетали.Показатель = "Питание";
			НовСтрокаДетали.Значение = ?(ЗначениеДатчика<МинимальноеЗначениеОсновногоПитания, "Резервное", "Основное");
		
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТабДеталей;	

КонецФункции // ПолучитьДеталиДатчика()

// Обновление дерева деталей 
//
&НаСервере
Процедура ОбновитьДеревоДеталей(Данные)
	
	Дерево = РеквизитФормыВЗначение("ДеревоДатчиков");
	
	Дерево.Строки.Очистить();
	
	ТабДеталей = ПолучитьДеталиДатчика(Данные);
	Для каждого СтрТабДеталей Из ТабДеталей Цикл
		НовСтрокаДетали = Дерево.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрокаДетали, СтрТабДеталей);		
		НовСтрокаДетали.Терминал = Данные.Терминал;	
		НовСтрокаДетали.Объект = Данные.Объект;	
	КонецЦикла;
		
	ЗначениеВРеквизитФормы(Дерево, "ДеревоДатчиков");
		
КонецПроцедуры // ОбновитьДеревоДеталей()

// Процедура изменяет подменю местоположения.
//
&НаСервере
Процедура ИзменитьПодменюВыбораМестоположенияНаСервере(НомерВыбраннойКарты)

	ВыбраннаяКнопка = Неопределено;
	Счетчик = 1;
	Для каждого ТекущаяКнопка Из Элементы.ПодменюВыборКарты.ПодчиненныеЭлементы Цикл
		
		Если Счетчик = НомерВыбраннойКарты Тогда
		
			ВыбраннаяКнопка = ТекущаяКнопка;
			ТекущаяКнопка.Пометка = Истина;
			
		Иначе
			ТекущаяКнопка.Пометка = Ложь;
		
		КонецЕсли;
				
		Счетчик = Счетчик+1;
	
	КонецЦикла;
		
	ТекущееМестоположение = Справочники.ItobМестоположенияПоУмолчанию.НайтиПоКоду(Сред(ВыбраннаяКнопка.Имя, 3));
	ТекущийМасштаб = ТекущееМестоположение.Масштаб;
	ТекущаяШирота = ТекущееМестоположение.Широта;
	ТекущаяДолгота = ТекущееМестоположение.Долгота;
	
КонецПроцедуры // ИзменитьПодменюВыбораМестоположенияНаСервере()

// По текущему объекту определяем местоположение
//
&НаКлиенте
Процедура ОпределитьИЗаполнитьМестоположение()
		
	Если НЕ Элементы.ДеревоОбъектовМониторинга.ТекущиеДанные = Неопределено Тогда
		
		ДанныеСтроки = Элементы.ДеревоОбъектовМониторинга.ТекущиеДанные;
		
		СтруктураДанных = Новый Структура("Объект,АктуальностьДанных,Скорость,Направление,Терминал,ПериодUTC0,ДанныеДатчиков,Широта,Долгота");
		ЗаполнитьЗначенияСвойств(СтруктураДанных, ДанныеСтроки);
		
		ОбновитьДеревоДеталей(СтруктураДанных);
				
	КонецЕсли;
	
КонецПроцедуры // ОпределитьИЗаполнитьМестоположение()

// Функция возвращает строку переведенного числа из 10-ой системы счисления.
//
&НаКлиентеНаСервереБезКонтекста
Функция Из_10_В_Любую(Знач Значение=0,Нотация=36)
	Возврат ItobОбщегоНазначенияКлиентСервер.Из_10_В_Любую(Значение, Нотация);
КонецФункции // Из_10_В_Любую()

&НаСервере
Функция НайтиЗаданияВодителю(ТекущийОбъект, НачДата, КонДата)

	ТЗРезультат = Новый ТаблицаЗначений;
	ТЗРезультат.Колонки.Добавить("ЗаданиеВодителю");
	ТЗРезультат.Колонки.Добавить("Маршрут");
	ТЗРезультат.Колонки.Добавить("Состав");
	
	ТЗМаршрут = Новый ТаблицаЗначений;
	ТЗМаршрут.Колонки.Добавить("НомерСтроки");
	ТЗМаршрут.Колонки.Добавить("Широта");
	ТЗМаршрут.Колонки.Добавить("Долгота");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата", НачДата);
	Запрос.УстановитьПараметр("КонДата",КонДата);
	Запрос.УстановитьПараметр("Объект", ТекущийОбъект);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВложенныйЗапрос.ЗаданиеВодителю
	               |ПОМЕСТИТЬ СписокЗаданий
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		СвойстваМаршрутныхЗаданий.МаршрутноеЗадание КАК ЗаданиеВодителю
	               |	ИЗ
	               |		РегистрСведений.ItobСвойстваМаршрутныхЗаданий КАК СвойстваМаршрутныхЗаданий
	               |	ГДЕ
	               |		&Объект В (СвойстваМаршрутныхЗаданий.ТранспортноеСредство, СвойстваМаршрутныхЗаданий.Водитель)
	               |		И СвойстваМаршрутныхЗаданий.ДатаВыезда МЕЖДУ &НачДата И &КонДата) КАК ВложенныйЗапрос
	               |ГДЕ
	               |	ВложенныйЗапрос.ЗаданиеВодителю.Проведен
	               |	И НЕ ВложенныйЗапрос.ЗаданиеВодителю.ПометкаУдаления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СписокЗаданий.ЗаданиеВодителю,
	               |	СписокЗаданий.ЗаданиеВодителю.ТочкиМаршрута.(
	               |		НомерСтроки КАК НомерСтроки,
	               |		Широта КАК Широта,
	               |		Долгота КАК Долгота
	               |	) КАК ЗаданиеВодителюМаршрут
	               |ИЗ
	               |	СписокЗаданий КАК СписокЗаданий
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВложенныйЗапрос.ЗаданиеВодителю КАК ЗаданиеВодителю,
	               |	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	               |	ВложенныйЗапрос.АдресДоставки,
	               |	ПРЕДСТАВЛЕНИЕ(ВложенныйЗапрос.АдресДоставки) КАК АдресДоставкиПредставление,
	               |	ВложенныйЗапрос.ПрибытиеПлан,
	               |	ВложенныйЗапрос.УбытиеПлан,
	               |	ЕСТЬNULL(ItobСвойстваПунктовНазначения.Широта, 0) КАК Широта,
	               |	ЕСТЬNULL(ItobСвойстваПунктовНазначения.Долгота, 0) КАК Долгота
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		СоставМаршрутныхЗаданий.МаршрутноеЗадание КАК ЗаданиеВодителю,
	               |		СоставМаршрутныхЗаданий.Адрес КАК АдресДоставки,
	               |		СоставМаршрутныхЗаданий.ПрибытиеПлан КАК ПрибытиеПлан,
	               |		СоставМаршрутныхЗаданий.УбытиеПлан КАК УбытиеПлан,
	               |		СРЕДНЕЕ(СоставМаршрутныхЗаданий.ПорядокПосещения) КАК НомерСтроки
	               |	ИЗ
	               |		РегистрСведений.ItobСоставМаршрутныхЗаданий КАК СоставМаршрутныхЗаданий
	               |	ГДЕ
	               |		СоставМаршрутныхЗаданий.МаршрутноеЗадание В
	               |				(ВЫБРАТЬ
	               |					СписокЗаданий.ЗаданиеВодителю
	               |				ИЗ
	               |					СписокЗаданий КАК СписокЗаданий)
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		СоставМаршрутныхЗаданий.МаршрутноеЗадание,
	               |		СоставМаршрутныхЗаданий.Адрес,
	               |		СоставМаршрутныхЗаданий.ПрибытиеПлан,
	               |		СоставМаршрутныхЗаданий.УбытиеПлан) КАК ВложенныйЗапрос
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ItobСвойстваПунктовНазначения КАК ItobСвойстваПунктовНазначения
	               |		ПО ВложенныйЗапрос.АдресДоставки = ItobСвойстваПунктовНазначения.ПунктНазначения
	               |ГДЕ
	               |	НЕ ЕСТЬNULL(ItobСвойстваПунктовНазначения.Широта, 0) = 0
	               |	И НЕ ЕСТЬNULL(ItobСвойстваПунктовНазначения.Долгота, 0) = 0
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЗаданиеВодителю,
	               |	НомерСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ СписокЗаданий";
				   
	РезЗапроса = Запрос.ВыполнитьПакет();	
	ТаблицаАдреса = РезЗапроса[2].Выгрузить();
	
	ВыборкаЗВ = РезЗапроса[1].Выбрать();			
	Пока ВыборкаЗВ.Следующий() Цикл
		
		НовСтрокаРез = ТЗРезультат.Добавить();
		НовСтрокаРез.ЗаданиеВодителю = ВыборкаЗВ.ЗаданиеВодителю;
		НовСтрокаРез.Маршрут = ТЗМаршрут.Скопировать();
		НовСтрокаРез.Состав = ТаблицаАдреса.СкопироватьКолонки();
		
		ВыборкаМаршрут = ВыборкаЗВ.ЗаданиеВодителюМаршрут.Выбрать();
		Пока ВыборкаМаршрут.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НовСтрокаРез.Маршрут.Добавить(), ВыборкаМаршрут);		
		КонецЦикла;
		
		НайденныеАдреса = ТаблицаАдреса.НайтиСтроки(Новый Структура("ЗаданиеВодителю", ВыборкаЗВ.ЗаданиеВодителю));
		Для Каждого СтрокаНайденныеАдреса Из НайденныеАдреса Цикл
			ЗаполнитьЗначенияСвойств(НовСтрокаРез.Состав.Добавить(), СтрокаНайденныеАдреса);		
		КонецЦикла; 
			
	КонецЦикла;

	Возврат ТЗРезультат;

КонецФункции // НайтиЗаданияВодителю()

// Функция возвращает текст скрипта отображения маршрута объектов.
//
&НаСервере
Функция ПолучитьСкриптМаршрутыОбъектов(МассивОбъектов, НачДата, КонДата, МассивПробегов)
    	
	ТекстСкрипта = 
		"playRouteLayer.removeAllFeatures();
		|var Features = [];			
		|markersLayer.clearMarkers();";
	
	Для ИндексМассива = 0 По МассивОбъектов.Количество()-1 Цикл
		ТекущийОбъект   = МассивОбъектов[ИндексМассива].Объект;
		ТекущийТерминал = МассивОбъектов[ИндексМассива].Терминал;
		
		ИнтервалыДвиженияДляПлановогоМаршрута = ItobОперативныйМониторинг.ПолучитьИнтервалыДвижения(ТекущийОбъект, НачДата, КонДата, Истина);
		Если ИнтервалыДвиженияДляПлановогоМаршрута.Количество() = 0 Тогда
			Продолжить;
		
		КонецЕсли;
		
		ТекстСкрипта = ТекстСкрипта + "
			|var pointList = [];
			|var pt = null;";
		
		ТекущийОбъектОтображение = ItobОбщегоНазначенияСервер.ПолучитьНастройкиОтображенияОбъектов(ТекущийОбъект);	
		ЦветМаршрута = ItobОбщегоНазначенияКлиентСервер.ПолучитьЦветПоЗначениюХранения(
			ТекущийОбъектОтображение.ЦветМаршрутаНаКарте);		//Новый Цвет(50, 225, 50);
		ВебЦветМаршрута = Из_10_В_Любую(ЦветМаршрута.Красный,16)+Из_10_В_Любую(ЦветМаршрута.Зеленый,16)+Из_10_В_Любую(ЦветМаршрута.Синий,16);
		
		НомерСтоянки = 1;
		
		Для СчетчикП = 0 По ИнтервалыДвиженияДляПлановогоМаршрута.Количество()-1 Цикл
			
			Для СчетчикК = 0 По ИнтервалыДвиженияДляПлановогоМаршрута[СчетчикП].ДанныеТерминала.Количество()-1 Цикл
				
				Если ИнтервалыДвиженияДляПлановогоМаршрута[СчетчикП].ДанныеТерминала[СчетчикК].Долгота = Неопределено
					ИЛИ ИнтервалыДвиженияДляПлановогоМаршрута[СчетчикП].ДанныеТерминала[СчетчикК].Широта = Неопределено Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Если ИнтервалыДвиженияДляПлановогоМаршрута[СчетчикП].ДанныеТерминала[СчетчикК].Долгота = 0
					ИЛИ ИнтервалыДвиженияДляПлановогоМаршрута[СчетчикП].ДанныеТерминала[СчетчикК].Широта = 0 Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				ТекстСкрипта = ТекстСкрипта+СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"
					|pt = new OpenLayers.LonLat(%1,%2);
					|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
					|pointList.push(new OpenLayers.Geometry.Point(pt.lon, pt.lat));",
					ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(
						ИнтервалыДвиженияДляПлановогоМаршрута[СчетчикП].ДанныеТерминала[СчетчикК].Долгота),
					ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(
						ИнтервалыДвиженияДляПлановогоМаршрута[СчетчикП].ДанныеТерминала[СчетчикК].Широта));					
				
				Если ИнтервалыДвиженияДляПлановогоМаршрута[СчетчикП].Состояние = ПредопределенноеЗначение("Перечисление.ItobСостоянияТерминалов.Стоянка") Тогда
					
					ПолныеДаты = НачалоДня(НачДата) <> НачалоДня(КонДата);
					Строка1 = НСтр("ru = 'Стоянка №'")+" "+НомерСтоянки+" ("+ItobОперативныйМониторингКлиентСервер.ПредставлениеВремени(ИнтервалыДвиженияДляПлановогоМаршрута[СчетчикП].Длительность)+")";
			    	Строка2 = "Адрес: "+ИнтервалыДвиженияДляПлановогоМаршрута[СчетчикП].МестоСтоянки;			
					Строка3 = "С "+Формат(ИнтервалыДвиженияДляПлановогоМаршрута[СчетчикП].ВремяНач, ?(ПолныеДаты,"ДФ='dd.MM.yy HH:mm'","ДФ=HH:mm"))
	    				+" по "+Формат(ИнтервалыДвиженияДляПлановогоМаршрута[СчетчикП].ВремяКон, ?(ПолныеДаты,"ДФ='dd.MM.yy HH:mm'","ДФ=HH:mm"));
	                				
					НадписьHTML = "<div style=""font-family:Tahoma, Geneva, sans-serif; font-size:11px; width:190px; height:90px; text-align:left; word-wrap:break-word;""><b>"
						+Строка1+"</b><br />"
						+Строка2+"<br />"
						+Строка3+"</div>";
					
					ВысотаОкнаДеталей = 100 + Макс(0,Окр((СтрДлина(ИнтервалыДвиженияДляПлановогоМаршрута[СчетчикП].МестоСтоянки)-15)/25+0.499,0))*20;
						
			    	ТекстСкрипта = ТекстСкрипта+"
						|pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ИнтервалыДвиженияДляПлановогоМаршрута[СчетчикП].ДанныеТерминала[СчетчикК].Долгота)
							+", "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ИнтервалыДвиженияДляПлановогоМаршрута[СчетчикП].ДанныеТерминала[СчетчикК].Широта)+");
						|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
		                |var size = new OpenLayers.Size(23,23);
						|var offset = new OpenLayers.Pixel(-(size.w/2), -size.h);
					    |var icon = new OpenLayers.Icon('"+ВебСсылкаСервер+"images/parking.png',size,offset);
						|
						|marker = new OpenLayers.Marker(pt,icon);
						|
						|marker.events.on({
						|	""mousedown"": function(event) { 
					    |					
						|if (this.popup == null) {

						|	var pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ИнтервалыДвиженияДляПлановогоМаршрута[СчетчикП].ДанныеТерминала[СчетчикК].Долгота)
							+", "+ ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ИнтервалыДвиженияДляПлановогоМаршрута[СчетчикП].ДанныеТерминала[СчетчикК].Широта)+");
						|	pt.transform(m_map.displayProjection, m_map.getProjectionObject());
						|	
						|     this.popup = new OpenLayers.Popup(""chicken"",
						|	   pt,
						|	   new OpenLayers.Size(200,"+Формат(ВысотаОкнаДеталей,"ЧГ=0")+"),
						|	   '"+НадписьHTML+"'"+",
						|	   true);
						|     m_map.addPopup(this.popup);
						|     this.popup.show();
						| } else {
						|     this.popup.toggle();
						| }
						| currentPopup = this.popup;
						| OpenLayers.Event.stop(event);
						|	}
						|   
						|});
						|markersLayer.addMarker(marker);
		                |";
									
					НомерСтоянки = НомерСтоянки+1;
					
					Прервать;
					
				Иначе
					МассивПробегов[ИндексМассива] = МассивПробегов[ИндексМассива]+ИнтервалыДвиженияДляПлановогоМаршрута[СчетчикП].ДанныеТерминала[СчетчикК].Пробег;
				КонецЕсли;
			
			КонецЦикла;			
			
		КонецЦикла;
		
		ТекстСкрипта = ТекстСкрипта+"
			|var LineString = new OpenLayers.Geometry.LineString(pointList);
			|var lineFeature = new OpenLayers.Feature.Vector(
			|                LineString,null,{
			|                strokeColor: ""#"+ВебЦветМаршрута+""",
			|                strokeWidth: 5,
			|				 strokeOpacity: 0.8,
			|                strokeDashstyle: ""solid"",
			|				 strokeLinecap: ""round"",
			|                pointRadius: 6,
			|                pointerEvents: ""visiblePainted""
			|});
			|Features.push(lineFeature);
			|geometryLayer.addFeatures(Features);
			|//m_map.zoomToExtent(LineString.getBounds());
			|//===================================================";
		
		Если ПоказыватьНарушенияВождения Тогда
			ЗапросНарушения = Новый Запрос;
			ЗапросНарушения.Текст = "ВЫБРАТЬ
			                        |	ЖурналБезопасностиВождения.ДатаВремя,
			                        |	ЖурналБезопасностиВождения.Широта,
			                        |	ЖурналБезопасностиВождения.Долгота,
			                        |	ЖурналБезопасностиВождения.УсловиеНарушения.Владелец КАК КритерийНарушения,
									|	ЖурналБезопасностиВождения.УсловиеНарушения.Владелец.Представление КАК КритерийНарушенияПредставление,
			                        |	ЖурналБезопасностиВождения.УсловиеНарушения,
									|	ЖурналБезопасностиВождения.УсловиеНарушения.Представление КАК УсловиеНарушенияПредставление,
			                        |	ЖурналБезопасностиВождения.Штраф,
			                        |	ЖурналБезопасностиВождения.УсловиеНарушения.Владелец.ИконкаНаКарте КАК ИконкаНаКарте
			                        |ИЗ
			                        |	РегистрСведений.ItobЖурналБезопасностиВождения КАК ЖурналБезопасностиВождения
			                        |ГДЕ
			                        |	ЖурналБезопасностиВождения.ДатаВремя МЕЖДУ &НачДата И &КонДата
			                        |	И ЖурналБезопасностиВождения.Терминал = &Терминал";
			ЗапросНарушения.УстановитьПараметр("Терминал", ТекущийТерминал);
			ЗапросНарушения.УстановитьПараметр("НачДата", ItobОперативныйМониторинг.ПривестиКДатеВремениПоГринвичу(НачДата));
			ЗапросНарушения.УстановитьПараметр("КонДата", ItobОперативныйМониторинг.ПривестиКДатеВремениПоГринвичу(КонДата));
			ВыборкаНарушения = ЗапросНарушения.Выполнить().Выбрать();
			Пока ВыборкаНарушения.Следующий() Цикл
				
				ВысотаОкнаДеталей = 100;
				НадписьHTML = 
				    "<font style=""font-size:11px;font-family:Tahoma, Geneva, sans-serif"">"
					+"<b>Период: "+Формат(ВыборкаНарушения.ДатаВремя,"ДФ='dd.MM.yyyy HH:mm:ss'")+"</b><br />"
					+"Нарушение: "+ВыборкаНарушения.КритерийНарушенияПредставление+"<br />"
					+"Условие: "+ВыборкаНарушения.УсловиеНарушенияПредставление+"<br />"
					+"Штраф: "+ВыборкаНарушения.Штраф
					+"</font>";
					
				ТекстСкрипта = ТекстСкрипта+"
						|pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ВыборкаНарушения.Долгота)
							+", "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ВыборкаНарушения.Широта)+");
						|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
		                |var size = new OpenLayers.Size(24,24);
						|var offset = new OpenLayers.Pixel(-(size.w/2), -(size.h/2));
					    |var icon = new OpenLayers.Icon('"+ВебСсылкаСервер+"images/"+ПолучитьИмяИконки(ВыборкаНарушения.ИконкаНаКарте)+"',size,offset);
						|
						|marker = new OpenLayers.Marker(pt,icon);
						|
						|marker.events.on({
						|	""mousedown"": function(event) { 
					    |					
						|if (this.popup == null) {

						|	var pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ВыборкаНарушения.Долгота)
							+", "+ ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ВыборкаНарушения.Широта)+");
						|	pt.transform(m_map.displayProjection, m_map.getProjectionObject());
						|	
						|     this.popup = new OpenLayers.Popup(""chicken"",
						|	   pt,
						|	   new OpenLayers.Size(200,"+Формат(ВысотаОкнаДеталей,"ЧГ=0")+"),
						|	   '"+НадписьHTML+"'"+",
						|	   true);
						|     m_map.addPopup(this.popup);
						|     this.popup.show();
						| } else {
						|     this.popup.toggle();
						| }
						| currentPopup = this.popup;
						| OpenLayers.Event.stop(event);
						|	}
						|   
						|});
						|markersLayer.addMarker(marker);
		                |";
			
			КонецЦикла;		
		КонецЕсли;
		
		Если ПоказыватьПлановыйМаршрут Тогда
									
			ТЗЗадания = НайтиЗаданияВодителю(ТекущийОбъект, НачДата, КонДата);
			Для каждого СтрокаЗаданиеВодителю Из ТЗЗадания Цикл
				
				ТекстСкрипта = ТекстСкрипта+"
					|// PLAN ROUTES
					|var pointList2 = [];";
				
				Для каждого СтрМаршрут Из СтрокаЗаданиеВодителю.Маршрут Цикл
					ТекстСкрипта = ТекстСкрипта+СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"					
						|pt = new OpenLayers.LonLat(%1,%2);
						|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
						|pointList2.push(new OpenLayers.Geometry.Point(pt.lon, pt.lat));",
						ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(СтрМаршрут.Долгота),
						ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(СтрМаршрут.Широта));				
				КонецЦикла;
					
				НомерПункта = 1;					
				Для каждого СтрСостав Из СтрокаЗаданиеВодителю.Состав Цикл
										
					НадписьHTML = "<div style=""font:Courier New; font-size:12px; width:190px; height:90px; text-align:left; word-wrap:break-word;"">"
								  + "<b>Пункт № "+НомерПункта+"</b><br>"
								  + "Адрес: "+СтрЗаменить(СтрСостав.АдресДоставкиПредставление,"'","\'")+"<br>"
								  + "Время с "+Формат(СтрСостав.ПрибытиеПлан,"ДФ=HH:mm")+" по "+Формат(СтрСостав.УбытиеПлан,"ДФ=HH:mm")+"</div>";
						
					ТекстСкрипта = ТекстСкрипта+"
						|pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(СтрСостав.Долгота)
							+ ", "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(СтрСостав.Широта) + ");
						|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
						|var size = new OpenLayers.Size(21,25);
						|var offset = new OpenLayers.Pixel(-(size.w/2), -size.h);
						|var icon = new OpenLayers.Icon('"+ВебСсылкаСервер+"img/marker.png',size,offset);
						|
						|marker = new OpenLayers.Marker(pt,icon);
						|
						|marker.events.on({
						|	""mousedown"": function(event) { 			
						|	var pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(СтрСостав.Долгота)
							+ ", " + ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(СтрСостав.Широта) + ");
						|	pt.transform(m_map.displayProjection, m_map.getProjectionObject());			
						|	popup = new OpenLayers.Popup(""chicken"",
						|	   pt,
						|	   new OpenLayers.Size(200,100),
						|	   '"+НадписьHTML+"'"+",			
						|	   true);			
						|	m_map.addPopup(popup);			
						|	OpenLayers.Event.stop(event); 			
						|	}			
						|});
						|	markersLayer.addMarker(marker);
						|";
						
					НомерПункта = НомерПункта+1;	
				
				КонецЦикла;				
				
				ВебЦветМаршрута = "ff0000";
		
				ТекстСкрипта = ТекстСкрипта+"
					|var LineString = new OpenLayers.Geometry.LineString(pointList2);
					|var lineFeature = new OpenLayers.Feature.Vector(
					|                LineString,null,{
					|                strokeColor: ""#"+ВебЦветМаршрута+""",
					|                strokeWidth: 3,
					|				 strokeOpacity: 0.8,
					|                strokeDashstyle: ""solid"",
					|				 strokeLinecap: ""round"",
					|                pointRadius: 6,
					|                pointerEvents: ""visiblePainted""
					|});
					|var find_lays = m_map.getLayersByName(""Geometry"");
					|var vectorLayer = null;
					|if (find_lays.length == 0) {
					|	vectorLayer = new OpenLayers.Layer.Vector(""Geometry"", {displayInLayerSwitcher: false});
					|	m_map.addLayer(vectorLayer);
					|}
					|else {vectorLayer = find_lays[0];}
					|Features.push(lineFeature);
					|vectorLayer.addFeatures(Features);
				    |";
			
			КонецЦикла;						
		
		КонецЕсли;					
	
	КонецЦикла;
	
	
	Возврат ТекстСкрипта;		

КонецФункции // ПолучитьСкриптМаршрутыОбъектов


&НаСервере
Функция ПолучитьСкриптЗаправкиИСливы(МассивОбъектов, НачДата, КонДата)
    	
	ТекстСкрипта = "";
	
	КрайниеЗначенияКоординат = Новый Структура("МинШирота,МаксШирота,МинДолгота,МаксДолгота");	
	
	Для ИндексМассива = 0 По МассивОбъектов.Количество()-1 Цикл
		ТекущийОбъект = МассивОбъектов[ИндексМассива];
						
		
		ТекстОшибки = "";
		ТаблицаДанные = Неопределено;
		ТаблицаЗаправки = Неопределено;
	
		пПараметры = Новый Структура;
		пПараметры.Вставить("НачПериода", НачДата);
		пПараметры.Вставить("КонПериода", КонДата);
		пПараметры.Вставить("Объект", 	  ТекущийОбъект);
		пПараметры.Вставить("Метод", 	  "Пробег");
		Если НЕ ItobОбработкаДанныхТопливоВызовСервера.ПолучитьДанныеТопливо(пПараметры, ТаблицаДанные, ТаблицаЗаправки, ТекстОшибки,) Тогда
		 	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Объект "+СокрЛП(ТекущийОбъект)+": "+ТекстОшибки);
			Продолжить;		
		
		КонецЕсли;
				
		ТекстСкрипта = ТекстСкрипта + "
		    |
			|playRouteLayer.removeAllFeatures();
			|
			|var pointList = [];
			|var pt = null;
			|var Features = [];
			|markersLayer.clearMarkers();
			|var ParckFeatures = [];";
		
		ТекущийОбъектОтображение = ItobОбщегоНазначенияСервер.ПолучитьНастройкиОтображенияОбъектов(ТекущийОбъект);	
		ЦветМаршрута = ItobОбщегоНазначенияКлиентСервер.ПолучитьЦветПоЗначениюХранения(
			ТекущийОбъектОтображение.ЦветМаршрутаНаКарте);		//Новый Цвет(50, 225, 50);
		ВебЦветМаршрута = Из_10_В_Любую(ЦветМаршрута.Красный,16)+Из_10_В_Любую(ЦветМаршрута.Зеленый,16)+Из_10_В_Любую(ЦветМаршрута.Синий,16);
		
		НомерСтоянки = 1;		
				
		НомерЗаправки = 1;
		НомерСлива = 1;
		
		Для каждого СтрСливыЗаправки Из ТаблицаЗаправки Цикл
			
			Если КрайниеЗначенияКоординат.МинШирота=Неопределено Тогда
				КрайниеЗначенияКоординат.МинШирота   = СтрСливыЗаправки.Широта;
				КрайниеЗначенияКоординат.МаксШирота  = СтрСливыЗаправки.Широта;
				КрайниеЗначенияКоординат.МинДолгота  = СтрСливыЗаправки.Долгота;
				КрайниеЗначенияКоординат.МаксДолгота = СтрСливыЗаправки.Долгота;
				
			Иначе
				КрайниеЗначенияКоординат.МинШирота   = Мин(КрайниеЗначенияКоординат.МинШирота,СтрСливыЗаправки.Широта);
				КрайниеЗначенияКоординат.МаксШирота  = МАКС(КрайниеЗначенияКоординат.МаксШирота,СтрСливыЗаправки.Широта);
				КрайниеЗначенияКоординат.МинДолгота  = Мин(КрайниеЗначенияКоординат.МинДолгота,СтрСливыЗаправки.Долгота);
				КрайниеЗначенияКоординат.МаксДолгота = МАКС(КрайниеЗначенияКоординат.МаксДолгота,СтрСливыЗаправки.Долгота);
			
			КонецЕсли;
			
			Если СтрСливыЗаправки.ТопливоИзменение < 0 Тогда
				Строка1 = НСтр("ru = 'Слив №'")+" "+НомерСлива+ " ("+Формат(-СтрСливыЗаправки.ТопливоИзменение,"ЧЦ=15")+" л)";
				ИмяИконки = "fill-down.png";
				
				НомерСлива = НомерСлива + 1;
				
			Иначе
				
				Строка1 = НСтр("ru = 'Заправка №'")+" "+НомерЗаправки+ " ("+Формат(СтрСливыЗаправки.ТопливоИзменение,"ЧЦ=15")+" л)";
				ИмяИконки = "fill-up.png";
				
				НомерЗаправки = НомерЗаправки + 1;
				
			КонецЕсли;			
			
			Строка2 = "Адрес: "+ItobОперативныйМониторинг.НайтиБлижайшийАдрес(СтрСливыЗаправки.Широта,СтрСливыЗаправки.Долгота);
			Строка3 = "Период "+Формат(СтрСливыЗаправки.Период, "ДФ='dd.MM.yy HH:mm'");
			
			НадписьHTML = 
				"<div style=""font:Courier New; font-size:12px; width:190px; height:90px; text-align:left; word-wrap:break-word;""><b>"
					+Строка1+"</b><br />"
					+Строка2+"<br />"
					+Строка3+"</div>";			
			
			ТекстСкрипта = ТекстСкрипта+"
				|pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(СтрСливыЗаправки.Долгота)
					+", "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(СтрСливыЗаправки.Широта)+");
				|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
				|var size = new OpenLayers.Size(24,24);
				|var offset = new OpenLayers.Pixel(-(size.w/2), -size.h);
				|var icon = new OpenLayers.Icon('"+ВебСсылкаСервер+"images/"+ИмяИконки+"',size,offset);
				|
				|marker = new OpenLayers.Marker(pt,icon);
				|
				|marker.events.on({
				|	""mousedown"": function(event) { 
				|					
				|if (this.popup == null) {
				
				|	var pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(СтрСливыЗаправки.Долгота)
					+", "+ ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(СтрСливыЗаправки.Широта)+");
				|	pt.transform(m_map.displayProjection, m_map.getProjectionObject());
				|	
				|     this.popup = new OpenLayers.Popup(""chicken"",
				|	   pt,
				|	   new OpenLayers.Size(200,100),
				|	   '"+НадписьHTML+"'"+",
				|	   true);
				|     m_map.addPopup(this.popup);
				|     this.popup.show();
				| } else {
				|     this.popup.toggle();
				| }
				| currentPopup = this.popup;
				| OpenLayers.Event.stop(event);
				|	}
				|   
				|});
				|	markersLayer.addMarker(marker);
				|";
			
			НомерСтоянки = НомерСтоянки+1;		
		
		КонецЦикла;
		
		ТекстСкрипта = ТекстСкрипта+"
			|//m_map.zoomToExtent(LineString.getBounds());
			|//===================================================";			
	
	КонецЦикла;
		
	Если КрайниеЗначенияКоординат.МинШирота = Неопределено Тогда
		// Ничего не делаем
		
	ИначеЕсли КрайниеЗначенияКоординат.МинШирота=КрайниеЗначенияКоординат.МаксШирота
		ИЛИ КрайниеЗначенияКоординат.МинДолгота=КрайниеЗначенияКоординат.МаксДолгота Тогда
		
		// Установим только центр карты
		
		ТекстСкрипта = ТекстСкрипта + "
			|var apt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(КрайниеЗначенияКоординат.МинДолгота)
				+", "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(КрайниеЗначенияКоординат.МинШирота)+");
			|apt.transform(m_map.displayProjection, m_map.getProjectionObject());
			|m_map.setCenter(apt, m_map.getZoom());";
			
	Иначе
		
		    ТекстСкрипта = ТекстСкрипта + "
			|var apt1 = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(КрайниеЗначенияКоординат.МинДолгота)
				+", "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(КрайниеЗначенияКоординат.МинШирота)+");
			|apt1.transform(m_map.displayProjection, m_map.getProjectionObject());
			|var apt2 = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(КрайниеЗначенияКоординат.МаксДолгота)
				+", "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(КрайниеЗначенияКоординат.МаксШирота)+");
			|apt2.transform(m_map.displayProjection, m_map.getProjectionObject());
			|bounds = new OpenLayers.Bounds();
			|bounds.extend(apt1);
			|bounds.extend(apt2);
			|m_map.zoomToExtent(bounds);";		
	
	КонецЕсли;	
	
	
	Возврат ТекстСкрипта;		

КонецФункции

// Функция возвращает скрипт для проигрывания маршрута
//
&НаСервере
Функция ПолучитьСкриптПроигратьМаршруты(МассивОбъектов, НачДата, КонДата)
    	
	ТекстСкрипта = 
		"routes_list = [];
		|var pt = null;";
		
	МаксЧислоСекунд = 0;	
	
	Для ИндексМассива = 0 По МассивОбъектов.Количество()-1 Цикл
		ТекущийОбъект = МассивОбъектов[ИндексМассива];
						
		Маршрут = ItobОперативныйМониторинг.СформироватьМаршрутОбъектаМониторинга(ТекущийОбъект, НачДата, КонДата);
		Если Маршрут.Количество() = 0 Тогда
			Продолжить;
		
		КонецЕсли;
		
		ТекстСкрипта = ТекстСкрипта + "
			|var CurrentRoute = [];";
		
		Для Счетчик = 0 По Маршрут.Количество()-1 Цикл
			
			Если Маршрут[Счетчик].Долгота = Неопределено
				ИЛИ Маршрут[Счетчик].Широта = Неопределено Тогда
			
				Продолжить;
			
			КонецЕсли;
			
			ЧислоСекундСНачалаМаршрута = МАКС(Маршрут[Счетчик].Период-НачДата,0);
			МаксЧислоСекунд = МАКС(МаксЧислоСекунд,ЧислоСекундСНачалаМаршрута);
			
			ТекстСкрипта = ТекстСкрипта+"
				|pt = new OpenLayers.LonLat("+Формат(Маршрут[Счетчик].Долгота,"ЧРД=.; ЧН=0")
					+", "+Формат(Маршрут[Счетчик].Широта,"ЧРД=.; ЧН=0")+");
				|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
				|CurrentRoute.push([pt, "+Формат(ЧислоСекундСНачалаМаршрута,"ЧН=0; ЧГ=0")+",'"+Формат(Маршрут[Счетчик].Период,"ДФ='dd.MM.yy HH:mm:ss'")+"']);";			
			
		КонецЦикла;
		
		ТекстСкрипта = ТекстСкрипта+"
			|routes_list.push(CurrentRoute);";					
	
	КонецЦикла;
	
	ТекстСкрипта = ТекстСкрипта+"
		|playRouteLayer.removeAllFeatures();
		|											
		|if (play_route_intervalid != null) {
		|	clearInterval(play_route_intervalid);
		|	play_route_intervalid = null;
		|}
		|				
		|
		|var LayerFeatures = [];
		|
		|routes_list_pos = [];
		|for (var i = 0, len = routes_list.length; i < len; i++) {
		|						
		|	pt = routes_list[i][0][0];					
		|	
		|	var pointFeature = new OpenLayers.Feature.Vector(new OpenLayers.Geometry.Point(pt.lon, pt.lat),null,{
		|						graphicWidth: 21,
		|	                    graphicHeight: 25,
		|	                    graphicXOffset: -10,
		|	                    graphicYOffset: -25,
		|	                    externalGraphic: """+ВебСсылкаСервер+"img/marker-gold.png"",
		|	                    graphicOpacity: 1,
		|	                    fontSize: ""11px"",
		|	                    fontWeight: ""normal"",
		|	                    fontColor: ""0000ff"",
		|	                    labelYOffset: 12,
		|	                    labelXOffset: 12,
		|						labelAlign: ""lm"",
		|						labelHTMLFormat: true,				
		|	                    label : """"
		|	});
		|	LayerFeatures.push(pointFeature);
		|	
		|	routes_list_pos.push([0, pointFeature]);
		|}
		|
		|playRouteLayer.addFeatures(LayerFeatures);
		|
		|play_route_sec = 0;
		|play_route_max = "+Формат(МаксЧислоСекунд,"ЧН=0; ЧГ=0")+";
		|play_route_k = "+Формат(КоэффициентУскоренияПроигрываниеМаршрута,"ЧН=0; ЧГ=0")+";
		|play_route_start_date = new Date("+Формат(Год(НачДата),"ЧГ=0")+","+Формат(Месяц(НачДата)-1,"ЧН=0; ЧГ=0")+","+День(НачДата)+","+Час(НачДата)+","+Минута(НачДата)+","+Секунда(НачДата)+",0);
		|play_route_pause = false;
		|play_route_intervalid = setInterval(PlayRouteHandlier, 100);		
		|play_route_progress = 0;
		|";	
	
	Возврат ТекстСкрипта;		

КонецФункции // ПолучитьСкриптПроигратьМаршруты

// Установка пометки подчиненных элементов дерева.
//
&НаКлиенте
Процедура УстановитьПометкиПодчиненных(СтрокаРодитель, ТекстАлгоритма, Параметры)

	Пометка     = СтрокаРодитель.Пометка;
	Подчиненные = СтрокаРодитель.ПолучитьЭлементы();

	Если Подчиненные.Количество() > 0 Тогда
		Для Каждого ТекСтрока Из Подчиненные Цикл
			ТекСтрока.Пометка = Пометка;
			
			УстановитьПометкиПодчиненных(ТекСтрока, ТекстАлгоритма, Параметры);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // УстановитьПометкиПодчиненных()

// Установка пометки родителей дерева.
//
&НаКлиенте
Процедура УстановитьПометкиРодителей(Родитель)

	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Пометка = Родитель.Пометка;
	
	ВложенныеЭлементыСтроки = Родитель.ПолучитьЭлементы();
	
	Если ВложенныеЭлементыСтроки.Количество() > 0 Тогда

		НайденыВключенные  = Ложь;
		НайденыВыключенные = Ложь;

		Для Каждого Строка Из ВложенныеЭлементыСтроки Цикл
	        Если Строка.Пометка = 0 Тогда
				НайденыВыключенные = Истина;
			ИначеЕсли Строка.Пометка = 1 ИЛИ Строка.Пометка = 2 Тогда
				НайденыВключенные  = Истина;
			КонецЕсли; 
			Если НайденыВключенные И НайденыВыключенные Тогда
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		
		Если НайденыВключенные И НайденыВыключенные Тогда
			Пометка = 2;
		ИначеЕсли НайденыВключенные И (Не НайденыВыключенные) Тогда
			Пометка = 1;
		ИначеЕсли (Не НайденыВключенные) И НайденыВыключенные Тогда
			Пометка = 0;
		ИначеЕсли (Не НайденыВключенные) И (Не НайденыВыключенные) Тогда
			Пометка = 2;
		КонецЕсли;

	КонецЕсли; 

	Родитель.Пометка = Пометка;
	УстановитьПометкиРодителей(Родитель.ПолучитьРодителя());
	
КонецПроцедуры // УстановитьПометкиРодителей()

// Установка пометок.
//
&НаКлиенте
Процедура УстановитьПометки(ТекущиеДанные, ТекстАлгоритма = "", Параметры = Неопределено)

	УстановитьПометкиПодчиненных(ТекущиеДанные, ТекстАлгоритма, Параметры);
	УстановитьПометкиРодителей(ТекущиеДанные.ПолучитьРодителя());

КонецПроцедуры // УстановитьПометки()

// Процедура заполняет массив подчиненных строк дерева объектов.
//
&НаКлиенте
Процедура СобратьОтмеченныеОбъектыДерева(Родитель, МассивОбъектов)
	
	Для каждого СтрокаДерева Из Родитель.ПолучитьЭлементы() Цикл
		Если (СтрокаДерева.Пометка = 1) И (НЕ СтрокаДерева.ЭтоГруппа) Тогда
			МассивОбъектов.Добавить(СтрокаДерева);	
			
		ИначеЕсли СтрокаДерева.ПолучитьЭлементы().Количество() > 0 Тогда
			СобратьОтмеченныеОбъектыДерева(СтрокаДерева, МассивОбъектов);	
		
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры // СобратьОтмеченныеОбъектыДерева()

// Действия при изменении флажка дерева объектов.
//
&НаКлиенте
Процедура ПриИзмененииФлажкаДереваОбъектов(ТекущиеДанные)
		
	Если ТекущиеДанные.Пометка = 2 Тогда
		ТекущиеДанные.Пометка = 0;
	
	КонецЕсли;
	
	ТекстАлгоритма = "Отказ = Ложь;";
	
	УстановитьПометки(ТекущиеДанные, ТекстАлгоритма, Истина);

КонецПроцедуры // ПриИзмененииФлажкаДереваОбъектов()

// Процедура изменяет пометки дерева объектов.
//
&НаКлиенте
Процедура ИзменитьПометкиДереваОбъектов(ЭлементДерево, НовЗначение)
	
	Для Каждого СтрокаДерева Из ЭлементДерево.ПолучитьЭлементы() Цикл
		СтрокаДерева.Пометка = НовЗначение;
		УстановитьПометки(СтрокаДерева, "", Истина);	
	КонецЦикла;

КонецПроцедуры // ИзменитьПометкиДереваОбъектов()

// Процедура разворачивает дерево объектов мониторинга.
//
&НаКлиенте
Процедура РазвернутьДеревоОбъектовМониторинга()
    	
	ЭлементыДерева = ДеревоОбъектовМониторинга.ПолучитьЭлементы();
	Для Каждого Элемент Из ЭлементыДерева Цикл

		Элементы.ДеревоОбъектовМаршруты.Развернуть(Элемент.ПолучитьИдентификатор(), Истина);
		Элементы.ДеревоОбъектовМониторинга.Развернуть(Элемент.ПолучитьИдентификатор(), Истина);

	КонецЦикла;

КонецПроцедуры // РазвернутьДеревоОбъектовМониторинга()

// Процедура выполняет скрипт на поле HTML, с учетом вида браузера.
//
&НаКлиенте
Процедура ВыполнитьСкрипт(ТекстСкрипта)
			
	ItobОперативныйМониторингКлиент.ВыполнитьСкриптНаПолеHTML(Элементы.ПолеHTML, ТекстСкрипта);

КонецПроцедуры // ВыполнитьСкрипт()

// Функция возвращает признак загрузки HTML документа.
//
&НаКлиенте
Функция КартаЗагружена()
	Возврат ItobОбщегоНазначенияКлиент.КартаЗагружена(Элементы.ПолеHTML);
КонецФункции // КартаЗагружена()

// Функция возвращает имя файла иконки для обозначения объекта
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяИконки(ЗначениеХранения)
	СоответствиеИмен = ItobВызовСервераПовтИсп.ПолучитьИменаИконок();
	Картинка = СоответствиеИмен.Получить(ЗначениеХранения);
	
	Если Картинка = Неопределено Тогда
		Картинка = "truck.png";	
	КонецЕсли;
	
	Возврат Картинка;
КонецФункции // ПолучитьИмяИконки()

// Отображает на карте текущие объекты мониторинга
//
&НаКлиенте
Процедура ПоказатьНаКартеТекущиеОбъекты(ОбновитьТолькоЦентрКарты=Ложь) 
	
	Если НЕ КартаЗагружена() Тогда
		Возврат;
	
	КонецЕсли;
	
	Если ТекущийРежим <> 0 И ТекущийРежим <> 100 Тогда
		Возврат;
	
	КонецЕсли;
	
	ТекстСкрипта = "";
	
	Если НЕ ОбновитьТолькоЦентрКарты Тогда
		
		МассивОтмеченныхСтрок = Новый Массив;
		СобратьОтмеченныеОбъектыДерева(ДеревоОбъектовМониторинга, МассивОтмеченныхСтрок);
		
		ТекстСкрипта = ТекстСкрипта + "
			|geometryLayer.removeAllFeatures();
			|if (markersLayer.markers != null) {
			|	while(markersLayer.markers.length > 0) {
			|   	var cur_marker = markersLayer.markers[0];			
			|   	OpenLayers.Util.removeItem(markersLayer.markers, cur_marker);
			|		cur_marker.destroy();
			|		cur_marker = null;			
			|	}
			|}
			|var Features = new Array;
			|";
			
		Для каждого СтрокаОбъектов Из МассивОтмеченныхСтрок Цикл
			
			Если СтрокаОбъектов.Широта = 0
				ИЛИ СтрокаОбъектов.Долгота = 0 Тогда
				
			    Продолжить;
			
			КонецЕсли;
													
			Если СтрокаОбъектов.ОбъектВДвижении Тогда				
				
				ТекстСкрипта = ТекстСкрипта + "
					|var pointList = [];
					|var pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(СтрокаОбъектов.Долгота)
						+", "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(СтрокаОбъектов.Широта)+");
					|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
					|pointList.push(new OpenLayers.Geometry.Point(pt.lon, pt.lat));
					|					
					|";
					
				Если НЕ СтрокаОбъектов.НеПоказыватьСтрелкуНаправленияДвижения Тогда
					
					НаправлениеБольшойСтрелки = СтрокаОбъектов.Направление;
					ПлечоБольшойСтрелки = 19;
					НаправлениеБольшойСтрелкиРадианы = 3.1415926535897932*НаправлениеБольшойСтрелки/180;
					
					УголОкругленный = 30*Окр(НаправлениеБольшойСтрелки/30,0);
					УголОкругленный = ?(УголОкругленный=360,0,УголОкругленный);			
					ИмяКартинкиБольшойСтрелки = "arrow_"+УголОкругленный+".png";
					
					ТекстСкрипта = ТекстСкрипта + "
						|Features.push(new OpenLayers.Feature.Vector(new OpenLayers.Geometry.Point(pt.lon, pt.lat),
						|		null,{
						|					 graphicWidth: 24,
						|                    graphicHeight: 24,
						|                    graphicXOffset: "+Строка(Цел(-12+ПлечоБольшойСтрелки*Sin(НаправлениеБольшойСтрелкиРадианы)))+",
						|                    graphicYOffset: "+Строка(Цел(-12+2-ПлечоБольшойСтрелки*Cos(НаправлениеБольшойСтрелкиРадианы)))+",
						|                    externalGraphic: """+ВебСсылкаСервер+"images/"+ИмяКартинкиБольшойСтрелки+""",
						|                    graphicOpacity: 1
						|}));
						|";
				
				КонецЕсли;	
					
				ДанныеКрайниеТочки = ItobОбщегоНазначенияКлиентСервер.ПреобразоватьСтрокуВДанныеКрайниеТочки(СтрокаОбъектов.КрайниеТочки);
				
				Для каждого ТекДанные Из ДанныеКрайниеТочки Цикл
										
					Угол = 30*Окр(ТекДанные.Направление/30,0);
					Угол = ?(Угол=360,0,Угол);
					
					ТекстСкрипта = ТекстСкрипта+"				
						|pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТекДанные.Долгота)
							+", "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТекДанные.Широта)+");
						|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
						|pointFeature = new OpenLayers.Feature.Vector(new OpenLayers.Geometry.Point(pt.lon, pt.lat),null,{
						|					 graphicWidth: 16,
						|                    graphicHeight: 16,
						|                    graphicXOffset: -8,
						|                    graphicYOffset: -8,
						|                    externalGraphic: """+ВебСсылкаСервер+"images/pt_"+Угол+".gif"",
						|                    graphicOpacity: 1		
						|});				
						|Features.push(pointFeature);
						|pointList.push(new OpenLayers.Geometry.Point(pt.lon, pt.lat));";
				
				КонецЦикла;
				
				ЦветМаршрута = ItobОбщегоНазначенияКлиентСервер.ПолучитьЦветПоЗначениюХранения(СтрокаОбъектов.ЦветМаршрутаНаКарте);
				ВебЦветМаршрута = Из_10_В_Любую(ЦветМаршрута.Красный,16)+Из_10_В_Любую(ЦветМаршрута.Зеленый,16)+Из_10_В_Любую(ЦветМаршрута.Синий,16);
				
				ТекстСкрипта = ТекстСкрипта+"
					|var LineString = new OpenLayers.Geometry.LineString(pointList);
					|var lineFeature = new OpenLayers.Feature.Vector(
					|                LineString,null,{
					|                strokeColor: ""#"+ВебЦветМаршрута+""",
					|                strokeWidth: 4,
					|				 strokeOpacity: 0.5,
					|                strokeDashstyle: ""solid"",
					|				 strokeLinecap: ""round"",
					|                pointRadius: 6,
					|                pointerEvents: ""visiblePainted""
					|});
					|Features.push(lineFeature);";
					
			
			КонецЕсли;
									
			ТекстСкрипта = ТекстСкрипта+"
				|var pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(СтрокаОбъектов.Долгота)
					+", "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(СтрокаОбъектов.Широта)+");
				|pt.transform(m_map.displayProjection, m_map.getProjectionObject());				
				|Features.push(new OpenLayers.Feature.Vector(new OpenLayers.Geometry.Point(pt.lon, pt.lat),
				|		{id: '"+Формат(СтрокаОбъектов.КодТерминала,"ЧН=0; ЧГ=0")+"'},{
				|                    fontSize: ""13px"",
				|                    fontWeight: ""bold"",
				|                    fontColor: ""Red"",
				|                    labelYOffset: -14,
				|                    label : """+СтрокаОбъектов.ОбъектПредставление+"""
				|}));				
				|var size = new OpenLayers.Size(24,24);
				|var offset = new OpenLayers.Pixel(-(size.w/2), -(size.h/2));				
				|var marker = new OpenLayers.Marker(pt, new OpenLayers.Icon("""+ВебСсылкаСервер+"images/"+ПолучитьИмяИконки(СтрокаОбъектов.ИконкаНаКарте)+""",size,offset));
				|markersLayer.addMarker(marker);
				|";
					
			
		КонецЦикла;

		ТекстСкрипта = ТекстСкрипта+"
			|
			|geometryLayer.addFeatures(Features);
			|			
			|";		
	
	КонецЕсли;

	
	Если ТекущийРежим = 100 И (НЕ ФиксироватьКарту) Тогда
		// Автомасштаб
		
		ТекстСкрипта = ТекстСкрипта+"
			|			
			|var Features = geometryLayer.features;
			|var CurArBounds = null;
			|if (Features.length > 0){
			|	var ArBounds = Features[0].geometry.getBounds().toArray();
			|	for (var i = 1; i < Features.length-1; i++) {
			|		CurArBounds = Features[i].geometry.getBounds().toArray();
			|		ArBounds[0] = Math.min(ArBounds[0],CurArBounds[0]);
			|		ArBounds[1] = Math.min(ArBounds[1],CurArBounds[1]);
			|		ArBounds[2] = Math.max(ArBounds[2],CurArBounds[2]);
			|		ArBounds[3] = Math.max(ArBounds[3],CurArBounds[3]);
			|	}
			|	var NewBounds = new OpenLayers.Bounds(ArBounds[0],ArBounds[1],ArBounds[2],ArBounds[3]);
			|	m_map.zoomToExtent(NewBounds);
			|	if (m_map.getZoom() > 15) { m_map.zoomTo(15); }
			|}
		    |";
		
		
	ИначеЕсли (НЕ ФиксироватьКарту) Тогда
		// Установка центра карты
		
		ТекущиеДанные = Элементы.ДеревоОбъектовМониторинга.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			
			Если НЕ (ТекущиеДанные.ЭтоГруппа ИЛИ ТекущиеДанные.Пометка = 0
				ИЛИ ТекущиеДанные.Широта = 0 ИЛИ ТекущиеДанные.Долгота = 0) Тогда
				
				ТекстСкрипта = ТекстСкрипта+"
					|var pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТекущиеДанные.Долгота)
						+", "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТекущиеДанные.Широта)+");
					|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
					|m_map.setCenter(pt, m_map.getZoom());";			
		
			КонецЕсли;
		
		КонецЕсли;
		
	
	КонецЕсли;	

	// Выполняем скрипт	
	Если Не ПустаяСтрока(ТекстСкрипта) Тогда
		ВыполнитьСкрипт(ТекстСкрипта);
	
	КонецЕсли;	

КонецПроцедуры // ПоказатьНаКартеТекущиеОбъекты()

// Функция возвращает список параметров отчета.
//
&НаКлиенте
Функция СобратьДанныеДляПостроенияОтчета()
	
	Возврат ItobОбщегоНазначенияКлиент.СобратьДанныеДляПостроенияОтчета(ЭтотОбъект);

КонецФункции // СобратьДанныеДляПостроенияОтчета()

// Процедура обрабатывает масштабирование карты.
//
&НаКлиенте
Процедура АвтоматическиМасштабироватьКарту()
    	
	ТекстСкрипта = "";
	Если ТекущийМасштаб <> 0 И ТекущаяШирота <> 0 И ТекущаяДолгота <> 0 Тогда
			
		ТекстСкрипта = 
			"var pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТекущаяДолгота)+", "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТекущаяШирота)+");
			|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
			|m_map.setCenter(pt, "+Формат(ТекущийМасштаб,"ЧГ=0")+");
			|pt = null;";
	
	КонецЕсли;	
	
	Если ТекстСкрипта <> "" Тогда
		ВыполнитьСкрипт(ТекстСкрипта);
	
	КонецЕсли;

КонецПроцедуры // АвтоматическиМасштабироватьКарту()

// Процедура обрабатывает выбор карты и масштабирует по текущему масштабу.
//
&НаКлиенте
Процедура ОбработатьВыборКарты(НомерВыбраннойКарты)
	
	ИзменитьПодменюВыбораМестоположенияНаСервере(НомерВыбраннойКарты);
		
	АвтоматическиМасштабироватьКарту();
	
КонецПроцедуры // ОбработатьВыборКарты()

// Показывает маршрут, обработчик расшифровки отчетов
//
&НаКлиенте
Процедура ПоказатьМаршрутПоСтруктуреДанных(СтруктураДанных)
	
	РежимРаботы = 1;
	
	НачатьРежимОтображенияМаршрута();
	
	Объект.ДатаНачала    = СтруктураДанных.НачПериода;
	Объект.ДатаОкончания = СтруктураДанных.КонПериода;

	
	УстановитьПометкуДляОбъекта(СтруктураДанных.Объект, ДеревоОбъектовМониторинга.ПолучитьЭлементы()); 

	Элементы.ДеревоОбъектовМаршруты.ТекущаяСтрока = ПолучитьИдентификаторПоОбъекту(СтруктураДанных.Объект, ДеревоОбъектовМониторинга.ПолучитьЭлементы(),0);
	
	ПоказатьМаршрутыНаКарте(Неопределено);
    	
КонецПроцедуры // ПоказатьМаршрутПоСтруктуреДанных()

// Функция возвращает идентификатор текущего объекта в дереве объектов.
//
&НаКлиенте
Функция ПолучитьИдентификаторПоОбъекту(Объект, ЭлементыДерева, НайденныйИдентификатор)
		
	Рез = Ложь;

	Для Каждого Элемент Из ЭлементыДерева Цикл
		
		Если Элемент.Объект = Объект Тогда				
			Рез = Истина;
			НайденныйИдентификатор = Элемент.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
		
		Если Элемент.ПолучитьЭлементы().Количество() > 0 Тогда 
			
			Рез = ПолучитьИдентификаторПоОбъекту(Объект, Элемент.ПолучитьЭлементы(), НайденныйИдентификатор);				
			
			Если Рез Тогда
				Прервать;	
			КонецЕсли;
			
		КонецЕсли;				
		
	КонецЦикла;

	Возврат Рез;

КонецФункции // ПолучитьИдентификаторПоОбъекту()

// Процедура устанавливает пометку в дереве для текущего объекта.
//
&НаКлиенте
Процедура УстановитьПометкуДляОбъекта(Объект, ЭлементыДерева)
		
	Для Каждого Элемент Из ЭлементыДерева Цикл
		Если Элемент.ЭтоГруппа = Истина Тогда 
			УстановитьПометкуДляОбъекта(Объект, Элемент.ПолучитьЭлементы());
		Иначе
			Если Элемент.Объект = Объект Тогда
				Элемент.Пометка = Истина;
				УстановитьПометкиРодителей(Элемент);
			Иначе
				Элемент.Пометка = Ложь;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры // УстановитьПометкуДляОбъекта()
 
// Процедура запускает обновление дерева объектов мониторинга с периодичностью.
//
&НаКлиенте
Процедура ВключитьОбновлениеДанныхОбъектовРежимСлежения()

	ОбновлениеДанныхОбъектовРежимСлежения();
	ПодключитьОбработчикОжидания("ОбновлениеДанныхОбъектовРежимСлежения", 30, Ложь); 
	
КонецПроцедуры // ВключитьОбновлениеДанныхОбъектовРежимСлежения()

// Процедура отключает обновление данных объектов мониторинга.
//
&НаКлиенте
Процедура ОтключитьОбновлениеДанныхОбъектовРежимСлежения()
	
	ОтключитьОбработчикОжидания("ОбновлениеДанныхОбъектовРежимСлежения");
	
КонецПроцедуры // ОтключитьОбновлениеДанныхОбъектовРежимСлежения()
 
// Процедура запускает обновление дерева объектов мониторинга с периодичностью.
//
&НаКлиенте
Процедура ВключитьОбновлениеДанныхОбъектовРежимМаршрутов()

	ОбновлениеДанныхОбъектовРежимМаршрутов();
	ПодключитьОбработчикОжидания("ОбновлениеДанныхОбъектовРежимМаршрутов", 120, Ложь); 
	
КонецПроцедуры // ВключитьОбновлениеДанныхОбъектовРежимМаршрутов()

// Процедура отключает обновление данных объектов мониторинга.
//
&НаКлиенте
Процедура ОтключитьОбновлениеДанныхОбъектовРежимМаршрутов()
	
	ОтключитьОбработчикОжидания("ОбновлениеДанныхОбъектовРежимМаршрутов");
	
КонецПроцедуры // ОтключитьОбновлениеДанныхОбъектовРежимМаршрутов()

// Процедура заполняет заполняет и разворачивает дерево объектов мониторинга.
//
&НаКлиенте
Процедура ОбновлениеДанныхОбъектовРежимСлежения()

	Если ТекущийРежим <> 0
		И ТекущийРежим <> 100 Тогда
		Возврат;
	
	КонецЕсли;	
	
	Если ДеревоОбъектовМониторинга.ПолучитьЭлементы().Количество() > 0 Тогда
		// Уже заполнено, надо обновить данные
		ЕстьИзменения = Ложь;
		ОбновитьДанныеДереваОбъектовМониторинга(ЕстьИзменения);
		Если ЕстьИзменения Тогда
			ПоказатьНаКартеТекущиеОбъекты();
			ПодключитьОбработчикОжидания("ОпределитьИЗаполнитьМестоположение",0.1 ,Истина);
		КонецЕсли;
		
	Иначе
		ЗаполнитьДеревоОбъектовМониторинга();
		РазвернутьДеревоОбъектовМониторинга();
		
		ПоказатьНаКартеТекущиеОбъекты();
	
	КонецЕсли;	
		
КонецПроцедуры // ОбновлениеДанныхОбъектовРежимСлежения()

// Процедура заполняет заполняет и разворачивает дерево объектов мониторинга в режиме 
// построения маршрутов.
//
&НаКлиенте
Процедура ОбновлениеДанныхОбъектовРежимМаршрутов()
	
	Если ТекущийРежим <> 1 Тогда
		Возврат;
	
	КонецЕсли;
			
	Если ДеревоОбъектовМониторинга.ПолучитьЭлементы().Количество() > 0 Тогда
		// Уже заполнено, надо обновить данные
		ЕстьИзменения = Ложь;
		ОбновитьДанныеДереваОбъектовМониторинга(ЕстьИзменения);		
		
	Иначе
		ЗаполнитьДеревоОбъектовМониторинга();
		РазвернутьДеревоОбъектовМониторинга();
		
	КонецЕсли;
	
КонецПроцедуры // ОбновлениеДанныхОбъектовРежимМаршрутов()

// Процедура обновляет содержимое поля HTML
//
&НаКлиенте
Процедура ОбновитьПолеHTML()

	ВыполнитьСкрипт("location.reload(true);");

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЗаправкиСливыПоСтруктуреДанных(СтруктураДанных)

	РежимРаботы = 4;
	
	НачатьРежимЗаправкиИСливы();
	
	Объект.ДатаНачала    = СтруктураДанных.НачПериода;
	Объект.ДатаОкончания = СтруктураДанных.КонПериода;

	
	УстановитьПометкуДляОбъекта(СтруктураДанных.Объект, ДеревоОбъектовМониторинга.ПолучитьЭлементы()); 

	Элементы.ДеревоОбъектовТопливо.ТекущаяСтрока = ПолучитьИдентификаторПоОбъекту(СтруктураДанных.Объект, ДеревоОбъектовМониторинга.ПолучитьЭлементы(),0);
	
	ПоказатьЗаправкиИСливы(Неопределено);	

КонецПроцедуры

// Процедура обработчик ожидания при активации строки
&НаКлиенте
Процедура ОбновитьТрекМаршрута()
	ОбновитьТаблицуИстории(Неопределено);
КонецПроцедуры // ОбновитьТрекМаршрута()

// Общая процедура для открытия окна отчета
//
&НаКлиенте
Процедура ОткрытьФормуОтчета(ИмяФормыОтчета, ДопПараметры = Неопределено, Уникальность = Истина)
	ПараметрыОтчета = СобратьДанныеДляПостроенияОтчета();
	Если ПараметрыОтчета = Неопределено Тогда
	 	Возврат;
	КонецЕсли;
	Если ТипЗнч(ДопПараметры) = Тип("СписокЗначений") Тогда
	    Для Каждого Параметр Из ДопПараметры Цикл
			ПараметрыОтчета.СписокПараметров.Добавить(Параметр.Значение, Параметр.Представление);			
		КонецЦикла; 
	КонецЕсли;
	Идентификатор = ?(Уникальность,Новый УникальныйИдентификатор(),Неопределено);
	ОткрытьФорму(ИмяФормыОтчета, ПараметрыОтчета,,Идентификатор);
КонецПроцедуры // ОткрытьФормуОтчета()
 
#КонецОбласти

#Область ПроцедурыУправленияРежимамиОтображения

#Область ОбщиеПроцедурыУправленияРежимами

// Прекращает все режимы
//
&НаКлиенте
Процедура ЗакончитьВсеРежимы()
	
	ПоказыватьПанельИстории = Ложь;
	Если ТекущийРежим = 0 Тогда      // On-line слежение
		ЗакончитьРежимСлежения();
		
	ИначеЕсли ТекущийРежим = 1 Тогда // Построение маршрутов
		ЗакончитьРежимОтображенияМаршрута();
			
	ИначеЕсли ТекущийРежим = 4 Тогда // Заправки и сливы
		ЗакончитьРежимЗаправкиИСливы();
				
	КонецЕсли;
	
	ТекущийРежим = -1;

КонецПроцедуры // ЗакончитьВсеРежимы()

#КонецОбласти

#Область РежимСлежения

// Инициализация режима слежения
//
&НаКлиенте
Процедура НачатьРежимСлежения()

	ЗакончитьВсеРежимы();
	
	ТекущийРежим = 0;
	Элементы.ПанельЗакладок.ТекущаяСтраница = Элементы.ПанельЗакладок.ПодчиненныеЭлементы[ТекущийРежим];
	Элементы.КнопкаOnLineСлежение.Пометка = Истина;
		
	ВключитьОбновлениеДанныхОбъектовРежимСлежения();
	
	ПоказыватьПанельИстории = Истина;
	
КонецПроцедуры // НачатьРежимСлежения()

&НаКлиенте
Процедура ПоказатьОбъектыОнлайнСлежения()

	ПоказатьНаКартеТекущиеОбъекты();	

КонецПроцедуры


// Конец режима слежения
//
&НаКлиенте
Процедура ЗакончитьРежимСлежения()

	
	ТекущийРежим = -1;
	Элементы.КнопкаOnLineСлежение.Пометка = Ложь;
	
	ОтключитьОбновлениеДанныхОбъектовРежимСлежения();
	
	ТекстСкрипта = 
		"geometryLayer.removeAllFeatures();
		|historyLayer.removeAllFeatures();
		|markersLayer.clearMarkers();";
		
	ВыполнитьСкрипт(ТекстСкрипта);	
	 
КонецПроцедуры // ЗакончитьРежимСлежения()
	
#КонецОбласти

#Область РежимМаршрута

// Инициализация режима отображения маршрута
//
&НаКлиенте
Процедура НачатьРежимОтображенияМаршрута()
	
	ЗакончитьВсеРежимы();
		
	ВключитьОбновлениеДанныхОбъектовРежимМаршрутов();

	ТекущийРежим = 1;
	
	Элементы.ПанельЗакладок.ТекущаяСтраница = Элементы.ПанельЗакладок.ПодчиненныеЭлементы[ТекущийРежим];
	Элементы.КнопкаПостроениеМаршрутов.Пометка = Истина;
		
	ФлагПаузаПроигрыванияМаршрута = Ложь;
	
	Элементы.ИсторияОбъектаПодменюВыборПериода.Видимость = Ложь;
	
	ПоказыватьПанельИстории = Истина;
	
КонецПроцедуры // НачатьРежимОтображенияМаршрута()

// Конец режима отображения маршрута
//
&НаКлиенте
Процедура ЗакончитьРежимОтображенияМаршрута()
	
	ТекущийРежим = -1;
	
	Элементы.КнопкаПостроениеМаршрутов.Пометка = Ложь;
	
	ОтключитьОбновлениеДанныхОбъектовРежимМаршрутов();
	
	ТекстСкрипта = 
		"geometryLayer.removeAllFeatures();
		|playRouteLayer.removeAllFeatures();
		|markersLayer.clearMarkers();
		|
		|if (play_route_intervalid != null) {
		|	StopPlayRoute();
		|}
        |";
			
	ВыполнитьСкрипт(ТекстСкрипта);
		
	Элементы.ИсторияОбъектаПодменюВыборПериода.Видимость = Истина;
	
КонецПроцедуры // ЗакончитьРежимОтображенияМаршрута()
	
#КонецОбласти

#Область РежимРасчетаМаршрута

// Инициализация режима расчета маршрута
//
&НаКлиенте
Процедура НачатьРежимРежимРасчетаМаршрута()
	
    ЗакончитьВсеРежимы();
		
	ТекущийРежим = 3;
	
	ДеталиМаршрута = "";
	
	ТекстСкрипта = 
		"disable_double_click_control.activate();
        |";	
	ВыполнитьСкрипт(ТекстСкрипта);
	
	Элементы.ПанельЗакладок.ТекущаяСтраница = Элементы.ПанельЗакладок.ПодчиненныеЭлементы[ТекущийРежим];
	Элементы.КнопкаРасчетМаршрута.Пометка = Истина;
	
	Если Элементы.ГруппаПанельИстории.Видимость Тогда
		ТекущееПоложениеКарты = ПолучитьТекущееПоложениеКарты();		
		Элементы.ГруппаПанельИстории.Видимость = Ложь;
		ПодключитьОбработчикОжидания("ВосстановитьТекущееПоложениеКарты", 0.5, Истина);
	КонецЕсли;
			
	мМассивТочекВыбора = Новый Массив;
		
КонецПроцедуры // НачатьРежимРежимРасчетаМаршрута()

#КонецОбласти 

#Область РежимЗаправкиИСливы

// Инициализация режима заправок и сливов
//
&НаКлиенте
Процедура НачатьРежимЗаправкиИСливы()
	
    ЗакончитьВсеРежимы();
		
	ТекущийРежим = 4;
	
	Элементы.ПанельЗакладок.ТекущаяСтраница = Элементы.ПанельЗакладок.ПодчиненныеЭлементы[ТекущийРежим];
	
	Если Элементы.ГруппаПанельИстории.Видимость Тогда
		Элементы.ГруппаПанельИстории.Видимость = Ложь;
	КонецЕсли;
		
КонецПроцедуры // НачатьРежимРежимРасчетаМаршрута()

// Конец режима заправок и сливов
//
&НаКлиенте
Процедура ЗакончитьРежимЗаправкиИСливы()

	ТекущийРежим = -1;
	
	ТекстСкрипта = 
		"geometryLayer.removeAllFeatures();
		|markersLayer.clearMarkers();
        |";
			
	ВыполнитьСкрипт(ТекстСкрипта);

КонецПроцедуры // ЗакончитьРежимЗаправкиИСливы()

#КонецОбласти 

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события "ПриСозданииНаСервере".
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КартаДоступна = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 10
	               |	ItobМестоположенияПоУмолчанию.Ссылка КАК Ссылка,
	               |	ItobМестоположенияПоУмолчанию.Код,
	               |	ItobМестоположенияПоУмолчанию.Представление КАК Представление,
	               |	ItobМестоположенияПоУмолчанию.Наименование КАК Наименование,
	               |	ItobМестоположенияПоУмолчанию.Масштаб,
	               |	ItobМестоположенияПоУмолчанию.Широта,
	               |	ItobМестоположенияПоУмолчанию.Долгота
	               |ИЗ
	               |	Справочник.ItobМестоположенияПоУмолчанию КАК ItobМестоположенияПоУмолчанию
	               |ГДЕ
	               |	ItobМестоположенияПоУмолчанию.Широта <> 0
	               |	И ItobМестоположенияПоУмолчанию.Долгота <> 0
	               |	И ItobМестоположенияПоУмолчанию.Масштаб <> 0
	               |	И (НЕ ItobМестоположенияПоУмолчанию.ПометкаУдаления)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Наименование";
				   
	Счетчик = 1;
	
	СохраненноеМестоположение = ItobОбщегоНазначенияСервер.ПрочитатьНастройкуПользователя("НастройкиКарты", "МестоположениеПоУмолчанию");
	ТекущееМестоположение = Неопределено;
	Если ЗначениеЗаполнено(СохраненноеМестоположение) Тогда
		ТекущееМестоположение = СохраненноеМестоположение;
				
	КонецЕсли;
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НовКоманда = ЭтаФорма.Команды.Добавить("НажатиеНаКнопку"+Счетчик+"ВыбораКарты");
		НовКоманда.Действие = "Подключаемый_НажатиеНаКнопкуВыбораКарты";
		НовКоманда.Заголовок = Выборка.Представление;
		НовКоманда.Подсказка = НСтр("ru = 'Выбрать местоположение'")+" "+""+Выборка.Представление+"""";
		
		НовКнопка = ЭтаФорма.Элементы.Добавить(
			"к_"+Выборка.Код, Тип("КнопкаФормы"), ЭтаФорма.Элементы.ПодменюВыборКарты);
		НовКнопка.ИмяКоманды = НовКоманда.Имя;
		НовКнопка.Заголовок = Выборка.Представление;
		
		Счетчик = Счетчик + 1;
		
		Если НЕ ЗначениеЗаполнено(ТекущееМестоположение) Тогда
			ТекущееМестоположение = Выборка.Ссылка;
		
		КонецЕсли;
		
		Если ТекущееМестоположение = Выборка.Ссылка Тогда
			НовКнопка.Пометка = Истина;
			
			ТекущийМасштаб = Выборка.Масштаб;
			ТекущаяШирота = Выборка.Широта;
			ТекущаяДолгота = Выборка.Долгота;			
		
		КонецЕсли;
	
	КонецЦикла;
	
	СпособОптимизацииМаршрута = "Время";
			
	ТекущийРежим = 0;
	
	РежимОткрытия = Неопределено;
	Если Параметры.Свойство("РежимОткрытия", РежимОткрытия) Тогда
		
		Если РежимОткрытия = "OnLineСлежение" Тогда
			ТекущийРежим = 0;
			Элементы.КнопкаOnLineСлежение.Пометка = Истина;
			
		ИначеЕсли РежимОткрытия = "ПостроениеМаршрутов" Тогда
			ТекущийРежим = 1;			
			Элементы.КнопкаПостроениеМаршрутов.Пометка = Истина;			
			
		ИначеЕсли РежимОткрытия = "РасчетМаршрута" Тогда
			ТекущийРежим = 3;			
			Элементы.КнопкаРасчетМаршрута.Пометка = Истина;	
			
		ИначеЕсли РежимОткрытия = "ПутевыеЛисты" Тогда
			ТекущийРежим = 5;			
			
		ИначеЕсли РежимОткрытия = "OnLineСлежениеПолноэкранный" Тогда
			
			ЭтаФорма.Элементы.ГруппаЛеваяПанель.Видимость = Ложь;
			ЭтаФорма.Заголовок = НСтр("ru = 'Полноэкранный режим слежения'");
			
			ФиксироватьКарту = Параметры.ФиксироватьКарту;
			Элементы.КнопкаФиксироватьКарту.Пометка = ФиксироватьКарту;
			ТекущийРежим = 100;
			
			МассивОбъектов = Неопределено;
			Если Параметры.Свойство("МассивОбъектов", МассивОбъектов) Тогда
				МассивОтмеченныхОбъектов = МассивОбъектов;
			
			КонецЕсли;
		
		КонецЕсли;
		
		Если Элементы.ПанельЗакладок.ПодчиненныеЭлементы.Количество()-1 >= ТекущийРежим Тогда
			Элементы.ПанельЗакладок.ТекущаяСтраница = Элементы.ПанельЗакладок.ПодчиненныеЭлементы[ТекущийРежим];			
		
		КонецЕсли;		
	
	КонецЕсли;
	
	КоэффициентУскоренияПроигрываниеМаршрута = 1000;
	
	// Выставления времени согласно персональных настроек пользователя
	ВыставитьВремяСогласноПерсональнымНастройкам();
		
	// Обновляет отображение карты
	ОбновитьОтображениеКарты();
	
	// Подсистема ItobЦентрСпутниковогоМониторинга.КомандыДляТрекеров
	КомандыДляТрекеровПриСозданииНаСервере();	
	
	// Подсистема ItobЦентрСпутниковогоМониторинга.ГеографическиеЗоны
	ГеографическиеЗоныПриСозданииНаСервере();	
	
КонецПроцедуры // ПриСозданииНаСервере()

// Обновляет отображение карты (на сервере)
//
&НаСервере
Процедура ОбновитьОтображениеКарты(ТекстИПараметрыЗапросаУсловия = Неопределено, МассивПомеченныхПунктовНазначения = Неопределено)
	ТекстДопСкрипта = "";
	ItobОбщегоНазначенияСервер.ПоказатьГеографическуюКарту(ЭтаФорма, ТекстДопСкрипта);
КонецПроцедуры

// Выставления времени согласно персональных настроек пользователя
//
&НаСервере
Процедура ВыставитьВремяСогласноПерсональнымНастройкам()
	ПолучитьИнтервалСогласноПерсональнымНастройкам(Объект.ДатаНачала, Объект.ДатаОкончания);
КонецПроцедуры // ВыставитьВремяСогласноПерсональнымНастройкам()

// Получение интервала времени согласно персональных настроек пользователя
//
&НаСервере
Процедура ПолучитьИнтервалСогласноПерсональнымНастройкам(НачалоПериода, КонецПериода)
	ItobОбщегоНазначенияВызовСервера.ПолучитьИнтервалСогласноПерсональнымНастройкам(Объект.ДатаНачала, НачалоПериода, КонецПериода);
КонецПроцедуры // ПолучитьИнтервалСогласноПерсональнымНастройкам()

// Процедура - обработчик события "ПриОткрытии".
// 
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ТекущийРежим = 0  Тогда
		ВключитьОбновлениеДанныхОбъектовРежимСлежения();
	ИначеЕсли ТекущийРежим = 1 Тогда
		ВключитьОбновлениеДанныхОбъектовРежимМаршрутов();
	ИначеЕсли ТекущийРежим = 100 Тогда
		ВключитьОбновлениеДанныхОбъектовРежимСлежения();
		ПодключитьОбработчикОжидания("ПолноэкранныйРежимУстановитьФлажкиДереваОбъектов",0.5,Истина);
	КонецЕсли;
	
	мСчетчикДокументСформирован = 0;
	мПредыдущийРежим = ТекущийРежим;
	
	ТекущийПериодИстории = 1;
	ИсторияОбъектаВыборПериода(ЭтаФорма.Команды.Найти("ИсторияОбъектаВыборПериода1"));	
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗакрытием" формы.
//
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗавершениеРаботы Тогда 
		Если КартаЗагружена() Тогда
			ВыполнитьСкрипт("document.form.result.value = m_map.baseLayer.name;");
			
			ИмяСлоя = Элементы.ПолеHTML.Документ.form.result.value;
			Если Не ПустаяСтрока(ИмяСлоя) Тогда
				СохранитьНастройкуПользователя("НастройкиКарты", "КартаПоУмолчанию", ИмяСлоя);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущееМестоположение) Тогда
			СохранитьНастройкуПользователя("НастройкиКарты", "МестоположениеПоУмолчанию", ТекущееМестоположение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик оповещения формы.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "РежимМаршрута" Тогда
		ПоказатьМаршрутПоСтруктуреДанных(Параметр);
		
	ИначеЕсли ИмяСобытия = "РежимЗаправокСливов" Тогда
		ПоказатьЗаправкиСливыПоСтруктуреДанных(Параметр);
		
	ИначеЕсли ИмяСобытия = "ОбновитьНастройкиФильтровПунктовНазначения" Тогда
		ПодключитьОбработчикОжидания("ОбновитьНастройкиФильтровПунктовНазначения",0.1,Истина);
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовУправленияФормы

// Процедура - обработчик события "ДокументСформирован" поля HTML "ПолеHTML".
//
&НаКлиенте
Процедура ПолеHTMLДокументСформирован(Элемент)
	
	СисИнфо = Новый СистемнаяИнформация;
	
	Если мСчетчикДокументСформирован = 0
		И Найти(СисИнфо.ИнформацияПрограммыПросмотра, "Firefox") <> 0 Тогда
		
		ПодключитьОбработчикОжидания("ОбновитьПолеHTML", 0.1, Истина);
		
	КонецЕсли;
	
	мСчетчикДокументСформирован = мСчетчикДокументСформирован + 1;
	
КонецПроцедуры // ПолеHTMLДокументСформирован()

// Процедура - обработчик события "ПриНажатии" поля HTML "ПолеHTML".
//
&НаКлиенте
Процедура ПолеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
		
	ItobОперативныйМониторингКлиент.ОбработатьНажатиеНаПолеКарты(Элемент, ДанныеСобытия, СтандартнаяОбработка);
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;	
	КонецЕсли;
	
	Если ТекущийРежим = 0 ИЛИ ТекущийРежим = 100 Тогда
		СтрокаСобытия = Элементы.ПолеHTML.Документ.form.event_to_1c.value;
		Если Лев(СтрокаСобытия,14) = "GetTooltipText" Тогда
			ИдентификаторСтроки = Число(Сред(СтрокаСобытия,16));
			СтрокаДерева = ДеревоОбъектовМониторинга.НайтиПоИдентификатору(Число(ИдентификаторСтроки));
			
			СтруктураДанных = Новый Структура("Объект,ОбъектПредставление,АктуальностьДанных,Скорость,Направление,Терминал,ПериодUTC0,ДанныеДатчиков,Широта,Долгота");
			ЗаполнитьЗначенияСвойств(СтруктураДанных, СтрокаДерева);
			
			Элементы.ПолеHTML.Документ.form.result.value = ПолучитьТекстВсплывающейПодсказки(СтруктураДанных);		
		ИначеЕсли Лев(СтрокаСобытия,15) = "SelectBoxResult" Тогда
			// Получение объектов мониторинга в выделенной области
			Элементы.ДеревоОбъектовМониторингаПоказатьВыделенныеНаКартеОбъекты.Пометка = Ложь;
			ИдентификаторСтроки = Сред(СтрокаСобытия,17);
			ОткрытьФорму("Обработка.ItobРабочееМестоДиспетчера.Форма.ВыбранныеОбъектыНаКарте",Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки),,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);			
		КонецЕсли;
		
	ИначеЕсли ТекущийРежим = 1 Тогда
		СтрокаСобытия = Элементы.ПолеHTML.Документ.form.event_to_1c.value;
		Если Лев(СтрокаСобытия,17) = "PlayRouteProgress" Тогда
			ПрогрессПроигрывания = Число(Сред(СтрокаСобытия,19));
			
		КонецЕсли;			
		
	КонецЕсли;	
	
КонецПроцедуры // ПолеHTMLПриНажатии()

// Процедура отчищает обе таблицы в панели истории.
//
// Параметры:
//  Непосредственно - Булево - Если истина, то очищает обе таблицы во что бы то не стало.
//
&НаКлиенте
Процедура ОчиститьПанельИстории(Непосредственно = Ложь)
	Если Не ПереключенРежимРаботы Или Непосредственно Тогда
		ИсторияОбъекта.Очистить();
		ИнтервалыДвижения.Очистить();
	КонецЕсли;
КонецПроцедуры
	
// Процедура - обработчик события "ПриАктивизацииСтроки" дерева значений "ДеревоОбъектов".
//
&НаКлиенте
Процедура ДеревоОбъектовМониторингаПриАктивизацииСтроки(Элемент)
	
	ОчиститьПанельИстории();
	
	Если ТекущийРежим = 0 Тогда		
									
		ДанныеСтроки = Неопределено;
		Если Элементы.ДеревоОбъектовМониторинга.ТекущиеДанные <> Неопределено Тогда
			Если Элементы.ДеревоОбъектовМониторинга.ТекущиеДанные.ЭтоГруппа Тогда
				ЭлементыДерева = ДеревоДатчиков.ПолучитьЭлементы();
				ЭлементыДерева.Очистить();
			Иначе
				ДанныеСтроки = Элементы.ДеревоОбъектовМониторинга.ТекущиеДанные;
				
				ПодключитьОбработчикОжидания("ОпределитьИЗаполнитьМестоположение",0.1 ,Истина);
				
				Если ДанныеСтроки.Пометка = 1 Тогда
					ПодключитьОбработчикОжидания("ОбновитьЦентрКартыРежимСлежения",0.1 ,Истина);
				
				КонецЕсли;
				
				Если ПанельИсторииРазвернута И ИспользоватьАвтообновлениеТаблицыИстории Тогда
					ПодключитьОбработчикОжидания("ОбновитьТрекМаршрута",0.1,Истина);
				КонецЕсли; 
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДанныеСтроки = Неопределено ИЛИ НЕ ДанныеСтроки.Терминал = ТекущийТерминалИстории Тогда
			
			ВыполнитьСкрипт("historyLayer.removeAllFeatures();");
			Если ИспользоватьАвтообновлениеТаблицыИстории И ПоказыватьПанельИстории Тогда
				ОчиститьПанельИстории(Истина);
				ОбновитьТаблицуИстории(Неопределено);				
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДеревоОбъектовМониторингаПриАктивизацииСтроки()

&НаКлиенте
Процедура ОбновитьЦентрКартыРежимСлежения()
	ОбновитьЦентрКартыРежимСлеженияОбщая();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЦентрКартыРежимСлеженияПоказатьОбъект()
	ОбновитьЦентрКартыРежимСлеженияОбщая(16);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЦентрКартыРежимСлеженияОбщая(Масштаб = "m_map.getZoom()")

	ДанныеСтроки = Элементы.ДеревоОбъектовМониторинга.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	
	КонецЕсли;
	
	Если ДанныеСтроки.Пометка = 1 
		И НЕ (ДанныеСтроки.Широта=0 И ДанныеСтроки.Долгота=0) Тогда
				
		ТекстСкрипта = 
			"var apt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ДанныеСтроки.Долгота)
				+", "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ДанныеСтроки.Широта)+");
			|apt.transform(m_map.displayProjection, m_map.getProjectionObject());
			|m_map.setCenter(apt, "+Масштаб+");";
			
		ВыполнитьСкрипт(ТекстСкрипта);	
	
	КонецЕсли;
	
КонецПроцедуры


// Процедура - обработчик события "ПриИзменении".
//
&НаКлиенте
Процедура ДеревоОбъектовМониторингаПометкаПриИзменении(Элемент)
				
	ПодключитьОбработчикОжидания("ПриИзмененииФлажкаДеревоОбъектовМониторинга", 0.1, Истина);
		
КонецПроцедуры // ДеревоОбъектовМониторингаПометкаПриИзменении()

// Процедура - обработчик события "ПриИзменении".
//
&НаКлиенте
Процедура ДеревоОбъектовМаршрутыПометкаПриИзменении(Элемент)
	
	ТекущаяСтрока = ДеревоОбъектовМониторинга.НайтиПоИдентификатору(Элементы.ДеревоОбъектовМаршруты.ТекущаяСтрока);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииФлажкаДереваОбъектов(ТекущаяСтрока);	
	
КонецПроцедуры // ДеревоОбъектовМаршрутыПометкаПриИзменении()

// Процедура - обработчик события "ПриИзменении" панели закладок "ПанельЗакладок".
//
&НаКлиенте
Процедура ПанельЗакладокПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ТекущийРежим = Элемент.ПодчиненныеЭлементы.Индекс(ТекущаяСтраница);
	
КонецПроцедуры // ПанельЗакладокПриСменеСтраницы()

// Процедура - обработчик события "Регулирование" поля "ДатаНачала".
//
&НаКлиенте
Процедура ДатаНачалаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Объект.ДатаНачала = Объект.ДатаНачала + Направление*24*3600;
	
	НачалоПериодаИзменено = Истина;
	
КонецПроцедуры // ДатаНачалаРегулирование()

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	НачалоПериодаИзменено = Истина;
КонецПроцедуры

// Процедура - обработчик события "Регулирование" поля "ДатаОкончания".
//
&НаКлиенте
Процедура ДатаОкончанияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Объект.ДатаОкончания = Объект.ДатаОкончания + Направление*24*3600;	
	
КонецПроцедуры // ДатаОкончанияРегулирование()

// Процедура - обработчик события "ОбработкаВыбора" поля "ДатаОкончания".
//
&НаКлиенте
Процедура ДатаОкончанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = НачалоДня(ВыбранноеЗначение) Тогда
		
		СтандартнаяОбработка = Ложь;
	
		ВыбранноеЗначение = КонецДня(ВыбранноеЗначение);
		Объект.ДатаОкончания = ВыбранноеЗначение;
		
		Элемент.УстановитьГраницыВыделения(1,СтрДлина(Элемент.ТекстРедактирования));
		Элемент.ВыделенныйТекст = Строка(ВыбранноеЗначение);
			
	КонецЕсли;	
	
КонецПроцедуры // ДатаОкончанияОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" элемента формы "ТекущийРежим".
//
&НаКлиенте
Процедура ТекущийРежимПриИзменении(Элемент)
	Если РежимРаботы = мПредыдущийРежим И НЕ РежимРаботы = 0 Тогда
		// Если режим не изменен
		Возврат;
	КонецЕсли;
		
	Если РежимРаботы = 0 Тогда
		Если мПредыдущийРежим = 1 Тогда
			// Сохраняем текущую строку объекта
			ТекущаяСтрока = Неопределено;
			Если Элементы.ДеревоОбъектовМаршруты.ТекущаяСтрока <> Неопределено Тогда
				ТекущаяСтрока = ДеревоОбъектовМониторинга.НайтиПоИдентификатору(Элементы.ДеревоОбъектовМаршруты.ТекущаяСтрока);			
			КонецЕсли;
			
			НачатьРежимСлежения();
			
			Если ТекущаяСтрока <> Неопределено Тогда
				Элементы.ДеревоОбъектовМониторинга.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();					
			КонецЕсли;			
			
		Иначе
			НачатьРежимСлежения();
		
		КонецЕсли;
				
	ИначеЕсли РежимРаботы = 1 Тогда
		
		Если мПредыдущийРежим = 0 Тогда
			// Сохраняем текущую строку объекта
			ТекущаяСтрока = Неопределено;
			Если Элементы.ДеревоОбъектовМониторинга.ТекущаяСтрока <> Неопределено Тогда
				ТекущаяСтрока = ДеревоОбъектовМониторинга.НайтиПоИдентификатору(Элементы.ДеревоОбъектовМониторинга.ТекущаяСтрока);
			КонецЕсли;
			
			НачатьРежимОтображенияМаршрута();
			
			Если ТекущаяСтрока <> Неопределено Тогда
				Элементы.ДеревоОбъектовМаршруты.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();					
			
			КонецЕсли;			
			
		Иначе
			НачатьРежимОтображенияМаршрута();			
		
		КонецЕсли;		
		
	Иначе
		
		// Очистим карту от слоя истории
		ОчиститьКартуОтИстории();
		
		Если РежимРаботы = 4 Тогда
			НачатьРежимЗаправкиИСливы();		
		КонецЕсли;
	КонецЕсли;
	
	ТекстСкрипта = "destroy_geozones_control();
	|var AllGeozonLayer = m_map.getLayersByName(""AllGeozonLayer"");
	|if (AllGeozonLayer.length > 0)
	|{ m_map.removeLayer(AllGeozonLayer[0]); }";
	
	ВыполнитьСкрипт(ТекстСкрипта);
	
	мПредыдущийРежим = РежимРаботы;
	
	Если НЕ Элементы.ГруппаПанельИстории.Видимость И ПоказыватьПанельИстории Тогда
		ТекущееПоложениеКарты = ПолучитьТекущееПоложениеКарты();		
		Элементы.ГруппаПанельИстории.Видимость = Истина;		
		ПодключитьОбработчикОжидания("ПоказатьОбъектыОнлайнСлежения", 0.5, Истина);
	КонецЕсли;
	
	// Для того, что бы не отчищалась панель истории при переходе с одного режима в другой.
	ПереключенРежимРаботы = Истина;
	ПодключитьОбработчикОжидания("ОтключитьПереключенРежимРаботы", 1, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьПереключенРежимРаботы()
	ПереключенРежимРаботы = Ложь;
КонецПроцедуры
 

// Процедура - обработчик события "ПриИзмененииПометки" элемента формы "ДеревоОбъектовТопливо".
//
&НаКлиенте
Процедура ДеревоОбъектовТопливоПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоОбъектовТопливо.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийИд = ТекущиеДанные.ПолучитьИдентификатор();
	ТекущееЗначениеПометки = ТекущиеДанные.Пометка;
	
	// Снимем все пометки дерева
	Для каждого ЭлементДерева Из ДеревоОбъектовМониторинга.ПолучитьЭлементы() Цикл
		ЭлементДерева.Пометка = 0;
		УстановитьПометкиПодчиненных(ЭлементДерева, "Отказ = Ложь;", Неопределено);		
	КонецЦикла;	
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество()=0
		И ТекущееЗначениеПометки > 0 Тогда
		
		ТекущиеДанные.Пометка = 1;
	
	КонецЕсли;	
	
КонецПроцедуры
	
&НаКлиенте
Процедура ДеревоОбъектовМаршрутыПриАктивизацииСтроки(Элемент)
	ОчиститьПанельИстории();
	
	Если НЕ Элемент.ТекущиеДанные = Неопределено И НЕ Элемент.ТекущиеДанные.ЭтоГруппа И ПанельИсторииРазвернута И ИспользоватьАвтообновлениеТаблицыИстории Тогда
		ПодключитьОбработчикОжидания("ОбновитьТрекМаршрута",0.01,Истина);
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти 

#Область КомандыФормы

// Процедура - обработчик команды "АвтомасштабКарты".
//
&НаКлиенте
Процедура АвтомасштабКарты(Команда)
	
	АвтоматическиМасштабироватьКарту();	
	
КонецПроцедуры // АвтомасштабКарты()

// Процедура - обработчик команды "УвеличитьКарту".
//
&НаКлиенте
Процедура УвеличитьКарту(Команда)
			
	ВыполнитьСкрипт("m_map.zoomIn();");	
	
КонецПроцедуры // УвеличитьКарту()

// Процедура - обработчик команды "УменьшитьКарту".
//
&НаКлиенте
Процедура УменьшитьКарту(Команда)
	
	ВыполнитьСкрипт("m_map.zoomOut();");
	
КонецПроцедуры // УменьшитьКарту()

// Процедура - обработчик команды "УстановитьИнтервал".
//
&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	ItobОбщегоНазначенияКлиент.УстановитьИнтервал(Объект, Объект.ДатаНачала, Объект.ДатаОкончания)
КонецПроцедуры // УстановитьИнтервал()

// Процедура - обработчик команды "ПоказатьМаршрутыНаКарте".
//
&НаКлиенте
Процедура ПоказатьМаршрутыНаКарте(Команда)
			
	ТекстСкрипта = 
		"geometryLayer.removeAllFeatures();
		|playRouteLayer.removeAllFeatures();
		|markersLayer.clearMarkers();
		|
		|if (play_route_intervalid != null) {
		|	clearInterval(play_route_intervalid);
		|}
		|";
		
	ВыполнитьСкрипт(ТекстСкрипта);
	
	Если Объект.ДатаНачала = '00010101' ИЛИ Объект.ДатаОкончания = '00010101' Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Не задан период!'"));
		Возврат;
		
	ИначеЕсли Объект.ДатаНачала > Объект.ДатаОкончания Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Некорректный период!'"));
		Возврат;
		
	КонецЕсли;	
	
	МассивОтмеченныхСтрок = Новый Массив;
	СобратьОтмеченныеОбъектыДерева(ДеревоОбъектовМониторинга, МассивОтмеченныхСтрок);

	МассивОбъектов = Новый Массив;
	МассивПробегов = Новый Массив;
	Для каждого СтрокаДерева Из МассивОтмеченныхСтрок Цикл
		МассивОбъектов.Добавить(Новый Структура("Объект,Терминал",СтрокаДерева.Объект,СтрокаДерева.Терминал));
	    МассивПробегов.Добавить(0);
	КонецЦикла;
	
	Если МассивОбъектов.Количество() > 0 Тогда
		ТекстСкрипта = ПолучитьСкриптМаршрутыОбъектов(МассивОбъектов, Объект.ДатаНачала, Объект.ДатаОкончания, МассивПробегов);
		ВыполнитьСкрипт(ТекстСкрипта);
	КонецЕсли;
	
	// Автомасштаб
	ТекстСкрипта = 
		"var Features = geometryLayer.features;
		|var CurArBounds = null;
		|if (Features.length > 0){
		|	var ArBounds = Features[0].geometry.getBounds().toArray();
		|	for (var i = 1; i < Features.length-1; i++) {
		|		CurArBounds = Features[i].geometry.getBounds().toArray();
		|		ArBounds[0] = Math.min(ArBounds[0],CurArBounds[0]);
		|		ArBounds[1] = Math.min(ArBounds[1],CurArBounds[1]);
		|		ArBounds[2] = Math.max(ArBounds[2],CurArBounds[2]);
		|		ArBounds[3] = Math.max(ArBounds[3],CurArBounds[3]);
		|	}
		|	var NewBounds = new OpenLayers.Bounds(ArBounds[0],ArBounds[1],ArBounds[2],ArBounds[3]);
		|	m_map.zoomToExtent(NewBounds);
		|	if (m_map.getZoom() > 15) { m_map.zoomTo(15); }
		|}
	    |";
		
	ВыполнитьСкрипт(ТекстСкрипта);
	
	ФлагПаузаПроигрыванияМаршрута = Ложь;
	
КонецПроцедуры // ПоказатьМаршрутыНаКарте()

// Процедура - обработчик команды "РежимOnLineСлежения".
//
&НаКлиенте
Процедура РежимOnLineСлежения(Команда)
	
	Если ТекущийРежим <> 0 Тогда
		
		НачатьРежимСлежения();
	
	КонецЕсли;	
	
КонецПроцедуры // РежимOnLineСлежения()

// Процедура - обработчик команды "РежимПостроенияМаршрутов".
//
&НаКлиенте
Процедура РежимПостроенияМаршрутов(Команда)
	
	Если ТекущийРежим <> 1 Тогда
		НачатьРежимОтображенияМаршрута();
	
	КонецЕсли;	
	
КонецПроцедуры // РежимПостроенияМаршрутов()

// Процедура - обработчик команды "РежимРасчетаМаршрута".
//
&НаКлиенте
Процедура РежимРасчетаМаршрута(Команда)
	
	Если ТекущийРежим <> 3 Тогда
		НачатьРежимРежимРасчетаМаршрута();
	
	КонецЕсли;	
	
КонецПроцедуры // РежимРасчетаМаршрута()

// Процедура - обработчик команды "УстановитьФлажкиДереваОбъектовМониторинга".
//
&НаКлиенте
Процедура УстановитьФлажкиДереваОбъектовМониторинга(Команда)
	
	ИзменитьПометкиДереваОбъектов(ДеревоОбъектовМониторинга, 1);
	
	ПоказатьНаКартеТекущиеОбъекты();
	
КонецПроцедуры // УстановитьФлажкиДереваОбъектовМониторинга()

// Процедура - обработчик команды "СнятьФлажкиДереваОбъектовМониторинга".
//
&НаКлиенте
Процедура СнятьФлажкиДереваОбъектовМониторинга(Команда)
	
	ИзменитьПометкиДереваОбъектов(ДеревоОбъектовМониторинга, 0);
	
	ПоказатьНаКартеТекущиеОбъекты();	
	
КонецПроцедуры // СнятьФлажкиДереваОбъектовМониторинга()

// Процедура - обработчик команды "ОбновитьДеревоОбъектовМониторинга".
//
&НаКлиенте
Процедура ОбновитьДеревоОбъектовМониторинга(Команда)
	
	ОбновлениеДанныхОбъектовРежимСлежения();
	
КонецПроцедуры // ОбновитьДеревоОбъектовМониторинга()

// Процедура - обработчик команды "ОбновитьДеревоОбъектовМаршруты".
//
&НаКлиенте
Процедура ОбновитьДеревоОбъектовМаршруты(Команда)

	ОбновлениеДанныхОбъектовРежимМаршрутов();
	
КонецПроцедуры // ОбновитьДеревоОбъектовМаршруты()

// Процедура - обработчик команды "ОткрытьКарточкуОбъекта".
//
&НаКлиенте
Процедура ОткрытьКарточкуОбъекта(Команда)
	
	ПараметрыОтчета = СобратьДанныеДляПостроенияОтчета();
	Если ПараметрыОтчета = Неопределено Тогда
	 	Возврат;		
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.Объект) Тогда
		ПоказатьЗначение(,ПараметрыОтчета.Объект);
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды "ОткрытьОтчетПоДвижениюИСтоянкам".
//
&НаКлиенте
Процедура ОткрытьОтчетПоДвижениюИСтоянкам(Команда)
	ОткрытьФормуОтчета("Отчет.ItobДвиженияИСтоянки.Форма")
КонецПроцедуры // ОткрытьОтчетПоДвижениюИСтоянкам()

// Процедура - обработчик команды "ОткрытьОтчетПоПростоям".
//
&НаКлиенте
Процедура ОткрытьОтчетПоПростоям(Команда)
	ОткрытьФормуОтчета("Отчет.ItobОтчетПоПростоямПриЗаведенномДвигателе.Форма")
КонецПроцедуры // ОткрытьОтчетПоПростоям()

// Процедура - обработчик команды "ОткрытьОтчетПоТопливу".
//
&НаКлиенте
Процедура ОткрытьОтчетПоТопливу(Команда)
	СписокПараметров = Новый СписокЗначений;
	СписокПараметров.Добавить("Пробег", "Метод");

	ОткрытьФормуОтчета("Отчет.ItobОтчетПоТопливу.Форма", СписокПараметров)
КонецПроцедуры // ОткрытьОтчетПоТопливу()

// Процедура - обработчик команды "ОткрытьОтчетПоДатчику".
//
&НаКлиенте
Процедура ОткрытьОтчетПоДатчику(Команда)
	
	Если Элементы.ДеревоДатчиков.ВыделенныеСтроки.Количество() > 1 Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Для просмотра отчета выберите в списке только один датчик.'"));
		Возврат;
	КонецЕсли;
		
	ТекущиеДанные = Элементы.ДеревоДатчиков.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Невозможно открыть отчет для выбранного датчика.'"));
		Возврат;
	КонецЕсли;
	
	лТекущаяДата = ItobОбщегоНазначенияСервер.ПолучитьТекущуюДату();
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Объект)
		И ЗначениеЗаполнено(ТекущиеДанные.Датчик) Тогда
		
		Если Строка(ТекущиеДанные.ТипДатчика) = "Дискретный" Тогда
			ИмяОтчета = "ItobОтчетПоДискретнымДатчикам";
			
		Иначе
			ИмяОтчета = "ItobОтчетПоАналоговымДатчикам";
		
		КонецЕсли;
		
		СписокПараметров = Новый СписокЗначений;
		СписокПараметров.Добавить(НачалоДня(лТекущаяДата),"НачПериода");
		СписокПараметров.Добавить(КонецДня(лТекущаяДата),"КонПериода");
		СписокПараметров.Добавить(ТекущиеДанные.Объект,"Объект");
		СписокПараметров.Добавить(ТекущиеДанные.Датчик,"Датчик");
		
		ПараметрыОтчета = Новый Структура;
		ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
		
		ОткрытьФорму("Отчет."+ИмяОтчета+".Форма", ПараметрыОтчета);
		
	ИначеЕсли ТекущиеДанные.ПолучитьРодителя() = Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Терминал) Тогда
		// Показываем отчет "Сообщения терминала"
		
		СписокПараметров = Новый СписокЗначений;
		СписокПараметров.Добавить(НачалоДня(лТекущаяДата),"НачПериода");
		СписокПараметров.Добавить(КонецДня(лТекущаяДата),"КонПериода");
		СписокПараметров.Добавить(ТекущиеДанные.Терминал,"Терминал");
				
		ПараметрыОтчета = Новый Структура;
		ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
		
		ОткрытьФорму("Отчет.ItobСообщенияТерминала.Форма", ПараметрыОтчета);
		
		
	КонецЕсли;		
	
КонецПроцедуры // ОткрытьОтчетПоДатчику()

// Процедура - обработчик команды "ОткрытьОтчетПоИмпульснымДатчикам".
//
&НаКлиенте
Процедура ОткрытьОтчетПоИмпульснымДатчикам(Команда)
	ОткрытьФормуОтчета("Отчет.ItobОтчетПоИмпульснымДатчикам.Форма")
КонецПроцедуры // ОткрытьОтчетПоИмпульснымДатчикам()

&НаКлиенте
Процедура ОткрытьОтчетПоПараметрамВыработки(Команда)
	ОткрытьФормуОтчета("Отчет.ItobОтчетПоПараметрамВыработки.Форма")
КонецПроцедуры

// Процедура - обработчик команды "ЗапуститьМастерНастройкиСлужбыCsmSvc".
//
&НаКлиенте
Процедура ЗапуститьМастерНастройкиСлужбыCsmSvc(Команда)
	ОткрытьФорму("Обработка.ItobМастерНастройкиСервисаCsmSvc.Форма",,,,,,Новый ОписаниеОповещения("ООЗапуститьМастерНастройкиСлужбыCsmSvc", ItobОбщегоНазначенияКлиент, Новый Структура("ЭтаФорма", ЭтаФорма)),РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
КонецПроцедуры

// Процедура - обработчик команды "ПоказатьЗаправкиИСливы".
//
&НаКлиенте
Процедура ПоказатьЗаправкиИСливы(Команда)
	
	ТекстСкрипта = 
		"geometryLayer.removeAllFeatures();
		|playRouteLayer.removeAllFeatures();
		|markersLayer.clearMarkers();
		|";
		
	ВыполнитьСкрипт(ТекстСкрипта);
	
	Если Объект.ДатаНачала = '00010101' ИЛИ Объект.ДатаОкончания = '00010101' Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Не задан период!'"));
		Возврат;
		
	ИначеЕсли Объект.ДатаНачала > Объект.ДатаОкончания Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Некорректный период!'"));
		Возврат;
		
	КонецЕсли;	
	
	МассивОтмеченныхСтрок = Новый Массив;
	СобратьОтмеченныеОбъектыДерева(ДеревоОбъектовМониторинга, МассивОтмеченныхСтрок);

	МассивОбъектов = Новый Массив;
	Для каждого СтрокаДерева Из МассивОтмеченныхСтрок Цикл
		МассивОбъектов.Добавить(СтрокаДерева.Объект);
		Прервать;
	
	КонецЦикла;
	
	Если МассивОбъектов.Количество() > 0 Тогда
		ТекстСкрипта = ПолучитьСкриптЗаправкиИСливы(МассивОбъектов, Объект.ДатаНачала, Объект.ДатаОкончания);
		ВыполнитьСкрипт(ТекстСкрипта);
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды "ПроигратьМаршрут".
//
&НаКлиенте
Процедура ПроигратьМаршрут(Команда)
	
	Если ФлагПаузаПроигрыванияМаршрута Тогда
		ВыполнитьСкрипт("play_route_pause = false;");
		ФлагПаузаПроигрыванияМаршрута = Ложь;
		
	Иначе
		
		Если Объект.ДатаНачала = '00010101' ИЛИ Объект.ДатаОкончания = '00010101' Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Не задан период!'"));
			Возврат;
			
		ИначеЕсли Объект.ДатаНачала > Объект.ДатаОкончания Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Некорректный период!'"));
			Возврат;
			
		КонецЕсли;	
		
		МассивОтмеченныхСтрок = Новый Массив;
		СобратьОтмеченныеОбъектыДерева(ДеревоОбъектовМониторинга, МассивОтмеченныхСтрок);

		МассивОбъектов = Новый Массив;
		Для каждого СтрокаДерева Из МассивОтмеченныхСтрок Цикл
			МассивОбъектов.Добавить(СтрокаДерева.Объект);
		
		КонецЦикла;
		
		ПрогрессПроигрывания = 0;
		
		Если МассивОбъектов.Количество() > 0 Тогда
			ТекстСкрипта = ПолучитьСкриптПроигратьМаршруты(МассивОбъектов, Объект.ДатаНачала, Объект.ДатаОкончания);
			
			ВыполнитьСкрипт(ТекстСкрипта);
		
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды "ПаузаПроигрыванияМаршрута".
//
&НаКлиенте
Процедура ПаузаПроигрыванияМаршрута(Команда)
	
	ФлагПаузаПроигрыванияМаршрута = Истина;
	ВыполнитьСкрипт("play_route_pause = true;");
	
КонецПроцедуры

// Процедура - обработчик команды "ЗакончитьПроигрываниеМаршрута".
//
&НаКлиенте
Процедура ЗакончитьПроигрываниеМаршрута(Команда)
	
	ФлагПаузаПроигрыванияМаршрута = Ложь;
	
	ТекстСкрипта = 
		"if (play_route_intervalid != null) {
		|	clearInterval(play_route_intervalid);
		|	play_route_intervalid = null;
		|}
		|
		|playRouteLayer.removeAllFeatures();
		|";
	ВыполнитьСкрипт(ТекстСкрипта);
	
	ПрогрессПроигрывания = 0;
	
КонецПроцедуры
	
#КонецОбласти 

#Область ОбработчикиКомандВыбораМестоположения
// Используются динамически

// Процедура - обработчик команды "НажатиеНаКнопкуВыбораКарты".
//
&НаКлиенте
Процедура Подключаемый_НажатиеНаКнопкуВыбораКарты(Команда)	
	
	ИмяКоманды = СтрЗаменить(Команда.Имя,"НажатиеНаКнопку","");
	ИмяКоманды = СтрЗаменить(ИмяКоманды,"ВыбораКарты","");	
	ОбработатьВыборКарты(Число(ИмяКоманды));
	
КонецПроцедуры // НажатиеНаКнопку1ВыбораКарты()

&НаКлиенте
Процедура ПолноэкранныйРежимOnlineСлежение(Команда)
	
	МассивОтмеченныхСтрок = Новый Массив;
	СобратьОтмеченныеОбъектыДерева(ДеревоОбъектовМониторинга, МассивОтмеченныхСтрок);
	
	МассивОбъектов = Новый СписокЗначений;
	Для каждого ОтмеченнаяСтрока Из МассивОтмеченныхСтрок Цикл
		МассивОбъектов.Добавить(ОтмеченнаяСтрока.Объект);	
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("РежимОткрытия,МассивОбъектов,ФиксироватьКарту", "OnLineСлежениеПолноэкранный", МассивОбъектов, ФиксироватьКарту);
	ОткрытьФорму("Обработка.ItobРабочееМестоДиспетчера.Форма", ПараметрыФормы);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолноэкранныйРежимУстановитьФлажкиДереваОбъектов()

	Если КартаЗагружена() Тогда
		
		ПоказатьНаКартеТекущиеОбъекты();
		
	Иначе
		ПодключитьОбработчикОжидания("ПолноэкранныйРежимУстановитьФлажкиДереваОбъектов",0.5,Истина);
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ФиксироватьКарту(Команда)
	
	ФиксироватьКарту = НЕ ФиксироватьКарту;
	Элементы.КнопкаФиксироватьКарту.Пометка = ФиксироватьКарту;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииФлажкаДеревоОбъектовМониторинга()

	ТекущаяСтрока = ДеревоОбъектовМониторинга.НайтиПоИдентификатору(Элементы.ДеревоОбъектовМониторинга.ТекущаяСтрока);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииФлажкаДереваОбъектов(ТекущаяСтрока);
	
	ПоказатьНаКартеТекущиеОбъекты();

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыполненияОтложеннойКоманды()
 
	Если ПустаяСтрока(мТекстОтложеннойКоманды) Тогда		
		Возврат;
	
	КонецЕсли;
	
	Если КартаЗагружена() Тогда
		ВЫПОЛНИТЬ(мТекстОтложеннойКоманды);
		мТекстОтложеннойКоманды = "";
		
	Иначе
		ЭтаФорма.ПодключитьОбработчикОжидания("ОбработчикВыполненияОтложеннойКоманды",0.5,Истина);
	
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПлощадьПолигона(Команда)
	
	Элементы.РассчитатьПлощадьПолигона.Пометка = НЕ Элементы.РассчитатьПлощадьПолигона.Пометка;
	
	Если Элементы.РассчитатьПлощадьПолигона.Пометка И Элементы.РассчитатьДлинуРасстояния.Пометка Тогда
		Элементы.РассчитатьДлинуРасстояния.Пометка = Ложь;
		ВыполнитьСкрипт("StopMeasuring();");
	КонецЕсли;
	
	Если Элементы.РассчитатьПлощадьПолигона.Пометка Тогда
		ВыполнитьСкрипт("StartMeasuringArea();");
		
	Иначе
		ВыполнитьСкрипт("StopMeasuringArea();");
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьУсловноеОформление()

	ЭтаФорма.УсловноеОформление.Элементы.Очистить();
	
	мСоответствиеПолейДатчиковСтатусы = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ItobСтатусыОбъектов.Ссылка,
	               |	ItobСтатусыОбъектов.ЦветФона,
	               |	ItobСтатусыОбъектов.ЦветНадписи,
	               |	ItobСтатусыОбъектов.УсловияОтбора.(
	               |		НомерСтроки,
	               |		Показатель,
	               |		ВидСравнения,
	               |		Значение
	               |	)
	               |ИЗ
	               |	Справочник.ItobСтатусыОбъектов КАК ItobСтатусыОбъектов
	               |ГДЕ
	               |	НЕ ItobСтатусыОбъектов.ПометкаУдаления
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ItobСтатусыОбъектов.Приоритет,
	               |	ItobСтатусыОбъектов.Наименование УБЫВ";
				   
	мВыборкаСтатусыОбъектов = Запрос.Выполнить().Выбрать();
	Пока мВыборкаСтатусыОбъектов.Следующий() Цикл
		
		ВыборкаУсловияОтбора = мВыборкаСтатусыОбъектов.УсловияОтбора.Выбрать();
		// Подсчет количества датчиков в условиях
		КоличествоНовыхДатчиков = 0;
		Пока ВыборкаУсловияОтбора.Следующий() Цикл
			Если ТипЗнч(ВыборкаУсловияОтбора.Показатель) = Тип("СправочникСсылка.ItobНазначенияДатчиков") Тогда
				Если мСоответствиеПолейДатчиковСтатусы[ВыборкаУсловияОтбора.Показатель] = Неопределено Тогда
					КоличествоНовыхДатчиков = КоличествоНовыхДатчиков+1;
				КонецЕсли;				
			КонецЕсли;
		КонецЦикла;
		
		Если мСоответствиеПолейДатчиковСтатусы.Количество()+КоличествоНовыхДатчиков > 10 Тогда
			// Все, закончились поля, дальнейшие статусы не учитываем
			Прервать;
		
		КонецЕсли;
		
		ЭлементУсловногоОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
		
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоОбъектовМониторинга");
						
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоОбъектовМаршруты");
		
		// оформление - не для групп!!
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОбъектовМониторинга.ЭтоГруппа");	
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Ложь;
		
		ВыборкаУсловияОтбора.Сбросить();
		Пока ВыборкаУсловияОтбора.Следующий() Цикл
			
			ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			
			Если ТипЗнч(ВыборкаУсловияОтбора.Показатель) = Тип("СправочникСсылка.ItobНазначенияДатчиков") Тогда
				Если мСоответствиеПолейДатчиковСтатусы[ВыборкаУсловияОтбора.Показатель] = Неопределено Тогда
					ИмяКолонки = "ЗначениеДатчика"+Строка(мСоответствиеПолейДатчиковСтатусы.Количество()+1);
					мСоответствиеПолейДатчиковСтатусы.Вставить(ВыборкаУсловияОтбора.Показатель,ИмяКолонки);
				КонецЕсли;
				
				ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОбъектовМониторинга."+мСоответствиеПолейДатчиковСтатусы[ВыборкаУсловияОтбора.Показатель]);
				
			Иначе
				ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОбъектовМониторинга."+ВыборкаУсловияОтбора.Показатель);	
			
			КонецЕсли;			
			
			ВидСравненияУсловияОтбора = ВыборкаУсловияОтбора.ВидСравнения;
			ИмяЗначения = ВидСравненияУсловияОтбора.Метаданные().ЗначенияПеречисления[Перечисления.ItobВидыСравнения.Индекс(ВидСравненияУсловияОтбора)].Имя;
			
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных[ИмяЗначения];
			ЭлементОтбора.ПравоеЗначение = ВыборкаУсловияОтбора.Значение;
			
			// Если условие - не полное равенство - то нужно сказать что правое значение больше -1.
			Если НЕ ВидСравненияУсловияОтбора = Перечисления.ItobВидыСравнения.Равно Тогда
				ДопЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ДопЭлементОтбора.ЛевоеЗначение  = ЭлементОтбора.ЛевоеЗначение;	
				ДопЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
				ДопЭлементОтбора.ПравоеЗначение = 0;				
			
			КонецЕсли;						
		
		КонецЦикла;	   	
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", 
			ItobОбщегоНазначенияКлиентСервер.ПолучитьЦветПоЗначениюХранения(мВыборкаСтатусыОбъектов.ЦветФона));
					   		
	КонецЦикла;	

КонецПроцедуры

&НаСервере
Функция ПолучитьТекстВсплывающейПодсказки(Данные)	
	
	Рез = "<table width=""300"" border=""1"" cellspacing=""0"" cellpadding=""2"" bordercolor=""#B3AC86"" style=""border-width:1px;border-style:solid;"">
		  |<tr><td colspan=""2"" align=""center""><b>"+СокрЛП(Данные.ОбъектПредставление)+"</b></td></tr>";
	
	ТабДеталей = ПолучитьДеталиДатчика(Данные);
	Для каждого СтрТабДеталей Из ТабДеталей Цикл
		ТекНомерСтроки = ТабДеталей.Индекс(СтрТабДеталей)+1;
		ЧетнаяСтрока = ТекНомерСтроки/2 = Окр(ТекНомерСтроки/2,0);
		Стиль = ?(ЧетнаяСтрока, "", "style=""background-color:#EEE""");
		
		Рез = Рез + "
			|<tr "+Стиль+"><td width=""90"" align=""left"" valign=""top"">"+СтрТабДеталей.Показатель+"</td><td>"+Строка(СтрТабДеталей.Значение)+"</td></tr>";		
			
	КонецЦикла;
	
	Рез = Рез+"</table>";
		
	Возврат Рез;	

КонецФункции // ПолучитьТекстВсплывающейПодсказки()

&НаКлиенте
Процедура ПрогрессПроигрыванияПриИзменении(Элемент)
	
	ТекстСкрипта = 
		"if (play_route_intervalid != null) {
		|	document.form.result.value = 'true';
		|} else {
		|	document.form.result.value = 'false';
		|}";	
	
	ВыполнитьСкрипт(ТекстСкрипта);
	
	Если Элементы.ПолеHTML.Документ.form.result.value = "true" Тогда
		// Идет проигрывание маршрута
				
		ТекстСкрипта = 
			"play_route_sec = play_route_max*"+Формат(ПрогрессПроигрывания,"ЧН=0; ЧГ=0")+"/100-play_route_k/10;
			|play_route_progress = Math.round(play_route_sec/play_route_max*100);
			|for (var i = 0, len = routes_list.length; i < len; i++) {
			|	CurPos = 0;
			|	while(CurPos < routes_list[i].length && routes_list[i][CurPos][1] < play_route_sec) {
			|		CurPos = CurPos+1;
			|	}
			|	routes_list_pos[i][0] = CurPos;
			|}";
			
		Если ФлагПаузаПроигрыванияМаршрута Тогда
			ТекстСкрипта = ТекстСкрипта+"
				|play_route_pause = false;
				|PlayRouteHandlier();
				|play_route_pause = true;";				
		
		КонецЕсли;	
		 
		ВыполнитьСкрипт(ТекстСкрипта);
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицуИстории(Команда)
	
	// Получаем данные строки
	ДанныеСтроки = ПолучитьТекущиеДанныеСтроки();
	
	Если НЕ ДанныеСтроки = Неопределено Тогда
		
		Если ДанныеСтроки.ЭтоГруппа Тогда
			Возврат;	
		КонецЕсли;	
		
		СтруктураДанных = Новый Структура("Объект,Терминал,АктуальностьДанных");
		ЗаполнитьЗначенияСвойств(СтруктураДанных, ДанныеСтроки);
		СтруктураДанных.Вставить("ГруппироватьСтоянки", Элементы.ИсторияОбъектаГруппироватьСтоянкиИсторииОбъектов.Пометка);
		
		// Обновляем таблицу
		ОбновитьТаблицуИсторииИнтерваловСервер(СтруктураДанных);		
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуИсторииИнтерваловСервер(СтруктураДанных)
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	СтруктураДанных.Вставить("ОпределятьАдресаДляКаждойТочки", Константы.ItobОпределятьАдресаДляКаждойТочки.Получить());
	СтруктураДанных.Вставить("РежимДозаполнения", (ИнтервалыДвижения.Количество() > 0 И НЕ НачалоПериодаИзменено));
	НачалоПериодаИзменено = Ложь;  
	
	СтруктураДанных.Вставить("НачалоПериода", ?(СтруктураДанных.РежимДозаполнения,ИнтервалыДвижения[0].ВремяКон+1,?(РежимРаботы = 1, Объект.ДатаНачала, ТекущаяДатаСеанса-24*3600*ТекущийПериодИстории)));
	СтруктураДанных.Вставить("КонецПериода", ?(РежимРаботы = 1, Объект.ДатаОкончания, ТекущаяДатаСеанса));
		
	СостояниеТерминалов = ПолучитьСостоянияТерминалов();
		
	ТаблицаИнтервалы = ОбновитьТаблицуИнтерваловСервер(СтруктураДанных, СостояниеТерминалов);
	Если НЕ ТаблицаИнтервалы = Неопределено Тогда
		ОбновитьТаблицуИсторииСервер(ТаблицаИнтервалы, СтруктураДанных, СостояниеТерминалов);
	КонецЕсли; 
КонецПроцедуры // ОбновитьТаблицуИсторииИнтерваловСервер()

&НаСервере
Функция ПолучитьСостоянияТерминалов()
	СостояниеТерминалов = Новый Структура();
	СостояниеТерминалов.Вставить("Стоянка", Перечисления.ItobСостоянияТерминалов.Стоянка);
	СостояниеТерминалов.Вставить("Движение", Перечисления.ItobСостоянияТерминалов.Движение);
	СостояниеТерминалов.Вставить("НетДанных", Перечисления.ItobСостоянияТерминалов.НетДанных);
	Возврат СостояниеТерминалов;
КонецФункции // ПолучитьСостоянияТерминалов()

&НаСервере
Функция СформироватьТекстЗапросаДляТаблицыИстории()
	Текст = "ВЫБРАТЬ
	               |	ТЗ.Терминал,
	               |	ТЗ.Период КАК Период,
	               |	ТЗ.Широта КАК Широта,
	               |	ТЗ.Долгота КАК Долгота,
	               |	ТЗ.Скорость,
	               |	ТЗ.Направление,
	               |	ТЗ.ПериодUTC0,
	               |	ДанныеТерминаловДополнения.Вектор,
	               |	ДанныеТерминаловДополнения.ПриближениеУдаление,
	               |	ТЗ.Состояние,
	               |	ItobКлассификаторНаселенныхПунктов.Представление КАК Адрес,
	               |	ВЫБОР
	               |		КОГДА &ОпределятьАдресаДляКаждойТочки = ИСТИНА
	               |			ТОГДА ВЫБОР
	               |					КОГДА ТЗ.Состояние = ЗНАЧЕНИЕ(Перечисление.ItobСостоянияТерминалов.Стоянка)
	               |						ТОГДА &ЛитералСтоитВ + ДанныеТерминаловДополнения.Расстояние + &ЛитералКмНа + ВЫБОР
	               |								КОГДА ДанныеТерминаловДополнения.Вектор = 0
	               |									ТОГДА &ЛитералЮг
	               |								КОГДА ДанныеТерминаловДополнения.Вектор = 1
	               |									ТОГДА &ЛитералЮгоЗапад
	               |								КОГДА ДанныеТерминаловДополнения.Вектор = 2
	               |									ТОГДА &ЛитералЗапад
	               |								КОГДА ДанныеТерминаловДополнения.Вектор = 3
	               |									ТОГДА &ЛитералСевероЗапад
	               |								КОГДА ДанныеТерминаловДополнения.Вектор = 4
	               |									ТОГДА &ЛитералСевер
	               |								КОГДА ДанныеТерминаловДополнения.Вектор = 5
	               |									ТОГДА &ЛитералСевероВосток
	               |								КОГДА ДанныеТерминаловДополнения.Вектор = 6
	               |									ТОГДА &ЛитералВосток
	               |								КОГДА ДанныеТерминаловДополнения.Вектор = 7
	               |									ТОГДА &ЛитералЮгоВосток
	               |							КОНЕЦ + &ЛитералОт + (ВЫРАЗИТЬ(ItobКлассификаторНаселенныхПунктов.Представление КАК СТРОКА(500)))
	               |					КОГДА ТЗ.Состояние = ЗНАЧЕНИЕ(Перечисление.ItobСостоянияТерминалов.Движение)
	               |						ТОГДА ВЫБОР
	               |								КОГДА ДанныеТерминаловДополнения.ПриближениеУдаление = 0
	               |									ТОГДА &ЛитералДвигаетсяВ + ДанныеТерминаловДополнения.Расстояние + &ЛитералКмНаОт + (ВЫРАЗИТЬ(ItobКлассификаторНаселенныхПунктов.Представление КАК СТРОКА(500)))
	               |								КОГДА ДанныеТерминаловДополнения.ПриближениеУдаление = 1
	               |									ТОГДА &ЛитералПриближаетсяС + ВЫБОР
	               |											КОГДА ДанныеТерминаловДополнения.Вектор = 0
	               |												ТОГДА &ЛитералЮга
	               |											КОГДА ДанныеТерминаловДополнения.Вектор = 1
	               |												ТОГДА &ЛитералЮгоЗапада
	               |											КОГДА ДанныеТерминаловДополнения.Вектор = 2
	               |												ТОГДА &ЛитералЗапада
	               |											КОГДА ДанныеТерминаловДополнения.Вектор = 3
	               |												ТОГДА &ЛитералСевероЗапада
	               |											КОГДА ДанныеТерминаловДополнения.Вектор = 4
	               |												ТОГДА &ЛитералСевера
	               |											КОГДА ДанныеТерминаловДополнения.Вектор = 5
	               |												ТОГДА &ЛитералСевероВостока
	               |											КОГДА ДанныеТерминаловДополнения.Вектор = 6
	               |												ТОГДА &ЛитералВостока
	               |											КОГДА ДанныеТерминаловДополнения.Вектор = 7
	               |												ТОГДА &ЛитералЮгоВостока
	               |										КОНЕЦ + &ЛитералВ + ДанныеТерминаловДополнения.Расстояние + &ЛитералКмК + (ВЫРАЗИТЬ(ItobКлассификаторНаселенныхПунктов.Представление КАК СТРОКА(500)))
	               |								КОГДА ДанныеТерминаловДополнения.ПриближениеУдаление = 2
	               |									ТОГДА &ЛитералУдаляетсяНа + ВЫБОР
	               |											КОГДА ДанныеТерминаловДополнения.Вектор = 0
	               |												ТОГДА &ЛитералЮг
	               |											КОГДА ДанныеТерминаловДополнения.Вектор = 1
	               |												ТОГДА &ЛитералЮгоЗапад
	               |											КОГДА ДанныеТерминаловДополнения.Вектор = 2
	               |												ТОГДА &ЛитералЗапад
	               |											КОГДА ДанныеТерминаловДополнения.Вектор = 3
	               |												ТОГДА &ЛитералСевероЗапад
	               |											КОГДА ДанныеТерминаловДополнения.Вектор = 4
	               |												ТОГДА &ЛитералСевер
	               |											КОГДА ДанныеТерминаловДополнения.Вектор = 5
	               |												ТОГДА &ЛитералСевероВосток
	               |											КОГДА ДанныеТерминаловДополнения.Вектор = 6
	               |												ТОГДА &ЛитералВосток
	               |											КОГДА ДанныеТерминаловДополнения.Вектор = 7
	               |												ТОГДА &ЛитералЮгоВосток
	               |										КОНЕЦ + &ЛитералВ + ДанныеТерминаловДополнения.Расстояние + &ЛитералКмОт + (ВЫРАЗИТЬ(ItobКлассификаторНаселенныхПунктов.Представление КАК СТРОКА(500)))
	               |							КОНЕЦ
	               |					ИНАЧЕ """"
	               |				КОНЕЦ
	               |		ИНАЧЕ """"
	               |	КОНЕЦ КАК Местоположение
	               |ИЗ
	               |	ТЗ КАК ТЗ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ItobДанныеТерминаловДополнения КАК ДанныеТерминаловДополнения
	               |		ПО ТЗ.ПериодUTC0 = ДанныеТерминаловДополнения.ДатаВремя
	               |			И ТЗ.Терминал = ДанныеТерминаловДополнения.Терминал
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ItobКлассификаторНаселенныхПунктов КАК ItobКлассификаторНаселенныхПунктов
	               |		ПО (ДанныеТерминаловДополнения.НаселенныйПункт = ItobКлассификаторНаселенныхПунктов.Ссылка)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период ВОЗР";
	Возврат Текст;
КонецФункции // СформироватьТекстЗапросаДляТаблицыИстории()

&НаСервере
Процедура УстановитьПараметрыЛитералыВЗапрос(Запрос)
	Запрос.УстановитьПараметр("ЛитералЮг", НСтр("ru = 'юг'"));
	Запрос.УстановитьПараметр("ЛитералЮгоЗапад", НСтр("ru = 'юго-запад'"));
	Запрос.УстановитьПараметр("ЛитералЗапад", НСтр("ru = 'запад'"));
	Запрос.УстановитьПараметр("ЛитералСевероЗапад", НСтр("ru = 'северо-запад'"));
	Запрос.УстановитьПараметр("ЛитералСевер", НСтр("ru = 'север'"));
	Запрос.УстановитьПараметр("ЛитералСевероВосток", НСтр("ru = 'северо-восток'"));
	Запрос.УстановитьПараметр("ЛитералВосток", НСтр("ru = 'восток'"));
	Запрос.УстановитьПараметр("ЛитералЮгоВосток", НСтр("ru = 'юго-восток'"));
	
	Запрос.УстановитьПараметр("ЛитералЮга", НСтр("ru = 'юга'"));
	Запрос.УстановитьПараметр("ЛитералЮгоЗапада", НСтр("ru = 'юго-запада'"));
	Запрос.УстановитьПараметр("ЛитералЗапада", НСтр("ru = 'запада'"));
	Запрос.УстановитьПараметр("ЛитералСевероЗапада", НСтр("ru = 'северо-запада'"));
	Запрос.УстановитьПараметр("ЛитералСевера", НСтр("ru = 'севера'"));
	Запрос.УстановитьПараметр("ЛитералСевероВостока", НСтр("ru = 'северо-востока'"));
	Запрос.УстановитьПараметр("ЛитералВостока", НСтр("ru = 'востока'"));
	Запрос.УстановитьПараметр("ЛитералЮгоВостока", НСтр("ru = 'юго-востока'"));
	
	Запрос.УстановитьПараметр("ЛитералСтоитВ", НСтр("ru = 'Стоит в'")+" ");
	Запрос.УстановитьПараметр("ЛитералКмНа", " "+НСтр("ru = 'км на'")+" ");
	Запрос.УстановитьПараметр("ЛитералОт", " "+НСтр("ru = 'от'")+" ");
	Запрос.УстановитьПараметр("ЛитералДвигаетсяВ", НСтр("ru = 'Двигается в'")+" ");
	Запрос.УстановитьПараметр("ЛитералКмНаОт", " "+НСтр("ru = 'км на ... от'")+" ");
	Запрос.УстановитьПараметр("ЛитералПриближаетсяС", НСтр("ru = 'Приближается с'")+" ");
	Запрос.УстановитьПараметр("ЛитералВ", " "+НСтр("ru = 'в'")+" ");
	Запрос.УстановитьПараметр("ЛитералКмК", " "+НСтр("ru = 'км к'")+" ");
	Запрос.УстановитьПараметр("ЛитералУдаляетсяНа", НСтр("ru = 'Удаляется на'")+" ");
	Запрос.УстановитьПараметр("ЛитералКмОт", " "+НСтр("ru = 'км от'")+" ");
КонецПроцедуры
 
&НаСервере
Процедура ОбновитьТаблицуИсторииСервер(Знач ТаблицаИнтервалы, СтруктураДанных, СостояниеТерминалов)
	
	// Получим с полученной таблицы интервалов данные датчиков
	ДанныеТерминалов = СформироватьМаршрутПоИнтерваламДвижения(ТаблицаИнтервалы);
		
	// Заполним адреса
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ ТЗ ИЗ &ТЗ КАК ТЗ ГДЕ НЕ ТЗ.Состояние = &СостояниеТерминаловНетДанных";
	Запрос.УстановитьПараметр("ТЗ", ДанныеТерминалов);
	Запрос.УстановитьПараметр("ОпределятьАдресаДляКаждойТочки", СтруктураДанных.ОпределятьАдресаДляКаждойТочки);
	Запрос.УстановитьПараметр("СостояниеТерминаловНетДанных", СостояниеТерминалов.НетДанных);
	Запрос.Выполнить();
	
	Запрос.Текст = СформироватьТекстЗапросаДляТаблицыИстории();
	УстановитьПараметрыЛитералыВЗапрос(Запрос);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПредыдущееСостояние = Неопределено;
	
	// Дописывать данные в начало истории
	Пока Выборка.Следующий() Цикл
		Если Выборка.Состояние = ПредыдущееСостояние И Выборка.Состояние = СостояниеТерминалов.Стоянка И СтруктураДанных.ГруппироватьСтоянки Тогда
			ИсторияОбъекта[0].Период = Выборка.Период;
		Иначе
			ЗаполнитьЗначенияСвойств(ИсторияОбъекта.Вставить(0), Выборка);
			
			// Если местоположение пусто, то выводим координаты
			ИсторияОбъекта[0].Местоположение = ?(ПустаяСтрока(Выборка.Местоположение), ""+Выборка.Широта+", "+Выборка.Долгота, Выборка.Местоположение);
		КонецЕсли;
		
		ПредыдущееСостояние = Выборка.Состояние;
	КонецЦикла;			
КонецПроцедуры

&НаСервере
Функция СформироватьМаршрутПоИнтерваламДвижения(ТаблицаИнтервалы)
	Результат = ItobОперативныйМониторинг.СоздатьТаблицуЗначенийМаршрутОбъектаМониторинга();
	Для Каждого ИнтервалДвижения Из ТаблицаИнтервалы Цикл
		Для Каждого ДанныеТерминала Из ИнтервалДвижения.ДанныеТерминала Цикл
		    ЗаполнитьЗначенияСвойств(Результат.Добавить(), ДанныеТерминала);
		КонецЦикла; 
	КонецЦикла;
	Возврат Результат;
КонецФункции // СформироватьМаршрутПоИнтерваламДвижения()

&НаСервере
Функция ОбновитьТаблицуИнтерваловСервер(Данные, СостояниеТерминалов)
	
	СчетчикИнтерваловКонец = 0;
	
	ТаблицаИнтервалы = ItobОперативныйМониторинг.ПолучитьИнтервалыДвижения(Данные.Объект, Данные.НачалоПериода, Данные.КонецПериода, Истина);
	
	// Проверка, что бы не выводилась в таблицу "Интервалы движения" одна запись с состоянием "Нет данных".
	Если ТаблицаИнтервалы.Количество() = 1 И ТаблицаИнтервалы[0].Состояние = СостояниеТерминалов.НетДанных Тогда
		// Возвращаем Неопределено, что бы не обновлять таблицу истории
	    Возврат Неопределено;
	КонецЕсли;
	
	// Проверка, что бы не выводилась в таблицу "Интервалы движения" некорректная запись с состоянием "Движение".
	Если ТаблицаИнтервалы.Количество() = 1 
		 И ТаблицаИнтервалы[0].Состояние = СостояниеТерминалов.Движение 
		 И ТаблицаИнтервалы[0].ДанныеТерминала.Количество() = 2 
		 И ТаблицаИнтервалы[0].ДанныеТерминала[0].Скорость = 0 Тогда
		// Возвращаем Неопределено, что бы не обновлять таблицу истории
	    Возврат Неопределено;
	КонецЕсли;
	
	Если Данные.РежимДозаполнения Тогда
		Для Каждого ТаблицаИнтервалыСтрока Из ТаблицаИнтервалы Цикл
			Если ТаблицаИнтервалыСтрока.Состояние = ИнтервалыДвижения[0].Состояние Тогда
				Для Каждого ДанныеТерминалаСтрока Из ТаблицаИнтервалыСтрока.ДанныеТерминала Цикл
				    ЗаполнитьЗначенияСвойств(ИнтервалыДвижения[0].ДанныеТерминала.Вставить(0),ДанныеТерминалаСтрока);
				КонецЦикла;
				ИнтервалыДвижения[0].ВремяКон = ДанныеТерминалаСтрока.Период;
				ПреобразоватьСтрокуИнтерваловДвижение(ИнтервалыДвижения[0],Истина,СостояниеТерминалов.Стоянка,
													  ТаблицаИнтервалыСтрока.ДанныеТерминала[0].Широта,
													  ТаблицаИнтервалыСтрока.ДанныеТерминала[0].Долгота);
			Иначе
				Интервал = ИнтервалыДвижения.Вставить(0);
				ЗаполнитьЗначенияСвойств(Интервал, ТаблицаИнтервалыСтрока,,"ДанныеТерминала");
				СчетчикИнтерваловКонец = СчетчикИнтерваловКонец+1;
			КонецЕсли;
		КонецЦикла; 
	Иначе
		ТаблицаИнтервалы.Сортировать("ВремяНач Убыв");
		ИнтервалыДвижения.Загрузить(ТаблицаИнтервалы);
		СчетчикИнтерваловКонец = ИнтервалыДвижения.Количество()-1;
	КонецЕсли;
	
	Если НЕ ТаблицаИнтервалы.Количество() = 0 Тогда
		Для СчетчикИнтервалов = 0 По СчетчикИнтерваловКонец Цикл
		    Интервал = ИнтервалыДвижения[СчетчикИнтервалов];
			ТаблицаИнтервалыСтрока = ТаблицаИнтервалы[СчетчикИнтервалов];
			Интервал.ДанныеТерминала.Загрузить(ТаблицаИнтервалыСтрока.ДанныеТерминала);
			ПреобразоватьСтрокуИнтерваловДвижение(Интервал, Истина, СостояниеТерминалов.Стоянка,
												  ТаблицаИнтервалыСтрока.ДанныеТерминала[0].Широта,
												  ТаблицаИнтервалыСтрока.ДанныеТерминала[0].Долгота);  
		КонецЦикла;
	КонецЕсли; 
	
	// Возвращаем ТаблицаИнтервалы, что бы обновить таблицу истории
	Возврат ТаблицаИнтервалы;
КонецФункции

&НаСервере
Процедура ПреобразоватьСтрокуИнтерваловДвижение(Интервал, ОпределятьАдресаДляКаждойТочки, СостояниеСтоянка, Широта, Долгота)
	Длительность = Интервал.Длительность;
	Часов = Цел(Длительность/3600);
	Длительность = Длительность%3600;
	Минут = Цел(Длительность/60);
	Секунд = Цел(Длительность%60);
	Интервал.ДлительностьПредставление = 
		?(Часов = 0,"",Строка(Часов)+" час. ")
		+?(Минут = 0,"",Строка(Минут)+" мин. ")
		+?(Секунд = 0,"",Строка(Секунд)+" сек. ");
	Если НЕ ОпределятьАдресаДляКаждойТочки И Интервал.Состояние = СостояниеСтоянка Тогда
		Интервал.МестоСтоянки = ""+Широта+", "+Долгота;
	КонецЕсли;
КонецПроцедуры
 

&НаКлиенте
Процедура ИсторияОбъектаПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ПоказатьТочкуИсторииНаКарте",0.01 ,Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТочкуИсторииНаКарте()

	ТекущиеДанныеИстории = Элементы.ИсторияОбъекта.ТекущиеДанные;	
	Если ТекущиеДанныеИстории = Неопределено Тогда
		Возврат;
	
	КонецЕсли;
	
	ТекстСкрипта =
		"historyLayer.removeAllFeatures();
		|var Features = new Array;
		|";
			
	Угол = 30*Окр(ТекущиеДанныеИстории.Направление/30,0);
	Угол = ?(Угол=360,0,Угол);
	
	ТекстСкрипта = ТекстСкрипта+"				
		|pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТекущиеДанныеИстории.Долгота)
			+", "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТекущиеДанныеИстории.Широта)+");
		|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
		|pointFeature = new OpenLayers.Feature.Vector(new OpenLayers.Geometry.Point(pt.lon, pt.lat),null,{
		|					 graphicWidth: 16,
		|                    graphicHeight: 16,
		|                    graphicXOffset: -8,
		|                    graphicYOffset: -8,
		|                    externalGraphic: """+ВебСсылкаСервер+"images/pt_"+Угол+".gif"",
		|                    graphicOpacity: 1		
		|});				
		|Features.push(pointFeature);
		|historyLayer.addFeatures(Features);
		|m_map.setCenter(pt, m_map.getZoom());";
		
	ВыполнитьСкрипт(ТекстСкрипта);	

КонецПроцедуры

&НаКлиенте
Процедура ГруппироватьСтоянкиИсторииОбъектов(Команда)
	
	Элементы.ИсторияОбъектаГруппироватьСтоянкиИсторииОбъектов.Пометка = 
		НЕ Элементы.ИсторияОбъектаГруппироватьСтоянкиИсторииОбъектов.Пометка;
		
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("ГруппироватьСтоянки", Элементы.ИсторияОбъектаГруппироватьСтоянкиИсторииОбъектов.Пометка);
	СтруктураДанных.Вставить("ОпределятьАдресаДляКаждойТочки", КонстантыItobОпределятьАдресаДляКаждойТочкиПолучить());
		
	ИсторияОбъекта.Очистить();
	ОбновитьТаблицуИсторииСервер(ИнтервалыДвижения,СтруктураДанных,ПолучитьСостоянияТерминалов());	
	
КонецПроцедуры

&НаСервере
Функция КонстантыItobОпределятьАдресаДляКаждойТочкиПолучить()
	Возврат ?(Константы.ItobОпределятьАдресаДляКаждойТочки.Получить(), Истина, Ложь);
КонецФункции // КонстантыItobОпределятьАдресаДляКаждойТочкиПолучить()
 

&НаКлиенте
Процедура ИсторияОбъектаВыборПериода(Команда)
	
	ПрошлыйПериодИстории = ТекущийПериодИстории;
	
	ИндексПериодаСтрока = Прав(Команда.Имя,1);
	ТекущийПериодИстории = Число(ИндексПериодаСтрока);
	ТекущееПредставлениеПериода = "";
	
	Для каждого ТекКнопка Из Элементы.ИсторияОбъектаПодменюВыборПериода.ПодчиненныеЭлементы Цикл
		ВыбранаТекущаяКнопка = Прав(ТекКнопка.Имя,1) = ИндексПериодаСтрока;
		ТекКнопка.Пометка = ВыбранаТекущаяКнопка;
		Если ВыбранаТекущаяКнопка Тогда
			ТекущееПредставлениеПериода = ТекКнопка.Заголовок;
		
		КонецЕсли;
	
	КонецЦикла;
	
	Если ПрошлыйПериодИстории = ТекущийПериодИстории Тогда
		// Ничего не поменялось
	 	Возврат;
	
	КонецЕсли;
	
	ТекущийТерминалИстории = Неопределено;
	
	// Сообщаем о том, что дата начала изменена, что бы не выполнялась дозапись
	НачалоПериодаИзменено = Истина;
	
	// Обновляем таблицу
	Если ИспользоватьАвтообновлениеТаблицыИстории Тогда
		ОчиститьПанельИстории(Истина);
		ОбновитьТаблицуИстории(Неопределено);
	КонецЕсли; 
				
КонецПроцедуры

&НаКлиенте
Процедура АвтообновлениеИстории(Команда)
	
	ИспользоватьАвтообновлениеТаблицыИстории = НЕ ИспользоватьАвтообновлениеТаблицыИстории;
	Элементы.ИсторияОбъектаАвтообновлениеИстории.Пометка = ИспользоватьАвтообновлениеТаблицыИстории;
	
	// Включить/отключить автообновление
	Если ИспользоватьАвтообновлениеТаблицыИстории Тогда
	    ПодключитьОбработчикОжидания("ОбновитьТрекМаршрута",60,Ложь);
	Иначе
		ОтключитьОбработчикОжидания("ОбновитьТрекМаршрута");
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекущееПоложениеКарты()

	Результат = Новый Структура("Масштаб,Широта,Долгота");
	
	ВыполнитьСкрипт("document.form.result.value = m_map.getZoom();");
	Результат.Масштаб = Элементы.ПолеHTML.Документ.form.result.value;
	
	ВыполнитьСкрипт(
		"var pt = m_map.getCenter();
		|pt.transform(m_map.getProjectionObject(), m_map.displayProjection);
		|document.form.result.value = pt.toShortString();");
	СтрокаКоординат = Элементы.ПолеHTML.Документ.form.result.value;
	СтрокаКоординат = СтрЗаменить(СтрокаКоординат,",",Символы.ПС);
	Результат.Долгота = СокрЛП(СтрПолучитьСтроку(СтрокаКоординат,1));
	Результат.Широта = СокрЛП(СтрПолучитьСтроку(СтрокаКоординат,2));	
		
	Возврат Результат;

КонецФункции // ПолучитьТекущееПоложениеКарты()

&НаКлиенте
Процедура ВосстановитьТекущееПоложениеКарты()

	ТекстСкрипта = 				
		"pt = new OpenLayers.LonLat("+ТекущееПоложениеКарты.Долгота+","+ТекущееПоложениеКарты.Широта+");
		|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
		|m_map.setCenter(pt, "+ТекущееПоложениеКарты.Масштаб+");";
	ВыполнитьСкрипт(ТекстСкрипта);

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьДлинуРасстояния(Команда)
	
	Элементы.РассчитатьДлинуРасстояния.Пометка = НЕ Элементы.РассчитатьДлинуРасстояния.Пометка;
	
	Если Элементы.РассчитатьДлинуРасстояния.Пометка И Элементы.РассчитатьПлощадьПолигона.Пометка Тогда
		Элементы.РассчитатьПлощадьПолигона.Пометка = Ложь;
		ВыполнитьСкрипт("StopMeasuringArea();");	
	КонецЕсли;
	
	Если Элементы.РассчитатьДлинуРасстояния.Пометка Тогда
		ВыполнитьСкрипт("StartMeasuring();");
		
	Иначе
		ВыполнитьСкрипт("StopMeasuring();");
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПанельИстории(Команда)
	
	ПоказыватьПанельИстории = НЕ ПоказыватьПанельИстории;
	Элементы.ДеревоОбъектовМониторингаПоказатьПанельИстории.Пометка = ПоказыватьПанельИстории;
	
	Если НЕ ПоказыватьПанельИстории И ИспользоватьАвтообновлениеТаблицыИстории Тогда
		ИспользоватьАвтообновлениеТаблицыИстории = Ложь;
		Элементы.ИсторияОбъектаАвтообновлениеИстории.Пометка = Ложь;
	
	КонецЕсли;
	
	ТекущееПоложениеКарты = ПолучитьТекущееПоложениеКарты();		
	Элементы.ГруппаПанельИстории.Видимость = ПоказыватьПанельИстории;		
	ПодключитьОбработчикОжидания("ПоказатьОбъектыОнлайнСлежения", 0.5, Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы Тогда 
		ЗакончитьВсеРежимы();
		
		Если НЕ ПустаяСтрока(НомерПрофиляСлойПунктов) Тогда
			ItobРаботаСРендеромCSM.ОчиститьДанныеПрофиля(НомерПрофиляСлойПунктов);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Показать объект
&НаКлиенте
Процедура ПоказатьОбъектДереваОбъектов(ВыбраннаяСтрока, ПолеИмя)
	ТекущийОбъект = ДеревоОбъектовМониторинга.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ТекущийОбъект.ПоказатьОбъект Тогда
		ТекущийОбъект.Пометка = 1;
		ПодключитьОбработчикОжидания("ПриИзмененииФлажкаДеревоОбъектовМониторинга", 0.1, Истина);
		Если Прав(ПолеИмя,14) = "ПоказатьОбъект" Тогда
			Если НЕ РежимРаботы = 0 Тогда
				РежимРаботы = 0;
				Если мПредыдущийРежим = 1 Тогда
					// Сохраняем текущую строку объекта
					ТекущаяСтрока = Неопределено;
					Если Элементы.ДеревоОбъектовМаршруты.ТекущаяСтрока <> Неопределено Тогда
						ТекущаяСтрока = ДеревоОбъектовМониторинга.НайтиПоИдентификатору(Элементы.ДеревоОбъектовМаршруты.ТекущаяСтрока);			
					КонецЕсли;
					
					НачатьРежимСлежения();
					
					Если ТекущаяСтрока <> Неопределено Тогда
						Элементы.ДеревоОбъектовМониторинга.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();					
					КонецЕсли;
				Иначе
					НачатьРежимСлежения();
				КонецЕсли;	
			КонецЕсли;
			ПодключитьОбработчикОжидания("ОбновитьЦентрКартыРежимСлеженияПоказатьОбъект",0.1 ,Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовМониторингаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьОбъектДереваОбъектов(ВыбраннаяСтрока, Поле.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовМаршрутыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьОбъектДереваОбъектов(ВыбраннаяСтрока, Поле.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовТопливоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьОбъектДереваОбъектов(ВыбраннаяСтрока, Поле.Имя);
КонецПроцедуры

// Получаем данные строки из дерева объектов мониторинга для панели истории.
//
&НаКлиенте
Функция ПолучитьТекущиеДанныеСтроки()
	// Создать переменную, для истории и заполнять ее при активации строки,
	// а здесь обращаться к ней.
	// Оптимизировать
	
	Если РежимРаботы = 0 Тогда
	    Возврат Элементы.ДеревоОбъектовМониторинга.ТекущиеДанные;
	ИначеЕсли РежимРаботы = 1 Тогда
	    Возврат Элементы.ДеревоОбъектовМаршруты.ТекущиеДанные;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции // ПолучитьТекущиеДанныеСтроки()
 
&НаКлиенте
Процедура ИнтервалыДвиженияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// Получаем данные строки
	ДанныеСтроки = ПолучитьТекущиеДанныеСтроки();
	Если ДанныеСтроки = Неопределено Тогда
	    Возврат;
	КонецЕсли; 
	
	// Обновить пометку в строке
	УстановитьПометкуВСтрокеИнтерваловДвижения(ВыбраннаяСтрока);
	
	ТекстСкрипта = ПолучитьСкриптМаршрутыИнтервалаОбъекта(Элементы.ИнтервалыДвижения.ТекущиеДанные);
	
	ВыполнитьСкрипт(ТекстСкрипта);
	
	// Автомасштаб
	Если НЕ ФиксироватьКарту Тогда
		Если Элементы.ИнтервалыДвижения.ТекущиеДанные.Состояние = ПредопределенноеЗначение("Перечисление.ItobСостоянияТерминалов.Стоянка") Тогда
			ТекстСкрипта = 
			"var pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(Элементы.ИнтервалыДвижения.ТекущиеДанные.ДанныеТерминала[0].Долгота)+", "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(Элементы.ИнтервалыДвижения.ТекущиеДанные.ДанныеТерминала[0].Широта)+");
			|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
			|m_map.setCenter(pt, m_map.getZoom());
			|pt = null;";
		ИначеЕсли Элементы.ИнтервалыДвижения.ТекущиеДанные.Состояние = ПредопределенноеЗначение("Перечисление.ItobСостоянияТерминалов.Движение") Тогда
			ТекстСкрипта = 
				"var Features = historyLayer.features;
				|var CurArBounds = null;
				|if (Features.length > 0){
				|	var ArBounds = Features[0].geometry.getBounds().toArray();
				|	for (var i = 1; i < Features.length-1; i++) {
				|		CurArBounds = Features[i].geometry.getBounds().toArray();
				|		ArBounds[0] = Math.min(ArBounds[0],CurArBounds[0]);
				|		ArBounds[1] = Math.min(ArBounds[1],CurArBounds[1]);
				|		ArBounds[2] = Math.max(ArBounds[2],CurArBounds[2]);
				|		ArBounds[3] = Math.max(ArBounds[3],CurArBounds[3]);
				|	}
				|	var NewBounds = new OpenLayers.Bounds(ArBounds[0],ArBounds[1],ArBounds[2],ArBounds[3]);
				|	m_map.zoomToExtent(NewBounds);
				|	if (m_map.getZoom() > 15) { m_map.zoomTo(15); }
				|}
			    |";
		КонецЕсли; 
		ВыполнитьСкрипт(ТекстСкрипта);
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуВСтрокеИнтерваловДвижения(ВыбраннаяСтрока)
	Для Каждого Интервал Из ИнтервалыДвижения Цикл
		Если Интервал.ПолучитьИдентификатор() = ВыбраннаяСтрока Тогда
			Интервал.Пометка = Истина;
		Иначе
			Интервал.Пометка = Ложь;
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры
 

// Функция возвращает текст скрипта отображения маршрута интервала объектов.
//
&НаКлиенте
Функция ПолучитьСкриптМаршрутыИнтервалаОбъекта(ИнтервалДвижения)
    	
	ТекстСкрипта = 
		"historyLayer.removeAllFeatures();
		|var Features = [];
	    |markersLayer.clearMarkers();
		|var pointList = [];
		|var pt = null;";
	
	Если ИнтервалДвижения.Состояние = ПредопределенноеЗначение("Перечисление.ItobСостоянияТерминалов.Стоянка") Тогда
			
		ПолныеДаты = НачалоДня(ИнтервалДвижения.ВремяНач) <> НачалоДня(ИнтервалДвижения.ВремяКон);
		Строка1 = ItobОперативныйМониторингКлиентСервер.ПредставлениеВремени(ИнтервалДвижения.Длительность);
    	Строка2 = "Адрес: "+ИнтервалДвижения.МестоСтоянки;			
		Строка3 = "С "+Формат(ИнтервалДвижения.ВремяНач, ?(ПолныеДаты,"ДФ='dd.MM.yy HH:mm'","ДФ=HH:mm"))
			+" по "+Формат(ИнтервалДвижения.ВремяКон, ?(ПолныеДаты,"ДФ='dd.MM.yy HH:mm'","ДФ=HH:mm"));
        				
		НадписьHTML = "<div style=""font:Courier New; font-size:12px; width:190px; height:90px; text-align:left; word-wrap:break-word;""><b>"
			+Строка1+"</b><br />"
			+Строка2+"<br />"
			+Строка3+"</div>";
		
		ВысотаОкнаДеталей = 100 + Макс(0,Окр((СтрДлина(ИнтервалДвижения.МестоСтоянки)-15)/25+0.499,0))*20;
			
    	ТекстСкрипта = ТекстСкрипта+"
			|pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ИнтервалДвижения.ДанныеТерминала[0].Долгота)
				+", "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ИнтервалДвижения.ДанныеТерминала[0].Широта)+");
			|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
            |var size = new OpenLayers.Size(23,23);
			|var offset = new OpenLayers.Pixel(-(size.w/2), -size.h);
		    |var icon = new OpenLayers.Icon('"+ВебСсылкаСервер+"images/parking.png',size,offset);
			|
			|marker = new OpenLayers.Marker(pt,icon);
			|
			|marker.events.on({
			|	""mousedown"": function(event) { 
		    |					
			|if (this.popup == null) {

			|	var pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ИнтервалДвижения.ДанныеТерминала[0].Долгота)
				+", "+ ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ИнтервалДвижения.ДанныеТерминала[0].Широта)+");
			|	pt.transform(m_map.displayProjection, m_map.getProjectionObject());
			|	
			|     this.popup = new OpenLayers.Popup(""chicken"",
			|	   pt,
			|	   new OpenLayers.Size(200,"+Формат(ВысотаОкнаДеталей,"ЧГ=0")+"),
			|	   '"+НадписьHTML+"'"+",
			|	   true);
			|     m_map.addPopup(this.popup);
			|     this.popup.show();
			| } else {
			|     this.popup.toggle();
			| }
			| currentPopup = this.popup;
			| OpenLayers.Event.stop(event);
			|	}
			|   
			|});
			|markersLayer.addMarker(marker);
            |";
						
	Иначе
		Для СчетчикК = 0 По ИнтервалДвижения.ДанныеТерминала.Количество()-1 Цикл
			
			Если ИнтервалДвижения.ДанныеТерминала[СчетчикК].Долгота = Неопределено
				ИЛИ ИнтервалДвижения.ДанныеТерминала[СчетчикК].Широта = Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если ИнтервалДвижения.ДанныеТерминала[СчетчикК].Долгота = 0
				ИЛИ ИнтервалДвижения.ДанныеТерминала[СчетчикК].Широта = 0 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ТекстСкрипта = ТекстСкрипта+"
				|pt = new OpenLayers.LonLat("+Формат(ИнтервалДвижения.ДанныеТерминала[СчетчикК].Долгота,"ЧРД=.; ЧН=0")
					+", "+Формат(ИнтервалДвижения.ДанныеТерминала[СчетчикК].Широта,"ЧРД=.; ЧН=0")+");
				|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
				|pointList.push(new OpenLayers.Geometry.Point(pt.lon, pt.lat));";
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТекстСкрипта = ТекстСкрипта+"
		|var LineString = new OpenLayers.Geometry.LineString(pointList);
		|var lineFeature = new OpenLayers.Feature.Vector(
		|                LineString,null,{
		|                strokeColor: ""#"+ПолучитьВебЦветМаршрута()+""",
		|                strokeWidth: 5,
		|				 strokeOpacity: 0.8,
		|                strokeDashstyle: ""solid"",
		|				 strokeLinecap: ""round"",
		|                pointRadius: 6,
		|                pointerEvents: ""visiblePainted""
		|});
		|Features.push(lineFeature);
		|historyLayer.addFeatures(Features);
		|//m_map.zoomToExtent(LineString.getBounds());
		|//===================================================";			
		
	Возврат ТекстСкрипта;		

КонецФункции // ПолучитьСкриптМаршрутыОбъектов

Функция ПолучитьВебЦветМаршрута()
	ЦветМаршрута = Новый Цвет(176, 0, 176);
	Возврат Из_10_В_Любую(ЦветМаршрута.Красный,16)+Из_10_В_Любую(ЦветМаршрута.Зеленый,16)+Из_10_В_Любую(ЦветМаршрута.Синий,16);
КонецФункции // ПолучитьВебЦветМаршрута()

&НаКлиенте
Процедура ПанельИсторииРазвернуть(Команда)
	Элементы.ГруппаПанельРазвернутьПанельИстории.Видимость = Ложь;
	Элементы.ГруппаПанельИсторииОбщая.Видимость = Истина;
	ПанельИсторииРазвернута = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПанельИсторииСвернуть(Команда)
	Элементы.ГруппаПанельРазвернутьПанельИстории.Видимость = Истина;
	Элементы.ГруппаПанельИсторииОбщая.Видимость = Ложь;
	ПанельИсторииРазвернута = Ложь;
	ОчиститьКартуОтИстории();
КонецПроцедуры


&НаКлиенте
Процедура ОчиститьКартуОтИстории()
	ВыполнитьСкрипт("historyLayer.removeAllFeatures();");
КонецПроцедуры // ОчиститьКартуОтИстории()


&НаКлиенте
Процедура ПоказатьВыделенныеНаКартеОбъекты(Команда)
	Если Элементы.ДеревоОбъектовМониторингаПоказатьВыделенныеНаКартеОбъекты.Пометка Тогда
		ТекстСкрипта = "select_box_control.deactivate();";
		ВыполнитьСкрипт(ТекстСкрипта);
		Элементы.ДеревоОбъектовМониторингаПоказатьВыделенныеНаКартеОбъекты.Пометка = Ложь;
	Иначе
		ТекстСкрипта = "select_box_control.activate();";
		ВыполнитьСкрипт(ТекстСкрипта);
		Элементы.ДеревоОбъектовМониторингаПоказатьВыделенныеНаКартеОбъекты.Пометка = Истина;
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область ФильтрыПунктовНазначения 
 
#Область ПреобразованиеВЗапрос
	
&НаСервере
Функция ПолучитьТекстЗапросаУсловияПоОтбору(Отбор, СписокПараметров, ТипСоединения = " И ")
	Если НЕ Отбор = Неопределено Тогда
		ТекстЗапроса = "";
		Для Каждого Элемент Из Отбор.Элементы Цикл
			ТипЗначенияЭлемента = ТипЗнч(Элемент);
			Если ТипЗначенияЭлемента = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				ТекстЗапросаГруппа = ПолучитьТекстЗапросаУсловияПоОтбору(Элемент, СписокПараметров, ПолучитьСтрокуТипаГруппы(Элемент.ТипГруппы));
				ТекстЗапроса = ТекстЗапроса+ТипСоединения+"("+ТекстЗапросаГруппа+")";
			Иначе
				ТекстЗапроса = ТекстЗапроса+ТипСоединения+ПолучитьТекстЗапросаИзЭлементаОтбора(Элемент, СписокПараметров);
			КонецЕсли; 
		КонецЦикла; 
		Возврат Сред(ТекстЗапроса,СтрДлина(ТипСоединения)+1);
	КонецЕсли;
КонецФункции // ПолучитьТекстЗапросаУсловие()

&НаСервере
Функция ПолучитьСтрокуТипаГруппы(ТипГруппы)
	Если ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ Тогда
		Возврат " И ";
	ИначеЕсли ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли Тогда
		Возврат " Или ";
	ИначеЕсли ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
		Возврат " Не ";
	КонецЕсли; 
КонецФункции // ПолучитьСтрокуТипаГруппы()
 
&НаСервере
Функция ПолучитьТекстЗапросаИзЭлементаОтбора(Элемент, СписокПараметров)
	Если НЕ Элемент.Использование Тогда
	    Возврат " Истина ";
	КонецЕсли;
	
	ЛевоеЗначение 	 		= Элемент.ЛевоеЗначение;
	ВидСравненияЭлемента 	= Элемент.ВидСравнения;
	ПравоеЗначение 	 		= Элемент.ПравоеЗначение;
	СтрокаКоличество 		= Строка(СписокПараметров.Количество());
		
	Если ВидСравненияЭлемента = ВидСравненияКомпоновкиДанных.Больше Тогда
	    СписокПараметров.Добавить(ПравоеЗначение);
		Возврат Строка(ЛевоеЗначение) + " > " + "&Параметр"+СтрокаКоличество;
	ИначеЕсли ВидСравненияЭлемента = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
	    СписокПараметров.Добавить(ПравоеЗначение);
		Возврат Строка(ЛевоеЗначение) + " >= " + "&Параметр"+СтрокаКоличество;
	ИначеЕсли ВидСравненияЭлемента = ВидСравненияКомпоновкиДанных.ВИерархии
		  ИЛИ ВидСравненияЭлемента = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии  Тогда
	    СписокПараметров.Добавить(ПравоеЗначение);
		Возврат Строка(ЛевоеЗначение) + " В ИЕРАРХИИ(" + "&Параметр"+СтрокаКоличество+")";
	ИначеЕсли ВидСравненияЭлемента = ВидСравненияКомпоновкиДанных.ВСписке Тогда
	    СписокПараметров.Добавить(ПравоеЗначение);
		Возврат Строка(ЛевоеЗначение) + " В(" + "&Параметр"+СтрокаКоличество+")";
	ИначеЕсли ВидСравненияЭлемента = ВидСравненияКомпоновкиДанных.Заполнено Тогда
	    Возврат "НЕ "+Строка(ЛевоеЗначение) + " ЕСТЬ NULL";
	ИначеЕсли ВидСравненияЭлемента = ВидСравненияКомпоновкиДанных.Меньше Тогда
	    СписокПараметров.Добавить(ПравоеЗначение);
		Возврат Строка(ЛевоеЗначение) + " < " + "&Параметр"+СтрокаКоличество;
	ИначеЕсли ВидСравненияЭлемента = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
	    СписокПараметров.Добавить(ПравоеЗначение);
		Возврат Строка(ЛевоеЗначение) + " <= " + "&Параметр"+СтрокаКоличество;
	ИначеЕсли ВидСравненияЭлемента = ВидСравненияКомпоновкиДанных.НачинаетсяС Тогда
	    СписокПараметров.Добавить(ПравоеЗначение);
		Возврат Строка(ЛевоеЗначение) + " ПОДОБНО " + "[&Параметр"+СтрокаКоличество+"]%";
	ИначеЕсли ВидСравненияЭлемента = ВидСравненияКомпоновкиДанных.НеВИерархии
		  ИЛИ ВидСравненияЭлемента = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
	    СписокПараметров.Добавить(ПравоеЗначение);
		Возврат "НЕ "+Строка(ЛевоеЗначение) + " В ИЕРАРХИИ(" + "&Параметр"+СтрокаКоличество+")";
	ИначеЕсли ВидСравненияЭлемента = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
	    СписокПараметров.Добавить(ПравоеЗначение);
		Возврат "НЕ "+Строка(ЛевоеЗначение) + " В(" + "&Параметр"+СтрокаКоличество+")";
	ИначеЕсли ВидСравненияЭлемента = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
	    Возврат Строка(ЛевоеЗначение) + " ЕСТЬ NULL";
	ИначеЕсли ВидСравненияЭлемента = ВидСравненияКомпоновкиДанных.НеНачинаетсяС Тогда
	    СписокПараметров.Добавить(ПравоеЗначение);
		Возврат "НЕ "+Строка(ЛевоеЗначение) + " ПОДОБНО " + "[&Параметр"+СтрокаКоличество+"]%";
	ИначеЕсли ВидСравненияЭлемента = ВидСравненияКомпоновкиДанных.НеПодобно
		  ИЛИ ВидСравненияЭлемента = ВидСравненияКомпоновкиДанных.НеСодержит Тогда
	    СписокПараметров.Добавить(ПравоеЗначение);
		Возврат "НЕ "+Строка(ЛевоеЗначение) + " ПОДОБНО " + "&Параметр"+СтрокаКоличество;
	ИначеЕсли ВидСравненияЭлемента = ВидСравненияКомпоновкиДанных.НеРавно Тогда
	    СписокПараметров.Добавить(ПравоеЗначение);
		Возврат "НЕ "+Строка(ЛевоеЗначение) + " = " + "&Параметр"+СтрокаКоличество;
	ИначеЕсли ВидСравненияЭлемента = ВидСравненияКомпоновкиДанных.Подобно
		  ИЛИ ВидСравненияЭлемента = ВидСравненияКомпоновкиДанных.Содержит  Тогда
	    СписокПараметров.Добавить(ПравоеЗначение);
		Возврат Строка(ЛевоеЗначение) + " ПОДОБНО " + "&Параметр"+СтрокаКоличество;
	ИначеЕсли ВидСравненияЭлемента = ВидСравненияКомпоновкиДанных.Равно Тогда
	    СписокПараметров.Добавить(ПравоеЗначение);
		Возврат Строка(ЛевоеЗначение) + " = " + "&Параметр"+СтрокаКоличество;
	КонецЕсли;
	
	Возврат " Ложь ";
КонецФункции // ПолучитьТекстЗапросаИзЭлементаОтбора()

#КонецОбласти 

#КонецОбласти 

#Область ПодсистемаItobЦентрСпутниковогоМониторингаКомандыДляТрекеров 
	
&НаСервере 
Процедура КомандыДляТрекеровПриСозданииНаСервере()
	Если ItobОбщегоНазначенияВызовСервера.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.КомандыДляТрекеров") Тогда
		МодульКомандыДляТрекеровСервер = ОбщегоНазначения.ОбщийМодуль("ItobКомандыДляТрекеров");
		МодульКомандыДляТрекеровСервер.РабочееМестоДиспетчераПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли; 
КонецПроцедуры
 
// Процедура - обработчик команды "ОтправитьКомандуНаТрекер".
//
&НаКлиенте
Процедура Подключаемый_ОтправитьКомандуНаТрекер(Команда)
	Если ItobОбщегоНазначенияВызовСервера.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.КомандыДляТрекеров") Тогда
		МодульКомандыДляТрекеровКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ItobКомандыДляТрекеровКлиент");
		МодульКомандыДляТрекеровКлиент.ОтправитьКомандуНаТрекер(ЭтотОбъект);
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область ПодсистемаItobЦентрСпутниковогоМониторингаГеографическиеЗоны 
	
&НаСервере 
Процедура ГеографическиеЗоныПриСозданииНаСервере()
	Если ItobОбщегоНазначенияВызовСервера.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.ГеографическиеЗоны") Тогда
		МодульГеографическиеЗоныСервер = ОбщегоНазначения.ОбщийМодуль("ItobГеографическиеЗоны");
		МодульГеографическиеЗоныСервер.РабочееМестоДиспетчераПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ГеографическиеЗоныСоздать(Команда)
	Если ItobОбщегоНазначенияВызовСервера.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.ГеографическиеЗоны") Тогда
		МодульГеографическиеЗоныКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ItobГеографическиеЗоныКлиент");
		МодульГеографическиеЗоныКлиент.СоздатьГеографическуюЗону(ЭтотОбъект);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ГеографическиеЗоныРедактировать(Команда)
	Если ItobОбщегоНазначенияВызовСервера.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.ГеографическиеЗоны") Тогда
		МодульГеографическиеЗоныКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ItobГеографическиеЗоныКлиент");
		МодульГеографическиеЗоныКлиент.РедактироватьГеографическуюЗону(ЭтотОбъект);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ГеографическиеЗоныСохранить(Команда)
	Если ItobОбщегоНазначенияВызовСервера.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.ГеографическиеЗоны") Тогда
		МодульГеографическиеЗоныКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ItobГеографическиеЗоныКлиент");
		МодульГеографическиеЗоныКлиент.СохранитьГеографическуюЗону(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ГеографическиеЗоныВсе(Команда)
	Если ItobОбщегоНазначенияВызовСервера.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.ГеографическиеЗоны") Тогда
		МодульГеографическиеЗоныКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ItobГеографическиеЗоныКлиент");
		МодульГеографическиеЗоныКлиент.ВсеГеографическиеЗоны(ЭтотОбъект);
	КонецЕсли; 
КонецПроцедуры

// Процедура - обработчик команды "ОткрытьОтчетПосещениеГеографическихЗон".
//
&НаКлиенте
Процедура Подключаемый_ОткрытьОтчетПосещениеГеографическихЗон(Команда)
	Если ItobОбщегоНазначенияВызовСервера.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.ГеографическиеЗоны") Тогда
		ОткрытьФормуОтчета("Отчет.ItobПосещениеГеографическихЗон.Форма");
	КонецЕсли; 
КонецПроцедуры // ОткрытьОтчетПосещениеГеографическихЗон()

// Процедура - обработчик команды "ОткрытьОтчетМаршрутПоГеографическимЗонам".
//
&НаКлиенте
Процедура Подключаемый_ОткрытьОтчетМаршрутПоГеографическимЗонам(Команда)
	Если ItobОбщегоНазначенияВызовСервера.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.ГеографическиеЗоны") Тогда
		ОткрытьФормуОтчета("Отчет.ItobМаршрутПоГеографическимЗонам.Форма");
	КонецЕсли; 
КонецПроцедуры // ОткрытьОтчетМаршрутПоГеографическимЗонам()

#КонецОбласти 
