
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатОбработкаФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка,ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("Документ") Тогда
		Объект.Документ = Параметры.Документ;
	КонецЕсли;
	Если Параметры.Свойство("ПунктРазгрузки") Тогда
		Объект.ПунктРазгрузки = Параметры.ПунктРазгрузки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	уатЗащищенныеФункцииКлиент.уатОбработкаФормаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	ЗаполнитьДанныеПечатиТТНПриложение4();

КонецПроцедуры // ПриОткрытии()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДокументПриИзменении(Элемент)

	УстановитьВидимостьДоступность();
	ЗаполнитьДанныеПечатиТТНПриложение4();

КонецПроцедуры // ДокументПриИзменении()

&НаКлиенте
Процедура Пункт3_1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбраннаяГруппаТоваров = Неопределено;

	ОткрытьФорму("Обработка.уатПечатьТТН.Форма.ФормаВыборГруппыТоваров",,Элемент,,,, Новый ОписаниеОповещения("Пункт3_1НачалоВыбораЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПечатьТТНПриложение4(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Документ) Тогда
		ПоказатьПредупреждение(Неопределено, "Не выбран документ!");
		Возврат;
	КонецЕсли;
	ТабДокумент = Новый ТабличныйДокумент();
	ТабДокумент = ПечатьТТНПриложение4НаСервере(ТабДокумент);
	уатОбщегоНазначенияТиповыеКлиент.уатНапечататьДокумент(ТабДокумент, 1, Ложь, "Транспортная накладная");
	Пункт0_1 = Пункт0_1 + 1;
	
КонецПроцедуры // ПечатьТТНПриложение4()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьВалютуРегламУчетаНаСервере()

	Возврат Константы.ВалютаРегламентированногоУчета.Получить();

КонецФункции // ПолучитьВалютуРегламУчетаНаСервере()

&НаСервере
Функция ПечатьТТН()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза",          Объект.Документ.Дата);
	Запрос.УстановитьПараметр("ТекущийДокумент",    Объект.Документ);
	Запрос.УстановитьПараметр("ПустойКонтрагент",   Справочники.Контрагенты.ПустаяСсылка());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата                             КАК ДатаДокумента,
	|	Организация                      КАК Организация,
	|	Организация                      КАК ЮридическоеФизическоеЛицо,
	|	Организация                      КАК Поставщик,
	|	Организация                      КАК Контрагент,
	|	Организация                      КАК Руководители,
	|	ВЫБОР	КОГДА Грузополучатель = &ПустойКонтрагент
	|			ТОГДА Контрагент
	|			ИНАЧЕ Грузополучатель
	|	КОНЕЦ                            КАК Грузополучатель,
	|	ВЫБОР	КОГДА Грузополучатель = &ПустойКонтрагент
	|			ТОГДА Контрагент.ЮридическоеФизическоеЛицо
	|			ИНАЧЕ Грузополучатель.ЮридическоеФизическоеЛицо
	|	КОНЕЦ                            КАК ГрузополучательЮридическоеФизическоеЛицо,
	|	ВЫБОР	КОГДА Грузоотправитель = &ПустойКонтрагент
	|			ТОГДА Организация
	|			ИНАЧЕ Грузоотправитель
	|	КОНЕЦ                            КАК Грузоотправитель,
	|	ВЫБОР	КОГДА Грузоотправитель = &ПустойКонтрагент
	|			ТОГДА Организация.ЮридическоеФизическоеЛицо
	|			ИНАЧЕ Грузоотправитель.ЮридическоеФизическоеЛицо
	|	КОНЕЦ                            КАК ГрузоотправительЮридическоеФизическоеЛицо,
	|	Контрагент                       КАК Покупатель,
	|	Контрагент                       КАК Плательщик,
	|	""""                    КАК Подразделение,
	|	ВалютаДокумента                  КАК ВалютаДокумента,
	|	КурсВзаиморасчетов               КАК Курс,
	|	КратностьВзаиморасчетов          КАК Кратность,
	|	УчитыватьНДС                     КАК УчитыватьНДС,
	|	СуммаВключаетНДС                 КАК СуммаВключаетНДС,
	|	ОтпускРазрешил                   КАК ОтпускРазрешил,
	|	ОтпускПроизвел                   КАК ОтпускПроизвел,
	|	""""                КАК ДоверенностьНомер,
	|	""""                 КАК ДоверенностьДата,
	|	""""               КАК ДоверенностьВыдана
	|ИЗ
	|	Документ.уатТТД КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Объект.Документ);

	Если Объект.Документ.ВалютаДокумента = Объект.Документ.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
		
		// Документ оформлен в валюте взаиморасчетов
		Запрос.УстановитьПараметр("Курс", Объект.Документ.КурсВзаиморасчетов);
		Запрос.УстановитьПараметр("Кратность", ?(Объект.Документ.КратностьВзаиморасчетов=0, 1, Объект.Документ.КратностьВзаиморасчетов));
		
	Иначе
		
		// Документ оформлен в валюте регламентированного учета
		Запрос.УстановитьПараметр("Курс",      1);
		Запрос.УстановитьПараметр("Кратность", 1);
		
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура                                 КАК Номенклатура,
	|	ВложенныйЗапрос.МассаБрутто                                  КАК МассаБрутто,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура.Код                КАК Артикул,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление               КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения." + уатОбщегоНазначения.ПолеЗапросаКодЕИпоОКЕИ() + " КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ВложенныйЗапрос.ЕдиницаИзмерения                             КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ВидУпаковки           КАК ВидУпаковки,
	|	ВложенныйЗапрос.Цена                                         КАК Цена,
	|	ВложенныйЗапрос.Количество                                   КАК Количество,
	|	ВложенныйЗапрос.КоличествоМест                               КАК КоличествоМест,
	|	ВложенныйЗапрос.Сумма                                        КАК Сумма,
	|	0                                     КАК СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки                                  КАК НомерСтроки,
	|	ВложенныйЗапрос.Метка                                        КАК Метка
	|ИЗ
	|
	|	(
	|	ВЫБРАТЬ
	|		РеализацияТоваровУслуг.Номенклатура КАК Номенклатура,
	|		СУММА(ВЫБОР КОГДА РеализацияТоваровУслуг.КоличествоЕздок = 0 ТОГДА РеализацияТоваровУслуг.КоличествоТонн * 1000 ИНАЧЕ РеализацияТоваровУслуг.КоличествоТонн * РеализацияТоваровУслуг.КоличествоЕздок * 1000 КОНЕЦ) КАК МассаБрутто,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		РеализацияТоваровУслуг.ВидУпаковки КАК ВидУпаковки,
	|		СУММА(РеализацияТоваровУслуг.КоличествоМест) КАК КоличествоМест,
	|		РеализацияТоваровУслуг.Цена * &Курс / &Кратность КАК Цена,
	|		СУММА(ВЫБОР КОГДА РеализацияТоваровУслуг.КоличествоЕздок = 0 ТОГДА РеализацияТоваровУслуг.КоличествоТонн ИНАЧЕ РеализацияТоваровУслуг.КоличествоТонн * РеализацияТоваровУслуг.КоличествоЕздок КОНЕЦ) КАК Количество,
	|		СУММА(РеализацияТоваровУслуг.Сумма * &Курс / &Кратность)  КАК Сумма,
	|		МИНИМУМ(РеализацияТоваровУслуг.НомерСтроки) КАК НомерСтроки,
	|		0 КАК Метка
	|	ИЗ
	|		Документ.уатТТД.Выработка КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|		РеализацияТоваровУслуг.Номенклатура,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|		РеализацияТоваровУслуг.ВидУпаковки,
	|		РеализацияТоваровУслуг.Цена
	|	) КАК ВложенныйЗапрос
	|";

	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	
	Возврат ПолучитьДанныеДляТТНПриложение4(ЗапросТовары, Шапка);
	
КонецФункции // ПечатьТТН()

&НаКлиенте
Процедура ЗаполнитьДанныеПечатиТТНПриложение4()
	
	Если ТипЗнч(Объект.Документ) = Тип("ДокументСсылка.уатТТД") Тогда
		ДанныеДокумента = ПечатьТТН();
	Иначе
		Возврат;
	КонецЕсли;
	
	Для Каждого ЗначениеЗаполненияБланкаТТН Из ДанныеДокумента Цикл
		Если Элементы.Найти(ЗначениеЗаполненияБланкаТТН.Ключ) <> Неопределено Тогда
			ЭтаФорма[ЗначениеЗаполненияБланкаТТН.Ключ] = ЗначениеЗаполненияБланкаТТН.Значение;
		КонецЕсли;
	КонецЦикла;
	Пункт0_1 = 1;
	Пункт0_0 = 1;
КонецПроцедуры // ЗаполнитьДанныеПечатиТТНПриложение4()

&НаСервере
Функция ПолучитьДанныеДляТТНПриложение4(ЗапросТовары, Шапка)
	
	ДанныеДокумента = Новый Структура();
	
	Если Метаданные.Константы.Найти("ЕдиницаИзмеренияВеса") <> Неопределено Тогда
		 ЕдиницаИзмеренияВеса = Константы.ЕдиницаИзмеренияВеса.Получить();
	Иначе
		 ЕдиницаИзмеренияВеса = Неопределено;
	КонецЕсли;
	СведенияОГрузоотправитель = уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);
	СведенияОГрузополучателе = уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
	
	Если Шапка.ГрузополучательЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ДанныеДокумента.Вставить("Пункт2_1", уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(СведенияОГрузополучателе,  "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет"));
	ИначеЕсли Шапка.ГрузополучательЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		ДанныеДокумента.Вставить("Пункт2_2", уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(СведенияОГрузополучателе,  "ПолноеНаименование,ИНН,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет"));
	КонецЕсли;
	
	Если Шапка.ГрузоотправительЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ДанныеДокумента.Вставить("Пункт1_1", уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет"));
	ИначеЕсли Шапка.ГрузоотправительЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		ДанныеДокумента.Вставить("Пункт1_2", уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование,ИНН,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет"));
	КонецЕсли;
	
	ДанныеДокумента.Вставить("Пункт3_2", "Всего мест: " + ЧислоПрописью(ЗапросТовары.Итог("КоличествоМест"), ,",,,,,,,,0"));
	Если ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) И ЗапросТовары.Итог("МассаБрутто") > 0.00 Тогда
		ДанныеДокумента.Вставить("Пункт3_3", "Масса брутто: " + ЧислоПрописью(ЗапросТовары.Итог("МассаБрутто"), ,",,,,,,,,0")+ " " + СокрЛП(ЕдиницаИзмеренияВеса) + ".");
	КонецЕсли;
	ДанныеДокумента.Вставить("Пункт16_1", СведенияОГрузоотправитель.Представление);
	ДанныеДокумента.Вставить("Пункт16_2", Объект.Документ.Организация);
	ДанныеДокумента.Вставить("Пункт10_3Ведомость", СведенияОГрузополучателе.Представление);
	
	ДанныеДокумента.Вставить("Пункт4_1", Объект.Документ.ПереченьСопроводительныхДокументов);
	ДанныеДокумента.Вставить("Пункт4_2", Объект.Документ.ПереченьСопроводительныхСертификатов);
	
	Если ТипЗнч(Объект.Документ.АдресОтправления) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		ДанныеДокумента.Вставить("Пункт6_1", ?(ЗначениеЗаполнено(Объект.Документ.АдресОтправления.Адрес), Объект.Документ.АдресОтправления.Адрес, Объект.Документ.АдресОтправления));
	Иначе
		ДанныеДокумента.Вставить("Пункт6_1", Объект.Документ.АдресОтправления);
	КонецЕсли;
	Если ТипЗнч(Объект.Документ.АдресДоставки) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		ДанныеДокумента.Вставить("Пункт7_1", ?(ЗначениеЗаполнено(Объект.Документ.АдресДоставки.Адрес), Объект.Документ.АдресДоставки.Адрес, Объект.Документ.АдресДоставки));
	Иначе
		ДанныеДокумента.Вставить("Пункт7_1", Объект.Документ.АдресДоставки);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Документ.Переадресовка) Тогда
		Если ТипЗнч(Объект.Документ.Переадресовка) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
			ДанныеДокумента.Вставить("Пункт14_3", ?(ЗначениеЗаполнено(Объект.Документ.Переадресовка.Адрес), Объект.Документ.Переадресовка.Адрес, Объект.Документ.Переадресовка));
		Иначе
			ДанныеДокумента.Вставить("Пункт14_3", Объект.Документ.Переадресовка);
		КонецЕсли;
	КонецЕсли;
	
	СтрокаГруз = "";
	списокТСиПрицепов = Новый Массив;
	списокПЛ = Новый Массив;
		
	Для Каждого ТекСтр Из Объект.Документ.Выработка Цикл
		Если ЗначениеЗаполнено(ТекСтр.ПутЛист) Тогда
			СтрокаГруз = СтрокаГруз + "; " + ТекСтр.Номенклатура;
			
			Если списокПЛ.Найти(ТекСтр.ПутЛист.Номер) = Неопределено Тогда
				списокПЛ.Добавить(ТекСтр.ПутЛист.Номер)
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекСтр.ПутЛист.ТранспортноеСредство) И списокТСиПрицепов.Найти(ТекСтр.ПутЛист.ТранспортноеСредство) = Неопределено Тогда
				списокТСиПрицепов.Добавить(ТекСтр.ПутЛист.ТранспортноеСредство);
			КонецЕсли;
			
			Для Каждого ТекСтрокаПрицеп Из ТекСтр.ПутЛист.Прицепы Цикл
				Если ТекСтрокаПрицеп.ТС.уатВидМоделиТС <> Перечисления.уатВидыМоделейТС.Оборудование Тогда
					Если ЗначениеЗаполнено(ТекСтрокаПрицеп.ТС) И списокТСиПрицепов.Найти(ТекСтрокаПрицеп.ТС) = Неопределено Тогда
						списокТСиПрицепов.Добавить(ТекСтрокаПрицеп.ТС);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ ДанныеДокумента.Свойство("Пункт10_4") Тогда
				ДанныеДокумента.Вставить("Пункт10_4", уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ТекСтр.ПутЛист.Водитель1, Объект.Документ.Дата));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	строкаИнформацияОМоделях = "";
	строкаИнформацияОНомерах = "";
	Для Каждого ТекТС Из списокТСиПрицепов Цикл
		строкаИнформацияОМоделях = строкаИнформацияОМоделях + "; " + ТекТС.уатМодель + ", " + Формат(ТекТС.ГрузоподъемностьВТоннах, "ЧН=0")
			+ " т, " + Формат(ТекТС.уатМодель.ОбъемКузова, "ЧН=0") + " м3";
		строкаИнформацияОНомерах = строкаИнформацияОНомерах + "; " + ТекТС.Код;
	КонецЦикла;
	Если ЗначениеЗаполнено(строкаИнформацияОМоделях) Тогда
		ДанныеДокумента.Вставить("Пункт11_1", "" + списокТСиПрицепов.Количество() + "; " + Сред(строкаИнформацияОМоделях, 3));
	КонецЕсли;
	Если ЗначениеЗаполнено(строкаИнформацияОНомерах) Тогда
		ДанныеДокумента.Вставить("Пункт11_2", Сред(строкаИнформацияОНомерах, 3));
	КонецЕсли;
	
	СтрокаПутевыеЛисты = "";
	Для Каждого ТекПЛ Из списокПЛ Цикл
		СтрокаПутевыеЛисты = СтрокаПутевыеЛисты + "; " + ТекПЛ;
	КонецЦикла;
	Если ЗначениеЗаполнено(СтрокаПутевыеЛисты) Тогда
		ДанныеДокумента.Вставить("Пункт10_5", Сред(СтрокаПутевыеЛисты, 3));
	КонецЕсли;
		
	Если ЗначениеЗаполнено(СтрокаГруз) Тогда
		ДанныеДокумента.Вставить("Пункт3_1", Сред(СтрокаГруз, 3));
	КонецЕсли;
	
	Если Объект.Документ.ВалютаДокумента = ПолучитьВалютуРегламУчетаНаСервере() Тогда
		СтоимостьВРублях = Объект.Документ.Стоимость.Итог("Сумма");
	Иначе
		КурсВалютыДокумента = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(Объект.Документ.ВалютаДокумента, Объект.Документ.Дата); 
		СтоимостьВРублях =  уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(Объект.Документ.Стоимость.Итог("Сумма"), ПолучитьВалютуРегламУчетаНаСервере(),
			Объект.Документ.ВалютаДокумента, КурсВалютыДокумента.Курс, 1, КурсВалютыДокумента.Кратность, 1); 
	КонецЕсли;
	ДанныеДокумента.Вставить("Пункт15_1", Формат(СтоимостьВРублях, "ЧДЦ=2"));
	
	Возврат ДанныеДокумента;
	
КонецФункции //ПолучитьДанныеДляТТНПриложение4()

&НаКлиенте
Процедура УстановитьВидимостьДоступность()

	ДоступностьТипаЦен = Ложь;
	
	//ЭлементыФормы.НадписьТипЦен.Доступность = ДоступностьТипаЦен;
	//ЭлементыФормы.ТипЦен.Доступность        = ДоступностьТипаЦен;

КонецПроцедуры // УстановитьВидимостьДоступность()

&НаСервере
Функция ПечатьТТНПриложение4НаСервере(ТабДокумент)
	
	СтруктураДанныхПечати = Новый Структура();
	Для Каждого Реквизит Из Элементы Цикл
		Если Найти(Реквизит.Имя, "Пункт") > 0.00 
			И Найти(Реквизит.Имя, "КонтекстноеМеню") = 0 
			И Найти(Реквизит.Имя, "РасширеннаяПодсказка") = 0 Тогда
				СтруктураДанныхПечати.Вставить(Реквизит.Имя, ЭтаФорма[Реквизит.Имя]);
		КонецЕсли;
	КонецЦикла;
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТТНПриложение4";
	МакетТТНПриложение4 = УправлениеПечатью.МакетПечатнойФормы("Обработка.уатПечатьТТН.ПФ_MXL_ТТНПриложение4");
	ЛицеваяСторона = МакетТТНПриложение4.ПолучитьОбласть("ГоризонтальнаяЛицеваяСторона|ВертикальнаяОбласть");
	ЛицеваяСторона.Параметры.Заполнить(СтруктураДанныхПечати);
	ТабДокумент.Вывести(ЛицеваяСторона);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	ОборотнаяСторона = МакетТТНПриложение4.ПолучитьОбласть("ГоризонтальнаяОборотнаяСторона|ВертикальнаяОбласть");
	ОборотнаяСторона.Параметры.Заполнить(СтруктураДанныхПечати);
	ТабДокумент.Вывести(ОборотнаяСторона);
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьТТНПриложение4НаСервере()

&НаКлиенте
Процедура Пункт3_1НачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ВыбраннаяГруппаТоваров = Результат;
    Пункт3_1 = ?(ЗначениеЗаполнено(ВыбраннаяГруппаТоваров), ВыбраннаяГруппаТоваров, Пункт3_1);

КонецПроцедуры // Пункт3_1НачалоВыбора()

#КонецОбласти
