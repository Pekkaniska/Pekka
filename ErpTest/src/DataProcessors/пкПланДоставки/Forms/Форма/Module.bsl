
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
    УстановитьУсловноеОформление();
    
    ПериодОтгрузкиНачало    = НачалоДня(ТекущаяДата()) + 3600 * 24;
    ПериодОтгрузкиОкончание = КонецДня(ПериодОтгрузкиНачало);
    
    ЗаданияНаПеревозку.Параметры.УстановитьЗначениеПараметра("ПериодОтгрузкиНачало",    НачалоДня(ПериодОтгрузкиНачало));
    ЗаданияНаПеревозку.Параметры.УстановитьЗначениеПараметра("ПериодОтгрузкиОкончание", КонецДня(ПериодОтгрузкиОкончание));
    
    РежимОтображенияПриИзмененииНаСервере();

    ТекущийПользователь = Пользователи.ТекущийПользователь();
                
    ОтборПодразделениеОтгрузки = ТекущийПользователь.Подразделение;
    
    ПодразделениеОтгрузкиПриИзмененииНаСервере();
	
	Если Параметры.Свойство("ПериодОтгрузкиНачало") Тогда
		ПериодОтгрузкиНачало = НачалоДня(Параметры.ПериодОтгрузкиНачало);
	    ЗаданияНаПеревозку.Параметры.УстановитьЗначениеПараметра("ПериодОтгрузкиНачало",    НачалоДня(ПериодОтгрузкиНачало));
	КонецЕсли;
	Если Параметры.Свойство("ПериодОтгрузкиОкончание") Тогда
		ПериодОтгрузкиОкончание = КонецДня(Параметры.ПериодОтгрузкиОкончание);
	    ЗаданияНаПеревозку.Параметры.УстановитьЗначениеПараметра("ПериодОтгрузкиОкончание",    КонецДня(ПериодОтгрузкиОкончание));
	КонецЕсли;
    РежимОтображенияПриИзмененииНаСервере();

	Если Параметры.Свойство("Подразделение") Тогда
	    ОтборПодразделениеОтгрузки = Параметры.Подразделение;
	    ПодразделениеОтгрузкиПриИзмененииНаСервере();
	КонецЕсли;
	
	Если Параметры.Свойство("Модель") Тогда
	    ОтборМодель = Параметры.Модель;
	    Если НЕ ЗначениеЗаполнено(ОтборМодель) Тогда
	         ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			    ЗаданияНаПеревозку, "Модель", , , , Ложь);
	    Иначе
	        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			    ЗаданияНаПеревозку, "Модель", ОтборМодель, , , Истина);
	    КонецЕсли;
	КонецЕсли;
	
//Рарус Владимир Подрезов 07.09.2017
	Если Параметры.Свойство("Модель") Тогда
	    Объект.СтатусЗадания = 2;
	Иначе
	    Объект.СтатусЗадания = 0;
	КонецЕсли;
	
	СтатусЗаданияПриИзмененииНаСервере();
//Рарус Владимир Подрезов Конец

КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(ЭтотОбъект, 
		Новый Структура("ДатаНачала, ДатаОкончания", "ПериодОтгрузкиНачало", "ПериодОтгрузкиОкончание"),
        Новый ОписаниеОповещения("РедактироватьПериодЗавершение", ЭтаФорма));
        
    Модифицированность = Ложь;    
	
КонецПроцедуры

Процедура УстановитьУсловноеОформление()
    
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаданияНаПеревозкуКоличество.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.РежимОтображения");
    ОтборЭлемента.ПравоеЗначение = 0;
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
    
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
    
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаданияНаПеревозкуТехника.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.РежимОтображения");
    ОтборЭлемента.ПравоеЗначение = 1;
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
    
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
    
    Элемент = УсловноеОформление.Элементы.Добавить();

    Для Каждого ЭлементЗаданийНаПеревозку ИЗ Элементы Цикл
        Если Найти(ЭлементЗаданийНаПеревозку.Имя, "ЗаданияНаПеревозку") > 0 Тогда
	        ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	        ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементЗаданийНаПеревозку.Имя);
        КонецЕсли;    
    КонецЦикла;
        
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаданияНаПеревозку.ВидОперации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
    
    Элемент = УсловноеОформление.Элементы.Добавить();

    Для Каждого ЭлементЗаданийНаПеревозку ИЗ Элементы Цикл
        Если Найти(ЭлементЗаданийНаПеревозку.Имя, "ЗаданияНаПеревозку") > 0 Тогда
	        ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	        ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементЗаданийНаПеревозку.Имя);
        КонецЕсли;    
    КонецЦикла;
        
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаданияНаПеревозку.ВидОперации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Синий);

КонецПроцедуры  

&НаКлиенте
Процедура РежимОтображенияПриИзменении(Элемент)
    
    Если Объект.РежимОтображения = 0 Тогда
        Элементы.ПодтвердитьОтгрузку.Доступность    = Истина;
        Элементы.ПодобратьТехнику.Доступность       = Истина;
        Элементы.УбратьВыбраннуюТехнику.Доступность = Истина;
    Иначе
        Элементы.ПодтвердитьОтгрузку.Доступность    = Ложь; 
        Элементы.ПодобратьТехнику.Доступность       = Ложь;
        Элементы.УбратьВыбраннуюТехнику.Доступность = Ложь;
    КонецЕсли;  
    
    РежимОтображенияПриИзмененииНаСервере();
    
КонецПроцедуры

&НаСервере
Процедура РежимОтображенияПриИзмененииНаСервере()
        
     Если Объект.РежимОтображения = 0 Тогда
        ЗаданияНаПеревозку.ТекстЗапроса = 
		//++ RARUS_IUC 20180112
		"ВЫБРАТЬ
		|	пкОперацииСПультамиДанныеПоПультам.Пульт КАК Пульт,
		|	пкДоставкаЗаданияНаПеревозку.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку
		|ПОМЕСТИТЬ ВТ_Пульты
		|ИЗ
		|	Документ.пкДоставка.ЗаданияНаПеревозку КАК пкДоставкаЗаданияНаПеревозку
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкОперацииСПультами.ДанныеПоПультам КАК пкОперацииСПультамиДанныеПоПультам
		|		ПО (пкДоставкаЗаданияНаПеревозку.Ссылка = пкОперацииСПультамиДанныеПоПультам.Ссылка.ДокументОснование)
		|			И (ВЫБОР
		|				КОГДА пкОперацииСПультамиДанныеПоПультам.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийСПультами.ПередачаКонтрагенту)
		|					ТОГДА пкДоставкаЗаданияНаПеревозку.ЗаданиеНаПеревозку.Техника = (ВЫРАЗИТЬ(пкОперацииСПультамиДанныеПоПультам.Склад КАК Справочник.ОбъектыЭксплуатации))
		|				КОГДА пкОперацииСПультамиДанныеПоПультам.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийСПультами.ВозвратОтКонтрагента)
		|					ТОГДА пкДоставкаЗаданияНаПеревозку.ЗаданиеНаПеревозку.Техника = пкОперацииСПультамиДанныеПоПультам.ОбъектЭксплуатацииВозврат
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ) 
		|			И (пкОперацииСПультамиДанныеПоПультам.Ссылка.Проведен) 
		|   ГДЕ
		|	НЕ пкОперацииСПультамиДанныеПоПультам.Пульт ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		//-- RARUS_IUC 20180112
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
        |   пкЗаданиеНаПеревозку.Ссылка,
        |   пкЗаданиеНаПеревозку.ДатаОтгрузки,
        |   пкЗаданиеНаПеревозку.ВидОперации,
        |   пкЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники КАК ЗаявкаНаАренду,
        |   пкЗаданиеНаПеревозку.Модель,
        |   ОбъектыЭксплуатации.Ссылка КАК Техника,
        |   пкЗаданиеНаПеревозку.СпособДоставки,
        |   ПОДСТРОКА(пкЗаданиеНаПеревозку.АдресДоставки, 0, 200) КАК АдресДоставки,
        |   пкЗаданиеНаПеревозку.Подразделение КАК ПодразделениеОтгрузки,
        |   пкЗаданиеНаПеревозку.Автор,
        |   пкЗаданиеНаПеревозку.ДатаАренды,
        |   пкЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники.Партнер КАК Клиент,
        |   пкЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники.Менеджер КАК Менеджер,
        |   пкЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники.ОбъектСтроительства КАК ОбъектСтроительства,
        |   пкЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники.Подразделение КАК Подразделение,
        |   0 КАК Количество,
        |   ВЫБОР
        |       КОГДА ЕСТЬNULL(РасчетыСКлиентамиПоАренде.СуммаПриход, 0) > 0
        |           ТОГДА ИСТИНА
        |       ИНАЧЕ ЛОЖЬ
        |   КОНЕЦ КАК ЕстьСчет,
        |   ВЫБОР
        |       КОГДА ЕСТЬNULL(РасчетыСКлиентамиПоАренде.СуммаРасход, 0) >= ЕСТЬNULL(РасчетыСКлиентамиПоАренде.СуммаПриход, 0)
        |               И ЕСТЬNULL(РасчетыСКлиентамиПоАренде.СуммаПриход, 0) > 0
        |           ТОГДА ИСТИНА
        |       ИНАЧЕ ЛОЖЬ
        |   КОНЕЦ КАК ЕстьОплата,
        |   пкЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники.Договор.пкОригиналДоговора КАК ЕстьДоговор,
        |   пкЗаданиеНаПеревозку.ОтгрузкаПодтверждена КАК ОтгрузкаПодтверждена,
		|   ПОДСТРОКА(пкЗаданиеНаПеревозку.ОбоснованиеПодтверждения, 1, 250) КАК Обоснование,
        |   пкЗаданиеНаПеревозку.КтоПодтвердил КАК КтоПодтвердил,
        |   ВЫБОР
        |       КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
        |           ТОГДА ВЫБОР
        |                   КОГДА ЕСТЬNULL(пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ПогрузитьОстаток, 0) = 0
        |                       ТОГДА ИСТИНА
        |                   ИНАЧЕ ЛОЖЬ
        |               КОНЕЦ
        |       ИНАЧЕ ВЫБОР
        |               КОГДА ЕСТЬNULL(пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ВыгрузитьОстаток, 0) = 0
        |                   ТОГДА ИСТИНА
        |               ИНАЧЕ ЛОЖЬ
        |           КОНЕЦ
        |   КОНЕЦ КАК ДоставкаОформлена,
//Рарус Владимир Подрезов 23.10.2017
        |	ПОДСТРОКА(пкЗаданиеНаПеревозку.Повреждения, 0, 1000) КАК Повреждения,
        |	ВЫБОР
        |		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
        |				ИЛИ пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
        |					И пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
        |			ТОГДА РАЗНОСТЬДАТ(пкДатыАренды.ДатаОтгрузки, пкЗаданиеНаПеревозку.ДатаОтгрузки, ДЕНЬ) + 1
//Рарус Владимир Подрезов 26.10.2017 6825
        |		КОГДА пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)
        |				ИЛИ пкЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.Перекат)
        |					И пкЗаданиеНаПеревозку.ЗаданиеНаПеревозку <> ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)
        |			ТОГДА РАЗНОСТЬДАТ(пкЗаданиеНаПеревозку.ДатаАренды, пкСрокиАренды.Период, ДЕНЬ) + 1
//Рарус Владимир Подрезов Конец
        |		ИНАЧЕ 0
        |	КОНЕЦ КАК ДнейВАренде
//Рарус Владимир Подрезов Конец
//++ RARUS_IUC 20180112
		|	, ВТ_Пульты.Пульт КАК Пульт
//-- RARUS_IUC 20180112
//++ Рарус Лимаренко 25.01.2018
		|	, пкЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники.Договор.пкСканДоговора КАК ЕстьСкан
		|   , пкСтатусыТехникиСрезПоследних.Статус КАК СтатусТехники
//-- Рарус Лимаренко 25.01.2018
        |ИЗ
        |   Документ.пкЗаданиеНаПеревозку КАК пкЗаданиеНаПеревозку
        |       ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
        |           пкРасчетыСКлиентамиПоАрендеОбороты.ЗаявкаНаАрендуТехники КАК ЗаявкаНаАрендуТехники,
        |           СУММА(пкРасчетыСКлиентамиПоАрендеОбороты.СуммаПриход) КАК СуммаПриход,
        |           СУММА(пкРасчетыСКлиентамиПоАрендеОбороты.СуммаРасход) КАК СуммаРасход
        |       ИЗ
        |           РегистрНакопления.пкРасчетыСКлиентамиПоАренде.Обороты КАК пкРасчетыСКлиентамиПоАрендеОбороты
        |       
        |       СГРУППИРОВАТЬ ПО
        |           пкРасчетыСКлиентамиПоАрендеОбороты.ЗаявкаНаАрендуТехники) КАК РасчетыСКлиентамиПоАренде
        |       ПО пкЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники = РасчетыСКлиентамиПоАренде.ЗаявкаНаАрендуТехники
        |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.пкМоделиКДоставкеПоЗаявкамНаАрендуТехники.Остатки КАК пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки
        |       ПО пкЗаданиеНаПеревозку.Ссылка = пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаданиеНаПеревозку
        |           И пкЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники = пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаявкаНаАрендуТехники
        |           И пкЗаданиеНаПеревозку.Модель = пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.Модель
//Рарус Владимир Подрезов 23.10.2017
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкДатыАренды КАК пкДатыАренды
        |		ПО пкЗаданиеНаПеревозку.Ссылка = пкДатыАренды.Регистратор
//Рарус Владимир Подрезов Конец
//Рарус Владимир Подрезов 26.10.2017 6825
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкСрокиАренды.СрезПоследних(, 
		|				НомерМодели = 1
        |				И ТипДокумента = ЗНАЧЕНИЕ(Перечисление.пкТипыДокументовДляСроковАренды.ЗаявкаНаАрендуТехники)
        |				И ЭтоОкончаниеАренды) КАК пкСрокиАренды
        |		ПО пкЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники = пкСрокиАренды.ЗаявкаНаАрендуТехники
        |			И пкЗаданиеНаПеревозку.Модель = пкСрокиАренды.Модель
//Рарус Владимир Подрезов Конец
//-- RARUS_IUC 20180112
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Пульты КАК ВТ_Пульты
		|		ПО (ВТ_Пульты.ЗаданиеНаПеревозку = пкЗаданиеНаПеревозку.Ссылка)
//-- RARUS_IUC 20180112
//++ Рарус Лимаренко 25.01.2018
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкСтатусыТехники.СрезПоследних(,) КАК пкСтатусыТехникиСрезПоследних
		|		ПО пкЗаданиеНаПеревозку.Техника = пкСтатусыТехникиСрезПоследних.Техника
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
		|		ПО пкЗаданиеНаПеревозку.Техника = ОбъектыЭксплуатации.Ссылка
//-- Рарус Лимаренко 25.01.2018
		|ГДЕ
//Рарус Владимир Подрезов 07.09.2017
		//|	пкЗаданиеНаПеревозку.Статус = ЗНАЧЕНИЕ(Перечисление.пкСтатусыЗаданийНаПеревозку.КДоставке) "
        |	(&ЛюбойСтатус 
        |		ИЛИ пкЗаданиеНаПеревозку.Статус = &СтатусЗадания) "
//Рарус Владимир Подрезов Конец
        + ?(Объект.ВидПеревозки = 1, " И пкЗаданиеНаПеревозку.ВидОперации = Значение(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)", 
            ?(Объект.ВидПеревозки = 2, " И пкЗаданиеНаПеревозку.ВидОперации = Значение(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)", "")) + "
        |   И пкЗаданиеНаПеревозку.ДатаОтгрузки МЕЖДУ &ПериодОтгрузкиНачало И &ПериодОтгрузкиОкончание
        |   И пкЗаданиеНаПеревозку.Проведен";
                
    ИначеЕсли Объект.РежимОтображения = 1 Тогда
        ЗаданияНаПеревозку.ТекстЗапроса = 
        "ВЫБРАТЬ
        |   ЗаданияНаПеревозку.Ссылка,
        |   ЗаданияНаПеревозку.ДатаОтгрузки,
        |   ЗаданияНаПеревозку.ВидОперации,
        |   ЗаданияНаПеревозку.ЗаявкаНаАрендуТехники КАК ЗаявкаНаАренду,
        |   ЗаданияНаПеревозку.Модель,
		//|   """" КАК Техника,
        |   ЗаданияНаПеревозку.СпособДоставки,
        |   ЗаданияНаПеревозку.АдресДоставки,
        |   ЗаданияНаПеревозку.ПодразделениеОтгрузки,
        |   ЗаданияНаПеревозку.Ссылка.Автор КАК Автор,
        |   ЗаданияНаПеревозку.ДатаАренды,
        |   ЗаданияНаПеревозку.Клиент,
        |   ЗаданияНаПеревозку.Менеджер,
        |   ЗаданияНаПеревозку.ОбъектСтроительства,
        |   ЗаданияНаПеревозку.Подразделение,
		|   ЗаданияНаПеревозку.Количество,
        |   ВЫБОР
        |       КОГДА ЕСТЬNULL(РасчетыСКлиентамиПоАренде.СуммаПриход, 0) > 0
        |           ТОГДА ИСТИНА
        |       ИНАЧЕ ЛОЖЬ
        |   КОНЕЦ КАК ЕстьСчет,
        |   ВЫБОР
        |       КОГДА ЕСТЬNULL(РасчетыСКлиентамиПоАренде.СуммаРасход, 0) >= ЕСТЬNULL(РасчетыСКлиентамиПоАренде.СуммаПриход, 0)
        |               И ЕСТЬNULL(РасчетыСКлиентамиПоАренде.СуммаПриход, 0) > 0
        |           ТОГДА ИСТИНА
        |       ИНАЧЕ ЛОЖЬ
        |   КОНЕЦ КАК ЕстьОплата,
        |   ЗаданияНаПеревозку.ЕстьДоговор,
        |   ЗаданияНаПеревозку.ОтгрузкаПодтверждена,
        |   ЗаданияНаПеревозку.Обоснование,
        |   ЗаданияНаПеревозку.КтоПодтвердил,
        |   ВЫБОР
        |       КОГДА ЗаданияНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)
        |           ТОГДА ВЫБОР
        |                   КОГДА ЕСТЬNULL(пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ПогрузитьОстаток, 0) = 0
        |                       ТОГДА ИСТИНА
        |                   ИНАЧЕ ЛОЖЬ
        |               КОНЕЦ
        |       ИНАЧЕ ВЫБОР
        |               КОГДА ЕСТЬNULL(пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ВыгрузитьОстаток, 0) = 0
        |                   ТОГДА ИСТИНА
        |               ИНАЧЕ ЛОЖЬ
        |           КОНЕЦ
        |   КОНЕЦ КАК ДоставкаОформлена
		|	, """" КАК Повреждения,
		|	0 КАК  ДнейВАренде
		//-- RARUS_IUC 20180112
		|		, Значение(Справочник.пкПультыДляПодъемников.ПустаяСсылка) КАК Пульт
		//-- RARUS_IUC 20180112 
//++ Рарус Лимаренко 25.01.2018
		|	, ЗаданияНаПеревозку.ЕстьСкан КАК ЕстьСкан
		|   , пкСтатусыТехникиСрезПоследних.Статус КАК СтатусТехники
//-- Рарус Лимаренко 25.01.2018
        |ИЗ
        |   (ВЫБРАТЬ
        |       МАКСИМУМ(пкЗаданиеНаПеревозку.Ссылка) КАК Ссылка,
        |       пкЗаданиеНаПеревозку.ДатаОтгрузки КАК ДатаОтгрузки,
        |       пкЗаданиеНаПеревозку.ВидОперации КАК ВидОперации,
        |       пкЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники КАК ЗаявкаНаАрендуТехники,
        |       пкЗаданиеНаПеревозку.Модель КАК Модель,
        |       КОЛИЧЕСТВО(пкЗаданиеНаПеревозку.Техника) КАК Количество,
        |       пкЗаданиеНаПеревозку.СпособДоставки КАК СпособДоставки,
        |       ПОДСТРОКА(пкЗаданиеНаПеревозку.АдресДоставки, 1, 250) КАК АдресДоставки,
        |       пкЗаданиеНаПеревозку.Подразделение КАК ПодразделениеОтгрузки,
        |       пкЗаданиеНаПеревозку.ДатаАренды КАК ДатаАренды,
        |       пкЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники.Партнер КАК Клиент,
        |       пкЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники.Менеджер КАК Менеджер,
        |       пкЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники.ОбъектСтроительства КАК ОбъектСтроительства,
        |       пкЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники.Подразделение КАК Подразделение,
        |       НЕОПРЕДЕЛЕНО КАК Техника,
        |       пкЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники.Договор.пкОригиналДоговора КАК ЕстьДоговор,
        |       пкЗаданиеНаПеревозку.ОтгрузкаПодтверждена КАК ОтгрузкаПодтверждена,
        |       ПОДСТРОКА(пкЗаданиеНаПеревозку.ОбоснованиеПодтверждения, 1, 250) КАК Обоснование,
//++ RARUS_IUC 20180212
		|		пкЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники.Договор.пкСканДоговора КАК ЕстьСкан,
//-- RARUS_IUC 20180212
		|       пкЗаданиеНаПеревозку.КтоПодтвердил КАК КтоПодтвердил
        |   ИЗ
        |       Документ.пкЗаданиеНаПеревозку КАК пкЗаданиеНаПеревозку
        |   ГДЕ
//Рарус Владимир Подрезов 07.09.2017
        //|       пкЗаданиеНаПеревозку.Статус = ЗНАЧЕНИЕ(Перечисление.пкСтатусыЗаданийНаПеревозку.КДоставке) "
        |       (&ЛюбойСтатус 
        |       	ИЛИ пкЗаданиеНаПеревозку.Статус = &СтатусЗадания) "
//Рарус Владимир Подрезов Конец
		+ ?(Объект.ВидПеревозки = 1, " И пкЗаданиеНаПеревозку.ВидОперации = Значение(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту)", 
            ?(Объект.ВидПеревозки = 2, " И пкЗаданиеНаПеревозку.ВидОперации = Значение(Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента)", "")) + "
        |       И пкЗаданиеНаПеревозку.ДатаОтгрузки МЕЖДУ &ПериодОтгрузкиНачало И &ПериодОтгрузкиОкончание
        |       И пкЗаданиеНаПеревозку.Проведен
        |   
        |   СГРУППИРОВАТЬ ПО
        |       пкЗаданиеНаПеревозку.ДатаОтгрузки,
        |       пкЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники,
        |       пкЗаданиеНаПеревозку.ВидОперации,
        |       пкЗаданиеНаПеревозку.Модель,
        |       пкЗаданиеНаПеревозку.СпособДоставки,
        |       ПОДСТРОКА(пкЗаданиеНаПеревозку.АдресДоставки, 1, 250),
        |       пкЗаданиеНаПеревозку.Подразделение,
        |       пкЗаданиеНаПеревозку.ДатаАренды,
        |       пкЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники.Партнер,
        |       пкЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники.Менеджер,
        |       пкЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники.ОбъектСтроительства,
        |       пкЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники.Договор.пкОригиналДоговора,
        |       пкЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники.Подразделение,
        |       пкЗаданиеНаПеревозку.ОтгрузкаПодтверждена,
        |       пкЗаданиеНаПеревозку.КтоПодтвердил,
        |       ПОДСТРОКА(пкЗаданиеНаПеревозку.ОбоснованиеПодтверждения, 1, 250)) КАК ЗаданияНаПеревозку
        |       ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
        |           пкРасчетыСКлиентамиПоАрендеОбороты.ЗаявкаНаАрендуТехники КАК ЗаявкаНаАрендуТехники,
        |           СУММА(пкРасчетыСКлиентамиПоАрендеОбороты.СуммаПриход) КАК СуммаПриход,
        |           СУММА(пкРасчетыСКлиентамиПоАрендеОбороты.СуммаРасход) КАК СуммаРасход
        |       ИЗ
        |           РегистрНакопления.пкРасчетыСКлиентамиПоАренде.Обороты КАК пкРасчетыСКлиентамиПоАрендеОбороты
        |       
        |       СГРУППИРОВАТЬ ПО
        |           пкРасчетыСКлиентамиПоАрендеОбороты.ЗаявкаНаАрендуТехники) КАК РасчетыСКлиентамиПоАренде
        |       ПО ЗаданияНаПеревозку.ЗаявкаНаАрендуТехники = РасчетыСКлиентамиПоАренде.ЗаявкаНаАрендуТехники
        |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.пкМоделиКДоставкеПоЗаявкамНаАрендуТехники.Остатки КАК пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки
        |       ПО ЗаданияНаПеревозку.Ссылка = пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаданиеНаПеревозку
        |           И ЗаданияНаПеревозку.ЗаявкаНаАрендуТехники = пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаявкаНаАрендуТехники
        |           И ЗаданияНаПеревозку.Модель = пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.Модель
//++ Рарус Лимаренко 25.01.2018
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пкСтатусыТехники.СрезПоследних(,) КАК пкСтатусыТехникиСрезПоследних
		|		ПО ЗаданияНаПеревозку.Техника = пкСтатусыТехникиСрезПоследних.Техника
//-- Рарус Лимаренко 25.01.2018
		|";
    КонецЕсли;  

КонецПроцедуры

//Рарус Владимир Подрезов 07.09.2017
&НаКлиенте
Процедура СтатусЗаданияПриИзменении(Элемент)
	СтатусЗаданияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СтатусЗаданияПриИзмененииНаСервере()
	
	Если Объект.СтатусЗадания = 1 Тогда //Запланировано
	    ЗаданияНаПеревозку.Параметры.УстановитьЗначениеПараметра("ЛюбойСтатус",		Ложь);
	    ЗаданияНаПеревозку.Параметры.УстановитьЗначениеПараметра("СтатусЗадания",	Перечисления.пкСтатусыЗаданийНаПеревозку.Запланировано);
	ИначеЕсли Объект.СтатусЗадания = 2 Тогда //Все
	    ЗаданияНаПеревозку.Параметры.УстановитьЗначениеПараметра("ЛюбойСтатус",		Истина);
	    ЗаданияНаПеревозку.Параметры.УстановитьЗначениеПараметра("СтатусЗадания",	Перечисления.пкСтатусыЗаданийНаПеревозку.КДоставке);
    Иначе //К доставке
	    ЗаданияНаПеревозку.Параметры.УстановитьЗначениеПараметра("ЛюбойСтатус",		Ложь);
	    ЗаданияНаПеревозку.Параметры.УстановитьЗначениеПараметра("СтатусЗадания",	Перечисления.пкСтатусыЗаданийНаПеревозку.КДоставке);
    КонецЕсли;
	
КонецПроцедуры
//Рарус Владимир Подрезов Конец

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
    
    Если НЕ ЗначениеЗаполнено(ОтборМенеджер) Тогда
         ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    ЗаданияНаПеревозку, "Менеджер", , , , Ложь);
    Иначе
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    ЗаданияНаПеревозку, "Менеджер", ОтборМенеджер, , , Истина);
    КонецЕсли;
        
КонецПроцедуры

&НаКлиенте
Процедура КлиентПриИзменении(Элемент)
    
    Если НЕ ЗначениеЗаполнено(ОтборКлиент) Тогда
         ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    ЗаданияНаПеревозку, "Клиент", , , , Ложь);
    Иначе
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    ЗаданияНаПеревозку, "Клиент", ОтборКлиент, , , Истина);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбъектСтроительстваПриИзменении(Элемент)
    
    Если НЕ ЗначениеЗаполнено(ОтборОбъектСтроительства) Тогда
         ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    ЗаданияНаПеревозку, "ОбъектСтроительства", , , , Ложь);
    Иначе
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    ЗаданияНаПеревозку, "ОбъектСтроительства", ОтборОбъектСтроительства, , , Истина);
    КонецЕсли;
        
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОтгрузкиПриИзменении(Элемент)
    
    ПодразделениеОтгрузкиПриИзмененииНаСервере();
    
КонецПроцедуры

&НаСервере
Процедура ПодразделениеОтгрузкиПриИзмененииНаСервере()
    
    Если НЕ ЗначениеЗаполнено(ОтборПодразделениеОтгрузки) Тогда
         ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    ЗаданияНаПеревозку, "ПодразделениеОтгрузки", , , , Ложь);
    Иначе
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    ЗаданияНаПеревозку, "ПодразделениеОтгрузки", ОтборПодразделениеОтгрузки, , , Истина);
            
        Элементы.ПодтвердитьОтгрузку.Видимость                    = ОтборПодразделениеОтгрузки.пкТребуетсяПодтверждениеОтгрузки;
        Элементы.ЗаданияНаПеревозкуОтгрузкаПодтверждена.Видимость = ОтборПодразделениеОтгрузки.пкТребуетсяПодтверждениеОтгрузки;
        Элементы.ЗаданияНаПеревозкуКтоПодтвердил.Видимость        = ОтборПодразделениеОтгрузки.пкТребуетсяПодтверждениеОтгрузки;
        Элементы.ЗаданияНаПеревозкуОбоснование.Видимость          = ОтборПодразделениеОтгрузки.пкТребуетсяПодтверждениеОтгрузки;
    КонецЕсли;
    
КонецПроцедуры    

&НаКлиенте
Процедура МодельПриИзменении(Элемент)
    
    Если НЕ ЗначениеЗаполнено(ОтборМодель) Тогда
         ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    ЗаданияНаПеревозку, "Модель", , , , Ложь);
    Иначе
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		    ЗаданияНаПеревозку, "Модель", ОтборМодель, , , Истина);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтгрузкиНачалоПриИзменении(Элемент)
    
    УстановитьПериодОтгрузки();
    
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьПериодЗавершение(ВыбранныйПериод, ДополнительныеПараметры) Экспорт
    
    УстановитьПериодОтгрузки();  
    
КонецПроцедуры    

&НаКлиенте
Процедура ПериодОтгрузкиОкончаниеПриИзменении(Элемент)
    
   УстановитьПериодОтгрузки();
    
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериодОтгрузки()
    
    ЗаданияНаПеревозку.Параметры.УстановитьЗначениеПараметра("ПериодОтгрузкиНачало",    НачалоДня(ПериодОтгрузкиНачало));
    ЗаданияНаПеревозку.Параметры.УстановитьЗначениеПараметра("ПериодОтгрузкиОкончание", КонецДня(ПериодОтгрузкиОкончание));
    
КонецПроцедуры    

&НаКлиенте
Процедура ПодтвердитьОтгрузку(Команда)
    ВыделенныеСтроки = Элементы.ЗаданияНаПеревозку.ВыделенныеСтроки;
    
    Если ПроверитьВозможностьПодтверждения() И ВыделенныеСтроки.Количество() > 0 Тогда
        ЗаданияДляПодтверждения.Очистить();
        
        Для Каждого ВыделеннаяСтрока ИЗ ВыделенныеСтроки Цикл
            Строка = Элементы.ЗаданияНаПеревозку.ДанныеСтроки(ВыделеннаяСтрока);
            Если Строка.ВидОперации = ПредопределенноеЗначение("Перечисление.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту")
                И НЕ Строка.ОтгрузкаПодтверждена Тогда
                НоваяСтрока = ЗаданияДляПодтверждения.Добавить();
                ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
                
                НоваяСтрока.ЗаданиеНаПеревозку = Строка.Ссылка;
            КонецЕсли;  
        КонецЦикла;  
                
        Если ЗаданияДляПодтверждения.Количество() > 0 Тогда
            ОткрытьФорму("Обработка.пкПланДоставки.Форма.ПодтверждениеОтгрузки", 
                Новый Структура("ЗаданияНаПеревозку", ЗаданияДляПодтверждения), ЭтаФорма);
        КонецЕсли;
    КонецЕсли;    
    
КонецПроцедуры

&НаСервере
Функция ПроверитьВозможностьПодтверждения()
        
    Если НЕ РольДоступна("ПолныеПрава") И НЕ РольДоступна("пкПолныеПрава") И НЕ РольДоступна("пкПодтверждениеОтгрузки") Тогда
        Сообщить("Нет прав на подтверждение отгрузки");  
        Возврат Ложь;
    Иначе
        Возврат Истина;
    КонецЕсли; 
    
КонецФункции  

&НаСервере
Процедура ЗаполнитьТаблицуЗаданийДляПодтверждения(ВыделенныеСтроки)
        
    //СхемаКомпоновкиДанных = Элементы.ЗаданияНаПеревозку.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
    //НастройкиКомпоновкиДанных = Элементы.ЗаданияНаПеревозку.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
    //
    //КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    //МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных
    //,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
    //
    //ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    //ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
    //
    //ТаблицаЗначений = Новый ТаблицаЗначений;
    //
    //ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    //ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
    //ПроцессорВывода.Вывести(ПроцессорКомпоновки);
            
КонецПроцедуры    

&НаКлиенте
Процедура Обновить(Команда)
    
    Элементы.ЗаданияНаПеревозку.Обновить();
    
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
    
    Если Объект.РежимОтображения = 0 Тогда
        ТекущиеДанные = Элементы.ЗаданияНаПеревозку.ТекущиеДанные;
        
        Если ТекущиеДанные <> Неопределено Тогда
            Отбор = Новый Структура();
			
			Если Поле.Имя = "ЗаданияНаПеревозкуДоставкаОформлена" Тогда
				СсылкаДоставка = ПолучитьСсылкуДокументаДоставки(ТекущиеДанные.Ссылка); 
				Если ЗначениеЗаполнено(СсылкаДоставка) Тогда
					Отбор.Вставить("Ключ", СсылкаДоставка);                 
					ОткрытьФорму("Документ.пкДоставка.Форма.ФормаДокумента", Отбор, ЭтаФорма);					
				КонецЕсли; 			
			Иначе			
				Отбор.Вставить("Ключ", ТекущиеДанные.Ссылка);                 
				ОткрытьФорму("Документ.пкЗаданиеНаПеревозку.Форма.ФормаДокумента", Отбор, ЭтаФорма);
			КонецЕсли; 

        КонецЕсли; 
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТехнику(Команда)
    
    ТекущиеДанные = Элементы.ЗаданияНаПеревозку.ТекущиеДанные;
    
    Если ТекущиеДанные <> Неопределено Тогда
		// {Рарус ilkond 2017.03.22 techlab@rarus.ru
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремениСКомментарием(
			"Обработка.пкПодборТехники.Форма: Открытие формы", "Обработка.пкПланДоставки.Форма.Команды.ПодобратьТехнику");
		// }Рарус ilkond 2017.03.22 techlab@rarus.ru 

        Если ТекущиеДанные.ВидОперации = ПредопределенноеЗначение("Перечисление.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента") Тогда
            ВидПеревозки = "Возврат";
        Иначе
            ВидПеревозки = "Отгрузка";
        КонецЕсли; 
    
        ЗаявкаНаАрендуТехники = ТекущиеДанные.ЗаявкаНаАренду;
        Модель                = ТекущиеДанные.Модель;
        Клиент                = ТекущиеДанные.Клиент;
        ОбъектСтроительства   = ТекущиеДанные.ОбъектСтроительства;
                        
        ПараметрЗаголовок = НСтр("ru = 'Подбор техники в документ %Документ%'");
        ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", ТекущиеДанные.Ссылка);
        
        ПараметрыФормы = Новый Структура;
        ПараметрыФормы.Вставить("Заголовок",           ПараметрЗаголовок);
        ПараметрыФормы.Вставить("Дата",                ТекущаяДата());
        ПараметрыФормы.Вставить("Документ",            ЗаявкаНаАрендуТехники);
        ПараметрыФормы.Вставить("ИзменениеСтроки",     Истина);
        ПараметрыФормы.Вставить("Модель",              Модель);
        ПараметрыФормы.Вставить("Клиент",              Клиент);
        ПараметрыФормы.Вставить("ОбъектСтроительства", ОбъектСтроительства);
        ПараметрыФормы.Вставить("КоличествоПоМодели",  1);
        ПараметрыФормы.Вставить("ИсключаемаяТехника",  Неопределено);
        ПараметрыФормы.Вставить("КодФормы",            ВидПеревозки);
        
        ОткрытьФорму("Обработка.пкПодборТехники.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
    КонецЕсли;  
    
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
    
    ТекущиеДанные = Элементы.ЗаданияНаПеревозку.ТекущиеДанные;
    
    Если ИсточникВыбора.ИмяФормы = "Обработка.пкПодборТехники.Форма.Форма" Тогда                
        Если ЗначениеЗаполнено(ВыбранноеЗначение) И ТекущиеДанные <> Неопределено Тогда
            УказатьТехнику(ТекущиеДанные.Ссылка, ВыбранноеЗначение);
        КонецЕсли;    
    КонецЕсли;
    
    Элементы.ЗаданияНаПеревозку.Обновить();
        
КонецПроцедуры

&НаКлиенте
Процедура УбратьВыбраннуюТехнику(Команда)
    
    ПоказатьВопрос(Новый ОписаниеОповещения("УбратьВыбраннуюТехникуЗавершение", ЭтаФорма), "Будет снят резерв с выбранной техники, продолжить?", РежимДиалогаВопрос.ДаНет);
    
КонецПроцедуры

&НаКлиенте
Процедура УбратьВыбраннуюТехникуЗавершение(Результат, Параметры) Экспорт
    
    Если Результат = КодВозвратаДиалога.Да Тогда
        ТекущиеДанные = Элементы.ЗаданияНаПеревозку.ТекущиеДанные;
        
        Если ТекущиеДанные <> Неопределено Тогда
            УказатьТехнику(ТекущиеДанные.Ссылка);   
        КонецЕсли;
        
        Элементы.ЗаданияНаПеревозку.Обновить();
    КонецЕсли;    
        
КонецПроцедуры 

&НаСервере
Процедура УказатьТехнику(ЗаданиеНаПеревозку, Техника = Неопределено)
    
    ЗаданиеНаПеревозкуОбъект = ЗаданиеНаПеревозку.ПолучитьОбъект();
    ЗаданиеНаПеревозкуОбъект.Техника = Техника;
    
    Попытка
        ЗаданиеНаПеревозкуОбъект.Записать(РежимЗаписиДокумента.Проведение);        
    Исключение
    КонецПопытки;
        
КонецПроцедуры

//Рарус Владимир Подрезов 11.10.2017 4561
&НаКлиенте
Процедура УстановитьТехникуВВозвраты(Команда)
	
	УстановитьТехникуВВозвратыНаСервере();
    Элементы.ЗаданияНаПеревозку.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТехникуВВозвратыНаСервере()
	
	СхемаКомпоновкиДанных = Элементы.ЗаданияНаПеревозку.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
    НастройкиКомпоновкиДанных = Элементы.ЗаданияНаПеревозку.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
    
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных
                                                  ,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
    
    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
    
    ТаблицаЗаданий = Новый ТаблицаЗначений;
    
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ПроцессорВывода.УстановитьОбъект(ТаблицаЗаданий);
    ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Если ТаблицаЗаданий.Колонки.Найти("Ссылка") <> Неопределено Тогда
		Для Каждого текСтрока Из ТаблицаЗаданий Цикл
			Если Не ЗначениеЗаполнено(текСтрока.Ссылка) Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ (текСтрока.Ссылка.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.ВозвратОтКлиента
					ИЛИ (текСтрока.Ссылка.ВидОперации = Перечисления.пкВидыОперацийЗаданийНаПеревозку.Перекат
						И НЕ ЗначениеЗаполнено(текСтрока.Ссылка.ЗаданиеНаПеревозку)))
			Тогда
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(текСтрока.Ссылка.Техника) Тогда
				Продолжить;
			КонецЕсли;
			
			тТехника = ПолучитьТехникуНаОбъекте(текСтрока.Ссылка);
			Если ЗначениеЗаполнено(тТехника) Тогда
				тОбъект = текСтрока.Ссылка.ПолучитьОбъект();
				тОбъект.Техника = тТехника;
				Попытка
					тОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				Исключение
					тСообщение = Новый СообщениеПользователю;
					тСообщение.Текст = ОписаниеОшибки();
					тСообщение.Сообщить();
					Возврат;
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТехникуНаОбъекте(тЗадание)
	
	тТехника = "";
	
	Если НЕ ЗначениеЗаполнено(тЗадание) Тогда
		Возврат тТехника;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(тЗадание.ЗаявкаНаАрендуТехники) Тогда
		Возврат тТехника;
	КонецЕсли;
	
	ЗапросСтутусТехникиПоЗаявке = Новый Запрос;
	ЗапросСтутусТехникиПоЗаявке.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	пкСтатусыТехникиСрезПоследних.Техника
	|ИЗ
	|	РегистрСведений.пкСтатусыТехники.СрезПоследних(
	|			,
	|			ЗаявкаНаАрендуТехники = &ЗаявкаНаАрендуТехники
	|				И Техника.пкМодель = &Модель) КАК пкСтатусыТехникиСрезПоследних
	|ГДЕ
	|	пкСтатусыТехникиСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.пкСтатусыТехники.ВАренде)";
	ЗапросСтутусТехникиПоЗаявке.УстановитьПараметр("Модель", тЗадание.Модель);
	ЗапросСтутусТехникиПоЗаявке.УстановитьПараметр("ЗаявкаНаАрендуТехники", тЗадание.ЗаявкаНаАрендуТехники);
	ТехникаВАренде = ЗапросСтутусТехникиПоЗаявке.Выполнить().Выгрузить();
	Если ТехникаВАренде.Количество() = 1 Тогда
		тТехника = ТехникаВАренде[0].Техника;
	КонецЕсли;
	
	Возврат тТехника;
	
КонецФункции
//Рарус Владимир Подрезов Конец

&НаСервереБезКонтекста
Функция ПолучитьСсылкуДокументаДоставки(ЗаданиеНаПеревозкуСсылка)

	ВозвратДоставка = Документы.пкДоставка.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	пкДоставкаЗаданияНаПеревозку.Ссылка
		|ИЗ
		|	Документ.пкДоставка.ЗаданияНаПеревозку КАК пкДоставкаЗаданияНаПеревозку
		|ГДЕ
		|	пкДоставкаЗаданияНаПеревозку.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозку";
	
	Запрос.УстановитьПараметр("ЗаданиеНаПеревозку", ЗаданиеНаПеревозкуСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл  
		ВозвратДоставка = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат ВозвратДоставка;
	
КонецФункции // ПолучитьСсылкуДокументаДоставки(ЗаданиеНаПеревозкуСсылка)
 