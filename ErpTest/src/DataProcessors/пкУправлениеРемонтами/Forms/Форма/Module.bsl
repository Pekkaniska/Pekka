
&НаКлиенте
Процедура ОтборСтатусПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗаказНарядыСписок, "Статус", ОтборСтатус, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ОтборСтатус));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусОчистка(Элемент, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(ОтборСтатус) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ОтборТехникаПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗаказНарядыСписок, "Техника", ОтборТехника, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ОтборТехника));
	ОбновитьДеревоЗаданияНаРемонт();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКлиентПриИзменении(Элемент)
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗаказНарядыСписок, "Клиент", ОтборПартнер, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ОтборПартнер));
КонецПроцедуры

&НаКлиенте
Процедура ОтборОбъектСтроительстваПриИзменении(Элемент)
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗаказНарядыСписок, "ОбъектСтроительства", ОтборОбъектСтроительства, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ОтборОбъектСтроительства));
КонецПроцедуры

&НаКлиенте
Процедура ОтборТехникаОчистка(Элемент, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(ОтборТехника) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ОтборКлиентОчистка(Элемент, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(ОтборПартнер) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ОтборОбъектСтроительстваОчистка(Элемент, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(ОтборОбъектСтроительства) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоЗаданияНаРемонт()
    
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	пкЗаданияНаРемонтОстатки.ЗаданиеНаРемонт,
	|	пкЗаданияНаРемонтОстатки.ВидРемонта КАК ВидРемонта,
	|	пкЗаданияНаРемонтОстатки.Работа,
	|	пкЗаданиеНаРемонтПланируемыеРаботы.Количество КАК Количество,
	|	пкЗаданияНаРемонтОстатки.ЗаданиеНаРемонт.ОбъектЭксплуатации КАК Техника,
	|	пкЗаданияНаРемонтОстатки.Работа.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	пкЗаданияНаРемонтОстатки.ЗаданиеНаРемонт.ТребуемаяДата КАК ТребуемаяДата,
	|	ЛОЖЬ КАК Пометка,
	|	пкЗаданияНаРемонтОстатки.ЗаданиеНаРемонт.Организация КАК Организация,
	|	пкЗаданияНаРемонтОстатки.ЗаданиеНаРемонт.Подразделение КАК Подразделение
	|ИЗ
	|	РегистрНакопления.пкЗаданияНаРемонт.Остатки КАК пкЗаданияНаРемонтОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.пкЗаданиеНаРемонт.ПланируемыеРаботы КАК пкЗаданиеНаРемонтПланируемыеРаботы
	|		ПО пкЗаданияНаРемонтОстатки.ЗаданиеНаРемонт = пкЗаданиеНаРемонтПланируемыеРаботы.Ссылка
	|			И пкЗаданияНаРемонтОстатки.Работа = пкЗаданиеНаРемонтПланируемыеРаботы.Работа
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ОтборПоМодели
	|				ТОГДА пкЗаданияНаРемонтОстатки.ЗаданиеНаРемонт.ОбъектЭксплуатации.пкМодель = &Модель
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ОтборПоТехнике
	|				ТОГДА пкЗаданияНаРемонтОстатки.ЗаданиеНаРемонт.ОбъектЭксплуатации = &Техника
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ОтборПоДате
	|				ТОГДА пкЗаданияНаРемонтОстатки.ЗаданиеНаРемонт.ТребуемаяДата <= &ТребуемаяДата
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ОтборПоПодразделению
	|				ТОГДА пкЗаданияНаРемонтОстатки.ЗаданиеНаРемонт.Подразделение = &Подразделение
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И пкЗаданияНаРемонтОстатки.КоличествоОстаток > 0
	|ИТОГИ
	|	СУММА(Количество)
	|ПО
	|	Техника,
	|	ВидРемонта";
	Если ЗначениеЗаполнено(ОтборТехника) Тогда 
		Запрос.УстановитьПараметр("ОтборПоТехнике",Истина);
		Запрос.УстановитьПараметр("Техника",ОтборТехника);
	Иначе
		Запрос.УстановитьПараметр("ОтборПоТехнике",Ложь);
		Запрос.УстановитьПараметр("Техника",Неопределено);
	КонецЕсли;
	Если ЗначениеЗаполнено(ОтборМодель) Тогда 
		Запрос.УстановитьПараметр("ОтборПоМодели",Истина);
		Запрос.УстановитьПараметр("Модель",ОтборМодель);
	Иначе
		Запрос.УстановитьПараметр("ОтборПоМодели",Ложь);
		Запрос.УстановитьПараметр("Модель",Неопределено);
	КонецЕсли;
	Если ЗначениеЗаполнено(ОтборЗаказНаРемонтТребуемаяДата) Тогда 
		Запрос.УстановитьПараметр("ОтборПоДате",Истина);
		Запрос.УстановитьПараметр("ТребуемаяДата",ОтборЗаказНаРемонтТребуемаяДата);
	Иначе
		Запрос.УстановитьПараметр("ОтборПоДате",Ложь);
		Запрос.УстановитьПараметр("ТребуемаяДата",Неопределено);
	КонецЕсли;
	Если ЗначениеЗаполнено(ОтборПодразделение) Тогда 
		Запрос.УстановитьПараметр("ОтборПоПодразделению",Истина);
		Запрос.УстановитьПараметр("Подразделение",ОтборПодразделение);
	Иначе
		Запрос.УстановитьПараметр("ОтборПоПодразделению",Ложь);
		Запрос.УстановитьПараметр("Подразделение",Неопределено);
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить();
	
    Рез = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
    
    ЗначениеВРеквизитФормы(Рез, "ДеревоЗаданияНаРемонт");

КонецПроцедуры // ОбновитьДеревоДокументов()
  
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
//++ Рарус Лимаренко 30.10.17 Заявка №6836
	Если Параметры.Свойство("ОтборПодразделение")  Тогда
		ОтборПодразделение = Параметры.ОтборПодразделение;
	Иначе
		Менеджер = Пользователи.ТекущийПользователь();
		ОтборПодразделение = Менеджер.Подразделение;
	КонецЕсли;
//-- Рарус Лимаренко 30.10.17 Заявка №6836
	
	//Рарус Владимир Подрезов 23.01.2017
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ОтгрузкаТехники, "Подразделение", ОтборПодразделение, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ОтборПодразделение));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗаказНарядыСписок, "Подразделение", ОтборПодразделение, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ОтборПодразделение));
	//Рарус Владимир Подрезов Конец
	ОбновитьДеревоЗаданияНаРемонт();
	ОтборПериод = ТекущаяДата() + 86400;
	//Рарус Владимир Подрезов 23.01.2017
	текКалендарь = Константы.ОсновнойКалендарьПредприятия.Получить();
	Если ЗначениеЗаполнено(текКалендарь) Тогда
		ЗапросКалендарь = Новый Запрос;
		ЗапросКалендарь.Текст = 
		"ВЫБРАТЬ
		|	МИНИМУМ(ДанныеПроизводственногоКалендаря.Дата) КАК БлижайшийРабочийДень
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.Дата >= &ТекДата
		|	И ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
		|	И ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь";
		ЗапросКалендарь.УстановитьПараметр("ТекДата", НачалоДня(ОтборПериод));
		ЗапросКалендарь.УстановитьПараметр("ПроизводственныйКалендарь", текКалендарь.ПроизводственныйКалендарь);
		РезЗапросаК = ЗапросКалендарь.Выполнить().Выбрать();
		Если РезЗапросаК.Следующий() Тогда
			ОтборПериод = РезЗапросаК.БлижайшийРабочийДень;
		КонецЕсли;
	КонецЕсли;
//Рарус Владимир Подрезов Конец
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ОтгрузкаТехники, "Период", КонецДня(ОтборПериод), Истина);
	ИзменитьЗапросДинамическогоСписка();
	УстановитьОтборЗакрытыхЗН();
    
    Если Параметры.Свойство("МассивЗаказНарядов") Тогда
	    ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗаказНарядыСписок, "Ссылка", 
            Параметры.МассивЗаказНарядов, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
    КонецЕсли;    

КонецПроцедуры


&НаКлиенте
Процедура ЗаданияНаРемонтПометкаПриИзменении(Элемент)
	
	ИДТекущейСтроки = Элементы.ЗаданияНаРемонт.ТекущаяСтрока;

    Если ИДТекущейСтроки <> Неопределено Тогда

        ЭлементКоллекции = ЭтаФорма.ДеревоЗаданияНаРемонт.НайтиПоИдентификатору(
            ИДТекущейСтроки);

        Если ЭлементКоллекции.Пометка = 2 Тогда
            ЭлементКоллекции.Пометка = 0;
        КонецЕсли;

        УстановкаФлажков(ЭлементКоллекции, ЭлементКоллекции.Пометка);

        Родитель = ЭлементКоллекции.ПолучитьРодителя();
        Пока Родитель <> Неопределено Цикл
            Родитель.Пометка = ?(УстановленноДляВсех(ЭлементКоллекции),
                ЭлементКоллекции.Пометка, 2);
            ЭлементКоллекции = Родитель;
            Родитель = ЭлементКоллекции.ПолучитьРодителя();
        КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановкаФлажков(ЭлементКоллекции, ЗначениеПометки)

    ПодчинЭлементы = ЭлементКоллекции.ПолучитьЭлементы();
    Для Каждого ТекЭлемент Из ПодчинЭлементы Цикл
        ТекЭлемент.Пометка = ЗначениеПометки;
        УстановкаФлажков(ТекЭлемент, ТекЭлемент.Пометка);
    КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция УстановленноДляВсех(ЭлементКоллекции)

    СоседниеЭлементы =
        ЭлементКоллекции.ПолучитьРодителя().ПолучитьЭлементы();
    Для Каждого ТекЭлемент Из СоседниеЭлементы Цикл
        Если ТекЭлемент.Пометка <> ЭлементКоллекции.Пометка Тогда
            Возврат Ложь;
        КонецЕсли;
    КонецЦикла;
    Возврат Истина;

КонецФункции 

&НаКлиенте
Процедура ОтборЗаказНаРемонтТребуемаяДатаПриИзменении(Элемент)
	
	ОбновитьДеревоЗаданияНаРемонт();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаказНаряды(Команда)
	
	МассивПланируемыеРаботы = Новый Массив;
	СтруктураСтрокой = "ВидРемонта, ЗаданиеНаРемонт, Работа, Количество, ЕдиницаИзмерения";
	Для Каждого СтрокаДереваГруппа Из ДеревоЗаданияНаРемонт.ПолучитьЭлементы() Цикл
		Если СтрокаДереваГруппа.Пометка > 0 Тогда
			СтруктураЗаполнения = Новый Структура;
			СтруктураЗаполнения.Вставить("Техника",СтрокаДереваГруппа.Техника);
			МассивПланируемыеРаботы.Очистить();
			ВидРемонта = Неопределено;
			Для Каждого СтрокаДереваГруппаВидРемонта из СтрокаДереваГруппа.ПолучитьЭлементы() Цикл
				Если СтрокаДереваГруппаВидРемонта.Пометка > 0 Тогда
					Для Каждого СтрокаДерева из СтрокаДереваГруппаВидРемонта.ПолучитьЭлементы() Цикл
						Если СтрокаДерева.Пометка > 0 Тогда
							Организация = СтрокаДерева.Организация;
							НоваяСтрока = Новый Структура(СтруктураСтрокой);
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
							МассивПланируемыеРаботы.Добавить(НоваяСтрока);
							Подразделение = СтрокаДерева.Подразделение;
						КонецЕсли;	
					КонецЦикла;
					Если ЗначениеЗаполнено(ВидРемонта) Тогда 
						ВидРемонта = ПолучитьПриоритетныйВидРемонта(ВидРемонта,СтрокаДереваГруппаВидРемонта.ВидРемонта);
					Иначе
						ВидРемонта = СтрокаДереваГруппаВидРемонта.ВидРемонта;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			СтруктураЗаполнения.Вставить("Организация",Организация);
			СтруктураЗаполнения.Вставить("ПланируемыеРаботы",МассивПланируемыеРаботы);
			СтруктураЗаполнения.Вставить("ВидРемонта",ВидРемонта);
			СтруктураЗаполнения.Вставить("Подразделение",Подразделение);
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Основание", СтруктураЗаполнения);
			
			ОткрытьФорму("Документ.пкЗаказНаряд.ФормаОбъекта",ПараметрыФормы,ЭтаФорма);
			
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПриоритетныйВидРемонта(ВидРемонта1,ВидРемонта2)
	
	СоответствиеТиповРемонта = Новый Соответствие;
	СоответствиеТиповРемонта.Вставить(Перечисления.пкТипыРемонтов.Осмотр,1);
	СоответствиеТиповРемонта.Вставить(Перечисления.пкТипыРемонтов.ТО,2);
	СоответствиеТиповРемонта.Вставить(Перечисления.пкТипыРемонтов.Обычный,3);
	СоответствиеТиповРемонта.Вставить(Перечисления.пкТипыРемонтов.Долгосрочный,4);
	
	Приоритет1 = СоответствиеТиповРемонта.Получить(ВидРемонта1.ОбщийВидРемонта.пкТипРемонта);
	Приоритет2 = СоответствиеТиповРемонта.Получить(ВидРемонта2.ОбщийВидРемонта.пкТипРемонта);
	Приоритет1 = ?(Приоритет1 = Неопределено,0,Приоритет1);
	Приоритет2 = ?(Приоритет2 = Неопределено,0,Приоритет2);
	Если Приоритет1 >= Приоритет2 Тогда 
		Возврат ВидРемонта1;
	Иначе	
		Возврат ВидРемонта2;
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Процедура ОтборМодельПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗаказНарядыСписок, "Модель", ОтборМодель, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ОтборМодель));
	ОбновитьДеревоЗаданияНаРемонт();
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ОтгрузкаТехники, "Модель", ОтборМодель, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ОтборМодель));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборМодельОчистка(Элемент, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(ОтборМодель) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаРемонтВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЗаданияНаРемонт.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ЗаданиеНаРемонт) Тогда 
		Параметр = Новый Структура("Ключ", ТекущиеДанные.ЗаданиеНаРемонт);
		ОткрытьФорму("Документ.пкЗаданиеНаРемонт.Форма.ФормаДокумента",Параметр);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДеревоЗаданияНаРемонт();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериодПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ОтгрузкаТехники, "Период", КонецДня(ОтборПериод), Истина);
	ИзменитьЗапросДинамическогоСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтгрузкаТехникиПодразделениеПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ОтгрузкаТехники, "Подразделение", ОтборПодразделение, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ОтборПодразделение));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗаказНарядыСписок, "Подразделение", ОтборПодразделение, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ОтборПодразделение));
	ОбновитьДеревоЗаданияНаРемонт();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтгрузкаТехникиПодразделениеОчистка(Элемент, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(ОтборПодразделение) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТехнику(Команда)
	
	ТекущиеДанные = Элементы.ОтгрузкаТехники.ТекущиеДанные;
    
    Если ТекущиеДанные <> Неопределено Тогда
        ВидПеревозки  = "Отгрузка";
		ЗаявкаНаАрендуТехники = ТекущиеДанные.ЗаявкаНаАрендуТехники;
        Модель                = ТекущиеДанные.Модель;
        Клиент                = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ЗаявкаНаАрендуТехники,"Контрагент");
        ОбъектСтроительства   = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ЗаявкаНаАрендуТехники,"ОбъектСтроительства");
        
        ПодборТехники = Истина;
        
        Если ЗначениеЗаполнено(ТекущиеДанные.Техника) Тогда
            ПодборТехники = Ложь;
            
            ИсключаемаяТехника = Новый Массив();
            ИсключаемаяТехника.Добавить(ТекущиеДанные.Техника);
        Иначе
            ИсключаемаяТехника = Неопределено;
        КонецЕсли;    
        
        ПараметрЗаголовок = НСтр("ru = 'Подбор техники в документ %Документ%'");
        Если ЗначениеЗаполнено(ТекущиеДанные.ЗаявкаНаАрендуТехники) Тогда
        	ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", ТекущиеДанные.ЗаявкаНаАрендуТехники);
        Иначе
        	ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='заявку на аренду техники'"));
        КонецЕсли;
        
        ПараметрыФормы = Новый Структура;
        ПараметрыФормы.Вставить("Заголовок",           ПараметрЗаголовок);
        ПараметрыФормы.Вставить("Дата",                ТекущаяДата());
        ПараметрыФормы.Вставить("Документ",            ЗаявкаНаАрендуТехники);
        ПараметрыФормы.Вставить("ИзменениеСтроки",     НЕ ПодборТехники);
        ПараметрыФормы.Вставить("Модель",              Модель);
        ПараметрыФормы.Вставить("Клиент",              Клиент);
        ПараметрыФормы.Вставить("ОбъектСтроительства", ОбъектСтроительства);
        ПараметрыФормы.Вставить("КоличествоПоМодели",  1);
        ПараметрыФормы.Вставить("ИсключаемаяТехника",  ИсключаемаяТехника);
        ПараметрыФормы.Вставить("КодФормы",            ВидПеревозки);
        
        ОткрытьФорму("Обработка.пкПодборТехники.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ЗаявкаНаАрендуТехники, ЗаданиеНаОтгрузкуКлиенту, ДатаОтгрузки, Модель)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
    
    Если ТаблицаТоваров.Количество() > 0 Тогда
                
        Если ЗначениеЗаполнено(ЗаданиеНаОтгрузкуКлиенту) Тогда
            ЗаданиеНаПеревозку = ЗаданиеНаОтгрузкуКлиенту.ПолучитьОбъект();
            ЗаданиеНаПеревозку.Техника = ТаблицаТоваров[0].Техника;
            
            Попытка
                ЗаданиеНаПеревозку.Записать(РежимЗаписиДокумента.Проведение);        
            Исключение
            КонецПопытки;
            
        Иначе       
            СтруктураПоиска = Новый Структура("Номенклатура");
            СтруктураПоиска.Вставить("Номенклатура", Модель);
            
            НайденныеСтроки = ЗаявкаНаАрендуТехники.Товары.НайтиСтроки(СтруктураПоиска);
            
            Если НайденныеСтроки.Количество() > 0 Тогда
                ДатаАренды = НайденныеСтроки[0].ДатаНачалаАренды;
            Иначе
                ДатаАренды = ДатаОтгрузки;
            КонецЕсли;    
            
            Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
                
                СоздатьЗаданиеНаПеревозку(СтрокаТовара, ЗаявкаНаАрендуТехники, ДатаОтгрузки, ДатаАренды);
                
            КонецЦикла;
        КонецЕсли;
        
    КонецЕсли;     
        
КонецПроцедуры

&НаСервере
Процедура СоздатьЗаданиеНаПеревозку(СтрокаТовара, ЗаявкаНаАрендуТехники, ДатаОтгрузки, ДатаАренды)
        
    ЗаданиеНаПеревозку = Документы.пкЗаданиеНаПеревозку.СоздатьДокумент();
    
    ЗаданиеНаПеревозку.Дата                  = ТекущаяДата();
    ЗаданиеНаПеревозку.Статус                = Перечисления.пкСтатусыЗаданийНаПеревозку.Запланировано;
    
    ЗаданиеНаПеревозку.ВидОперации           = Перечисления.пкВидыОперацийЗаданийНаПеревозку.ДоставкаКлиенту;
        
    ЗаданиеНаПеревозку.ДатаОтгрузки          = ДатаОтгрузки;
    ЗаданиеНаПеревозку.ДатаАренды            = ДатаАренды;
    ЗаданиеНаПеревозку.ЗаявкаНаАрендуТехники = ЗаявкаНаАрендуТехники;
    ЗаданиеНаПеревозку.Модель                = СтрокаТовара.Номенклатура;
    ЗаданиеНаПеревозку.Техника               = СтрокаТовара.Техника;
    ЗаданиеНаПеревозку.АдресДоставки         = ЗаявкаНаАрендуТехники.АдресДоставки;
    ЗаданиеНаПеревозку.ВремяДоставкиС        = ЗаявкаНаАрендуТехники.ВремяДоставкиС;
    ЗаданиеНаПеревозку.ВремяДоставкиПо       = ЗаявкаНаАрендуТехники.ВремяДоставкиПо;
    ЗаданиеНаПеревозку.СпособДоставки        = ЗаявкаНаАрендуТехники.СпособДоставки;
    ЗаданиеНаПеревозку.Подразделение         = ЗаявкаНаАрендуТехники.ПодразделениеОтгрузки;
    
    Попытка
        ЗаданиеНаПеревозку.Записать(РежимЗаписиДокумента.Проведение);
    Исключение
    КонецПопытки;
        
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = "Обработка.пкПодборТехники.Форма.Форма" Тогда
        Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
            Если ВыбранноеЗначение.Свойство("АдресТоваровВХранилище") Тогда
                
                ТекущиеДанные = Элементы.ОтгрузкаТехники.ТекущиеДанные;
                Если ТекущиеДанные <> Неопределено Тогда
                    ЗаявкаНаАрендуТехники    = ТекущиеДанные.ЗаявкаНаАрендуТехники;
                    ДатаОтгрузки             = ТекущиеДанные.ДатаОтгрузки;
                    ЗаданиеНаОтгрузкуКлиенту = ТекущиеДанные.ЗаданиеНаПеревозку;
                    Модель                   = ТекущиеДанные.Модель;
                                    
                    ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ЗаявкаНаАрендуТехники, ЗаданиеНаОтгрузкуКлиенту, ДатаОтгрузки, Модель);
                КонецЕсли;
            КонецЕсли;
        ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ОбъектыЭксплуатации") Тогда
            ТекущиеДанные = Элементы.ОтгрузкаТехники.ТекущиеДанные;
            
            Если ТекущиеДанные <> Неопределено Тогда
                ИзменитьТехникуНаСервере(ТекущиеДанные.ЗаданиеНаПеревозку, ВыбранноеЗначение);
            КонецЕсли;
        КонецЕсли;    
	КонецЕсли;
	Элементы.ОтгрузкаТехники.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузкаТехникиПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ОтгрузкаТехники.ТекущиеДанные;
	
    Если ТекущиеДанные <> Неопределено Тогда
        Параметр = Новый Структура("Ключ", ТекущиеДанные.ЗаявкаНаАрендуТехники);
		ОткрытьФорму("Документ.пкЗаявкаНаАрендуТехники..Форма.ФормаДокумента",Параметр);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьЗапросДинамическогоСписка()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	МАКСИМУМ(пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.КОтгрузкеОстаток + пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ВыгрузитьОстаток) КАК МаксимальноеКоличество
	|ИЗ
	|	РегистрНакопления.пкМоделиКДоставкеПоЗаявкамНаАрендуТехники.Остатки(&Период, ЗаданиеНаПеревозку = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) КАК пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаявкаНаАрендуТехники,
	|	пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.Модель,
	|	пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.КОтгрузкеОстаток,
	|	пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ВыгрузитьОстаток
	|
	|УПОРЯДОЧИТЬ ПО
	|	МаксимальноеКоличество УБЫВ");
	Запрос.УстановитьПараметр("Период", ОтборПериод);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	МаксимальноеКоличество = Выборка.МаксимальноеКоличество;
	
	Если МаксимальноеКоличество = 1 Тогда 
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ОтгрузкаТехники.ТекстЗапроса; 
	ПозицияВставки = СтрНайти(ТекстЗапроса,"//ВставитьЧастьЗапроса",НаправлениеПоиска.СНачала);
	
	Если ПозицияВставки > 0 Тогда
		
		ТекстВставки = "";
		
		Для ТекИндекс = 2 По МаксимальноеКоличество Цикл
			
			ТекстВставки = ТекстВставки + "
			|		
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаявкаНаАрендуТехники,
			|	пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.Модель,
			|	пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.КОтгрузкеОстаток,
			|	пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ВыгрузитьОстаток,
			|	пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаявкаНаАрендуТехники.Подразделение,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	пкЗаявкаНаАрендуТехникиТовары.ДатаОтгрузки,
			|	NULL
			|ИЗ
			|	РегистрНакопления.пкМоделиКДоставкеПоЗаявкамНаАрендуТехники.Остатки(&Период, ЗаданиеНаПеревозку = ЗНАЧЕНИЕ(Документ.пкЗаданиеНаПеревозку.ПустаяСсылка)) КАК пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.пкЗаявкаНаАрендуТехники.Товары КАК пкЗаявкаНаАрендуТехникиТовары
			|	ПО пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаявкаНаАрендуТехники = пкЗаявкаНаАрендуТехникиТовары.Ссылка
			|		И пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.Модель = пкЗаявкаНаАрендуТехникиТовары.Номенклатура
			|
			|СГРУППИРОВАТЬ ПО
			|	пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаявкаНаАрендуТехники,
			|	пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.Модель,
			|	пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.КОтгрузкеОстаток,
			|	пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ВыгрузитьОстаток,
			|	пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ЗаявкаНаАрендуТехники.Подразделение,
			|	пкЗаявкаНаАрендуТехникиТовары.ДатаОтгрузки
			|
			|ИМЕЮЩИЕ
			|	пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.КОтгрузкеОстаток + пкМоделиКДоставкеПоЗаявкамНаАрендуТехникиОстатки.ВыгрузитьОстаток >= "
			+ ТекИндекс;
			
		КонецЦикла;
		
		ТекстЗапроса = Лев(ТекстЗапроса,ПозицияВставки + 23) + ТекстВставки + ") КАК ВложенныйЗапрос";
		ОтгрузкаТехники.ТекстЗапроса = ТекстЗапроса;
		
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОтгрузкаТехникиОбновить(Команда)
	
	Элементы.ОтгрузкаТехники.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТехникуНаСервере(ДокументРезерва, Техника)
    
    ЗаданиеНаПеревозку         = ДокументРезерва.ПолучитьОбъект();
    ЗаданиеНаПеревозку.Техника = Техника;
    
    Попытка
        ЗаданиеНаПеревозку.Записать(РежимЗаписиДокумента.Проведение);
    Исключение
    КонецПопытки;
    
КонецПроцедуры    

&НаКлиенте
Процедура СоздатьЗаданиеНаРемонт(Команда)
	
	ОткрытьФорму("Документ.пкЗаданиеНаРемонт.Форма.ФормаДокумента",,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьДерево" Тогда 
		
		ОбновитьДеревоЗаданияНаРемонт();
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПрочееОприходываниеНаСервере(ОбъектФормы,ОбъектВход)
	Документы.пкЗаказНаряд.ПрочееОприходованиеДляНеисправныхДеталейНаСервере(ОбъектФормы, ОбъектВход);
КонецПроцедуры

&НаКлиенте
Процедура ПрочееОприходывание(Команда)
	Если Элементы.Список.ТекущиеДанные=Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	Форма = ПолучитьФорму("Документ.ПрочееОприходованиеТоваров.ФормаОбъекта");
	ОбъектФормы = Форма.Объект;
	ПрочееОприходываниеНаСервере(ОбъектФормы, Элементы.ЗаказНарядыСписок.ТекущиеДанные.ссылка);
	КопироватьДанныеФормы(ОбъектФормы, Форма.Объект);
	Форма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядыСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ЗаказНарядыСписокпкПрикрепленыФайлыВДО" Тогда
		СтандартнаяОбработка = Ложь;
		Если Элементы.ЗаказНарядыСписок.ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		//Если Элементы.ЗаказНарядыСписок.ТекущиеДанные.пкПрикрепленыФайлыВДО = 0 Тогда
		//	Возврат;
		//КонецЕсли;
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ПрисоединенныеФайлы", 
			Новый Структура("ВладелецФайла", Элементы.ЗаказНарядыСписок.ТекущиеДанные.Ссылка), 
			ЭтаФорма);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьЗакрытые(Команда)
	
	Элементы.ЗаказНарядыСписокПоказыватьЗакрытые.Пометка = НЕ Элементы.ЗаказНарядыСписокПоказыватьЗакрытые.Пометка;
	УстановитьОтборЗакрытыхЗН();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборЗакрытыхЗН()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗаказНарядыСписок, "Статус", 
		Перечисления.пкСтатусыЗаказНарядов.Закрыт, 
		ВидСравненияКомпоновкиДанных.НеРавно,, НЕ Элементы.ЗаказНарядыСписокПоказыватьЗакрытые.Пометка);
	
КонецПроцедуры
