
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатОбработкаФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка,ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(АЗС) Тогда
		АЗС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			ПользователиКлиентСервер.ТекущийПользователь(), "ОсновнаяОрганизация"), ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнаяАЗС);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	уатЗащищенныеФункцииКлиент.уатОбработкаФормаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииВариантаУстановкиЦен();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГСМНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ДопПараметры = Новый Структура("ЗначениеГСМДоИзменения, ИмяПроцедурыОписаниеОповещения", ГСМ, "ОписаниеОповещенияВыбораГСМ");
	уатЗащищенныеФункцииКлиент.ВыбратьГСМ(ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Топливо"), ЭтаФорма, ДопПараметры);	
КонецПроцедуры

// Подключаемый динамически обработчик оповещения
&НаКлиенте
Процедура ОписаниеОповещенияВыбораГСМ(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГСМ = Результат;
КонецПроцедуры

&НаКлиенте
Процедура ПереключательСебестоимостьЦенаПриИзменении(Элемент)
	ПриИзмененииВариантаУстановкиЦен();
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеРезультатПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ПоказатьЗначение(Неопределено, Элементы.ТабличноеПолеРезультат.ТекущиеДанные.Документ);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастройкаПериода(Команда)
	ДиалогПериода = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогПериода.Период.ДатаНачала = ДатаНач;
	ДиалогПериода.Период.ДатаОкончания = ДатаКон;
	ДиалогПериода.Показать(Новый ОписаниеОповещения("НастройкаПериодаЗавершение", ЭтотОбъект, Новый Структура("ДиалогПериода", ДиалогПериода)));
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПериодаЗавершение(Период, ДополнительныеПараметры) Экспорт
    
    ДиалогПериода = ДополнительныеПараметры.ДиалогПериода;
    
    
    Если Период Тогда
        ДатаНач = ДиалогПериода.Период.ДатаНачала;
        ДатаКон = ДиалогПериода.Период.ДатаОкончания;
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработку(Команда)
	Если ДатаНач > ДатаКон И ДатаКон <> '00010101000000' Тогда
		ПоказатьПредупреждение(Неопределено, "Дата начала периода не может быть больше даты конца периода!");
		Возврат;
	КонецЕсли;
	Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(АЗС) Тогда
		ПоказатьПредупреждение(Неопределено, "Не выбрана АЗС!");
		Возврат;
	КонецЕсли;
	Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(Организация) Тогда
		ПоказатьПредупреждение(Неопределено, "Не выбрана организация!");
		Возврат;
	КонецЕсли;
	Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ГСМ) Тогда
		ПоказатьПредупреждение(Неопределено, "Не выбрано ГСМ!");
		Возврат;
	КонецЕсли;
	
	мсвВидыЗаправки = Новый Массив;
	Для Каждого ТекВидЗаправки Из ПолеСпискаВидовЗаправок Цикл
		Если ТекВидЗаправки.Пометка Тогда
			мсвВидыЗаправки.Добавить(ТекВидЗаправки.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если мсвВидыЗаправки.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, "Не выбран ни один вид заправки ГСМ!");
		Возврат;
	КонецЕсли;
	
	Если ПереключательПослеОбработки = 1 Тогда
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ВыполнитьОбработкуЗавершение", ЭтотОбъект), "Выбрано восстановление последовательности документов.
			|Это может занять продолжительное время! Продолжить?", РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК);
        Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработкуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ <> КодВозвратаДиалога.ОК Тогда
        Возврат;
    КонецЕсли;
    
    ВыполнитьОбработкуФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработкуФрагмент()
    
    Перем мсвЗаправки;
    
    Элементы.ГруппаИндикаторСтраницы.ТекущаяСтраница = Элементы.СтраницаИндикатор;
    
    мсвЗаправки = Неопределено;	
    ВыполнитьОбработкуСервер(мсвЗаправки);
    
    Если ПереключательПослеОбработки = 0 Тогда //обрабатываем только связанные документы (для путевого листа перепроведение только по регистру ГСМ)
        НадписьСостояние = "Выполняется перепроведение связанных документов ...";
        ПерепровестиСвязанныеДокументы(мсвЗаправки);
        
    ИначеЕсли ПереключательПослеОбработки = 1 Тогда //полное восстановление последовательности
        НадписьСостояние = "Выполняется восстановление последовательности ...";
        Элементы.ГруппаИндикаторСтраницы.ТекущаяСтраница = Элементы.СтраницаПустая;
        ВосстановитьПоследовательностьПЛ();
        
    КонецЕсли;
    
    НадписьСостояние = "";
    Элементы.ГруппаИндикаторСтраницы.ТекущаяСтраница = Элементы.СтраницаПустая;
    
    Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаДокументы;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВыполнитьОбработкуСервер(мсвЗаправки)
	мсвЗаправки = Новый Массив;
	
	мсвВидыЗаправки = Новый Массив;
	Для Каждого ТекВидЗаправки Из ПолеСпискаВидовЗаправок Цикл
		Если ТекВидЗаправки.Пометка Тогда
			мсвВидыЗаправки.Добавить(ТекВидЗаправки.Значение);
		КонецЕсли;
	КонецЦикла;
	
	мОтбор = Новый Структура("Организация, АЗС, ГСМ", Организация, АЗС, ГСМ);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатЗаправкаГСМЗаправки.Ссылка
	|ИЗ
	|	Документ.уатЗаправкаГСМ.Заправки КАК уатЗаправкаГСМЗаправки
	|ГДЕ
	|	уатЗаправкаГСМЗаправки.Ссылка.Организация = &Организация
	|	И уатЗаправкаГСМЗаправки.Ссылка.АЗС = &АЗС
	|	И уатЗаправкаГСМЗаправки.ГСМ = &ГСМ
	|	И уатЗаправкаГСМЗаправки.Ссылка.ВидДвиженияГСМ В (&мсвВидыЗаправки)
	|	И (НЕ уатЗаправкаГСМЗаправки.Ссылка.ПометкаУдаления)
	|	И (уатЗаправкаГСМЗаправки.Дата МЕЖДУ &ДатаНач И &ДатаКон)
	|";
	
	Если ПереключательСебестоимостьЦена = 0 Тогда
		Запрос.Текст = Запрос.Текст + "	И (уатЗаправкаГСМЗаправки.Сумма <> уатЗаправкаГСМЗаправки.Количество * &Цена)
		|";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("АЗС", АЗС);
	Запрос.УстановитьПараметр("мсвВидыЗаправки", мсвВидыЗаправки);
	Запрос.УстановитьПараметр("ГСМ", ГСМ);
	Запрос.УстановитьПараметр("Цена", Цена);
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ?(ДатаКон = '00010101', '39991231', КонецДня(ДатаКон)));
	
	мсвЗаправки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Если мсвЗаправки.Количество() = 0 Тогда
		Если ФлажокКомментироватьХодВыполнения Тогда
			Сообщить("Документов не найдено", СтатусСообщения.Внимание);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ТабличноеПолеРезультат.Очистить();
	
	Колич = мсвЗаправки.Количество();
	Сч = 0;
	
	Для Каждого ТекЗаправка Из мсвЗаправки Цикл
		Сч = Сч + 1;
		
		НачатьТранзакцию();
		
		//управляемая блокировка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.уатЗаправкаГСМ");
		//ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ТекЗаправка);
		Блокировка.Заблокировать();
		
		ОбъектДокумент = ТекЗаправка.ПолучитьОбъект();
		
		Если ПереключательСебестоимостьЦена = 0 Тогда
			Для Каждого ТекСтрока Из ОбъектДокумент.Заправки Цикл
				ТекСтрока.Цена = Цена;
				уатОбщегоНазначенияТиповыеСервер.уатРассчитатьСуммуТабЧасти(ТекСтрока, ОбъектДокумент);
				уатОбщегоНазначенияТиповыеСервер.уатРассчитатьСуммуНДСТабЧасти(ТекСтрока, ОбъектДокумент);
			КонецЦикла;
		Иначе
			//если заправка проведена, то она будет перепроведена далее, а при проведении уже выполняется расчет по себестоимости
			Если НЕ ОбъектДокумент.Проведен Тогда
				тблЗаправки = ОбъектДокумент.Заправки.Выгрузить().Скопировать();
				тблЗаправки.Колонки.ГСМ.Имя = "Номенклатура";
				Для Каждого ТекСтрока Из тблЗаправки Цикл
					Если ТекСтрока.Плотность <> 0 Тогда
						ТекСтрока.Количество = ТекСтрока.Количество * ТекСтрока.Плотность;
					КонецЕсли;
				КонецЦикла;
				уатИнтерфейсВзаимодействияСERPСервер.уатЗаполнитьЦеныНоменклатуры(ОбъектДокумент, "Заправки", ОбъектДокумент.АЗС.Контрагент_Склад);
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока = ТабличноеПолеРезультат.Добавить();
		НоваяСтрока.Документ = ТекЗаправка;
		
		Если ОбъектДокумент.Проведен Тогда
			РежимЗаписи_ = РежимЗаписиДокумента.Проведение;
		Иначе
			РежимЗаписи_ = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		Если ОбъектДокумент.ПроверитьЗаполнение() Тогда
			Попытка
				ОбъектДокумент.Записать(РежимЗаписи_);
				
				Если ФлажокКомментироватьХодВыполнения Тогда
					Сообщить("Документ <" + ОбъектДокумент + ">. Успешно перезаписан");
				КонецЕсли;
				
				Если ТекЗаправка.ПометкаУдаления Тогда
					НоваяСтрока.ИндексКартинки = 1;
				ИначеЕсли ТекЗаправка.Проведен Тогда
					НоваяСтрока.ИндексКартинки = 0;
				Иначе
					НоваяСтрока.ИндексКартинки = 2;
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				НоваяСтрока.Ошибка = Истина;
				
				Если ФлажокКомментироватьХодВыполнения Тогда
					//Сообщить("Документ <" + ТекЗаправка + ">. Не удалось перезаписать", СтатусСообщения.Внимание);
					Сообщить(ОписаниеОшибки());
				КонецЕсли;
				
				ОтменитьТранзакцию();
				
			КонецПопытки;
			
		Иначе
		    НоваяСтрока.Ошибка = Истина;
			
			Если ФлажокКомментироватьХодВыполнения Тогда
				Сообщить("Документ <" + ТекЗаправка + ">. Некорректное заполнение реквизитов!", СтатусСообщения.Внимание);
			КонецЕсли;
			
			ОтменитьТранзакцию();
			
			Продолжить;
		КонецЕсли;
		
		ИндикаторХодПроцесса = Сч / Колич * 100;
	КонецЦикла;
КонецПроцедуры

//Перепроводит только связанные с измененными заправками документы Путевой лист и слив ГСМ
//Связанными считаются документы-регистраторы, которые закрывают партии - заправки ГСМ с измененными ценами
&НаСервере
Процедура ПерепровестиСвязанныеДокументы(мсвЗаправки)
	СписокЗаправок = Новый СписокЗначений;
	СписокЗаправок.ЗагрузитьЗначения(мсвЗаправки);
		
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатОстаткиГСМнаТСОбороты.Регистратор КАК Ссылка,
	|	ВЫБОР
	|		КОГДА уатОстаткиГСМнаТСОбороты.Регистратор ССЫЛКА Документ.уатПутевойЛист
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ВидДокумента
	|ИЗ
	|	РегистрНакопления.уатОстаткиГСМнаТС.Обороты(&ДатаНач, &ДатаКон, Регистратор, Партия В (&СписокЗаправок)) КАК уатОстаткиГСМнаТСОбороты
	|ГДЕ
	|	(уатОстаткиГСМнаТСОбороты.Регистратор ССЫЛКА Документ.уатПутевойЛист
	|			ИЛИ уатОстаткиГСМнаТСОбороты.Регистратор ССЫЛКА Документ.уатСливГСМ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	уатОстаткиГСМнаТСОбороты.Регистратор.Дата");
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("СписокЗаправок", СписокЗаправок);
	
	тблСвязанныеДокументы = Запрос.Выполнить().Выгрузить();
	
	Колич = тблСвязанныеДокументы.Количество();
	Сч = 0;
	Для Каждого ТекСвязДок Из тблСвязанныеДокументы Цикл
		Сч = Сч + 1;
		
		НоваяСтрока = ТабличноеПолеРезультат.Добавить();
		
		ДокОбъект = ТекСвязДок.Ссылка.ПолучитьОбъект();
		НоваяСтрока.Документ = ТекСвязДок.Ссылка;
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			Сообщить("Документ <" + ДокОбъект + ">. Успешно перезаписан");
		Исключение
			Сообщить("Документ <" + ДокОбъект + ">. Не удалось перезаписать", СтатусСообщения.Внимание);
			НоваяСтрока.Ошибка = Истина;
		КонецПопытки;
			
		ИндикаторХодПроцесса = Сч / Колич * 100;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВосстановитьПоследовательностьПЛ()
	Последовательности.уатПутевыеЛисты.Восстановить();
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииВариантаУстановкиЦен()
	Если ПереключательСебестоимостьЦена = 1 Тогда
		Цена = 0;
	КонецЕсли;
	
	ПолеСпискаВидовЗаправок.Очистить();
	Если ПереключательСебестоимостьЦена = 0 Тогда
		ПолеСпискаВидовЗаправок.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаНаличные"), "За наличные");
		ПолеСпискаВидовЗаправок.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта"), "По топливной карте");
		ПолеСпискаВидовЗаправок.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПоставщик"), "От поставщика");
	КонецЕсли;
	ПолеСпискаВидовЗаправок.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаСклад"), "Со склада");
	ПолеСпискаВидовЗаправок.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад"), "По топливной карте со склада");
	
	Элементы.Цена.Доступность = (ПереключательСебестоимостьЦена = 0);
КонецПроцедуры
	
#КонецОбласти
