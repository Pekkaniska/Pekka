
//==================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиенте
Процедура РазвернутьДеревоНастроек()
	Для Каждого ТекСтрока Из ДеревоНастроек.ПолучитьЭлементы() Цикл
		Элементы.ДеревоНастроек.Развернуть(ТекСтрока.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

//Удаление старых документов
//
&НаСервере
Процедура УдалениеДокументов(ТаблицаВыборкиЗапросаУАТ, СтруктураПараметров) 
	
	Отказ = Ложь;
	
	НаборЗаписейТД	= РегистрыСведений.уатТиповыеДокументы.СоздатьНаборЗаписей();
	мКоличествоВыборкаЗапроса1 = 0;
	
	СписокОбработанныхДокументовУАТ = Новый СписокЗначений;
	
	Запрос1 = Новый Запрос();
	
	Состояние = "Удаление старых документов ...";
	
	мНазваниеДокумента = Метаданные.НайтиПоТипу(Тип(СтруктураПараметров.ДокументУАТ)).Имя;
	
	//Делаем запрос и готовим список документов УАТ, для которых уже сформированы ТД
	Если СтруктураПараметров.ДокументУАТ = Документы.уатПутевойЛист И (НЕ ФлажокФормироватьНаДатуВыпискиПЛ) Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТиповыеДокументы.ТиповойДокумент,
		|	ТиповыеДокументы.ДокументУАТ
		|ИЗ
		|	Документ." +  СокрЛП(мНазваниеДокумента) + " КАК ДокументыУАТ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатТиповыеДокументы КАК ТиповыеДокументы
		|		ПО ДокументыУАТ.Ссылка = ТиповыеДокументы.ДокументУАТ
		|ГДЕ
		|	(НЕ ТиповыеДокументы.ТиповойДокумент ЕСТЬ NULL )
		|	И (НЕ ТиповыеДокументы.ДокументУАТ ЕСТЬ NULL )
		|	И ДокументыУАТ.ДатаЗакрытия >= &ДатаНачала И (&ДатаОкончания = ДАТАВРЕМЯ(1,1,1) ИЛИ ДокументыУАТ.ДатаЗакрытия <= &ДатаОкончания)";
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТиповыеДокументы.ТиповойДокумент,
		|	ТиповыеДокументы.ДокументУАТ
		|ИЗ
		|	Документ." +  СокрЛП(мНазваниеДокумента) + " КАК ДокументыУАТ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатТиповыеДокументы КАК ТиповыеДокументы
		|		ПО ДокументыУАТ.Ссылка = ТиповыеДокументы.ДокументУАТ
		|ГДЕ
		|	(НЕ ТиповыеДокументы.ТиповойДокумент ЕСТЬ NULL )
		|	И (НЕ ТиповыеДокументы.ДокументУАТ ЕСТЬ NULL )
		|	И ДокументыУАТ.Дата >= &ДатаНачала И (&ДатаОкончания = ДАТАВРЕМЯ(1,1,1) ИЛИ ДокументыУАТ.Дата <= &ДатаОкончания)";
	КонецЕсли;
	
	Если СтруктураПараметров.ДокументУАТ = Документы.уатПутевойЛист Тогда
		
		ТекстУсловия = "";
		Если СтруктураПараметров.ФормироватьТребНакл Тогда
			ТекстУсловия = ?(ПустаяСтрока(ТекстУсловия),"",ТекстУсловия + " ИЛИ ") +  
				"ТиповойДокумент Ссылка Документ.ВнутреннееПотреблениеТоваров";
		КонецЕсли;
		Если СтруктураПараметров.ФормироватьСписание Тогда
			ТекстУсловия = ?(ПустаяСтрока(ТекстУсловия),"",ТекстУсловия + " ИЛИ ") +  
				"ТиповойДокумент Ссылка Документ.СписаниеНедостачТоваров";
		КонецЕсли;
		Если Не ПустаяСтрока(ТекстУсловия) Тогда
			ТекстЗапроса = ТекстЗапроса + " И (" + ТекстУсловия + ")";
		КонецЕсли;	
		
	КонецЕсли;
	
	//Если в отборе указана Организация, включаем фильтр по организации
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
		ТекстЗапроса = ТекстЗапроса + 
		" И ДокументУАТ.Организация = &Организация";
		Запрос1.УстановитьПараметр("Организация",ОтборОрганизация);
	КонецЕсли;	
	
	Запрос1.Текст=ТекстЗапроса;
	Запрос1.УстановитьПараметр("ДатаНачала",ДатаНач);
	Запрос1.УстановитьПараметр("ДатаОкончания",?(ДатаКон = '00010101', ДатаКон, КонецДня(ДатаКон)));
	
	ВыборкаЗапроса1 = Запрос1.Выполнить().Выбрать();
	мКоличествоВыборкаЗапроса1 = ВыборкаЗапроса1.Количество();
	
	Пока ВыборкаЗапроса1.Следующий() Цикл
		СписокОбработанныхДокументовУАТ.Добавить(ВыборкаЗапроса1.ДокументУАТ);					
	КонецЦикла;
	
	//Делаем запрос по всем документам УАТ
	Запрос2	= Новый Запрос();
	Если СтруктураПараметров.ДокументУАТ = Документы.уатПутевойЛист И НЕ ФлажокФормироватьНаДатуВыпискиПЛ Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДокументУАТ.Ссылка КАК ДокументУАТ,
		|	ДокументУАТ.ДатаЗакрытия КАК Дата
		|ИЗ
		|	Документ." + СокрЛП(мНазваниеДокумента) + " КАК ДокументУАТ
		|ГДЕ
		|	" + ?(СтруктураПараметров.ДокументУАТ.ПустаяСсылка().Метаданные().Проведение
		= Метаданные.СвойстваОбъектов.Проведение.Разрешить, "ДокументУАТ.Проведен", "НЕ ДокументУАТ.ПометкаУдаления") + "
		|	И ДокументУАТ.ДатаЗакрытия >= &ДатаНачала И (&ДатаОкончания = ДАТАВРЕМЯ(1,1,1) ИЛИ ДокументУАТ.ДатаЗакрытия <= &ДатаОкончания)";
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДокументУАТ.Ссылка КАК ДокументУАТ,
		|	ДокументУАТ.Дата";
		
		Если СтруктураПараметров.ДокументУАТ = Документы.уатТТД ИЛИ СтруктураПараметров.ДокументУАТ = Документы.уатЗаказГрузоотправителя Тогда
			ТекстЗапроса = СокрЛП(ТекстЗапроса) + ",
			|	ДокументУАТ.Организация КАК Организация,
			|	ДокументУАТ.Контрагент КАК Контрагент";
		КонецЕсли;
		
		ТекстЗапроса = СокрЛП(ТекстЗапроса) + "
		|ИЗ
		|	Документ." + СокрЛП(мНазваниеДокумента) + " КАК ДокументУАТ
		|ГДЕ
		|	" + ?(СтруктураПараметров.ДокументУАТ.ПустаяСсылка().Метаданные().Проведение
		= Метаданные.СвойстваОбъектов.Проведение.Разрешить, "ДокументУАТ.Проведен", "НЕ ДокументУАТ.ПометкаУдаления") + "
		|	И ДокументУАТ.Дата >= &ДатаНачала И (&ДатаОкончания = ДАТАВРЕМЯ(1,1,1) ИЛИ ДокументУАТ.Дата <= &ДатаОкончания)";
	КонецЕсли;
	
	Если СтруктураПараметров.ДокументУАТ = Документы.уатТТД ИЛИ СтруктураПараметров.ДокументУАТ = Документы.уатЗаказГрузоотправителя Тогда
		
		Если ЗначениеЗаполнено(СтруктураПараметров.Контрагент) Тогда
			ТекстЗапроса = ТекстЗапроса + 
			" И	ДокументУАТ.Контрагент = &Контрагент";
		КонецЕсли;
		
	ИначеЕсли СтруктураПараметров.ДокументУАТ = Документы.уатЗаправкаГСМ Тогда
		
		ТекстУсловия1 = ""; 
		Если СтруктураПараметров.ФормироватьАвОтч Тогда
			ТекстУсловия1 = "ДокументУАТ.ВидДвиженияГСМ = &ВидЗаправки_Нал";
			Если ЗначениеЗаполнено(СтруктураПараметров.КонтрагентАвОтч) Тогда
				ТекстУсловия1 = ТекстУсловия1 + " И ДокументУАТ.АЗС.Контрагент_Склад = &КонтрагентАвОтч";
			КонецЕсли;
		КонецЕсли;
		Если СтруктураПараметров.ФормироватьПеремещТов Тогда
			ТекстУсловия1 = ?(ПустаяСтрока(ТекстУсловия1),"",ТекстУсловия1 + " ИЛИ ") +  
			"ДокументУАТ.ВидДвиженияГСМ = &ВидЗаправки_Склад ИЛИ ДокументУАТ.ВидДвиженияГСМ = &ВидЗаправки_Талоны ИЛИ ДокументУАТ.ВидДвиженияГСМ = &ВидЗаправки_КартаСклад";
		КонецЕсли;
		Если СтруктураПараметров.ФормироватьПоступТовУслуг Тогда
			ТекстУсловия1 = ?(ПустаяСтрока(ТекстУсловия1),"",ТекстУсловия1 + " ИЛИ ") +  
			"(ДокументУАТ.ВидДвиженияГСМ = &ВидЗаправки_Карта ИЛИ ДокументУАТ.ВидДвиженияГСМ = &ВидЗаправки_Поставщик)";
			Если ЗначениеЗаполнено(СтруктураПараметров.КонтрагентПоступТовУслуг) Тогда
				ТекстУсловия1 = ТекстУсловия1 + " И ДокументУАТ.АЗС.Контрагент_Склад = &КонтрагентПоступТовУслуг";
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СтруктураПараметров.ДокументУАТ = Документы.уатИзменениеСчетчиковТС Тогда
		
		ТекстУсловия2 = ""; 
		Если СтруктураПараметров.ФормироватьТребНакл Тогда
			ТекстУсловия2 = "ДокументУАТ.СпособРемонта = &СпособРемонта_СобствРем";
		КонецЕсли;
		Если СтруктураПараметров.ФормироватьПоступТовУслуг Тогда
			ТекстУсловия2 = ?(ПустаяСтрока(ТекстУсловия2), "", ТекстУсловия2 + " ИЛИ ") +  
			"ДокументУАТ.СпособРемонта = &СпособРемонта_Автосервис";
			Если ЗначениеЗаполнено(СтруктураПараметров.КонтрагентПоступТовУслуг) Тогда
				ТекстУсловия2 = ТекстУсловия2 + " И ДокументУАТ.Контрагент = &КонтрагентПоступТовУслуг";
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СтруктураПараметров.ДокументУАТ = Документы.уатОперацииСТехническимиЖидкостями Тогда
		
		ТекстУсловия3 = "";
		Если СтруктураПараметров.ФормироватьОприход ИЛИ СтруктураПараметров.ФормироватьТребНакл Тогда
			ТекстУсловия3 = "ДокументУАТ.ВидОперации В (&ВидыОперацийСТЖ)";
		КонецЕсли;
		
	ИначеЕсли СтруктураПараметров.ДокументУАТ = Документы.уатСливГСМ Тогда
		
		ТекстУсловия4 = "";
		Если СтруктураПараметров.ФормироватьОприход ИЛИ СтруктураПараметров.ФормироватьВозвратПоставщику Тогда
			ТекстУсловия4 = "ДокументУАТ.ВидОперации В (&ВидыСливыГСМ)";
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстУсловия1) Тогда
		ТекстЗапроса = ТекстЗапроса + " И (" + ТекстУсловия1 + ")";
	КонецЕсли;	
	
	Если Не ПустаяСтрока(ТекстУсловия2) Тогда
		ТекстЗапроса = ТекстЗапроса + " И (" + ТекстУсловия2 + ")";
	КонецЕсли;	
	
	Если Не ПустаяСтрока(ТекстУсловия3) Тогда
		ТекстЗапроса = ТекстЗапроса + " И (" + ТекстУсловия3 + ")";
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстУсловия4) Тогда
		ТекстЗапроса = ТекстЗапроса + " И (" + ТекстУсловия4 + ")";
	КонецЕсли;
	
	//Если в отборе указана Организация, включаем фильтр по организации
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
		ТекстЗапроса = ТекстЗапроса + 
		" И ДокументУАТ.Организация = &Организация";
		Запрос2.УстановитьПараметр("Организация",ОтборОрганизация);
	КонецЕсли;	
	
	//Для путевых листов проверяем флаг Рассчитан
	Если СтруктураПараметров.ДокументУАТ = Документы.уатПутевойЛист Тогда
		ТекстЗапроса = ТекстЗапроса + 
		" И ДокументУАТ.Рассчитан = &Рассчитан";
		Запрос2.УстановитьПараметр("Рассчитан",Истина);
	КонецЕсли;	
	
	//Обрабатываем только те документы УАТ, для которых не сформированы ТД
	Если ФлажокТолькоНовыеДокументы Тогда
		ТекстЗапроса = ТекстЗапроса + 
		" И (НЕ ДокументУАТ.Ссылка В (&СписокОбработанныхДокументовУАТ))";
		Запрос2.УстановитьПараметр("СписокОбработанныхДокументовУАТ",СписокОбработанныхДокументовУАТ);
	КонецЕсли;	
	
	Если СтруктураПараметров.ДокументУАТ = Документы.уатТТД ИЛИ СтруктураПараметров.ДокументУАТ = Документы.уатЗаказГрузоотправителя Тогда
		ТекстЗапроса = СокрЛП(ТекстЗапроса) + "
		|УПОРЯДОЧИТЬ ПО
		|	ДокументУАТ.Организация,
		|	ДокументУАТ.Контрагент";
	КонецЕсли;
	
	Запрос2.Текст=ТекстЗапроса;
	Запрос2.УстановитьПараметр("Проведен",Истина);
	Запрос2.УстановитьПараметр("ДатаНачала",ДатаНач);
	Запрос2.УстановитьПараметр("ДатаОкончания",?(ДатаКон = '00010101', ДатаКон, КонецДня(ДатаКон)));
	
	Если СтруктураПараметров.ДокументУАТ = Документы.уатТТД ИЛИ СтруктураПараметров.ДокументУАТ = Документы.уатЗаказГрузоотправителя Тогда
		
		Если ЗначениеЗаполнено(СтруктураПараметров.Контрагент) Тогда
			Запрос2.УстановитьПараметр("Контрагент", СтруктураПараметров.Контрагент);
		КонецЕсли;
		
	ИначеЕсли СтруктураПараметров.ДокументУАТ = Документы.уатЗаправкаГСМ Тогда
		
		Если СтруктураПараметров.ФормироватьАвОтч Тогда
			Запрос2.УстановитьПараметр("ВидЗаправки_Нал", Перечисления.уатВидыДвиженияГСМ.ЗаправкаНаличные);
			Запрос2.УстановитьПараметр("КонтрагентАвОтч", СтруктураПараметров.КонтрагентАвОтч);
		КонецЕсли;
		Если СтруктураПараметров.ФормироватьПеремещТов Тогда
			Запрос2.УстановитьПараметр("ВидЗаправки_Склад", Перечисления.уатВидыДвиженияГСМ.ЗаправкаСклад);
			Запрос2.УстановитьПараметр("ВидЗаправки_Талоны", Перечисления.уатВидыДвиженияГСМ.ЗаправкаТалоны);
			Запрос2.УстановитьПараметр("ВидЗаправки_КартаСклад", Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад);
			
		КонецЕсли;
		Если СтруктураПараметров.ФормироватьПоступТовУслуг Тогда
			Запрос2.УстановитьПараметр("ВидЗаправки_Карта", Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта);
			Запрос2.УстановитьПараметр("ВидЗаправки_Поставщик", Перечисления.уатВидыДвиженияГСМ.ЗаправкаПоставщик);
			Запрос2.УстановитьПараметр("КонтрагентПоступТовУслуг", СтруктураПараметров.КонтрагентПоступТовУслуг);
		КонецЕсли;
		
	ИначеЕсли СтруктураПараметров.ДокументУАТ = Документы.уатОперацииСТехническимиЖидкостями Тогда
		мсвВидыОперацийТЖ = Новый Массив;
		Если СтруктураПараметров.ФормироватьОприход Тогда
			мсвВидыОперацийТЖ.Добавить(Перечисления.уатВидыОперацийСТехническимиЖидкостями.Слив);
		КонецЕсли;
		Если СтруктураПараметров.ФормироватьТребНакл Тогда
			мсвВидыОперацийТЖ.Добавить(Перечисления.уатВидыОперацийСТехническимиЖидкостями.ДоливПоАкту);
			мсвВидыОперацийТЖ.Добавить(Перечисления.уатВидыОперацийСТехническимиЖидкостями.ДоливПоТО);
			мсвВидыОперацийТЖ.Добавить(Перечисления.уатВидыОперацийСТехническимиЖидкостями.ДоливПрочее);
		КонецЕсли;
		Запрос2.УстановитьПараметр("ВидыОперацийСТЖ", мсвВидыОперацийТЖ);
		
	ИначеЕсли СтруктураПараметров.ДокументУАТ = Документы.уатСливГСМ Тогда
		мсвВидыСливыГСМ = Новый Массив;
		Если СтруктураПараметров.ФормироватьОприход Тогда
			мсвВидыСливыГСМ.Добавить(Перечисления.уатВидыОперацийСливГСМ.НаСклад);
		КонецЕсли;
		Если СтруктураПараметров.ФормироватьВозвратПоставщику Тогда
			мсвВидыСливыГСМ.Добавить(Перечисления.уатВидыОперацийСливГСМ.НаАЗС);
		КонецЕсли;
		Запрос2.УстановитьПараметр("ВидыСливыГСМ", мсвВидыСливыГСМ);
		
	КонецЕсли;
	
	//Если ФлажокНовыеДокументы Тогда
	//	Запрос2.УстановитьПараметр("СписокОбработанныхДокументовУАТ",СписокОбработанныхДокументовУАТ);
	//КонецЕсли;
	
	ТаблицаВыборкиЗапросаУАТ = Запрос2.Выполнить().Выгрузить();
	
	ИндикаторХодПроцесса = 0;
	
	//НачатьТранзакцию();
	//
	Если Не ФлажокТолькоНовыеДокументы Тогда
		ВыборкаЗапроса1.Сбросить();
		
		КоличДок = ВыборкаЗапроса1.Количество();
		ШагИндикатора = ?(КоличДок = 0, 0, 100 / КоличДок);
		Сч = 1;
		
		Пока ВыборкаЗапроса1.Следующий() Цикл
			НаборЗаписейТД.мДокументУАТ = ВыборкаЗапроса1.ДокументУАТ;
			НаборЗаписейТД.УдалитьТиповойДокумент();
			
			ИндикаторХодПроцесса = Сч * ШагИндикатора;
			Сч = Сч + 1;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

//Формирование новых документов
//
&НаСервере
Функция ФормированиеДокументов(ТаблицаВыборкиЗапросаУАТ, СтруктураПараметров, НаборЗаписейТД) 
	
	ВсеОк = Истина;
	
	КоличДок = ТаблицаВыборкиЗапросаУАТ.Количество();
	ШагИндикатора = ?(КоличДок = 0, 0, 100 / КоличДок);
	Сч = 1;
	
	Для Каждого ТекСтрока Из ТаблицаВыборкиЗапросаУАТ Цикл
		мДокументУАТ = ТекСтрока.ДокументУАТ;
		
		НаборЗаписейТД.мДокументУАТ	= мДокументУАТ;
		НаборЗаписейТД.мОтборОрганизация = ОтборОрганизация;
		ВсеОк = НаборЗаписейТД.ФормированиеТД(СтруктураПараметров); // ИЛИ Не Отказ;
		
		Для Каждого ТекСтрокаСозданныйДокумент Из НаборЗаписейТД.тблСозданныеДокументы Цикл
			НоваяСтрокаСозд = ТаблицаСозданныеДокументы.Добавить();
			НоваяСтрокаСозд.ДокументУАТ = ТекСтрокаСозданныйДокумент.ДокументУАТ;
			НоваяСтрокаСозд.ТиповойДокумент = ТекСтрокаСозданныйДокумент.ТиповойДокумент;
		КонецЦикла;
		
		ИндикаторХодПроцесса = Сч * ШагИндикатора;
		
		Сч = Сч + 1;
	КонецЦикла;
	
	ИндикаторХодПроцесса = 0;
	
	Возврат ВсеОк;
	
КонецФункции

&НаСервере
Процедура ОбработкаПутЛисты()
	
	Перем ТаблицаВыборкиЗапросаУАТ;
	
	ВсеОк = Истина;
	
	СтруктураПараметров = Новый Структура("ДокументУАТ, ФормироватьТолькоНовые, ФормироватьТребНакл, ФормироватьСписание, ФормироватьВырабСотр, ФормироватьПрочиеДоходыРасходы, ФормироватьНачислениеЗП, ФормироватьРегистрацияНаработок, ФормироватьОбщийТД, ДатаОбщегоТД");
	СтруктураПараметров.ДокументУАТ = Документы.уатПутевойЛист;
	
	ДеревоНастроек_ = РеквизитФормыВЗначение("ДеревоНастроек");
	
	мСтрокаГруппы = ДеревоНастроек_.Строки.Найти(мПутЛист, "ИД");
	Если мСтрокаГруппы <> Неопределено Тогда
		Если Не мСтрокаГруппы.Включать Тогда
			Возврат;
		КонецЕсли;	
	Иначе
		Возврат;
	КонецЕсли;	
	
	мСтрокаНастройки = мСтрокаГруппы.Строки.Найти(мПутЛист_ОбщДок, "ИД");
	Если мСтрокаНастройки <> Неопределено Тогда
		мФлагОбщийТД 	= мСтрокаНастройки.Включать;
		мДатаОбщегоТД 	= мСтрокаНастройки.Значение;
		
		Если мФлагОбщийТД и НЕ ЗначениеЗаполнено(мДатаОбщегоТД) Тогда
			ТекстОшибки = "Не указана дата общего типового документа для обработки путевых листов.";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат;
		Иначе	
			СтруктураПараметров.ФормироватьОбщийТД 	= мФлагОбщийТД;
			СтруктураПараметров.ДатаОбщегоТД 		= мДатаОбщегоТД;
		КонецЕсли;	
	КонецЕсли;	
	                   
	мСтрокаНастройки_ТребНакл = мСтрокаГруппы.Строки.Найти(мПутЛист_ТребНакл, "ИД");
	Если мСтрокаНастройки_ТребНакл <> Неопределено Тогда
		СтруктураПараметров.ФормироватьТребНакл = мСтрокаНастройки_ТребНакл.Включать;
	Иначе
		СтруктураПараметров.ФормироватьТребНакл = Ложь;
	КонецЕсли;
	
	мСтрокаНастройки_Списание = мСтрокаГруппы.Строки.Найти(мПутЛист_Списание, "ИД");
	Если мСтрокаНастройки_Списание <> Неопределено Тогда
		СтруктураПараметров.ФормироватьСписание = мСтрокаНастройки_Списание.Включать;
	Иначе
		СтруктураПараметров.ФормироватьСписание = Ложь;
	КонецЕсли;
	
	мСтрокаНастройки_ВырабСотр = мСтрокаГруппы.Строки.Найти(мПутЛист_ВырабСотр, "ИД");
	Если мСтрокаНастройки_ВырабСотр <> Неопределено Тогда
		СтруктураПараметров.ФормироватьВырабСотр = мСтрокаНастройки_ВырабСотр.Включать;
	Иначе
		СтруктураПараметров.ФормироватьВырабСотр = Ложь;
	КонецЕсли;
	
	мСтрокаНастройки_ПрочДохРасх = мСтрокаГруппы.Строки.Найти(мПутЛист_ПрочДохРасх, "ИД");
	Если мСтрокаНастройки_ПрочДохРасх <> Неопределено Тогда
		СтруктураПараметров.ФормироватьПрочиеДоходыРасходы = мСтрокаНастройки_ПрочДохРасх.Включать;
	Иначе
		СтруктураПараметров.ФормироватьПрочиеДоходыРасходы = Ложь;
	КонецЕсли;
	
	мСтрокаНастройки_РегНаработок = мСтрокаГруппы.Строки.Найти(мПутЛист_РегНаработок, "ИД");
	Если мСтрокаНастройки_РегНаработок <> Неопределено Тогда
		СтруктураПараметров.ФормироватьРегистрацияНаработок = мСтрокаНастройки_РегНаработок.Включать;
	Иначе
		СтруктураПараметров.ФормироватьРегистрацияНаработок = Ложь;
	КонецЕсли;
	
	СтруктураПараметров.ФормироватьТолькоНовые = ФлажокТолькоНовыеДокументы;
	
	//НачатьТранзакцию();
	
	УдалениеДокументов(ТаблицаВыборкиЗапросаУАТ, СтруктураПараметров);
	
	Состояние = "Обработка документов ""Путевой лист"" ...";
		
	НаборЗаписейТД1	= РегистрыСведений.уатТиповыеДокументы.СоздатьНаборЗаписей();
	НаборЗаписейТД1.мИспользоватьДатуВыпискиПЛ = ФлажокФормироватьНаДатуВыпискиПЛ;
	
	// ПЛ -> Требование-накладная
	Если СтруктураПараметров.ФормироватьТребНакл Тогда
		СтруктураПараметровВрем = Новый Структура;
		Для Каждого ТекЭл Из СтруктураПараметров Цикл
			Если ТекЭл.Ключ = "ФормироватьСписание" Тогда
				СтруктураПараметровВрем.Вставить(ТекЭл.Ключ, Ложь);
			ИначеЕсли ТекЭл.Ключ = "ФормироватьВырабСотр" Тогда
				СтруктураПараметровВрем.Вставить(ТекЭл.Ключ, Ложь);
			ИначеЕсли ТекЭл.Ключ = "ФормироватьПрочиеДоходыРасходы" Тогда
				СтруктураПараметровВрем.Вставить(ТекЭл.Ключ, Ложь);
			ИначеЕсли ТекЭл.Ключ = "ФормироватьРегистрацияНаработок" Тогда
				СтруктураПараметровВрем.Вставить(ТекЭл.Ключ, Ложь);
			Иначе
				СтруктураПараметровВрем.Вставить(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЕсли;
		КонецЦикла;
		
		Если мФлагОбщийТД Тогда
			//создается столько общих документов, сколько получается складов для перемещения ГСМ
			мсвСкладыДляПеремещенияГСМ = Новый Массив;
			ТаблицаВыборкиЗапросаУАТ.Колонки.Добавить("СкладДляПеремещенияГСМ");
			Для Каждого ТекСтрока Из ТаблицаВыборкиЗапросаУАТ Цикл
				СтруктураОбъектовНастроек = Новый Структура;
				СтруктураОбъектовНастроек.Вставить("Организация", ТекСтрока.ДокументУАТ.Организация);
				СтруктураОбъектовНастроек.Вставить("Подразделение", ТекСтрока.ДокументУАТ.Подразделение);
		
				ТекСтрока.СкладДляПеремещенияГСМ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек,
					ПланыВидовХарактеристик.уатПраваИНастройки.СкладДляПеремещенияГСМ);
				
				Если мсвСкладыДляПеремещенияГСМ.Найти(ТекСтрока.СкладДляПеремещенияГСМ) = Неопределено Тогда
					мсвСкладыДляПеремещенияГСМ.Добавить(ТекСтрока.СкладДляПеремещенияГСМ);
				КонецЕсли;
			КонецЦикла;
			
			Если мсвСкладыДляПеремещенияГСМ.Количество() > 1 Тогда
				ТаблицаВыборкиЗапросаУАТпоСкладу = ТаблицаВыборкиЗапросаУАТ.Скопировать();
				
				Для Каждого ТекСклад Из мсвСкладыДляПеремещенияГСМ Цикл
					НаборЗаписейТД1.мТиповойДокумент  = Документы.ВнутреннееПотреблениеТоваров.СоздатьДокумент();
					НаборЗаписейТД1.мТиповойДокумент.Дата = мДатаОбщегоТД;
					
					ТаблицаВыборкиЗапросаУАТпоСкладу.Очистить();
					мсвСтрокиПоиска = ТаблицаВыборкиЗапросаУАТ.НайтиСтроки(Новый Структура("СкладДляПеремещенияГСМ", ТекСклад));
					Для Каждого ТекстрокаПоиска Из мсвСтрокиПоиска Цикл
						НовСтр = ТаблицаВыборкиЗапросаУАТпоСкладу.Добавить();
						ЗаполнитьЗначенияСвойств(НовСтр, ТекстрокаПоиска);
					КонецЦикла;
					
					ФормированиеДокументов(ТаблицаВыборкиЗапросаУАТпоСкладу, СтруктураПараметровВрем, НаборЗаписейТД1);
					
					Если НаборЗаписейТД1.мТиповойДокумент.Товары.Количество() > 0 Тогда
						НаборЗаписейТД1.мТиповойДокумент.Товары.Свернуть("Упаковка, ЗаказНаВнутреннееПотребление, Номенклатура, Характеристика, СтатьяРасходов, АналитикаРасходов, ФизическоеЛицо, Серия, АналитикаУчетаНоменклатуры", "Количество, КоличествоУпаковок");
						НаборЗаписейТД1.мТиповойДокумент.Записать();
					КонецЕсли;
					
				КонецЦикла;
			Иначе
				НаборЗаписейТД1.мТиповойДокумент  = Документы.ВнутреннееПотреблениеТоваров.СоздатьДокумент();
				НаборЗаписейТД1.мТиповойДокумент.Дата = мДатаОбщегоТД;
				
				ФормированиеДокументов(ТаблицаВыборкиЗапросаУАТ, СтруктураПараметровВрем, НаборЗаписейТД1);
				
				Если НаборЗаписейТД1.мТиповойДокумент.Товары.Количество() > 0 Тогда
					НаборЗаписейТД1.мТиповойДокумент.Товары.Свернуть("Упаковка, ЗаказНаВнутреннееПотребление, Номенклатура, Характеристика, СтатьяРасходов, АналитикаРасходов, ФизическоеЛицо, Серия, АналитикаУчетаНоменклатуры", "Количество, КоличествоУпаковок");
					НаборЗаписейТД1.мТиповойДокумент.Записать();
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			ФормированиеДокументов(ТаблицаВыборкиЗапросаУАТ, СтруктураПараметровВрем, НаборЗаписейТД1);
			
		КонецЕсли;
	КонецЕсли;
	
	// ПЛ -> Списание товаров
	Если СтруктураПараметров.ФормироватьСписание Тогда
		СтруктураПараметровВрем = Новый Структура;
		Для Каждого ТекЭл Из СтруктураПараметров Цикл
			Если ТекЭл.Ключ = "ФормироватьТребНакл" Тогда
				СтруктураПараметровВрем.Вставить(ТекЭл.Ключ, Ложь);
			ИначеЕсли ТекЭл.Ключ = "ФормироватьВырабСотр" Тогда
				СтруктураПараметровВрем.Вставить(ТекЭл.Ключ, Ложь);
			ИначеЕсли ТекЭл.Ключ = "ФормироватьПрочиеДоходыРасходы" Тогда
				СтруктураПараметровВрем.Вставить(ТекЭл.Ключ, Ложь);
			ИначеЕсли ТекЭл.Ключ = "ФормироватьРегистрацияНаработок" Тогда
				СтруктураПараметровВрем.Вставить(ТекЭл.Ключ, Ложь);
			Иначе
				СтруктураПараметровВрем.Вставить(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЕсли;
		КонецЦикла;
		
		Если мФлагОбщийТД Тогда
			//создается столько общих документов, сколько получается складов для перемещения ГСМ
			мсвСкладыДляПеремещенияГСМ = Новый Массив;
			ТаблицаВыборкиЗапросаУАТ.Колонки.Добавить("СкладДляПеремещенияГСМ");
			Для Каждого ТекСтрока Из ТаблицаВыборкиЗапросаУАТ Цикл
				СтруктураОбъектовНастроек = Новый Структура;
				СтруктураОбъектовНастроек.Вставить("Организация", ТекСтрока.ДокументУАТ.Организация);
				СтруктураОбъектовНастроек.Вставить("Подразделение", ТекСтрока.ДокументУАТ.Подразделение);
		
				ТекСтрока.СкладДляПеремещенияГСМ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек,
					ПланыВидовХарактеристик.уатПраваИНастройки.СкладДляПеремещенияГСМ);
				
				Если мсвСкладыДляПеремещенияГСМ.Найти(ТекСтрока.СкладДляПеремещенияГСМ) = Неопределено Тогда
					мсвСкладыДляПеремещенияГСМ.Добавить(ТекСтрока.СкладДляПеремещенияГСМ);
				КонецЕсли;
			КонецЦикла;
			
			Если мсвСкладыДляПеремещенияГСМ.Количество() > 1 Тогда
				ТаблицаВыборкиЗапросаУАТпоСкладу = ТаблицаВыборкиЗапросаУАТ.Скопировать();
				
				Для Каждого ТекСклад Из мсвСкладыДляПеремещенияГСМ Цикл
					НаборЗаписейТД1.мТиповойДокумент  = Документы.СписаниеНедостачТоваров.СоздатьДокумент();
					НаборЗаписейТД1.мТиповойДокумент.Дата = мДатаОбщегоТД;
					
					ТаблицаВыборкиЗапросаУАТпоСкладу.Очистить();
					мсвСтрокиПоиска = ТаблицаВыборкиЗапросаУАТ.НайтиСтроки(Новый Структура("СкладДляПеремещенияГСМ", ТекСклад));
					Для Каждого ТекстрокаПоиска Из мсвСтрокиПоиска Цикл
						НовСтр = ТаблицаВыборкиЗапросаУАТпоСкладу.Добавить();
						ЗаполнитьЗначенияСвойств(НовСтр, ТекстрокаПоиска);
					КонецЦикла;
					
					ФормированиеДокументов(ТаблицаВыборкиЗапросаУАТпоСкладу, СтруктураПараметровВрем, НаборЗаписейТД1);
					
					Если НаборЗаписейТД1.мТиповойДокумент.Товары.Количество() > 0 Тогда
						НаборЗаписейТД1.мТиповойДокумент.Товары.Свернуть("Номенклатура, Серия, Характеристика, АналитикаУчетаНоменклатуры, СтатусУказанияСерий", "Количество");
						НаборЗаписейТД1.мТиповойДокумент.Записать();
					КонецЕсли;
				КонецЦикла;
			Иначе
				НаборЗаписейТД1.мТиповойДокумент  = Документы.СписаниеНедостачТоваров.СоздатьДокумент();
				НаборЗаписейТД1.мТиповойДокумент.Дата = мДатаОбщегоТД;
				
				ФормированиеДокументов(ТаблицаВыборкиЗапросаУАТ, СтруктураПараметровВрем, НаборЗаписейТД1);
				
				Если НаборЗаписейТД1.мТиповойДокумент.Товары.Количество() > 0 Тогда
					НаборЗаписейТД1.мТиповойДокумент.Товары.Свернуть("Номенклатура, Серия, Характеристика, АналитикаУчетаНоменклатуры, СтатусУказанияСерий", "Количество");
					НаборЗаписейТД1.мТиповойДокумент.Записать();
				КонецЕсли;
			КонецЕсли;
					
		Иначе
			ФормированиеДокументов(ТаблицаВыборкиЗапросаУАТ, СтруктураПараметровВрем, НаборЗаписейТД1);
			
		КонецЕсли;
	КонецЕсли;
	
	// ПЛ -> Выработка сотрудников
	Если СтруктураПараметров.ФормироватьВырабСотр Тогда
		СтруктураПараметровВрем = Новый Структура;
		Для Каждого ТекЭл Из СтруктураПараметров Цикл
			Если ТекЭл.Ключ = "ФормироватьТребНакл" Тогда
				СтруктураПараметровВрем.Вставить(ТекЭл.Ключ, Ложь);
			ИначеЕсли ТекЭл.Ключ = "ФормироватьСписание" Тогда
				СтруктураПараметровВрем.Вставить(ТекЭл.Ключ, Ложь);
			ИначеЕсли ТекЭл.Ключ = "ФормироватьПрочиеДоходыРасходы" Тогда
				СтруктураПараметровВрем.Вставить(ТекЭл.Ключ, Ложь);
			ИначеЕсли ТекЭл.Ключ = "ФормироватьРегистрацияНаработок" Тогда
				СтруктураПараметровВрем.Вставить(ТекЭл.Ключ, Ложь);
			Иначе
				СтруктураПараметровВрем.Вставить(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЕсли;
		КонецЦикла;
		
		//выгружаем в таблицу
		Если мФлагОбщийТД Тогда
			//выгружаем в таблицу и сворачиваем ее по контрагентам и организациям
			мТаблица = ТаблицаВыборкиЗапросаУАТ.Скопировать();
			мТаблица.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
			
			Для Каждого ТекСтр Из мТаблица Цикл 
				ТекСтр.Организация = ТекСтр.ДокументУАТ.Организация;
			КонецЦикла;
			
			ТабОрг = мТаблица.Скопировать();
			
			ТабОрг.Свернуть("Организация");
			
			мОтбор = Новый Структура("Организация");
			
			Для Каждого ТекСтрока Из ТабОрг Цикл
				НаборЗаписейТД1.мТиповойДокумент 		= Документы.ВыработкаСотрудников.СоздатьДокумент();
				НаборЗаписейТД1.мТиповойДокумент.Дата 	= мДатаОбщегоТД;
				
				мОтбор.Организация = ТекСтрока.Организация;
				мСтроки = мТаблица.НайтиСтроки(мОтбор);
				
				ВсеОк = ВсеОк И ФормированиеДокументов(мСтроки, СтруктураПараметровВрем, НаборЗаписейТД1);
			КонецЦикла;
			
		Иначе
			ВсеОк = ФормированиеДокументов(ТаблицаВыборкиЗапросаУАТ, СтруктураПараметровВрем, НаборЗаписейТД1);
		КонецЕсли;
	КонецЕсли;
	
	// ПЛ -> Прочие доходы и расходы
	Если СтруктураПараметров.ФормироватьПрочиеДоходыРасходы Тогда
		СтруктураПараметровВрем = Новый Структура;
		Для Каждого ТекЭл Из СтруктураПараметров Цикл
			Если ТекЭл.Ключ = "ФормироватьТребНакл" Тогда
				СтруктураПараметровВрем.Вставить(ТекЭл.Ключ, Ложь);
			ИначеЕсли ТекЭл.Ключ = "ФормироватьСписание" Тогда
				СтруктураПараметровВрем.Вставить(ТекЭл.Ключ, Ложь);
			ИначеЕсли ТекЭл.Ключ = "ФормироватьВырабСотр" Тогда
				СтруктураПараметровВрем.Вставить(ТекЭл.Ключ, Ложь);
			ИначеЕсли ТекЭл.Ключ = "ФормироватьРегистрацияНаработок" Тогда
				СтруктураПараметровВрем.Вставить(ТекЭл.Ключ, Ложь);
			Иначе
				СтруктураПараметровВрем.Вставить(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЕсли;
		КонецЦикла;
		
		//выгружаем в таблицу
		Если мФлагОбщийТД Тогда
			//выгружаем в таблицу и сворачиваем ее по контрагентам и организациям
			мТаблица = ТаблицаВыборкиЗапросаУАТ.Скопировать();
			мТаблица.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
			
			Для Каждого ТекСтр Из мТаблица Цикл 
				ТекСтр.Организация = ТекСтр.ДокументУАТ.Организация;
			КонецЦикла;
			
			ТабОрг = мТаблица.Скопировать();
			ТабОрг.Свернуть("Организация");
			
			мОтбор = Новый Структура("Организация");
			
			Для Каждого ТекСтрока Из ТабОрг Цикл
				НаборЗаписейТД1.мТиповойДокумент 		= Документы.ПрочиеДоходыРасходы.СоздатьДокумент();
				НаборЗаписейТД1.мТиповойДокумент.Дата 	= мДатаОбщегоТД;
				
				мОтбор.Организация = ТекСтрока.Организация;
				мСтроки = мТаблица.НайтиСтроки(мОтбор);
				
				ВсеОк = ВсеОк И ФормированиеДокументов(мСтроки, СтруктураПараметровВрем, НаборЗаписейТД1);
			КонецЦикла;
		Иначе
			ВсеОк = ФормированиеДокументов(ТаблицаВыборкиЗапросаУАТ, СтруктураПараметровВрем, НаборЗаписейТД1);
		КонецЕсли;
	КонецЕсли;
	
	// ПЛ -> Регистрация наработок
	Если СтруктураПараметров.ФормироватьРегистрацияНаработок Тогда
		
		СтруктураПараметровВрем = Новый Структура;
		Для Каждого ТекЭл Из СтруктураПараметров Цикл
			Если ТекЭл.Ключ = "ФормироватьТребНакл" Тогда
				СтруктураПараметровВрем.Вставить(ТекЭл.Ключ, Ложь);
			ИначеЕсли ТекЭл.Ключ = "ФормироватьСписание" Тогда
				СтруктураПараметровВрем.Вставить(ТекЭл.Ключ, Ложь);
			ИначеЕсли ТекЭл.Ключ = "ФормироватьПрочиеДоходыРасходы" Тогда
				СтруктураПараметровВрем.Вставить(ТекЭл.Ключ, Ложь);
			ИначеЕсли ТекЭл.Ключ = "ФормироватьВырабСотр" Тогда
				СтруктураПараметровВрем.Вставить(ТекЭл.Ключ, Ложь);
			Иначе
				СтруктураПараметровВрем.Вставить(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЕсли;
		КонецЦикла;

		//выгружаем в таблицу
		Если мФлагОбщийТД Тогда
			НаборЗаписейТД1.мТиповойДокумент      = Документы.РегистрацияНаработок.СоздатьДокумент();
			НаборЗаписейТД1.мТиповойДокумент.Дата = мДатаОбщегоТД;
			
			ВсеОк = ФормированиеДокументов(ТаблицаВыборкиЗапросаУАТ, СтруктураПараметровВрем, НаборЗаписейТД1);
		Иначе
			ВсеОк = ФормированиеДокументов(ТаблицаВыборкиЗапросаУАТ, СтруктураПараметровВрем, НаборЗаписейТД1);
		КонецЕсли;
	КонецЕсли;
	
	Если ВсеОк Тогда
		ИндикаторХодПроцесса = 100;
		//ЗафиксироватьТранзакцию();
	Иначе
		ТекстОшибки = "Ошибка формирования типовых документов.";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;	
	
	мСтрокаГруппы.Выполнено = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаЗаправкиГСМ()
	
	Перем ТаблицаВыборкиЗапросаУАТ;
	
	ВсеОк = Истина;
	
	СтруктураПараметров = Новый Структура("ДокументУАТ, ФормироватьТолькоНовые, ФормироватьАвОтч, ФормироватьПеремещТов, ФормироватьПоступТовУслуг, КонтрагентАвОтч, КонтрагентПоступТовУслуг");
	СтруктураПараметров.ДокументУАТ = Документы.уатЗаправкаГСМ;
	
	ДеревоНастроек_ = РеквизитФормыВЗначение("ДеревоНастроек");
	
	мСтрокаГруппы = ДеревоНастроек_.Строки.Найти(мЗаправкиГСМ, "ИД");
	Если мСтрокаГруппы <> Неопределено Тогда
		Если Не мСтрокаГруппы.Включать Тогда
			Возврат;
		КонецЕсли;	
	Иначе
		Возврат;
	КонецЕсли;	
	
	мСтрокаНастройки_АвОтч = мСтрокаГруппы.Строки.Найти(мЗаправкиГСМ_АвОтч, "ИД");
	Если мСтрокаНастройки_АвОтч <> Неопределено Тогда
		СтруктураПараметров.ФормироватьАвОтч = мСтрокаНастройки_АвОтч.Включать;
	Иначе
		СтруктураПараметров.ФормироватьАвОтч = Ложь;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(мСтрокаНастройки_АвОтч.Значение) И ТипЗнч(мСтрокаНастройки_АвОтч.Значение) = Тип("СправочникСсылка.Контрагенты") Тогда
		СтруктураПараметров.КонтрагентАвОтч = мСтрокаНастройки_АвОтч.Значение;
	КонецЕсли;
	
	мСтрокаНастройки_ПеремещТов = мСтрокаГруппы.Строки.Найти(мЗаправкиГСМ_ПеремещТов, "ИД");
	Если мСтрокаНастройки_ПеремещТов <> Неопределено Тогда
		СтруктураПараметров.ФормироватьПеремещТов = мСтрокаНастройки_ПеремещТов.Включать;
	Иначе
		СтруктураПараметров.ФормироватьПеремещТов = Ложь;
	КонецЕсли;	
	
	мСтрокаНастройки_ПоступТовУслуг = мСтрокаГруппы.Строки.Найти(мЗаправкиГСМ_ПоступТовУслуг, "ИД");
	Если мСтрокаНастройки_ПоступТовУслуг <> Неопределено Тогда
		СтруктураПараметров.ФормироватьПоступТовУслуг = мСтрокаНастройки_ПоступТовУслуг.Включать;
	Иначе
		СтруктураПараметров.ФормироватьПоступТовУслуг = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(мСтрокаНастройки_ПоступТовУслуг.Значение) И ТипЗнч(мСтрокаНастройки_ПоступТовУслуг.Значение) = Тип("СправочникСсылка.Контрагенты") Тогда
		СтруктураПараметров.КонтрагентПоступТовУслуг = мСтрокаНастройки_ПоступТовУслуг.Значение;
	КонецЕсли;
	
	СтруктураПараметров.ФормироватьТолькоНовые = ФлажокТолькоНовыеДокументы;
	
	//НачатьТранзакцию();
	
	УдалениеДокументов(ТаблицаВыборкиЗапросаУАТ, СтруктураПараметров);
	
	Состояние = "Обработка документов ""Заправка ГСМ"" ...";
	
	НаборЗаписейТД1	= РегистрыСведений.уатТиповыеДокументы.СоздатьНаборЗаписей();
	
	ВсеОк = ФормированиеДокументов(ТаблицаВыборкиЗапросаУАТ, СтруктураПараметров, НаборЗаписейТД1);
	
	Если ВсеОк Тогда
		
		ИндикаторХодПроцесса = 100;
		Состояние = "";
		
		//ЗафиксироватьТранзакцию();
		
	Иначе
		
		ТекстОшибки = "Ошибка формирования типовых документов.";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		
	КонецЕсли;	
	
	мСтрокаГруппы.Выполнено 					= Истина;
	мСтрокаНастройки_АвОтч.Выполнено 			= СтруктураПараметров.ФормироватьАвОтч;
	мСтрокаНастройки_ПеремещТов.Выполнено 		= СтруктураПараметров.ФормироватьПеремещТов;
	мСтрокаНастройки_ПоступТовУслуг.Выполнено 	= СтруктураПараметров.ФормироватьПоступТовУслуг;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаТТД()
	
	Перем ТаблицаВыборкиЗапросаУАТ;
	
	ВсеОк = Истина;
	
	СтруктураПараметров = Новый Структура("ДокументУАТ, ФормироватьТолькоНовые, ФормироватьРеализацию, ФормироватьСчетНаОплату, ФормироватьОбщийТД, ДатаОбщегоТД, Контрагент");
	СтруктураПараметров.ДокументУАТ = Документы.уатТТД;

	ДеревоНастроек_ = РеквизитФормыВЗначение("ДеревоНастроек");
	
	мСтрокаГруппы = ДеревоНастроек_.Строки.Найти(мТТД, "ИД");
	Если мСтрокаГруппы <> Неопределено Тогда
		Если Не мСтрокаГруппы.Включать Тогда
			Возврат;
		КонецЕсли;	
	Иначе
		Возврат;
	КонецЕсли;	
	
	мСтрокаНастройки_Реализация = мСтрокаГруппы.Строки.Найти(мТТД_Реализация, "ИД");
	Если мСтрокаНастройки_Реализация <> Неопределено Тогда
		СтруктураПараметров.ФормироватьРеализацию = мСтрокаНастройки_Реализация.Включать;
	Иначе
		СтруктураПараметров.ФормироватьРеализацию = Ложь;
	КонецЕсли;
	
	мСтрокаНастройки_СчетНаОплату = мСтрокаГруппы.Строки.Найти(мТТД_СчетНаОплату, "ИД");
	Если мСтрокаНастройки_СчетНаОплату <> Неопределено Тогда
		СтруктураПараметров.ФормироватьСчетНаОплату = мСтрокаНастройки_СчетНаОплату.Включать;
	Иначе
		СтруктураПараметров.ФормироватьСчетНаОплату = Ложь;
	КонецЕсли;
	
	мСтрокаНастройки = мСтрокаГруппы.Строки.Найти(мТТД_ОбщДок, "ИД");
	Если мСтрокаНастройки <> Неопределено Тогда
		
		мФлагОбщийТД 	= мСтрокаНастройки.Включать;
		мДатаОбщегоТД 	= мСтрокаНастройки.Значение;
		
		Если мФлагОбщийТД и Не ЗначениеЗаполнено(мДатаОбщегоТД) Тогда
			ТекстОшибки = "Не указана дата общего типового документа для обработки ТТД.";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат;
		Иначе	
			СтруктураПараметров.ФормироватьОбщийТД 	= мФлагОбщийТД;
			СтруктураПараметров.ДатаОбщегоТД 		= мДатаОбщегоТД;
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ОтборКонтрагент) Тогда
		СтруктураПараметров.Контрагент = ОтборКонтрагент;
	КонецЕсли;	
	
	СтруктураПараметров.ФормироватьТолькоНовые = ФлажокТолькоНовыеДокументы;
	
	//НачатьТранзакцию();
	
	УдалениеДокументов(ТаблицаВыборкиЗапросаУАТ, СтруктураПараметров);
	
	Состояние = "Обработка документов ""ТТД"" ...";
	
	НаборЗаписейТД1	= РегистрыСведений.уатТиповыеДокументы.СоздатьНаборЗаписей();
	
	//формирование реализации
	Если СтруктураПараметров.ФормироватьРеализацию Тогда
		СтруктураПараметров.ФормироватьСчетНаОплату = Ложь;
		
		Если мФлагОбщийТД Тогда
			
			//выгружаем в таблицу и сворачиваем ее по контрагентам и организациям
			мТаблица = ТаблицаВыборкиЗапросаУАТ.Скопировать();
			мТаблица.Свернуть("Организация, Контрагент");
			мОтбор = Новый Структура("Организация, Контрагент");
			
			Для Каждого ТекСтрока Из мТаблица Цикл
				
				НаборЗаписейТД1.мТиповойДокумент 		= Документы.РеализацияТоваровУслуг.СоздатьДокумент();
				НаборЗаписейТД1.мТиповойДокумент.Дата 	= мДатаОбщегоТД;
				
				мОтбор.Организация = ТекСтрока.Организация;
				мОтбор.Контрагент = ТекСтрока.Контрагент;
				мСтроки = ТаблицаВыборкиЗапросаУАТ.НайтиСтроки(мОтбор);
				
				ВсеОк = ВсеОк И ФормированиеДокументов(мСтроки, СтруктураПараметров, НаборЗаписейТД1);
				
				//Если НаборЗаписейТД1.мТиповойДокумент.Товары.Количество() > 0 Тогда
				//	НаборЗаписейТД1.мТиповойДокумент.Товары.Свернуть("Номенклатура, Серия, Характеристика, АналитикаУчетаНоменклатуры, СтатусУказанияСерий", "Количество");
				//	НаборЗаписейТД1.мТиповойДокумент.Записать();
				//КонецЕсли;
				
			КонецЦикла;	
			
		Иначе
			
			ВсеОк = ФормированиеДокументов(ТаблицаВыборкиЗапросаУАТ, СтруктураПараметров, НаборЗаписейТД1);
			
		КонецЕсли;
	КонецЕсли;
	
	//формирование счетов на оплату
	Если ВсеОк И СтруктураПараметров.ФормироватьСчетНаОплату Тогда
		СтруктураПараметров.ФормироватьРеализацию = Ложь;
		
		Если мФлагОбщийТД Тогда
			//выгружаем в таблицу и сворачиваем ее по контрагентам и организациям
			мТаблица = ТаблицаВыборкиЗапросаУАТ.Скопировать();
			мТаблица.Свернуть("Организация, Контрагент");
			мОтбор = Новый Структура("Организация, Контрагент");
			
			Для Каждого ТекСтрока Из мТаблица Цикл
				
				НаборЗаписейТД1.мТиповойДокумент 		= Документы.СчетНаОплатуКлиенту.СоздатьДокумент();
				НаборЗаписейТД1.мТиповойДокумент.Дата 	= мДатаОбщегоТД;
				
				мОтбор.Организация = ТекСтрока.Организация;
				мОтбор.Контрагент = ТекСтрока.Контрагент;
				мСтроки = ТаблицаВыборкиЗапросаУАТ.НайтиСтроки(мОтбор);
				
				ВсеОк = ВсеОк И ФормированиеДокументов(мСтроки, СтруктураПараметров, НаборЗаписейТД1);
				
				//Если НаборЗаписейТД1.мТиповойДокумент.Товары.Количество() > 0 Тогда
				//	НаборЗаписейТД1.мТиповойДокумент.Товары.Свернуть("Номенклатура, Серия, Характеристика, АналитикаУчетаНоменклатуры, СтатусУказанияСерий", "Количество");
				//	НаборЗаписейТД1.мТиповойДокумент.Записать();
				//КонецЕсли;
				
			КонецЦикла;	
			
		Иначе
			
			ВсеОк = ФормированиеДокументов(ТаблицаВыборкиЗапросаУАТ, СтруктураПараметров, НаборЗаписейТД1);
			
		КонецЕсли;
		
	КонецЕсли;
		
	
	Если ВсеОк Тогда
		
		ИндикаторХодПроцесса = 0;
		Состояние = "";
		
		//ЗафиксироватьТранзакцию();
		
	Иначе
		
		ТекстОшибки = "Ошибка формирования типовых документов.";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		
	КонецЕсли;	
	
	мСтрокаГруппы.Выполнено = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаЗаказыТС()
	
	Перем ТаблицаВыборкиЗапросаУАТ;
	
	ВсеОк = Истина;
	
	СтруктураПараметров = Новый Структура("ДокументУАТ, ФормироватьТолькоНовые, ФормироватьРеализацию, ФормироватьСчетНаОплату, ФормироватьОбщийТД, ДатаОбщегоТД, Контрагент");
	СтруктураПараметров.ДокументУАТ = Документы.уатЗаказГрузоотправителя;

	ДеревоНастроек_ = РеквизитФормыВЗначение("ДеревоНастроек");
	
	мСтрокаГруппы = ДеревоНастроек_.Строки.Найти(мЗаказТС, "ИД");
	Если мСтрокаГруппы <> Неопределено Тогда
		Если Не мСтрокаГруппы.Включать Тогда
			Возврат;
		КонецЕсли;	
	Иначе
		Возврат;
	КонецЕсли;	
	
	мСтрокаНастройки_Реализация = мСтрокаГруппы.Строки.Найти(мЗаказТС_Реализация, "ИД");
	Если мСтрокаНастройки_Реализация <> Неопределено Тогда
		мФормироватьРеализацию = мСтрокаНастройки_Реализация.Включать;
	Иначе
		мФормироватьРеализацию = Ложь;
	КонецЕсли;
	
	мСтрокаНастройки_СчетНаОплату = мСтрокаГруппы.Строки.Найти(мЗаказТС_СчетНаОплату, "ИД");
	Если мСтрокаНастройки_СчетНаОплату <> Неопределено Тогда
		мФормироватьСчетНаОплату = мСтрокаНастройки_СчетНаОплату.Включать;
	Иначе
		мФормироватьСчетНаОплату = Ложь;
	КонецЕсли;
	
	мСтрокаНастройки = мСтрокаГруппы.Строки.Найти(мЗаказТС_ОбщДок, "ИД");
	Если мСтрокаНастройки <> Неопределено Тогда
		
		мФлагОбщийТД 	= мСтрокаНастройки.Включать;
		мДатаОбщегоТД 	= мСтрокаНастройки.Значение;
		
		Если мФлагОбщийТД и Не ЗначениеЗаполнено(мДатаОбщегоТД) Тогда
			ТекстОшибки = "Не указана дата общего типового документа для обработки Заказов на ТС.";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат;
		Иначе	
			СтруктураПараметров.ФормироватьОбщийТД 	= мФлагОбщийТД;
			СтруктураПараметров.ДатаОбщегоТД 		= мДатаОбщегоТД;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборКонтрагент) Тогда
		СтруктураПараметров.Контрагент = ОтборКонтрагент;
	КонецЕсли;
	
	СтруктураПараметров.ФормироватьТолькоНовые = ФлажокТолькоНовыеДокументы;
	
	//НачатьТранзакцию();
	
	УдалениеДокументов(ТаблицаВыборкиЗапросаУАТ, СтруктураПараметров);
	
	Состояние = "Обработка документов ""Заказ на ТС"" ...";
	
	НаборЗаписейТД1	= РегистрыСведений.уатТиповыеДокументы.СоздатьНаборЗаписей();
	
	//формирование реализации
	Если мФормироватьРеализацию Тогда
		СтруктураПараметров.ФормироватьРеализацию = Истина;
		СтруктураПараметров.ФормироватьСчетНаОплату = Ложь;
			
		Если мФлагОбщийТД Тогда
						
			//выгружаем в таблицу и сворачиваем ее по контрагентам и организациям
			мТаблица = ТаблицаВыборкиЗапросаУАТ.Скопировать();
			мТаблица.Свернуть("Организация, Контрагент");
			мОтбор = Новый Структура("Организация, Контрагент");
			
			Для Каждого ТекСтрока Из мТаблица Цикл
				
				НаборЗаписейТД1.мТиповойДокумент 		= Документы.РеализацияТоваровУслуг.СоздатьДокумент();
				НаборЗаписейТД1.мТиповойДокумент.Дата 	= мДатаОбщегоТД;
				
				мОтбор.Организация = ТекСтрока.Организация;
				мОтбор.Контрагент = ТекСтрока.Контрагент;
				мСтроки = ТаблицаВыборкиЗапросаУАТ.НайтиСтроки(мОтбор);
				
				ВсеОк = ВсеОк И ФормированиеДокументов(мСтроки, СтруктураПараметров, НаборЗаписейТД1);
				
				//Если НаборЗаписейТД1.мТиповойДокумент.Товары.Количество() > 0 Тогда
				//	НаборЗаписейТД1.мТиповойДокумент.Товары.Свернуть("Номенклатура, Серия, Характеристика, АналитикаУчетаНоменклатуры, СтатусУказанияСерий", "Количество");
				//	НаборЗаписейТД1.мТиповойДокумент.Записать();
				//КонецЕсли;
				
			КонецЦикла;	
			
		Иначе
			
			ВсеОк = ФормированиеДокументов(ТаблицаВыборкиЗапросаУАТ, СтруктураПараметров, НаборЗаписейТД1);
			
		КонецЕсли;
	КонецЕсли;
	
	//формирование счетов на оплату
	Если ВсеОк И мФормироватьСчетНаОплату Тогда
		СтруктураПараметров.ФормироватьРеализацию = Ложь;
		СтруктураПараметров.ФормироватьСчетНаОплату = Истина;
		
		Если мФлагОбщийТД Тогда
			//выгружаем в таблицу и сворачиваем ее по контрагентам и организациям
			мТаблица = ТаблицаВыборкиЗапросаУАТ.Скопировать();
			мТаблица.Свернуть("Организация, Контрагент");
			мОтбор = Новый Структура("Организация, Контрагент");
			
			Для Каждого ТекСтрока Из мТаблица Цикл
				
				НаборЗаписейТД1.мТиповойДокумент 		= Документы.СчетНаОплатуКлиенту.СоздатьДокумент();
				НаборЗаписейТД1.мТиповойДокумент.Дата 	= мДатаОбщегоТД;
				
				мОтбор.Организация = ТекСтрока.Организация;
				мОтбор.Контрагент = ТекСтрока.Контрагент;
				мСтроки = ТаблицаВыборкиЗапросаУАТ.НайтиСтроки(мОтбор);
				
				ВсеОк = ВсеОк И ФормированиеДокументов(мСтроки, СтруктураПараметров, НаборЗаписейТД1);
				
				//Если НаборЗаписейТД1.мТиповойДокумент.Товары.Количество() > 0 Тогда
				//	НаборЗаписейТД1.мТиповойДокумент.Товары.Свернуть("Номенклатура, Серия, Характеристика, АналитикаУчетаНоменклатуры, СтатусУказанияСерий", "Количество");
				//	НаборЗаписейТД1.мТиповойДокумент.Записать();
				//КонецЕсли;
				
			КонецЦикла;	
			
		Иначе
			
			ВсеОк = ФормированиеДокументов(ТаблицаВыборкиЗапросаУАТ, СтруктураПараметров, НаборЗаписейТД1);
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если ВсеОк Тогда
		ИндикаторХодПроцесса = 0;
		Состояние = "";
		//ЗафиксироватьТранзакцию();
	Иначе
		ТекстОшибки = "Ошибка формирования типовых документов.";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;	
	
	мСтрокаГруппы.Выполнено = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОперацииСТЖ()
	
	Перем ТаблицаВыборкиЗапросаУАТ;
	
	ВсеОк = Истина;
	
	СтруктураПараметров = Новый Структура("ДокументУАТ, ФормироватьТолькоНовые, ФормироватьТребНакл, ФормироватьОприход");
	СтруктураПараметров.ДокументУАТ = Документы.уатОперацииСТехническимиЖидкостями;
	
	ДеревоНастроек_ = РеквизитФормыВЗначение("ДеревоНастроек");
	
	мСтрокаГруппы = ДеревоНастроек_.Строки.Найти(мТЖ, "ИД");
	Если мСтрокаГруппы <> Неопределено Тогда
		Если Не мСтрокаГруппы.Включать Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	мСтрокаНастройки_ТребНакл = мСтрокаГруппы.Строки.Найти(мТЖ_ТребНакл, "ИД");
	Если мСтрокаНастройки_ТребНакл <> Неопределено Тогда
		СтруктураПараметров.ФормироватьТребНакл = мСтрокаНастройки_ТребНакл.Включать;
	Иначе
		СтруктураПараметров.ФормироватьТребНакл = Ложь;
	КонецЕсли;
	
	мСтрокаНастройки_Оприход = мСтрокаГруппы.Строки.Найти(мТЖ_ОприходМатериалов, "ИД");
	Если мСтрокаНастройки_Оприход <> Неопределено Тогда
		СтруктураПараметров.ФормироватьОприход = мСтрокаНастройки_Оприход.Включать;
	Иначе
		СтруктураПараметров.ФормироватьОприход = Ложь;
	КонецЕсли;
	
	СтруктураПараметров.ФормироватьТолькоНовые = ФлажокТолькоНовыеДокументы;
	
	Если НЕ (СтруктураПараметров.ФормироватьТребНакл ИЛИ СтруктураПараметров.ФормироватьОприход) Тогда
		Возврат;
	КонецЕсли;
	
	//НачатьТранзакцию();
	
	УдалениеДокументов(ТаблицаВыборкиЗапросаУАТ, СтруктураПараметров);
	
	Состояние = "Обработка операций с техническими жидкостями ...";
	
	НаборЗаписейТД1 = РегистрыСведений.уатТиповыеДокументы.СоздатьНаборЗаписей();
	
	ВсеОк = ФормированиеДокументов(ТаблицаВыборкиЗапросаУАТ, СтруктураПараметров, НаборЗаписейТД1);
	
	Если ВсеОк Тогда
		ИндикаторХодПроцесса = 0;
		
	Иначе
		ТекстОшибки = "Ошибка формирования типовых документов.";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	Если мСтрокаНастройки_ТребНакл <> Неопределено Тогда
		мСтрокаНастройки_ТребНакл.Выполнено = СтруктураПараметров.ФормироватьТребНакл;
	КонецЕсли;	
	
	Если мСтрокаНастройки_Оприход <> Неопределено Тогда
		мСтрокаНастройки_Оприход.Выполнено = СтруктураПараметров.ФормироватьОприход;
	КонецЕсли;	
	
	мСтрокаГруппы.Выполнено = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаСливыГСМ()
	
	Перем ТаблицаВыборкиЗапросаУАТ;
	
	ВсеОк = Истина;
	
	СтруктураПараметров = Новый Структура("ДокументУАТ, ФормироватьТолькоНовые, ФормироватьВозвратПоставщику, ФормироватьОприход, ФормироватьПеремещение");
	СтруктураПараметров.ДокументУАТ = Документы.уатСливГСМ;
	
	ДеревоНастроек_ = РеквизитФормыВЗначение("ДеревоНастроек");
	
	мСтрокаГруппы = ДеревоНастроек_.Строки.Найти(мСливыГСМ, "ИД");
	Если мСтрокаГруппы <> Неопределено Тогда
		Если Не мСтрокаГруппы.Включать Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	мСтрокаНастройки_ВозвратПоставщику = мСтрокаГруппы.Строки.Найти(мСливыГСМ_ВозвратПоставщику, "ИД");
	Если мСтрокаНастройки_ВозвратПоставщику <> Неопределено Тогда
		СтруктураПараметров.ФормироватьВозвратПоставщику = мСтрокаНастройки_ВозвратПоставщику.Включать;
	Иначе
		СтруктураПараметров.ФормироватьВозвратПоставщику = Ложь;
	КонецЕсли;
	
	мСтрокаНастройки_Оприход = мСтрокаГруппы.Строки.Найти(мСливыГСМ_ОприходМатериалов, "ИД");
	Если мСтрокаНастройки_Оприход <> Неопределено Тогда
		СтруктураПараметров.ФормироватьОприход = мСтрокаНастройки_Оприход.Включать;
	Иначе
		СтруктураПараметров.ФормироватьОприход = Ложь;
	КонецЕсли;
	
	мСтрокаНастройки_Перемещение = мСтрокаГруппы.Строки.Найти(мСливыГСМ_ПеремещениеТоваров, "ИД");
	Если мСтрокаНастройки_Перемещение <> Неопределено Тогда
		СтруктураПараметров.ФормироватьПеремещение = мСтрокаНастройки_Перемещение.Включать;
	Иначе
		СтруктураПараметров.ФормироватьПеремещение = Ложь;
	КонецЕсли;
	
	СтруктураПараметров.ФормироватьТолькоНовые = ФлажокТолькоНовыеДокументы;
	
	Если НЕ (СтруктураПараметров.ФормироватьВозвратПоставщику
		ИЛИ СтруктураПараметров.ФормироватьОприход ИЛИ СтруктураПараметров.ФормироватьПеремещение) Тогда
		Возврат;
	КонецЕсли;
	
	//НачатьТранзакцию();
	
	УдалениеДокументов(ТаблицаВыборкиЗапросаУАТ, СтруктураПараметров);
	
	Состояние = "Обработка сливов ГСМ ...";
	
	НаборЗаписейТД1 = РегистрыСведений.уатТиповыеДокументы.СоздатьНаборЗаписей();
	
	ВсеОк = ФормированиеДокументов(ТаблицаВыборкиЗапросаУАТ, СтруктураПараметров, НаборЗаписейТД1);
	
	Если ВсеОк Тогда
		ИндикаторХодПроцесса = 0;
		
	Иначе
		ТекстОшибки = "Ошибка формирования типовых документов.";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	Если мСтрокаНастройки_ВозвратПоставщику <> Неопределено Тогда
		мСтрокаНастройки_ВозвратПоставщику.Выполнено = СтруктураПараметров.ФормироватьВозвратПоставщику;
	КонецЕсли;	
	
	Если мСтрокаНастройки_Оприход <> Неопределено Тогда
		мСтрокаНастройки_Оприход.Выполнено = СтруктураПараметров.ФормироватьОприход;
	КонецЕсли;	
	
	мСтрокаГруппы.Выполнено = Истина;
	
КонецПроцедуры

// Процедура обновляет информацию в таблице настроек
&НаСервере
Процедура ЗаполнитьДерево()
	
	ДеревоНастроек_ = РеквизитФормыВЗначение("ДеревоНастроек");
	
	ДеревоНастроек_.Строки.Очистить();
	
	//==================================================
	// Заправки ГСМ
	
	СтрокаГруппы = ДеревоНастроек_.Строки.Добавить();
	СтрокаГруппы.Настройка 		= "Обрабатывать документы ""Заправка ГСМ""";
	СтрокаГруппы.Включать  		= Ложь;
	СтрокаГруппы.ЭтоГруппа 		= Истина;
	СтрокаГруппы.ЭтоПараметр 	= Ложь;
	СтрокаГруппы.Выполнено 		= Ложь;
	СтрокаГруппы.ИД 			= мЗаправкиГСМ;
	
	СтрокаНастройки = СтрокаГруппы.Строки.Добавить();
	СтрокаНастройки.Настройка 	= "Формировать документы ""Авансовый отчет"" для заправок за наличные";
	СтрокаНастройки.Включать  	= Ложь;
	СтрокаНастройки.ЭтоГруппа 	= Ложь;
	СтрокаНастройки.ЭтоПараметр = Ложь;
	СтрокаНастройки.Выполнено 	= Ложь;
	СтрокаНастройки.ИД 			= мЗаправкиГСМ_АвОтч;
	СтрокаНастройки.Значение = Справочники.Контрагенты.ПустаяСсылка();
	СтрокаНастройки.Картинка = 1;
	
	СтрокаНастройки = СтрокаГруппы.Строки.Добавить();
	СтрокаНастройки.Настройка 	= "Формировать документы ""Перемещение товаров"" для заправок со склада, по талонам и по пластиковым картам со склада";
	СтрокаНастройки.Включать  	= Ложь;
	СтрокаНастройки.ЭтоГруппа 	= Ложь;
	СтрокаНастройки.ЭтоПараметр = Ложь;
	СтрокаНастройки.Выполнено 	= Ложь;
	СтрокаНастройки.ИД 			= мЗаправкиГСМ_ПеремещТов;
	СтрокаНастройки.Картинка = 1;
	СтрокаНастройки.ЗначениеТолькоПросмотр = Истина;
	
	СтрокаНастройки = СтрокаГруппы.Строки.Добавить();
	СтрокаНастройки.Настройка 	= "Формировать документы ""Приобретение товаров и услуг"" для заправок по пластиковым картам и от поставщика";
	СтрокаНастройки.Включать  	= Ложь;
	СтрокаНастройки.ЭтоГруппа 	= Ложь;
	СтрокаНастройки.ЭтоПараметр = Ложь;
	СтрокаНастройки.Выполнено 	= Ложь;
	СтрокаНастройки.ИД 			= мЗаправкиГСМ_ПоступТовУслуг;
	СтрокаНастройки.Значение = Справочники.Контрагенты.ПустаяСсылка();
	СтрокаНастройки.Картинка = 1;
	
	
	//==================================================
	// Путевые листы
	
	СтрокаГруппы = ДеревоНастроек_.Строки.Добавить();
	СтрокаГруппы.Настройка 		= "Обрабатывать документы ""Путевой лист""";
	СтрокаГруппы.Включать  		= Ложь;
	СтрокаГруппы.ЭтоГруппа 		= Истина;
	СтрокаГруппы.ЭтоПараметр 	= Ложь;
	СтрокаГруппы.Выполнено 		= Ложь;
	СтрокаГруппы.ИД 			= мПутЛист;
	
	СтрокаНастройки = СтрокаГруппы.Строки.Добавить();
	СтрокаНастройки.Настройка = "Формировать документы ""Внутреннее потребление товаров"" для списания ГСМ";
	СтрокаНастройки.Включать  	= Ложь;
	СтрокаНастройки.ЭтоГруппа 	= Ложь;
	СтрокаНастройки.ЭтоПараметр = Ложь;
	СтрокаНастройки.Выполнено 	= Ложь;
	СтрокаНастройки.ИД 			= мПутЛист_ТребНакл;
	СтрокаНастройки.Картинка = 1;
	
	СтрокаНастройки = СтрокаГруппы.Строки.Добавить();
	СтрокаНастройки.Настройка = "Формировать документы ""Списание недостач товаров"" для списания ГСМ";
	СтрокаНастройки.Включать  	= Ложь;
	СтрокаНастройки.ЭтоГруппа 	= Ложь;
	СтрокаНастройки.ЭтоПараметр = Ложь;
	СтрокаНастройки.Выполнено 	= Ложь;
	СтрокаНастройки.ИД 			= мПутЛист_Списание;
	СтрокаНастройки.Картинка = 1;
	
	СтрокаНастройки = СтрокаГруппы.Строки.Добавить();
	СтрокаНастройки.Настройка = "Формировать документы ""Выработка сотрудников"" для отработанного времени сотрудников";
	СтрокаНастройки.Включать  	= Ложь;
	СтрокаНастройки.ЭтоГруппа 	= Ложь;
	СтрокаНастройки.ЭтоПараметр = Ложь;
	СтрокаНастройки.Выполнено 	= Ложь;
	СтрокаНастройки.ИД 			= мПутЛист_ВырабСотр;
	СтрокаНастройки.Картинка = 1;
	
	СтрокаНастройки = СтрокаГруппы.Строки.Добавить();
	СтрокаНастройки.Настройка = "Формировать документы ""Отражение прочих доходов и расходов"" для списания затрат";
	СтрокаНастройки.Включать  	= Ложь;
	СтрокаНастройки.ЭтоГруппа 	= Ложь;
	СтрокаНастройки.ЭтоПараметр = Ложь;
	СтрокаНастройки.Выполнено 	= Ложь;
	СтрокаНастройки.ИД 			= мПутЛист_ПрочДохРасх;
	СтрокаНастройки.Картинка = 1;
	
	СтрокаНастройки = СтрокаГруппы.Строки.Добавить();
	СтрокаНастройки.Настройка = "Формировать документы ""Регистрация наработок объектов эксплуатации"" для выработки";
	СтрокаНастройки.Включать  	= Ложь;
	СтрокаНастройки.ЭтоГруппа 	= Ложь;
	СтрокаНастройки.ЭтоПараметр = Ложь;
	СтрокаНастройки.Выполнено 	= Ложь;
	СтрокаНастройки.ИД 			= мПутЛист_РегНаработок;
	СтрокаНастройки.Картинка = 1;
	
	СтрокаНастройки = СтрокаГруппы.Строки.Добавить();
	СтрокаНастройки.Настройка 	= "Создавать общий типовой документ";
	СтрокаНастройки.Включать  	= Ложь;
	СтрокаНастройки.ЭтоГруппа 	= Ложь;
	СтрокаНастройки.ЭтоПараметр = Истина;
	СтрокаНастройки.Значение  	= ТекущаяДата();
	СтрокаНастройки.ИД 			= мПутЛист_ОбщДок;
	СтрокаНастройки.Картинка = 2;
	
	
	//==================================================
	// ТТД
	
	СтрокаГруппы 				= ДеревоНастроек_.Строки.Добавить();
	СтрокаГруппы.Настройка 		= "Обрабатывать документы ""ТТД""";
	СтрокаГруппы.Включать  		= Ложь;
	СтрокаГруппы.ЭтоГруппа 		= Истина;
	СтрокаГруппы.ЭтоПараметр 	= Ложь;
	СтрокаГруппы.Выполнено 		= Ложь;
	СтрокаГруппы.ИД 			= мТТД;
	
	СтрокаНастройки = СтрокаГруппы.Строки.Добавить();
	СтрокаНастройки.Настройка   = "Формировать документы ""Реализация товаров и услуг""";
	СтрокаНастройки.Включать  	= Ложь;
	СтрокаНастройки.ЭтоГруппа 	= Ложь;
	СтрокаНастройки.ЭтоПараметр = Ложь;
	СтрокаНастройки.Выполнено 	= Ложь;
	СтрокаНастройки.ИД 			= мТТД_Реализация;
	СтрокаНастройки.Картинка = 1;
	
	СтрокаНастройки = СтрокаГруппы.Строки.Добавить();
	СтрокаНастройки.Настройка   = "Формировать документы ""Счет на оплату клиенту""";
	СтрокаНастройки.Включать  	= Ложь;
	СтрокаНастройки.ЭтоГруппа 	= Ложь;
	СтрокаНастройки.ЭтоПараметр = Ложь;
	СтрокаНастройки.Выполнено 	= Ложь;
	СтрокаНастройки.ИД 			= мТТД_СчетНаОплату;
	СтрокаНастройки.Картинка = 1;
	
	СтрокаНастройки = СтрокаГруппы.Строки.Добавить();
	СтрокаНастройки.Настройка 	= "Создавать общий типовой документ";
	СтрокаНастройки.Включать  	= Ложь;
	СтрокаНастройки.ЭтоГруппа 	= Ложь;
	СтрокаНастройки.Значение  	= ТекущаяДата();
	СтрокаНастройки.ЭтоПараметр 	= Истина;
	СтрокаНастройки.ИД 			= мТТД_ОбщДок;
	СтрокаНастройки.Картинка = 2;
		
	
	//==================================================
	// Заказы грузоотправителей
	
	СтрокаГруппы 				= ДеревоНастроек_.Строки.Добавить();
	СтрокаГруппы.Настройка 		= "Обрабатывать документы ""Заказ на ТС""";
	СтрокаГруппы.Включать  		= Ложь;
	СтрокаГруппы.ЭтоГруппа 		= Истина;
	СтрокаГруппы.ЭтоПараметр 	= Ложь;
	СтрокаГруппы.Выполнено 		= Ложь;
	СтрокаГруппы.ИД 			= мЗаказТС;
	
	СтрокаНастройки = СтрокаГруппы.Строки.Добавить();
	СтрокаНастройки.Настройка   = "Формировать документы ""Реализация товаров и услуг"" для заказов контрагентов";
	СтрокаНастройки.Включать  	= Ложь;
	СтрокаНастройки.ЭтоГруппа 	= Ложь;
	СтрокаНастройки.ЭтоПараметр = Ложь;
	СтрокаНастройки.Выполнено 	= Ложь;
	СтрокаНастройки.ИД 			= мЗаказТС_Реализация;
	СтрокаНастройки.Картинка = 1;
	
	СтрокаНастройки = СтрокаГруппы.Строки.Добавить();
	СтрокаНастройки.Настройка   = "Формировать документы ""Счет на оплату клиенту"" для заказов контрагентов";
	СтрокаНастройки.Включать  	= Ложь;
	СтрокаНастройки.ЭтоГруппа 	= Ложь;
	СтрокаНастройки.ЭтоПараметр = Ложь;
	СтрокаНастройки.Выполнено 	= Ложь;
	СтрокаНастройки.ИД 			= мЗаказТС_СчетНаОплату;
	СтрокаНастройки.Картинка = 1;
	
	СтрокаНастройки = СтрокаГруппы.Строки.Добавить();
	СтрокаНастройки.Настройка 	= "Создавать общий типовой документ";
	СтрокаНастройки.Включать  	= Ложь;
	СтрокаНастройки.ЭтоГруппа 	= Ложь;
	СтрокаНастройки.Значение  	= ТекущаяДата();
	СтрокаНастройки.ЭтоПараметр = Истина;
	СтрокаНастройки.ИД 			= мЗаказТС_ОбщДок;
	СтрокаНастройки.Картинка = 2;
	
	
	//==================================================
	// Сливы ГСМ
	
	СтрокаГруппы                = ДеревоНастроек_.Строки.Добавить();
	СтрокаГруппы.Настройка 		= "Обрабатывать документы ""Слив ГСМ""";
	СтрокаГруппы.Включать  		= Ложь;
	СтрокаГруппы.ЭтоГруппа 		= Истина;
	СтрокаГруппы.ЭтоПараметр 	= Ложь;
	СтрокаГруппы.Выполнено 		= Ложь;
	СтрокаГруппы.ИД 			= мСливыГСМ;
	
	СтрокаНастройки = СтрокаГруппы.Строки.Добавить();
	СтрокаНастройки.Настройка = "Формировать документы ""Возврат товаров поставщику"" для сливов на АЗС";
	СтрокаНастройки.Включать  	= Ложь;
	СтрокаНастройки.ЭтоГруппа 	= Ложь;
	СтрокаНастройки.ЭтоПараметр = Ложь;
	СтрокаНастройки.Выполнено   = Ложь;
	СтрокаНастройки.ИД 			= мСливыГСМ_ВозвратПоставщику;
	СтрокаНастройки.Картинка    = 1;
	
	СтрокаНастройки = СтрокаГруппы.Строки.Добавить();
	СтрокаНастройки.Настройка = "Формировать документы ""Оприходование излишков товаров"" для сливов на склад";
	СтрокаНастройки.Включать  	= Ложь;
	СтрокаНастройки.ЭтоГруппа 	= Ложь;
	СтрокаНастройки.ЭтоПараметр = Ложь;
	СтрокаНастройки.Выполнено   = Ложь;
	СтрокаНастройки.ИД 			= мСливыГСМ_ОприходМатериалов;
	СтрокаНастройки.Картинка    = 1;
	
	СтрокаНастройки = СтрокаГруппы.Строки.Добавить();
	СтрокаНастройки.Настройка = "Формировать документы ""Перемещение товаров"" для сливов на склад";
	СтрокаНастройки.Включать  	= Ложь;
	СтрокаНастройки.ЭтоГруппа 	= Ложь;
	СтрокаНастройки.ЭтоПараметр = Ложь;
	СтрокаНастройки.Выполнено   = Ложь;
	СтрокаНастройки.ИД 			= мСливыГСМ_ПеремещениеТоваров;
	СтрокаНастройки.Картинка    = 1;
	
	
	//==================================================
	// Операции с ТЖ
	
	СтрокаГруппы                = ДеревоНастроек_.Строки.Добавить();
	СтрокаГруппы.Настройка 		= "Обрабатывать документы ""Операции с техническими жидкостями""";
	СтрокаГруппы.Включать  		= Ложь;
	СтрокаГруппы.ЭтоГруппа 		= Истина;
	СтрокаГруппы.ЭтоПараметр 	= Ложь;
	СтрокаГруппы.Выполнено 		= Ложь;
	СтрокаГруппы.ИД 			= мТЖ;
	
	СтрокаНастройки = СтрокаГруппы.Строки.Добавить();
	СтрокаНастройки.Настройка = "Формировать документы ""Внутреннее потребление товаров"" для доливов";
	СтрокаНастройки.Включать  	= Ложь;
	СтрокаНастройки.ЭтоГруппа 	= Ложь;
	СтрокаНастройки.ЭтоПараметр = Ложь;
	СтрокаНастройки.Выполнено   = Ложь;
	СтрокаНастройки.ИД 			= мТЖ_ТребНакл;
	СтрокаНастройки.Картинка    = 1;
	
	СтрокаНастройки = СтрокаГруппы.Строки.Добавить();
	СтрокаНастройки.Настройка = "Формировать документы ""Оприходование излишков товаров"" для сливов";
	СтрокаНастройки.Включать  	= Ложь;
	СтрокаНастройки.ЭтоГруппа 	= Ложь;
	СтрокаНастройки.ЭтоПараметр = Ложь;
	СтрокаНастройки.Выполнено   = Ложь;
	СтрокаНастройки.ИД 			= мТЖ_ОприходМатериалов;
	СтрокаНастройки.Картинка    = 1;
	
	ЗначениеВРеквизитФормы(ДеревоНастроек_, "ДеревоНастроек");
	
КонецПроцедуры

// Процедура обновляет информацию для подчиненных строк
&НаКлиенте
Процедура УстановитьПометкиРодителей(СтрокаПотомок)
	
	СтрокаРодитель = СтрокаПотомок.ПолучитьРодителя();
	
	Если СтрокаРодитель = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	мНайденыВключенные = Ложь;	
	мЕстьДляВкл = Ложь;
	
	Для Каждого ТекСтрока Из СтрокаРодитель.ПолучитьЭлементы() Цикл
		Если Не ТекСтрока.ЭтоПараметр Тогда
			мЕстьДляВкл = Истина;
			мНайденыВключенные = ТекСтрока.Включать;
			
			Если мНайденыВключенные Тогда
				Прервать;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
	Если мЕстьДляВкл Тогда
		СтрокаРодитель.Включать = мНайденыВключенные;
	КонецЕсли;	
	
КонецПроцедуры

// Процедура обновляет информацию для подчиненных строк
&НаКлиенте
Процедура УстановитьПометкиПодчиненных(СтрокаРодитель)
	
	мЗначение    = СтрокаРодитель.Включать;
	Подчиненные = СтрокаРодитель.ПолучитьЭлементы();
	
	Для Каждого ТекСтрока Из Подчиненные Цикл
		
		Если Не ТекСтрока.ЭтоПараметр Тогда
			ТекСтрока.Включать = мЗначение;
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаКлиенте
Процедура НастройкаПериода(Команда)
	ДиалогПериода = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогПериода.Период.ДатаНачала = ДатаНач;
	ДиалогПериода.Период.ДатаОкончания = ДатаКон;
	ДиалогПериода.Показать(Новый ОписаниеОповещения("НастройкаПериодаЗавершение", ЭтотОбъект, Новый Структура("ДиалогПериода", ДиалогПериода)));
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПериодаЗавершение(Период, ДополнительныеПараметры) Экспорт
    
    Если Период <> Неопределено Тогда
		ДатаНач = Период.ДатаНачала;
        ДатаКон = Период.ДатаОкончания;
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсеФлажки(Команда)
	Для Каждого ТекСтрокаГруппы Из ДеревоНастроек.ПолучитьЭлементы() Цикл
		ТекСтрокаГруппы.Включать = Истина;
		
		//для путевого листа оставляем только один флажок
		Если ТекСтрокаГруппы.Включать И ТекСтрокаГруппы.ИД = мПутЛист Тогда
			ТекСтрокаГруппы.ПолучитьЭлементы()[0].Включать = Истина;
			ТекСтрокаГруппы.ПолучитьЭлементы()[1].Включать = Ложь;
			ТекСтрокаГруппы.ПолучитьЭлементы()[2].Включать = Истина;
			ТекСтрокаГруппы.ПолучитьЭлементы()[3].Включать = Истина;
			Продолжить;
			
		//для заказа ТС оставляем только один флажок
		ИначеЕсли ТекСтрокаГруппы.Включать И ТекСтрокаГруппы.ИД = мЗаказТС Тогда
			ТекСтрокаГруппы.ПолучитьЭлементы()[0].Включать = Истина;
			ТекСтрокаГруппы.ПолучитьЭлементы()[1].Включать = Ложь;
			Продолжить;
			
		КонецЕсли;
		
		УстановитьПометкиПодчиненных(ТекСтрокаГруппы);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеФлажки(Команда)
	Для Каждого ТекСтрокаГруппы Из ДеревоНастроек.ПолучитьЭлементы() Цикл
		ТекСтрокаГруппы.Включать = Ложь;
		УстановитьПометкиПодчиненных(ТекСтрокаГруппы);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОбщуюДату(Команда)
	ДатаОбщегоДок = ТекущаяДата();
	Подсказка = "Введите дату";
	ЧастьДаты = ЧастиДаты.Дата;
	ПоказатьВводДаты(Новый ОписаниеОповещения("УстановитьОбщуюДатуЗавершение", ЭтотОбъект, Новый Структура("ДатаОбщегоДок", ДатаОбщегоДок)), ДатаОбщегоДок, Подсказка, ЧастьДаты);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОбщуюДатуЗавершение(Дата, ДополнительныеПараметры) Экспорт
	
	ДатаОбщегоДок = ?(Дата = Неопределено, ДополнительныеПараметры.ДатаОбщегоДок, Дата);
	
	Если (Дата <> Неопределено) Тогда
		Для Каждого ТекСтрокаГруппы Из ДеревоНастроек.ПолучитьЭлементы() Цикл
			Для Каждого ТекСтрока Из ТекСтрокаГруппы.ПолучитьЭлементы() Цикл
				Если ТекСтрока.ИД = мПутЛист_ОбщДок Или ТекСтрока.ИД = мТТД_ОбщДок Тогда
					ТекСтрока.Значение = ДатаОбщегоДок;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработку(Команда)
	Элементы.ГруппаСтраницыИндикатор.ТекущаяСтраница = Элементы.СтраницаИндикатор;
	ИндикаторХодПроцесса = 0;
	
	Для Каждого СтрокаГруппы Из ДеревоНастроек.ПолучитьЭлементы() Цикл
		СтрокаГруппы.Выполнено = Ложь;
		Для Каждого Строка Из СтрокаГруппы.ПолучитьЭлементы() Цикл
			Строка.Выполнено = Ложь;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаСозданныеДокументы.Очистить();
	
	СтрокиДерева = ДеревоНастроек.ПолучитьЭлементы();
	Состояние("Выполняется обработка документов ""Заправка ГСМ"" ...");
	ОбработкаЗаправкиГСМ();
	СтрокиДерева[0].Выполнено = Истина;
	
	Состояние("Выполняется обработка документов ""Путевой лист"" ...");
	ОбработкаПутЛисты();
	СтрокиДерева[1].Выполнено = Истина;
	
	Состояние("Выполняется обработка документов ""ТТД"" ...");
	ОбработкаТТД();
	СтрокиДерева[2].Выполнено = Истина;
	
	Состояние("Выполняется обработка документов ""Заказ на ТС"" ...");
	ОбработкаЗаказыТС();
	СтрокиДерева[3].Выполнено = Истина;
	
	Состояние("Выполняется обработка документов ""Слив ГСМ"" ...");
	ОбработкаСливыГСМ();
	СтрокиДерева[4].Выполнено = Истина;
	
	Состояние("Выполняется обработка документов ""Операции с техническими жидкостями"" ...");
	ОбработкаОперацииСТЖ();
	СтрокиДерева[5].Выполнено = Истина;
	
	ИндикаторХодПроцесса = 0;
	Элементы.ГруппаСтраницыИндикатор.ТекущаяСтраница = Элементы.СтраницаПустая;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ РЕКВИЗИТОВ ФОРМЫ

&НаКлиенте
Процедура ДеревоНастроекВключатьПриИзменении(Элемент)
	СтрокаДерева = Элементы.ДеревоНастроек.ТекущиеДанные;
	
	//для путевого листа оставляем только один флажок
	Если СтрокаДерева.Включать Тогда
		Если СтрокаДерева.ИД = мПутЛист ИЛИ СтрокаДерева.ИД = мПутЛист_ТребНакл ИЛИ СтрокаДерева.ИД = мПутЛист_Списание Тогда
			Если СтрокаДерева.ИД = мПутЛист Тогда
				СтрокаДерева.ПолучитьЭлементы()[0].Включать = Истина;
				СтрокаДерева.ПолучитьЭлементы()[1].Включать = Ложь;
				СтрокаДерева.ПолучитьЭлементы()[2].Включать = Истина;
				СтрокаДерева.ПолучитьЭлементы()[3].Включать = Истина;
				СтрокаДерева.ПолучитьЭлементы()[4].Включать = Истина;
				
			ИначеЕсли СтрокаДерева.ИД = мПутЛист_ТребНакл Тогда
				СтрокаДерева.ПолучитьРодителя().Включать = Истина;
				СтрокаДерева.ПолучитьРодителя().ПолучитьЭлементы()[1].Включать = Ложь;
				
			ИначеЕсли СтрокаДерева.ИД = мПутЛист_Списание Тогда
				СтрокаДерева.ПолучитьРодителя().Включать = Истина;
				СтрокаДерева.ПолучитьРодителя().ПолучитьЭлементы()[0].Включать = Ложь;
				
			КонецЕсли;
			
			Возврат;
			
		ИначеЕсли СтрокаДерева.ИД = мСливыГСМ ИЛИ СтрокаДерева.ИД = мСливыГСМ_ОприходМатериалов ИЛИ СтрокаДерева.ИД = мСливыГСМ_ПеремещениеТоваров Тогда
			Если СтрокаДерева.ИД = мСливыГСМ Тогда
				СтрокаДерева.ПолучитьЭлементы()[0].Включать = Истина;
				СтрокаДерева.ПолучитьЭлементы()[1].Включать = Истина;
				СтрокаДерева.ПолучитьЭлементы()[2].Включать = Ложь;
				
			ИначеЕсли СтрокаДерева.ИД = мСливыГСМ_ОприходМатериалов Тогда
				СтрокаДерева.ПолучитьРодителя().Включать = Истина;
				СтрокаДерева.ПолучитьРодителя().ПолучитьЭлементы()[2].Включать = Ложь;
				
			Иначе
				СтрокаДерева.ПолучитьРодителя().Включать = Истина;
				СтрокаДерева.ПолучитьРодителя().ПолучитьЭлементы()[1].Включать = Ложь;
				
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
		
	УстановитьПометкиРодителей(СтрокаДерева);
	УстановитьПометкиПодчиненных(СтрокаДерева);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСозданныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Попытка
		Если Колонка.Имя = "ТаблицаСозданныеДокументыДокументУАТ" Тогда
			ПоказатьЗначение(, Элементы.ТаблицаСозданныеДокументы.ТекущиеДанные.ДокументУАТ);
		Иначе
			ПоказатьЗначение(, Элементы.ТаблицаСозданныеДокументы.ТекущиеДанные.ТиповойДокумент);
		КонецЕсли;
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСозданныеДокументыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСозданныеДокументыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры


//=================================================================================
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатОбработкаФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка,ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	ДатаНач = НачалоМесяца(ТекущаяДата());
	ДатаКон = КонецМесяца(ТекущаяДата());
	
	ЗаполнитьДерево();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	уатЗащищенныеФункцииКлиент.уатОбработкаФормаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РазвернутьДеревоНастроек();
КонецПроцедуры

&НаКлиенте
Процедура ТиповыеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Поле.Имя = "ТиповыеДокументыДокументУАТ" Тогда
		ПоказатьЗначение(Неопределено, Элементы.ТиповыеДокументы.ТекущиеДанные.ДокументУАТ);
		
	ИначеЕсли Поле.Имя = "ТиповыеДокументыТиповойДокумент" Тогда
		ПоказатьЗначение(Неопределено, Элементы.ТиповыеДокументы.ТекущиеДанные.ТиповойДокумент);
		
	КонецЕсли;
		
КонецПроцедуры


мЗаправкиГСМ				= 1;
мЗаправкиГСМ_АвОтч			= 12;
мЗаправкиГСМ_ПеремещТов		= 13;
мЗаправкиГСМ_ПоступТовУслуг	= 14;

мПутЛист					= 2;
мПутЛист_ТребНакл			= 21;
мПутЛист_Списание			= 22;
мПутЛист_ВырабСотр			= 23;
мПутЛист_ОбщДок				= 24;
мПутЛист_ПрочДохРасх		= 25;
мПутЛист_РегНаработок		= 26;

мЗаказТС 					= 3;
мЗаказТС_Реализация			= 31;
мЗаказТС_СчетНаОплату		= 32;
мЗаказТС_ОбщДок				= 33;

мТТД						= 5;
мТТД_Реализация				= 51;
мТТД_СчетНаОплату			= 52;
мТТД_ОбщДок					= 53;

мСливыГСМ					 = 6;
мСливыГСМ_ВозвратПоставщику  = 62;
мСливыГСМ_ОприходМатериалов	 = 63;
мСливыГСМ_ПеремещениеТоваров = 64;

мТЖ                     = 7;
мТЖ_ТребНакл            = 71;
мТЖ_ОприходМатериалов   = 72;
