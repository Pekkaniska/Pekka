
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗагрузитьПараметрыРеглЗаданий();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ПравоДоступа("Изменение", Метаданные.Константы.уатИспользоватьМониторинг) Тогда 
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	УстановитьСписокВыбораВариантовПериодичностиХраненияДанных(Элементы.Omnicomm_ПериодичностьХранения);
	УстановитьСписокВыбораВариантовПериодичностиРегламентногоЗадания(Элементы.ИнтервалЗагрузки);
	
	УстановитьСписокВыбораВариантовПериодичностиХраненияДанных(Элементы.PositionReport_ПериодичностьХранения);
	
	УстановитьСписокВыбораВариантовПериодичностиХраненияДанных(Элементы.Автотрекер_ПериодичностьХранения);
	УстановитьСписокВыбораВариантовПериодичностиРегламентногоЗадания(Элементы.Автотрекер_ИнтервалЗагрузки);
	
	УстановитьСписокВыбораВариантовПериодичностиРегламентногоЗадания(Элементы.СКАУТ_ИнтервалЗагрузки);
	
	УстановитьСписокВыбораВариантовПериодичностиХраненияДанных(Элементы.АвтоГРАФ_ПериодичностьХранения);
	УстановитьСписокВыбораВариантовПериодичностиРегламентногоЗадания(Элементы.АвтоГРАФ_ИнтервалЗагрузки);
	
	УстановитьСписокВыбораВариантовПериодичностиХраненияДанных(Элементы.Wialon_ПериодичностьХранения);
	УстановитьСписокВыбораВариантовПериодичностиРегламентногоЗадания(Элементы.Wialon_ИнтервалЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
		Элементы.ПолучитьТокенWialon.Видимость = Ложь;
	#КонецЕсли
	
	УстановитьВидимостьИНастройкиРеквизитовGPS();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если НаборКонстант.уатИспользоватьDynafleet И НЕ ЗначениеЗаполнено(НаборКонстант.уатАдресСервисаDynafleet) Тогда
		ТекстСообщения = "Необходимо указать адрес сервиса Dynafleet.";
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщения, Отказ);
	КонецЕсли;
	Если НаборКонстант.уатИспользоватьPositionReport тогда
		Если НЕ ЗначениеЗаполнено(НаборКонстант.уатАдресСервисаPositionReport) Тогда
			ТекстСообщения = "Необходимо указать адрес сервиса ITS-Soft Position Report.";
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщения, Отказ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НаборКонстант.уатПространствоИменСервисаPositionReport) Тогда
			ТекстСообщения = "Необходимо указать пространство имен сервиса ITS-Soft Position Report.";
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщения, Отказ);
		КонецЕслИ;
	КонецЕсли;
	Если НаборКонстант.уатИспользоватьOmnicomm Тогда 
		Если НаборКонстант.уатСпособРаботыСOmnicomm = ПредопределенноеЗначение("Перечисление.уатСпособРаботыСOmnicomm.ВебСервис") Тогда 
			Если Не ЗначениеЗаполнено(НаборКонстант.уатАдресСервисаOmnicomm) Тогда 
				ТекстСообщения = "Необходимо указать адрес сервиса Omnicomm.";
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщения, Отказ);
			КонецЕсли;
		Иначе
			Если Не ЗначениеЗаполнено(НаборКонстант.уатСерверВСистемеOmnicomm) Тогда 
				ТекстСообщения = "Необходимо указать адрес сервера БД Omnicomm.";
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщения, Отказ);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(НаборКонстант.уатИмяБДВСистемеOmnicomm) Тогда 
				ТекстСообщения = "Необходимо указать имя БД Omnicomm.";
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщения, Отказ);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(НаборКонстант.уатДрайверВСистемеOmnicomm) Тогда 
				ТекстСообщения = "Необходимо указать драйвер БД Omnicomm.";
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщения, Отказ);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(НаборКонстант.уатИмяPIPEСистемеOmnicomm) Тогда 
				ТекстСообщения = "Необходимо указать имя PIPE БД Omnicomm.";
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщения, Отказ);
			КонецЕсли;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НаборКонстант.уатЛогинВСистемеOmnicomm) Тогда 
			ТекстСообщения = "Необходимо указать логин для авторизации в сервисе Omnicomm.";
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщения, Отказ);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НаборКонстант.уатПарольВСистемеOmnicomm) Тогда 
			ТекстСообщения = "Необходимо указать пароль для авторизации в сервисе Omnicomm.";
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщения, Отказ);
		КонецЕсли;
	КонецЕсли;
	Если НаборКонстант.уатИспользоватьАвтотрекер Тогда 
		Если Не ЗначениеЗаполнено(НаборКонстант.уатАдресСервисаАвтотрекер) Тогда 
			ТекстСообщения = "Необходимо указать адрес сервиса Автотрекер.";
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщения, Отказ);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НаборКонстант.уатПортСервисаАвтотрекер) Тогда 
			ТекстСообщения = "Необходимо указать порт сервиса Автотрекер.";
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщения, Отказ);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НаборКонстант.уатЛогинВСистемеАвтотрекер) Тогда 
			ТекстСообщения = "Необходимо указать логин для авторизации в сервисе Автотрекер.";
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщения, Отказ);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НаборКонстант.уатПарольВСистемеАвтотрекер) Тогда 
			ТекстСообщения = "Необходимо указать пароль для авторизации в сервисе Автотрекер.";
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщения, Отказ);
		КонецЕсли;
	КонецЕсли;
	Если НаборКонстант.уатИспользоватьСКАУТ Тогда 
		Если Не ЗначениеЗаполнено(НаборКонстант.уатАдресСервисаСКАУТ) Тогда 
			ТекстСообщения = "Необходимо указать адрес сервиса СКАУТ.";
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщения, Отказ);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НаборКонстант.уатЛогинВСистемеСКАУТ) Тогда 
			ТекстСообщения = "Необходимо указать логин для авторизации в сервисе СКАУТ.";
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщения, Отказ);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НаборКонстант.уатПарольВСистемеСКАУТ) Тогда 
			ТекстСообщения = "Необходимо указать пароль для авторизации в сервисе СКАУТ.";
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщения, Отказ);
		КонецЕсли;
	КонецЕсли;
	Если НаборКонстант.уатИспользоватьWialon Тогда 
		Если Не ЗначениеЗаполнено(НаборКонстант.уатАдресСервисаWialon) Тогда 
			ТекстСообщения = "Необходимо указать адрес сервиса Wialon.";
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщения, Отказ);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НаборКонстант.уатТокенВСистемеWialon) Тогда 
			ТекстСообщения = "Необходимо указать пароль для авторизации в сервисе Wialon.";
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщения, Отказ);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Wialon_Ресурс) Тогда 
			ТекстСообщения = "Необходимо указать имя ресурса в сервисе Wialon.";
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщения, Отказ);
		КонецЕсли;
	КонецЕсли;
	Если НаборКонстант.уатИспользоватьАвтоГРАФ И Не ЗначениеЗаполнено(НаборКонстант.уатАдресСервисаАвтоГРАФ) Тогда 
		ТекстСообщения = "Необходимо указать адрес сервиса АвтоГРАФ.";
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщения, Отказ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ОбновитьИнтерфейс();
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	СохранитьПараметрыРеглЗаданий();
	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	ЗаполнитьТССервер(ВыбранноеЗначение);
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура уатИспользоватьOmnicommПриИзменении(Элемент)
	УстановитьВидимостьИНастройкиРеквизитовGPS();
	Если НаборКонстант.уатИспользоватьOmnicomm тогда
		Если НЕ ЗначениеЗаполнено(НаборКонстант.уатСпособРаботыСOmnicomm) Тогда
			НаборКонстант.уатСпособРаботыСOmnicomm = ПредопределенноеЗначение("Перечисление.уатСпособРаботыСOmnicomm.БД");
		КонецЕсли;
	Иначе
		НаборКонстант.уатСпособРаботыСOmnicomm = ПредопределенноеЗначение("Перечисление.уатСпособРаботыСOmnicomm.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура уатИспользоватьDynafleetПриИзменении(Элемент)
	УстановитьВидимостьИНастройкиРеквизитовGPS();
КонецПроцедуры

&НаКлиенте
Процедура уатИспользоватьPositionReportПриИзменении(Элемент)
	УстановитьВидимостьИНастройкиРеквизитовGPS();
	Если НЕ НаборКонстант.уатИспользоватьPositionReport Тогда
		НаборКонстант.уатАдресСервисаPositionReport            = "";
		НаборКонстант.уатПространствоИменСервисаPositionReport = "";
		НаборКонстант.уатЛогинВСистемеPositionReport           = "";
		НаборКонстант.уатПарольВСистемеPositionReport          = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура уатИспользоватьАвтотрекерПриИзменении(Элемент)
	УстановитьВидимостьИНастройкиРеквизитовGPS();
	Если Не НаборКонстант.уатИспользоватьАвтотрекер Тогда
		НаборКонстант.уатАдресСервисаАвтотрекер   = "";
		НаборКонстант.уатПортСервисаАвтотрекер    = 0;
		НаборКонстант.уатЛогинВСистемеАвтотрекер  = "";
		НаборКонстант.уатПарольВСистемеАвтотрекер = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура уатИспользоватьСКАУТПриИзменении(Элемент)
	УстановитьВидимостьИНастройкиРеквизитовGPS();
	Если Не НаборКонстант.уатИспользоватьСКАУТ Тогда
		НаборКонстант.уатАдресСервисаСКАУТ   = "";
		НаборКонстант.уатЛогинВСистемеСКАУТ  = "";
		НаборКонстант.уатПарольВСистемеСКАУТ = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура уатСпособРаботыСOmnicommПриИзменении(Элемент)
	УстановитьВидимостьИНастройкиРеквизитовGPS();
КонецПроцедуры

&НаКлиенте
Процедура уатСпособПодключенияКСистемеOmnicommПриИзменении(Элемент)
	УстановитьВидимостьИНастройкиРеквизитовGPS();
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗагрузкиDynafleetНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр = "Файл данных (*.xml)|*.xml";
	ДиалогВыбораФайла.Заголовок = "Выберите файл";
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.Расширение = "xml";
	ДиалогВыбораФайла.ИндексФильтра = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла = ИмяФайлаЗагрузкиDynafleet;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ИмяФайлаЗагрузкиDynafleetНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла)));
КонецПроцедуры

&НаКлиенте
Процедура ТаблТСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	мсвСтрокаПоиска = таблТС.НайтиСтроки(Новый Структура("ТС", ВыбранноеЗначение));
	Если мсвСтрокаПоиска.Количество() = 0 Тогда 
		НоваяСтрока = таблТС.Добавить();
		НоваяСтрока.ТС = ВыбранноеЗначение;
		Элементы.таблТС.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Модифицированность = Истина;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Вы уже выбрали данное ТС");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалЗагрузкиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Omnicomm_ПериодичностьХраненияПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагружатьИзФайлаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	УстановитьВидимостьИНастройкиРеквизитовGPS();
	
КонецПроцедуры

&НаКлиенте
Процедура PositionReport_ПериодичностьХраненияПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СКАУТ_ИнтервалЗагрузкиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СКАУТ_ТаблТСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ТранспортныеСредства") Тогда 
		мсвСтрокаПоиска = СКАУТ_ТаблТС.НайтиСтроки(Новый Структура("ТС", ВыбранноеЗначение));
		Если мсвСтрокаПоиска.Количество() = 0 Тогда 
			НоваяСтрока = СКАУТ_ТаблТС.Добавить();
			НоваяСтрока.ТС = ВыбранноеЗначение;
			Элементы.СКАУТ_ТаблТС.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			Модифицированность = Истина;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Вы уже выбрали данное ТС");
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Строка") И Не Найти(ВыбранноеЗначение, "e1cib/tempstorage") = 0 Тогда 
		ЗаполнитьТаблицуТССкаутСервер(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоГРАФ_ИнтервалЗагрузкиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоГРАФ_ПериодичностьХраненияПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура уатИспользоватьАвтоГРАФПриИзменении(Элемент)
	
	УстановитьВидимостьИНастройкиРеквизитовGPS();
	Если Не НаборКонстант.уатИспользоватьАвтоГРАФ Тогда
		НаборКонстант.уатАдресСервисаАвтоГРАФ = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура уатИспользоватьWialonПриИзменении(Элемент)
	
	УстановитьВидимостьИНастройкиРеквизитовGPS();
	Если Не НаборКонстант.уатИспользоватьWialon Тогда
		НаборКонстант.уатАдресСервисаWialon  = "";
		НаборКонстант.уатТокенВСистемеWialon = "";
		Wialon_Ресурс                        = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Wialon_РесурсПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Wialon_РесурсНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбновитьСписокВыбораРесурсаWialon();
	
КонецПроцедуры

&НаКлиенте
Процедура Wialon_ИнтервалЗагрузкиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура уатТокенВСистемеWialonПриИзменении(Элемент)
	
	Wialon_Ресурс = "";
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура уатАдресСервисаWialonПриИзменении(Элемент)
	
	Wialon_Ресурс = "";
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Wialon_ПериодичностьХраненияПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Wialon_ТаблТСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ТранспортныеСредства") Тогда 
		мсвСтрокаПоиска = Wialon_ТаблТС.НайтиСтроки(Новый Структура("ТС", ВыбранноеЗначение));
		Если мсвСтрокаПоиска.Количество() = 0 Тогда 
			НоваяСтрока = Wialon_ТаблТС.Добавить();
			НоваяСтрока.ТС = ВыбранноеЗначение;
			Элементы.Wialon_ТаблТС.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			Модифицированность = Истина;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Вы уже выбрали данное ТС");
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Строка") И Не Найти(ВыбранноеЗначение, "e1cib/tempstorage") = 0 Тогда 
		ЗаполнитьТаблицуТСWialonСервер(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Автотрекер_ИнтервалЗагрузкиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Автотрекер_ПериодичностьХраненияПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Автотрекер_ТаблТСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ТранспортныеСредства") Тогда 
		мсвСтрокаПоиска = Автотрекер_ТаблТС.НайтиСтроки(Новый Структура("ТС", ВыбранноеЗначение));
		Если мсвСтрокаПоиска.Количество() = 0 Тогда 
			НоваяСтрока = Автотрекер_ТаблТС.Добавить();
			НоваяСтрока.ТС = ВыбранноеЗначение;
			Элементы.Автотрекер_ТаблТС.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			Модифицированность = Истина;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Вы уже выбрали данное ТС");
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Строка") И Не Найти(ВыбранноеЗначение, "e1cib/tempstorage") = 0 Тогда 
		ЗаполнитьТаблицуТСАвтотрекерСервер(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборOmnicomm(Команда)
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе", Ложь);
	ОткрытьФорму("Справочник.ТранспортныеСредства.ФормаВыбора", ПараметрыФормы, Элементы.ТаблТС);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьOmnicomm(Команда)
	Если таблТС.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьOmnicommЗавершение", ЭтотОбъект), "Вы хотите очистить таблицу перед заполнением?", РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.уатФормаПодбораТС",, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПодборСКАУТ(Команда)
	
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе", Ложь);
	ОткрытьФорму("Справочник.ТранспортныеСредства.ФормаВыбора", ПараметрыФормы, Элементы.СКАУТ_ТаблТС);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСКАУТ(Команда)
	
	Если СКАУТ_ТаблТС.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьСКАУТЗавершение", ЭтотОбъект), "Вы хотите очистить таблицу перед заполнением?", РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.уатФормаПодбораТС",, Элементы.СКАУТ_ТаблТС);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоГРАФ(Команда)
	
	Если АвтоГРАФ_ТаблТС.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьАвтоГРАФЗавершение", ЭтотОбъект), "Вы хотите очистить таблицу перед заполнением?", РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.уатФормаПодбораТС",, Элементы.АвтоГРАФ_ТаблТС);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборАвтоГРАФ(Команда)
	
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе", Ложь);
	ОткрытьФорму("Справочник.ТранспортныеСредства.ФормаВыбора", ПараметрыФормы, Элементы.АвтоГРАФ_ТаблТС);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборWialon(Команда)
	
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе", Ложь);
	ОткрытьФорму("Справочник.ТранспортныеСредства.ФормаВыбора", ПараметрыФормы, Элементы.Wialon_ТаблТС);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьWialon(Команда)
	
	Если Wialon_ТаблТС.Количество() > 0 Тогда
		Оповешение = Новый ОписаниеОповещения("ЗаполнитьWialonПродолжение", ЭтотОбъект);
		ПоказатьВопрос(Оповешение, "Вы хотите очистить таблицу перед заполнением?", РежимДиалогаВопрос.ДаНет);
	Иначе 
		ЗаполнитьWialonЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТокенWialon(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьТокенWialonЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.уатФормаАвторизацииWialon",, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтотрекер(Команда)
	
	Если Автотрекер_ТаблТС.Количество() > 0 Тогда
		Оповешение = Новый ОписаниеОповещения("ЗаполнитьАвтотрекерПродолжение", ЭтотОбъект);
		ПоказатьВопрос(Оповешение, "Вы хотите очистить таблицу перед заполнением?", РежимДиалогаВопрос.ДаНет);
	Иначе 
		ЗаполнитьАвтотрекерЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборАвтотрекер(Команда)
	
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе", Ложь);
	ОткрытьФорму("Справочник.ТранспортныеСредства.ФормаВыбора", ПараметрыФормы, Элементы.Автотрекер_ТаблТС);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеWialon(Команда)
	
	ОшибкаЗаполнения = Ложь;
	
	Если Не ЗначениеЗаполнено(НаборКонстант.уатТокенВСистемеWialon) Тогда 
		ТекстОшибки = "Для проверки подключения необходимо указать токен авторизации";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НаборКонстант.уатТокенВСистемеWialon",, ОшибкаЗаполнения);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НаборКонстант.уатАдресСервисаWialon) Тогда 
		ТекстОшибки = "Для проверки подключения необходимо указать адрес сервиса ""Wialon hosting""";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НаборКонстант.уатАдресСервисаWialon",, ОшибкаЗаполнения);
	КонецЕсли;
	
	Если ОшибкаЗаполнения Тогда 
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда 
		ТекстОшибки = "Для проверки подключения необходимо сохранить изменения";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьПодключениеWialonНаСервере() Тогда 
		ТекстОшибки = "По указанному адресу <"+НаборКонстант.уатАдресСервисаWialon+"> отсутствует возможность подключения к функциям API WIALON";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НаборКонстант.уатАдресСервисаWialon");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Wialon_Ресурс) Тогда 
		ОбновитьСписокВыбораРесурсаWialon();
		Если Элементы.Wialon_Ресурс.СписокВыбора.Количество() Тогда 
			Wialon_Ресурс = Элементы.Wialon_Ресурс.СписокВыбора[0].Значение;
		КонецЕсли;
	КонецЕсли;
	
	ПоказатьПредупреждение(, "Проверка подключения успешно завершена");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьВидимостьИНастройкиРеквизитовGPS()
	
	Элементы.ПанельДинафлит.Видимость   = НаборКонстант.уатИспользоватьDynafleet;
	Элементы.ПанельОмником.Видимость    = НаборКонстант.уатИспользоватьOmnicomm;
	Элементы.ПанельРепорт.Видимость     = НаборКонстант.уатИспользоватьPositionReport;
	Элементы.ПанельАвтотрекер.Видимость = НаборКонстант.уатИспользоватьАвтотрекер;
	Элементы.ПанельСКАУТ.Видимость      = НаборКонстант.уатИспользоватьСКАУТ;
	Элементы.ПанельWialon.Видимость     = НаборКонстант.уатИспользоватьWialon;
	Элементы.ПанельАвтоГРАФ.Видимость   = НаборКонстант.уатИспользоватьАвтоГРАФ;
	
	Если НаборКонстант.уатСпособРаботыСOmnicomm = ПредопределенноеЗначение("Перечисление.уатСпособРаботыСOmnicomm.БД") Тогда
		Элементы.уатАдресСервисаOmnicomm.Видимость              = Ложь;
		Элементы.уатСпособПодключенияКСистемеOmnicomm.Видимость = Истина;
		
		Если НаборКонстант.уатСпособПодключенияКСистемеOmnicomm = ПредопределенноеЗначение("Перечисление.уатСпособПодключенияКOmnicomm.СтандартноеПодключение") Тогда
			Элементы.уатЛогинВСистемеOmnicomm.Видимость   = Истина;
			Элементы.уатПарольВСистемеOmnicomm.Видимость  = Истина;
			Элементы.уатСерверВСистемеOmnicomm.Видимость  = Истина;
			Элементы.уатИмяБДВСистемеOmnicomm.Видимость   = Истина;
			Элементы.уатДрайверВСистемеOmnicomm.Видимость = Истина;
			Элементы.уатИмяPIPEСистемеOmnicomm.Видимость  = Ложь;
			Элементы.уатИмяDSNСистемеOmnicomm.Видимость   = Ложь;
			
		ИначеЕсли НаборКонстант.уатСпособПодключенияКСистемеOmnicomm = ПредопределенноеЗначение("Перечисление.уатСпособПодключенияКOmnicomm.PIPEПодключение") Тогда
			Элементы.уатЛогинВСистемеOmnicomm.Видимость   = Истина;
			Элементы.уатПарольВСистемеOmnicomm.Видимость  = Истина;
			Элементы.уатСерверВСистемеOmnicomm.Видимость  = Истина;
			Элементы.уатИмяБДВСистемеOmnicomm.Видимость   = Истина;
			Элементы.уатДрайверВСистемеOmnicomm.Видимость = Истина;
			Элементы.уатИмяPIPEСистемеOmnicomm.Видимость  = Истина;
			Элементы.уатИмяDSNСистемеOmnicomm.Видимость   = Ложь;
			
		ИначеЕсли НаборКонстант.уатСпособПодключенияКСистемеOmnicomm = ПредопределенноеЗначение("Перечисление.уатСпособПодключенияКOmnicomm.DSNПодключение") Тогда
			Элементы.уатЛогинВСистемеOmnicomm.Видимость   = Ложь;
			Элементы.уатПарольВСистемеOmnicomm.Видимость  = Ложь;
			Элементы.уатСерверВСистемеOmnicomm.Видимость  = Ложь;
			Элементы.уатИмяБДВСистемеOmnicomm.Видимость   = Ложь;
			Элементы.уатДрайверВСистемеOmnicomm.Видимость = Ложь;
			Элементы.уатИмяPIPEСистемеOmnicomm.Видимость  = Ложь;
			Элементы.уатИмяDSNСистемеOmnicomm.Видимость   = Истина;
			
		Иначе
			Элементы.уатЛогинВСистемеOmnicomm.Видимость   = Ложь;
			Элементы.уатПарольВСистемеOmnicomm.Видимость  = Ложь;
			Элементы.уатСерверВСистемеOmnicomm.Видимость  = Ложь;
			Элементы.уатИмяБДВСистемеOmnicomm.Видимость   = Ложь;
			Элементы.уатДрайверВСистемеOmnicomm.Видимость = Ложь;
			Элементы.уатИмяPIPEСистемеOmnicomm.Видимость  = Ложь;
			Элементы.уатИмяDSNСистемеOmnicomm.Видимость   = Ложь;
		КонецЕсли;
		
	ИначеЕсли НаборКонстант.уатСпособРаботыСOmnicomm = ПредопределенноеЗначение("Перечисление.уатСпособРаботыСOmnicomm.ВебСервис") Тогда
		Элементы.уатЛогинВСистемеOmnicomm.Видимость             = Истина;
		Элементы.уатПарольВСистемеOmnicomm.Видимость            = Истина;
		Элементы.уатАдресСервисаOmnicomm.Видимость              = Истина;
		Элементы.уатСпособПодключенияКСистемеOmnicomm.Видимость = Ложь;
		Элементы.уатСерверВСистемеOmnicomm.Видимость            = Ложь;
		Элементы.уатИмяБДВСистемеOmnicomm.Видимость             = Ложь;
		Элементы.уатДрайверВСистемеOmnicomm.Видимость           = Ложь;
		Элементы.уатИмяPIPEСистемеOmnicomm.Видимость            = Ложь;
		Элементы.уатИмяDSNСистемеOmnicomm.Видимость             = Ложь;
		
	Иначе
		Элементы.уатЛогинВСистемеOmnicomm.Видимость             = Ложь;
		Элементы.уатПарольВСистемеOmnicomm.Видимость            = Ложь;
		Элементы.уатАдресСервисаOmnicomm.Видимость              = Ложь;
		Элементы.уатСпособПодключенияКСистемеOmnicomm.Видимость = Ложь;
		Элементы.уатСерверВСистемеOmnicomm.Видимость            = Ложь;
		Элементы.уатИмяБДВСистемеOmnicomm.Видимость             = Ложь;
		Элементы.уатДрайверВСистемеOmnicomm.Видимость           = Ложь;
		Элементы.уатИмяPIPEСистемеOmnicomm.Видимость            = Ложь;
		Элементы.уатИмяDSNСистемеOmnicomm.Видимость             = Ложь;
	КонецЕсли;
	
	Элементы.ИмяФайлаЗагрузкиDynafleetЗаголовок.Видимость = ЗагружатьИзФайла;
	Элементы.ИмяФайлаЗагрузкиDynafleet.Видимость          = ЗагружатьИзФайла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПараметрыРеглЗаданий()
	
	СтруктураПараметров = Константы.уатПараметрыРеглЗаданияЗагрузкаДанныхDynafleet.Получить().Получить();
	Если СтруктураПараметров = Неопределено Тогда
		СтруктураПараметров = Новый Структура;
	КонецЕсли;
	Если (НЕ СтруктураПараметров.Свойство("РежимЗагрузки")) Тогда
		СтруктураПараметров.Вставить("РежимЗагрузки", 0);
	КонецЕсли;
	Если (НЕ СтруктураПараметров.Свойство("ФайлЗагрузки")) Тогда
		СтруктураПараметров.Вставить("ФайлЗагрузки", "");
	КонецЕсли;
	ЗагружатьИзФайла = СтруктураПараметров.РежимЗагрузки;
	ИмяФайлаЗагрузкиDynafleet = СтруктураПараметров.ФайлЗагрузки;
	
	СтруктураПараметров = Константы.уатПараметрыРеглЗаданияЗагрузкаДанныхOmnicomm.Получить().Получить();
	Если СтруктураПараметров = Неопределено Тогда
		СтруктураПараметров = Новый Структура;
	КонецЕсли;
	Если (НЕ СтруктураПараметров.Свойство("ЗагрузитьПробегИРасходГСМ")) Тогда
		СтруктураПараметров.Вставить("ЗагрузитьПробегИРасходГСМ", Ложь);
	КонецЕсли;
	Если (НЕ СтруктураПараметров.Свойство("ЗагрузитьДополнительныеСведения")) Тогда
		СтруктураПараметров.Вставить("ЗагрузитьДополнительныеСведения", Ложь);
	КонецЕсли;
	Если (НЕ СтруктураПараметров.Свойство("ИнтервалЗагрузки")) Тогда
		СтруктураПараметров.Вставить("ИнтервалЗагрузки", "Сутки");
	КонецЕсли;
	Если (НЕ СтруктураПараметров.Свойство("СписокТС")) Тогда
		СтруктураПараметров.Вставить("СписокТС", Новый Массив);
	КонецЕсли;
	Если (НЕ СтруктураПараметров.Свойство("ПериодичностьХранения")) Тогда
		СтруктураПараметров.Вставить("ПериодичностьХранения", 15);
	КонецЕсли;
	ЗагрузитьПробегИРасходГСМ = СтруктураПараметров.ЗагрузитьПробегИРасходГСМ;
	ЗагрузитьДополнительныеСведения = СтруктураПараметров.ЗагрузитьДополнительныеСведения;
	ИнтервалЗагрузки = СтруктураПараметров.ИнтервалЗагрузки;
	ТаблТС.Очистить();
	Для Каждого ТекТС Из СтруктураПараметров.СписокТС Цикл
		НоваяСтрока = ТаблТС.Добавить();
		НоваяСтрока.ТС = ТекТС;
	КонецЦикла;
	Omnicomm_ПериодичностьХранения = СтруктураПараметров.ПериодичностьХранения;
	
	ПараметрыСКАУТ = Константы.уатПараметрыРеглЗаданияЗагрузкаДанныхСКАУТ.Получить().Получить();
	Если ПараметрыСКАУТ = Неопределено Тогда 
		ПараметрыСКАУТ = Новый Структура;
	КонецЕсли;
	Если Не ПараметрыСКАУТ.Свойство("ЗагрузитьПробегРасход") Тогда 
		ПараметрыСКАУТ.Вставить("ЗагрузитьПробегРасход", Ложь);
	КонецЕсли;
	Если Не ПараметрыСКАУТ.Свойство("ЗагрузитьДопСведения") Тогда 
		ПараметрыСКАУТ.Вставить("ЗагрузитьДопСведения", Ложь);
	КонецЕсли;
	Если Не ПараметрыСКАУТ.Свойство("ИнтервалЗагрузки") Тогда 
		ПараметрыСКАУТ.Вставить("ИнтервалЗагрузки", "Сутки");
	КонецЕсли;
	Если Не ПараметрыСКАУТ.Свойство("МассивТС") Тогда 
		ПараметрыСКАУТ.Вставить("МассивТС", Новый Массив);
	КонецЕсли;
	СКАУТ_ЗагрузитьПробегРасход = ПараметрыСКАУТ.ЗагрузитьПробегРасход;
	СКАУТ_ЗагрузитьДопСведения  = ПараметрыСКАУТ.ЗагрузитьДопСведения;
	СКАУТ_ИнтервалЗагрузки      = ПараметрыСКАУТ.ИнтервалЗагрузки;
	СКАУТ_ТаблТС.Очистить();
	Для Каждого ТекТС Из ПараметрыСКАУТ.МассивТС Цикл 
		НовСтр = СКАУТ_ТаблТС.Добавить();
		НовСтр.ТС = ТекТС;
	КонецЦикла;
	
	ПараметрыWialon = Константы.уатПараметрыРеглЗаданияЗагрузкаДанныхWialon.Получить().Получить();
	Если ПараметрыWialon = Неопределено Тогда 
		ПараметрыWialon = Новый Структура;
	КонецЕсли;
	Если Не ПараметрыWialon.Свойство("ЗагрузитьПробегРасход") Тогда 
		ПараметрыWialon.Вставить("ЗагрузитьПробегРасход", Ложь);
	КонецЕсли;
	Если Не ПараметрыWialon.Свойство("ЗагрузитьДопСведения") Тогда 
		ПараметрыWialon.Вставить("ЗагрузитьДопСведения", Ложь);
	КонецЕсли;
	Если Не ПараметрыWialon.Свойство("ИнтервалЗагрузки") Тогда 
		ПараметрыWialon.Вставить("ИнтервалЗагрузки", "Сутки");
	КонецЕсли;
	Если Не ПараметрыWialon.Свойство("МассивТС") Тогда 
		ПараметрыWialon.Вставить("МассивТС", Новый Массив);
	КонецЕсли;
	Если Не ПараметрыWialon.Свойство("ПериодичностьХранения") Тогда
		ПараметрыWialon.Вставить("ПериодичностьХранения", 15);
	КонецЕсли;
	Если Не ПараметрыWialon.Свойство("Ресурс") Тогда
		ПараметрыWialon.Вставить("Ресурс", "");
	КонецЕсли;
	Wialon_ЗагрузитьПробегРасход = ПараметрыWialon.ЗагрузитьПробегРасход;
	Wialon_ЗагрузитьДопСведения  = ПараметрыWialon.ЗагрузитьДопСведения;
	Wialon_ИнтервалЗагрузки      = ПараметрыWialon.ИнтервалЗагрузки;
	Wialon_Ресурс                = ПараметрыWialon.Ресурс;
	Wialon_ТаблТС.Очистить();
	Для Каждого ТекТС Из ПараметрыWialon.МассивТС Цикл 
		НовСтр = Wialon_ТаблТС.Добавить();
		НовСтр.ТС = ТекТС;
	КонецЦикла;
	Wialon_ПериодичностьХранения = ПараметрыWialon.ПериодичностьХранения;
	ОбновитьСписокВыбораРесурсаWialon();
	
	ПараметрыАвтотрекер = Константы.уатПараметрыРеглЗаданияЗагрузкаДанныхАвтотрекер.Получить().Получить();
	Если ПараметрыАвтотрекер = Неопределено Тогда 
		ПараметрыАвтотрекер = Новый Структура;
	КонецЕсли;
	Если Не ПараметрыАвтотрекер.Свойство("ЗагрузитьПробегРасход") Тогда 
		ПараметрыАвтотрекер.Вставить("ЗагрузитьПробегРасход", Ложь);
	КонецЕсли;
	Если Не ПараметрыАвтотрекер.Свойство("ЗагрузитьДопСведения") Тогда 
		ПараметрыАвтотрекер.Вставить("ЗагрузитьДопСведения", Ложь);
	КонецЕсли;
	Если Не ПараметрыАвтотрекер.Свойство("ИнтервалЗагрузки") Тогда 
		ПараметрыАвтотрекер.Вставить("ИнтервалЗагрузки", "Сутки");
	КонецЕсли;
	Если Не ПараметрыАвтотрекер.Свойство("МассивТС") Тогда 
		ПараметрыАвтотрекер.Вставить("МассивТС", Новый Массив);
	КонецЕсли;
	Если (НЕ ПараметрыАвтотрекер.Свойство("ПериодичностьХранения")) Тогда
		ПараметрыАвтотрекер.Вставить("ПериодичностьХранения", 15);
	КонецЕсли;
	Автотрекер_ЗагрузитьПробегРасход = ПараметрыАвтотрекер.ЗагрузитьПробегРасход;
	Автотрекер_ЗагрузитьДопСведения  = ПараметрыАвтотрекер.ЗагрузитьДопСведения;
	Автотрекер_ИнтервалЗагрузки      = ПараметрыАвтотрекер.ИнтервалЗагрузки;
	Автотрекер_ТаблТС.Очистить();
	Для Каждого ТекТС Из ПараметрыАвтотрекер.МассивТС Цикл 
		НовСтр = Автотрекер_ТаблТС.Добавить();
		НовСтр.ТС = ТекТС;
	КонецЦикла;
	Автотрекер_ПериодичностьХранения = ПараметрыАвтотрекер.ПериодичностьХранения;
	
	ПараметрыАвтоГРАФ = Константы.уатПараметрыРеглЗаданияЗагрузкаДанныхАвтоГРАФ.Получить().Получить();
	Если ПараметрыАвтоГРАФ = Неопределено Тогда 
		ПараметрыАвтоГРАФ = Новый Структура;
	КонецЕсли;
	Если Не ПараметрыАвтоГРАФ.Свойство("ЗагрузитьПробегРасход") Тогда 
		ПараметрыАвтоГРАФ.Вставить("ЗагрузитьПробегРасход", Ложь);
	КонецЕсли;
	Если Не ПараметрыАвтоГРАФ.Свойство("ЗагрузитьДопСведения") Тогда 
		ПараметрыАвтоГРАФ.Вставить("ЗагрузитьДопСведения", Ложь);
	КонецЕсли;
	Если Не ПараметрыАвтоГРАФ.Свойство("ИнтервалЗагрузки") Тогда 
		ПараметрыАвтоГРАФ.Вставить("ИнтервалЗагрузки", "Сутки");
	КонецЕсли;
	Если Не ПараметрыАвтоГРАФ.Свойство("МассивТС") Тогда 
		ПараметрыАвтоГРАФ.Вставить("МассивТС", Новый Массив);
	КонецЕсли;
	Если (НЕ ПараметрыАвтоГРАФ.Свойство("ПериодичностьХранения")) Тогда
		ПараметрыАвтоГРАФ.Вставить("ПериодичностьХранения", 15);
	КонецЕсли;
	АвтоГРАФ_ЗагрузитьПробегРасход = ПараметрыАвтоГРАФ.ЗагрузитьПробегРасход;
	АвтоГРАФ_ЗагрузитьДопСведения  = ПараметрыАвтоГРАФ.ЗагрузитьДопСведения;
	АвтоГРАФ_ИнтервалЗагрузки      = ПараметрыАвтоГРАФ.ИнтервалЗагрузки;
	АвтоГРАФ_ТаблТС.Очистить();
	Для Каждого ТекТС Из ПараметрыАвтоГРАФ.МассивТС Цикл 
		НовСтр = АвтоГРАФ_ТаблТС.Добавить();
		НовСтр.ТС = ТекТС;
	КонецЦикла;
	АвтоГРАФ_ПериодичностьХранения = ПараметрыАвтоГРАФ.ПериодичностьХранения;
	
	ПараметрыPositionReport = Константы.уатПараметрыРеглЗаданияЗагрузкаДанныхPositionReport.Получить().Получить();
	Если ПараметрыPositionReport = Неопределено Тогда 
		ПараметрыPositionReport = Новый Структура;
	КонецЕсли;
	Если (НЕ ПараметрыPositionReport.Свойство("ПериодичностьХранения")) Тогда
		ПараметрыPositionReport.Вставить("ПериодичностьХранения", 15);
	КонецЕсли;
	PositionReport_ПериодичностьХранения = ПараметрыPositionReport.ПериодичностьХранения;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПараметрыРеглЗаданий()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("РежимЗагрузки", ЗагружатьИзФайла);
	СтруктураПараметров.Вставить("ФайлЗагрузки",  ИмяФайлаЗагрузкиDynafleet);
	ХранилищеНастроек = Новый ХранилищеЗначения(СтруктураПараметров);
	Константы.уатПараметрыРеглЗаданияЗагрузкаДанныхDynafleet.Установить(ХранилищеНастроек);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗагрузитьПробегИРасходГСМ",       ЗагрузитьПробегИРасходГСМ);
	СтруктураПараметров.Вставить("ЗагрузитьДополнительныеСведения", ЗагрузитьДополнительныеСведения);
	СтруктураПараметров.Вставить("ИнтервалЗагрузки",                ИнтервалЗагрузки);
	СтруктураПараметров.Вставить("ПериодичностьХранения",           Omnicomm_ПериодичностьХранения);
	мсвТС = Новый Массив;
	Для Каждого ТекСтрока Из ТаблТС Цикл
		мсвТС.Добавить(ТекСтрока.ТС);
	КонецЦикла;
	СтруктураПараметров.Вставить("СписокТС", мсвТС);
	ХранилищеНастроек = Новый ХранилищеЗначения(СтруктураПараметров);
	Константы.уатПараметрыРеглЗаданияЗагрузкаДанныхOmnicomm.Установить(ХранилищеНастроек);
	
	ПараметрыСКАУТ = Новый Структура;
	ПараметрыСКАУТ.Вставить("ЗагрузитьПробегРасход", СКАУТ_ЗагрузитьПробегРасход);
	ПараметрыСКАУТ.Вставить("ЗагрузитьДопСведения",  СКАУТ_ЗагрузитьДопСведения);
	ПараметрыСКАУТ.Вставить("ИнтервалЗагрузки",      СКАУТ_ИнтервалЗагрузки);
	ТССКАУТ = Новый Массив;
	Для Каждого ТекСтр Из СКАУТ_ТаблТС Цикл 
		ТССКАУТ.Добавить(ТекСтр.ТС);
	КонецЦикла;
	ПараметрыСКАУТ.Вставить("МассивТС", ТССКАУТ);
	Константы.уатПараметрыРеглЗаданияЗагрузкаДанныхСКАУТ.Установить(Новый ХранилищеЗначения(ПараметрыСКАУТ, Новый СжатиеДанных(9)));
	
	Если Не НаборКонстант.уатИспользоватьWialon Или Не ЗначениеЗаполнено(НаборКонстант.уатТокенВСистемеWialon) Тогда 
		Wialon_Ресурс = "";
	КонецЕсли;
	ПараметрыWialon = Новый Структура;
	ПараметрыWialon.Вставить("ЗагрузитьПробегРасход", Wialon_ЗагрузитьПробегРасход);
	ПараметрыWialon.Вставить("ЗагрузитьДопСведения",  Wialon_ЗагрузитьДопСведения);
	ПараметрыWialon.Вставить("ИнтервалЗагрузки",      Wialon_ИнтервалЗагрузки);
	ПараметрыWialon.Вставить("ПериодичностьХранения", Wialon_ПериодичностьХранения);
	ПараметрыWialon.Вставить("Ресурс",                Wialon_Ресурс);
	ТСWialon = Новый Массив;
	Для Каждого ТекСтр Из Wialon_ТаблТС Цикл 
		ТСWialon.Добавить(ТекСтр.ТС);
	КонецЦикла;
	ПараметрыWialon.Вставить("МассивТС", ТСWialon);
	Константы.уатПараметрыРеглЗаданияЗагрузкаДанныхWialon.Установить(Новый ХранилищеЗначения(ПараметрыWialon, Новый СжатиеДанных(9)));
	
	ПараметрыАвтотрекер = Новый Структура;
	ПараметрыАвтотрекер.Вставить("ЗагрузитьПробегРасход", Автотрекер_ЗагрузитьПробегРасход);
	ПараметрыАвтотрекер.Вставить("ЗагрузитьДопСведения",  Автотрекер_ЗагрузитьДопСведения);
	ПараметрыАвтотрекер.Вставить("ИнтервалЗагрузки",      Автотрекер_ИнтервалЗагрузки);
	ПараметрыАвтотрекер.Вставить("ПериодичностьХранения", Автотрекер_ПериодичностьХранения);
	ТСАвтотрекер = Новый Массив;
	Для Каждого ТекСтр Из Автотрекер_ТаблТС Цикл 
		ТСАвтотрекер.Добавить(ТекСтр.ТС);
	КонецЦикла;
	ПараметрыАвтотрекер.Вставить("МассивТС", ТСАвтотрекер);
	Константы.уатПараметрыРеглЗаданияЗагрузкаДанныхАвтотрекер.Установить(Новый ХранилищеЗначения(ПараметрыАвтотрекер, Новый СжатиеДанных(9)));
	
	ПараметрыАвтоГРАФ = Новый Структура;
	ПараметрыАвтоГРАФ.Вставить("ЗагрузитьПробегРасход", АвтоГРАФ_ЗагрузитьПробегРасход);
	ПараметрыАвтоГРАФ.Вставить("ЗагрузитьДопСведения",  АвтоГРАФ_ЗагрузитьДопСведения);
	ПараметрыАвтоГРАФ.Вставить("ИнтервалЗагрузки",      АвтоГРАФ_ИнтервалЗагрузки);
	ПараметрыАвтоГРАФ.Вставить("ПериодичностьХранения", АвтоГРАФ_ПериодичностьХранения);
	ТСАвтоГРАФ = Новый Массив;
	Для Каждого ТекСтр Из АвтоГРАФ_ТаблТС Цикл 
		ТСАвтоГРАФ.Добавить(ТекСтр.ТС);
	КонецЦикла;
	ПараметрыАвтоГРАФ.Вставить("МассивТС", ТСАвтоГРАФ);
	Константы.уатПараметрыРеглЗаданияЗагрузкаДанныхАвтоГРАФ.Установить(Новый ХранилищеЗначения(ПараметрыАвтоГРАФ, Новый СжатиеДанных(9)));
	
	ПараметрыPositionReport = Новый Структура;
	ПараметрыPositionReport.Вставить("ПериодичностьХранения", PositionReport_ПериодичностьХранения);
	Константы.уатПараметрыРеглЗаданияЗагрузкаДанныхPositionReport.Установить(Новый ХранилищеЗначения(ПараметрыPositionReport, Новый СжатиеДанных(9)));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьOmnicommЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		таблТС.Очистить();
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.уатФормаПодбораТС",, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗагрузкиDynafleetНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ИмяФайлаЗагрузкиDynafleet = ВыбранныеФайлы[0];
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТССервер(АдресВременногоХранилища)
	
	СтруктураВозврата = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	УдалитьИзВременногоХранилища(АдресВременногоХранилища);
	
	ТаблТСПустая = (таблТС.Количество() = 0);
	Для Каждого СтрокаТС Из СтруктураВозврата.ТаблицаТС Цикл
		Если ТаблТСПустая Тогда
			НоваяСтрока = ТаблТС.Добавить();
			НоваяСтрока.ТС = СтрокаТС.Ссылка;
		Иначе
			СтрокаПоиска = ТаблТС.Найти(СтрокаТС.Ссылка, "ТС");
			Если СтрокаПоиска = Неопределено Тогда
				НоваяСтрока = ТаблТС.Добавить();
				НоваяСтрока.ТС = СтрокаТС.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуТССкаутСервер(АдресХранилища)
	
	СтруктураВозврата = ПолучитьИзВременногоХранилища(АдресХранилища);
	УдалитьИзВременногоХранилища(АдресХранилища);
	
	ТаблТСПустая = (СКАУТ_ТаблТС.Количество() = 0);
	Для Каждого СтрокаТС Из СтруктураВозврата.ТаблицаТС Цикл
		Если ТаблТСПустая Тогда
			НоваяСтрока = СКАУТ_ТаблТС.Добавить();
			НоваяСтрока.ТС = СтрокаТС.Ссылка;
		Иначе
			НайдСтроки = СКАУТ_ТаблТС.НайтиСтроки(Новый Структура("ТС", СтрокаТС.Ссылка));
			Если НайдСтроки.Количество() = 0 Тогда
				НоваяСтрока = СКАУТ_ТаблТС.Добавить();
				НоваяСтрока.ТС = СтрокаТС.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоГРАФЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		АвтоГРАФ_ТаблТС.Очистить();
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.уатФормаПодбораТС",, Элементы.АвтоГРАФ_ТаблТС);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуТСWialonСервер(АдресХранилища)
	
	СтруктураВозврата = ПолучитьИзВременногоХранилища(АдресХранилища);
	УдалитьИзВременногоХранилища(АдресХранилища);
	
	ТаблТСПустая = (Wialon_ТаблТС.Количество() = 0);
	Для Каждого СтрокаТС Из СтруктураВозврата.ТаблицаТС Цикл
		Если ТаблТСПустая Тогда
			НоваяСтрока = Wialon_ТаблТС.Добавить();
			НоваяСтрока.ТС = СтрокаТС.Ссылка;
		Иначе
			НайдСтроки = Wialon_ТаблТС.НайтиСтроки(Новый Структура("ТС", СтрокаТС.Ссылка));
			Если НайдСтроки.Количество() = 0 Тогда
				НоваяСтрока = Wialon_ТаблТС.Добавить();
				НоваяСтрока.ТС = СтрокаТС.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСКАУТЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СКАУТ_ТаблТС.Очистить();
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.уатФормаПодбораТС",, Элементы.СКАУТ_ТаблТС);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоГРАФ_ТаблТСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ТранспортныеСредства") Тогда 
		мсвСтрокаПоиска = АвтоГРАФ_ТаблТС.НайтиСтроки(Новый Структура("ТС", ВыбранноеЗначение));
		Если мсвСтрокаПоиска.Количество() = 0 Тогда 
			НоваяСтрока = АвтоГРАФ_ТаблТС.Добавить();
			НоваяСтрока.ТС = ВыбранноеЗначение;
			Элементы.АвтоГРАФ_ТаблТС.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			Модифицированность = Истина;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Вы уже выбрали данное ТС");
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Строка") И Не Найти(ВыбранноеЗначение, "e1cib/tempstorage") = 0 Тогда 
		ЗаполнитьТаблицуТСАвтоГРАФСервер(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуТСАвтоГРАФСервер(АдресХранилища)
	
	СтруктураВозврата = ПолучитьИзВременногоХранилища(АдресХранилища);
	УдалитьИзВременногоХранилища(АдресХранилища);
	
	ТаблТСПустая = (АвтоГРАФ_ТаблТС.Количество() = 0);
	Для Каждого СтрокаТС Из СтруктураВозврата.ТаблицаТС Цикл
		Если ТаблТСПустая Тогда
			НоваяСтрока = АвтоГРАФ_ТаблТС.Добавить();
			НоваяСтрока.ТС = СтрокаТС.Ссылка;
		Иначе
			НайдСтроки = АвтоГРАФ_ТаблТС.НайтиСтроки(Новый Структура("ТС", СтрокаТС.Ссылка));
			Если НайдСтроки.Количество() = 0 Тогда
				НоваяСтрока = АвтоГРАФ_ТаблТС.Добавить();
				НоваяСтрока.ТС = СтрокаТС.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьWialonПродолжение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Wialon_ТаблТС.Очистить();
		ЗаполнитьWialonЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьWialonЗавершение()
	
	ОткрытьФорму("ОбщаяФорма.уатФормаПодбораТС",, Элементы.Wialon_ТаблТС);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТокенWialonЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	НаборКонстант.уатТокенВСистемеWialon = Результат;
	Wialon_Ресурс = "";
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуТСАвтотрекерСервер(АдресХранилища)
	
	СтруктураВозврата = ПолучитьИзВременногоХранилища(АдресХранилища);
	УдалитьИзВременногоХранилища(АдресХранилища);
	
	ТаблТСПустая = (Автотрекер_ТаблТС.Количество() = 0);
	Для Каждого СтрокаТС Из СтруктураВозврата.ТаблицаТС Цикл
		Если ТаблТСПустая Тогда
			НоваяСтрока = Автотрекер_ТаблТС.Добавить();
			НоваяСтрока.ТС = СтрокаТС.Ссылка;
		Иначе
			НайдСтроки = Автотрекер_ТаблТС.НайтиСтроки(Новый Структура("ТС", СтрокаТС.Ссылка));
			Если НайдСтроки.Количество() = 0 Тогда
				НоваяСтрока = Автотрекер_ТаблТС.Добавить();
				НоваяСтрока.ТС = СтрокаТС.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтотрекерПродолжение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Автотрекер_ТаблТС.Очистить();
		ЗаполнитьАвтотрекерЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтотрекерЗавершение()
	
	ОткрытьФорму("ОбщаяФорма.уатФормаПодбораТС",, Элементы.Автотрекер_ТаблТС);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьПодключениеWialonНаСервере()
	
	ТабДанных   = Неопределено;
	ТекстОшибки = "";
	
	флОшибка = уатЗащищенныеФункцииСервер_проф.Wialon_ПолучитьДанныеВсехТС(ТабДанных, ТекстОшибки);
	
	Если Не флОшибка И ТекстОшибки="" Тогда 
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьСписокВыбораВариантовПериодичностиРегламентногоЗадания(ЭлементСписок)
	
	ЭлементСписок.СписокВыбора.Очистить();
	
	ЭлементСписок.СписокВыбора.Добавить("Год",       "12 месяцев");
	ЭлементСписок.СписокВыбора.Добавить("Полугодие", "6 месяцев");
	ЭлементСписок.СписокВыбора.Добавить("Квартал",   "3 месяца");
	ЭлементСписок.СписокВыбора.Добавить("Месяц",     "1 месяц");
	ЭлементСписок.СписокВыбора.Добавить("Неделя",    "7 дней");
	ЭлементСписок.СписокВыбора.Добавить("Сутки",     "24 часа");
	ЭлементСписок.СписокВыбора.Добавить("12часов",   "12 часов");
	ЭлементСписок.СписокВыбора.Добавить("Час",       "1 час");
	ЭлементСписок.СписокВыбора.Добавить("Полчаса",   "30 минут");
	ЭлементСписок.СписокВыбора.Добавить("15минут",   "15 минут");
	ЭлементСписок.СписокВыбора.Добавить("10минут",   "10 минут");
	ЭлементСписок.СписокВыбора.Добавить("5минут",    "5 минут");
	ЭлементСписок.СписокВыбора.Добавить("Минута",    "1 минуту");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСписокВыбораВариантовПериодичностиХраненияДанных(ЭлементСписок)
	
	ЭлементСписок.СписокВыбора.Очистить();
	
	ЭлементСписок.СписокВыбора.Добавить(1440, "24 часа");
	ЭлементСписок.СписокВыбора.Добавить(720,  "12 часов");
	ЭлементСписок.СписокВыбора.Добавить(60,   "1 час");
	ЭлементСписок.СписокВыбора.Добавить(30,   "30 минут");
	ЭлементСписок.СписокВыбора.Добавить(15,   "15 минут");
	ЭлементСписок.СписокВыбора.Добавить(10,   "10 минут");
	ЭлементСписок.СписокВыбора.Добавить(5,    "5 минут");
	ЭлементСписок.СписокВыбора.Добавить(1,    "1 минута");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокРесурсовWialon()
	
	ТекстОшибки = "";
	
	СписокРесурсов = Новый СписокЗначений();
	
	Если Не ЗначениеЗаполнено(НаборКонстант.уатТокенВСистемеWialon) Или Не ЗначениеЗаполнено(НаборКонстант.уатАдресСервисаWialon) Тогда 
		Возврат СписокРесурсов;
	КонецЕсли;
	
	АдресСервиса = НаборКонстант.уатАдресСервисаWialon;
	Токен        = НаборКонстант.уатТокенВСистемеWialon;
	
	Если Прав(АдресСервиса, 1) = "/" Тогда
		АдресСервиса = Лев(АдресСервиса, СтрДлина(АдресСервиса)-1);
	КонецЕсли;
	Если Не НРег(Лев(АдресСервиса, 7)) = "http://" Тогда 
		АдресСервиса = "http://" + АдресСервиса;
	КонецЕсли;
	
	Попытка
		XMLHTTP = Новый COMОбъект("Microsoft.XMLHTTP");
	Исключение
		Возврат СписокРесурсов;
	КонецПопытки;
	
	Попытка
		XMLHTTP.open("POST", АдресСервиса + "/wialon/ajax.html?svc=token/login&params={""token"": """+Токен+"""}", 0);
	Исключение
		Возврат СписокРесурсов;
	КонецПопытки;
	
	XMLHTTP.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
	
	Попытка
		XMLHTTP.send();
	Исключение
		Возврат СписокРесурсов;
	КонецПопытки;
	
	Если XMLHTTP.status = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(XMLHTTP.responseText);
		response = ПрочитатьJSON(ЧтениеJSON, Истина);
		ЧтениеJSON.Закрыть();
		
		Если уатЗащищенныеФункцииСервер_проф.Wialon_ЕстьОшибка(response, ТекстОшибки) Тогда 
			Возврат СписокРесурсов;
		КонецЕсли;
		
		sessionID = response.Получить("eid");
		
	Иначе 
		Возврат СписокРесурсов;
	КонецЕсли;
	
	Попытка
		XMLHTTP.open("POST", АдресСервиса + "/wialon/ajax.html?sid="+sessionID+"&svc=core/search_items&params={""spec"":{""itemsType"":""avl_resource"",""propName"":""sys_name"",""propValueMask"":"""",""sortType"":""sys_name"",""propType"":""property""},""force"":1,""flags"":1,""from"":0,""to"":0}", 0);
	Исключение
		Возврат СписокРесурсов;
	КонецПопытки;
	
	XMLHTTP.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
	
	Попытка
		XMLHTTP.send();
	Исключение
		Возврат СписокРесурсов;
	КонецПопытки;
	
	Если XMLHTTP.status = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(XMLHTTP.responseText);
		response = ПрочитатьJSON(ЧтениеJSON, Истина);
		ЧтениеJSON.Закрыть();
		
		Если уатЗащищенныеФункцииСервер_проф.Wialon_ЕстьОшибка(response, ТекстОшибки) Тогда 
			Возврат СписокРесурсов;
		КонецЕсли;
		
		Попытка
			Если response.Получить("items").Количество() Тогда
				Для Каждого ТекРесурс Из response.Получить("items") Цикл 
					СписокРесурсов.Добавить(Формат(ТекРесурс.Получить("id"), "ЧН=0; ЧГ=0"), ТекРесурс.Получить("nm"));
				КонецЦикла;
			КонецЕсли;
			
			Возврат СписокРесурсов;
			
		Исключение
			Возврат СписокРесурсов;
		КонецПопытки;
		
	Иначе 
		Возврат СписокРесурсов;
	КонецЕсли;
	
КонецФункции // ПолучитьСписокРесурсовWialon()

&НаСервере
Процедура ОбновитьСписокВыбораРесурсаWialon()
	
	СписокРесурсовWialon = ПолучитьСписокРесурсовWialon();
	
	Для Каждого ТекСтрока Из СписокРесурсовWialon Цикл 
		Если Элементы.Wialon_Ресурс.СписокВыбора.НайтиПоЗначению(ТекСтрока.Значение) = Неопределено Тогда 
			Элементы.Wialon_Ресурс.СписокВыбора.Добавить(ТекСтрока.Значение, ТекСтрока.Представление);
		КонецЕсли;
	КонецЦикла;
	
	мсвУдаляемыеЭлементы = Новый Массив();
	Для Каждого ТекСтрока Из Элементы.Wialon_Ресурс.СписокВыбора Цикл 
		Если СписокРесурсовWialon.НайтиПоЗначению(ТекСтрока.Значение) = Неопределено Тогда 
			мсвУдаляемыеЭлементы.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из мсвУдаляемыеЭлементы Цикл 
		Элементы.Wialon_Ресурс.СписокВыбора.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
