
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИмяТЧ = Параметры.ИмяТЧ;
	Если Параметры.ТолькоПросмотр Тогда
		Элементы.ФормаСохранитьНастройку.Доступность = Ложь;
	КонецЕсли;
	
	АлгоритмРасчетаКоличества = Параметры.АлгоритмРасчетаКоличества;
	АдресДополнительныхДанных = Параметры.АдресДополнительныхДанных;
	
	ВидИзделийИлиНоменклатура = Параметры.ВидИзделийИлиНоменклатура;
	Если ТипЗнч(ВидИзделийИлиНоменклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		ВидИзделий = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидИзделийИлиНоменклатура, "ВидНоменклатуры");
	Иначе
		ВидИзделий = ВидИзделийИлиНоменклатура;
	КонецЕсли;
	
	ИспользоватьДополнительныеРеквизитыИСведения = ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");
	Если ИспользоватьДополнительныеРеквизитыИСведения Тогда
		
		ЗаполнитьСписокОтборовПоСвойствам();
		
	КонецЕсли;
	
	УстановитьВидимостьДоступностьПоСоставуНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ЗаписатьИЗакрытьНаКлиенте", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборПоСвойствамСвойствоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтборПоСвойствам.ТекущиеДанные;
	
	СтрокиТаблицыСвойств = 
		ТаблицаДоступныхСвойствПродукции.НайтиСтроки(Новый Структура("Свойство", ТекущиеДанные.Свойство));
		
	Если НЕ ЗначениеЗаполнено(СтрокиТаблицыСвойств) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Условие  = "Равно";
	ТекущиеДанные.Значение = СтрокиТаблицыСвойств[0].ТипЗначения.ПривестиЗначение(Неопределено);
	
	УстановитьОграничениеТиповДляЗначенияСвойства(ТекущиеДанные, СтрокиТаблицыСвойств[0].ТипЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСвойствамУсловиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтборПоСвойствам.ТекущиеДанные;
	
	СтрокиТаблицыСвойств = 
		ТаблицаДоступныхСвойствПродукции.НайтиСтроки(Новый Структура("Свойство", ТекущиеДанные.Свойство));
		
	Если НЕ ЗначениеЗаполнено(СтрокиТаблицыСвойств) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(ТекущиеДанные.Условие, "ВСписке") Тогда
		
		ТекущиеДанные.Значение = Новый СписокЗначений;
		ТекущиеДанные.Значение.ТипЗначения = СтрокиТаблицыСвойств[0].ТипЗначения;
		
	Иначе
		
		Если СтрНайти(ТекущиеДанные.Условие, "ВИнтервале") ИЛИ СтрНайти(ТекущиеДанные.Условие, "Заполнено") Тогда
			ТекущиеДанные.Значение = Неопределено;
		КонецЕсли;
		
		ТекущиеДанные.Значение =
			СтрокиТаблицыСвойств[0].ТипЗначения.ПривестиЗначение(ТекущиеДанные.Значение);
		
	КонецЕсли;
	
	ТекущиеДанные.Значение1 = 0;
	ТекущиеДанные.Значение2 = 0;
	
	УстановитьОграничениеТиповДляЗначенияСвойства(ТекущиеДанные, СтрокиТаблицыСвойств[0].ТипЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСвойствамПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ОтборПоСвойствам.ТекущиеДанные;
	
	СтрокиТаблицыСвойств = 
		ТаблицаДоступныхСвойствПродукции.НайтиСтроки(Новый Структура("Свойство", ТекущиеДанные.Свойство));
		
	Если НЕ ЗначениеЗаполнено(СтрокиТаблицыСвойств) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьОграничениеТиповДляЗначенияСвойства(ТекущиеДанные, СтрокиТаблицыСвойств[0].ТипЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСвойствамУсловиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокВыбора = Элементы.ОтборПоСвойствамУсловие.СписокВыбора;
	СписокВыбора.Очистить();
	
	ТекущиеДанные = Элементы.ОтборПоСвойствам.ТекущиеДанные;
	
	СтрокиТаблицыСвойств = 
		ТаблицаДоступныхСвойствПродукции.НайтиСтроки(Новый Структура("Свойство", ТекущиеДанные.Свойство));
		
	Если НЕ ЗначениеЗаполнено(СтрокиТаблицыСвойств) Тогда
		Возврат;
	КонецЕсли;
	
	Условия = УправлениеДаннымиОбИзделияхКлиентСервер.СписокУсловийОтбораПоСвойствамНоменклатуры();
	Для каждого Условие Из Условия Цикл
		Если Условие.Сравнение 
			И НЕ СтрокиТаблицыСвойств[0].ТипЗначения.СодержитТип(Тип("Число"))
			И НЕ СтрокиТаблицыСвойств[0].ТипЗначения.СодержитТип(Тип("Дата"))
		Тогда
			Продолжить;
		КонецЕсли;
		СписокВыбора.Добавить(Условие.Идентификатор, Условие.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСвойствамПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьНастройку(Команда)
	
	ЗаписатьИЗакрытьНаКлиенте(Неопределено, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиФормулу(Команда)
	
	ПараметрыФормы = ПараметрыФормыРедактированияФормулы(АлгоритмРасчетаКоличества);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВводаФормулы", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.КонструкторФормул",
		ПараметрыФормы,
		,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФормулу(Команда)
	
	АлгоритмРасчетаКоличества = "";
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	// условия использования
	
	Условия = УправлениеДаннымиОбИзделияхКлиентСервер.СписокУсловийОтбораПоСвойствамНоменклатуры();
	Для каждого Условие Из Условия Цикл
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборПоСвойствамУсловие.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтборПоСвойствам.Условие");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Условие.Идентификатор;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Условие.Представление)
		
	КонецЦикла;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборПоСвойствамУсловие.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборПоСвойствамЗначение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтборПоСвойствам.Свойство");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборПоСвойствам.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьДополнительныеРеквизитыИСведения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// отбор по свойствам в интервале
	
	СписокУсловийИнтервал = Новый СписокЗначений;
	СписокУсловийИнтервал.Добавить("ВИнтервале");
	СписокУсловийИнтервал.Добавить("ВИнтервалеВключая");
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборПоСвойствамГруппаДиапазон.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборПоСвойствамЗначение1.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборПоСвойствамЗначение2.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтборПоСвойствам.Условие");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокУсловийИнтервал;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборПоСвойствамЗначение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтборПоСвойствам.Условие");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокУсловийИнтервал;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// отбор по свойствам на заполнено, не заполнено
	
	СписокУсловийЗаполненность = Новый СписокЗначений;
	СписокУсловийЗаполненность.Добавить("Заполнено");
	СписокУсловийЗаполненность.Добавить("НеЗаполнено");
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборПоСвойствамЗначение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтборПоСвойствам.Условие");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокУсловийЗаполненность;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьПоСоставуНастроек()
	
	Перем СоставНастроек;
	
	Если Параметры.Свойство("СоставНастроек") Тогда
		СоставНастроек = Параметры.СоставНастроек;
	КонецЕсли;
	
	Элементы.ГруппаОтборПоСвойствам.Видимость =(
			СоставНастроек = Неопределено ИЛИ СоставНастроек.Свойство("ОтборПоСвойствам")
		) И ИспользоватьДополнительныеРеквизитыИСведения;
	
	Элементы.ГруппаАлгоритмРасчетаКоличества.Доступность = (
			СоставНастроек = Неопределено ИЛИ СоставНастроек.Свойство("АлгоритмРасчетаКоличества"));

КонецПроцедуры

&НаСервере
Функция ПостроитьДеревоОперандов()
	
	Дерево = РаботаСФормулами.ПолучитьПустоеДеревоОперандов();
	
	Если ЭтоАдресВременногоХранилища(АдресДополнительныхДанных) Тогда
		
		СтруктураДанных = ПолучитьИзВременногоХранилища(АдресДополнительныхДанных);
		
		Для каждого КлючИЗначение Из СтруктураДанных Цикл
			
			Ключ = КлючИЗначение.Ключ;
			Источник = КлючИЗначение.Значение;
			
			Операнды = Неопределено;
			Если Источник.Свойство("Операнды", Операнды) И Операнды.Количество() > 0 Тогда
				
				ГруппаОперандов = РаботаСФормулами.ДобавитьОперанд(Дерево, "", Источник.Представление);
				
				Для каждого Операнд Из Операнды Цикл
					
					РаботаСФормулами.ДобавитьОперанд(ГруппаОперандов, Операнд.Идентификатор, Операнд.Представление);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(Дерево, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПараметрыФормыРедактированияФормулы(Формула)
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ИспользуетсяДеревоОперандов", Истина);
	
	ПараметрыФормы.Вставить("Формула",   Формула);
	ПараметрыФормы.Вставить("Операнды",  ПостроитьДеревоОперандов());
	
	ДеревоОператоров = УправлениеДаннымиОбИзделиях.ПостроитьДеревоОператоров();
	ПараметрыФормы.Вставить("Операторы", ПоместитьВоВременноеХранилище(ДеревоОператоров, УникальныйИдентификатор));
	
	ПараметрыФормы.Вставить("ОперандыЗаголовок", НСтр("ru = 'Доступные реквизиты'"));
	ПараметрыФормы.Вставить("НеИспользоватьПредставление", Истина);

	ПараметрыФормы.Вставить("ФункцииИзОбщегоМодуля", УправлениеДаннымиОбИзделиях.ФункцииИзОбщегоМодуля());
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВводаФормулы(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		АлгоритмРасчетаКоличества = РезультатЗакрытия;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьНаКлиенте(Результат, ДополнительныеПараметры) Экспорт 
	
	ОчиститьСообщения();
	
	ШаблонПолеНеЗаполнено  = НСтр("ru = 'Ошибка заполнения настройки в строке %1.'");
	ШаблонНеверноеСвойство = НСтр("ru = 'Указано неверное свойство в строке %1.'");
	
	ЕстьОшибки = Ложь;
	Реквизиты = УправлениеДаннымиОбИзделияхКлиентСервер.РеквизитыНастройкаОтбораПоСвойствам();
	
	ОтборПоСвойствамДляТекущейСтроки = Новый Массив;
	Для каждого СтрокаОтбора Из ОтборПоСвойствам Цикл
		
		Если СтрНайти(СтрокаОтбора.Условие, "ВИнтервале") Тогда
			ПоляПроверки = СтрРазделить(СтрЗаменить(Реквизиты,"Значение","Значение1,Значение2"), ",");
		Иначе
			ПоляПроверки = СтрРазделить(Реквизиты, ",");
		КонецЕсли;
		
		ИндексСтроки = ОтборПоСвойствам.Индекс(СтрокаОтбора);
		Для каждого Поле Из ПоляПроверки Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаОтбора[Поле])
				И НЕ СтрокаОтбора[Поле] = 0 
				И НЕ СтрНайти(СтрокаОтбора.Условие, "Заполнено") Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтрШаблон(ШаблонПолеНеЗаполнено,ИндексСтроки+1),,"ОтборПоСвойствам["+ИндексСтроки+"]."+Поле,,ЕстьОшибки);
			ИначеЕсли Поле = "Свойство" 
					И ТаблицаДоступныхСвойствПродукции.НайтиСтроки(Новый Структура("Свойство", СтрокаОтбора[Поле])).Количество() = 0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтрШаблон(ШаблонНеверноеСвойство,ИндексСтроки+1),,"ОтборПоСвойствам["+ИндексСтроки+"]."+Поле,,ЕстьОшибки);
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьОшибки Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрНайти(СтрокаОтбора.Условие, "ВСписке") Тогда
			Для каждого ЭлементСписка Из СтрокаОтбора.Значение Цикл
				ЭлементНастройкиУсловия = Новый Структура(Реквизиты);
				ЗаполнитьЗначенияСвойств(ЭлементНастройкиУсловия, СтрокаОтбора);
				ЭлементНастройкиУсловия.Значение = ЭлементСписка.Значение;
				ОтборПоСвойствамДляТекущейСтроки.Добавить(ЭлементНастройкиУсловия);
			КонецЦикла;
		ИначеЕсли СтрНайти(СтрокаОтбора.Условие, "ВИнтервале") Тогда
			ЭлементНастройкиУсловия = Новый Структура(Реквизиты);
			ЭлементНастройкиУсловия.Свойство = СтрокаОтбора.Свойство;
			ЭлементНастройкиУсловия.Условие  = ?(СтрокаОтбора.Условие = "ВИнтервале", "Больше", "БольшеИлиРавно");
			ЭлементНастройкиУсловия.Значение = СтрокаОтбора.Значение1;
			ОтборПоСвойствамДляТекущейСтроки.Добавить(ЭлементНастройкиУсловия);
			
			ЭлементНастройкиУсловия = Новый Структура(Реквизиты);
			ЭлементНастройкиУсловия.Свойство = СтрокаОтбора.Свойство;
			ЭлементНастройкиУсловия.Условие  = ?(СтрокаОтбора.Условие = "ВИнтервале", "Меньше", "МеньшеИлиРавно");
			ЭлементНастройкиУсловия.Значение = СтрокаОтбора.Значение2;
			ОтборПоСвойствамДляТекущейСтроки.Добавить(ЭлементНастройкиУсловия);
		Иначе
			ЭлементНастройкиУсловия = Новый Структура(Реквизиты);
			ЗаполнитьЗначенияСвойств(ЭлементНастройкиУсловия, СтрокаОтбора);
			ОтборПоСвойствамДляТекущейСтроки.Добавить(ЭлементНастройкиУсловия);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОтборПоСвойствам", ОтборПоСвойствамДляТекущейСтроки);
	ПараметрыФормы.Вставить("АлгоритмРасчетаКоличества", АлгоритмРасчетаКоличества);
	
	Модифицированность = Ложь;
	
	ОповеститьОВыборе(ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОграничениеТиповДляЗначенияСвойства(ТекущиеДанные, ТипЗначения)
	
	ПолеВводаЗначения = Элементы.ОтборПоСвойствамЗначение;
	
	ПараметрыВыбора = Новый Массив;
	Если ТипЗначения.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) Тогда
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Владелец", ТекущиеДанные.Свойство));
	КонецЕсли;
	
	ПолеВводаЗначения.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	Если СтрНайти(ТекущиеДанные.Условие, "ВСписке") Тогда
		ПолеВводаЗначения.ОграничениеТипа = Новый ОписаниеТипов("СписокЗначений");
	ИначеЕсли СтрНайти(ТекущиеДанные.Условие, "ВИнтервале") Тогда
		Элементы.ОтборПоСвойствамЗначение1.ОграничениеТипа = ТипЗначения;
		Элементы.ОтборПоСвойствамЗначение2.ОграничениеТипа = ТипЗначения;
	Иначе
		ПолеВводаЗначения.ОграничениеТипа = ТипЗначения;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокОтборовПоСвойствам()
	
	// Свойства основного изделия
	СписокВсехДоступныхСвойств = УправлениеДаннымиОбИзделиях.ПолучитьСвойстваНоменклатурыДляРасчетаПоФормулам(ВидИзделий);
	Для каждого ДанныеСвойства Из СписокВсехДоступныхСвойств Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДоступныхСвойствПродукции.Добавить(), ДанныеСвойства);
		Элементы.ОтборПоСвойствамСвойство.СписокВыбора.Добавить(ДанныеСвойства.Свойство, ДанныеСвойства.Представление);
	КонецЦикла;
	
	НастройкиГруппировки = Новый Структура;
	
	НастройкиГруппировки.Вставить("ВСписке",
							Новый Структура("Дополнение, Результат", "ВСписке", "ВСписке"));
	НастройкиГруппировки.Вставить("НеВСписке",
							Новый Структура("Дополнение, Результат", "НеВСписке", "НеВСписке"));
	НастройкиГруппировки.Вставить("Меньше",
							Новый Структура("Дополнение, Результат", "Больше", "ВИнтервале"));
	НастройкиГруппировки.Вставить("МеньшеИлиРавно",
							Новый Структура("Дополнение, Результат", "БольшеИлиРавно", "ВИнтервалеВключая"));
	
	ТекущаяСтрока = Неопределено;
	
	ОтборПоСвойствамДляТекущейСтроки = Параметры.ОтборПоСвойствам;
	Для каждого Элемент Из ОтборПоСвойствамДляТекущейСтроки Цикл
		
		Настройка = Неопределено;
		Если НастройкиГруппировки.Свойство(Элемент.Условие, Настройка)
			И ТекущаяСтрока <> Неопределено
			И ТекущаяСтрока.Свойство = Элемент.Свойство 
			И ТекущаяСтрока.Условие = Настройка.Дополнение Тогда
			
			Если Настройка.Дополнение = Настройка.Результат Тогда
				ТекущаяСтрока.Значение.Добавить(Элемент.Значение);
			Иначе
				ТекущаяСтрока.Значение1 = ТекущаяСтрока.Значение;
				ТекущаяСтрока.Значение2 = Элемент.Значение;
				ТекущаяСтрока.Условие   = Настройка.Результат;
				ТекущаяСтрока = Неопределено;
			КонецЕсли;
			
		Иначе
			ТекущаяСтрока = ОтборПоСвойствам.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Элемент);
			Если Настройка <> Неопределено И Настройка.Дополнение = Настройка.Результат Тогда
				ТекущаяСтрока.Значение = Новый СписокЗначений;
				ТекущаяСтрока.Значение.ТипЗначения = Элемент.Свойство.ТипЗначения;
				ТекущаяСтрока.Значение.Добавить(Элемент.Значение);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
